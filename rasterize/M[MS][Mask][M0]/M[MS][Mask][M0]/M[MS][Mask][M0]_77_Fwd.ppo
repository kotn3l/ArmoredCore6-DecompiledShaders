#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_0;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_29;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_10;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_6;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1391;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _223 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _224 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _225 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _231 = inversesqrt(dot(vec3(_223, _224, _225), vec3(_223, _224, _225)));
    float _232 = _231 * _223;
    float _233 = _231 * _224;
    float _234 = _231 * _225;
    float _238 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _239 = _238 * NORMAL.x;
    float _240 = _238 * NORMAL.y;
    float _241 = _238 * NORMAL.z;
    float _245 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _246 = _245 * TANGENT.x;
    float _247 = _245 * TANGENT.y;
    float _248 = _245 * TANGENT.z;
    uint _251 = uint(roundEven(NORMAL.w)) * 13u;
    uint _256 = _251 + 1u;
    uint _260 = _251 + 2u;
    float _269 = sqrt(((cbInstanceData._m0[_256].x * cbInstanceData._m0[_256].x) + (cbInstanceData._m0[_251].x * cbInstanceData._m0[_251].x)) + (cbInstanceData._m0[_260].x * cbInstanceData._m0[_260].x));
    float _270 = _269 * TEXCOORD.z;
    float _271 = _269 * TEXCOORD.w;
    vec4 _290 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _314 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _319 = _314.x * cbMtdParam._m0[11u].x;
    float _320 = _314.y * cbMtdParam._m0[11u].y;
    float _321 = _314.z * cbMtdParam._m0[11u].z;
    vec4 _340 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _270) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _271) + cbTextureTilingScale._m0[5u].w));
    vec4 _359 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _396 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _398 = _396.x;
    float _410 = dot(vec4(_398, _396.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _427 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _359.x) * 2.0) - ((((_398 - _410) * cbMtdParam._m0[24u].z) + _410) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3695 = isnan(0.0) ? _427 : (isnan(_427) ? 0.0 : max(_427, 0.0));
    float _428 = isnan(1.0) ? _3695 : (isnan(_3695) ? 1.0 : min(_3695, 1.0));
    float _435 = (_428 * ((_340.x * cbMtdParam._m0[12u].x) - _319)) + _319;
    float _436 = (_428 * ((_340.y * cbMtdParam._m0[12u].y) - _320)) + _320;
    float _437 = (_428 * ((_340.z * cbMtdParam._m0[12u].z) - _321)) + _321;
    vec4 _454 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _270) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _271) + cbTextureTilingScale._m0[3u].w));
    vec4 _474 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _476 = _474.x;
    float _486 = dot(vec4(_476, _474.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _500 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _359.y) * 2.0) - ((((_476 - _486) * cbMtdParam._m0[24u].z) + _486) * cbMtdParam._m0[20u].w))) + 1.0;
    float _3706 = isnan(0.0) ? _500 : (isnan(_500) ? 0.0 : max(_500, 0.0));
    float _501 = isnan(1.0) ? _3706 : (isnan(_3706) ? 1.0 : min(_3706, 1.0));
    float _514 = ((cbMtdParam._m0[9u].x * 4.55000019073486328125) * _290.x) * ((_501 * ((_454.x * cbMtdParam._m0[13u].x) - _435)) + _435);
    float _517 = ((cbMtdParam._m0[9u].y * 4.55000019073486328125) * _290.y) * ((_501 * ((_454.y * cbMtdParam._m0[13u].y) - _436)) + _436);
    float _520 = ((cbMtdParam._m0[9u].z * 4.55000019073486328125) * _290.z) * ((_501 * ((_454.z * cbMtdParam._m0[13u].z) - _437)) + _437);
    vec4 _538 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _270) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _271) + cbTextureTilingScale._m0[4u].w));
    vec4 _555 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _557 = _555.x;
    float _558 = _555.y;
    float _559 = _555.z;
    float _566 = ((_538.x - _557) * _428) + _557;
    float _567 = ((_538.y - _558) * _428) + _558;
    float _568 = ((_538.z - _559) * _428) + _559;
    vec4 _580 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _270) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _271) + cbTextureTilingScale._m0[2u].w));
    float _593 = ((_580.z - _568) * _501) + _568;
    float _596 = ((((_580.x - _566) * _501) + _566) * 2.0) + (-1.0);
    float _598 = ((((_580.y - _567) * _501) + _567) * 2.0) + (-1.0);
    float _599 = dot(vec2(_596, _598), vec2(_596, _598));
    float _3717 = isnan(0.0) ? _599 : (isnan(_599) ? 0.0 : max(_599, 0.0));
    float _604 = sqrt(1.0 - (isnan(1.0) ? _3717 : (isnan(_3717) ? 1.0 : min(_3717, 1.0))));
    vec4 _618 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _630 = (((_618.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _596;
    float _631 = (((_618.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _598;
    float _634 = fma(_604, _239, fma(_631, _246, _630 * _232));
    float _637 = fma(_604, _240, fma(_631, _247, _630 * _233));
    float _640 = fma(_604, _241, fma(_631, _248, _630 * _234));
    float _644 = inversesqrt(dot(vec3(_634, _637, _640), vec3(_634, _637, _640)));
    vec4 _671 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _270) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _271) + cbTextureTilingScale._m0[11u].w));
    float _673 = _671.x;
    float _674 = 1.0 - _673;
    float _680 = (cbMtdParam._m0[19u].x + dot(vec4(_644 * _634, _644 * _637, _644 * _640, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_673 - _674) * cbMtdParam._m0[24u].w) + _674) * cbMtdParam._m0[21u].z);
    float _3728 = isnan(0.0) ? _680 : (isnan(_680) ? 0.0 : max(_680, 0.0));
    float _681 = isnan(1.0) ? _3728 : (isnan(_3728) ? 1.0 : min(_3728, 1.0));
    float _683 = (-0.0) - cbMtdParam._m0[24u].x;
    float _685 = isnan(0.0) ? _683 : (isnan(_683) ? 0.0 : max(_683, 0.0));
    float _686 = isnan(1.0) ? _685 : (isnan(_685) ? 1.0 : min(_685, 1.0));
    float _693 = _681 - ((_681 * TEXCOORD_8.x) * _686);
    float _694 = _681 - ((_681 * TEXCOORD_8.y) * _686);
    float _695 = _681 - ((_681 * TEXCOORD_8.z) * _686);
    float _702 = (_693 * (cbMtdParam._m0[17u].x - _514)) + _514;
    float _703 = (_694 * (cbMtdParam._m0[17u].y - _517)) + _517;
    float _704 = (_695 * (cbMtdParam._m0[17u].z - _520)) + _520;
    vec4 _716 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _270) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _271) + cbTextureTilingScale._m0[19u].w));
    float _718 = _716.x;
    float _719 = 1.0 - _718;
    float _747 = (TEXCOORD_8.x - ((cbMtdParam._m0[22u].w * (1.0 - TEXCOORD_8.x)) * ((((_718 - _719) * cbMtdParam._m0[24u].y) + _719) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3749 = isnan(0.0) ? _747 : (isnan(_747) ? 0.0 : max(_747, 0.0));
    float _748 = isnan(1.0) ? _3749 : (isnan(_3749) ? 1.0 : min(_3749, 1.0));
    float _756 = ((((cbMtdParam._m0[10u].x - _702) * TEXCOORD_8.x) * cbMtdParam._m0[23u].w) * _748) + _702;
    float _757 = ((((cbMtdParam._m0[10u].y - _703) * TEXCOORD_8.y) * cbMtdParam._m0[23u].w) * _748) + _703;
    float _758 = (((cbMtdParam._m0[23u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _704)) * _748) + _704;
    float _762 = (cbMtdParam._m0[19u].w * (_618.z - _593)) + _593;
    vec4 _776 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _270) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _271) + cbTextureTilingScale._m0[15u].w));
    float _783 = (_776.x * 2.0) + (-1.0);
    float _784 = (_776.y * 2.0) + (-1.0);
    float _785 = dot(vec2(_783, _784), vec2(_783, _784));
    float _3760 = isnan(0.0) ? _785 : (isnan(_785) ? 0.0 : max(_785, 0.0));
    float _793 = ((_776.z - _762) * _693) + _762;
    float _796 = ((cbMtdParam._m0[23u].y - _793) * _748) + _793;
    vec4 _815 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _270) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _271) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _821 = (_815.x * 2.0) + (-1.0);
    float _822 = (_815.y * 2.0) + (-1.0);
    float _823 = dot(vec2(_821, _822), vec2(_821, _822));
    float _3771 = isnan(0.0) ? _823 : (isnan(_823) ? 0.0 : max(_823, 0.0));
    float _838 = ((sqrt(1.0 - (isnan(1.0) ? _3760 : (isnan(_3760) ? 1.0 : min(_3760, 1.0)))) - _604) * _695) + _604;
    float _841 = (((_783 - _630) * _693) + _630) + (cbMtdParam._m0[21u].x * _630);
    float _842 = (((_784 - _631) * _694) + _631) + (cbMtdParam._m0[21u].x * _631);
    float _853 = (((_821 - _841) + (_841 * cbMtdParam._m0[22u].z)) * _748) + _841;
    float _854 = (((_822 - _842) + (_842 * cbMtdParam._m0[22u].z)) * _748) + _842;
    float _855 = (_748 * (sqrt(1.0 - (isnan(1.0) ? _3771 : (isnan(_3771) ? 1.0 : min(_3771, 1.0)))) - _838)) + _838;
    float _857 = cbMtdParam._m0[22u].x + _618.w;
    float _860 = fma(_855, _239, fma(_854, _246, _853 * _232));
    float _863 = fma(_855, _240, fma(_854, _247, _853 * _233));
    float _866 = fma(_855, _241, fma(_854, _248, _853 * _234));
    float _870 = inversesqrt(dot(vec3(_860, _863, _866), vec3(_860, _863, _866)));
    float _871 = _870 * _860;
    float _872 = _870 * _863;
    float _873 = _870 * _866;
    float _3782 = isnan(0.0) ? _796 : (isnan(_796) ? 0.0 : max(_796, 0.0));
    float _874 = isnan(1.0) ? _3782 : (isnan(_3782) ? 1.0 : min(_3782, 1.0));
    float _3793 = isnan(0.0) ? _857 : (isnan(_857) ? 0.0 : max(_857, 0.0));
    float _3804 = isnan(0.0) ? _756 : (isnan(_756) ? 0.0 : max(_756, 0.0));
    float _3815 = isnan(0.0) ? _757 : (isnan(_757) ? 0.0 : max(_757, 0.0));
    float _3826 = isnan(0.0) ? _758 : (isnan(_758) ? 0.0 : max(_758, 0.0));
    float _892 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _932 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _942 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _932);
    float _943 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _932);
    float _944 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _932);
    float _948 = inversesqrt(dot(vec3(_942, _943, _944), vec3(_942, _943, _944)));
    float _949 = _942 * _948;
    float _950 = _943 * _948;
    float _951 = _944 * _948;
    float _957 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _958 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _976 = fma(_873, cbSceneParam._m0[5u].z, fma(_872, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _871));
    float _979 = fma(_873, cbSceneParam._m0[6u].z, fma(_872, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _871));
    float _982 = fma(_873, cbSceneParam._m0[7u].z, fma(_872, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _871));
    uint _996 = (_251 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _1002 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3804 : (isnan(_3804) ? 1.0 : min(_3804, 1.0)))) * cbInstanceData._m0[_996].x;
    float _1003 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3815 : (isnan(_3815) ? 1.0 : min(_3815, 1.0)))) * cbInstanceData._m0[_996].y;
    float _1004 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3826 : (isnan(_3826) ? 1.0 : min(_3826, 1.0)))) * cbInstanceData._m0[_996].z;
    float _3837 = isnan(0.0) ? _1002 : (isnan(_1002) ? 0.0 : max(_1002, 0.0));
    float _1005 = isnan(1.0) ? _3837 : (isnan(_3837) ? 1.0 : min(_3837, 1.0));
    float _3848 = isnan(0.0) ? _1003 : (isnan(_1003) ? 0.0 : max(_1003, 0.0));
    float _1006 = isnan(1.0) ? _3848 : (isnan(_3848) ? 1.0 : min(_3848, 1.0));
    float _3859 = isnan(0.0) ? _1004 : (isnan(_1004) ? 0.0 : max(_1004, 0.0));
    float _1007 = isnan(1.0) ? _3859 : (isnan(_3859) ? 1.0 : min(_3859, 1.0));
    vec4 _1016 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _957, cbSceneParam._m0[86u].y * _958));
    float _1020 = ((isnan(1.0) ? _3793 : (isnan(_3793) ? 1.0 : min(_3793, 1.0))) * TEXCOORD_5.w) * _1016.x;
    float _1021 = dot(vec3(_871, _872, _873), vec3(_949, _950, _951));
    float _1024 = _1021 * 2.0;
    float _1028 = (_1024 * _871) - _949;
    float _1029 = (_1024 * _872) - _950;
    float _1030 = (_1024 * _873) - _951;
    float _1034 = abs(dot(vec3(_949, _950, _951), vec3(_871, _872, _873)));
    float _3870 = isnan(0.0) ? _1034 : (isnan(_1034) ? 0.0 : max(_1034, 0.0));
    float _1036 = sqrt(_874);
    float _1049 = exp2((_1036 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3870 : (isnan(_3870) ? 1.0 : min(_3870, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1036 * 3.0));
    float _1081 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1085 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1089 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1390;
    float _1392;
    float _1393;
    float _1394;
    float _1395;
    float _1396;
    float _1397;
    float _1398;
    float _1399;
    float _1400;
    float _1401;
    float _1402;
    float _1403;
    float _1404;
    float _1405;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1115 = fma(_1089, cbModelParam._m0[26u].z, fma(_1085, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1081));
        float _1119 = fma(_1089, cbModelParam._m0[27u].z, fma(_1085, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1081));
        float _1123 = fma(_1089, cbModelParam._m0[28u].z, fma(_1085, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1081));
        float _1148 = _1081 + _871;
        float _1149 = _1085 + _872;
        float _1150 = _1089 + _873;
        float _1160 = fma(_1150, cbModelParam._m0[26u].z, fma(_1149, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1148)) - _1115;
        float _1161 = fma(_1150, cbModelParam._m0[27u].z, fma(_1149, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1148)) - _1119;
        float _1162 = fma(_1150, cbModelParam._m0[28u].z, fma(_1149, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1148)) - _1123;
        float _1166 = inversesqrt(dot(vec3(_1160, _1161, _1162), vec3(_1160, _1161, _1162)));
        float _1179 = ((_1166 * _1160) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1115 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1180 = ((_1166 * _1161) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1119 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1181 = ((_1166 * _1162) / cbModelParam._m0[34u].z) + ((((((_1123 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1184 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1179, _1180, _1181), 0.0);
        vec4 _1191 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1179, _1180, _1181), 0.0);
        vec4 _1198 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1179, _1180, _1181), 0.0);
        vec4 _1205 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1179, _1180, _1181), 0.0);
        float _1218 = exp2((_1184.w + (-0.5)) * 20.0) * 2.0;
        float _1219 = _1218 * (_1184.x + (-0.5));
        float _1220 = _1218 * (_1184.y + (-0.5));
        float _1221 = _1218 * (_1184.z + (-0.5));
        float _1228 = exp2((_1191.w + (-0.5)) * 20.0) * 2.0;
        float _1229 = _1228 * (_1191.x + (-0.5));
        float _1230 = _1228 * (_1191.y + (-0.5));
        float _1231 = _1228 * (_1191.z + (-0.5));
        float _1238 = exp2((_1198.w + (-0.5)) * 20.0) * 2.0;
        float _1239 = _1238 * (_1198.x + (-0.5));
        float _1240 = _1238 * (_1198.y + (-0.5));
        float _1241 = _1238 * (_1198.z + (-0.5));
        float _1248 = exp2((_1205.w + (-0.5)) * 20.0) * 2.0;
        float _1249 = _1248 * (_1205.x + (-0.5));
        float _1250 = _1248 * (_1205.y + (-0.5));
        float _1251 = _1248 * (_1205.z + (-0.5));
        float _1252 = isnan(0.0) ? _1249 : (isnan(_1249) ? 0.0 : max(_1249, 0.0));
        float _1253 = isnan(0.0) ? _1250 : (isnan(_1250) ? 0.0 : max(_1250, 0.0));
        float _1254 = isnan(0.0) ? _1251 : (isnan(_1251) ? 0.0 : max(_1251, 0.0));
        float _1255 = _1219 * 0.5;
        float _1256 = _1229 * 0.5;
        float _1257 = _1239 * 0.5;
        float _1258 = dot(vec3(_1255, _1256, _1257), vec3(_1255, _1256, _1257));
        float _1263 = (_1258 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1258);
        float _1272 = (dot(vec3(_871, _872, _873), vec3(_1263 * _1255, _1263 * _1256, _1263 * _1257)) + 1.0) * 0.5;
        float _3896 = isnan(0.0) ? _1272 : (isnan(_1272) ? 0.0 : max(_1272, 0.0));
        float _1282 = sqrt(((_1256 * _1256) + (_1255 * _1255)) + (_1257 * _1257)) / (_1252 + 9.9999997473787516355514526367188e-06);
        float _3907 = isnan(0.0) ? _1282 : (isnan(_1282) ? 0.0 : max(_1282, 0.0));
        float _1283 = isnan(1.0) ? _3907 : (isnan(_3907) ? 1.0 : min(_3907, 1.0));
        float _1284 = _1283 * 2.0;
        float _1288 = (1.0 - _1283) / (_1283 + 1.0);
        float _3918 = isnan(0.0) ? _1288 : (isnan(_1288) ? 0.0 : max(_1288, 0.0));
        float _1289 = isnan(1.0) ? _3918 : (isnan(_3918) ? 1.0 : min(_3918, 1.0));
        float _1298 = ((((1.0 - _1289) * (_1284 + 2.0)) * exp2(log2(isnan(1.0) ? _3896 : (isnan(_3896) ? 1.0 : min(_3896, 1.0))) * (_1284 + 1.0))) + _1289) * _1252;
        float _1299 = _1220 * 0.5;
        float _1300 = _1230 * 0.5;
        float _1301 = _1240 * 0.5;
        float _1302 = dot(vec3(_1299, _1300, _1301), vec3(_1299, _1300, _1301));
        float _1307 = (_1302 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1302);
        float _1315 = (dot(vec3(_871, _872, _873), vec3(_1307 * _1299, _1307 * _1300, _1307 * _1301)) + 1.0) * 0.5;
        float _3929 = isnan(0.0) ? _1315 : (isnan(_1315) ? 0.0 : max(_1315, 0.0));
        float _1324 = sqrt(((_1300 * _1300) + (_1299 * _1299)) + (_1301 * _1301)) / (_1253 + 9.9999997473787516355514526367188e-06);
        float _3940 = isnan(0.0) ? _1324 : (isnan(_1324) ? 0.0 : max(_1324, 0.0));
        float _1325 = isnan(1.0) ? _3940 : (isnan(_3940) ? 1.0 : min(_3940, 1.0));
        float _1326 = _1325 * 2.0;
        float _1330 = (1.0 - _1325) / (_1325 + 1.0);
        float _3951 = isnan(0.0) ? _1330 : (isnan(_1330) ? 0.0 : max(_1330, 0.0));
        float _1331 = isnan(1.0) ? _3951 : (isnan(_3951) ? 1.0 : min(_3951, 1.0));
        float _1340 = ((((1.0 - _1331) * (_1326 + 2.0)) * exp2(log2(isnan(1.0) ? _3929 : (isnan(_3929) ? 1.0 : min(_3929, 1.0))) * (_1326 + 1.0))) + _1331) * _1253;
        float _1341 = _1221 * 0.5;
        float _1342 = _1231 * 0.5;
        float _1343 = _1241 * 0.5;
        float _1344 = dot(vec3(_1341, _1342, _1343), vec3(_1341, _1342, _1343));
        float _1349 = (_1344 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1344);
        float _1357 = (dot(vec3(_871, _872, _873), vec3(_1349 * _1341, _1349 * _1342, _1349 * _1343)) + 1.0) * 0.5;
        float _3962 = isnan(0.0) ? _1357 : (isnan(_1357) ? 0.0 : max(_1357, 0.0));
        float _1366 = sqrt(((_1342 * _1342) + (_1341 * _1341)) + (_1343 * _1343)) / (_1254 + 9.9999997473787516355514526367188e-06);
        float _3973 = isnan(0.0) ? _1366 : (isnan(_1366) ? 0.0 : max(_1366, 0.0));
        float _1367 = isnan(1.0) ? _3973 : (isnan(_3973) ? 1.0 : min(_3973, 1.0));
        float _1368 = _1367 * 2.0;
        float _1372 = (1.0 - _1367) / (_1367 + 1.0);
        float _3984 = isnan(0.0) ? _1372 : (isnan(_1372) ? 0.0 : max(_1372, 0.0));
        float _1373 = isnan(1.0) ? _3984 : (isnan(_3984) ? 1.0 : min(_3984, 1.0));
        float _1382 = ((((1.0 - _1373) * (_1368 + 2.0)) * exp2(log2(isnan(1.0) ? _3962 : (isnan(_3962) ? 1.0 : min(_3962, 1.0))) * (_1368 + 1.0))) + _1373) * _1254;
        _1390 = _1221;
        _1392 = _1220;
        _1393 = _1219;
        _1394 = _1231;
        _1395 = _1230;
        _1396 = _1229;
        _1397 = _1241;
        _1398 = _1240;
        _1399 = _1239;
        _1400 = _1254;
        _1401 = _1253;
        _1402 = _1252;
        _1403 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1298 : (isnan(_1298) ? 0.0 : max(_1298, 0.0)));
        _1404 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1340 : (isnan(_1340) ? 0.0 : max(_1340, 0.0)));
        _1405 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1382 : (isnan(_1382) ? 0.0 : max(_1382, 0.0)));
    }
    else
    {
        _1390 = _1391;
        _1392 = _1391;
        _1393 = _1391;
        _1394 = _1391;
        _1395 = _1391;
        _1396 = _1391;
        _1397 = _1391;
        _1398 = _1391;
        _1399 = _1391;
        _1400 = _1391;
        _1401 = _1391;
        _1402 = _1391;
        _1403 = 0.0;
        _1404 = 0.0;
        _1405 = 0.0;
    }
    float _1698;
    float _1699;
    float _1700;
    float _1701;
    float _1702;
    float _1703;
    float _1704;
    float _1705;
    float _1706;
    float _1707;
    float _1708;
    float _1709;
    float _1710;
    float _1711;
    float _1712;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1429 = fma(_1089, cbModelParam._m0[30u].z, fma(_1085, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1081));
        float _1433 = fma(_1089, cbModelParam._m0[31u].z, fma(_1085, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1081));
        float _1437 = fma(_1089, cbModelParam._m0[32u].z, fma(_1085, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1081));
        float _1460 = _1081 + _871;
        float _1461 = _1085 + _872;
        float _1462 = _1089 + _873;
        float _1472 = fma(_1462, cbModelParam._m0[30u].z, fma(_1461, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1460)) - _1429;
        float _1473 = fma(_1462, cbModelParam._m0[31u].z, fma(_1461, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1460)) - _1433;
        float _1474 = fma(_1462, cbModelParam._m0[32u].z, fma(_1461, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1460)) - _1437;
        float _1478 = inversesqrt(dot(vec3(_1472, _1473, _1474), vec3(_1472, _1473, _1474)));
        float _1491 = ((_1478 * _1472) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1429 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1492 = ((_1478 * _1473) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1433 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1493 = ((_1478 * _1474) / cbModelParam._m0[35u].z) + ((((((_1437 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1495 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1491, _1492, _1493), 0.0);
        vec4 _1502 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1491, _1492, _1493), 0.0);
        vec4 _1509 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1491, _1492, _1493), 0.0);
        vec4 _1516 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1491, _1492, _1493), 0.0);
        float _1528 = exp2((_1495.w + (-0.5)) * 20.0) * 2.0;
        float _1529 = _1528 * (_1495.x + (-0.5));
        float _1530 = _1528 * (_1495.y + (-0.5));
        float _1531 = _1528 * (_1495.z + (-0.5));
        float _1538 = exp2((_1502.w + (-0.5)) * 20.0) * 2.0;
        float _1539 = _1538 * (_1502.x + (-0.5));
        float _1540 = _1538 * (_1502.y + (-0.5));
        float _1541 = _1538 * (_1502.z + (-0.5));
        float _1548 = exp2((_1509.w + (-0.5)) * 20.0) * 2.0;
        float _1549 = _1548 * (_1509.x + (-0.5));
        float _1550 = _1548 * (_1509.y + (-0.5));
        float _1551 = _1548 * (_1509.z + (-0.5));
        float _1558 = exp2((_1516.w + (-0.5)) * 20.0) * 2.0;
        float _1559 = _1558 * (_1516.x + (-0.5));
        float _1560 = _1558 * (_1516.y + (-0.5));
        float _1561 = _1558 * (_1516.z + (-0.5));
        float _1562 = isnan(0.0) ? _1559 : (isnan(_1559) ? 0.0 : max(_1559, 0.0));
        float _1563 = isnan(0.0) ? _1560 : (isnan(_1560) ? 0.0 : max(_1560, 0.0));
        float _1564 = isnan(0.0) ? _1561 : (isnan(_1561) ? 0.0 : max(_1561, 0.0));
        float _1565 = _1529 * 0.5;
        float _1566 = _1539 * 0.5;
        float _1567 = _1549 * 0.5;
        float _1568 = dot(vec3(_1565, _1566, _1567), vec3(_1565, _1566, _1567));
        float _1573 = (_1568 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1568);
        float _1581 = (dot(vec3(_871, _872, _873), vec3(_1573 * _1565, _1573 * _1566, _1573 * _1567)) + 1.0) * 0.5;
        float _4025 = isnan(0.0) ? _1581 : (isnan(_1581) ? 0.0 : max(_1581, 0.0));
        float _1590 = sqrt(((_1566 * _1566) + (_1565 * _1565)) + (_1567 * _1567)) / (_1562 + 9.9999997473787516355514526367188e-06);
        float _4036 = isnan(0.0) ? _1590 : (isnan(_1590) ? 0.0 : max(_1590, 0.0));
        float _1591 = isnan(1.0) ? _4036 : (isnan(_4036) ? 1.0 : min(_4036, 1.0));
        float _1592 = _1591 * 2.0;
        float _1596 = (1.0 - _1591) / (_1591 + 1.0);
        float _4047 = isnan(0.0) ? _1596 : (isnan(_1596) ? 0.0 : max(_1596, 0.0));
        float _1597 = isnan(1.0) ? _4047 : (isnan(_4047) ? 1.0 : min(_4047, 1.0));
        float _1606 = ((((1.0 - _1597) * (_1592 + 2.0)) * exp2(log2(isnan(1.0) ? _4025 : (isnan(_4025) ? 1.0 : min(_4025, 1.0))) * (_1592 + 1.0))) + _1597) * _1562;
        float _1607 = _1530 * 0.5;
        float _1608 = _1540 * 0.5;
        float _1609 = _1550 * 0.5;
        float _1610 = dot(vec3(_1607, _1608, _1609), vec3(_1607, _1608, _1609));
        float _1615 = (_1610 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1610);
        float _1623 = (dot(vec3(_871, _872, _873), vec3(_1615 * _1607, _1615 * _1608, _1615 * _1609)) + 1.0) * 0.5;
        float _4058 = isnan(0.0) ? _1623 : (isnan(_1623) ? 0.0 : max(_1623, 0.0));
        float _1632 = sqrt(((_1608 * _1608) + (_1607 * _1607)) + (_1609 * _1609)) / (_1563 + 9.9999997473787516355514526367188e-06);
        float _4069 = isnan(0.0) ? _1632 : (isnan(_1632) ? 0.0 : max(_1632, 0.0));
        float _1633 = isnan(1.0) ? _4069 : (isnan(_4069) ? 1.0 : min(_4069, 1.0));
        float _1634 = _1633 * 2.0;
        float _1638 = (1.0 - _1633) / (_1633 + 1.0);
        float _4080 = isnan(0.0) ? _1638 : (isnan(_1638) ? 0.0 : max(_1638, 0.0));
        float _1639 = isnan(1.0) ? _4080 : (isnan(_4080) ? 1.0 : min(_4080, 1.0));
        float _1648 = ((((1.0 - _1639) * (_1634 + 2.0)) * exp2(log2(isnan(1.0) ? _4058 : (isnan(_4058) ? 1.0 : min(_4058, 1.0))) * (_1634 + 1.0))) + _1639) * _1563;
        float _1649 = _1531 * 0.5;
        float _1650 = _1541 * 0.5;
        float _1651 = _1551 * 0.5;
        float _1652 = dot(vec3(_1649, _1650, _1651), vec3(_1649, _1650, _1651));
        float _1657 = (_1652 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1652);
        float _1665 = (dot(vec3(_871, _872, _873), vec3(_1657 * _1649, _1657 * _1650, _1657 * _1651)) + 1.0) * 0.5;
        float _4091 = isnan(0.0) ? _1665 : (isnan(_1665) ? 0.0 : max(_1665, 0.0));
        float _1674 = sqrt(((_1650 * _1650) + (_1649 * _1649)) + (_1651 * _1651)) / (_1564 + 9.9999997473787516355514526367188e-06);
        float _4102 = isnan(0.0) ? _1674 : (isnan(_1674) ? 0.0 : max(_1674, 0.0));
        float _1675 = isnan(1.0) ? _4102 : (isnan(_4102) ? 1.0 : min(_4102, 1.0));
        float _1676 = _1675 * 2.0;
        float _1680 = (1.0 - _1675) / (_1675 + 1.0);
        float _4113 = isnan(0.0) ? _1680 : (isnan(_1680) ? 0.0 : max(_1680, 0.0));
        float _1681 = isnan(1.0) ? _4113 : (isnan(_4113) ? 1.0 : min(_4113, 1.0));
        float _1690 = ((((1.0 - _1681) * (_1676 + 2.0)) * exp2(log2(isnan(1.0) ? _4091 : (isnan(_4091) ? 1.0 : min(_4091, 1.0))) * (_1676 + 1.0))) + _1681) * _1564;
        _1698 = _1531;
        _1699 = _1530;
        _1700 = _1529;
        _1701 = _1541;
        _1702 = _1540;
        _1703 = _1539;
        _1704 = _1551;
        _1705 = _1550;
        _1706 = _1549;
        _1707 = _1564;
        _1708 = _1563;
        _1709 = _1562;
        _1710 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1606 : (isnan(_1606) ? 0.0 : max(_1606, 0.0)));
        _1711 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1648 : (isnan(_1648) ? 0.0 : max(_1648, 0.0)));
        _1712 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1690 : (isnan(_1690) ? 0.0 : max(_1690, 0.0)));
    }
    else
    {
        _1698 = _1391;
        _1699 = _1391;
        _1700 = _1391;
        _1701 = _1391;
        _1702 = _1391;
        _1703 = _1391;
        _1704 = _1391;
        _1705 = _1391;
        _1706 = _1391;
        _1707 = _1391;
        _1708 = _1391;
        _1709 = _1391;
        _1710 = 0.0;
        _1711 = 0.0;
        _1712 = 0.0;
    }
    float _1722 = (cbModelParam._m0[1u].x * (_1710 - _1403)) + _1403;
    float _1723 = (cbModelParam._m0[1u].x * (_1711 - _1404)) + _1404;
    float _1724 = (cbModelParam._m0[1u].x * (_1712 - _1405)) + _1405;
    float _1745 = fma(_1724, cbSceneParam._m0[89u].z, fma(_1723, cbSceneParam._m0[89u].y, _1722 * cbSceneParam._m0[89u].x));
    float _1748 = fma(_1724, cbSceneParam._m0[90u].z, fma(_1723, cbSceneParam._m0[90u].y, _1722 * cbSceneParam._m0[90u].x));
    float _1751 = fma(_1724, cbSceneParam._m0[91u].z, fma(_1723, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1722));
    float _1766 = _1028 * 0.5;
    float _1767 = _1029 * 0.5;
    float _1768 = _1030 * 0.5;
    float _1769 = dot(vec4(_1766, _1767, _1768, 1.0), vec4(_1700, _1703, _1706, _1709));
    float _1772 = dot(vec4(_1766, _1767, _1768, 1.0), vec4(_1699, _1702, _1705, _1708));
    float _1775 = dot(vec4(_1766, _1767, _1768, 1.0), vec4(_1698, _1701, _1704, _1707));
    float _1809;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1782 = dot(vec4(_1766, _1767, _1768, 1.0), vec4(_1390, _1394, _1397, _1400));
        float _1786 = dot(vec4(_1766, _1767, _1768, 1.0), vec4(_1392, _1395, _1398, _1401));
        float _1790 = dot(vec4(_1766, _1767, _1768, 1.0), vec4(_1393, _1396, _1399, _1402));
        float _1797 = dot(vec4(cbModelParam._m0[39u]), vec4(_1766, _1767, _1768, 1.0));
        _1809 = dot(vec3(isnan(0.0) ? _1790 : (isnan(_1790) ? 0.0 : max(_1790, 0.0)), isnan(0.0) ? _1786 : (isnan(_1786) ? 0.0 : max(_1786, 0.0)), isnan(0.0) ? _1782 : (isnan(_1782) ? 0.0 : max(_1782, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1797) ? 0.0 : (isnan(0.0) ? _1797 : max(0.0, _1797))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1809 = 1.0;
    }
    float _1820;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1811 = dot(vec4(cbModelParam._m0[40u]), vec4(_1766, _1767, _1768, 1.0));
        _1820 = dot(vec3(isnan(0.0) ? _1769 : (isnan(_1769) ? 0.0 : max(_1769, 0.0)), isnan(0.0) ? _1772 : (isnan(_1772) ? 0.0 : max(_1772, 0.0)), isnan(0.0) ? _1775 : (isnan(_1775) ? 0.0 : max(_1775, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1811) ? 0.0 : (isnan(0.0) ? _1811 : max(0.0, _1811))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1820 = 1.0;
    }
    float _1824 = (_1820 * cbModelParam._m0[1u].x) + (_1809 * (1.0 - cbModelParam._m0[1u].x));
    float _1834 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _874);
    float _1835 = isnan(_1834) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1834 : min(cbModelParam._m0[25u].z, _1834));
    float _1916;
    float _1918;
    float _1920;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1883 = fma(_1089, cbModelParam._m0[13u].z, fma(_1085, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1081)) + cbModelParam._m0[13u].w;
        float _1887 = fma(_1089, cbModelParam._m0[14u].z, fma(_1085, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1081)) + cbModelParam._m0[14u].w;
        float _1891 = fma(_1089, cbModelParam._m0[15u].z, fma(_1085, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1081)) + cbModelParam._m0[15u].w;
        float _1894 = fma(_1030, cbModelParam._m0[13u].z, fma(_1029, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1028));
        float _1897 = fma(_1030, cbModelParam._m0[14u].z, fma(_1029, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1028));
        float _1900 = fma(_1030, cbModelParam._m0[15u].z, fma(_1029, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1028));
        float _1928;
        if (_1894 > 0.0)
        {
            _1928 = abs((1.0 - _1883) / _1894);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1894 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1883 + 1.0) / _1894);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1928 = frontier_phi_14_12_ladder;
        }
        float _2129;
        if (_1897 > 0.0)
        {
            _2129 = abs((1.0 - _1887) / _1897);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1897 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1887 + 1.0) / _1897);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2129 = frontier_phi_23_19_ladder;
        }
        float _2372;
        if (_1900 > 0.0)
        {
            _2372 = abs((1.0 - _1891) / _1900);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1900 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1891 + 1.0) / _1900);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2372 = frontier_phi_35_30_ladder;
        }
        float _2374 = isnan(_2129) ? _1928 : (isnan(_1928) ? _2129 : min(_1928, _2129));
        float _2375 = isnan(_2372) ? _2374 : (isnan(_2374) ? _2372 : min(_2374, _2372));
        float _2379 = (_2375 * _1894) + _1883;
        float _2380 = (_2375 * _1897) + _1887;
        float _2381 = (_2375 * _1900) + _1891;
        float _2382 = _2375 * 9.9999997473787516355514526367188e-05;
        float _2384 = (-1.0) - _2382;
        float _2386 = _2382 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2381 > _2386) || ((_2381 < _2384) || ((_2380 > _2386) || ((_2380 < _2384) || ((_2379 < _2384) || (_2379 > _2386))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2505 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2381, cbModelParam._m0[9u].z, fma(_2380, cbModelParam._m0[9u].y, _2379 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2381, cbModelParam._m0[10u].z, fma(_2380, cbModelParam._m0[10u].y, _2379 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2381, cbModelParam._m0[11u].z, fma(_2380, cbModelParam._m0[11u].y, _2379 * cbModelParam._m0[11u].x))), _1835);
            frontier_phi_13_35_ladder = _2505.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2505.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2505.x * cbModelParam._m0[1u].y;
        }
        _1916 = frontier_phi_13_35_ladder_2;
        _1918 = frontier_phi_13_35_ladder_1;
        _1920 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1904 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1028, _1029, _1030), _1835);
        _1916 = _1904.x * cbModelParam._m0[1u].y;
        _1918 = _1904.y * cbModelParam._m0[1u].y;
        _1920 = _1904.z * cbModelParam._m0[1u].y;
    }
    float _1924 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _874);
    float _1925 = isnan(_1924) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1924 : min(cbModelParam._m0[25u].w, _1924));
    float _2015;
    float _2017;
    float _2019;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1979 = fma(_1089, cbModelParam._m0[21u].z, fma(_1085, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1081)) + cbModelParam._m0[21u].w;
        float _1983 = fma(_1089, cbModelParam._m0[22u].z, fma(_1085, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1081)) + cbModelParam._m0[22u].w;
        float _1987 = fma(_1089, cbModelParam._m0[23u].z, fma(_1085, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1081)) + cbModelParam._m0[23u].w;
        float _1990 = fma(_1030, cbModelParam._m0[21u].z, fma(_1029, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1028));
        float _1993 = fma(_1030, cbModelParam._m0[22u].z, fma(_1029, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1028));
        float _1996 = fma(_1030, cbModelParam._m0[23u].z, fma(_1029, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1028));
        float _2134;
        if (_1990 > 0.0)
        {
            _2134 = abs((1.0 - _1979) / _1990);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1990 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1979 + 1.0) / _1990);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2134 = frontier_phi_25_21_ladder;
        }
        float _2399;
        if (_1993 > 0.0)
        {
            _2399 = abs((1.0 - _1983) / _1993);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1993 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1983 + 1.0) / _1993);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2399 = frontier_phi_37_32_ladder;
        }
        float _2604;
        if (_1996 > 0.0)
        {
            _2604 = abs((1.0 - _1987) / _1996);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1996 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1987 + 1.0) / _1996);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2604 = frontier_phi_46_43_ladder;
        }
        float _2606 = isnan(_2399) ? _2134 : (isnan(_2134) ? _2399 : min(_2134, _2399));
        float _2607 = isnan(_2604) ? _2606 : (isnan(_2606) ? _2604 : min(_2606, _2604));
        float _2611 = (_2607 * _1990) + _1979;
        float _2612 = (_2607 * _1993) + _1983;
        float _2613 = (_2607 * _1996) + _1987;
        float _2614 = _2607 * 9.9999997473787516355514526367188e-05;
        float _2615 = (-1.0) - _2614;
        float _2617 = _2614 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2613 > _2617) || ((_2613 < _2615) || ((_2612 > _2617) || ((_2612 < _2615) || ((_2611 < _2615) || (_2611 > _2617))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2812 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2613, cbModelParam._m0[17u].z, fma(_2612, cbModelParam._m0[17u].y, _2611 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2613, cbModelParam._m0[18u].z, fma(_2612, cbModelParam._m0[18u].y, _2611 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2613, cbModelParam._m0[19u].z, fma(_2612, cbModelParam._m0[19u].y, _2611 * cbModelParam._m0[19u].x))), _1925);
            frontier_phi_22_46_ladder = _2812.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2812.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2812.x * cbModelParam._m0[1u].z;
        }
        _2015 = frontier_phi_22_46_ladder_2;
        _2017 = frontier_phi_22_46_ladder_1;
        _2019 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1999 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1028, _1029, _1030), _1925);
        _2015 = _1999.x * cbModelParam._m0[1u].z;
        _2017 = _1999.y * cbModelParam._m0[1u].z;
        _2019 = _1999.z * cbModelParam._m0[1u].z;
    }
    float _2031 = ((((1.0 - _1049) * ((_1036 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_1049 * _1036)) * _1020;
    float _2032 = _2031 * ((cbModelParam._m0[1u].w * (_2015 - _1916)) + _1916);
    float _2033 = _2031 * ((cbModelParam._m0[1u].w * (_2017 - _1918)) + _1918);
    float _2034 = _2031 * ((cbModelParam._m0[1u].w * (_2019 - _1920)) + _1920);
    float _2037 = fma(_2034, cbSceneParam._m0[89u].z, fma(_2033, cbSceneParam._m0[89u].y, _2032 * cbSceneParam._m0[89u].x));
    float _2040 = fma(_2034, cbSceneParam._m0[90u].z, fma(_2033, cbSceneParam._m0[90u].y, _2032 * cbSceneParam._m0[90u].x));
    float _2043 = fma(_2034, cbSceneParam._m0[91u].z, fma(_2033, cbSceneParam._m0[91u].y, _2032 * cbSceneParam._m0[91u].x));
    uvec4 _2053 = floatBitsToUint(cbInstanceData._m0[_251 + 5u]);
    uint _2055 = _2053.x * 14u;
    uint _2056 = _2055 + 13u;
    float _2063 = _1020 + (-1.0);
    float _2068 = (cbLight._m0[_2056].x * _2063) + 1.0;
    float _2069 = (cbLight._m0[_2056].y * _2063) + 1.0;
    float _2070 = (cbLight._m0[_2056].z * _2063) + 1.0;
    float _2071 = (cbLight._m0[_2056].w * _2063) + 1.0;
    uint _2072 = _2055 + 5u;
    float _2078 = isnan(1.0) ? _2069 : (isnan(_2069) ? 1.0 : min(_2069, 1.0));
    uint _2082 = _2055 + 4u;
    float _2088 = isnan(1.0) ? _2068 : (isnan(_2068) ? 1.0 : min(_2068, 1.0));
    uint _2092 = _2055 | 1u;
    float _2103 = dot(vec3(cbLight._m0[_2055].xyz), vec3(_871, _872, _873));
    float _2106 = dot(vec3(cbLight._m0[_2092].xyz), vec3(_871, _872, _873));
    float _4249 = isnan(0.0) ? _2103 : (isnan(_2103) ? 0.0 : max(_2103, 0.0));
    float _4260 = isnan(0.0) ? _2106 : (isnan(_2106) ? 0.0 : max(_2106, 0.0));
    float _2111 = (isnan(1.0) ? _4249 : (isnan(_4249) ? 1.0 : min(_4249, 1.0))) * 0.3183098733425140380859375;
    float _2113 = (isnan(1.0) ? _4260 : (isnan(_4260) ? 1.0 : min(_4260, 1.0))) * 0.3183098733425140380859375;
    float _2120 = ((cbLight._m0[_2072].x * _2078) * _2113) + ((cbLight._m0[_2082].x * _2088) * _2111);
    float _2121 = ((_2078 * cbLight._m0[_2072].y) * _2113) + ((_2088 * cbLight._m0[_2082].y) * _2111);
    float _2122 = ((_2078 * cbLight._m0[_2072].z) * _2113) + ((_2088 * cbLight._m0[_2082].z) * _2111);
    uvec4 _2126 = floatBitsToUint(cbLight._m0[_2055 + 12u]);
    bool _2128 = _2126.x == 0u;
    float _2139;
    float _2141;
    float _2143;
    if (_2128)
    {
        _2139 = _2120;
        _2141 = _2121;
        _2143 = _2122;
    }
    else
    {
        uint _2147 = _2055 + 6u;
        float _2163 = (dot(vec3(cbLight._m0[_2055 + 2u].xyz), vec3(_871, _872, _873)) * 0.5) + 0.5;
        float _2164 = _2163 * _2163;
        float _4271 = isnan(0.0) ? _2164 : (isnan(_2164) ? 0.0 : max(_2164, 0.0));
        float _2165 = isnan(1.0) ? _4271 : (isnan(_4271) ? 1.0 : min(_4271, 1.0));
        float _2166 = isnan(1.0) ? _2070 : (isnan(_2070) ? 1.0 : min(_2070, 1.0));
        _2139 = (((cbLight._m0[_2147].x * 0.3183098733425140380859375) * _2165) * _2166) + _2120;
        _2141 = (((cbLight._m0[_2147].y * 0.3183098733425140380859375) * _2165) * _2166) + _2121;
        _2143 = (((cbLight._m0[_2147].z * 0.3183098733425140380859375) * _2165) * _2166) + _2122;
    }
    bool _2146 = _2126.y == 0u;
    float _2184;
    float _2186;
    float _2188;
    if (_2146)
    {
        _2184 = _2139;
        _2186 = _2141;
        _2188 = _2143;
    }
    else
    {
        uint _2343 = _2055 + 7u;
        float _2359 = (dot(vec3(cbLight._m0[_2055 + 3u].xyz), vec3(_871, _872, _873)) * 0.5) + 0.5;
        float _2360 = _2359 * _2359;
        float _4287 = isnan(0.0) ? _2360 : (isnan(_2360) ? 0.0 : max(_2360, 0.0));
        float _2361 = isnan(1.0) ? _4287 : (isnan(_4287) ? 1.0 : min(_4287, 1.0));
        float _2362 = isnan(1.0) ? _2071 : (isnan(_2071) ? 1.0 : min(_2071, 1.0));
        _2184 = (((cbLight._m0[_2343].x * 0.3183098733425140380859375) * _2361) * _2362) + _2139;
        _2186 = (((cbLight._m0[_2343].y * 0.3183098733425140380859375) * _2361) * _2362) + _2141;
        _2188 = (((cbLight._m0[_2343].z * 0.3183098733425140380859375) * _2361) * _2362) + _2143;
    }
    uint _2191 = _2055 + 8u;
    float _2204 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2055].w)) * _874) * 0.949999988079071044921875);
    float _2205 = _2204 * _2204;
    float _2206 = cbLight._m0[_2055].x + _949;
    float _2207 = cbLight._m0[_2055].y + _950;
    float _2208 = cbLight._m0[_2055].z + _951;
    float _2212 = inversesqrt(dot(vec3(_2206, _2207, _2208), vec3(_2206, _2207, _2208)));
    float _2213 = _2212 * _2206;
    float _2214 = _2212 * _2207;
    float _2215 = _2212 * _2208;
    float _2216 = dot(vec3(_871, _872, _873), vec3(cbLight._m0[_2055].xyz));
    float _4303 = isnan(0.0) ? _2216 : (isnan(_2216) ? 0.0 : max(_2216, 0.0));
    float _2219 = isnan(1.0) ? _4303 : (isnan(_4303) ? 1.0 : min(_4303, 1.0));
    float _4314 = isnan(0.0) ? _1021 : (isnan(_1021) ? 0.0 : max(_1021, 0.0));
    float _2220 = isnan(1.0) ? _4314 : (isnan(_4314) ? 1.0 : min(_4314, 1.0));
    float _2221 = dot(vec3(_871, _872, _873), vec3(_2213, _2214, _2215));
    float _4325 = isnan(0.0) ? _2221 : (isnan(_2221) ? 0.0 : max(_2221, 0.0));
    float _2224 = isnan(1.0) ? _4325 : (isnan(_4325) ? 1.0 : min(_4325, 1.0));
    float _2225 = dot(vec3(cbLight._m0[_2055].xyz), vec3(_2213, _2214, _2215));
    float _4336 = isnan(0.0) ? _2225 : (isnan(_2225) ? 0.0 : max(_2225, 0.0));
    float _2229 = _2205 * _2205;
    float _2233 = ((_2224 * _2224) * (_2229 + (-1.0))) + 1.0;
    float _2244 = (exp2(log2(1.0 - (isnan(1.0) ? _4336 : (isnan(_4336) ? 1.0 : min(_4336, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2245 = 1.0 - _2205;
    float _2256 = (0.5 / (((_2220 * ((_2219 * _2245) + _2205)) + 9.9999999392252902907785028219223e-09) + (((_2220 * _2245) + _2205) * _2219))) * _2219;
    float _4347 = isnan(0.0) ? _2256 : (isnan(_2256) ? 0.0 : max(_2256, 0.0));
    float _2258 = (isnan(1.0) ? _4347 : (isnan(_4347) ? 1.0 : min(_4347, 1.0))) * (_2229 / ((_2233 * _2233) * 3.141590118408203125));
    uint _2269 = _2055 + 9u;
    float _2280 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2092].w)) * _874) * 0.949999988079071044921875);
    float _2281 = _2280 * _2280;
    float _2282 = cbLight._m0[_2092].x + _949;
    float _2283 = cbLight._m0[_2092].y + _950;
    float _2284 = cbLight._m0[_2092].z + _951;
    float _2288 = inversesqrt(dot(vec3(_2282, _2283, _2284), vec3(_2282, _2283, _2284)));
    float _2289 = _2288 * _2282;
    float _2290 = _2288 * _2283;
    float _2291 = _2288 * _2284;
    float _2292 = dot(vec3(_871, _872, _873), vec3(cbLight._m0[_2092].xyz));
    float _4358 = isnan(0.0) ? _2292 : (isnan(_2292) ? 0.0 : max(_2292, 0.0));
    float _2295 = isnan(1.0) ? _4358 : (isnan(_4358) ? 1.0 : min(_4358, 1.0));
    float _2296 = dot(vec3(_871, _872, _873), vec3(_2289, _2290, _2291));
    float _4369 = isnan(0.0) ? _2296 : (isnan(_2296) ? 0.0 : max(_2296, 0.0));
    float _2299 = isnan(1.0) ? _4369 : (isnan(_4369) ? 1.0 : min(_4369, 1.0));
    float _2300 = dot(vec3(cbLight._m0[_2092].xyz), vec3(_2289, _2290, _2291));
    float _4380 = isnan(0.0) ? _2300 : (isnan(_2300) ? 0.0 : max(_2300, 0.0));
    float _2304 = _2281 * _2281;
    float _2308 = ((_2299 * _2299) * (_2304 + (-1.0))) + 1.0;
    float _2317 = (exp2(log2(1.0 - (isnan(1.0) ? _4380 : (isnan(_4380) ? 1.0 : min(_4380, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2318 = 1.0 - _2281;
    float _2328 = (0.5 / (((_2220 * ((_2295 * _2318) + _2281)) + 9.9999999392252902907785028219223e-09) + (((_2220 * _2318) + _2281) * _2295))) * _2295;
    float _4391 = isnan(0.0) ? _2328 : (isnan(_2328) ? 0.0 : max(_2328, 0.0));
    float _2330 = (isnan(1.0) ? _4391 : (isnan(_4391) ? 1.0 : min(_4391, 1.0))) * (_2304 / ((_2308 * _2308) * 3.141590118408203125));
    float _2340 = (((_2317 * cbLight._m0[_2269].x) * _2330) * _2078) + (((_2244 * cbLight._m0[_2191].x) * _2258) * _2088);
    float _2341 = (((_2317 * cbLight._m0[_2269].y) * _2330) * _2078) + (((_2244 * cbLight._m0[_2191].y) * _2258) * _2088);
    float _2342 = (((_2317 * cbLight._m0[_2269].z) * _2330) * _2078) + (((_2244 * cbLight._m0[_2191].z) * _2258) * _2088);
    float _2404;
    float _2406;
    float _2408;
    if (_2128)
    {
        _2404 = _2340;
        _2406 = _2341;
        _2408 = _2342;
    }
    else
    {
        uint _2410 = _2055 + 2u;
        uint _2414 = _2055 + 10u;
        float _2428 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2410].w)) * _874) * 0.949999988079071044921875);
        float _2429 = _2428 * _2428;
        float _2430 = cbLight._m0[_2410].x + _949;
        float _2431 = cbLight._m0[_2410].y + _950;
        float _2432 = cbLight._m0[_2410].z + _951;
        float _2436 = inversesqrt(dot(vec3(_2430, _2431, _2432), vec3(_2430, _2431, _2432)));
        float _2437 = _2436 * _2430;
        float _2438 = _2436 * _2431;
        float _2439 = _2436 * _2432;
        float _2440 = dot(vec3(_871, _872, _873), vec3(cbLight._m0[_2410].xyz));
        float _4402 = isnan(0.0) ? _2440 : (isnan(_2440) ? 0.0 : max(_2440, 0.0));
        float _2443 = isnan(1.0) ? _4402 : (isnan(_4402) ? 1.0 : min(_4402, 1.0));
        float _2444 = dot(vec3(_871, _872, _873), vec3(_2437, _2438, _2439));
        float _4413 = isnan(0.0) ? _2444 : (isnan(_2444) ? 0.0 : max(_2444, 0.0));
        float _2447 = isnan(1.0) ? _4413 : (isnan(_4413) ? 1.0 : min(_4413, 1.0));
        float _2448 = dot(vec3(cbLight._m0[_2410].xyz), vec3(_2437, _2438, _2439));
        float _4424 = isnan(0.0) ? _2448 : (isnan(_2448) ? 0.0 : max(_2448, 0.0));
        float _2452 = _2429 * _2429;
        float _2456 = ((_2447 * _2447) * (_2452 + (-1.0))) + 1.0;
        float _2465 = (exp2(log2(1.0 - (isnan(1.0) ? _4424 : (isnan(_4424) ? 1.0 : min(_4424, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2466 = 1.0 - _2429;
        float _2476 = (0.5 / (((_2220 * ((_2443 * _2466) + _2429)) + 9.9999999392252902907785028219223e-09) + (((_2220 * _2466) + _2429) * _2443))) * _2443;
        float _4435 = isnan(0.0) ? _2476 : (isnan(_2476) ? 0.0 : max(_2476, 0.0));
        float _2478 = (isnan(1.0) ? _4435 : (isnan(_4435) ? 1.0 : min(_4435, 1.0))) * (_2452 / ((_2456 * _2456) * 3.141590118408203125));
        float _2479 = isnan(1.0) ? _2070 : (isnan(_2070) ? 1.0 : min(_2070, 1.0));
        _2404 = (((_2465 * cbLight._m0[_2414].x) * _2478) * _2479) + _2340;
        _2406 = (((_2465 * cbLight._m0[_2414].y) * _2478) * _2479) + _2341;
        _2408 = (((_2465 * cbLight._m0[_2414].z) * _2478) * _2479) + _2342;
    }
    float _2514;
    float _2516;
    float _2518;
    if (_2146)
    {
        _2514 = _2404;
        _2516 = _2406;
        _2518 = _2408;
    }
    else
    {
        uint _2525 = _2055 + 3u;
        uint _2529 = _2055 + 11u;
        float _2543 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2525].w)) * _874) * 0.949999988079071044921875);
        float _2544 = _2543 * _2543;
        float _2545 = cbLight._m0[_2525].x + _949;
        float _2546 = cbLight._m0[_2525].y + _950;
        float _2547 = cbLight._m0[_2525].z + _951;
        float _2551 = inversesqrt(dot(vec3(_2545, _2546, _2547), vec3(_2545, _2546, _2547)));
        float _2552 = _2551 * _2545;
        float _2553 = _2551 * _2546;
        float _2554 = _2551 * _2547;
        float _2555 = dot(vec3(_871, _872, _873), vec3(cbLight._m0[_2525].xyz));
        float _4451 = isnan(0.0) ? _2555 : (isnan(_2555) ? 0.0 : max(_2555, 0.0));
        float _2558 = isnan(1.0) ? _4451 : (isnan(_4451) ? 1.0 : min(_4451, 1.0));
        float _2559 = dot(vec3(_871, _872, _873), vec3(_2552, _2553, _2554));
        float _4462 = isnan(0.0) ? _2559 : (isnan(_2559) ? 0.0 : max(_2559, 0.0));
        float _2562 = isnan(1.0) ? _4462 : (isnan(_4462) ? 1.0 : min(_4462, 1.0));
        float _2563 = dot(vec3(cbLight._m0[_2525].xyz), vec3(_2552, _2553, _2554));
        float _4473 = isnan(0.0) ? _2563 : (isnan(_2563) ? 0.0 : max(_2563, 0.0));
        float _2567 = _2544 * _2544;
        float _2571 = ((_2562 * _2562) * (_2567 + (-1.0))) + 1.0;
        float _2580 = (exp2(log2(1.0 - (isnan(1.0) ? _4473 : (isnan(_4473) ? 1.0 : min(_4473, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2581 = 1.0 - _2544;
        float _2591 = (0.5 / (((_2220 * ((_2558 * _2581) + _2544)) + 9.9999999392252902907785028219223e-09) + (((_2220 * _2581) + _2544) * _2558))) * _2558;
        float _4484 = isnan(0.0) ? _2591 : (isnan(_2591) ? 0.0 : max(_2591, 0.0));
        float _2593 = (isnan(1.0) ? _4484 : (isnan(_4484) ? 1.0 : min(_4484, 1.0))) * (_2567 / ((_2571 * _2571) * 3.141590118408203125));
        float _2594 = isnan(1.0) ? _2071 : (isnan(_2071) ? 1.0 : min(_2071, 1.0));
        _2514 = (((_2580 * cbLight._m0[_2529].x) * _2593) * _2594) + _2404;
        _2516 = (((_2580 * cbLight._m0[_2529].y) * _2593) * _2594) + _2406;
        _2518 = (((_2580 * cbLight._m0[_2529].z) * _2593) * _2594) + _2408;
    }
    float _2729;
    float _2731;
    float _2733;
    float _2735;
    float _2737;
    float _2739;
    if (_2053.y == 0u)
    {
        float _2669 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2670 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2669;
        float _2671 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2669;
        float _2672 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2669;
        uvec4 _2684 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2685 = _2684.x;
        uint _2696 = uint((float(_2684.y) * floor(float(uint(cbSceneParam._m0[85u].y * _958) / _2685))) + floor(float(uint(cbSceneParam._m0[85u].x * _957) / _2685)));
        float _2706 = (log2(_2672 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2707 = isnan(0.0) ? _2706 : (isnan(_2706) ? 0.0 : max(_2706, 0.0));
        uint _2710 = uint(isnan(14.0) ? _2707 : (isnan(_2707) ? 14.0 : min(_2707, 14.0)));
        uvec4 _2715 = texelFetch(g_lightClusterGridBuffer, int(((_2710 << 2u) + (_2696 << 6u)) >> 2u));
        uint _2716 = _2715.x;
        uint _2717 = _2684.z;
        float _2817;
        float _2819;
        float _2821;
        float _2823;
        float _2825;
        float _2827;
        if (((((1u << ((_2717 >> 4u) & 15u)) + 4294967295u) & _2716) == 0u) || ((_2717 & 240u) == 0u))
        {
            _2817 = 0.0;
            _2819 = 0.0;
            _2821 = 0.0;
            _2823 = 0.0;
            _2825 = 0.0;
            _2827 = 0.0;
        }
        else
        {
            float _2818;
            float _2820;
            float _2822;
            float _2824;
            float _2826;
            float _2828;
            float _2961 = 0.0;
            float _2962 = 0.0;
            float _2963 = 0.0;
            float _2964 = 0.0;
            float _2965 = 0.0;
            float _2966 = 0.0;
            uint _2967 = 0u;
            uint _2976;
            bool _2977;
            for (;;)
            {
                _2976 = texelFetch(g_lightClassification, int((((_2710 << 5u) + (_2696 << 9u)) + (_2967 << 2u)) >> 2u)).x;
                _2977 = _2976 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2977)
                {
                    frontier_phi_61_pred = _2961;
                    frontier_phi_61_pred_1 = _2966;
                    frontier_phi_61_pred_2 = _2965;
                    frontier_phi_61_pred_3 = _2964;
                    frontier_phi_61_pred_4 = _2963;
                    frontier_phi_61_pred_5 = _2962;
                }
                else
                {
                    float _3085;
                    float _3086;
                    float _3087;
                    float _3088;
                    float _3089;
                    float _3090;
                    uint _3091;
                    _3085 = _2961;
                    _3086 = _2962;
                    _3087 = _2963;
                    _3088 = _2964;
                    _3089 = _2965;
                    _3090 = _2966;
                    _3091 = _2976;
                    float _3017;
                    float _3018;
                    float _3019;
                    float _3020;
                    float _3021;
                    float _3022;
                    for (;;)
                    {
                        uint _3095 = uint(findLSB(_3091)) + (_2967 << 5u);
                        uint _3092 = (_3091 + 4294967295u) & _3091;
                        uint _3097 = _3095 * 48u;
                        vec4 _3111 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3097)).x, texelFetch(g_PointLightRenderingBuffer, int(_3097 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3097 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3097 + 3u)).x));
                        uint _3117 = (_3095 * 48u) + 4u;
                        vec4 _3130 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3117)).x, texelFetch(g_PointLightRenderingBuffer, int(_3117 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3117 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3117 + 3u)).x));
                        uint _3136 = (_3095 * 48u) + 8u;
                        vec3 _3147 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3136)).x, texelFetch(g_PointLightRenderingBuffer, int(_3136 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3136 + 2u)).x));
                        float _3151 = _3111.x - _2670;
                        float _3152 = _3111.y - _2671;
                        float _3153 = _3111.z - _2672;
                        float _3154 = dot(vec3(_3151, _3152, _3153), vec3(_3151, _3152, _3153));
                        float _3157 = inversesqrt(_3154);
                        float _3158 = _3157 * _3151;
                        float _3159 = _3157 * _3152;
                        float _3160 = _3157 * _3153;
                        float _3161 = dot(vec3(_976, _979, _982), vec3(_3158, _3159, _3160));
                        float _3166 = 1.0 - (_3154 * _3111.w);
                        float _4510 = isnan(0.0) ? _3166 : (isnan(_3166) ? 0.0 : max(_3166, 0.0));
                        float _3167 = isnan(1.0) ? _4510 : (isnan(_4510) ? 1.0 : min(_4510, 1.0));
                        float _3168 = sqrt(_3154) * _3130.w;
                        float _3171 = 1.39999997615814208984375 / (_3168 + 1.39999997615814208984375);
                        float _3172 = _3171 * _3171;
                        float _3175 = ((1.0 - _3172) * _3161) + _3172;
                        float _3178 = _3168 * _3168;
                        float _3182 = ((isnan(0.0) ? _3175 : (isnan(_3175) ? 0.0 : max(_3175, 0.0))) * _3167) / ((_3178 * 0.699999988079071044921875) + 1.0);
                        float _3186 = (-0.0) - _2670;
                        float _3187 = (-0.0) - _2671;
                        float _3188 = (-0.0) - _2672;
                        float _3192 = inversesqrt(dot(vec3(_3186, _3187, _3188), vec3(_3186, _3187, _3188)));
                        float _3193 = _3192 * _3186;
                        float _3194 = _3192 * _3187;
                        float _3195 = _3192 * _3188;
                        float _3203 = exp2(log2(1.0 / ((_3178 * 3.5) + 5.0)) * 0.25);
                        float _3204 = 1.0 - _1036;
                        float _3211 = sqrt(1.0 - ((1.0 - (_3204 * _3204)) * (1.0 - (_3203 * _3203))));
                        float _3212 = _3211 * _3211;
                        float _3213 = _3212 * _3212;
                        float _3214 = _3193 + _3158;
                        float _3215 = _3194 + _3159;
                        float _3216 = _3195 + _3160;
                        float _3220 = inversesqrt(dot(vec3(_3214, _3215, _3216), vec3(_3214, _3215, _3216)));
                        float _3224 = dot(vec3(_976, _979, _982), vec3(_3193, _3194, _3195));
                        float _4526 = isnan(0.0) ? _3224 : (isnan(_3224) ? 0.0 : max(_3224, 0.0));
                        float _3227 = isnan(1.0) ? _4526 : (isnan(_4526) ? 1.0 : min(_4526, 1.0));
                        float _3228 = dot(vec3(_976, _979, _982), vec3(_3220 * _3214, _3220 * _3215, _3220 * _3216));
                        float _4537 = isnan(0.0) ? _3228 : (isnan(_3228) ? 0.0 : max(_3228, 0.0));
                        float _3231 = isnan(1.0) ? _4537 : (isnan(_4537) ? 1.0 : min(_4537, 1.0));
                        float _3235 = ((_3231 * _3231) * (_3213 + (-1.0))) + 1.0;
                        float _3236 = _3171 * _3212;
                        float _3237 = _3236 * _3236;
                        float _3240 = ((1.0 - _3237) * _3161) + _3237;
                        float _4548 = isnan(0.0) ? _3240 : (isnan(_3240) ? 0.0 : max(_3240, 0.0));
                        float _3241 = isnan(1.0) ? _4548 : (isnan(_4548) ? 1.0 : min(_4548, 1.0));
                        float _3242 = 1.0 - _3212;
                        float _3252 = (0.5 / (((_3241 * ((_3227 * _3242) + _3212)) + 9.9999999392252902907785028219223e-09) + (((_3241 * _3242) + _3212) * _3227))) * _3241;
                        float _4559 = isnan(0.0) ? _3252 : (isnan(_3252) ? 0.0 : max(_3252, 0.0));
                        float _3263 = (((_3213 * 3.1415927410125732421875) * (isnan(1.0) ? _4559 : (isnan(_4559) ? 1.0 : min(_4559, 1.0)))) / ((_3235 * _3235) * ((_3178 * 2.1991131305694580078125) + 3.141590118408203125))) * _3167;
                        _3020 = (_3182 * _3130.x) + _3088;
                        _3021 = (_3182 * _3130.y) + _3089;
                        _3022 = (_3182 * _3130.z) + _3090;
                        _3017 = (_3263 * _3147.x) + _3085;
                        _3018 = (_3263 * _3147.y) + _3086;
                        _3019 = (_3263 * _3147.z) + _3087;
                        if (_3092 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3085 = _3017;
                            _3086 = _3018;
                            _3087 = _3019;
                            _3088 = _3020;
                            _3089 = _3021;
                            _3090 = _3022;
                            _3091 = _3092;
                        }
                    }
                    frontier_phi_61_pred = _3017;
                    frontier_phi_61_pred_1 = _3022;
                    frontier_phi_61_pred_2 = _3021;
                    frontier_phi_61_pred_3 = _3020;
                    frontier_phi_61_pred_4 = _3019;
                    frontier_phi_61_pred_5 = _3018;
                }
                _2818 = frontier_phi_61_pred;
                _2828 = frontier_phi_61_pred_1;
                _2826 = frontier_phi_61_pred_2;
                _2824 = frontier_phi_61_pred_3;
                _2822 = frontier_phi_61_pred_4;
                _2820 = frontier_phi_61_pred_5;
                uint _2968 = _2967 + 1u;
                if (_2968 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2961 = _2818;
                    _2962 = _2820;
                    _2963 = _2822;
                    _2964 = _2824;
                    _2965 = _2826;
                    _2966 = _2828;
                    _2967 = _2968;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2817 = _2818;
            _2819 = _2820;
            _2821 = _2822;
            _2823 = _2824;
            _2825 = _2826;
            _2827 = _2828;
        }
        uvec4 _2831 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2832 = _2831.z;
        uint _2834 = (_2832 >> 8u) & 15u;
        float _2929;
        float _2931;
        float _2933;
        float _2935;
        float _2937;
        float _2939;
        if (((4294967295u << _2834) & _2716) == 0u)
        {
            _2929 = _2817;
            _2931 = _2819;
            _2933 = _2821;
            _2935 = _2823;
            _2937 = _2825;
            _2939 = _2827;
        }
        else
        {
            float _2954 = inversesqrt(dot(vec3(_2670, _2671, _2672), vec3(_2670, _2671, _2672)));
            float _2955 = _2954 * _2670;
            float _2956 = _2954 * _2671;
            float _2957 = _2954 * _2672;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2834 < ((_2832 >> 12u) & 15u))
            {
                float _2930;
                float _2932;
                float _2934;
                float _2936;
                float _2938;
                float _2940;
                float _3068 = _2817;
                float _3069 = _2819;
                float _3070 = _2821;
                float _3071 = _2823;
                float _3072 = _2825;
                float _3073 = _2827;
                uint _3074 = _2834;
                uint _3083;
                bool _3084;
                for (;;)
                {
                    _3083 = texelFetch(g_lightClassification, int((((_2710 << 5u) + (_2696 << 9u)) + (_3074 << 2u)) >> 2u)).x;
                    _3084 = _3083 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_3084)
                    {
                        frontier_phi_67_pred = _3071;
                        frontier_phi_67_pred_1 = _3072;
                        frontier_phi_67_pred_2 = _3073;
                        frontier_phi_67_pred_3 = _3070;
                        frontier_phi_67_pred_4 = _3069;
                        frontier_phi_67_pred_5 = _3068;
                    }
                    else
                    {
                        float _3268;
                        float _3269;
                        float _3270;
                        float _3271;
                        float _3272;
                        float _3273;
                        float _3561;
                        float _3562;
                        float _3563;
                        float _3564;
                        float _3565;
                        float _3566;
                        float _3281 = _3068;
                        float _3282 = _3069;
                        float _3283 = _3070;
                        float _3284 = _3071;
                        float _3285 = _3072;
                        float _3286 = _3073;
                        uint _3287 = _3083;
                        uint _3288;
                        vec4 _3313;
                        float _3314;
                        vec4 _3329;
                        vec3 _3341;
                        vec4 _3356;
                        vec4 _3371;
                        float _3417;
                        bool _3418;
                        for (;;)
                        {
                            uint _3298 = ((_3074 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3287));
                            _3288 = (_3287 + 4294967295u) & _3287;
                            uint _3300 = _3298 * 40u;
                            _3313 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3300)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3300 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3300 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3300 + 3u)).x));
                            _3314 = _3313.w;
                            uint _3316 = (_3298 * 40u) + 4u;
                            _3329 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3316)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3316 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3316 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3316 + 3u)).x));
                            uint _3331 = (_3298 * 40u) + 8u;
                            _3341 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3331)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3331 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3331 + 2u)).x));
                            uint _3343 = (_3298 * 40u) + 16u;
                            _3356 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3343)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3343 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3343 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3343 + 3u)).x));
                            uint _3358 = (_3298 * 40u) + 20u;
                            _3371 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3358)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3358 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3358 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3358 + 3u)).x));
                            uint _3373 = (_3298 * 40u) + 24u;
                            vec4 _3386 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3373)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3373 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3373 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3373 + 3u)).x));
                            uint _3392 = (_3298 * 40u) + 28u;
                            vec4 _3405 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3392)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3392 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3392 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3392 + 3u)).x));
                            _3417 = fma(_2672, _3405.z, fma(_2671, _3405.y, _3405.x * _2670)) + _3405.w;
                            _3418 = !((fma(_2672, _3386.z, fma(_2671, _3386.y, _3386.x * _2670)) + _3386.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3418)
                            {
                                float _3445 = _3313.x - _2670;
                                float _3446 = _3313.y - _2671;
                                float _3447 = _3313.z - _2672;
                                float _3448 = dot(vec3(_3445, _3446, _3447), vec3(_3445, _3446, _3447));
                                float _3451 = inversesqrt(_3448);
                                float _3452 = _3451 * _3445;
                                float _3453 = _3451 * _3446;
                                float _3454 = _3451 * _3447;
                                float _3458 = 1.0 - (_3448 / (_3314 * _3314));
                                float _4570 = isnan(0.0) ? _3458 : (isnan(_3458) ? 0.0 : max(_3458, 0.0));
                                float _3459 = isnan(1.0) ? _4570 : (isnan(_4570) ? 1.0 : min(_4570, 1.0));
                                float _3463 = sqrt(_3448) * _3329.w;
                                float _3465 = 1.39999997615814208984375 / (_3463 + 1.39999997615814208984375);
                                float _3466 = _3465 * _3465;
                                float _3469 = ((1.0 - _3466) * dot(vec3(_3452, _3453, _3454), vec3(_976, _979, _982))) + _3466;
                                float _3472 = _3463 * _3463;
                                float _3476 = (fma(_2672, _3356.z, fma(_2671, _3356.y, _3356.x * _2670)) + _3356.w) / _3417;
                                float _3477 = (fma(_2672, _3371.z, fma(_2671, _3371.y, _3371.x * _2670)) + _3371.w) / _3417;
                                float _3481 = 1.0 - dot(vec2(_3476, _3477), vec2(_3476, _3477));
                                float _4586 = isnan(0.0) ? _3481 : (isnan(_3481) ? 0.0 : max(_3481, 0.0));
                                float _3482 = isnan(1.0) ? _4586 : (isnan(_4586) ? 1.0 : min(_4586, 1.0));
                                float _3483 = _3482 * (((isnan(0.0) ? _3469 : (isnan(_3469) ? 0.0 : max(_3469, 0.0))) * _3459) / ((_3472 * 0.699999988079071044921875) + 1.0));
                                float _3495 = exp2(log2(1.0 / ((_3472 * 3.5) + 5.0)) * 0.25);
                                float _3496 = 1.0 - _1036;
                                float _3503 = sqrt(1.0 - ((1.0 - (_3496 * _3496)) * (1.0 - (_3495 * _3495))));
                                float _3504 = _3503 * _3503;
                                float _3505 = _3504 * _3504;
                                float _3506 = _3452 - _2955;
                                float _3507 = _3453 - _2956;
                                float _3508 = _3454 - _2957;
                                float _3512 = inversesqrt(dot(vec3(_3506, _3507, _3508), vec3(_3506, _3507, _3508)));
                                float _3516 = dot(vec3(_976, _979, _982), vec3((-0.0) - _2955, (-0.0) - _2956, (-0.0) - _2957));
                                float _4597 = isnan(0.0) ? _3516 : (isnan(_3516) ? 0.0 : max(_3516, 0.0));
                                float _3519 = isnan(1.0) ? _4597 : (isnan(_4597) ? 1.0 : min(_4597, 1.0));
                                float _3520 = dot(vec3(_976, _979, _982), vec3(_3512 * _3506, _3512 * _3507, _3512 * _3508));
                                float _4608 = isnan(0.0) ? _3520 : (isnan(_3520) ? 0.0 : max(_3520, 0.0));
                                float _3523 = isnan(1.0) ? _4608 : (isnan(_4608) ? 1.0 : min(_4608, 1.0));
                                float _3527 = ((_3523 * _3523) * (_3505 + (-1.0))) + 1.0;
                                float _3528 = _3465 * _3504;
                                float _3529 = _3528 * _3528;
                                float _3535 = ((1.0 - _3529) * dot(vec3(_976, _979, _982), vec3(_3452, _3453, _3454))) + _3529;
                                float _4619 = isnan(0.0) ? _3535 : (isnan(_3535) ? 0.0 : max(_3535, 0.0));
                                float _3536 = isnan(1.0) ? _4619 : (isnan(_4619) ? 1.0 : min(_4619, 1.0));
                                float _3537 = 1.0 - _3504;
                                float _3547 = (0.5 / (((_3536 * ((_3519 * _3537) + _3504)) + 9.9999999392252902907785028219223e-09) + (((_3536 * _3537) + _3504) * _3519))) * _3536;
                                float _4630 = isnan(0.0) ? _3547 : (isnan(_3547) ? 0.0 : max(_3547, 0.0));
                                float _3557 = (_3482 * _3459) * (((_3505 * 3.1415927410125732421875) * (isnan(1.0) ? _4630 : (isnan(_4630) ? 1.0 : min(_4630, 1.0)))) / ((_3527 * _3527) * ((_3472 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3557 * _3341.x;
                                frontier_phi_73_pred_1 = _3557 * _3341.y;
                                frontier_phi_73_pred_2 = _3483 * _3329.z;
                                frontier_phi_73_pred_3 = _3483 * _3329.y;
                                frontier_phi_73_pred_4 = _3483 * _3329.x;
                                frontier_phi_73_pred_5 = _3557 * _3341.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3561 = frontier_phi_73_pred;
                            _3562 = frontier_phi_73_pred_1;
                            _3566 = frontier_phi_73_pred_2;
                            _3565 = frontier_phi_73_pred_3;
                            _3564 = frontier_phi_73_pred_4;
                            _3563 = frontier_phi_73_pred_5;
                            _3271 = _3564 + _3284;
                            _3272 = _3565 + _3285;
                            _3273 = _3566 + _3286;
                            _3268 = _3561 + _3281;
                            _3269 = _3562 + _3282;
                            _3270 = _3563 + _3283;
                            if (_3288 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3281 = _3268;
                                _3282 = _3269;
                                _3283 = _3270;
                                _3284 = _3271;
                                _3285 = _3272;
                                _3286 = _3273;
                                _3287 = _3288;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3271;
                        frontier_phi_67_pred_1 = _3272;
                        frontier_phi_67_pred_2 = _3273;
                        frontier_phi_67_pred_3 = _3270;
                        frontier_phi_67_pred_4 = _3269;
                        frontier_phi_67_pred_5 = _3268;
                    }
                    _2936 = frontier_phi_67_pred;
                    _2938 = frontier_phi_67_pred_1;
                    _2940 = frontier_phi_67_pred_2;
                    _2934 = frontier_phi_67_pred_3;
                    _2932 = frontier_phi_67_pred_4;
                    _2930 = frontier_phi_67_pred_5;
                    uint _3075 = _3074 + 1u;
                    if (_3075 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3068 = _2930;
                        _3069 = _2932;
                        _3070 = _2934;
                        _3071 = _2936;
                        _3072 = _2938;
                        _3073 = _2940;
                        _3074 = _3075;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2938;
                frontier_phi_55_56_ladder_1 = _2940;
                frontier_phi_55_56_ladder_2 = _2936;
                frontier_phi_55_56_ladder_3 = _2934;
                frontier_phi_55_56_ladder_4 = _2932;
                frontier_phi_55_56_ladder_5 = _2930;
            }
            else
            {
                frontier_phi_55_56_ladder = _2825;
                frontier_phi_55_56_ladder_1 = _2827;
                frontier_phi_55_56_ladder_2 = _2823;
                frontier_phi_55_56_ladder_3 = _2821;
                frontier_phi_55_56_ladder_4 = _2819;
                frontier_phi_55_56_ladder_5 = _2817;
            }
            _2929 = frontier_phi_55_56_ladder_5;
            _2931 = frontier_phi_55_56_ladder_4;
            _2933 = frontier_phi_55_56_ladder_3;
            _2935 = frontier_phi_55_56_ladder_2;
            _2937 = frontier_phi_55_56_ladder;
            _2939 = frontier_phi_55_56_ladder_1;
        }
        float _2944 = isnan(1.0) ? _1020 : (isnan(_1020) ? 1.0 : min(_1020, 1.0));
        _2729 = (_2944 * _2935) + _2184;
        _2731 = (_2944 * _2937) + _2186;
        _2733 = (_2944 * _2939) + _2188;
        _2735 = ((_2929 * 0.039999999105930328369140625) * _2944) + _2514;
        _2737 = ((_2931 * 0.039999999105930328369140625) * _2944) + _2516;
        _2739 = ((_2933 * 0.039999999105930328369140625) * _2944) + _2518;
    }
    else
    {
        _2729 = _2184;
        _2731 = _2186;
        _2733 = _2188;
        _2735 = _2514;
        _2737 = _2516;
        _2739 = _2518;
    }
    float _4646 = isnan(0.0) ? _1005 : (isnan(_1005) ? 0.0 : max(_1005, 0.0));
    float _4657 = isnan(0.0) ? _1006 : (isnan(_1006) ? 0.0 : max(_1006, 0.0));
    float _4668 = isnan(0.0) ? _1007 : (isnan(_1007) ? 0.0 : max(_1007, 0.0));
    uint _2759 = _251 + 6u;
    float _2767 = _957 / cbSceneParam._m0[86u].x;
    float _2768 = _958 / cbSceneParam._m0[86u].y;
    vec4 _2782 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2767, _2768, (log2((isnan(cbSceneParam._m0[77u].w) ? _892 : (isnan(_892) ? cbSceneParam._m0[77u].w : min(_892, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2784 = _2782.x;
    float _2785 = _2782.y;
    float _2786 = _2782.z;
    float _2787 = _2782.w;
    float _2879;
    float _2881;
    float _2883;
    float _2885;
    if (_892 > cbSceneParam._m0[78u].w)
    {
        float _2842 = isnan(_892) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _892 : min(cbSceneParam._m0[80u].w, _892));
        float _2843 = _2842 / _892;
        float _2854 = _2843 * _942;
        float _2855 = _943 * _2843;
        float _2856 = (-0.0) - _2855;
        float _2857 = _2843 * _944;
        float _2859 = (cbSceneParam._m0[77u].w * _2856) / _2842;
        float _2860 = _2859 + cbSceneParam._m0[79u].w;
        float _2861 = cbSceneParam._m0[79u].w - _2855;
        float _2867 = sqrt(((_2854 * _2854) + (_2855 * _2855)) + (_2857 * _2857));
        float _2870 = (1.0 - (cbSceneParam._m0[77u].w / _2842)) * _2867;
        float _2875 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2877 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3030;
        if (abs((_2856 - _2859) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3030 = ((((_2860 > 0.0) ? exp2(_2875 * _2860) : (2.0 - exp2(_2877 * _2860))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2870;
        }
        else
        {
            float _2990 = 1.0 / cbSceneParam._m0[80u].x;
            float _2991 = isnan(_2861) ? _2860 : (isnan(_2860) ? _2861 : max(_2860, _2861));
            float _2992 = isnan(_2861) ? _2860 : (isnan(_2860) ? _2861 : min(_2860, _2861));
            float _3001 = isnan(0.0) ? _2991 : (isnan(_2991) ? 0.0 : min(_2991, 0.0));
            float _3002 = isnan(0.0) ? _2992 : (isnan(_2992) ? 0.0 : min(_2992, 0.0));
            _3030 = ((abs(_2867 / _2856) * cbSceneParam._m0[80u].y) * ((((_3001 - _3002) * 2.0) - ((exp2(_2875 * (isnan(0.0) ? _2991 : (isnan(_2991) ? 0.0 : max(_2991, 0.0)))) - exp2(_2875 * (isnan(0.0) ? _2992 : (isnan(_2992) ? 0.0 : max(_2992, 0.0))))) * _2990)) - ((exp2(_2877 * _3001) - exp2(_2877 * _3002)) * _2990))) + (_2870 * cbSceneParam._m0[80u].z);
        }
        vec4 _3032 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2767, _2768, 1.0), 0.0);
        float _3041 = exp2((_3030 * (-1.44269502162933349609375)) * (1.0 - _3032.w));
        float _3042 = log2(_3041);
        float _3058 = log2(_2787);
        _2879 = (exp2(_3058 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3042 * cbSceneParam._m0[78u].x)) * _3032.x) / cbSceneParam._m0[78u].x)) + _2784;
        _2881 = (exp2(_3058 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3042 * cbSceneParam._m0[78u].y)) * _3032.y) / cbSceneParam._m0[78u].y)) + _2785;
        _2883 = (exp2(_3058 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3042 * cbSceneParam._m0[78u].z)) * _3032.z) / cbSceneParam._m0[78u].z)) + _2786;
        _2885 = _3041 * _2787;
    }
    else
    {
        _2879 = _2784;
        _2881 = _2785;
        _2883 = _2786;
        _2885 = _2787;
    }
    float _2897 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2898 = _2897 == 3.0;
    float _2899 = log2(_2885);
    float _2906 = exp2(_2899 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4646 : (isnan(_4646) ? 1.0 : min(_4646, 1.0))) * (_2729 + ((isnan(0.0) ? _1745 : (isnan(_1745) ? 0.0 : max(_1745, 0.0))) * _1020))) + ((_2735 + ((isnan(0.0) ? _2037 : (isnan(_2037) ? 0.0 : max(_2037, 0.0))) * _1824)) * cbPerFrame._m0[3u].x));
    float _2907 = exp2(_2899 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4657 : (isnan(_4657) ? 1.0 : min(_4657, 1.0))) * (_2731 + ((isnan(0.0) ? _1748 : (isnan(_1748) ? 0.0 : max(_1748, 0.0))) * _1020))) + ((_2737 + ((isnan(0.0) ? _2040 : (isnan(_2040) ? 0.0 : max(_2040, 0.0))) * _1824)) * cbPerFrame._m0[3u].x));
    float _2908 = exp2(_2899 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4668 : (isnan(_4668) ? 1.0 : min(_4668, 1.0))) * (_2733 + ((isnan(0.0) ? _1751 : (isnan(_1751) ? 0.0 : max(_1751, 0.0))) * _1020))) + ((_2739 + ((isnan(0.0) ? _2043 : (isnan(_2043) ? 0.0 : max(_2043, 0.0))) * _1824)) * cbPerFrame._m0[3u].x));
    float _2917 = (_2897 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2917 * (_2898 ? _2906 : (_2906 + (cbSceneParam._m0[72u].w * _2879)));
    SV_Target.y = _2917 * (_2898 ? _2907 : (_2907 + (cbSceneParam._m0[72u].w * _2881)));
    SV_Target.z = _2917 * (_2898 ? _2908 : (_2908 + (cbSceneParam._m0[72u].w * _2883)));
    SV_Target.w = cbInstanceData._m0[_2759].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2759].w;
}


