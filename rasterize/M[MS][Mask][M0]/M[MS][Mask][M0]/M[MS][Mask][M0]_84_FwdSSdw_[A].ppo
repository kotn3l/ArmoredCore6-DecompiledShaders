#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_0;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 13) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_22;
layout(set = 0, binding = 14) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_10;
layout(set = 0, binding = 20) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_6;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1412;
float _3793;
float _3794;
float _3795;
float _3796;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _229 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _230 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _231 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _237 = inversesqrt(dot(vec3(_229, _230, _231), vec3(_229, _230, _231)));
    float _244 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _251 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _265 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _267 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _268 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3805 = isnan(0.0) ? _265 : (isnan(_265) ? 0.0 : max(_265, 0.0));
    float _3816 = isnan(0.0) ? _267 : (isnan(_267) ? 0.0 : max(_267, 0.0));
    float _3827 = isnan(0.0) ? _268 : (isnan(_268) ? 0.0 : max(_268, 0.0));
    uint _278 = uint(roundEven(NORMAL.w)) * 13u;
    uint _283 = _278 + 1u;
    uint _287 = _278 + 2u;
    float _296 = sqrt(((cbInstanceData._m0[_283].x * cbInstanceData._m0[_283].x) + (cbInstanceData._m0[_278].x * cbInstanceData._m0[_278].x)) + (cbInstanceData._m0[_287].x * cbInstanceData._m0[_287].x));
    float _297 = _296 * TEXCOORD.z;
    float _298 = _296 * TEXCOORD.w;
    vec4 _311 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _297) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _298) + cbTextureTilingScale._m0[13u].w));
    vec4 _334 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _360 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _365 = _360.x * cbMtdParam._m0[11u].x;
    float _366 = _360.y * cbMtdParam._m0[11u].y;
    float _367 = _360.z * cbMtdParam._m0[11u].z;
    vec4 _386 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _297) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _298) + cbTextureTilingScale._m0[5u].w));
    vec4 _405 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _440 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _442 = _440.x;
    float _454 = dot(vec4(_442, _440.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _471 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _405.x) * 2.0) - ((((_442 - _454) * cbMtdParam._m0[24u].z) + _454) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3838 = isnan(0.0) ? _471 : (isnan(_471) ? 0.0 : max(_471, 0.0));
    float _472 = isnan(1.0) ? _3838 : (isnan(_3838) ? 1.0 : min(_3838, 1.0));
    float _479 = (_472 * ((_386.x * cbMtdParam._m0[12u].x) - _365)) + _365;
    float _480 = (_472 * ((_386.y * cbMtdParam._m0[12u].y) - _366)) + _366;
    float _481 = (_472 * ((_386.z * cbMtdParam._m0[12u].z) - _367)) + _367;
    vec4 _498 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _297) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _298) + cbTextureTilingScale._m0[3u].w));
    vec4 _518 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _520 = _518.x;
    float _530 = dot(vec4(_520, _518.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _544 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _405.y) * 2.0) - ((((_520 - _530) * cbMtdParam._m0[24u].z) + _530) * cbMtdParam._m0[20u].w))) + 1.0;
    float _3849 = isnan(0.0) ? _544 : (isnan(_544) ? 0.0 : max(_544, 0.0));
    float _545 = isnan(1.0) ? _3849 : (isnan(_3849) ? 1.0 : min(_3849, 1.0));
    float _555 = (_334.x * cbMtdParam._m0[9u].x) * ((_545 * ((_498.x * cbMtdParam._m0[13u].x) - _479)) + _479);
    float _556 = (_334.y * cbMtdParam._m0[9u].y) * ((_545 * ((_498.y * cbMtdParam._m0[13u].y) - _480)) + _480);
    float _557 = (_334.z * cbMtdParam._m0[9u].z) * ((_545 * ((_498.z * cbMtdParam._m0[13u].z) - _481)) + _481);
    float _561 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _311.x) * _555;
    float _564 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _311.y) * _556;
    float _567 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _311.z) * _557;
    float _575 = (((_555 - _561) * (isnan(1.0) ? _3805 : (isnan(_3805) ? 1.0 : min(_3805, 1.0)))) + _561) * 4.55000019073486328125;
    float _577 = (((_556 - _564) * (isnan(1.0) ? _3816 : (isnan(_3816) ? 1.0 : min(_3816, 1.0)))) + _564) * 4.55000019073486328125;
    float _579 = (((_557 - _567) * (isnan(1.0) ? _3827 : (isnan(_3827) ? 1.0 : min(_3827, 1.0)))) + _567) * 4.55000019073486328125;
    vec4 _598 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _297) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _298) + cbTextureTilingScale._m0[14u].w));
    vec4 _617 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _297) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _298) + cbTextureTilingScale._m0[20u].w));
    vec4 _640 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _297) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _298) + cbTextureTilingScale._m0[4u].w));
    vec4 _657 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _659 = _657.x;
    float _660 = _657.y;
    float _661 = _657.z;
    float _668 = ((_640.x - _659) * _472) + _659;
    float _669 = ((_640.y - _660) * _472) + _660;
    float _670 = ((_640.z - _661) * _472) + _661;
    vec4 _682 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _297) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _298) + cbTextureTilingScale._m0[2u].w));
    float _695 = ((_682.z - _670) * _545) + _670;
    float _698 = ((((_682.x - _668) * _545) + _668) * 2.0) + (-1.0);
    float _699 = ((((_682.y - _669) * _545) + _669) * 2.0) + (-1.0);
    float _700 = dot(vec2(_698, _699), vec2(_698, _699));
    float _3860 = isnan(0.0) ? _700 : (isnan(_700) ? 0.0 : max(_700, 0.0));
    float _705 = sqrt(1.0 - (isnan(1.0) ? _3860 : (isnan(_3860) ? 1.0 : min(_3860, 1.0))));
    vec4 _719 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _744 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _297) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _298) + cbTextureTilingScale._m0[11u].w));
    float _746 = _744.x;
    float _747 = 1.0 - _746;
    float _760 = (TEXCOORD_8.w - ((cbMtdParam._m0[21u].z * (1.0 - TEXCOORD_8.w)) * ((((_746 - _747) * cbMtdParam._m0[24u].w) + _747) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3871 = isnan(0.0) ? _760 : (isnan(_760) ? 0.0 : max(_760, 0.0));
    float _761 = isnan(1.0) ? _3871 : (isnan(_3871) ? 1.0 : min(_3871, 1.0));
    float _768 = (_761 * ((_598.x * cbMtdParam._m0[18u].x) - _575)) + _575;
    float _769 = (_761 * ((_598.y * cbMtdParam._m0[18u].y) - _577)) + _577;
    float _770 = (_761 * ((_598.z * cbMtdParam._m0[18u].z) - _579)) + _579;
    float _775 = (((_617.z - _695) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _695;
    float _779 = ((_719.z - _775) * cbMtdParam._m0[19u].w) + _775;
    vec4 _792 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _297) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _298) + cbTextureTilingScale._m0[15u].w));
    float _799 = (_792.x * 2.0) + (-1.0);
    float _800 = (_792.y * 2.0) + (-1.0);
    float _801 = dot(vec2(_799, _800), vec2(_799, _800));
    float _3882 = isnan(0.0) ? _801 : (isnan(_801) ? 0.0 : max(_801, 0.0));
    float _809 = (_761 * (_792.z - _779)) + _779;
    float _818 = (_698 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_617.x * 2.0) + (-1.0)))) + (((_719.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _819 = (_699 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_617.y * 2.0) + (-1.0)))) + (((_719.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _831 = (((_799 - _818) + (cbMtdParam._m0[21u].x * _818)) * _761) + _818;
    float _832 = (((_800 - _819) + (cbMtdParam._m0[21u].x * _819)) * _761) + _819;
    float _833 = (_761 * (sqrt(1.0 - (isnan(1.0) ? _3882 : (isnan(_3882) ? 1.0 : min(_3882, 1.0)))) - _705)) + _705;
    float _837 = cbMtdParam._m0[22u].x + _719.w;
    float _840 = fma(_833, _244 * NORMAL.x, fma(_832, _251 * TANGENT.x, (_237 * _229) * _831));
    float _843 = fma(_833, _244 * NORMAL.y, fma(_832, _251 * TANGENT.y, (_237 * _230) * _831));
    float _846 = fma(_833, _244 * NORMAL.z, fma(_832, _251 * TANGENT.z, (_237 * _231) * _831));
    float _850 = inversesqrt(dot(vec3(_840, _843, _846), vec3(_840, _843, _846)));
    float _851 = _850 * _840;
    float _852 = _850 * _843;
    float _853 = _850 * _846;
    float _3893 = isnan(0.0) ? _809 : (isnan(_809) ? 0.0 : max(_809, 0.0));
    float _854 = isnan(1.0) ? _3893 : (isnan(_3893) ? 1.0 : min(_3893, 1.0));
    float _3904 = isnan(0.0) ? _837 : (isnan(_837) ? 0.0 : max(_837, 0.0));
    float _3915 = isnan(0.0) ? _768 : (isnan(_768) ? 0.0 : max(_768, 0.0));
    float _3926 = isnan(0.0) ? _769 : (isnan(_769) ? 0.0 : max(_769, 0.0));
    float _3937 = isnan(0.0) ? _770 : (isnan(_770) ? 0.0 : max(_770, 0.0));
    float _872 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _913 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _923 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _913);
    float _924 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _913);
    float _925 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _913);
    float _929 = inversesqrt(dot(vec3(_923, _924, _925), vec3(_923, _924, _925)));
    float _930 = _923 * _929;
    float _931 = _924 * _929;
    float _932 = _925 * _929;
    vec4 _937 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _939 = _937.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1093 = sqrt(((_923 * _923) + (_924 * _924)) + (_925 * _925));
        float _1099 = (cbMatDynParam._m0[5u].x * _1093) + cbMatDynParam._m0[5u].y;
        float _3948 = isnan(0.0) ? _1099 : (isnan(_1099) ? 0.0 : max(_1099, 0.0));
        float _1100 = isnan(1.0) ? _3948 : (isnan(_3948) ? 1.0 : min(_3948, 1.0));
        float _1104 = (cbMatDynParam._m0[5u].z * _1093) + cbMatDynParam._m0[5u].w;
        float _3959 = isnan(0.0) ? _1104 : (isnan(_1104) ? 0.0 : max(_1104, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3959 : (isnan(_3959) ? 1.0 : min(_3959, 1.0))) - _1100)) + _1100) < ((_939 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _950 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _951 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _969 = fma(_853, cbSceneParam._m0[5u].z, fma(_852, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _851));
    float _972 = fma(_853, cbSceneParam._m0[6u].z, fma(_852, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _851));
    float _975 = fma(_853, cbSceneParam._m0[7u].z, fma(_852, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _851));
    uint _988 = _278 + 9u;
    uint _989 = _988 + uint(cbMatDynParam._m0[0u].w);
    float _995 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3915 : (isnan(_3915) ? 1.0 : min(_3915, 1.0)))) * cbInstanceData._m0[_989].x;
    float _996 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3926 : (isnan(_3926) ? 1.0 : min(_3926, 1.0)))) * cbInstanceData._m0[_989].y;
    float _997 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3937 : (isnan(_3937) ? 1.0 : min(_3937, 1.0)))) * cbInstanceData._m0[_989].z;
    float _3970 = isnan(0.0) ? _995 : (isnan(_995) ? 0.0 : max(_995, 0.0));
    float _998 = isnan(1.0) ? _3970 : (isnan(_3970) ? 1.0 : min(_3970, 1.0));
    float _3981 = isnan(0.0) ? _996 : (isnan(_996) ? 0.0 : max(_996, 0.0));
    float _999 = isnan(1.0) ? _3981 : (isnan(_3981) ? 1.0 : min(_3981, 1.0));
    float _3992 = isnan(0.0) ? _997 : (isnan(_997) ? 0.0 : max(_997, 0.0));
    float _1000 = isnan(1.0) ? _3992 : (isnan(_3992) ? 1.0 : min(_3992, 1.0));
    vec4 _1009 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _950, cbSceneParam._m0[86u].y * _951));
    float _1013 = ((isnan(1.0) ? _3904 : (isnan(_3904) ? 1.0 : min(_3904, 1.0))) * TEXCOORD_5.w) * _1009.x;
    float _1014 = dot(vec3(_851, _852, _853), vec3(_930, _931, _932));
    float _1017 = _1014 * 2.0;
    float _1021 = (_1017 * _851) - _930;
    float _1022 = (_1017 * _852) - _931;
    float _1023 = (_1017 * _853) - _932;
    float _1027 = abs(dot(vec3(_930, _931, _932), vec3(_851, _852, _853)));
    float _4003 = isnan(0.0) ? _1027 : (isnan(_1027) ? 0.0 : max(_1027, 0.0));
    float _1029 = sqrt(_854);
    float _1042 = exp2((_1029 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4003 : (isnan(_4003) ? 1.0 : min(_4003, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1029 * 3.0));
    float _1074 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1078 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1082 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1411;
    float _1413;
    float _1414;
    float _1415;
    float _1416;
    float _1417;
    float _1418;
    float _1419;
    float _1420;
    float _1421;
    float _1422;
    float _1423;
    float _1424;
    float _1425;
    float _1426;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1136 = fma(_1082, cbModelParam._m0[26u].z, fma(_1078, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1074));
        float _1140 = fma(_1082, cbModelParam._m0[27u].z, fma(_1078, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1074));
        float _1144 = fma(_1082, cbModelParam._m0[28u].z, fma(_1078, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1074));
        float _1169 = _1074 + _851;
        float _1170 = _1078 + _852;
        float _1171 = _1082 + _853;
        float _1181 = fma(_1171, cbModelParam._m0[26u].z, fma(_1170, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1169)) - _1136;
        float _1182 = fma(_1171, cbModelParam._m0[27u].z, fma(_1170, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1169)) - _1140;
        float _1183 = fma(_1171, cbModelParam._m0[28u].z, fma(_1170, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1169)) - _1144;
        float _1187 = inversesqrt(dot(vec3(_1181, _1182, _1183), vec3(_1181, _1182, _1183)));
        float _1200 = ((_1187 * _1181) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1136 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1201 = ((_1187 * _1182) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1140 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1202 = ((_1187 * _1183) / cbModelParam._m0[34u].z) + ((((((_1144 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1205 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1200, _1201, _1202), 0.0);
        vec4 _1212 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1200, _1201, _1202), 0.0);
        vec4 _1219 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1200, _1201, _1202), 0.0);
        vec4 _1226 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1200, _1201, _1202), 0.0);
        float _1239 = exp2((_1205.w + (-0.5)) * 20.0) * 2.0;
        float _1240 = _1239 * (_1205.x + (-0.5));
        float _1241 = _1239 * (_1205.y + (-0.5));
        float _1242 = _1239 * (_1205.z + (-0.5));
        float _1249 = exp2((_1212.w + (-0.5)) * 20.0) * 2.0;
        float _1250 = _1249 * (_1212.x + (-0.5));
        float _1251 = _1249 * (_1212.y + (-0.5));
        float _1252 = _1249 * (_1212.z + (-0.5));
        float _1259 = exp2((_1219.w + (-0.5)) * 20.0) * 2.0;
        float _1260 = _1259 * (_1219.x + (-0.5));
        float _1261 = _1259 * (_1219.y + (-0.5));
        float _1262 = _1259 * (_1219.z + (-0.5));
        float _1269 = exp2((_1226.w + (-0.5)) * 20.0) * 2.0;
        float _1270 = _1269 * (_1226.x + (-0.5));
        float _1271 = _1269 * (_1226.y + (-0.5));
        float _1272 = _1269 * (_1226.z + (-0.5));
        float _1273 = isnan(0.0) ? _1270 : (isnan(_1270) ? 0.0 : max(_1270, 0.0));
        float _1274 = isnan(0.0) ? _1271 : (isnan(_1271) ? 0.0 : max(_1271, 0.0));
        float _1275 = isnan(0.0) ? _1272 : (isnan(_1272) ? 0.0 : max(_1272, 0.0));
        float _1276 = _1240 * 0.5;
        float _1277 = _1250 * 0.5;
        float _1278 = _1260 * 0.5;
        float _1279 = dot(vec3(_1276, _1277, _1278), vec3(_1276, _1277, _1278));
        float _1284 = (_1279 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1279);
        float _1293 = (dot(vec3(_851, _852, _853), vec3(_1284 * _1276, _1284 * _1277, _1284 * _1278)) + 1.0) * 0.5;
        float _4029 = isnan(0.0) ? _1293 : (isnan(_1293) ? 0.0 : max(_1293, 0.0));
        float _1303 = sqrt(((_1277 * _1277) + (_1276 * _1276)) + (_1278 * _1278)) / (_1273 + 9.9999997473787516355514526367188e-06);
        float _4040 = isnan(0.0) ? _1303 : (isnan(_1303) ? 0.0 : max(_1303, 0.0));
        float _1304 = isnan(1.0) ? _4040 : (isnan(_4040) ? 1.0 : min(_4040, 1.0));
        float _1305 = _1304 * 2.0;
        float _1309 = (1.0 - _1304) / (_1304 + 1.0);
        float _4051 = isnan(0.0) ? _1309 : (isnan(_1309) ? 0.0 : max(_1309, 0.0));
        float _1310 = isnan(1.0) ? _4051 : (isnan(_4051) ? 1.0 : min(_4051, 1.0));
        float _1319 = ((((1.0 - _1310) * (_1305 + 2.0)) * exp2(log2(isnan(1.0) ? _4029 : (isnan(_4029) ? 1.0 : min(_4029, 1.0))) * (_1305 + 1.0))) + _1310) * _1273;
        float _1320 = _1241 * 0.5;
        float _1321 = _1251 * 0.5;
        float _1322 = _1261 * 0.5;
        float _1323 = dot(vec3(_1320, _1321, _1322), vec3(_1320, _1321, _1322));
        float _1328 = (_1323 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1323);
        float _1336 = (dot(vec3(_851, _852, _853), vec3(_1328 * _1320, _1328 * _1321, _1328 * _1322)) + 1.0) * 0.5;
        float _4062 = isnan(0.0) ? _1336 : (isnan(_1336) ? 0.0 : max(_1336, 0.0));
        float _1345 = sqrt(((_1321 * _1321) + (_1320 * _1320)) + (_1322 * _1322)) / (_1274 + 9.9999997473787516355514526367188e-06);
        float _4073 = isnan(0.0) ? _1345 : (isnan(_1345) ? 0.0 : max(_1345, 0.0));
        float _1346 = isnan(1.0) ? _4073 : (isnan(_4073) ? 1.0 : min(_4073, 1.0));
        float _1347 = _1346 * 2.0;
        float _1351 = (1.0 - _1346) / (_1346 + 1.0);
        float _4084 = isnan(0.0) ? _1351 : (isnan(_1351) ? 0.0 : max(_1351, 0.0));
        float _1352 = isnan(1.0) ? _4084 : (isnan(_4084) ? 1.0 : min(_4084, 1.0));
        float _1361 = ((((1.0 - _1352) * (_1347 + 2.0)) * exp2(log2(isnan(1.0) ? _4062 : (isnan(_4062) ? 1.0 : min(_4062, 1.0))) * (_1347 + 1.0))) + _1352) * _1274;
        float _1362 = _1242 * 0.5;
        float _1363 = _1252 * 0.5;
        float _1364 = _1262 * 0.5;
        float _1365 = dot(vec3(_1362, _1363, _1364), vec3(_1362, _1363, _1364));
        float _1370 = (_1365 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1365);
        float _1378 = (dot(vec3(_851, _852, _853), vec3(_1370 * _1362, _1370 * _1363, _1370 * _1364)) + 1.0) * 0.5;
        float _4095 = isnan(0.0) ? _1378 : (isnan(_1378) ? 0.0 : max(_1378, 0.0));
        float _1387 = sqrt(((_1363 * _1363) + (_1362 * _1362)) + (_1364 * _1364)) / (_1275 + 9.9999997473787516355514526367188e-06);
        float _4106 = isnan(0.0) ? _1387 : (isnan(_1387) ? 0.0 : max(_1387, 0.0));
        float _1388 = isnan(1.0) ? _4106 : (isnan(_4106) ? 1.0 : min(_4106, 1.0));
        float _1389 = _1388 * 2.0;
        float _1393 = (1.0 - _1388) / (_1388 + 1.0);
        float _4117 = isnan(0.0) ? _1393 : (isnan(_1393) ? 0.0 : max(_1393, 0.0));
        float _1394 = isnan(1.0) ? _4117 : (isnan(_4117) ? 1.0 : min(_4117, 1.0));
        float _1403 = ((((1.0 - _1394) * (_1389 + 2.0)) * exp2(log2(isnan(1.0) ? _4095 : (isnan(_4095) ? 1.0 : min(_4095, 1.0))) * (_1389 + 1.0))) + _1394) * _1275;
        _1411 = _1242;
        _1413 = _1241;
        _1414 = _1240;
        _1415 = _1252;
        _1416 = _1251;
        _1417 = _1250;
        _1418 = _1262;
        _1419 = _1261;
        _1420 = _1260;
        _1421 = _1275;
        _1422 = _1274;
        _1423 = _1273;
        _1424 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1319 : (isnan(_1319) ? 0.0 : max(_1319, 0.0)));
        _1425 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1361 : (isnan(_1361) ? 0.0 : max(_1361, 0.0)));
        _1426 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1403 : (isnan(_1403) ? 0.0 : max(_1403, 0.0)));
    }
    else
    {
        _1411 = _1412;
        _1413 = _1412;
        _1414 = _1412;
        _1415 = _1412;
        _1416 = _1412;
        _1417 = _1412;
        _1418 = _1412;
        _1419 = _1412;
        _1420 = _1412;
        _1421 = _1412;
        _1422 = _1412;
        _1423 = _1412;
        _1424 = 0.0;
        _1425 = 0.0;
        _1426 = 0.0;
    }
    float _1722;
    float _1723;
    float _1724;
    float _1725;
    float _1726;
    float _1727;
    float _1728;
    float _1729;
    float _1730;
    float _1731;
    float _1732;
    float _1733;
    float _1734;
    float _1735;
    float _1736;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1453 = fma(_1082, cbModelParam._m0[30u].z, fma(_1078, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1074));
        float _1457 = fma(_1082, cbModelParam._m0[31u].z, fma(_1078, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1074));
        float _1461 = fma(_1082, cbModelParam._m0[32u].z, fma(_1078, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1074));
        float _1484 = _1074 + _851;
        float _1485 = _1078 + _852;
        float _1486 = _1082 + _853;
        float _1496 = fma(_1486, cbModelParam._m0[30u].z, fma(_1485, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1484)) - _1453;
        float _1497 = fma(_1486, cbModelParam._m0[31u].z, fma(_1485, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1484)) - _1457;
        float _1498 = fma(_1486, cbModelParam._m0[32u].z, fma(_1485, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1484)) - _1461;
        float _1502 = inversesqrt(dot(vec3(_1496, _1497, _1498), vec3(_1496, _1497, _1498)));
        float _1515 = ((_1502 * _1496) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1453 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1516 = ((_1502 * _1497) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1457 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1517 = ((_1502 * _1498) / cbModelParam._m0[35u].z) + ((((((_1461 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1519 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1515, _1516, _1517), 0.0);
        vec4 _1526 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1515, _1516, _1517), 0.0);
        vec4 _1533 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1515, _1516, _1517), 0.0);
        vec4 _1540 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1515, _1516, _1517), 0.0);
        float _1552 = exp2((_1519.w + (-0.5)) * 20.0) * 2.0;
        float _1553 = _1552 * (_1519.x + (-0.5));
        float _1554 = _1552 * (_1519.y + (-0.5));
        float _1555 = _1552 * (_1519.z + (-0.5));
        float _1562 = exp2((_1526.w + (-0.5)) * 20.0) * 2.0;
        float _1563 = _1562 * (_1526.x + (-0.5));
        float _1564 = _1562 * (_1526.y + (-0.5));
        float _1565 = _1562 * (_1526.z + (-0.5));
        float _1572 = exp2((_1533.w + (-0.5)) * 20.0) * 2.0;
        float _1573 = _1572 * (_1533.x + (-0.5));
        float _1574 = _1572 * (_1533.y + (-0.5));
        float _1575 = _1572 * (_1533.z + (-0.5));
        float _1582 = exp2((_1540.w + (-0.5)) * 20.0) * 2.0;
        float _1583 = _1582 * (_1540.x + (-0.5));
        float _1584 = _1582 * (_1540.y + (-0.5));
        float _1585 = _1582 * (_1540.z + (-0.5));
        float _1586 = isnan(0.0) ? _1583 : (isnan(_1583) ? 0.0 : max(_1583, 0.0));
        float _1587 = isnan(0.0) ? _1584 : (isnan(_1584) ? 0.0 : max(_1584, 0.0));
        float _1588 = isnan(0.0) ? _1585 : (isnan(_1585) ? 0.0 : max(_1585, 0.0));
        float _1589 = _1553 * 0.5;
        float _1590 = _1563 * 0.5;
        float _1591 = _1573 * 0.5;
        float _1592 = dot(vec3(_1589, _1590, _1591), vec3(_1589, _1590, _1591));
        float _1597 = (_1592 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1592);
        float _1605 = (dot(vec3(_851, _852, _853), vec3(_1597 * _1589, _1597 * _1590, _1597 * _1591)) + 1.0) * 0.5;
        float _4158 = isnan(0.0) ? _1605 : (isnan(_1605) ? 0.0 : max(_1605, 0.0));
        float _1614 = sqrt(((_1590 * _1590) + (_1589 * _1589)) + (_1591 * _1591)) / (_1586 + 9.9999997473787516355514526367188e-06);
        float _4169 = isnan(0.0) ? _1614 : (isnan(_1614) ? 0.0 : max(_1614, 0.0));
        float _1615 = isnan(1.0) ? _4169 : (isnan(_4169) ? 1.0 : min(_4169, 1.0));
        float _1616 = _1615 * 2.0;
        float _1620 = (1.0 - _1615) / (_1615 + 1.0);
        float _4180 = isnan(0.0) ? _1620 : (isnan(_1620) ? 0.0 : max(_1620, 0.0));
        float _1621 = isnan(1.0) ? _4180 : (isnan(_4180) ? 1.0 : min(_4180, 1.0));
        float _1630 = ((((1.0 - _1621) * (_1616 + 2.0)) * exp2(log2(isnan(1.0) ? _4158 : (isnan(_4158) ? 1.0 : min(_4158, 1.0))) * (_1616 + 1.0))) + _1621) * _1586;
        float _1631 = _1554 * 0.5;
        float _1632 = _1564 * 0.5;
        float _1633 = _1574 * 0.5;
        float _1634 = dot(vec3(_1631, _1632, _1633), vec3(_1631, _1632, _1633));
        float _1639 = (_1634 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1634);
        float _1647 = (dot(vec3(_851, _852, _853), vec3(_1639 * _1631, _1639 * _1632, _1639 * _1633)) + 1.0) * 0.5;
        float _4191 = isnan(0.0) ? _1647 : (isnan(_1647) ? 0.0 : max(_1647, 0.0));
        float _1656 = sqrt(((_1632 * _1632) + (_1631 * _1631)) + (_1633 * _1633)) / (_1587 + 9.9999997473787516355514526367188e-06);
        float _4202 = isnan(0.0) ? _1656 : (isnan(_1656) ? 0.0 : max(_1656, 0.0));
        float _1657 = isnan(1.0) ? _4202 : (isnan(_4202) ? 1.0 : min(_4202, 1.0));
        float _1658 = _1657 * 2.0;
        float _1662 = (1.0 - _1657) / (_1657 + 1.0);
        float _4213 = isnan(0.0) ? _1662 : (isnan(_1662) ? 0.0 : max(_1662, 0.0));
        float _1663 = isnan(1.0) ? _4213 : (isnan(_4213) ? 1.0 : min(_4213, 1.0));
        float _1672 = ((((1.0 - _1663) * (_1658 + 2.0)) * exp2(log2(isnan(1.0) ? _4191 : (isnan(_4191) ? 1.0 : min(_4191, 1.0))) * (_1658 + 1.0))) + _1663) * _1587;
        float _1673 = _1555 * 0.5;
        float _1674 = _1565 * 0.5;
        float _1675 = _1575 * 0.5;
        float _1676 = dot(vec3(_1673, _1674, _1675), vec3(_1673, _1674, _1675));
        float _1681 = (_1676 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1676);
        float _1689 = (dot(vec3(_851, _852, _853), vec3(_1681 * _1673, _1681 * _1674, _1681 * _1675)) + 1.0) * 0.5;
        float _4224 = isnan(0.0) ? _1689 : (isnan(_1689) ? 0.0 : max(_1689, 0.0));
        float _1698 = sqrt(((_1674 * _1674) + (_1673 * _1673)) + (_1675 * _1675)) / (_1588 + 9.9999997473787516355514526367188e-06);
        float _4235 = isnan(0.0) ? _1698 : (isnan(_1698) ? 0.0 : max(_1698, 0.0));
        float _1699 = isnan(1.0) ? _4235 : (isnan(_4235) ? 1.0 : min(_4235, 1.0));
        float _1700 = _1699 * 2.0;
        float _1704 = (1.0 - _1699) / (_1699 + 1.0);
        float _4246 = isnan(0.0) ? _1704 : (isnan(_1704) ? 0.0 : max(_1704, 0.0));
        float _1705 = isnan(1.0) ? _4246 : (isnan(_4246) ? 1.0 : min(_4246, 1.0));
        float _1714 = ((((1.0 - _1705) * (_1700 + 2.0)) * exp2(log2(isnan(1.0) ? _4224 : (isnan(_4224) ? 1.0 : min(_4224, 1.0))) * (_1700 + 1.0))) + _1705) * _1588;
        _1722 = _1555;
        _1723 = _1554;
        _1724 = _1553;
        _1725 = _1565;
        _1726 = _1564;
        _1727 = _1563;
        _1728 = _1575;
        _1729 = _1574;
        _1730 = _1573;
        _1731 = _1588;
        _1732 = _1587;
        _1733 = _1586;
        _1734 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1630 : (isnan(_1630) ? 0.0 : max(_1630, 0.0)));
        _1735 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1672 : (isnan(_1672) ? 0.0 : max(_1672, 0.0)));
        _1736 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1714 : (isnan(_1714) ? 0.0 : max(_1714, 0.0)));
    }
    else
    {
        _1722 = _1412;
        _1723 = _1412;
        _1724 = _1412;
        _1725 = _1412;
        _1726 = _1412;
        _1727 = _1412;
        _1728 = _1412;
        _1729 = _1412;
        _1730 = _1412;
        _1731 = _1412;
        _1732 = _1412;
        _1733 = _1412;
        _1734 = 0.0;
        _1735 = 0.0;
        _1736 = 0.0;
    }
    float _1746 = (cbModelParam._m0[1u].x * (_1734 - _1424)) + _1424;
    float _1747 = (cbModelParam._m0[1u].x * (_1735 - _1425)) + _1425;
    float _1748 = (cbModelParam._m0[1u].x * (_1736 - _1426)) + _1426;
    float _1769 = fma(_1748, cbSceneParam._m0[89u].z, fma(_1747, cbSceneParam._m0[89u].y, _1746 * cbSceneParam._m0[89u].x));
    float _1772 = fma(_1748, cbSceneParam._m0[90u].z, fma(_1747, cbSceneParam._m0[90u].y, _1746 * cbSceneParam._m0[90u].x));
    float _1775 = fma(_1748, cbSceneParam._m0[91u].z, fma(_1747, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1746));
    float _1790 = _1021 * 0.5;
    float _1791 = _1022 * 0.5;
    float _1792 = _1023 * 0.5;
    float _1793 = dot(vec4(_1790, _1791, _1792, 1.0), vec4(_1724, _1727, _1730, _1733));
    float _1796 = dot(vec4(_1790, _1791, _1792, 1.0), vec4(_1723, _1726, _1729, _1732));
    float _1799 = dot(vec4(_1790, _1791, _1792, 1.0), vec4(_1722, _1725, _1728, _1731));
    float _1833;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1806 = dot(vec4(_1790, _1791, _1792, 1.0), vec4(_1411, _1415, _1418, _1421));
        float _1810 = dot(vec4(_1790, _1791, _1792, 1.0), vec4(_1413, _1416, _1419, _1422));
        float _1814 = dot(vec4(_1790, _1791, _1792, 1.0), vec4(_1414, _1417, _1420, _1423));
        float _1821 = dot(vec4(cbModelParam._m0[39u]), vec4(_1790, _1791, _1792, 1.0));
        _1833 = dot(vec3(isnan(0.0) ? _1814 : (isnan(_1814) ? 0.0 : max(_1814, 0.0)), isnan(0.0) ? _1810 : (isnan(_1810) ? 0.0 : max(_1810, 0.0)), isnan(0.0) ? _1806 : (isnan(_1806) ? 0.0 : max(_1806, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1821) ? 0.0 : (isnan(0.0) ? _1821 : max(0.0, _1821))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1833 = 1.0;
    }
    float _1844;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1835 = dot(vec4(cbModelParam._m0[40u]), vec4(_1790, _1791, _1792, 1.0));
        _1844 = dot(vec3(isnan(0.0) ? _1793 : (isnan(_1793) ? 0.0 : max(_1793, 0.0)), isnan(0.0) ? _1796 : (isnan(_1796) ? 0.0 : max(_1796, 0.0)), isnan(0.0) ? _1799 : (isnan(_1799) ? 0.0 : max(_1799, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1835) ? 0.0 : (isnan(0.0) ? _1835 : max(0.0, _1835))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1844 = 1.0;
    }
    float _1848 = (_1844 * cbModelParam._m0[1u].x) + (_1833 * (1.0 - cbModelParam._m0[1u].x));
    float _1858 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _854);
    float _1859 = isnan(_1858) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1858 : min(cbModelParam._m0[25u].z, _1858));
    float _1939;
    float _1941;
    float _1943;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1906 = fma(_1082, cbModelParam._m0[13u].z, fma(_1078, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1074)) + cbModelParam._m0[13u].w;
        float _1910 = fma(_1082, cbModelParam._m0[14u].z, fma(_1078, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1074)) + cbModelParam._m0[14u].w;
        float _1914 = fma(_1082, cbModelParam._m0[15u].z, fma(_1078, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1074)) + cbModelParam._m0[15u].w;
        float _1917 = fma(_1023, cbModelParam._m0[13u].z, fma(_1022, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1021));
        float _1920 = fma(_1023, cbModelParam._m0[14u].z, fma(_1022, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1021));
        float _1923 = fma(_1023, cbModelParam._m0[15u].z, fma(_1022, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1021));
        float _1951;
        if (_1917 > 0.0)
        {
            _1951 = abs((1.0 - _1906) / _1917);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1917 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1906 + 1.0) / _1917);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1951 = frontier_phi_17_15_ladder;
        }
        float _2172;
        if (_1920 > 0.0)
        {
            _2172 = abs((1.0 - _1910) / _1920);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1920 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1910 + 1.0) / _1920);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2172 = frontier_phi_26_22_ladder;
        }
        float _2418;
        if (_1923 > 0.0)
        {
            _2418 = abs((1.0 - _1914) / _1923);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1923 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1914 + 1.0) / _1923);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2418 = frontier_phi_38_33_ladder;
        }
        float _2420 = isnan(_2172) ? _1951 : (isnan(_1951) ? _2172 : min(_1951, _2172));
        float _2421 = isnan(_2418) ? _2420 : (isnan(_2420) ? _2418 : min(_2420, _2418));
        float _2425 = (_2421 * _1917) + _1906;
        float _2426 = (_2421 * _1920) + _1910;
        float _2427 = (_2421 * _1923) + _1914;
        float _2428 = _2421 * 9.9999997473787516355514526367188e-05;
        float _2430 = (-1.0) - _2428;
        float _2432 = _2428 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2427 > _2432) || ((_2427 < _2430) || ((_2426 > _2432) || ((_2426 < _2430) || ((_2425 < _2430) || (_2425 > _2432))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2551 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2427, cbModelParam._m0[9u].z, fma(_2426, cbModelParam._m0[9u].y, _2425 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2427, cbModelParam._m0[10u].z, fma(_2426, cbModelParam._m0[10u].y, _2425 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2427, cbModelParam._m0[11u].z, fma(_2426, cbModelParam._m0[11u].y, _2425 * cbModelParam._m0[11u].x))), _1859);
            frontier_phi_16_38_ladder = _2551.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2551.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2551.x * cbModelParam._m0[1u].y;
        }
        _1939 = frontier_phi_16_38_ladder_2;
        _1941 = frontier_phi_16_38_ladder_1;
        _1943 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1927 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1021, _1022, _1023), _1859);
        _1939 = _1927.x * cbModelParam._m0[1u].y;
        _1941 = _1927.y * cbModelParam._m0[1u].y;
        _1943 = _1927.z * cbModelParam._m0[1u].y;
    }
    float _1947 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _854);
    float _1948 = isnan(_1947) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1947 : min(cbModelParam._m0[25u].w, _1947));
    float _2037;
    float _2039;
    float _2041;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2001 = fma(_1082, cbModelParam._m0[21u].z, fma(_1078, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1074)) + cbModelParam._m0[21u].w;
        float _2005 = fma(_1082, cbModelParam._m0[22u].z, fma(_1078, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1074)) + cbModelParam._m0[22u].w;
        float _2009 = fma(_1082, cbModelParam._m0[23u].z, fma(_1078, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1074)) + cbModelParam._m0[23u].w;
        float _2012 = fma(_1023, cbModelParam._m0[21u].z, fma(_1022, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1021));
        float _2015 = fma(_1023, cbModelParam._m0[22u].z, fma(_1022, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1021));
        float _2018 = fma(_1023, cbModelParam._m0[23u].z, fma(_1022, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1021));
        float _2177;
        if (_2012 > 0.0)
        {
            _2177 = abs((1.0 - _2001) / _2012);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_2012 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_2001 + 1.0) / _2012);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2177 = frontier_phi_28_24_ladder;
        }
        float _2445;
        if (_2015 > 0.0)
        {
            _2445 = abs((1.0 - _2005) / _2015);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_2015 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_2005 + 1.0) / _2015);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2445 = frontier_phi_40_35_ladder;
        }
        float _2650;
        if (_2018 > 0.0)
        {
            _2650 = abs((1.0 - _2009) / _2018);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_2018 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_2009 + 1.0) / _2018);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2650 = frontier_phi_49_46_ladder;
        }
        float _2652 = isnan(_2445) ? _2177 : (isnan(_2177) ? _2445 : min(_2177, _2445));
        float _2653 = isnan(_2650) ? _2652 : (isnan(_2652) ? _2650 : min(_2652, _2650));
        float _2657 = (_2653 * _2012) + _2001;
        float _2658 = (_2653 * _2015) + _2005;
        float _2659 = (_2653 * _2018) + _2009;
        float _2660 = _2653 * 9.9999997473787516355514526367188e-05;
        float _2661 = (-1.0) - _2660;
        float _2663 = _2660 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2659 > _2663) || ((_2659 < _2661) || ((_2658 > _2663) || ((_2658 < _2661) || ((_2657 < _2661) || (_2657 > _2663))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2858 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2659, cbModelParam._m0[17u].z, fma(_2658, cbModelParam._m0[17u].y, _2657 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2659, cbModelParam._m0[18u].z, fma(_2658, cbModelParam._m0[18u].y, _2657 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2659, cbModelParam._m0[19u].z, fma(_2658, cbModelParam._m0[19u].y, _2657 * cbModelParam._m0[19u].x))), _1948);
            frontier_phi_25_49_ladder = _2858.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2858.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2858.x * cbModelParam._m0[1u].z;
        }
        _2037 = frontier_phi_25_49_ladder_2;
        _2039 = frontier_phi_25_49_ladder_1;
        _2041 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _2021 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1021, _1022, _1023), _1948);
        _2037 = _2021.x * cbModelParam._m0[1u].z;
        _2039 = _2021.y * cbModelParam._m0[1u].z;
        _2041 = _2021.z * cbModelParam._m0[1u].z;
    }
    float _2053 = ((((1.0 - _1042) * ((_1029 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_1042 * _1029)) * _1013;
    float _2054 = _2053 * ((cbModelParam._m0[1u].w * (_2037 - _1939)) + _1939);
    float _2055 = _2053 * ((cbModelParam._m0[1u].w * (_2039 - _1941)) + _1941);
    float _2056 = _2053 * ((cbModelParam._m0[1u].w * (_2041 - _1943)) + _1943);
    float _2059 = fma(_2056, cbSceneParam._m0[89u].z, fma(_2055, cbSceneParam._m0[89u].y, _2054 * cbSceneParam._m0[89u].x));
    float _2062 = fma(_2056, cbSceneParam._m0[90u].z, fma(_2055, cbSceneParam._m0[90u].y, _2054 * cbSceneParam._m0[90u].x));
    float _2065 = fma(_2056, cbSceneParam._m0[91u].z, fma(_2055, cbSceneParam._m0[91u].y, _2054 * cbSceneParam._m0[91u].x));
    vec4 _2073 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_950, _951));
    float _2075 = _2073.w;
    float _2087 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _2075);
    float _2088 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _2075);
    float _2089 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _2075);
    uvec4 _2093 = floatBitsToUint(cbInstanceData._m0[_278 + 5u]);
    uint _2095 = _2093.x * 14u;
    uint _2096 = _2095 + 13u;
    float _2103 = _1013 + (-1.0);
    float _2108 = (cbLight._m0[_2096].x * _2103) + 1.0;
    float _2109 = (cbLight._m0[_2096].y * _2103) + 1.0;
    float _2110 = (cbLight._m0[_2096].z * _2103) + 1.0;
    float _2111 = (cbLight._m0[_2096].w * _2103) + 1.0;
    uint _2112 = _2095 + 5u;
    float _2118 = isnan(1.0) ? _2109 : (isnan(_2109) ? 1.0 : min(_2109, 1.0));
    uint _2122 = _2095 + 4u;
    float _2131 = isnan(1.0) ? _2108 : (isnan(_2108) ? 1.0 : min(_2108, 1.0));
    uint _2135 = _2095 | 1u;
    float _2146 = dot(vec3(cbLight._m0[_2095].xyz), vec3(_851, _852, _853));
    float _2149 = dot(vec3(cbLight._m0[_2135].xyz), vec3(_851, _852, _853));
    float _4382 = isnan(0.0) ? _2146 : (isnan(_2146) ? 0.0 : max(_2146, 0.0));
    float _4393 = isnan(0.0) ? _2149 : (isnan(_2149) ? 0.0 : max(_2149, 0.0));
    float _2154 = (isnan(1.0) ? _4382 : (isnan(_4382) ? 1.0 : min(_4382, 1.0))) * 0.3183098733425140380859375;
    float _2156 = (isnan(1.0) ? _4393 : (isnan(_4393) ? 1.0 : min(_4393, 1.0))) * 0.3183098733425140380859375;
    float _2163 = ((cbLight._m0[_2112].x * _2118) * _2156) + (((cbLight._m0[_2122].x * _2087) * _2131) * _2154);
    float _2164 = ((_2118 * cbLight._m0[_2112].y) * _2156) + (((cbLight._m0[_2122].y * _2088) * _2131) * _2154);
    float _2165 = ((_2118 * cbLight._m0[_2112].z) * _2156) + (((cbLight._m0[_2122].z * _2089) * _2131) * _2154);
    uvec4 _2169 = floatBitsToUint(cbLight._m0[_2095 + 12u]);
    bool _2171 = _2169.x == 0u;
    float _2182;
    float _2184;
    float _2186;
    if (_2171)
    {
        _2182 = _2163;
        _2184 = _2164;
        _2186 = _2165;
    }
    else
    {
        uint _2190 = _2095 + 6u;
        float _2206 = (dot(vec3(cbLight._m0[_2095 + 2u].xyz), vec3(_851, _852, _853)) * 0.5) + 0.5;
        float _2207 = _2206 * _2206;
        float _4404 = isnan(0.0) ? _2207 : (isnan(_2207) ? 0.0 : max(_2207, 0.0));
        float _2208 = isnan(1.0) ? _4404 : (isnan(_4404) ? 1.0 : min(_4404, 1.0));
        float _2209 = isnan(1.0) ? _2110 : (isnan(_2110) ? 1.0 : min(_2110, 1.0));
        _2182 = (((cbLight._m0[_2190].x * 0.3183098733425140380859375) * _2208) * _2209) + _2163;
        _2184 = (((cbLight._m0[_2190].y * 0.3183098733425140380859375) * _2208) * _2209) + _2164;
        _2186 = (((cbLight._m0[_2190].z * 0.3183098733425140380859375) * _2208) * _2209) + _2165;
    }
    bool _2189 = _2169.y == 0u;
    float _2227;
    float _2229;
    float _2231;
    if (_2189)
    {
        _2227 = _2182;
        _2229 = _2184;
        _2231 = _2186;
    }
    else
    {
        uint _2389 = _2095 + 7u;
        float _2405 = (dot(vec3(cbLight._m0[_2095 + 3u].xyz), vec3(_851, _852, _853)) * 0.5) + 0.5;
        float _2406 = _2405 * _2405;
        float _4420 = isnan(0.0) ? _2406 : (isnan(_2406) ? 0.0 : max(_2406, 0.0));
        float _2407 = isnan(1.0) ? _4420 : (isnan(_4420) ? 1.0 : min(_4420, 1.0));
        float _2408 = isnan(1.0) ? _2111 : (isnan(_2111) ? 1.0 : min(_2111, 1.0));
        _2227 = (((cbLight._m0[_2389].x * 0.3183098733425140380859375) * _2407) * _2408) + _2182;
        _2229 = (((cbLight._m0[_2389].y * 0.3183098733425140380859375) * _2407) * _2408) + _2184;
        _2231 = (((cbLight._m0[_2389].z * 0.3183098733425140380859375) * _2407) * _2408) + _2186;
    }
    uint _2234 = _2095 + 8u;
    float _2247 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2095].w)) * _854) * 0.949999988079071044921875);
    float _2248 = _2247 * _2247;
    float _2249 = cbLight._m0[_2095].x + _930;
    float _2250 = cbLight._m0[_2095].y + _931;
    float _2251 = cbLight._m0[_2095].z + _932;
    float _2255 = inversesqrt(dot(vec3(_2249, _2250, _2251), vec3(_2249, _2250, _2251)));
    float _2256 = _2255 * _2249;
    float _2257 = _2255 * _2250;
    float _2258 = _2255 * _2251;
    float _2259 = dot(vec3(_851, _852, _853), vec3(cbLight._m0[_2095].xyz));
    float _4436 = isnan(0.0) ? _2259 : (isnan(_2259) ? 0.0 : max(_2259, 0.0));
    float _2262 = isnan(1.0) ? _4436 : (isnan(_4436) ? 1.0 : min(_4436, 1.0));
    float _4447 = isnan(0.0) ? _1014 : (isnan(_1014) ? 0.0 : max(_1014, 0.0));
    float _2263 = isnan(1.0) ? _4447 : (isnan(_4447) ? 1.0 : min(_4447, 1.0));
    float _2264 = dot(vec3(_851, _852, _853), vec3(_2256, _2257, _2258));
    float _4458 = isnan(0.0) ? _2264 : (isnan(_2264) ? 0.0 : max(_2264, 0.0));
    float _2267 = isnan(1.0) ? _4458 : (isnan(_4458) ? 1.0 : min(_4458, 1.0));
    float _2268 = dot(vec3(cbLight._m0[_2095].xyz), vec3(_2256, _2257, _2258));
    float _4469 = isnan(0.0) ? _2268 : (isnan(_2268) ? 0.0 : max(_2268, 0.0));
    float _2272 = _2248 * _2248;
    float _2276 = ((_2267 * _2267) * (_2272 + (-1.0))) + 1.0;
    float _2287 = (exp2(log2(1.0 - (isnan(1.0) ? _4469 : (isnan(_4469) ? 1.0 : min(_4469, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2288 = 1.0 - _2248;
    float _2299 = (0.5 / (((_2263 * ((_2262 * _2288) + _2248)) + 9.9999999392252902907785028219223e-09) + (((_2263 * _2288) + _2248) * _2262))) * _2262;
    float _4480 = isnan(0.0) ? _2299 : (isnan(_2299) ? 0.0 : max(_2299, 0.0));
    float _2301 = (isnan(1.0) ? _4480 : (isnan(_4480) ? 1.0 : min(_4480, 1.0))) * (_2272 / ((_2276 * _2276) * 3.141590118408203125));
    uint _2315 = _2095 + 9u;
    float _2326 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2135].w)) * _854) * 0.949999988079071044921875);
    float _2327 = _2326 * _2326;
    float _2328 = cbLight._m0[_2135].x + _930;
    float _2329 = cbLight._m0[_2135].y + _931;
    float _2330 = cbLight._m0[_2135].z + _932;
    float _2334 = inversesqrt(dot(vec3(_2328, _2329, _2330), vec3(_2328, _2329, _2330)));
    float _2335 = _2334 * _2328;
    float _2336 = _2334 * _2329;
    float _2337 = _2334 * _2330;
    float _2338 = dot(vec3(_851, _852, _853), vec3(cbLight._m0[_2135].xyz));
    float _4491 = isnan(0.0) ? _2338 : (isnan(_2338) ? 0.0 : max(_2338, 0.0));
    float _2341 = isnan(1.0) ? _4491 : (isnan(_4491) ? 1.0 : min(_4491, 1.0));
    float _2342 = dot(vec3(_851, _852, _853), vec3(_2335, _2336, _2337));
    float _4502 = isnan(0.0) ? _2342 : (isnan(_2342) ? 0.0 : max(_2342, 0.0));
    float _2345 = isnan(1.0) ? _4502 : (isnan(_4502) ? 1.0 : min(_4502, 1.0));
    float _2346 = dot(vec3(cbLight._m0[_2135].xyz), vec3(_2335, _2336, _2337));
    float _4513 = isnan(0.0) ? _2346 : (isnan(_2346) ? 0.0 : max(_2346, 0.0));
    float _2350 = _2327 * _2327;
    float _2354 = ((_2345 * _2345) * (_2350 + (-1.0))) + 1.0;
    float _2363 = (exp2(log2(1.0 - (isnan(1.0) ? _4513 : (isnan(_4513) ? 1.0 : min(_4513, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2364 = 1.0 - _2327;
    float _2374 = (0.5 / (((_2263 * ((_2341 * _2364) + _2327)) + 9.9999999392252902907785028219223e-09) + (((_2263 * _2364) + _2327) * _2341))) * _2341;
    float _4524 = isnan(0.0) ? _2374 : (isnan(_2374) ? 0.0 : max(_2374, 0.0));
    float _2376 = (isnan(1.0) ? _4524 : (isnan(_4524) ? 1.0 : min(_4524, 1.0))) * (_2350 / ((_2354 * _2354) * 3.141590118408203125));
    float _2386 = (((_2363 * cbLight._m0[_2315].x) * _2376) * _2118) + ((((cbLight._m0[_2234].x * _2087) * _2287) * _2301) * _2131);
    float _2387 = (((_2363 * cbLight._m0[_2315].y) * _2376) * _2118) + ((((cbLight._m0[_2234].y * _2088) * _2287) * _2301) * _2131);
    float _2388 = (((_2363 * cbLight._m0[_2315].z) * _2376) * _2118) + ((((cbLight._m0[_2234].z * _2089) * _2287) * _2301) * _2131);
    float _2450;
    float _2452;
    float _2454;
    if (_2171)
    {
        _2450 = _2386;
        _2452 = _2387;
        _2454 = _2388;
    }
    else
    {
        uint _2456 = _2095 + 2u;
        uint _2460 = _2095 + 10u;
        float _2474 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2456].w)) * _854) * 0.949999988079071044921875);
        float _2475 = _2474 * _2474;
        float _2476 = cbLight._m0[_2456].x + _930;
        float _2477 = cbLight._m0[_2456].y + _931;
        float _2478 = cbLight._m0[_2456].z + _932;
        float _2482 = inversesqrt(dot(vec3(_2476, _2477, _2478), vec3(_2476, _2477, _2478)));
        float _2483 = _2482 * _2476;
        float _2484 = _2482 * _2477;
        float _2485 = _2482 * _2478;
        float _2486 = dot(vec3(_851, _852, _853), vec3(cbLight._m0[_2456].xyz));
        float _4535 = isnan(0.0) ? _2486 : (isnan(_2486) ? 0.0 : max(_2486, 0.0));
        float _2489 = isnan(1.0) ? _4535 : (isnan(_4535) ? 1.0 : min(_4535, 1.0));
        float _2490 = dot(vec3(_851, _852, _853), vec3(_2483, _2484, _2485));
        float _4546 = isnan(0.0) ? _2490 : (isnan(_2490) ? 0.0 : max(_2490, 0.0));
        float _2493 = isnan(1.0) ? _4546 : (isnan(_4546) ? 1.0 : min(_4546, 1.0));
        float _2494 = dot(vec3(cbLight._m0[_2456].xyz), vec3(_2483, _2484, _2485));
        float _4557 = isnan(0.0) ? _2494 : (isnan(_2494) ? 0.0 : max(_2494, 0.0));
        float _2498 = _2475 * _2475;
        float _2502 = ((_2493 * _2493) * (_2498 + (-1.0))) + 1.0;
        float _2511 = (exp2(log2(1.0 - (isnan(1.0) ? _4557 : (isnan(_4557) ? 1.0 : min(_4557, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2512 = 1.0 - _2475;
        float _2522 = (0.5 / (((_2263 * ((_2489 * _2512) + _2475)) + 9.9999999392252902907785028219223e-09) + (((_2263 * _2512) + _2475) * _2489))) * _2489;
        float _4568 = isnan(0.0) ? _2522 : (isnan(_2522) ? 0.0 : max(_2522, 0.0));
        float _2524 = (isnan(1.0) ? _4568 : (isnan(_4568) ? 1.0 : min(_4568, 1.0))) * (_2498 / ((_2502 * _2502) * 3.141590118408203125));
        float _2525 = isnan(1.0) ? _2110 : (isnan(_2110) ? 1.0 : min(_2110, 1.0));
        _2450 = (((_2511 * cbLight._m0[_2460].x) * _2524) * _2525) + _2386;
        _2452 = (((_2511 * cbLight._m0[_2460].y) * _2524) * _2525) + _2387;
        _2454 = (((_2511 * cbLight._m0[_2460].z) * _2524) * _2525) + _2388;
    }
    float _2560;
    float _2562;
    float _2564;
    if (_2189)
    {
        _2560 = _2450;
        _2562 = _2452;
        _2564 = _2454;
    }
    else
    {
        uint _2571 = _2095 + 3u;
        uint _2575 = _2095 + 11u;
        float _2589 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2571].w)) * _854) * 0.949999988079071044921875);
        float _2590 = _2589 * _2589;
        float _2591 = cbLight._m0[_2571].x + _930;
        float _2592 = cbLight._m0[_2571].y + _931;
        float _2593 = cbLight._m0[_2571].z + _932;
        float _2597 = inversesqrt(dot(vec3(_2591, _2592, _2593), vec3(_2591, _2592, _2593)));
        float _2598 = _2597 * _2591;
        float _2599 = _2597 * _2592;
        float _2600 = _2597 * _2593;
        float _2601 = dot(vec3(_851, _852, _853), vec3(cbLight._m0[_2571].xyz));
        float _4584 = isnan(0.0) ? _2601 : (isnan(_2601) ? 0.0 : max(_2601, 0.0));
        float _2604 = isnan(1.0) ? _4584 : (isnan(_4584) ? 1.0 : min(_4584, 1.0));
        float _2605 = dot(vec3(_851, _852, _853), vec3(_2598, _2599, _2600));
        float _4595 = isnan(0.0) ? _2605 : (isnan(_2605) ? 0.0 : max(_2605, 0.0));
        float _2608 = isnan(1.0) ? _4595 : (isnan(_4595) ? 1.0 : min(_4595, 1.0));
        float _2609 = dot(vec3(cbLight._m0[_2571].xyz), vec3(_2598, _2599, _2600));
        float _4606 = isnan(0.0) ? _2609 : (isnan(_2609) ? 0.0 : max(_2609, 0.0));
        float _2613 = _2590 * _2590;
        float _2617 = ((_2608 * _2608) * (_2613 + (-1.0))) + 1.0;
        float _2626 = (exp2(log2(1.0 - (isnan(1.0) ? _4606 : (isnan(_4606) ? 1.0 : min(_4606, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2627 = 1.0 - _2590;
        float _2637 = (0.5 / (((_2263 * ((_2604 * _2627) + _2590)) + 9.9999999392252902907785028219223e-09) + (((_2263 * _2627) + _2590) * _2604))) * _2604;
        float _4617 = isnan(0.0) ? _2637 : (isnan(_2637) ? 0.0 : max(_2637, 0.0));
        float _2639 = (isnan(1.0) ? _4617 : (isnan(_4617) ? 1.0 : min(_4617, 1.0))) * (_2613 / ((_2617 * _2617) * 3.141590118408203125));
        float _2640 = isnan(1.0) ? _2111 : (isnan(_2111) ? 1.0 : min(_2111, 1.0));
        _2560 = (((_2626 * cbLight._m0[_2575].x) * _2639) * _2640) + _2450;
        _2562 = (((_2626 * cbLight._m0[_2575].y) * _2639) * _2640) + _2452;
        _2564 = (((_2626 * cbLight._m0[_2575].z) * _2639) * _2640) + _2454;
    }
    float _2775;
    float _2777;
    float _2779;
    float _2781;
    float _2783;
    float _2785;
    if (_2093.y == 0u)
    {
        float _2715 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2716 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2715;
        float _2717 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2715;
        float _2718 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2715;
        uvec4 _2730 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2731 = _2730.x;
        uint _2742 = uint((float(_2730.y) * floor(float(uint(cbSceneParam._m0[85u].y * _951) / _2731))) + floor(float(uint(cbSceneParam._m0[85u].x * _950) / _2731)));
        float _2752 = (log2(_2718 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2753 = isnan(0.0) ? _2752 : (isnan(_2752) ? 0.0 : max(_2752, 0.0));
        uint _2756 = uint(isnan(14.0) ? _2753 : (isnan(_2753) ? 14.0 : min(_2753, 14.0)));
        uvec4 _2761 = texelFetch(g_lightClusterGridBuffer, int(((_2756 << 2u) + (_2742 << 6u)) >> 2u));
        uint _2762 = _2761.x;
        uint _2763 = _2730.z;
        float _2863;
        float _2865;
        float _2867;
        float _2869;
        float _2871;
        float _2873;
        if (((((1u << ((_2763 >> 4u) & 15u)) + 4294967295u) & _2762) == 0u) || ((_2763 & 240u) == 0u))
        {
            _2863 = 0.0;
            _2865 = 0.0;
            _2867 = 0.0;
            _2869 = 0.0;
            _2871 = 0.0;
            _2873 = 0.0;
        }
        else
        {
            float _2864;
            float _2866;
            float _2868;
            float _2870;
            float _2872;
            float _2874;
            float _3016 = 0.0;
            float _3017 = 0.0;
            float _3018 = 0.0;
            float _3019 = 0.0;
            float _3020 = 0.0;
            float _3021 = 0.0;
            uint _3022 = 0u;
            uint _3031;
            bool _3032;
            for (;;)
            {
                _3031 = texelFetch(g_lightClassification, int((((_2756 << 5u) + (_2742 << 9u)) + (_3022 << 2u)) >> 2u)).x;
                _3032 = _3031 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3032)
                {
                    frontier_phi_66_pred = _3016;
                    frontier_phi_66_pred_1 = _3021;
                    frontier_phi_66_pred_2 = _3020;
                    frontier_phi_66_pred_3 = _3019;
                    frontier_phi_66_pred_4 = _3018;
                    frontier_phi_66_pred_5 = _3017;
                }
                else
                {
                    float _3161;
                    float _3162;
                    float _3163;
                    float _3164;
                    float _3165;
                    float _3166;
                    uint _3167;
                    _3161 = _3016;
                    _3162 = _3017;
                    _3163 = _3018;
                    _3164 = _3019;
                    _3165 = _3020;
                    _3166 = _3021;
                    _3167 = _3031;
                    float _3088;
                    float _3089;
                    float _3090;
                    float _3091;
                    float _3092;
                    float _3093;
                    for (;;)
                    {
                        uint _3171 = uint(findLSB(_3167)) + (_3022 << 5u);
                        uint _3168 = (_3167 + 4294967295u) & _3167;
                        uint _3173 = _3171 * 48u;
                        vec4 _3187 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3173)).x, texelFetch(g_PointLightRenderingBuffer, int(_3173 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3173 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3173 + 3u)).x));
                        uint _3193 = (_3171 * 48u) + 4u;
                        vec4 _3206 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3193)).x, texelFetch(g_PointLightRenderingBuffer, int(_3193 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3193 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3193 + 3u)).x));
                        uint _3212 = (_3171 * 48u) + 8u;
                        vec3 _3223 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3212)).x, texelFetch(g_PointLightRenderingBuffer, int(_3212 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3212 + 2u)).x));
                        float _3227 = _3187.x - _2716;
                        float _3228 = _3187.y - _2717;
                        float _3229 = _3187.z - _2718;
                        float _3230 = dot(vec3(_3227, _3228, _3229), vec3(_3227, _3228, _3229));
                        float _3233 = inversesqrt(_3230);
                        float _3234 = _3233 * _3227;
                        float _3235 = _3233 * _3228;
                        float _3236 = _3233 * _3229;
                        float _3237 = dot(vec3(_969, _972, _975), vec3(_3234, _3235, _3236));
                        float _3242 = 1.0 - (_3230 * _3187.w);
                        float _4643 = isnan(0.0) ? _3242 : (isnan(_3242) ? 0.0 : max(_3242, 0.0));
                        float _3243 = isnan(1.0) ? _4643 : (isnan(_4643) ? 1.0 : min(_4643, 1.0));
                        float _3244 = sqrt(_3230) * _3206.w;
                        float _3247 = 1.39999997615814208984375 / (_3244 + 1.39999997615814208984375);
                        float _3248 = _3247 * _3247;
                        float _3251 = ((1.0 - _3248) * _3237) + _3248;
                        float _3254 = _3244 * _3244;
                        float _3258 = ((isnan(0.0) ? _3251 : (isnan(_3251) ? 0.0 : max(_3251, 0.0))) * _3243) / ((_3254 * 0.699999988079071044921875) + 1.0);
                        float _3262 = (-0.0) - _2716;
                        float _3263 = (-0.0) - _2717;
                        float _3264 = (-0.0) - _2718;
                        float _3268 = inversesqrt(dot(vec3(_3262, _3263, _3264), vec3(_3262, _3263, _3264)));
                        float _3269 = _3268 * _3262;
                        float _3270 = _3268 * _3263;
                        float _3271 = _3268 * _3264;
                        float _3279 = exp2(log2(1.0 / ((_3254 * 3.5) + 5.0)) * 0.25);
                        float _3280 = 1.0 - _1029;
                        float _3287 = sqrt(1.0 - ((1.0 - (_3280 * _3280)) * (1.0 - (_3279 * _3279))));
                        float _3288 = _3287 * _3287;
                        float _3289 = _3288 * _3288;
                        float _3290 = _3269 + _3234;
                        float _3291 = _3270 + _3235;
                        float _3292 = _3271 + _3236;
                        float _3296 = inversesqrt(dot(vec3(_3290, _3291, _3292), vec3(_3290, _3291, _3292)));
                        float _3300 = dot(vec3(_969, _972, _975), vec3(_3269, _3270, _3271));
                        float _4659 = isnan(0.0) ? _3300 : (isnan(_3300) ? 0.0 : max(_3300, 0.0));
                        float _3303 = isnan(1.0) ? _4659 : (isnan(_4659) ? 1.0 : min(_4659, 1.0));
                        float _3304 = dot(vec3(_969, _972, _975), vec3(_3296 * _3290, _3296 * _3291, _3296 * _3292));
                        float _4670 = isnan(0.0) ? _3304 : (isnan(_3304) ? 0.0 : max(_3304, 0.0));
                        float _3307 = isnan(1.0) ? _4670 : (isnan(_4670) ? 1.0 : min(_4670, 1.0));
                        float _3311 = ((_3307 * _3307) * (_3289 + (-1.0))) + 1.0;
                        float _3312 = _3247 * _3288;
                        float _3313 = _3312 * _3312;
                        float _3316 = ((1.0 - _3313) * _3237) + _3313;
                        float _4681 = isnan(0.0) ? _3316 : (isnan(_3316) ? 0.0 : max(_3316, 0.0));
                        float _3317 = isnan(1.0) ? _4681 : (isnan(_4681) ? 1.0 : min(_4681, 1.0));
                        float _3318 = 1.0 - _3288;
                        float _3328 = (0.5 / (((_3317 * ((_3303 * _3318) + _3288)) + 9.9999999392252902907785028219223e-09) + (((_3317 * _3318) + _3288) * _3303))) * _3317;
                        float _4692 = isnan(0.0) ? _3328 : (isnan(_3328) ? 0.0 : max(_3328, 0.0));
                        float _3339 = (((_3289 * 3.1415927410125732421875) * (isnan(1.0) ? _4692 : (isnan(_4692) ? 1.0 : min(_4692, 1.0)))) / ((_3311 * _3311) * ((_3254 * 2.1991131305694580078125) + 3.141590118408203125))) * _3243;
                        _3091 = (_3258 * _3206.x) + _3164;
                        _3092 = (_3258 * _3206.y) + _3165;
                        _3093 = (_3258 * _3206.z) + _3166;
                        _3088 = (_3339 * _3223.x) + _3161;
                        _3089 = (_3339 * _3223.y) + _3162;
                        _3090 = (_3339 * _3223.z) + _3163;
                        if (_3168 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3161 = _3088;
                            _3162 = _3089;
                            _3163 = _3090;
                            _3164 = _3091;
                            _3165 = _3092;
                            _3166 = _3093;
                            _3167 = _3168;
                        }
                    }
                    frontier_phi_66_pred = _3088;
                    frontier_phi_66_pred_1 = _3093;
                    frontier_phi_66_pred_2 = _3092;
                    frontier_phi_66_pred_3 = _3091;
                    frontier_phi_66_pred_4 = _3090;
                    frontier_phi_66_pred_5 = _3089;
                }
                _2864 = frontier_phi_66_pred;
                _2874 = frontier_phi_66_pred_1;
                _2872 = frontier_phi_66_pred_2;
                _2870 = frontier_phi_66_pred_3;
                _2868 = frontier_phi_66_pred_4;
                _2866 = frontier_phi_66_pred_5;
                uint _3023 = _3022 + 1u;
                if (_3023 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3016 = _2864;
                    _3017 = _2866;
                    _3018 = _2868;
                    _3019 = _2870;
                    _3020 = _2872;
                    _3021 = _2874;
                    _3022 = _3023;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2863 = _2864;
            _2865 = _2866;
            _2867 = _2868;
            _2869 = _2870;
            _2871 = _2872;
            _2873 = _2874;
        }
        uvec4 _2877 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2878 = _2877.z;
        uint _2880 = (_2878 >> 8u) & 15u;
        float _2984;
        float _2986;
        float _2988;
        float _2990;
        float _2992;
        float _2994;
        if (((4294967295u << _2880) & _2762) == 0u)
        {
            _2984 = _2863;
            _2986 = _2865;
            _2988 = _2867;
            _2990 = _2869;
            _2992 = _2871;
            _2994 = _2873;
        }
        else
        {
            float _3009 = inversesqrt(dot(vec3(_2716, _2717, _2718), vec3(_2716, _2717, _2718)));
            float _3010 = _3009 * _2716;
            float _3011 = _3009 * _2717;
            float _3012 = _3009 * _2718;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2880 < ((_2878 >> 12u) & 15u))
            {
                float _2985;
                float _2987;
                float _2989;
                float _2991;
                float _2993;
                float _2995;
                float _3144 = _2863;
                float _3145 = _2865;
                float _3146 = _2867;
                float _3147 = _2869;
                float _3148 = _2871;
                float _3149 = _2873;
                uint _3150 = _2880;
                uint _3159;
                bool _3160;
                for (;;)
                {
                    _3159 = texelFetch(g_lightClassification, int((((_2756 << 5u) + (_2742 << 9u)) + (_3150 << 2u)) >> 2u)).x;
                    _3160 = _3159 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_3160)
                    {
                        frontier_phi_77_pred = _3149;
                        frontier_phi_77_pred_1 = _3148;
                        frontier_phi_77_pred_2 = _3147;
                        frontier_phi_77_pred_3 = _3146;
                        frontier_phi_77_pred_4 = _3145;
                        frontier_phi_77_pred_5 = _3144;
                    }
                    else
                    {
                        float _3353;
                        float _3354;
                        float _3355;
                        float _3356;
                        float _3357;
                        float _3358;
                        float _3646;
                        float _3647;
                        float _3648;
                        float _3649;
                        float _3650;
                        float _3651;
                        float _3366 = _3144;
                        float _3367 = _3145;
                        float _3368 = _3146;
                        float _3369 = _3147;
                        float _3370 = _3148;
                        float _3371 = _3149;
                        uint _3372 = _3159;
                        uint _3373;
                        vec4 _3398;
                        float _3399;
                        vec4 _3414;
                        vec3 _3426;
                        vec4 _3441;
                        vec4 _3456;
                        float _3502;
                        bool _3503;
                        for (;;)
                        {
                            uint _3383 = ((_3150 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3372));
                            _3373 = (_3372 + 4294967295u) & _3372;
                            uint _3385 = _3383 * 40u;
                            _3398 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3385)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3385 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3385 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3385 + 3u)).x));
                            _3399 = _3398.w;
                            uint _3401 = (_3383 * 40u) + 4u;
                            _3414 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3401)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3401 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3401 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3401 + 3u)).x));
                            uint _3416 = (_3383 * 40u) + 8u;
                            _3426 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3416)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3416 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3416 + 2u)).x));
                            uint _3428 = (_3383 * 40u) + 16u;
                            _3441 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3428)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3428 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3428 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3428 + 3u)).x));
                            uint _3443 = (_3383 * 40u) + 20u;
                            _3456 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3443)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3443 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3443 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3443 + 3u)).x));
                            uint _3458 = (_3383 * 40u) + 24u;
                            vec4 _3471 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3458)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3458 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3458 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3458 + 3u)).x));
                            uint _3477 = (_3383 * 40u) + 28u;
                            vec4 _3490 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3477)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3477 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3477 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3477 + 3u)).x));
                            _3502 = fma(_2718, _3490.z, fma(_2717, _3490.y, _3490.x * _2716)) + _3490.w;
                            _3503 = !((fma(_2718, _3471.z, fma(_2717, _3471.y, _3471.x * _2716)) + _3471.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3503)
                            {
                                float _3530 = _3398.x - _2716;
                                float _3531 = _3398.y - _2717;
                                float _3532 = _3398.z - _2718;
                                float _3533 = dot(vec3(_3530, _3531, _3532), vec3(_3530, _3531, _3532));
                                float _3536 = inversesqrt(_3533);
                                float _3537 = _3536 * _3530;
                                float _3538 = _3536 * _3531;
                                float _3539 = _3536 * _3532;
                                float _3543 = 1.0 - (_3533 / (_3399 * _3399));
                                float _4703 = isnan(0.0) ? _3543 : (isnan(_3543) ? 0.0 : max(_3543, 0.0));
                                float _3544 = isnan(1.0) ? _4703 : (isnan(_4703) ? 1.0 : min(_4703, 1.0));
                                float _3548 = sqrt(_3533) * _3414.w;
                                float _3550 = 1.39999997615814208984375 / (_3548 + 1.39999997615814208984375);
                                float _3551 = _3550 * _3550;
                                float _3554 = ((1.0 - _3551) * dot(vec3(_3537, _3538, _3539), vec3(_969, _972, _975))) + _3551;
                                float _3557 = _3548 * _3548;
                                float _3561 = (fma(_2718, _3441.z, fma(_2717, _3441.y, _3441.x * _2716)) + _3441.w) / _3502;
                                float _3562 = (fma(_2718, _3456.z, fma(_2717, _3456.y, _3456.x * _2716)) + _3456.w) / _3502;
                                float _3566 = 1.0 - dot(vec2(_3561, _3562), vec2(_3561, _3562));
                                float _4719 = isnan(0.0) ? _3566 : (isnan(_3566) ? 0.0 : max(_3566, 0.0));
                                float _3567 = isnan(1.0) ? _4719 : (isnan(_4719) ? 1.0 : min(_4719, 1.0));
                                float _3568 = _3567 * (((isnan(0.0) ? _3554 : (isnan(_3554) ? 0.0 : max(_3554, 0.0))) * _3544) / ((_3557 * 0.699999988079071044921875) + 1.0));
                                float _3580 = exp2(log2(1.0 / ((_3557 * 3.5) + 5.0)) * 0.25);
                                float _3581 = 1.0 - _1029;
                                float _3588 = sqrt(1.0 - ((1.0 - (_3581 * _3581)) * (1.0 - (_3580 * _3580))));
                                float _3589 = _3588 * _3588;
                                float _3590 = _3589 * _3589;
                                float _3591 = _3537 - _3010;
                                float _3592 = _3538 - _3011;
                                float _3593 = _3539 - _3012;
                                float _3597 = inversesqrt(dot(vec3(_3591, _3592, _3593), vec3(_3591, _3592, _3593)));
                                float _3601 = dot(vec3(_969, _972, _975), vec3((-0.0) - _3010, (-0.0) - _3011, (-0.0) - _3012));
                                float _4730 = isnan(0.0) ? _3601 : (isnan(_3601) ? 0.0 : max(_3601, 0.0));
                                float _3604 = isnan(1.0) ? _4730 : (isnan(_4730) ? 1.0 : min(_4730, 1.0));
                                float _3605 = dot(vec3(_969, _972, _975), vec3(_3597 * _3591, _3597 * _3592, _3597 * _3593));
                                float _4741 = isnan(0.0) ? _3605 : (isnan(_3605) ? 0.0 : max(_3605, 0.0));
                                float _3608 = isnan(1.0) ? _4741 : (isnan(_4741) ? 1.0 : min(_4741, 1.0));
                                float _3612 = ((_3608 * _3608) * (_3590 + (-1.0))) + 1.0;
                                float _3613 = _3550 * _3589;
                                float _3614 = _3613 * _3613;
                                float _3620 = ((1.0 - _3614) * dot(vec3(_969, _972, _975), vec3(_3537, _3538, _3539))) + _3614;
                                float _4752 = isnan(0.0) ? _3620 : (isnan(_3620) ? 0.0 : max(_3620, 0.0));
                                float _3621 = isnan(1.0) ? _4752 : (isnan(_4752) ? 1.0 : min(_4752, 1.0));
                                float _3622 = 1.0 - _3589;
                                float _3632 = (0.5 / (((_3621 * ((_3604 * _3622) + _3589)) + 9.9999999392252902907785028219223e-09) + (((_3621 * _3622) + _3589) * _3604))) * _3621;
                                float _4763 = isnan(0.0) ? _3632 : (isnan(_3632) ? 0.0 : max(_3632, 0.0));
                                float _3642 = (_3567 * _3544) * (((_3590 * 3.1415927410125732421875) * (isnan(1.0) ? _4763 : (isnan(_4763) ? 1.0 : min(_4763, 1.0)))) / ((_3612 * _3612) * ((_3557 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3568 * _3414.y;
                                frontier_phi_83_pred_1 = _3568 * _3414.x;
                                frontier_phi_83_pred_2 = _3642 * _3426.z;
                                frontier_phi_83_pred_3 = _3642 * _3426.y;
                                frontier_phi_83_pred_4 = _3642 * _3426.x;
                                frontier_phi_83_pred_5 = _3568 * _3414.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3650 = frontier_phi_83_pred;
                            _3649 = frontier_phi_83_pred_1;
                            _3648 = frontier_phi_83_pred_2;
                            _3647 = frontier_phi_83_pred_3;
                            _3646 = frontier_phi_83_pred_4;
                            _3651 = frontier_phi_83_pred_5;
                            _3356 = _3649 + _3369;
                            _3357 = _3650 + _3370;
                            _3358 = _3651 + _3371;
                            _3353 = _3646 + _3366;
                            _3354 = _3647 + _3367;
                            _3355 = _3648 + _3368;
                            if (_3373 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3366 = _3353;
                                _3367 = _3354;
                                _3368 = _3355;
                                _3369 = _3356;
                                _3370 = _3357;
                                _3371 = _3358;
                                _3372 = _3373;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3358;
                        frontier_phi_77_pred_1 = _3357;
                        frontier_phi_77_pred_2 = _3356;
                        frontier_phi_77_pred_3 = _3355;
                        frontier_phi_77_pred_4 = _3354;
                        frontier_phi_77_pred_5 = _3353;
                    }
                    _2995 = frontier_phi_77_pred;
                    _2993 = frontier_phi_77_pred_1;
                    _2991 = frontier_phi_77_pred_2;
                    _2989 = frontier_phi_77_pred_3;
                    _2987 = frontier_phi_77_pred_4;
                    _2985 = frontier_phi_77_pred_5;
                    uint _3151 = _3150 + 1u;
                    if (_3151 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3144 = _2985;
                        _3145 = _2987;
                        _3146 = _2989;
                        _3147 = _2991;
                        _3148 = _2993;
                        _3149 = _2995;
                        _3150 = _3151;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2989;
                frontier_phi_58_59_ladder_1 = _2995;
                frontier_phi_58_59_ladder_2 = _2993;
                frontier_phi_58_59_ladder_3 = _2991;
                frontier_phi_58_59_ladder_4 = _2987;
                frontier_phi_58_59_ladder_5 = _2985;
            }
            else
            {
                frontier_phi_58_59_ladder = _2867;
                frontier_phi_58_59_ladder_1 = _2873;
                frontier_phi_58_59_ladder_2 = _2871;
                frontier_phi_58_59_ladder_3 = _2869;
                frontier_phi_58_59_ladder_4 = _2865;
                frontier_phi_58_59_ladder_5 = _2863;
            }
            _2984 = frontier_phi_58_59_ladder_5;
            _2986 = frontier_phi_58_59_ladder_4;
            _2988 = frontier_phi_58_59_ladder;
            _2990 = frontier_phi_58_59_ladder_3;
            _2992 = frontier_phi_58_59_ladder_2;
            _2994 = frontier_phi_58_59_ladder_1;
        }
        float _2999 = isnan(1.0) ? _1013 : (isnan(_1013) ? 1.0 : min(_1013, 1.0));
        _2775 = (_2999 * _2990) + _2227;
        _2777 = (_2999 * _2992) + _2229;
        _2779 = (_2999 * _2994) + _2231;
        _2781 = ((_2984 * 0.039999999105930328369140625) * _2999) + _2560;
        _2783 = ((_2986 * 0.039999999105930328369140625) * _2999) + _2562;
        _2785 = ((_2988 * 0.039999999105930328369140625) * _2999) + _2564;
    }
    else
    {
        _2775 = _2227;
        _2777 = _2229;
        _2779 = _2231;
        _2781 = _2560;
        _2783 = _2562;
        _2785 = _2564;
    }
    float _4779 = isnan(0.0) ? _998 : (isnan(_998) ? 0.0 : max(_998, 0.0));
    float _4790 = isnan(0.0) ? _999 : (isnan(_999) ? 0.0 : max(_999, 0.0));
    float _4801 = isnan(0.0) ? _1000 : (isnan(_1000) ? 0.0 : max(_1000, 0.0));
    float _2802 = ((isnan(1.0) ? _4779 : (isnan(_4779) ? 1.0 : min(_4779, 1.0))) * (_2775 + ((isnan(0.0) ? _1769 : (isnan(_1769) ? 0.0 : max(_1769, 0.0))) * _1013))) + ((_2781 + ((isnan(0.0) ? _2059 : (isnan(_2059) ? 0.0 : max(_2059, 0.0))) * _1848)) * cbPerFrame._m0[3u].x);
    float _2803 = ((isnan(1.0) ? _4790 : (isnan(_4790) ? 1.0 : min(_4790, 1.0))) * (_2777 + ((isnan(0.0) ? _1772 : (isnan(_1772) ? 0.0 : max(_1772, 0.0))) * _1013))) + ((_2783 + ((isnan(0.0) ? _2062 : (isnan(_2062) ? 0.0 : max(_2062, 0.0))) * _1848)) * cbPerFrame._m0[3u].x);
    float _2804 = ((isnan(1.0) ? _4801 : (isnan(_4801) ? 1.0 : min(_4801, 1.0))) * (_2779 + ((isnan(0.0) ? _1775 : (isnan(_1775) ? 0.0 : max(_1775, 0.0))) * _1013))) + ((_2785 + ((isnan(0.0) ? _2065 : (isnan(_2065) ? 0.0 : max(_2065, 0.0))) * _1848)) * cbPerFrame._m0[3u].x);
    uint _2805 = _278 + 6u;
    float _2813 = _950 / cbSceneParam._m0[86u].x;
    float _2814 = _951 / cbSceneParam._m0[86u].y;
    vec4 _2828 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2813, _2814, (log2((isnan(cbSceneParam._m0[77u].w) ? _872 : (isnan(_872) ? cbSceneParam._m0[77u].w : min(_872, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2830 = _2828.x;
    float _2831 = _2828.y;
    float _2832 = _2828.z;
    float _2833 = _2828.w;
    float _2926;
    float _2928;
    float _2930;
    float _2932;
    if (_872 > cbSceneParam._m0[78u].w)
    {
        float _2888 = isnan(_872) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _872 : min(cbSceneParam._m0[80u].w, _872));
        float _2889 = _2888 / _872;
        float _2900 = _2889 * _923;
        float _2901 = _924 * _2889;
        float _2902 = (-0.0) - _2901;
        float _2904 = _2889 * _925;
        float _2906 = (cbSceneParam._m0[77u].w * _2902) / _2888;
        float _2907 = _2906 + cbSceneParam._m0[79u].w;
        float _2908 = cbSceneParam._m0[79u].w - _2901;
        float _2914 = sqrt(((_2900 * _2900) + (_2901 * _2901)) + (_2904 * _2904));
        float _2917 = (1.0 - (cbSceneParam._m0[77u].w / _2888)) * _2914;
        float _2922 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2924 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3101;
        if (abs((_2902 - _2906) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3101 = ((((_2907 > 0.0) ? exp2(_2922 * _2907) : (2.0 - exp2(_2924 * _2907))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2917;
        }
        else
        {
            float _3045 = 1.0 / cbSceneParam._m0[80u].x;
            float _3046 = isnan(_2908) ? _2907 : (isnan(_2907) ? _2908 : max(_2907, _2908));
            float _3047 = isnan(_2908) ? _2907 : (isnan(_2907) ? _2908 : min(_2907, _2908));
            float _3056 = isnan(0.0) ? _3046 : (isnan(_3046) ? 0.0 : min(_3046, 0.0));
            float _3057 = isnan(0.0) ? _3047 : (isnan(_3047) ? 0.0 : min(_3047, 0.0));
            _3101 = ((abs(_2914 / _2902) * cbSceneParam._m0[80u].y) * ((((_3056 - _3057) * 2.0) - ((exp2(_2922 * (isnan(0.0) ? _3046 : (isnan(_3046) ? 0.0 : max(_3046, 0.0)))) - exp2(_2922 * (isnan(0.0) ? _3047 : (isnan(_3047) ? 0.0 : max(_3047, 0.0))))) * _3045)) - ((exp2(_2924 * _3056) - exp2(_2924 * _3057)) * _3045))) + (_2917 * cbSceneParam._m0[80u].z);
        }
        vec4 _3103 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2813, _2814, 1.0), 0.0);
        float _3112 = exp2((_3101 * (-1.44269502162933349609375)) * (1.0 - _3103.w));
        float _3113 = log2(_3112);
        float _3129 = log2(_2833);
        _2926 = (exp2(_3129 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3113 * cbSceneParam._m0[78u].x)) * _3103.x) / cbSceneParam._m0[78u].x)) + _2830;
        _2928 = (exp2(_3129 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3113 * cbSceneParam._m0[78u].y)) * _3103.y) / cbSceneParam._m0[78u].y)) + _2831;
        _2930 = (exp2(_3129 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3113 * cbSceneParam._m0[78u].z)) * _3103.z) / cbSceneParam._m0[78u].z)) + _2832;
        _2932 = _3112 * _2833;
    }
    else
    {
        _2926 = _2830;
        _2928 = _2831;
        _2930 = _2832;
        _2932 = _2833;
    }
    bool _3139;
    vec4 _2942;
    vec4 _2964;
    float _2966;
    float _2970;
    float _2971;
    float _2972;
    float _2973;
    bool _2983;
    for (;;)
    {
        _2942 = cbMatDynParam._m0[0u];
        float _2944 = roundEven(_2942.y);
        bool _2945 = _2944 == 3.0;
        float _2946 = log2(_2932);
        float _2953 = exp2(_2946 * cbSceneParam._m0[78u].x) * _2802;
        float _2954 = exp2(_2946 * cbSceneParam._m0[78u].y) * _2803;
        float _2955 = exp2(_2946 * cbSceneParam._m0[78u].z) * _2804;
        float _2962 = _939 + (-0.5);
        _2964 = cbMtdParam._m0[1u];
        _2966 = _2964.y * _2962;
        float _2969 = (_2944 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2970 = _2969 * (_2945 ? _2953 : (_2953 + (cbSceneParam._m0[72u].w * _2926)));
        _2971 = _2969 * (_2945 ? _2954 : (_2954 + (cbSceneParam._m0[72u].w * _2928)));
        _2972 = _2969 * (_2945 ? _2955 : (_2955 + (cbSceneParam._m0[72u].w * _2930)));
        _2973 = _2962 * 0.999000012874603271484375;
        _2983 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2983)
        {
            if ((cbInstanceData._m0[_278 + 7u].x + _2973) < 0.5)
            {
                _3139 = true;
                break;
            }
        }
        uint _3080 = _988 + uint(_2942.w);
        if ((cbInstanceData._m0[_3080].w < 1.0) && ((cbInstanceData._m0[_3080].w + _2973) < 0.5))
        {
            _3139 = true;
            break;
        }
        if ((_2966 + 1.0) < _2964.x)
        {
            _3139 = true;
            break;
        }
        _3139 = false;
        break;
    }
    float _3344;
    if (_3139)
    {
        discard_state = true;
        _3344 = 0.0;
    }
    else
    {
        _3344 = cbInstanceData._m0[_2805].w;
    }
    SV_Target.x = _2970;
    SV_Target.y = _2971;
    SV_Target.z = _2972;
    SV_Target.w = _3344;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2805].w;
    discard_exit();
}


