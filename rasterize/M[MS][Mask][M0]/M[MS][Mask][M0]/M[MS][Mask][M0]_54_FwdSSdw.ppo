#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_0;
layout(set = 0, binding = 13) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_22;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_10;
layout(set = 0, binding = 20) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_6;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1246;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _217 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _218 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _219 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _225 = inversesqrt(dot(vec3(_217, _218, _219), vec3(_217, _218, _219)));
    float _232 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _239 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _253 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _255 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _256 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3577 = isnan(0.0) ? _253 : (isnan(_253) ? 0.0 : max(_253, 0.0));
    float _3588 = isnan(0.0) ? _255 : (isnan(_255) ? 0.0 : max(_255, 0.0));
    float _3599 = isnan(0.0) ? _256 : (isnan(_256) ? 0.0 : max(_256, 0.0));
    uint _266 = uint(roundEven(NORMAL.w)) * 13u;
    uint _271 = _266 + 1u;
    uint _275 = _266 + 2u;
    float _284 = sqrt(((cbInstanceData._m0[_271].x * cbInstanceData._m0[_271].x) + (cbInstanceData._m0[_266].x * cbInstanceData._m0[_266].x)) + (cbInstanceData._m0[_275].x * cbInstanceData._m0[_275].x));
    float _285 = _284 * TEXCOORD.z;
    float _286 = _284 * TEXCOORD.w;
    vec4 _299 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _285) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _286) + cbTextureTilingScale._m0[13u].w));
    vec4 _322 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _348 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _353 = _348.x * cbMtdParam._m0[11u].x;
    float _354 = _348.y * cbMtdParam._m0[11u].y;
    float _355 = _348.z * cbMtdParam._m0[11u].z;
    vec4 _374 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _285) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _286) + cbTextureTilingScale._m0[5u].w));
    vec4 _393 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _428 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _430 = _428.x;
    float _442 = dot(vec4(_430, _428.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _459 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _393.x) * 2.0) - ((((_430 - _442) * cbMtdParam._m0[24u].z) + _442) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3610 = isnan(0.0) ? _459 : (isnan(_459) ? 0.0 : max(_459, 0.0));
    float _460 = isnan(1.0) ? _3610 : (isnan(_3610) ? 1.0 : min(_3610, 1.0));
    float _467 = (_460 * ((_374.x * cbMtdParam._m0[12u].x) - _353)) + _353;
    float _468 = (_460 * ((_374.y * cbMtdParam._m0[12u].y) - _354)) + _354;
    float _469 = (_460 * ((_374.z * cbMtdParam._m0[12u].z) - _355)) + _355;
    vec4 _486 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _285) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _286) + cbTextureTilingScale._m0[3u].w));
    vec4 _506 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _508 = _506.x;
    float _518 = dot(vec4(_508, _506.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _532 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _393.y) * 2.0) - ((((_508 - _518) * cbMtdParam._m0[24u].z) + _518) * cbMtdParam._m0[20u].w))) + 1.0;
    float _3621 = isnan(0.0) ? _532 : (isnan(_532) ? 0.0 : max(_532, 0.0));
    float _533 = isnan(1.0) ? _3621 : (isnan(_3621) ? 1.0 : min(_3621, 1.0));
    float _543 = (_322.x * cbMtdParam._m0[9u].x) * ((_533 * ((_486.x * cbMtdParam._m0[13u].x) - _467)) + _467);
    float _544 = (_322.y * cbMtdParam._m0[9u].y) * ((_533 * ((_486.y * cbMtdParam._m0[13u].y) - _468)) + _468);
    float _545 = (_322.z * cbMtdParam._m0[9u].z) * ((_533 * ((_486.z * cbMtdParam._m0[13u].z) - _469)) + _469);
    float _549 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _299.x) * _543;
    float _552 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _299.y) * _544;
    float _555 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _299.z) * _545;
    float _563 = (((_543 - _549) * (isnan(1.0) ? _3577 : (isnan(_3577) ? 1.0 : min(_3577, 1.0)))) + _549) * 4.55000019073486328125;
    float _565 = (((_544 - _552) * (isnan(1.0) ? _3588 : (isnan(_3588) ? 1.0 : min(_3588, 1.0)))) + _552) * 4.55000019073486328125;
    float _567 = (((_545 - _555) * (isnan(1.0) ? _3599 : (isnan(_3599) ? 1.0 : min(_3599, 1.0)))) + _555) * 4.55000019073486328125;
    vec4 _579 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _285) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _286) + cbTextureTilingScale._m0[20u].w));
    vec4 _602 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _285) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _286) + cbTextureTilingScale._m0[4u].w));
    vec4 _619 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _621 = _619.x;
    float _622 = _619.y;
    float _623 = _619.z;
    float _630 = ((_602.x - _621) * _460) + _621;
    float _631 = ((_602.y - _622) * _460) + _622;
    float _632 = ((_602.z - _623) * _460) + _623;
    vec4 _644 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _285) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _286) + cbTextureTilingScale._m0[2u].w));
    float _657 = ((_644.z - _632) * _533) + _632;
    float _660 = ((((_644.x - _630) * _533) + _630) * 2.0) + (-1.0);
    float _661 = ((((_644.y - _631) * _533) + _631) * 2.0) + (-1.0);
    float _662 = dot(vec2(_660, _661), vec2(_660, _661));
    float _3632 = isnan(0.0) ? _662 : (isnan(_662) ? 0.0 : max(_662, 0.0));
    float _667 = sqrt(1.0 - (isnan(1.0) ? _3632 : (isnan(_3632) ? 1.0 : min(_3632, 1.0))));
    vec4 _687 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _699 = (_660 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_579.x * 2.0) + (-1.0)))) + (((_687.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _700 = (_661 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_579.y * 2.0) + (-1.0)))) + (((_687.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _705 = (((_579.z - _657) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _657;
    float _709 = ((_687.z - _705) * cbMtdParam._m0[19u].w) + _705;
    float _711 = cbMtdParam._m0[22u].x + _687.w;
    float _714 = fma(_667, _232 * NORMAL.x, fma(_700, _239 * TANGENT.x, (_225 * _217) * _699));
    float _717 = fma(_667, _232 * NORMAL.y, fma(_700, _239 * TANGENT.y, (_225 * _218) * _699));
    float _720 = fma(_667, _232 * NORMAL.z, fma(_700, _239 * TANGENT.z, (_225 * _219) * _699));
    float _724 = inversesqrt(dot(vec3(_714, _717, _720), vec3(_714, _717, _720)));
    float _725 = _724 * _714;
    float _726 = _724 * _717;
    float _727 = _724 * _720;
    float _3643 = isnan(0.0) ? _709 : (isnan(_709) ? 0.0 : max(_709, 0.0));
    float _728 = isnan(1.0) ? _3643 : (isnan(_3643) ? 1.0 : min(_3643, 1.0));
    float _3654 = isnan(0.0) ? _711 : (isnan(_711) ? 0.0 : max(_711, 0.0));
    float _3665 = isnan(0.0) ? _563 : (isnan(_563) ? 0.0 : max(_563, 0.0));
    float _3676 = isnan(0.0) ? _565 : (isnan(_565) ? 0.0 : max(_565, 0.0));
    float _3687 = isnan(0.0) ? _567 : (isnan(_567) ? 0.0 : max(_567, 0.0));
    float _746 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _787 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _797 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _787);
    float _798 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _787);
    float _799 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _787);
    float _803 = inversesqrt(dot(vec3(_797, _798, _799), vec3(_797, _798, _799)));
    float _804 = _797 * _803;
    float _805 = _798 * _803;
    float _806 = _799 * _803;
    float _812 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _813 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _831 = fma(_727, cbSceneParam._m0[5u].z, fma(_726, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _725));
    float _834 = fma(_727, cbSceneParam._m0[6u].z, fma(_726, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _725));
    float _837 = fma(_727, cbSceneParam._m0[7u].z, fma(_726, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _725));
    uint _851 = (_266 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _857 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3665 : (isnan(_3665) ? 1.0 : min(_3665, 1.0)))) * cbInstanceData._m0[_851].x;
    float _858 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3676 : (isnan(_3676) ? 1.0 : min(_3676, 1.0)))) * cbInstanceData._m0[_851].y;
    float _859 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3687 : (isnan(_3687) ? 1.0 : min(_3687, 1.0)))) * cbInstanceData._m0[_851].z;
    float _3698 = isnan(0.0) ? _857 : (isnan(_857) ? 0.0 : max(_857, 0.0));
    float _860 = isnan(1.0) ? _3698 : (isnan(_3698) ? 1.0 : min(_3698, 1.0));
    float _3709 = isnan(0.0) ? _858 : (isnan(_858) ? 0.0 : max(_858, 0.0));
    float _861 = isnan(1.0) ? _3709 : (isnan(_3709) ? 1.0 : min(_3709, 1.0));
    float _3720 = isnan(0.0) ? _859 : (isnan(_859) ? 0.0 : max(_859, 0.0));
    float _862 = isnan(1.0) ? _3720 : (isnan(_3720) ? 1.0 : min(_3720, 1.0));
    vec4 _871 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _812, cbSceneParam._m0[86u].y * _813));
    float _875 = ((isnan(1.0) ? _3654 : (isnan(_3654) ? 1.0 : min(_3654, 1.0))) * TEXCOORD_5.w) * _871.x;
    float _876 = dot(vec3(_725, _726, _727), vec3(_804, _805, _806));
    float _879 = _876 * 2.0;
    float _883 = (_879 * _725) - _804;
    float _884 = (_879 * _726) - _805;
    float _885 = (_879 * _727) - _806;
    float _889 = abs(dot(vec3(_804, _805, _806), vec3(_725, _726, _727)));
    float _3731 = isnan(0.0) ? _889 : (isnan(_889) ? 0.0 : max(_889, 0.0));
    float _891 = sqrt(_728);
    float _904 = exp2((_891 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3731 : (isnan(_3731) ? 1.0 : min(_3731, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_891 * 3.0));
    float _936 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _940 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _944 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1245;
    float _1247;
    float _1248;
    float _1249;
    float _1250;
    float _1251;
    float _1252;
    float _1253;
    float _1254;
    float _1255;
    float _1256;
    float _1257;
    float _1258;
    float _1259;
    float _1260;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _970 = fma(_944, cbModelParam._m0[26u].z, fma(_940, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _936));
        float _974 = fma(_944, cbModelParam._m0[27u].z, fma(_940, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _936));
        float _978 = fma(_944, cbModelParam._m0[28u].z, fma(_940, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _936));
        float _1003 = _936 + _725;
        float _1004 = _940 + _726;
        float _1005 = _944 + _727;
        float _1015 = fma(_1005, cbModelParam._m0[26u].z, fma(_1004, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1003)) - _970;
        float _1016 = fma(_1005, cbModelParam._m0[27u].z, fma(_1004, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1003)) - _974;
        float _1017 = fma(_1005, cbModelParam._m0[28u].z, fma(_1004, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1003)) - _978;
        float _1021 = inversesqrt(dot(vec3(_1015, _1016, _1017), vec3(_1015, _1016, _1017)));
        float _1034 = ((_1021 * _1015) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_970 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1035 = ((_1021 * _1016) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_974 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1036 = ((_1021 * _1017) / cbModelParam._m0[34u].z) + ((((((_978 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1039 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1034, _1035, _1036), 0.0);
        vec4 _1046 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1034, _1035, _1036), 0.0);
        vec4 _1053 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1034, _1035, _1036), 0.0);
        vec4 _1060 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1034, _1035, _1036), 0.0);
        float _1073 = exp2((_1039.w + (-0.5)) * 20.0) * 2.0;
        float _1074 = _1073 * (_1039.x + (-0.5));
        float _1075 = _1073 * (_1039.y + (-0.5));
        float _1076 = _1073 * (_1039.z + (-0.5));
        float _1083 = exp2((_1046.w + (-0.5)) * 20.0) * 2.0;
        float _1084 = _1083 * (_1046.x + (-0.5));
        float _1085 = _1083 * (_1046.y + (-0.5));
        float _1086 = _1083 * (_1046.z + (-0.5));
        float _1093 = exp2((_1053.w + (-0.5)) * 20.0) * 2.0;
        float _1094 = _1093 * (_1053.x + (-0.5));
        float _1095 = _1093 * (_1053.y + (-0.5));
        float _1096 = _1093 * (_1053.z + (-0.5));
        float _1103 = exp2((_1060.w + (-0.5)) * 20.0) * 2.0;
        float _1104 = _1103 * (_1060.x + (-0.5));
        float _1105 = _1103 * (_1060.y + (-0.5));
        float _1106 = _1103 * (_1060.z + (-0.5));
        float _1107 = isnan(0.0) ? _1104 : (isnan(_1104) ? 0.0 : max(_1104, 0.0));
        float _1108 = isnan(0.0) ? _1105 : (isnan(_1105) ? 0.0 : max(_1105, 0.0));
        float _1109 = isnan(0.0) ? _1106 : (isnan(_1106) ? 0.0 : max(_1106, 0.0));
        float _1110 = _1074 * 0.5;
        float _1111 = _1084 * 0.5;
        float _1112 = _1094 * 0.5;
        float _1113 = dot(vec3(_1110, _1111, _1112), vec3(_1110, _1111, _1112));
        float _1118 = (_1113 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1113);
        float _1127 = (dot(vec3(_725, _726, _727), vec3(_1118 * _1110, _1118 * _1111, _1118 * _1112)) + 1.0) * 0.5;
        float _3757 = isnan(0.0) ? _1127 : (isnan(_1127) ? 0.0 : max(_1127, 0.0));
        float _1137 = sqrt(((_1111 * _1111) + (_1110 * _1110)) + (_1112 * _1112)) / (_1107 + 9.9999997473787516355514526367188e-06);
        float _3768 = isnan(0.0) ? _1137 : (isnan(_1137) ? 0.0 : max(_1137, 0.0));
        float _1138 = isnan(1.0) ? _3768 : (isnan(_3768) ? 1.0 : min(_3768, 1.0));
        float _1139 = _1138 * 2.0;
        float _1143 = (1.0 - _1138) / (_1138 + 1.0);
        float _3779 = isnan(0.0) ? _1143 : (isnan(_1143) ? 0.0 : max(_1143, 0.0));
        float _1144 = isnan(1.0) ? _3779 : (isnan(_3779) ? 1.0 : min(_3779, 1.0));
        float _1153 = ((((1.0 - _1144) * (_1139 + 2.0)) * exp2(log2(isnan(1.0) ? _3757 : (isnan(_3757) ? 1.0 : min(_3757, 1.0))) * (_1139 + 1.0))) + _1144) * _1107;
        float _1154 = _1075 * 0.5;
        float _1155 = _1085 * 0.5;
        float _1156 = _1095 * 0.5;
        float _1157 = dot(vec3(_1154, _1155, _1156), vec3(_1154, _1155, _1156));
        float _1162 = (_1157 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1157);
        float _1170 = (dot(vec3(_725, _726, _727), vec3(_1162 * _1154, _1162 * _1155, _1162 * _1156)) + 1.0) * 0.5;
        float _3790 = isnan(0.0) ? _1170 : (isnan(_1170) ? 0.0 : max(_1170, 0.0));
        float _1179 = sqrt(((_1155 * _1155) + (_1154 * _1154)) + (_1156 * _1156)) / (_1108 + 9.9999997473787516355514526367188e-06);
        float _3801 = isnan(0.0) ? _1179 : (isnan(_1179) ? 0.0 : max(_1179, 0.0));
        float _1180 = isnan(1.0) ? _3801 : (isnan(_3801) ? 1.0 : min(_3801, 1.0));
        float _1181 = _1180 * 2.0;
        float _1185 = (1.0 - _1180) / (_1180 + 1.0);
        float _3812 = isnan(0.0) ? _1185 : (isnan(_1185) ? 0.0 : max(_1185, 0.0));
        float _1186 = isnan(1.0) ? _3812 : (isnan(_3812) ? 1.0 : min(_3812, 1.0));
        float _1195 = ((((1.0 - _1186) * (_1181 + 2.0)) * exp2(log2(isnan(1.0) ? _3790 : (isnan(_3790) ? 1.0 : min(_3790, 1.0))) * (_1181 + 1.0))) + _1186) * _1108;
        float _1196 = _1076 * 0.5;
        float _1197 = _1086 * 0.5;
        float _1198 = _1096 * 0.5;
        float _1199 = dot(vec3(_1196, _1197, _1198), vec3(_1196, _1197, _1198));
        float _1204 = (_1199 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1199);
        float _1212 = (dot(vec3(_725, _726, _727), vec3(_1204 * _1196, _1204 * _1197, _1204 * _1198)) + 1.0) * 0.5;
        float _3823 = isnan(0.0) ? _1212 : (isnan(_1212) ? 0.0 : max(_1212, 0.0));
        float _1221 = sqrt(((_1197 * _1197) + (_1196 * _1196)) + (_1198 * _1198)) / (_1109 + 9.9999997473787516355514526367188e-06);
        float _3834 = isnan(0.0) ? _1221 : (isnan(_1221) ? 0.0 : max(_1221, 0.0));
        float _1222 = isnan(1.0) ? _3834 : (isnan(_3834) ? 1.0 : min(_3834, 1.0));
        float _1223 = _1222 * 2.0;
        float _1227 = (1.0 - _1222) / (_1222 + 1.0);
        float _3845 = isnan(0.0) ? _1227 : (isnan(_1227) ? 0.0 : max(_1227, 0.0));
        float _1228 = isnan(1.0) ? _3845 : (isnan(_3845) ? 1.0 : min(_3845, 1.0));
        float _1237 = ((((1.0 - _1228) * (_1223 + 2.0)) * exp2(log2(isnan(1.0) ? _3823 : (isnan(_3823) ? 1.0 : min(_3823, 1.0))) * (_1223 + 1.0))) + _1228) * _1109;
        _1245 = _1076;
        _1247 = _1075;
        _1248 = _1074;
        _1249 = _1086;
        _1250 = _1085;
        _1251 = _1084;
        _1252 = _1096;
        _1253 = _1095;
        _1254 = _1094;
        _1255 = _1109;
        _1256 = _1108;
        _1257 = _1107;
        _1258 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1153 : (isnan(_1153) ? 0.0 : max(_1153, 0.0)));
        _1259 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1195 : (isnan(_1195) ? 0.0 : max(_1195, 0.0)));
        _1260 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1237 : (isnan(_1237) ? 0.0 : max(_1237, 0.0)));
    }
    else
    {
        _1245 = _1246;
        _1247 = _1246;
        _1248 = _1246;
        _1249 = _1246;
        _1250 = _1246;
        _1251 = _1246;
        _1252 = _1246;
        _1253 = _1246;
        _1254 = _1246;
        _1255 = _1246;
        _1256 = _1246;
        _1257 = _1246;
        _1258 = 0.0;
        _1259 = 0.0;
        _1260 = 0.0;
    }
    float _1553;
    float _1554;
    float _1555;
    float _1556;
    float _1557;
    float _1558;
    float _1559;
    float _1560;
    float _1561;
    float _1562;
    float _1563;
    float _1564;
    float _1565;
    float _1566;
    float _1567;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1284 = fma(_944, cbModelParam._m0[30u].z, fma(_940, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _936));
        float _1288 = fma(_944, cbModelParam._m0[31u].z, fma(_940, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _936));
        float _1292 = fma(_944, cbModelParam._m0[32u].z, fma(_940, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _936));
        float _1315 = _936 + _725;
        float _1316 = _940 + _726;
        float _1317 = _944 + _727;
        float _1327 = fma(_1317, cbModelParam._m0[30u].z, fma(_1316, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1315)) - _1284;
        float _1328 = fma(_1317, cbModelParam._m0[31u].z, fma(_1316, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1315)) - _1288;
        float _1329 = fma(_1317, cbModelParam._m0[32u].z, fma(_1316, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1315)) - _1292;
        float _1333 = inversesqrt(dot(vec3(_1327, _1328, _1329), vec3(_1327, _1328, _1329)));
        float _1346 = ((_1333 * _1327) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1284 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1347 = ((_1333 * _1328) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1288 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1348 = ((_1333 * _1329) / cbModelParam._m0[35u].z) + ((((((_1292 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1350 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1346, _1347, _1348), 0.0);
        vec4 _1357 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1346, _1347, _1348), 0.0);
        vec4 _1364 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1346, _1347, _1348), 0.0);
        vec4 _1371 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1346, _1347, _1348), 0.0);
        float _1383 = exp2((_1350.w + (-0.5)) * 20.0) * 2.0;
        float _1384 = _1383 * (_1350.x + (-0.5));
        float _1385 = _1383 * (_1350.y + (-0.5));
        float _1386 = _1383 * (_1350.z + (-0.5));
        float _1393 = exp2((_1357.w + (-0.5)) * 20.0) * 2.0;
        float _1394 = _1393 * (_1357.x + (-0.5));
        float _1395 = _1393 * (_1357.y + (-0.5));
        float _1396 = _1393 * (_1357.z + (-0.5));
        float _1403 = exp2((_1364.w + (-0.5)) * 20.0) * 2.0;
        float _1404 = _1403 * (_1364.x + (-0.5));
        float _1405 = _1403 * (_1364.y + (-0.5));
        float _1406 = _1403 * (_1364.z + (-0.5));
        float _1413 = exp2((_1371.w + (-0.5)) * 20.0) * 2.0;
        float _1414 = _1413 * (_1371.x + (-0.5));
        float _1415 = _1413 * (_1371.y + (-0.5));
        float _1416 = _1413 * (_1371.z + (-0.5));
        float _1417 = isnan(0.0) ? _1414 : (isnan(_1414) ? 0.0 : max(_1414, 0.0));
        float _1418 = isnan(0.0) ? _1415 : (isnan(_1415) ? 0.0 : max(_1415, 0.0));
        float _1419 = isnan(0.0) ? _1416 : (isnan(_1416) ? 0.0 : max(_1416, 0.0));
        float _1420 = _1384 * 0.5;
        float _1421 = _1394 * 0.5;
        float _1422 = _1404 * 0.5;
        float _1423 = dot(vec3(_1420, _1421, _1422), vec3(_1420, _1421, _1422));
        float _1428 = (_1423 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1423);
        float _1436 = (dot(vec3(_725, _726, _727), vec3(_1428 * _1420, _1428 * _1421, _1428 * _1422)) + 1.0) * 0.5;
        float _3886 = isnan(0.0) ? _1436 : (isnan(_1436) ? 0.0 : max(_1436, 0.0));
        float _1445 = sqrt(((_1421 * _1421) + (_1420 * _1420)) + (_1422 * _1422)) / (_1417 + 9.9999997473787516355514526367188e-06);
        float _3897 = isnan(0.0) ? _1445 : (isnan(_1445) ? 0.0 : max(_1445, 0.0));
        float _1446 = isnan(1.0) ? _3897 : (isnan(_3897) ? 1.0 : min(_3897, 1.0));
        float _1447 = _1446 * 2.0;
        float _1451 = (1.0 - _1446) / (_1446 + 1.0);
        float _3908 = isnan(0.0) ? _1451 : (isnan(_1451) ? 0.0 : max(_1451, 0.0));
        float _1452 = isnan(1.0) ? _3908 : (isnan(_3908) ? 1.0 : min(_3908, 1.0));
        float _1461 = ((((1.0 - _1452) * (_1447 + 2.0)) * exp2(log2(isnan(1.0) ? _3886 : (isnan(_3886) ? 1.0 : min(_3886, 1.0))) * (_1447 + 1.0))) + _1452) * _1417;
        float _1462 = _1385 * 0.5;
        float _1463 = _1395 * 0.5;
        float _1464 = _1405 * 0.5;
        float _1465 = dot(vec3(_1462, _1463, _1464), vec3(_1462, _1463, _1464));
        float _1470 = (_1465 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1465);
        float _1478 = (dot(vec3(_725, _726, _727), vec3(_1470 * _1462, _1470 * _1463, _1470 * _1464)) + 1.0) * 0.5;
        float _3919 = isnan(0.0) ? _1478 : (isnan(_1478) ? 0.0 : max(_1478, 0.0));
        float _1487 = sqrt(((_1463 * _1463) + (_1462 * _1462)) + (_1464 * _1464)) / (_1418 + 9.9999997473787516355514526367188e-06);
        float _3930 = isnan(0.0) ? _1487 : (isnan(_1487) ? 0.0 : max(_1487, 0.0));
        float _1488 = isnan(1.0) ? _3930 : (isnan(_3930) ? 1.0 : min(_3930, 1.0));
        float _1489 = _1488 * 2.0;
        float _1493 = (1.0 - _1488) / (_1488 + 1.0);
        float _3941 = isnan(0.0) ? _1493 : (isnan(_1493) ? 0.0 : max(_1493, 0.0));
        float _1494 = isnan(1.0) ? _3941 : (isnan(_3941) ? 1.0 : min(_3941, 1.0));
        float _1503 = ((((1.0 - _1494) * (_1489 + 2.0)) * exp2(log2(isnan(1.0) ? _3919 : (isnan(_3919) ? 1.0 : min(_3919, 1.0))) * (_1489 + 1.0))) + _1494) * _1418;
        float _1504 = _1386 * 0.5;
        float _1505 = _1396 * 0.5;
        float _1506 = _1406 * 0.5;
        float _1507 = dot(vec3(_1504, _1505, _1506), vec3(_1504, _1505, _1506));
        float _1512 = (_1507 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1507);
        float _1520 = (dot(vec3(_725, _726, _727), vec3(_1512 * _1504, _1512 * _1505, _1512 * _1506)) + 1.0) * 0.5;
        float _3952 = isnan(0.0) ? _1520 : (isnan(_1520) ? 0.0 : max(_1520, 0.0));
        float _1529 = sqrt(((_1505 * _1505) + (_1504 * _1504)) + (_1506 * _1506)) / (_1419 + 9.9999997473787516355514526367188e-06);
        float _3963 = isnan(0.0) ? _1529 : (isnan(_1529) ? 0.0 : max(_1529, 0.0));
        float _1530 = isnan(1.0) ? _3963 : (isnan(_3963) ? 1.0 : min(_3963, 1.0));
        float _1531 = _1530 * 2.0;
        float _1535 = (1.0 - _1530) / (_1530 + 1.0);
        float _3974 = isnan(0.0) ? _1535 : (isnan(_1535) ? 0.0 : max(_1535, 0.0));
        float _1536 = isnan(1.0) ? _3974 : (isnan(_3974) ? 1.0 : min(_3974, 1.0));
        float _1545 = ((((1.0 - _1536) * (_1531 + 2.0)) * exp2(log2(isnan(1.0) ? _3952 : (isnan(_3952) ? 1.0 : min(_3952, 1.0))) * (_1531 + 1.0))) + _1536) * _1419;
        _1553 = _1386;
        _1554 = _1385;
        _1555 = _1384;
        _1556 = _1396;
        _1557 = _1395;
        _1558 = _1394;
        _1559 = _1406;
        _1560 = _1405;
        _1561 = _1404;
        _1562 = _1419;
        _1563 = _1418;
        _1564 = _1417;
        _1565 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1461 : (isnan(_1461) ? 0.0 : max(_1461, 0.0)));
        _1566 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1503 : (isnan(_1503) ? 0.0 : max(_1503, 0.0)));
        _1567 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1545 : (isnan(_1545) ? 0.0 : max(_1545, 0.0)));
    }
    else
    {
        _1553 = _1246;
        _1554 = _1246;
        _1555 = _1246;
        _1556 = _1246;
        _1557 = _1246;
        _1558 = _1246;
        _1559 = _1246;
        _1560 = _1246;
        _1561 = _1246;
        _1562 = _1246;
        _1563 = _1246;
        _1564 = _1246;
        _1565 = 0.0;
        _1566 = 0.0;
        _1567 = 0.0;
    }
    float _1577 = (cbModelParam._m0[1u].x * (_1565 - _1258)) + _1258;
    float _1578 = (cbModelParam._m0[1u].x * (_1566 - _1259)) + _1259;
    float _1579 = (cbModelParam._m0[1u].x * (_1567 - _1260)) + _1260;
    float _1600 = fma(_1579, cbSceneParam._m0[89u].z, fma(_1578, cbSceneParam._m0[89u].y, _1577 * cbSceneParam._m0[89u].x));
    float _1603 = fma(_1579, cbSceneParam._m0[90u].z, fma(_1578, cbSceneParam._m0[90u].y, _1577 * cbSceneParam._m0[90u].x));
    float _1606 = fma(_1579, cbSceneParam._m0[91u].z, fma(_1578, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1577));
    float _1621 = _883 * 0.5;
    float _1622 = _884 * 0.5;
    float _1623 = _885 * 0.5;
    float _1624 = dot(vec4(_1621, _1622, _1623, 1.0), vec4(_1555, _1558, _1561, _1564));
    float _1627 = dot(vec4(_1621, _1622, _1623, 1.0), vec4(_1554, _1557, _1560, _1563));
    float _1630 = dot(vec4(_1621, _1622, _1623, 1.0), vec4(_1553, _1556, _1559, _1562));
    float _1664;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1637 = dot(vec4(_1621, _1622, _1623, 1.0), vec4(_1245, _1249, _1252, _1255));
        float _1641 = dot(vec4(_1621, _1622, _1623, 1.0), vec4(_1247, _1250, _1253, _1256));
        float _1645 = dot(vec4(_1621, _1622, _1623, 1.0), vec4(_1248, _1251, _1254, _1257));
        float _1652 = dot(vec4(cbModelParam._m0[39u]), vec4(_1621, _1622, _1623, 1.0));
        _1664 = dot(vec3(isnan(0.0) ? _1645 : (isnan(_1645) ? 0.0 : max(_1645, 0.0)), isnan(0.0) ? _1641 : (isnan(_1641) ? 0.0 : max(_1641, 0.0)), isnan(0.0) ? _1637 : (isnan(_1637) ? 0.0 : max(_1637, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1652) ? 0.0 : (isnan(0.0) ? _1652 : max(0.0, _1652))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1664 = 1.0;
    }
    float _1675;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1666 = dot(vec4(cbModelParam._m0[40u]), vec4(_1621, _1622, _1623, 1.0));
        _1675 = dot(vec3(isnan(0.0) ? _1624 : (isnan(_1624) ? 0.0 : max(_1624, 0.0)), isnan(0.0) ? _1627 : (isnan(_1627) ? 0.0 : max(_1627, 0.0)), isnan(0.0) ? _1630 : (isnan(_1630) ? 0.0 : max(_1630, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1666) ? 0.0 : (isnan(0.0) ? _1666 : max(0.0, _1666))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1675 = 1.0;
    }
    float _1679 = (_1675 * cbModelParam._m0[1u].x) + (_1664 * (1.0 - cbModelParam._m0[1u].x));
    float _1689 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _728);
    float _1690 = isnan(_1689) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1689 : min(cbModelParam._m0[25u].z, _1689));
    float _1772;
    float _1774;
    float _1776;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1739 = fma(_944, cbModelParam._m0[13u].z, fma(_940, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _936)) + cbModelParam._m0[13u].w;
        float _1743 = fma(_944, cbModelParam._m0[14u].z, fma(_940, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _936)) + cbModelParam._m0[14u].w;
        float _1747 = fma(_944, cbModelParam._m0[15u].z, fma(_940, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _936)) + cbModelParam._m0[15u].w;
        float _1750 = fma(_885, cbModelParam._m0[13u].z, fma(_884, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _883));
        float _1753 = fma(_885, cbModelParam._m0[14u].z, fma(_884, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _883));
        float _1756 = fma(_885, cbModelParam._m0[15u].z, fma(_884, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _883));
        float _1784;
        if (_1750 > 0.0)
        {
            _1784 = abs((1.0 - _1739) / _1750);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1750 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1739 + 1.0) / _1750);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1784 = frontier_phi_14_12_ladder;
        }
        float _2007;
        if (_1753 > 0.0)
        {
            _2007 = abs((1.0 - _1743) / _1753);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1753 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1743 + 1.0) / _1753);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2007 = frontier_phi_23_19_ladder;
        }
        float _2253;
        if (_1756 > 0.0)
        {
            _2253 = abs((1.0 - _1747) / _1756);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1756 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1747 + 1.0) / _1756);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2253 = frontier_phi_35_30_ladder;
        }
        float _2255 = isnan(_2007) ? _1784 : (isnan(_1784) ? _2007 : min(_1784, _2007));
        float _2256 = isnan(_2253) ? _2255 : (isnan(_2255) ? _2253 : min(_2255, _2253));
        float _2260 = (_2256 * _1750) + _1739;
        float _2261 = (_2256 * _1753) + _1743;
        float _2262 = (_2256 * _1756) + _1747;
        float _2263 = _2256 * 9.9999997473787516355514526367188e-05;
        float _2265 = (-1.0) - _2263;
        float _2267 = _2263 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2262 > _2267) || ((_2262 < _2265) || ((_2261 > _2267) || ((_2261 < _2265) || ((_2260 < _2265) || (_2260 > _2267))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2386 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2262, cbModelParam._m0[9u].z, fma(_2261, cbModelParam._m0[9u].y, _2260 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2262, cbModelParam._m0[10u].z, fma(_2261, cbModelParam._m0[10u].y, _2260 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2262, cbModelParam._m0[11u].z, fma(_2261, cbModelParam._m0[11u].y, _2260 * cbModelParam._m0[11u].x))), _1690);
            frontier_phi_13_35_ladder = _2386.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2386.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2386.x * cbModelParam._m0[1u].y;
        }
        _1772 = frontier_phi_13_35_ladder_2;
        _1774 = frontier_phi_13_35_ladder_1;
        _1776 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1760 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_883, _884, _885), _1690);
        _1772 = _1760.x * cbModelParam._m0[1u].y;
        _1774 = _1760.y * cbModelParam._m0[1u].y;
        _1776 = _1760.z * cbModelParam._m0[1u].y;
    }
    float _1780 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _728);
    float _1781 = isnan(_1780) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1780 : min(cbModelParam._m0[25u].w, _1780));
    float _1872;
    float _1874;
    float _1876;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1836 = fma(_944, cbModelParam._m0[21u].z, fma(_940, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _936)) + cbModelParam._m0[21u].w;
        float _1840 = fma(_944, cbModelParam._m0[22u].z, fma(_940, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _936)) + cbModelParam._m0[22u].w;
        float _1844 = fma(_944, cbModelParam._m0[23u].z, fma(_940, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _936)) + cbModelParam._m0[23u].w;
        float _1847 = fma(_885, cbModelParam._m0[21u].z, fma(_884, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _883));
        float _1850 = fma(_885, cbModelParam._m0[22u].z, fma(_884, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _883));
        float _1853 = fma(_885, cbModelParam._m0[23u].z, fma(_884, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _883));
        float _2012;
        if (_1847 > 0.0)
        {
            _2012 = abs((1.0 - _1836) / _1847);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1847 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1836 + 1.0) / _1847);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2012 = frontier_phi_25_21_ladder;
        }
        float _2280;
        if (_1850 > 0.0)
        {
            _2280 = abs((1.0 - _1840) / _1850);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1850 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1840 + 1.0) / _1850);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2280 = frontier_phi_37_32_ladder;
        }
        float _2485;
        if (_1853 > 0.0)
        {
            _2485 = abs((1.0 - _1844) / _1853);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1853 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1844 + 1.0) / _1853);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2485 = frontier_phi_46_43_ladder;
        }
        float _2487 = isnan(_2280) ? _2012 : (isnan(_2012) ? _2280 : min(_2012, _2280));
        float _2488 = isnan(_2485) ? _2487 : (isnan(_2487) ? _2485 : min(_2487, _2485));
        float _2492 = (_2488 * _1847) + _1836;
        float _2493 = (_2488 * _1850) + _1840;
        float _2494 = (_2488 * _1853) + _1844;
        float _2495 = _2488 * 9.9999997473787516355514526367188e-05;
        float _2496 = (-1.0) - _2495;
        float _2498 = _2495 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2494 > _2498) || ((_2494 < _2496) || ((_2493 > _2498) || ((_2493 < _2496) || ((_2492 < _2496) || (_2492 > _2498))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2693 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2494, cbModelParam._m0[17u].z, fma(_2493, cbModelParam._m0[17u].y, _2492 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2494, cbModelParam._m0[18u].z, fma(_2493, cbModelParam._m0[18u].y, _2492 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2494, cbModelParam._m0[19u].z, fma(_2493, cbModelParam._m0[19u].y, _2492 * cbModelParam._m0[19u].x))), _1781);
            frontier_phi_22_46_ladder = _2693.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2693.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2693.x * cbModelParam._m0[1u].z;
        }
        _1872 = frontier_phi_22_46_ladder_2;
        _1874 = frontier_phi_22_46_ladder_1;
        _1876 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1856 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_883, _884, _885), _1781);
        _1872 = _1856.x * cbModelParam._m0[1u].z;
        _1874 = _1856.y * cbModelParam._m0[1u].z;
        _1876 = _1856.z * cbModelParam._m0[1u].z;
    }
    float _1888 = ((((1.0 - _904) * ((_891 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_904 * _891)) * _875;
    float _1889 = _1888 * ((cbModelParam._m0[1u].w * (_1872 - _1772)) + _1772);
    float _1890 = _1888 * ((cbModelParam._m0[1u].w * (_1874 - _1774)) + _1774);
    float _1891 = _1888 * ((cbModelParam._m0[1u].w * (_1876 - _1776)) + _1776);
    float _1894 = fma(_1891, cbSceneParam._m0[89u].z, fma(_1890, cbSceneParam._m0[89u].y, _1889 * cbSceneParam._m0[89u].x));
    float _1897 = fma(_1891, cbSceneParam._m0[90u].z, fma(_1890, cbSceneParam._m0[90u].y, _1889 * cbSceneParam._m0[90u].x));
    float _1900 = fma(_1891, cbSceneParam._m0[91u].z, fma(_1890, cbSceneParam._m0[91u].y, _1889 * cbSceneParam._m0[91u].x));
    vec4 _1908 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_812, _813));
    float _1910 = _1908.w;
    float _1922 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1910);
    float _1923 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1910);
    float _1924 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1910);
    uvec4 _1928 = floatBitsToUint(cbInstanceData._m0[_266 + 5u]);
    uint _1930 = _1928.x * 14u;
    uint _1931 = _1930 + 13u;
    float _1938 = _875 + (-1.0);
    float _1943 = (cbLight._m0[_1931].x * _1938) + 1.0;
    float _1944 = (cbLight._m0[_1931].y * _1938) + 1.0;
    float _1945 = (cbLight._m0[_1931].z * _1938) + 1.0;
    float _1946 = (cbLight._m0[_1931].w * _1938) + 1.0;
    uint _1947 = _1930 + 5u;
    float _1953 = isnan(1.0) ? _1944 : (isnan(_1944) ? 1.0 : min(_1944, 1.0));
    uint _1957 = _1930 + 4u;
    float _1966 = isnan(1.0) ? _1943 : (isnan(_1943) ? 1.0 : min(_1943, 1.0));
    uint _1970 = _1930 | 1u;
    float _1981 = dot(vec3(cbLight._m0[_1930].xyz), vec3(_725, _726, _727));
    float _1984 = dot(vec3(cbLight._m0[_1970].xyz), vec3(_725, _726, _727));
    float _4110 = isnan(0.0) ? _1981 : (isnan(_1981) ? 0.0 : max(_1981, 0.0));
    float _4121 = isnan(0.0) ? _1984 : (isnan(_1984) ? 0.0 : max(_1984, 0.0));
    float _1989 = (isnan(1.0) ? _4110 : (isnan(_4110) ? 1.0 : min(_4110, 1.0))) * 0.3183098733425140380859375;
    float _1991 = (isnan(1.0) ? _4121 : (isnan(_4121) ? 1.0 : min(_4121, 1.0))) * 0.3183098733425140380859375;
    float _1998 = ((cbLight._m0[_1947].x * _1953) * _1991) + (((cbLight._m0[_1957].x * _1922) * _1966) * _1989);
    float _1999 = ((_1953 * cbLight._m0[_1947].y) * _1991) + (((cbLight._m0[_1957].y * _1923) * _1966) * _1989);
    float _2000 = ((_1953 * cbLight._m0[_1947].z) * _1991) + (((cbLight._m0[_1957].z * _1924) * _1966) * _1989);
    uvec4 _2004 = floatBitsToUint(cbLight._m0[_1930 + 12u]);
    bool _2006 = _2004.x == 0u;
    float _2017;
    float _2019;
    float _2021;
    if (_2006)
    {
        _2017 = _1998;
        _2019 = _1999;
        _2021 = _2000;
    }
    else
    {
        uint _2025 = _1930 + 6u;
        float _2041 = (dot(vec3(cbLight._m0[_1930 + 2u].xyz), vec3(_725, _726, _727)) * 0.5) + 0.5;
        float _2042 = _2041 * _2041;
        float _4132 = isnan(0.0) ? _2042 : (isnan(_2042) ? 0.0 : max(_2042, 0.0));
        float _2043 = isnan(1.0) ? _4132 : (isnan(_4132) ? 1.0 : min(_4132, 1.0));
        float _2044 = isnan(1.0) ? _1945 : (isnan(_1945) ? 1.0 : min(_1945, 1.0));
        _2017 = (((cbLight._m0[_2025].x * 0.3183098733425140380859375) * _2043) * _2044) + _1998;
        _2019 = (((cbLight._m0[_2025].y * 0.3183098733425140380859375) * _2043) * _2044) + _1999;
        _2021 = (((cbLight._m0[_2025].z * 0.3183098733425140380859375) * _2043) * _2044) + _2000;
    }
    bool _2024 = _2004.y == 0u;
    float _2062;
    float _2064;
    float _2066;
    if (_2024)
    {
        _2062 = _2017;
        _2064 = _2019;
        _2066 = _2021;
    }
    else
    {
        uint _2224 = _1930 + 7u;
        float _2240 = (dot(vec3(cbLight._m0[_1930 + 3u].xyz), vec3(_725, _726, _727)) * 0.5) + 0.5;
        float _2241 = _2240 * _2240;
        float _4148 = isnan(0.0) ? _2241 : (isnan(_2241) ? 0.0 : max(_2241, 0.0));
        float _2242 = isnan(1.0) ? _4148 : (isnan(_4148) ? 1.0 : min(_4148, 1.0));
        float _2243 = isnan(1.0) ? _1946 : (isnan(_1946) ? 1.0 : min(_1946, 1.0));
        _2062 = (((cbLight._m0[_2224].x * 0.3183098733425140380859375) * _2242) * _2243) + _2017;
        _2064 = (((cbLight._m0[_2224].y * 0.3183098733425140380859375) * _2242) * _2243) + _2019;
        _2066 = (((cbLight._m0[_2224].z * 0.3183098733425140380859375) * _2242) * _2243) + _2021;
    }
    uint _2069 = _1930 + 8u;
    float _2082 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1930].w)) * _728) * 0.949999988079071044921875);
    float _2083 = _2082 * _2082;
    float _2084 = cbLight._m0[_1930].x + _804;
    float _2085 = cbLight._m0[_1930].y + _805;
    float _2086 = cbLight._m0[_1930].z + _806;
    float _2090 = inversesqrt(dot(vec3(_2084, _2085, _2086), vec3(_2084, _2085, _2086)));
    float _2091 = _2090 * _2084;
    float _2092 = _2090 * _2085;
    float _2093 = _2090 * _2086;
    float _2094 = dot(vec3(_725, _726, _727), vec3(cbLight._m0[_1930].xyz));
    float _4164 = isnan(0.0) ? _2094 : (isnan(_2094) ? 0.0 : max(_2094, 0.0));
    float _2097 = isnan(1.0) ? _4164 : (isnan(_4164) ? 1.0 : min(_4164, 1.0));
    float _4175 = isnan(0.0) ? _876 : (isnan(_876) ? 0.0 : max(_876, 0.0));
    float _2098 = isnan(1.0) ? _4175 : (isnan(_4175) ? 1.0 : min(_4175, 1.0));
    float _2099 = dot(vec3(_725, _726, _727), vec3(_2091, _2092, _2093));
    float _4186 = isnan(0.0) ? _2099 : (isnan(_2099) ? 0.0 : max(_2099, 0.0));
    float _2102 = isnan(1.0) ? _4186 : (isnan(_4186) ? 1.0 : min(_4186, 1.0));
    float _2103 = dot(vec3(cbLight._m0[_1930].xyz), vec3(_2091, _2092, _2093));
    float _4197 = isnan(0.0) ? _2103 : (isnan(_2103) ? 0.0 : max(_2103, 0.0));
    float _2107 = _2083 * _2083;
    float _2111 = ((_2102 * _2102) * (_2107 + (-1.0))) + 1.0;
    float _2122 = (exp2(log2(1.0 - (isnan(1.0) ? _4197 : (isnan(_4197) ? 1.0 : min(_4197, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2123 = 1.0 - _2083;
    float _2134 = (0.5 / (((_2098 * ((_2097 * _2123) + _2083)) + 9.9999999392252902907785028219223e-09) + (((_2098 * _2123) + _2083) * _2097))) * _2097;
    float _4208 = isnan(0.0) ? _2134 : (isnan(_2134) ? 0.0 : max(_2134, 0.0));
    float _2136 = (isnan(1.0) ? _4208 : (isnan(_4208) ? 1.0 : min(_4208, 1.0))) * (_2107 / ((_2111 * _2111) * 3.141590118408203125));
    uint _2150 = _1930 + 9u;
    float _2161 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1970].w)) * _728) * 0.949999988079071044921875);
    float _2162 = _2161 * _2161;
    float _2163 = cbLight._m0[_1970].x + _804;
    float _2164 = cbLight._m0[_1970].y + _805;
    float _2165 = cbLight._m0[_1970].z + _806;
    float _2169 = inversesqrt(dot(vec3(_2163, _2164, _2165), vec3(_2163, _2164, _2165)));
    float _2170 = _2169 * _2163;
    float _2171 = _2169 * _2164;
    float _2172 = _2169 * _2165;
    float _2173 = dot(vec3(_725, _726, _727), vec3(cbLight._m0[_1970].xyz));
    float _4219 = isnan(0.0) ? _2173 : (isnan(_2173) ? 0.0 : max(_2173, 0.0));
    float _2176 = isnan(1.0) ? _4219 : (isnan(_4219) ? 1.0 : min(_4219, 1.0));
    float _2177 = dot(vec3(_725, _726, _727), vec3(_2170, _2171, _2172));
    float _4230 = isnan(0.0) ? _2177 : (isnan(_2177) ? 0.0 : max(_2177, 0.0));
    float _2180 = isnan(1.0) ? _4230 : (isnan(_4230) ? 1.0 : min(_4230, 1.0));
    float _2181 = dot(vec3(cbLight._m0[_1970].xyz), vec3(_2170, _2171, _2172));
    float _4241 = isnan(0.0) ? _2181 : (isnan(_2181) ? 0.0 : max(_2181, 0.0));
    float _2185 = _2162 * _2162;
    float _2189 = ((_2180 * _2180) * (_2185 + (-1.0))) + 1.0;
    float _2198 = (exp2(log2(1.0 - (isnan(1.0) ? _4241 : (isnan(_4241) ? 1.0 : min(_4241, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2199 = 1.0 - _2162;
    float _2209 = (0.5 / (((_2098 * ((_2176 * _2199) + _2162)) + 9.9999999392252902907785028219223e-09) + (((_2098 * _2199) + _2162) * _2176))) * _2176;
    float _4252 = isnan(0.0) ? _2209 : (isnan(_2209) ? 0.0 : max(_2209, 0.0));
    float _2211 = (isnan(1.0) ? _4252 : (isnan(_4252) ? 1.0 : min(_4252, 1.0))) * (_2185 / ((_2189 * _2189) * 3.141590118408203125));
    float _2221 = (((_2198 * cbLight._m0[_2150].x) * _2211) * _1953) + ((((cbLight._m0[_2069].x * _1922) * _2122) * _2136) * _1966);
    float _2222 = (((_2198 * cbLight._m0[_2150].y) * _2211) * _1953) + ((((cbLight._m0[_2069].y * _1923) * _2122) * _2136) * _1966);
    float _2223 = (((_2198 * cbLight._m0[_2150].z) * _2211) * _1953) + ((((cbLight._m0[_2069].z * _1924) * _2122) * _2136) * _1966);
    float _2285;
    float _2287;
    float _2289;
    if (_2006)
    {
        _2285 = _2221;
        _2287 = _2222;
        _2289 = _2223;
    }
    else
    {
        uint _2291 = _1930 + 2u;
        uint _2295 = _1930 + 10u;
        float _2309 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2291].w)) * _728) * 0.949999988079071044921875);
        float _2310 = _2309 * _2309;
        float _2311 = cbLight._m0[_2291].x + _804;
        float _2312 = cbLight._m0[_2291].y + _805;
        float _2313 = cbLight._m0[_2291].z + _806;
        float _2317 = inversesqrt(dot(vec3(_2311, _2312, _2313), vec3(_2311, _2312, _2313)));
        float _2318 = _2317 * _2311;
        float _2319 = _2317 * _2312;
        float _2320 = _2317 * _2313;
        float _2321 = dot(vec3(_725, _726, _727), vec3(cbLight._m0[_2291].xyz));
        float _4263 = isnan(0.0) ? _2321 : (isnan(_2321) ? 0.0 : max(_2321, 0.0));
        float _2324 = isnan(1.0) ? _4263 : (isnan(_4263) ? 1.0 : min(_4263, 1.0));
        float _2325 = dot(vec3(_725, _726, _727), vec3(_2318, _2319, _2320));
        float _4274 = isnan(0.0) ? _2325 : (isnan(_2325) ? 0.0 : max(_2325, 0.0));
        float _2328 = isnan(1.0) ? _4274 : (isnan(_4274) ? 1.0 : min(_4274, 1.0));
        float _2329 = dot(vec3(cbLight._m0[_2291].xyz), vec3(_2318, _2319, _2320));
        float _4285 = isnan(0.0) ? _2329 : (isnan(_2329) ? 0.0 : max(_2329, 0.0));
        float _2333 = _2310 * _2310;
        float _2337 = ((_2328 * _2328) * (_2333 + (-1.0))) + 1.0;
        float _2346 = (exp2(log2(1.0 - (isnan(1.0) ? _4285 : (isnan(_4285) ? 1.0 : min(_4285, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2347 = 1.0 - _2310;
        float _2357 = (0.5 / (((_2098 * ((_2324 * _2347) + _2310)) + 9.9999999392252902907785028219223e-09) + (((_2098 * _2347) + _2310) * _2324))) * _2324;
        float _4296 = isnan(0.0) ? _2357 : (isnan(_2357) ? 0.0 : max(_2357, 0.0));
        float _2359 = (isnan(1.0) ? _4296 : (isnan(_4296) ? 1.0 : min(_4296, 1.0))) * (_2333 / ((_2337 * _2337) * 3.141590118408203125));
        float _2360 = isnan(1.0) ? _1945 : (isnan(_1945) ? 1.0 : min(_1945, 1.0));
        _2285 = (((_2346 * cbLight._m0[_2295].x) * _2359) * _2360) + _2221;
        _2287 = (((_2346 * cbLight._m0[_2295].y) * _2359) * _2360) + _2222;
        _2289 = (((_2346 * cbLight._m0[_2295].z) * _2359) * _2360) + _2223;
    }
    float _2395;
    float _2397;
    float _2399;
    if (_2024)
    {
        _2395 = _2285;
        _2397 = _2287;
        _2399 = _2289;
    }
    else
    {
        uint _2406 = _1930 + 3u;
        uint _2410 = _1930 + 11u;
        float _2424 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2406].w)) * _728) * 0.949999988079071044921875);
        float _2425 = _2424 * _2424;
        float _2426 = cbLight._m0[_2406].x + _804;
        float _2427 = cbLight._m0[_2406].y + _805;
        float _2428 = cbLight._m0[_2406].z + _806;
        float _2432 = inversesqrt(dot(vec3(_2426, _2427, _2428), vec3(_2426, _2427, _2428)));
        float _2433 = _2432 * _2426;
        float _2434 = _2432 * _2427;
        float _2435 = _2432 * _2428;
        float _2436 = dot(vec3(_725, _726, _727), vec3(cbLight._m0[_2406].xyz));
        float _4312 = isnan(0.0) ? _2436 : (isnan(_2436) ? 0.0 : max(_2436, 0.0));
        float _2439 = isnan(1.0) ? _4312 : (isnan(_4312) ? 1.0 : min(_4312, 1.0));
        float _2440 = dot(vec3(_725, _726, _727), vec3(_2433, _2434, _2435));
        float _4323 = isnan(0.0) ? _2440 : (isnan(_2440) ? 0.0 : max(_2440, 0.0));
        float _2443 = isnan(1.0) ? _4323 : (isnan(_4323) ? 1.0 : min(_4323, 1.0));
        float _2444 = dot(vec3(cbLight._m0[_2406].xyz), vec3(_2433, _2434, _2435));
        float _4334 = isnan(0.0) ? _2444 : (isnan(_2444) ? 0.0 : max(_2444, 0.0));
        float _2448 = _2425 * _2425;
        float _2452 = ((_2443 * _2443) * (_2448 + (-1.0))) + 1.0;
        float _2461 = (exp2(log2(1.0 - (isnan(1.0) ? _4334 : (isnan(_4334) ? 1.0 : min(_4334, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2462 = 1.0 - _2425;
        float _2472 = (0.5 / (((_2098 * ((_2439 * _2462) + _2425)) + 9.9999999392252902907785028219223e-09) + (((_2098 * _2462) + _2425) * _2439))) * _2439;
        float _4345 = isnan(0.0) ? _2472 : (isnan(_2472) ? 0.0 : max(_2472, 0.0));
        float _2474 = (isnan(1.0) ? _4345 : (isnan(_4345) ? 1.0 : min(_4345, 1.0))) * (_2448 / ((_2452 * _2452) * 3.141590118408203125));
        float _2475 = isnan(1.0) ? _1946 : (isnan(_1946) ? 1.0 : min(_1946, 1.0));
        _2395 = (((_2461 * cbLight._m0[_2410].x) * _2474) * _2475) + _2285;
        _2397 = (((_2461 * cbLight._m0[_2410].y) * _2474) * _2475) + _2287;
        _2399 = (((_2461 * cbLight._m0[_2410].z) * _2474) * _2475) + _2289;
    }
    float _2610;
    float _2612;
    float _2614;
    float _2616;
    float _2618;
    float _2620;
    if (_1928.y == 0u)
    {
        float _2550 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2551 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2550;
        float _2552 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2550;
        float _2553 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2550;
        uvec4 _2565 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2566 = _2565.x;
        uint _2577 = uint((float(_2565.y) * floor(float(uint(cbSceneParam._m0[85u].y * _813) / _2566))) + floor(float(uint(cbSceneParam._m0[85u].x * _812) / _2566)));
        float _2587 = (log2(_2553 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2588 = isnan(0.0) ? _2587 : (isnan(_2587) ? 0.0 : max(_2587, 0.0));
        uint _2591 = uint(isnan(14.0) ? _2588 : (isnan(_2588) ? 14.0 : min(_2588, 14.0)));
        uvec4 _2596 = texelFetch(g_lightClusterGridBuffer, int(((_2591 << 2u) + (_2577 << 6u)) >> 2u));
        uint _2597 = _2596.x;
        uint _2598 = _2565.z;
        float _2698;
        float _2700;
        float _2702;
        float _2704;
        float _2706;
        float _2708;
        if (((((1u << ((_2598 >> 4u) & 15u)) + 4294967295u) & _2597) == 0u) || ((_2598 & 240u) == 0u))
        {
            _2698 = 0.0;
            _2700 = 0.0;
            _2702 = 0.0;
            _2704 = 0.0;
            _2706 = 0.0;
            _2708 = 0.0;
        }
        else
        {
            float _2699;
            float _2701;
            float _2703;
            float _2705;
            float _2707;
            float _2709;
            float _2843 = 0.0;
            float _2844 = 0.0;
            float _2845 = 0.0;
            float _2846 = 0.0;
            float _2847 = 0.0;
            float _2848 = 0.0;
            uint _2849 = 0u;
            uint _2858;
            bool _2859;
            for (;;)
            {
                _2858 = texelFetch(g_lightClassification, int((((_2591 << 5u) + (_2577 << 9u)) + (_2849 << 2u)) >> 2u)).x;
                _2859 = _2858 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2859)
                {
                    frontier_phi_61_pred = _2843;
                    frontier_phi_61_pred_1 = _2848;
                    frontier_phi_61_pred_2 = _2847;
                    frontier_phi_61_pred_3 = _2846;
                    frontier_phi_61_pred_4 = _2845;
                    frontier_phi_61_pred_5 = _2844;
                }
                else
                {
                    float _2967;
                    float _2968;
                    float _2969;
                    float _2970;
                    float _2971;
                    float _2972;
                    uint _2973;
                    _2967 = _2843;
                    _2968 = _2844;
                    _2969 = _2845;
                    _2970 = _2846;
                    _2971 = _2847;
                    _2972 = _2848;
                    _2973 = _2858;
                    float _2899;
                    float _2900;
                    float _2901;
                    float _2902;
                    float _2903;
                    float _2904;
                    for (;;)
                    {
                        uint _2977 = uint(findLSB(_2973)) + (_2849 << 5u);
                        uint _2974 = (_2973 + 4294967295u) & _2973;
                        uint _2979 = _2977 * 48u;
                        vec4 _2993 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2979)).x, texelFetch(g_PointLightRenderingBuffer, int(_2979 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2979 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2979 + 3u)).x));
                        uint _2999 = (_2977 * 48u) + 4u;
                        vec4 _3012 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2999)).x, texelFetch(g_PointLightRenderingBuffer, int(_2999 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2999 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2999 + 3u)).x));
                        uint _3018 = (_2977 * 48u) + 8u;
                        vec3 _3029 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3018)).x, texelFetch(g_PointLightRenderingBuffer, int(_3018 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3018 + 2u)).x));
                        float _3033 = _2993.x - _2551;
                        float _3034 = _2993.y - _2552;
                        float _3035 = _2993.z - _2553;
                        float _3036 = dot(vec3(_3033, _3034, _3035), vec3(_3033, _3034, _3035));
                        float _3039 = inversesqrt(_3036);
                        float _3040 = _3039 * _3033;
                        float _3041 = _3039 * _3034;
                        float _3042 = _3039 * _3035;
                        float _3043 = dot(vec3(_831, _834, _837), vec3(_3040, _3041, _3042));
                        float _3048 = 1.0 - (_3036 * _2993.w);
                        float _4371 = isnan(0.0) ? _3048 : (isnan(_3048) ? 0.0 : max(_3048, 0.0));
                        float _3049 = isnan(1.0) ? _4371 : (isnan(_4371) ? 1.0 : min(_4371, 1.0));
                        float _3050 = sqrt(_3036) * _3012.w;
                        float _3053 = 1.39999997615814208984375 / (_3050 + 1.39999997615814208984375);
                        float _3054 = _3053 * _3053;
                        float _3057 = ((1.0 - _3054) * _3043) + _3054;
                        float _3060 = _3050 * _3050;
                        float _3064 = ((isnan(0.0) ? _3057 : (isnan(_3057) ? 0.0 : max(_3057, 0.0))) * _3049) / ((_3060 * 0.699999988079071044921875) + 1.0);
                        float _3068 = (-0.0) - _2551;
                        float _3069 = (-0.0) - _2552;
                        float _3070 = (-0.0) - _2553;
                        float _3074 = inversesqrt(dot(vec3(_3068, _3069, _3070), vec3(_3068, _3069, _3070)));
                        float _3075 = _3074 * _3068;
                        float _3076 = _3074 * _3069;
                        float _3077 = _3074 * _3070;
                        float _3085 = exp2(log2(1.0 / ((_3060 * 3.5) + 5.0)) * 0.25);
                        float _3086 = 1.0 - _891;
                        float _3093 = sqrt(1.0 - ((1.0 - (_3086 * _3086)) * (1.0 - (_3085 * _3085))));
                        float _3094 = _3093 * _3093;
                        float _3095 = _3094 * _3094;
                        float _3096 = _3075 + _3040;
                        float _3097 = _3076 + _3041;
                        float _3098 = _3077 + _3042;
                        float _3102 = inversesqrt(dot(vec3(_3096, _3097, _3098), vec3(_3096, _3097, _3098)));
                        float _3106 = dot(vec3(_831, _834, _837), vec3(_3075, _3076, _3077));
                        float _4387 = isnan(0.0) ? _3106 : (isnan(_3106) ? 0.0 : max(_3106, 0.0));
                        float _3109 = isnan(1.0) ? _4387 : (isnan(_4387) ? 1.0 : min(_4387, 1.0));
                        float _3110 = dot(vec3(_831, _834, _837), vec3(_3102 * _3096, _3102 * _3097, _3102 * _3098));
                        float _4398 = isnan(0.0) ? _3110 : (isnan(_3110) ? 0.0 : max(_3110, 0.0));
                        float _3113 = isnan(1.0) ? _4398 : (isnan(_4398) ? 1.0 : min(_4398, 1.0));
                        float _3117 = ((_3113 * _3113) * (_3095 + (-1.0))) + 1.0;
                        float _3118 = _3053 * _3094;
                        float _3119 = _3118 * _3118;
                        float _3122 = ((1.0 - _3119) * _3043) + _3119;
                        float _4409 = isnan(0.0) ? _3122 : (isnan(_3122) ? 0.0 : max(_3122, 0.0));
                        float _3123 = isnan(1.0) ? _4409 : (isnan(_4409) ? 1.0 : min(_4409, 1.0));
                        float _3124 = 1.0 - _3094;
                        float _3134 = (0.5 / (((_3123 * ((_3109 * _3124) + _3094)) + 9.9999999392252902907785028219223e-09) + (((_3123 * _3124) + _3094) * _3109))) * _3123;
                        float _4420 = isnan(0.0) ? _3134 : (isnan(_3134) ? 0.0 : max(_3134, 0.0));
                        float _3145 = (((_3095 * 3.1415927410125732421875) * (isnan(1.0) ? _4420 : (isnan(_4420) ? 1.0 : min(_4420, 1.0)))) / ((_3117 * _3117) * ((_3060 * 2.1991131305694580078125) + 3.141590118408203125))) * _3049;
                        _2902 = (_3064 * _3012.x) + _2970;
                        _2903 = (_3064 * _3012.y) + _2971;
                        _2904 = (_3064 * _3012.z) + _2972;
                        _2899 = (_3145 * _3029.x) + _2967;
                        _2900 = (_3145 * _3029.y) + _2968;
                        _2901 = (_3145 * _3029.z) + _2969;
                        if (_2974 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2967 = _2899;
                            _2968 = _2900;
                            _2969 = _2901;
                            _2970 = _2902;
                            _2971 = _2903;
                            _2972 = _2904;
                            _2973 = _2974;
                        }
                    }
                    frontier_phi_61_pred = _2899;
                    frontier_phi_61_pred_1 = _2904;
                    frontier_phi_61_pred_2 = _2903;
                    frontier_phi_61_pred_3 = _2902;
                    frontier_phi_61_pred_4 = _2901;
                    frontier_phi_61_pred_5 = _2900;
                }
                _2699 = frontier_phi_61_pred;
                _2709 = frontier_phi_61_pred_1;
                _2707 = frontier_phi_61_pred_2;
                _2705 = frontier_phi_61_pred_3;
                _2703 = frontier_phi_61_pred_4;
                _2701 = frontier_phi_61_pred_5;
                uint _2850 = _2849 + 1u;
                if (_2850 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2843 = _2699;
                    _2844 = _2701;
                    _2845 = _2703;
                    _2846 = _2705;
                    _2847 = _2707;
                    _2848 = _2709;
                    _2849 = _2850;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2698 = _2699;
            _2700 = _2701;
            _2702 = _2703;
            _2704 = _2705;
            _2706 = _2707;
            _2708 = _2709;
        }
        uvec4 _2712 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2713 = _2712.z;
        uint _2715 = (_2713 >> 8u) & 15u;
        float _2811;
        float _2813;
        float _2815;
        float _2817;
        float _2819;
        float _2821;
        if (((4294967295u << _2715) & _2597) == 0u)
        {
            _2811 = _2698;
            _2813 = _2700;
            _2815 = _2702;
            _2817 = _2704;
            _2819 = _2706;
            _2821 = _2708;
        }
        else
        {
            float _2836 = inversesqrt(dot(vec3(_2551, _2552, _2553), vec3(_2551, _2552, _2553)));
            float _2837 = _2836 * _2551;
            float _2838 = _2836 * _2552;
            float _2839 = _2836 * _2553;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2715 < ((_2713 >> 12u) & 15u))
            {
                float _2812;
                float _2814;
                float _2816;
                float _2818;
                float _2820;
                float _2822;
                float _2950 = _2698;
                float _2951 = _2700;
                float _2952 = _2702;
                float _2953 = _2704;
                float _2954 = _2706;
                float _2955 = _2708;
                uint _2956 = _2715;
                uint _2965;
                bool _2966;
                for (;;)
                {
                    _2965 = texelFetch(g_lightClassification, int((((_2591 << 5u) + (_2577 << 9u)) + (_2956 << 2u)) >> 2u)).x;
                    _2966 = _2965 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_2966)
                    {
                        frontier_phi_67_pred = _2953;
                        frontier_phi_67_pred_1 = _2954;
                        frontier_phi_67_pred_2 = _2955;
                        frontier_phi_67_pred_3 = _2952;
                        frontier_phi_67_pred_4 = _2951;
                        frontier_phi_67_pred_5 = _2950;
                    }
                    else
                    {
                        float _3150;
                        float _3151;
                        float _3152;
                        float _3153;
                        float _3154;
                        float _3155;
                        float _3443;
                        float _3444;
                        float _3445;
                        float _3446;
                        float _3447;
                        float _3448;
                        float _3163 = _2950;
                        float _3164 = _2951;
                        float _3165 = _2952;
                        float _3166 = _2953;
                        float _3167 = _2954;
                        float _3168 = _2955;
                        uint _3169 = _2965;
                        uint _3170;
                        vec4 _3195;
                        float _3196;
                        vec4 _3211;
                        vec3 _3223;
                        vec4 _3238;
                        vec4 _3253;
                        float _3299;
                        bool _3300;
                        for (;;)
                        {
                            uint _3180 = ((_2956 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3169));
                            _3170 = (_3169 + 4294967295u) & _3169;
                            uint _3182 = _3180 * 40u;
                            _3195 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3182)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3182 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3182 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3182 + 3u)).x));
                            _3196 = _3195.w;
                            uint _3198 = (_3180 * 40u) + 4u;
                            _3211 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3198)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3198 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3198 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3198 + 3u)).x));
                            uint _3213 = (_3180 * 40u) + 8u;
                            _3223 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3213)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3213 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3213 + 2u)).x));
                            uint _3225 = (_3180 * 40u) + 16u;
                            _3238 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3225)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3225 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3225 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3225 + 3u)).x));
                            uint _3240 = (_3180 * 40u) + 20u;
                            _3253 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3240)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3240 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3240 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3240 + 3u)).x));
                            uint _3255 = (_3180 * 40u) + 24u;
                            vec4 _3268 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3255)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3255 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3255 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3255 + 3u)).x));
                            uint _3274 = (_3180 * 40u) + 28u;
                            vec4 _3287 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3274)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3274 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3274 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3274 + 3u)).x));
                            _3299 = fma(_2553, _3287.z, fma(_2552, _3287.y, _3287.x * _2551)) + _3287.w;
                            _3300 = !((fma(_2553, _3268.z, fma(_2552, _3268.y, _3268.x * _2551)) + _3268.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3300)
                            {
                                float _3327 = _3195.x - _2551;
                                float _3328 = _3195.y - _2552;
                                float _3329 = _3195.z - _2553;
                                float _3330 = dot(vec3(_3327, _3328, _3329), vec3(_3327, _3328, _3329));
                                float _3333 = inversesqrt(_3330);
                                float _3334 = _3333 * _3327;
                                float _3335 = _3333 * _3328;
                                float _3336 = _3333 * _3329;
                                float _3340 = 1.0 - (_3330 / (_3196 * _3196));
                                float _4431 = isnan(0.0) ? _3340 : (isnan(_3340) ? 0.0 : max(_3340, 0.0));
                                float _3341 = isnan(1.0) ? _4431 : (isnan(_4431) ? 1.0 : min(_4431, 1.0));
                                float _3345 = sqrt(_3330) * _3211.w;
                                float _3347 = 1.39999997615814208984375 / (_3345 + 1.39999997615814208984375);
                                float _3348 = _3347 * _3347;
                                float _3351 = ((1.0 - _3348) * dot(vec3(_3334, _3335, _3336), vec3(_831, _834, _837))) + _3348;
                                float _3354 = _3345 * _3345;
                                float _3358 = (fma(_2553, _3238.z, fma(_2552, _3238.y, _3238.x * _2551)) + _3238.w) / _3299;
                                float _3359 = (fma(_2553, _3253.z, fma(_2552, _3253.y, _3253.x * _2551)) + _3253.w) / _3299;
                                float _3363 = 1.0 - dot(vec2(_3358, _3359), vec2(_3358, _3359));
                                float _4447 = isnan(0.0) ? _3363 : (isnan(_3363) ? 0.0 : max(_3363, 0.0));
                                float _3364 = isnan(1.0) ? _4447 : (isnan(_4447) ? 1.0 : min(_4447, 1.0));
                                float _3365 = _3364 * (((isnan(0.0) ? _3351 : (isnan(_3351) ? 0.0 : max(_3351, 0.0))) * _3341) / ((_3354 * 0.699999988079071044921875) + 1.0));
                                float _3377 = exp2(log2(1.0 / ((_3354 * 3.5) + 5.0)) * 0.25);
                                float _3378 = 1.0 - _891;
                                float _3385 = sqrt(1.0 - ((1.0 - (_3378 * _3378)) * (1.0 - (_3377 * _3377))));
                                float _3386 = _3385 * _3385;
                                float _3387 = _3386 * _3386;
                                float _3388 = _3334 - _2837;
                                float _3389 = _3335 - _2838;
                                float _3390 = _3336 - _2839;
                                float _3394 = inversesqrt(dot(vec3(_3388, _3389, _3390), vec3(_3388, _3389, _3390)));
                                float _3398 = dot(vec3(_831, _834, _837), vec3((-0.0) - _2837, (-0.0) - _2838, (-0.0) - _2839));
                                float _4458 = isnan(0.0) ? _3398 : (isnan(_3398) ? 0.0 : max(_3398, 0.0));
                                float _3401 = isnan(1.0) ? _4458 : (isnan(_4458) ? 1.0 : min(_4458, 1.0));
                                float _3402 = dot(vec3(_831, _834, _837), vec3(_3394 * _3388, _3394 * _3389, _3394 * _3390));
                                float _4469 = isnan(0.0) ? _3402 : (isnan(_3402) ? 0.0 : max(_3402, 0.0));
                                float _3405 = isnan(1.0) ? _4469 : (isnan(_4469) ? 1.0 : min(_4469, 1.0));
                                float _3409 = ((_3405 * _3405) * (_3387 + (-1.0))) + 1.0;
                                float _3410 = _3347 * _3386;
                                float _3411 = _3410 * _3410;
                                float _3417 = ((1.0 - _3411) * dot(vec3(_831, _834, _837), vec3(_3334, _3335, _3336))) + _3411;
                                float _4480 = isnan(0.0) ? _3417 : (isnan(_3417) ? 0.0 : max(_3417, 0.0));
                                float _3418 = isnan(1.0) ? _4480 : (isnan(_4480) ? 1.0 : min(_4480, 1.0));
                                float _3419 = 1.0 - _3386;
                                float _3429 = (0.5 / (((_3418 * ((_3401 * _3419) + _3386)) + 9.9999999392252902907785028219223e-09) + (((_3418 * _3419) + _3386) * _3401))) * _3418;
                                float _4491 = isnan(0.0) ? _3429 : (isnan(_3429) ? 0.0 : max(_3429, 0.0));
                                float _3439 = (_3364 * _3341) * (((_3387 * 3.1415927410125732421875) * (isnan(1.0) ? _4491 : (isnan(_4491) ? 1.0 : min(_4491, 1.0)))) / ((_3409 * _3409) * ((_3354 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3439 * _3223.x;
                                frontier_phi_73_pred_1 = _3439 * _3223.y;
                                frontier_phi_73_pred_2 = _3365 * _3211.z;
                                frontier_phi_73_pred_3 = _3365 * _3211.y;
                                frontier_phi_73_pred_4 = _3365 * _3211.x;
                                frontier_phi_73_pred_5 = _3439 * _3223.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3443 = frontier_phi_73_pred;
                            _3444 = frontier_phi_73_pred_1;
                            _3448 = frontier_phi_73_pred_2;
                            _3447 = frontier_phi_73_pred_3;
                            _3446 = frontier_phi_73_pred_4;
                            _3445 = frontier_phi_73_pred_5;
                            _3153 = _3446 + _3166;
                            _3154 = _3447 + _3167;
                            _3155 = _3448 + _3168;
                            _3150 = _3443 + _3163;
                            _3151 = _3444 + _3164;
                            _3152 = _3445 + _3165;
                            if (_3170 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3163 = _3150;
                                _3164 = _3151;
                                _3165 = _3152;
                                _3166 = _3153;
                                _3167 = _3154;
                                _3168 = _3155;
                                _3169 = _3170;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3153;
                        frontier_phi_67_pred_1 = _3154;
                        frontier_phi_67_pred_2 = _3155;
                        frontier_phi_67_pred_3 = _3152;
                        frontier_phi_67_pred_4 = _3151;
                        frontier_phi_67_pred_5 = _3150;
                    }
                    _2818 = frontier_phi_67_pred;
                    _2820 = frontier_phi_67_pred_1;
                    _2822 = frontier_phi_67_pred_2;
                    _2816 = frontier_phi_67_pred_3;
                    _2814 = frontier_phi_67_pred_4;
                    _2812 = frontier_phi_67_pred_5;
                    uint _2957 = _2956 + 1u;
                    if (_2957 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2950 = _2812;
                        _2951 = _2814;
                        _2952 = _2816;
                        _2953 = _2818;
                        _2954 = _2820;
                        _2955 = _2822;
                        _2956 = _2957;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2820;
                frontier_phi_55_56_ladder_1 = _2822;
                frontier_phi_55_56_ladder_2 = _2818;
                frontier_phi_55_56_ladder_3 = _2816;
                frontier_phi_55_56_ladder_4 = _2814;
                frontier_phi_55_56_ladder_5 = _2812;
            }
            else
            {
                frontier_phi_55_56_ladder = _2706;
                frontier_phi_55_56_ladder_1 = _2708;
                frontier_phi_55_56_ladder_2 = _2704;
                frontier_phi_55_56_ladder_3 = _2702;
                frontier_phi_55_56_ladder_4 = _2700;
                frontier_phi_55_56_ladder_5 = _2698;
            }
            _2811 = frontier_phi_55_56_ladder_5;
            _2813 = frontier_phi_55_56_ladder_4;
            _2815 = frontier_phi_55_56_ladder_3;
            _2817 = frontier_phi_55_56_ladder_2;
            _2819 = frontier_phi_55_56_ladder;
            _2821 = frontier_phi_55_56_ladder_1;
        }
        float _2826 = isnan(1.0) ? _875 : (isnan(_875) ? 1.0 : min(_875, 1.0));
        _2610 = (_2826 * _2817) + _2062;
        _2612 = (_2826 * _2819) + _2064;
        _2614 = (_2826 * _2821) + _2066;
        _2616 = ((_2811 * 0.039999999105930328369140625) * _2826) + _2395;
        _2618 = ((_2813 * 0.039999999105930328369140625) * _2826) + _2397;
        _2620 = ((_2815 * 0.039999999105930328369140625) * _2826) + _2399;
    }
    else
    {
        _2610 = _2062;
        _2612 = _2064;
        _2614 = _2066;
        _2616 = _2395;
        _2618 = _2397;
        _2620 = _2399;
    }
    float _4507 = isnan(0.0) ? _860 : (isnan(_860) ? 0.0 : max(_860, 0.0));
    float _4518 = isnan(0.0) ? _861 : (isnan(_861) ? 0.0 : max(_861, 0.0));
    float _4529 = isnan(0.0) ? _862 : (isnan(_862) ? 0.0 : max(_862, 0.0));
    uint _2640 = _266 + 6u;
    float _2648 = _812 / cbSceneParam._m0[86u].x;
    float _2649 = _813 / cbSceneParam._m0[86u].y;
    vec4 _2663 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2648, _2649, (log2((isnan(cbSceneParam._m0[77u].w) ? _746 : (isnan(_746) ? cbSceneParam._m0[77u].w : min(_746, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2665 = _2663.x;
    float _2666 = _2663.y;
    float _2667 = _2663.z;
    float _2668 = _2663.w;
    float _2761;
    float _2763;
    float _2765;
    float _2767;
    if (_746 > cbSceneParam._m0[78u].w)
    {
        float _2723 = isnan(_746) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _746 : min(cbSceneParam._m0[80u].w, _746));
        float _2724 = _2723 / _746;
        float _2735 = _2724 * _797;
        float _2736 = _798 * _2724;
        float _2737 = (-0.0) - _2736;
        float _2739 = _2724 * _799;
        float _2741 = (cbSceneParam._m0[77u].w * _2737) / _2723;
        float _2742 = _2741 + cbSceneParam._m0[79u].w;
        float _2743 = cbSceneParam._m0[79u].w - _2736;
        float _2749 = sqrt(((_2735 * _2735) + (_2736 * _2736)) + (_2739 * _2739));
        float _2752 = (1.0 - (cbSceneParam._m0[77u].w / _2723)) * _2749;
        float _2757 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2759 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2912;
        if (abs((_2737 - _2741) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2912 = ((((_2742 > 0.0) ? exp2(_2757 * _2742) : (2.0 - exp2(_2759 * _2742))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2752;
        }
        else
        {
            float _2872 = 1.0 / cbSceneParam._m0[80u].x;
            float _2873 = isnan(_2743) ? _2742 : (isnan(_2742) ? _2743 : max(_2742, _2743));
            float _2874 = isnan(_2743) ? _2742 : (isnan(_2742) ? _2743 : min(_2742, _2743));
            float _2883 = isnan(0.0) ? _2873 : (isnan(_2873) ? 0.0 : min(_2873, 0.0));
            float _2884 = isnan(0.0) ? _2874 : (isnan(_2874) ? 0.0 : min(_2874, 0.0));
            _2912 = ((abs(_2749 / _2737) * cbSceneParam._m0[80u].y) * ((((_2883 - _2884) * 2.0) - ((exp2(_2757 * (isnan(0.0) ? _2873 : (isnan(_2873) ? 0.0 : max(_2873, 0.0)))) - exp2(_2757 * (isnan(0.0) ? _2874 : (isnan(_2874) ? 0.0 : max(_2874, 0.0))))) * _2872)) - ((exp2(_2759 * _2883) - exp2(_2759 * _2884)) * _2872))) + (_2752 * cbSceneParam._m0[80u].z);
        }
        vec4 _2914 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2648, _2649, 1.0), 0.0);
        float _2923 = exp2((_2912 * (-1.44269502162933349609375)) * (1.0 - _2914.w));
        float _2924 = log2(_2923);
        float _2940 = log2(_2668);
        _2761 = (exp2(_2940 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2924 * cbSceneParam._m0[78u].x)) * _2914.x) / cbSceneParam._m0[78u].x)) + _2665;
        _2763 = (exp2(_2940 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2924 * cbSceneParam._m0[78u].y)) * _2914.y) / cbSceneParam._m0[78u].y)) + _2666;
        _2765 = (exp2(_2940 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2924 * cbSceneParam._m0[78u].z)) * _2914.z) / cbSceneParam._m0[78u].z)) + _2667;
        _2767 = _2923 * _2668;
    }
    else
    {
        _2761 = _2665;
        _2763 = _2666;
        _2765 = _2667;
        _2767 = _2668;
    }
    float _2779 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2780 = _2779 == 3.0;
    float _2781 = log2(_2767);
    float _2788 = exp2(_2781 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4507 : (isnan(_4507) ? 1.0 : min(_4507, 1.0))) * (_2610 + ((isnan(0.0) ? _1600 : (isnan(_1600) ? 0.0 : max(_1600, 0.0))) * _875))) + ((_2616 + ((isnan(0.0) ? _1894 : (isnan(_1894) ? 0.0 : max(_1894, 0.0))) * _1679)) * cbPerFrame._m0[3u].x));
    float _2789 = exp2(_2781 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4518 : (isnan(_4518) ? 1.0 : min(_4518, 1.0))) * (_2612 + ((isnan(0.0) ? _1603 : (isnan(_1603) ? 0.0 : max(_1603, 0.0))) * _875))) + ((_2618 + ((isnan(0.0) ? _1897 : (isnan(_1897) ? 0.0 : max(_1897, 0.0))) * _1679)) * cbPerFrame._m0[3u].x));
    float _2790 = exp2(_2781 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4529 : (isnan(_4529) ? 1.0 : min(_4529, 1.0))) * (_2614 + ((isnan(0.0) ? _1606 : (isnan(_1606) ? 0.0 : max(_1606, 0.0))) * _875))) + ((_2620 + ((isnan(0.0) ? _1900 : (isnan(_1900) ? 0.0 : max(_1900, 0.0))) * _1679)) * cbPerFrame._m0[3u].x));
    float _2799 = (_2779 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2799 * (_2780 ? _2788 : (_2788 + (cbSceneParam._m0[72u].w * _2761)));
    SV_Target.y = _2799 * (_2780 ? _2789 : (_2789 + (cbSceneParam._m0[72u].w * _2763)));
    SV_Target.z = _2799 * (_2780 ? _2790 : (_2790 + (cbSceneParam._m0[72u].w * _2765)));
    SV_Target.w = cbInstanceData._m0[_2640].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2640].w;
}


