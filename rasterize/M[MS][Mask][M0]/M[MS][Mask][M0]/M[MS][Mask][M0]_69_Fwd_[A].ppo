#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_0;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 13) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_22;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_29;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_10;
layout(set = 0, binding = 20) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_6;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1504;
float _3863;
float _3864;
float _3865;
float _3866;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _240 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _241 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _242 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _248 = inversesqrt(dot(vec3(_240, _241, _242), vec3(_240, _241, _242)));
    float _255 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _262 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _274 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _276 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _277 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3875 = isnan(0.0) ? _274 : (isnan(_274) ? 0.0 : max(_274, 0.0));
    float _3886 = isnan(0.0) ? _276 : (isnan(_276) ? 0.0 : max(_276, 0.0));
    float _3897 = isnan(0.0) ? _277 : (isnan(_277) ? 0.0 : max(_277, 0.0));
    uint _287 = uint(roundEven(NORMAL.w)) * 13u;
    uint _292 = _287 + 1u;
    uint _296 = _287 + 2u;
    float _305 = sqrt(((cbInstanceData._m0[_292].x * cbInstanceData._m0[_292].x) + (cbInstanceData._m0[_287].x * cbInstanceData._m0[_287].x)) + (cbInstanceData._m0[_296].x * cbInstanceData._m0[_296].x));
    float _306 = _305 * TEXCOORD.z;
    float _307 = _305 * TEXCOORD.w;
    vec4 _320 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _306) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _307) + cbTextureTilingScale._m0[13u].w));
    vec4 _343 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _369 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _374 = _369.x * cbMtdParam._m0[11u].x;
    float _375 = _369.y * cbMtdParam._m0[11u].y;
    float _376 = _369.z * cbMtdParam._m0[11u].z;
    vec4 _395 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _306) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _307) + cbTextureTilingScale._m0[5u].w));
    vec4 _414 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _449 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _451 = _449.x;
    float _463 = dot(vec4(_451, _449.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _480 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _414.x) * 2.0) - ((((_451 - _463) * cbMtdParam._m0[24u].z) + _463) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3908 = isnan(0.0) ? _480 : (isnan(_480) ? 0.0 : max(_480, 0.0));
    float _481 = isnan(1.0) ? _3908 : (isnan(_3908) ? 1.0 : min(_3908, 1.0));
    float _488 = (_481 * ((_395.x * cbMtdParam._m0[12u].x) - _374)) + _374;
    float _489 = (_481 * ((_395.y * cbMtdParam._m0[12u].y) - _375)) + _375;
    float _490 = (_481 * ((_395.z * cbMtdParam._m0[12u].z) - _376)) + _376;
    vec4 _507 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _306) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _307) + cbTextureTilingScale._m0[3u].w));
    vec4 _527 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _529 = _527.x;
    float _539 = dot(vec4(_529, _527.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _553 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _414.y) * 2.0) - ((((_529 - _539) * cbMtdParam._m0[24u].z) + _539) * cbMtdParam._m0[20u].w))) + 1.0;
    float _3919 = isnan(0.0) ? _553 : (isnan(_553) ? 0.0 : max(_553, 0.0));
    float _554 = isnan(1.0) ? _3919 : (isnan(_3919) ? 1.0 : min(_3919, 1.0));
    float _564 = (_343.x * cbMtdParam._m0[9u].x) * ((_554 * ((_507.x * cbMtdParam._m0[13u].x) - _488)) + _488);
    float _565 = (_343.y * cbMtdParam._m0[9u].y) * ((_554 * ((_507.y * cbMtdParam._m0[13u].y) - _489)) + _489);
    float _566 = (_343.z * cbMtdParam._m0[9u].z) * ((_554 * ((_507.z * cbMtdParam._m0[13u].z) - _490)) + _490);
    float _570 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _320.x) * _564;
    float _573 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _320.y) * _565;
    float _576 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _320.z) * _566;
    float _584 = (((_564 - _570) * (isnan(1.0) ? _3875 : (isnan(_3875) ? 1.0 : min(_3875, 1.0)))) + _570) * 4.55000019073486328125;
    float _586 = (((_565 - _573) * (isnan(1.0) ? _3886 : (isnan(_3886) ? 1.0 : min(_3886, 1.0)))) + _573) * 4.55000019073486328125;
    float _588 = (((_566 - _576) * (isnan(1.0) ? _3897 : (isnan(_3897) ? 1.0 : min(_3897, 1.0)))) + _576) * 4.55000019073486328125;
    vec4 _605 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _306) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _307) + cbTextureTilingScale._m0[20u].w));
    vec4 _628 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _306) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _307) + cbTextureTilingScale._m0[4u].w));
    vec4 _645 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _647 = _645.x;
    float _648 = _645.y;
    float _649 = _645.z;
    float _656 = ((_628.x - _647) * _481) + _647;
    float _657 = ((_628.y - _648) * _481) + _648;
    float _658 = ((_628.z - _649) * _481) + _649;
    vec4 _670 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _306) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _307) + cbTextureTilingScale._m0[2u].w));
    float _683 = ((_670.z - _658) * _554) + _658;
    float _686 = ((((_670.x - _656) * _554) + _656) * 2.0) + (-1.0);
    float _687 = ((((_670.y - _657) * _554) + _657) * 2.0) + (-1.0);
    float _688 = dot(vec2(_686, _687), vec2(_686, _687));
    float _3930 = isnan(0.0) ? _688 : (isnan(_688) ? 0.0 : max(_688, 0.0));
    float _693 = sqrt(1.0 - (isnan(1.0) ? _3930 : (isnan(_3930) ? 1.0 : min(_3930, 1.0))));
    vec4 _707 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _732 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _306) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _307) + cbTextureTilingScale._m0[11u].w));
    float _734 = _732.x;
    float _735 = 1.0 - _734;
    float _741 = isnan(-1.0) ? cbMtdParam._m0[24u].x : (isnan(cbMtdParam._m0[24u].x) ? (-1.0) : max(cbMtdParam._m0[24u].x, -1.0));
    float _744 = ((isnan(0.0) ? _741 : (isnan(_741) ? 0.0 : min(_741, 0.0))) * TEXCOORD_8.x) + TEXCOORD_8.w;
    float _753 = (_744 - ((((((_734 - _735) * cbMtdParam._m0[24u].w) + _735) + 0.00999999977648258209228515625) * cbMtdParam._m0[21u].z) * (1.0 - _744))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3951 = isnan(0.0) ? _753 : (isnan(_753) ? 0.0 : max(_753, 0.0));
    float _754 = isnan(1.0) ? _3951 : (isnan(_3951) ? 1.0 : min(_3951, 1.0));
    float _761 = (_754 * (cbMtdParam._m0[17u].x - _584)) + _584;
    float _762 = (_754 * (cbMtdParam._m0[17u].y - _586)) + _586;
    float _763 = (_754 * (cbMtdParam._m0[17u].z - _588)) + _588;
    vec4 _775 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _306) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _307) + cbTextureTilingScale._m0[19u].w));
    float _777 = _775.x;
    float _778 = 1.0 - _777;
    float _803 = (TEXCOORD_8.x - ((cbMtdParam._m0[22u].w * (1.0 - TEXCOORD_8.x)) * ((((_777 - _778) * cbMtdParam._m0[24u].y) + _778) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3962 = isnan(0.0) ? _803 : (isnan(_803) ? 0.0 : max(_803, 0.0));
    float _804 = isnan(1.0) ? _3962 : (isnan(_3962) ? 1.0 : min(_3962, 1.0));
    float _812 = ((((cbMtdParam._m0[10u].x - _761) * TEXCOORD_8.x) * cbMtdParam._m0[23u].w) * _804) + _761;
    float _813 = ((((cbMtdParam._m0[10u].y - _762) * TEXCOORD_8.y) * cbMtdParam._m0[23u].w) * _804) + _762;
    float _814 = (((cbMtdParam._m0[23u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _763)) * _804) + _763;
    float _819 = (((_605.z - _683) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _683;
    float _823 = ((_707.z - _819) * cbMtdParam._m0[19u].w) + _819;
    vec4 _837 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _306) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _307) + cbTextureTilingScale._m0[15u].w));
    float _844 = (_837.x * 2.0) + (-1.0);
    float _845 = (_837.y * 2.0) + (-1.0);
    float _846 = dot(vec2(_844, _845), vec2(_844, _845));
    float _3973 = isnan(0.0) ? _846 : (isnan(_846) ? 0.0 : max(_846, 0.0));
    float _854 = (_754 * (_837.z - _823)) + _823;
    float _857 = ((cbMtdParam._m0[23u].y - _854) * _804) + _854;
    vec4 _878 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _306) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _307) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _884 = (_878.x * 2.0) + (-1.0);
    float _885 = (_878.y * 2.0) + (-1.0);
    float _886 = dot(vec2(_884, _885), vec2(_884, _885));
    float _3984 = isnan(0.0) ? _886 : (isnan(_886) ? 0.0 : max(_886, 0.0));
    float _900 = (_686 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_605.x * 2.0) + (-1.0)))) + (((_707.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _901 = (_687 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_605.y * 2.0) + (-1.0)))) + (((_707.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _913 = (((_844 - _900) + (cbMtdParam._m0[21u].x * _900)) * _754) + _900;
    float _914 = (((_845 - _901) + (cbMtdParam._m0[21u].x * _901)) * _754) + _901;
    float _915 = (_754 * (sqrt(1.0 - (isnan(1.0) ? _3973 : (isnan(_3973) ? 1.0 : min(_3973, 1.0)))) - _693)) + _693;
    float _926 = (((_884 - _913) + (_913 * cbMtdParam._m0[22u].z)) * _804) + _913;
    float _927 = (((_885 - _914) + (_914 * cbMtdParam._m0[22u].z)) * _804) + _914;
    float _928 = ((sqrt(1.0 - (isnan(1.0) ? _3984 : (isnan(_3984) ? 1.0 : min(_3984, 1.0)))) - _915) * _804) + _915;
    float _930 = cbMtdParam._m0[22u].x + _707.w;
    float _933 = fma(_928, _255 * NORMAL.x, fma(_927, _262 * TANGENT.x, (_248 * _240) * _926));
    float _936 = fma(_928, _255 * NORMAL.y, fma(_927, _262 * TANGENT.y, (_248 * _241) * _926));
    float _939 = fma(_928, _255 * NORMAL.z, fma(_927, _262 * TANGENT.z, (_248 * _242) * _926));
    float _943 = inversesqrt(dot(vec3(_933, _936, _939), vec3(_933, _936, _939)));
    float _944 = _943 * _933;
    float _945 = _943 * _936;
    float _946 = _943 * _939;
    float _3995 = isnan(0.0) ? _857 : (isnan(_857) ? 0.0 : max(_857, 0.0));
    float _947 = isnan(1.0) ? _3995 : (isnan(_3995) ? 1.0 : min(_3995, 1.0));
    float _4006 = isnan(0.0) ? _930 : (isnan(_930) ? 0.0 : max(_930, 0.0));
    float _4017 = isnan(0.0) ? _812 : (isnan(_812) ? 0.0 : max(_812, 0.0));
    float _4028 = isnan(0.0) ? _813 : (isnan(_813) ? 0.0 : max(_813, 0.0));
    float _4039 = isnan(0.0) ? _814 : (isnan(_814) ? 0.0 : max(_814, 0.0));
    float _965 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _1005 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _1015 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _1005);
    float _1016 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _1005);
    float _1017 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _1005);
    float _1021 = inversesqrt(dot(vec3(_1015, _1016, _1017), vec3(_1015, _1016, _1017)));
    float _1022 = _1015 * _1021;
    float _1023 = _1016 * _1021;
    float _1024 = _1017 * _1021;
    vec4 _1029 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _1031 = _1029.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1185 = sqrt(((_1015 * _1015) + (_1016 * _1016)) + (_1017 * _1017));
        float _1191 = (cbMatDynParam._m0[5u].x * _1185) + cbMatDynParam._m0[5u].y;
        float _4050 = isnan(0.0) ? _1191 : (isnan(_1191) ? 0.0 : max(_1191, 0.0));
        float _1192 = isnan(1.0) ? _4050 : (isnan(_4050) ? 1.0 : min(_4050, 1.0));
        float _1196 = (cbMatDynParam._m0[5u].z * _1185) + cbMatDynParam._m0[5u].w;
        float _4061 = isnan(0.0) ? _1196 : (isnan(_1196) ? 0.0 : max(_1196, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4061 : (isnan(_4061) ? 1.0 : min(_4061, 1.0))) - _1192)) + _1192) < ((_1031 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _1042 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1043 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1061 = fma(_946, cbSceneParam._m0[5u].z, fma(_945, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _944));
    float _1064 = fma(_946, cbSceneParam._m0[6u].z, fma(_945, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _944));
    float _1067 = fma(_946, cbSceneParam._m0[7u].z, fma(_945, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _944));
    uint _1080 = _287 + 9u;
    uint _1081 = _1080 + uint(cbMatDynParam._m0[0u].w);
    float _1087 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4017 : (isnan(_4017) ? 1.0 : min(_4017, 1.0)))) * cbInstanceData._m0[_1081].x;
    float _1088 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4028 : (isnan(_4028) ? 1.0 : min(_4028, 1.0)))) * cbInstanceData._m0[_1081].y;
    float _1089 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4039 : (isnan(_4039) ? 1.0 : min(_4039, 1.0)))) * cbInstanceData._m0[_1081].z;
    float _4072 = isnan(0.0) ? _1087 : (isnan(_1087) ? 0.0 : max(_1087, 0.0));
    float _1090 = isnan(1.0) ? _4072 : (isnan(_4072) ? 1.0 : min(_4072, 1.0));
    float _4083 = isnan(0.0) ? _1088 : (isnan(_1088) ? 0.0 : max(_1088, 0.0));
    float _1091 = isnan(1.0) ? _4083 : (isnan(_4083) ? 1.0 : min(_4083, 1.0));
    float _4094 = isnan(0.0) ? _1089 : (isnan(_1089) ? 0.0 : max(_1089, 0.0));
    float _1092 = isnan(1.0) ? _4094 : (isnan(_4094) ? 1.0 : min(_4094, 1.0));
    vec4 _1101 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1042, cbSceneParam._m0[86u].y * _1043));
    float _1105 = ((isnan(1.0) ? _4006 : (isnan(_4006) ? 1.0 : min(_4006, 1.0))) * TEXCOORD_5.w) * _1101.x;
    float _1106 = dot(vec3(_944, _945, _946), vec3(_1022, _1023, _1024));
    float _1109 = _1106 * 2.0;
    float _1113 = (_1109 * _944) - _1022;
    float _1114 = (_1109 * _945) - _1023;
    float _1115 = (_1109 * _946) - _1024;
    float _1119 = abs(dot(vec3(_1022, _1023, _1024), vec3(_944, _945, _946)));
    float _4105 = isnan(0.0) ? _1119 : (isnan(_1119) ? 0.0 : max(_1119, 0.0));
    float _1121 = sqrt(_947);
    float _1134 = exp2((_1121 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4105 : (isnan(_4105) ? 1.0 : min(_4105, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1121 * 3.0));
    float _1166 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1170 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1174 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1503;
    float _1505;
    float _1506;
    float _1507;
    float _1508;
    float _1509;
    float _1510;
    float _1511;
    float _1512;
    float _1513;
    float _1514;
    float _1515;
    float _1516;
    float _1517;
    float _1518;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1228 = fma(_1174, cbModelParam._m0[26u].z, fma(_1170, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1166));
        float _1232 = fma(_1174, cbModelParam._m0[27u].z, fma(_1170, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1166));
        float _1236 = fma(_1174, cbModelParam._m0[28u].z, fma(_1170, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1166));
        float _1261 = _1166 + _944;
        float _1262 = _1170 + _945;
        float _1263 = _1174 + _946;
        float _1273 = fma(_1263, cbModelParam._m0[26u].z, fma(_1262, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1261)) - _1228;
        float _1274 = fma(_1263, cbModelParam._m0[27u].z, fma(_1262, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1261)) - _1232;
        float _1275 = fma(_1263, cbModelParam._m0[28u].z, fma(_1262, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1261)) - _1236;
        float _1279 = inversesqrt(dot(vec3(_1273, _1274, _1275), vec3(_1273, _1274, _1275)));
        float _1292 = ((_1279 * _1273) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1228 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1293 = ((_1279 * _1274) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1232 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1294 = ((_1279 * _1275) / cbModelParam._m0[34u].z) + ((((((_1236 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1297 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1292, _1293, _1294), 0.0);
        vec4 _1304 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1292, _1293, _1294), 0.0);
        vec4 _1311 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1292, _1293, _1294), 0.0);
        vec4 _1318 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1292, _1293, _1294), 0.0);
        float _1331 = exp2((_1297.w + (-0.5)) * 20.0) * 2.0;
        float _1332 = _1331 * (_1297.x + (-0.5));
        float _1333 = _1331 * (_1297.y + (-0.5));
        float _1334 = _1331 * (_1297.z + (-0.5));
        float _1341 = exp2((_1304.w + (-0.5)) * 20.0) * 2.0;
        float _1342 = _1341 * (_1304.x + (-0.5));
        float _1343 = _1341 * (_1304.y + (-0.5));
        float _1344 = _1341 * (_1304.z + (-0.5));
        float _1351 = exp2((_1311.w + (-0.5)) * 20.0) * 2.0;
        float _1352 = _1351 * (_1311.x + (-0.5));
        float _1353 = _1351 * (_1311.y + (-0.5));
        float _1354 = _1351 * (_1311.z + (-0.5));
        float _1361 = exp2((_1318.w + (-0.5)) * 20.0) * 2.0;
        float _1362 = _1361 * (_1318.x + (-0.5));
        float _1363 = _1361 * (_1318.y + (-0.5));
        float _1364 = _1361 * (_1318.z + (-0.5));
        float _1365 = isnan(0.0) ? _1362 : (isnan(_1362) ? 0.0 : max(_1362, 0.0));
        float _1366 = isnan(0.0) ? _1363 : (isnan(_1363) ? 0.0 : max(_1363, 0.0));
        float _1367 = isnan(0.0) ? _1364 : (isnan(_1364) ? 0.0 : max(_1364, 0.0));
        float _1368 = _1332 * 0.5;
        float _1369 = _1342 * 0.5;
        float _1370 = _1352 * 0.5;
        float _1371 = dot(vec3(_1368, _1369, _1370), vec3(_1368, _1369, _1370));
        float _1376 = (_1371 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1371);
        float _1385 = (dot(vec3(_944, _945, _946), vec3(_1376 * _1368, _1376 * _1369, _1376 * _1370)) + 1.0) * 0.5;
        float _4131 = isnan(0.0) ? _1385 : (isnan(_1385) ? 0.0 : max(_1385, 0.0));
        float _1395 = sqrt(((_1369 * _1369) + (_1368 * _1368)) + (_1370 * _1370)) / (_1365 + 9.9999997473787516355514526367188e-06);
        float _4142 = isnan(0.0) ? _1395 : (isnan(_1395) ? 0.0 : max(_1395, 0.0));
        float _1396 = isnan(1.0) ? _4142 : (isnan(_4142) ? 1.0 : min(_4142, 1.0));
        float _1397 = _1396 * 2.0;
        float _1401 = (1.0 - _1396) / (_1396 + 1.0);
        float _4153 = isnan(0.0) ? _1401 : (isnan(_1401) ? 0.0 : max(_1401, 0.0));
        float _1402 = isnan(1.0) ? _4153 : (isnan(_4153) ? 1.0 : min(_4153, 1.0));
        float _1411 = ((((1.0 - _1402) * (_1397 + 2.0)) * exp2(log2(isnan(1.0) ? _4131 : (isnan(_4131) ? 1.0 : min(_4131, 1.0))) * (_1397 + 1.0))) + _1402) * _1365;
        float _1412 = _1333 * 0.5;
        float _1413 = _1343 * 0.5;
        float _1414 = _1353 * 0.5;
        float _1415 = dot(vec3(_1412, _1413, _1414), vec3(_1412, _1413, _1414));
        float _1420 = (_1415 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1415);
        float _1428 = (dot(vec3(_944, _945, _946), vec3(_1420 * _1412, _1420 * _1413, _1420 * _1414)) + 1.0) * 0.5;
        float _4164 = isnan(0.0) ? _1428 : (isnan(_1428) ? 0.0 : max(_1428, 0.0));
        float _1437 = sqrt(((_1413 * _1413) + (_1412 * _1412)) + (_1414 * _1414)) / (_1366 + 9.9999997473787516355514526367188e-06);
        float _4175 = isnan(0.0) ? _1437 : (isnan(_1437) ? 0.0 : max(_1437, 0.0));
        float _1438 = isnan(1.0) ? _4175 : (isnan(_4175) ? 1.0 : min(_4175, 1.0));
        float _1439 = _1438 * 2.0;
        float _1443 = (1.0 - _1438) / (_1438 + 1.0);
        float _4186 = isnan(0.0) ? _1443 : (isnan(_1443) ? 0.0 : max(_1443, 0.0));
        float _1444 = isnan(1.0) ? _4186 : (isnan(_4186) ? 1.0 : min(_4186, 1.0));
        float _1453 = ((((1.0 - _1444) * (_1439 + 2.0)) * exp2(log2(isnan(1.0) ? _4164 : (isnan(_4164) ? 1.0 : min(_4164, 1.0))) * (_1439 + 1.0))) + _1444) * _1366;
        float _1454 = _1334 * 0.5;
        float _1455 = _1344 * 0.5;
        float _1456 = _1354 * 0.5;
        float _1457 = dot(vec3(_1454, _1455, _1456), vec3(_1454, _1455, _1456));
        float _1462 = (_1457 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1457);
        float _1470 = (dot(vec3(_944, _945, _946), vec3(_1462 * _1454, _1462 * _1455, _1462 * _1456)) + 1.0) * 0.5;
        float _4197 = isnan(0.0) ? _1470 : (isnan(_1470) ? 0.0 : max(_1470, 0.0));
        float _1479 = sqrt(((_1455 * _1455) + (_1454 * _1454)) + (_1456 * _1456)) / (_1367 + 9.9999997473787516355514526367188e-06);
        float _4208 = isnan(0.0) ? _1479 : (isnan(_1479) ? 0.0 : max(_1479, 0.0));
        float _1480 = isnan(1.0) ? _4208 : (isnan(_4208) ? 1.0 : min(_4208, 1.0));
        float _1481 = _1480 * 2.0;
        float _1485 = (1.0 - _1480) / (_1480 + 1.0);
        float _4219 = isnan(0.0) ? _1485 : (isnan(_1485) ? 0.0 : max(_1485, 0.0));
        float _1486 = isnan(1.0) ? _4219 : (isnan(_4219) ? 1.0 : min(_4219, 1.0));
        float _1495 = ((((1.0 - _1486) * (_1481 + 2.0)) * exp2(log2(isnan(1.0) ? _4197 : (isnan(_4197) ? 1.0 : min(_4197, 1.0))) * (_1481 + 1.0))) + _1486) * _1367;
        _1503 = _1334;
        _1505 = _1333;
        _1506 = _1332;
        _1507 = _1344;
        _1508 = _1343;
        _1509 = _1342;
        _1510 = _1354;
        _1511 = _1353;
        _1512 = _1352;
        _1513 = _1367;
        _1514 = _1366;
        _1515 = _1365;
        _1516 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1411 : (isnan(_1411) ? 0.0 : max(_1411, 0.0)));
        _1517 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1453 : (isnan(_1453) ? 0.0 : max(_1453, 0.0)));
        _1518 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1495 : (isnan(_1495) ? 0.0 : max(_1495, 0.0)));
    }
    else
    {
        _1503 = _1504;
        _1505 = _1504;
        _1506 = _1504;
        _1507 = _1504;
        _1508 = _1504;
        _1509 = _1504;
        _1510 = _1504;
        _1511 = _1504;
        _1512 = _1504;
        _1513 = _1504;
        _1514 = _1504;
        _1515 = _1504;
        _1516 = 0.0;
        _1517 = 0.0;
        _1518 = 0.0;
    }
    float _1814;
    float _1815;
    float _1816;
    float _1817;
    float _1818;
    float _1819;
    float _1820;
    float _1821;
    float _1822;
    float _1823;
    float _1824;
    float _1825;
    float _1826;
    float _1827;
    float _1828;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1545 = fma(_1174, cbModelParam._m0[30u].z, fma(_1170, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1166));
        float _1549 = fma(_1174, cbModelParam._m0[31u].z, fma(_1170, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1166));
        float _1553 = fma(_1174, cbModelParam._m0[32u].z, fma(_1170, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1166));
        float _1576 = _1166 + _944;
        float _1577 = _1170 + _945;
        float _1578 = _1174 + _946;
        float _1588 = fma(_1578, cbModelParam._m0[30u].z, fma(_1577, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1576)) - _1545;
        float _1589 = fma(_1578, cbModelParam._m0[31u].z, fma(_1577, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1576)) - _1549;
        float _1590 = fma(_1578, cbModelParam._m0[32u].z, fma(_1577, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1576)) - _1553;
        float _1594 = inversesqrt(dot(vec3(_1588, _1589, _1590), vec3(_1588, _1589, _1590)));
        float _1607 = ((_1594 * _1588) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1545 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1608 = ((_1594 * _1589) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1549 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1609 = ((_1594 * _1590) / cbModelParam._m0[35u].z) + ((((((_1553 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1611 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1607, _1608, _1609), 0.0);
        vec4 _1618 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1607, _1608, _1609), 0.0);
        vec4 _1625 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1607, _1608, _1609), 0.0);
        vec4 _1632 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1607, _1608, _1609), 0.0);
        float _1644 = exp2((_1611.w + (-0.5)) * 20.0) * 2.0;
        float _1645 = _1644 * (_1611.x + (-0.5));
        float _1646 = _1644 * (_1611.y + (-0.5));
        float _1647 = _1644 * (_1611.z + (-0.5));
        float _1654 = exp2((_1618.w + (-0.5)) * 20.0) * 2.0;
        float _1655 = _1654 * (_1618.x + (-0.5));
        float _1656 = _1654 * (_1618.y + (-0.5));
        float _1657 = _1654 * (_1618.z + (-0.5));
        float _1664 = exp2((_1625.w + (-0.5)) * 20.0) * 2.0;
        float _1665 = _1664 * (_1625.x + (-0.5));
        float _1666 = _1664 * (_1625.y + (-0.5));
        float _1667 = _1664 * (_1625.z + (-0.5));
        float _1674 = exp2((_1632.w + (-0.5)) * 20.0) * 2.0;
        float _1675 = _1674 * (_1632.x + (-0.5));
        float _1676 = _1674 * (_1632.y + (-0.5));
        float _1677 = _1674 * (_1632.z + (-0.5));
        float _1678 = isnan(0.0) ? _1675 : (isnan(_1675) ? 0.0 : max(_1675, 0.0));
        float _1679 = isnan(0.0) ? _1676 : (isnan(_1676) ? 0.0 : max(_1676, 0.0));
        float _1680 = isnan(0.0) ? _1677 : (isnan(_1677) ? 0.0 : max(_1677, 0.0));
        float _1681 = _1645 * 0.5;
        float _1682 = _1655 * 0.5;
        float _1683 = _1665 * 0.5;
        float _1684 = dot(vec3(_1681, _1682, _1683), vec3(_1681, _1682, _1683));
        float _1689 = (_1684 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1684);
        float _1697 = (dot(vec3(_944, _945, _946), vec3(_1689 * _1681, _1689 * _1682, _1689 * _1683)) + 1.0) * 0.5;
        float _4260 = isnan(0.0) ? _1697 : (isnan(_1697) ? 0.0 : max(_1697, 0.0));
        float _1706 = sqrt(((_1682 * _1682) + (_1681 * _1681)) + (_1683 * _1683)) / (_1678 + 9.9999997473787516355514526367188e-06);
        float _4271 = isnan(0.0) ? _1706 : (isnan(_1706) ? 0.0 : max(_1706, 0.0));
        float _1707 = isnan(1.0) ? _4271 : (isnan(_4271) ? 1.0 : min(_4271, 1.0));
        float _1708 = _1707 * 2.0;
        float _1712 = (1.0 - _1707) / (_1707 + 1.0);
        float _4282 = isnan(0.0) ? _1712 : (isnan(_1712) ? 0.0 : max(_1712, 0.0));
        float _1713 = isnan(1.0) ? _4282 : (isnan(_4282) ? 1.0 : min(_4282, 1.0));
        float _1722 = ((((1.0 - _1713) * (_1708 + 2.0)) * exp2(log2(isnan(1.0) ? _4260 : (isnan(_4260) ? 1.0 : min(_4260, 1.0))) * (_1708 + 1.0))) + _1713) * _1678;
        float _1723 = _1646 * 0.5;
        float _1724 = _1656 * 0.5;
        float _1725 = _1666 * 0.5;
        float _1726 = dot(vec3(_1723, _1724, _1725), vec3(_1723, _1724, _1725));
        float _1731 = (_1726 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1726);
        float _1739 = (dot(vec3(_944, _945, _946), vec3(_1731 * _1723, _1731 * _1724, _1731 * _1725)) + 1.0) * 0.5;
        float _4293 = isnan(0.0) ? _1739 : (isnan(_1739) ? 0.0 : max(_1739, 0.0));
        float _1748 = sqrt(((_1724 * _1724) + (_1723 * _1723)) + (_1725 * _1725)) / (_1679 + 9.9999997473787516355514526367188e-06);
        float _4304 = isnan(0.0) ? _1748 : (isnan(_1748) ? 0.0 : max(_1748, 0.0));
        float _1749 = isnan(1.0) ? _4304 : (isnan(_4304) ? 1.0 : min(_4304, 1.0));
        float _1750 = _1749 * 2.0;
        float _1754 = (1.0 - _1749) / (_1749 + 1.0);
        float _4315 = isnan(0.0) ? _1754 : (isnan(_1754) ? 0.0 : max(_1754, 0.0));
        float _1755 = isnan(1.0) ? _4315 : (isnan(_4315) ? 1.0 : min(_4315, 1.0));
        float _1764 = ((((1.0 - _1755) * (_1750 + 2.0)) * exp2(log2(isnan(1.0) ? _4293 : (isnan(_4293) ? 1.0 : min(_4293, 1.0))) * (_1750 + 1.0))) + _1755) * _1679;
        float _1765 = _1647 * 0.5;
        float _1766 = _1657 * 0.5;
        float _1767 = _1667 * 0.5;
        float _1768 = dot(vec3(_1765, _1766, _1767), vec3(_1765, _1766, _1767));
        float _1773 = (_1768 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1768);
        float _1781 = (dot(vec3(_944, _945, _946), vec3(_1773 * _1765, _1773 * _1766, _1773 * _1767)) + 1.0) * 0.5;
        float _4326 = isnan(0.0) ? _1781 : (isnan(_1781) ? 0.0 : max(_1781, 0.0));
        float _1790 = sqrt(((_1766 * _1766) + (_1765 * _1765)) + (_1767 * _1767)) / (_1680 + 9.9999997473787516355514526367188e-06);
        float _4337 = isnan(0.0) ? _1790 : (isnan(_1790) ? 0.0 : max(_1790, 0.0));
        float _1791 = isnan(1.0) ? _4337 : (isnan(_4337) ? 1.0 : min(_4337, 1.0));
        float _1792 = _1791 * 2.0;
        float _1796 = (1.0 - _1791) / (_1791 + 1.0);
        float _4348 = isnan(0.0) ? _1796 : (isnan(_1796) ? 0.0 : max(_1796, 0.0));
        float _1797 = isnan(1.0) ? _4348 : (isnan(_4348) ? 1.0 : min(_4348, 1.0));
        float _1806 = ((((1.0 - _1797) * (_1792 + 2.0)) * exp2(log2(isnan(1.0) ? _4326 : (isnan(_4326) ? 1.0 : min(_4326, 1.0))) * (_1792 + 1.0))) + _1797) * _1680;
        _1814 = _1647;
        _1815 = _1646;
        _1816 = _1645;
        _1817 = _1657;
        _1818 = _1656;
        _1819 = _1655;
        _1820 = _1667;
        _1821 = _1666;
        _1822 = _1665;
        _1823 = _1680;
        _1824 = _1679;
        _1825 = _1678;
        _1826 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1722 : (isnan(_1722) ? 0.0 : max(_1722, 0.0)));
        _1827 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1764 : (isnan(_1764) ? 0.0 : max(_1764, 0.0)));
        _1828 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1806 : (isnan(_1806) ? 0.0 : max(_1806, 0.0)));
    }
    else
    {
        _1814 = _1504;
        _1815 = _1504;
        _1816 = _1504;
        _1817 = _1504;
        _1818 = _1504;
        _1819 = _1504;
        _1820 = _1504;
        _1821 = _1504;
        _1822 = _1504;
        _1823 = _1504;
        _1824 = _1504;
        _1825 = _1504;
        _1826 = 0.0;
        _1827 = 0.0;
        _1828 = 0.0;
    }
    float _1838 = (cbModelParam._m0[1u].x * (_1826 - _1516)) + _1516;
    float _1839 = (cbModelParam._m0[1u].x * (_1827 - _1517)) + _1517;
    float _1840 = (cbModelParam._m0[1u].x * (_1828 - _1518)) + _1518;
    float _1861 = fma(_1840, cbSceneParam._m0[89u].z, fma(_1839, cbSceneParam._m0[89u].y, _1838 * cbSceneParam._m0[89u].x));
    float _1864 = fma(_1840, cbSceneParam._m0[90u].z, fma(_1839, cbSceneParam._m0[90u].y, _1838 * cbSceneParam._m0[90u].x));
    float _1867 = fma(_1840, cbSceneParam._m0[91u].z, fma(_1839, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1838));
    float _1882 = _1113 * 0.5;
    float _1883 = _1114 * 0.5;
    float _1884 = _1115 * 0.5;
    float _1885 = dot(vec4(_1882, _1883, _1884, 1.0), vec4(_1816, _1819, _1822, _1825));
    float _1888 = dot(vec4(_1882, _1883, _1884, 1.0), vec4(_1815, _1818, _1821, _1824));
    float _1891 = dot(vec4(_1882, _1883, _1884, 1.0), vec4(_1814, _1817, _1820, _1823));
    float _1925;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1898 = dot(vec4(_1882, _1883, _1884, 1.0), vec4(_1503, _1507, _1510, _1513));
        float _1902 = dot(vec4(_1882, _1883, _1884, 1.0), vec4(_1505, _1508, _1511, _1514));
        float _1906 = dot(vec4(_1882, _1883, _1884, 1.0), vec4(_1506, _1509, _1512, _1515));
        float _1913 = dot(vec4(cbModelParam._m0[39u]), vec4(_1882, _1883, _1884, 1.0));
        _1925 = dot(vec3(isnan(0.0) ? _1906 : (isnan(_1906) ? 0.0 : max(_1906, 0.0)), isnan(0.0) ? _1902 : (isnan(_1902) ? 0.0 : max(_1902, 0.0)), isnan(0.0) ? _1898 : (isnan(_1898) ? 0.0 : max(_1898, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1913) ? 0.0 : (isnan(0.0) ? _1913 : max(0.0, _1913))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1925 = 1.0;
    }
    float _1936;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1927 = dot(vec4(cbModelParam._m0[40u]), vec4(_1882, _1883, _1884, 1.0));
        _1936 = dot(vec3(isnan(0.0) ? _1885 : (isnan(_1885) ? 0.0 : max(_1885, 0.0)), isnan(0.0) ? _1888 : (isnan(_1888) ? 0.0 : max(_1888, 0.0)), isnan(0.0) ? _1891 : (isnan(_1891) ? 0.0 : max(_1891, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1927) ? 0.0 : (isnan(0.0) ? _1927 : max(0.0, _1927))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1936 = 1.0;
    }
    float _1940 = (_1936 * cbModelParam._m0[1u].x) + (_1925 * (1.0 - cbModelParam._m0[1u].x));
    float _1950 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _947);
    float _1951 = isnan(_1950) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1950 : min(cbModelParam._m0[25u].z, _1950));
    float _2032;
    float _2034;
    float _2036;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1999 = fma(_1174, cbModelParam._m0[13u].z, fma(_1170, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1166)) + cbModelParam._m0[13u].w;
        float _2003 = fma(_1174, cbModelParam._m0[14u].z, fma(_1170, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1166)) + cbModelParam._m0[14u].w;
        float _2007 = fma(_1174, cbModelParam._m0[15u].z, fma(_1170, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1166)) + cbModelParam._m0[15u].w;
        float _2010 = fma(_1115, cbModelParam._m0[13u].z, fma(_1114, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1113));
        float _2013 = fma(_1115, cbModelParam._m0[14u].z, fma(_1114, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1113));
        float _2016 = fma(_1115, cbModelParam._m0[15u].z, fma(_1114, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1113));
        float _2044;
        if (_2010 > 0.0)
        {
            _2044 = abs((1.0 - _1999) / _2010);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_2010 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1999 + 1.0) / _2010);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _2044 = frontier_phi_17_15_ladder;
        }
        float _2245;
        if (_2013 > 0.0)
        {
            _2245 = abs((1.0 - _2003) / _2013);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_2013 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_2003 + 1.0) / _2013);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2245 = frontier_phi_26_22_ladder;
        }
        float _2488;
        if (_2016 > 0.0)
        {
            _2488 = abs((1.0 - _2007) / _2016);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_2016 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_2007 + 1.0) / _2016);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2488 = frontier_phi_38_33_ladder;
        }
        float _2490 = isnan(_2245) ? _2044 : (isnan(_2044) ? _2245 : min(_2044, _2245));
        float _2491 = isnan(_2488) ? _2490 : (isnan(_2490) ? _2488 : min(_2490, _2488));
        float _2495 = (_2491 * _2010) + _1999;
        float _2496 = (_2491 * _2013) + _2003;
        float _2497 = (_2491 * _2016) + _2007;
        float _2498 = _2491 * 9.9999997473787516355514526367188e-05;
        float _2500 = (-1.0) - _2498;
        float _2502 = _2498 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2497 > _2502) || ((_2497 < _2500) || ((_2496 > _2502) || ((_2496 < _2500) || ((_2495 < _2500) || (_2495 > _2502))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2621 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2497, cbModelParam._m0[9u].z, fma(_2496, cbModelParam._m0[9u].y, _2495 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2497, cbModelParam._m0[10u].z, fma(_2496, cbModelParam._m0[10u].y, _2495 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2497, cbModelParam._m0[11u].z, fma(_2496, cbModelParam._m0[11u].y, _2495 * cbModelParam._m0[11u].x))), _1951);
            frontier_phi_16_38_ladder = _2621.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2621.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2621.x * cbModelParam._m0[1u].y;
        }
        _2032 = frontier_phi_16_38_ladder_2;
        _2034 = frontier_phi_16_38_ladder_1;
        _2036 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _2020 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1113, _1114, _1115), _1951);
        _2032 = _2020.x * cbModelParam._m0[1u].y;
        _2034 = _2020.y * cbModelParam._m0[1u].y;
        _2036 = _2020.z * cbModelParam._m0[1u].y;
    }
    float _2040 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _947);
    float _2041 = isnan(_2040) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2040 : min(cbModelParam._m0[25u].w, _2040));
    float _2131;
    float _2133;
    float _2135;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2095 = fma(_1174, cbModelParam._m0[21u].z, fma(_1170, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1166)) + cbModelParam._m0[21u].w;
        float _2099 = fma(_1174, cbModelParam._m0[22u].z, fma(_1170, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1166)) + cbModelParam._m0[22u].w;
        float _2103 = fma(_1174, cbModelParam._m0[23u].z, fma(_1170, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1166)) + cbModelParam._m0[23u].w;
        float _2106 = fma(_1115, cbModelParam._m0[21u].z, fma(_1114, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1113));
        float _2109 = fma(_1115, cbModelParam._m0[22u].z, fma(_1114, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1113));
        float _2112 = fma(_1115, cbModelParam._m0[23u].z, fma(_1114, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1113));
        float _2250;
        if (_2106 > 0.0)
        {
            _2250 = abs((1.0 - _2095) / _2106);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_2106 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_2095 + 1.0) / _2106);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2250 = frontier_phi_28_24_ladder;
        }
        float _2515;
        if (_2109 > 0.0)
        {
            _2515 = abs((1.0 - _2099) / _2109);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_2109 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_2099 + 1.0) / _2109);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2515 = frontier_phi_40_35_ladder;
        }
        float _2720;
        if (_2112 > 0.0)
        {
            _2720 = abs((1.0 - _2103) / _2112);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_2112 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_2103 + 1.0) / _2112);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2720 = frontier_phi_49_46_ladder;
        }
        float _2722 = isnan(_2515) ? _2250 : (isnan(_2250) ? _2515 : min(_2250, _2515));
        float _2723 = isnan(_2720) ? _2722 : (isnan(_2722) ? _2720 : min(_2722, _2720));
        float _2727 = (_2723 * _2106) + _2095;
        float _2728 = (_2723 * _2109) + _2099;
        float _2729 = (_2723 * _2112) + _2103;
        float _2730 = _2723 * 9.9999997473787516355514526367188e-05;
        float _2731 = (-1.0) - _2730;
        float _2733 = _2730 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2729 > _2733) || ((_2729 < _2731) || ((_2728 > _2733) || ((_2728 < _2731) || ((_2727 < _2731) || (_2727 > _2733))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2928 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2729, cbModelParam._m0[17u].z, fma(_2728, cbModelParam._m0[17u].y, _2727 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2729, cbModelParam._m0[18u].z, fma(_2728, cbModelParam._m0[18u].y, _2727 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2729, cbModelParam._m0[19u].z, fma(_2728, cbModelParam._m0[19u].y, _2727 * cbModelParam._m0[19u].x))), _2041);
            frontier_phi_25_49_ladder = _2928.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2928.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2928.x * cbModelParam._m0[1u].z;
        }
        _2131 = frontier_phi_25_49_ladder_2;
        _2133 = frontier_phi_25_49_ladder_1;
        _2135 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _2115 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1113, _1114, _1115), _2041);
        _2131 = _2115.x * cbModelParam._m0[1u].z;
        _2133 = _2115.y * cbModelParam._m0[1u].z;
        _2135 = _2115.z * cbModelParam._m0[1u].z;
    }
    float _2147 = ((((1.0 - _1134) * ((_1121 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_1134 * _1121)) * _1105;
    float _2148 = _2147 * ((cbModelParam._m0[1u].w * (_2131 - _2032)) + _2032);
    float _2149 = _2147 * ((cbModelParam._m0[1u].w * (_2133 - _2034)) + _2034);
    float _2150 = _2147 * ((cbModelParam._m0[1u].w * (_2135 - _2036)) + _2036);
    float _2153 = fma(_2150, cbSceneParam._m0[89u].z, fma(_2149, cbSceneParam._m0[89u].y, _2148 * cbSceneParam._m0[89u].x));
    float _2156 = fma(_2150, cbSceneParam._m0[90u].z, fma(_2149, cbSceneParam._m0[90u].y, _2148 * cbSceneParam._m0[90u].x));
    float _2159 = fma(_2150, cbSceneParam._m0[91u].z, fma(_2149, cbSceneParam._m0[91u].y, _2148 * cbSceneParam._m0[91u].x));
    uvec4 _2169 = floatBitsToUint(cbInstanceData._m0[_287 + 5u]);
    uint _2171 = _2169.x * 14u;
    uint _2172 = _2171 + 13u;
    float _2179 = _1105 + (-1.0);
    float _2184 = (cbLight._m0[_2172].x * _2179) + 1.0;
    float _2185 = (cbLight._m0[_2172].y * _2179) + 1.0;
    float _2186 = (cbLight._m0[_2172].z * _2179) + 1.0;
    float _2187 = (cbLight._m0[_2172].w * _2179) + 1.0;
    uint _2188 = _2171 + 5u;
    float _2194 = isnan(1.0) ? _2185 : (isnan(_2185) ? 1.0 : min(_2185, 1.0));
    uint _2198 = _2171 + 4u;
    float _2204 = isnan(1.0) ? _2184 : (isnan(_2184) ? 1.0 : min(_2184, 1.0));
    uint _2208 = _2171 | 1u;
    float _2219 = dot(vec3(cbLight._m0[_2171].xyz), vec3(_944, _945, _946));
    float _2222 = dot(vec3(cbLight._m0[_2208].xyz), vec3(_944, _945, _946));
    float _4484 = isnan(0.0) ? _2219 : (isnan(_2219) ? 0.0 : max(_2219, 0.0));
    float _4495 = isnan(0.0) ? _2222 : (isnan(_2222) ? 0.0 : max(_2222, 0.0));
    float _2227 = (isnan(1.0) ? _4484 : (isnan(_4484) ? 1.0 : min(_4484, 1.0))) * 0.3183098733425140380859375;
    float _2229 = (isnan(1.0) ? _4495 : (isnan(_4495) ? 1.0 : min(_4495, 1.0))) * 0.3183098733425140380859375;
    float _2236 = ((cbLight._m0[_2188].x * _2194) * _2229) + ((cbLight._m0[_2198].x * _2204) * _2227);
    float _2237 = ((_2194 * cbLight._m0[_2188].y) * _2229) + ((_2204 * cbLight._m0[_2198].y) * _2227);
    float _2238 = ((_2194 * cbLight._m0[_2188].z) * _2229) + ((_2204 * cbLight._m0[_2198].z) * _2227);
    uvec4 _2242 = floatBitsToUint(cbLight._m0[_2171 + 12u]);
    bool _2244 = _2242.x == 0u;
    float _2255;
    float _2257;
    float _2259;
    if (_2244)
    {
        _2255 = _2236;
        _2257 = _2237;
        _2259 = _2238;
    }
    else
    {
        uint _2263 = _2171 + 6u;
        float _2279 = (dot(vec3(cbLight._m0[_2171 + 2u].xyz), vec3(_944, _945, _946)) * 0.5) + 0.5;
        float _2280 = _2279 * _2279;
        float _4506 = isnan(0.0) ? _2280 : (isnan(_2280) ? 0.0 : max(_2280, 0.0));
        float _2281 = isnan(1.0) ? _4506 : (isnan(_4506) ? 1.0 : min(_4506, 1.0));
        float _2282 = isnan(1.0) ? _2186 : (isnan(_2186) ? 1.0 : min(_2186, 1.0));
        _2255 = (((cbLight._m0[_2263].x * 0.3183098733425140380859375) * _2281) * _2282) + _2236;
        _2257 = (((cbLight._m0[_2263].y * 0.3183098733425140380859375) * _2281) * _2282) + _2237;
        _2259 = (((cbLight._m0[_2263].z * 0.3183098733425140380859375) * _2281) * _2282) + _2238;
    }
    bool _2262 = _2242.y == 0u;
    float _2300;
    float _2302;
    float _2304;
    if (_2262)
    {
        _2300 = _2255;
        _2302 = _2257;
        _2304 = _2259;
    }
    else
    {
        uint _2459 = _2171 + 7u;
        float _2475 = (dot(vec3(cbLight._m0[_2171 + 3u].xyz), vec3(_944, _945, _946)) * 0.5) + 0.5;
        float _2476 = _2475 * _2475;
        float _4522 = isnan(0.0) ? _2476 : (isnan(_2476) ? 0.0 : max(_2476, 0.0));
        float _2477 = isnan(1.0) ? _4522 : (isnan(_4522) ? 1.0 : min(_4522, 1.0));
        float _2478 = isnan(1.0) ? _2187 : (isnan(_2187) ? 1.0 : min(_2187, 1.0));
        _2300 = (((cbLight._m0[_2459].x * 0.3183098733425140380859375) * _2477) * _2478) + _2255;
        _2302 = (((cbLight._m0[_2459].y * 0.3183098733425140380859375) * _2477) * _2478) + _2257;
        _2304 = (((cbLight._m0[_2459].z * 0.3183098733425140380859375) * _2477) * _2478) + _2259;
    }
    uint _2307 = _2171 + 8u;
    float _2320 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2171].w)) * _947) * 0.949999988079071044921875);
    float _2321 = _2320 * _2320;
    float _2322 = cbLight._m0[_2171].x + _1022;
    float _2323 = cbLight._m0[_2171].y + _1023;
    float _2324 = cbLight._m0[_2171].z + _1024;
    float _2328 = inversesqrt(dot(vec3(_2322, _2323, _2324), vec3(_2322, _2323, _2324)));
    float _2329 = _2328 * _2322;
    float _2330 = _2328 * _2323;
    float _2331 = _2328 * _2324;
    float _2332 = dot(vec3(_944, _945, _946), vec3(cbLight._m0[_2171].xyz));
    float _4538 = isnan(0.0) ? _2332 : (isnan(_2332) ? 0.0 : max(_2332, 0.0));
    float _2335 = isnan(1.0) ? _4538 : (isnan(_4538) ? 1.0 : min(_4538, 1.0));
    float _4549 = isnan(0.0) ? _1106 : (isnan(_1106) ? 0.0 : max(_1106, 0.0));
    float _2336 = isnan(1.0) ? _4549 : (isnan(_4549) ? 1.0 : min(_4549, 1.0));
    float _2337 = dot(vec3(_944, _945, _946), vec3(_2329, _2330, _2331));
    float _4560 = isnan(0.0) ? _2337 : (isnan(_2337) ? 0.0 : max(_2337, 0.0));
    float _2340 = isnan(1.0) ? _4560 : (isnan(_4560) ? 1.0 : min(_4560, 1.0));
    float _2341 = dot(vec3(cbLight._m0[_2171].xyz), vec3(_2329, _2330, _2331));
    float _4571 = isnan(0.0) ? _2341 : (isnan(_2341) ? 0.0 : max(_2341, 0.0));
    float _2345 = _2321 * _2321;
    float _2349 = ((_2340 * _2340) * (_2345 + (-1.0))) + 1.0;
    float _2360 = (exp2(log2(1.0 - (isnan(1.0) ? _4571 : (isnan(_4571) ? 1.0 : min(_4571, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2361 = 1.0 - _2321;
    float _2372 = (0.5 / (((_2336 * ((_2335 * _2361) + _2321)) + 9.9999999392252902907785028219223e-09) + (((_2336 * _2361) + _2321) * _2335))) * _2335;
    float _4582 = isnan(0.0) ? _2372 : (isnan(_2372) ? 0.0 : max(_2372, 0.0));
    float _2374 = (isnan(1.0) ? _4582 : (isnan(_4582) ? 1.0 : min(_4582, 1.0))) * (_2345 / ((_2349 * _2349) * 3.141590118408203125));
    uint _2385 = _2171 + 9u;
    float _2396 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2208].w)) * _947) * 0.949999988079071044921875);
    float _2397 = _2396 * _2396;
    float _2398 = cbLight._m0[_2208].x + _1022;
    float _2399 = cbLight._m0[_2208].y + _1023;
    float _2400 = cbLight._m0[_2208].z + _1024;
    float _2404 = inversesqrt(dot(vec3(_2398, _2399, _2400), vec3(_2398, _2399, _2400)));
    float _2405 = _2404 * _2398;
    float _2406 = _2404 * _2399;
    float _2407 = _2404 * _2400;
    float _2408 = dot(vec3(_944, _945, _946), vec3(cbLight._m0[_2208].xyz));
    float _4593 = isnan(0.0) ? _2408 : (isnan(_2408) ? 0.0 : max(_2408, 0.0));
    float _2411 = isnan(1.0) ? _4593 : (isnan(_4593) ? 1.0 : min(_4593, 1.0));
    float _2412 = dot(vec3(_944, _945, _946), vec3(_2405, _2406, _2407));
    float _4604 = isnan(0.0) ? _2412 : (isnan(_2412) ? 0.0 : max(_2412, 0.0));
    float _2415 = isnan(1.0) ? _4604 : (isnan(_4604) ? 1.0 : min(_4604, 1.0));
    float _2416 = dot(vec3(cbLight._m0[_2208].xyz), vec3(_2405, _2406, _2407));
    float _4615 = isnan(0.0) ? _2416 : (isnan(_2416) ? 0.0 : max(_2416, 0.0));
    float _2420 = _2397 * _2397;
    float _2424 = ((_2415 * _2415) * (_2420 + (-1.0))) + 1.0;
    float _2433 = (exp2(log2(1.0 - (isnan(1.0) ? _4615 : (isnan(_4615) ? 1.0 : min(_4615, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2434 = 1.0 - _2397;
    float _2444 = (0.5 / (((_2336 * ((_2411 * _2434) + _2397)) + 9.9999999392252902907785028219223e-09) + (((_2336 * _2434) + _2397) * _2411))) * _2411;
    float _4626 = isnan(0.0) ? _2444 : (isnan(_2444) ? 0.0 : max(_2444, 0.0));
    float _2446 = (isnan(1.0) ? _4626 : (isnan(_4626) ? 1.0 : min(_4626, 1.0))) * (_2420 / ((_2424 * _2424) * 3.141590118408203125));
    float _2456 = (((_2433 * cbLight._m0[_2385].x) * _2446) * _2194) + (((_2360 * cbLight._m0[_2307].x) * _2374) * _2204);
    float _2457 = (((_2433 * cbLight._m0[_2385].y) * _2446) * _2194) + (((_2360 * cbLight._m0[_2307].y) * _2374) * _2204);
    float _2458 = (((_2433 * cbLight._m0[_2385].z) * _2446) * _2194) + (((_2360 * cbLight._m0[_2307].z) * _2374) * _2204);
    float _2520;
    float _2522;
    float _2524;
    if (_2244)
    {
        _2520 = _2456;
        _2522 = _2457;
        _2524 = _2458;
    }
    else
    {
        uint _2526 = _2171 + 2u;
        uint _2530 = _2171 + 10u;
        float _2544 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2526].w)) * _947) * 0.949999988079071044921875);
        float _2545 = _2544 * _2544;
        float _2546 = cbLight._m0[_2526].x + _1022;
        float _2547 = cbLight._m0[_2526].y + _1023;
        float _2548 = cbLight._m0[_2526].z + _1024;
        float _2552 = inversesqrt(dot(vec3(_2546, _2547, _2548), vec3(_2546, _2547, _2548)));
        float _2553 = _2552 * _2546;
        float _2554 = _2552 * _2547;
        float _2555 = _2552 * _2548;
        float _2556 = dot(vec3(_944, _945, _946), vec3(cbLight._m0[_2526].xyz));
        float _4637 = isnan(0.0) ? _2556 : (isnan(_2556) ? 0.0 : max(_2556, 0.0));
        float _2559 = isnan(1.0) ? _4637 : (isnan(_4637) ? 1.0 : min(_4637, 1.0));
        float _2560 = dot(vec3(_944, _945, _946), vec3(_2553, _2554, _2555));
        float _4648 = isnan(0.0) ? _2560 : (isnan(_2560) ? 0.0 : max(_2560, 0.0));
        float _2563 = isnan(1.0) ? _4648 : (isnan(_4648) ? 1.0 : min(_4648, 1.0));
        float _2564 = dot(vec3(cbLight._m0[_2526].xyz), vec3(_2553, _2554, _2555));
        float _4659 = isnan(0.0) ? _2564 : (isnan(_2564) ? 0.0 : max(_2564, 0.0));
        float _2568 = _2545 * _2545;
        float _2572 = ((_2563 * _2563) * (_2568 + (-1.0))) + 1.0;
        float _2581 = (exp2(log2(1.0 - (isnan(1.0) ? _4659 : (isnan(_4659) ? 1.0 : min(_4659, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2582 = 1.0 - _2545;
        float _2592 = (0.5 / (((_2336 * ((_2559 * _2582) + _2545)) + 9.9999999392252902907785028219223e-09) + (((_2336 * _2582) + _2545) * _2559))) * _2559;
        float _4670 = isnan(0.0) ? _2592 : (isnan(_2592) ? 0.0 : max(_2592, 0.0));
        float _2594 = (isnan(1.0) ? _4670 : (isnan(_4670) ? 1.0 : min(_4670, 1.0))) * (_2568 / ((_2572 * _2572) * 3.141590118408203125));
        float _2595 = isnan(1.0) ? _2186 : (isnan(_2186) ? 1.0 : min(_2186, 1.0));
        _2520 = (((_2581 * cbLight._m0[_2530].x) * _2594) * _2595) + _2456;
        _2522 = (((_2581 * cbLight._m0[_2530].y) * _2594) * _2595) + _2457;
        _2524 = (((_2581 * cbLight._m0[_2530].z) * _2594) * _2595) + _2458;
    }
    float _2630;
    float _2632;
    float _2634;
    if (_2262)
    {
        _2630 = _2520;
        _2632 = _2522;
        _2634 = _2524;
    }
    else
    {
        uint _2641 = _2171 + 3u;
        uint _2645 = _2171 + 11u;
        float _2659 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2641].w)) * _947) * 0.949999988079071044921875);
        float _2660 = _2659 * _2659;
        float _2661 = cbLight._m0[_2641].x + _1022;
        float _2662 = cbLight._m0[_2641].y + _1023;
        float _2663 = cbLight._m0[_2641].z + _1024;
        float _2667 = inversesqrt(dot(vec3(_2661, _2662, _2663), vec3(_2661, _2662, _2663)));
        float _2668 = _2667 * _2661;
        float _2669 = _2667 * _2662;
        float _2670 = _2667 * _2663;
        float _2671 = dot(vec3(_944, _945, _946), vec3(cbLight._m0[_2641].xyz));
        float _4686 = isnan(0.0) ? _2671 : (isnan(_2671) ? 0.0 : max(_2671, 0.0));
        float _2674 = isnan(1.0) ? _4686 : (isnan(_4686) ? 1.0 : min(_4686, 1.0));
        float _2675 = dot(vec3(_944, _945, _946), vec3(_2668, _2669, _2670));
        float _4697 = isnan(0.0) ? _2675 : (isnan(_2675) ? 0.0 : max(_2675, 0.0));
        float _2678 = isnan(1.0) ? _4697 : (isnan(_4697) ? 1.0 : min(_4697, 1.0));
        float _2679 = dot(vec3(cbLight._m0[_2641].xyz), vec3(_2668, _2669, _2670));
        float _4708 = isnan(0.0) ? _2679 : (isnan(_2679) ? 0.0 : max(_2679, 0.0));
        float _2683 = _2660 * _2660;
        float _2687 = ((_2678 * _2678) * (_2683 + (-1.0))) + 1.0;
        float _2696 = (exp2(log2(1.0 - (isnan(1.0) ? _4708 : (isnan(_4708) ? 1.0 : min(_4708, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2697 = 1.0 - _2660;
        float _2707 = (0.5 / (((_2336 * ((_2674 * _2697) + _2660)) + 9.9999999392252902907785028219223e-09) + (((_2336 * _2697) + _2660) * _2674))) * _2674;
        float _4719 = isnan(0.0) ? _2707 : (isnan(_2707) ? 0.0 : max(_2707, 0.0));
        float _2709 = (isnan(1.0) ? _4719 : (isnan(_4719) ? 1.0 : min(_4719, 1.0))) * (_2683 / ((_2687 * _2687) * 3.141590118408203125));
        float _2710 = isnan(1.0) ? _2187 : (isnan(_2187) ? 1.0 : min(_2187, 1.0));
        _2630 = (((_2696 * cbLight._m0[_2645].x) * _2709) * _2710) + _2520;
        _2632 = (((_2696 * cbLight._m0[_2645].y) * _2709) * _2710) + _2522;
        _2634 = (((_2696 * cbLight._m0[_2645].z) * _2709) * _2710) + _2524;
    }
    float _2845;
    float _2847;
    float _2849;
    float _2851;
    float _2853;
    float _2855;
    if (_2169.y == 0u)
    {
        float _2785 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2786 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2785;
        float _2787 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2785;
        float _2788 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2785;
        uvec4 _2800 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2801 = _2800.x;
        uint _2812 = uint((float(_2800.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1043) / _2801))) + floor(float(uint(cbSceneParam._m0[85u].x * _1042) / _2801)));
        float _2822 = (log2(_2788 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2823 = isnan(0.0) ? _2822 : (isnan(_2822) ? 0.0 : max(_2822, 0.0));
        uint _2826 = uint(isnan(14.0) ? _2823 : (isnan(_2823) ? 14.0 : min(_2823, 14.0)));
        uvec4 _2831 = texelFetch(g_lightClusterGridBuffer, int(((_2826 << 2u) + (_2812 << 6u)) >> 2u));
        uint _2832 = _2831.x;
        uint _2833 = _2800.z;
        float _2933;
        float _2935;
        float _2937;
        float _2939;
        float _2941;
        float _2943;
        if (((((1u << ((_2833 >> 4u) & 15u)) + 4294967295u) & _2832) == 0u) || ((_2833 & 240u) == 0u))
        {
            _2933 = 0.0;
            _2935 = 0.0;
            _2937 = 0.0;
            _2939 = 0.0;
            _2941 = 0.0;
            _2943 = 0.0;
        }
        else
        {
            float _2934;
            float _2936;
            float _2938;
            float _2940;
            float _2942;
            float _2944;
            float _3086 = 0.0;
            float _3087 = 0.0;
            float _3088 = 0.0;
            float _3089 = 0.0;
            float _3090 = 0.0;
            float _3091 = 0.0;
            uint _3092 = 0u;
            uint _3101;
            bool _3102;
            for (;;)
            {
                _3101 = texelFetch(g_lightClassification, int((((_2826 << 5u) + (_2812 << 9u)) + (_3092 << 2u)) >> 2u)).x;
                _3102 = _3101 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3102)
                {
                    frontier_phi_66_pred = _3086;
                    frontier_phi_66_pred_1 = _3091;
                    frontier_phi_66_pred_2 = _3090;
                    frontier_phi_66_pred_3 = _3089;
                    frontier_phi_66_pred_4 = _3088;
                    frontier_phi_66_pred_5 = _3087;
                }
                else
                {
                    float _3231;
                    float _3232;
                    float _3233;
                    float _3234;
                    float _3235;
                    float _3236;
                    uint _3237;
                    _3231 = _3086;
                    _3232 = _3087;
                    _3233 = _3088;
                    _3234 = _3089;
                    _3235 = _3090;
                    _3236 = _3091;
                    _3237 = _3101;
                    float _3158;
                    float _3159;
                    float _3160;
                    float _3161;
                    float _3162;
                    float _3163;
                    for (;;)
                    {
                        uint _3241 = uint(findLSB(_3237)) + (_3092 << 5u);
                        uint _3238 = (_3237 + 4294967295u) & _3237;
                        uint _3243 = _3241 * 48u;
                        vec4 _3257 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3243)).x, texelFetch(g_PointLightRenderingBuffer, int(_3243 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3243 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3243 + 3u)).x));
                        uint _3263 = (_3241 * 48u) + 4u;
                        vec4 _3276 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3263)).x, texelFetch(g_PointLightRenderingBuffer, int(_3263 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3263 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3263 + 3u)).x));
                        uint _3282 = (_3241 * 48u) + 8u;
                        vec3 _3293 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3282)).x, texelFetch(g_PointLightRenderingBuffer, int(_3282 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3282 + 2u)).x));
                        float _3297 = _3257.x - _2786;
                        float _3298 = _3257.y - _2787;
                        float _3299 = _3257.z - _2788;
                        float _3300 = dot(vec3(_3297, _3298, _3299), vec3(_3297, _3298, _3299));
                        float _3303 = inversesqrt(_3300);
                        float _3304 = _3303 * _3297;
                        float _3305 = _3303 * _3298;
                        float _3306 = _3303 * _3299;
                        float _3307 = dot(vec3(_1061, _1064, _1067), vec3(_3304, _3305, _3306));
                        float _3312 = 1.0 - (_3300 * _3257.w);
                        float _4745 = isnan(0.0) ? _3312 : (isnan(_3312) ? 0.0 : max(_3312, 0.0));
                        float _3313 = isnan(1.0) ? _4745 : (isnan(_4745) ? 1.0 : min(_4745, 1.0));
                        float _3314 = sqrt(_3300) * _3276.w;
                        float _3317 = 1.39999997615814208984375 / (_3314 + 1.39999997615814208984375);
                        float _3318 = _3317 * _3317;
                        float _3321 = ((1.0 - _3318) * _3307) + _3318;
                        float _3324 = _3314 * _3314;
                        float _3328 = ((isnan(0.0) ? _3321 : (isnan(_3321) ? 0.0 : max(_3321, 0.0))) * _3313) / ((_3324 * 0.699999988079071044921875) + 1.0);
                        float _3332 = (-0.0) - _2786;
                        float _3333 = (-0.0) - _2787;
                        float _3334 = (-0.0) - _2788;
                        float _3338 = inversesqrt(dot(vec3(_3332, _3333, _3334), vec3(_3332, _3333, _3334)));
                        float _3339 = _3338 * _3332;
                        float _3340 = _3338 * _3333;
                        float _3341 = _3338 * _3334;
                        float _3349 = exp2(log2(1.0 / ((_3324 * 3.5) + 5.0)) * 0.25);
                        float _3350 = 1.0 - _1121;
                        float _3357 = sqrt(1.0 - ((1.0 - (_3350 * _3350)) * (1.0 - (_3349 * _3349))));
                        float _3358 = _3357 * _3357;
                        float _3359 = _3358 * _3358;
                        float _3360 = _3339 + _3304;
                        float _3361 = _3340 + _3305;
                        float _3362 = _3341 + _3306;
                        float _3366 = inversesqrt(dot(vec3(_3360, _3361, _3362), vec3(_3360, _3361, _3362)));
                        float _3370 = dot(vec3(_1061, _1064, _1067), vec3(_3339, _3340, _3341));
                        float _4761 = isnan(0.0) ? _3370 : (isnan(_3370) ? 0.0 : max(_3370, 0.0));
                        float _3373 = isnan(1.0) ? _4761 : (isnan(_4761) ? 1.0 : min(_4761, 1.0));
                        float _3374 = dot(vec3(_1061, _1064, _1067), vec3(_3366 * _3360, _3366 * _3361, _3366 * _3362));
                        float _4772 = isnan(0.0) ? _3374 : (isnan(_3374) ? 0.0 : max(_3374, 0.0));
                        float _3377 = isnan(1.0) ? _4772 : (isnan(_4772) ? 1.0 : min(_4772, 1.0));
                        float _3381 = ((_3377 * _3377) * (_3359 + (-1.0))) + 1.0;
                        float _3382 = _3317 * _3358;
                        float _3383 = _3382 * _3382;
                        float _3386 = ((1.0 - _3383) * _3307) + _3383;
                        float _4783 = isnan(0.0) ? _3386 : (isnan(_3386) ? 0.0 : max(_3386, 0.0));
                        float _3387 = isnan(1.0) ? _4783 : (isnan(_4783) ? 1.0 : min(_4783, 1.0));
                        float _3388 = 1.0 - _3358;
                        float _3398 = (0.5 / (((_3387 * ((_3373 * _3388) + _3358)) + 9.9999999392252902907785028219223e-09) + (((_3387 * _3388) + _3358) * _3373))) * _3387;
                        float _4794 = isnan(0.0) ? _3398 : (isnan(_3398) ? 0.0 : max(_3398, 0.0));
                        float _3409 = (((_3359 * 3.1415927410125732421875) * (isnan(1.0) ? _4794 : (isnan(_4794) ? 1.0 : min(_4794, 1.0)))) / ((_3381 * _3381) * ((_3324 * 2.1991131305694580078125) + 3.141590118408203125))) * _3313;
                        _3161 = (_3328 * _3276.x) + _3234;
                        _3162 = (_3328 * _3276.y) + _3235;
                        _3163 = (_3328 * _3276.z) + _3236;
                        _3158 = (_3409 * _3293.x) + _3231;
                        _3159 = (_3409 * _3293.y) + _3232;
                        _3160 = (_3409 * _3293.z) + _3233;
                        if (_3238 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3231 = _3158;
                            _3232 = _3159;
                            _3233 = _3160;
                            _3234 = _3161;
                            _3235 = _3162;
                            _3236 = _3163;
                            _3237 = _3238;
                        }
                    }
                    frontier_phi_66_pred = _3158;
                    frontier_phi_66_pred_1 = _3163;
                    frontier_phi_66_pred_2 = _3162;
                    frontier_phi_66_pred_3 = _3161;
                    frontier_phi_66_pred_4 = _3160;
                    frontier_phi_66_pred_5 = _3159;
                }
                _2934 = frontier_phi_66_pred;
                _2944 = frontier_phi_66_pred_1;
                _2942 = frontier_phi_66_pred_2;
                _2940 = frontier_phi_66_pred_3;
                _2938 = frontier_phi_66_pred_4;
                _2936 = frontier_phi_66_pred_5;
                uint _3093 = _3092 + 1u;
                if (_3093 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3086 = _2934;
                    _3087 = _2936;
                    _3088 = _2938;
                    _3089 = _2940;
                    _3090 = _2942;
                    _3091 = _2944;
                    _3092 = _3093;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2933 = _2934;
            _2935 = _2936;
            _2937 = _2938;
            _2939 = _2940;
            _2941 = _2942;
            _2943 = _2944;
        }
        uvec4 _2947 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2948 = _2947.z;
        uint _2950 = (_2948 >> 8u) & 15u;
        float _3054;
        float _3056;
        float _3058;
        float _3060;
        float _3062;
        float _3064;
        if (((4294967295u << _2950) & _2832) == 0u)
        {
            _3054 = _2933;
            _3056 = _2935;
            _3058 = _2937;
            _3060 = _2939;
            _3062 = _2941;
            _3064 = _2943;
        }
        else
        {
            float _3079 = inversesqrt(dot(vec3(_2786, _2787, _2788), vec3(_2786, _2787, _2788)));
            float _3080 = _3079 * _2786;
            float _3081 = _3079 * _2787;
            float _3082 = _3079 * _2788;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2950 < ((_2948 >> 12u) & 15u))
            {
                float _3055;
                float _3057;
                float _3059;
                float _3061;
                float _3063;
                float _3065;
                float _3214 = _2933;
                float _3215 = _2935;
                float _3216 = _2937;
                float _3217 = _2939;
                float _3218 = _2941;
                float _3219 = _2943;
                uint _3220 = _2950;
                uint _3229;
                bool _3230;
                for (;;)
                {
                    _3229 = texelFetch(g_lightClassification, int((((_2826 << 5u) + (_2812 << 9u)) + (_3220 << 2u)) >> 2u)).x;
                    _3230 = _3229 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_3230)
                    {
                        frontier_phi_77_pred = _3219;
                        frontier_phi_77_pred_1 = _3218;
                        frontier_phi_77_pred_2 = _3217;
                        frontier_phi_77_pred_3 = _3216;
                        frontier_phi_77_pred_4 = _3215;
                        frontier_phi_77_pred_5 = _3214;
                    }
                    else
                    {
                        float _3423;
                        float _3424;
                        float _3425;
                        float _3426;
                        float _3427;
                        float _3428;
                        float _3716;
                        float _3717;
                        float _3718;
                        float _3719;
                        float _3720;
                        float _3721;
                        float _3436 = _3214;
                        float _3437 = _3215;
                        float _3438 = _3216;
                        float _3439 = _3217;
                        float _3440 = _3218;
                        float _3441 = _3219;
                        uint _3442 = _3229;
                        uint _3443;
                        vec4 _3468;
                        float _3469;
                        vec4 _3484;
                        vec3 _3496;
                        vec4 _3511;
                        vec4 _3526;
                        float _3572;
                        bool _3573;
                        for (;;)
                        {
                            uint _3453 = ((_3220 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3442));
                            _3443 = (_3442 + 4294967295u) & _3442;
                            uint _3455 = _3453 * 40u;
                            _3468 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3455)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3455 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3455 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3455 + 3u)).x));
                            _3469 = _3468.w;
                            uint _3471 = (_3453 * 40u) + 4u;
                            _3484 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3471)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3471 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3471 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3471 + 3u)).x));
                            uint _3486 = (_3453 * 40u) + 8u;
                            _3496 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3486)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3486 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3486 + 2u)).x));
                            uint _3498 = (_3453 * 40u) + 16u;
                            _3511 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3498)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3498 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3498 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3498 + 3u)).x));
                            uint _3513 = (_3453 * 40u) + 20u;
                            _3526 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3513)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3513 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3513 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3513 + 3u)).x));
                            uint _3528 = (_3453 * 40u) + 24u;
                            vec4 _3541 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3528)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3528 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3528 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3528 + 3u)).x));
                            uint _3547 = (_3453 * 40u) + 28u;
                            vec4 _3560 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3547)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3547 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3547 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3547 + 3u)).x));
                            _3572 = fma(_2788, _3560.z, fma(_2787, _3560.y, _3560.x * _2786)) + _3560.w;
                            _3573 = !((fma(_2788, _3541.z, fma(_2787, _3541.y, _3541.x * _2786)) + _3541.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3573)
                            {
                                float _3600 = _3468.x - _2786;
                                float _3601 = _3468.y - _2787;
                                float _3602 = _3468.z - _2788;
                                float _3603 = dot(vec3(_3600, _3601, _3602), vec3(_3600, _3601, _3602));
                                float _3606 = inversesqrt(_3603);
                                float _3607 = _3606 * _3600;
                                float _3608 = _3606 * _3601;
                                float _3609 = _3606 * _3602;
                                float _3613 = 1.0 - (_3603 / (_3469 * _3469));
                                float _4805 = isnan(0.0) ? _3613 : (isnan(_3613) ? 0.0 : max(_3613, 0.0));
                                float _3614 = isnan(1.0) ? _4805 : (isnan(_4805) ? 1.0 : min(_4805, 1.0));
                                float _3618 = sqrt(_3603) * _3484.w;
                                float _3620 = 1.39999997615814208984375 / (_3618 + 1.39999997615814208984375);
                                float _3621 = _3620 * _3620;
                                float _3624 = ((1.0 - _3621) * dot(vec3(_3607, _3608, _3609), vec3(_1061, _1064, _1067))) + _3621;
                                float _3627 = _3618 * _3618;
                                float _3631 = (fma(_2788, _3511.z, fma(_2787, _3511.y, _3511.x * _2786)) + _3511.w) / _3572;
                                float _3632 = (fma(_2788, _3526.z, fma(_2787, _3526.y, _3526.x * _2786)) + _3526.w) / _3572;
                                float _3636 = 1.0 - dot(vec2(_3631, _3632), vec2(_3631, _3632));
                                float _4821 = isnan(0.0) ? _3636 : (isnan(_3636) ? 0.0 : max(_3636, 0.0));
                                float _3637 = isnan(1.0) ? _4821 : (isnan(_4821) ? 1.0 : min(_4821, 1.0));
                                float _3638 = _3637 * (((isnan(0.0) ? _3624 : (isnan(_3624) ? 0.0 : max(_3624, 0.0))) * _3614) / ((_3627 * 0.699999988079071044921875) + 1.0));
                                float _3650 = exp2(log2(1.0 / ((_3627 * 3.5) + 5.0)) * 0.25);
                                float _3651 = 1.0 - _1121;
                                float _3658 = sqrt(1.0 - ((1.0 - (_3651 * _3651)) * (1.0 - (_3650 * _3650))));
                                float _3659 = _3658 * _3658;
                                float _3660 = _3659 * _3659;
                                float _3661 = _3607 - _3080;
                                float _3662 = _3608 - _3081;
                                float _3663 = _3609 - _3082;
                                float _3667 = inversesqrt(dot(vec3(_3661, _3662, _3663), vec3(_3661, _3662, _3663)));
                                float _3671 = dot(vec3(_1061, _1064, _1067), vec3((-0.0) - _3080, (-0.0) - _3081, (-0.0) - _3082));
                                float _4832 = isnan(0.0) ? _3671 : (isnan(_3671) ? 0.0 : max(_3671, 0.0));
                                float _3674 = isnan(1.0) ? _4832 : (isnan(_4832) ? 1.0 : min(_4832, 1.0));
                                float _3675 = dot(vec3(_1061, _1064, _1067), vec3(_3667 * _3661, _3667 * _3662, _3667 * _3663));
                                float _4843 = isnan(0.0) ? _3675 : (isnan(_3675) ? 0.0 : max(_3675, 0.0));
                                float _3678 = isnan(1.0) ? _4843 : (isnan(_4843) ? 1.0 : min(_4843, 1.0));
                                float _3682 = ((_3678 * _3678) * (_3660 + (-1.0))) + 1.0;
                                float _3683 = _3620 * _3659;
                                float _3684 = _3683 * _3683;
                                float _3690 = ((1.0 - _3684) * dot(vec3(_1061, _1064, _1067), vec3(_3607, _3608, _3609))) + _3684;
                                float _4854 = isnan(0.0) ? _3690 : (isnan(_3690) ? 0.0 : max(_3690, 0.0));
                                float _3691 = isnan(1.0) ? _4854 : (isnan(_4854) ? 1.0 : min(_4854, 1.0));
                                float _3692 = 1.0 - _3659;
                                float _3702 = (0.5 / (((_3691 * ((_3674 * _3692) + _3659)) + 9.9999999392252902907785028219223e-09) + (((_3691 * _3692) + _3659) * _3674))) * _3691;
                                float _4865 = isnan(0.0) ? _3702 : (isnan(_3702) ? 0.0 : max(_3702, 0.0));
                                float _3712 = (_3637 * _3614) * (((_3660 * 3.1415927410125732421875) * (isnan(1.0) ? _4865 : (isnan(_4865) ? 1.0 : min(_4865, 1.0)))) / ((_3682 * _3682) * ((_3627 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3638 * _3484.y;
                                frontier_phi_83_pred_1 = _3638 * _3484.x;
                                frontier_phi_83_pred_2 = _3712 * _3496.z;
                                frontier_phi_83_pred_3 = _3712 * _3496.y;
                                frontier_phi_83_pred_4 = _3712 * _3496.x;
                                frontier_phi_83_pred_5 = _3638 * _3484.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3720 = frontier_phi_83_pred;
                            _3719 = frontier_phi_83_pred_1;
                            _3718 = frontier_phi_83_pred_2;
                            _3717 = frontier_phi_83_pred_3;
                            _3716 = frontier_phi_83_pred_4;
                            _3721 = frontier_phi_83_pred_5;
                            _3426 = _3719 + _3439;
                            _3427 = _3720 + _3440;
                            _3428 = _3721 + _3441;
                            _3423 = _3716 + _3436;
                            _3424 = _3717 + _3437;
                            _3425 = _3718 + _3438;
                            if (_3443 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3436 = _3423;
                                _3437 = _3424;
                                _3438 = _3425;
                                _3439 = _3426;
                                _3440 = _3427;
                                _3441 = _3428;
                                _3442 = _3443;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3428;
                        frontier_phi_77_pred_1 = _3427;
                        frontier_phi_77_pred_2 = _3426;
                        frontier_phi_77_pred_3 = _3425;
                        frontier_phi_77_pred_4 = _3424;
                        frontier_phi_77_pred_5 = _3423;
                    }
                    _3065 = frontier_phi_77_pred;
                    _3063 = frontier_phi_77_pred_1;
                    _3061 = frontier_phi_77_pred_2;
                    _3059 = frontier_phi_77_pred_3;
                    _3057 = frontier_phi_77_pred_4;
                    _3055 = frontier_phi_77_pred_5;
                    uint _3221 = _3220 + 1u;
                    if (_3221 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3214 = _3055;
                        _3215 = _3057;
                        _3216 = _3059;
                        _3217 = _3061;
                        _3218 = _3063;
                        _3219 = _3065;
                        _3220 = _3221;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _3059;
                frontier_phi_58_59_ladder_1 = _3065;
                frontier_phi_58_59_ladder_2 = _3063;
                frontier_phi_58_59_ladder_3 = _3061;
                frontier_phi_58_59_ladder_4 = _3057;
                frontier_phi_58_59_ladder_5 = _3055;
            }
            else
            {
                frontier_phi_58_59_ladder = _2937;
                frontier_phi_58_59_ladder_1 = _2943;
                frontier_phi_58_59_ladder_2 = _2941;
                frontier_phi_58_59_ladder_3 = _2939;
                frontier_phi_58_59_ladder_4 = _2935;
                frontier_phi_58_59_ladder_5 = _2933;
            }
            _3054 = frontier_phi_58_59_ladder_5;
            _3056 = frontier_phi_58_59_ladder_4;
            _3058 = frontier_phi_58_59_ladder;
            _3060 = frontier_phi_58_59_ladder_3;
            _3062 = frontier_phi_58_59_ladder_2;
            _3064 = frontier_phi_58_59_ladder_1;
        }
        float _3069 = isnan(1.0) ? _1105 : (isnan(_1105) ? 1.0 : min(_1105, 1.0));
        _2845 = (_3069 * _3060) + _2300;
        _2847 = (_3069 * _3062) + _2302;
        _2849 = (_3069 * _3064) + _2304;
        _2851 = ((_3054 * 0.039999999105930328369140625) * _3069) + _2630;
        _2853 = ((_3056 * 0.039999999105930328369140625) * _3069) + _2632;
        _2855 = ((_3058 * 0.039999999105930328369140625) * _3069) + _2634;
    }
    else
    {
        _2845 = _2300;
        _2847 = _2302;
        _2849 = _2304;
        _2851 = _2630;
        _2853 = _2632;
        _2855 = _2634;
    }
    float _4881 = isnan(0.0) ? _1090 : (isnan(_1090) ? 0.0 : max(_1090, 0.0));
    float _4892 = isnan(0.0) ? _1091 : (isnan(_1091) ? 0.0 : max(_1091, 0.0));
    float _4903 = isnan(0.0) ? _1092 : (isnan(_1092) ? 0.0 : max(_1092, 0.0));
    float _2872 = ((isnan(1.0) ? _4881 : (isnan(_4881) ? 1.0 : min(_4881, 1.0))) * (_2845 + ((isnan(0.0) ? _1861 : (isnan(_1861) ? 0.0 : max(_1861, 0.0))) * _1105))) + ((_2851 + ((isnan(0.0) ? _2153 : (isnan(_2153) ? 0.0 : max(_2153, 0.0))) * _1940)) * cbPerFrame._m0[3u].x);
    float _2873 = ((isnan(1.0) ? _4892 : (isnan(_4892) ? 1.0 : min(_4892, 1.0))) * (_2847 + ((isnan(0.0) ? _1864 : (isnan(_1864) ? 0.0 : max(_1864, 0.0))) * _1105))) + ((_2853 + ((isnan(0.0) ? _2156 : (isnan(_2156) ? 0.0 : max(_2156, 0.0))) * _1940)) * cbPerFrame._m0[3u].x);
    float _2874 = ((isnan(1.0) ? _4903 : (isnan(_4903) ? 1.0 : min(_4903, 1.0))) * (_2849 + ((isnan(0.0) ? _1867 : (isnan(_1867) ? 0.0 : max(_1867, 0.0))) * _1105))) + ((_2855 + ((isnan(0.0) ? _2159 : (isnan(_2159) ? 0.0 : max(_2159, 0.0))) * _1940)) * cbPerFrame._m0[3u].x);
    uint _2875 = _287 + 6u;
    float _2883 = _1042 / cbSceneParam._m0[86u].x;
    float _2884 = _1043 / cbSceneParam._m0[86u].y;
    vec4 _2898 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2883, _2884, (log2((isnan(cbSceneParam._m0[77u].w) ? _965 : (isnan(_965) ? cbSceneParam._m0[77u].w : min(_965, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2900 = _2898.x;
    float _2901 = _2898.y;
    float _2902 = _2898.z;
    float _2903 = _2898.w;
    float _2996;
    float _2998;
    float _3000;
    float _3002;
    if (_965 > cbSceneParam._m0[78u].w)
    {
        float _2958 = isnan(_965) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _965 : min(cbSceneParam._m0[80u].w, _965));
        float _2959 = _2958 / _965;
        float _2970 = _2959 * _1015;
        float _2971 = _1016 * _2959;
        float _2972 = (-0.0) - _2971;
        float _2974 = _2959 * _1017;
        float _2976 = (cbSceneParam._m0[77u].w * _2972) / _2958;
        float _2977 = _2976 + cbSceneParam._m0[79u].w;
        float _2978 = cbSceneParam._m0[79u].w - _2971;
        float _2984 = sqrt(((_2970 * _2970) + (_2971 * _2971)) + (_2974 * _2974));
        float _2987 = (1.0 - (cbSceneParam._m0[77u].w / _2958)) * _2984;
        float _2992 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2994 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3171;
        if (abs((_2972 - _2976) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3171 = ((((_2977 > 0.0) ? exp2(_2992 * _2977) : (2.0 - exp2(_2994 * _2977))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2987;
        }
        else
        {
            float _3115 = 1.0 / cbSceneParam._m0[80u].x;
            float _3116 = isnan(_2978) ? _2977 : (isnan(_2977) ? _2978 : max(_2977, _2978));
            float _3117 = isnan(_2978) ? _2977 : (isnan(_2977) ? _2978 : min(_2977, _2978));
            float _3126 = isnan(0.0) ? _3116 : (isnan(_3116) ? 0.0 : min(_3116, 0.0));
            float _3127 = isnan(0.0) ? _3117 : (isnan(_3117) ? 0.0 : min(_3117, 0.0));
            _3171 = ((abs(_2984 / _2972) * cbSceneParam._m0[80u].y) * ((((_3126 - _3127) * 2.0) - ((exp2(_2992 * (isnan(0.0) ? _3116 : (isnan(_3116) ? 0.0 : max(_3116, 0.0)))) - exp2(_2992 * (isnan(0.0) ? _3117 : (isnan(_3117) ? 0.0 : max(_3117, 0.0))))) * _3115)) - ((exp2(_2994 * _3126) - exp2(_2994 * _3127)) * _3115))) + (_2987 * cbSceneParam._m0[80u].z);
        }
        vec4 _3173 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2883, _2884, 1.0), 0.0);
        float _3182 = exp2((_3171 * (-1.44269502162933349609375)) * (1.0 - _3173.w));
        float _3183 = log2(_3182);
        float _3199 = log2(_2903);
        _2996 = (exp2(_3199 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3183 * cbSceneParam._m0[78u].x)) * _3173.x) / cbSceneParam._m0[78u].x)) + _2900;
        _2998 = (exp2(_3199 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3183 * cbSceneParam._m0[78u].y)) * _3173.y) / cbSceneParam._m0[78u].y)) + _2901;
        _3000 = (exp2(_3199 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3183 * cbSceneParam._m0[78u].z)) * _3173.z) / cbSceneParam._m0[78u].z)) + _2902;
        _3002 = _3182 * _2903;
    }
    else
    {
        _2996 = _2900;
        _2998 = _2901;
        _3000 = _2902;
        _3002 = _2903;
    }
    bool _3209;
    vec4 _3012;
    vec4 _3034;
    float _3036;
    float _3040;
    float _3041;
    float _3042;
    float _3043;
    bool _3053;
    for (;;)
    {
        _3012 = cbMatDynParam._m0[0u];
        float _3014 = roundEven(_3012.y);
        bool _3015 = _3014 == 3.0;
        float _3016 = log2(_3002);
        float _3023 = exp2(_3016 * cbSceneParam._m0[78u].x) * _2872;
        float _3024 = exp2(_3016 * cbSceneParam._m0[78u].y) * _2873;
        float _3025 = exp2(_3016 * cbSceneParam._m0[78u].z) * _2874;
        float _3032 = _1031 + (-0.5);
        _3034 = cbMtdParam._m0[1u];
        _3036 = _3034.y * _3032;
        float _3039 = (_3014 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3040 = _3039 * (_3015 ? _3023 : (_3023 + (cbSceneParam._m0[72u].w * _2996)));
        _3041 = _3039 * (_3015 ? _3024 : (_3024 + (cbSceneParam._m0[72u].w * _2998)));
        _3042 = _3039 * (_3015 ? _3025 : (_3025 + (cbSceneParam._m0[72u].w * _3000)));
        _3043 = _3032 * 0.999000012874603271484375;
        _3053 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3053)
        {
            if ((cbInstanceData._m0[_287 + 7u].x + _3043) < 0.5)
            {
                _3209 = true;
                break;
            }
        }
        uint _3150 = _1080 + uint(_3012.w);
        if ((cbInstanceData._m0[_3150].w < 1.0) && ((cbInstanceData._m0[_3150].w + _3043) < 0.5))
        {
            _3209 = true;
            break;
        }
        if ((_3036 + 1.0) < _3034.x)
        {
            _3209 = true;
            break;
        }
        _3209 = false;
        break;
    }
    float _3414;
    if (_3209)
    {
        discard_state = true;
        _3414 = 0.0;
    }
    else
    {
        _3414 = cbInstanceData._m0[_2875].w;
    }
    SV_Target.x = _3040;
    SV_Target.y = _3041;
    SV_Target.z = _3042;
    SV_Target.w = _3414;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2875].w;
    discard_exit();
}


