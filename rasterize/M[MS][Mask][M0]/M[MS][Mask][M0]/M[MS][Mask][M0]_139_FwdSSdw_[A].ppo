#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_0;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 13) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_22;
layout(set = 0, binding = 14) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_29;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_10;
layout(set = 0, binding = 20) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_6;
layout(set = 0, binding = 23) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_8;
layout(set = 0, binding = 24) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_9;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1650;
float _4030;
float _4031;
float _4032;
float _4033;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _250 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _251 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _252 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _258 = inversesqrt(dot(vec3(_250, _251, _252), vec3(_250, _251, _252)));
    float _265 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _272 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _284 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _286 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _287 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _4042 = isnan(0.0) ? _284 : (isnan(_284) ? 0.0 : max(_284, 0.0));
    float _4053 = isnan(0.0) ? _286 : (isnan(_286) ? 0.0 : max(_286, 0.0));
    float _4064 = isnan(0.0) ? _287 : (isnan(_287) ? 0.0 : max(_287, 0.0));
    uint _297 = uint(roundEven(NORMAL.w)) * 13u;
    uint _302 = _297 + 1u;
    uint _306 = _297 + 2u;
    float _315 = sqrt(((cbInstanceData._m0[_302].x * cbInstanceData._m0[_302].x) + (cbInstanceData._m0[_297].x * cbInstanceData._m0[_297].x)) + (cbInstanceData._m0[_306].x * cbInstanceData._m0[_306].x));
    float _316 = _315 * TEXCOORD.z;
    float _317 = _315 * TEXCOORD.w;
    vec4 _330 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _316) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _317) + cbTextureTilingScale._m0[13u].w));
    vec4 _353 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _379 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _384 = _379.x * cbMtdParam._m0[11u].x;
    float _385 = _379.y * cbMtdParam._m0[11u].y;
    float _386 = _379.z * cbMtdParam._m0[11u].z;
    vec4 _405 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _316) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _317) + cbTextureTilingScale._m0[5u].w));
    vec4 _424 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _462 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _464 = _462.x;
    float _476 = dot(vec4(_464, _462.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _493 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _424.x) * 2.0) - ((((_464 - _476) * cbMtdParam._m0[24u].z) + _476) * cbMtdParam._m0[23u].x))) + 1.0;
    float _4075 = isnan(0.0) ? _493 : (isnan(_493) ? 0.0 : max(_493, 0.0));
    float _494 = isnan(1.0) ? _4075 : (isnan(_4075) ? 1.0 : min(_4075, 1.0));
    float _501 = (_494 * ((_405.x * cbMtdParam._m0[12u].x) - _384)) + _384;
    float _502 = (_494 * ((_405.y * cbMtdParam._m0[12u].y) - _385)) + _385;
    float _503 = (_494 * ((_405.z * cbMtdParam._m0[12u].z) - _386)) + _386;
    vec4 _520 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _316) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _317) + cbTextureTilingScale._m0[3u].w));
    vec4 _540 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _542 = _540.x;
    float _552 = dot(vec4(_542, _540.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _566 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _424.y) * 2.0) - ((((_542 - _552) * cbMtdParam._m0[24u].z) + _552) * cbMtdParam._m0[20u].w))) + 1.0;
    float _4086 = isnan(0.0) ? _566 : (isnan(_566) ? 0.0 : max(_566, 0.0));
    float _567 = isnan(1.0) ? _4086 : (isnan(_4086) ? 1.0 : min(_4086, 1.0));
    float _574 = (_567 * ((_520.x * cbMtdParam._m0[13u].x) - _501)) + _501;
    float _575 = (_567 * ((_520.y * cbMtdParam._m0[13u].y) - _502)) + _502;
    float _576 = (_567 * ((_520.z * cbMtdParam._m0[13u].z) - _503)) + _503;
    vec4 _594 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_9, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[24u].x * _316) + cbTextureTilingScale._m0[24u].z, (cbTextureTilingScale._m0[24u].y * _317) + cbTextureTilingScale._m0[24u].w));
    vec4 _611 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[25u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _613 = _611.x;
    float _623 = dot(vec4(_613, _611.yzw), vec4(cbMtdParam._m0[30u].w, cbMtdParam._m0[31u].xy, 0.0));
    float _635 = ((cbMtdParam._m0[25u].x * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.z) - _424.z) * 2.0) - ((((_613 - _623) * cbMtdParam._m0[24u].z) + _623) * cbMtdParam._m0[20u].z))) + 1.0;
    float _4097 = isnan(0.0) ? _635 : (isnan(_635) ? 0.0 : max(_635, 0.0));
    float _636 = isnan(1.0) ? _4097 : (isnan(_4097) ? 1.0 : min(_4097, 1.0));
    float _646 = (_353.x * cbMtdParam._m0[9u].x) * ((_636 * ((_594.x * cbMtdParam._m0[14u].x) - _574)) + _574);
    float _647 = (_353.y * cbMtdParam._m0[9u].y) * ((_636 * ((_594.y * cbMtdParam._m0[14u].y) - _575)) + _575);
    float _648 = (_353.z * cbMtdParam._m0[9u].z) * ((_636 * ((_594.z * cbMtdParam._m0[14u].z) - _576)) + _576);
    float _652 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _330.x) * _646;
    float _655 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _330.y) * _647;
    float _658 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _330.z) * _648;
    float _666 = (((_646 - _652) * (isnan(1.0) ? _4042 : (isnan(_4042) ? 1.0 : min(_4042, 1.0)))) + _652) * 4.55000019073486328125;
    float _668 = (((_647 - _655) * (isnan(1.0) ? _4053 : (isnan(_4053) ? 1.0 : min(_4053, 1.0)))) + _655) * 4.55000019073486328125;
    float _670 = (((_648 - _658) * (isnan(1.0) ? _4064 : (isnan(_4064) ? 1.0 : min(_4064, 1.0)))) + _658) * 4.55000019073486328125;
    vec4 _688 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _316) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _317) + cbTextureTilingScale._m0[14u].w));
    vec4 _707 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _316) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _317) + cbTextureTilingScale._m0[20u].w));
    vec4 _730 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _316) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _317) + cbTextureTilingScale._m0[4u].w));
    vec4 _747 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _749 = _747.x;
    float _750 = _747.y;
    float _751 = _747.z;
    float _758 = ((_730.x - _749) * _494) + _749;
    float _759 = ((_730.y - _750) * _494) + _750;
    float _760 = ((_730.z - _751) * _494) + _751;
    vec4 _772 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _316) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _317) + cbTextureTilingScale._m0[2u].w));
    float _783 = ((_772.x - _758) * _567) + _758;
    float _784 = ((_772.y - _759) * _567) + _759;
    float _785 = ((_772.z - _760) * _567) + _760;
    vec4 _797 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[23u].x * _316) + cbTextureTilingScale._m0[23u].z, (cbTextureTilingScale._m0[23u].y * _317) + cbTextureTilingScale._m0[23u].w));
    float _810 = ((_797.z - _785) * _636) + _785;
    float _813 = ((((_797.x - _783) * _636) + _783) * 2.0) + (-1.0);
    float _814 = ((((_797.y - _784) * _636) + _784) * 2.0) + (-1.0);
    float _815 = dot(vec2(_813, _814), vec2(_813, _814));
    float _4108 = isnan(0.0) ? _815 : (isnan(_815) ? 0.0 : max(_815, 0.0));
    float _820 = sqrt(1.0 - (isnan(1.0) ? _4108 : (isnan(_4108) ? 1.0 : min(_4108, 1.0))));
    vec4 _834 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _859 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _316) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _317) + cbTextureTilingScale._m0[11u].w));
    float _861 = _859.x;
    float _862 = 1.0 - _861;
    float _868 = isnan(-1.0) ? cbMtdParam._m0[24u].x : (isnan(cbMtdParam._m0[24u].x) ? (-1.0) : max(cbMtdParam._m0[24u].x, -1.0));
    float _871 = ((isnan(0.0) ? _868 : (isnan(_868) ? 0.0 : min(_868, 0.0))) * TEXCOORD_8.x) + TEXCOORD_8.w;
    float _880 = (_871 - ((((((_861 - _862) * cbMtdParam._m0[24u].w) + _862) + 0.00999999977648258209228515625) * cbMtdParam._m0[21u].z) * (1.0 - _871))) * (cbMtdParam._m0[21u].w + 1.0);
    float _4129 = isnan(0.0) ? _880 : (isnan(_880) ? 0.0 : max(_880, 0.0));
    float _881 = isnan(1.0) ? _4129 : (isnan(_4129) ? 1.0 : min(_4129, 1.0));
    float _888 = (_881 * ((_688.x * cbMtdParam._m0[18u].x) - _666)) + _666;
    float _889 = (_881 * ((_688.y * cbMtdParam._m0[18u].y) - _668)) + _668;
    float _890 = (_881 * ((_688.z * cbMtdParam._m0[18u].z) - _670)) + _670;
    float _905 = sqrt(((cbInstanceData._m0[_302].x * cbInstanceData._m0[_302].x) + (cbInstanceData._m0[_297].x * cbInstanceData._m0[_297].x)) + (cbInstanceData._m0[_306].x * cbInstanceData._m0[_306].x));
    float _906 = _905 * TEXCOORD.z;
    float _907 = _905 * TEXCOORD.w;
    vec4 _919 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _906) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _907) + cbTextureTilingScale._m0[19u].w));
    float _921 = _919.x;
    float _922 = 1.0 - _921;
    float _949 = (TEXCOORD_8.x - ((cbMtdParam._m0[22u].w * (1.0 - TEXCOORD_8.x)) * ((((_921 - _922) * cbMtdParam._m0[24u].y) + _922) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _4140 = isnan(0.0) ? _949 : (isnan(_949) ? 0.0 : max(_949, 0.0));
    float _950 = isnan(1.0) ? _4140 : (isnan(_4140) ? 1.0 : min(_4140, 1.0));
    float _958 = ((((cbMtdParam._m0[10u].x - _888) * TEXCOORD_8.x) * cbMtdParam._m0[23u].w) * _950) + _888;
    float _959 = ((((cbMtdParam._m0[10u].y - _889) * TEXCOORD_8.y) * cbMtdParam._m0[23u].w) * _950) + _889;
    float _960 = (((cbMtdParam._m0[23u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _890)) * _950) + _890;
    float _965 = (((_707.z - _810) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _810;
    float _969 = ((_834.z - _965) * cbMtdParam._m0[19u].w) + _965;
    vec4 _983 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _316) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _317) + cbTextureTilingScale._m0[15u].w));
    float _990 = (_983.x * 2.0) + (-1.0);
    float _991 = (_983.y * 2.0) + (-1.0);
    float _992 = dot(vec2(_990, _991), vec2(_990, _991));
    float _4151 = isnan(0.0) ? _992 : (isnan(_992) ? 0.0 : max(_992, 0.0));
    float _1000 = (_881 * (_983.z - _969)) + _969;
    float _1003 = ((cbMtdParam._m0[23u].y - _1000) * _950) + _1000;
    vec4 _1024 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _906) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _907) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _1030 = (_1024.x * 2.0) + (-1.0);
    float _1031 = (_1024.y * 2.0) + (-1.0);
    float _1032 = dot(vec2(_1030, _1031), vec2(_1030, _1031));
    float _4162 = isnan(0.0) ? _1032 : (isnan(_1032) ? 0.0 : max(_1032, 0.0));
    float _1046 = (_813 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_707.x * 2.0) + (-1.0)))) + (((_834.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _1047 = (_814 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_707.y * 2.0) + (-1.0)))) + (((_834.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _1059 = (((_990 - _1046) + (cbMtdParam._m0[21u].x * _1046)) * _881) + _1046;
    float _1060 = (((_991 - _1047) + (cbMtdParam._m0[21u].x * _1047)) * _881) + _1047;
    float _1061 = (_881 * (sqrt(1.0 - (isnan(1.0) ? _4151 : (isnan(_4151) ? 1.0 : min(_4151, 1.0)))) - _820)) + _820;
    float _1072 = (((_1030 - _1059) + (_1059 * cbMtdParam._m0[22u].z)) * _950) + _1059;
    float _1073 = (((_1031 - _1060) + (_1060 * cbMtdParam._m0[22u].z)) * _950) + _1060;
    float _1074 = ((sqrt(1.0 - (isnan(1.0) ? _4162 : (isnan(_4162) ? 1.0 : min(_4162, 1.0)))) - _1061) * _950) + _1061;
    float _1076 = cbMtdParam._m0[22u].x + _834.w;
    float _1079 = fma(_1074, _265 * NORMAL.x, fma(_1073, _272 * TANGENT.x, (_258 * _250) * _1072));
    float _1082 = fma(_1074, _265 * NORMAL.y, fma(_1073, _272 * TANGENT.y, (_258 * _251) * _1072));
    float _1085 = fma(_1074, _265 * NORMAL.z, fma(_1073, _272 * TANGENT.z, (_258 * _252) * _1072));
    float _1089 = inversesqrt(dot(vec3(_1079, _1082, _1085), vec3(_1079, _1082, _1085)));
    float _1090 = _1089 * _1079;
    float _1091 = _1089 * _1082;
    float _1092 = _1089 * _1085;
    float _4173 = isnan(0.0) ? _1003 : (isnan(_1003) ? 0.0 : max(_1003, 0.0));
    float _1093 = isnan(1.0) ? _4173 : (isnan(_4173) ? 1.0 : min(_4173, 1.0));
    float _4184 = isnan(0.0) ? _1076 : (isnan(_1076) ? 0.0 : max(_1076, 0.0));
    float _4195 = isnan(0.0) ? _958 : (isnan(_958) ? 0.0 : max(_958, 0.0));
    float _4206 = isnan(0.0) ? _959 : (isnan(_959) ? 0.0 : max(_959, 0.0));
    float _4217 = isnan(0.0) ? _960 : (isnan(_960) ? 0.0 : max(_960, 0.0));
    float _1111 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _1151 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _1161 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _1151);
    float _1162 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _1151);
    float _1163 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _1151);
    float _1167 = inversesqrt(dot(vec3(_1161, _1162, _1163), vec3(_1161, _1162, _1163)));
    float _1168 = _1161 * _1167;
    float _1169 = _1162 * _1167;
    float _1170 = _1163 * _1167;
    vec4 _1175 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _1177 = _1175.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1331 = sqrt(((_1161 * _1161) + (_1162 * _1162)) + (_1163 * _1163));
        float _1337 = (cbMatDynParam._m0[5u].x * _1331) + cbMatDynParam._m0[5u].y;
        float _4228 = isnan(0.0) ? _1337 : (isnan(_1337) ? 0.0 : max(_1337, 0.0));
        float _1338 = isnan(1.0) ? _4228 : (isnan(_4228) ? 1.0 : min(_4228, 1.0));
        float _1342 = (cbMatDynParam._m0[5u].z * _1331) + cbMatDynParam._m0[5u].w;
        float _4239 = isnan(0.0) ? _1342 : (isnan(_1342) ? 0.0 : max(_1342, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4239 : (isnan(_4239) ? 1.0 : min(_4239, 1.0))) - _1338)) + _1338) < ((_1177 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _1188 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1189 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1207 = fma(_1092, cbSceneParam._m0[5u].z, fma(_1091, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _1090));
    float _1210 = fma(_1092, cbSceneParam._m0[6u].z, fma(_1091, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _1090));
    float _1213 = fma(_1092, cbSceneParam._m0[7u].z, fma(_1091, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _1090));
    uint _1226 = _297 + 9u;
    uint _1227 = _1226 + uint(cbMatDynParam._m0[0u].w);
    float _1233 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4195 : (isnan(_4195) ? 1.0 : min(_4195, 1.0)))) * cbInstanceData._m0[_1227].x;
    float _1234 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4206 : (isnan(_4206) ? 1.0 : min(_4206, 1.0)))) * cbInstanceData._m0[_1227].y;
    float _1235 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4217 : (isnan(_4217) ? 1.0 : min(_4217, 1.0)))) * cbInstanceData._m0[_1227].z;
    float _4250 = isnan(0.0) ? _1233 : (isnan(_1233) ? 0.0 : max(_1233, 0.0));
    float _1236 = isnan(1.0) ? _4250 : (isnan(_4250) ? 1.0 : min(_4250, 1.0));
    float _4261 = isnan(0.0) ? _1234 : (isnan(_1234) ? 0.0 : max(_1234, 0.0));
    float _1237 = isnan(1.0) ? _4261 : (isnan(_4261) ? 1.0 : min(_4261, 1.0));
    float _4272 = isnan(0.0) ? _1235 : (isnan(_1235) ? 0.0 : max(_1235, 0.0));
    float _1238 = isnan(1.0) ? _4272 : (isnan(_4272) ? 1.0 : min(_4272, 1.0));
    vec4 _1247 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1188, cbSceneParam._m0[86u].y * _1189));
    float _1251 = ((isnan(1.0) ? _4184 : (isnan(_4184) ? 1.0 : min(_4184, 1.0))) * TEXCOORD_5.w) * _1247.x;
    float _1252 = dot(vec3(_1090, _1091, _1092), vec3(_1168, _1169, _1170));
    float _1255 = _1252 * 2.0;
    float _1259 = (_1255 * _1090) - _1168;
    float _1260 = (_1255 * _1091) - _1169;
    float _1261 = (_1255 * _1092) - _1170;
    float _1265 = abs(dot(vec3(_1168, _1169, _1170), vec3(_1090, _1091, _1092)));
    float _4283 = isnan(0.0) ? _1265 : (isnan(_1265) ? 0.0 : max(_1265, 0.0));
    float _1267 = sqrt(_1093);
    float _1280 = exp2((_1267 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4283 : (isnan(_4283) ? 1.0 : min(_4283, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1267 * 3.0));
    float _1312 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1316 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1320 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1649;
    float _1651;
    float _1652;
    float _1653;
    float _1654;
    float _1655;
    float _1656;
    float _1657;
    float _1658;
    float _1659;
    float _1660;
    float _1661;
    float _1662;
    float _1663;
    float _1664;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1374 = fma(_1320, cbModelParam._m0[26u].z, fma(_1316, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1312));
        float _1378 = fma(_1320, cbModelParam._m0[27u].z, fma(_1316, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1312));
        float _1382 = fma(_1320, cbModelParam._m0[28u].z, fma(_1316, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1312));
        float _1407 = _1312 + _1090;
        float _1408 = _1316 + _1091;
        float _1409 = _1320 + _1092;
        float _1419 = fma(_1409, cbModelParam._m0[26u].z, fma(_1408, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1407)) - _1374;
        float _1420 = fma(_1409, cbModelParam._m0[27u].z, fma(_1408, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1407)) - _1378;
        float _1421 = fma(_1409, cbModelParam._m0[28u].z, fma(_1408, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1407)) - _1382;
        float _1425 = inversesqrt(dot(vec3(_1419, _1420, _1421), vec3(_1419, _1420, _1421)));
        float _1438 = ((_1425 * _1419) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1374 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1439 = ((_1425 * _1420) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1378 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1440 = ((_1425 * _1421) / cbModelParam._m0[34u].z) + ((((((_1382 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1443 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1438, _1439, _1440), 0.0);
        vec4 _1450 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1438, _1439, _1440), 0.0);
        vec4 _1457 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1438, _1439, _1440), 0.0);
        vec4 _1464 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1438, _1439, _1440), 0.0);
        float _1477 = exp2((_1443.w + (-0.5)) * 20.0) * 2.0;
        float _1478 = _1477 * (_1443.x + (-0.5));
        float _1479 = _1477 * (_1443.y + (-0.5));
        float _1480 = _1477 * (_1443.z + (-0.5));
        float _1487 = exp2((_1450.w + (-0.5)) * 20.0) * 2.0;
        float _1488 = _1487 * (_1450.x + (-0.5));
        float _1489 = _1487 * (_1450.y + (-0.5));
        float _1490 = _1487 * (_1450.z + (-0.5));
        float _1497 = exp2((_1457.w + (-0.5)) * 20.0) * 2.0;
        float _1498 = _1497 * (_1457.x + (-0.5));
        float _1499 = _1497 * (_1457.y + (-0.5));
        float _1500 = _1497 * (_1457.z + (-0.5));
        float _1507 = exp2((_1464.w + (-0.5)) * 20.0) * 2.0;
        float _1508 = _1507 * (_1464.x + (-0.5));
        float _1509 = _1507 * (_1464.y + (-0.5));
        float _1510 = _1507 * (_1464.z + (-0.5));
        float _1511 = isnan(0.0) ? _1508 : (isnan(_1508) ? 0.0 : max(_1508, 0.0));
        float _1512 = isnan(0.0) ? _1509 : (isnan(_1509) ? 0.0 : max(_1509, 0.0));
        float _1513 = isnan(0.0) ? _1510 : (isnan(_1510) ? 0.0 : max(_1510, 0.0));
        float _1514 = _1478 * 0.5;
        float _1515 = _1488 * 0.5;
        float _1516 = _1498 * 0.5;
        float _1517 = dot(vec3(_1514, _1515, _1516), vec3(_1514, _1515, _1516));
        float _1522 = (_1517 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1517);
        float _1531 = (dot(vec3(_1090, _1091, _1092), vec3(_1522 * _1514, _1522 * _1515, _1522 * _1516)) + 1.0) * 0.5;
        float _4309 = isnan(0.0) ? _1531 : (isnan(_1531) ? 0.0 : max(_1531, 0.0));
        float _1541 = sqrt(((_1515 * _1515) + (_1514 * _1514)) + (_1516 * _1516)) / (_1511 + 9.9999997473787516355514526367188e-06);
        float _4320 = isnan(0.0) ? _1541 : (isnan(_1541) ? 0.0 : max(_1541, 0.0));
        float _1542 = isnan(1.0) ? _4320 : (isnan(_4320) ? 1.0 : min(_4320, 1.0));
        float _1543 = _1542 * 2.0;
        float _1547 = (1.0 - _1542) / (_1542 + 1.0);
        float _4331 = isnan(0.0) ? _1547 : (isnan(_1547) ? 0.0 : max(_1547, 0.0));
        float _1548 = isnan(1.0) ? _4331 : (isnan(_4331) ? 1.0 : min(_4331, 1.0));
        float _1557 = ((((1.0 - _1548) * (_1543 + 2.0)) * exp2(log2(isnan(1.0) ? _4309 : (isnan(_4309) ? 1.0 : min(_4309, 1.0))) * (_1543 + 1.0))) + _1548) * _1511;
        float _1558 = _1479 * 0.5;
        float _1559 = _1489 * 0.5;
        float _1560 = _1499 * 0.5;
        float _1561 = dot(vec3(_1558, _1559, _1560), vec3(_1558, _1559, _1560));
        float _1566 = (_1561 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1561);
        float _1574 = (dot(vec3(_1090, _1091, _1092), vec3(_1566 * _1558, _1566 * _1559, _1566 * _1560)) + 1.0) * 0.5;
        float _4342 = isnan(0.0) ? _1574 : (isnan(_1574) ? 0.0 : max(_1574, 0.0));
        float _1583 = sqrt(((_1559 * _1559) + (_1558 * _1558)) + (_1560 * _1560)) / (_1512 + 9.9999997473787516355514526367188e-06);
        float _4353 = isnan(0.0) ? _1583 : (isnan(_1583) ? 0.0 : max(_1583, 0.0));
        float _1584 = isnan(1.0) ? _4353 : (isnan(_4353) ? 1.0 : min(_4353, 1.0));
        float _1585 = _1584 * 2.0;
        float _1589 = (1.0 - _1584) / (_1584 + 1.0);
        float _4364 = isnan(0.0) ? _1589 : (isnan(_1589) ? 0.0 : max(_1589, 0.0));
        float _1590 = isnan(1.0) ? _4364 : (isnan(_4364) ? 1.0 : min(_4364, 1.0));
        float _1599 = ((((1.0 - _1590) * (_1585 + 2.0)) * exp2(log2(isnan(1.0) ? _4342 : (isnan(_4342) ? 1.0 : min(_4342, 1.0))) * (_1585 + 1.0))) + _1590) * _1512;
        float _1600 = _1480 * 0.5;
        float _1601 = _1490 * 0.5;
        float _1602 = _1500 * 0.5;
        float _1603 = dot(vec3(_1600, _1601, _1602), vec3(_1600, _1601, _1602));
        float _1608 = (_1603 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1603);
        float _1616 = (dot(vec3(_1090, _1091, _1092), vec3(_1608 * _1600, _1608 * _1601, _1608 * _1602)) + 1.0) * 0.5;
        float _4375 = isnan(0.0) ? _1616 : (isnan(_1616) ? 0.0 : max(_1616, 0.0));
        float _1625 = sqrt(((_1601 * _1601) + (_1600 * _1600)) + (_1602 * _1602)) / (_1513 + 9.9999997473787516355514526367188e-06);
        float _4386 = isnan(0.0) ? _1625 : (isnan(_1625) ? 0.0 : max(_1625, 0.0));
        float _1626 = isnan(1.0) ? _4386 : (isnan(_4386) ? 1.0 : min(_4386, 1.0));
        float _1627 = _1626 * 2.0;
        float _1631 = (1.0 - _1626) / (_1626 + 1.0);
        float _4397 = isnan(0.0) ? _1631 : (isnan(_1631) ? 0.0 : max(_1631, 0.0));
        float _1632 = isnan(1.0) ? _4397 : (isnan(_4397) ? 1.0 : min(_4397, 1.0));
        float _1641 = ((((1.0 - _1632) * (_1627 + 2.0)) * exp2(log2(isnan(1.0) ? _4375 : (isnan(_4375) ? 1.0 : min(_4375, 1.0))) * (_1627 + 1.0))) + _1632) * _1513;
        _1649 = _1480;
        _1651 = _1479;
        _1652 = _1478;
        _1653 = _1490;
        _1654 = _1489;
        _1655 = _1488;
        _1656 = _1500;
        _1657 = _1499;
        _1658 = _1498;
        _1659 = _1513;
        _1660 = _1512;
        _1661 = _1511;
        _1662 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1557 : (isnan(_1557) ? 0.0 : max(_1557, 0.0)));
        _1663 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1599 : (isnan(_1599) ? 0.0 : max(_1599, 0.0)));
        _1664 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1641 : (isnan(_1641) ? 0.0 : max(_1641, 0.0)));
    }
    else
    {
        _1649 = _1650;
        _1651 = _1650;
        _1652 = _1650;
        _1653 = _1650;
        _1654 = _1650;
        _1655 = _1650;
        _1656 = _1650;
        _1657 = _1650;
        _1658 = _1650;
        _1659 = _1650;
        _1660 = _1650;
        _1661 = _1650;
        _1662 = 0.0;
        _1663 = 0.0;
        _1664 = 0.0;
    }
    float _1959;
    float _1960;
    float _1961;
    float _1962;
    float _1963;
    float _1964;
    float _1965;
    float _1966;
    float _1967;
    float _1968;
    float _1969;
    float _1970;
    float _1971;
    float _1972;
    float _1973;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1690 = fma(_1320, cbModelParam._m0[30u].z, fma(_1316, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1312));
        float _1694 = fma(_1320, cbModelParam._m0[31u].z, fma(_1316, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1312));
        float _1698 = fma(_1320, cbModelParam._m0[32u].z, fma(_1316, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1312));
        float _1721 = _1312 + _1090;
        float _1722 = _1316 + _1091;
        float _1723 = _1320 + _1092;
        float _1733 = fma(_1723, cbModelParam._m0[30u].z, fma(_1722, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1721)) - _1690;
        float _1734 = fma(_1723, cbModelParam._m0[31u].z, fma(_1722, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1721)) - _1694;
        float _1735 = fma(_1723, cbModelParam._m0[32u].z, fma(_1722, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1721)) - _1698;
        float _1739 = inversesqrt(dot(vec3(_1733, _1734, _1735), vec3(_1733, _1734, _1735)));
        float _1752 = ((_1739 * _1733) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1690 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1753 = ((_1739 * _1734) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1694 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1754 = ((_1739 * _1735) / cbModelParam._m0[35u].z) + ((((((_1698 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1756 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1752, _1753, _1754), 0.0);
        vec4 _1763 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1752, _1753, _1754), 0.0);
        vec4 _1770 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1752, _1753, _1754), 0.0);
        vec4 _1777 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1752, _1753, _1754), 0.0);
        float _1789 = exp2((_1756.w + (-0.5)) * 20.0) * 2.0;
        float _1790 = _1789 * (_1756.x + (-0.5));
        float _1791 = _1789 * (_1756.y + (-0.5));
        float _1792 = _1789 * (_1756.z + (-0.5));
        float _1799 = exp2((_1763.w + (-0.5)) * 20.0) * 2.0;
        float _1800 = _1799 * (_1763.x + (-0.5));
        float _1801 = _1799 * (_1763.y + (-0.5));
        float _1802 = _1799 * (_1763.z + (-0.5));
        float _1809 = exp2((_1770.w + (-0.5)) * 20.0) * 2.0;
        float _1810 = _1809 * (_1770.x + (-0.5));
        float _1811 = _1809 * (_1770.y + (-0.5));
        float _1812 = _1809 * (_1770.z + (-0.5));
        float _1819 = exp2((_1777.w + (-0.5)) * 20.0) * 2.0;
        float _1820 = _1819 * (_1777.x + (-0.5));
        float _1821 = _1819 * (_1777.y + (-0.5));
        float _1822 = _1819 * (_1777.z + (-0.5));
        float _1823 = isnan(0.0) ? _1820 : (isnan(_1820) ? 0.0 : max(_1820, 0.0));
        float _1824 = isnan(0.0) ? _1821 : (isnan(_1821) ? 0.0 : max(_1821, 0.0));
        float _1825 = isnan(0.0) ? _1822 : (isnan(_1822) ? 0.0 : max(_1822, 0.0));
        float _1826 = _1790 * 0.5;
        float _1827 = _1800 * 0.5;
        float _1828 = _1810 * 0.5;
        float _1829 = dot(vec3(_1826, _1827, _1828), vec3(_1826, _1827, _1828));
        float _1834 = (_1829 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1829);
        float _1842 = (dot(vec3(_1090, _1091, _1092), vec3(_1834 * _1826, _1834 * _1827, _1834 * _1828)) + 1.0) * 0.5;
        float _4438 = isnan(0.0) ? _1842 : (isnan(_1842) ? 0.0 : max(_1842, 0.0));
        float _1851 = sqrt(((_1827 * _1827) + (_1826 * _1826)) + (_1828 * _1828)) / (_1823 + 9.9999997473787516355514526367188e-06);
        float _4449 = isnan(0.0) ? _1851 : (isnan(_1851) ? 0.0 : max(_1851, 0.0));
        float _1852 = isnan(1.0) ? _4449 : (isnan(_4449) ? 1.0 : min(_4449, 1.0));
        float _1853 = _1852 * 2.0;
        float _1857 = (1.0 - _1852) / (_1852 + 1.0);
        float _4460 = isnan(0.0) ? _1857 : (isnan(_1857) ? 0.0 : max(_1857, 0.0));
        float _1858 = isnan(1.0) ? _4460 : (isnan(_4460) ? 1.0 : min(_4460, 1.0));
        float _1867 = ((((1.0 - _1858) * (_1853 + 2.0)) * exp2(log2(isnan(1.0) ? _4438 : (isnan(_4438) ? 1.0 : min(_4438, 1.0))) * (_1853 + 1.0))) + _1858) * _1823;
        float _1868 = _1791 * 0.5;
        float _1869 = _1801 * 0.5;
        float _1870 = _1811 * 0.5;
        float _1871 = dot(vec3(_1868, _1869, _1870), vec3(_1868, _1869, _1870));
        float _1876 = (_1871 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1871);
        float _1884 = (dot(vec3(_1090, _1091, _1092), vec3(_1876 * _1868, _1876 * _1869, _1876 * _1870)) + 1.0) * 0.5;
        float _4471 = isnan(0.0) ? _1884 : (isnan(_1884) ? 0.0 : max(_1884, 0.0));
        float _1893 = sqrt(((_1869 * _1869) + (_1868 * _1868)) + (_1870 * _1870)) / (_1824 + 9.9999997473787516355514526367188e-06);
        float _4482 = isnan(0.0) ? _1893 : (isnan(_1893) ? 0.0 : max(_1893, 0.0));
        float _1894 = isnan(1.0) ? _4482 : (isnan(_4482) ? 1.0 : min(_4482, 1.0));
        float _1895 = _1894 * 2.0;
        float _1899 = (1.0 - _1894) / (_1894 + 1.0);
        float _4493 = isnan(0.0) ? _1899 : (isnan(_1899) ? 0.0 : max(_1899, 0.0));
        float _1900 = isnan(1.0) ? _4493 : (isnan(_4493) ? 1.0 : min(_4493, 1.0));
        float _1909 = ((((1.0 - _1900) * (_1895 + 2.0)) * exp2(log2(isnan(1.0) ? _4471 : (isnan(_4471) ? 1.0 : min(_4471, 1.0))) * (_1895 + 1.0))) + _1900) * _1824;
        float _1910 = _1792 * 0.5;
        float _1911 = _1802 * 0.5;
        float _1912 = _1812 * 0.5;
        float _1913 = dot(vec3(_1910, _1911, _1912), vec3(_1910, _1911, _1912));
        float _1918 = (_1913 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1913);
        float _1926 = (dot(vec3(_1090, _1091, _1092), vec3(_1918 * _1910, _1918 * _1911, _1918 * _1912)) + 1.0) * 0.5;
        float _4504 = isnan(0.0) ? _1926 : (isnan(_1926) ? 0.0 : max(_1926, 0.0));
        float _1935 = sqrt(((_1911 * _1911) + (_1910 * _1910)) + (_1912 * _1912)) / (_1825 + 9.9999997473787516355514526367188e-06);
        float _4515 = isnan(0.0) ? _1935 : (isnan(_1935) ? 0.0 : max(_1935, 0.0));
        float _1936 = isnan(1.0) ? _4515 : (isnan(_4515) ? 1.0 : min(_4515, 1.0));
        float _1937 = _1936 * 2.0;
        float _1941 = (1.0 - _1936) / (_1936 + 1.0);
        float _4526 = isnan(0.0) ? _1941 : (isnan(_1941) ? 0.0 : max(_1941, 0.0));
        float _1942 = isnan(1.0) ? _4526 : (isnan(_4526) ? 1.0 : min(_4526, 1.0));
        float _1951 = ((((1.0 - _1942) * (_1937 + 2.0)) * exp2(log2(isnan(1.0) ? _4504 : (isnan(_4504) ? 1.0 : min(_4504, 1.0))) * (_1937 + 1.0))) + _1942) * _1825;
        _1959 = _1792;
        _1960 = _1791;
        _1961 = _1790;
        _1962 = _1802;
        _1963 = _1801;
        _1964 = _1800;
        _1965 = _1812;
        _1966 = _1811;
        _1967 = _1810;
        _1968 = _1825;
        _1969 = _1824;
        _1970 = _1823;
        _1971 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1867 : (isnan(_1867) ? 0.0 : max(_1867, 0.0)));
        _1972 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1909 : (isnan(_1909) ? 0.0 : max(_1909, 0.0)));
        _1973 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1951 : (isnan(_1951) ? 0.0 : max(_1951, 0.0)));
    }
    else
    {
        _1959 = _1650;
        _1960 = _1650;
        _1961 = _1650;
        _1962 = _1650;
        _1963 = _1650;
        _1964 = _1650;
        _1965 = _1650;
        _1966 = _1650;
        _1967 = _1650;
        _1968 = _1650;
        _1969 = _1650;
        _1970 = _1650;
        _1971 = 0.0;
        _1972 = 0.0;
        _1973 = 0.0;
    }
    float _1983 = (cbModelParam._m0[1u].x * (_1971 - _1662)) + _1662;
    float _1984 = (cbModelParam._m0[1u].x * (_1972 - _1663)) + _1663;
    float _1985 = (cbModelParam._m0[1u].x * (_1973 - _1664)) + _1664;
    float _2006 = fma(_1985, cbSceneParam._m0[89u].z, fma(_1984, cbSceneParam._m0[89u].y, _1983 * cbSceneParam._m0[89u].x));
    float _2009 = fma(_1985, cbSceneParam._m0[90u].z, fma(_1984, cbSceneParam._m0[90u].y, _1983 * cbSceneParam._m0[90u].x));
    float _2012 = fma(_1985, cbSceneParam._m0[91u].z, fma(_1984, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1983));
    float _2027 = _1259 * 0.5;
    float _2028 = _1260 * 0.5;
    float _2029 = _1261 * 0.5;
    float _2030 = dot(vec4(_2027, _2028, _2029, 1.0), vec4(_1961, _1964, _1967, _1970));
    float _2033 = dot(vec4(_2027, _2028, _2029, 1.0), vec4(_1960, _1963, _1966, _1969));
    float _2036 = dot(vec4(_2027, _2028, _2029, 1.0), vec4(_1959, _1962, _1965, _1968));
    float _2070;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _2043 = dot(vec4(_2027, _2028, _2029, 1.0), vec4(_1649, _1653, _1656, _1659));
        float _2047 = dot(vec4(_2027, _2028, _2029, 1.0), vec4(_1651, _1654, _1657, _1660));
        float _2051 = dot(vec4(_2027, _2028, _2029, 1.0), vec4(_1652, _1655, _1658, _1661));
        float _2058 = dot(vec4(cbModelParam._m0[39u]), vec4(_2027, _2028, _2029, 1.0));
        _2070 = dot(vec3(isnan(0.0) ? _2051 : (isnan(_2051) ? 0.0 : max(_2051, 0.0)), isnan(0.0) ? _2047 : (isnan(_2047) ? 0.0 : max(_2047, 0.0)), isnan(0.0) ? _2043 : (isnan(_2043) ? 0.0 : max(_2043, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_2058) ? 0.0 : (isnan(0.0) ? _2058 : max(0.0, _2058))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _2070 = 1.0;
    }
    float _2081;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _2072 = dot(vec4(cbModelParam._m0[40u]), vec4(_2027, _2028, _2029, 1.0));
        _2081 = dot(vec3(isnan(0.0) ? _2030 : (isnan(_2030) ? 0.0 : max(_2030, 0.0)), isnan(0.0) ? _2033 : (isnan(_2033) ? 0.0 : max(_2033, 0.0)), isnan(0.0) ? _2036 : (isnan(_2036) ? 0.0 : max(_2036, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_2072) ? 0.0 : (isnan(0.0) ? _2072 : max(0.0, _2072))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _2081 = 1.0;
    }
    float _2085 = (_2081 * cbModelParam._m0[1u].x) + (_2070 * (1.0 - cbModelParam._m0[1u].x));
    float _2095 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _1093);
    float _2096 = isnan(_2095) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _2095 : min(cbModelParam._m0[25u].z, _2095));
    float _2176;
    float _2178;
    float _2180;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _2143 = fma(_1320, cbModelParam._m0[13u].z, fma(_1316, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1312)) + cbModelParam._m0[13u].w;
        float _2147 = fma(_1320, cbModelParam._m0[14u].z, fma(_1316, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1312)) + cbModelParam._m0[14u].w;
        float _2151 = fma(_1320, cbModelParam._m0[15u].z, fma(_1316, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1312)) + cbModelParam._m0[15u].w;
        float _2154 = fma(_1261, cbModelParam._m0[13u].z, fma(_1260, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1259));
        float _2157 = fma(_1261, cbModelParam._m0[14u].z, fma(_1260, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1259));
        float _2160 = fma(_1261, cbModelParam._m0[15u].z, fma(_1260, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1259));
        float _2188;
        if (_2154 > 0.0)
        {
            _2188 = abs((1.0 - _2143) / _2154);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_2154 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_2143 + 1.0) / _2154);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _2188 = frontier_phi_17_15_ladder;
        }
        float _2409;
        if (_2157 > 0.0)
        {
            _2409 = abs((1.0 - _2147) / _2157);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_2157 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_2147 + 1.0) / _2157);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2409 = frontier_phi_26_22_ladder;
        }
        float _2655;
        if (_2160 > 0.0)
        {
            _2655 = abs((1.0 - _2151) / _2160);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_2160 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_2151 + 1.0) / _2160);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2655 = frontier_phi_38_33_ladder;
        }
        float _2657 = isnan(_2409) ? _2188 : (isnan(_2188) ? _2409 : min(_2188, _2409));
        float _2658 = isnan(_2655) ? _2657 : (isnan(_2657) ? _2655 : min(_2657, _2655));
        float _2662 = (_2658 * _2154) + _2143;
        float _2663 = (_2658 * _2157) + _2147;
        float _2664 = (_2658 * _2160) + _2151;
        float _2665 = _2658 * 9.9999997473787516355514526367188e-05;
        float _2667 = (-1.0) - _2665;
        float _2669 = _2665 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2664 > _2669) || ((_2664 < _2667) || ((_2663 > _2669) || ((_2663 < _2667) || ((_2662 < _2667) || (_2662 > _2669))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2788 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2664, cbModelParam._m0[9u].z, fma(_2663, cbModelParam._m0[9u].y, _2662 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2664, cbModelParam._m0[10u].z, fma(_2663, cbModelParam._m0[10u].y, _2662 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2664, cbModelParam._m0[11u].z, fma(_2663, cbModelParam._m0[11u].y, _2662 * cbModelParam._m0[11u].x))), _2096);
            frontier_phi_16_38_ladder = _2788.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2788.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2788.x * cbModelParam._m0[1u].y;
        }
        _2176 = frontier_phi_16_38_ladder_2;
        _2178 = frontier_phi_16_38_ladder_1;
        _2180 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _2164 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1259, _1260, _1261), _2096);
        _2176 = _2164.x * cbModelParam._m0[1u].y;
        _2178 = _2164.y * cbModelParam._m0[1u].y;
        _2180 = _2164.z * cbModelParam._m0[1u].y;
    }
    float _2184 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _1093);
    float _2185 = isnan(_2184) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2184 : min(cbModelParam._m0[25u].w, _2184));
    float _2274;
    float _2276;
    float _2278;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2238 = fma(_1320, cbModelParam._m0[21u].z, fma(_1316, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1312)) + cbModelParam._m0[21u].w;
        float _2242 = fma(_1320, cbModelParam._m0[22u].z, fma(_1316, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1312)) + cbModelParam._m0[22u].w;
        float _2246 = fma(_1320, cbModelParam._m0[23u].z, fma(_1316, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1312)) + cbModelParam._m0[23u].w;
        float _2249 = fma(_1261, cbModelParam._m0[21u].z, fma(_1260, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1259));
        float _2252 = fma(_1261, cbModelParam._m0[22u].z, fma(_1260, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1259));
        float _2255 = fma(_1261, cbModelParam._m0[23u].z, fma(_1260, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1259));
        float _2414;
        if (_2249 > 0.0)
        {
            _2414 = abs((1.0 - _2238) / _2249);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_2249 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_2238 + 1.0) / _2249);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2414 = frontier_phi_28_24_ladder;
        }
        float _2682;
        if (_2252 > 0.0)
        {
            _2682 = abs((1.0 - _2242) / _2252);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_2252 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_2242 + 1.0) / _2252);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2682 = frontier_phi_40_35_ladder;
        }
        float _2887;
        if (_2255 > 0.0)
        {
            _2887 = abs((1.0 - _2246) / _2255);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_2255 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_2246 + 1.0) / _2255);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2887 = frontier_phi_49_46_ladder;
        }
        float _2889 = isnan(_2682) ? _2414 : (isnan(_2414) ? _2682 : min(_2414, _2682));
        float _2890 = isnan(_2887) ? _2889 : (isnan(_2889) ? _2887 : min(_2889, _2887));
        float _2894 = (_2890 * _2249) + _2238;
        float _2895 = (_2890 * _2252) + _2242;
        float _2896 = (_2890 * _2255) + _2246;
        float _2897 = _2890 * 9.9999997473787516355514526367188e-05;
        float _2898 = (-1.0) - _2897;
        float _2900 = _2897 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2896 > _2900) || ((_2896 < _2898) || ((_2895 > _2900) || ((_2895 < _2898) || ((_2894 < _2898) || (_2894 > _2900))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _3095 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2896, cbModelParam._m0[17u].z, fma(_2895, cbModelParam._m0[17u].y, _2894 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2896, cbModelParam._m0[18u].z, fma(_2895, cbModelParam._m0[18u].y, _2894 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2896, cbModelParam._m0[19u].z, fma(_2895, cbModelParam._m0[19u].y, _2894 * cbModelParam._m0[19u].x))), _2185);
            frontier_phi_25_49_ladder = _3095.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _3095.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _3095.x * cbModelParam._m0[1u].z;
        }
        _2274 = frontier_phi_25_49_ladder_2;
        _2276 = frontier_phi_25_49_ladder_1;
        _2278 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _2258 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1259, _1260, _1261), _2185);
        _2274 = _2258.x * cbModelParam._m0[1u].z;
        _2276 = _2258.y * cbModelParam._m0[1u].z;
        _2278 = _2258.z * cbModelParam._m0[1u].z;
    }
    float _2290 = ((((1.0 - _1280) * ((_1267 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_1280 * _1267)) * _1251;
    float _2291 = _2290 * ((cbModelParam._m0[1u].w * (_2274 - _2176)) + _2176);
    float _2292 = _2290 * ((cbModelParam._m0[1u].w * (_2276 - _2178)) + _2178);
    float _2293 = _2290 * ((cbModelParam._m0[1u].w * (_2278 - _2180)) + _2180);
    float _2296 = fma(_2293, cbSceneParam._m0[89u].z, fma(_2292, cbSceneParam._m0[89u].y, _2291 * cbSceneParam._m0[89u].x));
    float _2299 = fma(_2293, cbSceneParam._m0[90u].z, fma(_2292, cbSceneParam._m0[90u].y, _2291 * cbSceneParam._m0[90u].x));
    float _2302 = fma(_2293, cbSceneParam._m0[91u].z, fma(_2292, cbSceneParam._m0[91u].y, _2291 * cbSceneParam._m0[91u].x));
    vec4 _2310 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_1188, _1189));
    float _2312 = _2310.w;
    float _2324 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _2312);
    float _2325 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _2312);
    float _2326 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _2312);
    uvec4 _2330 = floatBitsToUint(cbInstanceData._m0[_297 + 5u]);
    uint _2332 = _2330.x * 14u;
    uint _2333 = _2332 + 13u;
    float _2340 = _1251 + (-1.0);
    float _2345 = (cbLight._m0[_2333].x * _2340) + 1.0;
    float _2346 = (cbLight._m0[_2333].y * _2340) + 1.0;
    float _2347 = (cbLight._m0[_2333].z * _2340) + 1.0;
    float _2348 = (cbLight._m0[_2333].w * _2340) + 1.0;
    uint _2349 = _2332 + 5u;
    float _2355 = isnan(1.0) ? _2346 : (isnan(_2346) ? 1.0 : min(_2346, 1.0));
    uint _2359 = _2332 + 4u;
    float _2368 = isnan(1.0) ? _2345 : (isnan(_2345) ? 1.0 : min(_2345, 1.0));
    uint _2372 = _2332 | 1u;
    float _2383 = dot(vec3(cbLight._m0[_2332].xyz), vec3(_1090, _1091, _1092));
    float _2386 = dot(vec3(cbLight._m0[_2372].xyz), vec3(_1090, _1091, _1092));
    float _4662 = isnan(0.0) ? _2383 : (isnan(_2383) ? 0.0 : max(_2383, 0.0));
    float _4673 = isnan(0.0) ? _2386 : (isnan(_2386) ? 0.0 : max(_2386, 0.0));
    float _2391 = (isnan(1.0) ? _4662 : (isnan(_4662) ? 1.0 : min(_4662, 1.0))) * 0.3183098733425140380859375;
    float _2393 = (isnan(1.0) ? _4673 : (isnan(_4673) ? 1.0 : min(_4673, 1.0))) * 0.3183098733425140380859375;
    float _2400 = ((cbLight._m0[_2349].x * _2355) * _2393) + (((cbLight._m0[_2359].x * _2324) * _2368) * _2391);
    float _2401 = ((_2355 * cbLight._m0[_2349].y) * _2393) + (((cbLight._m0[_2359].y * _2325) * _2368) * _2391);
    float _2402 = ((_2355 * cbLight._m0[_2349].z) * _2393) + (((cbLight._m0[_2359].z * _2326) * _2368) * _2391);
    uvec4 _2406 = floatBitsToUint(cbLight._m0[_2332 + 12u]);
    bool _2408 = _2406.x == 0u;
    float _2419;
    float _2421;
    float _2423;
    if (_2408)
    {
        _2419 = _2400;
        _2421 = _2401;
        _2423 = _2402;
    }
    else
    {
        uint _2427 = _2332 + 6u;
        float _2443 = (dot(vec3(cbLight._m0[_2332 + 2u].xyz), vec3(_1090, _1091, _1092)) * 0.5) + 0.5;
        float _2444 = _2443 * _2443;
        float _4684 = isnan(0.0) ? _2444 : (isnan(_2444) ? 0.0 : max(_2444, 0.0));
        float _2445 = isnan(1.0) ? _4684 : (isnan(_4684) ? 1.0 : min(_4684, 1.0));
        float _2446 = isnan(1.0) ? _2347 : (isnan(_2347) ? 1.0 : min(_2347, 1.0));
        _2419 = (((cbLight._m0[_2427].x * 0.3183098733425140380859375) * _2445) * _2446) + _2400;
        _2421 = (((cbLight._m0[_2427].y * 0.3183098733425140380859375) * _2445) * _2446) + _2401;
        _2423 = (((cbLight._m0[_2427].z * 0.3183098733425140380859375) * _2445) * _2446) + _2402;
    }
    bool _2426 = _2406.y == 0u;
    float _2464;
    float _2466;
    float _2468;
    if (_2426)
    {
        _2464 = _2419;
        _2466 = _2421;
        _2468 = _2423;
    }
    else
    {
        uint _2626 = _2332 + 7u;
        float _2642 = (dot(vec3(cbLight._m0[_2332 + 3u].xyz), vec3(_1090, _1091, _1092)) * 0.5) + 0.5;
        float _2643 = _2642 * _2642;
        float _4700 = isnan(0.0) ? _2643 : (isnan(_2643) ? 0.0 : max(_2643, 0.0));
        float _2644 = isnan(1.0) ? _4700 : (isnan(_4700) ? 1.0 : min(_4700, 1.0));
        float _2645 = isnan(1.0) ? _2348 : (isnan(_2348) ? 1.0 : min(_2348, 1.0));
        _2464 = (((cbLight._m0[_2626].x * 0.3183098733425140380859375) * _2644) * _2645) + _2419;
        _2466 = (((cbLight._m0[_2626].y * 0.3183098733425140380859375) * _2644) * _2645) + _2421;
        _2468 = (((cbLight._m0[_2626].z * 0.3183098733425140380859375) * _2644) * _2645) + _2423;
    }
    uint _2471 = _2332 + 8u;
    float _2484 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2332].w)) * _1093) * 0.949999988079071044921875);
    float _2485 = _2484 * _2484;
    float _2486 = cbLight._m0[_2332].x + _1168;
    float _2487 = cbLight._m0[_2332].y + _1169;
    float _2488 = cbLight._m0[_2332].z + _1170;
    float _2492 = inversesqrt(dot(vec3(_2486, _2487, _2488), vec3(_2486, _2487, _2488)));
    float _2493 = _2492 * _2486;
    float _2494 = _2492 * _2487;
    float _2495 = _2492 * _2488;
    float _2496 = dot(vec3(_1090, _1091, _1092), vec3(cbLight._m0[_2332].xyz));
    float _4716 = isnan(0.0) ? _2496 : (isnan(_2496) ? 0.0 : max(_2496, 0.0));
    float _2499 = isnan(1.0) ? _4716 : (isnan(_4716) ? 1.0 : min(_4716, 1.0));
    float _4727 = isnan(0.0) ? _1252 : (isnan(_1252) ? 0.0 : max(_1252, 0.0));
    float _2500 = isnan(1.0) ? _4727 : (isnan(_4727) ? 1.0 : min(_4727, 1.0));
    float _2501 = dot(vec3(_1090, _1091, _1092), vec3(_2493, _2494, _2495));
    float _4738 = isnan(0.0) ? _2501 : (isnan(_2501) ? 0.0 : max(_2501, 0.0));
    float _2504 = isnan(1.0) ? _4738 : (isnan(_4738) ? 1.0 : min(_4738, 1.0));
    float _2505 = dot(vec3(cbLight._m0[_2332].xyz), vec3(_2493, _2494, _2495));
    float _4749 = isnan(0.0) ? _2505 : (isnan(_2505) ? 0.0 : max(_2505, 0.0));
    float _2509 = _2485 * _2485;
    float _2513 = ((_2504 * _2504) * (_2509 + (-1.0))) + 1.0;
    float _2524 = (exp2(log2(1.0 - (isnan(1.0) ? _4749 : (isnan(_4749) ? 1.0 : min(_4749, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2525 = 1.0 - _2485;
    float _2536 = (0.5 / (((_2500 * ((_2499 * _2525) + _2485)) + 9.9999999392252902907785028219223e-09) + (((_2500 * _2525) + _2485) * _2499))) * _2499;
    float _4760 = isnan(0.0) ? _2536 : (isnan(_2536) ? 0.0 : max(_2536, 0.0));
    float _2538 = (isnan(1.0) ? _4760 : (isnan(_4760) ? 1.0 : min(_4760, 1.0))) * (_2509 / ((_2513 * _2513) * 3.141590118408203125));
    uint _2552 = _2332 + 9u;
    float _2563 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2372].w)) * _1093) * 0.949999988079071044921875);
    float _2564 = _2563 * _2563;
    float _2565 = cbLight._m0[_2372].x + _1168;
    float _2566 = cbLight._m0[_2372].y + _1169;
    float _2567 = cbLight._m0[_2372].z + _1170;
    float _2571 = inversesqrt(dot(vec3(_2565, _2566, _2567), vec3(_2565, _2566, _2567)));
    float _2572 = _2571 * _2565;
    float _2573 = _2571 * _2566;
    float _2574 = _2571 * _2567;
    float _2575 = dot(vec3(_1090, _1091, _1092), vec3(cbLight._m0[_2372].xyz));
    float _4771 = isnan(0.0) ? _2575 : (isnan(_2575) ? 0.0 : max(_2575, 0.0));
    float _2578 = isnan(1.0) ? _4771 : (isnan(_4771) ? 1.0 : min(_4771, 1.0));
    float _2579 = dot(vec3(_1090, _1091, _1092), vec3(_2572, _2573, _2574));
    float _4782 = isnan(0.0) ? _2579 : (isnan(_2579) ? 0.0 : max(_2579, 0.0));
    float _2582 = isnan(1.0) ? _4782 : (isnan(_4782) ? 1.0 : min(_4782, 1.0));
    float _2583 = dot(vec3(cbLight._m0[_2372].xyz), vec3(_2572, _2573, _2574));
    float _4793 = isnan(0.0) ? _2583 : (isnan(_2583) ? 0.0 : max(_2583, 0.0));
    float _2587 = _2564 * _2564;
    float _2591 = ((_2582 * _2582) * (_2587 + (-1.0))) + 1.0;
    float _2600 = (exp2(log2(1.0 - (isnan(1.0) ? _4793 : (isnan(_4793) ? 1.0 : min(_4793, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2601 = 1.0 - _2564;
    float _2611 = (0.5 / (((_2500 * ((_2578 * _2601) + _2564)) + 9.9999999392252902907785028219223e-09) + (((_2500 * _2601) + _2564) * _2578))) * _2578;
    float _4804 = isnan(0.0) ? _2611 : (isnan(_2611) ? 0.0 : max(_2611, 0.0));
    float _2613 = (isnan(1.0) ? _4804 : (isnan(_4804) ? 1.0 : min(_4804, 1.0))) * (_2587 / ((_2591 * _2591) * 3.141590118408203125));
    float _2623 = (((_2600 * cbLight._m0[_2552].x) * _2613) * _2355) + ((((cbLight._m0[_2471].x * _2324) * _2524) * _2538) * _2368);
    float _2624 = (((_2600 * cbLight._m0[_2552].y) * _2613) * _2355) + ((((cbLight._m0[_2471].y * _2325) * _2524) * _2538) * _2368);
    float _2625 = (((_2600 * cbLight._m0[_2552].z) * _2613) * _2355) + ((((cbLight._m0[_2471].z * _2326) * _2524) * _2538) * _2368);
    float _2687;
    float _2689;
    float _2691;
    if (_2408)
    {
        _2687 = _2623;
        _2689 = _2624;
        _2691 = _2625;
    }
    else
    {
        uint _2693 = _2332 + 2u;
        uint _2697 = _2332 + 10u;
        float _2711 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2693].w)) * _1093) * 0.949999988079071044921875);
        float _2712 = _2711 * _2711;
        float _2713 = cbLight._m0[_2693].x + _1168;
        float _2714 = cbLight._m0[_2693].y + _1169;
        float _2715 = cbLight._m0[_2693].z + _1170;
        float _2719 = inversesqrt(dot(vec3(_2713, _2714, _2715), vec3(_2713, _2714, _2715)));
        float _2720 = _2719 * _2713;
        float _2721 = _2719 * _2714;
        float _2722 = _2719 * _2715;
        float _2723 = dot(vec3(_1090, _1091, _1092), vec3(cbLight._m0[_2693].xyz));
        float _4815 = isnan(0.0) ? _2723 : (isnan(_2723) ? 0.0 : max(_2723, 0.0));
        float _2726 = isnan(1.0) ? _4815 : (isnan(_4815) ? 1.0 : min(_4815, 1.0));
        float _2727 = dot(vec3(_1090, _1091, _1092), vec3(_2720, _2721, _2722));
        float _4826 = isnan(0.0) ? _2727 : (isnan(_2727) ? 0.0 : max(_2727, 0.0));
        float _2730 = isnan(1.0) ? _4826 : (isnan(_4826) ? 1.0 : min(_4826, 1.0));
        float _2731 = dot(vec3(cbLight._m0[_2693].xyz), vec3(_2720, _2721, _2722));
        float _4837 = isnan(0.0) ? _2731 : (isnan(_2731) ? 0.0 : max(_2731, 0.0));
        float _2735 = _2712 * _2712;
        float _2739 = ((_2730 * _2730) * (_2735 + (-1.0))) + 1.0;
        float _2748 = (exp2(log2(1.0 - (isnan(1.0) ? _4837 : (isnan(_4837) ? 1.0 : min(_4837, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2749 = 1.0 - _2712;
        float _2759 = (0.5 / (((_2500 * ((_2726 * _2749) + _2712)) + 9.9999999392252902907785028219223e-09) + (((_2500 * _2749) + _2712) * _2726))) * _2726;
        float _4848 = isnan(0.0) ? _2759 : (isnan(_2759) ? 0.0 : max(_2759, 0.0));
        float _2761 = (isnan(1.0) ? _4848 : (isnan(_4848) ? 1.0 : min(_4848, 1.0))) * (_2735 / ((_2739 * _2739) * 3.141590118408203125));
        float _2762 = isnan(1.0) ? _2347 : (isnan(_2347) ? 1.0 : min(_2347, 1.0));
        _2687 = (((_2748 * cbLight._m0[_2697].x) * _2761) * _2762) + _2623;
        _2689 = (((_2748 * cbLight._m0[_2697].y) * _2761) * _2762) + _2624;
        _2691 = (((_2748 * cbLight._m0[_2697].z) * _2761) * _2762) + _2625;
    }
    float _2797;
    float _2799;
    float _2801;
    if (_2426)
    {
        _2797 = _2687;
        _2799 = _2689;
        _2801 = _2691;
    }
    else
    {
        uint _2808 = _2332 + 3u;
        uint _2812 = _2332 + 11u;
        float _2826 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2808].w)) * _1093) * 0.949999988079071044921875);
        float _2827 = _2826 * _2826;
        float _2828 = cbLight._m0[_2808].x + _1168;
        float _2829 = cbLight._m0[_2808].y + _1169;
        float _2830 = cbLight._m0[_2808].z + _1170;
        float _2834 = inversesqrt(dot(vec3(_2828, _2829, _2830), vec3(_2828, _2829, _2830)));
        float _2835 = _2834 * _2828;
        float _2836 = _2834 * _2829;
        float _2837 = _2834 * _2830;
        float _2838 = dot(vec3(_1090, _1091, _1092), vec3(cbLight._m0[_2808].xyz));
        float _4864 = isnan(0.0) ? _2838 : (isnan(_2838) ? 0.0 : max(_2838, 0.0));
        float _2841 = isnan(1.0) ? _4864 : (isnan(_4864) ? 1.0 : min(_4864, 1.0));
        float _2842 = dot(vec3(_1090, _1091, _1092), vec3(_2835, _2836, _2837));
        float _4875 = isnan(0.0) ? _2842 : (isnan(_2842) ? 0.0 : max(_2842, 0.0));
        float _2845 = isnan(1.0) ? _4875 : (isnan(_4875) ? 1.0 : min(_4875, 1.0));
        float _2846 = dot(vec3(cbLight._m0[_2808].xyz), vec3(_2835, _2836, _2837));
        float _4886 = isnan(0.0) ? _2846 : (isnan(_2846) ? 0.0 : max(_2846, 0.0));
        float _2850 = _2827 * _2827;
        float _2854 = ((_2845 * _2845) * (_2850 + (-1.0))) + 1.0;
        float _2863 = (exp2(log2(1.0 - (isnan(1.0) ? _4886 : (isnan(_4886) ? 1.0 : min(_4886, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2864 = 1.0 - _2827;
        float _2874 = (0.5 / (((_2500 * ((_2841 * _2864) + _2827)) + 9.9999999392252902907785028219223e-09) + (((_2500 * _2864) + _2827) * _2841))) * _2841;
        float _4897 = isnan(0.0) ? _2874 : (isnan(_2874) ? 0.0 : max(_2874, 0.0));
        float _2876 = (isnan(1.0) ? _4897 : (isnan(_4897) ? 1.0 : min(_4897, 1.0))) * (_2850 / ((_2854 * _2854) * 3.141590118408203125));
        float _2877 = isnan(1.0) ? _2348 : (isnan(_2348) ? 1.0 : min(_2348, 1.0));
        _2797 = (((_2863 * cbLight._m0[_2812].x) * _2876) * _2877) + _2687;
        _2799 = (((_2863 * cbLight._m0[_2812].y) * _2876) * _2877) + _2689;
        _2801 = (((_2863 * cbLight._m0[_2812].z) * _2876) * _2877) + _2691;
    }
    float _3012;
    float _3014;
    float _3016;
    float _3018;
    float _3020;
    float _3022;
    if (_2330.y == 0u)
    {
        float _2952 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2953 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2952;
        float _2954 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2952;
        float _2955 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2952;
        uvec4 _2967 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2968 = _2967.x;
        uint _2979 = uint((float(_2967.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1189) / _2968))) + floor(float(uint(cbSceneParam._m0[85u].x * _1188) / _2968)));
        float _2989 = (log2(_2955 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2990 = isnan(0.0) ? _2989 : (isnan(_2989) ? 0.0 : max(_2989, 0.0));
        uint _2993 = uint(isnan(14.0) ? _2990 : (isnan(_2990) ? 14.0 : min(_2990, 14.0)));
        uvec4 _2998 = texelFetch(g_lightClusterGridBuffer, int(((_2993 << 2u) + (_2979 << 6u)) >> 2u));
        uint _2999 = _2998.x;
        uint _3000 = _2967.z;
        float _3100;
        float _3102;
        float _3104;
        float _3106;
        float _3108;
        float _3110;
        if (((((1u << ((_3000 >> 4u) & 15u)) + 4294967295u) & _2999) == 0u) || ((_3000 & 240u) == 0u))
        {
            _3100 = 0.0;
            _3102 = 0.0;
            _3104 = 0.0;
            _3106 = 0.0;
            _3108 = 0.0;
            _3110 = 0.0;
        }
        else
        {
            float _3101;
            float _3103;
            float _3105;
            float _3107;
            float _3109;
            float _3111;
            float _3253 = 0.0;
            float _3254 = 0.0;
            float _3255 = 0.0;
            float _3256 = 0.0;
            float _3257 = 0.0;
            float _3258 = 0.0;
            uint _3259 = 0u;
            uint _3268;
            bool _3269;
            for (;;)
            {
                _3268 = texelFetch(g_lightClassification, int((((_2993 << 5u) + (_2979 << 9u)) + (_3259 << 2u)) >> 2u)).x;
                _3269 = _3268 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3269)
                {
                    frontier_phi_66_pred = _3253;
                    frontier_phi_66_pred_1 = _3258;
                    frontier_phi_66_pred_2 = _3257;
                    frontier_phi_66_pred_3 = _3256;
                    frontier_phi_66_pred_4 = _3255;
                    frontier_phi_66_pred_5 = _3254;
                }
                else
                {
                    float _3398;
                    float _3399;
                    float _3400;
                    float _3401;
                    float _3402;
                    float _3403;
                    uint _3404;
                    _3398 = _3253;
                    _3399 = _3254;
                    _3400 = _3255;
                    _3401 = _3256;
                    _3402 = _3257;
                    _3403 = _3258;
                    _3404 = _3268;
                    float _3325;
                    float _3326;
                    float _3327;
                    float _3328;
                    float _3329;
                    float _3330;
                    for (;;)
                    {
                        uint _3408 = uint(findLSB(_3404)) + (_3259 << 5u);
                        uint _3405 = (_3404 + 4294967295u) & _3404;
                        uint _3410 = _3408 * 48u;
                        vec4 _3424 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3410)).x, texelFetch(g_PointLightRenderingBuffer, int(_3410 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3410 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3410 + 3u)).x));
                        uint _3430 = (_3408 * 48u) + 4u;
                        vec4 _3443 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3430)).x, texelFetch(g_PointLightRenderingBuffer, int(_3430 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3430 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3430 + 3u)).x));
                        uint _3449 = (_3408 * 48u) + 8u;
                        vec3 _3460 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3449)).x, texelFetch(g_PointLightRenderingBuffer, int(_3449 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3449 + 2u)).x));
                        float _3464 = _3424.x - _2953;
                        float _3465 = _3424.y - _2954;
                        float _3466 = _3424.z - _2955;
                        float _3467 = dot(vec3(_3464, _3465, _3466), vec3(_3464, _3465, _3466));
                        float _3470 = inversesqrt(_3467);
                        float _3471 = _3470 * _3464;
                        float _3472 = _3470 * _3465;
                        float _3473 = _3470 * _3466;
                        float _3474 = dot(vec3(_1207, _1210, _1213), vec3(_3471, _3472, _3473));
                        float _3479 = 1.0 - (_3467 * _3424.w);
                        float _4923 = isnan(0.0) ? _3479 : (isnan(_3479) ? 0.0 : max(_3479, 0.0));
                        float _3480 = isnan(1.0) ? _4923 : (isnan(_4923) ? 1.0 : min(_4923, 1.0));
                        float _3481 = sqrt(_3467) * _3443.w;
                        float _3484 = 1.39999997615814208984375 / (_3481 + 1.39999997615814208984375);
                        float _3485 = _3484 * _3484;
                        float _3488 = ((1.0 - _3485) * _3474) + _3485;
                        float _3491 = _3481 * _3481;
                        float _3495 = ((isnan(0.0) ? _3488 : (isnan(_3488) ? 0.0 : max(_3488, 0.0))) * _3480) / ((_3491 * 0.699999988079071044921875) + 1.0);
                        float _3499 = (-0.0) - _2953;
                        float _3500 = (-0.0) - _2954;
                        float _3501 = (-0.0) - _2955;
                        float _3505 = inversesqrt(dot(vec3(_3499, _3500, _3501), vec3(_3499, _3500, _3501)));
                        float _3506 = _3505 * _3499;
                        float _3507 = _3505 * _3500;
                        float _3508 = _3505 * _3501;
                        float _3516 = exp2(log2(1.0 / ((_3491 * 3.5) + 5.0)) * 0.25);
                        float _3517 = 1.0 - _1267;
                        float _3524 = sqrt(1.0 - ((1.0 - (_3517 * _3517)) * (1.0 - (_3516 * _3516))));
                        float _3525 = _3524 * _3524;
                        float _3526 = _3525 * _3525;
                        float _3527 = _3506 + _3471;
                        float _3528 = _3507 + _3472;
                        float _3529 = _3508 + _3473;
                        float _3533 = inversesqrt(dot(vec3(_3527, _3528, _3529), vec3(_3527, _3528, _3529)));
                        float _3537 = dot(vec3(_1207, _1210, _1213), vec3(_3506, _3507, _3508));
                        float _4939 = isnan(0.0) ? _3537 : (isnan(_3537) ? 0.0 : max(_3537, 0.0));
                        float _3540 = isnan(1.0) ? _4939 : (isnan(_4939) ? 1.0 : min(_4939, 1.0));
                        float _3541 = dot(vec3(_1207, _1210, _1213), vec3(_3533 * _3527, _3533 * _3528, _3533 * _3529));
                        float _4950 = isnan(0.0) ? _3541 : (isnan(_3541) ? 0.0 : max(_3541, 0.0));
                        float _3544 = isnan(1.0) ? _4950 : (isnan(_4950) ? 1.0 : min(_4950, 1.0));
                        float _3548 = ((_3544 * _3544) * (_3526 + (-1.0))) + 1.0;
                        float _3549 = _3484 * _3525;
                        float _3550 = _3549 * _3549;
                        float _3553 = ((1.0 - _3550) * _3474) + _3550;
                        float _4961 = isnan(0.0) ? _3553 : (isnan(_3553) ? 0.0 : max(_3553, 0.0));
                        float _3554 = isnan(1.0) ? _4961 : (isnan(_4961) ? 1.0 : min(_4961, 1.0));
                        float _3555 = 1.0 - _3525;
                        float _3565 = (0.5 / (((_3554 * ((_3540 * _3555) + _3525)) + 9.9999999392252902907785028219223e-09) + (((_3554 * _3555) + _3525) * _3540))) * _3554;
                        float _4972 = isnan(0.0) ? _3565 : (isnan(_3565) ? 0.0 : max(_3565, 0.0));
                        float _3576 = (((_3526 * 3.1415927410125732421875) * (isnan(1.0) ? _4972 : (isnan(_4972) ? 1.0 : min(_4972, 1.0)))) / ((_3548 * _3548) * ((_3491 * 2.1991131305694580078125) + 3.141590118408203125))) * _3480;
                        _3328 = (_3495 * _3443.x) + _3401;
                        _3329 = (_3495 * _3443.y) + _3402;
                        _3330 = (_3495 * _3443.z) + _3403;
                        _3325 = (_3576 * _3460.x) + _3398;
                        _3326 = (_3576 * _3460.y) + _3399;
                        _3327 = (_3576 * _3460.z) + _3400;
                        if (_3405 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3398 = _3325;
                            _3399 = _3326;
                            _3400 = _3327;
                            _3401 = _3328;
                            _3402 = _3329;
                            _3403 = _3330;
                            _3404 = _3405;
                        }
                    }
                    frontier_phi_66_pred = _3325;
                    frontier_phi_66_pred_1 = _3330;
                    frontier_phi_66_pred_2 = _3329;
                    frontier_phi_66_pred_3 = _3328;
                    frontier_phi_66_pred_4 = _3327;
                    frontier_phi_66_pred_5 = _3326;
                }
                _3101 = frontier_phi_66_pred;
                _3111 = frontier_phi_66_pred_1;
                _3109 = frontier_phi_66_pred_2;
                _3107 = frontier_phi_66_pred_3;
                _3105 = frontier_phi_66_pred_4;
                _3103 = frontier_phi_66_pred_5;
                uint _3260 = _3259 + 1u;
                if (_3260 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3253 = _3101;
                    _3254 = _3103;
                    _3255 = _3105;
                    _3256 = _3107;
                    _3257 = _3109;
                    _3258 = _3111;
                    _3259 = _3260;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3100 = _3101;
            _3102 = _3103;
            _3104 = _3105;
            _3106 = _3107;
            _3108 = _3109;
            _3110 = _3111;
        }
        uvec4 _3114 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3115 = _3114.z;
        uint _3117 = (_3115 >> 8u) & 15u;
        float _3221;
        float _3223;
        float _3225;
        float _3227;
        float _3229;
        float _3231;
        if (((4294967295u << _3117) & _2999) == 0u)
        {
            _3221 = _3100;
            _3223 = _3102;
            _3225 = _3104;
            _3227 = _3106;
            _3229 = _3108;
            _3231 = _3110;
        }
        else
        {
            float _3246 = inversesqrt(dot(vec3(_2953, _2954, _2955), vec3(_2953, _2954, _2955)));
            float _3247 = _3246 * _2953;
            float _3248 = _3246 * _2954;
            float _3249 = _3246 * _2955;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_3117 < ((_3115 >> 12u) & 15u))
            {
                float _3222;
                float _3224;
                float _3226;
                float _3228;
                float _3230;
                float _3232;
                float _3381 = _3100;
                float _3382 = _3102;
                float _3383 = _3104;
                float _3384 = _3106;
                float _3385 = _3108;
                float _3386 = _3110;
                uint _3387 = _3117;
                uint _3396;
                bool _3397;
                for (;;)
                {
                    _3396 = texelFetch(g_lightClassification, int((((_2993 << 5u) + (_2979 << 9u)) + (_3387 << 2u)) >> 2u)).x;
                    _3397 = _3396 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_3397)
                    {
                        frontier_phi_77_pred = _3386;
                        frontier_phi_77_pred_1 = _3385;
                        frontier_phi_77_pred_2 = _3384;
                        frontier_phi_77_pred_3 = _3383;
                        frontier_phi_77_pred_4 = _3382;
                        frontier_phi_77_pred_5 = _3381;
                    }
                    else
                    {
                        float _3590;
                        float _3591;
                        float _3592;
                        float _3593;
                        float _3594;
                        float _3595;
                        float _3883;
                        float _3884;
                        float _3885;
                        float _3886;
                        float _3887;
                        float _3888;
                        float _3603 = _3381;
                        float _3604 = _3382;
                        float _3605 = _3383;
                        float _3606 = _3384;
                        float _3607 = _3385;
                        float _3608 = _3386;
                        uint _3609 = _3396;
                        uint _3610;
                        vec4 _3635;
                        float _3636;
                        vec4 _3651;
                        vec3 _3663;
                        vec4 _3678;
                        vec4 _3693;
                        float _3739;
                        bool _3740;
                        for (;;)
                        {
                            uint _3620 = ((_3387 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3609));
                            _3610 = (_3609 + 4294967295u) & _3609;
                            uint _3622 = _3620 * 40u;
                            _3635 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3622)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3622 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3622 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3622 + 3u)).x));
                            _3636 = _3635.w;
                            uint _3638 = (_3620 * 40u) + 4u;
                            _3651 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3638)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3638 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3638 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3638 + 3u)).x));
                            uint _3653 = (_3620 * 40u) + 8u;
                            _3663 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3653)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3653 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3653 + 2u)).x));
                            uint _3665 = (_3620 * 40u) + 16u;
                            _3678 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3665)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3665 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3665 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3665 + 3u)).x));
                            uint _3680 = (_3620 * 40u) + 20u;
                            _3693 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3680)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3680 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3680 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3680 + 3u)).x));
                            uint _3695 = (_3620 * 40u) + 24u;
                            vec4 _3708 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3695)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3695 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3695 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3695 + 3u)).x));
                            uint _3714 = (_3620 * 40u) + 28u;
                            vec4 _3727 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3714)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3714 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3714 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3714 + 3u)).x));
                            _3739 = fma(_2955, _3727.z, fma(_2954, _3727.y, _3727.x * _2953)) + _3727.w;
                            _3740 = !((fma(_2955, _3708.z, fma(_2954, _3708.y, _3708.x * _2953)) + _3708.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3740)
                            {
                                float _3767 = _3635.x - _2953;
                                float _3768 = _3635.y - _2954;
                                float _3769 = _3635.z - _2955;
                                float _3770 = dot(vec3(_3767, _3768, _3769), vec3(_3767, _3768, _3769));
                                float _3773 = inversesqrt(_3770);
                                float _3774 = _3773 * _3767;
                                float _3775 = _3773 * _3768;
                                float _3776 = _3773 * _3769;
                                float _3780 = 1.0 - (_3770 / (_3636 * _3636));
                                float _4983 = isnan(0.0) ? _3780 : (isnan(_3780) ? 0.0 : max(_3780, 0.0));
                                float _3781 = isnan(1.0) ? _4983 : (isnan(_4983) ? 1.0 : min(_4983, 1.0));
                                float _3785 = sqrt(_3770) * _3651.w;
                                float _3787 = 1.39999997615814208984375 / (_3785 + 1.39999997615814208984375);
                                float _3788 = _3787 * _3787;
                                float _3791 = ((1.0 - _3788) * dot(vec3(_3774, _3775, _3776), vec3(_1207, _1210, _1213))) + _3788;
                                float _3794 = _3785 * _3785;
                                float _3798 = (fma(_2955, _3678.z, fma(_2954, _3678.y, _3678.x * _2953)) + _3678.w) / _3739;
                                float _3799 = (fma(_2955, _3693.z, fma(_2954, _3693.y, _3693.x * _2953)) + _3693.w) / _3739;
                                float _3803 = 1.0 - dot(vec2(_3798, _3799), vec2(_3798, _3799));
                                float _4999 = isnan(0.0) ? _3803 : (isnan(_3803) ? 0.0 : max(_3803, 0.0));
                                float _3804 = isnan(1.0) ? _4999 : (isnan(_4999) ? 1.0 : min(_4999, 1.0));
                                float _3805 = _3804 * (((isnan(0.0) ? _3791 : (isnan(_3791) ? 0.0 : max(_3791, 0.0))) * _3781) / ((_3794 * 0.699999988079071044921875) + 1.0));
                                float _3817 = exp2(log2(1.0 / ((_3794 * 3.5) + 5.0)) * 0.25);
                                float _3818 = 1.0 - _1267;
                                float _3825 = sqrt(1.0 - ((1.0 - (_3818 * _3818)) * (1.0 - (_3817 * _3817))));
                                float _3826 = _3825 * _3825;
                                float _3827 = _3826 * _3826;
                                float _3828 = _3774 - _3247;
                                float _3829 = _3775 - _3248;
                                float _3830 = _3776 - _3249;
                                float _3834 = inversesqrt(dot(vec3(_3828, _3829, _3830), vec3(_3828, _3829, _3830)));
                                float _3838 = dot(vec3(_1207, _1210, _1213), vec3((-0.0) - _3247, (-0.0) - _3248, (-0.0) - _3249));
                                float _5010 = isnan(0.0) ? _3838 : (isnan(_3838) ? 0.0 : max(_3838, 0.0));
                                float _3841 = isnan(1.0) ? _5010 : (isnan(_5010) ? 1.0 : min(_5010, 1.0));
                                float _3842 = dot(vec3(_1207, _1210, _1213), vec3(_3834 * _3828, _3834 * _3829, _3834 * _3830));
                                float _5021 = isnan(0.0) ? _3842 : (isnan(_3842) ? 0.0 : max(_3842, 0.0));
                                float _3845 = isnan(1.0) ? _5021 : (isnan(_5021) ? 1.0 : min(_5021, 1.0));
                                float _3849 = ((_3845 * _3845) * (_3827 + (-1.0))) + 1.0;
                                float _3850 = _3787 * _3826;
                                float _3851 = _3850 * _3850;
                                float _3857 = ((1.0 - _3851) * dot(vec3(_1207, _1210, _1213), vec3(_3774, _3775, _3776))) + _3851;
                                float _5032 = isnan(0.0) ? _3857 : (isnan(_3857) ? 0.0 : max(_3857, 0.0));
                                float _3858 = isnan(1.0) ? _5032 : (isnan(_5032) ? 1.0 : min(_5032, 1.0));
                                float _3859 = 1.0 - _3826;
                                float _3869 = (0.5 / (((_3858 * ((_3841 * _3859) + _3826)) + 9.9999999392252902907785028219223e-09) + (((_3858 * _3859) + _3826) * _3841))) * _3858;
                                float _5043 = isnan(0.0) ? _3869 : (isnan(_3869) ? 0.0 : max(_3869, 0.0));
                                float _3879 = (_3804 * _3781) * (((_3827 * 3.1415927410125732421875) * (isnan(1.0) ? _5043 : (isnan(_5043) ? 1.0 : min(_5043, 1.0)))) / ((_3849 * _3849) * ((_3794 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3805 * _3651.y;
                                frontier_phi_83_pred_1 = _3805 * _3651.x;
                                frontier_phi_83_pred_2 = _3879 * _3663.z;
                                frontier_phi_83_pred_3 = _3879 * _3663.y;
                                frontier_phi_83_pred_4 = _3879 * _3663.x;
                                frontier_phi_83_pred_5 = _3805 * _3651.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3887 = frontier_phi_83_pred;
                            _3886 = frontier_phi_83_pred_1;
                            _3885 = frontier_phi_83_pred_2;
                            _3884 = frontier_phi_83_pred_3;
                            _3883 = frontier_phi_83_pred_4;
                            _3888 = frontier_phi_83_pred_5;
                            _3593 = _3886 + _3606;
                            _3594 = _3887 + _3607;
                            _3595 = _3888 + _3608;
                            _3590 = _3883 + _3603;
                            _3591 = _3884 + _3604;
                            _3592 = _3885 + _3605;
                            if (_3610 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3603 = _3590;
                                _3604 = _3591;
                                _3605 = _3592;
                                _3606 = _3593;
                                _3607 = _3594;
                                _3608 = _3595;
                                _3609 = _3610;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3595;
                        frontier_phi_77_pred_1 = _3594;
                        frontier_phi_77_pred_2 = _3593;
                        frontier_phi_77_pred_3 = _3592;
                        frontier_phi_77_pred_4 = _3591;
                        frontier_phi_77_pred_5 = _3590;
                    }
                    _3232 = frontier_phi_77_pred;
                    _3230 = frontier_phi_77_pred_1;
                    _3228 = frontier_phi_77_pred_2;
                    _3226 = frontier_phi_77_pred_3;
                    _3224 = frontier_phi_77_pred_4;
                    _3222 = frontier_phi_77_pred_5;
                    uint _3388 = _3387 + 1u;
                    if (_3388 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3381 = _3222;
                        _3382 = _3224;
                        _3383 = _3226;
                        _3384 = _3228;
                        _3385 = _3230;
                        _3386 = _3232;
                        _3387 = _3388;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _3226;
                frontier_phi_58_59_ladder_1 = _3232;
                frontier_phi_58_59_ladder_2 = _3230;
                frontier_phi_58_59_ladder_3 = _3228;
                frontier_phi_58_59_ladder_4 = _3224;
                frontier_phi_58_59_ladder_5 = _3222;
            }
            else
            {
                frontier_phi_58_59_ladder = _3104;
                frontier_phi_58_59_ladder_1 = _3110;
                frontier_phi_58_59_ladder_2 = _3108;
                frontier_phi_58_59_ladder_3 = _3106;
                frontier_phi_58_59_ladder_4 = _3102;
                frontier_phi_58_59_ladder_5 = _3100;
            }
            _3221 = frontier_phi_58_59_ladder_5;
            _3223 = frontier_phi_58_59_ladder_4;
            _3225 = frontier_phi_58_59_ladder;
            _3227 = frontier_phi_58_59_ladder_3;
            _3229 = frontier_phi_58_59_ladder_2;
            _3231 = frontier_phi_58_59_ladder_1;
        }
        float _3236 = isnan(1.0) ? _1251 : (isnan(_1251) ? 1.0 : min(_1251, 1.0));
        _3012 = (_3236 * _3227) + _2464;
        _3014 = (_3236 * _3229) + _2466;
        _3016 = (_3236 * _3231) + _2468;
        _3018 = ((_3221 * 0.039999999105930328369140625) * _3236) + _2797;
        _3020 = ((_3223 * 0.039999999105930328369140625) * _3236) + _2799;
        _3022 = ((_3225 * 0.039999999105930328369140625) * _3236) + _2801;
    }
    else
    {
        _3012 = _2464;
        _3014 = _2466;
        _3016 = _2468;
        _3018 = _2797;
        _3020 = _2799;
        _3022 = _2801;
    }
    float _5059 = isnan(0.0) ? _1236 : (isnan(_1236) ? 0.0 : max(_1236, 0.0));
    float _5070 = isnan(0.0) ? _1237 : (isnan(_1237) ? 0.0 : max(_1237, 0.0));
    float _5081 = isnan(0.0) ? _1238 : (isnan(_1238) ? 0.0 : max(_1238, 0.0));
    float _3039 = ((isnan(1.0) ? _5059 : (isnan(_5059) ? 1.0 : min(_5059, 1.0))) * (_3012 + ((isnan(0.0) ? _2006 : (isnan(_2006) ? 0.0 : max(_2006, 0.0))) * _1251))) + ((_3018 + ((isnan(0.0) ? _2296 : (isnan(_2296) ? 0.0 : max(_2296, 0.0))) * _2085)) * cbPerFrame._m0[3u].x);
    float _3040 = ((isnan(1.0) ? _5070 : (isnan(_5070) ? 1.0 : min(_5070, 1.0))) * (_3014 + ((isnan(0.0) ? _2009 : (isnan(_2009) ? 0.0 : max(_2009, 0.0))) * _1251))) + ((_3020 + ((isnan(0.0) ? _2299 : (isnan(_2299) ? 0.0 : max(_2299, 0.0))) * _2085)) * cbPerFrame._m0[3u].x);
    float _3041 = ((isnan(1.0) ? _5081 : (isnan(_5081) ? 1.0 : min(_5081, 1.0))) * (_3016 + ((isnan(0.0) ? _2012 : (isnan(_2012) ? 0.0 : max(_2012, 0.0))) * _1251))) + ((_3022 + ((isnan(0.0) ? _2302 : (isnan(_2302) ? 0.0 : max(_2302, 0.0))) * _2085)) * cbPerFrame._m0[3u].x);
    uint _3042 = _297 + 6u;
    float _3050 = _1188 / cbSceneParam._m0[86u].x;
    float _3051 = _1189 / cbSceneParam._m0[86u].y;
    vec4 _3065 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3050, _3051, (log2((isnan(cbSceneParam._m0[77u].w) ? _1111 : (isnan(_1111) ? cbSceneParam._m0[77u].w : min(_1111, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3067 = _3065.x;
    float _3068 = _3065.y;
    float _3069 = _3065.z;
    float _3070 = _3065.w;
    float _3163;
    float _3165;
    float _3167;
    float _3169;
    if (_1111 > cbSceneParam._m0[78u].w)
    {
        float _3125 = isnan(_1111) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _1111 : min(cbSceneParam._m0[80u].w, _1111));
        float _3126 = _3125 / _1111;
        float _3137 = _3126 * _1161;
        float _3138 = _1162 * _3126;
        float _3139 = (-0.0) - _3138;
        float _3141 = _3126 * _1163;
        float _3143 = (cbSceneParam._m0[77u].w * _3139) / _3125;
        float _3144 = _3143 + cbSceneParam._m0[79u].w;
        float _3145 = cbSceneParam._m0[79u].w - _3138;
        float _3151 = sqrt(((_3137 * _3137) + (_3138 * _3138)) + (_3141 * _3141));
        float _3154 = (1.0 - (cbSceneParam._m0[77u].w / _3125)) * _3151;
        float _3159 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3161 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3338;
        if (abs((_3139 - _3143) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3338 = ((((_3144 > 0.0) ? exp2(_3159 * _3144) : (2.0 - exp2(_3161 * _3144))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3154;
        }
        else
        {
            float _3282 = 1.0 / cbSceneParam._m0[80u].x;
            float _3283 = isnan(_3145) ? _3144 : (isnan(_3144) ? _3145 : max(_3144, _3145));
            float _3284 = isnan(_3145) ? _3144 : (isnan(_3144) ? _3145 : min(_3144, _3145));
            float _3293 = isnan(0.0) ? _3283 : (isnan(_3283) ? 0.0 : min(_3283, 0.0));
            float _3294 = isnan(0.0) ? _3284 : (isnan(_3284) ? 0.0 : min(_3284, 0.0));
            _3338 = ((abs(_3151 / _3139) * cbSceneParam._m0[80u].y) * ((((_3293 - _3294) * 2.0) - ((exp2(_3159 * (isnan(0.0) ? _3283 : (isnan(_3283) ? 0.0 : max(_3283, 0.0)))) - exp2(_3159 * (isnan(0.0) ? _3284 : (isnan(_3284) ? 0.0 : max(_3284, 0.0))))) * _3282)) - ((exp2(_3161 * _3293) - exp2(_3161 * _3294)) * _3282))) + (_3154 * cbSceneParam._m0[80u].z);
        }
        vec4 _3340 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3050, _3051, 1.0), 0.0);
        float _3349 = exp2((_3338 * (-1.44269502162933349609375)) * (1.0 - _3340.w));
        float _3350 = log2(_3349);
        float _3366 = log2(_3070);
        _3163 = (exp2(_3366 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3350 * cbSceneParam._m0[78u].x)) * _3340.x) / cbSceneParam._m0[78u].x)) + _3067;
        _3165 = (exp2(_3366 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3350 * cbSceneParam._m0[78u].y)) * _3340.y) / cbSceneParam._m0[78u].y)) + _3068;
        _3167 = (exp2(_3366 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3350 * cbSceneParam._m0[78u].z)) * _3340.z) / cbSceneParam._m0[78u].z)) + _3069;
        _3169 = _3349 * _3070;
    }
    else
    {
        _3163 = _3067;
        _3165 = _3068;
        _3167 = _3069;
        _3169 = _3070;
    }
    bool _3376;
    vec4 _3179;
    vec4 _3201;
    float _3203;
    float _3207;
    float _3208;
    float _3209;
    float _3210;
    bool _3220;
    for (;;)
    {
        _3179 = cbMatDynParam._m0[0u];
        float _3181 = roundEven(_3179.y);
        bool _3182 = _3181 == 3.0;
        float _3183 = log2(_3169);
        float _3190 = exp2(_3183 * cbSceneParam._m0[78u].x) * _3039;
        float _3191 = exp2(_3183 * cbSceneParam._m0[78u].y) * _3040;
        float _3192 = exp2(_3183 * cbSceneParam._m0[78u].z) * _3041;
        float _3199 = _1177 + (-0.5);
        _3201 = cbMtdParam._m0[1u];
        _3203 = _3201.y * _3199;
        float _3206 = (_3181 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3207 = _3206 * (_3182 ? _3190 : (_3190 + (cbSceneParam._m0[72u].w * _3163)));
        _3208 = _3206 * (_3182 ? _3191 : (_3191 + (cbSceneParam._m0[72u].w * _3165)));
        _3209 = _3206 * (_3182 ? _3192 : (_3192 + (cbSceneParam._m0[72u].w * _3167)));
        _3210 = _3199 * 0.999000012874603271484375;
        _3220 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3220)
        {
            if ((cbInstanceData._m0[_297 + 7u].x + _3210) < 0.5)
            {
                _3376 = true;
                break;
            }
        }
        uint _3317 = _1226 + uint(_3179.w);
        if ((cbInstanceData._m0[_3317].w < 1.0) && ((cbInstanceData._m0[_3317].w + _3210) < 0.5))
        {
            _3376 = true;
            break;
        }
        if ((_3203 + 1.0) < _3201.x)
        {
            _3376 = true;
            break;
        }
        _3376 = false;
        break;
    }
    float _3581;
    if (_3376)
    {
        discard_state = true;
        _3581 = 0.0;
    }
    else
    {
        _3581 = cbInstanceData._m0[_3042].w;
    }
    SV_Target.x = _3207;
    SV_Target.y = _3208;
    SV_Target.z = _3209;
    SV_Target.w = _3581;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_3042].w;
    discard_exit();
}


