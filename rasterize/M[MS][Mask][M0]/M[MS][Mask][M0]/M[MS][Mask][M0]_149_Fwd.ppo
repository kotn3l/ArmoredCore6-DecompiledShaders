#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_0;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 13) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_22;
layout(set = 0, binding = 14) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_29;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_10;
layout(set = 0, binding = 20) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_6;
layout(set = 0, binding = 23) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_8;
layout(set = 0, binding = 24) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_9;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1631;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _242 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _243 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _244 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _250 = inversesqrt(dot(vec3(_242, _243, _244), vec3(_242, _243, _244)));
    float _251 = _250 * _242;
    float _252 = _250 * _243;
    float _253 = _250 * _244;
    float _257 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _258 = _257 * NORMAL.x;
    float _259 = _257 * NORMAL.y;
    float _260 = _257 * NORMAL.z;
    float _264 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _265 = _264 * TANGENT.x;
    float _266 = _264 * TANGENT.y;
    float _267 = _264 * TANGENT.z;
    float _276 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _278 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _279 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3932 = isnan(0.0) ? _276 : (isnan(_276) ? 0.0 : max(_276, 0.0));
    float _3943 = isnan(0.0) ? _278 : (isnan(_278) ? 0.0 : max(_278, 0.0));
    float _3954 = isnan(0.0) ? _279 : (isnan(_279) ? 0.0 : max(_279, 0.0));
    uint _289 = uint(roundEven(NORMAL.w)) * 13u;
    uint _294 = _289 + 1u;
    uint _298 = _289 + 2u;
    float _307 = sqrt(((cbInstanceData._m0[_294].x * cbInstanceData._m0[_294].x) + (cbInstanceData._m0[_289].x * cbInstanceData._m0[_289].x)) + (cbInstanceData._m0[_298].x * cbInstanceData._m0[_298].x));
    float _308 = _307 * TEXCOORD.z;
    float _309 = _307 * TEXCOORD.w;
    vec4 _322 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _308) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _309) + cbTextureTilingScale._m0[13u].w));
    vec4 _345 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _371 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _376 = _371.x * cbMtdParam._m0[11u].x;
    float _377 = _371.y * cbMtdParam._m0[11u].y;
    float _378 = _371.z * cbMtdParam._m0[11u].z;
    vec4 _397 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _308) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _309) + cbTextureTilingScale._m0[5u].w));
    vec4 _416 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _454 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _456 = _454.x;
    float _468 = dot(vec4(_456, _454.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _485 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _416.x) * 2.0) - ((((_456 - _468) * cbMtdParam._m0[24u].z) + _468) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3965 = isnan(0.0) ? _485 : (isnan(_485) ? 0.0 : max(_485, 0.0));
    float _486 = isnan(1.0) ? _3965 : (isnan(_3965) ? 1.0 : min(_3965, 1.0));
    float _493 = (_486 * ((_397.x * cbMtdParam._m0[12u].x) - _376)) + _376;
    float _494 = (_486 * ((_397.y * cbMtdParam._m0[12u].y) - _377)) + _377;
    float _495 = (_486 * ((_397.z * cbMtdParam._m0[12u].z) - _378)) + _378;
    vec4 _512 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _308) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _309) + cbTextureTilingScale._m0[3u].w));
    vec4 _532 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _534 = _532.x;
    float _544 = dot(vec4(_534, _532.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _558 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _416.y) * 2.0) - ((((_534 - _544) * cbMtdParam._m0[24u].z) + _544) * cbMtdParam._m0[20u].w))) + 1.0;
    float _3976 = isnan(0.0) ? _558 : (isnan(_558) ? 0.0 : max(_558, 0.0));
    float _559 = isnan(1.0) ? _3976 : (isnan(_3976) ? 1.0 : min(_3976, 1.0));
    float _566 = (_559 * ((_512.x * cbMtdParam._m0[13u].x) - _493)) + _493;
    float _567 = (_559 * ((_512.y * cbMtdParam._m0[13u].y) - _494)) + _494;
    float _568 = (_559 * ((_512.z * cbMtdParam._m0[13u].z) - _495)) + _495;
    vec4 _586 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_9, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[24u].x * _308) + cbTextureTilingScale._m0[24u].z, (cbTextureTilingScale._m0[24u].y * _309) + cbTextureTilingScale._m0[24u].w));
    vec4 _603 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[25u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _605 = _603.x;
    float _615 = dot(vec4(_605, _603.yzw), vec4(cbMtdParam._m0[30u].w, cbMtdParam._m0[31u].xy, 0.0));
    float _627 = ((cbMtdParam._m0[25u].x * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.z) - _416.z) * 2.0) - ((((_605 - _615) * cbMtdParam._m0[24u].z) + _615) * cbMtdParam._m0[20u].z))) + 1.0;
    float _3987 = isnan(0.0) ? _627 : (isnan(_627) ? 0.0 : max(_627, 0.0));
    float _628 = isnan(1.0) ? _3987 : (isnan(_3987) ? 1.0 : min(_3987, 1.0));
    float _638 = (_345.x * cbMtdParam._m0[9u].x) * ((_628 * ((_586.x * cbMtdParam._m0[14u].x) - _566)) + _566);
    float _639 = (_345.y * cbMtdParam._m0[9u].y) * ((_628 * ((_586.y * cbMtdParam._m0[14u].y) - _567)) + _567);
    float _640 = (_345.z * cbMtdParam._m0[9u].z) * ((_628 * ((_586.z * cbMtdParam._m0[14u].z) - _568)) + _568);
    float _644 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _322.x) * _638;
    float _647 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _322.y) * _639;
    float _650 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _322.z) * _640;
    float _658 = (((_638 - _644) * (isnan(1.0) ? _3932 : (isnan(_3932) ? 1.0 : min(_3932, 1.0)))) + _644) * 4.55000019073486328125;
    float _660 = (((_639 - _647) * (isnan(1.0) ? _3943 : (isnan(_3943) ? 1.0 : min(_3943, 1.0)))) + _647) * 4.55000019073486328125;
    float _662 = (((_640 - _650) * (isnan(1.0) ? _3954 : (isnan(_3954) ? 1.0 : min(_3954, 1.0)))) + _650) * 4.55000019073486328125;
    vec4 _680 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _308) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _309) + cbTextureTilingScale._m0[14u].w));
    vec4 _699 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _308) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _309) + cbTextureTilingScale._m0[20u].w));
    vec4 _724 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _308) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _309) + cbTextureTilingScale._m0[4u].w));
    vec4 _741 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _743 = _741.x;
    float _744 = _741.y;
    float _745 = _741.z;
    float _752 = ((_724.x - _743) * _486) + _743;
    float _753 = ((_724.y - _744) * _486) + _744;
    float _754 = ((_724.z - _745) * _486) + _745;
    vec4 _766 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _308) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _309) + cbTextureTilingScale._m0[2u].w));
    float _777 = ((_766.x - _752) * _559) + _752;
    float _778 = ((_766.y - _753) * _559) + _753;
    float _779 = ((_766.z - _754) * _559) + _754;
    vec4 _791 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[23u].x * _308) + cbTextureTilingScale._m0[23u].z, (cbTextureTilingScale._m0[23u].y * _309) + cbTextureTilingScale._m0[23u].w));
    float _804 = ((_791.z - _779) * _628) + _779;
    float _807 = ((((_791.x - _777) * _628) + _777) * 2.0) + (-1.0);
    float _808 = ((((_791.y - _778) * _628) + _778) * 2.0) + (-1.0);
    float _809 = dot(vec2(_807, _808), vec2(_807, _808));
    float _3998 = isnan(0.0) ? _809 : (isnan(_809) ? 0.0 : max(_809, 0.0));
    float _814 = sqrt(1.0 - (isnan(1.0) ? _3998 : (isnan(_3998) ? 1.0 : min(_3998, 1.0))));
    vec4 _832 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _844 = (_807 + ((((_699.x * 2.0) + (-1.0)) * TEXCOORD_11.x) * cbMtdParam._m0[20u].x)) + (((_832.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _845 = (_808 + ((((_699.y * 2.0) + (-1.0)) * TEXCOORD_11.y) * cbMtdParam._m0[20u].x)) + (((_832.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _848 = fma(_814, _258, fma(_845, _265, _844 * _251));
    float _851 = fma(_814, _259, fma(_845, _266, _844 * _252));
    float _854 = fma(_814, _260, fma(_845, _267, _844 * _253));
    float _858 = inversesqrt(dot(vec3(_848, _851, _854), vec3(_848, _851, _854)));
    vec4 _885 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _308) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _309) + cbTextureTilingScale._m0[11u].w));
    float _887 = _885.x;
    float _888 = 1.0 - _887;
    float _894 = (cbMtdParam._m0[19u].x + dot(vec4(_858 * _848, _858 * _851, _858 * _854, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_887 - _888) * cbMtdParam._m0[24u].w) + _888) * cbMtdParam._m0[21u].z);
    float _4009 = isnan(0.0) ? _894 : (isnan(_894) ? 0.0 : max(_894, 0.0));
    float _895 = isnan(1.0) ? _4009 : (isnan(_4009) ? 1.0 : min(_4009, 1.0));
    float _897 = (-0.0) - cbMtdParam._m0[24u].x;
    float _899 = isnan(0.0) ? _897 : (isnan(_897) ? 0.0 : max(_897, 0.0));
    float _900 = isnan(1.0) ? _899 : (isnan(_899) ? 1.0 : min(_899, 1.0));
    float _907 = _895 - ((_895 * TEXCOORD_8.x) * _900);
    float _908 = _895 - ((_895 * TEXCOORD_8.y) * _900);
    float _909 = _895 - ((_895 * TEXCOORD_8.z) * _900);
    float _916 = (_907 * ((_680.x * cbMtdParam._m0[18u].x) - _658)) + _658;
    float _917 = (_908 * ((_680.y * cbMtdParam._m0[18u].y) - _660)) + _660;
    float _918 = (_909 * ((_680.z * cbMtdParam._m0[18u].z) - _662)) + _662;
    float _933 = sqrt(((cbInstanceData._m0[_294].x * cbInstanceData._m0[_294].x) + (cbInstanceData._m0[_289].x * cbInstanceData._m0[_289].x)) + (cbInstanceData._m0[_298].x * cbInstanceData._m0[_298].x));
    float _934 = _933 * TEXCOORD.z;
    float _935 = _933 * TEXCOORD.w;
    vec4 _947 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _934) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _935) + cbTextureTilingScale._m0[19u].w));
    float _949 = _947.x;
    float _950 = 1.0 - _949;
    float _978 = (TEXCOORD_8.x - ((cbMtdParam._m0[22u].w * (1.0 - TEXCOORD_8.x)) * ((((_949 - _950) * cbMtdParam._m0[24u].y) + _950) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _4030 = isnan(0.0) ? _978 : (isnan(_978) ? 0.0 : max(_978, 0.0));
    float _979 = isnan(1.0) ? _4030 : (isnan(_4030) ? 1.0 : min(_4030, 1.0));
    float _987 = ((((cbMtdParam._m0[10u].x - _916) * TEXCOORD_8.x) * cbMtdParam._m0[23u].w) * _979) + _916;
    float _988 = ((((cbMtdParam._m0[10u].y - _917) * TEXCOORD_8.y) * cbMtdParam._m0[23u].w) * _979) + _917;
    float _989 = (((cbMtdParam._m0[23u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _918)) * _979) + _918;
    float _994 = (((_699.z - _804) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _804;
    float _998 = ((_832.z - _994) * cbMtdParam._m0[19u].w) + _994;
    vec4 _1014 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _308) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _309) + cbTextureTilingScale._m0[15u].w));
    float _1021 = (_1014.x * 2.0) + (-1.0);
    float _1022 = (_1014.y * 2.0) + (-1.0);
    float _1023 = dot(vec2(_1021, _1022), vec2(_1021, _1022));
    float _4041 = isnan(0.0) ? _1023 : (isnan(_1023) ? 0.0 : max(_1023, 0.0));
    float _1031 = ((_1014.z - _998) * _907) + _998;
    float _1034 = ((cbMtdParam._m0[23u].y - _1031) * _979) + _1031;
    vec4 _1055 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _934) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _935) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _1061 = (_1055.x * 2.0) + (-1.0);
    float _1062 = (_1055.y * 2.0) + (-1.0);
    float _1063 = dot(vec2(_1061, _1062), vec2(_1061, _1062));
    float _4052 = isnan(0.0) ? _1063 : (isnan(_1063) ? 0.0 : max(_1063, 0.0));
    float _1078 = ((sqrt(1.0 - (isnan(1.0) ? _4041 : (isnan(_4041) ? 1.0 : min(_4041, 1.0)))) - _814) * _909) + _814;
    float _1081 = (((_1021 - _844) * _907) + _844) + (cbMtdParam._m0[21u].x * _844);
    float _1082 = (((_1022 - _845) * _908) + _845) + (cbMtdParam._m0[21u].x * _845);
    float _1093 = (((_1061 - _1081) + (_1081 * cbMtdParam._m0[22u].z)) * _979) + _1081;
    float _1094 = (((_1062 - _1082) + (_1082 * cbMtdParam._m0[22u].z)) * _979) + _1082;
    float _1095 = (_979 * (sqrt(1.0 - (isnan(1.0) ? _4052 : (isnan(_4052) ? 1.0 : min(_4052, 1.0)))) - _1078)) + _1078;
    float _1097 = cbMtdParam._m0[22u].x + _832.w;
    float _1100 = fma(_1095, _258, fma(_1094, _265, _1093 * _251));
    float _1103 = fma(_1095, _259, fma(_1094, _266, _1093 * _252));
    float _1106 = fma(_1095, _260, fma(_1094, _267, _1093 * _253));
    float _1110 = inversesqrt(dot(vec3(_1100, _1103, _1106), vec3(_1100, _1103, _1106)));
    float _1111 = _1110 * _1100;
    float _1112 = _1110 * _1103;
    float _1113 = _1110 * _1106;
    float _4063 = isnan(0.0) ? _1034 : (isnan(_1034) ? 0.0 : max(_1034, 0.0));
    float _1114 = isnan(1.0) ? _4063 : (isnan(_4063) ? 1.0 : min(_4063, 1.0));
    float _4074 = isnan(0.0) ? _1097 : (isnan(_1097) ? 0.0 : max(_1097, 0.0));
    float _4085 = isnan(0.0) ? _987 : (isnan(_987) ? 0.0 : max(_987, 0.0));
    float _4096 = isnan(0.0) ? _988 : (isnan(_988) ? 0.0 : max(_988, 0.0));
    float _4107 = isnan(0.0) ? _989 : (isnan(_989) ? 0.0 : max(_989, 0.0));
    float _1132 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _1172 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _1182 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _1172);
    float _1183 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _1172);
    float _1184 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _1172);
    float _1188 = inversesqrt(dot(vec3(_1182, _1183, _1184), vec3(_1182, _1183, _1184)));
    float _1189 = _1182 * _1188;
    float _1190 = _1183 * _1188;
    float _1191 = _1184 * _1188;
    float _1197 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1198 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1216 = fma(_1113, cbSceneParam._m0[5u].z, fma(_1112, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _1111));
    float _1219 = fma(_1113, cbSceneParam._m0[6u].z, fma(_1112, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _1111));
    float _1222 = fma(_1113, cbSceneParam._m0[7u].z, fma(_1112, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _1111));
    uint _1236 = (_289 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _1242 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4085 : (isnan(_4085) ? 1.0 : min(_4085, 1.0)))) * cbInstanceData._m0[_1236].x;
    float _1243 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4096 : (isnan(_4096) ? 1.0 : min(_4096, 1.0)))) * cbInstanceData._m0[_1236].y;
    float _1244 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4107 : (isnan(_4107) ? 1.0 : min(_4107, 1.0)))) * cbInstanceData._m0[_1236].z;
    float _4118 = isnan(0.0) ? _1242 : (isnan(_1242) ? 0.0 : max(_1242, 0.0));
    float _1245 = isnan(1.0) ? _4118 : (isnan(_4118) ? 1.0 : min(_4118, 1.0));
    float _4129 = isnan(0.0) ? _1243 : (isnan(_1243) ? 0.0 : max(_1243, 0.0));
    float _1246 = isnan(1.0) ? _4129 : (isnan(_4129) ? 1.0 : min(_4129, 1.0));
    float _4140 = isnan(0.0) ? _1244 : (isnan(_1244) ? 0.0 : max(_1244, 0.0));
    float _1247 = isnan(1.0) ? _4140 : (isnan(_4140) ? 1.0 : min(_4140, 1.0));
    vec4 _1256 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1197, cbSceneParam._m0[86u].y * _1198));
    float _1260 = ((isnan(1.0) ? _4074 : (isnan(_4074) ? 1.0 : min(_4074, 1.0))) * TEXCOORD_5.w) * _1256.x;
    float _1261 = dot(vec3(_1111, _1112, _1113), vec3(_1189, _1190, _1191));
    float _1264 = _1261 * 2.0;
    float _1268 = (_1264 * _1111) - _1189;
    float _1269 = (_1264 * _1112) - _1190;
    float _1270 = (_1264 * _1113) - _1191;
    float _1274 = abs(dot(vec3(_1189, _1190, _1191), vec3(_1111, _1112, _1113)));
    float _4151 = isnan(0.0) ? _1274 : (isnan(_1274) ? 0.0 : max(_1274, 0.0));
    float _1276 = sqrt(_1114);
    float _1289 = exp2((_1276 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4151 : (isnan(_4151) ? 1.0 : min(_4151, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1276 * 3.0));
    float _1321 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1325 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1329 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1630;
    float _1632;
    float _1633;
    float _1634;
    float _1635;
    float _1636;
    float _1637;
    float _1638;
    float _1639;
    float _1640;
    float _1641;
    float _1642;
    float _1643;
    float _1644;
    float _1645;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1355 = fma(_1329, cbModelParam._m0[26u].z, fma(_1325, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1321));
        float _1359 = fma(_1329, cbModelParam._m0[27u].z, fma(_1325, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1321));
        float _1363 = fma(_1329, cbModelParam._m0[28u].z, fma(_1325, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1321));
        float _1388 = _1321 + _1111;
        float _1389 = _1325 + _1112;
        float _1390 = _1329 + _1113;
        float _1400 = fma(_1390, cbModelParam._m0[26u].z, fma(_1389, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1388)) - _1355;
        float _1401 = fma(_1390, cbModelParam._m0[27u].z, fma(_1389, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1388)) - _1359;
        float _1402 = fma(_1390, cbModelParam._m0[28u].z, fma(_1389, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1388)) - _1363;
        float _1406 = inversesqrt(dot(vec3(_1400, _1401, _1402), vec3(_1400, _1401, _1402)));
        float _1419 = ((_1406 * _1400) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1355 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1420 = ((_1406 * _1401) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1359 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1421 = ((_1406 * _1402) / cbModelParam._m0[34u].z) + ((((((_1363 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1424 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1419, _1420, _1421), 0.0);
        vec4 _1431 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1419, _1420, _1421), 0.0);
        vec4 _1438 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1419, _1420, _1421), 0.0);
        vec4 _1445 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1419, _1420, _1421), 0.0);
        float _1458 = exp2((_1424.w + (-0.5)) * 20.0) * 2.0;
        float _1459 = _1458 * (_1424.x + (-0.5));
        float _1460 = _1458 * (_1424.y + (-0.5));
        float _1461 = _1458 * (_1424.z + (-0.5));
        float _1468 = exp2((_1431.w + (-0.5)) * 20.0) * 2.0;
        float _1469 = _1468 * (_1431.x + (-0.5));
        float _1470 = _1468 * (_1431.y + (-0.5));
        float _1471 = _1468 * (_1431.z + (-0.5));
        float _1478 = exp2((_1438.w + (-0.5)) * 20.0) * 2.0;
        float _1479 = _1478 * (_1438.x + (-0.5));
        float _1480 = _1478 * (_1438.y + (-0.5));
        float _1481 = _1478 * (_1438.z + (-0.5));
        float _1488 = exp2((_1445.w + (-0.5)) * 20.0) * 2.0;
        float _1489 = _1488 * (_1445.x + (-0.5));
        float _1490 = _1488 * (_1445.y + (-0.5));
        float _1491 = _1488 * (_1445.z + (-0.5));
        float _1492 = isnan(0.0) ? _1489 : (isnan(_1489) ? 0.0 : max(_1489, 0.0));
        float _1493 = isnan(0.0) ? _1490 : (isnan(_1490) ? 0.0 : max(_1490, 0.0));
        float _1494 = isnan(0.0) ? _1491 : (isnan(_1491) ? 0.0 : max(_1491, 0.0));
        float _1495 = _1459 * 0.5;
        float _1496 = _1469 * 0.5;
        float _1497 = _1479 * 0.5;
        float _1498 = dot(vec3(_1495, _1496, _1497), vec3(_1495, _1496, _1497));
        float _1503 = (_1498 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1498);
        float _1512 = (dot(vec3(_1111, _1112, _1113), vec3(_1503 * _1495, _1503 * _1496, _1503 * _1497)) + 1.0) * 0.5;
        float _4177 = isnan(0.0) ? _1512 : (isnan(_1512) ? 0.0 : max(_1512, 0.0));
        float _1522 = sqrt(((_1496 * _1496) + (_1495 * _1495)) + (_1497 * _1497)) / (_1492 + 9.9999997473787516355514526367188e-06);
        float _4188 = isnan(0.0) ? _1522 : (isnan(_1522) ? 0.0 : max(_1522, 0.0));
        float _1523 = isnan(1.0) ? _4188 : (isnan(_4188) ? 1.0 : min(_4188, 1.0));
        float _1524 = _1523 * 2.0;
        float _1528 = (1.0 - _1523) / (_1523 + 1.0);
        float _4199 = isnan(0.0) ? _1528 : (isnan(_1528) ? 0.0 : max(_1528, 0.0));
        float _1529 = isnan(1.0) ? _4199 : (isnan(_4199) ? 1.0 : min(_4199, 1.0));
        float _1538 = ((((1.0 - _1529) * (_1524 + 2.0)) * exp2(log2(isnan(1.0) ? _4177 : (isnan(_4177) ? 1.0 : min(_4177, 1.0))) * (_1524 + 1.0))) + _1529) * _1492;
        float _1539 = _1460 * 0.5;
        float _1540 = _1470 * 0.5;
        float _1541 = _1480 * 0.5;
        float _1542 = dot(vec3(_1539, _1540, _1541), vec3(_1539, _1540, _1541));
        float _1547 = (_1542 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1542);
        float _1555 = (dot(vec3(_1111, _1112, _1113), vec3(_1547 * _1539, _1547 * _1540, _1547 * _1541)) + 1.0) * 0.5;
        float _4210 = isnan(0.0) ? _1555 : (isnan(_1555) ? 0.0 : max(_1555, 0.0));
        float _1564 = sqrt(((_1540 * _1540) + (_1539 * _1539)) + (_1541 * _1541)) / (_1493 + 9.9999997473787516355514526367188e-06);
        float _4221 = isnan(0.0) ? _1564 : (isnan(_1564) ? 0.0 : max(_1564, 0.0));
        float _1565 = isnan(1.0) ? _4221 : (isnan(_4221) ? 1.0 : min(_4221, 1.0));
        float _1566 = _1565 * 2.0;
        float _1570 = (1.0 - _1565) / (_1565 + 1.0);
        float _4232 = isnan(0.0) ? _1570 : (isnan(_1570) ? 0.0 : max(_1570, 0.0));
        float _1571 = isnan(1.0) ? _4232 : (isnan(_4232) ? 1.0 : min(_4232, 1.0));
        float _1580 = ((((1.0 - _1571) * (_1566 + 2.0)) * exp2(log2(isnan(1.0) ? _4210 : (isnan(_4210) ? 1.0 : min(_4210, 1.0))) * (_1566 + 1.0))) + _1571) * _1493;
        float _1581 = _1461 * 0.5;
        float _1582 = _1471 * 0.5;
        float _1583 = _1481 * 0.5;
        float _1584 = dot(vec3(_1581, _1582, _1583), vec3(_1581, _1582, _1583));
        float _1589 = (_1584 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1584);
        float _1597 = (dot(vec3(_1111, _1112, _1113), vec3(_1589 * _1581, _1589 * _1582, _1589 * _1583)) + 1.0) * 0.5;
        float _4243 = isnan(0.0) ? _1597 : (isnan(_1597) ? 0.0 : max(_1597, 0.0));
        float _1606 = sqrt(((_1582 * _1582) + (_1581 * _1581)) + (_1583 * _1583)) / (_1494 + 9.9999997473787516355514526367188e-06);
        float _4254 = isnan(0.0) ? _1606 : (isnan(_1606) ? 0.0 : max(_1606, 0.0));
        float _1607 = isnan(1.0) ? _4254 : (isnan(_4254) ? 1.0 : min(_4254, 1.0));
        float _1608 = _1607 * 2.0;
        float _1612 = (1.0 - _1607) / (_1607 + 1.0);
        float _4265 = isnan(0.0) ? _1612 : (isnan(_1612) ? 0.0 : max(_1612, 0.0));
        float _1613 = isnan(1.0) ? _4265 : (isnan(_4265) ? 1.0 : min(_4265, 1.0));
        float _1622 = ((((1.0 - _1613) * (_1608 + 2.0)) * exp2(log2(isnan(1.0) ? _4243 : (isnan(_4243) ? 1.0 : min(_4243, 1.0))) * (_1608 + 1.0))) + _1613) * _1494;
        _1630 = _1461;
        _1632 = _1460;
        _1633 = _1459;
        _1634 = _1471;
        _1635 = _1470;
        _1636 = _1469;
        _1637 = _1481;
        _1638 = _1480;
        _1639 = _1479;
        _1640 = _1494;
        _1641 = _1493;
        _1642 = _1492;
        _1643 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1538 : (isnan(_1538) ? 0.0 : max(_1538, 0.0)));
        _1644 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1580 : (isnan(_1580) ? 0.0 : max(_1580, 0.0)));
        _1645 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1622 : (isnan(_1622) ? 0.0 : max(_1622, 0.0)));
    }
    else
    {
        _1630 = _1631;
        _1632 = _1631;
        _1633 = _1631;
        _1634 = _1631;
        _1635 = _1631;
        _1636 = _1631;
        _1637 = _1631;
        _1638 = _1631;
        _1639 = _1631;
        _1640 = _1631;
        _1641 = _1631;
        _1642 = _1631;
        _1643 = 0.0;
        _1644 = 0.0;
        _1645 = 0.0;
    }
    float _1937;
    float _1938;
    float _1939;
    float _1940;
    float _1941;
    float _1942;
    float _1943;
    float _1944;
    float _1945;
    float _1946;
    float _1947;
    float _1948;
    float _1949;
    float _1950;
    float _1951;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1668 = fma(_1329, cbModelParam._m0[30u].z, fma(_1325, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1321));
        float _1672 = fma(_1329, cbModelParam._m0[31u].z, fma(_1325, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1321));
        float _1676 = fma(_1329, cbModelParam._m0[32u].z, fma(_1325, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1321));
        float _1699 = _1321 + _1111;
        float _1700 = _1325 + _1112;
        float _1701 = _1329 + _1113;
        float _1711 = fma(_1701, cbModelParam._m0[30u].z, fma(_1700, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1699)) - _1668;
        float _1712 = fma(_1701, cbModelParam._m0[31u].z, fma(_1700, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1699)) - _1672;
        float _1713 = fma(_1701, cbModelParam._m0[32u].z, fma(_1700, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1699)) - _1676;
        float _1717 = inversesqrt(dot(vec3(_1711, _1712, _1713), vec3(_1711, _1712, _1713)));
        float _1730 = ((_1717 * _1711) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1668 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1731 = ((_1717 * _1712) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1672 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1732 = ((_1717 * _1713) / cbModelParam._m0[35u].z) + ((((((_1676 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1734 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1730, _1731, _1732), 0.0);
        vec4 _1741 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1730, _1731, _1732), 0.0);
        vec4 _1748 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1730, _1731, _1732), 0.0);
        vec4 _1755 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1730, _1731, _1732), 0.0);
        float _1767 = exp2((_1734.w + (-0.5)) * 20.0) * 2.0;
        float _1768 = _1767 * (_1734.x + (-0.5));
        float _1769 = _1767 * (_1734.y + (-0.5));
        float _1770 = _1767 * (_1734.z + (-0.5));
        float _1777 = exp2((_1741.w + (-0.5)) * 20.0) * 2.0;
        float _1778 = _1777 * (_1741.x + (-0.5));
        float _1779 = _1777 * (_1741.y + (-0.5));
        float _1780 = _1777 * (_1741.z + (-0.5));
        float _1787 = exp2((_1748.w + (-0.5)) * 20.0) * 2.0;
        float _1788 = _1787 * (_1748.x + (-0.5));
        float _1789 = _1787 * (_1748.y + (-0.5));
        float _1790 = _1787 * (_1748.z + (-0.5));
        float _1797 = exp2((_1755.w + (-0.5)) * 20.0) * 2.0;
        float _1798 = _1797 * (_1755.x + (-0.5));
        float _1799 = _1797 * (_1755.y + (-0.5));
        float _1800 = _1797 * (_1755.z + (-0.5));
        float _1801 = isnan(0.0) ? _1798 : (isnan(_1798) ? 0.0 : max(_1798, 0.0));
        float _1802 = isnan(0.0) ? _1799 : (isnan(_1799) ? 0.0 : max(_1799, 0.0));
        float _1803 = isnan(0.0) ? _1800 : (isnan(_1800) ? 0.0 : max(_1800, 0.0));
        float _1804 = _1768 * 0.5;
        float _1805 = _1778 * 0.5;
        float _1806 = _1788 * 0.5;
        float _1807 = dot(vec3(_1804, _1805, _1806), vec3(_1804, _1805, _1806));
        float _1812 = (_1807 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1807);
        float _1820 = (dot(vec3(_1111, _1112, _1113), vec3(_1812 * _1804, _1812 * _1805, _1812 * _1806)) + 1.0) * 0.5;
        float _4306 = isnan(0.0) ? _1820 : (isnan(_1820) ? 0.0 : max(_1820, 0.0));
        float _1829 = sqrt(((_1805 * _1805) + (_1804 * _1804)) + (_1806 * _1806)) / (_1801 + 9.9999997473787516355514526367188e-06);
        float _4317 = isnan(0.0) ? _1829 : (isnan(_1829) ? 0.0 : max(_1829, 0.0));
        float _1830 = isnan(1.0) ? _4317 : (isnan(_4317) ? 1.0 : min(_4317, 1.0));
        float _1831 = _1830 * 2.0;
        float _1835 = (1.0 - _1830) / (_1830 + 1.0);
        float _4328 = isnan(0.0) ? _1835 : (isnan(_1835) ? 0.0 : max(_1835, 0.0));
        float _1836 = isnan(1.0) ? _4328 : (isnan(_4328) ? 1.0 : min(_4328, 1.0));
        float _1845 = ((((1.0 - _1836) * (_1831 + 2.0)) * exp2(log2(isnan(1.0) ? _4306 : (isnan(_4306) ? 1.0 : min(_4306, 1.0))) * (_1831 + 1.0))) + _1836) * _1801;
        float _1846 = _1769 * 0.5;
        float _1847 = _1779 * 0.5;
        float _1848 = _1789 * 0.5;
        float _1849 = dot(vec3(_1846, _1847, _1848), vec3(_1846, _1847, _1848));
        float _1854 = (_1849 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1849);
        float _1862 = (dot(vec3(_1111, _1112, _1113), vec3(_1854 * _1846, _1854 * _1847, _1854 * _1848)) + 1.0) * 0.5;
        float _4339 = isnan(0.0) ? _1862 : (isnan(_1862) ? 0.0 : max(_1862, 0.0));
        float _1871 = sqrt(((_1847 * _1847) + (_1846 * _1846)) + (_1848 * _1848)) / (_1802 + 9.9999997473787516355514526367188e-06);
        float _4350 = isnan(0.0) ? _1871 : (isnan(_1871) ? 0.0 : max(_1871, 0.0));
        float _1872 = isnan(1.0) ? _4350 : (isnan(_4350) ? 1.0 : min(_4350, 1.0));
        float _1873 = _1872 * 2.0;
        float _1877 = (1.0 - _1872) / (_1872 + 1.0);
        float _4361 = isnan(0.0) ? _1877 : (isnan(_1877) ? 0.0 : max(_1877, 0.0));
        float _1878 = isnan(1.0) ? _4361 : (isnan(_4361) ? 1.0 : min(_4361, 1.0));
        float _1887 = ((((1.0 - _1878) * (_1873 + 2.0)) * exp2(log2(isnan(1.0) ? _4339 : (isnan(_4339) ? 1.0 : min(_4339, 1.0))) * (_1873 + 1.0))) + _1878) * _1802;
        float _1888 = _1770 * 0.5;
        float _1889 = _1780 * 0.5;
        float _1890 = _1790 * 0.5;
        float _1891 = dot(vec3(_1888, _1889, _1890), vec3(_1888, _1889, _1890));
        float _1896 = (_1891 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1891);
        float _1904 = (dot(vec3(_1111, _1112, _1113), vec3(_1896 * _1888, _1896 * _1889, _1896 * _1890)) + 1.0) * 0.5;
        float _4372 = isnan(0.0) ? _1904 : (isnan(_1904) ? 0.0 : max(_1904, 0.0));
        float _1913 = sqrt(((_1889 * _1889) + (_1888 * _1888)) + (_1890 * _1890)) / (_1803 + 9.9999997473787516355514526367188e-06);
        float _4383 = isnan(0.0) ? _1913 : (isnan(_1913) ? 0.0 : max(_1913, 0.0));
        float _1914 = isnan(1.0) ? _4383 : (isnan(_4383) ? 1.0 : min(_4383, 1.0));
        float _1915 = _1914 * 2.0;
        float _1919 = (1.0 - _1914) / (_1914 + 1.0);
        float _4394 = isnan(0.0) ? _1919 : (isnan(_1919) ? 0.0 : max(_1919, 0.0));
        float _1920 = isnan(1.0) ? _4394 : (isnan(_4394) ? 1.0 : min(_4394, 1.0));
        float _1929 = ((((1.0 - _1920) * (_1915 + 2.0)) * exp2(log2(isnan(1.0) ? _4372 : (isnan(_4372) ? 1.0 : min(_4372, 1.0))) * (_1915 + 1.0))) + _1920) * _1803;
        _1937 = _1770;
        _1938 = _1769;
        _1939 = _1768;
        _1940 = _1780;
        _1941 = _1779;
        _1942 = _1778;
        _1943 = _1790;
        _1944 = _1789;
        _1945 = _1788;
        _1946 = _1803;
        _1947 = _1802;
        _1948 = _1801;
        _1949 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1845 : (isnan(_1845) ? 0.0 : max(_1845, 0.0)));
        _1950 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1887 : (isnan(_1887) ? 0.0 : max(_1887, 0.0)));
        _1951 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1929 : (isnan(_1929) ? 0.0 : max(_1929, 0.0)));
    }
    else
    {
        _1937 = _1631;
        _1938 = _1631;
        _1939 = _1631;
        _1940 = _1631;
        _1941 = _1631;
        _1942 = _1631;
        _1943 = _1631;
        _1944 = _1631;
        _1945 = _1631;
        _1946 = _1631;
        _1947 = _1631;
        _1948 = _1631;
        _1949 = 0.0;
        _1950 = 0.0;
        _1951 = 0.0;
    }
    float _1961 = (cbModelParam._m0[1u].x * (_1949 - _1643)) + _1643;
    float _1962 = (cbModelParam._m0[1u].x * (_1950 - _1644)) + _1644;
    float _1963 = (cbModelParam._m0[1u].x * (_1951 - _1645)) + _1645;
    float _1984 = fma(_1963, cbSceneParam._m0[89u].z, fma(_1962, cbSceneParam._m0[89u].y, _1961 * cbSceneParam._m0[89u].x));
    float _1987 = fma(_1963, cbSceneParam._m0[90u].z, fma(_1962, cbSceneParam._m0[90u].y, _1961 * cbSceneParam._m0[90u].x));
    float _1990 = fma(_1963, cbSceneParam._m0[91u].z, fma(_1962, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1961));
    float _2005 = _1268 * 0.5;
    float _2006 = _1269 * 0.5;
    float _2007 = _1270 * 0.5;
    float _2008 = dot(vec4(_2005, _2006, _2007, 1.0), vec4(_1939, _1942, _1945, _1948));
    float _2011 = dot(vec4(_2005, _2006, _2007, 1.0), vec4(_1938, _1941, _1944, _1947));
    float _2014 = dot(vec4(_2005, _2006, _2007, 1.0), vec4(_1937, _1940, _1943, _1946));
    float _2048;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _2021 = dot(vec4(_2005, _2006, _2007, 1.0), vec4(_1630, _1634, _1637, _1640));
        float _2025 = dot(vec4(_2005, _2006, _2007, 1.0), vec4(_1632, _1635, _1638, _1641));
        float _2029 = dot(vec4(_2005, _2006, _2007, 1.0), vec4(_1633, _1636, _1639, _1642));
        float _2036 = dot(vec4(cbModelParam._m0[39u]), vec4(_2005, _2006, _2007, 1.0));
        _2048 = dot(vec3(isnan(0.0) ? _2029 : (isnan(_2029) ? 0.0 : max(_2029, 0.0)), isnan(0.0) ? _2025 : (isnan(_2025) ? 0.0 : max(_2025, 0.0)), isnan(0.0) ? _2021 : (isnan(_2021) ? 0.0 : max(_2021, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_2036) ? 0.0 : (isnan(0.0) ? _2036 : max(0.0, _2036))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _2048 = 1.0;
    }
    float _2059;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _2050 = dot(vec4(cbModelParam._m0[40u]), vec4(_2005, _2006, _2007, 1.0));
        _2059 = dot(vec3(isnan(0.0) ? _2008 : (isnan(_2008) ? 0.0 : max(_2008, 0.0)), isnan(0.0) ? _2011 : (isnan(_2011) ? 0.0 : max(_2011, 0.0)), isnan(0.0) ? _2014 : (isnan(_2014) ? 0.0 : max(_2014, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_2050) ? 0.0 : (isnan(0.0) ? _2050 : max(0.0, _2050))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _2059 = 1.0;
    }
    float _2063 = (_2059 * cbModelParam._m0[1u].x) + (_2048 * (1.0 - cbModelParam._m0[1u].x));
    float _2073 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _1114);
    float _2074 = isnan(_2073) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _2073 : min(cbModelParam._m0[25u].z, _2073));
    float _2154;
    float _2156;
    float _2158;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _2121 = fma(_1329, cbModelParam._m0[13u].z, fma(_1325, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1321)) + cbModelParam._m0[13u].w;
        float _2125 = fma(_1329, cbModelParam._m0[14u].z, fma(_1325, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1321)) + cbModelParam._m0[14u].w;
        float _2129 = fma(_1329, cbModelParam._m0[15u].z, fma(_1325, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1321)) + cbModelParam._m0[15u].w;
        float _2132 = fma(_1270, cbModelParam._m0[13u].z, fma(_1269, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1268));
        float _2135 = fma(_1270, cbModelParam._m0[14u].z, fma(_1269, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1268));
        float _2138 = fma(_1270, cbModelParam._m0[15u].z, fma(_1269, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1268));
        float _2166;
        if (_2132 > 0.0)
        {
            _2166 = abs((1.0 - _2121) / _2132);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_2132 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_2121 + 1.0) / _2132);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _2166 = frontier_phi_14_12_ladder;
        }
        float _2366;
        if (_2135 > 0.0)
        {
            _2366 = abs((1.0 - _2125) / _2135);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_2135 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_2125 + 1.0) / _2135);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2366 = frontier_phi_23_19_ladder;
        }
        float _2609;
        if (_2138 > 0.0)
        {
            _2609 = abs((1.0 - _2129) / _2138);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_2138 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_2129 + 1.0) / _2138);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2609 = frontier_phi_35_30_ladder;
        }
        float _2611 = isnan(_2366) ? _2166 : (isnan(_2166) ? _2366 : min(_2166, _2366));
        float _2612 = isnan(_2609) ? _2611 : (isnan(_2611) ? _2609 : min(_2611, _2609));
        float _2616 = (_2612 * _2132) + _2121;
        float _2617 = (_2612 * _2135) + _2125;
        float _2618 = (_2612 * _2138) + _2129;
        float _2619 = _2612 * 9.9999997473787516355514526367188e-05;
        float _2621 = (-1.0) - _2619;
        float _2623 = _2619 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2618 > _2623) || ((_2618 < _2621) || ((_2617 > _2623) || ((_2617 < _2621) || ((_2616 < _2621) || (_2616 > _2623))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2742 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2618, cbModelParam._m0[9u].z, fma(_2617, cbModelParam._m0[9u].y, _2616 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2618, cbModelParam._m0[10u].z, fma(_2617, cbModelParam._m0[10u].y, _2616 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2618, cbModelParam._m0[11u].z, fma(_2617, cbModelParam._m0[11u].y, _2616 * cbModelParam._m0[11u].x))), _2074);
            frontier_phi_13_35_ladder = _2742.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2742.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2742.x * cbModelParam._m0[1u].y;
        }
        _2154 = frontier_phi_13_35_ladder_2;
        _2156 = frontier_phi_13_35_ladder_1;
        _2158 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _2142 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1268, _1269, _1270), _2074);
        _2154 = _2142.x * cbModelParam._m0[1u].y;
        _2156 = _2142.y * cbModelParam._m0[1u].y;
        _2158 = _2142.z * cbModelParam._m0[1u].y;
    }
    float _2162 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _1114);
    float _2163 = isnan(_2162) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2162 : min(cbModelParam._m0[25u].w, _2162));
    float _2252;
    float _2254;
    float _2256;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2216 = fma(_1329, cbModelParam._m0[21u].z, fma(_1325, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1321)) + cbModelParam._m0[21u].w;
        float _2220 = fma(_1329, cbModelParam._m0[22u].z, fma(_1325, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1321)) + cbModelParam._m0[22u].w;
        float _2224 = fma(_1329, cbModelParam._m0[23u].z, fma(_1325, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1321)) + cbModelParam._m0[23u].w;
        float _2227 = fma(_1270, cbModelParam._m0[21u].z, fma(_1269, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1268));
        float _2230 = fma(_1270, cbModelParam._m0[22u].z, fma(_1269, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1268));
        float _2233 = fma(_1270, cbModelParam._m0[23u].z, fma(_1269, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1268));
        float _2371;
        if (_2227 > 0.0)
        {
            _2371 = abs((1.0 - _2216) / _2227);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_2227 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_2216 + 1.0) / _2227);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2371 = frontier_phi_25_21_ladder;
        }
        float _2636;
        if (_2230 > 0.0)
        {
            _2636 = abs((1.0 - _2220) / _2230);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_2230 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_2220 + 1.0) / _2230);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2636 = frontier_phi_37_32_ladder;
        }
        float _2841;
        if (_2233 > 0.0)
        {
            _2841 = abs((1.0 - _2224) / _2233);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_2233 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_2224 + 1.0) / _2233);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2841 = frontier_phi_46_43_ladder;
        }
        float _2843 = isnan(_2636) ? _2371 : (isnan(_2371) ? _2636 : min(_2371, _2636));
        float _2844 = isnan(_2841) ? _2843 : (isnan(_2843) ? _2841 : min(_2843, _2841));
        float _2848 = (_2844 * _2227) + _2216;
        float _2849 = (_2844 * _2230) + _2220;
        float _2850 = (_2844 * _2233) + _2224;
        float _2851 = _2844 * 9.9999997473787516355514526367188e-05;
        float _2852 = (-1.0) - _2851;
        float _2854 = _2851 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2850 > _2854) || ((_2850 < _2852) || ((_2849 > _2854) || ((_2849 < _2852) || ((_2848 < _2852) || (_2848 > _2854))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _3049 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2850, cbModelParam._m0[17u].z, fma(_2849, cbModelParam._m0[17u].y, _2848 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2850, cbModelParam._m0[18u].z, fma(_2849, cbModelParam._m0[18u].y, _2848 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2850, cbModelParam._m0[19u].z, fma(_2849, cbModelParam._m0[19u].y, _2848 * cbModelParam._m0[19u].x))), _2163);
            frontier_phi_22_46_ladder = _3049.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _3049.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _3049.x * cbModelParam._m0[1u].z;
        }
        _2252 = frontier_phi_22_46_ladder_2;
        _2254 = frontier_phi_22_46_ladder_1;
        _2256 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _2236 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1268, _1269, _1270), _2163);
        _2252 = _2236.x * cbModelParam._m0[1u].z;
        _2254 = _2236.y * cbModelParam._m0[1u].z;
        _2256 = _2236.z * cbModelParam._m0[1u].z;
    }
    float _2268 = ((((1.0 - _1289) * ((_1276 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_1289 * _1276)) * _1260;
    float _2269 = _2268 * ((cbModelParam._m0[1u].w * (_2252 - _2154)) + _2154);
    float _2270 = _2268 * ((cbModelParam._m0[1u].w * (_2254 - _2156)) + _2156);
    float _2271 = _2268 * ((cbModelParam._m0[1u].w * (_2256 - _2158)) + _2158);
    float _2274 = fma(_2271, cbSceneParam._m0[89u].z, fma(_2270, cbSceneParam._m0[89u].y, _2269 * cbSceneParam._m0[89u].x));
    float _2277 = fma(_2271, cbSceneParam._m0[90u].z, fma(_2270, cbSceneParam._m0[90u].y, _2269 * cbSceneParam._m0[90u].x));
    float _2280 = fma(_2271, cbSceneParam._m0[91u].z, fma(_2270, cbSceneParam._m0[91u].y, _2269 * cbSceneParam._m0[91u].x));
    uvec4 _2290 = floatBitsToUint(cbInstanceData._m0[_289 + 5u]);
    uint _2292 = _2290.x * 14u;
    uint _2293 = _2292 + 13u;
    float _2300 = _1260 + (-1.0);
    float _2305 = (cbLight._m0[_2293].x * _2300) + 1.0;
    float _2306 = (cbLight._m0[_2293].y * _2300) + 1.0;
    float _2307 = (cbLight._m0[_2293].z * _2300) + 1.0;
    float _2308 = (cbLight._m0[_2293].w * _2300) + 1.0;
    uint _2309 = _2292 + 5u;
    float _2315 = isnan(1.0) ? _2306 : (isnan(_2306) ? 1.0 : min(_2306, 1.0));
    uint _2319 = _2292 + 4u;
    float _2325 = isnan(1.0) ? _2305 : (isnan(_2305) ? 1.0 : min(_2305, 1.0));
    uint _2329 = _2292 | 1u;
    float _2340 = dot(vec3(cbLight._m0[_2292].xyz), vec3(_1111, _1112, _1113));
    float _2343 = dot(vec3(cbLight._m0[_2329].xyz), vec3(_1111, _1112, _1113));
    float _4530 = isnan(0.0) ? _2340 : (isnan(_2340) ? 0.0 : max(_2340, 0.0));
    float _4541 = isnan(0.0) ? _2343 : (isnan(_2343) ? 0.0 : max(_2343, 0.0));
    float _2348 = (isnan(1.0) ? _4530 : (isnan(_4530) ? 1.0 : min(_4530, 1.0))) * 0.3183098733425140380859375;
    float _2350 = (isnan(1.0) ? _4541 : (isnan(_4541) ? 1.0 : min(_4541, 1.0))) * 0.3183098733425140380859375;
    float _2357 = ((cbLight._m0[_2309].x * _2315) * _2350) + ((cbLight._m0[_2319].x * _2325) * _2348);
    float _2358 = ((_2315 * cbLight._m0[_2309].y) * _2350) + ((_2325 * cbLight._m0[_2319].y) * _2348);
    float _2359 = ((_2315 * cbLight._m0[_2309].z) * _2350) + ((_2325 * cbLight._m0[_2319].z) * _2348);
    uvec4 _2363 = floatBitsToUint(cbLight._m0[_2292 + 12u]);
    bool _2365 = _2363.x == 0u;
    float _2376;
    float _2378;
    float _2380;
    if (_2365)
    {
        _2376 = _2357;
        _2378 = _2358;
        _2380 = _2359;
    }
    else
    {
        uint _2384 = _2292 + 6u;
        float _2400 = (dot(vec3(cbLight._m0[_2292 + 2u].xyz), vec3(_1111, _1112, _1113)) * 0.5) + 0.5;
        float _2401 = _2400 * _2400;
        float _4552 = isnan(0.0) ? _2401 : (isnan(_2401) ? 0.0 : max(_2401, 0.0));
        float _2402 = isnan(1.0) ? _4552 : (isnan(_4552) ? 1.0 : min(_4552, 1.0));
        float _2403 = isnan(1.0) ? _2307 : (isnan(_2307) ? 1.0 : min(_2307, 1.0));
        _2376 = (((cbLight._m0[_2384].x * 0.3183098733425140380859375) * _2402) * _2403) + _2357;
        _2378 = (((cbLight._m0[_2384].y * 0.3183098733425140380859375) * _2402) * _2403) + _2358;
        _2380 = (((cbLight._m0[_2384].z * 0.3183098733425140380859375) * _2402) * _2403) + _2359;
    }
    bool _2383 = _2363.y == 0u;
    float _2421;
    float _2423;
    float _2425;
    if (_2383)
    {
        _2421 = _2376;
        _2423 = _2378;
        _2425 = _2380;
    }
    else
    {
        uint _2580 = _2292 + 7u;
        float _2596 = (dot(vec3(cbLight._m0[_2292 + 3u].xyz), vec3(_1111, _1112, _1113)) * 0.5) + 0.5;
        float _2597 = _2596 * _2596;
        float _4568 = isnan(0.0) ? _2597 : (isnan(_2597) ? 0.0 : max(_2597, 0.0));
        float _2598 = isnan(1.0) ? _4568 : (isnan(_4568) ? 1.0 : min(_4568, 1.0));
        float _2599 = isnan(1.0) ? _2308 : (isnan(_2308) ? 1.0 : min(_2308, 1.0));
        _2421 = (((cbLight._m0[_2580].x * 0.3183098733425140380859375) * _2598) * _2599) + _2376;
        _2423 = (((cbLight._m0[_2580].y * 0.3183098733425140380859375) * _2598) * _2599) + _2378;
        _2425 = (((cbLight._m0[_2580].z * 0.3183098733425140380859375) * _2598) * _2599) + _2380;
    }
    uint _2428 = _2292 + 8u;
    float _2441 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2292].w)) * _1114) * 0.949999988079071044921875);
    float _2442 = _2441 * _2441;
    float _2443 = cbLight._m0[_2292].x + _1189;
    float _2444 = cbLight._m0[_2292].y + _1190;
    float _2445 = cbLight._m0[_2292].z + _1191;
    float _2449 = inversesqrt(dot(vec3(_2443, _2444, _2445), vec3(_2443, _2444, _2445)));
    float _2450 = _2449 * _2443;
    float _2451 = _2449 * _2444;
    float _2452 = _2449 * _2445;
    float _2453 = dot(vec3(_1111, _1112, _1113), vec3(cbLight._m0[_2292].xyz));
    float _4584 = isnan(0.0) ? _2453 : (isnan(_2453) ? 0.0 : max(_2453, 0.0));
    float _2456 = isnan(1.0) ? _4584 : (isnan(_4584) ? 1.0 : min(_4584, 1.0));
    float _4595 = isnan(0.0) ? _1261 : (isnan(_1261) ? 0.0 : max(_1261, 0.0));
    float _2457 = isnan(1.0) ? _4595 : (isnan(_4595) ? 1.0 : min(_4595, 1.0));
    float _2458 = dot(vec3(_1111, _1112, _1113), vec3(_2450, _2451, _2452));
    float _4606 = isnan(0.0) ? _2458 : (isnan(_2458) ? 0.0 : max(_2458, 0.0));
    float _2461 = isnan(1.0) ? _4606 : (isnan(_4606) ? 1.0 : min(_4606, 1.0));
    float _2462 = dot(vec3(cbLight._m0[_2292].xyz), vec3(_2450, _2451, _2452));
    float _4617 = isnan(0.0) ? _2462 : (isnan(_2462) ? 0.0 : max(_2462, 0.0));
    float _2466 = _2442 * _2442;
    float _2470 = ((_2461 * _2461) * (_2466 + (-1.0))) + 1.0;
    float _2481 = (exp2(log2(1.0 - (isnan(1.0) ? _4617 : (isnan(_4617) ? 1.0 : min(_4617, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2482 = 1.0 - _2442;
    float _2493 = (0.5 / (((_2457 * ((_2456 * _2482) + _2442)) + 9.9999999392252902907785028219223e-09) + (((_2457 * _2482) + _2442) * _2456))) * _2456;
    float _4628 = isnan(0.0) ? _2493 : (isnan(_2493) ? 0.0 : max(_2493, 0.0));
    float _2495 = (isnan(1.0) ? _4628 : (isnan(_4628) ? 1.0 : min(_4628, 1.0))) * (_2466 / ((_2470 * _2470) * 3.141590118408203125));
    uint _2506 = _2292 + 9u;
    float _2517 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2329].w)) * _1114) * 0.949999988079071044921875);
    float _2518 = _2517 * _2517;
    float _2519 = cbLight._m0[_2329].x + _1189;
    float _2520 = cbLight._m0[_2329].y + _1190;
    float _2521 = cbLight._m0[_2329].z + _1191;
    float _2525 = inversesqrt(dot(vec3(_2519, _2520, _2521), vec3(_2519, _2520, _2521)));
    float _2526 = _2525 * _2519;
    float _2527 = _2525 * _2520;
    float _2528 = _2525 * _2521;
    float _2529 = dot(vec3(_1111, _1112, _1113), vec3(cbLight._m0[_2329].xyz));
    float _4639 = isnan(0.0) ? _2529 : (isnan(_2529) ? 0.0 : max(_2529, 0.0));
    float _2532 = isnan(1.0) ? _4639 : (isnan(_4639) ? 1.0 : min(_4639, 1.0));
    float _2533 = dot(vec3(_1111, _1112, _1113), vec3(_2526, _2527, _2528));
    float _4650 = isnan(0.0) ? _2533 : (isnan(_2533) ? 0.0 : max(_2533, 0.0));
    float _2536 = isnan(1.0) ? _4650 : (isnan(_4650) ? 1.0 : min(_4650, 1.0));
    float _2537 = dot(vec3(cbLight._m0[_2329].xyz), vec3(_2526, _2527, _2528));
    float _4661 = isnan(0.0) ? _2537 : (isnan(_2537) ? 0.0 : max(_2537, 0.0));
    float _2541 = _2518 * _2518;
    float _2545 = ((_2536 * _2536) * (_2541 + (-1.0))) + 1.0;
    float _2554 = (exp2(log2(1.0 - (isnan(1.0) ? _4661 : (isnan(_4661) ? 1.0 : min(_4661, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2555 = 1.0 - _2518;
    float _2565 = (0.5 / (((_2457 * ((_2532 * _2555) + _2518)) + 9.9999999392252902907785028219223e-09) + (((_2457 * _2555) + _2518) * _2532))) * _2532;
    float _4672 = isnan(0.0) ? _2565 : (isnan(_2565) ? 0.0 : max(_2565, 0.0));
    float _2567 = (isnan(1.0) ? _4672 : (isnan(_4672) ? 1.0 : min(_4672, 1.0))) * (_2541 / ((_2545 * _2545) * 3.141590118408203125));
    float _2577 = (((_2554 * cbLight._m0[_2506].x) * _2567) * _2315) + (((_2481 * cbLight._m0[_2428].x) * _2495) * _2325);
    float _2578 = (((_2554 * cbLight._m0[_2506].y) * _2567) * _2315) + (((_2481 * cbLight._m0[_2428].y) * _2495) * _2325);
    float _2579 = (((_2554 * cbLight._m0[_2506].z) * _2567) * _2315) + (((_2481 * cbLight._m0[_2428].z) * _2495) * _2325);
    float _2641;
    float _2643;
    float _2645;
    if (_2365)
    {
        _2641 = _2577;
        _2643 = _2578;
        _2645 = _2579;
    }
    else
    {
        uint _2647 = _2292 + 2u;
        uint _2651 = _2292 + 10u;
        float _2665 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2647].w)) * _1114) * 0.949999988079071044921875);
        float _2666 = _2665 * _2665;
        float _2667 = cbLight._m0[_2647].x + _1189;
        float _2668 = cbLight._m0[_2647].y + _1190;
        float _2669 = cbLight._m0[_2647].z + _1191;
        float _2673 = inversesqrt(dot(vec3(_2667, _2668, _2669), vec3(_2667, _2668, _2669)));
        float _2674 = _2673 * _2667;
        float _2675 = _2673 * _2668;
        float _2676 = _2673 * _2669;
        float _2677 = dot(vec3(_1111, _1112, _1113), vec3(cbLight._m0[_2647].xyz));
        float _4683 = isnan(0.0) ? _2677 : (isnan(_2677) ? 0.0 : max(_2677, 0.0));
        float _2680 = isnan(1.0) ? _4683 : (isnan(_4683) ? 1.0 : min(_4683, 1.0));
        float _2681 = dot(vec3(_1111, _1112, _1113), vec3(_2674, _2675, _2676));
        float _4694 = isnan(0.0) ? _2681 : (isnan(_2681) ? 0.0 : max(_2681, 0.0));
        float _2684 = isnan(1.0) ? _4694 : (isnan(_4694) ? 1.0 : min(_4694, 1.0));
        float _2685 = dot(vec3(cbLight._m0[_2647].xyz), vec3(_2674, _2675, _2676));
        float _4705 = isnan(0.0) ? _2685 : (isnan(_2685) ? 0.0 : max(_2685, 0.0));
        float _2689 = _2666 * _2666;
        float _2693 = ((_2684 * _2684) * (_2689 + (-1.0))) + 1.0;
        float _2702 = (exp2(log2(1.0 - (isnan(1.0) ? _4705 : (isnan(_4705) ? 1.0 : min(_4705, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2703 = 1.0 - _2666;
        float _2713 = (0.5 / (((_2457 * ((_2680 * _2703) + _2666)) + 9.9999999392252902907785028219223e-09) + (((_2457 * _2703) + _2666) * _2680))) * _2680;
        float _4716 = isnan(0.0) ? _2713 : (isnan(_2713) ? 0.0 : max(_2713, 0.0));
        float _2715 = (isnan(1.0) ? _4716 : (isnan(_4716) ? 1.0 : min(_4716, 1.0))) * (_2689 / ((_2693 * _2693) * 3.141590118408203125));
        float _2716 = isnan(1.0) ? _2307 : (isnan(_2307) ? 1.0 : min(_2307, 1.0));
        _2641 = (((_2702 * cbLight._m0[_2651].x) * _2715) * _2716) + _2577;
        _2643 = (((_2702 * cbLight._m0[_2651].y) * _2715) * _2716) + _2578;
        _2645 = (((_2702 * cbLight._m0[_2651].z) * _2715) * _2716) + _2579;
    }
    float _2751;
    float _2753;
    float _2755;
    if (_2383)
    {
        _2751 = _2641;
        _2753 = _2643;
        _2755 = _2645;
    }
    else
    {
        uint _2762 = _2292 + 3u;
        uint _2766 = _2292 + 11u;
        float _2780 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2762].w)) * _1114) * 0.949999988079071044921875);
        float _2781 = _2780 * _2780;
        float _2782 = cbLight._m0[_2762].x + _1189;
        float _2783 = cbLight._m0[_2762].y + _1190;
        float _2784 = cbLight._m0[_2762].z + _1191;
        float _2788 = inversesqrt(dot(vec3(_2782, _2783, _2784), vec3(_2782, _2783, _2784)));
        float _2789 = _2788 * _2782;
        float _2790 = _2788 * _2783;
        float _2791 = _2788 * _2784;
        float _2792 = dot(vec3(_1111, _1112, _1113), vec3(cbLight._m0[_2762].xyz));
        float _4732 = isnan(0.0) ? _2792 : (isnan(_2792) ? 0.0 : max(_2792, 0.0));
        float _2795 = isnan(1.0) ? _4732 : (isnan(_4732) ? 1.0 : min(_4732, 1.0));
        float _2796 = dot(vec3(_1111, _1112, _1113), vec3(_2789, _2790, _2791));
        float _4743 = isnan(0.0) ? _2796 : (isnan(_2796) ? 0.0 : max(_2796, 0.0));
        float _2799 = isnan(1.0) ? _4743 : (isnan(_4743) ? 1.0 : min(_4743, 1.0));
        float _2800 = dot(vec3(cbLight._m0[_2762].xyz), vec3(_2789, _2790, _2791));
        float _4754 = isnan(0.0) ? _2800 : (isnan(_2800) ? 0.0 : max(_2800, 0.0));
        float _2804 = _2781 * _2781;
        float _2808 = ((_2799 * _2799) * (_2804 + (-1.0))) + 1.0;
        float _2817 = (exp2(log2(1.0 - (isnan(1.0) ? _4754 : (isnan(_4754) ? 1.0 : min(_4754, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2818 = 1.0 - _2781;
        float _2828 = (0.5 / (((_2457 * ((_2795 * _2818) + _2781)) + 9.9999999392252902907785028219223e-09) + (((_2457 * _2818) + _2781) * _2795))) * _2795;
        float _4765 = isnan(0.0) ? _2828 : (isnan(_2828) ? 0.0 : max(_2828, 0.0));
        float _2830 = (isnan(1.0) ? _4765 : (isnan(_4765) ? 1.0 : min(_4765, 1.0))) * (_2804 / ((_2808 * _2808) * 3.141590118408203125));
        float _2831 = isnan(1.0) ? _2308 : (isnan(_2308) ? 1.0 : min(_2308, 1.0));
        _2751 = (((_2817 * cbLight._m0[_2766].x) * _2830) * _2831) + _2641;
        _2753 = (((_2817 * cbLight._m0[_2766].y) * _2830) * _2831) + _2643;
        _2755 = (((_2817 * cbLight._m0[_2766].z) * _2830) * _2831) + _2645;
    }
    float _2966;
    float _2968;
    float _2970;
    float _2972;
    float _2974;
    float _2976;
    if (_2290.y == 0u)
    {
        float _2906 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2907 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2906;
        float _2908 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2906;
        float _2909 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2906;
        uvec4 _2921 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2922 = _2921.x;
        uint _2933 = uint((float(_2921.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1198) / _2922))) + floor(float(uint(cbSceneParam._m0[85u].x * _1197) / _2922)));
        float _2943 = (log2(_2909 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2944 = isnan(0.0) ? _2943 : (isnan(_2943) ? 0.0 : max(_2943, 0.0));
        uint _2947 = uint(isnan(14.0) ? _2944 : (isnan(_2944) ? 14.0 : min(_2944, 14.0)));
        uvec4 _2952 = texelFetch(g_lightClusterGridBuffer, int(((_2947 << 2u) + (_2933 << 6u)) >> 2u));
        uint _2953 = _2952.x;
        uint _2954 = _2921.z;
        float _3054;
        float _3056;
        float _3058;
        float _3060;
        float _3062;
        float _3064;
        if (((((1u << ((_2954 >> 4u) & 15u)) + 4294967295u) & _2953) == 0u) || ((_2954 & 240u) == 0u))
        {
            _3054 = 0.0;
            _3056 = 0.0;
            _3058 = 0.0;
            _3060 = 0.0;
            _3062 = 0.0;
            _3064 = 0.0;
        }
        else
        {
            float _3055;
            float _3057;
            float _3059;
            float _3061;
            float _3063;
            float _3065;
            float _3198 = 0.0;
            float _3199 = 0.0;
            float _3200 = 0.0;
            float _3201 = 0.0;
            float _3202 = 0.0;
            float _3203 = 0.0;
            uint _3204 = 0u;
            uint _3213;
            bool _3214;
            for (;;)
            {
                _3213 = texelFetch(g_lightClassification, int((((_2947 << 5u) + (_2933 << 9u)) + (_3204 << 2u)) >> 2u)).x;
                _3214 = _3213 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_3214)
                {
                    frontier_phi_61_pred = _3198;
                    frontier_phi_61_pred_1 = _3203;
                    frontier_phi_61_pred_2 = _3202;
                    frontier_phi_61_pred_3 = _3201;
                    frontier_phi_61_pred_4 = _3200;
                    frontier_phi_61_pred_5 = _3199;
                }
                else
                {
                    float _3322;
                    float _3323;
                    float _3324;
                    float _3325;
                    float _3326;
                    float _3327;
                    uint _3328;
                    _3322 = _3198;
                    _3323 = _3199;
                    _3324 = _3200;
                    _3325 = _3201;
                    _3326 = _3202;
                    _3327 = _3203;
                    _3328 = _3213;
                    float _3254;
                    float _3255;
                    float _3256;
                    float _3257;
                    float _3258;
                    float _3259;
                    for (;;)
                    {
                        uint _3332 = uint(findLSB(_3328)) + (_3204 << 5u);
                        uint _3329 = (_3328 + 4294967295u) & _3328;
                        uint _3334 = _3332 * 48u;
                        vec4 _3348 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3334)).x, texelFetch(g_PointLightRenderingBuffer, int(_3334 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3334 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3334 + 3u)).x));
                        uint _3354 = (_3332 * 48u) + 4u;
                        vec4 _3367 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3354)).x, texelFetch(g_PointLightRenderingBuffer, int(_3354 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3354 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3354 + 3u)).x));
                        uint _3373 = (_3332 * 48u) + 8u;
                        vec3 _3384 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3373)).x, texelFetch(g_PointLightRenderingBuffer, int(_3373 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3373 + 2u)).x));
                        float _3388 = _3348.x - _2907;
                        float _3389 = _3348.y - _2908;
                        float _3390 = _3348.z - _2909;
                        float _3391 = dot(vec3(_3388, _3389, _3390), vec3(_3388, _3389, _3390));
                        float _3394 = inversesqrt(_3391);
                        float _3395 = _3394 * _3388;
                        float _3396 = _3394 * _3389;
                        float _3397 = _3394 * _3390;
                        float _3398 = dot(vec3(_1216, _1219, _1222), vec3(_3395, _3396, _3397));
                        float _3403 = 1.0 - (_3391 * _3348.w);
                        float _4791 = isnan(0.0) ? _3403 : (isnan(_3403) ? 0.0 : max(_3403, 0.0));
                        float _3404 = isnan(1.0) ? _4791 : (isnan(_4791) ? 1.0 : min(_4791, 1.0));
                        float _3405 = sqrt(_3391) * _3367.w;
                        float _3408 = 1.39999997615814208984375 / (_3405 + 1.39999997615814208984375);
                        float _3409 = _3408 * _3408;
                        float _3412 = ((1.0 - _3409) * _3398) + _3409;
                        float _3415 = _3405 * _3405;
                        float _3419 = ((isnan(0.0) ? _3412 : (isnan(_3412) ? 0.0 : max(_3412, 0.0))) * _3404) / ((_3415 * 0.699999988079071044921875) + 1.0);
                        float _3423 = (-0.0) - _2907;
                        float _3424 = (-0.0) - _2908;
                        float _3425 = (-0.0) - _2909;
                        float _3429 = inversesqrt(dot(vec3(_3423, _3424, _3425), vec3(_3423, _3424, _3425)));
                        float _3430 = _3429 * _3423;
                        float _3431 = _3429 * _3424;
                        float _3432 = _3429 * _3425;
                        float _3440 = exp2(log2(1.0 / ((_3415 * 3.5) + 5.0)) * 0.25);
                        float _3441 = 1.0 - _1276;
                        float _3448 = sqrt(1.0 - ((1.0 - (_3441 * _3441)) * (1.0 - (_3440 * _3440))));
                        float _3449 = _3448 * _3448;
                        float _3450 = _3449 * _3449;
                        float _3451 = _3430 + _3395;
                        float _3452 = _3431 + _3396;
                        float _3453 = _3432 + _3397;
                        float _3457 = inversesqrt(dot(vec3(_3451, _3452, _3453), vec3(_3451, _3452, _3453)));
                        float _3461 = dot(vec3(_1216, _1219, _1222), vec3(_3430, _3431, _3432));
                        float _4807 = isnan(0.0) ? _3461 : (isnan(_3461) ? 0.0 : max(_3461, 0.0));
                        float _3464 = isnan(1.0) ? _4807 : (isnan(_4807) ? 1.0 : min(_4807, 1.0));
                        float _3465 = dot(vec3(_1216, _1219, _1222), vec3(_3457 * _3451, _3457 * _3452, _3457 * _3453));
                        float _4818 = isnan(0.0) ? _3465 : (isnan(_3465) ? 0.0 : max(_3465, 0.0));
                        float _3468 = isnan(1.0) ? _4818 : (isnan(_4818) ? 1.0 : min(_4818, 1.0));
                        float _3472 = ((_3468 * _3468) * (_3450 + (-1.0))) + 1.0;
                        float _3473 = _3408 * _3449;
                        float _3474 = _3473 * _3473;
                        float _3477 = ((1.0 - _3474) * _3398) + _3474;
                        float _4829 = isnan(0.0) ? _3477 : (isnan(_3477) ? 0.0 : max(_3477, 0.0));
                        float _3478 = isnan(1.0) ? _4829 : (isnan(_4829) ? 1.0 : min(_4829, 1.0));
                        float _3479 = 1.0 - _3449;
                        float _3489 = (0.5 / (((_3478 * ((_3464 * _3479) + _3449)) + 9.9999999392252902907785028219223e-09) + (((_3478 * _3479) + _3449) * _3464))) * _3478;
                        float _4840 = isnan(0.0) ? _3489 : (isnan(_3489) ? 0.0 : max(_3489, 0.0));
                        float _3500 = (((_3450 * 3.1415927410125732421875) * (isnan(1.0) ? _4840 : (isnan(_4840) ? 1.0 : min(_4840, 1.0)))) / ((_3472 * _3472) * ((_3415 * 2.1991131305694580078125) + 3.141590118408203125))) * _3404;
                        _3257 = (_3419 * _3367.x) + _3325;
                        _3258 = (_3419 * _3367.y) + _3326;
                        _3259 = (_3419 * _3367.z) + _3327;
                        _3254 = (_3500 * _3384.x) + _3322;
                        _3255 = (_3500 * _3384.y) + _3323;
                        _3256 = (_3500 * _3384.z) + _3324;
                        if (_3329 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3322 = _3254;
                            _3323 = _3255;
                            _3324 = _3256;
                            _3325 = _3257;
                            _3326 = _3258;
                            _3327 = _3259;
                            _3328 = _3329;
                        }
                    }
                    frontier_phi_61_pred = _3254;
                    frontier_phi_61_pred_1 = _3259;
                    frontier_phi_61_pred_2 = _3258;
                    frontier_phi_61_pred_3 = _3257;
                    frontier_phi_61_pred_4 = _3256;
                    frontier_phi_61_pred_5 = _3255;
                }
                _3055 = frontier_phi_61_pred;
                _3065 = frontier_phi_61_pred_1;
                _3063 = frontier_phi_61_pred_2;
                _3061 = frontier_phi_61_pred_3;
                _3059 = frontier_phi_61_pred_4;
                _3057 = frontier_phi_61_pred_5;
                uint _3205 = _3204 + 1u;
                if (_3205 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3198 = _3055;
                    _3199 = _3057;
                    _3200 = _3059;
                    _3201 = _3061;
                    _3202 = _3063;
                    _3203 = _3065;
                    _3204 = _3205;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3054 = _3055;
            _3056 = _3057;
            _3058 = _3059;
            _3060 = _3061;
            _3062 = _3063;
            _3064 = _3065;
        }
        uvec4 _3068 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3069 = _3068.z;
        uint _3071 = (_3069 >> 8u) & 15u;
        float _3166;
        float _3168;
        float _3170;
        float _3172;
        float _3174;
        float _3176;
        if (((4294967295u << _3071) & _2953) == 0u)
        {
            _3166 = _3054;
            _3168 = _3056;
            _3170 = _3058;
            _3172 = _3060;
            _3174 = _3062;
            _3176 = _3064;
        }
        else
        {
            float _3191 = inversesqrt(dot(vec3(_2907, _2908, _2909), vec3(_2907, _2908, _2909)));
            float _3192 = _3191 * _2907;
            float _3193 = _3191 * _2908;
            float _3194 = _3191 * _2909;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_3071 < ((_3069 >> 12u) & 15u))
            {
                float _3167;
                float _3169;
                float _3171;
                float _3173;
                float _3175;
                float _3177;
                float _3305 = _3054;
                float _3306 = _3056;
                float _3307 = _3058;
                float _3308 = _3060;
                float _3309 = _3062;
                float _3310 = _3064;
                uint _3311 = _3071;
                uint _3320;
                bool _3321;
                for (;;)
                {
                    _3320 = texelFetch(g_lightClassification, int((((_2947 << 5u) + (_2933 << 9u)) + (_3311 << 2u)) >> 2u)).x;
                    _3321 = _3320 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_3321)
                    {
                        frontier_phi_67_pred = _3308;
                        frontier_phi_67_pred_1 = _3309;
                        frontier_phi_67_pred_2 = _3310;
                        frontier_phi_67_pred_3 = _3307;
                        frontier_phi_67_pred_4 = _3306;
                        frontier_phi_67_pred_5 = _3305;
                    }
                    else
                    {
                        float _3505;
                        float _3506;
                        float _3507;
                        float _3508;
                        float _3509;
                        float _3510;
                        float _3798;
                        float _3799;
                        float _3800;
                        float _3801;
                        float _3802;
                        float _3803;
                        float _3518 = _3305;
                        float _3519 = _3306;
                        float _3520 = _3307;
                        float _3521 = _3308;
                        float _3522 = _3309;
                        float _3523 = _3310;
                        uint _3524 = _3320;
                        uint _3525;
                        vec4 _3550;
                        float _3551;
                        vec4 _3566;
                        vec3 _3578;
                        vec4 _3593;
                        vec4 _3608;
                        float _3654;
                        bool _3655;
                        for (;;)
                        {
                            uint _3535 = ((_3311 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3524));
                            _3525 = (_3524 + 4294967295u) & _3524;
                            uint _3537 = _3535 * 40u;
                            _3550 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3537)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3537 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3537 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3537 + 3u)).x));
                            _3551 = _3550.w;
                            uint _3553 = (_3535 * 40u) + 4u;
                            _3566 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3553)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3553 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3553 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3553 + 3u)).x));
                            uint _3568 = (_3535 * 40u) + 8u;
                            _3578 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3568)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3568 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3568 + 2u)).x));
                            uint _3580 = (_3535 * 40u) + 16u;
                            _3593 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3580)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3580 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3580 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3580 + 3u)).x));
                            uint _3595 = (_3535 * 40u) + 20u;
                            _3608 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3595)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3595 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3595 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3595 + 3u)).x));
                            uint _3610 = (_3535 * 40u) + 24u;
                            vec4 _3623 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3610)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3610 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3610 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3610 + 3u)).x));
                            uint _3629 = (_3535 * 40u) + 28u;
                            vec4 _3642 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3629)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3629 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3629 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3629 + 3u)).x));
                            _3654 = fma(_2909, _3642.z, fma(_2908, _3642.y, _3642.x * _2907)) + _3642.w;
                            _3655 = !((fma(_2909, _3623.z, fma(_2908, _3623.y, _3623.x * _2907)) + _3623.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3655)
                            {
                                float _3682 = _3550.x - _2907;
                                float _3683 = _3550.y - _2908;
                                float _3684 = _3550.z - _2909;
                                float _3685 = dot(vec3(_3682, _3683, _3684), vec3(_3682, _3683, _3684));
                                float _3688 = inversesqrt(_3685);
                                float _3689 = _3688 * _3682;
                                float _3690 = _3688 * _3683;
                                float _3691 = _3688 * _3684;
                                float _3695 = 1.0 - (_3685 / (_3551 * _3551));
                                float _4851 = isnan(0.0) ? _3695 : (isnan(_3695) ? 0.0 : max(_3695, 0.0));
                                float _3696 = isnan(1.0) ? _4851 : (isnan(_4851) ? 1.0 : min(_4851, 1.0));
                                float _3700 = sqrt(_3685) * _3566.w;
                                float _3702 = 1.39999997615814208984375 / (_3700 + 1.39999997615814208984375);
                                float _3703 = _3702 * _3702;
                                float _3706 = ((1.0 - _3703) * dot(vec3(_3689, _3690, _3691), vec3(_1216, _1219, _1222))) + _3703;
                                float _3709 = _3700 * _3700;
                                float _3713 = (fma(_2909, _3593.z, fma(_2908, _3593.y, _3593.x * _2907)) + _3593.w) / _3654;
                                float _3714 = (fma(_2909, _3608.z, fma(_2908, _3608.y, _3608.x * _2907)) + _3608.w) / _3654;
                                float _3718 = 1.0 - dot(vec2(_3713, _3714), vec2(_3713, _3714));
                                float _4867 = isnan(0.0) ? _3718 : (isnan(_3718) ? 0.0 : max(_3718, 0.0));
                                float _3719 = isnan(1.0) ? _4867 : (isnan(_4867) ? 1.0 : min(_4867, 1.0));
                                float _3720 = _3719 * (((isnan(0.0) ? _3706 : (isnan(_3706) ? 0.0 : max(_3706, 0.0))) * _3696) / ((_3709 * 0.699999988079071044921875) + 1.0));
                                float _3732 = exp2(log2(1.0 / ((_3709 * 3.5) + 5.0)) * 0.25);
                                float _3733 = 1.0 - _1276;
                                float _3740 = sqrt(1.0 - ((1.0 - (_3733 * _3733)) * (1.0 - (_3732 * _3732))));
                                float _3741 = _3740 * _3740;
                                float _3742 = _3741 * _3741;
                                float _3743 = _3689 - _3192;
                                float _3744 = _3690 - _3193;
                                float _3745 = _3691 - _3194;
                                float _3749 = inversesqrt(dot(vec3(_3743, _3744, _3745), vec3(_3743, _3744, _3745)));
                                float _3753 = dot(vec3(_1216, _1219, _1222), vec3((-0.0) - _3192, (-0.0) - _3193, (-0.0) - _3194));
                                float _4878 = isnan(0.0) ? _3753 : (isnan(_3753) ? 0.0 : max(_3753, 0.0));
                                float _3756 = isnan(1.0) ? _4878 : (isnan(_4878) ? 1.0 : min(_4878, 1.0));
                                float _3757 = dot(vec3(_1216, _1219, _1222), vec3(_3749 * _3743, _3749 * _3744, _3749 * _3745));
                                float _4889 = isnan(0.0) ? _3757 : (isnan(_3757) ? 0.0 : max(_3757, 0.0));
                                float _3760 = isnan(1.0) ? _4889 : (isnan(_4889) ? 1.0 : min(_4889, 1.0));
                                float _3764 = ((_3760 * _3760) * (_3742 + (-1.0))) + 1.0;
                                float _3765 = _3702 * _3741;
                                float _3766 = _3765 * _3765;
                                float _3772 = ((1.0 - _3766) * dot(vec3(_1216, _1219, _1222), vec3(_3689, _3690, _3691))) + _3766;
                                float _4900 = isnan(0.0) ? _3772 : (isnan(_3772) ? 0.0 : max(_3772, 0.0));
                                float _3773 = isnan(1.0) ? _4900 : (isnan(_4900) ? 1.0 : min(_4900, 1.0));
                                float _3774 = 1.0 - _3741;
                                float _3784 = (0.5 / (((_3773 * ((_3756 * _3774) + _3741)) + 9.9999999392252902907785028219223e-09) + (((_3773 * _3774) + _3741) * _3756))) * _3773;
                                float _4911 = isnan(0.0) ? _3784 : (isnan(_3784) ? 0.0 : max(_3784, 0.0));
                                float _3794 = (_3719 * _3696) * (((_3742 * 3.1415927410125732421875) * (isnan(1.0) ? _4911 : (isnan(_4911) ? 1.0 : min(_4911, 1.0)))) / ((_3764 * _3764) * ((_3709 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3794 * _3578.x;
                                frontier_phi_73_pred_1 = _3794 * _3578.y;
                                frontier_phi_73_pred_2 = _3720 * _3566.z;
                                frontier_phi_73_pred_3 = _3720 * _3566.y;
                                frontier_phi_73_pred_4 = _3720 * _3566.x;
                                frontier_phi_73_pred_5 = _3794 * _3578.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3798 = frontier_phi_73_pred;
                            _3799 = frontier_phi_73_pred_1;
                            _3803 = frontier_phi_73_pred_2;
                            _3802 = frontier_phi_73_pred_3;
                            _3801 = frontier_phi_73_pred_4;
                            _3800 = frontier_phi_73_pred_5;
                            _3508 = _3801 + _3521;
                            _3509 = _3802 + _3522;
                            _3510 = _3803 + _3523;
                            _3505 = _3798 + _3518;
                            _3506 = _3799 + _3519;
                            _3507 = _3800 + _3520;
                            if (_3525 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3518 = _3505;
                                _3519 = _3506;
                                _3520 = _3507;
                                _3521 = _3508;
                                _3522 = _3509;
                                _3523 = _3510;
                                _3524 = _3525;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3508;
                        frontier_phi_67_pred_1 = _3509;
                        frontier_phi_67_pred_2 = _3510;
                        frontier_phi_67_pred_3 = _3507;
                        frontier_phi_67_pred_4 = _3506;
                        frontier_phi_67_pred_5 = _3505;
                    }
                    _3173 = frontier_phi_67_pred;
                    _3175 = frontier_phi_67_pred_1;
                    _3177 = frontier_phi_67_pred_2;
                    _3171 = frontier_phi_67_pred_3;
                    _3169 = frontier_phi_67_pred_4;
                    _3167 = frontier_phi_67_pred_5;
                    uint _3312 = _3311 + 1u;
                    if (_3312 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3305 = _3167;
                        _3306 = _3169;
                        _3307 = _3171;
                        _3308 = _3173;
                        _3309 = _3175;
                        _3310 = _3177;
                        _3311 = _3312;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _3175;
                frontier_phi_55_56_ladder_1 = _3177;
                frontier_phi_55_56_ladder_2 = _3173;
                frontier_phi_55_56_ladder_3 = _3171;
                frontier_phi_55_56_ladder_4 = _3169;
                frontier_phi_55_56_ladder_5 = _3167;
            }
            else
            {
                frontier_phi_55_56_ladder = _3062;
                frontier_phi_55_56_ladder_1 = _3064;
                frontier_phi_55_56_ladder_2 = _3060;
                frontier_phi_55_56_ladder_3 = _3058;
                frontier_phi_55_56_ladder_4 = _3056;
                frontier_phi_55_56_ladder_5 = _3054;
            }
            _3166 = frontier_phi_55_56_ladder_5;
            _3168 = frontier_phi_55_56_ladder_4;
            _3170 = frontier_phi_55_56_ladder_3;
            _3172 = frontier_phi_55_56_ladder_2;
            _3174 = frontier_phi_55_56_ladder;
            _3176 = frontier_phi_55_56_ladder_1;
        }
        float _3181 = isnan(1.0) ? _1260 : (isnan(_1260) ? 1.0 : min(_1260, 1.0));
        _2966 = (_3181 * _3172) + _2421;
        _2968 = (_3181 * _3174) + _2423;
        _2970 = (_3181 * _3176) + _2425;
        _2972 = ((_3166 * 0.039999999105930328369140625) * _3181) + _2751;
        _2974 = ((_3168 * 0.039999999105930328369140625) * _3181) + _2753;
        _2976 = ((_3170 * 0.039999999105930328369140625) * _3181) + _2755;
    }
    else
    {
        _2966 = _2421;
        _2968 = _2423;
        _2970 = _2425;
        _2972 = _2751;
        _2974 = _2753;
        _2976 = _2755;
    }
    float _4927 = isnan(0.0) ? _1245 : (isnan(_1245) ? 0.0 : max(_1245, 0.0));
    float _4938 = isnan(0.0) ? _1246 : (isnan(_1246) ? 0.0 : max(_1246, 0.0));
    float _4949 = isnan(0.0) ? _1247 : (isnan(_1247) ? 0.0 : max(_1247, 0.0));
    uint _2996 = _289 + 6u;
    float _3004 = _1197 / cbSceneParam._m0[86u].x;
    float _3005 = _1198 / cbSceneParam._m0[86u].y;
    vec4 _3019 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3004, _3005, (log2((isnan(cbSceneParam._m0[77u].w) ? _1132 : (isnan(_1132) ? cbSceneParam._m0[77u].w : min(_1132, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3021 = _3019.x;
    float _3022 = _3019.y;
    float _3023 = _3019.z;
    float _3024 = _3019.w;
    float _3116;
    float _3118;
    float _3120;
    float _3122;
    if (_1132 > cbSceneParam._m0[78u].w)
    {
        float _3079 = isnan(_1132) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _1132 : min(cbSceneParam._m0[80u].w, _1132));
        float _3080 = _3079 / _1132;
        float _3091 = _3080 * _1182;
        float _3092 = _1183 * _3080;
        float _3093 = (-0.0) - _3092;
        float _3094 = _3080 * _1184;
        float _3096 = (cbSceneParam._m0[77u].w * _3093) / _3079;
        float _3097 = _3096 + cbSceneParam._m0[79u].w;
        float _3098 = cbSceneParam._m0[79u].w - _3092;
        float _3104 = sqrt(((_3091 * _3091) + (_3092 * _3092)) + (_3094 * _3094));
        float _3107 = (1.0 - (cbSceneParam._m0[77u].w / _3079)) * _3104;
        float _3112 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3114 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3267;
        if (abs((_3093 - _3096) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3267 = ((((_3097 > 0.0) ? exp2(_3112 * _3097) : (2.0 - exp2(_3114 * _3097))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3107;
        }
        else
        {
            float _3227 = 1.0 / cbSceneParam._m0[80u].x;
            float _3228 = isnan(_3098) ? _3097 : (isnan(_3097) ? _3098 : max(_3097, _3098));
            float _3229 = isnan(_3098) ? _3097 : (isnan(_3097) ? _3098 : min(_3097, _3098));
            float _3238 = isnan(0.0) ? _3228 : (isnan(_3228) ? 0.0 : min(_3228, 0.0));
            float _3239 = isnan(0.0) ? _3229 : (isnan(_3229) ? 0.0 : min(_3229, 0.0));
            _3267 = ((abs(_3104 / _3093) * cbSceneParam._m0[80u].y) * ((((_3238 - _3239) * 2.0) - ((exp2(_3112 * (isnan(0.0) ? _3228 : (isnan(_3228) ? 0.0 : max(_3228, 0.0)))) - exp2(_3112 * (isnan(0.0) ? _3229 : (isnan(_3229) ? 0.0 : max(_3229, 0.0))))) * _3227)) - ((exp2(_3114 * _3238) - exp2(_3114 * _3239)) * _3227))) + (_3107 * cbSceneParam._m0[80u].z);
        }
        vec4 _3269 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3004, _3005, 1.0), 0.0);
        float _3278 = exp2((_3267 * (-1.44269502162933349609375)) * (1.0 - _3269.w));
        float _3279 = log2(_3278);
        float _3295 = log2(_3024);
        _3116 = (exp2(_3295 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3279 * cbSceneParam._m0[78u].x)) * _3269.x) / cbSceneParam._m0[78u].x)) + _3021;
        _3118 = (exp2(_3295 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3279 * cbSceneParam._m0[78u].y)) * _3269.y) / cbSceneParam._m0[78u].y)) + _3022;
        _3120 = (exp2(_3295 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3279 * cbSceneParam._m0[78u].z)) * _3269.z) / cbSceneParam._m0[78u].z)) + _3023;
        _3122 = _3278 * _3024;
    }
    else
    {
        _3116 = _3021;
        _3118 = _3022;
        _3120 = _3023;
        _3122 = _3024;
    }
    float _3134 = roundEven(cbMatDynParam._m0[0u].y);
    bool _3135 = _3134 == 3.0;
    float _3136 = log2(_3122);
    float _3143 = exp2(_3136 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4927 : (isnan(_4927) ? 1.0 : min(_4927, 1.0))) * (_2966 + ((isnan(0.0) ? _1984 : (isnan(_1984) ? 0.0 : max(_1984, 0.0))) * _1260))) + ((_2972 + ((isnan(0.0) ? _2274 : (isnan(_2274) ? 0.0 : max(_2274, 0.0))) * _2063)) * cbPerFrame._m0[3u].x));
    float _3144 = exp2(_3136 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4938 : (isnan(_4938) ? 1.0 : min(_4938, 1.0))) * (_2968 + ((isnan(0.0) ? _1987 : (isnan(_1987) ? 0.0 : max(_1987, 0.0))) * _1260))) + ((_2974 + ((isnan(0.0) ? _2277 : (isnan(_2277) ? 0.0 : max(_2277, 0.0))) * _2063)) * cbPerFrame._m0[3u].x));
    float _3145 = exp2(_3136 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4949 : (isnan(_4949) ? 1.0 : min(_4949, 1.0))) * (_2970 + ((isnan(0.0) ? _1990 : (isnan(_1990) ? 0.0 : max(_1990, 0.0))) * _1260))) + ((_2976 + ((isnan(0.0) ? _2280 : (isnan(_2280) ? 0.0 : max(_2280, 0.0))) * _2063)) * cbPerFrame._m0[3u].x));
    float _3154 = (_3134 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _3154 * (_3135 ? _3143 : (_3143 + (cbSceneParam._m0[72u].w * _3116)));
    SV_Target.y = _3154 * (_3135 ? _3144 : (_3144 + (cbSceneParam._m0[72u].w * _3118)));
    SV_Target.z = _3154 * (_3135 ? _3145 : (_3145 + (cbSceneParam._m0[72u].w * _3120)));
    SV_Target.w = cbInstanceData._m0[_2996].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2996].w;
}


