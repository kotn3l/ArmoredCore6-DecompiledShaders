#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 13) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_22;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_29;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_10;
layout(set = 0, binding = 20) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_6;
layout(set = 0, binding = 23) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_8;
layout(set = 0, binding = 24) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_9;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1434;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _238 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _239 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _240 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _246 = inversesqrt(dot(vec3(_238, _239, _240), vec3(_238, _239, _240)));
    float _253 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _260 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _272 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _274 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _275 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _4022 = isnan(0.0) ? _272 : (isnan(_272) ? 0.0 : max(_272, 0.0));
    float _4033 = isnan(0.0) ? _274 : (isnan(_274) ? 0.0 : max(_274, 0.0));
    float _4044 = isnan(0.0) ? _275 : (isnan(_275) ? 0.0 : max(_275, 0.0));
    uint _285 = uint(roundEven(NORMAL.w)) * 13u;
    uint _290 = _285 + 1u;
    uint _294 = _285 + 2u;
    float _303 = sqrt(((cbInstanceData._m0[_290].x * cbInstanceData._m0[_290].x) + (cbInstanceData._m0[_285].x * cbInstanceData._m0[_285].x)) + (cbInstanceData._m0[_294].x * cbInstanceData._m0[_294].x));
    float _304 = _303 * TEXCOORD.z;
    float _305 = _303 * TEXCOORD.w;
    vec4 _318 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _304) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _305) + cbTextureTilingScale._m0[13u].w));
    vec4 _342 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _347 = _342.x * cbMtdParam._m0[11u].x;
    float _348 = _342.y * cbMtdParam._m0[11u].y;
    float _349 = _342.z * cbMtdParam._m0[11u].z;
    vec4 _368 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _304) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _305) + cbTextureTilingScale._m0[5u].w));
    vec4 _387 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _425 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _427 = _425.x;
    float _439 = dot(vec4(_427, _425.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _456 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _387.x) * 2.0) - ((((_427 - _439) * cbMtdParam._m0[24u].z) + _439) * cbMtdParam._m0[23u].x))) + 1.0;
    float _4055 = isnan(0.0) ? _456 : (isnan(_456) ? 0.0 : max(_456, 0.0));
    float _457 = isnan(1.0) ? _4055 : (isnan(_4055) ? 1.0 : min(_4055, 1.0));
    float _464 = (_457 * ((_368.x * cbMtdParam._m0[12u].x) - _347)) + _347;
    float _465 = (_457 * ((_368.y * cbMtdParam._m0[12u].y) - _348)) + _348;
    float _466 = (_457 * ((_368.z * cbMtdParam._m0[12u].z) - _349)) + _349;
    vec4 _483 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _304) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _305) + cbTextureTilingScale._m0[3u].w));
    vec4 _503 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _505 = _503.x;
    float _515 = dot(vec4(_505, _503.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _529 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _387.y) * 2.0) - ((((_505 - _515) * cbMtdParam._m0[24u].z) + _515) * cbMtdParam._m0[20u].w))) + 1.0;
    float _4066 = isnan(0.0) ? _529 : (isnan(_529) ? 0.0 : max(_529, 0.0));
    float _530 = isnan(1.0) ? _4066 : (isnan(_4066) ? 1.0 : min(_4066, 1.0));
    float _537 = (_530 * ((_483.x * cbMtdParam._m0[13u].x) - _464)) + _464;
    float _538 = (_530 * ((_483.y * cbMtdParam._m0[13u].y) - _465)) + _465;
    float _539 = (_530 * ((_483.z * cbMtdParam._m0[13u].z) - _466)) + _466;
    vec4 _557 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_9, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[24u].x * _304) + cbTextureTilingScale._m0[24u].z, (cbTextureTilingScale._m0[24u].y * _305) + cbTextureTilingScale._m0[24u].w));
    vec4 _574 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[25u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _576 = _574.x;
    float _586 = dot(vec4(_576, _574.yzw), vec4(cbMtdParam._m0[30u].w, cbMtdParam._m0[31u].xy, 0.0));
    float _598 = ((cbMtdParam._m0[25u].x * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.z) - _387.z) * 2.0) - ((((_576 - _586) * cbMtdParam._m0[24u].z) + _586) * cbMtdParam._m0[20u].z))) + 1.0;
    float _4077 = isnan(0.0) ? _598 : (isnan(_598) ? 0.0 : max(_598, 0.0));
    float _599 = isnan(1.0) ? _4077 : (isnan(_4077) ? 1.0 : min(_4077, 1.0));
    float _606 = (_599 * ((_557.x * cbMtdParam._m0[14u].x) - _537)) + _537;
    float _607 = (_599 * ((_557.y * cbMtdParam._m0[14u].y) - _538)) + _538;
    float _608 = (_599 * ((_557.z * cbMtdParam._m0[14u].z) - _539)) + _539;
    float _612 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _318.x) * _606;
    float _615 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _318.y) * _607;
    float _618 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _318.z) * _608;
    float _625 = ((_606 - _612) * (isnan(1.0) ? _4022 : (isnan(_4022) ? 1.0 : min(_4022, 1.0)))) + _612;
    float _626 = ((_607 - _615) * (isnan(1.0) ? _4033 : (isnan(_4033) ? 1.0 : min(_4033, 1.0)))) + _615;
    float _627 = ((_608 - _618) * (isnan(1.0) ? _4044 : (isnan(_4044) ? 1.0 : min(_4044, 1.0)))) + _618;
    vec4 _639 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _304) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _305) + cbTextureTilingScale._m0[20u].w));
    vec4 _662 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _304) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _305) + cbTextureTilingScale._m0[4u].w));
    vec4 _679 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _681 = _679.x;
    float _682 = _679.y;
    float _683 = _679.z;
    float _690 = ((_662.x - _681) * _457) + _681;
    float _691 = ((_662.y - _682) * _457) + _682;
    float _692 = ((_662.z - _683) * _457) + _683;
    vec4 _704 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _304) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _305) + cbTextureTilingScale._m0[2u].w));
    float _715 = ((_704.x - _690) * _530) + _690;
    float _716 = ((_704.y - _691) * _530) + _691;
    float _717 = ((_704.z - _692) * _530) + _692;
    vec4 _729 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[23u].x * _304) + cbTextureTilingScale._m0[23u].z, (cbTextureTilingScale._m0[23u].y * _305) + cbTextureTilingScale._m0[23u].w));
    float _742 = ((_729.z - _717) * _599) + _717;
    float _745 = ((((_729.x - _715) * _599) + _715) * 2.0) + (-1.0);
    float _746 = ((((_729.y - _716) * _599) + _716) * 2.0) + (-1.0);
    float _747 = dot(vec2(_745, _746), vec2(_745, _746));
    float _4088 = isnan(0.0) ? _747 : (isnan(_747) ? 0.0 : max(_747, 0.0));
    float _752 = sqrt(1.0 - (isnan(1.0) ? _4088 : (isnan(_4088) ? 1.0 : min(_4088, 1.0))));
    vec4 _772 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _784 = (_745 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_639.x * 2.0) + (-1.0)))) + (((_772.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _785 = (_746 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_639.y * 2.0) + (-1.0)))) + (((_772.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    vec4 _797 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _304) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _305) + cbTextureTilingScale._m0[19u].w));
    float _799 = _797.x;
    float _800 = 1.0 - _799;
    float _826 = (TEXCOORD_8.x - ((cbMtdParam._m0[22u].w * (1.0 - TEXCOORD_8.x)) * ((((_799 - _800) * cbMtdParam._m0[24u].y) + _800) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _4099 = isnan(0.0) ? _826 : (isnan(_826) ? 0.0 : max(_826, 0.0));
    float _827 = isnan(1.0) ? _4099 : (isnan(_4099) ? 1.0 : min(_4099, 1.0));
    float _835 = ((((cbMtdParam._m0[10u].x - _625) * TEXCOORD_8.x) * cbMtdParam._m0[23u].w) * _827) + _625;
    float _836 = ((((cbMtdParam._m0[10u].y - _626) * TEXCOORD_8.y) * cbMtdParam._m0[23u].w) * _827) + _626;
    float _837 = (((cbMtdParam._m0[23u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _627)) * _827) + _627;
    float _842 = (((_639.z - _742) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _742;
    float _846 = ((_772.z - _842) * cbMtdParam._m0[19u].w) + _842;
    float _850 = ((cbMtdParam._m0[23u].y - _846) * _827) + _846;
    vec4 _871 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _304) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _305) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _877 = (_871.x * 2.0) + (-1.0);
    float _878 = (_871.y * 2.0) + (-1.0);
    float _879 = dot(vec2(_877, _878), vec2(_877, _878));
    float _4110 = isnan(0.0) ? _879 : (isnan(_879) ? 0.0 : max(_879, 0.0));
    float _895 = (_827 * (((cbMtdParam._m0[22u].z * _784) - _784) + _877)) + _784;
    float _896 = (_827 * (((cbMtdParam._m0[22u].z * _785) - _785) + _878)) + _785;
    float _897 = (_827 * (sqrt(1.0 - (isnan(1.0) ? _4110 : (isnan(_4110) ? 1.0 : min(_4110, 1.0)))) - _752)) + _752;
    float _899 = cbMtdParam._m0[22u].x + _772.w;
    float _902 = fma(_897, _253 * NORMAL.x, fma(_896, _260 * TANGENT.x, (_246 * _238) * _895));
    float _905 = fma(_897, _253 * NORMAL.y, fma(_896, _260 * TANGENT.y, (_246 * _239) * _895));
    float _908 = fma(_897, _253 * NORMAL.z, fma(_896, _260 * TANGENT.z, (_246 * _240) * _895));
    float _912 = inversesqrt(dot(vec3(_902, _905, _908), vec3(_902, _905, _908)));
    float _913 = _912 * _902;
    float _914 = _912 * _905;
    float _915 = _912 * _908;
    float _4121 = isnan(0.0) ? _850 : (isnan(_850) ? 0.0 : max(_850, 0.0));
    float _916 = isnan(1.0) ? _4121 : (isnan(_4121) ? 1.0 : min(_4121, 1.0));
    float _4132 = isnan(0.0) ? _899 : (isnan(_899) ? 0.0 : max(_899, 0.0));
    float _4143 = isnan(0.0) ? _835 : (isnan(_835) ? 0.0 : max(_835, 0.0));
    float _4154 = isnan(0.0) ? _836 : (isnan(_836) ? 0.0 : max(_836, 0.0));
    float _4165 = isnan(0.0) ? _837 : (isnan(_837) ? 0.0 : max(_837, 0.0));
    float _934 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _975 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _985 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _975);
    float _986 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _975);
    float _987 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _975);
    float _991 = inversesqrt(dot(vec3(_985, _986, _987), vec3(_985, _986, _987)));
    float _992 = _985 * _991;
    float _993 = _986 * _991;
    float _994 = _987 * _991;
    float _1000 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1001 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1019 = fma(_915, cbSceneParam._m0[5u].z, fma(_914, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _913));
    float _1022 = fma(_915, cbSceneParam._m0[6u].z, fma(_914, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _913));
    float _1025 = fma(_915, cbSceneParam._m0[7u].z, fma(_914, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _913));
    uint _1039 = (_285 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _1045 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4143 : (isnan(_4143) ? 1.0 : min(_4143, 1.0)))) * cbInstanceData._m0[_1039].x;
    float _1046 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4154 : (isnan(_4154) ? 1.0 : min(_4154, 1.0)))) * cbInstanceData._m0[_1039].y;
    float _1047 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4165 : (isnan(_4165) ? 1.0 : min(_4165, 1.0)))) * cbInstanceData._m0[_1039].z;
    float _4176 = isnan(0.0) ? _1045 : (isnan(_1045) ? 0.0 : max(_1045, 0.0));
    float _1048 = isnan(1.0) ? _4176 : (isnan(_4176) ? 1.0 : min(_4176, 1.0));
    float _4187 = isnan(0.0) ? _1046 : (isnan(_1046) ? 0.0 : max(_1046, 0.0));
    float _1049 = isnan(1.0) ? _4187 : (isnan(_4187) ? 1.0 : min(_4187, 1.0));
    float _4198 = isnan(0.0) ? _1047 : (isnan(_1047) ? 0.0 : max(_1047, 0.0));
    float _1050 = isnan(1.0) ? _4198 : (isnan(_4198) ? 1.0 : min(_4198, 1.0));
    vec4 _1059 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1000, cbSceneParam._m0[86u].y * _1001));
    float _1063 = ((isnan(1.0) ? _4132 : (isnan(_4132) ? 1.0 : min(_4132, 1.0))) * TEXCOORD_5.w) * _1059.x;
    float _1064 = dot(vec3(_913, _914, _915), vec3(_992, _993, _994));
    float _1067 = _1064 * 2.0;
    float _1071 = (_1067 * _913) - _992;
    float _1072 = (_1067 * _914) - _993;
    float _1073 = (_1067 * _915) - _994;
    float _1077 = abs(dot(vec3(_992, _993, _994), vec3(_913, _914, _915)));
    float _4209 = isnan(0.0) ? _1077 : (isnan(_1077) ? 0.0 : max(_1077, 0.0));
    float _1079 = sqrt(_916);
    float _1092 = exp2((_1079 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4209 : (isnan(_4209) ? 1.0 : min(_4209, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1079 * 3.0));
    float _1124 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1128 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1132 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1433;
    float _1435;
    float _1436;
    float _1437;
    float _1438;
    float _1439;
    float _1440;
    float _1441;
    float _1442;
    float _1443;
    float _1444;
    float _1445;
    float _1446;
    float _1447;
    float _1448;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1158 = fma(_1132, cbModelParam._m0[26u].z, fma(_1128, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1124));
        float _1162 = fma(_1132, cbModelParam._m0[27u].z, fma(_1128, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1124));
        float _1166 = fma(_1132, cbModelParam._m0[28u].z, fma(_1128, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1124));
        float _1191 = _1124 + _913;
        float _1192 = _1128 + _914;
        float _1193 = _1132 + _915;
        float _1203 = fma(_1193, cbModelParam._m0[26u].z, fma(_1192, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1191)) - _1158;
        float _1204 = fma(_1193, cbModelParam._m0[27u].z, fma(_1192, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1191)) - _1162;
        float _1205 = fma(_1193, cbModelParam._m0[28u].z, fma(_1192, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1191)) - _1166;
        float _1209 = inversesqrt(dot(vec3(_1203, _1204, _1205), vec3(_1203, _1204, _1205)));
        float _1222 = ((_1209 * _1203) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1158 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1223 = ((_1209 * _1204) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1162 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1224 = ((_1209 * _1205) / cbModelParam._m0[34u].z) + ((((((_1166 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1227 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1222, _1223, _1224), 0.0);
        vec4 _1234 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1222, _1223, _1224), 0.0);
        vec4 _1241 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1222, _1223, _1224), 0.0);
        vec4 _1248 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1222, _1223, _1224), 0.0);
        float _1261 = exp2((_1227.w + (-0.5)) * 20.0) * 2.0;
        float _1262 = _1261 * (_1227.x + (-0.5));
        float _1263 = _1261 * (_1227.y + (-0.5));
        float _1264 = _1261 * (_1227.z + (-0.5));
        float _1271 = exp2((_1234.w + (-0.5)) * 20.0) * 2.0;
        float _1272 = _1271 * (_1234.x + (-0.5));
        float _1273 = _1271 * (_1234.y + (-0.5));
        float _1274 = _1271 * (_1234.z + (-0.5));
        float _1281 = exp2((_1241.w + (-0.5)) * 20.0) * 2.0;
        float _1282 = _1281 * (_1241.x + (-0.5));
        float _1283 = _1281 * (_1241.y + (-0.5));
        float _1284 = _1281 * (_1241.z + (-0.5));
        float _1291 = exp2((_1248.w + (-0.5)) * 20.0) * 2.0;
        float _1292 = _1291 * (_1248.x + (-0.5));
        float _1293 = _1291 * (_1248.y + (-0.5));
        float _1294 = _1291 * (_1248.z + (-0.5));
        float _1295 = isnan(0.0) ? _1292 : (isnan(_1292) ? 0.0 : max(_1292, 0.0));
        float _1296 = isnan(0.0) ? _1293 : (isnan(_1293) ? 0.0 : max(_1293, 0.0));
        float _1297 = isnan(0.0) ? _1294 : (isnan(_1294) ? 0.0 : max(_1294, 0.0));
        float _1298 = _1262 * 0.5;
        float _1299 = _1272 * 0.5;
        float _1300 = _1282 * 0.5;
        float _1301 = dot(vec3(_1298, _1299, _1300), vec3(_1298, _1299, _1300));
        float _1306 = (_1301 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1301);
        float _1315 = (dot(vec3(_913, _914, _915), vec3(_1306 * _1298, _1306 * _1299, _1306 * _1300)) + 1.0) * 0.5;
        float _4235 = isnan(0.0) ? _1315 : (isnan(_1315) ? 0.0 : max(_1315, 0.0));
        float _1325 = sqrt(((_1299 * _1299) + (_1298 * _1298)) + (_1300 * _1300)) / (_1295 + 9.9999997473787516355514526367188e-06);
        float _4246 = isnan(0.0) ? _1325 : (isnan(_1325) ? 0.0 : max(_1325, 0.0));
        float _1326 = isnan(1.0) ? _4246 : (isnan(_4246) ? 1.0 : min(_4246, 1.0));
        float _1327 = _1326 * 2.0;
        float _1331 = (1.0 - _1326) / (_1326 + 1.0);
        float _4257 = isnan(0.0) ? _1331 : (isnan(_1331) ? 0.0 : max(_1331, 0.0));
        float _1332 = isnan(1.0) ? _4257 : (isnan(_4257) ? 1.0 : min(_4257, 1.0));
        float _1341 = ((((1.0 - _1332) * (_1327 + 2.0)) * exp2(log2(isnan(1.0) ? _4235 : (isnan(_4235) ? 1.0 : min(_4235, 1.0))) * (_1327 + 1.0))) + _1332) * _1295;
        float _1342 = _1263 * 0.5;
        float _1343 = _1273 * 0.5;
        float _1344 = _1283 * 0.5;
        float _1345 = dot(vec3(_1342, _1343, _1344), vec3(_1342, _1343, _1344));
        float _1350 = (_1345 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1345);
        float _1358 = (dot(vec3(_913, _914, _915), vec3(_1350 * _1342, _1350 * _1343, _1350 * _1344)) + 1.0) * 0.5;
        float _4268 = isnan(0.0) ? _1358 : (isnan(_1358) ? 0.0 : max(_1358, 0.0));
        float _1367 = sqrt(((_1343 * _1343) + (_1342 * _1342)) + (_1344 * _1344)) / (_1296 + 9.9999997473787516355514526367188e-06);
        float _4279 = isnan(0.0) ? _1367 : (isnan(_1367) ? 0.0 : max(_1367, 0.0));
        float _1368 = isnan(1.0) ? _4279 : (isnan(_4279) ? 1.0 : min(_4279, 1.0));
        float _1369 = _1368 * 2.0;
        float _1373 = (1.0 - _1368) / (_1368 + 1.0);
        float _4290 = isnan(0.0) ? _1373 : (isnan(_1373) ? 0.0 : max(_1373, 0.0));
        float _1374 = isnan(1.0) ? _4290 : (isnan(_4290) ? 1.0 : min(_4290, 1.0));
        float _1383 = ((((1.0 - _1374) * (_1369 + 2.0)) * exp2(log2(isnan(1.0) ? _4268 : (isnan(_4268) ? 1.0 : min(_4268, 1.0))) * (_1369 + 1.0))) + _1374) * _1296;
        float _1384 = _1264 * 0.5;
        float _1385 = _1274 * 0.5;
        float _1386 = _1284 * 0.5;
        float _1387 = dot(vec3(_1384, _1385, _1386), vec3(_1384, _1385, _1386));
        float _1392 = (_1387 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1387);
        float _1400 = (dot(vec3(_913, _914, _915), vec3(_1392 * _1384, _1392 * _1385, _1392 * _1386)) + 1.0) * 0.5;
        float _4301 = isnan(0.0) ? _1400 : (isnan(_1400) ? 0.0 : max(_1400, 0.0));
        float _1409 = sqrt(((_1385 * _1385) + (_1384 * _1384)) + (_1386 * _1386)) / (_1297 + 9.9999997473787516355514526367188e-06);
        float _4312 = isnan(0.0) ? _1409 : (isnan(_1409) ? 0.0 : max(_1409, 0.0));
        float _1410 = isnan(1.0) ? _4312 : (isnan(_4312) ? 1.0 : min(_4312, 1.0));
        float _1411 = _1410 * 2.0;
        float _1415 = (1.0 - _1410) / (_1410 + 1.0);
        float _4323 = isnan(0.0) ? _1415 : (isnan(_1415) ? 0.0 : max(_1415, 0.0));
        float _1416 = isnan(1.0) ? _4323 : (isnan(_4323) ? 1.0 : min(_4323, 1.0));
        float _1425 = ((((1.0 - _1416) * (_1411 + 2.0)) * exp2(log2(isnan(1.0) ? _4301 : (isnan(_4301) ? 1.0 : min(_4301, 1.0))) * (_1411 + 1.0))) + _1416) * _1297;
        _1433 = _1264;
        _1435 = _1263;
        _1436 = _1262;
        _1437 = _1274;
        _1438 = _1273;
        _1439 = _1272;
        _1440 = _1284;
        _1441 = _1283;
        _1442 = _1282;
        _1443 = _1297;
        _1444 = _1296;
        _1445 = _1295;
        _1446 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1341 : (isnan(_1341) ? 0.0 : max(_1341, 0.0)));
        _1447 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1383 : (isnan(_1383) ? 0.0 : max(_1383, 0.0)));
        _1448 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1425 : (isnan(_1425) ? 0.0 : max(_1425, 0.0)));
    }
    else
    {
        _1433 = _1434;
        _1435 = _1434;
        _1436 = _1434;
        _1437 = _1434;
        _1438 = _1434;
        _1439 = _1434;
        _1440 = _1434;
        _1441 = _1434;
        _1442 = _1434;
        _1443 = _1434;
        _1444 = _1434;
        _1445 = _1434;
        _1446 = 0.0;
        _1447 = 0.0;
        _1448 = 0.0;
    }
    float _1740;
    float _1741;
    float _1742;
    float _1743;
    float _1744;
    float _1745;
    float _1746;
    float _1747;
    float _1748;
    float _1749;
    float _1750;
    float _1751;
    float _1752;
    float _1753;
    float _1754;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1471 = fma(_1132, cbModelParam._m0[30u].z, fma(_1128, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1124));
        float _1475 = fma(_1132, cbModelParam._m0[31u].z, fma(_1128, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1124));
        float _1479 = fma(_1132, cbModelParam._m0[32u].z, fma(_1128, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1124));
        float _1502 = _1124 + _913;
        float _1503 = _1128 + _914;
        float _1504 = _1132 + _915;
        float _1514 = fma(_1504, cbModelParam._m0[30u].z, fma(_1503, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1502)) - _1471;
        float _1515 = fma(_1504, cbModelParam._m0[31u].z, fma(_1503, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1502)) - _1475;
        float _1516 = fma(_1504, cbModelParam._m0[32u].z, fma(_1503, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1502)) - _1479;
        float _1520 = inversesqrt(dot(vec3(_1514, _1515, _1516), vec3(_1514, _1515, _1516)));
        float _1533 = ((_1520 * _1514) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1471 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1534 = ((_1520 * _1515) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1475 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1535 = ((_1520 * _1516) / cbModelParam._m0[35u].z) + ((((((_1479 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1537 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1533, _1534, _1535), 0.0);
        vec4 _1544 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1533, _1534, _1535), 0.0);
        vec4 _1551 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1533, _1534, _1535), 0.0);
        vec4 _1558 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1533, _1534, _1535), 0.0);
        float _1570 = exp2((_1537.w + (-0.5)) * 20.0) * 2.0;
        float _1571 = _1570 * (_1537.x + (-0.5));
        float _1572 = _1570 * (_1537.y + (-0.5));
        float _1573 = _1570 * (_1537.z + (-0.5));
        float _1580 = exp2((_1544.w + (-0.5)) * 20.0) * 2.0;
        float _1581 = _1580 * (_1544.x + (-0.5));
        float _1582 = _1580 * (_1544.y + (-0.5));
        float _1583 = _1580 * (_1544.z + (-0.5));
        float _1590 = exp2((_1551.w + (-0.5)) * 20.0) * 2.0;
        float _1591 = _1590 * (_1551.x + (-0.5));
        float _1592 = _1590 * (_1551.y + (-0.5));
        float _1593 = _1590 * (_1551.z + (-0.5));
        float _1600 = exp2((_1558.w + (-0.5)) * 20.0) * 2.0;
        float _1601 = _1600 * (_1558.x + (-0.5));
        float _1602 = _1600 * (_1558.y + (-0.5));
        float _1603 = _1600 * (_1558.z + (-0.5));
        float _1604 = isnan(0.0) ? _1601 : (isnan(_1601) ? 0.0 : max(_1601, 0.0));
        float _1605 = isnan(0.0) ? _1602 : (isnan(_1602) ? 0.0 : max(_1602, 0.0));
        float _1606 = isnan(0.0) ? _1603 : (isnan(_1603) ? 0.0 : max(_1603, 0.0));
        float _1607 = _1571 * 0.5;
        float _1608 = _1581 * 0.5;
        float _1609 = _1591 * 0.5;
        float _1610 = dot(vec3(_1607, _1608, _1609), vec3(_1607, _1608, _1609));
        float _1615 = (_1610 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1610);
        float _1623 = (dot(vec3(_913, _914, _915), vec3(_1615 * _1607, _1615 * _1608, _1615 * _1609)) + 1.0) * 0.5;
        float _4364 = isnan(0.0) ? _1623 : (isnan(_1623) ? 0.0 : max(_1623, 0.0));
        float _1632 = sqrt(((_1608 * _1608) + (_1607 * _1607)) + (_1609 * _1609)) / (_1604 + 9.9999997473787516355514526367188e-06);
        float _4375 = isnan(0.0) ? _1632 : (isnan(_1632) ? 0.0 : max(_1632, 0.0));
        float _1633 = isnan(1.0) ? _4375 : (isnan(_4375) ? 1.0 : min(_4375, 1.0));
        float _1634 = _1633 * 2.0;
        float _1638 = (1.0 - _1633) / (_1633 + 1.0);
        float _4386 = isnan(0.0) ? _1638 : (isnan(_1638) ? 0.0 : max(_1638, 0.0));
        float _1639 = isnan(1.0) ? _4386 : (isnan(_4386) ? 1.0 : min(_4386, 1.0));
        float _1648 = ((((1.0 - _1639) * (_1634 + 2.0)) * exp2(log2(isnan(1.0) ? _4364 : (isnan(_4364) ? 1.0 : min(_4364, 1.0))) * (_1634 + 1.0))) + _1639) * _1604;
        float _1649 = _1572 * 0.5;
        float _1650 = _1582 * 0.5;
        float _1651 = _1592 * 0.5;
        float _1652 = dot(vec3(_1649, _1650, _1651), vec3(_1649, _1650, _1651));
        float _1657 = (_1652 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1652);
        float _1665 = (dot(vec3(_913, _914, _915), vec3(_1657 * _1649, _1657 * _1650, _1657 * _1651)) + 1.0) * 0.5;
        float _4397 = isnan(0.0) ? _1665 : (isnan(_1665) ? 0.0 : max(_1665, 0.0));
        float _1674 = sqrt(((_1650 * _1650) + (_1649 * _1649)) + (_1651 * _1651)) / (_1605 + 9.9999997473787516355514526367188e-06);
        float _4408 = isnan(0.0) ? _1674 : (isnan(_1674) ? 0.0 : max(_1674, 0.0));
        float _1675 = isnan(1.0) ? _4408 : (isnan(_4408) ? 1.0 : min(_4408, 1.0));
        float _1676 = _1675 * 2.0;
        float _1680 = (1.0 - _1675) / (_1675 + 1.0);
        float _4419 = isnan(0.0) ? _1680 : (isnan(_1680) ? 0.0 : max(_1680, 0.0));
        float _1681 = isnan(1.0) ? _4419 : (isnan(_4419) ? 1.0 : min(_4419, 1.0));
        float _1690 = ((((1.0 - _1681) * (_1676 + 2.0)) * exp2(log2(isnan(1.0) ? _4397 : (isnan(_4397) ? 1.0 : min(_4397, 1.0))) * (_1676 + 1.0))) + _1681) * _1605;
        float _1691 = _1573 * 0.5;
        float _1692 = _1583 * 0.5;
        float _1693 = _1593 * 0.5;
        float _1694 = dot(vec3(_1691, _1692, _1693), vec3(_1691, _1692, _1693));
        float _1699 = (_1694 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1694);
        float _1707 = (dot(vec3(_913, _914, _915), vec3(_1699 * _1691, _1699 * _1692, _1699 * _1693)) + 1.0) * 0.5;
        float _4430 = isnan(0.0) ? _1707 : (isnan(_1707) ? 0.0 : max(_1707, 0.0));
        float _1716 = sqrt(((_1692 * _1692) + (_1691 * _1691)) + (_1693 * _1693)) / (_1606 + 9.9999997473787516355514526367188e-06);
        float _4441 = isnan(0.0) ? _1716 : (isnan(_1716) ? 0.0 : max(_1716, 0.0));
        float _1717 = isnan(1.0) ? _4441 : (isnan(_4441) ? 1.0 : min(_4441, 1.0));
        float _1718 = _1717 * 2.0;
        float _1722 = (1.0 - _1717) / (_1717 + 1.0);
        float _4452 = isnan(0.0) ? _1722 : (isnan(_1722) ? 0.0 : max(_1722, 0.0));
        float _1723 = isnan(1.0) ? _4452 : (isnan(_4452) ? 1.0 : min(_4452, 1.0));
        float _1732 = ((((1.0 - _1723) * (_1718 + 2.0)) * exp2(log2(isnan(1.0) ? _4430 : (isnan(_4430) ? 1.0 : min(_4430, 1.0))) * (_1718 + 1.0))) + _1723) * _1606;
        _1740 = _1573;
        _1741 = _1572;
        _1742 = _1571;
        _1743 = _1583;
        _1744 = _1582;
        _1745 = _1581;
        _1746 = _1593;
        _1747 = _1592;
        _1748 = _1591;
        _1749 = _1606;
        _1750 = _1605;
        _1751 = _1604;
        _1752 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1648 : (isnan(_1648) ? 0.0 : max(_1648, 0.0)));
        _1753 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1690 : (isnan(_1690) ? 0.0 : max(_1690, 0.0)));
        _1754 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1732 : (isnan(_1732) ? 0.0 : max(_1732, 0.0)));
    }
    else
    {
        _1740 = _1434;
        _1741 = _1434;
        _1742 = _1434;
        _1743 = _1434;
        _1744 = _1434;
        _1745 = _1434;
        _1746 = _1434;
        _1747 = _1434;
        _1748 = _1434;
        _1749 = _1434;
        _1750 = _1434;
        _1751 = _1434;
        _1752 = 0.0;
        _1753 = 0.0;
        _1754 = 0.0;
    }
    float _1764 = (cbModelParam._m0[1u].x * (_1752 - _1446)) + _1446;
    float _1765 = (cbModelParam._m0[1u].x * (_1753 - _1447)) + _1447;
    float _1766 = (cbModelParam._m0[1u].x * (_1754 - _1448)) + _1448;
    float _1787 = fma(_1766, cbSceneParam._m0[89u].z, fma(_1765, cbSceneParam._m0[89u].y, _1764 * cbSceneParam._m0[89u].x));
    float _1790 = fma(_1766, cbSceneParam._m0[90u].z, fma(_1765, cbSceneParam._m0[90u].y, _1764 * cbSceneParam._m0[90u].x));
    float _1793 = fma(_1766, cbSceneParam._m0[91u].z, fma(_1765, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1764));
    float _1808 = _1071 * 0.5;
    float _1809 = _1072 * 0.5;
    float _1810 = _1073 * 0.5;
    float _1811 = dot(vec4(_1808, _1809, _1810, 1.0), vec4(_1742, _1745, _1748, _1751));
    float _1814 = dot(vec4(_1808, _1809, _1810, 1.0), vec4(_1741, _1744, _1747, _1750));
    float _1817 = dot(vec4(_1808, _1809, _1810, 1.0), vec4(_1740, _1743, _1746, _1749));
    float _1851;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1824 = dot(vec4(_1808, _1809, _1810, 1.0), vec4(_1433, _1437, _1440, _1443));
        float _1828 = dot(vec4(_1808, _1809, _1810, 1.0), vec4(_1435, _1438, _1441, _1444));
        float _1832 = dot(vec4(_1808, _1809, _1810, 1.0), vec4(_1436, _1439, _1442, _1445));
        float _1839 = dot(vec4(cbModelParam._m0[39u]), vec4(_1808, _1809, _1810, 1.0));
        _1851 = dot(vec3(isnan(0.0) ? _1832 : (isnan(_1832) ? 0.0 : max(_1832, 0.0)), isnan(0.0) ? _1828 : (isnan(_1828) ? 0.0 : max(_1828, 0.0)), isnan(0.0) ? _1824 : (isnan(_1824) ? 0.0 : max(_1824, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1839) ? 0.0 : (isnan(0.0) ? _1839 : max(0.0, _1839))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1851 = 1.0;
    }
    float _1862;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1853 = dot(vec4(cbModelParam._m0[40u]), vec4(_1808, _1809, _1810, 1.0));
        _1862 = dot(vec3(isnan(0.0) ? _1811 : (isnan(_1811) ? 0.0 : max(_1811, 0.0)), isnan(0.0) ? _1814 : (isnan(_1814) ? 0.0 : max(_1814, 0.0)), isnan(0.0) ? _1817 : (isnan(_1817) ? 0.0 : max(_1817, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1853) ? 0.0 : (isnan(0.0) ? _1853 : max(0.0, _1853))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1862 = 1.0;
    }
    float _1866 = (_1862 * cbModelParam._m0[1u].x) + (_1851 * (1.0 - cbModelParam._m0[1u].x));
    float _1876 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _916);
    float _1877 = isnan(_1876) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1876 : min(cbModelParam._m0[25u].z, _1876));
    float _1958;
    float _1960;
    float _1962;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1925 = fma(_1132, cbModelParam._m0[13u].z, fma(_1128, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1124)) + cbModelParam._m0[13u].w;
        float _1929 = fma(_1132, cbModelParam._m0[14u].z, fma(_1128, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1124)) + cbModelParam._m0[14u].w;
        float _1933 = fma(_1132, cbModelParam._m0[15u].z, fma(_1128, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1124)) + cbModelParam._m0[15u].w;
        float _1936 = fma(_1073, cbModelParam._m0[13u].z, fma(_1072, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1071));
        float _1939 = fma(_1073, cbModelParam._m0[14u].z, fma(_1072, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1071));
        float _1942 = fma(_1073, cbModelParam._m0[15u].z, fma(_1072, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1071));
        float _1970;
        if (_1936 > 0.0)
        {
            _1970 = abs((1.0 - _1925) / _1936);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1936 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1925 + 1.0) / _1936);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1970 = frontier_phi_14_12_ladder;
        }
        float _2141;
        if (_1939 > 0.0)
        {
            _2141 = abs((1.0 - _1929) / _1939);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1939 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1929 + 1.0) / _1939);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2141 = frontier_phi_23_19_ladder;
        }
        float _2436;
        if (_1942 > 0.0)
        {
            _2436 = abs((1.0 - _1933) / _1942);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1942 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1933 + 1.0) / _1942);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2436 = frontier_phi_35_30_ladder;
        }
        float _2438 = isnan(_2141) ? _1970 : (isnan(_1970) ? _2141 : min(_1970, _2141));
        float _2439 = isnan(_2436) ? _2438 : (isnan(_2438) ? _2436 : min(_2438, _2436));
        float _2443 = (_2439 * _1936) + _1925;
        float _2444 = (_2439 * _1939) + _1929;
        float _2445 = (_2439 * _1942) + _1933;
        float _2446 = _2439 * 9.9999997473787516355514526367188e-05;
        float _2448 = (-1.0) - _2446;
        float _2450 = _2446 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2445 > _2450) || ((_2445 < _2448) || ((_2444 > _2450) || ((_2444 < _2448) || ((_2443 < _2448) || (_2443 > _2450))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2590 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2445, cbModelParam._m0[9u].z, fma(_2444, cbModelParam._m0[9u].y, _2443 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2445, cbModelParam._m0[10u].z, fma(_2444, cbModelParam._m0[10u].y, _2443 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2445, cbModelParam._m0[11u].z, fma(_2444, cbModelParam._m0[11u].y, _2443 * cbModelParam._m0[11u].x))), _1877);
            frontier_phi_13_35_ladder = _2590.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2590.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2590.x * cbModelParam._m0[1u].y;
        }
        _1958 = frontier_phi_13_35_ladder_2;
        _1960 = frontier_phi_13_35_ladder_1;
        _1962 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1946 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1071, _1072, _1073), _1877);
        _1958 = _1946.x * cbModelParam._m0[1u].y;
        _1960 = _1946.y * cbModelParam._m0[1u].y;
        _1962 = _1946.z * cbModelParam._m0[1u].y;
    }
    float _1966 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _916);
    float _1967 = isnan(_1966) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1966 : min(cbModelParam._m0[25u].w, _1966));
    float _2058;
    float _2060;
    float _2062;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2022 = fma(_1132, cbModelParam._m0[21u].z, fma(_1128, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1124)) + cbModelParam._m0[21u].w;
        float _2026 = fma(_1132, cbModelParam._m0[22u].z, fma(_1128, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1124)) + cbModelParam._m0[22u].w;
        float _2030 = fma(_1132, cbModelParam._m0[23u].z, fma(_1128, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1124)) + cbModelParam._m0[23u].w;
        float _2033 = fma(_1073, cbModelParam._m0[21u].z, fma(_1072, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1071));
        float _2036 = fma(_1073, cbModelParam._m0[22u].z, fma(_1072, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1071));
        float _2039 = fma(_1073, cbModelParam._m0[23u].z, fma(_1072, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1071));
        float _2146;
        if (_2033 > 0.0)
        {
            _2146 = abs((1.0 - _2022) / _2033);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_2033 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_2022 + 1.0) / _2033);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2146 = frontier_phi_25_21_ladder;
        }
        float _2463;
        if (_2036 > 0.0)
        {
            _2463 = abs((1.0 - _2026) / _2036);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_2036 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_2026 + 1.0) / _2036);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2463 = frontier_phi_37_32_ladder;
        }
        float _2790;
        if (_2039 > 0.0)
        {
            _2790 = abs((1.0 - _2030) / _2039);
        }
        else
        {
            float frontier_phi_47_44_ladder;
            if (_2039 < 0.0)
            {
                frontier_phi_47_44_ladder = abs((_2030 + 1.0) / _2039);
            }
            else
            {
                frontier_phi_47_44_ladder = 5000.0;
            }
            _2790 = frontier_phi_47_44_ladder;
        }
        float _2792 = isnan(_2463) ? _2146 : (isnan(_2146) ? _2463 : min(_2146, _2463));
        float _2793 = isnan(_2790) ? _2792 : (isnan(_2792) ? _2790 : min(_2792, _2790));
        float _2797 = (_2793 * _2033) + _2022;
        float _2798 = (_2793 * _2036) + _2026;
        float _2799 = (_2793 * _2039) + _2030;
        float _2800 = _2793 * 9.9999997473787516355514526367188e-05;
        float _2801 = (-1.0) - _2800;
        float _2803 = _2800 + 1.0;
        float frontier_phi_22_47_ladder;
        float frontier_phi_22_47_ladder_1;
        float frontier_phi_22_47_ladder_2;
        if ((_2799 > _2803) || ((_2799 < _2801) || ((_2798 > _2803) || ((_2798 < _2801) || ((_2797 < _2801) || (_2797 > _2803))))))
        {
            frontier_phi_22_47_ladder = 0.0;
            frontier_phi_22_47_ladder_1 = 0.0;
            frontier_phi_22_47_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2917 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2799, cbModelParam._m0[17u].z, fma(_2798, cbModelParam._m0[17u].y, _2797 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2799, cbModelParam._m0[18u].z, fma(_2798, cbModelParam._m0[18u].y, _2797 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2799, cbModelParam._m0[19u].z, fma(_2798, cbModelParam._m0[19u].y, _2797 * cbModelParam._m0[19u].x))), _1967);
            frontier_phi_22_47_ladder = _2917.z * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_1 = _2917.y * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_2 = _2917.x * cbModelParam._m0[1u].z;
        }
        _2058 = frontier_phi_22_47_ladder_2;
        _2060 = frontier_phi_22_47_ladder_1;
        _2062 = frontier_phi_22_47_ladder;
    }
    else
    {
        vec4 _2042 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1071, _1072, _1073), _1967);
        _2058 = _2042.x * cbModelParam._m0[1u].z;
        _2060 = _2042.y * cbModelParam._m0[1u].z;
        _2062 = _2042.z * cbModelParam._m0[1u].z;
    }
    float _2074 = ((((1.0 - _1092) * ((_1079 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_1092 * _1079)) * _1063;
    float _2075 = _2074 * ((cbModelParam._m0[1u].w * (_2058 - _1958)) + _1958);
    float _2076 = _2074 * ((cbModelParam._m0[1u].w * (_2060 - _1960)) + _1960);
    float _2077 = _2074 * ((cbModelParam._m0[1u].w * (_2062 - _1962)) + _1962);
    float _2080 = fma(_2077, cbSceneParam._m0[89u].z, fma(_2076, cbSceneParam._m0[89u].y, _2075 * cbSceneParam._m0[89u].x));
    float _2083 = fma(_2077, cbSceneParam._m0[90u].z, fma(_2076, cbSceneParam._m0[90u].y, _2075 * cbSceneParam._m0[90u].x));
    float _2086 = fma(_2077, cbSceneParam._m0[91u].z, fma(_2076, cbSceneParam._m0[91u].y, _2075 * cbSceneParam._m0[91u].x));
    float _2120 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2124 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2128 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2132 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2133 = _2120 / _2132;
    float _2134 = _2124 / _2132;
    float _2135 = _2128 / _2132;
    float _2282;
    float _2283;
    float _2284;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2162 = ((uint(_2135 > cbSceneParam._m0[59u].y) + uint(_2135 > cbSceneParam._m0[59u].x)) + uint(_2135 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2163 = _2162 + 43u;
        uint _2171 = _2162 + 44u;
        uint _2179 = _2162 + 45u;
        uint _2187 = _2162 + 46u;
        float _2198 = fma(_2132, cbSceneParam._m0[_2163].w, fma(_2128, cbSceneParam._m0[_2163].z, fma(_2124, cbSceneParam._m0[_2163].y, _2120 * cbSceneParam._m0[_2163].x)));
        float _2202 = fma(_2132, cbSceneParam._m0[_2171].w, fma(_2128, cbSceneParam._m0[_2171].z, fma(_2124, cbSceneParam._m0[_2171].y, _2120 * cbSceneParam._m0[_2171].x)));
        float _2210 = fma(_2132, cbSceneParam._m0[_2187].w, fma(_2128, cbSceneParam._m0[_2187].z, fma(_2124, cbSceneParam._m0[_2187].y, _2120 * cbSceneParam._m0[_2187].x)));
        float _2215 = cbSceneParam._m0[33u].z * _2210;
        float _2217 = cbSceneParam._m0[33u].w * _2210;
        float _2220 = fma(_2132, cbSceneParam._m0[_2179].w, fma(_2128, cbSceneParam._m0[_2179].z, fma(_2124, cbSceneParam._m0[_2179].y, _2120 * cbSceneParam._m0[_2179].x))) / _2210;
        float _2268 = (cbSceneParam._m0[33u].x - sqrt(((_2134 * _2134) + (_2133 * _2133)) + (_2135 * _2135))) * cbSceneParam._m0[33u].y;
        float _4578 = isnan(0.0) ? _2268 : (isnan(_2268) ? 0.0 : max(_2268, 0.0));
        float _2275 = (isnan(1.0) ? _4578 : (isnan(_4578) ? 1.0 : min(_4578, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2215 + _2198) / _2210, (_2217 + _2202) / _2210), _2220), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2217 + _2198) / _2210, (_2202 - _2215) / _2210), _2220), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2198 - _2215) / _2210, (_2202 - _2217) / _2210), _2220), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2198 - _2217) / _2210, (_2215 + _2202) / _2210), _2220), 0.0)).x), vec4(0.25)));
        _2282 = 1.0 - (_2275 * cbSceneParam._m0[34u].x);
        _2283 = 1.0 - (_2275 * cbSceneParam._m0[34u].y);
        _2284 = 1.0 - (_2275 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2282 = 1.0;
        _2283 = 1.0;
        _2284 = 1.0;
    }
    float _2348;
    float _2350;
    float _2352;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2336 = fma(_2132, cbSceneParam._m0[63u].w, fma(_2128, cbSceneParam._m0[63u].z, fma(_2124, cbSceneParam._m0[63u].y, _2120 * cbSceneParam._m0[63u].x)));
        float _2337 = fma(_2132, cbSceneParam._m0[60u].w, fma(_2128, cbSceneParam._m0[60u].z, fma(_2124, cbSceneParam._m0[60u].y, _2120 * cbSceneParam._m0[60u].x))) / _2336;
        float _2338 = fma(_2132, cbSceneParam._m0[61u].w, fma(_2128, cbSceneParam._m0[61u].z, fma(_2124, cbSceneParam._m0[61u].y, _2120 * cbSceneParam._m0[61u].x))) / _2336;
        float frontier_phi_34_33_ladder;
        float frontier_phi_34_33_ladder_1;
        float frontier_phi_34_33_ladder_2;
        if ((((_2337 >= cbSceneParam._m0[64u].x) && (_2338 >= cbSceneParam._m0[64u].y)) && (_2337 <= cbSceneParam._m0[64u].z)) && (_2338 <= cbSceneParam._m0[64u].w))
        {
            float _2476 = fma(_2132, cbSceneParam._m0[62u].w, fma(_2128, cbSceneParam._m0[62u].z, fma(_2124, cbSceneParam._m0[62u].y, _2120 * cbSceneParam._m0[62u].x))) / _2336;
            float _2480 = isnan(cbSceneParam._m0[41u].w) ? _2476 : (isnan(_2476) ? cbSceneParam._m0[41u].w : max(_2476, cbSceneParam._m0[41u].w));
            float _2523 = (cbSceneParam._m0[33u].x - sqrt(((_2134 * _2134) + (_2133 * _2133)) + (_2135 * _2135))) * cbSceneParam._m0[33u].y;
            float _4594 = isnan(0.0) ? _2523 : (isnan(_2523) ? 0.0 : max(_2523, 0.0));
            float _2530 = (isnan(1.0) ? _4594 : (isnan(_4594) ? 1.0 : min(_4594, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2337, cbSceneParam._m0[33u].w + _2338), _2480), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2337, _2338 - cbSceneParam._m0[33u].z), _2480), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2337 - cbSceneParam._m0[33u].z, _2338 - cbSceneParam._m0[33u].w), _2480), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2337 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2338), _2480), 0.0)).x), vec4(0.25)));
            float _2534 = 1.0 - (_2530 * cbSceneParam._m0[34u].x);
            float _2535 = 1.0 - (_2530 * cbSceneParam._m0[34u].y);
            float _2536 = 1.0 - (_2530 * cbSceneParam._m0[34u].z);
            frontier_phi_34_33_ladder = isnan(_2536) ? _2284 : (isnan(_2284) ? _2536 : min(_2284, _2536));
            frontier_phi_34_33_ladder_1 = isnan(_2535) ? _2283 : (isnan(_2283) ? _2535 : min(_2283, _2535));
            frontier_phi_34_33_ladder_2 = isnan(_2534) ? _2282 : (isnan(_2282) ? _2534 : min(_2282, _2534));
        }
        else
        {
            frontier_phi_34_33_ladder = _2284;
            frontier_phi_34_33_ladder_1 = _2283;
            frontier_phi_34_33_ladder_2 = _2282;
        }
        _2348 = frontier_phi_34_33_ladder_2;
        _2350 = frontier_phi_34_33_ladder_1;
        _2352 = frontier_phi_34_33_ladder;
    }
    else
    {
        _2348 = _2282;
        _2350 = _2283;
        _2352 = _2284;
    }
    uvec4 _2357 = floatBitsToUint(cbInstanceData._m0[_285 + 5u]);
    uint _2359 = _2357.x * 14u;
    uint _2360 = _2359 + 13u;
    float _2367 = _1063 + (-1.0);
    float _2372 = (cbLight._m0[_2360].x * _2367) + 1.0;
    float _2373 = (cbLight._m0[_2360].y * _2367) + 1.0;
    float _2374 = (cbLight._m0[_2360].z * _2367) + 1.0;
    float _2375 = (cbLight._m0[_2360].w * _2367) + 1.0;
    uint _2376 = _2359 + 5u;
    float _2382 = isnan(1.0) ? _2373 : (isnan(_2373) ? 1.0 : min(_2373, 1.0));
    uint _2386 = _2359 + 4u;
    float _2395 = isnan(1.0) ? _2372 : (isnan(_2372) ? 1.0 : min(_2372, 1.0));
    uint _2399 = _2359 | 1u;
    float _2410 = dot(vec3(cbLight._m0[_2359].xyz), vec3(_913, _914, _915));
    float _2413 = dot(vec3(cbLight._m0[_2399].xyz), vec3(_913, _914, _915));
    float _4630 = isnan(0.0) ? _2410 : (isnan(_2410) ? 0.0 : max(_2410, 0.0));
    float _4641 = isnan(0.0) ? _2413 : (isnan(_2413) ? 0.0 : max(_2413, 0.0));
    float _2418 = (isnan(1.0) ? _4630 : (isnan(_4630) ? 1.0 : min(_4630, 1.0))) * 0.3183098733425140380859375;
    float _2420 = (isnan(1.0) ? _4641 : (isnan(_4641) ? 1.0 : min(_4641, 1.0))) * 0.3183098733425140380859375;
    float _2427 = ((cbLight._m0[_2376].x * _2382) * _2420) + (((cbLight._m0[_2386].x * _2348) * _2395) * _2418);
    float _2428 = ((_2382 * cbLight._m0[_2376].y) * _2420) + (((cbLight._m0[_2386].y * _2350) * _2395) * _2418);
    float _2429 = ((_2382 * cbLight._m0[_2376].z) * _2420) + (((cbLight._m0[_2386].z * _2352) * _2395) * _2418);
    uvec4 _2433 = floatBitsToUint(cbLight._m0[_2359 + 12u]);
    bool _2435 = _2433.x == 0u;
    float _2537;
    float _2539;
    float _2541;
    if (_2435)
    {
        _2537 = _2427;
        _2539 = _2428;
        _2541 = _2429;
    }
    else
    {
        uint _2545 = _2359 + 6u;
        float _2561 = (dot(vec3(cbLight._m0[_2359 + 2u].xyz), vec3(_913, _914, _915)) * 0.5) + 0.5;
        float _2562 = _2561 * _2561;
        float _4652 = isnan(0.0) ? _2562 : (isnan(_2562) ? 0.0 : max(_2562, 0.0));
        float _2563 = isnan(1.0) ? _4652 : (isnan(_4652) ? 1.0 : min(_4652, 1.0));
        float _2564 = isnan(1.0) ? _2374 : (isnan(_2374) ? 1.0 : min(_2374, 1.0));
        _2537 = (((cbLight._m0[_2545].x * 0.3183098733425140380859375) * _2563) * _2564) + _2427;
        _2539 = (((cbLight._m0[_2545].y * 0.3183098733425140380859375) * _2563) * _2564) + _2428;
        _2541 = (((cbLight._m0[_2545].z * 0.3183098733425140380859375) * _2563) * _2564) + _2429;
    }
    bool _2544 = _2433.y == 0u;
    float _2599;
    float _2601;
    float _2603;
    if (_2544)
    {
        _2599 = _2537;
        _2601 = _2539;
        _2603 = _2541;
    }
    else
    {
        uint _2761 = _2359 + 7u;
        float _2777 = (dot(vec3(cbLight._m0[_2359 + 3u].xyz), vec3(_913, _914, _915)) * 0.5) + 0.5;
        float _2778 = _2777 * _2777;
        float _4668 = isnan(0.0) ? _2778 : (isnan(_2778) ? 0.0 : max(_2778, 0.0));
        float _2779 = isnan(1.0) ? _4668 : (isnan(_4668) ? 1.0 : min(_4668, 1.0));
        float _2780 = isnan(1.0) ? _2375 : (isnan(_2375) ? 1.0 : min(_2375, 1.0));
        _2599 = (((cbLight._m0[_2761].x * 0.3183098733425140380859375) * _2779) * _2780) + _2537;
        _2601 = (((cbLight._m0[_2761].y * 0.3183098733425140380859375) * _2779) * _2780) + _2539;
        _2603 = (((cbLight._m0[_2761].z * 0.3183098733425140380859375) * _2779) * _2780) + _2541;
    }
    uint _2606 = _2359 + 8u;
    float _2619 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2359].w)) * _916) * 0.949999988079071044921875);
    float _2620 = _2619 * _2619;
    float _2621 = cbLight._m0[_2359].x + _992;
    float _2622 = cbLight._m0[_2359].y + _993;
    float _2623 = cbLight._m0[_2359].z + _994;
    float _2627 = inversesqrt(dot(vec3(_2621, _2622, _2623), vec3(_2621, _2622, _2623)));
    float _2628 = _2627 * _2621;
    float _2629 = _2627 * _2622;
    float _2630 = _2627 * _2623;
    float _2631 = dot(vec3(_913, _914, _915), vec3(cbLight._m0[_2359].xyz));
    float _4684 = isnan(0.0) ? _2631 : (isnan(_2631) ? 0.0 : max(_2631, 0.0));
    float _2634 = isnan(1.0) ? _4684 : (isnan(_4684) ? 1.0 : min(_4684, 1.0));
    float _4695 = isnan(0.0) ? _1064 : (isnan(_1064) ? 0.0 : max(_1064, 0.0));
    float _2635 = isnan(1.0) ? _4695 : (isnan(_4695) ? 1.0 : min(_4695, 1.0));
    float _2636 = dot(vec3(_913, _914, _915), vec3(_2628, _2629, _2630));
    float _4706 = isnan(0.0) ? _2636 : (isnan(_2636) ? 0.0 : max(_2636, 0.0));
    float _2639 = isnan(1.0) ? _4706 : (isnan(_4706) ? 1.0 : min(_4706, 1.0));
    float _2640 = dot(vec3(cbLight._m0[_2359].xyz), vec3(_2628, _2629, _2630));
    float _4717 = isnan(0.0) ? _2640 : (isnan(_2640) ? 0.0 : max(_2640, 0.0));
    float _2644 = _2620 * _2620;
    float _2648 = ((_2639 * _2639) * (_2644 + (-1.0))) + 1.0;
    float _2659 = (exp2(log2(1.0 - (isnan(1.0) ? _4717 : (isnan(_4717) ? 1.0 : min(_4717, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2660 = 1.0 - _2620;
    float _2671 = (0.5 / (((_2635 * ((_2634 * _2660) + _2620)) + 9.9999999392252902907785028219223e-09) + (((_2635 * _2660) + _2620) * _2634))) * _2634;
    float _4728 = isnan(0.0) ? _2671 : (isnan(_2671) ? 0.0 : max(_2671, 0.0));
    float _2673 = (isnan(1.0) ? _4728 : (isnan(_4728) ? 1.0 : min(_4728, 1.0))) * (_2644 / ((_2648 * _2648) * 3.141590118408203125));
    uint _2687 = _2359 + 9u;
    float _2698 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2399].w)) * _916) * 0.949999988079071044921875);
    float _2699 = _2698 * _2698;
    float _2700 = cbLight._m0[_2399].x + _992;
    float _2701 = cbLight._m0[_2399].y + _993;
    float _2702 = cbLight._m0[_2399].z + _994;
    float _2706 = inversesqrt(dot(vec3(_2700, _2701, _2702), vec3(_2700, _2701, _2702)));
    float _2707 = _2706 * _2700;
    float _2708 = _2706 * _2701;
    float _2709 = _2706 * _2702;
    float _2710 = dot(vec3(_913, _914, _915), vec3(cbLight._m0[_2399].xyz));
    float _4739 = isnan(0.0) ? _2710 : (isnan(_2710) ? 0.0 : max(_2710, 0.0));
    float _2713 = isnan(1.0) ? _4739 : (isnan(_4739) ? 1.0 : min(_4739, 1.0));
    float _2714 = dot(vec3(_913, _914, _915), vec3(_2707, _2708, _2709));
    float _4750 = isnan(0.0) ? _2714 : (isnan(_2714) ? 0.0 : max(_2714, 0.0));
    float _2717 = isnan(1.0) ? _4750 : (isnan(_4750) ? 1.0 : min(_4750, 1.0));
    float _2718 = dot(vec3(cbLight._m0[_2399].xyz), vec3(_2707, _2708, _2709));
    float _4761 = isnan(0.0) ? _2718 : (isnan(_2718) ? 0.0 : max(_2718, 0.0));
    float _2722 = _2699 * _2699;
    float _2726 = ((_2717 * _2717) * (_2722 + (-1.0))) + 1.0;
    float _2735 = (exp2(log2(1.0 - (isnan(1.0) ? _4761 : (isnan(_4761) ? 1.0 : min(_4761, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2736 = 1.0 - _2699;
    float _2746 = (0.5 / (((_2635 * ((_2713 * _2736) + _2699)) + 9.9999999392252902907785028219223e-09) + (((_2635 * _2736) + _2699) * _2713))) * _2713;
    float _4772 = isnan(0.0) ? _2746 : (isnan(_2746) ? 0.0 : max(_2746, 0.0));
    float _2748 = (isnan(1.0) ? _4772 : (isnan(_4772) ? 1.0 : min(_4772, 1.0))) * (_2722 / ((_2726 * _2726) * 3.141590118408203125));
    float _2758 = (((_2735 * cbLight._m0[_2687].x) * _2748) * _2382) + ((((cbLight._m0[_2606].x * _2348) * _2659) * _2673) * _2395);
    float _2759 = (((_2735 * cbLight._m0[_2687].y) * _2748) * _2382) + ((((cbLight._m0[_2606].y * _2350) * _2659) * _2673) * _2395);
    float _2760 = (((_2735 * cbLight._m0[_2687].z) * _2748) * _2382) + ((((cbLight._m0[_2606].z * _2352) * _2659) * _2673) * _2395);
    float _2816;
    float _2818;
    float _2820;
    if (_2435)
    {
        _2816 = _2758;
        _2818 = _2759;
        _2820 = _2760;
    }
    else
    {
        uint _2822 = _2359 + 2u;
        uint _2826 = _2359 + 10u;
        float _2840 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2822].w)) * _916) * 0.949999988079071044921875);
        float _2841 = _2840 * _2840;
        float _2842 = cbLight._m0[_2822].x + _992;
        float _2843 = cbLight._m0[_2822].y + _993;
        float _2844 = cbLight._m0[_2822].z + _994;
        float _2848 = inversesqrt(dot(vec3(_2842, _2843, _2844), vec3(_2842, _2843, _2844)));
        float _2849 = _2848 * _2842;
        float _2850 = _2848 * _2843;
        float _2851 = _2848 * _2844;
        float _2852 = dot(vec3(_913, _914, _915), vec3(cbLight._m0[_2822].xyz));
        float _4783 = isnan(0.0) ? _2852 : (isnan(_2852) ? 0.0 : max(_2852, 0.0));
        float _2855 = isnan(1.0) ? _4783 : (isnan(_4783) ? 1.0 : min(_4783, 1.0));
        float _2856 = dot(vec3(_913, _914, _915), vec3(_2849, _2850, _2851));
        float _4794 = isnan(0.0) ? _2856 : (isnan(_2856) ? 0.0 : max(_2856, 0.0));
        float _2859 = isnan(1.0) ? _4794 : (isnan(_4794) ? 1.0 : min(_4794, 1.0));
        float _2860 = dot(vec3(cbLight._m0[_2822].xyz), vec3(_2849, _2850, _2851));
        float _4805 = isnan(0.0) ? _2860 : (isnan(_2860) ? 0.0 : max(_2860, 0.0));
        float _2864 = _2841 * _2841;
        float _2868 = ((_2859 * _2859) * (_2864 + (-1.0))) + 1.0;
        float _2877 = (exp2(log2(1.0 - (isnan(1.0) ? _4805 : (isnan(_4805) ? 1.0 : min(_4805, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2878 = 1.0 - _2841;
        float _2888 = (0.5 / (((_2635 * ((_2855 * _2878) + _2841)) + 9.9999999392252902907785028219223e-09) + (((_2635 * _2878) + _2841) * _2855))) * _2855;
        float _4816 = isnan(0.0) ? _2888 : (isnan(_2888) ? 0.0 : max(_2888, 0.0));
        float _2890 = (isnan(1.0) ? _4816 : (isnan(_4816) ? 1.0 : min(_4816, 1.0))) * (_2864 / ((_2868 * _2868) * 3.141590118408203125));
        float _2891 = isnan(1.0) ? _2374 : (isnan(_2374) ? 1.0 : min(_2374, 1.0));
        _2816 = (((_2877 * cbLight._m0[_2826].x) * _2890) * _2891) + _2758;
        _2818 = (((_2877 * cbLight._m0[_2826].y) * _2890) * _2891) + _2759;
        _2820 = (((_2877 * cbLight._m0[_2826].z) * _2890) * _2891) + _2760;
    }
    float _2922;
    float _2924;
    float _2926;
    if (_2544)
    {
        _2922 = _2816;
        _2924 = _2818;
        _2926 = _2820;
    }
    else
    {
        uint _2933 = _2359 + 3u;
        uint _2937 = _2359 + 11u;
        float _2951 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2933].w)) * _916) * 0.949999988079071044921875);
        float _2952 = _2951 * _2951;
        float _2953 = cbLight._m0[_2933].x + _992;
        float _2954 = cbLight._m0[_2933].y + _993;
        float _2955 = cbLight._m0[_2933].z + _994;
        float _2959 = inversesqrt(dot(vec3(_2953, _2954, _2955), vec3(_2953, _2954, _2955)));
        float _2960 = _2959 * _2953;
        float _2961 = _2959 * _2954;
        float _2962 = _2959 * _2955;
        float _2963 = dot(vec3(_913, _914, _915), vec3(cbLight._m0[_2933].xyz));
        float _4832 = isnan(0.0) ? _2963 : (isnan(_2963) ? 0.0 : max(_2963, 0.0));
        float _2966 = isnan(1.0) ? _4832 : (isnan(_4832) ? 1.0 : min(_4832, 1.0));
        float _2967 = dot(vec3(_913, _914, _915), vec3(_2960, _2961, _2962));
        float _4843 = isnan(0.0) ? _2967 : (isnan(_2967) ? 0.0 : max(_2967, 0.0));
        float _2970 = isnan(1.0) ? _4843 : (isnan(_4843) ? 1.0 : min(_4843, 1.0));
        float _2971 = dot(vec3(cbLight._m0[_2933].xyz), vec3(_2960, _2961, _2962));
        float _4854 = isnan(0.0) ? _2971 : (isnan(_2971) ? 0.0 : max(_2971, 0.0));
        float _2975 = _2952 * _2952;
        float _2979 = ((_2970 * _2970) * (_2975 + (-1.0))) + 1.0;
        float _2988 = (exp2(log2(1.0 - (isnan(1.0) ? _4854 : (isnan(_4854) ? 1.0 : min(_4854, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2989 = 1.0 - _2952;
        float _2999 = (0.5 / (((_2635 * ((_2966 * _2989) + _2952)) + 9.9999999392252902907785028219223e-09) + (((_2635 * _2989) + _2952) * _2966))) * _2966;
        float _4865 = isnan(0.0) ? _2999 : (isnan(_2999) ? 0.0 : max(_2999, 0.0));
        float _3001 = (isnan(1.0) ? _4865 : (isnan(_4865) ? 1.0 : min(_4865, 1.0))) * (_2975 / ((_2979 * _2979) * 3.141590118408203125));
        float _3002 = isnan(1.0) ? _2375 : (isnan(_2375) ? 1.0 : min(_2375, 1.0));
        _2922 = (((_2988 * cbLight._m0[_2937].x) * _3001) * _3002) + _2816;
        _2924 = (((_2988 * cbLight._m0[_2937].y) * _3001) * _3002) + _2818;
        _2926 = (((_2988 * cbLight._m0[_2937].z) * _3001) * _3002) + _2820;
    }
    float _3068;
    float _3070;
    float _3072;
    float _3074;
    float _3076;
    float _3078;
    if (_2357.y == 0u)
    {
        uvec4 _3023 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3024 = _3023.x;
        uint _3035 = uint((float(_3023.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1001) / _3024))) + floor(float(uint(cbSceneParam._m0[85u].x * _1000) / _3024)));
        float _3045 = (log2(_2135 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _3046 = isnan(0.0) ? _3045 : (isnan(_3045) ? 0.0 : max(_3045, 0.0));
        uint _3049 = uint(isnan(14.0) ? _3046 : (isnan(_3046) ? 14.0 : min(_3046, 14.0)));
        uvec4 _3054 = texelFetch(g_lightClusterGridBuffer, int(((_3049 << 2u) + (_3035 << 6u)) >> 2u));
        uint _3055 = _3054.x;
        uint _3056 = _3023.z;
        float _3135;
        float _3137;
        float _3139;
        float _3141;
        float _3143;
        float _3145;
        if (((((1u << ((_3056 >> 4u) & 15u)) + 4294967295u) & _3055) == 0u) || ((_3056 & 240u) == 0u))
        {
            _3135 = 0.0;
            _3137 = 0.0;
            _3139 = 0.0;
            _3141 = 0.0;
            _3143 = 0.0;
            _3145 = 0.0;
        }
        else
        {
            float _3136;
            float _3138;
            float _3140;
            float _3142;
            float _3144;
            float _3146;
            float _3280 = 0.0;
            float _3281 = 0.0;
            float _3282 = 0.0;
            float _3283 = 0.0;
            float _3284 = 0.0;
            float _3285 = 0.0;
            uint _3286 = 0u;
            uint _3295;
            bool _3296;
            for (;;)
            {
                _3295 = texelFetch(g_lightClassification, int((((_3049 << 5u) + (_3035 << 9u)) + (_3286 << 2u)) >> 2u)).x;
                _3296 = _3295 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3296)
                {
                    frontier_phi_66_pred = _3285;
                    frontier_phi_66_pred_1 = _3284;
                    frontier_phi_66_pred_2 = _3283;
                    frontier_phi_66_pred_3 = _3282;
                    frontier_phi_66_pred_4 = _3281;
                    frontier_phi_66_pred_5 = _3280;
                }
                else
                {
                    float _3404;
                    float _3405;
                    float _3406;
                    float _3407;
                    float _3408;
                    float _3409;
                    uint _3410;
                    _3404 = _3280;
                    _3405 = _3281;
                    _3406 = _3282;
                    _3407 = _3283;
                    _3408 = _3284;
                    _3409 = _3285;
                    _3410 = _3295;
                    float _3336;
                    float _3337;
                    float _3338;
                    float _3339;
                    float _3340;
                    float _3341;
                    for (;;)
                    {
                        uint _3414 = uint(findLSB(_3410)) + (_3286 << 5u);
                        uint _3411 = (_3410 + 4294967295u) & _3410;
                        uint _3416 = _3414 * 48u;
                        vec4 _3430 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3416)).x, texelFetch(g_PointLightRenderingBuffer, int(_3416 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3416 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3416 + 3u)).x));
                        uint _3436 = (_3414 * 48u) + 4u;
                        vec4 _3449 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3436)).x, texelFetch(g_PointLightRenderingBuffer, int(_3436 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3436 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3436 + 3u)).x));
                        uint _3455 = (_3414 * 48u) + 8u;
                        vec3 _3466 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3455)).x, texelFetch(g_PointLightRenderingBuffer, int(_3455 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3455 + 2u)).x));
                        float _3470 = _3430.x - _2133;
                        float _3471 = _3430.y - _2134;
                        float _3472 = _3430.z - _2135;
                        float _3473 = dot(vec3(_3470, _3471, _3472), vec3(_3470, _3471, _3472));
                        float _3476 = inversesqrt(_3473);
                        float _3477 = _3476 * _3470;
                        float _3478 = _3476 * _3471;
                        float _3479 = _3476 * _3472;
                        float _3480 = dot(vec3(_1019, _1022, _1025), vec3(_3477, _3478, _3479));
                        float _3485 = 1.0 - (_3473 * _3430.w);
                        float _4891 = isnan(0.0) ? _3485 : (isnan(_3485) ? 0.0 : max(_3485, 0.0));
                        float _3486 = isnan(1.0) ? _4891 : (isnan(_4891) ? 1.0 : min(_4891, 1.0));
                        float _3487 = sqrt(_3473) * _3449.w;
                        float _3490 = 1.39999997615814208984375 / (_3487 + 1.39999997615814208984375);
                        float _3491 = _3490 * _3490;
                        float _3494 = ((1.0 - _3491) * _3480) + _3491;
                        float _3497 = _3487 * _3487;
                        float _3501 = ((isnan(0.0) ? _3494 : (isnan(_3494) ? 0.0 : max(_3494, 0.0))) * _3486) / ((_3497 * 0.699999988079071044921875) + 1.0);
                        float _3505 = (-0.0) - _2133;
                        float _3506 = (-0.0) - _2134;
                        float _3507 = (-0.0) - _2135;
                        float _3511 = inversesqrt(dot(vec3(_3505, _3506, _3507), vec3(_3505, _3506, _3507)));
                        float _3512 = _3511 * _3505;
                        float _3513 = _3511 * _3506;
                        float _3514 = _3511 * _3507;
                        float _3521 = exp2(log2(1.0 / ((_3497 * 3.5) + 5.0)) * 0.25);
                        float _3522 = 1.0 - _1079;
                        float _3529 = sqrt(1.0 - ((1.0 - (_3522 * _3522)) * (1.0 - (_3521 * _3521))));
                        float _3530 = _3529 * _3529;
                        float _3531 = _3530 * _3530;
                        float _3532 = _3512 + _3477;
                        float _3533 = _3513 + _3478;
                        float _3534 = _3514 + _3479;
                        float _3538 = inversesqrt(dot(vec3(_3532, _3533, _3534), vec3(_3532, _3533, _3534)));
                        float _3542 = dot(vec3(_1019, _1022, _1025), vec3(_3512, _3513, _3514));
                        float _4907 = isnan(0.0) ? _3542 : (isnan(_3542) ? 0.0 : max(_3542, 0.0));
                        float _3545 = isnan(1.0) ? _4907 : (isnan(_4907) ? 1.0 : min(_4907, 1.0));
                        float _3546 = dot(vec3(_1019, _1022, _1025), vec3(_3538 * _3532, _3538 * _3533, _3538 * _3534));
                        float _4918 = isnan(0.0) ? _3546 : (isnan(_3546) ? 0.0 : max(_3546, 0.0));
                        float _3549 = isnan(1.0) ? _4918 : (isnan(_4918) ? 1.0 : min(_4918, 1.0));
                        float _3553 = ((_3549 * _3549) * (_3531 + (-1.0))) + 1.0;
                        float _3554 = _3490 * _3530;
                        float _3555 = _3554 * _3554;
                        float _3558 = ((1.0 - _3555) * _3480) + _3555;
                        float _4929 = isnan(0.0) ? _3558 : (isnan(_3558) ? 0.0 : max(_3558, 0.0));
                        float _3559 = isnan(1.0) ? _4929 : (isnan(_4929) ? 1.0 : min(_4929, 1.0));
                        float _3560 = 1.0 - _3530;
                        float _3570 = (0.5 / (((_3559 * ((_3545 * _3560) + _3530)) + 9.9999999392252902907785028219223e-09) + (((_3559 * _3560) + _3530) * _3545))) * _3559;
                        float _4940 = isnan(0.0) ? _3570 : (isnan(_3570) ? 0.0 : max(_3570, 0.0));
                        float _3581 = (((_3531 * 3.1415927410125732421875) * (isnan(1.0) ? _4940 : (isnan(_4940) ? 1.0 : min(_4940, 1.0)))) / ((_3553 * _3553) * ((_3497 * 2.1991131305694580078125) + 3.141590118408203125))) * _3486;
                        _3339 = (_3501 * _3449.x) + _3407;
                        _3340 = (_3501 * _3449.y) + _3408;
                        _3341 = (_3501 * _3449.z) + _3409;
                        _3336 = (_3581 * _3466.x) + _3404;
                        _3337 = (_3581 * _3466.y) + _3405;
                        _3338 = (_3581 * _3466.z) + _3406;
                        if (_3411 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3404 = _3336;
                            _3405 = _3337;
                            _3406 = _3338;
                            _3407 = _3339;
                            _3408 = _3340;
                            _3409 = _3341;
                            _3410 = _3411;
                        }
                    }
                    frontier_phi_66_pred = _3341;
                    frontier_phi_66_pred_1 = _3340;
                    frontier_phi_66_pred_2 = _3339;
                    frontier_phi_66_pred_3 = _3338;
                    frontier_phi_66_pred_4 = _3337;
                    frontier_phi_66_pred_5 = _3336;
                }
                _3146 = frontier_phi_66_pred;
                _3144 = frontier_phi_66_pred_1;
                _3142 = frontier_phi_66_pred_2;
                _3140 = frontier_phi_66_pred_3;
                _3138 = frontier_phi_66_pred_4;
                _3136 = frontier_phi_66_pred_5;
                uint _3287 = _3286 + 1u;
                if (_3287 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3280 = _3136;
                    _3281 = _3138;
                    _3282 = _3140;
                    _3283 = _3142;
                    _3284 = _3144;
                    _3285 = _3146;
                    _3286 = _3287;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3135 = _3136;
            _3137 = _3138;
            _3139 = _3140;
            _3141 = _3142;
            _3143 = _3144;
            _3145 = _3146;
        }
        uvec4 _3149 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3150 = _3149.z;
        uint _3152 = (_3150 >> 8u) & 15u;
        float _3248;
        float _3250;
        float _3252;
        float _3254;
        float _3256;
        float _3258;
        if (((4294967295u << _3152) & _3055) == 0u)
        {
            _3248 = _3135;
            _3250 = _3137;
            _3252 = _3139;
            _3254 = _3141;
            _3256 = _3143;
            _3258 = _3145;
        }
        else
        {
            float _3273 = inversesqrt(dot(vec3(_2133, _2134, _2135), vec3(_2133, _2134, _2135)));
            float _3274 = _3273 * _2133;
            float _3275 = _3273 * _2134;
            float _3276 = _3273 * _2135;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_3152 < ((_3150 >> 12u) & 15u))
            {
                float _3249;
                float _3251;
                float _3253;
                float _3255;
                float _3257;
                float _3259;
                float _3387 = _3135;
                float _3388 = _3137;
                float _3389 = _3139;
                float _3390 = _3141;
                float _3391 = _3143;
                float _3392 = _3145;
                uint _3393 = _3152;
                uint _3402;
                bool _3403;
                for (;;)
                {
                    _3402 = texelFetch(g_lightClassification, int((((_3049 << 5u) + (_3035 << 9u)) + (_3393 << 2u)) >> 2u)).x;
                    _3403 = _3402 == 0u;
                    float frontier_phi_72_pred;
                    float frontier_phi_72_pred_1;
                    float frontier_phi_72_pred_2;
                    float frontier_phi_72_pred_3;
                    float frontier_phi_72_pred_4;
                    float frontier_phi_72_pred_5;
                    if (_3403)
                    {
                        frontier_phi_72_pred = _3392;
                        frontier_phi_72_pred_1 = _3391;
                        frontier_phi_72_pred_2 = _3390;
                        frontier_phi_72_pred_3 = _3389;
                        frontier_phi_72_pred_4 = _3388;
                        frontier_phi_72_pred_5 = _3387;
                    }
                    else
                    {
                        float _3586;
                        float _3587;
                        float _3588;
                        float _3589;
                        float _3590;
                        float _3591;
                        float _3879;
                        float _3880;
                        float _3881;
                        float _3882;
                        float _3883;
                        float _3884;
                        float _3599 = _3387;
                        float _3600 = _3388;
                        float _3601 = _3389;
                        float _3602 = _3390;
                        float _3603 = _3391;
                        float _3604 = _3392;
                        uint _3605 = _3402;
                        uint _3606;
                        vec4 _3631;
                        float _3632;
                        vec4 _3647;
                        vec3 _3659;
                        vec4 _3674;
                        vec4 _3689;
                        float _3735;
                        bool _3736;
                        for (;;)
                        {
                            uint _3616 = ((_3393 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3605));
                            _3606 = (_3605 + 4294967295u) & _3605;
                            uint _3618 = _3616 * 40u;
                            _3631 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3618)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3618 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3618 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3618 + 3u)).x));
                            _3632 = _3631.w;
                            uint _3634 = (_3616 * 40u) + 4u;
                            _3647 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3634)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3634 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3634 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3634 + 3u)).x));
                            uint _3649 = (_3616 * 40u) + 8u;
                            _3659 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3649)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3649 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3649 + 2u)).x));
                            uint _3661 = (_3616 * 40u) + 16u;
                            _3674 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3661)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3661 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3661 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3661 + 3u)).x));
                            uint _3676 = (_3616 * 40u) + 20u;
                            _3689 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3676)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3676 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3676 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3676 + 3u)).x));
                            uint _3691 = (_3616 * 40u) + 24u;
                            vec4 _3704 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3691)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3691 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3691 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3691 + 3u)).x));
                            uint _3710 = (_3616 * 40u) + 28u;
                            vec4 _3723 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3710)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3710 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3710 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3710 + 3u)).x));
                            _3735 = fma(_2135, _3723.z, fma(_2134, _3723.y, _3723.x * _2133)) + _3723.w;
                            _3736 = !((fma(_2135, _3704.z, fma(_2134, _3704.y, _3704.x * _2133)) + _3704.w) <= 0.0);
                            float frontier_phi_78_pred;
                            float frontier_phi_78_pred_1;
                            float frontier_phi_78_pred_2;
                            float frontier_phi_78_pred_3;
                            float frontier_phi_78_pred_4;
                            float frontier_phi_78_pred_5;
                            if (_3736)
                            {
                                float _3763 = _3631.x - _2133;
                                float _3764 = _3631.y - _2134;
                                float _3765 = _3631.z - _2135;
                                float _3766 = dot(vec3(_3763, _3764, _3765), vec3(_3763, _3764, _3765));
                                float _3769 = inversesqrt(_3766);
                                float _3770 = _3769 * _3763;
                                float _3771 = _3769 * _3764;
                                float _3772 = _3769 * _3765;
                                float _3776 = 1.0 - (_3766 / (_3632 * _3632));
                                float _4951 = isnan(0.0) ? _3776 : (isnan(_3776) ? 0.0 : max(_3776, 0.0));
                                float _3777 = isnan(1.0) ? _4951 : (isnan(_4951) ? 1.0 : min(_4951, 1.0));
                                float _3781 = sqrt(_3766) * _3647.w;
                                float _3783 = 1.39999997615814208984375 / (_3781 + 1.39999997615814208984375);
                                float _3784 = _3783 * _3783;
                                float _3787 = ((1.0 - _3784) * dot(vec3(_3770, _3771, _3772), vec3(_1019, _1022, _1025))) + _3784;
                                float _3790 = _3781 * _3781;
                                float _3794 = (fma(_2135, _3674.z, fma(_2134, _3674.y, _3674.x * _2133)) + _3674.w) / _3735;
                                float _3795 = (fma(_2135, _3689.z, fma(_2134, _3689.y, _3689.x * _2133)) + _3689.w) / _3735;
                                float _3799 = 1.0 - dot(vec2(_3794, _3795), vec2(_3794, _3795));
                                float _4967 = isnan(0.0) ? _3799 : (isnan(_3799) ? 0.0 : max(_3799, 0.0));
                                float _3800 = isnan(1.0) ? _4967 : (isnan(_4967) ? 1.0 : min(_4967, 1.0));
                                float _3801 = _3800 * (((isnan(0.0) ? _3787 : (isnan(_3787) ? 0.0 : max(_3787, 0.0))) * _3777) / ((_3790 * 0.699999988079071044921875) + 1.0));
                                float _3813 = exp2(log2(1.0 / ((_3790 * 3.5) + 5.0)) * 0.25);
                                float _3814 = 1.0 - _1079;
                                float _3821 = sqrt(1.0 - ((1.0 - (_3814 * _3814)) * (1.0 - (_3813 * _3813))));
                                float _3822 = _3821 * _3821;
                                float _3823 = _3822 * _3822;
                                float _3824 = _3770 - _3274;
                                float _3825 = _3771 - _3275;
                                float _3826 = _3772 - _3276;
                                float _3830 = inversesqrt(dot(vec3(_3824, _3825, _3826), vec3(_3824, _3825, _3826)));
                                float _3834 = dot(vec3(_1019, _1022, _1025), vec3((-0.0) - _3274, (-0.0) - _3275, (-0.0) - _3276));
                                float _4978 = isnan(0.0) ? _3834 : (isnan(_3834) ? 0.0 : max(_3834, 0.0));
                                float _3837 = isnan(1.0) ? _4978 : (isnan(_4978) ? 1.0 : min(_4978, 1.0));
                                float _3838 = dot(vec3(_1019, _1022, _1025), vec3(_3830 * _3824, _3830 * _3825, _3830 * _3826));
                                float _4989 = isnan(0.0) ? _3838 : (isnan(_3838) ? 0.0 : max(_3838, 0.0));
                                float _3841 = isnan(1.0) ? _4989 : (isnan(_4989) ? 1.0 : min(_4989, 1.0));
                                float _3845 = ((_3841 * _3841) * (_3823 + (-1.0))) + 1.0;
                                float _3846 = _3783 * _3822;
                                float _3847 = _3846 * _3846;
                                float _3853 = ((1.0 - _3847) * dot(vec3(_1019, _1022, _1025), vec3(_3770, _3771, _3772))) + _3847;
                                float _5000 = isnan(0.0) ? _3853 : (isnan(_3853) ? 0.0 : max(_3853, 0.0));
                                float _3854 = isnan(1.0) ? _5000 : (isnan(_5000) ? 1.0 : min(_5000, 1.0));
                                float _3855 = 1.0 - _3822;
                                float _3865 = (0.5 / (((_3854 * ((_3837 * _3855) + _3822)) + 9.9999999392252902907785028219223e-09) + (((_3854 * _3855) + _3822) * _3837))) * _3854;
                                float _5011 = isnan(0.0) ? _3865 : (isnan(_3865) ? 0.0 : max(_3865, 0.0));
                                float _3875 = (_3800 * _3777) * (((_3823 * 3.1415927410125732421875) * (isnan(1.0) ? _5011 : (isnan(_5011) ? 1.0 : min(_5011, 1.0)))) / ((_3845 * _3845) * ((_3790 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_78_pred = _3801 * _3647.y;
                                frontier_phi_78_pred_1 = _3801 * _3647.x;
                                frontier_phi_78_pred_2 = _3875 * _3659.z;
                                frontier_phi_78_pred_3 = _3875 * _3659.y;
                                frontier_phi_78_pred_4 = _3875 * _3659.x;
                                frontier_phi_78_pred_5 = _3801 * _3647.z;
                            }
                            else
                            {
                                frontier_phi_78_pred = 0.0;
                                frontier_phi_78_pred_1 = 0.0;
                                frontier_phi_78_pred_2 = 0.0;
                                frontier_phi_78_pred_3 = 0.0;
                                frontier_phi_78_pred_4 = 0.0;
                                frontier_phi_78_pred_5 = 0.0;
                            }
                            _3883 = frontier_phi_78_pred;
                            _3882 = frontier_phi_78_pred_1;
                            _3881 = frontier_phi_78_pred_2;
                            _3880 = frontier_phi_78_pred_3;
                            _3879 = frontier_phi_78_pred_4;
                            _3884 = frontier_phi_78_pred_5;
                            _3589 = _3882 + _3602;
                            _3590 = _3883 + _3603;
                            _3591 = _3884 + _3604;
                            _3586 = _3879 + _3599;
                            _3587 = _3880 + _3600;
                            _3588 = _3881 + _3601;
                            if (_3606 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3599 = _3586;
                                _3600 = _3587;
                                _3601 = _3588;
                                _3602 = _3589;
                                _3603 = _3590;
                                _3604 = _3591;
                                _3605 = _3606;
                                continue;
                            }
                        }
                        frontier_phi_72_pred = _3591;
                        frontier_phi_72_pred_1 = _3590;
                        frontier_phi_72_pred_2 = _3589;
                        frontier_phi_72_pred_3 = _3588;
                        frontier_phi_72_pred_4 = _3587;
                        frontier_phi_72_pred_5 = _3586;
                    }
                    _3259 = frontier_phi_72_pred;
                    _3257 = frontier_phi_72_pred_1;
                    _3255 = frontier_phi_72_pred_2;
                    _3253 = frontier_phi_72_pred_3;
                    _3251 = frontier_phi_72_pred_4;
                    _3249 = frontier_phi_72_pred_5;
                    uint _3394 = _3393 + 1u;
                    if (_3394 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3387 = _3249;
                        _3388 = _3251;
                        _3389 = _3253;
                        _3390 = _3255;
                        _3391 = _3257;
                        _3392 = _3259;
                        _3393 = _3394;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _3259;
                frontier_phi_60_61_ladder_1 = _3257;
                frontier_phi_60_61_ladder_2 = _3253;
                frontier_phi_60_61_ladder_3 = _3251;
                frontier_phi_60_61_ladder_4 = _3249;
                frontier_phi_60_61_ladder_5 = _3255;
            }
            else
            {
                frontier_phi_60_61_ladder = _3145;
                frontier_phi_60_61_ladder_1 = _3143;
                frontier_phi_60_61_ladder_2 = _3139;
                frontier_phi_60_61_ladder_3 = _3137;
                frontier_phi_60_61_ladder_4 = _3135;
                frontier_phi_60_61_ladder_5 = _3141;
            }
            _3248 = frontier_phi_60_61_ladder_4;
            _3250 = frontier_phi_60_61_ladder_3;
            _3252 = frontier_phi_60_61_ladder_2;
            _3254 = frontier_phi_60_61_ladder_5;
            _3256 = frontier_phi_60_61_ladder_1;
            _3258 = frontier_phi_60_61_ladder;
        }
        float _3263 = isnan(1.0) ? _1063 : (isnan(_1063) ? 1.0 : min(_1063, 1.0));
        _3068 = (_3263 * _3254) + _2599;
        _3070 = (_3263 * _3256) + _2601;
        _3072 = (_3263 * _3258) + _2603;
        _3074 = ((_3248 * 0.039999999105930328369140625) * _3263) + _2922;
        _3076 = ((_3250 * 0.039999999105930328369140625) * _3263) + _2924;
        _3078 = ((_3252 * 0.039999999105930328369140625) * _3263) + _2926;
    }
    else
    {
        _3068 = _2599;
        _3070 = _2601;
        _3072 = _2603;
        _3074 = _2922;
        _3076 = _2924;
        _3078 = _2926;
    }
    float _5027 = isnan(0.0) ? _1048 : (isnan(_1048) ? 0.0 : max(_1048, 0.0));
    float _5038 = isnan(0.0) ? _1049 : (isnan(_1049) ? 0.0 : max(_1049, 0.0));
    float _5049 = isnan(0.0) ? _1050 : (isnan(_1050) ? 0.0 : max(_1050, 0.0));
    uint _3098 = _285 + 6u;
    float _3106 = _1000 / cbSceneParam._m0[86u].x;
    float _3107 = _1001 / cbSceneParam._m0[86u].y;
    vec4 _3121 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3106, _3107, (log2((isnan(cbSceneParam._m0[77u].w) ? _934 : (isnan(_934) ? cbSceneParam._m0[77u].w : min(_934, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3123 = _3121.x;
    float _3124 = _3121.y;
    float _3125 = _3121.z;
    float _3126 = _3121.w;
    float _3198;
    float _3200;
    float _3202;
    float _3204;
    if (_934 > cbSceneParam._m0[78u].w)
    {
        float _3160 = isnan(_934) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _934 : min(cbSceneParam._m0[80u].w, _934));
        float _3161 = _3160 / _934;
        float _3172 = _3161 * _985;
        float _3173 = _986 * _3161;
        float _3174 = (-0.0) - _3173;
        float _3176 = _3161 * _987;
        float _3178 = (cbSceneParam._m0[77u].w * _3174) / _3160;
        float _3179 = _3178 + cbSceneParam._m0[79u].w;
        float _3180 = cbSceneParam._m0[79u].w - _3173;
        float _3186 = sqrt(((_3172 * _3172) + (_3173 * _3173)) + (_3176 * _3176));
        float _3189 = (1.0 - (cbSceneParam._m0[77u].w / _3160)) * _3186;
        float _3194 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3196 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3349;
        if (abs((_3174 - _3178) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3349 = ((((_3179 > 0.0) ? exp2(_3194 * _3179) : (2.0 - exp2(_3196 * _3179))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3189;
        }
        else
        {
            float _3309 = 1.0 / cbSceneParam._m0[80u].x;
            float _3310 = isnan(_3180) ? _3179 : (isnan(_3179) ? _3180 : max(_3179, _3180));
            float _3311 = isnan(_3180) ? _3179 : (isnan(_3179) ? _3180 : min(_3179, _3180));
            float _3320 = isnan(0.0) ? _3310 : (isnan(_3310) ? 0.0 : min(_3310, 0.0));
            float _3321 = isnan(0.0) ? _3311 : (isnan(_3311) ? 0.0 : min(_3311, 0.0));
            _3349 = ((abs(_3186 / _3174) * cbSceneParam._m0[80u].y) * ((((_3320 - _3321) * 2.0) - ((exp2(_3194 * (isnan(0.0) ? _3310 : (isnan(_3310) ? 0.0 : max(_3310, 0.0)))) - exp2(_3194 * (isnan(0.0) ? _3311 : (isnan(_3311) ? 0.0 : max(_3311, 0.0))))) * _3309)) - ((exp2(_3196 * _3320) - exp2(_3196 * _3321)) * _3309))) + (_3189 * cbSceneParam._m0[80u].z);
        }
        vec4 _3351 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3106, _3107, 1.0), 0.0);
        float _3360 = exp2((_3349 * (-1.44269502162933349609375)) * (1.0 - _3351.w));
        float _3361 = log2(_3360);
        float _3377 = log2(_3126);
        _3198 = (exp2(_3377 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3361 * cbSceneParam._m0[78u].x)) * _3351.x) / cbSceneParam._m0[78u].x)) + _3123;
        _3200 = (exp2(_3377 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3361 * cbSceneParam._m0[78u].y)) * _3351.y) / cbSceneParam._m0[78u].y)) + _3124;
        _3202 = (exp2(_3377 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3361 * cbSceneParam._m0[78u].z)) * _3351.z) / cbSceneParam._m0[78u].z)) + _3125;
        _3204 = _3360 * _3126;
    }
    else
    {
        _3198 = _3123;
        _3200 = _3124;
        _3202 = _3125;
        _3204 = _3126;
    }
    float _3216 = roundEven(cbMatDynParam._m0[0u].y);
    bool _3217 = _3216 == 3.0;
    float _3218 = log2(_3204);
    float _3225 = exp2(_3218 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _5027 : (isnan(_5027) ? 1.0 : min(_5027, 1.0))) * (_3068 + ((isnan(0.0) ? _1787 : (isnan(_1787) ? 0.0 : max(_1787, 0.0))) * _1063))) + ((_3074 + ((isnan(0.0) ? _2080 : (isnan(_2080) ? 0.0 : max(_2080, 0.0))) * _1866)) * cbPerFrame._m0[3u].x));
    float _3226 = exp2(_3218 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _5038 : (isnan(_5038) ? 1.0 : min(_5038, 1.0))) * (_3070 + ((isnan(0.0) ? _1790 : (isnan(_1790) ? 0.0 : max(_1790, 0.0))) * _1063))) + ((_3076 + ((isnan(0.0) ? _2083 : (isnan(_2083) ? 0.0 : max(_2083, 0.0))) * _1866)) * cbPerFrame._m0[3u].x));
    float _3227 = exp2(_3218 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _5049 : (isnan(_5049) ? 1.0 : min(_5049, 1.0))) * (_3072 + ((isnan(0.0) ? _1793 : (isnan(_1793) ? 0.0 : max(_1793, 0.0))) * _1063))) + ((_3078 + ((isnan(0.0) ? _2086 : (isnan(_2086) ? 0.0 : max(_2086, 0.0))) * _1866)) * cbPerFrame._m0[3u].x));
    float _3236 = (_3216 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _3236 * (_3217 ? _3225 : (_3225 + (cbSceneParam._m0[72u].w * _3198)));
    SV_Target.y = _3236 * (_3217 ? _3226 : (_3226 + (cbSceneParam._m0[72u].w * _3200)));
    SV_Target.z = _3236 * (_3217 ? _3227 : (_3227 + (cbSceneParam._m0[72u].w * _3202)));
    SV_Target.w = cbInstanceData._m0[_3098].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_3098].w;
}


