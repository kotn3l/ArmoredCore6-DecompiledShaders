#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 14) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_29;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_10;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_6;
layout(set = 0, binding = 23) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_8;
layout(set = 0, binding = 24) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_9;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1502;
float _3858;
float _3859;
float _3860;
float _3861;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _235 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _236 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _237 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _243 = inversesqrt(dot(vec3(_235, _236, _237), vec3(_235, _236, _237)));
    float _250 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _257 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _263 = uint(roundEven(NORMAL.w)) * 13u;
    uint _268 = _263 + 1u;
    uint _272 = _263 + 2u;
    float _281 = sqrt(((cbInstanceData._m0[_268].x * cbInstanceData._m0[_268].x) + (cbInstanceData._m0[_263].x * cbInstanceData._m0[_263].x)) + (cbInstanceData._m0[_272].x * cbInstanceData._m0[_272].x));
    float _282 = _281 * TEXCOORD.z;
    float _283 = _281 * TEXCOORD.w;
    vec4 _303 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _309 = _303.x * cbMtdParam._m0[11u].x;
    float _310 = _303.y * cbMtdParam._m0[11u].y;
    float _311 = _303.z * cbMtdParam._m0[11u].z;
    vec4 _330 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _282) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _283) + cbTextureTilingScale._m0[5u].w));
    vec4 _349 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _389 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _391 = _389.x;
    float _403 = dot(vec4(_391, _389.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _420 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _349.x) * 2.0) - ((((_391 - _403) * cbMtdParam._m0[24u].z) + _403) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3870 = isnan(0.0) ? _420 : (isnan(_420) ? 0.0 : max(_420, 0.0));
    float _421 = isnan(1.0) ? _3870 : (isnan(_3870) ? 1.0 : min(_3870, 1.0));
    float _428 = (_421 * ((_330.x * cbMtdParam._m0[12u].x) - _309)) + _309;
    float _429 = (_421 * ((_330.y * cbMtdParam._m0[12u].y) - _310)) + _310;
    float _430 = (_421 * ((_330.z * cbMtdParam._m0[12u].z) - _311)) + _311;
    vec4 _447 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _282) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _283) + cbTextureTilingScale._m0[3u].w));
    vec4 _467 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _469 = _467.x;
    float _479 = dot(vec4(_469, _467.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _493 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _349.y) * 2.0) - ((((_469 - _479) * cbMtdParam._m0[24u].z) + _479) * cbMtdParam._m0[20u].w))) + 1.0;
    float _3881 = isnan(0.0) ? _493 : (isnan(_493) ? 0.0 : max(_493, 0.0));
    float _494 = isnan(1.0) ? _3881 : (isnan(_3881) ? 1.0 : min(_3881, 1.0));
    float _501 = (_494 * ((_447.x * cbMtdParam._m0[13u].x) - _428)) + _428;
    float _502 = (_494 * ((_447.y * cbMtdParam._m0[13u].y) - _429)) + _429;
    float _503 = (_494 * ((_447.z * cbMtdParam._m0[13u].z) - _430)) + _430;
    vec4 _521 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_9, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[24u].x * _282) + cbTextureTilingScale._m0[24u].z, (cbTextureTilingScale._m0[24u].y * _283) + cbTextureTilingScale._m0[24u].w));
    vec4 _538 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[25u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _540 = _538.x;
    float _550 = dot(vec4(_540, _538.yzw), vec4(cbMtdParam._m0[30u].w, cbMtdParam._m0[31u].xy, 0.0));
    float _562 = ((cbMtdParam._m0[25u].x * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.z) - _349.z) * 2.0) - ((((_540 - _550) * cbMtdParam._m0[24u].z) + _550) * cbMtdParam._m0[20u].z))) + 1.0;
    float _3892 = isnan(0.0) ? _562 : (isnan(_562) ? 0.0 : max(_562, 0.0));
    float _563 = isnan(1.0) ? _3892 : (isnan(_3892) ? 1.0 : min(_3892, 1.0));
    float _570 = (_563 * ((_521.x * cbMtdParam._m0[14u].x) - _501)) + _501;
    float _571 = (_563 * ((_521.y * cbMtdParam._m0[14u].y) - _502)) + _502;
    float _572 = (_563 * ((_521.z * cbMtdParam._m0[14u].z) - _503)) + _503;
    vec4 _590 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _282) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _283) + cbTextureTilingScale._m0[14u].w));
    vec4 _610 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _282) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _283) + cbTextureTilingScale._m0[4u].w));
    vec4 _627 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _629 = _627.x;
    float _630 = _627.y;
    float _631 = _627.z;
    float _638 = ((_610.x - _629) * _421) + _629;
    float _639 = ((_610.y - _630) * _421) + _630;
    float _640 = ((_610.z - _631) * _421) + _631;
    vec4 _652 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _282) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _283) + cbTextureTilingScale._m0[2u].w));
    float _663 = ((_652.x - _638) * _494) + _638;
    float _664 = ((_652.y - _639) * _494) + _639;
    float _665 = ((_652.z - _640) * _494) + _640;
    vec4 _677 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[23u].x * _282) + cbTextureTilingScale._m0[23u].z, (cbTextureTilingScale._m0[23u].y * _283) + cbTextureTilingScale._m0[23u].w));
    float _690 = ((_677.z - _665) * _563) + _665;
    float _693 = ((((_677.x - _663) * _563) + _663) * 2.0) + (-1.0);
    float _695 = ((((_677.y - _664) * _563) + _664) * 2.0) + (-1.0);
    float _696 = dot(vec2(_693, _695), vec2(_693, _695));
    float _3903 = isnan(0.0) ? _696 : (isnan(_696) ? 0.0 : max(_696, 0.0));
    float _701 = sqrt(1.0 - (isnan(1.0) ? _3903 : (isnan(_3903) ? 1.0 : min(_3903, 1.0))));
    vec4 _715 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _740 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _282) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _283) + cbTextureTilingScale._m0[11u].w));
    float _742 = _740.x;
    float _743 = 1.0 - _742;
    float _749 = isnan(-1.0) ? cbMtdParam._m0[24u].x : (isnan(cbMtdParam._m0[24u].x) ? (-1.0) : max(cbMtdParam._m0[24u].x, -1.0));
    float _752 = ((isnan(0.0) ? _749 : (isnan(_749) ? 0.0 : min(_749, 0.0))) * TEXCOORD_8.x) + TEXCOORD_8.w;
    float _761 = (_752 - ((((((_742 - _743) * cbMtdParam._m0[24u].w) + _743) + 0.00999999977648258209228515625) * cbMtdParam._m0[21u].z) * (1.0 - _752))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3924 = isnan(0.0) ? _761 : (isnan(_761) ? 0.0 : max(_761, 0.0));
    float _762 = isnan(1.0) ? _3924 : (isnan(_3924) ? 1.0 : min(_3924, 1.0));
    float _769 = (_762 * ((_590.x * cbMtdParam._m0[18u].x) - _570)) + _570;
    float _770 = (_762 * ((_590.y * cbMtdParam._m0[18u].y) - _571)) + _571;
    float _771 = (_762 * ((_590.z * cbMtdParam._m0[18u].z) - _572)) + _572;
    vec4 _783 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _282) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _283) + cbTextureTilingScale._m0[19u].w));
    float _785 = _783.x;
    float _786 = 1.0 - _785;
    float _813 = (TEXCOORD_8.x - ((cbMtdParam._m0[22u].w * (1.0 - TEXCOORD_8.x)) * ((((_785 - _786) * cbMtdParam._m0[24u].y) + _786) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3935 = isnan(0.0) ? _813 : (isnan(_813) ? 0.0 : max(_813, 0.0));
    float _814 = isnan(1.0) ? _3935 : (isnan(_3935) ? 1.0 : min(_3935, 1.0));
    float _822 = ((((cbMtdParam._m0[10u].x - _769) * TEXCOORD_8.x) * cbMtdParam._m0[23u].w) * _814) + _769;
    float _823 = ((((cbMtdParam._m0[10u].y - _770) * TEXCOORD_8.y) * cbMtdParam._m0[23u].w) * _814) + _770;
    float _824 = (((cbMtdParam._m0[23u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _771)) * _814) + _771;
    float _828 = (cbMtdParam._m0[19u].w * (_715.z - _690)) + _690;
    vec4 _842 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _282) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _283) + cbTextureTilingScale._m0[15u].w));
    float _849 = (_842.x * 2.0) + (-1.0);
    float _850 = (_842.y * 2.0) + (-1.0);
    float _851 = dot(vec2(_849, _850), vec2(_849, _850));
    float _3946 = isnan(0.0) ? _851 : (isnan(_851) ? 0.0 : max(_851, 0.0));
    float _859 = (_762 * (_842.z - _828)) + _828;
    float _862 = ((cbMtdParam._m0[23u].y - _859) * _814) + _859;
    vec4 _881 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _282) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _283) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _887 = (_881.x * 2.0) + (-1.0);
    float _888 = (_881.y * 2.0) + (-1.0);
    float _889 = dot(vec2(_887, _888), vec2(_887, _888));
    float _3957 = isnan(0.0) ? _889 : (isnan(_889) ? 0.0 : max(_889, 0.0));
    float _897 = (((_715.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _693;
    float _898 = (((_715.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _695;
    float _910 = (((_849 - _897) + (cbMtdParam._m0[21u].x * _897)) * _762) + _897;
    float _911 = (((_850 - _898) + (cbMtdParam._m0[21u].x * _898)) * _762) + _898;
    float _912 = (_762 * (sqrt(1.0 - (isnan(1.0) ? _3946 : (isnan(_3946) ? 1.0 : min(_3946, 1.0)))) - _701)) + _701;
    float _923 = (((_887 - _910) + (_910 * cbMtdParam._m0[22u].z)) * _814) + _910;
    float _924 = (((_888 - _911) + (_911 * cbMtdParam._m0[22u].z)) * _814) + _911;
    float _925 = ((sqrt(1.0 - (isnan(1.0) ? _3957 : (isnan(_3957) ? 1.0 : min(_3957, 1.0)))) - _912) * _814) + _912;
    float _927 = cbMtdParam._m0[22u].x + _715.w;
    float _930 = fma(_925, _250 * NORMAL.x, fma(_924, _257 * TANGENT.x, (_243 * _235) * _923));
    float _933 = fma(_925, _250 * NORMAL.y, fma(_924, _257 * TANGENT.y, (_243 * _236) * _923));
    float _936 = fma(_925, _250 * NORMAL.z, fma(_924, _257 * TANGENT.z, (_243 * _237) * _923));
    float _940 = inversesqrt(dot(vec3(_930, _933, _936), vec3(_930, _933, _936)));
    float _941 = _940 * _930;
    float _942 = _940 * _933;
    float _943 = _940 * _936;
    float _3968 = isnan(0.0) ? _862 : (isnan(_862) ? 0.0 : max(_862, 0.0));
    float _944 = isnan(1.0) ? _3968 : (isnan(_3968) ? 1.0 : min(_3968, 1.0));
    float _3979 = isnan(0.0) ? _927 : (isnan(_927) ? 0.0 : max(_927, 0.0));
    float _3990 = isnan(0.0) ? _822 : (isnan(_822) ? 0.0 : max(_822, 0.0));
    float _4001 = isnan(0.0) ? _823 : (isnan(_823) ? 0.0 : max(_823, 0.0));
    float _4012 = isnan(0.0) ? _824 : (isnan(_824) ? 0.0 : max(_824, 0.0));
    float _962 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _1003 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _1013 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _1003);
    float _1014 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _1003);
    float _1015 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _1003);
    float _1019 = inversesqrt(dot(vec3(_1013, _1014, _1015), vec3(_1013, _1014, _1015)));
    float _1020 = _1013 * _1019;
    float _1021 = _1014 * _1019;
    float _1022 = _1015 * _1019;
    vec4 _1027 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _1029 = _1027.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1183 = sqrt(((_1013 * _1013) + (_1014 * _1014)) + (_1015 * _1015));
        float _1189 = (cbMatDynParam._m0[5u].x * _1183) + cbMatDynParam._m0[5u].y;
        float _4023 = isnan(0.0) ? _1189 : (isnan(_1189) ? 0.0 : max(_1189, 0.0));
        float _1190 = isnan(1.0) ? _4023 : (isnan(_4023) ? 1.0 : min(_4023, 1.0));
        float _1194 = (cbMatDynParam._m0[5u].z * _1183) + cbMatDynParam._m0[5u].w;
        float _4034 = isnan(0.0) ? _1194 : (isnan(_1194) ? 0.0 : max(_1194, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4034 : (isnan(_4034) ? 1.0 : min(_4034, 1.0))) - _1190)) + _1190) < ((_1029 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _1040 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1041 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1059 = fma(_943, cbSceneParam._m0[5u].z, fma(_942, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _941));
    float _1062 = fma(_943, cbSceneParam._m0[6u].z, fma(_942, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _941));
    float _1065 = fma(_943, cbSceneParam._m0[7u].z, fma(_942, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _941));
    uint _1078 = _263 + 9u;
    uint _1079 = _1078 + uint(cbMatDynParam._m0[0u].w);
    float _1085 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3990 : (isnan(_3990) ? 1.0 : min(_3990, 1.0)))) * cbInstanceData._m0[_1079].x;
    float _1086 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4001 : (isnan(_4001) ? 1.0 : min(_4001, 1.0)))) * cbInstanceData._m0[_1079].y;
    float _1087 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4012 : (isnan(_4012) ? 1.0 : min(_4012, 1.0)))) * cbInstanceData._m0[_1079].z;
    float _4045 = isnan(0.0) ? _1085 : (isnan(_1085) ? 0.0 : max(_1085, 0.0));
    float _1088 = isnan(1.0) ? _4045 : (isnan(_4045) ? 1.0 : min(_4045, 1.0));
    float _4056 = isnan(0.0) ? _1086 : (isnan(_1086) ? 0.0 : max(_1086, 0.0));
    float _1089 = isnan(1.0) ? _4056 : (isnan(_4056) ? 1.0 : min(_4056, 1.0));
    float _4067 = isnan(0.0) ? _1087 : (isnan(_1087) ? 0.0 : max(_1087, 0.0));
    float _1090 = isnan(1.0) ? _4067 : (isnan(_4067) ? 1.0 : min(_4067, 1.0));
    vec4 _1099 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1040, cbSceneParam._m0[86u].y * _1041));
    float _1103 = ((isnan(1.0) ? _3979 : (isnan(_3979) ? 1.0 : min(_3979, 1.0))) * TEXCOORD_5.w) * _1099.x;
    float _1104 = dot(vec3(_941, _942, _943), vec3(_1020, _1021, _1022));
    float _1107 = _1104 * 2.0;
    float _1111 = (_1107 * _941) - _1020;
    float _1112 = (_1107 * _942) - _1021;
    float _1113 = (_1107 * _943) - _1022;
    float _1117 = abs(dot(vec3(_1020, _1021, _1022), vec3(_941, _942, _943)));
    float _4078 = isnan(0.0) ? _1117 : (isnan(_1117) ? 0.0 : max(_1117, 0.0));
    float _1119 = sqrt(_944);
    float _1132 = exp2((_1119 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4078 : (isnan(_4078) ? 1.0 : min(_4078, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1119 * 3.0));
    float _1164 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1168 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1172 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1501;
    float _1503;
    float _1504;
    float _1505;
    float _1506;
    float _1507;
    float _1508;
    float _1509;
    float _1510;
    float _1511;
    float _1512;
    float _1513;
    float _1514;
    float _1515;
    float _1516;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1226 = fma(_1172, cbModelParam._m0[26u].z, fma(_1168, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1164));
        float _1230 = fma(_1172, cbModelParam._m0[27u].z, fma(_1168, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1164));
        float _1234 = fma(_1172, cbModelParam._m0[28u].z, fma(_1168, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1164));
        float _1259 = _1164 + _941;
        float _1260 = _1168 + _942;
        float _1261 = _1172 + _943;
        float _1271 = fma(_1261, cbModelParam._m0[26u].z, fma(_1260, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1259)) - _1226;
        float _1272 = fma(_1261, cbModelParam._m0[27u].z, fma(_1260, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1259)) - _1230;
        float _1273 = fma(_1261, cbModelParam._m0[28u].z, fma(_1260, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1259)) - _1234;
        float _1277 = inversesqrt(dot(vec3(_1271, _1272, _1273), vec3(_1271, _1272, _1273)));
        float _1290 = ((_1277 * _1271) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1226 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1291 = ((_1277 * _1272) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1230 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1292 = ((_1277 * _1273) / cbModelParam._m0[34u].z) + ((((((_1234 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1295 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1290, _1291, _1292), 0.0);
        vec4 _1302 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1290, _1291, _1292), 0.0);
        vec4 _1309 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1290, _1291, _1292), 0.0);
        vec4 _1316 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1290, _1291, _1292), 0.0);
        float _1329 = exp2((_1295.w + (-0.5)) * 20.0) * 2.0;
        float _1330 = _1329 * (_1295.x + (-0.5));
        float _1331 = _1329 * (_1295.y + (-0.5));
        float _1332 = _1329 * (_1295.z + (-0.5));
        float _1339 = exp2((_1302.w + (-0.5)) * 20.0) * 2.0;
        float _1340 = _1339 * (_1302.x + (-0.5));
        float _1341 = _1339 * (_1302.y + (-0.5));
        float _1342 = _1339 * (_1302.z + (-0.5));
        float _1349 = exp2((_1309.w + (-0.5)) * 20.0) * 2.0;
        float _1350 = _1349 * (_1309.x + (-0.5));
        float _1351 = _1349 * (_1309.y + (-0.5));
        float _1352 = _1349 * (_1309.z + (-0.5));
        float _1359 = exp2((_1316.w + (-0.5)) * 20.0) * 2.0;
        float _1360 = _1359 * (_1316.x + (-0.5));
        float _1361 = _1359 * (_1316.y + (-0.5));
        float _1362 = _1359 * (_1316.z + (-0.5));
        float _1363 = isnan(0.0) ? _1360 : (isnan(_1360) ? 0.0 : max(_1360, 0.0));
        float _1364 = isnan(0.0) ? _1361 : (isnan(_1361) ? 0.0 : max(_1361, 0.0));
        float _1365 = isnan(0.0) ? _1362 : (isnan(_1362) ? 0.0 : max(_1362, 0.0));
        float _1366 = _1330 * 0.5;
        float _1367 = _1340 * 0.5;
        float _1368 = _1350 * 0.5;
        float _1369 = dot(vec3(_1366, _1367, _1368), vec3(_1366, _1367, _1368));
        float _1374 = (_1369 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1369);
        float _1383 = (dot(vec3(_941, _942, _943), vec3(_1374 * _1366, _1374 * _1367, _1374 * _1368)) + 1.0) * 0.5;
        float _4104 = isnan(0.0) ? _1383 : (isnan(_1383) ? 0.0 : max(_1383, 0.0));
        float _1393 = sqrt(((_1367 * _1367) + (_1366 * _1366)) + (_1368 * _1368)) / (_1363 + 9.9999997473787516355514526367188e-06);
        float _4115 = isnan(0.0) ? _1393 : (isnan(_1393) ? 0.0 : max(_1393, 0.0));
        float _1394 = isnan(1.0) ? _4115 : (isnan(_4115) ? 1.0 : min(_4115, 1.0));
        float _1395 = _1394 * 2.0;
        float _1399 = (1.0 - _1394) / (_1394 + 1.0);
        float _4126 = isnan(0.0) ? _1399 : (isnan(_1399) ? 0.0 : max(_1399, 0.0));
        float _1400 = isnan(1.0) ? _4126 : (isnan(_4126) ? 1.0 : min(_4126, 1.0));
        float _1409 = ((((1.0 - _1400) * (_1395 + 2.0)) * exp2(log2(isnan(1.0) ? _4104 : (isnan(_4104) ? 1.0 : min(_4104, 1.0))) * (_1395 + 1.0))) + _1400) * _1363;
        float _1410 = _1331 * 0.5;
        float _1411 = _1341 * 0.5;
        float _1412 = _1351 * 0.5;
        float _1413 = dot(vec3(_1410, _1411, _1412), vec3(_1410, _1411, _1412));
        float _1418 = (_1413 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1413);
        float _1426 = (dot(vec3(_941, _942, _943), vec3(_1418 * _1410, _1418 * _1411, _1418 * _1412)) + 1.0) * 0.5;
        float _4137 = isnan(0.0) ? _1426 : (isnan(_1426) ? 0.0 : max(_1426, 0.0));
        float _1435 = sqrt(((_1411 * _1411) + (_1410 * _1410)) + (_1412 * _1412)) / (_1364 + 9.9999997473787516355514526367188e-06);
        float _4148 = isnan(0.0) ? _1435 : (isnan(_1435) ? 0.0 : max(_1435, 0.0));
        float _1436 = isnan(1.0) ? _4148 : (isnan(_4148) ? 1.0 : min(_4148, 1.0));
        float _1437 = _1436 * 2.0;
        float _1441 = (1.0 - _1436) / (_1436 + 1.0);
        float _4159 = isnan(0.0) ? _1441 : (isnan(_1441) ? 0.0 : max(_1441, 0.0));
        float _1442 = isnan(1.0) ? _4159 : (isnan(_4159) ? 1.0 : min(_4159, 1.0));
        float _1451 = ((((1.0 - _1442) * (_1437 + 2.0)) * exp2(log2(isnan(1.0) ? _4137 : (isnan(_4137) ? 1.0 : min(_4137, 1.0))) * (_1437 + 1.0))) + _1442) * _1364;
        float _1452 = _1332 * 0.5;
        float _1453 = _1342 * 0.5;
        float _1454 = _1352 * 0.5;
        float _1455 = dot(vec3(_1452, _1453, _1454), vec3(_1452, _1453, _1454));
        float _1460 = (_1455 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1455);
        float _1468 = (dot(vec3(_941, _942, _943), vec3(_1460 * _1452, _1460 * _1453, _1460 * _1454)) + 1.0) * 0.5;
        float _4170 = isnan(0.0) ? _1468 : (isnan(_1468) ? 0.0 : max(_1468, 0.0));
        float _1477 = sqrt(((_1453 * _1453) + (_1452 * _1452)) + (_1454 * _1454)) / (_1365 + 9.9999997473787516355514526367188e-06);
        float _4181 = isnan(0.0) ? _1477 : (isnan(_1477) ? 0.0 : max(_1477, 0.0));
        float _1478 = isnan(1.0) ? _4181 : (isnan(_4181) ? 1.0 : min(_4181, 1.0));
        float _1479 = _1478 * 2.0;
        float _1483 = (1.0 - _1478) / (_1478 + 1.0);
        float _4192 = isnan(0.0) ? _1483 : (isnan(_1483) ? 0.0 : max(_1483, 0.0));
        float _1484 = isnan(1.0) ? _4192 : (isnan(_4192) ? 1.0 : min(_4192, 1.0));
        float _1493 = ((((1.0 - _1484) * (_1479 + 2.0)) * exp2(log2(isnan(1.0) ? _4170 : (isnan(_4170) ? 1.0 : min(_4170, 1.0))) * (_1479 + 1.0))) + _1484) * _1365;
        _1501 = _1332;
        _1503 = _1331;
        _1504 = _1330;
        _1505 = _1342;
        _1506 = _1341;
        _1507 = _1340;
        _1508 = _1352;
        _1509 = _1351;
        _1510 = _1350;
        _1511 = _1365;
        _1512 = _1364;
        _1513 = _1363;
        _1514 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1409 : (isnan(_1409) ? 0.0 : max(_1409, 0.0)));
        _1515 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1451 : (isnan(_1451) ? 0.0 : max(_1451, 0.0)));
        _1516 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1493 : (isnan(_1493) ? 0.0 : max(_1493, 0.0)));
    }
    else
    {
        _1501 = _1502;
        _1503 = _1502;
        _1504 = _1502;
        _1505 = _1502;
        _1506 = _1502;
        _1507 = _1502;
        _1508 = _1502;
        _1509 = _1502;
        _1510 = _1502;
        _1511 = _1502;
        _1512 = _1502;
        _1513 = _1502;
        _1514 = 0.0;
        _1515 = 0.0;
        _1516 = 0.0;
    }
    float _1811;
    float _1812;
    float _1813;
    float _1814;
    float _1815;
    float _1816;
    float _1817;
    float _1818;
    float _1819;
    float _1820;
    float _1821;
    float _1822;
    float _1823;
    float _1824;
    float _1825;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1542 = fma(_1172, cbModelParam._m0[30u].z, fma(_1168, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1164));
        float _1546 = fma(_1172, cbModelParam._m0[31u].z, fma(_1168, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1164));
        float _1550 = fma(_1172, cbModelParam._m0[32u].z, fma(_1168, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1164));
        float _1573 = _1164 + _941;
        float _1574 = _1168 + _942;
        float _1575 = _1172 + _943;
        float _1585 = fma(_1575, cbModelParam._m0[30u].z, fma(_1574, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1573)) - _1542;
        float _1586 = fma(_1575, cbModelParam._m0[31u].z, fma(_1574, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1573)) - _1546;
        float _1587 = fma(_1575, cbModelParam._m0[32u].z, fma(_1574, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1573)) - _1550;
        float _1591 = inversesqrt(dot(vec3(_1585, _1586, _1587), vec3(_1585, _1586, _1587)));
        float _1604 = ((_1591 * _1585) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1542 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1605 = ((_1591 * _1586) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1546 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1606 = ((_1591 * _1587) / cbModelParam._m0[35u].z) + ((((((_1550 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1608 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1604, _1605, _1606), 0.0);
        vec4 _1615 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1604, _1605, _1606), 0.0);
        vec4 _1622 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1604, _1605, _1606), 0.0);
        vec4 _1629 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1604, _1605, _1606), 0.0);
        float _1641 = exp2((_1608.w + (-0.5)) * 20.0) * 2.0;
        float _1642 = _1641 * (_1608.x + (-0.5));
        float _1643 = _1641 * (_1608.y + (-0.5));
        float _1644 = _1641 * (_1608.z + (-0.5));
        float _1651 = exp2((_1615.w + (-0.5)) * 20.0) * 2.0;
        float _1652 = _1651 * (_1615.x + (-0.5));
        float _1653 = _1651 * (_1615.y + (-0.5));
        float _1654 = _1651 * (_1615.z + (-0.5));
        float _1661 = exp2((_1622.w + (-0.5)) * 20.0) * 2.0;
        float _1662 = _1661 * (_1622.x + (-0.5));
        float _1663 = _1661 * (_1622.y + (-0.5));
        float _1664 = _1661 * (_1622.z + (-0.5));
        float _1671 = exp2((_1629.w + (-0.5)) * 20.0) * 2.0;
        float _1672 = _1671 * (_1629.x + (-0.5));
        float _1673 = _1671 * (_1629.y + (-0.5));
        float _1674 = _1671 * (_1629.z + (-0.5));
        float _1675 = isnan(0.0) ? _1672 : (isnan(_1672) ? 0.0 : max(_1672, 0.0));
        float _1676 = isnan(0.0) ? _1673 : (isnan(_1673) ? 0.0 : max(_1673, 0.0));
        float _1677 = isnan(0.0) ? _1674 : (isnan(_1674) ? 0.0 : max(_1674, 0.0));
        float _1678 = _1642 * 0.5;
        float _1679 = _1652 * 0.5;
        float _1680 = _1662 * 0.5;
        float _1681 = dot(vec3(_1678, _1679, _1680), vec3(_1678, _1679, _1680));
        float _1686 = (_1681 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1681);
        float _1694 = (dot(vec3(_941, _942, _943), vec3(_1686 * _1678, _1686 * _1679, _1686 * _1680)) + 1.0) * 0.5;
        float _4233 = isnan(0.0) ? _1694 : (isnan(_1694) ? 0.0 : max(_1694, 0.0));
        float _1703 = sqrt(((_1679 * _1679) + (_1678 * _1678)) + (_1680 * _1680)) / (_1675 + 9.9999997473787516355514526367188e-06);
        float _4244 = isnan(0.0) ? _1703 : (isnan(_1703) ? 0.0 : max(_1703, 0.0));
        float _1704 = isnan(1.0) ? _4244 : (isnan(_4244) ? 1.0 : min(_4244, 1.0));
        float _1705 = _1704 * 2.0;
        float _1709 = (1.0 - _1704) / (_1704 + 1.0);
        float _4255 = isnan(0.0) ? _1709 : (isnan(_1709) ? 0.0 : max(_1709, 0.0));
        float _1710 = isnan(1.0) ? _4255 : (isnan(_4255) ? 1.0 : min(_4255, 1.0));
        float _1719 = ((((1.0 - _1710) * (_1705 + 2.0)) * exp2(log2(isnan(1.0) ? _4233 : (isnan(_4233) ? 1.0 : min(_4233, 1.0))) * (_1705 + 1.0))) + _1710) * _1675;
        float _1720 = _1643 * 0.5;
        float _1721 = _1653 * 0.5;
        float _1722 = _1663 * 0.5;
        float _1723 = dot(vec3(_1720, _1721, _1722), vec3(_1720, _1721, _1722));
        float _1728 = (_1723 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1723);
        float _1736 = (dot(vec3(_941, _942, _943), vec3(_1728 * _1720, _1728 * _1721, _1728 * _1722)) + 1.0) * 0.5;
        float _4266 = isnan(0.0) ? _1736 : (isnan(_1736) ? 0.0 : max(_1736, 0.0));
        float _1745 = sqrt(((_1721 * _1721) + (_1720 * _1720)) + (_1722 * _1722)) / (_1676 + 9.9999997473787516355514526367188e-06);
        float _4277 = isnan(0.0) ? _1745 : (isnan(_1745) ? 0.0 : max(_1745, 0.0));
        float _1746 = isnan(1.0) ? _4277 : (isnan(_4277) ? 1.0 : min(_4277, 1.0));
        float _1747 = _1746 * 2.0;
        float _1751 = (1.0 - _1746) / (_1746 + 1.0);
        float _4288 = isnan(0.0) ? _1751 : (isnan(_1751) ? 0.0 : max(_1751, 0.0));
        float _1752 = isnan(1.0) ? _4288 : (isnan(_4288) ? 1.0 : min(_4288, 1.0));
        float _1761 = ((((1.0 - _1752) * (_1747 + 2.0)) * exp2(log2(isnan(1.0) ? _4266 : (isnan(_4266) ? 1.0 : min(_4266, 1.0))) * (_1747 + 1.0))) + _1752) * _1676;
        float _1762 = _1644 * 0.5;
        float _1763 = _1654 * 0.5;
        float _1764 = _1664 * 0.5;
        float _1765 = dot(vec3(_1762, _1763, _1764), vec3(_1762, _1763, _1764));
        float _1770 = (_1765 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1765);
        float _1778 = (dot(vec3(_941, _942, _943), vec3(_1770 * _1762, _1770 * _1763, _1770 * _1764)) + 1.0) * 0.5;
        float _4299 = isnan(0.0) ? _1778 : (isnan(_1778) ? 0.0 : max(_1778, 0.0));
        float _1787 = sqrt(((_1763 * _1763) + (_1762 * _1762)) + (_1764 * _1764)) / (_1677 + 9.9999997473787516355514526367188e-06);
        float _4310 = isnan(0.0) ? _1787 : (isnan(_1787) ? 0.0 : max(_1787, 0.0));
        float _1788 = isnan(1.0) ? _4310 : (isnan(_4310) ? 1.0 : min(_4310, 1.0));
        float _1789 = _1788 * 2.0;
        float _1793 = (1.0 - _1788) / (_1788 + 1.0);
        float _4321 = isnan(0.0) ? _1793 : (isnan(_1793) ? 0.0 : max(_1793, 0.0));
        float _1794 = isnan(1.0) ? _4321 : (isnan(_4321) ? 1.0 : min(_4321, 1.0));
        float _1803 = ((((1.0 - _1794) * (_1789 + 2.0)) * exp2(log2(isnan(1.0) ? _4299 : (isnan(_4299) ? 1.0 : min(_4299, 1.0))) * (_1789 + 1.0))) + _1794) * _1677;
        _1811 = _1644;
        _1812 = _1643;
        _1813 = _1642;
        _1814 = _1654;
        _1815 = _1653;
        _1816 = _1652;
        _1817 = _1664;
        _1818 = _1663;
        _1819 = _1662;
        _1820 = _1677;
        _1821 = _1676;
        _1822 = _1675;
        _1823 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1719 : (isnan(_1719) ? 0.0 : max(_1719, 0.0)));
        _1824 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1761 : (isnan(_1761) ? 0.0 : max(_1761, 0.0)));
        _1825 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1803 : (isnan(_1803) ? 0.0 : max(_1803, 0.0)));
    }
    else
    {
        _1811 = _1502;
        _1812 = _1502;
        _1813 = _1502;
        _1814 = _1502;
        _1815 = _1502;
        _1816 = _1502;
        _1817 = _1502;
        _1818 = _1502;
        _1819 = _1502;
        _1820 = _1502;
        _1821 = _1502;
        _1822 = _1502;
        _1823 = 0.0;
        _1824 = 0.0;
        _1825 = 0.0;
    }
    float _1835 = (cbModelParam._m0[1u].x * (_1823 - _1514)) + _1514;
    float _1836 = (cbModelParam._m0[1u].x * (_1824 - _1515)) + _1515;
    float _1837 = (cbModelParam._m0[1u].x * (_1825 - _1516)) + _1516;
    float _1858 = fma(_1837, cbSceneParam._m0[89u].z, fma(_1836, cbSceneParam._m0[89u].y, _1835 * cbSceneParam._m0[89u].x));
    float _1861 = fma(_1837, cbSceneParam._m0[90u].z, fma(_1836, cbSceneParam._m0[90u].y, _1835 * cbSceneParam._m0[90u].x));
    float _1864 = fma(_1837, cbSceneParam._m0[91u].z, fma(_1836, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1835));
    float _1879 = _1111 * 0.5;
    float _1880 = _1112 * 0.5;
    float _1881 = _1113 * 0.5;
    float _1882 = dot(vec4(_1879, _1880, _1881, 1.0), vec4(_1813, _1816, _1819, _1822));
    float _1885 = dot(vec4(_1879, _1880, _1881, 1.0), vec4(_1812, _1815, _1818, _1821));
    float _1888 = dot(vec4(_1879, _1880, _1881, 1.0), vec4(_1811, _1814, _1817, _1820));
    float _1922;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1895 = dot(vec4(_1879, _1880, _1881, 1.0), vec4(_1501, _1505, _1508, _1511));
        float _1899 = dot(vec4(_1879, _1880, _1881, 1.0), vec4(_1503, _1506, _1509, _1512));
        float _1903 = dot(vec4(_1879, _1880, _1881, 1.0), vec4(_1504, _1507, _1510, _1513));
        float _1910 = dot(vec4(cbModelParam._m0[39u]), vec4(_1879, _1880, _1881, 1.0));
        _1922 = dot(vec3(isnan(0.0) ? _1903 : (isnan(_1903) ? 0.0 : max(_1903, 0.0)), isnan(0.0) ? _1899 : (isnan(_1899) ? 0.0 : max(_1899, 0.0)), isnan(0.0) ? _1895 : (isnan(_1895) ? 0.0 : max(_1895, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1910) ? 0.0 : (isnan(0.0) ? _1910 : max(0.0, _1910))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1922 = 1.0;
    }
    float _1933;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1924 = dot(vec4(cbModelParam._m0[40u]), vec4(_1879, _1880, _1881, 1.0));
        _1933 = dot(vec3(isnan(0.0) ? _1882 : (isnan(_1882) ? 0.0 : max(_1882, 0.0)), isnan(0.0) ? _1885 : (isnan(_1885) ? 0.0 : max(_1885, 0.0)), isnan(0.0) ? _1888 : (isnan(_1888) ? 0.0 : max(_1888, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1924) ? 0.0 : (isnan(0.0) ? _1924 : max(0.0, _1924))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1933 = 1.0;
    }
    float _1937 = (_1933 * cbModelParam._m0[1u].x) + (_1922 * (1.0 - cbModelParam._m0[1u].x));
    float _1947 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _944);
    float _1948 = isnan(_1947) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1947 : min(cbModelParam._m0[25u].z, _1947));
    float _2028;
    float _2030;
    float _2032;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1995 = fma(_1172, cbModelParam._m0[13u].z, fma(_1168, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1164)) + cbModelParam._m0[13u].w;
        float _1999 = fma(_1172, cbModelParam._m0[14u].z, fma(_1168, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1164)) + cbModelParam._m0[14u].w;
        float _2003 = fma(_1172, cbModelParam._m0[15u].z, fma(_1168, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1164)) + cbModelParam._m0[15u].w;
        float _2006 = fma(_1113, cbModelParam._m0[13u].z, fma(_1112, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1111));
        float _2009 = fma(_1113, cbModelParam._m0[14u].z, fma(_1112, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1111));
        float _2012 = fma(_1113, cbModelParam._m0[15u].z, fma(_1112, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1111));
        float _2040;
        if (_2006 > 0.0)
        {
            _2040 = abs((1.0 - _1995) / _2006);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_2006 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1995 + 1.0) / _2006);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _2040 = frontier_phi_17_15_ladder;
        }
        float _2240;
        if (_2009 > 0.0)
        {
            _2240 = abs((1.0 - _1999) / _2009);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_2009 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1999 + 1.0) / _2009);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2240 = frontier_phi_26_22_ladder;
        }
        float _2483;
        if (_2012 > 0.0)
        {
            _2483 = abs((1.0 - _2003) / _2012);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_2012 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_2003 + 1.0) / _2012);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2483 = frontier_phi_38_33_ladder;
        }
        float _2485 = isnan(_2240) ? _2040 : (isnan(_2040) ? _2240 : min(_2040, _2240));
        float _2486 = isnan(_2483) ? _2485 : (isnan(_2485) ? _2483 : min(_2485, _2483));
        float _2490 = (_2486 * _2006) + _1995;
        float _2491 = (_2486 * _2009) + _1999;
        float _2492 = (_2486 * _2012) + _2003;
        float _2493 = _2486 * 9.9999997473787516355514526367188e-05;
        float _2495 = (-1.0) - _2493;
        float _2497 = _2493 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2492 > _2497) || ((_2492 < _2495) || ((_2491 > _2497) || ((_2491 < _2495) || ((_2490 < _2495) || (_2490 > _2497))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2616 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2492, cbModelParam._m0[9u].z, fma(_2491, cbModelParam._m0[9u].y, _2490 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2492, cbModelParam._m0[10u].z, fma(_2491, cbModelParam._m0[10u].y, _2490 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2492, cbModelParam._m0[11u].z, fma(_2491, cbModelParam._m0[11u].y, _2490 * cbModelParam._m0[11u].x))), _1948);
            frontier_phi_16_38_ladder = _2616.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2616.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2616.x * cbModelParam._m0[1u].y;
        }
        _2028 = frontier_phi_16_38_ladder_2;
        _2030 = frontier_phi_16_38_ladder_1;
        _2032 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _2016 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1111, _1112, _1113), _1948);
        _2028 = _2016.x * cbModelParam._m0[1u].y;
        _2030 = _2016.y * cbModelParam._m0[1u].y;
        _2032 = _2016.z * cbModelParam._m0[1u].y;
    }
    float _2036 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _944);
    float _2037 = isnan(_2036) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2036 : min(cbModelParam._m0[25u].w, _2036));
    float _2126;
    float _2128;
    float _2130;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2090 = fma(_1172, cbModelParam._m0[21u].z, fma(_1168, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1164)) + cbModelParam._m0[21u].w;
        float _2094 = fma(_1172, cbModelParam._m0[22u].z, fma(_1168, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1164)) + cbModelParam._m0[22u].w;
        float _2098 = fma(_1172, cbModelParam._m0[23u].z, fma(_1168, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1164)) + cbModelParam._m0[23u].w;
        float _2101 = fma(_1113, cbModelParam._m0[21u].z, fma(_1112, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1111));
        float _2104 = fma(_1113, cbModelParam._m0[22u].z, fma(_1112, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1111));
        float _2107 = fma(_1113, cbModelParam._m0[23u].z, fma(_1112, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1111));
        float _2245;
        if (_2101 > 0.0)
        {
            _2245 = abs((1.0 - _2090) / _2101);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_2101 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_2090 + 1.0) / _2101);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2245 = frontier_phi_28_24_ladder;
        }
        float _2510;
        if (_2104 > 0.0)
        {
            _2510 = abs((1.0 - _2094) / _2104);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_2104 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_2094 + 1.0) / _2104);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2510 = frontier_phi_40_35_ladder;
        }
        float _2715;
        if (_2107 > 0.0)
        {
            _2715 = abs((1.0 - _2098) / _2107);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_2107 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_2098 + 1.0) / _2107);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2715 = frontier_phi_49_46_ladder;
        }
        float _2717 = isnan(_2510) ? _2245 : (isnan(_2245) ? _2510 : min(_2245, _2510));
        float _2718 = isnan(_2715) ? _2717 : (isnan(_2717) ? _2715 : min(_2717, _2715));
        float _2722 = (_2718 * _2101) + _2090;
        float _2723 = (_2718 * _2104) + _2094;
        float _2724 = (_2718 * _2107) + _2098;
        float _2725 = _2718 * 9.9999997473787516355514526367188e-05;
        float _2726 = (-1.0) - _2725;
        float _2728 = _2725 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2724 > _2728) || ((_2724 < _2726) || ((_2723 > _2728) || ((_2723 < _2726) || ((_2722 < _2726) || (_2722 > _2728))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2923 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2724, cbModelParam._m0[17u].z, fma(_2723, cbModelParam._m0[17u].y, _2722 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2724, cbModelParam._m0[18u].z, fma(_2723, cbModelParam._m0[18u].y, _2722 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2724, cbModelParam._m0[19u].z, fma(_2723, cbModelParam._m0[19u].y, _2722 * cbModelParam._m0[19u].x))), _2037);
            frontier_phi_25_49_ladder = _2923.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2923.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2923.x * cbModelParam._m0[1u].z;
        }
        _2126 = frontier_phi_25_49_ladder_2;
        _2128 = frontier_phi_25_49_ladder_1;
        _2130 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _2110 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1111, _1112, _1113), _2037);
        _2126 = _2110.x * cbModelParam._m0[1u].z;
        _2128 = _2110.y * cbModelParam._m0[1u].z;
        _2130 = _2110.z * cbModelParam._m0[1u].z;
    }
    float _2142 = ((((1.0 - _1132) * ((_1119 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_1132 * _1119)) * _1103;
    float _2143 = _2142 * ((cbModelParam._m0[1u].w * (_2126 - _2028)) + _2028);
    float _2144 = _2142 * ((cbModelParam._m0[1u].w * (_2128 - _2030)) + _2030);
    float _2145 = _2142 * ((cbModelParam._m0[1u].w * (_2130 - _2032)) + _2032);
    float _2148 = fma(_2145, cbSceneParam._m0[89u].z, fma(_2144, cbSceneParam._m0[89u].y, _2143 * cbSceneParam._m0[89u].x));
    float _2151 = fma(_2145, cbSceneParam._m0[90u].z, fma(_2144, cbSceneParam._m0[90u].y, _2143 * cbSceneParam._m0[90u].x));
    float _2154 = fma(_2145, cbSceneParam._m0[91u].z, fma(_2144, cbSceneParam._m0[91u].y, _2143 * cbSceneParam._m0[91u].x));
    uvec4 _2164 = floatBitsToUint(cbInstanceData._m0[_263 + 5u]);
    uint _2166 = _2164.x * 14u;
    uint _2167 = _2166 + 13u;
    float _2174 = _1103 + (-1.0);
    float _2179 = (cbLight._m0[_2167].x * _2174) + 1.0;
    float _2180 = (cbLight._m0[_2167].y * _2174) + 1.0;
    float _2181 = (cbLight._m0[_2167].z * _2174) + 1.0;
    float _2182 = (cbLight._m0[_2167].w * _2174) + 1.0;
    uint _2183 = _2166 + 5u;
    float _2189 = isnan(1.0) ? _2180 : (isnan(_2180) ? 1.0 : min(_2180, 1.0));
    uint _2193 = _2166 + 4u;
    float _2199 = isnan(1.0) ? _2179 : (isnan(_2179) ? 1.0 : min(_2179, 1.0));
    uint _2203 = _2166 | 1u;
    float _2214 = dot(vec3(cbLight._m0[_2166].xyz), vec3(_941, _942, _943));
    float _2217 = dot(vec3(cbLight._m0[_2203].xyz), vec3(_941, _942, _943));
    float _4457 = isnan(0.0) ? _2214 : (isnan(_2214) ? 0.0 : max(_2214, 0.0));
    float _4468 = isnan(0.0) ? _2217 : (isnan(_2217) ? 0.0 : max(_2217, 0.0));
    float _2222 = (isnan(1.0) ? _4457 : (isnan(_4457) ? 1.0 : min(_4457, 1.0))) * 0.3183098733425140380859375;
    float _2224 = (isnan(1.0) ? _4468 : (isnan(_4468) ? 1.0 : min(_4468, 1.0))) * 0.3183098733425140380859375;
    float _2231 = ((cbLight._m0[_2183].x * _2189) * _2224) + ((cbLight._m0[_2193].x * _2199) * _2222);
    float _2232 = ((_2189 * cbLight._m0[_2183].y) * _2224) + ((_2199 * cbLight._m0[_2193].y) * _2222);
    float _2233 = ((_2189 * cbLight._m0[_2183].z) * _2224) + ((_2199 * cbLight._m0[_2193].z) * _2222);
    uvec4 _2237 = floatBitsToUint(cbLight._m0[_2166 + 12u]);
    bool _2239 = _2237.x == 0u;
    float _2250;
    float _2252;
    float _2254;
    if (_2239)
    {
        _2250 = _2231;
        _2252 = _2232;
        _2254 = _2233;
    }
    else
    {
        uint _2258 = _2166 + 6u;
        float _2274 = (dot(vec3(cbLight._m0[_2166 + 2u].xyz), vec3(_941, _942, _943)) * 0.5) + 0.5;
        float _2275 = _2274 * _2274;
        float _4479 = isnan(0.0) ? _2275 : (isnan(_2275) ? 0.0 : max(_2275, 0.0));
        float _2276 = isnan(1.0) ? _4479 : (isnan(_4479) ? 1.0 : min(_4479, 1.0));
        float _2277 = isnan(1.0) ? _2181 : (isnan(_2181) ? 1.0 : min(_2181, 1.0));
        _2250 = (((cbLight._m0[_2258].x * 0.3183098733425140380859375) * _2276) * _2277) + _2231;
        _2252 = (((cbLight._m0[_2258].y * 0.3183098733425140380859375) * _2276) * _2277) + _2232;
        _2254 = (((cbLight._m0[_2258].z * 0.3183098733425140380859375) * _2276) * _2277) + _2233;
    }
    bool _2257 = _2237.y == 0u;
    float _2295;
    float _2297;
    float _2299;
    if (_2257)
    {
        _2295 = _2250;
        _2297 = _2252;
        _2299 = _2254;
    }
    else
    {
        uint _2454 = _2166 + 7u;
        float _2470 = (dot(vec3(cbLight._m0[_2166 + 3u].xyz), vec3(_941, _942, _943)) * 0.5) + 0.5;
        float _2471 = _2470 * _2470;
        float _4495 = isnan(0.0) ? _2471 : (isnan(_2471) ? 0.0 : max(_2471, 0.0));
        float _2472 = isnan(1.0) ? _4495 : (isnan(_4495) ? 1.0 : min(_4495, 1.0));
        float _2473 = isnan(1.0) ? _2182 : (isnan(_2182) ? 1.0 : min(_2182, 1.0));
        _2295 = (((cbLight._m0[_2454].x * 0.3183098733425140380859375) * _2472) * _2473) + _2250;
        _2297 = (((cbLight._m0[_2454].y * 0.3183098733425140380859375) * _2472) * _2473) + _2252;
        _2299 = (((cbLight._m0[_2454].z * 0.3183098733425140380859375) * _2472) * _2473) + _2254;
    }
    uint _2302 = _2166 + 8u;
    float _2315 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2166].w)) * _944) * 0.949999988079071044921875);
    float _2316 = _2315 * _2315;
    float _2317 = cbLight._m0[_2166].x + _1020;
    float _2318 = cbLight._m0[_2166].y + _1021;
    float _2319 = cbLight._m0[_2166].z + _1022;
    float _2323 = inversesqrt(dot(vec3(_2317, _2318, _2319), vec3(_2317, _2318, _2319)));
    float _2324 = _2323 * _2317;
    float _2325 = _2323 * _2318;
    float _2326 = _2323 * _2319;
    float _2327 = dot(vec3(_941, _942, _943), vec3(cbLight._m0[_2166].xyz));
    float _4511 = isnan(0.0) ? _2327 : (isnan(_2327) ? 0.0 : max(_2327, 0.0));
    float _2330 = isnan(1.0) ? _4511 : (isnan(_4511) ? 1.0 : min(_4511, 1.0));
    float _4522 = isnan(0.0) ? _1104 : (isnan(_1104) ? 0.0 : max(_1104, 0.0));
    float _2331 = isnan(1.0) ? _4522 : (isnan(_4522) ? 1.0 : min(_4522, 1.0));
    float _2332 = dot(vec3(_941, _942, _943), vec3(_2324, _2325, _2326));
    float _4533 = isnan(0.0) ? _2332 : (isnan(_2332) ? 0.0 : max(_2332, 0.0));
    float _2335 = isnan(1.0) ? _4533 : (isnan(_4533) ? 1.0 : min(_4533, 1.0));
    float _2336 = dot(vec3(cbLight._m0[_2166].xyz), vec3(_2324, _2325, _2326));
    float _4544 = isnan(0.0) ? _2336 : (isnan(_2336) ? 0.0 : max(_2336, 0.0));
    float _2340 = _2316 * _2316;
    float _2344 = ((_2335 * _2335) * (_2340 + (-1.0))) + 1.0;
    float _2355 = (exp2(log2(1.0 - (isnan(1.0) ? _4544 : (isnan(_4544) ? 1.0 : min(_4544, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2356 = 1.0 - _2316;
    float _2367 = (0.5 / (((_2331 * ((_2330 * _2356) + _2316)) + 9.9999999392252902907785028219223e-09) + (((_2331 * _2356) + _2316) * _2330))) * _2330;
    float _4555 = isnan(0.0) ? _2367 : (isnan(_2367) ? 0.0 : max(_2367, 0.0));
    float _2369 = (isnan(1.0) ? _4555 : (isnan(_4555) ? 1.0 : min(_4555, 1.0))) * (_2340 / ((_2344 * _2344) * 3.141590118408203125));
    uint _2380 = _2166 + 9u;
    float _2391 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2203].w)) * _944) * 0.949999988079071044921875);
    float _2392 = _2391 * _2391;
    float _2393 = cbLight._m0[_2203].x + _1020;
    float _2394 = cbLight._m0[_2203].y + _1021;
    float _2395 = cbLight._m0[_2203].z + _1022;
    float _2399 = inversesqrt(dot(vec3(_2393, _2394, _2395), vec3(_2393, _2394, _2395)));
    float _2400 = _2399 * _2393;
    float _2401 = _2399 * _2394;
    float _2402 = _2399 * _2395;
    float _2403 = dot(vec3(_941, _942, _943), vec3(cbLight._m0[_2203].xyz));
    float _4566 = isnan(0.0) ? _2403 : (isnan(_2403) ? 0.0 : max(_2403, 0.0));
    float _2406 = isnan(1.0) ? _4566 : (isnan(_4566) ? 1.0 : min(_4566, 1.0));
    float _2407 = dot(vec3(_941, _942, _943), vec3(_2400, _2401, _2402));
    float _4577 = isnan(0.0) ? _2407 : (isnan(_2407) ? 0.0 : max(_2407, 0.0));
    float _2410 = isnan(1.0) ? _4577 : (isnan(_4577) ? 1.0 : min(_4577, 1.0));
    float _2411 = dot(vec3(cbLight._m0[_2203].xyz), vec3(_2400, _2401, _2402));
    float _4588 = isnan(0.0) ? _2411 : (isnan(_2411) ? 0.0 : max(_2411, 0.0));
    float _2415 = _2392 * _2392;
    float _2419 = ((_2410 * _2410) * (_2415 + (-1.0))) + 1.0;
    float _2428 = (exp2(log2(1.0 - (isnan(1.0) ? _4588 : (isnan(_4588) ? 1.0 : min(_4588, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2429 = 1.0 - _2392;
    float _2439 = (0.5 / (((_2331 * ((_2406 * _2429) + _2392)) + 9.9999999392252902907785028219223e-09) + (((_2331 * _2429) + _2392) * _2406))) * _2406;
    float _4599 = isnan(0.0) ? _2439 : (isnan(_2439) ? 0.0 : max(_2439, 0.0));
    float _2441 = (isnan(1.0) ? _4599 : (isnan(_4599) ? 1.0 : min(_4599, 1.0))) * (_2415 / ((_2419 * _2419) * 3.141590118408203125));
    float _2451 = (((_2428 * cbLight._m0[_2380].x) * _2441) * _2189) + (((_2355 * cbLight._m0[_2302].x) * _2369) * _2199);
    float _2452 = (((_2428 * cbLight._m0[_2380].y) * _2441) * _2189) + (((_2355 * cbLight._m0[_2302].y) * _2369) * _2199);
    float _2453 = (((_2428 * cbLight._m0[_2380].z) * _2441) * _2189) + (((_2355 * cbLight._m0[_2302].z) * _2369) * _2199);
    float _2515;
    float _2517;
    float _2519;
    if (_2239)
    {
        _2515 = _2451;
        _2517 = _2452;
        _2519 = _2453;
    }
    else
    {
        uint _2521 = _2166 + 2u;
        uint _2525 = _2166 + 10u;
        float _2539 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2521].w)) * _944) * 0.949999988079071044921875);
        float _2540 = _2539 * _2539;
        float _2541 = cbLight._m0[_2521].x + _1020;
        float _2542 = cbLight._m0[_2521].y + _1021;
        float _2543 = cbLight._m0[_2521].z + _1022;
        float _2547 = inversesqrt(dot(vec3(_2541, _2542, _2543), vec3(_2541, _2542, _2543)));
        float _2548 = _2547 * _2541;
        float _2549 = _2547 * _2542;
        float _2550 = _2547 * _2543;
        float _2551 = dot(vec3(_941, _942, _943), vec3(cbLight._m0[_2521].xyz));
        float _4610 = isnan(0.0) ? _2551 : (isnan(_2551) ? 0.0 : max(_2551, 0.0));
        float _2554 = isnan(1.0) ? _4610 : (isnan(_4610) ? 1.0 : min(_4610, 1.0));
        float _2555 = dot(vec3(_941, _942, _943), vec3(_2548, _2549, _2550));
        float _4621 = isnan(0.0) ? _2555 : (isnan(_2555) ? 0.0 : max(_2555, 0.0));
        float _2558 = isnan(1.0) ? _4621 : (isnan(_4621) ? 1.0 : min(_4621, 1.0));
        float _2559 = dot(vec3(cbLight._m0[_2521].xyz), vec3(_2548, _2549, _2550));
        float _4632 = isnan(0.0) ? _2559 : (isnan(_2559) ? 0.0 : max(_2559, 0.0));
        float _2563 = _2540 * _2540;
        float _2567 = ((_2558 * _2558) * (_2563 + (-1.0))) + 1.0;
        float _2576 = (exp2(log2(1.0 - (isnan(1.0) ? _4632 : (isnan(_4632) ? 1.0 : min(_4632, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2577 = 1.0 - _2540;
        float _2587 = (0.5 / (((_2331 * ((_2554 * _2577) + _2540)) + 9.9999999392252902907785028219223e-09) + (((_2331 * _2577) + _2540) * _2554))) * _2554;
        float _4643 = isnan(0.0) ? _2587 : (isnan(_2587) ? 0.0 : max(_2587, 0.0));
        float _2589 = (isnan(1.0) ? _4643 : (isnan(_4643) ? 1.0 : min(_4643, 1.0))) * (_2563 / ((_2567 * _2567) * 3.141590118408203125));
        float _2590 = isnan(1.0) ? _2181 : (isnan(_2181) ? 1.0 : min(_2181, 1.0));
        _2515 = (((_2576 * cbLight._m0[_2525].x) * _2589) * _2590) + _2451;
        _2517 = (((_2576 * cbLight._m0[_2525].y) * _2589) * _2590) + _2452;
        _2519 = (((_2576 * cbLight._m0[_2525].z) * _2589) * _2590) + _2453;
    }
    float _2625;
    float _2627;
    float _2629;
    if (_2257)
    {
        _2625 = _2515;
        _2627 = _2517;
        _2629 = _2519;
    }
    else
    {
        uint _2636 = _2166 + 3u;
        uint _2640 = _2166 + 11u;
        float _2654 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2636].w)) * _944) * 0.949999988079071044921875);
        float _2655 = _2654 * _2654;
        float _2656 = cbLight._m0[_2636].x + _1020;
        float _2657 = cbLight._m0[_2636].y + _1021;
        float _2658 = cbLight._m0[_2636].z + _1022;
        float _2662 = inversesqrt(dot(vec3(_2656, _2657, _2658), vec3(_2656, _2657, _2658)));
        float _2663 = _2662 * _2656;
        float _2664 = _2662 * _2657;
        float _2665 = _2662 * _2658;
        float _2666 = dot(vec3(_941, _942, _943), vec3(cbLight._m0[_2636].xyz));
        float _4659 = isnan(0.0) ? _2666 : (isnan(_2666) ? 0.0 : max(_2666, 0.0));
        float _2669 = isnan(1.0) ? _4659 : (isnan(_4659) ? 1.0 : min(_4659, 1.0));
        float _2670 = dot(vec3(_941, _942, _943), vec3(_2663, _2664, _2665));
        float _4670 = isnan(0.0) ? _2670 : (isnan(_2670) ? 0.0 : max(_2670, 0.0));
        float _2673 = isnan(1.0) ? _4670 : (isnan(_4670) ? 1.0 : min(_4670, 1.0));
        float _2674 = dot(vec3(cbLight._m0[_2636].xyz), vec3(_2663, _2664, _2665));
        float _4681 = isnan(0.0) ? _2674 : (isnan(_2674) ? 0.0 : max(_2674, 0.0));
        float _2678 = _2655 * _2655;
        float _2682 = ((_2673 * _2673) * (_2678 + (-1.0))) + 1.0;
        float _2691 = (exp2(log2(1.0 - (isnan(1.0) ? _4681 : (isnan(_4681) ? 1.0 : min(_4681, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2692 = 1.0 - _2655;
        float _2702 = (0.5 / (((_2331 * ((_2669 * _2692) + _2655)) + 9.9999999392252902907785028219223e-09) + (((_2331 * _2692) + _2655) * _2669))) * _2669;
        float _4692 = isnan(0.0) ? _2702 : (isnan(_2702) ? 0.0 : max(_2702, 0.0));
        float _2704 = (isnan(1.0) ? _4692 : (isnan(_4692) ? 1.0 : min(_4692, 1.0))) * (_2678 / ((_2682 * _2682) * 3.141590118408203125));
        float _2705 = isnan(1.0) ? _2182 : (isnan(_2182) ? 1.0 : min(_2182, 1.0));
        _2625 = (((_2691 * cbLight._m0[_2640].x) * _2704) * _2705) + _2515;
        _2627 = (((_2691 * cbLight._m0[_2640].y) * _2704) * _2705) + _2517;
        _2629 = (((_2691 * cbLight._m0[_2640].z) * _2704) * _2705) + _2519;
    }
    float _2840;
    float _2842;
    float _2844;
    float _2846;
    float _2848;
    float _2850;
    if (_2164.y == 0u)
    {
        float _2780 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2781 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2780;
        float _2782 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2780;
        float _2783 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2780;
        uvec4 _2795 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2796 = _2795.x;
        uint _2807 = uint((float(_2795.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1041) / _2796))) + floor(float(uint(cbSceneParam._m0[85u].x * _1040) / _2796)));
        float _2817 = (log2(_2783 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2818 = isnan(0.0) ? _2817 : (isnan(_2817) ? 0.0 : max(_2817, 0.0));
        uint _2821 = uint(isnan(14.0) ? _2818 : (isnan(_2818) ? 14.0 : min(_2818, 14.0)));
        uvec4 _2826 = texelFetch(g_lightClusterGridBuffer, int(((_2821 << 2u) + (_2807 << 6u)) >> 2u));
        uint _2827 = _2826.x;
        uint _2828 = _2795.z;
        float _2928;
        float _2930;
        float _2932;
        float _2934;
        float _2936;
        float _2938;
        if (((((1u << ((_2828 >> 4u) & 15u)) + 4294967295u) & _2827) == 0u) || ((_2828 & 240u) == 0u))
        {
            _2928 = 0.0;
            _2930 = 0.0;
            _2932 = 0.0;
            _2934 = 0.0;
            _2936 = 0.0;
            _2938 = 0.0;
        }
        else
        {
            float _2929;
            float _2931;
            float _2933;
            float _2935;
            float _2937;
            float _2939;
            float _3081 = 0.0;
            float _3082 = 0.0;
            float _3083 = 0.0;
            float _3084 = 0.0;
            float _3085 = 0.0;
            float _3086 = 0.0;
            uint _3087 = 0u;
            uint _3096;
            bool _3097;
            for (;;)
            {
                _3096 = texelFetch(g_lightClassification, int((((_2821 << 5u) + (_2807 << 9u)) + (_3087 << 2u)) >> 2u)).x;
                _3097 = _3096 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3097)
                {
                    frontier_phi_66_pred = _3081;
                    frontier_phi_66_pred_1 = _3086;
                    frontier_phi_66_pred_2 = _3085;
                    frontier_phi_66_pred_3 = _3084;
                    frontier_phi_66_pred_4 = _3083;
                    frontier_phi_66_pred_5 = _3082;
                }
                else
                {
                    float _3226;
                    float _3227;
                    float _3228;
                    float _3229;
                    float _3230;
                    float _3231;
                    uint _3232;
                    _3226 = _3081;
                    _3227 = _3082;
                    _3228 = _3083;
                    _3229 = _3084;
                    _3230 = _3085;
                    _3231 = _3086;
                    _3232 = _3096;
                    float _3153;
                    float _3154;
                    float _3155;
                    float _3156;
                    float _3157;
                    float _3158;
                    for (;;)
                    {
                        uint _3236 = uint(findLSB(_3232)) + (_3087 << 5u);
                        uint _3233 = (_3232 + 4294967295u) & _3232;
                        uint _3238 = _3236 * 48u;
                        vec4 _3252 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3238)).x, texelFetch(g_PointLightRenderingBuffer, int(_3238 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3238 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3238 + 3u)).x));
                        uint _3258 = (_3236 * 48u) + 4u;
                        vec4 _3271 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3258)).x, texelFetch(g_PointLightRenderingBuffer, int(_3258 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3258 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3258 + 3u)).x));
                        uint _3277 = (_3236 * 48u) + 8u;
                        vec3 _3288 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3277)).x, texelFetch(g_PointLightRenderingBuffer, int(_3277 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3277 + 2u)).x));
                        float _3292 = _3252.x - _2781;
                        float _3293 = _3252.y - _2782;
                        float _3294 = _3252.z - _2783;
                        float _3295 = dot(vec3(_3292, _3293, _3294), vec3(_3292, _3293, _3294));
                        float _3298 = inversesqrt(_3295);
                        float _3299 = _3298 * _3292;
                        float _3300 = _3298 * _3293;
                        float _3301 = _3298 * _3294;
                        float _3302 = dot(vec3(_1059, _1062, _1065), vec3(_3299, _3300, _3301));
                        float _3307 = 1.0 - (_3295 * _3252.w);
                        float _4718 = isnan(0.0) ? _3307 : (isnan(_3307) ? 0.0 : max(_3307, 0.0));
                        float _3308 = isnan(1.0) ? _4718 : (isnan(_4718) ? 1.0 : min(_4718, 1.0));
                        float _3309 = sqrt(_3295) * _3271.w;
                        float _3312 = 1.39999997615814208984375 / (_3309 + 1.39999997615814208984375);
                        float _3313 = _3312 * _3312;
                        float _3316 = ((1.0 - _3313) * _3302) + _3313;
                        float _3319 = _3309 * _3309;
                        float _3323 = ((isnan(0.0) ? _3316 : (isnan(_3316) ? 0.0 : max(_3316, 0.0))) * _3308) / ((_3319 * 0.699999988079071044921875) + 1.0);
                        float _3327 = (-0.0) - _2781;
                        float _3328 = (-0.0) - _2782;
                        float _3329 = (-0.0) - _2783;
                        float _3333 = inversesqrt(dot(vec3(_3327, _3328, _3329), vec3(_3327, _3328, _3329)));
                        float _3334 = _3333 * _3327;
                        float _3335 = _3333 * _3328;
                        float _3336 = _3333 * _3329;
                        float _3344 = exp2(log2(1.0 / ((_3319 * 3.5) + 5.0)) * 0.25);
                        float _3345 = 1.0 - _1119;
                        float _3352 = sqrt(1.0 - ((1.0 - (_3345 * _3345)) * (1.0 - (_3344 * _3344))));
                        float _3353 = _3352 * _3352;
                        float _3354 = _3353 * _3353;
                        float _3355 = _3334 + _3299;
                        float _3356 = _3335 + _3300;
                        float _3357 = _3336 + _3301;
                        float _3361 = inversesqrt(dot(vec3(_3355, _3356, _3357), vec3(_3355, _3356, _3357)));
                        float _3365 = dot(vec3(_1059, _1062, _1065), vec3(_3334, _3335, _3336));
                        float _4734 = isnan(0.0) ? _3365 : (isnan(_3365) ? 0.0 : max(_3365, 0.0));
                        float _3368 = isnan(1.0) ? _4734 : (isnan(_4734) ? 1.0 : min(_4734, 1.0));
                        float _3369 = dot(vec3(_1059, _1062, _1065), vec3(_3361 * _3355, _3361 * _3356, _3361 * _3357));
                        float _4745 = isnan(0.0) ? _3369 : (isnan(_3369) ? 0.0 : max(_3369, 0.0));
                        float _3372 = isnan(1.0) ? _4745 : (isnan(_4745) ? 1.0 : min(_4745, 1.0));
                        float _3376 = ((_3372 * _3372) * (_3354 + (-1.0))) + 1.0;
                        float _3377 = _3312 * _3353;
                        float _3378 = _3377 * _3377;
                        float _3381 = ((1.0 - _3378) * _3302) + _3378;
                        float _4756 = isnan(0.0) ? _3381 : (isnan(_3381) ? 0.0 : max(_3381, 0.0));
                        float _3382 = isnan(1.0) ? _4756 : (isnan(_4756) ? 1.0 : min(_4756, 1.0));
                        float _3383 = 1.0 - _3353;
                        float _3393 = (0.5 / (((_3382 * ((_3368 * _3383) + _3353)) + 9.9999999392252902907785028219223e-09) + (((_3382 * _3383) + _3353) * _3368))) * _3382;
                        float _4767 = isnan(0.0) ? _3393 : (isnan(_3393) ? 0.0 : max(_3393, 0.0));
                        float _3404 = (((_3354 * 3.1415927410125732421875) * (isnan(1.0) ? _4767 : (isnan(_4767) ? 1.0 : min(_4767, 1.0)))) / ((_3376 * _3376) * ((_3319 * 2.1991131305694580078125) + 3.141590118408203125))) * _3308;
                        _3156 = (_3323 * _3271.x) + _3229;
                        _3157 = (_3323 * _3271.y) + _3230;
                        _3158 = (_3323 * _3271.z) + _3231;
                        _3153 = (_3404 * _3288.x) + _3226;
                        _3154 = (_3404 * _3288.y) + _3227;
                        _3155 = (_3404 * _3288.z) + _3228;
                        if (_3233 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3226 = _3153;
                            _3227 = _3154;
                            _3228 = _3155;
                            _3229 = _3156;
                            _3230 = _3157;
                            _3231 = _3158;
                            _3232 = _3233;
                        }
                    }
                    frontier_phi_66_pred = _3153;
                    frontier_phi_66_pred_1 = _3158;
                    frontier_phi_66_pred_2 = _3157;
                    frontier_phi_66_pred_3 = _3156;
                    frontier_phi_66_pred_4 = _3155;
                    frontier_phi_66_pred_5 = _3154;
                }
                _2929 = frontier_phi_66_pred;
                _2939 = frontier_phi_66_pred_1;
                _2937 = frontier_phi_66_pred_2;
                _2935 = frontier_phi_66_pred_3;
                _2933 = frontier_phi_66_pred_4;
                _2931 = frontier_phi_66_pred_5;
                uint _3088 = _3087 + 1u;
                if (_3088 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3081 = _2929;
                    _3082 = _2931;
                    _3083 = _2933;
                    _3084 = _2935;
                    _3085 = _2937;
                    _3086 = _2939;
                    _3087 = _3088;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2928 = _2929;
            _2930 = _2931;
            _2932 = _2933;
            _2934 = _2935;
            _2936 = _2937;
            _2938 = _2939;
        }
        uvec4 _2942 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2943 = _2942.z;
        uint _2945 = (_2943 >> 8u) & 15u;
        float _3049;
        float _3051;
        float _3053;
        float _3055;
        float _3057;
        float _3059;
        if (((4294967295u << _2945) & _2827) == 0u)
        {
            _3049 = _2928;
            _3051 = _2930;
            _3053 = _2932;
            _3055 = _2934;
            _3057 = _2936;
            _3059 = _2938;
        }
        else
        {
            float _3074 = inversesqrt(dot(vec3(_2781, _2782, _2783), vec3(_2781, _2782, _2783)));
            float _3075 = _3074 * _2781;
            float _3076 = _3074 * _2782;
            float _3077 = _3074 * _2783;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2945 < ((_2943 >> 12u) & 15u))
            {
                float _3050;
                float _3052;
                float _3054;
                float _3056;
                float _3058;
                float _3060;
                float _3209 = _2928;
                float _3210 = _2930;
                float _3211 = _2932;
                float _3212 = _2934;
                float _3213 = _2936;
                float _3214 = _2938;
                uint _3215 = _2945;
                uint _3224;
                bool _3225;
                for (;;)
                {
                    _3224 = texelFetch(g_lightClassification, int((((_2821 << 5u) + (_2807 << 9u)) + (_3215 << 2u)) >> 2u)).x;
                    _3225 = _3224 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_3225)
                    {
                        frontier_phi_77_pred = _3214;
                        frontier_phi_77_pred_1 = _3213;
                        frontier_phi_77_pred_2 = _3212;
                        frontier_phi_77_pred_3 = _3211;
                        frontier_phi_77_pred_4 = _3210;
                        frontier_phi_77_pred_5 = _3209;
                    }
                    else
                    {
                        float _3418;
                        float _3419;
                        float _3420;
                        float _3421;
                        float _3422;
                        float _3423;
                        float _3711;
                        float _3712;
                        float _3713;
                        float _3714;
                        float _3715;
                        float _3716;
                        float _3431 = _3209;
                        float _3432 = _3210;
                        float _3433 = _3211;
                        float _3434 = _3212;
                        float _3435 = _3213;
                        float _3436 = _3214;
                        uint _3437 = _3224;
                        uint _3438;
                        vec4 _3463;
                        float _3464;
                        vec4 _3479;
                        vec3 _3491;
                        vec4 _3506;
                        vec4 _3521;
                        float _3567;
                        bool _3568;
                        for (;;)
                        {
                            uint _3448 = ((_3215 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3437));
                            _3438 = (_3437 + 4294967295u) & _3437;
                            uint _3450 = _3448 * 40u;
                            _3463 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3450)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3450 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3450 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3450 + 3u)).x));
                            _3464 = _3463.w;
                            uint _3466 = (_3448 * 40u) + 4u;
                            _3479 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3466)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3466 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3466 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3466 + 3u)).x));
                            uint _3481 = (_3448 * 40u) + 8u;
                            _3491 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3481)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3481 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3481 + 2u)).x));
                            uint _3493 = (_3448 * 40u) + 16u;
                            _3506 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3493)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3493 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3493 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3493 + 3u)).x));
                            uint _3508 = (_3448 * 40u) + 20u;
                            _3521 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3508)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3508 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3508 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3508 + 3u)).x));
                            uint _3523 = (_3448 * 40u) + 24u;
                            vec4 _3536 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3523)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3523 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3523 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3523 + 3u)).x));
                            uint _3542 = (_3448 * 40u) + 28u;
                            vec4 _3555 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3542)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3542 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3542 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3542 + 3u)).x));
                            _3567 = fma(_2783, _3555.z, fma(_2782, _3555.y, _3555.x * _2781)) + _3555.w;
                            _3568 = !((fma(_2783, _3536.z, fma(_2782, _3536.y, _3536.x * _2781)) + _3536.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3568)
                            {
                                float _3595 = _3463.x - _2781;
                                float _3596 = _3463.y - _2782;
                                float _3597 = _3463.z - _2783;
                                float _3598 = dot(vec3(_3595, _3596, _3597), vec3(_3595, _3596, _3597));
                                float _3601 = inversesqrt(_3598);
                                float _3602 = _3601 * _3595;
                                float _3603 = _3601 * _3596;
                                float _3604 = _3601 * _3597;
                                float _3608 = 1.0 - (_3598 / (_3464 * _3464));
                                float _4778 = isnan(0.0) ? _3608 : (isnan(_3608) ? 0.0 : max(_3608, 0.0));
                                float _3609 = isnan(1.0) ? _4778 : (isnan(_4778) ? 1.0 : min(_4778, 1.0));
                                float _3613 = sqrt(_3598) * _3479.w;
                                float _3615 = 1.39999997615814208984375 / (_3613 + 1.39999997615814208984375);
                                float _3616 = _3615 * _3615;
                                float _3619 = ((1.0 - _3616) * dot(vec3(_3602, _3603, _3604), vec3(_1059, _1062, _1065))) + _3616;
                                float _3622 = _3613 * _3613;
                                float _3626 = (fma(_2783, _3506.z, fma(_2782, _3506.y, _3506.x * _2781)) + _3506.w) / _3567;
                                float _3627 = (fma(_2783, _3521.z, fma(_2782, _3521.y, _3521.x * _2781)) + _3521.w) / _3567;
                                float _3631 = 1.0 - dot(vec2(_3626, _3627), vec2(_3626, _3627));
                                float _4794 = isnan(0.0) ? _3631 : (isnan(_3631) ? 0.0 : max(_3631, 0.0));
                                float _3632 = isnan(1.0) ? _4794 : (isnan(_4794) ? 1.0 : min(_4794, 1.0));
                                float _3633 = _3632 * (((isnan(0.0) ? _3619 : (isnan(_3619) ? 0.0 : max(_3619, 0.0))) * _3609) / ((_3622 * 0.699999988079071044921875) + 1.0));
                                float _3645 = exp2(log2(1.0 / ((_3622 * 3.5) + 5.0)) * 0.25);
                                float _3646 = 1.0 - _1119;
                                float _3653 = sqrt(1.0 - ((1.0 - (_3646 * _3646)) * (1.0 - (_3645 * _3645))));
                                float _3654 = _3653 * _3653;
                                float _3655 = _3654 * _3654;
                                float _3656 = _3602 - _3075;
                                float _3657 = _3603 - _3076;
                                float _3658 = _3604 - _3077;
                                float _3662 = inversesqrt(dot(vec3(_3656, _3657, _3658), vec3(_3656, _3657, _3658)));
                                float _3666 = dot(vec3(_1059, _1062, _1065), vec3((-0.0) - _3075, (-0.0) - _3076, (-0.0) - _3077));
                                float _4805 = isnan(0.0) ? _3666 : (isnan(_3666) ? 0.0 : max(_3666, 0.0));
                                float _3669 = isnan(1.0) ? _4805 : (isnan(_4805) ? 1.0 : min(_4805, 1.0));
                                float _3670 = dot(vec3(_1059, _1062, _1065), vec3(_3662 * _3656, _3662 * _3657, _3662 * _3658));
                                float _4816 = isnan(0.0) ? _3670 : (isnan(_3670) ? 0.0 : max(_3670, 0.0));
                                float _3673 = isnan(1.0) ? _4816 : (isnan(_4816) ? 1.0 : min(_4816, 1.0));
                                float _3677 = ((_3673 * _3673) * (_3655 + (-1.0))) + 1.0;
                                float _3678 = _3615 * _3654;
                                float _3679 = _3678 * _3678;
                                float _3685 = ((1.0 - _3679) * dot(vec3(_1059, _1062, _1065), vec3(_3602, _3603, _3604))) + _3679;
                                float _4827 = isnan(0.0) ? _3685 : (isnan(_3685) ? 0.0 : max(_3685, 0.0));
                                float _3686 = isnan(1.0) ? _4827 : (isnan(_4827) ? 1.0 : min(_4827, 1.0));
                                float _3687 = 1.0 - _3654;
                                float _3697 = (0.5 / (((_3686 * ((_3669 * _3687) + _3654)) + 9.9999999392252902907785028219223e-09) + (((_3686 * _3687) + _3654) * _3669))) * _3686;
                                float _4838 = isnan(0.0) ? _3697 : (isnan(_3697) ? 0.0 : max(_3697, 0.0));
                                float _3707 = (_3632 * _3609) * (((_3655 * 3.1415927410125732421875) * (isnan(1.0) ? _4838 : (isnan(_4838) ? 1.0 : min(_4838, 1.0)))) / ((_3677 * _3677) * ((_3622 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3633 * _3479.y;
                                frontier_phi_83_pred_1 = _3633 * _3479.x;
                                frontier_phi_83_pred_2 = _3707 * _3491.z;
                                frontier_phi_83_pred_3 = _3707 * _3491.y;
                                frontier_phi_83_pred_4 = _3707 * _3491.x;
                                frontier_phi_83_pred_5 = _3633 * _3479.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3715 = frontier_phi_83_pred;
                            _3714 = frontier_phi_83_pred_1;
                            _3713 = frontier_phi_83_pred_2;
                            _3712 = frontier_phi_83_pred_3;
                            _3711 = frontier_phi_83_pred_4;
                            _3716 = frontier_phi_83_pred_5;
                            _3421 = _3714 + _3434;
                            _3422 = _3715 + _3435;
                            _3423 = _3716 + _3436;
                            _3418 = _3711 + _3431;
                            _3419 = _3712 + _3432;
                            _3420 = _3713 + _3433;
                            if (_3438 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3431 = _3418;
                                _3432 = _3419;
                                _3433 = _3420;
                                _3434 = _3421;
                                _3435 = _3422;
                                _3436 = _3423;
                                _3437 = _3438;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3423;
                        frontier_phi_77_pred_1 = _3422;
                        frontier_phi_77_pred_2 = _3421;
                        frontier_phi_77_pred_3 = _3420;
                        frontier_phi_77_pred_4 = _3419;
                        frontier_phi_77_pred_5 = _3418;
                    }
                    _3060 = frontier_phi_77_pred;
                    _3058 = frontier_phi_77_pred_1;
                    _3056 = frontier_phi_77_pred_2;
                    _3054 = frontier_phi_77_pred_3;
                    _3052 = frontier_phi_77_pred_4;
                    _3050 = frontier_phi_77_pred_5;
                    uint _3216 = _3215 + 1u;
                    if (_3216 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3209 = _3050;
                        _3210 = _3052;
                        _3211 = _3054;
                        _3212 = _3056;
                        _3213 = _3058;
                        _3214 = _3060;
                        _3215 = _3216;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _3054;
                frontier_phi_58_59_ladder_1 = _3060;
                frontier_phi_58_59_ladder_2 = _3058;
                frontier_phi_58_59_ladder_3 = _3056;
                frontier_phi_58_59_ladder_4 = _3052;
                frontier_phi_58_59_ladder_5 = _3050;
            }
            else
            {
                frontier_phi_58_59_ladder = _2932;
                frontier_phi_58_59_ladder_1 = _2938;
                frontier_phi_58_59_ladder_2 = _2936;
                frontier_phi_58_59_ladder_3 = _2934;
                frontier_phi_58_59_ladder_4 = _2930;
                frontier_phi_58_59_ladder_5 = _2928;
            }
            _3049 = frontier_phi_58_59_ladder_5;
            _3051 = frontier_phi_58_59_ladder_4;
            _3053 = frontier_phi_58_59_ladder;
            _3055 = frontier_phi_58_59_ladder_3;
            _3057 = frontier_phi_58_59_ladder_2;
            _3059 = frontier_phi_58_59_ladder_1;
        }
        float _3064 = isnan(1.0) ? _1103 : (isnan(_1103) ? 1.0 : min(_1103, 1.0));
        _2840 = (_3064 * _3055) + _2295;
        _2842 = (_3064 * _3057) + _2297;
        _2844 = (_3064 * _3059) + _2299;
        _2846 = ((_3049 * 0.039999999105930328369140625) * _3064) + _2625;
        _2848 = ((_3051 * 0.039999999105930328369140625) * _3064) + _2627;
        _2850 = ((_3053 * 0.039999999105930328369140625) * _3064) + _2629;
    }
    else
    {
        _2840 = _2295;
        _2842 = _2297;
        _2844 = _2299;
        _2846 = _2625;
        _2848 = _2627;
        _2850 = _2629;
    }
    float _4854 = isnan(0.0) ? _1088 : (isnan(_1088) ? 0.0 : max(_1088, 0.0));
    float _4865 = isnan(0.0) ? _1089 : (isnan(_1089) ? 0.0 : max(_1089, 0.0));
    float _4876 = isnan(0.0) ? _1090 : (isnan(_1090) ? 0.0 : max(_1090, 0.0));
    float _2867 = ((isnan(1.0) ? _4854 : (isnan(_4854) ? 1.0 : min(_4854, 1.0))) * (_2840 + ((isnan(0.0) ? _1858 : (isnan(_1858) ? 0.0 : max(_1858, 0.0))) * _1103))) + ((_2846 + ((isnan(0.0) ? _2148 : (isnan(_2148) ? 0.0 : max(_2148, 0.0))) * _1937)) * cbPerFrame._m0[3u].x);
    float _2868 = ((isnan(1.0) ? _4865 : (isnan(_4865) ? 1.0 : min(_4865, 1.0))) * (_2842 + ((isnan(0.0) ? _1861 : (isnan(_1861) ? 0.0 : max(_1861, 0.0))) * _1103))) + ((_2848 + ((isnan(0.0) ? _2151 : (isnan(_2151) ? 0.0 : max(_2151, 0.0))) * _1937)) * cbPerFrame._m0[3u].x);
    float _2869 = ((isnan(1.0) ? _4876 : (isnan(_4876) ? 1.0 : min(_4876, 1.0))) * (_2844 + ((isnan(0.0) ? _1864 : (isnan(_1864) ? 0.0 : max(_1864, 0.0))) * _1103))) + ((_2850 + ((isnan(0.0) ? _2154 : (isnan(_2154) ? 0.0 : max(_2154, 0.0))) * _1937)) * cbPerFrame._m0[3u].x);
    uint _2870 = _263 + 6u;
    float _2878 = _1040 / cbSceneParam._m0[86u].x;
    float _2879 = _1041 / cbSceneParam._m0[86u].y;
    vec4 _2893 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2878, _2879, (log2((isnan(cbSceneParam._m0[77u].w) ? _962 : (isnan(_962) ? cbSceneParam._m0[77u].w : min(_962, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2895 = _2893.x;
    float _2896 = _2893.y;
    float _2897 = _2893.z;
    float _2898 = _2893.w;
    float _2991;
    float _2993;
    float _2995;
    float _2997;
    if (_962 > cbSceneParam._m0[78u].w)
    {
        float _2953 = isnan(_962) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _962 : min(cbSceneParam._m0[80u].w, _962));
        float _2954 = _2953 / _962;
        float _2965 = _2954 * _1013;
        float _2966 = _1014 * _2954;
        float _2967 = (-0.0) - _2966;
        float _2969 = _2954 * _1015;
        float _2971 = (cbSceneParam._m0[77u].w * _2967) / _2953;
        float _2972 = _2971 + cbSceneParam._m0[79u].w;
        float _2973 = cbSceneParam._m0[79u].w - _2966;
        float _2979 = sqrt(((_2965 * _2965) + (_2966 * _2966)) + (_2969 * _2969));
        float _2982 = (1.0 - (cbSceneParam._m0[77u].w / _2953)) * _2979;
        float _2987 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2989 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3166;
        if (abs((_2967 - _2971) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3166 = ((((_2972 > 0.0) ? exp2(_2987 * _2972) : (2.0 - exp2(_2989 * _2972))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2982;
        }
        else
        {
            float _3110 = 1.0 / cbSceneParam._m0[80u].x;
            float _3111 = isnan(_2973) ? _2972 : (isnan(_2972) ? _2973 : max(_2972, _2973));
            float _3112 = isnan(_2973) ? _2972 : (isnan(_2972) ? _2973 : min(_2972, _2973));
            float _3121 = isnan(0.0) ? _3111 : (isnan(_3111) ? 0.0 : min(_3111, 0.0));
            float _3122 = isnan(0.0) ? _3112 : (isnan(_3112) ? 0.0 : min(_3112, 0.0));
            _3166 = ((abs(_2979 / _2967) * cbSceneParam._m0[80u].y) * ((((_3121 - _3122) * 2.0) - ((exp2(_2987 * (isnan(0.0) ? _3111 : (isnan(_3111) ? 0.0 : max(_3111, 0.0)))) - exp2(_2987 * (isnan(0.0) ? _3112 : (isnan(_3112) ? 0.0 : max(_3112, 0.0))))) * _3110)) - ((exp2(_2989 * _3121) - exp2(_2989 * _3122)) * _3110))) + (_2982 * cbSceneParam._m0[80u].z);
        }
        vec4 _3168 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2878, _2879, 1.0), 0.0);
        float _3177 = exp2((_3166 * (-1.44269502162933349609375)) * (1.0 - _3168.w));
        float _3178 = log2(_3177);
        float _3194 = log2(_2898);
        _2991 = (exp2(_3194 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3178 * cbSceneParam._m0[78u].x)) * _3168.x) / cbSceneParam._m0[78u].x)) + _2895;
        _2993 = (exp2(_3194 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3178 * cbSceneParam._m0[78u].y)) * _3168.y) / cbSceneParam._m0[78u].y)) + _2896;
        _2995 = (exp2(_3194 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3178 * cbSceneParam._m0[78u].z)) * _3168.z) / cbSceneParam._m0[78u].z)) + _2897;
        _2997 = _3177 * _2898;
    }
    else
    {
        _2991 = _2895;
        _2993 = _2896;
        _2995 = _2897;
        _2997 = _2898;
    }
    bool _3204;
    vec4 _3007;
    vec4 _3029;
    float _3031;
    float _3035;
    float _3036;
    float _3037;
    float _3038;
    bool _3048;
    for (;;)
    {
        _3007 = cbMatDynParam._m0[0u];
        float _3009 = roundEven(_3007.y);
        bool _3010 = _3009 == 3.0;
        float _3011 = log2(_2997);
        float _3018 = exp2(_3011 * cbSceneParam._m0[78u].x) * _2867;
        float _3019 = exp2(_3011 * cbSceneParam._m0[78u].y) * _2868;
        float _3020 = exp2(_3011 * cbSceneParam._m0[78u].z) * _2869;
        float _3027 = _1029 + (-0.5);
        _3029 = cbMtdParam._m0[1u];
        _3031 = _3029.y * _3027;
        float _3034 = (_3009 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3035 = _3034 * (_3010 ? _3018 : (_3018 + (cbSceneParam._m0[72u].w * _2991)));
        _3036 = _3034 * (_3010 ? _3019 : (_3019 + (cbSceneParam._m0[72u].w * _2993)));
        _3037 = _3034 * (_3010 ? _3020 : (_3020 + (cbSceneParam._m0[72u].w * _2995)));
        _3038 = _3027 * 0.999000012874603271484375;
        _3048 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3048)
        {
            if ((cbInstanceData._m0[_263 + 7u].x + _3038) < 0.5)
            {
                _3204 = true;
                break;
            }
        }
        uint _3145 = _1078 + uint(_3007.w);
        if ((cbInstanceData._m0[_3145].w < 1.0) && ((cbInstanceData._m0[_3145].w + _3038) < 0.5))
        {
            _3204 = true;
            break;
        }
        if ((_3031 + 1.0) < _3029.x)
        {
            _3204 = true;
            break;
        }
        _3204 = false;
        break;
    }
    float _3409;
    if (_3204)
    {
        discard_state = true;
        _3409 = 0.0;
    }
    else
    {
        _3409 = cbInstanceData._m0[_2870].w;
    }
    SV_Target.x = _3035;
    SV_Target.y = _3036;
    SV_Target.z = _3037;
    SV_Target.w = _3409;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2870].w;
    discard_exit();
}


