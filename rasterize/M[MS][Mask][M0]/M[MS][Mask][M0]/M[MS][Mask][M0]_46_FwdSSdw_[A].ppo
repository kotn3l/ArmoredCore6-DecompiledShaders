#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 14) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_29;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_6;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1322;
float _3704;
float _3705;
float _3706;
float _3707;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _223 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _224 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _225 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _231 = inversesqrt(dot(vec3(_223, _224, _225), vec3(_223, _224, _225)));
    float _232 = _231 * _223;
    float _233 = _231 * _224;
    float _234 = _231 * _225;
    float _238 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _239 = _238 * NORMAL.x;
    float _240 = _238 * NORMAL.y;
    float _241 = _238 * NORMAL.z;
    float _245 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _246 = _245 * TANGENT.x;
    float _247 = _245 * TANGENT.y;
    float _248 = _245 * TANGENT.z;
    uint _251 = uint(roundEven(NORMAL.w)) * 13u;
    uint _256 = _251 + 1u;
    uint _260 = _251 + 2u;
    float _269 = sqrt(((cbInstanceData._m0[_256].x * cbInstanceData._m0[_256].x) + (cbInstanceData._m0[_251].x * cbInstanceData._m0[_251].x)) + (cbInstanceData._m0[_260].x * cbInstanceData._m0[_260].x));
    float _270 = _269 * TEXCOORD.z;
    float _271 = _269 * TEXCOORD.w;
    vec4 _291 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _297 = _291.x * cbMtdParam._m0[11u].x;
    float _298 = _291.y * cbMtdParam._m0[11u].y;
    float _299 = _291.z * cbMtdParam._m0[11u].z;
    vec4 _318 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _270) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _271) + cbTextureTilingScale._m0[5u].w));
    vec4 _371 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _373 = _371.x;
    float _385 = dot(vec4(_373, _371.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _402 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w)).x) * 2.0) - ((((_373 - _385) * cbMtdParam._m0[24u].z) + _385) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3716 = isnan(0.0) ? _402 : (isnan(_402) ? 0.0 : max(_402, 0.0));
    float _403 = isnan(1.0) ? _3716 : (isnan(_3716) ? 1.0 : min(_3716, 1.0));
    float _410 = (_403 * ((_318.x * cbMtdParam._m0[12u].x) - _297)) + _297;
    float _411 = (_403 * ((_318.y * cbMtdParam._m0[12u].y) - _298)) + _298;
    float _412 = (_403 * ((_318.z * cbMtdParam._m0[12u].z) - _299)) + _299;
    vec4 _431 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _270) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _271) + cbTextureTilingScale._m0[14u].w));
    vec4 _451 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _270) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _271) + cbTextureTilingScale._m0[4u].w));
    vec4 _468 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _470 = _468.x;
    float _471 = _468.y;
    float _472 = _468.z;
    float _481 = ((_451.z - _472) * _403) + _472;
    float _484 = ((((_451.x - _470) * _403) + _470) * 2.0) + (-1.0);
    float _486 = ((((_451.y - _471) * _403) + _471) * 2.0) + (-1.0);
    float _487 = dot(vec2(_484, _486), vec2(_484, _486));
    float _3727 = isnan(0.0) ? _487 : (isnan(_487) ? 0.0 : max(_487, 0.0));
    float _492 = sqrt(1.0 - (isnan(1.0) ? _3727 : (isnan(_3727) ? 1.0 : min(_3727, 1.0))));
    vec4 _508 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _520 = (((_508.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _484;
    float _521 = (((_508.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _486;
    float _524 = fma(_492, _239, fma(_521, _246, _520 * _232));
    float _527 = fma(_492, _240, fma(_521, _247, _520 * _233));
    float _530 = fma(_492, _241, fma(_521, _248, _520 * _234));
    float _534 = inversesqrt(dot(vec3(_524, _527, _530), vec3(_524, _527, _530)));
    vec4 _561 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _270) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _271) + cbTextureTilingScale._m0[11u].w));
    float _563 = _561.x;
    float _564 = 1.0 - _563;
    float _570 = (cbMtdParam._m0[19u].x + dot(vec4(_534 * _524, _534 * _527, _534 * _530, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_563 - _564) * cbMtdParam._m0[24u].w) + _564) * cbMtdParam._m0[21u].z);
    float _3738 = isnan(0.0) ? _570 : (isnan(_570) ? 0.0 : max(_570, 0.0));
    float _571 = isnan(1.0) ? _3738 : (isnan(_3738) ? 1.0 : min(_3738, 1.0));
    float _573 = (-0.0) - cbMtdParam._m0[24u].x;
    float _575 = isnan(0.0) ? _573 : (isnan(_573) ? 0.0 : max(_573, 0.0));
    float _576 = isnan(1.0) ? _575 : (isnan(_575) ? 1.0 : min(_575, 1.0));
    float _583 = _571 - ((_571 * TEXCOORD_8.x) * _576);
    float _584 = _571 - ((_571 * TEXCOORD_8.y) * _576);
    float _585 = _571 - ((_571 * TEXCOORD_8.z) * _576);
    float _592 = (_583 * ((_431.x * cbMtdParam._m0[18u].x) - _410)) + _410;
    float _593 = (_584 * ((_431.y * cbMtdParam._m0[18u].y) - _411)) + _411;
    float _594 = (_585 * ((_431.z * cbMtdParam._m0[18u].z) - _412)) + _412;
    vec4 _606 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _270) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _271) + cbTextureTilingScale._m0[19u].w));
    float _608 = _606.x;
    float _609 = 1.0 - _608;
    float _637 = (TEXCOORD_8.x - ((cbMtdParam._m0[22u].w * (1.0 - TEXCOORD_8.x)) * ((((_608 - _609) * cbMtdParam._m0[24u].y) + _609) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3759 = isnan(0.0) ? _637 : (isnan(_637) ? 0.0 : max(_637, 0.0));
    float _638 = isnan(1.0) ? _3759 : (isnan(_3759) ? 1.0 : min(_3759, 1.0));
    float _646 = ((((cbMtdParam._m0[10u].x - _592) * TEXCOORD_8.x) * cbMtdParam._m0[23u].w) * _638) + _592;
    float _647 = ((((cbMtdParam._m0[10u].y - _593) * TEXCOORD_8.y) * cbMtdParam._m0[23u].w) * _638) + _593;
    float _648 = (((cbMtdParam._m0[23u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _594)) * _638) + _594;
    float _652 = (cbMtdParam._m0[19u].w * (_508.z - _481)) + _481;
    vec4 _666 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _270) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _271) + cbTextureTilingScale._m0[15u].w));
    float _673 = (_666.x * 2.0) + (-1.0);
    float _674 = (_666.y * 2.0) + (-1.0);
    float _675 = dot(vec2(_673, _674), vec2(_673, _674));
    float _3770 = isnan(0.0) ? _675 : (isnan(_675) ? 0.0 : max(_675, 0.0));
    float _683 = ((_666.z - _652) * _583) + _652;
    float _686 = ((cbMtdParam._m0[23u].y - _683) * _638) + _683;
    vec4 _705 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _270) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _271) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _711 = (_705.x * 2.0) + (-1.0);
    float _712 = (_705.y * 2.0) + (-1.0);
    float _713 = dot(vec2(_711, _712), vec2(_711, _712));
    float _3781 = isnan(0.0) ? _713 : (isnan(_713) ? 0.0 : max(_713, 0.0));
    float _728 = ((sqrt(1.0 - (isnan(1.0) ? _3770 : (isnan(_3770) ? 1.0 : min(_3770, 1.0)))) - _492) * _585) + _492;
    float _731 = (((_673 - _520) * _583) + _520) + (cbMtdParam._m0[21u].x * _520);
    float _732 = (((_674 - _521) * _584) + _521) + (cbMtdParam._m0[21u].x * _521);
    float _743 = (((_711 - _731) + (_731 * cbMtdParam._m0[22u].z)) * _638) + _731;
    float _744 = (((_712 - _732) + (_732 * cbMtdParam._m0[22u].z)) * _638) + _732;
    float _745 = (_638 * (sqrt(1.0 - (isnan(1.0) ? _3781 : (isnan(_3781) ? 1.0 : min(_3781, 1.0)))) - _728)) + _728;
    float _747 = cbMtdParam._m0[22u].x + _508.w;
    float _750 = fma(_745, _239, fma(_744, _246, _743 * _232));
    float _753 = fma(_745, _240, fma(_744, _247, _743 * _233));
    float _756 = fma(_745, _241, fma(_744, _248, _743 * _234));
    float _760 = inversesqrt(dot(vec3(_750, _753, _756), vec3(_750, _753, _756)));
    float _761 = _760 * _750;
    float _762 = _760 * _753;
    float _763 = _760 * _756;
    float _3792 = isnan(0.0) ? _686 : (isnan(_686) ? 0.0 : max(_686, 0.0));
    float _764 = isnan(1.0) ? _3792 : (isnan(_3792) ? 1.0 : min(_3792, 1.0));
    float _3803 = isnan(0.0) ? _747 : (isnan(_747) ? 0.0 : max(_747, 0.0));
    float _3814 = isnan(0.0) ? _646 : (isnan(_646) ? 0.0 : max(_646, 0.0));
    float _3825 = isnan(0.0) ? _647 : (isnan(_647) ? 0.0 : max(_647, 0.0));
    float _3836 = isnan(0.0) ? _648 : (isnan(_648) ? 0.0 : max(_648, 0.0));
    float _782 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _823 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _833 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _823);
    float _834 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _823);
    float _835 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _823);
    float _839 = inversesqrt(dot(vec3(_833, _834, _835), vec3(_833, _834, _835)));
    float _840 = _833 * _839;
    float _841 = _834 * _839;
    float _842 = _835 * _839;
    vec4 _847 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _849 = _847.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1003 = sqrt(((_833 * _833) + (_834 * _834)) + (_835 * _835));
        float _1009 = (cbMatDynParam._m0[5u].x * _1003) + cbMatDynParam._m0[5u].y;
        float _3847 = isnan(0.0) ? _1009 : (isnan(_1009) ? 0.0 : max(_1009, 0.0));
        float _1010 = isnan(1.0) ? _3847 : (isnan(_3847) ? 1.0 : min(_3847, 1.0));
        float _1014 = (cbMatDynParam._m0[5u].z * _1003) + cbMatDynParam._m0[5u].w;
        float _3858 = isnan(0.0) ? _1014 : (isnan(_1014) ? 0.0 : max(_1014, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3858 : (isnan(_3858) ? 1.0 : min(_3858, 1.0))) - _1010)) + _1010) < ((_849 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _860 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _861 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _879 = fma(_763, cbSceneParam._m0[5u].z, fma(_762, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _761));
    float _882 = fma(_763, cbSceneParam._m0[6u].z, fma(_762, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _761));
    float _885 = fma(_763, cbSceneParam._m0[7u].z, fma(_762, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _761));
    uint _898 = _251 + 9u;
    uint _899 = _898 + uint(cbMatDynParam._m0[0u].w);
    float _905 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3814 : (isnan(_3814) ? 1.0 : min(_3814, 1.0)))) * cbInstanceData._m0[_899].x;
    float _906 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3825 : (isnan(_3825) ? 1.0 : min(_3825, 1.0)))) * cbInstanceData._m0[_899].y;
    float _907 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3836 : (isnan(_3836) ? 1.0 : min(_3836, 1.0)))) * cbInstanceData._m0[_899].z;
    float _3869 = isnan(0.0) ? _905 : (isnan(_905) ? 0.0 : max(_905, 0.0));
    float _908 = isnan(1.0) ? _3869 : (isnan(_3869) ? 1.0 : min(_3869, 1.0));
    float _3880 = isnan(0.0) ? _906 : (isnan(_906) ? 0.0 : max(_906, 0.0));
    float _909 = isnan(1.0) ? _3880 : (isnan(_3880) ? 1.0 : min(_3880, 1.0));
    float _3891 = isnan(0.0) ? _907 : (isnan(_907) ? 0.0 : max(_907, 0.0));
    float _910 = isnan(1.0) ? _3891 : (isnan(_3891) ? 1.0 : min(_3891, 1.0));
    vec4 _919 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _860, cbSceneParam._m0[86u].y * _861));
    float _923 = ((isnan(1.0) ? _3803 : (isnan(_3803) ? 1.0 : min(_3803, 1.0))) * TEXCOORD_5.w) * _919.x;
    float _924 = dot(vec3(_761, _762, _763), vec3(_840, _841, _842));
    float _927 = _924 * 2.0;
    float _931 = (_927 * _761) - _840;
    float _932 = (_927 * _762) - _841;
    float _933 = (_927 * _763) - _842;
    float _937 = abs(dot(vec3(_840, _841, _842), vec3(_761, _762, _763)));
    float _3902 = isnan(0.0) ? _937 : (isnan(_937) ? 0.0 : max(_937, 0.0));
    float _939 = sqrt(_764);
    float _952 = exp2((_939 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3902 : (isnan(_3902) ? 1.0 : min(_3902, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_939 * 3.0));
    float _984 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _988 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _992 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1321;
    float _1323;
    float _1324;
    float _1325;
    float _1326;
    float _1327;
    float _1328;
    float _1329;
    float _1330;
    float _1331;
    float _1332;
    float _1333;
    float _1334;
    float _1335;
    float _1336;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1046 = fma(_992, cbModelParam._m0[26u].z, fma(_988, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _984));
        float _1050 = fma(_992, cbModelParam._m0[27u].z, fma(_988, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _984));
        float _1054 = fma(_992, cbModelParam._m0[28u].z, fma(_988, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _984));
        float _1079 = _984 + _761;
        float _1080 = _988 + _762;
        float _1081 = _992 + _763;
        float _1091 = fma(_1081, cbModelParam._m0[26u].z, fma(_1080, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1079)) - _1046;
        float _1092 = fma(_1081, cbModelParam._m0[27u].z, fma(_1080, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1079)) - _1050;
        float _1093 = fma(_1081, cbModelParam._m0[28u].z, fma(_1080, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1079)) - _1054;
        float _1097 = inversesqrt(dot(vec3(_1091, _1092, _1093), vec3(_1091, _1092, _1093)));
        float _1110 = ((_1097 * _1091) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1046 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1111 = ((_1097 * _1092) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1050 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1112 = ((_1097 * _1093) / cbModelParam._m0[34u].z) + ((((((_1054 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1115 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1110, _1111, _1112), 0.0);
        vec4 _1122 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1110, _1111, _1112), 0.0);
        vec4 _1129 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1110, _1111, _1112), 0.0);
        vec4 _1136 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1110, _1111, _1112), 0.0);
        float _1149 = exp2((_1115.w + (-0.5)) * 20.0) * 2.0;
        float _1150 = _1149 * (_1115.x + (-0.5));
        float _1151 = _1149 * (_1115.y + (-0.5));
        float _1152 = _1149 * (_1115.z + (-0.5));
        float _1159 = exp2((_1122.w + (-0.5)) * 20.0) * 2.0;
        float _1160 = _1159 * (_1122.x + (-0.5));
        float _1161 = _1159 * (_1122.y + (-0.5));
        float _1162 = _1159 * (_1122.z + (-0.5));
        float _1169 = exp2((_1129.w + (-0.5)) * 20.0) * 2.0;
        float _1170 = _1169 * (_1129.x + (-0.5));
        float _1171 = _1169 * (_1129.y + (-0.5));
        float _1172 = _1169 * (_1129.z + (-0.5));
        float _1179 = exp2((_1136.w + (-0.5)) * 20.0) * 2.0;
        float _1180 = _1179 * (_1136.x + (-0.5));
        float _1181 = _1179 * (_1136.y + (-0.5));
        float _1182 = _1179 * (_1136.z + (-0.5));
        float _1183 = isnan(0.0) ? _1180 : (isnan(_1180) ? 0.0 : max(_1180, 0.0));
        float _1184 = isnan(0.0) ? _1181 : (isnan(_1181) ? 0.0 : max(_1181, 0.0));
        float _1185 = isnan(0.0) ? _1182 : (isnan(_1182) ? 0.0 : max(_1182, 0.0));
        float _1186 = _1150 * 0.5;
        float _1187 = _1160 * 0.5;
        float _1188 = _1170 * 0.5;
        float _1189 = dot(vec3(_1186, _1187, _1188), vec3(_1186, _1187, _1188));
        float _1194 = (_1189 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1189);
        float _1203 = (dot(vec3(_761, _762, _763), vec3(_1194 * _1186, _1194 * _1187, _1194 * _1188)) + 1.0) * 0.5;
        float _3928 = isnan(0.0) ? _1203 : (isnan(_1203) ? 0.0 : max(_1203, 0.0));
        float _1213 = sqrt(((_1187 * _1187) + (_1186 * _1186)) + (_1188 * _1188)) / (_1183 + 9.9999997473787516355514526367188e-06);
        float _3939 = isnan(0.0) ? _1213 : (isnan(_1213) ? 0.0 : max(_1213, 0.0));
        float _1214 = isnan(1.0) ? _3939 : (isnan(_3939) ? 1.0 : min(_3939, 1.0));
        float _1215 = _1214 * 2.0;
        float _1219 = (1.0 - _1214) / (_1214 + 1.0);
        float _3950 = isnan(0.0) ? _1219 : (isnan(_1219) ? 0.0 : max(_1219, 0.0));
        float _1220 = isnan(1.0) ? _3950 : (isnan(_3950) ? 1.0 : min(_3950, 1.0));
        float _1229 = ((((1.0 - _1220) * (_1215 + 2.0)) * exp2(log2(isnan(1.0) ? _3928 : (isnan(_3928) ? 1.0 : min(_3928, 1.0))) * (_1215 + 1.0))) + _1220) * _1183;
        float _1230 = _1151 * 0.5;
        float _1231 = _1161 * 0.5;
        float _1232 = _1171 * 0.5;
        float _1233 = dot(vec3(_1230, _1231, _1232), vec3(_1230, _1231, _1232));
        float _1238 = (_1233 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1233);
        float _1246 = (dot(vec3(_761, _762, _763), vec3(_1238 * _1230, _1238 * _1231, _1238 * _1232)) + 1.0) * 0.5;
        float _3961 = isnan(0.0) ? _1246 : (isnan(_1246) ? 0.0 : max(_1246, 0.0));
        float _1255 = sqrt(((_1231 * _1231) + (_1230 * _1230)) + (_1232 * _1232)) / (_1184 + 9.9999997473787516355514526367188e-06);
        float _3972 = isnan(0.0) ? _1255 : (isnan(_1255) ? 0.0 : max(_1255, 0.0));
        float _1256 = isnan(1.0) ? _3972 : (isnan(_3972) ? 1.0 : min(_3972, 1.0));
        float _1257 = _1256 * 2.0;
        float _1261 = (1.0 - _1256) / (_1256 + 1.0);
        float _3983 = isnan(0.0) ? _1261 : (isnan(_1261) ? 0.0 : max(_1261, 0.0));
        float _1262 = isnan(1.0) ? _3983 : (isnan(_3983) ? 1.0 : min(_3983, 1.0));
        float _1271 = ((((1.0 - _1262) * (_1257 + 2.0)) * exp2(log2(isnan(1.0) ? _3961 : (isnan(_3961) ? 1.0 : min(_3961, 1.0))) * (_1257 + 1.0))) + _1262) * _1184;
        float _1272 = _1152 * 0.5;
        float _1273 = _1162 * 0.5;
        float _1274 = _1172 * 0.5;
        float _1275 = dot(vec3(_1272, _1273, _1274), vec3(_1272, _1273, _1274));
        float _1280 = (_1275 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1275);
        float _1288 = (dot(vec3(_761, _762, _763), vec3(_1280 * _1272, _1280 * _1273, _1280 * _1274)) + 1.0) * 0.5;
        float _3994 = isnan(0.0) ? _1288 : (isnan(_1288) ? 0.0 : max(_1288, 0.0));
        float _1297 = sqrt(((_1273 * _1273) + (_1272 * _1272)) + (_1274 * _1274)) / (_1185 + 9.9999997473787516355514526367188e-06);
        float _4005 = isnan(0.0) ? _1297 : (isnan(_1297) ? 0.0 : max(_1297, 0.0));
        float _1298 = isnan(1.0) ? _4005 : (isnan(_4005) ? 1.0 : min(_4005, 1.0));
        float _1299 = _1298 * 2.0;
        float _1303 = (1.0 - _1298) / (_1298 + 1.0);
        float _4016 = isnan(0.0) ? _1303 : (isnan(_1303) ? 0.0 : max(_1303, 0.0));
        float _1304 = isnan(1.0) ? _4016 : (isnan(_4016) ? 1.0 : min(_4016, 1.0));
        float _1313 = ((((1.0 - _1304) * (_1299 + 2.0)) * exp2(log2(isnan(1.0) ? _3994 : (isnan(_3994) ? 1.0 : min(_3994, 1.0))) * (_1299 + 1.0))) + _1304) * _1185;
        _1321 = _1152;
        _1323 = _1151;
        _1324 = _1150;
        _1325 = _1162;
        _1326 = _1161;
        _1327 = _1160;
        _1328 = _1172;
        _1329 = _1171;
        _1330 = _1170;
        _1331 = _1185;
        _1332 = _1184;
        _1333 = _1183;
        _1334 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1229 : (isnan(_1229) ? 0.0 : max(_1229, 0.0)));
        _1335 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1271 : (isnan(_1271) ? 0.0 : max(_1271, 0.0)));
        _1336 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1313 : (isnan(_1313) ? 0.0 : max(_1313, 0.0)));
    }
    else
    {
        _1321 = _1322;
        _1323 = _1322;
        _1324 = _1322;
        _1325 = _1322;
        _1326 = _1322;
        _1327 = _1322;
        _1328 = _1322;
        _1329 = _1322;
        _1330 = _1322;
        _1331 = _1322;
        _1332 = _1322;
        _1333 = _1322;
        _1334 = 0.0;
        _1335 = 0.0;
        _1336 = 0.0;
    }
    float _1633;
    float _1634;
    float _1635;
    float _1636;
    float _1637;
    float _1638;
    float _1639;
    float _1640;
    float _1641;
    float _1642;
    float _1643;
    float _1644;
    float _1645;
    float _1646;
    float _1647;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1364 = fma(_992, cbModelParam._m0[30u].z, fma(_988, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _984));
        float _1368 = fma(_992, cbModelParam._m0[31u].z, fma(_988, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _984));
        float _1372 = fma(_992, cbModelParam._m0[32u].z, fma(_988, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _984));
        float _1395 = _984 + _761;
        float _1396 = _988 + _762;
        float _1397 = _992 + _763;
        float _1407 = fma(_1397, cbModelParam._m0[30u].z, fma(_1396, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1395)) - _1364;
        float _1408 = fma(_1397, cbModelParam._m0[31u].z, fma(_1396, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1395)) - _1368;
        float _1409 = fma(_1397, cbModelParam._m0[32u].z, fma(_1396, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1395)) - _1372;
        float _1413 = inversesqrt(dot(vec3(_1407, _1408, _1409), vec3(_1407, _1408, _1409)));
        float _1426 = ((_1413 * _1407) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1364 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1427 = ((_1413 * _1408) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1368 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1428 = ((_1413 * _1409) / cbModelParam._m0[35u].z) + ((((((_1372 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1430 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1426, _1427, _1428), 0.0);
        vec4 _1437 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1426, _1427, _1428), 0.0);
        vec4 _1444 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1426, _1427, _1428), 0.0);
        vec4 _1451 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1426, _1427, _1428), 0.0);
        float _1463 = exp2((_1430.w + (-0.5)) * 20.0) * 2.0;
        float _1464 = _1463 * (_1430.x + (-0.5));
        float _1465 = _1463 * (_1430.y + (-0.5));
        float _1466 = _1463 * (_1430.z + (-0.5));
        float _1473 = exp2((_1437.w + (-0.5)) * 20.0) * 2.0;
        float _1474 = _1473 * (_1437.x + (-0.5));
        float _1475 = _1473 * (_1437.y + (-0.5));
        float _1476 = _1473 * (_1437.z + (-0.5));
        float _1483 = exp2((_1444.w + (-0.5)) * 20.0) * 2.0;
        float _1484 = _1483 * (_1444.x + (-0.5));
        float _1485 = _1483 * (_1444.y + (-0.5));
        float _1486 = _1483 * (_1444.z + (-0.5));
        float _1493 = exp2((_1451.w + (-0.5)) * 20.0) * 2.0;
        float _1494 = _1493 * (_1451.x + (-0.5));
        float _1495 = _1493 * (_1451.y + (-0.5));
        float _1496 = _1493 * (_1451.z + (-0.5));
        float _1497 = isnan(0.0) ? _1494 : (isnan(_1494) ? 0.0 : max(_1494, 0.0));
        float _1498 = isnan(0.0) ? _1495 : (isnan(_1495) ? 0.0 : max(_1495, 0.0));
        float _1499 = isnan(0.0) ? _1496 : (isnan(_1496) ? 0.0 : max(_1496, 0.0));
        float _1500 = _1464 * 0.5;
        float _1501 = _1474 * 0.5;
        float _1502 = _1484 * 0.5;
        float _1503 = dot(vec3(_1500, _1501, _1502), vec3(_1500, _1501, _1502));
        float _1508 = (_1503 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1503);
        float _1516 = (dot(vec3(_761, _762, _763), vec3(_1508 * _1500, _1508 * _1501, _1508 * _1502)) + 1.0) * 0.5;
        float _4057 = isnan(0.0) ? _1516 : (isnan(_1516) ? 0.0 : max(_1516, 0.0));
        float _1525 = sqrt(((_1501 * _1501) + (_1500 * _1500)) + (_1502 * _1502)) / (_1497 + 9.9999997473787516355514526367188e-06);
        float _4068 = isnan(0.0) ? _1525 : (isnan(_1525) ? 0.0 : max(_1525, 0.0));
        float _1526 = isnan(1.0) ? _4068 : (isnan(_4068) ? 1.0 : min(_4068, 1.0));
        float _1527 = _1526 * 2.0;
        float _1531 = (1.0 - _1526) / (_1526 + 1.0);
        float _4079 = isnan(0.0) ? _1531 : (isnan(_1531) ? 0.0 : max(_1531, 0.0));
        float _1532 = isnan(1.0) ? _4079 : (isnan(_4079) ? 1.0 : min(_4079, 1.0));
        float _1541 = ((((1.0 - _1532) * (_1527 + 2.0)) * exp2(log2(isnan(1.0) ? _4057 : (isnan(_4057) ? 1.0 : min(_4057, 1.0))) * (_1527 + 1.0))) + _1532) * _1497;
        float _1542 = _1465 * 0.5;
        float _1543 = _1475 * 0.5;
        float _1544 = _1485 * 0.5;
        float _1545 = dot(vec3(_1542, _1543, _1544), vec3(_1542, _1543, _1544));
        float _1550 = (_1545 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1545);
        float _1558 = (dot(vec3(_761, _762, _763), vec3(_1550 * _1542, _1550 * _1543, _1550 * _1544)) + 1.0) * 0.5;
        float _4090 = isnan(0.0) ? _1558 : (isnan(_1558) ? 0.0 : max(_1558, 0.0));
        float _1567 = sqrt(((_1543 * _1543) + (_1542 * _1542)) + (_1544 * _1544)) / (_1498 + 9.9999997473787516355514526367188e-06);
        float _4101 = isnan(0.0) ? _1567 : (isnan(_1567) ? 0.0 : max(_1567, 0.0));
        float _1568 = isnan(1.0) ? _4101 : (isnan(_4101) ? 1.0 : min(_4101, 1.0));
        float _1569 = _1568 * 2.0;
        float _1573 = (1.0 - _1568) / (_1568 + 1.0);
        float _4112 = isnan(0.0) ? _1573 : (isnan(_1573) ? 0.0 : max(_1573, 0.0));
        float _1574 = isnan(1.0) ? _4112 : (isnan(_4112) ? 1.0 : min(_4112, 1.0));
        float _1583 = ((((1.0 - _1574) * (_1569 + 2.0)) * exp2(log2(isnan(1.0) ? _4090 : (isnan(_4090) ? 1.0 : min(_4090, 1.0))) * (_1569 + 1.0))) + _1574) * _1498;
        float _1584 = _1466 * 0.5;
        float _1585 = _1476 * 0.5;
        float _1586 = _1486 * 0.5;
        float _1587 = dot(vec3(_1584, _1585, _1586), vec3(_1584, _1585, _1586));
        float _1592 = (_1587 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1587);
        float _1600 = (dot(vec3(_761, _762, _763), vec3(_1592 * _1584, _1592 * _1585, _1592 * _1586)) + 1.0) * 0.5;
        float _4123 = isnan(0.0) ? _1600 : (isnan(_1600) ? 0.0 : max(_1600, 0.0));
        float _1609 = sqrt(((_1585 * _1585) + (_1584 * _1584)) + (_1586 * _1586)) / (_1499 + 9.9999997473787516355514526367188e-06);
        float _4134 = isnan(0.0) ? _1609 : (isnan(_1609) ? 0.0 : max(_1609, 0.0));
        float _1610 = isnan(1.0) ? _4134 : (isnan(_4134) ? 1.0 : min(_4134, 1.0));
        float _1611 = _1610 * 2.0;
        float _1615 = (1.0 - _1610) / (_1610 + 1.0);
        float _4145 = isnan(0.0) ? _1615 : (isnan(_1615) ? 0.0 : max(_1615, 0.0));
        float _1616 = isnan(1.0) ? _4145 : (isnan(_4145) ? 1.0 : min(_4145, 1.0));
        float _1625 = ((((1.0 - _1616) * (_1611 + 2.0)) * exp2(log2(isnan(1.0) ? _4123 : (isnan(_4123) ? 1.0 : min(_4123, 1.0))) * (_1611 + 1.0))) + _1616) * _1499;
        _1633 = _1466;
        _1634 = _1465;
        _1635 = _1464;
        _1636 = _1476;
        _1637 = _1475;
        _1638 = _1474;
        _1639 = _1486;
        _1640 = _1485;
        _1641 = _1484;
        _1642 = _1499;
        _1643 = _1498;
        _1644 = _1497;
        _1645 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1541 : (isnan(_1541) ? 0.0 : max(_1541, 0.0)));
        _1646 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1583 : (isnan(_1583) ? 0.0 : max(_1583, 0.0)));
        _1647 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1625 : (isnan(_1625) ? 0.0 : max(_1625, 0.0)));
    }
    else
    {
        _1633 = _1322;
        _1634 = _1322;
        _1635 = _1322;
        _1636 = _1322;
        _1637 = _1322;
        _1638 = _1322;
        _1639 = _1322;
        _1640 = _1322;
        _1641 = _1322;
        _1642 = _1322;
        _1643 = _1322;
        _1644 = _1322;
        _1645 = 0.0;
        _1646 = 0.0;
        _1647 = 0.0;
    }
    float _1657 = (cbModelParam._m0[1u].x * (_1645 - _1334)) + _1334;
    float _1658 = (cbModelParam._m0[1u].x * (_1646 - _1335)) + _1335;
    float _1659 = (cbModelParam._m0[1u].x * (_1647 - _1336)) + _1336;
    float _1680 = fma(_1659, cbSceneParam._m0[89u].z, fma(_1658, cbSceneParam._m0[89u].y, _1657 * cbSceneParam._m0[89u].x));
    float _1683 = fma(_1659, cbSceneParam._m0[90u].z, fma(_1658, cbSceneParam._m0[90u].y, _1657 * cbSceneParam._m0[90u].x));
    float _1686 = fma(_1659, cbSceneParam._m0[91u].z, fma(_1658, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1657));
    float _1701 = _931 * 0.5;
    float _1702 = _932 * 0.5;
    float _1703 = _933 * 0.5;
    float _1704 = dot(vec4(_1701, _1702, _1703, 1.0), vec4(_1635, _1638, _1641, _1644));
    float _1707 = dot(vec4(_1701, _1702, _1703, 1.0), vec4(_1634, _1637, _1640, _1643));
    float _1710 = dot(vec4(_1701, _1702, _1703, 1.0), vec4(_1633, _1636, _1639, _1642));
    float _1744;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1717 = dot(vec4(_1701, _1702, _1703, 1.0), vec4(_1321, _1325, _1328, _1331));
        float _1721 = dot(vec4(_1701, _1702, _1703, 1.0), vec4(_1323, _1326, _1329, _1332));
        float _1725 = dot(vec4(_1701, _1702, _1703, 1.0), vec4(_1324, _1327, _1330, _1333));
        float _1732 = dot(vec4(cbModelParam._m0[39u]), vec4(_1701, _1702, _1703, 1.0));
        _1744 = dot(vec3(isnan(0.0) ? _1725 : (isnan(_1725) ? 0.0 : max(_1725, 0.0)), isnan(0.0) ? _1721 : (isnan(_1721) ? 0.0 : max(_1721, 0.0)), isnan(0.0) ? _1717 : (isnan(_1717) ? 0.0 : max(_1717, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1732) ? 0.0 : (isnan(0.0) ? _1732 : max(0.0, _1732))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1744 = 1.0;
    }
    float _1755;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1746 = dot(vec4(cbModelParam._m0[40u]), vec4(_1701, _1702, _1703, 1.0));
        _1755 = dot(vec3(isnan(0.0) ? _1704 : (isnan(_1704) ? 0.0 : max(_1704, 0.0)), isnan(0.0) ? _1707 : (isnan(_1707) ? 0.0 : max(_1707, 0.0)), isnan(0.0) ? _1710 : (isnan(_1710) ? 0.0 : max(_1710, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1746) ? 0.0 : (isnan(0.0) ? _1746 : max(0.0, _1746))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1755 = 1.0;
    }
    float _1759 = (_1755 * cbModelParam._m0[1u].x) + (_1744 * (1.0 - cbModelParam._m0[1u].x));
    float _1769 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _764);
    float _1770 = isnan(_1769) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1769 : min(cbModelParam._m0[25u].z, _1769));
    float _1850;
    float _1852;
    float _1854;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1817 = fma(_992, cbModelParam._m0[13u].z, fma(_988, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _984)) + cbModelParam._m0[13u].w;
        float _1821 = fma(_992, cbModelParam._m0[14u].z, fma(_988, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _984)) + cbModelParam._m0[14u].w;
        float _1825 = fma(_992, cbModelParam._m0[15u].z, fma(_988, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _984)) + cbModelParam._m0[15u].w;
        float _1828 = fma(_933, cbModelParam._m0[13u].z, fma(_932, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _931));
        float _1831 = fma(_933, cbModelParam._m0[14u].z, fma(_932, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _931));
        float _1834 = fma(_933, cbModelParam._m0[15u].z, fma(_932, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _931));
        float _1862;
        if (_1828 > 0.0)
        {
            _1862 = abs((1.0 - _1817) / _1828);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1828 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1817 + 1.0) / _1828);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1862 = frontier_phi_17_15_ladder;
        }
        float _2083;
        if (_1831 > 0.0)
        {
            _2083 = abs((1.0 - _1821) / _1831);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1831 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1821 + 1.0) / _1831);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2083 = frontier_phi_26_22_ladder;
        }
        float _2329;
        if (_1834 > 0.0)
        {
            _2329 = abs((1.0 - _1825) / _1834);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1834 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1825 + 1.0) / _1834);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2329 = frontier_phi_38_33_ladder;
        }
        float _2331 = isnan(_2083) ? _1862 : (isnan(_1862) ? _2083 : min(_1862, _2083));
        float _2332 = isnan(_2329) ? _2331 : (isnan(_2331) ? _2329 : min(_2331, _2329));
        float _2336 = (_2332 * _1828) + _1817;
        float _2337 = (_2332 * _1831) + _1821;
        float _2338 = (_2332 * _1834) + _1825;
        float _2339 = _2332 * 9.9999997473787516355514526367188e-05;
        float _2341 = (-1.0) - _2339;
        float _2343 = _2339 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2338 > _2343) || ((_2338 < _2341) || ((_2337 > _2343) || ((_2337 < _2341) || ((_2336 < _2341) || (_2336 > _2343))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2462 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2338, cbModelParam._m0[9u].z, fma(_2337, cbModelParam._m0[9u].y, _2336 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2338, cbModelParam._m0[10u].z, fma(_2337, cbModelParam._m0[10u].y, _2336 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2338, cbModelParam._m0[11u].z, fma(_2337, cbModelParam._m0[11u].y, _2336 * cbModelParam._m0[11u].x))), _1770);
            frontier_phi_16_38_ladder = _2462.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2462.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2462.x * cbModelParam._m0[1u].y;
        }
        _1850 = frontier_phi_16_38_ladder_2;
        _1852 = frontier_phi_16_38_ladder_1;
        _1854 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1838 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_931, _932, _933), _1770);
        _1850 = _1838.x * cbModelParam._m0[1u].y;
        _1852 = _1838.y * cbModelParam._m0[1u].y;
        _1854 = _1838.z * cbModelParam._m0[1u].y;
    }
    float _1858 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _764);
    float _1859 = isnan(_1858) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1858 : min(cbModelParam._m0[25u].w, _1858));
    float _1948;
    float _1950;
    float _1952;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1912 = fma(_992, cbModelParam._m0[21u].z, fma(_988, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _984)) + cbModelParam._m0[21u].w;
        float _1916 = fma(_992, cbModelParam._m0[22u].z, fma(_988, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _984)) + cbModelParam._m0[22u].w;
        float _1920 = fma(_992, cbModelParam._m0[23u].z, fma(_988, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _984)) + cbModelParam._m0[23u].w;
        float _1923 = fma(_933, cbModelParam._m0[21u].z, fma(_932, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _931));
        float _1926 = fma(_933, cbModelParam._m0[22u].z, fma(_932, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _931));
        float _1929 = fma(_933, cbModelParam._m0[23u].z, fma(_932, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _931));
        float _2088;
        if (_1923 > 0.0)
        {
            _2088 = abs((1.0 - _1912) / _1923);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1923 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1912 + 1.0) / _1923);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2088 = frontier_phi_28_24_ladder;
        }
        float _2356;
        if (_1926 > 0.0)
        {
            _2356 = abs((1.0 - _1916) / _1926);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1926 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1916 + 1.0) / _1926);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2356 = frontier_phi_40_35_ladder;
        }
        float _2561;
        if (_1929 > 0.0)
        {
            _2561 = abs((1.0 - _1920) / _1929);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1929 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1920 + 1.0) / _1929);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2561 = frontier_phi_49_46_ladder;
        }
        float _2563 = isnan(_2356) ? _2088 : (isnan(_2088) ? _2356 : min(_2088, _2356));
        float _2564 = isnan(_2561) ? _2563 : (isnan(_2563) ? _2561 : min(_2563, _2561));
        float _2568 = (_2564 * _1923) + _1912;
        float _2569 = (_2564 * _1926) + _1916;
        float _2570 = (_2564 * _1929) + _1920;
        float _2571 = _2564 * 9.9999997473787516355514526367188e-05;
        float _2572 = (-1.0) - _2571;
        float _2574 = _2571 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2570 > _2574) || ((_2570 < _2572) || ((_2569 > _2574) || ((_2569 < _2572) || ((_2568 < _2572) || (_2568 > _2574))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2769 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2570, cbModelParam._m0[17u].z, fma(_2569, cbModelParam._m0[17u].y, _2568 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2570, cbModelParam._m0[18u].z, fma(_2569, cbModelParam._m0[18u].y, _2568 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2570, cbModelParam._m0[19u].z, fma(_2569, cbModelParam._m0[19u].y, _2568 * cbModelParam._m0[19u].x))), _1859);
            frontier_phi_25_49_ladder = _2769.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2769.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2769.x * cbModelParam._m0[1u].z;
        }
        _1948 = frontier_phi_25_49_ladder_2;
        _1950 = frontier_phi_25_49_ladder_1;
        _1952 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1932 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_931, _932, _933), _1859);
        _1948 = _1932.x * cbModelParam._m0[1u].z;
        _1950 = _1932.y * cbModelParam._m0[1u].z;
        _1952 = _1932.z * cbModelParam._m0[1u].z;
    }
    float _1964 = ((((1.0 - _952) * ((_939 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_952 * _939)) * _923;
    float _1965 = _1964 * ((cbModelParam._m0[1u].w * (_1948 - _1850)) + _1850);
    float _1966 = _1964 * ((cbModelParam._m0[1u].w * (_1950 - _1852)) + _1852);
    float _1967 = _1964 * ((cbModelParam._m0[1u].w * (_1952 - _1854)) + _1854);
    float _1970 = fma(_1967, cbSceneParam._m0[89u].z, fma(_1966, cbSceneParam._m0[89u].y, _1965 * cbSceneParam._m0[89u].x));
    float _1973 = fma(_1967, cbSceneParam._m0[90u].z, fma(_1966, cbSceneParam._m0[90u].y, _1965 * cbSceneParam._m0[90u].x));
    float _1976 = fma(_1967, cbSceneParam._m0[91u].z, fma(_1966, cbSceneParam._m0[91u].y, _1965 * cbSceneParam._m0[91u].x));
    vec4 _1984 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_860, _861));
    float _1986 = _1984.w;
    float _1998 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1986);
    float _1999 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1986);
    float _2000 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1986);
    uvec4 _2004 = floatBitsToUint(cbInstanceData._m0[_251 + 5u]);
    uint _2006 = _2004.x * 14u;
    uint _2007 = _2006 + 13u;
    float _2014 = _923 + (-1.0);
    float _2019 = (cbLight._m0[_2007].x * _2014) + 1.0;
    float _2020 = (cbLight._m0[_2007].y * _2014) + 1.0;
    float _2021 = (cbLight._m0[_2007].z * _2014) + 1.0;
    float _2022 = (cbLight._m0[_2007].w * _2014) + 1.0;
    uint _2023 = _2006 + 5u;
    float _2029 = isnan(1.0) ? _2020 : (isnan(_2020) ? 1.0 : min(_2020, 1.0));
    uint _2033 = _2006 + 4u;
    float _2042 = isnan(1.0) ? _2019 : (isnan(_2019) ? 1.0 : min(_2019, 1.0));
    uint _2046 = _2006 | 1u;
    float _2057 = dot(vec3(cbLight._m0[_2006].xyz), vec3(_761, _762, _763));
    float _2060 = dot(vec3(cbLight._m0[_2046].xyz), vec3(_761, _762, _763));
    float _4281 = isnan(0.0) ? _2057 : (isnan(_2057) ? 0.0 : max(_2057, 0.0));
    float _4292 = isnan(0.0) ? _2060 : (isnan(_2060) ? 0.0 : max(_2060, 0.0));
    float _2065 = (isnan(1.0) ? _4281 : (isnan(_4281) ? 1.0 : min(_4281, 1.0))) * 0.3183098733425140380859375;
    float _2067 = (isnan(1.0) ? _4292 : (isnan(_4292) ? 1.0 : min(_4292, 1.0))) * 0.3183098733425140380859375;
    float _2074 = ((cbLight._m0[_2023].x * _2029) * _2067) + (((cbLight._m0[_2033].x * _1998) * _2042) * _2065);
    float _2075 = ((_2029 * cbLight._m0[_2023].y) * _2067) + (((cbLight._m0[_2033].y * _1999) * _2042) * _2065);
    float _2076 = ((_2029 * cbLight._m0[_2023].z) * _2067) + (((cbLight._m0[_2033].z * _2000) * _2042) * _2065);
    uvec4 _2080 = floatBitsToUint(cbLight._m0[_2006 + 12u]);
    bool _2082 = _2080.x == 0u;
    float _2093;
    float _2095;
    float _2097;
    if (_2082)
    {
        _2093 = _2074;
        _2095 = _2075;
        _2097 = _2076;
    }
    else
    {
        uint _2101 = _2006 + 6u;
        float _2117 = (dot(vec3(cbLight._m0[_2006 + 2u].xyz), vec3(_761, _762, _763)) * 0.5) + 0.5;
        float _2118 = _2117 * _2117;
        float _4303 = isnan(0.0) ? _2118 : (isnan(_2118) ? 0.0 : max(_2118, 0.0));
        float _2119 = isnan(1.0) ? _4303 : (isnan(_4303) ? 1.0 : min(_4303, 1.0));
        float _2120 = isnan(1.0) ? _2021 : (isnan(_2021) ? 1.0 : min(_2021, 1.0));
        _2093 = (((cbLight._m0[_2101].x * 0.3183098733425140380859375) * _2119) * _2120) + _2074;
        _2095 = (((cbLight._m0[_2101].y * 0.3183098733425140380859375) * _2119) * _2120) + _2075;
        _2097 = (((cbLight._m0[_2101].z * 0.3183098733425140380859375) * _2119) * _2120) + _2076;
    }
    bool _2100 = _2080.y == 0u;
    float _2138;
    float _2140;
    float _2142;
    if (_2100)
    {
        _2138 = _2093;
        _2140 = _2095;
        _2142 = _2097;
    }
    else
    {
        uint _2300 = _2006 + 7u;
        float _2316 = (dot(vec3(cbLight._m0[_2006 + 3u].xyz), vec3(_761, _762, _763)) * 0.5) + 0.5;
        float _2317 = _2316 * _2316;
        float _4319 = isnan(0.0) ? _2317 : (isnan(_2317) ? 0.0 : max(_2317, 0.0));
        float _2318 = isnan(1.0) ? _4319 : (isnan(_4319) ? 1.0 : min(_4319, 1.0));
        float _2319 = isnan(1.0) ? _2022 : (isnan(_2022) ? 1.0 : min(_2022, 1.0));
        _2138 = (((cbLight._m0[_2300].x * 0.3183098733425140380859375) * _2318) * _2319) + _2093;
        _2140 = (((cbLight._m0[_2300].y * 0.3183098733425140380859375) * _2318) * _2319) + _2095;
        _2142 = (((cbLight._m0[_2300].z * 0.3183098733425140380859375) * _2318) * _2319) + _2097;
    }
    uint _2145 = _2006 + 8u;
    float _2158 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2006].w)) * _764) * 0.949999988079071044921875);
    float _2159 = _2158 * _2158;
    float _2160 = cbLight._m0[_2006].x + _840;
    float _2161 = cbLight._m0[_2006].y + _841;
    float _2162 = cbLight._m0[_2006].z + _842;
    float _2166 = inversesqrt(dot(vec3(_2160, _2161, _2162), vec3(_2160, _2161, _2162)));
    float _2167 = _2166 * _2160;
    float _2168 = _2166 * _2161;
    float _2169 = _2166 * _2162;
    float _2170 = dot(vec3(_761, _762, _763), vec3(cbLight._m0[_2006].xyz));
    float _4335 = isnan(0.0) ? _2170 : (isnan(_2170) ? 0.0 : max(_2170, 0.0));
    float _2173 = isnan(1.0) ? _4335 : (isnan(_4335) ? 1.0 : min(_4335, 1.0));
    float _4346 = isnan(0.0) ? _924 : (isnan(_924) ? 0.0 : max(_924, 0.0));
    float _2174 = isnan(1.0) ? _4346 : (isnan(_4346) ? 1.0 : min(_4346, 1.0));
    float _2175 = dot(vec3(_761, _762, _763), vec3(_2167, _2168, _2169));
    float _4357 = isnan(0.0) ? _2175 : (isnan(_2175) ? 0.0 : max(_2175, 0.0));
    float _2178 = isnan(1.0) ? _4357 : (isnan(_4357) ? 1.0 : min(_4357, 1.0));
    float _2179 = dot(vec3(cbLight._m0[_2006].xyz), vec3(_2167, _2168, _2169));
    float _4368 = isnan(0.0) ? _2179 : (isnan(_2179) ? 0.0 : max(_2179, 0.0));
    float _2183 = _2159 * _2159;
    float _2187 = ((_2178 * _2178) * (_2183 + (-1.0))) + 1.0;
    float _2198 = (exp2(log2(1.0 - (isnan(1.0) ? _4368 : (isnan(_4368) ? 1.0 : min(_4368, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2199 = 1.0 - _2159;
    float _2210 = (0.5 / (((_2174 * ((_2173 * _2199) + _2159)) + 9.9999999392252902907785028219223e-09) + (((_2174 * _2199) + _2159) * _2173))) * _2173;
    float _4379 = isnan(0.0) ? _2210 : (isnan(_2210) ? 0.0 : max(_2210, 0.0));
    float _2212 = (isnan(1.0) ? _4379 : (isnan(_4379) ? 1.0 : min(_4379, 1.0))) * (_2183 / ((_2187 * _2187) * 3.141590118408203125));
    uint _2226 = _2006 + 9u;
    float _2237 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2046].w)) * _764) * 0.949999988079071044921875);
    float _2238 = _2237 * _2237;
    float _2239 = cbLight._m0[_2046].x + _840;
    float _2240 = cbLight._m0[_2046].y + _841;
    float _2241 = cbLight._m0[_2046].z + _842;
    float _2245 = inversesqrt(dot(vec3(_2239, _2240, _2241), vec3(_2239, _2240, _2241)));
    float _2246 = _2245 * _2239;
    float _2247 = _2245 * _2240;
    float _2248 = _2245 * _2241;
    float _2249 = dot(vec3(_761, _762, _763), vec3(cbLight._m0[_2046].xyz));
    float _4390 = isnan(0.0) ? _2249 : (isnan(_2249) ? 0.0 : max(_2249, 0.0));
    float _2252 = isnan(1.0) ? _4390 : (isnan(_4390) ? 1.0 : min(_4390, 1.0));
    float _2253 = dot(vec3(_761, _762, _763), vec3(_2246, _2247, _2248));
    float _4401 = isnan(0.0) ? _2253 : (isnan(_2253) ? 0.0 : max(_2253, 0.0));
    float _2256 = isnan(1.0) ? _4401 : (isnan(_4401) ? 1.0 : min(_4401, 1.0));
    float _2257 = dot(vec3(cbLight._m0[_2046].xyz), vec3(_2246, _2247, _2248));
    float _4412 = isnan(0.0) ? _2257 : (isnan(_2257) ? 0.0 : max(_2257, 0.0));
    float _2261 = _2238 * _2238;
    float _2265 = ((_2256 * _2256) * (_2261 + (-1.0))) + 1.0;
    float _2274 = (exp2(log2(1.0 - (isnan(1.0) ? _4412 : (isnan(_4412) ? 1.0 : min(_4412, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2275 = 1.0 - _2238;
    float _2285 = (0.5 / (((_2174 * ((_2252 * _2275) + _2238)) + 9.9999999392252902907785028219223e-09) + (((_2174 * _2275) + _2238) * _2252))) * _2252;
    float _4423 = isnan(0.0) ? _2285 : (isnan(_2285) ? 0.0 : max(_2285, 0.0));
    float _2287 = (isnan(1.0) ? _4423 : (isnan(_4423) ? 1.0 : min(_4423, 1.0))) * (_2261 / ((_2265 * _2265) * 3.141590118408203125));
    float _2297 = (((_2274 * cbLight._m0[_2226].x) * _2287) * _2029) + ((((cbLight._m0[_2145].x * _1998) * _2198) * _2212) * _2042);
    float _2298 = (((_2274 * cbLight._m0[_2226].y) * _2287) * _2029) + ((((cbLight._m0[_2145].y * _1999) * _2198) * _2212) * _2042);
    float _2299 = (((_2274 * cbLight._m0[_2226].z) * _2287) * _2029) + ((((cbLight._m0[_2145].z * _2000) * _2198) * _2212) * _2042);
    float _2361;
    float _2363;
    float _2365;
    if (_2082)
    {
        _2361 = _2297;
        _2363 = _2298;
        _2365 = _2299;
    }
    else
    {
        uint _2367 = _2006 + 2u;
        uint _2371 = _2006 + 10u;
        float _2385 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2367].w)) * _764) * 0.949999988079071044921875);
        float _2386 = _2385 * _2385;
        float _2387 = cbLight._m0[_2367].x + _840;
        float _2388 = cbLight._m0[_2367].y + _841;
        float _2389 = cbLight._m0[_2367].z + _842;
        float _2393 = inversesqrt(dot(vec3(_2387, _2388, _2389), vec3(_2387, _2388, _2389)));
        float _2394 = _2393 * _2387;
        float _2395 = _2393 * _2388;
        float _2396 = _2393 * _2389;
        float _2397 = dot(vec3(_761, _762, _763), vec3(cbLight._m0[_2367].xyz));
        float _4434 = isnan(0.0) ? _2397 : (isnan(_2397) ? 0.0 : max(_2397, 0.0));
        float _2400 = isnan(1.0) ? _4434 : (isnan(_4434) ? 1.0 : min(_4434, 1.0));
        float _2401 = dot(vec3(_761, _762, _763), vec3(_2394, _2395, _2396));
        float _4445 = isnan(0.0) ? _2401 : (isnan(_2401) ? 0.0 : max(_2401, 0.0));
        float _2404 = isnan(1.0) ? _4445 : (isnan(_4445) ? 1.0 : min(_4445, 1.0));
        float _2405 = dot(vec3(cbLight._m0[_2367].xyz), vec3(_2394, _2395, _2396));
        float _4456 = isnan(0.0) ? _2405 : (isnan(_2405) ? 0.0 : max(_2405, 0.0));
        float _2409 = _2386 * _2386;
        float _2413 = ((_2404 * _2404) * (_2409 + (-1.0))) + 1.0;
        float _2422 = (exp2(log2(1.0 - (isnan(1.0) ? _4456 : (isnan(_4456) ? 1.0 : min(_4456, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2423 = 1.0 - _2386;
        float _2433 = (0.5 / (((_2174 * ((_2400 * _2423) + _2386)) + 9.9999999392252902907785028219223e-09) + (((_2174 * _2423) + _2386) * _2400))) * _2400;
        float _4467 = isnan(0.0) ? _2433 : (isnan(_2433) ? 0.0 : max(_2433, 0.0));
        float _2435 = (isnan(1.0) ? _4467 : (isnan(_4467) ? 1.0 : min(_4467, 1.0))) * (_2409 / ((_2413 * _2413) * 3.141590118408203125));
        float _2436 = isnan(1.0) ? _2021 : (isnan(_2021) ? 1.0 : min(_2021, 1.0));
        _2361 = (((_2422 * cbLight._m0[_2371].x) * _2435) * _2436) + _2297;
        _2363 = (((_2422 * cbLight._m0[_2371].y) * _2435) * _2436) + _2298;
        _2365 = (((_2422 * cbLight._m0[_2371].z) * _2435) * _2436) + _2299;
    }
    float _2471;
    float _2473;
    float _2475;
    if (_2100)
    {
        _2471 = _2361;
        _2473 = _2363;
        _2475 = _2365;
    }
    else
    {
        uint _2482 = _2006 + 3u;
        uint _2486 = _2006 + 11u;
        float _2500 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2482].w)) * _764) * 0.949999988079071044921875);
        float _2501 = _2500 * _2500;
        float _2502 = cbLight._m0[_2482].x + _840;
        float _2503 = cbLight._m0[_2482].y + _841;
        float _2504 = cbLight._m0[_2482].z + _842;
        float _2508 = inversesqrt(dot(vec3(_2502, _2503, _2504), vec3(_2502, _2503, _2504)));
        float _2509 = _2508 * _2502;
        float _2510 = _2508 * _2503;
        float _2511 = _2508 * _2504;
        float _2512 = dot(vec3(_761, _762, _763), vec3(cbLight._m0[_2482].xyz));
        float _4483 = isnan(0.0) ? _2512 : (isnan(_2512) ? 0.0 : max(_2512, 0.0));
        float _2515 = isnan(1.0) ? _4483 : (isnan(_4483) ? 1.0 : min(_4483, 1.0));
        float _2516 = dot(vec3(_761, _762, _763), vec3(_2509, _2510, _2511));
        float _4494 = isnan(0.0) ? _2516 : (isnan(_2516) ? 0.0 : max(_2516, 0.0));
        float _2519 = isnan(1.0) ? _4494 : (isnan(_4494) ? 1.0 : min(_4494, 1.0));
        float _2520 = dot(vec3(cbLight._m0[_2482].xyz), vec3(_2509, _2510, _2511));
        float _4505 = isnan(0.0) ? _2520 : (isnan(_2520) ? 0.0 : max(_2520, 0.0));
        float _2524 = _2501 * _2501;
        float _2528 = ((_2519 * _2519) * (_2524 + (-1.0))) + 1.0;
        float _2537 = (exp2(log2(1.0 - (isnan(1.0) ? _4505 : (isnan(_4505) ? 1.0 : min(_4505, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2538 = 1.0 - _2501;
        float _2548 = (0.5 / (((_2174 * ((_2515 * _2538) + _2501)) + 9.9999999392252902907785028219223e-09) + (((_2174 * _2538) + _2501) * _2515))) * _2515;
        float _4516 = isnan(0.0) ? _2548 : (isnan(_2548) ? 0.0 : max(_2548, 0.0));
        float _2550 = (isnan(1.0) ? _4516 : (isnan(_4516) ? 1.0 : min(_4516, 1.0))) * (_2524 / ((_2528 * _2528) * 3.141590118408203125));
        float _2551 = isnan(1.0) ? _2022 : (isnan(_2022) ? 1.0 : min(_2022, 1.0));
        _2471 = (((_2537 * cbLight._m0[_2486].x) * _2550) * _2551) + _2361;
        _2473 = (((_2537 * cbLight._m0[_2486].y) * _2550) * _2551) + _2363;
        _2475 = (((_2537 * cbLight._m0[_2486].z) * _2550) * _2551) + _2365;
    }
    float _2686;
    float _2688;
    float _2690;
    float _2692;
    float _2694;
    float _2696;
    if (_2004.y == 0u)
    {
        float _2626 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2627 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2626;
        float _2628 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2626;
        float _2629 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2626;
        uvec4 _2641 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2642 = _2641.x;
        uint _2653 = uint((float(_2641.y) * floor(float(uint(cbSceneParam._m0[85u].y * _861) / _2642))) + floor(float(uint(cbSceneParam._m0[85u].x * _860) / _2642)));
        float _2663 = (log2(_2629 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2664 = isnan(0.0) ? _2663 : (isnan(_2663) ? 0.0 : max(_2663, 0.0));
        uint _2667 = uint(isnan(14.0) ? _2664 : (isnan(_2664) ? 14.0 : min(_2664, 14.0)));
        uvec4 _2672 = texelFetch(g_lightClusterGridBuffer, int(((_2667 << 2u) + (_2653 << 6u)) >> 2u));
        uint _2673 = _2672.x;
        uint _2674 = _2641.z;
        float _2774;
        float _2776;
        float _2778;
        float _2780;
        float _2782;
        float _2784;
        if (((((1u << ((_2674 >> 4u) & 15u)) + 4294967295u) & _2673) == 0u) || ((_2674 & 240u) == 0u))
        {
            _2774 = 0.0;
            _2776 = 0.0;
            _2778 = 0.0;
            _2780 = 0.0;
            _2782 = 0.0;
            _2784 = 0.0;
        }
        else
        {
            float _2775;
            float _2777;
            float _2779;
            float _2781;
            float _2783;
            float _2785;
            float _2926 = 0.0;
            float _2927 = 0.0;
            float _2928 = 0.0;
            float _2929 = 0.0;
            float _2930 = 0.0;
            float _2931 = 0.0;
            uint _2932 = 0u;
            uint _2941;
            bool _2942;
            for (;;)
            {
                _2941 = texelFetch(g_lightClassification, int((((_2667 << 5u) + (_2653 << 9u)) + (_2932 << 2u)) >> 2u)).x;
                _2942 = _2941 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2942)
                {
                    frontier_phi_66_pred = _2926;
                    frontier_phi_66_pred_1 = _2931;
                    frontier_phi_66_pred_2 = _2930;
                    frontier_phi_66_pred_3 = _2929;
                    frontier_phi_66_pred_4 = _2928;
                    frontier_phi_66_pred_5 = _2927;
                }
                else
                {
                    float _3071;
                    float _3072;
                    float _3073;
                    float _3074;
                    float _3075;
                    float _3076;
                    uint _3077;
                    _3071 = _2926;
                    _3072 = _2927;
                    _3073 = _2928;
                    _3074 = _2929;
                    _3075 = _2930;
                    _3076 = _2931;
                    _3077 = _2941;
                    float _2998;
                    float _2999;
                    float _3000;
                    float _3001;
                    float _3002;
                    float _3003;
                    for (;;)
                    {
                        uint _3081 = uint(findLSB(_3077)) + (_2932 << 5u);
                        uint _3078 = (_3077 + 4294967295u) & _3077;
                        uint _3083 = _3081 * 48u;
                        vec4 _3097 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3083)).x, texelFetch(g_PointLightRenderingBuffer, int(_3083 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3083 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3083 + 3u)).x));
                        uint _3103 = (_3081 * 48u) + 4u;
                        vec4 _3116 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3103)).x, texelFetch(g_PointLightRenderingBuffer, int(_3103 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3103 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3103 + 3u)).x));
                        uint _3122 = (_3081 * 48u) + 8u;
                        vec3 _3133 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3122)).x, texelFetch(g_PointLightRenderingBuffer, int(_3122 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3122 + 2u)).x));
                        float _3137 = _3097.x - _2627;
                        float _3138 = _3097.y - _2628;
                        float _3139 = _3097.z - _2629;
                        float _3140 = dot(vec3(_3137, _3138, _3139), vec3(_3137, _3138, _3139));
                        float _3143 = inversesqrt(_3140);
                        float _3144 = _3143 * _3137;
                        float _3145 = _3143 * _3138;
                        float _3146 = _3143 * _3139;
                        float _3147 = dot(vec3(_879, _882, _885), vec3(_3144, _3145, _3146));
                        float _3152 = 1.0 - (_3140 * _3097.w);
                        float _4542 = isnan(0.0) ? _3152 : (isnan(_3152) ? 0.0 : max(_3152, 0.0));
                        float _3153 = isnan(1.0) ? _4542 : (isnan(_4542) ? 1.0 : min(_4542, 1.0));
                        float _3154 = sqrt(_3140) * _3116.w;
                        float _3157 = 1.39999997615814208984375 / (_3154 + 1.39999997615814208984375);
                        float _3158 = _3157 * _3157;
                        float _3161 = ((1.0 - _3158) * _3147) + _3158;
                        float _3164 = _3154 * _3154;
                        float _3168 = ((isnan(0.0) ? _3161 : (isnan(_3161) ? 0.0 : max(_3161, 0.0))) * _3153) / ((_3164 * 0.699999988079071044921875) + 1.0);
                        float _3172 = (-0.0) - _2627;
                        float _3173 = (-0.0) - _2628;
                        float _3174 = (-0.0) - _2629;
                        float _3178 = inversesqrt(dot(vec3(_3172, _3173, _3174), vec3(_3172, _3173, _3174)));
                        float _3179 = _3178 * _3172;
                        float _3180 = _3178 * _3173;
                        float _3181 = _3178 * _3174;
                        float _3189 = exp2(log2(1.0 / ((_3164 * 3.5) + 5.0)) * 0.25);
                        float _3190 = 1.0 - _939;
                        float _3197 = sqrt(1.0 - ((1.0 - (_3190 * _3190)) * (1.0 - (_3189 * _3189))));
                        float _3198 = _3197 * _3197;
                        float _3199 = _3198 * _3198;
                        float _3200 = _3179 + _3144;
                        float _3201 = _3180 + _3145;
                        float _3202 = _3181 + _3146;
                        float _3206 = inversesqrt(dot(vec3(_3200, _3201, _3202), vec3(_3200, _3201, _3202)));
                        float _3210 = dot(vec3(_879, _882, _885), vec3(_3179, _3180, _3181));
                        float _4558 = isnan(0.0) ? _3210 : (isnan(_3210) ? 0.0 : max(_3210, 0.0));
                        float _3213 = isnan(1.0) ? _4558 : (isnan(_4558) ? 1.0 : min(_4558, 1.0));
                        float _3214 = dot(vec3(_879, _882, _885), vec3(_3206 * _3200, _3206 * _3201, _3206 * _3202));
                        float _4569 = isnan(0.0) ? _3214 : (isnan(_3214) ? 0.0 : max(_3214, 0.0));
                        float _3217 = isnan(1.0) ? _4569 : (isnan(_4569) ? 1.0 : min(_4569, 1.0));
                        float _3221 = ((_3217 * _3217) * (_3199 + (-1.0))) + 1.0;
                        float _3222 = _3157 * _3198;
                        float _3223 = _3222 * _3222;
                        float _3226 = ((1.0 - _3223) * _3147) + _3223;
                        float _4580 = isnan(0.0) ? _3226 : (isnan(_3226) ? 0.0 : max(_3226, 0.0));
                        float _3227 = isnan(1.0) ? _4580 : (isnan(_4580) ? 1.0 : min(_4580, 1.0));
                        float _3228 = 1.0 - _3198;
                        float _3238 = (0.5 / (((_3227 * ((_3213 * _3228) + _3198)) + 9.9999999392252902907785028219223e-09) + (((_3227 * _3228) + _3198) * _3213))) * _3227;
                        float _4591 = isnan(0.0) ? _3238 : (isnan(_3238) ? 0.0 : max(_3238, 0.0));
                        float _3249 = (((_3199 * 3.1415927410125732421875) * (isnan(1.0) ? _4591 : (isnan(_4591) ? 1.0 : min(_4591, 1.0)))) / ((_3221 * _3221) * ((_3164 * 2.1991131305694580078125) + 3.141590118408203125))) * _3153;
                        _3001 = (_3168 * _3116.x) + _3074;
                        _3002 = (_3168 * _3116.y) + _3075;
                        _3003 = (_3168 * _3116.z) + _3076;
                        _2998 = (_3249 * _3133.x) + _3071;
                        _2999 = (_3249 * _3133.y) + _3072;
                        _3000 = (_3249 * _3133.z) + _3073;
                        if (_3078 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3071 = _2998;
                            _3072 = _2999;
                            _3073 = _3000;
                            _3074 = _3001;
                            _3075 = _3002;
                            _3076 = _3003;
                            _3077 = _3078;
                        }
                    }
                    frontier_phi_66_pred = _2998;
                    frontier_phi_66_pred_1 = _3003;
                    frontier_phi_66_pred_2 = _3002;
                    frontier_phi_66_pred_3 = _3001;
                    frontier_phi_66_pred_4 = _3000;
                    frontier_phi_66_pred_5 = _2999;
                }
                _2775 = frontier_phi_66_pred;
                _2785 = frontier_phi_66_pred_1;
                _2783 = frontier_phi_66_pred_2;
                _2781 = frontier_phi_66_pred_3;
                _2779 = frontier_phi_66_pred_4;
                _2777 = frontier_phi_66_pred_5;
                uint _2933 = _2932 + 1u;
                if (_2933 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2926 = _2775;
                    _2927 = _2777;
                    _2928 = _2779;
                    _2929 = _2781;
                    _2930 = _2783;
                    _2931 = _2785;
                    _2932 = _2933;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2774 = _2775;
            _2776 = _2777;
            _2778 = _2779;
            _2780 = _2781;
            _2782 = _2783;
            _2784 = _2785;
        }
        uvec4 _2788 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2789 = _2788.z;
        uint _2791 = (_2789 >> 8u) & 15u;
        float _2894;
        float _2896;
        float _2898;
        float _2900;
        float _2902;
        float _2904;
        if (((4294967295u << _2791) & _2673) == 0u)
        {
            _2894 = _2774;
            _2896 = _2776;
            _2898 = _2778;
            _2900 = _2780;
            _2902 = _2782;
            _2904 = _2784;
        }
        else
        {
            float _2919 = inversesqrt(dot(vec3(_2627, _2628, _2629), vec3(_2627, _2628, _2629)));
            float _2920 = _2919 * _2627;
            float _2921 = _2919 * _2628;
            float _2922 = _2919 * _2629;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2791 < ((_2789 >> 12u) & 15u))
            {
                float _2895;
                float _2897;
                float _2899;
                float _2901;
                float _2903;
                float _2905;
                float _3054 = _2774;
                float _3055 = _2776;
                float _3056 = _2778;
                float _3057 = _2780;
                float _3058 = _2782;
                float _3059 = _2784;
                uint _3060 = _2791;
                uint _3069;
                bool _3070;
                for (;;)
                {
                    _3069 = texelFetch(g_lightClassification, int((((_2667 << 5u) + (_2653 << 9u)) + (_3060 << 2u)) >> 2u)).x;
                    _3070 = _3069 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_3070)
                    {
                        frontier_phi_77_pred = _3059;
                        frontier_phi_77_pred_1 = _3058;
                        frontier_phi_77_pred_2 = _3057;
                        frontier_phi_77_pred_3 = _3056;
                        frontier_phi_77_pred_4 = _3055;
                        frontier_phi_77_pred_5 = _3054;
                    }
                    else
                    {
                        float _3263;
                        float _3264;
                        float _3265;
                        float _3266;
                        float _3267;
                        float _3268;
                        float _3557;
                        float _3558;
                        float _3559;
                        float _3560;
                        float _3561;
                        float _3562;
                        float _3276 = _3054;
                        float _3277 = _3055;
                        float _3278 = _3056;
                        float _3279 = _3057;
                        float _3280 = _3058;
                        float _3281 = _3059;
                        uint _3282 = _3069;
                        uint _3283;
                        vec4 _3308;
                        float _3309;
                        vec4 _3324;
                        vec3 _3336;
                        vec4 _3351;
                        vec4 _3367;
                        float _3413;
                        bool _3414;
                        for (;;)
                        {
                            uint _3293 = ((_3060 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3282));
                            _3283 = (_3282 + 4294967295u) & _3282;
                            uint _3295 = _3293 * 40u;
                            _3308 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3295)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3295 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3295 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3295 + 3u)).x));
                            _3309 = _3308.w;
                            uint _3311 = (_3293 * 40u) + 4u;
                            _3324 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3311)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3311 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3311 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3311 + 3u)).x));
                            uint _3326 = (_3293 * 40u) + 8u;
                            _3336 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3326)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3326 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3326 + 2u)).x));
                            uint _3338 = (_3293 * 40u) + 16u;
                            _3351 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3338)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3338 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3338 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3338 + 3u)).x));
                            uint _3354 = (_3293 * 40u) + 20u;
                            _3367 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3354)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3354 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3354 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3354 + 3u)).x));
                            uint _3369 = (_3293 * 40u) + 24u;
                            vec4 _3382 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3369)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3369 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3369 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3369 + 3u)).x));
                            uint _3388 = (_3293 * 40u) + 28u;
                            vec4 _3401 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3388)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3388 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3388 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3388 + 3u)).x));
                            _3413 = fma(_2629, _3401.z, fma(_2628, _3401.y, _3401.x * _2627)) + _3401.w;
                            _3414 = !((fma(_2629, _3382.z, fma(_2628, _3382.y, _3382.x * _2627)) + _3382.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3414)
                            {
                                float _3441 = _3308.x - _2627;
                                float _3442 = _3308.y - _2628;
                                float _3443 = _3308.z - _2629;
                                float _3444 = dot(vec3(_3441, _3442, _3443), vec3(_3441, _3442, _3443));
                                float _3447 = inversesqrt(_3444);
                                float _3448 = _3447 * _3441;
                                float _3449 = _3447 * _3442;
                                float _3450 = _3447 * _3443;
                                float _3454 = 1.0 - (_3444 / (_3309 * _3309));
                                float _4602 = isnan(0.0) ? _3454 : (isnan(_3454) ? 0.0 : max(_3454, 0.0));
                                float _3455 = isnan(1.0) ? _4602 : (isnan(_4602) ? 1.0 : min(_4602, 1.0));
                                float _3459 = sqrt(_3444) * _3324.w;
                                float _3461 = 1.39999997615814208984375 / (_3459 + 1.39999997615814208984375);
                                float _3462 = _3461 * _3461;
                                float _3465 = ((1.0 - _3462) * dot(vec3(_3448, _3449, _3450), vec3(_879, _882, _885))) + _3462;
                                float _3468 = _3459 * _3459;
                                float _3472 = (fma(_2629, _3351.z, fma(_2628, _3351.y, _3351.x * _2627)) + _3351.w) / _3413;
                                float _3473 = (fma(_2629, _3367.z, fma(_2628, _3367.y, _3367.x * _2627)) + _3367.w) / _3413;
                                float _3477 = 1.0 - dot(vec2(_3472, _3473), vec2(_3472, _3473));
                                float _4618 = isnan(0.0) ? _3477 : (isnan(_3477) ? 0.0 : max(_3477, 0.0));
                                float _3478 = isnan(1.0) ? _4618 : (isnan(_4618) ? 1.0 : min(_4618, 1.0));
                                float _3479 = _3478 * (((isnan(0.0) ? _3465 : (isnan(_3465) ? 0.0 : max(_3465, 0.0))) * _3455) / ((_3468 * 0.699999988079071044921875) + 1.0));
                                float _3491 = exp2(log2(1.0 / ((_3468 * 3.5) + 5.0)) * 0.25);
                                float _3492 = 1.0 - _939;
                                float _3499 = sqrt(1.0 - ((1.0 - (_3492 * _3492)) * (1.0 - (_3491 * _3491))));
                                float _3500 = _3499 * _3499;
                                float _3501 = _3500 * _3500;
                                float _3502 = _3448 - _2920;
                                float _3503 = _3449 - _2921;
                                float _3504 = _3450 - _2922;
                                float _3508 = inversesqrt(dot(vec3(_3502, _3503, _3504), vec3(_3502, _3503, _3504)));
                                float _3512 = dot(vec3(_879, _882, _885), vec3((-0.0) - _2920, (-0.0) - _2921, (-0.0) - _2922));
                                float _4629 = isnan(0.0) ? _3512 : (isnan(_3512) ? 0.0 : max(_3512, 0.0));
                                float _3515 = isnan(1.0) ? _4629 : (isnan(_4629) ? 1.0 : min(_4629, 1.0));
                                float _3516 = dot(vec3(_879, _882, _885), vec3(_3508 * _3502, _3508 * _3503, _3508 * _3504));
                                float _4640 = isnan(0.0) ? _3516 : (isnan(_3516) ? 0.0 : max(_3516, 0.0));
                                float _3519 = isnan(1.0) ? _4640 : (isnan(_4640) ? 1.0 : min(_4640, 1.0));
                                float _3523 = ((_3519 * _3519) * (_3501 + (-1.0))) + 1.0;
                                float _3524 = _3461 * _3500;
                                float _3525 = _3524 * _3524;
                                float _3531 = ((1.0 - _3525) * dot(vec3(_879, _882, _885), vec3(_3448, _3449, _3450))) + _3525;
                                float _4651 = isnan(0.0) ? _3531 : (isnan(_3531) ? 0.0 : max(_3531, 0.0));
                                float _3532 = isnan(1.0) ? _4651 : (isnan(_4651) ? 1.0 : min(_4651, 1.0));
                                float _3533 = 1.0 - _3500;
                                float _3543 = (0.5 / (((_3532 * ((_3515 * _3533) + _3500)) + 9.9999999392252902907785028219223e-09) + (((_3532 * _3533) + _3500) * _3515))) * _3532;
                                float _4662 = isnan(0.0) ? _3543 : (isnan(_3543) ? 0.0 : max(_3543, 0.0));
                                float _3553 = (_3478 * _3455) * (((_3501 * 3.1415927410125732421875) * (isnan(1.0) ? _4662 : (isnan(_4662) ? 1.0 : min(_4662, 1.0)))) / ((_3523 * _3523) * ((_3468 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3479 * _3324.y;
                                frontier_phi_83_pred_1 = _3479 * _3324.x;
                                frontier_phi_83_pred_2 = _3553 * _3336.z;
                                frontier_phi_83_pred_3 = _3553 * _3336.y;
                                frontier_phi_83_pred_4 = _3553 * _3336.x;
                                frontier_phi_83_pred_5 = _3479 * _3324.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3561 = frontier_phi_83_pred;
                            _3560 = frontier_phi_83_pred_1;
                            _3559 = frontier_phi_83_pred_2;
                            _3558 = frontier_phi_83_pred_3;
                            _3557 = frontier_phi_83_pred_4;
                            _3562 = frontier_phi_83_pred_5;
                            _3266 = _3560 + _3279;
                            _3267 = _3561 + _3280;
                            _3268 = _3562 + _3281;
                            _3263 = _3557 + _3276;
                            _3264 = _3558 + _3277;
                            _3265 = _3559 + _3278;
                            if (_3283 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3276 = _3263;
                                _3277 = _3264;
                                _3278 = _3265;
                                _3279 = _3266;
                                _3280 = _3267;
                                _3281 = _3268;
                                _3282 = _3283;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3268;
                        frontier_phi_77_pred_1 = _3267;
                        frontier_phi_77_pred_2 = _3266;
                        frontier_phi_77_pred_3 = _3265;
                        frontier_phi_77_pred_4 = _3264;
                        frontier_phi_77_pred_5 = _3263;
                    }
                    _2905 = frontier_phi_77_pred;
                    _2903 = frontier_phi_77_pred_1;
                    _2901 = frontier_phi_77_pred_2;
                    _2899 = frontier_phi_77_pred_3;
                    _2897 = frontier_phi_77_pred_4;
                    _2895 = frontier_phi_77_pred_5;
                    uint _3061 = _3060 + 1u;
                    if (_3061 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3054 = _2895;
                        _3055 = _2897;
                        _3056 = _2899;
                        _3057 = _2901;
                        _3058 = _2903;
                        _3059 = _2905;
                        _3060 = _3061;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2899;
                frontier_phi_58_59_ladder_1 = _2905;
                frontier_phi_58_59_ladder_2 = _2903;
                frontier_phi_58_59_ladder_3 = _2901;
                frontier_phi_58_59_ladder_4 = _2897;
                frontier_phi_58_59_ladder_5 = _2895;
            }
            else
            {
                frontier_phi_58_59_ladder = _2778;
                frontier_phi_58_59_ladder_1 = _2784;
                frontier_phi_58_59_ladder_2 = _2782;
                frontier_phi_58_59_ladder_3 = _2780;
                frontier_phi_58_59_ladder_4 = _2776;
                frontier_phi_58_59_ladder_5 = _2774;
            }
            _2894 = frontier_phi_58_59_ladder_5;
            _2896 = frontier_phi_58_59_ladder_4;
            _2898 = frontier_phi_58_59_ladder;
            _2900 = frontier_phi_58_59_ladder_3;
            _2902 = frontier_phi_58_59_ladder_2;
            _2904 = frontier_phi_58_59_ladder_1;
        }
        float _2909 = isnan(1.0) ? _923 : (isnan(_923) ? 1.0 : min(_923, 1.0));
        _2686 = (_2909 * _2900) + _2138;
        _2688 = (_2909 * _2902) + _2140;
        _2690 = (_2909 * _2904) + _2142;
        _2692 = ((_2894 * 0.039999999105930328369140625) * _2909) + _2471;
        _2694 = ((_2896 * 0.039999999105930328369140625) * _2909) + _2473;
        _2696 = ((_2898 * 0.039999999105930328369140625) * _2909) + _2475;
    }
    else
    {
        _2686 = _2138;
        _2688 = _2140;
        _2690 = _2142;
        _2692 = _2471;
        _2694 = _2473;
        _2696 = _2475;
    }
    float _4678 = isnan(0.0) ? _908 : (isnan(_908) ? 0.0 : max(_908, 0.0));
    float _4689 = isnan(0.0) ? _909 : (isnan(_909) ? 0.0 : max(_909, 0.0));
    float _4700 = isnan(0.0) ? _910 : (isnan(_910) ? 0.0 : max(_910, 0.0));
    float _2713 = ((isnan(1.0) ? _4678 : (isnan(_4678) ? 1.0 : min(_4678, 1.0))) * (_2686 + ((isnan(0.0) ? _1680 : (isnan(_1680) ? 0.0 : max(_1680, 0.0))) * _923))) + ((_2692 + ((isnan(0.0) ? _1970 : (isnan(_1970) ? 0.0 : max(_1970, 0.0))) * _1759)) * cbPerFrame._m0[3u].x);
    float _2714 = ((isnan(1.0) ? _4689 : (isnan(_4689) ? 1.0 : min(_4689, 1.0))) * (_2688 + ((isnan(0.0) ? _1683 : (isnan(_1683) ? 0.0 : max(_1683, 0.0))) * _923))) + ((_2694 + ((isnan(0.0) ? _1973 : (isnan(_1973) ? 0.0 : max(_1973, 0.0))) * _1759)) * cbPerFrame._m0[3u].x);
    float _2715 = ((isnan(1.0) ? _4700 : (isnan(_4700) ? 1.0 : min(_4700, 1.0))) * (_2690 + ((isnan(0.0) ? _1686 : (isnan(_1686) ? 0.0 : max(_1686, 0.0))) * _923))) + ((_2696 + ((isnan(0.0) ? _1976 : (isnan(_1976) ? 0.0 : max(_1976, 0.0))) * _1759)) * cbPerFrame._m0[3u].x);
    uint _2716 = _251 + 6u;
    float _2724 = _860 / cbSceneParam._m0[86u].x;
    float _2725 = _861 / cbSceneParam._m0[86u].y;
    vec4 _2739 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2724, _2725, (log2((isnan(cbSceneParam._m0[77u].w) ? _782 : (isnan(_782) ? cbSceneParam._m0[77u].w : min(_782, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2741 = _2739.x;
    float _2742 = _2739.y;
    float _2743 = _2739.z;
    float _2744 = _2739.w;
    float _2836;
    float _2838;
    float _2840;
    float _2842;
    if (_782 > cbSceneParam._m0[78u].w)
    {
        float _2799 = isnan(_782) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _782 : min(cbSceneParam._m0[80u].w, _782));
        float _2800 = _2799 / _782;
        float _2811 = _2800 * _833;
        float _2812 = _834 * _2800;
        float _2813 = (-0.0) - _2812;
        float _2814 = _2800 * _835;
        float _2816 = (cbSceneParam._m0[77u].w * _2813) / _2799;
        float _2817 = _2816 + cbSceneParam._m0[79u].w;
        float _2818 = cbSceneParam._m0[79u].w - _2812;
        float _2824 = sqrt(((_2811 * _2811) + (_2812 * _2812)) + (_2814 * _2814));
        float _2827 = (1.0 - (cbSceneParam._m0[77u].w / _2799)) * _2824;
        float _2832 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2834 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3011;
        if (abs((_2813 - _2816) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3011 = ((((_2817 > 0.0) ? exp2(_2832 * _2817) : (2.0 - exp2(_2834 * _2817))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2827;
        }
        else
        {
            float _2955 = 1.0 / cbSceneParam._m0[80u].x;
            float _2956 = isnan(_2818) ? _2817 : (isnan(_2817) ? _2818 : max(_2817, _2818));
            float _2957 = isnan(_2818) ? _2817 : (isnan(_2817) ? _2818 : min(_2817, _2818));
            float _2966 = isnan(0.0) ? _2956 : (isnan(_2956) ? 0.0 : min(_2956, 0.0));
            float _2967 = isnan(0.0) ? _2957 : (isnan(_2957) ? 0.0 : min(_2957, 0.0));
            _3011 = ((abs(_2824 / _2813) * cbSceneParam._m0[80u].y) * ((((_2966 - _2967) * 2.0) - ((exp2(_2832 * (isnan(0.0) ? _2956 : (isnan(_2956) ? 0.0 : max(_2956, 0.0)))) - exp2(_2832 * (isnan(0.0) ? _2957 : (isnan(_2957) ? 0.0 : max(_2957, 0.0))))) * _2955)) - ((exp2(_2834 * _2966) - exp2(_2834 * _2967)) * _2955))) + (_2827 * cbSceneParam._m0[80u].z);
        }
        vec4 _3013 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2724, _2725, 1.0), 0.0);
        float _3022 = exp2((_3011 * (-1.44269502162933349609375)) * (1.0 - _3013.w));
        float _3023 = log2(_3022);
        float _3039 = log2(_2744);
        _2836 = (exp2(_3039 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3023 * cbSceneParam._m0[78u].x)) * _3013.x) / cbSceneParam._m0[78u].x)) + _2741;
        _2838 = (exp2(_3039 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3023 * cbSceneParam._m0[78u].y)) * _3013.y) / cbSceneParam._m0[78u].y)) + _2742;
        _2840 = (exp2(_3039 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3023 * cbSceneParam._m0[78u].z)) * _3013.z) / cbSceneParam._m0[78u].z)) + _2743;
        _2842 = _3022 * _2744;
    }
    else
    {
        _2836 = _2741;
        _2838 = _2742;
        _2840 = _2743;
        _2842 = _2744;
    }
    bool _3049;
    vec4 _2852;
    vec4 _2874;
    float _2876;
    float _2880;
    float _2881;
    float _2882;
    float _2883;
    bool _2893;
    for (;;)
    {
        _2852 = cbMatDynParam._m0[0u];
        float _2854 = roundEven(_2852.y);
        bool _2855 = _2854 == 3.0;
        float _2856 = log2(_2842);
        float _2863 = exp2(_2856 * cbSceneParam._m0[78u].x) * _2713;
        float _2864 = exp2(_2856 * cbSceneParam._m0[78u].y) * _2714;
        float _2865 = exp2(_2856 * cbSceneParam._m0[78u].z) * _2715;
        float _2872 = _849 + (-0.5);
        _2874 = cbMtdParam._m0[1u];
        _2876 = _2874.y * _2872;
        float _2879 = (_2854 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2880 = _2879 * (_2855 ? _2863 : (_2863 + (cbSceneParam._m0[72u].w * _2836)));
        _2881 = _2879 * (_2855 ? _2864 : (_2864 + (cbSceneParam._m0[72u].w * _2838)));
        _2882 = _2879 * (_2855 ? _2865 : (_2865 + (cbSceneParam._m0[72u].w * _2840)));
        _2883 = _2872 * 0.999000012874603271484375;
        _2893 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2893)
        {
            if ((cbInstanceData._m0[_251 + 7u].x + _2883) < 0.5)
            {
                _3049 = true;
                break;
            }
        }
        uint _2990 = _898 + uint(_2852.w);
        if ((cbInstanceData._m0[_2990].w < 1.0) && ((cbInstanceData._m0[_2990].w + _2883) < 0.5))
        {
            _3049 = true;
            break;
        }
        if ((_2876 + 1.0) < _2874.x)
        {
            _3049 = true;
            break;
        }
        _3049 = false;
        break;
    }
    float _3254;
    if (_3049)
    {
        discard_state = true;
        _3254 = 0.0;
    }
    else
    {
        _3254 = cbInstanceData._m0[_2716].w;
    }
    SV_Target.x = _2880;
    SV_Target.y = _2881;
    SV_Target.z = _2882;
    SV_Target.w = _3254;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2716].w;
    discard_exit();
}


