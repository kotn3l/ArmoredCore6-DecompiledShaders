#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_0;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_10;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_6;
layout(set = 0, binding = 23) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_8;
layout(set = 0, binding = 24) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_9;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1398;
float _3779;
float _3780;
float _3781;
float _3782;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _222 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _223 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _224 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _230 = inversesqrt(dot(vec3(_222, _223, _224), vec3(_222, _223, _224)));
    float _237 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _244 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _250 = uint(roundEven(NORMAL.w)) * 13u;
    uint _256 = _250 + 1u;
    uint _260 = _250 + 2u;
    float _269 = sqrt(((cbInstanceData._m0[_256].x * cbInstanceData._m0[_256].x) + (cbInstanceData._m0[_250].x * cbInstanceData._m0[_250].x)) + (cbInstanceData._m0[_260].x * cbInstanceData._m0[_260].x));
    float _270 = _269 * TEXCOORD.z;
    float _271 = _269 * TEXCOORD.w;
    vec4 _290 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _314 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _319 = _314.x * cbMtdParam._m0[11u].x;
    float _320 = _314.y * cbMtdParam._m0[11u].y;
    float _321 = _314.z * cbMtdParam._m0[11u].z;
    vec4 _340 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _270) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _271) + cbTextureTilingScale._m0[5u].w));
    vec4 _360 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _400 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _402 = _400.x;
    float _414 = dot(vec4(_402, _400.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _431 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _360.x) * 2.0) - ((((_402 - _414) * cbMtdParam._m0[24u].z) + _414) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3791 = isnan(0.0) ? _431 : (isnan(_431) ? 0.0 : max(_431, 0.0));
    float _432 = isnan(1.0) ? _3791 : (isnan(_3791) ? 1.0 : min(_3791, 1.0));
    float _439 = (_432 * ((_340.x * cbMtdParam._m0[12u].x) - _319)) + _319;
    float _440 = (_432 * ((_340.y * cbMtdParam._m0[12u].y) - _320)) + _320;
    float _441 = (_432 * ((_340.z * cbMtdParam._m0[12u].z) - _321)) + _321;
    vec4 _458 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _270) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _271) + cbTextureTilingScale._m0[3u].w));
    vec4 _478 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _480 = _478.x;
    float _490 = dot(vec4(_480, _478.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _504 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _360.y) * 2.0) - ((((_480 - _490) * cbMtdParam._m0[24u].z) + _490) * cbMtdParam._m0[20u].w))) + 1.0;
    float _3802 = isnan(0.0) ? _504 : (isnan(_504) ? 0.0 : max(_504, 0.0));
    float _505 = isnan(1.0) ? _3802 : (isnan(_3802) ? 1.0 : min(_3802, 1.0));
    float _512 = (_505 * ((_458.x * cbMtdParam._m0[13u].x) - _439)) + _439;
    float _513 = (_505 * ((_458.y * cbMtdParam._m0[13u].y) - _440)) + _440;
    float _514 = (_505 * ((_458.z * cbMtdParam._m0[13u].z) - _441)) + _441;
    vec4 _532 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_9, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[24u].x * _270) + cbTextureTilingScale._m0[24u].z, (cbTextureTilingScale._m0[24u].y * _271) + cbTextureTilingScale._m0[24u].w));
    vec4 _549 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[25u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _551 = _549.x;
    float _561 = dot(vec4(_551, _549.yzw), vec4(cbMtdParam._m0[30u].w, cbMtdParam._m0[31u].xy, 0.0));
    float _573 = ((cbMtdParam._m0[25u].x * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.z) - _360.z) * 2.0) - ((((_551 - _561) * cbMtdParam._m0[24u].z) + _561) * cbMtdParam._m0[20u].z))) + 1.0;
    float _3813 = isnan(0.0) ? _573 : (isnan(_573) ? 0.0 : max(_573, 0.0));
    float _574 = isnan(1.0) ? _3813 : (isnan(_3813) ? 1.0 : min(_3813, 1.0));
    float _587 = ((cbMtdParam._m0[9u].x * 4.55000019073486328125) * _290.x) * ((_574 * ((_532.x * cbMtdParam._m0[14u].x) - _512)) + _512);
    float _590 = ((cbMtdParam._m0[9u].y * 4.55000019073486328125) * _290.y) * ((_574 * ((_532.y * cbMtdParam._m0[14u].y) - _513)) + _513);
    float _593 = ((cbMtdParam._m0[9u].z * 4.55000019073486328125) * _290.z) * ((_574 * ((_532.z * cbMtdParam._m0[14u].z) - _514)) + _514);
    vec4 _611 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _270) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _271) + cbTextureTilingScale._m0[4u].w));
    vec4 _628 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _630 = _628.x;
    float _631 = _628.y;
    float _632 = _628.z;
    float _639 = ((_611.x - _630) * _432) + _630;
    float _640 = ((_611.y - _631) * _432) + _631;
    float _641 = ((_611.z - _632) * _432) + _632;
    vec4 _653 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _270) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _271) + cbTextureTilingScale._m0[2u].w));
    float _664 = ((_653.x - _639) * _505) + _639;
    float _665 = ((_653.y - _640) * _505) + _640;
    float _666 = ((_653.z - _641) * _505) + _641;
    vec4 _678 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[23u].x * _270) + cbTextureTilingScale._m0[23u].z, (cbTextureTilingScale._m0[23u].y * _271) + cbTextureTilingScale._m0[23u].w));
    float _691 = ((_678.z - _666) * _574) + _666;
    float _694 = ((((_678.x - _664) * _574) + _664) * 2.0) + (-1.0);
    float _696 = ((((_678.y - _665) * _574) + _665) * 2.0) + (-1.0);
    float _697 = dot(vec2(_694, _696), vec2(_694, _696));
    float _3824 = isnan(0.0) ? _697 : (isnan(_697) ? 0.0 : max(_697, 0.0));
    float _702 = sqrt(1.0 - (isnan(1.0) ? _3824 : (isnan(_3824) ? 1.0 : min(_3824, 1.0))));
    vec4 _716 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _741 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _270) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _271) + cbTextureTilingScale._m0[11u].w));
    float _743 = _741.x;
    float _744 = 1.0 - _743;
    float _757 = (TEXCOORD_8.w - ((cbMtdParam._m0[21u].z * (1.0 - TEXCOORD_8.w)) * ((((_743 - _744) * cbMtdParam._m0[24u].w) + _744) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3835 = isnan(0.0) ? _757 : (isnan(_757) ? 0.0 : max(_757, 0.0));
    float _758 = isnan(1.0) ? _3835 : (isnan(_3835) ? 1.0 : min(_3835, 1.0));
    float _765 = (_758 * (cbMtdParam._m0[17u].x - _587)) + _587;
    float _766 = (_758 * (cbMtdParam._m0[17u].y - _590)) + _590;
    float _767 = (_758 * (cbMtdParam._m0[17u].z - _593)) + _593;
    float _771 = (cbMtdParam._m0[19u].w * (_716.z - _691)) + _691;
    vec4 _784 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _270) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _271) + cbTextureTilingScale._m0[15u].w));
    float _791 = (_784.x * 2.0) + (-1.0);
    float _792 = (_784.y * 2.0) + (-1.0);
    float _793 = dot(vec2(_791, _792), vec2(_791, _792));
    float _3846 = isnan(0.0) ? _793 : (isnan(_793) ? 0.0 : max(_793, 0.0));
    float _801 = (_758 * (_784.z - _771)) + _771;
    float _804 = (((_716.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _694;
    float _805 = (((_716.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _696;
    float _817 = (((_791 - _804) + (cbMtdParam._m0[21u].x * _804)) * _758) + _804;
    float _818 = (((_792 - _805) + (cbMtdParam._m0[21u].x * _805)) * _758) + _805;
    float _819 = (_758 * (sqrt(1.0 - (isnan(1.0) ? _3846 : (isnan(_3846) ? 1.0 : min(_3846, 1.0)))) - _702)) + _702;
    float _823 = cbMtdParam._m0[22u].x + _716.w;
    float _826 = fma(_819, _237 * NORMAL.x, fma(_818, _244 * TANGENT.x, (_230 * _222) * _817));
    float _829 = fma(_819, _237 * NORMAL.y, fma(_818, _244 * TANGENT.y, (_230 * _223) * _817));
    float _832 = fma(_819, _237 * NORMAL.z, fma(_818, _244 * TANGENT.z, (_230 * _224) * _817));
    float _836 = inversesqrt(dot(vec3(_826, _829, _832), vec3(_826, _829, _832)));
    float _837 = _836 * _826;
    float _838 = _836 * _829;
    float _839 = _836 * _832;
    float _3857 = isnan(0.0) ? _801 : (isnan(_801) ? 0.0 : max(_801, 0.0));
    float _840 = isnan(1.0) ? _3857 : (isnan(_3857) ? 1.0 : min(_3857, 1.0));
    float _3868 = isnan(0.0) ? _823 : (isnan(_823) ? 0.0 : max(_823, 0.0));
    float _3879 = isnan(0.0) ? _765 : (isnan(_765) ? 0.0 : max(_765, 0.0));
    float _3890 = isnan(0.0) ? _766 : (isnan(_766) ? 0.0 : max(_766, 0.0));
    float _3901 = isnan(0.0) ? _767 : (isnan(_767) ? 0.0 : max(_767, 0.0));
    float _858 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _899 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _909 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _899);
    float _910 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _899);
    float _911 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _899);
    float _915 = inversesqrt(dot(vec3(_909, _910, _911), vec3(_909, _910, _911)));
    float _916 = _909 * _915;
    float _917 = _910 * _915;
    float _918 = _911 * _915;
    vec4 _923 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _925 = _923.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1079 = sqrt(((_909 * _909) + (_910 * _910)) + (_911 * _911));
        float _1085 = (cbMatDynParam._m0[5u].x * _1079) + cbMatDynParam._m0[5u].y;
        float _3912 = isnan(0.0) ? _1085 : (isnan(_1085) ? 0.0 : max(_1085, 0.0));
        float _1086 = isnan(1.0) ? _3912 : (isnan(_3912) ? 1.0 : min(_3912, 1.0));
        float _1090 = (cbMatDynParam._m0[5u].z * _1079) + cbMatDynParam._m0[5u].w;
        float _3923 = isnan(0.0) ? _1090 : (isnan(_1090) ? 0.0 : max(_1090, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3923 : (isnan(_3923) ? 1.0 : min(_3923, 1.0))) - _1086)) + _1086) < ((_925 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _936 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _937 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _955 = fma(_839, cbSceneParam._m0[5u].z, fma(_838, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _837));
    float _958 = fma(_839, cbSceneParam._m0[6u].z, fma(_838, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _837));
    float _961 = fma(_839, cbSceneParam._m0[7u].z, fma(_838, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _837));
    uint _974 = _250 + 9u;
    uint _975 = _974 + uint(cbMatDynParam._m0[0u].w);
    float _981 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3879 : (isnan(_3879) ? 1.0 : min(_3879, 1.0)))) * cbInstanceData._m0[_975].x;
    float _982 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3890 : (isnan(_3890) ? 1.0 : min(_3890, 1.0)))) * cbInstanceData._m0[_975].y;
    float _983 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3901 : (isnan(_3901) ? 1.0 : min(_3901, 1.0)))) * cbInstanceData._m0[_975].z;
    float _3934 = isnan(0.0) ? _981 : (isnan(_981) ? 0.0 : max(_981, 0.0));
    float _984 = isnan(1.0) ? _3934 : (isnan(_3934) ? 1.0 : min(_3934, 1.0));
    float _3945 = isnan(0.0) ? _982 : (isnan(_982) ? 0.0 : max(_982, 0.0));
    float _985 = isnan(1.0) ? _3945 : (isnan(_3945) ? 1.0 : min(_3945, 1.0));
    float _3956 = isnan(0.0) ? _983 : (isnan(_983) ? 0.0 : max(_983, 0.0));
    float _986 = isnan(1.0) ? _3956 : (isnan(_3956) ? 1.0 : min(_3956, 1.0));
    vec4 _995 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _936, cbSceneParam._m0[86u].y * _937));
    float _999 = ((isnan(1.0) ? _3868 : (isnan(_3868) ? 1.0 : min(_3868, 1.0))) * TEXCOORD_5.w) * _995.x;
    float _1000 = dot(vec3(_837, _838, _839), vec3(_916, _917, _918));
    float _1003 = _1000 * 2.0;
    float _1007 = (_1003 * _837) - _916;
    float _1008 = (_1003 * _838) - _917;
    float _1009 = (_1003 * _839) - _918;
    float _1013 = abs(dot(vec3(_916, _917, _918), vec3(_837, _838, _839)));
    float _3967 = isnan(0.0) ? _1013 : (isnan(_1013) ? 0.0 : max(_1013, 0.0));
    float _1015 = sqrt(_840);
    float _1028 = exp2((_1015 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3967 : (isnan(_3967) ? 1.0 : min(_3967, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1015 * 3.0));
    float _1060 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1064 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1068 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1397;
    float _1399;
    float _1400;
    float _1401;
    float _1402;
    float _1403;
    float _1404;
    float _1405;
    float _1406;
    float _1407;
    float _1408;
    float _1409;
    float _1410;
    float _1411;
    float _1412;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1122 = fma(_1068, cbModelParam._m0[26u].z, fma(_1064, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1060));
        float _1126 = fma(_1068, cbModelParam._m0[27u].z, fma(_1064, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1060));
        float _1130 = fma(_1068, cbModelParam._m0[28u].z, fma(_1064, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1060));
        float _1155 = _1060 + _837;
        float _1156 = _1064 + _838;
        float _1157 = _1068 + _839;
        float _1167 = fma(_1157, cbModelParam._m0[26u].z, fma(_1156, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1155)) - _1122;
        float _1168 = fma(_1157, cbModelParam._m0[27u].z, fma(_1156, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1155)) - _1126;
        float _1169 = fma(_1157, cbModelParam._m0[28u].z, fma(_1156, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1155)) - _1130;
        float _1173 = inversesqrt(dot(vec3(_1167, _1168, _1169), vec3(_1167, _1168, _1169)));
        float _1186 = ((_1173 * _1167) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1122 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1187 = ((_1173 * _1168) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1126 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1188 = ((_1173 * _1169) / cbModelParam._m0[34u].z) + ((((((_1130 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1191 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1186, _1187, _1188), 0.0);
        vec4 _1198 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1186, _1187, _1188), 0.0);
        vec4 _1205 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1186, _1187, _1188), 0.0);
        vec4 _1212 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1186, _1187, _1188), 0.0);
        float _1225 = exp2((_1191.w + (-0.5)) * 20.0) * 2.0;
        float _1226 = _1225 * (_1191.x + (-0.5));
        float _1227 = _1225 * (_1191.y + (-0.5));
        float _1228 = _1225 * (_1191.z + (-0.5));
        float _1235 = exp2((_1198.w + (-0.5)) * 20.0) * 2.0;
        float _1236 = _1235 * (_1198.x + (-0.5));
        float _1237 = _1235 * (_1198.y + (-0.5));
        float _1238 = _1235 * (_1198.z + (-0.5));
        float _1245 = exp2((_1205.w + (-0.5)) * 20.0) * 2.0;
        float _1246 = _1245 * (_1205.x + (-0.5));
        float _1247 = _1245 * (_1205.y + (-0.5));
        float _1248 = _1245 * (_1205.z + (-0.5));
        float _1255 = exp2((_1212.w + (-0.5)) * 20.0) * 2.0;
        float _1256 = _1255 * (_1212.x + (-0.5));
        float _1257 = _1255 * (_1212.y + (-0.5));
        float _1258 = _1255 * (_1212.z + (-0.5));
        float _1259 = isnan(0.0) ? _1256 : (isnan(_1256) ? 0.0 : max(_1256, 0.0));
        float _1260 = isnan(0.0) ? _1257 : (isnan(_1257) ? 0.0 : max(_1257, 0.0));
        float _1261 = isnan(0.0) ? _1258 : (isnan(_1258) ? 0.0 : max(_1258, 0.0));
        float _1262 = _1226 * 0.5;
        float _1263 = _1236 * 0.5;
        float _1264 = _1246 * 0.5;
        float _1265 = dot(vec3(_1262, _1263, _1264), vec3(_1262, _1263, _1264));
        float _1270 = (_1265 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1265);
        float _1279 = (dot(vec3(_837, _838, _839), vec3(_1270 * _1262, _1270 * _1263, _1270 * _1264)) + 1.0) * 0.5;
        float _3993 = isnan(0.0) ? _1279 : (isnan(_1279) ? 0.0 : max(_1279, 0.0));
        float _1289 = sqrt(((_1263 * _1263) + (_1262 * _1262)) + (_1264 * _1264)) / (_1259 + 9.9999997473787516355514526367188e-06);
        float _4004 = isnan(0.0) ? _1289 : (isnan(_1289) ? 0.0 : max(_1289, 0.0));
        float _1290 = isnan(1.0) ? _4004 : (isnan(_4004) ? 1.0 : min(_4004, 1.0));
        float _1291 = _1290 * 2.0;
        float _1295 = (1.0 - _1290) / (_1290 + 1.0);
        float _4015 = isnan(0.0) ? _1295 : (isnan(_1295) ? 0.0 : max(_1295, 0.0));
        float _1296 = isnan(1.0) ? _4015 : (isnan(_4015) ? 1.0 : min(_4015, 1.0));
        float _1305 = ((((1.0 - _1296) * (_1291 + 2.0)) * exp2(log2(isnan(1.0) ? _3993 : (isnan(_3993) ? 1.0 : min(_3993, 1.0))) * (_1291 + 1.0))) + _1296) * _1259;
        float _1306 = _1227 * 0.5;
        float _1307 = _1237 * 0.5;
        float _1308 = _1247 * 0.5;
        float _1309 = dot(vec3(_1306, _1307, _1308), vec3(_1306, _1307, _1308));
        float _1314 = (_1309 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1309);
        float _1322 = (dot(vec3(_837, _838, _839), vec3(_1314 * _1306, _1314 * _1307, _1314 * _1308)) + 1.0) * 0.5;
        float _4026 = isnan(0.0) ? _1322 : (isnan(_1322) ? 0.0 : max(_1322, 0.0));
        float _1331 = sqrt(((_1307 * _1307) + (_1306 * _1306)) + (_1308 * _1308)) / (_1260 + 9.9999997473787516355514526367188e-06);
        float _4037 = isnan(0.0) ? _1331 : (isnan(_1331) ? 0.0 : max(_1331, 0.0));
        float _1332 = isnan(1.0) ? _4037 : (isnan(_4037) ? 1.0 : min(_4037, 1.0));
        float _1333 = _1332 * 2.0;
        float _1337 = (1.0 - _1332) / (_1332 + 1.0);
        float _4048 = isnan(0.0) ? _1337 : (isnan(_1337) ? 0.0 : max(_1337, 0.0));
        float _1338 = isnan(1.0) ? _4048 : (isnan(_4048) ? 1.0 : min(_4048, 1.0));
        float _1347 = ((((1.0 - _1338) * (_1333 + 2.0)) * exp2(log2(isnan(1.0) ? _4026 : (isnan(_4026) ? 1.0 : min(_4026, 1.0))) * (_1333 + 1.0))) + _1338) * _1260;
        float _1348 = _1228 * 0.5;
        float _1349 = _1238 * 0.5;
        float _1350 = _1248 * 0.5;
        float _1351 = dot(vec3(_1348, _1349, _1350), vec3(_1348, _1349, _1350));
        float _1356 = (_1351 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1351);
        float _1364 = (dot(vec3(_837, _838, _839), vec3(_1356 * _1348, _1356 * _1349, _1356 * _1350)) + 1.0) * 0.5;
        float _4059 = isnan(0.0) ? _1364 : (isnan(_1364) ? 0.0 : max(_1364, 0.0));
        float _1373 = sqrt(((_1349 * _1349) + (_1348 * _1348)) + (_1350 * _1350)) / (_1261 + 9.9999997473787516355514526367188e-06);
        float _4070 = isnan(0.0) ? _1373 : (isnan(_1373) ? 0.0 : max(_1373, 0.0));
        float _1374 = isnan(1.0) ? _4070 : (isnan(_4070) ? 1.0 : min(_4070, 1.0));
        float _1375 = _1374 * 2.0;
        float _1379 = (1.0 - _1374) / (_1374 + 1.0);
        float _4081 = isnan(0.0) ? _1379 : (isnan(_1379) ? 0.0 : max(_1379, 0.0));
        float _1380 = isnan(1.0) ? _4081 : (isnan(_4081) ? 1.0 : min(_4081, 1.0));
        float _1389 = ((((1.0 - _1380) * (_1375 + 2.0)) * exp2(log2(isnan(1.0) ? _4059 : (isnan(_4059) ? 1.0 : min(_4059, 1.0))) * (_1375 + 1.0))) + _1380) * _1261;
        _1397 = _1228;
        _1399 = _1227;
        _1400 = _1226;
        _1401 = _1238;
        _1402 = _1237;
        _1403 = _1236;
        _1404 = _1248;
        _1405 = _1247;
        _1406 = _1246;
        _1407 = _1261;
        _1408 = _1260;
        _1409 = _1259;
        _1410 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1305 : (isnan(_1305) ? 0.0 : max(_1305, 0.0)));
        _1411 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1347 : (isnan(_1347) ? 0.0 : max(_1347, 0.0)));
        _1412 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1389 : (isnan(_1389) ? 0.0 : max(_1389, 0.0)));
    }
    else
    {
        _1397 = _1398;
        _1399 = _1398;
        _1400 = _1398;
        _1401 = _1398;
        _1402 = _1398;
        _1403 = _1398;
        _1404 = _1398;
        _1405 = _1398;
        _1406 = _1398;
        _1407 = _1398;
        _1408 = _1398;
        _1409 = _1398;
        _1410 = 0.0;
        _1411 = 0.0;
        _1412 = 0.0;
    }
    float _1707;
    float _1708;
    float _1709;
    float _1710;
    float _1711;
    float _1712;
    float _1713;
    float _1714;
    float _1715;
    float _1716;
    float _1717;
    float _1718;
    float _1719;
    float _1720;
    float _1721;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1438 = fma(_1068, cbModelParam._m0[30u].z, fma(_1064, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1060));
        float _1442 = fma(_1068, cbModelParam._m0[31u].z, fma(_1064, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1060));
        float _1446 = fma(_1068, cbModelParam._m0[32u].z, fma(_1064, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1060));
        float _1469 = _1060 + _837;
        float _1470 = _1064 + _838;
        float _1471 = _1068 + _839;
        float _1481 = fma(_1471, cbModelParam._m0[30u].z, fma(_1470, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1469)) - _1438;
        float _1482 = fma(_1471, cbModelParam._m0[31u].z, fma(_1470, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1469)) - _1442;
        float _1483 = fma(_1471, cbModelParam._m0[32u].z, fma(_1470, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1469)) - _1446;
        float _1487 = inversesqrt(dot(vec3(_1481, _1482, _1483), vec3(_1481, _1482, _1483)));
        float _1500 = ((_1487 * _1481) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1438 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1501 = ((_1487 * _1482) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1442 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1502 = ((_1487 * _1483) / cbModelParam._m0[35u].z) + ((((((_1446 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1504 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1500, _1501, _1502), 0.0);
        vec4 _1511 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1500, _1501, _1502), 0.0);
        vec4 _1518 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1500, _1501, _1502), 0.0);
        vec4 _1525 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1500, _1501, _1502), 0.0);
        float _1537 = exp2((_1504.w + (-0.5)) * 20.0) * 2.0;
        float _1538 = _1537 * (_1504.x + (-0.5));
        float _1539 = _1537 * (_1504.y + (-0.5));
        float _1540 = _1537 * (_1504.z + (-0.5));
        float _1547 = exp2((_1511.w + (-0.5)) * 20.0) * 2.0;
        float _1548 = _1547 * (_1511.x + (-0.5));
        float _1549 = _1547 * (_1511.y + (-0.5));
        float _1550 = _1547 * (_1511.z + (-0.5));
        float _1557 = exp2((_1518.w + (-0.5)) * 20.0) * 2.0;
        float _1558 = _1557 * (_1518.x + (-0.5));
        float _1559 = _1557 * (_1518.y + (-0.5));
        float _1560 = _1557 * (_1518.z + (-0.5));
        float _1567 = exp2((_1525.w + (-0.5)) * 20.0) * 2.0;
        float _1568 = _1567 * (_1525.x + (-0.5));
        float _1569 = _1567 * (_1525.y + (-0.5));
        float _1570 = _1567 * (_1525.z + (-0.5));
        float _1571 = isnan(0.0) ? _1568 : (isnan(_1568) ? 0.0 : max(_1568, 0.0));
        float _1572 = isnan(0.0) ? _1569 : (isnan(_1569) ? 0.0 : max(_1569, 0.0));
        float _1573 = isnan(0.0) ? _1570 : (isnan(_1570) ? 0.0 : max(_1570, 0.0));
        float _1574 = _1538 * 0.5;
        float _1575 = _1548 * 0.5;
        float _1576 = _1558 * 0.5;
        float _1577 = dot(vec3(_1574, _1575, _1576), vec3(_1574, _1575, _1576));
        float _1582 = (_1577 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1577);
        float _1590 = (dot(vec3(_837, _838, _839), vec3(_1582 * _1574, _1582 * _1575, _1582 * _1576)) + 1.0) * 0.5;
        float _4122 = isnan(0.0) ? _1590 : (isnan(_1590) ? 0.0 : max(_1590, 0.0));
        float _1599 = sqrt(((_1575 * _1575) + (_1574 * _1574)) + (_1576 * _1576)) / (_1571 + 9.9999997473787516355514526367188e-06);
        float _4133 = isnan(0.0) ? _1599 : (isnan(_1599) ? 0.0 : max(_1599, 0.0));
        float _1600 = isnan(1.0) ? _4133 : (isnan(_4133) ? 1.0 : min(_4133, 1.0));
        float _1601 = _1600 * 2.0;
        float _1605 = (1.0 - _1600) / (_1600 + 1.0);
        float _4144 = isnan(0.0) ? _1605 : (isnan(_1605) ? 0.0 : max(_1605, 0.0));
        float _1606 = isnan(1.0) ? _4144 : (isnan(_4144) ? 1.0 : min(_4144, 1.0));
        float _1615 = ((((1.0 - _1606) * (_1601 + 2.0)) * exp2(log2(isnan(1.0) ? _4122 : (isnan(_4122) ? 1.0 : min(_4122, 1.0))) * (_1601 + 1.0))) + _1606) * _1571;
        float _1616 = _1539 * 0.5;
        float _1617 = _1549 * 0.5;
        float _1618 = _1559 * 0.5;
        float _1619 = dot(vec3(_1616, _1617, _1618), vec3(_1616, _1617, _1618));
        float _1624 = (_1619 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1619);
        float _1632 = (dot(vec3(_837, _838, _839), vec3(_1624 * _1616, _1624 * _1617, _1624 * _1618)) + 1.0) * 0.5;
        float _4155 = isnan(0.0) ? _1632 : (isnan(_1632) ? 0.0 : max(_1632, 0.0));
        float _1641 = sqrt(((_1617 * _1617) + (_1616 * _1616)) + (_1618 * _1618)) / (_1572 + 9.9999997473787516355514526367188e-06);
        float _4166 = isnan(0.0) ? _1641 : (isnan(_1641) ? 0.0 : max(_1641, 0.0));
        float _1642 = isnan(1.0) ? _4166 : (isnan(_4166) ? 1.0 : min(_4166, 1.0));
        float _1643 = _1642 * 2.0;
        float _1647 = (1.0 - _1642) / (_1642 + 1.0);
        float _4177 = isnan(0.0) ? _1647 : (isnan(_1647) ? 0.0 : max(_1647, 0.0));
        float _1648 = isnan(1.0) ? _4177 : (isnan(_4177) ? 1.0 : min(_4177, 1.0));
        float _1657 = ((((1.0 - _1648) * (_1643 + 2.0)) * exp2(log2(isnan(1.0) ? _4155 : (isnan(_4155) ? 1.0 : min(_4155, 1.0))) * (_1643 + 1.0))) + _1648) * _1572;
        float _1658 = _1540 * 0.5;
        float _1659 = _1550 * 0.5;
        float _1660 = _1560 * 0.5;
        float _1661 = dot(vec3(_1658, _1659, _1660), vec3(_1658, _1659, _1660));
        float _1666 = (_1661 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1661);
        float _1674 = (dot(vec3(_837, _838, _839), vec3(_1666 * _1658, _1666 * _1659, _1666 * _1660)) + 1.0) * 0.5;
        float _4188 = isnan(0.0) ? _1674 : (isnan(_1674) ? 0.0 : max(_1674, 0.0));
        float _1683 = sqrt(((_1659 * _1659) + (_1658 * _1658)) + (_1660 * _1660)) / (_1573 + 9.9999997473787516355514526367188e-06);
        float _4199 = isnan(0.0) ? _1683 : (isnan(_1683) ? 0.0 : max(_1683, 0.0));
        float _1684 = isnan(1.0) ? _4199 : (isnan(_4199) ? 1.0 : min(_4199, 1.0));
        float _1685 = _1684 * 2.0;
        float _1689 = (1.0 - _1684) / (_1684 + 1.0);
        float _4210 = isnan(0.0) ? _1689 : (isnan(_1689) ? 0.0 : max(_1689, 0.0));
        float _1690 = isnan(1.0) ? _4210 : (isnan(_4210) ? 1.0 : min(_4210, 1.0));
        float _1699 = ((((1.0 - _1690) * (_1685 + 2.0)) * exp2(log2(isnan(1.0) ? _4188 : (isnan(_4188) ? 1.0 : min(_4188, 1.0))) * (_1685 + 1.0))) + _1690) * _1573;
        _1707 = _1540;
        _1708 = _1539;
        _1709 = _1538;
        _1710 = _1550;
        _1711 = _1549;
        _1712 = _1548;
        _1713 = _1560;
        _1714 = _1559;
        _1715 = _1558;
        _1716 = _1573;
        _1717 = _1572;
        _1718 = _1571;
        _1719 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1615 : (isnan(_1615) ? 0.0 : max(_1615, 0.0)));
        _1720 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1657 : (isnan(_1657) ? 0.0 : max(_1657, 0.0)));
        _1721 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1699 : (isnan(_1699) ? 0.0 : max(_1699, 0.0)));
    }
    else
    {
        _1707 = _1398;
        _1708 = _1398;
        _1709 = _1398;
        _1710 = _1398;
        _1711 = _1398;
        _1712 = _1398;
        _1713 = _1398;
        _1714 = _1398;
        _1715 = _1398;
        _1716 = _1398;
        _1717 = _1398;
        _1718 = _1398;
        _1719 = 0.0;
        _1720 = 0.0;
        _1721 = 0.0;
    }
    float _1731 = (cbModelParam._m0[1u].x * (_1719 - _1410)) + _1410;
    float _1732 = (cbModelParam._m0[1u].x * (_1720 - _1411)) + _1411;
    float _1733 = (cbModelParam._m0[1u].x * (_1721 - _1412)) + _1412;
    float _1754 = fma(_1733, cbSceneParam._m0[89u].z, fma(_1732, cbSceneParam._m0[89u].y, _1731 * cbSceneParam._m0[89u].x));
    float _1757 = fma(_1733, cbSceneParam._m0[90u].z, fma(_1732, cbSceneParam._m0[90u].y, _1731 * cbSceneParam._m0[90u].x));
    float _1760 = fma(_1733, cbSceneParam._m0[91u].z, fma(_1732, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1731));
    float _1775 = _1007 * 0.5;
    float _1776 = _1008 * 0.5;
    float _1777 = _1009 * 0.5;
    float _1778 = dot(vec4(_1775, _1776, _1777, 1.0), vec4(_1709, _1712, _1715, _1718));
    float _1781 = dot(vec4(_1775, _1776, _1777, 1.0), vec4(_1708, _1711, _1714, _1717));
    float _1784 = dot(vec4(_1775, _1776, _1777, 1.0), vec4(_1707, _1710, _1713, _1716));
    float _1818;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1791 = dot(vec4(_1775, _1776, _1777, 1.0), vec4(_1397, _1401, _1404, _1407));
        float _1795 = dot(vec4(_1775, _1776, _1777, 1.0), vec4(_1399, _1402, _1405, _1408));
        float _1799 = dot(vec4(_1775, _1776, _1777, 1.0), vec4(_1400, _1403, _1406, _1409));
        float _1806 = dot(vec4(cbModelParam._m0[39u]), vec4(_1775, _1776, _1777, 1.0));
        _1818 = dot(vec3(isnan(0.0) ? _1799 : (isnan(_1799) ? 0.0 : max(_1799, 0.0)), isnan(0.0) ? _1795 : (isnan(_1795) ? 0.0 : max(_1795, 0.0)), isnan(0.0) ? _1791 : (isnan(_1791) ? 0.0 : max(_1791, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1806) ? 0.0 : (isnan(0.0) ? _1806 : max(0.0, _1806))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1818 = 1.0;
    }
    float _1829;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1820 = dot(vec4(cbModelParam._m0[40u]), vec4(_1775, _1776, _1777, 1.0));
        _1829 = dot(vec3(isnan(0.0) ? _1778 : (isnan(_1778) ? 0.0 : max(_1778, 0.0)), isnan(0.0) ? _1781 : (isnan(_1781) ? 0.0 : max(_1781, 0.0)), isnan(0.0) ? _1784 : (isnan(_1784) ? 0.0 : max(_1784, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1820) ? 0.0 : (isnan(0.0) ? _1820 : max(0.0, _1820))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1829 = 1.0;
    }
    float _1833 = (_1829 * cbModelParam._m0[1u].x) + (_1818 * (1.0 - cbModelParam._m0[1u].x));
    float _1843 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _840);
    float _1844 = isnan(_1843) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1843 : min(cbModelParam._m0[25u].z, _1843));
    float _1924;
    float _1926;
    float _1928;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1891 = fma(_1068, cbModelParam._m0[13u].z, fma(_1064, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1060)) + cbModelParam._m0[13u].w;
        float _1895 = fma(_1068, cbModelParam._m0[14u].z, fma(_1064, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1060)) + cbModelParam._m0[14u].w;
        float _1899 = fma(_1068, cbModelParam._m0[15u].z, fma(_1064, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1060)) + cbModelParam._m0[15u].w;
        float _1902 = fma(_1009, cbModelParam._m0[13u].z, fma(_1008, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1007));
        float _1905 = fma(_1009, cbModelParam._m0[14u].z, fma(_1008, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1007));
        float _1908 = fma(_1009, cbModelParam._m0[15u].z, fma(_1008, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1007));
        float _1936;
        if (_1902 > 0.0)
        {
            _1936 = abs((1.0 - _1891) / _1902);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1902 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1891 + 1.0) / _1902);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1936 = frontier_phi_17_15_ladder;
        }
        float _2158;
        if (_1905 > 0.0)
        {
            _2158 = abs((1.0 - _1895) / _1905);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1905 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1895 + 1.0) / _1905);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2158 = frontier_phi_26_22_ladder;
        }
        float _2404;
        if (_1908 > 0.0)
        {
            _2404 = abs((1.0 - _1899) / _1908);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1908 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1899 + 1.0) / _1908);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2404 = frontier_phi_38_33_ladder;
        }
        float _2406 = isnan(_2158) ? _1936 : (isnan(_1936) ? _2158 : min(_1936, _2158));
        float _2407 = isnan(_2404) ? _2406 : (isnan(_2406) ? _2404 : min(_2406, _2404));
        float _2411 = (_2407 * _1902) + _1891;
        float _2412 = (_2407 * _1905) + _1895;
        float _2413 = (_2407 * _1908) + _1899;
        float _2414 = _2407 * 9.9999997473787516355514526367188e-05;
        float _2416 = (-1.0) - _2414;
        float _2418 = _2414 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2413 > _2418) || ((_2413 < _2416) || ((_2412 > _2418) || ((_2412 < _2416) || ((_2411 < _2416) || (_2411 > _2418))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2537 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2413, cbModelParam._m0[9u].z, fma(_2412, cbModelParam._m0[9u].y, _2411 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2413, cbModelParam._m0[10u].z, fma(_2412, cbModelParam._m0[10u].y, _2411 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2413, cbModelParam._m0[11u].z, fma(_2412, cbModelParam._m0[11u].y, _2411 * cbModelParam._m0[11u].x))), _1844);
            frontier_phi_16_38_ladder = _2537.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2537.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2537.x * cbModelParam._m0[1u].y;
        }
        _1924 = frontier_phi_16_38_ladder_2;
        _1926 = frontier_phi_16_38_ladder_1;
        _1928 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1912 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1007, _1008, _1009), _1844);
        _1924 = _1912.x * cbModelParam._m0[1u].y;
        _1926 = _1912.y * cbModelParam._m0[1u].y;
        _1928 = _1912.z * cbModelParam._m0[1u].y;
    }
    float _1932 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _840);
    float _1933 = isnan(_1932) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1932 : min(cbModelParam._m0[25u].w, _1932));
    float _2023;
    float _2025;
    float _2027;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1987 = fma(_1068, cbModelParam._m0[21u].z, fma(_1064, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1060)) + cbModelParam._m0[21u].w;
        float _1991 = fma(_1068, cbModelParam._m0[22u].z, fma(_1064, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1060)) + cbModelParam._m0[22u].w;
        float _1995 = fma(_1068, cbModelParam._m0[23u].z, fma(_1064, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1060)) + cbModelParam._m0[23u].w;
        float _1998 = fma(_1009, cbModelParam._m0[21u].z, fma(_1008, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1007));
        float _2001 = fma(_1009, cbModelParam._m0[22u].z, fma(_1008, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1007));
        float _2004 = fma(_1009, cbModelParam._m0[23u].z, fma(_1008, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1007));
        float _2163;
        if (_1998 > 0.0)
        {
            _2163 = abs((1.0 - _1987) / _1998);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1998 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1987 + 1.0) / _1998);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2163 = frontier_phi_28_24_ladder;
        }
        float _2431;
        if (_2001 > 0.0)
        {
            _2431 = abs((1.0 - _1991) / _2001);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_2001 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1991 + 1.0) / _2001);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2431 = frontier_phi_40_35_ladder;
        }
        float _2636;
        if (_2004 > 0.0)
        {
            _2636 = abs((1.0 - _1995) / _2004);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_2004 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1995 + 1.0) / _2004);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2636 = frontier_phi_49_46_ladder;
        }
        float _2638 = isnan(_2431) ? _2163 : (isnan(_2163) ? _2431 : min(_2163, _2431));
        float _2639 = isnan(_2636) ? _2638 : (isnan(_2638) ? _2636 : min(_2638, _2636));
        float _2643 = (_2639 * _1998) + _1987;
        float _2644 = (_2639 * _2001) + _1991;
        float _2645 = (_2639 * _2004) + _1995;
        float _2646 = _2639 * 9.9999997473787516355514526367188e-05;
        float _2647 = (-1.0) - _2646;
        float _2649 = _2646 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2645 > _2649) || ((_2645 < _2647) || ((_2644 > _2649) || ((_2644 < _2647) || ((_2643 < _2647) || (_2643 > _2649))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2844 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2645, cbModelParam._m0[17u].z, fma(_2644, cbModelParam._m0[17u].y, _2643 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2645, cbModelParam._m0[18u].z, fma(_2644, cbModelParam._m0[18u].y, _2643 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2645, cbModelParam._m0[19u].z, fma(_2644, cbModelParam._m0[19u].y, _2643 * cbModelParam._m0[19u].x))), _1933);
            frontier_phi_25_49_ladder = _2844.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2844.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2844.x * cbModelParam._m0[1u].z;
        }
        _2023 = frontier_phi_25_49_ladder_2;
        _2025 = frontier_phi_25_49_ladder_1;
        _2027 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _2007 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1007, _1008, _1009), _1933);
        _2023 = _2007.x * cbModelParam._m0[1u].z;
        _2025 = _2007.y * cbModelParam._m0[1u].z;
        _2027 = _2007.z * cbModelParam._m0[1u].z;
    }
    float _2039 = ((((1.0 - _1028) * ((_1015 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_1028 * _1015)) * _999;
    float _2040 = _2039 * ((cbModelParam._m0[1u].w * (_2023 - _1924)) + _1924);
    float _2041 = _2039 * ((cbModelParam._m0[1u].w * (_2025 - _1926)) + _1926);
    float _2042 = _2039 * ((cbModelParam._m0[1u].w * (_2027 - _1928)) + _1928);
    float _2045 = fma(_2042, cbSceneParam._m0[89u].z, fma(_2041, cbSceneParam._m0[89u].y, _2040 * cbSceneParam._m0[89u].x));
    float _2048 = fma(_2042, cbSceneParam._m0[90u].z, fma(_2041, cbSceneParam._m0[90u].y, _2040 * cbSceneParam._m0[90u].x));
    float _2051 = fma(_2042, cbSceneParam._m0[91u].z, fma(_2041, cbSceneParam._m0[91u].y, _2040 * cbSceneParam._m0[91u].x));
    vec4 _2059 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_936, _937));
    float _2061 = _2059.w;
    float _2073 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _2061);
    float _2074 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _2061);
    float _2075 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _2061);
    uvec4 _2079 = floatBitsToUint(cbInstanceData._m0[_250 + 5u]);
    uint _2081 = _2079.x * 14u;
    uint _2082 = _2081 + 13u;
    float _2089 = _999 + (-1.0);
    float _2094 = (cbLight._m0[_2082].x * _2089) + 1.0;
    float _2095 = (cbLight._m0[_2082].y * _2089) + 1.0;
    float _2096 = (cbLight._m0[_2082].z * _2089) + 1.0;
    float _2097 = (cbLight._m0[_2082].w * _2089) + 1.0;
    uint _2098 = _2081 + 5u;
    float _2104 = isnan(1.0) ? _2095 : (isnan(_2095) ? 1.0 : min(_2095, 1.0));
    uint _2108 = _2081 + 4u;
    float _2117 = isnan(1.0) ? _2094 : (isnan(_2094) ? 1.0 : min(_2094, 1.0));
    uint _2121 = _2081 | 1u;
    float _2132 = dot(vec3(cbLight._m0[_2081].xyz), vec3(_837, _838, _839));
    float _2135 = dot(vec3(cbLight._m0[_2121].xyz), vec3(_837, _838, _839));
    float _4346 = isnan(0.0) ? _2132 : (isnan(_2132) ? 0.0 : max(_2132, 0.0));
    float _4357 = isnan(0.0) ? _2135 : (isnan(_2135) ? 0.0 : max(_2135, 0.0));
    float _2140 = (isnan(1.0) ? _4346 : (isnan(_4346) ? 1.0 : min(_4346, 1.0))) * 0.3183098733425140380859375;
    float _2142 = (isnan(1.0) ? _4357 : (isnan(_4357) ? 1.0 : min(_4357, 1.0))) * 0.3183098733425140380859375;
    float _2149 = ((cbLight._m0[_2098].x * _2104) * _2142) + (((cbLight._m0[_2108].x * _2073) * _2117) * _2140);
    float _2150 = ((_2104 * cbLight._m0[_2098].y) * _2142) + (((cbLight._m0[_2108].y * _2074) * _2117) * _2140);
    float _2151 = ((_2104 * cbLight._m0[_2098].z) * _2142) + (((cbLight._m0[_2108].z * _2075) * _2117) * _2140);
    uvec4 _2155 = floatBitsToUint(cbLight._m0[_2081 + 12u]);
    bool _2157 = _2155.x == 0u;
    float _2168;
    float _2170;
    float _2172;
    if (_2157)
    {
        _2168 = _2149;
        _2170 = _2150;
        _2172 = _2151;
    }
    else
    {
        uint _2176 = _2081 + 6u;
        float _2192 = (dot(vec3(cbLight._m0[_2081 + 2u].xyz), vec3(_837, _838, _839)) * 0.5) + 0.5;
        float _2193 = _2192 * _2192;
        float _4368 = isnan(0.0) ? _2193 : (isnan(_2193) ? 0.0 : max(_2193, 0.0));
        float _2194 = isnan(1.0) ? _4368 : (isnan(_4368) ? 1.0 : min(_4368, 1.0));
        float _2195 = isnan(1.0) ? _2096 : (isnan(_2096) ? 1.0 : min(_2096, 1.0));
        _2168 = (((cbLight._m0[_2176].x * 0.3183098733425140380859375) * _2194) * _2195) + _2149;
        _2170 = (((cbLight._m0[_2176].y * 0.3183098733425140380859375) * _2194) * _2195) + _2150;
        _2172 = (((cbLight._m0[_2176].z * 0.3183098733425140380859375) * _2194) * _2195) + _2151;
    }
    bool _2175 = _2155.y == 0u;
    float _2213;
    float _2215;
    float _2217;
    if (_2175)
    {
        _2213 = _2168;
        _2215 = _2170;
        _2217 = _2172;
    }
    else
    {
        uint _2375 = _2081 + 7u;
        float _2391 = (dot(vec3(cbLight._m0[_2081 + 3u].xyz), vec3(_837, _838, _839)) * 0.5) + 0.5;
        float _2392 = _2391 * _2391;
        float _4384 = isnan(0.0) ? _2392 : (isnan(_2392) ? 0.0 : max(_2392, 0.0));
        float _2393 = isnan(1.0) ? _4384 : (isnan(_4384) ? 1.0 : min(_4384, 1.0));
        float _2394 = isnan(1.0) ? _2097 : (isnan(_2097) ? 1.0 : min(_2097, 1.0));
        _2213 = (((cbLight._m0[_2375].x * 0.3183098733425140380859375) * _2393) * _2394) + _2168;
        _2215 = (((cbLight._m0[_2375].y * 0.3183098733425140380859375) * _2393) * _2394) + _2170;
        _2217 = (((cbLight._m0[_2375].z * 0.3183098733425140380859375) * _2393) * _2394) + _2172;
    }
    uint _2220 = _2081 + 8u;
    float _2233 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2081].w)) * _840) * 0.949999988079071044921875);
    float _2234 = _2233 * _2233;
    float _2235 = cbLight._m0[_2081].x + _916;
    float _2236 = cbLight._m0[_2081].y + _917;
    float _2237 = cbLight._m0[_2081].z + _918;
    float _2241 = inversesqrt(dot(vec3(_2235, _2236, _2237), vec3(_2235, _2236, _2237)));
    float _2242 = _2241 * _2235;
    float _2243 = _2241 * _2236;
    float _2244 = _2241 * _2237;
    float _2245 = dot(vec3(_837, _838, _839), vec3(cbLight._m0[_2081].xyz));
    float _4400 = isnan(0.0) ? _2245 : (isnan(_2245) ? 0.0 : max(_2245, 0.0));
    float _2248 = isnan(1.0) ? _4400 : (isnan(_4400) ? 1.0 : min(_4400, 1.0));
    float _4411 = isnan(0.0) ? _1000 : (isnan(_1000) ? 0.0 : max(_1000, 0.0));
    float _2249 = isnan(1.0) ? _4411 : (isnan(_4411) ? 1.0 : min(_4411, 1.0));
    float _2250 = dot(vec3(_837, _838, _839), vec3(_2242, _2243, _2244));
    float _4422 = isnan(0.0) ? _2250 : (isnan(_2250) ? 0.0 : max(_2250, 0.0));
    float _2253 = isnan(1.0) ? _4422 : (isnan(_4422) ? 1.0 : min(_4422, 1.0));
    float _2254 = dot(vec3(cbLight._m0[_2081].xyz), vec3(_2242, _2243, _2244));
    float _4433 = isnan(0.0) ? _2254 : (isnan(_2254) ? 0.0 : max(_2254, 0.0));
    float _2258 = _2234 * _2234;
    float _2262 = ((_2253 * _2253) * (_2258 + (-1.0))) + 1.0;
    float _2273 = (exp2(log2(1.0 - (isnan(1.0) ? _4433 : (isnan(_4433) ? 1.0 : min(_4433, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2274 = 1.0 - _2234;
    float _2285 = (0.5 / (((_2249 * ((_2248 * _2274) + _2234)) + 9.9999999392252902907785028219223e-09) + (((_2249 * _2274) + _2234) * _2248))) * _2248;
    float _4444 = isnan(0.0) ? _2285 : (isnan(_2285) ? 0.0 : max(_2285, 0.0));
    float _2287 = (isnan(1.0) ? _4444 : (isnan(_4444) ? 1.0 : min(_4444, 1.0))) * (_2258 / ((_2262 * _2262) * 3.141590118408203125));
    uint _2301 = _2081 + 9u;
    float _2312 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2121].w)) * _840) * 0.949999988079071044921875);
    float _2313 = _2312 * _2312;
    float _2314 = cbLight._m0[_2121].x + _916;
    float _2315 = cbLight._m0[_2121].y + _917;
    float _2316 = cbLight._m0[_2121].z + _918;
    float _2320 = inversesqrt(dot(vec3(_2314, _2315, _2316), vec3(_2314, _2315, _2316)));
    float _2321 = _2320 * _2314;
    float _2322 = _2320 * _2315;
    float _2323 = _2320 * _2316;
    float _2324 = dot(vec3(_837, _838, _839), vec3(cbLight._m0[_2121].xyz));
    float _4455 = isnan(0.0) ? _2324 : (isnan(_2324) ? 0.0 : max(_2324, 0.0));
    float _2327 = isnan(1.0) ? _4455 : (isnan(_4455) ? 1.0 : min(_4455, 1.0));
    float _2328 = dot(vec3(_837, _838, _839), vec3(_2321, _2322, _2323));
    float _4466 = isnan(0.0) ? _2328 : (isnan(_2328) ? 0.0 : max(_2328, 0.0));
    float _2331 = isnan(1.0) ? _4466 : (isnan(_4466) ? 1.0 : min(_4466, 1.0));
    float _2332 = dot(vec3(cbLight._m0[_2121].xyz), vec3(_2321, _2322, _2323));
    float _4477 = isnan(0.0) ? _2332 : (isnan(_2332) ? 0.0 : max(_2332, 0.0));
    float _2336 = _2313 * _2313;
    float _2340 = ((_2331 * _2331) * (_2336 + (-1.0))) + 1.0;
    float _2349 = (exp2(log2(1.0 - (isnan(1.0) ? _4477 : (isnan(_4477) ? 1.0 : min(_4477, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2350 = 1.0 - _2313;
    float _2360 = (0.5 / (((_2249 * ((_2327 * _2350) + _2313)) + 9.9999999392252902907785028219223e-09) + (((_2249 * _2350) + _2313) * _2327))) * _2327;
    float _4488 = isnan(0.0) ? _2360 : (isnan(_2360) ? 0.0 : max(_2360, 0.0));
    float _2362 = (isnan(1.0) ? _4488 : (isnan(_4488) ? 1.0 : min(_4488, 1.0))) * (_2336 / ((_2340 * _2340) * 3.141590118408203125));
    float _2372 = (((_2349 * cbLight._m0[_2301].x) * _2362) * _2104) + ((((cbLight._m0[_2220].x * _2073) * _2273) * _2287) * _2117);
    float _2373 = (((_2349 * cbLight._m0[_2301].y) * _2362) * _2104) + ((((cbLight._m0[_2220].y * _2074) * _2273) * _2287) * _2117);
    float _2374 = (((_2349 * cbLight._m0[_2301].z) * _2362) * _2104) + ((((cbLight._m0[_2220].z * _2075) * _2273) * _2287) * _2117);
    float _2436;
    float _2438;
    float _2440;
    if (_2157)
    {
        _2436 = _2372;
        _2438 = _2373;
        _2440 = _2374;
    }
    else
    {
        uint _2442 = _2081 + 2u;
        uint _2446 = _2081 + 10u;
        float _2460 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2442].w)) * _840) * 0.949999988079071044921875);
        float _2461 = _2460 * _2460;
        float _2462 = cbLight._m0[_2442].x + _916;
        float _2463 = cbLight._m0[_2442].y + _917;
        float _2464 = cbLight._m0[_2442].z + _918;
        float _2468 = inversesqrt(dot(vec3(_2462, _2463, _2464), vec3(_2462, _2463, _2464)));
        float _2469 = _2468 * _2462;
        float _2470 = _2468 * _2463;
        float _2471 = _2468 * _2464;
        float _2472 = dot(vec3(_837, _838, _839), vec3(cbLight._m0[_2442].xyz));
        float _4499 = isnan(0.0) ? _2472 : (isnan(_2472) ? 0.0 : max(_2472, 0.0));
        float _2475 = isnan(1.0) ? _4499 : (isnan(_4499) ? 1.0 : min(_4499, 1.0));
        float _2476 = dot(vec3(_837, _838, _839), vec3(_2469, _2470, _2471));
        float _4510 = isnan(0.0) ? _2476 : (isnan(_2476) ? 0.0 : max(_2476, 0.0));
        float _2479 = isnan(1.0) ? _4510 : (isnan(_4510) ? 1.0 : min(_4510, 1.0));
        float _2480 = dot(vec3(cbLight._m0[_2442].xyz), vec3(_2469, _2470, _2471));
        float _4521 = isnan(0.0) ? _2480 : (isnan(_2480) ? 0.0 : max(_2480, 0.0));
        float _2484 = _2461 * _2461;
        float _2488 = ((_2479 * _2479) * (_2484 + (-1.0))) + 1.0;
        float _2497 = (exp2(log2(1.0 - (isnan(1.0) ? _4521 : (isnan(_4521) ? 1.0 : min(_4521, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2498 = 1.0 - _2461;
        float _2508 = (0.5 / (((_2249 * ((_2475 * _2498) + _2461)) + 9.9999999392252902907785028219223e-09) + (((_2249 * _2498) + _2461) * _2475))) * _2475;
        float _4532 = isnan(0.0) ? _2508 : (isnan(_2508) ? 0.0 : max(_2508, 0.0));
        float _2510 = (isnan(1.0) ? _4532 : (isnan(_4532) ? 1.0 : min(_4532, 1.0))) * (_2484 / ((_2488 * _2488) * 3.141590118408203125));
        float _2511 = isnan(1.0) ? _2096 : (isnan(_2096) ? 1.0 : min(_2096, 1.0));
        _2436 = (((_2497 * cbLight._m0[_2446].x) * _2510) * _2511) + _2372;
        _2438 = (((_2497 * cbLight._m0[_2446].y) * _2510) * _2511) + _2373;
        _2440 = (((_2497 * cbLight._m0[_2446].z) * _2510) * _2511) + _2374;
    }
    float _2546;
    float _2548;
    float _2550;
    if (_2175)
    {
        _2546 = _2436;
        _2548 = _2438;
        _2550 = _2440;
    }
    else
    {
        uint _2557 = _2081 + 3u;
        uint _2561 = _2081 + 11u;
        float _2575 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2557].w)) * _840) * 0.949999988079071044921875);
        float _2576 = _2575 * _2575;
        float _2577 = cbLight._m0[_2557].x + _916;
        float _2578 = cbLight._m0[_2557].y + _917;
        float _2579 = cbLight._m0[_2557].z + _918;
        float _2583 = inversesqrt(dot(vec3(_2577, _2578, _2579), vec3(_2577, _2578, _2579)));
        float _2584 = _2583 * _2577;
        float _2585 = _2583 * _2578;
        float _2586 = _2583 * _2579;
        float _2587 = dot(vec3(_837, _838, _839), vec3(cbLight._m0[_2557].xyz));
        float _4548 = isnan(0.0) ? _2587 : (isnan(_2587) ? 0.0 : max(_2587, 0.0));
        float _2590 = isnan(1.0) ? _4548 : (isnan(_4548) ? 1.0 : min(_4548, 1.0));
        float _2591 = dot(vec3(_837, _838, _839), vec3(_2584, _2585, _2586));
        float _4559 = isnan(0.0) ? _2591 : (isnan(_2591) ? 0.0 : max(_2591, 0.0));
        float _2594 = isnan(1.0) ? _4559 : (isnan(_4559) ? 1.0 : min(_4559, 1.0));
        float _2595 = dot(vec3(cbLight._m0[_2557].xyz), vec3(_2584, _2585, _2586));
        float _4570 = isnan(0.0) ? _2595 : (isnan(_2595) ? 0.0 : max(_2595, 0.0));
        float _2599 = _2576 * _2576;
        float _2603 = ((_2594 * _2594) * (_2599 + (-1.0))) + 1.0;
        float _2612 = (exp2(log2(1.0 - (isnan(1.0) ? _4570 : (isnan(_4570) ? 1.0 : min(_4570, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2613 = 1.0 - _2576;
        float _2623 = (0.5 / (((_2249 * ((_2590 * _2613) + _2576)) + 9.9999999392252902907785028219223e-09) + (((_2249 * _2613) + _2576) * _2590))) * _2590;
        float _4581 = isnan(0.0) ? _2623 : (isnan(_2623) ? 0.0 : max(_2623, 0.0));
        float _2625 = (isnan(1.0) ? _4581 : (isnan(_4581) ? 1.0 : min(_4581, 1.0))) * (_2599 / ((_2603 * _2603) * 3.141590118408203125));
        float _2626 = isnan(1.0) ? _2097 : (isnan(_2097) ? 1.0 : min(_2097, 1.0));
        _2546 = (((_2612 * cbLight._m0[_2561].x) * _2625) * _2626) + _2436;
        _2548 = (((_2612 * cbLight._m0[_2561].y) * _2625) * _2626) + _2438;
        _2550 = (((_2612 * cbLight._m0[_2561].z) * _2625) * _2626) + _2440;
    }
    float _2761;
    float _2763;
    float _2765;
    float _2767;
    float _2769;
    float _2771;
    if (_2079.y == 0u)
    {
        float _2701 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2702 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2701;
        float _2703 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2701;
        float _2704 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2701;
        uvec4 _2716 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2717 = _2716.x;
        uint _2728 = uint((float(_2716.y) * floor(float(uint(cbSceneParam._m0[85u].y * _937) / _2717))) + floor(float(uint(cbSceneParam._m0[85u].x * _936) / _2717)));
        float _2738 = (log2(_2704 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2739 = isnan(0.0) ? _2738 : (isnan(_2738) ? 0.0 : max(_2738, 0.0));
        uint _2742 = uint(isnan(14.0) ? _2739 : (isnan(_2739) ? 14.0 : min(_2739, 14.0)));
        uvec4 _2747 = texelFetch(g_lightClusterGridBuffer, int(((_2742 << 2u) + (_2728 << 6u)) >> 2u));
        uint _2748 = _2747.x;
        uint _2749 = _2716.z;
        float _2849;
        float _2851;
        float _2853;
        float _2855;
        float _2857;
        float _2859;
        if (((((1u << ((_2749 >> 4u) & 15u)) + 4294967295u) & _2748) == 0u) || ((_2749 & 240u) == 0u))
        {
            _2849 = 0.0;
            _2851 = 0.0;
            _2853 = 0.0;
            _2855 = 0.0;
            _2857 = 0.0;
            _2859 = 0.0;
        }
        else
        {
            float _2850;
            float _2852;
            float _2854;
            float _2856;
            float _2858;
            float _2860;
            float _3002 = 0.0;
            float _3003 = 0.0;
            float _3004 = 0.0;
            float _3005 = 0.0;
            float _3006 = 0.0;
            float _3007 = 0.0;
            uint _3008 = 0u;
            uint _3017;
            bool _3018;
            for (;;)
            {
                _3017 = texelFetch(g_lightClassification, int((((_2742 << 5u) + (_2728 << 9u)) + (_3008 << 2u)) >> 2u)).x;
                _3018 = _3017 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3018)
                {
                    frontier_phi_66_pred = _3002;
                    frontier_phi_66_pred_1 = _3007;
                    frontier_phi_66_pred_2 = _3006;
                    frontier_phi_66_pred_3 = _3005;
                    frontier_phi_66_pred_4 = _3004;
                    frontier_phi_66_pred_5 = _3003;
                }
                else
                {
                    float _3147;
                    float _3148;
                    float _3149;
                    float _3150;
                    float _3151;
                    float _3152;
                    uint _3153;
                    _3147 = _3002;
                    _3148 = _3003;
                    _3149 = _3004;
                    _3150 = _3005;
                    _3151 = _3006;
                    _3152 = _3007;
                    _3153 = _3017;
                    float _3074;
                    float _3075;
                    float _3076;
                    float _3077;
                    float _3078;
                    float _3079;
                    for (;;)
                    {
                        uint _3157 = uint(findLSB(_3153)) + (_3008 << 5u);
                        uint _3154 = (_3153 + 4294967295u) & _3153;
                        uint _3159 = _3157 * 48u;
                        vec4 _3173 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3159)).x, texelFetch(g_PointLightRenderingBuffer, int(_3159 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3159 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3159 + 3u)).x));
                        uint _3179 = (_3157 * 48u) + 4u;
                        vec4 _3192 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3179)).x, texelFetch(g_PointLightRenderingBuffer, int(_3179 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3179 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3179 + 3u)).x));
                        uint _3198 = (_3157 * 48u) + 8u;
                        vec3 _3209 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3198)).x, texelFetch(g_PointLightRenderingBuffer, int(_3198 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3198 + 2u)).x));
                        float _3213 = _3173.x - _2702;
                        float _3214 = _3173.y - _2703;
                        float _3215 = _3173.z - _2704;
                        float _3216 = dot(vec3(_3213, _3214, _3215), vec3(_3213, _3214, _3215));
                        float _3219 = inversesqrt(_3216);
                        float _3220 = _3219 * _3213;
                        float _3221 = _3219 * _3214;
                        float _3222 = _3219 * _3215;
                        float _3223 = dot(vec3(_955, _958, _961), vec3(_3220, _3221, _3222));
                        float _3228 = 1.0 - (_3216 * _3173.w);
                        float _4607 = isnan(0.0) ? _3228 : (isnan(_3228) ? 0.0 : max(_3228, 0.0));
                        float _3229 = isnan(1.0) ? _4607 : (isnan(_4607) ? 1.0 : min(_4607, 1.0));
                        float _3230 = sqrt(_3216) * _3192.w;
                        float _3233 = 1.39999997615814208984375 / (_3230 + 1.39999997615814208984375);
                        float _3234 = _3233 * _3233;
                        float _3237 = ((1.0 - _3234) * _3223) + _3234;
                        float _3240 = _3230 * _3230;
                        float _3244 = ((isnan(0.0) ? _3237 : (isnan(_3237) ? 0.0 : max(_3237, 0.0))) * _3229) / ((_3240 * 0.699999988079071044921875) + 1.0);
                        float _3248 = (-0.0) - _2702;
                        float _3249 = (-0.0) - _2703;
                        float _3250 = (-0.0) - _2704;
                        float _3254 = inversesqrt(dot(vec3(_3248, _3249, _3250), vec3(_3248, _3249, _3250)));
                        float _3255 = _3254 * _3248;
                        float _3256 = _3254 * _3249;
                        float _3257 = _3254 * _3250;
                        float _3265 = exp2(log2(1.0 / ((_3240 * 3.5) + 5.0)) * 0.25);
                        float _3266 = 1.0 - _1015;
                        float _3273 = sqrt(1.0 - ((1.0 - (_3266 * _3266)) * (1.0 - (_3265 * _3265))));
                        float _3274 = _3273 * _3273;
                        float _3275 = _3274 * _3274;
                        float _3276 = _3255 + _3220;
                        float _3277 = _3256 + _3221;
                        float _3278 = _3257 + _3222;
                        float _3282 = inversesqrt(dot(vec3(_3276, _3277, _3278), vec3(_3276, _3277, _3278)));
                        float _3286 = dot(vec3(_955, _958, _961), vec3(_3255, _3256, _3257));
                        float _4623 = isnan(0.0) ? _3286 : (isnan(_3286) ? 0.0 : max(_3286, 0.0));
                        float _3289 = isnan(1.0) ? _4623 : (isnan(_4623) ? 1.0 : min(_4623, 1.0));
                        float _3290 = dot(vec3(_955, _958, _961), vec3(_3282 * _3276, _3282 * _3277, _3282 * _3278));
                        float _4634 = isnan(0.0) ? _3290 : (isnan(_3290) ? 0.0 : max(_3290, 0.0));
                        float _3293 = isnan(1.0) ? _4634 : (isnan(_4634) ? 1.0 : min(_4634, 1.0));
                        float _3297 = ((_3293 * _3293) * (_3275 + (-1.0))) + 1.0;
                        float _3298 = _3233 * _3274;
                        float _3299 = _3298 * _3298;
                        float _3302 = ((1.0 - _3299) * _3223) + _3299;
                        float _4645 = isnan(0.0) ? _3302 : (isnan(_3302) ? 0.0 : max(_3302, 0.0));
                        float _3303 = isnan(1.0) ? _4645 : (isnan(_4645) ? 1.0 : min(_4645, 1.0));
                        float _3304 = 1.0 - _3274;
                        float _3314 = (0.5 / (((_3303 * ((_3289 * _3304) + _3274)) + 9.9999999392252902907785028219223e-09) + (((_3303 * _3304) + _3274) * _3289))) * _3303;
                        float _4656 = isnan(0.0) ? _3314 : (isnan(_3314) ? 0.0 : max(_3314, 0.0));
                        float _3325 = (((_3275 * 3.1415927410125732421875) * (isnan(1.0) ? _4656 : (isnan(_4656) ? 1.0 : min(_4656, 1.0)))) / ((_3297 * _3297) * ((_3240 * 2.1991131305694580078125) + 3.141590118408203125))) * _3229;
                        _3077 = (_3244 * _3192.x) + _3150;
                        _3078 = (_3244 * _3192.y) + _3151;
                        _3079 = (_3244 * _3192.z) + _3152;
                        _3074 = (_3325 * _3209.x) + _3147;
                        _3075 = (_3325 * _3209.y) + _3148;
                        _3076 = (_3325 * _3209.z) + _3149;
                        if (_3154 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3147 = _3074;
                            _3148 = _3075;
                            _3149 = _3076;
                            _3150 = _3077;
                            _3151 = _3078;
                            _3152 = _3079;
                            _3153 = _3154;
                        }
                    }
                    frontier_phi_66_pred = _3074;
                    frontier_phi_66_pred_1 = _3079;
                    frontier_phi_66_pred_2 = _3078;
                    frontier_phi_66_pred_3 = _3077;
                    frontier_phi_66_pred_4 = _3076;
                    frontier_phi_66_pred_5 = _3075;
                }
                _2850 = frontier_phi_66_pred;
                _2860 = frontier_phi_66_pred_1;
                _2858 = frontier_phi_66_pred_2;
                _2856 = frontier_phi_66_pred_3;
                _2854 = frontier_phi_66_pred_4;
                _2852 = frontier_phi_66_pred_5;
                uint _3009 = _3008 + 1u;
                if (_3009 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3002 = _2850;
                    _3003 = _2852;
                    _3004 = _2854;
                    _3005 = _2856;
                    _3006 = _2858;
                    _3007 = _2860;
                    _3008 = _3009;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2849 = _2850;
            _2851 = _2852;
            _2853 = _2854;
            _2855 = _2856;
            _2857 = _2858;
            _2859 = _2860;
        }
        uvec4 _2863 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2864 = _2863.z;
        uint _2866 = (_2864 >> 8u) & 15u;
        float _2970;
        float _2972;
        float _2974;
        float _2976;
        float _2978;
        float _2980;
        if (((4294967295u << _2866) & _2748) == 0u)
        {
            _2970 = _2849;
            _2972 = _2851;
            _2974 = _2853;
            _2976 = _2855;
            _2978 = _2857;
            _2980 = _2859;
        }
        else
        {
            float _2995 = inversesqrt(dot(vec3(_2702, _2703, _2704), vec3(_2702, _2703, _2704)));
            float _2996 = _2995 * _2702;
            float _2997 = _2995 * _2703;
            float _2998 = _2995 * _2704;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2866 < ((_2864 >> 12u) & 15u))
            {
                float _2971;
                float _2973;
                float _2975;
                float _2977;
                float _2979;
                float _2981;
                float _3130 = _2849;
                float _3131 = _2851;
                float _3132 = _2853;
                float _3133 = _2855;
                float _3134 = _2857;
                float _3135 = _2859;
                uint _3136 = _2866;
                uint _3145;
                bool _3146;
                for (;;)
                {
                    _3145 = texelFetch(g_lightClassification, int((((_2742 << 5u) + (_2728 << 9u)) + (_3136 << 2u)) >> 2u)).x;
                    _3146 = _3145 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_3146)
                    {
                        frontier_phi_77_pred = _3135;
                        frontier_phi_77_pred_1 = _3134;
                        frontier_phi_77_pred_2 = _3133;
                        frontier_phi_77_pred_3 = _3132;
                        frontier_phi_77_pred_4 = _3131;
                        frontier_phi_77_pred_5 = _3130;
                    }
                    else
                    {
                        float _3339;
                        float _3340;
                        float _3341;
                        float _3342;
                        float _3343;
                        float _3344;
                        float _3632;
                        float _3633;
                        float _3634;
                        float _3635;
                        float _3636;
                        float _3637;
                        float _3352 = _3130;
                        float _3353 = _3131;
                        float _3354 = _3132;
                        float _3355 = _3133;
                        float _3356 = _3134;
                        float _3357 = _3135;
                        uint _3358 = _3145;
                        uint _3359;
                        vec4 _3384;
                        float _3385;
                        vec4 _3400;
                        vec3 _3412;
                        vec4 _3427;
                        vec4 _3442;
                        float _3488;
                        bool _3489;
                        for (;;)
                        {
                            uint _3369 = ((_3136 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3358));
                            _3359 = (_3358 + 4294967295u) & _3358;
                            uint _3371 = _3369 * 40u;
                            _3384 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3371)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3371 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3371 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3371 + 3u)).x));
                            _3385 = _3384.w;
                            uint _3387 = (_3369 * 40u) + 4u;
                            _3400 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3387)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3387 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3387 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3387 + 3u)).x));
                            uint _3402 = (_3369 * 40u) + 8u;
                            _3412 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3402)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3402 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3402 + 2u)).x));
                            uint _3414 = (_3369 * 40u) + 16u;
                            _3427 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3414)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3414 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3414 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3414 + 3u)).x));
                            uint _3429 = (_3369 * 40u) + 20u;
                            _3442 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3429)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3429 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3429 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3429 + 3u)).x));
                            uint _3444 = (_3369 * 40u) + 24u;
                            vec4 _3457 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3444)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3444 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3444 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3444 + 3u)).x));
                            uint _3463 = (_3369 * 40u) + 28u;
                            vec4 _3476 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3463)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3463 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3463 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3463 + 3u)).x));
                            _3488 = fma(_2704, _3476.z, fma(_2703, _3476.y, _3476.x * _2702)) + _3476.w;
                            _3489 = !((fma(_2704, _3457.z, fma(_2703, _3457.y, _3457.x * _2702)) + _3457.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3489)
                            {
                                float _3516 = _3384.x - _2702;
                                float _3517 = _3384.y - _2703;
                                float _3518 = _3384.z - _2704;
                                float _3519 = dot(vec3(_3516, _3517, _3518), vec3(_3516, _3517, _3518));
                                float _3522 = inversesqrt(_3519);
                                float _3523 = _3522 * _3516;
                                float _3524 = _3522 * _3517;
                                float _3525 = _3522 * _3518;
                                float _3529 = 1.0 - (_3519 / (_3385 * _3385));
                                float _4667 = isnan(0.0) ? _3529 : (isnan(_3529) ? 0.0 : max(_3529, 0.0));
                                float _3530 = isnan(1.0) ? _4667 : (isnan(_4667) ? 1.0 : min(_4667, 1.0));
                                float _3534 = sqrt(_3519) * _3400.w;
                                float _3536 = 1.39999997615814208984375 / (_3534 + 1.39999997615814208984375);
                                float _3537 = _3536 * _3536;
                                float _3540 = ((1.0 - _3537) * dot(vec3(_3523, _3524, _3525), vec3(_955, _958, _961))) + _3537;
                                float _3543 = _3534 * _3534;
                                float _3547 = (fma(_2704, _3427.z, fma(_2703, _3427.y, _3427.x * _2702)) + _3427.w) / _3488;
                                float _3548 = (fma(_2704, _3442.z, fma(_2703, _3442.y, _3442.x * _2702)) + _3442.w) / _3488;
                                float _3552 = 1.0 - dot(vec2(_3547, _3548), vec2(_3547, _3548));
                                float _4683 = isnan(0.0) ? _3552 : (isnan(_3552) ? 0.0 : max(_3552, 0.0));
                                float _3553 = isnan(1.0) ? _4683 : (isnan(_4683) ? 1.0 : min(_4683, 1.0));
                                float _3554 = _3553 * (((isnan(0.0) ? _3540 : (isnan(_3540) ? 0.0 : max(_3540, 0.0))) * _3530) / ((_3543 * 0.699999988079071044921875) + 1.0));
                                float _3566 = exp2(log2(1.0 / ((_3543 * 3.5) + 5.0)) * 0.25);
                                float _3567 = 1.0 - _1015;
                                float _3574 = sqrt(1.0 - ((1.0 - (_3567 * _3567)) * (1.0 - (_3566 * _3566))));
                                float _3575 = _3574 * _3574;
                                float _3576 = _3575 * _3575;
                                float _3577 = _3523 - _2996;
                                float _3578 = _3524 - _2997;
                                float _3579 = _3525 - _2998;
                                float _3583 = inversesqrt(dot(vec3(_3577, _3578, _3579), vec3(_3577, _3578, _3579)));
                                float _3587 = dot(vec3(_955, _958, _961), vec3((-0.0) - _2996, (-0.0) - _2997, (-0.0) - _2998));
                                float _4694 = isnan(0.0) ? _3587 : (isnan(_3587) ? 0.0 : max(_3587, 0.0));
                                float _3590 = isnan(1.0) ? _4694 : (isnan(_4694) ? 1.0 : min(_4694, 1.0));
                                float _3591 = dot(vec3(_955, _958, _961), vec3(_3583 * _3577, _3583 * _3578, _3583 * _3579));
                                float _4705 = isnan(0.0) ? _3591 : (isnan(_3591) ? 0.0 : max(_3591, 0.0));
                                float _3594 = isnan(1.0) ? _4705 : (isnan(_4705) ? 1.0 : min(_4705, 1.0));
                                float _3598 = ((_3594 * _3594) * (_3576 + (-1.0))) + 1.0;
                                float _3599 = _3536 * _3575;
                                float _3600 = _3599 * _3599;
                                float _3606 = ((1.0 - _3600) * dot(vec3(_955, _958, _961), vec3(_3523, _3524, _3525))) + _3600;
                                float _4716 = isnan(0.0) ? _3606 : (isnan(_3606) ? 0.0 : max(_3606, 0.0));
                                float _3607 = isnan(1.0) ? _4716 : (isnan(_4716) ? 1.0 : min(_4716, 1.0));
                                float _3608 = 1.0 - _3575;
                                float _3618 = (0.5 / (((_3607 * ((_3590 * _3608) + _3575)) + 9.9999999392252902907785028219223e-09) + (((_3607 * _3608) + _3575) * _3590))) * _3607;
                                float _4727 = isnan(0.0) ? _3618 : (isnan(_3618) ? 0.0 : max(_3618, 0.0));
                                float _3628 = (_3553 * _3530) * (((_3576 * 3.1415927410125732421875) * (isnan(1.0) ? _4727 : (isnan(_4727) ? 1.0 : min(_4727, 1.0)))) / ((_3598 * _3598) * ((_3543 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3554 * _3400.y;
                                frontier_phi_83_pred_1 = _3554 * _3400.x;
                                frontier_phi_83_pred_2 = _3628 * _3412.z;
                                frontier_phi_83_pred_3 = _3628 * _3412.y;
                                frontier_phi_83_pred_4 = _3628 * _3412.x;
                                frontier_phi_83_pred_5 = _3554 * _3400.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3636 = frontier_phi_83_pred;
                            _3635 = frontier_phi_83_pred_1;
                            _3634 = frontier_phi_83_pred_2;
                            _3633 = frontier_phi_83_pred_3;
                            _3632 = frontier_phi_83_pred_4;
                            _3637 = frontier_phi_83_pred_5;
                            _3342 = _3635 + _3355;
                            _3343 = _3636 + _3356;
                            _3344 = _3637 + _3357;
                            _3339 = _3632 + _3352;
                            _3340 = _3633 + _3353;
                            _3341 = _3634 + _3354;
                            if (_3359 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3352 = _3339;
                                _3353 = _3340;
                                _3354 = _3341;
                                _3355 = _3342;
                                _3356 = _3343;
                                _3357 = _3344;
                                _3358 = _3359;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3344;
                        frontier_phi_77_pred_1 = _3343;
                        frontier_phi_77_pred_2 = _3342;
                        frontier_phi_77_pred_3 = _3341;
                        frontier_phi_77_pred_4 = _3340;
                        frontier_phi_77_pred_5 = _3339;
                    }
                    _2981 = frontier_phi_77_pred;
                    _2979 = frontier_phi_77_pred_1;
                    _2977 = frontier_phi_77_pred_2;
                    _2975 = frontier_phi_77_pred_3;
                    _2973 = frontier_phi_77_pred_4;
                    _2971 = frontier_phi_77_pred_5;
                    uint _3137 = _3136 + 1u;
                    if (_3137 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3130 = _2971;
                        _3131 = _2973;
                        _3132 = _2975;
                        _3133 = _2977;
                        _3134 = _2979;
                        _3135 = _2981;
                        _3136 = _3137;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2975;
                frontier_phi_58_59_ladder_1 = _2981;
                frontier_phi_58_59_ladder_2 = _2979;
                frontier_phi_58_59_ladder_3 = _2977;
                frontier_phi_58_59_ladder_4 = _2973;
                frontier_phi_58_59_ladder_5 = _2971;
            }
            else
            {
                frontier_phi_58_59_ladder = _2853;
                frontier_phi_58_59_ladder_1 = _2859;
                frontier_phi_58_59_ladder_2 = _2857;
                frontier_phi_58_59_ladder_3 = _2855;
                frontier_phi_58_59_ladder_4 = _2851;
                frontier_phi_58_59_ladder_5 = _2849;
            }
            _2970 = frontier_phi_58_59_ladder_5;
            _2972 = frontier_phi_58_59_ladder_4;
            _2974 = frontier_phi_58_59_ladder;
            _2976 = frontier_phi_58_59_ladder_3;
            _2978 = frontier_phi_58_59_ladder_2;
            _2980 = frontier_phi_58_59_ladder_1;
        }
        float _2985 = isnan(1.0) ? _999 : (isnan(_999) ? 1.0 : min(_999, 1.0));
        _2761 = (_2985 * _2976) + _2213;
        _2763 = (_2985 * _2978) + _2215;
        _2765 = (_2985 * _2980) + _2217;
        _2767 = ((_2970 * 0.039999999105930328369140625) * _2985) + _2546;
        _2769 = ((_2972 * 0.039999999105930328369140625) * _2985) + _2548;
        _2771 = ((_2974 * 0.039999999105930328369140625) * _2985) + _2550;
    }
    else
    {
        _2761 = _2213;
        _2763 = _2215;
        _2765 = _2217;
        _2767 = _2546;
        _2769 = _2548;
        _2771 = _2550;
    }
    float _4743 = isnan(0.0) ? _984 : (isnan(_984) ? 0.0 : max(_984, 0.0));
    float _4754 = isnan(0.0) ? _985 : (isnan(_985) ? 0.0 : max(_985, 0.0));
    float _4765 = isnan(0.0) ? _986 : (isnan(_986) ? 0.0 : max(_986, 0.0));
    float _2788 = ((isnan(1.0) ? _4743 : (isnan(_4743) ? 1.0 : min(_4743, 1.0))) * (_2761 + ((isnan(0.0) ? _1754 : (isnan(_1754) ? 0.0 : max(_1754, 0.0))) * _999))) + ((_2767 + ((isnan(0.0) ? _2045 : (isnan(_2045) ? 0.0 : max(_2045, 0.0))) * _1833)) * cbPerFrame._m0[3u].x);
    float _2789 = ((isnan(1.0) ? _4754 : (isnan(_4754) ? 1.0 : min(_4754, 1.0))) * (_2763 + ((isnan(0.0) ? _1757 : (isnan(_1757) ? 0.0 : max(_1757, 0.0))) * _999))) + ((_2769 + ((isnan(0.0) ? _2048 : (isnan(_2048) ? 0.0 : max(_2048, 0.0))) * _1833)) * cbPerFrame._m0[3u].x);
    float _2790 = ((isnan(1.0) ? _4765 : (isnan(_4765) ? 1.0 : min(_4765, 1.0))) * (_2765 + ((isnan(0.0) ? _1760 : (isnan(_1760) ? 0.0 : max(_1760, 0.0))) * _999))) + ((_2771 + ((isnan(0.0) ? _2051 : (isnan(_2051) ? 0.0 : max(_2051, 0.0))) * _1833)) * cbPerFrame._m0[3u].x);
    uint _2791 = _250 + 6u;
    float _2799 = _936 / cbSceneParam._m0[86u].x;
    float _2800 = _937 / cbSceneParam._m0[86u].y;
    vec4 _2814 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2799, _2800, (log2((isnan(cbSceneParam._m0[77u].w) ? _858 : (isnan(_858) ? cbSceneParam._m0[77u].w : min(_858, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2816 = _2814.x;
    float _2817 = _2814.y;
    float _2818 = _2814.z;
    float _2819 = _2814.w;
    float _2912;
    float _2914;
    float _2916;
    float _2918;
    if (_858 > cbSceneParam._m0[78u].w)
    {
        float _2874 = isnan(_858) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _858 : min(cbSceneParam._m0[80u].w, _858));
        float _2875 = _2874 / _858;
        float _2886 = _2875 * _909;
        float _2887 = _910 * _2875;
        float _2888 = (-0.0) - _2887;
        float _2890 = _2875 * _911;
        float _2892 = (cbSceneParam._m0[77u].w * _2888) / _2874;
        float _2893 = _2892 + cbSceneParam._m0[79u].w;
        float _2894 = cbSceneParam._m0[79u].w - _2887;
        float _2900 = sqrt(((_2886 * _2886) + (_2887 * _2887)) + (_2890 * _2890));
        float _2903 = (1.0 - (cbSceneParam._m0[77u].w / _2874)) * _2900;
        float _2908 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2910 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3087;
        if (abs((_2888 - _2892) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3087 = ((((_2893 > 0.0) ? exp2(_2908 * _2893) : (2.0 - exp2(_2910 * _2893))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2903;
        }
        else
        {
            float _3031 = 1.0 / cbSceneParam._m0[80u].x;
            float _3032 = isnan(_2894) ? _2893 : (isnan(_2893) ? _2894 : max(_2893, _2894));
            float _3033 = isnan(_2894) ? _2893 : (isnan(_2893) ? _2894 : min(_2893, _2894));
            float _3042 = isnan(0.0) ? _3032 : (isnan(_3032) ? 0.0 : min(_3032, 0.0));
            float _3043 = isnan(0.0) ? _3033 : (isnan(_3033) ? 0.0 : min(_3033, 0.0));
            _3087 = ((abs(_2900 / _2888) * cbSceneParam._m0[80u].y) * ((((_3042 - _3043) * 2.0) - ((exp2(_2908 * (isnan(0.0) ? _3032 : (isnan(_3032) ? 0.0 : max(_3032, 0.0)))) - exp2(_2908 * (isnan(0.0) ? _3033 : (isnan(_3033) ? 0.0 : max(_3033, 0.0))))) * _3031)) - ((exp2(_2910 * _3042) - exp2(_2910 * _3043)) * _3031))) + (_2903 * cbSceneParam._m0[80u].z);
        }
        vec4 _3089 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2799, _2800, 1.0), 0.0);
        float _3098 = exp2((_3087 * (-1.44269502162933349609375)) * (1.0 - _3089.w));
        float _3099 = log2(_3098);
        float _3115 = log2(_2819);
        _2912 = (exp2(_3115 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3099 * cbSceneParam._m0[78u].x)) * _3089.x) / cbSceneParam._m0[78u].x)) + _2816;
        _2914 = (exp2(_3115 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3099 * cbSceneParam._m0[78u].y)) * _3089.y) / cbSceneParam._m0[78u].y)) + _2817;
        _2916 = (exp2(_3115 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3099 * cbSceneParam._m0[78u].z)) * _3089.z) / cbSceneParam._m0[78u].z)) + _2818;
        _2918 = _3098 * _2819;
    }
    else
    {
        _2912 = _2816;
        _2914 = _2817;
        _2916 = _2818;
        _2918 = _2819;
    }
    bool _3125;
    vec4 _2928;
    vec4 _2950;
    float _2952;
    float _2956;
    float _2957;
    float _2958;
    float _2959;
    bool _2969;
    for (;;)
    {
        _2928 = cbMatDynParam._m0[0u];
        float _2930 = roundEven(_2928.y);
        bool _2931 = _2930 == 3.0;
        float _2932 = log2(_2918);
        float _2939 = exp2(_2932 * cbSceneParam._m0[78u].x) * _2788;
        float _2940 = exp2(_2932 * cbSceneParam._m0[78u].y) * _2789;
        float _2941 = exp2(_2932 * cbSceneParam._m0[78u].z) * _2790;
        float _2948 = _925 + (-0.5);
        _2950 = cbMtdParam._m0[1u];
        _2952 = _2950.y * _2948;
        float _2955 = (_2930 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2956 = _2955 * (_2931 ? _2939 : (_2939 + (cbSceneParam._m0[72u].w * _2912)));
        _2957 = _2955 * (_2931 ? _2940 : (_2940 + (cbSceneParam._m0[72u].w * _2914)));
        _2958 = _2955 * (_2931 ? _2941 : (_2941 + (cbSceneParam._m0[72u].w * _2916)));
        _2959 = _2948 * 0.999000012874603271484375;
        _2969 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2969)
        {
            if ((cbInstanceData._m0[_250 + 7u].x + _2959) < 0.5)
            {
                _3125 = true;
                break;
            }
        }
        uint _3066 = _974 + uint(_2928.w);
        if ((cbInstanceData._m0[_3066].w < 1.0) && ((cbInstanceData._m0[_3066].w + _2959) < 0.5))
        {
            _3125 = true;
            break;
        }
        if ((_2952 + 1.0) < _2950.x)
        {
            _3125 = true;
            break;
        }
        _3125 = false;
        break;
    }
    float _3330;
    if (_3125)
    {
        discard_state = true;
        _3330 = 0.0;
    }
    else
    {
        _3330 = cbInstanceData._m0[_2791].w;
    }
    SV_Target.x = _2956;
    SV_Target.y = _2957;
    SV_Target.z = _2958;
    SV_Target.w = _3330;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2791].w;
    discard_exit();
}


