#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 13) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_22;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_29;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_10;
layout(set = 0, binding = 20) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_6;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1327;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _230 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _231 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _232 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _238 = inversesqrt(dot(vec3(_230, _231, _232), vec3(_230, _231, _232)));
    float _245 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _252 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _264 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _266 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _267 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3658 = isnan(0.0) ? _264 : (isnan(_264) ? 0.0 : max(_264, 0.0));
    float _3669 = isnan(0.0) ? _266 : (isnan(_266) ? 0.0 : max(_266, 0.0));
    float _3680 = isnan(0.0) ? _267 : (isnan(_267) ? 0.0 : max(_267, 0.0));
    uint _277 = uint(roundEven(NORMAL.w)) * 13u;
    uint _282 = _277 + 1u;
    uint _286 = _277 + 2u;
    float _295 = sqrt(((cbInstanceData._m0[_282].x * cbInstanceData._m0[_282].x) + (cbInstanceData._m0[_277].x * cbInstanceData._m0[_277].x)) + (cbInstanceData._m0[_286].x * cbInstanceData._m0[_286].x));
    float _296 = _295 * TEXCOORD.z;
    float _297 = _295 * TEXCOORD.w;
    vec4 _310 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _296) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _297) + cbTextureTilingScale._m0[13u].w));
    vec4 _334 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _339 = _334.x * cbMtdParam._m0[11u].x;
    float _340 = _334.y * cbMtdParam._m0[11u].y;
    float _341 = _334.z * cbMtdParam._m0[11u].z;
    vec4 _360 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _296) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _297) + cbTextureTilingScale._m0[5u].w));
    vec4 _379 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _414 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _416 = _414.x;
    float _428 = dot(vec4(_416, _414.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _445 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _379.x) * 2.0) - ((((_416 - _428) * cbMtdParam._m0[24u].z) + _428) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3691 = isnan(0.0) ? _445 : (isnan(_445) ? 0.0 : max(_445, 0.0));
    float _446 = isnan(1.0) ? _3691 : (isnan(_3691) ? 1.0 : min(_3691, 1.0));
    float _453 = (_446 * ((_360.x * cbMtdParam._m0[12u].x) - _339)) + _339;
    float _454 = (_446 * ((_360.y * cbMtdParam._m0[12u].y) - _340)) + _340;
    float _455 = (_446 * ((_360.z * cbMtdParam._m0[12u].z) - _341)) + _341;
    vec4 _472 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _296) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _297) + cbTextureTilingScale._m0[3u].w));
    vec4 _492 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _494 = _492.x;
    float _504 = dot(vec4(_494, _492.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _518 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _379.y) * 2.0) - ((((_494 - _504) * cbMtdParam._m0[24u].z) + _504) * cbMtdParam._m0[20u].w))) + 1.0;
    float _3702 = isnan(0.0) ? _518 : (isnan(_518) ? 0.0 : max(_518, 0.0));
    float _519 = isnan(1.0) ? _3702 : (isnan(_3702) ? 1.0 : min(_3702, 1.0));
    float _526 = (_519 * ((_472.x * cbMtdParam._m0[13u].x) - _453)) + _453;
    float _527 = (_519 * ((_472.y * cbMtdParam._m0[13u].y) - _454)) + _454;
    float _528 = (_519 * ((_472.z * cbMtdParam._m0[13u].z) - _455)) + _455;
    float _532 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _310.x) * _526;
    float _535 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _310.y) * _527;
    float _538 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _310.z) * _528;
    float _545 = ((_526 - _532) * (isnan(1.0) ? _3658 : (isnan(_3658) ? 1.0 : min(_3658, 1.0)))) + _532;
    float _546 = ((_527 - _535) * (isnan(1.0) ? _3669 : (isnan(_3669) ? 1.0 : min(_3669, 1.0)))) + _535;
    float _547 = ((_528 - _538) * (isnan(1.0) ? _3680 : (isnan(_3680) ? 1.0 : min(_3680, 1.0)))) + _538;
    vec4 _559 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _296) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _297) + cbTextureTilingScale._m0[20u].w));
    vec4 _582 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _296) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _297) + cbTextureTilingScale._m0[4u].w));
    vec4 _599 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _601 = _599.x;
    float _602 = _599.y;
    float _603 = _599.z;
    float _610 = ((_582.x - _601) * _446) + _601;
    float _611 = ((_582.y - _602) * _446) + _602;
    float _612 = ((_582.z - _603) * _446) + _603;
    vec4 _624 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _296) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _297) + cbTextureTilingScale._m0[2u].w));
    float _637 = ((_624.z - _612) * _519) + _612;
    float _640 = ((((_624.x - _610) * _519) + _610) * 2.0) + (-1.0);
    float _641 = ((((_624.y - _611) * _519) + _611) * 2.0) + (-1.0);
    float _642 = dot(vec2(_640, _641), vec2(_640, _641));
    float _3713 = isnan(0.0) ? _642 : (isnan(_642) ? 0.0 : max(_642, 0.0));
    float _647 = sqrt(1.0 - (isnan(1.0) ? _3713 : (isnan(_3713) ? 1.0 : min(_3713, 1.0))));
    vec4 _667 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _679 = (_640 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_559.x * 2.0) + (-1.0)))) + (((_667.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _680 = (_641 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_559.y * 2.0) + (-1.0)))) + (((_667.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    vec4 _692 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _296) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _297) + cbTextureTilingScale._m0[19u].w));
    float _694 = _692.x;
    float _695 = 1.0 - _694;
    float _721 = (TEXCOORD_8.x - ((cbMtdParam._m0[22u].w * (1.0 - TEXCOORD_8.x)) * ((((_694 - _695) * cbMtdParam._m0[24u].y) + _695) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3724 = isnan(0.0) ? _721 : (isnan(_721) ? 0.0 : max(_721, 0.0));
    float _722 = isnan(1.0) ? _3724 : (isnan(_3724) ? 1.0 : min(_3724, 1.0));
    float _730 = ((((cbMtdParam._m0[10u].x - _545) * TEXCOORD_8.x) * cbMtdParam._m0[23u].w) * _722) + _545;
    float _731 = ((((cbMtdParam._m0[10u].y - _546) * TEXCOORD_8.y) * cbMtdParam._m0[23u].w) * _722) + _546;
    float _732 = (((cbMtdParam._m0[23u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _547)) * _722) + _547;
    float _737 = (((_559.z - _637) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _637;
    float _741 = ((_667.z - _737) * cbMtdParam._m0[19u].w) + _737;
    float _745 = ((cbMtdParam._m0[23u].y - _741) * _722) + _741;
    vec4 _764 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _296) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _297) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _770 = (_764.x * 2.0) + (-1.0);
    float _771 = (_764.y * 2.0) + (-1.0);
    float _772 = dot(vec2(_770, _771), vec2(_770, _771));
    float _3735 = isnan(0.0) ? _772 : (isnan(_772) ? 0.0 : max(_772, 0.0));
    float _788 = (_722 * (((cbMtdParam._m0[22u].z * _679) - _679) + _770)) + _679;
    float _789 = (_722 * (((cbMtdParam._m0[22u].z * _680) - _680) + _771)) + _680;
    float _790 = (_722 * (sqrt(1.0 - (isnan(1.0) ? _3735 : (isnan(_3735) ? 1.0 : min(_3735, 1.0)))) - _647)) + _647;
    float _792 = cbMtdParam._m0[22u].x + _667.w;
    float _795 = fma(_790, _245 * NORMAL.x, fma(_789, _252 * TANGENT.x, (_238 * _230) * _788));
    float _798 = fma(_790, _245 * NORMAL.y, fma(_789, _252 * TANGENT.y, (_238 * _231) * _788));
    float _801 = fma(_790, _245 * NORMAL.z, fma(_789, _252 * TANGENT.z, (_238 * _232) * _788));
    float _805 = inversesqrt(dot(vec3(_795, _798, _801), vec3(_795, _798, _801)));
    float _806 = _805 * _795;
    float _807 = _805 * _798;
    float _808 = _805 * _801;
    float _3746 = isnan(0.0) ? _745 : (isnan(_745) ? 0.0 : max(_745, 0.0));
    float _809 = isnan(1.0) ? _3746 : (isnan(_3746) ? 1.0 : min(_3746, 1.0));
    float _3757 = isnan(0.0) ? _792 : (isnan(_792) ? 0.0 : max(_792, 0.0));
    float _3768 = isnan(0.0) ? _730 : (isnan(_730) ? 0.0 : max(_730, 0.0));
    float _3779 = isnan(0.0) ? _731 : (isnan(_731) ? 0.0 : max(_731, 0.0));
    float _3790 = isnan(0.0) ? _732 : (isnan(_732) ? 0.0 : max(_732, 0.0));
    float _827 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _868 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _878 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _868);
    float _879 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _868);
    float _880 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _868);
    float _884 = inversesqrt(dot(vec3(_878, _879, _880), vec3(_878, _879, _880)));
    float _885 = _878 * _884;
    float _886 = _879 * _884;
    float _887 = _880 * _884;
    float _893 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _894 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _912 = fma(_808, cbSceneParam._m0[5u].z, fma(_807, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _806));
    float _915 = fma(_808, cbSceneParam._m0[6u].z, fma(_807, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _806));
    float _918 = fma(_808, cbSceneParam._m0[7u].z, fma(_807, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _806));
    uint _932 = (_277 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _938 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3768 : (isnan(_3768) ? 1.0 : min(_3768, 1.0)))) * cbInstanceData._m0[_932].x;
    float _939 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3779 : (isnan(_3779) ? 1.0 : min(_3779, 1.0)))) * cbInstanceData._m0[_932].y;
    float _940 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3790 : (isnan(_3790) ? 1.0 : min(_3790, 1.0)))) * cbInstanceData._m0[_932].z;
    float _3801 = isnan(0.0) ? _938 : (isnan(_938) ? 0.0 : max(_938, 0.0));
    float _941 = isnan(1.0) ? _3801 : (isnan(_3801) ? 1.0 : min(_3801, 1.0));
    float _3812 = isnan(0.0) ? _939 : (isnan(_939) ? 0.0 : max(_939, 0.0));
    float _942 = isnan(1.0) ? _3812 : (isnan(_3812) ? 1.0 : min(_3812, 1.0));
    float _3823 = isnan(0.0) ? _940 : (isnan(_940) ? 0.0 : max(_940, 0.0));
    float _943 = isnan(1.0) ? _3823 : (isnan(_3823) ? 1.0 : min(_3823, 1.0));
    vec4 _952 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _893, cbSceneParam._m0[86u].y * _894));
    float _956 = ((isnan(1.0) ? _3757 : (isnan(_3757) ? 1.0 : min(_3757, 1.0))) * TEXCOORD_5.w) * _952.x;
    float _957 = dot(vec3(_806, _807, _808), vec3(_885, _886, _887));
    float _960 = _957 * 2.0;
    float _964 = (_960 * _806) - _885;
    float _965 = (_960 * _807) - _886;
    float _966 = (_960 * _808) - _887;
    float _970 = abs(dot(vec3(_885, _886, _887), vec3(_806, _807, _808)));
    float _3834 = isnan(0.0) ? _970 : (isnan(_970) ? 0.0 : max(_970, 0.0));
    float _972 = sqrt(_809);
    float _985 = exp2((_972 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3834 : (isnan(_3834) ? 1.0 : min(_3834, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_972 * 3.0));
    float _1017 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1021 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1025 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1326;
    float _1328;
    float _1329;
    float _1330;
    float _1331;
    float _1332;
    float _1333;
    float _1334;
    float _1335;
    float _1336;
    float _1337;
    float _1338;
    float _1339;
    float _1340;
    float _1341;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1051 = fma(_1025, cbModelParam._m0[26u].z, fma(_1021, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1017));
        float _1055 = fma(_1025, cbModelParam._m0[27u].z, fma(_1021, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1017));
        float _1059 = fma(_1025, cbModelParam._m0[28u].z, fma(_1021, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1017));
        float _1084 = _1017 + _806;
        float _1085 = _1021 + _807;
        float _1086 = _1025 + _808;
        float _1096 = fma(_1086, cbModelParam._m0[26u].z, fma(_1085, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1084)) - _1051;
        float _1097 = fma(_1086, cbModelParam._m0[27u].z, fma(_1085, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1084)) - _1055;
        float _1098 = fma(_1086, cbModelParam._m0[28u].z, fma(_1085, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1084)) - _1059;
        float _1102 = inversesqrt(dot(vec3(_1096, _1097, _1098), vec3(_1096, _1097, _1098)));
        float _1115 = ((_1102 * _1096) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1051 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1116 = ((_1102 * _1097) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1055 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1117 = ((_1102 * _1098) / cbModelParam._m0[34u].z) + ((((((_1059 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1120 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1115, _1116, _1117), 0.0);
        vec4 _1127 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1115, _1116, _1117), 0.0);
        vec4 _1134 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1115, _1116, _1117), 0.0);
        vec4 _1141 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1115, _1116, _1117), 0.0);
        float _1154 = exp2((_1120.w + (-0.5)) * 20.0) * 2.0;
        float _1155 = _1154 * (_1120.x + (-0.5));
        float _1156 = _1154 * (_1120.y + (-0.5));
        float _1157 = _1154 * (_1120.z + (-0.5));
        float _1164 = exp2((_1127.w + (-0.5)) * 20.0) * 2.0;
        float _1165 = _1164 * (_1127.x + (-0.5));
        float _1166 = _1164 * (_1127.y + (-0.5));
        float _1167 = _1164 * (_1127.z + (-0.5));
        float _1174 = exp2((_1134.w + (-0.5)) * 20.0) * 2.0;
        float _1175 = _1174 * (_1134.x + (-0.5));
        float _1176 = _1174 * (_1134.y + (-0.5));
        float _1177 = _1174 * (_1134.z + (-0.5));
        float _1184 = exp2((_1141.w + (-0.5)) * 20.0) * 2.0;
        float _1185 = _1184 * (_1141.x + (-0.5));
        float _1186 = _1184 * (_1141.y + (-0.5));
        float _1187 = _1184 * (_1141.z + (-0.5));
        float _1188 = isnan(0.0) ? _1185 : (isnan(_1185) ? 0.0 : max(_1185, 0.0));
        float _1189 = isnan(0.0) ? _1186 : (isnan(_1186) ? 0.0 : max(_1186, 0.0));
        float _1190 = isnan(0.0) ? _1187 : (isnan(_1187) ? 0.0 : max(_1187, 0.0));
        float _1191 = _1155 * 0.5;
        float _1192 = _1165 * 0.5;
        float _1193 = _1175 * 0.5;
        float _1194 = dot(vec3(_1191, _1192, _1193), vec3(_1191, _1192, _1193));
        float _1199 = (_1194 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1194);
        float _1208 = (dot(vec3(_806, _807, _808), vec3(_1199 * _1191, _1199 * _1192, _1199 * _1193)) + 1.0) * 0.5;
        float _3860 = isnan(0.0) ? _1208 : (isnan(_1208) ? 0.0 : max(_1208, 0.0));
        float _1218 = sqrt(((_1192 * _1192) + (_1191 * _1191)) + (_1193 * _1193)) / (_1188 + 9.9999997473787516355514526367188e-06);
        float _3871 = isnan(0.0) ? _1218 : (isnan(_1218) ? 0.0 : max(_1218, 0.0));
        float _1219 = isnan(1.0) ? _3871 : (isnan(_3871) ? 1.0 : min(_3871, 1.0));
        float _1220 = _1219 * 2.0;
        float _1224 = (1.0 - _1219) / (_1219 + 1.0);
        float _3882 = isnan(0.0) ? _1224 : (isnan(_1224) ? 0.0 : max(_1224, 0.0));
        float _1225 = isnan(1.0) ? _3882 : (isnan(_3882) ? 1.0 : min(_3882, 1.0));
        float _1234 = ((((1.0 - _1225) * (_1220 + 2.0)) * exp2(log2(isnan(1.0) ? _3860 : (isnan(_3860) ? 1.0 : min(_3860, 1.0))) * (_1220 + 1.0))) + _1225) * _1188;
        float _1235 = _1156 * 0.5;
        float _1236 = _1166 * 0.5;
        float _1237 = _1176 * 0.5;
        float _1238 = dot(vec3(_1235, _1236, _1237), vec3(_1235, _1236, _1237));
        float _1243 = (_1238 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1238);
        float _1251 = (dot(vec3(_806, _807, _808), vec3(_1243 * _1235, _1243 * _1236, _1243 * _1237)) + 1.0) * 0.5;
        float _3893 = isnan(0.0) ? _1251 : (isnan(_1251) ? 0.0 : max(_1251, 0.0));
        float _1260 = sqrt(((_1236 * _1236) + (_1235 * _1235)) + (_1237 * _1237)) / (_1189 + 9.9999997473787516355514526367188e-06);
        float _3904 = isnan(0.0) ? _1260 : (isnan(_1260) ? 0.0 : max(_1260, 0.0));
        float _1261 = isnan(1.0) ? _3904 : (isnan(_3904) ? 1.0 : min(_3904, 1.0));
        float _1262 = _1261 * 2.0;
        float _1266 = (1.0 - _1261) / (_1261 + 1.0);
        float _3915 = isnan(0.0) ? _1266 : (isnan(_1266) ? 0.0 : max(_1266, 0.0));
        float _1267 = isnan(1.0) ? _3915 : (isnan(_3915) ? 1.0 : min(_3915, 1.0));
        float _1276 = ((((1.0 - _1267) * (_1262 + 2.0)) * exp2(log2(isnan(1.0) ? _3893 : (isnan(_3893) ? 1.0 : min(_3893, 1.0))) * (_1262 + 1.0))) + _1267) * _1189;
        float _1277 = _1157 * 0.5;
        float _1278 = _1167 * 0.5;
        float _1279 = _1177 * 0.5;
        float _1280 = dot(vec3(_1277, _1278, _1279), vec3(_1277, _1278, _1279));
        float _1285 = (_1280 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1280);
        float _1293 = (dot(vec3(_806, _807, _808), vec3(_1285 * _1277, _1285 * _1278, _1285 * _1279)) + 1.0) * 0.5;
        float _3926 = isnan(0.0) ? _1293 : (isnan(_1293) ? 0.0 : max(_1293, 0.0));
        float _1302 = sqrt(((_1278 * _1278) + (_1277 * _1277)) + (_1279 * _1279)) / (_1190 + 9.9999997473787516355514526367188e-06);
        float _3937 = isnan(0.0) ? _1302 : (isnan(_1302) ? 0.0 : max(_1302, 0.0));
        float _1303 = isnan(1.0) ? _3937 : (isnan(_3937) ? 1.0 : min(_3937, 1.0));
        float _1304 = _1303 * 2.0;
        float _1308 = (1.0 - _1303) / (_1303 + 1.0);
        float _3948 = isnan(0.0) ? _1308 : (isnan(_1308) ? 0.0 : max(_1308, 0.0));
        float _1309 = isnan(1.0) ? _3948 : (isnan(_3948) ? 1.0 : min(_3948, 1.0));
        float _1318 = ((((1.0 - _1309) * (_1304 + 2.0)) * exp2(log2(isnan(1.0) ? _3926 : (isnan(_3926) ? 1.0 : min(_3926, 1.0))) * (_1304 + 1.0))) + _1309) * _1190;
        _1326 = _1157;
        _1328 = _1156;
        _1329 = _1155;
        _1330 = _1167;
        _1331 = _1166;
        _1332 = _1165;
        _1333 = _1177;
        _1334 = _1176;
        _1335 = _1175;
        _1336 = _1190;
        _1337 = _1189;
        _1338 = _1188;
        _1339 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1234 : (isnan(_1234) ? 0.0 : max(_1234, 0.0)));
        _1340 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1276 : (isnan(_1276) ? 0.0 : max(_1276, 0.0)));
        _1341 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1318 : (isnan(_1318) ? 0.0 : max(_1318, 0.0)));
    }
    else
    {
        _1326 = _1327;
        _1328 = _1327;
        _1329 = _1327;
        _1330 = _1327;
        _1331 = _1327;
        _1332 = _1327;
        _1333 = _1327;
        _1334 = _1327;
        _1335 = _1327;
        _1336 = _1327;
        _1337 = _1327;
        _1338 = _1327;
        _1339 = 0.0;
        _1340 = 0.0;
        _1341 = 0.0;
    }
    float _1634;
    float _1635;
    float _1636;
    float _1637;
    float _1638;
    float _1639;
    float _1640;
    float _1641;
    float _1642;
    float _1643;
    float _1644;
    float _1645;
    float _1646;
    float _1647;
    float _1648;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1365 = fma(_1025, cbModelParam._m0[30u].z, fma(_1021, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1017));
        float _1369 = fma(_1025, cbModelParam._m0[31u].z, fma(_1021, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1017));
        float _1373 = fma(_1025, cbModelParam._m0[32u].z, fma(_1021, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1017));
        float _1396 = _1017 + _806;
        float _1397 = _1021 + _807;
        float _1398 = _1025 + _808;
        float _1408 = fma(_1398, cbModelParam._m0[30u].z, fma(_1397, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1396)) - _1365;
        float _1409 = fma(_1398, cbModelParam._m0[31u].z, fma(_1397, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1396)) - _1369;
        float _1410 = fma(_1398, cbModelParam._m0[32u].z, fma(_1397, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1396)) - _1373;
        float _1414 = inversesqrt(dot(vec3(_1408, _1409, _1410), vec3(_1408, _1409, _1410)));
        float _1427 = ((_1414 * _1408) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1365 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1428 = ((_1414 * _1409) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1369 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1429 = ((_1414 * _1410) / cbModelParam._m0[35u].z) + ((((((_1373 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1431 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1427, _1428, _1429), 0.0);
        vec4 _1438 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1427, _1428, _1429), 0.0);
        vec4 _1445 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1427, _1428, _1429), 0.0);
        vec4 _1452 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1427, _1428, _1429), 0.0);
        float _1464 = exp2((_1431.w + (-0.5)) * 20.0) * 2.0;
        float _1465 = _1464 * (_1431.x + (-0.5));
        float _1466 = _1464 * (_1431.y + (-0.5));
        float _1467 = _1464 * (_1431.z + (-0.5));
        float _1474 = exp2((_1438.w + (-0.5)) * 20.0) * 2.0;
        float _1475 = _1474 * (_1438.x + (-0.5));
        float _1476 = _1474 * (_1438.y + (-0.5));
        float _1477 = _1474 * (_1438.z + (-0.5));
        float _1484 = exp2((_1445.w + (-0.5)) * 20.0) * 2.0;
        float _1485 = _1484 * (_1445.x + (-0.5));
        float _1486 = _1484 * (_1445.y + (-0.5));
        float _1487 = _1484 * (_1445.z + (-0.5));
        float _1494 = exp2((_1452.w + (-0.5)) * 20.0) * 2.0;
        float _1495 = _1494 * (_1452.x + (-0.5));
        float _1496 = _1494 * (_1452.y + (-0.5));
        float _1497 = _1494 * (_1452.z + (-0.5));
        float _1498 = isnan(0.0) ? _1495 : (isnan(_1495) ? 0.0 : max(_1495, 0.0));
        float _1499 = isnan(0.0) ? _1496 : (isnan(_1496) ? 0.0 : max(_1496, 0.0));
        float _1500 = isnan(0.0) ? _1497 : (isnan(_1497) ? 0.0 : max(_1497, 0.0));
        float _1501 = _1465 * 0.5;
        float _1502 = _1475 * 0.5;
        float _1503 = _1485 * 0.5;
        float _1504 = dot(vec3(_1501, _1502, _1503), vec3(_1501, _1502, _1503));
        float _1509 = (_1504 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1504);
        float _1517 = (dot(vec3(_806, _807, _808), vec3(_1509 * _1501, _1509 * _1502, _1509 * _1503)) + 1.0) * 0.5;
        float _3989 = isnan(0.0) ? _1517 : (isnan(_1517) ? 0.0 : max(_1517, 0.0));
        float _1526 = sqrt(((_1502 * _1502) + (_1501 * _1501)) + (_1503 * _1503)) / (_1498 + 9.9999997473787516355514526367188e-06);
        float _4000 = isnan(0.0) ? _1526 : (isnan(_1526) ? 0.0 : max(_1526, 0.0));
        float _1527 = isnan(1.0) ? _4000 : (isnan(_4000) ? 1.0 : min(_4000, 1.0));
        float _1528 = _1527 * 2.0;
        float _1532 = (1.0 - _1527) / (_1527 + 1.0);
        float _4011 = isnan(0.0) ? _1532 : (isnan(_1532) ? 0.0 : max(_1532, 0.0));
        float _1533 = isnan(1.0) ? _4011 : (isnan(_4011) ? 1.0 : min(_4011, 1.0));
        float _1542 = ((((1.0 - _1533) * (_1528 + 2.0)) * exp2(log2(isnan(1.0) ? _3989 : (isnan(_3989) ? 1.0 : min(_3989, 1.0))) * (_1528 + 1.0))) + _1533) * _1498;
        float _1543 = _1466 * 0.5;
        float _1544 = _1476 * 0.5;
        float _1545 = _1486 * 0.5;
        float _1546 = dot(vec3(_1543, _1544, _1545), vec3(_1543, _1544, _1545));
        float _1551 = (_1546 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1546);
        float _1559 = (dot(vec3(_806, _807, _808), vec3(_1551 * _1543, _1551 * _1544, _1551 * _1545)) + 1.0) * 0.5;
        float _4022 = isnan(0.0) ? _1559 : (isnan(_1559) ? 0.0 : max(_1559, 0.0));
        float _1568 = sqrt(((_1544 * _1544) + (_1543 * _1543)) + (_1545 * _1545)) / (_1499 + 9.9999997473787516355514526367188e-06);
        float _4033 = isnan(0.0) ? _1568 : (isnan(_1568) ? 0.0 : max(_1568, 0.0));
        float _1569 = isnan(1.0) ? _4033 : (isnan(_4033) ? 1.0 : min(_4033, 1.0));
        float _1570 = _1569 * 2.0;
        float _1574 = (1.0 - _1569) / (_1569 + 1.0);
        float _4044 = isnan(0.0) ? _1574 : (isnan(_1574) ? 0.0 : max(_1574, 0.0));
        float _1575 = isnan(1.0) ? _4044 : (isnan(_4044) ? 1.0 : min(_4044, 1.0));
        float _1584 = ((((1.0 - _1575) * (_1570 + 2.0)) * exp2(log2(isnan(1.0) ? _4022 : (isnan(_4022) ? 1.0 : min(_4022, 1.0))) * (_1570 + 1.0))) + _1575) * _1499;
        float _1585 = _1467 * 0.5;
        float _1586 = _1477 * 0.5;
        float _1587 = _1487 * 0.5;
        float _1588 = dot(vec3(_1585, _1586, _1587), vec3(_1585, _1586, _1587));
        float _1593 = (_1588 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1588);
        float _1601 = (dot(vec3(_806, _807, _808), vec3(_1593 * _1585, _1593 * _1586, _1593 * _1587)) + 1.0) * 0.5;
        float _4055 = isnan(0.0) ? _1601 : (isnan(_1601) ? 0.0 : max(_1601, 0.0));
        float _1610 = sqrt(((_1586 * _1586) + (_1585 * _1585)) + (_1587 * _1587)) / (_1500 + 9.9999997473787516355514526367188e-06);
        float _4066 = isnan(0.0) ? _1610 : (isnan(_1610) ? 0.0 : max(_1610, 0.0));
        float _1611 = isnan(1.0) ? _4066 : (isnan(_4066) ? 1.0 : min(_4066, 1.0));
        float _1612 = _1611 * 2.0;
        float _1616 = (1.0 - _1611) / (_1611 + 1.0);
        float _4077 = isnan(0.0) ? _1616 : (isnan(_1616) ? 0.0 : max(_1616, 0.0));
        float _1617 = isnan(1.0) ? _4077 : (isnan(_4077) ? 1.0 : min(_4077, 1.0));
        float _1626 = ((((1.0 - _1617) * (_1612 + 2.0)) * exp2(log2(isnan(1.0) ? _4055 : (isnan(_4055) ? 1.0 : min(_4055, 1.0))) * (_1612 + 1.0))) + _1617) * _1500;
        _1634 = _1467;
        _1635 = _1466;
        _1636 = _1465;
        _1637 = _1477;
        _1638 = _1476;
        _1639 = _1475;
        _1640 = _1487;
        _1641 = _1486;
        _1642 = _1485;
        _1643 = _1500;
        _1644 = _1499;
        _1645 = _1498;
        _1646 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1542 : (isnan(_1542) ? 0.0 : max(_1542, 0.0)));
        _1647 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1584 : (isnan(_1584) ? 0.0 : max(_1584, 0.0)));
        _1648 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1626 : (isnan(_1626) ? 0.0 : max(_1626, 0.0)));
    }
    else
    {
        _1634 = _1327;
        _1635 = _1327;
        _1636 = _1327;
        _1637 = _1327;
        _1638 = _1327;
        _1639 = _1327;
        _1640 = _1327;
        _1641 = _1327;
        _1642 = _1327;
        _1643 = _1327;
        _1644 = _1327;
        _1645 = _1327;
        _1646 = 0.0;
        _1647 = 0.0;
        _1648 = 0.0;
    }
    float _1658 = (cbModelParam._m0[1u].x * (_1646 - _1339)) + _1339;
    float _1659 = (cbModelParam._m0[1u].x * (_1647 - _1340)) + _1340;
    float _1660 = (cbModelParam._m0[1u].x * (_1648 - _1341)) + _1341;
    float _1681 = fma(_1660, cbSceneParam._m0[89u].z, fma(_1659, cbSceneParam._m0[89u].y, _1658 * cbSceneParam._m0[89u].x));
    float _1684 = fma(_1660, cbSceneParam._m0[90u].z, fma(_1659, cbSceneParam._m0[90u].y, _1658 * cbSceneParam._m0[90u].x));
    float _1687 = fma(_1660, cbSceneParam._m0[91u].z, fma(_1659, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1658));
    float _1702 = _964 * 0.5;
    float _1703 = _965 * 0.5;
    float _1704 = _966 * 0.5;
    float _1705 = dot(vec4(_1702, _1703, _1704, 1.0), vec4(_1636, _1639, _1642, _1645));
    float _1708 = dot(vec4(_1702, _1703, _1704, 1.0), vec4(_1635, _1638, _1641, _1644));
    float _1711 = dot(vec4(_1702, _1703, _1704, 1.0), vec4(_1634, _1637, _1640, _1643));
    float _1745;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1718 = dot(vec4(_1702, _1703, _1704, 1.0), vec4(_1326, _1330, _1333, _1336));
        float _1722 = dot(vec4(_1702, _1703, _1704, 1.0), vec4(_1328, _1331, _1334, _1337));
        float _1726 = dot(vec4(_1702, _1703, _1704, 1.0), vec4(_1329, _1332, _1335, _1338));
        float _1733 = dot(vec4(cbModelParam._m0[39u]), vec4(_1702, _1703, _1704, 1.0));
        _1745 = dot(vec3(isnan(0.0) ? _1726 : (isnan(_1726) ? 0.0 : max(_1726, 0.0)), isnan(0.0) ? _1722 : (isnan(_1722) ? 0.0 : max(_1722, 0.0)), isnan(0.0) ? _1718 : (isnan(_1718) ? 0.0 : max(_1718, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1733) ? 0.0 : (isnan(0.0) ? _1733 : max(0.0, _1733))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1745 = 1.0;
    }
    float _1756;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1747 = dot(vec4(cbModelParam._m0[40u]), vec4(_1702, _1703, _1704, 1.0));
        _1756 = dot(vec3(isnan(0.0) ? _1705 : (isnan(_1705) ? 0.0 : max(_1705, 0.0)), isnan(0.0) ? _1708 : (isnan(_1708) ? 0.0 : max(_1708, 0.0)), isnan(0.0) ? _1711 : (isnan(_1711) ? 0.0 : max(_1711, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1747) ? 0.0 : (isnan(0.0) ? _1747 : max(0.0, _1747))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1756 = 1.0;
    }
    float _1760 = (_1756 * cbModelParam._m0[1u].x) + (_1745 * (1.0 - cbModelParam._m0[1u].x));
    float _1770 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _809);
    float _1771 = isnan(_1770) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1770 : min(cbModelParam._m0[25u].z, _1770));
    float _1853;
    float _1855;
    float _1857;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1820 = fma(_1025, cbModelParam._m0[13u].z, fma(_1021, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1017)) + cbModelParam._m0[13u].w;
        float _1824 = fma(_1025, cbModelParam._m0[14u].z, fma(_1021, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1017)) + cbModelParam._m0[14u].w;
        float _1828 = fma(_1025, cbModelParam._m0[15u].z, fma(_1021, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1017)) + cbModelParam._m0[15u].w;
        float _1831 = fma(_966, cbModelParam._m0[13u].z, fma(_965, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _964));
        float _1834 = fma(_966, cbModelParam._m0[14u].z, fma(_965, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _964));
        float _1837 = fma(_966, cbModelParam._m0[15u].z, fma(_965, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _964));
        float _1865;
        if (_1831 > 0.0)
        {
            _1865 = abs((1.0 - _1820) / _1831);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1831 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1820 + 1.0) / _1831);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1865 = frontier_phi_14_12_ladder;
        }
        float _2088;
        if (_1834 > 0.0)
        {
            _2088 = abs((1.0 - _1824) / _1834);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1834 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1824 + 1.0) / _1834);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2088 = frontier_phi_23_19_ladder;
        }
        float _2334;
        if (_1837 > 0.0)
        {
            _2334 = abs((1.0 - _1828) / _1837);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1837 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1828 + 1.0) / _1837);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2334 = frontier_phi_35_30_ladder;
        }
        float _2336 = isnan(_2088) ? _1865 : (isnan(_1865) ? _2088 : min(_1865, _2088));
        float _2337 = isnan(_2334) ? _2336 : (isnan(_2336) ? _2334 : min(_2336, _2334));
        float _2341 = (_2337 * _1831) + _1820;
        float _2342 = (_2337 * _1834) + _1824;
        float _2343 = (_2337 * _1837) + _1828;
        float _2344 = _2337 * 9.9999997473787516355514526367188e-05;
        float _2346 = (-1.0) - _2344;
        float _2348 = _2344 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2343 > _2348) || ((_2343 < _2346) || ((_2342 > _2348) || ((_2342 < _2346) || ((_2341 < _2346) || (_2341 > _2348))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2467 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2343, cbModelParam._m0[9u].z, fma(_2342, cbModelParam._m0[9u].y, _2341 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2343, cbModelParam._m0[10u].z, fma(_2342, cbModelParam._m0[10u].y, _2341 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2343, cbModelParam._m0[11u].z, fma(_2342, cbModelParam._m0[11u].y, _2341 * cbModelParam._m0[11u].x))), _1771);
            frontier_phi_13_35_ladder = _2467.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2467.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2467.x * cbModelParam._m0[1u].y;
        }
        _1853 = frontier_phi_13_35_ladder_2;
        _1855 = frontier_phi_13_35_ladder_1;
        _1857 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1841 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_964, _965, _966), _1771);
        _1853 = _1841.x * cbModelParam._m0[1u].y;
        _1855 = _1841.y * cbModelParam._m0[1u].y;
        _1857 = _1841.z * cbModelParam._m0[1u].y;
    }
    float _1861 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _809);
    float _1862 = isnan(_1861) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1861 : min(cbModelParam._m0[25u].w, _1861));
    float _1953;
    float _1955;
    float _1957;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1917 = fma(_1025, cbModelParam._m0[21u].z, fma(_1021, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1017)) + cbModelParam._m0[21u].w;
        float _1921 = fma(_1025, cbModelParam._m0[22u].z, fma(_1021, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1017)) + cbModelParam._m0[22u].w;
        float _1925 = fma(_1025, cbModelParam._m0[23u].z, fma(_1021, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1017)) + cbModelParam._m0[23u].w;
        float _1928 = fma(_966, cbModelParam._m0[21u].z, fma(_965, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _964));
        float _1931 = fma(_966, cbModelParam._m0[22u].z, fma(_965, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _964));
        float _1934 = fma(_966, cbModelParam._m0[23u].z, fma(_965, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _964));
        float _2093;
        if (_1928 > 0.0)
        {
            _2093 = abs((1.0 - _1917) / _1928);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1928 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1917 + 1.0) / _1928);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2093 = frontier_phi_25_21_ladder;
        }
        float _2361;
        if (_1931 > 0.0)
        {
            _2361 = abs((1.0 - _1921) / _1931);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1931 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1921 + 1.0) / _1931);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2361 = frontier_phi_37_32_ladder;
        }
        float _2566;
        if (_1934 > 0.0)
        {
            _2566 = abs((1.0 - _1925) / _1934);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1934 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1925 + 1.0) / _1934);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2566 = frontier_phi_46_43_ladder;
        }
        float _2568 = isnan(_2361) ? _2093 : (isnan(_2093) ? _2361 : min(_2093, _2361));
        float _2569 = isnan(_2566) ? _2568 : (isnan(_2568) ? _2566 : min(_2568, _2566));
        float _2573 = (_2569 * _1928) + _1917;
        float _2574 = (_2569 * _1931) + _1921;
        float _2575 = (_2569 * _1934) + _1925;
        float _2576 = _2569 * 9.9999997473787516355514526367188e-05;
        float _2577 = (-1.0) - _2576;
        float _2579 = _2576 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2575 > _2579) || ((_2575 < _2577) || ((_2574 > _2579) || ((_2574 < _2577) || ((_2573 < _2577) || (_2573 > _2579))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2774 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2575, cbModelParam._m0[17u].z, fma(_2574, cbModelParam._m0[17u].y, _2573 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2575, cbModelParam._m0[18u].z, fma(_2574, cbModelParam._m0[18u].y, _2573 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2575, cbModelParam._m0[19u].z, fma(_2574, cbModelParam._m0[19u].y, _2573 * cbModelParam._m0[19u].x))), _1862);
            frontier_phi_22_46_ladder = _2774.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2774.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2774.x * cbModelParam._m0[1u].z;
        }
        _1953 = frontier_phi_22_46_ladder_2;
        _1955 = frontier_phi_22_46_ladder_1;
        _1957 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1937 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_964, _965, _966), _1862);
        _1953 = _1937.x * cbModelParam._m0[1u].z;
        _1955 = _1937.y * cbModelParam._m0[1u].z;
        _1957 = _1937.z * cbModelParam._m0[1u].z;
    }
    float _1969 = ((((1.0 - _985) * ((_972 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_985 * _972)) * _956;
    float _1970 = _1969 * ((cbModelParam._m0[1u].w * (_1953 - _1853)) + _1853);
    float _1971 = _1969 * ((cbModelParam._m0[1u].w * (_1955 - _1855)) + _1855);
    float _1972 = _1969 * ((cbModelParam._m0[1u].w * (_1957 - _1857)) + _1857);
    float _1975 = fma(_1972, cbSceneParam._m0[89u].z, fma(_1971, cbSceneParam._m0[89u].y, _1970 * cbSceneParam._m0[89u].x));
    float _1978 = fma(_1972, cbSceneParam._m0[90u].z, fma(_1971, cbSceneParam._m0[90u].y, _1970 * cbSceneParam._m0[90u].x));
    float _1981 = fma(_1972, cbSceneParam._m0[91u].z, fma(_1971, cbSceneParam._m0[91u].y, _1970 * cbSceneParam._m0[91u].x));
    vec4 _1989 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_893, _894));
    float _1991 = _1989.w;
    float _2003 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1991);
    float _2004 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1991);
    float _2005 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1991);
    uvec4 _2009 = floatBitsToUint(cbInstanceData._m0[_277 + 5u]);
    uint _2011 = _2009.x * 14u;
    uint _2012 = _2011 + 13u;
    float _2019 = _956 + (-1.0);
    float _2024 = (cbLight._m0[_2012].x * _2019) + 1.0;
    float _2025 = (cbLight._m0[_2012].y * _2019) + 1.0;
    float _2026 = (cbLight._m0[_2012].z * _2019) + 1.0;
    float _2027 = (cbLight._m0[_2012].w * _2019) + 1.0;
    uint _2028 = _2011 + 5u;
    float _2034 = isnan(1.0) ? _2025 : (isnan(_2025) ? 1.0 : min(_2025, 1.0));
    uint _2038 = _2011 + 4u;
    float _2047 = isnan(1.0) ? _2024 : (isnan(_2024) ? 1.0 : min(_2024, 1.0));
    uint _2051 = _2011 | 1u;
    float _2062 = dot(vec3(cbLight._m0[_2011].xyz), vec3(_806, _807, _808));
    float _2065 = dot(vec3(cbLight._m0[_2051].xyz), vec3(_806, _807, _808));
    float _4213 = isnan(0.0) ? _2062 : (isnan(_2062) ? 0.0 : max(_2062, 0.0));
    float _4224 = isnan(0.0) ? _2065 : (isnan(_2065) ? 0.0 : max(_2065, 0.0));
    float _2070 = (isnan(1.0) ? _4213 : (isnan(_4213) ? 1.0 : min(_4213, 1.0))) * 0.3183098733425140380859375;
    float _2072 = (isnan(1.0) ? _4224 : (isnan(_4224) ? 1.0 : min(_4224, 1.0))) * 0.3183098733425140380859375;
    float _2079 = ((cbLight._m0[_2028].x * _2034) * _2072) + (((cbLight._m0[_2038].x * _2003) * _2047) * _2070);
    float _2080 = ((_2034 * cbLight._m0[_2028].y) * _2072) + (((cbLight._m0[_2038].y * _2004) * _2047) * _2070);
    float _2081 = ((_2034 * cbLight._m0[_2028].z) * _2072) + (((cbLight._m0[_2038].z * _2005) * _2047) * _2070);
    uvec4 _2085 = floatBitsToUint(cbLight._m0[_2011 + 12u]);
    bool _2087 = _2085.x == 0u;
    float _2098;
    float _2100;
    float _2102;
    if (_2087)
    {
        _2098 = _2079;
        _2100 = _2080;
        _2102 = _2081;
    }
    else
    {
        uint _2106 = _2011 + 6u;
        float _2122 = (dot(vec3(cbLight._m0[_2011 + 2u].xyz), vec3(_806, _807, _808)) * 0.5) + 0.5;
        float _2123 = _2122 * _2122;
        float _4235 = isnan(0.0) ? _2123 : (isnan(_2123) ? 0.0 : max(_2123, 0.0));
        float _2124 = isnan(1.0) ? _4235 : (isnan(_4235) ? 1.0 : min(_4235, 1.0));
        float _2125 = isnan(1.0) ? _2026 : (isnan(_2026) ? 1.0 : min(_2026, 1.0));
        _2098 = (((cbLight._m0[_2106].x * 0.3183098733425140380859375) * _2124) * _2125) + _2079;
        _2100 = (((cbLight._m0[_2106].y * 0.3183098733425140380859375) * _2124) * _2125) + _2080;
        _2102 = (((cbLight._m0[_2106].z * 0.3183098733425140380859375) * _2124) * _2125) + _2081;
    }
    bool _2105 = _2085.y == 0u;
    float _2143;
    float _2145;
    float _2147;
    if (_2105)
    {
        _2143 = _2098;
        _2145 = _2100;
        _2147 = _2102;
    }
    else
    {
        uint _2305 = _2011 + 7u;
        float _2321 = (dot(vec3(cbLight._m0[_2011 + 3u].xyz), vec3(_806, _807, _808)) * 0.5) + 0.5;
        float _2322 = _2321 * _2321;
        float _4251 = isnan(0.0) ? _2322 : (isnan(_2322) ? 0.0 : max(_2322, 0.0));
        float _2323 = isnan(1.0) ? _4251 : (isnan(_4251) ? 1.0 : min(_4251, 1.0));
        float _2324 = isnan(1.0) ? _2027 : (isnan(_2027) ? 1.0 : min(_2027, 1.0));
        _2143 = (((cbLight._m0[_2305].x * 0.3183098733425140380859375) * _2323) * _2324) + _2098;
        _2145 = (((cbLight._m0[_2305].y * 0.3183098733425140380859375) * _2323) * _2324) + _2100;
        _2147 = (((cbLight._m0[_2305].z * 0.3183098733425140380859375) * _2323) * _2324) + _2102;
    }
    uint _2150 = _2011 + 8u;
    float _2163 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2011].w)) * _809) * 0.949999988079071044921875);
    float _2164 = _2163 * _2163;
    float _2165 = cbLight._m0[_2011].x + _885;
    float _2166 = cbLight._m0[_2011].y + _886;
    float _2167 = cbLight._m0[_2011].z + _887;
    float _2171 = inversesqrt(dot(vec3(_2165, _2166, _2167), vec3(_2165, _2166, _2167)));
    float _2172 = _2171 * _2165;
    float _2173 = _2171 * _2166;
    float _2174 = _2171 * _2167;
    float _2175 = dot(vec3(_806, _807, _808), vec3(cbLight._m0[_2011].xyz));
    float _4267 = isnan(0.0) ? _2175 : (isnan(_2175) ? 0.0 : max(_2175, 0.0));
    float _2178 = isnan(1.0) ? _4267 : (isnan(_4267) ? 1.0 : min(_4267, 1.0));
    float _4278 = isnan(0.0) ? _957 : (isnan(_957) ? 0.0 : max(_957, 0.0));
    float _2179 = isnan(1.0) ? _4278 : (isnan(_4278) ? 1.0 : min(_4278, 1.0));
    float _2180 = dot(vec3(_806, _807, _808), vec3(_2172, _2173, _2174));
    float _4289 = isnan(0.0) ? _2180 : (isnan(_2180) ? 0.0 : max(_2180, 0.0));
    float _2183 = isnan(1.0) ? _4289 : (isnan(_4289) ? 1.0 : min(_4289, 1.0));
    float _2184 = dot(vec3(cbLight._m0[_2011].xyz), vec3(_2172, _2173, _2174));
    float _4300 = isnan(0.0) ? _2184 : (isnan(_2184) ? 0.0 : max(_2184, 0.0));
    float _2188 = _2164 * _2164;
    float _2192 = ((_2183 * _2183) * (_2188 + (-1.0))) + 1.0;
    float _2203 = (exp2(log2(1.0 - (isnan(1.0) ? _4300 : (isnan(_4300) ? 1.0 : min(_4300, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2204 = 1.0 - _2164;
    float _2215 = (0.5 / (((_2179 * ((_2178 * _2204) + _2164)) + 9.9999999392252902907785028219223e-09) + (((_2179 * _2204) + _2164) * _2178))) * _2178;
    float _4311 = isnan(0.0) ? _2215 : (isnan(_2215) ? 0.0 : max(_2215, 0.0));
    float _2217 = (isnan(1.0) ? _4311 : (isnan(_4311) ? 1.0 : min(_4311, 1.0))) * (_2188 / ((_2192 * _2192) * 3.141590118408203125));
    uint _2231 = _2011 + 9u;
    float _2242 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2051].w)) * _809) * 0.949999988079071044921875);
    float _2243 = _2242 * _2242;
    float _2244 = cbLight._m0[_2051].x + _885;
    float _2245 = cbLight._m0[_2051].y + _886;
    float _2246 = cbLight._m0[_2051].z + _887;
    float _2250 = inversesqrt(dot(vec3(_2244, _2245, _2246), vec3(_2244, _2245, _2246)));
    float _2251 = _2250 * _2244;
    float _2252 = _2250 * _2245;
    float _2253 = _2250 * _2246;
    float _2254 = dot(vec3(_806, _807, _808), vec3(cbLight._m0[_2051].xyz));
    float _4322 = isnan(0.0) ? _2254 : (isnan(_2254) ? 0.0 : max(_2254, 0.0));
    float _2257 = isnan(1.0) ? _4322 : (isnan(_4322) ? 1.0 : min(_4322, 1.0));
    float _2258 = dot(vec3(_806, _807, _808), vec3(_2251, _2252, _2253));
    float _4333 = isnan(0.0) ? _2258 : (isnan(_2258) ? 0.0 : max(_2258, 0.0));
    float _2261 = isnan(1.0) ? _4333 : (isnan(_4333) ? 1.0 : min(_4333, 1.0));
    float _2262 = dot(vec3(cbLight._m0[_2051].xyz), vec3(_2251, _2252, _2253));
    float _4344 = isnan(0.0) ? _2262 : (isnan(_2262) ? 0.0 : max(_2262, 0.0));
    float _2266 = _2243 * _2243;
    float _2270 = ((_2261 * _2261) * (_2266 + (-1.0))) + 1.0;
    float _2279 = (exp2(log2(1.0 - (isnan(1.0) ? _4344 : (isnan(_4344) ? 1.0 : min(_4344, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2280 = 1.0 - _2243;
    float _2290 = (0.5 / (((_2179 * ((_2257 * _2280) + _2243)) + 9.9999999392252902907785028219223e-09) + (((_2179 * _2280) + _2243) * _2257))) * _2257;
    float _4355 = isnan(0.0) ? _2290 : (isnan(_2290) ? 0.0 : max(_2290, 0.0));
    float _2292 = (isnan(1.0) ? _4355 : (isnan(_4355) ? 1.0 : min(_4355, 1.0))) * (_2266 / ((_2270 * _2270) * 3.141590118408203125));
    float _2302 = (((_2279 * cbLight._m0[_2231].x) * _2292) * _2034) + ((((cbLight._m0[_2150].x * _2003) * _2203) * _2217) * _2047);
    float _2303 = (((_2279 * cbLight._m0[_2231].y) * _2292) * _2034) + ((((cbLight._m0[_2150].y * _2004) * _2203) * _2217) * _2047);
    float _2304 = (((_2279 * cbLight._m0[_2231].z) * _2292) * _2034) + ((((cbLight._m0[_2150].z * _2005) * _2203) * _2217) * _2047);
    float _2366;
    float _2368;
    float _2370;
    if (_2087)
    {
        _2366 = _2302;
        _2368 = _2303;
        _2370 = _2304;
    }
    else
    {
        uint _2372 = _2011 + 2u;
        uint _2376 = _2011 + 10u;
        float _2390 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2372].w)) * _809) * 0.949999988079071044921875);
        float _2391 = _2390 * _2390;
        float _2392 = cbLight._m0[_2372].x + _885;
        float _2393 = cbLight._m0[_2372].y + _886;
        float _2394 = cbLight._m0[_2372].z + _887;
        float _2398 = inversesqrt(dot(vec3(_2392, _2393, _2394), vec3(_2392, _2393, _2394)));
        float _2399 = _2398 * _2392;
        float _2400 = _2398 * _2393;
        float _2401 = _2398 * _2394;
        float _2402 = dot(vec3(_806, _807, _808), vec3(cbLight._m0[_2372].xyz));
        float _4366 = isnan(0.0) ? _2402 : (isnan(_2402) ? 0.0 : max(_2402, 0.0));
        float _2405 = isnan(1.0) ? _4366 : (isnan(_4366) ? 1.0 : min(_4366, 1.0));
        float _2406 = dot(vec3(_806, _807, _808), vec3(_2399, _2400, _2401));
        float _4377 = isnan(0.0) ? _2406 : (isnan(_2406) ? 0.0 : max(_2406, 0.0));
        float _2409 = isnan(1.0) ? _4377 : (isnan(_4377) ? 1.0 : min(_4377, 1.0));
        float _2410 = dot(vec3(cbLight._m0[_2372].xyz), vec3(_2399, _2400, _2401));
        float _4388 = isnan(0.0) ? _2410 : (isnan(_2410) ? 0.0 : max(_2410, 0.0));
        float _2414 = _2391 * _2391;
        float _2418 = ((_2409 * _2409) * (_2414 + (-1.0))) + 1.0;
        float _2427 = (exp2(log2(1.0 - (isnan(1.0) ? _4388 : (isnan(_4388) ? 1.0 : min(_4388, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2428 = 1.0 - _2391;
        float _2438 = (0.5 / (((_2179 * ((_2405 * _2428) + _2391)) + 9.9999999392252902907785028219223e-09) + (((_2179 * _2428) + _2391) * _2405))) * _2405;
        float _4399 = isnan(0.0) ? _2438 : (isnan(_2438) ? 0.0 : max(_2438, 0.0));
        float _2440 = (isnan(1.0) ? _4399 : (isnan(_4399) ? 1.0 : min(_4399, 1.0))) * (_2414 / ((_2418 * _2418) * 3.141590118408203125));
        float _2441 = isnan(1.0) ? _2026 : (isnan(_2026) ? 1.0 : min(_2026, 1.0));
        _2366 = (((_2427 * cbLight._m0[_2376].x) * _2440) * _2441) + _2302;
        _2368 = (((_2427 * cbLight._m0[_2376].y) * _2440) * _2441) + _2303;
        _2370 = (((_2427 * cbLight._m0[_2376].z) * _2440) * _2441) + _2304;
    }
    float _2476;
    float _2478;
    float _2480;
    if (_2105)
    {
        _2476 = _2366;
        _2478 = _2368;
        _2480 = _2370;
    }
    else
    {
        uint _2487 = _2011 + 3u;
        uint _2491 = _2011 + 11u;
        float _2505 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2487].w)) * _809) * 0.949999988079071044921875);
        float _2506 = _2505 * _2505;
        float _2507 = cbLight._m0[_2487].x + _885;
        float _2508 = cbLight._m0[_2487].y + _886;
        float _2509 = cbLight._m0[_2487].z + _887;
        float _2513 = inversesqrt(dot(vec3(_2507, _2508, _2509), vec3(_2507, _2508, _2509)));
        float _2514 = _2513 * _2507;
        float _2515 = _2513 * _2508;
        float _2516 = _2513 * _2509;
        float _2517 = dot(vec3(_806, _807, _808), vec3(cbLight._m0[_2487].xyz));
        float _4415 = isnan(0.0) ? _2517 : (isnan(_2517) ? 0.0 : max(_2517, 0.0));
        float _2520 = isnan(1.0) ? _4415 : (isnan(_4415) ? 1.0 : min(_4415, 1.0));
        float _2521 = dot(vec3(_806, _807, _808), vec3(_2514, _2515, _2516));
        float _4426 = isnan(0.0) ? _2521 : (isnan(_2521) ? 0.0 : max(_2521, 0.0));
        float _2524 = isnan(1.0) ? _4426 : (isnan(_4426) ? 1.0 : min(_4426, 1.0));
        float _2525 = dot(vec3(cbLight._m0[_2487].xyz), vec3(_2514, _2515, _2516));
        float _4437 = isnan(0.0) ? _2525 : (isnan(_2525) ? 0.0 : max(_2525, 0.0));
        float _2529 = _2506 * _2506;
        float _2533 = ((_2524 * _2524) * (_2529 + (-1.0))) + 1.0;
        float _2542 = (exp2(log2(1.0 - (isnan(1.0) ? _4437 : (isnan(_4437) ? 1.0 : min(_4437, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2543 = 1.0 - _2506;
        float _2553 = (0.5 / (((_2179 * ((_2520 * _2543) + _2506)) + 9.9999999392252902907785028219223e-09) + (((_2179 * _2543) + _2506) * _2520))) * _2520;
        float _4448 = isnan(0.0) ? _2553 : (isnan(_2553) ? 0.0 : max(_2553, 0.0));
        float _2555 = (isnan(1.0) ? _4448 : (isnan(_4448) ? 1.0 : min(_4448, 1.0))) * (_2529 / ((_2533 * _2533) * 3.141590118408203125));
        float _2556 = isnan(1.0) ? _2027 : (isnan(_2027) ? 1.0 : min(_2027, 1.0));
        _2476 = (((_2542 * cbLight._m0[_2491].x) * _2555) * _2556) + _2366;
        _2478 = (((_2542 * cbLight._m0[_2491].y) * _2555) * _2556) + _2368;
        _2480 = (((_2542 * cbLight._m0[_2491].z) * _2555) * _2556) + _2370;
    }
    float _2691;
    float _2693;
    float _2695;
    float _2697;
    float _2699;
    float _2701;
    if (_2009.y == 0u)
    {
        float _2631 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2632 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2631;
        float _2633 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2631;
        float _2634 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2631;
        uvec4 _2646 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2647 = _2646.x;
        uint _2658 = uint((float(_2646.y) * floor(float(uint(cbSceneParam._m0[85u].y * _894) / _2647))) + floor(float(uint(cbSceneParam._m0[85u].x * _893) / _2647)));
        float _2668 = (log2(_2634 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2669 = isnan(0.0) ? _2668 : (isnan(_2668) ? 0.0 : max(_2668, 0.0));
        uint _2672 = uint(isnan(14.0) ? _2669 : (isnan(_2669) ? 14.0 : min(_2669, 14.0)));
        uvec4 _2677 = texelFetch(g_lightClusterGridBuffer, int(((_2672 << 2u) + (_2658 << 6u)) >> 2u));
        uint _2678 = _2677.x;
        uint _2679 = _2646.z;
        float _2779;
        float _2781;
        float _2783;
        float _2785;
        float _2787;
        float _2789;
        if (((((1u << ((_2679 >> 4u) & 15u)) + 4294967295u) & _2678) == 0u) || ((_2679 & 240u) == 0u))
        {
            _2779 = 0.0;
            _2781 = 0.0;
            _2783 = 0.0;
            _2785 = 0.0;
            _2787 = 0.0;
            _2789 = 0.0;
        }
        else
        {
            float _2780;
            float _2782;
            float _2784;
            float _2786;
            float _2788;
            float _2790;
            float _2924 = 0.0;
            float _2925 = 0.0;
            float _2926 = 0.0;
            float _2927 = 0.0;
            float _2928 = 0.0;
            float _2929 = 0.0;
            uint _2930 = 0u;
            uint _2939;
            bool _2940;
            for (;;)
            {
                _2939 = texelFetch(g_lightClassification, int((((_2672 << 5u) + (_2658 << 9u)) + (_2930 << 2u)) >> 2u)).x;
                _2940 = _2939 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2940)
                {
                    frontier_phi_61_pred = _2924;
                    frontier_phi_61_pred_1 = _2929;
                    frontier_phi_61_pred_2 = _2928;
                    frontier_phi_61_pred_3 = _2927;
                    frontier_phi_61_pred_4 = _2926;
                    frontier_phi_61_pred_5 = _2925;
                }
                else
                {
                    float _3048;
                    float _3049;
                    float _3050;
                    float _3051;
                    float _3052;
                    float _3053;
                    uint _3054;
                    _3048 = _2924;
                    _3049 = _2925;
                    _3050 = _2926;
                    _3051 = _2927;
                    _3052 = _2928;
                    _3053 = _2929;
                    _3054 = _2939;
                    float _2980;
                    float _2981;
                    float _2982;
                    float _2983;
                    float _2984;
                    float _2985;
                    for (;;)
                    {
                        uint _3058 = uint(findLSB(_3054)) + (_2930 << 5u);
                        uint _3055 = (_3054 + 4294967295u) & _3054;
                        uint _3060 = _3058 * 48u;
                        vec4 _3074 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3060)).x, texelFetch(g_PointLightRenderingBuffer, int(_3060 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3060 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3060 + 3u)).x));
                        uint _3080 = (_3058 * 48u) + 4u;
                        vec4 _3093 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3080)).x, texelFetch(g_PointLightRenderingBuffer, int(_3080 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3080 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3080 + 3u)).x));
                        uint _3099 = (_3058 * 48u) + 8u;
                        vec3 _3110 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3099)).x, texelFetch(g_PointLightRenderingBuffer, int(_3099 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3099 + 2u)).x));
                        float _3114 = _3074.x - _2632;
                        float _3115 = _3074.y - _2633;
                        float _3116 = _3074.z - _2634;
                        float _3117 = dot(vec3(_3114, _3115, _3116), vec3(_3114, _3115, _3116));
                        float _3120 = inversesqrt(_3117);
                        float _3121 = _3120 * _3114;
                        float _3122 = _3120 * _3115;
                        float _3123 = _3120 * _3116;
                        float _3124 = dot(vec3(_912, _915, _918), vec3(_3121, _3122, _3123));
                        float _3129 = 1.0 - (_3117 * _3074.w);
                        float _4474 = isnan(0.0) ? _3129 : (isnan(_3129) ? 0.0 : max(_3129, 0.0));
                        float _3130 = isnan(1.0) ? _4474 : (isnan(_4474) ? 1.0 : min(_4474, 1.0));
                        float _3131 = sqrt(_3117) * _3093.w;
                        float _3134 = 1.39999997615814208984375 / (_3131 + 1.39999997615814208984375);
                        float _3135 = _3134 * _3134;
                        float _3138 = ((1.0 - _3135) * _3124) + _3135;
                        float _3141 = _3131 * _3131;
                        float _3145 = ((isnan(0.0) ? _3138 : (isnan(_3138) ? 0.0 : max(_3138, 0.0))) * _3130) / ((_3141 * 0.699999988079071044921875) + 1.0);
                        float _3149 = (-0.0) - _2632;
                        float _3150 = (-0.0) - _2633;
                        float _3151 = (-0.0) - _2634;
                        float _3155 = inversesqrt(dot(vec3(_3149, _3150, _3151), vec3(_3149, _3150, _3151)));
                        float _3156 = _3155 * _3149;
                        float _3157 = _3155 * _3150;
                        float _3158 = _3155 * _3151;
                        float _3166 = exp2(log2(1.0 / ((_3141 * 3.5) + 5.0)) * 0.25);
                        float _3167 = 1.0 - _972;
                        float _3174 = sqrt(1.0 - ((1.0 - (_3167 * _3167)) * (1.0 - (_3166 * _3166))));
                        float _3175 = _3174 * _3174;
                        float _3176 = _3175 * _3175;
                        float _3177 = _3156 + _3121;
                        float _3178 = _3157 + _3122;
                        float _3179 = _3158 + _3123;
                        float _3183 = inversesqrt(dot(vec3(_3177, _3178, _3179), vec3(_3177, _3178, _3179)));
                        float _3187 = dot(vec3(_912, _915, _918), vec3(_3156, _3157, _3158));
                        float _4490 = isnan(0.0) ? _3187 : (isnan(_3187) ? 0.0 : max(_3187, 0.0));
                        float _3190 = isnan(1.0) ? _4490 : (isnan(_4490) ? 1.0 : min(_4490, 1.0));
                        float _3191 = dot(vec3(_912, _915, _918), vec3(_3183 * _3177, _3183 * _3178, _3183 * _3179));
                        float _4501 = isnan(0.0) ? _3191 : (isnan(_3191) ? 0.0 : max(_3191, 0.0));
                        float _3194 = isnan(1.0) ? _4501 : (isnan(_4501) ? 1.0 : min(_4501, 1.0));
                        float _3198 = ((_3194 * _3194) * (_3176 + (-1.0))) + 1.0;
                        float _3199 = _3134 * _3175;
                        float _3200 = _3199 * _3199;
                        float _3203 = ((1.0 - _3200) * _3124) + _3200;
                        float _4512 = isnan(0.0) ? _3203 : (isnan(_3203) ? 0.0 : max(_3203, 0.0));
                        float _3204 = isnan(1.0) ? _4512 : (isnan(_4512) ? 1.0 : min(_4512, 1.0));
                        float _3205 = 1.0 - _3175;
                        float _3215 = (0.5 / (((_3204 * ((_3190 * _3205) + _3175)) + 9.9999999392252902907785028219223e-09) + (((_3204 * _3205) + _3175) * _3190))) * _3204;
                        float _4523 = isnan(0.0) ? _3215 : (isnan(_3215) ? 0.0 : max(_3215, 0.0));
                        float _3226 = (((_3176 * 3.1415927410125732421875) * (isnan(1.0) ? _4523 : (isnan(_4523) ? 1.0 : min(_4523, 1.0)))) / ((_3198 * _3198) * ((_3141 * 2.1991131305694580078125) + 3.141590118408203125))) * _3130;
                        _2983 = (_3145 * _3093.x) + _3051;
                        _2984 = (_3145 * _3093.y) + _3052;
                        _2985 = (_3145 * _3093.z) + _3053;
                        _2980 = (_3226 * _3110.x) + _3048;
                        _2981 = (_3226 * _3110.y) + _3049;
                        _2982 = (_3226 * _3110.z) + _3050;
                        if (_3055 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3048 = _2980;
                            _3049 = _2981;
                            _3050 = _2982;
                            _3051 = _2983;
                            _3052 = _2984;
                            _3053 = _2985;
                            _3054 = _3055;
                        }
                    }
                    frontier_phi_61_pred = _2980;
                    frontier_phi_61_pred_1 = _2985;
                    frontier_phi_61_pred_2 = _2984;
                    frontier_phi_61_pred_3 = _2983;
                    frontier_phi_61_pred_4 = _2982;
                    frontier_phi_61_pred_5 = _2981;
                }
                _2780 = frontier_phi_61_pred;
                _2790 = frontier_phi_61_pred_1;
                _2788 = frontier_phi_61_pred_2;
                _2786 = frontier_phi_61_pred_3;
                _2784 = frontier_phi_61_pred_4;
                _2782 = frontier_phi_61_pred_5;
                uint _2931 = _2930 + 1u;
                if (_2931 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2924 = _2780;
                    _2925 = _2782;
                    _2926 = _2784;
                    _2927 = _2786;
                    _2928 = _2788;
                    _2929 = _2790;
                    _2930 = _2931;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2779 = _2780;
            _2781 = _2782;
            _2783 = _2784;
            _2785 = _2786;
            _2787 = _2788;
            _2789 = _2790;
        }
        uvec4 _2793 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2794 = _2793.z;
        uint _2796 = (_2794 >> 8u) & 15u;
        float _2892;
        float _2894;
        float _2896;
        float _2898;
        float _2900;
        float _2902;
        if (((4294967295u << _2796) & _2678) == 0u)
        {
            _2892 = _2779;
            _2894 = _2781;
            _2896 = _2783;
            _2898 = _2785;
            _2900 = _2787;
            _2902 = _2789;
        }
        else
        {
            float _2917 = inversesqrt(dot(vec3(_2632, _2633, _2634), vec3(_2632, _2633, _2634)));
            float _2918 = _2917 * _2632;
            float _2919 = _2917 * _2633;
            float _2920 = _2917 * _2634;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2796 < ((_2794 >> 12u) & 15u))
            {
                float _2893;
                float _2895;
                float _2897;
                float _2899;
                float _2901;
                float _2903;
                float _3031 = _2779;
                float _3032 = _2781;
                float _3033 = _2783;
                float _3034 = _2785;
                float _3035 = _2787;
                float _3036 = _2789;
                uint _3037 = _2796;
                uint _3046;
                bool _3047;
                for (;;)
                {
                    _3046 = texelFetch(g_lightClassification, int((((_2672 << 5u) + (_2658 << 9u)) + (_3037 << 2u)) >> 2u)).x;
                    _3047 = _3046 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_3047)
                    {
                        frontier_phi_67_pred = _3034;
                        frontier_phi_67_pred_1 = _3035;
                        frontier_phi_67_pred_2 = _3036;
                        frontier_phi_67_pred_3 = _3033;
                        frontier_phi_67_pred_4 = _3032;
                        frontier_phi_67_pred_5 = _3031;
                    }
                    else
                    {
                        float _3231;
                        float _3232;
                        float _3233;
                        float _3234;
                        float _3235;
                        float _3236;
                        float _3524;
                        float _3525;
                        float _3526;
                        float _3527;
                        float _3528;
                        float _3529;
                        float _3244 = _3031;
                        float _3245 = _3032;
                        float _3246 = _3033;
                        float _3247 = _3034;
                        float _3248 = _3035;
                        float _3249 = _3036;
                        uint _3250 = _3046;
                        uint _3251;
                        vec4 _3276;
                        float _3277;
                        vec4 _3292;
                        vec3 _3304;
                        vec4 _3319;
                        vec4 _3334;
                        float _3380;
                        bool _3381;
                        for (;;)
                        {
                            uint _3261 = ((_3037 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3250));
                            _3251 = (_3250 + 4294967295u) & _3250;
                            uint _3263 = _3261 * 40u;
                            _3276 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3263)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3263 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3263 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3263 + 3u)).x));
                            _3277 = _3276.w;
                            uint _3279 = (_3261 * 40u) + 4u;
                            _3292 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3279)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3279 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3279 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3279 + 3u)).x));
                            uint _3294 = (_3261 * 40u) + 8u;
                            _3304 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3294)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3294 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3294 + 2u)).x));
                            uint _3306 = (_3261 * 40u) + 16u;
                            _3319 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3306)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3306 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3306 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3306 + 3u)).x));
                            uint _3321 = (_3261 * 40u) + 20u;
                            _3334 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3321)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3321 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3321 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3321 + 3u)).x));
                            uint _3336 = (_3261 * 40u) + 24u;
                            vec4 _3349 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3336)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3336 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3336 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3336 + 3u)).x));
                            uint _3355 = (_3261 * 40u) + 28u;
                            vec4 _3368 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3355)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3355 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3355 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3355 + 3u)).x));
                            _3380 = fma(_2634, _3368.z, fma(_2633, _3368.y, _3368.x * _2632)) + _3368.w;
                            _3381 = !((fma(_2634, _3349.z, fma(_2633, _3349.y, _3349.x * _2632)) + _3349.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3381)
                            {
                                float _3408 = _3276.x - _2632;
                                float _3409 = _3276.y - _2633;
                                float _3410 = _3276.z - _2634;
                                float _3411 = dot(vec3(_3408, _3409, _3410), vec3(_3408, _3409, _3410));
                                float _3414 = inversesqrt(_3411);
                                float _3415 = _3414 * _3408;
                                float _3416 = _3414 * _3409;
                                float _3417 = _3414 * _3410;
                                float _3421 = 1.0 - (_3411 / (_3277 * _3277));
                                float _4534 = isnan(0.0) ? _3421 : (isnan(_3421) ? 0.0 : max(_3421, 0.0));
                                float _3422 = isnan(1.0) ? _4534 : (isnan(_4534) ? 1.0 : min(_4534, 1.0));
                                float _3426 = sqrt(_3411) * _3292.w;
                                float _3428 = 1.39999997615814208984375 / (_3426 + 1.39999997615814208984375);
                                float _3429 = _3428 * _3428;
                                float _3432 = ((1.0 - _3429) * dot(vec3(_3415, _3416, _3417), vec3(_912, _915, _918))) + _3429;
                                float _3435 = _3426 * _3426;
                                float _3439 = (fma(_2634, _3319.z, fma(_2633, _3319.y, _3319.x * _2632)) + _3319.w) / _3380;
                                float _3440 = (fma(_2634, _3334.z, fma(_2633, _3334.y, _3334.x * _2632)) + _3334.w) / _3380;
                                float _3444 = 1.0 - dot(vec2(_3439, _3440), vec2(_3439, _3440));
                                float _4550 = isnan(0.0) ? _3444 : (isnan(_3444) ? 0.0 : max(_3444, 0.0));
                                float _3445 = isnan(1.0) ? _4550 : (isnan(_4550) ? 1.0 : min(_4550, 1.0));
                                float _3446 = _3445 * (((isnan(0.0) ? _3432 : (isnan(_3432) ? 0.0 : max(_3432, 0.0))) * _3422) / ((_3435 * 0.699999988079071044921875) + 1.0));
                                float _3458 = exp2(log2(1.0 / ((_3435 * 3.5) + 5.0)) * 0.25);
                                float _3459 = 1.0 - _972;
                                float _3466 = sqrt(1.0 - ((1.0 - (_3459 * _3459)) * (1.0 - (_3458 * _3458))));
                                float _3467 = _3466 * _3466;
                                float _3468 = _3467 * _3467;
                                float _3469 = _3415 - _2918;
                                float _3470 = _3416 - _2919;
                                float _3471 = _3417 - _2920;
                                float _3475 = inversesqrt(dot(vec3(_3469, _3470, _3471), vec3(_3469, _3470, _3471)));
                                float _3479 = dot(vec3(_912, _915, _918), vec3((-0.0) - _2918, (-0.0) - _2919, (-0.0) - _2920));
                                float _4561 = isnan(0.0) ? _3479 : (isnan(_3479) ? 0.0 : max(_3479, 0.0));
                                float _3482 = isnan(1.0) ? _4561 : (isnan(_4561) ? 1.0 : min(_4561, 1.0));
                                float _3483 = dot(vec3(_912, _915, _918), vec3(_3475 * _3469, _3475 * _3470, _3475 * _3471));
                                float _4572 = isnan(0.0) ? _3483 : (isnan(_3483) ? 0.0 : max(_3483, 0.0));
                                float _3486 = isnan(1.0) ? _4572 : (isnan(_4572) ? 1.0 : min(_4572, 1.0));
                                float _3490 = ((_3486 * _3486) * (_3468 + (-1.0))) + 1.0;
                                float _3491 = _3428 * _3467;
                                float _3492 = _3491 * _3491;
                                float _3498 = ((1.0 - _3492) * dot(vec3(_912, _915, _918), vec3(_3415, _3416, _3417))) + _3492;
                                float _4583 = isnan(0.0) ? _3498 : (isnan(_3498) ? 0.0 : max(_3498, 0.0));
                                float _3499 = isnan(1.0) ? _4583 : (isnan(_4583) ? 1.0 : min(_4583, 1.0));
                                float _3500 = 1.0 - _3467;
                                float _3510 = (0.5 / (((_3499 * ((_3482 * _3500) + _3467)) + 9.9999999392252902907785028219223e-09) + (((_3499 * _3500) + _3467) * _3482))) * _3499;
                                float _4594 = isnan(0.0) ? _3510 : (isnan(_3510) ? 0.0 : max(_3510, 0.0));
                                float _3520 = (_3445 * _3422) * (((_3468 * 3.1415927410125732421875) * (isnan(1.0) ? _4594 : (isnan(_4594) ? 1.0 : min(_4594, 1.0)))) / ((_3490 * _3490) * ((_3435 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3520 * _3304.x;
                                frontier_phi_73_pred_1 = _3520 * _3304.y;
                                frontier_phi_73_pred_2 = _3446 * _3292.z;
                                frontier_phi_73_pred_3 = _3446 * _3292.y;
                                frontier_phi_73_pred_4 = _3446 * _3292.x;
                                frontier_phi_73_pred_5 = _3520 * _3304.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3524 = frontier_phi_73_pred;
                            _3525 = frontier_phi_73_pred_1;
                            _3529 = frontier_phi_73_pred_2;
                            _3528 = frontier_phi_73_pred_3;
                            _3527 = frontier_phi_73_pred_4;
                            _3526 = frontier_phi_73_pred_5;
                            _3234 = _3527 + _3247;
                            _3235 = _3528 + _3248;
                            _3236 = _3529 + _3249;
                            _3231 = _3524 + _3244;
                            _3232 = _3525 + _3245;
                            _3233 = _3526 + _3246;
                            if (_3251 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3244 = _3231;
                                _3245 = _3232;
                                _3246 = _3233;
                                _3247 = _3234;
                                _3248 = _3235;
                                _3249 = _3236;
                                _3250 = _3251;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3234;
                        frontier_phi_67_pred_1 = _3235;
                        frontier_phi_67_pred_2 = _3236;
                        frontier_phi_67_pred_3 = _3233;
                        frontier_phi_67_pred_4 = _3232;
                        frontier_phi_67_pred_5 = _3231;
                    }
                    _2899 = frontier_phi_67_pred;
                    _2901 = frontier_phi_67_pred_1;
                    _2903 = frontier_phi_67_pred_2;
                    _2897 = frontier_phi_67_pred_3;
                    _2895 = frontier_phi_67_pred_4;
                    _2893 = frontier_phi_67_pred_5;
                    uint _3038 = _3037 + 1u;
                    if (_3038 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3031 = _2893;
                        _3032 = _2895;
                        _3033 = _2897;
                        _3034 = _2899;
                        _3035 = _2901;
                        _3036 = _2903;
                        _3037 = _3038;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2901;
                frontier_phi_55_56_ladder_1 = _2903;
                frontier_phi_55_56_ladder_2 = _2899;
                frontier_phi_55_56_ladder_3 = _2897;
                frontier_phi_55_56_ladder_4 = _2895;
                frontier_phi_55_56_ladder_5 = _2893;
            }
            else
            {
                frontier_phi_55_56_ladder = _2787;
                frontier_phi_55_56_ladder_1 = _2789;
                frontier_phi_55_56_ladder_2 = _2785;
                frontier_phi_55_56_ladder_3 = _2783;
                frontier_phi_55_56_ladder_4 = _2781;
                frontier_phi_55_56_ladder_5 = _2779;
            }
            _2892 = frontier_phi_55_56_ladder_5;
            _2894 = frontier_phi_55_56_ladder_4;
            _2896 = frontier_phi_55_56_ladder_3;
            _2898 = frontier_phi_55_56_ladder_2;
            _2900 = frontier_phi_55_56_ladder;
            _2902 = frontier_phi_55_56_ladder_1;
        }
        float _2907 = isnan(1.0) ? _956 : (isnan(_956) ? 1.0 : min(_956, 1.0));
        _2691 = (_2907 * _2898) + _2143;
        _2693 = (_2907 * _2900) + _2145;
        _2695 = (_2907 * _2902) + _2147;
        _2697 = ((_2892 * 0.039999999105930328369140625) * _2907) + _2476;
        _2699 = ((_2894 * 0.039999999105930328369140625) * _2907) + _2478;
        _2701 = ((_2896 * 0.039999999105930328369140625) * _2907) + _2480;
    }
    else
    {
        _2691 = _2143;
        _2693 = _2145;
        _2695 = _2147;
        _2697 = _2476;
        _2699 = _2478;
        _2701 = _2480;
    }
    float _4610 = isnan(0.0) ? _941 : (isnan(_941) ? 0.0 : max(_941, 0.0));
    float _4621 = isnan(0.0) ? _942 : (isnan(_942) ? 0.0 : max(_942, 0.0));
    float _4632 = isnan(0.0) ? _943 : (isnan(_943) ? 0.0 : max(_943, 0.0));
    uint _2721 = _277 + 6u;
    float _2729 = _893 / cbSceneParam._m0[86u].x;
    float _2730 = _894 / cbSceneParam._m0[86u].y;
    vec4 _2744 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2729, _2730, (log2((isnan(cbSceneParam._m0[77u].w) ? _827 : (isnan(_827) ? cbSceneParam._m0[77u].w : min(_827, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2746 = _2744.x;
    float _2747 = _2744.y;
    float _2748 = _2744.z;
    float _2749 = _2744.w;
    float _2842;
    float _2844;
    float _2846;
    float _2848;
    if (_827 > cbSceneParam._m0[78u].w)
    {
        float _2804 = isnan(_827) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _827 : min(cbSceneParam._m0[80u].w, _827));
        float _2805 = _2804 / _827;
        float _2816 = _2805 * _878;
        float _2817 = _879 * _2805;
        float _2818 = (-0.0) - _2817;
        float _2820 = _2805 * _880;
        float _2822 = (cbSceneParam._m0[77u].w * _2818) / _2804;
        float _2823 = _2822 + cbSceneParam._m0[79u].w;
        float _2824 = cbSceneParam._m0[79u].w - _2817;
        float _2830 = sqrt(((_2816 * _2816) + (_2817 * _2817)) + (_2820 * _2820));
        float _2833 = (1.0 - (cbSceneParam._m0[77u].w / _2804)) * _2830;
        float _2838 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2840 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2993;
        if (abs((_2818 - _2822) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2993 = ((((_2823 > 0.0) ? exp2(_2838 * _2823) : (2.0 - exp2(_2840 * _2823))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2833;
        }
        else
        {
            float _2953 = 1.0 / cbSceneParam._m0[80u].x;
            float _2954 = isnan(_2824) ? _2823 : (isnan(_2823) ? _2824 : max(_2823, _2824));
            float _2955 = isnan(_2824) ? _2823 : (isnan(_2823) ? _2824 : min(_2823, _2824));
            float _2964 = isnan(0.0) ? _2954 : (isnan(_2954) ? 0.0 : min(_2954, 0.0));
            float _2965 = isnan(0.0) ? _2955 : (isnan(_2955) ? 0.0 : min(_2955, 0.0));
            _2993 = ((abs(_2830 / _2818) * cbSceneParam._m0[80u].y) * ((((_2964 - _2965) * 2.0) - ((exp2(_2838 * (isnan(0.0) ? _2954 : (isnan(_2954) ? 0.0 : max(_2954, 0.0)))) - exp2(_2838 * (isnan(0.0) ? _2955 : (isnan(_2955) ? 0.0 : max(_2955, 0.0))))) * _2953)) - ((exp2(_2840 * _2964) - exp2(_2840 * _2965)) * _2953))) + (_2833 * cbSceneParam._m0[80u].z);
        }
        vec4 _2995 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2729, _2730, 1.0), 0.0);
        float _3004 = exp2((_2993 * (-1.44269502162933349609375)) * (1.0 - _2995.w));
        float _3005 = log2(_3004);
        float _3021 = log2(_2749);
        _2842 = (exp2(_3021 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3005 * cbSceneParam._m0[78u].x)) * _2995.x) / cbSceneParam._m0[78u].x)) + _2746;
        _2844 = (exp2(_3021 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3005 * cbSceneParam._m0[78u].y)) * _2995.y) / cbSceneParam._m0[78u].y)) + _2747;
        _2846 = (exp2(_3021 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3005 * cbSceneParam._m0[78u].z)) * _2995.z) / cbSceneParam._m0[78u].z)) + _2748;
        _2848 = _3004 * _2749;
    }
    else
    {
        _2842 = _2746;
        _2844 = _2747;
        _2846 = _2748;
        _2848 = _2749;
    }
    float _2860 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2861 = _2860 == 3.0;
    float _2862 = log2(_2848);
    float _2869 = exp2(_2862 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4610 : (isnan(_4610) ? 1.0 : min(_4610, 1.0))) * (_2691 + ((isnan(0.0) ? _1681 : (isnan(_1681) ? 0.0 : max(_1681, 0.0))) * _956))) + ((_2697 + ((isnan(0.0) ? _1975 : (isnan(_1975) ? 0.0 : max(_1975, 0.0))) * _1760)) * cbPerFrame._m0[3u].x));
    float _2870 = exp2(_2862 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4621 : (isnan(_4621) ? 1.0 : min(_4621, 1.0))) * (_2693 + ((isnan(0.0) ? _1684 : (isnan(_1684) ? 0.0 : max(_1684, 0.0))) * _956))) + ((_2699 + ((isnan(0.0) ? _1978 : (isnan(_1978) ? 0.0 : max(_1978, 0.0))) * _1760)) * cbPerFrame._m0[3u].x));
    float _2871 = exp2(_2862 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4632 : (isnan(_4632) ? 1.0 : min(_4632, 1.0))) * (_2695 + ((isnan(0.0) ? _1687 : (isnan(_1687) ? 0.0 : max(_1687, 0.0))) * _956))) + ((_2701 + ((isnan(0.0) ? _1981 : (isnan(_1981) ? 0.0 : max(_1981, 0.0))) * _1760)) * cbPerFrame._m0[3u].x));
    float _2880 = (_2860 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2880 * (_2861 ? _2869 : (_2869 + (cbSceneParam._m0[72u].w * _2842)));
    SV_Target.y = _2880 * (_2861 ? _2870 : (_2870 + (cbSceneParam._m0[72u].w * _2844)));
    SV_Target.z = _2880 * (_2861 ? _2871 : (_2871 + (cbSceneParam._m0[72u].w * _2846)));
    SV_Target.w = cbInstanceData._m0[_2721].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2721].w;
}


