#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_0;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 13) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_22;
layout(set = 0, binding = 14) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_10;
layout(set = 0, binding = 20) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_6;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1430;
float _4070;
float _4071;
float _4072;
float _4073;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _229 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _230 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _231 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _237 = inversesqrt(dot(vec3(_229, _230, _231), vec3(_229, _230, _231)));
    float _238 = _237 * _229;
    float _239 = _237 * _230;
    float _240 = _237 * _231;
    float _244 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _245 = _244 * NORMAL.x;
    float _246 = _244 * NORMAL.y;
    float _247 = _244 * NORMAL.z;
    float _251 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _252 = _251 * TANGENT.x;
    float _253 = _251 * TANGENT.y;
    float _254 = _251 * TANGENT.z;
    float _265 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _267 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _268 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _4082 = isnan(0.0) ? _265 : (isnan(_265) ? 0.0 : max(_265, 0.0));
    float _4093 = isnan(0.0) ? _267 : (isnan(_267) ? 0.0 : max(_267, 0.0));
    float _4104 = isnan(0.0) ? _268 : (isnan(_268) ? 0.0 : max(_268, 0.0));
    uint _278 = uint(roundEven(NORMAL.w)) * 13u;
    uint _283 = _278 + 1u;
    uint _287 = _278 + 2u;
    float _296 = sqrt(((cbInstanceData._m0[_283].x * cbInstanceData._m0[_283].x) + (cbInstanceData._m0[_278].x * cbInstanceData._m0[_278].x)) + (cbInstanceData._m0[_287].x * cbInstanceData._m0[_287].x));
    float _297 = _296 * TEXCOORD.z;
    float _298 = _296 * TEXCOORD.w;
    vec4 _311 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _297) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _298) + cbTextureTilingScale._m0[13u].w));
    vec4 _334 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _360 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _365 = _360.x * cbMtdParam._m0[11u].x;
    float _366 = _360.y * cbMtdParam._m0[11u].y;
    float _367 = _360.z * cbMtdParam._m0[11u].z;
    vec4 _386 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _297) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _298) + cbTextureTilingScale._m0[5u].w));
    vec4 _405 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _440 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _442 = _440.x;
    float _454 = dot(vec4(_442, _440.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _471 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _405.x) * 2.0) - ((((_442 - _454) * cbMtdParam._m0[24u].z) + _454) * cbMtdParam._m0[23u].x))) + 1.0;
    float _4115 = isnan(0.0) ? _471 : (isnan(_471) ? 0.0 : max(_471, 0.0));
    float _472 = isnan(1.0) ? _4115 : (isnan(_4115) ? 1.0 : min(_4115, 1.0));
    float _479 = (_472 * ((_386.x * cbMtdParam._m0[12u].x) - _365)) + _365;
    float _480 = (_472 * ((_386.y * cbMtdParam._m0[12u].y) - _366)) + _366;
    float _481 = (_472 * ((_386.z * cbMtdParam._m0[12u].z) - _367)) + _367;
    vec4 _498 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _297) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _298) + cbTextureTilingScale._m0[3u].w));
    vec4 _518 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _520 = _518.x;
    float _530 = dot(vec4(_520, _518.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _544 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _405.y) * 2.0) - ((((_520 - _530) * cbMtdParam._m0[24u].z) + _530) * cbMtdParam._m0[20u].w))) + 1.0;
    float _4126 = isnan(0.0) ? _544 : (isnan(_544) ? 0.0 : max(_544, 0.0));
    float _545 = isnan(1.0) ? _4126 : (isnan(_4126) ? 1.0 : min(_4126, 1.0));
    float _555 = (_334.x * cbMtdParam._m0[9u].x) * ((_545 * ((_498.x * cbMtdParam._m0[13u].x) - _479)) + _479);
    float _556 = (_334.y * cbMtdParam._m0[9u].y) * ((_545 * ((_498.y * cbMtdParam._m0[13u].y) - _480)) + _480);
    float _557 = (_334.z * cbMtdParam._m0[9u].z) * ((_545 * ((_498.z * cbMtdParam._m0[13u].z) - _481)) + _481);
    float _561 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _311.x) * _555;
    float _564 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _311.y) * _556;
    float _567 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _311.z) * _557;
    float _575 = (((_555 - _561) * (isnan(1.0) ? _4082 : (isnan(_4082) ? 1.0 : min(_4082, 1.0)))) + _561) * 4.55000019073486328125;
    float _577 = (((_556 - _564) * (isnan(1.0) ? _4093 : (isnan(_4093) ? 1.0 : min(_4093, 1.0)))) + _564) * 4.55000019073486328125;
    float _579 = (((_557 - _567) * (isnan(1.0) ? _4104 : (isnan(_4104) ? 1.0 : min(_4104, 1.0)))) + _567) * 4.55000019073486328125;
    vec4 _598 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _297) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _298) + cbTextureTilingScale._m0[14u].w));
    vec4 _617 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _297) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _298) + cbTextureTilingScale._m0[20u].w));
    vec4 _642 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _297) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _298) + cbTextureTilingScale._m0[4u].w));
    vec4 _659 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _661 = _659.x;
    float _662 = _659.y;
    float _663 = _659.z;
    float _670 = ((_642.x - _661) * _472) + _661;
    float _671 = ((_642.y - _662) * _472) + _662;
    float _672 = ((_642.z - _663) * _472) + _663;
    vec4 _684 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _297) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _298) + cbTextureTilingScale._m0[2u].w));
    float _697 = ((_684.z - _672) * _545) + _672;
    float _700 = ((((_684.x - _670) * _545) + _670) * 2.0) + (-1.0);
    float _701 = ((((_684.y - _671) * _545) + _671) * 2.0) + (-1.0);
    float _702 = dot(vec2(_700, _701), vec2(_700, _701));
    float _4137 = isnan(0.0) ? _702 : (isnan(_702) ? 0.0 : max(_702, 0.0));
    float _707 = sqrt(1.0 - (isnan(1.0) ? _4137 : (isnan(_4137) ? 1.0 : min(_4137, 1.0))));
    vec4 _725 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _737 = (_700 + ((((_617.x * 2.0) + (-1.0)) * TEXCOORD_11.x) * cbMtdParam._m0[20u].x)) + (((_725.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _738 = (_701 + ((((_617.y * 2.0) + (-1.0)) * TEXCOORD_11.y) * cbMtdParam._m0[20u].x)) + (((_725.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _741 = fma(_707, _245, fma(_738, _252, _737 * _238));
    float _744 = fma(_707, _246, fma(_738, _253, _737 * _239));
    float _747 = fma(_707, _247, fma(_738, _254, _737 * _240));
    float _751 = inversesqrt(dot(vec3(_741, _744, _747), vec3(_741, _744, _747)));
    vec4 _778 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _297) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _298) + cbTextureTilingScale._m0[11u].w));
    float _780 = _778.x;
    float _781 = 1.0 - _780;
    float _787 = (cbMtdParam._m0[19u].x + dot(vec4(_751 * _741, _751 * _744, _751 * _747, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_780 - _781) * cbMtdParam._m0[24u].w) + _781) * cbMtdParam._m0[21u].z);
    float _4148 = isnan(0.0) ? _787 : (isnan(_787) ? 0.0 : max(_787, 0.0));
    float _788 = isnan(1.0) ? _4148 : (isnan(_4148) ? 1.0 : min(_4148, 1.0));
    float _795 = (_788 * ((_598.x * cbMtdParam._m0[18u].x) - _575)) + _575;
    float _796 = (_788 * ((_598.y * cbMtdParam._m0[18u].y) - _577)) + _577;
    float _797 = (_788 * ((_598.z * cbMtdParam._m0[18u].z) - _579)) + _579;
    float _802 = (((_617.z - _697) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _697;
    float _806 = ((_725.z - _802) * cbMtdParam._m0[19u].w) + _802;
    vec4 _819 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _297) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _298) + cbTextureTilingScale._m0[15u].w));
    float _826 = (_819.x * 2.0) + (-1.0);
    float _827 = (_819.y * 2.0) + (-1.0);
    float _828 = dot(vec2(_826, _827), vec2(_826, _827));
    float _4159 = isnan(0.0) ? _828 : (isnan(_828) ? 0.0 : max(_828, 0.0));
    float _836 = ((_819.z - _806) * _788) + _806;
    float _846 = ((sqrt(1.0 - (isnan(1.0) ? _4159 : (isnan(_4159) ? 1.0 : min(_4159, 1.0)))) - _707) * _788) + _707;
    float _849 = (((_826 - _737) * _788) + _737) + (cbMtdParam._m0[21u].x * _737);
    float _850 = (((_827 - _738) * _788) + _738) + (cbMtdParam._m0[21u].x * _738);
    float _854 = cbMtdParam._m0[22u].x + _725.w;
    float _857 = fma(_846, _245, fma(_850, _252, _849 * _238));
    float _860 = fma(_846, _246, fma(_850, _253, _849 * _239));
    float _863 = fma(_846, _247, fma(_850, _254, _849 * _240));
    float _867 = inversesqrt(dot(vec3(_857, _860, _863), vec3(_857, _860, _863)));
    float _868 = _867 * _857;
    float _869 = _867 * _860;
    float _870 = _867 * _863;
    float _4170 = isnan(0.0) ? _836 : (isnan(_836) ? 0.0 : max(_836, 0.0));
    float _871 = isnan(1.0) ? _4170 : (isnan(_4170) ? 1.0 : min(_4170, 1.0));
    float _4181 = isnan(0.0) ? _854 : (isnan(_854) ? 0.0 : max(_854, 0.0));
    float _4192 = isnan(0.0) ? _795 : (isnan(_795) ? 0.0 : max(_795, 0.0));
    float _4203 = isnan(0.0) ? _796 : (isnan(_796) ? 0.0 : max(_796, 0.0));
    float _4214 = isnan(0.0) ? _797 : (isnan(_797) ? 0.0 : max(_797, 0.0));
    float _889 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _930 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _940 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _930);
    float _941 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _930);
    float _942 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _930);
    float _946 = inversesqrt(dot(vec3(_940, _941, _942), vec3(_940, _941, _942)));
    float _947 = _940 * _946;
    float _948 = _941 * _946;
    float _949 = _942 * _946;
    vec4 _954 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _956 = _954.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1110 = sqrt(((_940 * _940) + (_941 * _941)) + (_942 * _942));
        float _1116 = (cbMatDynParam._m0[5u].x * _1110) + cbMatDynParam._m0[5u].y;
        float _4225 = isnan(0.0) ? _1116 : (isnan(_1116) ? 0.0 : max(_1116, 0.0));
        float _1117 = isnan(1.0) ? _4225 : (isnan(_4225) ? 1.0 : min(_4225, 1.0));
        float _1121 = (cbMatDynParam._m0[5u].z * _1110) + cbMatDynParam._m0[5u].w;
        float _4236 = isnan(0.0) ? _1121 : (isnan(_1121) ? 0.0 : max(_1121, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4236 : (isnan(_4236) ? 1.0 : min(_4236, 1.0))) - _1117)) + _1117) < ((_956 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _967 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _968 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _986 = fma(_870, cbSceneParam._m0[5u].z, fma(_869, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _868));
    float _989 = fma(_870, cbSceneParam._m0[6u].z, fma(_869, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _868));
    float _992 = fma(_870, cbSceneParam._m0[7u].z, fma(_869, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _868));
    uint _1005 = _278 + 9u;
    uint _1006 = _1005 + uint(cbMatDynParam._m0[0u].w);
    float _1012 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4192 : (isnan(_4192) ? 1.0 : min(_4192, 1.0)))) * cbInstanceData._m0[_1006].x;
    float _1013 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4203 : (isnan(_4203) ? 1.0 : min(_4203, 1.0)))) * cbInstanceData._m0[_1006].y;
    float _1014 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4214 : (isnan(_4214) ? 1.0 : min(_4214, 1.0)))) * cbInstanceData._m0[_1006].z;
    float _4247 = isnan(0.0) ? _1012 : (isnan(_1012) ? 0.0 : max(_1012, 0.0));
    float _1015 = isnan(1.0) ? _4247 : (isnan(_4247) ? 1.0 : min(_4247, 1.0));
    float _4258 = isnan(0.0) ? _1013 : (isnan(_1013) ? 0.0 : max(_1013, 0.0));
    float _1016 = isnan(1.0) ? _4258 : (isnan(_4258) ? 1.0 : min(_4258, 1.0));
    float _4269 = isnan(0.0) ? _1014 : (isnan(_1014) ? 0.0 : max(_1014, 0.0));
    float _1017 = isnan(1.0) ? _4269 : (isnan(_4269) ? 1.0 : min(_4269, 1.0));
    vec4 _1026 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _967, cbSceneParam._m0[86u].y * _968));
    float _1030 = ((isnan(1.0) ? _4181 : (isnan(_4181) ? 1.0 : min(_4181, 1.0))) * TEXCOORD_5.w) * _1026.x;
    float _1031 = dot(vec3(_868, _869, _870), vec3(_947, _948, _949));
    float _1034 = _1031 * 2.0;
    float _1038 = (_1034 * _868) - _947;
    float _1039 = (_1034 * _869) - _948;
    float _1040 = (_1034 * _870) - _949;
    float _1044 = abs(dot(vec3(_947, _948, _949), vec3(_868, _869, _870)));
    float _4280 = isnan(0.0) ? _1044 : (isnan(_1044) ? 0.0 : max(_1044, 0.0));
    float _1046 = sqrt(_871);
    float _1059 = exp2((_1046 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4280 : (isnan(_4280) ? 1.0 : min(_4280, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1046 * 3.0));
    float _1091 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1095 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1099 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1429;
    float _1431;
    float _1432;
    float _1433;
    float _1434;
    float _1435;
    float _1436;
    float _1437;
    float _1438;
    float _1439;
    float _1440;
    float _1441;
    float _1442;
    float _1443;
    float _1444;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1154 = fma(_1099, cbModelParam._m0[26u].z, fma(_1095, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1091));
        float _1158 = fma(_1099, cbModelParam._m0[27u].z, fma(_1095, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1091));
        float _1162 = fma(_1099, cbModelParam._m0[28u].z, fma(_1095, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1091));
        float _1187 = _1091 + _868;
        float _1188 = _1095 + _869;
        float _1189 = _1099 + _870;
        float _1199 = fma(_1189, cbModelParam._m0[26u].z, fma(_1188, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1187)) - _1154;
        float _1200 = fma(_1189, cbModelParam._m0[27u].z, fma(_1188, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1187)) - _1158;
        float _1201 = fma(_1189, cbModelParam._m0[28u].z, fma(_1188, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1187)) - _1162;
        float _1205 = inversesqrt(dot(vec3(_1199, _1200, _1201), vec3(_1199, _1200, _1201)));
        float _1218 = ((_1205 * _1199) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1154 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1219 = ((_1205 * _1200) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1158 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1220 = ((_1205 * _1201) / cbModelParam._m0[34u].z) + ((((((_1162 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1223 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1218, _1219, _1220), 0.0);
        vec4 _1230 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1218, _1219, _1220), 0.0);
        vec4 _1237 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1218, _1219, _1220), 0.0);
        vec4 _1244 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1218, _1219, _1220), 0.0);
        float _1257 = exp2((_1223.w + (-0.5)) * 20.0) * 2.0;
        float _1258 = _1257 * (_1223.x + (-0.5));
        float _1259 = _1257 * (_1223.y + (-0.5));
        float _1260 = _1257 * (_1223.z + (-0.5));
        float _1267 = exp2((_1230.w + (-0.5)) * 20.0) * 2.0;
        float _1268 = _1267 * (_1230.x + (-0.5));
        float _1269 = _1267 * (_1230.y + (-0.5));
        float _1270 = _1267 * (_1230.z + (-0.5));
        float _1277 = exp2((_1237.w + (-0.5)) * 20.0) * 2.0;
        float _1278 = _1277 * (_1237.x + (-0.5));
        float _1279 = _1277 * (_1237.y + (-0.5));
        float _1280 = _1277 * (_1237.z + (-0.5));
        float _1287 = exp2((_1244.w + (-0.5)) * 20.0) * 2.0;
        float _1288 = _1287 * (_1244.x + (-0.5));
        float _1289 = _1287 * (_1244.y + (-0.5));
        float _1290 = _1287 * (_1244.z + (-0.5));
        float _1291 = isnan(0.0) ? _1288 : (isnan(_1288) ? 0.0 : max(_1288, 0.0));
        float _1292 = isnan(0.0) ? _1289 : (isnan(_1289) ? 0.0 : max(_1289, 0.0));
        float _1293 = isnan(0.0) ? _1290 : (isnan(_1290) ? 0.0 : max(_1290, 0.0));
        float _1294 = _1258 * 0.5;
        float _1295 = _1268 * 0.5;
        float _1296 = _1278 * 0.5;
        float _1297 = dot(vec3(_1294, _1295, _1296), vec3(_1294, _1295, _1296));
        float _1302 = (_1297 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1297);
        float _1311 = (dot(vec3(_868, _869, _870), vec3(_1302 * _1294, _1302 * _1295, _1302 * _1296)) + 1.0) * 0.5;
        float _4306 = isnan(0.0) ? _1311 : (isnan(_1311) ? 0.0 : max(_1311, 0.0));
        float _1321 = sqrt(((_1295 * _1295) + (_1294 * _1294)) + (_1296 * _1296)) / (_1291 + 9.9999997473787516355514526367188e-06);
        float _4317 = isnan(0.0) ? _1321 : (isnan(_1321) ? 0.0 : max(_1321, 0.0));
        float _1322 = isnan(1.0) ? _4317 : (isnan(_4317) ? 1.0 : min(_4317, 1.0));
        float _1323 = _1322 * 2.0;
        float _1327 = (1.0 - _1322) / (_1322 + 1.0);
        float _4328 = isnan(0.0) ? _1327 : (isnan(_1327) ? 0.0 : max(_1327, 0.0));
        float _1328 = isnan(1.0) ? _4328 : (isnan(_4328) ? 1.0 : min(_4328, 1.0));
        float _1337 = ((((1.0 - _1328) * (_1323 + 2.0)) * exp2(log2(isnan(1.0) ? _4306 : (isnan(_4306) ? 1.0 : min(_4306, 1.0))) * (_1323 + 1.0))) + _1328) * _1291;
        float _1338 = _1259 * 0.5;
        float _1339 = _1269 * 0.5;
        float _1340 = _1279 * 0.5;
        float _1341 = dot(vec3(_1338, _1339, _1340), vec3(_1338, _1339, _1340));
        float _1346 = (_1341 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1341);
        float _1354 = (dot(vec3(_868, _869, _870), vec3(_1346 * _1338, _1346 * _1339, _1346 * _1340)) + 1.0) * 0.5;
        float _4339 = isnan(0.0) ? _1354 : (isnan(_1354) ? 0.0 : max(_1354, 0.0));
        float _1363 = sqrt(((_1339 * _1339) + (_1338 * _1338)) + (_1340 * _1340)) / (_1292 + 9.9999997473787516355514526367188e-06);
        float _4350 = isnan(0.0) ? _1363 : (isnan(_1363) ? 0.0 : max(_1363, 0.0));
        float _1364 = isnan(1.0) ? _4350 : (isnan(_4350) ? 1.0 : min(_4350, 1.0));
        float _1365 = _1364 * 2.0;
        float _1369 = (1.0 - _1364) / (_1364 + 1.0);
        float _4361 = isnan(0.0) ? _1369 : (isnan(_1369) ? 0.0 : max(_1369, 0.0));
        float _1370 = isnan(1.0) ? _4361 : (isnan(_4361) ? 1.0 : min(_4361, 1.0));
        float _1379 = ((((1.0 - _1370) * (_1365 + 2.0)) * exp2(log2(isnan(1.0) ? _4339 : (isnan(_4339) ? 1.0 : min(_4339, 1.0))) * (_1365 + 1.0))) + _1370) * _1292;
        float _1380 = _1260 * 0.5;
        float _1381 = _1270 * 0.5;
        float _1382 = _1280 * 0.5;
        float _1383 = dot(vec3(_1380, _1381, _1382), vec3(_1380, _1381, _1382));
        float _1388 = (_1383 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1383);
        float _1396 = (dot(vec3(_868, _869, _870), vec3(_1388 * _1380, _1388 * _1381, _1388 * _1382)) + 1.0) * 0.5;
        float _4372 = isnan(0.0) ? _1396 : (isnan(_1396) ? 0.0 : max(_1396, 0.0));
        float _1405 = sqrt(((_1381 * _1381) + (_1380 * _1380)) + (_1382 * _1382)) / (_1293 + 9.9999997473787516355514526367188e-06);
        float _4383 = isnan(0.0) ? _1405 : (isnan(_1405) ? 0.0 : max(_1405, 0.0));
        float _1406 = isnan(1.0) ? _4383 : (isnan(_4383) ? 1.0 : min(_4383, 1.0));
        float _1407 = _1406 * 2.0;
        float _1411 = (1.0 - _1406) / (_1406 + 1.0);
        float _4394 = isnan(0.0) ? _1411 : (isnan(_1411) ? 0.0 : max(_1411, 0.0));
        float _1412 = isnan(1.0) ? _4394 : (isnan(_4394) ? 1.0 : min(_4394, 1.0));
        float _1421 = ((((1.0 - _1412) * (_1407 + 2.0)) * exp2(log2(isnan(1.0) ? _4372 : (isnan(_4372) ? 1.0 : min(_4372, 1.0))) * (_1407 + 1.0))) + _1412) * _1293;
        _1429 = _1260;
        _1431 = _1259;
        _1432 = _1258;
        _1433 = _1270;
        _1434 = _1269;
        _1435 = _1268;
        _1436 = _1280;
        _1437 = _1279;
        _1438 = _1278;
        _1439 = _1293;
        _1440 = _1292;
        _1441 = _1291;
        _1442 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1337 : (isnan(_1337) ? 0.0 : max(_1337, 0.0)));
        _1443 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1379 : (isnan(_1379) ? 0.0 : max(_1379, 0.0)));
        _1444 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1421 : (isnan(_1421) ? 0.0 : max(_1421, 0.0)));
    }
    else
    {
        _1429 = _1430;
        _1431 = _1430;
        _1432 = _1430;
        _1433 = _1430;
        _1434 = _1430;
        _1435 = _1430;
        _1436 = _1430;
        _1437 = _1430;
        _1438 = _1430;
        _1439 = _1430;
        _1440 = _1430;
        _1441 = _1430;
        _1442 = 0.0;
        _1443 = 0.0;
        _1444 = 0.0;
    }
    float _1740;
    float _1741;
    float _1742;
    float _1743;
    float _1744;
    float _1745;
    float _1746;
    float _1747;
    float _1748;
    float _1749;
    float _1750;
    float _1751;
    float _1752;
    float _1753;
    float _1754;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1471 = fma(_1099, cbModelParam._m0[30u].z, fma(_1095, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1091));
        float _1475 = fma(_1099, cbModelParam._m0[31u].z, fma(_1095, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1091));
        float _1479 = fma(_1099, cbModelParam._m0[32u].z, fma(_1095, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1091));
        float _1502 = _1091 + _868;
        float _1503 = _1095 + _869;
        float _1504 = _1099 + _870;
        float _1514 = fma(_1504, cbModelParam._m0[30u].z, fma(_1503, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1502)) - _1471;
        float _1515 = fma(_1504, cbModelParam._m0[31u].z, fma(_1503, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1502)) - _1475;
        float _1516 = fma(_1504, cbModelParam._m0[32u].z, fma(_1503, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1502)) - _1479;
        float _1520 = inversesqrt(dot(vec3(_1514, _1515, _1516), vec3(_1514, _1515, _1516)));
        float _1533 = ((_1520 * _1514) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1471 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1534 = ((_1520 * _1515) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1475 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1535 = ((_1520 * _1516) / cbModelParam._m0[35u].z) + ((((((_1479 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1537 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1533, _1534, _1535), 0.0);
        vec4 _1544 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1533, _1534, _1535), 0.0);
        vec4 _1551 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1533, _1534, _1535), 0.0);
        vec4 _1558 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1533, _1534, _1535), 0.0);
        float _1570 = exp2((_1537.w + (-0.5)) * 20.0) * 2.0;
        float _1571 = _1570 * (_1537.x + (-0.5));
        float _1572 = _1570 * (_1537.y + (-0.5));
        float _1573 = _1570 * (_1537.z + (-0.5));
        float _1580 = exp2((_1544.w + (-0.5)) * 20.0) * 2.0;
        float _1581 = _1580 * (_1544.x + (-0.5));
        float _1582 = _1580 * (_1544.y + (-0.5));
        float _1583 = _1580 * (_1544.z + (-0.5));
        float _1590 = exp2((_1551.w + (-0.5)) * 20.0) * 2.0;
        float _1591 = _1590 * (_1551.x + (-0.5));
        float _1592 = _1590 * (_1551.y + (-0.5));
        float _1593 = _1590 * (_1551.z + (-0.5));
        float _1600 = exp2((_1558.w + (-0.5)) * 20.0) * 2.0;
        float _1601 = _1600 * (_1558.x + (-0.5));
        float _1602 = _1600 * (_1558.y + (-0.5));
        float _1603 = _1600 * (_1558.z + (-0.5));
        float _1604 = isnan(0.0) ? _1601 : (isnan(_1601) ? 0.0 : max(_1601, 0.0));
        float _1605 = isnan(0.0) ? _1602 : (isnan(_1602) ? 0.0 : max(_1602, 0.0));
        float _1606 = isnan(0.0) ? _1603 : (isnan(_1603) ? 0.0 : max(_1603, 0.0));
        float _1607 = _1571 * 0.5;
        float _1608 = _1581 * 0.5;
        float _1609 = _1591 * 0.5;
        float _1610 = dot(vec3(_1607, _1608, _1609), vec3(_1607, _1608, _1609));
        float _1615 = (_1610 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1610);
        float _1623 = (dot(vec3(_868, _869, _870), vec3(_1615 * _1607, _1615 * _1608, _1615 * _1609)) + 1.0) * 0.5;
        float _4435 = isnan(0.0) ? _1623 : (isnan(_1623) ? 0.0 : max(_1623, 0.0));
        float _1632 = sqrt(((_1608 * _1608) + (_1607 * _1607)) + (_1609 * _1609)) / (_1604 + 9.9999997473787516355514526367188e-06);
        float _4446 = isnan(0.0) ? _1632 : (isnan(_1632) ? 0.0 : max(_1632, 0.0));
        float _1633 = isnan(1.0) ? _4446 : (isnan(_4446) ? 1.0 : min(_4446, 1.0));
        float _1634 = _1633 * 2.0;
        float _1638 = (1.0 - _1633) / (_1633 + 1.0);
        float _4457 = isnan(0.0) ? _1638 : (isnan(_1638) ? 0.0 : max(_1638, 0.0));
        float _1639 = isnan(1.0) ? _4457 : (isnan(_4457) ? 1.0 : min(_4457, 1.0));
        float _1648 = ((((1.0 - _1639) * (_1634 + 2.0)) * exp2(log2(isnan(1.0) ? _4435 : (isnan(_4435) ? 1.0 : min(_4435, 1.0))) * (_1634 + 1.0))) + _1639) * _1604;
        float _1649 = _1572 * 0.5;
        float _1650 = _1582 * 0.5;
        float _1651 = _1592 * 0.5;
        float _1652 = dot(vec3(_1649, _1650, _1651), vec3(_1649, _1650, _1651));
        float _1657 = (_1652 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1652);
        float _1665 = (dot(vec3(_868, _869, _870), vec3(_1657 * _1649, _1657 * _1650, _1657 * _1651)) + 1.0) * 0.5;
        float _4468 = isnan(0.0) ? _1665 : (isnan(_1665) ? 0.0 : max(_1665, 0.0));
        float _1674 = sqrt(((_1650 * _1650) + (_1649 * _1649)) + (_1651 * _1651)) / (_1605 + 9.9999997473787516355514526367188e-06);
        float _4479 = isnan(0.0) ? _1674 : (isnan(_1674) ? 0.0 : max(_1674, 0.0));
        float _1675 = isnan(1.0) ? _4479 : (isnan(_4479) ? 1.0 : min(_4479, 1.0));
        float _1676 = _1675 * 2.0;
        float _1680 = (1.0 - _1675) / (_1675 + 1.0);
        float _4490 = isnan(0.0) ? _1680 : (isnan(_1680) ? 0.0 : max(_1680, 0.0));
        float _1681 = isnan(1.0) ? _4490 : (isnan(_4490) ? 1.0 : min(_4490, 1.0));
        float _1690 = ((((1.0 - _1681) * (_1676 + 2.0)) * exp2(log2(isnan(1.0) ? _4468 : (isnan(_4468) ? 1.0 : min(_4468, 1.0))) * (_1676 + 1.0))) + _1681) * _1605;
        float _1691 = _1573 * 0.5;
        float _1692 = _1583 * 0.5;
        float _1693 = _1593 * 0.5;
        float _1694 = dot(vec3(_1691, _1692, _1693), vec3(_1691, _1692, _1693));
        float _1699 = (_1694 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1694);
        float _1707 = (dot(vec3(_868, _869, _870), vec3(_1699 * _1691, _1699 * _1692, _1699 * _1693)) + 1.0) * 0.5;
        float _4501 = isnan(0.0) ? _1707 : (isnan(_1707) ? 0.0 : max(_1707, 0.0));
        float _1716 = sqrt(((_1692 * _1692) + (_1691 * _1691)) + (_1693 * _1693)) / (_1606 + 9.9999997473787516355514526367188e-06);
        float _4512 = isnan(0.0) ? _1716 : (isnan(_1716) ? 0.0 : max(_1716, 0.0));
        float _1717 = isnan(1.0) ? _4512 : (isnan(_4512) ? 1.0 : min(_4512, 1.0));
        float _1718 = _1717 * 2.0;
        float _1722 = (1.0 - _1717) / (_1717 + 1.0);
        float _4523 = isnan(0.0) ? _1722 : (isnan(_1722) ? 0.0 : max(_1722, 0.0));
        float _1723 = isnan(1.0) ? _4523 : (isnan(_4523) ? 1.0 : min(_4523, 1.0));
        float _1732 = ((((1.0 - _1723) * (_1718 + 2.0)) * exp2(log2(isnan(1.0) ? _4501 : (isnan(_4501) ? 1.0 : min(_4501, 1.0))) * (_1718 + 1.0))) + _1723) * _1606;
        _1740 = _1573;
        _1741 = _1572;
        _1742 = _1571;
        _1743 = _1583;
        _1744 = _1582;
        _1745 = _1581;
        _1746 = _1593;
        _1747 = _1592;
        _1748 = _1591;
        _1749 = _1606;
        _1750 = _1605;
        _1751 = _1604;
        _1752 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1648 : (isnan(_1648) ? 0.0 : max(_1648, 0.0)));
        _1753 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1690 : (isnan(_1690) ? 0.0 : max(_1690, 0.0)));
        _1754 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1732 : (isnan(_1732) ? 0.0 : max(_1732, 0.0)));
    }
    else
    {
        _1740 = _1430;
        _1741 = _1430;
        _1742 = _1430;
        _1743 = _1430;
        _1744 = _1430;
        _1745 = _1430;
        _1746 = _1430;
        _1747 = _1430;
        _1748 = _1430;
        _1749 = _1430;
        _1750 = _1430;
        _1751 = _1430;
        _1752 = 0.0;
        _1753 = 0.0;
        _1754 = 0.0;
    }
    float _1764 = (cbModelParam._m0[1u].x * (_1752 - _1442)) + _1442;
    float _1765 = (cbModelParam._m0[1u].x * (_1753 - _1443)) + _1443;
    float _1766 = (cbModelParam._m0[1u].x * (_1754 - _1444)) + _1444;
    float _1787 = fma(_1766, cbSceneParam._m0[89u].z, fma(_1765, cbSceneParam._m0[89u].y, _1764 * cbSceneParam._m0[89u].x));
    float _1790 = fma(_1766, cbSceneParam._m0[90u].z, fma(_1765, cbSceneParam._m0[90u].y, _1764 * cbSceneParam._m0[90u].x));
    float _1793 = fma(_1766, cbSceneParam._m0[91u].z, fma(_1765, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1764));
    float _1808 = _1038 * 0.5;
    float _1809 = _1039 * 0.5;
    float _1810 = _1040 * 0.5;
    float _1811 = dot(vec4(_1808, _1809, _1810, 1.0), vec4(_1742, _1745, _1748, _1751));
    float _1814 = dot(vec4(_1808, _1809, _1810, 1.0), vec4(_1741, _1744, _1747, _1750));
    float _1817 = dot(vec4(_1808, _1809, _1810, 1.0), vec4(_1740, _1743, _1746, _1749));
    float _1851;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1824 = dot(vec4(_1808, _1809, _1810, 1.0), vec4(_1429, _1433, _1436, _1439));
        float _1828 = dot(vec4(_1808, _1809, _1810, 1.0), vec4(_1431, _1434, _1437, _1440));
        float _1832 = dot(vec4(_1808, _1809, _1810, 1.0), vec4(_1432, _1435, _1438, _1441));
        float _1839 = dot(vec4(cbModelParam._m0[39u]), vec4(_1808, _1809, _1810, 1.0));
        _1851 = dot(vec3(isnan(0.0) ? _1832 : (isnan(_1832) ? 0.0 : max(_1832, 0.0)), isnan(0.0) ? _1828 : (isnan(_1828) ? 0.0 : max(_1828, 0.0)), isnan(0.0) ? _1824 : (isnan(_1824) ? 0.0 : max(_1824, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1839) ? 0.0 : (isnan(0.0) ? _1839 : max(0.0, _1839))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1851 = 1.0;
    }
    float _1862;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1853 = dot(vec4(cbModelParam._m0[40u]), vec4(_1808, _1809, _1810, 1.0));
        _1862 = dot(vec3(isnan(0.0) ? _1811 : (isnan(_1811) ? 0.0 : max(_1811, 0.0)), isnan(0.0) ? _1814 : (isnan(_1814) ? 0.0 : max(_1814, 0.0)), isnan(0.0) ? _1817 : (isnan(_1817) ? 0.0 : max(_1817, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1853) ? 0.0 : (isnan(0.0) ? _1853 : max(0.0, _1853))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1862 = 1.0;
    }
    float _1866 = (_1862 * cbModelParam._m0[1u].x) + (_1851 * (1.0 - cbModelParam._m0[1u].x));
    float _1876 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _871);
    float _1877 = isnan(_1876) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1876 : min(cbModelParam._m0[25u].z, _1876));
    float _1957;
    float _1959;
    float _1961;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1924 = fma(_1099, cbModelParam._m0[13u].z, fma(_1095, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1091)) + cbModelParam._m0[13u].w;
        float _1928 = fma(_1099, cbModelParam._m0[14u].z, fma(_1095, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1091)) + cbModelParam._m0[14u].w;
        float _1932 = fma(_1099, cbModelParam._m0[15u].z, fma(_1095, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1091)) + cbModelParam._m0[15u].w;
        float _1935 = fma(_1040, cbModelParam._m0[13u].z, fma(_1039, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1038));
        float _1938 = fma(_1040, cbModelParam._m0[14u].z, fma(_1039, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1038));
        float _1941 = fma(_1040, cbModelParam._m0[15u].z, fma(_1039, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1038));
        float _1969;
        if (_1935 > 0.0)
        {
            _1969 = abs((1.0 - _1924) / _1935);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1935 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1924 + 1.0) / _1935);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1969 = frontier_phi_17_15_ladder;
        }
        float _2138;
        if (_1938 > 0.0)
        {
            _2138 = abs((1.0 - _1928) / _1938);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1938 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1928 + 1.0) / _1938);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2138 = frontier_phi_26_22_ladder;
        }
        float _2433;
        if (_1941 > 0.0)
        {
            _2433 = abs((1.0 - _1932) / _1941);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1941 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1932 + 1.0) / _1941);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2433 = frontier_phi_38_33_ladder;
        }
        float _2435 = isnan(_2138) ? _1969 : (isnan(_1969) ? _2138 : min(_1969, _2138));
        float _2436 = isnan(_2433) ? _2435 : (isnan(_2435) ? _2433 : min(_2435, _2433));
        float _2440 = (_2436 * _1935) + _1924;
        float _2441 = (_2436 * _1938) + _1928;
        float _2442 = (_2436 * _1941) + _1932;
        float _2443 = _2436 * 9.9999997473787516355514526367188e-05;
        float _2445 = (-1.0) - _2443;
        float _2447 = _2443 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2442 > _2447) || ((_2442 < _2445) || ((_2441 > _2447) || ((_2441 < _2445) || ((_2440 < _2445) || (_2440 > _2447))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2587 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2442, cbModelParam._m0[9u].z, fma(_2441, cbModelParam._m0[9u].y, _2440 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2442, cbModelParam._m0[10u].z, fma(_2441, cbModelParam._m0[10u].y, _2440 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2442, cbModelParam._m0[11u].z, fma(_2441, cbModelParam._m0[11u].y, _2440 * cbModelParam._m0[11u].x))), _1877);
            frontier_phi_16_38_ladder = _2587.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2587.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2587.x * cbModelParam._m0[1u].y;
        }
        _1957 = frontier_phi_16_38_ladder_2;
        _1959 = frontier_phi_16_38_ladder_1;
        _1961 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1945 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1038, _1039, _1040), _1877);
        _1957 = _1945.x * cbModelParam._m0[1u].y;
        _1959 = _1945.y * cbModelParam._m0[1u].y;
        _1961 = _1945.z * cbModelParam._m0[1u].y;
    }
    float _1965 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _871);
    float _1966 = isnan(_1965) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1965 : min(cbModelParam._m0[25u].w, _1965));
    float _2055;
    float _2057;
    float _2059;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2019 = fma(_1099, cbModelParam._m0[21u].z, fma(_1095, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1091)) + cbModelParam._m0[21u].w;
        float _2023 = fma(_1099, cbModelParam._m0[22u].z, fma(_1095, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1091)) + cbModelParam._m0[22u].w;
        float _2027 = fma(_1099, cbModelParam._m0[23u].z, fma(_1095, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1091)) + cbModelParam._m0[23u].w;
        float _2030 = fma(_1040, cbModelParam._m0[21u].z, fma(_1039, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1038));
        float _2033 = fma(_1040, cbModelParam._m0[22u].z, fma(_1039, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1038));
        float _2036 = fma(_1040, cbModelParam._m0[23u].z, fma(_1039, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1038));
        float _2143;
        if (_2030 > 0.0)
        {
            _2143 = abs((1.0 - _2019) / _2030);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_2030 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_2019 + 1.0) / _2030);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2143 = frontier_phi_28_24_ladder;
        }
        float _2460;
        if (_2033 > 0.0)
        {
            _2460 = abs((1.0 - _2023) / _2033);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_2033 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_2023 + 1.0) / _2033);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2460 = frontier_phi_40_35_ladder;
        }
        float _2787;
        if (_2036 > 0.0)
        {
            _2787 = abs((1.0 - _2027) / _2036);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_2036 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_2027 + 1.0) / _2036);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _2787 = frontier_phi_50_47_ladder;
        }
        float _2789 = isnan(_2460) ? _2143 : (isnan(_2143) ? _2460 : min(_2143, _2460));
        float _2790 = isnan(_2787) ? _2789 : (isnan(_2789) ? _2787 : min(_2789, _2787));
        float _2794 = (_2790 * _2030) + _2019;
        float _2795 = (_2790 * _2033) + _2023;
        float _2796 = (_2790 * _2036) + _2027;
        float _2797 = _2790 * 9.9999997473787516355514526367188e-05;
        float _2798 = (-1.0) - _2797;
        float _2800 = _2797 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_2796 > _2800) || ((_2796 < _2798) || ((_2795 > _2800) || ((_2795 < _2798) || ((_2794 < _2798) || (_2794 > _2800))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2914 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2796, cbModelParam._m0[17u].z, fma(_2795, cbModelParam._m0[17u].y, _2794 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2796, cbModelParam._m0[18u].z, fma(_2795, cbModelParam._m0[18u].y, _2794 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2796, cbModelParam._m0[19u].z, fma(_2795, cbModelParam._m0[19u].y, _2794 * cbModelParam._m0[19u].x))), _1966);
            frontier_phi_25_50_ladder = _2914.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _2914.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _2914.x * cbModelParam._m0[1u].z;
        }
        _2055 = frontier_phi_25_50_ladder_2;
        _2057 = frontier_phi_25_50_ladder_1;
        _2059 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _2039 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1038, _1039, _1040), _1966);
        _2055 = _2039.x * cbModelParam._m0[1u].z;
        _2057 = _2039.y * cbModelParam._m0[1u].z;
        _2059 = _2039.z * cbModelParam._m0[1u].z;
    }
    float _2071 = ((((1.0 - _1059) * ((_1046 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_1059 * _1046)) * _1030;
    float _2072 = _2071 * ((cbModelParam._m0[1u].w * (_2055 - _1957)) + _1957);
    float _2073 = _2071 * ((cbModelParam._m0[1u].w * (_2057 - _1959)) + _1959);
    float _2074 = _2071 * ((cbModelParam._m0[1u].w * (_2059 - _1961)) + _1961);
    float _2077 = fma(_2074, cbSceneParam._m0[89u].z, fma(_2073, cbSceneParam._m0[89u].y, _2072 * cbSceneParam._m0[89u].x));
    float _2080 = fma(_2074, cbSceneParam._m0[90u].z, fma(_2073, cbSceneParam._m0[90u].y, _2072 * cbSceneParam._m0[90u].x));
    float _2083 = fma(_2074, cbSceneParam._m0[91u].z, fma(_2073, cbSceneParam._m0[91u].y, _2072 * cbSceneParam._m0[91u].x));
    float _2117 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2121 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2125 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2129 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2130 = _2117 / _2129;
    float _2131 = _2121 / _2129;
    float _2132 = _2125 / _2129;
    float _2279;
    float _2280;
    float _2281;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2159 = ((uint(_2132 > cbSceneParam._m0[59u].y) + uint(_2132 > cbSceneParam._m0[59u].x)) + uint(_2132 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2160 = _2159 + 43u;
        uint _2168 = _2159 + 44u;
        uint _2176 = _2159 + 45u;
        uint _2184 = _2159 + 46u;
        float _2195 = fma(_2129, cbSceneParam._m0[_2160].w, fma(_2125, cbSceneParam._m0[_2160].z, fma(_2121, cbSceneParam._m0[_2160].y, _2117 * cbSceneParam._m0[_2160].x)));
        float _2199 = fma(_2129, cbSceneParam._m0[_2168].w, fma(_2125, cbSceneParam._m0[_2168].z, fma(_2121, cbSceneParam._m0[_2168].y, _2117 * cbSceneParam._m0[_2168].x)));
        float _2207 = fma(_2129, cbSceneParam._m0[_2184].w, fma(_2125, cbSceneParam._m0[_2184].z, fma(_2121, cbSceneParam._m0[_2184].y, _2117 * cbSceneParam._m0[_2184].x)));
        float _2212 = cbSceneParam._m0[33u].z * _2207;
        float _2214 = cbSceneParam._m0[33u].w * _2207;
        float _2217 = fma(_2129, cbSceneParam._m0[_2176].w, fma(_2125, cbSceneParam._m0[_2176].z, fma(_2121, cbSceneParam._m0[_2176].y, _2117 * cbSceneParam._m0[_2176].x))) / _2207;
        float _2265 = (cbSceneParam._m0[33u].x - sqrt(((_2131 * _2131) + (_2130 * _2130)) + (_2132 * _2132))) * cbSceneParam._m0[33u].y;
        float _4649 = isnan(0.0) ? _2265 : (isnan(_2265) ? 0.0 : max(_2265, 0.0));
        float _2272 = (isnan(1.0) ? _4649 : (isnan(_4649) ? 1.0 : min(_4649, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2212 + _2195) / _2207, (_2214 + _2199) / _2207), _2217), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2214 + _2195) / _2207, (_2199 - _2212) / _2207), _2217), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2195 - _2212) / _2207, (_2199 - _2214) / _2207), _2217), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2195 - _2214) / _2207, (_2212 + _2199) / _2207), _2217), 0.0)).x), vec4(0.25)));
        _2279 = 1.0 - (_2272 * cbSceneParam._m0[34u].x);
        _2280 = 1.0 - (_2272 * cbSceneParam._m0[34u].y);
        _2281 = 1.0 - (_2272 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2279 = 1.0;
        _2280 = 1.0;
        _2281 = 1.0;
    }
    float _2345;
    float _2347;
    float _2349;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2333 = fma(_2129, cbSceneParam._m0[63u].w, fma(_2125, cbSceneParam._m0[63u].z, fma(_2121, cbSceneParam._m0[63u].y, _2117 * cbSceneParam._m0[63u].x)));
        float _2334 = fma(_2129, cbSceneParam._m0[60u].w, fma(_2125, cbSceneParam._m0[60u].z, fma(_2121, cbSceneParam._m0[60u].y, _2117 * cbSceneParam._m0[60u].x))) / _2333;
        float _2335 = fma(_2129, cbSceneParam._m0[61u].w, fma(_2125, cbSceneParam._m0[61u].z, fma(_2121, cbSceneParam._m0[61u].y, _2117 * cbSceneParam._m0[61u].x))) / _2333;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_2334 >= cbSceneParam._m0[64u].x) && (_2335 >= cbSceneParam._m0[64u].y)) && (_2334 <= cbSceneParam._m0[64u].z)) && (_2335 <= cbSceneParam._m0[64u].w))
        {
            float _2473 = fma(_2129, cbSceneParam._m0[62u].w, fma(_2125, cbSceneParam._m0[62u].z, fma(_2121, cbSceneParam._m0[62u].y, _2117 * cbSceneParam._m0[62u].x))) / _2333;
            float _2477 = isnan(cbSceneParam._m0[41u].w) ? _2473 : (isnan(_2473) ? cbSceneParam._m0[41u].w : max(_2473, cbSceneParam._m0[41u].w));
            float _2520 = (cbSceneParam._m0[33u].x - sqrt(((_2131 * _2131) + (_2130 * _2130)) + (_2132 * _2132))) * cbSceneParam._m0[33u].y;
            float _4665 = isnan(0.0) ? _2520 : (isnan(_2520) ? 0.0 : max(_2520, 0.0));
            float _2527 = (isnan(1.0) ? _4665 : (isnan(_4665) ? 1.0 : min(_4665, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2334, cbSceneParam._m0[33u].w + _2335), _2477), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2334, _2335 - cbSceneParam._m0[33u].z), _2477), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2334 - cbSceneParam._m0[33u].z, _2335 - cbSceneParam._m0[33u].w), _2477), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2334 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2335), _2477), 0.0)).x), vec4(0.25)));
            float _2531 = 1.0 - (_2527 * cbSceneParam._m0[34u].x);
            float _2532 = 1.0 - (_2527 * cbSceneParam._m0[34u].y);
            float _2533 = 1.0 - (_2527 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_2533) ? _2281 : (isnan(_2281) ? _2533 : min(_2281, _2533));
            frontier_phi_37_36_ladder_1 = isnan(_2532) ? _2280 : (isnan(_2280) ? _2532 : min(_2280, _2532));
            frontier_phi_37_36_ladder_2 = isnan(_2531) ? _2279 : (isnan(_2279) ? _2531 : min(_2279, _2531));
        }
        else
        {
            frontier_phi_37_36_ladder = _2281;
            frontier_phi_37_36_ladder_1 = _2280;
            frontier_phi_37_36_ladder_2 = _2279;
        }
        _2345 = frontier_phi_37_36_ladder_2;
        _2347 = frontier_phi_37_36_ladder_1;
        _2349 = frontier_phi_37_36_ladder;
    }
    else
    {
        _2345 = _2279;
        _2347 = _2280;
        _2349 = _2281;
    }
    uvec4 _2354 = floatBitsToUint(cbInstanceData._m0[_278 + 5u]);
    uint _2356 = _2354.x * 14u;
    uint _2357 = _2356 + 13u;
    float _2364 = _1030 + (-1.0);
    float _2369 = (cbLight._m0[_2357].x * _2364) + 1.0;
    float _2370 = (cbLight._m0[_2357].y * _2364) + 1.0;
    float _2371 = (cbLight._m0[_2357].z * _2364) + 1.0;
    float _2372 = (cbLight._m0[_2357].w * _2364) + 1.0;
    uint _2373 = _2356 + 5u;
    float _2379 = isnan(1.0) ? _2370 : (isnan(_2370) ? 1.0 : min(_2370, 1.0));
    uint _2383 = _2356 + 4u;
    float _2392 = isnan(1.0) ? _2369 : (isnan(_2369) ? 1.0 : min(_2369, 1.0));
    uint _2396 = _2356 | 1u;
    float _2407 = dot(vec3(cbLight._m0[_2356].xyz), vec3(_868, _869, _870));
    float _2410 = dot(vec3(cbLight._m0[_2396].xyz), vec3(_868, _869, _870));
    float _4701 = isnan(0.0) ? _2407 : (isnan(_2407) ? 0.0 : max(_2407, 0.0));
    float _4712 = isnan(0.0) ? _2410 : (isnan(_2410) ? 0.0 : max(_2410, 0.0));
    float _2415 = (isnan(1.0) ? _4701 : (isnan(_4701) ? 1.0 : min(_4701, 1.0))) * 0.3183098733425140380859375;
    float _2417 = (isnan(1.0) ? _4712 : (isnan(_4712) ? 1.0 : min(_4712, 1.0))) * 0.3183098733425140380859375;
    float _2424 = ((cbLight._m0[_2373].x * _2379) * _2417) + (((cbLight._m0[_2383].x * _2345) * _2392) * _2415);
    float _2425 = ((_2379 * cbLight._m0[_2373].y) * _2417) + (((cbLight._m0[_2383].y * _2347) * _2392) * _2415);
    float _2426 = ((_2379 * cbLight._m0[_2373].z) * _2417) + (((cbLight._m0[_2383].z * _2349) * _2392) * _2415);
    uvec4 _2430 = floatBitsToUint(cbLight._m0[_2356 + 12u]);
    bool _2432 = _2430.x == 0u;
    float _2534;
    float _2536;
    float _2538;
    if (_2432)
    {
        _2534 = _2424;
        _2536 = _2425;
        _2538 = _2426;
    }
    else
    {
        uint _2542 = _2356 + 6u;
        float _2558 = (dot(vec3(cbLight._m0[_2356 + 2u].xyz), vec3(_868, _869, _870)) * 0.5) + 0.5;
        float _2559 = _2558 * _2558;
        float _4723 = isnan(0.0) ? _2559 : (isnan(_2559) ? 0.0 : max(_2559, 0.0));
        float _2560 = isnan(1.0) ? _4723 : (isnan(_4723) ? 1.0 : min(_4723, 1.0));
        float _2561 = isnan(1.0) ? _2371 : (isnan(_2371) ? 1.0 : min(_2371, 1.0));
        _2534 = (((cbLight._m0[_2542].x * 0.3183098733425140380859375) * _2560) * _2561) + _2424;
        _2536 = (((cbLight._m0[_2542].y * 0.3183098733425140380859375) * _2560) * _2561) + _2425;
        _2538 = (((cbLight._m0[_2542].z * 0.3183098733425140380859375) * _2560) * _2561) + _2426;
    }
    bool _2541 = _2430.y == 0u;
    float _2596;
    float _2598;
    float _2600;
    if (_2541)
    {
        _2596 = _2534;
        _2598 = _2536;
        _2600 = _2538;
    }
    else
    {
        uint _2758 = _2356 + 7u;
        float _2774 = (dot(vec3(cbLight._m0[_2356 + 3u].xyz), vec3(_868, _869, _870)) * 0.5) + 0.5;
        float _2775 = _2774 * _2774;
        float _4739 = isnan(0.0) ? _2775 : (isnan(_2775) ? 0.0 : max(_2775, 0.0));
        float _2776 = isnan(1.0) ? _4739 : (isnan(_4739) ? 1.0 : min(_4739, 1.0));
        float _2777 = isnan(1.0) ? _2372 : (isnan(_2372) ? 1.0 : min(_2372, 1.0));
        _2596 = (((cbLight._m0[_2758].x * 0.3183098733425140380859375) * _2776) * _2777) + _2534;
        _2598 = (((cbLight._m0[_2758].y * 0.3183098733425140380859375) * _2776) * _2777) + _2536;
        _2600 = (((cbLight._m0[_2758].z * 0.3183098733425140380859375) * _2776) * _2777) + _2538;
    }
    uint _2603 = _2356 + 8u;
    float _2616 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2356].w)) * _871) * 0.949999988079071044921875);
    float _2617 = _2616 * _2616;
    float _2618 = cbLight._m0[_2356].x + _947;
    float _2619 = cbLight._m0[_2356].y + _948;
    float _2620 = cbLight._m0[_2356].z + _949;
    float _2624 = inversesqrt(dot(vec3(_2618, _2619, _2620), vec3(_2618, _2619, _2620)));
    float _2625 = _2624 * _2618;
    float _2626 = _2624 * _2619;
    float _2627 = _2624 * _2620;
    float _2628 = dot(vec3(_868, _869, _870), vec3(cbLight._m0[_2356].xyz));
    float _4755 = isnan(0.0) ? _2628 : (isnan(_2628) ? 0.0 : max(_2628, 0.0));
    float _2631 = isnan(1.0) ? _4755 : (isnan(_4755) ? 1.0 : min(_4755, 1.0));
    float _4766 = isnan(0.0) ? _1031 : (isnan(_1031) ? 0.0 : max(_1031, 0.0));
    float _2632 = isnan(1.0) ? _4766 : (isnan(_4766) ? 1.0 : min(_4766, 1.0));
    float _2633 = dot(vec3(_868, _869, _870), vec3(_2625, _2626, _2627));
    float _4777 = isnan(0.0) ? _2633 : (isnan(_2633) ? 0.0 : max(_2633, 0.0));
    float _2636 = isnan(1.0) ? _4777 : (isnan(_4777) ? 1.0 : min(_4777, 1.0));
    float _2637 = dot(vec3(cbLight._m0[_2356].xyz), vec3(_2625, _2626, _2627));
    float _4788 = isnan(0.0) ? _2637 : (isnan(_2637) ? 0.0 : max(_2637, 0.0));
    float _2641 = _2617 * _2617;
    float _2645 = ((_2636 * _2636) * (_2641 + (-1.0))) + 1.0;
    float _2656 = (exp2(log2(1.0 - (isnan(1.0) ? _4788 : (isnan(_4788) ? 1.0 : min(_4788, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2657 = 1.0 - _2617;
    float _2668 = (0.5 / (((_2632 * ((_2631 * _2657) + _2617)) + 9.9999999392252902907785028219223e-09) + (((_2632 * _2657) + _2617) * _2631))) * _2631;
    float _4799 = isnan(0.0) ? _2668 : (isnan(_2668) ? 0.0 : max(_2668, 0.0));
    float _2670 = (isnan(1.0) ? _4799 : (isnan(_4799) ? 1.0 : min(_4799, 1.0))) * (_2641 / ((_2645 * _2645) * 3.141590118408203125));
    uint _2684 = _2356 + 9u;
    float _2695 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2396].w)) * _871) * 0.949999988079071044921875);
    float _2696 = _2695 * _2695;
    float _2697 = cbLight._m0[_2396].x + _947;
    float _2698 = cbLight._m0[_2396].y + _948;
    float _2699 = cbLight._m0[_2396].z + _949;
    float _2703 = inversesqrt(dot(vec3(_2697, _2698, _2699), vec3(_2697, _2698, _2699)));
    float _2704 = _2703 * _2697;
    float _2705 = _2703 * _2698;
    float _2706 = _2703 * _2699;
    float _2707 = dot(vec3(_868, _869, _870), vec3(cbLight._m0[_2396].xyz));
    float _4810 = isnan(0.0) ? _2707 : (isnan(_2707) ? 0.0 : max(_2707, 0.0));
    float _2710 = isnan(1.0) ? _4810 : (isnan(_4810) ? 1.0 : min(_4810, 1.0));
    float _2711 = dot(vec3(_868, _869, _870), vec3(_2704, _2705, _2706));
    float _4821 = isnan(0.0) ? _2711 : (isnan(_2711) ? 0.0 : max(_2711, 0.0));
    float _2714 = isnan(1.0) ? _4821 : (isnan(_4821) ? 1.0 : min(_4821, 1.0));
    float _2715 = dot(vec3(cbLight._m0[_2396].xyz), vec3(_2704, _2705, _2706));
    float _4832 = isnan(0.0) ? _2715 : (isnan(_2715) ? 0.0 : max(_2715, 0.0));
    float _2719 = _2696 * _2696;
    float _2723 = ((_2714 * _2714) * (_2719 + (-1.0))) + 1.0;
    float _2732 = (exp2(log2(1.0 - (isnan(1.0) ? _4832 : (isnan(_4832) ? 1.0 : min(_4832, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2733 = 1.0 - _2696;
    float _2743 = (0.5 / (((_2632 * ((_2710 * _2733) + _2696)) + 9.9999999392252902907785028219223e-09) + (((_2632 * _2733) + _2696) * _2710))) * _2710;
    float _4843 = isnan(0.0) ? _2743 : (isnan(_2743) ? 0.0 : max(_2743, 0.0));
    float _2745 = (isnan(1.0) ? _4843 : (isnan(_4843) ? 1.0 : min(_4843, 1.0))) * (_2719 / ((_2723 * _2723) * 3.141590118408203125));
    float _2755 = (((_2732 * cbLight._m0[_2684].x) * _2745) * _2379) + ((((cbLight._m0[_2603].x * _2345) * _2656) * _2670) * _2392);
    float _2756 = (((_2732 * cbLight._m0[_2684].y) * _2745) * _2379) + ((((cbLight._m0[_2603].y * _2347) * _2656) * _2670) * _2392);
    float _2757 = (((_2732 * cbLight._m0[_2684].z) * _2745) * _2379) + ((((cbLight._m0[_2603].z * _2349) * _2656) * _2670) * _2392);
    float _2813;
    float _2815;
    float _2817;
    if (_2432)
    {
        _2813 = _2755;
        _2815 = _2756;
        _2817 = _2757;
    }
    else
    {
        uint _2819 = _2356 + 2u;
        uint _2823 = _2356 + 10u;
        float _2837 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2819].w)) * _871) * 0.949999988079071044921875);
        float _2838 = _2837 * _2837;
        float _2839 = cbLight._m0[_2819].x + _947;
        float _2840 = cbLight._m0[_2819].y + _948;
        float _2841 = cbLight._m0[_2819].z + _949;
        float _2845 = inversesqrt(dot(vec3(_2839, _2840, _2841), vec3(_2839, _2840, _2841)));
        float _2846 = _2845 * _2839;
        float _2847 = _2845 * _2840;
        float _2848 = _2845 * _2841;
        float _2849 = dot(vec3(_868, _869, _870), vec3(cbLight._m0[_2819].xyz));
        float _4854 = isnan(0.0) ? _2849 : (isnan(_2849) ? 0.0 : max(_2849, 0.0));
        float _2852 = isnan(1.0) ? _4854 : (isnan(_4854) ? 1.0 : min(_4854, 1.0));
        float _2853 = dot(vec3(_868, _869, _870), vec3(_2846, _2847, _2848));
        float _4865 = isnan(0.0) ? _2853 : (isnan(_2853) ? 0.0 : max(_2853, 0.0));
        float _2856 = isnan(1.0) ? _4865 : (isnan(_4865) ? 1.0 : min(_4865, 1.0));
        float _2857 = dot(vec3(cbLight._m0[_2819].xyz), vec3(_2846, _2847, _2848));
        float _4876 = isnan(0.0) ? _2857 : (isnan(_2857) ? 0.0 : max(_2857, 0.0));
        float _2861 = _2838 * _2838;
        float _2865 = ((_2856 * _2856) * (_2861 + (-1.0))) + 1.0;
        float _2874 = (exp2(log2(1.0 - (isnan(1.0) ? _4876 : (isnan(_4876) ? 1.0 : min(_4876, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2875 = 1.0 - _2838;
        float _2885 = (0.5 / (((_2632 * ((_2852 * _2875) + _2838)) + 9.9999999392252902907785028219223e-09) + (((_2632 * _2875) + _2838) * _2852))) * _2852;
        float _4887 = isnan(0.0) ? _2885 : (isnan(_2885) ? 0.0 : max(_2885, 0.0));
        float _2887 = (isnan(1.0) ? _4887 : (isnan(_4887) ? 1.0 : min(_4887, 1.0))) * (_2861 / ((_2865 * _2865) * 3.141590118408203125));
        float _2888 = isnan(1.0) ? _2371 : (isnan(_2371) ? 1.0 : min(_2371, 1.0));
        _2813 = (((_2874 * cbLight._m0[_2823].x) * _2887) * _2888) + _2755;
        _2815 = (((_2874 * cbLight._m0[_2823].y) * _2887) * _2888) + _2756;
        _2817 = (((_2874 * cbLight._m0[_2823].z) * _2887) * _2888) + _2757;
    }
    float _2919;
    float _2921;
    float _2923;
    if (_2541)
    {
        _2919 = _2813;
        _2921 = _2815;
        _2923 = _2817;
    }
    else
    {
        uint _2930 = _2356 + 3u;
        uint _2934 = _2356 + 11u;
        float _2948 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2930].w)) * _871) * 0.949999988079071044921875);
        float _2949 = _2948 * _2948;
        float _2950 = cbLight._m0[_2930].x + _947;
        float _2951 = cbLight._m0[_2930].y + _948;
        float _2952 = cbLight._m0[_2930].z + _949;
        float _2956 = inversesqrt(dot(vec3(_2950, _2951, _2952), vec3(_2950, _2951, _2952)));
        float _2957 = _2956 * _2950;
        float _2958 = _2956 * _2951;
        float _2959 = _2956 * _2952;
        float _2960 = dot(vec3(_868, _869, _870), vec3(cbLight._m0[_2930].xyz));
        float _4903 = isnan(0.0) ? _2960 : (isnan(_2960) ? 0.0 : max(_2960, 0.0));
        float _2963 = isnan(1.0) ? _4903 : (isnan(_4903) ? 1.0 : min(_4903, 1.0));
        float _2964 = dot(vec3(_868, _869, _870), vec3(_2957, _2958, _2959));
        float _4914 = isnan(0.0) ? _2964 : (isnan(_2964) ? 0.0 : max(_2964, 0.0));
        float _2967 = isnan(1.0) ? _4914 : (isnan(_4914) ? 1.0 : min(_4914, 1.0));
        float _2968 = dot(vec3(cbLight._m0[_2930].xyz), vec3(_2957, _2958, _2959));
        float _4925 = isnan(0.0) ? _2968 : (isnan(_2968) ? 0.0 : max(_2968, 0.0));
        float _2972 = _2949 * _2949;
        float _2976 = ((_2967 * _2967) * (_2972 + (-1.0))) + 1.0;
        float _2985 = (exp2(log2(1.0 - (isnan(1.0) ? _4925 : (isnan(_4925) ? 1.0 : min(_4925, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2986 = 1.0 - _2949;
        float _2996 = (0.5 / (((_2632 * ((_2963 * _2986) + _2949)) + 9.9999999392252902907785028219223e-09) + (((_2632 * _2986) + _2949) * _2963))) * _2963;
        float _4936 = isnan(0.0) ? _2996 : (isnan(_2996) ? 0.0 : max(_2996, 0.0));
        float _2998 = (isnan(1.0) ? _4936 : (isnan(_4936) ? 1.0 : min(_4936, 1.0))) * (_2972 / ((_2976 * _2976) * 3.141590118408203125));
        float _2999 = isnan(1.0) ? _2372 : (isnan(_2372) ? 1.0 : min(_2372, 1.0));
        _2919 = (((_2985 * cbLight._m0[_2934].x) * _2998) * _2999) + _2813;
        _2921 = (((_2985 * cbLight._m0[_2934].y) * _2998) * _2999) + _2815;
        _2923 = (((_2985 * cbLight._m0[_2934].z) * _2998) * _2999) + _2817;
    }
    float _3065;
    float _3067;
    float _3069;
    float _3071;
    float _3073;
    float _3075;
    if (_2354.y == 0u)
    {
        uvec4 _3020 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3021 = _3020.x;
        uint _3032 = uint((float(_3020.y) * floor(float(uint(cbSceneParam._m0[85u].y * _968) / _3021))) + floor(float(uint(cbSceneParam._m0[85u].x * _967) / _3021)));
        float _3042 = (log2(_2132 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _3043 = isnan(0.0) ? _3042 : (isnan(_3042) ? 0.0 : max(_3042, 0.0));
        uint _3046 = uint(isnan(14.0) ? _3043 : (isnan(_3043) ? 14.0 : min(_3043, 14.0)));
        uvec4 _3051 = texelFetch(g_lightClusterGridBuffer, int(((_3046 << 2u) + (_3032 << 6u)) >> 2u));
        uint _3052 = _3051.x;
        uint _3053 = _3020.z;
        float _3132;
        float _3134;
        float _3136;
        float _3138;
        float _3140;
        float _3142;
        if (((((1u << ((_3053 >> 4u) & 15u)) + 4294967295u) & _3052) == 0u) || ((_3053 & 240u) == 0u))
        {
            _3132 = 0.0;
            _3134 = 0.0;
            _3136 = 0.0;
            _3138 = 0.0;
            _3140 = 0.0;
            _3142 = 0.0;
        }
        else
        {
            float _3133;
            float _3135;
            float _3137;
            float _3139;
            float _3141;
            float _3143;
            float _3285 = 0.0;
            float _3286 = 0.0;
            float _3287 = 0.0;
            float _3288 = 0.0;
            float _3289 = 0.0;
            float _3290 = 0.0;
            uint _3291 = 0u;
            uint _3300;
            bool _3301;
            for (;;)
            {
                _3300 = texelFetch(g_lightClassification, int((((_3046 << 5u) + (_3032 << 9u)) + (_3291 << 2u)) >> 2u)).x;
                _3301 = _3300 == 0u;
                float frontier_phi_71_pred;
                float frontier_phi_71_pred_1;
                float frontier_phi_71_pred_2;
                float frontier_phi_71_pred_3;
                float frontier_phi_71_pred_4;
                float frontier_phi_71_pred_5;
                if (_3301)
                {
                    frontier_phi_71_pred = _3290;
                    frontier_phi_71_pred_1 = _3289;
                    frontier_phi_71_pred_2 = _3288;
                    frontier_phi_71_pred_3 = _3287;
                    frontier_phi_71_pred_4 = _3286;
                    frontier_phi_71_pred_5 = _3285;
                }
                else
                {
                    float _3430;
                    float _3431;
                    float _3432;
                    float _3433;
                    float _3434;
                    float _3435;
                    uint _3436;
                    _3430 = _3285;
                    _3431 = _3286;
                    _3432 = _3287;
                    _3433 = _3288;
                    _3434 = _3289;
                    _3435 = _3290;
                    _3436 = _3300;
                    float _3357;
                    float _3358;
                    float _3359;
                    float _3360;
                    float _3361;
                    float _3362;
                    for (;;)
                    {
                        uint _3440 = uint(findLSB(_3436)) + (_3291 << 5u);
                        uint _3437 = (_3436 + 4294967295u) & _3436;
                        uint _3442 = _3440 * 48u;
                        vec4 _3456 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3442)).x, texelFetch(g_PointLightRenderingBuffer, int(_3442 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3442 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3442 + 3u)).x));
                        uint _3462 = (_3440 * 48u) + 4u;
                        vec4 _3475 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3462)).x, texelFetch(g_PointLightRenderingBuffer, int(_3462 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3462 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3462 + 3u)).x));
                        uint _3481 = (_3440 * 48u) + 8u;
                        vec3 _3492 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3481)).x, texelFetch(g_PointLightRenderingBuffer, int(_3481 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3481 + 2u)).x));
                        float _3496 = _3456.x - _2130;
                        float _3497 = _3456.y - _2131;
                        float _3498 = _3456.z - _2132;
                        float _3499 = dot(vec3(_3496, _3497, _3498), vec3(_3496, _3497, _3498));
                        float _3502 = inversesqrt(_3499);
                        float _3503 = _3502 * _3496;
                        float _3504 = _3502 * _3497;
                        float _3505 = _3502 * _3498;
                        float _3506 = dot(vec3(_986, _989, _992), vec3(_3503, _3504, _3505));
                        float _3511 = 1.0 - (_3499 * _3456.w);
                        float _4962 = isnan(0.0) ? _3511 : (isnan(_3511) ? 0.0 : max(_3511, 0.0));
                        float _3512 = isnan(1.0) ? _4962 : (isnan(_4962) ? 1.0 : min(_4962, 1.0));
                        float _3513 = sqrt(_3499) * _3475.w;
                        float _3516 = 1.39999997615814208984375 / (_3513 + 1.39999997615814208984375);
                        float _3517 = _3516 * _3516;
                        float _3520 = ((1.0 - _3517) * _3506) + _3517;
                        float _3523 = _3513 * _3513;
                        float _3527 = ((isnan(0.0) ? _3520 : (isnan(_3520) ? 0.0 : max(_3520, 0.0))) * _3512) / ((_3523 * 0.699999988079071044921875) + 1.0);
                        float _3531 = (-0.0) - _2130;
                        float _3532 = (-0.0) - _2131;
                        float _3533 = (-0.0) - _2132;
                        float _3537 = inversesqrt(dot(vec3(_3531, _3532, _3533), vec3(_3531, _3532, _3533)));
                        float _3538 = _3537 * _3531;
                        float _3539 = _3537 * _3532;
                        float _3540 = _3537 * _3533;
                        float _3547 = exp2(log2(1.0 / ((_3523 * 3.5) + 5.0)) * 0.25);
                        float _3548 = 1.0 - _1046;
                        float _3555 = sqrt(1.0 - ((1.0 - (_3548 * _3548)) * (1.0 - (_3547 * _3547))));
                        float _3556 = _3555 * _3555;
                        float _3557 = _3556 * _3556;
                        float _3558 = _3538 + _3503;
                        float _3559 = _3539 + _3504;
                        float _3560 = _3540 + _3505;
                        float _3564 = inversesqrt(dot(vec3(_3558, _3559, _3560), vec3(_3558, _3559, _3560)));
                        float _3568 = dot(vec3(_986, _989, _992), vec3(_3538, _3539, _3540));
                        float _4978 = isnan(0.0) ? _3568 : (isnan(_3568) ? 0.0 : max(_3568, 0.0));
                        float _3571 = isnan(1.0) ? _4978 : (isnan(_4978) ? 1.0 : min(_4978, 1.0));
                        float _3572 = dot(vec3(_986, _989, _992), vec3(_3564 * _3558, _3564 * _3559, _3564 * _3560));
                        float _4989 = isnan(0.0) ? _3572 : (isnan(_3572) ? 0.0 : max(_3572, 0.0));
                        float _3575 = isnan(1.0) ? _4989 : (isnan(_4989) ? 1.0 : min(_4989, 1.0));
                        float _3579 = ((_3575 * _3575) * (_3557 + (-1.0))) + 1.0;
                        float _3580 = _3516 * _3556;
                        float _3581 = _3580 * _3580;
                        float _3584 = ((1.0 - _3581) * _3506) + _3581;
                        float _5000 = isnan(0.0) ? _3584 : (isnan(_3584) ? 0.0 : max(_3584, 0.0));
                        float _3585 = isnan(1.0) ? _5000 : (isnan(_5000) ? 1.0 : min(_5000, 1.0));
                        float _3586 = 1.0 - _3556;
                        float _3596 = (0.5 / (((_3585 * ((_3571 * _3586) + _3556)) + 9.9999999392252902907785028219223e-09) + (((_3585 * _3586) + _3556) * _3571))) * _3585;
                        float _5011 = isnan(0.0) ? _3596 : (isnan(_3596) ? 0.0 : max(_3596, 0.0));
                        float _3607 = (((_3557 * 3.1415927410125732421875) * (isnan(1.0) ? _5011 : (isnan(_5011) ? 1.0 : min(_5011, 1.0)))) / ((_3579 * _3579) * ((_3523 * 2.1991131305694580078125) + 3.141590118408203125))) * _3512;
                        _3360 = (_3527 * _3475.x) + _3433;
                        _3361 = (_3527 * _3475.y) + _3434;
                        _3362 = (_3527 * _3475.z) + _3435;
                        _3357 = (_3607 * _3492.x) + _3430;
                        _3358 = (_3607 * _3492.y) + _3431;
                        _3359 = (_3607 * _3492.z) + _3432;
                        if (_3437 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3430 = _3357;
                            _3431 = _3358;
                            _3432 = _3359;
                            _3433 = _3360;
                            _3434 = _3361;
                            _3435 = _3362;
                            _3436 = _3437;
                        }
                    }
                    frontier_phi_71_pred = _3362;
                    frontier_phi_71_pred_1 = _3361;
                    frontier_phi_71_pred_2 = _3360;
                    frontier_phi_71_pred_3 = _3359;
                    frontier_phi_71_pred_4 = _3358;
                    frontier_phi_71_pred_5 = _3357;
                }
                _3143 = frontier_phi_71_pred;
                _3141 = frontier_phi_71_pred_1;
                _3139 = frontier_phi_71_pred_2;
                _3137 = frontier_phi_71_pred_3;
                _3135 = frontier_phi_71_pred_4;
                _3133 = frontier_phi_71_pred_5;
                uint _3292 = _3291 + 1u;
                if (_3292 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3285 = _3133;
                    _3286 = _3135;
                    _3287 = _3137;
                    _3288 = _3139;
                    _3289 = _3141;
                    _3290 = _3143;
                    _3291 = _3292;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3132 = _3133;
            _3134 = _3135;
            _3136 = _3137;
            _3138 = _3139;
            _3140 = _3141;
            _3142 = _3143;
        }
        uvec4 _3146 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3147 = _3146.z;
        uint _3149 = (_3147 >> 8u) & 15u;
        float _3253;
        float _3255;
        float _3257;
        float _3259;
        float _3261;
        float _3263;
        if (((4294967295u << _3149) & _3052) == 0u)
        {
            _3253 = _3132;
            _3255 = _3134;
            _3257 = _3136;
            _3259 = _3138;
            _3261 = _3140;
            _3263 = _3142;
        }
        else
        {
            float _3278 = inversesqrt(dot(vec3(_2130, _2131, _2132), vec3(_2130, _2131, _2132)));
            float _3279 = _3278 * _2130;
            float _3280 = _3278 * _2131;
            float _3281 = _3278 * _2132;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_3149 < ((_3147 >> 12u) & 15u))
            {
                float _3254;
                float _3256;
                float _3258;
                float _3260;
                float _3262;
                float _3264;
                float _3413 = _3132;
                float _3414 = _3134;
                float _3415 = _3136;
                float _3416 = _3138;
                float _3417 = _3140;
                float _3418 = _3142;
                uint _3419 = _3149;
                uint _3428;
                bool _3429;
                for (;;)
                {
                    _3428 = texelFetch(g_lightClassification, int((((_3046 << 5u) + (_3032 << 9u)) + (_3419 << 2u)) >> 2u)).x;
                    _3429 = _3428 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    float frontier_phi_82_pred_3;
                    float frontier_phi_82_pred_4;
                    float frontier_phi_82_pred_5;
                    if (_3429)
                    {
                        frontier_phi_82_pred = _3418;
                        frontier_phi_82_pred_1 = _3417;
                        frontier_phi_82_pred_2 = _3416;
                        frontier_phi_82_pred_3 = _3415;
                        frontier_phi_82_pred_4 = _3414;
                        frontier_phi_82_pred_5 = _3413;
                    }
                    else
                    {
                        float _3621;
                        float _3622;
                        float _3623;
                        float _3624;
                        float _3625;
                        float _3626;
                        float _3914;
                        float _3915;
                        float _3916;
                        float _3917;
                        float _3918;
                        float _3919;
                        float _3634 = _3413;
                        float _3635 = _3414;
                        float _3636 = _3415;
                        float _3637 = _3416;
                        float _3638 = _3417;
                        float _3639 = _3418;
                        uint _3640 = _3428;
                        uint _3641;
                        vec4 _3666;
                        float _3667;
                        vec4 _3682;
                        vec3 _3694;
                        vec4 _3709;
                        vec4 _3724;
                        float _3770;
                        bool _3771;
                        for (;;)
                        {
                            uint _3651 = ((_3419 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3640));
                            _3641 = (_3640 + 4294967295u) & _3640;
                            uint _3653 = _3651 * 40u;
                            _3666 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3653)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3653 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3653 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3653 + 3u)).x));
                            _3667 = _3666.w;
                            uint _3669 = (_3651 * 40u) + 4u;
                            _3682 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3669)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3669 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3669 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3669 + 3u)).x));
                            uint _3684 = (_3651 * 40u) + 8u;
                            _3694 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3684)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3684 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3684 + 2u)).x));
                            uint _3696 = (_3651 * 40u) + 16u;
                            _3709 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3696)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3696 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3696 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3696 + 3u)).x));
                            uint _3711 = (_3651 * 40u) + 20u;
                            _3724 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3711)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3711 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3711 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3711 + 3u)).x));
                            uint _3726 = (_3651 * 40u) + 24u;
                            vec4 _3739 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3726)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3726 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3726 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3726 + 3u)).x));
                            uint _3745 = (_3651 * 40u) + 28u;
                            vec4 _3758 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3745)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3745 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3745 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3745 + 3u)).x));
                            _3770 = fma(_2132, _3758.z, fma(_2131, _3758.y, _3758.x * _2130)) + _3758.w;
                            _3771 = !((fma(_2132, _3739.z, fma(_2131, _3739.y, _3739.x * _2130)) + _3739.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_3771)
                            {
                                float _3798 = _3666.x - _2130;
                                float _3799 = _3666.y - _2131;
                                float _3800 = _3666.z - _2132;
                                float _3801 = dot(vec3(_3798, _3799, _3800), vec3(_3798, _3799, _3800));
                                float _3804 = inversesqrt(_3801);
                                float _3805 = _3804 * _3798;
                                float _3806 = _3804 * _3799;
                                float _3807 = _3804 * _3800;
                                float _3811 = 1.0 - (_3801 / (_3667 * _3667));
                                float _5022 = isnan(0.0) ? _3811 : (isnan(_3811) ? 0.0 : max(_3811, 0.0));
                                float _3812 = isnan(1.0) ? _5022 : (isnan(_5022) ? 1.0 : min(_5022, 1.0));
                                float _3816 = sqrt(_3801) * _3682.w;
                                float _3818 = 1.39999997615814208984375 / (_3816 + 1.39999997615814208984375);
                                float _3819 = _3818 * _3818;
                                float _3822 = ((1.0 - _3819) * dot(vec3(_3805, _3806, _3807), vec3(_986, _989, _992))) + _3819;
                                float _3825 = _3816 * _3816;
                                float _3829 = (fma(_2132, _3709.z, fma(_2131, _3709.y, _3709.x * _2130)) + _3709.w) / _3770;
                                float _3830 = (fma(_2132, _3724.z, fma(_2131, _3724.y, _3724.x * _2130)) + _3724.w) / _3770;
                                float _3834 = 1.0 - dot(vec2(_3829, _3830), vec2(_3829, _3830));
                                float _5038 = isnan(0.0) ? _3834 : (isnan(_3834) ? 0.0 : max(_3834, 0.0));
                                float _3835 = isnan(1.0) ? _5038 : (isnan(_5038) ? 1.0 : min(_5038, 1.0));
                                float _3836 = _3835 * (((isnan(0.0) ? _3822 : (isnan(_3822) ? 0.0 : max(_3822, 0.0))) * _3812) / ((_3825 * 0.699999988079071044921875) + 1.0));
                                float _3848 = exp2(log2(1.0 / ((_3825 * 3.5) + 5.0)) * 0.25);
                                float _3849 = 1.0 - _1046;
                                float _3856 = sqrt(1.0 - ((1.0 - (_3849 * _3849)) * (1.0 - (_3848 * _3848))));
                                float _3857 = _3856 * _3856;
                                float _3858 = _3857 * _3857;
                                float _3859 = _3805 - _3279;
                                float _3860 = _3806 - _3280;
                                float _3861 = _3807 - _3281;
                                float _3865 = inversesqrt(dot(vec3(_3859, _3860, _3861), vec3(_3859, _3860, _3861)));
                                float _3869 = dot(vec3(_986, _989, _992), vec3((-0.0) - _3279, (-0.0) - _3280, (-0.0) - _3281));
                                float _5049 = isnan(0.0) ? _3869 : (isnan(_3869) ? 0.0 : max(_3869, 0.0));
                                float _3872 = isnan(1.0) ? _5049 : (isnan(_5049) ? 1.0 : min(_5049, 1.0));
                                float _3873 = dot(vec3(_986, _989, _992), vec3(_3865 * _3859, _3865 * _3860, _3865 * _3861));
                                float _5060 = isnan(0.0) ? _3873 : (isnan(_3873) ? 0.0 : max(_3873, 0.0));
                                float _3876 = isnan(1.0) ? _5060 : (isnan(_5060) ? 1.0 : min(_5060, 1.0));
                                float _3880 = ((_3876 * _3876) * (_3858 + (-1.0))) + 1.0;
                                float _3881 = _3818 * _3857;
                                float _3882 = _3881 * _3881;
                                float _3888 = ((1.0 - _3882) * dot(vec3(_986, _989, _992), vec3(_3805, _3806, _3807))) + _3882;
                                float _5071 = isnan(0.0) ? _3888 : (isnan(_3888) ? 0.0 : max(_3888, 0.0));
                                float _3889 = isnan(1.0) ? _5071 : (isnan(_5071) ? 1.0 : min(_5071, 1.0));
                                float _3890 = 1.0 - _3857;
                                float _3900 = (0.5 / (((_3889 * ((_3872 * _3890) + _3857)) + 9.9999999392252902907785028219223e-09) + (((_3889 * _3890) + _3857) * _3872))) * _3889;
                                float _5082 = isnan(0.0) ? _3900 : (isnan(_3900) ? 0.0 : max(_3900, 0.0));
                                float _3910 = (_3835 * _3812) * (((_3858 * 3.1415927410125732421875) * (isnan(1.0) ? _5082 : (isnan(_5082) ? 1.0 : min(_5082, 1.0)))) / ((_3880 * _3880) * ((_3825 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_88_pred = _3836 * _3682.z;
                                frontier_phi_88_pred_1 = _3836 * _3682.y;
                                frontier_phi_88_pred_2 = _3836 * _3682.x;
                                frontier_phi_88_pred_3 = _3910 * _3694.z;
                                frontier_phi_88_pred_4 = _3910 * _3694.y;
                                frontier_phi_88_pred_5 = _3910 * _3694.x;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _3919 = frontier_phi_88_pred;
                            _3918 = frontier_phi_88_pred_1;
                            _3917 = frontier_phi_88_pred_2;
                            _3916 = frontier_phi_88_pred_3;
                            _3915 = frontier_phi_88_pred_4;
                            _3914 = frontier_phi_88_pred_5;
                            _3624 = _3917 + _3637;
                            _3625 = _3918 + _3638;
                            _3626 = _3919 + _3639;
                            _3621 = _3914 + _3634;
                            _3622 = _3915 + _3635;
                            _3623 = _3916 + _3636;
                            if (_3641 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3634 = _3621;
                                _3635 = _3622;
                                _3636 = _3623;
                                _3637 = _3624;
                                _3638 = _3625;
                                _3639 = _3626;
                                _3640 = _3641;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _3626;
                        frontier_phi_82_pred_1 = _3625;
                        frontier_phi_82_pred_2 = _3624;
                        frontier_phi_82_pred_3 = _3623;
                        frontier_phi_82_pred_4 = _3622;
                        frontier_phi_82_pred_5 = _3621;
                    }
                    _3264 = frontier_phi_82_pred;
                    _3262 = frontier_phi_82_pred_1;
                    _3260 = frontier_phi_82_pred_2;
                    _3258 = frontier_phi_82_pred_3;
                    _3256 = frontier_phi_82_pred_4;
                    _3254 = frontier_phi_82_pred_5;
                    uint _3420 = _3419 + 1u;
                    if (_3420 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3413 = _3254;
                        _3414 = _3256;
                        _3415 = _3258;
                        _3416 = _3260;
                        _3417 = _3262;
                        _3418 = _3264;
                        _3419 = _3420;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _3260;
                frontier_phi_63_64_ladder_1 = _3264;
                frontier_phi_63_64_ladder_2 = _3262;
                frontier_phi_63_64_ladder_3 = _3258;
                frontier_phi_63_64_ladder_4 = _3256;
                frontier_phi_63_64_ladder_5 = _3254;
            }
            else
            {
                frontier_phi_63_64_ladder = _3138;
                frontier_phi_63_64_ladder_1 = _3142;
                frontier_phi_63_64_ladder_2 = _3140;
                frontier_phi_63_64_ladder_3 = _3136;
                frontier_phi_63_64_ladder_4 = _3134;
                frontier_phi_63_64_ladder_5 = _3132;
            }
            _3253 = frontier_phi_63_64_ladder_5;
            _3255 = frontier_phi_63_64_ladder_4;
            _3257 = frontier_phi_63_64_ladder_3;
            _3259 = frontier_phi_63_64_ladder;
            _3261 = frontier_phi_63_64_ladder_2;
            _3263 = frontier_phi_63_64_ladder_1;
        }
        float _3268 = isnan(1.0) ? _1030 : (isnan(_1030) ? 1.0 : min(_1030, 1.0));
        _3065 = (_3268 * _3259) + _2596;
        _3067 = (_3268 * _3261) + _2598;
        _3069 = (_3268 * _3263) + _2600;
        _3071 = ((_3253 * 0.039999999105930328369140625) * _3268) + _2919;
        _3073 = ((_3255 * 0.039999999105930328369140625) * _3268) + _2921;
        _3075 = ((_3257 * 0.039999999105930328369140625) * _3268) + _2923;
    }
    else
    {
        _3065 = _2596;
        _3067 = _2598;
        _3069 = _2600;
        _3071 = _2919;
        _3073 = _2921;
        _3075 = _2923;
    }
    float _5098 = isnan(0.0) ? _1015 : (isnan(_1015) ? 0.0 : max(_1015, 0.0));
    float _5109 = isnan(0.0) ? _1016 : (isnan(_1016) ? 0.0 : max(_1016, 0.0));
    float _5120 = isnan(0.0) ? _1017 : (isnan(_1017) ? 0.0 : max(_1017, 0.0));
    float _3092 = ((isnan(1.0) ? _5098 : (isnan(_5098) ? 1.0 : min(_5098, 1.0))) * (_3065 + ((isnan(0.0) ? _1787 : (isnan(_1787) ? 0.0 : max(_1787, 0.0))) * _1030))) + ((_3071 + ((isnan(0.0) ? _2077 : (isnan(_2077) ? 0.0 : max(_2077, 0.0))) * _1866)) * cbPerFrame._m0[3u].x);
    float _3093 = ((isnan(1.0) ? _5109 : (isnan(_5109) ? 1.0 : min(_5109, 1.0))) * (_3067 + ((isnan(0.0) ? _1790 : (isnan(_1790) ? 0.0 : max(_1790, 0.0))) * _1030))) + ((_3073 + ((isnan(0.0) ? _2080 : (isnan(_2080) ? 0.0 : max(_2080, 0.0))) * _1866)) * cbPerFrame._m0[3u].x);
    float _3094 = ((isnan(1.0) ? _5120 : (isnan(_5120) ? 1.0 : min(_5120, 1.0))) * (_3069 + ((isnan(0.0) ? _1793 : (isnan(_1793) ? 0.0 : max(_1793, 0.0))) * _1030))) + ((_3075 + ((isnan(0.0) ? _2083 : (isnan(_2083) ? 0.0 : max(_2083, 0.0))) * _1866)) * cbPerFrame._m0[3u].x);
    uint _3095 = _278 + 6u;
    float _3103 = _967 / cbSceneParam._m0[86u].x;
    float _3104 = _968 / cbSceneParam._m0[86u].y;
    vec4 _3118 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3103, _3104, (log2((isnan(cbSceneParam._m0[77u].w) ? _889 : (isnan(_889) ? cbSceneParam._m0[77u].w : min(_889, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3120 = _3118.x;
    float _3121 = _3118.y;
    float _3122 = _3118.z;
    float _3123 = _3118.w;
    float _3195;
    float _3197;
    float _3199;
    float _3201;
    if (_889 > cbSceneParam._m0[78u].w)
    {
        float _3157 = isnan(_889) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _889 : min(cbSceneParam._m0[80u].w, _889));
        float _3158 = _3157 / _889;
        float _3169 = _3158 * _940;
        float _3170 = _941 * _3158;
        float _3171 = (-0.0) - _3170;
        float _3173 = _3158 * _942;
        float _3175 = (cbSceneParam._m0[77u].w * _3171) / _3157;
        float _3176 = _3175 + cbSceneParam._m0[79u].w;
        float _3177 = cbSceneParam._m0[79u].w - _3170;
        float _3183 = sqrt(((_3169 * _3169) + (_3170 * _3170)) + (_3173 * _3173));
        float _3186 = (1.0 - (cbSceneParam._m0[77u].w / _3157)) * _3183;
        float _3191 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3193 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3370;
        if (abs((_3171 - _3175) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3370 = ((((_3176 > 0.0) ? exp2(_3191 * _3176) : (2.0 - exp2(_3193 * _3176))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3186;
        }
        else
        {
            float _3314 = 1.0 / cbSceneParam._m0[80u].x;
            float _3315 = isnan(_3177) ? _3176 : (isnan(_3176) ? _3177 : max(_3176, _3177));
            float _3316 = isnan(_3177) ? _3176 : (isnan(_3176) ? _3177 : min(_3176, _3177));
            float _3325 = isnan(0.0) ? _3315 : (isnan(_3315) ? 0.0 : min(_3315, 0.0));
            float _3326 = isnan(0.0) ? _3316 : (isnan(_3316) ? 0.0 : min(_3316, 0.0));
            _3370 = ((abs(_3183 / _3171) * cbSceneParam._m0[80u].y) * ((((_3325 - _3326) * 2.0) - ((exp2(_3191 * (isnan(0.0) ? _3315 : (isnan(_3315) ? 0.0 : max(_3315, 0.0)))) - exp2(_3191 * (isnan(0.0) ? _3316 : (isnan(_3316) ? 0.0 : max(_3316, 0.0))))) * _3314)) - ((exp2(_3193 * _3325) - exp2(_3193 * _3326)) * _3314))) + (_3186 * cbSceneParam._m0[80u].z);
        }
        vec4 _3372 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3103, _3104, 1.0), 0.0);
        float _3381 = exp2((_3370 * (-1.44269502162933349609375)) * (1.0 - _3372.w));
        float _3382 = log2(_3381);
        float _3398 = log2(_3123);
        _3195 = (exp2(_3398 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3382 * cbSceneParam._m0[78u].x)) * _3372.x) / cbSceneParam._m0[78u].x)) + _3120;
        _3197 = (exp2(_3398 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3382 * cbSceneParam._m0[78u].y)) * _3372.y) / cbSceneParam._m0[78u].y)) + _3121;
        _3199 = (exp2(_3398 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3382 * cbSceneParam._m0[78u].z)) * _3372.z) / cbSceneParam._m0[78u].z)) + _3122;
        _3201 = _3381 * _3123;
    }
    else
    {
        _3195 = _3120;
        _3197 = _3121;
        _3199 = _3122;
        _3201 = _3123;
    }
    bool _3408;
    vec4 _3211;
    vec4 _3233;
    float _3235;
    float _3239;
    float _3240;
    float _3241;
    float _3242;
    bool _3252;
    for (;;)
    {
        _3211 = cbMatDynParam._m0[0u];
        float _3213 = roundEven(_3211.y);
        bool _3214 = _3213 == 3.0;
        float _3215 = log2(_3201);
        float _3222 = exp2(_3215 * cbSceneParam._m0[78u].x) * _3092;
        float _3223 = exp2(_3215 * cbSceneParam._m0[78u].y) * _3093;
        float _3224 = exp2(_3215 * cbSceneParam._m0[78u].z) * _3094;
        float _3231 = _956 + (-0.5);
        _3233 = cbMtdParam._m0[1u];
        _3235 = _3233.y * _3231;
        float _3238 = (_3213 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3239 = _3238 * (_3214 ? _3222 : (_3222 + (cbSceneParam._m0[72u].w * _3195)));
        _3240 = _3238 * (_3214 ? _3223 : (_3223 + (cbSceneParam._m0[72u].w * _3197)));
        _3241 = _3238 * (_3214 ? _3224 : (_3224 + (cbSceneParam._m0[72u].w * _3199)));
        _3242 = _3231 * 0.999000012874603271484375;
        _3252 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3252)
        {
            if ((cbInstanceData._m0[_278 + 7u].x + _3242) < 0.5)
            {
                _3408 = true;
                break;
            }
        }
        uint _3349 = _1005 + uint(_3211.w);
        if ((cbInstanceData._m0[_3349].w < 1.0) && ((cbInstanceData._m0[_3349].w + _3242) < 0.5))
        {
            _3408 = true;
            break;
        }
        if ((_3235 + 1.0) < _3233.x)
        {
            _3408 = true;
            break;
        }
        _3408 = false;
        break;
    }
    float _3612;
    if (_3408)
    {
        discard_state = true;
        _3612 = 0.0;
    }
    else
    {
        _3612 = cbInstanceData._m0[_3095].w;
    }
    SV_Target.x = _3239;
    SV_Target.y = _3240;
    SV_Target.z = _3241;
    SV_Target.w = _3612;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_3095].w;
    discard_exit();
}


