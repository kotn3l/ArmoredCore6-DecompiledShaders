#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 13) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_22;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 20) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_6;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1267;
float _3627;
float _3628;
float _3629;
float _3630;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _215 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _216 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _217 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _223 = inversesqrt(dot(vec3(_215, _216, _217), vec3(_215, _216, _217)));
    float _224 = _223 * _215;
    float _225 = _223 * _216;
    float _226 = _223 * _217;
    float _230 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _231 = _230 * NORMAL.x;
    float _232 = _230 * NORMAL.y;
    float _233 = _230 * NORMAL.z;
    float _237 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _238 = _237 * TANGENT.x;
    float _239 = _237 * TANGENT.y;
    float _240 = _237 * TANGENT.z;
    float _251 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _253 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _254 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3639 = isnan(0.0) ? _251 : (isnan(_251) ? 0.0 : max(_251, 0.0));
    float _3650 = isnan(0.0) ? _253 : (isnan(_253) ? 0.0 : max(_253, 0.0));
    float _3661 = isnan(0.0) ? _254 : (isnan(_254) ? 0.0 : max(_254, 0.0));
    uint _264 = uint(roundEven(NORMAL.w)) * 13u;
    uint _269 = _264 + 1u;
    uint _273 = _264 + 2u;
    float _282 = sqrt(((cbInstanceData._m0[_269].x * cbInstanceData._m0[_269].x) + (cbInstanceData._m0[_264].x * cbInstanceData._m0[_264].x)) + (cbInstanceData._m0[_273].x * cbInstanceData._m0[_273].x));
    float _283 = _282 * TEXCOORD.z;
    float _284 = _282 * TEXCOORD.w;
    vec4 _297 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _283) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _284) + cbTextureTilingScale._m0[13u].w));
    vec4 _321 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _326 = _321.x * cbMtdParam._m0[11u].x;
    float _327 = _321.y * cbMtdParam._m0[11u].y;
    float _328 = _321.z * cbMtdParam._m0[11u].z;
    vec4 _347 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _283) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _284) + cbTextureTilingScale._m0[5u].w));
    vec4 _398 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _400 = _398.x;
    float _412 = dot(vec4(_400, _398.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _429 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w)).x) * 2.0) - ((((_400 - _412) * cbMtdParam._m0[24u].z) + _412) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3672 = isnan(0.0) ? _429 : (isnan(_429) ? 0.0 : max(_429, 0.0));
    float _430 = isnan(1.0) ? _3672 : (isnan(_3672) ? 1.0 : min(_3672, 1.0));
    float _437 = (_430 * ((_347.x * cbMtdParam._m0[12u].x) - _326)) + _326;
    float _438 = (_430 * ((_347.y * cbMtdParam._m0[12u].y) - _327)) + _327;
    float _439 = (_430 * ((_347.z * cbMtdParam._m0[12u].z) - _328)) + _328;
    float _443 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _297.x) * _437;
    float _446 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _297.y) * _438;
    float _449 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _297.z) * _439;
    float _456 = ((_437 - _443) * (isnan(1.0) ? _3639 : (isnan(_3639) ? 1.0 : min(_3639, 1.0)))) + _443;
    float _457 = ((_438 - _446) * (isnan(1.0) ? _3650 : (isnan(_3650) ? 1.0 : min(_3650, 1.0)))) + _446;
    float _458 = ((_439 - _449) * (isnan(1.0) ? _3661 : (isnan(_3661) ? 1.0 : min(_3661, 1.0)))) + _449;
    vec4 _476 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _283) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _284) + cbTextureTilingScale._m0[20u].w));
    vec4 _503 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _283) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _284) + cbTextureTilingScale._m0[4u].w));
    vec4 _520 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _522 = _520.x;
    float _523 = _520.y;
    float _524 = _520.z;
    float _533 = ((_503.z - _524) * _430) + _524;
    float _536 = ((((_503.x - _522) * _430) + _522) * 2.0) + (-1.0);
    float _537 = ((((_503.y - _523) * _430) + _523) * 2.0) + (-1.0);
    float _538 = dot(vec2(_536, _537), vec2(_536, _537));
    float _3683 = isnan(0.0) ? _538 : (isnan(_538) ? 0.0 : max(_538, 0.0));
    float _543 = sqrt(1.0 - (isnan(1.0) ? _3683 : (isnan(_3683) ? 1.0 : min(_3683, 1.0))));
    vec4 _563 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _575 = (_536 + ((((_476.x * 2.0) + (-1.0)) * TEXCOORD_11.x) * cbMtdParam._m0[20u].x)) + (((_563.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _576 = (_537 + ((((_476.y * 2.0) + (-1.0)) * TEXCOORD_11.y) * cbMtdParam._m0[20u].x)) + (((_563.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _579 = fma(_543, _231, fma(_576, _238, _575 * _224));
    float _582 = fma(_543, _232, fma(_576, _239, _575 * _225));
    float _585 = fma(_543, _233, fma(_576, _240, _575 * _226));
    float _589 = inversesqrt(dot(vec3(_579, _582, _585), vec3(_579, _582, _585)));
    vec4 _616 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _283) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _284) + cbTextureTilingScale._m0[11u].w));
    float _618 = _616.x;
    float _619 = 1.0 - _618;
    float _625 = (cbMtdParam._m0[19u].x + dot(vec4(_589 * _579, _589 * _582, _589 * _585, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_618 - _619) * cbMtdParam._m0[24u].w) + _619) * cbMtdParam._m0[21u].z);
    float _3694 = isnan(0.0) ? _625 : (isnan(_625) ? 0.0 : max(_625, 0.0));
    float _626 = isnan(1.0) ? _3694 : (isnan(_3694) ? 1.0 : min(_3694, 1.0));
    float _633 = (_626 * (cbMtdParam._m0[17u].x - _456)) + _456;
    float _634 = (_626 * (cbMtdParam._m0[17u].y - _457)) + _457;
    float _635 = (_626 * (cbMtdParam._m0[17u].z - _458)) + _458;
    float _640 = (((_476.z - _533) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _533;
    float _644 = ((_563.z - _640) * cbMtdParam._m0[19u].w) + _640;
    vec4 _657 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _283) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _284) + cbTextureTilingScale._m0[15u].w));
    float _664 = (_657.x * 2.0) + (-1.0);
    float _665 = (_657.y * 2.0) + (-1.0);
    float _666 = dot(vec2(_664, _665), vec2(_664, _665));
    float _3705 = isnan(0.0) ? _666 : (isnan(_666) ? 0.0 : max(_666, 0.0));
    float _674 = ((_657.z - _644) * _626) + _644;
    float _684 = ((sqrt(1.0 - (isnan(1.0) ? _3705 : (isnan(_3705) ? 1.0 : min(_3705, 1.0)))) - _543) * _626) + _543;
    float _687 = (((_664 - _575) * _626) + _575) + (cbMtdParam._m0[21u].x * _575);
    float _688 = (((_665 - _576) * _626) + _576) + (cbMtdParam._m0[21u].x * _576);
    float _690 = cbMtdParam._m0[22u].x + _563.w;
    float _693 = fma(_684, _231, fma(_688, _238, _687 * _224));
    float _696 = fma(_684, _232, fma(_688, _239, _687 * _225));
    float _699 = fma(_684, _233, fma(_688, _240, _687 * _226));
    float _703 = inversesqrt(dot(vec3(_693, _696, _699), vec3(_693, _696, _699)));
    float _704 = _703 * _693;
    float _705 = _703 * _696;
    float _706 = _703 * _699;
    float _3716 = isnan(0.0) ? _674 : (isnan(_674) ? 0.0 : max(_674, 0.0));
    float _707 = isnan(1.0) ? _3716 : (isnan(_3716) ? 1.0 : min(_3716, 1.0));
    float _3727 = isnan(0.0) ? _690 : (isnan(_690) ? 0.0 : max(_690, 0.0));
    float _3738 = isnan(0.0) ? _633 : (isnan(_633) ? 0.0 : max(_633, 0.0));
    float _3749 = isnan(0.0) ? _634 : (isnan(_634) ? 0.0 : max(_634, 0.0));
    float _3760 = isnan(0.0) ? _635 : (isnan(_635) ? 0.0 : max(_635, 0.0));
    float _725 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _767 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _777 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _767);
    float _778 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _767);
    float _779 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _767);
    float _783 = inversesqrt(dot(vec3(_777, _778, _779), vec3(_777, _778, _779)));
    float _784 = _777 * _783;
    float _785 = _778 * _783;
    float _786 = _779 * _783;
    vec4 _791 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _793 = _791.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _947 = sqrt(((_777 * _777) + (_778 * _778)) + (_779 * _779));
        float _953 = (cbMatDynParam._m0[5u].x * _947) + cbMatDynParam._m0[5u].y;
        float _3771 = isnan(0.0) ? _953 : (isnan(_953) ? 0.0 : max(_953, 0.0));
        float _954 = isnan(1.0) ? _3771 : (isnan(_3771) ? 1.0 : min(_3771, 1.0));
        float _958 = (cbMatDynParam._m0[5u].z * _947) + cbMatDynParam._m0[5u].w;
        float _3782 = isnan(0.0) ? _958 : (isnan(_958) ? 0.0 : max(_958, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3782 : (isnan(_3782) ? 1.0 : min(_3782, 1.0))) - _954)) + _954) < ((_793 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _804 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _805 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _823 = fma(_706, cbSceneParam._m0[5u].z, fma(_705, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _704));
    float _826 = fma(_706, cbSceneParam._m0[6u].z, fma(_705, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _704));
    float _829 = fma(_706, cbSceneParam._m0[7u].z, fma(_705, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _704));
    uint _842 = _264 + 9u;
    uint _843 = _842 + uint(cbMatDynParam._m0[0u].w);
    float _849 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3738 : (isnan(_3738) ? 1.0 : min(_3738, 1.0)))) * cbInstanceData._m0[_843].x;
    float _850 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3749 : (isnan(_3749) ? 1.0 : min(_3749, 1.0)))) * cbInstanceData._m0[_843].y;
    float _851 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3760 : (isnan(_3760) ? 1.0 : min(_3760, 1.0)))) * cbInstanceData._m0[_843].z;
    float _3793 = isnan(0.0) ? _849 : (isnan(_849) ? 0.0 : max(_849, 0.0));
    float _852 = isnan(1.0) ? _3793 : (isnan(_3793) ? 1.0 : min(_3793, 1.0));
    float _3804 = isnan(0.0) ? _850 : (isnan(_850) ? 0.0 : max(_850, 0.0));
    float _853 = isnan(1.0) ? _3804 : (isnan(_3804) ? 1.0 : min(_3804, 1.0));
    float _3815 = isnan(0.0) ? _851 : (isnan(_851) ? 0.0 : max(_851, 0.0));
    float _854 = isnan(1.0) ? _3815 : (isnan(_3815) ? 1.0 : min(_3815, 1.0));
    vec4 _863 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _804, cbSceneParam._m0[86u].y * _805));
    float _867 = ((isnan(1.0) ? _3727 : (isnan(_3727) ? 1.0 : min(_3727, 1.0))) * TEXCOORD_5.w) * _863.x;
    float _868 = dot(vec3(_704, _705, _706), vec3(_784, _785, _786));
    float _871 = _868 * 2.0;
    float _875 = (_871 * _704) - _784;
    float _876 = (_871 * _705) - _785;
    float _877 = (_871 * _706) - _786;
    float _881 = abs(dot(vec3(_784, _785, _786), vec3(_704, _705, _706)));
    float _3826 = isnan(0.0) ? _881 : (isnan(_881) ? 0.0 : max(_881, 0.0));
    float _883 = sqrt(_707);
    float _896 = exp2((_883 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3826 : (isnan(_3826) ? 1.0 : min(_3826, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_883 * 3.0));
    float _928 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _932 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _936 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1266;
    float _1268;
    float _1269;
    float _1270;
    float _1271;
    float _1272;
    float _1273;
    float _1274;
    float _1275;
    float _1276;
    float _1277;
    float _1278;
    float _1279;
    float _1280;
    float _1281;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _991 = fma(_936, cbModelParam._m0[26u].z, fma(_932, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _928));
        float _995 = fma(_936, cbModelParam._m0[27u].z, fma(_932, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _928));
        float _999 = fma(_936, cbModelParam._m0[28u].z, fma(_932, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _928));
        float _1024 = _928 + _704;
        float _1025 = _932 + _705;
        float _1026 = _936 + _706;
        float _1036 = fma(_1026, cbModelParam._m0[26u].z, fma(_1025, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1024)) - _991;
        float _1037 = fma(_1026, cbModelParam._m0[27u].z, fma(_1025, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1024)) - _995;
        float _1038 = fma(_1026, cbModelParam._m0[28u].z, fma(_1025, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1024)) - _999;
        float _1042 = inversesqrt(dot(vec3(_1036, _1037, _1038), vec3(_1036, _1037, _1038)));
        float _1055 = ((_1042 * _1036) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_991 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1056 = ((_1042 * _1037) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_995 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1057 = ((_1042 * _1038) / cbModelParam._m0[34u].z) + ((((((_999 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1060 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1055, _1056, _1057), 0.0);
        vec4 _1067 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1055, _1056, _1057), 0.0);
        vec4 _1074 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1055, _1056, _1057), 0.0);
        vec4 _1081 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1055, _1056, _1057), 0.0);
        float _1094 = exp2((_1060.w + (-0.5)) * 20.0) * 2.0;
        float _1095 = _1094 * (_1060.x + (-0.5));
        float _1096 = _1094 * (_1060.y + (-0.5));
        float _1097 = _1094 * (_1060.z + (-0.5));
        float _1104 = exp2((_1067.w + (-0.5)) * 20.0) * 2.0;
        float _1105 = _1104 * (_1067.x + (-0.5));
        float _1106 = _1104 * (_1067.y + (-0.5));
        float _1107 = _1104 * (_1067.z + (-0.5));
        float _1114 = exp2((_1074.w + (-0.5)) * 20.0) * 2.0;
        float _1115 = _1114 * (_1074.x + (-0.5));
        float _1116 = _1114 * (_1074.y + (-0.5));
        float _1117 = _1114 * (_1074.z + (-0.5));
        float _1124 = exp2((_1081.w + (-0.5)) * 20.0) * 2.0;
        float _1125 = _1124 * (_1081.x + (-0.5));
        float _1126 = _1124 * (_1081.y + (-0.5));
        float _1127 = _1124 * (_1081.z + (-0.5));
        float _1128 = isnan(0.0) ? _1125 : (isnan(_1125) ? 0.0 : max(_1125, 0.0));
        float _1129 = isnan(0.0) ? _1126 : (isnan(_1126) ? 0.0 : max(_1126, 0.0));
        float _1130 = isnan(0.0) ? _1127 : (isnan(_1127) ? 0.0 : max(_1127, 0.0));
        float _1131 = _1095 * 0.5;
        float _1132 = _1105 * 0.5;
        float _1133 = _1115 * 0.5;
        float _1134 = dot(vec3(_1131, _1132, _1133), vec3(_1131, _1132, _1133));
        float _1139 = (_1134 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1134);
        float _1148 = (dot(vec3(_704, _705, _706), vec3(_1139 * _1131, _1139 * _1132, _1139 * _1133)) + 1.0) * 0.5;
        float _3852 = isnan(0.0) ? _1148 : (isnan(_1148) ? 0.0 : max(_1148, 0.0));
        float _1158 = sqrt(((_1132 * _1132) + (_1131 * _1131)) + (_1133 * _1133)) / (_1128 + 9.9999997473787516355514526367188e-06);
        float _3863 = isnan(0.0) ? _1158 : (isnan(_1158) ? 0.0 : max(_1158, 0.0));
        float _1159 = isnan(1.0) ? _3863 : (isnan(_3863) ? 1.0 : min(_3863, 1.0));
        float _1160 = _1159 * 2.0;
        float _1164 = (1.0 - _1159) / (_1159 + 1.0);
        float _3874 = isnan(0.0) ? _1164 : (isnan(_1164) ? 0.0 : max(_1164, 0.0));
        float _1165 = isnan(1.0) ? _3874 : (isnan(_3874) ? 1.0 : min(_3874, 1.0));
        float _1174 = ((((1.0 - _1165) * (_1160 + 2.0)) * exp2(log2(isnan(1.0) ? _3852 : (isnan(_3852) ? 1.0 : min(_3852, 1.0))) * (_1160 + 1.0))) + _1165) * _1128;
        float _1175 = _1096 * 0.5;
        float _1176 = _1106 * 0.5;
        float _1177 = _1116 * 0.5;
        float _1178 = dot(vec3(_1175, _1176, _1177), vec3(_1175, _1176, _1177));
        float _1183 = (_1178 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1178);
        float _1191 = (dot(vec3(_704, _705, _706), vec3(_1183 * _1175, _1183 * _1176, _1183 * _1177)) + 1.0) * 0.5;
        float _3885 = isnan(0.0) ? _1191 : (isnan(_1191) ? 0.0 : max(_1191, 0.0));
        float _1200 = sqrt(((_1176 * _1176) + (_1175 * _1175)) + (_1177 * _1177)) / (_1129 + 9.9999997473787516355514526367188e-06);
        float _3896 = isnan(0.0) ? _1200 : (isnan(_1200) ? 0.0 : max(_1200, 0.0));
        float _1201 = isnan(1.0) ? _3896 : (isnan(_3896) ? 1.0 : min(_3896, 1.0));
        float _1202 = _1201 * 2.0;
        float _1206 = (1.0 - _1201) / (_1201 + 1.0);
        float _3907 = isnan(0.0) ? _1206 : (isnan(_1206) ? 0.0 : max(_1206, 0.0));
        float _1207 = isnan(1.0) ? _3907 : (isnan(_3907) ? 1.0 : min(_3907, 1.0));
        float _1216 = ((((1.0 - _1207) * (_1202 + 2.0)) * exp2(log2(isnan(1.0) ? _3885 : (isnan(_3885) ? 1.0 : min(_3885, 1.0))) * (_1202 + 1.0))) + _1207) * _1129;
        float _1217 = _1097 * 0.5;
        float _1218 = _1107 * 0.5;
        float _1219 = _1117 * 0.5;
        float _1220 = dot(vec3(_1217, _1218, _1219), vec3(_1217, _1218, _1219));
        float _1225 = (_1220 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1220);
        float _1233 = (dot(vec3(_704, _705, _706), vec3(_1225 * _1217, _1225 * _1218, _1225 * _1219)) + 1.0) * 0.5;
        float _3918 = isnan(0.0) ? _1233 : (isnan(_1233) ? 0.0 : max(_1233, 0.0));
        float _1242 = sqrt(((_1218 * _1218) + (_1217 * _1217)) + (_1219 * _1219)) / (_1130 + 9.9999997473787516355514526367188e-06);
        float _3929 = isnan(0.0) ? _1242 : (isnan(_1242) ? 0.0 : max(_1242, 0.0));
        float _1243 = isnan(1.0) ? _3929 : (isnan(_3929) ? 1.0 : min(_3929, 1.0));
        float _1244 = _1243 * 2.0;
        float _1248 = (1.0 - _1243) / (_1243 + 1.0);
        float _3940 = isnan(0.0) ? _1248 : (isnan(_1248) ? 0.0 : max(_1248, 0.0));
        float _1249 = isnan(1.0) ? _3940 : (isnan(_3940) ? 1.0 : min(_3940, 1.0));
        float _1258 = ((((1.0 - _1249) * (_1244 + 2.0)) * exp2(log2(isnan(1.0) ? _3918 : (isnan(_3918) ? 1.0 : min(_3918, 1.0))) * (_1244 + 1.0))) + _1249) * _1130;
        _1266 = _1097;
        _1268 = _1096;
        _1269 = _1095;
        _1270 = _1107;
        _1271 = _1106;
        _1272 = _1105;
        _1273 = _1117;
        _1274 = _1116;
        _1275 = _1115;
        _1276 = _1130;
        _1277 = _1129;
        _1278 = _1128;
        _1279 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1174 : (isnan(_1174) ? 0.0 : max(_1174, 0.0)));
        _1280 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1216 : (isnan(_1216) ? 0.0 : max(_1216, 0.0)));
        _1281 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1258 : (isnan(_1258) ? 0.0 : max(_1258, 0.0)));
    }
    else
    {
        _1266 = _1267;
        _1268 = _1267;
        _1269 = _1267;
        _1270 = _1267;
        _1271 = _1267;
        _1272 = _1267;
        _1273 = _1267;
        _1274 = _1267;
        _1275 = _1267;
        _1276 = _1267;
        _1277 = _1267;
        _1278 = _1267;
        _1279 = 0.0;
        _1280 = 0.0;
        _1281 = 0.0;
    }
    float _1578;
    float _1579;
    float _1580;
    float _1581;
    float _1582;
    float _1583;
    float _1584;
    float _1585;
    float _1586;
    float _1587;
    float _1588;
    float _1589;
    float _1590;
    float _1591;
    float _1592;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1309 = fma(_936, cbModelParam._m0[30u].z, fma(_932, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _928));
        float _1313 = fma(_936, cbModelParam._m0[31u].z, fma(_932, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _928));
        float _1317 = fma(_936, cbModelParam._m0[32u].z, fma(_932, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _928));
        float _1340 = _928 + _704;
        float _1341 = _932 + _705;
        float _1342 = _936 + _706;
        float _1352 = fma(_1342, cbModelParam._m0[30u].z, fma(_1341, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1340)) - _1309;
        float _1353 = fma(_1342, cbModelParam._m0[31u].z, fma(_1341, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1340)) - _1313;
        float _1354 = fma(_1342, cbModelParam._m0[32u].z, fma(_1341, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1340)) - _1317;
        float _1358 = inversesqrt(dot(vec3(_1352, _1353, _1354), vec3(_1352, _1353, _1354)));
        float _1371 = ((_1358 * _1352) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1309 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1372 = ((_1358 * _1353) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1313 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1373 = ((_1358 * _1354) / cbModelParam._m0[35u].z) + ((((((_1317 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1375 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1371, _1372, _1373), 0.0);
        vec4 _1382 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1371, _1372, _1373), 0.0);
        vec4 _1389 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1371, _1372, _1373), 0.0);
        vec4 _1396 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1371, _1372, _1373), 0.0);
        float _1408 = exp2((_1375.w + (-0.5)) * 20.0) * 2.0;
        float _1409 = _1408 * (_1375.x + (-0.5));
        float _1410 = _1408 * (_1375.y + (-0.5));
        float _1411 = _1408 * (_1375.z + (-0.5));
        float _1418 = exp2((_1382.w + (-0.5)) * 20.0) * 2.0;
        float _1419 = _1418 * (_1382.x + (-0.5));
        float _1420 = _1418 * (_1382.y + (-0.5));
        float _1421 = _1418 * (_1382.z + (-0.5));
        float _1428 = exp2((_1389.w + (-0.5)) * 20.0) * 2.0;
        float _1429 = _1428 * (_1389.x + (-0.5));
        float _1430 = _1428 * (_1389.y + (-0.5));
        float _1431 = _1428 * (_1389.z + (-0.5));
        float _1438 = exp2((_1396.w + (-0.5)) * 20.0) * 2.0;
        float _1439 = _1438 * (_1396.x + (-0.5));
        float _1440 = _1438 * (_1396.y + (-0.5));
        float _1441 = _1438 * (_1396.z + (-0.5));
        float _1442 = isnan(0.0) ? _1439 : (isnan(_1439) ? 0.0 : max(_1439, 0.0));
        float _1443 = isnan(0.0) ? _1440 : (isnan(_1440) ? 0.0 : max(_1440, 0.0));
        float _1444 = isnan(0.0) ? _1441 : (isnan(_1441) ? 0.0 : max(_1441, 0.0));
        float _1445 = _1409 * 0.5;
        float _1446 = _1419 * 0.5;
        float _1447 = _1429 * 0.5;
        float _1448 = dot(vec3(_1445, _1446, _1447), vec3(_1445, _1446, _1447));
        float _1453 = (_1448 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1448);
        float _1461 = (dot(vec3(_704, _705, _706), vec3(_1453 * _1445, _1453 * _1446, _1453 * _1447)) + 1.0) * 0.5;
        float _3981 = isnan(0.0) ? _1461 : (isnan(_1461) ? 0.0 : max(_1461, 0.0));
        float _1470 = sqrt(((_1446 * _1446) + (_1445 * _1445)) + (_1447 * _1447)) / (_1442 + 9.9999997473787516355514526367188e-06);
        float _3992 = isnan(0.0) ? _1470 : (isnan(_1470) ? 0.0 : max(_1470, 0.0));
        float _1471 = isnan(1.0) ? _3992 : (isnan(_3992) ? 1.0 : min(_3992, 1.0));
        float _1472 = _1471 * 2.0;
        float _1476 = (1.0 - _1471) / (_1471 + 1.0);
        float _4003 = isnan(0.0) ? _1476 : (isnan(_1476) ? 0.0 : max(_1476, 0.0));
        float _1477 = isnan(1.0) ? _4003 : (isnan(_4003) ? 1.0 : min(_4003, 1.0));
        float _1486 = ((((1.0 - _1477) * (_1472 + 2.0)) * exp2(log2(isnan(1.0) ? _3981 : (isnan(_3981) ? 1.0 : min(_3981, 1.0))) * (_1472 + 1.0))) + _1477) * _1442;
        float _1487 = _1410 * 0.5;
        float _1488 = _1420 * 0.5;
        float _1489 = _1430 * 0.5;
        float _1490 = dot(vec3(_1487, _1488, _1489), vec3(_1487, _1488, _1489));
        float _1495 = (_1490 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1490);
        float _1503 = (dot(vec3(_704, _705, _706), vec3(_1495 * _1487, _1495 * _1488, _1495 * _1489)) + 1.0) * 0.5;
        float _4014 = isnan(0.0) ? _1503 : (isnan(_1503) ? 0.0 : max(_1503, 0.0));
        float _1512 = sqrt(((_1488 * _1488) + (_1487 * _1487)) + (_1489 * _1489)) / (_1443 + 9.9999997473787516355514526367188e-06);
        float _4025 = isnan(0.0) ? _1512 : (isnan(_1512) ? 0.0 : max(_1512, 0.0));
        float _1513 = isnan(1.0) ? _4025 : (isnan(_4025) ? 1.0 : min(_4025, 1.0));
        float _1514 = _1513 * 2.0;
        float _1518 = (1.0 - _1513) / (_1513 + 1.0);
        float _4036 = isnan(0.0) ? _1518 : (isnan(_1518) ? 0.0 : max(_1518, 0.0));
        float _1519 = isnan(1.0) ? _4036 : (isnan(_4036) ? 1.0 : min(_4036, 1.0));
        float _1528 = ((((1.0 - _1519) * (_1514 + 2.0)) * exp2(log2(isnan(1.0) ? _4014 : (isnan(_4014) ? 1.0 : min(_4014, 1.0))) * (_1514 + 1.0))) + _1519) * _1443;
        float _1529 = _1411 * 0.5;
        float _1530 = _1421 * 0.5;
        float _1531 = _1431 * 0.5;
        float _1532 = dot(vec3(_1529, _1530, _1531), vec3(_1529, _1530, _1531));
        float _1537 = (_1532 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1532);
        float _1545 = (dot(vec3(_704, _705, _706), vec3(_1537 * _1529, _1537 * _1530, _1537 * _1531)) + 1.0) * 0.5;
        float _4047 = isnan(0.0) ? _1545 : (isnan(_1545) ? 0.0 : max(_1545, 0.0));
        float _1554 = sqrt(((_1530 * _1530) + (_1529 * _1529)) + (_1531 * _1531)) / (_1444 + 9.9999997473787516355514526367188e-06);
        float _4058 = isnan(0.0) ? _1554 : (isnan(_1554) ? 0.0 : max(_1554, 0.0));
        float _1555 = isnan(1.0) ? _4058 : (isnan(_4058) ? 1.0 : min(_4058, 1.0));
        float _1556 = _1555 * 2.0;
        float _1560 = (1.0 - _1555) / (_1555 + 1.0);
        float _4069 = isnan(0.0) ? _1560 : (isnan(_1560) ? 0.0 : max(_1560, 0.0));
        float _1561 = isnan(1.0) ? _4069 : (isnan(_4069) ? 1.0 : min(_4069, 1.0));
        float _1570 = ((((1.0 - _1561) * (_1556 + 2.0)) * exp2(log2(isnan(1.0) ? _4047 : (isnan(_4047) ? 1.0 : min(_4047, 1.0))) * (_1556 + 1.0))) + _1561) * _1444;
        _1578 = _1411;
        _1579 = _1410;
        _1580 = _1409;
        _1581 = _1421;
        _1582 = _1420;
        _1583 = _1419;
        _1584 = _1431;
        _1585 = _1430;
        _1586 = _1429;
        _1587 = _1444;
        _1588 = _1443;
        _1589 = _1442;
        _1590 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1486 : (isnan(_1486) ? 0.0 : max(_1486, 0.0)));
        _1591 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1528 : (isnan(_1528) ? 0.0 : max(_1528, 0.0)));
        _1592 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1570 : (isnan(_1570) ? 0.0 : max(_1570, 0.0)));
    }
    else
    {
        _1578 = _1267;
        _1579 = _1267;
        _1580 = _1267;
        _1581 = _1267;
        _1582 = _1267;
        _1583 = _1267;
        _1584 = _1267;
        _1585 = _1267;
        _1586 = _1267;
        _1587 = _1267;
        _1588 = _1267;
        _1589 = _1267;
        _1590 = 0.0;
        _1591 = 0.0;
        _1592 = 0.0;
    }
    float _1602 = (cbModelParam._m0[1u].x * (_1590 - _1279)) + _1279;
    float _1603 = (cbModelParam._m0[1u].x * (_1591 - _1280)) + _1280;
    float _1604 = (cbModelParam._m0[1u].x * (_1592 - _1281)) + _1281;
    float _1625 = fma(_1604, cbSceneParam._m0[89u].z, fma(_1603, cbSceneParam._m0[89u].y, _1602 * cbSceneParam._m0[89u].x));
    float _1628 = fma(_1604, cbSceneParam._m0[90u].z, fma(_1603, cbSceneParam._m0[90u].y, _1602 * cbSceneParam._m0[90u].x));
    float _1631 = fma(_1604, cbSceneParam._m0[91u].z, fma(_1603, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1602));
    float _1646 = _875 * 0.5;
    float _1647 = _876 * 0.5;
    float _1648 = _877 * 0.5;
    float _1649 = dot(vec4(_1646, _1647, _1648, 1.0), vec4(_1580, _1583, _1586, _1589));
    float _1652 = dot(vec4(_1646, _1647, _1648, 1.0), vec4(_1579, _1582, _1585, _1588));
    float _1655 = dot(vec4(_1646, _1647, _1648, 1.0), vec4(_1578, _1581, _1584, _1587));
    float _1689;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1662 = dot(vec4(_1646, _1647, _1648, 1.0), vec4(_1266, _1270, _1273, _1276));
        float _1666 = dot(vec4(_1646, _1647, _1648, 1.0), vec4(_1268, _1271, _1274, _1277));
        float _1670 = dot(vec4(_1646, _1647, _1648, 1.0), vec4(_1269, _1272, _1275, _1278));
        float _1677 = dot(vec4(cbModelParam._m0[39u]), vec4(_1646, _1647, _1648, 1.0));
        _1689 = dot(vec3(isnan(0.0) ? _1670 : (isnan(_1670) ? 0.0 : max(_1670, 0.0)), isnan(0.0) ? _1666 : (isnan(_1666) ? 0.0 : max(_1666, 0.0)), isnan(0.0) ? _1662 : (isnan(_1662) ? 0.0 : max(_1662, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1677) ? 0.0 : (isnan(0.0) ? _1677 : max(0.0, _1677))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1689 = 1.0;
    }
    float _1700;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1691 = dot(vec4(cbModelParam._m0[40u]), vec4(_1646, _1647, _1648, 1.0));
        _1700 = dot(vec3(isnan(0.0) ? _1649 : (isnan(_1649) ? 0.0 : max(_1649, 0.0)), isnan(0.0) ? _1652 : (isnan(_1652) ? 0.0 : max(_1652, 0.0)), isnan(0.0) ? _1655 : (isnan(_1655) ? 0.0 : max(_1655, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1691) ? 0.0 : (isnan(0.0) ? _1691 : max(0.0, _1691))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1700 = 1.0;
    }
    float _1704 = (_1700 * cbModelParam._m0[1u].x) + (_1689 * (1.0 - cbModelParam._m0[1u].x));
    float _1714 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _707);
    float _1715 = isnan(_1714) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1714 : min(cbModelParam._m0[25u].z, _1714));
    float _1796;
    float _1798;
    float _1800;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1763 = fma(_936, cbModelParam._m0[13u].z, fma(_932, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _928)) + cbModelParam._m0[13u].w;
        float _1767 = fma(_936, cbModelParam._m0[14u].z, fma(_932, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _928)) + cbModelParam._m0[14u].w;
        float _1771 = fma(_936, cbModelParam._m0[15u].z, fma(_932, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _928)) + cbModelParam._m0[15u].w;
        float _1774 = fma(_877, cbModelParam._m0[13u].z, fma(_876, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _875));
        float _1777 = fma(_877, cbModelParam._m0[14u].z, fma(_876, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _875));
        float _1780 = fma(_877, cbModelParam._m0[15u].z, fma(_876, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _875));
        float _1808;
        if (_1774 > 0.0)
        {
            _1808 = abs((1.0 - _1763) / _1774);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1774 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1763 + 1.0) / _1774);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1808 = frontier_phi_17_15_ladder;
        }
        float _2009;
        if (_1777 > 0.0)
        {
            _2009 = abs((1.0 - _1767) / _1777);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1777 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1767 + 1.0) / _1777);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2009 = frontier_phi_26_22_ladder;
        }
        float _2252;
        if (_1780 > 0.0)
        {
            _2252 = abs((1.0 - _1771) / _1780);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1780 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1771 + 1.0) / _1780);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2252 = frontier_phi_38_33_ladder;
        }
        float _2254 = isnan(_2009) ? _1808 : (isnan(_1808) ? _2009 : min(_1808, _2009));
        float _2255 = isnan(_2252) ? _2254 : (isnan(_2254) ? _2252 : min(_2254, _2252));
        float _2259 = (_2255 * _1774) + _1763;
        float _2260 = (_2255 * _1777) + _1767;
        float _2261 = (_2255 * _1780) + _1771;
        float _2262 = _2255 * 9.9999997473787516355514526367188e-05;
        float _2264 = (-1.0) - _2262;
        float _2266 = _2262 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2261 > _2266) || ((_2261 < _2264) || ((_2260 > _2266) || ((_2260 < _2264) || ((_2259 < _2264) || (_2259 > _2266))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2385 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2261, cbModelParam._m0[9u].z, fma(_2260, cbModelParam._m0[9u].y, _2259 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2261, cbModelParam._m0[10u].z, fma(_2260, cbModelParam._m0[10u].y, _2259 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2261, cbModelParam._m0[11u].z, fma(_2260, cbModelParam._m0[11u].y, _2259 * cbModelParam._m0[11u].x))), _1715);
            frontier_phi_16_38_ladder = _2385.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2385.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2385.x * cbModelParam._m0[1u].y;
        }
        _1796 = frontier_phi_16_38_ladder_2;
        _1798 = frontier_phi_16_38_ladder_1;
        _1800 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1784 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_875, _876, _877), _1715);
        _1796 = _1784.x * cbModelParam._m0[1u].y;
        _1798 = _1784.y * cbModelParam._m0[1u].y;
        _1800 = _1784.z * cbModelParam._m0[1u].y;
    }
    float _1804 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _707);
    float _1805 = isnan(_1804) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1804 : min(cbModelParam._m0[25u].w, _1804));
    float _1895;
    float _1897;
    float _1899;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1859 = fma(_936, cbModelParam._m0[21u].z, fma(_932, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _928)) + cbModelParam._m0[21u].w;
        float _1863 = fma(_936, cbModelParam._m0[22u].z, fma(_932, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _928)) + cbModelParam._m0[22u].w;
        float _1867 = fma(_936, cbModelParam._m0[23u].z, fma(_932, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _928)) + cbModelParam._m0[23u].w;
        float _1870 = fma(_877, cbModelParam._m0[21u].z, fma(_876, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _875));
        float _1873 = fma(_877, cbModelParam._m0[22u].z, fma(_876, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _875));
        float _1876 = fma(_877, cbModelParam._m0[23u].z, fma(_876, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _875));
        float _2014;
        if (_1870 > 0.0)
        {
            _2014 = abs((1.0 - _1859) / _1870);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1870 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1859 + 1.0) / _1870);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2014 = frontier_phi_28_24_ladder;
        }
        float _2279;
        if (_1873 > 0.0)
        {
            _2279 = abs((1.0 - _1863) / _1873);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1873 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1863 + 1.0) / _1873);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2279 = frontier_phi_40_35_ladder;
        }
        float _2484;
        if (_1876 > 0.0)
        {
            _2484 = abs((1.0 - _1867) / _1876);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1876 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1867 + 1.0) / _1876);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2484 = frontier_phi_49_46_ladder;
        }
        float _2486 = isnan(_2279) ? _2014 : (isnan(_2014) ? _2279 : min(_2014, _2279));
        float _2487 = isnan(_2484) ? _2486 : (isnan(_2486) ? _2484 : min(_2486, _2484));
        float _2491 = (_2487 * _1870) + _1859;
        float _2492 = (_2487 * _1873) + _1863;
        float _2493 = (_2487 * _1876) + _1867;
        float _2494 = _2487 * 9.9999997473787516355514526367188e-05;
        float _2495 = (-1.0) - _2494;
        float _2497 = _2494 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2493 > _2497) || ((_2493 < _2495) || ((_2492 > _2497) || ((_2492 < _2495) || ((_2491 < _2495) || (_2491 > _2497))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2692 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2493, cbModelParam._m0[17u].z, fma(_2492, cbModelParam._m0[17u].y, _2491 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2493, cbModelParam._m0[18u].z, fma(_2492, cbModelParam._m0[18u].y, _2491 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2493, cbModelParam._m0[19u].z, fma(_2492, cbModelParam._m0[19u].y, _2491 * cbModelParam._m0[19u].x))), _1805);
            frontier_phi_25_49_ladder = _2692.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2692.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2692.x * cbModelParam._m0[1u].z;
        }
        _1895 = frontier_phi_25_49_ladder_2;
        _1897 = frontier_phi_25_49_ladder_1;
        _1899 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1879 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_875, _876, _877), _1805);
        _1895 = _1879.x * cbModelParam._m0[1u].z;
        _1897 = _1879.y * cbModelParam._m0[1u].z;
        _1899 = _1879.z * cbModelParam._m0[1u].z;
    }
    float _1911 = ((((1.0 - _896) * ((_883 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_896 * _883)) * _867;
    float _1912 = _1911 * ((cbModelParam._m0[1u].w * (_1895 - _1796)) + _1796);
    float _1913 = _1911 * ((cbModelParam._m0[1u].w * (_1897 - _1798)) + _1798);
    float _1914 = _1911 * ((cbModelParam._m0[1u].w * (_1899 - _1800)) + _1800);
    float _1917 = fma(_1914, cbSceneParam._m0[89u].z, fma(_1913, cbSceneParam._m0[89u].y, _1912 * cbSceneParam._m0[89u].x));
    float _1920 = fma(_1914, cbSceneParam._m0[90u].z, fma(_1913, cbSceneParam._m0[90u].y, _1912 * cbSceneParam._m0[90u].x));
    float _1923 = fma(_1914, cbSceneParam._m0[91u].z, fma(_1913, cbSceneParam._m0[91u].y, _1912 * cbSceneParam._m0[91u].x));
    uvec4 _1933 = floatBitsToUint(cbInstanceData._m0[_264 + 5u]);
    uint _1935 = _1933.x * 14u;
    uint _1936 = _1935 + 13u;
    float _1943 = _867 + (-1.0);
    float _1948 = (cbLight._m0[_1936].x * _1943) + 1.0;
    float _1949 = (cbLight._m0[_1936].y * _1943) + 1.0;
    float _1950 = (cbLight._m0[_1936].z * _1943) + 1.0;
    float _1951 = (cbLight._m0[_1936].w * _1943) + 1.0;
    uint _1952 = _1935 + 5u;
    float _1958 = isnan(1.0) ? _1949 : (isnan(_1949) ? 1.0 : min(_1949, 1.0));
    uint _1962 = _1935 + 4u;
    float _1968 = isnan(1.0) ? _1948 : (isnan(_1948) ? 1.0 : min(_1948, 1.0));
    uint _1972 = _1935 | 1u;
    float _1983 = dot(vec3(cbLight._m0[_1935].xyz), vec3(_704, _705, _706));
    float _1986 = dot(vec3(cbLight._m0[_1972].xyz), vec3(_704, _705, _706));
    float _4205 = isnan(0.0) ? _1983 : (isnan(_1983) ? 0.0 : max(_1983, 0.0));
    float _4216 = isnan(0.0) ? _1986 : (isnan(_1986) ? 0.0 : max(_1986, 0.0));
    float _1991 = (isnan(1.0) ? _4205 : (isnan(_4205) ? 1.0 : min(_4205, 1.0))) * 0.3183098733425140380859375;
    float _1993 = (isnan(1.0) ? _4216 : (isnan(_4216) ? 1.0 : min(_4216, 1.0))) * 0.3183098733425140380859375;
    float _2000 = ((cbLight._m0[_1952].x * _1958) * _1993) + ((cbLight._m0[_1962].x * _1968) * _1991);
    float _2001 = ((_1958 * cbLight._m0[_1952].y) * _1993) + ((_1968 * cbLight._m0[_1962].y) * _1991);
    float _2002 = ((_1958 * cbLight._m0[_1952].z) * _1993) + ((_1968 * cbLight._m0[_1962].z) * _1991);
    uvec4 _2006 = floatBitsToUint(cbLight._m0[_1935 + 12u]);
    bool _2008 = _2006.x == 0u;
    float _2019;
    float _2021;
    float _2023;
    if (_2008)
    {
        _2019 = _2000;
        _2021 = _2001;
        _2023 = _2002;
    }
    else
    {
        uint _2027 = _1935 + 6u;
        float _2043 = (dot(vec3(cbLight._m0[_1935 + 2u].xyz), vec3(_704, _705, _706)) * 0.5) + 0.5;
        float _2044 = _2043 * _2043;
        float _4227 = isnan(0.0) ? _2044 : (isnan(_2044) ? 0.0 : max(_2044, 0.0));
        float _2045 = isnan(1.0) ? _4227 : (isnan(_4227) ? 1.0 : min(_4227, 1.0));
        float _2046 = isnan(1.0) ? _1950 : (isnan(_1950) ? 1.0 : min(_1950, 1.0));
        _2019 = (((cbLight._m0[_2027].x * 0.3183098733425140380859375) * _2045) * _2046) + _2000;
        _2021 = (((cbLight._m0[_2027].y * 0.3183098733425140380859375) * _2045) * _2046) + _2001;
        _2023 = (((cbLight._m0[_2027].z * 0.3183098733425140380859375) * _2045) * _2046) + _2002;
    }
    bool _2026 = _2006.y == 0u;
    float _2064;
    float _2066;
    float _2068;
    if (_2026)
    {
        _2064 = _2019;
        _2066 = _2021;
        _2068 = _2023;
    }
    else
    {
        uint _2223 = _1935 + 7u;
        float _2239 = (dot(vec3(cbLight._m0[_1935 + 3u].xyz), vec3(_704, _705, _706)) * 0.5) + 0.5;
        float _2240 = _2239 * _2239;
        float _4243 = isnan(0.0) ? _2240 : (isnan(_2240) ? 0.0 : max(_2240, 0.0));
        float _2241 = isnan(1.0) ? _4243 : (isnan(_4243) ? 1.0 : min(_4243, 1.0));
        float _2242 = isnan(1.0) ? _1951 : (isnan(_1951) ? 1.0 : min(_1951, 1.0));
        _2064 = (((cbLight._m0[_2223].x * 0.3183098733425140380859375) * _2241) * _2242) + _2019;
        _2066 = (((cbLight._m0[_2223].y * 0.3183098733425140380859375) * _2241) * _2242) + _2021;
        _2068 = (((cbLight._m0[_2223].z * 0.3183098733425140380859375) * _2241) * _2242) + _2023;
    }
    uint _2071 = _1935 + 8u;
    float _2084 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1935].w)) * _707) * 0.949999988079071044921875);
    float _2085 = _2084 * _2084;
    float _2086 = cbLight._m0[_1935].x + _784;
    float _2087 = cbLight._m0[_1935].y + _785;
    float _2088 = cbLight._m0[_1935].z + _786;
    float _2092 = inversesqrt(dot(vec3(_2086, _2087, _2088), vec3(_2086, _2087, _2088)));
    float _2093 = _2092 * _2086;
    float _2094 = _2092 * _2087;
    float _2095 = _2092 * _2088;
    float _2096 = dot(vec3(_704, _705, _706), vec3(cbLight._m0[_1935].xyz));
    float _4259 = isnan(0.0) ? _2096 : (isnan(_2096) ? 0.0 : max(_2096, 0.0));
    float _2099 = isnan(1.0) ? _4259 : (isnan(_4259) ? 1.0 : min(_4259, 1.0));
    float _4270 = isnan(0.0) ? _868 : (isnan(_868) ? 0.0 : max(_868, 0.0));
    float _2100 = isnan(1.0) ? _4270 : (isnan(_4270) ? 1.0 : min(_4270, 1.0));
    float _2101 = dot(vec3(_704, _705, _706), vec3(_2093, _2094, _2095));
    float _4281 = isnan(0.0) ? _2101 : (isnan(_2101) ? 0.0 : max(_2101, 0.0));
    float _2104 = isnan(1.0) ? _4281 : (isnan(_4281) ? 1.0 : min(_4281, 1.0));
    float _2105 = dot(vec3(cbLight._m0[_1935].xyz), vec3(_2093, _2094, _2095));
    float _4292 = isnan(0.0) ? _2105 : (isnan(_2105) ? 0.0 : max(_2105, 0.0));
    float _2109 = _2085 * _2085;
    float _2113 = ((_2104 * _2104) * (_2109 + (-1.0))) + 1.0;
    float _2124 = (exp2(log2(1.0 - (isnan(1.0) ? _4292 : (isnan(_4292) ? 1.0 : min(_4292, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2125 = 1.0 - _2085;
    float _2136 = (0.5 / (((_2100 * ((_2099 * _2125) + _2085)) + 9.9999999392252902907785028219223e-09) + (((_2100 * _2125) + _2085) * _2099))) * _2099;
    float _4303 = isnan(0.0) ? _2136 : (isnan(_2136) ? 0.0 : max(_2136, 0.0));
    float _2138 = (isnan(1.0) ? _4303 : (isnan(_4303) ? 1.0 : min(_4303, 1.0))) * (_2109 / ((_2113 * _2113) * 3.141590118408203125));
    uint _2149 = _1935 + 9u;
    float _2160 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1972].w)) * _707) * 0.949999988079071044921875);
    float _2161 = _2160 * _2160;
    float _2162 = cbLight._m0[_1972].x + _784;
    float _2163 = cbLight._m0[_1972].y + _785;
    float _2164 = cbLight._m0[_1972].z + _786;
    float _2168 = inversesqrt(dot(vec3(_2162, _2163, _2164), vec3(_2162, _2163, _2164)));
    float _2169 = _2168 * _2162;
    float _2170 = _2168 * _2163;
    float _2171 = _2168 * _2164;
    float _2172 = dot(vec3(_704, _705, _706), vec3(cbLight._m0[_1972].xyz));
    float _4314 = isnan(0.0) ? _2172 : (isnan(_2172) ? 0.0 : max(_2172, 0.0));
    float _2175 = isnan(1.0) ? _4314 : (isnan(_4314) ? 1.0 : min(_4314, 1.0));
    float _2176 = dot(vec3(_704, _705, _706), vec3(_2169, _2170, _2171));
    float _4325 = isnan(0.0) ? _2176 : (isnan(_2176) ? 0.0 : max(_2176, 0.0));
    float _2179 = isnan(1.0) ? _4325 : (isnan(_4325) ? 1.0 : min(_4325, 1.0));
    float _2180 = dot(vec3(cbLight._m0[_1972].xyz), vec3(_2169, _2170, _2171));
    float _4336 = isnan(0.0) ? _2180 : (isnan(_2180) ? 0.0 : max(_2180, 0.0));
    float _2184 = _2161 * _2161;
    float _2188 = ((_2179 * _2179) * (_2184 + (-1.0))) + 1.0;
    float _2197 = (exp2(log2(1.0 - (isnan(1.0) ? _4336 : (isnan(_4336) ? 1.0 : min(_4336, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2198 = 1.0 - _2161;
    float _2208 = (0.5 / (((_2100 * ((_2175 * _2198) + _2161)) + 9.9999999392252902907785028219223e-09) + (((_2100 * _2198) + _2161) * _2175))) * _2175;
    float _4347 = isnan(0.0) ? _2208 : (isnan(_2208) ? 0.0 : max(_2208, 0.0));
    float _2210 = (isnan(1.0) ? _4347 : (isnan(_4347) ? 1.0 : min(_4347, 1.0))) * (_2184 / ((_2188 * _2188) * 3.141590118408203125));
    float _2220 = (((_2197 * cbLight._m0[_2149].x) * _2210) * _1958) + (((_2124 * cbLight._m0[_2071].x) * _2138) * _1968);
    float _2221 = (((_2197 * cbLight._m0[_2149].y) * _2210) * _1958) + (((_2124 * cbLight._m0[_2071].y) * _2138) * _1968);
    float _2222 = (((_2197 * cbLight._m0[_2149].z) * _2210) * _1958) + (((_2124 * cbLight._m0[_2071].z) * _2138) * _1968);
    float _2284;
    float _2286;
    float _2288;
    if (_2008)
    {
        _2284 = _2220;
        _2286 = _2221;
        _2288 = _2222;
    }
    else
    {
        uint _2290 = _1935 + 2u;
        uint _2294 = _1935 + 10u;
        float _2308 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2290].w)) * _707) * 0.949999988079071044921875);
        float _2309 = _2308 * _2308;
        float _2310 = cbLight._m0[_2290].x + _784;
        float _2311 = cbLight._m0[_2290].y + _785;
        float _2312 = cbLight._m0[_2290].z + _786;
        float _2316 = inversesqrt(dot(vec3(_2310, _2311, _2312), vec3(_2310, _2311, _2312)));
        float _2317 = _2316 * _2310;
        float _2318 = _2316 * _2311;
        float _2319 = _2316 * _2312;
        float _2320 = dot(vec3(_704, _705, _706), vec3(cbLight._m0[_2290].xyz));
        float _4358 = isnan(0.0) ? _2320 : (isnan(_2320) ? 0.0 : max(_2320, 0.0));
        float _2323 = isnan(1.0) ? _4358 : (isnan(_4358) ? 1.0 : min(_4358, 1.0));
        float _2324 = dot(vec3(_704, _705, _706), vec3(_2317, _2318, _2319));
        float _4369 = isnan(0.0) ? _2324 : (isnan(_2324) ? 0.0 : max(_2324, 0.0));
        float _2327 = isnan(1.0) ? _4369 : (isnan(_4369) ? 1.0 : min(_4369, 1.0));
        float _2328 = dot(vec3(cbLight._m0[_2290].xyz), vec3(_2317, _2318, _2319));
        float _4380 = isnan(0.0) ? _2328 : (isnan(_2328) ? 0.0 : max(_2328, 0.0));
        float _2332 = _2309 * _2309;
        float _2336 = ((_2327 * _2327) * (_2332 + (-1.0))) + 1.0;
        float _2345 = (exp2(log2(1.0 - (isnan(1.0) ? _4380 : (isnan(_4380) ? 1.0 : min(_4380, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2346 = 1.0 - _2309;
        float _2356 = (0.5 / (((_2100 * ((_2323 * _2346) + _2309)) + 9.9999999392252902907785028219223e-09) + (((_2100 * _2346) + _2309) * _2323))) * _2323;
        float _4391 = isnan(0.0) ? _2356 : (isnan(_2356) ? 0.0 : max(_2356, 0.0));
        float _2358 = (isnan(1.0) ? _4391 : (isnan(_4391) ? 1.0 : min(_4391, 1.0))) * (_2332 / ((_2336 * _2336) * 3.141590118408203125));
        float _2359 = isnan(1.0) ? _1950 : (isnan(_1950) ? 1.0 : min(_1950, 1.0));
        _2284 = (((_2345 * cbLight._m0[_2294].x) * _2358) * _2359) + _2220;
        _2286 = (((_2345 * cbLight._m0[_2294].y) * _2358) * _2359) + _2221;
        _2288 = (((_2345 * cbLight._m0[_2294].z) * _2358) * _2359) + _2222;
    }
    float _2394;
    float _2396;
    float _2398;
    if (_2026)
    {
        _2394 = _2284;
        _2396 = _2286;
        _2398 = _2288;
    }
    else
    {
        uint _2405 = _1935 + 3u;
        uint _2409 = _1935 + 11u;
        float _2423 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2405].w)) * _707) * 0.949999988079071044921875);
        float _2424 = _2423 * _2423;
        float _2425 = cbLight._m0[_2405].x + _784;
        float _2426 = cbLight._m0[_2405].y + _785;
        float _2427 = cbLight._m0[_2405].z + _786;
        float _2431 = inversesqrt(dot(vec3(_2425, _2426, _2427), vec3(_2425, _2426, _2427)));
        float _2432 = _2431 * _2425;
        float _2433 = _2431 * _2426;
        float _2434 = _2431 * _2427;
        float _2435 = dot(vec3(_704, _705, _706), vec3(cbLight._m0[_2405].xyz));
        float _4407 = isnan(0.0) ? _2435 : (isnan(_2435) ? 0.0 : max(_2435, 0.0));
        float _2438 = isnan(1.0) ? _4407 : (isnan(_4407) ? 1.0 : min(_4407, 1.0));
        float _2439 = dot(vec3(_704, _705, _706), vec3(_2432, _2433, _2434));
        float _4418 = isnan(0.0) ? _2439 : (isnan(_2439) ? 0.0 : max(_2439, 0.0));
        float _2442 = isnan(1.0) ? _4418 : (isnan(_4418) ? 1.0 : min(_4418, 1.0));
        float _2443 = dot(vec3(cbLight._m0[_2405].xyz), vec3(_2432, _2433, _2434));
        float _4429 = isnan(0.0) ? _2443 : (isnan(_2443) ? 0.0 : max(_2443, 0.0));
        float _2447 = _2424 * _2424;
        float _2451 = ((_2442 * _2442) * (_2447 + (-1.0))) + 1.0;
        float _2460 = (exp2(log2(1.0 - (isnan(1.0) ? _4429 : (isnan(_4429) ? 1.0 : min(_4429, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2461 = 1.0 - _2424;
        float _2471 = (0.5 / (((_2100 * ((_2438 * _2461) + _2424)) + 9.9999999392252902907785028219223e-09) + (((_2100 * _2461) + _2424) * _2438))) * _2438;
        float _4440 = isnan(0.0) ? _2471 : (isnan(_2471) ? 0.0 : max(_2471, 0.0));
        float _2473 = (isnan(1.0) ? _4440 : (isnan(_4440) ? 1.0 : min(_4440, 1.0))) * (_2447 / ((_2451 * _2451) * 3.141590118408203125));
        float _2474 = isnan(1.0) ? _1951 : (isnan(_1951) ? 1.0 : min(_1951, 1.0));
        _2394 = (((_2460 * cbLight._m0[_2409].x) * _2473) * _2474) + _2284;
        _2396 = (((_2460 * cbLight._m0[_2409].y) * _2473) * _2474) + _2286;
        _2398 = (((_2460 * cbLight._m0[_2409].z) * _2473) * _2474) + _2288;
    }
    float _2609;
    float _2611;
    float _2613;
    float _2615;
    float _2617;
    float _2619;
    if (_1933.y == 0u)
    {
        float _2549 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2550 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2549;
        float _2551 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2549;
        float _2552 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2549;
        uvec4 _2564 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2565 = _2564.x;
        uint _2576 = uint((float(_2564.y) * floor(float(uint(cbSceneParam._m0[85u].y * _805) / _2565))) + floor(float(uint(cbSceneParam._m0[85u].x * _804) / _2565)));
        float _2586 = (log2(_2552 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2587 = isnan(0.0) ? _2586 : (isnan(_2586) ? 0.0 : max(_2586, 0.0));
        uint _2590 = uint(isnan(14.0) ? _2587 : (isnan(_2587) ? 14.0 : min(_2587, 14.0)));
        uvec4 _2595 = texelFetch(g_lightClusterGridBuffer, int(((_2590 << 2u) + (_2576 << 6u)) >> 2u));
        uint _2596 = _2595.x;
        uint _2597 = _2564.z;
        float _2697;
        float _2699;
        float _2701;
        float _2703;
        float _2705;
        float _2707;
        if (((((1u << ((_2597 >> 4u) & 15u)) + 4294967295u) & _2596) == 0u) || ((_2597 & 240u) == 0u))
        {
            _2697 = 0.0;
            _2699 = 0.0;
            _2701 = 0.0;
            _2703 = 0.0;
            _2705 = 0.0;
            _2707 = 0.0;
        }
        else
        {
            float _2698;
            float _2700;
            float _2702;
            float _2704;
            float _2706;
            float _2708;
            float _2850 = 0.0;
            float _2851 = 0.0;
            float _2852 = 0.0;
            float _2853 = 0.0;
            float _2854 = 0.0;
            float _2855 = 0.0;
            uint _2856 = 0u;
            uint _2865;
            bool _2866;
            for (;;)
            {
                _2865 = texelFetch(g_lightClassification, int((((_2590 << 5u) + (_2576 << 9u)) + (_2856 << 2u)) >> 2u)).x;
                _2866 = _2865 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2866)
                {
                    frontier_phi_66_pred = _2850;
                    frontier_phi_66_pred_1 = _2855;
                    frontier_phi_66_pred_2 = _2854;
                    frontier_phi_66_pred_3 = _2853;
                    frontier_phi_66_pred_4 = _2852;
                    frontier_phi_66_pred_5 = _2851;
                }
                else
                {
                    float _2995;
                    float _2996;
                    float _2997;
                    float _2998;
                    float _2999;
                    float _3000;
                    uint _3001;
                    _2995 = _2850;
                    _2996 = _2851;
                    _2997 = _2852;
                    _2998 = _2853;
                    _2999 = _2854;
                    _3000 = _2855;
                    _3001 = _2865;
                    float _2922;
                    float _2923;
                    float _2924;
                    float _2925;
                    float _2926;
                    float _2927;
                    for (;;)
                    {
                        uint _3005 = uint(findLSB(_3001)) + (_2856 << 5u);
                        uint _3002 = (_3001 + 4294967295u) & _3001;
                        uint _3007 = _3005 * 48u;
                        vec4 _3021 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3007)).x, texelFetch(g_PointLightRenderingBuffer, int(_3007 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3007 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3007 + 3u)).x));
                        uint _3027 = (_3005 * 48u) + 4u;
                        vec4 _3040 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3027)).x, texelFetch(g_PointLightRenderingBuffer, int(_3027 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3027 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3027 + 3u)).x));
                        uint _3046 = (_3005 * 48u) + 8u;
                        vec3 _3057 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3046)).x, texelFetch(g_PointLightRenderingBuffer, int(_3046 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3046 + 2u)).x));
                        float _3061 = _3021.x - _2550;
                        float _3062 = _3021.y - _2551;
                        float _3063 = _3021.z - _2552;
                        float _3064 = dot(vec3(_3061, _3062, _3063), vec3(_3061, _3062, _3063));
                        float _3067 = inversesqrt(_3064);
                        float _3068 = _3067 * _3061;
                        float _3069 = _3067 * _3062;
                        float _3070 = _3067 * _3063;
                        float _3071 = dot(vec3(_823, _826, _829), vec3(_3068, _3069, _3070));
                        float _3076 = 1.0 - (_3064 * _3021.w);
                        float _4466 = isnan(0.0) ? _3076 : (isnan(_3076) ? 0.0 : max(_3076, 0.0));
                        float _3077 = isnan(1.0) ? _4466 : (isnan(_4466) ? 1.0 : min(_4466, 1.0));
                        float _3078 = sqrt(_3064) * _3040.w;
                        float _3081 = 1.39999997615814208984375 / (_3078 + 1.39999997615814208984375);
                        float _3082 = _3081 * _3081;
                        float _3085 = ((1.0 - _3082) * _3071) + _3082;
                        float _3088 = _3078 * _3078;
                        float _3092 = ((isnan(0.0) ? _3085 : (isnan(_3085) ? 0.0 : max(_3085, 0.0))) * _3077) / ((_3088 * 0.699999988079071044921875) + 1.0);
                        float _3096 = (-0.0) - _2550;
                        float _3097 = (-0.0) - _2551;
                        float _3098 = (-0.0) - _2552;
                        float _3102 = inversesqrt(dot(vec3(_3096, _3097, _3098), vec3(_3096, _3097, _3098)));
                        float _3103 = _3102 * _3096;
                        float _3104 = _3102 * _3097;
                        float _3105 = _3102 * _3098;
                        float _3113 = exp2(log2(1.0 / ((_3088 * 3.5) + 5.0)) * 0.25);
                        float _3114 = 1.0 - _883;
                        float _3121 = sqrt(1.0 - ((1.0 - (_3114 * _3114)) * (1.0 - (_3113 * _3113))));
                        float _3122 = _3121 * _3121;
                        float _3123 = _3122 * _3122;
                        float _3124 = _3103 + _3068;
                        float _3125 = _3104 + _3069;
                        float _3126 = _3105 + _3070;
                        float _3130 = inversesqrt(dot(vec3(_3124, _3125, _3126), vec3(_3124, _3125, _3126)));
                        float _3134 = dot(vec3(_823, _826, _829), vec3(_3103, _3104, _3105));
                        float _4482 = isnan(0.0) ? _3134 : (isnan(_3134) ? 0.0 : max(_3134, 0.0));
                        float _3137 = isnan(1.0) ? _4482 : (isnan(_4482) ? 1.0 : min(_4482, 1.0));
                        float _3138 = dot(vec3(_823, _826, _829), vec3(_3130 * _3124, _3130 * _3125, _3130 * _3126));
                        float _4493 = isnan(0.0) ? _3138 : (isnan(_3138) ? 0.0 : max(_3138, 0.0));
                        float _3141 = isnan(1.0) ? _4493 : (isnan(_4493) ? 1.0 : min(_4493, 1.0));
                        float _3145 = ((_3141 * _3141) * (_3123 + (-1.0))) + 1.0;
                        float _3146 = _3081 * _3122;
                        float _3147 = _3146 * _3146;
                        float _3150 = ((1.0 - _3147) * _3071) + _3147;
                        float _4504 = isnan(0.0) ? _3150 : (isnan(_3150) ? 0.0 : max(_3150, 0.0));
                        float _3151 = isnan(1.0) ? _4504 : (isnan(_4504) ? 1.0 : min(_4504, 1.0));
                        float _3152 = 1.0 - _3122;
                        float _3162 = (0.5 / (((_3151 * ((_3137 * _3152) + _3122)) + 9.9999999392252902907785028219223e-09) + (((_3151 * _3152) + _3122) * _3137))) * _3151;
                        float _4515 = isnan(0.0) ? _3162 : (isnan(_3162) ? 0.0 : max(_3162, 0.0));
                        float _3173 = (((_3123 * 3.1415927410125732421875) * (isnan(1.0) ? _4515 : (isnan(_4515) ? 1.0 : min(_4515, 1.0)))) / ((_3145 * _3145) * ((_3088 * 2.1991131305694580078125) + 3.141590118408203125))) * _3077;
                        _2925 = (_3092 * _3040.x) + _2998;
                        _2926 = (_3092 * _3040.y) + _2999;
                        _2927 = (_3092 * _3040.z) + _3000;
                        _2922 = (_3173 * _3057.x) + _2995;
                        _2923 = (_3173 * _3057.y) + _2996;
                        _2924 = (_3173 * _3057.z) + _2997;
                        if (_3002 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2995 = _2922;
                            _2996 = _2923;
                            _2997 = _2924;
                            _2998 = _2925;
                            _2999 = _2926;
                            _3000 = _2927;
                            _3001 = _3002;
                        }
                    }
                    frontier_phi_66_pred = _2922;
                    frontier_phi_66_pred_1 = _2927;
                    frontier_phi_66_pred_2 = _2926;
                    frontier_phi_66_pred_3 = _2925;
                    frontier_phi_66_pred_4 = _2924;
                    frontier_phi_66_pred_5 = _2923;
                }
                _2698 = frontier_phi_66_pred;
                _2708 = frontier_phi_66_pred_1;
                _2706 = frontier_phi_66_pred_2;
                _2704 = frontier_phi_66_pred_3;
                _2702 = frontier_phi_66_pred_4;
                _2700 = frontier_phi_66_pred_5;
                uint _2857 = _2856 + 1u;
                if (_2857 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2850 = _2698;
                    _2851 = _2700;
                    _2852 = _2702;
                    _2853 = _2704;
                    _2854 = _2706;
                    _2855 = _2708;
                    _2856 = _2857;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2697 = _2698;
            _2699 = _2700;
            _2701 = _2702;
            _2703 = _2704;
            _2705 = _2706;
            _2707 = _2708;
        }
        uvec4 _2711 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2712 = _2711.z;
        uint _2714 = (_2712 >> 8u) & 15u;
        float _2818;
        float _2820;
        float _2822;
        float _2824;
        float _2826;
        float _2828;
        if (((4294967295u << _2714) & _2596) == 0u)
        {
            _2818 = _2697;
            _2820 = _2699;
            _2822 = _2701;
            _2824 = _2703;
            _2826 = _2705;
            _2828 = _2707;
        }
        else
        {
            float _2843 = inversesqrt(dot(vec3(_2550, _2551, _2552), vec3(_2550, _2551, _2552)));
            float _2844 = _2843 * _2550;
            float _2845 = _2843 * _2551;
            float _2846 = _2843 * _2552;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2714 < ((_2712 >> 12u) & 15u))
            {
                float _2819;
                float _2821;
                float _2823;
                float _2825;
                float _2827;
                float _2829;
                float _2978 = _2697;
                float _2979 = _2699;
                float _2980 = _2701;
                float _2981 = _2703;
                float _2982 = _2705;
                float _2983 = _2707;
                uint _2984 = _2714;
                uint _2993;
                bool _2994;
                for (;;)
                {
                    _2993 = texelFetch(g_lightClassification, int((((_2590 << 5u) + (_2576 << 9u)) + (_2984 << 2u)) >> 2u)).x;
                    _2994 = _2993 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_2994)
                    {
                        frontier_phi_77_pred = _2983;
                        frontier_phi_77_pred_1 = _2982;
                        frontier_phi_77_pred_2 = _2981;
                        frontier_phi_77_pred_3 = _2980;
                        frontier_phi_77_pred_4 = _2979;
                        frontier_phi_77_pred_5 = _2978;
                    }
                    else
                    {
                        float _3187;
                        float _3188;
                        float _3189;
                        float _3190;
                        float _3191;
                        float _3192;
                        float _3480;
                        float _3481;
                        float _3482;
                        float _3483;
                        float _3484;
                        float _3485;
                        float _3200 = _2978;
                        float _3201 = _2979;
                        float _3202 = _2980;
                        float _3203 = _2981;
                        float _3204 = _2982;
                        float _3205 = _2983;
                        uint _3206 = _2993;
                        uint _3207;
                        vec4 _3232;
                        float _3233;
                        vec4 _3248;
                        vec3 _3260;
                        vec4 _3275;
                        vec4 _3290;
                        float _3336;
                        bool _3337;
                        for (;;)
                        {
                            uint _3217 = ((_2984 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3206));
                            _3207 = (_3206 + 4294967295u) & _3206;
                            uint _3219 = _3217 * 40u;
                            _3232 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3219)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3219 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3219 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3219 + 3u)).x));
                            _3233 = _3232.w;
                            uint _3235 = (_3217 * 40u) + 4u;
                            _3248 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3235)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3235 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3235 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3235 + 3u)).x));
                            uint _3250 = (_3217 * 40u) + 8u;
                            _3260 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3250)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3250 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3250 + 2u)).x));
                            uint _3262 = (_3217 * 40u) + 16u;
                            _3275 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3262)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3262 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3262 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3262 + 3u)).x));
                            uint _3277 = (_3217 * 40u) + 20u;
                            _3290 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3277)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3277 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3277 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3277 + 3u)).x));
                            uint _3292 = (_3217 * 40u) + 24u;
                            vec4 _3305 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3292)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3292 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3292 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3292 + 3u)).x));
                            uint _3311 = (_3217 * 40u) + 28u;
                            vec4 _3324 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3311)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3311 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3311 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3311 + 3u)).x));
                            _3336 = fma(_2552, _3324.z, fma(_2551, _3324.y, _3324.x * _2550)) + _3324.w;
                            _3337 = !((fma(_2552, _3305.z, fma(_2551, _3305.y, _3305.x * _2550)) + _3305.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3337)
                            {
                                float _3364 = _3232.x - _2550;
                                float _3365 = _3232.y - _2551;
                                float _3366 = _3232.z - _2552;
                                float _3367 = dot(vec3(_3364, _3365, _3366), vec3(_3364, _3365, _3366));
                                float _3370 = inversesqrt(_3367);
                                float _3371 = _3370 * _3364;
                                float _3372 = _3370 * _3365;
                                float _3373 = _3370 * _3366;
                                float _3377 = 1.0 - (_3367 / (_3233 * _3233));
                                float _4526 = isnan(0.0) ? _3377 : (isnan(_3377) ? 0.0 : max(_3377, 0.0));
                                float _3378 = isnan(1.0) ? _4526 : (isnan(_4526) ? 1.0 : min(_4526, 1.0));
                                float _3382 = sqrt(_3367) * _3248.w;
                                float _3384 = 1.39999997615814208984375 / (_3382 + 1.39999997615814208984375);
                                float _3385 = _3384 * _3384;
                                float _3388 = ((1.0 - _3385) * dot(vec3(_3371, _3372, _3373), vec3(_823, _826, _829))) + _3385;
                                float _3391 = _3382 * _3382;
                                float _3395 = (fma(_2552, _3275.z, fma(_2551, _3275.y, _3275.x * _2550)) + _3275.w) / _3336;
                                float _3396 = (fma(_2552, _3290.z, fma(_2551, _3290.y, _3290.x * _2550)) + _3290.w) / _3336;
                                float _3400 = 1.0 - dot(vec2(_3395, _3396), vec2(_3395, _3396));
                                float _4542 = isnan(0.0) ? _3400 : (isnan(_3400) ? 0.0 : max(_3400, 0.0));
                                float _3401 = isnan(1.0) ? _4542 : (isnan(_4542) ? 1.0 : min(_4542, 1.0));
                                float _3402 = _3401 * (((isnan(0.0) ? _3388 : (isnan(_3388) ? 0.0 : max(_3388, 0.0))) * _3378) / ((_3391 * 0.699999988079071044921875) + 1.0));
                                float _3414 = exp2(log2(1.0 / ((_3391 * 3.5) + 5.0)) * 0.25);
                                float _3415 = 1.0 - _883;
                                float _3422 = sqrt(1.0 - ((1.0 - (_3415 * _3415)) * (1.0 - (_3414 * _3414))));
                                float _3423 = _3422 * _3422;
                                float _3424 = _3423 * _3423;
                                float _3425 = _3371 - _2844;
                                float _3426 = _3372 - _2845;
                                float _3427 = _3373 - _2846;
                                float _3431 = inversesqrt(dot(vec3(_3425, _3426, _3427), vec3(_3425, _3426, _3427)));
                                float _3435 = dot(vec3(_823, _826, _829), vec3((-0.0) - _2844, (-0.0) - _2845, (-0.0) - _2846));
                                float _4553 = isnan(0.0) ? _3435 : (isnan(_3435) ? 0.0 : max(_3435, 0.0));
                                float _3438 = isnan(1.0) ? _4553 : (isnan(_4553) ? 1.0 : min(_4553, 1.0));
                                float _3439 = dot(vec3(_823, _826, _829), vec3(_3431 * _3425, _3431 * _3426, _3431 * _3427));
                                float _4564 = isnan(0.0) ? _3439 : (isnan(_3439) ? 0.0 : max(_3439, 0.0));
                                float _3442 = isnan(1.0) ? _4564 : (isnan(_4564) ? 1.0 : min(_4564, 1.0));
                                float _3446 = ((_3442 * _3442) * (_3424 + (-1.0))) + 1.0;
                                float _3447 = _3384 * _3423;
                                float _3448 = _3447 * _3447;
                                float _3454 = ((1.0 - _3448) * dot(vec3(_823, _826, _829), vec3(_3371, _3372, _3373))) + _3448;
                                float _4575 = isnan(0.0) ? _3454 : (isnan(_3454) ? 0.0 : max(_3454, 0.0));
                                float _3455 = isnan(1.0) ? _4575 : (isnan(_4575) ? 1.0 : min(_4575, 1.0));
                                float _3456 = 1.0 - _3423;
                                float _3466 = (0.5 / (((_3455 * ((_3438 * _3456) + _3423)) + 9.9999999392252902907785028219223e-09) + (((_3455 * _3456) + _3423) * _3438))) * _3455;
                                float _4586 = isnan(0.0) ? _3466 : (isnan(_3466) ? 0.0 : max(_3466, 0.0));
                                float _3476 = (_3401 * _3378) * (((_3424 * 3.1415927410125732421875) * (isnan(1.0) ? _4586 : (isnan(_4586) ? 1.0 : min(_4586, 1.0)))) / ((_3446 * _3446) * ((_3391 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3402 * _3248.y;
                                frontier_phi_83_pred_1 = _3402 * _3248.x;
                                frontier_phi_83_pred_2 = _3476 * _3260.z;
                                frontier_phi_83_pred_3 = _3476 * _3260.y;
                                frontier_phi_83_pred_4 = _3476 * _3260.x;
                                frontier_phi_83_pred_5 = _3402 * _3248.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3484 = frontier_phi_83_pred;
                            _3483 = frontier_phi_83_pred_1;
                            _3482 = frontier_phi_83_pred_2;
                            _3481 = frontier_phi_83_pred_3;
                            _3480 = frontier_phi_83_pred_4;
                            _3485 = frontier_phi_83_pred_5;
                            _3190 = _3483 + _3203;
                            _3191 = _3484 + _3204;
                            _3192 = _3485 + _3205;
                            _3187 = _3480 + _3200;
                            _3188 = _3481 + _3201;
                            _3189 = _3482 + _3202;
                            if (_3207 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3200 = _3187;
                                _3201 = _3188;
                                _3202 = _3189;
                                _3203 = _3190;
                                _3204 = _3191;
                                _3205 = _3192;
                                _3206 = _3207;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3192;
                        frontier_phi_77_pred_1 = _3191;
                        frontier_phi_77_pred_2 = _3190;
                        frontier_phi_77_pred_3 = _3189;
                        frontier_phi_77_pred_4 = _3188;
                        frontier_phi_77_pred_5 = _3187;
                    }
                    _2829 = frontier_phi_77_pred;
                    _2827 = frontier_phi_77_pred_1;
                    _2825 = frontier_phi_77_pred_2;
                    _2823 = frontier_phi_77_pred_3;
                    _2821 = frontier_phi_77_pred_4;
                    _2819 = frontier_phi_77_pred_5;
                    uint _2985 = _2984 + 1u;
                    if (_2985 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2978 = _2819;
                        _2979 = _2821;
                        _2980 = _2823;
                        _2981 = _2825;
                        _2982 = _2827;
                        _2983 = _2829;
                        _2984 = _2985;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2823;
                frontier_phi_58_59_ladder_1 = _2829;
                frontier_phi_58_59_ladder_2 = _2827;
                frontier_phi_58_59_ladder_3 = _2825;
                frontier_phi_58_59_ladder_4 = _2821;
                frontier_phi_58_59_ladder_5 = _2819;
            }
            else
            {
                frontier_phi_58_59_ladder = _2701;
                frontier_phi_58_59_ladder_1 = _2707;
                frontier_phi_58_59_ladder_2 = _2705;
                frontier_phi_58_59_ladder_3 = _2703;
                frontier_phi_58_59_ladder_4 = _2699;
                frontier_phi_58_59_ladder_5 = _2697;
            }
            _2818 = frontier_phi_58_59_ladder_5;
            _2820 = frontier_phi_58_59_ladder_4;
            _2822 = frontier_phi_58_59_ladder;
            _2824 = frontier_phi_58_59_ladder_3;
            _2826 = frontier_phi_58_59_ladder_2;
            _2828 = frontier_phi_58_59_ladder_1;
        }
        float _2833 = isnan(1.0) ? _867 : (isnan(_867) ? 1.0 : min(_867, 1.0));
        _2609 = (_2833 * _2824) + _2064;
        _2611 = (_2833 * _2826) + _2066;
        _2613 = (_2833 * _2828) + _2068;
        _2615 = ((_2818 * 0.039999999105930328369140625) * _2833) + _2394;
        _2617 = ((_2820 * 0.039999999105930328369140625) * _2833) + _2396;
        _2619 = ((_2822 * 0.039999999105930328369140625) * _2833) + _2398;
    }
    else
    {
        _2609 = _2064;
        _2611 = _2066;
        _2613 = _2068;
        _2615 = _2394;
        _2617 = _2396;
        _2619 = _2398;
    }
    float _4602 = isnan(0.0) ? _852 : (isnan(_852) ? 0.0 : max(_852, 0.0));
    float _4613 = isnan(0.0) ? _853 : (isnan(_853) ? 0.0 : max(_853, 0.0));
    float _4624 = isnan(0.0) ? _854 : (isnan(_854) ? 0.0 : max(_854, 0.0));
    float _2636 = ((isnan(1.0) ? _4602 : (isnan(_4602) ? 1.0 : min(_4602, 1.0))) * (_2609 + ((isnan(0.0) ? _1625 : (isnan(_1625) ? 0.0 : max(_1625, 0.0))) * _867))) + ((_2615 + ((isnan(0.0) ? _1917 : (isnan(_1917) ? 0.0 : max(_1917, 0.0))) * _1704)) * cbPerFrame._m0[3u].x);
    float _2637 = ((isnan(1.0) ? _4613 : (isnan(_4613) ? 1.0 : min(_4613, 1.0))) * (_2611 + ((isnan(0.0) ? _1628 : (isnan(_1628) ? 0.0 : max(_1628, 0.0))) * _867))) + ((_2617 + ((isnan(0.0) ? _1920 : (isnan(_1920) ? 0.0 : max(_1920, 0.0))) * _1704)) * cbPerFrame._m0[3u].x);
    float _2638 = ((isnan(1.0) ? _4624 : (isnan(_4624) ? 1.0 : min(_4624, 1.0))) * (_2613 + ((isnan(0.0) ? _1631 : (isnan(_1631) ? 0.0 : max(_1631, 0.0))) * _867))) + ((_2619 + ((isnan(0.0) ? _1923 : (isnan(_1923) ? 0.0 : max(_1923, 0.0))) * _1704)) * cbPerFrame._m0[3u].x);
    uint _2639 = _264 + 6u;
    float _2647 = _804 / cbSceneParam._m0[86u].x;
    float _2648 = _805 / cbSceneParam._m0[86u].y;
    vec4 _2662 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2647, _2648, (log2((isnan(cbSceneParam._m0[77u].w) ? _725 : (isnan(_725) ? cbSceneParam._m0[77u].w : min(_725, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2664 = _2662.x;
    float _2665 = _2662.y;
    float _2666 = _2662.z;
    float _2667 = _2662.w;
    float _2760;
    float _2762;
    float _2764;
    float _2766;
    if (_725 > cbSceneParam._m0[78u].w)
    {
        float _2722 = isnan(_725) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _725 : min(cbSceneParam._m0[80u].w, _725));
        float _2723 = _2722 / _725;
        float _2734 = _2723 * _777;
        float _2735 = _778 * _2723;
        float _2736 = (-0.0) - _2735;
        float _2738 = _2723 * _779;
        float _2740 = (cbSceneParam._m0[77u].w * _2736) / _2722;
        float _2741 = _2740 + cbSceneParam._m0[79u].w;
        float _2742 = cbSceneParam._m0[79u].w - _2735;
        float _2748 = sqrt(((_2734 * _2734) + (_2735 * _2735)) + (_2738 * _2738));
        float _2751 = (1.0 - (cbSceneParam._m0[77u].w / _2722)) * _2748;
        float _2756 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2758 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2935;
        if (abs((_2736 - _2740) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2935 = ((((_2741 > 0.0) ? exp2(_2756 * _2741) : (2.0 - exp2(_2758 * _2741))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2751;
        }
        else
        {
            float _2879 = 1.0 / cbSceneParam._m0[80u].x;
            float _2880 = isnan(_2742) ? _2741 : (isnan(_2741) ? _2742 : max(_2741, _2742));
            float _2881 = isnan(_2742) ? _2741 : (isnan(_2741) ? _2742 : min(_2741, _2742));
            float _2890 = isnan(0.0) ? _2880 : (isnan(_2880) ? 0.0 : min(_2880, 0.0));
            float _2891 = isnan(0.0) ? _2881 : (isnan(_2881) ? 0.0 : min(_2881, 0.0));
            _2935 = ((abs(_2748 / _2736) * cbSceneParam._m0[80u].y) * ((((_2890 - _2891) * 2.0) - ((exp2(_2756 * (isnan(0.0) ? _2880 : (isnan(_2880) ? 0.0 : max(_2880, 0.0)))) - exp2(_2756 * (isnan(0.0) ? _2881 : (isnan(_2881) ? 0.0 : max(_2881, 0.0))))) * _2879)) - ((exp2(_2758 * _2890) - exp2(_2758 * _2891)) * _2879))) + (_2751 * cbSceneParam._m0[80u].z);
        }
        vec4 _2937 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2647, _2648, 1.0), 0.0);
        float _2946 = exp2((_2935 * (-1.44269502162933349609375)) * (1.0 - _2937.w));
        float _2947 = log2(_2946);
        float _2963 = log2(_2667);
        _2760 = (exp2(_2963 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2947 * cbSceneParam._m0[78u].x)) * _2937.x) / cbSceneParam._m0[78u].x)) + _2664;
        _2762 = (exp2(_2963 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2947 * cbSceneParam._m0[78u].y)) * _2937.y) / cbSceneParam._m0[78u].y)) + _2665;
        _2764 = (exp2(_2963 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2947 * cbSceneParam._m0[78u].z)) * _2937.z) / cbSceneParam._m0[78u].z)) + _2666;
        _2766 = _2946 * _2667;
    }
    else
    {
        _2760 = _2664;
        _2762 = _2665;
        _2764 = _2666;
        _2766 = _2667;
    }
    bool _2973;
    vec4 _2776;
    vec4 _2798;
    float _2800;
    float _2804;
    float _2805;
    float _2806;
    float _2807;
    bool _2817;
    for (;;)
    {
        _2776 = cbMatDynParam._m0[0u];
        float _2778 = roundEven(_2776.y);
        bool _2779 = _2778 == 3.0;
        float _2780 = log2(_2766);
        float _2787 = exp2(_2780 * cbSceneParam._m0[78u].x) * _2636;
        float _2788 = exp2(_2780 * cbSceneParam._m0[78u].y) * _2637;
        float _2789 = exp2(_2780 * cbSceneParam._m0[78u].z) * _2638;
        float _2796 = _793 + (-0.5);
        _2798 = cbMtdParam._m0[1u];
        _2800 = _2798.y * _2796;
        float _2803 = (_2778 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2804 = _2803 * (_2779 ? _2787 : (_2787 + (cbSceneParam._m0[72u].w * _2760)));
        _2805 = _2803 * (_2779 ? _2788 : (_2788 + (cbSceneParam._m0[72u].w * _2762)));
        _2806 = _2803 * (_2779 ? _2789 : (_2789 + (cbSceneParam._m0[72u].w * _2764)));
        _2807 = _2796 * 0.999000012874603271484375;
        _2817 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2817)
        {
            if ((cbInstanceData._m0[_264 + 7u].x + _2807) < 0.5)
            {
                _2973 = true;
                break;
            }
        }
        uint _2914 = _842 + uint(_2776.w);
        if ((cbInstanceData._m0[_2914].w < 1.0) && ((cbInstanceData._m0[_2914].w + _2807) < 0.5))
        {
            _2973 = true;
            break;
        }
        if ((_2800 + 1.0) < _2798.x)
        {
            _2973 = true;
            break;
        }
        _2973 = false;
        break;
    }
    float _3178;
    if (_2973)
    {
        discard_state = true;
        _3178 = 0.0;
    }
    else
    {
        _3178 = cbInstanceData._m0[_2639].w;
    }
    SV_Target.x = _2804;
    SV_Target.y = _2805;
    SV_Target.z = _2806;
    SV_Target.w = _3178;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2639].w;
    discard_exit();
}


