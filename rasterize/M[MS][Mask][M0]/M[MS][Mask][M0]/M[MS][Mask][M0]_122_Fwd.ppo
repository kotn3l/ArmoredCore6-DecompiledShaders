#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_0;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_10;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_6;
layout(set = 0, binding = 23) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_8;
layout(set = 0, binding = 24) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_9;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1367;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _214 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _215 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _216 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _222 = inversesqrt(dot(vec3(_214, _215, _216), vec3(_214, _215, _216)));
    float _223 = _222 * _214;
    float _224 = _222 * _215;
    float _225 = _222 * _216;
    float _229 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _230 = _229 * NORMAL.x;
    float _231 = _229 * NORMAL.y;
    float _232 = _229 * NORMAL.z;
    float _236 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _237 = _236 * TANGENT.x;
    float _238 = _236 * TANGENT.y;
    float _239 = _236 * TANGENT.z;
    uint _242 = uint(roundEven(NORMAL.w)) * 13u;
    uint _248 = _242 + 1u;
    uint _252 = _242 + 2u;
    float _261 = sqrt(((cbInstanceData._m0[_248].x * cbInstanceData._m0[_248].x) + (cbInstanceData._m0[_242].x * cbInstanceData._m0[_242].x)) + (cbInstanceData._m0[_252].x * cbInstanceData._m0[_252].x));
    float _262 = _261 * TEXCOORD.z;
    float _263 = _261 * TEXCOORD.w;
    vec4 _282 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _306 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _311 = _306.x * cbMtdParam._m0[11u].x;
    float _312 = _306.y * cbMtdParam._m0[11u].y;
    float _313 = _306.z * cbMtdParam._m0[11u].z;
    vec4 _332 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _262) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _263) + cbTextureTilingScale._m0[5u].w));
    vec4 _352 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _392 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _394 = _392.x;
    float _406 = dot(vec4(_394, _392.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _423 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _352.x) * 2.0) - ((((_394 - _406) * cbMtdParam._m0[24u].z) + _406) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3670 = isnan(0.0) ? _423 : (isnan(_423) ? 0.0 : max(_423, 0.0));
    float _424 = isnan(1.0) ? _3670 : (isnan(_3670) ? 1.0 : min(_3670, 1.0));
    float _431 = (_424 * ((_332.x * cbMtdParam._m0[12u].x) - _311)) + _311;
    float _432 = (_424 * ((_332.y * cbMtdParam._m0[12u].y) - _312)) + _312;
    float _433 = (_424 * ((_332.z * cbMtdParam._m0[12u].z) - _313)) + _313;
    vec4 _450 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _262) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _263) + cbTextureTilingScale._m0[3u].w));
    vec4 _470 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _472 = _470.x;
    float _482 = dot(vec4(_472, _470.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _496 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _352.y) * 2.0) - ((((_472 - _482) * cbMtdParam._m0[24u].z) + _482) * cbMtdParam._m0[20u].w))) + 1.0;
    float _3681 = isnan(0.0) ? _496 : (isnan(_496) ? 0.0 : max(_496, 0.0));
    float _497 = isnan(1.0) ? _3681 : (isnan(_3681) ? 1.0 : min(_3681, 1.0));
    float _504 = (_497 * ((_450.x * cbMtdParam._m0[13u].x) - _431)) + _431;
    float _505 = (_497 * ((_450.y * cbMtdParam._m0[13u].y) - _432)) + _432;
    float _506 = (_497 * ((_450.z * cbMtdParam._m0[13u].z) - _433)) + _433;
    vec4 _524 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_9, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[24u].x * _262) + cbTextureTilingScale._m0[24u].z, (cbTextureTilingScale._m0[24u].y * _263) + cbTextureTilingScale._m0[24u].w));
    vec4 _541 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[25u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _543 = _541.x;
    float _553 = dot(vec4(_543, _541.yzw), vec4(cbMtdParam._m0[30u].w, cbMtdParam._m0[31u].xy, 0.0));
    float _565 = ((cbMtdParam._m0[25u].x * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.z) - _352.z) * 2.0) - ((((_543 - _553) * cbMtdParam._m0[24u].z) + _553) * cbMtdParam._m0[20u].z))) + 1.0;
    float _3692 = isnan(0.0) ? _565 : (isnan(_565) ? 0.0 : max(_565, 0.0));
    float _566 = isnan(1.0) ? _3692 : (isnan(_3692) ? 1.0 : min(_3692, 1.0));
    float _579 = ((cbMtdParam._m0[9u].x * 4.55000019073486328125) * _282.x) * ((_566 * ((_524.x * cbMtdParam._m0[14u].x) - _504)) + _504);
    float _582 = ((cbMtdParam._m0[9u].y * 4.55000019073486328125) * _282.y) * ((_566 * ((_524.y * cbMtdParam._m0[14u].y) - _505)) + _505);
    float _585 = ((cbMtdParam._m0[9u].z * 4.55000019073486328125) * _282.z) * ((_566 * ((_524.z * cbMtdParam._m0[14u].z) - _506)) + _506);
    vec4 _603 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _262) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _263) + cbTextureTilingScale._m0[4u].w));
    vec4 _620 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _622 = _620.x;
    float _623 = _620.y;
    float _624 = _620.z;
    float _631 = ((_603.x - _622) * _424) + _622;
    float _632 = ((_603.y - _623) * _424) + _623;
    float _633 = ((_603.z - _624) * _424) + _624;
    vec4 _645 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _262) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _263) + cbTextureTilingScale._m0[2u].w));
    float _656 = ((_645.x - _631) * _497) + _631;
    float _657 = ((_645.y - _632) * _497) + _632;
    float _658 = ((_645.z - _633) * _497) + _633;
    vec4 _670 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[23u].x * _262) + cbTextureTilingScale._m0[23u].z, (cbTextureTilingScale._m0[23u].y * _263) + cbTextureTilingScale._m0[23u].w));
    float _683 = ((_670.z - _658) * _566) + _658;
    float _686 = ((((_670.x - _656) * _566) + _656) * 2.0) + (-1.0);
    float _688 = ((((_670.y - _657) * _566) + _657) * 2.0) + (-1.0);
    float _689 = dot(vec2(_686, _688), vec2(_686, _688));
    float _3703 = isnan(0.0) ? _689 : (isnan(_689) ? 0.0 : max(_689, 0.0));
    float _694 = sqrt(1.0 - (isnan(1.0) ? _3703 : (isnan(_3703) ? 1.0 : min(_3703, 1.0))));
    vec4 _708 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _720 = (((_708.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _686;
    float _721 = (((_708.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _688;
    float _724 = fma(_694, _230, fma(_721, _237, _720 * _223));
    float _727 = fma(_694, _231, fma(_721, _238, _720 * _224));
    float _730 = fma(_694, _232, fma(_721, _239, _720 * _225));
    float _734 = inversesqrt(dot(vec3(_724, _727, _730), vec3(_724, _727, _730)));
    vec4 _761 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _262) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _263) + cbTextureTilingScale._m0[11u].w));
    float _763 = _761.x;
    float _764 = 1.0 - _763;
    float _770 = (cbMtdParam._m0[19u].x + dot(vec4(_734 * _724, _734 * _727, _734 * _730, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_763 - _764) * cbMtdParam._m0[24u].w) + _764) * cbMtdParam._m0[21u].z);
    float _3714 = isnan(0.0) ? _770 : (isnan(_770) ? 0.0 : max(_770, 0.0));
    float _771 = isnan(1.0) ? _3714 : (isnan(_3714) ? 1.0 : min(_3714, 1.0));
    float _778 = (_771 * (cbMtdParam._m0[17u].x - _579)) + _579;
    float _779 = (_771 * (cbMtdParam._m0[17u].y - _582)) + _582;
    float _780 = (_771 * (cbMtdParam._m0[17u].z - _585)) + _585;
    float _784 = (cbMtdParam._m0[19u].w * (_708.z - _683)) + _683;
    vec4 _797 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _262) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _263) + cbTextureTilingScale._m0[15u].w));
    float _804 = (_797.x * 2.0) + (-1.0);
    float _805 = (_797.y * 2.0) + (-1.0);
    float _806 = dot(vec2(_804, _805), vec2(_804, _805));
    float _3725 = isnan(0.0) ? _806 : (isnan(_806) ? 0.0 : max(_806, 0.0));
    float _814 = ((_797.z - _784) * _771) + _784;
    float _824 = ((sqrt(1.0 - (isnan(1.0) ? _3725 : (isnan(_3725) ? 1.0 : min(_3725, 1.0)))) - _694) * _771) + _694;
    float _827 = (((_804 - _720) * _771) + _720) + (cbMtdParam._m0[21u].x * _720);
    float _828 = (((_805 - _721) * _771) + _721) + (cbMtdParam._m0[21u].x * _721);
    float _832 = cbMtdParam._m0[22u].x + _708.w;
    float _835 = fma(_824, _230, fma(_828, _237, _827 * _223));
    float _838 = fma(_824, _231, fma(_828, _238, _827 * _224));
    float _841 = fma(_824, _232, fma(_828, _239, _827 * _225));
    float _845 = inversesqrt(dot(vec3(_835, _838, _841), vec3(_835, _838, _841)));
    float _846 = _845 * _835;
    float _847 = _845 * _838;
    float _848 = _845 * _841;
    float _3736 = isnan(0.0) ? _814 : (isnan(_814) ? 0.0 : max(_814, 0.0));
    float _849 = isnan(1.0) ? _3736 : (isnan(_3736) ? 1.0 : min(_3736, 1.0));
    float _3747 = isnan(0.0) ? _832 : (isnan(_832) ? 0.0 : max(_832, 0.0));
    float _3758 = isnan(0.0) ? _778 : (isnan(_778) ? 0.0 : max(_778, 0.0));
    float _3769 = isnan(0.0) ? _779 : (isnan(_779) ? 0.0 : max(_779, 0.0));
    float _3780 = isnan(0.0) ? _780 : (isnan(_780) ? 0.0 : max(_780, 0.0));
    float _867 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _908 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _918 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _908);
    float _919 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _908);
    float _920 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _908);
    float _924 = inversesqrt(dot(vec3(_918, _919, _920), vec3(_918, _919, _920)));
    float _925 = _918 * _924;
    float _926 = _919 * _924;
    float _927 = _920 * _924;
    float _933 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _934 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _952 = fma(_848, cbSceneParam._m0[5u].z, fma(_847, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _846));
    float _955 = fma(_848, cbSceneParam._m0[6u].z, fma(_847, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _846));
    float _958 = fma(_848, cbSceneParam._m0[7u].z, fma(_847, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _846));
    uint _972 = (_242 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _978 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3758 : (isnan(_3758) ? 1.0 : min(_3758, 1.0)))) * cbInstanceData._m0[_972].x;
    float _979 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3769 : (isnan(_3769) ? 1.0 : min(_3769, 1.0)))) * cbInstanceData._m0[_972].y;
    float _980 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3780 : (isnan(_3780) ? 1.0 : min(_3780, 1.0)))) * cbInstanceData._m0[_972].z;
    float _3791 = isnan(0.0) ? _978 : (isnan(_978) ? 0.0 : max(_978, 0.0));
    float _981 = isnan(1.0) ? _3791 : (isnan(_3791) ? 1.0 : min(_3791, 1.0));
    float _3802 = isnan(0.0) ? _979 : (isnan(_979) ? 0.0 : max(_979, 0.0));
    float _982 = isnan(1.0) ? _3802 : (isnan(_3802) ? 1.0 : min(_3802, 1.0));
    float _3813 = isnan(0.0) ? _980 : (isnan(_980) ? 0.0 : max(_980, 0.0));
    float _983 = isnan(1.0) ? _3813 : (isnan(_3813) ? 1.0 : min(_3813, 1.0));
    vec4 _992 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _933, cbSceneParam._m0[86u].y * _934));
    float _996 = ((isnan(1.0) ? _3747 : (isnan(_3747) ? 1.0 : min(_3747, 1.0))) * TEXCOORD_5.w) * _992.x;
    float _997 = dot(vec3(_846, _847, _848), vec3(_925, _926, _927));
    float _1000 = _997 * 2.0;
    float _1004 = (_1000 * _846) - _925;
    float _1005 = (_1000 * _847) - _926;
    float _1006 = (_1000 * _848) - _927;
    float _1010 = abs(dot(vec3(_925, _926, _927), vec3(_846, _847, _848)));
    float _3824 = isnan(0.0) ? _1010 : (isnan(_1010) ? 0.0 : max(_1010, 0.0));
    float _1012 = sqrt(_849);
    float _1025 = exp2((_1012 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3824 : (isnan(_3824) ? 1.0 : min(_3824, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1012 * 3.0));
    float _1057 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1061 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1065 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1366;
    float _1368;
    float _1369;
    float _1370;
    float _1371;
    float _1372;
    float _1373;
    float _1374;
    float _1375;
    float _1376;
    float _1377;
    float _1378;
    float _1379;
    float _1380;
    float _1381;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1091 = fma(_1065, cbModelParam._m0[26u].z, fma(_1061, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1057));
        float _1095 = fma(_1065, cbModelParam._m0[27u].z, fma(_1061, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1057));
        float _1099 = fma(_1065, cbModelParam._m0[28u].z, fma(_1061, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1057));
        float _1124 = _1057 + _846;
        float _1125 = _1061 + _847;
        float _1126 = _1065 + _848;
        float _1136 = fma(_1126, cbModelParam._m0[26u].z, fma(_1125, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1124)) - _1091;
        float _1137 = fma(_1126, cbModelParam._m0[27u].z, fma(_1125, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1124)) - _1095;
        float _1138 = fma(_1126, cbModelParam._m0[28u].z, fma(_1125, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1124)) - _1099;
        float _1142 = inversesqrt(dot(vec3(_1136, _1137, _1138), vec3(_1136, _1137, _1138)));
        float _1155 = ((_1142 * _1136) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1091 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1156 = ((_1142 * _1137) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1095 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1157 = ((_1142 * _1138) / cbModelParam._m0[34u].z) + ((((((_1099 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1160 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1155, _1156, _1157), 0.0);
        vec4 _1167 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1155, _1156, _1157), 0.0);
        vec4 _1174 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1155, _1156, _1157), 0.0);
        vec4 _1181 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1155, _1156, _1157), 0.0);
        float _1194 = exp2((_1160.w + (-0.5)) * 20.0) * 2.0;
        float _1195 = _1194 * (_1160.x + (-0.5));
        float _1196 = _1194 * (_1160.y + (-0.5));
        float _1197 = _1194 * (_1160.z + (-0.5));
        float _1204 = exp2((_1167.w + (-0.5)) * 20.0) * 2.0;
        float _1205 = _1204 * (_1167.x + (-0.5));
        float _1206 = _1204 * (_1167.y + (-0.5));
        float _1207 = _1204 * (_1167.z + (-0.5));
        float _1214 = exp2((_1174.w + (-0.5)) * 20.0) * 2.0;
        float _1215 = _1214 * (_1174.x + (-0.5));
        float _1216 = _1214 * (_1174.y + (-0.5));
        float _1217 = _1214 * (_1174.z + (-0.5));
        float _1224 = exp2((_1181.w + (-0.5)) * 20.0) * 2.0;
        float _1225 = _1224 * (_1181.x + (-0.5));
        float _1226 = _1224 * (_1181.y + (-0.5));
        float _1227 = _1224 * (_1181.z + (-0.5));
        float _1228 = isnan(0.0) ? _1225 : (isnan(_1225) ? 0.0 : max(_1225, 0.0));
        float _1229 = isnan(0.0) ? _1226 : (isnan(_1226) ? 0.0 : max(_1226, 0.0));
        float _1230 = isnan(0.0) ? _1227 : (isnan(_1227) ? 0.0 : max(_1227, 0.0));
        float _1231 = _1195 * 0.5;
        float _1232 = _1205 * 0.5;
        float _1233 = _1215 * 0.5;
        float _1234 = dot(vec3(_1231, _1232, _1233), vec3(_1231, _1232, _1233));
        float _1239 = (_1234 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1234);
        float _1248 = (dot(vec3(_846, _847, _848), vec3(_1239 * _1231, _1239 * _1232, _1239 * _1233)) + 1.0) * 0.5;
        float _3850 = isnan(0.0) ? _1248 : (isnan(_1248) ? 0.0 : max(_1248, 0.0));
        float _1258 = sqrt(((_1232 * _1232) + (_1231 * _1231)) + (_1233 * _1233)) / (_1228 + 9.9999997473787516355514526367188e-06);
        float _3861 = isnan(0.0) ? _1258 : (isnan(_1258) ? 0.0 : max(_1258, 0.0));
        float _1259 = isnan(1.0) ? _3861 : (isnan(_3861) ? 1.0 : min(_3861, 1.0));
        float _1260 = _1259 * 2.0;
        float _1264 = (1.0 - _1259) / (_1259 + 1.0);
        float _3872 = isnan(0.0) ? _1264 : (isnan(_1264) ? 0.0 : max(_1264, 0.0));
        float _1265 = isnan(1.0) ? _3872 : (isnan(_3872) ? 1.0 : min(_3872, 1.0));
        float _1274 = ((((1.0 - _1265) * (_1260 + 2.0)) * exp2(log2(isnan(1.0) ? _3850 : (isnan(_3850) ? 1.0 : min(_3850, 1.0))) * (_1260 + 1.0))) + _1265) * _1228;
        float _1275 = _1196 * 0.5;
        float _1276 = _1206 * 0.5;
        float _1277 = _1216 * 0.5;
        float _1278 = dot(vec3(_1275, _1276, _1277), vec3(_1275, _1276, _1277));
        float _1283 = (_1278 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1278);
        float _1291 = (dot(vec3(_846, _847, _848), vec3(_1283 * _1275, _1283 * _1276, _1283 * _1277)) + 1.0) * 0.5;
        float _3883 = isnan(0.0) ? _1291 : (isnan(_1291) ? 0.0 : max(_1291, 0.0));
        float _1300 = sqrt(((_1276 * _1276) + (_1275 * _1275)) + (_1277 * _1277)) / (_1229 + 9.9999997473787516355514526367188e-06);
        float _3894 = isnan(0.0) ? _1300 : (isnan(_1300) ? 0.0 : max(_1300, 0.0));
        float _1301 = isnan(1.0) ? _3894 : (isnan(_3894) ? 1.0 : min(_3894, 1.0));
        float _1302 = _1301 * 2.0;
        float _1306 = (1.0 - _1301) / (_1301 + 1.0);
        float _3905 = isnan(0.0) ? _1306 : (isnan(_1306) ? 0.0 : max(_1306, 0.0));
        float _1307 = isnan(1.0) ? _3905 : (isnan(_3905) ? 1.0 : min(_3905, 1.0));
        float _1316 = ((((1.0 - _1307) * (_1302 + 2.0)) * exp2(log2(isnan(1.0) ? _3883 : (isnan(_3883) ? 1.0 : min(_3883, 1.0))) * (_1302 + 1.0))) + _1307) * _1229;
        float _1317 = _1197 * 0.5;
        float _1318 = _1207 * 0.5;
        float _1319 = _1217 * 0.5;
        float _1320 = dot(vec3(_1317, _1318, _1319), vec3(_1317, _1318, _1319));
        float _1325 = (_1320 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1320);
        float _1333 = (dot(vec3(_846, _847, _848), vec3(_1325 * _1317, _1325 * _1318, _1325 * _1319)) + 1.0) * 0.5;
        float _3916 = isnan(0.0) ? _1333 : (isnan(_1333) ? 0.0 : max(_1333, 0.0));
        float _1342 = sqrt(((_1318 * _1318) + (_1317 * _1317)) + (_1319 * _1319)) / (_1230 + 9.9999997473787516355514526367188e-06);
        float _3927 = isnan(0.0) ? _1342 : (isnan(_1342) ? 0.0 : max(_1342, 0.0));
        float _1343 = isnan(1.0) ? _3927 : (isnan(_3927) ? 1.0 : min(_3927, 1.0));
        float _1344 = _1343 * 2.0;
        float _1348 = (1.0 - _1343) / (_1343 + 1.0);
        float _3938 = isnan(0.0) ? _1348 : (isnan(_1348) ? 0.0 : max(_1348, 0.0));
        float _1349 = isnan(1.0) ? _3938 : (isnan(_3938) ? 1.0 : min(_3938, 1.0));
        float _1358 = ((((1.0 - _1349) * (_1344 + 2.0)) * exp2(log2(isnan(1.0) ? _3916 : (isnan(_3916) ? 1.0 : min(_3916, 1.0))) * (_1344 + 1.0))) + _1349) * _1230;
        _1366 = _1197;
        _1368 = _1196;
        _1369 = _1195;
        _1370 = _1207;
        _1371 = _1206;
        _1372 = _1205;
        _1373 = _1217;
        _1374 = _1216;
        _1375 = _1215;
        _1376 = _1230;
        _1377 = _1229;
        _1378 = _1228;
        _1379 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1274 : (isnan(_1274) ? 0.0 : max(_1274, 0.0)));
        _1380 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1316 : (isnan(_1316) ? 0.0 : max(_1316, 0.0)));
        _1381 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1358 : (isnan(_1358) ? 0.0 : max(_1358, 0.0)));
    }
    else
    {
        _1366 = _1367;
        _1368 = _1367;
        _1369 = _1367;
        _1370 = _1367;
        _1371 = _1367;
        _1372 = _1367;
        _1373 = _1367;
        _1374 = _1367;
        _1375 = _1367;
        _1376 = _1367;
        _1377 = _1367;
        _1378 = _1367;
        _1379 = 0.0;
        _1380 = 0.0;
        _1381 = 0.0;
    }
    float _1673;
    float _1674;
    float _1675;
    float _1676;
    float _1677;
    float _1678;
    float _1679;
    float _1680;
    float _1681;
    float _1682;
    float _1683;
    float _1684;
    float _1685;
    float _1686;
    float _1687;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1404 = fma(_1065, cbModelParam._m0[30u].z, fma(_1061, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1057));
        float _1408 = fma(_1065, cbModelParam._m0[31u].z, fma(_1061, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1057));
        float _1412 = fma(_1065, cbModelParam._m0[32u].z, fma(_1061, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1057));
        float _1435 = _1057 + _846;
        float _1436 = _1061 + _847;
        float _1437 = _1065 + _848;
        float _1447 = fma(_1437, cbModelParam._m0[30u].z, fma(_1436, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1435)) - _1404;
        float _1448 = fma(_1437, cbModelParam._m0[31u].z, fma(_1436, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1435)) - _1408;
        float _1449 = fma(_1437, cbModelParam._m0[32u].z, fma(_1436, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1435)) - _1412;
        float _1453 = inversesqrt(dot(vec3(_1447, _1448, _1449), vec3(_1447, _1448, _1449)));
        float _1466 = ((_1453 * _1447) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1404 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1467 = ((_1453 * _1448) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1408 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1468 = ((_1453 * _1449) / cbModelParam._m0[35u].z) + ((((((_1412 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1470 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1466, _1467, _1468), 0.0);
        vec4 _1477 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1466, _1467, _1468), 0.0);
        vec4 _1484 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1466, _1467, _1468), 0.0);
        vec4 _1491 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1466, _1467, _1468), 0.0);
        float _1503 = exp2((_1470.w + (-0.5)) * 20.0) * 2.0;
        float _1504 = _1503 * (_1470.x + (-0.5));
        float _1505 = _1503 * (_1470.y + (-0.5));
        float _1506 = _1503 * (_1470.z + (-0.5));
        float _1513 = exp2((_1477.w + (-0.5)) * 20.0) * 2.0;
        float _1514 = _1513 * (_1477.x + (-0.5));
        float _1515 = _1513 * (_1477.y + (-0.5));
        float _1516 = _1513 * (_1477.z + (-0.5));
        float _1523 = exp2((_1484.w + (-0.5)) * 20.0) * 2.0;
        float _1524 = _1523 * (_1484.x + (-0.5));
        float _1525 = _1523 * (_1484.y + (-0.5));
        float _1526 = _1523 * (_1484.z + (-0.5));
        float _1533 = exp2((_1491.w + (-0.5)) * 20.0) * 2.0;
        float _1534 = _1533 * (_1491.x + (-0.5));
        float _1535 = _1533 * (_1491.y + (-0.5));
        float _1536 = _1533 * (_1491.z + (-0.5));
        float _1537 = isnan(0.0) ? _1534 : (isnan(_1534) ? 0.0 : max(_1534, 0.0));
        float _1538 = isnan(0.0) ? _1535 : (isnan(_1535) ? 0.0 : max(_1535, 0.0));
        float _1539 = isnan(0.0) ? _1536 : (isnan(_1536) ? 0.0 : max(_1536, 0.0));
        float _1540 = _1504 * 0.5;
        float _1541 = _1514 * 0.5;
        float _1542 = _1524 * 0.5;
        float _1543 = dot(vec3(_1540, _1541, _1542), vec3(_1540, _1541, _1542));
        float _1548 = (_1543 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1543);
        float _1556 = (dot(vec3(_846, _847, _848), vec3(_1548 * _1540, _1548 * _1541, _1548 * _1542)) + 1.0) * 0.5;
        float _3979 = isnan(0.0) ? _1556 : (isnan(_1556) ? 0.0 : max(_1556, 0.0));
        float _1565 = sqrt(((_1541 * _1541) + (_1540 * _1540)) + (_1542 * _1542)) / (_1537 + 9.9999997473787516355514526367188e-06);
        float _3990 = isnan(0.0) ? _1565 : (isnan(_1565) ? 0.0 : max(_1565, 0.0));
        float _1566 = isnan(1.0) ? _3990 : (isnan(_3990) ? 1.0 : min(_3990, 1.0));
        float _1567 = _1566 * 2.0;
        float _1571 = (1.0 - _1566) / (_1566 + 1.0);
        float _4001 = isnan(0.0) ? _1571 : (isnan(_1571) ? 0.0 : max(_1571, 0.0));
        float _1572 = isnan(1.0) ? _4001 : (isnan(_4001) ? 1.0 : min(_4001, 1.0));
        float _1581 = ((((1.0 - _1572) * (_1567 + 2.0)) * exp2(log2(isnan(1.0) ? _3979 : (isnan(_3979) ? 1.0 : min(_3979, 1.0))) * (_1567 + 1.0))) + _1572) * _1537;
        float _1582 = _1505 * 0.5;
        float _1583 = _1515 * 0.5;
        float _1584 = _1525 * 0.5;
        float _1585 = dot(vec3(_1582, _1583, _1584), vec3(_1582, _1583, _1584));
        float _1590 = (_1585 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1585);
        float _1598 = (dot(vec3(_846, _847, _848), vec3(_1590 * _1582, _1590 * _1583, _1590 * _1584)) + 1.0) * 0.5;
        float _4012 = isnan(0.0) ? _1598 : (isnan(_1598) ? 0.0 : max(_1598, 0.0));
        float _1607 = sqrt(((_1583 * _1583) + (_1582 * _1582)) + (_1584 * _1584)) / (_1538 + 9.9999997473787516355514526367188e-06);
        float _4023 = isnan(0.0) ? _1607 : (isnan(_1607) ? 0.0 : max(_1607, 0.0));
        float _1608 = isnan(1.0) ? _4023 : (isnan(_4023) ? 1.0 : min(_4023, 1.0));
        float _1609 = _1608 * 2.0;
        float _1613 = (1.0 - _1608) / (_1608 + 1.0);
        float _4034 = isnan(0.0) ? _1613 : (isnan(_1613) ? 0.0 : max(_1613, 0.0));
        float _1614 = isnan(1.0) ? _4034 : (isnan(_4034) ? 1.0 : min(_4034, 1.0));
        float _1623 = ((((1.0 - _1614) * (_1609 + 2.0)) * exp2(log2(isnan(1.0) ? _4012 : (isnan(_4012) ? 1.0 : min(_4012, 1.0))) * (_1609 + 1.0))) + _1614) * _1538;
        float _1624 = _1506 * 0.5;
        float _1625 = _1516 * 0.5;
        float _1626 = _1526 * 0.5;
        float _1627 = dot(vec3(_1624, _1625, _1626), vec3(_1624, _1625, _1626));
        float _1632 = (_1627 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1627);
        float _1640 = (dot(vec3(_846, _847, _848), vec3(_1632 * _1624, _1632 * _1625, _1632 * _1626)) + 1.0) * 0.5;
        float _4045 = isnan(0.0) ? _1640 : (isnan(_1640) ? 0.0 : max(_1640, 0.0));
        float _1649 = sqrt(((_1625 * _1625) + (_1624 * _1624)) + (_1626 * _1626)) / (_1539 + 9.9999997473787516355514526367188e-06);
        float _4056 = isnan(0.0) ? _1649 : (isnan(_1649) ? 0.0 : max(_1649, 0.0));
        float _1650 = isnan(1.0) ? _4056 : (isnan(_4056) ? 1.0 : min(_4056, 1.0));
        float _1651 = _1650 * 2.0;
        float _1655 = (1.0 - _1650) / (_1650 + 1.0);
        float _4067 = isnan(0.0) ? _1655 : (isnan(_1655) ? 0.0 : max(_1655, 0.0));
        float _1656 = isnan(1.0) ? _4067 : (isnan(_4067) ? 1.0 : min(_4067, 1.0));
        float _1665 = ((((1.0 - _1656) * (_1651 + 2.0)) * exp2(log2(isnan(1.0) ? _4045 : (isnan(_4045) ? 1.0 : min(_4045, 1.0))) * (_1651 + 1.0))) + _1656) * _1539;
        _1673 = _1506;
        _1674 = _1505;
        _1675 = _1504;
        _1676 = _1516;
        _1677 = _1515;
        _1678 = _1514;
        _1679 = _1526;
        _1680 = _1525;
        _1681 = _1524;
        _1682 = _1539;
        _1683 = _1538;
        _1684 = _1537;
        _1685 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1581 : (isnan(_1581) ? 0.0 : max(_1581, 0.0)));
        _1686 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1623 : (isnan(_1623) ? 0.0 : max(_1623, 0.0)));
        _1687 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1665 : (isnan(_1665) ? 0.0 : max(_1665, 0.0)));
    }
    else
    {
        _1673 = _1367;
        _1674 = _1367;
        _1675 = _1367;
        _1676 = _1367;
        _1677 = _1367;
        _1678 = _1367;
        _1679 = _1367;
        _1680 = _1367;
        _1681 = _1367;
        _1682 = _1367;
        _1683 = _1367;
        _1684 = _1367;
        _1685 = 0.0;
        _1686 = 0.0;
        _1687 = 0.0;
    }
    float _1697 = (cbModelParam._m0[1u].x * (_1685 - _1379)) + _1379;
    float _1698 = (cbModelParam._m0[1u].x * (_1686 - _1380)) + _1380;
    float _1699 = (cbModelParam._m0[1u].x * (_1687 - _1381)) + _1381;
    float _1720 = fma(_1699, cbSceneParam._m0[89u].z, fma(_1698, cbSceneParam._m0[89u].y, _1697 * cbSceneParam._m0[89u].x));
    float _1723 = fma(_1699, cbSceneParam._m0[90u].z, fma(_1698, cbSceneParam._m0[90u].y, _1697 * cbSceneParam._m0[90u].x));
    float _1726 = fma(_1699, cbSceneParam._m0[91u].z, fma(_1698, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1697));
    float _1741 = _1004 * 0.5;
    float _1742 = _1005 * 0.5;
    float _1743 = _1006 * 0.5;
    float _1744 = dot(vec4(_1741, _1742, _1743, 1.0), vec4(_1675, _1678, _1681, _1684));
    float _1747 = dot(vec4(_1741, _1742, _1743, 1.0), vec4(_1674, _1677, _1680, _1683));
    float _1750 = dot(vec4(_1741, _1742, _1743, 1.0), vec4(_1673, _1676, _1679, _1682));
    float _1784;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1757 = dot(vec4(_1741, _1742, _1743, 1.0), vec4(_1366, _1370, _1373, _1376));
        float _1761 = dot(vec4(_1741, _1742, _1743, 1.0), vec4(_1368, _1371, _1374, _1377));
        float _1765 = dot(vec4(_1741, _1742, _1743, 1.0), vec4(_1369, _1372, _1375, _1378));
        float _1772 = dot(vec4(cbModelParam._m0[39u]), vec4(_1741, _1742, _1743, 1.0));
        _1784 = dot(vec3(isnan(0.0) ? _1765 : (isnan(_1765) ? 0.0 : max(_1765, 0.0)), isnan(0.0) ? _1761 : (isnan(_1761) ? 0.0 : max(_1761, 0.0)), isnan(0.0) ? _1757 : (isnan(_1757) ? 0.0 : max(_1757, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1772) ? 0.0 : (isnan(0.0) ? _1772 : max(0.0, _1772))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1784 = 1.0;
    }
    float _1795;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1786 = dot(vec4(cbModelParam._m0[40u]), vec4(_1741, _1742, _1743, 1.0));
        _1795 = dot(vec3(isnan(0.0) ? _1744 : (isnan(_1744) ? 0.0 : max(_1744, 0.0)), isnan(0.0) ? _1747 : (isnan(_1747) ? 0.0 : max(_1747, 0.0)), isnan(0.0) ? _1750 : (isnan(_1750) ? 0.0 : max(_1750, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1786) ? 0.0 : (isnan(0.0) ? _1786 : max(0.0, _1786))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1795 = 1.0;
    }
    float _1799 = (_1795 * cbModelParam._m0[1u].x) + (_1784 * (1.0 - cbModelParam._m0[1u].x));
    float _1809 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _849);
    float _1810 = isnan(_1809) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1809 : min(cbModelParam._m0[25u].z, _1809));
    float _1890;
    float _1892;
    float _1894;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1857 = fma(_1065, cbModelParam._m0[13u].z, fma(_1061, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1057)) + cbModelParam._m0[13u].w;
        float _1861 = fma(_1065, cbModelParam._m0[14u].z, fma(_1061, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1057)) + cbModelParam._m0[14u].w;
        float _1865 = fma(_1065, cbModelParam._m0[15u].z, fma(_1061, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1057)) + cbModelParam._m0[15u].w;
        float _1868 = fma(_1006, cbModelParam._m0[13u].z, fma(_1005, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1004));
        float _1871 = fma(_1006, cbModelParam._m0[14u].z, fma(_1005, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1004));
        float _1874 = fma(_1006, cbModelParam._m0[15u].z, fma(_1005, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1004));
        float _1902;
        if (_1868 > 0.0)
        {
            _1902 = abs((1.0 - _1857) / _1868);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1868 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1857 + 1.0) / _1868);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1902 = frontier_phi_14_12_ladder;
        }
        float _2103;
        if (_1871 > 0.0)
        {
            _2103 = abs((1.0 - _1861) / _1871);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1871 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1861 + 1.0) / _1871);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2103 = frontier_phi_23_19_ladder;
        }
        float _2346;
        if (_1874 > 0.0)
        {
            _2346 = abs((1.0 - _1865) / _1874);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1874 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1865 + 1.0) / _1874);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2346 = frontier_phi_35_30_ladder;
        }
        float _2348 = isnan(_2103) ? _1902 : (isnan(_1902) ? _2103 : min(_1902, _2103));
        float _2349 = isnan(_2346) ? _2348 : (isnan(_2348) ? _2346 : min(_2348, _2346));
        float _2353 = (_2349 * _1868) + _1857;
        float _2354 = (_2349 * _1871) + _1861;
        float _2355 = (_2349 * _1874) + _1865;
        float _2356 = _2349 * 9.9999997473787516355514526367188e-05;
        float _2358 = (-1.0) - _2356;
        float _2360 = _2356 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2355 > _2360) || ((_2355 < _2358) || ((_2354 > _2360) || ((_2354 < _2358) || ((_2353 < _2358) || (_2353 > _2360))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2479 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2355, cbModelParam._m0[9u].z, fma(_2354, cbModelParam._m0[9u].y, _2353 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2355, cbModelParam._m0[10u].z, fma(_2354, cbModelParam._m0[10u].y, _2353 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2355, cbModelParam._m0[11u].z, fma(_2354, cbModelParam._m0[11u].y, _2353 * cbModelParam._m0[11u].x))), _1810);
            frontier_phi_13_35_ladder = _2479.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2479.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2479.x * cbModelParam._m0[1u].y;
        }
        _1890 = frontier_phi_13_35_ladder_2;
        _1892 = frontier_phi_13_35_ladder_1;
        _1894 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1878 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1004, _1005, _1006), _1810);
        _1890 = _1878.x * cbModelParam._m0[1u].y;
        _1892 = _1878.y * cbModelParam._m0[1u].y;
        _1894 = _1878.z * cbModelParam._m0[1u].y;
    }
    float _1898 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _849);
    float _1899 = isnan(_1898) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1898 : min(cbModelParam._m0[25u].w, _1898));
    float _1989;
    float _1991;
    float _1993;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1953 = fma(_1065, cbModelParam._m0[21u].z, fma(_1061, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1057)) + cbModelParam._m0[21u].w;
        float _1957 = fma(_1065, cbModelParam._m0[22u].z, fma(_1061, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1057)) + cbModelParam._m0[22u].w;
        float _1961 = fma(_1065, cbModelParam._m0[23u].z, fma(_1061, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1057)) + cbModelParam._m0[23u].w;
        float _1964 = fma(_1006, cbModelParam._m0[21u].z, fma(_1005, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1004));
        float _1967 = fma(_1006, cbModelParam._m0[22u].z, fma(_1005, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1004));
        float _1970 = fma(_1006, cbModelParam._m0[23u].z, fma(_1005, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1004));
        float _2108;
        if (_1964 > 0.0)
        {
            _2108 = abs((1.0 - _1953) / _1964);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1964 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1953 + 1.0) / _1964);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2108 = frontier_phi_25_21_ladder;
        }
        float _2373;
        if (_1967 > 0.0)
        {
            _2373 = abs((1.0 - _1957) / _1967);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1967 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1957 + 1.0) / _1967);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2373 = frontier_phi_37_32_ladder;
        }
        float _2578;
        if (_1970 > 0.0)
        {
            _2578 = abs((1.0 - _1961) / _1970);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1970 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1961 + 1.0) / _1970);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2578 = frontier_phi_46_43_ladder;
        }
        float _2580 = isnan(_2373) ? _2108 : (isnan(_2108) ? _2373 : min(_2108, _2373));
        float _2581 = isnan(_2578) ? _2580 : (isnan(_2580) ? _2578 : min(_2580, _2578));
        float _2585 = (_2581 * _1964) + _1953;
        float _2586 = (_2581 * _1967) + _1957;
        float _2587 = (_2581 * _1970) + _1961;
        float _2588 = _2581 * 9.9999997473787516355514526367188e-05;
        float _2589 = (-1.0) - _2588;
        float _2591 = _2588 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2587 > _2591) || ((_2587 < _2589) || ((_2586 > _2591) || ((_2586 < _2589) || ((_2585 < _2589) || (_2585 > _2591))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2786 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2587, cbModelParam._m0[17u].z, fma(_2586, cbModelParam._m0[17u].y, _2585 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2587, cbModelParam._m0[18u].z, fma(_2586, cbModelParam._m0[18u].y, _2585 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2587, cbModelParam._m0[19u].z, fma(_2586, cbModelParam._m0[19u].y, _2585 * cbModelParam._m0[19u].x))), _1899);
            frontier_phi_22_46_ladder = _2786.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2786.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2786.x * cbModelParam._m0[1u].z;
        }
        _1989 = frontier_phi_22_46_ladder_2;
        _1991 = frontier_phi_22_46_ladder_1;
        _1993 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1973 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1004, _1005, _1006), _1899);
        _1989 = _1973.x * cbModelParam._m0[1u].z;
        _1991 = _1973.y * cbModelParam._m0[1u].z;
        _1993 = _1973.z * cbModelParam._m0[1u].z;
    }
    float _2005 = ((((1.0 - _1025) * ((_1012 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_1025 * _1012)) * _996;
    float _2006 = _2005 * ((cbModelParam._m0[1u].w * (_1989 - _1890)) + _1890);
    float _2007 = _2005 * ((cbModelParam._m0[1u].w * (_1991 - _1892)) + _1892);
    float _2008 = _2005 * ((cbModelParam._m0[1u].w * (_1993 - _1894)) + _1894);
    float _2011 = fma(_2008, cbSceneParam._m0[89u].z, fma(_2007, cbSceneParam._m0[89u].y, _2006 * cbSceneParam._m0[89u].x));
    float _2014 = fma(_2008, cbSceneParam._m0[90u].z, fma(_2007, cbSceneParam._m0[90u].y, _2006 * cbSceneParam._m0[90u].x));
    float _2017 = fma(_2008, cbSceneParam._m0[91u].z, fma(_2007, cbSceneParam._m0[91u].y, _2006 * cbSceneParam._m0[91u].x));
    uvec4 _2027 = floatBitsToUint(cbInstanceData._m0[_242 + 5u]);
    uint _2029 = _2027.x * 14u;
    uint _2030 = _2029 + 13u;
    float _2037 = _996 + (-1.0);
    float _2042 = (cbLight._m0[_2030].x * _2037) + 1.0;
    float _2043 = (cbLight._m0[_2030].y * _2037) + 1.0;
    float _2044 = (cbLight._m0[_2030].z * _2037) + 1.0;
    float _2045 = (cbLight._m0[_2030].w * _2037) + 1.0;
    uint _2046 = _2029 + 5u;
    float _2052 = isnan(1.0) ? _2043 : (isnan(_2043) ? 1.0 : min(_2043, 1.0));
    uint _2056 = _2029 + 4u;
    float _2062 = isnan(1.0) ? _2042 : (isnan(_2042) ? 1.0 : min(_2042, 1.0));
    uint _2066 = _2029 | 1u;
    float _2077 = dot(vec3(cbLight._m0[_2029].xyz), vec3(_846, _847, _848));
    float _2080 = dot(vec3(cbLight._m0[_2066].xyz), vec3(_846, _847, _848));
    float _4203 = isnan(0.0) ? _2077 : (isnan(_2077) ? 0.0 : max(_2077, 0.0));
    float _4214 = isnan(0.0) ? _2080 : (isnan(_2080) ? 0.0 : max(_2080, 0.0));
    float _2085 = (isnan(1.0) ? _4203 : (isnan(_4203) ? 1.0 : min(_4203, 1.0))) * 0.3183098733425140380859375;
    float _2087 = (isnan(1.0) ? _4214 : (isnan(_4214) ? 1.0 : min(_4214, 1.0))) * 0.3183098733425140380859375;
    float _2094 = ((cbLight._m0[_2046].x * _2052) * _2087) + ((cbLight._m0[_2056].x * _2062) * _2085);
    float _2095 = ((_2052 * cbLight._m0[_2046].y) * _2087) + ((_2062 * cbLight._m0[_2056].y) * _2085);
    float _2096 = ((_2052 * cbLight._m0[_2046].z) * _2087) + ((_2062 * cbLight._m0[_2056].z) * _2085);
    uvec4 _2100 = floatBitsToUint(cbLight._m0[_2029 + 12u]);
    bool _2102 = _2100.x == 0u;
    float _2113;
    float _2115;
    float _2117;
    if (_2102)
    {
        _2113 = _2094;
        _2115 = _2095;
        _2117 = _2096;
    }
    else
    {
        uint _2121 = _2029 + 6u;
        float _2137 = (dot(vec3(cbLight._m0[_2029 + 2u].xyz), vec3(_846, _847, _848)) * 0.5) + 0.5;
        float _2138 = _2137 * _2137;
        float _4225 = isnan(0.0) ? _2138 : (isnan(_2138) ? 0.0 : max(_2138, 0.0));
        float _2139 = isnan(1.0) ? _4225 : (isnan(_4225) ? 1.0 : min(_4225, 1.0));
        float _2140 = isnan(1.0) ? _2044 : (isnan(_2044) ? 1.0 : min(_2044, 1.0));
        _2113 = (((cbLight._m0[_2121].x * 0.3183098733425140380859375) * _2139) * _2140) + _2094;
        _2115 = (((cbLight._m0[_2121].y * 0.3183098733425140380859375) * _2139) * _2140) + _2095;
        _2117 = (((cbLight._m0[_2121].z * 0.3183098733425140380859375) * _2139) * _2140) + _2096;
    }
    bool _2120 = _2100.y == 0u;
    float _2158;
    float _2160;
    float _2162;
    if (_2120)
    {
        _2158 = _2113;
        _2160 = _2115;
        _2162 = _2117;
    }
    else
    {
        uint _2317 = _2029 + 7u;
        float _2333 = (dot(vec3(cbLight._m0[_2029 + 3u].xyz), vec3(_846, _847, _848)) * 0.5) + 0.5;
        float _2334 = _2333 * _2333;
        float _4241 = isnan(0.0) ? _2334 : (isnan(_2334) ? 0.0 : max(_2334, 0.0));
        float _2335 = isnan(1.0) ? _4241 : (isnan(_4241) ? 1.0 : min(_4241, 1.0));
        float _2336 = isnan(1.0) ? _2045 : (isnan(_2045) ? 1.0 : min(_2045, 1.0));
        _2158 = (((cbLight._m0[_2317].x * 0.3183098733425140380859375) * _2335) * _2336) + _2113;
        _2160 = (((cbLight._m0[_2317].y * 0.3183098733425140380859375) * _2335) * _2336) + _2115;
        _2162 = (((cbLight._m0[_2317].z * 0.3183098733425140380859375) * _2335) * _2336) + _2117;
    }
    uint _2165 = _2029 + 8u;
    float _2178 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2029].w)) * _849) * 0.949999988079071044921875);
    float _2179 = _2178 * _2178;
    float _2180 = cbLight._m0[_2029].x + _925;
    float _2181 = cbLight._m0[_2029].y + _926;
    float _2182 = cbLight._m0[_2029].z + _927;
    float _2186 = inversesqrt(dot(vec3(_2180, _2181, _2182), vec3(_2180, _2181, _2182)));
    float _2187 = _2186 * _2180;
    float _2188 = _2186 * _2181;
    float _2189 = _2186 * _2182;
    float _2190 = dot(vec3(_846, _847, _848), vec3(cbLight._m0[_2029].xyz));
    float _4257 = isnan(0.0) ? _2190 : (isnan(_2190) ? 0.0 : max(_2190, 0.0));
    float _2193 = isnan(1.0) ? _4257 : (isnan(_4257) ? 1.0 : min(_4257, 1.0));
    float _4268 = isnan(0.0) ? _997 : (isnan(_997) ? 0.0 : max(_997, 0.0));
    float _2194 = isnan(1.0) ? _4268 : (isnan(_4268) ? 1.0 : min(_4268, 1.0));
    float _2195 = dot(vec3(_846, _847, _848), vec3(_2187, _2188, _2189));
    float _4279 = isnan(0.0) ? _2195 : (isnan(_2195) ? 0.0 : max(_2195, 0.0));
    float _2198 = isnan(1.0) ? _4279 : (isnan(_4279) ? 1.0 : min(_4279, 1.0));
    float _2199 = dot(vec3(cbLight._m0[_2029].xyz), vec3(_2187, _2188, _2189));
    float _4290 = isnan(0.0) ? _2199 : (isnan(_2199) ? 0.0 : max(_2199, 0.0));
    float _2203 = _2179 * _2179;
    float _2207 = ((_2198 * _2198) * (_2203 + (-1.0))) + 1.0;
    float _2218 = (exp2(log2(1.0 - (isnan(1.0) ? _4290 : (isnan(_4290) ? 1.0 : min(_4290, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2219 = 1.0 - _2179;
    float _2230 = (0.5 / (((_2194 * ((_2193 * _2219) + _2179)) + 9.9999999392252902907785028219223e-09) + (((_2194 * _2219) + _2179) * _2193))) * _2193;
    float _4301 = isnan(0.0) ? _2230 : (isnan(_2230) ? 0.0 : max(_2230, 0.0));
    float _2232 = (isnan(1.0) ? _4301 : (isnan(_4301) ? 1.0 : min(_4301, 1.0))) * (_2203 / ((_2207 * _2207) * 3.141590118408203125));
    uint _2243 = _2029 + 9u;
    float _2254 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2066].w)) * _849) * 0.949999988079071044921875);
    float _2255 = _2254 * _2254;
    float _2256 = cbLight._m0[_2066].x + _925;
    float _2257 = cbLight._m0[_2066].y + _926;
    float _2258 = cbLight._m0[_2066].z + _927;
    float _2262 = inversesqrt(dot(vec3(_2256, _2257, _2258), vec3(_2256, _2257, _2258)));
    float _2263 = _2262 * _2256;
    float _2264 = _2262 * _2257;
    float _2265 = _2262 * _2258;
    float _2266 = dot(vec3(_846, _847, _848), vec3(cbLight._m0[_2066].xyz));
    float _4312 = isnan(0.0) ? _2266 : (isnan(_2266) ? 0.0 : max(_2266, 0.0));
    float _2269 = isnan(1.0) ? _4312 : (isnan(_4312) ? 1.0 : min(_4312, 1.0));
    float _2270 = dot(vec3(_846, _847, _848), vec3(_2263, _2264, _2265));
    float _4323 = isnan(0.0) ? _2270 : (isnan(_2270) ? 0.0 : max(_2270, 0.0));
    float _2273 = isnan(1.0) ? _4323 : (isnan(_4323) ? 1.0 : min(_4323, 1.0));
    float _2274 = dot(vec3(cbLight._m0[_2066].xyz), vec3(_2263, _2264, _2265));
    float _4334 = isnan(0.0) ? _2274 : (isnan(_2274) ? 0.0 : max(_2274, 0.0));
    float _2278 = _2255 * _2255;
    float _2282 = ((_2273 * _2273) * (_2278 + (-1.0))) + 1.0;
    float _2291 = (exp2(log2(1.0 - (isnan(1.0) ? _4334 : (isnan(_4334) ? 1.0 : min(_4334, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2292 = 1.0 - _2255;
    float _2302 = (0.5 / (((_2194 * ((_2269 * _2292) + _2255)) + 9.9999999392252902907785028219223e-09) + (((_2194 * _2292) + _2255) * _2269))) * _2269;
    float _4345 = isnan(0.0) ? _2302 : (isnan(_2302) ? 0.0 : max(_2302, 0.0));
    float _2304 = (isnan(1.0) ? _4345 : (isnan(_4345) ? 1.0 : min(_4345, 1.0))) * (_2278 / ((_2282 * _2282) * 3.141590118408203125));
    float _2314 = (((_2291 * cbLight._m0[_2243].x) * _2304) * _2052) + (((_2218 * cbLight._m0[_2165].x) * _2232) * _2062);
    float _2315 = (((_2291 * cbLight._m0[_2243].y) * _2304) * _2052) + (((_2218 * cbLight._m0[_2165].y) * _2232) * _2062);
    float _2316 = (((_2291 * cbLight._m0[_2243].z) * _2304) * _2052) + (((_2218 * cbLight._m0[_2165].z) * _2232) * _2062);
    float _2378;
    float _2380;
    float _2382;
    if (_2102)
    {
        _2378 = _2314;
        _2380 = _2315;
        _2382 = _2316;
    }
    else
    {
        uint _2384 = _2029 + 2u;
        uint _2388 = _2029 + 10u;
        float _2402 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2384].w)) * _849) * 0.949999988079071044921875);
        float _2403 = _2402 * _2402;
        float _2404 = cbLight._m0[_2384].x + _925;
        float _2405 = cbLight._m0[_2384].y + _926;
        float _2406 = cbLight._m0[_2384].z + _927;
        float _2410 = inversesqrt(dot(vec3(_2404, _2405, _2406), vec3(_2404, _2405, _2406)));
        float _2411 = _2410 * _2404;
        float _2412 = _2410 * _2405;
        float _2413 = _2410 * _2406;
        float _2414 = dot(vec3(_846, _847, _848), vec3(cbLight._m0[_2384].xyz));
        float _4356 = isnan(0.0) ? _2414 : (isnan(_2414) ? 0.0 : max(_2414, 0.0));
        float _2417 = isnan(1.0) ? _4356 : (isnan(_4356) ? 1.0 : min(_4356, 1.0));
        float _2418 = dot(vec3(_846, _847, _848), vec3(_2411, _2412, _2413));
        float _4367 = isnan(0.0) ? _2418 : (isnan(_2418) ? 0.0 : max(_2418, 0.0));
        float _2421 = isnan(1.0) ? _4367 : (isnan(_4367) ? 1.0 : min(_4367, 1.0));
        float _2422 = dot(vec3(cbLight._m0[_2384].xyz), vec3(_2411, _2412, _2413));
        float _4378 = isnan(0.0) ? _2422 : (isnan(_2422) ? 0.0 : max(_2422, 0.0));
        float _2426 = _2403 * _2403;
        float _2430 = ((_2421 * _2421) * (_2426 + (-1.0))) + 1.0;
        float _2439 = (exp2(log2(1.0 - (isnan(1.0) ? _4378 : (isnan(_4378) ? 1.0 : min(_4378, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2440 = 1.0 - _2403;
        float _2450 = (0.5 / (((_2194 * ((_2417 * _2440) + _2403)) + 9.9999999392252902907785028219223e-09) + (((_2194 * _2440) + _2403) * _2417))) * _2417;
        float _4389 = isnan(0.0) ? _2450 : (isnan(_2450) ? 0.0 : max(_2450, 0.0));
        float _2452 = (isnan(1.0) ? _4389 : (isnan(_4389) ? 1.0 : min(_4389, 1.0))) * (_2426 / ((_2430 * _2430) * 3.141590118408203125));
        float _2453 = isnan(1.0) ? _2044 : (isnan(_2044) ? 1.0 : min(_2044, 1.0));
        _2378 = (((_2439 * cbLight._m0[_2388].x) * _2452) * _2453) + _2314;
        _2380 = (((_2439 * cbLight._m0[_2388].y) * _2452) * _2453) + _2315;
        _2382 = (((_2439 * cbLight._m0[_2388].z) * _2452) * _2453) + _2316;
    }
    float _2488;
    float _2490;
    float _2492;
    if (_2120)
    {
        _2488 = _2378;
        _2490 = _2380;
        _2492 = _2382;
    }
    else
    {
        uint _2499 = _2029 + 3u;
        uint _2503 = _2029 + 11u;
        float _2517 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2499].w)) * _849) * 0.949999988079071044921875);
        float _2518 = _2517 * _2517;
        float _2519 = cbLight._m0[_2499].x + _925;
        float _2520 = cbLight._m0[_2499].y + _926;
        float _2521 = cbLight._m0[_2499].z + _927;
        float _2525 = inversesqrt(dot(vec3(_2519, _2520, _2521), vec3(_2519, _2520, _2521)));
        float _2526 = _2525 * _2519;
        float _2527 = _2525 * _2520;
        float _2528 = _2525 * _2521;
        float _2529 = dot(vec3(_846, _847, _848), vec3(cbLight._m0[_2499].xyz));
        float _4405 = isnan(0.0) ? _2529 : (isnan(_2529) ? 0.0 : max(_2529, 0.0));
        float _2532 = isnan(1.0) ? _4405 : (isnan(_4405) ? 1.0 : min(_4405, 1.0));
        float _2533 = dot(vec3(_846, _847, _848), vec3(_2526, _2527, _2528));
        float _4416 = isnan(0.0) ? _2533 : (isnan(_2533) ? 0.0 : max(_2533, 0.0));
        float _2536 = isnan(1.0) ? _4416 : (isnan(_4416) ? 1.0 : min(_4416, 1.0));
        float _2537 = dot(vec3(cbLight._m0[_2499].xyz), vec3(_2526, _2527, _2528));
        float _4427 = isnan(0.0) ? _2537 : (isnan(_2537) ? 0.0 : max(_2537, 0.0));
        float _2541 = _2518 * _2518;
        float _2545 = ((_2536 * _2536) * (_2541 + (-1.0))) + 1.0;
        float _2554 = (exp2(log2(1.0 - (isnan(1.0) ? _4427 : (isnan(_4427) ? 1.0 : min(_4427, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2555 = 1.0 - _2518;
        float _2565 = (0.5 / (((_2194 * ((_2532 * _2555) + _2518)) + 9.9999999392252902907785028219223e-09) + (((_2194 * _2555) + _2518) * _2532))) * _2532;
        float _4438 = isnan(0.0) ? _2565 : (isnan(_2565) ? 0.0 : max(_2565, 0.0));
        float _2567 = (isnan(1.0) ? _4438 : (isnan(_4438) ? 1.0 : min(_4438, 1.0))) * (_2541 / ((_2545 * _2545) * 3.141590118408203125));
        float _2568 = isnan(1.0) ? _2045 : (isnan(_2045) ? 1.0 : min(_2045, 1.0));
        _2488 = (((_2554 * cbLight._m0[_2503].x) * _2567) * _2568) + _2378;
        _2490 = (((_2554 * cbLight._m0[_2503].y) * _2567) * _2568) + _2380;
        _2492 = (((_2554 * cbLight._m0[_2503].z) * _2567) * _2568) + _2382;
    }
    float _2703;
    float _2705;
    float _2707;
    float _2709;
    float _2711;
    float _2713;
    if (_2027.y == 0u)
    {
        float _2643 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2644 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2643;
        float _2645 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2643;
        float _2646 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2643;
        uvec4 _2658 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2659 = _2658.x;
        uint _2670 = uint((float(_2658.y) * floor(float(uint(cbSceneParam._m0[85u].y * _934) / _2659))) + floor(float(uint(cbSceneParam._m0[85u].x * _933) / _2659)));
        float _2680 = (log2(_2646 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2681 = isnan(0.0) ? _2680 : (isnan(_2680) ? 0.0 : max(_2680, 0.0));
        uint _2684 = uint(isnan(14.0) ? _2681 : (isnan(_2681) ? 14.0 : min(_2681, 14.0)));
        uvec4 _2689 = texelFetch(g_lightClusterGridBuffer, int(((_2684 << 2u) + (_2670 << 6u)) >> 2u));
        uint _2690 = _2689.x;
        uint _2691 = _2658.z;
        float _2791;
        float _2793;
        float _2795;
        float _2797;
        float _2799;
        float _2801;
        if (((((1u << ((_2691 >> 4u) & 15u)) + 4294967295u) & _2690) == 0u) || ((_2691 & 240u) == 0u))
        {
            _2791 = 0.0;
            _2793 = 0.0;
            _2795 = 0.0;
            _2797 = 0.0;
            _2799 = 0.0;
            _2801 = 0.0;
        }
        else
        {
            float _2792;
            float _2794;
            float _2796;
            float _2798;
            float _2800;
            float _2802;
            float _2936 = 0.0;
            float _2937 = 0.0;
            float _2938 = 0.0;
            float _2939 = 0.0;
            float _2940 = 0.0;
            float _2941 = 0.0;
            uint _2942 = 0u;
            uint _2951;
            bool _2952;
            for (;;)
            {
                _2951 = texelFetch(g_lightClassification, int((((_2684 << 5u) + (_2670 << 9u)) + (_2942 << 2u)) >> 2u)).x;
                _2952 = _2951 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2952)
                {
                    frontier_phi_61_pred = _2936;
                    frontier_phi_61_pred_1 = _2941;
                    frontier_phi_61_pred_2 = _2940;
                    frontier_phi_61_pred_3 = _2939;
                    frontier_phi_61_pred_4 = _2938;
                    frontier_phi_61_pred_5 = _2937;
                }
                else
                {
                    float _3060;
                    float _3061;
                    float _3062;
                    float _3063;
                    float _3064;
                    float _3065;
                    uint _3066;
                    _3060 = _2936;
                    _3061 = _2937;
                    _3062 = _2938;
                    _3063 = _2939;
                    _3064 = _2940;
                    _3065 = _2941;
                    _3066 = _2951;
                    float _2992;
                    float _2993;
                    float _2994;
                    float _2995;
                    float _2996;
                    float _2997;
                    for (;;)
                    {
                        uint _3070 = uint(findLSB(_3066)) + (_2942 << 5u);
                        uint _3067 = (_3066 + 4294967295u) & _3066;
                        uint _3072 = _3070 * 48u;
                        vec4 _3086 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3072)).x, texelFetch(g_PointLightRenderingBuffer, int(_3072 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3072 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3072 + 3u)).x));
                        uint _3092 = (_3070 * 48u) + 4u;
                        vec4 _3105 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3092)).x, texelFetch(g_PointLightRenderingBuffer, int(_3092 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3092 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3092 + 3u)).x));
                        uint _3111 = (_3070 * 48u) + 8u;
                        vec3 _3122 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3111)).x, texelFetch(g_PointLightRenderingBuffer, int(_3111 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3111 + 2u)).x));
                        float _3126 = _3086.x - _2644;
                        float _3127 = _3086.y - _2645;
                        float _3128 = _3086.z - _2646;
                        float _3129 = dot(vec3(_3126, _3127, _3128), vec3(_3126, _3127, _3128));
                        float _3132 = inversesqrt(_3129);
                        float _3133 = _3132 * _3126;
                        float _3134 = _3132 * _3127;
                        float _3135 = _3132 * _3128;
                        float _3136 = dot(vec3(_952, _955, _958), vec3(_3133, _3134, _3135));
                        float _3141 = 1.0 - (_3129 * _3086.w);
                        float _4464 = isnan(0.0) ? _3141 : (isnan(_3141) ? 0.0 : max(_3141, 0.0));
                        float _3142 = isnan(1.0) ? _4464 : (isnan(_4464) ? 1.0 : min(_4464, 1.0));
                        float _3143 = sqrt(_3129) * _3105.w;
                        float _3146 = 1.39999997615814208984375 / (_3143 + 1.39999997615814208984375);
                        float _3147 = _3146 * _3146;
                        float _3150 = ((1.0 - _3147) * _3136) + _3147;
                        float _3153 = _3143 * _3143;
                        float _3157 = ((isnan(0.0) ? _3150 : (isnan(_3150) ? 0.0 : max(_3150, 0.0))) * _3142) / ((_3153 * 0.699999988079071044921875) + 1.0);
                        float _3161 = (-0.0) - _2644;
                        float _3162 = (-0.0) - _2645;
                        float _3163 = (-0.0) - _2646;
                        float _3167 = inversesqrt(dot(vec3(_3161, _3162, _3163), vec3(_3161, _3162, _3163)));
                        float _3168 = _3167 * _3161;
                        float _3169 = _3167 * _3162;
                        float _3170 = _3167 * _3163;
                        float _3178 = exp2(log2(1.0 / ((_3153 * 3.5) + 5.0)) * 0.25);
                        float _3179 = 1.0 - _1012;
                        float _3186 = sqrt(1.0 - ((1.0 - (_3179 * _3179)) * (1.0 - (_3178 * _3178))));
                        float _3187 = _3186 * _3186;
                        float _3188 = _3187 * _3187;
                        float _3189 = _3168 + _3133;
                        float _3190 = _3169 + _3134;
                        float _3191 = _3170 + _3135;
                        float _3195 = inversesqrt(dot(vec3(_3189, _3190, _3191), vec3(_3189, _3190, _3191)));
                        float _3199 = dot(vec3(_952, _955, _958), vec3(_3168, _3169, _3170));
                        float _4480 = isnan(0.0) ? _3199 : (isnan(_3199) ? 0.0 : max(_3199, 0.0));
                        float _3202 = isnan(1.0) ? _4480 : (isnan(_4480) ? 1.0 : min(_4480, 1.0));
                        float _3203 = dot(vec3(_952, _955, _958), vec3(_3195 * _3189, _3195 * _3190, _3195 * _3191));
                        float _4491 = isnan(0.0) ? _3203 : (isnan(_3203) ? 0.0 : max(_3203, 0.0));
                        float _3206 = isnan(1.0) ? _4491 : (isnan(_4491) ? 1.0 : min(_4491, 1.0));
                        float _3210 = ((_3206 * _3206) * (_3188 + (-1.0))) + 1.0;
                        float _3211 = _3146 * _3187;
                        float _3212 = _3211 * _3211;
                        float _3215 = ((1.0 - _3212) * _3136) + _3212;
                        float _4502 = isnan(0.0) ? _3215 : (isnan(_3215) ? 0.0 : max(_3215, 0.0));
                        float _3216 = isnan(1.0) ? _4502 : (isnan(_4502) ? 1.0 : min(_4502, 1.0));
                        float _3217 = 1.0 - _3187;
                        float _3227 = (0.5 / (((_3216 * ((_3202 * _3217) + _3187)) + 9.9999999392252902907785028219223e-09) + (((_3216 * _3217) + _3187) * _3202))) * _3216;
                        float _4513 = isnan(0.0) ? _3227 : (isnan(_3227) ? 0.0 : max(_3227, 0.0));
                        float _3238 = (((_3188 * 3.1415927410125732421875) * (isnan(1.0) ? _4513 : (isnan(_4513) ? 1.0 : min(_4513, 1.0)))) / ((_3210 * _3210) * ((_3153 * 2.1991131305694580078125) + 3.141590118408203125))) * _3142;
                        _2995 = (_3157 * _3105.x) + _3063;
                        _2996 = (_3157 * _3105.y) + _3064;
                        _2997 = (_3157 * _3105.z) + _3065;
                        _2992 = (_3238 * _3122.x) + _3060;
                        _2993 = (_3238 * _3122.y) + _3061;
                        _2994 = (_3238 * _3122.z) + _3062;
                        if (_3067 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3060 = _2992;
                            _3061 = _2993;
                            _3062 = _2994;
                            _3063 = _2995;
                            _3064 = _2996;
                            _3065 = _2997;
                            _3066 = _3067;
                        }
                    }
                    frontier_phi_61_pred = _2992;
                    frontier_phi_61_pred_1 = _2997;
                    frontier_phi_61_pred_2 = _2996;
                    frontier_phi_61_pred_3 = _2995;
                    frontier_phi_61_pred_4 = _2994;
                    frontier_phi_61_pred_5 = _2993;
                }
                _2792 = frontier_phi_61_pred;
                _2802 = frontier_phi_61_pred_1;
                _2800 = frontier_phi_61_pred_2;
                _2798 = frontier_phi_61_pred_3;
                _2796 = frontier_phi_61_pred_4;
                _2794 = frontier_phi_61_pred_5;
                uint _2943 = _2942 + 1u;
                if (_2943 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2936 = _2792;
                    _2937 = _2794;
                    _2938 = _2796;
                    _2939 = _2798;
                    _2940 = _2800;
                    _2941 = _2802;
                    _2942 = _2943;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2791 = _2792;
            _2793 = _2794;
            _2795 = _2796;
            _2797 = _2798;
            _2799 = _2800;
            _2801 = _2802;
        }
        uvec4 _2805 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2806 = _2805.z;
        uint _2808 = (_2806 >> 8u) & 15u;
        float _2904;
        float _2906;
        float _2908;
        float _2910;
        float _2912;
        float _2914;
        if (((4294967295u << _2808) & _2690) == 0u)
        {
            _2904 = _2791;
            _2906 = _2793;
            _2908 = _2795;
            _2910 = _2797;
            _2912 = _2799;
            _2914 = _2801;
        }
        else
        {
            float _2929 = inversesqrt(dot(vec3(_2644, _2645, _2646), vec3(_2644, _2645, _2646)));
            float _2930 = _2929 * _2644;
            float _2931 = _2929 * _2645;
            float _2932 = _2929 * _2646;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2808 < ((_2806 >> 12u) & 15u))
            {
                float _2905;
                float _2907;
                float _2909;
                float _2911;
                float _2913;
                float _2915;
                float _3043 = _2791;
                float _3044 = _2793;
                float _3045 = _2795;
                float _3046 = _2797;
                float _3047 = _2799;
                float _3048 = _2801;
                uint _3049 = _2808;
                uint _3058;
                bool _3059;
                for (;;)
                {
                    _3058 = texelFetch(g_lightClassification, int((((_2684 << 5u) + (_2670 << 9u)) + (_3049 << 2u)) >> 2u)).x;
                    _3059 = _3058 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_3059)
                    {
                        frontier_phi_67_pred = _3046;
                        frontier_phi_67_pred_1 = _3047;
                        frontier_phi_67_pred_2 = _3048;
                        frontier_phi_67_pred_3 = _3045;
                        frontier_phi_67_pred_4 = _3044;
                        frontier_phi_67_pred_5 = _3043;
                    }
                    else
                    {
                        float _3243;
                        float _3244;
                        float _3245;
                        float _3246;
                        float _3247;
                        float _3248;
                        float _3536;
                        float _3537;
                        float _3538;
                        float _3539;
                        float _3540;
                        float _3541;
                        float _3256 = _3043;
                        float _3257 = _3044;
                        float _3258 = _3045;
                        float _3259 = _3046;
                        float _3260 = _3047;
                        float _3261 = _3048;
                        uint _3262 = _3058;
                        uint _3263;
                        vec4 _3288;
                        float _3289;
                        vec4 _3304;
                        vec3 _3316;
                        vec4 _3331;
                        vec4 _3346;
                        float _3392;
                        bool _3393;
                        for (;;)
                        {
                            uint _3273 = ((_3049 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3262));
                            _3263 = (_3262 + 4294967295u) & _3262;
                            uint _3275 = _3273 * 40u;
                            _3288 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3275)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3275 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3275 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3275 + 3u)).x));
                            _3289 = _3288.w;
                            uint _3291 = (_3273 * 40u) + 4u;
                            _3304 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3291)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3291 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3291 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3291 + 3u)).x));
                            uint _3306 = (_3273 * 40u) + 8u;
                            _3316 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3306)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3306 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3306 + 2u)).x));
                            uint _3318 = (_3273 * 40u) + 16u;
                            _3331 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3318)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3318 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3318 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3318 + 3u)).x));
                            uint _3333 = (_3273 * 40u) + 20u;
                            _3346 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3333)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3333 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3333 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3333 + 3u)).x));
                            uint _3348 = (_3273 * 40u) + 24u;
                            vec4 _3361 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3348)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3348 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3348 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3348 + 3u)).x));
                            uint _3367 = (_3273 * 40u) + 28u;
                            vec4 _3380 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3367)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3367 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3367 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3367 + 3u)).x));
                            _3392 = fma(_2646, _3380.z, fma(_2645, _3380.y, _3380.x * _2644)) + _3380.w;
                            _3393 = !((fma(_2646, _3361.z, fma(_2645, _3361.y, _3361.x * _2644)) + _3361.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3393)
                            {
                                float _3420 = _3288.x - _2644;
                                float _3421 = _3288.y - _2645;
                                float _3422 = _3288.z - _2646;
                                float _3423 = dot(vec3(_3420, _3421, _3422), vec3(_3420, _3421, _3422));
                                float _3426 = inversesqrt(_3423);
                                float _3427 = _3426 * _3420;
                                float _3428 = _3426 * _3421;
                                float _3429 = _3426 * _3422;
                                float _3433 = 1.0 - (_3423 / (_3289 * _3289));
                                float _4524 = isnan(0.0) ? _3433 : (isnan(_3433) ? 0.0 : max(_3433, 0.0));
                                float _3434 = isnan(1.0) ? _4524 : (isnan(_4524) ? 1.0 : min(_4524, 1.0));
                                float _3438 = sqrt(_3423) * _3304.w;
                                float _3440 = 1.39999997615814208984375 / (_3438 + 1.39999997615814208984375);
                                float _3441 = _3440 * _3440;
                                float _3444 = ((1.0 - _3441) * dot(vec3(_3427, _3428, _3429), vec3(_952, _955, _958))) + _3441;
                                float _3447 = _3438 * _3438;
                                float _3451 = (fma(_2646, _3331.z, fma(_2645, _3331.y, _3331.x * _2644)) + _3331.w) / _3392;
                                float _3452 = (fma(_2646, _3346.z, fma(_2645, _3346.y, _3346.x * _2644)) + _3346.w) / _3392;
                                float _3456 = 1.0 - dot(vec2(_3451, _3452), vec2(_3451, _3452));
                                float _4540 = isnan(0.0) ? _3456 : (isnan(_3456) ? 0.0 : max(_3456, 0.0));
                                float _3457 = isnan(1.0) ? _4540 : (isnan(_4540) ? 1.0 : min(_4540, 1.0));
                                float _3458 = _3457 * (((isnan(0.0) ? _3444 : (isnan(_3444) ? 0.0 : max(_3444, 0.0))) * _3434) / ((_3447 * 0.699999988079071044921875) + 1.0));
                                float _3470 = exp2(log2(1.0 / ((_3447 * 3.5) + 5.0)) * 0.25);
                                float _3471 = 1.0 - _1012;
                                float _3478 = sqrt(1.0 - ((1.0 - (_3471 * _3471)) * (1.0 - (_3470 * _3470))));
                                float _3479 = _3478 * _3478;
                                float _3480 = _3479 * _3479;
                                float _3481 = _3427 - _2930;
                                float _3482 = _3428 - _2931;
                                float _3483 = _3429 - _2932;
                                float _3487 = inversesqrt(dot(vec3(_3481, _3482, _3483), vec3(_3481, _3482, _3483)));
                                float _3491 = dot(vec3(_952, _955, _958), vec3((-0.0) - _2930, (-0.0) - _2931, (-0.0) - _2932));
                                float _4551 = isnan(0.0) ? _3491 : (isnan(_3491) ? 0.0 : max(_3491, 0.0));
                                float _3494 = isnan(1.0) ? _4551 : (isnan(_4551) ? 1.0 : min(_4551, 1.0));
                                float _3495 = dot(vec3(_952, _955, _958), vec3(_3487 * _3481, _3487 * _3482, _3487 * _3483));
                                float _4562 = isnan(0.0) ? _3495 : (isnan(_3495) ? 0.0 : max(_3495, 0.0));
                                float _3498 = isnan(1.0) ? _4562 : (isnan(_4562) ? 1.0 : min(_4562, 1.0));
                                float _3502 = ((_3498 * _3498) * (_3480 + (-1.0))) + 1.0;
                                float _3503 = _3440 * _3479;
                                float _3504 = _3503 * _3503;
                                float _3510 = ((1.0 - _3504) * dot(vec3(_952, _955, _958), vec3(_3427, _3428, _3429))) + _3504;
                                float _4573 = isnan(0.0) ? _3510 : (isnan(_3510) ? 0.0 : max(_3510, 0.0));
                                float _3511 = isnan(1.0) ? _4573 : (isnan(_4573) ? 1.0 : min(_4573, 1.0));
                                float _3512 = 1.0 - _3479;
                                float _3522 = (0.5 / (((_3511 * ((_3494 * _3512) + _3479)) + 9.9999999392252902907785028219223e-09) + (((_3511 * _3512) + _3479) * _3494))) * _3511;
                                float _4584 = isnan(0.0) ? _3522 : (isnan(_3522) ? 0.0 : max(_3522, 0.0));
                                float _3532 = (_3457 * _3434) * (((_3480 * 3.1415927410125732421875) * (isnan(1.0) ? _4584 : (isnan(_4584) ? 1.0 : min(_4584, 1.0)))) / ((_3502 * _3502) * ((_3447 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3532 * _3316.x;
                                frontier_phi_73_pred_1 = _3532 * _3316.y;
                                frontier_phi_73_pred_2 = _3458 * _3304.z;
                                frontier_phi_73_pred_3 = _3458 * _3304.y;
                                frontier_phi_73_pred_4 = _3458 * _3304.x;
                                frontier_phi_73_pred_5 = _3532 * _3316.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3536 = frontier_phi_73_pred;
                            _3537 = frontier_phi_73_pred_1;
                            _3541 = frontier_phi_73_pred_2;
                            _3540 = frontier_phi_73_pred_3;
                            _3539 = frontier_phi_73_pred_4;
                            _3538 = frontier_phi_73_pred_5;
                            _3246 = _3539 + _3259;
                            _3247 = _3540 + _3260;
                            _3248 = _3541 + _3261;
                            _3243 = _3536 + _3256;
                            _3244 = _3537 + _3257;
                            _3245 = _3538 + _3258;
                            if (_3263 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3256 = _3243;
                                _3257 = _3244;
                                _3258 = _3245;
                                _3259 = _3246;
                                _3260 = _3247;
                                _3261 = _3248;
                                _3262 = _3263;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3246;
                        frontier_phi_67_pred_1 = _3247;
                        frontier_phi_67_pred_2 = _3248;
                        frontier_phi_67_pred_3 = _3245;
                        frontier_phi_67_pred_4 = _3244;
                        frontier_phi_67_pred_5 = _3243;
                    }
                    _2911 = frontier_phi_67_pred;
                    _2913 = frontier_phi_67_pred_1;
                    _2915 = frontier_phi_67_pred_2;
                    _2909 = frontier_phi_67_pred_3;
                    _2907 = frontier_phi_67_pred_4;
                    _2905 = frontier_phi_67_pred_5;
                    uint _3050 = _3049 + 1u;
                    if (_3050 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3043 = _2905;
                        _3044 = _2907;
                        _3045 = _2909;
                        _3046 = _2911;
                        _3047 = _2913;
                        _3048 = _2915;
                        _3049 = _3050;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2913;
                frontier_phi_55_56_ladder_1 = _2915;
                frontier_phi_55_56_ladder_2 = _2911;
                frontier_phi_55_56_ladder_3 = _2909;
                frontier_phi_55_56_ladder_4 = _2907;
                frontier_phi_55_56_ladder_5 = _2905;
            }
            else
            {
                frontier_phi_55_56_ladder = _2799;
                frontier_phi_55_56_ladder_1 = _2801;
                frontier_phi_55_56_ladder_2 = _2797;
                frontier_phi_55_56_ladder_3 = _2795;
                frontier_phi_55_56_ladder_4 = _2793;
                frontier_phi_55_56_ladder_5 = _2791;
            }
            _2904 = frontier_phi_55_56_ladder_5;
            _2906 = frontier_phi_55_56_ladder_4;
            _2908 = frontier_phi_55_56_ladder_3;
            _2910 = frontier_phi_55_56_ladder_2;
            _2912 = frontier_phi_55_56_ladder;
            _2914 = frontier_phi_55_56_ladder_1;
        }
        float _2919 = isnan(1.0) ? _996 : (isnan(_996) ? 1.0 : min(_996, 1.0));
        _2703 = (_2919 * _2910) + _2158;
        _2705 = (_2919 * _2912) + _2160;
        _2707 = (_2919 * _2914) + _2162;
        _2709 = ((_2904 * 0.039999999105930328369140625) * _2919) + _2488;
        _2711 = ((_2906 * 0.039999999105930328369140625) * _2919) + _2490;
        _2713 = ((_2908 * 0.039999999105930328369140625) * _2919) + _2492;
    }
    else
    {
        _2703 = _2158;
        _2705 = _2160;
        _2707 = _2162;
        _2709 = _2488;
        _2711 = _2490;
        _2713 = _2492;
    }
    float _4600 = isnan(0.0) ? _981 : (isnan(_981) ? 0.0 : max(_981, 0.0));
    float _4611 = isnan(0.0) ? _982 : (isnan(_982) ? 0.0 : max(_982, 0.0));
    float _4622 = isnan(0.0) ? _983 : (isnan(_983) ? 0.0 : max(_983, 0.0));
    uint _2733 = _242 + 6u;
    float _2741 = _933 / cbSceneParam._m0[86u].x;
    float _2742 = _934 / cbSceneParam._m0[86u].y;
    vec4 _2756 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2741, _2742, (log2((isnan(cbSceneParam._m0[77u].w) ? _867 : (isnan(_867) ? cbSceneParam._m0[77u].w : min(_867, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2758 = _2756.x;
    float _2759 = _2756.y;
    float _2760 = _2756.z;
    float _2761 = _2756.w;
    float _2854;
    float _2856;
    float _2858;
    float _2860;
    if (_867 > cbSceneParam._m0[78u].w)
    {
        float _2816 = isnan(_867) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _867 : min(cbSceneParam._m0[80u].w, _867));
        float _2817 = _2816 / _867;
        float _2828 = _2817 * _918;
        float _2829 = _919 * _2817;
        float _2830 = (-0.0) - _2829;
        float _2832 = _2817 * _920;
        float _2834 = (cbSceneParam._m0[77u].w * _2830) / _2816;
        float _2835 = _2834 + cbSceneParam._m0[79u].w;
        float _2836 = cbSceneParam._m0[79u].w - _2829;
        float _2842 = sqrt(((_2828 * _2828) + (_2829 * _2829)) + (_2832 * _2832));
        float _2845 = (1.0 - (cbSceneParam._m0[77u].w / _2816)) * _2842;
        float _2850 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2852 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3005;
        if (abs((_2830 - _2834) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3005 = ((((_2835 > 0.0) ? exp2(_2850 * _2835) : (2.0 - exp2(_2852 * _2835))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2845;
        }
        else
        {
            float _2965 = 1.0 / cbSceneParam._m0[80u].x;
            float _2966 = isnan(_2836) ? _2835 : (isnan(_2835) ? _2836 : max(_2835, _2836));
            float _2967 = isnan(_2836) ? _2835 : (isnan(_2835) ? _2836 : min(_2835, _2836));
            float _2976 = isnan(0.0) ? _2966 : (isnan(_2966) ? 0.0 : min(_2966, 0.0));
            float _2977 = isnan(0.0) ? _2967 : (isnan(_2967) ? 0.0 : min(_2967, 0.0));
            _3005 = ((abs(_2842 / _2830) * cbSceneParam._m0[80u].y) * ((((_2976 - _2977) * 2.0) - ((exp2(_2850 * (isnan(0.0) ? _2966 : (isnan(_2966) ? 0.0 : max(_2966, 0.0)))) - exp2(_2850 * (isnan(0.0) ? _2967 : (isnan(_2967) ? 0.0 : max(_2967, 0.0))))) * _2965)) - ((exp2(_2852 * _2976) - exp2(_2852 * _2977)) * _2965))) + (_2845 * cbSceneParam._m0[80u].z);
        }
        vec4 _3007 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2741, _2742, 1.0), 0.0);
        float _3016 = exp2((_3005 * (-1.44269502162933349609375)) * (1.0 - _3007.w));
        float _3017 = log2(_3016);
        float _3033 = log2(_2761);
        _2854 = (exp2(_3033 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3017 * cbSceneParam._m0[78u].x)) * _3007.x) / cbSceneParam._m0[78u].x)) + _2758;
        _2856 = (exp2(_3033 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3017 * cbSceneParam._m0[78u].y)) * _3007.y) / cbSceneParam._m0[78u].y)) + _2759;
        _2858 = (exp2(_3033 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3017 * cbSceneParam._m0[78u].z)) * _3007.z) / cbSceneParam._m0[78u].z)) + _2760;
        _2860 = _3016 * _2761;
    }
    else
    {
        _2854 = _2758;
        _2856 = _2759;
        _2858 = _2760;
        _2860 = _2761;
    }
    float _2872 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2873 = _2872 == 3.0;
    float _2874 = log2(_2860);
    float _2881 = exp2(_2874 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4600 : (isnan(_4600) ? 1.0 : min(_4600, 1.0))) * (_2703 + ((isnan(0.0) ? _1720 : (isnan(_1720) ? 0.0 : max(_1720, 0.0))) * _996))) + ((_2709 + ((isnan(0.0) ? _2011 : (isnan(_2011) ? 0.0 : max(_2011, 0.0))) * _1799)) * cbPerFrame._m0[3u].x));
    float _2882 = exp2(_2874 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4611 : (isnan(_4611) ? 1.0 : min(_4611, 1.0))) * (_2705 + ((isnan(0.0) ? _1723 : (isnan(_1723) ? 0.0 : max(_1723, 0.0))) * _996))) + ((_2711 + ((isnan(0.0) ? _2014 : (isnan(_2014) ? 0.0 : max(_2014, 0.0))) * _1799)) * cbPerFrame._m0[3u].x));
    float _2883 = exp2(_2874 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4622 : (isnan(_4622) ? 1.0 : min(_4622, 1.0))) * (_2707 + ((isnan(0.0) ? _1726 : (isnan(_1726) ? 0.0 : max(_1726, 0.0))) * _996))) + ((_2713 + ((isnan(0.0) ? _2017 : (isnan(_2017) ? 0.0 : max(_2017, 0.0))) * _1799)) * cbPerFrame._m0[3u].x));
    float _2892 = (_2872 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2892 * (_2873 ? _2881 : (_2881 + (cbSceneParam._m0[72u].w * _2854)));
    SV_Target.y = _2892 * (_2873 ? _2882 : (_2882 + (cbSceneParam._m0[72u].w * _2856)));
    SV_Target.z = _2892 * (_2873 ? _2883 : (_2883 + (cbSceneParam._m0[72u].w * _2858)));
    SV_Target.w = cbInstanceData._m0[_2733].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2733].w;
}


