#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 13) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_22;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 20) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_6;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1211;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _217 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _218 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _219 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _225 = inversesqrt(dot(vec3(_217, _218, _219), vec3(_217, _218, _219)));
    float _232 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _239 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _253 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _255 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _256 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3800 = isnan(0.0) ? _253 : (isnan(_253) ? 0.0 : max(_253, 0.0));
    float _3811 = isnan(0.0) ? _255 : (isnan(_255) ? 0.0 : max(_255, 0.0));
    float _3822 = isnan(0.0) ? _256 : (isnan(_256) ? 0.0 : max(_256, 0.0));
    uint _266 = uint(roundEven(NORMAL.w)) * 13u;
    uint _271 = _266 + 1u;
    uint _275 = _266 + 2u;
    float _284 = sqrt(((cbInstanceData._m0[_271].x * cbInstanceData._m0[_271].x) + (cbInstanceData._m0[_266].x * cbInstanceData._m0[_266].x)) + (cbInstanceData._m0[_275].x * cbInstanceData._m0[_275].x));
    float _285 = _284 * TEXCOORD.z;
    float _286 = _284 * TEXCOORD.w;
    vec4 _299 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _285) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _286) + cbTextureTilingScale._m0[13u].w));
    vec4 _323 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _328 = _323.x * cbMtdParam._m0[11u].x;
    float _329 = _323.y * cbMtdParam._m0[11u].y;
    float _330 = _323.z * cbMtdParam._m0[11u].z;
    vec4 _349 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _285) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _286) + cbTextureTilingScale._m0[5u].w));
    vec4 _400 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _402 = _400.x;
    float _414 = dot(vec4(_402, _400.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _431 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w)).x) * 2.0) - ((((_402 - _414) * cbMtdParam._m0[24u].z) + _414) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3833 = isnan(0.0) ? _431 : (isnan(_431) ? 0.0 : max(_431, 0.0));
    float _432 = isnan(1.0) ? _3833 : (isnan(_3833) ? 1.0 : min(_3833, 1.0));
    float _439 = (_432 * ((_349.x * cbMtdParam._m0[12u].x) - _328)) + _328;
    float _440 = (_432 * ((_349.y * cbMtdParam._m0[12u].y) - _329)) + _329;
    float _441 = (_432 * ((_349.z * cbMtdParam._m0[12u].z) - _330)) + _330;
    float _445 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _299.x) * _439;
    float _448 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _299.y) * _440;
    float _451 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _299.z) * _441;
    float _458 = ((_439 - _445) * (isnan(1.0) ? _3800 : (isnan(_3800) ? 1.0 : min(_3800, 1.0)))) + _445;
    float _459 = ((_440 - _448) * (isnan(1.0) ? _3811 : (isnan(_3811) ? 1.0 : min(_3811, 1.0)))) + _448;
    float _460 = ((_441 - _451) * (isnan(1.0) ? _3822 : (isnan(_3822) ? 1.0 : min(_3822, 1.0)))) + _451;
    vec4 _478 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _285) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _286) + cbTextureTilingScale._m0[20u].w));
    vec4 _503 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _285) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _286) + cbTextureTilingScale._m0[4u].w));
    vec4 _520 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _522 = _520.x;
    float _523 = _520.y;
    float _524 = _520.z;
    float _533 = ((_503.z - _524) * _432) + _524;
    float _536 = ((((_503.x - _522) * _432) + _522) * 2.0) + (-1.0);
    float _537 = ((((_503.y - _523) * _432) + _523) * 2.0) + (-1.0);
    float _538 = dot(vec2(_536, _537), vec2(_536, _537));
    float _3844 = isnan(0.0) ? _538 : (isnan(_538) ? 0.0 : max(_538, 0.0));
    float _543 = sqrt(1.0 - (isnan(1.0) ? _3844 : (isnan(_3844) ? 1.0 : min(_3844, 1.0))));
    vec4 _559 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _584 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _285) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _286) + cbTextureTilingScale._m0[11u].w));
    float _586 = _584.x;
    float _587 = 1.0 - _586;
    float _600 = (TEXCOORD_8.w - ((cbMtdParam._m0[21u].z * (1.0 - TEXCOORD_8.w)) * ((((_586 - _587) * cbMtdParam._m0[24u].w) + _587) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3855 = isnan(0.0) ? _600 : (isnan(_600) ? 0.0 : max(_600, 0.0));
    float _601 = isnan(1.0) ? _3855 : (isnan(_3855) ? 1.0 : min(_3855, 1.0));
    float _608 = (_601 * (cbMtdParam._m0[17u].x - _458)) + _458;
    float _609 = (_601 * (cbMtdParam._m0[17u].y - _459)) + _459;
    float _610 = (_601 * (cbMtdParam._m0[17u].z - _460)) + _460;
    float _615 = (((_478.z - _533) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _533;
    float _619 = ((_559.z - _615) * cbMtdParam._m0[19u].w) + _615;
    vec4 _632 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _285) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _286) + cbTextureTilingScale._m0[15u].w));
    float _639 = (_632.x * 2.0) + (-1.0);
    float _640 = (_632.y * 2.0) + (-1.0);
    float _641 = dot(vec2(_639, _640), vec2(_639, _640));
    float _3866 = isnan(0.0) ? _641 : (isnan(_641) ? 0.0 : max(_641, 0.0));
    float _649 = (_601 * (_632.z - _619)) + _619;
    float _658 = (_536 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_478.x * 2.0) + (-1.0)))) + (((_559.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _659 = (_537 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_478.y * 2.0) + (-1.0)))) + (((_559.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _671 = (((_639 - _658) + (cbMtdParam._m0[21u].x * _658)) * _601) + _658;
    float _672 = (((_640 - _659) + (cbMtdParam._m0[21u].x * _659)) * _601) + _659;
    float _673 = (_601 * (sqrt(1.0 - (isnan(1.0) ? _3866 : (isnan(_3866) ? 1.0 : min(_3866, 1.0)))) - _543)) + _543;
    float _675 = cbMtdParam._m0[22u].x + _559.w;
    float _678 = fma(_673, _232 * NORMAL.x, fma(_672, _239 * TANGENT.x, (_225 * _217) * _671));
    float _681 = fma(_673, _232 * NORMAL.y, fma(_672, _239 * TANGENT.y, (_225 * _218) * _671));
    float _684 = fma(_673, _232 * NORMAL.z, fma(_672, _239 * TANGENT.z, (_225 * _219) * _671));
    float _688 = inversesqrt(dot(vec3(_678, _681, _684), vec3(_678, _681, _684)));
    float _689 = _688 * _678;
    float _690 = _688 * _681;
    float _691 = _688 * _684;
    float _3877 = isnan(0.0) ? _649 : (isnan(_649) ? 0.0 : max(_649, 0.0));
    float _692 = isnan(1.0) ? _3877 : (isnan(_3877) ? 1.0 : min(_3877, 1.0));
    float _3888 = isnan(0.0) ? _675 : (isnan(_675) ? 0.0 : max(_675, 0.0));
    float _3899 = isnan(0.0) ? _608 : (isnan(_608) ? 0.0 : max(_608, 0.0));
    float _3910 = isnan(0.0) ? _609 : (isnan(_609) ? 0.0 : max(_609, 0.0));
    float _3921 = isnan(0.0) ? _610 : (isnan(_610) ? 0.0 : max(_610, 0.0));
    float _710 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _752 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _762 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _752);
    float _763 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _752);
    float _764 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _752);
    float _768 = inversesqrt(dot(vec3(_762, _763, _764), vec3(_762, _763, _764)));
    float _769 = _762 * _768;
    float _770 = _763 * _768;
    float _771 = _764 * _768;
    float _777 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _778 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _796 = fma(_691, cbSceneParam._m0[5u].z, fma(_690, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _689));
    float _799 = fma(_691, cbSceneParam._m0[6u].z, fma(_690, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _689));
    float _802 = fma(_691, cbSceneParam._m0[7u].z, fma(_690, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _689));
    uint _816 = (_266 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _822 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3899 : (isnan(_3899) ? 1.0 : min(_3899, 1.0)))) * cbInstanceData._m0[_816].x;
    float _823 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3910 : (isnan(_3910) ? 1.0 : min(_3910, 1.0)))) * cbInstanceData._m0[_816].y;
    float _824 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3921 : (isnan(_3921) ? 1.0 : min(_3921, 1.0)))) * cbInstanceData._m0[_816].z;
    float _3932 = isnan(0.0) ? _822 : (isnan(_822) ? 0.0 : max(_822, 0.0));
    float _825 = isnan(1.0) ? _3932 : (isnan(_3932) ? 1.0 : min(_3932, 1.0));
    float _3943 = isnan(0.0) ? _823 : (isnan(_823) ? 0.0 : max(_823, 0.0));
    float _826 = isnan(1.0) ? _3943 : (isnan(_3943) ? 1.0 : min(_3943, 1.0));
    float _3954 = isnan(0.0) ? _824 : (isnan(_824) ? 0.0 : max(_824, 0.0));
    float _827 = isnan(1.0) ? _3954 : (isnan(_3954) ? 1.0 : min(_3954, 1.0));
    vec4 _836 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _777, cbSceneParam._m0[86u].y * _778));
    float _840 = ((isnan(1.0) ? _3888 : (isnan(_3888) ? 1.0 : min(_3888, 1.0))) * TEXCOORD_5.w) * _836.x;
    float _841 = dot(vec3(_689, _690, _691), vec3(_769, _770, _771));
    float _844 = _841 * 2.0;
    float _848 = (_844 * _689) - _769;
    float _849 = (_844 * _690) - _770;
    float _850 = (_844 * _691) - _771;
    float _854 = abs(dot(vec3(_769, _770, _771), vec3(_689, _690, _691)));
    float _3965 = isnan(0.0) ? _854 : (isnan(_854) ? 0.0 : max(_854, 0.0));
    float _856 = sqrt(_692);
    float _869 = exp2((_856 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3965 : (isnan(_3965) ? 1.0 : min(_3965, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_856 * 3.0));
    float _901 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _905 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _909 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1210;
    float _1212;
    float _1213;
    float _1214;
    float _1215;
    float _1216;
    float _1217;
    float _1218;
    float _1219;
    float _1220;
    float _1221;
    float _1222;
    float _1223;
    float _1224;
    float _1225;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _935 = fma(_909, cbModelParam._m0[26u].z, fma(_905, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _901));
        float _939 = fma(_909, cbModelParam._m0[27u].z, fma(_905, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _901));
        float _943 = fma(_909, cbModelParam._m0[28u].z, fma(_905, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _901));
        float _968 = _901 + _689;
        float _969 = _905 + _690;
        float _970 = _909 + _691;
        float _980 = fma(_970, cbModelParam._m0[26u].z, fma(_969, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _968)) - _935;
        float _981 = fma(_970, cbModelParam._m0[27u].z, fma(_969, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _968)) - _939;
        float _982 = fma(_970, cbModelParam._m0[28u].z, fma(_969, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _968)) - _943;
        float _986 = inversesqrt(dot(vec3(_980, _981, _982), vec3(_980, _981, _982)));
        float _999 = ((_986 * _980) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_935 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1000 = ((_986 * _981) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_939 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1001 = ((_986 * _982) / cbModelParam._m0[34u].z) + ((((((_943 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1004 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_999, _1000, _1001), 0.0);
        vec4 _1011 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_999, _1000, _1001), 0.0);
        vec4 _1018 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_999, _1000, _1001), 0.0);
        vec4 _1025 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_999, _1000, _1001), 0.0);
        float _1038 = exp2((_1004.w + (-0.5)) * 20.0) * 2.0;
        float _1039 = _1038 * (_1004.x + (-0.5));
        float _1040 = _1038 * (_1004.y + (-0.5));
        float _1041 = _1038 * (_1004.z + (-0.5));
        float _1048 = exp2((_1011.w + (-0.5)) * 20.0) * 2.0;
        float _1049 = _1048 * (_1011.x + (-0.5));
        float _1050 = _1048 * (_1011.y + (-0.5));
        float _1051 = _1048 * (_1011.z + (-0.5));
        float _1058 = exp2((_1018.w + (-0.5)) * 20.0) * 2.0;
        float _1059 = _1058 * (_1018.x + (-0.5));
        float _1060 = _1058 * (_1018.y + (-0.5));
        float _1061 = _1058 * (_1018.z + (-0.5));
        float _1068 = exp2((_1025.w + (-0.5)) * 20.0) * 2.0;
        float _1069 = _1068 * (_1025.x + (-0.5));
        float _1070 = _1068 * (_1025.y + (-0.5));
        float _1071 = _1068 * (_1025.z + (-0.5));
        float _1072 = isnan(0.0) ? _1069 : (isnan(_1069) ? 0.0 : max(_1069, 0.0));
        float _1073 = isnan(0.0) ? _1070 : (isnan(_1070) ? 0.0 : max(_1070, 0.0));
        float _1074 = isnan(0.0) ? _1071 : (isnan(_1071) ? 0.0 : max(_1071, 0.0));
        float _1075 = _1039 * 0.5;
        float _1076 = _1049 * 0.5;
        float _1077 = _1059 * 0.5;
        float _1078 = dot(vec3(_1075, _1076, _1077), vec3(_1075, _1076, _1077));
        float _1083 = (_1078 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1078);
        float _1092 = (dot(vec3(_689, _690, _691), vec3(_1083 * _1075, _1083 * _1076, _1083 * _1077)) + 1.0) * 0.5;
        float _3991 = isnan(0.0) ? _1092 : (isnan(_1092) ? 0.0 : max(_1092, 0.0));
        float _1102 = sqrt(((_1076 * _1076) + (_1075 * _1075)) + (_1077 * _1077)) / (_1072 + 9.9999997473787516355514526367188e-06);
        float _4002 = isnan(0.0) ? _1102 : (isnan(_1102) ? 0.0 : max(_1102, 0.0));
        float _1103 = isnan(1.0) ? _4002 : (isnan(_4002) ? 1.0 : min(_4002, 1.0));
        float _1104 = _1103 * 2.0;
        float _1108 = (1.0 - _1103) / (_1103 + 1.0);
        float _4013 = isnan(0.0) ? _1108 : (isnan(_1108) ? 0.0 : max(_1108, 0.0));
        float _1109 = isnan(1.0) ? _4013 : (isnan(_4013) ? 1.0 : min(_4013, 1.0));
        float _1118 = ((((1.0 - _1109) * (_1104 + 2.0)) * exp2(log2(isnan(1.0) ? _3991 : (isnan(_3991) ? 1.0 : min(_3991, 1.0))) * (_1104 + 1.0))) + _1109) * _1072;
        float _1119 = _1040 * 0.5;
        float _1120 = _1050 * 0.5;
        float _1121 = _1060 * 0.5;
        float _1122 = dot(vec3(_1119, _1120, _1121), vec3(_1119, _1120, _1121));
        float _1127 = (_1122 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1122);
        float _1135 = (dot(vec3(_689, _690, _691), vec3(_1127 * _1119, _1127 * _1120, _1127 * _1121)) + 1.0) * 0.5;
        float _4024 = isnan(0.0) ? _1135 : (isnan(_1135) ? 0.0 : max(_1135, 0.0));
        float _1144 = sqrt(((_1120 * _1120) + (_1119 * _1119)) + (_1121 * _1121)) / (_1073 + 9.9999997473787516355514526367188e-06);
        float _4035 = isnan(0.0) ? _1144 : (isnan(_1144) ? 0.0 : max(_1144, 0.0));
        float _1145 = isnan(1.0) ? _4035 : (isnan(_4035) ? 1.0 : min(_4035, 1.0));
        float _1146 = _1145 * 2.0;
        float _1150 = (1.0 - _1145) / (_1145 + 1.0);
        float _4046 = isnan(0.0) ? _1150 : (isnan(_1150) ? 0.0 : max(_1150, 0.0));
        float _1151 = isnan(1.0) ? _4046 : (isnan(_4046) ? 1.0 : min(_4046, 1.0));
        float _1160 = ((((1.0 - _1151) * (_1146 + 2.0)) * exp2(log2(isnan(1.0) ? _4024 : (isnan(_4024) ? 1.0 : min(_4024, 1.0))) * (_1146 + 1.0))) + _1151) * _1073;
        float _1161 = _1041 * 0.5;
        float _1162 = _1051 * 0.5;
        float _1163 = _1061 * 0.5;
        float _1164 = dot(vec3(_1161, _1162, _1163), vec3(_1161, _1162, _1163));
        float _1169 = (_1164 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1164);
        float _1177 = (dot(vec3(_689, _690, _691), vec3(_1169 * _1161, _1169 * _1162, _1169 * _1163)) + 1.0) * 0.5;
        float _4057 = isnan(0.0) ? _1177 : (isnan(_1177) ? 0.0 : max(_1177, 0.0));
        float _1186 = sqrt(((_1162 * _1162) + (_1161 * _1161)) + (_1163 * _1163)) / (_1074 + 9.9999997473787516355514526367188e-06);
        float _4068 = isnan(0.0) ? _1186 : (isnan(_1186) ? 0.0 : max(_1186, 0.0));
        float _1187 = isnan(1.0) ? _4068 : (isnan(_4068) ? 1.0 : min(_4068, 1.0));
        float _1188 = _1187 * 2.0;
        float _1192 = (1.0 - _1187) / (_1187 + 1.0);
        float _4079 = isnan(0.0) ? _1192 : (isnan(_1192) ? 0.0 : max(_1192, 0.0));
        float _1193 = isnan(1.0) ? _4079 : (isnan(_4079) ? 1.0 : min(_4079, 1.0));
        float _1202 = ((((1.0 - _1193) * (_1188 + 2.0)) * exp2(log2(isnan(1.0) ? _4057 : (isnan(_4057) ? 1.0 : min(_4057, 1.0))) * (_1188 + 1.0))) + _1193) * _1074;
        _1210 = _1041;
        _1212 = _1040;
        _1213 = _1039;
        _1214 = _1051;
        _1215 = _1050;
        _1216 = _1049;
        _1217 = _1061;
        _1218 = _1060;
        _1219 = _1059;
        _1220 = _1074;
        _1221 = _1073;
        _1222 = _1072;
        _1223 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1118 : (isnan(_1118) ? 0.0 : max(_1118, 0.0)));
        _1224 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1160 : (isnan(_1160) ? 0.0 : max(_1160, 0.0)));
        _1225 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1202 : (isnan(_1202) ? 0.0 : max(_1202, 0.0)));
    }
    else
    {
        _1210 = _1211;
        _1212 = _1211;
        _1213 = _1211;
        _1214 = _1211;
        _1215 = _1211;
        _1216 = _1211;
        _1217 = _1211;
        _1218 = _1211;
        _1219 = _1211;
        _1220 = _1211;
        _1221 = _1211;
        _1222 = _1211;
        _1223 = 0.0;
        _1224 = 0.0;
        _1225 = 0.0;
    }
    float _1519;
    float _1520;
    float _1521;
    float _1522;
    float _1523;
    float _1524;
    float _1525;
    float _1526;
    float _1527;
    float _1528;
    float _1529;
    float _1530;
    float _1531;
    float _1532;
    float _1533;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1250 = fma(_909, cbModelParam._m0[30u].z, fma(_905, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _901));
        float _1254 = fma(_909, cbModelParam._m0[31u].z, fma(_905, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _901));
        float _1258 = fma(_909, cbModelParam._m0[32u].z, fma(_905, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _901));
        float _1281 = _901 + _689;
        float _1282 = _905 + _690;
        float _1283 = _909 + _691;
        float _1293 = fma(_1283, cbModelParam._m0[30u].z, fma(_1282, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1281)) - _1250;
        float _1294 = fma(_1283, cbModelParam._m0[31u].z, fma(_1282, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1281)) - _1254;
        float _1295 = fma(_1283, cbModelParam._m0[32u].z, fma(_1282, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1281)) - _1258;
        float _1299 = inversesqrt(dot(vec3(_1293, _1294, _1295), vec3(_1293, _1294, _1295)));
        float _1312 = ((_1299 * _1293) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1250 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1313 = ((_1299 * _1294) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1254 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1314 = ((_1299 * _1295) / cbModelParam._m0[35u].z) + ((((((_1258 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1316 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1312, _1313, _1314), 0.0);
        vec4 _1323 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1312, _1313, _1314), 0.0);
        vec4 _1330 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1312, _1313, _1314), 0.0);
        vec4 _1337 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1312, _1313, _1314), 0.0);
        float _1349 = exp2((_1316.w + (-0.5)) * 20.0) * 2.0;
        float _1350 = _1349 * (_1316.x + (-0.5));
        float _1351 = _1349 * (_1316.y + (-0.5));
        float _1352 = _1349 * (_1316.z + (-0.5));
        float _1359 = exp2((_1323.w + (-0.5)) * 20.0) * 2.0;
        float _1360 = _1359 * (_1323.x + (-0.5));
        float _1361 = _1359 * (_1323.y + (-0.5));
        float _1362 = _1359 * (_1323.z + (-0.5));
        float _1369 = exp2((_1330.w + (-0.5)) * 20.0) * 2.0;
        float _1370 = _1369 * (_1330.x + (-0.5));
        float _1371 = _1369 * (_1330.y + (-0.5));
        float _1372 = _1369 * (_1330.z + (-0.5));
        float _1379 = exp2((_1337.w + (-0.5)) * 20.0) * 2.0;
        float _1380 = _1379 * (_1337.x + (-0.5));
        float _1381 = _1379 * (_1337.y + (-0.5));
        float _1382 = _1379 * (_1337.z + (-0.5));
        float _1383 = isnan(0.0) ? _1380 : (isnan(_1380) ? 0.0 : max(_1380, 0.0));
        float _1384 = isnan(0.0) ? _1381 : (isnan(_1381) ? 0.0 : max(_1381, 0.0));
        float _1385 = isnan(0.0) ? _1382 : (isnan(_1382) ? 0.0 : max(_1382, 0.0));
        float _1386 = _1350 * 0.5;
        float _1387 = _1360 * 0.5;
        float _1388 = _1370 * 0.5;
        float _1389 = dot(vec3(_1386, _1387, _1388), vec3(_1386, _1387, _1388));
        float _1394 = (_1389 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1389);
        float _1402 = (dot(vec3(_689, _690, _691), vec3(_1394 * _1386, _1394 * _1387, _1394 * _1388)) + 1.0) * 0.5;
        float _4120 = isnan(0.0) ? _1402 : (isnan(_1402) ? 0.0 : max(_1402, 0.0));
        float _1411 = sqrt(((_1387 * _1387) + (_1386 * _1386)) + (_1388 * _1388)) / (_1383 + 9.9999997473787516355514526367188e-06);
        float _4131 = isnan(0.0) ? _1411 : (isnan(_1411) ? 0.0 : max(_1411, 0.0));
        float _1412 = isnan(1.0) ? _4131 : (isnan(_4131) ? 1.0 : min(_4131, 1.0));
        float _1413 = _1412 * 2.0;
        float _1417 = (1.0 - _1412) / (_1412 + 1.0);
        float _4142 = isnan(0.0) ? _1417 : (isnan(_1417) ? 0.0 : max(_1417, 0.0));
        float _1418 = isnan(1.0) ? _4142 : (isnan(_4142) ? 1.0 : min(_4142, 1.0));
        float _1427 = ((((1.0 - _1418) * (_1413 + 2.0)) * exp2(log2(isnan(1.0) ? _4120 : (isnan(_4120) ? 1.0 : min(_4120, 1.0))) * (_1413 + 1.0))) + _1418) * _1383;
        float _1428 = _1351 * 0.5;
        float _1429 = _1361 * 0.5;
        float _1430 = _1371 * 0.5;
        float _1431 = dot(vec3(_1428, _1429, _1430), vec3(_1428, _1429, _1430));
        float _1436 = (_1431 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1431);
        float _1444 = (dot(vec3(_689, _690, _691), vec3(_1436 * _1428, _1436 * _1429, _1436 * _1430)) + 1.0) * 0.5;
        float _4153 = isnan(0.0) ? _1444 : (isnan(_1444) ? 0.0 : max(_1444, 0.0));
        float _1453 = sqrt(((_1429 * _1429) + (_1428 * _1428)) + (_1430 * _1430)) / (_1384 + 9.9999997473787516355514526367188e-06);
        float _4164 = isnan(0.0) ? _1453 : (isnan(_1453) ? 0.0 : max(_1453, 0.0));
        float _1454 = isnan(1.0) ? _4164 : (isnan(_4164) ? 1.0 : min(_4164, 1.0));
        float _1455 = _1454 * 2.0;
        float _1459 = (1.0 - _1454) / (_1454 + 1.0);
        float _4175 = isnan(0.0) ? _1459 : (isnan(_1459) ? 0.0 : max(_1459, 0.0));
        float _1460 = isnan(1.0) ? _4175 : (isnan(_4175) ? 1.0 : min(_4175, 1.0));
        float _1469 = ((((1.0 - _1460) * (_1455 + 2.0)) * exp2(log2(isnan(1.0) ? _4153 : (isnan(_4153) ? 1.0 : min(_4153, 1.0))) * (_1455 + 1.0))) + _1460) * _1384;
        float _1470 = _1352 * 0.5;
        float _1471 = _1362 * 0.5;
        float _1472 = _1372 * 0.5;
        float _1473 = dot(vec3(_1470, _1471, _1472), vec3(_1470, _1471, _1472));
        float _1478 = (_1473 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1473);
        float _1486 = (dot(vec3(_689, _690, _691), vec3(_1478 * _1470, _1478 * _1471, _1478 * _1472)) + 1.0) * 0.5;
        float _4186 = isnan(0.0) ? _1486 : (isnan(_1486) ? 0.0 : max(_1486, 0.0));
        float _1495 = sqrt(((_1471 * _1471) + (_1470 * _1470)) + (_1472 * _1472)) / (_1385 + 9.9999997473787516355514526367188e-06);
        float _4197 = isnan(0.0) ? _1495 : (isnan(_1495) ? 0.0 : max(_1495, 0.0));
        float _1496 = isnan(1.0) ? _4197 : (isnan(_4197) ? 1.0 : min(_4197, 1.0));
        float _1497 = _1496 * 2.0;
        float _1501 = (1.0 - _1496) / (_1496 + 1.0);
        float _4208 = isnan(0.0) ? _1501 : (isnan(_1501) ? 0.0 : max(_1501, 0.0));
        float _1502 = isnan(1.0) ? _4208 : (isnan(_4208) ? 1.0 : min(_4208, 1.0));
        float _1511 = ((((1.0 - _1502) * (_1497 + 2.0)) * exp2(log2(isnan(1.0) ? _4186 : (isnan(_4186) ? 1.0 : min(_4186, 1.0))) * (_1497 + 1.0))) + _1502) * _1385;
        _1519 = _1352;
        _1520 = _1351;
        _1521 = _1350;
        _1522 = _1362;
        _1523 = _1361;
        _1524 = _1360;
        _1525 = _1372;
        _1526 = _1371;
        _1527 = _1370;
        _1528 = _1385;
        _1529 = _1384;
        _1530 = _1383;
        _1531 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1427 : (isnan(_1427) ? 0.0 : max(_1427, 0.0)));
        _1532 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1469 : (isnan(_1469) ? 0.0 : max(_1469, 0.0)));
        _1533 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1511 : (isnan(_1511) ? 0.0 : max(_1511, 0.0)));
    }
    else
    {
        _1519 = _1211;
        _1520 = _1211;
        _1521 = _1211;
        _1522 = _1211;
        _1523 = _1211;
        _1524 = _1211;
        _1525 = _1211;
        _1526 = _1211;
        _1527 = _1211;
        _1528 = _1211;
        _1529 = _1211;
        _1530 = _1211;
        _1531 = 0.0;
        _1532 = 0.0;
        _1533 = 0.0;
    }
    float _1543 = (cbModelParam._m0[1u].x * (_1531 - _1223)) + _1223;
    float _1544 = (cbModelParam._m0[1u].x * (_1532 - _1224)) + _1224;
    float _1545 = (cbModelParam._m0[1u].x * (_1533 - _1225)) + _1225;
    float _1566 = fma(_1545, cbSceneParam._m0[89u].z, fma(_1544, cbSceneParam._m0[89u].y, _1543 * cbSceneParam._m0[89u].x));
    float _1569 = fma(_1545, cbSceneParam._m0[90u].z, fma(_1544, cbSceneParam._m0[90u].y, _1543 * cbSceneParam._m0[90u].x));
    float _1572 = fma(_1545, cbSceneParam._m0[91u].z, fma(_1544, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1543));
    float _1587 = _848 * 0.5;
    float _1588 = _849 * 0.5;
    float _1589 = _850 * 0.5;
    float _1590 = dot(vec4(_1587, _1588, _1589, 1.0), vec4(_1521, _1524, _1527, _1530));
    float _1593 = dot(vec4(_1587, _1588, _1589, 1.0), vec4(_1520, _1523, _1526, _1529));
    float _1596 = dot(vec4(_1587, _1588, _1589, 1.0), vec4(_1519, _1522, _1525, _1528));
    float _1630;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1603 = dot(vec4(_1587, _1588, _1589, 1.0), vec4(_1210, _1214, _1217, _1220));
        float _1607 = dot(vec4(_1587, _1588, _1589, 1.0), vec4(_1212, _1215, _1218, _1221));
        float _1611 = dot(vec4(_1587, _1588, _1589, 1.0), vec4(_1213, _1216, _1219, _1222));
        float _1618 = dot(vec4(cbModelParam._m0[39u]), vec4(_1587, _1588, _1589, 1.0));
        _1630 = dot(vec3(isnan(0.0) ? _1611 : (isnan(_1611) ? 0.0 : max(_1611, 0.0)), isnan(0.0) ? _1607 : (isnan(_1607) ? 0.0 : max(_1607, 0.0)), isnan(0.0) ? _1603 : (isnan(_1603) ? 0.0 : max(_1603, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1618) ? 0.0 : (isnan(0.0) ? _1618 : max(0.0, _1618))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1630 = 1.0;
    }
    float _1641;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1632 = dot(vec4(cbModelParam._m0[40u]), vec4(_1587, _1588, _1589, 1.0));
        _1641 = dot(vec3(isnan(0.0) ? _1590 : (isnan(_1590) ? 0.0 : max(_1590, 0.0)), isnan(0.0) ? _1593 : (isnan(_1593) ? 0.0 : max(_1593, 0.0)), isnan(0.0) ? _1596 : (isnan(_1596) ? 0.0 : max(_1596, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1632) ? 0.0 : (isnan(0.0) ? _1632 : max(0.0, _1632))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1641 = 1.0;
    }
    float _1645 = (_1641 * cbModelParam._m0[1u].x) + (_1630 * (1.0 - cbModelParam._m0[1u].x));
    float _1655 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _692);
    float _1656 = isnan(_1655) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1655 : min(cbModelParam._m0[25u].z, _1655));
    float _1737;
    float _1739;
    float _1741;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1704 = fma(_909, cbModelParam._m0[13u].z, fma(_905, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _901)) + cbModelParam._m0[13u].w;
        float _1708 = fma(_909, cbModelParam._m0[14u].z, fma(_905, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _901)) + cbModelParam._m0[14u].w;
        float _1712 = fma(_909, cbModelParam._m0[15u].z, fma(_905, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _901)) + cbModelParam._m0[15u].w;
        float _1715 = fma(_850, cbModelParam._m0[13u].z, fma(_849, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _848));
        float _1718 = fma(_850, cbModelParam._m0[14u].z, fma(_849, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _848));
        float _1721 = fma(_850, cbModelParam._m0[15u].z, fma(_849, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _848));
        float _1749;
        if (_1715 > 0.0)
        {
            _1749 = abs((1.0 - _1704) / _1715);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1715 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1704 + 1.0) / _1715);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1749 = frontier_phi_14_12_ladder;
        }
        float _1919;
        if (_1718 > 0.0)
        {
            _1919 = abs((1.0 - _1708) / _1718);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1718 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1708 + 1.0) / _1718);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1919 = frontier_phi_23_19_ladder;
        }
        float _2214;
        if (_1721 > 0.0)
        {
            _2214 = abs((1.0 - _1712) / _1721);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1721 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1712 + 1.0) / _1721);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2214 = frontier_phi_35_30_ladder;
        }
        float _2216 = isnan(_1919) ? _1749 : (isnan(_1749) ? _1919 : min(_1749, _1919));
        float _2217 = isnan(_2214) ? _2216 : (isnan(_2216) ? _2214 : min(_2216, _2214));
        float _2221 = (_2217 * _1715) + _1704;
        float _2222 = (_2217 * _1718) + _1708;
        float _2223 = (_2217 * _1721) + _1712;
        float _2224 = _2217 * 9.9999997473787516355514526367188e-05;
        float _2226 = (-1.0) - _2224;
        float _2228 = _2224 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2223 > _2228) || ((_2223 < _2226) || ((_2222 > _2228) || ((_2222 < _2226) || ((_2221 < _2226) || (_2221 > _2228))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2368 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2223, cbModelParam._m0[9u].z, fma(_2222, cbModelParam._m0[9u].y, _2221 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2223, cbModelParam._m0[10u].z, fma(_2222, cbModelParam._m0[10u].y, _2221 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2223, cbModelParam._m0[11u].z, fma(_2222, cbModelParam._m0[11u].y, _2221 * cbModelParam._m0[11u].x))), _1656);
            frontier_phi_13_35_ladder = _2368.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2368.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2368.x * cbModelParam._m0[1u].y;
        }
        _1737 = frontier_phi_13_35_ladder_2;
        _1739 = frontier_phi_13_35_ladder_1;
        _1741 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1725 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_848, _849, _850), _1656);
        _1737 = _1725.x * cbModelParam._m0[1u].y;
        _1739 = _1725.y * cbModelParam._m0[1u].y;
        _1741 = _1725.z * cbModelParam._m0[1u].y;
    }
    float _1745 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _692);
    float _1746 = isnan(_1745) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1745 : min(cbModelParam._m0[25u].w, _1745));
    float _1836;
    float _1838;
    float _1840;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1800 = fma(_909, cbModelParam._m0[21u].z, fma(_905, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _901)) + cbModelParam._m0[21u].w;
        float _1804 = fma(_909, cbModelParam._m0[22u].z, fma(_905, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _901)) + cbModelParam._m0[22u].w;
        float _1808 = fma(_909, cbModelParam._m0[23u].z, fma(_905, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _901)) + cbModelParam._m0[23u].w;
        float _1811 = fma(_850, cbModelParam._m0[21u].z, fma(_849, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _848));
        float _1814 = fma(_850, cbModelParam._m0[22u].z, fma(_849, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _848));
        float _1817 = fma(_850, cbModelParam._m0[23u].z, fma(_849, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _848));
        float _1924;
        if (_1811 > 0.0)
        {
            _1924 = abs((1.0 - _1800) / _1811);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1811 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1800 + 1.0) / _1811);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1924 = frontier_phi_25_21_ladder;
        }
        float _2241;
        if (_1814 > 0.0)
        {
            _2241 = abs((1.0 - _1804) / _1814);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1814 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1804 + 1.0) / _1814);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2241 = frontier_phi_37_32_ladder;
        }
        float _2568;
        if (_1817 > 0.0)
        {
            _2568 = abs((1.0 - _1808) / _1817);
        }
        else
        {
            float frontier_phi_47_44_ladder;
            if (_1817 < 0.0)
            {
                frontier_phi_47_44_ladder = abs((_1808 + 1.0) / _1817);
            }
            else
            {
                frontier_phi_47_44_ladder = 5000.0;
            }
            _2568 = frontier_phi_47_44_ladder;
        }
        float _2570 = isnan(_2241) ? _1924 : (isnan(_1924) ? _2241 : min(_1924, _2241));
        float _2571 = isnan(_2568) ? _2570 : (isnan(_2570) ? _2568 : min(_2570, _2568));
        float _2575 = (_2571 * _1811) + _1800;
        float _2576 = (_2571 * _1814) + _1804;
        float _2577 = (_2571 * _1817) + _1808;
        float _2578 = _2571 * 9.9999997473787516355514526367188e-05;
        float _2579 = (-1.0) - _2578;
        float _2581 = _2578 + 1.0;
        float frontier_phi_22_47_ladder;
        float frontier_phi_22_47_ladder_1;
        float frontier_phi_22_47_ladder_2;
        if ((_2577 > _2581) || ((_2577 < _2579) || ((_2576 > _2581) || ((_2576 < _2579) || ((_2575 < _2579) || (_2575 > _2581))))))
        {
            frontier_phi_22_47_ladder = 0.0;
            frontier_phi_22_47_ladder_1 = 0.0;
            frontier_phi_22_47_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2695 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2577, cbModelParam._m0[17u].z, fma(_2576, cbModelParam._m0[17u].y, _2575 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2577, cbModelParam._m0[18u].z, fma(_2576, cbModelParam._m0[18u].y, _2575 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2577, cbModelParam._m0[19u].z, fma(_2576, cbModelParam._m0[19u].y, _2575 * cbModelParam._m0[19u].x))), _1746);
            frontier_phi_22_47_ladder = _2695.z * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_1 = _2695.y * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_2 = _2695.x * cbModelParam._m0[1u].z;
        }
        _1836 = frontier_phi_22_47_ladder_2;
        _1838 = frontier_phi_22_47_ladder_1;
        _1840 = frontier_phi_22_47_ladder;
    }
    else
    {
        vec4 _1820 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_848, _849, _850), _1746);
        _1836 = _1820.x * cbModelParam._m0[1u].z;
        _1838 = _1820.y * cbModelParam._m0[1u].z;
        _1840 = _1820.z * cbModelParam._m0[1u].z;
    }
    float _1852 = ((((1.0 - _869) * ((_856 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_869 * _856)) * _840;
    float _1853 = _1852 * ((cbModelParam._m0[1u].w * (_1836 - _1737)) + _1737);
    float _1854 = _1852 * ((cbModelParam._m0[1u].w * (_1838 - _1739)) + _1739);
    float _1855 = _1852 * ((cbModelParam._m0[1u].w * (_1840 - _1741)) + _1741);
    float _1858 = fma(_1855, cbSceneParam._m0[89u].z, fma(_1854, cbSceneParam._m0[89u].y, _1853 * cbSceneParam._m0[89u].x));
    float _1861 = fma(_1855, cbSceneParam._m0[90u].z, fma(_1854, cbSceneParam._m0[90u].y, _1853 * cbSceneParam._m0[90u].x));
    float _1864 = fma(_1855, cbSceneParam._m0[91u].z, fma(_1854, cbSceneParam._m0[91u].y, _1853 * cbSceneParam._m0[91u].x));
    float _1898 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1902 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1906 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1910 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1911 = _1898 / _1910;
    float _1912 = _1902 / _1910;
    float _1913 = _1906 / _1910;
    float _2060;
    float _2061;
    float _2062;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1940 = ((uint(_1913 > cbSceneParam._m0[59u].y) + uint(_1913 > cbSceneParam._m0[59u].x)) + uint(_1913 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1941 = _1940 + 43u;
        uint _1949 = _1940 + 44u;
        uint _1957 = _1940 + 45u;
        uint _1965 = _1940 + 46u;
        float _1976 = fma(_1910, cbSceneParam._m0[_1941].w, fma(_1906, cbSceneParam._m0[_1941].z, fma(_1902, cbSceneParam._m0[_1941].y, _1898 * cbSceneParam._m0[_1941].x)));
        float _1980 = fma(_1910, cbSceneParam._m0[_1949].w, fma(_1906, cbSceneParam._m0[_1949].z, fma(_1902, cbSceneParam._m0[_1949].y, _1898 * cbSceneParam._m0[_1949].x)));
        float _1988 = fma(_1910, cbSceneParam._m0[_1965].w, fma(_1906, cbSceneParam._m0[_1965].z, fma(_1902, cbSceneParam._m0[_1965].y, _1898 * cbSceneParam._m0[_1965].x)));
        float _1993 = cbSceneParam._m0[33u].z * _1988;
        float _1995 = cbSceneParam._m0[33u].w * _1988;
        float _1998 = fma(_1910, cbSceneParam._m0[_1957].w, fma(_1906, cbSceneParam._m0[_1957].z, fma(_1902, cbSceneParam._m0[_1957].y, _1898 * cbSceneParam._m0[_1957].x))) / _1988;
        float _2046 = (cbSceneParam._m0[33u].x - sqrt(((_1912 * _1912) + (_1911 * _1911)) + (_1913 * _1913))) * cbSceneParam._m0[33u].y;
        float _4334 = isnan(0.0) ? _2046 : (isnan(_2046) ? 0.0 : max(_2046, 0.0));
        float _2053 = (isnan(1.0) ? _4334 : (isnan(_4334) ? 1.0 : min(_4334, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1993 + _1976) / _1988, (_1995 + _1980) / _1988), _1998), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1995 + _1976) / _1988, (_1980 - _1993) / _1988), _1998), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1976 - _1993) / _1988, (_1980 - _1995) / _1988), _1998), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1976 - _1995) / _1988, (_1993 + _1980) / _1988), _1998), 0.0)).x), vec4(0.25)));
        _2060 = 1.0 - (_2053 * cbSceneParam._m0[34u].x);
        _2061 = 1.0 - (_2053 * cbSceneParam._m0[34u].y);
        _2062 = 1.0 - (_2053 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2060 = 1.0;
        _2061 = 1.0;
        _2062 = 1.0;
    }
    float _2126;
    float _2128;
    float _2130;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2114 = fma(_1910, cbSceneParam._m0[63u].w, fma(_1906, cbSceneParam._m0[63u].z, fma(_1902, cbSceneParam._m0[63u].y, _1898 * cbSceneParam._m0[63u].x)));
        float _2115 = fma(_1910, cbSceneParam._m0[60u].w, fma(_1906, cbSceneParam._m0[60u].z, fma(_1902, cbSceneParam._m0[60u].y, _1898 * cbSceneParam._m0[60u].x))) / _2114;
        float _2116 = fma(_1910, cbSceneParam._m0[61u].w, fma(_1906, cbSceneParam._m0[61u].z, fma(_1902, cbSceneParam._m0[61u].y, _1898 * cbSceneParam._m0[61u].x))) / _2114;
        float frontier_phi_34_33_ladder;
        float frontier_phi_34_33_ladder_1;
        float frontier_phi_34_33_ladder_2;
        if ((((_2115 >= cbSceneParam._m0[64u].x) && (_2116 >= cbSceneParam._m0[64u].y)) && (_2115 <= cbSceneParam._m0[64u].z)) && (_2116 <= cbSceneParam._m0[64u].w))
        {
            float _2254 = fma(_1910, cbSceneParam._m0[62u].w, fma(_1906, cbSceneParam._m0[62u].z, fma(_1902, cbSceneParam._m0[62u].y, _1898 * cbSceneParam._m0[62u].x))) / _2114;
            float _2258 = isnan(cbSceneParam._m0[41u].w) ? _2254 : (isnan(_2254) ? cbSceneParam._m0[41u].w : max(_2254, cbSceneParam._m0[41u].w));
            float _2301 = (cbSceneParam._m0[33u].x - sqrt(((_1912 * _1912) + (_1911 * _1911)) + (_1913 * _1913))) * cbSceneParam._m0[33u].y;
            float _4350 = isnan(0.0) ? _2301 : (isnan(_2301) ? 0.0 : max(_2301, 0.0));
            float _2308 = (isnan(1.0) ? _4350 : (isnan(_4350) ? 1.0 : min(_4350, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2115, cbSceneParam._m0[33u].w + _2116), _2258), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2115, _2116 - cbSceneParam._m0[33u].z), _2258), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2115 - cbSceneParam._m0[33u].z, _2116 - cbSceneParam._m0[33u].w), _2258), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2115 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2116), _2258), 0.0)).x), vec4(0.25)));
            float _2312 = 1.0 - (_2308 * cbSceneParam._m0[34u].x);
            float _2313 = 1.0 - (_2308 * cbSceneParam._m0[34u].y);
            float _2314 = 1.0 - (_2308 * cbSceneParam._m0[34u].z);
            frontier_phi_34_33_ladder = isnan(_2314) ? _2062 : (isnan(_2062) ? _2314 : min(_2062, _2314));
            frontier_phi_34_33_ladder_1 = isnan(_2313) ? _2061 : (isnan(_2061) ? _2313 : min(_2061, _2313));
            frontier_phi_34_33_ladder_2 = isnan(_2312) ? _2060 : (isnan(_2060) ? _2312 : min(_2060, _2312));
        }
        else
        {
            frontier_phi_34_33_ladder = _2062;
            frontier_phi_34_33_ladder_1 = _2061;
            frontier_phi_34_33_ladder_2 = _2060;
        }
        _2126 = frontier_phi_34_33_ladder_2;
        _2128 = frontier_phi_34_33_ladder_1;
        _2130 = frontier_phi_34_33_ladder;
    }
    else
    {
        _2126 = _2060;
        _2128 = _2061;
        _2130 = _2062;
    }
    uvec4 _2135 = floatBitsToUint(cbInstanceData._m0[_266 + 5u]);
    uint _2137 = _2135.x * 14u;
    uint _2138 = _2137 + 13u;
    float _2145 = _840 + (-1.0);
    float _2150 = (cbLight._m0[_2138].x * _2145) + 1.0;
    float _2151 = (cbLight._m0[_2138].y * _2145) + 1.0;
    float _2152 = (cbLight._m0[_2138].z * _2145) + 1.0;
    float _2153 = (cbLight._m0[_2138].w * _2145) + 1.0;
    uint _2154 = _2137 + 5u;
    float _2160 = isnan(1.0) ? _2151 : (isnan(_2151) ? 1.0 : min(_2151, 1.0));
    uint _2164 = _2137 + 4u;
    float _2173 = isnan(1.0) ? _2150 : (isnan(_2150) ? 1.0 : min(_2150, 1.0));
    uint _2177 = _2137 | 1u;
    float _2188 = dot(vec3(cbLight._m0[_2137].xyz), vec3(_689, _690, _691));
    float _2191 = dot(vec3(cbLight._m0[_2177].xyz), vec3(_689, _690, _691));
    float _4386 = isnan(0.0) ? _2188 : (isnan(_2188) ? 0.0 : max(_2188, 0.0));
    float _4397 = isnan(0.0) ? _2191 : (isnan(_2191) ? 0.0 : max(_2191, 0.0));
    float _2196 = (isnan(1.0) ? _4386 : (isnan(_4386) ? 1.0 : min(_4386, 1.0))) * 0.3183098733425140380859375;
    float _2198 = (isnan(1.0) ? _4397 : (isnan(_4397) ? 1.0 : min(_4397, 1.0))) * 0.3183098733425140380859375;
    float _2205 = ((cbLight._m0[_2154].x * _2160) * _2198) + (((cbLight._m0[_2164].x * _2126) * _2173) * _2196);
    float _2206 = ((_2160 * cbLight._m0[_2154].y) * _2198) + (((cbLight._m0[_2164].y * _2128) * _2173) * _2196);
    float _2207 = ((_2160 * cbLight._m0[_2154].z) * _2198) + (((cbLight._m0[_2164].z * _2130) * _2173) * _2196);
    uvec4 _2211 = floatBitsToUint(cbLight._m0[_2137 + 12u]);
    bool _2213 = _2211.x == 0u;
    float _2315;
    float _2317;
    float _2319;
    if (_2213)
    {
        _2315 = _2205;
        _2317 = _2206;
        _2319 = _2207;
    }
    else
    {
        uint _2323 = _2137 + 6u;
        float _2339 = (dot(vec3(cbLight._m0[_2137 + 2u].xyz), vec3(_689, _690, _691)) * 0.5) + 0.5;
        float _2340 = _2339 * _2339;
        float _4408 = isnan(0.0) ? _2340 : (isnan(_2340) ? 0.0 : max(_2340, 0.0));
        float _2341 = isnan(1.0) ? _4408 : (isnan(_4408) ? 1.0 : min(_4408, 1.0));
        float _2342 = isnan(1.0) ? _2152 : (isnan(_2152) ? 1.0 : min(_2152, 1.0));
        _2315 = (((cbLight._m0[_2323].x * 0.3183098733425140380859375) * _2341) * _2342) + _2205;
        _2317 = (((cbLight._m0[_2323].y * 0.3183098733425140380859375) * _2341) * _2342) + _2206;
        _2319 = (((cbLight._m0[_2323].z * 0.3183098733425140380859375) * _2341) * _2342) + _2207;
    }
    bool _2322 = _2211.y == 0u;
    float _2377;
    float _2379;
    float _2381;
    if (_2322)
    {
        _2377 = _2315;
        _2379 = _2317;
        _2381 = _2319;
    }
    else
    {
        uint _2539 = _2137 + 7u;
        float _2555 = (dot(vec3(cbLight._m0[_2137 + 3u].xyz), vec3(_689, _690, _691)) * 0.5) + 0.5;
        float _2556 = _2555 * _2555;
        float _4424 = isnan(0.0) ? _2556 : (isnan(_2556) ? 0.0 : max(_2556, 0.0));
        float _2557 = isnan(1.0) ? _4424 : (isnan(_4424) ? 1.0 : min(_4424, 1.0));
        float _2558 = isnan(1.0) ? _2153 : (isnan(_2153) ? 1.0 : min(_2153, 1.0));
        _2377 = (((cbLight._m0[_2539].x * 0.3183098733425140380859375) * _2557) * _2558) + _2315;
        _2379 = (((cbLight._m0[_2539].y * 0.3183098733425140380859375) * _2557) * _2558) + _2317;
        _2381 = (((cbLight._m0[_2539].z * 0.3183098733425140380859375) * _2557) * _2558) + _2319;
    }
    uint _2384 = _2137 + 8u;
    float _2397 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2137].w)) * _692) * 0.949999988079071044921875);
    float _2398 = _2397 * _2397;
    float _2399 = cbLight._m0[_2137].x + _769;
    float _2400 = cbLight._m0[_2137].y + _770;
    float _2401 = cbLight._m0[_2137].z + _771;
    float _2405 = inversesqrt(dot(vec3(_2399, _2400, _2401), vec3(_2399, _2400, _2401)));
    float _2406 = _2405 * _2399;
    float _2407 = _2405 * _2400;
    float _2408 = _2405 * _2401;
    float _2409 = dot(vec3(_689, _690, _691), vec3(cbLight._m0[_2137].xyz));
    float _4440 = isnan(0.0) ? _2409 : (isnan(_2409) ? 0.0 : max(_2409, 0.0));
    float _2412 = isnan(1.0) ? _4440 : (isnan(_4440) ? 1.0 : min(_4440, 1.0));
    float _4451 = isnan(0.0) ? _841 : (isnan(_841) ? 0.0 : max(_841, 0.0));
    float _2413 = isnan(1.0) ? _4451 : (isnan(_4451) ? 1.0 : min(_4451, 1.0));
    float _2414 = dot(vec3(_689, _690, _691), vec3(_2406, _2407, _2408));
    float _4462 = isnan(0.0) ? _2414 : (isnan(_2414) ? 0.0 : max(_2414, 0.0));
    float _2417 = isnan(1.0) ? _4462 : (isnan(_4462) ? 1.0 : min(_4462, 1.0));
    float _2418 = dot(vec3(cbLight._m0[_2137].xyz), vec3(_2406, _2407, _2408));
    float _4473 = isnan(0.0) ? _2418 : (isnan(_2418) ? 0.0 : max(_2418, 0.0));
    float _2422 = _2398 * _2398;
    float _2426 = ((_2417 * _2417) * (_2422 + (-1.0))) + 1.0;
    float _2437 = (exp2(log2(1.0 - (isnan(1.0) ? _4473 : (isnan(_4473) ? 1.0 : min(_4473, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2438 = 1.0 - _2398;
    float _2449 = (0.5 / (((_2413 * ((_2412 * _2438) + _2398)) + 9.9999999392252902907785028219223e-09) + (((_2413 * _2438) + _2398) * _2412))) * _2412;
    float _4484 = isnan(0.0) ? _2449 : (isnan(_2449) ? 0.0 : max(_2449, 0.0));
    float _2451 = (isnan(1.0) ? _4484 : (isnan(_4484) ? 1.0 : min(_4484, 1.0))) * (_2422 / ((_2426 * _2426) * 3.141590118408203125));
    uint _2465 = _2137 + 9u;
    float _2476 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2177].w)) * _692) * 0.949999988079071044921875);
    float _2477 = _2476 * _2476;
    float _2478 = cbLight._m0[_2177].x + _769;
    float _2479 = cbLight._m0[_2177].y + _770;
    float _2480 = cbLight._m0[_2177].z + _771;
    float _2484 = inversesqrt(dot(vec3(_2478, _2479, _2480), vec3(_2478, _2479, _2480)));
    float _2485 = _2484 * _2478;
    float _2486 = _2484 * _2479;
    float _2487 = _2484 * _2480;
    float _2488 = dot(vec3(_689, _690, _691), vec3(cbLight._m0[_2177].xyz));
    float _4495 = isnan(0.0) ? _2488 : (isnan(_2488) ? 0.0 : max(_2488, 0.0));
    float _2491 = isnan(1.0) ? _4495 : (isnan(_4495) ? 1.0 : min(_4495, 1.0));
    float _2492 = dot(vec3(_689, _690, _691), vec3(_2485, _2486, _2487));
    float _4506 = isnan(0.0) ? _2492 : (isnan(_2492) ? 0.0 : max(_2492, 0.0));
    float _2495 = isnan(1.0) ? _4506 : (isnan(_4506) ? 1.0 : min(_4506, 1.0));
    float _2496 = dot(vec3(cbLight._m0[_2177].xyz), vec3(_2485, _2486, _2487));
    float _4517 = isnan(0.0) ? _2496 : (isnan(_2496) ? 0.0 : max(_2496, 0.0));
    float _2500 = _2477 * _2477;
    float _2504 = ((_2495 * _2495) * (_2500 + (-1.0))) + 1.0;
    float _2513 = (exp2(log2(1.0 - (isnan(1.0) ? _4517 : (isnan(_4517) ? 1.0 : min(_4517, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2514 = 1.0 - _2477;
    float _2524 = (0.5 / (((_2413 * ((_2491 * _2514) + _2477)) + 9.9999999392252902907785028219223e-09) + (((_2413 * _2514) + _2477) * _2491))) * _2491;
    float _4528 = isnan(0.0) ? _2524 : (isnan(_2524) ? 0.0 : max(_2524, 0.0));
    float _2526 = (isnan(1.0) ? _4528 : (isnan(_4528) ? 1.0 : min(_4528, 1.0))) * (_2500 / ((_2504 * _2504) * 3.141590118408203125));
    float _2536 = (((_2513 * cbLight._m0[_2465].x) * _2526) * _2160) + ((((cbLight._m0[_2384].x * _2126) * _2437) * _2451) * _2173);
    float _2537 = (((_2513 * cbLight._m0[_2465].y) * _2526) * _2160) + ((((cbLight._m0[_2384].y * _2128) * _2437) * _2451) * _2173);
    float _2538 = (((_2513 * cbLight._m0[_2465].z) * _2526) * _2160) + ((((cbLight._m0[_2384].z * _2130) * _2437) * _2451) * _2173);
    float _2594;
    float _2596;
    float _2598;
    if (_2213)
    {
        _2594 = _2536;
        _2596 = _2537;
        _2598 = _2538;
    }
    else
    {
        uint _2600 = _2137 + 2u;
        uint _2604 = _2137 + 10u;
        float _2618 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2600].w)) * _692) * 0.949999988079071044921875);
        float _2619 = _2618 * _2618;
        float _2620 = cbLight._m0[_2600].x + _769;
        float _2621 = cbLight._m0[_2600].y + _770;
        float _2622 = cbLight._m0[_2600].z + _771;
        float _2626 = inversesqrt(dot(vec3(_2620, _2621, _2622), vec3(_2620, _2621, _2622)));
        float _2627 = _2626 * _2620;
        float _2628 = _2626 * _2621;
        float _2629 = _2626 * _2622;
        float _2630 = dot(vec3(_689, _690, _691), vec3(cbLight._m0[_2600].xyz));
        float _4539 = isnan(0.0) ? _2630 : (isnan(_2630) ? 0.0 : max(_2630, 0.0));
        float _2633 = isnan(1.0) ? _4539 : (isnan(_4539) ? 1.0 : min(_4539, 1.0));
        float _2634 = dot(vec3(_689, _690, _691), vec3(_2627, _2628, _2629));
        float _4550 = isnan(0.0) ? _2634 : (isnan(_2634) ? 0.0 : max(_2634, 0.0));
        float _2637 = isnan(1.0) ? _4550 : (isnan(_4550) ? 1.0 : min(_4550, 1.0));
        float _2638 = dot(vec3(cbLight._m0[_2600].xyz), vec3(_2627, _2628, _2629));
        float _4561 = isnan(0.0) ? _2638 : (isnan(_2638) ? 0.0 : max(_2638, 0.0));
        float _2642 = _2619 * _2619;
        float _2646 = ((_2637 * _2637) * (_2642 + (-1.0))) + 1.0;
        float _2655 = (exp2(log2(1.0 - (isnan(1.0) ? _4561 : (isnan(_4561) ? 1.0 : min(_4561, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2656 = 1.0 - _2619;
        float _2666 = (0.5 / (((_2413 * ((_2633 * _2656) + _2619)) + 9.9999999392252902907785028219223e-09) + (((_2413 * _2656) + _2619) * _2633))) * _2633;
        float _4572 = isnan(0.0) ? _2666 : (isnan(_2666) ? 0.0 : max(_2666, 0.0));
        float _2668 = (isnan(1.0) ? _4572 : (isnan(_4572) ? 1.0 : min(_4572, 1.0))) * (_2642 / ((_2646 * _2646) * 3.141590118408203125));
        float _2669 = isnan(1.0) ? _2152 : (isnan(_2152) ? 1.0 : min(_2152, 1.0));
        _2594 = (((_2655 * cbLight._m0[_2604].x) * _2668) * _2669) + _2536;
        _2596 = (((_2655 * cbLight._m0[_2604].y) * _2668) * _2669) + _2537;
        _2598 = (((_2655 * cbLight._m0[_2604].z) * _2668) * _2669) + _2538;
    }
    float _2700;
    float _2702;
    float _2704;
    if (_2322)
    {
        _2700 = _2594;
        _2702 = _2596;
        _2704 = _2598;
    }
    else
    {
        uint _2711 = _2137 + 3u;
        uint _2715 = _2137 + 11u;
        float _2729 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2711].w)) * _692) * 0.949999988079071044921875);
        float _2730 = _2729 * _2729;
        float _2731 = cbLight._m0[_2711].x + _769;
        float _2732 = cbLight._m0[_2711].y + _770;
        float _2733 = cbLight._m0[_2711].z + _771;
        float _2737 = inversesqrt(dot(vec3(_2731, _2732, _2733), vec3(_2731, _2732, _2733)));
        float _2738 = _2737 * _2731;
        float _2739 = _2737 * _2732;
        float _2740 = _2737 * _2733;
        float _2741 = dot(vec3(_689, _690, _691), vec3(cbLight._m0[_2711].xyz));
        float _4588 = isnan(0.0) ? _2741 : (isnan(_2741) ? 0.0 : max(_2741, 0.0));
        float _2744 = isnan(1.0) ? _4588 : (isnan(_4588) ? 1.0 : min(_4588, 1.0));
        float _2745 = dot(vec3(_689, _690, _691), vec3(_2738, _2739, _2740));
        float _4599 = isnan(0.0) ? _2745 : (isnan(_2745) ? 0.0 : max(_2745, 0.0));
        float _2748 = isnan(1.0) ? _4599 : (isnan(_4599) ? 1.0 : min(_4599, 1.0));
        float _2749 = dot(vec3(cbLight._m0[_2711].xyz), vec3(_2738, _2739, _2740));
        float _4610 = isnan(0.0) ? _2749 : (isnan(_2749) ? 0.0 : max(_2749, 0.0));
        float _2753 = _2730 * _2730;
        float _2757 = ((_2748 * _2748) * (_2753 + (-1.0))) + 1.0;
        float _2766 = (exp2(log2(1.0 - (isnan(1.0) ? _4610 : (isnan(_4610) ? 1.0 : min(_4610, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2767 = 1.0 - _2730;
        float _2777 = (0.5 / (((_2413 * ((_2744 * _2767) + _2730)) + 9.9999999392252902907785028219223e-09) + (((_2413 * _2767) + _2730) * _2744))) * _2744;
        float _4621 = isnan(0.0) ? _2777 : (isnan(_2777) ? 0.0 : max(_2777, 0.0));
        float _2779 = (isnan(1.0) ? _4621 : (isnan(_4621) ? 1.0 : min(_4621, 1.0))) * (_2753 / ((_2757 * _2757) * 3.141590118408203125));
        float _2780 = isnan(1.0) ? _2153 : (isnan(_2153) ? 1.0 : min(_2153, 1.0));
        _2700 = (((_2766 * cbLight._m0[_2715].x) * _2779) * _2780) + _2594;
        _2702 = (((_2766 * cbLight._m0[_2715].y) * _2779) * _2780) + _2596;
        _2704 = (((_2766 * cbLight._m0[_2715].z) * _2779) * _2780) + _2598;
    }
    float _2846;
    float _2848;
    float _2850;
    float _2852;
    float _2854;
    float _2856;
    if (_2135.y == 0u)
    {
        uvec4 _2801 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2802 = _2801.x;
        uint _2813 = uint((float(_2801.y) * floor(float(uint(cbSceneParam._m0[85u].y * _778) / _2802))) + floor(float(uint(cbSceneParam._m0[85u].x * _777) / _2802)));
        float _2823 = (log2(_1913 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2824 = isnan(0.0) ? _2823 : (isnan(_2823) ? 0.0 : max(_2823, 0.0));
        uint _2827 = uint(isnan(14.0) ? _2824 : (isnan(_2824) ? 14.0 : min(_2824, 14.0)));
        uvec4 _2832 = texelFetch(g_lightClusterGridBuffer, int(((_2827 << 2u) + (_2813 << 6u)) >> 2u));
        uint _2833 = _2832.x;
        uint _2834 = _2801.z;
        float _2913;
        float _2915;
        float _2917;
        float _2919;
        float _2921;
        float _2923;
        if (((((1u << ((_2834 >> 4u) & 15u)) + 4294967295u) & _2833) == 0u) || ((_2834 & 240u) == 0u))
        {
            _2913 = 0.0;
            _2915 = 0.0;
            _2917 = 0.0;
            _2919 = 0.0;
            _2921 = 0.0;
            _2923 = 0.0;
        }
        else
        {
            float _2914;
            float _2916;
            float _2918;
            float _2920;
            float _2922;
            float _2924;
            float _3058 = 0.0;
            float _3059 = 0.0;
            float _3060 = 0.0;
            float _3061 = 0.0;
            float _3062 = 0.0;
            float _3063 = 0.0;
            uint _3064 = 0u;
            uint _3073;
            bool _3074;
            for (;;)
            {
                _3073 = texelFetch(g_lightClassification, int((((_2827 << 5u) + (_2813 << 9u)) + (_3064 << 2u)) >> 2u)).x;
                _3074 = _3073 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3074)
                {
                    frontier_phi_66_pred = _3063;
                    frontier_phi_66_pred_1 = _3062;
                    frontier_phi_66_pred_2 = _3061;
                    frontier_phi_66_pred_3 = _3060;
                    frontier_phi_66_pred_4 = _3059;
                    frontier_phi_66_pred_5 = _3058;
                }
                else
                {
                    float _3182;
                    float _3183;
                    float _3184;
                    float _3185;
                    float _3186;
                    float _3187;
                    uint _3188;
                    _3182 = _3058;
                    _3183 = _3059;
                    _3184 = _3060;
                    _3185 = _3061;
                    _3186 = _3062;
                    _3187 = _3063;
                    _3188 = _3073;
                    float _3114;
                    float _3115;
                    float _3116;
                    float _3117;
                    float _3118;
                    float _3119;
                    for (;;)
                    {
                        uint _3192 = uint(findLSB(_3188)) + (_3064 << 5u);
                        uint _3189 = (_3188 + 4294967295u) & _3188;
                        uint _3194 = _3192 * 48u;
                        vec4 _3208 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3194)).x, texelFetch(g_PointLightRenderingBuffer, int(_3194 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3194 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3194 + 3u)).x));
                        uint _3214 = (_3192 * 48u) + 4u;
                        vec4 _3227 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3214)).x, texelFetch(g_PointLightRenderingBuffer, int(_3214 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3214 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3214 + 3u)).x));
                        uint _3233 = (_3192 * 48u) + 8u;
                        vec3 _3244 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3233)).x, texelFetch(g_PointLightRenderingBuffer, int(_3233 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3233 + 2u)).x));
                        float _3248 = _3208.x - _1911;
                        float _3249 = _3208.y - _1912;
                        float _3250 = _3208.z - _1913;
                        float _3251 = dot(vec3(_3248, _3249, _3250), vec3(_3248, _3249, _3250));
                        float _3254 = inversesqrt(_3251);
                        float _3255 = _3254 * _3248;
                        float _3256 = _3254 * _3249;
                        float _3257 = _3254 * _3250;
                        float _3258 = dot(vec3(_796, _799, _802), vec3(_3255, _3256, _3257));
                        float _3263 = 1.0 - (_3251 * _3208.w);
                        float _4647 = isnan(0.0) ? _3263 : (isnan(_3263) ? 0.0 : max(_3263, 0.0));
                        float _3264 = isnan(1.0) ? _4647 : (isnan(_4647) ? 1.0 : min(_4647, 1.0));
                        float _3265 = sqrt(_3251) * _3227.w;
                        float _3268 = 1.39999997615814208984375 / (_3265 + 1.39999997615814208984375);
                        float _3269 = _3268 * _3268;
                        float _3272 = ((1.0 - _3269) * _3258) + _3269;
                        float _3275 = _3265 * _3265;
                        float _3279 = ((isnan(0.0) ? _3272 : (isnan(_3272) ? 0.0 : max(_3272, 0.0))) * _3264) / ((_3275 * 0.699999988079071044921875) + 1.0);
                        float _3283 = (-0.0) - _1911;
                        float _3284 = (-0.0) - _1912;
                        float _3285 = (-0.0) - _1913;
                        float _3289 = inversesqrt(dot(vec3(_3283, _3284, _3285), vec3(_3283, _3284, _3285)));
                        float _3290 = _3289 * _3283;
                        float _3291 = _3289 * _3284;
                        float _3292 = _3289 * _3285;
                        float _3299 = exp2(log2(1.0 / ((_3275 * 3.5) + 5.0)) * 0.25);
                        float _3300 = 1.0 - _856;
                        float _3307 = sqrt(1.0 - ((1.0 - (_3300 * _3300)) * (1.0 - (_3299 * _3299))));
                        float _3308 = _3307 * _3307;
                        float _3309 = _3308 * _3308;
                        float _3310 = _3290 + _3255;
                        float _3311 = _3291 + _3256;
                        float _3312 = _3292 + _3257;
                        float _3316 = inversesqrt(dot(vec3(_3310, _3311, _3312), vec3(_3310, _3311, _3312)));
                        float _3320 = dot(vec3(_796, _799, _802), vec3(_3290, _3291, _3292));
                        float _4663 = isnan(0.0) ? _3320 : (isnan(_3320) ? 0.0 : max(_3320, 0.0));
                        float _3323 = isnan(1.0) ? _4663 : (isnan(_4663) ? 1.0 : min(_4663, 1.0));
                        float _3324 = dot(vec3(_796, _799, _802), vec3(_3316 * _3310, _3316 * _3311, _3316 * _3312));
                        float _4674 = isnan(0.0) ? _3324 : (isnan(_3324) ? 0.0 : max(_3324, 0.0));
                        float _3327 = isnan(1.0) ? _4674 : (isnan(_4674) ? 1.0 : min(_4674, 1.0));
                        float _3331 = ((_3327 * _3327) * (_3309 + (-1.0))) + 1.0;
                        float _3332 = _3268 * _3308;
                        float _3333 = _3332 * _3332;
                        float _3336 = ((1.0 - _3333) * _3258) + _3333;
                        float _4685 = isnan(0.0) ? _3336 : (isnan(_3336) ? 0.0 : max(_3336, 0.0));
                        float _3337 = isnan(1.0) ? _4685 : (isnan(_4685) ? 1.0 : min(_4685, 1.0));
                        float _3338 = 1.0 - _3308;
                        float _3348 = (0.5 / (((_3337 * ((_3323 * _3338) + _3308)) + 9.9999999392252902907785028219223e-09) + (((_3337 * _3338) + _3308) * _3323))) * _3337;
                        float _4696 = isnan(0.0) ? _3348 : (isnan(_3348) ? 0.0 : max(_3348, 0.0));
                        float _3359 = (((_3309 * 3.1415927410125732421875) * (isnan(1.0) ? _4696 : (isnan(_4696) ? 1.0 : min(_4696, 1.0)))) / ((_3331 * _3331) * ((_3275 * 2.1991131305694580078125) + 3.141590118408203125))) * _3264;
                        _3117 = (_3279 * _3227.x) + _3185;
                        _3118 = (_3279 * _3227.y) + _3186;
                        _3119 = (_3279 * _3227.z) + _3187;
                        _3114 = (_3359 * _3244.x) + _3182;
                        _3115 = (_3359 * _3244.y) + _3183;
                        _3116 = (_3359 * _3244.z) + _3184;
                        if (_3189 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3182 = _3114;
                            _3183 = _3115;
                            _3184 = _3116;
                            _3185 = _3117;
                            _3186 = _3118;
                            _3187 = _3119;
                            _3188 = _3189;
                        }
                    }
                    frontier_phi_66_pred = _3119;
                    frontier_phi_66_pred_1 = _3118;
                    frontier_phi_66_pred_2 = _3117;
                    frontier_phi_66_pred_3 = _3116;
                    frontier_phi_66_pred_4 = _3115;
                    frontier_phi_66_pred_5 = _3114;
                }
                _2924 = frontier_phi_66_pred;
                _2922 = frontier_phi_66_pred_1;
                _2920 = frontier_phi_66_pred_2;
                _2918 = frontier_phi_66_pred_3;
                _2916 = frontier_phi_66_pred_4;
                _2914 = frontier_phi_66_pred_5;
                uint _3065 = _3064 + 1u;
                if (_3065 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3058 = _2914;
                    _3059 = _2916;
                    _3060 = _2918;
                    _3061 = _2920;
                    _3062 = _2922;
                    _3063 = _2924;
                    _3064 = _3065;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2913 = _2914;
            _2915 = _2916;
            _2917 = _2918;
            _2919 = _2920;
            _2921 = _2922;
            _2923 = _2924;
        }
        uvec4 _2927 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2928 = _2927.z;
        uint _2930 = (_2928 >> 8u) & 15u;
        float _3026;
        float _3028;
        float _3030;
        float _3032;
        float _3034;
        float _3036;
        if (((4294967295u << _2930) & _2833) == 0u)
        {
            _3026 = _2913;
            _3028 = _2915;
            _3030 = _2917;
            _3032 = _2919;
            _3034 = _2921;
            _3036 = _2923;
        }
        else
        {
            float _3051 = inversesqrt(dot(vec3(_1911, _1912, _1913), vec3(_1911, _1912, _1913)));
            float _3052 = _3051 * _1911;
            float _3053 = _3051 * _1912;
            float _3054 = _3051 * _1913;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2930 < ((_2928 >> 12u) & 15u))
            {
                float _3027;
                float _3029;
                float _3031;
                float _3033;
                float _3035;
                float _3037;
                float _3165 = _2913;
                float _3166 = _2915;
                float _3167 = _2917;
                float _3168 = _2919;
                float _3169 = _2921;
                float _3170 = _2923;
                uint _3171 = _2930;
                uint _3180;
                bool _3181;
                for (;;)
                {
                    _3180 = texelFetch(g_lightClassification, int((((_2827 << 5u) + (_2813 << 9u)) + (_3171 << 2u)) >> 2u)).x;
                    _3181 = _3180 == 0u;
                    float frontier_phi_72_pred;
                    float frontier_phi_72_pred_1;
                    float frontier_phi_72_pred_2;
                    float frontier_phi_72_pred_3;
                    float frontier_phi_72_pred_4;
                    float frontier_phi_72_pred_5;
                    if (_3181)
                    {
                        frontier_phi_72_pred = _3170;
                        frontier_phi_72_pred_1 = _3169;
                        frontier_phi_72_pred_2 = _3168;
                        frontier_phi_72_pred_3 = _3167;
                        frontier_phi_72_pred_4 = _3166;
                        frontier_phi_72_pred_5 = _3165;
                    }
                    else
                    {
                        float _3364;
                        float _3365;
                        float _3366;
                        float _3367;
                        float _3368;
                        float _3369;
                        float _3657;
                        float _3658;
                        float _3659;
                        float _3660;
                        float _3661;
                        float _3662;
                        float _3377 = _3165;
                        float _3378 = _3166;
                        float _3379 = _3167;
                        float _3380 = _3168;
                        float _3381 = _3169;
                        float _3382 = _3170;
                        uint _3383 = _3180;
                        uint _3384;
                        vec4 _3409;
                        float _3410;
                        vec4 _3425;
                        vec3 _3437;
                        vec4 _3452;
                        vec4 _3467;
                        float _3513;
                        bool _3514;
                        for (;;)
                        {
                            uint _3394 = ((_3171 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3383));
                            _3384 = (_3383 + 4294967295u) & _3383;
                            uint _3396 = _3394 * 40u;
                            _3409 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3396)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3396 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3396 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3396 + 3u)).x));
                            _3410 = _3409.w;
                            uint _3412 = (_3394 * 40u) + 4u;
                            _3425 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3412)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3412 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3412 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3412 + 3u)).x));
                            uint _3427 = (_3394 * 40u) + 8u;
                            _3437 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3427)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3427 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3427 + 2u)).x));
                            uint _3439 = (_3394 * 40u) + 16u;
                            _3452 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3439)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3439 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3439 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3439 + 3u)).x));
                            uint _3454 = (_3394 * 40u) + 20u;
                            _3467 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3454)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3454 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3454 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3454 + 3u)).x));
                            uint _3469 = (_3394 * 40u) + 24u;
                            vec4 _3482 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3469)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3469 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3469 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3469 + 3u)).x));
                            uint _3488 = (_3394 * 40u) + 28u;
                            vec4 _3501 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3488)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3488 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3488 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3488 + 3u)).x));
                            _3513 = fma(_1913, _3501.z, fma(_1912, _3501.y, _3501.x * _1911)) + _3501.w;
                            _3514 = !((fma(_1913, _3482.z, fma(_1912, _3482.y, _3482.x * _1911)) + _3482.w) <= 0.0);
                            float frontier_phi_78_pred;
                            float frontier_phi_78_pred_1;
                            float frontier_phi_78_pred_2;
                            float frontier_phi_78_pred_3;
                            float frontier_phi_78_pred_4;
                            float frontier_phi_78_pred_5;
                            if (_3514)
                            {
                                float _3541 = _3409.x - _1911;
                                float _3542 = _3409.y - _1912;
                                float _3543 = _3409.z - _1913;
                                float _3544 = dot(vec3(_3541, _3542, _3543), vec3(_3541, _3542, _3543));
                                float _3547 = inversesqrt(_3544);
                                float _3548 = _3547 * _3541;
                                float _3549 = _3547 * _3542;
                                float _3550 = _3547 * _3543;
                                float _3554 = 1.0 - (_3544 / (_3410 * _3410));
                                float _4707 = isnan(0.0) ? _3554 : (isnan(_3554) ? 0.0 : max(_3554, 0.0));
                                float _3555 = isnan(1.0) ? _4707 : (isnan(_4707) ? 1.0 : min(_4707, 1.0));
                                float _3559 = sqrt(_3544) * _3425.w;
                                float _3561 = 1.39999997615814208984375 / (_3559 + 1.39999997615814208984375);
                                float _3562 = _3561 * _3561;
                                float _3565 = ((1.0 - _3562) * dot(vec3(_3548, _3549, _3550), vec3(_796, _799, _802))) + _3562;
                                float _3568 = _3559 * _3559;
                                float _3572 = (fma(_1913, _3452.z, fma(_1912, _3452.y, _3452.x * _1911)) + _3452.w) / _3513;
                                float _3573 = (fma(_1913, _3467.z, fma(_1912, _3467.y, _3467.x * _1911)) + _3467.w) / _3513;
                                float _3577 = 1.0 - dot(vec2(_3572, _3573), vec2(_3572, _3573));
                                float _4723 = isnan(0.0) ? _3577 : (isnan(_3577) ? 0.0 : max(_3577, 0.0));
                                float _3578 = isnan(1.0) ? _4723 : (isnan(_4723) ? 1.0 : min(_4723, 1.0));
                                float _3579 = _3578 * (((isnan(0.0) ? _3565 : (isnan(_3565) ? 0.0 : max(_3565, 0.0))) * _3555) / ((_3568 * 0.699999988079071044921875) + 1.0));
                                float _3591 = exp2(log2(1.0 / ((_3568 * 3.5) + 5.0)) * 0.25);
                                float _3592 = 1.0 - _856;
                                float _3599 = sqrt(1.0 - ((1.0 - (_3592 * _3592)) * (1.0 - (_3591 * _3591))));
                                float _3600 = _3599 * _3599;
                                float _3601 = _3600 * _3600;
                                float _3602 = _3548 - _3052;
                                float _3603 = _3549 - _3053;
                                float _3604 = _3550 - _3054;
                                float _3608 = inversesqrt(dot(vec3(_3602, _3603, _3604), vec3(_3602, _3603, _3604)));
                                float _3612 = dot(vec3(_796, _799, _802), vec3((-0.0) - _3052, (-0.0) - _3053, (-0.0) - _3054));
                                float _4734 = isnan(0.0) ? _3612 : (isnan(_3612) ? 0.0 : max(_3612, 0.0));
                                float _3615 = isnan(1.0) ? _4734 : (isnan(_4734) ? 1.0 : min(_4734, 1.0));
                                float _3616 = dot(vec3(_796, _799, _802), vec3(_3608 * _3602, _3608 * _3603, _3608 * _3604));
                                float _4745 = isnan(0.0) ? _3616 : (isnan(_3616) ? 0.0 : max(_3616, 0.0));
                                float _3619 = isnan(1.0) ? _4745 : (isnan(_4745) ? 1.0 : min(_4745, 1.0));
                                float _3623 = ((_3619 * _3619) * (_3601 + (-1.0))) + 1.0;
                                float _3624 = _3561 * _3600;
                                float _3625 = _3624 * _3624;
                                float _3631 = ((1.0 - _3625) * dot(vec3(_796, _799, _802), vec3(_3548, _3549, _3550))) + _3625;
                                float _4756 = isnan(0.0) ? _3631 : (isnan(_3631) ? 0.0 : max(_3631, 0.0));
                                float _3632 = isnan(1.0) ? _4756 : (isnan(_4756) ? 1.0 : min(_4756, 1.0));
                                float _3633 = 1.0 - _3600;
                                float _3643 = (0.5 / (((_3632 * ((_3615 * _3633) + _3600)) + 9.9999999392252902907785028219223e-09) + (((_3632 * _3633) + _3600) * _3615))) * _3632;
                                float _4767 = isnan(0.0) ? _3643 : (isnan(_3643) ? 0.0 : max(_3643, 0.0));
                                float _3653 = (_3578 * _3555) * (((_3601 * 3.1415927410125732421875) * (isnan(1.0) ? _4767 : (isnan(_4767) ? 1.0 : min(_4767, 1.0)))) / ((_3623 * _3623) * ((_3568 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_78_pred = _3579 * _3425.y;
                                frontier_phi_78_pred_1 = _3579 * _3425.x;
                                frontier_phi_78_pred_2 = _3653 * _3437.z;
                                frontier_phi_78_pred_3 = _3653 * _3437.y;
                                frontier_phi_78_pred_4 = _3653 * _3437.x;
                                frontier_phi_78_pred_5 = _3579 * _3425.z;
                            }
                            else
                            {
                                frontier_phi_78_pred = 0.0;
                                frontier_phi_78_pred_1 = 0.0;
                                frontier_phi_78_pred_2 = 0.0;
                                frontier_phi_78_pred_3 = 0.0;
                                frontier_phi_78_pred_4 = 0.0;
                                frontier_phi_78_pred_5 = 0.0;
                            }
                            _3661 = frontier_phi_78_pred;
                            _3660 = frontier_phi_78_pred_1;
                            _3659 = frontier_phi_78_pred_2;
                            _3658 = frontier_phi_78_pred_3;
                            _3657 = frontier_phi_78_pred_4;
                            _3662 = frontier_phi_78_pred_5;
                            _3367 = _3660 + _3380;
                            _3368 = _3661 + _3381;
                            _3369 = _3662 + _3382;
                            _3364 = _3657 + _3377;
                            _3365 = _3658 + _3378;
                            _3366 = _3659 + _3379;
                            if (_3384 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3377 = _3364;
                                _3378 = _3365;
                                _3379 = _3366;
                                _3380 = _3367;
                                _3381 = _3368;
                                _3382 = _3369;
                                _3383 = _3384;
                                continue;
                            }
                        }
                        frontier_phi_72_pred = _3369;
                        frontier_phi_72_pred_1 = _3368;
                        frontier_phi_72_pred_2 = _3367;
                        frontier_phi_72_pred_3 = _3366;
                        frontier_phi_72_pred_4 = _3365;
                        frontier_phi_72_pred_5 = _3364;
                    }
                    _3037 = frontier_phi_72_pred;
                    _3035 = frontier_phi_72_pred_1;
                    _3033 = frontier_phi_72_pred_2;
                    _3031 = frontier_phi_72_pred_3;
                    _3029 = frontier_phi_72_pred_4;
                    _3027 = frontier_phi_72_pred_5;
                    uint _3172 = _3171 + 1u;
                    if (_3172 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3165 = _3027;
                        _3166 = _3029;
                        _3167 = _3031;
                        _3168 = _3033;
                        _3169 = _3035;
                        _3170 = _3037;
                        _3171 = _3172;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _3037;
                frontier_phi_60_61_ladder_1 = _3035;
                frontier_phi_60_61_ladder_2 = _3031;
                frontier_phi_60_61_ladder_3 = _3029;
                frontier_phi_60_61_ladder_4 = _3027;
                frontier_phi_60_61_ladder_5 = _3033;
            }
            else
            {
                frontier_phi_60_61_ladder = _2923;
                frontier_phi_60_61_ladder_1 = _2921;
                frontier_phi_60_61_ladder_2 = _2917;
                frontier_phi_60_61_ladder_3 = _2915;
                frontier_phi_60_61_ladder_4 = _2913;
                frontier_phi_60_61_ladder_5 = _2919;
            }
            _3026 = frontier_phi_60_61_ladder_4;
            _3028 = frontier_phi_60_61_ladder_3;
            _3030 = frontier_phi_60_61_ladder_2;
            _3032 = frontier_phi_60_61_ladder_5;
            _3034 = frontier_phi_60_61_ladder_1;
            _3036 = frontier_phi_60_61_ladder;
        }
        float _3041 = isnan(1.0) ? _840 : (isnan(_840) ? 1.0 : min(_840, 1.0));
        _2846 = (_3041 * _3032) + _2377;
        _2848 = (_3041 * _3034) + _2379;
        _2850 = (_3041 * _3036) + _2381;
        _2852 = ((_3026 * 0.039999999105930328369140625) * _3041) + _2700;
        _2854 = ((_3028 * 0.039999999105930328369140625) * _3041) + _2702;
        _2856 = ((_3030 * 0.039999999105930328369140625) * _3041) + _2704;
    }
    else
    {
        _2846 = _2377;
        _2848 = _2379;
        _2850 = _2381;
        _2852 = _2700;
        _2854 = _2702;
        _2856 = _2704;
    }
    float _4783 = isnan(0.0) ? _825 : (isnan(_825) ? 0.0 : max(_825, 0.0));
    float _4794 = isnan(0.0) ? _826 : (isnan(_826) ? 0.0 : max(_826, 0.0));
    float _4805 = isnan(0.0) ? _827 : (isnan(_827) ? 0.0 : max(_827, 0.0));
    uint _2876 = _266 + 6u;
    float _2884 = _777 / cbSceneParam._m0[86u].x;
    float _2885 = _778 / cbSceneParam._m0[86u].y;
    vec4 _2899 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2884, _2885, (log2((isnan(cbSceneParam._m0[77u].w) ? _710 : (isnan(_710) ? cbSceneParam._m0[77u].w : min(_710, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2901 = _2899.x;
    float _2902 = _2899.y;
    float _2903 = _2899.z;
    float _2904 = _2899.w;
    float _2976;
    float _2978;
    float _2980;
    float _2982;
    if (_710 > cbSceneParam._m0[78u].w)
    {
        float _2938 = isnan(_710) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _710 : min(cbSceneParam._m0[80u].w, _710));
        float _2939 = _2938 / _710;
        float _2950 = _2939 * _762;
        float _2951 = _763 * _2939;
        float _2952 = (-0.0) - _2951;
        float _2954 = _2939 * _764;
        float _2956 = (cbSceneParam._m0[77u].w * _2952) / _2938;
        float _2957 = _2956 + cbSceneParam._m0[79u].w;
        float _2958 = cbSceneParam._m0[79u].w - _2951;
        float _2964 = sqrt(((_2950 * _2950) + (_2951 * _2951)) + (_2954 * _2954));
        float _2967 = (1.0 - (cbSceneParam._m0[77u].w / _2938)) * _2964;
        float _2972 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2974 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3127;
        if (abs((_2952 - _2956) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3127 = ((((_2957 > 0.0) ? exp2(_2972 * _2957) : (2.0 - exp2(_2974 * _2957))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2967;
        }
        else
        {
            float _3087 = 1.0 / cbSceneParam._m0[80u].x;
            float _3088 = isnan(_2958) ? _2957 : (isnan(_2957) ? _2958 : max(_2957, _2958));
            float _3089 = isnan(_2958) ? _2957 : (isnan(_2957) ? _2958 : min(_2957, _2958));
            float _3098 = isnan(0.0) ? _3088 : (isnan(_3088) ? 0.0 : min(_3088, 0.0));
            float _3099 = isnan(0.0) ? _3089 : (isnan(_3089) ? 0.0 : min(_3089, 0.0));
            _3127 = ((abs(_2964 / _2952) * cbSceneParam._m0[80u].y) * ((((_3098 - _3099) * 2.0) - ((exp2(_2972 * (isnan(0.0) ? _3088 : (isnan(_3088) ? 0.0 : max(_3088, 0.0)))) - exp2(_2972 * (isnan(0.0) ? _3089 : (isnan(_3089) ? 0.0 : max(_3089, 0.0))))) * _3087)) - ((exp2(_2974 * _3098) - exp2(_2974 * _3099)) * _3087))) + (_2967 * cbSceneParam._m0[80u].z);
        }
        vec4 _3129 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2884, _2885, 1.0), 0.0);
        float _3138 = exp2((_3127 * (-1.44269502162933349609375)) * (1.0 - _3129.w));
        float _3139 = log2(_3138);
        float _3155 = log2(_2904);
        _2976 = (exp2(_3155 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3139 * cbSceneParam._m0[78u].x)) * _3129.x) / cbSceneParam._m0[78u].x)) + _2901;
        _2978 = (exp2(_3155 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3139 * cbSceneParam._m0[78u].y)) * _3129.y) / cbSceneParam._m0[78u].y)) + _2902;
        _2980 = (exp2(_3155 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3139 * cbSceneParam._m0[78u].z)) * _3129.z) / cbSceneParam._m0[78u].z)) + _2903;
        _2982 = _3138 * _2904;
    }
    else
    {
        _2976 = _2901;
        _2978 = _2902;
        _2980 = _2903;
        _2982 = _2904;
    }
    float _2994 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2995 = _2994 == 3.0;
    float _2996 = log2(_2982);
    float _3003 = exp2(_2996 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4783 : (isnan(_4783) ? 1.0 : min(_4783, 1.0))) * (_2846 + ((isnan(0.0) ? _1566 : (isnan(_1566) ? 0.0 : max(_1566, 0.0))) * _840))) + ((_2852 + ((isnan(0.0) ? _1858 : (isnan(_1858) ? 0.0 : max(_1858, 0.0))) * _1645)) * cbPerFrame._m0[3u].x));
    float _3004 = exp2(_2996 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4794 : (isnan(_4794) ? 1.0 : min(_4794, 1.0))) * (_2848 + ((isnan(0.0) ? _1569 : (isnan(_1569) ? 0.0 : max(_1569, 0.0))) * _840))) + ((_2854 + ((isnan(0.0) ? _1861 : (isnan(_1861) ? 0.0 : max(_1861, 0.0))) * _1645)) * cbPerFrame._m0[3u].x));
    float _3005 = exp2(_2996 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4805 : (isnan(_4805) ? 1.0 : min(_4805, 1.0))) * (_2850 + ((isnan(0.0) ? _1572 : (isnan(_1572) ? 0.0 : max(_1572, 0.0))) * _840))) + ((_2856 + ((isnan(0.0) ? _1864 : (isnan(_1864) ? 0.0 : max(_1864, 0.0))) * _1645)) * cbPerFrame._m0[3u].x));
    float _3014 = (_2994 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _3014 * (_2995 ? _3003 : (_3003 + (cbSceneParam._m0[72u].w * _2976)));
    SV_Target.y = _3014 * (_2995 ? _3004 : (_3004 + (cbSceneParam._m0[72u].w * _2978)));
    SV_Target.z = _3014 * (_2995 ? _3005 : (_3005 + (cbSceneParam._m0[72u].w * _2980)));
    SV_Target.w = cbInstanceData._m0[_2876].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2876].w;
}


