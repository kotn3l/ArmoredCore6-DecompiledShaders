#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 13) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_22;
layout(set = 0, binding = 14) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_10;
layout(set = 0, binding = 20) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_6;
layout(set = 0, binding = 23) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_8;
layout(set = 0, binding = 24) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_9;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1436;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _227 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _228 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _229 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _235 = inversesqrt(dot(vec3(_227, _228, _229), vec3(_227, _228, _229)));
    float _242 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _249 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _263 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _265 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _266 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3738 = isnan(0.0) ? _263 : (isnan(_263) ? 0.0 : max(_263, 0.0));
    float _3749 = isnan(0.0) ? _265 : (isnan(_265) ? 0.0 : max(_265, 0.0));
    float _3760 = isnan(0.0) ? _266 : (isnan(_266) ? 0.0 : max(_266, 0.0));
    uint _276 = uint(roundEven(NORMAL.w)) * 13u;
    uint _281 = _276 + 1u;
    uint _285 = _276 + 2u;
    float _294 = sqrt(((cbInstanceData._m0[_281].x * cbInstanceData._m0[_281].x) + (cbInstanceData._m0[_276].x * cbInstanceData._m0[_276].x)) + (cbInstanceData._m0[_285].x * cbInstanceData._m0[_285].x));
    float _295 = _294 * TEXCOORD.z;
    float _296 = _294 * TEXCOORD.w;
    vec4 _309 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _295) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _296) + cbTextureTilingScale._m0[13u].w));
    vec4 _333 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _338 = _333.x * cbMtdParam._m0[11u].x;
    float _339 = _333.y * cbMtdParam._m0[11u].y;
    float _340 = _333.z * cbMtdParam._m0[11u].z;
    vec4 _359 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _295) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _296) + cbTextureTilingScale._m0[5u].w));
    vec4 _378 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _416 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _418 = _416.x;
    float _430 = dot(vec4(_418, _416.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _447 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _378.x) * 2.0) - ((((_418 - _430) * cbMtdParam._m0[24u].z) + _430) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3771 = isnan(0.0) ? _447 : (isnan(_447) ? 0.0 : max(_447, 0.0));
    float _448 = isnan(1.0) ? _3771 : (isnan(_3771) ? 1.0 : min(_3771, 1.0));
    float _455 = (_448 * ((_359.x * cbMtdParam._m0[12u].x) - _338)) + _338;
    float _456 = (_448 * ((_359.y * cbMtdParam._m0[12u].y) - _339)) + _339;
    float _457 = (_448 * ((_359.z * cbMtdParam._m0[12u].z) - _340)) + _340;
    vec4 _474 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _295) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _296) + cbTextureTilingScale._m0[3u].w));
    vec4 _494 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _496 = _494.x;
    float _506 = dot(vec4(_496, _494.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _520 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _378.y) * 2.0) - ((((_496 - _506) * cbMtdParam._m0[24u].z) + _506) * cbMtdParam._m0[20u].w))) + 1.0;
    float _3782 = isnan(0.0) ? _520 : (isnan(_520) ? 0.0 : max(_520, 0.0));
    float _521 = isnan(1.0) ? _3782 : (isnan(_3782) ? 1.0 : min(_3782, 1.0));
    float _528 = (_521 * ((_474.x * cbMtdParam._m0[13u].x) - _455)) + _455;
    float _529 = (_521 * ((_474.y * cbMtdParam._m0[13u].y) - _456)) + _456;
    float _530 = (_521 * ((_474.z * cbMtdParam._m0[13u].z) - _457)) + _457;
    vec4 _548 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_9, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[24u].x * _295) + cbTextureTilingScale._m0[24u].z, (cbTextureTilingScale._m0[24u].y * _296) + cbTextureTilingScale._m0[24u].w));
    vec4 _565 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[25u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _567 = _565.x;
    float _577 = dot(vec4(_567, _565.yzw), vec4(cbMtdParam._m0[30u].w, cbMtdParam._m0[31u].xy, 0.0));
    float _589 = ((cbMtdParam._m0[25u].x * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.z) - _378.z) * 2.0) - ((((_567 - _577) * cbMtdParam._m0[24u].z) + _577) * cbMtdParam._m0[20u].z))) + 1.0;
    float _3793 = isnan(0.0) ? _589 : (isnan(_589) ? 0.0 : max(_589, 0.0));
    float _590 = isnan(1.0) ? _3793 : (isnan(_3793) ? 1.0 : min(_3793, 1.0));
    float _597 = (_590 * ((_548.x * cbMtdParam._m0[14u].x) - _528)) + _528;
    float _598 = (_590 * ((_548.y * cbMtdParam._m0[14u].y) - _529)) + _529;
    float _599 = (_590 * ((_548.z * cbMtdParam._m0[14u].z) - _530)) + _530;
    float _603 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _309.x) * _597;
    float _606 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _309.y) * _598;
    float _609 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _309.z) * _599;
    float _616 = ((_597 - _603) * (isnan(1.0) ? _3738 : (isnan(_3738) ? 1.0 : min(_3738, 1.0)))) + _603;
    float _617 = ((_598 - _606) * (isnan(1.0) ? _3749 : (isnan(_3749) ? 1.0 : min(_3749, 1.0)))) + _606;
    float _618 = ((_599 - _609) * (isnan(1.0) ? _3760 : (isnan(_3760) ? 1.0 : min(_3760, 1.0)))) + _609;
    vec4 _636 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _295) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _296) + cbTextureTilingScale._m0[14u].w));
    vec4 _655 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _295) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _296) + cbTextureTilingScale._m0[20u].w));
    vec4 _678 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _295) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _296) + cbTextureTilingScale._m0[4u].w));
    vec4 _695 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _697 = _695.x;
    float _698 = _695.y;
    float _699 = _695.z;
    float _706 = ((_678.x - _697) * _448) + _697;
    float _707 = ((_678.y - _698) * _448) + _698;
    float _708 = ((_678.z - _699) * _448) + _699;
    vec4 _720 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _295) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _296) + cbTextureTilingScale._m0[2u].w));
    float _731 = ((_720.x - _706) * _521) + _706;
    float _732 = ((_720.y - _707) * _521) + _707;
    float _733 = ((_720.z - _708) * _521) + _708;
    vec4 _745 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[23u].x * _295) + cbTextureTilingScale._m0[23u].z, (cbTextureTilingScale._m0[23u].y * _296) + cbTextureTilingScale._m0[23u].w));
    float _758 = ((_745.z - _733) * _590) + _733;
    float _761 = ((((_745.x - _731) * _590) + _731) * 2.0) + (-1.0);
    float _762 = ((((_745.y - _732) * _590) + _732) * 2.0) + (-1.0);
    float _763 = dot(vec2(_761, _762), vec2(_761, _762));
    float _3804 = isnan(0.0) ? _763 : (isnan(_763) ? 0.0 : max(_763, 0.0));
    float _768 = sqrt(1.0 - (isnan(1.0) ? _3804 : (isnan(_3804) ? 1.0 : min(_3804, 1.0))));
    vec4 _782 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _807 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _295) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _296) + cbTextureTilingScale._m0[11u].w));
    float _809 = _807.x;
    float _810 = 1.0 - _809;
    float _823 = (TEXCOORD_8.w - ((cbMtdParam._m0[21u].z * (1.0 - TEXCOORD_8.w)) * ((((_809 - _810) * cbMtdParam._m0[24u].w) + _810) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3815 = isnan(0.0) ? _823 : (isnan(_823) ? 0.0 : max(_823, 0.0));
    float _824 = isnan(1.0) ? _3815 : (isnan(_3815) ? 1.0 : min(_3815, 1.0));
    float _831 = (_824 * ((_636.x * cbMtdParam._m0[18u].x) - _616)) + _616;
    float _832 = (_824 * ((_636.y * cbMtdParam._m0[18u].y) - _617)) + _617;
    float _833 = (_824 * ((_636.z * cbMtdParam._m0[18u].z) - _618)) + _618;
    float _838 = (((_655.z - _758) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _758;
    float _842 = ((_782.z - _838) * cbMtdParam._m0[19u].w) + _838;
    vec4 _855 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _295) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _296) + cbTextureTilingScale._m0[15u].w));
    float _862 = (_855.x * 2.0) + (-1.0);
    float _863 = (_855.y * 2.0) + (-1.0);
    float _864 = dot(vec2(_862, _863), vec2(_862, _863));
    float _3826 = isnan(0.0) ? _864 : (isnan(_864) ? 0.0 : max(_864, 0.0));
    float _872 = (_824 * (_855.z - _842)) + _842;
    float _881 = (_761 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_655.x * 2.0) + (-1.0)))) + (((_782.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _882 = (_762 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_655.y * 2.0) + (-1.0)))) + (((_782.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _894 = (((_862 - _881) + (cbMtdParam._m0[21u].x * _881)) * _824) + _881;
    float _895 = (((_863 - _882) + (cbMtdParam._m0[21u].x * _882)) * _824) + _882;
    float _896 = (_824 * (sqrt(1.0 - (isnan(1.0) ? _3826 : (isnan(_3826) ? 1.0 : min(_3826, 1.0)))) - _768)) + _768;
    float _900 = cbMtdParam._m0[22u].x + _782.w;
    float _903 = fma(_896, _242 * NORMAL.x, fma(_895, _249 * TANGENT.x, (_235 * _227) * _894));
    float _906 = fma(_896, _242 * NORMAL.y, fma(_895, _249 * TANGENT.y, (_235 * _228) * _894));
    float _909 = fma(_896, _242 * NORMAL.z, fma(_895, _249 * TANGENT.z, (_235 * _229) * _894));
    float _913 = inversesqrt(dot(vec3(_903, _906, _909), vec3(_903, _906, _909)));
    float _914 = _913 * _903;
    float _915 = _913 * _906;
    float _916 = _913 * _909;
    float _3837 = isnan(0.0) ? _872 : (isnan(_872) ? 0.0 : max(_872, 0.0));
    float _917 = isnan(1.0) ? _3837 : (isnan(_3837) ? 1.0 : min(_3837, 1.0));
    float _3848 = isnan(0.0) ? _900 : (isnan(_900) ? 0.0 : max(_900, 0.0));
    float _3859 = isnan(0.0) ? _831 : (isnan(_831) ? 0.0 : max(_831, 0.0));
    float _3870 = isnan(0.0) ? _832 : (isnan(_832) ? 0.0 : max(_832, 0.0));
    float _3881 = isnan(0.0) ? _833 : (isnan(_833) ? 0.0 : max(_833, 0.0));
    float _935 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _977 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _987 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _977);
    float _988 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _977);
    float _989 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _977);
    float _993 = inversesqrt(dot(vec3(_987, _988, _989), vec3(_987, _988, _989)));
    float _994 = _987 * _993;
    float _995 = _988 * _993;
    float _996 = _989 * _993;
    float _1002 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1003 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1021 = fma(_916, cbSceneParam._m0[5u].z, fma(_915, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _914));
    float _1024 = fma(_916, cbSceneParam._m0[6u].z, fma(_915, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _914));
    float _1027 = fma(_916, cbSceneParam._m0[7u].z, fma(_915, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _914));
    uint _1041 = (_276 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _1047 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3859 : (isnan(_3859) ? 1.0 : min(_3859, 1.0)))) * cbInstanceData._m0[_1041].x;
    float _1048 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3870 : (isnan(_3870) ? 1.0 : min(_3870, 1.0)))) * cbInstanceData._m0[_1041].y;
    float _1049 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3881 : (isnan(_3881) ? 1.0 : min(_3881, 1.0)))) * cbInstanceData._m0[_1041].z;
    float _3892 = isnan(0.0) ? _1047 : (isnan(_1047) ? 0.0 : max(_1047, 0.0));
    float _1050 = isnan(1.0) ? _3892 : (isnan(_3892) ? 1.0 : min(_3892, 1.0));
    float _3903 = isnan(0.0) ? _1048 : (isnan(_1048) ? 0.0 : max(_1048, 0.0));
    float _1051 = isnan(1.0) ? _3903 : (isnan(_3903) ? 1.0 : min(_3903, 1.0));
    float _3914 = isnan(0.0) ? _1049 : (isnan(_1049) ? 0.0 : max(_1049, 0.0));
    float _1052 = isnan(1.0) ? _3914 : (isnan(_3914) ? 1.0 : min(_3914, 1.0));
    vec4 _1061 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1002, cbSceneParam._m0[86u].y * _1003));
    float _1065 = ((isnan(1.0) ? _3848 : (isnan(_3848) ? 1.0 : min(_3848, 1.0))) * TEXCOORD_5.w) * _1061.x;
    float _1066 = dot(vec3(_914, _915, _916), vec3(_994, _995, _996));
    float _1069 = _1066 * 2.0;
    float _1073 = (_1069 * _914) - _994;
    float _1074 = (_1069 * _915) - _995;
    float _1075 = (_1069 * _916) - _996;
    float _1079 = abs(dot(vec3(_994, _995, _996), vec3(_914, _915, _916)));
    float _3925 = isnan(0.0) ? _1079 : (isnan(_1079) ? 0.0 : max(_1079, 0.0));
    float _1081 = sqrt(_917);
    float _1094 = exp2((_1081 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3925 : (isnan(_3925) ? 1.0 : min(_3925, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1081 * 3.0));
    float _1126 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1130 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1134 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1435;
    float _1437;
    float _1438;
    float _1439;
    float _1440;
    float _1441;
    float _1442;
    float _1443;
    float _1444;
    float _1445;
    float _1446;
    float _1447;
    float _1448;
    float _1449;
    float _1450;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1160 = fma(_1134, cbModelParam._m0[26u].z, fma(_1130, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1126));
        float _1164 = fma(_1134, cbModelParam._m0[27u].z, fma(_1130, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1126));
        float _1168 = fma(_1134, cbModelParam._m0[28u].z, fma(_1130, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1126));
        float _1193 = _1126 + _914;
        float _1194 = _1130 + _915;
        float _1195 = _1134 + _916;
        float _1205 = fma(_1195, cbModelParam._m0[26u].z, fma(_1194, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1193)) - _1160;
        float _1206 = fma(_1195, cbModelParam._m0[27u].z, fma(_1194, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1193)) - _1164;
        float _1207 = fma(_1195, cbModelParam._m0[28u].z, fma(_1194, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1193)) - _1168;
        float _1211 = inversesqrt(dot(vec3(_1205, _1206, _1207), vec3(_1205, _1206, _1207)));
        float _1224 = ((_1211 * _1205) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1160 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1225 = ((_1211 * _1206) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1164 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1226 = ((_1211 * _1207) / cbModelParam._m0[34u].z) + ((((((_1168 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1229 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1224, _1225, _1226), 0.0);
        vec4 _1236 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1224, _1225, _1226), 0.0);
        vec4 _1243 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1224, _1225, _1226), 0.0);
        vec4 _1250 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1224, _1225, _1226), 0.0);
        float _1263 = exp2((_1229.w + (-0.5)) * 20.0) * 2.0;
        float _1264 = _1263 * (_1229.x + (-0.5));
        float _1265 = _1263 * (_1229.y + (-0.5));
        float _1266 = _1263 * (_1229.z + (-0.5));
        float _1273 = exp2((_1236.w + (-0.5)) * 20.0) * 2.0;
        float _1274 = _1273 * (_1236.x + (-0.5));
        float _1275 = _1273 * (_1236.y + (-0.5));
        float _1276 = _1273 * (_1236.z + (-0.5));
        float _1283 = exp2((_1243.w + (-0.5)) * 20.0) * 2.0;
        float _1284 = _1283 * (_1243.x + (-0.5));
        float _1285 = _1283 * (_1243.y + (-0.5));
        float _1286 = _1283 * (_1243.z + (-0.5));
        float _1293 = exp2((_1250.w + (-0.5)) * 20.0) * 2.0;
        float _1294 = _1293 * (_1250.x + (-0.5));
        float _1295 = _1293 * (_1250.y + (-0.5));
        float _1296 = _1293 * (_1250.z + (-0.5));
        float _1297 = isnan(0.0) ? _1294 : (isnan(_1294) ? 0.0 : max(_1294, 0.0));
        float _1298 = isnan(0.0) ? _1295 : (isnan(_1295) ? 0.0 : max(_1295, 0.0));
        float _1299 = isnan(0.0) ? _1296 : (isnan(_1296) ? 0.0 : max(_1296, 0.0));
        float _1300 = _1264 * 0.5;
        float _1301 = _1274 * 0.5;
        float _1302 = _1284 * 0.5;
        float _1303 = dot(vec3(_1300, _1301, _1302), vec3(_1300, _1301, _1302));
        float _1308 = (_1303 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1303);
        float _1317 = (dot(vec3(_914, _915, _916), vec3(_1308 * _1300, _1308 * _1301, _1308 * _1302)) + 1.0) * 0.5;
        float _3951 = isnan(0.0) ? _1317 : (isnan(_1317) ? 0.0 : max(_1317, 0.0));
        float _1327 = sqrt(((_1301 * _1301) + (_1300 * _1300)) + (_1302 * _1302)) / (_1297 + 9.9999997473787516355514526367188e-06);
        float _3962 = isnan(0.0) ? _1327 : (isnan(_1327) ? 0.0 : max(_1327, 0.0));
        float _1328 = isnan(1.0) ? _3962 : (isnan(_3962) ? 1.0 : min(_3962, 1.0));
        float _1329 = _1328 * 2.0;
        float _1333 = (1.0 - _1328) / (_1328 + 1.0);
        float _3973 = isnan(0.0) ? _1333 : (isnan(_1333) ? 0.0 : max(_1333, 0.0));
        float _1334 = isnan(1.0) ? _3973 : (isnan(_3973) ? 1.0 : min(_3973, 1.0));
        float _1343 = ((((1.0 - _1334) * (_1329 + 2.0)) * exp2(log2(isnan(1.0) ? _3951 : (isnan(_3951) ? 1.0 : min(_3951, 1.0))) * (_1329 + 1.0))) + _1334) * _1297;
        float _1344 = _1265 * 0.5;
        float _1345 = _1275 * 0.5;
        float _1346 = _1285 * 0.5;
        float _1347 = dot(vec3(_1344, _1345, _1346), vec3(_1344, _1345, _1346));
        float _1352 = (_1347 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1347);
        float _1360 = (dot(vec3(_914, _915, _916), vec3(_1352 * _1344, _1352 * _1345, _1352 * _1346)) + 1.0) * 0.5;
        float _3984 = isnan(0.0) ? _1360 : (isnan(_1360) ? 0.0 : max(_1360, 0.0));
        float _1369 = sqrt(((_1345 * _1345) + (_1344 * _1344)) + (_1346 * _1346)) / (_1298 + 9.9999997473787516355514526367188e-06);
        float _3995 = isnan(0.0) ? _1369 : (isnan(_1369) ? 0.0 : max(_1369, 0.0));
        float _1370 = isnan(1.0) ? _3995 : (isnan(_3995) ? 1.0 : min(_3995, 1.0));
        float _1371 = _1370 * 2.0;
        float _1375 = (1.0 - _1370) / (_1370 + 1.0);
        float _4006 = isnan(0.0) ? _1375 : (isnan(_1375) ? 0.0 : max(_1375, 0.0));
        float _1376 = isnan(1.0) ? _4006 : (isnan(_4006) ? 1.0 : min(_4006, 1.0));
        float _1385 = ((((1.0 - _1376) * (_1371 + 2.0)) * exp2(log2(isnan(1.0) ? _3984 : (isnan(_3984) ? 1.0 : min(_3984, 1.0))) * (_1371 + 1.0))) + _1376) * _1298;
        float _1386 = _1266 * 0.5;
        float _1387 = _1276 * 0.5;
        float _1388 = _1286 * 0.5;
        float _1389 = dot(vec3(_1386, _1387, _1388), vec3(_1386, _1387, _1388));
        float _1394 = (_1389 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1389);
        float _1402 = (dot(vec3(_914, _915, _916), vec3(_1394 * _1386, _1394 * _1387, _1394 * _1388)) + 1.0) * 0.5;
        float _4017 = isnan(0.0) ? _1402 : (isnan(_1402) ? 0.0 : max(_1402, 0.0));
        float _1411 = sqrt(((_1387 * _1387) + (_1386 * _1386)) + (_1388 * _1388)) / (_1299 + 9.9999997473787516355514526367188e-06);
        float _4028 = isnan(0.0) ? _1411 : (isnan(_1411) ? 0.0 : max(_1411, 0.0));
        float _1412 = isnan(1.0) ? _4028 : (isnan(_4028) ? 1.0 : min(_4028, 1.0));
        float _1413 = _1412 * 2.0;
        float _1417 = (1.0 - _1412) / (_1412 + 1.0);
        float _4039 = isnan(0.0) ? _1417 : (isnan(_1417) ? 0.0 : max(_1417, 0.0));
        float _1418 = isnan(1.0) ? _4039 : (isnan(_4039) ? 1.0 : min(_4039, 1.0));
        float _1427 = ((((1.0 - _1418) * (_1413 + 2.0)) * exp2(log2(isnan(1.0) ? _4017 : (isnan(_4017) ? 1.0 : min(_4017, 1.0))) * (_1413 + 1.0))) + _1418) * _1299;
        _1435 = _1266;
        _1437 = _1265;
        _1438 = _1264;
        _1439 = _1276;
        _1440 = _1275;
        _1441 = _1274;
        _1442 = _1286;
        _1443 = _1285;
        _1444 = _1284;
        _1445 = _1299;
        _1446 = _1298;
        _1447 = _1297;
        _1448 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1343 : (isnan(_1343) ? 0.0 : max(_1343, 0.0)));
        _1449 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1385 : (isnan(_1385) ? 0.0 : max(_1385, 0.0)));
        _1450 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1427 : (isnan(_1427) ? 0.0 : max(_1427, 0.0)));
    }
    else
    {
        _1435 = _1436;
        _1437 = _1436;
        _1438 = _1436;
        _1439 = _1436;
        _1440 = _1436;
        _1441 = _1436;
        _1442 = _1436;
        _1443 = _1436;
        _1444 = _1436;
        _1445 = _1436;
        _1446 = _1436;
        _1447 = _1436;
        _1448 = 0.0;
        _1449 = 0.0;
        _1450 = 0.0;
    }
    float _1742;
    float _1743;
    float _1744;
    float _1745;
    float _1746;
    float _1747;
    float _1748;
    float _1749;
    float _1750;
    float _1751;
    float _1752;
    float _1753;
    float _1754;
    float _1755;
    float _1756;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1473 = fma(_1134, cbModelParam._m0[30u].z, fma(_1130, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1126));
        float _1477 = fma(_1134, cbModelParam._m0[31u].z, fma(_1130, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1126));
        float _1481 = fma(_1134, cbModelParam._m0[32u].z, fma(_1130, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1126));
        float _1504 = _1126 + _914;
        float _1505 = _1130 + _915;
        float _1506 = _1134 + _916;
        float _1516 = fma(_1506, cbModelParam._m0[30u].z, fma(_1505, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1504)) - _1473;
        float _1517 = fma(_1506, cbModelParam._m0[31u].z, fma(_1505, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1504)) - _1477;
        float _1518 = fma(_1506, cbModelParam._m0[32u].z, fma(_1505, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1504)) - _1481;
        float _1522 = inversesqrt(dot(vec3(_1516, _1517, _1518), vec3(_1516, _1517, _1518)));
        float _1535 = ((_1522 * _1516) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1473 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1536 = ((_1522 * _1517) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1477 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1537 = ((_1522 * _1518) / cbModelParam._m0[35u].z) + ((((((_1481 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1539 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1535, _1536, _1537), 0.0);
        vec4 _1546 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1535, _1536, _1537), 0.0);
        vec4 _1553 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1535, _1536, _1537), 0.0);
        vec4 _1560 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1535, _1536, _1537), 0.0);
        float _1572 = exp2((_1539.w + (-0.5)) * 20.0) * 2.0;
        float _1573 = _1572 * (_1539.x + (-0.5));
        float _1574 = _1572 * (_1539.y + (-0.5));
        float _1575 = _1572 * (_1539.z + (-0.5));
        float _1582 = exp2((_1546.w + (-0.5)) * 20.0) * 2.0;
        float _1583 = _1582 * (_1546.x + (-0.5));
        float _1584 = _1582 * (_1546.y + (-0.5));
        float _1585 = _1582 * (_1546.z + (-0.5));
        float _1592 = exp2((_1553.w + (-0.5)) * 20.0) * 2.0;
        float _1593 = _1592 * (_1553.x + (-0.5));
        float _1594 = _1592 * (_1553.y + (-0.5));
        float _1595 = _1592 * (_1553.z + (-0.5));
        float _1602 = exp2((_1560.w + (-0.5)) * 20.0) * 2.0;
        float _1603 = _1602 * (_1560.x + (-0.5));
        float _1604 = _1602 * (_1560.y + (-0.5));
        float _1605 = _1602 * (_1560.z + (-0.5));
        float _1606 = isnan(0.0) ? _1603 : (isnan(_1603) ? 0.0 : max(_1603, 0.0));
        float _1607 = isnan(0.0) ? _1604 : (isnan(_1604) ? 0.0 : max(_1604, 0.0));
        float _1608 = isnan(0.0) ? _1605 : (isnan(_1605) ? 0.0 : max(_1605, 0.0));
        float _1609 = _1573 * 0.5;
        float _1610 = _1583 * 0.5;
        float _1611 = _1593 * 0.5;
        float _1612 = dot(vec3(_1609, _1610, _1611), vec3(_1609, _1610, _1611));
        float _1617 = (_1612 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1612);
        float _1625 = (dot(vec3(_914, _915, _916), vec3(_1617 * _1609, _1617 * _1610, _1617 * _1611)) + 1.0) * 0.5;
        float _4080 = isnan(0.0) ? _1625 : (isnan(_1625) ? 0.0 : max(_1625, 0.0));
        float _1634 = sqrt(((_1610 * _1610) + (_1609 * _1609)) + (_1611 * _1611)) / (_1606 + 9.9999997473787516355514526367188e-06);
        float _4091 = isnan(0.0) ? _1634 : (isnan(_1634) ? 0.0 : max(_1634, 0.0));
        float _1635 = isnan(1.0) ? _4091 : (isnan(_4091) ? 1.0 : min(_4091, 1.0));
        float _1636 = _1635 * 2.0;
        float _1640 = (1.0 - _1635) / (_1635 + 1.0);
        float _4102 = isnan(0.0) ? _1640 : (isnan(_1640) ? 0.0 : max(_1640, 0.0));
        float _1641 = isnan(1.0) ? _4102 : (isnan(_4102) ? 1.0 : min(_4102, 1.0));
        float _1650 = ((((1.0 - _1641) * (_1636 + 2.0)) * exp2(log2(isnan(1.0) ? _4080 : (isnan(_4080) ? 1.0 : min(_4080, 1.0))) * (_1636 + 1.0))) + _1641) * _1606;
        float _1651 = _1574 * 0.5;
        float _1652 = _1584 * 0.5;
        float _1653 = _1594 * 0.5;
        float _1654 = dot(vec3(_1651, _1652, _1653), vec3(_1651, _1652, _1653));
        float _1659 = (_1654 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1654);
        float _1667 = (dot(vec3(_914, _915, _916), vec3(_1659 * _1651, _1659 * _1652, _1659 * _1653)) + 1.0) * 0.5;
        float _4113 = isnan(0.0) ? _1667 : (isnan(_1667) ? 0.0 : max(_1667, 0.0));
        float _1676 = sqrt(((_1652 * _1652) + (_1651 * _1651)) + (_1653 * _1653)) / (_1607 + 9.9999997473787516355514526367188e-06);
        float _4124 = isnan(0.0) ? _1676 : (isnan(_1676) ? 0.0 : max(_1676, 0.0));
        float _1677 = isnan(1.0) ? _4124 : (isnan(_4124) ? 1.0 : min(_4124, 1.0));
        float _1678 = _1677 * 2.0;
        float _1682 = (1.0 - _1677) / (_1677 + 1.0);
        float _4135 = isnan(0.0) ? _1682 : (isnan(_1682) ? 0.0 : max(_1682, 0.0));
        float _1683 = isnan(1.0) ? _4135 : (isnan(_4135) ? 1.0 : min(_4135, 1.0));
        float _1692 = ((((1.0 - _1683) * (_1678 + 2.0)) * exp2(log2(isnan(1.0) ? _4113 : (isnan(_4113) ? 1.0 : min(_4113, 1.0))) * (_1678 + 1.0))) + _1683) * _1607;
        float _1693 = _1575 * 0.5;
        float _1694 = _1585 * 0.5;
        float _1695 = _1595 * 0.5;
        float _1696 = dot(vec3(_1693, _1694, _1695), vec3(_1693, _1694, _1695));
        float _1701 = (_1696 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1696);
        float _1709 = (dot(vec3(_914, _915, _916), vec3(_1701 * _1693, _1701 * _1694, _1701 * _1695)) + 1.0) * 0.5;
        float _4146 = isnan(0.0) ? _1709 : (isnan(_1709) ? 0.0 : max(_1709, 0.0));
        float _1718 = sqrt(((_1694 * _1694) + (_1693 * _1693)) + (_1695 * _1695)) / (_1608 + 9.9999997473787516355514526367188e-06);
        float _4157 = isnan(0.0) ? _1718 : (isnan(_1718) ? 0.0 : max(_1718, 0.0));
        float _1719 = isnan(1.0) ? _4157 : (isnan(_4157) ? 1.0 : min(_4157, 1.0));
        float _1720 = _1719 * 2.0;
        float _1724 = (1.0 - _1719) / (_1719 + 1.0);
        float _4168 = isnan(0.0) ? _1724 : (isnan(_1724) ? 0.0 : max(_1724, 0.0));
        float _1725 = isnan(1.0) ? _4168 : (isnan(_4168) ? 1.0 : min(_4168, 1.0));
        float _1734 = ((((1.0 - _1725) * (_1720 + 2.0)) * exp2(log2(isnan(1.0) ? _4146 : (isnan(_4146) ? 1.0 : min(_4146, 1.0))) * (_1720 + 1.0))) + _1725) * _1608;
        _1742 = _1575;
        _1743 = _1574;
        _1744 = _1573;
        _1745 = _1585;
        _1746 = _1584;
        _1747 = _1583;
        _1748 = _1595;
        _1749 = _1594;
        _1750 = _1593;
        _1751 = _1608;
        _1752 = _1607;
        _1753 = _1606;
        _1754 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1650 : (isnan(_1650) ? 0.0 : max(_1650, 0.0)));
        _1755 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1692 : (isnan(_1692) ? 0.0 : max(_1692, 0.0)));
        _1756 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1734 : (isnan(_1734) ? 0.0 : max(_1734, 0.0)));
    }
    else
    {
        _1742 = _1436;
        _1743 = _1436;
        _1744 = _1436;
        _1745 = _1436;
        _1746 = _1436;
        _1747 = _1436;
        _1748 = _1436;
        _1749 = _1436;
        _1750 = _1436;
        _1751 = _1436;
        _1752 = _1436;
        _1753 = _1436;
        _1754 = 0.0;
        _1755 = 0.0;
        _1756 = 0.0;
    }
    float _1766 = (cbModelParam._m0[1u].x * (_1754 - _1448)) + _1448;
    float _1767 = (cbModelParam._m0[1u].x * (_1755 - _1449)) + _1449;
    float _1768 = (cbModelParam._m0[1u].x * (_1756 - _1450)) + _1450;
    float _1789 = fma(_1768, cbSceneParam._m0[89u].z, fma(_1767, cbSceneParam._m0[89u].y, _1766 * cbSceneParam._m0[89u].x));
    float _1792 = fma(_1768, cbSceneParam._m0[90u].z, fma(_1767, cbSceneParam._m0[90u].y, _1766 * cbSceneParam._m0[90u].x));
    float _1795 = fma(_1768, cbSceneParam._m0[91u].z, fma(_1767, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1766));
    float _1810 = _1073 * 0.5;
    float _1811 = _1074 * 0.5;
    float _1812 = _1075 * 0.5;
    float _1813 = dot(vec4(_1810, _1811, _1812, 1.0), vec4(_1744, _1747, _1750, _1753));
    float _1816 = dot(vec4(_1810, _1811, _1812, 1.0), vec4(_1743, _1746, _1749, _1752));
    float _1819 = dot(vec4(_1810, _1811, _1812, 1.0), vec4(_1742, _1745, _1748, _1751));
    float _1853;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1826 = dot(vec4(_1810, _1811, _1812, 1.0), vec4(_1435, _1439, _1442, _1445));
        float _1830 = dot(vec4(_1810, _1811, _1812, 1.0), vec4(_1437, _1440, _1443, _1446));
        float _1834 = dot(vec4(_1810, _1811, _1812, 1.0), vec4(_1438, _1441, _1444, _1447));
        float _1841 = dot(vec4(cbModelParam._m0[39u]), vec4(_1810, _1811, _1812, 1.0));
        _1853 = dot(vec3(isnan(0.0) ? _1834 : (isnan(_1834) ? 0.0 : max(_1834, 0.0)), isnan(0.0) ? _1830 : (isnan(_1830) ? 0.0 : max(_1830, 0.0)), isnan(0.0) ? _1826 : (isnan(_1826) ? 0.0 : max(_1826, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1841) ? 0.0 : (isnan(0.0) ? _1841 : max(0.0, _1841))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1853 = 1.0;
    }
    float _1864;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1855 = dot(vec4(cbModelParam._m0[40u]), vec4(_1810, _1811, _1812, 1.0));
        _1864 = dot(vec3(isnan(0.0) ? _1813 : (isnan(_1813) ? 0.0 : max(_1813, 0.0)), isnan(0.0) ? _1816 : (isnan(_1816) ? 0.0 : max(_1816, 0.0)), isnan(0.0) ? _1819 : (isnan(_1819) ? 0.0 : max(_1819, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1855) ? 0.0 : (isnan(0.0) ? _1855 : max(0.0, _1855))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1864 = 1.0;
    }
    float _1868 = (_1864 * cbModelParam._m0[1u].x) + (_1853 * (1.0 - cbModelParam._m0[1u].x));
    float _1878 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _917);
    float _1879 = isnan(_1878) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1878 : min(cbModelParam._m0[25u].z, _1878));
    float _1959;
    float _1961;
    float _1963;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1926 = fma(_1134, cbModelParam._m0[13u].z, fma(_1130, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1126)) + cbModelParam._m0[13u].w;
        float _1930 = fma(_1134, cbModelParam._m0[14u].z, fma(_1130, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1126)) + cbModelParam._m0[14u].w;
        float _1934 = fma(_1134, cbModelParam._m0[15u].z, fma(_1130, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1126)) + cbModelParam._m0[15u].w;
        float _1937 = fma(_1075, cbModelParam._m0[13u].z, fma(_1074, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1073));
        float _1940 = fma(_1075, cbModelParam._m0[14u].z, fma(_1074, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1073));
        float _1943 = fma(_1075, cbModelParam._m0[15u].z, fma(_1074, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1073));
        float _1971;
        if (_1937 > 0.0)
        {
            _1971 = abs((1.0 - _1926) / _1937);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1937 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1926 + 1.0) / _1937);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1971 = frontier_phi_14_12_ladder;
        }
        float _2171;
        if (_1940 > 0.0)
        {
            _2171 = abs((1.0 - _1930) / _1940);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1940 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1930 + 1.0) / _1940);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2171 = frontier_phi_23_19_ladder;
        }
        float _2414;
        if (_1943 > 0.0)
        {
            _2414 = abs((1.0 - _1934) / _1943);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1943 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1934 + 1.0) / _1943);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2414 = frontier_phi_35_30_ladder;
        }
        float _2416 = isnan(_2171) ? _1971 : (isnan(_1971) ? _2171 : min(_1971, _2171));
        float _2417 = isnan(_2414) ? _2416 : (isnan(_2416) ? _2414 : min(_2416, _2414));
        float _2421 = (_2417 * _1937) + _1926;
        float _2422 = (_2417 * _1940) + _1930;
        float _2423 = (_2417 * _1943) + _1934;
        float _2424 = _2417 * 9.9999997473787516355514526367188e-05;
        float _2426 = (-1.0) - _2424;
        float _2428 = _2424 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2423 > _2428) || ((_2423 < _2426) || ((_2422 > _2428) || ((_2422 < _2426) || ((_2421 < _2426) || (_2421 > _2428))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2547 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2423, cbModelParam._m0[9u].z, fma(_2422, cbModelParam._m0[9u].y, _2421 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2423, cbModelParam._m0[10u].z, fma(_2422, cbModelParam._m0[10u].y, _2421 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2423, cbModelParam._m0[11u].z, fma(_2422, cbModelParam._m0[11u].y, _2421 * cbModelParam._m0[11u].x))), _1879);
            frontier_phi_13_35_ladder = _2547.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2547.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2547.x * cbModelParam._m0[1u].y;
        }
        _1959 = frontier_phi_13_35_ladder_2;
        _1961 = frontier_phi_13_35_ladder_1;
        _1963 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1947 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1073, _1074, _1075), _1879);
        _1959 = _1947.x * cbModelParam._m0[1u].y;
        _1961 = _1947.y * cbModelParam._m0[1u].y;
        _1963 = _1947.z * cbModelParam._m0[1u].y;
    }
    float _1967 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _917);
    float _1968 = isnan(_1967) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1967 : min(cbModelParam._m0[25u].w, _1967));
    float _2057;
    float _2059;
    float _2061;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2021 = fma(_1134, cbModelParam._m0[21u].z, fma(_1130, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1126)) + cbModelParam._m0[21u].w;
        float _2025 = fma(_1134, cbModelParam._m0[22u].z, fma(_1130, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1126)) + cbModelParam._m0[22u].w;
        float _2029 = fma(_1134, cbModelParam._m0[23u].z, fma(_1130, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1126)) + cbModelParam._m0[23u].w;
        float _2032 = fma(_1075, cbModelParam._m0[21u].z, fma(_1074, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1073));
        float _2035 = fma(_1075, cbModelParam._m0[22u].z, fma(_1074, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1073));
        float _2038 = fma(_1075, cbModelParam._m0[23u].z, fma(_1074, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1073));
        float _2176;
        if (_2032 > 0.0)
        {
            _2176 = abs((1.0 - _2021) / _2032);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_2032 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_2021 + 1.0) / _2032);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2176 = frontier_phi_25_21_ladder;
        }
        float _2441;
        if (_2035 > 0.0)
        {
            _2441 = abs((1.0 - _2025) / _2035);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_2035 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_2025 + 1.0) / _2035);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2441 = frontier_phi_37_32_ladder;
        }
        float _2646;
        if (_2038 > 0.0)
        {
            _2646 = abs((1.0 - _2029) / _2038);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_2038 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_2029 + 1.0) / _2038);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2646 = frontier_phi_46_43_ladder;
        }
        float _2648 = isnan(_2441) ? _2176 : (isnan(_2176) ? _2441 : min(_2176, _2441));
        float _2649 = isnan(_2646) ? _2648 : (isnan(_2648) ? _2646 : min(_2648, _2646));
        float _2653 = (_2649 * _2032) + _2021;
        float _2654 = (_2649 * _2035) + _2025;
        float _2655 = (_2649 * _2038) + _2029;
        float _2656 = _2649 * 9.9999997473787516355514526367188e-05;
        float _2657 = (-1.0) - _2656;
        float _2659 = _2656 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2655 > _2659) || ((_2655 < _2657) || ((_2654 > _2659) || ((_2654 < _2657) || ((_2653 < _2657) || (_2653 > _2659))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2854 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2655, cbModelParam._m0[17u].z, fma(_2654, cbModelParam._m0[17u].y, _2653 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2655, cbModelParam._m0[18u].z, fma(_2654, cbModelParam._m0[18u].y, _2653 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2655, cbModelParam._m0[19u].z, fma(_2654, cbModelParam._m0[19u].y, _2653 * cbModelParam._m0[19u].x))), _1968);
            frontier_phi_22_46_ladder = _2854.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2854.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2854.x * cbModelParam._m0[1u].z;
        }
        _2057 = frontier_phi_22_46_ladder_2;
        _2059 = frontier_phi_22_46_ladder_1;
        _2061 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _2041 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1073, _1074, _1075), _1968);
        _2057 = _2041.x * cbModelParam._m0[1u].z;
        _2059 = _2041.y * cbModelParam._m0[1u].z;
        _2061 = _2041.z * cbModelParam._m0[1u].z;
    }
    float _2073 = ((((1.0 - _1094) * ((_1081 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_1094 * _1081)) * _1065;
    float _2074 = _2073 * ((cbModelParam._m0[1u].w * (_2057 - _1959)) + _1959);
    float _2075 = _2073 * ((cbModelParam._m0[1u].w * (_2059 - _1961)) + _1961);
    float _2076 = _2073 * ((cbModelParam._m0[1u].w * (_2061 - _1963)) + _1963);
    float _2079 = fma(_2076, cbSceneParam._m0[89u].z, fma(_2075, cbSceneParam._m0[89u].y, _2074 * cbSceneParam._m0[89u].x));
    float _2082 = fma(_2076, cbSceneParam._m0[90u].z, fma(_2075, cbSceneParam._m0[90u].y, _2074 * cbSceneParam._m0[90u].x));
    float _2085 = fma(_2076, cbSceneParam._m0[91u].z, fma(_2075, cbSceneParam._m0[91u].y, _2074 * cbSceneParam._m0[91u].x));
    uvec4 _2095 = floatBitsToUint(cbInstanceData._m0[_276 + 5u]);
    uint _2097 = _2095.x * 14u;
    uint _2098 = _2097 + 13u;
    float _2105 = _1065 + (-1.0);
    float _2110 = (cbLight._m0[_2098].x * _2105) + 1.0;
    float _2111 = (cbLight._m0[_2098].y * _2105) + 1.0;
    float _2112 = (cbLight._m0[_2098].z * _2105) + 1.0;
    float _2113 = (cbLight._m0[_2098].w * _2105) + 1.0;
    uint _2114 = _2097 + 5u;
    float _2120 = isnan(1.0) ? _2111 : (isnan(_2111) ? 1.0 : min(_2111, 1.0));
    uint _2124 = _2097 + 4u;
    float _2130 = isnan(1.0) ? _2110 : (isnan(_2110) ? 1.0 : min(_2110, 1.0));
    uint _2134 = _2097 | 1u;
    float _2145 = dot(vec3(cbLight._m0[_2097].xyz), vec3(_914, _915, _916));
    float _2148 = dot(vec3(cbLight._m0[_2134].xyz), vec3(_914, _915, _916));
    float _4304 = isnan(0.0) ? _2145 : (isnan(_2145) ? 0.0 : max(_2145, 0.0));
    float _4315 = isnan(0.0) ? _2148 : (isnan(_2148) ? 0.0 : max(_2148, 0.0));
    float _2153 = (isnan(1.0) ? _4304 : (isnan(_4304) ? 1.0 : min(_4304, 1.0))) * 0.3183098733425140380859375;
    float _2155 = (isnan(1.0) ? _4315 : (isnan(_4315) ? 1.0 : min(_4315, 1.0))) * 0.3183098733425140380859375;
    float _2162 = ((cbLight._m0[_2114].x * _2120) * _2155) + ((cbLight._m0[_2124].x * _2130) * _2153);
    float _2163 = ((_2120 * cbLight._m0[_2114].y) * _2155) + ((_2130 * cbLight._m0[_2124].y) * _2153);
    float _2164 = ((_2120 * cbLight._m0[_2114].z) * _2155) + ((_2130 * cbLight._m0[_2124].z) * _2153);
    uvec4 _2168 = floatBitsToUint(cbLight._m0[_2097 + 12u]);
    bool _2170 = _2168.x == 0u;
    float _2181;
    float _2183;
    float _2185;
    if (_2170)
    {
        _2181 = _2162;
        _2183 = _2163;
        _2185 = _2164;
    }
    else
    {
        uint _2189 = _2097 + 6u;
        float _2205 = (dot(vec3(cbLight._m0[_2097 + 2u].xyz), vec3(_914, _915, _916)) * 0.5) + 0.5;
        float _2206 = _2205 * _2205;
        float _4326 = isnan(0.0) ? _2206 : (isnan(_2206) ? 0.0 : max(_2206, 0.0));
        float _2207 = isnan(1.0) ? _4326 : (isnan(_4326) ? 1.0 : min(_4326, 1.0));
        float _2208 = isnan(1.0) ? _2112 : (isnan(_2112) ? 1.0 : min(_2112, 1.0));
        _2181 = (((cbLight._m0[_2189].x * 0.3183098733425140380859375) * _2207) * _2208) + _2162;
        _2183 = (((cbLight._m0[_2189].y * 0.3183098733425140380859375) * _2207) * _2208) + _2163;
        _2185 = (((cbLight._m0[_2189].z * 0.3183098733425140380859375) * _2207) * _2208) + _2164;
    }
    bool _2188 = _2168.y == 0u;
    float _2226;
    float _2228;
    float _2230;
    if (_2188)
    {
        _2226 = _2181;
        _2228 = _2183;
        _2230 = _2185;
    }
    else
    {
        uint _2385 = _2097 + 7u;
        float _2401 = (dot(vec3(cbLight._m0[_2097 + 3u].xyz), vec3(_914, _915, _916)) * 0.5) + 0.5;
        float _2402 = _2401 * _2401;
        float _4342 = isnan(0.0) ? _2402 : (isnan(_2402) ? 0.0 : max(_2402, 0.0));
        float _2403 = isnan(1.0) ? _4342 : (isnan(_4342) ? 1.0 : min(_4342, 1.0));
        float _2404 = isnan(1.0) ? _2113 : (isnan(_2113) ? 1.0 : min(_2113, 1.0));
        _2226 = (((cbLight._m0[_2385].x * 0.3183098733425140380859375) * _2403) * _2404) + _2181;
        _2228 = (((cbLight._m0[_2385].y * 0.3183098733425140380859375) * _2403) * _2404) + _2183;
        _2230 = (((cbLight._m0[_2385].z * 0.3183098733425140380859375) * _2403) * _2404) + _2185;
    }
    uint _2233 = _2097 + 8u;
    float _2246 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2097].w)) * _917) * 0.949999988079071044921875);
    float _2247 = _2246 * _2246;
    float _2248 = cbLight._m0[_2097].x + _994;
    float _2249 = cbLight._m0[_2097].y + _995;
    float _2250 = cbLight._m0[_2097].z + _996;
    float _2254 = inversesqrt(dot(vec3(_2248, _2249, _2250), vec3(_2248, _2249, _2250)));
    float _2255 = _2254 * _2248;
    float _2256 = _2254 * _2249;
    float _2257 = _2254 * _2250;
    float _2258 = dot(vec3(_914, _915, _916), vec3(cbLight._m0[_2097].xyz));
    float _4358 = isnan(0.0) ? _2258 : (isnan(_2258) ? 0.0 : max(_2258, 0.0));
    float _2261 = isnan(1.0) ? _4358 : (isnan(_4358) ? 1.0 : min(_4358, 1.0));
    float _4369 = isnan(0.0) ? _1066 : (isnan(_1066) ? 0.0 : max(_1066, 0.0));
    float _2262 = isnan(1.0) ? _4369 : (isnan(_4369) ? 1.0 : min(_4369, 1.0));
    float _2263 = dot(vec3(_914, _915, _916), vec3(_2255, _2256, _2257));
    float _4380 = isnan(0.0) ? _2263 : (isnan(_2263) ? 0.0 : max(_2263, 0.0));
    float _2266 = isnan(1.0) ? _4380 : (isnan(_4380) ? 1.0 : min(_4380, 1.0));
    float _2267 = dot(vec3(cbLight._m0[_2097].xyz), vec3(_2255, _2256, _2257));
    float _4391 = isnan(0.0) ? _2267 : (isnan(_2267) ? 0.0 : max(_2267, 0.0));
    float _2271 = _2247 * _2247;
    float _2275 = ((_2266 * _2266) * (_2271 + (-1.0))) + 1.0;
    float _2286 = (exp2(log2(1.0 - (isnan(1.0) ? _4391 : (isnan(_4391) ? 1.0 : min(_4391, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2287 = 1.0 - _2247;
    float _2298 = (0.5 / (((_2262 * ((_2261 * _2287) + _2247)) + 9.9999999392252902907785028219223e-09) + (((_2262 * _2287) + _2247) * _2261))) * _2261;
    float _4402 = isnan(0.0) ? _2298 : (isnan(_2298) ? 0.0 : max(_2298, 0.0));
    float _2300 = (isnan(1.0) ? _4402 : (isnan(_4402) ? 1.0 : min(_4402, 1.0))) * (_2271 / ((_2275 * _2275) * 3.141590118408203125));
    uint _2311 = _2097 + 9u;
    float _2322 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2134].w)) * _917) * 0.949999988079071044921875);
    float _2323 = _2322 * _2322;
    float _2324 = cbLight._m0[_2134].x + _994;
    float _2325 = cbLight._m0[_2134].y + _995;
    float _2326 = cbLight._m0[_2134].z + _996;
    float _2330 = inversesqrt(dot(vec3(_2324, _2325, _2326), vec3(_2324, _2325, _2326)));
    float _2331 = _2330 * _2324;
    float _2332 = _2330 * _2325;
    float _2333 = _2330 * _2326;
    float _2334 = dot(vec3(_914, _915, _916), vec3(cbLight._m0[_2134].xyz));
    float _4413 = isnan(0.0) ? _2334 : (isnan(_2334) ? 0.0 : max(_2334, 0.0));
    float _2337 = isnan(1.0) ? _4413 : (isnan(_4413) ? 1.0 : min(_4413, 1.0));
    float _2338 = dot(vec3(_914, _915, _916), vec3(_2331, _2332, _2333));
    float _4424 = isnan(0.0) ? _2338 : (isnan(_2338) ? 0.0 : max(_2338, 0.0));
    float _2341 = isnan(1.0) ? _4424 : (isnan(_4424) ? 1.0 : min(_4424, 1.0));
    float _2342 = dot(vec3(cbLight._m0[_2134].xyz), vec3(_2331, _2332, _2333));
    float _4435 = isnan(0.0) ? _2342 : (isnan(_2342) ? 0.0 : max(_2342, 0.0));
    float _2346 = _2323 * _2323;
    float _2350 = ((_2341 * _2341) * (_2346 + (-1.0))) + 1.0;
    float _2359 = (exp2(log2(1.0 - (isnan(1.0) ? _4435 : (isnan(_4435) ? 1.0 : min(_4435, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2360 = 1.0 - _2323;
    float _2370 = (0.5 / (((_2262 * ((_2337 * _2360) + _2323)) + 9.9999999392252902907785028219223e-09) + (((_2262 * _2360) + _2323) * _2337))) * _2337;
    float _4446 = isnan(0.0) ? _2370 : (isnan(_2370) ? 0.0 : max(_2370, 0.0));
    float _2372 = (isnan(1.0) ? _4446 : (isnan(_4446) ? 1.0 : min(_4446, 1.0))) * (_2346 / ((_2350 * _2350) * 3.141590118408203125));
    float _2382 = (((_2359 * cbLight._m0[_2311].x) * _2372) * _2120) + (((_2286 * cbLight._m0[_2233].x) * _2300) * _2130);
    float _2383 = (((_2359 * cbLight._m0[_2311].y) * _2372) * _2120) + (((_2286 * cbLight._m0[_2233].y) * _2300) * _2130);
    float _2384 = (((_2359 * cbLight._m0[_2311].z) * _2372) * _2120) + (((_2286 * cbLight._m0[_2233].z) * _2300) * _2130);
    float _2446;
    float _2448;
    float _2450;
    if (_2170)
    {
        _2446 = _2382;
        _2448 = _2383;
        _2450 = _2384;
    }
    else
    {
        uint _2452 = _2097 + 2u;
        uint _2456 = _2097 + 10u;
        float _2470 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2452].w)) * _917) * 0.949999988079071044921875);
        float _2471 = _2470 * _2470;
        float _2472 = cbLight._m0[_2452].x + _994;
        float _2473 = cbLight._m0[_2452].y + _995;
        float _2474 = cbLight._m0[_2452].z + _996;
        float _2478 = inversesqrt(dot(vec3(_2472, _2473, _2474), vec3(_2472, _2473, _2474)));
        float _2479 = _2478 * _2472;
        float _2480 = _2478 * _2473;
        float _2481 = _2478 * _2474;
        float _2482 = dot(vec3(_914, _915, _916), vec3(cbLight._m0[_2452].xyz));
        float _4457 = isnan(0.0) ? _2482 : (isnan(_2482) ? 0.0 : max(_2482, 0.0));
        float _2485 = isnan(1.0) ? _4457 : (isnan(_4457) ? 1.0 : min(_4457, 1.0));
        float _2486 = dot(vec3(_914, _915, _916), vec3(_2479, _2480, _2481));
        float _4468 = isnan(0.0) ? _2486 : (isnan(_2486) ? 0.0 : max(_2486, 0.0));
        float _2489 = isnan(1.0) ? _4468 : (isnan(_4468) ? 1.0 : min(_4468, 1.0));
        float _2490 = dot(vec3(cbLight._m0[_2452].xyz), vec3(_2479, _2480, _2481));
        float _4479 = isnan(0.0) ? _2490 : (isnan(_2490) ? 0.0 : max(_2490, 0.0));
        float _2494 = _2471 * _2471;
        float _2498 = ((_2489 * _2489) * (_2494 + (-1.0))) + 1.0;
        float _2507 = (exp2(log2(1.0 - (isnan(1.0) ? _4479 : (isnan(_4479) ? 1.0 : min(_4479, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2508 = 1.0 - _2471;
        float _2518 = (0.5 / (((_2262 * ((_2485 * _2508) + _2471)) + 9.9999999392252902907785028219223e-09) + (((_2262 * _2508) + _2471) * _2485))) * _2485;
        float _4490 = isnan(0.0) ? _2518 : (isnan(_2518) ? 0.0 : max(_2518, 0.0));
        float _2520 = (isnan(1.0) ? _4490 : (isnan(_4490) ? 1.0 : min(_4490, 1.0))) * (_2494 / ((_2498 * _2498) * 3.141590118408203125));
        float _2521 = isnan(1.0) ? _2112 : (isnan(_2112) ? 1.0 : min(_2112, 1.0));
        _2446 = (((_2507 * cbLight._m0[_2456].x) * _2520) * _2521) + _2382;
        _2448 = (((_2507 * cbLight._m0[_2456].y) * _2520) * _2521) + _2383;
        _2450 = (((_2507 * cbLight._m0[_2456].z) * _2520) * _2521) + _2384;
    }
    float _2556;
    float _2558;
    float _2560;
    if (_2188)
    {
        _2556 = _2446;
        _2558 = _2448;
        _2560 = _2450;
    }
    else
    {
        uint _2567 = _2097 + 3u;
        uint _2571 = _2097 + 11u;
        float _2585 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2567].w)) * _917) * 0.949999988079071044921875);
        float _2586 = _2585 * _2585;
        float _2587 = cbLight._m0[_2567].x + _994;
        float _2588 = cbLight._m0[_2567].y + _995;
        float _2589 = cbLight._m0[_2567].z + _996;
        float _2593 = inversesqrt(dot(vec3(_2587, _2588, _2589), vec3(_2587, _2588, _2589)));
        float _2594 = _2593 * _2587;
        float _2595 = _2593 * _2588;
        float _2596 = _2593 * _2589;
        float _2597 = dot(vec3(_914, _915, _916), vec3(cbLight._m0[_2567].xyz));
        float _4506 = isnan(0.0) ? _2597 : (isnan(_2597) ? 0.0 : max(_2597, 0.0));
        float _2600 = isnan(1.0) ? _4506 : (isnan(_4506) ? 1.0 : min(_4506, 1.0));
        float _2601 = dot(vec3(_914, _915, _916), vec3(_2594, _2595, _2596));
        float _4517 = isnan(0.0) ? _2601 : (isnan(_2601) ? 0.0 : max(_2601, 0.0));
        float _2604 = isnan(1.0) ? _4517 : (isnan(_4517) ? 1.0 : min(_4517, 1.0));
        float _2605 = dot(vec3(cbLight._m0[_2567].xyz), vec3(_2594, _2595, _2596));
        float _4528 = isnan(0.0) ? _2605 : (isnan(_2605) ? 0.0 : max(_2605, 0.0));
        float _2609 = _2586 * _2586;
        float _2613 = ((_2604 * _2604) * (_2609 + (-1.0))) + 1.0;
        float _2622 = (exp2(log2(1.0 - (isnan(1.0) ? _4528 : (isnan(_4528) ? 1.0 : min(_4528, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2623 = 1.0 - _2586;
        float _2633 = (0.5 / (((_2262 * ((_2600 * _2623) + _2586)) + 9.9999999392252902907785028219223e-09) + (((_2262 * _2623) + _2586) * _2600))) * _2600;
        float _4539 = isnan(0.0) ? _2633 : (isnan(_2633) ? 0.0 : max(_2633, 0.0));
        float _2635 = (isnan(1.0) ? _4539 : (isnan(_4539) ? 1.0 : min(_4539, 1.0))) * (_2609 / ((_2613 * _2613) * 3.141590118408203125));
        float _2636 = isnan(1.0) ? _2113 : (isnan(_2113) ? 1.0 : min(_2113, 1.0));
        _2556 = (((_2622 * cbLight._m0[_2571].x) * _2635) * _2636) + _2446;
        _2558 = (((_2622 * cbLight._m0[_2571].y) * _2635) * _2636) + _2448;
        _2560 = (((_2622 * cbLight._m0[_2571].z) * _2635) * _2636) + _2450;
    }
    float _2771;
    float _2773;
    float _2775;
    float _2777;
    float _2779;
    float _2781;
    if (_2095.y == 0u)
    {
        float _2711 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2712 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2711;
        float _2713 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2711;
        float _2714 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2711;
        uvec4 _2726 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2727 = _2726.x;
        uint _2738 = uint((float(_2726.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1003) / _2727))) + floor(float(uint(cbSceneParam._m0[85u].x * _1002) / _2727)));
        float _2748 = (log2(_2714 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2749 = isnan(0.0) ? _2748 : (isnan(_2748) ? 0.0 : max(_2748, 0.0));
        uint _2752 = uint(isnan(14.0) ? _2749 : (isnan(_2749) ? 14.0 : min(_2749, 14.0)));
        uvec4 _2757 = texelFetch(g_lightClusterGridBuffer, int(((_2752 << 2u) + (_2738 << 6u)) >> 2u));
        uint _2758 = _2757.x;
        uint _2759 = _2726.z;
        float _2859;
        float _2861;
        float _2863;
        float _2865;
        float _2867;
        float _2869;
        if (((((1u << ((_2759 >> 4u) & 15u)) + 4294967295u) & _2758) == 0u) || ((_2759 & 240u) == 0u))
        {
            _2859 = 0.0;
            _2861 = 0.0;
            _2863 = 0.0;
            _2865 = 0.0;
            _2867 = 0.0;
            _2869 = 0.0;
        }
        else
        {
            float _2860;
            float _2862;
            float _2864;
            float _2866;
            float _2868;
            float _2870;
            float _3004 = 0.0;
            float _3005 = 0.0;
            float _3006 = 0.0;
            float _3007 = 0.0;
            float _3008 = 0.0;
            float _3009 = 0.0;
            uint _3010 = 0u;
            uint _3019;
            bool _3020;
            for (;;)
            {
                _3019 = texelFetch(g_lightClassification, int((((_2752 << 5u) + (_2738 << 9u)) + (_3010 << 2u)) >> 2u)).x;
                _3020 = _3019 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_3020)
                {
                    frontier_phi_61_pred = _3004;
                    frontier_phi_61_pred_1 = _3009;
                    frontier_phi_61_pred_2 = _3008;
                    frontier_phi_61_pred_3 = _3007;
                    frontier_phi_61_pred_4 = _3006;
                    frontier_phi_61_pred_5 = _3005;
                }
                else
                {
                    float _3128;
                    float _3129;
                    float _3130;
                    float _3131;
                    float _3132;
                    float _3133;
                    uint _3134;
                    _3128 = _3004;
                    _3129 = _3005;
                    _3130 = _3006;
                    _3131 = _3007;
                    _3132 = _3008;
                    _3133 = _3009;
                    _3134 = _3019;
                    float _3060;
                    float _3061;
                    float _3062;
                    float _3063;
                    float _3064;
                    float _3065;
                    for (;;)
                    {
                        uint _3138 = uint(findLSB(_3134)) + (_3010 << 5u);
                        uint _3135 = (_3134 + 4294967295u) & _3134;
                        uint _3140 = _3138 * 48u;
                        vec4 _3154 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3140)).x, texelFetch(g_PointLightRenderingBuffer, int(_3140 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3140 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3140 + 3u)).x));
                        uint _3160 = (_3138 * 48u) + 4u;
                        vec4 _3173 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3160)).x, texelFetch(g_PointLightRenderingBuffer, int(_3160 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3160 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3160 + 3u)).x));
                        uint _3179 = (_3138 * 48u) + 8u;
                        vec3 _3190 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3179)).x, texelFetch(g_PointLightRenderingBuffer, int(_3179 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3179 + 2u)).x));
                        float _3194 = _3154.x - _2712;
                        float _3195 = _3154.y - _2713;
                        float _3196 = _3154.z - _2714;
                        float _3197 = dot(vec3(_3194, _3195, _3196), vec3(_3194, _3195, _3196));
                        float _3200 = inversesqrt(_3197);
                        float _3201 = _3200 * _3194;
                        float _3202 = _3200 * _3195;
                        float _3203 = _3200 * _3196;
                        float _3204 = dot(vec3(_1021, _1024, _1027), vec3(_3201, _3202, _3203));
                        float _3209 = 1.0 - (_3197 * _3154.w);
                        float _4565 = isnan(0.0) ? _3209 : (isnan(_3209) ? 0.0 : max(_3209, 0.0));
                        float _3210 = isnan(1.0) ? _4565 : (isnan(_4565) ? 1.0 : min(_4565, 1.0));
                        float _3211 = sqrt(_3197) * _3173.w;
                        float _3214 = 1.39999997615814208984375 / (_3211 + 1.39999997615814208984375);
                        float _3215 = _3214 * _3214;
                        float _3218 = ((1.0 - _3215) * _3204) + _3215;
                        float _3221 = _3211 * _3211;
                        float _3225 = ((isnan(0.0) ? _3218 : (isnan(_3218) ? 0.0 : max(_3218, 0.0))) * _3210) / ((_3221 * 0.699999988079071044921875) + 1.0);
                        float _3229 = (-0.0) - _2712;
                        float _3230 = (-0.0) - _2713;
                        float _3231 = (-0.0) - _2714;
                        float _3235 = inversesqrt(dot(vec3(_3229, _3230, _3231), vec3(_3229, _3230, _3231)));
                        float _3236 = _3235 * _3229;
                        float _3237 = _3235 * _3230;
                        float _3238 = _3235 * _3231;
                        float _3246 = exp2(log2(1.0 / ((_3221 * 3.5) + 5.0)) * 0.25);
                        float _3247 = 1.0 - _1081;
                        float _3254 = sqrt(1.0 - ((1.0 - (_3247 * _3247)) * (1.0 - (_3246 * _3246))));
                        float _3255 = _3254 * _3254;
                        float _3256 = _3255 * _3255;
                        float _3257 = _3236 + _3201;
                        float _3258 = _3237 + _3202;
                        float _3259 = _3238 + _3203;
                        float _3263 = inversesqrt(dot(vec3(_3257, _3258, _3259), vec3(_3257, _3258, _3259)));
                        float _3267 = dot(vec3(_1021, _1024, _1027), vec3(_3236, _3237, _3238));
                        float _4581 = isnan(0.0) ? _3267 : (isnan(_3267) ? 0.0 : max(_3267, 0.0));
                        float _3270 = isnan(1.0) ? _4581 : (isnan(_4581) ? 1.0 : min(_4581, 1.0));
                        float _3271 = dot(vec3(_1021, _1024, _1027), vec3(_3263 * _3257, _3263 * _3258, _3263 * _3259));
                        float _4592 = isnan(0.0) ? _3271 : (isnan(_3271) ? 0.0 : max(_3271, 0.0));
                        float _3274 = isnan(1.0) ? _4592 : (isnan(_4592) ? 1.0 : min(_4592, 1.0));
                        float _3278 = ((_3274 * _3274) * (_3256 + (-1.0))) + 1.0;
                        float _3279 = _3214 * _3255;
                        float _3280 = _3279 * _3279;
                        float _3283 = ((1.0 - _3280) * _3204) + _3280;
                        float _4603 = isnan(0.0) ? _3283 : (isnan(_3283) ? 0.0 : max(_3283, 0.0));
                        float _3284 = isnan(1.0) ? _4603 : (isnan(_4603) ? 1.0 : min(_4603, 1.0));
                        float _3285 = 1.0 - _3255;
                        float _3295 = (0.5 / (((_3284 * ((_3270 * _3285) + _3255)) + 9.9999999392252902907785028219223e-09) + (((_3284 * _3285) + _3255) * _3270))) * _3284;
                        float _4614 = isnan(0.0) ? _3295 : (isnan(_3295) ? 0.0 : max(_3295, 0.0));
                        float _3306 = (((_3256 * 3.1415927410125732421875) * (isnan(1.0) ? _4614 : (isnan(_4614) ? 1.0 : min(_4614, 1.0)))) / ((_3278 * _3278) * ((_3221 * 2.1991131305694580078125) + 3.141590118408203125))) * _3210;
                        _3063 = (_3225 * _3173.x) + _3131;
                        _3064 = (_3225 * _3173.y) + _3132;
                        _3065 = (_3225 * _3173.z) + _3133;
                        _3060 = (_3306 * _3190.x) + _3128;
                        _3061 = (_3306 * _3190.y) + _3129;
                        _3062 = (_3306 * _3190.z) + _3130;
                        if (_3135 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3128 = _3060;
                            _3129 = _3061;
                            _3130 = _3062;
                            _3131 = _3063;
                            _3132 = _3064;
                            _3133 = _3065;
                            _3134 = _3135;
                        }
                    }
                    frontier_phi_61_pred = _3060;
                    frontier_phi_61_pred_1 = _3065;
                    frontier_phi_61_pred_2 = _3064;
                    frontier_phi_61_pred_3 = _3063;
                    frontier_phi_61_pred_4 = _3062;
                    frontier_phi_61_pred_5 = _3061;
                }
                _2860 = frontier_phi_61_pred;
                _2870 = frontier_phi_61_pred_1;
                _2868 = frontier_phi_61_pred_2;
                _2866 = frontier_phi_61_pred_3;
                _2864 = frontier_phi_61_pred_4;
                _2862 = frontier_phi_61_pred_5;
                uint _3011 = _3010 + 1u;
                if (_3011 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3004 = _2860;
                    _3005 = _2862;
                    _3006 = _2864;
                    _3007 = _2866;
                    _3008 = _2868;
                    _3009 = _2870;
                    _3010 = _3011;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2859 = _2860;
            _2861 = _2862;
            _2863 = _2864;
            _2865 = _2866;
            _2867 = _2868;
            _2869 = _2870;
        }
        uvec4 _2873 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2874 = _2873.z;
        uint _2876 = (_2874 >> 8u) & 15u;
        float _2972;
        float _2974;
        float _2976;
        float _2978;
        float _2980;
        float _2982;
        if (((4294967295u << _2876) & _2758) == 0u)
        {
            _2972 = _2859;
            _2974 = _2861;
            _2976 = _2863;
            _2978 = _2865;
            _2980 = _2867;
            _2982 = _2869;
        }
        else
        {
            float _2997 = inversesqrt(dot(vec3(_2712, _2713, _2714), vec3(_2712, _2713, _2714)));
            float _2998 = _2997 * _2712;
            float _2999 = _2997 * _2713;
            float _3000 = _2997 * _2714;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2876 < ((_2874 >> 12u) & 15u))
            {
                float _2973;
                float _2975;
                float _2977;
                float _2979;
                float _2981;
                float _2983;
                float _3111 = _2859;
                float _3112 = _2861;
                float _3113 = _2863;
                float _3114 = _2865;
                float _3115 = _2867;
                float _3116 = _2869;
                uint _3117 = _2876;
                uint _3126;
                bool _3127;
                for (;;)
                {
                    _3126 = texelFetch(g_lightClassification, int((((_2752 << 5u) + (_2738 << 9u)) + (_3117 << 2u)) >> 2u)).x;
                    _3127 = _3126 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_3127)
                    {
                        frontier_phi_67_pred = _3114;
                        frontier_phi_67_pred_1 = _3115;
                        frontier_phi_67_pred_2 = _3116;
                        frontier_phi_67_pred_3 = _3113;
                        frontier_phi_67_pred_4 = _3112;
                        frontier_phi_67_pred_5 = _3111;
                    }
                    else
                    {
                        float _3311;
                        float _3312;
                        float _3313;
                        float _3314;
                        float _3315;
                        float _3316;
                        float _3604;
                        float _3605;
                        float _3606;
                        float _3607;
                        float _3608;
                        float _3609;
                        float _3324 = _3111;
                        float _3325 = _3112;
                        float _3326 = _3113;
                        float _3327 = _3114;
                        float _3328 = _3115;
                        float _3329 = _3116;
                        uint _3330 = _3126;
                        uint _3331;
                        vec4 _3356;
                        float _3357;
                        vec4 _3372;
                        vec3 _3384;
                        vec4 _3399;
                        vec4 _3414;
                        float _3460;
                        bool _3461;
                        for (;;)
                        {
                            uint _3341 = ((_3117 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3330));
                            _3331 = (_3330 + 4294967295u) & _3330;
                            uint _3343 = _3341 * 40u;
                            _3356 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3343)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3343 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3343 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3343 + 3u)).x));
                            _3357 = _3356.w;
                            uint _3359 = (_3341 * 40u) + 4u;
                            _3372 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3359)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3359 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3359 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3359 + 3u)).x));
                            uint _3374 = (_3341 * 40u) + 8u;
                            _3384 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3374)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3374 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3374 + 2u)).x));
                            uint _3386 = (_3341 * 40u) + 16u;
                            _3399 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3386)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3386 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3386 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3386 + 3u)).x));
                            uint _3401 = (_3341 * 40u) + 20u;
                            _3414 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3401)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3401 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3401 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3401 + 3u)).x));
                            uint _3416 = (_3341 * 40u) + 24u;
                            vec4 _3429 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3416)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3416 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3416 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3416 + 3u)).x));
                            uint _3435 = (_3341 * 40u) + 28u;
                            vec4 _3448 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3435)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3435 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3435 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3435 + 3u)).x));
                            _3460 = fma(_2714, _3448.z, fma(_2713, _3448.y, _3448.x * _2712)) + _3448.w;
                            _3461 = !((fma(_2714, _3429.z, fma(_2713, _3429.y, _3429.x * _2712)) + _3429.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3461)
                            {
                                float _3488 = _3356.x - _2712;
                                float _3489 = _3356.y - _2713;
                                float _3490 = _3356.z - _2714;
                                float _3491 = dot(vec3(_3488, _3489, _3490), vec3(_3488, _3489, _3490));
                                float _3494 = inversesqrt(_3491);
                                float _3495 = _3494 * _3488;
                                float _3496 = _3494 * _3489;
                                float _3497 = _3494 * _3490;
                                float _3501 = 1.0 - (_3491 / (_3357 * _3357));
                                float _4625 = isnan(0.0) ? _3501 : (isnan(_3501) ? 0.0 : max(_3501, 0.0));
                                float _3502 = isnan(1.0) ? _4625 : (isnan(_4625) ? 1.0 : min(_4625, 1.0));
                                float _3506 = sqrt(_3491) * _3372.w;
                                float _3508 = 1.39999997615814208984375 / (_3506 + 1.39999997615814208984375);
                                float _3509 = _3508 * _3508;
                                float _3512 = ((1.0 - _3509) * dot(vec3(_3495, _3496, _3497), vec3(_1021, _1024, _1027))) + _3509;
                                float _3515 = _3506 * _3506;
                                float _3519 = (fma(_2714, _3399.z, fma(_2713, _3399.y, _3399.x * _2712)) + _3399.w) / _3460;
                                float _3520 = (fma(_2714, _3414.z, fma(_2713, _3414.y, _3414.x * _2712)) + _3414.w) / _3460;
                                float _3524 = 1.0 - dot(vec2(_3519, _3520), vec2(_3519, _3520));
                                float _4641 = isnan(0.0) ? _3524 : (isnan(_3524) ? 0.0 : max(_3524, 0.0));
                                float _3525 = isnan(1.0) ? _4641 : (isnan(_4641) ? 1.0 : min(_4641, 1.0));
                                float _3526 = _3525 * (((isnan(0.0) ? _3512 : (isnan(_3512) ? 0.0 : max(_3512, 0.0))) * _3502) / ((_3515 * 0.699999988079071044921875) + 1.0));
                                float _3538 = exp2(log2(1.0 / ((_3515 * 3.5) + 5.0)) * 0.25);
                                float _3539 = 1.0 - _1081;
                                float _3546 = sqrt(1.0 - ((1.0 - (_3539 * _3539)) * (1.0 - (_3538 * _3538))));
                                float _3547 = _3546 * _3546;
                                float _3548 = _3547 * _3547;
                                float _3549 = _3495 - _2998;
                                float _3550 = _3496 - _2999;
                                float _3551 = _3497 - _3000;
                                float _3555 = inversesqrt(dot(vec3(_3549, _3550, _3551), vec3(_3549, _3550, _3551)));
                                float _3559 = dot(vec3(_1021, _1024, _1027), vec3((-0.0) - _2998, (-0.0) - _2999, (-0.0) - _3000));
                                float _4652 = isnan(0.0) ? _3559 : (isnan(_3559) ? 0.0 : max(_3559, 0.0));
                                float _3562 = isnan(1.0) ? _4652 : (isnan(_4652) ? 1.0 : min(_4652, 1.0));
                                float _3563 = dot(vec3(_1021, _1024, _1027), vec3(_3555 * _3549, _3555 * _3550, _3555 * _3551));
                                float _4663 = isnan(0.0) ? _3563 : (isnan(_3563) ? 0.0 : max(_3563, 0.0));
                                float _3566 = isnan(1.0) ? _4663 : (isnan(_4663) ? 1.0 : min(_4663, 1.0));
                                float _3570 = ((_3566 * _3566) * (_3548 + (-1.0))) + 1.0;
                                float _3571 = _3508 * _3547;
                                float _3572 = _3571 * _3571;
                                float _3578 = ((1.0 - _3572) * dot(vec3(_1021, _1024, _1027), vec3(_3495, _3496, _3497))) + _3572;
                                float _4674 = isnan(0.0) ? _3578 : (isnan(_3578) ? 0.0 : max(_3578, 0.0));
                                float _3579 = isnan(1.0) ? _4674 : (isnan(_4674) ? 1.0 : min(_4674, 1.0));
                                float _3580 = 1.0 - _3547;
                                float _3590 = (0.5 / (((_3579 * ((_3562 * _3580) + _3547)) + 9.9999999392252902907785028219223e-09) + (((_3579 * _3580) + _3547) * _3562))) * _3579;
                                float _4685 = isnan(0.0) ? _3590 : (isnan(_3590) ? 0.0 : max(_3590, 0.0));
                                float _3600 = (_3525 * _3502) * (((_3548 * 3.1415927410125732421875) * (isnan(1.0) ? _4685 : (isnan(_4685) ? 1.0 : min(_4685, 1.0)))) / ((_3570 * _3570) * ((_3515 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3600 * _3384.x;
                                frontier_phi_73_pred_1 = _3600 * _3384.y;
                                frontier_phi_73_pred_2 = _3526 * _3372.z;
                                frontier_phi_73_pred_3 = _3526 * _3372.y;
                                frontier_phi_73_pred_4 = _3526 * _3372.x;
                                frontier_phi_73_pred_5 = _3600 * _3384.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3604 = frontier_phi_73_pred;
                            _3605 = frontier_phi_73_pred_1;
                            _3609 = frontier_phi_73_pred_2;
                            _3608 = frontier_phi_73_pred_3;
                            _3607 = frontier_phi_73_pred_4;
                            _3606 = frontier_phi_73_pred_5;
                            _3314 = _3607 + _3327;
                            _3315 = _3608 + _3328;
                            _3316 = _3609 + _3329;
                            _3311 = _3604 + _3324;
                            _3312 = _3605 + _3325;
                            _3313 = _3606 + _3326;
                            if (_3331 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3324 = _3311;
                                _3325 = _3312;
                                _3326 = _3313;
                                _3327 = _3314;
                                _3328 = _3315;
                                _3329 = _3316;
                                _3330 = _3331;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3314;
                        frontier_phi_67_pred_1 = _3315;
                        frontier_phi_67_pred_2 = _3316;
                        frontier_phi_67_pred_3 = _3313;
                        frontier_phi_67_pred_4 = _3312;
                        frontier_phi_67_pred_5 = _3311;
                    }
                    _2979 = frontier_phi_67_pred;
                    _2981 = frontier_phi_67_pred_1;
                    _2983 = frontier_phi_67_pred_2;
                    _2977 = frontier_phi_67_pred_3;
                    _2975 = frontier_phi_67_pred_4;
                    _2973 = frontier_phi_67_pred_5;
                    uint _3118 = _3117 + 1u;
                    if (_3118 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3111 = _2973;
                        _3112 = _2975;
                        _3113 = _2977;
                        _3114 = _2979;
                        _3115 = _2981;
                        _3116 = _2983;
                        _3117 = _3118;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2981;
                frontier_phi_55_56_ladder_1 = _2983;
                frontier_phi_55_56_ladder_2 = _2979;
                frontier_phi_55_56_ladder_3 = _2977;
                frontier_phi_55_56_ladder_4 = _2975;
                frontier_phi_55_56_ladder_5 = _2973;
            }
            else
            {
                frontier_phi_55_56_ladder = _2867;
                frontier_phi_55_56_ladder_1 = _2869;
                frontier_phi_55_56_ladder_2 = _2865;
                frontier_phi_55_56_ladder_3 = _2863;
                frontier_phi_55_56_ladder_4 = _2861;
                frontier_phi_55_56_ladder_5 = _2859;
            }
            _2972 = frontier_phi_55_56_ladder_5;
            _2974 = frontier_phi_55_56_ladder_4;
            _2976 = frontier_phi_55_56_ladder_3;
            _2978 = frontier_phi_55_56_ladder_2;
            _2980 = frontier_phi_55_56_ladder;
            _2982 = frontier_phi_55_56_ladder_1;
        }
        float _2987 = isnan(1.0) ? _1065 : (isnan(_1065) ? 1.0 : min(_1065, 1.0));
        _2771 = (_2987 * _2978) + _2226;
        _2773 = (_2987 * _2980) + _2228;
        _2775 = (_2987 * _2982) + _2230;
        _2777 = ((_2972 * 0.039999999105930328369140625) * _2987) + _2556;
        _2779 = ((_2974 * 0.039999999105930328369140625) * _2987) + _2558;
        _2781 = ((_2976 * 0.039999999105930328369140625) * _2987) + _2560;
    }
    else
    {
        _2771 = _2226;
        _2773 = _2228;
        _2775 = _2230;
        _2777 = _2556;
        _2779 = _2558;
        _2781 = _2560;
    }
    float _4701 = isnan(0.0) ? _1050 : (isnan(_1050) ? 0.0 : max(_1050, 0.0));
    float _4712 = isnan(0.0) ? _1051 : (isnan(_1051) ? 0.0 : max(_1051, 0.0));
    float _4723 = isnan(0.0) ? _1052 : (isnan(_1052) ? 0.0 : max(_1052, 0.0));
    uint _2801 = _276 + 6u;
    float _2809 = _1002 / cbSceneParam._m0[86u].x;
    float _2810 = _1003 / cbSceneParam._m0[86u].y;
    vec4 _2824 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2809, _2810, (log2((isnan(cbSceneParam._m0[77u].w) ? _935 : (isnan(_935) ? cbSceneParam._m0[77u].w : min(_935, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2826 = _2824.x;
    float _2827 = _2824.y;
    float _2828 = _2824.z;
    float _2829 = _2824.w;
    float _2922;
    float _2924;
    float _2926;
    float _2928;
    if (_935 > cbSceneParam._m0[78u].w)
    {
        float _2884 = isnan(_935) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _935 : min(cbSceneParam._m0[80u].w, _935));
        float _2885 = _2884 / _935;
        float _2896 = _2885 * _987;
        float _2897 = _988 * _2885;
        float _2898 = (-0.0) - _2897;
        float _2900 = _2885 * _989;
        float _2902 = (cbSceneParam._m0[77u].w * _2898) / _2884;
        float _2903 = _2902 + cbSceneParam._m0[79u].w;
        float _2904 = cbSceneParam._m0[79u].w - _2897;
        float _2910 = sqrt(((_2896 * _2896) + (_2897 * _2897)) + (_2900 * _2900));
        float _2913 = (1.0 - (cbSceneParam._m0[77u].w / _2884)) * _2910;
        float _2918 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2920 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3073;
        if (abs((_2898 - _2902) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3073 = ((((_2903 > 0.0) ? exp2(_2918 * _2903) : (2.0 - exp2(_2920 * _2903))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2913;
        }
        else
        {
            float _3033 = 1.0 / cbSceneParam._m0[80u].x;
            float _3034 = isnan(_2904) ? _2903 : (isnan(_2903) ? _2904 : max(_2903, _2904));
            float _3035 = isnan(_2904) ? _2903 : (isnan(_2903) ? _2904 : min(_2903, _2904));
            float _3044 = isnan(0.0) ? _3034 : (isnan(_3034) ? 0.0 : min(_3034, 0.0));
            float _3045 = isnan(0.0) ? _3035 : (isnan(_3035) ? 0.0 : min(_3035, 0.0));
            _3073 = ((abs(_2910 / _2898) * cbSceneParam._m0[80u].y) * ((((_3044 - _3045) * 2.0) - ((exp2(_2918 * (isnan(0.0) ? _3034 : (isnan(_3034) ? 0.0 : max(_3034, 0.0)))) - exp2(_2918 * (isnan(0.0) ? _3035 : (isnan(_3035) ? 0.0 : max(_3035, 0.0))))) * _3033)) - ((exp2(_2920 * _3044) - exp2(_2920 * _3045)) * _3033))) + (_2913 * cbSceneParam._m0[80u].z);
        }
        vec4 _3075 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2809, _2810, 1.0), 0.0);
        float _3084 = exp2((_3073 * (-1.44269502162933349609375)) * (1.0 - _3075.w));
        float _3085 = log2(_3084);
        float _3101 = log2(_2829);
        _2922 = (exp2(_3101 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3085 * cbSceneParam._m0[78u].x)) * _3075.x) / cbSceneParam._m0[78u].x)) + _2826;
        _2924 = (exp2(_3101 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3085 * cbSceneParam._m0[78u].y)) * _3075.y) / cbSceneParam._m0[78u].y)) + _2827;
        _2926 = (exp2(_3101 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3085 * cbSceneParam._m0[78u].z)) * _3075.z) / cbSceneParam._m0[78u].z)) + _2828;
        _2928 = _3084 * _2829;
    }
    else
    {
        _2922 = _2826;
        _2924 = _2827;
        _2926 = _2828;
        _2928 = _2829;
    }
    float _2940 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2941 = _2940 == 3.0;
    float _2942 = log2(_2928);
    float _2949 = exp2(_2942 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4701 : (isnan(_4701) ? 1.0 : min(_4701, 1.0))) * (_2771 + ((isnan(0.0) ? _1789 : (isnan(_1789) ? 0.0 : max(_1789, 0.0))) * _1065))) + ((_2777 + ((isnan(0.0) ? _2079 : (isnan(_2079) ? 0.0 : max(_2079, 0.0))) * _1868)) * cbPerFrame._m0[3u].x));
    float _2950 = exp2(_2942 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4712 : (isnan(_4712) ? 1.0 : min(_4712, 1.0))) * (_2773 + ((isnan(0.0) ? _1792 : (isnan(_1792) ? 0.0 : max(_1792, 0.0))) * _1065))) + ((_2779 + ((isnan(0.0) ? _2082 : (isnan(_2082) ? 0.0 : max(_2082, 0.0))) * _1868)) * cbPerFrame._m0[3u].x));
    float _2951 = exp2(_2942 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4723 : (isnan(_4723) ? 1.0 : min(_4723, 1.0))) * (_2775 + ((isnan(0.0) ? _1795 : (isnan(_1795) ? 0.0 : max(_1795, 0.0))) * _1065))) + ((_2781 + ((isnan(0.0) ? _2085 : (isnan(_2085) ? 0.0 : max(_2085, 0.0))) * _1868)) * cbPerFrame._m0[3u].x));
    float _2960 = (_2940 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2960 * (_2941 ? _2949 : (_2949 + (cbSceneParam._m0[72u].w * _2922)));
    SV_Target.y = _2960 * (_2941 ? _2950 : (_2950 + (cbSceneParam._m0[72u].w * _2924)));
    SV_Target.z = _2960 * (_2941 ? _2951 : (_2951 + (cbSceneParam._m0[72u].w * _2926)));
    SV_Target.w = cbInstanceData._m0[_2801].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2801].w;
}


