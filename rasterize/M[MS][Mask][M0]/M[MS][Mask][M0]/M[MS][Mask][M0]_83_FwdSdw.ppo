#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 13) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_22;
layout(set = 0, binding = 14) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_10;
layout(set = 0, binding = 20) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_6;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1336;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _225 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _226 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _227 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _233 = inversesqrt(dot(vec3(_225, _226, _227), vec3(_225, _226, _227)));
    float _240 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _247 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _261 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _263 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _264 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3922 = isnan(0.0) ? _261 : (isnan(_261) ? 0.0 : max(_261, 0.0));
    float _3933 = isnan(0.0) ? _263 : (isnan(_263) ? 0.0 : max(_263, 0.0));
    float _3944 = isnan(0.0) ? _264 : (isnan(_264) ? 0.0 : max(_264, 0.0));
    uint _274 = uint(roundEven(NORMAL.w)) * 13u;
    uint _279 = _274 + 1u;
    uint _283 = _274 + 2u;
    float _292 = sqrt(((cbInstanceData._m0[_279].x * cbInstanceData._m0[_279].x) + (cbInstanceData._m0[_274].x * cbInstanceData._m0[_274].x)) + (cbInstanceData._m0[_283].x * cbInstanceData._m0[_283].x));
    float _293 = _292 * TEXCOORD.z;
    float _294 = _292 * TEXCOORD.w;
    vec4 _307 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _293) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _294) + cbTextureTilingScale._m0[13u].w));
    vec4 _331 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _336 = _331.x * cbMtdParam._m0[11u].x;
    float _337 = _331.y * cbMtdParam._m0[11u].y;
    float _338 = _331.z * cbMtdParam._m0[11u].z;
    vec4 _357 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _293) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _294) + cbTextureTilingScale._m0[5u].w));
    vec4 _376 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _411 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _413 = _411.x;
    float _425 = dot(vec4(_413, _411.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _442 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _376.x) * 2.0) - ((((_413 - _425) * cbMtdParam._m0[24u].z) + _425) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3955 = isnan(0.0) ? _442 : (isnan(_442) ? 0.0 : max(_442, 0.0));
    float _443 = isnan(1.0) ? _3955 : (isnan(_3955) ? 1.0 : min(_3955, 1.0));
    float _450 = (_443 * ((_357.x * cbMtdParam._m0[12u].x) - _336)) + _336;
    float _451 = (_443 * ((_357.y * cbMtdParam._m0[12u].y) - _337)) + _337;
    float _452 = (_443 * ((_357.z * cbMtdParam._m0[12u].z) - _338)) + _338;
    vec4 _469 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _293) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _294) + cbTextureTilingScale._m0[3u].w));
    vec4 _489 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _491 = _489.x;
    float _501 = dot(vec4(_491, _489.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _515 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _376.y) * 2.0) - ((((_491 - _501) * cbMtdParam._m0[24u].z) + _501) * cbMtdParam._m0[20u].w))) + 1.0;
    float _3966 = isnan(0.0) ? _515 : (isnan(_515) ? 0.0 : max(_515, 0.0));
    float _516 = isnan(1.0) ? _3966 : (isnan(_3966) ? 1.0 : min(_3966, 1.0));
    float _523 = (_516 * ((_469.x * cbMtdParam._m0[13u].x) - _450)) + _450;
    float _524 = (_516 * ((_469.y * cbMtdParam._m0[13u].y) - _451)) + _451;
    float _525 = (_516 * ((_469.z * cbMtdParam._m0[13u].z) - _452)) + _452;
    float _529 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _307.x) * _523;
    float _532 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _307.y) * _524;
    float _535 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _307.z) * _525;
    float _542 = ((_523 - _529) * (isnan(1.0) ? _3922 : (isnan(_3922) ? 1.0 : min(_3922, 1.0)))) + _529;
    float _543 = ((_524 - _532) * (isnan(1.0) ? _3933 : (isnan(_3933) ? 1.0 : min(_3933, 1.0)))) + _532;
    float _544 = ((_525 - _535) * (isnan(1.0) ? _3944 : (isnan(_3944) ? 1.0 : min(_3944, 1.0)))) + _535;
    vec4 _563 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _293) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _294) + cbTextureTilingScale._m0[14u].w));
    vec4 _582 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _293) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _294) + cbTextureTilingScale._m0[20u].w));
    vec4 _605 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _293) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _294) + cbTextureTilingScale._m0[4u].w));
    vec4 _622 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _624 = _622.x;
    float _625 = _622.y;
    float _626 = _622.z;
    float _633 = ((_605.x - _624) * _443) + _624;
    float _634 = ((_605.y - _625) * _443) + _625;
    float _635 = ((_605.z - _626) * _443) + _626;
    vec4 _647 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _293) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _294) + cbTextureTilingScale._m0[2u].w));
    float _660 = ((_647.z - _635) * _516) + _635;
    float _663 = ((((_647.x - _633) * _516) + _633) * 2.0) + (-1.0);
    float _664 = ((((_647.y - _634) * _516) + _634) * 2.0) + (-1.0);
    float _665 = dot(vec2(_663, _664), vec2(_663, _664));
    float _3977 = isnan(0.0) ? _665 : (isnan(_665) ? 0.0 : max(_665, 0.0));
    float _670 = sqrt(1.0 - (isnan(1.0) ? _3977 : (isnan(_3977) ? 1.0 : min(_3977, 1.0))));
    vec4 _684 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _709 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _293) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _294) + cbTextureTilingScale._m0[11u].w));
    float _711 = _709.x;
    float _712 = 1.0 - _711;
    float _725 = (TEXCOORD_8.w - ((cbMtdParam._m0[21u].z * (1.0 - TEXCOORD_8.w)) * ((((_711 - _712) * cbMtdParam._m0[24u].w) + _712) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3988 = isnan(0.0) ? _725 : (isnan(_725) ? 0.0 : max(_725, 0.0));
    float _726 = isnan(1.0) ? _3988 : (isnan(_3988) ? 1.0 : min(_3988, 1.0));
    float _733 = (_726 * ((_563.x * cbMtdParam._m0[18u].x) - _542)) + _542;
    float _734 = (_726 * ((_563.y * cbMtdParam._m0[18u].y) - _543)) + _543;
    float _735 = (_726 * ((_563.z * cbMtdParam._m0[18u].z) - _544)) + _544;
    float _740 = (((_582.z - _660) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _660;
    float _744 = ((_684.z - _740) * cbMtdParam._m0[19u].w) + _740;
    vec4 _757 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _293) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _294) + cbTextureTilingScale._m0[15u].w));
    float _764 = (_757.x * 2.0) + (-1.0);
    float _765 = (_757.y * 2.0) + (-1.0);
    float _766 = dot(vec2(_764, _765), vec2(_764, _765));
    float _3999 = isnan(0.0) ? _766 : (isnan(_766) ? 0.0 : max(_766, 0.0));
    float _774 = (_726 * (_757.z - _744)) + _744;
    float _783 = (_663 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_582.x * 2.0) + (-1.0)))) + (((_684.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _784 = (_664 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_582.y * 2.0) + (-1.0)))) + (((_684.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _796 = (((_764 - _783) + (cbMtdParam._m0[21u].x * _783)) * _726) + _783;
    float _797 = (((_765 - _784) + (cbMtdParam._m0[21u].x * _784)) * _726) + _784;
    float _798 = (_726 * (sqrt(1.0 - (isnan(1.0) ? _3999 : (isnan(_3999) ? 1.0 : min(_3999, 1.0)))) - _670)) + _670;
    float _800 = cbMtdParam._m0[22u].x + _684.w;
    float _803 = fma(_798, _240 * NORMAL.x, fma(_797, _247 * TANGENT.x, (_233 * _225) * _796));
    float _806 = fma(_798, _240 * NORMAL.y, fma(_797, _247 * TANGENT.y, (_233 * _226) * _796));
    float _809 = fma(_798, _240 * NORMAL.z, fma(_797, _247 * TANGENT.z, (_233 * _227) * _796));
    float _813 = inversesqrt(dot(vec3(_803, _806, _809), vec3(_803, _806, _809)));
    float _814 = _813 * _803;
    float _815 = _813 * _806;
    float _816 = _813 * _809;
    float _4010 = isnan(0.0) ? _774 : (isnan(_774) ? 0.0 : max(_774, 0.0));
    float _817 = isnan(1.0) ? _4010 : (isnan(_4010) ? 1.0 : min(_4010, 1.0));
    float _4021 = isnan(0.0) ? _800 : (isnan(_800) ? 0.0 : max(_800, 0.0));
    float _4032 = isnan(0.0) ? _733 : (isnan(_733) ? 0.0 : max(_733, 0.0));
    float _4043 = isnan(0.0) ? _734 : (isnan(_734) ? 0.0 : max(_734, 0.0));
    float _4054 = isnan(0.0) ? _735 : (isnan(_735) ? 0.0 : max(_735, 0.0));
    float _835 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _877 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _887 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _877);
    float _888 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _877);
    float _889 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _877);
    float _893 = inversesqrt(dot(vec3(_887, _888, _889), vec3(_887, _888, _889)));
    float _894 = _887 * _893;
    float _895 = _888 * _893;
    float _896 = _889 * _893;
    float _902 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _903 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _921 = fma(_816, cbSceneParam._m0[5u].z, fma(_815, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _814));
    float _924 = fma(_816, cbSceneParam._m0[6u].z, fma(_815, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _814));
    float _927 = fma(_816, cbSceneParam._m0[7u].z, fma(_815, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _814));
    uint _941 = (_274 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _947 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4032 : (isnan(_4032) ? 1.0 : min(_4032, 1.0)))) * cbInstanceData._m0[_941].x;
    float _948 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4043 : (isnan(_4043) ? 1.0 : min(_4043, 1.0)))) * cbInstanceData._m0[_941].y;
    float _949 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4054 : (isnan(_4054) ? 1.0 : min(_4054, 1.0)))) * cbInstanceData._m0[_941].z;
    float _4065 = isnan(0.0) ? _947 : (isnan(_947) ? 0.0 : max(_947, 0.0));
    float _950 = isnan(1.0) ? _4065 : (isnan(_4065) ? 1.0 : min(_4065, 1.0));
    float _4076 = isnan(0.0) ? _948 : (isnan(_948) ? 0.0 : max(_948, 0.0));
    float _951 = isnan(1.0) ? _4076 : (isnan(_4076) ? 1.0 : min(_4076, 1.0));
    float _4087 = isnan(0.0) ? _949 : (isnan(_949) ? 0.0 : max(_949, 0.0));
    float _952 = isnan(1.0) ? _4087 : (isnan(_4087) ? 1.0 : min(_4087, 1.0));
    vec4 _961 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _902, cbSceneParam._m0[86u].y * _903));
    float _965 = ((isnan(1.0) ? _4021 : (isnan(_4021) ? 1.0 : min(_4021, 1.0))) * TEXCOORD_5.w) * _961.x;
    float _966 = dot(vec3(_814, _815, _816), vec3(_894, _895, _896));
    float _969 = _966 * 2.0;
    float _973 = (_969 * _814) - _894;
    float _974 = (_969 * _815) - _895;
    float _975 = (_969 * _816) - _896;
    float _979 = abs(dot(vec3(_894, _895, _896), vec3(_814, _815, _816)));
    float _4098 = isnan(0.0) ? _979 : (isnan(_979) ? 0.0 : max(_979, 0.0));
    float _981 = sqrt(_817);
    float _994 = exp2((_981 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4098 : (isnan(_4098) ? 1.0 : min(_4098, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_981 * 3.0));
    float _1026 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1030 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1034 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1335;
    float _1337;
    float _1338;
    float _1339;
    float _1340;
    float _1341;
    float _1342;
    float _1343;
    float _1344;
    float _1345;
    float _1346;
    float _1347;
    float _1348;
    float _1349;
    float _1350;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1060 = fma(_1034, cbModelParam._m0[26u].z, fma(_1030, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1026));
        float _1064 = fma(_1034, cbModelParam._m0[27u].z, fma(_1030, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1026));
        float _1068 = fma(_1034, cbModelParam._m0[28u].z, fma(_1030, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1026));
        float _1093 = _1026 + _814;
        float _1094 = _1030 + _815;
        float _1095 = _1034 + _816;
        float _1105 = fma(_1095, cbModelParam._m0[26u].z, fma(_1094, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1093)) - _1060;
        float _1106 = fma(_1095, cbModelParam._m0[27u].z, fma(_1094, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1093)) - _1064;
        float _1107 = fma(_1095, cbModelParam._m0[28u].z, fma(_1094, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1093)) - _1068;
        float _1111 = inversesqrt(dot(vec3(_1105, _1106, _1107), vec3(_1105, _1106, _1107)));
        float _1124 = ((_1111 * _1105) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1060 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1125 = ((_1111 * _1106) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1064 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1126 = ((_1111 * _1107) / cbModelParam._m0[34u].z) + ((((((_1068 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1129 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1124, _1125, _1126), 0.0);
        vec4 _1136 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1124, _1125, _1126), 0.0);
        vec4 _1143 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1124, _1125, _1126), 0.0);
        vec4 _1150 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1124, _1125, _1126), 0.0);
        float _1163 = exp2((_1129.w + (-0.5)) * 20.0) * 2.0;
        float _1164 = _1163 * (_1129.x + (-0.5));
        float _1165 = _1163 * (_1129.y + (-0.5));
        float _1166 = _1163 * (_1129.z + (-0.5));
        float _1173 = exp2((_1136.w + (-0.5)) * 20.0) * 2.0;
        float _1174 = _1173 * (_1136.x + (-0.5));
        float _1175 = _1173 * (_1136.y + (-0.5));
        float _1176 = _1173 * (_1136.z + (-0.5));
        float _1183 = exp2((_1143.w + (-0.5)) * 20.0) * 2.0;
        float _1184 = _1183 * (_1143.x + (-0.5));
        float _1185 = _1183 * (_1143.y + (-0.5));
        float _1186 = _1183 * (_1143.z + (-0.5));
        float _1193 = exp2((_1150.w + (-0.5)) * 20.0) * 2.0;
        float _1194 = _1193 * (_1150.x + (-0.5));
        float _1195 = _1193 * (_1150.y + (-0.5));
        float _1196 = _1193 * (_1150.z + (-0.5));
        float _1197 = isnan(0.0) ? _1194 : (isnan(_1194) ? 0.0 : max(_1194, 0.0));
        float _1198 = isnan(0.0) ? _1195 : (isnan(_1195) ? 0.0 : max(_1195, 0.0));
        float _1199 = isnan(0.0) ? _1196 : (isnan(_1196) ? 0.0 : max(_1196, 0.0));
        float _1200 = _1164 * 0.5;
        float _1201 = _1174 * 0.5;
        float _1202 = _1184 * 0.5;
        float _1203 = dot(vec3(_1200, _1201, _1202), vec3(_1200, _1201, _1202));
        float _1208 = (_1203 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1203);
        float _1217 = (dot(vec3(_814, _815, _816), vec3(_1208 * _1200, _1208 * _1201, _1208 * _1202)) + 1.0) * 0.5;
        float _4124 = isnan(0.0) ? _1217 : (isnan(_1217) ? 0.0 : max(_1217, 0.0));
        float _1227 = sqrt(((_1201 * _1201) + (_1200 * _1200)) + (_1202 * _1202)) / (_1197 + 9.9999997473787516355514526367188e-06);
        float _4135 = isnan(0.0) ? _1227 : (isnan(_1227) ? 0.0 : max(_1227, 0.0));
        float _1228 = isnan(1.0) ? _4135 : (isnan(_4135) ? 1.0 : min(_4135, 1.0));
        float _1229 = _1228 * 2.0;
        float _1233 = (1.0 - _1228) / (_1228 + 1.0);
        float _4146 = isnan(0.0) ? _1233 : (isnan(_1233) ? 0.0 : max(_1233, 0.0));
        float _1234 = isnan(1.0) ? _4146 : (isnan(_4146) ? 1.0 : min(_4146, 1.0));
        float _1243 = ((((1.0 - _1234) * (_1229 + 2.0)) * exp2(log2(isnan(1.0) ? _4124 : (isnan(_4124) ? 1.0 : min(_4124, 1.0))) * (_1229 + 1.0))) + _1234) * _1197;
        float _1244 = _1165 * 0.5;
        float _1245 = _1175 * 0.5;
        float _1246 = _1185 * 0.5;
        float _1247 = dot(vec3(_1244, _1245, _1246), vec3(_1244, _1245, _1246));
        float _1252 = (_1247 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1247);
        float _1260 = (dot(vec3(_814, _815, _816), vec3(_1252 * _1244, _1252 * _1245, _1252 * _1246)) + 1.0) * 0.5;
        float _4157 = isnan(0.0) ? _1260 : (isnan(_1260) ? 0.0 : max(_1260, 0.0));
        float _1269 = sqrt(((_1245 * _1245) + (_1244 * _1244)) + (_1246 * _1246)) / (_1198 + 9.9999997473787516355514526367188e-06);
        float _4168 = isnan(0.0) ? _1269 : (isnan(_1269) ? 0.0 : max(_1269, 0.0));
        float _1270 = isnan(1.0) ? _4168 : (isnan(_4168) ? 1.0 : min(_4168, 1.0));
        float _1271 = _1270 * 2.0;
        float _1275 = (1.0 - _1270) / (_1270 + 1.0);
        float _4179 = isnan(0.0) ? _1275 : (isnan(_1275) ? 0.0 : max(_1275, 0.0));
        float _1276 = isnan(1.0) ? _4179 : (isnan(_4179) ? 1.0 : min(_4179, 1.0));
        float _1285 = ((((1.0 - _1276) * (_1271 + 2.0)) * exp2(log2(isnan(1.0) ? _4157 : (isnan(_4157) ? 1.0 : min(_4157, 1.0))) * (_1271 + 1.0))) + _1276) * _1198;
        float _1286 = _1166 * 0.5;
        float _1287 = _1176 * 0.5;
        float _1288 = _1186 * 0.5;
        float _1289 = dot(vec3(_1286, _1287, _1288), vec3(_1286, _1287, _1288));
        float _1294 = (_1289 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1289);
        float _1302 = (dot(vec3(_814, _815, _816), vec3(_1294 * _1286, _1294 * _1287, _1294 * _1288)) + 1.0) * 0.5;
        float _4190 = isnan(0.0) ? _1302 : (isnan(_1302) ? 0.0 : max(_1302, 0.0));
        float _1311 = sqrt(((_1287 * _1287) + (_1286 * _1286)) + (_1288 * _1288)) / (_1199 + 9.9999997473787516355514526367188e-06);
        float _4201 = isnan(0.0) ? _1311 : (isnan(_1311) ? 0.0 : max(_1311, 0.0));
        float _1312 = isnan(1.0) ? _4201 : (isnan(_4201) ? 1.0 : min(_4201, 1.0));
        float _1313 = _1312 * 2.0;
        float _1317 = (1.0 - _1312) / (_1312 + 1.0);
        float _4212 = isnan(0.0) ? _1317 : (isnan(_1317) ? 0.0 : max(_1317, 0.0));
        float _1318 = isnan(1.0) ? _4212 : (isnan(_4212) ? 1.0 : min(_4212, 1.0));
        float _1327 = ((((1.0 - _1318) * (_1313 + 2.0)) * exp2(log2(isnan(1.0) ? _4190 : (isnan(_4190) ? 1.0 : min(_4190, 1.0))) * (_1313 + 1.0))) + _1318) * _1199;
        _1335 = _1166;
        _1337 = _1165;
        _1338 = _1164;
        _1339 = _1176;
        _1340 = _1175;
        _1341 = _1174;
        _1342 = _1186;
        _1343 = _1185;
        _1344 = _1184;
        _1345 = _1199;
        _1346 = _1198;
        _1347 = _1197;
        _1348 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1243 : (isnan(_1243) ? 0.0 : max(_1243, 0.0)));
        _1349 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1285 : (isnan(_1285) ? 0.0 : max(_1285, 0.0)));
        _1350 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1327 : (isnan(_1327) ? 0.0 : max(_1327, 0.0)));
    }
    else
    {
        _1335 = _1336;
        _1337 = _1336;
        _1338 = _1336;
        _1339 = _1336;
        _1340 = _1336;
        _1341 = _1336;
        _1342 = _1336;
        _1343 = _1336;
        _1344 = _1336;
        _1345 = _1336;
        _1346 = _1336;
        _1347 = _1336;
        _1348 = 0.0;
        _1349 = 0.0;
        _1350 = 0.0;
    }
    float _1643;
    float _1644;
    float _1645;
    float _1646;
    float _1647;
    float _1648;
    float _1649;
    float _1650;
    float _1651;
    float _1652;
    float _1653;
    float _1654;
    float _1655;
    float _1656;
    float _1657;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1374 = fma(_1034, cbModelParam._m0[30u].z, fma(_1030, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1026));
        float _1378 = fma(_1034, cbModelParam._m0[31u].z, fma(_1030, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1026));
        float _1382 = fma(_1034, cbModelParam._m0[32u].z, fma(_1030, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1026));
        float _1405 = _1026 + _814;
        float _1406 = _1030 + _815;
        float _1407 = _1034 + _816;
        float _1417 = fma(_1407, cbModelParam._m0[30u].z, fma(_1406, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1405)) - _1374;
        float _1418 = fma(_1407, cbModelParam._m0[31u].z, fma(_1406, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1405)) - _1378;
        float _1419 = fma(_1407, cbModelParam._m0[32u].z, fma(_1406, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1405)) - _1382;
        float _1423 = inversesqrt(dot(vec3(_1417, _1418, _1419), vec3(_1417, _1418, _1419)));
        float _1436 = ((_1423 * _1417) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1374 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1437 = ((_1423 * _1418) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1378 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1438 = ((_1423 * _1419) / cbModelParam._m0[35u].z) + ((((((_1382 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1440 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1436, _1437, _1438), 0.0);
        vec4 _1447 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1436, _1437, _1438), 0.0);
        vec4 _1454 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1436, _1437, _1438), 0.0);
        vec4 _1461 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1436, _1437, _1438), 0.0);
        float _1473 = exp2((_1440.w + (-0.5)) * 20.0) * 2.0;
        float _1474 = _1473 * (_1440.x + (-0.5));
        float _1475 = _1473 * (_1440.y + (-0.5));
        float _1476 = _1473 * (_1440.z + (-0.5));
        float _1483 = exp2((_1447.w + (-0.5)) * 20.0) * 2.0;
        float _1484 = _1483 * (_1447.x + (-0.5));
        float _1485 = _1483 * (_1447.y + (-0.5));
        float _1486 = _1483 * (_1447.z + (-0.5));
        float _1493 = exp2((_1454.w + (-0.5)) * 20.0) * 2.0;
        float _1494 = _1493 * (_1454.x + (-0.5));
        float _1495 = _1493 * (_1454.y + (-0.5));
        float _1496 = _1493 * (_1454.z + (-0.5));
        float _1503 = exp2((_1461.w + (-0.5)) * 20.0) * 2.0;
        float _1504 = _1503 * (_1461.x + (-0.5));
        float _1505 = _1503 * (_1461.y + (-0.5));
        float _1506 = _1503 * (_1461.z + (-0.5));
        float _1507 = isnan(0.0) ? _1504 : (isnan(_1504) ? 0.0 : max(_1504, 0.0));
        float _1508 = isnan(0.0) ? _1505 : (isnan(_1505) ? 0.0 : max(_1505, 0.0));
        float _1509 = isnan(0.0) ? _1506 : (isnan(_1506) ? 0.0 : max(_1506, 0.0));
        float _1510 = _1474 * 0.5;
        float _1511 = _1484 * 0.5;
        float _1512 = _1494 * 0.5;
        float _1513 = dot(vec3(_1510, _1511, _1512), vec3(_1510, _1511, _1512));
        float _1518 = (_1513 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1513);
        float _1526 = (dot(vec3(_814, _815, _816), vec3(_1518 * _1510, _1518 * _1511, _1518 * _1512)) + 1.0) * 0.5;
        float _4253 = isnan(0.0) ? _1526 : (isnan(_1526) ? 0.0 : max(_1526, 0.0));
        float _1535 = sqrt(((_1511 * _1511) + (_1510 * _1510)) + (_1512 * _1512)) / (_1507 + 9.9999997473787516355514526367188e-06);
        float _4264 = isnan(0.0) ? _1535 : (isnan(_1535) ? 0.0 : max(_1535, 0.0));
        float _1536 = isnan(1.0) ? _4264 : (isnan(_4264) ? 1.0 : min(_4264, 1.0));
        float _1537 = _1536 * 2.0;
        float _1541 = (1.0 - _1536) / (_1536 + 1.0);
        float _4275 = isnan(0.0) ? _1541 : (isnan(_1541) ? 0.0 : max(_1541, 0.0));
        float _1542 = isnan(1.0) ? _4275 : (isnan(_4275) ? 1.0 : min(_4275, 1.0));
        float _1551 = ((((1.0 - _1542) * (_1537 + 2.0)) * exp2(log2(isnan(1.0) ? _4253 : (isnan(_4253) ? 1.0 : min(_4253, 1.0))) * (_1537 + 1.0))) + _1542) * _1507;
        float _1552 = _1475 * 0.5;
        float _1553 = _1485 * 0.5;
        float _1554 = _1495 * 0.5;
        float _1555 = dot(vec3(_1552, _1553, _1554), vec3(_1552, _1553, _1554));
        float _1560 = (_1555 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1555);
        float _1568 = (dot(vec3(_814, _815, _816), vec3(_1560 * _1552, _1560 * _1553, _1560 * _1554)) + 1.0) * 0.5;
        float _4286 = isnan(0.0) ? _1568 : (isnan(_1568) ? 0.0 : max(_1568, 0.0));
        float _1577 = sqrt(((_1553 * _1553) + (_1552 * _1552)) + (_1554 * _1554)) / (_1508 + 9.9999997473787516355514526367188e-06);
        float _4297 = isnan(0.0) ? _1577 : (isnan(_1577) ? 0.0 : max(_1577, 0.0));
        float _1578 = isnan(1.0) ? _4297 : (isnan(_4297) ? 1.0 : min(_4297, 1.0));
        float _1579 = _1578 * 2.0;
        float _1583 = (1.0 - _1578) / (_1578 + 1.0);
        float _4308 = isnan(0.0) ? _1583 : (isnan(_1583) ? 0.0 : max(_1583, 0.0));
        float _1584 = isnan(1.0) ? _4308 : (isnan(_4308) ? 1.0 : min(_4308, 1.0));
        float _1593 = ((((1.0 - _1584) * (_1579 + 2.0)) * exp2(log2(isnan(1.0) ? _4286 : (isnan(_4286) ? 1.0 : min(_4286, 1.0))) * (_1579 + 1.0))) + _1584) * _1508;
        float _1594 = _1476 * 0.5;
        float _1595 = _1486 * 0.5;
        float _1596 = _1496 * 0.5;
        float _1597 = dot(vec3(_1594, _1595, _1596), vec3(_1594, _1595, _1596));
        float _1602 = (_1597 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1597);
        float _1610 = (dot(vec3(_814, _815, _816), vec3(_1602 * _1594, _1602 * _1595, _1602 * _1596)) + 1.0) * 0.5;
        float _4319 = isnan(0.0) ? _1610 : (isnan(_1610) ? 0.0 : max(_1610, 0.0));
        float _1619 = sqrt(((_1595 * _1595) + (_1594 * _1594)) + (_1596 * _1596)) / (_1509 + 9.9999997473787516355514526367188e-06);
        float _4330 = isnan(0.0) ? _1619 : (isnan(_1619) ? 0.0 : max(_1619, 0.0));
        float _1620 = isnan(1.0) ? _4330 : (isnan(_4330) ? 1.0 : min(_4330, 1.0));
        float _1621 = _1620 * 2.0;
        float _1625 = (1.0 - _1620) / (_1620 + 1.0);
        float _4341 = isnan(0.0) ? _1625 : (isnan(_1625) ? 0.0 : max(_1625, 0.0));
        float _1626 = isnan(1.0) ? _4341 : (isnan(_4341) ? 1.0 : min(_4341, 1.0));
        float _1635 = ((((1.0 - _1626) * (_1621 + 2.0)) * exp2(log2(isnan(1.0) ? _4319 : (isnan(_4319) ? 1.0 : min(_4319, 1.0))) * (_1621 + 1.0))) + _1626) * _1509;
        _1643 = _1476;
        _1644 = _1475;
        _1645 = _1474;
        _1646 = _1486;
        _1647 = _1485;
        _1648 = _1484;
        _1649 = _1496;
        _1650 = _1495;
        _1651 = _1494;
        _1652 = _1509;
        _1653 = _1508;
        _1654 = _1507;
        _1655 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1551 : (isnan(_1551) ? 0.0 : max(_1551, 0.0)));
        _1656 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1593 : (isnan(_1593) ? 0.0 : max(_1593, 0.0)));
        _1657 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1635 : (isnan(_1635) ? 0.0 : max(_1635, 0.0)));
    }
    else
    {
        _1643 = _1336;
        _1644 = _1336;
        _1645 = _1336;
        _1646 = _1336;
        _1647 = _1336;
        _1648 = _1336;
        _1649 = _1336;
        _1650 = _1336;
        _1651 = _1336;
        _1652 = _1336;
        _1653 = _1336;
        _1654 = _1336;
        _1655 = 0.0;
        _1656 = 0.0;
        _1657 = 0.0;
    }
    float _1667 = (cbModelParam._m0[1u].x * (_1655 - _1348)) + _1348;
    float _1668 = (cbModelParam._m0[1u].x * (_1656 - _1349)) + _1349;
    float _1669 = (cbModelParam._m0[1u].x * (_1657 - _1350)) + _1350;
    float _1690 = fma(_1669, cbSceneParam._m0[89u].z, fma(_1668, cbSceneParam._m0[89u].y, _1667 * cbSceneParam._m0[89u].x));
    float _1693 = fma(_1669, cbSceneParam._m0[90u].z, fma(_1668, cbSceneParam._m0[90u].y, _1667 * cbSceneParam._m0[90u].x));
    float _1696 = fma(_1669, cbSceneParam._m0[91u].z, fma(_1668, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1667));
    float _1711 = _973 * 0.5;
    float _1712 = _974 * 0.5;
    float _1713 = _975 * 0.5;
    float _1714 = dot(vec4(_1711, _1712, _1713, 1.0), vec4(_1645, _1648, _1651, _1654));
    float _1717 = dot(vec4(_1711, _1712, _1713, 1.0), vec4(_1644, _1647, _1650, _1653));
    float _1720 = dot(vec4(_1711, _1712, _1713, 1.0), vec4(_1643, _1646, _1649, _1652));
    float _1754;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1727 = dot(vec4(_1711, _1712, _1713, 1.0), vec4(_1335, _1339, _1342, _1345));
        float _1731 = dot(vec4(_1711, _1712, _1713, 1.0), vec4(_1337, _1340, _1343, _1346));
        float _1735 = dot(vec4(_1711, _1712, _1713, 1.0), vec4(_1338, _1341, _1344, _1347));
        float _1742 = dot(vec4(cbModelParam._m0[39u]), vec4(_1711, _1712, _1713, 1.0));
        _1754 = dot(vec3(isnan(0.0) ? _1735 : (isnan(_1735) ? 0.0 : max(_1735, 0.0)), isnan(0.0) ? _1731 : (isnan(_1731) ? 0.0 : max(_1731, 0.0)), isnan(0.0) ? _1727 : (isnan(_1727) ? 0.0 : max(_1727, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1742) ? 0.0 : (isnan(0.0) ? _1742 : max(0.0, _1742))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1754 = 1.0;
    }
    float _1765;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1756 = dot(vec4(cbModelParam._m0[40u]), vec4(_1711, _1712, _1713, 1.0));
        _1765 = dot(vec3(isnan(0.0) ? _1714 : (isnan(_1714) ? 0.0 : max(_1714, 0.0)), isnan(0.0) ? _1717 : (isnan(_1717) ? 0.0 : max(_1717, 0.0)), isnan(0.0) ? _1720 : (isnan(_1720) ? 0.0 : max(_1720, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1756) ? 0.0 : (isnan(0.0) ? _1756 : max(0.0, _1756))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1765 = 1.0;
    }
    float _1769 = (_1765 * cbModelParam._m0[1u].x) + (_1754 * (1.0 - cbModelParam._m0[1u].x));
    float _1779 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _817);
    float _1780 = isnan(_1779) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1779 : min(cbModelParam._m0[25u].z, _1779));
    float _1860;
    float _1862;
    float _1864;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1827 = fma(_1034, cbModelParam._m0[13u].z, fma(_1030, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1026)) + cbModelParam._m0[13u].w;
        float _1831 = fma(_1034, cbModelParam._m0[14u].z, fma(_1030, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1026)) + cbModelParam._m0[14u].w;
        float _1835 = fma(_1034, cbModelParam._m0[15u].z, fma(_1030, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1026)) + cbModelParam._m0[15u].w;
        float _1838 = fma(_975, cbModelParam._m0[13u].z, fma(_974, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _973));
        float _1841 = fma(_975, cbModelParam._m0[14u].z, fma(_974, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _973));
        float _1844 = fma(_975, cbModelParam._m0[15u].z, fma(_974, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _973));
        float _1872;
        if (_1838 > 0.0)
        {
            _1872 = abs((1.0 - _1827) / _1838);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1838 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1827 + 1.0) / _1838);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1872 = frontier_phi_14_12_ladder;
        }
        float _2041;
        if (_1841 > 0.0)
        {
            _2041 = abs((1.0 - _1831) / _1841);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1841 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1831 + 1.0) / _1841);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2041 = frontier_phi_23_19_ladder;
        }
        float _2336;
        if (_1844 > 0.0)
        {
            _2336 = abs((1.0 - _1835) / _1844);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1844 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1835 + 1.0) / _1844);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2336 = frontier_phi_35_30_ladder;
        }
        float _2338 = isnan(_2041) ? _1872 : (isnan(_1872) ? _2041 : min(_1872, _2041));
        float _2339 = isnan(_2336) ? _2338 : (isnan(_2338) ? _2336 : min(_2338, _2336));
        float _2343 = (_2339 * _1838) + _1827;
        float _2344 = (_2339 * _1841) + _1831;
        float _2345 = (_2339 * _1844) + _1835;
        float _2346 = _2339 * 9.9999997473787516355514526367188e-05;
        float _2348 = (-1.0) - _2346;
        float _2350 = _2346 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2345 > _2350) || ((_2345 < _2348) || ((_2344 > _2350) || ((_2344 < _2348) || ((_2343 < _2348) || (_2343 > _2350))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2490 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2345, cbModelParam._m0[9u].z, fma(_2344, cbModelParam._m0[9u].y, _2343 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2345, cbModelParam._m0[10u].z, fma(_2344, cbModelParam._m0[10u].y, _2343 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2345, cbModelParam._m0[11u].z, fma(_2344, cbModelParam._m0[11u].y, _2343 * cbModelParam._m0[11u].x))), _1780);
            frontier_phi_13_35_ladder = _2490.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2490.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2490.x * cbModelParam._m0[1u].y;
        }
        _1860 = frontier_phi_13_35_ladder_2;
        _1862 = frontier_phi_13_35_ladder_1;
        _1864 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1848 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_973, _974, _975), _1780);
        _1860 = _1848.x * cbModelParam._m0[1u].y;
        _1862 = _1848.y * cbModelParam._m0[1u].y;
        _1864 = _1848.z * cbModelParam._m0[1u].y;
    }
    float _1868 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _817);
    float _1869 = isnan(_1868) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1868 : min(cbModelParam._m0[25u].w, _1868));
    float _1958;
    float _1960;
    float _1962;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1922 = fma(_1034, cbModelParam._m0[21u].z, fma(_1030, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1026)) + cbModelParam._m0[21u].w;
        float _1926 = fma(_1034, cbModelParam._m0[22u].z, fma(_1030, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1026)) + cbModelParam._m0[22u].w;
        float _1930 = fma(_1034, cbModelParam._m0[23u].z, fma(_1030, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1026)) + cbModelParam._m0[23u].w;
        float _1933 = fma(_975, cbModelParam._m0[21u].z, fma(_974, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _973));
        float _1936 = fma(_975, cbModelParam._m0[22u].z, fma(_974, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _973));
        float _1939 = fma(_975, cbModelParam._m0[23u].z, fma(_974, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _973));
        float _2046;
        if (_1933 > 0.0)
        {
            _2046 = abs((1.0 - _1922) / _1933);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1933 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1922 + 1.0) / _1933);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2046 = frontier_phi_25_21_ladder;
        }
        float _2363;
        if (_1936 > 0.0)
        {
            _2363 = abs((1.0 - _1926) / _1936);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1936 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1926 + 1.0) / _1936);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2363 = frontier_phi_37_32_ladder;
        }
        float _2690;
        if (_1939 > 0.0)
        {
            _2690 = abs((1.0 - _1930) / _1939);
        }
        else
        {
            float frontier_phi_47_44_ladder;
            if (_1939 < 0.0)
            {
                frontier_phi_47_44_ladder = abs((_1930 + 1.0) / _1939);
            }
            else
            {
                frontier_phi_47_44_ladder = 5000.0;
            }
            _2690 = frontier_phi_47_44_ladder;
        }
        float _2692 = isnan(_2363) ? _2046 : (isnan(_2046) ? _2363 : min(_2046, _2363));
        float _2693 = isnan(_2690) ? _2692 : (isnan(_2692) ? _2690 : min(_2692, _2690));
        float _2697 = (_2693 * _1933) + _1922;
        float _2698 = (_2693 * _1936) + _1926;
        float _2699 = (_2693 * _1939) + _1930;
        float _2700 = _2693 * 9.9999997473787516355514526367188e-05;
        float _2701 = (-1.0) - _2700;
        float _2703 = _2700 + 1.0;
        float frontier_phi_22_47_ladder;
        float frontier_phi_22_47_ladder_1;
        float frontier_phi_22_47_ladder_2;
        if ((_2699 > _2703) || ((_2699 < _2701) || ((_2698 > _2703) || ((_2698 < _2701) || ((_2697 < _2701) || (_2697 > _2703))))))
        {
            frontier_phi_22_47_ladder = 0.0;
            frontier_phi_22_47_ladder_1 = 0.0;
            frontier_phi_22_47_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2817 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2699, cbModelParam._m0[17u].z, fma(_2698, cbModelParam._m0[17u].y, _2697 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2699, cbModelParam._m0[18u].z, fma(_2698, cbModelParam._m0[18u].y, _2697 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2699, cbModelParam._m0[19u].z, fma(_2698, cbModelParam._m0[19u].y, _2697 * cbModelParam._m0[19u].x))), _1869);
            frontier_phi_22_47_ladder = _2817.z * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_1 = _2817.y * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_2 = _2817.x * cbModelParam._m0[1u].z;
        }
        _1958 = frontier_phi_22_47_ladder_2;
        _1960 = frontier_phi_22_47_ladder_1;
        _1962 = frontier_phi_22_47_ladder;
    }
    else
    {
        vec4 _1942 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_973, _974, _975), _1869);
        _1958 = _1942.x * cbModelParam._m0[1u].z;
        _1960 = _1942.y * cbModelParam._m0[1u].z;
        _1962 = _1942.z * cbModelParam._m0[1u].z;
    }
    float _1974 = ((((1.0 - _994) * ((_981 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_994 * _981)) * _965;
    float _1975 = _1974 * ((cbModelParam._m0[1u].w * (_1958 - _1860)) + _1860);
    float _1976 = _1974 * ((cbModelParam._m0[1u].w * (_1960 - _1862)) + _1862);
    float _1977 = _1974 * ((cbModelParam._m0[1u].w * (_1962 - _1864)) + _1864);
    float _1980 = fma(_1977, cbSceneParam._m0[89u].z, fma(_1976, cbSceneParam._m0[89u].y, _1975 * cbSceneParam._m0[89u].x));
    float _1983 = fma(_1977, cbSceneParam._m0[90u].z, fma(_1976, cbSceneParam._m0[90u].y, _1975 * cbSceneParam._m0[90u].x));
    float _1986 = fma(_1977, cbSceneParam._m0[91u].z, fma(_1976, cbSceneParam._m0[91u].y, _1975 * cbSceneParam._m0[91u].x));
    float _2020 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2024 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2028 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2032 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2033 = _2020 / _2032;
    float _2034 = _2024 / _2032;
    float _2035 = _2028 / _2032;
    float _2182;
    float _2183;
    float _2184;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2062 = ((uint(_2035 > cbSceneParam._m0[59u].y) + uint(_2035 > cbSceneParam._m0[59u].x)) + uint(_2035 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2063 = _2062 + 43u;
        uint _2071 = _2062 + 44u;
        uint _2079 = _2062 + 45u;
        uint _2087 = _2062 + 46u;
        float _2098 = fma(_2032, cbSceneParam._m0[_2063].w, fma(_2028, cbSceneParam._m0[_2063].z, fma(_2024, cbSceneParam._m0[_2063].y, _2020 * cbSceneParam._m0[_2063].x)));
        float _2102 = fma(_2032, cbSceneParam._m0[_2071].w, fma(_2028, cbSceneParam._m0[_2071].z, fma(_2024, cbSceneParam._m0[_2071].y, _2020 * cbSceneParam._m0[_2071].x)));
        float _2110 = fma(_2032, cbSceneParam._m0[_2087].w, fma(_2028, cbSceneParam._m0[_2087].z, fma(_2024, cbSceneParam._m0[_2087].y, _2020 * cbSceneParam._m0[_2087].x)));
        float _2115 = cbSceneParam._m0[33u].z * _2110;
        float _2117 = cbSceneParam._m0[33u].w * _2110;
        float _2120 = fma(_2032, cbSceneParam._m0[_2079].w, fma(_2028, cbSceneParam._m0[_2079].z, fma(_2024, cbSceneParam._m0[_2079].y, _2020 * cbSceneParam._m0[_2079].x))) / _2110;
        float _2168 = (cbSceneParam._m0[33u].x - sqrt(((_2034 * _2034) + (_2033 * _2033)) + (_2035 * _2035))) * cbSceneParam._m0[33u].y;
        float _4467 = isnan(0.0) ? _2168 : (isnan(_2168) ? 0.0 : max(_2168, 0.0));
        float _2175 = (isnan(1.0) ? _4467 : (isnan(_4467) ? 1.0 : min(_4467, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2115 + _2098) / _2110, (_2117 + _2102) / _2110), _2120), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2117 + _2098) / _2110, (_2102 - _2115) / _2110), _2120), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2098 - _2115) / _2110, (_2102 - _2117) / _2110), _2120), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2098 - _2117) / _2110, (_2115 + _2102) / _2110), _2120), 0.0)).x), vec4(0.25)));
        _2182 = 1.0 - (_2175 * cbSceneParam._m0[34u].x);
        _2183 = 1.0 - (_2175 * cbSceneParam._m0[34u].y);
        _2184 = 1.0 - (_2175 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2182 = 1.0;
        _2183 = 1.0;
        _2184 = 1.0;
    }
    float _2248;
    float _2250;
    float _2252;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2236 = fma(_2032, cbSceneParam._m0[63u].w, fma(_2028, cbSceneParam._m0[63u].z, fma(_2024, cbSceneParam._m0[63u].y, _2020 * cbSceneParam._m0[63u].x)));
        float _2237 = fma(_2032, cbSceneParam._m0[60u].w, fma(_2028, cbSceneParam._m0[60u].z, fma(_2024, cbSceneParam._m0[60u].y, _2020 * cbSceneParam._m0[60u].x))) / _2236;
        float _2238 = fma(_2032, cbSceneParam._m0[61u].w, fma(_2028, cbSceneParam._m0[61u].z, fma(_2024, cbSceneParam._m0[61u].y, _2020 * cbSceneParam._m0[61u].x))) / _2236;
        float frontier_phi_34_33_ladder;
        float frontier_phi_34_33_ladder_1;
        float frontier_phi_34_33_ladder_2;
        if ((((_2237 >= cbSceneParam._m0[64u].x) && (_2238 >= cbSceneParam._m0[64u].y)) && (_2237 <= cbSceneParam._m0[64u].z)) && (_2238 <= cbSceneParam._m0[64u].w))
        {
            float _2376 = fma(_2032, cbSceneParam._m0[62u].w, fma(_2028, cbSceneParam._m0[62u].z, fma(_2024, cbSceneParam._m0[62u].y, _2020 * cbSceneParam._m0[62u].x))) / _2236;
            float _2380 = isnan(cbSceneParam._m0[41u].w) ? _2376 : (isnan(_2376) ? cbSceneParam._m0[41u].w : max(_2376, cbSceneParam._m0[41u].w));
            float _2423 = (cbSceneParam._m0[33u].x - sqrt(((_2034 * _2034) + (_2033 * _2033)) + (_2035 * _2035))) * cbSceneParam._m0[33u].y;
            float _4483 = isnan(0.0) ? _2423 : (isnan(_2423) ? 0.0 : max(_2423, 0.0));
            float _2430 = (isnan(1.0) ? _4483 : (isnan(_4483) ? 1.0 : min(_4483, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2237, cbSceneParam._m0[33u].w + _2238), _2380), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2237, _2238 - cbSceneParam._m0[33u].z), _2380), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2237 - cbSceneParam._m0[33u].z, _2238 - cbSceneParam._m0[33u].w), _2380), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2237 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2238), _2380), 0.0)).x), vec4(0.25)));
            float _2434 = 1.0 - (_2430 * cbSceneParam._m0[34u].x);
            float _2435 = 1.0 - (_2430 * cbSceneParam._m0[34u].y);
            float _2436 = 1.0 - (_2430 * cbSceneParam._m0[34u].z);
            frontier_phi_34_33_ladder = isnan(_2436) ? _2184 : (isnan(_2184) ? _2436 : min(_2184, _2436));
            frontier_phi_34_33_ladder_1 = isnan(_2435) ? _2183 : (isnan(_2183) ? _2435 : min(_2183, _2435));
            frontier_phi_34_33_ladder_2 = isnan(_2434) ? _2182 : (isnan(_2182) ? _2434 : min(_2182, _2434));
        }
        else
        {
            frontier_phi_34_33_ladder = _2184;
            frontier_phi_34_33_ladder_1 = _2183;
            frontier_phi_34_33_ladder_2 = _2182;
        }
        _2248 = frontier_phi_34_33_ladder_2;
        _2250 = frontier_phi_34_33_ladder_1;
        _2252 = frontier_phi_34_33_ladder;
    }
    else
    {
        _2248 = _2182;
        _2250 = _2183;
        _2252 = _2184;
    }
    uvec4 _2257 = floatBitsToUint(cbInstanceData._m0[_274 + 5u]);
    uint _2259 = _2257.x * 14u;
    uint _2260 = _2259 + 13u;
    float _2267 = _965 + (-1.0);
    float _2272 = (cbLight._m0[_2260].x * _2267) + 1.0;
    float _2273 = (cbLight._m0[_2260].y * _2267) + 1.0;
    float _2274 = (cbLight._m0[_2260].z * _2267) + 1.0;
    float _2275 = (cbLight._m0[_2260].w * _2267) + 1.0;
    uint _2276 = _2259 + 5u;
    float _2282 = isnan(1.0) ? _2273 : (isnan(_2273) ? 1.0 : min(_2273, 1.0));
    uint _2286 = _2259 + 4u;
    float _2295 = isnan(1.0) ? _2272 : (isnan(_2272) ? 1.0 : min(_2272, 1.0));
    uint _2299 = _2259 | 1u;
    float _2310 = dot(vec3(cbLight._m0[_2259].xyz), vec3(_814, _815, _816));
    float _2313 = dot(vec3(cbLight._m0[_2299].xyz), vec3(_814, _815, _816));
    float _4519 = isnan(0.0) ? _2310 : (isnan(_2310) ? 0.0 : max(_2310, 0.0));
    float _4530 = isnan(0.0) ? _2313 : (isnan(_2313) ? 0.0 : max(_2313, 0.0));
    float _2318 = (isnan(1.0) ? _4519 : (isnan(_4519) ? 1.0 : min(_4519, 1.0))) * 0.3183098733425140380859375;
    float _2320 = (isnan(1.0) ? _4530 : (isnan(_4530) ? 1.0 : min(_4530, 1.0))) * 0.3183098733425140380859375;
    float _2327 = ((cbLight._m0[_2276].x * _2282) * _2320) + (((cbLight._m0[_2286].x * _2248) * _2295) * _2318);
    float _2328 = ((_2282 * cbLight._m0[_2276].y) * _2320) + (((cbLight._m0[_2286].y * _2250) * _2295) * _2318);
    float _2329 = ((_2282 * cbLight._m0[_2276].z) * _2320) + (((cbLight._m0[_2286].z * _2252) * _2295) * _2318);
    uvec4 _2333 = floatBitsToUint(cbLight._m0[_2259 + 12u]);
    bool _2335 = _2333.x == 0u;
    float _2437;
    float _2439;
    float _2441;
    if (_2335)
    {
        _2437 = _2327;
        _2439 = _2328;
        _2441 = _2329;
    }
    else
    {
        uint _2445 = _2259 + 6u;
        float _2461 = (dot(vec3(cbLight._m0[_2259 + 2u].xyz), vec3(_814, _815, _816)) * 0.5) + 0.5;
        float _2462 = _2461 * _2461;
        float _4541 = isnan(0.0) ? _2462 : (isnan(_2462) ? 0.0 : max(_2462, 0.0));
        float _2463 = isnan(1.0) ? _4541 : (isnan(_4541) ? 1.0 : min(_4541, 1.0));
        float _2464 = isnan(1.0) ? _2274 : (isnan(_2274) ? 1.0 : min(_2274, 1.0));
        _2437 = (((cbLight._m0[_2445].x * 0.3183098733425140380859375) * _2463) * _2464) + _2327;
        _2439 = (((cbLight._m0[_2445].y * 0.3183098733425140380859375) * _2463) * _2464) + _2328;
        _2441 = (((cbLight._m0[_2445].z * 0.3183098733425140380859375) * _2463) * _2464) + _2329;
    }
    bool _2444 = _2333.y == 0u;
    float _2499;
    float _2501;
    float _2503;
    if (_2444)
    {
        _2499 = _2437;
        _2501 = _2439;
        _2503 = _2441;
    }
    else
    {
        uint _2661 = _2259 + 7u;
        float _2677 = (dot(vec3(cbLight._m0[_2259 + 3u].xyz), vec3(_814, _815, _816)) * 0.5) + 0.5;
        float _2678 = _2677 * _2677;
        float _4557 = isnan(0.0) ? _2678 : (isnan(_2678) ? 0.0 : max(_2678, 0.0));
        float _2679 = isnan(1.0) ? _4557 : (isnan(_4557) ? 1.0 : min(_4557, 1.0));
        float _2680 = isnan(1.0) ? _2275 : (isnan(_2275) ? 1.0 : min(_2275, 1.0));
        _2499 = (((cbLight._m0[_2661].x * 0.3183098733425140380859375) * _2679) * _2680) + _2437;
        _2501 = (((cbLight._m0[_2661].y * 0.3183098733425140380859375) * _2679) * _2680) + _2439;
        _2503 = (((cbLight._m0[_2661].z * 0.3183098733425140380859375) * _2679) * _2680) + _2441;
    }
    uint _2506 = _2259 + 8u;
    float _2519 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2259].w)) * _817) * 0.949999988079071044921875);
    float _2520 = _2519 * _2519;
    float _2521 = cbLight._m0[_2259].x + _894;
    float _2522 = cbLight._m0[_2259].y + _895;
    float _2523 = cbLight._m0[_2259].z + _896;
    float _2527 = inversesqrt(dot(vec3(_2521, _2522, _2523), vec3(_2521, _2522, _2523)));
    float _2528 = _2527 * _2521;
    float _2529 = _2527 * _2522;
    float _2530 = _2527 * _2523;
    float _2531 = dot(vec3(_814, _815, _816), vec3(cbLight._m0[_2259].xyz));
    float _4573 = isnan(0.0) ? _2531 : (isnan(_2531) ? 0.0 : max(_2531, 0.0));
    float _2534 = isnan(1.0) ? _4573 : (isnan(_4573) ? 1.0 : min(_4573, 1.0));
    float _4584 = isnan(0.0) ? _966 : (isnan(_966) ? 0.0 : max(_966, 0.0));
    float _2535 = isnan(1.0) ? _4584 : (isnan(_4584) ? 1.0 : min(_4584, 1.0));
    float _2536 = dot(vec3(_814, _815, _816), vec3(_2528, _2529, _2530));
    float _4595 = isnan(0.0) ? _2536 : (isnan(_2536) ? 0.0 : max(_2536, 0.0));
    float _2539 = isnan(1.0) ? _4595 : (isnan(_4595) ? 1.0 : min(_4595, 1.0));
    float _2540 = dot(vec3(cbLight._m0[_2259].xyz), vec3(_2528, _2529, _2530));
    float _4606 = isnan(0.0) ? _2540 : (isnan(_2540) ? 0.0 : max(_2540, 0.0));
    float _2544 = _2520 * _2520;
    float _2548 = ((_2539 * _2539) * (_2544 + (-1.0))) + 1.0;
    float _2559 = (exp2(log2(1.0 - (isnan(1.0) ? _4606 : (isnan(_4606) ? 1.0 : min(_4606, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2560 = 1.0 - _2520;
    float _2571 = (0.5 / (((_2535 * ((_2534 * _2560) + _2520)) + 9.9999999392252902907785028219223e-09) + (((_2535 * _2560) + _2520) * _2534))) * _2534;
    float _4617 = isnan(0.0) ? _2571 : (isnan(_2571) ? 0.0 : max(_2571, 0.0));
    float _2573 = (isnan(1.0) ? _4617 : (isnan(_4617) ? 1.0 : min(_4617, 1.0))) * (_2544 / ((_2548 * _2548) * 3.141590118408203125));
    uint _2587 = _2259 + 9u;
    float _2598 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2299].w)) * _817) * 0.949999988079071044921875);
    float _2599 = _2598 * _2598;
    float _2600 = cbLight._m0[_2299].x + _894;
    float _2601 = cbLight._m0[_2299].y + _895;
    float _2602 = cbLight._m0[_2299].z + _896;
    float _2606 = inversesqrt(dot(vec3(_2600, _2601, _2602), vec3(_2600, _2601, _2602)));
    float _2607 = _2606 * _2600;
    float _2608 = _2606 * _2601;
    float _2609 = _2606 * _2602;
    float _2610 = dot(vec3(_814, _815, _816), vec3(cbLight._m0[_2299].xyz));
    float _4628 = isnan(0.0) ? _2610 : (isnan(_2610) ? 0.0 : max(_2610, 0.0));
    float _2613 = isnan(1.0) ? _4628 : (isnan(_4628) ? 1.0 : min(_4628, 1.0));
    float _2614 = dot(vec3(_814, _815, _816), vec3(_2607, _2608, _2609));
    float _4639 = isnan(0.0) ? _2614 : (isnan(_2614) ? 0.0 : max(_2614, 0.0));
    float _2617 = isnan(1.0) ? _4639 : (isnan(_4639) ? 1.0 : min(_4639, 1.0));
    float _2618 = dot(vec3(cbLight._m0[_2299].xyz), vec3(_2607, _2608, _2609));
    float _4650 = isnan(0.0) ? _2618 : (isnan(_2618) ? 0.0 : max(_2618, 0.0));
    float _2622 = _2599 * _2599;
    float _2626 = ((_2617 * _2617) * (_2622 + (-1.0))) + 1.0;
    float _2635 = (exp2(log2(1.0 - (isnan(1.0) ? _4650 : (isnan(_4650) ? 1.0 : min(_4650, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2636 = 1.0 - _2599;
    float _2646 = (0.5 / (((_2535 * ((_2613 * _2636) + _2599)) + 9.9999999392252902907785028219223e-09) + (((_2535 * _2636) + _2599) * _2613))) * _2613;
    float _4661 = isnan(0.0) ? _2646 : (isnan(_2646) ? 0.0 : max(_2646, 0.0));
    float _2648 = (isnan(1.0) ? _4661 : (isnan(_4661) ? 1.0 : min(_4661, 1.0))) * (_2622 / ((_2626 * _2626) * 3.141590118408203125));
    float _2658 = (((_2635 * cbLight._m0[_2587].x) * _2648) * _2282) + ((((cbLight._m0[_2506].x * _2248) * _2559) * _2573) * _2295);
    float _2659 = (((_2635 * cbLight._m0[_2587].y) * _2648) * _2282) + ((((cbLight._m0[_2506].y * _2250) * _2559) * _2573) * _2295);
    float _2660 = (((_2635 * cbLight._m0[_2587].z) * _2648) * _2282) + ((((cbLight._m0[_2506].z * _2252) * _2559) * _2573) * _2295);
    float _2716;
    float _2718;
    float _2720;
    if (_2335)
    {
        _2716 = _2658;
        _2718 = _2659;
        _2720 = _2660;
    }
    else
    {
        uint _2722 = _2259 + 2u;
        uint _2726 = _2259 + 10u;
        float _2740 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2722].w)) * _817) * 0.949999988079071044921875);
        float _2741 = _2740 * _2740;
        float _2742 = cbLight._m0[_2722].x + _894;
        float _2743 = cbLight._m0[_2722].y + _895;
        float _2744 = cbLight._m0[_2722].z + _896;
        float _2748 = inversesqrt(dot(vec3(_2742, _2743, _2744), vec3(_2742, _2743, _2744)));
        float _2749 = _2748 * _2742;
        float _2750 = _2748 * _2743;
        float _2751 = _2748 * _2744;
        float _2752 = dot(vec3(_814, _815, _816), vec3(cbLight._m0[_2722].xyz));
        float _4672 = isnan(0.0) ? _2752 : (isnan(_2752) ? 0.0 : max(_2752, 0.0));
        float _2755 = isnan(1.0) ? _4672 : (isnan(_4672) ? 1.0 : min(_4672, 1.0));
        float _2756 = dot(vec3(_814, _815, _816), vec3(_2749, _2750, _2751));
        float _4683 = isnan(0.0) ? _2756 : (isnan(_2756) ? 0.0 : max(_2756, 0.0));
        float _2759 = isnan(1.0) ? _4683 : (isnan(_4683) ? 1.0 : min(_4683, 1.0));
        float _2760 = dot(vec3(cbLight._m0[_2722].xyz), vec3(_2749, _2750, _2751));
        float _4694 = isnan(0.0) ? _2760 : (isnan(_2760) ? 0.0 : max(_2760, 0.0));
        float _2764 = _2741 * _2741;
        float _2768 = ((_2759 * _2759) * (_2764 + (-1.0))) + 1.0;
        float _2777 = (exp2(log2(1.0 - (isnan(1.0) ? _4694 : (isnan(_4694) ? 1.0 : min(_4694, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2778 = 1.0 - _2741;
        float _2788 = (0.5 / (((_2535 * ((_2755 * _2778) + _2741)) + 9.9999999392252902907785028219223e-09) + (((_2535 * _2778) + _2741) * _2755))) * _2755;
        float _4705 = isnan(0.0) ? _2788 : (isnan(_2788) ? 0.0 : max(_2788, 0.0));
        float _2790 = (isnan(1.0) ? _4705 : (isnan(_4705) ? 1.0 : min(_4705, 1.0))) * (_2764 / ((_2768 * _2768) * 3.141590118408203125));
        float _2791 = isnan(1.0) ? _2274 : (isnan(_2274) ? 1.0 : min(_2274, 1.0));
        _2716 = (((_2777 * cbLight._m0[_2726].x) * _2790) * _2791) + _2658;
        _2718 = (((_2777 * cbLight._m0[_2726].y) * _2790) * _2791) + _2659;
        _2720 = (((_2777 * cbLight._m0[_2726].z) * _2790) * _2791) + _2660;
    }
    float _2822;
    float _2824;
    float _2826;
    if (_2444)
    {
        _2822 = _2716;
        _2824 = _2718;
        _2826 = _2720;
    }
    else
    {
        uint _2833 = _2259 + 3u;
        uint _2837 = _2259 + 11u;
        float _2851 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2833].w)) * _817) * 0.949999988079071044921875);
        float _2852 = _2851 * _2851;
        float _2853 = cbLight._m0[_2833].x + _894;
        float _2854 = cbLight._m0[_2833].y + _895;
        float _2855 = cbLight._m0[_2833].z + _896;
        float _2859 = inversesqrt(dot(vec3(_2853, _2854, _2855), vec3(_2853, _2854, _2855)));
        float _2860 = _2859 * _2853;
        float _2861 = _2859 * _2854;
        float _2862 = _2859 * _2855;
        float _2863 = dot(vec3(_814, _815, _816), vec3(cbLight._m0[_2833].xyz));
        float _4721 = isnan(0.0) ? _2863 : (isnan(_2863) ? 0.0 : max(_2863, 0.0));
        float _2866 = isnan(1.0) ? _4721 : (isnan(_4721) ? 1.0 : min(_4721, 1.0));
        float _2867 = dot(vec3(_814, _815, _816), vec3(_2860, _2861, _2862));
        float _4732 = isnan(0.0) ? _2867 : (isnan(_2867) ? 0.0 : max(_2867, 0.0));
        float _2870 = isnan(1.0) ? _4732 : (isnan(_4732) ? 1.0 : min(_4732, 1.0));
        float _2871 = dot(vec3(cbLight._m0[_2833].xyz), vec3(_2860, _2861, _2862));
        float _4743 = isnan(0.0) ? _2871 : (isnan(_2871) ? 0.0 : max(_2871, 0.0));
        float _2875 = _2852 * _2852;
        float _2879 = ((_2870 * _2870) * (_2875 + (-1.0))) + 1.0;
        float _2888 = (exp2(log2(1.0 - (isnan(1.0) ? _4743 : (isnan(_4743) ? 1.0 : min(_4743, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2889 = 1.0 - _2852;
        float _2899 = (0.5 / (((_2535 * ((_2866 * _2889) + _2852)) + 9.9999999392252902907785028219223e-09) + (((_2535 * _2889) + _2852) * _2866))) * _2866;
        float _4754 = isnan(0.0) ? _2899 : (isnan(_2899) ? 0.0 : max(_2899, 0.0));
        float _2901 = (isnan(1.0) ? _4754 : (isnan(_4754) ? 1.0 : min(_4754, 1.0))) * (_2875 / ((_2879 * _2879) * 3.141590118408203125));
        float _2902 = isnan(1.0) ? _2275 : (isnan(_2275) ? 1.0 : min(_2275, 1.0));
        _2822 = (((_2888 * cbLight._m0[_2837].x) * _2901) * _2902) + _2716;
        _2824 = (((_2888 * cbLight._m0[_2837].y) * _2901) * _2902) + _2718;
        _2826 = (((_2888 * cbLight._m0[_2837].z) * _2901) * _2902) + _2720;
    }
    float _2968;
    float _2970;
    float _2972;
    float _2974;
    float _2976;
    float _2978;
    if (_2257.y == 0u)
    {
        uvec4 _2923 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2924 = _2923.x;
        uint _2935 = uint((float(_2923.y) * floor(float(uint(cbSceneParam._m0[85u].y * _903) / _2924))) + floor(float(uint(cbSceneParam._m0[85u].x * _902) / _2924)));
        float _2945 = (log2(_2035 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2946 = isnan(0.0) ? _2945 : (isnan(_2945) ? 0.0 : max(_2945, 0.0));
        uint _2949 = uint(isnan(14.0) ? _2946 : (isnan(_2946) ? 14.0 : min(_2946, 14.0)));
        uvec4 _2954 = texelFetch(g_lightClusterGridBuffer, int(((_2949 << 2u) + (_2935 << 6u)) >> 2u));
        uint _2955 = _2954.x;
        uint _2956 = _2923.z;
        float _3035;
        float _3037;
        float _3039;
        float _3041;
        float _3043;
        float _3045;
        if (((((1u << ((_2956 >> 4u) & 15u)) + 4294967295u) & _2955) == 0u) || ((_2956 & 240u) == 0u))
        {
            _3035 = 0.0;
            _3037 = 0.0;
            _3039 = 0.0;
            _3041 = 0.0;
            _3043 = 0.0;
            _3045 = 0.0;
        }
        else
        {
            float _3036;
            float _3038;
            float _3040;
            float _3042;
            float _3044;
            float _3046;
            float _3180 = 0.0;
            float _3181 = 0.0;
            float _3182 = 0.0;
            float _3183 = 0.0;
            float _3184 = 0.0;
            float _3185 = 0.0;
            uint _3186 = 0u;
            uint _3195;
            bool _3196;
            for (;;)
            {
                _3195 = texelFetch(g_lightClassification, int((((_2949 << 5u) + (_2935 << 9u)) + (_3186 << 2u)) >> 2u)).x;
                _3196 = _3195 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3196)
                {
                    frontier_phi_66_pred = _3185;
                    frontier_phi_66_pred_1 = _3184;
                    frontier_phi_66_pred_2 = _3183;
                    frontier_phi_66_pred_3 = _3182;
                    frontier_phi_66_pred_4 = _3181;
                    frontier_phi_66_pred_5 = _3180;
                }
                else
                {
                    float _3304;
                    float _3305;
                    float _3306;
                    float _3307;
                    float _3308;
                    float _3309;
                    uint _3310;
                    _3304 = _3180;
                    _3305 = _3181;
                    _3306 = _3182;
                    _3307 = _3183;
                    _3308 = _3184;
                    _3309 = _3185;
                    _3310 = _3195;
                    float _3236;
                    float _3237;
                    float _3238;
                    float _3239;
                    float _3240;
                    float _3241;
                    for (;;)
                    {
                        uint _3314 = uint(findLSB(_3310)) + (_3186 << 5u);
                        uint _3311 = (_3310 + 4294967295u) & _3310;
                        uint _3316 = _3314 * 48u;
                        vec4 _3330 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3316)).x, texelFetch(g_PointLightRenderingBuffer, int(_3316 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3316 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3316 + 3u)).x));
                        uint _3336 = (_3314 * 48u) + 4u;
                        vec4 _3349 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3336)).x, texelFetch(g_PointLightRenderingBuffer, int(_3336 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3336 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3336 + 3u)).x));
                        uint _3355 = (_3314 * 48u) + 8u;
                        vec3 _3366 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3355)).x, texelFetch(g_PointLightRenderingBuffer, int(_3355 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3355 + 2u)).x));
                        float _3370 = _3330.x - _2033;
                        float _3371 = _3330.y - _2034;
                        float _3372 = _3330.z - _2035;
                        float _3373 = dot(vec3(_3370, _3371, _3372), vec3(_3370, _3371, _3372));
                        float _3376 = inversesqrt(_3373);
                        float _3377 = _3376 * _3370;
                        float _3378 = _3376 * _3371;
                        float _3379 = _3376 * _3372;
                        float _3380 = dot(vec3(_921, _924, _927), vec3(_3377, _3378, _3379));
                        float _3385 = 1.0 - (_3373 * _3330.w);
                        float _4780 = isnan(0.0) ? _3385 : (isnan(_3385) ? 0.0 : max(_3385, 0.0));
                        float _3386 = isnan(1.0) ? _4780 : (isnan(_4780) ? 1.0 : min(_4780, 1.0));
                        float _3387 = sqrt(_3373) * _3349.w;
                        float _3390 = 1.39999997615814208984375 / (_3387 + 1.39999997615814208984375);
                        float _3391 = _3390 * _3390;
                        float _3394 = ((1.0 - _3391) * _3380) + _3391;
                        float _3397 = _3387 * _3387;
                        float _3401 = ((isnan(0.0) ? _3394 : (isnan(_3394) ? 0.0 : max(_3394, 0.0))) * _3386) / ((_3397 * 0.699999988079071044921875) + 1.0);
                        float _3405 = (-0.0) - _2033;
                        float _3406 = (-0.0) - _2034;
                        float _3407 = (-0.0) - _2035;
                        float _3411 = inversesqrt(dot(vec3(_3405, _3406, _3407), vec3(_3405, _3406, _3407)));
                        float _3412 = _3411 * _3405;
                        float _3413 = _3411 * _3406;
                        float _3414 = _3411 * _3407;
                        float _3421 = exp2(log2(1.0 / ((_3397 * 3.5) + 5.0)) * 0.25);
                        float _3422 = 1.0 - _981;
                        float _3429 = sqrt(1.0 - ((1.0 - (_3422 * _3422)) * (1.0 - (_3421 * _3421))));
                        float _3430 = _3429 * _3429;
                        float _3431 = _3430 * _3430;
                        float _3432 = _3412 + _3377;
                        float _3433 = _3413 + _3378;
                        float _3434 = _3414 + _3379;
                        float _3438 = inversesqrt(dot(vec3(_3432, _3433, _3434), vec3(_3432, _3433, _3434)));
                        float _3442 = dot(vec3(_921, _924, _927), vec3(_3412, _3413, _3414));
                        float _4796 = isnan(0.0) ? _3442 : (isnan(_3442) ? 0.0 : max(_3442, 0.0));
                        float _3445 = isnan(1.0) ? _4796 : (isnan(_4796) ? 1.0 : min(_4796, 1.0));
                        float _3446 = dot(vec3(_921, _924, _927), vec3(_3438 * _3432, _3438 * _3433, _3438 * _3434));
                        float _4807 = isnan(0.0) ? _3446 : (isnan(_3446) ? 0.0 : max(_3446, 0.0));
                        float _3449 = isnan(1.0) ? _4807 : (isnan(_4807) ? 1.0 : min(_4807, 1.0));
                        float _3453 = ((_3449 * _3449) * (_3431 + (-1.0))) + 1.0;
                        float _3454 = _3390 * _3430;
                        float _3455 = _3454 * _3454;
                        float _3458 = ((1.0 - _3455) * _3380) + _3455;
                        float _4818 = isnan(0.0) ? _3458 : (isnan(_3458) ? 0.0 : max(_3458, 0.0));
                        float _3459 = isnan(1.0) ? _4818 : (isnan(_4818) ? 1.0 : min(_4818, 1.0));
                        float _3460 = 1.0 - _3430;
                        float _3470 = (0.5 / (((_3459 * ((_3445 * _3460) + _3430)) + 9.9999999392252902907785028219223e-09) + (((_3459 * _3460) + _3430) * _3445))) * _3459;
                        float _4829 = isnan(0.0) ? _3470 : (isnan(_3470) ? 0.0 : max(_3470, 0.0));
                        float _3481 = (((_3431 * 3.1415927410125732421875) * (isnan(1.0) ? _4829 : (isnan(_4829) ? 1.0 : min(_4829, 1.0)))) / ((_3453 * _3453) * ((_3397 * 2.1991131305694580078125) + 3.141590118408203125))) * _3386;
                        _3239 = (_3401 * _3349.x) + _3307;
                        _3240 = (_3401 * _3349.y) + _3308;
                        _3241 = (_3401 * _3349.z) + _3309;
                        _3236 = (_3481 * _3366.x) + _3304;
                        _3237 = (_3481 * _3366.y) + _3305;
                        _3238 = (_3481 * _3366.z) + _3306;
                        if (_3311 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3304 = _3236;
                            _3305 = _3237;
                            _3306 = _3238;
                            _3307 = _3239;
                            _3308 = _3240;
                            _3309 = _3241;
                            _3310 = _3311;
                        }
                    }
                    frontier_phi_66_pred = _3241;
                    frontier_phi_66_pred_1 = _3240;
                    frontier_phi_66_pred_2 = _3239;
                    frontier_phi_66_pred_3 = _3238;
                    frontier_phi_66_pred_4 = _3237;
                    frontier_phi_66_pred_5 = _3236;
                }
                _3046 = frontier_phi_66_pred;
                _3044 = frontier_phi_66_pred_1;
                _3042 = frontier_phi_66_pred_2;
                _3040 = frontier_phi_66_pred_3;
                _3038 = frontier_phi_66_pred_4;
                _3036 = frontier_phi_66_pred_5;
                uint _3187 = _3186 + 1u;
                if (_3187 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3180 = _3036;
                    _3181 = _3038;
                    _3182 = _3040;
                    _3183 = _3042;
                    _3184 = _3044;
                    _3185 = _3046;
                    _3186 = _3187;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3035 = _3036;
            _3037 = _3038;
            _3039 = _3040;
            _3041 = _3042;
            _3043 = _3044;
            _3045 = _3046;
        }
        uvec4 _3049 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3050 = _3049.z;
        uint _3052 = (_3050 >> 8u) & 15u;
        float _3148;
        float _3150;
        float _3152;
        float _3154;
        float _3156;
        float _3158;
        if (((4294967295u << _3052) & _2955) == 0u)
        {
            _3148 = _3035;
            _3150 = _3037;
            _3152 = _3039;
            _3154 = _3041;
            _3156 = _3043;
            _3158 = _3045;
        }
        else
        {
            float _3173 = inversesqrt(dot(vec3(_2033, _2034, _2035), vec3(_2033, _2034, _2035)));
            float _3174 = _3173 * _2033;
            float _3175 = _3173 * _2034;
            float _3176 = _3173 * _2035;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_3052 < ((_3050 >> 12u) & 15u))
            {
                float _3149;
                float _3151;
                float _3153;
                float _3155;
                float _3157;
                float _3159;
                float _3287 = _3035;
                float _3288 = _3037;
                float _3289 = _3039;
                float _3290 = _3041;
                float _3291 = _3043;
                float _3292 = _3045;
                uint _3293 = _3052;
                uint _3302;
                bool _3303;
                for (;;)
                {
                    _3302 = texelFetch(g_lightClassification, int((((_2949 << 5u) + (_2935 << 9u)) + (_3293 << 2u)) >> 2u)).x;
                    _3303 = _3302 == 0u;
                    float frontier_phi_72_pred;
                    float frontier_phi_72_pred_1;
                    float frontier_phi_72_pred_2;
                    float frontier_phi_72_pred_3;
                    float frontier_phi_72_pred_4;
                    float frontier_phi_72_pred_5;
                    if (_3303)
                    {
                        frontier_phi_72_pred = _3292;
                        frontier_phi_72_pred_1 = _3291;
                        frontier_phi_72_pred_2 = _3290;
                        frontier_phi_72_pred_3 = _3289;
                        frontier_phi_72_pred_4 = _3288;
                        frontier_phi_72_pred_5 = _3287;
                    }
                    else
                    {
                        float _3486;
                        float _3487;
                        float _3488;
                        float _3489;
                        float _3490;
                        float _3491;
                        float _3779;
                        float _3780;
                        float _3781;
                        float _3782;
                        float _3783;
                        float _3784;
                        float _3499 = _3287;
                        float _3500 = _3288;
                        float _3501 = _3289;
                        float _3502 = _3290;
                        float _3503 = _3291;
                        float _3504 = _3292;
                        uint _3505 = _3302;
                        uint _3506;
                        vec4 _3531;
                        float _3532;
                        vec4 _3547;
                        vec3 _3559;
                        vec4 _3574;
                        vec4 _3589;
                        float _3635;
                        bool _3636;
                        for (;;)
                        {
                            uint _3516 = ((_3293 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3505));
                            _3506 = (_3505 + 4294967295u) & _3505;
                            uint _3518 = _3516 * 40u;
                            _3531 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3518)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3518 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3518 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3518 + 3u)).x));
                            _3532 = _3531.w;
                            uint _3534 = (_3516 * 40u) + 4u;
                            _3547 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3534)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3534 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3534 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3534 + 3u)).x));
                            uint _3549 = (_3516 * 40u) + 8u;
                            _3559 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3549)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3549 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3549 + 2u)).x));
                            uint _3561 = (_3516 * 40u) + 16u;
                            _3574 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3561)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3561 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3561 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3561 + 3u)).x));
                            uint _3576 = (_3516 * 40u) + 20u;
                            _3589 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3576)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3576 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3576 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3576 + 3u)).x));
                            uint _3591 = (_3516 * 40u) + 24u;
                            vec4 _3604 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3591)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3591 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3591 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3591 + 3u)).x));
                            uint _3610 = (_3516 * 40u) + 28u;
                            vec4 _3623 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3610)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3610 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3610 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3610 + 3u)).x));
                            _3635 = fma(_2035, _3623.z, fma(_2034, _3623.y, _3623.x * _2033)) + _3623.w;
                            _3636 = !((fma(_2035, _3604.z, fma(_2034, _3604.y, _3604.x * _2033)) + _3604.w) <= 0.0);
                            float frontier_phi_78_pred;
                            float frontier_phi_78_pred_1;
                            float frontier_phi_78_pred_2;
                            float frontier_phi_78_pred_3;
                            float frontier_phi_78_pred_4;
                            float frontier_phi_78_pred_5;
                            if (_3636)
                            {
                                float _3663 = _3531.x - _2033;
                                float _3664 = _3531.y - _2034;
                                float _3665 = _3531.z - _2035;
                                float _3666 = dot(vec3(_3663, _3664, _3665), vec3(_3663, _3664, _3665));
                                float _3669 = inversesqrt(_3666);
                                float _3670 = _3669 * _3663;
                                float _3671 = _3669 * _3664;
                                float _3672 = _3669 * _3665;
                                float _3676 = 1.0 - (_3666 / (_3532 * _3532));
                                float _4840 = isnan(0.0) ? _3676 : (isnan(_3676) ? 0.0 : max(_3676, 0.0));
                                float _3677 = isnan(1.0) ? _4840 : (isnan(_4840) ? 1.0 : min(_4840, 1.0));
                                float _3681 = sqrt(_3666) * _3547.w;
                                float _3683 = 1.39999997615814208984375 / (_3681 + 1.39999997615814208984375);
                                float _3684 = _3683 * _3683;
                                float _3687 = ((1.0 - _3684) * dot(vec3(_3670, _3671, _3672), vec3(_921, _924, _927))) + _3684;
                                float _3690 = _3681 * _3681;
                                float _3694 = (fma(_2035, _3574.z, fma(_2034, _3574.y, _3574.x * _2033)) + _3574.w) / _3635;
                                float _3695 = (fma(_2035, _3589.z, fma(_2034, _3589.y, _3589.x * _2033)) + _3589.w) / _3635;
                                float _3699 = 1.0 - dot(vec2(_3694, _3695), vec2(_3694, _3695));
                                float _4856 = isnan(0.0) ? _3699 : (isnan(_3699) ? 0.0 : max(_3699, 0.0));
                                float _3700 = isnan(1.0) ? _4856 : (isnan(_4856) ? 1.0 : min(_4856, 1.0));
                                float _3701 = _3700 * (((isnan(0.0) ? _3687 : (isnan(_3687) ? 0.0 : max(_3687, 0.0))) * _3677) / ((_3690 * 0.699999988079071044921875) + 1.0));
                                float _3713 = exp2(log2(1.0 / ((_3690 * 3.5) + 5.0)) * 0.25);
                                float _3714 = 1.0 - _981;
                                float _3721 = sqrt(1.0 - ((1.0 - (_3714 * _3714)) * (1.0 - (_3713 * _3713))));
                                float _3722 = _3721 * _3721;
                                float _3723 = _3722 * _3722;
                                float _3724 = _3670 - _3174;
                                float _3725 = _3671 - _3175;
                                float _3726 = _3672 - _3176;
                                float _3730 = inversesqrt(dot(vec3(_3724, _3725, _3726), vec3(_3724, _3725, _3726)));
                                float _3734 = dot(vec3(_921, _924, _927), vec3((-0.0) - _3174, (-0.0) - _3175, (-0.0) - _3176));
                                float _4867 = isnan(0.0) ? _3734 : (isnan(_3734) ? 0.0 : max(_3734, 0.0));
                                float _3737 = isnan(1.0) ? _4867 : (isnan(_4867) ? 1.0 : min(_4867, 1.0));
                                float _3738 = dot(vec3(_921, _924, _927), vec3(_3730 * _3724, _3730 * _3725, _3730 * _3726));
                                float _4878 = isnan(0.0) ? _3738 : (isnan(_3738) ? 0.0 : max(_3738, 0.0));
                                float _3741 = isnan(1.0) ? _4878 : (isnan(_4878) ? 1.0 : min(_4878, 1.0));
                                float _3745 = ((_3741 * _3741) * (_3723 + (-1.0))) + 1.0;
                                float _3746 = _3683 * _3722;
                                float _3747 = _3746 * _3746;
                                float _3753 = ((1.0 - _3747) * dot(vec3(_921, _924, _927), vec3(_3670, _3671, _3672))) + _3747;
                                float _4889 = isnan(0.0) ? _3753 : (isnan(_3753) ? 0.0 : max(_3753, 0.0));
                                float _3754 = isnan(1.0) ? _4889 : (isnan(_4889) ? 1.0 : min(_4889, 1.0));
                                float _3755 = 1.0 - _3722;
                                float _3765 = (0.5 / (((_3754 * ((_3737 * _3755) + _3722)) + 9.9999999392252902907785028219223e-09) + (((_3754 * _3755) + _3722) * _3737))) * _3754;
                                float _4900 = isnan(0.0) ? _3765 : (isnan(_3765) ? 0.0 : max(_3765, 0.0));
                                float _3775 = (_3700 * _3677) * (((_3723 * 3.1415927410125732421875) * (isnan(1.0) ? _4900 : (isnan(_4900) ? 1.0 : min(_4900, 1.0)))) / ((_3745 * _3745) * ((_3690 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_78_pred = _3701 * _3547.y;
                                frontier_phi_78_pred_1 = _3701 * _3547.x;
                                frontier_phi_78_pred_2 = _3775 * _3559.z;
                                frontier_phi_78_pred_3 = _3775 * _3559.y;
                                frontier_phi_78_pred_4 = _3775 * _3559.x;
                                frontier_phi_78_pred_5 = _3701 * _3547.z;
                            }
                            else
                            {
                                frontier_phi_78_pred = 0.0;
                                frontier_phi_78_pred_1 = 0.0;
                                frontier_phi_78_pred_2 = 0.0;
                                frontier_phi_78_pred_3 = 0.0;
                                frontier_phi_78_pred_4 = 0.0;
                                frontier_phi_78_pred_5 = 0.0;
                            }
                            _3783 = frontier_phi_78_pred;
                            _3782 = frontier_phi_78_pred_1;
                            _3781 = frontier_phi_78_pred_2;
                            _3780 = frontier_phi_78_pred_3;
                            _3779 = frontier_phi_78_pred_4;
                            _3784 = frontier_phi_78_pred_5;
                            _3489 = _3782 + _3502;
                            _3490 = _3783 + _3503;
                            _3491 = _3784 + _3504;
                            _3486 = _3779 + _3499;
                            _3487 = _3780 + _3500;
                            _3488 = _3781 + _3501;
                            if (_3506 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3499 = _3486;
                                _3500 = _3487;
                                _3501 = _3488;
                                _3502 = _3489;
                                _3503 = _3490;
                                _3504 = _3491;
                                _3505 = _3506;
                                continue;
                            }
                        }
                        frontier_phi_72_pred = _3491;
                        frontier_phi_72_pred_1 = _3490;
                        frontier_phi_72_pred_2 = _3489;
                        frontier_phi_72_pred_3 = _3488;
                        frontier_phi_72_pred_4 = _3487;
                        frontier_phi_72_pred_5 = _3486;
                    }
                    _3159 = frontier_phi_72_pred;
                    _3157 = frontier_phi_72_pred_1;
                    _3155 = frontier_phi_72_pred_2;
                    _3153 = frontier_phi_72_pred_3;
                    _3151 = frontier_phi_72_pred_4;
                    _3149 = frontier_phi_72_pred_5;
                    uint _3294 = _3293 + 1u;
                    if (_3294 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3287 = _3149;
                        _3288 = _3151;
                        _3289 = _3153;
                        _3290 = _3155;
                        _3291 = _3157;
                        _3292 = _3159;
                        _3293 = _3294;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _3159;
                frontier_phi_60_61_ladder_1 = _3157;
                frontier_phi_60_61_ladder_2 = _3153;
                frontier_phi_60_61_ladder_3 = _3151;
                frontier_phi_60_61_ladder_4 = _3149;
                frontier_phi_60_61_ladder_5 = _3155;
            }
            else
            {
                frontier_phi_60_61_ladder = _3045;
                frontier_phi_60_61_ladder_1 = _3043;
                frontier_phi_60_61_ladder_2 = _3039;
                frontier_phi_60_61_ladder_3 = _3037;
                frontier_phi_60_61_ladder_4 = _3035;
                frontier_phi_60_61_ladder_5 = _3041;
            }
            _3148 = frontier_phi_60_61_ladder_4;
            _3150 = frontier_phi_60_61_ladder_3;
            _3152 = frontier_phi_60_61_ladder_2;
            _3154 = frontier_phi_60_61_ladder_5;
            _3156 = frontier_phi_60_61_ladder_1;
            _3158 = frontier_phi_60_61_ladder;
        }
        float _3163 = isnan(1.0) ? _965 : (isnan(_965) ? 1.0 : min(_965, 1.0));
        _2968 = (_3163 * _3154) + _2499;
        _2970 = (_3163 * _3156) + _2501;
        _2972 = (_3163 * _3158) + _2503;
        _2974 = ((_3148 * 0.039999999105930328369140625) * _3163) + _2822;
        _2976 = ((_3150 * 0.039999999105930328369140625) * _3163) + _2824;
        _2978 = ((_3152 * 0.039999999105930328369140625) * _3163) + _2826;
    }
    else
    {
        _2968 = _2499;
        _2970 = _2501;
        _2972 = _2503;
        _2974 = _2822;
        _2976 = _2824;
        _2978 = _2826;
    }
    float _4916 = isnan(0.0) ? _950 : (isnan(_950) ? 0.0 : max(_950, 0.0));
    float _4927 = isnan(0.0) ? _951 : (isnan(_951) ? 0.0 : max(_951, 0.0));
    float _4938 = isnan(0.0) ? _952 : (isnan(_952) ? 0.0 : max(_952, 0.0));
    uint _2998 = _274 + 6u;
    float _3006 = _902 / cbSceneParam._m0[86u].x;
    float _3007 = _903 / cbSceneParam._m0[86u].y;
    vec4 _3021 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3006, _3007, (log2((isnan(cbSceneParam._m0[77u].w) ? _835 : (isnan(_835) ? cbSceneParam._m0[77u].w : min(_835, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3023 = _3021.x;
    float _3024 = _3021.y;
    float _3025 = _3021.z;
    float _3026 = _3021.w;
    float _3098;
    float _3100;
    float _3102;
    float _3104;
    if (_835 > cbSceneParam._m0[78u].w)
    {
        float _3060 = isnan(_835) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _835 : min(cbSceneParam._m0[80u].w, _835));
        float _3061 = _3060 / _835;
        float _3072 = _3061 * _887;
        float _3073 = _888 * _3061;
        float _3074 = (-0.0) - _3073;
        float _3076 = _3061 * _889;
        float _3078 = (cbSceneParam._m0[77u].w * _3074) / _3060;
        float _3079 = _3078 + cbSceneParam._m0[79u].w;
        float _3080 = cbSceneParam._m0[79u].w - _3073;
        float _3086 = sqrt(((_3072 * _3072) + (_3073 * _3073)) + (_3076 * _3076));
        float _3089 = (1.0 - (cbSceneParam._m0[77u].w / _3060)) * _3086;
        float _3094 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3096 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3249;
        if (abs((_3074 - _3078) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3249 = ((((_3079 > 0.0) ? exp2(_3094 * _3079) : (2.0 - exp2(_3096 * _3079))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3089;
        }
        else
        {
            float _3209 = 1.0 / cbSceneParam._m0[80u].x;
            float _3210 = isnan(_3080) ? _3079 : (isnan(_3079) ? _3080 : max(_3079, _3080));
            float _3211 = isnan(_3080) ? _3079 : (isnan(_3079) ? _3080 : min(_3079, _3080));
            float _3220 = isnan(0.0) ? _3210 : (isnan(_3210) ? 0.0 : min(_3210, 0.0));
            float _3221 = isnan(0.0) ? _3211 : (isnan(_3211) ? 0.0 : min(_3211, 0.0));
            _3249 = ((abs(_3086 / _3074) * cbSceneParam._m0[80u].y) * ((((_3220 - _3221) * 2.0) - ((exp2(_3094 * (isnan(0.0) ? _3210 : (isnan(_3210) ? 0.0 : max(_3210, 0.0)))) - exp2(_3094 * (isnan(0.0) ? _3211 : (isnan(_3211) ? 0.0 : max(_3211, 0.0))))) * _3209)) - ((exp2(_3096 * _3220) - exp2(_3096 * _3221)) * _3209))) + (_3089 * cbSceneParam._m0[80u].z);
        }
        vec4 _3251 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3006, _3007, 1.0), 0.0);
        float _3260 = exp2((_3249 * (-1.44269502162933349609375)) * (1.0 - _3251.w));
        float _3261 = log2(_3260);
        float _3277 = log2(_3026);
        _3098 = (exp2(_3277 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3261 * cbSceneParam._m0[78u].x)) * _3251.x) / cbSceneParam._m0[78u].x)) + _3023;
        _3100 = (exp2(_3277 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3261 * cbSceneParam._m0[78u].y)) * _3251.y) / cbSceneParam._m0[78u].y)) + _3024;
        _3102 = (exp2(_3277 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3261 * cbSceneParam._m0[78u].z)) * _3251.z) / cbSceneParam._m0[78u].z)) + _3025;
        _3104 = _3260 * _3026;
    }
    else
    {
        _3098 = _3023;
        _3100 = _3024;
        _3102 = _3025;
        _3104 = _3026;
    }
    float _3116 = roundEven(cbMatDynParam._m0[0u].y);
    bool _3117 = _3116 == 3.0;
    float _3118 = log2(_3104);
    float _3125 = exp2(_3118 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4916 : (isnan(_4916) ? 1.0 : min(_4916, 1.0))) * (_2968 + ((isnan(0.0) ? _1690 : (isnan(_1690) ? 0.0 : max(_1690, 0.0))) * _965))) + ((_2974 + ((isnan(0.0) ? _1980 : (isnan(_1980) ? 0.0 : max(_1980, 0.0))) * _1769)) * cbPerFrame._m0[3u].x));
    float _3126 = exp2(_3118 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4927 : (isnan(_4927) ? 1.0 : min(_4927, 1.0))) * (_2970 + ((isnan(0.0) ? _1693 : (isnan(_1693) ? 0.0 : max(_1693, 0.0))) * _965))) + ((_2976 + ((isnan(0.0) ? _1983 : (isnan(_1983) ? 0.0 : max(_1983, 0.0))) * _1769)) * cbPerFrame._m0[3u].x));
    float _3127 = exp2(_3118 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4938 : (isnan(_4938) ? 1.0 : min(_4938, 1.0))) * (_2972 + ((isnan(0.0) ? _1696 : (isnan(_1696) ? 0.0 : max(_1696, 0.0))) * _965))) + ((_2978 + ((isnan(0.0) ? _1986 : (isnan(_1986) ? 0.0 : max(_1986, 0.0))) * _1769)) * cbPerFrame._m0[3u].x));
    float _3136 = (_3116 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _3136 * (_3117 ? _3125 : (_3125 + (cbSceneParam._m0[72u].w * _3098)));
    SV_Target.y = _3136 * (_3117 ? _3126 : (_3126 + (cbSceneParam._m0[72u].w * _3100)));
    SV_Target.z = _3136 * (_3117 ? _3127 : (_3127 + (cbSceneParam._m0[72u].w * _3102)));
    SV_Target.w = cbInstanceData._m0[_2998].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2998].w;
}


