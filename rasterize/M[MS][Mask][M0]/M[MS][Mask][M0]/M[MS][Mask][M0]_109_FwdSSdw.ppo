#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_0;
layout(set = 0, binding = 13) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_22;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_29;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_10;
layout(set = 0, binding = 20) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_6;
layout(set = 0, binding = 23) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_8;
layout(set = 0, binding = 24) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_9;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1464;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _238 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _239 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _240 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _246 = inversesqrt(dot(vec3(_238, _239, _240), vec3(_238, _239, _240)));
    float _253 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _260 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _272 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _274 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _275 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3793 = isnan(0.0) ? _272 : (isnan(_272) ? 0.0 : max(_272, 0.0));
    float _3804 = isnan(0.0) ? _274 : (isnan(_274) ? 0.0 : max(_274, 0.0));
    float _3815 = isnan(0.0) ? _275 : (isnan(_275) ? 0.0 : max(_275, 0.0));
    uint _285 = uint(roundEven(NORMAL.w)) * 13u;
    uint _290 = _285 + 1u;
    uint _294 = _285 + 2u;
    float _303 = sqrt(((cbInstanceData._m0[_290].x * cbInstanceData._m0[_290].x) + (cbInstanceData._m0[_285].x * cbInstanceData._m0[_285].x)) + (cbInstanceData._m0[_294].x * cbInstanceData._m0[_294].x));
    float _304 = _303 * TEXCOORD.z;
    float _305 = _303 * TEXCOORD.w;
    vec4 _318 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _304) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _305) + cbTextureTilingScale._m0[13u].w));
    vec4 _341 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _367 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _372 = _367.x * cbMtdParam._m0[11u].x;
    float _373 = _367.y * cbMtdParam._m0[11u].y;
    float _374 = _367.z * cbMtdParam._m0[11u].z;
    vec4 _393 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _304) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _305) + cbTextureTilingScale._m0[5u].w));
    vec4 _412 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _450 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _452 = _450.x;
    float _464 = dot(vec4(_452, _450.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _481 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _412.x) * 2.0) - ((((_452 - _464) * cbMtdParam._m0[24u].z) + _464) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3826 = isnan(0.0) ? _481 : (isnan(_481) ? 0.0 : max(_481, 0.0));
    float _482 = isnan(1.0) ? _3826 : (isnan(_3826) ? 1.0 : min(_3826, 1.0));
    float _489 = (_482 * ((_393.x * cbMtdParam._m0[12u].x) - _372)) + _372;
    float _490 = (_482 * ((_393.y * cbMtdParam._m0[12u].y) - _373)) + _373;
    float _491 = (_482 * ((_393.z * cbMtdParam._m0[12u].z) - _374)) + _374;
    vec4 _508 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _304) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _305) + cbTextureTilingScale._m0[3u].w));
    vec4 _528 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _530 = _528.x;
    float _540 = dot(vec4(_530, _528.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _554 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _412.y) * 2.0) - ((((_530 - _540) * cbMtdParam._m0[24u].z) + _540) * cbMtdParam._m0[20u].w))) + 1.0;
    float _3837 = isnan(0.0) ? _554 : (isnan(_554) ? 0.0 : max(_554, 0.0));
    float _555 = isnan(1.0) ? _3837 : (isnan(_3837) ? 1.0 : min(_3837, 1.0));
    float _562 = (_555 * ((_508.x * cbMtdParam._m0[13u].x) - _489)) + _489;
    float _563 = (_555 * ((_508.y * cbMtdParam._m0[13u].y) - _490)) + _490;
    float _564 = (_555 * ((_508.z * cbMtdParam._m0[13u].z) - _491)) + _491;
    vec4 _582 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_9, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[24u].x * _304) + cbTextureTilingScale._m0[24u].z, (cbTextureTilingScale._m0[24u].y * _305) + cbTextureTilingScale._m0[24u].w));
    vec4 _599 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[25u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _601 = _599.x;
    float _611 = dot(vec4(_601, _599.yzw), vec4(cbMtdParam._m0[30u].w, cbMtdParam._m0[31u].xy, 0.0));
    float _623 = ((cbMtdParam._m0[25u].x * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.z) - _412.z) * 2.0) - ((((_601 - _611) * cbMtdParam._m0[24u].z) + _611) * cbMtdParam._m0[20u].z))) + 1.0;
    float _3848 = isnan(0.0) ? _623 : (isnan(_623) ? 0.0 : max(_623, 0.0));
    float _624 = isnan(1.0) ? _3848 : (isnan(_3848) ? 1.0 : min(_3848, 1.0));
    float _634 = (_341.x * cbMtdParam._m0[9u].x) * ((_624 * ((_582.x * cbMtdParam._m0[14u].x) - _562)) + _562);
    float _635 = (_341.y * cbMtdParam._m0[9u].y) * ((_624 * ((_582.y * cbMtdParam._m0[14u].y) - _563)) + _563);
    float _636 = (_341.z * cbMtdParam._m0[9u].z) * ((_624 * ((_582.z * cbMtdParam._m0[14u].z) - _564)) + _564);
    float _640 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _318.x) * _634;
    float _643 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _318.y) * _635;
    float _646 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _318.z) * _636;
    float _654 = (((_634 - _640) * (isnan(1.0) ? _3793 : (isnan(_3793) ? 1.0 : min(_3793, 1.0)))) + _640) * 4.55000019073486328125;
    float _656 = (((_635 - _643) * (isnan(1.0) ? _3804 : (isnan(_3804) ? 1.0 : min(_3804, 1.0)))) + _643) * 4.55000019073486328125;
    float _658 = (((_636 - _646) * (isnan(1.0) ? _3815 : (isnan(_3815) ? 1.0 : min(_3815, 1.0)))) + _646) * 4.55000019073486328125;
    vec4 _670 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _304) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _305) + cbTextureTilingScale._m0[20u].w));
    vec4 _693 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _304) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _305) + cbTextureTilingScale._m0[4u].w));
    vec4 _710 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _712 = _710.x;
    float _713 = _710.y;
    float _714 = _710.z;
    float _721 = ((_693.x - _712) * _482) + _712;
    float _722 = ((_693.y - _713) * _482) + _713;
    float _723 = ((_693.z - _714) * _482) + _714;
    vec4 _735 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _304) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _305) + cbTextureTilingScale._m0[2u].w));
    float _746 = ((_735.x - _721) * _555) + _721;
    float _747 = ((_735.y - _722) * _555) + _722;
    float _748 = ((_735.z - _723) * _555) + _723;
    vec4 _760 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[23u].x * _304) + cbTextureTilingScale._m0[23u].z, (cbTextureTilingScale._m0[23u].y * _305) + cbTextureTilingScale._m0[23u].w));
    float _773 = ((_760.z - _748) * _624) + _748;
    float _776 = ((((_760.x - _746) * _624) + _746) * 2.0) + (-1.0);
    float _777 = ((((_760.y - _747) * _624) + _747) * 2.0) + (-1.0);
    float _778 = dot(vec2(_776, _777), vec2(_776, _777));
    float _3859 = isnan(0.0) ? _778 : (isnan(_778) ? 0.0 : max(_778, 0.0));
    float _783 = sqrt(1.0 - (isnan(1.0) ? _3859 : (isnan(_3859) ? 1.0 : min(_3859, 1.0))));
    vec4 _803 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _815 = (_776 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_670.x * 2.0) + (-1.0)))) + (((_803.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _816 = (_777 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_670.y * 2.0) + (-1.0)))) + (((_803.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    vec4 _828 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _304) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _305) + cbTextureTilingScale._m0[19u].w));
    float _830 = _828.x;
    float _831 = 1.0 - _830;
    float _859 = (TEXCOORD_8.x - ((cbMtdParam._m0[22u].w * (1.0 - TEXCOORD_8.x)) * ((((_830 - _831) * cbMtdParam._m0[24u].y) + _831) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3870 = isnan(0.0) ? _859 : (isnan(_859) ? 0.0 : max(_859, 0.0));
    float _860 = isnan(1.0) ? _3870 : (isnan(_3870) ? 1.0 : min(_3870, 1.0));
    float _868 = ((((cbMtdParam._m0[10u].x - _654) * TEXCOORD_8.x) * cbMtdParam._m0[23u].w) * _860) + _654;
    float _869 = ((((cbMtdParam._m0[10u].y - _656) * TEXCOORD_8.y) * cbMtdParam._m0[23u].w) * _860) + _656;
    float _870 = (((cbMtdParam._m0[23u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _658)) * _860) + _658;
    float _875 = (((_670.z - _773) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _773;
    float _879 = ((_803.z - _875) * cbMtdParam._m0[19u].w) + _875;
    float _883 = ((cbMtdParam._m0[23u].y - _879) * _860) + _879;
    vec4 _902 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _304) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _305) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _908 = (_902.x * 2.0) + (-1.0);
    float _909 = (_902.y * 2.0) + (-1.0);
    float _910 = dot(vec2(_908, _909), vec2(_908, _909));
    float _3881 = isnan(0.0) ? _910 : (isnan(_910) ? 0.0 : max(_910, 0.0));
    float _926 = (_860 * (((cbMtdParam._m0[22u].z * _815) - _815) + _908)) + _815;
    float _927 = (_860 * (((cbMtdParam._m0[22u].z * _816) - _816) + _909)) + _816;
    float _928 = (_860 * (sqrt(1.0 - (isnan(1.0) ? _3881 : (isnan(_3881) ? 1.0 : min(_3881, 1.0)))) - _783)) + _783;
    float _930 = cbMtdParam._m0[22u].x + _803.w;
    float _933 = fma(_928, _253 * NORMAL.x, fma(_927, _260 * TANGENT.x, (_246 * _238) * _926));
    float _936 = fma(_928, _253 * NORMAL.y, fma(_927, _260 * TANGENT.y, (_246 * _239) * _926));
    float _939 = fma(_928, _253 * NORMAL.z, fma(_927, _260 * TANGENT.z, (_246 * _240) * _926));
    float _943 = inversesqrt(dot(vec3(_933, _936, _939), vec3(_933, _936, _939)));
    float _944 = _943 * _933;
    float _945 = _943 * _936;
    float _946 = _943 * _939;
    float _3892 = isnan(0.0) ? _883 : (isnan(_883) ? 0.0 : max(_883, 0.0));
    float _947 = isnan(1.0) ? _3892 : (isnan(_3892) ? 1.0 : min(_3892, 1.0));
    float _3903 = isnan(0.0) ? _930 : (isnan(_930) ? 0.0 : max(_930, 0.0));
    float _3914 = isnan(0.0) ? _868 : (isnan(_868) ? 0.0 : max(_868, 0.0));
    float _3925 = isnan(0.0) ? _869 : (isnan(_869) ? 0.0 : max(_869, 0.0));
    float _3936 = isnan(0.0) ? _870 : (isnan(_870) ? 0.0 : max(_870, 0.0));
    float _965 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _1005 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _1015 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _1005);
    float _1016 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _1005);
    float _1017 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _1005);
    float _1021 = inversesqrt(dot(vec3(_1015, _1016, _1017), vec3(_1015, _1016, _1017)));
    float _1022 = _1015 * _1021;
    float _1023 = _1016 * _1021;
    float _1024 = _1017 * _1021;
    float _1030 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1031 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1049 = fma(_946, cbSceneParam._m0[5u].z, fma(_945, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _944));
    float _1052 = fma(_946, cbSceneParam._m0[6u].z, fma(_945, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _944));
    float _1055 = fma(_946, cbSceneParam._m0[7u].z, fma(_945, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _944));
    uint _1069 = (_285 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _1075 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3914 : (isnan(_3914) ? 1.0 : min(_3914, 1.0)))) * cbInstanceData._m0[_1069].x;
    float _1076 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3925 : (isnan(_3925) ? 1.0 : min(_3925, 1.0)))) * cbInstanceData._m0[_1069].y;
    float _1077 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3936 : (isnan(_3936) ? 1.0 : min(_3936, 1.0)))) * cbInstanceData._m0[_1069].z;
    float _3947 = isnan(0.0) ? _1075 : (isnan(_1075) ? 0.0 : max(_1075, 0.0));
    float _1078 = isnan(1.0) ? _3947 : (isnan(_3947) ? 1.0 : min(_3947, 1.0));
    float _3958 = isnan(0.0) ? _1076 : (isnan(_1076) ? 0.0 : max(_1076, 0.0));
    float _1079 = isnan(1.0) ? _3958 : (isnan(_3958) ? 1.0 : min(_3958, 1.0));
    float _3969 = isnan(0.0) ? _1077 : (isnan(_1077) ? 0.0 : max(_1077, 0.0));
    float _1080 = isnan(1.0) ? _3969 : (isnan(_3969) ? 1.0 : min(_3969, 1.0));
    vec4 _1089 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1030, cbSceneParam._m0[86u].y * _1031));
    float _1093 = ((isnan(1.0) ? _3903 : (isnan(_3903) ? 1.0 : min(_3903, 1.0))) * TEXCOORD_5.w) * _1089.x;
    float _1094 = dot(vec3(_944, _945, _946), vec3(_1022, _1023, _1024));
    float _1097 = _1094 * 2.0;
    float _1101 = (_1097 * _944) - _1022;
    float _1102 = (_1097 * _945) - _1023;
    float _1103 = (_1097 * _946) - _1024;
    float _1107 = abs(dot(vec3(_1022, _1023, _1024), vec3(_944, _945, _946)));
    float _3980 = isnan(0.0) ? _1107 : (isnan(_1107) ? 0.0 : max(_1107, 0.0));
    float _1109 = sqrt(_947);
    float _1122 = exp2((_1109 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3980 : (isnan(_3980) ? 1.0 : min(_3980, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1109 * 3.0));
    float _1154 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1158 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1162 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1463;
    float _1465;
    float _1466;
    float _1467;
    float _1468;
    float _1469;
    float _1470;
    float _1471;
    float _1472;
    float _1473;
    float _1474;
    float _1475;
    float _1476;
    float _1477;
    float _1478;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1188 = fma(_1162, cbModelParam._m0[26u].z, fma(_1158, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1154));
        float _1192 = fma(_1162, cbModelParam._m0[27u].z, fma(_1158, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1154));
        float _1196 = fma(_1162, cbModelParam._m0[28u].z, fma(_1158, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1154));
        float _1221 = _1154 + _944;
        float _1222 = _1158 + _945;
        float _1223 = _1162 + _946;
        float _1233 = fma(_1223, cbModelParam._m0[26u].z, fma(_1222, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1221)) - _1188;
        float _1234 = fma(_1223, cbModelParam._m0[27u].z, fma(_1222, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1221)) - _1192;
        float _1235 = fma(_1223, cbModelParam._m0[28u].z, fma(_1222, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1221)) - _1196;
        float _1239 = inversesqrt(dot(vec3(_1233, _1234, _1235), vec3(_1233, _1234, _1235)));
        float _1252 = ((_1239 * _1233) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1188 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1253 = ((_1239 * _1234) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1192 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1254 = ((_1239 * _1235) / cbModelParam._m0[34u].z) + ((((((_1196 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1257 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1252, _1253, _1254), 0.0);
        vec4 _1264 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1252, _1253, _1254), 0.0);
        vec4 _1271 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1252, _1253, _1254), 0.0);
        vec4 _1278 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1252, _1253, _1254), 0.0);
        float _1291 = exp2((_1257.w + (-0.5)) * 20.0) * 2.0;
        float _1292 = _1291 * (_1257.x + (-0.5));
        float _1293 = _1291 * (_1257.y + (-0.5));
        float _1294 = _1291 * (_1257.z + (-0.5));
        float _1301 = exp2((_1264.w + (-0.5)) * 20.0) * 2.0;
        float _1302 = _1301 * (_1264.x + (-0.5));
        float _1303 = _1301 * (_1264.y + (-0.5));
        float _1304 = _1301 * (_1264.z + (-0.5));
        float _1311 = exp2((_1271.w + (-0.5)) * 20.0) * 2.0;
        float _1312 = _1311 * (_1271.x + (-0.5));
        float _1313 = _1311 * (_1271.y + (-0.5));
        float _1314 = _1311 * (_1271.z + (-0.5));
        float _1321 = exp2((_1278.w + (-0.5)) * 20.0) * 2.0;
        float _1322 = _1321 * (_1278.x + (-0.5));
        float _1323 = _1321 * (_1278.y + (-0.5));
        float _1324 = _1321 * (_1278.z + (-0.5));
        float _1325 = isnan(0.0) ? _1322 : (isnan(_1322) ? 0.0 : max(_1322, 0.0));
        float _1326 = isnan(0.0) ? _1323 : (isnan(_1323) ? 0.0 : max(_1323, 0.0));
        float _1327 = isnan(0.0) ? _1324 : (isnan(_1324) ? 0.0 : max(_1324, 0.0));
        float _1328 = _1292 * 0.5;
        float _1329 = _1302 * 0.5;
        float _1330 = _1312 * 0.5;
        float _1331 = dot(vec3(_1328, _1329, _1330), vec3(_1328, _1329, _1330));
        float _1336 = (_1331 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1331);
        float _1345 = (dot(vec3(_944, _945, _946), vec3(_1336 * _1328, _1336 * _1329, _1336 * _1330)) + 1.0) * 0.5;
        float _4006 = isnan(0.0) ? _1345 : (isnan(_1345) ? 0.0 : max(_1345, 0.0));
        float _1355 = sqrt(((_1329 * _1329) + (_1328 * _1328)) + (_1330 * _1330)) / (_1325 + 9.9999997473787516355514526367188e-06);
        float _4017 = isnan(0.0) ? _1355 : (isnan(_1355) ? 0.0 : max(_1355, 0.0));
        float _1356 = isnan(1.0) ? _4017 : (isnan(_4017) ? 1.0 : min(_4017, 1.0));
        float _1357 = _1356 * 2.0;
        float _1361 = (1.0 - _1356) / (_1356 + 1.0);
        float _4028 = isnan(0.0) ? _1361 : (isnan(_1361) ? 0.0 : max(_1361, 0.0));
        float _1362 = isnan(1.0) ? _4028 : (isnan(_4028) ? 1.0 : min(_4028, 1.0));
        float _1371 = ((((1.0 - _1362) * (_1357 + 2.0)) * exp2(log2(isnan(1.0) ? _4006 : (isnan(_4006) ? 1.0 : min(_4006, 1.0))) * (_1357 + 1.0))) + _1362) * _1325;
        float _1372 = _1293 * 0.5;
        float _1373 = _1303 * 0.5;
        float _1374 = _1313 * 0.5;
        float _1375 = dot(vec3(_1372, _1373, _1374), vec3(_1372, _1373, _1374));
        float _1380 = (_1375 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1375);
        float _1388 = (dot(vec3(_944, _945, _946), vec3(_1380 * _1372, _1380 * _1373, _1380 * _1374)) + 1.0) * 0.5;
        float _4039 = isnan(0.0) ? _1388 : (isnan(_1388) ? 0.0 : max(_1388, 0.0));
        float _1397 = sqrt(((_1373 * _1373) + (_1372 * _1372)) + (_1374 * _1374)) / (_1326 + 9.9999997473787516355514526367188e-06);
        float _4050 = isnan(0.0) ? _1397 : (isnan(_1397) ? 0.0 : max(_1397, 0.0));
        float _1398 = isnan(1.0) ? _4050 : (isnan(_4050) ? 1.0 : min(_4050, 1.0));
        float _1399 = _1398 * 2.0;
        float _1403 = (1.0 - _1398) / (_1398 + 1.0);
        float _4061 = isnan(0.0) ? _1403 : (isnan(_1403) ? 0.0 : max(_1403, 0.0));
        float _1404 = isnan(1.0) ? _4061 : (isnan(_4061) ? 1.0 : min(_4061, 1.0));
        float _1413 = ((((1.0 - _1404) * (_1399 + 2.0)) * exp2(log2(isnan(1.0) ? _4039 : (isnan(_4039) ? 1.0 : min(_4039, 1.0))) * (_1399 + 1.0))) + _1404) * _1326;
        float _1414 = _1294 * 0.5;
        float _1415 = _1304 * 0.5;
        float _1416 = _1314 * 0.5;
        float _1417 = dot(vec3(_1414, _1415, _1416), vec3(_1414, _1415, _1416));
        float _1422 = (_1417 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1417);
        float _1430 = (dot(vec3(_944, _945, _946), vec3(_1422 * _1414, _1422 * _1415, _1422 * _1416)) + 1.0) * 0.5;
        float _4072 = isnan(0.0) ? _1430 : (isnan(_1430) ? 0.0 : max(_1430, 0.0));
        float _1439 = sqrt(((_1415 * _1415) + (_1414 * _1414)) + (_1416 * _1416)) / (_1327 + 9.9999997473787516355514526367188e-06);
        float _4083 = isnan(0.0) ? _1439 : (isnan(_1439) ? 0.0 : max(_1439, 0.0));
        float _1440 = isnan(1.0) ? _4083 : (isnan(_4083) ? 1.0 : min(_4083, 1.0));
        float _1441 = _1440 * 2.0;
        float _1445 = (1.0 - _1440) / (_1440 + 1.0);
        float _4094 = isnan(0.0) ? _1445 : (isnan(_1445) ? 0.0 : max(_1445, 0.0));
        float _1446 = isnan(1.0) ? _4094 : (isnan(_4094) ? 1.0 : min(_4094, 1.0));
        float _1455 = ((((1.0 - _1446) * (_1441 + 2.0)) * exp2(log2(isnan(1.0) ? _4072 : (isnan(_4072) ? 1.0 : min(_4072, 1.0))) * (_1441 + 1.0))) + _1446) * _1327;
        _1463 = _1294;
        _1465 = _1293;
        _1466 = _1292;
        _1467 = _1304;
        _1468 = _1303;
        _1469 = _1302;
        _1470 = _1314;
        _1471 = _1313;
        _1472 = _1312;
        _1473 = _1327;
        _1474 = _1326;
        _1475 = _1325;
        _1476 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1371 : (isnan(_1371) ? 0.0 : max(_1371, 0.0)));
        _1477 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1413 : (isnan(_1413) ? 0.0 : max(_1413, 0.0)));
        _1478 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1455 : (isnan(_1455) ? 0.0 : max(_1455, 0.0)));
    }
    else
    {
        _1463 = _1464;
        _1465 = _1464;
        _1466 = _1464;
        _1467 = _1464;
        _1468 = _1464;
        _1469 = _1464;
        _1470 = _1464;
        _1471 = _1464;
        _1472 = _1464;
        _1473 = _1464;
        _1474 = _1464;
        _1475 = _1464;
        _1476 = 0.0;
        _1477 = 0.0;
        _1478 = 0.0;
    }
    float _1770;
    float _1771;
    float _1772;
    float _1773;
    float _1774;
    float _1775;
    float _1776;
    float _1777;
    float _1778;
    float _1779;
    float _1780;
    float _1781;
    float _1782;
    float _1783;
    float _1784;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1501 = fma(_1162, cbModelParam._m0[30u].z, fma(_1158, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1154));
        float _1505 = fma(_1162, cbModelParam._m0[31u].z, fma(_1158, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1154));
        float _1509 = fma(_1162, cbModelParam._m0[32u].z, fma(_1158, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1154));
        float _1532 = _1154 + _944;
        float _1533 = _1158 + _945;
        float _1534 = _1162 + _946;
        float _1544 = fma(_1534, cbModelParam._m0[30u].z, fma(_1533, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1532)) - _1501;
        float _1545 = fma(_1534, cbModelParam._m0[31u].z, fma(_1533, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1532)) - _1505;
        float _1546 = fma(_1534, cbModelParam._m0[32u].z, fma(_1533, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1532)) - _1509;
        float _1550 = inversesqrt(dot(vec3(_1544, _1545, _1546), vec3(_1544, _1545, _1546)));
        float _1563 = ((_1550 * _1544) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1501 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1564 = ((_1550 * _1545) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1505 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1565 = ((_1550 * _1546) / cbModelParam._m0[35u].z) + ((((((_1509 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1567 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1563, _1564, _1565), 0.0);
        vec4 _1574 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1563, _1564, _1565), 0.0);
        vec4 _1581 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1563, _1564, _1565), 0.0);
        vec4 _1588 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1563, _1564, _1565), 0.0);
        float _1600 = exp2((_1567.w + (-0.5)) * 20.0) * 2.0;
        float _1601 = _1600 * (_1567.x + (-0.5));
        float _1602 = _1600 * (_1567.y + (-0.5));
        float _1603 = _1600 * (_1567.z + (-0.5));
        float _1610 = exp2((_1574.w + (-0.5)) * 20.0) * 2.0;
        float _1611 = _1610 * (_1574.x + (-0.5));
        float _1612 = _1610 * (_1574.y + (-0.5));
        float _1613 = _1610 * (_1574.z + (-0.5));
        float _1620 = exp2((_1581.w + (-0.5)) * 20.0) * 2.0;
        float _1621 = _1620 * (_1581.x + (-0.5));
        float _1622 = _1620 * (_1581.y + (-0.5));
        float _1623 = _1620 * (_1581.z + (-0.5));
        float _1630 = exp2((_1588.w + (-0.5)) * 20.0) * 2.0;
        float _1631 = _1630 * (_1588.x + (-0.5));
        float _1632 = _1630 * (_1588.y + (-0.5));
        float _1633 = _1630 * (_1588.z + (-0.5));
        float _1634 = isnan(0.0) ? _1631 : (isnan(_1631) ? 0.0 : max(_1631, 0.0));
        float _1635 = isnan(0.0) ? _1632 : (isnan(_1632) ? 0.0 : max(_1632, 0.0));
        float _1636 = isnan(0.0) ? _1633 : (isnan(_1633) ? 0.0 : max(_1633, 0.0));
        float _1637 = _1601 * 0.5;
        float _1638 = _1611 * 0.5;
        float _1639 = _1621 * 0.5;
        float _1640 = dot(vec3(_1637, _1638, _1639), vec3(_1637, _1638, _1639));
        float _1645 = (_1640 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1640);
        float _1653 = (dot(vec3(_944, _945, _946), vec3(_1645 * _1637, _1645 * _1638, _1645 * _1639)) + 1.0) * 0.5;
        float _4135 = isnan(0.0) ? _1653 : (isnan(_1653) ? 0.0 : max(_1653, 0.0));
        float _1662 = sqrt(((_1638 * _1638) + (_1637 * _1637)) + (_1639 * _1639)) / (_1634 + 9.9999997473787516355514526367188e-06);
        float _4146 = isnan(0.0) ? _1662 : (isnan(_1662) ? 0.0 : max(_1662, 0.0));
        float _1663 = isnan(1.0) ? _4146 : (isnan(_4146) ? 1.0 : min(_4146, 1.0));
        float _1664 = _1663 * 2.0;
        float _1668 = (1.0 - _1663) / (_1663 + 1.0);
        float _4157 = isnan(0.0) ? _1668 : (isnan(_1668) ? 0.0 : max(_1668, 0.0));
        float _1669 = isnan(1.0) ? _4157 : (isnan(_4157) ? 1.0 : min(_4157, 1.0));
        float _1678 = ((((1.0 - _1669) * (_1664 + 2.0)) * exp2(log2(isnan(1.0) ? _4135 : (isnan(_4135) ? 1.0 : min(_4135, 1.0))) * (_1664 + 1.0))) + _1669) * _1634;
        float _1679 = _1602 * 0.5;
        float _1680 = _1612 * 0.5;
        float _1681 = _1622 * 0.5;
        float _1682 = dot(vec3(_1679, _1680, _1681), vec3(_1679, _1680, _1681));
        float _1687 = (_1682 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1682);
        float _1695 = (dot(vec3(_944, _945, _946), vec3(_1687 * _1679, _1687 * _1680, _1687 * _1681)) + 1.0) * 0.5;
        float _4168 = isnan(0.0) ? _1695 : (isnan(_1695) ? 0.0 : max(_1695, 0.0));
        float _1704 = sqrt(((_1680 * _1680) + (_1679 * _1679)) + (_1681 * _1681)) / (_1635 + 9.9999997473787516355514526367188e-06);
        float _4179 = isnan(0.0) ? _1704 : (isnan(_1704) ? 0.0 : max(_1704, 0.0));
        float _1705 = isnan(1.0) ? _4179 : (isnan(_4179) ? 1.0 : min(_4179, 1.0));
        float _1706 = _1705 * 2.0;
        float _1710 = (1.0 - _1705) / (_1705 + 1.0);
        float _4190 = isnan(0.0) ? _1710 : (isnan(_1710) ? 0.0 : max(_1710, 0.0));
        float _1711 = isnan(1.0) ? _4190 : (isnan(_4190) ? 1.0 : min(_4190, 1.0));
        float _1720 = ((((1.0 - _1711) * (_1706 + 2.0)) * exp2(log2(isnan(1.0) ? _4168 : (isnan(_4168) ? 1.0 : min(_4168, 1.0))) * (_1706 + 1.0))) + _1711) * _1635;
        float _1721 = _1603 * 0.5;
        float _1722 = _1613 * 0.5;
        float _1723 = _1623 * 0.5;
        float _1724 = dot(vec3(_1721, _1722, _1723), vec3(_1721, _1722, _1723));
        float _1729 = (_1724 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1724);
        float _1737 = (dot(vec3(_944, _945, _946), vec3(_1729 * _1721, _1729 * _1722, _1729 * _1723)) + 1.0) * 0.5;
        float _4201 = isnan(0.0) ? _1737 : (isnan(_1737) ? 0.0 : max(_1737, 0.0));
        float _1746 = sqrt(((_1722 * _1722) + (_1721 * _1721)) + (_1723 * _1723)) / (_1636 + 9.9999997473787516355514526367188e-06);
        float _4212 = isnan(0.0) ? _1746 : (isnan(_1746) ? 0.0 : max(_1746, 0.0));
        float _1747 = isnan(1.0) ? _4212 : (isnan(_4212) ? 1.0 : min(_4212, 1.0));
        float _1748 = _1747 * 2.0;
        float _1752 = (1.0 - _1747) / (_1747 + 1.0);
        float _4223 = isnan(0.0) ? _1752 : (isnan(_1752) ? 0.0 : max(_1752, 0.0));
        float _1753 = isnan(1.0) ? _4223 : (isnan(_4223) ? 1.0 : min(_4223, 1.0));
        float _1762 = ((((1.0 - _1753) * (_1748 + 2.0)) * exp2(log2(isnan(1.0) ? _4201 : (isnan(_4201) ? 1.0 : min(_4201, 1.0))) * (_1748 + 1.0))) + _1753) * _1636;
        _1770 = _1603;
        _1771 = _1602;
        _1772 = _1601;
        _1773 = _1613;
        _1774 = _1612;
        _1775 = _1611;
        _1776 = _1623;
        _1777 = _1622;
        _1778 = _1621;
        _1779 = _1636;
        _1780 = _1635;
        _1781 = _1634;
        _1782 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1678 : (isnan(_1678) ? 0.0 : max(_1678, 0.0)));
        _1783 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1720 : (isnan(_1720) ? 0.0 : max(_1720, 0.0)));
        _1784 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1762 : (isnan(_1762) ? 0.0 : max(_1762, 0.0)));
    }
    else
    {
        _1770 = _1464;
        _1771 = _1464;
        _1772 = _1464;
        _1773 = _1464;
        _1774 = _1464;
        _1775 = _1464;
        _1776 = _1464;
        _1777 = _1464;
        _1778 = _1464;
        _1779 = _1464;
        _1780 = _1464;
        _1781 = _1464;
        _1782 = 0.0;
        _1783 = 0.0;
        _1784 = 0.0;
    }
    float _1794 = (cbModelParam._m0[1u].x * (_1782 - _1476)) + _1476;
    float _1795 = (cbModelParam._m0[1u].x * (_1783 - _1477)) + _1477;
    float _1796 = (cbModelParam._m0[1u].x * (_1784 - _1478)) + _1478;
    float _1817 = fma(_1796, cbSceneParam._m0[89u].z, fma(_1795, cbSceneParam._m0[89u].y, _1794 * cbSceneParam._m0[89u].x));
    float _1820 = fma(_1796, cbSceneParam._m0[90u].z, fma(_1795, cbSceneParam._m0[90u].y, _1794 * cbSceneParam._m0[90u].x));
    float _1823 = fma(_1796, cbSceneParam._m0[91u].z, fma(_1795, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1794));
    float _1838 = _1101 * 0.5;
    float _1839 = _1102 * 0.5;
    float _1840 = _1103 * 0.5;
    float _1841 = dot(vec4(_1838, _1839, _1840, 1.0), vec4(_1772, _1775, _1778, _1781));
    float _1844 = dot(vec4(_1838, _1839, _1840, 1.0), vec4(_1771, _1774, _1777, _1780));
    float _1847 = dot(vec4(_1838, _1839, _1840, 1.0), vec4(_1770, _1773, _1776, _1779));
    float _1881;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1854 = dot(vec4(_1838, _1839, _1840, 1.0), vec4(_1463, _1467, _1470, _1473));
        float _1858 = dot(vec4(_1838, _1839, _1840, 1.0), vec4(_1465, _1468, _1471, _1474));
        float _1862 = dot(vec4(_1838, _1839, _1840, 1.0), vec4(_1466, _1469, _1472, _1475));
        float _1869 = dot(vec4(cbModelParam._m0[39u]), vec4(_1838, _1839, _1840, 1.0));
        _1881 = dot(vec3(isnan(0.0) ? _1862 : (isnan(_1862) ? 0.0 : max(_1862, 0.0)), isnan(0.0) ? _1858 : (isnan(_1858) ? 0.0 : max(_1858, 0.0)), isnan(0.0) ? _1854 : (isnan(_1854) ? 0.0 : max(_1854, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1869) ? 0.0 : (isnan(0.0) ? _1869 : max(0.0, _1869))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1881 = 1.0;
    }
    float _1892;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1883 = dot(vec4(cbModelParam._m0[40u]), vec4(_1838, _1839, _1840, 1.0));
        _1892 = dot(vec3(isnan(0.0) ? _1841 : (isnan(_1841) ? 0.0 : max(_1841, 0.0)), isnan(0.0) ? _1844 : (isnan(_1844) ? 0.0 : max(_1844, 0.0)), isnan(0.0) ? _1847 : (isnan(_1847) ? 0.0 : max(_1847, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1883) ? 0.0 : (isnan(0.0) ? _1883 : max(0.0, _1883))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1892 = 1.0;
    }
    float _1896 = (_1892 * cbModelParam._m0[1u].x) + (_1881 * (1.0 - cbModelParam._m0[1u].x));
    float _1906 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _947);
    float _1907 = isnan(_1906) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1906 : min(cbModelParam._m0[25u].z, _1906));
    float _1988;
    float _1990;
    float _1992;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1955 = fma(_1162, cbModelParam._m0[13u].z, fma(_1158, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1154)) + cbModelParam._m0[13u].w;
        float _1959 = fma(_1162, cbModelParam._m0[14u].z, fma(_1158, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1154)) + cbModelParam._m0[14u].w;
        float _1963 = fma(_1162, cbModelParam._m0[15u].z, fma(_1158, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1154)) + cbModelParam._m0[15u].w;
        float _1966 = fma(_1103, cbModelParam._m0[13u].z, fma(_1102, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1101));
        float _1969 = fma(_1103, cbModelParam._m0[14u].z, fma(_1102, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1101));
        float _1972 = fma(_1103, cbModelParam._m0[15u].z, fma(_1102, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1101));
        float _2000;
        if (_1966 > 0.0)
        {
            _2000 = abs((1.0 - _1955) / _1966);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1966 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1955 + 1.0) / _1966);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _2000 = frontier_phi_14_12_ladder;
        }
        float _2223;
        if (_1969 > 0.0)
        {
            _2223 = abs((1.0 - _1959) / _1969);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1969 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1959 + 1.0) / _1969);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2223 = frontier_phi_23_19_ladder;
        }
        float _2469;
        if (_1972 > 0.0)
        {
            _2469 = abs((1.0 - _1963) / _1972);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1972 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1963 + 1.0) / _1972);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2469 = frontier_phi_35_30_ladder;
        }
        float _2471 = isnan(_2223) ? _2000 : (isnan(_2000) ? _2223 : min(_2000, _2223));
        float _2472 = isnan(_2469) ? _2471 : (isnan(_2471) ? _2469 : min(_2471, _2469));
        float _2476 = (_2472 * _1966) + _1955;
        float _2477 = (_2472 * _1969) + _1959;
        float _2478 = (_2472 * _1972) + _1963;
        float _2479 = _2472 * 9.9999997473787516355514526367188e-05;
        float _2481 = (-1.0) - _2479;
        float _2483 = _2479 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2478 > _2483) || ((_2478 < _2481) || ((_2477 > _2483) || ((_2477 < _2481) || ((_2476 < _2481) || (_2476 > _2483))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2602 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2478, cbModelParam._m0[9u].z, fma(_2477, cbModelParam._m0[9u].y, _2476 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2478, cbModelParam._m0[10u].z, fma(_2477, cbModelParam._m0[10u].y, _2476 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2478, cbModelParam._m0[11u].z, fma(_2477, cbModelParam._m0[11u].y, _2476 * cbModelParam._m0[11u].x))), _1907);
            frontier_phi_13_35_ladder = _2602.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2602.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2602.x * cbModelParam._m0[1u].y;
        }
        _1988 = frontier_phi_13_35_ladder_2;
        _1990 = frontier_phi_13_35_ladder_1;
        _1992 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1976 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1101, _1102, _1103), _1907);
        _1988 = _1976.x * cbModelParam._m0[1u].y;
        _1990 = _1976.y * cbModelParam._m0[1u].y;
        _1992 = _1976.z * cbModelParam._m0[1u].y;
    }
    float _1996 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _947);
    float _1997 = isnan(_1996) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1996 : min(cbModelParam._m0[25u].w, _1996));
    float _2088;
    float _2090;
    float _2092;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2052 = fma(_1162, cbModelParam._m0[21u].z, fma(_1158, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1154)) + cbModelParam._m0[21u].w;
        float _2056 = fma(_1162, cbModelParam._m0[22u].z, fma(_1158, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1154)) + cbModelParam._m0[22u].w;
        float _2060 = fma(_1162, cbModelParam._m0[23u].z, fma(_1158, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1154)) + cbModelParam._m0[23u].w;
        float _2063 = fma(_1103, cbModelParam._m0[21u].z, fma(_1102, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1101));
        float _2066 = fma(_1103, cbModelParam._m0[22u].z, fma(_1102, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1101));
        float _2069 = fma(_1103, cbModelParam._m0[23u].z, fma(_1102, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1101));
        float _2228;
        if (_2063 > 0.0)
        {
            _2228 = abs((1.0 - _2052) / _2063);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_2063 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_2052 + 1.0) / _2063);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2228 = frontier_phi_25_21_ladder;
        }
        float _2496;
        if (_2066 > 0.0)
        {
            _2496 = abs((1.0 - _2056) / _2066);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_2066 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_2056 + 1.0) / _2066);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2496 = frontier_phi_37_32_ladder;
        }
        float _2701;
        if (_2069 > 0.0)
        {
            _2701 = abs((1.0 - _2060) / _2069);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_2069 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_2060 + 1.0) / _2069);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2701 = frontier_phi_46_43_ladder;
        }
        float _2703 = isnan(_2496) ? _2228 : (isnan(_2228) ? _2496 : min(_2228, _2496));
        float _2704 = isnan(_2701) ? _2703 : (isnan(_2703) ? _2701 : min(_2703, _2701));
        float _2708 = (_2704 * _2063) + _2052;
        float _2709 = (_2704 * _2066) + _2056;
        float _2710 = (_2704 * _2069) + _2060;
        float _2711 = _2704 * 9.9999997473787516355514526367188e-05;
        float _2712 = (-1.0) - _2711;
        float _2714 = _2711 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2710 > _2714) || ((_2710 < _2712) || ((_2709 > _2714) || ((_2709 < _2712) || ((_2708 < _2712) || (_2708 > _2714))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2909 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2710, cbModelParam._m0[17u].z, fma(_2709, cbModelParam._m0[17u].y, _2708 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2710, cbModelParam._m0[18u].z, fma(_2709, cbModelParam._m0[18u].y, _2708 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2710, cbModelParam._m0[19u].z, fma(_2709, cbModelParam._m0[19u].y, _2708 * cbModelParam._m0[19u].x))), _1997);
            frontier_phi_22_46_ladder = _2909.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2909.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2909.x * cbModelParam._m0[1u].z;
        }
        _2088 = frontier_phi_22_46_ladder_2;
        _2090 = frontier_phi_22_46_ladder_1;
        _2092 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _2072 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1101, _1102, _1103), _1997);
        _2088 = _2072.x * cbModelParam._m0[1u].z;
        _2090 = _2072.y * cbModelParam._m0[1u].z;
        _2092 = _2072.z * cbModelParam._m0[1u].z;
    }
    float _2104 = ((((1.0 - _1122) * ((_1109 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_1122 * _1109)) * _1093;
    float _2105 = _2104 * ((cbModelParam._m0[1u].w * (_2088 - _1988)) + _1988);
    float _2106 = _2104 * ((cbModelParam._m0[1u].w * (_2090 - _1990)) + _1990);
    float _2107 = _2104 * ((cbModelParam._m0[1u].w * (_2092 - _1992)) + _1992);
    float _2110 = fma(_2107, cbSceneParam._m0[89u].z, fma(_2106, cbSceneParam._m0[89u].y, _2105 * cbSceneParam._m0[89u].x));
    float _2113 = fma(_2107, cbSceneParam._m0[90u].z, fma(_2106, cbSceneParam._m0[90u].y, _2105 * cbSceneParam._m0[90u].x));
    float _2116 = fma(_2107, cbSceneParam._m0[91u].z, fma(_2106, cbSceneParam._m0[91u].y, _2105 * cbSceneParam._m0[91u].x));
    vec4 _2124 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_1030, _1031));
    float _2126 = _2124.w;
    float _2138 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _2126);
    float _2139 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _2126);
    float _2140 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _2126);
    uvec4 _2144 = floatBitsToUint(cbInstanceData._m0[_285 + 5u]);
    uint _2146 = _2144.x * 14u;
    uint _2147 = _2146 + 13u;
    float _2154 = _1093 + (-1.0);
    float _2159 = (cbLight._m0[_2147].x * _2154) + 1.0;
    float _2160 = (cbLight._m0[_2147].y * _2154) + 1.0;
    float _2161 = (cbLight._m0[_2147].z * _2154) + 1.0;
    float _2162 = (cbLight._m0[_2147].w * _2154) + 1.0;
    uint _2163 = _2146 + 5u;
    float _2169 = isnan(1.0) ? _2160 : (isnan(_2160) ? 1.0 : min(_2160, 1.0));
    uint _2173 = _2146 + 4u;
    float _2182 = isnan(1.0) ? _2159 : (isnan(_2159) ? 1.0 : min(_2159, 1.0));
    uint _2186 = _2146 | 1u;
    float _2197 = dot(vec3(cbLight._m0[_2146].xyz), vec3(_944, _945, _946));
    float _2200 = dot(vec3(cbLight._m0[_2186].xyz), vec3(_944, _945, _946));
    float _4359 = isnan(0.0) ? _2197 : (isnan(_2197) ? 0.0 : max(_2197, 0.0));
    float _4370 = isnan(0.0) ? _2200 : (isnan(_2200) ? 0.0 : max(_2200, 0.0));
    float _2205 = (isnan(1.0) ? _4359 : (isnan(_4359) ? 1.0 : min(_4359, 1.0))) * 0.3183098733425140380859375;
    float _2207 = (isnan(1.0) ? _4370 : (isnan(_4370) ? 1.0 : min(_4370, 1.0))) * 0.3183098733425140380859375;
    float _2214 = ((cbLight._m0[_2163].x * _2169) * _2207) + (((cbLight._m0[_2173].x * _2138) * _2182) * _2205);
    float _2215 = ((_2169 * cbLight._m0[_2163].y) * _2207) + (((cbLight._m0[_2173].y * _2139) * _2182) * _2205);
    float _2216 = ((_2169 * cbLight._m0[_2163].z) * _2207) + (((cbLight._m0[_2173].z * _2140) * _2182) * _2205);
    uvec4 _2220 = floatBitsToUint(cbLight._m0[_2146 + 12u]);
    bool _2222 = _2220.x == 0u;
    float _2233;
    float _2235;
    float _2237;
    if (_2222)
    {
        _2233 = _2214;
        _2235 = _2215;
        _2237 = _2216;
    }
    else
    {
        uint _2241 = _2146 + 6u;
        float _2257 = (dot(vec3(cbLight._m0[_2146 + 2u].xyz), vec3(_944, _945, _946)) * 0.5) + 0.5;
        float _2258 = _2257 * _2257;
        float _4381 = isnan(0.0) ? _2258 : (isnan(_2258) ? 0.0 : max(_2258, 0.0));
        float _2259 = isnan(1.0) ? _4381 : (isnan(_4381) ? 1.0 : min(_4381, 1.0));
        float _2260 = isnan(1.0) ? _2161 : (isnan(_2161) ? 1.0 : min(_2161, 1.0));
        _2233 = (((cbLight._m0[_2241].x * 0.3183098733425140380859375) * _2259) * _2260) + _2214;
        _2235 = (((cbLight._m0[_2241].y * 0.3183098733425140380859375) * _2259) * _2260) + _2215;
        _2237 = (((cbLight._m0[_2241].z * 0.3183098733425140380859375) * _2259) * _2260) + _2216;
    }
    bool _2240 = _2220.y == 0u;
    float _2278;
    float _2280;
    float _2282;
    if (_2240)
    {
        _2278 = _2233;
        _2280 = _2235;
        _2282 = _2237;
    }
    else
    {
        uint _2440 = _2146 + 7u;
        float _2456 = (dot(vec3(cbLight._m0[_2146 + 3u].xyz), vec3(_944, _945, _946)) * 0.5) + 0.5;
        float _2457 = _2456 * _2456;
        float _4397 = isnan(0.0) ? _2457 : (isnan(_2457) ? 0.0 : max(_2457, 0.0));
        float _2458 = isnan(1.0) ? _4397 : (isnan(_4397) ? 1.0 : min(_4397, 1.0));
        float _2459 = isnan(1.0) ? _2162 : (isnan(_2162) ? 1.0 : min(_2162, 1.0));
        _2278 = (((cbLight._m0[_2440].x * 0.3183098733425140380859375) * _2458) * _2459) + _2233;
        _2280 = (((cbLight._m0[_2440].y * 0.3183098733425140380859375) * _2458) * _2459) + _2235;
        _2282 = (((cbLight._m0[_2440].z * 0.3183098733425140380859375) * _2458) * _2459) + _2237;
    }
    uint _2285 = _2146 + 8u;
    float _2298 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2146].w)) * _947) * 0.949999988079071044921875);
    float _2299 = _2298 * _2298;
    float _2300 = cbLight._m0[_2146].x + _1022;
    float _2301 = cbLight._m0[_2146].y + _1023;
    float _2302 = cbLight._m0[_2146].z + _1024;
    float _2306 = inversesqrt(dot(vec3(_2300, _2301, _2302), vec3(_2300, _2301, _2302)));
    float _2307 = _2306 * _2300;
    float _2308 = _2306 * _2301;
    float _2309 = _2306 * _2302;
    float _2310 = dot(vec3(_944, _945, _946), vec3(cbLight._m0[_2146].xyz));
    float _4413 = isnan(0.0) ? _2310 : (isnan(_2310) ? 0.0 : max(_2310, 0.0));
    float _2313 = isnan(1.0) ? _4413 : (isnan(_4413) ? 1.0 : min(_4413, 1.0));
    float _4424 = isnan(0.0) ? _1094 : (isnan(_1094) ? 0.0 : max(_1094, 0.0));
    float _2314 = isnan(1.0) ? _4424 : (isnan(_4424) ? 1.0 : min(_4424, 1.0));
    float _2315 = dot(vec3(_944, _945, _946), vec3(_2307, _2308, _2309));
    float _4435 = isnan(0.0) ? _2315 : (isnan(_2315) ? 0.0 : max(_2315, 0.0));
    float _2318 = isnan(1.0) ? _4435 : (isnan(_4435) ? 1.0 : min(_4435, 1.0));
    float _2319 = dot(vec3(cbLight._m0[_2146].xyz), vec3(_2307, _2308, _2309));
    float _4446 = isnan(0.0) ? _2319 : (isnan(_2319) ? 0.0 : max(_2319, 0.0));
    float _2323 = _2299 * _2299;
    float _2327 = ((_2318 * _2318) * (_2323 + (-1.0))) + 1.0;
    float _2338 = (exp2(log2(1.0 - (isnan(1.0) ? _4446 : (isnan(_4446) ? 1.0 : min(_4446, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2339 = 1.0 - _2299;
    float _2350 = (0.5 / (((_2314 * ((_2313 * _2339) + _2299)) + 9.9999999392252902907785028219223e-09) + (((_2314 * _2339) + _2299) * _2313))) * _2313;
    float _4457 = isnan(0.0) ? _2350 : (isnan(_2350) ? 0.0 : max(_2350, 0.0));
    float _2352 = (isnan(1.0) ? _4457 : (isnan(_4457) ? 1.0 : min(_4457, 1.0))) * (_2323 / ((_2327 * _2327) * 3.141590118408203125));
    uint _2366 = _2146 + 9u;
    float _2377 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2186].w)) * _947) * 0.949999988079071044921875);
    float _2378 = _2377 * _2377;
    float _2379 = cbLight._m0[_2186].x + _1022;
    float _2380 = cbLight._m0[_2186].y + _1023;
    float _2381 = cbLight._m0[_2186].z + _1024;
    float _2385 = inversesqrt(dot(vec3(_2379, _2380, _2381), vec3(_2379, _2380, _2381)));
    float _2386 = _2385 * _2379;
    float _2387 = _2385 * _2380;
    float _2388 = _2385 * _2381;
    float _2389 = dot(vec3(_944, _945, _946), vec3(cbLight._m0[_2186].xyz));
    float _4468 = isnan(0.0) ? _2389 : (isnan(_2389) ? 0.0 : max(_2389, 0.0));
    float _2392 = isnan(1.0) ? _4468 : (isnan(_4468) ? 1.0 : min(_4468, 1.0));
    float _2393 = dot(vec3(_944, _945, _946), vec3(_2386, _2387, _2388));
    float _4479 = isnan(0.0) ? _2393 : (isnan(_2393) ? 0.0 : max(_2393, 0.0));
    float _2396 = isnan(1.0) ? _4479 : (isnan(_4479) ? 1.0 : min(_4479, 1.0));
    float _2397 = dot(vec3(cbLight._m0[_2186].xyz), vec3(_2386, _2387, _2388));
    float _4490 = isnan(0.0) ? _2397 : (isnan(_2397) ? 0.0 : max(_2397, 0.0));
    float _2401 = _2378 * _2378;
    float _2405 = ((_2396 * _2396) * (_2401 + (-1.0))) + 1.0;
    float _2414 = (exp2(log2(1.0 - (isnan(1.0) ? _4490 : (isnan(_4490) ? 1.0 : min(_4490, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2415 = 1.0 - _2378;
    float _2425 = (0.5 / (((_2314 * ((_2392 * _2415) + _2378)) + 9.9999999392252902907785028219223e-09) + (((_2314 * _2415) + _2378) * _2392))) * _2392;
    float _4501 = isnan(0.0) ? _2425 : (isnan(_2425) ? 0.0 : max(_2425, 0.0));
    float _2427 = (isnan(1.0) ? _4501 : (isnan(_4501) ? 1.0 : min(_4501, 1.0))) * (_2401 / ((_2405 * _2405) * 3.141590118408203125));
    float _2437 = (((_2414 * cbLight._m0[_2366].x) * _2427) * _2169) + ((((cbLight._m0[_2285].x * _2138) * _2338) * _2352) * _2182);
    float _2438 = (((_2414 * cbLight._m0[_2366].y) * _2427) * _2169) + ((((cbLight._m0[_2285].y * _2139) * _2338) * _2352) * _2182);
    float _2439 = (((_2414 * cbLight._m0[_2366].z) * _2427) * _2169) + ((((cbLight._m0[_2285].z * _2140) * _2338) * _2352) * _2182);
    float _2501;
    float _2503;
    float _2505;
    if (_2222)
    {
        _2501 = _2437;
        _2503 = _2438;
        _2505 = _2439;
    }
    else
    {
        uint _2507 = _2146 + 2u;
        uint _2511 = _2146 + 10u;
        float _2525 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2507].w)) * _947) * 0.949999988079071044921875);
        float _2526 = _2525 * _2525;
        float _2527 = cbLight._m0[_2507].x + _1022;
        float _2528 = cbLight._m0[_2507].y + _1023;
        float _2529 = cbLight._m0[_2507].z + _1024;
        float _2533 = inversesqrt(dot(vec3(_2527, _2528, _2529), vec3(_2527, _2528, _2529)));
        float _2534 = _2533 * _2527;
        float _2535 = _2533 * _2528;
        float _2536 = _2533 * _2529;
        float _2537 = dot(vec3(_944, _945, _946), vec3(cbLight._m0[_2507].xyz));
        float _4512 = isnan(0.0) ? _2537 : (isnan(_2537) ? 0.0 : max(_2537, 0.0));
        float _2540 = isnan(1.0) ? _4512 : (isnan(_4512) ? 1.0 : min(_4512, 1.0));
        float _2541 = dot(vec3(_944, _945, _946), vec3(_2534, _2535, _2536));
        float _4523 = isnan(0.0) ? _2541 : (isnan(_2541) ? 0.0 : max(_2541, 0.0));
        float _2544 = isnan(1.0) ? _4523 : (isnan(_4523) ? 1.0 : min(_4523, 1.0));
        float _2545 = dot(vec3(cbLight._m0[_2507].xyz), vec3(_2534, _2535, _2536));
        float _4534 = isnan(0.0) ? _2545 : (isnan(_2545) ? 0.0 : max(_2545, 0.0));
        float _2549 = _2526 * _2526;
        float _2553 = ((_2544 * _2544) * (_2549 + (-1.0))) + 1.0;
        float _2562 = (exp2(log2(1.0 - (isnan(1.0) ? _4534 : (isnan(_4534) ? 1.0 : min(_4534, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2563 = 1.0 - _2526;
        float _2573 = (0.5 / (((_2314 * ((_2540 * _2563) + _2526)) + 9.9999999392252902907785028219223e-09) + (((_2314 * _2563) + _2526) * _2540))) * _2540;
        float _4545 = isnan(0.0) ? _2573 : (isnan(_2573) ? 0.0 : max(_2573, 0.0));
        float _2575 = (isnan(1.0) ? _4545 : (isnan(_4545) ? 1.0 : min(_4545, 1.0))) * (_2549 / ((_2553 * _2553) * 3.141590118408203125));
        float _2576 = isnan(1.0) ? _2161 : (isnan(_2161) ? 1.0 : min(_2161, 1.0));
        _2501 = (((_2562 * cbLight._m0[_2511].x) * _2575) * _2576) + _2437;
        _2503 = (((_2562 * cbLight._m0[_2511].y) * _2575) * _2576) + _2438;
        _2505 = (((_2562 * cbLight._m0[_2511].z) * _2575) * _2576) + _2439;
    }
    float _2611;
    float _2613;
    float _2615;
    if (_2240)
    {
        _2611 = _2501;
        _2613 = _2503;
        _2615 = _2505;
    }
    else
    {
        uint _2622 = _2146 + 3u;
        uint _2626 = _2146 + 11u;
        float _2640 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2622].w)) * _947) * 0.949999988079071044921875);
        float _2641 = _2640 * _2640;
        float _2642 = cbLight._m0[_2622].x + _1022;
        float _2643 = cbLight._m0[_2622].y + _1023;
        float _2644 = cbLight._m0[_2622].z + _1024;
        float _2648 = inversesqrt(dot(vec3(_2642, _2643, _2644), vec3(_2642, _2643, _2644)));
        float _2649 = _2648 * _2642;
        float _2650 = _2648 * _2643;
        float _2651 = _2648 * _2644;
        float _2652 = dot(vec3(_944, _945, _946), vec3(cbLight._m0[_2622].xyz));
        float _4561 = isnan(0.0) ? _2652 : (isnan(_2652) ? 0.0 : max(_2652, 0.0));
        float _2655 = isnan(1.0) ? _4561 : (isnan(_4561) ? 1.0 : min(_4561, 1.0));
        float _2656 = dot(vec3(_944, _945, _946), vec3(_2649, _2650, _2651));
        float _4572 = isnan(0.0) ? _2656 : (isnan(_2656) ? 0.0 : max(_2656, 0.0));
        float _2659 = isnan(1.0) ? _4572 : (isnan(_4572) ? 1.0 : min(_4572, 1.0));
        float _2660 = dot(vec3(cbLight._m0[_2622].xyz), vec3(_2649, _2650, _2651));
        float _4583 = isnan(0.0) ? _2660 : (isnan(_2660) ? 0.0 : max(_2660, 0.0));
        float _2664 = _2641 * _2641;
        float _2668 = ((_2659 * _2659) * (_2664 + (-1.0))) + 1.0;
        float _2677 = (exp2(log2(1.0 - (isnan(1.0) ? _4583 : (isnan(_4583) ? 1.0 : min(_4583, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2678 = 1.0 - _2641;
        float _2688 = (0.5 / (((_2314 * ((_2655 * _2678) + _2641)) + 9.9999999392252902907785028219223e-09) + (((_2314 * _2678) + _2641) * _2655))) * _2655;
        float _4594 = isnan(0.0) ? _2688 : (isnan(_2688) ? 0.0 : max(_2688, 0.0));
        float _2690 = (isnan(1.0) ? _4594 : (isnan(_4594) ? 1.0 : min(_4594, 1.0))) * (_2664 / ((_2668 * _2668) * 3.141590118408203125));
        float _2691 = isnan(1.0) ? _2162 : (isnan(_2162) ? 1.0 : min(_2162, 1.0));
        _2611 = (((_2677 * cbLight._m0[_2626].x) * _2690) * _2691) + _2501;
        _2613 = (((_2677 * cbLight._m0[_2626].y) * _2690) * _2691) + _2503;
        _2615 = (((_2677 * cbLight._m0[_2626].z) * _2690) * _2691) + _2505;
    }
    float _2826;
    float _2828;
    float _2830;
    float _2832;
    float _2834;
    float _2836;
    if (_2144.y == 0u)
    {
        float _2766 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2767 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2766;
        float _2768 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2766;
        float _2769 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2766;
        uvec4 _2781 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2782 = _2781.x;
        uint _2793 = uint((float(_2781.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1031) / _2782))) + floor(float(uint(cbSceneParam._m0[85u].x * _1030) / _2782)));
        float _2803 = (log2(_2769 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2804 = isnan(0.0) ? _2803 : (isnan(_2803) ? 0.0 : max(_2803, 0.0));
        uint _2807 = uint(isnan(14.0) ? _2804 : (isnan(_2804) ? 14.0 : min(_2804, 14.0)));
        uvec4 _2812 = texelFetch(g_lightClusterGridBuffer, int(((_2807 << 2u) + (_2793 << 6u)) >> 2u));
        uint _2813 = _2812.x;
        uint _2814 = _2781.z;
        float _2914;
        float _2916;
        float _2918;
        float _2920;
        float _2922;
        float _2924;
        if (((((1u << ((_2814 >> 4u) & 15u)) + 4294967295u) & _2813) == 0u) || ((_2814 & 240u) == 0u))
        {
            _2914 = 0.0;
            _2916 = 0.0;
            _2918 = 0.0;
            _2920 = 0.0;
            _2922 = 0.0;
            _2924 = 0.0;
        }
        else
        {
            float _2915;
            float _2917;
            float _2919;
            float _2921;
            float _2923;
            float _2925;
            float _3059 = 0.0;
            float _3060 = 0.0;
            float _3061 = 0.0;
            float _3062 = 0.0;
            float _3063 = 0.0;
            float _3064 = 0.0;
            uint _3065 = 0u;
            uint _3074;
            bool _3075;
            for (;;)
            {
                _3074 = texelFetch(g_lightClassification, int((((_2807 << 5u) + (_2793 << 9u)) + (_3065 << 2u)) >> 2u)).x;
                _3075 = _3074 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_3075)
                {
                    frontier_phi_61_pred = _3059;
                    frontier_phi_61_pred_1 = _3064;
                    frontier_phi_61_pred_2 = _3063;
                    frontier_phi_61_pred_3 = _3062;
                    frontier_phi_61_pred_4 = _3061;
                    frontier_phi_61_pred_5 = _3060;
                }
                else
                {
                    float _3183;
                    float _3184;
                    float _3185;
                    float _3186;
                    float _3187;
                    float _3188;
                    uint _3189;
                    _3183 = _3059;
                    _3184 = _3060;
                    _3185 = _3061;
                    _3186 = _3062;
                    _3187 = _3063;
                    _3188 = _3064;
                    _3189 = _3074;
                    float _3115;
                    float _3116;
                    float _3117;
                    float _3118;
                    float _3119;
                    float _3120;
                    for (;;)
                    {
                        uint _3193 = uint(findLSB(_3189)) + (_3065 << 5u);
                        uint _3190 = (_3189 + 4294967295u) & _3189;
                        uint _3195 = _3193 * 48u;
                        vec4 _3209 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3195)).x, texelFetch(g_PointLightRenderingBuffer, int(_3195 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3195 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3195 + 3u)).x));
                        uint _3215 = (_3193 * 48u) + 4u;
                        vec4 _3228 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3215)).x, texelFetch(g_PointLightRenderingBuffer, int(_3215 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3215 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3215 + 3u)).x));
                        uint _3234 = (_3193 * 48u) + 8u;
                        vec3 _3245 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3234)).x, texelFetch(g_PointLightRenderingBuffer, int(_3234 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3234 + 2u)).x));
                        float _3249 = _3209.x - _2767;
                        float _3250 = _3209.y - _2768;
                        float _3251 = _3209.z - _2769;
                        float _3252 = dot(vec3(_3249, _3250, _3251), vec3(_3249, _3250, _3251));
                        float _3255 = inversesqrt(_3252);
                        float _3256 = _3255 * _3249;
                        float _3257 = _3255 * _3250;
                        float _3258 = _3255 * _3251;
                        float _3259 = dot(vec3(_1049, _1052, _1055), vec3(_3256, _3257, _3258));
                        float _3264 = 1.0 - (_3252 * _3209.w);
                        float _4620 = isnan(0.0) ? _3264 : (isnan(_3264) ? 0.0 : max(_3264, 0.0));
                        float _3265 = isnan(1.0) ? _4620 : (isnan(_4620) ? 1.0 : min(_4620, 1.0));
                        float _3266 = sqrt(_3252) * _3228.w;
                        float _3269 = 1.39999997615814208984375 / (_3266 + 1.39999997615814208984375);
                        float _3270 = _3269 * _3269;
                        float _3273 = ((1.0 - _3270) * _3259) + _3270;
                        float _3276 = _3266 * _3266;
                        float _3280 = ((isnan(0.0) ? _3273 : (isnan(_3273) ? 0.0 : max(_3273, 0.0))) * _3265) / ((_3276 * 0.699999988079071044921875) + 1.0);
                        float _3284 = (-0.0) - _2767;
                        float _3285 = (-0.0) - _2768;
                        float _3286 = (-0.0) - _2769;
                        float _3290 = inversesqrt(dot(vec3(_3284, _3285, _3286), vec3(_3284, _3285, _3286)));
                        float _3291 = _3290 * _3284;
                        float _3292 = _3290 * _3285;
                        float _3293 = _3290 * _3286;
                        float _3301 = exp2(log2(1.0 / ((_3276 * 3.5) + 5.0)) * 0.25);
                        float _3302 = 1.0 - _1109;
                        float _3309 = sqrt(1.0 - ((1.0 - (_3302 * _3302)) * (1.0 - (_3301 * _3301))));
                        float _3310 = _3309 * _3309;
                        float _3311 = _3310 * _3310;
                        float _3312 = _3291 + _3256;
                        float _3313 = _3292 + _3257;
                        float _3314 = _3293 + _3258;
                        float _3318 = inversesqrt(dot(vec3(_3312, _3313, _3314), vec3(_3312, _3313, _3314)));
                        float _3322 = dot(vec3(_1049, _1052, _1055), vec3(_3291, _3292, _3293));
                        float _4636 = isnan(0.0) ? _3322 : (isnan(_3322) ? 0.0 : max(_3322, 0.0));
                        float _3325 = isnan(1.0) ? _4636 : (isnan(_4636) ? 1.0 : min(_4636, 1.0));
                        float _3326 = dot(vec3(_1049, _1052, _1055), vec3(_3318 * _3312, _3318 * _3313, _3318 * _3314));
                        float _4647 = isnan(0.0) ? _3326 : (isnan(_3326) ? 0.0 : max(_3326, 0.0));
                        float _3329 = isnan(1.0) ? _4647 : (isnan(_4647) ? 1.0 : min(_4647, 1.0));
                        float _3333 = ((_3329 * _3329) * (_3311 + (-1.0))) + 1.0;
                        float _3334 = _3269 * _3310;
                        float _3335 = _3334 * _3334;
                        float _3338 = ((1.0 - _3335) * _3259) + _3335;
                        float _4658 = isnan(0.0) ? _3338 : (isnan(_3338) ? 0.0 : max(_3338, 0.0));
                        float _3339 = isnan(1.0) ? _4658 : (isnan(_4658) ? 1.0 : min(_4658, 1.0));
                        float _3340 = 1.0 - _3310;
                        float _3350 = (0.5 / (((_3339 * ((_3325 * _3340) + _3310)) + 9.9999999392252902907785028219223e-09) + (((_3339 * _3340) + _3310) * _3325))) * _3339;
                        float _4669 = isnan(0.0) ? _3350 : (isnan(_3350) ? 0.0 : max(_3350, 0.0));
                        float _3361 = (((_3311 * 3.1415927410125732421875) * (isnan(1.0) ? _4669 : (isnan(_4669) ? 1.0 : min(_4669, 1.0)))) / ((_3333 * _3333) * ((_3276 * 2.1991131305694580078125) + 3.141590118408203125))) * _3265;
                        _3118 = (_3280 * _3228.x) + _3186;
                        _3119 = (_3280 * _3228.y) + _3187;
                        _3120 = (_3280 * _3228.z) + _3188;
                        _3115 = (_3361 * _3245.x) + _3183;
                        _3116 = (_3361 * _3245.y) + _3184;
                        _3117 = (_3361 * _3245.z) + _3185;
                        if (_3190 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3183 = _3115;
                            _3184 = _3116;
                            _3185 = _3117;
                            _3186 = _3118;
                            _3187 = _3119;
                            _3188 = _3120;
                            _3189 = _3190;
                        }
                    }
                    frontier_phi_61_pred = _3115;
                    frontier_phi_61_pred_1 = _3120;
                    frontier_phi_61_pred_2 = _3119;
                    frontier_phi_61_pred_3 = _3118;
                    frontier_phi_61_pred_4 = _3117;
                    frontier_phi_61_pred_5 = _3116;
                }
                _2915 = frontier_phi_61_pred;
                _2925 = frontier_phi_61_pred_1;
                _2923 = frontier_phi_61_pred_2;
                _2921 = frontier_phi_61_pred_3;
                _2919 = frontier_phi_61_pred_4;
                _2917 = frontier_phi_61_pred_5;
                uint _3066 = _3065 + 1u;
                if (_3066 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3059 = _2915;
                    _3060 = _2917;
                    _3061 = _2919;
                    _3062 = _2921;
                    _3063 = _2923;
                    _3064 = _2925;
                    _3065 = _3066;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2914 = _2915;
            _2916 = _2917;
            _2918 = _2919;
            _2920 = _2921;
            _2922 = _2923;
            _2924 = _2925;
        }
        uvec4 _2928 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2929 = _2928.z;
        uint _2931 = (_2929 >> 8u) & 15u;
        float _3027;
        float _3029;
        float _3031;
        float _3033;
        float _3035;
        float _3037;
        if (((4294967295u << _2931) & _2813) == 0u)
        {
            _3027 = _2914;
            _3029 = _2916;
            _3031 = _2918;
            _3033 = _2920;
            _3035 = _2922;
            _3037 = _2924;
        }
        else
        {
            float _3052 = inversesqrt(dot(vec3(_2767, _2768, _2769), vec3(_2767, _2768, _2769)));
            float _3053 = _3052 * _2767;
            float _3054 = _3052 * _2768;
            float _3055 = _3052 * _2769;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2931 < ((_2929 >> 12u) & 15u))
            {
                float _3028;
                float _3030;
                float _3032;
                float _3034;
                float _3036;
                float _3038;
                float _3166 = _2914;
                float _3167 = _2916;
                float _3168 = _2918;
                float _3169 = _2920;
                float _3170 = _2922;
                float _3171 = _2924;
                uint _3172 = _2931;
                uint _3181;
                bool _3182;
                for (;;)
                {
                    _3181 = texelFetch(g_lightClassification, int((((_2807 << 5u) + (_2793 << 9u)) + (_3172 << 2u)) >> 2u)).x;
                    _3182 = _3181 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_3182)
                    {
                        frontier_phi_67_pred = _3169;
                        frontier_phi_67_pred_1 = _3170;
                        frontier_phi_67_pred_2 = _3171;
                        frontier_phi_67_pred_3 = _3168;
                        frontier_phi_67_pred_4 = _3167;
                        frontier_phi_67_pred_5 = _3166;
                    }
                    else
                    {
                        float _3366;
                        float _3367;
                        float _3368;
                        float _3369;
                        float _3370;
                        float _3371;
                        float _3659;
                        float _3660;
                        float _3661;
                        float _3662;
                        float _3663;
                        float _3664;
                        float _3379 = _3166;
                        float _3380 = _3167;
                        float _3381 = _3168;
                        float _3382 = _3169;
                        float _3383 = _3170;
                        float _3384 = _3171;
                        uint _3385 = _3181;
                        uint _3386;
                        vec4 _3411;
                        float _3412;
                        vec4 _3427;
                        vec3 _3439;
                        vec4 _3454;
                        vec4 _3469;
                        float _3515;
                        bool _3516;
                        for (;;)
                        {
                            uint _3396 = ((_3172 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3385));
                            _3386 = (_3385 + 4294967295u) & _3385;
                            uint _3398 = _3396 * 40u;
                            _3411 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3398)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3398 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3398 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3398 + 3u)).x));
                            _3412 = _3411.w;
                            uint _3414 = (_3396 * 40u) + 4u;
                            _3427 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3414)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3414 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3414 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3414 + 3u)).x));
                            uint _3429 = (_3396 * 40u) + 8u;
                            _3439 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3429)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3429 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3429 + 2u)).x));
                            uint _3441 = (_3396 * 40u) + 16u;
                            _3454 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3441)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3441 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3441 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3441 + 3u)).x));
                            uint _3456 = (_3396 * 40u) + 20u;
                            _3469 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3456)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3456 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3456 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3456 + 3u)).x));
                            uint _3471 = (_3396 * 40u) + 24u;
                            vec4 _3484 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3471)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3471 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3471 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3471 + 3u)).x));
                            uint _3490 = (_3396 * 40u) + 28u;
                            vec4 _3503 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3490)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3490 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3490 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3490 + 3u)).x));
                            _3515 = fma(_2769, _3503.z, fma(_2768, _3503.y, _3503.x * _2767)) + _3503.w;
                            _3516 = !((fma(_2769, _3484.z, fma(_2768, _3484.y, _3484.x * _2767)) + _3484.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3516)
                            {
                                float _3543 = _3411.x - _2767;
                                float _3544 = _3411.y - _2768;
                                float _3545 = _3411.z - _2769;
                                float _3546 = dot(vec3(_3543, _3544, _3545), vec3(_3543, _3544, _3545));
                                float _3549 = inversesqrt(_3546);
                                float _3550 = _3549 * _3543;
                                float _3551 = _3549 * _3544;
                                float _3552 = _3549 * _3545;
                                float _3556 = 1.0 - (_3546 / (_3412 * _3412));
                                float _4680 = isnan(0.0) ? _3556 : (isnan(_3556) ? 0.0 : max(_3556, 0.0));
                                float _3557 = isnan(1.0) ? _4680 : (isnan(_4680) ? 1.0 : min(_4680, 1.0));
                                float _3561 = sqrt(_3546) * _3427.w;
                                float _3563 = 1.39999997615814208984375 / (_3561 + 1.39999997615814208984375);
                                float _3564 = _3563 * _3563;
                                float _3567 = ((1.0 - _3564) * dot(vec3(_3550, _3551, _3552), vec3(_1049, _1052, _1055))) + _3564;
                                float _3570 = _3561 * _3561;
                                float _3574 = (fma(_2769, _3454.z, fma(_2768, _3454.y, _3454.x * _2767)) + _3454.w) / _3515;
                                float _3575 = (fma(_2769, _3469.z, fma(_2768, _3469.y, _3469.x * _2767)) + _3469.w) / _3515;
                                float _3579 = 1.0 - dot(vec2(_3574, _3575), vec2(_3574, _3575));
                                float _4696 = isnan(0.0) ? _3579 : (isnan(_3579) ? 0.0 : max(_3579, 0.0));
                                float _3580 = isnan(1.0) ? _4696 : (isnan(_4696) ? 1.0 : min(_4696, 1.0));
                                float _3581 = _3580 * (((isnan(0.0) ? _3567 : (isnan(_3567) ? 0.0 : max(_3567, 0.0))) * _3557) / ((_3570 * 0.699999988079071044921875) + 1.0));
                                float _3593 = exp2(log2(1.0 / ((_3570 * 3.5) + 5.0)) * 0.25);
                                float _3594 = 1.0 - _1109;
                                float _3601 = sqrt(1.0 - ((1.0 - (_3594 * _3594)) * (1.0 - (_3593 * _3593))));
                                float _3602 = _3601 * _3601;
                                float _3603 = _3602 * _3602;
                                float _3604 = _3550 - _3053;
                                float _3605 = _3551 - _3054;
                                float _3606 = _3552 - _3055;
                                float _3610 = inversesqrt(dot(vec3(_3604, _3605, _3606), vec3(_3604, _3605, _3606)));
                                float _3614 = dot(vec3(_1049, _1052, _1055), vec3((-0.0) - _3053, (-0.0) - _3054, (-0.0) - _3055));
                                float _4707 = isnan(0.0) ? _3614 : (isnan(_3614) ? 0.0 : max(_3614, 0.0));
                                float _3617 = isnan(1.0) ? _4707 : (isnan(_4707) ? 1.0 : min(_4707, 1.0));
                                float _3618 = dot(vec3(_1049, _1052, _1055), vec3(_3610 * _3604, _3610 * _3605, _3610 * _3606));
                                float _4718 = isnan(0.0) ? _3618 : (isnan(_3618) ? 0.0 : max(_3618, 0.0));
                                float _3621 = isnan(1.0) ? _4718 : (isnan(_4718) ? 1.0 : min(_4718, 1.0));
                                float _3625 = ((_3621 * _3621) * (_3603 + (-1.0))) + 1.0;
                                float _3626 = _3563 * _3602;
                                float _3627 = _3626 * _3626;
                                float _3633 = ((1.0 - _3627) * dot(vec3(_1049, _1052, _1055), vec3(_3550, _3551, _3552))) + _3627;
                                float _4729 = isnan(0.0) ? _3633 : (isnan(_3633) ? 0.0 : max(_3633, 0.0));
                                float _3634 = isnan(1.0) ? _4729 : (isnan(_4729) ? 1.0 : min(_4729, 1.0));
                                float _3635 = 1.0 - _3602;
                                float _3645 = (0.5 / (((_3634 * ((_3617 * _3635) + _3602)) + 9.9999999392252902907785028219223e-09) + (((_3634 * _3635) + _3602) * _3617))) * _3634;
                                float _4740 = isnan(0.0) ? _3645 : (isnan(_3645) ? 0.0 : max(_3645, 0.0));
                                float _3655 = (_3580 * _3557) * (((_3603 * 3.1415927410125732421875) * (isnan(1.0) ? _4740 : (isnan(_4740) ? 1.0 : min(_4740, 1.0)))) / ((_3625 * _3625) * ((_3570 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3655 * _3439.x;
                                frontier_phi_73_pred_1 = _3655 * _3439.y;
                                frontier_phi_73_pred_2 = _3581 * _3427.z;
                                frontier_phi_73_pred_3 = _3581 * _3427.y;
                                frontier_phi_73_pred_4 = _3581 * _3427.x;
                                frontier_phi_73_pred_5 = _3655 * _3439.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3659 = frontier_phi_73_pred;
                            _3660 = frontier_phi_73_pred_1;
                            _3664 = frontier_phi_73_pred_2;
                            _3663 = frontier_phi_73_pred_3;
                            _3662 = frontier_phi_73_pred_4;
                            _3661 = frontier_phi_73_pred_5;
                            _3369 = _3662 + _3382;
                            _3370 = _3663 + _3383;
                            _3371 = _3664 + _3384;
                            _3366 = _3659 + _3379;
                            _3367 = _3660 + _3380;
                            _3368 = _3661 + _3381;
                            if (_3386 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3379 = _3366;
                                _3380 = _3367;
                                _3381 = _3368;
                                _3382 = _3369;
                                _3383 = _3370;
                                _3384 = _3371;
                                _3385 = _3386;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3369;
                        frontier_phi_67_pred_1 = _3370;
                        frontier_phi_67_pred_2 = _3371;
                        frontier_phi_67_pred_3 = _3368;
                        frontier_phi_67_pred_4 = _3367;
                        frontier_phi_67_pred_5 = _3366;
                    }
                    _3034 = frontier_phi_67_pred;
                    _3036 = frontier_phi_67_pred_1;
                    _3038 = frontier_phi_67_pred_2;
                    _3032 = frontier_phi_67_pred_3;
                    _3030 = frontier_phi_67_pred_4;
                    _3028 = frontier_phi_67_pred_5;
                    uint _3173 = _3172 + 1u;
                    if (_3173 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3166 = _3028;
                        _3167 = _3030;
                        _3168 = _3032;
                        _3169 = _3034;
                        _3170 = _3036;
                        _3171 = _3038;
                        _3172 = _3173;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _3036;
                frontier_phi_55_56_ladder_1 = _3038;
                frontier_phi_55_56_ladder_2 = _3034;
                frontier_phi_55_56_ladder_3 = _3032;
                frontier_phi_55_56_ladder_4 = _3030;
                frontier_phi_55_56_ladder_5 = _3028;
            }
            else
            {
                frontier_phi_55_56_ladder = _2922;
                frontier_phi_55_56_ladder_1 = _2924;
                frontier_phi_55_56_ladder_2 = _2920;
                frontier_phi_55_56_ladder_3 = _2918;
                frontier_phi_55_56_ladder_4 = _2916;
                frontier_phi_55_56_ladder_5 = _2914;
            }
            _3027 = frontier_phi_55_56_ladder_5;
            _3029 = frontier_phi_55_56_ladder_4;
            _3031 = frontier_phi_55_56_ladder_3;
            _3033 = frontier_phi_55_56_ladder_2;
            _3035 = frontier_phi_55_56_ladder;
            _3037 = frontier_phi_55_56_ladder_1;
        }
        float _3042 = isnan(1.0) ? _1093 : (isnan(_1093) ? 1.0 : min(_1093, 1.0));
        _2826 = (_3042 * _3033) + _2278;
        _2828 = (_3042 * _3035) + _2280;
        _2830 = (_3042 * _3037) + _2282;
        _2832 = ((_3027 * 0.039999999105930328369140625) * _3042) + _2611;
        _2834 = ((_3029 * 0.039999999105930328369140625) * _3042) + _2613;
        _2836 = ((_3031 * 0.039999999105930328369140625) * _3042) + _2615;
    }
    else
    {
        _2826 = _2278;
        _2828 = _2280;
        _2830 = _2282;
        _2832 = _2611;
        _2834 = _2613;
        _2836 = _2615;
    }
    float _4756 = isnan(0.0) ? _1078 : (isnan(_1078) ? 0.0 : max(_1078, 0.0));
    float _4767 = isnan(0.0) ? _1079 : (isnan(_1079) ? 0.0 : max(_1079, 0.0));
    float _4778 = isnan(0.0) ? _1080 : (isnan(_1080) ? 0.0 : max(_1080, 0.0));
    uint _2856 = _285 + 6u;
    float _2864 = _1030 / cbSceneParam._m0[86u].x;
    float _2865 = _1031 / cbSceneParam._m0[86u].y;
    vec4 _2879 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2864, _2865, (log2((isnan(cbSceneParam._m0[77u].w) ? _965 : (isnan(_965) ? cbSceneParam._m0[77u].w : min(_965, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2881 = _2879.x;
    float _2882 = _2879.y;
    float _2883 = _2879.z;
    float _2884 = _2879.w;
    float _2977;
    float _2979;
    float _2981;
    float _2983;
    if (_965 > cbSceneParam._m0[78u].w)
    {
        float _2939 = isnan(_965) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _965 : min(cbSceneParam._m0[80u].w, _965));
        float _2940 = _2939 / _965;
        float _2951 = _2940 * _1015;
        float _2952 = _1016 * _2940;
        float _2953 = (-0.0) - _2952;
        float _2955 = _2940 * _1017;
        float _2957 = (cbSceneParam._m0[77u].w * _2953) / _2939;
        float _2958 = _2957 + cbSceneParam._m0[79u].w;
        float _2959 = cbSceneParam._m0[79u].w - _2952;
        float _2965 = sqrt(((_2951 * _2951) + (_2952 * _2952)) + (_2955 * _2955));
        float _2968 = (1.0 - (cbSceneParam._m0[77u].w / _2939)) * _2965;
        float _2973 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2975 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3128;
        if (abs((_2953 - _2957) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3128 = ((((_2958 > 0.0) ? exp2(_2973 * _2958) : (2.0 - exp2(_2975 * _2958))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2968;
        }
        else
        {
            float _3088 = 1.0 / cbSceneParam._m0[80u].x;
            float _3089 = isnan(_2959) ? _2958 : (isnan(_2958) ? _2959 : max(_2958, _2959));
            float _3090 = isnan(_2959) ? _2958 : (isnan(_2958) ? _2959 : min(_2958, _2959));
            float _3099 = isnan(0.0) ? _3089 : (isnan(_3089) ? 0.0 : min(_3089, 0.0));
            float _3100 = isnan(0.0) ? _3090 : (isnan(_3090) ? 0.0 : min(_3090, 0.0));
            _3128 = ((abs(_2965 / _2953) * cbSceneParam._m0[80u].y) * ((((_3099 - _3100) * 2.0) - ((exp2(_2973 * (isnan(0.0) ? _3089 : (isnan(_3089) ? 0.0 : max(_3089, 0.0)))) - exp2(_2973 * (isnan(0.0) ? _3090 : (isnan(_3090) ? 0.0 : max(_3090, 0.0))))) * _3088)) - ((exp2(_2975 * _3099) - exp2(_2975 * _3100)) * _3088))) + (_2968 * cbSceneParam._m0[80u].z);
        }
        vec4 _3130 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2864, _2865, 1.0), 0.0);
        float _3139 = exp2((_3128 * (-1.44269502162933349609375)) * (1.0 - _3130.w));
        float _3140 = log2(_3139);
        float _3156 = log2(_2884);
        _2977 = (exp2(_3156 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3140 * cbSceneParam._m0[78u].x)) * _3130.x) / cbSceneParam._m0[78u].x)) + _2881;
        _2979 = (exp2(_3156 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3140 * cbSceneParam._m0[78u].y)) * _3130.y) / cbSceneParam._m0[78u].y)) + _2882;
        _2981 = (exp2(_3156 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3140 * cbSceneParam._m0[78u].z)) * _3130.z) / cbSceneParam._m0[78u].z)) + _2883;
        _2983 = _3139 * _2884;
    }
    else
    {
        _2977 = _2881;
        _2979 = _2882;
        _2981 = _2883;
        _2983 = _2884;
    }
    float _2995 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2996 = _2995 == 3.0;
    float _2997 = log2(_2983);
    float _3004 = exp2(_2997 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4756 : (isnan(_4756) ? 1.0 : min(_4756, 1.0))) * (_2826 + ((isnan(0.0) ? _1817 : (isnan(_1817) ? 0.0 : max(_1817, 0.0))) * _1093))) + ((_2832 + ((isnan(0.0) ? _2110 : (isnan(_2110) ? 0.0 : max(_2110, 0.0))) * _1896)) * cbPerFrame._m0[3u].x));
    float _3005 = exp2(_2997 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4767 : (isnan(_4767) ? 1.0 : min(_4767, 1.0))) * (_2828 + ((isnan(0.0) ? _1820 : (isnan(_1820) ? 0.0 : max(_1820, 0.0))) * _1093))) + ((_2834 + ((isnan(0.0) ? _2113 : (isnan(_2113) ? 0.0 : max(_2113, 0.0))) * _1896)) * cbPerFrame._m0[3u].x));
    float _3006 = exp2(_2997 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4778 : (isnan(_4778) ? 1.0 : min(_4778, 1.0))) * (_2830 + ((isnan(0.0) ? _1823 : (isnan(_1823) ? 0.0 : max(_1823, 0.0))) * _1093))) + ((_2836 + ((isnan(0.0) ? _2116 : (isnan(_2116) ? 0.0 : max(_2116, 0.0))) * _1896)) * cbPerFrame._m0[3u].x));
    float _3015 = (_2995 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _3015 * (_2996 ? _3004 : (_3004 + (cbSceneParam._m0[72u].w * _2977)));
    SV_Target.y = _3015 * (_2996 ? _3005 : (_3005 + (cbSceneParam._m0[72u].w * _2979)));
    SV_Target.z = _3015 * (_2996 ? _3006 : (_3006 + (cbSceneParam._m0[72u].w * _2981)));
    SV_Target.w = cbInstanceData._m0[_2856].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2856].w;
}


