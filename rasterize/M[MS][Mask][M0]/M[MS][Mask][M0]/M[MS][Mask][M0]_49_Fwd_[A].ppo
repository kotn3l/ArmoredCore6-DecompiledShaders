#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_0;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 13) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_22;
layout(set = 0, binding = 14) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_29;
layout(set = 0, binding = 20) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_6;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1450;
float _3807;
float _3808;
float _3809;
float _3810;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _234 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _235 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _236 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _242 = inversesqrt(dot(vec3(_234, _235, _236), vec3(_234, _235, _236)));
    float _243 = _242 * _234;
    float _244 = _242 * _235;
    float _245 = _242 * _236;
    float _249 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _250 = _249 * NORMAL.x;
    float _251 = _249 * NORMAL.y;
    float _252 = _249 * NORMAL.z;
    float _256 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _257 = _256 * TANGENT.x;
    float _258 = _256 * TANGENT.y;
    float _259 = _256 * TANGENT.z;
    float _268 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _270 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _271 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3819 = isnan(0.0) ? _268 : (isnan(_268) ? 0.0 : max(_268, 0.0));
    float _3830 = isnan(0.0) ? _270 : (isnan(_270) ? 0.0 : max(_270, 0.0));
    float _3841 = isnan(0.0) ? _271 : (isnan(_271) ? 0.0 : max(_271, 0.0));
    uint _281 = uint(roundEven(NORMAL.w)) * 13u;
    uint _286 = _281 + 1u;
    uint _290 = _281 + 2u;
    float _299 = sqrt(((cbInstanceData._m0[_286].x * cbInstanceData._m0[_286].x) + (cbInstanceData._m0[_281].x * cbInstanceData._m0[_281].x)) + (cbInstanceData._m0[_290].x * cbInstanceData._m0[_290].x));
    float _300 = _299 * TEXCOORD.z;
    float _301 = _299 * TEXCOORD.w;
    vec4 _314 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _300) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _301) + cbTextureTilingScale._m0[13u].w));
    vec4 _337 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _363 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _368 = _363.x * cbMtdParam._m0[11u].x;
    float _369 = _363.y * cbMtdParam._m0[11u].y;
    float _370 = _363.z * cbMtdParam._m0[11u].z;
    vec4 _389 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _300) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _301) + cbTextureTilingScale._m0[5u].w));
    vec4 _440 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _442 = _440.x;
    float _454 = dot(vec4(_442, _440.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _471 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w)).x) * 2.0) - ((((_442 - _454) * cbMtdParam._m0[24u].z) + _454) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3852 = isnan(0.0) ? _471 : (isnan(_471) ? 0.0 : max(_471, 0.0));
    float _472 = isnan(1.0) ? _3852 : (isnan(_3852) ? 1.0 : min(_3852, 1.0));
    float _482 = (_337.x * cbMtdParam._m0[9u].x) * ((_472 * ((_389.x * cbMtdParam._m0[12u].x) - _368)) + _368);
    float _483 = (_337.y * cbMtdParam._m0[9u].y) * ((_472 * ((_389.y * cbMtdParam._m0[12u].y) - _369)) + _369);
    float _484 = (_337.z * cbMtdParam._m0[9u].z) * ((_472 * ((_389.z * cbMtdParam._m0[12u].z) - _370)) + _370);
    float _488 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _314.x) * _482;
    float _491 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _314.y) * _483;
    float _494 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _314.z) * _484;
    float _502 = (((_482 - _488) * (isnan(1.0) ? _3819 : (isnan(_3819) ? 1.0 : min(_3819, 1.0)))) + _488) * 4.55000019073486328125;
    float _504 = (((_483 - _491) * (isnan(1.0) ? _3830 : (isnan(_3830) ? 1.0 : min(_3830, 1.0)))) + _491) * 4.55000019073486328125;
    float _506 = (((_484 - _494) * (isnan(1.0) ? _3841 : (isnan(_3841) ? 1.0 : min(_3841, 1.0)))) + _494) * 4.55000019073486328125;
    vec4 _525 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _300) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _301) + cbTextureTilingScale._m0[14u].w));
    vec4 _545 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _300) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _301) + cbTextureTilingScale._m0[20u].w));
    vec4 _572 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _300) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _301) + cbTextureTilingScale._m0[4u].w));
    vec4 _589 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _591 = _589.x;
    float _592 = _589.y;
    float _593 = _589.z;
    float _602 = ((_572.z - _593) * _472) + _593;
    float _605 = ((((_572.x - _591) * _472) + _591) * 2.0) + (-1.0);
    float _606 = ((((_572.y - _592) * _472) + _592) * 2.0) + (-1.0);
    float _607 = dot(vec2(_605, _606), vec2(_605, _606));
    float _3863 = isnan(0.0) ? _607 : (isnan(_607) ? 0.0 : max(_607, 0.0));
    float _612 = sqrt(1.0 - (isnan(1.0) ? _3863 : (isnan(_3863) ? 1.0 : min(_3863, 1.0))));
    vec4 _632 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _644 = (_605 + ((((_545.x * 2.0) + (-1.0)) * TEXCOORD_11.x) * cbMtdParam._m0[20u].x)) + (((_632.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _645 = (_606 + ((((_545.y * 2.0) + (-1.0)) * TEXCOORD_11.y) * cbMtdParam._m0[20u].x)) + (((_632.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _648 = fma(_612, _250, fma(_645, _257, _644 * _243));
    float _651 = fma(_612, _251, fma(_645, _258, _644 * _244));
    float _654 = fma(_612, _252, fma(_645, _259, _644 * _245));
    float _658 = inversesqrt(dot(vec3(_648, _651, _654), vec3(_648, _651, _654)));
    vec4 _685 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _300) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _301) + cbTextureTilingScale._m0[11u].w));
    float _687 = _685.x;
    float _688 = 1.0 - _687;
    float _694 = (cbMtdParam._m0[19u].x + dot(vec4(_658 * _648, _658 * _651, _658 * _654, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_687 - _688) * cbMtdParam._m0[24u].w) + _688) * cbMtdParam._m0[21u].z);
    float _3874 = isnan(0.0) ? _694 : (isnan(_694) ? 0.0 : max(_694, 0.0));
    float _695 = isnan(1.0) ? _3874 : (isnan(_3874) ? 1.0 : min(_3874, 1.0));
    float _697 = (-0.0) - cbMtdParam._m0[24u].x;
    float _699 = isnan(0.0) ? _697 : (isnan(_697) ? 0.0 : max(_697, 0.0));
    float _700 = isnan(1.0) ? _699 : (isnan(_699) ? 1.0 : min(_699, 1.0));
    float _707 = _695 - ((_695 * TEXCOORD_8.x) * _700);
    float _708 = _695 - ((_695 * TEXCOORD_8.y) * _700);
    float _709 = _695 - ((_695 * TEXCOORD_8.z) * _700);
    float _716 = (_707 * ((_525.x * cbMtdParam._m0[18u].x) - _502)) + _502;
    float _717 = (_708 * ((_525.y * cbMtdParam._m0[18u].y) - _504)) + _504;
    float _718 = (_709 * ((_525.z * cbMtdParam._m0[18u].z) - _506)) + _506;
    vec4 _730 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _300) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _301) + cbTextureTilingScale._m0[19u].w));
    float _732 = _730.x;
    float _733 = 1.0 - _732;
    float _759 = (TEXCOORD_8.x - ((cbMtdParam._m0[22u].w * (1.0 - TEXCOORD_8.x)) * ((((_732 - _733) * cbMtdParam._m0[24u].y) + _733) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3895 = isnan(0.0) ? _759 : (isnan(_759) ? 0.0 : max(_759, 0.0));
    float _760 = isnan(1.0) ? _3895 : (isnan(_3895) ? 1.0 : min(_3895, 1.0));
    float _768 = ((((cbMtdParam._m0[10u].x - _716) * TEXCOORD_8.x) * cbMtdParam._m0[23u].w) * _760) + _716;
    float _769 = ((((cbMtdParam._m0[10u].y - _717) * TEXCOORD_8.y) * cbMtdParam._m0[23u].w) * _760) + _717;
    float _770 = (((cbMtdParam._m0[23u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _718)) * _760) + _718;
    float _775 = (((_545.z - _602) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _602;
    float _779 = ((_632.z - _775) * cbMtdParam._m0[19u].w) + _775;
    vec4 _793 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _300) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _301) + cbTextureTilingScale._m0[15u].w));
    float _800 = (_793.x * 2.0) + (-1.0);
    float _801 = (_793.y * 2.0) + (-1.0);
    float _802 = dot(vec2(_800, _801), vec2(_800, _801));
    float _3906 = isnan(0.0) ? _802 : (isnan(_802) ? 0.0 : max(_802, 0.0));
    float _810 = ((_793.z - _779) * _707) + _779;
    float _813 = ((cbMtdParam._m0[23u].y - _810) * _760) + _810;
    vec4 _832 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _300) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _301) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _838 = (_832.x * 2.0) + (-1.0);
    float _839 = (_832.y * 2.0) + (-1.0);
    float _840 = dot(vec2(_838, _839), vec2(_838, _839));
    float _3917 = isnan(0.0) ? _840 : (isnan(_840) ? 0.0 : max(_840, 0.0));
    float _855 = ((sqrt(1.0 - (isnan(1.0) ? _3906 : (isnan(_3906) ? 1.0 : min(_3906, 1.0)))) - _612) * _709) + _612;
    float _858 = (((_800 - _644) * _707) + _644) + (cbMtdParam._m0[21u].x * _644);
    float _859 = (((_801 - _645) * _708) + _645) + (cbMtdParam._m0[21u].x * _645);
    float _870 = (((_838 - _858) + (_858 * cbMtdParam._m0[22u].z)) * _760) + _858;
    float _871 = (((_839 - _859) + (_859 * cbMtdParam._m0[22u].z)) * _760) + _859;
    float _872 = (_760 * (sqrt(1.0 - (isnan(1.0) ? _3917 : (isnan(_3917) ? 1.0 : min(_3917, 1.0)))) - _855)) + _855;
    float _876 = cbMtdParam._m0[22u].x + _632.w;
    float _879 = fma(_872, _250, fma(_871, _257, _870 * _243));
    float _882 = fma(_872, _251, fma(_871, _258, _870 * _244));
    float _885 = fma(_872, _252, fma(_871, _259, _870 * _245));
    float _889 = inversesqrt(dot(vec3(_879, _882, _885), vec3(_879, _882, _885)));
    float _890 = _889 * _879;
    float _891 = _889 * _882;
    float _892 = _889 * _885;
    float _3928 = isnan(0.0) ? _813 : (isnan(_813) ? 0.0 : max(_813, 0.0));
    float _893 = isnan(1.0) ? _3928 : (isnan(_3928) ? 1.0 : min(_3928, 1.0));
    float _3939 = isnan(0.0) ? _876 : (isnan(_876) ? 0.0 : max(_876, 0.0));
    float _3950 = isnan(0.0) ? _768 : (isnan(_768) ? 0.0 : max(_768, 0.0));
    float _3961 = isnan(0.0) ? _769 : (isnan(_769) ? 0.0 : max(_769, 0.0));
    float _3972 = isnan(0.0) ? _770 : (isnan(_770) ? 0.0 : max(_770, 0.0));
    float _911 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _951 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _961 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _951);
    float _962 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _951);
    float _963 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _951);
    float _967 = inversesqrt(dot(vec3(_961, _962, _963), vec3(_961, _962, _963)));
    float _968 = _961 * _967;
    float _969 = _962 * _967;
    float _970 = _963 * _967;
    vec4 _975 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _977 = _975.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1131 = sqrt(((_961 * _961) + (_962 * _962)) + (_963 * _963));
        float _1137 = (cbMatDynParam._m0[5u].x * _1131) + cbMatDynParam._m0[5u].y;
        float _3983 = isnan(0.0) ? _1137 : (isnan(_1137) ? 0.0 : max(_1137, 0.0));
        float _1138 = isnan(1.0) ? _3983 : (isnan(_3983) ? 1.0 : min(_3983, 1.0));
        float _1142 = (cbMatDynParam._m0[5u].z * _1131) + cbMatDynParam._m0[5u].w;
        float _3994 = isnan(0.0) ? _1142 : (isnan(_1142) ? 0.0 : max(_1142, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3994 : (isnan(_3994) ? 1.0 : min(_3994, 1.0))) - _1138)) + _1138) < ((_977 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _988 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _989 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1007 = fma(_892, cbSceneParam._m0[5u].z, fma(_891, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _890));
    float _1010 = fma(_892, cbSceneParam._m0[6u].z, fma(_891, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _890));
    float _1013 = fma(_892, cbSceneParam._m0[7u].z, fma(_891, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _890));
    uint _1026 = _281 + 9u;
    uint _1027 = _1026 + uint(cbMatDynParam._m0[0u].w);
    float _1033 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3950 : (isnan(_3950) ? 1.0 : min(_3950, 1.0)))) * cbInstanceData._m0[_1027].x;
    float _1034 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3961 : (isnan(_3961) ? 1.0 : min(_3961, 1.0)))) * cbInstanceData._m0[_1027].y;
    float _1035 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3972 : (isnan(_3972) ? 1.0 : min(_3972, 1.0)))) * cbInstanceData._m0[_1027].z;
    float _4005 = isnan(0.0) ? _1033 : (isnan(_1033) ? 0.0 : max(_1033, 0.0));
    float _1036 = isnan(1.0) ? _4005 : (isnan(_4005) ? 1.0 : min(_4005, 1.0));
    float _4016 = isnan(0.0) ? _1034 : (isnan(_1034) ? 0.0 : max(_1034, 0.0));
    float _1037 = isnan(1.0) ? _4016 : (isnan(_4016) ? 1.0 : min(_4016, 1.0));
    float _4027 = isnan(0.0) ? _1035 : (isnan(_1035) ? 0.0 : max(_1035, 0.0));
    float _1038 = isnan(1.0) ? _4027 : (isnan(_4027) ? 1.0 : min(_4027, 1.0));
    vec4 _1047 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _988, cbSceneParam._m0[86u].y * _989));
    float _1051 = ((isnan(1.0) ? _3939 : (isnan(_3939) ? 1.0 : min(_3939, 1.0))) * TEXCOORD_5.w) * _1047.x;
    float _1052 = dot(vec3(_890, _891, _892), vec3(_968, _969, _970));
    float _1055 = _1052 * 2.0;
    float _1059 = (_1055 * _890) - _968;
    float _1060 = (_1055 * _891) - _969;
    float _1061 = (_1055 * _892) - _970;
    float _1065 = abs(dot(vec3(_968, _969, _970), vec3(_890, _891, _892)));
    float _4038 = isnan(0.0) ? _1065 : (isnan(_1065) ? 0.0 : max(_1065, 0.0));
    float _1067 = sqrt(_893);
    float _1080 = exp2((_1067 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4038 : (isnan(_4038) ? 1.0 : min(_4038, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1067 * 3.0));
    float _1112 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1116 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1120 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1449;
    float _1451;
    float _1452;
    float _1453;
    float _1454;
    float _1455;
    float _1456;
    float _1457;
    float _1458;
    float _1459;
    float _1460;
    float _1461;
    float _1462;
    float _1463;
    float _1464;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1174 = fma(_1120, cbModelParam._m0[26u].z, fma(_1116, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1112));
        float _1178 = fma(_1120, cbModelParam._m0[27u].z, fma(_1116, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1112));
        float _1182 = fma(_1120, cbModelParam._m0[28u].z, fma(_1116, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1112));
        float _1207 = _1112 + _890;
        float _1208 = _1116 + _891;
        float _1209 = _1120 + _892;
        float _1219 = fma(_1209, cbModelParam._m0[26u].z, fma(_1208, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1207)) - _1174;
        float _1220 = fma(_1209, cbModelParam._m0[27u].z, fma(_1208, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1207)) - _1178;
        float _1221 = fma(_1209, cbModelParam._m0[28u].z, fma(_1208, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1207)) - _1182;
        float _1225 = inversesqrt(dot(vec3(_1219, _1220, _1221), vec3(_1219, _1220, _1221)));
        float _1238 = ((_1225 * _1219) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1174 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1239 = ((_1225 * _1220) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1178 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1240 = ((_1225 * _1221) / cbModelParam._m0[34u].z) + ((((((_1182 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1243 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1238, _1239, _1240), 0.0);
        vec4 _1250 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1238, _1239, _1240), 0.0);
        vec4 _1257 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1238, _1239, _1240), 0.0);
        vec4 _1264 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1238, _1239, _1240), 0.0);
        float _1277 = exp2((_1243.w + (-0.5)) * 20.0) * 2.0;
        float _1278 = _1277 * (_1243.x + (-0.5));
        float _1279 = _1277 * (_1243.y + (-0.5));
        float _1280 = _1277 * (_1243.z + (-0.5));
        float _1287 = exp2((_1250.w + (-0.5)) * 20.0) * 2.0;
        float _1288 = _1287 * (_1250.x + (-0.5));
        float _1289 = _1287 * (_1250.y + (-0.5));
        float _1290 = _1287 * (_1250.z + (-0.5));
        float _1297 = exp2((_1257.w + (-0.5)) * 20.0) * 2.0;
        float _1298 = _1297 * (_1257.x + (-0.5));
        float _1299 = _1297 * (_1257.y + (-0.5));
        float _1300 = _1297 * (_1257.z + (-0.5));
        float _1307 = exp2((_1264.w + (-0.5)) * 20.0) * 2.0;
        float _1308 = _1307 * (_1264.x + (-0.5));
        float _1309 = _1307 * (_1264.y + (-0.5));
        float _1310 = _1307 * (_1264.z + (-0.5));
        float _1311 = isnan(0.0) ? _1308 : (isnan(_1308) ? 0.0 : max(_1308, 0.0));
        float _1312 = isnan(0.0) ? _1309 : (isnan(_1309) ? 0.0 : max(_1309, 0.0));
        float _1313 = isnan(0.0) ? _1310 : (isnan(_1310) ? 0.0 : max(_1310, 0.0));
        float _1314 = _1278 * 0.5;
        float _1315 = _1288 * 0.5;
        float _1316 = _1298 * 0.5;
        float _1317 = dot(vec3(_1314, _1315, _1316), vec3(_1314, _1315, _1316));
        float _1322 = (_1317 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1317);
        float _1331 = (dot(vec3(_890, _891, _892), vec3(_1322 * _1314, _1322 * _1315, _1322 * _1316)) + 1.0) * 0.5;
        float _4064 = isnan(0.0) ? _1331 : (isnan(_1331) ? 0.0 : max(_1331, 0.0));
        float _1341 = sqrt(((_1315 * _1315) + (_1314 * _1314)) + (_1316 * _1316)) / (_1311 + 9.9999997473787516355514526367188e-06);
        float _4075 = isnan(0.0) ? _1341 : (isnan(_1341) ? 0.0 : max(_1341, 0.0));
        float _1342 = isnan(1.0) ? _4075 : (isnan(_4075) ? 1.0 : min(_4075, 1.0));
        float _1343 = _1342 * 2.0;
        float _1347 = (1.0 - _1342) / (_1342 + 1.0);
        float _4086 = isnan(0.0) ? _1347 : (isnan(_1347) ? 0.0 : max(_1347, 0.0));
        float _1348 = isnan(1.0) ? _4086 : (isnan(_4086) ? 1.0 : min(_4086, 1.0));
        float _1357 = ((((1.0 - _1348) * (_1343 + 2.0)) * exp2(log2(isnan(1.0) ? _4064 : (isnan(_4064) ? 1.0 : min(_4064, 1.0))) * (_1343 + 1.0))) + _1348) * _1311;
        float _1358 = _1279 * 0.5;
        float _1359 = _1289 * 0.5;
        float _1360 = _1299 * 0.5;
        float _1361 = dot(vec3(_1358, _1359, _1360), vec3(_1358, _1359, _1360));
        float _1366 = (_1361 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1361);
        float _1374 = (dot(vec3(_890, _891, _892), vec3(_1366 * _1358, _1366 * _1359, _1366 * _1360)) + 1.0) * 0.5;
        float _4097 = isnan(0.0) ? _1374 : (isnan(_1374) ? 0.0 : max(_1374, 0.0));
        float _1383 = sqrt(((_1359 * _1359) + (_1358 * _1358)) + (_1360 * _1360)) / (_1312 + 9.9999997473787516355514526367188e-06);
        float _4108 = isnan(0.0) ? _1383 : (isnan(_1383) ? 0.0 : max(_1383, 0.0));
        float _1384 = isnan(1.0) ? _4108 : (isnan(_4108) ? 1.0 : min(_4108, 1.0));
        float _1385 = _1384 * 2.0;
        float _1389 = (1.0 - _1384) / (_1384 + 1.0);
        float _4119 = isnan(0.0) ? _1389 : (isnan(_1389) ? 0.0 : max(_1389, 0.0));
        float _1390 = isnan(1.0) ? _4119 : (isnan(_4119) ? 1.0 : min(_4119, 1.0));
        float _1399 = ((((1.0 - _1390) * (_1385 + 2.0)) * exp2(log2(isnan(1.0) ? _4097 : (isnan(_4097) ? 1.0 : min(_4097, 1.0))) * (_1385 + 1.0))) + _1390) * _1312;
        float _1400 = _1280 * 0.5;
        float _1401 = _1290 * 0.5;
        float _1402 = _1300 * 0.5;
        float _1403 = dot(vec3(_1400, _1401, _1402), vec3(_1400, _1401, _1402));
        float _1408 = (_1403 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1403);
        float _1416 = (dot(vec3(_890, _891, _892), vec3(_1408 * _1400, _1408 * _1401, _1408 * _1402)) + 1.0) * 0.5;
        float _4130 = isnan(0.0) ? _1416 : (isnan(_1416) ? 0.0 : max(_1416, 0.0));
        float _1425 = sqrt(((_1401 * _1401) + (_1400 * _1400)) + (_1402 * _1402)) / (_1313 + 9.9999997473787516355514526367188e-06);
        float _4141 = isnan(0.0) ? _1425 : (isnan(_1425) ? 0.0 : max(_1425, 0.0));
        float _1426 = isnan(1.0) ? _4141 : (isnan(_4141) ? 1.0 : min(_4141, 1.0));
        float _1427 = _1426 * 2.0;
        float _1431 = (1.0 - _1426) / (_1426 + 1.0);
        float _4152 = isnan(0.0) ? _1431 : (isnan(_1431) ? 0.0 : max(_1431, 0.0));
        float _1432 = isnan(1.0) ? _4152 : (isnan(_4152) ? 1.0 : min(_4152, 1.0));
        float _1441 = ((((1.0 - _1432) * (_1427 + 2.0)) * exp2(log2(isnan(1.0) ? _4130 : (isnan(_4130) ? 1.0 : min(_4130, 1.0))) * (_1427 + 1.0))) + _1432) * _1313;
        _1449 = _1280;
        _1451 = _1279;
        _1452 = _1278;
        _1453 = _1290;
        _1454 = _1289;
        _1455 = _1288;
        _1456 = _1300;
        _1457 = _1299;
        _1458 = _1298;
        _1459 = _1313;
        _1460 = _1312;
        _1461 = _1311;
        _1462 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1357 : (isnan(_1357) ? 0.0 : max(_1357, 0.0)));
        _1463 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1399 : (isnan(_1399) ? 0.0 : max(_1399, 0.0)));
        _1464 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1441 : (isnan(_1441) ? 0.0 : max(_1441, 0.0)));
    }
    else
    {
        _1449 = _1450;
        _1451 = _1450;
        _1452 = _1450;
        _1453 = _1450;
        _1454 = _1450;
        _1455 = _1450;
        _1456 = _1450;
        _1457 = _1450;
        _1458 = _1450;
        _1459 = _1450;
        _1460 = _1450;
        _1461 = _1450;
        _1462 = 0.0;
        _1463 = 0.0;
        _1464 = 0.0;
    }
    float _1761;
    float _1762;
    float _1763;
    float _1764;
    float _1765;
    float _1766;
    float _1767;
    float _1768;
    float _1769;
    float _1770;
    float _1771;
    float _1772;
    float _1773;
    float _1774;
    float _1775;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1492 = fma(_1120, cbModelParam._m0[30u].z, fma(_1116, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1112));
        float _1496 = fma(_1120, cbModelParam._m0[31u].z, fma(_1116, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1112));
        float _1500 = fma(_1120, cbModelParam._m0[32u].z, fma(_1116, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1112));
        float _1523 = _1112 + _890;
        float _1524 = _1116 + _891;
        float _1525 = _1120 + _892;
        float _1535 = fma(_1525, cbModelParam._m0[30u].z, fma(_1524, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1523)) - _1492;
        float _1536 = fma(_1525, cbModelParam._m0[31u].z, fma(_1524, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1523)) - _1496;
        float _1537 = fma(_1525, cbModelParam._m0[32u].z, fma(_1524, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1523)) - _1500;
        float _1541 = inversesqrt(dot(vec3(_1535, _1536, _1537), vec3(_1535, _1536, _1537)));
        float _1554 = ((_1541 * _1535) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1492 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1555 = ((_1541 * _1536) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1496 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1556 = ((_1541 * _1537) / cbModelParam._m0[35u].z) + ((((((_1500 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1558 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1554, _1555, _1556), 0.0);
        vec4 _1565 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1554, _1555, _1556), 0.0);
        vec4 _1572 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1554, _1555, _1556), 0.0);
        vec4 _1579 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1554, _1555, _1556), 0.0);
        float _1591 = exp2((_1558.w + (-0.5)) * 20.0) * 2.0;
        float _1592 = _1591 * (_1558.x + (-0.5));
        float _1593 = _1591 * (_1558.y + (-0.5));
        float _1594 = _1591 * (_1558.z + (-0.5));
        float _1601 = exp2((_1565.w + (-0.5)) * 20.0) * 2.0;
        float _1602 = _1601 * (_1565.x + (-0.5));
        float _1603 = _1601 * (_1565.y + (-0.5));
        float _1604 = _1601 * (_1565.z + (-0.5));
        float _1611 = exp2((_1572.w + (-0.5)) * 20.0) * 2.0;
        float _1612 = _1611 * (_1572.x + (-0.5));
        float _1613 = _1611 * (_1572.y + (-0.5));
        float _1614 = _1611 * (_1572.z + (-0.5));
        float _1621 = exp2((_1579.w + (-0.5)) * 20.0) * 2.0;
        float _1622 = _1621 * (_1579.x + (-0.5));
        float _1623 = _1621 * (_1579.y + (-0.5));
        float _1624 = _1621 * (_1579.z + (-0.5));
        float _1625 = isnan(0.0) ? _1622 : (isnan(_1622) ? 0.0 : max(_1622, 0.0));
        float _1626 = isnan(0.0) ? _1623 : (isnan(_1623) ? 0.0 : max(_1623, 0.0));
        float _1627 = isnan(0.0) ? _1624 : (isnan(_1624) ? 0.0 : max(_1624, 0.0));
        float _1628 = _1592 * 0.5;
        float _1629 = _1602 * 0.5;
        float _1630 = _1612 * 0.5;
        float _1631 = dot(vec3(_1628, _1629, _1630), vec3(_1628, _1629, _1630));
        float _1636 = (_1631 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1631);
        float _1644 = (dot(vec3(_890, _891, _892), vec3(_1636 * _1628, _1636 * _1629, _1636 * _1630)) + 1.0) * 0.5;
        float _4193 = isnan(0.0) ? _1644 : (isnan(_1644) ? 0.0 : max(_1644, 0.0));
        float _1653 = sqrt(((_1629 * _1629) + (_1628 * _1628)) + (_1630 * _1630)) / (_1625 + 9.9999997473787516355514526367188e-06);
        float _4204 = isnan(0.0) ? _1653 : (isnan(_1653) ? 0.0 : max(_1653, 0.0));
        float _1654 = isnan(1.0) ? _4204 : (isnan(_4204) ? 1.0 : min(_4204, 1.0));
        float _1655 = _1654 * 2.0;
        float _1659 = (1.0 - _1654) / (_1654 + 1.0);
        float _4215 = isnan(0.0) ? _1659 : (isnan(_1659) ? 0.0 : max(_1659, 0.0));
        float _1660 = isnan(1.0) ? _4215 : (isnan(_4215) ? 1.0 : min(_4215, 1.0));
        float _1669 = ((((1.0 - _1660) * (_1655 + 2.0)) * exp2(log2(isnan(1.0) ? _4193 : (isnan(_4193) ? 1.0 : min(_4193, 1.0))) * (_1655 + 1.0))) + _1660) * _1625;
        float _1670 = _1593 * 0.5;
        float _1671 = _1603 * 0.5;
        float _1672 = _1613 * 0.5;
        float _1673 = dot(vec3(_1670, _1671, _1672), vec3(_1670, _1671, _1672));
        float _1678 = (_1673 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1673);
        float _1686 = (dot(vec3(_890, _891, _892), vec3(_1678 * _1670, _1678 * _1671, _1678 * _1672)) + 1.0) * 0.5;
        float _4226 = isnan(0.0) ? _1686 : (isnan(_1686) ? 0.0 : max(_1686, 0.0));
        float _1695 = sqrt(((_1671 * _1671) + (_1670 * _1670)) + (_1672 * _1672)) / (_1626 + 9.9999997473787516355514526367188e-06);
        float _4237 = isnan(0.0) ? _1695 : (isnan(_1695) ? 0.0 : max(_1695, 0.0));
        float _1696 = isnan(1.0) ? _4237 : (isnan(_4237) ? 1.0 : min(_4237, 1.0));
        float _1697 = _1696 * 2.0;
        float _1701 = (1.0 - _1696) / (_1696 + 1.0);
        float _4248 = isnan(0.0) ? _1701 : (isnan(_1701) ? 0.0 : max(_1701, 0.0));
        float _1702 = isnan(1.0) ? _4248 : (isnan(_4248) ? 1.0 : min(_4248, 1.0));
        float _1711 = ((((1.0 - _1702) * (_1697 + 2.0)) * exp2(log2(isnan(1.0) ? _4226 : (isnan(_4226) ? 1.0 : min(_4226, 1.0))) * (_1697 + 1.0))) + _1702) * _1626;
        float _1712 = _1594 * 0.5;
        float _1713 = _1604 * 0.5;
        float _1714 = _1614 * 0.5;
        float _1715 = dot(vec3(_1712, _1713, _1714), vec3(_1712, _1713, _1714));
        float _1720 = (_1715 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1715);
        float _1728 = (dot(vec3(_890, _891, _892), vec3(_1720 * _1712, _1720 * _1713, _1720 * _1714)) + 1.0) * 0.5;
        float _4259 = isnan(0.0) ? _1728 : (isnan(_1728) ? 0.0 : max(_1728, 0.0));
        float _1737 = sqrt(((_1713 * _1713) + (_1712 * _1712)) + (_1714 * _1714)) / (_1627 + 9.9999997473787516355514526367188e-06);
        float _4270 = isnan(0.0) ? _1737 : (isnan(_1737) ? 0.0 : max(_1737, 0.0));
        float _1738 = isnan(1.0) ? _4270 : (isnan(_4270) ? 1.0 : min(_4270, 1.0));
        float _1739 = _1738 * 2.0;
        float _1743 = (1.0 - _1738) / (_1738 + 1.0);
        float _4281 = isnan(0.0) ? _1743 : (isnan(_1743) ? 0.0 : max(_1743, 0.0));
        float _1744 = isnan(1.0) ? _4281 : (isnan(_4281) ? 1.0 : min(_4281, 1.0));
        float _1753 = ((((1.0 - _1744) * (_1739 + 2.0)) * exp2(log2(isnan(1.0) ? _4259 : (isnan(_4259) ? 1.0 : min(_4259, 1.0))) * (_1739 + 1.0))) + _1744) * _1627;
        _1761 = _1594;
        _1762 = _1593;
        _1763 = _1592;
        _1764 = _1604;
        _1765 = _1603;
        _1766 = _1602;
        _1767 = _1614;
        _1768 = _1613;
        _1769 = _1612;
        _1770 = _1627;
        _1771 = _1626;
        _1772 = _1625;
        _1773 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1669 : (isnan(_1669) ? 0.0 : max(_1669, 0.0)));
        _1774 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1711 : (isnan(_1711) ? 0.0 : max(_1711, 0.0)));
        _1775 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1753 : (isnan(_1753) ? 0.0 : max(_1753, 0.0)));
    }
    else
    {
        _1761 = _1450;
        _1762 = _1450;
        _1763 = _1450;
        _1764 = _1450;
        _1765 = _1450;
        _1766 = _1450;
        _1767 = _1450;
        _1768 = _1450;
        _1769 = _1450;
        _1770 = _1450;
        _1771 = _1450;
        _1772 = _1450;
        _1773 = 0.0;
        _1774 = 0.0;
        _1775 = 0.0;
    }
    float _1785 = (cbModelParam._m0[1u].x * (_1773 - _1462)) + _1462;
    float _1786 = (cbModelParam._m0[1u].x * (_1774 - _1463)) + _1463;
    float _1787 = (cbModelParam._m0[1u].x * (_1775 - _1464)) + _1464;
    float _1808 = fma(_1787, cbSceneParam._m0[89u].z, fma(_1786, cbSceneParam._m0[89u].y, _1785 * cbSceneParam._m0[89u].x));
    float _1811 = fma(_1787, cbSceneParam._m0[90u].z, fma(_1786, cbSceneParam._m0[90u].y, _1785 * cbSceneParam._m0[90u].x));
    float _1814 = fma(_1787, cbSceneParam._m0[91u].z, fma(_1786, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1785));
    float _1829 = _1059 * 0.5;
    float _1830 = _1060 * 0.5;
    float _1831 = _1061 * 0.5;
    float _1832 = dot(vec4(_1829, _1830, _1831, 1.0), vec4(_1763, _1766, _1769, _1772));
    float _1835 = dot(vec4(_1829, _1830, _1831, 1.0), vec4(_1762, _1765, _1768, _1771));
    float _1838 = dot(vec4(_1829, _1830, _1831, 1.0), vec4(_1761, _1764, _1767, _1770));
    float _1872;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1845 = dot(vec4(_1829, _1830, _1831, 1.0), vec4(_1449, _1453, _1456, _1459));
        float _1849 = dot(vec4(_1829, _1830, _1831, 1.0), vec4(_1451, _1454, _1457, _1460));
        float _1853 = dot(vec4(_1829, _1830, _1831, 1.0), vec4(_1452, _1455, _1458, _1461));
        float _1860 = dot(vec4(cbModelParam._m0[39u]), vec4(_1829, _1830, _1831, 1.0));
        _1872 = dot(vec3(isnan(0.0) ? _1853 : (isnan(_1853) ? 0.0 : max(_1853, 0.0)), isnan(0.0) ? _1849 : (isnan(_1849) ? 0.0 : max(_1849, 0.0)), isnan(0.0) ? _1845 : (isnan(_1845) ? 0.0 : max(_1845, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1860) ? 0.0 : (isnan(0.0) ? _1860 : max(0.0, _1860))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1872 = 1.0;
    }
    float _1883;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1874 = dot(vec4(cbModelParam._m0[40u]), vec4(_1829, _1830, _1831, 1.0));
        _1883 = dot(vec3(isnan(0.0) ? _1832 : (isnan(_1832) ? 0.0 : max(_1832, 0.0)), isnan(0.0) ? _1835 : (isnan(_1835) ? 0.0 : max(_1835, 0.0)), isnan(0.0) ? _1838 : (isnan(_1838) ? 0.0 : max(_1838, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1874) ? 0.0 : (isnan(0.0) ? _1874 : max(0.0, _1874))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1883 = 1.0;
    }
    float _1887 = (_1883 * cbModelParam._m0[1u].x) + (_1872 * (1.0 - cbModelParam._m0[1u].x));
    float _1897 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _893);
    float _1898 = isnan(_1897) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1897 : min(cbModelParam._m0[25u].z, _1897));
    float _1978;
    float _1980;
    float _1982;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1945 = fma(_1120, cbModelParam._m0[13u].z, fma(_1116, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1112)) + cbModelParam._m0[13u].w;
        float _1949 = fma(_1120, cbModelParam._m0[14u].z, fma(_1116, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1112)) + cbModelParam._m0[14u].w;
        float _1953 = fma(_1120, cbModelParam._m0[15u].z, fma(_1116, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1112)) + cbModelParam._m0[15u].w;
        float _1956 = fma(_1061, cbModelParam._m0[13u].z, fma(_1060, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1059));
        float _1959 = fma(_1061, cbModelParam._m0[14u].z, fma(_1060, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1059));
        float _1962 = fma(_1061, cbModelParam._m0[15u].z, fma(_1060, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1059));
        float _1990;
        if (_1956 > 0.0)
        {
            _1990 = abs((1.0 - _1945) / _1956);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1956 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1945 + 1.0) / _1956);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1990 = frontier_phi_17_15_ladder;
        }
        float _2190;
        if (_1959 > 0.0)
        {
            _2190 = abs((1.0 - _1949) / _1959);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1959 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1949 + 1.0) / _1959);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2190 = frontier_phi_26_22_ladder;
        }
        float _2433;
        if (_1962 > 0.0)
        {
            _2433 = abs((1.0 - _1953) / _1962);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1962 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1953 + 1.0) / _1962);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2433 = frontier_phi_38_33_ladder;
        }
        float _2435 = isnan(_2190) ? _1990 : (isnan(_1990) ? _2190 : min(_1990, _2190));
        float _2436 = isnan(_2433) ? _2435 : (isnan(_2435) ? _2433 : min(_2435, _2433));
        float _2440 = (_2436 * _1956) + _1945;
        float _2441 = (_2436 * _1959) + _1949;
        float _2442 = (_2436 * _1962) + _1953;
        float _2443 = _2436 * 9.9999997473787516355514526367188e-05;
        float _2445 = (-1.0) - _2443;
        float _2447 = _2443 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2442 > _2447) || ((_2442 < _2445) || ((_2441 > _2447) || ((_2441 < _2445) || ((_2440 < _2445) || (_2440 > _2447))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2566 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2442, cbModelParam._m0[9u].z, fma(_2441, cbModelParam._m0[9u].y, _2440 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2442, cbModelParam._m0[10u].z, fma(_2441, cbModelParam._m0[10u].y, _2440 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2442, cbModelParam._m0[11u].z, fma(_2441, cbModelParam._m0[11u].y, _2440 * cbModelParam._m0[11u].x))), _1898);
            frontier_phi_16_38_ladder = _2566.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2566.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2566.x * cbModelParam._m0[1u].y;
        }
        _1978 = frontier_phi_16_38_ladder_2;
        _1980 = frontier_phi_16_38_ladder_1;
        _1982 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1966 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1059, _1060, _1061), _1898);
        _1978 = _1966.x * cbModelParam._m0[1u].y;
        _1980 = _1966.y * cbModelParam._m0[1u].y;
        _1982 = _1966.z * cbModelParam._m0[1u].y;
    }
    float _1986 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _893);
    float _1987 = isnan(_1986) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1986 : min(cbModelParam._m0[25u].w, _1986));
    float _2076;
    float _2078;
    float _2080;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2040 = fma(_1120, cbModelParam._m0[21u].z, fma(_1116, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1112)) + cbModelParam._m0[21u].w;
        float _2044 = fma(_1120, cbModelParam._m0[22u].z, fma(_1116, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1112)) + cbModelParam._m0[22u].w;
        float _2048 = fma(_1120, cbModelParam._m0[23u].z, fma(_1116, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1112)) + cbModelParam._m0[23u].w;
        float _2051 = fma(_1061, cbModelParam._m0[21u].z, fma(_1060, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1059));
        float _2054 = fma(_1061, cbModelParam._m0[22u].z, fma(_1060, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1059));
        float _2057 = fma(_1061, cbModelParam._m0[23u].z, fma(_1060, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1059));
        float _2195;
        if (_2051 > 0.0)
        {
            _2195 = abs((1.0 - _2040) / _2051);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_2051 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_2040 + 1.0) / _2051);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2195 = frontier_phi_28_24_ladder;
        }
        float _2460;
        if (_2054 > 0.0)
        {
            _2460 = abs((1.0 - _2044) / _2054);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_2054 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_2044 + 1.0) / _2054);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2460 = frontier_phi_40_35_ladder;
        }
        float _2665;
        if (_2057 > 0.0)
        {
            _2665 = abs((1.0 - _2048) / _2057);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_2057 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_2048 + 1.0) / _2057);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2665 = frontier_phi_49_46_ladder;
        }
        float _2667 = isnan(_2460) ? _2195 : (isnan(_2195) ? _2460 : min(_2195, _2460));
        float _2668 = isnan(_2665) ? _2667 : (isnan(_2667) ? _2665 : min(_2667, _2665));
        float _2672 = (_2668 * _2051) + _2040;
        float _2673 = (_2668 * _2054) + _2044;
        float _2674 = (_2668 * _2057) + _2048;
        float _2675 = _2668 * 9.9999997473787516355514526367188e-05;
        float _2676 = (-1.0) - _2675;
        float _2678 = _2675 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2674 > _2678) || ((_2674 < _2676) || ((_2673 > _2678) || ((_2673 < _2676) || ((_2672 < _2676) || (_2672 > _2678))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2873 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2674, cbModelParam._m0[17u].z, fma(_2673, cbModelParam._m0[17u].y, _2672 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2674, cbModelParam._m0[18u].z, fma(_2673, cbModelParam._m0[18u].y, _2672 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2674, cbModelParam._m0[19u].z, fma(_2673, cbModelParam._m0[19u].y, _2672 * cbModelParam._m0[19u].x))), _1987);
            frontier_phi_25_49_ladder = _2873.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2873.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2873.x * cbModelParam._m0[1u].z;
        }
        _2076 = frontier_phi_25_49_ladder_2;
        _2078 = frontier_phi_25_49_ladder_1;
        _2080 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _2060 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1059, _1060, _1061), _1987);
        _2076 = _2060.x * cbModelParam._m0[1u].z;
        _2078 = _2060.y * cbModelParam._m0[1u].z;
        _2080 = _2060.z * cbModelParam._m0[1u].z;
    }
    float _2092 = ((((1.0 - _1080) * ((_1067 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_1080 * _1067)) * _1051;
    float _2093 = _2092 * ((cbModelParam._m0[1u].w * (_2076 - _1978)) + _1978);
    float _2094 = _2092 * ((cbModelParam._m0[1u].w * (_2078 - _1980)) + _1980);
    float _2095 = _2092 * ((cbModelParam._m0[1u].w * (_2080 - _1982)) + _1982);
    float _2098 = fma(_2095, cbSceneParam._m0[89u].z, fma(_2094, cbSceneParam._m0[89u].y, _2093 * cbSceneParam._m0[89u].x));
    float _2101 = fma(_2095, cbSceneParam._m0[90u].z, fma(_2094, cbSceneParam._m0[90u].y, _2093 * cbSceneParam._m0[90u].x));
    float _2104 = fma(_2095, cbSceneParam._m0[91u].z, fma(_2094, cbSceneParam._m0[91u].y, _2093 * cbSceneParam._m0[91u].x));
    uvec4 _2114 = floatBitsToUint(cbInstanceData._m0[_281 + 5u]);
    uint _2116 = _2114.x * 14u;
    uint _2117 = _2116 + 13u;
    float _2124 = _1051 + (-1.0);
    float _2129 = (cbLight._m0[_2117].x * _2124) + 1.0;
    float _2130 = (cbLight._m0[_2117].y * _2124) + 1.0;
    float _2131 = (cbLight._m0[_2117].z * _2124) + 1.0;
    float _2132 = (cbLight._m0[_2117].w * _2124) + 1.0;
    uint _2133 = _2116 + 5u;
    float _2139 = isnan(1.0) ? _2130 : (isnan(_2130) ? 1.0 : min(_2130, 1.0));
    uint _2143 = _2116 + 4u;
    float _2149 = isnan(1.0) ? _2129 : (isnan(_2129) ? 1.0 : min(_2129, 1.0));
    uint _2153 = _2116 | 1u;
    float _2164 = dot(vec3(cbLight._m0[_2116].xyz), vec3(_890, _891, _892));
    float _2167 = dot(vec3(cbLight._m0[_2153].xyz), vec3(_890, _891, _892));
    float _4417 = isnan(0.0) ? _2164 : (isnan(_2164) ? 0.0 : max(_2164, 0.0));
    float _4428 = isnan(0.0) ? _2167 : (isnan(_2167) ? 0.0 : max(_2167, 0.0));
    float _2172 = (isnan(1.0) ? _4417 : (isnan(_4417) ? 1.0 : min(_4417, 1.0))) * 0.3183098733425140380859375;
    float _2174 = (isnan(1.0) ? _4428 : (isnan(_4428) ? 1.0 : min(_4428, 1.0))) * 0.3183098733425140380859375;
    float _2181 = ((cbLight._m0[_2133].x * _2139) * _2174) + ((cbLight._m0[_2143].x * _2149) * _2172);
    float _2182 = ((_2139 * cbLight._m0[_2133].y) * _2174) + ((_2149 * cbLight._m0[_2143].y) * _2172);
    float _2183 = ((_2139 * cbLight._m0[_2133].z) * _2174) + ((_2149 * cbLight._m0[_2143].z) * _2172);
    uvec4 _2187 = floatBitsToUint(cbLight._m0[_2116 + 12u]);
    bool _2189 = _2187.x == 0u;
    float _2200;
    float _2202;
    float _2204;
    if (_2189)
    {
        _2200 = _2181;
        _2202 = _2182;
        _2204 = _2183;
    }
    else
    {
        uint _2208 = _2116 + 6u;
        float _2224 = (dot(vec3(cbLight._m0[_2116 + 2u].xyz), vec3(_890, _891, _892)) * 0.5) + 0.5;
        float _2225 = _2224 * _2224;
        float _4439 = isnan(0.0) ? _2225 : (isnan(_2225) ? 0.0 : max(_2225, 0.0));
        float _2226 = isnan(1.0) ? _4439 : (isnan(_4439) ? 1.0 : min(_4439, 1.0));
        float _2227 = isnan(1.0) ? _2131 : (isnan(_2131) ? 1.0 : min(_2131, 1.0));
        _2200 = (((cbLight._m0[_2208].x * 0.3183098733425140380859375) * _2226) * _2227) + _2181;
        _2202 = (((cbLight._m0[_2208].y * 0.3183098733425140380859375) * _2226) * _2227) + _2182;
        _2204 = (((cbLight._m0[_2208].z * 0.3183098733425140380859375) * _2226) * _2227) + _2183;
    }
    bool _2207 = _2187.y == 0u;
    float _2245;
    float _2247;
    float _2249;
    if (_2207)
    {
        _2245 = _2200;
        _2247 = _2202;
        _2249 = _2204;
    }
    else
    {
        uint _2404 = _2116 + 7u;
        float _2420 = (dot(vec3(cbLight._m0[_2116 + 3u].xyz), vec3(_890, _891, _892)) * 0.5) + 0.5;
        float _2421 = _2420 * _2420;
        float _4455 = isnan(0.0) ? _2421 : (isnan(_2421) ? 0.0 : max(_2421, 0.0));
        float _2422 = isnan(1.0) ? _4455 : (isnan(_4455) ? 1.0 : min(_4455, 1.0));
        float _2423 = isnan(1.0) ? _2132 : (isnan(_2132) ? 1.0 : min(_2132, 1.0));
        _2245 = (((cbLight._m0[_2404].x * 0.3183098733425140380859375) * _2422) * _2423) + _2200;
        _2247 = (((cbLight._m0[_2404].y * 0.3183098733425140380859375) * _2422) * _2423) + _2202;
        _2249 = (((cbLight._m0[_2404].z * 0.3183098733425140380859375) * _2422) * _2423) + _2204;
    }
    uint _2252 = _2116 + 8u;
    float _2265 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2116].w)) * _893) * 0.949999988079071044921875);
    float _2266 = _2265 * _2265;
    float _2267 = cbLight._m0[_2116].x + _968;
    float _2268 = cbLight._m0[_2116].y + _969;
    float _2269 = cbLight._m0[_2116].z + _970;
    float _2273 = inversesqrt(dot(vec3(_2267, _2268, _2269), vec3(_2267, _2268, _2269)));
    float _2274 = _2273 * _2267;
    float _2275 = _2273 * _2268;
    float _2276 = _2273 * _2269;
    float _2277 = dot(vec3(_890, _891, _892), vec3(cbLight._m0[_2116].xyz));
    float _4471 = isnan(0.0) ? _2277 : (isnan(_2277) ? 0.0 : max(_2277, 0.0));
    float _2280 = isnan(1.0) ? _4471 : (isnan(_4471) ? 1.0 : min(_4471, 1.0));
    float _4482 = isnan(0.0) ? _1052 : (isnan(_1052) ? 0.0 : max(_1052, 0.0));
    float _2281 = isnan(1.0) ? _4482 : (isnan(_4482) ? 1.0 : min(_4482, 1.0));
    float _2282 = dot(vec3(_890, _891, _892), vec3(_2274, _2275, _2276));
    float _4493 = isnan(0.0) ? _2282 : (isnan(_2282) ? 0.0 : max(_2282, 0.0));
    float _2285 = isnan(1.0) ? _4493 : (isnan(_4493) ? 1.0 : min(_4493, 1.0));
    float _2286 = dot(vec3(cbLight._m0[_2116].xyz), vec3(_2274, _2275, _2276));
    float _4504 = isnan(0.0) ? _2286 : (isnan(_2286) ? 0.0 : max(_2286, 0.0));
    float _2290 = _2266 * _2266;
    float _2294 = ((_2285 * _2285) * (_2290 + (-1.0))) + 1.0;
    float _2305 = (exp2(log2(1.0 - (isnan(1.0) ? _4504 : (isnan(_4504) ? 1.0 : min(_4504, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2306 = 1.0 - _2266;
    float _2317 = (0.5 / (((_2281 * ((_2280 * _2306) + _2266)) + 9.9999999392252902907785028219223e-09) + (((_2281 * _2306) + _2266) * _2280))) * _2280;
    float _4515 = isnan(0.0) ? _2317 : (isnan(_2317) ? 0.0 : max(_2317, 0.0));
    float _2319 = (isnan(1.0) ? _4515 : (isnan(_4515) ? 1.0 : min(_4515, 1.0))) * (_2290 / ((_2294 * _2294) * 3.141590118408203125));
    uint _2330 = _2116 + 9u;
    float _2341 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2153].w)) * _893) * 0.949999988079071044921875);
    float _2342 = _2341 * _2341;
    float _2343 = cbLight._m0[_2153].x + _968;
    float _2344 = cbLight._m0[_2153].y + _969;
    float _2345 = cbLight._m0[_2153].z + _970;
    float _2349 = inversesqrt(dot(vec3(_2343, _2344, _2345), vec3(_2343, _2344, _2345)));
    float _2350 = _2349 * _2343;
    float _2351 = _2349 * _2344;
    float _2352 = _2349 * _2345;
    float _2353 = dot(vec3(_890, _891, _892), vec3(cbLight._m0[_2153].xyz));
    float _4526 = isnan(0.0) ? _2353 : (isnan(_2353) ? 0.0 : max(_2353, 0.0));
    float _2356 = isnan(1.0) ? _4526 : (isnan(_4526) ? 1.0 : min(_4526, 1.0));
    float _2357 = dot(vec3(_890, _891, _892), vec3(_2350, _2351, _2352));
    float _4537 = isnan(0.0) ? _2357 : (isnan(_2357) ? 0.0 : max(_2357, 0.0));
    float _2360 = isnan(1.0) ? _4537 : (isnan(_4537) ? 1.0 : min(_4537, 1.0));
    float _2361 = dot(vec3(cbLight._m0[_2153].xyz), vec3(_2350, _2351, _2352));
    float _4548 = isnan(0.0) ? _2361 : (isnan(_2361) ? 0.0 : max(_2361, 0.0));
    float _2365 = _2342 * _2342;
    float _2369 = ((_2360 * _2360) * (_2365 + (-1.0))) + 1.0;
    float _2378 = (exp2(log2(1.0 - (isnan(1.0) ? _4548 : (isnan(_4548) ? 1.0 : min(_4548, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2379 = 1.0 - _2342;
    float _2389 = (0.5 / (((_2281 * ((_2356 * _2379) + _2342)) + 9.9999999392252902907785028219223e-09) + (((_2281 * _2379) + _2342) * _2356))) * _2356;
    float _4559 = isnan(0.0) ? _2389 : (isnan(_2389) ? 0.0 : max(_2389, 0.0));
    float _2391 = (isnan(1.0) ? _4559 : (isnan(_4559) ? 1.0 : min(_4559, 1.0))) * (_2365 / ((_2369 * _2369) * 3.141590118408203125));
    float _2401 = (((_2378 * cbLight._m0[_2330].x) * _2391) * _2139) + (((_2305 * cbLight._m0[_2252].x) * _2319) * _2149);
    float _2402 = (((_2378 * cbLight._m0[_2330].y) * _2391) * _2139) + (((_2305 * cbLight._m0[_2252].y) * _2319) * _2149);
    float _2403 = (((_2378 * cbLight._m0[_2330].z) * _2391) * _2139) + (((_2305 * cbLight._m0[_2252].z) * _2319) * _2149);
    float _2465;
    float _2467;
    float _2469;
    if (_2189)
    {
        _2465 = _2401;
        _2467 = _2402;
        _2469 = _2403;
    }
    else
    {
        uint _2471 = _2116 + 2u;
        uint _2475 = _2116 + 10u;
        float _2489 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2471].w)) * _893) * 0.949999988079071044921875);
        float _2490 = _2489 * _2489;
        float _2491 = cbLight._m0[_2471].x + _968;
        float _2492 = cbLight._m0[_2471].y + _969;
        float _2493 = cbLight._m0[_2471].z + _970;
        float _2497 = inversesqrt(dot(vec3(_2491, _2492, _2493), vec3(_2491, _2492, _2493)));
        float _2498 = _2497 * _2491;
        float _2499 = _2497 * _2492;
        float _2500 = _2497 * _2493;
        float _2501 = dot(vec3(_890, _891, _892), vec3(cbLight._m0[_2471].xyz));
        float _4570 = isnan(0.0) ? _2501 : (isnan(_2501) ? 0.0 : max(_2501, 0.0));
        float _2504 = isnan(1.0) ? _4570 : (isnan(_4570) ? 1.0 : min(_4570, 1.0));
        float _2505 = dot(vec3(_890, _891, _892), vec3(_2498, _2499, _2500));
        float _4581 = isnan(0.0) ? _2505 : (isnan(_2505) ? 0.0 : max(_2505, 0.0));
        float _2508 = isnan(1.0) ? _4581 : (isnan(_4581) ? 1.0 : min(_4581, 1.0));
        float _2509 = dot(vec3(cbLight._m0[_2471].xyz), vec3(_2498, _2499, _2500));
        float _4592 = isnan(0.0) ? _2509 : (isnan(_2509) ? 0.0 : max(_2509, 0.0));
        float _2513 = _2490 * _2490;
        float _2517 = ((_2508 * _2508) * (_2513 + (-1.0))) + 1.0;
        float _2526 = (exp2(log2(1.0 - (isnan(1.0) ? _4592 : (isnan(_4592) ? 1.0 : min(_4592, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2527 = 1.0 - _2490;
        float _2537 = (0.5 / (((_2281 * ((_2504 * _2527) + _2490)) + 9.9999999392252902907785028219223e-09) + (((_2281 * _2527) + _2490) * _2504))) * _2504;
        float _4603 = isnan(0.0) ? _2537 : (isnan(_2537) ? 0.0 : max(_2537, 0.0));
        float _2539 = (isnan(1.0) ? _4603 : (isnan(_4603) ? 1.0 : min(_4603, 1.0))) * (_2513 / ((_2517 * _2517) * 3.141590118408203125));
        float _2540 = isnan(1.0) ? _2131 : (isnan(_2131) ? 1.0 : min(_2131, 1.0));
        _2465 = (((_2526 * cbLight._m0[_2475].x) * _2539) * _2540) + _2401;
        _2467 = (((_2526 * cbLight._m0[_2475].y) * _2539) * _2540) + _2402;
        _2469 = (((_2526 * cbLight._m0[_2475].z) * _2539) * _2540) + _2403;
    }
    float _2575;
    float _2577;
    float _2579;
    if (_2207)
    {
        _2575 = _2465;
        _2577 = _2467;
        _2579 = _2469;
    }
    else
    {
        uint _2586 = _2116 + 3u;
        uint _2590 = _2116 + 11u;
        float _2604 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2586].w)) * _893) * 0.949999988079071044921875);
        float _2605 = _2604 * _2604;
        float _2606 = cbLight._m0[_2586].x + _968;
        float _2607 = cbLight._m0[_2586].y + _969;
        float _2608 = cbLight._m0[_2586].z + _970;
        float _2612 = inversesqrt(dot(vec3(_2606, _2607, _2608), vec3(_2606, _2607, _2608)));
        float _2613 = _2612 * _2606;
        float _2614 = _2612 * _2607;
        float _2615 = _2612 * _2608;
        float _2616 = dot(vec3(_890, _891, _892), vec3(cbLight._m0[_2586].xyz));
        float _4619 = isnan(0.0) ? _2616 : (isnan(_2616) ? 0.0 : max(_2616, 0.0));
        float _2619 = isnan(1.0) ? _4619 : (isnan(_4619) ? 1.0 : min(_4619, 1.0));
        float _2620 = dot(vec3(_890, _891, _892), vec3(_2613, _2614, _2615));
        float _4630 = isnan(0.0) ? _2620 : (isnan(_2620) ? 0.0 : max(_2620, 0.0));
        float _2623 = isnan(1.0) ? _4630 : (isnan(_4630) ? 1.0 : min(_4630, 1.0));
        float _2624 = dot(vec3(cbLight._m0[_2586].xyz), vec3(_2613, _2614, _2615));
        float _4641 = isnan(0.0) ? _2624 : (isnan(_2624) ? 0.0 : max(_2624, 0.0));
        float _2628 = _2605 * _2605;
        float _2632 = ((_2623 * _2623) * (_2628 + (-1.0))) + 1.0;
        float _2641 = (exp2(log2(1.0 - (isnan(1.0) ? _4641 : (isnan(_4641) ? 1.0 : min(_4641, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2642 = 1.0 - _2605;
        float _2652 = (0.5 / (((_2281 * ((_2619 * _2642) + _2605)) + 9.9999999392252902907785028219223e-09) + (((_2281 * _2642) + _2605) * _2619))) * _2619;
        float _4652 = isnan(0.0) ? _2652 : (isnan(_2652) ? 0.0 : max(_2652, 0.0));
        float _2654 = (isnan(1.0) ? _4652 : (isnan(_4652) ? 1.0 : min(_4652, 1.0))) * (_2628 / ((_2632 * _2632) * 3.141590118408203125));
        float _2655 = isnan(1.0) ? _2132 : (isnan(_2132) ? 1.0 : min(_2132, 1.0));
        _2575 = (((_2641 * cbLight._m0[_2590].x) * _2654) * _2655) + _2465;
        _2577 = (((_2641 * cbLight._m0[_2590].y) * _2654) * _2655) + _2467;
        _2579 = (((_2641 * cbLight._m0[_2590].z) * _2654) * _2655) + _2469;
    }
    float _2790;
    float _2792;
    float _2794;
    float _2796;
    float _2798;
    float _2800;
    if (_2114.y == 0u)
    {
        float _2730 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2731 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2730;
        float _2732 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2730;
        float _2733 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2730;
        uvec4 _2745 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2746 = _2745.x;
        uint _2757 = uint((float(_2745.y) * floor(float(uint(cbSceneParam._m0[85u].y * _989) / _2746))) + floor(float(uint(cbSceneParam._m0[85u].x * _988) / _2746)));
        float _2767 = (log2(_2733 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2768 = isnan(0.0) ? _2767 : (isnan(_2767) ? 0.0 : max(_2767, 0.0));
        uint _2771 = uint(isnan(14.0) ? _2768 : (isnan(_2768) ? 14.0 : min(_2768, 14.0)));
        uvec4 _2776 = texelFetch(g_lightClusterGridBuffer, int(((_2771 << 2u) + (_2757 << 6u)) >> 2u));
        uint _2777 = _2776.x;
        uint _2778 = _2745.z;
        float _2878;
        float _2880;
        float _2882;
        float _2884;
        float _2886;
        float _2888;
        if (((((1u << ((_2778 >> 4u) & 15u)) + 4294967295u) & _2777) == 0u) || ((_2778 & 240u) == 0u))
        {
            _2878 = 0.0;
            _2880 = 0.0;
            _2882 = 0.0;
            _2884 = 0.0;
            _2886 = 0.0;
            _2888 = 0.0;
        }
        else
        {
            float _2879;
            float _2881;
            float _2883;
            float _2885;
            float _2887;
            float _2889;
            float _3030 = 0.0;
            float _3031 = 0.0;
            float _3032 = 0.0;
            float _3033 = 0.0;
            float _3034 = 0.0;
            float _3035 = 0.0;
            uint _3036 = 0u;
            uint _3045;
            bool _3046;
            for (;;)
            {
                _3045 = texelFetch(g_lightClassification, int((((_2771 << 5u) + (_2757 << 9u)) + (_3036 << 2u)) >> 2u)).x;
                _3046 = _3045 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3046)
                {
                    frontier_phi_66_pred = _3030;
                    frontier_phi_66_pred_1 = _3035;
                    frontier_phi_66_pred_2 = _3034;
                    frontier_phi_66_pred_3 = _3033;
                    frontier_phi_66_pred_4 = _3032;
                    frontier_phi_66_pred_5 = _3031;
                }
                else
                {
                    float _3175;
                    float _3176;
                    float _3177;
                    float _3178;
                    float _3179;
                    float _3180;
                    uint _3181;
                    _3175 = _3030;
                    _3176 = _3031;
                    _3177 = _3032;
                    _3178 = _3033;
                    _3179 = _3034;
                    _3180 = _3035;
                    _3181 = _3045;
                    float _3102;
                    float _3103;
                    float _3104;
                    float _3105;
                    float _3106;
                    float _3107;
                    for (;;)
                    {
                        uint _3185 = uint(findLSB(_3181)) + (_3036 << 5u);
                        uint _3182 = (_3181 + 4294967295u) & _3181;
                        uint _3187 = _3185 * 48u;
                        vec4 _3201 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3187)).x, texelFetch(g_PointLightRenderingBuffer, int(_3187 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3187 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3187 + 3u)).x));
                        uint _3207 = (_3185 * 48u) + 4u;
                        vec4 _3220 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3207)).x, texelFetch(g_PointLightRenderingBuffer, int(_3207 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3207 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3207 + 3u)).x));
                        uint _3226 = (_3185 * 48u) + 8u;
                        vec3 _3237 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3226)).x, texelFetch(g_PointLightRenderingBuffer, int(_3226 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3226 + 2u)).x));
                        float _3241 = _3201.x - _2731;
                        float _3242 = _3201.y - _2732;
                        float _3243 = _3201.z - _2733;
                        float _3244 = dot(vec3(_3241, _3242, _3243), vec3(_3241, _3242, _3243));
                        float _3247 = inversesqrt(_3244);
                        float _3248 = _3247 * _3241;
                        float _3249 = _3247 * _3242;
                        float _3250 = _3247 * _3243;
                        float _3251 = dot(vec3(_1007, _1010, _1013), vec3(_3248, _3249, _3250));
                        float _3256 = 1.0 - (_3244 * _3201.w);
                        float _4678 = isnan(0.0) ? _3256 : (isnan(_3256) ? 0.0 : max(_3256, 0.0));
                        float _3257 = isnan(1.0) ? _4678 : (isnan(_4678) ? 1.0 : min(_4678, 1.0));
                        float _3258 = sqrt(_3244) * _3220.w;
                        float _3261 = 1.39999997615814208984375 / (_3258 + 1.39999997615814208984375);
                        float _3262 = _3261 * _3261;
                        float _3265 = ((1.0 - _3262) * _3251) + _3262;
                        float _3268 = _3258 * _3258;
                        float _3272 = ((isnan(0.0) ? _3265 : (isnan(_3265) ? 0.0 : max(_3265, 0.0))) * _3257) / ((_3268 * 0.699999988079071044921875) + 1.0);
                        float _3276 = (-0.0) - _2731;
                        float _3277 = (-0.0) - _2732;
                        float _3278 = (-0.0) - _2733;
                        float _3282 = inversesqrt(dot(vec3(_3276, _3277, _3278), vec3(_3276, _3277, _3278)));
                        float _3283 = _3282 * _3276;
                        float _3284 = _3282 * _3277;
                        float _3285 = _3282 * _3278;
                        float _3293 = exp2(log2(1.0 / ((_3268 * 3.5) + 5.0)) * 0.25);
                        float _3294 = 1.0 - _1067;
                        float _3301 = sqrt(1.0 - ((1.0 - (_3294 * _3294)) * (1.0 - (_3293 * _3293))));
                        float _3302 = _3301 * _3301;
                        float _3303 = _3302 * _3302;
                        float _3304 = _3283 + _3248;
                        float _3305 = _3284 + _3249;
                        float _3306 = _3285 + _3250;
                        float _3310 = inversesqrt(dot(vec3(_3304, _3305, _3306), vec3(_3304, _3305, _3306)));
                        float _3314 = dot(vec3(_1007, _1010, _1013), vec3(_3283, _3284, _3285));
                        float _4694 = isnan(0.0) ? _3314 : (isnan(_3314) ? 0.0 : max(_3314, 0.0));
                        float _3317 = isnan(1.0) ? _4694 : (isnan(_4694) ? 1.0 : min(_4694, 1.0));
                        float _3318 = dot(vec3(_1007, _1010, _1013), vec3(_3310 * _3304, _3310 * _3305, _3310 * _3306));
                        float _4705 = isnan(0.0) ? _3318 : (isnan(_3318) ? 0.0 : max(_3318, 0.0));
                        float _3321 = isnan(1.0) ? _4705 : (isnan(_4705) ? 1.0 : min(_4705, 1.0));
                        float _3325 = ((_3321 * _3321) * (_3303 + (-1.0))) + 1.0;
                        float _3326 = _3261 * _3302;
                        float _3327 = _3326 * _3326;
                        float _3330 = ((1.0 - _3327) * _3251) + _3327;
                        float _4716 = isnan(0.0) ? _3330 : (isnan(_3330) ? 0.0 : max(_3330, 0.0));
                        float _3331 = isnan(1.0) ? _4716 : (isnan(_4716) ? 1.0 : min(_4716, 1.0));
                        float _3332 = 1.0 - _3302;
                        float _3342 = (0.5 / (((_3331 * ((_3317 * _3332) + _3302)) + 9.9999999392252902907785028219223e-09) + (((_3331 * _3332) + _3302) * _3317))) * _3331;
                        float _4727 = isnan(0.0) ? _3342 : (isnan(_3342) ? 0.0 : max(_3342, 0.0));
                        float _3353 = (((_3303 * 3.1415927410125732421875) * (isnan(1.0) ? _4727 : (isnan(_4727) ? 1.0 : min(_4727, 1.0)))) / ((_3325 * _3325) * ((_3268 * 2.1991131305694580078125) + 3.141590118408203125))) * _3257;
                        _3105 = (_3272 * _3220.x) + _3178;
                        _3106 = (_3272 * _3220.y) + _3179;
                        _3107 = (_3272 * _3220.z) + _3180;
                        _3102 = (_3353 * _3237.x) + _3175;
                        _3103 = (_3353 * _3237.y) + _3176;
                        _3104 = (_3353 * _3237.z) + _3177;
                        if (_3182 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3175 = _3102;
                            _3176 = _3103;
                            _3177 = _3104;
                            _3178 = _3105;
                            _3179 = _3106;
                            _3180 = _3107;
                            _3181 = _3182;
                        }
                    }
                    frontier_phi_66_pred = _3102;
                    frontier_phi_66_pred_1 = _3107;
                    frontier_phi_66_pred_2 = _3106;
                    frontier_phi_66_pred_3 = _3105;
                    frontier_phi_66_pred_4 = _3104;
                    frontier_phi_66_pred_5 = _3103;
                }
                _2879 = frontier_phi_66_pred;
                _2889 = frontier_phi_66_pred_1;
                _2887 = frontier_phi_66_pred_2;
                _2885 = frontier_phi_66_pred_3;
                _2883 = frontier_phi_66_pred_4;
                _2881 = frontier_phi_66_pred_5;
                uint _3037 = _3036 + 1u;
                if (_3037 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3030 = _2879;
                    _3031 = _2881;
                    _3032 = _2883;
                    _3033 = _2885;
                    _3034 = _2887;
                    _3035 = _2889;
                    _3036 = _3037;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2878 = _2879;
            _2880 = _2881;
            _2882 = _2883;
            _2884 = _2885;
            _2886 = _2887;
            _2888 = _2889;
        }
        uvec4 _2892 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2893 = _2892.z;
        uint _2895 = (_2893 >> 8u) & 15u;
        float _2998;
        float _3000;
        float _3002;
        float _3004;
        float _3006;
        float _3008;
        if (((4294967295u << _2895) & _2777) == 0u)
        {
            _2998 = _2878;
            _3000 = _2880;
            _3002 = _2882;
            _3004 = _2884;
            _3006 = _2886;
            _3008 = _2888;
        }
        else
        {
            float _3023 = inversesqrt(dot(vec3(_2731, _2732, _2733), vec3(_2731, _2732, _2733)));
            float _3024 = _3023 * _2731;
            float _3025 = _3023 * _2732;
            float _3026 = _3023 * _2733;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2895 < ((_2893 >> 12u) & 15u))
            {
                float _2999;
                float _3001;
                float _3003;
                float _3005;
                float _3007;
                float _3009;
                float _3158 = _2878;
                float _3159 = _2880;
                float _3160 = _2882;
                float _3161 = _2884;
                float _3162 = _2886;
                float _3163 = _2888;
                uint _3164 = _2895;
                uint _3173;
                bool _3174;
                for (;;)
                {
                    _3173 = texelFetch(g_lightClassification, int((((_2771 << 5u) + (_2757 << 9u)) + (_3164 << 2u)) >> 2u)).x;
                    _3174 = _3173 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_3174)
                    {
                        frontier_phi_77_pred = _3163;
                        frontier_phi_77_pred_1 = _3162;
                        frontier_phi_77_pred_2 = _3161;
                        frontier_phi_77_pred_3 = _3160;
                        frontier_phi_77_pred_4 = _3159;
                        frontier_phi_77_pred_5 = _3158;
                    }
                    else
                    {
                        float _3367;
                        float _3368;
                        float _3369;
                        float _3370;
                        float _3371;
                        float _3372;
                        float _3660;
                        float _3661;
                        float _3662;
                        float _3663;
                        float _3664;
                        float _3665;
                        float _3380 = _3158;
                        float _3381 = _3159;
                        float _3382 = _3160;
                        float _3383 = _3161;
                        float _3384 = _3162;
                        float _3385 = _3163;
                        uint _3386 = _3173;
                        uint _3387;
                        vec4 _3412;
                        float _3413;
                        vec4 _3428;
                        vec3 _3440;
                        vec4 _3455;
                        vec4 _3470;
                        float _3516;
                        bool _3517;
                        for (;;)
                        {
                            uint _3397 = ((_3164 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3386));
                            _3387 = (_3386 + 4294967295u) & _3386;
                            uint _3399 = _3397 * 40u;
                            _3412 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3399)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3399 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3399 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3399 + 3u)).x));
                            _3413 = _3412.w;
                            uint _3415 = (_3397 * 40u) + 4u;
                            _3428 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3415)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3415 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3415 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3415 + 3u)).x));
                            uint _3430 = (_3397 * 40u) + 8u;
                            _3440 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3430)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3430 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3430 + 2u)).x));
                            uint _3442 = (_3397 * 40u) + 16u;
                            _3455 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3442)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3442 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3442 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3442 + 3u)).x));
                            uint _3457 = (_3397 * 40u) + 20u;
                            _3470 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3457)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3457 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3457 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3457 + 3u)).x));
                            uint _3472 = (_3397 * 40u) + 24u;
                            vec4 _3485 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3472)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3472 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3472 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3472 + 3u)).x));
                            uint _3491 = (_3397 * 40u) + 28u;
                            vec4 _3504 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3491)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3491 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3491 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3491 + 3u)).x));
                            _3516 = fma(_2733, _3504.z, fma(_2732, _3504.y, _3504.x * _2731)) + _3504.w;
                            _3517 = !((fma(_2733, _3485.z, fma(_2732, _3485.y, _3485.x * _2731)) + _3485.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3517)
                            {
                                float _3544 = _3412.x - _2731;
                                float _3545 = _3412.y - _2732;
                                float _3546 = _3412.z - _2733;
                                float _3547 = dot(vec3(_3544, _3545, _3546), vec3(_3544, _3545, _3546));
                                float _3550 = inversesqrt(_3547);
                                float _3551 = _3550 * _3544;
                                float _3552 = _3550 * _3545;
                                float _3553 = _3550 * _3546;
                                float _3557 = 1.0 - (_3547 / (_3413 * _3413));
                                float _4738 = isnan(0.0) ? _3557 : (isnan(_3557) ? 0.0 : max(_3557, 0.0));
                                float _3558 = isnan(1.0) ? _4738 : (isnan(_4738) ? 1.0 : min(_4738, 1.0));
                                float _3562 = sqrt(_3547) * _3428.w;
                                float _3564 = 1.39999997615814208984375 / (_3562 + 1.39999997615814208984375);
                                float _3565 = _3564 * _3564;
                                float _3568 = ((1.0 - _3565) * dot(vec3(_3551, _3552, _3553), vec3(_1007, _1010, _1013))) + _3565;
                                float _3571 = _3562 * _3562;
                                float _3575 = (fma(_2733, _3455.z, fma(_2732, _3455.y, _3455.x * _2731)) + _3455.w) / _3516;
                                float _3576 = (fma(_2733, _3470.z, fma(_2732, _3470.y, _3470.x * _2731)) + _3470.w) / _3516;
                                float _3580 = 1.0 - dot(vec2(_3575, _3576), vec2(_3575, _3576));
                                float _4754 = isnan(0.0) ? _3580 : (isnan(_3580) ? 0.0 : max(_3580, 0.0));
                                float _3581 = isnan(1.0) ? _4754 : (isnan(_4754) ? 1.0 : min(_4754, 1.0));
                                float _3582 = _3581 * (((isnan(0.0) ? _3568 : (isnan(_3568) ? 0.0 : max(_3568, 0.0))) * _3558) / ((_3571 * 0.699999988079071044921875) + 1.0));
                                float _3594 = exp2(log2(1.0 / ((_3571 * 3.5) + 5.0)) * 0.25);
                                float _3595 = 1.0 - _1067;
                                float _3602 = sqrt(1.0 - ((1.0 - (_3595 * _3595)) * (1.0 - (_3594 * _3594))));
                                float _3603 = _3602 * _3602;
                                float _3604 = _3603 * _3603;
                                float _3605 = _3551 - _3024;
                                float _3606 = _3552 - _3025;
                                float _3607 = _3553 - _3026;
                                float _3611 = inversesqrt(dot(vec3(_3605, _3606, _3607), vec3(_3605, _3606, _3607)));
                                float _3615 = dot(vec3(_1007, _1010, _1013), vec3((-0.0) - _3024, (-0.0) - _3025, (-0.0) - _3026));
                                float _4765 = isnan(0.0) ? _3615 : (isnan(_3615) ? 0.0 : max(_3615, 0.0));
                                float _3618 = isnan(1.0) ? _4765 : (isnan(_4765) ? 1.0 : min(_4765, 1.0));
                                float _3619 = dot(vec3(_1007, _1010, _1013), vec3(_3611 * _3605, _3611 * _3606, _3611 * _3607));
                                float _4776 = isnan(0.0) ? _3619 : (isnan(_3619) ? 0.0 : max(_3619, 0.0));
                                float _3622 = isnan(1.0) ? _4776 : (isnan(_4776) ? 1.0 : min(_4776, 1.0));
                                float _3626 = ((_3622 * _3622) * (_3604 + (-1.0))) + 1.0;
                                float _3627 = _3564 * _3603;
                                float _3628 = _3627 * _3627;
                                float _3634 = ((1.0 - _3628) * dot(vec3(_1007, _1010, _1013), vec3(_3551, _3552, _3553))) + _3628;
                                float _4787 = isnan(0.0) ? _3634 : (isnan(_3634) ? 0.0 : max(_3634, 0.0));
                                float _3635 = isnan(1.0) ? _4787 : (isnan(_4787) ? 1.0 : min(_4787, 1.0));
                                float _3636 = 1.0 - _3603;
                                float _3646 = (0.5 / (((_3635 * ((_3618 * _3636) + _3603)) + 9.9999999392252902907785028219223e-09) + (((_3635 * _3636) + _3603) * _3618))) * _3635;
                                float _4798 = isnan(0.0) ? _3646 : (isnan(_3646) ? 0.0 : max(_3646, 0.0));
                                float _3656 = (_3581 * _3558) * (((_3604 * 3.1415927410125732421875) * (isnan(1.0) ? _4798 : (isnan(_4798) ? 1.0 : min(_4798, 1.0)))) / ((_3626 * _3626) * ((_3571 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3582 * _3428.y;
                                frontier_phi_83_pred_1 = _3582 * _3428.x;
                                frontier_phi_83_pred_2 = _3656 * _3440.z;
                                frontier_phi_83_pred_3 = _3656 * _3440.y;
                                frontier_phi_83_pred_4 = _3656 * _3440.x;
                                frontier_phi_83_pred_5 = _3582 * _3428.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3664 = frontier_phi_83_pred;
                            _3663 = frontier_phi_83_pred_1;
                            _3662 = frontier_phi_83_pred_2;
                            _3661 = frontier_phi_83_pred_3;
                            _3660 = frontier_phi_83_pred_4;
                            _3665 = frontier_phi_83_pred_5;
                            _3370 = _3663 + _3383;
                            _3371 = _3664 + _3384;
                            _3372 = _3665 + _3385;
                            _3367 = _3660 + _3380;
                            _3368 = _3661 + _3381;
                            _3369 = _3662 + _3382;
                            if (_3387 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3380 = _3367;
                                _3381 = _3368;
                                _3382 = _3369;
                                _3383 = _3370;
                                _3384 = _3371;
                                _3385 = _3372;
                                _3386 = _3387;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3372;
                        frontier_phi_77_pred_1 = _3371;
                        frontier_phi_77_pred_2 = _3370;
                        frontier_phi_77_pred_3 = _3369;
                        frontier_phi_77_pred_4 = _3368;
                        frontier_phi_77_pred_5 = _3367;
                    }
                    _3009 = frontier_phi_77_pred;
                    _3007 = frontier_phi_77_pred_1;
                    _3005 = frontier_phi_77_pred_2;
                    _3003 = frontier_phi_77_pred_3;
                    _3001 = frontier_phi_77_pred_4;
                    _2999 = frontier_phi_77_pred_5;
                    uint _3165 = _3164 + 1u;
                    if (_3165 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3158 = _2999;
                        _3159 = _3001;
                        _3160 = _3003;
                        _3161 = _3005;
                        _3162 = _3007;
                        _3163 = _3009;
                        _3164 = _3165;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _3003;
                frontier_phi_58_59_ladder_1 = _3009;
                frontier_phi_58_59_ladder_2 = _3007;
                frontier_phi_58_59_ladder_3 = _3005;
                frontier_phi_58_59_ladder_4 = _3001;
                frontier_phi_58_59_ladder_5 = _2999;
            }
            else
            {
                frontier_phi_58_59_ladder = _2882;
                frontier_phi_58_59_ladder_1 = _2888;
                frontier_phi_58_59_ladder_2 = _2886;
                frontier_phi_58_59_ladder_3 = _2884;
                frontier_phi_58_59_ladder_4 = _2880;
                frontier_phi_58_59_ladder_5 = _2878;
            }
            _2998 = frontier_phi_58_59_ladder_5;
            _3000 = frontier_phi_58_59_ladder_4;
            _3002 = frontier_phi_58_59_ladder;
            _3004 = frontier_phi_58_59_ladder_3;
            _3006 = frontier_phi_58_59_ladder_2;
            _3008 = frontier_phi_58_59_ladder_1;
        }
        float _3013 = isnan(1.0) ? _1051 : (isnan(_1051) ? 1.0 : min(_1051, 1.0));
        _2790 = (_3013 * _3004) + _2245;
        _2792 = (_3013 * _3006) + _2247;
        _2794 = (_3013 * _3008) + _2249;
        _2796 = ((_2998 * 0.039999999105930328369140625) * _3013) + _2575;
        _2798 = ((_3000 * 0.039999999105930328369140625) * _3013) + _2577;
        _2800 = ((_3002 * 0.039999999105930328369140625) * _3013) + _2579;
    }
    else
    {
        _2790 = _2245;
        _2792 = _2247;
        _2794 = _2249;
        _2796 = _2575;
        _2798 = _2577;
        _2800 = _2579;
    }
    float _4814 = isnan(0.0) ? _1036 : (isnan(_1036) ? 0.0 : max(_1036, 0.0));
    float _4825 = isnan(0.0) ? _1037 : (isnan(_1037) ? 0.0 : max(_1037, 0.0));
    float _4836 = isnan(0.0) ? _1038 : (isnan(_1038) ? 0.0 : max(_1038, 0.0));
    float _2817 = ((isnan(1.0) ? _4814 : (isnan(_4814) ? 1.0 : min(_4814, 1.0))) * (_2790 + ((isnan(0.0) ? _1808 : (isnan(_1808) ? 0.0 : max(_1808, 0.0))) * _1051))) + ((_2796 + ((isnan(0.0) ? _2098 : (isnan(_2098) ? 0.0 : max(_2098, 0.0))) * _1887)) * cbPerFrame._m0[3u].x);
    float _2818 = ((isnan(1.0) ? _4825 : (isnan(_4825) ? 1.0 : min(_4825, 1.0))) * (_2792 + ((isnan(0.0) ? _1811 : (isnan(_1811) ? 0.0 : max(_1811, 0.0))) * _1051))) + ((_2798 + ((isnan(0.0) ? _2101 : (isnan(_2101) ? 0.0 : max(_2101, 0.0))) * _1887)) * cbPerFrame._m0[3u].x);
    float _2819 = ((isnan(1.0) ? _4836 : (isnan(_4836) ? 1.0 : min(_4836, 1.0))) * (_2794 + ((isnan(0.0) ? _1814 : (isnan(_1814) ? 0.0 : max(_1814, 0.0))) * _1051))) + ((_2800 + ((isnan(0.0) ? _2104 : (isnan(_2104) ? 0.0 : max(_2104, 0.0))) * _1887)) * cbPerFrame._m0[3u].x);
    uint _2820 = _281 + 6u;
    float _2828 = _988 / cbSceneParam._m0[86u].x;
    float _2829 = _989 / cbSceneParam._m0[86u].y;
    vec4 _2843 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2828, _2829, (log2((isnan(cbSceneParam._m0[77u].w) ? _911 : (isnan(_911) ? cbSceneParam._m0[77u].w : min(_911, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2845 = _2843.x;
    float _2846 = _2843.y;
    float _2847 = _2843.z;
    float _2848 = _2843.w;
    float _2940;
    float _2942;
    float _2944;
    float _2946;
    if (_911 > cbSceneParam._m0[78u].w)
    {
        float _2903 = isnan(_911) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _911 : min(cbSceneParam._m0[80u].w, _911));
        float _2904 = _2903 / _911;
        float _2915 = _2904 * _961;
        float _2916 = _962 * _2904;
        float _2917 = (-0.0) - _2916;
        float _2918 = _2904 * _963;
        float _2920 = (cbSceneParam._m0[77u].w * _2917) / _2903;
        float _2921 = _2920 + cbSceneParam._m0[79u].w;
        float _2922 = cbSceneParam._m0[79u].w - _2916;
        float _2928 = sqrt(((_2915 * _2915) + (_2916 * _2916)) + (_2918 * _2918));
        float _2931 = (1.0 - (cbSceneParam._m0[77u].w / _2903)) * _2928;
        float _2936 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2938 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3115;
        if (abs((_2917 - _2920) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3115 = ((((_2921 > 0.0) ? exp2(_2936 * _2921) : (2.0 - exp2(_2938 * _2921))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2931;
        }
        else
        {
            float _3059 = 1.0 / cbSceneParam._m0[80u].x;
            float _3060 = isnan(_2922) ? _2921 : (isnan(_2921) ? _2922 : max(_2921, _2922));
            float _3061 = isnan(_2922) ? _2921 : (isnan(_2921) ? _2922 : min(_2921, _2922));
            float _3070 = isnan(0.0) ? _3060 : (isnan(_3060) ? 0.0 : min(_3060, 0.0));
            float _3071 = isnan(0.0) ? _3061 : (isnan(_3061) ? 0.0 : min(_3061, 0.0));
            _3115 = ((abs(_2928 / _2917) * cbSceneParam._m0[80u].y) * ((((_3070 - _3071) * 2.0) - ((exp2(_2936 * (isnan(0.0) ? _3060 : (isnan(_3060) ? 0.0 : max(_3060, 0.0)))) - exp2(_2936 * (isnan(0.0) ? _3061 : (isnan(_3061) ? 0.0 : max(_3061, 0.0))))) * _3059)) - ((exp2(_2938 * _3070) - exp2(_2938 * _3071)) * _3059))) + (_2931 * cbSceneParam._m0[80u].z);
        }
        vec4 _3117 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2828, _2829, 1.0), 0.0);
        float _3126 = exp2((_3115 * (-1.44269502162933349609375)) * (1.0 - _3117.w));
        float _3127 = log2(_3126);
        float _3143 = log2(_2848);
        _2940 = (exp2(_3143 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3127 * cbSceneParam._m0[78u].x)) * _3117.x) / cbSceneParam._m0[78u].x)) + _2845;
        _2942 = (exp2(_3143 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3127 * cbSceneParam._m0[78u].y)) * _3117.y) / cbSceneParam._m0[78u].y)) + _2846;
        _2944 = (exp2(_3143 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3127 * cbSceneParam._m0[78u].z)) * _3117.z) / cbSceneParam._m0[78u].z)) + _2847;
        _2946 = _3126 * _2848;
    }
    else
    {
        _2940 = _2845;
        _2942 = _2846;
        _2944 = _2847;
        _2946 = _2848;
    }
    bool _3153;
    vec4 _2956;
    vec4 _2978;
    float _2980;
    float _2984;
    float _2985;
    float _2986;
    float _2987;
    bool _2997;
    for (;;)
    {
        _2956 = cbMatDynParam._m0[0u];
        float _2958 = roundEven(_2956.y);
        bool _2959 = _2958 == 3.0;
        float _2960 = log2(_2946);
        float _2967 = exp2(_2960 * cbSceneParam._m0[78u].x) * _2817;
        float _2968 = exp2(_2960 * cbSceneParam._m0[78u].y) * _2818;
        float _2969 = exp2(_2960 * cbSceneParam._m0[78u].z) * _2819;
        float _2976 = _977 + (-0.5);
        _2978 = cbMtdParam._m0[1u];
        _2980 = _2978.y * _2976;
        float _2983 = (_2958 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2984 = _2983 * (_2959 ? _2967 : (_2967 + (cbSceneParam._m0[72u].w * _2940)));
        _2985 = _2983 * (_2959 ? _2968 : (_2968 + (cbSceneParam._m0[72u].w * _2942)));
        _2986 = _2983 * (_2959 ? _2969 : (_2969 + (cbSceneParam._m0[72u].w * _2944)));
        _2987 = _2976 * 0.999000012874603271484375;
        _2997 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2997)
        {
            if ((cbInstanceData._m0[_281 + 7u].x + _2987) < 0.5)
            {
                _3153 = true;
                break;
            }
        }
        uint _3094 = _1026 + uint(_2956.w);
        if ((cbInstanceData._m0[_3094].w < 1.0) && ((cbInstanceData._m0[_3094].w + _2987) < 0.5))
        {
            _3153 = true;
            break;
        }
        if ((_2980 + 1.0) < _2978.x)
        {
            _3153 = true;
            break;
        }
        _3153 = false;
        break;
    }
    float _3358;
    if (_3153)
    {
        discard_state = true;
        _3358 = 0.0;
    }
    else
    {
        _3358 = cbInstanceData._m0[_2820].w;
    }
    SV_Target.x = _2984;
    SV_Target.y = _2985;
    SV_Target.z = _2986;
    SV_Target.w = _3358;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2820].w;
    discard_exit();
}


