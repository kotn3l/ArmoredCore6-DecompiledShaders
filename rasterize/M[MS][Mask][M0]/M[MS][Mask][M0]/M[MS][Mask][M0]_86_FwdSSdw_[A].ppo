#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 14) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_29;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_10;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_6;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1402;
float _3783;
float _3784;
float _3785;
float _3786;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _231 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _232 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _233 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _239 = inversesqrt(dot(vec3(_231, _232, _233), vec3(_231, _232, _233)));
    float _246 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _253 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _259 = uint(roundEven(NORMAL.w)) * 13u;
    uint _264 = _259 + 1u;
    uint _268 = _259 + 2u;
    float _277 = sqrt(((cbInstanceData._m0[_264].x * cbInstanceData._m0[_264].x) + (cbInstanceData._m0[_259].x * cbInstanceData._m0[_259].x)) + (cbInstanceData._m0[_268].x * cbInstanceData._m0[_268].x));
    float _278 = _277 * TEXCOORD.z;
    float _279 = _277 * TEXCOORD.w;
    vec4 _299 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _305 = _299.x * cbMtdParam._m0[11u].x;
    float _306 = _299.y * cbMtdParam._m0[11u].y;
    float _307 = _299.z * cbMtdParam._m0[11u].z;
    vec4 _326 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _278) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _279) + cbTextureTilingScale._m0[5u].w));
    vec4 _345 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _382 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _384 = _382.x;
    float _396 = dot(vec4(_384, _382.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _413 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _345.x) * 2.0) - ((((_384 - _396) * cbMtdParam._m0[24u].z) + _396) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3795 = isnan(0.0) ? _413 : (isnan(_413) ? 0.0 : max(_413, 0.0));
    float _414 = isnan(1.0) ? _3795 : (isnan(_3795) ? 1.0 : min(_3795, 1.0));
    float _421 = (_414 * ((_326.x * cbMtdParam._m0[12u].x) - _305)) + _305;
    float _422 = (_414 * ((_326.y * cbMtdParam._m0[12u].y) - _306)) + _306;
    float _423 = (_414 * ((_326.z * cbMtdParam._m0[12u].z) - _307)) + _307;
    vec4 _440 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _278) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _279) + cbTextureTilingScale._m0[3u].w));
    vec4 _460 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _462 = _460.x;
    float _472 = dot(vec4(_462, _460.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _486 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _345.y) * 2.0) - ((((_462 - _472) * cbMtdParam._m0[24u].z) + _472) * cbMtdParam._m0[20u].w))) + 1.0;
    float _3806 = isnan(0.0) ? _486 : (isnan(_486) ? 0.0 : max(_486, 0.0));
    float _487 = isnan(1.0) ? _3806 : (isnan(_3806) ? 1.0 : min(_3806, 1.0));
    float _494 = (_487 * ((_440.x * cbMtdParam._m0[13u].x) - _421)) + _421;
    float _495 = (_487 * ((_440.y * cbMtdParam._m0[13u].y) - _422)) + _422;
    float _496 = (_487 * ((_440.z * cbMtdParam._m0[13u].z) - _423)) + _423;
    vec4 _515 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _278) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _279) + cbTextureTilingScale._m0[14u].w));
    vec4 _535 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _278) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _279) + cbTextureTilingScale._m0[4u].w));
    vec4 _552 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _554 = _552.x;
    float _555 = _552.y;
    float _556 = _552.z;
    float _563 = ((_535.x - _554) * _414) + _554;
    float _564 = ((_535.y - _555) * _414) + _555;
    float _565 = ((_535.z - _556) * _414) + _556;
    vec4 _577 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _278) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _279) + cbTextureTilingScale._m0[2u].w));
    float _590 = ((_577.z - _565) * _487) + _565;
    float _593 = ((((_577.x - _563) * _487) + _563) * 2.0) + (-1.0);
    float _595 = ((((_577.y - _564) * _487) + _564) * 2.0) + (-1.0);
    float _596 = dot(vec2(_593, _595), vec2(_593, _595));
    float _3817 = isnan(0.0) ? _596 : (isnan(_596) ? 0.0 : max(_596, 0.0));
    float _601 = sqrt(1.0 - (isnan(1.0) ? _3817 : (isnan(_3817) ? 1.0 : min(_3817, 1.0))));
    vec4 _615 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _640 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _278) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _279) + cbTextureTilingScale._m0[11u].w));
    float _642 = _640.x;
    float _643 = 1.0 - _642;
    float _649 = isnan(-1.0) ? cbMtdParam._m0[24u].x : (isnan(cbMtdParam._m0[24u].x) ? (-1.0) : max(cbMtdParam._m0[24u].x, -1.0));
    float _652 = ((isnan(0.0) ? _649 : (isnan(_649) ? 0.0 : min(_649, 0.0))) * TEXCOORD_8.x) + TEXCOORD_8.w;
    float _661 = (_652 - ((((((_642 - _643) * cbMtdParam._m0[24u].w) + _643) + 0.00999999977648258209228515625) * cbMtdParam._m0[21u].z) * (1.0 - _652))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3838 = isnan(0.0) ? _661 : (isnan(_661) ? 0.0 : max(_661, 0.0));
    float _662 = isnan(1.0) ? _3838 : (isnan(_3838) ? 1.0 : min(_3838, 1.0));
    float _669 = (_662 * ((_515.x * cbMtdParam._m0[18u].x) - _494)) + _494;
    float _670 = (_662 * ((_515.y * cbMtdParam._m0[18u].y) - _495)) + _495;
    float _671 = (_662 * ((_515.z * cbMtdParam._m0[18u].z) - _496)) + _496;
    vec4 _683 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _278) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _279) + cbTextureTilingScale._m0[19u].w));
    float _685 = _683.x;
    float _686 = 1.0 - _685;
    float _713 = (TEXCOORD_8.x - ((cbMtdParam._m0[22u].w * (1.0 - TEXCOORD_8.x)) * ((((_685 - _686) * cbMtdParam._m0[24u].y) + _686) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3849 = isnan(0.0) ? _713 : (isnan(_713) ? 0.0 : max(_713, 0.0));
    float _714 = isnan(1.0) ? _3849 : (isnan(_3849) ? 1.0 : min(_3849, 1.0));
    float _722 = ((((cbMtdParam._m0[10u].x - _669) * TEXCOORD_8.x) * cbMtdParam._m0[23u].w) * _714) + _669;
    float _723 = ((((cbMtdParam._m0[10u].y - _670) * TEXCOORD_8.y) * cbMtdParam._m0[23u].w) * _714) + _670;
    float _724 = (((cbMtdParam._m0[23u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _671)) * _714) + _671;
    float _728 = (cbMtdParam._m0[19u].w * (_615.z - _590)) + _590;
    vec4 _742 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _278) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _279) + cbTextureTilingScale._m0[15u].w));
    float _749 = (_742.x * 2.0) + (-1.0);
    float _750 = (_742.y * 2.0) + (-1.0);
    float _751 = dot(vec2(_749, _750), vec2(_749, _750));
    float _3860 = isnan(0.0) ? _751 : (isnan(_751) ? 0.0 : max(_751, 0.0));
    float _759 = (_662 * (_742.z - _728)) + _728;
    float _762 = ((cbMtdParam._m0[23u].y - _759) * _714) + _759;
    vec4 _781 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _278) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _279) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _787 = (_781.x * 2.0) + (-1.0);
    float _788 = (_781.y * 2.0) + (-1.0);
    float _789 = dot(vec2(_787, _788), vec2(_787, _788));
    float _3871 = isnan(0.0) ? _789 : (isnan(_789) ? 0.0 : max(_789, 0.0));
    float _797 = (((_615.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _593;
    float _798 = (((_615.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _595;
    float _810 = (((_749 - _797) + (cbMtdParam._m0[21u].x * _797)) * _662) + _797;
    float _811 = (((_750 - _798) + (cbMtdParam._m0[21u].x * _798)) * _662) + _798;
    float _812 = (_662 * (sqrt(1.0 - (isnan(1.0) ? _3860 : (isnan(_3860) ? 1.0 : min(_3860, 1.0)))) - _601)) + _601;
    float _823 = (((_787 - _810) + (_810 * cbMtdParam._m0[22u].z)) * _714) + _810;
    float _824 = (((_788 - _811) + (_811 * cbMtdParam._m0[22u].z)) * _714) + _811;
    float _825 = ((sqrt(1.0 - (isnan(1.0) ? _3871 : (isnan(_3871) ? 1.0 : min(_3871, 1.0)))) - _812) * _714) + _812;
    float _827 = cbMtdParam._m0[22u].x + _615.w;
    float _830 = fma(_825, _246 * NORMAL.x, fma(_824, _253 * TANGENT.x, (_239 * _231) * _823));
    float _833 = fma(_825, _246 * NORMAL.y, fma(_824, _253 * TANGENT.y, (_239 * _232) * _823));
    float _836 = fma(_825, _246 * NORMAL.z, fma(_824, _253 * TANGENT.z, (_239 * _233) * _823));
    float _840 = inversesqrt(dot(vec3(_830, _833, _836), vec3(_830, _833, _836)));
    float _841 = _840 * _830;
    float _842 = _840 * _833;
    float _843 = _840 * _836;
    float _3882 = isnan(0.0) ? _762 : (isnan(_762) ? 0.0 : max(_762, 0.0));
    float _844 = isnan(1.0) ? _3882 : (isnan(_3882) ? 1.0 : min(_3882, 1.0));
    float _3893 = isnan(0.0) ? _827 : (isnan(_827) ? 0.0 : max(_827, 0.0));
    float _3904 = isnan(0.0) ? _722 : (isnan(_722) ? 0.0 : max(_722, 0.0));
    float _3915 = isnan(0.0) ? _723 : (isnan(_723) ? 0.0 : max(_723, 0.0));
    float _3926 = isnan(0.0) ? _724 : (isnan(_724) ? 0.0 : max(_724, 0.0));
    float _862 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _903 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _913 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _903);
    float _914 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _903);
    float _915 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _903);
    float _919 = inversesqrt(dot(vec3(_913, _914, _915), vec3(_913, _914, _915)));
    float _920 = _913 * _919;
    float _921 = _914 * _919;
    float _922 = _915 * _919;
    vec4 _927 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _929 = _927.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1083 = sqrt(((_913 * _913) + (_914 * _914)) + (_915 * _915));
        float _1089 = (cbMatDynParam._m0[5u].x * _1083) + cbMatDynParam._m0[5u].y;
        float _3937 = isnan(0.0) ? _1089 : (isnan(_1089) ? 0.0 : max(_1089, 0.0));
        float _1090 = isnan(1.0) ? _3937 : (isnan(_3937) ? 1.0 : min(_3937, 1.0));
        float _1094 = (cbMatDynParam._m0[5u].z * _1083) + cbMatDynParam._m0[5u].w;
        float _3948 = isnan(0.0) ? _1094 : (isnan(_1094) ? 0.0 : max(_1094, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3948 : (isnan(_3948) ? 1.0 : min(_3948, 1.0))) - _1090)) + _1090) < ((_929 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _940 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _941 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _959 = fma(_843, cbSceneParam._m0[5u].z, fma(_842, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _841));
    float _962 = fma(_843, cbSceneParam._m0[6u].z, fma(_842, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _841));
    float _965 = fma(_843, cbSceneParam._m0[7u].z, fma(_842, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _841));
    uint _978 = _259 + 9u;
    uint _979 = _978 + uint(cbMatDynParam._m0[0u].w);
    float _985 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3904 : (isnan(_3904) ? 1.0 : min(_3904, 1.0)))) * cbInstanceData._m0[_979].x;
    float _986 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3915 : (isnan(_3915) ? 1.0 : min(_3915, 1.0)))) * cbInstanceData._m0[_979].y;
    float _987 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3926 : (isnan(_3926) ? 1.0 : min(_3926, 1.0)))) * cbInstanceData._m0[_979].z;
    float _3959 = isnan(0.0) ? _985 : (isnan(_985) ? 0.0 : max(_985, 0.0));
    float _988 = isnan(1.0) ? _3959 : (isnan(_3959) ? 1.0 : min(_3959, 1.0));
    float _3970 = isnan(0.0) ? _986 : (isnan(_986) ? 0.0 : max(_986, 0.0));
    float _989 = isnan(1.0) ? _3970 : (isnan(_3970) ? 1.0 : min(_3970, 1.0));
    float _3981 = isnan(0.0) ? _987 : (isnan(_987) ? 0.0 : max(_987, 0.0));
    float _990 = isnan(1.0) ? _3981 : (isnan(_3981) ? 1.0 : min(_3981, 1.0));
    vec4 _999 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _940, cbSceneParam._m0[86u].y * _941));
    float _1003 = ((isnan(1.0) ? _3893 : (isnan(_3893) ? 1.0 : min(_3893, 1.0))) * TEXCOORD_5.w) * _999.x;
    float _1004 = dot(vec3(_841, _842, _843), vec3(_920, _921, _922));
    float _1007 = _1004 * 2.0;
    float _1011 = (_1007 * _841) - _920;
    float _1012 = (_1007 * _842) - _921;
    float _1013 = (_1007 * _843) - _922;
    float _1017 = abs(dot(vec3(_920, _921, _922), vec3(_841, _842, _843)));
    float _3992 = isnan(0.0) ? _1017 : (isnan(_1017) ? 0.0 : max(_1017, 0.0));
    float _1019 = sqrt(_844);
    float _1032 = exp2((_1019 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3992 : (isnan(_3992) ? 1.0 : min(_3992, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1019 * 3.0));
    float _1064 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1068 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1072 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1401;
    float _1403;
    float _1404;
    float _1405;
    float _1406;
    float _1407;
    float _1408;
    float _1409;
    float _1410;
    float _1411;
    float _1412;
    float _1413;
    float _1414;
    float _1415;
    float _1416;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1126 = fma(_1072, cbModelParam._m0[26u].z, fma(_1068, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1064));
        float _1130 = fma(_1072, cbModelParam._m0[27u].z, fma(_1068, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1064));
        float _1134 = fma(_1072, cbModelParam._m0[28u].z, fma(_1068, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1064));
        float _1159 = _1064 + _841;
        float _1160 = _1068 + _842;
        float _1161 = _1072 + _843;
        float _1171 = fma(_1161, cbModelParam._m0[26u].z, fma(_1160, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1159)) - _1126;
        float _1172 = fma(_1161, cbModelParam._m0[27u].z, fma(_1160, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1159)) - _1130;
        float _1173 = fma(_1161, cbModelParam._m0[28u].z, fma(_1160, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1159)) - _1134;
        float _1177 = inversesqrt(dot(vec3(_1171, _1172, _1173), vec3(_1171, _1172, _1173)));
        float _1190 = ((_1177 * _1171) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1126 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1191 = ((_1177 * _1172) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1130 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1192 = ((_1177 * _1173) / cbModelParam._m0[34u].z) + ((((((_1134 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1195 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1190, _1191, _1192), 0.0);
        vec4 _1202 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1190, _1191, _1192), 0.0);
        vec4 _1209 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1190, _1191, _1192), 0.0);
        vec4 _1216 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1190, _1191, _1192), 0.0);
        float _1229 = exp2((_1195.w + (-0.5)) * 20.0) * 2.0;
        float _1230 = _1229 * (_1195.x + (-0.5));
        float _1231 = _1229 * (_1195.y + (-0.5));
        float _1232 = _1229 * (_1195.z + (-0.5));
        float _1239 = exp2((_1202.w + (-0.5)) * 20.0) * 2.0;
        float _1240 = _1239 * (_1202.x + (-0.5));
        float _1241 = _1239 * (_1202.y + (-0.5));
        float _1242 = _1239 * (_1202.z + (-0.5));
        float _1249 = exp2((_1209.w + (-0.5)) * 20.0) * 2.0;
        float _1250 = _1249 * (_1209.x + (-0.5));
        float _1251 = _1249 * (_1209.y + (-0.5));
        float _1252 = _1249 * (_1209.z + (-0.5));
        float _1259 = exp2((_1216.w + (-0.5)) * 20.0) * 2.0;
        float _1260 = _1259 * (_1216.x + (-0.5));
        float _1261 = _1259 * (_1216.y + (-0.5));
        float _1262 = _1259 * (_1216.z + (-0.5));
        float _1263 = isnan(0.0) ? _1260 : (isnan(_1260) ? 0.0 : max(_1260, 0.0));
        float _1264 = isnan(0.0) ? _1261 : (isnan(_1261) ? 0.0 : max(_1261, 0.0));
        float _1265 = isnan(0.0) ? _1262 : (isnan(_1262) ? 0.0 : max(_1262, 0.0));
        float _1266 = _1230 * 0.5;
        float _1267 = _1240 * 0.5;
        float _1268 = _1250 * 0.5;
        float _1269 = dot(vec3(_1266, _1267, _1268), vec3(_1266, _1267, _1268));
        float _1274 = (_1269 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1269);
        float _1283 = (dot(vec3(_841, _842, _843), vec3(_1274 * _1266, _1274 * _1267, _1274 * _1268)) + 1.0) * 0.5;
        float _4018 = isnan(0.0) ? _1283 : (isnan(_1283) ? 0.0 : max(_1283, 0.0));
        float _1293 = sqrt(((_1267 * _1267) + (_1266 * _1266)) + (_1268 * _1268)) / (_1263 + 9.9999997473787516355514526367188e-06);
        float _4029 = isnan(0.0) ? _1293 : (isnan(_1293) ? 0.0 : max(_1293, 0.0));
        float _1294 = isnan(1.0) ? _4029 : (isnan(_4029) ? 1.0 : min(_4029, 1.0));
        float _1295 = _1294 * 2.0;
        float _1299 = (1.0 - _1294) / (_1294 + 1.0);
        float _4040 = isnan(0.0) ? _1299 : (isnan(_1299) ? 0.0 : max(_1299, 0.0));
        float _1300 = isnan(1.0) ? _4040 : (isnan(_4040) ? 1.0 : min(_4040, 1.0));
        float _1309 = ((((1.0 - _1300) * (_1295 + 2.0)) * exp2(log2(isnan(1.0) ? _4018 : (isnan(_4018) ? 1.0 : min(_4018, 1.0))) * (_1295 + 1.0))) + _1300) * _1263;
        float _1310 = _1231 * 0.5;
        float _1311 = _1241 * 0.5;
        float _1312 = _1251 * 0.5;
        float _1313 = dot(vec3(_1310, _1311, _1312), vec3(_1310, _1311, _1312));
        float _1318 = (_1313 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1313);
        float _1326 = (dot(vec3(_841, _842, _843), vec3(_1318 * _1310, _1318 * _1311, _1318 * _1312)) + 1.0) * 0.5;
        float _4051 = isnan(0.0) ? _1326 : (isnan(_1326) ? 0.0 : max(_1326, 0.0));
        float _1335 = sqrt(((_1311 * _1311) + (_1310 * _1310)) + (_1312 * _1312)) / (_1264 + 9.9999997473787516355514526367188e-06);
        float _4062 = isnan(0.0) ? _1335 : (isnan(_1335) ? 0.0 : max(_1335, 0.0));
        float _1336 = isnan(1.0) ? _4062 : (isnan(_4062) ? 1.0 : min(_4062, 1.0));
        float _1337 = _1336 * 2.0;
        float _1341 = (1.0 - _1336) / (_1336 + 1.0);
        float _4073 = isnan(0.0) ? _1341 : (isnan(_1341) ? 0.0 : max(_1341, 0.0));
        float _1342 = isnan(1.0) ? _4073 : (isnan(_4073) ? 1.0 : min(_4073, 1.0));
        float _1351 = ((((1.0 - _1342) * (_1337 + 2.0)) * exp2(log2(isnan(1.0) ? _4051 : (isnan(_4051) ? 1.0 : min(_4051, 1.0))) * (_1337 + 1.0))) + _1342) * _1264;
        float _1352 = _1232 * 0.5;
        float _1353 = _1242 * 0.5;
        float _1354 = _1252 * 0.5;
        float _1355 = dot(vec3(_1352, _1353, _1354), vec3(_1352, _1353, _1354));
        float _1360 = (_1355 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1355);
        float _1368 = (dot(vec3(_841, _842, _843), vec3(_1360 * _1352, _1360 * _1353, _1360 * _1354)) + 1.0) * 0.5;
        float _4084 = isnan(0.0) ? _1368 : (isnan(_1368) ? 0.0 : max(_1368, 0.0));
        float _1377 = sqrt(((_1353 * _1353) + (_1352 * _1352)) + (_1354 * _1354)) / (_1265 + 9.9999997473787516355514526367188e-06);
        float _4095 = isnan(0.0) ? _1377 : (isnan(_1377) ? 0.0 : max(_1377, 0.0));
        float _1378 = isnan(1.0) ? _4095 : (isnan(_4095) ? 1.0 : min(_4095, 1.0));
        float _1379 = _1378 * 2.0;
        float _1383 = (1.0 - _1378) / (_1378 + 1.0);
        float _4106 = isnan(0.0) ? _1383 : (isnan(_1383) ? 0.0 : max(_1383, 0.0));
        float _1384 = isnan(1.0) ? _4106 : (isnan(_4106) ? 1.0 : min(_4106, 1.0));
        float _1393 = ((((1.0 - _1384) * (_1379 + 2.0)) * exp2(log2(isnan(1.0) ? _4084 : (isnan(_4084) ? 1.0 : min(_4084, 1.0))) * (_1379 + 1.0))) + _1384) * _1265;
        _1401 = _1232;
        _1403 = _1231;
        _1404 = _1230;
        _1405 = _1242;
        _1406 = _1241;
        _1407 = _1240;
        _1408 = _1252;
        _1409 = _1251;
        _1410 = _1250;
        _1411 = _1265;
        _1412 = _1264;
        _1413 = _1263;
        _1414 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1309 : (isnan(_1309) ? 0.0 : max(_1309, 0.0)));
        _1415 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1351 : (isnan(_1351) ? 0.0 : max(_1351, 0.0)));
        _1416 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1393 : (isnan(_1393) ? 0.0 : max(_1393, 0.0)));
    }
    else
    {
        _1401 = _1402;
        _1403 = _1402;
        _1404 = _1402;
        _1405 = _1402;
        _1406 = _1402;
        _1407 = _1402;
        _1408 = _1402;
        _1409 = _1402;
        _1410 = _1402;
        _1411 = _1402;
        _1412 = _1402;
        _1413 = _1402;
        _1414 = 0.0;
        _1415 = 0.0;
        _1416 = 0.0;
    }
    float _1712;
    float _1713;
    float _1714;
    float _1715;
    float _1716;
    float _1717;
    float _1718;
    float _1719;
    float _1720;
    float _1721;
    float _1722;
    float _1723;
    float _1724;
    float _1725;
    float _1726;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1443 = fma(_1072, cbModelParam._m0[30u].z, fma(_1068, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1064));
        float _1447 = fma(_1072, cbModelParam._m0[31u].z, fma(_1068, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1064));
        float _1451 = fma(_1072, cbModelParam._m0[32u].z, fma(_1068, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1064));
        float _1474 = _1064 + _841;
        float _1475 = _1068 + _842;
        float _1476 = _1072 + _843;
        float _1486 = fma(_1476, cbModelParam._m0[30u].z, fma(_1475, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1474)) - _1443;
        float _1487 = fma(_1476, cbModelParam._m0[31u].z, fma(_1475, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1474)) - _1447;
        float _1488 = fma(_1476, cbModelParam._m0[32u].z, fma(_1475, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1474)) - _1451;
        float _1492 = inversesqrt(dot(vec3(_1486, _1487, _1488), vec3(_1486, _1487, _1488)));
        float _1505 = ((_1492 * _1486) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1443 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1506 = ((_1492 * _1487) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1447 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1507 = ((_1492 * _1488) / cbModelParam._m0[35u].z) + ((((((_1451 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1509 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1505, _1506, _1507), 0.0);
        vec4 _1516 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1505, _1506, _1507), 0.0);
        vec4 _1523 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1505, _1506, _1507), 0.0);
        vec4 _1530 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1505, _1506, _1507), 0.0);
        float _1542 = exp2((_1509.w + (-0.5)) * 20.0) * 2.0;
        float _1543 = _1542 * (_1509.x + (-0.5));
        float _1544 = _1542 * (_1509.y + (-0.5));
        float _1545 = _1542 * (_1509.z + (-0.5));
        float _1552 = exp2((_1516.w + (-0.5)) * 20.0) * 2.0;
        float _1553 = _1552 * (_1516.x + (-0.5));
        float _1554 = _1552 * (_1516.y + (-0.5));
        float _1555 = _1552 * (_1516.z + (-0.5));
        float _1562 = exp2((_1523.w + (-0.5)) * 20.0) * 2.0;
        float _1563 = _1562 * (_1523.x + (-0.5));
        float _1564 = _1562 * (_1523.y + (-0.5));
        float _1565 = _1562 * (_1523.z + (-0.5));
        float _1572 = exp2((_1530.w + (-0.5)) * 20.0) * 2.0;
        float _1573 = _1572 * (_1530.x + (-0.5));
        float _1574 = _1572 * (_1530.y + (-0.5));
        float _1575 = _1572 * (_1530.z + (-0.5));
        float _1576 = isnan(0.0) ? _1573 : (isnan(_1573) ? 0.0 : max(_1573, 0.0));
        float _1577 = isnan(0.0) ? _1574 : (isnan(_1574) ? 0.0 : max(_1574, 0.0));
        float _1578 = isnan(0.0) ? _1575 : (isnan(_1575) ? 0.0 : max(_1575, 0.0));
        float _1579 = _1543 * 0.5;
        float _1580 = _1553 * 0.5;
        float _1581 = _1563 * 0.5;
        float _1582 = dot(vec3(_1579, _1580, _1581), vec3(_1579, _1580, _1581));
        float _1587 = (_1582 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1582);
        float _1595 = (dot(vec3(_841, _842, _843), vec3(_1587 * _1579, _1587 * _1580, _1587 * _1581)) + 1.0) * 0.5;
        float _4147 = isnan(0.0) ? _1595 : (isnan(_1595) ? 0.0 : max(_1595, 0.0));
        float _1604 = sqrt(((_1580 * _1580) + (_1579 * _1579)) + (_1581 * _1581)) / (_1576 + 9.9999997473787516355514526367188e-06);
        float _4158 = isnan(0.0) ? _1604 : (isnan(_1604) ? 0.0 : max(_1604, 0.0));
        float _1605 = isnan(1.0) ? _4158 : (isnan(_4158) ? 1.0 : min(_4158, 1.0));
        float _1606 = _1605 * 2.0;
        float _1610 = (1.0 - _1605) / (_1605 + 1.0);
        float _4169 = isnan(0.0) ? _1610 : (isnan(_1610) ? 0.0 : max(_1610, 0.0));
        float _1611 = isnan(1.0) ? _4169 : (isnan(_4169) ? 1.0 : min(_4169, 1.0));
        float _1620 = ((((1.0 - _1611) * (_1606 + 2.0)) * exp2(log2(isnan(1.0) ? _4147 : (isnan(_4147) ? 1.0 : min(_4147, 1.0))) * (_1606 + 1.0))) + _1611) * _1576;
        float _1621 = _1544 * 0.5;
        float _1622 = _1554 * 0.5;
        float _1623 = _1564 * 0.5;
        float _1624 = dot(vec3(_1621, _1622, _1623), vec3(_1621, _1622, _1623));
        float _1629 = (_1624 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1624);
        float _1637 = (dot(vec3(_841, _842, _843), vec3(_1629 * _1621, _1629 * _1622, _1629 * _1623)) + 1.0) * 0.5;
        float _4180 = isnan(0.0) ? _1637 : (isnan(_1637) ? 0.0 : max(_1637, 0.0));
        float _1646 = sqrt(((_1622 * _1622) + (_1621 * _1621)) + (_1623 * _1623)) / (_1577 + 9.9999997473787516355514526367188e-06);
        float _4191 = isnan(0.0) ? _1646 : (isnan(_1646) ? 0.0 : max(_1646, 0.0));
        float _1647 = isnan(1.0) ? _4191 : (isnan(_4191) ? 1.0 : min(_4191, 1.0));
        float _1648 = _1647 * 2.0;
        float _1652 = (1.0 - _1647) / (_1647 + 1.0);
        float _4202 = isnan(0.0) ? _1652 : (isnan(_1652) ? 0.0 : max(_1652, 0.0));
        float _1653 = isnan(1.0) ? _4202 : (isnan(_4202) ? 1.0 : min(_4202, 1.0));
        float _1662 = ((((1.0 - _1653) * (_1648 + 2.0)) * exp2(log2(isnan(1.0) ? _4180 : (isnan(_4180) ? 1.0 : min(_4180, 1.0))) * (_1648 + 1.0))) + _1653) * _1577;
        float _1663 = _1545 * 0.5;
        float _1664 = _1555 * 0.5;
        float _1665 = _1565 * 0.5;
        float _1666 = dot(vec3(_1663, _1664, _1665), vec3(_1663, _1664, _1665));
        float _1671 = (_1666 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1666);
        float _1679 = (dot(vec3(_841, _842, _843), vec3(_1671 * _1663, _1671 * _1664, _1671 * _1665)) + 1.0) * 0.5;
        float _4213 = isnan(0.0) ? _1679 : (isnan(_1679) ? 0.0 : max(_1679, 0.0));
        float _1688 = sqrt(((_1664 * _1664) + (_1663 * _1663)) + (_1665 * _1665)) / (_1578 + 9.9999997473787516355514526367188e-06);
        float _4224 = isnan(0.0) ? _1688 : (isnan(_1688) ? 0.0 : max(_1688, 0.0));
        float _1689 = isnan(1.0) ? _4224 : (isnan(_4224) ? 1.0 : min(_4224, 1.0));
        float _1690 = _1689 * 2.0;
        float _1694 = (1.0 - _1689) / (_1689 + 1.0);
        float _4235 = isnan(0.0) ? _1694 : (isnan(_1694) ? 0.0 : max(_1694, 0.0));
        float _1695 = isnan(1.0) ? _4235 : (isnan(_4235) ? 1.0 : min(_4235, 1.0));
        float _1704 = ((((1.0 - _1695) * (_1690 + 2.0)) * exp2(log2(isnan(1.0) ? _4213 : (isnan(_4213) ? 1.0 : min(_4213, 1.0))) * (_1690 + 1.0))) + _1695) * _1578;
        _1712 = _1545;
        _1713 = _1544;
        _1714 = _1543;
        _1715 = _1555;
        _1716 = _1554;
        _1717 = _1553;
        _1718 = _1565;
        _1719 = _1564;
        _1720 = _1563;
        _1721 = _1578;
        _1722 = _1577;
        _1723 = _1576;
        _1724 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1620 : (isnan(_1620) ? 0.0 : max(_1620, 0.0)));
        _1725 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1662 : (isnan(_1662) ? 0.0 : max(_1662, 0.0)));
        _1726 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1704 : (isnan(_1704) ? 0.0 : max(_1704, 0.0)));
    }
    else
    {
        _1712 = _1402;
        _1713 = _1402;
        _1714 = _1402;
        _1715 = _1402;
        _1716 = _1402;
        _1717 = _1402;
        _1718 = _1402;
        _1719 = _1402;
        _1720 = _1402;
        _1721 = _1402;
        _1722 = _1402;
        _1723 = _1402;
        _1724 = 0.0;
        _1725 = 0.0;
        _1726 = 0.0;
    }
    float _1736 = (cbModelParam._m0[1u].x * (_1724 - _1414)) + _1414;
    float _1737 = (cbModelParam._m0[1u].x * (_1725 - _1415)) + _1415;
    float _1738 = (cbModelParam._m0[1u].x * (_1726 - _1416)) + _1416;
    float _1759 = fma(_1738, cbSceneParam._m0[89u].z, fma(_1737, cbSceneParam._m0[89u].y, _1736 * cbSceneParam._m0[89u].x));
    float _1762 = fma(_1738, cbSceneParam._m0[90u].z, fma(_1737, cbSceneParam._m0[90u].y, _1736 * cbSceneParam._m0[90u].x));
    float _1765 = fma(_1738, cbSceneParam._m0[91u].z, fma(_1737, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1736));
    float _1780 = _1011 * 0.5;
    float _1781 = _1012 * 0.5;
    float _1782 = _1013 * 0.5;
    float _1783 = dot(vec4(_1780, _1781, _1782, 1.0), vec4(_1714, _1717, _1720, _1723));
    float _1786 = dot(vec4(_1780, _1781, _1782, 1.0), vec4(_1713, _1716, _1719, _1722));
    float _1789 = dot(vec4(_1780, _1781, _1782, 1.0), vec4(_1712, _1715, _1718, _1721));
    float _1823;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1796 = dot(vec4(_1780, _1781, _1782, 1.0), vec4(_1401, _1405, _1408, _1411));
        float _1800 = dot(vec4(_1780, _1781, _1782, 1.0), vec4(_1403, _1406, _1409, _1412));
        float _1804 = dot(vec4(_1780, _1781, _1782, 1.0), vec4(_1404, _1407, _1410, _1413));
        float _1811 = dot(vec4(cbModelParam._m0[39u]), vec4(_1780, _1781, _1782, 1.0));
        _1823 = dot(vec3(isnan(0.0) ? _1804 : (isnan(_1804) ? 0.0 : max(_1804, 0.0)), isnan(0.0) ? _1800 : (isnan(_1800) ? 0.0 : max(_1800, 0.0)), isnan(0.0) ? _1796 : (isnan(_1796) ? 0.0 : max(_1796, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1811) ? 0.0 : (isnan(0.0) ? _1811 : max(0.0, _1811))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1823 = 1.0;
    }
    float _1834;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1825 = dot(vec4(cbModelParam._m0[40u]), vec4(_1780, _1781, _1782, 1.0));
        _1834 = dot(vec3(isnan(0.0) ? _1783 : (isnan(_1783) ? 0.0 : max(_1783, 0.0)), isnan(0.0) ? _1786 : (isnan(_1786) ? 0.0 : max(_1786, 0.0)), isnan(0.0) ? _1789 : (isnan(_1789) ? 0.0 : max(_1789, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1825) ? 0.0 : (isnan(0.0) ? _1825 : max(0.0, _1825))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1834 = 1.0;
    }
    float _1838 = (_1834 * cbModelParam._m0[1u].x) + (_1823 * (1.0 - cbModelParam._m0[1u].x));
    float _1848 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _844);
    float _1849 = isnan(_1848) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1848 : min(cbModelParam._m0[25u].z, _1848));
    float _1929;
    float _1931;
    float _1933;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1896 = fma(_1072, cbModelParam._m0[13u].z, fma(_1068, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1064)) + cbModelParam._m0[13u].w;
        float _1900 = fma(_1072, cbModelParam._m0[14u].z, fma(_1068, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1064)) + cbModelParam._m0[14u].w;
        float _1904 = fma(_1072, cbModelParam._m0[15u].z, fma(_1068, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1064)) + cbModelParam._m0[15u].w;
        float _1907 = fma(_1013, cbModelParam._m0[13u].z, fma(_1012, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1011));
        float _1910 = fma(_1013, cbModelParam._m0[14u].z, fma(_1012, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1011));
        float _1913 = fma(_1013, cbModelParam._m0[15u].z, fma(_1012, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1011));
        float _1941;
        if (_1907 > 0.0)
        {
            _1941 = abs((1.0 - _1896) / _1907);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1907 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1896 + 1.0) / _1907);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1941 = frontier_phi_17_15_ladder;
        }
        float _2162;
        if (_1910 > 0.0)
        {
            _2162 = abs((1.0 - _1900) / _1910);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1910 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1900 + 1.0) / _1910);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2162 = frontier_phi_26_22_ladder;
        }
        float _2408;
        if (_1913 > 0.0)
        {
            _2408 = abs((1.0 - _1904) / _1913);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1913 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1904 + 1.0) / _1913);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2408 = frontier_phi_38_33_ladder;
        }
        float _2410 = isnan(_2162) ? _1941 : (isnan(_1941) ? _2162 : min(_1941, _2162));
        float _2411 = isnan(_2408) ? _2410 : (isnan(_2410) ? _2408 : min(_2410, _2408));
        float _2415 = (_2411 * _1907) + _1896;
        float _2416 = (_2411 * _1910) + _1900;
        float _2417 = (_2411 * _1913) + _1904;
        float _2418 = _2411 * 9.9999997473787516355514526367188e-05;
        float _2420 = (-1.0) - _2418;
        float _2422 = _2418 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2417 > _2422) || ((_2417 < _2420) || ((_2416 > _2422) || ((_2416 < _2420) || ((_2415 < _2420) || (_2415 > _2422))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2541 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2417, cbModelParam._m0[9u].z, fma(_2416, cbModelParam._m0[9u].y, _2415 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2417, cbModelParam._m0[10u].z, fma(_2416, cbModelParam._m0[10u].y, _2415 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2417, cbModelParam._m0[11u].z, fma(_2416, cbModelParam._m0[11u].y, _2415 * cbModelParam._m0[11u].x))), _1849);
            frontier_phi_16_38_ladder = _2541.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2541.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2541.x * cbModelParam._m0[1u].y;
        }
        _1929 = frontier_phi_16_38_ladder_2;
        _1931 = frontier_phi_16_38_ladder_1;
        _1933 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1917 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1011, _1012, _1013), _1849);
        _1929 = _1917.x * cbModelParam._m0[1u].y;
        _1931 = _1917.y * cbModelParam._m0[1u].y;
        _1933 = _1917.z * cbModelParam._m0[1u].y;
    }
    float _1937 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _844);
    float _1938 = isnan(_1937) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1937 : min(cbModelParam._m0[25u].w, _1937));
    float _2027;
    float _2029;
    float _2031;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1991 = fma(_1072, cbModelParam._m0[21u].z, fma(_1068, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1064)) + cbModelParam._m0[21u].w;
        float _1995 = fma(_1072, cbModelParam._m0[22u].z, fma(_1068, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1064)) + cbModelParam._m0[22u].w;
        float _1999 = fma(_1072, cbModelParam._m0[23u].z, fma(_1068, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1064)) + cbModelParam._m0[23u].w;
        float _2002 = fma(_1013, cbModelParam._m0[21u].z, fma(_1012, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1011));
        float _2005 = fma(_1013, cbModelParam._m0[22u].z, fma(_1012, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1011));
        float _2008 = fma(_1013, cbModelParam._m0[23u].z, fma(_1012, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1011));
        float _2167;
        if (_2002 > 0.0)
        {
            _2167 = abs((1.0 - _1991) / _2002);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_2002 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1991 + 1.0) / _2002);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2167 = frontier_phi_28_24_ladder;
        }
        float _2435;
        if (_2005 > 0.0)
        {
            _2435 = abs((1.0 - _1995) / _2005);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_2005 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1995 + 1.0) / _2005);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2435 = frontier_phi_40_35_ladder;
        }
        float _2640;
        if (_2008 > 0.0)
        {
            _2640 = abs((1.0 - _1999) / _2008);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_2008 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1999 + 1.0) / _2008);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2640 = frontier_phi_49_46_ladder;
        }
        float _2642 = isnan(_2435) ? _2167 : (isnan(_2167) ? _2435 : min(_2167, _2435));
        float _2643 = isnan(_2640) ? _2642 : (isnan(_2642) ? _2640 : min(_2642, _2640));
        float _2647 = (_2643 * _2002) + _1991;
        float _2648 = (_2643 * _2005) + _1995;
        float _2649 = (_2643 * _2008) + _1999;
        float _2650 = _2643 * 9.9999997473787516355514526367188e-05;
        float _2651 = (-1.0) - _2650;
        float _2653 = _2650 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2649 > _2653) || ((_2649 < _2651) || ((_2648 > _2653) || ((_2648 < _2651) || ((_2647 < _2651) || (_2647 > _2653))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2848 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2649, cbModelParam._m0[17u].z, fma(_2648, cbModelParam._m0[17u].y, _2647 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2649, cbModelParam._m0[18u].z, fma(_2648, cbModelParam._m0[18u].y, _2647 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2649, cbModelParam._m0[19u].z, fma(_2648, cbModelParam._m0[19u].y, _2647 * cbModelParam._m0[19u].x))), _1938);
            frontier_phi_25_49_ladder = _2848.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2848.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2848.x * cbModelParam._m0[1u].z;
        }
        _2027 = frontier_phi_25_49_ladder_2;
        _2029 = frontier_phi_25_49_ladder_1;
        _2031 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _2011 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1011, _1012, _1013), _1938);
        _2027 = _2011.x * cbModelParam._m0[1u].z;
        _2029 = _2011.y * cbModelParam._m0[1u].z;
        _2031 = _2011.z * cbModelParam._m0[1u].z;
    }
    float _2043 = ((((1.0 - _1032) * ((_1019 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_1032 * _1019)) * _1003;
    float _2044 = _2043 * ((cbModelParam._m0[1u].w * (_2027 - _1929)) + _1929);
    float _2045 = _2043 * ((cbModelParam._m0[1u].w * (_2029 - _1931)) + _1931);
    float _2046 = _2043 * ((cbModelParam._m0[1u].w * (_2031 - _1933)) + _1933);
    float _2049 = fma(_2046, cbSceneParam._m0[89u].z, fma(_2045, cbSceneParam._m0[89u].y, _2044 * cbSceneParam._m0[89u].x));
    float _2052 = fma(_2046, cbSceneParam._m0[90u].z, fma(_2045, cbSceneParam._m0[90u].y, _2044 * cbSceneParam._m0[90u].x));
    float _2055 = fma(_2046, cbSceneParam._m0[91u].z, fma(_2045, cbSceneParam._m0[91u].y, _2044 * cbSceneParam._m0[91u].x));
    vec4 _2063 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_940, _941));
    float _2065 = _2063.w;
    float _2077 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _2065);
    float _2078 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _2065);
    float _2079 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _2065);
    uvec4 _2083 = floatBitsToUint(cbInstanceData._m0[_259 + 5u]);
    uint _2085 = _2083.x * 14u;
    uint _2086 = _2085 + 13u;
    float _2093 = _1003 + (-1.0);
    float _2098 = (cbLight._m0[_2086].x * _2093) + 1.0;
    float _2099 = (cbLight._m0[_2086].y * _2093) + 1.0;
    float _2100 = (cbLight._m0[_2086].z * _2093) + 1.0;
    float _2101 = (cbLight._m0[_2086].w * _2093) + 1.0;
    uint _2102 = _2085 + 5u;
    float _2108 = isnan(1.0) ? _2099 : (isnan(_2099) ? 1.0 : min(_2099, 1.0));
    uint _2112 = _2085 + 4u;
    float _2121 = isnan(1.0) ? _2098 : (isnan(_2098) ? 1.0 : min(_2098, 1.0));
    uint _2125 = _2085 | 1u;
    float _2136 = dot(vec3(cbLight._m0[_2085].xyz), vec3(_841, _842, _843));
    float _2139 = dot(vec3(cbLight._m0[_2125].xyz), vec3(_841, _842, _843));
    float _4371 = isnan(0.0) ? _2136 : (isnan(_2136) ? 0.0 : max(_2136, 0.0));
    float _4382 = isnan(0.0) ? _2139 : (isnan(_2139) ? 0.0 : max(_2139, 0.0));
    float _2144 = (isnan(1.0) ? _4371 : (isnan(_4371) ? 1.0 : min(_4371, 1.0))) * 0.3183098733425140380859375;
    float _2146 = (isnan(1.0) ? _4382 : (isnan(_4382) ? 1.0 : min(_4382, 1.0))) * 0.3183098733425140380859375;
    float _2153 = ((cbLight._m0[_2102].x * _2108) * _2146) + (((cbLight._m0[_2112].x * _2077) * _2121) * _2144);
    float _2154 = ((_2108 * cbLight._m0[_2102].y) * _2146) + (((cbLight._m0[_2112].y * _2078) * _2121) * _2144);
    float _2155 = ((_2108 * cbLight._m0[_2102].z) * _2146) + (((cbLight._m0[_2112].z * _2079) * _2121) * _2144);
    uvec4 _2159 = floatBitsToUint(cbLight._m0[_2085 + 12u]);
    bool _2161 = _2159.x == 0u;
    float _2172;
    float _2174;
    float _2176;
    if (_2161)
    {
        _2172 = _2153;
        _2174 = _2154;
        _2176 = _2155;
    }
    else
    {
        uint _2180 = _2085 + 6u;
        float _2196 = (dot(vec3(cbLight._m0[_2085 + 2u].xyz), vec3(_841, _842, _843)) * 0.5) + 0.5;
        float _2197 = _2196 * _2196;
        float _4393 = isnan(0.0) ? _2197 : (isnan(_2197) ? 0.0 : max(_2197, 0.0));
        float _2198 = isnan(1.0) ? _4393 : (isnan(_4393) ? 1.0 : min(_4393, 1.0));
        float _2199 = isnan(1.0) ? _2100 : (isnan(_2100) ? 1.0 : min(_2100, 1.0));
        _2172 = (((cbLight._m0[_2180].x * 0.3183098733425140380859375) * _2198) * _2199) + _2153;
        _2174 = (((cbLight._m0[_2180].y * 0.3183098733425140380859375) * _2198) * _2199) + _2154;
        _2176 = (((cbLight._m0[_2180].z * 0.3183098733425140380859375) * _2198) * _2199) + _2155;
    }
    bool _2179 = _2159.y == 0u;
    float _2217;
    float _2219;
    float _2221;
    if (_2179)
    {
        _2217 = _2172;
        _2219 = _2174;
        _2221 = _2176;
    }
    else
    {
        uint _2379 = _2085 + 7u;
        float _2395 = (dot(vec3(cbLight._m0[_2085 + 3u].xyz), vec3(_841, _842, _843)) * 0.5) + 0.5;
        float _2396 = _2395 * _2395;
        float _4409 = isnan(0.0) ? _2396 : (isnan(_2396) ? 0.0 : max(_2396, 0.0));
        float _2397 = isnan(1.0) ? _4409 : (isnan(_4409) ? 1.0 : min(_4409, 1.0));
        float _2398 = isnan(1.0) ? _2101 : (isnan(_2101) ? 1.0 : min(_2101, 1.0));
        _2217 = (((cbLight._m0[_2379].x * 0.3183098733425140380859375) * _2397) * _2398) + _2172;
        _2219 = (((cbLight._m0[_2379].y * 0.3183098733425140380859375) * _2397) * _2398) + _2174;
        _2221 = (((cbLight._m0[_2379].z * 0.3183098733425140380859375) * _2397) * _2398) + _2176;
    }
    uint _2224 = _2085 + 8u;
    float _2237 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2085].w)) * _844) * 0.949999988079071044921875);
    float _2238 = _2237 * _2237;
    float _2239 = cbLight._m0[_2085].x + _920;
    float _2240 = cbLight._m0[_2085].y + _921;
    float _2241 = cbLight._m0[_2085].z + _922;
    float _2245 = inversesqrt(dot(vec3(_2239, _2240, _2241), vec3(_2239, _2240, _2241)));
    float _2246 = _2245 * _2239;
    float _2247 = _2245 * _2240;
    float _2248 = _2245 * _2241;
    float _2249 = dot(vec3(_841, _842, _843), vec3(cbLight._m0[_2085].xyz));
    float _4425 = isnan(0.0) ? _2249 : (isnan(_2249) ? 0.0 : max(_2249, 0.0));
    float _2252 = isnan(1.0) ? _4425 : (isnan(_4425) ? 1.0 : min(_4425, 1.0));
    float _4436 = isnan(0.0) ? _1004 : (isnan(_1004) ? 0.0 : max(_1004, 0.0));
    float _2253 = isnan(1.0) ? _4436 : (isnan(_4436) ? 1.0 : min(_4436, 1.0));
    float _2254 = dot(vec3(_841, _842, _843), vec3(_2246, _2247, _2248));
    float _4447 = isnan(0.0) ? _2254 : (isnan(_2254) ? 0.0 : max(_2254, 0.0));
    float _2257 = isnan(1.0) ? _4447 : (isnan(_4447) ? 1.0 : min(_4447, 1.0));
    float _2258 = dot(vec3(cbLight._m0[_2085].xyz), vec3(_2246, _2247, _2248));
    float _4458 = isnan(0.0) ? _2258 : (isnan(_2258) ? 0.0 : max(_2258, 0.0));
    float _2262 = _2238 * _2238;
    float _2266 = ((_2257 * _2257) * (_2262 + (-1.0))) + 1.0;
    float _2277 = (exp2(log2(1.0 - (isnan(1.0) ? _4458 : (isnan(_4458) ? 1.0 : min(_4458, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2278 = 1.0 - _2238;
    float _2289 = (0.5 / (((_2253 * ((_2252 * _2278) + _2238)) + 9.9999999392252902907785028219223e-09) + (((_2253 * _2278) + _2238) * _2252))) * _2252;
    float _4469 = isnan(0.0) ? _2289 : (isnan(_2289) ? 0.0 : max(_2289, 0.0));
    float _2291 = (isnan(1.0) ? _4469 : (isnan(_4469) ? 1.0 : min(_4469, 1.0))) * (_2262 / ((_2266 * _2266) * 3.141590118408203125));
    uint _2305 = _2085 + 9u;
    float _2316 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2125].w)) * _844) * 0.949999988079071044921875);
    float _2317 = _2316 * _2316;
    float _2318 = cbLight._m0[_2125].x + _920;
    float _2319 = cbLight._m0[_2125].y + _921;
    float _2320 = cbLight._m0[_2125].z + _922;
    float _2324 = inversesqrt(dot(vec3(_2318, _2319, _2320), vec3(_2318, _2319, _2320)));
    float _2325 = _2324 * _2318;
    float _2326 = _2324 * _2319;
    float _2327 = _2324 * _2320;
    float _2328 = dot(vec3(_841, _842, _843), vec3(cbLight._m0[_2125].xyz));
    float _4480 = isnan(0.0) ? _2328 : (isnan(_2328) ? 0.0 : max(_2328, 0.0));
    float _2331 = isnan(1.0) ? _4480 : (isnan(_4480) ? 1.0 : min(_4480, 1.0));
    float _2332 = dot(vec3(_841, _842, _843), vec3(_2325, _2326, _2327));
    float _4491 = isnan(0.0) ? _2332 : (isnan(_2332) ? 0.0 : max(_2332, 0.0));
    float _2335 = isnan(1.0) ? _4491 : (isnan(_4491) ? 1.0 : min(_4491, 1.0));
    float _2336 = dot(vec3(cbLight._m0[_2125].xyz), vec3(_2325, _2326, _2327));
    float _4502 = isnan(0.0) ? _2336 : (isnan(_2336) ? 0.0 : max(_2336, 0.0));
    float _2340 = _2317 * _2317;
    float _2344 = ((_2335 * _2335) * (_2340 + (-1.0))) + 1.0;
    float _2353 = (exp2(log2(1.0 - (isnan(1.0) ? _4502 : (isnan(_4502) ? 1.0 : min(_4502, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2354 = 1.0 - _2317;
    float _2364 = (0.5 / (((_2253 * ((_2331 * _2354) + _2317)) + 9.9999999392252902907785028219223e-09) + (((_2253 * _2354) + _2317) * _2331))) * _2331;
    float _4513 = isnan(0.0) ? _2364 : (isnan(_2364) ? 0.0 : max(_2364, 0.0));
    float _2366 = (isnan(1.0) ? _4513 : (isnan(_4513) ? 1.0 : min(_4513, 1.0))) * (_2340 / ((_2344 * _2344) * 3.141590118408203125));
    float _2376 = (((_2353 * cbLight._m0[_2305].x) * _2366) * _2108) + ((((cbLight._m0[_2224].x * _2077) * _2277) * _2291) * _2121);
    float _2377 = (((_2353 * cbLight._m0[_2305].y) * _2366) * _2108) + ((((cbLight._m0[_2224].y * _2078) * _2277) * _2291) * _2121);
    float _2378 = (((_2353 * cbLight._m0[_2305].z) * _2366) * _2108) + ((((cbLight._m0[_2224].z * _2079) * _2277) * _2291) * _2121);
    float _2440;
    float _2442;
    float _2444;
    if (_2161)
    {
        _2440 = _2376;
        _2442 = _2377;
        _2444 = _2378;
    }
    else
    {
        uint _2446 = _2085 + 2u;
        uint _2450 = _2085 + 10u;
        float _2464 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2446].w)) * _844) * 0.949999988079071044921875);
        float _2465 = _2464 * _2464;
        float _2466 = cbLight._m0[_2446].x + _920;
        float _2467 = cbLight._m0[_2446].y + _921;
        float _2468 = cbLight._m0[_2446].z + _922;
        float _2472 = inversesqrt(dot(vec3(_2466, _2467, _2468), vec3(_2466, _2467, _2468)));
        float _2473 = _2472 * _2466;
        float _2474 = _2472 * _2467;
        float _2475 = _2472 * _2468;
        float _2476 = dot(vec3(_841, _842, _843), vec3(cbLight._m0[_2446].xyz));
        float _4524 = isnan(0.0) ? _2476 : (isnan(_2476) ? 0.0 : max(_2476, 0.0));
        float _2479 = isnan(1.0) ? _4524 : (isnan(_4524) ? 1.0 : min(_4524, 1.0));
        float _2480 = dot(vec3(_841, _842, _843), vec3(_2473, _2474, _2475));
        float _4535 = isnan(0.0) ? _2480 : (isnan(_2480) ? 0.0 : max(_2480, 0.0));
        float _2483 = isnan(1.0) ? _4535 : (isnan(_4535) ? 1.0 : min(_4535, 1.0));
        float _2484 = dot(vec3(cbLight._m0[_2446].xyz), vec3(_2473, _2474, _2475));
        float _4546 = isnan(0.0) ? _2484 : (isnan(_2484) ? 0.0 : max(_2484, 0.0));
        float _2488 = _2465 * _2465;
        float _2492 = ((_2483 * _2483) * (_2488 + (-1.0))) + 1.0;
        float _2501 = (exp2(log2(1.0 - (isnan(1.0) ? _4546 : (isnan(_4546) ? 1.0 : min(_4546, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2502 = 1.0 - _2465;
        float _2512 = (0.5 / (((_2253 * ((_2479 * _2502) + _2465)) + 9.9999999392252902907785028219223e-09) + (((_2253 * _2502) + _2465) * _2479))) * _2479;
        float _4557 = isnan(0.0) ? _2512 : (isnan(_2512) ? 0.0 : max(_2512, 0.0));
        float _2514 = (isnan(1.0) ? _4557 : (isnan(_4557) ? 1.0 : min(_4557, 1.0))) * (_2488 / ((_2492 * _2492) * 3.141590118408203125));
        float _2515 = isnan(1.0) ? _2100 : (isnan(_2100) ? 1.0 : min(_2100, 1.0));
        _2440 = (((_2501 * cbLight._m0[_2450].x) * _2514) * _2515) + _2376;
        _2442 = (((_2501 * cbLight._m0[_2450].y) * _2514) * _2515) + _2377;
        _2444 = (((_2501 * cbLight._m0[_2450].z) * _2514) * _2515) + _2378;
    }
    float _2550;
    float _2552;
    float _2554;
    if (_2179)
    {
        _2550 = _2440;
        _2552 = _2442;
        _2554 = _2444;
    }
    else
    {
        uint _2561 = _2085 + 3u;
        uint _2565 = _2085 + 11u;
        float _2579 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2561].w)) * _844) * 0.949999988079071044921875);
        float _2580 = _2579 * _2579;
        float _2581 = cbLight._m0[_2561].x + _920;
        float _2582 = cbLight._m0[_2561].y + _921;
        float _2583 = cbLight._m0[_2561].z + _922;
        float _2587 = inversesqrt(dot(vec3(_2581, _2582, _2583), vec3(_2581, _2582, _2583)));
        float _2588 = _2587 * _2581;
        float _2589 = _2587 * _2582;
        float _2590 = _2587 * _2583;
        float _2591 = dot(vec3(_841, _842, _843), vec3(cbLight._m0[_2561].xyz));
        float _4573 = isnan(0.0) ? _2591 : (isnan(_2591) ? 0.0 : max(_2591, 0.0));
        float _2594 = isnan(1.0) ? _4573 : (isnan(_4573) ? 1.0 : min(_4573, 1.0));
        float _2595 = dot(vec3(_841, _842, _843), vec3(_2588, _2589, _2590));
        float _4584 = isnan(0.0) ? _2595 : (isnan(_2595) ? 0.0 : max(_2595, 0.0));
        float _2598 = isnan(1.0) ? _4584 : (isnan(_4584) ? 1.0 : min(_4584, 1.0));
        float _2599 = dot(vec3(cbLight._m0[_2561].xyz), vec3(_2588, _2589, _2590));
        float _4595 = isnan(0.0) ? _2599 : (isnan(_2599) ? 0.0 : max(_2599, 0.0));
        float _2603 = _2580 * _2580;
        float _2607 = ((_2598 * _2598) * (_2603 + (-1.0))) + 1.0;
        float _2616 = (exp2(log2(1.0 - (isnan(1.0) ? _4595 : (isnan(_4595) ? 1.0 : min(_4595, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2617 = 1.0 - _2580;
        float _2627 = (0.5 / (((_2253 * ((_2594 * _2617) + _2580)) + 9.9999999392252902907785028219223e-09) + (((_2253 * _2617) + _2580) * _2594))) * _2594;
        float _4606 = isnan(0.0) ? _2627 : (isnan(_2627) ? 0.0 : max(_2627, 0.0));
        float _2629 = (isnan(1.0) ? _4606 : (isnan(_4606) ? 1.0 : min(_4606, 1.0))) * (_2603 / ((_2607 * _2607) * 3.141590118408203125));
        float _2630 = isnan(1.0) ? _2101 : (isnan(_2101) ? 1.0 : min(_2101, 1.0));
        _2550 = (((_2616 * cbLight._m0[_2565].x) * _2629) * _2630) + _2440;
        _2552 = (((_2616 * cbLight._m0[_2565].y) * _2629) * _2630) + _2442;
        _2554 = (((_2616 * cbLight._m0[_2565].z) * _2629) * _2630) + _2444;
    }
    float _2765;
    float _2767;
    float _2769;
    float _2771;
    float _2773;
    float _2775;
    if (_2083.y == 0u)
    {
        float _2705 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2706 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2705;
        float _2707 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2705;
        float _2708 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2705;
        uvec4 _2720 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2721 = _2720.x;
        uint _2732 = uint((float(_2720.y) * floor(float(uint(cbSceneParam._m0[85u].y * _941) / _2721))) + floor(float(uint(cbSceneParam._m0[85u].x * _940) / _2721)));
        float _2742 = (log2(_2708 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2743 = isnan(0.0) ? _2742 : (isnan(_2742) ? 0.0 : max(_2742, 0.0));
        uint _2746 = uint(isnan(14.0) ? _2743 : (isnan(_2743) ? 14.0 : min(_2743, 14.0)));
        uvec4 _2751 = texelFetch(g_lightClusterGridBuffer, int(((_2746 << 2u) + (_2732 << 6u)) >> 2u));
        uint _2752 = _2751.x;
        uint _2753 = _2720.z;
        float _2853;
        float _2855;
        float _2857;
        float _2859;
        float _2861;
        float _2863;
        if (((((1u << ((_2753 >> 4u) & 15u)) + 4294967295u) & _2752) == 0u) || ((_2753 & 240u) == 0u))
        {
            _2853 = 0.0;
            _2855 = 0.0;
            _2857 = 0.0;
            _2859 = 0.0;
            _2861 = 0.0;
            _2863 = 0.0;
        }
        else
        {
            float _2854;
            float _2856;
            float _2858;
            float _2860;
            float _2862;
            float _2864;
            float _3006 = 0.0;
            float _3007 = 0.0;
            float _3008 = 0.0;
            float _3009 = 0.0;
            float _3010 = 0.0;
            float _3011 = 0.0;
            uint _3012 = 0u;
            uint _3021;
            bool _3022;
            for (;;)
            {
                _3021 = texelFetch(g_lightClassification, int((((_2746 << 5u) + (_2732 << 9u)) + (_3012 << 2u)) >> 2u)).x;
                _3022 = _3021 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3022)
                {
                    frontier_phi_66_pred = _3006;
                    frontier_phi_66_pred_1 = _3011;
                    frontier_phi_66_pred_2 = _3010;
                    frontier_phi_66_pred_3 = _3009;
                    frontier_phi_66_pred_4 = _3008;
                    frontier_phi_66_pred_5 = _3007;
                }
                else
                {
                    float _3151;
                    float _3152;
                    float _3153;
                    float _3154;
                    float _3155;
                    float _3156;
                    uint _3157;
                    _3151 = _3006;
                    _3152 = _3007;
                    _3153 = _3008;
                    _3154 = _3009;
                    _3155 = _3010;
                    _3156 = _3011;
                    _3157 = _3021;
                    float _3078;
                    float _3079;
                    float _3080;
                    float _3081;
                    float _3082;
                    float _3083;
                    for (;;)
                    {
                        uint _3161 = uint(findLSB(_3157)) + (_3012 << 5u);
                        uint _3158 = (_3157 + 4294967295u) & _3157;
                        uint _3163 = _3161 * 48u;
                        vec4 _3177 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3163)).x, texelFetch(g_PointLightRenderingBuffer, int(_3163 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3163 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3163 + 3u)).x));
                        uint _3183 = (_3161 * 48u) + 4u;
                        vec4 _3196 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3183)).x, texelFetch(g_PointLightRenderingBuffer, int(_3183 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3183 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3183 + 3u)).x));
                        uint _3202 = (_3161 * 48u) + 8u;
                        vec3 _3213 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3202)).x, texelFetch(g_PointLightRenderingBuffer, int(_3202 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3202 + 2u)).x));
                        float _3217 = _3177.x - _2706;
                        float _3218 = _3177.y - _2707;
                        float _3219 = _3177.z - _2708;
                        float _3220 = dot(vec3(_3217, _3218, _3219), vec3(_3217, _3218, _3219));
                        float _3223 = inversesqrt(_3220);
                        float _3224 = _3223 * _3217;
                        float _3225 = _3223 * _3218;
                        float _3226 = _3223 * _3219;
                        float _3227 = dot(vec3(_959, _962, _965), vec3(_3224, _3225, _3226));
                        float _3232 = 1.0 - (_3220 * _3177.w);
                        float _4632 = isnan(0.0) ? _3232 : (isnan(_3232) ? 0.0 : max(_3232, 0.0));
                        float _3233 = isnan(1.0) ? _4632 : (isnan(_4632) ? 1.0 : min(_4632, 1.0));
                        float _3234 = sqrt(_3220) * _3196.w;
                        float _3237 = 1.39999997615814208984375 / (_3234 + 1.39999997615814208984375);
                        float _3238 = _3237 * _3237;
                        float _3241 = ((1.0 - _3238) * _3227) + _3238;
                        float _3244 = _3234 * _3234;
                        float _3248 = ((isnan(0.0) ? _3241 : (isnan(_3241) ? 0.0 : max(_3241, 0.0))) * _3233) / ((_3244 * 0.699999988079071044921875) + 1.0);
                        float _3252 = (-0.0) - _2706;
                        float _3253 = (-0.0) - _2707;
                        float _3254 = (-0.0) - _2708;
                        float _3258 = inversesqrt(dot(vec3(_3252, _3253, _3254), vec3(_3252, _3253, _3254)));
                        float _3259 = _3258 * _3252;
                        float _3260 = _3258 * _3253;
                        float _3261 = _3258 * _3254;
                        float _3269 = exp2(log2(1.0 / ((_3244 * 3.5) + 5.0)) * 0.25);
                        float _3270 = 1.0 - _1019;
                        float _3277 = sqrt(1.0 - ((1.0 - (_3270 * _3270)) * (1.0 - (_3269 * _3269))));
                        float _3278 = _3277 * _3277;
                        float _3279 = _3278 * _3278;
                        float _3280 = _3259 + _3224;
                        float _3281 = _3260 + _3225;
                        float _3282 = _3261 + _3226;
                        float _3286 = inversesqrt(dot(vec3(_3280, _3281, _3282), vec3(_3280, _3281, _3282)));
                        float _3290 = dot(vec3(_959, _962, _965), vec3(_3259, _3260, _3261));
                        float _4648 = isnan(0.0) ? _3290 : (isnan(_3290) ? 0.0 : max(_3290, 0.0));
                        float _3293 = isnan(1.0) ? _4648 : (isnan(_4648) ? 1.0 : min(_4648, 1.0));
                        float _3294 = dot(vec3(_959, _962, _965), vec3(_3286 * _3280, _3286 * _3281, _3286 * _3282));
                        float _4659 = isnan(0.0) ? _3294 : (isnan(_3294) ? 0.0 : max(_3294, 0.0));
                        float _3297 = isnan(1.0) ? _4659 : (isnan(_4659) ? 1.0 : min(_4659, 1.0));
                        float _3301 = ((_3297 * _3297) * (_3279 + (-1.0))) + 1.0;
                        float _3302 = _3237 * _3278;
                        float _3303 = _3302 * _3302;
                        float _3306 = ((1.0 - _3303) * _3227) + _3303;
                        float _4670 = isnan(0.0) ? _3306 : (isnan(_3306) ? 0.0 : max(_3306, 0.0));
                        float _3307 = isnan(1.0) ? _4670 : (isnan(_4670) ? 1.0 : min(_4670, 1.0));
                        float _3308 = 1.0 - _3278;
                        float _3318 = (0.5 / (((_3307 * ((_3293 * _3308) + _3278)) + 9.9999999392252902907785028219223e-09) + (((_3307 * _3308) + _3278) * _3293))) * _3307;
                        float _4681 = isnan(0.0) ? _3318 : (isnan(_3318) ? 0.0 : max(_3318, 0.0));
                        float _3329 = (((_3279 * 3.1415927410125732421875) * (isnan(1.0) ? _4681 : (isnan(_4681) ? 1.0 : min(_4681, 1.0)))) / ((_3301 * _3301) * ((_3244 * 2.1991131305694580078125) + 3.141590118408203125))) * _3233;
                        _3081 = (_3248 * _3196.x) + _3154;
                        _3082 = (_3248 * _3196.y) + _3155;
                        _3083 = (_3248 * _3196.z) + _3156;
                        _3078 = (_3329 * _3213.x) + _3151;
                        _3079 = (_3329 * _3213.y) + _3152;
                        _3080 = (_3329 * _3213.z) + _3153;
                        if (_3158 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3151 = _3078;
                            _3152 = _3079;
                            _3153 = _3080;
                            _3154 = _3081;
                            _3155 = _3082;
                            _3156 = _3083;
                            _3157 = _3158;
                        }
                    }
                    frontier_phi_66_pred = _3078;
                    frontier_phi_66_pred_1 = _3083;
                    frontier_phi_66_pred_2 = _3082;
                    frontier_phi_66_pred_3 = _3081;
                    frontier_phi_66_pred_4 = _3080;
                    frontier_phi_66_pred_5 = _3079;
                }
                _2854 = frontier_phi_66_pred;
                _2864 = frontier_phi_66_pred_1;
                _2862 = frontier_phi_66_pred_2;
                _2860 = frontier_phi_66_pred_3;
                _2858 = frontier_phi_66_pred_4;
                _2856 = frontier_phi_66_pred_5;
                uint _3013 = _3012 + 1u;
                if (_3013 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3006 = _2854;
                    _3007 = _2856;
                    _3008 = _2858;
                    _3009 = _2860;
                    _3010 = _2862;
                    _3011 = _2864;
                    _3012 = _3013;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2853 = _2854;
            _2855 = _2856;
            _2857 = _2858;
            _2859 = _2860;
            _2861 = _2862;
            _2863 = _2864;
        }
        uvec4 _2867 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2868 = _2867.z;
        uint _2870 = (_2868 >> 8u) & 15u;
        float _2974;
        float _2976;
        float _2978;
        float _2980;
        float _2982;
        float _2984;
        if (((4294967295u << _2870) & _2752) == 0u)
        {
            _2974 = _2853;
            _2976 = _2855;
            _2978 = _2857;
            _2980 = _2859;
            _2982 = _2861;
            _2984 = _2863;
        }
        else
        {
            float _2999 = inversesqrt(dot(vec3(_2706, _2707, _2708), vec3(_2706, _2707, _2708)));
            float _3000 = _2999 * _2706;
            float _3001 = _2999 * _2707;
            float _3002 = _2999 * _2708;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2870 < ((_2868 >> 12u) & 15u))
            {
                float _2975;
                float _2977;
                float _2979;
                float _2981;
                float _2983;
                float _2985;
                float _3134 = _2853;
                float _3135 = _2855;
                float _3136 = _2857;
                float _3137 = _2859;
                float _3138 = _2861;
                float _3139 = _2863;
                uint _3140 = _2870;
                uint _3149;
                bool _3150;
                for (;;)
                {
                    _3149 = texelFetch(g_lightClassification, int((((_2746 << 5u) + (_2732 << 9u)) + (_3140 << 2u)) >> 2u)).x;
                    _3150 = _3149 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_3150)
                    {
                        frontier_phi_77_pred = _3139;
                        frontier_phi_77_pred_1 = _3138;
                        frontier_phi_77_pred_2 = _3137;
                        frontier_phi_77_pred_3 = _3136;
                        frontier_phi_77_pred_4 = _3135;
                        frontier_phi_77_pred_5 = _3134;
                    }
                    else
                    {
                        float _3343;
                        float _3344;
                        float _3345;
                        float _3346;
                        float _3347;
                        float _3348;
                        float _3636;
                        float _3637;
                        float _3638;
                        float _3639;
                        float _3640;
                        float _3641;
                        float _3356 = _3134;
                        float _3357 = _3135;
                        float _3358 = _3136;
                        float _3359 = _3137;
                        float _3360 = _3138;
                        float _3361 = _3139;
                        uint _3362 = _3149;
                        uint _3363;
                        vec4 _3388;
                        float _3389;
                        vec4 _3404;
                        vec3 _3416;
                        vec4 _3431;
                        vec4 _3446;
                        float _3492;
                        bool _3493;
                        for (;;)
                        {
                            uint _3373 = ((_3140 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3362));
                            _3363 = (_3362 + 4294967295u) & _3362;
                            uint _3375 = _3373 * 40u;
                            _3388 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3375)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3375 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3375 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3375 + 3u)).x));
                            _3389 = _3388.w;
                            uint _3391 = (_3373 * 40u) + 4u;
                            _3404 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3391)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3391 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3391 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3391 + 3u)).x));
                            uint _3406 = (_3373 * 40u) + 8u;
                            _3416 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3406)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3406 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3406 + 2u)).x));
                            uint _3418 = (_3373 * 40u) + 16u;
                            _3431 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3418)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3418 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3418 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3418 + 3u)).x));
                            uint _3433 = (_3373 * 40u) + 20u;
                            _3446 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3433)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3433 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3433 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3433 + 3u)).x));
                            uint _3448 = (_3373 * 40u) + 24u;
                            vec4 _3461 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3448)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3448 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3448 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3448 + 3u)).x));
                            uint _3467 = (_3373 * 40u) + 28u;
                            vec4 _3480 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3467)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3467 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3467 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3467 + 3u)).x));
                            _3492 = fma(_2708, _3480.z, fma(_2707, _3480.y, _3480.x * _2706)) + _3480.w;
                            _3493 = !((fma(_2708, _3461.z, fma(_2707, _3461.y, _3461.x * _2706)) + _3461.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3493)
                            {
                                float _3520 = _3388.x - _2706;
                                float _3521 = _3388.y - _2707;
                                float _3522 = _3388.z - _2708;
                                float _3523 = dot(vec3(_3520, _3521, _3522), vec3(_3520, _3521, _3522));
                                float _3526 = inversesqrt(_3523);
                                float _3527 = _3526 * _3520;
                                float _3528 = _3526 * _3521;
                                float _3529 = _3526 * _3522;
                                float _3533 = 1.0 - (_3523 / (_3389 * _3389));
                                float _4692 = isnan(0.0) ? _3533 : (isnan(_3533) ? 0.0 : max(_3533, 0.0));
                                float _3534 = isnan(1.0) ? _4692 : (isnan(_4692) ? 1.0 : min(_4692, 1.0));
                                float _3538 = sqrt(_3523) * _3404.w;
                                float _3540 = 1.39999997615814208984375 / (_3538 + 1.39999997615814208984375);
                                float _3541 = _3540 * _3540;
                                float _3544 = ((1.0 - _3541) * dot(vec3(_3527, _3528, _3529), vec3(_959, _962, _965))) + _3541;
                                float _3547 = _3538 * _3538;
                                float _3551 = (fma(_2708, _3431.z, fma(_2707, _3431.y, _3431.x * _2706)) + _3431.w) / _3492;
                                float _3552 = (fma(_2708, _3446.z, fma(_2707, _3446.y, _3446.x * _2706)) + _3446.w) / _3492;
                                float _3556 = 1.0 - dot(vec2(_3551, _3552), vec2(_3551, _3552));
                                float _4708 = isnan(0.0) ? _3556 : (isnan(_3556) ? 0.0 : max(_3556, 0.0));
                                float _3557 = isnan(1.0) ? _4708 : (isnan(_4708) ? 1.0 : min(_4708, 1.0));
                                float _3558 = _3557 * (((isnan(0.0) ? _3544 : (isnan(_3544) ? 0.0 : max(_3544, 0.0))) * _3534) / ((_3547 * 0.699999988079071044921875) + 1.0));
                                float _3570 = exp2(log2(1.0 / ((_3547 * 3.5) + 5.0)) * 0.25);
                                float _3571 = 1.0 - _1019;
                                float _3578 = sqrt(1.0 - ((1.0 - (_3571 * _3571)) * (1.0 - (_3570 * _3570))));
                                float _3579 = _3578 * _3578;
                                float _3580 = _3579 * _3579;
                                float _3581 = _3527 - _3000;
                                float _3582 = _3528 - _3001;
                                float _3583 = _3529 - _3002;
                                float _3587 = inversesqrt(dot(vec3(_3581, _3582, _3583), vec3(_3581, _3582, _3583)));
                                float _3591 = dot(vec3(_959, _962, _965), vec3((-0.0) - _3000, (-0.0) - _3001, (-0.0) - _3002));
                                float _4719 = isnan(0.0) ? _3591 : (isnan(_3591) ? 0.0 : max(_3591, 0.0));
                                float _3594 = isnan(1.0) ? _4719 : (isnan(_4719) ? 1.0 : min(_4719, 1.0));
                                float _3595 = dot(vec3(_959, _962, _965), vec3(_3587 * _3581, _3587 * _3582, _3587 * _3583));
                                float _4730 = isnan(0.0) ? _3595 : (isnan(_3595) ? 0.0 : max(_3595, 0.0));
                                float _3598 = isnan(1.0) ? _4730 : (isnan(_4730) ? 1.0 : min(_4730, 1.0));
                                float _3602 = ((_3598 * _3598) * (_3580 + (-1.0))) + 1.0;
                                float _3603 = _3540 * _3579;
                                float _3604 = _3603 * _3603;
                                float _3610 = ((1.0 - _3604) * dot(vec3(_959, _962, _965), vec3(_3527, _3528, _3529))) + _3604;
                                float _4741 = isnan(0.0) ? _3610 : (isnan(_3610) ? 0.0 : max(_3610, 0.0));
                                float _3611 = isnan(1.0) ? _4741 : (isnan(_4741) ? 1.0 : min(_4741, 1.0));
                                float _3612 = 1.0 - _3579;
                                float _3622 = (0.5 / (((_3611 * ((_3594 * _3612) + _3579)) + 9.9999999392252902907785028219223e-09) + (((_3611 * _3612) + _3579) * _3594))) * _3611;
                                float _4752 = isnan(0.0) ? _3622 : (isnan(_3622) ? 0.0 : max(_3622, 0.0));
                                float _3632 = (_3557 * _3534) * (((_3580 * 3.1415927410125732421875) * (isnan(1.0) ? _4752 : (isnan(_4752) ? 1.0 : min(_4752, 1.0)))) / ((_3602 * _3602) * ((_3547 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3558 * _3404.y;
                                frontier_phi_83_pred_1 = _3558 * _3404.x;
                                frontier_phi_83_pred_2 = _3632 * _3416.z;
                                frontier_phi_83_pred_3 = _3632 * _3416.y;
                                frontier_phi_83_pred_4 = _3632 * _3416.x;
                                frontier_phi_83_pred_5 = _3558 * _3404.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3640 = frontier_phi_83_pred;
                            _3639 = frontier_phi_83_pred_1;
                            _3638 = frontier_phi_83_pred_2;
                            _3637 = frontier_phi_83_pred_3;
                            _3636 = frontier_phi_83_pred_4;
                            _3641 = frontier_phi_83_pred_5;
                            _3346 = _3639 + _3359;
                            _3347 = _3640 + _3360;
                            _3348 = _3641 + _3361;
                            _3343 = _3636 + _3356;
                            _3344 = _3637 + _3357;
                            _3345 = _3638 + _3358;
                            if (_3363 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3356 = _3343;
                                _3357 = _3344;
                                _3358 = _3345;
                                _3359 = _3346;
                                _3360 = _3347;
                                _3361 = _3348;
                                _3362 = _3363;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3348;
                        frontier_phi_77_pred_1 = _3347;
                        frontier_phi_77_pred_2 = _3346;
                        frontier_phi_77_pred_3 = _3345;
                        frontier_phi_77_pred_4 = _3344;
                        frontier_phi_77_pred_5 = _3343;
                    }
                    _2985 = frontier_phi_77_pred;
                    _2983 = frontier_phi_77_pred_1;
                    _2981 = frontier_phi_77_pred_2;
                    _2979 = frontier_phi_77_pred_3;
                    _2977 = frontier_phi_77_pred_4;
                    _2975 = frontier_phi_77_pred_5;
                    uint _3141 = _3140 + 1u;
                    if (_3141 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3134 = _2975;
                        _3135 = _2977;
                        _3136 = _2979;
                        _3137 = _2981;
                        _3138 = _2983;
                        _3139 = _2985;
                        _3140 = _3141;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2979;
                frontier_phi_58_59_ladder_1 = _2985;
                frontier_phi_58_59_ladder_2 = _2983;
                frontier_phi_58_59_ladder_3 = _2981;
                frontier_phi_58_59_ladder_4 = _2977;
                frontier_phi_58_59_ladder_5 = _2975;
            }
            else
            {
                frontier_phi_58_59_ladder = _2857;
                frontier_phi_58_59_ladder_1 = _2863;
                frontier_phi_58_59_ladder_2 = _2861;
                frontier_phi_58_59_ladder_3 = _2859;
                frontier_phi_58_59_ladder_4 = _2855;
                frontier_phi_58_59_ladder_5 = _2853;
            }
            _2974 = frontier_phi_58_59_ladder_5;
            _2976 = frontier_phi_58_59_ladder_4;
            _2978 = frontier_phi_58_59_ladder;
            _2980 = frontier_phi_58_59_ladder_3;
            _2982 = frontier_phi_58_59_ladder_2;
            _2984 = frontier_phi_58_59_ladder_1;
        }
        float _2989 = isnan(1.0) ? _1003 : (isnan(_1003) ? 1.0 : min(_1003, 1.0));
        _2765 = (_2989 * _2980) + _2217;
        _2767 = (_2989 * _2982) + _2219;
        _2769 = (_2989 * _2984) + _2221;
        _2771 = ((_2974 * 0.039999999105930328369140625) * _2989) + _2550;
        _2773 = ((_2976 * 0.039999999105930328369140625) * _2989) + _2552;
        _2775 = ((_2978 * 0.039999999105930328369140625) * _2989) + _2554;
    }
    else
    {
        _2765 = _2217;
        _2767 = _2219;
        _2769 = _2221;
        _2771 = _2550;
        _2773 = _2552;
        _2775 = _2554;
    }
    float _4768 = isnan(0.0) ? _988 : (isnan(_988) ? 0.0 : max(_988, 0.0));
    float _4779 = isnan(0.0) ? _989 : (isnan(_989) ? 0.0 : max(_989, 0.0));
    float _4790 = isnan(0.0) ? _990 : (isnan(_990) ? 0.0 : max(_990, 0.0));
    float _2792 = ((isnan(1.0) ? _4768 : (isnan(_4768) ? 1.0 : min(_4768, 1.0))) * (_2765 + ((isnan(0.0) ? _1759 : (isnan(_1759) ? 0.0 : max(_1759, 0.0))) * _1003))) + ((_2771 + ((isnan(0.0) ? _2049 : (isnan(_2049) ? 0.0 : max(_2049, 0.0))) * _1838)) * cbPerFrame._m0[3u].x);
    float _2793 = ((isnan(1.0) ? _4779 : (isnan(_4779) ? 1.0 : min(_4779, 1.0))) * (_2767 + ((isnan(0.0) ? _1762 : (isnan(_1762) ? 0.0 : max(_1762, 0.0))) * _1003))) + ((_2773 + ((isnan(0.0) ? _2052 : (isnan(_2052) ? 0.0 : max(_2052, 0.0))) * _1838)) * cbPerFrame._m0[3u].x);
    float _2794 = ((isnan(1.0) ? _4790 : (isnan(_4790) ? 1.0 : min(_4790, 1.0))) * (_2769 + ((isnan(0.0) ? _1765 : (isnan(_1765) ? 0.0 : max(_1765, 0.0))) * _1003))) + ((_2775 + ((isnan(0.0) ? _2055 : (isnan(_2055) ? 0.0 : max(_2055, 0.0))) * _1838)) * cbPerFrame._m0[3u].x);
    uint _2795 = _259 + 6u;
    float _2803 = _940 / cbSceneParam._m0[86u].x;
    float _2804 = _941 / cbSceneParam._m0[86u].y;
    vec4 _2818 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2803, _2804, (log2((isnan(cbSceneParam._m0[77u].w) ? _862 : (isnan(_862) ? cbSceneParam._m0[77u].w : min(_862, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2820 = _2818.x;
    float _2821 = _2818.y;
    float _2822 = _2818.z;
    float _2823 = _2818.w;
    float _2916;
    float _2918;
    float _2920;
    float _2922;
    if (_862 > cbSceneParam._m0[78u].w)
    {
        float _2878 = isnan(_862) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _862 : min(cbSceneParam._m0[80u].w, _862));
        float _2879 = _2878 / _862;
        float _2890 = _2879 * _913;
        float _2891 = _914 * _2879;
        float _2892 = (-0.0) - _2891;
        float _2894 = _2879 * _915;
        float _2896 = (cbSceneParam._m0[77u].w * _2892) / _2878;
        float _2897 = _2896 + cbSceneParam._m0[79u].w;
        float _2898 = cbSceneParam._m0[79u].w - _2891;
        float _2904 = sqrt(((_2890 * _2890) + (_2891 * _2891)) + (_2894 * _2894));
        float _2907 = (1.0 - (cbSceneParam._m0[77u].w / _2878)) * _2904;
        float _2912 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2914 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3091;
        if (abs((_2892 - _2896) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3091 = ((((_2897 > 0.0) ? exp2(_2912 * _2897) : (2.0 - exp2(_2914 * _2897))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2907;
        }
        else
        {
            float _3035 = 1.0 / cbSceneParam._m0[80u].x;
            float _3036 = isnan(_2898) ? _2897 : (isnan(_2897) ? _2898 : max(_2897, _2898));
            float _3037 = isnan(_2898) ? _2897 : (isnan(_2897) ? _2898 : min(_2897, _2898));
            float _3046 = isnan(0.0) ? _3036 : (isnan(_3036) ? 0.0 : min(_3036, 0.0));
            float _3047 = isnan(0.0) ? _3037 : (isnan(_3037) ? 0.0 : min(_3037, 0.0));
            _3091 = ((abs(_2904 / _2892) * cbSceneParam._m0[80u].y) * ((((_3046 - _3047) * 2.0) - ((exp2(_2912 * (isnan(0.0) ? _3036 : (isnan(_3036) ? 0.0 : max(_3036, 0.0)))) - exp2(_2912 * (isnan(0.0) ? _3037 : (isnan(_3037) ? 0.0 : max(_3037, 0.0))))) * _3035)) - ((exp2(_2914 * _3046) - exp2(_2914 * _3047)) * _3035))) + (_2907 * cbSceneParam._m0[80u].z);
        }
        vec4 _3093 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2803, _2804, 1.0), 0.0);
        float _3102 = exp2((_3091 * (-1.44269502162933349609375)) * (1.0 - _3093.w));
        float _3103 = log2(_3102);
        float _3119 = log2(_2823);
        _2916 = (exp2(_3119 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3103 * cbSceneParam._m0[78u].x)) * _3093.x) / cbSceneParam._m0[78u].x)) + _2820;
        _2918 = (exp2(_3119 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3103 * cbSceneParam._m0[78u].y)) * _3093.y) / cbSceneParam._m0[78u].y)) + _2821;
        _2920 = (exp2(_3119 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3103 * cbSceneParam._m0[78u].z)) * _3093.z) / cbSceneParam._m0[78u].z)) + _2822;
        _2922 = _3102 * _2823;
    }
    else
    {
        _2916 = _2820;
        _2918 = _2821;
        _2920 = _2822;
        _2922 = _2823;
    }
    bool _3129;
    vec4 _2932;
    vec4 _2954;
    float _2956;
    float _2960;
    float _2961;
    float _2962;
    float _2963;
    bool _2973;
    for (;;)
    {
        _2932 = cbMatDynParam._m0[0u];
        float _2934 = roundEven(_2932.y);
        bool _2935 = _2934 == 3.0;
        float _2936 = log2(_2922);
        float _2943 = exp2(_2936 * cbSceneParam._m0[78u].x) * _2792;
        float _2944 = exp2(_2936 * cbSceneParam._m0[78u].y) * _2793;
        float _2945 = exp2(_2936 * cbSceneParam._m0[78u].z) * _2794;
        float _2952 = _929 + (-0.5);
        _2954 = cbMtdParam._m0[1u];
        _2956 = _2954.y * _2952;
        float _2959 = (_2934 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2960 = _2959 * (_2935 ? _2943 : (_2943 + (cbSceneParam._m0[72u].w * _2916)));
        _2961 = _2959 * (_2935 ? _2944 : (_2944 + (cbSceneParam._m0[72u].w * _2918)));
        _2962 = _2959 * (_2935 ? _2945 : (_2945 + (cbSceneParam._m0[72u].w * _2920)));
        _2963 = _2952 * 0.999000012874603271484375;
        _2973 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2973)
        {
            if ((cbInstanceData._m0[_259 + 7u].x + _2963) < 0.5)
            {
                _3129 = true;
                break;
            }
        }
        uint _3070 = _978 + uint(_2932.w);
        if ((cbInstanceData._m0[_3070].w < 1.0) && ((cbInstanceData._m0[_3070].w + _2963) < 0.5))
        {
            _3129 = true;
            break;
        }
        if ((_2956 + 1.0) < _2954.x)
        {
            _3129 = true;
            break;
        }
        _3129 = false;
        break;
    }
    float _3334;
    if (_3129)
    {
        discard_state = true;
        _3334 = 0.0;
    }
    else
    {
        _3334 = cbInstanceData._m0[_2795].w;
    }
    SV_Target.x = _2960;
    SV_Target.y = _2961;
    SV_Target.z = _2962;
    SV_Target.w = _3334;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2795].w;
    discard_exit();
}


