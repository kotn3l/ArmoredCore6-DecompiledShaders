#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_0;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 13) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_22;
layout(set = 0, binding = 14) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_29;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_10;
layout(set = 0, binding = 20) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_6;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1552;
float _3908;
float _3909;
float _3910;
float _3911;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _240 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _241 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _242 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _248 = inversesqrt(dot(vec3(_240, _241, _242), vec3(_240, _241, _242)));
    float _249 = _248 * _240;
    float _250 = _248 * _241;
    float _251 = _248 * _242;
    float _255 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _256 = _255 * NORMAL.x;
    float _257 = _255 * NORMAL.y;
    float _258 = _255 * NORMAL.z;
    float _262 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _263 = _262 * TANGENT.x;
    float _264 = _262 * TANGENT.y;
    float _265 = _262 * TANGENT.z;
    float _274 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _276 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _277 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3920 = isnan(0.0) ? _274 : (isnan(_274) ? 0.0 : max(_274, 0.0));
    float _3931 = isnan(0.0) ? _276 : (isnan(_276) ? 0.0 : max(_276, 0.0));
    float _3942 = isnan(0.0) ? _277 : (isnan(_277) ? 0.0 : max(_277, 0.0));
    uint _287 = uint(roundEven(NORMAL.w)) * 13u;
    uint _292 = _287 + 1u;
    uint _296 = _287 + 2u;
    float _305 = sqrt(((cbInstanceData._m0[_292].x * cbInstanceData._m0[_292].x) + (cbInstanceData._m0[_287].x * cbInstanceData._m0[_287].x)) + (cbInstanceData._m0[_296].x * cbInstanceData._m0[_296].x));
    float _306 = _305 * TEXCOORD.z;
    float _307 = _305 * TEXCOORD.w;
    vec4 _320 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _306) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _307) + cbTextureTilingScale._m0[13u].w));
    vec4 _343 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _369 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _374 = _369.x * cbMtdParam._m0[11u].x;
    float _375 = _369.y * cbMtdParam._m0[11u].y;
    float _376 = _369.z * cbMtdParam._m0[11u].z;
    vec4 _395 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _306) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _307) + cbTextureTilingScale._m0[5u].w));
    vec4 _414 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _449 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _451 = _449.x;
    float _463 = dot(vec4(_451, _449.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _480 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _414.x) * 2.0) - ((((_451 - _463) * cbMtdParam._m0[24u].z) + _463) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3953 = isnan(0.0) ? _480 : (isnan(_480) ? 0.0 : max(_480, 0.0));
    float _481 = isnan(1.0) ? _3953 : (isnan(_3953) ? 1.0 : min(_3953, 1.0));
    float _488 = (_481 * ((_395.x * cbMtdParam._m0[12u].x) - _374)) + _374;
    float _489 = (_481 * ((_395.y * cbMtdParam._m0[12u].y) - _375)) + _375;
    float _490 = (_481 * ((_395.z * cbMtdParam._m0[12u].z) - _376)) + _376;
    vec4 _507 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _306) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _307) + cbTextureTilingScale._m0[3u].w));
    vec4 _527 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _529 = _527.x;
    float _539 = dot(vec4(_529, _527.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _553 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _414.y) * 2.0) - ((((_529 - _539) * cbMtdParam._m0[24u].z) + _539) * cbMtdParam._m0[20u].w))) + 1.0;
    float _3964 = isnan(0.0) ? _553 : (isnan(_553) ? 0.0 : max(_553, 0.0));
    float _554 = isnan(1.0) ? _3964 : (isnan(_3964) ? 1.0 : min(_3964, 1.0));
    float _564 = (_343.x * cbMtdParam._m0[9u].x) * ((_554 * ((_507.x * cbMtdParam._m0[13u].x) - _488)) + _488);
    float _565 = (_343.y * cbMtdParam._m0[9u].y) * ((_554 * ((_507.y * cbMtdParam._m0[13u].y) - _489)) + _489);
    float _566 = (_343.z * cbMtdParam._m0[9u].z) * ((_554 * ((_507.z * cbMtdParam._m0[13u].z) - _490)) + _490);
    float _570 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _320.x) * _564;
    float _573 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _320.y) * _565;
    float _576 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _320.z) * _566;
    float _584 = (((_564 - _570) * (isnan(1.0) ? _3920 : (isnan(_3920) ? 1.0 : min(_3920, 1.0)))) + _570) * 4.55000019073486328125;
    float _586 = (((_565 - _573) * (isnan(1.0) ? _3931 : (isnan(_3931) ? 1.0 : min(_3931, 1.0)))) + _573) * 4.55000019073486328125;
    float _588 = (((_566 - _576) * (isnan(1.0) ? _3942 : (isnan(_3942) ? 1.0 : min(_3942, 1.0)))) + _576) * 4.55000019073486328125;
    vec4 _607 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _306) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _307) + cbTextureTilingScale._m0[14u].w));
    vec4 _626 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _306) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _307) + cbTextureTilingScale._m0[20u].w));
    vec4 _651 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _306) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _307) + cbTextureTilingScale._m0[4u].w));
    vec4 _668 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _670 = _668.x;
    float _671 = _668.y;
    float _672 = _668.z;
    float _679 = ((_651.x - _670) * _481) + _670;
    float _680 = ((_651.y - _671) * _481) + _671;
    float _681 = ((_651.z - _672) * _481) + _672;
    vec4 _693 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _306) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _307) + cbTextureTilingScale._m0[2u].w));
    float _706 = ((_693.z - _681) * _554) + _681;
    float _709 = ((((_693.x - _679) * _554) + _679) * 2.0) + (-1.0);
    float _710 = ((((_693.y - _680) * _554) + _680) * 2.0) + (-1.0);
    float _711 = dot(vec2(_709, _710), vec2(_709, _710));
    float _3975 = isnan(0.0) ? _711 : (isnan(_711) ? 0.0 : max(_711, 0.0));
    float _716 = sqrt(1.0 - (isnan(1.0) ? _3975 : (isnan(_3975) ? 1.0 : min(_3975, 1.0))));
    vec4 _734 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _746 = (_709 + ((((_626.x * 2.0) + (-1.0)) * TEXCOORD_11.x) * cbMtdParam._m0[20u].x)) + (((_734.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _747 = (_710 + ((((_626.y * 2.0) + (-1.0)) * TEXCOORD_11.y) * cbMtdParam._m0[20u].x)) + (((_734.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _750 = fma(_716, _256, fma(_747, _263, _746 * _249));
    float _753 = fma(_716, _257, fma(_747, _264, _746 * _250));
    float _756 = fma(_716, _258, fma(_747, _265, _746 * _251));
    float _760 = inversesqrt(dot(vec3(_750, _753, _756), vec3(_750, _753, _756)));
    vec4 _787 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _306) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _307) + cbTextureTilingScale._m0[11u].w));
    float _789 = _787.x;
    float _790 = 1.0 - _789;
    float _796 = (cbMtdParam._m0[19u].x + dot(vec4(_760 * _750, _760 * _753, _760 * _756, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_789 - _790) * cbMtdParam._m0[24u].w) + _790) * cbMtdParam._m0[21u].z);
    float _3986 = isnan(0.0) ? _796 : (isnan(_796) ? 0.0 : max(_796, 0.0));
    float _797 = isnan(1.0) ? _3986 : (isnan(_3986) ? 1.0 : min(_3986, 1.0));
    float _799 = (-0.0) - cbMtdParam._m0[24u].x;
    float _801 = isnan(0.0) ? _799 : (isnan(_799) ? 0.0 : max(_799, 0.0));
    float _802 = isnan(1.0) ? _801 : (isnan(_801) ? 1.0 : min(_801, 1.0));
    float _809 = _797 - ((_797 * TEXCOORD_8.x) * _802);
    float _810 = _797 - ((_797 * TEXCOORD_8.y) * _802);
    float _811 = _797 - ((_797 * TEXCOORD_8.z) * _802);
    float _818 = (_809 * ((_607.x * cbMtdParam._m0[18u].x) - _584)) + _584;
    float _819 = (_810 * ((_607.y * cbMtdParam._m0[18u].y) - _586)) + _586;
    float _820 = (_811 * ((_607.z * cbMtdParam._m0[18u].z) - _588)) + _588;
    vec4 _832 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _306) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _307) + cbTextureTilingScale._m0[19u].w));
    float _834 = _832.x;
    float _835 = 1.0 - _834;
    float _863 = (TEXCOORD_8.x - ((cbMtdParam._m0[22u].w * (1.0 - TEXCOORD_8.x)) * ((((_834 - _835) * cbMtdParam._m0[24u].y) + _835) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _4007 = isnan(0.0) ? _863 : (isnan(_863) ? 0.0 : max(_863, 0.0));
    float _864 = isnan(1.0) ? _4007 : (isnan(_4007) ? 1.0 : min(_4007, 1.0));
    float _872 = ((((cbMtdParam._m0[10u].x - _818) * TEXCOORD_8.x) * cbMtdParam._m0[23u].w) * _864) + _818;
    float _873 = ((((cbMtdParam._m0[10u].y - _819) * TEXCOORD_8.y) * cbMtdParam._m0[23u].w) * _864) + _819;
    float _874 = (((cbMtdParam._m0[23u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _820)) * _864) + _820;
    float _879 = (((_626.z - _706) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _706;
    float _883 = ((_734.z - _879) * cbMtdParam._m0[19u].w) + _879;
    vec4 _897 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _306) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _307) + cbTextureTilingScale._m0[15u].w));
    float _904 = (_897.x * 2.0) + (-1.0);
    float _905 = (_897.y * 2.0) + (-1.0);
    float _906 = dot(vec2(_904, _905), vec2(_904, _905));
    float _4018 = isnan(0.0) ? _906 : (isnan(_906) ? 0.0 : max(_906, 0.0));
    float _914 = ((_897.z - _883) * _809) + _883;
    float _917 = ((cbMtdParam._m0[23u].y - _914) * _864) + _914;
    vec4 _936 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _306) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _307) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _942 = (_936.x * 2.0) + (-1.0);
    float _943 = (_936.y * 2.0) + (-1.0);
    float _944 = dot(vec2(_942, _943), vec2(_942, _943));
    float _4029 = isnan(0.0) ? _944 : (isnan(_944) ? 0.0 : max(_944, 0.0));
    float _959 = ((sqrt(1.0 - (isnan(1.0) ? _4018 : (isnan(_4018) ? 1.0 : min(_4018, 1.0)))) - _716) * _811) + _716;
    float _962 = (((_904 - _746) * _809) + _746) + (cbMtdParam._m0[21u].x * _746);
    float _963 = (((_905 - _747) * _810) + _747) + (cbMtdParam._m0[21u].x * _747);
    float _974 = (((_942 - _962) + (_962 * cbMtdParam._m0[22u].z)) * _864) + _962;
    float _975 = (((_943 - _963) + (_963 * cbMtdParam._m0[22u].z)) * _864) + _963;
    float _976 = (_864 * (sqrt(1.0 - (isnan(1.0) ? _4029 : (isnan(_4029) ? 1.0 : min(_4029, 1.0)))) - _959)) + _959;
    float _978 = cbMtdParam._m0[22u].x + _734.w;
    float _981 = fma(_976, _256, fma(_975, _263, _974 * _249));
    float _984 = fma(_976, _257, fma(_975, _264, _974 * _250));
    float _987 = fma(_976, _258, fma(_975, _265, _974 * _251));
    float _991 = inversesqrt(dot(vec3(_981, _984, _987), vec3(_981, _984, _987)));
    float _992 = _991 * _981;
    float _993 = _991 * _984;
    float _994 = _991 * _987;
    float _4040 = isnan(0.0) ? _917 : (isnan(_917) ? 0.0 : max(_917, 0.0));
    float _995 = isnan(1.0) ? _4040 : (isnan(_4040) ? 1.0 : min(_4040, 1.0));
    float _4051 = isnan(0.0) ? _978 : (isnan(_978) ? 0.0 : max(_978, 0.0));
    float _4062 = isnan(0.0) ? _872 : (isnan(_872) ? 0.0 : max(_872, 0.0));
    float _4073 = isnan(0.0) ? _873 : (isnan(_873) ? 0.0 : max(_873, 0.0));
    float _4084 = isnan(0.0) ? _874 : (isnan(_874) ? 0.0 : max(_874, 0.0));
    float _1013 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _1053 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _1063 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _1053);
    float _1064 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _1053);
    float _1065 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _1053);
    float _1069 = inversesqrt(dot(vec3(_1063, _1064, _1065), vec3(_1063, _1064, _1065)));
    float _1070 = _1063 * _1069;
    float _1071 = _1064 * _1069;
    float _1072 = _1065 * _1069;
    vec4 _1077 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _1079 = _1077.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1233 = sqrt(((_1063 * _1063) + (_1064 * _1064)) + (_1065 * _1065));
        float _1239 = (cbMatDynParam._m0[5u].x * _1233) + cbMatDynParam._m0[5u].y;
        float _4095 = isnan(0.0) ? _1239 : (isnan(_1239) ? 0.0 : max(_1239, 0.0));
        float _1240 = isnan(1.0) ? _4095 : (isnan(_4095) ? 1.0 : min(_4095, 1.0));
        float _1244 = (cbMatDynParam._m0[5u].z * _1233) + cbMatDynParam._m0[5u].w;
        float _4106 = isnan(0.0) ? _1244 : (isnan(_1244) ? 0.0 : max(_1244, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4106 : (isnan(_4106) ? 1.0 : min(_4106, 1.0))) - _1240)) + _1240) < ((_1079 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _1090 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1091 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1109 = fma(_994, cbSceneParam._m0[5u].z, fma(_993, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _992));
    float _1112 = fma(_994, cbSceneParam._m0[6u].z, fma(_993, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _992));
    float _1115 = fma(_994, cbSceneParam._m0[7u].z, fma(_993, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _992));
    uint _1128 = _287 + 9u;
    uint _1129 = _1128 + uint(cbMatDynParam._m0[0u].w);
    float _1135 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4062 : (isnan(_4062) ? 1.0 : min(_4062, 1.0)))) * cbInstanceData._m0[_1129].x;
    float _1136 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4073 : (isnan(_4073) ? 1.0 : min(_4073, 1.0)))) * cbInstanceData._m0[_1129].y;
    float _1137 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4084 : (isnan(_4084) ? 1.0 : min(_4084, 1.0)))) * cbInstanceData._m0[_1129].z;
    float _4117 = isnan(0.0) ? _1135 : (isnan(_1135) ? 0.0 : max(_1135, 0.0));
    float _1138 = isnan(1.0) ? _4117 : (isnan(_4117) ? 1.0 : min(_4117, 1.0));
    float _4128 = isnan(0.0) ? _1136 : (isnan(_1136) ? 0.0 : max(_1136, 0.0));
    float _1139 = isnan(1.0) ? _4128 : (isnan(_4128) ? 1.0 : min(_4128, 1.0));
    float _4139 = isnan(0.0) ? _1137 : (isnan(_1137) ? 0.0 : max(_1137, 0.0));
    float _1140 = isnan(1.0) ? _4139 : (isnan(_4139) ? 1.0 : min(_4139, 1.0));
    vec4 _1149 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1090, cbSceneParam._m0[86u].y * _1091));
    float _1153 = ((isnan(1.0) ? _4051 : (isnan(_4051) ? 1.0 : min(_4051, 1.0))) * TEXCOORD_5.w) * _1149.x;
    float _1154 = dot(vec3(_992, _993, _994), vec3(_1070, _1071, _1072));
    float _1157 = _1154 * 2.0;
    float _1161 = (_1157 * _992) - _1070;
    float _1162 = (_1157 * _993) - _1071;
    float _1163 = (_1157 * _994) - _1072;
    float _1167 = abs(dot(vec3(_1070, _1071, _1072), vec3(_992, _993, _994)));
    float _4150 = isnan(0.0) ? _1167 : (isnan(_1167) ? 0.0 : max(_1167, 0.0));
    float _1169 = sqrt(_995);
    float _1182 = exp2((_1169 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4150 : (isnan(_4150) ? 1.0 : min(_4150, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1169 * 3.0));
    float _1214 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1218 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1222 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1551;
    float _1553;
    float _1554;
    float _1555;
    float _1556;
    float _1557;
    float _1558;
    float _1559;
    float _1560;
    float _1561;
    float _1562;
    float _1563;
    float _1564;
    float _1565;
    float _1566;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1276 = fma(_1222, cbModelParam._m0[26u].z, fma(_1218, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1214));
        float _1280 = fma(_1222, cbModelParam._m0[27u].z, fma(_1218, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1214));
        float _1284 = fma(_1222, cbModelParam._m0[28u].z, fma(_1218, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1214));
        float _1309 = _1214 + _992;
        float _1310 = _1218 + _993;
        float _1311 = _1222 + _994;
        float _1321 = fma(_1311, cbModelParam._m0[26u].z, fma(_1310, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1309)) - _1276;
        float _1322 = fma(_1311, cbModelParam._m0[27u].z, fma(_1310, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1309)) - _1280;
        float _1323 = fma(_1311, cbModelParam._m0[28u].z, fma(_1310, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1309)) - _1284;
        float _1327 = inversesqrt(dot(vec3(_1321, _1322, _1323), vec3(_1321, _1322, _1323)));
        float _1340 = ((_1327 * _1321) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1276 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1341 = ((_1327 * _1322) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1280 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1342 = ((_1327 * _1323) / cbModelParam._m0[34u].z) + ((((((_1284 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1345 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1340, _1341, _1342), 0.0);
        vec4 _1352 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1340, _1341, _1342), 0.0);
        vec4 _1359 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1340, _1341, _1342), 0.0);
        vec4 _1366 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1340, _1341, _1342), 0.0);
        float _1379 = exp2((_1345.w + (-0.5)) * 20.0) * 2.0;
        float _1380 = _1379 * (_1345.x + (-0.5));
        float _1381 = _1379 * (_1345.y + (-0.5));
        float _1382 = _1379 * (_1345.z + (-0.5));
        float _1389 = exp2((_1352.w + (-0.5)) * 20.0) * 2.0;
        float _1390 = _1389 * (_1352.x + (-0.5));
        float _1391 = _1389 * (_1352.y + (-0.5));
        float _1392 = _1389 * (_1352.z + (-0.5));
        float _1399 = exp2((_1359.w + (-0.5)) * 20.0) * 2.0;
        float _1400 = _1399 * (_1359.x + (-0.5));
        float _1401 = _1399 * (_1359.y + (-0.5));
        float _1402 = _1399 * (_1359.z + (-0.5));
        float _1409 = exp2((_1366.w + (-0.5)) * 20.0) * 2.0;
        float _1410 = _1409 * (_1366.x + (-0.5));
        float _1411 = _1409 * (_1366.y + (-0.5));
        float _1412 = _1409 * (_1366.z + (-0.5));
        float _1413 = isnan(0.0) ? _1410 : (isnan(_1410) ? 0.0 : max(_1410, 0.0));
        float _1414 = isnan(0.0) ? _1411 : (isnan(_1411) ? 0.0 : max(_1411, 0.0));
        float _1415 = isnan(0.0) ? _1412 : (isnan(_1412) ? 0.0 : max(_1412, 0.0));
        float _1416 = _1380 * 0.5;
        float _1417 = _1390 * 0.5;
        float _1418 = _1400 * 0.5;
        float _1419 = dot(vec3(_1416, _1417, _1418), vec3(_1416, _1417, _1418));
        float _1424 = (_1419 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1419);
        float _1433 = (dot(vec3(_992, _993, _994), vec3(_1424 * _1416, _1424 * _1417, _1424 * _1418)) + 1.0) * 0.5;
        float _4176 = isnan(0.0) ? _1433 : (isnan(_1433) ? 0.0 : max(_1433, 0.0));
        float _1443 = sqrt(((_1417 * _1417) + (_1416 * _1416)) + (_1418 * _1418)) / (_1413 + 9.9999997473787516355514526367188e-06);
        float _4187 = isnan(0.0) ? _1443 : (isnan(_1443) ? 0.0 : max(_1443, 0.0));
        float _1444 = isnan(1.0) ? _4187 : (isnan(_4187) ? 1.0 : min(_4187, 1.0));
        float _1445 = _1444 * 2.0;
        float _1449 = (1.0 - _1444) / (_1444 + 1.0);
        float _4198 = isnan(0.0) ? _1449 : (isnan(_1449) ? 0.0 : max(_1449, 0.0));
        float _1450 = isnan(1.0) ? _4198 : (isnan(_4198) ? 1.0 : min(_4198, 1.0));
        float _1459 = ((((1.0 - _1450) * (_1445 + 2.0)) * exp2(log2(isnan(1.0) ? _4176 : (isnan(_4176) ? 1.0 : min(_4176, 1.0))) * (_1445 + 1.0))) + _1450) * _1413;
        float _1460 = _1381 * 0.5;
        float _1461 = _1391 * 0.5;
        float _1462 = _1401 * 0.5;
        float _1463 = dot(vec3(_1460, _1461, _1462), vec3(_1460, _1461, _1462));
        float _1468 = (_1463 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1463);
        float _1476 = (dot(vec3(_992, _993, _994), vec3(_1468 * _1460, _1468 * _1461, _1468 * _1462)) + 1.0) * 0.5;
        float _4209 = isnan(0.0) ? _1476 : (isnan(_1476) ? 0.0 : max(_1476, 0.0));
        float _1485 = sqrt(((_1461 * _1461) + (_1460 * _1460)) + (_1462 * _1462)) / (_1414 + 9.9999997473787516355514526367188e-06);
        float _4220 = isnan(0.0) ? _1485 : (isnan(_1485) ? 0.0 : max(_1485, 0.0));
        float _1486 = isnan(1.0) ? _4220 : (isnan(_4220) ? 1.0 : min(_4220, 1.0));
        float _1487 = _1486 * 2.0;
        float _1491 = (1.0 - _1486) / (_1486 + 1.0);
        float _4231 = isnan(0.0) ? _1491 : (isnan(_1491) ? 0.0 : max(_1491, 0.0));
        float _1492 = isnan(1.0) ? _4231 : (isnan(_4231) ? 1.0 : min(_4231, 1.0));
        float _1501 = ((((1.0 - _1492) * (_1487 + 2.0)) * exp2(log2(isnan(1.0) ? _4209 : (isnan(_4209) ? 1.0 : min(_4209, 1.0))) * (_1487 + 1.0))) + _1492) * _1414;
        float _1502 = _1382 * 0.5;
        float _1503 = _1392 * 0.5;
        float _1504 = _1402 * 0.5;
        float _1505 = dot(vec3(_1502, _1503, _1504), vec3(_1502, _1503, _1504));
        float _1510 = (_1505 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1505);
        float _1518 = (dot(vec3(_992, _993, _994), vec3(_1510 * _1502, _1510 * _1503, _1510 * _1504)) + 1.0) * 0.5;
        float _4242 = isnan(0.0) ? _1518 : (isnan(_1518) ? 0.0 : max(_1518, 0.0));
        float _1527 = sqrt(((_1503 * _1503) + (_1502 * _1502)) + (_1504 * _1504)) / (_1415 + 9.9999997473787516355514526367188e-06);
        float _4253 = isnan(0.0) ? _1527 : (isnan(_1527) ? 0.0 : max(_1527, 0.0));
        float _1528 = isnan(1.0) ? _4253 : (isnan(_4253) ? 1.0 : min(_4253, 1.0));
        float _1529 = _1528 * 2.0;
        float _1533 = (1.0 - _1528) / (_1528 + 1.0);
        float _4264 = isnan(0.0) ? _1533 : (isnan(_1533) ? 0.0 : max(_1533, 0.0));
        float _1534 = isnan(1.0) ? _4264 : (isnan(_4264) ? 1.0 : min(_4264, 1.0));
        float _1543 = ((((1.0 - _1534) * (_1529 + 2.0)) * exp2(log2(isnan(1.0) ? _4242 : (isnan(_4242) ? 1.0 : min(_4242, 1.0))) * (_1529 + 1.0))) + _1534) * _1415;
        _1551 = _1382;
        _1553 = _1381;
        _1554 = _1380;
        _1555 = _1392;
        _1556 = _1391;
        _1557 = _1390;
        _1558 = _1402;
        _1559 = _1401;
        _1560 = _1400;
        _1561 = _1415;
        _1562 = _1414;
        _1563 = _1413;
        _1564 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1459 : (isnan(_1459) ? 0.0 : max(_1459, 0.0)));
        _1565 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1501 : (isnan(_1501) ? 0.0 : max(_1501, 0.0)));
        _1566 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1543 : (isnan(_1543) ? 0.0 : max(_1543, 0.0)));
    }
    else
    {
        _1551 = _1552;
        _1553 = _1552;
        _1554 = _1552;
        _1555 = _1552;
        _1556 = _1552;
        _1557 = _1552;
        _1558 = _1552;
        _1559 = _1552;
        _1560 = _1552;
        _1561 = _1552;
        _1562 = _1552;
        _1563 = _1552;
        _1564 = 0.0;
        _1565 = 0.0;
        _1566 = 0.0;
    }
    float _1862;
    float _1863;
    float _1864;
    float _1865;
    float _1866;
    float _1867;
    float _1868;
    float _1869;
    float _1870;
    float _1871;
    float _1872;
    float _1873;
    float _1874;
    float _1875;
    float _1876;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1593 = fma(_1222, cbModelParam._m0[30u].z, fma(_1218, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1214));
        float _1597 = fma(_1222, cbModelParam._m0[31u].z, fma(_1218, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1214));
        float _1601 = fma(_1222, cbModelParam._m0[32u].z, fma(_1218, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1214));
        float _1624 = _1214 + _992;
        float _1625 = _1218 + _993;
        float _1626 = _1222 + _994;
        float _1636 = fma(_1626, cbModelParam._m0[30u].z, fma(_1625, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1624)) - _1593;
        float _1637 = fma(_1626, cbModelParam._m0[31u].z, fma(_1625, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1624)) - _1597;
        float _1638 = fma(_1626, cbModelParam._m0[32u].z, fma(_1625, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1624)) - _1601;
        float _1642 = inversesqrt(dot(vec3(_1636, _1637, _1638), vec3(_1636, _1637, _1638)));
        float _1655 = ((_1642 * _1636) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1593 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1656 = ((_1642 * _1637) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1597 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1657 = ((_1642 * _1638) / cbModelParam._m0[35u].z) + ((((((_1601 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1659 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1655, _1656, _1657), 0.0);
        vec4 _1666 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1655, _1656, _1657), 0.0);
        vec4 _1673 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1655, _1656, _1657), 0.0);
        vec4 _1680 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1655, _1656, _1657), 0.0);
        float _1692 = exp2((_1659.w + (-0.5)) * 20.0) * 2.0;
        float _1693 = _1692 * (_1659.x + (-0.5));
        float _1694 = _1692 * (_1659.y + (-0.5));
        float _1695 = _1692 * (_1659.z + (-0.5));
        float _1702 = exp2((_1666.w + (-0.5)) * 20.0) * 2.0;
        float _1703 = _1702 * (_1666.x + (-0.5));
        float _1704 = _1702 * (_1666.y + (-0.5));
        float _1705 = _1702 * (_1666.z + (-0.5));
        float _1712 = exp2((_1673.w + (-0.5)) * 20.0) * 2.0;
        float _1713 = _1712 * (_1673.x + (-0.5));
        float _1714 = _1712 * (_1673.y + (-0.5));
        float _1715 = _1712 * (_1673.z + (-0.5));
        float _1722 = exp2((_1680.w + (-0.5)) * 20.0) * 2.0;
        float _1723 = _1722 * (_1680.x + (-0.5));
        float _1724 = _1722 * (_1680.y + (-0.5));
        float _1725 = _1722 * (_1680.z + (-0.5));
        float _1726 = isnan(0.0) ? _1723 : (isnan(_1723) ? 0.0 : max(_1723, 0.0));
        float _1727 = isnan(0.0) ? _1724 : (isnan(_1724) ? 0.0 : max(_1724, 0.0));
        float _1728 = isnan(0.0) ? _1725 : (isnan(_1725) ? 0.0 : max(_1725, 0.0));
        float _1729 = _1693 * 0.5;
        float _1730 = _1703 * 0.5;
        float _1731 = _1713 * 0.5;
        float _1732 = dot(vec3(_1729, _1730, _1731), vec3(_1729, _1730, _1731));
        float _1737 = (_1732 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1732);
        float _1745 = (dot(vec3(_992, _993, _994), vec3(_1737 * _1729, _1737 * _1730, _1737 * _1731)) + 1.0) * 0.5;
        float _4305 = isnan(0.0) ? _1745 : (isnan(_1745) ? 0.0 : max(_1745, 0.0));
        float _1754 = sqrt(((_1730 * _1730) + (_1729 * _1729)) + (_1731 * _1731)) / (_1726 + 9.9999997473787516355514526367188e-06);
        float _4316 = isnan(0.0) ? _1754 : (isnan(_1754) ? 0.0 : max(_1754, 0.0));
        float _1755 = isnan(1.0) ? _4316 : (isnan(_4316) ? 1.0 : min(_4316, 1.0));
        float _1756 = _1755 * 2.0;
        float _1760 = (1.0 - _1755) / (_1755 + 1.0);
        float _4327 = isnan(0.0) ? _1760 : (isnan(_1760) ? 0.0 : max(_1760, 0.0));
        float _1761 = isnan(1.0) ? _4327 : (isnan(_4327) ? 1.0 : min(_4327, 1.0));
        float _1770 = ((((1.0 - _1761) * (_1756 + 2.0)) * exp2(log2(isnan(1.0) ? _4305 : (isnan(_4305) ? 1.0 : min(_4305, 1.0))) * (_1756 + 1.0))) + _1761) * _1726;
        float _1771 = _1694 * 0.5;
        float _1772 = _1704 * 0.5;
        float _1773 = _1714 * 0.5;
        float _1774 = dot(vec3(_1771, _1772, _1773), vec3(_1771, _1772, _1773));
        float _1779 = (_1774 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1774);
        float _1787 = (dot(vec3(_992, _993, _994), vec3(_1779 * _1771, _1779 * _1772, _1779 * _1773)) + 1.0) * 0.5;
        float _4338 = isnan(0.0) ? _1787 : (isnan(_1787) ? 0.0 : max(_1787, 0.0));
        float _1796 = sqrt(((_1772 * _1772) + (_1771 * _1771)) + (_1773 * _1773)) / (_1727 + 9.9999997473787516355514526367188e-06);
        float _4349 = isnan(0.0) ? _1796 : (isnan(_1796) ? 0.0 : max(_1796, 0.0));
        float _1797 = isnan(1.0) ? _4349 : (isnan(_4349) ? 1.0 : min(_4349, 1.0));
        float _1798 = _1797 * 2.0;
        float _1802 = (1.0 - _1797) / (_1797 + 1.0);
        float _4360 = isnan(0.0) ? _1802 : (isnan(_1802) ? 0.0 : max(_1802, 0.0));
        float _1803 = isnan(1.0) ? _4360 : (isnan(_4360) ? 1.0 : min(_4360, 1.0));
        float _1812 = ((((1.0 - _1803) * (_1798 + 2.0)) * exp2(log2(isnan(1.0) ? _4338 : (isnan(_4338) ? 1.0 : min(_4338, 1.0))) * (_1798 + 1.0))) + _1803) * _1727;
        float _1813 = _1695 * 0.5;
        float _1814 = _1705 * 0.5;
        float _1815 = _1715 * 0.5;
        float _1816 = dot(vec3(_1813, _1814, _1815), vec3(_1813, _1814, _1815));
        float _1821 = (_1816 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1816);
        float _1829 = (dot(vec3(_992, _993, _994), vec3(_1821 * _1813, _1821 * _1814, _1821 * _1815)) + 1.0) * 0.5;
        float _4371 = isnan(0.0) ? _1829 : (isnan(_1829) ? 0.0 : max(_1829, 0.0));
        float _1838 = sqrt(((_1814 * _1814) + (_1813 * _1813)) + (_1815 * _1815)) / (_1728 + 9.9999997473787516355514526367188e-06);
        float _4382 = isnan(0.0) ? _1838 : (isnan(_1838) ? 0.0 : max(_1838, 0.0));
        float _1839 = isnan(1.0) ? _4382 : (isnan(_4382) ? 1.0 : min(_4382, 1.0));
        float _1840 = _1839 * 2.0;
        float _1844 = (1.0 - _1839) / (_1839 + 1.0);
        float _4393 = isnan(0.0) ? _1844 : (isnan(_1844) ? 0.0 : max(_1844, 0.0));
        float _1845 = isnan(1.0) ? _4393 : (isnan(_4393) ? 1.0 : min(_4393, 1.0));
        float _1854 = ((((1.0 - _1845) * (_1840 + 2.0)) * exp2(log2(isnan(1.0) ? _4371 : (isnan(_4371) ? 1.0 : min(_4371, 1.0))) * (_1840 + 1.0))) + _1845) * _1728;
        _1862 = _1695;
        _1863 = _1694;
        _1864 = _1693;
        _1865 = _1705;
        _1866 = _1704;
        _1867 = _1703;
        _1868 = _1715;
        _1869 = _1714;
        _1870 = _1713;
        _1871 = _1728;
        _1872 = _1727;
        _1873 = _1726;
        _1874 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1770 : (isnan(_1770) ? 0.0 : max(_1770, 0.0)));
        _1875 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1812 : (isnan(_1812) ? 0.0 : max(_1812, 0.0)));
        _1876 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1854 : (isnan(_1854) ? 0.0 : max(_1854, 0.0)));
    }
    else
    {
        _1862 = _1552;
        _1863 = _1552;
        _1864 = _1552;
        _1865 = _1552;
        _1866 = _1552;
        _1867 = _1552;
        _1868 = _1552;
        _1869 = _1552;
        _1870 = _1552;
        _1871 = _1552;
        _1872 = _1552;
        _1873 = _1552;
        _1874 = 0.0;
        _1875 = 0.0;
        _1876 = 0.0;
    }
    float _1886 = (cbModelParam._m0[1u].x * (_1874 - _1564)) + _1564;
    float _1887 = (cbModelParam._m0[1u].x * (_1875 - _1565)) + _1565;
    float _1888 = (cbModelParam._m0[1u].x * (_1876 - _1566)) + _1566;
    float _1909 = fma(_1888, cbSceneParam._m0[89u].z, fma(_1887, cbSceneParam._m0[89u].y, _1886 * cbSceneParam._m0[89u].x));
    float _1912 = fma(_1888, cbSceneParam._m0[90u].z, fma(_1887, cbSceneParam._m0[90u].y, _1886 * cbSceneParam._m0[90u].x));
    float _1915 = fma(_1888, cbSceneParam._m0[91u].z, fma(_1887, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1886));
    float _1930 = _1161 * 0.5;
    float _1931 = _1162 * 0.5;
    float _1932 = _1163 * 0.5;
    float _1933 = dot(vec4(_1930, _1931, _1932, 1.0), vec4(_1864, _1867, _1870, _1873));
    float _1936 = dot(vec4(_1930, _1931, _1932, 1.0), vec4(_1863, _1866, _1869, _1872));
    float _1939 = dot(vec4(_1930, _1931, _1932, 1.0), vec4(_1862, _1865, _1868, _1871));
    float _1973;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1946 = dot(vec4(_1930, _1931, _1932, 1.0), vec4(_1551, _1555, _1558, _1561));
        float _1950 = dot(vec4(_1930, _1931, _1932, 1.0), vec4(_1553, _1556, _1559, _1562));
        float _1954 = dot(vec4(_1930, _1931, _1932, 1.0), vec4(_1554, _1557, _1560, _1563));
        float _1961 = dot(vec4(cbModelParam._m0[39u]), vec4(_1930, _1931, _1932, 1.0));
        _1973 = dot(vec3(isnan(0.0) ? _1954 : (isnan(_1954) ? 0.0 : max(_1954, 0.0)), isnan(0.0) ? _1950 : (isnan(_1950) ? 0.0 : max(_1950, 0.0)), isnan(0.0) ? _1946 : (isnan(_1946) ? 0.0 : max(_1946, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1961) ? 0.0 : (isnan(0.0) ? _1961 : max(0.0, _1961))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1973 = 1.0;
    }
    float _1984;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1975 = dot(vec4(cbModelParam._m0[40u]), vec4(_1930, _1931, _1932, 1.0));
        _1984 = dot(vec3(isnan(0.0) ? _1933 : (isnan(_1933) ? 0.0 : max(_1933, 0.0)), isnan(0.0) ? _1936 : (isnan(_1936) ? 0.0 : max(_1936, 0.0)), isnan(0.0) ? _1939 : (isnan(_1939) ? 0.0 : max(_1939, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1975) ? 0.0 : (isnan(0.0) ? _1975 : max(0.0, _1975))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1984 = 1.0;
    }
    float _1988 = (_1984 * cbModelParam._m0[1u].x) + (_1973 * (1.0 - cbModelParam._m0[1u].x));
    float _1998 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _995);
    float _1999 = isnan(_1998) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1998 : min(cbModelParam._m0[25u].z, _1998));
    float _2079;
    float _2081;
    float _2083;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _2046 = fma(_1222, cbModelParam._m0[13u].z, fma(_1218, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1214)) + cbModelParam._m0[13u].w;
        float _2050 = fma(_1222, cbModelParam._m0[14u].z, fma(_1218, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1214)) + cbModelParam._m0[14u].w;
        float _2054 = fma(_1222, cbModelParam._m0[15u].z, fma(_1218, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1214)) + cbModelParam._m0[15u].w;
        float _2057 = fma(_1163, cbModelParam._m0[13u].z, fma(_1162, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1161));
        float _2060 = fma(_1163, cbModelParam._m0[14u].z, fma(_1162, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1161));
        float _2063 = fma(_1163, cbModelParam._m0[15u].z, fma(_1162, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1161));
        float _2091;
        if (_2057 > 0.0)
        {
            _2091 = abs((1.0 - _2046) / _2057);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_2057 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_2046 + 1.0) / _2057);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _2091 = frontier_phi_17_15_ladder;
        }
        float _2291;
        if (_2060 > 0.0)
        {
            _2291 = abs((1.0 - _2050) / _2060);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_2060 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_2050 + 1.0) / _2060);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2291 = frontier_phi_26_22_ladder;
        }
        float _2534;
        if (_2063 > 0.0)
        {
            _2534 = abs((1.0 - _2054) / _2063);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_2063 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_2054 + 1.0) / _2063);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2534 = frontier_phi_38_33_ladder;
        }
        float _2536 = isnan(_2291) ? _2091 : (isnan(_2091) ? _2291 : min(_2091, _2291));
        float _2537 = isnan(_2534) ? _2536 : (isnan(_2536) ? _2534 : min(_2536, _2534));
        float _2541 = (_2537 * _2057) + _2046;
        float _2542 = (_2537 * _2060) + _2050;
        float _2543 = (_2537 * _2063) + _2054;
        float _2544 = _2537 * 9.9999997473787516355514526367188e-05;
        float _2546 = (-1.0) - _2544;
        float _2548 = _2544 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2543 > _2548) || ((_2543 < _2546) || ((_2542 > _2548) || ((_2542 < _2546) || ((_2541 < _2546) || (_2541 > _2548))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2667 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2543, cbModelParam._m0[9u].z, fma(_2542, cbModelParam._m0[9u].y, _2541 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2543, cbModelParam._m0[10u].z, fma(_2542, cbModelParam._m0[10u].y, _2541 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2543, cbModelParam._m0[11u].z, fma(_2542, cbModelParam._m0[11u].y, _2541 * cbModelParam._m0[11u].x))), _1999);
            frontier_phi_16_38_ladder = _2667.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2667.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2667.x * cbModelParam._m0[1u].y;
        }
        _2079 = frontier_phi_16_38_ladder_2;
        _2081 = frontier_phi_16_38_ladder_1;
        _2083 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _2067 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1161, _1162, _1163), _1999);
        _2079 = _2067.x * cbModelParam._m0[1u].y;
        _2081 = _2067.y * cbModelParam._m0[1u].y;
        _2083 = _2067.z * cbModelParam._m0[1u].y;
    }
    float _2087 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _995);
    float _2088 = isnan(_2087) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2087 : min(cbModelParam._m0[25u].w, _2087));
    float _2177;
    float _2179;
    float _2181;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2141 = fma(_1222, cbModelParam._m0[21u].z, fma(_1218, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1214)) + cbModelParam._m0[21u].w;
        float _2145 = fma(_1222, cbModelParam._m0[22u].z, fma(_1218, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1214)) + cbModelParam._m0[22u].w;
        float _2149 = fma(_1222, cbModelParam._m0[23u].z, fma(_1218, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1214)) + cbModelParam._m0[23u].w;
        float _2152 = fma(_1163, cbModelParam._m0[21u].z, fma(_1162, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1161));
        float _2155 = fma(_1163, cbModelParam._m0[22u].z, fma(_1162, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1161));
        float _2158 = fma(_1163, cbModelParam._m0[23u].z, fma(_1162, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1161));
        float _2296;
        if (_2152 > 0.0)
        {
            _2296 = abs((1.0 - _2141) / _2152);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_2152 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_2141 + 1.0) / _2152);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2296 = frontier_phi_28_24_ladder;
        }
        float _2561;
        if (_2155 > 0.0)
        {
            _2561 = abs((1.0 - _2145) / _2155);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_2155 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_2145 + 1.0) / _2155);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2561 = frontier_phi_40_35_ladder;
        }
        float _2766;
        if (_2158 > 0.0)
        {
            _2766 = abs((1.0 - _2149) / _2158);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_2158 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_2149 + 1.0) / _2158);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2766 = frontier_phi_49_46_ladder;
        }
        float _2768 = isnan(_2561) ? _2296 : (isnan(_2296) ? _2561 : min(_2296, _2561));
        float _2769 = isnan(_2766) ? _2768 : (isnan(_2768) ? _2766 : min(_2768, _2766));
        float _2773 = (_2769 * _2152) + _2141;
        float _2774 = (_2769 * _2155) + _2145;
        float _2775 = (_2769 * _2158) + _2149;
        float _2776 = _2769 * 9.9999997473787516355514526367188e-05;
        float _2777 = (-1.0) - _2776;
        float _2779 = _2776 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2775 > _2779) || ((_2775 < _2777) || ((_2774 > _2779) || ((_2774 < _2777) || ((_2773 < _2777) || (_2773 > _2779))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2974 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2775, cbModelParam._m0[17u].z, fma(_2774, cbModelParam._m0[17u].y, _2773 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2775, cbModelParam._m0[18u].z, fma(_2774, cbModelParam._m0[18u].y, _2773 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2775, cbModelParam._m0[19u].z, fma(_2774, cbModelParam._m0[19u].y, _2773 * cbModelParam._m0[19u].x))), _2088);
            frontier_phi_25_49_ladder = _2974.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2974.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2974.x * cbModelParam._m0[1u].z;
        }
        _2177 = frontier_phi_25_49_ladder_2;
        _2179 = frontier_phi_25_49_ladder_1;
        _2181 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _2161 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1161, _1162, _1163), _2088);
        _2177 = _2161.x * cbModelParam._m0[1u].z;
        _2179 = _2161.y * cbModelParam._m0[1u].z;
        _2181 = _2161.z * cbModelParam._m0[1u].z;
    }
    float _2193 = ((((1.0 - _1182) * ((_1169 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_1182 * _1169)) * _1153;
    float _2194 = _2193 * ((cbModelParam._m0[1u].w * (_2177 - _2079)) + _2079);
    float _2195 = _2193 * ((cbModelParam._m0[1u].w * (_2179 - _2081)) + _2081);
    float _2196 = _2193 * ((cbModelParam._m0[1u].w * (_2181 - _2083)) + _2083);
    float _2199 = fma(_2196, cbSceneParam._m0[89u].z, fma(_2195, cbSceneParam._m0[89u].y, _2194 * cbSceneParam._m0[89u].x));
    float _2202 = fma(_2196, cbSceneParam._m0[90u].z, fma(_2195, cbSceneParam._m0[90u].y, _2194 * cbSceneParam._m0[90u].x));
    float _2205 = fma(_2196, cbSceneParam._m0[91u].z, fma(_2195, cbSceneParam._m0[91u].y, _2194 * cbSceneParam._m0[91u].x));
    uvec4 _2215 = floatBitsToUint(cbInstanceData._m0[_287 + 5u]);
    uint _2217 = _2215.x * 14u;
    uint _2218 = _2217 + 13u;
    float _2225 = _1153 + (-1.0);
    float _2230 = (cbLight._m0[_2218].x * _2225) + 1.0;
    float _2231 = (cbLight._m0[_2218].y * _2225) + 1.0;
    float _2232 = (cbLight._m0[_2218].z * _2225) + 1.0;
    float _2233 = (cbLight._m0[_2218].w * _2225) + 1.0;
    uint _2234 = _2217 + 5u;
    float _2240 = isnan(1.0) ? _2231 : (isnan(_2231) ? 1.0 : min(_2231, 1.0));
    uint _2244 = _2217 + 4u;
    float _2250 = isnan(1.0) ? _2230 : (isnan(_2230) ? 1.0 : min(_2230, 1.0));
    uint _2254 = _2217 | 1u;
    float _2265 = dot(vec3(cbLight._m0[_2217].xyz), vec3(_992, _993, _994));
    float _2268 = dot(vec3(cbLight._m0[_2254].xyz), vec3(_992, _993, _994));
    float _4529 = isnan(0.0) ? _2265 : (isnan(_2265) ? 0.0 : max(_2265, 0.0));
    float _4540 = isnan(0.0) ? _2268 : (isnan(_2268) ? 0.0 : max(_2268, 0.0));
    float _2273 = (isnan(1.0) ? _4529 : (isnan(_4529) ? 1.0 : min(_4529, 1.0))) * 0.3183098733425140380859375;
    float _2275 = (isnan(1.0) ? _4540 : (isnan(_4540) ? 1.0 : min(_4540, 1.0))) * 0.3183098733425140380859375;
    float _2282 = ((cbLight._m0[_2234].x * _2240) * _2275) + ((cbLight._m0[_2244].x * _2250) * _2273);
    float _2283 = ((_2240 * cbLight._m0[_2234].y) * _2275) + ((_2250 * cbLight._m0[_2244].y) * _2273);
    float _2284 = ((_2240 * cbLight._m0[_2234].z) * _2275) + ((_2250 * cbLight._m0[_2244].z) * _2273);
    uvec4 _2288 = floatBitsToUint(cbLight._m0[_2217 + 12u]);
    bool _2290 = _2288.x == 0u;
    float _2301;
    float _2303;
    float _2305;
    if (_2290)
    {
        _2301 = _2282;
        _2303 = _2283;
        _2305 = _2284;
    }
    else
    {
        uint _2309 = _2217 + 6u;
        float _2325 = (dot(vec3(cbLight._m0[_2217 + 2u].xyz), vec3(_992, _993, _994)) * 0.5) + 0.5;
        float _2326 = _2325 * _2325;
        float _4551 = isnan(0.0) ? _2326 : (isnan(_2326) ? 0.0 : max(_2326, 0.0));
        float _2327 = isnan(1.0) ? _4551 : (isnan(_4551) ? 1.0 : min(_4551, 1.0));
        float _2328 = isnan(1.0) ? _2232 : (isnan(_2232) ? 1.0 : min(_2232, 1.0));
        _2301 = (((cbLight._m0[_2309].x * 0.3183098733425140380859375) * _2327) * _2328) + _2282;
        _2303 = (((cbLight._m0[_2309].y * 0.3183098733425140380859375) * _2327) * _2328) + _2283;
        _2305 = (((cbLight._m0[_2309].z * 0.3183098733425140380859375) * _2327) * _2328) + _2284;
    }
    bool _2308 = _2288.y == 0u;
    float _2346;
    float _2348;
    float _2350;
    if (_2308)
    {
        _2346 = _2301;
        _2348 = _2303;
        _2350 = _2305;
    }
    else
    {
        uint _2505 = _2217 + 7u;
        float _2521 = (dot(vec3(cbLight._m0[_2217 + 3u].xyz), vec3(_992, _993, _994)) * 0.5) + 0.5;
        float _2522 = _2521 * _2521;
        float _4567 = isnan(0.0) ? _2522 : (isnan(_2522) ? 0.0 : max(_2522, 0.0));
        float _2523 = isnan(1.0) ? _4567 : (isnan(_4567) ? 1.0 : min(_4567, 1.0));
        float _2524 = isnan(1.0) ? _2233 : (isnan(_2233) ? 1.0 : min(_2233, 1.0));
        _2346 = (((cbLight._m0[_2505].x * 0.3183098733425140380859375) * _2523) * _2524) + _2301;
        _2348 = (((cbLight._m0[_2505].y * 0.3183098733425140380859375) * _2523) * _2524) + _2303;
        _2350 = (((cbLight._m0[_2505].z * 0.3183098733425140380859375) * _2523) * _2524) + _2305;
    }
    uint _2353 = _2217 + 8u;
    float _2366 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2217].w)) * _995) * 0.949999988079071044921875);
    float _2367 = _2366 * _2366;
    float _2368 = cbLight._m0[_2217].x + _1070;
    float _2369 = cbLight._m0[_2217].y + _1071;
    float _2370 = cbLight._m0[_2217].z + _1072;
    float _2374 = inversesqrt(dot(vec3(_2368, _2369, _2370), vec3(_2368, _2369, _2370)));
    float _2375 = _2374 * _2368;
    float _2376 = _2374 * _2369;
    float _2377 = _2374 * _2370;
    float _2378 = dot(vec3(_992, _993, _994), vec3(cbLight._m0[_2217].xyz));
    float _4583 = isnan(0.0) ? _2378 : (isnan(_2378) ? 0.0 : max(_2378, 0.0));
    float _2381 = isnan(1.0) ? _4583 : (isnan(_4583) ? 1.0 : min(_4583, 1.0));
    float _4594 = isnan(0.0) ? _1154 : (isnan(_1154) ? 0.0 : max(_1154, 0.0));
    float _2382 = isnan(1.0) ? _4594 : (isnan(_4594) ? 1.0 : min(_4594, 1.0));
    float _2383 = dot(vec3(_992, _993, _994), vec3(_2375, _2376, _2377));
    float _4605 = isnan(0.0) ? _2383 : (isnan(_2383) ? 0.0 : max(_2383, 0.0));
    float _2386 = isnan(1.0) ? _4605 : (isnan(_4605) ? 1.0 : min(_4605, 1.0));
    float _2387 = dot(vec3(cbLight._m0[_2217].xyz), vec3(_2375, _2376, _2377));
    float _4616 = isnan(0.0) ? _2387 : (isnan(_2387) ? 0.0 : max(_2387, 0.0));
    float _2391 = _2367 * _2367;
    float _2395 = ((_2386 * _2386) * (_2391 + (-1.0))) + 1.0;
    float _2406 = (exp2(log2(1.0 - (isnan(1.0) ? _4616 : (isnan(_4616) ? 1.0 : min(_4616, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2407 = 1.0 - _2367;
    float _2418 = (0.5 / (((_2382 * ((_2381 * _2407) + _2367)) + 9.9999999392252902907785028219223e-09) + (((_2382 * _2407) + _2367) * _2381))) * _2381;
    float _4627 = isnan(0.0) ? _2418 : (isnan(_2418) ? 0.0 : max(_2418, 0.0));
    float _2420 = (isnan(1.0) ? _4627 : (isnan(_4627) ? 1.0 : min(_4627, 1.0))) * (_2391 / ((_2395 * _2395) * 3.141590118408203125));
    uint _2431 = _2217 + 9u;
    float _2442 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2254].w)) * _995) * 0.949999988079071044921875);
    float _2443 = _2442 * _2442;
    float _2444 = cbLight._m0[_2254].x + _1070;
    float _2445 = cbLight._m0[_2254].y + _1071;
    float _2446 = cbLight._m0[_2254].z + _1072;
    float _2450 = inversesqrt(dot(vec3(_2444, _2445, _2446), vec3(_2444, _2445, _2446)));
    float _2451 = _2450 * _2444;
    float _2452 = _2450 * _2445;
    float _2453 = _2450 * _2446;
    float _2454 = dot(vec3(_992, _993, _994), vec3(cbLight._m0[_2254].xyz));
    float _4638 = isnan(0.0) ? _2454 : (isnan(_2454) ? 0.0 : max(_2454, 0.0));
    float _2457 = isnan(1.0) ? _4638 : (isnan(_4638) ? 1.0 : min(_4638, 1.0));
    float _2458 = dot(vec3(_992, _993, _994), vec3(_2451, _2452, _2453));
    float _4649 = isnan(0.0) ? _2458 : (isnan(_2458) ? 0.0 : max(_2458, 0.0));
    float _2461 = isnan(1.0) ? _4649 : (isnan(_4649) ? 1.0 : min(_4649, 1.0));
    float _2462 = dot(vec3(cbLight._m0[_2254].xyz), vec3(_2451, _2452, _2453));
    float _4660 = isnan(0.0) ? _2462 : (isnan(_2462) ? 0.0 : max(_2462, 0.0));
    float _2466 = _2443 * _2443;
    float _2470 = ((_2461 * _2461) * (_2466 + (-1.0))) + 1.0;
    float _2479 = (exp2(log2(1.0 - (isnan(1.0) ? _4660 : (isnan(_4660) ? 1.0 : min(_4660, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2480 = 1.0 - _2443;
    float _2490 = (0.5 / (((_2382 * ((_2457 * _2480) + _2443)) + 9.9999999392252902907785028219223e-09) + (((_2382 * _2480) + _2443) * _2457))) * _2457;
    float _4671 = isnan(0.0) ? _2490 : (isnan(_2490) ? 0.0 : max(_2490, 0.0));
    float _2492 = (isnan(1.0) ? _4671 : (isnan(_4671) ? 1.0 : min(_4671, 1.0))) * (_2466 / ((_2470 * _2470) * 3.141590118408203125));
    float _2502 = (((_2479 * cbLight._m0[_2431].x) * _2492) * _2240) + (((_2406 * cbLight._m0[_2353].x) * _2420) * _2250);
    float _2503 = (((_2479 * cbLight._m0[_2431].y) * _2492) * _2240) + (((_2406 * cbLight._m0[_2353].y) * _2420) * _2250);
    float _2504 = (((_2479 * cbLight._m0[_2431].z) * _2492) * _2240) + (((_2406 * cbLight._m0[_2353].z) * _2420) * _2250);
    float _2566;
    float _2568;
    float _2570;
    if (_2290)
    {
        _2566 = _2502;
        _2568 = _2503;
        _2570 = _2504;
    }
    else
    {
        uint _2572 = _2217 + 2u;
        uint _2576 = _2217 + 10u;
        float _2590 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2572].w)) * _995) * 0.949999988079071044921875);
        float _2591 = _2590 * _2590;
        float _2592 = cbLight._m0[_2572].x + _1070;
        float _2593 = cbLight._m0[_2572].y + _1071;
        float _2594 = cbLight._m0[_2572].z + _1072;
        float _2598 = inversesqrt(dot(vec3(_2592, _2593, _2594), vec3(_2592, _2593, _2594)));
        float _2599 = _2598 * _2592;
        float _2600 = _2598 * _2593;
        float _2601 = _2598 * _2594;
        float _2602 = dot(vec3(_992, _993, _994), vec3(cbLight._m0[_2572].xyz));
        float _4682 = isnan(0.0) ? _2602 : (isnan(_2602) ? 0.0 : max(_2602, 0.0));
        float _2605 = isnan(1.0) ? _4682 : (isnan(_4682) ? 1.0 : min(_4682, 1.0));
        float _2606 = dot(vec3(_992, _993, _994), vec3(_2599, _2600, _2601));
        float _4693 = isnan(0.0) ? _2606 : (isnan(_2606) ? 0.0 : max(_2606, 0.0));
        float _2609 = isnan(1.0) ? _4693 : (isnan(_4693) ? 1.0 : min(_4693, 1.0));
        float _2610 = dot(vec3(cbLight._m0[_2572].xyz), vec3(_2599, _2600, _2601));
        float _4704 = isnan(0.0) ? _2610 : (isnan(_2610) ? 0.0 : max(_2610, 0.0));
        float _2614 = _2591 * _2591;
        float _2618 = ((_2609 * _2609) * (_2614 + (-1.0))) + 1.0;
        float _2627 = (exp2(log2(1.0 - (isnan(1.0) ? _4704 : (isnan(_4704) ? 1.0 : min(_4704, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2628 = 1.0 - _2591;
        float _2638 = (0.5 / (((_2382 * ((_2605 * _2628) + _2591)) + 9.9999999392252902907785028219223e-09) + (((_2382 * _2628) + _2591) * _2605))) * _2605;
        float _4715 = isnan(0.0) ? _2638 : (isnan(_2638) ? 0.0 : max(_2638, 0.0));
        float _2640 = (isnan(1.0) ? _4715 : (isnan(_4715) ? 1.0 : min(_4715, 1.0))) * (_2614 / ((_2618 * _2618) * 3.141590118408203125));
        float _2641 = isnan(1.0) ? _2232 : (isnan(_2232) ? 1.0 : min(_2232, 1.0));
        _2566 = (((_2627 * cbLight._m0[_2576].x) * _2640) * _2641) + _2502;
        _2568 = (((_2627 * cbLight._m0[_2576].y) * _2640) * _2641) + _2503;
        _2570 = (((_2627 * cbLight._m0[_2576].z) * _2640) * _2641) + _2504;
    }
    float _2676;
    float _2678;
    float _2680;
    if (_2308)
    {
        _2676 = _2566;
        _2678 = _2568;
        _2680 = _2570;
    }
    else
    {
        uint _2687 = _2217 + 3u;
        uint _2691 = _2217 + 11u;
        float _2705 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2687].w)) * _995) * 0.949999988079071044921875);
        float _2706 = _2705 * _2705;
        float _2707 = cbLight._m0[_2687].x + _1070;
        float _2708 = cbLight._m0[_2687].y + _1071;
        float _2709 = cbLight._m0[_2687].z + _1072;
        float _2713 = inversesqrt(dot(vec3(_2707, _2708, _2709), vec3(_2707, _2708, _2709)));
        float _2714 = _2713 * _2707;
        float _2715 = _2713 * _2708;
        float _2716 = _2713 * _2709;
        float _2717 = dot(vec3(_992, _993, _994), vec3(cbLight._m0[_2687].xyz));
        float _4731 = isnan(0.0) ? _2717 : (isnan(_2717) ? 0.0 : max(_2717, 0.0));
        float _2720 = isnan(1.0) ? _4731 : (isnan(_4731) ? 1.0 : min(_4731, 1.0));
        float _2721 = dot(vec3(_992, _993, _994), vec3(_2714, _2715, _2716));
        float _4742 = isnan(0.0) ? _2721 : (isnan(_2721) ? 0.0 : max(_2721, 0.0));
        float _2724 = isnan(1.0) ? _4742 : (isnan(_4742) ? 1.0 : min(_4742, 1.0));
        float _2725 = dot(vec3(cbLight._m0[_2687].xyz), vec3(_2714, _2715, _2716));
        float _4753 = isnan(0.0) ? _2725 : (isnan(_2725) ? 0.0 : max(_2725, 0.0));
        float _2729 = _2706 * _2706;
        float _2733 = ((_2724 * _2724) * (_2729 + (-1.0))) + 1.0;
        float _2742 = (exp2(log2(1.0 - (isnan(1.0) ? _4753 : (isnan(_4753) ? 1.0 : min(_4753, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2743 = 1.0 - _2706;
        float _2753 = (0.5 / (((_2382 * ((_2720 * _2743) + _2706)) + 9.9999999392252902907785028219223e-09) + (((_2382 * _2743) + _2706) * _2720))) * _2720;
        float _4764 = isnan(0.0) ? _2753 : (isnan(_2753) ? 0.0 : max(_2753, 0.0));
        float _2755 = (isnan(1.0) ? _4764 : (isnan(_4764) ? 1.0 : min(_4764, 1.0))) * (_2729 / ((_2733 * _2733) * 3.141590118408203125));
        float _2756 = isnan(1.0) ? _2233 : (isnan(_2233) ? 1.0 : min(_2233, 1.0));
        _2676 = (((_2742 * cbLight._m0[_2691].x) * _2755) * _2756) + _2566;
        _2678 = (((_2742 * cbLight._m0[_2691].y) * _2755) * _2756) + _2568;
        _2680 = (((_2742 * cbLight._m0[_2691].z) * _2755) * _2756) + _2570;
    }
    float _2891;
    float _2893;
    float _2895;
    float _2897;
    float _2899;
    float _2901;
    if (_2215.y == 0u)
    {
        float _2831 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2832 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2831;
        float _2833 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2831;
        float _2834 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2831;
        uvec4 _2846 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2847 = _2846.x;
        uint _2858 = uint((float(_2846.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1091) / _2847))) + floor(float(uint(cbSceneParam._m0[85u].x * _1090) / _2847)));
        float _2868 = (log2(_2834 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2869 = isnan(0.0) ? _2868 : (isnan(_2868) ? 0.0 : max(_2868, 0.0));
        uint _2872 = uint(isnan(14.0) ? _2869 : (isnan(_2869) ? 14.0 : min(_2869, 14.0)));
        uvec4 _2877 = texelFetch(g_lightClusterGridBuffer, int(((_2872 << 2u) + (_2858 << 6u)) >> 2u));
        uint _2878 = _2877.x;
        uint _2879 = _2846.z;
        float _2979;
        float _2981;
        float _2983;
        float _2985;
        float _2987;
        float _2989;
        if (((((1u << ((_2879 >> 4u) & 15u)) + 4294967295u) & _2878) == 0u) || ((_2879 & 240u) == 0u))
        {
            _2979 = 0.0;
            _2981 = 0.0;
            _2983 = 0.0;
            _2985 = 0.0;
            _2987 = 0.0;
            _2989 = 0.0;
        }
        else
        {
            float _2980;
            float _2982;
            float _2984;
            float _2986;
            float _2988;
            float _2990;
            float _3131 = 0.0;
            float _3132 = 0.0;
            float _3133 = 0.0;
            float _3134 = 0.0;
            float _3135 = 0.0;
            float _3136 = 0.0;
            uint _3137 = 0u;
            uint _3146;
            bool _3147;
            for (;;)
            {
                _3146 = texelFetch(g_lightClassification, int((((_2872 << 5u) + (_2858 << 9u)) + (_3137 << 2u)) >> 2u)).x;
                _3147 = _3146 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3147)
                {
                    frontier_phi_66_pred = _3131;
                    frontier_phi_66_pred_1 = _3136;
                    frontier_phi_66_pred_2 = _3135;
                    frontier_phi_66_pred_3 = _3134;
                    frontier_phi_66_pred_4 = _3133;
                    frontier_phi_66_pred_5 = _3132;
                }
                else
                {
                    float _3276;
                    float _3277;
                    float _3278;
                    float _3279;
                    float _3280;
                    float _3281;
                    uint _3282;
                    _3276 = _3131;
                    _3277 = _3132;
                    _3278 = _3133;
                    _3279 = _3134;
                    _3280 = _3135;
                    _3281 = _3136;
                    _3282 = _3146;
                    float _3203;
                    float _3204;
                    float _3205;
                    float _3206;
                    float _3207;
                    float _3208;
                    for (;;)
                    {
                        uint _3286 = uint(findLSB(_3282)) + (_3137 << 5u);
                        uint _3283 = (_3282 + 4294967295u) & _3282;
                        uint _3288 = _3286 * 48u;
                        vec4 _3302 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3288)).x, texelFetch(g_PointLightRenderingBuffer, int(_3288 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3288 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3288 + 3u)).x));
                        uint _3308 = (_3286 * 48u) + 4u;
                        vec4 _3321 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3308)).x, texelFetch(g_PointLightRenderingBuffer, int(_3308 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3308 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3308 + 3u)).x));
                        uint _3327 = (_3286 * 48u) + 8u;
                        vec3 _3338 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3327)).x, texelFetch(g_PointLightRenderingBuffer, int(_3327 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3327 + 2u)).x));
                        float _3342 = _3302.x - _2832;
                        float _3343 = _3302.y - _2833;
                        float _3344 = _3302.z - _2834;
                        float _3345 = dot(vec3(_3342, _3343, _3344), vec3(_3342, _3343, _3344));
                        float _3348 = inversesqrt(_3345);
                        float _3349 = _3348 * _3342;
                        float _3350 = _3348 * _3343;
                        float _3351 = _3348 * _3344;
                        float _3352 = dot(vec3(_1109, _1112, _1115), vec3(_3349, _3350, _3351));
                        float _3357 = 1.0 - (_3345 * _3302.w);
                        float _4790 = isnan(0.0) ? _3357 : (isnan(_3357) ? 0.0 : max(_3357, 0.0));
                        float _3358 = isnan(1.0) ? _4790 : (isnan(_4790) ? 1.0 : min(_4790, 1.0));
                        float _3359 = sqrt(_3345) * _3321.w;
                        float _3362 = 1.39999997615814208984375 / (_3359 + 1.39999997615814208984375);
                        float _3363 = _3362 * _3362;
                        float _3366 = ((1.0 - _3363) * _3352) + _3363;
                        float _3369 = _3359 * _3359;
                        float _3373 = ((isnan(0.0) ? _3366 : (isnan(_3366) ? 0.0 : max(_3366, 0.0))) * _3358) / ((_3369 * 0.699999988079071044921875) + 1.0);
                        float _3377 = (-0.0) - _2832;
                        float _3378 = (-0.0) - _2833;
                        float _3379 = (-0.0) - _2834;
                        float _3383 = inversesqrt(dot(vec3(_3377, _3378, _3379), vec3(_3377, _3378, _3379)));
                        float _3384 = _3383 * _3377;
                        float _3385 = _3383 * _3378;
                        float _3386 = _3383 * _3379;
                        float _3394 = exp2(log2(1.0 / ((_3369 * 3.5) + 5.0)) * 0.25);
                        float _3395 = 1.0 - _1169;
                        float _3402 = sqrt(1.0 - ((1.0 - (_3395 * _3395)) * (1.0 - (_3394 * _3394))));
                        float _3403 = _3402 * _3402;
                        float _3404 = _3403 * _3403;
                        float _3405 = _3384 + _3349;
                        float _3406 = _3385 + _3350;
                        float _3407 = _3386 + _3351;
                        float _3411 = inversesqrt(dot(vec3(_3405, _3406, _3407), vec3(_3405, _3406, _3407)));
                        float _3415 = dot(vec3(_1109, _1112, _1115), vec3(_3384, _3385, _3386));
                        float _4806 = isnan(0.0) ? _3415 : (isnan(_3415) ? 0.0 : max(_3415, 0.0));
                        float _3418 = isnan(1.0) ? _4806 : (isnan(_4806) ? 1.0 : min(_4806, 1.0));
                        float _3419 = dot(vec3(_1109, _1112, _1115), vec3(_3411 * _3405, _3411 * _3406, _3411 * _3407));
                        float _4817 = isnan(0.0) ? _3419 : (isnan(_3419) ? 0.0 : max(_3419, 0.0));
                        float _3422 = isnan(1.0) ? _4817 : (isnan(_4817) ? 1.0 : min(_4817, 1.0));
                        float _3426 = ((_3422 * _3422) * (_3404 + (-1.0))) + 1.0;
                        float _3427 = _3362 * _3403;
                        float _3428 = _3427 * _3427;
                        float _3431 = ((1.0 - _3428) * _3352) + _3428;
                        float _4828 = isnan(0.0) ? _3431 : (isnan(_3431) ? 0.0 : max(_3431, 0.0));
                        float _3432 = isnan(1.0) ? _4828 : (isnan(_4828) ? 1.0 : min(_4828, 1.0));
                        float _3433 = 1.0 - _3403;
                        float _3443 = (0.5 / (((_3432 * ((_3418 * _3433) + _3403)) + 9.9999999392252902907785028219223e-09) + (((_3432 * _3433) + _3403) * _3418))) * _3432;
                        float _4839 = isnan(0.0) ? _3443 : (isnan(_3443) ? 0.0 : max(_3443, 0.0));
                        float _3454 = (((_3404 * 3.1415927410125732421875) * (isnan(1.0) ? _4839 : (isnan(_4839) ? 1.0 : min(_4839, 1.0)))) / ((_3426 * _3426) * ((_3369 * 2.1991131305694580078125) + 3.141590118408203125))) * _3358;
                        _3206 = (_3373 * _3321.x) + _3279;
                        _3207 = (_3373 * _3321.y) + _3280;
                        _3208 = (_3373 * _3321.z) + _3281;
                        _3203 = (_3454 * _3338.x) + _3276;
                        _3204 = (_3454 * _3338.y) + _3277;
                        _3205 = (_3454 * _3338.z) + _3278;
                        if (_3283 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3276 = _3203;
                            _3277 = _3204;
                            _3278 = _3205;
                            _3279 = _3206;
                            _3280 = _3207;
                            _3281 = _3208;
                            _3282 = _3283;
                        }
                    }
                    frontier_phi_66_pred = _3203;
                    frontier_phi_66_pred_1 = _3208;
                    frontier_phi_66_pred_2 = _3207;
                    frontier_phi_66_pred_3 = _3206;
                    frontier_phi_66_pred_4 = _3205;
                    frontier_phi_66_pred_5 = _3204;
                }
                _2980 = frontier_phi_66_pred;
                _2990 = frontier_phi_66_pred_1;
                _2988 = frontier_phi_66_pred_2;
                _2986 = frontier_phi_66_pred_3;
                _2984 = frontier_phi_66_pred_4;
                _2982 = frontier_phi_66_pred_5;
                uint _3138 = _3137 + 1u;
                if (_3138 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3131 = _2980;
                    _3132 = _2982;
                    _3133 = _2984;
                    _3134 = _2986;
                    _3135 = _2988;
                    _3136 = _2990;
                    _3137 = _3138;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2979 = _2980;
            _2981 = _2982;
            _2983 = _2984;
            _2985 = _2986;
            _2987 = _2988;
            _2989 = _2990;
        }
        uvec4 _2993 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2994 = _2993.z;
        uint _2996 = (_2994 >> 8u) & 15u;
        float _3099;
        float _3101;
        float _3103;
        float _3105;
        float _3107;
        float _3109;
        if (((4294967295u << _2996) & _2878) == 0u)
        {
            _3099 = _2979;
            _3101 = _2981;
            _3103 = _2983;
            _3105 = _2985;
            _3107 = _2987;
            _3109 = _2989;
        }
        else
        {
            float _3124 = inversesqrt(dot(vec3(_2832, _2833, _2834), vec3(_2832, _2833, _2834)));
            float _3125 = _3124 * _2832;
            float _3126 = _3124 * _2833;
            float _3127 = _3124 * _2834;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2996 < ((_2994 >> 12u) & 15u))
            {
                float _3100;
                float _3102;
                float _3104;
                float _3106;
                float _3108;
                float _3110;
                float _3259 = _2979;
                float _3260 = _2981;
                float _3261 = _2983;
                float _3262 = _2985;
                float _3263 = _2987;
                float _3264 = _2989;
                uint _3265 = _2996;
                uint _3274;
                bool _3275;
                for (;;)
                {
                    _3274 = texelFetch(g_lightClassification, int((((_2872 << 5u) + (_2858 << 9u)) + (_3265 << 2u)) >> 2u)).x;
                    _3275 = _3274 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_3275)
                    {
                        frontier_phi_77_pred = _3264;
                        frontier_phi_77_pred_1 = _3263;
                        frontier_phi_77_pred_2 = _3262;
                        frontier_phi_77_pred_3 = _3261;
                        frontier_phi_77_pred_4 = _3260;
                        frontier_phi_77_pred_5 = _3259;
                    }
                    else
                    {
                        float _3468;
                        float _3469;
                        float _3470;
                        float _3471;
                        float _3472;
                        float _3473;
                        float _3761;
                        float _3762;
                        float _3763;
                        float _3764;
                        float _3765;
                        float _3766;
                        float _3481 = _3259;
                        float _3482 = _3260;
                        float _3483 = _3261;
                        float _3484 = _3262;
                        float _3485 = _3263;
                        float _3486 = _3264;
                        uint _3487 = _3274;
                        uint _3488;
                        vec4 _3513;
                        float _3514;
                        vec4 _3529;
                        vec3 _3541;
                        vec4 _3556;
                        vec4 _3571;
                        float _3617;
                        bool _3618;
                        for (;;)
                        {
                            uint _3498 = ((_3265 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3487));
                            _3488 = (_3487 + 4294967295u) & _3487;
                            uint _3500 = _3498 * 40u;
                            _3513 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3500)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3500 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3500 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3500 + 3u)).x));
                            _3514 = _3513.w;
                            uint _3516 = (_3498 * 40u) + 4u;
                            _3529 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3516)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3516 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3516 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3516 + 3u)).x));
                            uint _3531 = (_3498 * 40u) + 8u;
                            _3541 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3531)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3531 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3531 + 2u)).x));
                            uint _3543 = (_3498 * 40u) + 16u;
                            _3556 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3543)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3543 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3543 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3543 + 3u)).x));
                            uint _3558 = (_3498 * 40u) + 20u;
                            _3571 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3558)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3558 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3558 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3558 + 3u)).x));
                            uint _3573 = (_3498 * 40u) + 24u;
                            vec4 _3586 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3573)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3573 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3573 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3573 + 3u)).x));
                            uint _3592 = (_3498 * 40u) + 28u;
                            vec4 _3605 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3592)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3592 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3592 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3592 + 3u)).x));
                            _3617 = fma(_2834, _3605.z, fma(_2833, _3605.y, _3605.x * _2832)) + _3605.w;
                            _3618 = !((fma(_2834, _3586.z, fma(_2833, _3586.y, _3586.x * _2832)) + _3586.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3618)
                            {
                                float _3645 = _3513.x - _2832;
                                float _3646 = _3513.y - _2833;
                                float _3647 = _3513.z - _2834;
                                float _3648 = dot(vec3(_3645, _3646, _3647), vec3(_3645, _3646, _3647));
                                float _3651 = inversesqrt(_3648);
                                float _3652 = _3651 * _3645;
                                float _3653 = _3651 * _3646;
                                float _3654 = _3651 * _3647;
                                float _3658 = 1.0 - (_3648 / (_3514 * _3514));
                                float _4850 = isnan(0.0) ? _3658 : (isnan(_3658) ? 0.0 : max(_3658, 0.0));
                                float _3659 = isnan(1.0) ? _4850 : (isnan(_4850) ? 1.0 : min(_4850, 1.0));
                                float _3663 = sqrt(_3648) * _3529.w;
                                float _3665 = 1.39999997615814208984375 / (_3663 + 1.39999997615814208984375);
                                float _3666 = _3665 * _3665;
                                float _3669 = ((1.0 - _3666) * dot(vec3(_3652, _3653, _3654), vec3(_1109, _1112, _1115))) + _3666;
                                float _3672 = _3663 * _3663;
                                float _3676 = (fma(_2834, _3556.z, fma(_2833, _3556.y, _3556.x * _2832)) + _3556.w) / _3617;
                                float _3677 = (fma(_2834, _3571.z, fma(_2833, _3571.y, _3571.x * _2832)) + _3571.w) / _3617;
                                float _3681 = 1.0 - dot(vec2(_3676, _3677), vec2(_3676, _3677));
                                float _4866 = isnan(0.0) ? _3681 : (isnan(_3681) ? 0.0 : max(_3681, 0.0));
                                float _3682 = isnan(1.0) ? _4866 : (isnan(_4866) ? 1.0 : min(_4866, 1.0));
                                float _3683 = _3682 * (((isnan(0.0) ? _3669 : (isnan(_3669) ? 0.0 : max(_3669, 0.0))) * _3659) / ((_3672 * 0.699999988079071044921875) + 1.0));
                                float _3695 = exp2(log2(1.0 / ((_3672 * 3.5) + 5.0)) * 0.25);
                                float _3696 = 1.0 - _1169;
                                float _3703 = sqrt(1.0 - ((1.0 - (_3696 * _3696)) * (1.0 - (_3695 * _3695))));
                                float _3704 = _3703 * _3703;
                                float _3705 = _3704 * _3704;
                                float _3706 = _3652 - _3125;
                                float _3707 = _3653 - _3126;
                                float _3708 = _3654 - _3127;
                                float _3712 = inversesqrt(dot(vec3(_3706, _3707, _3708), vec3(_3706, _3707, _3708)));
                                float _3716 = dot(vec3(_1109, _1112, _1115), vec3((-0.0) - _3125, (-0.0) - _3126, (-0.0) - _3127));
                                float _4877 = isnan(0.0) ? _3716 : (isnan(_3716) ? 0.0 : max(_3716, 0.0));
                                float _3719 = isnan(1.0) ? _4877 : (isnan(_4877) ? 1.0 : min(_4877, 1.0));
                                float _3720 = dot(vec3(_1109, _1112, _1115), vec3(_3712 * _3706, _3712 * _3707, _3712 * _3708));
                                float _4888 = isnan(0.0) ? _3720 : (isnan(_3720) ? 0.0 : max(_3720, 0.0));
                                float _3723 = isnan(1.0) ? _4888 : (isnan(_4888) ? 1.0 : min(_4888, 1.0));
                                float _3727 = ((_3723 * _3723) * (_3705 + (-1.0))) + 1.0;
                                float _3728 = _3665 * _3704;
                                float _3729 = _3728 * _3728;
                                float _3735 = ((1.0 - _3729) * dot(vec3(_1109, _1112, _1115), vec3(_3652, _3653, _3654))) + _3729;
                                float _4899 = isnan(0.0) ? _3735 : (isnan(_3735) ? 0.0 : max(_3735, 0.0));
                                float _3736 = isnan(1.0) ? _4899 : (isnan(_4899) ? 1.0 : min(_4899, 1.0));
                                float _3737 = 1.0 - _3704;
                                float _3747 = (0.5 / (((_3736 * ((_3719 * _3737) + _3704)) + 9.9999999392252902907785028219223e-09) + (((_3736 * _3737) + _3704) * _3719))) * _3736;
                                float _4910 = isnan(0.0) ? _3747 : (isnan(_3747) ? 0.0 : max(_3747, 0.0));
                                float _3757 = (_3682 * _3659) * (((_3705 * 3.1415927410125732421875) * (isnan(1.0) ? _4910 : (isnan(_4910) ? 1.0 : min(_4910, 1.0)))) / ((_3727 * _3727) * ((_3672 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3683 * _3529.y;
                                frontier_phi_83_pred_1 = _3683 * _3529.x;
                                frontier_phi_83_pred_2 = _3757 * _3541.z;
                                frontier_phi_83_pred_3 = _3757 * _3541.y;
                                frontier_phi_83_pred_4 = _3757 * _3541.x;
                                frontier_phi_83_pred_5 = _3683 * _3529.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3765 = frontier_phi_83_pred;
                            _3764 = frontier_phi_83_pred_1;
                            _3763 = frontier_phi_83_pred_2;
                            _3762 = frontier_phi_83_pred_3;
                            _3761 = frontier_phi_83_pred_4;
                            _3766 = frontier_phi_83_pred_5;
                            _3471 = _3764 + _3484;
                            _3472 = _3765 + _3485;
                            _3473 = _3766 + _3486;
                            _3468 = _3761 + _3481;
                            _3469 = _3762 + _3482;
                            _3470 = _3763 + _3483;
                            if (_3488 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3481 = _3468;
                                _3482 = _3469;
                                _3483 = _3470;
                                _3484 = _3471;
                                _3485 = _3472;
                                _3486 = _3473;
                                _3487 = _3488;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3473;
                        frontier_phi_77_pred_1 = _3472;
                        frontier_phi_77_pred_2 = _3471;
                        frontier_phi_77_pred_3 = _3470;
                        frontier_phi_77_pred_4 = _3469;
                        frontier_phi_77_pred_5 = _3468;
                    }
                    _3110 = frontier_phi_77_pred;
                    _3108 = frontier_phi_77_pred_1;
                    _3106 = frontier_phi_77_pred_2;
                    _3104 = frontier_phi_77_pred_3;
                    _3102 = frontier_phi_77_pred_4;
                    _3100 = frontier_phi_77_pred_5;
                    uint _3266 = _3265 + 1u;
                    if (_3266 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3259 = _3100;
                        _3260 = _3102;
                        _3261 = _3104;
                        _3262 = _3106;
                        _3263 = _3108;
                        _3264 = _3110;
                        _3265 = _3266;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _3104;
                frontier_phi_58_59_ladder_1 = _3110;
                frontier_phi_58_59_ladder_2 = _3108;
                frontier_phi_58_59_ladder_3 = _3106;
                frontier_phi_58_59_ladder_4 = _3102;
                frontier_phi_58_59_ladder_5 = _3100;
            }
            else
            {
                frontier_phi_58_59_ladder = _2983;
                frontier_phi_58_59_ladder_1 = _2989;
                frontier_phi_58_59_ladder_2 = _2987;
                frontier_phi_58_59_ladder_3 = _2985;
                frontier_phi_58_59_ladder_4 = _2981;
                frontier_phi_58_59_ladder_5 = _2979;
            }
            _3099 = frontier_phi_58_59_ladder_5;
            _3101 = frontier_phi_58_59_ladder_4;
            _3103 = frontier_phi_58_59_ladder;
            _3105 = frontier_phi_58_59_ladder_3;
            _3107 = frontier_phi_58_59_ladder_2;
            _3109 = frontier_phi_58_59_ladder_1;
        }
        float _3114 = isnan(1.0) ? _1153 : (isnan(_1153) ? 1.0 : min(_1153, 1.0));
        _2891 = (_3114 * _3105) + _2346;
        _2893 = (_3114 * _3107) + _2348;
        _2895 = (_3114 * _3109) + _2350;
        _2897 = ((_3099 * 0.039999999105930328369140625) * _3114) + _2676;
        _2899 = ((_3101 * 0.039999999105930328369140625) * _3114) + _2678;
        _2901 = ((_3103 * 0.039999999105930328369140625) * _3114) + _2680;
    }
    else
    {
        _2891 = _2346;
        _2893 = _2348;
        _2895 = _2350;
        _2897 = _2676;
        _2899 = _2678;
        _2901 = _2680;
    }
    float _4926 = isnan(0.0) ? _1138 : (isnan(_1138) ? 0.0 : max(_1138, 0.0));
    float _4937 = isnan(0.0) ? _1139 : (isnan(_1139) ? 0.0 : max(_1139, 0.0));
    float _4948 = isnan(0.0) ? _1140 : (isnan(_1140) ? 0.0 : max(_1140, 0.0));
    float _2918 = ((isnan(1.0) ? _4926 : (isnan(_4926) ? 1.0 : min(_4926, 1.0))) * (_2891 + ((isnan(0.0) ? _1909 : (isnan(_1909) ? 0.0 : max(_1909, 0.0))) * _1153))) + ((_2897 + ((isnan(0.0) ? _2199 : (isnan(_2199) ? 0.0 : max(_2199, 0.0))) * _1988)) * cbPerFrame._m0[3u].x);
    float _2919 = ((isnan(1.0) ? _4937 : (isnan(_4937) ? 1.0 : min(_4937, 1.0))) * (_2893 + ((isnan(0.0) ? _1912 : (isnan(_1912) ? 0.0 : max(_1912, 0.0))) * _1153))) + ((_2899 + ((isnan(0.0) ? _2202 : (isnan(_2202) ? 0.0 : max(_2202, 0.0))) * _1988)) * cbPerFrame._m0[3u].x);
    float _2920 = ((isnan(1.0) ? _4948 : (isnan(_4948) ? 1.0 : min(_4948, 1.0))) * (_2895 + ((isnan(0.0) ? _1915 : (isnan(_1915) ? 0.0 : max(_1915, 0.0))) * _1153))) + ((_2901 + ((isnan(0.0) ? _2205 : (isnan(_2205) ? 0.0 : max(_2205, 0.0))) * _1988)) * cbPerFrame._m0[3u].x);
    uint _2921 = _287 + 6u;
    float _2929 = _1090 / cbSceneParam._m0[86u].x;
    float _2930 = _1091 / cbSceneParam._m0[86u].y;
    vec4 _2944 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2929, _2930, (log2((isnan(cbSceneParam._m0[77u].w) ? _1013 : (isnan(_1013) ? cbSceneParam._m0[77u].w : min(_1013, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2946 = _2944.x;
    float _2947 = _2944.y;
    float _2948 = _2944.z;
    float _2949 = _2944.w;
    float _3041;
    float _3043;
    float _3045;
    float _3047;
    if (_1013 > cbSceneParam._m0[78u].w)
    {
        float _3004 = isnan(_1013) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _1013 : min(cbSceneParam._m0[80u].w, _1013));
        float _3005 = _3004 / _1013;
        float _3016 = _3005 * _1063;
        float _3017 = _1064 * _3005;
        float _3018 = (-0.0) - _3017;
        float _3019 = _3005 * _1065;
        float _3021 = (cbSceneParam._m0[77u].w * _3018) / _3004;
        float _3022 = _3021 + cbSceneParam._m0[79u].w;
        float _3023 = cbSceneParam._m0[79u].w - _3017;
        float _3029 = sqrt(((_3016 * _3016) + (_3017 * _3017)) + (_3019 * _3019));
        float _3032 = (1.0 - (cbSceneParam._m0[77u].w / _3004)) * _3029;
        float _3037 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3039 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3216;
        if (abs((_3018 - _3021) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3216 = ((((_3022 > 0.0) ? exp2(_3037 * _3022) : (2.0 - exp2(_3039 * _3022))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3032;
        }
        else
        {
            float _3160 = 1.0 / cbSceneParam._m0[80u].x;
            float _3161 = isnan(_3023) ? _3022 : (isnan(_3022) ? _3023 : max(_3022, _3023));
            float _3162 = isnan(_3023) ? _3022 : (isnan(_3022) ? _3023 : min(_3022, _3023));
            float _3171 = isnan(0.0) ? _3161 : (isnan(_3161) ? 0.0 : min(_3161, 0.0));
            float _3172 = isnan(0.0) ? _3162 : (isnan(_3162) ? 0.0 : min(_3162, 0.0));
            _3216 = ((abs(_3029 / _3018) * cbSceneParam._m0[80u].y) * ((((_3171 - _3172) * 2.0) - ((exp2(_3037 * (isnan(0.0) ? _3161 : (isnan(_3161) ? 0.0 : max(_3161, 0.0)))) - exp2(_3037 * (isnan(0.0) ? _3162 : (isnan(_3162) ? 0.0 : max(_3162, 0.0))))) * _3160)) - ((exp2(_3039 * _3171) - exp2(_3039 * _3172)) * _3160))) + (_3032 * cbSceneParam._m0[80u].z);
        }
        vec4 _3218 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2929, _2930, 1.0), 0.0);
        float _3227 = exp2((_3216 * (-1.44269502162933349609375)) * (1.0 - _3218.w));
        float _3228 = log2(_3227);
        float _3244 = log2(_2949);
        _3041 = (exp2(_3244 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3228 * cbSceneParam._m0[78u].x)) * _3218.x) / cbSceneParam._m0[78u].x)) + _2946;
        _3043 = (exp2(_3244 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3228 * cbSceneParam._m0[78u].y)) * _3218.y) / cbSceneParam._m0[78u].y)) + _2947;
        _3045 = (exp2(_3244 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3228 * cbSceneParam._m0[78u].z)) * _3218.z) / cbSceneParam._m0[78u].z)) + _2948;
        _3047 = _3227 * _2949;
    }
    else
    {
        _3041 = _2946;
        _3043 = _2947;
        _3045 = _2948;
        _3047 = _2949;
    }
    bool _3254;
    vec4 _3057;
    vec4 _3079;
    float _3081;
    float _3085;
    float _3086;
    float _3087;
    float _3088;
    bool _3098;
    for (;;)
    {
        _3057 = cbMatDynParam._m0[0u];
        float _3059 = roundEven(_3057.y);
        bool _3060 = _3059 == 3.0;
        float _3061 = log2(_3047);
        float _3068 = exp2(_3061 * cbSceneParam._m0[78u].x) * _2918;
        float _3069 = exp2(_3061 * cbSceneParam._m0[78u].y) * _2919;
        float _3070 = exp2(_3061 * cbSceneParam._m0[78u].z) * _2920;
        float _3077 = _1079 + (-0.5);
        _3079 = cbMtdParam._m0[1u];
        _3081 = _3079.y * _3077;
        float _3084 = (_3059 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3085 = _3084 * (_3060 ? _3068 : (_3068 + (cbSceneParam._m0[72u].w * _3041)));
        _3086 = _3084 * (_3060 ? _3069 : (_3069 + (cbSceneParam._m0[72u].w * _3043)));
        _3087 = _3084 * (_3060 ? _3070 : (_3070 + (cbSceneParam._m0[72u].w * _3045)));
        _3088 = _3077 * 0.999000012874603271484375;
        _3098 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3098)
        {
            if ((cbInstanceData._m0[_287 + 7u].x + _3088) < 0.5)
            {
                _3254 = true;
                break;
            }
        }
        uint _3195 = _1128 + uint(_3057.w);
        if ((cbInstanceData._m0[_3195].w < 1.0) && ((cbInstanceData._m0[_3195].w + _3088) < 0.5))
        {
            _3254 = true;
            break;
        }
        if ((_3081 + 1.0) < _3079.x)
        {
            _3254 = true;
            break;
        }
        _3254 = false;
        break;
    }
    float _3459;
    if (_3254)
    {
        discard_state = true;
        _3459 = 0.0;
    }
    else
    {
        _3459 = cbInstanceData._m0[_2921].w;
    }
    SV_Target.x = _3085;
    SV_Target.y = _3086;
    SV_Target.z = _3087;
    SV_Target.w = _3459;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2921].w;
    discard_exit();
}


