#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_0;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 14) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_6;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1186;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _208 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _209 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _210 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _216 = inversesqrt(dot(vec3(_208, _209, _210), vec3(_208, _209, _210)));
    float _217 = _216 * _208;
    float _218 = _216 * _209;
    float _219 = _216 * _210;
    float _223 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _224 = _223 * NORMAL.x;
    float _225 = _223 * NORMAL.y;
    float _226 = _223 * NORMAL.z;
    float _230 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _231 = _230 * TANGENT.x;
    float _232 = _230 * TANGENT.y;
    float _233 = _230 * TANGENT.z;
    uint _236 = uint(roundEven(NORMAL.w)) * 13u;
    uint _242 = _236 + 1u;
    uint _246 = _236 + 2u;
    float _255 = sqrt(((cbInstanceData._m0[_242].x * cbInstanceData._m0[_242].x) + (cbInstanceData._m0[_236].x * cbInstanceData._m0[_236].x)) + (cbInstanceData._m0[_246].x * cbInstanceData._m0[_246].x));
    float _256 = _255 * TEXCOORD.z;
    float _257 = _255 * TEXCOORD.w;
    vec4 _276 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _300 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _305 = _300.x * cbMtdParam._m0[11u].x;
    float _306 = _300.y * cbMtdParam._m0[11u].y;
    float _307 = _300.z * cbMtdParam._m0[11u].z;
    vec4 _326 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _256) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _257) + cbTextureTilingScale._m0[5u].w));
    vec4 _380 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _382 = _380.x;
    float _394 = dot(vec4(_382, _380.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _411 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w)).x) * 2.0) - ((((_382 - _394) * cbMtdParam._m0[24u].z) + _394) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3774 = isnan(0.0) ? _411 : (isnan(_411) ? 0.0 : max(_411, 0.0));
    float _412 = isnan(1.0) ? _3774 : (isnan(_3774) ? 1.0 : min(_3774, 1.0));
    float _425 = ((cbMtdParam._m0[9u].x * 4.55000019073486328125) * _276.x) * ((_412 * ((_326.x * cbMtdParam._m0[12u].x) - _305)) + _305);
    float _428 = ((cbMtdParam._m0[9u].y * 4.55000019073486328125) * _276.y) * ((_412 * ((_326.y * cbMtdParam._m0[12u].y) - _306)) + _306);
    float _431 = ((cbMtdParam._m0[9u].z * 4.55000019073486328125) * _276.z) * ((_412 * ((_326.z * cbMtdParam._m0[12u].z) - _307)) + _307);
    vec4 _450 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _256) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _257) + cbTextureTilingScale._m0[14u].w));
    vec4 _470 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _256) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _257) + cbTextureTilingScale._m0[4u].w));
    vec4 _487 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _489 = _487.x;
    float _490 = _487.y;
    float _491 = _487.z;
    float _500 = ((_470.z - _491) * _412) + _491;
    float _503 = ((((_470.x - _489) * _412) + _489) * 2.0) + (-1.0);
    float _505 = ((((_470.y - _490) * _412) + _490) * 2.0) + (-1.0);
    float _506 = dot(vec2(_503, _505), vec2(_503, _505));
    float _3785 = isnan(0.0) ? _506 : (isnan(_506) ? 0.0 : max(_506, 0.0));
    float _511 = sqrt(1.0 - (isnan(1.0) ? _3785 : (isnan(_3785) ? 1.0 : min(_3785, 1.0))));
    vec4 _527 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _539 = (((_527.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _503;
    float _540 = (((_527.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _505;
    float _543 = fma(_511, _224, fma(_540, _231, _539 * _217));
    float _546 = fma(_511, _225, fma(_540, _232, _539 * _218));
    float _549 = fma(_511, _226, fma(_540, _233, _539 * _219));
    float _553 = inversesqrt(dot(vec3(_543, _546, _549), vec3(_543, _546, _549)));
    vec4 _580 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _256) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _257) + cbTextureTilingScale._m0[11u].w));
    float _582 = _580.x;
    float _583 = 1.0 - _582;
    float _589 = (cbMtdParam._m0[19u].x + dot(vec4(_553 * _543, _553 * _546, _553 * _549, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_582 - _583) * cbMtdParam._m0[24u].w) + _583) * cbMtdParam._m0[21u].z);
    float _3796 = isnan(0.0) ? _589 : (isnan(_589) ? 0.0 : max(_589, 0.0));
    float _590 = isnan(1.0) ? _3796 : (isnan(_3796) ? 1.0 : min(_3796, 1.0));
    float _597 = (_590 * ((_450.x * cbMtdParam._m0[18u].x) - _425)) + _425;
    float _598 = (_590 * ((_450.y * cbMtdParam._m0[18u].y) - _428)) + _428;
    float _599 = (_590 * ((_450.z * cbMtdParam._m0[18u].z) - _431)) + _431;
    float _603 = (cbMtdParam._m0[19u].w * (_527.z - _500)) + _500;
    vec4 _616 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _256) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _257) + cbTextureTilingScale._m0[15u].w));
    float _623 = (_616.x * 2.0) + (-1.0);
    float _624 = (_616.y * 2.0) + (-1.0);
    float _625 = dot(vec2(_623, _624), vec2(_623, _624));
    float _3807 = isnan(0.0) ? _625 : (isnan(_625) ? 0.0 : max(_625, 0.0));
    float _633 = ((_616.z - _603) * _590) + _603;
    float _643 = ((sqrt(1.0 - (isnan(1.0) ? _3807 : (isnan(_3807) ? 1.0 : min(_3807, 1.0)))) - _511) * _590) + _511;
    float _646 = (((_623 - _539) * _590) + _539) + (cbMtdParam._m0[21u].x * _539);
    float _647 = (((_624 - _540) * _590) + _540) + (cbMtdParam._m0[21u].x * _540);
    float _651 = cbMtdParam._m0[22u].x + _527.w;
    float _654 = fma(_643, _224, fma(_647, _231, _646 * _217));
    float _657 = fma(_643, _225, fma(_647, _232, _646 * _218));
    float _660 = fma(_643, _226, fma(_647, _233, _646 * _219));
    float _664 = inversesqrt(dot(vec3(_654, _657, _660), vec3(_654, _657, _660)));
    float _665 = _664 * _654;
    float _666 = _664 * _657;
    float _667 = _664 * _660;
    float _3818 = isnan(0.0) ? _633 : (isnan(_633) ? 0.0 : max(_633, 0.0));
    float _668 = isnan(1.0) ? _3818 : (isnan(_3818) ? 1.0 : min(_3818, 1.0));
    float _3829 = isnan(0.0) ? _651 : (isnan(_651) ? 0.0 : max(_651, 0.0));
    float _3840 = isnan(0.0) ? _597 : (isnan(_597) ? 0.0 : max(_597, 0.0));
    float _3851 = isnan(0.0) ? _598 : (isnan(_598) ? 0.0 : max(_598, 0.0));
    float _3862 = isnan(0.0) ? _599 : (isnan(_599) ? 0.0 : max(_599, 0.0));
    float _686 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _727 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _737 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _727);
    float _738 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _727);
    float _739 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _727);
    float _743 = inversesqrt(dot(vec3(_737, _738, _739), vec3(_737, _738, _739)));
    float _744 = _737 * _743;
    float _745 = _738 * _743;
    float _746 = _739 * _743;
    float _752 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _753 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _771 = fma(_667, cbSceneParam._m0[5u].z, fma(_666, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _665));
    float _774 = fma(_667, cbSceneParam._m0[6u].z, fma(_666, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _665));
    float _777 = fma(_667, cbSceneParam._m0[7u].z, fma(_666, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _665));
    uint _791 = (_236 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _797 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3840 : (isnan(_3840) ? 1.0 : min(_3840, 1.0)))) * cbInstanceData._m0[_791].x;
    float _798 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3851 : (isnan(_3851) ? 1.0 : min(_3851, 1.0)))) * cbInstanceData._m0[_791].y;
    float _799 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3862 : (isnan(_3862) ? 1.0 : min(_3862, 1.0)))) * cbInstanceData._m0[_791].z;
    float _3873 = isnan(0.0) ? _797 : (isnan(_797) ? 0.0 : max(_797, 0.0));
    float _800 = isnan(1.0) ? _3873 : (isnan(_3873) ? 1.0 : min(_3873, 1.0));
    float _3884 = isnan(0.0) ? _798 : (isnan(_798) ? 0.0 : max(_798, 0.0));
    float _801 = isnan(1.0) ? _3884 : (isnan(_3884) ? 1.0 : min(_3884, 1.0));
    float _3895 = isnan(0.0) ? _799 : (isnan(_799) ? 0.0 : max(_799, 0.0));
    float _802 = isnan(1.0) ? _3895 : (isnan(_3895) ? 1.0 : min(_3895, 1.0));
    vec4 _811 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _752, cbSceneParam._m0[86u].y * _753));
    float _815 = ((isnan(1.0) ? _3829 : (isnan(_3829) ? 1.0 : min(_3829, 1.0))) * TEXCOORD_5.w) * _811.x;
    float _816 = dot(vec3(_665, _666, _667), vec3(_744, _745, _746));
    float _819 = _816 * 2.0;
    float _823 = (_819 * _665) - _744;
    float _824 = (_819 * _666) - _745;
    float _825 = (_819 * _667) - _746;
    float _829 = abs(dot(vec3(_744, _745, _746), vec3(_665, _666, _667)));
    float _3906 = isnan(0.0) ? _829 : (isnan(_829) ? 0.0 : max(_829, 0.0));
    float _831 = sqrt(_668);
    float _844 = exp2((_831 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3906 : (isnan(_3906) ? 1.0 : min(_3906, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_831 * 3.0));
    float _876 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _880 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _884 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1185;
    float _1187;
    float _1188;
    float _1189;
    float _1190;
    float _1191;
    float _1192;
    float _1193;
    float _1194;
    float _1195;
    float _1196;
    float _1197;
    float _1198;
    float _1199;
    float _1200;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _910 = fma(_884, cbModelParam._m0[26u].z, fma(_880, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _876));
        float _914 = fma(_884, cbModelParam._m0[27u].z, fma(_880, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _876));
        float _918 = fma(_884, cbModelParam._m0[28u].z, fma(_880, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _876));
        float _943 = _876 + _665;
        float _944 = _880 + _666;
        float _945 = _884 + _667;
        float _955 = fma(_945, cbModelParam._m0[26u].z, fma(_944, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _943)) - _910;
        float _956 = fma(_945, cbModelParam._m0[27u].z, fma(_944, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _943)) - _914;
        float _957 = fma(_945, cbModelParam._m0[28u].z, fma(_944, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _943)) - _918;
        float _961 = inversesqrt(dot(vec3(_955, _956, _957), vec3(_955, _956, _957)));
        float _974 = ((_961 * _955) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_910 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _975 = ((_961 * _956) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_914 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _976 = ((_961 * _957) / cbModelParam._m0[34u].z) + ((((((_918 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _979 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_974, _975, _976), 0.0);
        vec4 _986 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_974, _975, _976), 0.0);
        vec4 _993 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_974, _975, _976), 0.0);
        vec4 _1000 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_974, _975, _976), 0.0);
        float _1013 = exp2((_979.w + (-0.5)) * 20.0) * 2.0;
        float _1014 = _1013 * (_979.x + (-0.5));
        float _1015 = _1013 * (_979.y + (-0.5));
        float _1016 = _1013 * (_979.z + (-0.5));
        float _1023 = exp2((_986.w + (-0.5)) * 20.0) * 2.0;
        float _1024 = _1023 * (_986.x + (-0.5));
        float _1025 = _1023 * (_986.y + (-0.5));
        float _1026 = _1023 * (_986.z + (-0.5));
        float _1033 = exp2((_993.w + (-0.5)) * 20.0) * 2.0;
        float _1034 = _1033 * (_993.x + (-0.5));
        float _1035 = _1033 * (_993.y + (-0.5));
        float _1036 = _1033 * (_993.z + (-0.5));
        float _1043 = exp2((_1000.w + (-0.5)) * 20.0) * 2.0;
        float _1044 = _1043 * (_1000.x + (-0.5));
        float _1045 = _1043 * (_1000.y + (-0.5));
        float _1046 = _1043 * (_1000.z + (-0.5));
        float _1047 = isnan(0.0) ? _1044 : (isnan(_1044) ? 0.0 : max(_1044, 0.0));
        float _1048 = isnan(0.0) ? _1045 : (isnan(_1045) ? 0.0 : max(_1045, 0.0));
        float _1049 = isnan(0.0) ? _1046 : (isnan(_1046) ? 0.0 : max(_1046, 0.0));
        float _1050 = _1014 * 0.5;
        float _1051 = _1024 * 0.5;
        float _1052 = _1034 * 0.5;
        float _1053 = dot(vec3(_1050, _1051, _1052), vec3(_1050, _1051, _1052));
        float _1058 = (_1053 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1053);
        float _1067 = (dot(vec3(_665, _666, _667), vec3(_1058 * _1050, _1058 * _1051, _1058 * _1052)) + 1.0) * 0.5;
        float _3932 = isnan(0.0) ? _1067 : (isnan(_1067) ? 0.0 : max(_1067, 0.0));
        float _1077 = sqrt(((_1051 * _1051) + (_1050 * _1050)) + (_1052 * _1052)) / (_1047 + 9.9999997473787516355514526367188e-06);
        float _3943 = isnan(0.0) ? _1077 : (isnan(_1077) ? 0.0 : max(_1077, 0.0));
        float _1078 = isnan(1.0) ? _3943 : (isnan(_3943) ? 1.0 : min(_3943, 1.0));
        float _1079 = _1078 * 2.0;
        float _1083 = (1.0 - _1078) / (_1078 + 1.0);
        float _3954 = isnan(0.0) ? _1083 : (isnan(_1083) ? 0.0 : max(_1083, 0.0));
        float _1084 = isnan(1.0) ? _3954 : (isnan(_3954) ? 1.0 : min(_3954, 1.0));
        float _1093 = ((((1.0 - _1084) * (_1079 + 2.0)) * exp2(log2(isnan(1.0) ? _3932 : (isnan(_3932) ? 1.0 : min(_3932, 1.0))) * (_1079 + 1.0))) + _1084) * _1047;
        float _1094 = _1015 * 0.5;
        float _1095 = _1025 * 0.5;
        float _1096 = _1035 * 0.5;
        float _1097 = dot(vec3(_1094, _1095, _1096), vec3(_1094, _1095, _1096));
        float _1102 = (_1097 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1097);
        float _1110 = (dot(vec3(_665, _666, _667), vec3(_1102 * _1094, _1102 * _1095, _1102 * _1096)) + 1.0) * 0.5;
        float _3965 = isnan(0.0) ? _1110 : (isnan(_1110) ? 0.0 : max(_1110, 0.0));
        float _1119 = sqrt(((_1095 * _1095) + (_1094 * _1094)) + (_1096 * _1096)) / (_1048 + 9.9999997473787516355514526367188e-06);
        float _3976 = isnan(0.0) ? _1119 : (isnan(_1119) ? 0.0 : max(_1119, 0.0));
        float _1120 = isnan(1.0) ? _3976 : (isnan(_3976) ? 1.0 : min(_3976, 1.0));
        float _1121 = _1120 * 2.0;
        float _1125 = (1.0 - _1120) / (_1120 + 1.0);
        float _3987 = isnan(0.0) ? _1125 : (isnan(_1125) ? 0.0 : max(_1125, 0.0));
        float _1126 = isnan(1.0) ? _3987 : (isnan(_3987) ? 1.0 : min(_3987, 1.0));
        float _1135 = ((((1.0 - _1126) * (_1121 + 2.0)) * exp2(log2(isnan(1.0) ? _3965 : (isnan(_3965) ? 1.0 : min(_3965, 1.0))) * (_1121 + 1.0))) + _1126) * _1048;
        float _1136 = _1016 * 0.5;
        float _1137 = _1026 * 0.5;
        float _1138 = _1036 * 0.5;
        float _1139 = dot(vec3(_1136, _1137, _1138), vec3(_1136, _1137, _1138));
        float _1144 = (_1139 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1139);
        float _1152 = (dot(vec3(_665, _666, _667), vec3(_1144 * _1136, _1144 * _1137, _1144 * _1138)) + 1.0) * 0.5;
        float _3998 = isnan(0.0) ? _1152 : (isnan(_1152) ? 0.0 : max(_1152, 0.0));
        float _1161 = sqrt(((_1137 * _1137) + (_1136 * _1136)) + (_1138 * _1138)) / (_1049 + 9.9999997473787516355514526367188e-06);
        float _4009 = isnan(0.0) ? _1161 : (isnan(_1161) ? 0.0 : max(_1161, 0.0));
        float _1162 = isnan(1.0) ? _4009 : (isnan(_4009) ? 1.0 : min(_4009, 1.0));
        float _1163 = _1162 * 2.0;
        float _1167 = (1.0 - _1162) / (_1162 + 1.0);
        float _4020 = isnan(0.0) ? _1167 : (isnan(_1167) ? 0.0 : max(_1167, 0.0));
        float _1168 = isnan(1.0) ? _4020 : (isnan(_4020) ? 1.0 : min(_4020, 1.0));
        float _1177 = ((((1.0 - _1168) * (_1163 + 2.0)) * exp2(log2(isnan(1.0) ? _3998 : (isnan(_3998) ? 1.0 : min(_3998, 1.0))) * (_1163 + 1.0))) + _1168) * _1049;
        _1185 = _1016;
        _1187 = _1015;
        _1188 = _1014;
        _1189 = _1026;
        _1190 = _1025;
        _1191 = _1024;
        _1192 = _1036;
        _1193 = _1035;
        _1194 = _1034;
        _1195 = _1049;
        _1196 = _1048;
        _1197 = _1047;
        _1198 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1093 : (isnan(_1093) ? 0.0 : max(_1093, 0.0)));
        _1199 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1135 : (isnan(_1135) ? 0.0 : max(_1135, 0.0)));
        _1200 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1177 : (isnan(_1177) ? 0.0 : max(_1177, 0.0)));
    }
    else
    {
        _1185 = _1186;
        _1187 = _1186;
        _1188 = _1186;
        _1189 = _1186;
        _1190 = _1186;
        _1191 = _1186;
        _1192 = _1186;
        _1193 = _1186;
        _1194 = _1186;
        _1195 = _1186;
        _1196 = _1186;
        _1197 = _1186;
        _1198 = 0.0;
        _1199 = 0.0;
        _1200 = 0.0;
    }
    float _1494;
    float _1495;
    float _1496;
    float _1497;
    float _1498;
    float _1499;
    float _1500;
    float _1501;
    float _1502;
    float _1503;
    float _1504;
    float _1505;
    float _1506;
    float _1507;
    float _1508;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1225 = fma(_884, cbModelParam._m0[30u].z, fma(_880, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _876));
        float _1229 = fma(_884, cbModelParam._m0[31u].z, fma(_880, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _876));
        float _1233 = fma(_884, cbModelParam._m0[32u].z, fma(_880, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _876));
        float _1256 = _876 + _665;
        float _1257 = _880 + _666;
        float _1258 = _884 + _667;
        float _1268 = fma(_1258, cbModelParam._m0[30u].z, fma(_1257, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1256)) - _1225;
        float _1269 = fma(_1258, cbModelParam._m0[31u].z, fma(_1257, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1256)) - _1229;
        float _1270 = fma(_1258, cbModelParam._m0[32u].z, fma(_1257, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1256)) - _1233;
        float _1274 = inversesqrt(dot(vec3(_1268, _1269, _1270), vec3(_1268, _1269, _1270)));
        float _1287 = ((_1274 * _1268) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1225 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1288 = ((_1274 * _1269) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1229 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1289 = ((_1274 * _1270) / cbModelParam._m0[35u].z) + ((((((_1233 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1291 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1287, _1288, _1289), 0.0);
        vec4 _1298 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1287, _1288, _1289), 0.0);
        vec4 _1305 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1287, _1288, _1289), 0.0);
        vec4 _1312 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1287, _1288, _1289), 0.0);
        float _1324 = exp2((_1291.w + (-0.5)) * 20.0) * 2.0;
        float _1325 = _1324 * (_1291.x + (-0.5));
        float _1326 = _1324 * (_1291.y + (-0.5));
        float _1327 = _1324 * (_1291.z + (-0.5));
        float _1334 = exp2((_1298.w + (-0.5)) * 20.0) * 2.0;
        float _1335 = _1334 * (_1298.x + (-0.5));
        float _1336 = _1334 * (_1298.y + (-0.5));
        float _1337 = _1334 * (_1298.z + (-0.5));
        float _1344 = exp2((_1305.w + (-0.5)) * 20.0) * 2.0;
        float _1345 = _1344 * (_1305.x + (-0.5));
        float _1346 = _1344 * (_1305.y + (-0.5));
        float _1347 = _1344 * (_1305.z + (-0.5));
        float _1354 = exp2((_1312.w + (-0.5)) * 20.0) * 2.0;
        float _1355 = _1354 * (_1312.x + (-0.5));
        float _1356 = _1354 * (_1312.y + (-0.5));
        float _1357 = _1354 * (_1312.z + (-0.5));
        float _1358 = isnan(0.0) ? _1355 : (isnan(_1355) ? 0.0 : max(_1355, 0.0));
        float _1359 = isnan(0.0) ? _1356 : (isnan(_1356) ? 0.0 : max(_1356, 0.0));
        float _1360 = isnan(0.0) ? _1357 : (isnan(_1357) ? 0.0 : max(_1357, 0.0));
        float _1361 = _1325 * 0.5;
        float _1362 = _1335 * 0.5;
        float _1363 = _1345 * 0.5;
        float _1364 = dot(vec3(_1361, _1362, _1363), vec3(_1361, _1362, _1363));
        float _1369 = (_1364 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1364);
        float _1377 = (dot(vec3(_665, _666, _667), vec3(_1369 * _1361, _1369 * _1362, _1369 * _1363)) + 1.0) * 0.5;
        float _4061 = isnan(0.0) ? _1377 : (isnan(_1377) ? 0.0 : max(_1377, 0.0));
        float _1386 = sqrt(((_1362 * _1362) + (_1361 * _1361)) + (_1363 * _1363)) / (_1358 + 9.9999997473787516355514526367188e-06);
        float _4072 = isnan(0.0) ? _1386 : (isnan(_1386) ? 0.0 : max(_1386, 0.0));
        float _1387 = isnan(1.0) ? _4072 : (isnan(_4072) ? 1.0 : min(_4072, 1.0));
        float _1388 = _1387 * 2.0;
        float _1392 = (1.0 - _1387) / (_1387 + 1.0);
        float _4083 = isnan(0.0) ? _1392 : (isnan(_1392) ? 0.0 : max(_1392, 0.0));
        float _1393 = isnan(1.0) ? _4083 : (isnan(_4083) ? 1.0 : min(_4083, 1.0));
        float _1402 = ((((1.0 - _1393) * (_1388 + 2.0)) * exp2(log2(isnan(1.0) ? _4061 : (isnan(_4061) ? 1.0 : min(_4061, 1.0))) * (_1388 + 1.0))) + _1393) * _1358;
        float _1403 = _1326 * 0.5;
        float _1404 = _1336 * 0.5;
        float _1405 = _1346 * 0.5;
        float _1406 = dot(vec3(_1403, _1404, _1405), vec3(_1403, _1404, _1405));
        float _1411 = (_1406 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1406);
        float _1419 = (dot(vec3(_665, _666, _667), vec3(_1411 * _1403, _1411 * _1404, _1411 * _1405)) + 1.0) * 0.5;
        float _4094 = isnan(0.0) ? _1419 : (isnan(_1419) ? 0.0 : max(_1419, 0.0));
        float _1428 = sqrt(((_1404 * _1404) + (_1403 * _1403)) + (_1405 * _1405)) / (_1359 + 9.9999997473787516355514526367188e-06);
        float _4105 = isnan(0.0) ? _1428 : (isnan(_1428) ? 0.0 : max(_1428, 0.0));
        float _1429 = isnan(1.0) ? _4105 : (isnan(_4105) ? 1.0 : min(_4105, 1.0));
        float _1430 = _1429 * 2.0;
        float _1434 = (1.0 - _1429) / (_1429 + 1.0);
        float _4116 = isnan(0.0) ? _1434 : (isnan(_1434) ? 0.0 : max(_1434, 0.0));
        float _1435 = isnan(1.0) ? _4116 : (isnan(_4116) ? 1.0 : min(_4116, 1.0));
        float _1444 = ((((1.0 - _1435) * (_1430 + 2.0)) * exp2(log2(isnan(1.0) ? _4094 : (isnan(_4094) ? 1.0 : min(_4094, 1.0))) * (_1430 + 1.0))) + _1435) * _1359;
        float _1445 = _1327 * 0.5;
        float _1446 = _1337 * 0.5;
        float _1447 = _1347 * 0.5;
        float _1448 = dot(vec3(_1445, _1446, _1447), vec3(_1445, _1446, _1447));
        float _1453 = (_1448 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1448);
        float _1461 = (dot(vec3(_665, _666, _667), vec3(_1453 * _1445, _1453 * _1446, _1453 * _1447)) + 1.0) * 0.5;
        float _4127 = isnan(0.0) ? _1461 : (isnan(_1461) ? 0.0 : max(_1461, 0.0));
        float _1470 = sqrt(((_1446 * _1446) + (_1445 * _1445)) + (_1447 * _1447)) / (_1360 + 9.9999997473787516355514526367188e-06);
        float _4138 = isnan(0.0) ? _1470 : (isnan(_1470) ? 0.0 : max(_1470, 0.0));
        float _1471 = isnan(1.0) ? _4138 : (isnan(_4138) ? 1.0 : min(_4138, 1.0));
        float _1472 = _1471 * 2.0;
        float _1476 = (1.0 - _1471) / (_1471 + 1.0);
        float _4149 = isnan(0.0) ? _1476 : (isnan(_1476) ? 0.0 : max(_1476, 0.0));
        float _1477 = isnan(1.0) ? _4149 : (isnan(_4149) ? 1.0 : min(_4149, 1.0));
        float _1486 = ((((1.0 - _1477) * (_1472 + 2.0)) * exp2(log2(isnan(1.0) ? _4127 : (isnan(_4127) ? 1.0 : min(_4127, 1.0))) * (_1472 + 1.0))) + _1477) * _1360;
        _1494 = _1327;
        _1495 = _1326;
        _1496 = _1325;
        _1497 = _1337;
        _1498 = _1336;
        _1499 = _1335;
        _1500 = _1347;
        _1501 = _1346;
        _1502 = _1345;
        _1503 = _1360;
        _1504 = _1359;
        _1505 = _1358;
        _1506 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1402 : (isnan(_1402) ? 0.0 : max(_1402, 0.0)));
        _1507 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1444 : (isnan(_1444) ? 0.0 : max(_1444, 0.0)));
        _1508 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1486 : (isnan(_1486) ? 0.0 : max(_1486, 0.0)));
    }
    else
    {
        _1494 = _1186;
        _1495 = _1186;
        _1496 = _1186;
        _1497 = _1186;
        _1498 = _1186;
        _1499 = _1186;
        _1500 = _1186;
        _1501 = _1186;
        _1502 = _1186;
        _1503 = _1186;
        _1504 = _1186;
        _1505 = _1186;
        _1506 = 0.0;
        _1507 = 0.0;
        _1508 = 0.0;
    }
    float _1518 = (cbModelParam._m0[1u].x * (_1506 - _1198)) + _1198;
    float _1519 = (cbModelParam._m0[1u].x * (_1507 - _1199)) + _1199;
    float _1520 = (cbModelParam._m0[1u].x * (_1508 - _1200)) + _1200;
    float _1541 = fma(_1520, cbSceneParam._m0[89u].z, fma(_1519, cbSceneParam._m0[89u].y, _1518 * cbSceneParam._m0[89u].x));
    float _1544 = fma(_1520, cbSceneParam._m0[90u].z, fma(_1519, cbSceneParam._m0[90u].y, _1518 * cbSceneParam._m0[90u].x));
    float _1547 = fma(_1520, cbSceneParam._m0[91u].z, fma(_1519, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1518));
    float _1562 = _823 * 0.5;
    float _1563 = _824 * 0.5;
    float _1564 = _825 * 0.5;
    float _1565 = dot(vec4(_1562, _1563, _1564, 1.0), vec4(_1496, _1499, _1502, _1505));
    float _1568 = dot(vec4(_1562, _1563, _1564, 1.0), vec4(_1495, _1498, _1501, _1504));
    float _1571 = dot(vec4(_1562, _1563, _1564, 1.0), vec4(_1494, _1497, _1500, _1503));
    float _1605;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1578 = dot(vec4(_1562, _1563, _1564, 1.0), vec4(_1185, _1189, _1192, _1195));
        float _1582 = dot(vec4(_1562, _1563, _1564, 1.0), vec4(_1187, _1190, _1193, _1196));
        float _1586 = dot(vec4(_1562, _1563, _1564, 1.0), vec4(_1188, _1191, _1194, _1197));
        float _1593 = dot(vec4(cbModelParam._m0[39u]), vec4(_1562, _1563, _1564, 1.0));
        _1605 = dot(vec3(isnan(0.0) ? _1586 : (isnan(_1586) ? 0.0 : max(_1586, 0.0)), isnan(0.0) ? _1582 : (isnan(_1582) ? 0.0 : max(_1582, 0.0)), isnan(0.0) ? _1578 : (isnan(_1578) ? 0.0 : max(_1578, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1593) ? 0.0 : (isnan(0.0) ? _1593 : max(0.0, _1593))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1605 = 1.0;
    }
    float _1616;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1607 = dot(vec4(cbModelParam._m0[40u]), vec4(_1562, _1563, _1564, 1.0));
        _1616 = dot(vec3(isnan(0.0) ? _1565 : (isnan(_1565) ? 0.0 : max(_1565, 0.0)), isnan(0.0) ? _1568 : (isnan(_1568) ? 0.0 : max(_1568, 0.0)), isnan(0.0) ? _1571 : (isnan(_1571) ? 0.0 : max(_1571, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1607) ? 0.0 : (isnan(0.0) ? _1607 : max(0.0, _1607))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1616 = 1.0;
    }
    float _1620 = (_1616 * cbModelParam._m0[1u].x) + (_1605 * (1.0 - cbModelParam._m0[1u].x));
    float _1630 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _668);
    float _1631 = isnan(_1630) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1630 : min(cbModelParam._m0[25u].z, _1630));
    float _1711;
    float _1713;
    float _1715;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1678 = fma(_884, cbModelParam._m0[13u].z, fma(_880, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _876)) + cbModelParam._m0[13u].w;
        float _1682 = fma(_884, cbModelParam._m0[14u].z, fma(_880, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _876)) + cbModelParam._m0[14u].w;
        float _1686 = fma(_884, cbModelParam._m0[15u].z, fma(_880, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _876)) + cbModelParam._m0[15u].w;
        float _1689 = fma(_825, cbModelParam._m0[13u].z, fma(_824, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _823));
        float _1692 = fma(_825, cbModelParam._m0[14u].z, fma(_824, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _823));
        float _1695 = fma(_825, cbModelParam._m0[15u].z, fma(_824, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _823));
        float _1723;
        if (_1689 > 0.0)
        {
            _1723 = abs((1.0 - _1678) / _1689);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1689 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1678 + 1.0) / _1689);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1723 = frontier_phi_14_12_ladder;
        }
        float _1892;
        if (_1692 > 0.0)
        {
            _1892 = abs((1.0 - _1682) / _1692);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1692 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1682 + 1.0) / _1692);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1892 = frontier_phi_23_19_ladder;
        }
        float _2187;
        if (_1695 > 0.0)
        {
            _2187 = abs((1.0 - _1686) / _1695);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1695 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1686 + 1.0) / _1695);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2187 = frontier_phi_35_30_ladder;
        }
        float _2189 = isnan(_1892) ? _1723 : (isnan(_1723) ? _1892 : min(_1723, _1892));
        float _2190 = isnan(_2187) ? _2189 : (isnan(_2189) ? _2187 : min(_2189, _2187));
        float _2194 = (_2190 * _1689) + _1678;
        float _2195 = (_2190 * _1692) + _1682;
        float _2196 = (_2190 * _1695) + _1686;
        float _2197 = _2190 * 9.9999997473787516355514526367188e-05;
        float _2199 = (-1.0) - _2197;
        float _2201 = _2197 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2196 > _2201) || ((_2196 < _2199) || ((_2195 > _2201) || ((_2195 < _2199) || ((_2194 < _2199) || (_2194 > _2201))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2341 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2196, cbModelParam._m0[9u].z, fma(_2195, cbModelParam._m0[9u].y, _2194 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2196, cbModelParam._m0[10u].z, fma(_2195, cbModelParam._m0[10u].y, _2194 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2196, cbModelParam._m0[11u].z, fma(_2195, cbModelParam._m0[11u].y, _2194 * cbModelParam._m0[11u].x))), _1631);
            frontier_phi_13_35_ladder = _2341.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2341.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2341.x * cbModelParam._m0[1u].y;
        }
        _1711 = frontier_phi_13_35_ladder_2;
        _1713 = frontier_phi_13_35_ladder_1;
        _1715 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1699 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_823, _824, _825), _1631);
        _1711 = _1699.x * cbModelParam._m0[1u].y;
        _1713 = _1699.y * cbModelParam._m0[1u].y;
        _1715 = _1699.z * cbModelParam._m0[1u].y;
    }
    float _1719 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _668);
    float _1720 = isnan(_1719) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1719 : min(cbModelParam._m0[25u].w, _1719));
    float _1809;
    float _1811;
    float _1813;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1773 = fma(_884, cbModelParam._m0[21u].z, fma(_880, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _876)) + cbModelParam._m0[21u].w;
        float _1777 = fma(_884, cbModelParam._m0[22u].z, fma(_880, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _876)) + cbModelParam._m0[22u].w;
        float _1781 = fma(_884, cbModelParam._m0[23u].z, fma(_880, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _876)) + cbModelParam._m0[23u].w;
        float _1784 = fma(_825, cbModelParam._m0[21u].z, fma(_824, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _823));
        float _1787 = fma(_825, cbModelParam._m0[22u].z, fma(_824, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _823));
        float _1790 = fma(_825, cbModelParam._m0[23u].z, fma(_824, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _823));
        float _1897;
        if (_1784 > 0.0)
        {
            _1897 = abs((1.0 - _1773) / _1784);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1784 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1773 + 1.0) / _1784);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1897 = frontier_phi_25_21_ladder;
        }
        float _2214;
        if (_1787 > 0.0)
        {
            _2214 = abs((1.0 - _1777) / _1787);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1787 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1777 + 1.0) / _1787);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2214 = frontier_phi_37_32_ladder;
        }
        float _2541;
        if (_1790 > 0.0)
        {
            _2541 = abs((1.0 - _1781) / _1790);
        }
        else
        {
            float frontier_phi_47_44_ladder;
            if (_1790 < 0.0)
            {
                frontier_phi_47_44_ladder = abs((_1781 + 1.0) / _1790);
            }
            else
            {
                frontier_phi_47_44_ladder = 5000.0;
            }
            _2541 = frontier_phi_47_44_ladder;
        }
        float _2543 = isnan(_2214) ? _1897 : (isnan(_1897) ? _2214 : min(_1897, _2214));
        float _2544 = isnan(_2541) ? _2543 : (isnan(_2543) ? _2541 : min(_2543, _2541));
        float _2548 = (_2544 * _1784) + _1773;
        float _2549 = (_2544 * _1787) + _1777;
        float _2550 = (_2544 * _1790) + _1781;
        float _2551 = _2544 * 9.9999997473787516355514526367188e-05;
        float _2552 = (-1.0) - _2551;
        float _2554 = _2551 + 1.0;
        float frontier_phi_22_47_ladder;
        float frontier_phi_22_47_ladder_1;
        float frontier_phi_22_47_ladder_2;
        if ((_2550 > _2554) || ((_2550 < _2552) || ((_2549 > _2554) || ((_2549 < _2552) || ((_2548 < _2552) || (_2548 > _2554))))))
        {
            frontier_phi_22_47_ladder = 0.0;
            frontier_phi_22_47_ladder_1 = 0.0;
            frontier_phi_22_47_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2668 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2550, cbModelParam._m0[17u].z, fma(_2549, cbModelParam._m0[17u].y, _2548 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2550, cbModelParam._m0[18u].z, fma(_2549, cbModelParam._m0[18u].y, _2548 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2550, cbModelParam._m0[19u].z, fma(_2549, cbModelParam._m0[19u].y, _2548 * cbModelParam._m0[19u].x))), _1720);
            frontier_phi_22_47_ladder = _2668.z * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_1 = _2668.y * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_2 = _2668.x * cbModelParam._m0[1u].z;
        }
        _1809 = frontier_phi_22_47_ladder_2;
        _1811 = frontier_phi_22_47_ladder_1;
        _1813 = frontier_phi_22_47_ladder;
    }
    else
    {
        vec4 _1793 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_823, _824, _825), _1720);
        _1809 = _1793.x * cbModelParam._m0[1u].z;
        _1811 = _1793.y * cbModelParam._m0[1u].z;
        _1813 = _1793.z * cbModelParam._m0[1u].z;
    }
    float _1825 = ((((1.0 - _844) * ((_831 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_844 * _831)) * _815;
    float _1826 = _1825 * ((cbModelParam._m0[1u].w * (_1809 - _1711)) + _1711);
    float _1827 = _1825 * ((cbModelParam._m0[1u].w * (_1811 - _1713)) + _1713);
    float _1828 = _1825 * ((cbModelParam._m0[1u].w * (_1813 - _1715)) + _1715);
    float _1831 = fma(_1828, cbSceneParam._m0[89u].z, fma(_1827, cbSceneParam._m0[89u].y, _1826 * cbSceneParam._m0[89u].x));
    float _1834 = fma(_1828, cbSceneParam._m0[90u].z, fma(_1827, cbSceneParam._m0[90u].y, _1826 * cbSceneParam._m0[90u].x));
    float _1837 = fma(_1828, cbSceneParam._m0[91u].z, fma(_1827, cbSceneParam._m0[91u].y, _1826 * cbSceneParam._m0[91u].x));
    float _1871 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1875 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1879 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1883 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1884 = _1871 / _1883;
    float _1885 = _1875 / _1883;
    float _1886 = _1879 / _1883;
    float _2033;
    float _2034;
    float _2035;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1913 = ((uint(_1886 > cbSceneParam._m0[59u].y) + uint(_1886 > cbSceneParam._m0[59u].x)) + uint(_1886 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1914 = _1913 + 43u;
        uint _1922 = _1913 + 44u;
        uint _1930 = _1913 + 45u;
        uint _1938 = _1913 + 46u;
        float _1949 = fma(_1883, cbSceneParam._m0[_1914].w, fma(_1879, cbSceneParam._m0[_1914].z, fma(_1875, cbSceneParam._m0[_1914].y, _1871 * cbSceneParam._m0[_1914].x)));
        float _1953 = fma(_1883, cbSceneParam._m0[_1922].w, fma(_1879, cbSceneParam._m0[_1922].z, fma(_1875, cbSceneParam._m0[_1922].y, _1871 * cbSceneParam._m0[_1922].x)));
        float _1961 = fma(_1883, cbSceneParam._m0[_1938].w, fma(_1879, cbSceneParam._m0[_1938].z, fma(_1875, cbSceneParam._m0[_1938].y, _1871 * cbSceneParam._m0[_1938].x)));
        float _1966 = cbSceneParam._m0[33u].z * _1961;
        float _1968 = cbSceneParam._m0[33u].w * _1961;
        float _1971 = fma(_1883, cbSceneParam._m0[_1930].w, fma(_1879, cbSceneParam._m0[_1930].z, fma(_1875, cbSceneParam._m0[_1930].y, _1871 * cbSceneParam._m0[_1930].x))) / _1961;
        float _2019 = (cbSceneParam._m0[33u].x - sqrt(((_1885 * _1885) + (_1884 * _1884)) + (_1886 * _1886))) * cbSceneParam._m0[33u].y;
        float _4275 = isnan(0.0) ? _2019 : (isnan(_2019) ? 0.0 : max(_2019, 0.0));
        float _2026 = (isnan(1.0) ? _4275 : (isnan(_4275) ? 1.0 : min(_4275, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1966 + _1949) / _1961, (_1968 + _1953) / _1961), _1971), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1968 + _1949) / _1961, (_1953 - _1966) / _1961), _1971), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1949 - _1966) / _1961, (_1953 - _1968) / _1961), _1971), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1949 - _1968) / _1961, (_1966 + _1953) / _1961), _1971), 0.0)).x), vec4(0.25)));
        _2033 = 1.0 - (_2026 * cbSceneParam._m0[34u].x);
        _2034 = 1.0 - (_2026 * cbSceneParam._m0[34u].y);
        _2035 = 1.0 - (_2026 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2033 = 1.0;
        _2034 = 1.0;
        _2035 = 1.0;
    }
    float _2099;
    float _2101;
    float _2103;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2087 = fma(_1883, cbSceneParam._m0[63u].w, fma(_1879, cbSceneParam._m0[63u].z, fma(_1875, cbSceneParam._m0[63u].y, _1871 * cbSceneParam._m0[63u].x)));
        float _2088 = fma(_1883, cbSceneParam._m0[60u].w, fma(_1879, cbSceneParam._m0[60u].z, fma(_1875, cbSceneParam._m0[60u].y, _1871 * cbSceneParam._m0[60u].x))) / _2087;
        float _2089 = fma(_1883, cbSceneParam._m0[61u].w, fma(_1879, cbSceneParam._m0[61u].z, fma(_1875, cbSceneParam._m0[61u].y, _1871 * cbSceneParam._m0[61u].x))) / _2087;
        float frontier_phi_34_33_ladder;
        float frontier_phi_34_33_ladder_1;
        float frontier_phi_34_33_ladder_2;
        if ((((_2088 >= cbSceneParam._m0[64u].x) && (_2089 >= cbSceneParam._m0[64u].y)) && (_2088 <= cbSceneParam._m0[64u].z)) && (_2089 <= cbSceneParam._m0[64u].w))
        {
            float _2227 = fma(_1883, cbSceneParam._m0[62u].w, fma(_1879, cbSceneParam._m0[62u].z, fma(_1875, cbSceneParam._m0[62u].y, _1871 * cbSceneParam._m0[62u].x))) / _2087;
            float _2231 = isnan(cbSceneParam._m0[41u].w) ? _2227 : (isnan(_2227) ? cbSceneParam._m0[41u].w : max(_2227, cbSceneParam._m0[41u].w));
            float _2274 = (cbSceneParam._m0[33u].x - sqrt(((_1885 * _1885) + (_1884 * _1884)) + (_1886 * _1886))) * cbSceneParam._m0[33u].y;
            float _4291 = isnan(0.0) ? _2274 : (isnan(_2274) ? 0.0 : max(_2274, 0.0));
            float _2281 = (isnan(1.0) ? _4291 : (isnan(_4291) ? 1.0 : min(_4291, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2088, cbSceneParam._m0[33u].w + _2089), _2231), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2088, _2089 - cbSceneParam._m0[33u].z), _2231), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2088 - cbSceneParam._m0[33u].z, _2089 - cbSceneParam._m0[33u].w), _2231), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2088 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2089), _2231), 0.0)).x), vec4(0.25)));
            float _2285 = 1.0 - (_2281 * cbSceneParam._m0[34u].x);
            float _2286 = 1.0 - (_2281 * cbSceneParam._m0[34u].y);
            float _2287 = 1.0 - (_2281 * cbSceneParam._m0[34u].z);
            frontier_phi_34_33_ladder = isnan(_2287) ? _2035 : (isnan(_2035) ? _2287 : min(_2035, _2287));
            frontier_phi_34_33_ladder_1 = isnan(_2286) ? _2034 : (isnan(_2034) ? _2286 : min(_2034, _2286));
            frontier_phi_34_33_ladder_2 = isnan(_2285) ? _2033 : (isnan(_2033) ? _2285 : min(_2033, _2285));
        }
        else
        {
            frontier_phi_34_33_ladder = _2035;
            frontier_phi_34_33_ladder_1 = _2034;
            frontier_phi_34_33_ladder_2 = _2033;
        }
        _2099 = frontier_phi_34_33_ladder_2;
        _2101 = frontier_phi_34_33_ladder_1;
        _2103 = frontier_phi_34_33_ladder;
    }
    else
    {
        _2099 = _2033;
        _2101 = _2034;
        _2103 = _2035;
    }
    uvec4 _2108 = floatBitsToUint(cbInstanceData._m0[_236 + 5u]);
    uint _2110 = _2108.x * 14u;
    uint _2111 = _2110 + 13u;
    float _2118 = _815 + (-1.0);
    float _2123 = (cbLight._m0[_2111].x * _2118) + 1.0;
    float _2124 = (cbLight._m0[_2111].y * _2118) + 1.0;
    float _2125 = (cbLight._m0[_2111].z * _2118) + 1.0;
    float _2126 = (cbLight._m0[_2111].w * _2118) + 1.0;
    uint _2127 = _2110 + 5u;
    float _2133 = isnan(1.0) ? _2124 : (isnan(_2124) ? 1.0 : min(_2124, 1.0));
    uint _2137 = _2110 + 4u;
    float _2146 = isnan(1.0) ? _2123 : (isnan(_2123) ? 1.0 : min(_2123, 1.0));
    uint _2150 = _2110 | 1u;
    float _2161 = dot(vec3(cbLight._m0[_2110].xyz), vec3(_665, _666, _667));
    float _2164 = dot(vec3(cbLight._m0[_2150].xyz), vec3(_665, _666, _667));
    float _4327 = isnan(0.0) ? _2161 : (isnan(_2161) ? 0.0 : max(_2161, 0.0));
    float _4338 = isnan(0.0) ? _2164 : (isnan(_2164) ? 0.0 : max(_2164, 0.0));
    float _2169 = (isnan(1.0) ? _4327 : (isnan(_4327) ? 1.0 : min(_4327, 1.0))) * 0.3183098733425140380859375;
    float _2171 = (isnan(1.0) ? _4338 : (isnan(_4338) ? 1.0 : min(_4338, 1.0))) * 0.3183098733425140380859375;
    float _2178 = ((cbLight._m0[_2127].x * _2133) * _2171) + (((cbLight._m0[_2137].x * _2099) * _2146) * _2169);
    float _2179 = ((_2133 * cbLight._m0[_2127].y) * _2171) + (((cbLight._m0[_2137].y * _2101) * _2146) * _2169);
    float _2180 = ((_2133 * cbLight._m0[_2127].z) * _2171) + (((cbLight._m0[_2137].z * _2103) * _2146) * _2169);
    uvec4 _2184 = floatBitsToUint(cbLight._m0[_2110 + 12u]);
    bool _2186 = _2184.x == 0u;
    float _2288;
    float _2290;
    float _2292;
    if (_2186)
    {
        _2288 = _2178;
        _2290 = _2179;
        _2292 = _2180;
    }
    else
    {
        uint _2296 = _2110 + 6u;
        float _2312 = (dot(vec3(cbLight._m0[_2110 + 2u].xyz), vec3(_665, _666, _667)) * 0.5) + 0.5;
        float _2313 = _2312 * _2312;
        float _4349 = isnan(0.0) ? _2313 : (isnan(_2313) ? 0.0 : max(_2313, 0.0));
        float _2314 = isnan(1.0) ? _4349 : (isnan(_4349) ? 1.0 : min(_4349, 1.0));
        float _2315 = isnan(1.0) ? _2125 : (isnan(_2125) ? 1.0 : min(_2125, 1.0));
        _2288 = (((cbLight._m0[_2296].x * 0.3183098733425140380859375) * _2314) * _2315) + _2178;
        _2290 = (((cbLight._m0[_2296].y * 0.3183098733425140380859375) * _2314) * _2315) + _2179;
        _2292 = (((cbLight._m0[_2296].z * 0.3183098733425140380859375) * _2314) * _2315) + _2180;
    }
    bool _2295 = _2184.y == 0u;
    float _2350;
    float _2352;
    float _2354;
    if (_2295)
    {
        _2350 = _2288;
        _2352 = _2290;
        _2354 = _2292;
    }
    else
    {
        uint _2512 = _2110 + 7u;
        float _2528 = (dot(vec3(cbLight._m0[_2110 + 3u].xyz), vec3(_665, _666, _667)) * 0.5) + 0.5;
        float _2529 = _2528 * _2528;
        float _4365 = isnan(0.0) ? _2529 : (isnan(_2529) ? 0.0 : max(_2529, 0.0));
        float _2530 = isnan(1.0) ? _4365 : (isnan(_4365) ? 1.0 : min(_4365, 1.0));
        float _2531 = isnan(1.0) ? _2126 : (isnan(_2126) ? 1.0 : min(_2126, 1.0));
        _2350 = (((cbLight._m0[_2512].x * 0.3183098733425140380859375) * _2530) * _2531) + _2288;
        _2352 = (((cbLight._m0[_2512].y * 0.3183098733425140380859375) * _2530) * _2531) + _2290;
        _2354 = (((cbLight._m0[_2512].z * 0.3183098733425140380859375) * _2530) * _2531) + _2292;
    }
    uint _2357 = _2110 + 8u;
    float _2370 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2110].w)) * _668) * 0.949999988079071044921875);
    float _2371 = _2370 * _2370;
    float _2372 = cbLight._m0[_2110].x + _744;
    float _2373 = cbLight._m0[_2110].y + _745;
    float _2374 = cbLight._m0[_2110].z + _746;
    float _2378 = inversesqrt(dot(vec3(_2372, _2373, _2374), vec3(_2372, _2373, _2374)));
    float _2379 = _2378 * _2372;
    float _2380 = _2378 * _2373;
    float _2381 = _2378 * _2374;
    float _2382 = dot(vec3(_665, _666, _667), vec3(cbLight._m0[_2110].xyz));
    float _4381 = isnan(0.0) ? _2382 : (isnan(_2382) ? 0.0 : max(_2382, 0.0));
    float _2385 = isnan(1.0) ? _4381 : (isnan(_4381) ? 1.0 : min(_4381, 1.0));
    float _4392 = isnan(0.0) ? _816 : (isnan(_816) ? 0.0 : max(_816, 0.0));
    float _2386 = isnan(1.0) ? _4392 : (isnan(_4392) ? 1.0 : min(_4392, 1.0));
    float _2387 = dot(vec3(_665, _666, _667), vec3(_2379, _2380, _2381));
    float _4403 = isnan(0.0) ? _2387 : (isnan(_2387) ? 0.0 : max(_2387, 0.0));
    float _2390 = isnan(1.0) ? _4403 : (isnan(_4403) ? 1.0 : min(_4403, 1.0));
    float _2391 = dot(vec3(cbLight._m0[_2110].xyz), vec3(_2379, _2380, _2381));
    float _4414 = isnan(0.0) ? _2391 : (isnan(_2391) ? 0.0 : max(_2391, 0.0));
    float _2395 = _2371 * _2371;
    float _2399 = ((_2390 * _2390) * (_2395 + (-1.0))) + 1.0;
    float _2410 = (exp2(log2(1.0 - (isnan(1.0) ? _4414 : (isnan(_4414) ? 1.0 : min(_4414, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2411 = 1.0 - _2371;
    float _2422 = (0.5 / (((_2386 * ((_2385 * _2411) + _2371)) + 9.9999999392252902907785028219223e-09) + (((_2386 * _2411) + _2371) * _2385))) * _2385;
    float _4425 = isnan(0.0) ? _2422 : (isnan(_2422) ? 0.0 : max(_2422, 0.0));
    float _2424 = (isnan(1.0) ? _4425 : (isnan(_4425) ? 1.0 : min(_4425, 1.0))) * (_2395 / ((_2399 * _2399) * 3.141590118408203125));
    uint _2438 = _2110 + 9u;
    float _2449 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2150].w)) * _668) * 0.949999988079071044921875);
    float _2450 = _2449 * _2449;
    float _2451 = cbLight._m0[_2150].x + _744;
    float _2452 = cbLight._m0[_2150].y + _745;
    float _2453 = cbLight._m0[_2150].z + _746;
    float _2457 = inversesqrt(dot(vec3(_2451, _2452, _2453), vec3(_2451, _2452, _2453)));
    float _2458 = _2457 * _2451;
    float _2459 = _2457 * _2452;
    float _2460 = _2457 * _2453;
    float _2461 = dot(vec3(_665, _666, _667), vec3(cbLight._m0[_2150].xyz));
    float _4436 = isnan(0.0) ? _2461 : (isnan(_2461) ? 0.0 : max(_2461, 0.0));
    float _2464 = isnan(1.0) ? _4436 : (isnan(_4436) ? 1.0 : min(_4436, 1.0));
    float _2465 = dot(vec3(_665, _666, _667), vec3(_2458, _2459, _2460));
    float _4447 = isnan(0.0) ? _2465 : (isnan(_2465) ? 0.0 : max(_2465, 0.0));
    float _2468 = isnan(1.0) ? _4447 : (isnan(_4447) ? 1.0 : min(_4447, 1.0));
    float _2469 = dot(vec3(cbLight._m0[_2150].xyz), vec3(_2458, _2459, _2460));
    float _4458 = isnan(0.0) ? _2469 : (isnan(_2469) ? 0.0 : max(_2469, 0.0));
    float _2473 = _2450 * _2450;
    float _2477 = ((_2468 * _2468) * (_2473 + (-1.0))) + 1.0;
    float _2486 = (exp2(log2(1.0 - (isnan(1.0) ? _4458 : (isnan(_4458) ? 1.0 : min(_4458, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2487 = 1.0 - _2450;
    float _2497 = (0.5 / (((_2386 * ((_2464 * _2487) + _2450)) + 9.9999999392252902907785028219223e-09) + (((_2386 * _2487) + _2450) * _2464))) * _2464;
    float _4469 = isnan(0.0) ? _2497 : (isnan(_2497) ? 0.0 : max(_2497, 0.0));
    float _2499 = (isnan(1.0) ? _4469 : (isnan(_4469) ? 1.0 : min(_4469, 1.0))) * (_2473 / ((_2477 * _2477) * 3.141590118408203125));
    float _2509 = (((_2486 * cbLight._m0[_2438].x) * _2499) * _2133) + ((((cbLight._m0[_2357].x * _2099) * _2410) * _2424) * _2146);
    float _2510 = (((_2486 * cbLight._m0[_2438].y) * _2499) * _2133) + ((((cbLight._m0[_2357].y * _2101) * _2410) * _2424) * _2146);
    float _2511 = (((_2486 * cbLight._m0[_2438].z) * _2499) * _2133) + ((((cbLight._m0[_2357].z * _2103) * _2410) * _2424) * _2146);
    float _2567;
    float _2569;
    float _2571;
    if (_2186)
    {
        _2567 = _2509;
        _2569 = _2510;
        _2571 = _2511;
    }
    else
    {
        uint _2573 = _2110 + 2u;
        uint _2577 = _2110 + 10u;
        float _2591 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2573].w)) * _668) * 0.949999988079071044921875);
        float _2592 = _2591 * _2591;
        float _2593 = cbLight._m0[_2573].x + _744;
        float _2594 = cbLight._m0[_2573].y + _745;
        float _2595 = cbLight._m0[_2573].z + _746;
        float _2599 = inversesqrt(dot(vec3(_2593, _2594, _2595), vec3(_2593, _2594, _2595)));
        float _2600 = _2599 * _2593;
        float _2601 = _2599 * _2594;
        float _2602 = _2599 * _2595;
        float _2603 = dot(vec3(_665, _666, _667), vec3(cbLight._m0[_2573].xyz));
        float _4480 = isnan(0.0) ? _2603 : (isnan(_2603) ? 0.0 : max(_2603, 0.0));
        float _2606 = isnan(1.0) ? _4480 : (isnan(_4480) ? 1.0 : min(_4480, 1.0));
        float _2607 = dot(vec3(_665, _666, _667), vec3(_2600, _2601, _2602));
        float _4491 = isnan(0.0) ? _2607 : (isnan(_2607) ? 0.0 : max(_2607, 0.0));
        float _2610 = isnan(1.0) ? _4491 : (isnan(_4491) ? 1.0 : min(_4491, 1.0));
        float _2611 = dot(vec3(cbLight._m0[_2573].xyz), vec3(_2600, _2601, _2602));
        float _4502 = isnan(0.0) ? _2611 : (isnan(_2611) ? 0.0 : max(_2611, 0.0));
        float _2615 = _2592 * _2592;
        float _2619 = ((_2610 * _2610) * (_2615 + (-1.0))) + 1.0;
        float _2628 = (exp2(log2(1.0 - (isnan(1.0) ? _4502 : (isnan(_4502) ? 1.0 : min(_4502, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2629 = 1.0 - _2592;
        float _2639 = (0.5 / (((_2386 * ((_2606 * _2629) + _2592)) + 9.9999999392252902907785028219223e-09) + (((_2386 * _2629) + _2592) * _2606))) * _2606;
        float _4513 = isnan(0.0) ? _2639 : (isnan(_2639) ? 0.0 : max(_2639, 0.0));
        float _2641 = (isnan(1.0) ? _4513 : (isnan(_4513) ? 1.0 : min(_4513, 1.0))) * (_2615 / ((_2619 * _2619) * 3.141590118408203125));
        float _2642 = isnan(1.0) ? _2125 : (isnan(_2125) ? 1.0 : min(_2125, 1.0));
        _2567 = (((_2628 * cbLight._m0[_2577].x) * _2641) * _2642) + _2509;
        _2569 = (((_2628 * cbLight._m0[_2577].y) * _2641) * _2642) + _2510;
        _2571 = (((_2628 * cbLight._m0[_2577].z) * _2641) * _2642) + _2511;
    }
    float _2673;
    float _2675;
    float _2677;
    if (_2295)
    {
        _2673 = _2567;
        _2675 = _2569;
        _2677 = _2571;
    }
    else
    {
        uint _2684 = _2110 + 3u;
        uint _2688 = _2110 + 11u;
        float _2702 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2684].w)) * _668) * 0.949999988079071044921875);
        float _2703 = _2702 * _2702;
        float _2704 = cbLight._m0[_2684].x + _744;
        float _2705 = cbLight._m0[_2684].y + _745;
        float _2706 = cbLight._m0[_2684].z + _746;
        float _2710 = inversesqrt(dot(vec3(_2704, _2705, _2706), vec3(_2704, _2705, _2706)));
        float _2711 = _2710 * _2704;
        float _2712 = _2710 * _2705;
        float _2713 = _2710 * _2706;
        float _2714 = dot(vec3(_665, _666, _667), vec3(cbLight._m0[_2684].xyz));
        float _4529 = isnan(0.0) ? _2714 : (isnan(_2714) ? 0.0 : max(_2714, 0.0));
        float _2717 = isnan(1.0) ? _4529 : (isnan(_4529) ? 1.0 : min(_4529, 1.0));
        float _2718 = dot(vec3(_665, _666, _667), vec3(_2711, _2712, _2713));
        float _4540 = isnan(0.0) ? _2718 : (isnan(_2718) ? 0.0 : max(_2718, 0.0));
        float _2721 = isnan(1.0) ? _4540 : (isnan(_4540) ? 1.0 : min(_4540, 1.0));
        float _2722 = dot(vec3(cbLight._m0[_2684].xyz), vec3(_2711, _2712, _2713));
        float _4551 = isnan(0.0) ? _2722 : (isnan(_2722) ? 0.0 : max(_2722, 0.0));
        float _2726 = _2703 * _2703;
        float _2730 = ((_2721 * _2721) * (_2726 + (-1.0))) + 1.0;
        float _2739 = (exp2(log2(1.0 - (isnan(1.0) ? _4551 : (isnan(_4551) ? 1.0 : min(_4551, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2740 = 1.0 - _2703;
        float _2750 = (0.5 / (((_2386 * ((_2717 * _2740) + _2703)) + 9.9999999392252902907785028219223e-09) + (((_2386 * _2740) + _2703) * _2717))) * _2717;
        float _4562 = isnan(0.0) ? _2750 : (isnan(_2750) ? 0.0 : max(_2750, 0.0));
        float _2752 = (isnan(1.0) ? _4562 : (isnan(_4562) ? 1.0 : min(_4562, 1.0))) * (_2726 / ((_2730 * _2730) * 3.141590118408203125));
        float _2753 = isnan(1.0) ? _2126 : (isnan(_2126) ? 1.0 : min(_2126, 1.0));
        _2673 = (((_2739 * cbLight._m0[_2688].x) * _2752) * _2753) + _2567;
        _2675 = (((_2739 * cbLight._m0[_2688].y) * _2752) * _2753) + _2569;
        _2677 = (((_2739 * cbLight._m0[_2688].z) * _2752) * _2753) + _2571;
    }
    float _2819;
    float _2821;
    float _2823;
    float _2825;
    float _2827;
    float _2829;
    if (_2108.y == 0u)
    {
        uvec4 _2774 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2775 = _2774.x;
        uint _2786 = uint((float(_2774.y) * floor(float(uint(cbSceneParam._m0[85u].y * _753) / _2775))) + floor(float(uint(cbSceneParam._m0[85u].x * _752) / _2775)));
        float _2796 = (log2(_1886 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2797 = isnan(0.0) ? _2796 : (isnan(_2796) ? 0.0 : max(_2796, 0.0));
        uint _2800 = uint(isnan(14.0) ? _2797 : (isnan(_2797) ? 14.0 : min(_2797, 14.0)));
        uvec4 _2805 = texelFetch(g_lightClusterGridBuffer, int(((_2800 << 2u) + (_2786 << 6u)) >> 2u));
        uint _2806 = _2805.x;
        uint _2807 = _2774.z;
        float _2886;
        float _2888;
        float _2890;
        float _2892;
        float _2894;
        float _2896;
        if (((((1u << ((_2807 >> 4u) & 15u)) + 4294967295u) & _2806) == 0u) || ((_2807 & 240u) == 0u))
        {
            _2886 = 0.0;
            _2888 = 0.0;
            _2890 = 0.0;
            _2892 = 0.0;
            _2894 = 0.0;
            _2896 = 0.0;
        }
        else
        {
            float _2887;
            float _2889;
            float _2891;
            float _2893;
            float _2895;
            float _2897;
            float _3031 = 0.0;
            float _3032 = 0.0;
            float _3033 = 0.0;
            float _3034 = 0.0;
            float _3035 = 0.0;
            float _3036 = 0.0;
            uint _3037 = 0u;
            uint _3046;
            bool _3047;
            for (;;)
            {
                _3046 = texelFetch(g_lightClassification, int((((_2800 << 5u) + (_2786 << 9u)) + (_3037 << 2u)) >> 2u)).x;
                _3047 = _3046 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3047)
                {
                    frontier_phi_66_pred = _3036;
                    frontier_phi_66_pred_1 = _3035;
                    frontier_phi_66_pred_2 = _3034;
                    frontier_phi_66_pred_3 = _3033;
                    frontier_phi_66_pred_4 = _3032;
                    frontier_phi_66_pred_5 = _3031;
                }
                else
                {
                    float _3155;
                    float _3156;
                    float _3157;
                    float _3158;
                    float _3159;
                    float _3160;
                    uint _3161;
                    _3155 = _3031;
                    _3156 = _3032;
                    _3157 = _3033;
                    _3158 = _3034;
                    _3159 = _3035;
                    _3160 = _3036;
                    _3161 = _3046;
                    float _3087;
                    float _3088;
                    float _3089;
                    float _3090;
                    float _3091;
                    float _3092;
                    for (;;)
                    {
                        uint _3165 = uint(findLSB(_3161)) + (_3037 << 5u);
                        uint _3162 = (_3161 + 4294967295u) & _3161;
                        uint _3167 = _3165 * 48u;
                        vec4 _3181 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3167)).x, texelFetch(g_PointLightRenderingBuffer, int(_3167 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3167 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3167 + 3u)).x));
                        uint _3187 = (_3165 * 48u) + 4u;
                        vec4 _3200 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3187)).x, texelFetch(g_PointLightRenderingBuffer, int(_3187 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3187 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3187 + 3u)).x));
                        uint _3206 = (_3165 * 48u) + 8u;
                        vec3 _3217 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3206)).x, texelFetch(g_PointLightRenderingBuffer, int(_3206 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3206 + 2u)).x));
                        float _3221 = _3181.x - _1884;
                        float _3222 = _3181.y - _1885;
                        float _3223 = _3181.z - _1886;
                        float _3224 = dot(vec3(_3221, _3222, _3223), vec3(_3221, _3222, _3223));
                        float _3227 = inversesqrt(_3224);
                        float _3228 = _3227 * _3221;
                        float _3229 = _3227 * _3222;
                        float _3230 = _3227 * _3223;
                        float _3231 = dot(vec3(_771, _774, _777), vec3(_3228, _3229, _3230));
                        float _3236 = 1.0 - (_3224 * _3181.w);
                        float _4588 = isnan(0.0) ? _3236 : (isnan(_3236) ? 0.0 : max(_3236, 0.0));
                        float _3237 = isnan(1.0) ? _4588 : (isnan(_4588) ? 1.0 : min(_4588, 1.0));
                        float _3238 = sqrt(_3224) * _3200.w;
                        float _3241 = 1.39999997615814208984375 / (_3238 + 1.39999997615814208984375);
                        float _3242 = _3241 * _3241;
                        float _3245 = ((1.0 - _3242) * _3231) + _3242;
                        float _3248 = _3238 * _3238;
                        float _3252 = ((isnan(0.0) ? _3245 : (isnan(_3245) ? 0.0 : max(_3245, 0.0))) * _3237) / ((_3248 * 0.699999988079071044921875) + 1.0);
                        float _3256 = (-0.0) - _1884;
                        float _3257 = (-0.0) - _1885;
                        float _3258 = (-0.0) - _1886;
                        float _3262 = inversesqrt(dot(vec3(_3256, _3257, _3258), vec3(_3256, _3257, _3258)));
                        float _3263 = _3262 * _3256;
                        float _3264 = _3262 * _3257;
                        float _3265 = _3262 * _3258;
                        float _3272 = exp2(log2(1.0 / ((_3248 * 3.5) + 5.0)) * 0.25);
                        float _3273 = 1.0 - _831;
                        float _3280 = sqrt(1.0 - ((1.0 - (_3273 * _3273)) * (1.0 - (_3272 * _3272))));
                        float _3281 = _3280 * _3280;
                        float _3282 = _3281 * _3281;
                        float _3283 = _3263 + _3228;
                        float _3284 = _3264 + _3229;
                        float _3285 = _3265 + _3230;
                        float _3289 = inversesqrt(dot(vec3(_3283, _3284, _3285), vec3(_3283, _3284, _3285)));
                        float _3293 = dot(vec3(_771, _774, _777), vec3(_3263, _3264, _3265));
                        float _4604 = isnan(0.0) ? _3293 : (isnan(_3293) ? 0.0 : max(_3293, 0.0));
                        float _3296 = isnan(1.0) ? _4604 : (isnan(_4604) ? 1.0 : min(_4604, 1.0));
                        float _3297 = dot(vec3(_771, _774, _777), vec3(_3289 * _3283, _3289 * _3284, _3289 * _3285));
                        float _4615 = isnan(0.0) ? _3297 : (isnan(_3297) ? 0.0 : max(_3297, 0.0));
                        float _3300 = isnan(1.0) ? _4615 : (isnan(_4615) ? 1.0 : min(_4615, 1.0));
                        float _3304 = ((_3300 * _3300) * (_3282 + (-1.0))) + 1.0;
                        float _3305 = _3241 * _3281;
                        float _3306 = _3305 * _3305;
                        float _3309 = ((1.0 - _3306) * _3231) + _3306;
                        float _4626 = isnan(0.0) ? _3309 : (isnan(_3309) ? 0.0 : max(_3309, 0.0));
                        float _3310 = isnan(1.0) ? _4626 : (isnan(_4626) ? 1.0 : min(_4626, 1.0));
                        float _3311 = 1.0 - _3281;
                        float _3321 = (0.5 / (((_3310 * ((_3296 * _3311) + _3281)) + 9.9999999392252902907785028219223e-09) + (((_3310 * _3311) + _3281) * _3296))) * _3310;
                        float _4637 = isnan(0.0) ? _3321 : (isnan(_3321) ? 0.0 : max(_3321, 0.0));
                        float _3332 = (((_3282 * 3.1415927410125732421875) * (isnan(1.0) ? _4637 : (isnan(_4637) ? 1.0 : min(_4637, 1.0)))) / ((_3304 * _3304) * ((_3248 * 2.1991131305694580078125) + 3.141590118408203125))) * _3237;
                        _3090 = (_3252 * _3200.x) + _3158;
                        _3091 = (_3252 * _3200.y) + _3159;
                        _3092 = (_3252 * _3200.z) + _3160;
                        _3087 = (_3332 * _3217.x) + _3155;
                        _3088 = (_3332 * _3217.y) + _3156;
                        _3089 = (_3332 * _3217.z) + _3157;
                        if (_3162 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3155 = _3087;
                            _3156 = _3088;
                            _3157 = _3089;
                            _3158 = _3090;
                            _3159 = _3091;
                            _3160 = _3092;
                            _3161 = _3162;
                        }
                    }
                    frontier_phi_66_pred = _3092;
                    frontier_phi_66_pred_1 = _3091;
                    frontier_phi_66_pred_2 = _3090;
                    frontier_phi_66_pred_3 = _3089;
                    frontier_phi_66_pred_4 = _3088;
                    frontier_phi_66_pred_5 = _3087;
                }
                _2897 = frontier_phi_66_pred;
                _2895 = frontier_phi_66_pred_1;
                _2893 = frontier_phi_66_pred_2;
                _2891 = frontier_phi_66_pred_3;
                _2889 = frontier_phi_66_pred_4;
                _2887 = frontier_phi_66_pred_5;
                uint _3038 = _3037 + 1u;
                if (_3038 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3031 = _2887;
                    _3032 = _2889;
                    _3033 = _2891;
                    _3034 = _2893;
                    _3035 = _2895;
                    _3036 = _2897;
                    _3037 = _3038;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2886 = _2887;
            _2888 = _2889;
            _2890 = _2891;
            _2892 = _2893;
            _2894 = _2895;
            _2896 = _2897;
        }
        uvec4 _2900 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2901 = _2900.z;
        uint _2903 = (_2901 >> 8u) & 15u;
        float _2999;
        float _3001;
        float _3003;
        float _3005;
        float _3007;
        float _3009;
        if (((4294967295u << _2903) & _2806) == 0u)
        {
            _2999 = _2886;
            _3001 = _2888;
            _3003 = _2890;
            _3005 = _2892;
            _3007 = _2894;
            _3009 = _2896;
        }
        else
        {
            float _3024 = inversesqrt(dot(vec3(_1884, _1885, _1886), vec3(_1884, _1885, _1886)));
            float _3025 = _3024 * _1884;
            float _3026 = _3024 * _1885;
            float _3027 = _3024 * _1886;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2903 < ((_2901 >> 12u) & 15u))
            {
                float _3000;
                float _3002;
                float _3004;
                float _3006;
                float _3008;
                float _3010;
                float _3138 = _2886;
                float _3139 = _2888;
                float _3140 = _2890;
                float _3141 = _2892;
                float _3142 = _2894;
                float _3143 = _2896;
                uint _3144 = _2903;
                uint _3153;
                bool _3154;
                for (;;)
                {
                    _3153 = texelFetch(g_lightClassification, int((((_2800 << 5u) + (_2786 << 9u)) + (_3144 << 2u)) >> 2u)).x;
                    _3154 = _3153 == 0u;
                    float frontier_phi_72_pred;
                    float frontier_phi_72_pred_1;
                    float frontier_phi_72_pred_2;
                    float frontier_phi_72_pred_3;
                    float frontier_phi_72_pred_4;
                    float frontier_phi_72_pred_5;
                    if (_3154)
                    {
                        frontier_phi_72_pred = _3143;
                        frontier_phi_72_pred_1 = _3142;
                        frontier_phi_72_pred_2 = _3141;
                        frontier_phi_72_pred_3 = _3140;
                        frontier_phi_72_pred_4 = _3139;
                        frontier_phi_72_pred_5 = _3138;
                    }
                    else
                    {
                        float _3337;
                        float _3338;
                        float _3339;
                        float _3340;
                        float _3341;
                        float _3342;
                        float _3631;
                        float _3632;
                        float _3633;
                        float _3634;
                        float _3635;
                        float _3636;
                        float _3350 = _3138;
                        float _3351 = _3139;
                        float _3352 = _3140;
                        float _3353 = _3141;
                        float _3354 = _3142;
                        float _3355 = _3143;
                        uint _3356 = _3153;
                        uint _3357;
                        vec4 _3382;
                        float _3383;
                        vec4 _3398;
                        vec3 _3410;
                        vec4 _3425;
                        vec4 _3441;
                        float _3487;
                        bool _3488;
                        for (;;)
                        {
                            uint _3367 = ((_3144 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3356));
                            _3357 = (_3356 + 4294967295u) & _3356;
                            uint _3369 = _3367 * 40u;
                            _3382 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3369)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3369 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3369 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3369 + 3u)).x));
                            _3383 = _3382.w;
                            uint _3385 = (_3367 * 40u) + 4u;
                            _3398 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3385)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3385 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3385 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3385 + 3u)).x));
                            uint _3400 = (_3367 * 40u) + 8u;
                            _3410 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3400)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3400 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3400 + 2u)).x));
                            uint _3412 = (_3367 * 40u) + 16u;
                            _3425 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3412)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3412 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3412 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3412 + 3u)).x));
                            uint _3428 = (_3367 * 40u) + 20u;
                            _3441 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3428)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3428 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3428 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3428 + 3u)).x));
                            uint _3443 = (_3367 * 40u) + 24u;
                            vec4 _3456 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3443)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3443 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3443 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3443 + 3u)).x));
                            uint _3462 = (_3367 * 40u) + 28u;
                            vec4 _3475 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3462)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3462 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3462 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3462 + 3u)).x));
                            _3487 = fma(_1886, _3475.z, fma(_1885, _3475.y, _3475.x * _1884)) + _3475.w;
                            _3488 = !((fma(_1886, _3456.z, fma(_1885, _3456.y, _3456.x * _1884)) + _3456.w) <= 0.0);
                            float frontier_phi_78_pred;
                            float frontier_phi_78_pred_1;
                            float frontier_phi_78_pred_2;
                            float frontier_phi_78_pred_3;
                            float frontier_phi_78_pred_4;
                            float frontier_phi_78_pred_5;
                            if (_3488)
                            {
                                float _3515 = _3382.x - _1884;
                                float _3516 = _3382.y - _1885;
                                float _3517 = _3382.z - _1886;
                                float _3518 = dot(vec3(_3515, _3516, _3517), vec3(_3515, _3516, _3517));
                                float _3521 = inversesqrt(_3518);
                                float _3522 = _3521 * _3515;
                                float _3523 = _3521 * _3516;
                                float _3524 = _3521 * _3517;
                                float _3528 = 1.0 - (_3518 / (_3383 * _3383));
                                float _4648 = isnan(0.0) ? _3528 : (isnan(_3528) ? 0.0 : max(_3528, 0.0));
                                float _3529 = isnan(1.0) ? _4648 : (isnan(_4648) ? 1.0 : min(_4648, 1.0));
                                float _3533 = sqrt(_3518) * _3398.w;
                                float _3535 = 1.39999997615814208984375 / (_3533 + 1.39999997615814208984375);
                                float _3536 = _3535 * _3535;
                                float _3539 = ((1.0 - _3536) * dot(vec3(_3522, _3523, _3524), vec3(_771, _774, _777))) + _3536;
                                float _3542 = _3533 * _3533;
                                float _3546 = (fma(_1886, _3425.z, fma(_1885, _3425.y, _3425.x * _1884)) + _3425.w) / _3487;
                                float _3547 = (fma(_1886, _3441.z, fma(_1885, _3441.y, _3441.x * _1884)) + _3441.w) / _3487;
                                float _3551 = 1.0 - dot(vec2(_3546, _3547), vec2(_3546, _3547));
                                float _4664 = isnan(0.0) ? _3551 : (isnan(_3551) ? 0.0 : max(_3551, 0.0));
                                float _3552 = isnan(1.0) ? _4664 : (isnan(_4664) ? 1.0 : min(_4664, 1.0));
                                float _3553 = _3552 * (((isnan(0.0) ? _3539 : (isnan(_3539) ? 0.0 : max(_3539, 0.0))) * _3529) / ((_3542 * 0.699999988079071044921875) + 1.0));
                                float _3565 = exp2(log2(1.0 / ((_3542 * 3.5) + 5.0)) * 0.25);
                                float _3566 = 1.0 - _831;
                                float _3573 = sqrt(1.0 - ((1.0 - (_3566 * _3566)) * (1.0 - (_3565 * _3565))));
                                float _3574 = _3573 * _3573;
                                float _3575 = _3574 * _3574;
                                float _3576 = _3522 - _3025;
                                float _3577 = _3523 - _3026;
                                float _3578 = _3524 - _3027;
                                float _3582 = inversesqrt(dot(vec3(_3576, _3577, _3578), vec3(_3576, _3577, _3578)));
                                float _3586 = dot(vec3(_771, _774, _777), vec3((-0.0) - _3025, (-0.0) - _3026, (-0.0) - _3027));
                                float _4675 = isnan(0.0) ? _3586 : (isnan(_3586) ? 0.0 : max(_3586, 0.0));
                                float _3589 = isnan(1.0) ? _4675 : (isnan(_4675) ? 1.0 : min(_4675, 1.0));
                                float _3590 = dot(vec3(_771, _774, _777), vec3(_3582 * _3576, _3582 * _3577, _3582 * _3578));
                                float _4686 = isnan(0.0) ? _3590 : (isnan(_3590) ? 0.0 : max(_3590, 0.0));
                                float _3593 = isnan(1.0) ? _4686 : (isnan(_4686) ? 1.0 : min(_4686, 1.0));
                                float _3597 = ((_3593 * _3593) * (_3575 + (-1.0))) + 1.0;
                                float _3598 = _3535 * _3574;
                                float _3599 = _3598 * _3598;
                                float _3605 = ((1.0 - _3599) * dot(vec3(_771, _774, _777), vec3(_3522, _3523, _3524))) + _3599;
                                float _4697 = isnan(0.0) ? _3605 : (isnan(_3605) ? 0.0 : max(_3605, 0.0));
                                float _3606 = isnan(1.0) ? _4697 : (isnan(_4697) ? 1.0 : min(_4697, 1.0));
                                float _3607 = 1.0 - _3574;
                                float _3617 = (0.5 / (((_3606 * ((_3589 * _3607) + _3574)) + 9.9999999392252902907785028219223e-09) + (((_3606 * _3607) + _3574) * _3589))) * _3606;
                                float _4708 = isnan(0.0) ? _3617 : (isnan(_3617) ? 0.0 : max(_3617, 0.0));
                                float _3627 = (_3552 * _3529) * (((_3575 * 3.1415927410125732421875) * (isnan(1.0) ? _4708 : (isnan(_4708) ? 1.0 : min(_4708, 1.0)))) / ((_3597 * _3597) * ((_3542 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_78_pred = _3553 * _3398.y;
                                frontier_phi_78_pred_1 = _3553 * _3398.x;
                                frontier_phi_78_pred_2 = _3627 * _3410.z;
                                frontier_phi_78_pred_3 = _3627 * _3410.y;
                                frontier_phi_78_pred_4 = _3627 * _3410.x;
                                frontier_phi_78_pred_5 = _3553 * _3398.z;
                            }
                            else
                            {
                                frontier_phi_78_pred = 0.0;
                                frontier_phi_78_pred_1 = 0.0;
                                frontier_phi_78_pred_2 = 0.0;
                                frontier_phi_78_pred_3 = 0.0;
                                frontier_phi_78_pred_4 = 0.0;
                                frontier_phi_78_pred_5 = 0.0;
                            }
                            _3635 = frontier_phi_78_pred;
                            _3634 = frontier_phi_78_pred_1;
                            _3633 = frontier_phi_78_pred_2;
                            _3632 = frontier_phi_78_pred_3;
                            _3631 = frontier_phi_78_pred_4;
                            _3636 = frontier_phi_78_pred_5;
                            _3340 = _3634 + _3353;
                            _3341 = _3635 + _3354;
                            _3342 = _3636 + _3355;
                            _3337 = _3631 + _3350;
                            _3338 = _3632 + _3351;
                            _3339 = _3633 + _3352;
                            if (_3357 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3350 = _3337;
                                _3351 = _3338;
                                _3352 = _3339;
                                _3353 = _3340;
                                _3354 = _3341;
                                _3355 = _3342;
                                _3356 = _3357;
                                continue;
                            }
                        }
                        frontier_phi_72_pred = _3342;
                        frontier_phi_72_pred_1 = _3341;
                        frontier_phi_72_pred_2 = _3340;
                        frontier_phi_72_pred_3 = _3339;
                        frontier_phi_72_pred_4 = _3338;
                        frontier_phi_72_pred_5 = _3337;
                    }
                    _3010 = frontier_phi_72_pred;
                    _3008 = frontier_phi_72_pred_1;
                    _3006 = frontier_phi_72_pred_2;
                    _3004 = frontier_phi_72_pred_3;
                    _3002 = frontier_phi_72_pred_4;
                    _3000 = frontier_phi_72_pred_5;
                    uint _3145 = _3144 + 1u;
                    if (_3145 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3138 = _3000;
                        _3139 = _3002;
                        _3140 = _3004;
                        _3141 = _3006;
                        _3142 = _3008;
                        _3143 = _3010;
                        _3144 = _3145;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _3010;
                frontier_phi_60_61_ladder_1 = _3008;
                frontier_phi_60_61_ladder_2 = _3004;
                frontier_phi_60_61_ladder_3 = _3002;
                frontier_phi_60_61_ladder_4 = _3000;
                frontier_phi_60_61_ladder_5 = _3006;
            }
            else
            {
                frontier_phi_60_61_ladder = _2896;
                frontier_phi_60_61_ladder_1 = _2894;
                frontier_phi_60_61_ladder_2 = _2890;
                frontier_phi_60_61_ladder_3 = _2888;
                frontier_phi_60_61_ladder_4 = _2886;
                frontier_phi_60_61_ladder_5 = _2892;
            }
            _2999 = frontier_phi_60_61_ladder_4;
            _3001 = frontier_phi_60_61_ladder_3;
            _3003 = frontier_phi_60_61_ladder_2;
            _3005 = frontier_phi_60_61_ladder_5;
            _3007 = frontier_phi_60_61_ladder_1;
            _3009 = frontier_phi_60_61_ladder;
        }
        float _3014 = isnan(1.0) ? _815 : (isnan(_815) ? 1.0 : min(_815, 1.0));
        _2819 = (_3014 * _3005) + _2350;
        _2821 = (_3014 * _3007) + _2352;
        _2823 = (_3014 * _3009) + _2354;
        _2825 = ((_2999 * 0.039999999105930328369140625) * _3014) + _2673;
        _2827 = ((_3001 * 0.039999999105930328369140625) * _3014) + _2675;
        _2829 = ((_3003 * 0.039999999105930328369140625) * _3014) + _2677;
    }
    else
    {
        _2819 = _2350;
        _2821 = _2352;
        _2823 = _2354;
        _2825 = _2673;
        _2827 = _2675;
        _2829 = _2677;
    }
    float _4724 = isnan(0.0) ? _800 : (isnan(_800) ? 0.0 : max(_800, 0.0));
    float _4735 = isnan(0.0) ? _801 : (isnan(_801) ? 0.0 : max(_801, 0.0));
    float _4746 = isnan(0.0) ? _802 : (isnan(_802) ? 0.0 : max(_802, 0.0));
    uint _2849 = _236 + 6u;
    float _2857 = _752 / cbSceneParam._m0[86u].x;
    float _2858 = _753 / cbSceneParam._m0[86u].y;
    vec4 _2872 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2857, _2858, (log2((isnan(cbSceneParam._m0[77u].w) ? _686 : (isnan(_686) ? cbSceneParam._m0[77u].w : min(_686, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2874 = _2872.x;
    float _2875 = _2872.y;
    float _2876 = _2872.z;
    float _2877 = _2872.w;
    float _2949;
    float _2951;
    float _2953;
    float _2955;
    if (_686 > cbSceneParam._m0[78u].w)
    {
        float _2911 = isnan(_686) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _686 : min(cbSceneParam._m0[80u].w, _686));
        float _2912 = _2911 / _686;
        float _2923 = _2912 * _737;
        float _2924 = _738 * _2912;
        float _2925 = (-0.0) - _2924;
        float _2927 = _2912 * _739;
        float _2929 = (cbSceneParam._m0[77u].w * _2925) / _2911;
        float _2930 = _2929 + cbSceneParam._m0[79u].w;
        float _2931 = cbSceneParam._m0[79u].w - _2924;
        float _2937 = sqrt(((_2923 * _2923) + (_2924 * _2924)) + (_2927 * _2927));
        float _2940 = (1.0 - (cbSceneParam._m0[77u].w / _2911)) * _2937;
        float _2945 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2947 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3100;
        if (abs((_2925 - _2929) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3100 = ((((_2930 > 0.0) ? exp2(_2945 * _2930) : (2.0 - exp2(_2947 * _2930))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2940;
        }
        else
        {
            float _3060 = 1.0 / cbSceneParam._m0[80u].x;
            float _3061 = isnan(_2931) ? _2930 : (isnan(_2930) ? _2931 : max(_2930, _2931));
            float _3062 = isnan(_2931) ? _2930 : (isnan(_2930) ? _2931 : min(_2930, _2931));
            float _3071 = isnan(0.0) ? _3061 : (isnan(_3061) ? 0.0 : min(_3061, 0.0));
            float _3072 = isnan(0.0) ? _3062 : (isnan(_3062) ? 0.0 : min(_3062, 0.0));
            _3100 = ((abs(_2937 / _2925) * cbSceneParam._m0[80u].y) * ((((_3071 - _3072) * 2.0) - ((exp2(_2945 * (isnan(0.0) ? _3061 : (isnan(_3061) ? 0.0 : max(_3061, 0.0)))) - exp2(_2945 * (isnan(0.0) ? _3062 : (isnan(_3062) ? 0.0 : max(_3062, 0.0))))) * _3060)) - ((exp2(_2947 * _3071) - exp2(_2947 * _3072)) * _3060))) + (_2940 * cbSceneParam._m0[80u].z);
        }
        vec4 _3102 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2857, _2858, 1.0), 0.0);
        float _3111 = exp2((_3100 * (-1.44269502162933349609375)) * (1.0 - _3102.w));
        float _3112 = log2(_3111);
        float _3128 = log2(_2877);
        _2949 = (exp2(_3128 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3112 * cbSceneParam._m0[78u].x)) * _3102.x) / cbSceneParam._m0[78u].x)) + _2874;
        _2951 = (exp2(_3128 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3112 * cbSceneParam._m0[78u].y)) * _3102.y) / cbSceneParam._m0[78u].y)) + _2875;
        _2953 = (exp2(_3128 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3112 * cbSceneParam._m0[78u].z)) * _3102.z) / cbSceneParam._m0[78u].z)) + _2876;
        _2955 = _3111 * _2877;
    }
    else
    {
        _2949 = _2874;
        _2951 = _2875;
        _2953 = _2876;
        _2955 = _2877;
    }
    float _2967 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2968 = _2967 == 3.0;
    float _2969 = log2(_2955);
    float _2976 = exp2(_2969 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4724 : (isnan(_4724) ? 1.0 : min(_4724, 1.0))) * (_2819 + ((isnan(0.0) ? _1541 : (isnan(_1541) ? 0.0 : max(_1541, 0.0))) * _815))) + ((_2825 + ((isnan(0.0) ? _1831 : (isnan(_1831) ? 0.0 : max(_1831, 0.0))) * _1620)) * cbPerFrame._m0[3u].x));
    float _2977 = exp2(_2969 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4735 : (isnan(_4735) ? 1.0 : min(_4735, 1.0))) * (_2821 + ((isnan(0.0) ? _1544 : (isnan(_1544) ? 0.0 : max(_1544, 0.0))) * _815))) + ((_2827 + ((isnan(0.0) ? _1834 : (isnan(_1834) ? 0.0 : max(_1834, 0.0))) * _1620)) * cbPerFrame._m0[3u].x));
    float _2978 = exp2(_2969 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4746 : (isnan(_4746) ? 1.0 : min(_4746, 1.0))) * (_2823 + ((isnan(0.0) ? _1547 : (isnan(_1547) ? 0.0 : max(_1547, 0.0))) * _815))) + ((_2829 + ((isnan(0.0) ? _1837 : (isnan(_1837) ? 0.0 : max(_1837, 0.0))) * _1620)) * cbPerFrame._m0[3u].x));
    float _2987 = (_2967 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2987 * (_2968 ? _2976 : (_2976 + (cbSceneParam._m0[72u].w * _2949)));
    SV_Target.y = _2987 * (_2968 ? _2977 : (_2977 + (cbSceneParam._m0[72u].w * _2951)));
    SV_Target.z = _2987 * (_2968 ? _2978 : (_2978 + (cbSceneParam._m0[72u].w * _2953)));
    SV_Target.w = cbInstanceData._m0[_2849].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2849].w;
}


