#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_10;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_6;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1121;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _204 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _205 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _206 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _212 = inversesqrt(dot(vec3(_204, _205, _206), vec3(_204, _205, _206)));
    float _219 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _226 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _232 = uint(roundEven(NORMAL.w)) * 13u;
    uint _238 = _232 + 1u;
    uint _242 = _232 + 2u;
    float _251 = sqrt(((cbInstanceData._m0[_238].x * cbInstanceData._m0[_238].x) + (cbInstanceData._m0[_232].x * cbInstanceData._m0[_232].x)) + (cbInstanceData._m0[_242].x * cbInstanceData._m0[_242].x));
    float _252 = _251 * TEXCOORD.z;
    float _253 = _251 * TEXCOORD.w;
    vec4 _273 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _279 = _273.x * cbMtdParam._m0[11u].x;
    float _280 = _273.y * cbMtdParam._m0[11u].y;
    float _281 = _273.z * cbMtdParam._m0[11u].z;
    vec4 _300 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _252) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _253) + cbTextureTilingScale._m0[5u].w));
    vec4 _320 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _357 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _359 = _357.x;
    float _371 = dot(vec4(_359, _357.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _388 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _320.x) * 2.0) - ((((_359 - _371) * cbMtdParam._m0[24u].z) + _371) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3452 = isnan(0.0) ? _388 : (isnan(_388) ? 0.0 : max(_388, 0.0));
    float _389 = isnan(1.0) ? _3452 : (isnan(_3452) ? 1.0 : min(_3452, 1.0));
    float _396 = (_389 * ((_300.x * cbMtdParam._m0[12u].x) - _279)) + _279;
    float _397 = (_389 * ((_300.y * cbMtdParam._m0[12u].y) - _280)) + _280;
    float _398 = (_389 * ((_300.z * cbMtdParam._m0[12u].z) - _281)) + _281;
    vec4 _415 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _252) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _253) + cbTextureTilingScale._m0[3u].w));
    vec4 _435 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _437 = _435.x;
    float _447 = dot(vec4(_437, _435.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _461 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _320.y) * 2.0) - ((((_437 - _447) * cbMtdParam._m0[24u].z) + _447) * cbMtdParam._m0[20u].w))) + 1.0;
    float _3463 = isnan(0.0) ? _461 : (isnan(_461) ? 0.0 : max(_461, 0.0));
    float _462 = isnan(1.0) ? _3463 : (isnan(_3463) ? 1.0 : min(_3463, 1.0));
    float _469 = (_462 * ((_415.x * cbMtdParam._m0[13u].x) - _396)) + _396;
    float _470 = (_462 * ((_415.y * cbMtdParam._m0[13u].y) - _397)) + _397;
    float _471 = (_462 * ((_415.z * cbMtdParam._m0[13u].z) - _398)) + _398;
    vec4 _484 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _252) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _253) + cbTextureTilingScale._m0[4u].w));
    vec4 _501 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _503 = _501.x;
    float _504 = _501.y;
    float _505 = _501.z;
    float _512 = ((_484.x - _503) * _389) + _503;
    float _513 = ((_484.y - _504) * _389) + _504;
    float _514 = ((_484.z - _505) * _389) + _505;
    vec4 _526 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _252) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _253) + cbTextureTilingScale._m0[2u].w));
    float _539 = ((_526.z - _514) * _462) + _514;
    float _542 = ((((_526.x - _512) * _462) + _512) * 2.0) + (-1.0);
    float _544 = ((((_526.y - _513) * _462) + _513) * 2.0) + (-1.0);
    float _545 = dot(vec2(_542, _544), vec2(_542, _544));
    float _3474 = isnan(0.0) ? _545 : (isnan(_545) ? 0.0 : max(_545, 0.0));
    float _550 = sqrt(1.0 - (isnan(1.0) ? _3474 : (isnan(_3474) ? 1.0 : min(_3474, 1.0))));
    vec4 _564 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _576 = (((_564.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _542;
    float _577 = (((_564.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _544;
    float _581 = (cbMtdParam._m0[19u].w * (_564.z - _539)) + _539;
    float _585 = cbMtdParam._m0[22u].x + _564.w;
    float _588 = fma(_550, _219 * NORMAL.x, fma(_577, _226 * TANGENT.x, (_212 * _204) * _576));
    float _591 = fma(_550, _219 * NORMAL.y, fma(_577, _226 * TANGENT.y, (_212 * _205) * _576));
    float _594 = fma(_550, _219 * NORMAL.z, fma(_577, _226 * TANGENT.z, (_212 * _206) * _576));
    float _598 = inversesqrt(dot(vec3(_588, _591, _594), vec3(_588, _591, _594)));
    float _599 = _598 * _588;
    float _600 = _598 * _591;
    float _601 = _598 * _594;
    float _3485 = isnan(0.0) ? _581 : (isnan(_581) ? 0.0 : max(_581, 0.0));
    float _602 = isnan(1.0) ? _3485 : (isnan(_3485) ? 1.0 : min(_3485, 1.0));
    float _3496 = isnan(0.0) ? _585 : (isnan(_585) ? 0.0 : max(_585, 0.0));
    float _3507 = isnan(0.0) ? _469 : (isnan(_469) ? 0.0 : max(_469, 0.0));
    float _3518 = isnan(0.0) ? _470 : (isnan(_470) ? 0.0 : max(_470, 0.0));
    float _3529 = isnan(0.0) ? _471 : (isnan(_471) ? 0.0 : max(_471, 0.0));
    float _620 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _662 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _672 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _662);
    float _673 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _662);
    float _674 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _662);
    float _678 = inversesqrt(dot(vec3(_672, _673, _674), vec3(_672, _673, _674)));
    float _679 = _672 * _678;
    float _680 = _673 * _678;
    float _681 = _674 * _678;
    float _687 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _688 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _706 = fma(_601, cbSceneParam._m0[5u].z, fma(_600, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _599));
    float _709 = fma(_601, cbSceneParam._m0[6u].z, fma(_600, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _599));
    float _712 = fma(_601, cbSceneParam._m0[7u].z, fma(_600, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _599));
    uint _726 = (_232 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _732 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3507 : (isnan(_3507) ? 1.0 : min(_3507, 1.0)))) * cbInstanceData._m0[_726].x;
    float _733 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3518 : (isnan(_3518) ? 1.0 : min(_3518, 1.0)))) * cbInstanceData._m0[_726].y;
    float _734 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3529 : (isnan(_3529) ? 1.0 : min(_3529, 1.0)))) * cbInstanceData._m0[_726].z;
    float _3540 = isnan(0.0) ? _732 : (isnan(_732) ? 0.0 : max(_732, 0.0));
    float _735 = isnan(1.0) ? _3540 : (isnan(_3540) ? 1.0 : min(_3540, 1.0));
    float _3551 = isnan(0.0) ? _733 : (isnan(_733) ? 0.0 : max(_733, 0.0));
    float _736 = isnan(1.0) ? _3551 : (isnan(_3551) ? 1.0 : min(_3551, 1.0));
    float _3562 = isnan(0.0) ? _734 : (isnan(_734) ? 0.0 : max(_734, 0.0));
    float _737 = isnan(1.0) ? _3562 : (isnan(_3562) ? 1.0 : min(_3562, 1.0));
    vec4 _746 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _687, cbSceneParam._m0[86u].y * _688));
    float _750 = ((isnan(1.0) ? _3496 : (isnan(_3496) ? 1.0 : min(_3496, 1.0))) * TEXCOORD_5.w) * _746.x;
    float _751 = dot(vec3(_599, _600, _601), vec3(_679, _680, _681));
    float _754 = _751 * 2.0;
    float _758 = (_754 * _599) - _679;
    float _759 = (_754 * _600) - _680;
    float _760 = (_754 * _601) - _681;
    float _764 = abs(dot(vec3(_679, _680, _681), vec3(_599, _600, _601)));
    float _3573 = isnan(0.0) ? _764 : (isnan(_764) ? 0.0 : max(_764, 0.0));
    float _766 = sqrt(_602);
    float _779 = exp2((_766 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3573 : (isnan(_3573) ? 1.0 : min(_3573, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_766 * 3.0));
    float _811 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _815 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _819 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1120;
    float _1122;
    float _1123;
    float _1124;
    float _1125;
    float _1126;
    float _1127;
    float _1128;
    float _1129;
    float _1130;
    float _1131;
    float _1132;
    float _1133;
    float _1134;
    float _1135;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _845 = fma(_819, cbModelParam._m0[26u].z, fma(_815, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _811));
        float _849 = fma(_819, cbModelParam._m0[27u].z, fma(_815, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _811));
        float _853 = fma(_819, cbModelParam._m0[28u].z, fma(_815, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _811));
        float _878 = _811 + _599;
        float _879 = _815 + _600;
        float _880 = _819 + _601;
        float _890 = fma(_880, cbModelParam._m0[26u].z, fma(_879, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _878)) - _845;
        float _891 = fma(_880, cbModelParam._m0[27u].z, fma(_879, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _878)) - _849;
        float _892 = fma(_880, cbModelParam._m0[28u].z, fma(_879, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _878)) - _853;
        float _896 = inversesqrt(dot(vec3(_890, _891, _892), vec3(_890, _891, _892)));
        float _909 = ((_896 * _890) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_845 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _910 = ((_896 * _891) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_849 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _911 = ((_896 * _892) / cbModelParam._m0[34u].z) + ((((((_853 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _914 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_909, _910, _911), 0.0);
        vec4 _921 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_909, _910, _911), 0.0);
        vec4 _928 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_909, _910, _911), 0.0);
        vec4 _935 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_909, _910, _911), 0.0);
        float _948 = exp2((_914.w + (-0.5)) * 20.0) * 2.0;
        float _949 = _948 * (_914.x + (-0.5));
        float _950 = _948 * (_914.y + (-0.5));
        float _951 = _948 * (_914.z + (-0.5));
        float _958 = exp2((_921.w + (-0.5)) * 20.0) * 2.0;
        float _959 = _958 * (_921.x + (-0.5));
        float _960 = _958 * (_921.y + (-0.5));
        float _961 = _958 * (_921.z + (-0.5));
        float _968 = exp2((_928.w + (-0.5)) * 20.0) * 2.0;
        float _969 = _968 * (_928.x + (-0.5));
        float _970 = _968 * (_928.y + (-0.5));
        float _971 = _968 * (_928.z + (-0.5));
        float _978 = exp2((_935.w + (-0.5)) * 20.0) * 2.0;
        float _979 = _978 * (_935.x + (-0.5));
        float _980 = _978 * (_935.y + (-0.5));
        float _981 = _978 * (_935.z + (-0.5));
        float _982 = isnan(0.0) ? _979 : (isnan(_979) ? 0.0 : max(_979, 0.0));
        float _983 = isnan(0.0) ? _980 : (isnan(_980) ? 0.0 : max(_980, 0.0));
        float _984 = isnan(0.0) ? _981 : (isnan(_981) ? 0.0 : max(_981, 0.0));
        float _985 = _949 * 0.5;
        float _986 = _959 * 0.5;
        float _987 = _969 * 0.5;
        float _988 = dot(vec3(_985, _986, _987), vec3(_985, _986, _987));
        float _993 = (_988 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_988);
        float _1002 = (dot(vec3(_599, _600, _601), vec3(_993 * _985, _993 * _986, _993 * _987)) + 1.0) * 0.5;
        float _3599 = isnan(0.0) ? _1002 : (isnan(_1002) ? 0.0 : max(_1002, 0.0));
        float _1012 = sqrt(((_986 * _986) + (_985 * _985)) + (_987 * _987)) / (_982 + 9.9999997473787516355514526367188e-06);
        float _3610 = isnan(0.0) ? _1012 : (isnan(_1012) ? 0.0 : max(_1012, 0.0));
        float _1013 = isnan(1.0) ? _3610 : (isnan(_3610) ? 1.0 : min(_3610, 1.0));
        float _1014 = _1013 * 2.0;
        float _1018 = (1.0 - _1013) / (_1013 + 1.0);
        float _3621 = isnan(0.0) ? _1018 : (isnan(_1018) ? 0.0 : max(_1018, 0.0));
        float _1019 = isnan(1.0) ? _3621 : (isnan(_3621) ? 1.0 : min(_3621, 1.0));
        float _1028 = ((((1.0 - _1019) * (_1014 + 2.0)) * exp2(log2(isnan(1.0) ? _3599 : (isnan(_3599) ? 1.0 : min(_3599, 1.0))) * (_1014 + 1.0))) + _1019) * _982;
        float _1029 = _950 * 0.5;
        float _1030 = _960 * 0.5;
        float _1031 = _970 * 0.5;
        float _1032 = dot(vec3(_1029, _1030, _1031), vec3(_1029, _1030, _1031));
        float _1037 = (_1032 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1032);
        float _1045 = (dot(vec3(_599, _600, _601), vec3(_1037 * _1029, _1037 * _1030, _1037 * _1031)) + 1.0) * 0.5;
        float _3632 = isnan(0.0) ? _1045 : (isnan(_1045) ? 0.0 : max(_1045, 0.0));
        float _1054 = sqrt(((_1030 * _1030) + (_1029 * _1029)) + (_1031 * _1031)) / (_983 + 9.9999997473787516355514526367188e-06);
        float _3643 = isnan(0.0) ? _1054 : (isnan(_1054) ? 0.0 : max(_1054, 0.0));
        float _1055 = isnan(1.0) ? _3643 : (isnan(_3643) ? 1.0 : min(_3643, 1.0));
        float _1056 = _1055 * 2.0;
        float _1060 = (1.0 - _1055) / (_1055 + 1.0);
        float _3654 = isnan(0.0) ? _1060 : (isnan(_1060) ? 0.0 : max(_1060, 0.0));
        float _1061 = isnan(1.0) ? _3654 : (isnan(_3654) ? 1.0 : min(_3654, 1.0));
        float _1070 = ((((1.0 - _1061) * (_1056 + 2.0)) * exp2(log2(isnan(1.0) ? _3632 : (isnan(_3632) ? 1.0 : min(_3632, 1.0))) * (_1056 + 1.0))) + _1061) * _983;
        float _1071 = _951 * 0.5;
        float _1072 = _961 * 0.5;
        float _1073 = _971 * 0.5;
        float _1074 = dot(vec3(_1071, _1072, _1073), vec3(_1071, _1072, _1073));
        float _1079 = (_1074 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1074);
        float _1087 = (dot(vec3(_599, _600, _601), vec3(_1079 * _1071, _1079 * _1072, _1079 * _1073)) + 1.0) * 0.5;
        float _3665 = isnan(0.0) ? _1087 : (isnan(_1087) ? 0.0 : max(_1087, 0.0));
        float _1096 = sqrt(((_1072 * _1072) + (_1071 * _1071)) + (_1073 * _1073)) / (_984 + 9.9999997473787516355514526367188e-06);
        float _3676 = isnan(0.0) ? _1096 : (isnan(_1096) ? 0.0 : max(_1096, 0.0));
        float _1097 = isnan(1.0) ? _3676 : (isnan(_3676) ? 1.0 : min(_3676, 1.0));
        float _1098 = _1097 * 2.0;
        float _1102 = (1.0 - _1097) / (_1097 + 1.0);
        float _3687 = isnan(0.0) ? _1102 : (isnan(_1102) ? 0.0 : max(_1102, 0.0));
        float _1103 = isnan(1.0) ? _3687 : (isnan(_3687) ? 1.0 : min(_3687, 1.0));
        float _1112 = ((((1.0 - _1103) * (_1098 + 2.0)) * exp2(log2(isnan(1.0) ? _3665 : (isnan(_3665) ? 1.0 : min(_3665, 1.0))) * (_1098 + 1.0))) + _1103) * _984;
        _1120 = _951;
        _1122 = _950;
        _1123 = _949;
        _1124 = _961;
        _1125 = _960;
        _1126 = _959;
        _1127 = _971;
        _1128 = _970;
        _1129 = _969;
        _1130 = _984;
        _1131 = _983;
        _1132 = _982;
        _1133 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1028 : (isnan(_1028) ? 0.0 : max(_1028, 0.0)));
        _1134 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1070 : (isnan(_1070) ? 0.0 : max(_1070, 0.0)));
        _1135 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1112 : (isnan(_1112) ? 0.0 : max(_1112, 0.0)));
    }
    else
    {
        _1120 = _1121;
        _1122 = _1121;
        _1123 = _1121;
        _1124 = _1121;
        _1125 = _1121;
        _1126 = _1121;
        _1127 = _1121;
        _1128 = _1121;
        _1129 = _1121;
        _1130 = _1121;
        _1131 = _1121;
        _1132 = _1121;
        _1133 = 0.0;
        _1134 = 0.0;
        _1135 = 0.0;
    }
    float _1428;
    float _1429;
    float _1430;
    float _1431;
    float _1432;
    float _1433;
    float _1434;
    float _1435;
    float _1436;
    float _1437;
    float _1438;
    float _1439;
    float _1440;
    float _1441;
    float _1442;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1159 = fma(_819, cbModelParam._m0[30u].z, fma(_815, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _811));
        float _1163 = fma(_819, cbModelParam._m0[31u].z, fma(_815, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _811));
        float _1167 = fma(_819, cbModelParam._m0[32u].z, fma(_815, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _811));
        float _1190 = _811 + _599;
        float _1191 = _815 + _600;
        float _1192 = _819 + _601;
        float _1202 = fma(_1192, cbModelParam._m0[30u].z, fma(_1191, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1190)) - _1159;
        float _1203 = fma(_1192, cbModelParam._m0[31u].z, fma(_1191, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1190)) - _1163;
        float _1204 = fma(_1192, cbModelParam._m0[32u].z, fma(_1191, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1190)) - _1167;
        float _1208 = inversesqrt(dot(vec3(_1202, _1203, _1204), vec3(_1202, _1203, _1204)));
        float _1221 = ((_1208 * _1202) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1159 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1222 = ((_1208 * _1203) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1163 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1223 = ((_1208 * _1204) / cbModelParam._m0[35u].z) + ((((((_1167 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1225 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1221, _1222, _1223), 0.0);
        vec4 _1232 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1221, _1222, _1223), 0.0);
        vec4 _1239 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1221, _1222, _1223), 0.0);
        vec4 _1246 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1221, _1222, _1223), 0.0);
        float _1258 = exp2((_1225.w + (-0.5)) * 20.0) * 2.0;
        float _1259 = _1258 * (_1225.x + (-0.5));
        float _1260 = _1258 * (_1225.y + (-0.5));
        float _1261 = _1258 * (_1225.z + (-0.5));
        float _1268 = exp2((_1232.w + (-0.5)) * 20.0) * 2.0;
        float _1269 = _1268 * (_1232.x + (-0.5));
        float _1270 = _1268 * (_1232.y + (-0.5));
        float _1271 = _1268 * (_1232.z + (-0.5));
        float _1278 = exp2((_1239.w + (-0.5)) * 20.0) * 2.0;
        float _1279 = _1278 * (_1239.x + (-0.5));
        float _1280 = _1278 * (_1239.y + (-0.5));
        float _1281 = _1278 * (_1239.z + (-0.5));
        float _1288 = exp2((_1246.w + (-0.5)) * 20.0) * 2.0;
        float _1289 = _1288 * (_1246.x + (-0.5));
        float _1290 = _1288 * (_1246.y + (-0.5));
        float _1291 = _1288 * (_1246.z + (-0.5));
        float _1292 = isnan(0.0) ? _1289 : (isnan(_1289) ? 0.0 : max(_1289, 0.0));
        float _1293 = isnan(0.0) ? _1290 : (isnan(_1290) ? 0.0 : max(_1290, 0.0));
        float _1294 = isnan(0.0) ? _1291 : (isnan(_1291) ? 0.0 : max(_1291, 0.0));
        float _1295 = _1259 * 0.5;
        float _1296 = _1269 * 0.5;
        float _1297 = _1279 * 0.5;
        float _1298 = dot(vec3(_1295, _1296, _1297), vec3(_1295, _1296, _1297));
        float _1303 = (_1298 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1298);
        float _1311 = (dot(vec3(_599, _600, _601), vec3(_1303 * _1295, _1303 * _1296, _1303 * _1297)) + 1.0) * 0.5;
        float _3728 = isnan(0.0) ? _1311 : (isnan(_1311) ? 0.0 : max(_1311, 0.0));
        float _1320 = sqrt(((_1296 * _1296) + (_1295 * _1295)) + (_1297 * _1297)) / (_1292 + 9.9999997473787516355514526367188e-06);
        float _3739 = isnan(0.0) ? _1320 : (isnan(_1320) ? 0.0 : max(_1320, 0.0));
        float _1321 = isnan(1.0) ? _3739 : (isnan(_3739) ? 1.0 : min(_3739, 1.0));
        float _1322 = _1321 * 2.0;
        float _1326 = (1.0 - _1321) / (_1321 + 1.0);
        float _3750 = isnan(0.0) ? _1326 : (isnan(_1326) ? 0.0 : max(_1326, 0.0));
        float _1327 = isnan(1.0) ? _3750 : (isnan(_3750) ? 1.0 : min(_3750, 1.0));
        float _1336 = ((((1.0 - _1327) * (_1322 + 2.0)) * exp2(log2(isnan(1.0) ? _3728 : (isnan(_3728) ? 1.0 : min(_3728, 1.0))) * (_1322 + 1.0))) + _1327) * _1292;
        float _1337 = _1260 * 0.5;
        float _1338 = _1270 * 0.5;
        float _1339 = _1280 * 0.5;
        float _1340 = dot(vec3(_1337, _1338, _1339), vec3(_1337, _1338, _1339));
        float _1345 = (_1340 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1340);
        float _1353 = (dot(vec3(_599, _600, _601), vec3(_1345 * _1337, _1345 * _1338, _1345 * _1339)) + 1.0) * 0.5;
        float _3761 = isnan(0.0) ? _1353 : (isnan(_1353) ? 0.0 : max(_1353, 0.0));
        float _1362 = sqrt(((_1338 * _1338) + (_1337 * _1337)) + (_1339 * _1339)) / (_1293 + 9.9999997473787516355514526367188e-06);
        float _3772 = isnan(0.0) ? _1362 : (isnan(_1362) ? 0.0 : max(_1362, 0.0));
        float _1363 = isnan(1.0) ? _3772 : (isnan(_3772) ? 1.0 : min(_3772, 1.0));
        float _1364 = _1363 * 2.0;
        float _1368 = (1.0 - _1363) / (_1363 + 1.0);
        float _3783 = isnan(0.0) ? _1368 : (isnan(_1368) ? 0.0 : max(_1368, 0.0));
        float _1369 = isnan(1.0) ? _3783 : (isnan(_3783) ? 1.0 : min(_3783, 1.0));
        float _1378 = ((((1.0 - _1369) * (_1364 + 2.0)) * exp2(log2(isnan(1.0) ? _3761 : (isnan(_3761) ? 1.0 : min(_3761, 1.0))) * (_1364 + 1.0))) + _1369) * _1293;
        float _1379 = _1261 * 0.5;
        float _1380 = _1271 * 0.5;
        float _1381 = _1281 * 0.5;
        float _1382 = dot(vec3(_1379, _1380, _1381), vec3(_1379, _1380, _1381));
        float _1387 = (_1382 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1382);
        float _1395 = (dot(vec3(_599, _600, _601), vec3(_1387 * _1379, _1387 * _1380, _1387 * _1381)) + 1.0) * 0.5;
        float _3794 = isnan(0.0) ? _1395 : (isnan(_1395) ? 0.0 : max(_1395, 0.0));
        float _1404 = sqrt(((_1380 * _1380) + (_1379 * _1379)) + (_1381 * _1381)) / (_1294 + 9.9999997473787516355514526367188e-06);
        float _3805 = isnan(0.0) ? _1404 : (isnan(_1404) ? 0.0 : max(_1404, 0.0));
        float _1405 = isnan(1.0) ? _3805 : (isnan(_3805) ? 1.0 : min(_3805, 1.0));
        float _1406 = _1405 * 2.0;
        float _1410 = (1.0 - _1405) / (_1405 + 1.0);
        float _3816 = isnan(0.0) ? _1410 : (isnan(_1410) ? 0.0 : max(_1410, 0.0));
        float _1411 = isnan(1.0) ? _3816 : (isnan(_3816) ? 1.0 : min(_3816, 1.0));
        float _1420 = ((((1.0 - _1411) * (_1406 + 2.0)) * exp2(log2(isnan(1.0) ? _3794 : (isnan(_3794) ? 1.0 : min(_3794, 1.0))) * (_1406 + 1.0))) + _1411) * _1294;
        _1428 = _1261;
        _1429 = _1260;
        _1430 = _1259;
        _1431 = _1271;
        _1432 = _1270;
        _1433 = _1269;
        _1434 = _1281;
        _1435 = _1280;
        _1436 = _1279;
        _1437 = _1294;
        _1438 = _1293;
        _1439 = _1292;
        _1440 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1336 : (isnan(_1336) ? 0.0 : max(_1336, 0.0)));
        _1441 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1378 : (isnan(_1378) ? 0.0 : max(_1378, 0.0)));
        _1442 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1420 : (isnan(_1420) ? 0.0 : max(_1420, 0.0)));
    }
    else
    {
        _1428 = _1121;
        _1429 = _1121;
        _1430 = _1121;
        _1431 = _1121;
        _1432 = _1121;
        _1433 = _1121;
        _1434 = _1121;
        _1435 = _1121;
        _1436 = _1121;
        _1437 = _1121;
        _1438 = _1121;
        _1439 = _1121;
        _1440 = 0.0;
        _1441 = 0.0;
        _1442 = 0.0;
    }
    float _1452 = (cbModelParam._m0[1u].x * (_1440 - _1133)) + _1133;
    float _1453 = (cbModelParam._m0[1u].x * (_1441 - _1134)) + _1134;
    float _1454 = (cbModelParam._m0[1u].x * (_1442 - _1135)) + _1135;
    float _1475 = fma(_1454, cbSceneParam._m0[89u].z, fma(_1453, cbSceneParam._m0[89u].y, _1452 * cbSceneParam._m0[89u].x));
    float _1478 = fma(_1454, cbSceneParam._m0[90u].z, fma(_1453, cbSceneParam._m0[90u].y, _1452 * cbSceneParam._m0[90u].x));
    float _1481 = fma(_1454, cbSceneParam._m0[91u].z, fma(_1453, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1452));
    float _1496 = _758 * 0.5;
    float _1497 = _759 * 0.5;
    float _1498 = _760 * 0.5;
    float _1499 = dot(vec4(_1496, _1497, _1498, 1.0), vec4(_1430, _1433, _1436, _1439));
    float _1502 = dot(vec4(_1496, _1497, _1498, 1.0), vec4(_1429, _1432, _1435, _1438));
    float _1505 = dot(vec4(_1496, _1497, _1498, 1.0), vec4(_1428, _1431, _1434, _1437));
    float _1539;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1512 = dot(vec4(_1496, _1497, _1498, 1.0), vec4(_1120, _1124, _1127, _1130));
        float _1516 = dot(vec4(_1496, _1497, _1498, 1.0), vec4(_1122, _1125, _1128, _1131));
        float _1520 = dot(vec4(_1496, _1497, _1498, 1.0), vec4(_1123, _1126, _1129, _1132));
        float _1527 = dot(vec4(cbModelParam._m0[39u]), vec4(_1496, _1497, _1498, 1.0));
        _1539 = dot(vec3(isnan(0.0) ? _1520 : (isnan(_1520) ? 0.0 : max(_1520, 0.0)), isnan(0.0) ? _1516 : (isnan(_1516) ? 0.0 : max(_1516, 0.0)), isnan(0.0) ? _1512 : (isnan(_1512) ? 0.0 : max(_1512, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1527) ? 0.0 : (isnan(0.0) ? _1527 : max(0.0, _1527))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1539 = 1.0;
    }
    float _1550;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1541 = dot(vec4(cbModelParam._m0[40u]), vec4(_1496, _1497, _1498, 1.0));
        _1550 = dot(vec3(isnan(0.0) ? _1499 : (isnan(_1499) ? 0.0 : max(_1499, 0.0)), isnan(0.0) ? _1502 : (isnan(_1502) ? 0.0 : max(_1502, 0.0)), isnan(0.0) ? _1505 : (isnan(_1505) ? 0.0 : max(_1505, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1541) ? 0.0 : (isnan(0.0) ? _1541 : max(0.0, _1541))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1550 = 1.0;
    }
    float _1554 = (_1550 * cbModelParam._m0[1u].x) + (_1539 * (1.0 - cbModelParam._m0[1u].x));
    float _1564 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _602);
    float _1565 = isnan(_1564) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1564 : min(cbModelParam._m0[25u].z, _1564));
    float _1647;
    float _1649;
    float _1651;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1614 = fma(_819, cbModelParam._m0[13u].z, fma(_815, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _811)) + cbModelParam._m0[13u].w;
        float _1618 = fma(_819, cbModelParam._m0[14u].z, fma(_815, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _811)) + cbModelParam._m0[14u].w;
        float _1622 = fma(_819, cbModelParam._m0[15u].z, fma(_815, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _811)) + cbModelParam._m0[15u].w;
        float _1625 = fma(_760, cbModelParam._m0[13u].z, fma(_759, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _758));
        float _1628 = fma(_760, cbModelParam._m0[14u].z, fma(_759, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _758));
        float _1631 = fma(_760, cbModelParam._m0[15u].z, fma(_759, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _758));
        float _1659;
        if (_1625 > 0.0)
        {
            _1659 = abs((1.0 - _1614) / _1625);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1625 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1614 + 1.0) / _1625);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1659 = frontier_phi_14_12_ladder;
        }
        float _1882;
        if (_1628 > 0.0)
        {
            _1882 = abs((1.0 - _1618) / _1628);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1628 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1618 + 1.0) / _1628);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1882 = frontier_phi_23_19_ladder;
        }
        float _2128;
        if (_1631 > 0.0)
        {
            _2128 = abs((1.0 - _1622) / _1631);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1631 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1622 + 1.0) / _1631);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2128 = frontier_phi_35_30_ladder;
        }
        float _2130 = isnan(_1882) ? _1659 : (isnan(_1659) ? _1882 : min(_1659, _1882));
        float _2131 = isnan(_2128) ? _2130 : (isnan(_2130) ? _2128 : min(_2130, _2128));
        float _2135 = (_2131 * _1625) + _1614;
        float _2136 = (_2131 * _1628) + _1618;
        float _2137 = (_2131 * _1631) + _1622;
        float _2138 = _2131 * 9.9999997473787516355514526367188e-05;
        float _2140 = (-1.0) - _2138;
        float _2142 = _2138 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2137 > _2142) || ((_2137 < _2140) || ((_2136 > _2142) || ((_2136 < _2140) || ((_2135 < _2140) || (_2135 > _2142))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2261 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2137, cbModelParam._m0[9u].z, fma(_2136, cbModelParam._m0[9u].y, _2135 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2137, cbModelParam._m0[10u].z, fma(_2136, cbModelParam._m0[10u].y, _2135 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2137, cbModelParam._m0[11u].z, fma(_2136, cbModelParam._m0[11u].y, _2135 * cbModelParam._m0[11u].x))), _1565);
            frontier_phi_13_35_ladder = _2261.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2261.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2261.x * cbModelParam._m0[1u].y;
        }
        _1647 = frontier_phi_13_35_ladder_2;
        _1649 = frontier_phi_13_35_ladder_1;
        _1651 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1635 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_758, _759, _760), _1565);
        _1647 = _1635.x * cbModelParam._m0[1u].y;
        _1649 = _1635.y * cbModelParam._m0[1u].y;
        _1651 = _1635.z * cbModelParam._m0[1u].y;
    }
    float _1655 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _602);
    float _1656 = isnan(_1655) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1655 : min(cbModelParam._m0[25u].w, _1655));
    float _1747;
    float _1749;
    float _1751;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1711 = fma(_819, cbModelParam._m0[21u].z, fma(_815, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _811)) + cbModelParam._m0[21u].w;
        float _1715 = fma(_819, cbModelParam._m0[22u].z, fma(_815, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _811)) + cbModelParam._m0[22u].w;
        float _1719 = fma(_819, cbModelParam._m0[23u].z, fma(_815, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _811)) + cbModelParam._m0[23u].w;
        float _1722 = fma(_760, cbModelParam._m0[21u].z, fma(_759, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _758));
        float _1725 = fma(_760, cbModelParam._m0[22u].z, fma(_759, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _758));
        float _1728 = fma(_760, cbModelParam._m0[23u].z, fma(_759, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _758));
        float _1887;
        if (_1722 > 0.0)
        {
            _1887 = abs((1.0 - _1711) / _1722);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1722 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1711 + 1.0) / _1722);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1887 = frontier_phi_25_21_ladder;
        }
        float _2155;
        if (_1725 > 0.0)
        {
            _2155 = abs((1.0 - _1715) / _1725);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1725 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1715 + 1.0) / _1725);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2155 = frontier_phi_37_32_ladder;
        }
        float _2360;
        if (_1728 > 0.0)
        {
            _2360 = abs((1.0 - _1719) / _1728);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1728 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1719 + 1.0) / _1728);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2360 = frontier_phi_46_43_ladder;
        }
        float _2362 = isnan(_2155) ? _1887 : (isnan(_1887) ? _2155 : min(_1887, _2155));
        float _2363 = isnan(_2360) ? _2362 : (isnan(_2362) ? _2360 : min(_2362, _2360));
        float _2367 = (_2363 * _1722) + _1711;
        float _2368 = (_2363 * _1725) + _1715;
        float _2369 = (_2363 * _1728) + _1719;
        float _2370 = _2363 * 9.9999997473787516355514526367188e-05;
        float _2371 = (-1.0) - _2370;
        float _2373 = _2370 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2369 > _2373) || ((_2369 < _2371) || ((_2368 > _2373) || ((_2368 < _2371) || ((_2367 < _2371) || (_2367 > _2373))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2568 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2369, cbModelParam._m0[17u].z, fma(_2368, cbModelParam._m0[17u].y, _2367 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2369, cbModelParam._m0[18u].z, fma(_2368, cbModelParam._m0[18u].y, _2367 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2369, cbModelParam._m0[19u].z, fma(_2368, cbModelParam._m0[19u].y, _2367 * cbModelParam._m0[19u].x))), _1656);
            frontier_phi_22_46_ladder = _2568.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2568.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2568.x * cbModelParam._m0[1u].z;
        }
        _1747 = frontier_phi_22_46_ladder_2;
        _1749 = frontier_phi_22_46_ladder_1;
        _1751 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1731 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_758, _759, _760), _1656);
        _1747 = _1731.x * cbModelParam._m0[1u].z;
        _1749 = _1731.y * cbModelParam._m0[1u].z;
        _1751 = _1731.z * cbModelParam._m0[1u].z;
    }
    float _1763 = ((((1.0 - _779) * ((_766 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_779 * _766)) * _750;
    float _1764 = _1763 * ((cbModelParam._m0[1u].w * (_1747 - _1647)) + _1647);
    float _1765 = _1763 * ((cbModelParam._m0[1u].w * (_1749 - _1649)) + _1649);
    float _1766 = _1763 * ((cbModelParam._m0[1u].w * (_1751 - _1651)) + _1651);
    float _1769 = fma(_1766, cbSceneParam._m0[89u].z, fma(_1765, cbSceneParam._m0[89u].y, _1764 * cbSceneParam._m0[89u].x));
    float _1772 = fma(_1766, cbSceneParam._m0[90u].z, fma(_1765, cbSceneParam._m0[90u].y, _1764 * cbSceneParam._m0[90u].x));
    float _1775 = fma(_1766, cbSceneParam._m0[91u].z, fma(_1765, cbSceneParam._m0[91u].y, _1764 * cbSceneParam._m0[91u].x));
    vec4 _1783 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_687, _688));
    float _1785 = _1783.w;
    float _1797 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1785);
    float _1798 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1785);
    float _1799 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1785);
    uvec4 _1803 = floatBitsToUint(cbInstanceData._m0[_232 + 5u]);
    uint _1805 = _1803.x * 14u;
    uint _1806 = _1805 + 13u;
    float _1813 = _750 + (-1.0);
    float _1818 = (cbLight._m0[_1806].x * _1813) + 1.0;
    float _1819 = (cbLight._m0[_1806].y * _1813) + 1.0;
    float _1820 = (cbLight._m0[_1806].z * _1813) + 1.0;
    float _1821 = (cbLight._m0[_1806].w * _1813) + 1.0;
    uint _1822 = _1805 + 5u;
    float _1828 = isnan(1.0) ? _1819 : (isnan(_1819) ? 1.0 : min(_1819, 1.0));
    uint _1832 = _1805 + 4u;
    float _1841 = isnan(1.0) ? _1818 : (isnan(_1818) ? 1.0 : min(_1818, 1.0));
    uint _1845 = _1805 | 1u;
    float _1856 = dot(vec3(cbLight._m0[_1805].xyz), vec3(_599, _600, _601));
    float _1859 = dot(vec3(cbLight._m0[_1845].xyz), vec3(_599, _600, _601));
    float _3952 = isnan(0.0) ? _1856 : (isnan(_1856) ? 0.0 : max(_1856, 0.0));
    float _3963 = isnan(0.0) ? _1859 : (isnan(_1859) ? 0.0 : max(_1859, 0.0));
    float _1864 = (isnan(1.0) ? _3952 : (isnan(_3952) ? 1.0 : min(_3952, 1.0))) * 0.3183098733425140380859375;
    float _1866 = (isnan(1.0) ? _3963 : (isnan(_3963) ? 1.0 : min(_3963, 1.0))) * 0.3183098733425140380859375;
    float _1873 = ((cbLight._m0[_1822].x * _1828) * _1866) + (((cbLight._m0[_1832].x * _1797) * _1841) * _1864);
    float _1874 = ((_1828 * cbLight._m0[_1822].y) * _1866) + (((cbLight._m0[_1832].y * _1798) * _1841) * _1864);
    float _1875 = ((_1828 * cbLight._m0[_1822].z) * _1866) + (((cbLight._m0[_1832].z * _1799) * _1841) * _1864);
    uvec4 _1879 = floatBitsToUint(cbLight._m0[_1805 + 12u]);
    bool _1881 = _1879.x == 0u;
    float _1892;
    float _1894;
    float _1896;
    if (_1881)
    {
        _1892 = _1873;
        _1894 = _1874;
        _1896 = _1875;
    }
    else
    {
        uint _1900 = _1805 + 6u;
        float _1916 = (dot(vec3(cbLight._m0[_1805 + 2u].xyz), vec3(_599, _600, _601)) * 0.5) + 0.5;
        float _1917 = _1916 * _1916;
        float _3974 = isnan(0.0) ? _1917 : (isnan(_1917) ? 0.0 : max(_1917, 0.0));
        float _1918 = isnan(1.0) ? _3974 : (isnan(_3974) ? 1.0 : min(_3974, 1.0));
        float _1919 = isnan(1.0) ? _1820 : (isnan(_1820) ? 1.0 : min(_1820, 1.0));
        _1892 = (((cbLight._m0[_1900].x * 0.3183098733425140380859375) * _1918) * _1919) + _1873;
        _1894 = (((cbLight._m0[_1900].y * 0.3183098733425140380859375) * _1918) * _1919) + _1874;
        _1896 = (((cbLight._m0[_1900].z * 0.3183098733425140380859375) * _1918) * _1919) + _1875;
    }
    bool _1899 = _1879.y == 0u;
    float _1937;
    float _1939;
    float _1941;
    if (_1899)
    {
        _1937 = _1892;
        _1939 = _1894;
        _1941 = _1896;
    }
    else
    {
        uint _2099 = _1805 + 7u;
        float _2115 = (dot(vec3(cbLight._m0[_1805 + 3u].xyz), vec3(_599, _600, _601)) * 0.5) + 0.5;
        float _2116 = _2115 * _2115;
        float _3990 = isnan(0.0) ? _2116 : (isnan(_2116) ? 0.0 : max(_2116, 0.0));
        float _2117 = isnan(1.0) ? _3990 : (isnan(_3990) ? 1.0 : min(_3990, 1.0));
        float _2118 = isnan(1.0) ? _1821 : (isnan(_1821) ? 1.0 : min(_1821, 1.0));
        _1937 = (((cbLight._m0[_2099].x * 0.3183098733425140380859375) * _2117) * _2118) + _1892;
        _1939 = (((cbLight._m0[_2099].y * 0.3183098733425140380859375) * _2117) * _2118) + _1894;
        _1941 = (((cbLight._m0[_2099].z * 0.3183098733425140380859375) * _2117) * _2118) + _1896;
    }
    uint _1944 = _1805 + 8u;
    float _1957 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1805].w)) * _602) * 0.949999988079071044921875);
    float _1958 = _1957 * _1957;
    float _1959 = cbLight._m0[_1805].x + _679;
    float _1960 = cbLight._m0[_1805].y + _680;
    float _1961 = cbLight._m0[_1805].z + _681;
    float _1965 = inversesqrt(dot(vec3(_1959, _1960, _1961), vec3(_1959, _1960, _1961)));
    float _1966 = _1965 * _1959;
    float _1967 = _1965 * _1960;
    float _1968 = _1965 * _1961;
    float _1969 = dot(vec3(_599, _600, _601), vec3(cbLight._m0[_1805].xyz));
    float _4006 = isnan(0.0) ? _1969 : (isnan(_1969) ? 0.0 : max(_1969, 0.0));
    float _1972 = isnan(1.0) ? _4006 : (isnan(_4006) ? 1.0 : min(_4006, 1.0));
    float _4017 = isnan(0.0) ? _751 : (isnan(_751) ? 0.0 : max(_751, 0.0));
    float _1973 = isnan(1.0) ? _4017 : (isnan(_4017) ? 1.0 : min(_4017, 1.0));
    float _1974 = dot(vec3(_599, _600, _601), vec3(_1966, _1967, _1968));
    float _4028 = isnan(0.0) ? _1974 : (isnan(_1974) ? 0.0 : max(_1974, 0.0));
    float _1977 = isnan(1.0) ? _4028 : (isnan(_4028) ? 1.0 : min(_4028, 1.0));
    float _1978 = dot(vec3(cbLight._m0[_1805].xyz), vec3(_1966, _1967, _1968));
    float _4039 = isnan(0.0) ? _1978 : (isnan(_1978) ? 0.0 : max(_1978, 0.0));
    float _1982 = _1958 * _1958;
    float _1986 = ((_1977 * _1977) * (_1982 + (-1.0))) + 1.0;
    float _1997 = (exp2(log2(1.0 - (isnan(1.0) ? _4039 : (isnan(_4039) ? 1.0 : min(_4039, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1998 = 1.0 - _1958;
    float _2009 = (0.5 / (((_1973 * ((_1972 * _1998) + _1958)) + 9.9999999392252902907785028219223e-09) + (((_1973 * _1998) + _1958) * _1972))) * _1972;
    float _4050 = isnan(0.0) ? _2009 : (isnan(_2009) ? 0.0 : max(_2009, 0.0));
    float _2011 = (isnan(1.0) ? _4050 : (isnan(_4050) ? 1.0 : min(_4050, 1.0))) * (_1982 / ((_1986 * _1986) * 3.141590118408203125));
    uint _2025 = _1805 + 9u;
    float _2036 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1845].w)) * _602) * 0.949999988079071044921875);
    float _2037 = _2036 * _2036;
    float _2038 = cbLight._m0[_1845].x + _679;
    float _2039 = cbLight._m0[_1845].y + _680;
    float _2040 = cbLight._m0[_1845].z + _681;
    float _2044 = inversesqrt(dot(vec3(_2038, _2039, _2040), vec3(_2038, _2039, _2040)));
    float _2045 = _2044 * _2038;
    float _2046 = _2044 * _2039;
    float _2047 = _2044 * _2040;
    float _2048 = dot(vec3(_599, _600, _601), vec3(cbLight._m0[_1845].xyz));
    float _4061 = isnan(0.0) ? _2048 : (isnan(_2048) ? 0.0 : max(_2048, 0.0));
    float _2051 = isnan(1.0) ? _4061 : (isnan(_4061) ? 1.0 : min(_4061, 1.0));
    float _2052 = dot(vec3(_599, _600, _601), vec3(_2045, _2046, _2047));
    float _4072 = isnan(0.0) ? _2052 : (isnan(_2052) ? 0.0 : max(_2052, 0.0));
    float _2055 = isnan(1.0) ? _4072 : (isnan(_4072) ? 1.0 : min(_4072, 1.0));
    float _2056 = dot(vec3(cbLight._m0[_1845].xyz), vec3(_2045, _2046, _2047));
    float _4083 = isnan(0.0) ? _2056 : (isnan(_2056) ? 0.0 : max(_2056, 0.0));
    float _2060 = _2037 * _2037;
    float _2064 = ((_2055 * _2055) * (_2060 + (-1.0))) + 1.0;
    float _2073 = (exp2(log2(1.0 - (isnan(1.0) ? _4083 : (isnan(_4083) ? 1.0 : min(_4083, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2074 = 1.0 - _2037;
    float _2084 = (0.5 / (((_1973 * ((_2051 * _2074) + _2037)) + 9.9999999392252902907785028219223e-09) + (((_1973 * _2074) + _2037) * _2051))) * _2051;
    float _4094 = isnan(0.0) ? _2084 : (isnan(_2084) ? 0.0 : max(_2084, 0.0));
    float _2086 = (isnan(1.0) ? _4094 : (isnan(_4094) ? 1.0 : min(_4094, 1.0))) * (_2060 / ((_2064 * _2064) * 3.141590118408203125));
    float _2096 = (((_2073 * cbLight._m0[_2025].x) * _2086) * _1828) + ((((cbLight._m0[_1944].x * _1797) * _1997) * _2011) * _1841);
    float _2097 = (((_2073 * cbLight._m0[_2025].y) * _2086) * _1828) + ((((cbLight._m0[_1944].y * _1798) * _1997) * _2011) * _1841);
    float _2098 = (((_2073 * cbLight._m0[_2025].z) * _2086) * _1828) + ((((cbLight._m0[_1944].z * _1799) * _1997) * _2011) * _1841);
    float _2160;
    float _2162;
    float _2164;
    if (_1881)
    {
        _2160 = _2096;
        _2162 = _2097;
        _2164 = _2098;
    }
    else
    {
        uint _2166 = _1805 + 2u;
        uint _2170 = _1805 + 10u;
        float _2184 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2166].w)) * _602) * 0.949999988079071044921875);
        float _2185 = _2184 * _2184;
        float _2186 = cbLight._m0[_2166].x + _679;
        float _2187 = cbLight._m0[_2166].y + _680;
        float _2188 = cbLight._m0[_2166].z + _681;
        float _2192 = inversesqrt(dot(vec3(_2186, _2187, _2188), vec3(_2186, _2187, _2188)));
        float _2193 = _2192 * _2186;
        float _2194 = _2192 * _2187;
        float _2195 = _2192 * _2188;
        float _2196 = dot(vec3(_599, _600, _601), vec3(cbLight._m0[_2166].xyz));
        float _4105 = isnan(0.0) ? _2196 : (isnan(_2196) ? 0.0 : max(_2196, 0.0));
        float _2199 = isnan(1.0) ? _4105 : (isnan(_4105) ? 1.0 : min(_4105, 1.0));
        float _2200 = dot(vec3(_599, _600, _601), vec3(_2193, _2194, _2195));
        float _4116 = isnan(0.0) ? _2200 : (isnan(_2200) ? 0.0 : max(_2200, 0.0));
        float _2203 = isnan(1.0) ? _4116 : (isnan(_4116) ? 1.0 : min(_4116, 1.0));
        float _2204 = dot(vec3(cbLight._m0[_2166].xyz), vec3(_2193, _2194, _2195));
        float _4127 = isnan(0.0) ? _2204 : (isnan(_2204) ? 0.0 : max(_2204, 0.0));
        float _2208 = _2185 * _2185;
        float _2212 = ((_2203 * _2203) * (_2208 + (-1.0))) + 1.0;
        float _2221 = (exp2(log2(1.0 - (isnan(1.0) ? _4127 : (isnan(_4127) ? 1.0 : min(_4127, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2222 = 1.0 - _2185;
        float _2232 = (0.5 / (((_1973 * ((_2199 * _2222) + _2185)) + 9.9999999392252902907785028219223e-09) + (((_1973 * _2222) + _2185) * _2199))) * _2199;
        float _4138 = isnan(0.0) ? _2232 : (isnan(_2232) ? 0.0 : max(_2232, 0.0));
        float _2234 = (isnan(1.0) ? _4138 : (isnan(_4138) ? 1.0 : min(_4138, 1.0))) * (_2208 / ((_2212 * _2212) * 3.141590118408203125));
        float _2235 = isnan(1.0) ? _1820 : (isnan(_1820) ? 1.0 : min(_1820, 1.0));
        _2160 = (((_2221 * cbLight._m0[_2170].x) * _2234) * _2235) + _2096;
        _2162 = (((_2221 * cbLight._m0[_2170].y) * _2234) * _2235) + _2097;
        _2164 = (((_2221 * cbLight._m0[_2170].z) * _2234) * _2235) + _2098;
    }
    float _2270;
    float _2272;
    float _2274;
    if (_1899)
    {
        _2270 = _2160;
        _2272 = _2162;
        _2274 = _2164;
    }
    else
    {
        uint _2281 = _1805 + 3u;
        uint _2285 = _1805 + 11u;
        float _2299 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2281].w)) * _602) * 0.949999988079071044921875);
        float _2300 = _2299 * _2299;
        float _2301 = cbLight._m0[_2281].x + _679;
        float _2302 = cbLight._m0[_2281].y + _680;
        float _2303 = cbLight._m0[_2281].z + _681;
        float _2307 = inversesqrt(dot(vec3(_2301, _2302, _2303), vec3(_2301, _2302, _2303)));
        float _2308 = _2307 * _2301;
        float _2309 = _2307 * _2302;
        float _2310 = _2307 * _2303;
        float _2311 = dot(vec3(_599, _600, _601), vec3(cbLight._m0[_2281].xyz));
        float _4154 = isnan(0.0) ? _2311 : (isnan(_2311) ? 0.0 : max(_2311, 0.0));
        float _2314 = isnan(1.0) ? _4154 : (isnan(_4154) ? 1.0 : min(_4154, 1.0));
        float _2315 = dot(vec3(_599, _600, _601), vec3(_2308, _2309, _2310));
        float _4165 = isnan(0.0) ? _2315 : (isnan(_2315) ? 0.0 : max(_2315, 0.0));
        float _2318 = isnan(1.0) ? _4165 : (isnan(_4165) ? 1.0 : min(_4165, 1.0));
        float _2319 = dot(vec3(cbLight._m0[_2281].xyz), vec3(_2308, _2309, _2310));
        float _4176 = isnan(0.0) ? _2319 : (isnan(_2319) ? 0.0 : max(_2319, 0.0));
        float _2323 = _2300 * _2300;
        float _2327 = ((_2318 * _2318) * (_2323 + (-1.0))) + 1.0;
        float _2336 = (exp2(log2(1.0 - (isnan(1.0) ? _4176 : (isnan(_4176) ? 1.0 : min(_4176, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2337 = 1.0 - _2300;
        float _2347 = (0.5 / (((_1973 * ((_2314 * _2337) + _2300)) + 9.9999999392252902907785028219223e-09) + (((_1973 * _2337) + _2300) * _2314))) * _2314;
        float _4187 = isnan(0.0) ? _2347 : (isnan(_2347) ? 0.0 : max(_2347, 0.0));
        float _2349 = (isnan(1.0) ? _4187 : (isnan(_4187) ? 1.0 : min(_4187, 1.0))) * (_2323 / ((_2327 * _2327) * 3.141590118408203125));
        float _2350 = isnan(1.0) ? _1821 : (isnan(_1821) ? 1.0 : min(_1821, 1.0));
        _2270 = (((_2336 * cbLight._m0[_2285].x) * _2349) * _2350) + _2160;
        _2272 = (((_2336 * cbLight._m0[_2285].y) * _2349) * _2350) + _2162;
        _2274 = (((_2336 * cbLight._m0[_2285].z) * _2349) * _2350) + _2164;
    }
    float _2485;
    float _2487;
    float _2489;
    float _2491;
    float _2493;
    float _2495;
    if (_1803.y == 0u)
    {
        float _2425 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2426 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2425;
        float _2427 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2425;
        float _2428 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2425;
        uvec4 _2440 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2441 = _2440.x;
        uint _2452 = uint((float(_2440.y) * floor(float(uint(cbSceneParam._m0[85u].y * _688) / _2441))) + floor(float(uint(cbSceneParam._m0[85u].x * _687) / _2441)));
        float _2462 = (log2(_2428 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2463 = isnan(0.0) ? _2462 : (isnan(_2462) ? 0.0 : max(_2462, 0.0));
        uint _2466 = uint(isnan(14.0) ? _2463 : (isnan(_2463) ? 14.0 : min(_2463, 14.0)));
        uvec4 _2471 = texelFetch(g_lightClusterGridBuffer, int(((_2466 << 2u) + (_2452 << 6u)) >> 2u));
        uint _2472 = _2471.x;
        uint _2473 = _2440.z;
        float _2573;
        float _2575;
        float _2577;
        float _2579;
        float _2581;
        float _2583;
        if (((((1u << ((_2473 >> 4u) & 15u)) + 4294967295u) & _2472) == 0u) || ((_2473 & 240u) == 0u))
        {
            _2573 = 0.0;
            _2575 = 0.0;
            _2577 = 0.0;
            _2579 = 0.0;
            _2581 = 0.0;
            _2583 = 0.0;
        }
        else
        {
            float _2574;
            float _2576;
            float _2578;
            float _2580;
            float _2582;
            float _2584;
            float _2718 = 0.0;
            float _2719 = 0.0;
            float _2720 = 0.0;
            float _2721 = 0.0;
            float _2722 = 0.0;
            float _2723 = 0.0;
            uint _2724 = 0u;
            uint _2733;
            bool _2734;
            for (;;)
            {
                _2733 = texelFetch(g_lightClassification, int((((_2466 << 5u) + (_2452 << 9u)) + (_2724 << 2u)) >> 2u)).x;
                _2734 = _2733 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2734)
                {
                    frontier_phi_61_pred = _2718;
                    frontier_phi_61_pred_1 = _2723;
                    frontier_phi_61_pred_2 = _2722;
                    frontier_phi_61_pred_3 = _2721;
                    frontier_phi_61_pred_4 = _2720;
                    frontier_phi_61_pred_5 = _2719;
                }
                else
                {
                    float _2842;
                    float _2843;
                    float _2844;
                    float _2845;
                    float _2846;
                    float _2847;
                    uint _2848;
                    _2842 = _2718;
                    _2843 = _2719;
                    _2844 = _2720;
                    _2845 = _2721;
                    _2846 = _2722;
                    _2847 = _2723;
                    _2848 = _2733;
                    float _2774;
                    float _2775;
                    float _2776;
                    float _2777;
                    float _2778;
                    float _2779;
                    for (;;)
                    {
                        uint _2852 = uint(findLSB(_2848)) + (_2724 << 5u);
                        uint _2849 = (_2848 + 4294967295u) & _2848;
                        uint _2854 = _2852 * 48u;
                        vec4 _2868 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2854)).x, texelFetch(g_PointLightRenderingBuffer, int(_2854 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2854 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2854 + 3u)).x));
                        uint _2874 = (_2852 * 48u) + 4u;
                        vec4 _2887 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2874)).x, texelFetch(g_PointLightRenderingBuffer, int(_2874 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2874 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2874 + 3u)).x));
                        uint _2893 = (_2852 * 48u) + 8u;
                        vec3 _2904 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2893)).x, texelFetch(g_PointLightRenderingBuffer, int(_2893 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2893 + 2u)).x));
                        float _2908 = _2868.x - _2426;
                        float _2909 = _2868.y - _2427;
                        float _2910 = _2868.z - _2428;
                        float _2911 = dot(vec3(_2908, _2909, _2910), vec3(_2908, _2909, _2910));
                        float _2914 = inversesqrt(_2911);
                        float _2915 = _2914 * _2908;
                        float _2916 = _2914 * _2909;
                        float _2917 = _2914 * _2910;
                        float _2918 = dot(vec3(_706, _709, _712), vec3(_2915, _2916, _2917));
                        float _2923 = 1.0 - (_2911 * _2868.w);
                        float _4213 = isnan(0.0) ? _2923 : (isnan(_2923) ? 0.0 : max(_2923, 0.0));
                        float _2924 = isnan(1.0) ? _4213 : (isnan(_4213) ? 1.0 : min(_4213, 1.0));
                        float _2925 = sqrt(_2911) * _2887.w;
                        float _2928 = 1.39999997615814208984375 / (_2925 + 1.39999997615814208984375);
                        float _2929 = _2928 * _2928;
                        float _2932 = ((1.0 - _2929) * _2918) + _2929;
                        float _2935 = _2925 * _2925;
                        float _2939 = ((isnan(0.0) ? _2932 : (isnan(_2932) ? 0.0 : max(_2932, 0.0))) * _2924) / ((_2935 * 0.699999988079071044921875) + 1.0);
                        float _2943 = (-0.0) - _2426;
                        float _2944 = (-0.0) - _2427;
                        float _2945 = (-0.0) - _2428;
                        float _2949 = inversesqrt(dot(vec3(_2943, _2944, _2945), vec3(_2943, _2944, _2945)));
                        float _2950 = _2949 * _2943;
                        float _2951 = _2949 * _2944;
                        float _2952 = _2949 * _2945;
                        float _2960 = exp2(log2(1.0 / ((_2935 * 3.5) + 5.0)) * 0.25);
                        float _2961 = 1.0 - _766;
                        float _2968 = sqrt(1.0 - ((1.0 - (_2961 * _2961)) * (1.0 - (_2960 * _2960))));
                        float _2969 = _2968 * _2968;
                        float _2970 = _2969 * _2969;
                        float _2971 = _2950 + _2915;
                        float _2972 = _2951 + _2916;
                        float _2973 = _2952 + _2917;
                        float _2977 = inversesqrt(dot(vec3(_2971, _2972, _2973), vec3(_2971, _2972, _2973)));
                        float _2981 = dot(vec3(_706, _709, _712), vec3(_2950, _2951, _2952));
                        float _4229 = isnan(0.0) ? _2981 : (isnan(_2981) ? 0.0 : max(_2981, 0.0));
                        float _2984 = isnan(1.0) ? _4229 : (isnan(_4229) ? 1.0 : min(_4229, 1.0));
                        float _2985 = dot(vec3(_706, _709, _712), vec3(_2977 * _2971, _2977 * _2972, _2977 * _2973));
                        float _4240 = isnan(0.0) ? _2985 : (isnan(_2985) ? 0.0 : max(_2985, 0.0));
                        float _2988 = isnan(1.0) ? _4240 : (isnan(_4240) ? 1.0 : min(_4240, 1.0));
                        float _2992 = ((_2988 * _2988) * (_2970 + (-1.0))) + 1.0;
                        float _2993 = _2928 * _2969;
                        float _2994 = _2993 * _2993;
                        float _2997 = ((1.0 - _2994) * _2918) + _2994;
                        float _4251 = isnan(0.0) ? _2997 : (isnan(_2997) ? 0.0 : max(_2997, 0.0));
                        float _2998 = isnan(1.0) ? _4251 : (isnan(_4251) ? 1.0 : min(_4251, 1.0));
                        float _2999 = 1.0 - _2969;
                        float _3009 = (0.5 / (((_2998 * ((_2984 * _2999) + _2969)) + 9.9999999392252902907785028219223e-09) + (((_2998 * _2999) + _2969) * _2984))) * _2998;
                        float _4262 = isnan(0.0) ? _3009 : (isnan(_3009) ? 0.0 : max(_3009, 0.0));
                        float _3020 = (((_2970 * 3.1415927410125732421875) * (isnan(1.0) ? _4262 : (isnan(_4262) ? 1.0 : min(_4262, 1.0)))) / ((_2992 * _2992) * ((_2935 * 2.1991131305694580078125) + 3.141590118408203125))) * _2924;
                        _2777 = (_2939 * _2887.x) + _2845;
                        _2778 = (_2939 * _2887.y) + _2846;
                        _2779 = (_2939 * _2887.z) + _2847;
                        _2774 = (_3020 * _2904.x) + _2842;
                        _2775 = (_3020 * _2904.y) + _2843;
                        _2776 = (_3020 * _2904.z) + _2844;
                        if (_2849 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2842 = _2774;
                            _2843 = _2775;
                            _2844 = _2776;
                            _2845 = _2777;
                            _2846 = _2778;
                            _2847 = _2779;
                            _2848 = _2849;
                        }
                    }
                    frontier_phi_61_pred = _2774;
                    frontier_phi_61_pred_1 = _2779;
                    frontier_phi_61_pred_2 = _2778;
                    frontier_phi_61_pred_3 = _2777;
                    frontier_phi_61_pred_4 = _2776;
                    frontier_phi_61_pred_5 = _2775;
                }
                _2574 = frontier_phi_61_pred;
                _2584 = frontier_phi_61_pred_1;
                _2582 = frontier_phi_61_pred_2;
                _2580 = frontier_phi_61_pred_3;
                _2578 = frontier_phi_61_pred_4;
                _2576 = frontier_phi_61_pred_5;
                uint _2725 = _2724 + 1u;
                if (_2725 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2718 = _2574;
                    _2719 = _2576;
                    _2720 = _2578;
                    _2721 = _2580;
                    _2722 = _2582;
                    _2723 = _2584;
                    _2724 = _2725;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2573 = _2574;
            _2575 = _2576;
            _2577 = _2578;
            _2579 = _2580;
            _2581 = _2582;
            _2583 = _2584;
        }
        uvec4 _2587 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2588 = _2587.z;
        uint _2590 = (_2588 >> 8u) & 15u;
        float _2686;
        float _2688;
        float _2690;
        float _2692;
        float _2694;
        float _2696;
        if (((4294967295u << _2590) & _2472) == 0u)
        {
            _2686 = _2573;
            _2688 = _2575;
            _2690 = _2577;
            _2692 = _2579;
            _2694 = _2581;
            _2696 = _2583;
        }
        else
        {
            float _2711 = inversesqrt(dot(vec3(_2426, _2427, _2428), vec3(_2426, _2427, _2428)));
            float _2712 = _2711 * _2426;
            float _2713 = _2711 * _2427;
            float _2714 = _2711 * _2428;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2590 < ((_2588 >> 12u) & 15u))
            {
                float _2687;
                float _2689;
                float _2691;
                float _2693;
                float _2695;
                float _2697;
                float _2825 = _2573;
                float _2826 = _2575;
                float _2827 = _2577;
                float _2828 = _2579;
                float _2829 = _2581;
                float _2830 = _2583;
                uint _2831 = _2590;
                uint _2840;
                bool _2841;
                for (;;)
                {
                    _2840 = texelFetch(g_lightClassification, int((((_2466 << 5u) + (_2452 << 9u)) + (_2831 << 2u)) >> 2u)).x;
                    _2841 = _2840 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_2841)
                    {
                        frontier_phi_67_pred = _2828;
                        frontier_phi_67_pred_1 = _2829;
                        frontier_phi_67_pred_2 = _2830;
                        frontier_phi_67_pred_3 = _2827;
                        frontier_phi_67_pred_4 = _2826;
                        frontier_phi_67_pred_5 = _2825;
                    }
                    else
                    {
                        float _3025;
                        float _3026;
                        float _3027;
                        float _3028;
                        float _3029;
                        float _3030;
                        float _3318;
                        float _3319;
                        float _3320;
                        float _3321;
                        float _3322;
                        float _3323;
                        float _3038 = _2825;
                        float _3039 = _2826;
                        float _3040 = _2827;
                        float _3041 = _2828;
                        float _3042 = _2829;
                        float _3043 = _2830;
                        uint _3044 = _2840;
                        uint _3045;
                        vec4 _3070;
                        float _3071;
                        vec4 _3086;
                        vec3 _3098;
                        vec4 _3113;
                        vec4 _3128;
                        float _3174;
                        bool _3175;
                        for (;;)
                        {
                            uint _3055 = ((_2831 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3044));
                            _3045 = (_3044 + 4294967295u) & _3044;
                            uint _3057 = _3055 * 40u;
                            _3070 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3057)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3057 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3057 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3057 + 3u)).x));
                            _3071 = _3070.w;
                            uint _3073 = (_3055 * 40u) + 4u;
                            _3086 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3073)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3073 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3073 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3073 + 3u)).x));
                            uint _3088 = (_3055 * 40u) + 8u;
                            _3098 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3088)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3088 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3088 + 2u)).x));
                            uint _3100 = (_3055 * 40u) + 16u;
                            _3113 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3100)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3100 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3100 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3100 + 3u)).x));
                            uint _3115 = (_3055 * 40u) + 20u;
                            _3128 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3115)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3115 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3115 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3115 + 3u)).x));
                            uint _3130 = (_3055 * 40u) + 24u;
                            vec4 _3143 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3130)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3130 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3130 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3130 + 3u)).x));
                            uint _3149 = (_3055 * 40u) + 28u;
                            vec4 _3162 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3149)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3149 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3149 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3149 + 3u)).x));
                            _3174 = fma(_2428, _3162.z, fma(_2427, _3162.y, _3162.x * _2426)) + _3162.w;
                            _3175 = !((fma(_2428, _3143.z, fma(_2427, _3143.y, _3143.x * _2426)) + _3143.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3175)
                            {
                                float _3202 = _3070.x - _2426;
                                float _3203 = _3070.y - _2427;
                                float _3204 = _3070.z - _2428;
                                float _3205 = dot(vec3(_3202, _3203, _3204), vec3(_3202, _3203, _3204));
                                float _3208 = inversesqrt(_3205);
                                float _3209 = _3208 * _3202;
                                float _3210 = _3208 * _3203;
                                float _3211 = _3208 * _3204;
                                float _3215 = 1.0 - (_3205 / (_3071 * _3071));
                                float _4273 = isnan(0.0) ? _3215 : (isnan(_3215) ? 0.0 : max(_3215, 0.0));
                                float _3216 = isnan(1.0) ? _4273 : (isnan(_4273) ? 1.0 : min(_4273, 1.0));
                                float _3220 = sqrt(_3205) * _3086.w;
                                float _3222 = 1.39999997615814208984375 / (_3220 + 1.39999997615814208984375);
                                float _3223 = _3222 * _3222;
                                float _3226 = ((1.0 - _3223) * dot(vec3(_3209, _3210, _3211), vec3(_706, _709, _712))) + _3223;
                                float _3229 = _3220 * _3220;
                                float _3233 = (fma(_2428, _3113.z, fma(_2427, _3113.y, _3113.x * _2426)) + _3113.w) / _3174;
                                float _3234 = (fma(_2428, _3128.z, fma(_2427, _3128.y, _3128.x * _2426)) + _3128.w) / _3174;
                                float _3238 = 1.0 - dot(vec2(_3233, _3234), vec2(_3233, _3234));
                                float _4289 = isnan(0.0) ? _3238 : (isnan(_3238) ? 0.0 : max(_3238, 0.0));
                                float _3239 = isnan(1.0) ? _4289 : (isnan(_4289) ? 1.0 : min(_4289, 1.0));
                                float _3240 = _3239 * (((isnan(0.0) ? _3226 : (isnan(_3226) ? 0.0 : max(_3226, 0.0))) * _3216) / ((_3229 * 0.699999988079071044921875) + 1.0));
                                float _3252 = exp2(log2(1.0 / ((_3229 * 3.5) + 5.0)) * 0.25);
                                float _3253 = 1.0 - _766;
                                float _3260 = sqrt(1.0 - ((1.0 - (_3253 * _3253)) * (1.0 - (_3252 * _3252))));
                                float _3261 = _3260 * _3260;
                                float _3262 = _3261 * _3261;
                                float _3263 = _3209 - _2712;
                                float _3264 = _3210 - _2713;
                                float _3265 = _3211 - _2714;
                                float _3269 = inversesqrt(dot(vec3(_3263, _3264, _3265), vec3(_3263, _3264, _3265)));
                                float _3273 = dot(vec3(_706, _709, _712), vec3((-0.0) - _2712, (-0.0) - _2713, (-0.0) - _2714));
                                float _4300 = isnan(0.0) ? _3273 : (isnan(_3273) ? 0.0 : max(_3273, 0.0));
                                float _3276 = isnan(1.0) ? _4300 : (isnan(_4300) ? 1.0 : min(_4300, 1.0));
                                float _3277 = dot(vec3(_706, _709, _712), vec3(_3269 * _3263, _3269 * _3264, _3269 * _3265));
                                float _4311 = isnan(0.0) ? _3277 : (isnan(_3277) ? 0.0 : max(_3277, 0.0));
                                float _3280 = isnan(1.0) ? _4311 : (isnan(_4311) ? 1.0 : min(_4311, 1.0));
                                float _3284 = ((_3280 * _3280) * (_3262 + (-1.0))) + 1.0;
                                float _3285 = _3222 * _3261;
                                float _3286 = _3285 * _3285;
                                float _3292 = ((1.0 - _3286) * dot(vec3(_706, _709, _712), vec3(_3209, _3210, _3211))) + _3286;
                                float _4322 = isnan(0.0) ? _3292 : (isnan(_3292) ? 0.0 : max(_3292, 0.0));
                                float _3293 = isnan(1.0) ? _4322 : (isnan(_4322) ? 1.0 : min(_4322, 1.0));
                                float _3294 = 1.0 - _3261;
                                float _3304 = (0.5 / (((_3293 * ((_3276 * _3294) + _3261)) + 9.9999999392252902907785028219223e-09) + (((_3293 * _3294) + _3261) * _3276))) * _3293;
                                float _4333 = isnan(0.0) ? _3304 : (isnan(_3304) ? 0.0 : max(_3304, 0.0));
                                float _3314 = (_3239 * _3216) * (((_3262 * 3.1415927410125732421875) * (isnan(1.0) ? _4333 : (isnan(_4333) ? 1.0 : min(_4333, 1.0)))) / ((_3284 * _3284) * ((_3229 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3314 * _3098.x;
                                frontier_phi_73_pred_1 = _3314 * _3098.y;
                                frontier_phi_73_pred_2 = _3240 * _3086.z;
                                frontier_phi_73_pred_3 = _3240 * _3086.y;
                                frontier_phi_73_pred_4 = _3240 * _3086.x;
                                frontier_phi_73_pred_5 = _3314 * _3098.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3318 = frontier_phi_73_pred;
                            _3319 = frontier_phi_73_pred_1;
                            _3323 = frontier_phi_73_pred_2;
                            _3322 = frontier_phi_73_pred_3;
                            _3321 = frontier_phi_73_pred_4;
                            _3320 = frontier_phi_73_pred_5;
                            _3028 = _3321 + _3041;
                            _3029 = _3322 + _3042;
                            _3030 = _3323 + _3043;
                            _3025 = _3318 + _3038;
                            _3026 = _3319 + _3039;
                            _3027 = _3320 + _3040;
                            if (_3045 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3038 = _3025;
                                _3039 = _3026;
                                _3040 = _3027;
                                _3041 = _3028;
                                _3042 = _3029;
                                _3043 = _3030;
                                _3044 = _3045;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3028;
                        frontier_phi_67_pred_1 = _3029;
                        frontier_phi_67_pred_2 = _3030;
                        frontier_phi_67_pred_3 = _3027;
                        frontier_phi_67_pred_4 = _3026;
                        frontier_phi_67_pred_5 = _3025;
                    }
                    _2693 = frontier_phi_67_pred;
                    _2695 = frontier_phi_67_pred_1;
                    _2697 = frontier_phi_67_pred_2;
                    _2691 = frontier_phi_67_pred_3;
                    _2689 = frontier_phi_67_pred_4;
                    _2687 = frontier_phi_67_pred_5;
                    uint _2832 = _2831 + 1u;
                    if (_2832 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2825 = _2687;
                        _2826 = _2689;
                        _2827 = _2691;
                        _2828 = _2693;
                        _2829 = _2695;
                        _2830 = _2697;
                        _2831 = _2832;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2695;
                frontier_phi_55_56_ladder_1 = _2697;
                frontier_phi_55_56_ladder_2 = _2693;
                frontier_phi_55_56_ladder_3 = _2691;
                frontier_phi_55_56_ladder_4 = _2689;
                frontier_phi_55_56_ladder_5 = _2687;
            }
            else
            {
                frontier_phi_55_56_ladder = _2581;
                frontier_phi_55_56_ladder_1 = _2583;
                frontier_phi_55_56_ladder_2 = _2579;
                frontier_phi_55_56_ladder_3 = _2577;
                frontier_phi_55_56_ladder_4 = _2575;
                frontier_phi_55_56_ladder_5 = _2573;
            }
            _2686 = frontier_phi_55_56_ladder_5;
            _2688 = frontier_phi_55_56_ladder_4;
            _2690 = frontier_phi_55_56_ladder_3;
            _2692 = frontier_phi_55_56_ladder_2;
            _2694 = frontier_phi_55_56_ladder;
            _2696 = frontier_phi_55_56_ladder_1;
        }
        float _2701 = isnan(1.0) ? _750 : (isnan(_750) ? 1.0 : min(_750, 1.0));
        _2485 = (_2701 * _2692) + _1937;
        _2487 = (_2701 * _2694) + _1939;
        _2489 = (_2701 * _2696) + _1941;
        _2491 = ((_2686 * 0.039999999105930328369140625) * _2701) + _2270;
        _2493 = ((_2688 * 0.039999999105930328369140625) * _2701) + _2272;
        _2495 = ((_2690 * 0.039999999105930328369140625) * _2701) + _2274;
    }
    else
    {
        _2485 = _1937;
        _2487 = _1939;
        _2489 = _1941;
        _2491 = _2270;
        _2493 = _2272;
        _2495 = _2274;
    }
    float _4349 = isnan(0.0) ? _735 : (isnan(_735) ? 0.0 : max(_735, 0.0));
    float _4360 = isnan(0.0) ? _736 : (isnan(_736) ? 0.0 : max(_736, 0.0));
    float _4371 = isnan(0.0) ? _737 : (isnan(_737) ? 0.0 : max(_737, 0.0));
    uint _2515 = _232 + 6u;
    float _2523 = _687 / cbSceneParam._m0[86u].x;
    float _2524 = _688 / cbSceneParam._m0[86u].y;
    vec4 _2538 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2523, _2524, (log2((isnan(cbSceneParam._m0[77u].w) ? _620 : (isnan(_620) ? cbSceneParam._m0[77u].w : min(_620, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2540 = _2538.x;
    float _2541 = _2538.y;
    float _2542 = _2538.z;
    float _2543 = _2538.w;
    float _2636;
    float _2638;
    float _2640;
    float _2642;
    if (_620 > cbSceneParam._m0[78u].w)
    {
        float _2598 = isnan(_620) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _620 : min(cbSceneParam._m0[80u].w, _620));
        float _2599 = _2598 / _620;
        float _2610 = _2599 * _672;
        float _2611 = _673 * _2599;
        float _2612 = (-0.0) - _2611;
        float _2614 = _2599 * _674;
        float _2616 = (cbSceneParam._m0[77u].w * _2612) / _2598;
        float _2617 = _2616 + cbSceneParam._m0[79u].w;
        float _2618 = cbSceneParam._m0[79u].w - _2611;
        float _2624 = sqrt(((_2610 * _2610) + (_2611 * _2611)) + (_2614 * _2614));
        float _2627 = (1.0 - (cbSceneParam._m0[77u].w / _2598)) * _2624;
        float _2632 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2634 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2787;
        if (abs((_2612 - _2616) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2787 = ((((_2617 > 0.0) ? exp2(_2632 * _2617) : (2.0 - exp2(_2634 * _2617))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2627;
        }
        else
        {
            float _2747 = 1.0 / cbSceneParam._m0[80u].x;
            float _2748 = isnan(_2618) ? _2617 : (isnan(_2617) ? _2618 : max(_2617, _2618));
            float _2749 = isnan(_2618) ? _2617 : (isnan(_2617) ? _2618 : min(_2617, _2618));
            float _2758 = isnan(0.0) ? _2748 : (isnan(_2748) ? 0.0 : min(_2748, 0.0));
            float _2759 = isnan(0.0) ? _2749 : (isnan(_2749) ? 0.0 : min(_2749, 0.0));
            _2787 = ((abs(_2624 / _2612) * cbSceneParam._m0[80u].y) * ((((_2758 - _2759) * 2.0) - ((exp2(_2632 * (isnan(0.0) ? _2748 : (isnan(_2748) ? 0.0 : max(_2748, 0.0)))) - exp2(_2632 * (isnan(0.0) ? _2749 : (isnan(_2749) ? 0.0 : max(_2749, 0.0))))) * _2747)) - ((exp2(_2634 * _2758) - exp2(_2634 * _2759)) * _2747))) + (_2627 * cbSceneParam._m0[80u].z);
        }
        vec4 _2789 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2523, _2524, 1.0), 0.0);
        float _2798 = exp2((_2787 * (-1.44269502162933349609375)) * (1.0 - _2789.w));
        float _2799 = log2(_2798);
        float _2815 = log2(_2543);
        _2636 = (exp2(_2815 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2799 * cbSceneParam._m0[78u].x)) * _2789.x) / cbSceneParam._m0[78u].x)) + _2540;
        _2638 = (exp2(_2815 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2799 * cbSceneParam._m0[78u].y)) * _2789.y) / cbSceneParam._m0[78u].y)) + _2541;
        _2640 = (exp2(_2815 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2799 * cbSceneParam._m0[78u].z)) * _2789.z) / cbSceneParam._m0[78u].z)) + _2542;
        _2642 = _2798 * _2543;
    }
    else
    {
        _2636 = _2540;
        _2638 = _2541;
        _2640 = _2542;
        _2642 = _2543;
    }
    float _2654 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2655 = _2654 == 3.0;
    float _2656 = log2(_2642);
    float _2663 = exp2(_2656 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4349 : (isnan(_4349) ? 1.0 : min(_4349, 1.0))) * (_2485 + ((isnan(0.0) ? _1475 : (isnan(_1475) ? 0.0 : max(_1475, 0.0))) * _750))) + ((_2491 + ((isnan(0.0) ? _1769 : (isnan(_1769) ? 0.0 : max(_1769, 0.0))) * _1554)) * cbPerFrame._m0[3u].x));
    float _2664 = exp2(_2656 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4360 : (isnan(_4360) ? 1.0 : min(_4360, 1.0))) * (_2487 + ((isnan(0.0) ? _1478 : (isnan(_1478) ? 0.0 : max(_1478, 0.0))) * _750))) + ((_2493 + ((isnan(0.0) ? _1772 : (isnan(_1772) ? 0.0 : max(_1772, 0.0))) * _1554)) * cbPerFrame._m0[3u].x));
    float _2665 = exp2(_2656 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4371 : (isnan(_4371) ? 1.0 : min(_4371, 1.0))) * (_2489 + ((isnan(0.0) ? _1481 : (isnan(_1481) ? 0.0 : max(_1481, 0.0))) * _750))) + ((_2495 + ((isnan(0.0) ? _1775 : (isnan(_1775) ? 0.0 : max(_1775, 0.0))) * _1554)) * cbPerFrame._m0[3u].x));
    float _2674 = (_2654 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2674 * (_2655 ? _2663 : (_2663 + (cbSceneParam._m0[72u].w * _2636)));
    SV_Target.y = _2674 * (_2655 ? _2664 : (_2664 + (cbSceneParam._m0[72u].w * _2638)));
    SV_Target.z = _2674 * (_2655 ? _2665 : (_2665 + (cbSceneParam._m0[72u].w * _2640)));
    SV_Target.w = cbInstanceData._m0[_2515].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2515].w;
}


