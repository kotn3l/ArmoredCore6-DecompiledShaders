#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 13) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_22;
layout(set = 0, binding = 14) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_10;
layout(set = 0, binding = 20) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_6;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1392;
float _3749;
float _3750;
float _3751;
float _3752;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _223 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _224 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _225 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _231 = inversesqrt(dot(vec3(_223, _224, _225), vec3(_223, _224, _225)));
    float _232 = _231 * _223;
    float _233 = _231 * _224;
    float _234 = _231 * _225;
    float _238 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _239 = _238 * NORMAL.x;
    float _240 = _238 * NORMAL.y;
    float _241 = _238 * NORMAL.z;
    float _245 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _246 = _245 * TANGENT.x;
    float _247 = _245 * TANGENT.y;
    float _248 = _245 * TANGENT.z;
    float _259 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _261 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _262 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3761 = isnan(0.0) ? _259 : (isnan(_259) ? 0.0 : max(_259, 0.0));
    float _3772 = isnan(0.0) ? _261 : (isnan(_261) ? 0.0 : max(_261, 0.0));
    float _3783 = isnan(0.0) ? _262 : (isnan(_262) ? 0.0 : max(_262, 0.0));
    uint _272 = uint(roundEven(NORMAL.w)) * 13u;
    uint _277 = _272 + 1u;
    uint _281 = _272 + 2u;
    float _290 = sqrt(((cbInstanceData._m0[_277].x * cbInstanceData._m0[_277].x) + (cbInstanceData._m0[_272].x * cbInstanceData._m0[_272].x)) + (cbInstanceData._m0[_281].x * cbInstanceData._m0[_281].x));
    float _291 = _290 * TEXCOORD.z;
    float _292 = _290 * TEXCOORD.w;
    vec4 _305 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _291) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _292) + cbTextureTilingScale._m0[13u].w));
    vec4 _329 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _334 = _329.x * cbMtdParam._m0[11u].x;
    float _335 = _329.y * cbMtdParam._m0[11u].y;
    float _336 = _329.z * cbMtdParam._m0[11u].z;
    vec4 _355 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _291) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _292) + cbTextureTilingScale._m0[5u].w));
    vec4 _374 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _409 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _411 = _409.x;
    float _423 = dot(vec4(_411, _409.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _440 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _374.x) * 2.0) - ((((_411 - _423) * cbMtdParam._m0[24u].z) + _423) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3794 = isnan(0.0) ? _440 : (isnan(_440) ? 0.0 : max(_440, 0.0));
    float _441 = isnan(1.0) ? _3794 : (isnan(_3794) ? 1.0 : min(_3794, 1.0));
    float _448 = (_441 * ((_355.x * cbMtdParam._m0[12u].x) - _334)) + _334;
    float _449 = (_441 * ((_355.y * cbMtdParam._m0[12u].y) - _335)) + _335;
    float _450 = (_441 * ((_355.z * cbMtdParam._m0[12u].z) - _336)) + _336;
    vec4 _467 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _291) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _292) + cbTextureTilingScale._m0[3u].w));
    vec4 _487 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _489 = _487.x;
    float _499 = dot(vec4(_489, _487.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _513 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _374.y) * 2.0) - ((((_489 - _499) * cbMtdParam._m0[24u].z) + _499) * cbMtdParam._m0[20u].w))) + 1.0;
    float _3805 = isnan(0.0) ? _513 : (isnan(_513) ? 0.0 : max(_513, 0.0));
    float _514 = isnan(1.0) ? _3805 : (isnan(_3805) ? 1.0 : min(_3805, 1.0));
    float _521 = (_514 * ((_467.x * cbMtdParam._m0[13u].x) - _448)) + _448;
    float _522 = (_514 * ((_467.y * cbMtdParam._m0[13u].y) - _449)) + _449;
    float _523 = (_514 * ((_467.z * cbMtdParam._m0[13u].z) - _450)) + _450;
    float _527 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _305.x) * _521;
    float _530 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _305.y) * _522;
    float _533 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _305.z) * _523;
    float _540 = ((_521 - _527) * (isnan(1.0) ? _3761 : (isnan(_3761) ? 1.0 : min(_3761, 1.0)))) + _527;
    float _541 = ((_522 - _530) * (isnan(1.0) ? _3772 : (isnan(_3772) ? 1.0 : min(_3772, 1.0)))) + _530;
    float _542 = ((_523 - _533) * (isnan(1.0) ? _3783 : (isnan(_3783) ? 1.0 : min(_3783, 1.0)))) + _533;
    vec4 _561 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _291) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _292) + cbTextureTilingScale._m0[14u].w));
    vec4 _580 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _291) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _292) + cbTextureTilingScale._m0[20u].w));
    vec4 _605 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _291) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _292) + cbTextureTilingScale._m0[4u].w));
    vec4 _622 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _624 = _622.x;
    float _625 = _622.y;
    float _626 = _622.z;
    float _633 = ((_605.x - _624) * _441) + _624;
    float _634 = ((_605.y - _625) * _441) + _625;
    float _635 = ((_605.z - _626) * _441) + _626;
    vec4 _647 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _291) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _292) + cbTextureTilingScale._m0[2u].w));
    float _660 = ((_647.z - _635) * _514) + _635;
    float _663 = ((((_647.x - _633) * _514) + _633) * 2.0) + (-1.0);
    float _664 = ((((_647.y - _634) * _514) + _634) * 2.0) + (-1.0);
    float _665 = dot(vec2(_663, _664), vec2(_663, _664));
    float _3816 = isnan(0.0) ? _665 : (isnan(_665) ? 0.0 : max(_665, 0.0));
    float _670 = sqrt(1.0 - (isnan(1.0) ? _3816 : (isnan(_3816) ? 1.0 : min(_3816, 1.0))));
    vec4 _688 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _700 = (_663 + ((((_580.x * 2.0) + (-1.0)) * TEXCOORD_11.x) * cbMtdParam._m0[20u].x)) + (((_688.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _701 = (_664 + ((((_580.y * 2.0) + (-1.0)) * TEXCOORD_11.y) * cbMtdParam._m0[20u].x)) + (((_688.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _704 = fma(_670, _239, fma(_701, _246, _700 * _232));
    float _707 = fma(_670, _240, fma(_701, _247, _700 * _233));
    float _710 = fma(_670, _241, fma(_701, _248, _700 * _234));
    float _714 = inversesqrt(dot(vec3(_704, _707, _710), vec3(_704, _707, _710)));
    vec4 _741 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _291) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _292) + cbTextureTilingScale._m0[11u].w));
    float _743 = _741.x;
    float _744 = 1.0 - _743;
    float _750 = (cbMtdParam._m0[19u].x + dot(vec4(_714 * _704, _714 * _707, _714 * _710, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_743 - _744) * cbMtdParam._m0[24u].w) + _744) * cbMtdParam._m0[21u].z);
    float _3827 = isnan(0.0) ? _750 : (isnan(_750) ? 0.0 : max(_750, 0.0));
    float _751 = isnan(1.0) ? _3827 : (isnan(_3827) ? 1.0 : min(_3827, 1.0));
    float _758 = (_751 * ((_561.x * cbMtdParam._m0[18u].x) - _540)) + _540;
    float _759 = (_751 * ((_561.y * cbMtdParam._m0[18u].y) - _541)) + _541;
    float _760 = (_751 * ((_561.z * cbMtdParam._m0[18u].z) - _542)) + _542;
    float _765 = (((_580.z - _660) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _660;
    float _769 = ((_688.z - _765) * cbMtdParam._m0[19u].w) + _765;
    vec4 _782 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _291) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _292) + cbTextureTilingScale._m0[15u].w));
    float _789 = (_782.x * 2.0) + (-1.0);
    float _790 = (_782.y * 2.0) + (-1.0);
    float _791 = dot(vec2(_789, _790), vec2(_789, _790));
    float _3838 = isnan(0.0) ? _791 : (isnan(_791) ? 0.0 : max(_791, 0.0));
    float _799 = ((_782.z - _769) * _751) + _769;
    float _809 = ((sqrt(1.0 - (isnan(1.0) ? _3838 : (isnan(_3838) ? 1.0 : min(_3838, 1.0)))) - _670) * _751) + _670;
    float _812 = (((_789 - _700) * _751) + _700) + (cbMtdParam._m0[21u].x * _700);
    float _813 = (((_790 - _701) * _751) + _701) + (cbMtdParam._m0[21u].x * _701);
    float _815 = cbMtdParam._m0[22u].x + _688.w;
    float _818 = fma(_809, _239, fma(_813, _246, _812 * _232));
    float _821 = fma(_809, _240, fma(_813, _247, _812 * _233));
    float _824 = fma(_809, _241, fma(_813, _248, _812 * _234));
    float _828 = inversesqrt(dot(vec3(_818, _821, _824), vec3(_818, _821, _824)));
    float _829 = _828 * _818;
    float _830 = _828 * _821;
    float _831 = _828 * _824;
    float _3849 = isnan(0.0) ? _799 : (isnan(_799) ? 0.0 : max(_799, 0.0));
    float _832 = isnan(1.0) ? _3849 : (isnan(_3849) ? 1.0 : min(_3849, 1.0));
    float _3860 = isnan(0.0) ? _815 : (isnan(_815) ? 0.0 : max(_815, 0.0));
    float _3871 = isnan(0.0) ? _758 : (isnan(_758) ? 0.0 : max(_758, 0.0));
    float _3882 = isnan(0.0) ? _759 : (isnan(_759) ? 0.0 : max(_759, 0.0));
    float _3893 = isnan(0.0) ? _760 : (isnan(_760) ? 0.0 : max(_760, 0.0));
    float _850 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _892 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _902 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _892);
    float _903 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _892);
    float _904 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _892);
    float _908 = inversesqrt(dot(vec3(_902, _903, _904), vec3(_902, _903, _904)));
    float _909 = _902 * _908;
    float _910 = _903 * _908;
    float _911 = _904 * _908;
    vec4 _916 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _918 = _916.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1072 = sqrt(((_902 * _902) + (_903 * _903)) + (_904 * _904));
        float _1078 = (cbMatDynParam._m0[5u].x * _1072) + cbMatDynParam._m0[5u].y;
        float _3904 = isnan(0.0) ? _1078 : (isnan(_1078) ? 0.0 : max(_1078, 0.0));
        float _1079 = isnan(1.0) ? _3904 : (isnan(_3904) ? 1.0 : min(_3904, 1.0));
        float _1083 = (cbMatDynParam._m0[5u].z * _1072) + cbMatDynParam._m0[5u].w;
        float _3915 = isnan(0.0) ? _1083 : (isnan(_1083) ? 0.0 : max(_1083, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3915 : (isnan(_3915) ? 1.0 : min(_3915, 1.0))) - _1079)) + _1079) < ((_918 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _929 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _930 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _948 = fma(_831, cbSceneParam._m0[5u].z, fma(_830, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _829));
    float _951 = fma(_831, cbSceneParam._m0[6u].z, fma(_830, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _829));
    float _954 = fma(_831, cbSceneParam._m0[7u].z, fma(_830, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _829));
    uint _967 = _272 + 9u;
    uint _968 = _967 + uint(cbMatDynParam._m0[0u].w);
    float _974 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3871 : (isnan(_3871) ? 1.0 : min(_3871, 1.0)))) * cbInstanceData._m0[_968].x;
    float _975 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3882 : (isnan(_3882) ? 1.0 : min(_3882, 1.0)))) * cbInstanceData._m0[_968].y;
    float _976 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3893 : (isnan(_3893) ? 1.0 : min(_3893, 1.0)))) * cbInstanceData._m0[_968].z;
    float _3926 = isnan(0.0) ? _974 : (isnan(_974) ? 0.0 : max(_974, 0.0));
    float _977 = isnan(1.0) ? _3926 : (isnan(_3926) ? 1.0 : min(_3926, 1.0));
    float _3937 = isnan(0.0) ? _975 : (isnan(_975) ? 0.0 : max(_975, 0.0));
    float _978 = isnan(1.0) ? _3937 : (isnan(_3937) ? 1.0 : min(_3937, 1.0));
    float _3948 = isnan(0.0) ? _976 : (isnan(_976) ? 0.0 : max(_976, 0.0));
    float _979 = isnan(1.0) ? _3948 : (isnan(_3948) ? 1.0 : min(_3948, 1.0));
    vec4 _988 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _929, cbSceneParam._m0[86u].y * _930));
    float _992 = ((isnan(1.0) ? _3860 : (isnan(_3860) ? 1.0 : min(_3860, 1.0))) * TEXCOORD_5.w) * _988.x;
    float _993 = dot(vec3(_829, _830, _831), vec3(_909, _910, _911));
    float _996 = _993 * 2.0;
    float _1000 = (_996 * _829) - _909;
    float _1001 = (_996 * _830) - _910;
    float _1002 = (_996 * _831) - _911;
    float _1006 = abs(dot(vec3(_909, _910, _911), vec3(_829, _830, _831)));
    float _3959 = isnan(0.0) ? _1006 : (isnan(_1006) ? 0.0 : max(_1006, 0.0));
    float _1008 = sqrt(_832);
    float _1021 = exp2((_1008 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3959 : (isnan(_3959) ? 1.0 : min(_3959, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1008 * 3.0));
    float _1053 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1057 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1061 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1391;
    float _1393;
    float _1394;
    float _1395;
    float _1396;
    float _1397;
    float _1398;
    float _1399;
    float _1400;
    float _1401;
    float _1402;
    float _1403;
    float _1404;
    float _1405;
    float _1406;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1116 = fma(_1061, cbModelParam._m0[26u].z, fma(_1057, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1053));
        float _1120 = fma(_1061, cbModelParam._m0[27u].z, fma(_1057, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1053));
        float _1124 = fma(_1061, cbModelParam._m0[28u].z, fma(_1057, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1053));
        float _1149 = _1053 + _829;
        float _1150 = _1057 + _830;
        float _1151 = _1061 + _831;
        float _1161 = fma(_1151, cbModelParam._m0[26u].z, fma(_1150, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1149)) - _1116;
        float _1162 = fma(_1151, cbModelParam._m0[27u].z, fma(_1150, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1149)) - _1120;
        float _1163 = fma(_1151, cbModelParam._m0[28u].z, fma(_1150, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1149)) - _1124;
        float _1167 = inversesqrt(dot(vec3(_1161, _1162, _1163), vec3(_1161, _1162, _1163)));
        float _1180 = ((_1167 * _1161) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1116 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1181 = ((_1167 * _1162) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1120 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1182 = ((_1167 * _1163) / cbModelParam._m0[34u].z) + ((((((_1124 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1185 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1180, _1181, _1182), 0.0);
        vec4 _1192 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1180, _1181, _1182), 0.0);
        vec4 _1199 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1180, _1181, _1182), 0.0);
        vec4 _1206 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1180, _1181, _1182), 0.0);
        float _1219 = exp2((_1185.w + (-0.5)) * 20.0) * 2.0;
        float _1220 = _1219 * (_1185.x + (-0.5));
        float _1221 = _1219 * (_1185.y + (-0.5));
        float _1222 = _1219 * (_1185.z + (-0.5));
        float _1229 = exp2((_1192.w + (-0.5)) * 20.0) * 2.0;
        float _1230 = _1229 * (_1192.x + (-0.5));
        float _1231 = _1229 * (_1192.y + (-0.5));
        float _1232 = _1229 * (_1192.z + (-0.5));
        float _1239 = exp2((_1199.w + (-0.5)) * 20.0) * 2.0;
        float _1240 = _1239 * (_1199.x + (-0.5));
        float _1241 = _1239 * (_1199.y + (-0.5));
        float _1242 = _1239 * (_1199.z + (-0.5));
        float _1249 = exp2((_1206.w + (-0.5)) * 20.0) * 2.0;
        float _1250 = _1249 * (_1206.x + (-0.5));
        float _1251 = _1249 * (_1206.y + (-0.5));
        float _1252 = _1249 * (_1206.z + (-0.5));
        float _1253 = isnan(0.0) ? _1250 : (isnan(_1250) ? 0.0 : max(_1250, 0.0));
        float _1254 = isnan(0.0) ? _1251 : (isnan(_1251) ? 0.0 : max(_1251, 0.0));
        float _1255 = isnan(0.0) ? _1252 : (isnan(_1252) ? 0.0 : max(_1252, 0.0));
        float _1256 = _1220 * 0.5;
        float _1257 = _1230 * 0.5;
        float _1258 = _1240 * 0.5;
        float _1259 = dot(vec3(_1256, _1257, _1258), vec3(_1256, _1257, _1258));
        float _1264 = (_1259 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1259);
        float _1273 = (dot(vec3(_829, _830, _831), vec3(_1264 * _1256, _1264 * _1257, _1264 * _1258)) + 1.0) * 0.5;
        float _3985 = isnan(0.0) ? _1273 : (isnan(_1273) ? 0.0 : max(_1273, 0.0));
        float _1283 = sqrt(((_1257 * _1257) + (_1256 * _1256)) + (_1258 * _1258)) / (_1253 + 9.9999997473787516355514526367188e-06);
        float _3996 = isnan(0.0) ? _1283 : (isnan(_1283) ? 0.0 : max(_1283, 0.0));
        float _1284 = isnan(1.0) ? _3996 : (isnan(_3996) ? 1.0 : min(_3996, 1.0));
        float _1285 = _1284 * 2.0;
        float _1289 = (1.0 - _1284) / (_1284 + 1.0);
        float _4007 = isnan(0.0) ? _1289 : (isnan(_1289) ? 0.0 : max(_1289, 0.0));
        float _1290 = isnan(1.0) ? _4007 : (isnan(_4007) ? 1.0 : min(_4007, 1.0));
        float _1299 = ((((1.0 - _1290) * (_1285 + 2.0)) * exp2(log2(isnan(1.0) ? _3985 : (isnan(_3985) ? 1.0 : min(_3985, 1.0))) * (_1285 + 1.0))) + _1290) * _1253;
        float _1300 = _1221 * 0.5;
        float _1301 = _1231 * 0.5;
        float _1302 = _1241 * 0.5;
        float _1303 = dot(vec3(_1300, _1301, _1302), vec3(_1300, _1301, _1302));
        float _1308 = (_1303 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1303);
        float _1316 = (dot(vec3(_829, _830, _831), vec3(_1308 * _1300, _1308 * _1301, _1308 * _1302)) + 1.0) * 0.5;
        float _4018 = isnan(0.0) ? _1316 : (isnan(_1316) ? 0.0 : max(_1316, 0.0));
        float _1325 = sqrt(((_1301 * _1301) + (_1300 * _1300)) + (_1302 * _1302)) / (_1254 + 9.9999997473787516355514526367188e-06);
        float _4029 = isnan(0.0) ? _1325 : (isnan(_1325) ? 0.0 : max(_1325, 0.0));
        float _1326 = isnan(1.0) ? _4029 : (isnan(_4029) ? 1.0 : min(_4029, 1.0));
        float _1327 = _1326 * 2.0;
        float _1331 = (1.0 - _1326) / (_1326 + 1.0);
        float _4040 = isnan(0.0) ? _1331 : (isnan(_1331) ? 0.0 : max(_1331, 0.0));
        float _1332 = isnan(1.0) ? _4040 : (isnan(_4040) ? 1.0 : min(_4040, 1.0));
        float _1341 = ((((1.0 - _1332) * (_1327 + 2.0)) * exp2(log2(isnan(1.0) ? _4018 : (isnan(_4018) ? 1.0 : min(_4018, 1.0))) * (_1327 + 1.0))) + _1332) * _1254;
        float _1342 = _1222 * 0.5;
        float _1343 = _1232 * 0.5;
        float _1344 = _1242 * 0.5;
        float _1345 = dot(vec3(_1342, _1343, _1344), vec3(_1342, _1343, _1344));
        float _1350 = (_1345 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1345);
        float _1358 = (dot(vec3(_829, _830, _831), vec3(_1350 * _1342, _1350 * _1343, _1350 * _1344)) + 1.0) * 0.5;
        float _4051 = isnan(0.0) ? _1358 : (isnan(_1358) ? 0.0 : max(_1358, 0.0));
        float _1367 = sqrt(((_1343 * _1343) + (_1342 * _1342)) + (_1344 * _1344)) / (_1255 + 9.9999997473787516355514526367188e-06);
        float _4062 = isnan(0.0) ? _1367 : (isnan(_1367) ? 0.0 : max(_1367, 0.0));
        float _1368 = isnan(1.0) ? _4062 : (isnan(_4062) ? 1.0 : min(_4062, 1.0));
        float _1369 = _1368 * 2.0;
        float _1373 = (1.0 - _1368) / (_1368 + 1.0);
        float _4073 = isnan(0.0) ? _1373 : (isnan(_1373) ? 0.0 : max(_1373, 0.0));
        float _1374 = isnan(1.0) ? _4073 : (isnan(_4073) ? 1.0 : min(_4073, 1.0));
        float _1383 = ((((1.0 - _1374) * (_1369 + 2.0)) * exp2(log2(isnan(1.0) ? _4051 : (isnan(_4051) ? 1.0 : min(_4051, 1.0))) * (_1369 + 1.0))) + _1374) * _1255;
        _1391 = _1222;
        _1393 = _1221;
        _1394 = _1220;
        _1395 = _1232;
        _1396 = _1231;
        _1397 = _1230;
        _1398 = _1242;
        _1399 = _1241;
        _1400 = _1240;
        _1401 = _1255;
        _1402 = _1254;
        _1403 = _1253;
        _1404 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1299 : (isnan(_1299) ? 0.0 : max(_1299, 0.0)));
        _1405 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1341 : (isnan(_1341) ? 0.0 : max(_1341, 0.0)));
        _1406 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1383 : (isnan(_1383) ? 0.0 : max(_1383, 0.0)));
    }
    else
    {
        _1391 = _1392;
        _1393 = _1392;
        _1394 = _1392;
        _1395 = _1392;
        _1396 = _1392;
        _1397 = _1392;
        _1398 = _1392;
        _1399 = _1392;
        _1400 = _1392;
        _1401 = _1392;
        _1402 = _1392;
        _1403 = _1392;
        _1404 = 0.0;
        _1405 = 0.0;
        _1406 = 0.0;
    }
    float _1702;
    float _1703;
    float _1704;
    float _1705;
    float _1706;
    float _1707;
    float _1708;
    float _1709;
    float _1710;
    float _1711;
    float _1712;
    float _1713;
    float _1714;
    float _1715;
    float _1716;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1433 = fma(_1061, cbModelParam._m0[30u].z, fma(_1057, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1053));
        float _1437 = fma(_1061, cbModelParam._m0[31u].z, fma(_1057, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1053));
        float _1441 = fma(_1061, cbModelParam._m0[32u].z, fma(_1057, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1053));
        float _1464 = _1053 + _829;
        float _1465 = _1057 + _830;
        float _1466 = _1061 + _831;
        float _1476 = fma(_1466, cbModelParam._m0[30u].z, fma(_1465, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1464)) - _1433;
        float _1477 = fma(_1466, cbModelParam._m0[31u].z, fma(_1465, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1464)) - _1437;
        float _1478 = fma(_1466, cbModelParam._m0[32u].z, fma(_1465, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1464)) - _1441;
        float _1482 = inversesqrt(dot(vec3(_1476, _1477, _1478), vec3(_1476, _1477, _1478)));
        float _1495 = ((_1482 * _1476) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1433 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1496 = ((_1482 * _1477) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1437 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1497 = ((_1482 * _1478) / cbModelParam._m0[35u].z) + ((((((_1441 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1499 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1495, _1496, _1497), 0.0);
        vec4 _1506 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1495, _1496, _1497), 0.0);
        vec4 _1513 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1495, _1496, _1497), 0.0);
        vec4 _1520 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1495, _1496, _1497), 0.0);
        float _1532 = exp2((_1499.w + (-0.5)) * 20.0) * 2.0;
        float _1533 = _1532 * (_1499.x + (-0.5));
        float _1534 = _1532 * (_1499.y + (-0.5));
        float _1535 = _1532 * (_1499.z + (-0.5));
        float _1542 = exp2((_1506.w + (-0.5)) * 20.0) * 2.0;
        float _1543 = _1542 * (_1506.x + (-0.5));
        float _1544 = _1542 * (_1506.y + (-0.5));
        float _1545 = _1542 * (_1506.z + (-0.5));
        float _1552 = exp2((_1513.w + (-0.5)) * 20.0) * 2.0;
        float _1553 = _1552 * (_1513.x + (-0.5));
        float _1554 = _1552 * (_1513.y + (-0.5));
        float _1555 = _1552 * (_1513.z + (-0.5));
        float _1562 = exp2((_1520.w + (-0.5)) * 20.0) * 2.0;
        float _1563 = _1562 * (_1520.x + (-0.5));
        float _1564 = _1562 * (_1520.y + (-0.5));
        float _1565 = _1562 * (_1520.z + (-0.5));
        float _1566 = isnan(0.0) ? _1563 : (isnan(_1563) ? 0.0 : max(_1563, 0.0));
        float _1567 = isnan(0.0) ? _1564 : (isnan(_1564) ? 0.0 : max(_1564, 0.0));
        float _1568 = isnan(0.0) ? _1565 : (isnan(_1565) ? 0.0 : max(_1565, 0.0));
        float _1569 = _1533 * 0.5;
        float _1570 = _1543 * 0.5;
        float _1571 = _1553 * 0.5;
        float _1572 = dot(vec3(_1569, _1570, _1571), vec3(_1569, _1570, _1571));
        float _1577 = (_1572 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1572);
        float _1585 = (dot(vec3(_829, _830, _831), vec3(_1577 * _1569, _1577 * _1570, _1577 * _1571)) + 1.0) * 0.5;
        float _4114 = isnan(0.0) ? _1585 : (isnan(_1585) ? 0.0 : max(_1585, 0.0));
        float _1594 = sqrt(((_1570 * _1570) + (_1569 * _1569)) + (_1571 * _1571)) / (_1566 + 9.9999997473787516355514526367188e-06);
        float _4125 = isnan(0.0) ? _1594 : (isnan(_1594) ? 0.0 : max(_1594, 0.0));
        float _1595 = isnan(1.0) ? _4125 : (isnan(_4125) ? 1.0 : min(_4125, 1.0));
        float _1596 = _1595 * 2.0;
        float _1600 = (1.0 - _1595) / (_1595 + 1.0);
        float _4136 = isnan(0.0) ? _1600 : (isnan(_1600) ? 0.0 : max(_1600, 0.0));
        float _1601 = isnan(1.0) ? _4136 : (isnan(_4136) ? 1.0 : min(_4136, 1.0));
        float _1610 = ((((1.0 - _1601) * (_1596 + 2.0)) * exp2(log2(isnan(1.0) ? _4114 : (isnan(_4114) ? 1.0 : min(_4114, 1.0))) * (_1596 + 1.0))) + _1601) * _1566;
        float _1611 = _1534 * 0.5;
        float _1612 = _1544 * 0.5;
        float _1613 = _1554 * 0.5;
        float _1614 = dot(vec3(_1611, _1612, _1613), vec3(_1611, _1612, _1613));
        float _1619 = (_1614 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1614);
        float _1627 = (dot(vec3(_829, _830, _831), vec3(_1619 * _1611, _1619 * _1612, _1619 * _1613)) + 1.0) * 0.5;
        float _4147 = isnan(0.0) ? _1627 : (isnan(_1627) ? 0.0 : max(_1627, 0.0));
        float _1636 = sqrt(((_1612 * _1612) + (_1611 * _1611)) + (_1613 * _1613)) / (_1567 + 9.9999997473787516355514526367188e-06);
        float _4158 = isnan(0.0) ? _1636 : (isnan(_1636) ? 0.0 : max(_1636, 0.0));
        float _1637 = isnan(1.0) ? _4158 : (isnan(_4158) ? 1.0 : min(_4158, 1.0));
        float _1638 = _1637 * 2.0;
        float _1642 = (1.0 - _1637) / (_1637 + 1.0);
        float _4169 = isnan(0.0) ? _1642 : (isnan(_1642) ? 0.0 : max(_1642, 0.0));
        float _1643 = isnan(1.0) ? _4169 : (isnan(_4169) ? 1.0 : min(_4169, 1.0));
        float _1652 = ((((1.0 - _1643) * (_1638 + 2.0)) * exp2(log2(isnan(1.0) ? _4147 : (isnan(_4147) ? 1.0 : min(_4147, 1.0))) * (_1638 + 1.0))) + _1643) * _1567;
        float _1653 = _1535 * 0.5;
        float _1654 = _1545 * 0.5;
        float _1655 = _1555 * 0.5;
        float _1656 = dot(vec3(_1653, _1654, _1655), vec3(_1653, _1654, _1655));
        float _1661 = (_1656 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1656);
        float _1669 = (dot(vec3(_829, _830, _831), vec3(_1661 * _1653, _1661 * _1654, _1661 * _1655)) + 1.0) * 0.5;
        float _4180 = isnan(0.0) ? _1669 : (isnan(_1669) ? 0.0 : max(_1669, 0.0));
        float _1678 = sqrt(((_1654 * _1654) + (_1653 * _1653)) + (_1655 * _1655)) / (_1568 + 9.9999997473787516355514526367188e-06);
        float _4191 = isnan(0.0) ? _1678 : (isnan(_1678) ? 0.0 : max(_1678, 0.0));
        float _1679 = isnan(1.0) ? _4191 : (isnan(_4191) ? 1.0 : min(_4191, 1.0));
        float _1680 = _1679 * 2.0;
        float _1684 = (1.0 - _1679) / (_1679 + 1.0);
        float _4202 = isnan(0.0) ? _1684 : (isnan(_1684) ? 0.0 : max(_1684, 0.0));
        float _1685 = isnan(1.0) ? _4202 : (isnan(_4202) ? 1.0 : min(_4202, 1.0));
        float _1694 = ((((1.0 - _1685) * (_1680 + 2.0)) * exp2(log2(isnan(1.0) ? _4180 : (isnan(_4180) ? 1.0 : min(_4180, 1.0))) * (_1680 + 1.0))) + _1685) * _1568;
        _1702 = _1535;
        _1703 = _1534;
        _1704 = _1533;
        _1705 = _1545;
        _1706 = _1544;
        _1707 = _1543;
        _1708 = _1555;
        _1709 = _1554;
        _1710 = _1553;
        _1711 = _1568;
        _1712 = _1567;
        _1713 = _1566;
        _1714 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1610 : (isnan(_1610) ? 0.0 : max(_1610, 0.0)));
        _1715 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1652 : (isnan(_1652) ? 0.0 : max(_1652, 0.0)));
        _1716 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1694 : (isnan(_1694) ? 0.0 : max(_1694, 0.0)));
    }
    else
    {
        _1702 = _1392;
        _1703 = _1392;
        _1704 = _1392;
        _1705 = _1392;
        _1706 = _1392;
        _1707 = _1392;
        _1708 = _1392;
        _1709 = _1392;
        _1710 = _1392;
        _1711 = _1392;
        _1712 = _1392;
        _1713 = _1392;
        _1714 = 0.0;
        _1715 = 0.0;
        _1716 = 0.0;
    }
    float _1726 = (cbModelParam._m0[1u].x * (_1714 - _1404)) + _1404;
    float _1727 = (cbModelParam._m0[1u].x * (_1715 - _1405)) + _1405;
    float _1728 = (cbModelParam._m0[1u].x * (_1716 - _1406)) + _1406;
    float _1749 = fma(_1728, cbSceneParam._m0[89u].z, fma(_1727, cbSceneParam._m0[89u].y, _1726 * cbSceneParam._m0[89u].x));
    float _1752 = fma(_1728, cbSceneParam._m0[90u].z, fma(_1727, cbSceneParam._m0[90u].y, _1726 * cbSceneParam._m0[90u].x));
    float _1755 = fma(_1728, cbSceneParam._m0[91u].z, fma(_1727, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1726));
    float _1770 = _1000 * 0.5;
    float _1771 = _1001 * 0.5;
    float _1772 = _1002 * 0.5;
    float _1773 = dot(vec4(_1770, _1771, _1772, 1.0), vec4(_1704, _1707, _1710, _1713));
    float _1776 = dot(vec4(_1770, _1771, _1772, 1.0), vec4(_1703, _1706, _1709, _1712));
    float _1779 = dot(vec4(_1770, _1771, _1772, 1.0), vec4(_1702, _1705, _1708, _1711));
    float _1813;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1786 = dot(vec4(_1770, _1771, _1772, 1.0), vec4(_1391, _1395, _1398, _1401));
        float _1790 = dot(vec4(_1770, _1771, _1772, 1.0), vec4(_1393, _1396, _1399, _1402));
        float _1794 = dot(vec4(_1770, _1771, _1772, 1.0), vec4(_1394, _1397, _1400, _1403));
        float _1801 = dot(vec4(cbModelParam._m0[39u]), vec4(_1770, _1771, _1772, 1.0));
        _1813 = dot(vec3(isnan(0.0) ? _1794 : (isnan(_1794) ? 0.0 : max(_1794, 0.0)), isnan(0.0) ? _1790 : (isnan(_1790) ? 0.0 : max(_1790, 0.0)), isnan(0.0) ? _1786 : (isnan(_1786) ? 0.0 : max(_1786, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1801) ? 0.0 : (isnan(0.0) ? _1801 : max(0.0, _1801))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1813 = 1.0;
    }
    float _1824;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1815 = dot(vec4(cbModelParam._m0[40u]), vec4(_1770, _1771, _1772, 1.0));
        _1824 = dot(vec3(isnan(0.0) ? _1773 : (isnan(_1773) ? 0.0 : max(_1773, 0.0)), isnan(0.0) ? _1776 : (isnan(_1776) ? 0.0 : max(_1776, 0.0)), isnan(0.0) ? _1779 : (isnan(_1779) ? 0.0 : max(_1779, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1815) ? 0.0 : (isnan(0.0) ? _1815 : max(0.0, _1815))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1824 = 1.0;
    }
    float _1828 = (_1824 * cbModelParam._m0[1u].x) + (_1813 * (1.0 - cbModelParam._m0[1u].x));
    float _1838 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _832);
    float _1839 = isnan(_1838) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1838 : min(cbModelParam._m0[25u].z, _1838));
    float _1919;
    float _1921;
    float _1923;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1886 = fma(_1061, cbModelParam._m0[13u].z, fma(_1057, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1053)) + cbModelParam._m0[13u].w;
        float _1890 = fma(_1061, cbModelParam._m0[14u].z, fma(_1057, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1053)) + cbModelParam._m0[14u].w;
        float _1894 = fma(_1061, cbModelParam._m0[15u].z, fma(_1057, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1053)) + cbModelParam._m0[15u].w;
        float _1897 = fma(_1002, cbModelParam._m0[13u].z, fma(_1001, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1000));
        float _1900 = fma(_1002, cbModelParam._m0[14u].z, fma(_1001, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1000));
        float _1903 = fma(_1002, cbModelParam._m0[15u].z, fma(_1001, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1000));
        float _1931;
        if (_1897 > 0.0)
        {
            _1931 = abs((1.0 - _1886) / _1897);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1897 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1886 + 1.0) / _1897);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1931 = frontier_phi_17_15_ladder;
        }
        float _2131;
        if (_1900 > 0.0)
        {
            _2131 = abs((1.0 - _1890) / _1900);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1900 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1890 + 1.0) / _1900);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2131 = frontier_phi_26_22_ladder;
        }
        float _2374;
        if (_1903 > 0.0)
        {
            _2374 = abs((1.0 - _1894) / _1903);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1903 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1894 + 1.0) / _1903);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2374 = frontier_phi_38_33_ladder;
        }
        float _2376 = isnan(_2131) ? _1931 : (isnan(_1931) ? _2131 : min(_1931, _2131));
        float _2377 = isnan(_2374) ? _2376 : (isnan(_2376) ? _2374 : min(_2376, _2374));
        float _2381 = (_2377 * _1897) + _1886;
        float _2382 = (_2377 * _1900) + _1890;
        float _2383 = (_2377 * _1903) + _1894;
        float _2384 = _2377 * 9.9999997473787516355514526367188e-05;
        float _2386 = (-1.0) - _2384;
        float _2388 = _2384 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2383 > _2388) || ((_2383 < _2386) || ((_2382 > _2388) || ((_2382 < _2386) || ((_2381 < _2386) || (_2381 > _2388))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2507 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2383, cbModelParam._m0[9u].z, fma(_2382, cbModelParam._m0[9u].y, _2381 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2383, cbModelParam._m0[10u].z, fma(_2382, cbModelParam._m0[10u].y, _2381 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2383, cbModelParam._m0[11u].z, fma(_2382, cbModelParam._m0[11u].y, _2381 * cbModelParam._m0[11u].x))), _1839);
            frontier_phi_16_38_ladder = _2507.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2507.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2507.x * cbModelParam._m0[1u].y;
        }
        _1919 = frontier_phi_16_38_ladder_2;
        _1921 = frontier_phi_16_38_ladder_1;
        _1923 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1907 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1000, _1001, _1002), _1839);
        _1919 = _1907.x * cbModelParam._m0[1u].y;
        _1921 = _1907.y * cbModelParam._m0[1u].y;
        _1923 = _1907.z * cbModelParam._m0[1u].y;
    }
    float _1927 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _832);
    float _1928 = isnan(_1927) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1927 : min(cbModelParam._m0[25u].w, _1927));
    float _2017;
    float _2019;
    float _2021;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1981 = fma(_1061, cbModelParam._m0[21u].z, fma(_1057, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1053)) + cbModelParam._m0[21u].w;
        float _1985 = fma(_1061, cbModelParam._m0[22u].z, fma(_1057, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1053)) + cbModelParam._m0[22u].w;
        float _1989 = fma(_1061, cbModelParam._m0[23u].z, fma(_1057, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1053)) + cbModelParam._m0[23u].w;
        float _1992 = fma(_1002, cbModelParam._m0[21u].z, fma(_1001, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1000));
        float _1995 = fma(_1002, cbModelParam._m0[22u].z, fma(_1001, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1000));
        float _1998 = fma(_1002, cbModelParam._m0[23u].z, fma(_1001, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1000));
        float _2136;
        if (_1992 > 0.0)
        {
            _2136 = abs((1.0 - _1981) / _1992);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1992 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1981 + 1.0) / _1992);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2136 = frontier_phi_28_24_ladder;
        }
        float _2401;
        if (_1995 > 0.0)
        {
            _2401 = abs((1.0 - _1985) / _1995);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1995 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1985 + 1.0) / _1995);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2401 = frontier_phi_40_35_ladder;
        }
        float _2606;
        if (_1998 > 0.0)
        {
            _2606 = abs((1.0 - _1989) / _1998);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1998 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1989 + 1.0) / _1998);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2606 = frontier_phi_49_46_ladder;
        }
        float _2608 = isnan(_2401) ? _2136 : (isnan(_2136) ? _2401 : min(_2136, _2401));
        float _2609 = isnan(_2606) ? _2608 : (isnan(_2608) ? _2606 : min(_2608, _2606));
        float _2613 = (_2609 * _1992) + _1981;
        float _2614 = (_2609 * _1995) + _1985;
        float _2615 = (_2609 * _1998) + _1989;
        float _2616 = _2609 * 9.9999997473787516355514526367188e-05;
        float _2617 = (-1.0) - _2616;
        float _2619 = _2616 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2615 > _2619) || ((_2615 < _2617) || ((_2614 > _2619) || ((_2614 < _2617) || ((_2613 < _2617) || (_2613 > _2619))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2814 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2615, cbModelParam._m0[17u].z, fma(_2614, cbModelParam._m0[17u].y, _2613 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2615, cbModelParam._m0[18u].z, fma(_2614, cbModelParam._m0[18u].y, _2613 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2615, cbModelParam._m0[19u].z, fma(_2614, cbModelParam._m0[19u].y, _2613 * cbModelParam._m0[19u].x))), _1928);
            frontier_phi_25_49_ladder = _2814.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2814.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2814.x * cbModelParam._m0[1u].z;
        }
        _2017 = frontier_phi_25_49_ladder_2;
        _2019 = frontier_phi_25_49_ladder_1;
        _2021 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _2001 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1000, _1001, _1002), _1928);
        _2017 = _2001.x * cbModelParam._m0[1u].z;
        _2019 = _2001.y * cbModelParam._m0[1u].z;
        _2021 = _2001.z * cbModelParam._m0[1u].z;
    }
    float _2033 = ((((1.0 - _1021) * ((_1008 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_1021 * _1008)) * _992;
    float _2034 = _2033 * ((cbModelParam._m0[1u].w * (_2017 - _1919)) + _1919);
    float _2035 = _2033 * ((cbModelParam._m0[1u].w * (_2019 - _1921)) + _1921);
    float _2036 = _2033 * ((cbModelParam._m0[1u].w * (_2021 - _1923)) + _1923);
    float _2039 = fma(_2036, cbSceneParam._m0[89u].z, fma(_2035, cbSceneParam._m0[89u].y, _2034 * cbSceneParam._m0[89u].x));
    float _2042 = fma(_2036, cbSceneParam._m0[90u].z, fma(_2035, cbSceneParam._m0[90u].y, _2034 * cbSceneParam._m0[90u].x));
    float _2045 = fma(_2036, cbSceneParam._m0[91u].z, fma(_2035, cbSceneParam._m0[91u].y, _2034 * cbSceneParam._m0[91u].x));
    uvec4 _2055 = floatBitsToUint(cbInstanceData._m0[_272 + 5u]);
    uint _2057 = _2055.x * 14u;
    uint _2058 = _2057 + 13u;
    float _2065 = _992 + (-1.0);
    float _2070 = (cbLight._m0[_2058].x * _2065) + 1.0;
    float _2071 = (cbLight._m0[_2058].y * _2065) + 1.0;
    float _2072 = (cbLight._m0[_2058].z * _2065) + 1.0;
    float _2073 = (cbLight._m0[_2058].w * _2065) + 1.0;
    uint _2074 = _2057 + 5u;
    float _2080 = isnan(1.0) ? _2071 : (isnan(_2071) ? 1.0 : min(_2071, 1.0));
    uint _2084 = _2057 + 4u;
    float _2090 = isnan(1.0) ? _2070 : (isnan(_2070) ? 1.0 : min(_2070, 1.0));
    uint _2094 = _2057 | 1u;
    float _2105 = dot(vec3(cbLight._m0[_2057].xyz), vec3(_829, _830, _831));
    float _2108 = dot(vec3(cbLight._m0[_2094].xyz), vec3(_829, _830, _831));
    float _4338 = isnan(0.0) ? _2105 : (isnan(_2105) ? 0.0 : max(_2105, 0.0));
    float _4349 = isnan(0.0) ? _2108 : (isnan(_2108) ? 0.0 : max(_2108, 0.0));
    float _2113 = (isnan(1.0) ? _4338 : (isnan(_4338) ? 1.0 : min(_4338, 1.0))) * 0.3183098733425140380859375;
    float _2115 = (isnan(1.0) ? _4349 : (isnan(_4349) ? 1.0 : min(_4349, 1.0))) * 0.3183098733425140380859375;
    float _2122 = ((cbLight._m0[_2074].x * _2080) * _2115) + ((cbLight._m0[_2084].x * _2090) * _2113);
    float _2123 = ((_2080 * cbLight._m0[_2074].y) * _2115) + ((_2090 * cbLight._m0[_2084].y) * _2113);
    float _2124 = ((_2080 * cbLight._m0[_2074].z) * _2115) + ((_2090 * cbLight._m0[_2084].z) * _2113);
    uvec4 _2128 = floatBitsToUint(cbLight._m0[_2057 + 12u]);
    bool _2130 = _2128.x == 0u;
    float _2141;
    float _2143;
    float _2145;
    if (_2130)
    {
        _2141 = _2122;
        _2143 = _2123;
        _2145 = _2124;
    }
    else
    {
        uint _2149 = _2057 + 6u;
        float _2165 = (dot(vec3(cbLight._m0[_2057 + 2u].xyz), vec3(_829, _830, _831)) * 0.5) + 0.5;
        float _2166 = _2165 * _2165;
        float _4360 = isnan(0.0) ? _2166 : (isnan(_2166) ? 0.0 : max(_2166, 0.0));
        float _2167 = isnan(1.0) ? _4360 : (isnan(_4360) ? 1.0 : min(_4360, 1.0));
        float _2168 = isnan(1.0) ? _2072 : (isnan(_2072) ? 1.0 : min(_2072, 1.0));
        _2141 = (((cbLight._m0[_2149].x * 0.3183098733425140380859375) * _2167) * _2168) + _2122;
        _2143 = (((cbLight._m0[_2149].y * 0.3183098733425140380859375) * _2167) * _2168) + _2123;
        _2145 = (((cbLight._m0[_2149].z * 0.3183098733425140380859375) * _2167) * _2168) + _2124;
    }
    bool _2148 = _2128.y == 0u;
    float _2186;
    float _2188;
    float _2190;
    if (_2148)
    {
        _2186 = _2141;
        _2188 = _2143;
        _2190 = _2145;
    }
    else
    {
        uint _2345 = _2057 + 7u;
        float _2361 = (dot(vec3(cbLight._m0[_2057 + 3u].xyz), vec3(_829, _830, _831)) * 0.5) + 0.5;
        float _2362 = _2361 * _2361;
        float _4376 = isnan(0.0) ? _2362 : (isnan(_2362) ? 0.0 : max(_2362, 0.0));
        float _2363 = isnan(1.0) ? _4376 : (isnan(_4376) ? 1.0 : min(_4376, 1.0));
        float _2364 = isnan(1.0) ? _2073 : (isnan(_2073) ? 1.0 : min(_2073, 1.0));
        _2186 = (((cbLight._m0[_2345].x * 0.3183098733425140380859375) * _2363) * _2364) + _2141;
        _2188 = (((cbLight._m0[_2345].y * 0.3183098733425140380859375) * _2363) * _2364) + _2143;
        _2190 = (((cbLight._m0[_2345].z * 0.3183098733425140380859375) * _2363) * _2364) + _2145;
    }
    uint _2193 = _2057 + 8u;
    float _2206 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2057].w)) * _832) * 0.949999988079071044921875);
    float _2207 = _2206 * _2206;
    float _2208 = cbLight._m0[_2057].x + _909;
    float _2209 = cbLight._m0[_2057].y + _910;
    float _2210 = cbLight._m0[_2057].z + _911;
    float _2214 = inversesqrt(dot(vec3(_2208, _2209, _2210), vec3(_2208, _2209, _2210)));
    float _2215 = _2214 * _2208;
    float _2216 = _2214 * _2209;
    float _2217 = _2214 * _2210;
    float _2218 = dot(vec3(_829, _830, _831), vec3(cbLight._m0[_2057].xyz));
    float _4392 = isnan(0.0) ? _2218 : (isnan(_2218) ? 0.0 : max(_2218, 0.0));
    float _2221 = isnan(1.0) ? _4392 : (isnan(_4392) ? 1.0 : min(_4392, 1.0));
    float _4403 = isnan(0.0) ? _993 : (isnan(_993) ? 0.0 : max(_993, 0.0));
    float _2222 = isnan(1.0) ? _4403 : (isnan(_4403) ? 1.0 : min(_4403, 1.0));
    float _2223 = dot(vec3(_829, _830, _831), vec3(_2215, _2216, _2217));
    float _4414 = isnan(0.0) ? _2223 : (isnan(_2223) ? 0.0 : max(_2223, 0.0));
    float _2226 = isnan(1.0) ? _4414 : (isnan(_4414) ? 1.0 : min(_4414, 1.0));
    float _2227 = dot(vec3(cbLight._m0[_2057].xyz), vec3(_2215, _2216, _2217));
    float _4425 = isnan(0.0) ? _2227 : (isnan(_2227) ? 0.0 : max(_2227, 0.0));
    float _2231 = _2207 * _2207;
    float _2235 = ((_2226 * _2226) * (_2231 + (-1.0))) + 1.0;
    float _2246 = (exp2(log2(1.0 - (isnan(1.0) ? _4425 : (isnan(_4425) ? 1.0 : min(_4425, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2247 = 1.0 - _2207;
    float _2258 = (0.5 / (((_2222 * ((_2221 * _2247) + _2207)) + 9.9999999392252902907785028219223e-09) + (((_2222 * _2247) + _2207) * _2221))) * _2221;
    float _4436 = isnan(0.0) ? _2258 : (isnan(_2258) ? 0.0 : max(_2258, 0.0));
    float _2260 = (isnan(1.0) ? _4436 : (isnan(_4436) ? 1.0 : min(_4436, 1.0))) * (_2231 / ((_2235 * _2235) * 3.141590118408203125));
    uint _2271 = _2057 + 9u;
    float _2282 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2094].w)) * _832) * 0.949999988079071044921875);
    float _2283 = _2282 * _2282;
    float _2284 = cbLight._m0[_2094].x + _909;
    float _2285 = cbLight._m0[_2094].y + _910;
    float _2286 = cbLight._m0[_2094].z + _911;
    float _2290 = inversesqrt(dot(vec3(_2284, _2285, _2286), vec3(_2284, _2285, _2286)));
    float _2291 = _2290 * _2284;
    float _2292 = _2290 * _2285;
    float _2293 = _2290 * _2286;
    float _2294 = dot(vec3(_829, _830, _831), vec3(cbLight._m0[_2094].xyz));
    float _4447 = isnan(0.0) ? _2294 : (isnan(_2294) ? 0.0 : max(_2294, 0.0));
    float _2297 = isnan(1.0) ? _4447 : (isnan(_4447) ? 1.0 : min(_4447, 1.0));
    float _2298 = dot(vec3(_829, _830, _831), vec3(_2291, _2292, _2293));
    float _4458 = isnan(0.0) ? _2298 : (isnan(_2298) ? 0.0 : max(_2298, 0.0));
    float _2301 = isnan(1.0) ? _4458 : (isnan(_4458) ? 1.0 : min(_4458, 1.0));
    float _2302 = dot(vec3(cbLight._m0[_2094].xyz), vec3(_2291, _2292, _2293));
    float _4469 = isnan(0.0) ? _2302 : (isnan(_2302) ? 0.0 : max(_2302, 0.0));
    float _2306 = _2283 * _2283;
    float _2310 = ((_2301 * _2301) * (_2306 + (-1.0))) + 1.0;
    float _2319 = (exp2(log2(1.0 - (isnan(1.0) ? _4469 : (isnan(_4469) ? 1.0 : min(_4469, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2320 = 1.0 - _2283;
    float _2330 = (0.5 / (((_2222 * ((_2297 * _2320) + _2283)) + 9.9999999392252902907785028219223e-09) + (((_2222 * _2320) + _2283) * _2297))) * _2297;
    float _4480 = isnan(0.0) ? _2330 : (isnan(_2330) ? 0.0 : max(_2330, 0.0));
    float _2332 = (isnan(1.0) ? _4480 : (isnan(_4480) ? 1.0 : min(_4480, 1.0))) * (_2306 / ((_2310 * _2310) * 3.141590118408203125));
    float _2342 = (((_2319 * cbLight._m0[_2271].x) * _2332) * _2080) + (((_2246 * cbLight._m0[_2193].x) * _2260) * _2090);
    float _2343 = (((_2319 * cbLight._m0[_2271].y) * _2332) * _2080) + (((_2246 * cbLight._m0[_2193].y) * _2260) * _2090);
    float _2344 = (((_2319 * cbLight._m0[_2271].z) * _2332) * _2080) + (((_2246 * cbLight._m0[_2193].z) * _2260) * _2090);
    float _2406;
    float _2408;
    float _2410;
    if (_2130)
    {
        _2406 = _2342;
        _2408 = _2343;
        _2410 = _2344;
    }
    else
    {
        uint _2412 = _2057 + 2u;
        uint _2416 = _2057 + 10u;
        float _2430 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2412].w)) * _832) * 0.949999988079071044921875);
        float _2431 = _2430 * _2430;
        float _2432 = cbLight._m0[_2412].x + _909;
        float _2433 = cbLight._m0[_2412].y + _910;
        float _2434 = cbLight._m0[_2412].z + _911;
        float _2438 = inversesqrt(dot(vec3(_2432, _2433, _2434), vec3(_2432, _2433, _2434)));
        float _2439 = _2438 * _2432;
        float _2440 = _2438 * _2433;
        float _2441 = _2438 * _2434;
        float _2442 = dot(vec3(_829, _830, _831), vec3(cbLight._m0[_2412].xyz));
        float _4491 = isnan(0.0) ? _2442 : (isnan(_2442) ? 0.0 : max(_2442, 0.0));
        float _2445 = isnan(1.0) ? _4491 : (isnan(_4491) ? 1.0 : min(_4491, 1.0));
        float _2446 = dot(vec3(_829, _830, _831), vec3(_2439, _2440, _2441));
        float _4502 = isnan(0.0) ? _2446 : (isnan(_2446) ? 0.0 : max(_2446, 0.0));
        float _2449 = isnan(1.0) ? _4502 : (isnan(_4502) ? 1.0 : min(_4502, 1.0));
        float _2450 = dot(vec3(cbLight._m0[_2412].xyz), vec3(_2439, _2440, _2441));
        float _4513 = isnan(0.0) ? _2450 : (isnan(_2450) ? 0.0 : max(_2450, 0.0));
        float _2454 = _2431 * _2431;
        float _2458 = ((_2449 * _2449) * (_2454 + (-1.0))) + 1.0;
        float _2467 = (exp2(log2(1.0 - (isnan(1.0) ? _4513 : (isnan(_4513) ? 1.0 : min(_4513, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2468 = 1.0 - _2431;
        float _2478 = (0.5 / (((_2222 * ((_2445 * _2468) + _2431)) + 9.9999999392252902907785028219223e-09) + (((_2222 * _2468) + _2431) * _2445))) * _2445;
        float _4524 = isnan(0.0) ? _2478 : (isnan(_2478) ? 0.0 : max(_2478, 0.0));
        float _2480 = (isnan(1.0) ? _4524 : (isnan(_4524) ? 1.0 : min(_4524, 1.0))) * (_2454 / ((_2458 * _2458) * 3.141590118408203125));
        float _2481 = isnan(1.0) ? _2072 : (isnan(_2072) ? 1.0 : min(_2072, 1.0));
        _2406 = (((_2467 * cbLight._m0[_2416].x) * _2480) * _2481) + _2342;
        _2408 = (((_2467 * cbLight._m0[_2416].y) * _2480) * _2481) + _2343;
        _2410 = (((_2467 * cbLight._m0[_2416].z) * _2480) * _2481) + _2344;
    }
    float _2516;
    float _2518;
    float _2520;
    if (_2148)
    {
        _2516 = _2406;
        _2518 = _2408;
        _2520 = _2410;
    }
    else
    {
        uint _2527 = _2057 + 3u;
        uint _2531 = _2057 + 11u;
        float _2545 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2527].w)) * _832) * 0.949999988079071044921875);
        float _2546 = _2545 * _2545;
        float _2547 = cbLight._m0[_2527].x + _909;
        float _2548 = cbLight._m0[_2527].y + _910;
        float _2549 = cbLight._m0[_2527].z + _911;
        float _2553 = inversesqrt(dot(vec3(_2547, _2548, _2549), vec3(_2547, _2548, _2549)));
        float _2554 = _2553 * _2547;
        float _2555 = _2553 * _2548;
        float _2556 = _2553 * _2549;
        float _2557 = dot(vec3(_829, _830, _831), vec3(cbLight._m0[_2527].xyz));
        float _4540 = isnan(0.0) ? _2557 : (isnan(_2557) ? 0.0 : max(_2557, 0.0));
        float _2560 = isnan(1.0) ? _4540 : (isnan(_4540) ? 1.0 : min(_4540, 1.0));
        float _2561 = dot(vec3(_829, _830, _831), vec3(_2554, _2555, _2556));
        float _4551 = isnan(0.0) ? _2561 : (isnan(_2561) ? 0.0 : max(_2561, 0.0));
        float _2564 = isnan(1.0) ? _4551 : (isnan(_4551) ? 1.0 : min(_4551, 1.0));
        float _2565 = dot(vec3(cbLight._m0[_2527].xyz), vec3(_2554, _2555, _2556));
        float _4562 = isnan(0.0) ? _2565 : (isnan(_2565) ? 0.0 : max(_2565, 0.0));
        float _2569 = _2546 * _2546;
        float _2573 = ((_2564 * _2564) * (_2569 + (-1.0))) + 1.0;
        float _2582 = (exp2(log2(1.0 - (isnan(1.0) ? _4562 : (isnan(_4562) ? 1.0 : min(_4562, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2583 = 1.0 - _2546;
        float _2593 = (0.5 / (((_2222 * ((_2560 * _2583) + _2546)) + 9.9999999392252902907785028219223e-09) + (((_2222 * _2583) + _2546) * _2560))) * _2560;
        float _4573 = isnan(0.0) ? _2593 : (isnan(_2593) ? 0.0 : max(_2593, 0.0));
        float _2595 = (isnan(1.0) ? _4573 : (isnan(_4573) ? 1.0 : min(_4573, 1.0))) * (_2569 / ((_2573 * _2573) * 3.141590118408203125));
        float _2596 = isnan(1.0) ? _2073 : (isnan(_2073) ? 1.0 : min(_2073, 1.0));
        _2516 = (((_2582 * cbLight._m0[_2531].x) * _2595) * _2596) + _2406;
        _2518 = (((_2582 * cbLight._m0[_2531].y) * _2595) * _2596) + _2408;
        _2520 = (((_2582 * cbLight._m0[_2531].z) * _2595) * _2596) + _2410;
    }
    float _2731;
    float _2733;
    float _2735;
    float _2737;
    float _2739;
    float _2741;
    if (_2055.y == 0u)
    {
        float _2671 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2672 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2671;
        float _2673 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2671;
        float _2674 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2671;
        uvec4 _2686 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2687 = _2686.x;
        uint _2698 = uint((float(_2686.y) * floor(float(uint(cbSceneParam._m0[85u].y * _930) / _2687))) + floor(float(uint(cbSceneParam._m0[85u].x * _929) / _2687)));
        float _2708 = (log2(_2674 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2709 = isnan(0.0) ? _2708 : (isnan(_2708) ? 0.0 : max(_2708, 0.0));
        uint _2712 = uint(isnan(14.0) ? _2709 : (isnan(_2709) ? 14.0 : min(_2709, 14.0)));
        uvec4 _2717 = texelFetch(g_lightClusterGridBuffer, int(((_2712 << 2u) + (_2698 << 6u)) >> 2u));
        uint _2718 = _2717.x;
        uint _2719 = _2686.z;
        float _2819;
        float _2821;
        float _2823;
        float _2825;
        float _2827;
        float _2829;
        if (((((1u << ((_2719 >> 4u) & 15u)) + 4294967295u) & _2718) == 0u) || ((_2719 & 240u) == 0u))
        {
            _2819 = 0.0;
            _2821 = 0.0;
            _2823 = 0.0;
            _2825 = 0.0;
            _2827 = 0.0;
            _2829 = 0.0;
        }
        else
        {
            float _2820;
            float _2822;
            float _2824;
            float _2826;
            float _2828;
            float _2830;
            float _2972 = 0.0;
            float _2973 = 0.0;
            float _2974 = 0.0;
            float _2975 = 0.0;
            float _2976 = 0.0;
            float _2977 = 0.0;
            uint _2978 = 0u;
            uint _2987;
            bool _2988;
            for (;;)
            {
                _2987 = texelFetch(g_lightClassification, int((((_2712 << 5u) + (_2698 << 9u)) + (_2978 << 2u)) >> 2u)).x;
                _2988 = _2987 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2988)
                {
                    frontier_phi_66_pred = _2972;
                    frontier_phi_66_pred_1 = _2977;
                    frontier_phi_66_pred_2 = _2976;
                    frontier_phi_66_pred_3 = _2975;
                    frontier_phi_66_pred_4 = _2974;
                    frontier_phi_66_pred_5 = _2973;
                }
                else
                {
                    float _3117;
                    float _3118;
                    float _3119;
                    float _3120;
                    float _3121;
                    float _3122;
                    uint _3123;
                    _3117 = _2972;
                    _3118 = _2973;
                    _3119 = _2974;
                    _3120 = _2975;
                    _3121 = _2976;
                    _3122 = _2977;
                    _3123 = _2987;
                    float _3044;
                    float _3045;
                    float _3046;
                    float _3047;
                    float _3048;
                    float _3049;
                    for (;;)
                    {
                        uint _3127 = uint(findLSB(_3123)) + (_2978 << 5u);
                        uint _3124 = (_3123 + 4294967295u) & _3123;
                        uint _3129 = _3127 * 48u;
                        vec4 _3143 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3129)).x, texelFetch(g_PointLightRenderingBuffer, int(_3129 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3129 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3129 + 3u)).x));
                        uint _3149 = (_3127 * 48u) + 4u;
                        vec4 _3162 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3149)).x, texelFetch(g_PointLightRenderingBuffer, int(_3149 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3149 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3149 + 3u)).x));
                        uint _3168 = (_3127 * 48u) + 8u;
                        vec3 _3179 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3168)).x, texelFetch(g_PointLightRenderingBuffer, int(_3168 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3168 + 2u)).x));
                        float _3183 = _3143.x - _2672;
                        float _3184 = _3143.y - _2673;
                        float _3185 = _3143.z - _2674;
                        float _3186 = dot(vec3(_3183, _3184, _3185), vec3(_3183, _3184, _3185));
                        float _3189 = inversesqrt(_3186);
                        float _3190 = _3189 * _3183;
                        float _3191 = _3189 * _3184;
                        float _3192 = _3189 * _3185;
                        float _3193 = dot(vec3(_948, _951, _954), vec3(_3190, _3191, _3192));
                        float _3198 = 1.0 - (_3186 * _3143.w);
                        float _4599 = isnan(0.0) ? _3198 : (isnan(_3198) ? 0.0 : max(_3198, 0.0));
                        float _3199 = isnan(1.0) ? _4599 : (isnan(_4599) ? 1.0 : min(_4599, 1.0));
                        float _3200 = sqrt(_3186) * _3162.w;
                        float _3203 = 1.39999997615814208984375 / (_3200 + 1.39999997615814208984375);
                        float _3204 = _3203 * _3203;
                        float _3207 = ((1.0 - _3204) * _3193) + _3204;
                        float _3210 = _3200 * _3200;
                        float _3214 = ((isnan(0.0) ? _3207 : (isnan(_3207) ? 0.0 : max(_3207, 0.0))) * _3199) / ((_3210 * 0.699999988079071044921875) + 1.0);
                        float _3218 = (-0.0) - _2672;
                        float _3219 = (-0.0) - _2673;
                        float _3220 = (-0.0) - _2674;
                        float _3224 = inversesqrt(dot(vec3(_3218, _3219, _3220), vec3(_3218, _3219, _3220)));
                        float _3225 = _3224 * _3218;
                        float _3226 = _3224 * _3219;
                        float _3227 = _3224 * _3220;
                        float _3235 = exp2(log2(1.0 / ((_3210 * 3.5) + 5.0)) * 0.25);
                        float _3236 = 1.0 - _1008;
                        float _3243 = sqrt(1.0 - ((1.0 - (_3236 * _3236)) * (1.0 - (_3235 * _3235))));
                        float _3244 = _3243 * _3243;
                        float _3245 = _3244 * _3244;
                        float _3246 = _3225 + _3190;
                        float _3247 = _3226 + _3191;
                        float _3248 = _3227 + _3192;
                        float _3252 = inversesqrt(dot(vec3(_3246, _3247, _3248), vec3(_3246, _3247, _3248)));
                        float _3256 = dot(vec3(_948, _951, _954), vec3(_3225, _3226, _3227));
                        float _4615 = isnan(0.0) ? _3256 : (isnan(_3256) ? 0.0 : max(_3256, 0.0));
                        float _3259 = isnan(1.0) ? _4615 : (isnan(_4615) ? 1.0 : min(_4615, 1.0));
                        float _3260 = dot(vec3(_948, _951, _954), vec3(_3252 * _3246, _3252 * _3247, _3252 * _3248));
                        float _4626 = isnan(0.0) ? _3260 : (isnan(_3260) ? 0.0 : max(_3260, 0.0));
                        float _3263 = isnan(1.0) ? _4626 : (isnan(_4626) ? 1.0 : min(_4626, 1.0));
                        float _3267 = ((_3263 * _3263) * (_3245 + (-1.0))) + 1.0;
                        float _3268 = _3203 * _3244;
                        float _3269 = _3268 * _3268;
                        float _3272 = ((1.0 - _3269) * _3193) + _3269;
                        float _4637 = isnan(0.0) ? _3272 : (isnan(_3272) ? 0.0 : max(_3272, 0.0));
                        float _3273 = isnan(1.0) ? _4637 : (isnan(_4637) ? 1.0 : min(_4637, 1.0));
                        float _3274 = 1.0 - _3244;
                        float _3284 = (0.5 / (((_3273 * ((_3259 * _3274) + _3244)) + 9.9999999392252902907785028219223e-09) + (((_3273 * _3274) + _3244) * _3259))) * _3273;
                        float _4648 = isnan(0.0) ? _3284 : (isnan(_3284) ? 0.0 : max(_3284, 0.0));
                        float _3295 = (((_3245 * 3.1415927410125732421875) * (isnan(1.0) ? _4648 : (isnan(_4648) ? 1.0 : min(_4648, 1.0)))) / ((_3267 * _3267) * ((_3210 * 2.1991131305694580078125) + 3.141590118408203125))) * _3199;
                        _3047 = (_3214 * _3162.x) + _3120;
                        _3048 = (_3214 * _3162.y) + _3121;
                        _3049 = (_3214 * _3162.z) + _3122;
                        _3044 = (_3295 * _3179.x) + _3117;
                        _3045 = (_3295 * _3179.y) + _3118;
                        _3046 = (_3295 * _3179.z) + _3119;
                        if (_3124 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3117 = _3044;
                            _3118 = _3045;
                            _3119 = _3046;
                            _3120 = _3047;
                            _3121 = _3048;
                            _3122 = _3049;
                            _3123 = _3124;
                        }
                    }
                    frontier_phi_66_pred = _3044;
                    frontier_phi_66_pred_1 = _3049;
                    frontier_phi_66_pred_2 = _3048;
                    frontier_phi_66_pred_3 = _3047;
                    frontier_phi_66_pred_4 = _3046;
                    frontier_phi_66_pred_5 = _3045;
                }
                _2820 = frontier_phi_66_pred;
                _2830 = frontier_phi_66_pred_1;
                _2828 = frontier_phi_66_pred_2;
                _2826 = frontier_phi_66_pred_3;
                _2824 = frontier_phi_66_pred_4;
                _2822 = frontier_phi_66_pred_5;
                uint _2979 = _2978 + 1u;
                if (_2979 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2972 = _2820;
                    _2973 = _2822;
                    _2974 = _2824;
                    _2975 = _2826;
                    _2976 = _2828;
                    _2977 = _2830;
                    _2978 = _2979;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2819 = _2820;
            _2821 = _2822;
            _2823 = _2824;
            _2825 = _2826;
            _2827 = _2828;
            _2829 = _2830;
        }
        uvec4 _2833 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2834 = _2833.z;
        uint _2836 = (_2834 >> 8u) & 15u;
        float _2940;
        float _2942;
        float _2944;
        float _2946;
        float _2948;
        float _2950;
        if (((4294967295u << _2836) & _2718) == 0u)
        {
            _2940 = _2819;
            _2942 = _2821;
            _2944 = _2823;
            _2946 = _2825;
            _2948 = _2827;
            _2950 = _2829;
        }
        else
        {
            float _2965 = inversesqrt(dot(vec3(_2672, _2673, _2674), vec3(_2672, _2673, _2674)));
            float _2966 = _2965 * _2672;
            float _2967 = _2965 * _2673;
            float _2968 = _2965 * _2674;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2836 < ((_2834 >> 12u) & 15u))
            {
                float _2941;
                float _2943;
                float _2945;
                float _2947;
                float _2949;
                float _2951;
                float _3100 = _2819;
                float _3101 = _2821;
                float _3102 = _2823;
                float _3103 = _2825;
                float _3104 = _2827;
                float _3105 = _2829;
                uint _3106 = _2836;
                uint _3115;
                bool _3116;
                for (;;)
                {
                    _3115 = texelFetch(g_lightClassification, int((((_2712 << 5u) + (_2698 << 9u)) + (_3106 << 2u)) >> 2u)).x;
                    _3116 = _3115 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_3116)
                    {
                        frontier_phi_77_pred = _3105;
                        frontier_phi_77_pred_1 = _3104;
                        frontier_phi_77_pred_2 = _3103;
                        frontier_phi_77_pred_3 = _3102;
                        frontier_phi_77_pred_4 = _3101;
                        frontier_phi_77_pred_5 = _3100;
                    }
                    else
                    {
                        float _3309;
                        float _3310;
                        float _3311;
                        float _3312;
                        float _3313;
                        float _3314;
                        float _3602;
                        float _3603;
                        float _3604;
                        float _3605;
                        float _3606;
                        float _3607;
                        float _3322 = _3100;
                        float _3323 = _3101;
                        float _3324 = _3102;
                        float _3325 = _3103;
                        float _3326 = _3104;
                        float _3327 = _3105;
                        uint _3328 = _3115;
                        uint _3329;
                        vec4 _3354;
                        float _3355;
                        vec4 _3370;
                        vec3 _3382;
                        vec4 _3397;
                        vec4 _3412;
                        float _3458;
                        bool _3459;
                        for (;;)
                        {
                            uint _3339 = ((_3106 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3328));
                            _3329 = (_3328 + 4294967295u) & _3328;
                            uint _3341 = _3339 * 40u;
                            _3354 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3341)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3341 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3341 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3341 + 3u)).x));
                            _3355 = _3354.w;
                            uint _3357 = (_3339 * 40u) + 4u;
                            _3370 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3357)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3357 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3357 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3357 + 3u)).x));
                            uint _3372 = (_3339 * 40u) + 8u;
                            _3382 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3372)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3372 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3372 + 2u)).x));
                            uint _3384 = (_3339 * 40u) + 16u;
                            _3397 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3384)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3384 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3384 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3384 + 3u)).x));
                            uint _3399 = (_3339 * 40u) + 20u;
                            _3412 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3399)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3399 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3399 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3399 + 3u)).x));
                            uint _3414 = (_3339 * 40u) + 24u;
                            vec4 _3427 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3414)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3414 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3414 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3414 + 3u)).x));
                            uint _3433 = (_3339 * 40u) + 28u;
                            vec4 _3446 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3433)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3433 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3433 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3433 + 3u)).x));
                            _3458 = fma(_2674, _3446.z, fma(_2673, _3446.y, _3446.x * _2672)) + _3446.w;
                            _3459 = !((fma(_2674, _3427.z, fma(_2673, _3427.y, _3427.x * _2672)) + _3427.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3459)
                            {
                                float _3486 = _3354.x - _2672;
                                float _3487 = _3354.y - _2673;
                                float _3488 = _3354.z - _2674;
                                float _3489 = dot(vec3(_3486, _3487, _3488), vec3(_3486, _3487, _3488));
                                float _3492 = inversesqrt(_3489);
                                float _3493 = _3492 * _3486;
                                float _3494 = _3492 * _3487;
                                float _3495 = _3492 * _3488;
                                float _3499 = 1.0 - (_3489 / (_3355 * _3355));
                                float _4659 = isnan(0.0) ? _3499 : (isnan(_3499) ? 0.0 : max(_3499, 0.0));
                                float _3500 = isnan(1.0) ? _4659 : (isnan(_4659) ? 1.0 : min(_4659, 1.0));
                                float _3504 = sqrt(_3489) * _3370.w;
                                float _3506 = 1.39999997615814208984375 / (_3504 + 1.39999997615814208984375);
                                float _3507 = _3506 * _3506;
                                float _3510 = ((1.0 - _3507) * dot(vec3(_3493, _3494, _3495), vec3(_948, _951, _954))) + _3507;
                                float _3513 = _3504 * _3504;
                                float _3517 = (fma(_2674, _3397.z, fma(_2673, _3397.y, _3397.x * _2672)) + _3397.w) / _3458;
                                float _3518 = (fma(_2674, _3412.z, fma(_2673, _3412.y, _3412.x * _2672)) + _3412.w) / _3458;
                                float _3522 = 1.0 - dot(vec2(_3517, _3518), vec2(_3517, _3518));
                                float _4675 = isnan(0.0) ? _3522 : (isnan(_3522) ? 0.0 : max(_3522, 0.0));
                                float _3523 = isnan(1.0) ? _4675 : (isnan(_4675) ? 1.0 : min(_4675, 1.0));
                                float _3524 = _3523 * (((isnan(0.0) ? _3510 : (isnan(_3510) ? 0.0 : max(_3510, 0.0))) * _3500) / ((_3513 * 0.699999988079071044921875) + 1.0));
                                float _3536 = exp2(log2(1.0 / ((_3513 * 3.5) + 5.0)) * 0.25);
                                float _3537 = 1.0 - _1008;
                                float _3544 = sqrt(1.0 - ((1.0 - (_3537 * _3537)) * (1.0 - (_3536 * _3536))));
                                float _3545 = _3544 * _3544;
                                float _3546 = _3545 * _3545;
                                float _3547 = _3493 - _2966;
                                float _3548 = _3494 - _2967;
                                float _3549 = _3495 - _2968;
                                float _3553 = inversesqrt(dot(vec3(_3547, _3548, _3549), vec3(_3547, _3548, _3549)));
                                float _3557 = dot(vec3(_948, _951, _954), vec3((-0.0) - _2966, (-0.0) - _2967, (-0.0) - _2968));
                                float _4686 = isnan(0.0) ? _3557 : (isnan(_3557) ? 0.0 : max(_3557, 0.0));
                                float _3560 = isnan(1.0) ? _4686 : (isnan(_4686) ? 1.0 : min(_4686, 1.0));
                                float _3561 = dot(vec3(_948, _951, _954), vec3(_3553 * _3547, _3553 * _3548, _3553 * _3549));
                                float _4697 = isnan(0.0) ? _3561 : (isnan(_3561) ? 0.0 : max(_3561, 0.0));
                                float _3564 = isnan(1.0) ? _4697 : (isnan(_4697) ? 1.0 : min(_4697, 1.0));
                                float _3568 = ((_3564 * _3564) * (_3546 + (-1.0))) + 1.0;
                                float _3569 = _3506 * _3545;
                                float _3570 = _3569 * _3569;
                                float _3576 = ((1.0 - _3570) * dot(vec3(_948, _951, _954), vec3(_3493, _3494, _3495))) + _3570;
                                float _4708 = isnan(0.0) ? _3576 : (isnan(_3576) ? 0.0 : max(_3576, 0.0));
                                float _3577 = isnan(1.0) ? _4708 : (isnan(_4708) ? 1.0 : min(_4708, 1.0));
                                float _3578 = 1.0 - _3545;
                                float _3588 = (0.5 / (((_3577 * ((_3560 * _3578) + _3545)) + 9.9999999392252902907785028219223e-09) + (((_3577 * _3578) + _3545) * _3560))) * _3577;
                                float _4719 = isnan(0.0) ? _3588 : (isnan(_3588) ? 0.0 : max(_3588, 0.0));
                                float _3598 = (_3523 * _3500) * (((_3546 * 3.1415927410125732421875) * (isnan(1.0) ? _4719 : (isnan(_4719) ? 1.0 : min(_4719, 1.0)))) / ((_3568 * _3568) * ((_3513 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3524 * _3370.y;
                                frontier_phi_83_pred_1 = _3524 * _3370.x;
                                frontier_phi_83_pred_2 = _3598 * _3382.z;
                                frontier_phi_83_pred_3 = _3598 * _3382.y;
                                frontier_phi_83_pred_4 = _3598 * _3382.x;
                                frontier_phi_83_pred_5 = _3524 * _3370.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3606 = frontier_phi_83_pred;
                            _3605 = frontier_phi_83_pred_1;
                            _3604 = frontier_phi_83_pred_2;
                            _3603 = frontier_phi_83_pred_3;
                            _3602 = frontier_phi_83_pred_4;
                            _3607 = frontier_phi_83_pred_5;
                            _3312 = _3605 + _3325;
                            _3313 = _3606 + _3326;
                            _3314 = _3607 + _3327;
                            _3309 = _3602 + _3322;
                            _3310 = _3603 + _3323;
                            _3311 = _3604 + _3324;
                            if (_3329 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3322 = _3309;
                                _3323 = _3310;
                                _3324 = _3311;
                                _3325 = _3312;
                                _3326 = _3313;
                                _3327 = _3314;
                                _3328 = _3329;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3314;
                        frontier_phi_77_pred_1 = _3313;
                        frontier_phi_77_pred_2 = _3312;
                        frontier_phi_77_pred_3 = _3311;
                        frontier_phi_77_pred_4 = _3310;
                        frontier_phi_77_pred_5 = _3309;
                    }
                    _2951 = frontier_phi_77_pred;
                    _2949 = frontier_phi_77_pred_1;
                    _2947 = frontier_phi_77_pred_2;
                    _2945 = frontier_phi_77_pred_3;
                    _2943 = frontier_phi_77_pred_4;
                    _2941 = frontier_phi_77_pred_5;
                    uint _3107 = _3106 + 1u;
                    if (_3107 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3100 = _2941;
                        _3101 = _2943;
                        _3102 = _2945;
                        _3103 = _2947;
                        _3104 = _2949;
                        _3105 = _2951;
                        _3106 = _3107;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2945;
                frontier_phi_58_59_ladder_1 = _2951;
                frontier_phi_58_59_ladder_2 = _2949;
                frontier_phi_58_59_ladder_3 = _2947;
                frontier_phi_58_59_ladder_4 = _2943;
                frontier_phi_58_59_ladder_5 = _2941;
            }
            else
            {
                frontier_phi_58_59_ladder = _2823;
                frontier_phi_58_59_ladder_1 = _2829;
                frontier_phi_58_59_ladder_2 = _2827;
                frontier_phi_58_59_ladder_3 = _2825;
                frontier_phi_58_59_ladder_4 = _2821;
                frontier_phi_58_59_ladder_5 = _2819;
            }
            _2940 = frontier_phi_58_59_ladder_5;
            _2942 = frontier_phi_58_59_ladder_4;
            _2944 = frontier_phi_58_59_ladder;
            _2946 = frontier_phi_58_59_ladder_3;
            _2948 = frontier_phi_58_59_ladder_2;
            _2950 = frontier_phi_58_59_ladder_1;
        }
        float _2955 = isnan(1.0) ? _992 : (isnan(_992) ? 1.0 : min(_992, 1.0));
        _2731 = (_2955 * _2946) + _2186;
        _2733 = (_2955 * _2948) + _2188;
        _2735 = (_2955 * _2950) + _2190;
        _2737 = ((_2940 * 0.039999999105930328369140625) * _2955) + _2516;
        _2739 = ((_2942 * 0.039999999105930328369140625) * _2955) + _2518;
        _2741 = ((_2944 * 0.039999999105930328369140625) * _2955) + _2520;
    }
    else
    {
        _2731 = _2186;
        _2733 = _2188;
        _2735 = _2190;
        _2737 = _2516;
        _2739 = _2518;
        _2741 = _2520;
    }
    float _4735 = isnan(0.0) ? _977 : (isnan(_977) ? 0.0 : max(_977, 0.0));
    float _4746 = isnan(0.0) ? _978 : (isnan(_978) ? 0.0 : max(_978, 0.0));
    float _4757 = isnan(0.0) ? _979 : (isnan(_979) ? 0.0 : max(_979, 0.0));
    float _2758 = ((isnan(1.0) ? _4735 : (isnan(_4735) ? 1.0 : min(_4735, 1.0))) * (_2731 + ((isnan(0.0) ? _1749 : (isnan(_1749) ? 0.0 : max(_1749, 0.0))) * _992))) + ((_2737 + ((isnan(0.0) ? _2039 : (isnan(_2039) ? 0.0 : max(_2039, 0.0))) * _1828)) * cbPerFrame._m0[3u].x);
    float _2759 = ((isnan(1.0) ? _4746 : (isnan(_4746) ? 1.0 : min(_4746, 1.0))) * (_2733 + ((isnan(0.0) ? _1752 : (isnan(_1752) ? 0.0 : max(_1752, 0.0))) * _992))) + ((_2739 + ((isnan(0.0) ? _2042 : (isnan(_2042) ? 0.0 : max(_2042, 0.0))) * _1828)) * cbPerFrame._m0[3u].x);
    float _2760 = ((isnan(1.0) ? _4757 : (isnan(_4757) ? 1.0 : min(_4757, 1.0))) * (_2735 + ((isnan(0.0) ? _1755 : (isnan(_1755) ? 0.0 : max(_1755, 0.0))) * _992))) + ((_2741 + ((isnan(0.0) ? _2045 : (isnan(_2045) ? 0.0 : max(_2045, 0.0))) * _1828)) * cbPerFrame._m0[3u].x);
    uint _2761 = _272 + 6u;
    float _2769 = _929 / cbSceneParam._m0[86u].x;
    float _2770 = _930 / cbSceneParam._m0[86u].y;
    vec4 _2784 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2769, _2770, (log2((isnan(cbSceneParam._m0[77u].w) ? _850 : (isnan(_850) ? cbSceneParam._m0[77u].w : min(_850, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2786 = _2784.x;
    float _2787 = _2784.y;
    float _2788 = _2784.z;
    float _2789 = _2784.w;
    float _2882;
    float _2884;
    float _2886;
    float _2888;
    if (_850 > cbSceneParam._m0[78u].w)
    {
        float _2844 = isnan(_850) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _850 : min(cbSceneParam._m0[80u].w, _850));
        float _2845 = _2844 / _850;
        float _2856 = _2845 * _902;
        float _2857 = _903 * _2845;
        float _2858 = (-0.0) - _2857;
        float _2860 = _2845 * _904;
        float _2862 = (cbSceneParam._m0[77u].w * _2858) / _2844;
        float _2863 = _2862 + cbSceneParam._m0[79u].w;
        float _2864 = cbSceneParam._m0[79u].w - _2857;
        float _2870 = sqrt(((_2856 * _2856) + (_2857 * _2857)) + (_2860 * _2860));
        float _2873 = (1.0 - (cbSceneParam._m0[77u].w / _2844)) * _2870;
        float _2878 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2880 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3057;
        if (abs((_2858 - _2862) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3057 = ((((_2863 > 0.0) ? exp2(_2878 * _2863) : (2.0 - exp2(_2880 * _2863))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2873;
        }
        else
        {
            float _3001 = 1.0 / cbSceneParam._m0[80u].x;
            float _3002 = isnan(_2864) ? _2863 : (isnan(_2863) ? _2864 : max(_2863, _2864));
            float _3003 = isnan(_2864) ? _2863 : (isnan(_2863) ? _2864 : min(_2863, _2864));
            float _3012 = isnan(0.0) ? _3002 : (isnan(_3002) ? 0.0 : min(_3002, 0.0));
            float _3013 = isnan(0.0) ? _3003 : (isnan(_3003) ? 0.0 : min(_3003, 0.0));
            _3057 = ((abs(_2870 / _2858) * cbSceneParam._m0[80u].y) * ((((_3012 - _3013) * 2.0) - ((exp2(_2878 * (isnan(0.0) ? _3002 : (isnan(_3002) ? 0.0 : max(_3002, 0.0)))) - exp2(_2878 * (isnan(0.0) ? _3003 : (isnan(_3003) ? 0.0 : max(_3003, 0.0))))) * _3001)) - ((exp2(_2880 * _3012) - exp2(_2880 * _3013)) * _3001))) + (_2873 * cbSceneParam._m0[80u].z);
        }
        vec4 _3059 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2769, _2770, 1.0), 0.0);
        float _3068 = exp2((_3057 * (-1.44269502162933349609375)) * (1.0 - _3059.w));
        float _3069 = log2(_3068);
        float _3085 = log2(_2789);
        _2882 = (exp2(_3085 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3069 * cbSceneParam._m0[78u].x)) * _3059.x) / cbSceneParam._m0[78u].x)) + _2786;
        _2884 = (exp2(_3085 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3069 * cbSceneParam._m0[78u].y)) * _3059.y) / cbSceneParam._m0[78u].y)) + _2787;
        _2886 = (exp2(_3085 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3069 * cbSceneParam._m0[78u].z)) * _3059.z) / cbSceneParam._m0[78u].z)) + _2788;
        _2888 = _3068 * _2789;
    }
    else
    {
        _2882 = _2786;
        _2884 = _2787;
        _2886 = _2788;
        _2888 = _2789;
    }
    bool _3095;
    vec4 _2898;
    vec4 _2920;
    float _2922;
    float _2926;
    float _2927;
    float _2928;
    float _2929;
    bool _2939;
    for (;;)
    {
        _2898 = cbMatDynParam._m0[0u];
        float _2900 = roundEven(_2898.y);
        bool _2901 = _2900 == 3.0;
        float _2902 = log2(_2888);
        float _2909 = exp2(_2902 * cbSceneParam._m0[78u].x) * _2758;
        float _2910 = exp2(_2902 * cbSceneParam._m0[78u].y) * _2759;
        float _2911 = exp2(_2902 * cbSceneParam._m0[78u].z) * _2760;
        float _2918 = _918 + (-0.5);
        _2920 = cbMtdParam._m0[1u];
        _2922 = _2920.y * _2918;
        float _2925 = (_2900 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2926 = _2925 * (_2901 ? _2909 : (_2909 + (cbSceneParam._m0[72u].w * _2882)));
        _2927 = _2925 * (_2901 ? _2910 : (_2910 + (cbSceneParam._m0[72u].w * _2884)));
        _2928 = _2925 * (_2901 ? _2911 : (_2911 + (cbSceneParam._m0[72u].w * _2886)));
        _2929 = _2918 * 0.999000012874603271484375;
        _2939 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2939)
        {
            if ((cbInstanceData._m0[_272 + 7u].x + _2929) < 0.5)
            {
                _3095 = true;
                break;
            }
        }
        uint _3036 = _967 + uint(_2898.w);
        if ((cbInstanceData._m0[_3036].w < 1.0) && ((cbInstanceData._m0[_3036].w + _2929) < 0.5))
        {
            _3095 = true;
            break;
        }
        if ((_2922 + 1.0) < _2920.x)
        {
            _3095 = true;
            break;
        }
        _3095 = false;
        break;
    }
    float _3300;
    if (_3095)
    {
        discard_state = true;
        _3300 = 0.0;
    }
    else
    {
        _3300 = cbInstanceData._m0[_2761].w;
    }
    SV_Target.x = _2926;
    SV_Target.y = _2927;
    SV_Target.z = _2928;
    SV_Target.w = _3300;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2761].w;
    discard_exit();
}


