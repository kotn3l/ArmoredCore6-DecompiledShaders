#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 13) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_22;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_29;
layout(set = 0, binding = 20) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_6;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1368;
float _3728;
float _3729;
float _3730;
float _3731;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _232 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _233 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _234 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _240 = inversesqrt(dot(vec3(_232, _233, _234), vec3(_232, _233, _234)));
    float _247 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _254 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _266 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _268 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _269 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3740 = isnan(0.0) ? _266 : (isnan(_266) ? 0.0 : max(_266, 0.0));
    float _3751 = isnan(0.0) ? _268 : (isnan(_268) ? 0.0 : max(_268, 0.0));
    float _3762 = isnan(0.0) ? _269 : (isnan(_269) ? 0.0 : max(_269, 0.0));
    uint _279 = uint(roundEven(NORMAL.w)) * 13u;
    uint _284 = _279 + 1u;
    uint _288 = _279 + 2u;
    float _297 = sqrt(((cbInstanceData._m0[_284].x * cbInstanceData._m0[_284].x) + (cbInstanceData._m0[_279].x * cbInstanceData._m0[_279].x)) + (cbInstanceData._m0[_288].x * cbInstanceData._m0[_288].x));
    float _298 = _297 * TEXCOORD.z;
    float _299 = _297 * TEXCOORD.w;
    vec4 _312 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _298) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _299) + cbTextureTilingScale._m0[13u].w));
    vec4 _336 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _341 = _336.x * cbMtdParam._m0[11u].x;
    float _342 = _336.y * cbMtdParam._m0[11u].y;
    float _343 = _336.z * cbMtdParam._m0[11u].z;
    vec4 _362 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _298) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _299) + cbTextureTilingScale._m0[5u].w));
    vec4 _413 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _415 = _413.x;
    float _427 = dot(vec4(_415, _413.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _444 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w)).x) * 2.0) - ((((_415 - _427) * cbMtdParam._m0[24u].z) + _427) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3773 = isnan(0.0) ? _444 : (isnan(_444) ? 0.0 : max(_444, 0.0));
    float _445 = isnan(1.0) ? _3773 : (isnan(_3773) ? 1.0 : min(_3773, 1.0));
    float _452 = (_445 * ((_362.x * cbMtdParam._m0[12u].x) - _341)) + _341;
    float _453 = (_445 * ((_362.y * cbMtdParam._m0[12u].y) - _342)) + _342;
    float _454 = (_445 * ((_362.z * cbMtdParam._m0[12u].z) - _343)) + _343;
    float _458 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _312.x) * _452;
    float _461 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _312.y) * _453;
    float _464 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _312.z) * _454;
    float _471 = ((_452 - _458) * (isnan(1.0) ? _3740 : (isnan(_3740) ? 1.0 : min(_3740, 1.0)))) + _458;
    float _472 = ((_453 - _461) * (isnan(1.0) ? _3751 : (isnan(_3751) ? 1.0 : min(_3751, 1.0)))) + _461;
    float _473 = ((_454 - _464) * (isnan(1.0) ? _3762 : (isnan(_3762) ? 1.0 : min(_3762, 1.0)))) + _464;
    vec4 _491 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _298) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _299) + cbTextureTilingScale._m0[20u].w));
    vec4 _516 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _298) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _299) + cbTextureTilingScale._m0[4u].w));
    vec4 _533 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _535 = _533.x;
    float _536 = _533.y;
    float _537 = _533.z;
    float _546 = ((_516.z - _537) * _445) + _537;
    float _549 = ((((_516.x - _535) * _445) + _535) * 2.0) + (-1.0);
    float _550 = ((((_516.y - _536) * _445) + _536) * 2.0) + (-1.0);
    float _551 = dot(vec2(_549, _550), vec2(_549, _550));
    float _3784 = isnan(0.0) ? _551 : (isnan(_551) ? 0.0 : max(_551, 0.0));
    float _556 = sqrt(1.0 - (isnan(1.0) ? _3784 : (isnan(_3784) ? 1.0 : min(_3784, 1.0))));
    vec4 _572 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _597 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _298) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _299) + cbTextureTilingScale._m0[11u].w));
    float _599 = _597.x;
    float _600 = 1.0 - _599;
    float _606 = isnan(-1.0) ? cbMtdParam._m0[24u].x : (isnan(cbMtdParam._m0[24u].x) ? (-1.0) : max(cbMtdParam._m0[24u].x, -1.0));
    float _609 = ((isnan(0.0) ? _606 : (isnan(_606) ? 0.0 : min(_606, 0.0))) * TEXCOORD_8.x) + TEXCOORD_8.w;
    float _618 = (_609 - ((((((_599 - _600) * cbMtdParam._m0[24u].w) + _600) + 0.00999999977648258209228515625) * cbMtdParam._m0[21u].z) * (1.0 - _609))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3805 = isnan(0.0) ? _618 : (isnan(_618) ? 0.0 : max(_618, 0.0));
    float _619 = isnan(1.0) ? _3805 : (isnan(_3805) ? 1.0 : min(_3805, 1.0));
    float _626 = (_619 * (cbMtdParam._m0[17u].x - _471)) + _471;
    float _627 = (_619 * (cbMtdParam._m0[17u].y - _472)) + _472;
    float _628 = (_619 * (cbMtdParam._m0[17u].z - _473)) + _473;
    vec4 _640 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _298) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _299) + cbTextureTilingScale._m0[19u].w));
    float _642 = _640.x;
    float _643 = 1.0 - _642;
    float _668 = (TEXCOORD_8.x - ((cbMtdParam._m0[22u].w * (1.0 - TEXCOORD_8.x)) * ((((_642 - _643) * cbMtdParam._m0[24u].y) + _643) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3816 = isnan(0.0) ? _668 : (isnan(_668) ? 0.0 : max(_668, 0.0));
    float _669 = isnan(1.0) ? _3816 : (isnan(_3816) ? 1.0 : min(_3816, 1.0));
    float _677 = ((((cbMtdParam._m0[10u].x - _626) * TEXCOORD_8.x) * cbMtdParam._m0[23u].w) * _669) + _626;
    float _678 = ((((cbMtdParam._m0[10u].y - _627) * TEXCOORD_8.y) * cbMtdParam._m0[23u].w) * _669) + _627;
    float _679 = (((cbMtdParam._m0[23u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _628)) * _669) + _628;
    float _684 = (((_491.z - _546) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _546;
    float _688 = ((_572.z - _684) * cbMtdParam._m0[19u].w) + _684;
    vec4 _702 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _298) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _299) + cbTextureTilingScale._m0[15u].w));
    float _709 = (_702.x * 2.0) + (-1.0);
    float _710 = (_702.y * 2.0) + (-1.0);
    float _711 = dot(vec2(_709, _710), vec2(_709, _710));
    float _3827 = isnan(0.0) ? _711 : (isnan(_711) ? 0.0 : max(_711, 0.0));
    float _719 = (_619 * (_702.z - _688)) + _688;
    float _722 = ((cbMtdParam._m0[23u].y - _719) * _669) + _719;
    vec4 _741 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _298) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _299) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _747 = (_741.x * 2.0) + (-1.0);
    float _748 = (_741.y * 2.0) + (-1.0);
    float _749 = dot(vec2(_747, _748), vec2(_747, _748));
    float _3838 = isnan(0.0) ? _749 : (isnan(_749) ? 0.0 : max(_749, 0.0));
    float _763 = (_549 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_491.x * 2.0) + (-1.0)))) + (((_572.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _764 = (_550 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_491.y * 2.0) + (-1.0)))) + (((_572.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _776 = (((_709 - _763) + (cbMtdParam._m0[21u].x * _763)) * _619) + _763;
    float _777 = (((_710 - _764) + (cbMtdParam._m0[21u].x * _764)) * _619) + _764;
    float _778 = (_619 * (sqrt(1.0 - (isnan(1.0) ? _3827 : (isnan(_3827) ? 1.0 : min(_3827, 1.0)))) - _556)) + _556;
    float _789 = (((_747 - _776) + (_776 * cbMtdParam._m0[22u].z)) * _669) + _776;
    float _790 = (((_748 - _777) + (_777 * cbMtdParam._m0[22u].z)) * _669) + _777;
    float _791 = ((sqrt(1.0 - (isnan(1.0) ? _3838 : (isnan(_3838) ? 1.0 : min(_3838, 1.0)))) - _778) * _669) + _778;
    float _793 = cbMtdParam._m0[22u].x + _572.w;
    float _796 = fma(_791, _247 * NORMAL.x, fma(_790, _254 * TANGENT.x, (_240 * _232) * _789));
    float _799 = fma(_791, _247 * NORMAL.y, fma(_790, _254 * TANGENT.y, (_240 * _233) * _789));
    float _802 = fma(_791, _247 * NORMAL.z, fma(_790, _254 * TANGENT.z, (_240 * _234) * _789));
    float _806 = inversesqrt(dot(vec3(_796, _799, _802), vec3(_796, _799, _802)));
    float _807 = _806 * _796;
    float _808 = _806 * _799;
    float _809 = _806 * _802;
    float _3849 = isnan(0.0) ? _722 : (isnan(_722) ? 0.0 : max(_722, 0.0));
    float _810 = isnan(1.0) ? _3849 : (isnan(_3849) ? 1.0 : min(_3849, 1.0));
    float _3860 = isnan(0.0) ? _793 : (isnan(_793) ? 0.0 : max(_793, 0.0));
    float _3871 = isnan(0.0) ? _677 : (isnan(_677) ? 0.0 : max(_677, 0.0));
    float _3882 = isnan(0.0) ? _678 : (isnan(_678) ? 0.0 : max(_678, 0.0));
    float _3893 = isnan(0.0) ? _679 : (isnan(_679) ? 0.0 : max(_679, 0.0));
    float _828 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _869 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _879 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _869);
    float _880 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _869);
    float _881 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _869);
    float _885 = inversesqrt(dot(vec3(_879, _880, _881), vec3(_879, _880, _881)));
    float _886 = _879 * _885;
    float _887 = _880 * _885;
    float _888 = _881 * _885;
    vec4 _893 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _895 = _893.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1049 = sqrt(((_879 * _879) + (_880 * _880)) + (_881 * _881));
        float _1055 = (cbMatDynParam._m0[5u].x * _1049) + cbMatDynParam._m0[5u].y;
        float _3904 = isnan(0.0) ? _1055 : (isnan(_1055) ? 0.0 : max(_1055, 0.0));
        float _1056 = isnan(1.0) ? _3904 : (isnan(_3904) ? 1.0 : min(_3904, 1.0));
        float _1060 = (cbMatDynParam._m0[5u].z * _1049) + cbMatDynParam._m0[5u].w;
        float _3915 = isnan(0.0) ? _1060 : (isnan(_1060) ? 0.0 : max(_1060, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3915 : (isnan(_3915) ? 1.0 : min(_3915, 1.0))) - _1056)) + _1056) < ((_895 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _906 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _907 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _925 = fma(_809, cbSceneParam._m0[5u].z, fma(_808, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _807));
    float _928 = fma(_809, cbSceneParam._m0[6u].z, fma(_808, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _807));
    float _931 = fma(_809, cbSceneParam._m0[7u].z, fma(_808, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _807));
    uint _944 = _279 + 9u;
    uint _945 = _944 + uint(cbMatDynParam._m0[0u].w);
    float _951 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3871 : (isnan(_3871) ? 1.0 : min(_3871, 1.0)))) * cbInstanceData._m0[_945].x;
    float _952 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3882 : (isnan(_3882) ? 1.0 : min(_3882, 1.0)))) * cbInstanceData._m0[_945].y;
    float _953 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3893 : (isnan(_3893) ? 1.0 : min(_3893, 1.0)))) * cbInstanceData._m0[_945].z;
    float _3926 = isnan(0.0) ? _951 : (isnan(_951) ? 0.0 : max(_951, 0.0));
    float _954 = isnan(1.0) ? _3926 : (isnan(_3926) ? 1.0 : min(_3926, 1.0));
    float _3937 = isnan(0.0) ? _952 : (isnan(_952) ? 0.0 : max(_952, 0.0));
    float _955 = isnan(1.0) ? _3937 : (isnan(_3937) ? 1.0 : min(_3937, 1.0));
    float _3948 = isnan(0.0) ? _953 : (isnan(_953) ? 0.0 : max(_953, 0.0));
    float _956 = isnan(1.0) ? _3948 : (isnan(_3948) ? 1.0 : min(_3948, 1.0));
    vec4 _965 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _906, cbSceneParam._m0[86u].y * _907));
    float _969 = ((isnan(1.0) ? _3860 : (isnan(_3860) ? 1.0 : min(_3860, 1.0))) * TEXCOORD_5.w) * _965.x;
    float _970 = dot(vec3(_807, _808, _809), vec3(_886, _887, _888));
    float _973 = _970 * 2.0;
    float _977 = (_973 * _807) - _886;
    float _978 = (_973 * _808) - _887;
    float _979 = (_973 * _809) - _888;
    float _983 = abs(dot(vec3(_886, _887, _888), vec3(_807, _808, _809)));
    float _3959 = isnan(0.0) ? _983 : (isnan(_983) ? 0.0 : max(_983, 0.0));
    float _985 = sqrt(_810);
    float _998 = exp2((_985 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3959 : (isnan(_3959) ? 1.0 : min(_3959, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_985 * 3.0));
    float _1030 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1034 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1038 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1367;
    float _1369;
    float _1370;
    float _1371;
    float _1372;
    float _1373;
    float _1374;
    float _1375;
    float _1376;
    float _1377;
    float _1378;
    float _1379;
    float _1380;
    float _1381;
    float _1382;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1092 = fma(_1038, cbModelParam._m0[26u].z, fma(_1034, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1030));
        float _1096 = fma(_1038, cbModelParam._m0[27u].z, fma(_1034, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1030));
        float _1100 = fma(_1038, cbModelParam._m0[28u].z, fma(_1034, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1030));
        float _1125 = _1030 + _807;
        float _1126 = _1034 + _808;
        float _1127 = _1038 + _809;
        float _1137 = fma(_1127, cbModelParam._m0[26u].z, fma(_1126, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1125)) - _1092;
        float _1138 = fma(_1127, cbModelParam._m0[27u].z, fma(_1126, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1125)) - _1096;
        float _1139 = fma(_1127, cbModelParam._m0[28u].z, fma(_1126, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1125)) - _1100;
        float _1143 = inversesqrt(dot(vec3(_1137, _1138, _1139), vec3(_1137, _1138, _1139)));
        float _1156 = ((_1143 * _1137) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1092 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1157 = ((_1143 * _1138) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1096 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1158 = ((_1143 * _1139) / cbModelParam._m0[34u].z) + ((((((_1100 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1161 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1156, _1157, _1158), 0.0);
        vec4 _1168 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1156, _1157, _1158), 0.0);
        vec4 _1175 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1156, _1157, _1158), 0.0);
        vec4 _1182 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1156, _1157, _1158), 0.0);
        float _1195 = exp2((_1161.w + (-0.5)) * 20.0) * 2.0;
        float _1196 = _1195 * (_1161.x + (-0.5));
        float _1197 = _1195 * (_1161.y + (-0.5));
        float _1198 = _1195 * (_1161.z + (-0.5));
        float _1205 = exp2((_1168.w + (-0.5)) * 20.0) * 2.0;
        float _1206 = _1205 * (_1168.x + (-0.5));
        float _1207 = _1205 * (_1168.y + (-0.5));
        float _1208 = _1205 * (_1168.z + (-0.5));
        float _1215 = exp2((_1175.w + (-0.5)) * 20.0) * 2.0;
        float _1216 = _1215 * (_1175.x + (-0.5));
        float _1217 = _1215 * (_1175.y + (-0.5));
        float _1218 = _1215 * (_1175.z + (-0.5));
        float _1225 = exp2((_1182.w + (-0.5)) * 20.0) * 2.0;
        float _1226 = _1225 * (_1182.x + (-0.5));
        float _1227 = _1225 * (_1182.y + (-0.5));
        float _1228 = _1225 * (_1182.z + (-0.5));
        float _1229 = isnan(0.0) ? _1226 : (isnan(_1226) ? 0.0 : max(_1226, 0.0));
        float _1230 = isnan(0.0) ? _1227 : (isnan(_1227) ? 0.0 : max(_1227, 0.0));
        float _1231 = isnan(0.0) ? _1228 : (isnan(_1228) ? 0.0 : max(_1228, 0.0));
        float _1232 = _1196 * 0.5;
        float _1233 = _1206 * 0.5;
        float _1234 = _1216 * 0.5;
        float _1235 = dot(vec3(_1232, _1233, _1234), vec3(_1232, _1233, _1234));
        float _1240 = (_1235 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1235);
        float _1249 = (dot(vec3(_807, _808, _809), vec3(_1240 * _1232, _1240 * _1233, _1240 * _1234)) + 1.0) * 0.5;
        float _3985 = isnan(0.0) ? _1249 : (isnan(_1249) ? 0.0 : max(_1249, 0.0));
        float _1259 = sqrt(((_1233 * _1233) + (_1232 * _1232)) + (_1234 * _1234)) / (_1229 + 9.9999997473787516355514526367188e-06);
        float _3996 = isnan(0.0) ? _1259 : (isnan(_1259) ? 0.0 : max(_1259, 0.0));
        float _1260 = isnan(1.0) ? _3996 : (isnan(_3996) ? 1.0 : min(_3996, 1.0));
        float _1261 = _1260 * 2.0;
        float _1265 = (1.0 - _1260) / (_1260 + 1.0);
        float _4007 = isnan(0.0) ? _1265 : (isnan(_1265) ? 0.0 : max(_1265, 0.0));
        float _1266 = isnan(1.0) ? _4007 : (isnan(_4007) ? 1.0 : min(_4007, 1.0));
        float _1275 = ((((1.0 - _1266) * (_1261 + 2.0)) * exp2(log2(isnan(1.0) ? _3985 : (isnan(_3985) ? 1.0 : min(_3985, 1.0))) * (_1261 + 1.0))) + _1266) * _1229;
        float _1276 = _1197 * 0.5;
        float _1277 = _1207 * 0.5;
        float _1278 = _1217 * 0.5;
        float _1279 = dot(vec3(_1276, _1277, _1278), vec3(_1276, _1277, _1278));
        float _1284 = (_1279 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1279);
        float _1292 = (dot(vec3(_807, _808, _809), vec3(_1284 * _1276, _1284 * _1277, _1284 * _1278)) + 1.0) * 0.5;
        float _4018 = isnan(0.0) ? _1292 : (isnan(_1292) ? 0.0 : max(_1292, 0.0));
        float _1301 = sqrt(((_1277 * _1277) + (_1276 * _1276)) + (_1278 * _1278)) / (_1230 + 9.9999997473787516355514526367188e-06);
        float _4029 = isnan(0.0) ? _1301 : (isnan(_1301) ? 0.0 : max(_1301, 0.0));
        float _1302 = isnan(1.0) ? _4029 : (isnan(_4029) ? 1.0 : min(_4029, 1.0));
        float _1303 = _1302 * 2.0;
        float _1307 = (1.0 - _1302) / (_1302 + 1.0);
        float _4040 = isnan(0.0) ? _1307 : (isnan(_1307) ? 0.0 : max(_1307, 0.0));
        float _1308 = isnan(1.0) ? _4040 : (isnan(_4040) ? 1.0 : min(_4040, 1.0));
        float _1317 = ((((1.0 - _1308) * (_1303 + 2.0)) * exp2(log2(isnan(1.0) ? _4018 : (isnan(_4018) ? 1.0 : min(_4018, 1.0))) * (_1303 + 1.0))) + _1308) * _1230;
        float _1318 = _1198 * 0.5;
        float _1319 = _1208 * 0.5;
        float _1320 = _1218 * 0.5;
        float _1321 = dot(vec3(_1318, _1319, _1320), vec3(_1318, _1319, _1320));
        float _1326 = (_1321 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1321);
        float _1334 = (dot(vec3(_807, _808, _809), vec3(_1326 * _1318, _1326 * _1319, _1326 * _1320)) + 1.0) * 0.5;
        float _4051 = isnan(0.0) ? _1334 : (isnan(_1334) ? 0.0 : max(_1334, 0.0));
        float _1343 = sqrt(((_1319 * _1319) + (_1318 * _1318)) + (_1320 * _1320)) / (_1231 + 9.9999997473787516355514526367188e-06);
        float _4062 = isnan(0.0) ? _1343 : (isnan(_1343) ? 0.0 : max(_1343, 0.0));
        float _1344 = isnan(1.0) ? _4062 : (isnan(_4062) ? 1.0 : min(_4062, 1.0));
        float _1345 = _1344 * 2.0;
        float _1349 = (1.0 - _1344) / (_1344 + 1.0);
        float _4073 = isnan(0.0) ? _1349 : (isnan(_1349) ? 0.0 : max(_1349, 0.0));
        float _1350 = isnan(1.0) ? _4073 : (isnan(_4073) ? 1.0 : min(_4073, 1.0));
        float _1359 = ((((1.0 - _1350) * (_1345 + 2.0)) * exp2(log2(isnan(1.0) ? _4051 : (isnan(_4051) ? 1.0 : min(_4051, 1.0))) * (_1345 + 1.0))) + _1350) * _1231;
        _1367 = _1198;
        _1369 = _1197;
        _1370 = _1196;
        _1371 = _1208;
        _1372 = _1207;
        _1373 = _1206;
        _1374 = _1218;
        _1375 = _1217;
        _1376 = _1216;
        _1377 = _1231;
        _1378 = _1230;
        _1379 = _1229;
        _1380 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1275 : (isnan(_1275) ? 0.0 : max(_1275, 0.0)));
        _1381 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1317 : (isnan(_1317) ? 0.0 : max(_1317, 0.0)));
        _1382 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1359 : (isnan(_1359) ? 0.0 : max(_1359, 0.0)));
    }
    else
    {
        _1367 = _1368;
        _1369 = _1368;
        _1370 = _1368;
        _1371 = _1368;
        _1372 = _1368;
        _1373 = _1368;
        _1374 = _1368;
        _1375 = _1368;
        _1376 = _1368;
        _1377 = _1368;
        _1378 = _1368;
        _1379 = _1368;
        _1380 = 0.0;
        _1381 = 0.0;
        _1382 = 0.0;
    }
    float _1679;
    float _1680;
    float _1681;
    float _1682;
    float _1683;
    float _1684;
    float _1685;
    float _1686;
    float _1687;
    float _1688;
    float _1689;
    float _1690;
    float _1691;
    float _1692;
    float _1693;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1410 = fma(_1038, cbModelParam._m0[30u].z, fma(_1034, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1030));
        float _1414 = fma(_1038, cbModelParam._m0[31u].z, fma(_1034, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1030));
        float _1418 = fma(_1038, cbModelParam._m0[32u].z, fma(_1034, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1030));
        float _1441 = _1030 + _807;
        float _1442 = _1034 + _808;
        float _1443 = _1038 + _809;
        float _1453 = fma(_1443, cbModelParam._m0[30u].z, fma(_1442, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1441)) - _1410;
        float _1454 = fma(_1443, cbModelParam._m0[31u].z, fma(_1442, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1441)) - _1414;
        float _1455 = fma(_1443, cbModelParam._m0[32u].z, fma(_1442, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1441)) - _1418;
        float _1459 = inversesqrt(dot(vec3(_1453, _1454, _1455), vec3(_1453, _1454, _1455)));
        float _1472 = ((_1459 * _1453) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1410 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1473 = ((_1459 * _1454) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1414 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1474 = ((_1459 * _1455) / cbModelParam._m0[35u].z) + ((((((_1418 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1476 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1472, _1473, _1474), 0.0);
        vec4 _1483 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1472, _1473, _1474), 0.0);
        vec4 _1490 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1472, _1473, _1474), 0.0);
        vec4 _1497 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1472, _1473, _1474), 0.0);
        float _1509 = exp2((_1476.w + (-0.5)) * 20.0) * 2.0;
        float _1510 = _1509 * (_1476.x + (-0.5));
        float _1511 = _1509 * (_1476.y + (-0.5));
        float _1512 = _1509 * (_1476.z + (-0.5));
        float _1519 = exp2((_1483.w + (-0.5)) * 20.0) * 2.0;
        float _1520 = _1519 * (_1483.x + (-0.5));
        float _1521 = _1519 * (_1483.y + (-0.5));
        float _1522 = _1519 * (_1483.z + (-0.5));
        float _1529 = exp2((_1490.w + (-0.5)) * 20.0) * 2.0;
        float _1530 = _1529 * (_1490.x + (-0.5));
        float _1531 = _1529 * (_1490.y + (-0.5));
        float _1532 = _1529 * (_1490.z + (-0.5));
        float _1539 = exp2((_1497.w + (-0.5)) * 20.0) * 2.0;
        float _1540 = _1539 * (_1497.x + (-0.5));
        float _1541 = _1539 * (_1497.y + (-0.5));
        float _1542 = _1539 * (_1497.z + (-0.5));
        float _1543 = isnan(0.0) ? _1540 : (isnan(_1540) ? 0.0 : max(_1540, 0.0));
        float _1544 = isnan(0.0) ? _1541 : (isnan(_1541) ? 0.0 : max(_1541, 0.0));
        float _1545 = isnan(0.0) ? _1542 : (isnan(_1542) ? 0.0 : max(_1542, 0.0));
        float _1546 = _1510 * 0.5;
        float _1547 = _1520 * 0.5;
        float _1548 = _1530 * 0.5;
        float _1549 = dot(vec3(_1546, _1547, _1548), vec3(_1546, _1547, _1548));
        float _1554 = (_1549 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1549);
        float _1562 = (dot(vec3(_807, _808, _809), vec3(_1554 * _1546, _1554 * _1547, _1554 * _1548)) + 1.0) * 0.5;
        float _4114 = isnan(0.0) ? _1562 : (isnan(_1562) ? 0.0 : max(_1562, 0.0));
        float _1571 = sqrt(((_1547 * _1547) + (_1546 * _1546)) + (_1548 * _1548)) / (_1543 + 9.9999997473787516355514526367188e-06);
        float _4125 = isnan(0.0) ? _1571 : (isnan(_1571) ? 0.0 : max(_1571, 0.0));
        float _1572 = isnan(1.0) ? _4125 : (isnan(_4125) ? 1.0 : min(_4125, 1.0));
        float _1573 = _1572 * 2.0;
        float _1577 = (1.0 - _1572) / (_1572 + 1.0);
        float _4136 = isnan(0.0) ? _1577 : (isnan(_1577) ? 0.0 : max(_1577, 0.0));
        float _1578 = isnan(1.0) ? _4136 : (isnan(_4136) ? 1.0 : min(_4136, 1.0));
        float _1587 = ((((1.0 - _1578) * (_1573 + 2.0)) * exp2(log2(isnan(1.0) ? _4114 : (isnan(_4114) ? 1.0 : min(_4114, 1.0))) * (_1573 + 1.0))) + _1578) * _1543;
        float _1588 = _1511 * 0.5;
        float _1589 = _1521 * 0.5;
        float _1590 = _1531 * 0.5;
        float _1591 = dot(vec3(_1588, _1589, _1590), vec3(_1588, _1589, _1590));
        float _1596 = (_1591 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1591);
        float _1604 = (dot(vec3(_807, _808, _809), vec3(_1596 * _1588, _1596 * _1589, _1596 * _1590)) + 1.0) * 0.5;
        float _4147 = isnan(0.0) ? _1604 : (isnan(_1604) ? 0.0 : max(_1604, 0.0));
        float _1613 = sqrt(((_1589 * _1589) + (_1588 * _1588)) + (_1590 * _1590)) / (_1544 + 9.9999997473787516355514526367188e-06);
        float _4158 = isnan(0.0) ? _1613 : (isnan(_1613) ? 0.0 : max(_1613, 0.0));
        float _1614 = isnan(1.0) ? _4158 : (isnan(_4158) ? 1.0 : min(_4158, 1.0));
        float _1615 = _1614 * 2.0;
        float _1619 = (1.0 - _1614) / (_1614 + 1.0);
        float _4169 = isnan(0.0) ? _1619 : (isnan(_1619) ? 0.0 : max(_1619, 0.0));
        float _1620 = isnan(1.0) ? _4169 : (isnan(_4169) ? 1.0 : min(_4169, 1.0));
        float _1629 = ((((1.0 - _1620) * (_1615 + 2.0)) * exp2(log2(isnan(1.0) ? _4147 : (isnan(_4147) ? 1.0 : min(_4147, 1.0))) * (_1615 + 1.0))) + _1620) * _1544;
        float _1630 = _1512 * 0.5;
        float _1631 = _1522 * 0.5;
        float _1632 = _1532 * 0.5;
        float _1633 = dot(vec3(_1630, _1631, _1632), vec3(_1630, _1631, _1632));
        float _1638 = (_1633 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1633);
        float _1646 = (dot(vec3(_807, _808, _809), vec3(_1638 * _1630, _1638 * _1631, _1638 * _1632)) + 1.0) * 0.5;
        float _4180 = isnan(0.0) ? _1646 : (isnan(_1646) ? 0.0 : max(_1646, 0.0));
        float _1655 = sqrt(((_1631 * _1631) + (_1630 * _1630)) + (_1632 * _1632)) / (_1545 + 9.9999997473787516355514526367188e-06);
        float _4191 = isnan(0.0) ? _1655 : (isnan(_1655) ? 0.0 : max(_1655, 0.0));
        float _1656 = isnan(1.0) ? _4191 : (isnan(_4191) ? 1.0 : min(_4191, 1.0));
        float _1657 = _1656 * 2.0;
        float _1661 = (1.0 - _1656) / (_1656 + 1.0);
        float _4202 = isnan(0.0) ? _1661 : (isnan(_1661) ? 0.0 : max(_1661, 0.0));
        float _1662 = isnan(1.0) ? _4202 : (isnan(_4202) ? 1.0 : min(_4202, 1.0));
        float _1671 = ((((1.0 - _1662) * (_1657 + 2.0)) * exp2(log2(isnan(1.0) ? _4180 : (isnan(_4180) ? 1.0 : min(_4180, 1.0))) * (_1657 + 1.0))) + _1662) * _1545;
        _1679 = _1512;
        _1680 = _1511;
        _1681 = _1510;
        _1682 = _1522;
        _1683 = _1521;
        _1684 = _1520;
        _1685 = _1532;
        _1686 = _1531;
        _1687 = _1530;
        _1688 = _1545;
        _1689 = _1544;
        _1690 = _1543;
        _1691 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1587 : (isnan(_1587) ? 0.0 : max(_1587, 0.0)));
        _1692 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1629 : (isnan(_1629) ? 0.0 : max(_1629, 0.0)));
        _1693 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1671 : (isnan(_1671) ? 0.0 : max(_1671, 0.0)));
    }
    else
    {
        _1679 = _1368;
        _1680 = _1368;
        _1681 = _1368;
        _1682 = _1368;
        _1683 = _1368;
        _1684 = _1368;
        _1685 = _1368;
        _1686 = _1368;
        _1687 = _1368;
        _1688 = _1368;
        _1689 = _1368;
        _1690 = _1368;
        _1691 = 0.0;
        _1692 = 0.0;
        _1693 = 0.0;
    }
    float _1703 = (cbModelParam._m0[1u].x * (_1691 - _1380)) + _1380;
    float _1704 = (cbModelParam._m0[1u].x * (_1692 - _1381)) + _1381;
    float _1705 = (cbModelParam._m0[1u].x * (_1693 - _1382)) + _1382;
    float _1726 = fma(_1705, cbSceneParam._m0[89u].z, fma(_1704, cbSceneParam._m0[89u].y, _1703 * cbSceneParam._m0[89u].x));
    float _1729 = fma(_1705, cbSceneParam._m0[90u].z, fma(_1704, cbSceneParam._m0[90u].y, _1703 * cbSceneParam._m0[90u].x));
    float _1732 = fma(_1705, cbSceneParam._m0[91u].z, fma(_1704, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1703));
    float _1747 = _977 * 0.5;
    float _1748 = _978 * 0.5;
    float _1749 = _979 * 0.5;
    float _1750 = dot(vec4(_1747, _1748, _1749, 1.0), vec4(_1681, _1684, _1687, _1690));
    float _1753 = dot(vec4(_1747, _1748, _1749, 1.0), vec4(_1680, _1683, _1686, _1689));
    float _1756 = dot(vec4(_1747, _1748, _1749, 1.0), vec4(_1679, _1682, _1685, _1688));
    float _1790;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1763 = dot(vec4(_1747, _1748, _1749, 1.0), vec4(_1367, _1371, _1374, _1377));
        float _1767 = dot(vec4(_1747, _1748, _1749, 1.0), vec4(_1369, _1372, _1375, _1378));
        float _1771 = dot(vec4(_1747, _1748, _1749, 1.0), vec4(_1370, _1373, _1376, _1379));
        float _1778 = dot(vec4(cbModelParam._m0[39u]), vec4(_1747, _1748, _1749, 1.0));
        _1790 = dot(vec3(isnan(0.0) ? _1771 : (isnan(_1771) ? 0.0 : max(_1771, 0.0)), isnan(0.0) ? _1767 : (isnan(_1767) ? 0.0 : max(_1767, 0.0)), isnan(0.0) ? _1763 : (isnan(_1763) ? 0.0 : max(_1763, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1778) ? 0.0 : (isnan(0.0) ? _1778 : max(0.0, _1778))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1790 = 1.0;
    }
    float _1801;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1792 = dot(vec4(cbModelParam._m0[40u]), vec4(_1747, _1748, _1749, 1.0));
        _1801 = dot(vec3(isnan(0.0) ? _1750 : (isnan(_1750) ? 0.0 : max(_1750, 0.0)), isnan(0.0) ? _1753 : (isnan(_1753) ? 0.0 : max(_1753, 0.0)), isnan(0.0) ? _1756 : (isnan(_1756) ? 0.0 : max(_1756, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1792) ? 0.0 : (isnan(0.0) ? _1792 : max(0.0, _1792))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1801 = 1.0;
    }
    float _1805 = (_1801 * cbModelParam._m0[1u].x) + (_1790 * (1.0 - cbModelParam._m0[1u].x));
    float _1815 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _810);
    float _1816 = isnan(_1815) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1815 : min(cbModelParam._m0[25u].z, _1815));
    float _1897;
    float _1899;
    float _1901;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1864 = fma(_1038, cbModelParam._m0[13u].z, fma(_1034, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1030)) + cbModelParam._m0[13u].w;
        float _1868 = fma(_1038, cbModelParam._m0[14u].z, fma(_1034, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1030)) + cbModelParam._m0[14u].w;
        float _1872 = fma(_1038, cbModelParam._m0[15u].z, fma(_1034, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1030)) + cbModelParam._m0[15u].w;
        float _1875 = fma(_979, cbModelParam._m0[13u].z, fma(_978, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _977));
        float _1878 = fma(_979, cbModelParam._m0[14u].z, fma(_978, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _977));
        float _1881 = fma(_979, cbModelParam._m0[15u].z, fma(_978, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _977));
        float _1909;
        if (_1875 > 0.0)
        {
            _1909 = abs((1.0 - _1864) / _1875);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1875 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1864 + 1.0) / _1875);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1909 = frontier_phi_17_15_ladder;
        }
        float _2110;
        if (_1878 > 0.0)
        {
            _2110 = abs((1.0 - _1868) / _1878);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1878 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1868 + 1.0) / _1878);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2110 = frontier_phi_26_22_ladder;
        }
        float _2353;
        if (_1881 > 0.0)
        {
            _2353 = abs((1.0 - _1872) / _1881);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1881 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1872 + 1.0) / _1881);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2353 = frontier_phi_38_33_ladder;
        }
        float _2355 = isnan(_2110) ? _1909 : (isnan(_1909) ? _2110 : min(_1909, _2110));
        float _2356 = isnan(_2353) ? _2355 : (isnan(_2355) ? _2353 : min(_2355, _2353));
        float _2360 = (_2356 * _1875) + _1864;
        float _2361 = (_2356 * _1878) + _1868;
        float _2362 = (_2356 * _1881) + _1872;
        float _2363 = _2356 * 9.9999997473787516355514526367188e-05;
        float _2365 = (-1.0) - _2363;
        float _2367 = _2363 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2362 > _2367) || ((_2362 < _2365) || ((_2361 > _2367) || ((_2361 < _2365) || ((_2360 < _2365) || (_2360 > _2367))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2486 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2362, cbModelParam._m0[9u].z, fma(_2361, cbModelParam._m0[9u].y, _2360 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2362, cbModelParam._m0[10u].z, fma(_2361, cbModelParam._m0[10u].y, _2360 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2362, cbModelParam._m0[11u].z, fma(_2361, cbModelParam._m0[11u].y, _2360 * cbModelParam._m0[11u].x))), _1816);
            frontier_phi_16_38_ladder = _2486.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2486.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2486.x * cbModelParam._m0[1u].y;
        }
        _1897 = frontier_phi_16_38_ladder_2;
        _1899 = frontier_phi_16_38_ladder_1;
        _1901 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1885 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_977, _978, _979), _1816);
        _1897 = _1885.x * cbModelParam._m0[1u].y;
        _1899 = _1885.y * cbModelParam._m0[1u].y;
        _1901 = _1885.z * cbModelParam._m0[1u].y;
    }
    float _1905 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _810);
    float _1906 = isnan(_1905) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1905 : min(cbModelParam._m0[25u].w, _1905));
    float _1996;
    float _1998;
    float _2000;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1960 = fma(_1038, cbModelParam._m0[21u].z, fma(_1034, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1030)) + cbModelParam._m0[21u].w;
        float _1964 = fma(_1038, cbModelParam._m0[22u].z, fma(_1034, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1030)) + cbModelParam._m0[22u].w;
        float _1968 = fma(_1038, cbModelParam._m0[23u].z, fma(_1034, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1030)) + cbModelParam._m0[23u].w;
        float _1971 = fma(_979, cbModelParam._m0[21u].z, fma(_978, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _977));
        float _1974 = fma(_979, cbModelParam._m0[22u].z, fma(_978, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _977));
        float _1977 = fma(_979, cbModelParam._m0[23u].z, fma(_978, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _977));
        float _2115;
        if (_1971 > 0.0)
        {
            _2115 = abs((1.0 - _1960) / _1971);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1971 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1960 + 1.0) / _1971);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2115 = frontier_phi_28_24_ladder;
        }
        float _2380;
        if (_1974 > 0.0)
        {
            _2380 = abs((1.0 - _1964) / _1974);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1974 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1964 + 1.0) / _1974);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2380 = frontier_phi_40_35_ladder;
        }
        float _2585;
        if (_1977 > 0.0)
        {
            _2585 = abs((1.0 - _1968) / _1977);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1977 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1968 + 1.0) / _1977);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2585 = frontier_phi_49_46_ladder;
        }
        float _2587 = isnan(_2380) ? _2115 : (isnan(_2115) ? _2380 : min(_2115, _2380));
        float _2588 = isnan(_2585) ? _2587 : (isnan(_2587) ? _2585 : min(_2587, _2585));
        float _2592 = (_2588 * _1971) + _1960;
        float _2593 = (_2588 * _1974) + _1964;
        float _2594 = (_2588 * _1977) + _1968;
        float _2595 = _2588 * 9.9999997473787516355514526367188e-05;
        float _2596 = (-1.0) - _2595;
        float _2598 = _2595 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2594 > _2598) || ((_2594 < _2596) || ((_2593 > _2598) || ((_2593 < _2596) || ((_2592 < _2596) || (_2592 > _2598))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2793 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2594, cbModelParam._m0[17u].z, fma(_2593, cbModelParam._m0[17u].y, _2592 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2594, cbModelParam._m0[18u].z, fma(_2593, cbModelParam._m0[18u].y, _2592 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2594, cbModelParam._m0[19u].z, fma(_2593, cbModelParam._m0[19u].y, _2592 * cbModelParam._m0[19u].x))), _1906);
            frontier_phi_25_49_ladder = _2793.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2793.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2793.x * cbModelParam._m0[1u].z;
        }
        _1996 = frontier_phi_25_49_ladder_2;
        _1998 = frontier_phi_25_49_ladder_1;
        _2000 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1980 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_977, _978, _979), _1906);
        _1996 = _1980.x * cbModelParam._m0[1u].z;
        _1998 = _1980.y * cbModelParam._m0[1u].z;
        _2000 = _1980.z * cbModelParam._m0[1u].z;
    }
    float _2012 = ((((1.0 - _998) * ((_985 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_998 * _985)) * _969;
    float _2013 = _2012 * ((cbModelParam._m0[1u].w * (_1996 - _1897)) + _1897);
    float _2014 = _2012 * ((cbModelParam._m0[1u].w * (_1998 - _1899)) + _1899);
    float _2015 = _2012 * ((cbModelParam._m0[1u].w * (_2000 - _1901)) + _1901);
    float _2018 = fma(_2015, cbSceneParam._m0[89u].z, fma(_2014, cbSceneParam._m0[89u].y, _2013 * cbSceneParam._m0[89u].x));
    float _2021 = fma(_2015, cbSceneParam._m0[90u].z, fma(_2014, cbSceneParam._m0[90u].y, _2013 * cbSceneParam._m0[90u].x));
    float _2024 = fma(_2015, cbSceneParam._m0[91u].z, fma(_2014, cbSceneParam._m0[91u].y, _2013 * cbSceneParam._m0[91u].x));
    uvec4 _2034 = floatBitsToUint(cbInstanceData._m0[_279 + 5u]);
    uint _2036 = _2034.x * 14u;
    uint _2037 = _2036 + 13u;
    float _2044 = _969 + (-1.0);
    float _2049 = (cbLight._m0[_2037].x * _2044) + 1.0;
    float _2050 = (cbLight._m0[_2037].y * _2044) + 1.0;
    float _2051 = (cbLight._m0[_2037].z * _2044) + 1.0;
    float _2052 = (cbLight._m0[_2037].w * _2044) + 1.0;
    uint _2053 = _2036 + 5u;
    float _2059 = isnan(1.0) ? _2050 : (isnan(_2050) ? 1.0 : min(_2050, 1.0));
    uint _2063 = _2036 + 4u;
    float _2069 = isnan(1.0) ? _2049 : (isnan(_2049) ? 1.0 : min(_2049, 1.0));
    uint _2073 = _2036 | 1u;
    float _2084 = dot(vec3(cbLight._m0[_2036].xyz), vec3(_807, _808, _809));
    float _2087 = dot(vec3(cbLight._m0[_2073].xyz), vec3(_807, _808, _809));
    float _4338 = isnan(0.0) ? _2084 : (isnan(_2084) ? 0.0 : max(_2084, 0.0));
    float _4349 = isnan(0.0) ? _2087 : (isnan(_2087) ? 0.0 : max(_2087, 0.0));
    float _2092 = (isnan(1.0) ? _4338 : (isnan(_4338) ? 1.0 : min(_4338, 1.0))) * 0.3183098733425140380859375;
    float _2094 = (isnan(1.0) ? _4349 : (isnan(_4349) ? 1.0 : min(_4349, 1.0))) * 0.3183098733425140380859375;
    float _2101 = ((cbLight._m0[_2053].x * _2059) * _2094) + ((cbLight._m0[_2063].x * _2069) * _2092);
    float _2102 = ((_2059 * cbLight._m0[_2053].y) * _2094) + ((_2069 * cbLight._m0[_2063].y) * _2092);
    float _2103 = ((_2059 * cbLight._m0[_2053].z) * _2094) + ((_2069 * cbLight._m0[_2063].z) * _2092);
    uvec4 _2107 = floatBitsToUint(cbLight._m0[_2036 + 12u]);
    bool _2109 = _2107.x == 0u;
    float _2120;
    float _2122;
    float _2124;
    if (_2109)
    {
        _2120 = _2101;
        _2122 = _2102;
        _2124 = _2103;
    }
    else
    {
        uint _2128 = _2036 + 6u;
        float _2144 = (dot(vec3(cbLight._m0[_2036 + 2u].xyz), vec3(_807, _808, _809)) * 0.5) + 0.5;
        float _2145 = _2144 * _2144;
        float _4360 = isnan(0.0) ? _2145 : (isnan(_2145) ? 0.0 : max(_2145, 0.0));
        float _2146 = isnan(1.0) ? _4360 : (isnan(_4360) ? 1.0 : min(_4360, 1.0));
        float _2147 = isnan(1.0) ? _2051 : (isnan(_2051) ? 1.0 : min(_2051, 1.0));
        _2120 = (((cbLight._m0[_2128].x * 0.3183098733425140380859375) * _2146) * _2147) + _2101;
        _2122 = (((cbLight._m0[_2128].y * 0.3183098733425140380859375) * _2146) * _2147) + _2102;
        _2124 = (((cbLight._m0[_2128].z * 0.3183098733425140380859375) * _2146) * _2147) + _2103;
    }
    bool _2127 = _2107.y == 0u;
    float _2165;
    float _2167;
    float _2169;
    if (_2127)
    {
        _2165 = _2120;
        _2167 = _2122;
        _2169 = _2124;
    }
    else
    {
        uint _2324 = _2036 + 7u;
        float _2340 = (dot(vec3(cbLight._m0[_2036 + 3u].xyz), vec3(_807, _808, _809)) * 0.5) + 0.5;
        float _2341 = _2340 * _2340;
        float _4376 = isnan(0.0) ? _2341 : (isnan(_2341) ? 0.0 : max(_2341, 0.0));
        float _2342 = isnan(1.0) ? _4376 : (isnan(_4376) ? 1.0 : min(_4376, 1.0));
        float _2343 = isnan(1.0) ? _2052 : (isnan(_2052) ? 1.0 : min(_2052, 1.0));
        _2165 = (((cbLight._m0[_2324].x * 0.3183098733425140380859375) * _2342) * _2343) + _2120;
        _2167 = (((cbLight._m0[_2324].y * 0.3183098733425140380859375) * _2342) * _2343) + _2122;
        _2169 = (((cbLight._m0[_2324].z * 0.3183098733425140380859375) * _2342) * _2343) + _2124;
    }
    uint _2172 = _2036 + 8u;
    float _2185 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2036].w)) * _810) * 0.949999988079071044921875);
    float _2186 = _2185 * _2185;
    float _2187 = cbLight._m0[_2036].x + _886;
    float _2188 = cbLight._m0[_2036].y + _887;
    float _2189 = cbLight._m0[_2036].z + _888;
    float _2193 = inversesqrt(dot(vec3(_2187, _2188, _2189), vec3(_2187, _2188, _2189)));
    float _2194 = _2193 * _2187;
    float _2195 = _2193 * _2188;
    float _2196 = _2193 * _2189;
    float _2197 = dot(vec3(_807, _808, _809), vec3(cbLight._m0[_2036].xyz));
    float _4392 = isnan(0.0) ? _2197 : (isnan(_2197) ? 0.0 : max(_2197, 0.0));
    float _2200 = isnan(1.0) ? _4392 : (isnan(_4392) ? 1.0 : min(_4392, 1.0));
    float _4403 = isnan(0.0) ? _970 : (isnan(_970) ? 0.0 : max(_970, 0.0));
    float _2201 = isnan(1.0) ? _4403 : (isnan(_4403) ? 1.0 : min(_4403, 1.0));
    float _2202 = dot(vec3(_807, _808, _809), vec3(_2194, _2195, _2196));
    float _4414 = isnan(0.0) ? _2202 : (isnan(_2202) ? 0.0 : max(_2202, 0.0));
    float _2205 = isnan(1.0) ? _4414 : (isnan(_4414) ? 1.0 : min(_4414, 1.0));
    float _2206 = dot(vec3(cbLight._m0[_2036].xyz), vec3(_2194, _2195, _2196));
    float _4425 = isnan(0.0) ? _2206 : (isnan(_2206) ? 0.0 : max(_2206, 0.0));
    float _2210 = _2186 * _2186;
    float _2214 = ((_2205 * _2205) * (_2210 + (-1.0))) + 1.0;
    float _2225 = (exp2(log2(1.0 - (isnan(1.0) ? _4425 : (isnan(_4425) ? 1.0 : min(_4425, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2226 = 1.0 - _2186;
    float _2237 = (0.5 / (((_2201 * ((_2200 * _2226) + _2186)) + 9.9999999392252902907785028219223e-09) + (((_2201 * _2226) + _2186) * _2200))) * _2200;
    float _4436 = isnan(0.0) ? _2237 : (isnan(_2237) ? 0.0 : max(_2237, 0.0));
    float _2239 = (isnan(1.0) ? _4436 : (isnan(_4436) ? 1.0 : min(_4436, 1.0))) * (_2210 / ((_2214 * _2214) * 3.141590118408203125));
    uint _2250 = _2036 + 9u;
    float _2261 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2073].w)) * _810) * 0.949999988079071044921875);
    float _2262 = _2261 * _2261;
    float _2263 = cbLight._m0[_2073].x + _886;
    float _2264 = cbLight._m0[_2073].y + _887;
    float _2265 = cbLight._m0[_2073].z + _888;
    float _2269 = inversesqrt(dot(vec3(_2263, _2264, _2265), vec3(_2263, _2264, _2265)));
    float _2270 = _2269 * _2263;
    float _2271 = _2269 * _2264;
    float _2272 = _2269 * _2265;
    float _2273 = dot(vec3(_807, _808, _809), vec3(cbLight._m0[_2073].xyz));
    float _4447 = isnan(0.0) ? _2273 : (isnan(_2273) ? 0.0 : max(_2273, 0.0));
    float _2276 = isnan(1.0) ? _4447 : (isnan(_4447) ? 1.0 : min(_4447, 1.0));
    float _2277 = dot(vec3(_807, _808, _809), vec3(_2270, _2271, _2272));
    float _4458 = isnan(0.0) ? _2277 : (isnan(_2277) ? 0.0 : max(_2277, 0.0));
    float _2280 = isnan(1.0) ? _4458 : (isnan(_4458) ? 1.0 : min(_4458, 1.0));
    float _2281 = dot(vec3(cbLight._m0[_2073].xyz), vec3(_2270, _2271, _2272));
    float _4469 = isnan(0.0) ? _2281 : (isnan(_2281) ? 0.0 : max(_2281, 0.0));
    float _2285 = _2262 * _2262;
    float _2289 = ((_2280 * _2280) * (_2285 + (-1.0))) + 1.0;
    float _2298 = (exp2(log2(1.0 - (isnan(1.0) ? _4469 : (isnan(_4469) ? 1.0 : min(_4469, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2299 = 1.0 - _2262;
    float _2309 = (0.5 / (((_2201 * ((_2276 * _2299) + _2262)) + 9.9999999392252902907785028219223e-09) + (((_2201 * _2299) + _2262) * _2276))) * _2276;
    float _4480 = isnan(0.0) ? _2309 : (isnan(_2309) ? 0.0 : max(_2309, 0.0));
    float _2311 = (isnan(1.0) ? _4480 : (isnan(_4480) ? 1.0 : min(_4480, 1.0))) * (_2285 / ((_2289 * _2289) * 3.141590118408203125));
    float _2321 = (((_2298 * cbLight._m0[_2250].x) * _2311) * _2059) + (((_2225 * cbLight._m0[_2172].x) * _2239) * _2069);
    float _2322 = (((_2298 * cbLight._m0[_2250].y) * _2311) * _2059) + (((_2225 * cbLight._m0[_2172].y) * _2239) * _2069);
    float _2323 = (((_2298 * cbLight._m0[_2250].z) * _2311) * _2059) + (((_2225 * cbLight._m0[_2172].z) * _2239) * _2069);
    float _2385;
    float _2387;
    float _2389;
    if (_2109)
    {
        _2385 = _2321;
        _2387 = _2322;
        _2389 = _2323;
    }
    else
    {
        uint _2391 = _2036 + 2u;
        uint _2395 = _2036 + 10u;
        float _2409 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2391].w)) * _810) * 0.949999988079071044921875);
        float _2410 = _2409 * _2409;
        float _2411 = cbLight._m0[_2391].x + _886;
        float _2412 = cbLight._m0[_2391].y + _887;
        float _2413 = cbLight._m0[_2391].z + _888;
        float _2417 = inversesqrt(dot(vec3(_2411, _2412, _2413), vec3(_2411, _2412, _2413)));
        float _2418 = _2417 * _2411;
        float _2419 = _2417 * _2412;
        float _2420 = _2417 * _2413;
        float _2421 = dot(vec3(_807, _808, _809), vec3(cbLight._m0[_2391].xyz));
        float _4491 = isnan(0.0) ? _2421 : (isnan(_2421) ? 0.0 : max(_2421, 0.0));
        float _2424 = isnan(1.0) ? _4491 : (isnan(_4491) ? 1.0 : min(_4491, 1.0));
        float _2425 = dot(vec3(_807, _808, _809), vec3(_2418, _2419, _2420));
        float _4502 = isnan(0.0) ? _2425 : (isnan(_2425) ? 0.0 : max(_2425, 0.0));
        float _2428 = isnan(1.0) ? _4502 : (isnan(_4502) ? 1.0 : min(_4502, 1.0));
        float _2429 = dot(vec3(cbLight._m0[_2391].xyz), vec3(_2418, _2419, _2420));
        float _4513 = isnan(0.0) ? _2429 : (isnan(_2429) ? 0.0 : max(_2429, 0.0));
        float _2433 = _2410 * _2410;
        float _2437 = ((_2428 * _2428) * (_2433 + (-1.0))) + 1.0;
        float _2446 = (exp2(log2(1.0 - (isnan(1.0) ? _4513 : (isnan(_4513) ? 1.0 : min(_4513, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2447 = 1.0 - _2410;
        float _2457 = (0.5 / (((_2201 * ((_2424 * _2447) + _2410)) + 9.9999999392252902907785028219223e-09) + (((_2201 * _2447) + _2410) * _2424))) * _2424;
        float _4524 = isnan(0.0) ? _2457 : (isnan(_2457) ? 0.0 : max(_2457, 0.0));
        float _2459 = (isnan(1.0) ? _4524 : (isnan(_4524) ? 1.0 : min(_4524, 1.0))) * (_2433 / ((_2437 * _2437) * 3.141590118408203125));
        float _2460 = isnan(1.0) ? _2051 : (isnan(_2051) ? 1.0 : min(_2051, 1.0));
        _2385 = (((_2446 * cbLight._m0[_2395].x) * _2459) * _2460) + _2321;
        _2387 = (((_2446 * cbLight._m0[_2395].y) * _2459) * _2460) + _2322;
        _2389 = (((_2446 * cbLight._m0[_2395].z) * _2459) * _2460) + _2323;
    }
    float _2495;
    float _2497;
    float _2499;
    if (_2127)
    {
        _2495 = _2385;
        _2497 = _2387;
        _2499 = _2389;
    }
    else
    {
        uint _2506 = _2036 + 3u;
        uint _2510 = _2036 + 11u;
        float _2524 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2506].w)) * _810) * 0.949999988079071044921875);
        float _2525 = _2524 * _2524;
        float _2526 = cbLight._m0[_2506].x + _886;
        float _2527 = cbLight._m0[_2506].y + _887;
        float _2528 = cbLight._m0[_2506].z + _888;
        float _2532 = inversesqrt(dot(vec3(_2526, _2527, _2528), vec3(_2526, _2527, _2528)));
        float _2533 = _2532 * _2526;
        float _2534 = _2532 * _2527;
        float _2535 = _2532 * _2528;
        float _2536 = dot(vec3(_807, _808, _809), vec3(cbLight._m0[_2506].xyz));
        float _4540 = isnan(0.0) ? _2536 : (isnan(_2536) ? 0.0 : max(_2536, 0.0));
        float _2539 = isnan(1.0) ? _4540 : (isnan(_4540) ? 1.0 : min(_4540, 1.0));
        float _2540 = dot(vec3(_807, _808, _809), vec3(_2533, _2534, _2535));
        float _4551 = isnan(0.0) ? _2540 : (isnan(_2540) ? 0.0 : max(_2540, 0.0));
        float _2543 = isnan(1.0) ? _4551 : (isnan(_4551) ? 1.0 : min(_4551, 1.0));
        float _2544 = dot(vec3(cbLight._m0[_2506].xyz), vec3(_2533, _2534, _2535));
        float _4562 = isnan(0.0) ? _2544 : (isnan(_2544) ? 0.0 : max(_2544, 0.0));
        float _2548 = _2525 * _2525;
        float _2552 = ((_2543 * _2543) * (_2548 + (-1.0))) + 1.0;
        float _2561 = (exp2(log2(1.0 - (isnan(1.0) ? _4562 : (isnan(_4562) ? 1.0 : min(_4562, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2562 = 1.0 - _2525;
        float _2572 = (0.5 / (((_2201 * ((_2539 * _2562) + _2525)) + 9.9999999392252902907785028219223e-09) + (((_2201 * _2562) + _2525) * _2539))) * _2539;
        float _4573 = isnan(0.0) ? _2572 : (isnan(_2572) ? 0.0 : max(_2572, 0.0));
        float _2574 = (isnan(1.0) ? _4573 : (isnan(_4573) ? 1.0 : min(_4573, 1.0))) * (_2548 / ((_2552 * _2552) * 3.141590118408203125));
        float _2575 = isnan(1.0) ? _2052 : (isnan(_2052) ? 1.0 : min(_2052, 1.0));
        _2495 = (((_2561 * cbLight._m0[_2510].x) * _2574) * _2575) + _2385;
        _2497 = (((_2561 * cbLight._m0[_2510].y) * _2574) * _2575) + _2387;
        _2499 = (((_2561 * cbLight._m0[_2510].z) * _2574) * _2575) + _2389;
    }
    float _2710;
    float _2712;
    float _2714;
    float _2716;
    float _2718;
    float _2720;
    if (_2034.y == 0u)
    {
        float _2650 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2651 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2650;
        float _2652 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2650;
        float _2653 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2650;
        uvec4 _2665 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2666 = _2665.x;
        uint _2677 = uint((float(_2665.y) * floor(float(uint(cbSceneParam._m0[85u].y * _907) / _2666))) + floor(float(uint(cbSceneParam._m0[85u].x * _906) / _2666)));
        float _2687 = (log2(_2653 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2688 = isnan(0.0) ? _2687 : (isnan(_2687) ? 0.0 : max(_2687, 0.0));
        uint _2691 = uint(isnan(14.0) ? _2688 : (isnan(_2688) ? 14.0 : min(_2688, 14.0)));
        uvec4 _2696 = texelFetch(g_lightClusterGridBuffer, int(((_2691 << 2u) + (_2677 << 6u)) >> 2u));
        uint _2697 = _2696.x;
        uint _2698 = _2665.z;
        float _2798;
        float _2800;
        float _2802;
        float _2804;
        float _2806;
        float _2808;
        if (((((1u << ((_2698 >> 4u) & 15u)) + 4294967295u) & _2697) == 0u) || ((_2698 & 240u) == 0u))
        {
            _2798 = 0.0;
            _2800 = 0.0;
            _2802 = 0.0;
            _2804 = 0.0;
            _2806 = 0.0;
            _2808 = 0.0;
        }
        else
        {
            float _2799;
            float _2801;
            float _2803;
            float _2805;
            float _2807;
            float _2809;
            float _2951 = 0.0;
            float _2952 = 0.0;
            float _2953 = 0.0;
            float _2954 = 0.0;
            float _2955 = 0.0;
            float _2956 = 0.0;
            uint _2957 = 0u;
            uint _2966;
            bool _2967;
            for (;;)
            {
                _2966 = texelFetch(g_lightClassification, int((((_2691 << 5u) + (_2677 << 9u)) + (_2957 << 2u)) >> 2u)).x;
                _2967 = _2966 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2967)
                {
                    frontier_phi_66_pred = _2951;
                    frontier_phi_66_pred_1 = _2956;
                    frontier_phi_66_pred_2 = _2955;
                    frontier_phi_66_pred_3 = _2954;
                    frontier_phi_66_pred_4 = _2953;
                    frontier_phi_66_pred_5 = _2952;
                }
                else
                {
                    float _3096;
                    float _3097;
                    float _3098;
                    float _3099;
                    float _3100;
                    float _3101;
                    uint _3102;
                    _3096 = _2951;
                    _3097 = _2952;
                    _3098 = _2953;
                    _3099 = _2954;
                    _3100 = _2955;
                    _3101 = _2956;
                    _3102 = _2966;
                    float _3023;
                    float _3024;
                    float _3025;
                    float _3026;
                    float _3027;
                    float _3028;
                    for (;;)
                    {
                        uint _3106 = uint(findLSB(_3102)) + (_2957 << 5u);
                        uint _3103 = (_3102 + 4294967295u) & _3102;
                        uint _3108 = _3106 * 48u;
                        vec4 _3122 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3108)).x, texelFetch(g_PointLightRenderingBuffer, int(_3108 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3108 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3108 + 3u)).x));
                        uint _3128 = (_3106 * 48u) + 4u;
                        vec4 _3141 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3128)).x, texelFetch(g_PointLightRenderingBuffer, int(_3128 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3128 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3128 + 3u)).x));
                        uint _3147 = (_3106 * 48u) + 8u;
                        vec3 _3158 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3147)).x, texelFetch(g_PointLightRenderingBuffer, int(_3147 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3147 + 2u)).x));
                        float _3162 = _3122.x - _2651;
                        float _3163 = _3122.y - _2652;
                        float _3164 = _3122.z - _2653;
                        float _3165 = dot(vec3(_3162, _3163, _3164), vec3(_3162, _3163, _3164));
                        float _3168 = inversesqrt(_3165);
                        float _3169 = _3168 * _3162;
                        float _3170 = _3168 * _3163;
                        float _3171 = _3168 * _3164;
                        float _3172 = dot(vec3(_925, _928, _931), vec3(_3169, _3170, _3171));
                        float _3177 = 1.0 - (_3165 * _3122.w);
                        float _4599 = isnan(0.0) ? _3177 : (isnan(_3177) ? 0.0 : max(_3177, 0.0));
                        float _3178 = isnan(1.0) ? _4599 : (isnan(_4599) ? 1.0 : min(_4599, 1.0));
                        float _3179 = sqrt(_3165) * _3141.w;
                        float _3182 = 1.39999997615814208984375 / (_3179 + 1.39999997615814208984375);
                        float _3183 = _3182 * _3182;
                        float _3186 = ((1.0 - _3183) * _3172) + _3183;
                        float _3189 = _3179 * _3179;
                        float _3193 = ((isnan(0.0) ? _3186 : (isnan(_3186) ? 0.0 : max(_3186, 0.0))) * _3178) / ((_3189 * 0.699999988079071044921875) + 1.0);
                        float _3197 = (-0.0) - _2651;
                        float _3198 = (-0.0) - _2652;
                        float _3199 = (-0.0) - _2653;
                        float _3203 = inversesqrt(dot(vec3(_3197, _3198, _3199), vec3(_3197, _3198, _3199)));
                        float _3204 = _3203 * _3197;
                        float _3205 = _3203 * _3198;
                        float _3206 = _3203 * _3199;
                        float _3214 = exp2(log2(1.0 / ((_3189 * 3.5) + 5.0)) * 0.25);
                        float _3215 = 1.0 - _985;
                        float _3222 = sqrt(1.0 - ((1.0 - (_3215 * _3215)) * (1.0 - (_3214 * _3214))));
                        float _3223 = _3222 * _3222;
                        float _3224 = _3223 * _3223;
                        float _3225 = _3204 + _3169;
                        float _3226 = _3205 + _3170;
                        float _3227 = _3206 + _3171;
                        float _3231 = inversesqrt(dot(vec3(_3225, _3226, _3227), vec3(_3225, _3226, _3227)));
                        float _3235 = dot(vec3(_925, _928, _931), vec3(_3204, _3205, _3206));
                        float _4615 = isnan(0.0) ? _3235 : (isnan(_3235) ? 0.0 : max(_3235, 0.0));
                        float _3238 = isnan(1.0) ? _4615 : (isnan(_4615) ? 1.0 : min(_4615, 1.0));
                        float _3239 = dot(vec3(_925, _928, _931), vec3(_3231 * _3225, _3231 * _3226, _3231 * _3227));
                        float _4626 = isnan(0.0) ? _3239 : (isnan(_3239) ? 0.0 : max(_3239, 0.0));
                        float _3242 = isnan(1.0) ? _4626 : (isnan(_4626) ? 1.0 : min(_4626, 1.0));
                        float _3246 = ((_3242 * _3242) * (_3224 + (-1.0))) + 1.0;
                        float _3247 = _3182 * _3223;
                        float _3248 = _3247 * _3247;
                        float _3251 = ((1.0 - _3248) * _3172) + _3248;
                        float _4637 = isnan(0.0) ? _3251 : (isnan(_3251) ? 0.0 : max(_3251, 0.0));
                        float _3252 = isnan(1.0) ? _4637 : (isnan(_4637) ? 1.0 : min(_4637, 1.0));
                        float _3253 = 1.0 - _3223;
                        float _3263 = (0.5 / (((_3252 * ((_3238 * _3253) + _3223)) + 9.9999999392252902907785028219223e-09) + (((_3252 * _3253) + _3223) * _3238))) * _3252;
                        float _4648 = isnan(0.0) ? _3263 : (isnan(_3263) ? 0.0 : max(_3263, 0.0));
                        float _3274 = (((_3224 * 3.1415927410125732421875) * (isnan(1.0) ? _4648 : (isnan(_4648) ? 1.0 : min(_4648, 1.0)))) / ((_3246 * _3246) * ((_3189 * 2.1991131305694580078125) + 3.141590118408203125))) * _3178;
                        _3026 = (_3193 * _3141.x) + _3099;
                        _3027 = (_3193 * _3141.y) + _3100;
                        _3028 = (_3193 * _3141.z) + _3101;
                        _3023 = (_3274 * _3158.x) + _3096;
                        _3024 = (_3274 * _3158.y) + _3097;
                        _3025 = (_3274 * _3158.z) + _3098;
                        if (_3103 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3096 = _3023;
                            _3097 = _3024;
                            _3098 = _3025;
                            _3099 = _3026;
                            _3100 = _3027;
                            _3101 = _3028;
                            _3102 = _3103;
                        }
                    }
                    frontier_phi_66_pred = _3023;
                    frontier_phi_66_pred_1 = _3028;
                    frontier_phi_66_pred_2 = _3027;
                    frontier_phi_66_pred_3 = _3026;
                    frontier_phi_66_pred_4 = _3025;
                    frontier_phi_66_pred_5 = _3024;
                }
                _2799 = frontier_phi_66_pred;
                _2809 = frontier_phi_66_pred_1;
                _2807 = frontier_phi_66_pred_2;
                _2805 = frontier_phi_66_pred_3;
                _2803 = frontier_phi_66_pred_4;
                _2801 = frontier_phi_66_pred_5;
                uint _2958 = _2957 + 1u;
                if (_2958 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2951 = _2799;
                    _2952 = _2801;
                    _2953 = _2803;
                    _2954 = _2805;
                    _2955 = _2807;
                    _2956 = _2809;
                    _2957 = _2958;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2798 = _2799;
            _2800 = _2801;
            _2802 = _2803;
            _2804 = _2805;
            _2806 = _2807;
            _2808 = _2809;
        }
        uvec4 _2812 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2813 = _2812.z;
        uint _2815 = (_2813 >> 8u) & 15u;
        float _2919;
        float _2921;
        float _2923;
        float _2925;
        float _2927;
        float _2929;
        if (((4294967295u << _2815) & _2697) == 0u)
        {
            _2919 = _2798;
            _2921 = _2800;
            _2923 = _2802;
            _2925 = _2804;
            _2927 = _2806;
            _2929 = _2808;
        }
        else
        {
            float _2944 = inversesqrt(dot(vec3(_2651, _2652, _2653), vec3(_2651, _2652, _2653)));
            float _2945 = _2944 * _2651;
            float _2946 = _2944 * _2652;
            float _2947 = _2944 * _2653;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2815 < ((_2813 >> 12u) & 15u))
            {
                float _2920;
                float _2922;
                float _2924;
                float _2926;
                float _2928;
                float _2930;
                float _3079 = _2798;
                float _3080 = _2800;
                float _3081 = _2802;
                float _3082 = _2804;
                float _3083 = _2806;
                float _3084 = _2808;
                uint _3085 = _2815;
                uint _3094;
                bool _3095;
                for (;;)
                {
                    _3094 = texelFetch(g_lightClassification, int((((_2691 << 5u) + (_2677 << 9u)) + (_3085 << 2u)) >> 2u)).x;
                    _3095 = _3094 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_3095)
                    {
                        frontier_phi_77_pred = _3084;
                        frontier_phi_77_pred_1 = _3083;
                        frontier_phi_77_pred_2 = _3082;
                        frontier_phi_77_pred_3 = _3081;
                        frontier_phi_77_pred_4 = _3080;
                        frontier_phi_77_pred_5 = _3079;
                    }
                    else
                    {
                        float _3288;
                        float _3289;
                        float _3290;
                        float _3291;
                        float _3292;
                        float _3293;
                        float _3581;
                        float _3582;
                        float _3583;
                        float _3584;
                        float _3585;
                        float _3586;
                        float _3301 = _3079;
                        float _3302 = _3080;
                        float _3303 = _3081;
                        float _3304 = _3082;
                        float _3305 = _3083;
                        float _3306 = _3084;
                        uint _3307 = _3094;
                        uint _3308;
                        vec4 _3333;
                        float _3334;
                        vec4 _3349;
                        vec3 _3361;
                        vec4 _3376;
                        vec4 _3391;
                        float _3437;
                        bool _3438;
                        for (;;)
                        {
                            uint _3318 = ((_3085 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3307));
                            _3308 = (_3307 + 4294967295u) & _3307;
                            uint _3320 = _3318 * 40u;
                            _3333 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3320)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3320 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3320 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3320 + 3u)).x));
                            _3334 = _3333.w;
                            uint _3336 = (_3318 * 40u) + 4u;
                            _3349 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3336)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3336 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3336 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3336 + 3u)).x));
                            uint _3351 = (_3318 * 40u) + 8u;
                            _3361 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3351)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3351 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3351 + 2u)).x));
                            uint _3363 = (_3318 * 40u) + 16u;
                            _3376 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3363)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3363 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3363 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3363 + 3u)).x));
                            uint _3378 = (_3318 * 40u) + 20u;
                            _3391 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3378)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3378 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3378 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3378 + 3u)).x));
                            uint _3393 = (_3318 * 40u) + 24u;
                            vec4 _3406 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3393)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3393 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3393 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3393 + 3u)).x));
                            uint _3412 = (_3318 * 40u) + 28u;
                            vec4 _3425 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3412)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3412 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3412 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3412 + 3u)).x));
                            _3437 = fma(_2653, _3425.z, fma(_2652, _3425.y, _3425.x * _2651)) + _3425.w;
                            _3438 = !((fma(_2653, _3406.z, fma(_2652, _3406.y, _3406.x * _2651)) + _3406.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3438)
                            {
                                float _3465 = _3333.x - _2651;
                                float _3466 = _3333.y - _2652;
                                float _3467 = _3333.z - _2653;
                                float _3468 = dot(vec3(_3465, _3466, _3467), vec3(_3465, _3466, _3467));
                                float _3471 = inversesqrt(_3468);
                                float _3472 = _3471 * _3465;
                                float _3473 = _3471 * _3466;
                                float _3474 = _3471 * _3467;
                                float _3478 = 1.0 - (_3468 / (_3334 * _3334));
                                float _4659 = isnan(0.0) ? _3478 : (isnan(_3478) ? 0.0 : max(_3478, 0.0));
                                float _3479 = isnan(1.0) ? _4659 : (isnan(_4659) ? 1.0 : min(_4659, 1.0));
                                float _3483 = sqrt(_3468) * _3349.w;
                                float _3485 = 1.39999997615814208984375 / (_3483 + 1.39999997615814208984375);
                                float _3486 = _3485 * _3485;
                                float _3489 = ((1.0 - _3486) * dot(vec3(_3472, _3473, _3474), vec3(_925, _928, _931))) + _3486;
                                float _3492 = _3483 * _3483;
                                float _3496 = (fma(_2653, _3376.z, fma(_2652, _3376.y, _3376.x * _2651)) + _3376.w) / _3437;
                                float _3497 = (fma(_2653, _3391.z, fma(_2652, _3391.y, _3391.x * _2651)) + _3391.w) / _3437;
                                float _3501 = 1.0 - dot(vec2(_3496, _3497), vec2(_3496, _3497));
                                float _4675 = isnan(0.0) ? _3501 : (isnan(_3501) ? 0.0 : max(_3501, 0.0));
                                float _3502 = isnan(1.0) ? _4675 : (isnan(_4675) ? 1.0 : min(_4675, 1.0));
                                float _3503 = _3502 * (((isnan(0.0) ? _3489 : (isnan(_3489) ? 0.0 : max(_3489, 0.0))) * _3479) / ((_3492 * 0.699999988079071044921875) + 1.0));
                                float _3515 = exp2(log2(1.0 / ((_3492 * 3.5) + 5.0)) * 0.25);
                                float _3516 = 1.0 - _985;
                                float _3523 = sqrt(1.0 - ((1.0 - (_3516 * _3516)) * (1.0 - (_3515 * _3515))));
                                float _3524 = _3523 * _3523;
                                float _3525 = _3524 * _3524;
                                float _3526 = _3472 - _2945;
                                float _3527 = _3473 - _2946;
                                float _3528 = _3474 - _2947;
                                float _3532 = inversesqrt(dot(vec3(_3526, _3527, _3528), vec3(_3526, _3527, _3528)));
                                float _3536 = dot(vec3(_925, _928, _931), vec3((-0.0) - _2945, (-0.0) - _2946, (-0.0) - _2947));
                                float _4686 = isnan(0.0) ? _3536 : (isnan(_3536) ? 0.0 : max(_3536, 0.0));
                                float _3539 = isnan(1.0) ? _4686 : (isnan(_4686) ? 1.0 : min(_4686, 1.0));
                                float _3540 = dot(vec3(_925, _928, _931), vec3(_3532 * _3526, _3532 * _3527, _3532 * _3528));
                                float _4697 = isnan(0.0) ? _3540 : (isnan(_3540) ? 0.0 : max(_3540, 0.0));
                                float _3543 = isnan(1.0) ? _4697 : (isnan(_4697) ? 1.0 : min(_4697, 1.0));
                                float _3547 = ((_3543 * _3543) * (_3525 + (-1.0))) + 1.0;
                                float _3548 = _3485 * _3524;
                                float _3549 = _3548 * _3548;
                                float _3555 = ((1.0 - _3549) * dot(vec3(_925, _928, _931), vec3(_3472, _3473, _3474))) + _3549;
                                float _4708 = isnan(0.0) ? _3555 : (isnan(_3555) ? 0.0 : max(_3555, 0.0));
                                float _3556 = isnan(1.0) ? _4708 : (isnan(_4708) ? 1.0 : min(_4708, 1.0));
                                float _3557 = 1.0 - _3524;
                                float _3567 = (0.5 / (((_3556 * ((_3539 * _3557) + _3524)) + 9.9999999392252902907785028219223e-09) + (((_3556 * _3557) + _3524) * _3539))) * _3556;
                                float _4719 = isnan(0.0) ? _3567 : (isnan(_3567) ? 0.0 : max(_3567, 0.0));
                                float _3577 = (_3502 * _3479) * (((_3525 * 3.1415927410125732421875) * (isnan(1.0) ? _4719 : (isnan(_4719) ? 1.0 : min(_4719, 1.0)))) / ((_3547 * _3547) * ((_3492 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3503 * _3349.y;
                                frontier_phi_83_pred_1 = _3503 * _3349.x;
                                frontier_phi_83_pred_2 = _3577 * _3361.z;
                                frontier_phi_83_pred_3 = _3577 * _3361.y;
                                frontier_phi_83_pred_4 = _3577 * _3361.x;
                                frontier_phi_83_pred_5 = _3503 * _3349.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3585 = frontier_phi_83_pred;
                            _3584 = frontier_phi_83_pred_1;
                            _3583 = frontier_phi_83_pred_2;
                            _3582 = frontier_phi_83_pred_3;
                            _3581 = frontier_phi_83_pred_4;
                            _3586 = frontier_phi_83_pred_5;
                            _3291 = _3584 + _3304;
                            _3292 = _3585 + _3305;
                            _3293 = _3586 + _3306;
                            _3288 = _3581 + _3301;
                            _3289 = _3582 + _3302;
                            _3290 = _3583 + _3303;
                            if (_3308 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3301 = _3288;
                                _3302 = _3289;
                                _3303 = _3290;
                                _3304 = _3291;
                                _3305 = _3292;
                                _3306 = _3293;
                                _3307 = _3308;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3293;
                        frontier_phi_77_pred_1 = _3292;
                        frontier_phi_77_pred_2 = _3291;
                        frontier_phi_77_pred_3 = _3290;
                        frontier_phi_77_pred_4 = _3289;
                        frontier_phi_77_pred_5 = _3288;
                    }
                    _2930 = frontier_phi_77_pred;
                    _2928 = frontier_phi_77_pred_1;
                    _2926 = frontier_phi_77_pred_2;
                    _2924 = frontier_phi_77_pred_3;
                    _2922 = frontier_phi_77_pred_4;
                    _2920 = frontier_phi_77_pred_5;
                    uint _3086 = _3085 + 1u;
                    if (_3086 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3079 = _2920;
                        _3080 = _2922;
                        _3081 = _2924;
                        _3082 = _2926;
                        _3083 = _2928;
                        _3084 = _2930;
                        _3085 = _3086;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2924;
                frontier_phi_58_59_ladder_1 = _2930;
                frontier_phi_58_59_ladder_2 = _2928;
                frontier_phi_58_59_ladder_3 = _2926;
                frontier_phi_58_59_ladder_4 = _2922;
                frontier_phi_58_59_ladder_5 = _2920;
            }
            else
            {
                frontier_phi_58_59_ladder = _2802;
                frontier_phi_58_59_ladder_1 = _2808;
                frontier_phi_58_59_ladder_2 = _2806;
                frontier_phi_58_59_ladder_3 = _2804;
                frontier_phi_58_59_ladder_4 = _2800;
                frontier_phi_58_59_ladder_5 = _2798;
            }
            _2919 = frontier_phi_58_59_ladder_5;
            _2921 = frontier_phi_58_59_ladder_4;
            _2923 = frontier_phi_58_59_ladder;
            _2925 = frontier_phi_58_59_ladder_3;
            _2927 = frontier_phi_58_59_ladder_2;
            _2929 = frontier_phi_58_59_ladder_1;
        }
        float _2934 = isnan(1.0) ? _969 : (isnan(_969) ? 1.0 : min(_969, 1.0));
        _2710 = (_2934 * _2925) + _2165;
        _2712 = (_2934 * _2927) + _2167;
        _2714 = (_2934 * _2929) + _2169;
        _2716 = ((_2919 * 0.039999999105930328369140625) * _2934) + _2495;
        _2718 = ((_2921 * 0.039999999105930328369140625) * _2934) + _2497;
        _2720 = ((_2923 * 0.039999999105930328369140625) * _2934) + _2499;
    }
    else
    {
        _2710 = _2165;
        _2712 = _2167;
        _2714 = _2169;
        _2716 = _2495;
        _2718 = _2497;
        _2720 = _2499;
    }
    float _4735 = isnan(0.0) ? _954 : (isnan(_954) ? 0.0 : max(_954, 0.0));
    float _4746 = isnan(0.0) ? _955 : (isnan(_955) ? 0.0 : max(_955, 0.0));
    float _4757 = isnan(0.0) ? _956 : (isnan(_956) ? 0.0 : max(_956, 0.0));
    float _2737 = ((isnan(1.0) ? _4735 : (isnan(_4735) ? 1.0 : min(_4735, 1.0))) * (_2710 + ((isnan(0.0) ? _1726 : (isnan(_1726) ? 0.0 : max(_1726, 0.0))) * _969))) + ((_2716 + ((isnan(0.0) ? _2018 : (isnan(_2018) ? 0.0 : max(_2018, 0.0))) * _1805)) * cbPerFrame._m0[3u].x);
    float _2738 = ((isnan(1.0) ? _4746 : (isnan(_4746) ? 1.0 : min(_4746, 1.0))) * (_2712 + ((isnan(0.0) ? _1729 : (isnan(_1729) ? 0.0 : max(_1729, 0.0))) * _969))) + ((_2718 + ((isnan(0.0) ? _2021 : (isnan(_2021) ? 0.0 : max(_2021, 0.0))) * _1805)) * cbPerFrame._m0[3u].x);
    float _2739 = ((isnan(1.0) ? _4757 : (isnan(_4757) ? 1.0 : min(_4757, 1.0))) * (_2714 + ((isnan(0.0) ? _1732 : (isnan(_1732) ? 0.0 : max(_1732, 0.0))) * _969))) + ((_2720 + ((isnan(0.0) ? _2024 : (isnan(_2024) ? 0.0 : max(_2024, 0.0))) * _1805)) * cbPerFrame._m0[3u].x);
    uint _2740 = _279 + 6u;
    float _2748 = _906 / cbSceneParam._m0[86u].x;
    float _2749 = _907 / cbSceneParam._m0[86u].y;
    vec4 _2763 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2748, _2749, (log2((isnan(cbSceneParam._m0[77u].w) ? _828 : (isnan(_828) ? cbSceneParam._m0[77u].w : min(_828, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2765 = _2763.x;
    float _2766 = _2763.y;
    float _2767 = _2763.z;
    float _2768 = _2763.w;
    float _2861;
    float _2863;
    float _2865;
    float _2867;
    if (_828 > cbSceneParam._m0[78u].w)
    {
        float _2823 = isnan(_828) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _828 : min(cbSceneParam._m0[80u].w, _828));
        float _2824 = _2823 / _828;
        float _2835 = _2824 * _879;
        float _2836 = _880 * _2824;
        float _2837 = (-0.0) - _2836;
        float _2839 = _2824 * _881;
        float _2841 = (cbSceneParam._m0[77u].w * _2837) / _2823;
        float _2842 = _2841 + cbSceneParam._m0[79u].w;
        float _2843 = cbSceneParam._m0[79u].w - _2836;
        float _2849 = sqrt(((_2835 * _2835) + (_2836 * _2836)) + (_2839 * _2839));
        float _2852 = (1.0 - (cbSceneParam._m0[77u].w / _2823)) * _2849;
        float _2857 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2859 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3036;
        if (abs((_2837 - _2841) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3036 = ((((_2842 > 0.0) ? exp2(_2857 * _2842) : (2.0 - exp2(_2859 * _2842))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2852;
        }
        else
        {
            float _2980 = 1.0 / cbSceneParam._m0[80u].x;
            float _2981 = isnan(_2843) ? _2842 : (isnan(_2842) ? _2843 : max(_2842, _2843));
            float _2982 = isnan(_2843) ? _2842 : (isnan(_2842) ? _2843 : min(_2842, _2843));
            float _2991 = isnan(0.0) ? _2981 : (isnan(_2981) ? 0.0 : min(_2981, 0.0));
            float _2992 = isnan(0.0) ? _2982 : (isnan(_2982) ? 0.0 : min(_2982, 0.0));
            _3036 = ((abs(_2849 / _2837) * cbSceneParam._m0[80u].y) * ((((_2991 - _2992) * 2.0) - ((exp2(_2857 * (isnan(0.0) ? _2981 : (isnan(_2981) ? 0.0 : max(_2981, 0.0)))) - exp2(_2857 * (isnan(0.0) ? _2982 : (isnan(_2982) ? 0.0 : max(_2982, 0.0))))) * _2980)) - ((exp2(_2859 * _2991) - exp2(_2859 * _2992)) * _2980))) + (_2852 * cbSceneParam._m0[80u].z);
        }
        vec4 _3038 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2748, _2749, 1.0), 0.0);
        float _3047 = exp2((_3036 * (-1.44269502162933349609375)) * (1.0 - _3038.w));
        float _3048 = log2(_3047);
        float _3064 = log2(_2768);
        _2861 = (exp2(_3064 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3048 * cbSceneParam._m0[78u].x)) * _3038.x) / cbSceneParam._m0[78u].x)) + _2765;
        _2863 = (exp2(_3064 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3048 * cbSceneParam._m0[78u].y)) * _3038.y) / cbSceneParam._m0[78u].y)) + _2766;
        _2865 = (exp2(_3064 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3048 * cbSceneParam._m0[78u].z)) * _3038.z) / cbSceneParam._m0[78u].z)) + _2767;
        _2867 = _3047 * _2768;
    }
    else
    {
        _2861 = _2765;
        _2863 = _2766;
        _2865 = _2767;
        _2867 = _2768;
    }
    bool _3074;
    vec4 _2877;
    vec4 _2899;
    float _2901;
    float _2905;
    float _2906;
    float _2907;
    float _2908;
    bool _2918;
    for (;;)
    {
        _2877 = cbMatDynParam._m0[0u];
        float _2879 = roundEven(_2877.y);
        bool _2880 = _2879 == 3.0;
        float _2881 = log2(_2867);
        float _2888 = exp2(_2881 * cbSceneParam._m0[78u].x) * _2737;
        float _2889 = exp2(_2881 * cbSceneParam._m0[78u].y) * _2738;
        float _2890 = exp2(_2881 * cbSceneParam._m0[78u].z) * _2739;
        float _2897 = _895 + (-0.5);
        _2899 = cbMtdParam._m0[1u];
        _2901 = _2899.y * _2897;
        float _2904 = (_2879 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2905 = _2904 * (_2880 ? _2888 : (_2888 + (cbSceneParam._m0[72u].w * _2861)));
        _2906 = _2904 * (_2880 ? _2889 : (_2889 + (cbSceneParam._m0[72u].w * _2863)));
        _2907 = _2904 * (_2880 ? _2890 : (_2890 + (cbSceneParam._m0[72u].w * _2865)));
        _2908 = _2897 * 0.999000012874603271484375;
        _2918 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2918)
        {
            if ((cbInstanceData._m0[_279 + 7u].x + _2908) < 0.5)
            {
                _3074 = true;
                break;
            }
        }
        uint _3015 = _944 + uint(_2877.w);
        if ((cbInstanceData._m0[_3015].w < 1.0) && ((cbInstanceData._m0[_3015].w + _2908) < 0.5))
        {
            _3074 = true;
            break;
        }
        if ((_2901 + 1.0) < _2899.x)
        {
            _3074 = true;
            break;
        }
        _3074 = false;
        break;
    }
    float _3279;
    if (_3074)
    {
        discard_state = true;
        _3279 = 0.0;
    }
    else
    {
        _3279 = cbInstanceData._m0[_2740].w;
    }
    SV_Target.x = _2905;
    SV_Target.y = _2906;
    SV_Target.z = _2907;
    SV_Target.w = _3279;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2740].w;
    discard_exit();
}


