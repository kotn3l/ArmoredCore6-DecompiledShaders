#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_0;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 13) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_22;
layout(set = 0, binding = 14) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 20) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_6;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1308;
float _3690;
float _3691;
float _3692;
float _3693;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _223 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _224 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _225 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _231 = inversesqrt(dot(vec3(_223, _224, _225), vec3(_223, _224, _225)));
    float _238 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _245 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _259 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _261 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _262 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3702 = isnan(0.0) ? _259 : (isnan(_259) ? 0.0 : max(_259, 0.0));
    float _3713 = isnan(0.0) ? _261 : (isnan(_261) ? 0.0 : max(_261, 0.0));
    float _3724 = isnan(0.0) ? _262 : (isnan(_262) ? 0.0 : max(_262, 0.0));
    uint _272 = uint(roundEven(NORMAL.w)) * 13u;
    uint _277 = _272 + 1u;
    uint _281 = _272 + 2u;
    float _290 = sqrt(((cbInstanceData._m0[_277].x * cbInstanceData._m0[_277].x) + (cbInstanceData._m0[_272].x * cbInstanceData._m0[_272].x)) + (cbInstanceData._m0[_281].x * cbInstanceData._m0[_281].x));
    float _291 = _290 * TEXCOORD.z;
    float _292 = _290 * TEXCOORD.w;
    vec4 _305 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _291) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _292) + cbTextureTilingScale._m0[13u].w));
    vec4 _328 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _354 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _359 = _354.x * cbMtdParam._m0[11u].x;
    float _360 = _354.y * cbMtdParam._m0[11u].y;
    float _361 = _354.z * cbMtdParam._m0[11u].z;
    vec4 _380 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _291) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _292) + cbTextureTilingScale._m0[5u].w));
    vec4 _431 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _433 = _431.x;
    float _445 = dot(vec4(_433, _431.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _462 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w)).x) * 2.0) - ((((_433 - _445) * cbMtdParam._m0[24u].z) + _445) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3735 = isnan(0.0) ? _462 : (isnan(_462) ? 0.0 : max(_462, 0.0));
    float _463 = isnan(1.0) ? _3735 : (isnan(_3735) ? 1.0 : min(_3735, 1.0));
    float _473 = (_328.x * cbMtdParam._m0[9u].x) * ((_463 * ((_380.x * cbMtdParam._m0[12u].x) - _359)) + _359);
    float _474 = (_328.y * cbMtdParam._m0[9u].y) * ((_463 * ((_380.y * cbMtdParam._m0[12u].y) - _360)) + _360);
    float _475 = (_328.z * cbMtdParam._m0[9u].z) * ((_463 * ((_380.z * cbMtdParam._m0[12u].z) - _361)) + _361);
    float _479 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _305.x) * _473;
    float _482 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _305.y) * _474;
    float _485 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _305.z) * _475;
    float _493 = (((_473 - _479) * (isnan(1.0) ? _3702 : (isnan(_3702) ? 1.0 : min(_3702, 1.0)))) + _479) * 4.55000019073486328125;
    float _495 = (((_474 - _482) * (isnan(1.0) ? _3713 : (isnan(_3713) ? 1.0 : min(_3713, 1.0)))) + _482) * 4.55000019073486328125;
    float _497 = (((_475 - _485) * (isnan(1.0) ? _3724 : (isnan(_3724) ? 1.0 : min(_3724, 1.0)))) + _485) * 4.55000019073486328125;
    vec4 _516 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _291) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _292) + cbTextureTilingScale._m0[14u].w));
    vec4 _536 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _291) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _292) + cbTextureTilingScale._m0[20u].w));
    vec4 _561 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _291) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _292) + cbTextureTilingScale._m0[4u].w));
    vec4 _578 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _580 = _578.x;
    float _581 = _578.y;
    float _582 = _578.z;
    float _591 = ((_561.z - _582) * _463) + _582;
    float _594 = ((((_561.x - _580) * _463) + _580) * 2.0) + (-1.0);
    float _595 = ((((_561.y - _581) * _463) + _581) * 2.0) + (-1.0);
    float _596 = dot(vec2(_594, _595), vec2(_594, _595));
    float _3746 = isnan(0.0) ? _596 : (isnan(_596) ? 0.0 : max(_596, 0.0));
    float _601 = sqrt(1.0 - (isnan(1.0) ? _3746 : (isnan(_3746) ? 1.0 : min(_3746, 1.0))));
    vec4 _617 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _642 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _291) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _292) + cbTextureTilingScale._m0[11u].w));
    float _644 = _642.x;
    float _645 = 1.0 - _644;
    float _658 = (TEXCOORD_8.w - ((cbMtdParam._m0[21u].z * (1.0 - TEXCOORD_8.w)) * ((((_644 - _645) * cbMtdParam._m0[24u].w) + _645) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3757 = isnan(0.0) ? _658 : (isnan(_658) ? 0.0 : max(_658, 0.0));
    float _659 = isnan(1.0) ? _3757 : (isnan(_3757) ? 1.0 : min(_3757, 1.0));
    float _666 = (_659 * ((_516.x * cbMtdParam._m0[18u].x) - _493)) + _493;
    float _667 = (_659 * ((_516.y * cbMtdParam._m0[18u].y) - _495)) + _495;
    float _668 = (_659 * ((_516.z * cbMtdParam._m0[18u].z) - _497)) + _497;
    float _673 = (((_536.z - _591) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _591;
    float _677 = ((_617.z - _673) * cbMtdParam._m0[19u].w) + _673;
    vec4 _690 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _291) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _292) + cbTextureTilingScale._m0[15u].w));
    float _697 = (_690.x * 2.0) + (-1.0);
    float _698 = (_690.y * 2.0) + (-1.0);
    float _699 = dot(vec2(_697, _698), vec2(_697, _698));
    float _3768 = isnan(0.0) ? _699 : (isnan(_699) ? 0.0 : max(_699, 0.0));
    float _707 = (_659 * (_690.z - _677)) + _677;
    float _716 = (_594 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_536.x * 2.0) + (-1.0)))) + (((_617.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _717 = (_595 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_536.y * 2.0) + (-1.0)))) + (((_617.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _729 = (((_697 - _716) + (cbMtdParam._m0[21u].x * _716)) * _659) + _716;
    float _730 = (((_698 - _717) + (cbMtdParam._m0[21u].x * _717)) * _659) + _717;
    float _731 = (_659 * (sqrt(1.0 - (isnan(1.0) ? _3768 : (isnan(_3768) ? 1.0 : min(_3768, 1.0)))) - _601)) + _601;
    float _733 = cbMtdParam._m0[22u].x + _617.w;
    float _736 = fma(_731, _238 * NORMAL.x, fma(_730, _245 * TANGENT.x, (_231 * _223) * _729));
    float _739 = fma(_731, _238 * NORMAL.y, fma(_730, _245 * TANGENT.y, (_231 * _224) * _729));
    float _742 = fma(_731, _238 * NORMAL.z, fma(_730, _245 * TANGENT.z, (_231 * _225) * _729));
    float _746 = inversesqrt(dot(vec3(_736, _739, _742), vec3(_736, _739, _742)));
    float _747 = _746 * _736;
    float _748 = _746 * _739;
    float _749 = _746 * _742;
    float _3779 = isnan(0.0) ? _707 : (isnan(_707) ? 0.0 : max(_707, 0.0));
    float _750 = isnan(1.0) ? _3779 : (isnan(_3779) ? 1.0 : min(_3779, 1.0));
    float _3790 = isnan(0.0) ? _733 : (isnan(_733) ? 0.0 : max(_733, 0.0));
    float _3801 = isnan(0.0) ? _666 : (isnan(_666) ? 0.0 : max(_666, 0.0));
    float _3812 = isnan(0.0) ? _667 : (isnan(_667) ? 0.0 : max(_667, 0.0));
    float _3823 = isnan(0.0) ? _668 : (isnan(_668) ? 0.0 : max(_668, 0.0));
    float _768 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _809 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _819 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _809);
    float _820 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _809);
    float _821 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _809);
    float _825 = inversesqrt(dot(vec3(_819, _820, _821), vec3(_819, _820, _821)));
    float _826 = _819 * _825;
    float _827 = _820 * _825;
    float _828 = _821 * _825;
    vec4 _833 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _835 = _833.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _989 = sqrt(((_819 * _819) + (_820 * _820)) + (_821 * _821));
        float _995 = (cbMatDynParam._m0[5u].x * _989) + cbMatDynParam._m0[5u].y;
        float _3834 = isnan(0.0) ? _995 : (isnan(_995) ? 0.0 : max(_995, 0.0));
        float _996 = isnan(1.0) ? _3834 : (isnan(_3834) ? 1.0 : min(_3834, 1.0));
        float _1000 = (cbMatDynParam._m0[5u].z * _989) + cbMatDynParam._m0[5u].w;
        float _3845 = isnan(0.0) ? _1000 : (isnan(_1000) ? 0.0 : max(_1000, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3845 : (isnan(_3845) ? 1.0 : min(_3845, 1.0))) - _996)) + _996) < ((_835 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _846 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _847 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _865 = fma(_749, cbSceneParam._m0[5u].z, fma(_748, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _747));
    float _868 = fma(_749, cbSceneParam._m0[6u].z, fma(_748, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _747));
    float _871 = fma(_749, cbSceneParam._m0[7u].z, fma(_748, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _747));
    uint _884 = _272 + 9u;
    uint _885 = _884 + uint(cbMatDynParam._m0[0u].w);
    float _891 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3801 : (isnan(_3801) ? 1.0 : min(_3801, 1.0)))) * cbInstanceData._m0[_885].x;
    float _892 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3812 : (isnan(_3812) ? 1.0 : min(_3812, 1.0)))) * cbInstanceData._m0[_885].y;
    float _893 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3823 : (isnan(_3823) ? 1.0 : min(_3823, 1.0)))) * cbInstanceData._m0[_885].z;
    float _3856 = isnan(0.0) ? _891 : (isnan(_891) ? 0.0 : max(_891, 0.0));
    float _894 = isnan(1.0) ? _3856 : (isnan(_3856) ? 1.0 : min(_3856, 1.0));
    float _3867 = isnan(0.0) ? _892 : (isnan(_892) ? 0.0 : max(_892, 0.0));
    float _895 = isnan(1.0) ? _3867 : (isnan(_3867) ? 1.0 : min(_3867, 1.0));
    float _3878 = isnan(0.0) ? _893 : (isnan(_893) ? 0.0 : max(_893, 0.0));
    float _896 = isnan(1.0) ? _3878 : (isnan(_3878) ? 1.0 : min(_3878, 1.0));
    vec4 _905 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _846, cbSceneParam._m0[86u].y * _847));
    float _909 = ((isnan(1.0) ? _3790 : (isnan(_3790) ? 1.0 : min(_3790, 1.0))) * TEXCOORD_5.w) * _905.x;
    float _910 = dot(vec3(_747, _748, _749), vec3(_826, _827, _828));
    float _913 = _910 * 2.0;
    float _917 = (_913 * _747) - _826;
    float _918 = (_913 * _748) - _827;
    float _919 = (_913 * _749) - _828;
    float _923 = abs(dot(vec3(_826, _827, _828), vec3(_747, _748, _749)));
    float _3889 = isnan(0.0) ? _923 : (isnan(_923) ? 0.0 : max(_923, 0.0));
    float _925 = sqrt(_750);
    float _938 = exp2((_925 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3889 : (isnan(_3889) ? 1.0 : min(_3889, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_925 * 3.0));
    float _970 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _974 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _978 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1307;
    float _1309;
    float _1310;
    float _1311;
    float _1312;
    float _1313;
    float _1314;
    float _1315;
    float _1316;
    float _1317;
    float _1318;
    float _1319;
    float _1320;
    float _1321;
    float _1322;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1032 = fma(_978, cbModelParam._m0[26u].z, fma(_974, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _970));
        float _1036 = fma(_978, cbModelParam._m0[27u].z, fma(_974, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _970));
        float _1040 = fma(_978, cbModelParam._m0[28u].z, fma(_974, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _970));
        float _1065 = _970 + _747;
        float _1066 = _974 + _748;
        float _1067 = _978 + _749;
        float _1077 = fma(_1067, cbModelParam._m0[26u].z, fma(_1066, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1065)) - _1032;
        float _1078 = fma(_1067, cbModelParam._m0[27u].z, fma(_1066, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1065)) - _1036;
        float _1079 = fma(_1067, cbModelParam._m0[28u].z, fma(_1066, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1065)) - _1040;
        float _1083 = inversesqrt(dot(vec3(_1077, _1078, _1079), vec3(_1077, _1078, _1079)));
        float _1096 = ((_1083 * _1077) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1032 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1097 = ((_1083 * _1078) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1036 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1098 = ((_1083 * _1079) / cbModelParam._m0[34u].z) + ((((((_1040 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1101 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1096, _1097, _1098), 0.0);
        vec4 _1108 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1096, _1097, _1098), 0.0);
        vec4 _1115 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1096, _1097, _1098), 0.0);
        vec4 _1122 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1096, _1097, _1098), 0.0);
        float _1135 = exp2((_1101.w + (-0.5)) * 20.0) * 2.0;
        float _1136 = _1135 * (_1101.x + (-0.5));
        float _1137 = _1135 * (_1101.y + (-0.5));
        float _1138 = _1135 * (_1101.z + (-0.5));
        float _1145 = exp2((_1108.w + (-0.5)) * 20.0) * 2.0;
        float _1146 = _1145 * (_1108.x + (-0.5));
        float _1147 = _1145 * (_1108.y + (-0.5));
        float _1148 = _1145 * (_1108.z + (-0.5));
        float _1155 = exp2((_1115.w + (-0.5)) * 20.0) * 2.0;
        float _1156 = _1155 * (_1115.x + (-0.5));
        float _1157 = _1155 * (_1115.y + (-0.5));
        float _1158 = _1155 * (_1115.z + (-0.5));
        float _1165 = exp2((_1122.w + (-0.5)) * 20.0) * 2.0;
        float _1166 = _1165 * (_1122.x + (-0.5));
        float _1167 = _1165 * (_1122.y + (-0.5));
        float _1168 = _1165 * (_1122.z + (-0.5));
        float _1169 = isnan(0.0) ? _1166 : (isnan(_1166) ? 0.0 : max(_1166, 0.0));
        float _1170 = isnan(0.0) ? _1167 : (isnan(_1167) ? 0.0 : max(_1167, 0.0));
        float _1171 = isnan(0.0) ? _1168 : (isnan(_1168) ? 0.0 : max(_1168, 0.0));
        float _1172 = _1136 * 0.5;
        float _1173 = _1146 * 0.5;
        float _1174 = _1156 * 0.5;
        float _1175 = dot(vec3(_1172, _1173, _1174), vec3(_1172, _1173, _1174));
        float _1180 = (_1175 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1175);
        float _1189 = (dot(vec3(_747, _748, _749), vec3(_1180 * _1172, _1180 * _1173, _1180 * _1174)) + 1.0) * 0.5;
        float _3915 = isnan(0.0) ? _1189 : (isnan(_1189) ? 0.0 : max(_1189, 0.0));
        float _1199 = sqrt(((_1173 * _1173) + (_1172 * _1172)) + (_1174 * _1174)) / (_1169 + 9.9999997473787516355514526367188e-06);
        float _3926 = isnan(0.0) ? _1199 : (isnan(_1199) ? 0.0 : max(_1199, 0.0));
        float _1200 = isnan(1.0) ? _3926 : (isnan(_3926) ? 1.0 : min(_3926, 1.0));
        float _1201 = _1200 * 2.0;
        float _1205 = (1.0 - _1200) / (_1200 + 1.0);
        float _3937 = isnan(0.0) ? _1205 : (isnan(_1205) ? 0.0 : max(_1205, 0.0));
        float _1206 = isnan(1.0) ? _3937 : (isnan(_3937) ? 1.0 : min(_3937, 1.0));
        float _1215 = ((((1.0 - _1206) * (_1201 + 2.0)) * exp2(log2(isnan(1.0) ? _3915 : (isnan(_3915) ? 1.0 : min(_3915, 1.0))) * (_1201 + 1.0))) + _1206) * _1169;
        float _1216 = _1137 * 0.5;
        float _1217 = _1147 * 0.5;
        float _1218 = _1157 * 0.5;
        float _1219 = dot(vec3(_1216, _1217, _1218), vec3(_1216, _1217, _1218));
        float _1224 = (_1219 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1219);
        float _1232 = (dot(vec3(_747, _748, _749), vec3(_1224 * _1216, _1224 * _1217, _1224 * _1218)) + 1.0) * 0.5;
        float _3948 = isnan(0.0) ? _1232 : (isnan(_1232) ? 0.0 : max(_1232, 0.0));
        float _1241 = sqrt(((_1217 * _1217) + (_1216 * _1216)) + (_1218 * _1218)) / (_1170 + 9.9999997473787516355514526367188e-06);
        float _3959 = isnan(0.0) ? _1241 : (isnan(_1241) ? 0.0 : max(_1241, 0.0));
        float _1242 = isnan(1.0) ? _3959 : (isnan(_3959) ? 1.0 : min(_3959, 1.0));
        float _1243 = _1242 * 2.0;
        float _1247 = (1.0 - _1242) / (_1242 + 1.0);
        float _3970 = isnan(0.0) ? _1247 : (isnan(_1247) ? 0.0 : max(_1247, 0.0));
        float _1248 = isnan(1.0) ? _3970 : (isnan(_3970) ? 1.0 : min(_3970, 1.0));
        float _1257 = ((((1.0 - _1248) * (_1243 + 2.0)) * exp2(log2(isnan(1.0) ? _3948 : (isnan(_3948) ? 1.0 : min(_3948, 1.0))) * (_1243 + 1.0))) + _1248) * _1170;
        float _1258 = _1138 * 0.5;
        float _1259 = _1148 * 0.5;
        float _1260 = _1158 * 0.5;
        float _1261 = dot(vec3(_1258, _1259, _1260), vec3(_1258, _1259, _1260));
        float _1266 = (_1261 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1261);
        float _1274 = (dot(vec3(_747, _748, _749), vec3(_1266 * _1258, _1266 * _1259, _1266 * _1260)) + 1.0) * 0.5;
        float _3981 = isnan(0.0) ? _1274 : (isnan(_1274) ? 0.0 : max(_1274, 0.0));
        float _1283 = sqrt(((_1259 * _1259) + (_1258 * _1258)) + (_1260 * _1260)) / (_1171 + 9.9999997473787516355514526367188e-06);
        float _3992 = isnan(0.0) ? _1283 : (isnan(_1283) ? 0.0 : max(_1283, 0.0));
        float _1284 = isnan(1.0) ? _3992 : (isnan(_3992) ? 1.0 : min(_3992, 1.0));
        float _1285 = _1284 * 2.0;
        float _1289 = (1.0 - _1284) / (_1284 + 1.0);
        float _4003 = isnan(0.0) ? _1289 : (isnan(_1289) ? 0.0 : max(_1289, 0.0));
        float _1290 = isnan(1.0) ? _4003 : (isnan(_4003) ? 1.0 : min(_4003, 1.0));
        float _1299 = ((((1.0 - _1290) * (_1285 + 2.0)) * exp2(log2(isnan(1.0) ? _3981 : (isnan(_3981) ? 1.0 : min(_3981, 1.0))) * (_1285 + 1.0))) + _1290) * _1171;
        _1307 = _1138;
        _1309 = _1137;
        _1310 = _1136;
        _1311 = _1148;
        _1312 = _1147;
        _1313 = _1146;
        _1314 = _1158;
        _1315 = _1157;
        _1316 = _1156;
        _1317 = _1171;
        _1318 = _1170;
        _1319 = _1169;
        _1320 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1215 : (isnan(_1215) ? 0.0 : max(_1215, 0.0)));
        _1321 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1257 : (isnan(_1257) ? 0.0 : max(_1257, 0.0)));
        _1322 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1299 : (isnan(_1299) ? 0.0 : max(_1299, 0.0)));
    }
    else
    {
        _1307 = _1308;
        _1309 = _1308;
        _1310 = _1308;
        _1311 = _1308;
        _1312 = _1308;
        _1313 = _1308;
        _1314 = _1308;
        _1315 = _1308;
        _1316 = _1308;
        _1317 = _1308;
        _1318 = _1308;
        _1319 = _1308;
        _1320 = 0.0;
        _1321 = 0.0;
        _1322 = 0.0;
    }
    float _1619;
    float _1620;
    float _1621;
    float _1622;
    float _1623;
    float _1624;
    float _1625;
    float _1626;
    float _1627;
    float _1628;
    float _1629;
    float _1630;
    float _1631;
    float _1632;
    float _1633;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1350 = fma(_978, cbModelParam._m0[30u].z, fma(_974, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _970));
        float _1354 = fma(_978, cbModelParam._m0[31u].z, fma(_974, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _970));
        float _1358 = fma(_978, cbModelParam._m0[32u].z, fma(_974, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _970));
        float _1381 = _970 + _747;
        float _1382 = _974 + _748;
        float _1383 = _978 + _749;
        float _1393 = fma(_1383, cbModelParam._m0[30u].z, fma(_1382, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1381)) - _1350;
        float _1394 = fma(_1383, cbModelParam._m0[31u].z, fma(_1382, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1381)) - _1354;
        float _1395 = fma(_1383, cbModelParam._m0[32u].z, fma(_1382, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1381)) - _1358;
        float _1399 = inversesqrt(dot(vec3(_1393, _1394, _1395), vec3(_1393, _1394, _1395)));
        float _1412 = ((_1399 * _1393) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1350 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1413 = ((_1399 * _1394) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1354 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1414 = ((_1399 * _1395) / cbModelParam._m0[35u].z) + ((((((_1358 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1416 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1412, _1413, _1414), 0.0);
        vec4 _1423 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1412, _1413, _1414), 0.0);
        vec4 _1430 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1412, _1413, _1414), 0.0);
        vec4 _1437 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1412, _1413, _1414), 0.0);
        float _1449 = exp2((_1416.w + (-0.5)) * 20.0) * 2.0;
        float _1450 = _1449 * (_1416.x + (-0.5));
        float _1451 = _1449 * (_1416.y + (-0.5));
        float _1452 = _1449 * (_1416.z + (-0.5));
        float _1459 = exp2((_1423.w + (-0.5)) * 20.0) * 2.0;
        float _1460 = _1459 * (_1423.x + (-0.5));
        float _1461 = _1459 * (_1423.y + (-0.5));
        float _1462 = _1459 * (_1423.z + (-0.5));
        float _1469 = exp2((_1430.w + (-0.5)) * 20.0) * 2.0;
        float _1470 = _1469 * (_1430.x + (-0.5));
        float _1471 = _1469 * (_1430.y + (-0.5));
        float _1472 = _1469 * (_1430.z + (-0.5));
        float _1479 = exp2((_1437.w + (-0.5)) * 20.0) * 2.0;
        float _1480 = _1479 * (_1437.x + (-0.5));
        float _1481 = _1479 * (_1437.y + (-0.5));
        float _1482 = _1479 * (_1437.z + (-0.5));
        float _1483 = isnan(0.0) ? _1480 : (isnan(_1480) ? 0.0 : max(_1480, 0.0));
        float _1484 = isnan(0.0) ? _1481 : (isnan(_1481) ? 0.0 : max(_1481, 0.0));
        float _1485 = isnan(0.0) ? _1482 : (isnan(_1482) ? 0.0 : max(_1482, 0.0));
        float _1486 = _1450 * 0.5;
        float _1487 = _1460 * 0.5;
        float _1488 = _1470 * 0.5;
        float _1489 = dot(vec3(_1486, _1487, _1488), vec3(_1486, _1487, _1488));
        float _1494 = (_1489 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1489);
        float _1502 = (dot(vec3(_747, _748, _749), vec3(_1494 * _1486, _1494 * _1487, _1494 * _1488)) + 1.0) * 0.5;
        float _4044 = isnan(0.0) ? _1502 : (isnan(_1502) ? 0.0 : max(_1502, 0.0));
        float _1511 = sqrt(((_1487 * _1487) + (_1486 * _1486)) + (_1488 * _1488)) / (_1483 + 9.9999997473787516355514526367188e-06);
        float _4055 = isnan(0.0) ? _1511 : (isnan(_1511) ? 0.0 : max(_1511, 0.0));
        float _1512 = isnan(1.0) ? _4055 : (isnan(_4055) ? 1.0 : min(_4055, 1.0));
        float _1513 = _1512 * 2.0;
        float _1517 = (1.0 - _1512) / (_1512 + 1.0);
        float _4066 = isnan(0.0) ? _1517 : (isnan(_1517) ? 0.0 : max(_1517, 0.0));
        float _1518 = isnan(1.0) ? _4066 : (isnan(_4066) ? 1.0 : min(_4066, 1.0));
        float _1527 = ((((1.0 - _1518) * (_1513 + 2.0)) * exp2(log2(isnan(1.0) ? _4044 : (isnan(_4044) ? 1.0 : min(_4044, 1.0))) * (_1513 + 1.0))) + _1518) * _1483;
        float _1528 = _1451 * 0.5;
        float _1529 = _1461 * 0.5;
        float _1530 = _1471 * 0.5;
        float _1531 = dot(vec3(_1528, _1529, _1530), vec3(_1528, _1529, _1530));
        float _1536 = (_1531 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1531);
        float _1544 = (dot(vec3(_747, _748, _749), vec3(_1536 * _1528, _1536 * _1529, _1536 * _1530)) + 1.0) * 0.5;
        float _4077 = isnan(0.0) ? _1544 : (isnan(_1544) ? 0.0 : max(_1544, 0.0));
        float _1553 = sqrt(((_1529 * _1529) + (_1528 * _1528)) + (_1530 * _1530)) / (_1484 + 9.9999997473787516355514526367188e-06);
        float _4088 = isnan(0.0) ? _1553 : (isnan(_1553) ? 0.0 : max(_1553, 0.0));
        float _1554 = isnan(1.0) ? _4088 : (isnan(_4088) ? 1.0 : min(_4088, 1.0));
        float _1555 = _1554 * 2.0;
        float _1559 = (1.0 - _1554) / (_1554 + 1.0);
        float _4099 = isnan(0.0) ? _1559 : (isnan(_1559) ? 0.0 : max(_1559, 0.0));
        float _1560 = isnan(1.0) ? _4099 : (isnan(_4099) ? 1.0 : min(_4099, 1.0));
        float _1569 = ((((1.0 - _1560) * (_1555 + 2.0)) * exp2(log2(isnan(1.0) ? _4077 : (isnan(_4077) ? 1.0 : min(_4077, 1.0))) * (_1555 + 1.0))) + _1560) * _1484;
        float _1570 = _1452 * 0.5;
        float _1571 = _1462 * 0.5;
        float _1572 = _1472 * 0.5;
        float _1573 = dot(vec3(_1570, _1571, _1572), vec3(_1570, _1571, _1572));
        float _1578 = (_1573 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1573);
        float _1586 = (dot(vec3(_747, _748, _749), vec3(_1578 * _1570, _1578 * _1571, _1578 * _1572)) + 1.0) * 0.5;
        float _4110 = isnan(0.0) ? _1586 : (isnan(_1586) ? 0.0 : max(_1586, 0.0));
        float _1595 = sqrt(((_1571 * _1571) + (_1570 * _1570)) + (_1572 * _1572)) / (_1485 + 9.9999997473787516355514526367188e-06);
        float _4121 = isnan(0.0) ? _1595 : (isnan(_1595) ? 0.0 : max(_1595, 0.0));
        float _1596 = isnan(1.0) ? _4121 : (isnan(_4121) ? 1.0 : min(_4121, 1.0));
        float _1597 = _1596 * 2.0;
        float _1601 = (1.0 - _1596) / (_1596 + 1.0);
        float _4132 = isnan(0.0) ? _1601 : (isnan(_1601) ? 0.0 : max(_1601, 0.0));
        float _1602 = isnan(1.0) ? _4132 : (isnan(_4132) ? 1.0 : min(_4132, 1.0));
        float _1611 = ((((1.0 - _1602) * (_1597 + 2.0)) * exp2(log2(isnan(1.0) ? _4110 : (isnan(_4110) ? 1.0 : min(_4110, 1.0))) * (_1597 + 1.0))) + _1602) * _1485;
        _1619 = _1452;
        _1620 = _1451;
        _1621 = _1450;
        _1622 = _1462;
        _1623 = _1461;
        _1624 = _1460;
        _1625 = _1472;
        _1626 = _1471;
        _1627 = _1470;
        _1628 = _1485;
        _1629 = _1484;
        _1630 = _1483;
        _1631 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1527 : (isnan(_1527) ? 0.0 : max(_1527, 0.0)));
        _1632 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1569 : (isnan(_1569) ? 0.0 : max(_1569, 0.0)));
        _1633 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1611 : (isnan(_1611) ? 0.0 : max(_1611, 0.0)));
    }
    else
    {
        _1619 = _1308;
        _1620 = _1308;
        _1621 = _1308;
        _1622 = _1308;
        _1623 = _1308;
        _1624 = _1308;
        _1625 = _1308;
        _1626 = _1308;
        _1627 = _1308;
        _1628 = _1308;
        _1629 = _1308;
        _1630 = _1308;
        _1631 = 0.0;
        _1632 = 0.0;
        _1633 = 0.0;
    }
    float _1643 = (cbModelParam._m0[1u].x * (_1631 - _1320)) + _1320;
    float _1644 = (cbModelParam._m0[1u].x * (_1632 - _1321)) + _1321;
    float _1645 = (cbModelParam._m0[1u].x * (_1633 - _1322)) + _1322;
    float _1666 = fma(_1645, cbSceneParam._m0[89u].z, fma(_1644, cbSceneParam._m0[89u].y, _1643 * cbSceneParam._m0[89u].x));
    float _1669 = fma(_1645, cbSceneParam._m0[90u].z, fma(_1644, cbSceneParam._m0[90u].y, _1643 * cbSceneParam._m0[90u].x));
    float _1672 = fma(_1645, cbSceneParam._m0[91u].z, fma(_1644, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1643));
    float _1687 = _917 * 0.5;
    float _1688 = _918 * 0.5;
    float _1689 = _919 * 0.5;
    float _1690 = dot(vec4(_1687, _1688, _1689, 1.0), vec4(_1621, _1624, _1627, _1630));
    float _1693 = dot(vec4(_1687, _1688, _1689, 1.0), vec4(_1620, _1623, _1626, _1629));
    float _1696 = dot(vec4(_1687, _1688, _1689, 1.0), vec4(_1619, _1622, _1625, _1628));
    float _1730;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1703 = dot(vec4(_1687, _1688, _1689, 1.0), vec4(_1307, _1311, _1314, _1317));
        float _1707 = dot(vec4(_1687, _1688, _1689, 1.0), vec4(_1309, _1312, _1315, _1318));
        float _1711 = dot(vec4(_1687, _1688, _1689, 1.0), vec4(_1310, _1313, _1316, _1319));
        float _1718 = dot(vec4(cbModelParam._m0[39u]), vec4(_1687, _1688, _1689, 1.0));
        _1730 = dot(vec3(isnan(0.0) ? _1711 : (isnan(_1711) ? 0.0 : max(_1711, 0.0)), isnan(0.0) ? _1707 : (isnan(_1707) ? 0.0 : max(_1707, 0.0)), isnan(0.0) ? _1703 : (isnan(_1703) ? 0.0 : max(_1703, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1718) ? 0.0 : (isnan(0.0) ? _1718 : max(0.0, _1718))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1730 = 1.0;
    }
    float _1741;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1732 = dot(vec4(cbModelParam._m0[40u]), vec4(_1687, _1688, _1689, 1.0));
        _1741 = dot(vec3(isnan(0.0) ? _1690 : (isnan(_1690) ? 0.0 : max(_1690, 0.0)), isnan(0.0) ? _1693 : (isnan(_1693) ? 0.0 : max(_1693, 0.0)), isnan(0.0) ? _1696 : (isnan(_1696) ? 0.0 : max(_1696, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1732) ? 0.0 : (isnan(0.0) ? _1732 : max(0.0, _1732))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1741 = 1.0;
    }
    float _1745 = (_1741 * cbModelParam._m0[1u].x) + (_1730 * (1.0 - cbModelParam._m0[1u].x));
    float _1755 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _750);
    float _1756 = isnan(_1755) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1755 : min(cbModelParam._m0[25u].z, _1755));
    float _1836;
    float _1838;
    float _1840;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1803 = fma(_978, cbModelParam._m0[13u].z, fma(_974, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _970)) + cbModelParam._m0[13u].w;
        float _1807 = fma(_978, cbModelParam._m0[14u].z, fma(_974, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _970)) + cbModelParam._m0[14u].w;
        float _1811 = fma(_978, cbModelParam._m0[15u].z, fma(_974, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _970)) + cbModelParam._m0[15u].w;
        float _1814 = fma(_919, cbModelParam._m0[13u].z, fma(_918, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _917));
        float _1817 = fma(_919, cbModelParam._m0[14u].z, fma(_918, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _917));
        float _1820 = fma(_919, cbModelParam._m0[15u].z, fma(_918, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _917));
        float _1848;
        if (_1814 > 0.0)
        {
            _1848 = abs((1.0 - _1803) / _1814);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1814 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1803 + 1.0) / _1814);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1848 = frontier_phi_17_15_ladder;
        }
        float _2069;
        if (_1817 > 0.0)
        {
            _2069 = abs((1.0 - _1807) / _1817);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1817 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1807 + 1.0) / _1817);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2069 = frontier_phi_26_22_ladder;
        }
        float _2315;
        if (_1820 > 0.0)
        {
            _2315 = abs((1.0 - _1811) / _1820);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1820 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1811 + 1.0) / _1820);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2315 = frontier_phi_38_33_ladder;
        }
        float _2317 = isnan(_2069) ? _1848 : (isnan(_1848) ? _2069 : min(_1848, _2069));
        float _2318 = isnan(_2315) ? _2317 : (isnan(_2317) ? _2315 : min(_2317, _2315));
        float _2322 = (_2318 * _1814) + _1803;
        float _2323 = (_2318 * _1817) + _1807;
        float _2324 = (_2318 * _1820) + _1811;
        float _2325 = _2318 * 9.9999997473787516355514526367188e-05;
        float _2327 = (-1.0) - _2325;
        float _2329 = _2325 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2324 > _2329) || ((_2324 < _2327) || ((_2323 > _2329) || ((_2323 < _2327) || ((_2322 < _2327) || (_2322 > _2329))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2448 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2324, cbModelParam._m0[9u].z, fma(_2323, cbModelParam._m0[9u].y, _2322 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2324, cbModelParam._m0[10u].z, fma(_2323, cbModelParam._m0[10u].y, _2322 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2324, cbModelParam._m0[11u].z, fma(_2323, cbModelParam._m0[11u].y, _2322 * cbModelParam._m0[11u].x))), _1756);
            frontier_phi_16_38_ladder = _2448.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2448.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2448.x * cbModelParam._m0[1u].y;
        }
        _1836 = frontier_phi_16_38_ladder_2;
        _1838 = frontier_phi_16_38_ladder_1;
        _1840 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1824 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_917, _918, _919), _1756);
        _1836 = _1824.x * cbModelParam._m0[1u].y;
        _1838 = _1824.y * cbModelParam._m0[1u].y;
        _1840 = _1824.z * cbModelParam._m0[1u].y;
    }
    float _1844 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _750);
    float _1845 = isnan(_1844) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1844 : min(cbModelParam._m0[25u].w, _1844));
    float _1934;
    float _1936;
    float _1938;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1898 = fma(_978, cbModelParam._m0[21u].z, fma(_974, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _970)) + cbModelParam._m0[21u].w;
        float _1902 = fma(_978, cbModelParam._m0[22u].z, fma(_974, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _970)) + cbModelParam._m0[22u].w;
        float _1906 = fma(_978, cbModelParam._m0[23u].z, fma(_974, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _970)) + cbModelParam._m0[23u].w;
        float _1909 = fma(_919, cbModelParam._m0[21u].z, fma(_918, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _917));
        float _1912 = fma(_919, cbModelParam._m0[22u].z, fma(_918, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _917));
        float _1915 = fma(_919, cbModelParam._m0[23u].z, fma(_918, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _917));
        float _2074;
        if (_1909 > 0.0)
        {
            _2074 = abs((1.0 - _1898) / _1909);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1909 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1898 + 1.0) / _1909);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2074 = frontier_phi_28_24_ladder;
        }
        float _2342;
        if (_1912 > 0.0)
        {
            _2342 = abs((1.0 - _1902) / _1912);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1912 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1902 + 1.0) / _1912);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2342 = frontier_phi_40_35_ladder;
        }
        float _2547;
        if (_1915 > 0.0)
        {
            _2547 = abs((1.0 - _1906) / _1915);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1915 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1906 + 1.0) / _1915);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2547 = frontier_phi_49_46_ladder;
        }
        float _2549 = isnan(_2342) ? _2074 : (isnan(_2074) ? _2342 : min(_2074, _2342));
        float _2550 = isnan(_2547) ? _2549 : (isnan(_2549) ? _2547 : min(_2549, _2547));
        float _2554 = (_2550 * _1909) + _1898;
        float _2555 = (_2550 * _1912) + _1902;
        float _2556 = (_2550 * _1915) + _1906;
        float _2557 = _2550 * 9.9999997473787516355514526367188e-05;
        float _2558 = (-1.0) - _2557;
        float _2560 = _2557 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2556 > _2560) || ((_2556 < _2558) || ((_2555 > _2560) || ((_2555 < _2558) || ((_2554 < _2558) || (_2554 > _2560))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2755 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2556, cbModelParam._m0[17u].z, fma(_2555, cbModelParam._m0[17u].y, _2554 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2556, cbModelParam._m0[18u].z, fma(_2555, cbModelParam._m0[18u].y, _2554 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2556, cbModelParam._m0[19u].z, fma(_2555, cbModelParam._m0[19u].y, _2554 * cbModelParam._m0[19u].x))), _1845);
            frontier_phi_25_49_ladder = _2755.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2755.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2755.x * cbModelParam._m0[1u].z;
        }
        _1934 = frontier_phi_25_49_ladder_2;
        _1936 = frontier_phi_25_49_ladder_1;
        _1938 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1918 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_917, _918, _919), _1845);
        _1934 = _1918.x * cbModelParam._m0[1u].z;
        _1936 = _1918.y * cbModelParam._m0[1u].z;
        _1938 = _1918.z * cbModelParam._m0[1u].z;
    }
    float _1950 = ((((1.0 - _938) * ((_925 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_938 * _925)) * _909;
    float _1951 = _1950 * ((cbModelParam._m0[1u].w * (_1934 - _1836)) + _1836);
    float _1952 = _1950 * ((cbModelParam._m0[1u].w * (_1936 - _1838)) + _1838);
    float _1953 = _1950 * ((cbModelParam._m0[1u].w * (_1938 - _1840)) + _1840);
    float _1956 = fma(_1953, cbSceneParam._m0[89u].z, fma(_1952, cbSceneParam._m0[89u].y, _1951 * cbSceneParam._m0[89u].x));
    float _1959 = fma(_1953, cbSceneParam._m0[90u].z, fma(_1952, cbSceneParam._m0[90u].y, _1951 * cbSceneParam._m0[90u].x));
    float _1962 = fma(_1953, cbSceneParam._m0[91u].z, fma(_1952, cbSceneParam._m0[91u].y, _1951 * cbSceneParam._m0[91u].x));
    vec4 _1970 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_846, _847));
    float _1972 = _1970.w;
    float _1984 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1972);
    float _1985 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1972);
    float _1986 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1972);
    uvec4 _1990 = floatBitsToUint(cbInstanceData._m0[_272 + 5u]);
    uint _1992 = _1990.x * 14u;
    uint _1993 = _1992 + 13u;
    float _2000 = _909 + (-1.0);
    float _2005 = (cbLight._m0[_1993].x * _2000) + 1.0;
    float _2006 = (cbLight._m0[_1993].y * _2000) + 1.0;
    float _2007 = (cbLight._m0[_1993].z * _2000) + 1.0;
    float _2008 = (cbLight._m0[_1993].w * _2000) + 1.0;
    uint _2009 = _1992 + 5u;
    float _2015 = isnan(1.0) ? _2006 : (isnan(_2006) ? 1.0 : min(_2006, 1.0));
    uint _2019 = _1992 + 4u;
    float _2028 = isnan(1.0) ? _2005 : (isnan(_2005) ? 1.0 : min(_2005, 1.0));
    uint _2032 = _1992 | 1u;
    float _2043 = dot(vec3(cbLight._m0[_1992].xyz), vec3(_747, _748, _749));
    float _2046 = dot(vec3(cbLight._m0[_2032].xyz), vec3(_747, _748, _749));
    float _4268 = isnan(0.0) ? _2043 : (isnan(_2043) ? 0.0 : max(_2043, 0.0));
    float _4279 = isnan(0.0) ? _2046 : (isnan(_2046) ? 0.0 : max(_2046, 0.0));
    float _2051 = (isnan(1.0) ? _4268 : (isnan(_4268) ? 1.0 : min(_4268, 1.0))) * 0.3183098733425140380859375;
    float _2053 = (isnan(1.0) ? _4279 : (isnan(_4279) ? 1.0 : min(_4279, 1.0))) * 0.3183098733425140380859375;
    float _2060 = ((cbLight._m0[_2009].x * _2015) * _2053) + (((cbLight._m0[_2019].x * _1984) * _2028) * _2051);
    float _2061 = ((_2015 * cbLight._m0[_2009].y) * _2053) + (((cbLight._m0[_2019].y * _1985) * _2028) * _2051);
    float _2062 = ((_2015 * cbLight._m0[_2009].z) * _2053) + (((cbLight._m0[_2019].z * _1986) * _2028) * _2051);
    uvec4 _2066 = floatBitsToUint(cbLight._m0[_1992 + 12u]);
    bool _2068 = _2066.x == 0u;
    float _2079;
    float _2081;
    float _2083;
    if (_2068)
    {
        _2079 = _2060;
        _2081 = _2061;
        _2083 = _2062;
    }
    else
    {
        uint _2087 = _1992 + 6u;
        float _2103 = (dot(vec3(cbLight._m0[_1992 + 2u].xyz), vec3(_747, _748, _749)) * 0.5) + 0.5;
        float _2104 = _2103 * _2103;
        float _4290 = isnan(0.0) ? _2104 : (isnan(_2104) ? 0.0 : max(_2104, 0.0));
        float _2105 = isnan(1.0) ? _4290 : (isnan(_4290) ? 1.0 : min(_4290, 1.0));
        float _2106 = isnan(1.0) ? _2007 : (isnan(_2007) ? 1.0 : min(_2007, 1.0));
        _2079 = (((cbLight._m0[_2087].x * 0.3183098733425140380859375) * _2105) * _2106) + _2060;
        _2081 = (((cbLight._m0[_2087].y * 0.3183098733425140380859375) * _2105) * _2106) + _2061;
        _2083 = (((cbLight._m0[_2087].z * 0.3183098733425140380859375) * _2105) * _2106) + _2062;
    }
    bool _2086 = _2066.y == 0u;
    float _2124;
    float _2126;
    float _2128;
    if (_2086)
    {
        _2124 = _2079;
        _2126 = _2081;
        _2128 = _2083;
    }
    else
    {
        uint _2286 = _1992 + 7u;
        float _2302 = (dot(vec3(cbLight._m0[_1992 + 3u].xyz), vec3(_747, _748, _749)) * 0.5) + 0.5;
        float _2303 = _2302 * _2302;
        float _4306 = isnan(0.0) ? _2303 : (isnan(_2303) ? 0.0 : max(_2303, 0.0));
        float _2304 = isnan(1.0) ? _4306 : (isnan(_4306) ? 1.0 : min(_4306, 1.0));
        float _2305 = isnan(1.0) ? _2008 : (isnan(_2008) ? 1.0 : min(_2008, 1.0));
        _2124 = (((cbLight._m0[_2286].x * 0.3183098733425140380859375) * _2304) * _2305) + _2079;
        _2126 = (((cbLight._m0[_2286].y * 0.3183098733425140380859375) * _2304) * _2305) + _2081;
        _2128 = (((cbLight._m0[_2286].z * 0.3183098733425140380859375) * _2304) * _2305) + _2083;
    }
    uint _2131 = _1992 + 8u;
    float _2144 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1992].w)) * _750) * 0.949999988079071044921875);
    float _2145 = _2144 * _2144;
    float _2146 = cbLight._m0[_1992].x + _826;
    float _2147 = cbLight._m0[_1992].y + _827;
    float _2148 = cbLight._m0[_1992].z + _828;
    float _2152 = inversesqrt(dot(vec3(_2146, _2147, _2148), vec3(_2146, _2147, _2148)));
    float _2153 = _2152 * _2146;
    float _2154 = _2152 * _2147;
    float _2155 = _2152 * _2148;
    float _2156 = dot(vec3(_747, _748, _749), vec3(cbLight._m0[_1992].xyz));
    float _4322 = isnan(0.0) ? _2156 : (isnan(_2156) ? 0.0 : max(_2156, 0.0));
    float _2159 = isnan(1.0) ? _4322 : (isnan(_4322) ? 1.0 : min(_4322, 1.0));
    float _4333 = isnan(0.0) ? _910 : (isnan(_910) ? 0.0 : max(_910, 0.0));
    float _2160 = isnan(1.0) ? _4333 : (isnan(_4333) ? 1.0 : min(_4333, 1.0));
    float _2161 = dot(vec3(_747, _748, _749), vec3(_2153, _2154, _2155));
    float _4344 = isnan(0.0) ? _2161 : (isnan(_2161) ? 0.0 : max(_2161, 0.0));
    float _2164 = isnan(1.0) ? _4344 : (isnan(_4344) ? 1.0 : min(_4344, 1.0));
    float _2165 = dot(vec3(cbLight._m0[_1992].xyz), vec3(_2153, _2154, _2155));
    float _4355 = isnan(0.0) ? _2165 : (isnan(_2165) ? 0.0 : max(_2165, 0.0));
    float _2169 = _2145 * _2145;
    float _2173 = ((_2164 * _2164) * (_2169 + (-1.0))) + 1.0;
    float _2184 = (exp2(log2(1.0 - (isnan(1.0) ? _4355 : (isnan(_4355) ? 1.0 : min(_4355, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2185 = 1.0 - _2145;
    float _2196 = (0.5 / (((_2160 * ((_2159 * _2185) + _2145)) + 9.9999999392252902907785028219223e-09) + (((_2160 * _2185) + _2145) * _2159))) * _2159;
    float _4366 = isnan(0.0) ? _2196 : (isnan(_2196) ? 0.0 : max(_2196, 0.0));
    float _2198 = (isnan(1.0) ? _4366 : (isnan(_4366) ? 1.0 : min(_4366, 1.0))) * (_2169 / ((_2173 * _2173) * 3.141590118408203125));
    uint _2212 = _1992 + 9u;
    float _2223 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2032].w)) * _750) * 0.949999988079071044921875);
    float _2224 = _2223 * _2223;
    float _2225 = cbLight._m0[_2032].x + _826;
    float _2226 = cbLight._m0[_2032].y + _827;
    float _2227 = cbLight._m0[_2032].z + _828;
    float _2231 = inversesqrt(dot(vec3(_2225, _2226, _2227), vec3(_2225, _2226, _2227)));
    float _2232 = _2231 * _2225;
    float _2233 = _2231 * _2226;
    float _2234 = _2231 * _2227;
    float _2235 = dot(vec3(_747, _748, _749), vec3(cbLight._m0[_2032].xyz));
    float _4377 = isnan(0.0) ? _2235 : (isnan(_2235) ? 0.0 : max(_2235, 0.0));
    float _2238 = isnan(1.0) ? _4377 : (isnan(_4377) ? 1.0 : min(_4377, 1.0));
    float _2239 = dot(vec3(_747, _748, _749), vec3(_2232, _2233, _2234));
    float _4388 = isnan(0.0) ? _2239 : (isnan(_2239) ? 0.0 : max(_2239, 0.0));
    float _2242 = isnan(1.0) ? _4388 : (isnan(_4388) ? 1.0 : min(_4388, 1.0));
    float _2243 = dot(vec3(cbLight._m0[_2032].xyz), vec3(_2232, _2233, _2234));
    float _4399 = isnan(0.0) ? _2243 : (isnan(_2243) ? 0.0 : max(_2243, 0.0));
    float _2247 = _2224 * _2224;
    float _2251 = ((_2242 * _2242) * (_2247 + (-1.0))) + 1.0;
    float _2260 = (exp2(log2(1.0 - (isnan(1.0) ? _4399 : (isnan(_4399) ? 1.0 : min(_4399, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2261 = 1.0 - _2224;
    float _2271 = (0.5 / (((_2160 * ((_2238 * _2261) + _2224)) + 9.9999999392252902907785028219223e-09) + (((_2160 * _2261) + _2224) * _2238))) * _2238;
    float _4410 = isnan(0.0) ? _2271 : (isnan(_2271) ? 0.0 : max(_2271, 0.0));
    float _2273 = (isnan(1.0) ? _4410 : (isnan(_4410) ? 1.0 : min(_4410, 1.0))) * (_2247 / ((_2251 * _2251) * 3.141590118408203125));
    float _2283 = (((_2260 * cbLight._m0[_2212].x) * _2273) * _2015) + ((((cbLight._m0[_2131].x * _1984) * _2184) * _2198) * _2028);
    float _2284 = (((_2260 * cbLight._m0[_2212].y) * _2273) * _2015) + ((((cbLight._m0[_2131].y * _1985) * _2184) * _2198) * _2028);
    float _2285 = (((_2260 * cbLight._m0[_2212].z) * _2273) * _2015) + ((((cbLight._m0[_2131].z * _1986) * _2184) * _2198) * _2028);
    float _2347;
    float _2349;
    float _2351;
    if (_2068)
    {
        _2347 = _2283;
        _2349 = _2284;
        _2351 = _2285;
    }
    else
    {
        uint _2353 = _1992 + 2u;
        uint _2357 = _1992 + 10u;
        float _2371 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2353].w)) * _750) * 0.949999988079071044921875);
        float _2372 = _2371 * _2371;
        float _2373 = cbLight._m0[_2353].x + _826;
        float _2374 = cbLight._m0[_2353].y + _827;
        float _2375 = cbLight._m0[_2353].z + _828;
        float _2379 = inversesqrt(dot(vec3(_2373, _2374, _2375), vec3(_2373, _2374, _2375)));
        float _2380 = _2379 * _2373;
        float _2381 = _2379 * _2374;
        float _2382 = _2379 * _2375;
        float _2383 = dot(vec3(_747, _748, _749), vec3(cbLight._m0[_2353].xyz));
        float _4421 = isnan(0.0) ? _2383 : (isnan(_2383) ? 0.0 : max(_2383, 0.0));
        float _2386 = isnan(1.0) ? _4421 : (isnan(_4421) ? 1.0 : min(_4421, 1.0));
        float _2387 = dot(vec3(_747, _748, _749), vec3(_2380, _2381, _2382));
        float _4432 = isnan(0.0) ? _2387 : (isnan(_2387) ? 0.0 : max(_2387, 0.0));
        float _2390 = isnan(1.0) ? _4432 : (isnan(_4432) ? 1.0 : min(_4432, 1.0));
        float _2391 = dot(vec3(cbLight._m0[_2353].xyz), vec3(_2380, _2381, _2382));
        float _4443 = isnan(0.0) ? _2391 : (isnan(_2391) ? 0.0 : max(_2391, 0.0));
        float _2395 = _2372 * _2372;
        float _2399 = ((_2390 * _2390) * (_2395 + (-1.0))) + 1.0;
        float _2408 = (exp2(log2(1.0 - (isnan(1.0) ? _4443 : (isnan(_4443) ? 1.0 : min(_4443, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2409 = 1.0 - _2372;
        float _2419 = (0.5 / (((_2160 * ((_2386 * _2409) + _2372)) + 9.9999999392252902907785028219223e-09) + (((_2160 * _2409) + _2372) * _2386))) * _2386;
        float _4454 = isnan(0.0) ? _2419 : (isnan(_2419) ? 0.0 : max(_2419, 0.0));
        float _2421 = (isnan(1.0) ? _4454 : (isnan(_4454) ? 1.0 : min(_4454, 1.0))) * (_2395 / ((_2399 * _2399) * 3.141590118408203125));
        float _2422 = isnan(1.0) ? _2007 : (isnan(_2007) ? 1.0 : min(_2007, 1.0));
        _2347 = (((_2408 * cbLight._m0[_2357].x) * _2421) * _2422) + _2283;
        _2349 = (((_2408 * cbLight._m0[_2357].y) * _2421) * _2422) + _2284;
        _2351 = (((_2408 * cbLight._m0[_2357].z) * _2421) * _2422) + _2285;
    }
    float _2457;
    float _2459;
    float _2461;
    if (_2086)
    {
        _2457 = _2347;
        _2459 = _2349;
        _2461 = _2351;
    }
    else
    {
        uint _2468 = _1992 + 3u;
        uint _2472 = _1992 + 11u;
        float _2486 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2468].w)) * _750) * 0.949999988079071044921875);
        float _2487 = _2486 * _2486;
        float _2488 = cbLight._m0[_2468].x + _826;
        float _2489 = cbLight._m0[_2468].y + _827;
        float _2490 = cbLight._m0[_2468].z + _828;
        float _2494 = inversesqrt(dot(vec3(_2488, _2489, _2490), vec3(_2488, _2489, _2490)));
        float _2495 = _2494 * _2488;
        float _2496 = _2494 * _2489;
        float _2497 = _2494 * _2490;
        float _2498 = dot(vec3(_747, _748, _749), vec3(cbLight._m0[_2468].xyz));
        float _4470 = isnan(0.0) ? _2498 : (isnan(_2498) ? 0.0 : max(_2498, 0.0));
        float _2501 = isnan(1.0) ? _4470 : (isnan(_4470) ? 1.0 : min(_4470, 1.0));
        float _2502 = dot(vec3(_747, _748, _749), vec3(_2495, _2496, _2497));
        float _4481 = isnan(0.0) ? _2502 : (isnan(_2502) ? 0.0 : max(_2502, 0.0));
        float _2505 = isnan(1.0) ? _4481 : (isnan(_4481) ? 1.0 : min(_4481, 1.0));
        float _2506 = dot(vec3(cbLight._m0[_2468].xyz), vec3(_2495, _2496, _2497));
        float _4492 = isnan(0.0) ? _2506 : (isnan(_2506) ? 0.0 : max(_2506, 0.0));
        float _2510 = _2487 * _2487;
        float _2514 = ((_2505 * _2505) * (_2510 + (-1.0))) + 1.0;
        float _2523 = (exp2(log2(1.0 - (isnan(1.0) ? _4492 : (isnan(_4492) ? 1.0 : min(_4492, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2524 = 1.0 - _2487;
        float _2534 = (0.5 / (((_2160 * ((_2501 * _2524) + _2487)) + 9.9999999392252902907785028219223e-09) + (((_2160 * _2524) + _2487) * _2501))) * _2501;
        float _4503 = isnan(0.0) ? _2534 : (isnan(_2534) ? 0.0 : max(_2534, 0.0));
        float _2536 = (isnan(1.0) ? _4503 : (isnan(_4503) ? 1.0 : min(_4503, 1.0))) * (_2510 / ((_2514 * _2514) * 3.141590118408203125));
        float _2537 = isnan(1.0) ? _2008 : (isnan(_2008) ? 1.0 : min(_2008, 1.0));
        _2457 = (((_2523 * cbLight._m0[_2472].x) * _2536) * _2537) + _2347;
        _2459 = (((_2523 * cbLight._m0[_2472].y) * _2536) * _2537) + _2349;
        _2461 = (((_2523 * cbLight._m0[_2472].z) * _2536) * _2537) + _2351;
    }
    float _2672;
    float _2674;
    float _2676;
    float _2678;
    float _2680;
    float _2682;
    if (_1990.y == 0u)
    {
        float _2612 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2613 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2612;
        float _2614 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2612;
        float _2615 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2612;
        uvec4 _2627 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2628 = _2627.x;
        uint _2639 = uint((float(_2627.y) * floor(float(uint(cbSceneParam._m0[85u].y * _847) / _2628))) + floor(float(uint(cbSceneParam._m0[85u].x * _846) / _2628)));
        float _2649 = (log2(_2615 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2650 = isnan(0.0) ? _2649 : (isnan(_2649) ? 0.0 : max(_2649, 0.0));
        uint _2653 = uint(isnan(14.0) ? _2650 : (isnan(_2650) ? 14.0 : min(_2650, 14.0)));
        uvec4 _2658 = texelFetch(g_lightClusterGridBuffer, int(((_2653 << 2u) + (_2639 << 6u)) >> 2u));
        uint _2659 = _2658.x;
        uint _2660 = _2627.z;
        float _2760;
        float _2762;
        float _2764;
        float _2766;
        float _2768;
        float _2770;
        if (((((1u << ((_2660 >> 4u) & 15u)) + 4294967295u) & _2659) == 0u) || ((_2660 & 240u) == 0u))
        {
            _2760 = 0.0;
            _2762 = 0.0;
            _2764 = 0.0;
            _2766 = 0.0;
            _2768 = 0.0;
            _2770 = 0.0;
        }
        else
        {
            float _2761;
            float _2763;
            float _2765;
            float _2767;
            float _2769;
            float _2771;
            float _2913 = 0.0;
            float _2914 = 0.0;
            float _2915 = 0.0;
            float _2916 = 0.0;
            float _2917 = 0.0;
            float _2918 = 0.0;
            uint _2919 = 0u;
            uint _2928;
            bool _2929;
            for (;;)
            {
                _2928 = texelFetch(g_lightClassification, int((((_2653 << 5u) + (_2639 << 9u)) + (_2919 << 2u)) >> 2u)).x;
                _2929 = _2928 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2929)
                {
                    frontier_phi_66_pred = _2913;
                    frontier_phi_66_pred_1 = _2918;
                    frontier_phi_66_pred_2 = _2917;
                    frontier_phi_66_pred_3 = _2916;
                    frontier_phi_66_pred_4 = _2915;
                    frontier_phi_66_pred_5 = _2914;
                }
                else
                {
                    float _3058;
                    float _3059;
                    float _3060;
                    float _3061;
                    float _3062;
                    float _3063;
                    uint _3064;
                    _3058 = _2913;
                    _3059 = _2914;
                    _3060 = _2915;
                    _3061 = _2916;
                    _3062 = _2917;
                    _3063 = _2918;
                    _3064 = _2928;
                    float _2985;
                    float _2986;
                    float _2987;
                    float _2988;
                    float _2989;
                    float _2990;
                    for (;;)
                    {
                        uint _3068 = uint(findLSB(_3064)) + (_2919 << 5u);
                        uint _3065 = (_3064 + 4294967295u) & _3064;
                        uint _3070 = _3068 * 48u;
                        vec4 _3084 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3070)).x, texelFetch(g_PointLightRenderingBuffer, int(_3070 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3070 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3070 + 3u)).x));
                        uint _3090 = (_3068 * 48u) + 4u;
                        vec4 _3103 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3090)).x, texelFetch(g_PointLightRenderingBuffer, int(_3090 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3090 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3090 + 3u)).x));
                        uint _3109 = (_3068 * 48u) + 8u;
                        vec3 _3120 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3109)).x, texelFetch(g_PointLightRenderingBuffer, int(_3109 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3109 + 2u)).x));
                        float _3124 = _3084.x - _2613;
                        float _3125 = _3084.y - _2614;
                        float _3126 = _3084.z - _2615;
                        float _3127 = dot(vec3(_3124, _3125, _3126), vec3(_3124, _3125, _3126));
                        float _3130 = inversesqrt(_3127);
                        float _3131 = _3130 * _3124;
                        float _3132 = _3130 * _3125;
                        float _3133 = _3130 * _3126;
                        float _3134 = dot(vec3(_865, _868, _871), vec3(_3131, _3132, _3133));
                        float _3139 = 1.0 - (_3127 * _3084.w);
                        float _4529 = isnan(0.0) ? _3139 : (isnan(_3139) ? 0.0 : max(_3139, 0.0));
                        float _3140 = isnan(1.0) ? _4529 : (isnan(_4529) ? 1.0 : min(_4529, 1.0));
                        float _3141 = sqrt(_3127) * _3103.w;
                        float _3144 = 1.39999997615814208984375 / (_3141 + 1.39999997615814208984375);
                        float _3145 = _3144 * _3144;
                        float _3148 = ((1.0 - _3145) * _3134) + _3145;
                        float _3151 = _3141 * _3141;
                        float _3155 = ((isnan(0.0) ? _3148 : (isnan(_3148) ? 0.0 : max(_3148, 0.0))) * _3140) / ((_3151 * 0.699999988079071044921875) + 1.0);
                        float _3159 = (-0.0) - _2613;
                        float _3160 = (-0.0) - _2614;
                        float _3161 = (-0.0) - _2615;
                        float _3165 = inversesqrt(dot(vec3(_3159, _3160, _3161), vec3(_3159, _3160, _3161)));
                        float _3166 = _3165 * _3159;
                        float _3167 = _3165 * _3160;
                        float _3168 = _3165 * _3161;
                        float _3176 = exp2(log2(1.0 / ((_3151 * 3.5) + 5.0)) * 0.25);
                        float _3177 = 1.0 - _925;
                        float _3184 = sqrt(1.0 - ((1.0 - (_3177 * _3177)) * (1.0 - (_3176 * _3176))));
                        float _3185 = _3184 * _3184;
                        float _3186 = _3185 * _3185;
                        float _3187 = _3166 + _3131;
                        float _3188 = _3167 + _3132;
                        float _3189 = _3168 + _3133;
                        float _3193 = inversesqrt(dot(vec3(_3187, _3188, _3189), vec3(_3187, _3188, _3189)));
                        float _3197 = dot(vec3(_865, _868, _871), vec3(_3166, _3167, _3168));
                        float _4545 = isnan(0.0) ? _3197 : (isnan(_3197) ? 0.0 : max(_3197, 0.0));
                        float _3200 = isnan(1.0) ? _4545 : (isnan(_4545) ? 1.0 : min(_4545, 1.0));
                        float _3201 = dot(vec3(_865, _868, _871), vec3(_3193 * _3187, _3193 * _3188, _3193 * _3189));
                        float _4556 = isnan(0.0) ? _3201 : (isnan(_3201) ? 0.0 : max(_3201, 0.0));
                        float _3204 = isnan(1.0) ? _4556 : (isnan(_4556) ? 1.0 : min(_4556, 1.0));
                        float _3208 = ((_3204 * _3204) * (_3186 + (-1.0))) + 1.0;
                        float _3209 = _3144 * _3185;
                        float _3210 = _3209 * _3209;
                        float _3213 = ((1.0 - _3210) * _3134) + _3210;
                        float _4567 = isnan(0.0) ? _3213 : (isnan(_3213) ? 0.0 : max(_3213, 0.0));
                        float _3214 = isnan(1.0) ? _4567 : (isnan(_4567) ? 1.0 : min(_4567, 1.0));
                        float _3215 = 1.0 - _3185;
                        float _3225 = (0.5 / (((_3214 * ((_3200 * _3215) + _3185)) + 9.9999999392252902907785028219223e-09) + (((_3214 * _3215) + _3185) * _3200))) * _3214;
                        float _4578 = isnan(0.0) ? _3225 : (isnan(_3225) ? 0.0 : max(_3225, 0.0));
                        float _3236 = (((_3186 * 3.1415927410125732421875) * (isnan(1.0) ? _4578 : (isnan(_4578) ? 1.0 : min(_4578, 1.0)))) / ((_3208 * _3208) * ((_3151 * 2.1991131305694580078125) + 3.141590118408203125))) * _3140;
                        _2988 = (_3155 * _3103.x) + _3061;
                        _2989 = (_3155 * _3103.y) + _3062;
                        _2990 = (_3155 * _3103.z) + _3063;
                        _2985 = (_3236 * _3120.x) + _3058;
                        _2986 = (_3236 * _3120.y) + _3059;
                        _2987 = (_3236 * _3120.z) + _3060;
                        if (_3065 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3058 = _2985;
                            _3059 = _2986;
                            _3060 = _2987;
                            _3061 = _2988;
                            _3062 = _2989;
                            _3063 = _2990;
                            _3064 = _3065;
                        }
                    }
                    frontier_phi_66_pred = _2985;
                    frontier_phi_66_pred_1 = _2990;
                    frontier_phi_66_pred_2 = _2989;
                    frontier_phi_66_pred_3 = _2988;
                    frontier_phi_66_pred_4 = _2987;
                    frontier_phi_66_pred_5 = _2986;
                }
                _2761 = frontier_phi_66_pred;
                _2771 = frontier_phi_66_pred_1;
                _2769 = frontier_phi_66_pred_2;
                _2767 = frontier_phi_66_pred_3;
                _2765 = frontier_phi_66_pred_4;
                _2763 = frontier_phi_66_pred_5;
                uint _2920 = _2919 + 1u;
                if (_2920 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2913 = _2761;
                    _2914 = _2763;
                    _2915 = _2765;
                    _2916 = _2767;
                    _2917 = _2769;
                    _2918 = _2771;
                    _2919 = _2920;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2760 = _2761;
            _2762 = _2763;
            _2764 = _2765;
            _2766 = _2767;
            _2768 = _2769;
            _2770 = _2771;
        }
        uvec4 _2774 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2775 = _2774.z;
        uint _2777 = (_2775 >> 8u) & 15u;
        float _2881;
        float _2883;
        float _2885;
        float _2887;
        float _2889;
        float _2891;
        if (((4294967295u << _2777) & _2659) == 0u)
        {
            _2881 = _2760;
            _2883 = _2762;
            _2885 = _2764;
            _2887 = _2766;
            _2889 = _2768;
            _2891 = _2770;
        }
        else
        {
            float _2906 = inversesqrt(dot(vec3(_2613, _2614, _2615), vec3(_2613, _2614, _2615)));
            float _2907 = _2906 * _2613;
            float _2908 = _2906 * _2614;
            float _2909 = _2906 * _2615;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2777 < ((_2775 >> 12u) & 15u))
            {
                float _2882;
                float _2884;
                float _2886;
                float _2888;
                float _2890;
                float _2892;
                float _3041 = _2760;
                float _3042 = _2762;
                float _3043 = _2764;
                float _3044 = _2766;
                float _3045 = _2768;
                float _3046 = _2770;
                uint _3047 = _2777;
                uint _3056;
                bool _3057;
                for (;;)
                {
                    _3056 = texelFetch(g_lightClassification, int((((_2653 << 5u) + (_2639 << 9u)) + (_3047 << 2u)) >> 2u)).x;
                    _3057 = _3056 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_3057)
                    {
                        frontier_phi_77_pred = _3046;
                        frontier_phi_77_pred_1 = _3045;
                        frontier_phi_77_pred_2 = _3044;
                        frontier_phi_77_pred_3 = _3043;
                        frontier_phi_77_pred_4 = _3042;
                        frontier_phi_77_pred_5 = _3041;
                    }
                    else
                    {
                        float _3250;
                        float _3251;
                        float _3252;
                        float _3253;
                        float _3254;
                        float _3255;
                        float _3543;
                        float _3544;
                        float _3545;
                        float _3546;
                        float _3547;
                        float _3548;
                        float _3263 = _3041;
                        float _3264 = _3042;
                        float _3265 = _3043;
                        float _3266 = _3044;
                        float _3267 = _3045;
                        float _3268 = _3046;
                        uint _3269 = _3056;
                        uint _3270;
                        vec4 _3295;
                        float _3296;
                        vec4 _3311;
                        vec3 _3323;
                        vec4 _3338;
                        vec4 _3353;
                        float _3399;
                        bool _3400;
                        for (;;)
                        {
                            uint _3280 = ((_3047 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3269));
                            _3270 = (_3269 + 4294967295u) & _3269;
                            uint _3282 = _3280 * 40u;
                            _3295 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3282)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3282 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3282 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3282 + 3u)).x));
                            _3296 = _3295.w;
                            uint _3298 = (_3280 * 40u) + 4u;
                            _3311 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3298)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3298 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3298 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3298 + 3u)).x));
                            uint _3313 = (_3280 * 40u) + 8u;
                            _3323 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3313)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3313 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3313 + 2u)).x));
                            uint _3325 = (_3280 * 40u) + 16u;
                            _3338 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3325)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3325 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3325 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3325 + 3u)).x));
                            uint _3340 = (_3280 * 40u) + 20u;
                            _3353 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3340)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3340 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3340 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3340 + 3u)).x));
                            uint _3355 = (_3280 * 40u) + 24u;
                            vec4 _3368 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3355)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3355 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3355 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3355 + 3u)).x));
                            uint _3374 = (_3280 * 40u) + 28u;
                            vec4 _3387 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3374)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3374 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3374 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3374 + 3u)).x));
                            _3399 = fma(_2615, _3387.z, fma(_2614, _3387.y, _3387.x * _2613)) + _3387.w;
                            _3400 = !((fma(_2615, _3368.z, fma(_2614, _3368.y, _3368.x * _2613)) + _3368.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3400)
                            {
                                float _3427 = _3295.x - _2613;
                                float _3428 = _3295.y - _2614;
                                float _3429 = _3295.z - _2615;
                                float _3430 = dot(vec3(_3427, _3428, _3429), vec3(_3427, _3428, _3429));
                                float _3433 = inversesqrt(_3430);
                                float _3434 = _3433 * _3427;
                                float _3435 = _3433 * _3428;
                                float _3436 = _3433 * _3429;
                                float _3440 = 1.0 - (_3430 / (_3296 * _3296));
                                float _4589 = isnan(0.0) ? _3440 : (isnan(_3440) ? 0.0 : max(_3440, 0.0));
                                float _3441 = isnan(1.0) ? _4589 : (isnan(_4589) ? 1.0 : min(_4589, 1.0));
                                float _3445 = sqrt(_3430) * _3311.w;
                                float _3447 = 1.39999997615814208984375 / (_3445 + 1.39999997615814208984375);
                                float _3448 = _3447 * _3447;
                                float _3451 = ((1.0 - _3448) * dot(vec3(_3434, _3435, _3436), vec3(_865, _868, _871))) + _3448;
                                float _3454 = _3445 * _3445;
                                float _3458 = (fma(_2615, _3338.z, fma(_2614, _3338.y, _3338.x * _2613)) + _3338.w) / _3399;
                                float _3459 = (fma(_2615, _3353.z, fma(_2614, _3353.y, _3353.x * _2613)) + _3353.w) / _3399;
                                float _3463 = 1.0 - dot(vec2(_3458, _3459), vec2(_3458, _3459));
                                float _4605 = isnan(0.0) ? _3463 : (isnan(_3463) ? 0.0 : max(_3463, 0.0));
                                float _3464 = isnan(1.0) ? _4605 : (isnan(_4605) ? 1.0 : min(_4605, 1.0));
                                float _3465 = _3464 * (((isnan(0.0) ? _3451 : (isnan(_3451) ? 0.0 : max(_3451, 0.0))) * _3441) / ((_3454 * 0.699999988079071044921875) + 1.0));
                                float _3477 = exp2(log2(1.0 / ((_3454 * 3.5) + 5.0)) * 0.25);
                                float _3478 = 1.0 - _925;
                                float _3485 = sqrt(1.0 - ((1.0 - (_3478 * _3478)) * (1.0 - (_3477 * _3477))));
                                float _3486 = _3485 * _3485;
                                float _3487 = _3486 * _3486;
                                float _3488 = _3434 - _2907;
                                float _3489 = _3435 - _2908;
                                float _3490 = _3436 - _2909;
                                float _3494 = inversesqrt(dot(vec3(_3488, _3489, _3490), vec3(_3488, _3489, _3490)));
                                float _3498 = dot(vec3(_865, _868, _871), vec3((-0.0) - _2907, (-0.0) - _2908, (-0.0) - _2909));
                                float _4616 = isnan(0.0) ? _3498 : (isnan(_3498) ? 0.0 : max(_3498, 0.0));
                                float _3501 = isnan(1.0) ? _4616 : (isnan(_4616) ? 1.0 : min(_4616, 1.0));
                                float _3502 = dot(vec3(_865, _868, _871), vec3(_3494 * _3488, _3494 * _3489, _3494 * _3490));
                                float _4627 = isnan(0.0) ? _3502 : (isnan(_3502) ? 0.0 : max(_3502, 0.0));
                                float _3505 = isnan(1.0) ? _4627 : (isnan(_4627) ? 1.0 : min(_4627, 1.0));
                                float _3509 = ((_3505 * _3505) * (_3487 + (-1.0))) + 1.0;
                                float _3510 = _3447 * _3486;
                                float _3511 = _3510 * _3510;
                                float _3517 = ((1.0 - _3511) * dot(vec3(_865, _868, _871), vec3(_3434, _3435, _3436))) + _3511;
                                float _4638 = isnan(0.0) ? _3517 : (isnan(_3517) ? 0.0 : max(_3517, 0.0));
                                float _3518 = isnan(1.0) ? _4638 : (isnan(_4638) ? 1.0 : min(_4638, 1.0));
                                float _3519 = 1.0 - _3486;
                                float _3529 = (0.5 / (((_3518 * ((_3501 * _3519) + _3486)) + 9.9999999392252902907785028219223e-09) + (((_3518 * _3519) + _3486) * _3501))) * _3518;
                                float _4649 = isnan(0.0) ? _3529 : (isnan(_3529) ? 0.0 : max(_3529, 0.0));
                                float _3539 = (_3464 * _3441) * (((_3487 * 3.1415927410125732421875) * (isnan(1.0) ? _4649 : (isnan(_4649) ? 1.0 : min(_4649, 1.0)))) / ((_3509 * _3509) * ((_3454 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3465 * _3311.y;
                                frontier_phi_83_pred_1 = _3465 * _3311.x;
                                frontier_phi_83_pred_2 = _3539 * _3323.z;
                                frontier_phi_83_pred_3 = _3539 * _3323.y;
                                frontier_phi_83_pred_4 = _3539 * _3323.x;
                                frontier_phi_83_pred_5 = _3465 * _3311.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3547 = frontier_phi_83_pred;
                            _3546 = frontier_phi_83_pred_1;
                            _3545 = frontier_phi_83_pred_2;
                            _3544 = frontier_phi_83_pred_3;
                            _3543 = frontier_phi_83_pred_4;
                            _3548 = frontier_phi_83_pred_5;
                            _3253 = _3546 + _3266;
                            _3254 = _3547 + _3267;
                            _3255 = _3548 + _3268;
                            _3250 = _3543 + _3263;
                            _3251 = _3544 + _3264;
                            _3252 = _3545 + _3265;
                            if (_3270 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3263 = _3250;
                                _3264 = _3251;
                                _3265 = _3252;
                                _3266 = _3253;
                                _3267 = _3254;
                                _3268 = _3255;
                                _3269 = _3270;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3255;
                        frontier_phi_77_pred_1 = _3254;
                        frontier_phi_77_pred_2 = _3253;
                        frontier_phi_77_pred_3 = _3252;
                        frontier_phi_77_pred_4 = _3251;
                        frontier_phi_77_pred_5 = _3250;
                    }
                    _2892 = frontier_phi_77_pred;
                    _2890 = frontier_phi_77_pred_1;
                    _2888 = frontier_phi_77_pred_2;
                    _2886 = frontier_phi_77_pred_3;
                    _2884 = frontier_phi_77_pred_4;
                    _2882 = frontier_phi_77_pred_5;
                    uint _3048 = _3047 + 1u;
                    if (_3048 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3041 = _2882;
                        _3042 = _2884;
                        _3043 = _2886;
                        _3044 = _2888;
                        _3045 = _2890;
                        _3046 = _2892;
                        _3047 = _3048;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2886;
                frontier_phi_58_59_ladder_1 = _2892;
                frontier_phi_58_59_ladder_2 = _2890;
                frontier_phi_58_59_ladder_3 = _2888;
                frontier_phi_58_59_ladder_4 = _2884;
                frontier_phi_58_59_ladder_5 = _2882;
            }
            else
            {
                frontier_phi_58_59_ladder = _2764;
                frontier_phi_58_59_ladder_1 = _2770;
                frontier_phi_58_59_ladder_2 = _2768;
                frontier_phi_58_59_ladder_3 = _2766;
                frontier_phi_58_59_ladder_4 = _2762;
                frontier_phi_58_59_ladder_5 = _2760;
            }
            _2881 = frontier_phi_58_59_ladder_5;
            _2883 = frontier_phi_58_59_ladder_4;
            _2885 = frontier_phi_58_59_ladder;
            _2887 = frontier_phi_58_59_ladder_3;
            _2889 = frontier_phi_58_59_ladder_2;
            _2891 = frontier_phi_58_59_ladder_1;
        }
        float _2896 = isnan(1.0) ? _909 : (isnan(_909) ? 1.0 : min(_909, 1.0));
        _2672 = (_2896 * _2887) + _2124;
        _2674 = (_2896 * _2889) + _2126;
        _2676 = (_2896 * _2891) + _2128;
        _2678 = ((_2881 * 0.039999999105930328369140625) * _2896) + _2457;
        _2680 = ((_2883 * 0.039999999105930328369140625) * _2896) + _2459;
        _2682 = ((_2885 * 0.039999999105930328369140625) * _2896) + _2461;
    }
    else
    {
        _2672 = _2124;
        _2674 = _2126;
        _2676 = _2128;
        _2678 = _2457;
        _2680 = _2459;
        _2682 = _2461;
    }
    float _4665 = isnan(0.0) ? _894 : (isnan(_894) ? 0.0 : max(_894, 0.0));
    float _4676 = isnan(0.0) ? _895 : (isnan(_895) ? 0.0 : max(_895, 0.0));
    float _4687 = isnan(0.0) ? _896 : (isnan(_896) ? 0.0 : max(_896, 0.0));
    float _2699 = ((isnan(1.0) ? _4665 : (isnan(_4665) ? 1.0 : min(_4665, 1.0))) * (_2672 + ((isnan(0.0) ? _1666 : (isnan(_1666) ? 0.0 : max(_1666, 0.0))) * _909))) + ((_2678 + ((isnan(0.0) ? _1956 : (isnan(_1956) ? 0.0 : max(_1956, 0.0))) * _1745)) * cbPerFrame._m0[3u].x);
    float _2700 = ((isnan(1.0) ? _4676 : (isnan(_4676) ? 1.0 : min(_4676, 1.0))) * (_2674 + ((isnan(0.0) ? _1669 : (isnan(_1669) ? 0.0 : max(_1669, 0.0))) * _909))) + ((_2680 + ((isnan(0.0) ? _1959 : (isnan(_1959) ? 0.0 : max(_1959, 0.0))) * _1745)) * cbPerFrame._m0[3u].x);
    float _2701 = ((isnan(1.0) ? _4687 : (isnan(_4687) ? 1.0 : min(_4687, 1.0))) * (_2676 + ((isnan(0.0) ? _1672 : (isnan(_1672) ? 0.0 : max(_1672, 0.0))) * _909))) + ((_2682 + ((isnan(0.0) ? _1962 : (isnan(_1962) ? 0.0 : max(_1962, 0.0))) * _1745)) * cbPerFrame._m0[3u].x);
    uint _2702 = _272 + 6u;
    float _2710 = _846 / cbSceneParam._m0[86u].x;
    float _2711 = _847 / cbSceneParam._m0[86u].y;
    vec4 _2725 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2710, _2711, (log2((isnan(cbSceneParam._m0[77u].w) ? _768 : (isnan(_768) ? cbSceneParam._m0[77u].w : min(_768, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2727 = _2725.x;
    float _2728 = _2725.y;
    float _2729 = _2725.z;
    float _2730 = _2725.w;
    float _2823;
    float _2825;
    float _2827;
    float _2829;
    if (_768 > cbSceneParam._m0[78u].w)
    {
        float _2785 = isnan(_768) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _768 : min(cbSceneParam._m0[80u].w, _768));
        float _2786 = _2785 / _768;
        float _2797 = _2786 * _819;
        float _2798 = _820 * _2786;
        float _2799 = (-0.0) - _2798;
        float _2801 = _2786 * _821;
        float _2803 = (cbSceneParam._m0[77u].w * _2799) / _2785;
        float _2804 = _2803 + cbSceneParam._m0[79u].w;
        float _2805 = cbSceneParam._m0[79u].w - _2798;
        float _2811 = sqrt(((_2797 * _2797) + (_2798 * _2798)) + (_2801 * _2801));
        float _2814 = (1.0 - (cbSceneParam._m0[77u].w / _2785)) * _2811;
        float _2819 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2821 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2998;
        if (abs((_2799 - _2803) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2998 = ((((_2804 > 0.0) ? exp2(_2819 * _2804) : (2.0 - exp2(_2821 * _2804))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2814;
        }
        else
        {
            float _2942 = 1.0 / cbSceneParam._m0[80u].x;
            float _2943 = isnan(_2805) ? _2804 : (isnan(_2804) ? _2805 : max(_2804, _2805));
            float _2944 = isnan(_2805) ? _2804 : (isnan(_2804) ? _2805 : min(_2804, _2805));
            float _2953 = isnan(0.0) ? _2943 : (isnan(_2943) ? 0.0 : min(_2943, 0.0));
            float _2954 = isnan(0.0) ? _2944 : (isnan(_2944) ? 0.0 : min(_2944, 0.0));
            _2998 = ((abs(_2811 / _2799) * cbSceneParam._m0[80u].y) * ((((_2953 - _2954) * 2.0) - ((exp2(_2819 * (isnan(0.0) ? _2943 : (isnan(_2943) ? 0.0 : max(_2943, 0.0)))) - exp2(_2819 * (isnan(0.0) ? _2944 : (isnan(_2944) ? 0.0 : max(_2944, 0.0))))) * _2942)) - ((exp2(_2821 * _2953) - exp2(_2821 * _2954)) * _2942))) + (_2814 * cbSceneParam._m0[80u].z);
        }
        vec4 _3000 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2710, _2711, 1.0), 0.0);
        float _3009 = exp2((_2998 * (-1.44269502162933349609375)) * (1.0 - _3000.w));
        float _3010 = log2(_3009);
        float _3026 = log2(_2730);
        _2823 = (exp2(_3026 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3010 * cbSceneParam._m0[78u].x)) * _3000.x) / cbSceneParam._m0[78u].x)) + _2727;
        _2825 = (exp2(_3026 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3010 * cbSceneParam._m0[78u].y)) * _3000.y) / cbSceneParam._m0[78u].y)) + _2728;
        _2827 = (exp2(_3026 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3010 * cbSceneParam._m0[78u].z)) * _3000.z) / cbSceneParam._m0[78u].z)) + _2729;
        _2829 = _3009 * _2730;
    }
    else
    {
        _2823 = _2727;
        _2825 = _2728;
        _2827 = _2729;
        _2829 = _2730;
    }
    bool _3036;
    vec4 _2839;
    vec4 _2861;
    float _2863;
    float _2867;
    float _2868;
    float _2869;
    float _2870;
    bool _2880;
    for (;;)
    {
        _2839 = cbMatDynParam._m0[0u];
        float _2841 = roundEven(_2839.y);
        bool _2842 = _2841 == 3.0;
        float _2843 = log2(_2829);
        float _2850 = exp2(_2843 * cbSceneParam._m0[78u].x) * _2699;
        float _2851 = exp2(_2843 * cbSceneParam._m0[78u].y) * _2700;
        float _2852 = exp2(_2843 * cbSceneParam._m0[78u].z) * _2701;
        float _2859 = _835 + (-0.5);
        _2861 = cbMtdParam._m0[1u];
        _2863 = _2861.y * _2859;
        float _2866 = (_2841 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2867 = _2866 * (_2842 ? _2850 : (_2850 + (cbSceneParam._m0[72u].w * _2823)));
        _2868 = _2866 * (_2842 ? _2851 : (_2851 + (cbSceneParam._m0[72u].w * _2825)));
        _2869 = _2866 * (_2842 ? _2852 : (_2852 + (cbSceneParam._m0[72u].w * _2827)));
        _2870 = _2859 * 0.999000012874603271484375;
        _2880 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2880)
        {
            if ((cbInstanceData._m0[_272 + 7u].x + _2870) < 0.5)
            {
                _3036 = true;
                break;
            }
        }
        uint _2977 = _884 + uint(_2839.w);
        if ((cbInstanceData._m0[_2977].w < 1.0) && ((cbInstanceData._m0[_2977].w + _2870) < 0.5))
        {
            _3036 = true;
            break;
        }
        if ((_2863 + 1.0) < _2861.x)
        {
            _3036 = true;
            break;
        }
        _3036 = false;
        break;
    }
    float _3241;
    if (_3036)
    {
        discard_state = true;
        _3241 = 0.0;
    }
    else
    {
        _3241 = cbInstanceData._m0[_2702].w;
    }
    SV_Target.x = _2867;
    SV_Target.y = _2868;
    SV_Target.z = _2869;
    SV_Target.w = _3241;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2702].w;
    discard_exit();
}


