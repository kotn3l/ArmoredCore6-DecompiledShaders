#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 13) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_22;
layout(set = 0, binding = 14) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_29;
layout(set = 0, binding = 20) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_6;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1420;
float _3801;
float _3802;
float _3803;
float _3804;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _234 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _235 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _236 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _242 = inversesqrt(dot(vec3(_234, _235, _236), vec3(_234, _235, _236)));
    float _243 = _242 * _234;
    float _244 = _242 * _235;
    float _245 = _242 * _236;
    float _249 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _250 = _249 * NORMAL.x;
    float _251 = _249 * NORMAL.y;
    float _252 = _249 * NORMAL.z;
    float _256 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _257 = _256 * TANGENT.x;
    float _258 = _256 * TANGENT.y;
    float _259 = _256 * TANGENT.z;
    float _268 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _270 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _271 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3813 = isnan(0.0) ? _268 : (isnan(_268) ? 0.0 : max(_268, 0.0));
    float _3824 = isnan(0.0) ? _270 : (isnan(_270) ? 0.0 : max(_270, 0.0));
    float _3835 = isnan(0.0) ? _271 : (isnan(_271) ? 0.0 : max(_271, 0.0));
    uint _281 = uint(roundEven(NORMAL.w)) * 13u;
    uint _286 = _281 + 1u;
    uint _290 = _281 + 2u;
    float _299 = sqrt(((cbInstanceData._m0[_286].x * cbInstanceData._m0[_286].x) + (cbInstanceData._m0[_281].x * cbInstanceData._m0[_281].x)) + (cbInstanceData._m0[_290].x * cbInstanceData._m0[_290].x));
    float _300 = _299 * TEXCOORD.z;
    float _301 = _299 * TEXCOORD.w;
    vec4 _314 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _300) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _301) + cbTextureTilingScale._m0[13u].w));
    vec4 _338 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _343 = _338.x * cbMtdParam._m0[11u].x;
    float _344 = _338.y * cbMtdParam._m0[11u].y;
    float _345 = _338.z * cbMtdParam._m0[11u].z;
    vec4 _364 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _300) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _301) + cbTextureTilingScale._m0[5u].w));
    vec4 _415 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _417 = _415.x;
    float _429 = dot(vec4(_417, _415.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _446 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w)).x) * 2.0) - ((((_417 - _429) * cbMtdParam._m0[24u].z) + _429) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3846 = isnan(0.0) ? _446 : (isnan(_446) ? 0.0 : max(_446, 0.0));
    float _447 = isnan(1.0) ? _3846 : (isnan(_3846) ? 1.0 : min(_3846, 1.0));
    float _454 = (_447 * ((_364.x * cbMtdParam._m0[12u].x) - _343)) + _343;
    float _455 = (_447 * ((_364.y * cbMtdParam._m0[12u].y) - _344)) + _344;
    float _456 = (_447 * ((_364.z * cbMtdParam._m0[12u].z) - _345)) + _345;
    float _460 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _314.x) * _454;
    float _463 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _314.y) * _455;
    float _466 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _314.z) * _456;
    float _473 = ((_454 - _460) * (isnan(1.0) ? _3813 : (isnan(_3813) ? 1.0 : min(_3813, 1.0)))) + _460;
    float _474 = ((_455 - _463) * (isnan(1.0) ? _3824 : (isnan(_3824) ? 1.0 : min(_3824, 1.0)))) + _463;
    float _475 = ((_456 - _466) * (isnan(1.0) ? _3835 : (isnan(_3835) ? 1.0 : min(_3835, 1.0)))) + _466;
    vec4 _494 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _300) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _301) + cbTextureTilingScale._m0[14u].w));
    vec4 _514 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _300) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _301) + cbTextureTilingScale._m0[20u].w));
    vec4 _541 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _300) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _301) + cbTextureTilingScale._m0[4u].w));
    vec4 _558 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _560 = _558.x;
    float _561 = _558.y;
    float _562 = _558.z;
    float _571 = ((_541.z - _562) * _447) + _562;
    float _574 = ((((_541.x - _560) * _447) + _560) * 2.0) + (-1.0);
    float _575 = ((((_541.y - _561) * _447) + _561) * 2.0) + (-1.0);
    float _576 = dot(vec2(_574, _575), vec2(_574, _575));
    float _3857 = isnan(0.0) ? _576 : (isnan(_576) ? 0.0 : max(_576, 0.0));
    float _581 = sqrt(1.0 - (isnan(1.0) ? _3857 : (isnan(_3857) ? 1.0 : min(_3857, 1.0))));
    vec4 _601 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _613 = (_574 + ((((_514.x * 2.0) + (-1.0)) * TEXCOORD_11.x) * cbMtdParam._m0[20u].x)) + (((_601.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _614 = (_575 + ((((_514.y * 2.0) + (-1.0)) * TEXCOORD_11.y) * cbMtdParam._m0[20u].x)) + (((_601.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _617 = fma(_581, _250, fma(_614, _257, _613 * _243));
    float _620 = fma(_581, _251, fma(_614, _258, _613 * _244));
    float _623 = fma(_581, _252, fma(_614, _259, _613 * _245));
    float _627 = inversesqrt(dot(vec3(_617, _620, _623), vec3(_617, _620, _623)));
    vec4 _654 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _300) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _301) + cbTextureTilingScale._m0[11u].w));
    float _656 = _654.x;
    float _657 = 1.0 - _656;
    float _663 = (cbMtdParam._m0[19u].x + dot(vec4(_627 * _617, _627 * _620, _627 * _623, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_656 - _657) * cbMtdParam._m0[24u].w) + _657) * cbMtdParam._m0[21u].z);
    float _3868 = isnan(0.0) ? _663 : (isnan(_663) ? 0.0 : max(_663, 0.0));
    float _664 = isnan(1.0) ? _3868 : (isnan(_3868) ? 1.0 : min(_3868, 1.0));
    float _666 = (-0.0) - cbMtdParam._m0[24u].x;
    float _668 = isnan(0.0) ? _666 : (isnan(_666) ? 0.0 : max(_666, 0.0));
    float _669 = isnan(1.0) ? _668 : (isnan(_668) ? 1.0 : min(_668, 1.0));
    float _676 = _664 - ((_664 * TEXCOORD_8.x) * _669);
    float _677 = _664 - ((_664 * TEXCOORD_8.y) * _669);
    float _678 = _664 - ((_664 * TEXCOORD_8.z) * _669);
    float _685 = (_676 * ((_494.x * cbMtdParam._m0[18u].x) - _473)) + _473;
    float _686 = (_677 * ((_494.y * cbMtdParam._m0[18u].y) - _474)) + _474;
    float _687 = (_678 * ((_494.z * cbMtdParam._m0[18u].z) - _475)) + _475;
    vec4 _699 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _300) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _301) + cbTextureTilingScale._m0[19u].w));
    float _701 = _699.x;
    float _702 = 1.0 - _701;
    float _728 = (TEXCOORD_8.x - ((cbMtdParam._m0[22u].w * (1.0 - TEXCOORD_8.x)) * ((((_701 - _702) * cbMtdParam._m0[24u].y) + _702) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3889 = isnan(0.0) ? _728 : (isnan(_728) ? 0.0 : max(_728, 0.0));
    float _729 = isnan(1.0) ? _3889 : (isnan(_3889) ? 1.0 : min(_3889, 1.0));
    float _737 = ((((cbMtdParam._m0[10u].x - _685) * TEXCOORD_8.x) * cbMtdParam._m0[23u].w) * _729) + _685;
    float _738 = ((((cbMtdParam._m0[10u].y - _686) * TEXCOORD_8.y) * cbMtdParam._m0[23u].w) * _729) + _686;
    float _739 = (((cbMtdParam._m0[23u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _687)) * _729) + _687;
    float _744 = (((_514.z - _571) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _571;
    float _748 = ((_601.z - _744) * cbMtdParam._m0[19u].w) + _744;
    vec4 _762 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _300) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _301) + cbTextureTilingScale._m0[15u].w));
    float _769 = (_762.x * 2.0) + (-1.0);
    float _770 = (_762.y * 2.0) + (-1.0);
    float _771 = dot(vec2(_769, _770), vec2(_769, _770));
    float _3900 = isnan(0.0) ? _771 : (isnan(_771) ? 0.0 : max(_771, 0.0));
    float _779 = ((_762.z - _748) * _676) + _748;
    float _782 = ((cbMtdParam._m0[23u].y - _779) * _729) + _779;
    vec4 _801 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _300) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _301) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _807 = (_801.x * 2.0) + (-1.0);
    float _808 = (_801.y * 2.0) + (-1.0);
    float _809 = dot(vec2(_807, _808), vec2(_807, _808));
    float _3911 = isnan(0.0) ? _809 : (isnan(_809) ? 0.0 : max(_809, 0.0));
    float _824 = ((sqrt(1.0 - (isnan(1.0) ? _3900 : (isnan(_3900) ? 1.0 : min(_3900, 1.0)))) - _581) * _678) + _581;
    float _827 = (((_769 - _613) * _676) + _613) + (cbMtdParam._m0[21u].x * _613);
    float _828 = (((_770 - _614) * _677) + _614) + (cbMtdParam._m0[21u].x * _614);
    float _839 = (((_807 - _827) + (_827 * cbMtdParam._m0[22u].z)) * _729) + _827;
    float _840 = (((_808 - _828) + (_828 * cbMtdParam._m0[22u].z)) * _729) + _828;
    float _841 = (_729 * (sqrt(1.0 - (isnan(1.0) ? _3911 : (isnan(_3911) ? 1.0 : min(_3911, 1.0)))) - _824)) + _824;
    float _845 = cbMtdParam._m0[22u].x + _601.w;
    float _848 = fma(_841, _250, fma(_840, _257, _839 * _243));
    float _851 = fma(_841, _251, fma(_840, _258, _839 * _244));
    float _854 = fma(_841, _252, fma(_840, _259, _839 * _245));
    float _858 = inversesqrt(dot(vec3(_848, _851, _854), vec3(_848, _851, _854)));
    float _859 = _858 * _848;
    float _860 = _858 * _851;
    float _861 = _858 * _854;
    float _3922 = isnan(0.0) ? _782 : (isnan(_782) ? 0.0 : max(_782, 0.0));
    float _862 = isnan(1.0) ? _3922 : (isnan(_3922) ? 1.0 : min(_3922, 1.0));
    float _3933 = isnan(0.0) ? _845 : (isnan(_845) ? 0.0 : max(_845, 0.0));
    float _3944 = isnan(0.0) ? _737 : (isnan(_737) ? 0.0 : max(_737, 0.0));
    float _3955 = isnan(0.0) ? _738 : (isnan(_738) ? 0.0 : max(_738, 0.0));
    float _3966 = isnan(0.0) ? _739 : (isnan(_739) ? 0.0 : max(_739, 0.0));
    float _880 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _921 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _931 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _921);
    float _932 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _921);
    float _933 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _921);
    float _937 = inversesqrt(dot(vec3(_931, _932, _933), vec3(_931, _932, _933)));
    float _938 = _931 * _937;
    float _939 = _932 * _937;
    float _940 = _933 * _937;
    vec4 _945 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _947 = _945.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1101 = sqrt(((_931 * _931) + (_932 * _932)) + (_933 * _933));
        float _1107 = (cbMatDynParam._m0[5u].x * _1101) + cbMatDynParam._m0[5u].y;
        float _3977 = isnan(0.0) ? _1107 : (isnan(_1107) ? 0.0 : max(_1107, 0.0));
        float _1108 = isnan(1.0) ? _3977 : (isnan(_3977) ? 1.0 : min(_3977, 1.0));
        float _1112 = (cbMatDynParam._m0[5u].z * _1101) + cbMatDynParam._m0[5u].w;
        float _3988 = isnan(0.0) ? _1112 : (isnan(_1112) ? 0.0 : max(_1112, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3988 : (isnan(_3988) ? 1.0 : min(_3988, 1.0))) - _1108)) + _1108) < ((_947 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _958 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _959 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _977 = fma(_861, cbSceneParam._m0[5u].z, fma(_860, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _859));
    float _980 = fma(_861, cbSceneParam._m0[6u].z, fma(_860, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _859));
    float _983 = fma(_861, cbSceneParam._m0[7u].z, fma(_860, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _859));
    uint _996 = _281 + 9u;
    uint _997 = _996 + uint(cbMatDynParam._m0[0u].w);
    float _1003 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3944 : (isnan(_3944) ? 1.0 : min(_3944, 1.0)))) * cbInstanceData._m0[_997].x;
    float _1004 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3955 : (isnan(_3955) ? 1.0 : min(_3955, 1.0)))) * cbInstanceData._m0[_997].y;
    float _1005 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3966 : (isnan(_3966) ? 1.0 : min(_3966, 1.0)))) * cbInstanceData._m0[_997].z;
    float _3999 = isnan(0.0) ? _1003 : (isnan(_1003) ? 0.0 : max(_1003, 0.0));
    float _1006 = isnan(1.0) ? _3999 : (isnan(_3999) ? 1.0 : min(_3999, 1.0));
    float _4010 = isnan(0.0) ? _1004 : (isnan(_1004) ? 0.0 : max(_1004, 0.0));
    float _1007 = isnan(1.0) ? _4010 : (isnan(_4010) ? 1.0 : min(_4010, 1.0));
    float _4021 = isnan(0.0) ? _1005 : (isnan(_1005) ? 0.0 : max(_1005, 0.0));
    float _1008 = isnan(1.0) ? _4021 : (isnan(_4021) ? 1.0 : min(_4021, 1.0));
    vec4 _1017 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _958, cbSceneParam._m0[86u].y * _959));
    float _1021 = ((isnan(1.0) ? _3933 : (isnan(_3933) ? 1.0 : min(_3933, 1.0))) * TEXCOORD_5.w) * _1017.x;
    float _1022 = dot(vec3(_859, _860, _861), vec3(_938, _939, _940));
    float _1025 = _1022 * 2.0;
    float _1029 = (_1025 * _859) - _938;
    float _1030 = (_1025 * _860) - _939;
    float _1031 = (_1025 * _861) - _940;
    float _1035 = abs(dot(vec3(_938, _939, _940), vec3(_859, _860, _861)));
    float _4032 = isnan(0.0) ? _1035 : (isnan(_1035) ? 0.0 : max(_1035, 0.0));
    float _1037 = sqrt(_862);
    float _1050 = exp2((_1037 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4032 : (isnan(_4032) ? 1.0 : min(_4032, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1037 * 3.0));
    float _1082 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1086 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1090 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1419;
    float _1421;
    float _1422;
    float _1423;
    float _1424;
    float _1425;
    float _1426;
    float _1427;
    float _1428;
    float _1429;
    float _1430;
    float _1431;
    float _1432;
    float _1433;
    float _1434;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1144 = fma(_1090, cbModelParam._m0[26u].z, fma(_1086, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1082));
        float _1148 = fma(_1090, cbModelParam._m0[27u].z, fma(_1086, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1082));
        float _1152 = fma(_1090, cbModelParam._m0[28u].z, fma(_1086, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1082));
        float _1177 = _1082 + _859;
        float _1178 = _1086 + _860;
        float _1179 = _1090 + _861;
        float _1189 = fma(_1179, cbModelParam._m0[26u].z, fma(_1178, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1177)) - _1144;
        float _1190 = fma(_1179, cbModelParam._m0[27u].z, fma(_1178, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1177)) - _1148;
        float _1191 = fma(_1179, cbModelParam._m0[28u].z, fma(_1178, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1177)) - _1152;
        float _1195 = inversesqrt(dot(vec3(_1189, _1190, _1191), vec3(_1189, _1190, _1191)));
        float _1208 = ((_1195 * _1189) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1144 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1209 = ((_1195 * _1190) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1148 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1210 = ((_1195 * _1191) / cbModelParam._m0[34u].z) + ((((((_1152 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1213 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1208, _1209, _1210), 0.0);
        vec4 _1220 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1208, _1209, _1210), 0.0);
        vec4 _1227 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1208, _1209, _1210), 0.0);
        vec4 _1234 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1208, _1209, _1210), 0.0);
        float _1247 = exp2((_1213.w + (-0.5)) * 20.0) * 2.0;
        float _1248 = _1247 * (_1213.x + (-0.5));
        float _1249 = _1247 * (_1213.y + (-0.5));
        float _1250 = _1247 * (_1213.z + (-0.5));
        float _1257 = exp2((_1220.w + (-0.5)) * 20.0) * 2.0;
        float _1258 = _1257 * (_1220.x + (-0.5));
        float _1259 = _1257 * (_1220.y + (-0.5));
        float _1260 = _1257 * (_1220.z + (-0.5));
        float _1267 = exp2((_1227.w + (-0.5)) * 20.0) * 2.0;
        float _1268 = _1267 * (_1227.x + (-0.5));
        float _1269 = _1267 * (_1227.y + (-0.5));
        float _1270 = _1267 * (_1227.z + (-0.5));
        float _1277 = exp2((_1234.w + (-0.5)) * 20.0) * 2.0;
        float _1278 = _1277 * (_1234.x + (-0.5));
        float _1279 = _1277 * (_1234.y + (-0.5));
        float _1280 = _1277 * (_1234.z + (-0.5));
        float _1281 = isnan(0.0) ? _1278 : (isnan(_1278) ? 0.0 : max(_1278, 0.0));
        float _1282 = isnan(0.0) ? _1279 : (isnan(_1279) ? 0.0 : max(_1279, 0.0));
        float _1283 = isnan(0.0) ? _1280 : (isnan(_1280) ? 0.0 : max(_1280, 0.0));
        float _1284 = _1248 * 0.5;
        float _1285 = _1258 * 0.5;
        float _1286 = _1268 * 0.5;
        float _1287 = dot(vec3(_1284, _1285, _1286), vec3(_1284, _1285, _1286));
        float _1292 = (_1287 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1287);
        float _1301 = (dot(vec3(_859, _860, _861), vec3(_1292 * _1284, _1292 * _1285, _1292 * _1286)) + 1.0) * 0.5;
        float _4058 = isnan(0.0) ? _1301 : (isnan(_1301) ? 0.0 : max(_1301, 0.0));
        float _1311 = sqrt(((_1285 * _1285) + (_1284 * _1284)) + (_1286 * _1286)) / (_1281 + 9.9999997473787516355514526367188e-06);
        float _4069 = isnan(0.0) ? _1311 : (isnan(_1311) ? 0.0 : max(_1311, 0.0));
        float _1312 = isnan(1.0) ? _4069 : (isnan(_4069) ? 1.0 : min(_4069, 1.0));
        float _1313 = _1312 * 2.0;
        float _1317 = (1.0 - _1312) / (_1312 + 1.0);
        float _4080 = isnan(0.0) ? _1317 : (isnan(_1317) ? 0.0 : max(_1317, 0.0));
        float _1318 = isnan(1.0) ? _4080 : (isnan(_4080) ? 1.0 : min(_4080, 1.0));
        float _1327 = ((((1.0 - _1318) * (_1313 + 2.0)) * exp2(log2(isnan(1.0) ? _4058 : (isnan(_4058) ? 1.0 : min(_4058, 1.0))) * (_1313 + 1.0))) + _1318) * _1281;
        float _1328 = _1249 * 0.5;
        float _1329 = _1259 * 0.5;
        float _1330 = _1269 * 0.5;
        float _1331 = dot(vec3(_1328, _1329, _1330), vec3(_1328, _1329, _1330));
        float _1336 = (_1331 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1331);
        float _1344 = (dot(vec3(_859, _860, _861), vec3(_1336 * _1328, _1336 * _1329, _1336 * _1330)) + 1.0) * 0.5;
        float _4091 = isnan(0.0) ? _1344 : (isnan(_1344) ? 0.0 : max(_1344, 0.0));
        float _1353 = sqrt(((_1329 * _1329) + (_1328 * _1328)) + (_1330 * _1330)) / (_1282 + 9.9999997473787516355514526367188e-06);
        float _4102 = isnan(0.0) ? _1353 : (isnan(_1353) ? 0.0 : max(_1353, 0.0));
        float _1354 = isnan(1.0) ? _4102 : (isnan(_4102) ? 1.0 : min(_4102, 1.0));
        float _1355 = _1354 * 2.0;
        float _1359 = (1.0 - _1354) / (_1354 + 1.0);
        float _4113 = isnan(0.0) ? _1359 : (isnan(_1359) ? 0.0 : max(_1359, 0.0));
        float _1360 = isnan(1.0) ? _4113 : (isnan(_4113) ? 1.0 : min(_4113, 1.0));
        float _1369 = ((((1.0 - _1360) * (_1355 + 2.0)) * exp2(log2(isnan(1.0) ? _4091 : (isnan(_4091) ? 1.0 : min(_4091, 1.0))) * (_1355 + 1.0))) + _1360) * _1282;
        float _1370 = _1250 * 0.5;
        float _1371 = _1260 * 0.5;
        float _1372 = _1270 * 0.5;
        float _1373 = dot(vec3(_1370, _1371, _1372), vec3(_1370, _1371, _1372));
        float _1378 = (_1373 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1373);
        float _1386 = (dot(vec3(_859, _860, _861), vec3(_1378 * _1370, _1378 * _1371, _1378 * _1372)) + 1.0) * 0.5;
        float _4124 = isnan(0.0) ? _1386 : (isnan(_1386) ? 0.0 : max(_1386, 0.0));
        float _1395 = sqrt(((_1371 * _1371) + (_1370 * _1370)) + (_1372 * _1372)) / (_1283 + 9.9999997473787516355514526367188e-06);
        float _4135 = isnan(0.0) ? _1395 : (isnan(_1395) ? 0.0 : max(_1395, 0.0));
        float _1396 = isnan(1.0) ? _4135 : (isnan(_4135) ? 1.0 : min(_4135, 1.0));
        float _1397 = _1396 * 2.0;
        float _1401 = (1.0 - _1396) / (_1396 + 1.0);
        float _4146 = isnan(0.0) ? _1401 : (isnan(_1401) ? 0.0 : max(_1401, 0.0));
        float _1402 = isnan(1.0) ? _4146 : (isnan(_4146) ? 1.0 : min(_4146, 1.0));
        float _1411 = ((((1.0 - _1402) * (_1397 + 2.0)) * exp2(log2(isnan(1.0) ? _4124 : (isnan(_4124) ? 1.0 : min(_4124, 1.0))) * (_1397 + 1.0))) + _1402) * _1283;
        _1419 = _1250;
        _1421 = _1249;
        _1422 = _1248;
        _1423 = _1260;
        _1424 = _1259;
        _1425 = _1258;
        _1426 = _1270;
        _1427 = _1269;
        _1428 = _1268;
        _1429 = _1283;
        _1430 = _1282;
        _1431 = _1281;
        _1432 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1327 : (isnan(_1327) ? 0.0 : max(_1327, 0.0)));
        _1433 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1369 : (isnan(_1369) ? 0.0 : max(_1369, 0.0)));
        _1434 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1411 : (isnan(_1411) ? 0.0 : max(_1411, 0.0)));
    }
    else
    {
        _1419 = _1420;
        _1421 = _1420;
        _1422 = _1420;
        _1423 = _1420;
        _1424 = _1420;
        _1425 = _1420;
        _1426 = _1420;
        _1427 = _1420;
        _1428 = _1420;
        _1429 = _1420;
        _1430 = _1420;
        _1431 = _1420;
        _1432 = 0.0;
        _1433 = 0.0;
        _1434 = 0.0;
    }
    float _1731;
    float _1732;
    float _1733;
    float _1734;
    float _1735;
    float _1736;
    float _1737;
    float _1738;
    float _1739;
    float _1740;
    float _1741;
    float _1742;
    float _1743;
    float _1744;
    float _1745;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1462 = fma(_1090, cbModelParam._m0[30u].z, fma(_1086, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1082));
        float _1466 = fma(_1090, cbModelParam._m0[31u].z, fma(_1086, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1082));
        float _1470 = fma(_1090, cbModelParam._m0[32u].z, fma(_1086, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1082));
        float _1493 = _1082 + _859;
        float _1494 = _1086 + _860;
        float _1495 = _1090 + _861;
        float _1505 = fma(_1495, cbModelParam._m0[30u].z, fma(_1494, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1493)) - _1462;
        float _1506 = fma(_1495, cbModelParam._m0[31u].z, fma(_1494, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1493)) - _1466;
        float _1507 = fma(_1495, cbModelParam._m0[32u].z, fma(_1494, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1493)) - _1470;
        float _1511 = inversesqrt(dot(vec3(_1505, _1506, _1507), vec3(_1505, _1506, _1507)));
        float _1524 = ((_1511 * _1505) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1462 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1525 = ((_1511 * _1506) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1466 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1526 = ((_1511 * _1507) / cbModelParam._m0[35u].z) + ((((((_1470 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1528 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1524, _1525, _1526), 0.0);
        vec4 _1535 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1524, _1525, _1526), 0.0);
        vec4 _1542 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1524, _1525, _1526), 0.0);
        vec4 _1549 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1524, _1525, _1526), 0.0);
        float _1561 = exp2((_1528.w + (-0.5)) * 20.0) * 2.0;
        float _1562 = _1561 * (_1528.x + (-0.5));
        float _1563 = _1561 * (_1528.y + (-0.5));
        float _1564 = _1561 * (_1528.z + (-0.5));
        float _1571 = exp2((_1535.w + (-0.5)) * 20.0) * 2.0;
        float _1572 = _1571 * (_1535.x + (-0.5));
        float _1573 = _1571 * (_1535.y + (-0.5));
        float _1574 = _1571 * (_1535.z + (-0.5));
        float _1581 = exp2((_1542.w + (-0.5)) * 20.0) * 2.0;
        float _1582 = _1581 * (_1542.x + (-0.5));
        float _1583 = _1581 * (_1542.y + (-0.5));
        float _1584 = _1581 * (_1542.z + (-0.5));
        float _1591 = exp2((_1549.w + (-0.5)) * 20.0) * 2.0;
        float _1592 = _1591 * (_1549.x + (-0.5));
        float _1593 = _1591 * (_1549.y + (-0.5));
        float _1594 = _1591 * (_1549.z + (-0.5));
        float _1595 = isnan(0.0) ? _1592 : (isnan(_1592) ? 0.0 : max(_1592, 0.0));
        float _1596 = isnan(0.0) ? _1593 : (isnan(_1593) ? 0.0 : max(_1593, 0.0));
        float _1597 = isnan(0.0) ? _1594 : (isnan(_1594) ? 0.0 : max(_1594, 0.0));
        float _1598 = _1562 * 0.5;
        float _1599 = _1572 * 0.5;
        float _1600 = _1582 * 0.5;
        float _1601 = dot(vec3(_1598, _1599, _1600), vec3(_1598, _1599, _1600));
        float _1606 = (_1601 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1601);
        float _1614 = (dot(vec3(_859, _860, _861), vec3(_1606 * _1598, _1606 * _1599, _1606 * _1600)) + 1.0) * 0.5;
        float _4187 = isnan(0.0) ? _1614 : (isnan(_1614) ? 0.0 : max(_1614, 0.0));
        float _1623 = sqrt(((_1599 * _1599) + (_1598 * _1598)) + (_1600 * _1600)) / (_1595 + 9.9999997473787516355514526367188e-06);
        float _4198 = isnan(0.0) ? _1623 : (isnan(_1623) ? 0.0 : max(_1623, 0.0));
        float _1624 = isnan(1.0) ? _4198 : (isnan(_4198) ? 1.0 : min(_4198, 1.0));
        float _1625 = _1624 * 2.0;
        float _1629 = (1.0 - _1624) / (_1624 + 1.0);
        float _4209 = isnan(0.0) ? _1629 : (isnan(_1629) ? 0.0 : max(_1629, 0.0));
        float _1630 = isnan(1.0) ? _4209 : (isnan(_4209) ? 1.0 : min(_4209, 1.0));
        float _1639 = ((((1.0 - _1630) * (_1625 + 2.0)) * exp2(log2(isnan(1.0) ? _4187 : (isnan(_4187) ? 1.0 : min(_4187, 1.0))) * (_1625 + 1.0))) + _1630) * _1595;
        float _1640 = _1563 * 0.5;
        float _1641 = _1573 * 0.5;
        float _1642 = _1583 * 0.5;
        float _1643 = dot(vec3(_1640, _1641, _1642), vec3(_1640, _1641, _1642));
        float _1648 = (_1643 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1643);
        float _1656 = (dot(vec3(_859, _860, _861), vec3(_1648 * _1640, _1648 * _1641, _1648 * _1642)) + 1.0) * 0.5;
        float _4220 = isnan(0.0) ? _1656 : (isnan(_1656) ? 0.0 : max(_1656, 0.0));
        float _1665 = sqrt(((_1641 * _1641) + (_1640 * _1640)) + (_1642 * _1642)) / (_1596 + 9.9999997473787516355514526367188e-06);
        float _4231 = isnan(0.0) ? _1665 : (isnan(_1665) ? 0.0 : max(_1665, 0.0));
        float _1666 = isnan(1.0) ? _4231 : (isnan(_4231) ? 1.0 : min(_4231, 1.0));
        float _1667 = _1666 * 2.0;
        float _1671 = (1.0 - _1666) / (_1666 + 1.0);
        float _4242 = isnan(0.0) ? _1671 : (isnan(_1671) ? 0.0 : max(_1671, 0.0));
        float _1672 = isnan(1.0) ? _4242 : (isnan(_4242) ? 1.0 : min(_4242, 1.0));
        float _1681 = ((((1.0 - _1672) * (_1667 + 2.0)) * exp2(log2(isnan(1.0) ? _4220 : (isnan(_4220) ? 1.0 : min(_4220, 1.0))) * (_1667 + 1.0))) + _1672) * _1596;
        float _1682 = _1564 * 0.5;
        float _1683 = _1574 * 0.5;
        float _1684 = _1584 * 0.5;
        float _1685 = dot(vec3(_1682, _1683, _1684), vec3(_1682, _1683, _1684));
        float _1690 = (_1685 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1685);
        float _1698 = (dot(vec3(_859, _860, _861), vec3(_1690 * _1682, _1690 * _1683, _1690 * _1684)) + 1.0) * 0.5;
        float _4253 = isnan(0.0) ? _1698 : (isnan(_1698) ? 0.0 : max(_1698, 0.0));
        float _1707 = sqrt(((_1683 * _1683) + (_1682 * _1682)) + (_1684 * _1684)) / (_1597 + 9.9999997473787516355514526367188e-06);
        float _4264 = isnan(0.0) ? _1707 : (isnan(_1707) ? 0.0 : max(_1707, 0.0));
        float _1708 = isnan(1.0) ? _4264 : (isnan(_4264) ? 1.0 : min(_4264, 1.0));
        float _1709 = _1708 * 2.0;
        float _1713 = (1.0 - _1708) / (_1708 + 1.0);
        float _4275 = isnan(0.0) ? _1713 : (isnan(_1713) ? 0.0 : max(_1713, 0.0));
        float _1714 = isnan(1.0) ? _4275 : (isnan(_4275) ? 1.0 : min(_4275, 1.0));
        float _1723 = ((((1.0 - _1714) * (_1709 + 2.0)) * exp2(log2(isnan(1.0) ? _4253 : (isnan(_4253) ? 1.0 : min(_4253, 1.0))) * (_1709 + 1.0))) + _1714) * _1597;
        _1731 = _1564;
        _1732 = _1563;
        _1733 = _1562;
        _1734 = _1574;
        _1735 = _1573;
        _1736 = _1572;
        _1737 = _1584;
        _1738 = _1583;
        _1739 = _1582;
        _1740 = _1597;
        _1741 = _1596;
        _1742 = _1595;
        _1743 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1639 : (isnan(_1639) ? 0.0 : max(_1639, 0.0)));
        _1744 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1681 : (isnan(_1681) ? 0.0 : max(_1681, 0.0)));
        _1745 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1723 : (isnan(_1723) ? 0.0 : max(_1723, 0.0)));
    }
    else
    {
        _1731 = _1420;
        _1732 = _1420;
        _1733 = _1420;
        _1734 = _1420;
        _1735 = _1420;
        _1736 = _1420;
        _1737 = _1420;
        _1738 = _1420;
        _1739 = _1420;
        _1740 = _1420;
        _1741 = _1420;
        _1742 = _1420;
        _1743 = 0.0;
        _1744 = 0.0;
        _1745 = 0.0;
    }
    float _1755 = (cbModelParam._m0[1u].x * (_1743 - _1432)) + _1432;
    float _1756 = (cbModelParam._m0[1u].x * (_1744 - _1433)) + _1433;
    float _1757 = (cbModelParam._m0[1u].x * (_1745 - _1434)) + _1434;
    float _1778 = fma(_1757, cbSceneParam._m0[89u].z, fma(_1756, cbSceneParam._m0[89u].y, _1755 * cbSceneParam._m0[89u].x));
    float _1781 = fma(_1757, cbSceneParam._m0[90u].z, fma(_1756, cbSceneParam._m0[90u].y, _1755 * cbSceneParam._m0[90u].x));
    float _1784 = fma(_1757, cbSceneParam._m0[91u].z, fma(_1756, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1755));
    float _1799 = _1029 * 0.5;
    float _1800 = _1030 * 0.5;
    float _1801 = _1031 * 0.5;
    float _1802 = dot(vec4(_1799, _1800, _1801, 1.0), vec4(_1733, _1736, _1739, _1742));
    float _1805 = dot(vec4(_1799, _1800, _1801, 1.0), vec4(_1732, _1735, _1738, _1741));
    float _1808 = dot(vec4(_1799, _1800, _1801, 1.0), vec4(_1731, _1734, _1737, _1740));
    float _1842;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1815 = dot(vec4(_1799, _1800, _1801, 1.0), vec4(_1419, _1423, _1426, _1429));
        float _1819 = dot(vec4(_1799, _1800, _1801, 1.0), vec4(_1421, _1424, _1427, _1430));
        float _1823 = dot(vec4(_1799, _1800, _1801, 1.0), vec4(_1422, _1425, _1428, _1431));
        float _1830 = dot(vec4(cbModelParam._m0[39u]), vec4(_1799, _1800, _1801, 1.0));
        _1842 = dot(vec3(isnan(0.0) ? _1823 : (isnan(_1823) ? 0.0 : max(_1823, 0.0)), isnan(0.0) ? _1819 : (isnan(_1819) ? 0.0 : max(_1819, 0.0)), isnan(0.0) ? _1815 : (isnan(_1815) ? 0.0 : max(_1815, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1830) ? 0.0 : (isnan(0.0) ? _1830 : max(0.0, _1830))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1842 = 1.0;
    }
    float _1853;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1844 = dot(vec4(cbModelParam._m0[40u]), vec4(_1799, _1800, _1801, 1.0));
        _1853 = dot(vec3(isnan(0.0) ? _1802 : (isnan(_1802) ? 0.0 : max(_1802, 0.0)), isnan(0.0) ? _1805 : (isnan(_1805) ? 0.0 : max(_1805, 0.0)), isnan(0.0) ? _1808 : (isnan(_1808) ? 0.0 : max(_1808, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1844) ? 0.0 : (isnan(0.0) ? _1844 : max(0.0, _1844))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1853 = 1.0;
    }
    float _1857 = (_1853 * cbModelParam._m0[1u].x) + (_1842 * (1.0 - cbModelParam._m0[1u].x));
    float _1867 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _862);
    float _1868 = isnan(_1867) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1867 : min(cbModelParam._m0[25u].z, _1867));
    float _1948;
    float _1950;
    float _1952;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1915 = fma(_1090, cbModelParam._m0[13u].z, fma(_1086, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1082)) + cbModelParam._m0[13u].w;
        float _1919 = fma(_1090, cbModelParam._m0[14u].z, fma(_1086, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1082)) + cbModelParam._m0[14u].w;
        float _1923 = fma(_1090, cbModelParam._m0[15u].z, fma(_1086, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1082)) + cbModelParam._m0[15u].w;
        float _1926 = fma(_1031, cbModelParam._m0[13u].z, fma(_1030, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1029));
        float _1929 = fma(_1031, cbModelParam._m0[14u].z, fma(_1030, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1029));
        float _1932 = fma(_1031, cbModelParam._m0[15u].z, fma(_1030, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1029));
        float _1960;
        if (_1926 > 0.0)
        {
            _1960 = abs((1.0 - _1915) / _1926);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1926 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1915 + 1.0) / _1926);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1960 = frontier_phi_17_15_ladder;
        }
        float _2181;
        if (_1929 > 0.0)
        {
            _2181 = abs((1.0 - _1919) / _1929);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1929 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1919 + 1.0) / _1929);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2181 = frontier_phi_26_22_ladder;
        }
        float _2427;
        if (_1932 > 0.0)
        {
            _2427 = abs((1.0 - _1923) / _1932);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1932 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1923 + 1.0) / _1932);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2427 = frontier_phi_38_33_ladder;
        }
        float _2429 = isnan(_2181) ? _1960 : (isnan(_1960) ? _2181 : min(_1960, _2181));
        float _2430 = isnan(_2427) ? _2429 : (isnan(_2429) ? _2427 : min(_2429, _2427));
        float _2434 = (_2430 * _1926) + _1915;
        float _2435 = (_2430 * _1929) + _1919;
        float _2436 = (_2430 * _1932) + _1923;
        float _2437 = _2430 * 9.9999997473787516355514526367188e-05;
        float _2439 = (-1.0) - _2437;
        float _2441 = _2437 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2436 > _2441) || ((_2436 < _2439) || ((_2435 > _2441) || ((_2435 < _2439) || ((_2434 < _2439) || (_2434 > _2441))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2560 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2436, cbModelParam._m0[9u].z, fma(_2435, cbModelParam._m0[9u].y, _2434 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2436, cbModelParam._m0[10u].z, fma(_2435, cbModelParam._m0[10u].y, _2434 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2436, cbModelParam._m0[11u].z, fma(_2435, cbModelParam._m0[11u].y, _2434 * cbModelParam._m0[11u].x))), _1868);
            frontier_phi_16_38_ladder = _2560.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2560.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2560.x * cbModelParam._m0[1u].y;
        }
        _1948 = frontier_phi_16_38_ladder_2;
        _1950 = frontier_phi_16_38_ladder_1;
        _1952 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1936 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1029, _1030, _1031), _1868);
        _1948 = _1936.x * cbModelParam._m0[1u].y;
        _1950 = _1936.y * cbModelParam._m0[1u].y;
        _1952 = _1936.z * cbModelParam._m0[1u].y;
    }
    float _1956 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _862);
    float _1957 = isnan(_1956) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1956 : min(cbModelParam._m0[25u].w, _1956));
    float _2046;
    float _2048;
    float _2050;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2010 = fma(_1090, cbModelParam._m0[21u].z, fma(_1086, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1082)) + cbModelParam._m0[21u].w;
        float _2014 = fma(_1090, cbModelParam._m0[22u].z, fma(_1086, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1082)) + cbModelParam._m0[22u].w;
        float _2018 = fma(_1090, cbModelParam._m0[23u].z, fma(_1086, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1082)) + cbModelParam._m0[23u].w;
        float _2021 = fma(_1031, cbModelParam._m0[21u].z, fma(_1030, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1029));
        float _2024 = fma(_1031, cbModelParam._m0[22u].z, fma(_1030, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1029));
        float _2027 = fma(_1031, cbModelParam._m0[23u].z, fma(_1030, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1029));
        float _2186;
        if (_2021 > 0.0)
        {
            _2186 = abs((1.0 - _2010) / _2021);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_2021 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_2010 + 1.0) / _2021);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2186 = frontier_phi_28_24_ladder;
        }
        float _2454;
        if (_2024 > 0.0)
        {
            _2454 = abs((1.0 - _2014) / _2024);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_2024 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_2014 + 1.0) / _2024);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2454 = frontier_phi_40_35_ladder;
        }
        float _2659;
        if (_2027 > 0.0)
        {
            _2659 = abs((1.0 - _2018) / _2027);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_2027 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_2018 + 1.0) / _2027);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2659 = frontier_phi_49_46_ladder;
        }
        float _2661 = isnan(_2454) ? _2186 : (isnan(_2186) ? _2454 : min(_2186, _2454));
        float _2662 = isnan(_2659) ? _2661 : (isnan(_2661) ? _2659 : min(_2661, _2659));
        float _2666 = (_2662 * _2021) + _2010;
        float _2667 = (_2662 * _2024) + _2014;
        float _2668 = (_2662 * _2027) + _2018;
        float _2669 = _2662 * 9.9999997473787516355514526367188e-05;
        float _2670 = (-1.0) - _2669;
        float _2672 = _2669 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2668 > _2672) || ((_2668 < _2670) || ((_2667 > _2672) || ((_2667 < _2670) || ((_2666 < _2670) || (_2666 > _2672))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2867 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2668, cbModelParam._m0[17u].z, fma(_2667, cbModelParam._m0[17u].y, _2666 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2668, cbModelParam._m0[18u].z, fma(_2667, cbModelParam._m0[18u].y, _2666 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2668, cbModelParam._m0[19u].z, fma(_2667, cbModelParam._m0[19u].y, _2666 * cbModelParam._m0[19u].x))), _1957);
            frontier_phi_25_49_ladder = _2867.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2867.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2867.x * cbModelParam._m0[1u].z;
        }
        _2046 = frontier_phi_25_49_ladder_2;
        _2048 = frontier_phi_25_49_ladder_1;
        _2050 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _2030 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1029, _1030, _1031), _1957);
        _2046 = _2030.x * cbModelParam._m0[1u].z;
        _2048 = _2030.y * cbModelParam._m0[1u].z;
        _2050 = _2030.z * cbModelParam._m0[1u].z;
    }
    float _2062 = ((((1.0 - _1050) * ((_1037 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_1050 * _1037)) * _1021;
    float _2063 = _2062 * ((cbModelParam._m0[1u].w * (_2046 - _1948)) + _1948);
    float _2064 = _2062 * ((cbModelParam._m0[1u].w * (_2048 - _1950)) + _1950);
    float _2065 = _2062 * ((cbModelParam._m0[1u].w * (_2050 - _1952)) + _1952);
    float _2068 = fma(_2065, cbSceneParam._m0[89u].z, fma(_2064, cbSceneParam._m0[89u].y, _2063 * cbSceneParam._m0[89u].x));
    float _2071 = fma(_2065, cbSceneParam._m0[90u].z, fma(_2064, cbSceneParam._m0[90u].y, _2063 * cbSceneParam._m0[90u].x));
    float _2074 = fma(_2065, cbSceneParam._m0[91u].z, fma(_2064, cbSceneParam._m0[91u].y, _2063 * cbSceneParam._m0[91u].x));
    vec4 _2082 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_958, _959));
    float _2084 = _2082.w;
    float _2096 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _2084);
    float _2097 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _2084);
    float _2098 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _2084);
    uvec4 _2102 = floatBitsToUint(cbInstanceData._m0[_281 + 5u]);
    uint _2104 = _2102.x * 14u;
    uint _2105 = _2104 + 13u;
    float _2112 = _1021 + (-1.0);
    float _2117 = (cbLight._m0[_2105].x * _2112) + 1.0;
    float _2118 = (cbLight._m0[_2105].y * _2112) + 1.0;
    float _2119 = (cbLight._m0[_2105].z * _2112) + 1.0;
    float _2120 = (cbLight._m0[_2105].w * _2112) + 1.0;
    uint _2121 = _2104 + 5u;
    float _2127 = isnan(1.0) ? _2118 : (isnan(_2118) ? 1.0 : min(_2118, 1.0));
    uint _2131 = _2104 + 4u;
    float _2140 = isnan(1.0) ? _2117 : (isnan(_2117) ? 1.0 : min(_2117, 1.0));
    uint _2144 = _2104 | 1u;
    float _2155 = dot(vec3(cbLight._m0[_2104].xyz), vec3(_859, _860, _861));
    float _2158 = dot(vec3(cbLight._m0[_2144].xyz), vec3(_859, _860, _861));
    float _4411 = isnan(0.0) ? _2155 : (isnan(_2155) ? 0.0 : max(_2155, 0.0));
    float _4422 = isnan(0.0) ? _2158 : (isnan(_2158) ? 0.0 : max(_2158, 0.0));
    float _2163 = (isnan(1.0) ? _4411 : (isnan(_4411) ? 1.0 : min(_4411, 1.0))) * 0.3183098733425140380859375;
    float _2165 = (isnan(1.0) ? _4422 : (isnan(_4422) ? 1.0 : min(_4422, 1.0))) * 0.3183098733425140380859375;
    float _2172 = ((cbLight._m0[_2121].x * _2127) * _2165) + (((cbLight._m0[_2131].x * _2096) * _2140) * _2163);
    float _2173 = ((_2127 * cbLight._m0[_2121].y) * _2165) + (((cbLight._m0[_2131].y * _2097) * _2140) * _2163);
    float _2174 = ((_2127 * cbLight._m0[_2121].z) * _2165) + (((cbLight._m0[_2131].z * _2098) * _2140) * _2163);
    uvec4 _2178 = floatBitsToUint(cbLight._m0[_2104 + 12u]);
    bool _2180 = _2178.x == 0u;
    float _2191;
    float _2193;
    float _2195;
    if (_2180)
    {
        _2191 = _2172;
        _2193 = _2173;
        _2195 = _2174;
    }
    else
    {
        uint _2199 = _2104 + 6u;
        float _2215 = (dot(vec3(cbLight._m0[_2104 + 2u].xyz), vec3(_859, _860, _861)) * 0.5) + 0.5;
        float _2216 = _2215 * _2215;
        float _4433 = isnan(0.0) ? _2216 : (isnan(_2216) ? 0.0 : max(_2216, 0.0));
        float _2217 = isnan(1.0) ? _4433 : (isnan(_4433) ? 1.0 : min(_4433, 1.0));
        float _2218 = isnan(1.0) ? _2119 : (isnan(_2119) ? 1.0 : min(_2119, 1.0));
        _2191 = (((cbLight._m0[_2199].x * 0.3183098733425140380859375) * _2217) * _2218) + _2172;
        _2193 = (((cbLight._m0[_2199].y * 0.3183098733425140380859375) * _2217) * _2218) + _2173;
        _2195 = (((cbLight._m0[_2199].z * 0.3183098733425140380859375) * _2217) * _2218) + _2174;
    }
    bool _2198 = _2178.y == 0u;
    float _2236;
    float _2238;
    float _2240;
    if (_2198)
    {
        _2236 = _2191;
        _2238 = _2193;
        _2240 = _2195;
    }
    else
    {
        uint _2398 = _2104 + 7u;
        float _2414 = (dot(vec3(cbLight._m0[_2104 + 3u].xyz), vec3(_859, _860, _861)) * 0.5) + 0.5;
        float _2415 = _2414 * _2414;
        float _4449 = isnan(0.0) ? _2415 : (isnan(_2415) ? 0.0 : max(_2415, 0.0));
        float _2416 = isnan(1.0) ? _4449 : (isnan(_4449) ? 1.0 : min(_4449, 1.0));
        float _2417 = isnan(1.0) ? _2120 : (isnan(_2120) ? 1.0 : min(_2120, 1.0));
        _2236 = (((cbLight._m0[_2398].x * 0.3183098733425140380859375) * _2416) * _2417) + _2191;
        _2238 = (((cbLight._m0[_2398].y * 0.3183098733425140380859375) * _2416) * _2417) + _2193;
        _2240 = (((cbLight._m0[_2398].z * 0.3183098733425140380859375) * _2416) * _2417) + _2195;
    }
    uint _2243 = _2104 + 8u;
    float _2256 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2104].w)) * _862) * 0.949999988079071044921875);
    float _2257 = _2256 * _2256;
    float _2258 = cbLight._m0[_2104].x + _938;
    float _2259 = cbLight._m0[_2104].y + _939;
    float _2260 = cbLight._m0[_2104].z + _940;
    float _2264 = inversesqrt(dot(vec3(_2258, _2259, _2260), vec3(_2258, _2259, _2260)));
    float _2265 = _2264 * _2258;
    float _2266 = _2264 * _2259;
    float _2267 = _2264 * _2260;
    float _2268 = dot(vec3(_859, _860, _861), vec3(cbLight._m0[_2104].xyz));
    float _4465 = isnan(0.0) ? _2268 : (isnan(_2268) ? 0.0 : max(_2268, 0.0));
    float _2271 = isnan(1.0) ? _4465 : (isnan(_4465) ? 1.0 : min(_4465, 1.0));
    float _4476 = isnan(0.0) ? _1022 : (isnan(_1022) ? 0.0 : max(_1022, 0.0));
    float _2272 = isnan(1.0) ? _4476 : (isnan(_4476) ? 1.0 : min(_4476, 1.0));
    float _2273 = dot(vec3(_859, _860, _861), vec3(_2265, _2266, _2267));
    float _4487 = isnan(0.0) ? _2273 : (isnan(_2273) ? 0.0 : max(_2273, 0.0));
    float _2276 = isnan(1.0) ? _4487 : (isnan(_4487) ? 1.0 : min(_4487, 1.0));
    float _2277 = dot(vec3(cbLight._m0[_2104].xyz), vec3(_2265, _2266, _2267));
    float _4498 = isnan(0.0) ? _2277 : (isnan(_2277) ? 0.0 : max(_2277, 0.0));
    float _2281 = _2257 * _2257;
    float _2285 = ((_2276 * _2276) * (_2281 + (-1.0))) + 1.0;
    float _2296 = (exp2(log2(1.0 - (isnan(1.0) ? _4498 : (isnan(_4498) ? 1.0 : min(_4498, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2297 = 1.0 - _2257;
    float _2308 = (0.5 / (((_2272 * ((_2271 * _2297) + _2257)) + 9.9999999392252902907785028219223e-09) + (((_2272 * _2297) + _2257) * _2271))) * _2271;
    float _4509 = isnan(0.0) ? _2308 : (isnan(_2308) ? 0.0 : max(_2308, 0.0));
    float _2310 = (isnan(1.0) ? _4509 : (isnan(_4509) ? 1.0 : min(_4509, 1.0))) * (_2281 / ((_2285 * _2285) * 3.141590118408203125));
    uint _2324 = _2104 + 9u;
    float _2335 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2144].w)) * _862) * 0.949999988079071044921875);
    float _2336 = _2335 * _2335;
    float _2337 = cbLight._m0[_2144].x + _938;
    float _2338 = cbLight._m0[_2144].y + _939;
    float _2339 = cbLight._m0[_2144].z + _940;
    float _2343 = inversesqrt(dot(vec3(_2337, _2338, _2339), vec3(_2337, _2338, _2339)));
    float _2344 = _2343 * _2337;
    float _2345 = _2343 * _2338;
    float _2346 = _2343 * _2339;
    float _2347 = dot(vec3(_859, _860, _861), vec3(cbLight._m0[_2144].xyz));
    float _4520 = isnan(0.0) ? _2347 : (isnan(_2347) ? 0.0 : max(_2347, 0.0));
    float _2350 = isnan(1.0) ? _4520 : (isnan(_4520) ? 1.0 : min(_4520, 1.0));
    float _2351 = dot(vec3(_859, _860, _861), vec3(_2344, _2345, _2346));
    float _4531 = isnan(0.0) ? _2351 : (isnan(_2351) ? 0.0 : max(_2351, 0.0));
    float _2354 = isnan(1.0) ? _4531 : (isnan(_4531) ? 1.0 : min(_4531, 1.0));
    float _2355 = dot(vec3(cbLight._m0[_2144].xyz), vec3(_2344, _2345, _2346));
    float _4542 = isnan(0.0) ? _2355 : (isnan(_2355) ? 0.0 : max(_2355, 0.0));
    float _2359 = _2336 * _2336;
    float _2363 = ((_2354 * _2354) * (_2359 + (-1.0))) + 1.0;
    float _2372 = (exp2(log2(1.0 - (isnan(1.0) ? _4542 : (isnan(_4542) ? 1.0 : min(_4542, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2373 = 1.0 - _2336;
    float _2383 = (0.5 / (((_2272 * ((_2350 * _2373) + _2336)) + 9.9999999392252902907785028219223e-09) + (((_2272 * _2373) + _2336) * _2350))) * _2350;
    float _4553 = isnan(0.0) ? _2383 : (isnan(_2383) ? 0.0 : max(_2383, 0.0));
    float _2385 = (isnan(1.0) ? _4553 : (isnan(_4553) ? 1.0 : min(_4553, 1.0))) * (_2359 / ((_2363 * _2363) * 3.141590118408203125));
    float _2395 = (((_2372 * cbLight._m0[_2324].x) * _2385) * _2127) + ((((cbLight._m0[_2243].x * _2096) * _2296) * _2310) * _2140);
    float _2396 = (((_2372 * cbLight._m0[_2324].y) * _2385) * _2127) + ((((cbLight._m0[_2243].y * _2097) * _2296) * _2310) * _2140);
    float _2397 = (((_2372 * cbLight._m0[_2324].z) * _2385) * _2127) + ((((cbLight._m0[_2243].z * _2098) * _2296) * _2310) * _2140);
    float _2459;
    float _2461;
    float _2463;
    if (_2180)
    {
        _2459 = _2395;
        _2461 = _2396;
        _2463 = _2397;
    }
    else
    {
        uint _2465 = _2104 + 2u;
        uint _2469 = _2104 + 10u;
        float _2483 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2465].w)) * _862) * 0.949999988079071044921875);
        float _2484 = _2483 * _2483;
        float _2485 = cbLight._m0[_2465].x + _938;
        float _2486 = cbLight._m0[_2465].y + _939;
        float _2487 = cbLight._m0[_2465].z + _940;
        float _2491 = inversesqrt(dot(vec3(_2485, _2486, _2487), vec3(_2485, _2486, _2487)));
        float _2492 = _2491 * _2485;
        float _2493 = _2491 * _2486;
        float _2494 = _2491 * _2487;
        float _2495 = dot(vec3(_859, _860, _861), vec3(cbLight._m0[_2465].xyz));
        float _4564 = isnan(0.0) ? _2495 : (isnan(_2495) ? 0.0 : max(_2495, 0.0));
        float _2498 = isnan(1.0) ? _4564 : (isnan(_4564) ? 1.0 : min(_4564, 1.0));
        float _2499 = dot(vec3(_859, _860, _861), vec3(_2492, _2493, _2494));
        float _4575 = isnan(0.0) ? _2499 : (isnan(_2499) ? 0.0 : max(_2499, 0.0));
        float _2502 = isnan(1.0) ? _4575 : (isnan(_4575) ? 1.0 : min(_4575, 1.0));
        float _2503 = dot(vec3(cbLight._m0[_2465].xyz), vec3(_2492, _2493, _2494));
        float _4586 = isnan(0.0) ? _2503 : (isnan(_2503) ? 0.0 : max(_2503, 0.0));
        float _2507 = _2484 * _2484;
        float _2511 = ((_2502 * _2502) * (_2507 + (-1.0))) + 1.0;
        float _2520 = (exp2(log2(1.0 - (isnan(1.0) ? _4586 : (isnan(_4586) ? 1.0 : min(_4586, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2521 = 1.0 - _2484;
        float _2531 = (0.5 / (((_2272 * ((_2498 * _2521) + _2484)) + 9.9999999392252902907785028219223e-09) + (((_2272 * _2521) + _2484) * _2498))) * _2498;
        float _4597 = isnan(0.0) ? _2531 : (isnan(_2531) ? 0.0 : max(_2531, 0.0));
        float _2533 = (isnan(1.0) ? _4597 : (isnan(_4597) ? 1.0 : min(_4597, 1.0))) * (_2507 / ((_2511 * _2511) * 3.141590118408203125));
        float _2534 = isnan(1.0) ? _2119 : (isnan(_2119) ? 1.0 : min(_2119, 1.0));
        _2459 = (((_2520 * cbLight._m0[_2469].x) * _2533) * _2534) + _2395;
        _2461 = (((_2520 * cbLight._m0[_2469].y) * _2533) * _2534) + _2396;
        _2463 = (((_2520 * cbLight._m0[_2469].z) * _2533) * _2534) + _2397;
    }
    float _2569;
    float _2571;
    float _2573;
    if (_2198)
    {
        _2569 = _2459;
        _2571 = _2461;
        _2573 = _2463;
    }
    else
    {
        uint _2580 = _2104 + 3u;
        uint _2584 = _2104 + 11u;
        float _2598 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2580].w)) * _862) * 0.949999988079071044921875);
        float _2599 = _2598 * _2598;
        float _2600 = cbLight._m0[_2580].x + _938;
        float _2601 = cbLight._m0[_2580].y + _939;
        float _2602 = cbLight._m0[_2580].z + _940;
        float _2606 = inversesqrt(dot(vec3(_2600, _2601, _2602), vec3(_2600, _2601, _2602)));
        float _2607 = _2606 * _2600;
        float _2608 = _2606 * _2601;
        float _2609 = _2606 * _2602;
        float _2610 = dot(vec3(_859, _860, _861), vec3(cbLight._m0[_2580].xyz));
        float _4613 = isnan(0.0) ? _2610 : (isnan(_2610) ? 0.0 : max(_2610, 0.0));
        float _2613 = isnan(1.0) ? _4613 : (isnan(_4613) ? 1.0 : min(_4613, 1.0));
        float _2614 = dot(vec3(_859, _860, _861), vec3(_2607, _2608, _2609));
        float _4624 = isnan(0.0) ? _2614 : (isnan(_2614) ? 0.0 : max(_2614, 0.0));
        float _2617 = isnan(1.0) ? _4624 : (isnan(_4624) ? 1.0 : min(_4624, 1.0));
        float _2618 = dot(vec3(cbLight._m0[_2580].xyz), vec3(_2607, _2608, _2609));
        float _4635 = isnan(0.0) ? _2618 : (isnan(_2618) ? 0.0 : max(_2618, 0.0));
        float _2622 = _2599 * _2599;
        float _2626 = ((_2617 * _2617) * (_2622 + (-1.0))) + 1.0;
        float _2635 = (exp2(log2(1.0 - (isnan(1.0) ? _4635 : (isnan(_4635) ? 1.0 : min(_4635, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2636 = 1.0 - _2599;
        float _2646 = (0.5 / (((_2272 * ((_2613 * _2636) + _2599)) + 9.9999999392252902907785028219223e-09) + (((_2272 * _2636) + _2599) * _2613))) * _2613;
        float _4646 = isnan(0.0) ? _2646 : (isnan(_2646) ? 0.0 : max(_2646, 0.0));
        float _2648 = (isnan(1.0) ? _4646 : (isnan(_4646) ? 1.0 : min(_4646, 1.0))) * (_2622 / ((_2626 * _2626) * 3.141590118408203125));
        float _2649 = isnan(1.0) ? _2120 : (isnan(_2120) ? 1.0 : min(_2120, 1.0));
        _2569 = (((_2635 * cbLight._m0[_2584].x) * _2648) * _2649) + _2459;
        _2571 = (((_2635 * cbLight._m0[_2584].y) * _2648) * _2649) + _2461;
        _2573 = (((_2635 * cbLight._m0[_2584].z) * _2648) * _2649) + _2463;
    }
    float _2784;
    float _2786;
    float _2788;
    float _2790;
    float _2792;
    float _2794;
    if (_2102.y == 0u)
    {
        float _2724 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2725 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2724;
        float _2726 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2724;
        float _2727 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2724;
        uvec4 _2739 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2740 = _2739.x;
        uint _2751 = uint((float(_2739.y) * floor(float(uint(cbSceneParam._m0[85u].y * _959) / _2740))) + floor(float(uint(cbSceneParam._m0[85u].x * _958) / _2740)));
        float _2761 = (log2(_2727 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2762 = isnan(0.0) ? _2761 : (isnan(_2761) ? 0.0 : max(_2761, 0.0));
        uint _2765 = uint(isnan(14.0) ? _2762 : (isnan(_2762) ? 14.0 : min(_2762, 14.0)));
        uvec4 _2770 = texelFetch(g_lightClusterGridBuffer, int(((_2765 << 2u) + (_2751 << 6u)) >> 2u));
        uint _2771 = _2770.x;
        uint _2772 = _2739.z;
        float _2872;
        float _2874;
        float _2876;
        float _2878;
        float _2880;
        float _2882;
        if (((((1u << ((_2772 >> 4u) & 15u)) + 4294967295u) & _2771) == 0u) || ((_2772 & 240u) == 0u))
        {
            _2872 = 0.0;
            _2874 = 0.0;
            _2876 = 0.0;
            _2878 = 0.0;
            _2880 = 0.0;
            _2882 = 0.0;
        }
        else
        {
            float _2873;
            float _2875;
            float _2877;
            float _2879;
            float _2881;
            float _2883;
            float _3024 = 0.0;
            float _3025 = 0.0;
            float _3026 = 0.0;
            float _3027 = 0.0;
            float _3028 = 0.0;
            float _3029 = 0.0;
            uint _3030 = 0u;
            uint _3039;
            bool _3040;
            for (;;)
            {
                _3039 = texelFetch(g_lightClassification, int((((_2765 << 5u) + (_2751 << 9u)) + (_3030 << 2u)) >> 2u)).x;
                _3040 = _3039 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3040)
                {
                    frontier_phi_66_pred = _3024;
                    frontier_phi_66_pred_1 = _3029;
                    frontier_phi_66_pred_2 = _3028;
                    frontier_phi_66_pred_3 = _3027;
                    frontier_phi_66_pred_4 = _3026;
                    frontier_phi_66_pred_5 = _3025;
                }
                else
                {
                    float _3169;
                    float _3170;
                    float _3171;
                    float _3172;
                    float _3173;
                    float _3174;
                    uint _3175;
                    _3169 = _3024;
                    _3170 = _3025;
                    _3171 = _3026;
                    _3172 = _3027;
                    _3173 = _3028;
                    _3174 = _3029;
                    _3175 = _3039;
                    float _3096;
                    float _3097;
                    float _3098;
                    float _3099;
                    float _3100;
                    float _3101;
                    for (;;)
                    {
                        uint _3179 = uint(findLSB(_3175)) + (_3030 << 5u);
                        uint _3176 = (_3175 + 4294967295u) & _3175;
                        uint _3181 = _3179 * 48u;
                        vec4 _3195 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3181)).x, texelFetch(g_PointLightRenderingBuffer, int(_3181 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3181 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3181 + 3u)).x));
                        uint _3201 = (_3179 * 48u) + 4u;
                        vec4 _3214 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3201)).x, texelFetch(g_PointLightRenderingBuffer, int(_3201 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3201 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3201 + 3u)).x));
                        uint _3220 = (_3179 * 48u) + 8u;
                        vec3 _3231 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3220)).x, texelFetch(g_PointLightRenderingBuffer, int(_3220 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3220 + 2u)).x));
                        float _3235 = _3195.x - _2725;
                        float _3236 = _3195.y - _2726;
                        float _3237 = _3195.z - _2727;
                        float _3238 = dot(vec3(_3235, _3236, _3237), vec3(_3235, _3236, _3237));
                        float _3241 = inversesqrt(_3238);
                        float _3242 = _3241 * _3235;
                        float _3243 = _3241 * _3236;
                        float _3244 = _3241 * _3237;
                        float _3245 = dot(vec3(_977, _980, _983), vec3(_3242, _3243, _3244));
                        float _3250 = 1.0 - (_3238 * _3195.w);
                        float _4672 = isnan(0.0) ? _3250 : (isnan(_3250) ? 0.0 : max(_3250, 0.0));
                        float _3251 = isnan(1.0) ? _4672 : (isnan(_4672) ? 1.0 : min(_4672, 1.0));
                        float _3252 = sqrt(_3238) * _3214.w;
                        float _3255 = 1.39999997615814208984375 / (_3252 + 1.39999997615814208984375);
                        float _3256 = _3255 * _3255;
                        float _3259 = ((1.0 - _3256) * _3245) + _3256;
                        float _3262 = _3252 * _3252;
                        float _3266 = ((isnan(0.0) ? _3259 : (isnan(_3259) ? 0.0 : max(_3259, 0.0))) * _3251) / ((_3262 * 0.699999988079071044921875) + 1.0);
                        float _3270 = (-0.0) - _2725;
                        float _3271 = (-0.0) - _2726;
                        float _3272 = (-0.0) - _2727;
                        float _3276 = inversesqrt(dot(vec3(_3270, _3271, _3272), vec3(_3270, _3271, _3272)));
                        float _3277 = _3276 * _3270;
                        float _3278 = _3276 * _3271;
                        float _3279 = _3276 * _3272;
                        float _3287 = exp2(log2(1.0 / ((_3262 * 3.5) + 5.0)) * 0.25);
                        float _3288 = 1.0 - _1037;
                        float _3295 = sqrt(1.0 - ((1.0 - (_3288 * _3288)) * (1.0 - (_3287 * _3287))));
                        float _3296 = _3295 * _3295;
                        float _3297 = _3296 * _3296;
                        float _3298 = _3277 + _3242;
                        float _3299 = _3278 + _3243;
                        float _3300 = _3279 + _3244;
                        float _3304 = inversesqrt(dot(vec3(_3298, _3299, _3300), vec3(_3298, _3299, _3300)));
                        float _3308 = dot(vec3(_977, _980, _983), vec3(_3277, _3278, _3279));
                        float _4688 = isnan(0.0) ? _3308 : (isnan(_3308) ? 0.0 : max(_3308, 0.0));
                        float _3311 = isnan(1.0) ? _4688 : (isnan(_4688) ? 1.0 : min(_4688, 1.0));
                        float _3312 = dot(vec3(_977, _980, _983), vec3(_3304 * _3298, _3304 * _3299, _3304 * _3300));
                        float _4699 = isnan(0.0) ? _3312 : (isnan(_3312) ? 0.0 : max(_3312, 0.0));
                        float _3315 = isnan(1.0) ? _4699 : (isnan(_4699) ? 1.0 : min(_4699, 1.0));
                        float _3319 = ((_3315 * _3315) * (_3297 + (-1.0))) + 1.0;
                        float _3320 = _3255 * _3296;
                        float _3321 = _3320 * _3320;
                        float _3324 = ((1.0 - _3321) * _3245) + _3321;
                        float _4710 = isnan(0.0) ? _3324 : (isnan(_3324) ? 0.0 : max(_3324, 0.0));
                        float _3325 = isnan(1.0) ? _4710 : (isnan(_4710) ? 1.0 : min(_4710, 1.0));
                        float _3326 = 1.0 - _3296;
                        float _3336 = (0.5 / (((_3325 * ((_3311 * _3326) + _3296)) + 9.9999999392252902907785028219223e-09) + (((_3325 * _3326) + _3296) * _3311))) * _3325;
                        float _4721 = isnan(0.0) ? _3336 : (isnan(_3336) ? 0.0 : max(_3336, 0.0));
                        float _3347 = (((_3297 * 3.1415927410125732421875) * (isnan(1.0) ? _4721 : (isnan(_4721) ? 1.0 : min(_4721, 1.0)))) / ((_3319 * _3319) * ((_3262 * 2.1991131305694580078125) + 3.141590118408203125))) * _3251;
                        _3099 = (_3266 * _3214.x) + _3172;
                        _3100 = (_3266 * _3214.y) + _3173;
                        _3101 = (_3266 * _3214.z) + _3174;
                        _3096 = (_3347 * _3231.x) + _3169;
                        _3097 = (_3347 * _3231.y) + _3170;
                        _3098 = (_3347 * _3231.z) + _3171;
                        if (_3176 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3169 = _3096;
                            _3170 = _3097;
                            _3171 = _3098;
                            _3172 = _3099;
                            _3173 = _3100;
                            _3174 = _3101;
                            _3175 = _3176;
                        }
                    }
                    frontier_phi_66_pred = _3096;
                    frontier_phi_66_pred_1 = _3101;
                    frontier_phi_66_pred_2 = _3100;
                    frontier_phi_66_pred_3 = _3099;
                    frontier_phi_66_pred_4 = _3098;
                    frontier_phi_66_pred_5 = _3097;
                }
                _2873 = frontier_phi_66_pred;
                _2883 = frontier_phi_66_pred_1;
                _2881 = frontier_phi_66_pred_2;
                _2879 = frontier_phi_66_pred_3;
                _2877 = frontier_phi_66_pred_4;
                _2875 = frontier_phi_66_pred_5;
                uint _3031 = _3030 + 1u;
                if (_3031 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3024 = _2873;
                    _3025 = _2875;
                    _3026 = _2877;
                    _3027 = _2879;
                    _3028 = _2881;
                    _3029 = _2883;
                    _3030 = _3031;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2872 = _2873;
            _2874 = _2875;
            _2876 = _2877;
            _2878 = _2879;
            _2880 = _2881;
            _2882 = _2883;
        }
        uvec4 _2886 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2887 = _2886.z;
        uint _2889 = (_2887 >> 8u) & 15u;
        float _2992;
        float _2994;
        float _2996;
        float _2998;
        float _3000;
        float _3002;
        if (((4294967295u << _2889) & _2771) == 0u)
        {
            _2992 = _2872;
            _2994 = _2874;
            _2996 = _2876;
            _2998 = _2878;
            _3000 = _2880;
            _3002 = _2882;
        }
        else
        {
            float _3017 = inversesqrt(dot(vec3(_2725, _2726, _2727), vec3(_2725, _2726, _2727)));
            float _3018 = _3017 * _2725;
            float _3019 = _3017 * _2726;
            float _3020 = _3017 * _2727;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2889 < ((_2887 >> 12u) & 15u))
            {
                float _2993;
                float _2995;
                float _2997;
                float _2999;
                float _3001;
                float _3003;
                float _3152 = _2872;
                float _3153 = _2874;
                float _3154 = _2876;
                float _3155 = _2878;
                float _3156 = _2880;
                float _3157 = _2882;
                uint _3158 = _2889;
                uint _3167;
                bool _3168;
                for (;;)
                {
                    _3167 = texelFetch(g_lightClassification, int((((_2765 << 5u) + (_2751 << 9u)) + (_3158 << 2u)) >> 2u)).x;
                    _3168 = _3167 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_3168)
                    {
                        frontier_phi_77_pred = _3157;
                        frontier_phi_77_pred_1 = _3156;
                        frontier_phi_77_pred_2 = _3155;
                        frontier_phi_77_pred_3 = _3154;
                        frontier_phi_77_pred_4 = _3153;
                        frontier_phi_77_pred_5 = _3152;
                    }
                    else
                    {
                        float _3361;
                        float _3362;
                        float _3363;
                        float _3364;
                        float _3365;
                        float _3366;
                        float _3654;
                        float _3655;
                        float _3656;
                        float _3657;
                        float _3658;
                        float _3659;
                        float _3374 = _3152;
                        float _3375 = _3153;
                        float _3376 = _3154;
                        float _3377 = _3155;
                        float _3378 = _3156;
                        float _3379 = _3157;
                        uint _3380 = _3167;
                        uint _3381;
                        vec4 _3406;
                        float _3407;
                        vec4 _3422;
                        vec3 _3434;
                        vec4 _3449;
                        vec4 _3464;
                        float _3510;
                        bool _3511;
                        for (;;)
                        {
                            uint _3391 = ((_3158 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3380));
                            _3381 = (_3380 + 4294967295u) & _3380;
                            uint _3393 = _3391 * 40u;
                            _3406 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3393)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3393 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3393 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3393 + 3u)).x));
                            _3407 = _3406.w;
                            uint _3409 = (_3391 * 40u) + 4u;
                            _3422 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3409)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3409 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3409 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3409 + 3u)).x));
                            uint _3424 = (_3391 * 40u) + 8u;
                            _3434 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3424)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3424 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3424 + 2u)).x));
                            uint _3436 = (_3391 * 40u) + 16u;
                            _3449 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3436)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3436 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3436 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3436 + 3u)).x));
                            uint _3451 = (_3391 * 40u) + 20u;
                            _3464 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3451)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3451 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3451 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3451 + 3u)).x));
                            uint _3466 = (_3391 * 40u) + 24u;
                            vec4 _3479 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3466)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3466 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3466 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3466 + 3u)).x));
                            uint _3485 = (_3391 * 40u) + 28u;
                            vec4 _3498 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3485)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3485 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3485 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3485 + 3u)).x));
                            _3510 = fma(_2727, _3498.z, fma(_2726, _3498.y, _3498.x * _2725)) + _3498.w;
                            _3511 = !((fma(_2727, _3479.z, fma(_2726, _3479.y, _3479.x * _2725)) + _3479.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3511)
                            {
                                float _3538 = _3406.x - _2725;
                                float _3539 = _3406.y - _2726;
                                float _3540 = _3406.z - _2727;
                                float _3541 = dot(vec3(_3538, _3539, _3540), vec3(_3538, _3539, _3540));
                                float _3544 = inversesqrt(_3541);
                                float _3545 = _3544 * _3538;
                                float _3546 = _3544 * _3539;
                                float _3547 = _3544 * _3540;
                                float _3551 = 1.0 - (_3541 / (_3407 * _3407));
                                float _4732 = isnan(0.0) ? _3551 : (isnan(_3551) ? 0.0 : max(_3551, 0.0));
                                float _3552 = isnan(1.0) ? _4732 : (isnan(_4732) ? 1.0 : min(_4732, 1.0));
                                float _3556 = sqrt(_3541) * _3422.w;
                                float _3558 = 1.39999997615814208984375 / (_3556 + 1.39999997615814208984375);
                                float _3559 = _3558 * _3558;
                                float _3562 = ((1.0 - _3559) * dot(vec3(_3545, _3546, _3547), vec3(_977, _980, _983))) + _3559;
                                float _3565 = _3556 * _3556;
                                float _3569 = (fma(_2727, _3449.z, fma(_2726, _3449.y, _3449.x * _2725)) + _3449.w) / _3510;
                                float _3570 = (fma(_2727, _3464.z, fma(_2726, _3464.y, _3464.x * _2725)) + _3464.w) / _3510;
                                float _3574 = 1.0 - dot(vec2(_3569, _3570), vec2(_3569, _3570));
                                float _4748 = isnan(0.0) ? _3574 : (isnan(_3574) ? 0.0 : max(_3574, 0.0));
                                float _3575 = isnan(1.0) ? _4748 : (isnan(_4748) ? 1.0 : min(_4748, 1.0));
                                float _3576 = _3575 * (((isnan(0.0) ? _3562 : (isnan(_3562) ? 0.0 : max(_3562, 0.0))) * _3552) / ((_3565 * 0.699999988079071044921875) + 1.0));
                                float _3588 = exp2(log2(1.0 / ((_3565 * 3.5) + 5.0)) * 0.25);
                                float _3589 = 1.0 - _1037;
                                float _3596 = sqrt(1.0 - ((1.0 - (_3589 * _3589)) * (1.0 - (_3588 * _3588))));
                                float _3597 = _3596 * _3596;
                                float _3598 = _3597 * _3597;
                                float _3599 = _3545 - _3018;
                                float _3600 = _3546 - _3019;
                                float _3601 = _3547 - _3020;
                                float _3605 = inversesqrt(dot(vec3(_3599, _3600, _3601), vec3(_3599, _3600, _3601)));
                                float _3609 = dot(vec3(_977, _980, _983), vec3((-0.0) - _3018, (-0.0) - _3019, (-0.0) - _3020));
                                float _4759 = isnan(0.0) ? _3609 : (isnan(_3609) ? 0.0 : max(_3609, 0.0));
                                float _3612 = isnan(1.0) ? _4759 : (isnan(_4759) ? 1.0 : min(_4759, 1.0));
                                float _3613 = dot(vec3(_977, _980, _983), vec3(_3605 * _3599, _3605 * _3600, _3605 * _3601));
                                float _4770 = isnan(0.0) ? _3613 : (isnan(_3613) ? 0.0 : max(_3613, 0.0));
                                float _3616 = isnan(1.0) ? _4770 : (isnan(_4770) ? 1.0 : min(_4770, 1.0));
                                float _3620 = ((_3616 * _3616) * (_3598 + (-1.0))) + 1.0;
                                float _3621 = _3558 * _3597;
                                float _3622 = _3621 * _3621;
                                float _3628 = ((1.0 - _3622) * dot(vec3(_977, _980, _983), vec3(_3545, _3546, _3547))) + _3622;
                                float _4781 = isnan(0.0) ? _3628 : (isnan(_3628) ? 0.0 : max(_3628, 0.0));
                                float _3629 = isnan(1.0) ? _4781 : (isnan(_4781) ? 1.0 : min(_4781, 1.0));
                                float _3630 = 1.0 - _3597;
                                float _3640 = (0.5 / (((_3629 * ((_3612 * _3630) + _3597)) + 9.9999999392252902907785028219223e-09) + (((_3629 * _3630) + _3597) * _3612))) * _3629;
                                float _4792 = isnan(0.0) ? _3640 : (isnan(_3640) ? 0.0 : max(_3640, 0.0));
                                float _3650 = (_3575 * _3552) * (((_3598 * 3.1415927410125732421875) * (isnan(1.0) ? _4792 : (isnan(_4792) ? 1.0 : min(_4792, 1.0)))) / ((_3620 * _3620) * ((_3565 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3576 * _3422.y;
                                frontier_phi_83_pred_1 = _3576 * _3422.x;
                                frontier_phi_83_pred_2 = _3650 * _3434.z;
                                frontier_phi_83_pred_3 = _3650 * _3434.y;
                                frontier_phi_83_pred_4 = _3650 * _3434.x;
                                frontier_phi_83_pred_5 = _3576 * _3422.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3658 = frontier_phi_83_pred;
                            _3657 = frontier_phi_83_pred_1;
                            _3656 = frontier_phi_83_pred_2;
                            _3655 = frontier_phi_83_pred_3;
                            _3654 = frontier_phi_83_pred_4;
                            _3659 = frontier_phi_83_pred_5;
                            _3364 = _3657 + _3377;
                            _3365 = _3658 + _3378;
                            _3366 = _3659 + _3379;
                            _3361 = _3654 + _3374;
                            _3362 = _3655 + _3375;
                            _3363 = _3656 + _3376;
                            if (_3381 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3374 = _3361;
                                _3375 = _3362;
                                _3376 = _3363;
                                _3377 = _3364;
                                _3378 = _3365;
                                _3379 = _3366;
                                _3380 = _3381;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3366;
                        frontier_phi_77_pred_1 = _3365;
                        frontier_phi_77_pred_2 = _3364;
                        frontier_phi_77_pred_3 = _3363;
                        frontier_phi_77_pred_4 = _3362;
                        frontier_phi_77_pred_5 = _3361;
                    }
                    _3003 = frontier_phi_77_pred;
                    _3001 = frontier_phi_77_pred_1;
                    _2999 = frontier_phi_77_pred_2;
                    _2997 = frontier_phi_77_pred_3;
                    _2995 = frontier_phi_77_pred_4;
                    _2993 = frontier_phi_77_pred_5;
                    uint _3159 = _3158 + 1u;
                    if (_3159 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3152 = _2993;
                        _3153 = _2995;
                        _3154 = _2997;
                        _3155 = _2999;
                        _3156 = _3001;
                        _3157 = _3003;
                        _3158 = _3159;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2997;
                frontier_phi_58_59_ladder_1 = _3003;
                frontier_phi_58_59_ladder_2 = _3001;
                frontier_phi_58_59_ladder_3 = _2999;
                frontier_phi_58_59_ladder_4 = _2995;
                frontier_phi_58_59_ladder_5 = _2993;
            }
            else
            {
                frontier_phi_58_59_ladder = _2876;
                frontier_phi_58_59_ladder_1 = _2882;
                frontier_phi_58_59_ladder_2 = _2880;
                frontier_phi_58_59_ladder_3 = _2878;
                frontier_phi_58_59_ladder_4 = _2874;
                frontier_phi_58_59_ladder_5 = _2872;
            }
            _2992 = frontier_phi_58_59_ladder_5;
            _2994 = frontier_phi_58_59_ladder_4;
            _2996 = frontier_phi_58_59_ladder;
            _2998 = frontier_phi_58_59_ladder_3;
            _3000 = frontier_phi_58_59_ladder_2;
            _3002 = frontier_phi_58_59_ladder_1;
        }
        float _3007 = isnan(1.0) ? _1021 : (isnan(_1021) ? 1.0 : min(_1021, 1.0));
        _2784 = (_3007 * _2998) + _2236;
        _2786 = (_3007 * _3000) + _2238;
        _2788 = (_3007 * _3002) + _2240;
        _2790 = ((_2992 * 0.039999999105930328369140625) * _3007) + _2569;
        _2792 = ((_2994 * 0.039999999105930328369140625) * _3007) + _2571;
        _2794 = ((_2996 * 0.039999999105930328369140625) * _3007) + _2573;
    }
    else
    {
        _2784 = _2236;
        _2786 = _2238;
        _2788 = _2240;
        _2790 = _2569;
        _2792 = _2571;
        _2794 = _2573;
    }
    float _4808 = isnan(0.0) ? _1006 : (isnan(_1006) ? 0.0 : max(_1006, 0.0));
    float _4819 = isnan(0.0) ? _1007 : (isnan(_1007) ? 0.0 : max(_1007, 0.0));
    float _4830 = isnan(0.0) ? _1008 : (isnan(_1008) ? 0.0 : max(_1008, 0.0));
    float _2811 = ((isnan(1.0) ? _4808 : (isnan(_4808) ? 1.0 : min(_4808, 1.0))) * (_2784 + ((isnan(0.0) ? _1778 : (isnan(_1778) ? 0.0 : max(_1778, 0.0))) * _1021))) + ((_2790 + ((isnan(0.0) ? _2068 : (isnan(_2068) ? 0.0 : max(_2068, 0.0))) * _1857)) * cbPerFrame._m0[3u].x);
    float _2812 = ((isnan(1.0) ? _4819 : (isnan(_4819) ? 1.0 : min(_4819, 1.0))) * (_2786 + ((isnan(0.0) ? _1781 : (isnan(_1781) ? 0.0 : max(_1781, 0.0))) * _1021))) + ((_2792 + ((isnan(0.0) ? _2071 : (isnan(_2071) ? 0.0 : max(_2071, 0.0))) * _1857)) * cbPerFrame._m0[3u].x);
    float _2813 = ((isnan(1.0) ? _4830 : (isnan(_4830) ? 1.0 : min(_4830, 1.0))) * (_2788 + ((isnan(0.0) ? _1784 : (isnan(_1784) ? 0.0 : max(_1784, 0.0))) * _1021))) + ((_2794 + ((isnan(0.0) ? _2074 : (isnan(_2074) ? 0.0 : max(_2074, 0.0))) * _1857)) * cbPerFrame._m0[3u].x);
    uint _2814 = _281 + 6u;
    float _2822 = _958 / cbSceneParam._m0[86u].x;
    float _2823 = _959 / cbSceneParam._m0[86u].y;
    vec4 _2837 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2822, _2823, (log2((isnan(cbSceneParam._m0[77u].w) ? _880 : (isnan(_880) ? cbSceneParam._m0[77u].w : min(_880, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2839 = _2837.x;
    float _2840 = _2837.y;
    float _2841 = _2837.z;
    float _2842 = _2837.w;
    float _2934;
    float _2936;
    float _2938;
    float _2940;
    if (_880 > cbSceneParam._m0[78u].w)
    {
        float _2897 = isnan(_880) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _880 : min(cbSceneParam._m0[80u].w, _880));
        float _2898 = _2897 / _880;
        float _2909 = _2898 * _931;
        float _2910 = _932 * _2898;
        float _2911 = (-0.0) - _2910;
        float _2912 = _2898 * _933;
        float _2914 = (cbSceneParam._m0[77u].w * _2911) / _2897;
        float _2915 = _2914 + cbSceneParam._m0[79u].w;
        float _2916 = cbSceneParam._m0[79u].w - _2910;
        float _2922 = sqrt(((_2909 * _2909) + (_2910 * _2910)) + (_2912 * _2912));
        float _2925 = (1.0 - (cbSceneParam._m0[77u].w / _2897)) * _2922;
        float _2930 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2932 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3109;
        if (abs((_2911 - _2914) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3109 = ((((_2915 > 0.0) ? exp2(_2930 * _2915) : (2.0 - exp2(_2932 * _2915))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2925;
        }
        else
        {
            float _3053 = 1.0 / cbSceneParam._m0[80u].x;
            float _3054 = isnan(_2916) ? _2915 : (isnan(_2915) ? _2916 : max(_2915, _2916));
            float _3055 = isnan(_2916) ? _2915 : (isnan(_2915) ? _2916 : min(_2915, _2916));
            float _3064 = isnan(0.0) ? _3054 : (isnan(_3054) ? 0.0 : min(_3054, 0.0));
            float _3065 = isnan(0.0) ? _3055 : (isnan(_3055) ? 0.0 : min(_3055, 0.0));
            _3109 = ((abs(_2922 / _2911) * cbSceneParam._m0[80u].y) * ((((_3064 - _3065) * 2.0) - ((exp2(_2930 * (isnan(0.0) ? _3054 : (isnan(_3054) ? 0.0 : max(_3054, 0.0)))) - exp2(_2930 * (isnan(0.0) ? _3055 : (isnan(_3055) ? 0.0 : max(_3055, 0.0))))) * _3053)) - ((exp2(_2932 * _3064) - exp2(_2932 * _3065)) * _3053))) + (_2925 * cbSceneParam._m0[80u].z);
        }
        vec4 _3111 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2822, _2823, 1.0), 0.0);
        float _3120 = exp2((_3109 * (-1.44269502162933349609375)) * (1.0 - _3111.w));
        float _3121 = log2(_3120);
        float _3137 = log2(_2842);
        _2934 = (exp2(_3137 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3121 * cbSceneParam._m0[78u].x)) * _3111.x) / cbSceneParam._m0[78u].x)) + _2839;
        _2936 = (exp2(_3137 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3121 * cbSceneParam._m0[78u].y)) * _3111.y) / cbSceneParam._m0[78u].y)) + _2840;
        _2938 = (exp2(_3137 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3121 * cbSceneParam._m0[78u].z)) * _3111.z) / cbSceneParam._m0[78u].z)) + _2841;
        _2940 = _3120 * _2842;
    }
    else
    {
        _2934 = _2839;
        _2936 = _2840;
        _2938 = _2841;
        _2940 = _2842;
    }
    bool _3147;
    vec4 _2950;
    vec4 _2972;
    float _2974;
    float _2978;
    float _2979;
    float _2980;
    float _2981;
    bool _2991;
    for (;;)
    {
        _2950 = cbMatDynParam._m0[0u];
        float _2952 = roundEven(_2950.y);
        bool _2953 = _2952 == 3.0;
        float _2954 = log2(_2940);
        float _2961 = exp2(_2954 * cbSceneParam._m0[78u].x) * _2811;
        float _2962 = exp2(_2954 * cbSceneParam._m0[78u].y) * _2812;
        float _2963 = exp2(_2954 * cbSceneParam._m0[78u].z) * _2813;
        float _2970 = _947 + (-0.5);
        _2972 = cbMtdParam._m0[1u];
        _2974 = _2972.y * _2970;
        float _2977 = (_2952 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2978 = _2977 * (_2953 ? _2961 : (_2961 + (cbSceneParam._m0[72u].w * _2934)));
        _2979 = _2977 * (_2953 ? _2962 : (_2962 + (cbSceneParam._m0[72u].w * _2936)));
        _2980 = _2977 * (_2953 ? _2963 : (_2963 + (cbSceneParam._m0[72u].w * _2938)));
        _2981 = _2970 * 0.999000012874603271484375;
        _2991 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2991)
        {
            if ((cbInstanceData._m0[_281 + 7u].x + _2981) < 0.5)
            {
                _3147 = true;
                break;
            }
        }
        uint _3088 = _996 + uint(_2950.w);
        if ((cbInstanceData._m0[_3088].w < 1.0) && ((cbInstanceData._m0[_3088].w + _2981) < 0.5))
        {
            _3147 = true;
            break;
        }
        if ((_2974 + 1.0) < _2972.x)
        {
            _3147 = true;
            break;
        }
        _3147 = false;
        break;
    }
    float _3352;
    if (_3147)
    {
        discard_state = true;
        _3352 = 0.0;
    }
    else
    {
        _3352 = cbInstanceData._m0[_2814].w;
    }
    SV_Target.x = _2978;
    SV_Target.y = _2979;
    SV_Target.z = _2980;
    SV_Target.w = _3352;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2814].w;
    discard_exit();
}


