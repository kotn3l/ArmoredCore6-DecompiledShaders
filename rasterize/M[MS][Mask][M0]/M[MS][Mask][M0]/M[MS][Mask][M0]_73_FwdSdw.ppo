#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 13) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_22;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_10;
layout(set = 0, binding = 20) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_6;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1328;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _221 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _222 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _223 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _229 = inversesqrt(dot(vec3(_221, _222, _223), vec3(_221, _222, _223)));
    float _230 = _229 * _221;
    float _231 = _229 * _222;
    float _232 = _229 * _223;
    float _236 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _237 = _236 * NORMAL.x;
    float _238 = _236 * NORMAL.y;
    float _239 = _236 * NORMAL.z;
    float _243 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _244 = _243 * TANGENT.x;
    float _245 = _243 * TANGENT.y;
    float _246 = _243 * TANGENT.z;
    float _257 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _259 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _260 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3916 = isnan(0.0) ? _257 : (isnan(_257) ? 0.0 : max(_257, 0.0));
    float _3927 = isnan(0.0) ? _259 : (isnan(_259) ? 0.0 : max(_259, 0.0));
    float _3938 = isnan(0.0) ? _260 : (isnan(_260) ? 0.0 : max(_260, 0.0));
    uint _270 = uint(roundEven(NORMAL.w)) * 13u;
    uint _275 = _270 + 1u;
    uint _279 = _270 + 2u;
    float _288 = sqrt(((cbInstanceData._m0[_275].x * cbInstanceData._m0[_275].x) + (cbInstanceData._m0[_270].x * cbInstanceData._m0[_270].x)) + (cbInstanceData._m0[_279].x * cbInstanceData._m0[_279].x));
    float _289 = _288 * TEXCOORD.z;
    float _290 = _288 * TEXCOORD.w;
    vec4 _303 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _289) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _290) + cbTextureTilingScale._m0[13u].w));
    vec4 _327 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _332 = _327.x * cbMtdParam._m0[11u].x;
    float _333 = _327.y * cbMtdParam._m0[11u].y;
    float _334 = _327.z * cbMtdParam._m0[11u].z;
    vec4 _353 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _289) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _290) + cbTextureTilingScale._m0[5u].w));
    vec4 _372 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _407 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _409 = _407.x;
    float _421 = dot(vec4(_409, _407.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _438 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _372.x) * 2.0) - ((((_409 - _421) * cbMtdParam._m0[24u].z) + _421) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3949 = isnan(0.0) ? _438 : (isnan(_438) ? 0.0 : max(_438, 0.0));
    float _439 = isnan(1.0) ? _3949 : (isnan(_3949) ? 1.0 : min(_3949, 1.0));
    float _446 = (_439 * ((_353.x * cbMtdParam._m0[12u].x) - _332)) + _332;
    float _447 = (_439 * ((_353.y * cbMtdParam._m0[12u].y) - _333)) + _333;
    float _448 = (_439 * ((_353.z * cbMtdParam._m0[12u].z) - _334)) + _334;
    vec4 _465 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _289) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _290) + cbTextureTilingScale._m0[3u].w));
    vec4 _485 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _487 = _485.x;
    float _497 = dot(vec4(_487, _485.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _511 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _372.y) * 2.0) - ((((_487 - _497) * cbMtdParam._m0[24u].z) + _497) * cbMtdParam._m0[20u].w))) + 1.0;
    float _3960 = isnan(0.0) ? _511 : (isnan(_511) ? 0.0 : max(_511, 0.0));
    float _512 = isnan(1.0) ? _3960 : (isnan(_3960) ? 1.0 : min(_3960, 1.0));
    float _519 = (_512 * ((_465.x * cbMtdParam._m0[13u].x) - _446)) + _446;
    float _520 = (_512 * ((_465.y * cbMtdParam._m0[13u].y) - _447)) + _447;
    float _521 = (_512 * ((_465.z * cbMtdParam._m0[13u].z) - _448)) + _448;
    float _525 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _303.x) * _519;
    float _528 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _303.y) * _520;
    float _531 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _303.z) * _521;
    float _538 = ((_519 - _525) * (isnan(1.0) ? _3916 : (isnan(_3916) ? 1.0 : min(_3916, 1.0)))) + _525;
    float _539 = ((_520 - _528) * (isnan(1.0) ? _3927 : (isnan(_3927) ? 1.0 : min(_3927, 1.0)))) + _528;
    float _540 = ((_521 - _531) * (isnan(1.0) ? _3938 : (isnan(_3938) ? 1.0 : min(_3938, 1.0)))) + _531;
    vec4 _557 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _289) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _290) + cbTextureTilingScale._m0[20u].w));
    vec4 _582 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _289) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _290) + cbTextureTilingScale._m0[4u].w));
    vec4 _599 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _601 = _599.x;
    float _602 = _599.y;
    float _603 = _599.z;
    float _610 = ((_582.x - _601) * _439) + _601;
    float _611 = ((_582.y - _602) * _439) + _602;
    float _612 = ((_582.z - _603) * _439) + _603;
    vec4 _624 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _289) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _290) + cbTextureTilingScale._m0[2u].w));
    float _637 = ((_624.z - _612) * _512) + _612;
    float _640 = ((((_624.x - _610) * _512) + _610) * 2.0) + (-1.0);
    float _641 = ((((_624.y - _611) * _512) + _611) * 2.0) + (-1.0);
    float _642 = dot(vec2(_640, _641), vec2(_640, _641));
    float _3971 = isnan(0.0) ? _642 : (isnan(_642) ? 0.0 : max(_642, 0.0));
    float _647 = sqrt(1.0 - (isnan(1.0) ? _3971 : (isnan(_3971) ? 1.0 : min(_3971, 1.0))));
    vec4 _665 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _677 = (_640 + ((((_557.x * 2.0) + (-1.0)) * TEXCOORD_11.x) * cbMtdParam._m0[20u].x)) + (((_665.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _678 = (_641 + ((((_557.y * 2.0) + (-1.0)) * TEXCOORD_11.y) * cbMtdParam._m0[20u].x)) + (((_665.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _681 = fma(_647, _237, fma(_678, _244, _677 * _230));
    float _684 = fma(_647, _238, fma(_678, _245, _677 * _231));
    float _687 = fma(_647, _239, fma(_678, _246, _677 * _232));
    float _691 = inversesqrt(dot(vec3(_681, _684, _687), vec3(_681, _684, _687)));
    vec4 _718 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _289) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _290) + cbTextureTilingScale._m0[11u].w));
    float _720 = _718.x;
    float _721 = 1.0 - _720;
    float _727 = (cbMtdParam._m0[19u].x + dot(vec4(_691 * _681, _691 * _684, _691 * _687, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_720 - _721) * cbMtdParam._m0[24u].w) + _721) * cbMtdParam._m0[21u].z);
    float _3982 = isnan(0.0) ? _727 : (isnan(_727) ? 0.0 : max(_727, 0.0));
    float _728 = isnan(1.0) ? _3982 : (isnan(_3982) ? 1.0 : min(_3982, 1.0));
    float _735 = (_728 * (cbMtdParam._m0[17u].x - _538)) + _538;
    float _736 = (_728 * (cbMtdParam._m0[17u].y - _539)) + _539;
    float _737 = (_728 * (cbMtdParam._m0[17u].z - _540)) + _540;
    float _742 = (((_557.z - _637) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _637;
    float _746 = ((_665.z - _742) * cbMtdParam._m0[19u].w) + _742;
    vec4 _759 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _289) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _290) + cbTextureTilingScale._m0[15u].w));
    float _766 = (_759.x * 2.0) + (-1.0);
    float _767 = (_759.y * 2.0) + (-1.0);
    float _768 = dot(vec2(_766, _767), vec2(_766, _767));
    float _3993 = isnan(0.0) ? _768 : (isnan(_768) ? 0.0 : max(_768, 0.0));
    float _776 = ((_759.z - _746) * _728) + _746;
    float _786 = ((sqrt(1.0 - (isnan(1.0) ? _3993 : (isnan(_3993) ? 1.0 : min(_3993, 1.0)))) - _647) * _728) + _647;
    float _789 = (((_766 - _677) * _728) + _677) + (cbMtdParam._m0[21u].x * _677);
    float _790 = (((_767 - _678) * _728) + _678) + (cbMtdParam._m0[21u].x * _678);
    float _792 = cbMtdParam._m0[22u].x + _665.w;
    float _795 = fma(_786, _237, fma(_790, _244, _789 * _230));
    float _798 = fma(_786, _238, fma(_790, _245, _789 * _231));
    float _801 = fma(_786, _239, fma(_790, _246, _789 * _232));
    float _805 = inversesqrt(dot(vec3(_795, _798, _801), vec3(_795, _798, _801)));
    float _806 = _805 * _795;
    float _807 = _805 * _798;
    float _808 = _805 * _801;
    float _4004 = isnan(0.0) ? _776 : (isnan(_776) ? 0.0 : max(_776, 0.0));
    float _809 = isnan(1.0) ? _4004 : (isnan(_4004) ? 1.0 : min(_4004, 1.0));
    float _4015 = isnan(0.0) ? _792 : (isnan(_792) ? 0.0 : max(_792, 0.0));
    float _4026 = isnan(0.0) ? _735 : (isnan(_735) ? 0.0 : max(_735, 0.0));
    float _4037 = isnan(0.0) ? _736 : (isnan(_736) ? 0.0 : max(_736, 0.0));
    float _4048 = isnan(0.0) ? _737 : (isnan(_737) ? 0.0 : max(_737, 0.0));
    float _827 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _869 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _879 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _869);
    float _880 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _869);
    float _881 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _869);
    float _885 = inversesqrt(dot(vec3(_879, _880, _881), vec3(_879, _880, _881)));
    float _886 = _879 * _885;
    float _887 = _880 * _885;
    float _888 = _881 * _885;
    float _894 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _895 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _913 = fma(_808, cbSceneParam._m0[5u].z, fma(_807, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _806));
    float _916 = fma(_808, cbSceneParam._m0[6u].z, fma(_807, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _806));
    float _919 = fma(_808, cbSceneParam._m0[7u].z, fma(_807, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _806));
    uint _933 = (_270 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _939 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4026 : (isnan(_4026) ? 1.0 : min(_4026, 1.0)))) * cbInstanceData._m0[_933].x;
    float _940 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4037 : (isnan(_4037) ? 1.0 : min(_4037, 1.0)))) * cbInstanceData._m0[_933].y;
    float _941 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4048 : (isnan(_4048) ? 1.0 : min(_4048, 1.0)))) * cbInstanceData._m0[_933].z;
    float _4059 = isnan(0.0) ? _939 : (isnan(_939) ? 0.0 : max(_939, 0.0));
    float _942 = isnan(1.0) ? _4059 : (isnan(_4059) ? 1.0 : min(_4059, 1.0));
    float _4070 = isnan(0.0) ? _940 : (isnan(_940) ? 0.0 : max(_940, 0.0));
    float _943 = isnan(1.0) ? _4070 : (isnan(_4070) ? 1.0 : min(_4070, 1.0));
    float _4081 = isnan(0.0) ? _941 : (isnan(_941) ? 0.0 : max(_941, 0.0));
    float _944 = isnan(1.0) ? _4081 : (isnan(_4081) ? 1.0 : min(_4081, 1.0));
    vec4 _953 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _894, cbSceneParam._m0[86u].y * _895));
    float _957 = ((isnan(1.0) ? _4015 : (isnan(_4015) ? 1.0 : min(_4015, 1.0))) * TEXCOORD_5.w) * _953.x;
    float _958 = dot(vec3(_806, _807, _808), vec3(_886, _887, _888));
    float _961 = _958 * 2.0;
    float _965 = (_961 * _806) - _886;
    float _966 = (_961 * _807) - _887;
    float _967 = (_961 * _808) - _888;
    float _971 = abs(dot(vec3(_886, _887, _888), vec3(_806, _807, _808)));
    float _4092 = isnan(0.0) ? _971 : (isnan(_971) ? 0.0 : max(_971, 0.0));
    float _973 = sqrt(_809);
    float _986 = exp2((_973 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4092 : (isnan(_4092) ? 1.0 : min(_4092, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_973 * 3.0));
    float _1018 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1022 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1026 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1327;
    float _1329;
    float _1330;
    float _1331;
    float _1332;
    float _1333;
    float _1334;
    float _1335;
    float _1336;
    float _1337;
    float _1338;
    float _1339;
    float _1340;
    float _1341;
    float _1342;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1052 = fma(_1026, cbModelParam._m0[26u].z, fma(_1022, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1018));
        float _1056 = fma(_1026, cbModelParam._m0[27u].z, fma(_1022, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1018));
        float _1060 = fma(_1026, cbModelParam._m0[28u].z, fma(_1022, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1018));
        float _1085 = _1018 + _806;
        float _1086 = _1022 + _807;
        float _1087 = _1026 + _808;
        float _1097 = fma(_1087, cbModelParam._m0[26u].z, fma(_1086, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1085)) - _1052;
        float _1098 = fma(_1087, cbModelParam._m0[27u].z, fma(_1086, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1085)) - _1056;
        float _1099 = fma(_1087, cbModelParam._m0[28u].z, fma(_1086, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1085)) - _1060;
        float _1103 = inversesqrt(dot(vec3(_1097, _1098, _1099), vec3(_1097, _1098, _1099)));
        float _1116 = ((_1103 * _1097) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1052 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1117 = ((_1103 * _1098) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1056 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1118 = ((_1103 * _1099) / cbModelParam._m0[34u].z) + ((((((_1060 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1121 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1116, _1117, _1118), 0.0);
        vec4 _1128 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1116, _1117, _1118), 0.0);
        vec4 _1135 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1116, _1117, _1118), 0.0);
        vec4 _1142 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1116, _1117, _1118), 0.0);
        float _1155 = exp2((_1121.w + (-0.5)) * 20.0) * 2.0;
        float _1156 = _1155 * (_1121.x + (-0.5));
        float _1157 = _1155 * (_1121.y + (-0.5));
        float _1158 = _1155 * (_1121.z + (-0.5));
        float _1165 = exp2((_1128.w + (-0.5)) * 20.0) * 2.0;
        float _1166 = _1165 * (_1128.x + (-0.5));
        float _1167 = _1165 * (_1128.y + (-0.5));
        float _1168 = _1165 * (_1128.z + (-0.5));
        float _1175 = exp2((_1135.w + (-0.5)) * 20.0) * 2.0;
        float _1176 = _1175 * (_1135.x + (-0.5));
        float _1177 = _1175 * (_1135.y + (-0.5));
        float _1178 = _1175 * (_1135.z + (-0.5));
        float _1185 = exp2((_1142.w + (-0.5)) * 20.0) * 2.0;
        float _1186 = _1185 * (_1142.x + (-0.5));
        float _1187 = _1185 * (_1142.y + (-0.5));
        float _1188 = _1185 * (_1142.z + (-0.5));
        float _1189 = isnan(0.0) ? _1186 : (isnan(_1186) ? 0.0 : max(_1186, 0.0));
        float _1190 = isnan(0.0) ? _1187 : (isnan(_1187) ? 0.0 : max(_1187, 0.0));
        float _1191 = isnan(0.0) ? _1188 : (isnan(_1188) ? 0.0 : max(_1188, 0.0));
        float _1192 = _1156 * 0.5;
        float _1193 = _1166 * 0.5;
        float _1194 = _1176 * 0.5;
        float _1195 = dot(vec3(_1192, _1193, _1194), vec3(_1192, _1193, _1194));
        float _1200 = (_1195 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1195);
        float _1209 = (dot(vec3(_806, _807, _808), vec3(_1200 * _1192, _1200 * _1193, _1200 * _1194)) + 1.0) * 0.5;
        float _4118 = isnan(0.0) ? _1209 : (isnan(_1209) ? 0.0 : max(_1209, 0.0));
        float _1219 = sqrt(((_1193 * _1193) + (_1192 * _1192)) + (_1194 * _1194)) / (_1189 + 9.9999997473787516355514526367188e-06);
        float _4129 = isnan(0.0) ? _1219 : (isnan(_1219) ? 0.0 : max(_1219, 0.0));
        float _1220 = isnan(1.0) ? _4129 : (isnan(_4129) ? 1.0 : min(_4129, 1.0));
        float _1221 = _1220 * 2.0;
        float _1225 = (1.0 - _1220) / (_1220 + 1.0);
        float _4140 = isnan(0.0) ? _1225 : (isnan(_1225) ? 0.0 : max(_1225, 0.0));
        float _1226 = isnan(1.0) ? _4140 : (isnan(_4140) ? 1.0 : min(_4140, 1.0));
        float _1235 = ((((1.0 - _1226) * (_1221 + 2.0)) * exp2(log2(isnan(1.0) ? _4118 : (isnan(_4118) ? 1.0 : min(_4118, 1.0))) * (_1221 + 1.0))) + _1226) * _1189;
        float _1236 = _1157 * 0.5;
        float _1237 = _1167 * 0.5;
        float _1238 = _1177 * 0.5;
        float _1239 = dot(vec3(_1236, _1237, _1238), vec3(_1236, _1237, _1238));
        float _1244 = (_1239 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1239);
        float _1252 = (dot(vec3(_806, _807, _808), vec3(_1244 * _1236, _1244 * _1237, _1244 * _1238)) + 1.0) * 0.5;
        float _4151 = isnan(0.0) ? _1252 : (isnan(_1252) ? 0.0 : max(_1252, 0.0));
        float _1261 = sqrt(((_1237 * _1237) + (_1236 * _1236)) + (_1238 * _1238)) / (_1190 + 9.9999997473787516355514526367188e-06);
        float _4162 = isnan(0.0) ? _1261 : (isnan(_1261) ? 0.0 : max(_1261, 0.0));
        float _1262 = isnan(1.0) ? _4162 : (isnan(_4162) ? 1.0 : min(_4162, 1.0));
        float _1263 = _1262 * 2.0;
        float _1267 = (1.0 - _1262) / (_1262 + 1.0);
        float _4173 = isnan(0.0) ? _1267 : (isnan(_1267) ? 0.0 : max(_1267, 0.0));
        float _1268 = isnan(1.0) ? _4173 : (isnan(_4173) ? 1.0 : min(_4173, 1.0));
        float _1277 = ((((1.0 - _1268) * (_1263 + 2.0)) * exp2(log2(isnan(1.0) ? _4151 : (isnan(_4151) ? 1.0 : min(_4151, 1.0))) * (_1263 + 1.0))) + _1268) * _1190;
        float _1278 = _1158 * 0.5;
        float _1279 = _1168 * 0.5;
        float _1280 = _1178 * 0.5;
        float _1281 = dot(vec3(_1278, _1279, _1280), vec3(_1278, _1279, _1280));
        float _1286 = (_1281 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1281);
        float _1294 = (dot(vec3(_806, _807, _808), vec3(_1286 * _1278, _1286 * _1279, _1286 * _1280)) + 1.0) * 0.5;
        float _4184 = isnan(0.0) ? _1294 : (isnan(_1294) ? 0.0 : max(_1294, 0.0));
        float _1303 = sqrt(((_1279 * _1279) + (_1278 * _1278)) + (_1280 * _1280)) / (_1191 + 9.9999997473787516355514526367188e-06);
        float _4195 = isnan(0.0) ? _1303 : (isnan(_1303) ? 0.0 : max(_1303, 0.0));
        float _1304 = isnan(1.0) ? _4195 : (isnan(_4195) ? 1.0 : min(_4195, 1.0));
        float _1305 = _1304 * 2.0;
        float _1309 = (1.0 - _1304) / (_1304 + 1.0);
        float _4206 = isnan(0.0) ? _1309 : (isnan(_1309) ? 0.0 : max(_1309, 0.0));
        float _1310 = isnan(1.0) ? _4206 : (isnan(_4206) ? 1.0 : min(_4206, 1.0));
        float _1319 = ((((1.0 - _1310) * (_1305 + 2.0)) * exp2(log2(isnan(1.0) ? _4184 : (isnan(_4184) ? 1.0 : min(_4184, 1.0))) * (_1305 + 1.0))) + _1310) * _1191;
        _1327 = _1158;
        _1329 = _1157;
        _1330 = _1156;
        _1331 = _1168;
        _1332 = _1167;
        _1333 = _1166;
        _1334 = _1178;
        _1335 = _1177;
        _1336 = _1176;
        _1337 = _1191;
        _1338 = _1190;
        _1339 = _1189;
        _1340 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1235 : (isnan(_1235) ? 0.0 : max(_1235, 0.0)));
        _1341 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1277 : (isnan(_1277) ? 0.0 : max(_1277, 0.0)));
        _1342 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1319 : (isnan(_1319) ? 0.0 : max(_1319, 0.0)));
    }
    else
    {
        _1327 = _1328;
        _1329 = _1328;
        _1330 = _1328;
        _1331 = _1328;
        _1332 = _1328;
        _1333 = _1328;
        _1334 = _1328;
        _1335 = _1328;
        _1336 = _1328;
        _1337 = _1328;
        _1338 = _1328;
        _1339 = _1328;
        _1340 = 0.0;
        _1341 = 0.0;
        _1342 = 0.0;
    }
    float _1635;
    float _1636;
    float _1637;
    float _1638;
    float _1639;
    float _1640;
    float _1641;
    float _1642;
    float _1643;
    float _1644;
    float _1645;
    float _1646;
    float _1647;
    float _1648;
    float _1649;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1366 = fma(_1026, cbModelParam._m0[30u].z, fma(_1022, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1018));
        float _1370 = fma(_1026, cbModelParam._m0[31u].z, fma(_1022, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1018));
        float _1374 = fma(_1026, cbModelParam._m0[32u].z, fma(_1022, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1018));
        float _1397 = _1018 + _806;
        float _1398 = _1022 + _807;
        float _1399 = _1026 + _808;
        float _1409 = fma(_1399, cbModelParam._m0[30u].z, fma(_1398, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1397)) - _1366;
        float _1410 = fma(_1399, cbModelParam._m0[31u].z, fma(_1398, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1397)) - _1370;
        float _1411 = fma(_1399, cbModelParam._m0[32u].z, fma(_1398, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1397)) - _1374;
        float _1415 = inversesqrt(dot(vec3(_1409, _1410, _1411), vec3(_1409, _1410, _1411)));
        float _1428 = ((_1415 * _1409) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1366 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1429 = ((_1415 * _1410) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1370 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1430 = ((_1415 * _1411) / cbModelParam._m0[35u].z) + ((((((_1374 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1432 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1428, _1429, _1430), 0.0);
        vec4 _1439 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1428, _1429, _1430), 0.0);
        vec4 _1446 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1428, _1429, _1430), 0.0);
        vec4 _1453 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1428, _1429, _1430), 0.0);
        float _1465 = exp2((_1432.w + (-0.5)) * 20.0) * 2.0;
        float _1466 = _1465 * (_1432.x + (-0.5));
        float _1467 = _1465 * (_1432.y + (-0.5));
        float _1468 = _1465 * (_1432.z + (-0.5));
        float _1475 = exp2((_1439.w + (-0.5)) * 20.0) * 2.0;
        float _1476 = _1475 * (_1439.x + (-0.5));
        float _1477 = _1475 * (_1439.y + (-0.5));
        float _1478 = _1475 * (_1439.z + (-0.5));
        float _1485 = exp2((_1446.w + (-0.5)) * 20.0) * 2.0;
        float _1486 = _1485 * (_1446.x + (-0.5));
        float _1487 = _1485 * (_1446.y + (-0.5));
        float _1488 = _1485 * (_1446.z + (-0.5));
        float _1495 = exp2((_1453.w + (-0.5)) * 20.0) * 2.0;
        float _1496 = _1495 * (_1453.x + (-0.5));
        float _1497 = _1495 * (_1453.y + (-0.5));
        float _1498 = _1495 * (_1453.z + (-0.5));
        float _1499 = isnan(0.0) ? _1496 : (isnan(_1496) ? 0.0 : max(_1496, 0.0));
        float _1500 = isnan(0.0) ? _1497 : (isnan(_1497) ? 0.0 : max(_1497, 0.0));
        float _1501 = isnan(0.0) ? _1498 : (isnan(_1498) ? 0.0 : max(_1498, 0.0));
        float _1502 = _1466 * 0.5;
        float _1503 = _1476 * 0.5;
        float _1504 = _1486 * 0.5;
        float _1505 = dot(vec3(_1502, _1503, _1504), vec3(_1502, _1503, _1504));
        float _1510 = (_1505 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1505);
        float _1518 = (dot(vec3(_806, _807, _808), vec3(_1510 * _1502, _1510 * _1503, _1510 * _1504)) + 1.0) * 0.5;
        float _4247 = isnan(0.0) ? _1518 : (isnan(_1518) ? 0.0 : max(_1518, 0.0));
        float _1527 = sqrt(((_1503 * _1503) + (_1502 * _1502)) + (_1504 * _1504)) / (_1499 + 9.9999997473787516355514526367188e-06);
        float _4258 = isnan(0.0) ? _1527 : (isnan(_1527) ? 0.0 : max(_1527, 0.0));
        float _1528 = isnan(1.0) ? _4258 : (isnan(_4258) ? 1.0 : min(_4258, 1.0));
        float _1529 = _1528 * 2.0;
        float _1533 = (1.0 - _1528) / (_1528 + 1.0);
        float _4269 = isnan(0.0) ? _1533 : (isnan(_1533) ? 0.0 : max(_1533, 0.0));
        float _1534 = isnan(1.0) ? _4269 : (isnan(_4269) ? 1.0 : min(_4269, 1.0));
        float _1543 = ((((1.0 - _1534) * (_1529 + 2.0)) * exp2(log2(isnan(1.0) ? _4247 : (isnan(_4247) ? 1.0 : min(_4247, 1.0))) * (_1529 + 1.0))) + _1534) * _1499;
        float _1544 = _1467 * 0.5;
        float _1545 = _1477 * 0.5;
        float _1546 = _1487 * 0.5;
        float _1547 = dot(vec3(_1544, _1545, _1546), vec3(_1544, _1545, _1546));
        float _1552 = (_1547 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1547);
        float _1560 = (dot(vec3(_806, _807, _808), vec3(_1552 * _1544, _1552 * _1545, _1552 * _1546)) + 1.0) * 0.5;
        float _4280 = isnan(0.0) ? _1560 : (isnan(_1560) ? 0.0 : max(_1560, 0.0));
        float _1569 = sqrt(((_1545 * _1545) + (_1544 * _1544)) + (_1546 * _1546)) / (_1500 + 9.9999997473787516355514526367188e-06);
        float _4291 = isnan(0.0) ? _1569 : (isnan(_1569) ? 0.0 : max(_1569, 0.0));
        float _1570 = isnan(1.0) ? _4291 : (isnan(_4291) ? 1.0 : min(_4291, 1.0));
        float _1571 = _1570 * 2.0;
        float _1575 = (1.0 - _1570) / (_1570 + 1.0);
        float _4302 = isnan(0.0) ? _1575 : (isnan(_1575) ? 0.0 : max(_1575, 0.0));
        float _1576 = isnan(1.0) ? _4302 : (isnan(_4302) ? 1.0 : min(_4302, 1.0));
        float _1585 = ((((1.0 - _1576) * (_1571 + 2.0)) * exp2(log2(isnan(1.0) ? _4280 : (isnan(_4280) ? 1.0 : min(_4280, 1.0))) * (_1571 + 1.0))) + _1576) * _1500;
        float _1586 = _1468 * 0.5;
        float _1587 = _1478 * 0.5;
        float _1588 = _1488 * 0.5;
        float _1589 = dot(vec3(_1586, _1587, _1588), vec3(_1586, _1587, _1588));
        float _1594 = (_1589 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1589);
        float _1602 = (dot(vec3(_806, _807, _808), vec3(_1594 * _1586, _1594 * _1587, _1594 * _1588)) + 1.0) * 0.5;
        float _4313 = isnan(0.0) ? _1602 : (isnan(_1602) ? 0.0 : max(_1602, 0.0));
        float _1611 = sqrt(((_1587 * _1587) + (_1586 * _1586)) + (_1588 * _1588)) / (_1501 + 9.9999997473787516355514526367188e-06);
        float _4324 = isnan(0.0) ? _1611 : (isnan(_1611) ? 0.0 : max(_1611, 0.0));
        float _1612 = isnan(1.0) ? _4324 : (isnan(_4324) ? 1.0 : min(_4324, 1.0));
        float _1613 = _1612 * 2.0;
        float _1617 = (1.0 - _1612) / (_1612 + 1.0);
        float _4335 = isnan(0.0) ? _1617 : (isnan(_1617) ? 0.0 : max(_1617, 0.0));
        float _1618 = isnan(1.0) ? _4335 : (isnan(_4335) ? 1.0 : min(_4335, 1.0));
        float _1627 = ((((1.0 - _1618) * (_1613 + 2.0)) * exp2(log2(isnan(1.0) ? _4313 : (isnan(_4313) ? 1.0 : min(_4313, 1.0))) * (_1613 + 1.0))) + _1618) * _1501;
        _1635 = _1468;
        _1636 = _1467;
        _1637 = _1466;
        _1638 = _1478;
        _1639 = _1477;
        _1640 = _1476;
        _1641 = _1488;
        _1642 = _1487;
        _1643 = _1486;
        _1644 = _1501;
        _1645 = _1500;
        _1646 = _1499;
        _1647 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1543 : (isnan(_1543) ? 0.0 : max(_1543, 0.0)));
        _1648 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1585 : (isnan(_1585) ? 0.0 : max(_1585, 0.0)));
        _1649 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1627 : (isnan(_1627) ? 0.0 : max(_1627, 0.0)));
    }
    else
    {
        _1635 = _1328;
        _1636 = _1328;
        _1637 = _1328;
        _1638 = _1328;
        _1639 = _1328;
        _1640 = _1328;
        _1641 = _1328;
        _1642 = _1328;
        _1643 = _1328;
        _1644 = _1328;
        _1645 = _1328;
        _1646 = _1328;
        _1647 = 0.0;
        _1648 = 0.0;
        _1649 = 0.0;
    }
    float _1659 = (cbModelParam._m0[1u].x * (_1647 - _1340)) + _1340;
    float _1660 = (cbModelParam._m0[1u].x * (_1648 - _1341)) + _1341;
    float _1661 = (cbModelParam._m0[1u].x * (_1649 - _1342)) + _1342;
    float _1682 = fma(_1661, cbSceneParam._m0[89u].z, fma(_1660, cbSceneParam._m0[89u].y, _1659 * cbSceneParam._m0[89u].x));
    float _1685 = fma(_1661, cbSceneParam._m0[90u].z, fma(_1660, cbSceneParam._m0[90u].y, _1659 * cbSceneParam._m0[90u].x));
    float _1688 = fma(_1661, cbSceneParam._m0[91u].z, fma(_1660, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1659));
    float _1703 = _965 * 0.5;
    float _1704 = _966 * 0.5;
    float _1705 = _967 * 0.5;
    float _1706 = dot(vec4(_1703, _1704, _1705, 1.0), vec4(_1637, _1640, _1643, _1646));
    float _1709 = dot(vec4(_1703, _1704, _1705, 1.0), vec4(_1636, _1639, _1642, _1645));
    float _1712 = dot(vec4(_1703, _1704, _1705, 1.0), vec4(_1635, _1638, _1641, _1644));
    float _1746;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1719 = dot(vec4(_1703, _1704, _1705, 1.0), vec4(_1327, _1331, _1334, _1337));
        float _1723 = dot(vec4(_1703, _1704, _1705, 1.0), vec4(_1329, _1332, _1335, _1338));
        float _1727 = dot(vec4(_1703, _1704, _1705, 1.0), vec4(_1330, _1333, _1336, _1339));
        float _1734 = dot(vec4(cbModelParam._m0[39u]), vec4(_1703, _1704, _1705, 1.0));
        _1746 = dot(vec3(isnan(0.0) ? _1727 : (isnan(_1727) ? 0.0 : max(_1727, 0.0)), isnan(0.0) ? _1723 : (isnan(_1723) ? 0.0 : max(_1723, 0.0)), isnan(0.0) ? _1719 : (isnan(_1719) ? 0.0 : max(_1719, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1734) ? 0.0 : (isnan(0.0) ? _1734 : max(0.0, _1734))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1746 = 1.0;
    }
    float _1757;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1748 = dot(vec4(cbModelParam._m0[40u]), vec4(_1703, _1704, _1705, 1.0));
        _1757 = dot(vec3(isnan(0.0) ? _1706 : (isnan(_1706) ? 0.0 : max(_1706, 0.0)), isnan(0.0) ? _1709 : (isnan(_1709) ? 0.0 : max(_1709, 0.0)), isnan(0.0) ? _1712 : (isnan(_1712) ? 0.0 : max(_1712, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1748) ? 0.0 : (isnan(0.0) ? _1748 : max(0.0, _1748))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1757 = 1.0;
    }
    float _1761 = (_1757 * cbModelParam._m0[1u].x) + (_1746 * (1.0 - cbModelParam._m0[1u].x));
    float _1771 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _809);
    float _1772 = isnan(_1771) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1771 : min(cbModelParam._m0[25u].z, _1771));
    float _1853;
    float _1855;
    float _1857;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1820 = fma(_1026, cbModelParam._m0[13u].z, fma(_1022, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1018)) + cbModelParam._m0[13u].w;
        float _1824 = fma(_1026, cbModelParam._m0[14u].z, fma(_1022, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1018)) + cbModelParam._m0[14u].w;
        float _1828 = fma(_1026, cbModelParam._m0[15u].z, fma(_1022, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1018)) + cbModelParam._m0[15u].w;
        float _1831 = fma(_967, cbModelParam._m0[13u].z, fma(_966, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _965));
        float _1834 = fma(_967, cbModelParam._m0[14u].z, fma(_966, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _965));
        float _1837 = fma(_967, cbModelParam._m0[15u].z, fma(_966, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _965));
        float _1865;
        if (_1831 > 0.0)
        {
            _1865 = abs((1.0 - _1820) / _1831);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1831 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1820 + 1.0) / _1831);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1865 = frontier_phi_14_12_ladder;
        }
        float _2035;
        if (_1834 > 0.0)
        {
            _2035 = abs((1.0 - _1824) / _1834);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1834 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1824 + 1.0) / _1834);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2035 = frontier_phi_23_19_ladder;
        }
        float _2330;
        if (_1837 > 0.0)
        {
            _2330 = abs((1.0 - _1828) / _1837);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1837 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1828 + 1.0) / _1837);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2330 = frontier_phi_35_30_ladder;
        }
        float _2332 = isnan(_2035) ? _1865 : (isnan(_1865) ? _2035 : min(_1865, _2035));
        float _2333 = isnan(_2330) ? _2332 : (isnan(_2332) ? _2330 : min(_2332, _2330));
        float _2337 = (_2333 * _1831) + _1820;
        float _2338 = (_2333 * _1834) + _1824;
        float _2339 = (_2333 * _1837) + _1828;
        float _2340 = _2333 * 9.9999997473787516355514526367188e-05;
        float _2342 = (-1.0) - _2340;
        float _2344 = _2340 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2339 > _2344) || ((_2339 < _2342) || ((_2338 > _2344) || ((_2338 < _2342) || ((_2337 < _2342) || (_2337 > _2344))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2484 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2339, cbModelParam._m0[9u].z, fma(_2338, cbModelParam._m0[9u].y, _2337 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2339, cbModelParam._m0[10u].z, fma(_2338, cbModelParam._m0[10u].y, _2337 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2339, cbModelParam._m0[11u].z, fma(_2338, cbModelParam._m0[11u].y, _2337 * cbModelParam._m0[11u].x))), _1772);
            frontier_phi_13_35_ladder = _2484.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2484.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2484.x * cbModelParam._m0[1u].y;
        }
        _1853 = frontier_phi_13_35_ladder_2;
        _1855 = frontier_phi_13_35_ladder_1;
        _1857 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1841 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_965, _966, _967), _1772);
        _1853 = _1841.x * cbModelParam._m0[1u].y;
        _1855 = _1841.y * cbModelParam._m0[1u].y;
        _1857 = _1841.z * cbModelParam._m0[1u].y;
    }
    float _1861 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _809);
    float _1862 = isnan(_1861) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1861 : min(cbModelParam._m0[25u].w, _1861));
    float _1952;
    float _1954;
    float _1956;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1916 = fma(_1026, cbModelParam._m0[21u].z, fma(_1022, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1018)) + cbModelParam._m0[21u].w;
        float _1920 = fma(_1026, cbModelParam._m0[22u].z, fma(_1022, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1018)) + cbModelParam._m0[22u].w;
        float _1924 = fma(_1026, cbModelParam._m0[23u].z, fma(_1022, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1018)) + cbModelParam._m0[23u].w;
        float _1927 = fma(_967, cbModelParam._m0[21u].z, fma(_966, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _965));
        float _1930 = fma(_967, cbModelParam._m0[22u].z, fma(_966, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _965));
        float _1933 = fma(_967, cbModelParam._m0[23u].z, fma(_966, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _965));
        float _2040;
        if (_1927 > 0.0)
        {
            _2040 = abs((1.0 - _1916) / _1927);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1927 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1916 + 1.0) / _1927);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2040 = frontier_phi_25_21_ladder;
        }
        float _2357;
        if (_1930 > 0.0)
        {
            _2357 = abs((1.0 - _1920) / _1930);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1930 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1920 + 1.0) / _1930);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2357 = frontier_phi_37_32_ladder;
        }
        float _2684;
        if (_1933 > 0.0)
        {
            _2684 = abs((1.0 - _1924) / _1933);
        }
        else
        {
            float frontier_phi_47_44_ladder;
            if (_1933 < 0.0)
            {
                frontier_phi_47_44_ladder = abs((_1924 + 1.0) / _1933);
            }
            else
            {
                frontier_phi_47_44_ladder = 5000.0;
            }
            _2684 = frontier_phi_47_44_ladder;
        }
        float _2686 = isnan(_2357) ? _2040 : (isnan(_2040) ? _2357 : min(_2040, _2357));
        float _2687 = isnan(_2684) ? _2686 : (isnan(_2686) ? _2684 : min(_2686, _2684));
        float _2691 = (_2687 * _1927) + _1916;
        float _2692 = (_2687 * _1930) + _1920;
        float _2693 = (_2687 * _1933) + _1924;
        float _2694 = _2687 * 9.9999997473787516355514526367188e-05;
        float _2695 = (-1.0) - _2694;
        float _2697 = _2694 + 1.0;
        float frontier_phi_22_47_ladder;
        float frontier_phi_22_47_ladder_1;
        float frontier_phi_22_47_ladder_2;
        if ((_2693 > _2697) || ((_2693 < _2695) || ((_2692 > _2697) || ((_2692 < _2695) || ((_2691 < _2695) || (_2691 > _2697))))))
        {
            frontier_phi_22_47_ladder = 0.0;
            frontier_phi_22_47_ladder_1 = 0.0;
            frontier_phi_22_47_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2811 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2693, cbModelParam._m0[17u].z, fma(_2692, cbModelParam._m0[17u].y, _2691 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2693, cbModelParam._m0[18u].z, fma(_2692, cbModelParam._m0[18u].y, _2691 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2693, cbModelParam._m0[19u].z, fma(_2692, cbModelParam._m0[19u].y, _2691 * cbModelParam._m0[19u].x))), _1862);
            frontier_phi_22_47_ladder = _2811.z * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_1 = _2811.y * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_2 = _2811.x * cbModelParam._m0[1u].z;
        }
        _1952 = frontier_phi_22_47_ladder_2;
        _1954 = frontier_phi_22_47_ladder_1;
        _1956 = frontier_phi_22_47_ladder;
    }
    else
    {
        vec4 _1936 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_965, _966, _967), _1862);
        _1952 = _1936.x * cbModelParam._m0[1u].z;
        _1954 = _1936.y * cbModelParam._m0[1u].z;
        _1956 = _1936.z * cbModelParam._m0[1u].z;
    }
    float _1968 = ((((1.0 - _986) * ((_973 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_986 * _973)) * _957;
    float _1969 = _1968 * ((cbModelParam._m0[1u].w * (_1952 - _1853)) + _1853);
    float _1970 = _1968 * ((cbModelParam._m0[1u].w * (_1954 - _1855)) + _1855);
    float _1971 = _1968 * ((cbModelParam._m0[1u].w * (_1956 - _1857)) + _1857);
    float _1974 = fma(_1971, cbSceneParam._m0[89u].z, fma(_1970, cbSceneParam._m0[89u].y, _1969 * cbSceneParam._m0[89u].x));
    float _1977 = fma(_1971, cbSceneParam._m0[90u].z, fma(_1970, cbSceneParam._m0[90u].y, _1969 * cbSceneParam._m0[90u].x));
    float _1980 = fma(_1971, cbSceneParam._m0[91u].z, fma(_1970, cbSceneParam._m0[91u].y, _1969 * cbSceneParam._m0[91u].x));
    float _2014 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2018 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2022 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2026 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2027 = _2014 / _2026;
    float _2028 = _2018 / _2026;
    float _2029 = _2022 / _2026;
    float _2176;
    float _2177;
    float _2178;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2056 = ((uint(_2029 > cbSceneParam._m0[59u].y) + uint(_2029 > cbSceneParam._m0[59u].x)) + uint(_2029 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2057 = _2056 + 43u;
        uint _2065 = _2056 + 44u;
        uint _2073 = _2056 + 45u;
        uint _2081 = _2056 + 46u;
        float _2092 = fma(_2026, cbSceneParam._m0[_2057].w, fma(_2022, cbSceneParam._m0[_2057].z, fma(_2018, cbSceneParam._m0[_2057].y, _2014 * cbSceneParam._m0[_2057].x)));
        float _2096 = fma(_2026, cbSceneParam._m0[_2065].w, fma(_2022, cbSceneParam._m0[_2065].z, fma(_2018, cbSceneParam._m0[_2065].y, _2014 * cbSceneParam._m0[_2065].x)));
        float _2104 = fma(_2026, cbSceneParam._m0[_2081].w, fma(_2022, cbSceneParam._m0[_2081].z, fma(_2018, cbSceneParam._m0[_2081].y, _2014 * cbSceneParam._m0[_2081].x)));
        float _2109 = cbSceneParam._m0[33u].z * _2104;
        float _2111 = cbSceneParam._m0[33u].w * _2104;
        float _2114 = fma(_2026, cbSceneParam._m0[_2073].w, fma(_2022, cbSceneParam._m0[_2073].z, fma(_2018, cbSceneParam._m0[_2073].y, _2014 * cbSceneParam._m0[_2073].x))) / _2104;
        float _2162 = (cbSceneParam._m0[33u].x - sqrt(((_2028 * _2028) + (_2027 * _2027)) + (_2029 * _2029))) * cbSceneParam._m0[33u].y;
        float _4461 = isnan(0.0) ? _2162 : (isnan(_2162) ? 0.0 : max(_2162, 0.0));
        float _2169 = (isnan(1.0) ? _4461 : (isnan(_4461) ? 1.0 : min(_4461, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2109 + _2092) / _2104, (_2111 + _2096) / _2104), _2114), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2111 + _2092) / _2104, (_2096 - _2109) / _2104), _2114), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2092 - _2109) / _2104, (_2096 - _2111) / _2104), _2114), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2092 - _2111) / _2104, (_2109 + _2096) / _2104), _2114), 0.0)).x), vec4(0.25)));
        _2176 = 1.0 - (_2169 * cbSceneParam._m0[34u].x);
        _2177 = 1.0 - (_2169 * cbSceneParam._m0[34u].y);
        _2178 = 1.0 - (_2169 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2176 = 1.0;
        _2177 = 1.0;
        _2178 = 1.0;
    }
    float _2242;
    float _2244;
    float _2246;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2230 = fma(_2026, cbSceneParam._m0[63u].w, fma(_2022, cbSceneParam._m0[63u].z, fma(_2018, cbSceneParam._m0[63u].y, _2014 * cbSceneParam._m0[63u].x)));
        float _2231 = fma(_2026, cbSceneParam._m0[60u].w, fma(_2022, cbSceneParam._m0[60u].z, fma(_2018, cbSceneParam._m0[60u].y, _2014 * cbSceneParam._m0[60u].x))) / _2230;
        float _2232 = fma(_2026, cbSceneParam._m0[61u].w, fma(_2022, cbSceneParam._m0[61u].z, fma(_2018, cbSceneParam._m0[61u].y, _2014 * cbSceneParam._m0[61u].x))) / _2230;
        float frontier_phi_34_33_ladder;
        float frontier_phi_34_33_ladder_1;
        float frontier_phi_34_33_ladder_2;
        if ((((_2231 >= cbSceneParam._m0[64u].x) && (_2232 >= cbSceneParam._m0[64u].y)) && (_2231 <= cbSceneParam._m0[64u].z)) && (_2232 <= cbSceneParam._m0[64u].w))
        {
            float _2370 = fma(_2026, cbSceneParam._m0[62u].w, fma(_2022, cbSceneParam._m0[62u].z, fma(_2018, cbSceneParam._m0[62u].y, _2014 * cbSceneParam._m0[62u].x))) / _2230;
            float _2374 = isnan(cbSceneParam._m0[41u].w) ? _2370 : (isnan(_2370) ? cbSceneParam._m0[41u].w : max(_2370, cbSceneParam._m0[41u].w));
            float _2417 = (cbSceneParam._m0[33u].x - sqrt(((_2028 * _2028) + (_2027 * _2027)) + (_2029 * _2029))) * cbSceneParam._m0[33u].y;
            float _4477 = isnan(0.0) ? _2417 : (isnan(_2417) ? 0.0 : max(_2417, 0.0));
            float _2424 = (isnan(1.0) ? _4477 : (isnan(_4477) ? 1.0 : min(_4477, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2231, cbSceneParam._m0[33u].w + _2232), _2374), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2231, _2232 - cbSceneParam._m0[33u].z), _2374), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2231 - cbSceneParam._m0[33u].z, _2232 - cbSceneParam._m0[33u].w), _2374), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2231 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2232), _2374), 0.0)).x), vec4(0.25)));
            float _2428 = 1.0 - (_2424 * cbSceneParam._m0[34u].x);
            float _2429 = 1.0 - (_2424 * cbSceneParam._m0[34u].y);
            float _2430 = 1.0 - (_2424 * cbSceneParam._m0[34u].z);
            frontier_phi_34_33_ladder = isnan(_2430) ? _2178 : (isnan(_2178) ? _2430 : min(_2178, _2430));
            frontier_phi_34_33_ladder_1 = isnan(_2429) ? _2177 : (isnan(_2177) ? _2429 : min(_2177, _2429));
            frontier_phi_34_33_ladder_2 = isnan(_2428) ? _2176 : (isnan(_2176) ? _2428 : min(_2176, _2428));
        }
        else
        {
            frontier_phi_34_33_ladder = _2178;
            frontier_phi_34_33_ladder_1 = _2177;
            frontier_phi_34_33_ladder_2 = _2176;
        }
        _2242 = frontier_phi_34_33_ladder_2;
        _2244 = frontier_phi_34_33_ladder_1;
        _2246 = frontier_phi_34_33_ladder;
    }
    else
    {
        _2242 = _2176;
        _2244 = _2177;
        _2246 = _2178;
    }
    uvec4 _2251 = floatBitsToUint(cbInstanceData._m0[_270 + 5u]);
    uint _2253 = _2251.x * 14u;
    uint _2254 = _2253 + 13u;
    float _2261 = _957 + (-1.0);
    float _2266 = (cbLight._m0[_2254].x * _2261) + 1.0;
    float _2267 = (cbLight._m0[_2254].y * _2261) + 1.0;
    float _2268 = (cbLight._m0[_2254].z * _2261) + 1.0;
    float _2269 = (cbLight._m0[_2254].w * _2261) + 1.0;
    uint _2270 = _2253 + 5u;
    float _2276 = isnan(1.0) ? _2267 : (isnan(_2267) ? 1.0 : min(_2267, 1.0));
    uint _2280 = _2253 + 4u;
    float _2289 = isnan(1.0) ? _2266 : (isnan(_2266) ? 1.0 : min(_2266, 1.0));
    uint _2293 = _2253 | 1u;
    float _2304 = dot(vec3(cbLight._m0[_2253].xyz), vec3(_806, _807, _808));
    float _2307 = dot(vec3(cbLight._m0[_2293].xyz), vec3(_806, _807, _808));
    float _4513 = isnan(0.0) ? _2304 : (isnan(_2304) ? 0.0 : max(_2304, 0.0));
    float _4524 = isnan(0.0) ? _2307 : (isnan(_2307) ? 0.0 : max(_2307, 0.0));
    float _2312 = (isnan(1.0) ? _4513 : (isnan(_4513) ? 1.0 : min(_4513, 1.0))) * 0.3183098733425140380859375;
    float _2314 = (isnan(1.0) ? _4524 : (isnan(_4524) ? 1.0 : min(_4524, 1.0))) * 0.3183098733425140380859375;
    float _2321 = ((cbLight._m0[_2270].x * _2276) * _2314) + (((cbLight._m0[_2280].x * _2242) * _2289) * _2312);
    float _2322 = ((_2276 * cbLight._m0[_2270].y) * _2314) + (((cbLight._m0[_2280].y * _2244) * _2289) * _2312);
    float _2323 = ((_2276 * cbLight._m0[_2270].z) * _2314) + (((cbLight._m0[_2280].z * _2246) * _2289) * _2312);
    uvec4 _2327 = floatBitsToUint(cbLight._m0[_2253 + 12u]);
    bool _2329 = _2327.x == 0u;
    float _2431;
    float _2433;
    float _2435;
    if (_2329)
    {
        _2431 = _2321;
        _2433 = _2322;
        _2435 = _2323;
    }
    else
    {
        uint _2439 = _2253 + 6u;
        float _2455 = (dot(vec3(cbLight._m0[_2253 + 2u].xyz), vec3(_806, _807, _808)) * 0.5) + 0.5;
        float _2456 = _2455 * _2455;
        float _4535 = isnan(0.0) ? _2456 : (isnan(_2456) ? 0.0 : max(_2456, 0.0));
        float _2457 = isnan(1.0) ? _4535 : (isnan(_4535) ? 1.0 : min(_4535, 1.0));
        float _2458 = isnan(1.0) ? _2268 : (isnan(_2268) ? 1.0 : min(_2268, 1.0));
        _2431 = (((cbLight._m0[_2439].x * 0.3183098733425140380859375) * _2457) * _2458) + _2321;
        _2433 = (((cbLight._m0[_2439].y * 0.3183098733425140380859375) * _2457) * _2458) + _2322;
        _2435 = (((cbLight._m0[_2439].z * 0.3183098733425140380859375) * _2457) * _2458) + _2323;
    }
    bool _2438 = _2327.y == 0u;
    float _2493;
    float _2495;
    float _2497;
    if (_2438)
    {
        _2493 = _2431;
        _2495 = _2433;
        _2497 = _2435;
    }
    else
    {
        uint _2655 = _2253 + 7u;
        float _2671 = (dot(vec3(cbLight._m0[_2253 + 3u].xyz), vec3(_806, _807, _808)) * 0.5) + 0.5;
        float _2672 = _2671 * _2671;
        float _4551 = isnan(0.0) ? _2672 : (isnan(_2672) ? 0.0 : max(_2672, 0.0));
        float _2673 = isnan(1.0) ? _4551 : (isnan(_4551) ? 1.0 : min(_4551, 1.0));
        float _2674 = isnan(1.0) ? _2269 : (isnan(_2269) ? 1.0 : min(_2269, 1.0));
        _2493 = (((cbLight._m0[_2655].x * 0.3183098733425140380859375) * _2673) * _2674) + _2431;
        _2495 = (((cbLight._m0[_2655].y * 0.3183098733425140380859375) * _2673) * _2674) + _2433;
        _2497 = (((cbLight._m0[_2655].z * 0.3183098733425140380859375) * _2673) * _2674) + _2435;
    }
    uint _2500 = _2253 + 8u;
    float _2513 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2253].w)) * _809) * 0.949999988079071044921875);
    float _2514 = _2513 * _2513;
    float _2515 = cbLight._m0[_2253].x + _886;
    float _2516 = cbLight._m0[_2253].y + _887;
    float _2517 = cbLight._m0[_2253].z + _888;
    float _2521 = inversesqrt(dot(vec3(_2515, _2516, _2517), vec3(_2515, _2516, _2517)));
    float _2522 = _2521 * _2515;
    float _2523 = _2521 * _2516;
    float _2524 = _2521 * _2517;
    float _2525 = dot(vec3(_806, _807, _808), vec3(cbLight._m0[_2253].xyz));
    float _4567 = isnan(0.0) ? _2525 : (isnan(_2525) ? 0.0 : max(_2525, 0.0));
    float _2528 = isnan(1.0) ? _4567 : (isnan(_4567) ? 1.0 : min(_4567, 1.0));
    float _4578 = isnan(0.0) ? _958 : (isnan(_958) ? 0.0 : max(_958, 0.0));
    float _2529 = isnan(1.0) ? _4578 : (isnan(_4578) ? 1.0 : min(_4578, 1.0));
    float _2530 = dot(vec3(_806, _807, _808), vec3(_2522, _2523, _2524));
    float _4589 = isnan(0.0) ? _2530 : (isnan(_2530) ? 0.0 : max(_2530, 0.0));
    float _2533 = isnan(1.0) ? _4589 : (isnan(_4589) ? 1.0 : min(_4589, 1.0));
    float _2534 = dot(vec3(cbLight._m0[_2253].xyz), vec3(_2522, _2523, _2524));
    float _4600 = isnan(0.0) ? _2534 : (isnan(_2534) ? 0.0 : max(_2534, 0.0));
    float _2538 = _2514 * _2514;
    float _2542 = ((_2533 * _2533) * (_2538 + (-1.0))) + 1.0;
    float _2553 = (exp2(log2(1.0 - (isnan(1.0) ? _4600 : (isnan(_4600) ? 1.0 : min(_4600, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2554 = 1.0 - _2514;
    float _2565 = (0.5 / (((_2529 * ((_2528 * _2554) + _2514)) + 9.9999999392252902907785028219223e-09) + (((_2529 * _2554) + _2514) * _2528))) * _2528;
    float _4611 = isnan(0.0) ? _2565 : (isnan(_2565) ? 0.0 : max(_2565, 0.0));
    float _2567 = (isnan(1.0) ? _4611 : (isnan(_4611) ? 1.0 : min(_4611, 1.0))) * (_2538 / ((_2542 * _2542) * 3.141590118408203125));
    uint _2581 = _2253 + 9u;
    float _2592 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2293].w)) * _809) * 0.949999988079071044921875);
    float _2593 = _2592 * _2592;
    float _2594 = cbLight._m0[_2293].x + _886;
    float _2595 = cbLight._m0[_2293].y + _887;
    float _2596 = cbLight._m0[_2293].z + _888;
    float _2600 = inversesqrt(dot(vec3(_2594, _2595, _2596), vec3(_2594, _2595, _2596)));
    float _2601 = _2600 * _2594;
    float _2602 = _2600 * _2595;
    float _2603 = _2600 * _2596;
    float _2604 = dot(vec3(_806, _807, _808), vec3(cbLight._m0[_2293].xyz));
    float _4622 = isnan(0.0) ? _2604 : (isnan(_2604) ? 0.0 : max(_2604, 0.0));
    float _2607 = isnan(1.0) ? _4622 : (isnan(_4622) ? 1.0 : min(_4622, 1.0));
    float _2608 = dot(vec3(_806, _807, _808), vec3(_2601, _2602, _2603));
    float _4633 = isnan(0.0) ? _2608 : (isnan(_2608) ? 0.0 : max(_2608, 0.0));
    float _2611 = isnan(1.0) ? _4633 : (isnan(_4633) ? 1.0 : min(_4633, 1.0));
    float _2612 = dot(vec3(cbLight._m0[_2293].xyz), vec3(_2601, _2602, _2603));
    float _4644 = isnan(0.0) ? _2612 : (isnan(_2612) ? 0.0 : max(_2612, 0.0));
    float _2616 = _2593 * _2593;
    float _2620 = ((_2611 * _2611) * (_2616 + (-1.0))) + 1.0;
    float _2629 = (exp2(log2(1.0 - (isnan(1.0) ? _4644 : (isnan(_4644) ? 1.0 : min(_4644, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2630 = 1.0 - _2593;
    float _2640 = (0.5 / (((_2529 * ((_2607 * _2630) + _2593)) + 9.9999999392252902907785028219223e-09) + (((_2529 * _2630) + _2593) * _2607))) * _2607;
    float _4655 = isnan(0.0) ? _2640 : (isnan(_2640) ? 0.0 : max(_2640, 0.0));
    float _2642 = (isnan(1.0) ? _4655 : (isnan(_4655) ? 1.0 : min(_4655, 1.0))) * (_2616 / ((_2620 * _2620) * 3.141590118408203125));
    float _2652 = (((_2629 * cbLight._m0[_2581].x) * _2642) * _2276) + ((((cbLight._m0[_2500].x * _2242) * _2553) * _2567) * _2289);
    float _2653 = (((_2629 * cbLight._m0[_2581].y) * _2642) * _2276) + ((((cbLight._m0[_2500].y * _2244) * _2553) * _2567) * _2289);
    float _2654 = (((_2629 * cbLight._m0[_2581].z) * _2642) * _2276) + ((((cbLight._m0[_2500].z * _2246) * _2553) * _2567) * _2289);
    float _2710;
    float _2712;
    float _2714;
    if (_2329)
    {
        _2710 = _2652;
        _2712 = _2653;
        _2714 = _2654;
    }
    else
    {
        uint _2716 = _2253 + 2u;
        uint _2720 = _2253 + 10u;
        float _2734 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2716].w)) * _809) * 0.949999988079071044921875);
        float _2735 = _2734 * _2734;
        float _2736 = cbLight._m0[_2716].x + _886;
        float _2737 = cbLight._m0[_2716].y + _887;
        float _2738 = cbLight._m0[_2716].z + _888;
        float _2742 = inversesqrt(dot(vec3(_2736, _2737, _2738), vec3(_2736, _2737, _2738)));
        float _2743 = _2742 * _2736;
        float _2744 = _2742 * _2737;
        float _2745 = _2742 * _2738;
        float _2746 = dot(vec3(_806, _807, _808), vec3(cbLight._m0[_2716].xyz));
        float _4666 = isnan(0.0) ? _2746 : (isnan(_2746) ? 0.0 : max(_2746, 0.0));
        float _2749 = isnan(1.0) ? _4666 : (isnan(_4666) ? 1.0 : min(_4666, 1.0));
        float _2750 = dot(vec3(_806, _807, _808), vec3(_2743, _2744, _2745));
        float _4677 = isnan(0.0) ? _2750 : (isnan(_2750) ? 0.0 : max(_2750, 0.0));
        float _2753 = isnan(1.0) ? _4677 : (isnan(_4677) ? 1.0 : min(_4677, 1.0));
        float _2754 = dot(vec3(cbLight._m0[_2716].xyz), vec3(_2743, _2744, _2745));
        float _4688 = isnan(0.0) ? _2754 : (isnan(_2754) ? 0.0 : max(_2754, 0.0));
        float _2758 = _2735 * _2735;
        float _2762 = ((_2753 * _2753) * (_2758 + (-1.0))) + 1.0;
        float _2771 = (exp2(log2(1.0 - (isnan(1.0) ? _4688 : (isnan(_4688) ? 1.0 : min(_4688, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2772 = 1.0 - _2735;
        float _2782 = (0.5 / (((_2529 * ((_2749 * _2772) + _2735)) + 9.9999999392252902907785028219223e-09) + (((_2529 * _2772) + _2735) * _2749))) * _2749;
        float _4699 = isnan(0.0) ? _2782 : (isnan(_2782) ? 0.0 : max(_2782, 0.0));
        float _2784 = (isnan(1.0) ? _4699 : (isnan(_4699) ? 1.0 : min(_4699, 1.0))) * (_2758 / ((_2762 * _2762) * 3.141590118408203125));
        float _2785 = isnan(1.0) ? _2268 : (isnan(_2268) ? 1.0 : min(_2268, 1.0));
        _2710 = (((_2771 * cbLight._m0[_2720].x) * _2784) * _2785) + _2652;
        _2712 = (((_2771 * cbLight._m0[_2720].y) * _2784) * _2785) + _2653;
        _2714 = (((_2771 * cbLight._m0[_2720].z) * _2784) * _2785) + _2654;
    }
    float _2816;
    float _2818;
    float _2820;
    if (_2438)
    {
        _2816 = _2710;
        _2818 = _2712;
        _2820 = _2714;
    }
    else
    {
        uint _2827 = _2253 + 3u;
        uint _2831 = _2253 + 11u;
        float _2845 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2827].w)) * _809) * 0.949999988079071044921875);
        float _2846 = _2845 * _2845;
        float _2847 = cbLight._m0[_2827].x + _886;
        float _2848 = cbLight._m0[_2827].y + _887;
        float _2849 = cbLight._m0[_2827].z + _888;
        float _2853 = inversesqrt(dot(vec3(_2847, _2848, _2849), vec3(_2847, _2848, _2849)));
        float _2854 = _2853 * _2847;
        float _2855 = _2853 * _2848;
        float _2856 = _2853 * _2849;
        float _2857 = dot(vec3(_806, _807, _808), vec3(cbLight._m0[_2827].xyz));
        float _4715 = isnan(0.0) ? _2857 : (isnan(_2857) ? 0.0 : max(_2857, 0.0));
        float _2860 = isnan(1.0) ? _4715 : (isnan(_4715) ? 1.0 : min(_4715, 1.0));
        float _2861 = dot(vec3(_806, _807, _808), vec3(_2854, _2855, _2856));
        float _4726 = isnan(0.0) ? _2861 : (isnan(_2861) ? 0.0 : max(_2861, 0.0));
        float _2864 = isnan(1.0) ? _4726 : (isnan(_4726) ? 1.0 : min(_4726, 1.0));
        float _2865 = dot(vec3(cbLight._m0[_2827].xyz), vec3(_2854, _2855, _2856));
        float _4737 = isnan(0.0) ? _2865 : (isnan(_2865) ? 0.0 : max(_2865, 0.0));
        float _2869 = _2846 * _2846;
        float _2873 = ((_2864 * _2864) * (_2869 + (-1.0))) + 1.0;
        float _2882 = (exp2(log2(1.0 - (isnan(1.0) ? _4737 : (isnan(_4737) ? 1.0 : min(_4737, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2883 = 1.0 - _2846;
        float _2893 = (0.5 / (((_2529 * ((_2860 * _2883) + _2846)) + 9.9999999392252902907785028219223e-09) + (((_2529 * _2883) + _2846) * _2860))) * _2860;
        float _4748 = isnan(0.0) ? _2893 : (isnan(_2893) ? 0.0 : max(_2893, 0.0));
        float _2895 = (isnan(1.0) ? _4748 : (isnan(_4748) ? 1.0 : min(_4748, 1.0))) * (_2869 / ((_2873 * _2873) * 3.141590118408203125));
        float _2896 = isnan(1.0) ? _2269 : (isnan(_2269) ? 1.0 : min(_2269, 1.0));
        _2816 = (((_2882 * cbLight._m0[_2831].x) * _2895) * _2896) + _2710;
        _2818 = (((_2882 * cbLight._m0[_2831].y) * _2895) * _2896) + _2712;
        _2820 = (((_2882 * cbLight._m0[_2831].z) * _2895) * _2896) + _2714;
    }
    float _2962;
    float _2964;
    float _2966;
    float _2968;
    float _2970;
    float _2972;
    if (_2251.y == 0u)
    {
        uvec4 _2917 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2918 = _2917.x;
        uint _2929 = uint((float(_2917.y) * floor(float(uint(cbSceneParam._m0[85u].y * _895) / _2918))) + floor(float(uint(cbSceneParam._m0[85u].x * _894) / _2918)));
        float _2939 = (log2(_2029 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2940 = isnan(0.0) ? _2939 : (isnan(_2939) ? 0.0 : max(_2939, 0.0));
        uint _2943 = uint(isnan(14.0) ? _2940 : (isnan(_2940) ? 14.0 : min(_2940, 14.0)));
        uvec4 _2948 = texelFetch(g_lightClusterGridBuffer, int(((_2943 << 2u) + (_2929 << 6u)) >> 2u));
        uint _2949 = _2948.x;
        uint _2950 = _2917.z;
        float _3029;
        float _3031;
        float _3033;
        float _3035;
        float _3037;
        float _3039;
        if (((((1u << ((_2950 >> 4u) & 15u)) + 4294967295u) & _2949) == 0u) || ((_2950 & 240u) == 0u))
        {
            _3029 = 0.0;
            _3031 = 0.0;
            _3033 = 0.0;
            _3035 = 0.0;
            _3037 = 0.0;
            _3039 = 0.0;
        }
        else
        {
            float _3030;
            float _3032;
            float _3034;
            float _3036;
            float _3038;
            float _3040;
            float _3174 = 0.0;
            float _3175 = 0.0;
            float _3176 = 0.0;
            float _3177 = 0.0;
            float _3178 = 0.0;
            float _3179 = 0.0;
            uint _3180 = 0u;
            uint _3189;
            bool _3190;
            for (;;)
            {
                _3189 = texelFetch(g_lightClassification, int((((_2943 << 5u) + (_2929 << 9u)) + (_3180 << 2u)) >> 2u)).x;
                _3190 = _3189 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3190)
                {
                    frontier_phi_66_pred = _3179;
                    frontier_phi_66_pred_1 = _3178;
                    frontier_phi_66_pred_2 = _3177;
                    frontier_phi_66_pred_3 = _3176;
                    frontier_phi_66_pred_4 = _3175;
                    frontier_phi_66_pred_5 = _3174;
                }
                else
                {
                    float _3298;
                    float _3299;
                    float _3300;
                    float _3301;
                    float _3302;
                    float _3303;
                    uint _3304;
                    _3298 = _3174;
                    _3299 = _3175;
                    _3300 = _3176;
                    _3301 = _3177;
                    _3302 = _3178;
                    _3303 = _3179;
                    _3304 = _3189;
                    float _3230;
                    float _3231;
                    float _3232;
                    float _3233;
                    float _3234;
                    float _3235;
                    for (;;)
                    {
                        uint _3308 = uint(findLSB(_3304)) + (_3180 << 5u);
                        uint _3305 = (_3304 + 4294967295u) & _3304;
                        uint _3310 = _3308 * 48u;
                        vec4 _3324 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3310)).x, texelFetch(g_PointLightRenderingBuffer, int(_3310 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3310 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3310 + 3u)).x));
                        uint _3330 = (_3308 * 48u) + 4u;
                        vec4 _3343 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3330)).x, texelFetch(g_PointLightRenderingBuffer, int(_3330 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3330 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3330 + 3u)).x));
                        uint _3349 = (_3308 * 48u) + 8u;
                        vec3 _3360 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3349)).x, texelFetch(g_PointLightRenderingBuffer, int(_3349 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3349 + 2u)).x));
                        float _3364 = _3324.x - _2027;
                        float _3365 = _3324.y - _2028;
                        float _3366 = _3324.z - _2029;
                        float _3367 = dot(vec3(_3364, _3365, _3366), vec3(_3364, _3365, _3366));
                        float _3370 = inversesqrt(_3367);
                        float _3371 = _3370 * _3364;
                        float _3372 = _3370 * _3365;
                        float _3373 = _3370 * _3366;
                        float _3374 = dot(vec3(_913, _916, _919), vec3(_3371, _3372, _3373));
                        float _3379 = 1.0 - (_3367 * _3324.w);
                        float _4774 = isnan(0.0) ? _3379 : (isnan(_3379) ? 0.0 : max(_3379, 0.0));
                        float _3380 = isnan(1.0) ? _4774 : (isnan(_4774) ? 1.0 : min(_4774, 1.0));
                        float _3381 = sqrt(_3367) * _3343.w;
                        float _3384 = 1.39999997615814208984375 / (_3381 + 1.39999997615814208984375);
                        float _3385 = _3384 * _3384;
                        float _3388 = ((1.0 - _3385) * _3374) + _3385;
                        float _3391 = _3381 * _3381;
                        float _3395 = ((isnan(0.0) ? _3388 : (isnan(_3388) ? 0.0 : max(_3388, 0.0))) * _3380) / ((_3391 * 0.699999988079071044921875) + 1.0);
                        float _3399 = (-0.0) - _2027;
                        float _3400 = (-0.0) - _2028;
                        float _3401 = (-0.0) - _2029;
                        float _3405 = inversesqrt(dot(vec3(_3399, _3400, _3401), vec3(_3399, _3400, _3401)));
                        float _3406 = _3405 * _3399;
                        float _3407 = _3405 * _3400;
                        float _3408 = _3405 * _3401;
                        float _3415 = exp2(log2(1.0 / ((_3391 * 3.5) + 5.0)) * 0.25);
                        float _3416 = 1.0 - _973;
                        float _3423 = sqrt(1.0 - ((1.0 - (_3416 * _3416)) * (1.0 - (_3415 * _3415))));
                        float _3424 = _3423 * _3423;
                        float _3425 = _3424 * _3424;
                        float _3426 = _3406 + _3371;
                        float _3427 = _3407 + _3372;
                        float _3428 = _3408 + _3373;
                        float _3432 = inversesqrt(dot(vec3(_3426, _3427, _3428), vec3(_3426, _3427, _3428)));
                        float _3436 = dot(vec3(_913, _916, _919), vec3(_3406, _3407, _3408));
                        float _4790 = isnan(0.0) ? _3436 : (isnan(_3436) ? 0.0 : max(_3436, 0.0));
                        float _3439 = isnan(1.0) ? _4790 : (isnan(_4790) ? 1.0 : min(_4790, 1.0));
                        float _3440 = dot(vec3(_913, _916, _919), vec3(_3432 * _3426, _3432 * _3427, _3432 * _3428));
                        float _4801 = isnan(0.0) ? _3440 : (isnan(_3440) ? 0.0 : max(_3440, 0.0));
                        float _3443 = isnan(1.0) ? _4801 : (isnan(_4801) ? 1.0 : min(_4801, 1.0));
                        float _3447 = ((_3443 * _3443) * (_3425 + (-1.0))) + 1.0;
                        float _3448 = _3384 * _3424;
                        float _3449 = _3448 * _3448;
                        float _3452 = ((1.0 - _3449) * _3374) + _3449;
                        float _4812 = isnan(0.0) ? _3452 : (isnan(_3452) ? 0.0 : max(_3452, 0.0));
                        float _3453 = isnan(1.0) ? _4812 : (isnan(_4812) ? 1.0 : min(_4812, 1.0));
                        float _3454 = 1.0 - _3424;
                        float _3464 = (0.5 / (((_3453 * ((_3439 * _3454) + _3424)) + 9.9999999392252902907785028219223e-09) + (((_3453 * _3454) + _3424) * _3439))) * _3453;
                        float _4823 = isnan(0.0) ? _3464 : (isnan(_3464) ? 0.0 : max(_3464, 0.0));
                        float _3475 = (((_3425 * 3.1415927410125732421875) * (isnan(1.0) ? _4823 : (isnan(_4823) ? 1.0 : min(_4823, 1.0)))) / ((_3447 * _3447) * ((_3391 * 2.1991131305694580078125) + 3.141590118408203125))) * _3380;
                        _3233 = (_3395 * _3343.x) + _3301;
                        _3234 = (_3395 * _3343.y) + _3302;
                        _3235 = (_3395 * _3343.z) + _3303;
                        _3230 = (_3475 * _3360.x) + _3298;
                        _3231 = (_3475 * _3360.y) + _3299;
                        _3232 = (_3475 * _3360.z) + _3300;
                        if (_3305 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3298 = _3230;
                            _3299 = _3231;
                            _3300 = _3232;
                            _3301 = _3233;
                            _3302 = _3234;
                            _3303 = _3235;
                            _3304 = _3305;
                        }
                    }
                    frontier_phi_66_pred = _3235;
                    frontier_phi_66_pred_1 = _3234;
                    frontier_phi_66_pred_2 = _3233;
                    frontier_phi_66_pred_3 = _3232;
                    frontier_phi_66_pred_4 = _3231;
                    frontier_phi_66_pred_5 = _3230;
                }
                _3040 = frontier_phi_66_pred;
                _3038 = frontier_phi_66_pred_1;
                _3036 = frontier_phi_66_pred_2;
                _3034 = frontier_phi_66_pred_3;
                _3032 = frontier_phi_66_pred_4;
                _3030 = frontier_phi_66_pred_5;
                uint _3181 = _3180 + 1u;
                if (_3181 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3174 = _3030;
                    _3175 = _3032;
                    _3176 = _3034;
                    _3177 = _3036;
                    _3178 = _3038;
                    _3179 = _3040;
                    _3180 = _3181;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3029 = _3030;
            _3031 = _3032;
            _3033 = _3034;
            _3035 = _3036;
            _3037 = _3038;
            _3039 = _3040;
        }
        uvec4 _3043 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3044 = _3043.z;
        uint _3046 = (_3044 >> 8u) & 15u;
        float _3142;
        float _3144;
        float _3146;
        float _3148;
        float _3150;
        float _3152;
        if (((4294967295u << _3046) & _2949) == 0u)
        {
            _3142 = _3029;
            _3144 = _3031;
            _3146 = _3033;
            _3148 = _3035;
            _3150 = _3037;
            _3152 = _3039;
        }
        else
        {
            float _3167 = inversesqrt(dot(vec3(_2027, _2028, _2029), vec3(_2027, _2028, _2029)));
            float _3168 = _3167 * _2027;
            float _3169 = _3167 * _2028;
            float _3170 = _3167 * _2029;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_3046 < ((_3044 >> 12u) & 15u))
            {
                float _3143;
                float _3145;
                float _3147;
                float _3149;
                float _3151;
                float _3153;
                float _3281 = _3029;
                float _3282 = _3031;
                float _3283 = _3033;
                float _3284 = _3035;
                float _3285 = _3037;
                float _3286 = _3039;
                uint _3287 = _3046;
                uint _3296;
                bool _3297;
                for (;;)
                {
                    _3296 = texelFetch(g_lightClassification, int((((_2943 << 5u) + (_2929 << 9u)) + (_3287 << 2u)) >> 2u)).x;
                    _3297 = _3296 == 0u;
                    float frontier_phi_72_pred;
                    float frontier_phi_72_pred_1;
                    float frontier_phi_72_pred_2;
                    float frontier_phi_72_pred_3;
                    float frontier_phi_72_pred_4;
                    float frontier_phi_72_pred_5;
                    if (_3297)
                    {
                        frontier_phi_72_pred = _3286;
                        frontier_phi_72_pred_1 = _3285;
                        frontier_phi_72_pred_2 = _3284;
                        frontier_phi_72_pred_3 = _3283;
                        frontier_phi_72_pred_4 = _3282;
                        frontier_phi_72_pred_5 = _3281;
                    }
                    else
                    {
                        float _3480;
                        float _3481;
                        float _3482;
                        float _3483;
                        float _3484;
                        float _3485;
                        float _3773;
                        float _3774;
                        float _3775;
                        float _3776;
                        float _3777;
                        float _3778;
                        float _3493 = _3281;
                        float _3494 = _3282;
                        float _3495 = _3283;
                        float _3496 = _3284;
                        float _3497 = _3285;
                        float _3498 = _3286;
                        uint _3499 = _3296;
                        uint _3500;
                        vec4 _3525;
                        float _3526;
                        vec4 _3541;
                        vec3 _3553;
                        vec4 _3568;
                        vec4 _3583;
                        float _3629;
                        bool _3630;
                        for (;;)
                        {
                            uint _3510 = ((_3287 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3499));
                            _3500 = (_3499 + 4294967295u) & _3499;
                            uint _3512 = _3510 * 40u;
                            _3525 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3512)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3512 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3512 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3512 + 3u)).x));
                            _3526 = _3525.w;
                            uint _3528 = (_3510 * 40u) + 4u;
                            _3541 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3528)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3528 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3528 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3528 + 3u)).x));
                            uint _3543 = (_3510 * 40u) + 8u;
                            _3553 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3543)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3543 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3543 + 2u)).x));
                            uint _3555 = (_3510 * 40u) + 16u;
                            _3568 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3555)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3555 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3555 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3555 + 3u)).x));
                            uint _3570 = (_3510 * 40u) + 20u;
                            _3583 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3570)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3570 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3570 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3570 + 3u)).x));
                            uint _3585 = (_3510 * 40u) + 24u;
                            vec4 _3598 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3585)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3585 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3585 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3585 + 3u)).x));
                            uint _3604 = (_3510 * 40u) + 28u;
                            vec4 _3617 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3604)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3604 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3604 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3604 + 3u)).x));
                            _3629 = fma(_2029, _3617.z, fma(_2028, _3617.y, _3617.x * _2027)) + _3617.w;
                            _3630 = !((fma(_2029, _3598.z, fma(_2028, _3598.y, _3598.x * _2027)) + _3598.w) <= 0.0);
                            float frontier_phi_78_pred;
                            float frontier_phi_78_pred_1;
                            float frontier_phi_78_pred_2;
                            float frontier_phi_78_pred_3;
                            float frontier_phi_78_pred_4;
                            float frontier_phi_78_pred_5;
                            if (_3630)
                            {
                                float _3657 = _3525.x - _2027;
                                float _3658 = _3525.y - _2028;
                                float _3659 = _3525.z - _2029;
                                float _3660 = dot(vec3(_3657, _3658, _3659), vec3(_3657, _3658, _3659));
                                float _3663 = inversesqrt(_3660);
                                float _3664 = _3663 * _3657;
                                float _3665 = _3663 * _3658;
                                float _3666 = _3663 * _3659;
                                float _3670 = 1.0 - (_3660 / (_3526 * _3526));
                                float _4834 = isnan(0.0) ? _3670 : (isnan(_3670) ? 0.0 : max(_3670, 0.0));
                                float _3671 = isnan(1.0) ? _4834 : (isnan(_4834) ? 1.0 : min(_4834, 1.0));
                                float _3675 = sqrt(_3660) * _3541.w;
                                float _3677 = 1.39999997615814208984375 / (_3675 + 1.39999997615814208984375);
                                float _3678 = _3677 * _3677;
                                float _3681 = ((1.0 - _3678) * dot(vec3(_3664, _3665, _3666), vec3(_913, _916, _919))) + _3678;
                                float _3684 = _3675 * _3675;
                                float _3688 = (fma(_2029, _3568.z, fma(_2028, _3568.y, _3568.x * _2027)) + _3568.w) / _3629;
                                float _3689 = (fma(_2029, _3583.z, fma(_2028, _3583.y, _3583.x * _2027)) + _3583.w) / _3629;
                                float _3693 = 1.0 - dot(vec2(_3688, _3689), vec2(_3688, _3689));
                                float _4850 = isnan(0.0) ? _3693 : (isnan(_3693) ? 0.0 : max(_3693, 0.0));
                                float _3694 = isnan(1.0) ? _4850 : (isnan(_4850) ? 1.0 : min(_4850, 1.0));
                                float _3695 = _3694 * (((isnan(0.0) ? _3681 : (isnan(_3681) ? 0.0 : max(_3681, 0.0))) * _3671) / ((_3684 * 0.699999988079071044921875) + 1.0));
                                float _3707 = exp2(log2(1.0 / ((_3684 * 3.5) + 5.0)) * 0.25);
                                float _3708 = 1.0 - _973;
                                float _3715 = sqrt(1.0 - ((1.0 - (_3708 * _3708)) * (1.0 - (_3707 * _3707))));
                                float _3716 = _3715 * _3715;
                                float _3717 = _3716 * _3716;
                                float _3718 = _3664 - _3168;
                                float _3719 = _3665 - _3169;
                                float _3720 = _3666 - _3170;
                                float _3724 = inversesqrt(dot(vec3(_3718, _3719, _3720), vec3(_3718, _3719, _3720)));
                                float _3728 = dot(vec3(_913, _916, _919), vec3((-0.0) - _3168, (-0.0) - _3169, (-0.0) - _3170));
                                float _4861 = isnan(0.0) ? _3728 : (isnan(_3728) ? 0.0 : max(_3728, 0.0));
                                float _3731 = isnan(1.0) ? _4861 : (isnan(_4861) ? 1.0 : min(_4861, 1.0));
                                float _3732 = dot(vec3(_913, _916, _919), vec3(_3724 * _3718, _3724 * _3719, _3724 * _3720));
                                float _4872 = isnan(0.0) ? _3732 : (isnan(_3732) ? 0.0 : max(_3732, 0.0));
                                float _3735 = isnan(1.0) ? _4872 : (isnan(_4872) ? 1.0 : min(_4872, 1.0));
                                float _3739 = ((_3735 * _3735) * (_3717 + (-1.0))) + 1.0;
                                float _3740 = _3677 * _3716;
                                float _3741 = _3740 * _3740;
                                float _3747 = ((1.0 - _3741) * dot(vec3(_913, _916, _919), vec3(_3664, _3665, _3666))) + _3741;
                                float _4883 = isnan(0.0) ? _3747 : (isnan(_3747) ? 0.0 : max(_3747, 0.0));
                                float _3748 = isnan(1.0) ? _4883 : (isnan(_4883) ? 1.0 : min(_4883, 1.0));
                                float _3749 = 1.0 - _3716;
                                float _3759 = (0.5 / (((_3748 * ((_3731 * _3749) + _3716)) + 9.9999999392252902907785028219223e-09) + (((_3748 * _3749) + _3716) * _3731))) * _3748;
                                float _4894 = isnan(0.0) ? _3759 : (isnan(_3759) ? 0.0 : max(_3759, 0.0));
                                float _3769 = (_3694 * _3671) * (((_3717 * 3.1415927410125732421875) * (isnan(1.0) ? _4894 : (isnan(_4894) ? 1.0 : min(_4894, 1.0)))) / ((_3739 * _3739) * ((_3684 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_78_pred = _3695 * _3541.y;
                                frontier_phi_78_pred_1 = _3695 * _3541.x;
                                frontier_phi_78_pred_2 = _3769 * _3553.z;
                                frontier_phi_78_pred_3 = _3769 * _3553.y;
                                frontier_phi_78_pred_4 = _3769 * _3553.x;
                                frontier_phi_78_pred_5 = _3695 * _3541.z;
                            }
                            else
                            {
                                frontier_phi_78_pred = 0.0;
                                frontier_phi_78_pred_1 = 0.0;
                                frontier_phi_78_pred_2 = 0.0;
                                frontier_phi_78_pred_3 = 0.0;
                                frontier_phi_78_pred_4 = 0.0;
                                frontier_phi_78_pred_5 = 0.0;
                            }
                            _3777 = frontier_phi_78_pred;
                            _3776 = frontier_phi_78_pred_1;
                            _3775 = frontier_phi_78_pred_2;
                            _3774 = frontier_phi_78_pred_3;
                            _3773 = frontier_phi_78_pred_4;
                            _3778 = frontier_phi_78_pred_5;
                            _3483 = _3776 + _3496;
                            _3484 = _3777 + _3497;
                            _3485 = _3778 + _3498;
                            _3480 = _3773 + _3493;
                            _3481 = _3774 + _3494;
                            _3482 = _3775 + _3495;
                            if (_3500 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3493 = _3480;
                                _3494 = _3481;
                                _3495 = _3482;
                                _3496 = _3483;
                                _3497 = _3484;
                                _3498 = _3485;
                                _3499 = _3500;
                                continue;
                            }
                        }
                        frontier_phi_72_pred = _3485;
                        frontier_phi_72_pred_1 = _3484;
                        frontier_phi_72_pred_2 = _3483;
                        frontier_phi_72_pred_3 = _3482;
                        frontier_phi_72_pred_4 = _3481;
                        frontier_phi_72_pred_5 = _3480;
                    }
                    _3153 = frontier_phi_72_pred;
                    _3151 = frontier_phi_72_pred_1;
                    _3149 = frontier_phi_72_pred_2;
                    _3147 = frontier_phi_72_pred_3;
                    _3145 = frontier_phi_72_pred_4;
                    _3143 = frontier_phi_72_pred_5;
                    uint _3288 = _3287 + 1u;
                    if (_3288 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3281 = _3143;
                        _3282 = _3145;
                        _3283 = _3147;
                        _3284 = _3149;
                        _3285 = _3151;
                        _3286 = _3153;
                        _3287 = _3288;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _3153;
                frontier_phi_60_61_ladder_1 = _3151;
                frontier_phi_60_61_ladder_2 = _3147;
                frontier_phi_60_61_ladder_3 = _3145;
                frontier_phi_60_61_ladder_4 = _3143;
                frontier_phi_60_61_ladder_5 = _3149;
            }
            else
            {
                frontier_phi_60_61_ladder = _3039;
                frontier_phi_60_61_ladder_1 = _3037;
                frontier_phi_60_61_ladder_2 = _3033;
                frontier_phi_60_61_ladder_3 = _3031;
                frontier_phi_60_61_ladder_4 = _3029;
                frontier_phi_60_61_ladder_5 = _3035;
            }
            _3142 = frontier_phi_60_61_ladder_4;
            _3144 = frontier_phi_60_61_ladder_3;
            _3146 = frontier_phi_60_61_ladder_2;
            _3148 = frontier_phi_60_61_ladder_5;
            _3150 = frontier_phi_60_61_ladder_1;
            _3152 = frontier_phi_60_61_ladder;
        }
        float _3157 = isnan(1.0) ? _957 : (isnan(_957) ? 1.0 : min(_957, 1.0));
        _2962 = (_3157 * _3148) + _2493;
        _2964 = (_3157 * _3150) + _2495;
        _2966 = (_3157 * _3152) + _2497;
        _2968 = ((_3142 * 0.039999999105930328369140625) * _3157) + _2816;
        _2970 = ((_3144 * 0.039999999105930328369140625) * _3157) + _2818;
        _2972 = ((_3146 * 0.039999999105930328369140625) * _3157) + _2820;
    }
    else
    {
        _2962 = _2493;
        _2964 = _2495;
        _2966 = _2497;
        _2968 = _2816;
        _2970 = _2818;
        _2972 = _2820;
    }
    float _4910 = isnan(0.0) ? _942 : (isnan(_942) ? 0.0 : max(_942, 0.0));
    float _4921 = isnan(0.0) ? _943 : (isnan(_943) ? 0.0 : max(_943, 0.0));
    float _4932 = isnan(0.0) ? _944 : (isnan(_944) ? 0.0 : max(_944, 0.0));
    uint _2992 = _270 + 6u;
    float _3000 = _894 / cbSceneParam._m0[86u].x;
    float _3001 = _895 / cbSceneParam._m0[86u].y;
    vec4 _3015 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3000, _3001, (log2((isnan(cbSceneParam._m0[77u].w) ? _827 : (isnan(_827) ? cbSceneParam._m0[77u].w : min(_827, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3017 = _3015.x;
    float _3018 = _3015.y;
    float _3019 = _3015.z;
    float _3020 = _3015.w;
    float _3092;
    float _3094;
    float _3096;
    float _3098;
    if (_827 > cbSceneParam._m0[78u].w)
    {
        float _3054 = isnan(_827) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _827 : min(cbSceneParam._m0[80u].w, _827));
        float _3055 = _3054 / _827;
        float _3066 = _3055 * _879;
        float _3067 = _880 * _3055;
        float _3068 = (-0.0) - _3067;
        float _3070 = _3055 * _881;
        float _3072 = (cbSceneParam._m0[77u].w * _3068) / _3054;
        float _3073 = _3072 + cbSceneParam._m0[79u].w;
        float _3074 = cbSceneParam._m0[79u].w - _3067;
        float _3080 = sqrt(((_3066 * _3066) + (_3067 * _3067)) + (_3070 * _3070));
        float _3083 = (1.0 - (cbSceneParam._m0[77u].w / _3054)) * _3080;
        float _3088 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3090 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3243;
        if (abs((_3068 - _3072) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3243 = ((((_3073 > 0.0) ? exp2(_3088 * _3073) : (2.0 - exp2(_3090 * _3073))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3083;
        }
        else
        {
            float _3203 = 1.0 / cbSceneParam._m0[80u].x;
            float _3204 = isnan(_3074) ? _3073 : (isnan(_3073) ? _3074 : max(_3073, _3074));
            float _3205 = isnan(_3074) ? _3073 : (isnan(_3073) ? _3074 : min(_3073, _3074));
            float _3214 = isnan(0.0) ? _3204 : (isnan(_3204) ? 0.0 : min(_3204, 0.0));
            float _3215 = isnan(0.0) ? _3205 : (isnan(_3205) ? 0.0 : min(_3205, 0.0));
            _3243 = ((abs(_3080 / _3068) * cbSceneParam._m0[80u].y) * ((((_3214 - _3215) * 2.0) - ((exp2(_3088 * (isnan(0.0) ? _3204 : (isnan(_3204) ? 0.0 : max(_3204, 0.0)))) - exp2(_3088 * (isnan(0.0) ? _3205 : (isnan(_3205) ? 0.0 : max(_3205, 0.0))))) * _3203)) - ((exp2(_3090 * _3214) - exp2(_3090 * _3215)) * _3203))) + (_3083 * cbSceneParam._m0[80u].z);
        }
        vec4 _3245 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3000, _3001, 1.0), 0.0);
        float _3254 = exp2((_3243 * (-1.44269502162933349609375)) * (1.0 - _3245.w));
        float _3255 = log2(_3254);
        float _3271 = log2(_3020);
        _3092 = (exp2(_3271 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3255 * cbSceneParam._m0[78u].x)) * _3245.x) / cbSceneParam._m0[78u].x)) + _3017;
        _3094 = (exp2(_3271 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3255 * cbSceneParam._m0[78u].y)) * _3245.y) / cbSceneParam._m0[78u].y)) + _3018;
        _3096 = (exp2(_3271 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3255 * cbSceneParam._m0[78u].z)) * _3245.z) / cbSceneParam._m0[78u].z)) + _3019;
        _3098 = _3254 * _3020;
    }
    else
    {
        _3092 = _3017;
        _3094 = _3018;
        _3096 = _3019;
        _3098 = _3020;
    }
    float _3110 = roundEven(cbMatDynParam._m0[0u].y);
    bool _3111 = _3110 == 3.0;
    float _3112 = log2(_3098);
    float _3119 = exp2(_3112 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4910 : (isnan(_4910) ? 1.0 : min(_4910, 1.0))) * (_2962 + ((isnan(0.0) ? _1682 : (isnan(_1682) ? 0.0 : max(_1682, 0.0))) * _957))) + ((_2968 + ((isnan(0.0) ? _1974 : (isnan(_1974) ? 0.0 : max(_1974, 0.0))) * _1761)) * cbPerFrame._m0[3u].x));
    float _3120 = exp2(_3112 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4921 : (isnan(_4921) ? 1.0 : min(_4921, 1.0))) * (_2964 + ((isnan(0.0) ? _1685 : (isnan(_1685) ? 0.0 : max(_1685, 0.0))) * _957))) + ((_2970 + ((isnan(0.0) ? _1977 : (isnan(_1977) ? 0.0 : max(_1977, 0.0))) * _1761)) * cbPerFrame._m0[3u].x));
    float _3121 = exp2(_3112 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4932 : (isnan(_4932) ? 1.0 : min(_4932, 1.0))) * (_2966 + ((isnan(0.0) ? _1688 : (isnan(_1688) ? 0.0 : max(_1688, 0.0))) * _957))) + ((_2972 + ((isnan(0.0) ? _1980 : (isnan(_1980) ? 0.0 : max(_1980, 0.0))) * _1761)) * cbPerFrame._m0[3u].x));
    float _3130 = (_3110 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _3130 * (_3111 ? _3119 : (_3119 + (cbSceneParam._m0[72u].w * _3092)));
    SV_Target.y = _3130 * (_3111 ? _3120 : (_3120 + (cbSceneParam._m0[72u].w * _3094)));
    SV_Target.z = _3130 * (_3111 ? _3121 : (_3121 + (cbSceneParam._m0[72u].w * _3096)));
    SV_Target.w = cbInstanceData._m0[_2992].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2992].w;
}


