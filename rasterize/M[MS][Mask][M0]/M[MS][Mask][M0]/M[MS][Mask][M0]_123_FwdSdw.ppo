#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 13) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_22;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_10;
layout(set = 0, binding = 20) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_6;
layout(set = 0, binding = 23) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_8;
layout(set = 0, binding = 24) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_9;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1433;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _227 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _228 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _229 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _235 = inversesqrt(dot(vec3(_227, _228, _229), vec3(_227, _228, _229)));
    float _236 = _235 * _227;
    float _237 = _235 * _228;
    float _238 = _235 * _229;
    float _242 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _243 = _242 * NORMAL.x;
    float _244 = _242 * NORMAL.y;
    float _245 = _242 * NORMAL.z;
    float _249 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _250 = _249 * TANGENT.x;
    float _251 = _249 * TANGENT.y;
    float _252 = _249 * TANGENT.z;
    float _263 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _265 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _266 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _4019 = isnan(0.0) ? _263 : (isnan(_263) ? 0.0 : max(_263, 0.0));
    float _4030 = isnan(0.0) ? _265 : (isnan(_265) ? 0.0 : max(_265, 0.0));
    float _4041 = isnan(0.0) ? _266 : (isnan(_266) ? 0.0 : max(_266, 0.0));
    uint _276 = uint(roundEven(NORMAL.w)) * 13u;
    uint _281 = _276 + 1u;
    uint _285 = _276 + 2u;
    float _294 = sqrt(((cbInstanceData._m0[_281].x * cbInstanceData._m0[_281].x) + (cbInstanceData._m0[_276].x * cbInstanceData._m0[_276].x)) + (cbInstanceData._m0[_285].x * cbInstanceData._m0[_285].x));
    float _295 = _294 * TEXCOORD.z;
    float _296 = _294 * TEXCOORD.w;
    vec4 _309 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _295) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _296) + cbTextureTilingScale._m0[13u].w));
    vec4 _333 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _338 = _333.x * cbMtdParam._m0[11u].x;
    float _339 = _333.y * cbMtdParam._m0[11u].y;
    float _340 = _333.z * cbMtdParam._m0[11u].z;
    vec4 _359 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _295) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _296) + cbTextureTilingScale._m0[5u].w));
    vec4 _378 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _416 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _418 = _416.x;
    float _430 = dot(vec4(_418, _416.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _447 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _378.x) * 2.0) - ((((_418 - _430) * cbMtdParam._m0[24u].z) + _430) * cbMtdParam._m0[23u].x))) + 1.0;
    float _4052 = isnan(0.0) ? _447 : (isnan(_447) ? 0.0 : max(_447, 0.0));
    float _448 = isnan(1.0) ? _4052 : (isnan(_4052) ? 1.0 : min(_4052, 1.0));
    float _455 = (_448 * ((_359.x * cbMtdParam._m0[12u].x) - _338)) + _338;
    float _456 = (_448 * ((_359.y * cbMtdParam._m0[12u].y) - _339)) + _339;
    float _457 = (_448 * ((_359.z * cbMtdParam._m0[12u].z) - _340)) + _340;
    vec4 _474 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _295) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _296) + cbTextureTilingScale._m0[3u].w));
    vec4 _494 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _496 = _494.x;
    float _506 = dot(vec4(_496, _494.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _520 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _378.y) * 2.0) - ((((_496 - _506) * cbMtdParam._m0[24u].z) + _506) * cbMtdParam._m0[20u].w))) + 1.0;
    float _4063 = isnan(0.0) ? _520 : (isnan(_520) ? 0.0 : max(_520, 0.0));
    float _521 = isnan(1.0) ? _4063 : (isnan(_4063) ? 1.0 : min(_4063, 1.0));
    float _528 = (_521 * ((_474.x * cbMtdParam._m0[13u].x) - _455)) + _455;
    float _529 = (_521 * ((_474.y * cbMtdParam._m0[13u].y) - _456)) + _456;
    float _530 = (_521 * ((_474.z * cbMtdParam._m0[13u].z) - _457)) + _457;
    vec4 _548 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_9, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[24u].x * _295) + cbTextureTilingScale._m0[24u].z, (cbTextureTilingScale._m0[24u].y * _296) + cbTextureTilingScale._m0[24u].w));
    vec4 _565 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[25u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _567 = _565.x;
    float _577 = dot(vec4(_567, _565.yzw), vec4(cbMtdParam._m0[30u].w, cbMtdParam._m0[31u].xy, 0.0));
    float _589 = ((cbMtdParam._m0[25u].x * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.z) - _378.z) * 2.0) - ((((_567 - _577) * cbMtdParam._m0[24u].z) + _577) * cbMtdParam._m0[20u].z))) + 1.0;
    float _4074 = isnan(0.0) ? _589 : (isnan(_589) ? 0.0 : max(_589, 0.0));
    float _590 = isnan(1.0) ? _4074 : (isnan(_4074) ? 1.0 : min(_4074, 1.0));
    float _597 = (_590 * ((_548.x * cbMtdParam._m0[14u].x) - _528)) + _528;
    float _598 = (_590 * ((_548.y * cbMtdParam._m0[14u].y) - _529)) + _529;
    float _599 = (_590 * ((_548.z * cbMtdParam._m0[14u].z) - _530)) + _530;
    float _603 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _309.x) * _597;
    float _606 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _309.y) * _598;
    float _609 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _309.z) * _599;
    float _616 = ((_597 - _603) * (isnan(1.0) ? _4019 : (isnan(_4019) ? 1.0 : min(_4019, 1.0)))) + _603;
    float _617 = ((_598 - _606) * (isnan(1.0) ? _4030 : (isnan(_4030) ? 1.0 : min(_4030, 1.0)))) + _606;
    float _618 = ((_599 - _609) * (isnan(1.0) ? _4041 : (isnan(_4041) ? 1.0 : min(_4041, 1.0)))) + _609;
    vec4 _635 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _295) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _296) + cbTextureTilingScale._m0[20u].w));
    vec4 _660 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _295) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _296) + cbTextureTilingScale._m0[4u].w));
    vec4 _677 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _679 = _677.x;
    float _680 = _677.y;
    float _681 = _677.z;
    float _688 = ((_660.x - _679) * _448) + _679;
    float _689 = ((_660.y - _680) * _448) + _680;
    float _690 = ((_660.z - _681) * _448) + _681;
    vec4 _702 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _295) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _296) + cbTextureTilingScale._m0[2u].w));
    float _713 = ((_702.x - _688) * _521) + _688;
    float _714 = ((_702.y - _689) * _521) + _689;
    float _715 = ((_702.z - _690) * _521) + _690;
    vec4 _727 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[23u].x * _295) + cbTextureTilingScale._m0[23u].z, (cbTextureTilingScale._m0[23u].y * _296) + cbTextureTilingScale._m0[23u].w));
    float _740 = ((_727.z - _715) * _590) + _715;
    float _743 = ((((_727.x - _713) * _590) + _713) * 2.0) + (-1.0);
    float _744 = ((((_727.y - _714) * _590) + _714) * 2.0) + (-1.0);
    float _745 = dot(vec2(_743, _744), vec2(_743, _744));
    float _4085 = isnan(0.0) ? _745 : (isnan(_745) ? 0.0 : max(_745, 0.0));
    float _750 = sqrt(1.0 - (isnan(1.0) ? _4085 : (isnan(_4085) ? 1.0 : min(_4085, 1.0))));
    vec4 _768 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _780 = (_743 + ((((_635.x * 2.0) + (-1.0)) * TEXCOORD_11.x) * cbMtdParam._m0[20u].x)) + (((_768.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _781 = (_744 + ((((_635.y * 2.0) + (-1.0)) * TEXCOORD_11.y) * cbMtdParam._m0[20u].x)) + (((_768.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _784 = fma(_750, _243, fma(_781, _250, _780 * _236));
    float _787 = fma(_750, _244, fma(_781, _251, _780 * _237));
    float _790 = fma(_750, _245, fma(_781, _252, _780 * _238));
    float _794 = inversesqrt(dot(vec3(_784, _787, _790), vec3(_784, _787, _790)));
    vec4 _821 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _295) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _296) + cbTextureTilingScale._m0[11u].w));
    float _823 = _821.x;
    float _824 = 1.0 - _823;
    float _830 = (cbMtdParam._m0[19u].x + dot(vec4(_794 * _784, _794 * _787, _794 * _790, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_823 - _824) * cbMtdParam._m0[24u].w) + _824) * cbMtdParam._m0[21u].z);
    float _4096 = isnan(0.0) ? _830 : (isnan(_830) ? 0.0 : max(_830, 0.0));
    float _831 = isnan(1.0) ? _4096 : (isnan(_4096) ? 1.0 : min(_4096, 1.0));
    float _838 = (_831 * (cbMtdParam._m0[17u].x - _616)) + _616;
    float _839 = (_831 * (cbMtdParam._m0[17u].y - _617)) + _617;
    float _840 = (_831 * (cbMtdParam._m0[17u].z - _618)) + _618;
    float _845 = (((_635.z - _740) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _740;
    float _849 = ((_768.z - _845) * cbMtdParam._m0[19u].w) + _845;
    vec4 _862 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _295) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _296) + cbTextureTilingScale._m0[15u].w));
    float _869 = (_862.x * 2.0) + (-1.0);
    float _870 = (_862.y * 2.0) + (-1.0);
    float _871 = dot(vec2(_869, _870), vec2(_869, _870));
    float _4107 = isnan(0.0) ? _871 : (isnan(_871) ? 0.0 : max(_871, 0.0));
    float _879 = ((_862.z - _849) * _831) + _849;
    float _889 = ((sqrt(1.0 - (isnan(1.0) ? _4107 : (isnan(_4107) ? 1.0 : min(_4107, 1.0)))) - _750) * _831) + _750;
    float _892 = (((_869 - _780) * _831) + _780) + (cbMtdParam._m0[21u].x * _780);
    float _893 = (((_870 - _781) * _831) + _781) + (cbMtdParam._m0[21u].x * _781);
    float _897 = cbMtdParam._m0[22u].x + _768.w;
    float _900 = fma(_889, _243, fma(_893, _250, _892 * _236));
    float _903 = fma(_889, _244, fma(_893, _251, _892 * _237));
    float _906 = fma(_889, _245, fma(_893, _252, _892 * _238));
    float _910 = inversesqrt(dot(vec3(_900, _903, _906), vec3(_900, _903, _906)));
    float _911 = _910 * _900;
    float _912 = _910 * _903;
    float _913 = _910 * _906;
    float _4118 = isnan(0.0) ? _879 : (isnan(_879) ? 0.0 : max(_879, 0.0));
    float _914 = isnan(1.0) ? _4118 : (isnan(_4118) ? 1.0 : min(_4118, 1.0));
    float _4129 = isnan(0.0) ? _897 : (isnan(_897) ? 0.0 : max(_897, 0.0));
    float _4140 = isnan(0.0) ? _838 : (isnan(_838) ? 0.0 : max(_838, 0.0));
    float _4151 = isnan(0.0) ? _839 : (isnan(_839) ? 0.0 : max(_839, 0.0));
    float _4162 = isnan(0.0) ? _840 : (isnan(_840) ? 0.0 : max(_840, 0.0));
    float _932 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _974 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _984 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _974);
    float _985 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _974);
    float _986 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _974);
    float _990 = inversesqrt(dot(vec3(_984, _985, _986), vec3(_984, _985, _986)));
    float _991 = _984 * _990;
    float _992 = _985 * _990;
    float _993 = _986 * _990;
    float _999 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1000 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1018 = fma(_913, cbSceneParam._m0[5u].z, fma(_912, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _911));
    float _1021 = fma(_913, cbSceneParam._m0[6u].z, fma(_912, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _911));
    float _1024 = fma(_913, cbSceneParam._m0[7u].z, fma(_912, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _911));
    uint _1038 = (_276 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _1044 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4140 : (isnan(_4140) ? 1.0 : min(_4140, 1.0)))) * cbInstanceData._m0[_1038].x;
    float _1045 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4151 : (isnan(_4151) ? 1.0 : min(_4151, 1.0)))) * cbInstanceData._m0[_1038].y;
    float _1046 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4162 : (isnan(_4162) ? 1.0 : min(_4162, 1.0)))) * cbInstanceData._m0[_1038].z;
    float _4173 = isnan(0.0) ? _1044 : (isnan(_1044) ? 0.0 : max(_1044, 0.0));
    float _1047 = isnan(1.0) ? _4173 : (isnan(_4173) ? 1.0 : min(_4173, 1.0));
    float _4184 = isnan(0.0) ? _1045 : (isnan(_1045) ? 0.0 : max(_1045, 0.0));
    float _1048 = isnan(1.0) ? _4184 : (isnan(_4184) ? 1.0 : min(_4184, 1.0));
    float _4195 = isnan(0.0) ? _1046 : (isnan(_1046) ? 0.0 : max(_1046, 0.0));
    float _1049 = isnan(1.0) ? _4195 : (isnan(_4195) ? 1.0 : min(_4195, 1.0));
    vec4 _1058 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _999, cbSceneParam._m0[86u].y * _1000));
    float _1062 = ((isnan(1.0) ? _4129 : (isnan(_4129) ? 1.0 : min(_4129, 1.0))) * TEXCOORD_5.w) * _1058.x;
    float _1063 = dot(vec3(_911, _912, _913), vec3(_991, _992, _993));
    float _1066 = _1063 * 2.0;
    float _1070 = (_1066 * _911) - _991;
    float _1071 = (_1066 * _912) - _992;
    float _1072 = (_1066 * _913) - _993;
    float _1076 = abs(dot(vec3(_991, _992, _993), vec3(_911, _912, _913)));
    float _4206 = isnan(0.0) ? _1076 : (isnan(_1076) ? 0.0 : max(_1076, 0.0));
    float _1078 = sqrt(_914);
    float _1091 = exp2((_1078 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4206 : (isnan(_4206) ? 1.0 : min(_4206, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1078 * 3.0));
    float _1123 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1127 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1131 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1432;
    float _1434;
    float _1435;
    float _1436;
    float _1437;
    float _1438;
    float _1439;
    float _1440;
    float _1441;
    float _1442;
    float _1443;
    float _1444;
    float _1445;
    float _1446;
    float _1447;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1157 = fma(_1131, cbModelParam._m0[26u].z, fma(_1127, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1123));
        float _1161 = fma(_1131, cbModelParam._m0[27u].z, fma(_1127, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1123));
        float _1165 = fma(_1131, cbModelParam._m0[28u].z, fma(_1127, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1123));
        float _1190 = _1123 + _911;
        float _1191 = _1127 + _912;
        float _1192 = _1131 + _913;
        float _1202 = fma(_1192, cbModelParam._m0[26u].z, fma(_1191, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1190)) - _1157;
        float _1203 = fma(_1192, cbModelParam._m0[27u].z, fma(_1191, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1190)) - _1161;
        float _1204 = fma(_1192, cbModelParam._m0[28u].z, fma(_1191, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1190)) - _1165;
        float _1208 = inversesqrt(dot(vec3(_1202, _1203, _1204), vec3(_1202, _1203, _1204)));
        float _1221 = ((_1208 * _1202) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1157 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1222 = ((_1208 * _1203) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1161 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1223 = ((_1208 * _1204) / cbModelParam._m0[34u].z) + ((((((_1165 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1226 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1221, _1222, _1223), 0.0);
        vec4 _1233 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1221, _1222, _1223), 0.0);
        vec4 _1240 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1221, _1222, _1223), 0.0);
        vec4 _1247 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1221, _1222, _1223), 0.0);
        float _1260 = exp2((_1226.w + (-0.5)) * 20.0) * 2.0;
        float _1261 = _1260 * (_1226.x + (-0.5));
        float _1262 = _1260 * (_1226.y + (-0.5));
        float _1263 = _1260 * (_1226.z + (-0.5));
        float _1270 = exp2((_1233.w + (-0.5)) * 20.0) * 2.0;
        float _1271 = _1270 * (_1233.x + (-0.5));
        float _1272 = _1270 * (_1233.y + (-0.5));
        float _1273 = _1270 * (_1233.z + (-0.5));
        float _1280 = exp2((_1240.w + (-0.5)) * 20.0) * 2.0;
        float _1281 = _1280 * (_1240.x + (-0.5));
        float _1282 = _1280 * (_1240.y + (-0.5));
        float _1283 = _1280 * (_1240.z + (-0.5));
        float _1290 = exp2((_1247.w + (-0.5)) * 20.0) * 2.0;
        float _1291 = _1290 * (_1247.x + (-0.5));
        float _1292 = _1290 * (_1247.y + (-0.5));
        float _1293 = _1290 * (_1247.z + (-0.5));
        float _1294 = isnan(0.0) ? _1291 : (isnan(_1291) ? 0.0 : max(_1291, 0.0));
        float _1295 = isnan(0.0) ? _1292 : (isnan(_1292) ? 0.0 : max(_1292, 0.0));
        float _1296 = isnan(0.0) ? _1293 : (isnan(_1293) ? 0.0 : max(_1293, 0.0));
        float _1297 = _1261 * 0.5;
        float _1298 = _1271 * 0.5;
        float _1299 = _1281 * 0.5;
        float _1300 = dot(vec3(_1297, _1298, _1299), vec3(_1297, _1298, _1299));
        float _1305 = (_1300 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1300);
        float _1314 = (dot(vec3(_911, _912, _913), vec3(_1305 * _1297, _1305 * _1298, _1305 * _1299)) + 1.0) * 0.5;
        float _4232 = isnan(0.0) ? _1314 : (isnan(_1314) ? 0.0 : max(_1314, 0.0));
        float _1324 = sqrt(((_1298 * _1298) + (_1297 * _1297)) + (_1299 * _1299)) / (_1294 + 9.9999997473787516355514526367188e-06);
        float _4243 = isnan(0.0) ? _1324 : (isnan(_1324) ? 0.0 : max(_1324, 0.0));
        float _1325 = isnan(1.0) ? _4243 : (isnan(_4243) ? 1.0 : min(_4243, 1.0));
        float _1326 = _1325 * 2.0;
        float _1330 = (1.0 - _1325) / (_1325 + 1.0);
        float _4254 = isnan(0.0) ? _1330 : (isnan(_1330) ? 0.0 : max(_1330, 0.0));
        float _1331 = isnan(1.0) ? _4254 : (isnan(_4254) ? 1.0 : min(_4254, 1.0));
        float _1340 = ((((1.0 - _1331) * (_1326 + 2.0)) * exp2(log2(isnan(1.0) ? _4232 : (isnan(_4232) ? 1.0 : min(_4232, 1.0))) * (_1326 + 1.0))) + _1331) * _1294;
        float _1341 = _1262 * 0.5;
        float _1342 = _1272 * 0.5;
        float _1343 = _1282 * 0.5;
        float _1344 = dot(vec3(_1341, _1342, _1343), vec3(_1341, _1342, _1343));
        float _1349 = (_1344 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1344);
        float _1357 = (dot(vec3(_911, _912, _913), vec3(_1349 * _1341, _1349 * _1342, _1349 * _1343)) + 1.0) * 0.5;
        float _4265 = isnan(0.0) ? _1357 : (isnan(_1357) ? 0.0 : max(_1357, 0.0));
        float _1366 = sqrt(((_1342 * _1342) + (_1341 * _1341)) + (_1343 * _1343)) / (_1295 + 9.9999997473787516355514526367188e-06);
        float _4276 = isnan(0.0) ? _1366 : (isnan(_1366) ? 0.0 : max(_1366, 0.0));
        float _1367 = isnan(1.0) ? _4276 : (isnan(_4276) ? 1.0 : min(_4276, 1.0));
        float _1368 = _1367 * 2.0;
        float _1372 = (1.0 - _1367) / (_1367 + 1.0);
        float _4287 = isnan(0.0) ? _1372 : (isnan(_1372) ? 0.0 : max(_1372, 0.0));
        float _1373 = isnan(1.0) ? _4287 : (isnan(_4287) ? 1.0 : min(_4287, 1.0));
        float _1382 = ((((1.0 - _1373) * (_1368 + 2.0)) * exp2(log2(isnan(1.0) ? _4265 : (isnan(_4265) ? 1.0 : min(_4265, 1.0))) * (_1368 + 1.0))) + _1373) * _1295;
        float _1383 = _1263 * 0.5;
        float _1384 = _1273 * 0.5;
        float _1385 = _1283 * 0.5;
        float _1386 = dot(vec3(_1383, _1384, _1385), vec3(_1383, _1384, _1385));
        float _1391 = (_1386 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1386);
        float _1399 = (dot(vec3(_911, _912, _913), vec3(_1391 * _1383, _1391 * _1384, _1391 * _1385)) + 1.0) * 0.5;
        float _4298 = isnan(0.0) ? _1399 : (isnan(_1399) ? 0.0 : max(_1399, 0.0));
        float _1408 = sqrt(((_1384 * _1384) + (_1383 * _1383)) + (_1385 * _1385)) / (_1296 + 9.9999997473787516355514526367188e-06);
        float _4309 = isnan(0.0) ? _1408 : (isnan(_1408) ? 0.0 : max(_1408, 0.0));
        float _1409 = isnan(1.0) ? _4309 : (isnan(_4309) ? 1.0 : min(_4309, 1.0));
        float _1410 = _1409 * 2.0;
        float _1414 = (1.0 - _1409) / (_1409 + 1.0);
        float _4320 = isnan(0.0) ? _1414 : (isnan(_1414) ? 0.0 : max(_1414, 0.0));
        float _1415 = isnan(1.0) ? _4320 : (isnan(_4320) ? 1.0 : min(_4320, 1.0));
        float _1424 = ((((1.0 - _1415) * (_1410 + 2.0)) * exp2(log2(isnan(1.0) ? _4298 : (isnan(_4298) ? 1.0 : min(_4298, 1.0))) * (_1410 + 1.0))) + _1415) * _1296;
        _1432 = _1263;
        _1434 = _1262;
        _1435 = _1261;
        _1436 = _1273;
        _1437 = _1272;
        _1438 = _1271;
        _1439 = _1283;
        _1440 = _1282;
        _1441 = _1281;
        _1442 = _1296;
        _1443 = _1295;
        _1444 = _1294;
        _1445 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1340 : (isnan(_1340) ? 0.0 : max(_1340, 0.0)));
        _1446 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1382 : (isnan(_1382) ? 0.0 : max(_1382, 0.0)));
        _1447 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1424 : (isnan(_1424) ? 0.0 : max(_1424, 0.0)));
    }
    else
    {
        _1432 = _1433;
        _1434 = _1433;
        _1435 = _1433;
        _1436 = _1433;
        _1437 = _1433;
        _1438 = _1433;
        _1439 = _1433;
        _1440 = _1433;
        _1441 = _1433;
        _1442 = _1433;
        _1443 = _1433;
        _1444 = _1433;
        _1445 = 0.0;
        _1446 = 0.0;
        _1447 = 0.0;
    }
    float _1739;
    float _1740;
    float _1741;
    float _1742;
    float _1743;
    float _1744;
    float _1745;
    float _1746;
    float _1747;
    float _1748;
    float _1749;
    float _1750;
    float _1751;
    float _1752;
    float _1753;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1470 = fma(_1131, cbModelParam._m0[30u].z, fma(_1127, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1123));
        float _1474 = fma(_1131, cbModelParam._m0[31u].z, fma(_1127, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1123));
        float _1478 = fma(_1131, cbModelParam._m0[32u].z, fma(_1127, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1123));
        float _1501 = _1123 + _911;
        float _1502 = _1127 + _912;
        float _1503 = _1131 + _913;
        float _1513 = fma(_1503, cbModelParam._m0[30u].z, fma(_1502, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1501)) - _1470;
        float _1514 = fma(_1503, cbModelParam._m0[31u].z, fma(_1502, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1501)) - _1474;
        float _1515 = fma(_1503, cbModelParam._m0[32u].z, fma(_1502, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1501)) - _1478;
        float _1519 = inversesqrt(dot(vec3(_1513, _1514, _1515), vec3(_1513, _1514, _1515)));
        float _1532 = ((_1519 * _1513) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1470 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1533 = ((_1519 * _1514) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1474 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1534 = ((_1519 * _1515) / cbModelParam._m0[35u].z) + ((((((_1478 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1536 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1532, _1533, _1534), 0.0);
        vec4 _1543 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1532, _1533, _1534), 0.0);
        vec4 _1550 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1532, _1533, _1534), 0.0);
        vec4 _1557 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1532, _1533, _1534), 0.0);
        float _1569 = exp2((_1536.w + (-0.5)) * 20.0) * 2.0;
        float _1570 = _1569 * (_1536.x + (-0.5));
        float _1571 = _1569 * (_1536.y + (-0.5));
        float _1572 = _1569 * (_1536.z + (-0.5));
        float _1579 = exp2((_1543.w + (-0.5)) * 20.0) * 2.0;
        float _1580 = _1579 * (_1543.x + (-0.5));
        float _1581 = _1579 * (_1543.y + (-0.5));
        float _1582 = _1579 * (_1543.z + (-0.5));
        float _1589 = exp2((_1550.w + (-0.5)) * 20.0) * 2.0;
        float _1590 = _1589 * (_1550.x + (-0.5));
        float _1591 = _1589 * (_1550.y + (-0.5));
        float _1592 = _1589 * (_1550.z + (-0.5));
        float _1599 = exp2((_1557.w + (-0.5)) * 20.0) * 2.0;
        float _1600 = _1599 * (_1557.x + (-0.5));
        float _1601 = _1599 * (_1557.y + (-0.5));
        float _1602 = _1599 * (_1557.z + (-0.5));
        float _1603 = isnan(0.0) ? _1600 : (isnan(_1600) ? 0.0 : max(_1600, 0.0));
        float _1604 = isnan(0.0) ? _1601 : (isnan(_1601) ? 0.0 : max(_1601, 0.0));
        float _1605 = isnan(0.0) ? _1602 : (isnan(_1602) ? 0.0 : max(_1602, 0.0));
        float _1606 = _1570 * 0.5;
        float _1607 = _1580 * 0.5;
        float _1608 = _1590 * 0.5;
        float _1609 = dot(vec3(_1606, _1607, _1608), vec3(_1606, _1607, _1608));
        float _1614 = (_1609 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1609);
        float _1622 = (dot(vec3(_911, _912, _913), vec3(_1614 * _1606, _1614 * _1607, _1614 * _1608)) + 1.0) * 0.5;
        float _4361 = isnan(0.0) ? _1622 : (isnan(_1622) ? 0.0 : max(_1622, 0.0));
        float _1631 = sqrt(((_1607 * _1607) + (_1606 * _1606)) + (_1608 * _1608)) / (_1603 + 9.9999997473787516355514526367188e-06);
        float _4372 = isnan(0.0) ? _1631 : (isnan(_1631) ? 0.0 : max(_1631, 0.0));
        float _1632 = isnan(1.0) ? _4372 : (isnan(_4372) ? 1.0 : min(_4372, 1.0));
        float _1633 = _1632 * 2.0;
        float _1637 = (1.0 - _1632) / (_1632 + 1.0);
        float _4383 = isnan(0.0) ? _1637 : (isnan(_1637) ? 0.0 : max(_1637, 0.0));
        float _1638 = isnan(1.0) ? _4383 : (isnan(_4383) ? 1.0 : min(_4383, 1.0));
        float _1647 = ((((1.0 - _1638) * (_1633 + 2.0)) * exp2(log2(isnan(1.0) ? _4361 : (isnan(_4361) ? 1.0 : min(_4361, 1.0))) * (_1633 + 1.0))) + _1638) * _1603;
        float _1648 = _1571 * 0.5;
        float _1649 = _1581 * 0.5;
        float _1650 = _1591 * 0.5;
        float _1651 = dot(vec3(_1648, _1649, _1650), vec3(_1648, _1649, _1650));
        float _1656 = (_1651 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1651);
        float _1664 = (dot(vec3(_911, _912, _913), vec3(_1656 * _1648, _1656 * _1649, _1656 * _1650)) + 1.0) * 0.5;
        float _4394 = isnan(0.0) ? _1664 : (isnan(_1664) ? 0.0 : max(_1664, 0.0));
        float _1673 = sqrt(((_1649 * _1649) + (_1648 * _1648)) + (_1650 * _1650)) / (_1604 + 9.9999997473787516355514526367188e-06);
        float _4405 = isnan(0.0) ? _1673 : (isnan(_1673) ? 0.0 : max(_1673, 0.0));
        float _1674 = isnan(1.0) ? _4405 : (isnan(_4405) ? 1.0 : min(_4405, 1.0));
        float _1675 = _1674 * 2.0;
        float _1679 = (1.0 - _1674) / (_1674 + 1.0);
        float _4416 = isnan(0.0) ? _1679 : (isnan(_1679) ? 0.0 : max(_1679, 0.0));
        float _1680 = isnan(1.0) ? _4416 : (isnan(_4416) ? 1.0 : min(_4416, 1.0));
        float _1689 = ((((1.0 - _1680) * (_1675 + 2.0)) * exp2(log2(isnan(1.0) ? _4394 : (isnan(_4394) ? 1.0 : min(_4394, 1.0))) * (_1675 + 1.0))) + _1680) * _1604;
        float _1690 = _1572 * 0.5;
        float _1691 = _1582 * 0.5;
        float _1692 = _1592 * 0.5;
        float _1693 = dot(vec3(_1690, _1691, _1692), vec3(_1690, _1691, _1692));
        float _1698 = (_1693 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1693);
        float _1706 = (dot(vec3(_911, _912, _913), vec3(_1698 * _1690, _1698 * _1691, _1698 * _1692)) + 1.0) * 0.5;
        float _4427 = isnan(0.0) ? _1706 : (isnan(_1706) ? 0.0 : max(_1706, 0.0));
        float _1715 = sqrt(((_1691 * _1691) + (_1690 * _1690)) + (_1692 * _1692)) / (_1605 + 9.9999997473787516355514526367188e-06);
        float _4438 = isnan(0.0) ? _1715 : (isnan(_1715) ? 0.0 : max(_1715, 0.0));
        float _1716 = isnan(1.0) ? _4438 : (isnan(_4438) ? 1.0 : min(_4438, 1.0));
        float _1717 = _1716 * 2.0;
        float _1721 = (1.0 - _1716) / (_1716 + 1.0);
        float _4449 = isnan(0.0) ? _1721 : (isnan(_1721) ? 0.0 : max(_1721, 0.0));
        float _1722 = isnan(1.0) ? _4449 : (isnan(_4449) ? 1.0 : min(_4449, 1.0));
        float _1731 = ((((1.0 - _1722) * (_1717 + 2.0)) * exp2(log2(isnan(1.0) ? _4427 : (isnan(_4427) ? 1.0 : min(_4427, 1.0))) * (_1717 + 1.0))) + _1722) * _1605;
        _1739 = _1572;
        _1740 = _1571;
        _1741 = _1570;
        _1742 = _1582;
        _1743 = _1581;
        _1744 = _1580;
        _1745 = _1592;
        _1746 = _1591;
        _1747 = _1590;
        _1748 = _1605;
        _1749 = _1604;
        _1750 = _1603;
        _1751 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1647 : (isnan(_1647) ? 0.0 : max(_1647, 0.0)));
        _1752 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1689 : (isnan(_1689) ? 0.0 : max(_1689, 0.0)));
        _1753 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1731 : (isnan(_1731) ? 0.0 : max(_1731, 0.0)));
    }
    else
    {
        _1739 = _1433;
        _1740 = _1433;
        _1741 = _1433;
        _1742 = _1433;
        _1743 = _1433;
        _1744 = _1433;
        _1745 = _1433;
        _1746 = _1433;
        _1747 = _1433;
        _1748 = _1433;
        _1749 = _1433;
        _1750 = _1433;
        _1751 = 0.0;
        _1752 = 0.0;
        _1753 = 0.0;
    }
    float _1763 = (cbModelParam._m0[1u].x * (_1751 - _1445)) + _1445;
    float _1764 = (cbModelParam._m0[1u].x * (_1752 - _1446)) + _1446;
    float _1765 = (cbModelParam._m0[1u].x * (_1753 - _1447)) + _1447;
    float _1786 = fma(_1765, cbSceneParam._m0[89u].z, fma(_1764, cbSceneParam._m0[89u].y, _1763 * cbSceneParam._m0[89u].x));
    float _1789 = fma(_1765, cbSceneParam._m0[90u].z, fma(_1764, cbSceneParam._m0[90u].y, _1763 * cbSceneParam._m0[90u].x));
    float _1792 = fma(_1765, cbSceneParam._m0[91u].z, fma(_1764, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1763));
    float _1807 = _1070 * 0.5;
    float _1808 = _1071 * 0.5;
    float _1809 = _1072 * 0.5;
    float _1810 = dot(vec4(_1807, _1808, _1809, 1.0), vec4(_1741, _1744, _1747, _1750));
    float _1813 = dot(vec4(_1807, _1808, _1809, 1.0), vec4(_1740, _1743, _1746, _1749));
    float _1816 = dot(vec4(_1807, _1808, _1809, 1.0), vec4(_1739, _1742, _1745, _1748));
    float _1850;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1823 = dot(vec4(_1807, _1808, _1809, 1.0), vec4(_1432, _1436, _1439, _1442));
        float _1827 = dot(vec4(_1807, _1808, _1809, 1.0), vec4(_1434, _1437, _1440, _1443));
        float _1831 = dot(vec4(_1807, _1808, _1809, 1.0), vec4(_1435, _1438, _1441, _1444));
        float _1838 = dot(vec4(cbModelParam._m0[39u]), vec4(_1807, _1808, _1809, 1.0));
        _1850 = dot(vec3(isnan(0.0) ? _1831 : (isnan(_1831) ? 0.0 : max(_1831, 0.0)), isnan(0.0) ? _1827 : (isnan(_1827) ? 0.0 : max(_1827, 0.0)), isnan(0.0) ? _1823 : (isnan(_1823) ? 0.0 : max(_1823, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1838) ? 0.0 : (isnan(0.0) ? _1838 : max(0.0, _1838))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1850 = 1.0;
    }
    float _1861;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1852 = dot(vec4(cbModelParam._m0[40u]), vec4(_1807, _1808, _1809, 1.0));
        _1861 = dot(vec3(isnan(0.0) ? _1810 : (isnan(_1810) ? 0.0 : max(_1810, 0.0)), isnan(0.0) ? _1813 : (isnan(_1813) ? 0.0 : max(_1813, 0.0)), isnan(0.0) ? _1816 : (isnan(_1816) ? 0.0 : max(_1816, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1852) ? 0.0 : (isnan(0.0) ? _1852 : max(0.0, _1852))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1861 = 1.0;
    }
    float _1865 = (_1861 * cbModelParam._m0[1u].x) + (_1850 * (1.0 - cbModelParam._m0[1u].x));
    float _1875 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _914);
    float _1876 = isnan(_1875) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1875 : min(cbModelParam._m0[25u].z, _1875));
    float _1956;
    float _1958;
    float _1960;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1923 = fma(_1131, cbModelParam._m0[13u].z, fma(_1127, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1123)) + cbModelParam._m0[13u].w;
        float _1927 = fma(_1131, cbModelParam._m0[14u].z, fma(_1127, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1123)) + cbModelParam._m0[14u].w;
        float _1931 = fma(_1131, cbModelParam._m0[15u].z, fma(_1127, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1123)) + cbModelParam._m0[15u].w;
        float _1934 = fma(_1072, cbModelParam._m0[13u].z, fma(_1071, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1070));
        float _1937 = fma(_1072, cbModelParam._m0[14u].z, fma(_1071, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1070));
        float _1940 = fma(_1072, cbModelParam._m0[15u].z, fma(_1071, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1070));
        float _1968;
        if (_1934 > 0.0)
        {
            _1968 = abs((1.0 - _1923) / _1934);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1934 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1923 + 1.0) / _1934);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1968 = frontier_phi_14_12_ladder;
        }
        float _2138;
        if (_1937 > 0.0)
        {
            _2138 = abs((1.0 - _1927) / _1937);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1937 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1927 + 1.0) / _1937);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2138 = frontier_phi_23_19_ladder;
        }
        float _2433;
        if (_1940 > 0.0)
        {
            _2433 = abs((1.0 - _1931) / _1940);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1940 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1931 + 1.0) / _1940);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2433 = frontier_phi_35_30_ladder;
        }
        float _2435 = isnan(_2138) ? _1968 : (isnan(_1968) ? _2138 : min(_1968, _2138));
        float _2436 = isnan(_2433) ? _2435 : (isnan(_2435) ? _2433 : min(_2435, _2433));
        float _2440 = (_2436 * _1934) + _1923;
        float _2441 = (_2436 * _1937) + _1927;
        float _2442 = (_2436 * _1940) + _1931;
        float _2443 = _2436 * 9.9999997473787516355514526367188e-05;
        float _2445 = (-1.0) - _2443;
        float _2447 = _2443 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2442 > _2447) || ((_2442 < _2445) || ((_2441 > _2447) || ((_2441 < _2445) || ((_2440 < _2445) || (_2440 > _2447))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2587 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2442, cbModelParam._m0[9u].z, fma(_2441, cbModelParam._m0[9u].y, _2440 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2442, cbModelParam._m0[10u].z, fma(_2441, cbModelParam._m0[10u].y, _2440 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2442, cbModelParam._m0[11u].z, fma(_2441, cbModelParam._m0[11u].y, _2440 * cbModelParam._m0[11u].x))), _1876);
            frontier_phi_13_35_ladder = _2587.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2587.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2587.x * cbModelParam._m0[1u].y;
        }
        _1956 = frontier_phi_13_35_ladder_2;
        _1958 = frontier_phi_13_35_ladder_1;
        _1960 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1944 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1070, _1071, _1072), _1876);
        _1956 = _1944.x * cbModelParam._m0[1u].y;
        _1958 = _1944.y * cbModelParam._m0[1u].y;
        _1960 = _1944.z * cbModelParam._m0[1u].y;
    }
    float _1964 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _914);
    float _1965 = isnan(_1964) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1964 : min(cbModelParam._m0[25u].w, _1964));
    float _2055;
    float _2057;
    float _2059;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2019 = fma(_1131, cbModelParam._m0[21u].z, fma(_1127, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1123)) + cbModelParam._m0[21u].w;
        float _2023 = fma(_1131, cbModelParam._m0[22u].z, fma(_1127, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1123)) + cbModelParam._m0[22u].w;
        float _2027 = fma(_1131, cbModelParam._m0[23u].z, fma(_1127, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1123)) + cbModelParam._m0[23u].w;
        float _2030 = fma(_1072, cbModelParam._m0[21u].z, fma(_1071, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1070));
        float _2033 = fma(_1072, cbModelParam._m0[22u].z, fma(_1071, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1070));
        float _2036 = fma(_1072, cbModelParam._m0[23u].z, fma(_1071, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1070));
        float _2143;
        if (_2030 > 0.0)
        {
            _2143 = abs((1.0 - _2019) / _2030);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_2030 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_2019 + 1.0) / _2030);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2143 = frontier_phi_25_21_ladder;
        }
        float _2460;
        if (_2033 > 0.0)
        {
            _2460 = abs((1.0 - _2023) / _2033);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_2033 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_2023 + 1.0) / _2033);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2460 = frontier_phi_37_32_ladder;
        }
        float _2787;
        if (_2036 > 0.0)
        {
            _2787 = abs((1.0 - _2027) / _2036);
        }
        else
        {
            float frontier_phi_47_44_ladder;
            if (_2036 < 0.0)
            {
                frontier_phi_47_44_ladder = abs((_2027 + 1.0) / _2036);
            }
            else
            {
                frontier_phi_47_44_ladder = 5000.0;
            }
            _2787 = frontier_phi_47_44_ladder;
        }
        float _2789 = isnan(_2460) ? _2143 : (isnan(_2143) ? _2460 : min(_2143, _2460));
        float _2790 = isnan(_2787) ? _2789 : (isnan(_2789) ? _2787 : min(_2789, _2787));
        float _2794 = (_2790 * _2030) + _2019;
        float _2795 = (_2790 * _2033) + _2023;
        float _2796 = (_2790 * _2036) + _2027;
        float _2797 = _2790 * 9.9999997473787516355514526367188e-05;
        float _2798 = (-1.0) - _2797;
        float _2800 = _2797 + 1.0;
        float frontier_phi_22_47_ladder;
        float frontier_phi_22_47_ladder_1;
        float frontier_phi_22_47_ladder_2;
        if ((_2796 > _2800) || ((_2796 < _2798) || ((_2795 > _2800) || ((_2795 < _2798) || ((_2794 < _2798) || (_2794 > _2800))))))
        {
            frontier_phi_22_47_ladder = 0.0;
            frontier_phi_22_47_ladder_1 = 0.0;
            frontier_phi_22_47_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2914 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2796, cbModelParam._m0[17u].z, fma(_2795, cbModelParam._m0[17u].y, _2794 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2796, cbModelParam._m0[18u].z, fma(_2795, cbModelParam._m0[18u].y, _2794 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2796, cbModelParam._m0[19u].z, fma(_2795, cbModelParam._m0[19u].y, _2794 * cbModelParam._m0[19u].x))), _1965);
            frontier_phi_22_47_ladder = _2914.z * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_1 = _2914.y * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_2 = _2914.x * cbModelParam._m0[1u].z;
        }
        _2055 = frontier_phi_22_47_ladder_2;
        _2057 = frontier_phi_22_47_ladder_1;
        _2059 = frontier_phi_22_47_ladder;
    }
    else
    {
        vec4 _2039 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1070, _1071, _1072), _1965);
        _2055 = _2039.x * cbModelParam._m0[1u].z;
        _2057 = _2039.y * cbModelParam._m0[1u].z;
        _2059 = _2039.z * cbModelParam._m0[1u].z;
    }
    float _2071 = ((((1.0 - _1091) * ((_1078 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_1091 * _1078)) * _1062;
    float _2072 = _2071 * ((cbModelParam._m0[1u].w * (_2055 - _1956)) + _1956);
    float _2073 = _2071 * ((cbModelParam._m0[1u].w * (_2057 - _1958)) + _1958);
    float _2074 = _2071 * ((cbModelParam._m0[1u].w * (_2059 - _1960)) + _1960);
    float _2077 = fma(_2074, cbSceneParam._m0[89u].z, fma(_2073, cbSceneParam._m0[89u].y, _2072 * cbSceneParam._m0[89u].x));
    float _2080 = fma(_2074, cbSceneParam._m0[90u].z, fma(_2073, cbSceneParam._m0[90u].y, _2072 * cbSceneParam._m0[90u].x));
    float _2083 = fma(_2074, cbSceneParam._m0[91u].z, fma(_2073, cbSceneParam._m0[91u].y, _2072 * cbSceneParam._m0[91u].x));
    float _2117 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2121 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2125 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2129 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2130 = _2117 / _2129;
    float _2131 = _2121 / _2129;
    float _2132 = _2125 / _2129;
    float _2279;
    float _2280;
    float _2281;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2159 = ((uint(_2132 > cbSceneParam._m0[59u].y) + uint(_2132 > cbSceneParam._m0[59u].x)) + uint(_2132 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2160 = _2159 + 43u;
        uint _2168 = _2159 + 44u;
        uint _2176 = _2159 + 45u;
        uint _2184 = _2159 + 46u;
        float _2195 = fma(_2129, cbSceneParam._m0[_2160].w, fma(_2125, cbSceneParam._m0[_2160].z, fma(_2121, cbSceneParam._m0[_2160].y, _2117 * cbSceneParam._m0[_2160].x)));
        float _2199 = fma(_2129, cbSceneParam._m0[_2168].w, fma(_2125, cbSceneParam._m0[_2168].z, fma(_2121, cbSceneParam._m0[_2168].y, _2117 * cbSceneParam._m0[_2168].x)));
        float _2207 = fma(_2129, cbSceneParam._m0[_2184].w, fma(_2125, cbSceneParam._m0[_2184].z, fma(_2121, cbSceneParam._m0[_2184].y, _2117 * cbSceneParam._m0[_2184].x)));
        float _2212 = cbSceneParam._m0[33u].z * _2207;
        float _2214 = cbSceneParam._m0[33u].w * _2207;
        float _2217 = fma(_2129, cbSceneParam._m0[_2176].w, fma(_2125, cbSceneParam._m0[_2176].z, fma(_2121, cbSceneParam._m0[_2176].y, _2117 * cbSceneParam._m0[_2176].x))) / _2207;
        float _2265 = (cbSceneParam._m0[33u].x - sqrt(((_2131 * _2131) + (_2130 * _2130)) + (_2132 * _2132))) * cbSceneParam._m0[33u].y;
        float _4575 = isnan(0.0) ? _2265 : (isnan(_2265) ? 0.0 : max(_2265, 0.0));
        float _2272 = (isnan(1.0) ? _4575 : (isnan(_4575) ? 1.0 : min(_4575, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2212 + _2195) / _2207, (_2214 + _2199) / _2207), _2217), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2214 + _2195) / _2207, (_2199 - _2212) / _2207), _2217), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2195 - _2212) / _2207, (_2199 - _2214) / _2207), _2217), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2195 - _2214) / _2207, (_2212 + _2199) / _2207), _2217), 0.0)).x), vec4(0.25)));
        _2279 = 1.0 - (_2272 * cbSceneParam._m0[34u].x);
        _2280 = 1.0 - (_2272 * cbSceneParam._m0[34u].y);
        _2281 = 1.0 - (_2272 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2279 = 1.0;
        _2280 = 1.0;
        _2281 = 1.0;
    }
    float _2345;
    float _2347;
    float _2349;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2333 = fma(_2129, cbSceneParam._m0[63u].w, fma(_2125, cbSceneParam._m0[63u].z, fma(_2121, cbSceneParam._m0[63u].y, _2117 * cbSceneParam._m0[63u].x)));
        float _2334 = fma(_2129, cbSceneParam._m0[60u].w, fma(_2125, cbSceneParam._m0[60u].z, fma(_2121, cbSceneParam._m0[60u].y, _2117 * cbSceneParam._m0[60u].x))) / _2333;
        float _2335 = fma(_2129, cbSceneParam._m0[61u].w, fma(_2125, cbSceneParam._m0[61u].z, fma(_2121, cbSceneParam._m0[61u].y, _2117 * cbSceneParam._m0[61u].x))) / _2333;
        float frontier_phi_34_33_ladder;
        float frontier_phi_34_33_ladder_1;
        float frontier_phi_34_33_ladder_2;
        if ((((_2334 >= cbSceneParam._m0[64u].x) && (_2335 >= cbSceneParam._m0[64u].y)) && (_2334 <= cbSceneParam._m0[64u].z)) && (_2335 <= cbSceneParam._m0[64u].w))
        {
            float _2473 = fma(_2129, cbSceneParam._m0[62u].w, fma(_2125, cbSceneParam._m0[62u].z, fma(_2121, cbSceneParam._m0[62u].y, _2117 * cbSceneParam._m0[62u].x))) / _2333;
            float _2477 = isnan(cbSceneParam._m0[41u].w) ? _2473 : (isnan(_2473) ? cbSceneParam._m0[41u].w : max(_2473, cbSceneParam._m0[41u].w));
            float _2520 = (cbSceneParam._m0[33u].x - sqrt(((_2131 * _2131) + (_2130 * _2130)) + (_2132 * _2132))) * cbSceneParam._m0[33u].y;
            float _4591 = isnan(0.0) ? _2520 : (isnan(_2520) ? 0.0 : max(_2520, 0.0));
            float _2527 = (isnan(1.0) ? _4591 : (isnan(_4591) ? 1.0 : min(_4591, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2334, cbSceneParam._m0[33u].w + _2335), _2477), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2334, _2335 - cbSceneParam._m0[33u].z), _2477), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2334 - cbSceneParam._m0[33u].z, _2335 - cbSceneParam._m0[33u].w), _2477), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2334 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2335), _2477), 0.0)).x), vec4(0.25)));
            float _2531 = 1.0 - (_2527 * cbSceneParam._m0[34u].x);
            float _2532 = 1.0 - (_2527 * cbSceneParam._m0[34u].y);
            float _2533 = 1.0 - (_2527 * cbSceneParam._m0[34u].z);
            frontier_phi_34_33_ladder = isnan(_2533) ? _2281 : (isnan(_2281) ? _2533 : min(_2281, _2533));
            frontier_phi_34_33_ladder_1 = isnan(_2532) ? _2280 : (isnan(_2280) ? _2532 : min(_2280, _2532));
            frontier_phi_34_33_ladder_2 = isnan(_2531) ? _2279 : (isnan(_2279) ? _2531 : min(_2279, _2531));
        }
        else
        {
            frontier_phi_34_33_ladder = _2281;
            frontier_phi_34_33_ladder_1 = _2280;
            frontier_phi_34_33_ladder_2 = _2279;
        }
        _2345 = frontier_phi_34_33_ladder_2;
        _2347 = frontier_phi_34_33_ladder_1;
        _2349 = frontier_phi_34_33_ladder;
    }
    else
    {
        _2345 = _2279;
        _2347 = _2280;
        _2349 = _2281;
    }
    uvec4 _2354 = floatBitsToUint(cbInstanceData._m0[_276 + 5u]);
    uint _2356 = _2354.x * 14u;
    uint _2357 = _2356 + 13u;
    float _2364 = _1062 + (-1.0);
    float _2369 = (cbLight._m0[_2357].x * _2364) + 1.0;
    float _2370 = (cbLight._m0[_2357].y * _2364) + 1.0;
    float _2371 = (cbLight._m0[_2357].z * _2364) + 1.0;
    float _2372 = (cbLight._m0[_2357].w * _2364) + 1.0;
    uint _2373 = _2356 + 5u;
    float _2379 = isnan(1.0) ? _2370 : (isnan(_2370) ? 1.0 : min(_2370, 1.0));
    uint _2383 = _2356 + 4u;
    float _2392 = isnan(1.0) ? _2369 : (isnan(_2369) ? 1.0 : min(_2369, 1.0));
    uint _2396 = _2356 | 1u;
    float _2407 = dot(vec3(cbLight._m0[_2356].xyz), vec3(_911, _912, _913));
    float _2410 = dot(vec3(cbLight._m0[_2396].xyz), vec3(_911, _912, _913));
    float _4627 = isnan(0.0) ? _2407 : (isnan(_2407) ? 0.0 : max(_2407, 0.0));
    float _4638 = isnan(0.0) ? _2410 : (isnan(_2410) ? 0.0 : max(_2410, 0.0));
    float _2415 = (isnan(1.0) ? _4627 : (isnan(_4627) ? 1.0 : min(_4627, 1.0))) * 0.3183098733425140380859375;
    float _2417 = (isnan(1.0) ? _4638 : (isnan(_4638) ? 1.0 : min(_4638, 1.0))) * 0.3183098733425140380859375;
    float _2424 = ((cbLight._m0[_2373].x * _2379) * _2417) + (((cbLight._m0[_2383].x * _2345) * _2392) * _2415);
    float _2425 = ((_2379 * cbLight._m0[_2373].y) * _2417) + (((cbLight._m0[_2383].y * _2347) * _2392) * _2415);
    float _2426 = ((_2379 * cbLight._m0[_2373].z) * _2417) + (((cbLight._m0[_2383].z * _2349) * _2392) * _2415);
    uvec4 _2430 = floatBitsToUint(cbLight._m0[_2356 + 12u]);
    bool _2432 = _2430.x == 0u;
    float _2534;
    float _2536;
    float _2538;
    if (_2432)
    {
        _2534 = _2424;
        _2536 = _2425;
        _2538 = _2426;
    }
    else
    {
        uint _2542 = _2356 + 6u;
        float _2558 = (dot(vec3(cbLight._m0[_2356 + 2u].xyz), vec3(_911, _912, _913)) * 0.5) + 0.5;
        float _2559 = _2558 * _2558;
        float _4649 = isnan(0.0) ? _2559 : (isnan(_2559) ? 0.0 : max(_2559, 0.0));
        float _2560 = isnan(1.0) ? _4649 : (isnan(_4649) ? 1.0 : min(_4649, 1.0));
        float _2561 = isnan(1.0) ? _2371 : (isnan(_2371) ? 1.0 : min(_2371, 1.0));
        _2534 = (((cbLight._m0[_2542].x * 0.3183098733425140380859375) * _2560) * _2561) + _2424;
        _2536 = (((cbLight._m0[_2542].y * 0.3183098733425140380859375) * _2560) * _2561) + _2425;
        _2538 = (((cbLight._m0[_2542].z * 0.3183098733425140380859375) * _2560) * _2561) + _2426;
    }
    bool _2541 = _2430.y == 0u;
    float _2596;
    float _2598;
    float _2600;
    if (_2541)
    {
        _2596 = _2534;
        _2598 = _2536;
        _2600 = _2538;
    }
    else
    {
        uint _2758 = _2356 + 7u;
        float _2774 = (dot(vec3(cbLight._m0[_2356 + 3u].xyz), vec3(_911, _912, _913)) * 0.5) + 0.5;
        float _2775 = _2774 * _2774;
        float _4665 = isnan(0.0) ? _2775 : (isnan(_2775) ? 0.0 : max(_2775, 0.0));
        float _2776 = isnan(1.0) ? _4665 : (isnan(_4665) ? 1.0 : min(_4665, 1.0));
        float _2777 = isnan(1.0) ? _2372 : (isnan(_2372) ? 1.0 : min(_2372, 1.0));
        _2596 = (((cbLight._m0[_2758].x * 0.3183098733425140380859375) * _2776) * _2777) + _2534;
        _2598 = (((cbLight._m0[_2758].y * 0.3183098733425140380859375) * _2776) * _2777) + _2536;
        _2600 = (((cbLight._m0[_2758].z * 0.3183098733425140380859375) * _2776) * _2777) + _2538;
    }
    uint _2603 = _2356 + 8u;
    float _2616 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2356].w)) * _914) * 0.949999988079071044921875);
    float _2617 = _2616 * _2616;
    float _2618 = cbLight._m0[_2356].x + _991;
    float _2619 = cbLight._m0[_2356].y + _992;
    float _2620 = cbLight._m0[_2356].z + _993;
    float _2624 = inversesqrt(dot(vec3(_2618, _2619, _2620), vec3(_2618, _2619, _2620)));
    float _2625 = _2624 * _2618;
    float _2626 = _2624 * _2619;
    float _2627 = _2624 * _2620;
    float _2628 = dot(vec3(_911, _912, _913), vec3(cbLight._m0[_2356].xyz));
    float _4681 = isnan(0.0) ? _2628 : (isnan(_2628) ? 0.0 : max(_2628, 0.0));
    float _2631 = isnan(1.0) ? _4681 : (isnan(_4681) ? 1.0 : min(_4681, 1.0));
    float _4692 = isnan(0.0) ? _1063 : (isnan(_1063) ? 0.0 : max(_1063, 0.0));
    float _2632 = isnan(1.0) ? _4692 : (isnan(_4692) ? 1.0 : min(_4692, 1.0));
    float _2633 = dot(vec3(_911, _912, _913), vec3(_2625, _2626, _2627));
    float _4703 = isnan(0.0) ? _2633 : (isnan(_2633) ? 0.0 : max(_2633, 0.0));
    float _2636 = isnan(1.0) ? _4703 : (isnan(_4703) ? 1.0 : min(_4703, 1.0));
    float _2637 = dot(vec3(cbLight._m0[_2356].xyz), vec3(_2625, _2626, _2627));
    float _4714 = isnan(0.0) ? _2637 : (isnan(_2637) ? 0.0 : max(_2637, 0.0));
    float _2641 = _2617 * _2617;
    float _2645 = ((_2636 * _2636) * (_2641 + (-1.0))) + 1.0;
    float _2656 = (exp2(log2(1.0 - (isnan(1.0) ? _4714 : (isnan(_4714) ? 1.0 : min(_4714, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2657 = 1.0 - _2617;
    float _2668 = (0.5 / (((_2632 * ((_2631 * _2657) + _2617)) + 9.9999999392252902907785028219223e-09) + (((_2632 * _2657) + _2617) * _2631))) * _2631;
    float _4725 = isnan(0.0) ? _2668 : (isnan(_2668) ? 0.0 : max(_2668, 0.0));
    float _2670 = (isnan(1.0) ? _4725 : (isnan(_4725) ? 1.0 : min(_4725, 1.0))) * (_2641 / ((_2645 * _2645) * 3.141590118408203125));
    uint _2684 = _2356 + 9u;
    float _2695 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2396].w)) * _914) * 0.949999988079071044921875);
    float _2696 = _2695 * _2695;
    float _2697 = cbLight._m0[_2396].x + _991;
    float _2698 = cbLight._m0[_2396].y + _992;
    float _2699 = cbLight._m0[_2396].z + _993;
    float _2703 = inversesqrt(dot(vec3(_2697, _2698, _2699), vec3(_2697, _2698, _2699)));
    float _2704 = _2703 * _2697;
    float _2705 = _2703 * _2698;
    float _2706 = _2703 * _2699;
    float _2707 = dot(vec3(_911, _912, _913), vec3(cbLight._m0[_2396].xyz));
    float _4736 = isnan(0.0) ? _2707 : (isnan(_2707) ? 0.0 : max(_2707, 0.0));
    float _2710 = isnan(1.0) ? _4736 : (isnan(_4736) ? 1.0 : min(_4736, 1.0));
    float _2711 = dot(vec3(_911, _912, _913), vec3(_2704, _2705, _2706));
    float _4747 = isnan(0.0) ? _2711 : (isnan(_2711) ? 0.0 : max(_2711, 0.0));
    float _2714 = isnan(1.0) ? _4747 : (isnan(_4747) ? 1.0 : min(_4747, 1.0));
    float _2715 = dot(vec3(cbLight._m0[_2396].xyz), vec3(_2704, _2705, _2706));
    float _4758 = isnan(0.0) ? _2715 : (isnan(_2715) ? 0.0 : max(_2715, 0.0));
    float _2719 = _2696 * _2696;
    float _2723 = ((_2714 * _2714) * (_2719 + (-1.0))) + 1.0;
    float _2732 = (exp2(log2(1.0 - (isnan(1.0) ? _4758 : (isnan(_4758) ? 1.0 : min(_4758, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2733 = 1.0 - _2696;
    float _2743 = (0.5 / (((_2632 * ((_2710 * _2733) + _2696)) + 9.9999999392252902907785028219223e-09) + (((_2632 * _2733) + _2696) * _2710))) * _2710;
    float _4769 = isnan(0.0) ? _2743 : (isnan(_2743) ? 0.0 : max(_2743, 0.0));
    float _2745 = (isnan(1.0) ? _4769 : (isnan(_4769) ? 1.0 : min(_4769, 1.0))) * (_2719 / ((_2723 * _2723) * 3.141590118408203125));
    float _2755 = (((_2732 * cbLight._m0[_2684].x) * _2745) * _2379) + ((((cbLight._m0[_2603].x * _2345) * _2656) * _2670) * _2392);
    float _2756 = (((_2732 * cbLight._m0[_2684].y) * _2745) * _2379) + ((((cbLight._m0[_2603].y * _2347) * _2656) * _2670) * _2392);
    float _2757 = (((_2732 * cbLight._m0[_2684].z) * _2745) * _2379) + ((((cbLight._m0[_2603].z * _2349) * _2656) * _2670) * _2392);
    float _2813;
    float _2815;
    float _2817;
    if (_2432)
    {
        _2813 = _2755;
        _2815 = _2756;
        _2817 = _2757;
    }
    else
    {
        uint _2819 = _2356 + 2u;
        uint _2823 = _2356 + 10u;
        float _2837 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2819].w)) * _914) * 0.949999988079071044921875);
        float _2838 = _2837 * _2837;
        float _2839 = cbLight._m0[_2819].x + _991;
        float _2840 = cbLight._m0[_2819].y + _992;
        float _2841 = cbLight._m0[_2819].z + _993;
        float _2845 = inversesqrt(dot(vec3(_2839, _2840, _2841), vec3(_2839, _2840, _2841)));
        float _2846 = _2845 * _2839;
        float _2847 = _2845 * _2840;
        float _2848 = _2845 * _2841;
        float _2849 = dot(vec3(_911, _912, _913), vec3(cbLight._m0[_2819].xyz));
        float _4780 = isnan(0.0) ? _2849 : (isnan(_2849) ? 0.0 : max(_2849, 0.0));
        float _2852 = isnan(1.0) ? _4780 : (isnan(_4780) ? 1.0 : min(_4780, 1.0));
        float _2853 = dot(vec3(_911, _912, _913), vec3(_2846, _2847, _2848));
        float _4791 = isnan(0.0) ? _2853 : (isnan(_2853) ? 0.0 : max(_2853, 0.0));
        float _2856 = isnan(1.0) ? _4791 : (isnan(_4791) ? 1.0 : min(_4791, 1.0));
        float _2857 = dot(vec3(cbLight._m0[_2819].xyz), vec3(_2846, _2847, _2848));
        float _4802 = isnan(0.0) ? _2857 : (isnan(_2857) ? 0.0 : max(_2857, 0.0));
        float _2861 = _2838 * _2838;
        float _2865 = ((_2856 * _2856) * (_2861 + (-1.0))) + 1.0;
        float _2874 = (exp2(log2(1.0 - (isnan(1.0) ? _4802 : (isnan(_4802) ? 1.0 : min(_4802, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2875 = 1.0 - _2838;
        float _2885 = (0.5 / (((_2632 * ((_2852 * _2875) + _2838)) + 9.9999999392252902907785028219223e-09) + (((_2632 * _2875) + _2838) * _2852))) * _2852;
        float _4813 = isnan(0.0) ? _2885 : (isnan(_2885) ? 0.0 : max(_2885, 0.0));
        float _2887 = (isnan(1.0) ? _4813 : (isnan(_4813) ? 1.0 : min(_4813, 1.0))) * (_2861 / ((_2865 * _2865) * 3.141590118408203125));
        float _2888 = isnan(1.0) ? _2371 : (isnan(_2371) ? 1.0 : min(_2371, 1.0));
        _2813 = (((_2874 * cbLight._m0[_2823].x) * _2887) * _2888) + _2755;
        _2815 = (((_2874 * cbLight._m0[_2823].y) * _2887) * _2888) + _2756;
        _2817 = (((_2874 * cbLight._m0[_2823].z) * _2887) * _2888) + _2757;
    }
    float _2919;
    float _2921;
    float _2923;
    if (_2541)
    {
        _2919 = _2813;
        _2921 = _2815;
        _2923 = _2817;
    }
    else
    {
        uint _2930 = _2356 + 3u;
        uint _2934 = _2356 + 11u;
        float _2948 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2930].w)) * _914) * 0.949999988079071044921875);
        float _2949 = _2948 * _2948;
        float _2950 = cbLight._m0[_2930].x + _991;
        float _2951 = cbLight._m0[_2930].y + _992;
        float _2952 = cbLight._m0[_2930].z + _993;
        float _2956 = inversesqrt(dot(vec3(_2950, _2951, _2952), vec3(_2950, _2951, _2952)));
        float _2957 = _2956 * _2950;
        float _2958 = _2956 * _2951;
        float _2959 = _2956 * _2952;
        float _2960 = dot(vec3(_911, _912, _913), vec3(cbLight._m0[_2930].xyz));
        float _4829 = isnan(0.0) ? _2960 : (isnan(_2960) ? 0.0 : max(_2960, 0.0));
        float _2963 = isnan(1.0) ? _4829 : (isnan(_4829) ? 1.0 : min(_4829, 1.0));
        float _2964 = dot(vec3(_911, _912, _913), vec3(_2957, _2958, _2959));
        float _4840 = isnan(0.0) ? _2964 : (isnan(_2964) ? 0.0 : max(_2964, 0.0));
        float _2967 = isnan(1.0) ? _4840 : (isnan(_4840) ? 1.0 : min(_4840, 1.0));
        float _2968 = dot(vec3(cbLight._m0[_2930].xyz), vec3(_2957, _2958, _2959));
        float _4851 = isnan(0.0) ? _2968 : (isnan(_2968) ? 0.0 : max(_2968, 0.0));
        float _2972 = _2949 * _2949;
        float _2976 = ((_2967 * _2967) * (_2972 + (-1.0))) + 1.0;
        float _2985 = (exp2(log2(1.0 - (isnan(1.0) ? _4851 : (isnan(_4851) ? 1.0 : min(_4851, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2986 = 1.0 - _2949;
        float _2996 = (0.5 / (((_2632 * ((_2963 * _2986) + _2949)) + 9.9999999392252902907785028219223e-09) + (((_2632 * _2986) + _2949) * _2963))) * _2963;
        float _4862 = isnan(0.0) ? _2996 : (isnan(_2996) ? 0.0 : max(_2996, 0.0));
        float _2998 = (isnan(1.0) ? _4862 : (isnan(_4862) ? 1.0 : min(_4862, 1.0))) * (_2972 / ((_2976 * _2976) * 3.141590118408203125));
        float _2999 = isnan(1.0) ? _2372 : (isnan(_2372) ? 1.0 : min(_2372, 1.0));
        _2919 = (((_2985 * cbLight._m0[_2934].x) * _2998) * _2999) + _2813;
        _2921 = (((_2985 * cbLight._m0[_2934].y) * _2998) * _2999) + _2815;
        _2923 = (((_2985 * cbLight._m0[_2934].z) * _2998) * _2999) + _2817;
    }
    float _3065;
    float _3067;
    float _3069;
    float _3071;
    float _3073;
    float _3075;
    if (_2354.y == 0u)
    {
        uvec4 _3020 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3021 = _3020.x;
        uint _3032 = uint((float(_3020.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1000) / _3021))) + floor(float(uint(cbSceneParam._m0[85u].x * _999) / _3021)));
        float _3042 = (log2(_2132 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _3043 = isnan(0.0) ? _3042 : (isnan(_3042) ? 0.0 : max(_3042, 0.0));
        uint _3046 = uint(isnan(14.0) ? _3043 : (isnan(_3043) ? 14.0 : min(_3043, 14.0)));
        uvec4 _3051 = texelFetch(g_lightClusterGridBuffer, int(((_3046 << 2u) + (_3032 << 6u)) >> 2u));
        uint _3052 = _3051.x;
        uint _3053 = _3020.z;
        float _3132;
        float _3134;
        float _3136;
        float _3138;
        float _3140;
        float _3142;
        if (((((1u << ((_3053 >> 4u) & 15u)) + 4294967295u) & _3052) == 0u) || ((_3053 & 240u) == 0u))
        {
            _3132 = 0.0;
            _3134 = 0.0;
            _3136 = 0.0;
            _3138 = 0.0;
            _3140 = 0.0;
            _3142 = 0.0;
        }
        else
        {
            float _3133;
            float _3135;
            float _3137;
            float _3139;
            float _3141;
            float _3143;
            float _3277 = 0.0;
            float _3278 = 0.0;
            float _3279 = 0.0;
            float _3280 = 0.0;
            float _3281 = 0.0;
            float _3282 = 0.0;
            uint _3283 = 0u;
            uint _3292;
            bool _3293;
            for (;;)
            {
                _3292 = texelFetch(g_lightClassification, int((((_3046 << 5u) + (_3032 << 9u)) + (_3283 << 2u)) >> 2u)).x;
                _3293 = _3292 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3293)
                {
                    frontier_phi_66_pred = _3282;
                    frontier_phi_66_pred_1 = _3281;
                    frontier_phi_66_pred_2 = _3280;
                    frontier_phi_66_pred_3 = _3279;
                    frontier_phi_66_pred_4 = _3278;
                    frontier_phi_66_pred_5 = _3277;
                }
                else
                {
                    float _3401;
                    float _3402;
                    float _3403;
                    float _3404;
                    float _3405;
                    float _3406;
                    uint _3407;
                    _3401 = _3277;
                    _3402 = _3278;
                    _3403 = _3279;
                    _3404 = _3280;
                    _3405 = _3281;
                    _3406 = _3282;
                    _3407 = _3292;
                    float _3333;
                    float _3334;
                    float _3335;
                    float _3336;
                    float _3337;
                    float _3338;
                    for (;;)
                    {
                        uint _3411 = uint(findLSB(_3407)) + (_3283 << 5u);
                        uint _3408 = (_3407 + 4294967295u) & _3407;
                        uint _3413 = _3411 * 48u;
                        vec4 _3427 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3413)).x, texelFetch(g_PointLightRenderingBuffer, int(_3413 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3413 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3413 + 3u)).x));
                        uint _3433 = (_3411 * 48u) + 4u;
                        vec4 _3446 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3433)).x, texelFetch(g_PointLightRenderingBuffer, int(_3433 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3433 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3433 + 3u)).x));
                        uint _3452 = (_3411 * 48u) + 8u;
                        vec3 _3463 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3452)).x, texelFetch(g_PointLightRenderingBuffer, int(_3452 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3452 + 2u)).x));
                        float _3467 = _3427.x - _2130;
                        float _3468 = _3427.y - _2131;
                        float _3469 = _3427.z - _2132;
                        float _3470 = dot(vec3(_3467, _3468, _3469), vec3(_3467, _3468, _3469));
                        float _3473 = inversesqrt(_3470);
                        float _3474 = _3473 * _3467;
                        float _3475 = _3473 * _3468;
                        float _3476 = _3473 * _3469;
                        float _3477 = dot(vec3(_1018, _1021, _1024), vec3(_3474, _3475, _3476));
                        float _3482 = 1.0 - (_3470 * _3427.w);
                        float _4888 = isnan(0.0) ? _3482 : (isnan(_3482) ? 0.0 : max(_3482, 0.0));
                        float _3483 = isnan(1.0) ? _4888 : (isnan(_4888) ? 1.0 : min(_4888, 1.0));
                        float _3484 = sqrt(_3470) * _3446.w;
                        float _3487 = 1.39999997615814208984375 / (_3484 + 1.39999997615814208984375);
                        float _3488 = _3487 * _3487;
                        float _3491 = ((1.0 - _3488) * _3477) + _3488;
                        float _3494 = _3484 * _3484;
                        float _3498 = ((isnan(0.0) ? _3491 : (isnan(_3491) ? 0.0 : max(_3491, 0.0))) * _3483) / ((_3494 * 0.699999988079071044921875) + 1.0);
                        float _3502 = (-0.0) - _2130;
                        float _3503 = (-0.0) - _2131;
                        float _3504 = (-0.0) - _2132;
                        float _3508 = inversesqrt(dot(vec3(_3502, _3503, _3504), vec3(_3502, _3503, _3504)));
                        float _3509 = _3508 * _3502;
                        float _3510 = _3508 * _3503;
                        float _3511 = _3508 * _3504;
                        float _3518 = exp2(log2(1.0 / ((_3494 * 3.5) + 5.0)) * 0.25);
                        float _3519 = 1.0 - _1078;
                        float _3526 = sqrt(1.0 - ((1.0 - (_3519 * _3519)) * (1.0 - (_3518 * _3518))));
                        float _3527 = _3526 * _3526;
                        float _3528 = _3527 * _3527;
                        float _3529 = _3509 + _3474;
                        float _3530 = _3510 + _3475;
                        float _3531 = _3511 + _3476;
                        float _3535 = inversesqrt(dot(vec3(_3529, _3530, _3531), vec3(_3529, _3530, _3531)));
                        float _3539 = dot(vec3(_1018, _1021, _1024), vec3(_3509, _3510, _3511));
                        float _4904 = isnan(0.0) ? _3539 : (isnan(_3539) ? 0.0 : max(_3539, 0.0));
                        float _3542 = isnan(1.0) ? _4904 : (isnan(_4904) ? 1.0 : min(_4904, 1.0));
                        float _3543 = dot(vec3(_1018, _1021, _1024), vec3(_3535 * _3529, _3535 * _3530, _3535 * _3531));
                        float _4915 = isnan(0.0) ? _3543 : (isnan(_3543) ? 0.0 : max(_3543, 0.0));
                        float _3546 = isnan(1.0) ? _4915 : (isnan(_4915) ? 1.0 : min(_4915, 1.0));
                        float _3550 = ((_3546 * _3546) * (_3528 + (-1.0))) + 1.0;
                        float _3551 = _3487 * _3527;
                        float _3552 = _3551 * _3551;
                        float _3555 = ((1.0 - _3552) * _3477) + _3552;
                        float _4926 = isnan(0.0) ? _3555 : (isnan(_3555) ? 0.0 : max(_3555, 0.0));
                        float _3556 = isnan(1.0) ? _4926 : (isnan(_4926) ? 1.0 : min(_4926, 1.0));
                        float _3557 = 1.0 - _3527;
                        float _3567 = (0.5 / (((_3556 * ((_3542 * _3557) + _3527)) + 9.9999999392252902907785028219223e-09) + (((_3556 * _3557) + _3527) * _3542))) * _3556;
                        float _4937 = isnan(0.0) ? _3567 : (isnan(_3567) ? 0.0 : max(_3567, 0.0));
                        float _3578 = (((_3528 * 3.1415927410125732421875) * (isnan(1.0) ? _4937 : (isnan(_4937) ? 1.0 : min(_4937, 1.0)))) / ((_3550 * _3550) * ((_3494 * 2.1991131305694580078125) + 3.141590118408203125))) * _3483;
                        _3336 = (_3498 * _3446.x) + _3404;
                        _3337 = (_3498 * _3446.y) + _3405;
                        _3338 = (_3498 * _3446.z) + _3406;
                        _3333 = (_3578 * _3463.x) + _3401;
                        _3334 = (_3578 * _3463.y) + _3402;
                        _3335 = (_3578 * _3463.z) + _3403;
                        if (_3408 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3401 = _3333;
                            _3402 = _3334;
                            _3403 = _3335;
                            _3404 = _3336;
                            _3405 = _3337;
                            _3406 = _3338;
                            _3407 = _3408;
                        }
                    }
                    frontier_phi_66_pred = _3338;
                    frontier_phi_66_pred_1 = _3337;
                    frontier_phi_66_pred_2 = _3336;
                    frontier_phi_66_pred_3 = _3335;
                    frontier_phi_66_pred_4 = _3334;
                    frontier_phi_66_pred_5 = _3333;
                }
                _3143 = frontier_phi_66_pred;
                _3141 = frontier_phi_66_pred_1;
                _3139 = frontier_phi_66_pred_2;
                _3137 = frontier_phi_66_pred_3;
                _3135 = frontier_phi_66_pred_4;
                _3133 = frontier_phi_66_pred_5;
                uint _3284 = _3283 + 1u;
                if (_3284 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3277 = _3133;
                    _3278 = _3135;
                    _3279 = _3137;
                    _3280 = _3139;
                    _3281 = _3141;
                    _3282 = _3143;
                    _3283 = _3284;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3132 = _3133;
            _3134 = _3135;
            _3136 = _3137;
            _3138 = _3139;
            _3140 = _3141;
            _3142 = _3143;
        }
        uvec4 _3146 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3147 = _3146.z;
        uint _3149 = (_3147 >> 8u) & 15u;
        float _3245;
        float _3247;
        float _3249;
        float _3251;
        float _3253;
        float _3255;
        if (((4294967295u << _3149) & _3052) == 0u)
        {
            _3245 = _3132;
            _3247 = _3134;
            _3249 = _3136;
            _3251 = _3138;
            _3253 = _3140;
            _3255 = _3142;
        }
        else
        {
            float _3270 = inversesqrt(dot(vec3(_2130, _2131, _2132), vec3(_2130, _2131, _2132)));
            float _3271 = _3270 * _2130;
            float _3272 = _3270 * _2131;
            float _3273 = _3270 * _2132;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_3149 < ((_3147 >> 12u) & 15u))
            {
                float _3246;
                float _3248;
                float _3250;
                float _3252;
                float _3254;
                float _3256;
                float _3384 = _3132;
                float _3385 = _3134;
                float _3386 = _3136;
                float _3387 = _3138;
                float _3388 = _3140;
                float _3389 = _3142;
                uint _3390 = _3149;
                uint _3399;
                bool _3400;
                for (;;)
                {
                    _3399 = texelFetch(g_lightClassification, int((((_3046 << 5u) + (_3032 << 9u)) + (_3390 << 2u)) >> 2u)).x;
                    _3400 = _3399 == 0u;
                    float frontier_phi_72_pred;
                    float frontier_phi_72_pred_1;
                    float frontier_phi_72_pred_2;
                    float frontier_phi_72_pred_3;
                    float frontier_phi_72_pred_4;
                    float frontier_phi_72_pred_5;
                    if (_3400)
                    {
                        frontier_phi_72_pred = _3389;
                        frontier_phi_72_pred_1 = _3388;
                        frontier_phi_72_pred_2 = _3387;
                        frontier_phi_72_pred_3 = _3386;
                        frontier_phi_72_pred_4 = _3385;
                        frontier_phi_72_pred_5 = _3384;
                    }
                    else
                    {
                        float _3583;
                        float _3584;
                        float _3585;
                        float _3586;
                        float _3587;
                        float _3588;
                        float _3876;
                        float _3877;
                        float _3878;
                        float _3879;
                        float _3880;
                        float _3881;
                        float _3596 = _3384;
                        float _3597 = _3385;
                        float _3598 = _3386;
                        float _3599 = _3387;
                        float _3600 = _3388;
                        float _3601 = _3389;
                        uint _3602 = _3399;
                        uint _3603;
                        vec4 _3628;
                        float _3629;
                        vec4 _3644;
                        vec3 _3656;
                        vec4 _3671;
                        vec4 _3686;
                        float _3732;
                        bool _3733;
                        for (;;)
                        {
                            uint _3613 = ((_3390 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3602));
                            _3603 = (_3602 + 4294967295u) & _3602;
                            uint _3615 = _3613 * 40u;
                            _3628 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3615)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3615 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3615 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3615 + 3u)).x));
                            _3629 = _3628.w;
                            uint _3631 = (_3613 * 40u) + 4u;
                            _3644 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3631)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3631 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3631 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3631 + 3u)).x));
                            uint _3646 = (_3613 * 40u) + 8u;
                            _3656 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3646)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3646 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3646 + 2u)).x));
                            uint _3658 = (_3613 * 40u) + 16u;
                            _3671 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3658)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3658 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3658 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3658 + 3u)).x));
                            uint _3673 = (_3613 * 40u) + 20u;
                            _3686 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3673)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3673 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3673 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3673 + 3u)).x));
                            uint _3688 = (_3613 * 40u) + 24u;
                            vec4 _3701 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3688)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3688 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3688 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3688 + 3u)).x));
                            uint _3707 = (_3613 * 40u) + 28u;
                            vec4 _3720 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3707)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3707 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3707 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3707 + 3u)).x));
                            _3732 = fma(_2132, _3720.z, fma(_2131, _3720.y, _3720.x * _2130)) + _3720.w;
                            _3733 = !((fma(_2132, _3701.z, fma(_2131, _3701.y, _3701.x * _2130)) + _3701.w) <= 0.0);
                            float frontier_phi_78_pred;
                            float frontier_phi_78_pred_1;
                            float frontier_phi_78_pred_2;
                            float frontier_phi_78_pred_3;
                            float frontier_phi_78_pred_4;
                            float frontier_phi_78_pred_5;
                            if (_3733)
                            {
                                float _3760 = _3628.x - _2130;
                                float _3761 = _3628.y - _2131;
                                float _3762 = _3628.z - _2132;
                                float _3763 = dot(vec3(_3760, _3761, _3762), vec3(_3760, _3761, _3762));
                                float _3766 = inversesqrt(_3763);
                                float _3767 = _3766 * _3760;
                                float _3768 = _3766 * _3761;
                                float _3769 = _3766 * _3762;
                                float _3773 = 1.0 - (_3763 / (_3629 * _3629));
                                float _4948 = isnan(0.0) ? _3773 : (isnan(_3773) ? 0.0 : max(_3773, 0.0));
                                float _3774 = isnan(1.0) ? _4948 : (isnan(_4948) ? 1.0 : min(_4948, 1.0));
                                float _3778 = sqrt(_3763) * _3644.w;
                                float _3780 = 1.39999997615814208984375 / (_3778 + 1.39999997615814208984375);
                                float _3781 = _3780 * _3780;
                                float _3784 = ((1.0 - _3781) * dot(vec3(_3767, _3768, _3769), vec3(_1018, _1021, _1024))) + _3781;
                                float _3787 = _3778 * _3778;
                                float _3791 = (fma(_2132, _3671.z, fma(_2131, _3671.y, _3671.x * _2130)) + _3671.w) / _3732;
                                float _3792 = (fma(_2132, _3686.z, fma(_2131, _3686.y, _3686.x * _2130)) + _3686.w) / _3732;
                                float _3796 = 1.0 - dot(vec2(_3791, _3792), vec2(_3791, _3792));
                                float _4964 = isnan(0.0) ? _3796 : (isnan(_3796) ? 0.0 : max(_3796, 0.0));
                                float _3797 = isnan(1.0) ? _4964 : (isnan(_4964) ? 1.0 : min(_4964, 1.0));
                                float _3798 = _3797 * (((isnan(0.0) ? _3784 : (isnan(_3784) ? 0.0 : max(_3784, 0.0))) * _3774) / ((_3787 * 0.699999988079071044921875) + 1.0));
                                float _3810 = exp2(log2(1.0 / ((_3787 * 3.5) + 5.0)) * 0.25);
                                float _3811 = 1.0 - _1078;
                                float _3818 = sqrt(1.0 - ((1.0 - (_3811 * _3811)) * (1.0 - (_3810 * _3810))));
                                float _3819 = _3818 * _3818;
                                float _3820 = _3819 * _3819;
                                float _3821 = _3767 - _3271;
                                float _3822 = _3768 - _3272;
                                float _3823 = _3769 - _3273;
                                float _3827 = inversesqrt(dot(vec3(_3821, _3822, _3823), vec3(_3821, _3822, _3823)));
                                float _3831 = dot(vec3(_1018, _1021, _1024), vec3((-0.0) - _3271, (-0.0) - _3272, (-0.0) - _3273));
                                float _4975 = isnan(0.0) ? _3831 : (isnan(_3831) ? 0.0 : max(_3831, 0.0));
                                float _3834 = isnan(1.0) ? _4975 : (isnan(_4975) ? 1.0 : min(_4975, 1.0));
                                float _3835 = dot(vec3(_1018, _1021, _1024), vec3(_3827 * _3821, _3827 * _3822, _3827 * _3823));
                                float _4986 = isnan(0.0) ? _3835 : (isnan(_3835) ? 0.0 : max(_3835, 0.0));
                                float _3838 = isnan(1.0) ? _4986 : (isnan(_4986) ? 1.0 : min(_4986, 1.0));
                                float _3842 = ((_3838 * _3838) * (_3820 + (-1.0))) + 1.0;
                                float _3843 = _3780 * _3819;
                                float _3844 = _3843 * _3843;
                                float _3850 = ((1.0 - _3844) * dot(vec3(_1018, _1021, _1024), vec3(_3767, _3768, _3769))) + _3844;
                                float _4997 = isnan(0.0) ? _3850 : (isnan(_3850) ? 0.0 : max(_3850, 0.0));
                                float _3851 = isnan(1.0) ? _4997 : (isnan(_4997) ? 1.0 : min(_4997, 1.0));
                                float _3852 = 1.0 - _3819;
                                float _3862 = (0.5 / (((_3851 * ((_3834 * _3852) + _3819)) + 9.9999999392252902907785028219223e-09) + (((_3851 * _3852) + _3819) * _3834))) * _3851;
                                float _5008 = isnan(0.0) ? _3862 : (isnan(_3862) ? 0.0 : max(_3862, 0.0));
                                float _3872 = (_3797 * _3774) * (((_3820 * 3.1415927410125732421875) * (isnan(1.0) ? _5008 : (isnan(_5008) ? 1.0 : min(_5008, 1.0)))) / ((_3842 * _3842) * ((_3787 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_78_pred = _3798 * _3644.y;
                                frontier_phi_78_pred_1 = _3798 * _3644.x;
                                frontier_phi_78_pred_2 = _3872 * _3656.z;
                                frontier_phi_78_pred_3 = _3872 * _3656.y;
                                frontier_phi_78_pred_4 = _3872 * _3656.x;
                                frontier_phi_78_pred_5 = _3798 * _3644.z;
                            }
                            else
                            {
                                frontier_phi_78_pred = 0.0;
                                frontier_phi_78_pred_1 = 0.0;
                                frontier_phi_78_pred_2 = 0.0;
                                frontier_phi_78_pred_3 = 0.0;
                                frontier_phi_78_pred_4 = 0.0;
                                frontier_phi_78_pred_5 = 0.0;
                            }
                            _3880 = frontier_phi_78_pred;
                            _3879 = frontier_phi_78_pred_1;
                            _3878 = frontier_phi_78_pred_2;
                            _3877 = frontier_phi_78_pred_3;
                            _3876 = frontier_phi_78_pred_4;
                            _3881 = frontier_phi_78_pred_5;
                            _3586 = _3879 + _3599;
                            _3587 = _3880 + _3600;
                            _3588 = _3881 + _3601;
                            _3583 = _3876 + _3596;
                            _3584 = _3877 + _3597;
                            _3585 = _3878 + _3598;
                            if (_3603 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3596 = _3583;
                                _3597 = _3584;
                                _3598 = _3585;
                                _3599 = _3586;
                                _3600 = _3587;
                                _3601 = _3588;
                                _3602 = _3603;
                                continue;
                            }
                        }
                        frontier_phi_72_pred = _3588;
                        frontier_phi_72_pred_1 = _3587;
                        frontier_phi_72_pred_2 = _3586;
                        frontier_phi_72_pred_3 = _3585;
                        frontier_phi_72_pred_4 = _3584;
                        frontier_phi_72_pred_5 = _3583;
                    }
                    _3256 = frontier_phi_72_pred;
                    _3254 = frontier_phi_72_pred_1;
                    _3252 = frontier_phi_72_pred_2;
                    _3250 = frontier_phi_72_pred_3;
                    _3248 = frontier_phi_72_pred_4;
                    _3246 = frontier_phi_72_pred_5;
                    uint _3391 = _3390 + 1u;
                    if (_3391 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3384 = _3246;
                        _3385 = _3248;
                        _3386 = _3250;
                        _3387 = _3252;
                        _3388 = _3254;
                        _3389 = _3256;
                        _3390 = _3391;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _3256;
                frontier_phi_60_61_ladder_1 = _3254;
                frontier_phi_60_61_ladder_2 = _3250;
                frontier_phi_60_61_ladder_3 = _3248;
                frontier_phi_60_61_ladder_4 = _3246;
                frontier_phi_60_61_ladder_5 = _3252;
            }
            else
            {
                frontier_phi_60_61_ladder = _3142;
                frontier_phi_60_61_ladder_1 = _3140;
                frontier_phi_60_61_ladder_2 = _3136;
                frontier_phi_60_61_ladder_3 = _3134;
                frontier_phi_60_61_ladder_4 = _3132;
                frontier_phi_60_61_ladder_5 = _3138;
            }
            _3245 = frontier_phi_60_61_ladder_4;
            _3247 = frontier_phi_60_61_ladder_3;
            _3249 = frontier_phi_60_61_ladder_2;
            _3251 = frontier_phi_60_61_ladder_5;
            _3253 = frontier_phi_60_61_ladder_1;
            _3255 = frontier_phi_60_61_ladder;
        }
        float _3260 = isnan(1.0) ? _1062 : (isnan(_1062) ? 1.0 : min(_1062, 1.0));
        _3065 = (_3260 * _3251) + _2596;
        _3067 = (_3260 * _3253) + _2598;
        _3069 = (_3260 * _3255) + _2600;
        _3071 = ((_3245 * 0.039999999105930328369140625) * _3260) + _2919;
        _3073 = ((_3247 * 0.039999999105930328369140625) * _3260) + _2921;
        _3075 = ((_3249 * 0.039999999105930328369140625) * _3260) + _2923;
    }
    else
    {
        _3065 = _2596;
        _3067 = _2598;
        _3069 = _2600;
        _3071 = _2919;
        _3073 = _2921;
        _3075 = _2923;
    }
    float _5024 = isnan(0.0) ? _1047 : (isnan(_1047) ? 0.0 : max(_1047, 0.0));
    float _5035 = isnan(0.0) ? _1048 : (isnan(_1048) ? 0.0 : max(_1048, 0.0));
    float _5046 = isnan(0.0) ? _1049 : (isnan(_1049) ? 0.0 : max(_1049, 0.0));
    uint _3095 = _276 + 6u;
    float _3103 = _999 / cbSceneParam._m0[86u].x;
    float _3104 = _1000 / cbSceneParam._m0[86u].y;
    vec4 _3118 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3103, _3104, (log2((isnan(cbSceneParam._m0[77u].w) ? _932 : (isnan(_932) ? cbSceneParam._m0[77u].w : min(_932, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3120 = _3118.x;
    float _3121 = _3118.y;
    float _3122 = _3118.z;
    float _3123 = _3118.w;
    float _3195;
    float _3197;
    float _3199;
    float _3201;
    if (_932 > cbSceneParam._m0[78u].w)
    {
        float _3157 = isnan(_932) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _932 : min(cbSceneParam._m0[80u].w, _932));
        float _3158 = _3157 / _932;
        float _3169 = _3158 * _984;
        float _3170 = _985 * _3158;
        float _3171 = (-0.0) - _3170;
        float _3173 = _3158 * _986;
        float _3175 = (cbSceneParam._m0[77u].w * _3171) / _3157;
        float _3176 = _3175 + cbSceneParam._m0[79u].w;
        float _3177 = cbSceneParam._m0[79u].w - _3170;
        float _3183 = sqrt(((_3169 * _3169) + (_3170 * _3170)) + (_3173 * _3173));
        float _3186 = (1.0 - (cbSceneParam._m0[77u].w / _3157)) * _3183;
        float _3191 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3193 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3346;
        if (abs((_3171 - _3175) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3346 = ((((_3176 > 0.0) ? exp2(_3191 * _3176) : (2.0 - exp2(_3193 * _3176))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3186;
        }
        else
        {
            float _3306 = 1.0 / cbSceneParam._m0[80u].x;
            float _3307 = isnan(_3177) ? _3176 : (isnan(_3176) ? _3177 : max(_3176, _3177));
            float _3308 = isnan(_3177) ? _3176 : (isnan(_3176) ? _3177 : min(_3176, _3177));
            float _3317 = isnan(0.0) ? _3307 : (isnan(_3307) ? 0.0 : min(_3307, 0.0));
            float _3318 = isnan(0.0) ? _3308 : (isnan(_3308) ? 0.0 : min(_3308, 0.0));
            _3346 = ((abs(_3183 / _3171) * cbSceneParam._m0[80u].y) * ((((_3317 - _3318) * 2.0) - ((exp2(_3191 * (isnan(0.0) ? _3307 : (isnan(_3307) ? 0.0 : max(_3307, 0.0)))) - exp2(_3191 * (isnan(0.0) ? _3308 : (isnan(_3308) ? 0.0 : max(_3308, 0.0))))) * _3306)) - ((exp2(_3193 * _3317) - exp2(_3193 * _3318)) * _3306))) + (_3186 * cbSceneParam._m0[80u].z);
        }
        vec4 _3348 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3103, _3104, 1.0), 0.0);
        float _3357 = exp2((_3346 * (-1.44269502162933349609375)) * (1.0 - _3348.w));
        float _3358 = log2(_3357);
        float _3374 = log2(_3123);
        _3195 = (exp2(_3374 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3358 * cbSceneParam._m0[78u].x)) * _3348.x) / cbSceneParam._m0[78u].x)) + _3120;
        _3197 = (exp2(_3374 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3358 * cbSceneParam._m0[78u].y)) * _3348.y) / cbSceneParam._m0[78u].y)) + _3121;
        _3199 = (exp2(_3374 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3358 * cbSceneParam._m0[78u].z)) * _3348.z) / cbSceneParam._m0[78u].z)) + _3122;
        _3201 = _3357 * _3123;
    }
    else
    {
        _3195 = _3120;
        _3197 = _3121;
        _3199 = _3122;
        _3201 = _3123;
    }
    float _3213 = roundEven(cbMatDynParam._m0[0u].y);
    bool _3214 = _3213 == 3.0;
    float _3215 = log2(_3201);
    float _3222 = exp2(_3215 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _5024 : (isnan(_5024) ? 1.0 : min(_5024, 1.0))) * (_3065 + ((isnan(0.0) ? _1786 : (isnan(_1786) ? 0.0 : max(_1786, 0.0))) * _1062))) + ((_3071 + ((isnan(0.0) ? _2077 : (isnan(_2077) ? 0.0 : max(_2077, 0.0))) * _1865)) * cbPerFrame._m0[3u].x));
    float _3223 = exp2(_3215 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _5035 : (isnan(_5035) ? 1.0 : min(_5035, 1.0))) * (_3067 + ((isnan(0.0) ? _1789 : (isnan(_1789) ? 0.0 : max(_1789, 0.0))) * _1062))) + ((_3073 + ((isnan(0.0) ? _2080 : (isnan(_2080) ? 0.0 : max(_2080, 0.0))) * _1865)) * cbPerFrame._m0[3u].x));
    float _3224 = exp2(_3215 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _5046 : (isnan(_5046) ? 1.0 : min(_5046, 1.0))) * (_3069 + ((isnan(0.0) ? _1792 : (isnan(_1792) ? 0.0 : max(_1792, 0.0))) * _1062))) + ((_3075 + ((isnan(0.0) ? _2083 : (isnan(_2083) ? 0.0 : max(_2083, 0.0))) * _1865)) * cbPerFrame._m0[3u].x));
    float _3233 = (_3213 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _3233 * (_3214 ? _3222 : (_3222 + (cbSceneParam._m0[72u].w * _3195)));
    SV_Target.y = _3233 * (_3214 ? _3223 : (_3223 + (cbSceneParam._m0[72u].w * _3197)));
    SV_Target.z = _3233 * (_3214 ? _3224 : (_3224 + (cbSceneParam._m0[72u].w * _3199)));
    SV_Target.w = cbInstanceData._m0[_3095].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_3095].w;
}


