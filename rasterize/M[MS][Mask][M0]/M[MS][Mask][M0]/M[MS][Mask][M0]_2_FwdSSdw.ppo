#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_0;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_6;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1049;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _200 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _201 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _202 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _208 = inversesqrt(dot(vec3(_200, _201, _202), vec3(_200, _201, _202)));
    float _215 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _222 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _228 = uint(roundEven(NORMAL.w)) * 13u;
    uint _234 = _228 + 1u;
    uint _238 = _228 + 2u;
    float _247 = sqrt(((cbInstanceData._m0[_234].x * cbInstanceData._m0[_234].x) + (cbInstanceData._m0[_228].x * cbInstanceData._m0[_228].x)) + (cbInstanceData._m0[_238].x * cbInstanceData._m0[_238].x));
    float _248 = _247 * TEXCOORD.z;
    float _249 = _247 * TEXCOORD.w;
    vec4 _268 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _292 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _297 = _292.x * cbMtdParam._m0[11u].x;
    float _298 = _292.y * cbMtdParam._m0[11u].y;
    float _299 = _292.z * cbMtdParam._m0[11u].z;
    vec4 _318 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _248) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _249) + cbTextureTilingScale._m0[5u].w));
    vec4 _372 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _374 = _372.x;
    float _386 = dot(vec4(_374, _372.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _403 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w)).x) * 2.0) - ((((_374 - _386) * cbMtdParam._m0[24u].z) + _386) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3382 = isnan(0.0) ? _403 : (isnan(_403) ? 0.0 : max(_403, 0.0));
    float _404 = isnan(1.0) ? _3382 : (isnan(_3382) ? 1.0 : min(_3382, 1.0));
    float _417 = ((cbMtdParam._m0[9u].x * 4.55000019073486328125) * _268.x) * ((_404 * ((_318.x * cbMtdParam._m0[12u].x) - _297)) + _297);
    float _420 = ((cbMtdParam._m0[9u].y * 4.55000019073486328125) * _268.y) * ((_404 * ((_318.y * cbMtdParam._m0[12u].y) - _298)) + _298);
    float _423 = ((cbMtdParam._m0[9u].z * 4.55000019073486328125) * _268.z) * ((_404 * ((_318.z * cbMtdParam._m0[12u].z) - _299)) + _299);
    vec4 _436 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _248) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _249) + cbTextureTilingScale._m0[4u].w));
    vec4 _453 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _455 = _453.x;
    float _456 = _453.y;
    float _457 = _453.z;
    float _466 = ((_436.z - _457) * _404) + _457;
    float _469 = ((((_436.x - _455) * _404) + _455) * 2.0) + (-1.0);
    float _471 = ((((_436.y - _456) * _404) + _456) * 2.0) + (-1.0);
    float _472 = dot(vec2(_469, _471), vec2(_469, _471));
    float _3393 = isnan(0.0) ? _472 : (isnan(_472) ? 0.0 : max(_472, 0.0));
    float _477 = sqrt(1.0 - (isnan(1.0) ? _3393 : (isnan(_3393) ? 1.0 : min(_3393, 1.0))));
    vec4 _493 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _505 = (((_493.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _469;
    float _506 = (((_493.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _471;
    float _510 = (cbMtdParam._m0[19u].w * (_493.z - _466)) + _466;
    float _514 = cbMtdParam._m0[22u].x + _493.w;
    float _517 = fma(_477, _215 * NORMAL.x, fma(_506, _222 * TANGENT.x, (_208 * _200) * _505));
    float _520 = fma(_477, _215 * NORMAL.y, fma(_506, _222 * TANGENT.y, (_208 * _201) * _505));
    float _523 = fma(_477, _215 * NORMAL.z, fma(_506, _222 * TANGENT.z, (_208 * _202) * _505));
    float _527 = inversesqrt(dot(vec3(_517, _520, _523), vec3(_517, _520, _523)));
    float _528 = _527 * _517;
    float _529 = _527 * _520;
    float _530 = _527 * _523;
    float _3404 = isnan(0.0) ? _510 : (isnan(_510) ? 0.0 : max(_510, 0.0));
    float _531 = isnan(1.0) ? _3404 : (isnan(_3404) ? 1.0 : min(_3404, 1.0));
    float _3415 = isnan(0.0) ? _514 : (isnan(_514) ? 0.0 : max(_514, 0.0));
    float _3426 = isnan(0.0) ? _417 : (isnan(_417) ? 0.0 : max(_417, 0.0));
    float _3437 = isnan(0.0) ? _420 : (isnan(_420) ? 0.0 : max(_420, 0.0));
    float _3448 = isnan(0.0) ? _423 : (isnan(_423) ? 0.0 : max(_423, 0.0));
    float _549 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _590 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _600 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _590);
    float _601 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _590);
    float _602 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _590);
    float _606 = inversesqrt(dot(vec3(_600, _601, _602), vec3(_600, _601, _602)));
    float _607 = _600 * _606;
    float _608 = _601 * _606;
    float _609 = _602 * _606;
    float _615 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _616 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _634 = fma(_530, cbSceneParam._m0[5u].z, fma(_529, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _528));
    float _637 = fma(_530, cbSceneParam._m0[6u].z, fma(_529, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _528));
    float _640 = fma(_530, cbSceneParam._m0[7u].z, fma(_529, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _528));
    uint _654 = (_228 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _660 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3426 : (isnan(_3426) ? 1.0 : min(_3426, 1.0)))) * cbInstanceData._m0[_654].x;
    float _661 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3437 : (isnan(_3437) ? 1.0 : min(_3437, 1.0)))) * cbInstanceData._m0[_654].y;
    float _662 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3448 : (isnan(_3448) ? 1.0 : min(_3448, 1.0)))) * cbInstanceData._m0[_654].z;
    float _3459 = isnan(0.0) ? _660 : (isnan(_660) ? 0.0 : max(_660, 0.0));
    float _663 = isnan(1.0) ? _3459 : (isnan(_3459) ? 1.0 : min(_3459, 1.0));
    float _3470 = isnan(0.0) ? _661 : (isnan(_661) ? 0.0 : max(_661, 0.0));
    float _664 = isnan(1.0) ? _3470 : (isnan(_3470) ? 1.0 : min(_3470, 1.0));
    float _3481 = isnan(0.0) ? _662 : (isnan(_662) ? 0.0 : max(_662, 0.0));
    float _665 = isnan(1.0) ? _3481 : (isnan(_3481) ? 1.0 : min(_3481, 1.0));
    vec4 _674 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _615, cbSceneParam._m0[86u].y * _616));
    float _678 = ((isnan(1.0) ? _3415 : (isnan(_3415) ? 1.0 : min(_3415, 1.0))) * TEXCOORD_5.w) * _674.x;
    float _679 = dot(vec3(_528, _529, _530), vec3(_607, _608, _609));
    float _682 = _679 * 2.0;
    float _686 = (_682 * _528) - _607;
    float _687 = (_682 * _529) - _608;
    float _688 = (_682 * _530) - _609;
    float _692 = abs(dot(vec3(_607, _608, _609), vec3(_528, _529, _530)));
    float _3492 = isnan(0.0) ? _692 : (isnan(_692) ? 0.0 : max(_692, 0.0));
    float _694 = sqrt(_531);
    float _707 = exp2((_694 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3492 : (isnan(_3492) ? 1.0 : min(_3492, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_694 * 3.0));
    float _739 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _743 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _747 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1048;
    float _1050;
    float _1051;
    float _1052;
    float _1053;
    float _1054;
    float _1055;
    float _1056;
    float _1057;
    float _1058;
    float _1059;
    float _1060;
    float _1061;
    float _1062;
    float _1063;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _773 = fma(_747, cbModelParam._m0[26u].z, fma(_743, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _739));
        float _777 = fma(_747, cbModelParam._m0[27u].z, fma(_743, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _739));
        float _781 = fma(_747, cbModelParam._m0[28u].z, fma(_743, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _739));
        float _806 = _739 + _528;
        float _807 = _743 + _529;
        float _808 = _747 + _530;
        float _818 = fma(_808, cbModelParam._m0[26u].z, fma(_807, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _806)) - _773;
        float _819 = fma(_808, cbModelParam._m0[27u].z, fma(_807, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _806)) - _777;
        float _820 = fma(_808, cbModelParam._m0[28u].z, fma(_807, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _806)) - _781;
        float _824 = inversesqrt(dot(vec3(_818, _819, _820), vec3(_818, _819, _820)));
        float _837 = ((_824 * _818) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_773 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _838 = ((_824 * _819) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_777 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _839 = ((_824 * _820) / cbModelParam._m0[34u].z) + ((((((_781 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _842 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_837, _838, _839), 0.0);
        vec4 _849 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_837, _838, _839), 0.0);
        vec4 _856 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_837, _838, _839), 0.0);
        vec4 _863 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_837, _838, _839), 0.0);
        float _876 = exp2((_842.w + (-0.5)) * 20.0) * 2.0;
        float _877 = _876 * (_842.x + (-0.5));
        float _878 = _876 * (_842.y + (-0.5));
        float _879 = _876 * (_842.z + (-0.5));
        float _886 = exp2((_849.w + (-0.5)) * 20.0) * 2.0;
        float _887 = _886 * (_849.x + (-0.5));
        float _888 = _886 * (_849.y + (-0.5));
        float _889 = _886 * (_849.z + (-0.5));
        float _896 = exp2((_856.w + (-0.5)) * 20.0) * 2.0;
        float _897 = _896 * (_856.x + (-0.5));
        float _898 = _896 * (_856.y + (-0.5));
        float _899 = _896 * (_856.z + (-0.5));
        float _906 = exp2((_863.w + (-0.5)) * 20.0) * 2.0;
        float _907 = _906 * (_863.x + (-0.5));
        float _908 = _906 * (_863.y + (-0.5));
        float _909 = _906 * (_863.z + (-0.5));
        float _910 = isnan(0.0) ? _907 : (isnan(_907) ? 0.0 : max(_907, 0.0));
        float _911 = isnan(0.0) ? _908 : (isnan(_908) ? 0.0 : max(_908, 0.0));
        float _912 = isnan(0.0) ? _909 : (isnan(_909) ? 0.0 : max(_909, 0.0));
        float _913 = _877 * 0.5;
        float _914 = _887 * 0.5;
        float _915 = _897 * 0.5;
        float _916 = dot(vec3(_913, _914, _915), vec3(_913, _914, _915));
        float _921 = (_916 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_916);
        float _930 = (dot(vec3(_528, _529, _530), vec3(_921 * _913, _921 * _914, _921 * _915)) + 1.0) * 0.5;
        float _3518 = isnan(0.0) ? _930 : (isnan(_930) ? 0.0 : max(_930, 0.0));
        float _940 = sqrt(((_914 * _914) + (_913 * _913)) + (_915 * _915)) / (_910 + 9.9999997473787516355514526367188e-06);
        float _3529 = isnan(0.0) ? _940 : (isnan(_940) ? 0.0 : max(_940, 0.0));
        float _941 = isnan(1.0) ? _3529 : (isnan(_3529) ? 1.0 : min(_3529, 1.0));
        float _942 = _941 * 2.0;
        float _946 = (1.0 - _941) / (_941 + 1.0);
        float _3540 = isnan(0.0) ? _946 : (isnan(_946) ? 0.0 : max(_946, 0.0));
        float _947 = isnan(1.0) ? _3540 : (isnan(_3540) ? 1.0 : min(_3540, 1.0));
        float _956 = ((((1.0 - _947) * (_942 + 2.0)) * exp2(log2(isnan(1.0) ? _3518 : (isnan(_3518) ? 1.0 : min(_3518, 1.0))) * (_942 + 1.0))) + _947) * _910;
        float _957 = _878 * 0.5;
        float _958 = _888 * 0.5;
        float _959 = _898 * 0.5;
        float _960 = dot(vec3(_957, _958, _959), vec3(_957, _958, _959));
        float _965 = (_960 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_960);
        float _973 = (dot(vec3(_528, _529, _530), vec3(_965 * _957, _965 * _958, _965 * _959)) + 1.0) * 0.5;
        float _3551 = isnan(0.0) ? _973 : (isnan(_973) ? 0.0 : max(_973, 0.0));
        float _982 = sqrt(((_958 * _958) + (_957 * _957)) + (_959 * _959)) / (_911 + 9.9999997473787516355514526367188e-06);
        float _3562 = isnan(0.0) ? _982 : (isnan(_982) ? 0.0 : max(_982, 0.0));
        float _983 = isnan(1.0) ? _3562 : (isnan(_3562) ? 1.0 : min(_3562, 1.0));
        float _984 = _983 * 2.0;
        float _988 = (1.0 - _983) / (_983 + 1.0);
        float _3573 = isnan(0.0) ? _988 : (isnan(_988) ? 0.0 : max(_988, 0.0));
        float _989 = isnan(1.0) ? _3573 : (isnan(_3573) ? 1.0 : min(_3573, 1.0));
        float _998 = ((((1.0 - _989) * (_984 + 2.0)) * exp2(log2(isnan(1.0) ? _3551 : (isnan(_3551) ? 1.0 : min(_3551, 1.0))) * (_984 + 1.0))) + _989) * _911;
        float _999 = _879 * 0.5;
        float _1000 = _889 * 0.5;
        float _1001 = _899 * 0.5;
        float _1002 = dot(vec3(_999, _1000, _1001), vec3(_999, _1000, _1001));
        float _1007 = (_1002 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1002);
        float _1015 = (dot(vec3(_528, _529, _530), vec3(_1007 * _999, _1007 * _1000, _1007 * _1001)) + 1.0) * 0.5;
        float _3584 = isnan(0.0) ? _1015 : (isnan(_1015) ? 0.0 : max(_1015, 0.0));
        float _1024 = sqrt(((_1000 * _1000) + (_999 * _999)) + (_1001 * _1001)) / (_912 + 9.9999997473787516355514526367188e-06);
        float _3595 = isnan(0.0) ? _1024 : (isnan(_1024) ? 0.0 : max(_1024, 0.0));
        float _1025 = isnan(1.0) ? _3595 : (isnan(_3595) ? 1.0 : min(_3595, 1.0));
        float _1026 = _1025 * 2.0;
        float _1030 = (1.0 - _1025) / (_1025 + 1.0);
        float _3606 = isnan(0.0) ? _1030 : (isnan(_1030) ? 0.0 : max(_1030, 0.0));
        float _1031 = isnan(1.0) ? _3606 : (isnan(_3606) ? 1.0 : min(_3606, 1.0));
        float _1040 = ((((1.0 - _1031) * (_1026 + 2.0)) * exp2(log2(isnan(1.0) ? _3584 : (isnan(_3584) ? 1.0 : min(_3584, 1.0))) * (_1026 + 1.0))) + _1031) * _912;
        _1048 = _879;
        _1050 = _878;
        _1051 = _877;
        _1052 = _889;
        _1053 = _888;
        _1054 = _887;
        _1055 = _899;
        _1056 = _898;
        _1057 = _897;
        _1058 = _912;
        _1059 = _911;
        _1060 = _910;
        _1061 = cbModelParam._m0[36u].z * (isnan(0.0) ? _956 : (isnan(_956) ? 0.0 : max(_956, 0.0)));
        _1062 = cbModelParam._m0[36u].z * (isnan(0.0) ? _998 : (isnan(_998) ? 0.0 : max(_998, 0.0)));
        _1063 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1040 : (isnan(_1040) ? 0.0 : max(_1040, 0.0)));
    }
    else
    {
        _1048 = _1049;
        _1050 = _1049;
        _1051 = _1049;
        _1052 = _1049;
        _1053 = _1049;
        _1054 = _1049;
        _1055 = _1049;
        _1056 = _1049;
        _1057 = _1049;
        _1058 = _1049;
        _1059 = _1049;
        _1060 = _1049;
        _1061 = 0.0;
        _1062 = 0.0;
        _1063 = 0.0;
    }
    float _1357;
    float _1358;
    float _1359;
    float _1360;
    float _1361;
    float _1362;
    float _1363;
    float _1364;
    float _1365;
    float _1366;
    float _1367;
    float _1368;
    float _1369;
    float _1370;
    float _1371;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1088 = fma(_747, cbModelParam._m0[30u].z, fma(_743, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _739));
        float _1092 = fma(_747, cbModelParam._m0[31u].z, fma(_743, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _739));
        float _1096 = fma(_747, cbModelParam._m0[32u].z, fma(_743, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _739));
        float _1119 = _739 + _528;
        float _1120 = _743 + _529;
        float _1121 = _747 + _530;
        float _1131 = fma(_1121, cbModelParam._m0[30u].z, fma(_1120, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1119)) - _1088;
        float _1132 = fma(_1121, cbModelParam._m0[31u].z, fma(_1120, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1119)) - _1092;
        float _1133 = fma(_1121, cbModelParam._m0[32u].z, fma(_1120, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1119)) - _1096;
        float _1137 = inversesqrt(dot(vec3(_1131, _1132, _1133), vec3(_1131, _1132, _1133)));
        float _1150 = ((_1137 * _1131) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1088 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1151 = ((_1137 * _1132) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1092 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1152 = ((_1137 * _1133) / cbModelParam._m0[35u].z) + ((((((_1096 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1154 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1150, _1151, _1152), 0.0);
        vec4 _1161 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1150, _1151, _1152), 0.0);
        vec4 _1168 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1150, _1151, _1152), 0.0);
        vec4 _1175 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1150, _1151, _1152), 0.0);
        float _1187 = exp2((_1154.w + (-0.5)) * 20.0) * 2.0;
        float _1188 = _1187 * (_1154.x + (-0.5));
        float _1189 = _1187 * (_1154.y + (-0.5));
        float _1190 = _1187 * (_1154.z + (-0.5));
        float _1197 = exp2((_1161.w + (-0.5)) * 20.0) * 2.0;
        float _1198 = _1197 * (_1161.x + (-0.5));
        float _1199 = _1197 * (_1161.y + (-0.5));
        float _1200 = _1197 * (_1161.z + (-0.5));
        float _1207 = exp2((_1168.w + (-0.5)) * 20.0) * 2.0;
        float _1208 = _1207 * (_1168.x + (-0.5));
        float _1209 = _1207 * (_1168.y + (-0.5));
        float _1210 = _1207 * (_1168.z + (-0.5));
        float _1217 = exp2((_1175.w + (-0.5)) * 20.0) * 2.0;
        float _1218 = _1217 * (_1175.x + (-0.5));
        float _1219 = _1217 * (_1175.y + (-0.5));
        float _1220 = _1217 * (_1175.z + (-0.5));
        float _1221 = isnan(0.0) ? _1218 : (isnan(_1218) ? 0.0 : max(_1218, 0.0));
        float _1222 = isnan(0.0) ? _1219 : (isnan(_1219) ? 0.0 : max(_1219, 0.0));
        float _1223 = isnan(0.0) ? _1220 : (isnan(_1220) ? 0.0 : max(_1220, 0.0));
        float _1224 = _1188 * 0.5;
        float _1225 = _1198 * 0.5;
        float _1226 = _1208 * 0.5;
        float _1227 = dot(vec3(_1224, _1225, _1226), vec3(_1224, _1225, _1226));
        float _1232 = (_1227 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1227);
        float _1240 = (dot(vec3(_528, _529, _530), vec3(_1232 * _1224, _1232 * _1225, _1232 * _1226)) + 1.0) * 0.5;
        float _3647 = isnan(0.0) ? _1240 : (isnan(_1240) ? 0.0 : max(_1240, 0.0));
        float _1249 = sqrt(((_1225 * _1225) + (_1224 * _1224)) + (_1226 * _1226)) / (_1221 + 9.9999997473787516355514526367188e-06);
        float _3658 = isnan(0.0) ? _1249 : (isnan(_1249) ? 0.0 : max(_1249, 0.0));
        float _1250 = isnan(1.0) ? _3658 : (isnan(_3658) ? 1.0 : min(_3658, 1.0));
        float _1251 = _1250 * 2.0;
        float _1255 = (1.0 - _1250) / (_1250 + 1.0);
        float _3669 = isnan(0.0) ? _1255 : (isnan(_1255) ? 0.0 : max(_1255, 0.0));
        float _1256 = isnan(1.0) ? _3669 : (isnan(_3669) ? 1.0 : min(_3669, 1.0));
        float _1265 = ((((1.0 - _1256) * (_1251 + 2.0)) * exp2(log2(isnan(1.0) ? _3647 : (isnan(_3647) ? 1.0 : min(_3647, 1.0))) * (_1251 + 1.0))) + _1256) * _1221;
        float _1266 = _1189 * 0.5;
        float _1267 = _1199 * 0.5;
        float _1268 = _1209 * 0.5;
        float _1269 = dot(vec3(_1266, _1267, _1268), vec3(_1266, _1267, _1268));
        float _1274 = (_1269 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1269);
        float _1282 = (dot(vec3(_528, _529, _530), vec3(_1274 * _1266, _1274 * _1267, _1274 * _1268)) + 1.0) * 0.5;
        float _3680 = isnan(0.0) ? _1282 : (isnan(_1282) ? 0.0 : max(_1282, 0.0));
        float _1291 = sqrt(((_1267 * _1267) + (_1266 * _1266)) + (_1268 * _1268)) / (_1222 + 9.9999997473787516355514526367188e-06);
        float _3691 = isnan(0.0) ? _1291 : (isnan(_1291) ? 0.0 : max(_1291, 0.0));
        float _1292 = isnan(1.0) ? _3691 : (isnan(_3691) ? 1.0 : min(_3691, 1.0));
        float _1293 = _1292 * 2.0;
        float _1297 = (1.0 - _1292) / (_1292 + 1.0);
        float _3702 = isnan(0.0) ? _1297 : (isnan(_1297) ? 0.0 : max(_1297, 0.0));
        float _1298 = isnan(1.0) ? _3702 : (isnan(_3702) ? 1.0 : min(_3702, 1.0));
        float _1307 = ((((1.0 - _1298) * (_1293 + 2.0)) * exp2(log2(isnan(1.0) ? _3680 : (isnan(_3680) ? 1.0 : min(_3680, 1.0))) * (_1293 + 1.0))) + _1298) * _1222;
        float _1308 = _1190 * 0.5;
        float _1309 = _1200 * 0.5;
        float _1310 = _1210 * 0.5;
        float _1311 = dot(vec3(_1308, _1309, _1310), vec3(_1308, _1309, _1310));
        float _1316 = (_1311 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1311);
        float _1324 = (dot(vec3(_528, _529, _530), vec3(_1316 * _1308, _1316 * _1309, _1316 * _1310)) + 1.0) * 0.5;
        float _3713 = isnan(0.0) ? _1324 : (isnan(_1324) ? 0.0 : max(_1324, 0.0));
        float _1333 = sqrt(((_1309 * _1309) + (_1308 * _1308)) + (_1310 * _1310)) / (_1223 + 9.9999997473787516355514526367188e-06);
        float _3724 = isnan(0.0) ? _1333 : (isnan(_1333) ? 0.0 : max(_1333, 0.0));
        float _1334 = isnan(1.0) ? _3724 : (isnan(_3724) ? 1.0 : min(_3724, 1.0));
        float _1335 = _1334 * 2.0;
        float _1339 = (1.0 - _1334) / (_1334 + 1.0);
        float _3735 = isnan(0.0) ? _1339 : (isnan(_1339) ? 0.0 : max(_1339, 0.0));
        float _1340 = isnan(1.0) ? _3735 : (isnan(_3735) ? 1.0 : min(_3735, 1.0));
        float _1349 = ((((1.0 - _1340) * (_1335 + 2.0)) * exp2(log2(isnan(1.0) ? _3713 : (isnan(_3713) ? 1.0 : min(_3713, 1.0))) * (_1335 + 1.0))) + _1340) * _1223;
        _1357 = _1190;
        _1358 = _1189;
        _1359 = _1188;
        _1360 = _1200;
        _1361 = _1199;
        _1362 = _1198;
        _1363 = _1210;
        _1364 = _1209;
        _1365 = _1208;
        _1366 = _1223;
        _1367 = _1222;
        _1368 = _1221;
        _1369 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1265 : (isnan(_1265) ? 0.0 : max(_1265, 0.0)));
        _1370 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1307 : (isnan(_1307) ? 0.0 : max(_1307, 0.0)));
        _1371 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1349 : (isnan(_1349) ? 0.0 : max(_1349, 0.0)));
    }
    else
    {
        _1357 = _1049;
        _1358 = _1049;
        _1359 = _1049;
        _1360 = _1049;
        _1361 = _1049;
        _1362 = _1049;
        _1363 = _1049;
        _1364 = _1049;
        _1365 = _1049;
        _1366 = _1049;
        _1367 = _1049;
        _1368 = _1049;
        _1369 = 0.0;
        _1370 = 0.0;
        _1371 = 0.0;
    }
    float _1381 = (cbModelParam._m0[1u].x * (_1369 - _1061)) + _1061;
    float _1382 = (cbModelParam._m0[1u].x * (_1370 - _1062)) + _1062;
    float _1383 = (cbModelParam._m0[1u].x * (_1371 - _1063)) + _1063;
    float _1404 = fma(_1383, cbSceneParam._m0[89u].z, fma(_1382, cbSceneParam._m0[89u].y, _1381 * cbSceneParam._m0[89u].x));
    float _1407 = fma(_1383, cbSceneParam._m0[90u].z, fma(_1382, cbSceneParam._m0[90u].y, _1381 * cbSceneParam._m0[90u].x));
    float _1410 = fma(_1383, cbSceneParam._m0[91u].z, fma(_1382, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1381));
    float _1425 = _686 * 0.5;
    float _1426 = _687 * 0.5;
    float _1427 = _688 * 0.5;
    float _1428 = dot(vec4(_1425, _1426, _1427, 1.0), vec4(_1359, _1362, _1365, _1368));
    float _1431 = dot(vec4(_1425, _1426, _1427, 1.0), vec4(_1358, _1361, _1364, _1367));
    float _1434 = dot(vec4(_1425, _1426, _1427, 1.0), vec4(_1357, _1360, _1363, _1366));
    float _1468;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1441 = dot(vec4(_1425, _1426, _1427, 1.0), vec4(_1048, _1052, _1055, _1058));
        float _1445 = dot(vec4(_1425, _1426, _1427, 1.0), vec4(_1050, _1053, _1056, _1059));
        float _1449 = dot(vec4(_1425, _1426, _1427, 1.0), vec4(_1051, _1054, _1057, _1060));
        float _1456 = dot(vec4(cbModelParam._m0[39u]), vec4(_1425, _1426, _1427, 1.0));
        _1468 = dot(vec3(isnan(0.0) ? _1449 : (isnan(_1449) ? 0.0 : max(_1449, 0.0)), isnan(0.0) ? _1445 : (isnan(_1445) ? 0.0 : max(_1445, 0.0)), isnan(0.0) ? _1441 : (isnan(_1441) ? 0.0 : max(_1441, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1456) ? 0.0 : (isnan(0.0) ? _1456 : max(0.0, _1456))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1468 = 1.0;
    }
    float _1479;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1470 = dot(vec4(cbModelParam._m0[40u]), vec4(_1425, _1426, _1427, 1.0));
        _1479 = dot(vec3(isnan(0.0) ? _1428 : (isnan(_1428) ? 0.0 : max(_1428, 0.0)), isnan(0.0) ? _1431 : (isnan(_1431) ? 0.0 : max(_1431, 0.0)), isnan(0.0) ? _1434 : (isnan(_1434) ? 0.0 : max(_1434, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1470) ? 0.0 : (isnan(0.0) ? _1470 : max(0.0, _1470))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1479 = 1.0;
    }
    float _1483 = (_1479 * cbModelParam._m0[1u].x) + (_1468 * (1.0 - cbModelParam._m0[1u].x));
    float _1493 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _531);
    float _1494 = isnan(_1493) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1493 : min(cbModelParam._m0[25u].z, _1493));
    float _1576;
    float _1578;
    float _1580;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1543 = fma(_747, cbModelParam._m0[13u].z, fma(_743, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _739)) + cbModelParam._m0[13u].w;
        float _1547 = fma(_747, cbModelParam._m0[14u].z, fma(_743, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _739)) + cbModelParam._m0[14u].w;
        float _1551 = fma(_747, cbModelParam._m0[15u].z, fma(_743, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _739)) + cbModelParam._m0[15u].w;
        float _1554 = fma(_688, cbModelParam._m0[13u].z, fma(_687, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _686));
        float _1557 = fma(_688, cbModelParam._m0[14u].z, fma(_687, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _686));
        float _1560 = fma(_688, cbModelParam._m0[15u].z, fma(_687, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _686));
        float _1588;
        if (_1554 > 0.0)
        {
            _1588 = abs((1.0 - _1543) / _1554);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1554 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1543 + 1.0) / _1554);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1588 = frontier_phi_14_12_ladder;
        }
        float _1811;
        if (_1557 > 0.0)
        {
            _1811 = abs((1.0 - _1547) / _1557);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1557 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1547 + 1.0) / _1557);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1811 = frontier_phi_23_19_ladder;
        }
        float _2057;
        if (_1560 > 0.0)
        {
            _2057 = abs((1.0 - _1551) / _1560);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1560 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1551 + 1.0) / _1560);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2057 = frontier_phi_35_30_ladder;
        }
        float _2059 = isnan(_1811) ? _1588 : (isnan(_1588) ? _1811 : min(_1588, _1811));
        float _2060 = isnan(_2057) ? _2059 : (isnan(_2059) ? _2057 : min(_2059, _2057));
        float _2064 = (_2060 * _1554) + _1543;
        float _2065 = (_2060 * _1557) + _1547;
        float _2066 = (_2060 * _1560) + _1551;
        float _2067 = _2060 * 9.9999997473787516355514526367188e-05;
        float _2069 = (-1.0) - _2067;
        float _2071 = _2067 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2066 > _2071) || ((_2066 < _2069) || ((_2065 > _2071) || ((_2065 < _2069) || ((_2064 < _2069) || (_2064 > _2071))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2190 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2066, cbModelParam._m0[9u].z, fma(_2065, cbModelParam._m0[9u].y, _2064 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2066, cbModelParam._m0[10u].z, fma(_2065, cbModelParam._m0[10u].y, _2064 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2066, cbModelParam._m0[11u].z, fma(_2065, cbModelParam._m0[11u].y, _2064 * cbModelParam._m0[11u].x))), _1494);
            frontier_phi_13_35_ladder = _2190.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2190.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2190.x * cbModelParam._m0[1u].y;
        }
        _1576 = frontier_phi_13_35_ladder_2;
        _1578 = frontier_phi_13_35_ladder_1;
        _1580 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1564 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_686, _687, _688), _1494);
        _1576 = _1564.x * cbModelParam._m0[1u].y;
        _1578 = _1564.y * cbModelParam._m0[1u].y;
        _1580 = _1564.z * cbModelParam._m0[1u].y;
    }
    float _1584 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _531);
    float _1585 = isnan(_1584) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1584 : min(cbModelParam._m0[25u].w, _1584));
    float _1676;
    float _1678;
    float _1680;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1640 = fma(_747, cbModelParam._m0[21u].z, fma(_743, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _739)) + cbModelParam._m0[21u].w;
        float _1644 = fma(_747, cbModelParam._m0[22u].z, fma(_743, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _739)) + cbModelParam._m0[22u].w;
        float _1648 = fma(_747, cbModelParam._m0[23u].z, fma(_743, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _739)) + cbModelParam._m0[23u].w;
        float _1651 = fma(_688, cbModelParam._m0[21u].z, fma(_687, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _686));
        float _1654 = fma(_688, cbModelParam._m0[22u].z, fma(_687, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _686));
        float _1657 = fma(_688, cbModelParam._m0[23u].z, fma(_687, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _686));
        float _1816;
        if (_1651 > 0.0)
        {
            _1816 = abs((1.0 - _1640) / _1651);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1651 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1640 + 1.0) / _1651);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1816 = frontier_phi_25_21_ladder;
        }
        float _2084;
        if (_1654 > 0.0)
        {
            _2084 = abs((1.0 - _1644) / _1654);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1654 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1644 + 1.0) / _1654);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2084 = frontier_phi_37_32_ladder;
        }
        float _2289;
        if (_1657 > 0.0)
        {
            _2289 = abs((1.0 - _1648) / _1657);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1657 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1648 + 1.0) / _1657);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2289 = frontier_phi_46_43_ladder;
        }
        float _2291 = isnan(_2084) ? _1816 : (isnan(_1816) ? _2084 : min(_1816, _2084));
        float _2292 = isnan(_2289) ? _2291 : (isnan(_2291) ? _2289 : min(_2291, _2289));
        float _2296 = (_2292 * _1651) + _1640;
        float _2297 = (_2292 * _1654) + _1644;
        float _2298 = (_2292 * _1657) + _1648;
        float _2299 = _2292 * 9.9999997473787516355514526367188e-05;
        float _2300 = (-1.0) - _2299;
        float _2302 = _2299 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2298 > _2302) || ((_2298 < _2300) || ((_2297 > _2302) || ((_2297 < _2300) || ((_2296 < _2300) || (_2296 > _2302))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2497 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2298, cbModelParam._m0[17u].z, fma(_2297, cbModelParam._m0[17u].y, _2296 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2298, cbModelParam._m0[18u].z, fma(_2297, cbModelParam._m0[18u].y, _2296 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2298, cbModelParam._m0[19u].z, fma(_2297, cbModelParam._m0[19u].y, _2296 * cbModelParam._m0[19u].x))), _1585);
            frontier_phi_22_46_ladder = _2497.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2497.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2497.x * cbModelParam._m0[1u].z;
        }
        _1676 = frontier_phi_22_46_ladder_2;
        _1678 = frontier_phi_22_46_ladder_1;
        _1680 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1660 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_686, _687, _688), _1585);
        _1676 = _1660.x * cbModelParam._m0[1u].z;
        _1678 = _1660.y * cbModelParam._m0[1u].z;
        _1680 = _1660.z * cbModelParam._m0[1u].z;
    }
    float _1692 = ((((1.0 - _707) * ((_694 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_707 * _694)) * _678;
    float _1693 = _1692 * ((cbModelParam._m0[1u].w * (_1676 - _1576)) + _1576);
    float _1694 = _1692 * ((cbModelParam._m0[1u].w * (_1678 - _1578)) + _1578);
    float _1695 = _1692 * ((cbModelParam._m0[1u].w * (_1680 - _1580)) + _1580);
    float _1698 = fma(_1695, cbSceneParam._m0[89u].z, fma(_1694, cbSceneParam._m0[89u].y, _1693 * cbSceneParam._m0[89u].x));
    float _1701 = fma(_1695, cbSceneParam._m0[90u].z, fma(_1694, cbSceneParam._m0[90u].y, _1693 * cbSceneParam._m0[90u].x));
    float _1704 = fma(_1695, cbSceneParam._m0[91u].z, fma(_1694, cbSceneParam._m0[91u].y, _1693 * cbSceneParam._m0[91u].x));
    vec4 _1712 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_615, _616));
    float _1714 = _1712.w;
    float _1726 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1714);
    float _1727 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1714);
    float _1728 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1714);
    uvec4 _1732 = floatBitsToUint(cbInstanceData._m0[_228 + 5u]);
    uint _1734 = _1732.x * 14u;
    uint _1735 = _1734 + 13u;
    float _1742 = _678 + (-1.0);
    float _1747 = (cbLight._m0[_1735].x * _1742) + 1.0;
    float _1748 = (cbLight._m0[_1735].y * _1742) + 1.0;
    float _1749 = (cbLight._m0[_1735].z * _1742) + 1.0;
    float _1750 = (cbLight._m0[_1735].w * _1742) + 1.0;
    uint _1751 = _1734 + 5u;
    float _1757 = isnan(1.0) ? _1748 : (isnan(_1748) ? 1.0 : min(_1748, 1.0));
    uint _1761 = _1734 + 4u;
    float _1770 = isnan(1.0) ? _1747 : (isnan(_1747) ? 1.0 : min(_1747, 1.0));
    uint _1774 = _1734 | 1u;
    float _1785 = dot(vec3(cbLight._m0[_1734].xyz), vec3(_528, _529, _530));
    float _1788 = dot(vec3(cbLight._m0[_1774].xyz), vec3(_528, _529, _530));
    float _3871 = isnan(0.0) ? _1785 : (isnan(_1785) ? 0.0 : max(_1785, 0.0));
    float _3882 = isnan(0.0) ? _1788 : (isnan(_1788) ? 0.0 : max(_1788, 0.0));
    float _1793 = (isnan(1.0) ? _3871 : (isnan(_3871) ? 1.0 : min(_3871, 1.0))) * 0.3183098733425140380859375;
    float _1795 = (isnan(1.0) ? _3882 : (isnan(_3882) ? 1.0 : min(_3882, 1.0))) * 0.3183098733425140380859375;
    float _1802 = ((cbLight._m0[_1751].x * _1757) * _1795) + (((cbLight._m0[_1761].x * _1726) * _1770) * _1793);
    float _1803 = ((_1757 * cbLight._m0[_1751].y) * _1795) + (((cbLight._m0[_1761].y * _1727) * _1770) * _1793);
    float _1804 = ((_1757 * cbLight._m0[_1751].z) * _1795) + (((cbLight._m0[_1761].z * _1728) * _1770) * _1793);
    uvec4 _1808 = floatBitsToUint(cbLight._m0[_1734 + 12u]);
    bool _1810 = _1808.x == 0u;
    float _1821;
    float _1823;
    float _1825;
    if (_1810)
    {
        _1821 = _1802;
        _1823 = _1803;
        _1825 = _1804;
    }
    else
    {
        uint _1829 = _1734 + 6u;
        float _1845 = (dot(vec3(cbLight._m0[_1734 + 2u].xyz), vec3(_528, _529, _530)) * 0.5) + 0.5;
        float _1846 = _1845 * _1845;
        float _3893 = isnan(0.0) ? _1846 : (isnan(_1846) ? 0.0 : max(_1846, 0.0));
        float _1847 = isnan(1.0) ? _3893 : (isnan(_3893) ? 1.0 : min(_3893, 1.0));
        float _1848 = isnan(1.0) ? _1749 : (isnan(_1749) ? 1.0 : min(_1749, 1.0));
        _1821 = (((cbLight._m0[_1829].x * 0.3183098733425140380859375) * _1847) * _1848) + _1802;
        _1823 = (((cbLight._m0[_1829].y * 0.3183098733425140380859375) * _1847) * _1848) + _1803;
        _1825 = (((cbLight._m0[_1829].z * 0.3183098733425140380859375) * _1847) * _1848) + _1804;
    }
    bool _1828 = _1808.y == 0u;
    float _1866;
    float _1868;
    float _1870;
    if (_1828)
    {
        _1866 = _1821;
        _1868 = _1823;
        _1870 = _1825;
    }
    else
    {
        uint _2028 = _1734 + 7u;
        float _2044 = (dot(vec3(cbLight._m0[_1734 + 3u].xyz), vec3(_528, _529, _530)) * 0.5) + 0.5;
        float _2045 = _2044 * _2044;
        float _3909 = isnan(0.0) ? _2045 : (isnan(_2045) ? 0.0 : max(_2045, 0.0));
        float _2046 = isnan(1.0) ? _3909 : (isnan(_3909) ? 1.0 : min(_3909, 1.0));
        float _2047 = isnan(1.0) ? _1750 : (isnan(_1750) ? 1.0 : min(_1750, 1.0));
        _1866 = (((cbLight._m0[_2028].x * 0.3183098733425140380859375) * _2046) * _2047) + _1821;
        _1868 = (((cbLight._m0[_2028].y * 0.3183098733425140380859375) * _2046) * _2047) + _1823;
        _1870 = (((cbLight._m0[_2028].z * 0.3183098733425140380859375) * _2046) * _2047) + _1825;
    }
    uint _1873 = _1734 + 8u;
    float _1886 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1734].w)) * _531) * 0.949999988079071044921875);
    float _1887 = _1886 * _1886;
    float _1888 = cbLight._m0[_1734].x + _607;
    float _1889 = cbLight._m0[_1734].y + _608;
    float _1890 = cbLight._m0[_1734].z + _609;
    float _1894 = inversesqrt(dot(vec3(_1888, _1889, _1890), vec3(_1888, _1889, _1890)));
    float _1895 = _1894 * _1888;
    float _1896 = _1894 * _1889;
    float _1897 = _1894 * _1890;
    float _1898 = dot(vec3(_528, _529, _530), vec3(cbLight._m0[_1734].xyz));
    float _3925 = isnan(0.0) ? _1898 : (isnan(_1898) ? 0.0 : max(_1898, 0.0));
    float _1901 = isnan(1.0) ? _3925 : (isnan(_3925) ? 1.0 : min(_3925, 1.0));
    float _3936 = isnan(0.0) ? _679 : (isnan(_679) ? 0.0 : max(_679, 0.0));
    float _1902 = isnan(1.0) ? _3936 : (isnan(_3936) ? 1.0 : min(_3936, 1.0));
    float _1903 = dot(vec3(_528, _529, _530), vec3(_1895, _1896, _1897));
    float _3947 = isnan(0.0) ? _1903 : (isnan(_1903) ? 0.0 : max(_1903, 0.0));
    float _1906 = isnan(1.0) ? _3947 : (isnan(_3947) ? 1.0 : min(_3947, 1.0));
    float _1907 = dot(vec3(cbLight._m0[_1734].xyz), vec3(_1895, _1896, _1897));
    float _3958 = isnan(0.0) ? _1907 : (isnan(_1907) ? 0.0 : max(_1907, 0.0));
    float _1911 = _1887 * _1887;
    float _1915 = ((_1906 * _1906) * (_1911 + (-1.0))) + 1.0;
    float _1926 = (exp2(log2(1.0 - (isnan(1.0) ? _3958 : (isnan(_3958) ? 1.0 : min(_3958, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1927 = 1.0 - _1887;
    float _1938 = (0.5 / (((_1902 * ((_1901 * _1927) + _1887)) + 9.9999999392252902907785028219223e-09) + (((_1902 * _1927) + _1887) * _1901))) * _1901;
    float _3969 = isnan(0.0) ? _1938 : (isnan(_1938) ? 0.0 : max(_1938, 0.0));
    float _1940 = (isnan(1.0) ? _3969 : (isnan(_3969) ? 1.0 : min(_3969, 1.0))) * (_1911 / ((_1915 * _1915) * 3.141590118408203125));
    uint _1954 = _1734 + 9u;
    float _1965 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1774].w)) * _531) * 0.949999988079071044921875);
    float _1966 = _1965 * _1965;
    float _1967 = cbLight._m0[_1774].x + _607;
    float _1968 = cbLight._m0[_1774].y + _608;
    float _1969 = cbLight._m0[_1774].z + _609;
    float _1973 = inversesqrt(dot(vec3(_1967, _1968, _1969), vec3(_1967, _1968, _1969)));
    float _1974 = _1973 * _1967;
    float _1975 = _1973 * _1968;
    float _1976 = _1973 * _1969;
    float _1977 = dot(vec3(_528, _529, _530), vec3(cbLight._m0[_1774].xyz));
    float _3980 = isnan(0.0) ? _1977 : (isnan(_1977) ? 0.0 : max(_1977, 0.0));
    float _1980 = isnan(1.0) ? _3980 : (isnan(_3980) ? 1.0 : min(_3980, 1.0));
    float _1981 = dot(vec3(_528, _529, _530), vec3(_1974, _1975, _1976));
    float _3991 = isnan(0.0) ? _1981 : (isnan(_1981) ? 0.0 : max(_1981, 0.0));
    float _1984 = isnan(1.0) ? _3991 : (isnan(_3991) ? 1.0 : min(_3991, 1.0));
    float _1985 = dot(vec3(cbLight._m0[_1774].xyz), vec3(_1974, _1975, _1976));
    float _4002 = isnan(0.0) ? _1985 : (isnan(_1985) ? 0.0 : max(_1985, 0.0));
    float _1989 = _1966 * _1966;
    float _1993 = ((_1984 * _1984) * (_1989 + (-1.0))) + 1.0;
    float _2002 = (exp2(log2(1.0 - (isnan(1.0) ? _4002 : (isnan(_4002) ? 1.0 : min(_4002, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2003 = 1.0 - _1966;
    float _2013 = (0.5 / (((_1902 * ((_1980 * _2003) + _1966)) + 9.9999999392252902907785028219223e-09) + (((_1902 * _2003) + _1966) * _1980))) * _1980;
    float _4013 = isnan(0.0) ? _2013 : (isnan(_2013) ? 0.0 : max(_2013, 0.0));
    float _2015 = (isnan(1.0) ? _4013 : (isnan(_4013) ? 1.0 : min(_4013, 1.0))) * (_1989 / ((_1993 * _1993) * 3.141590118408203125));
    float _2025 = (((_2002 * cbLight._m0[_1954].x) * _2015) * _1757) + ((((cbLight._m0[_1873].x * _1726) * _1926) * _1940) * _1770);
    float _2026 = (((_2002 * cbLight._m0[_1954].y) * _2015) * _1757) + ((((cbLight._m0[_1873].y * _1727) * _1926) * _1940) * _1770);
    float _2027 = (((_2002 * cbLight._m0[_1954].z) * _2015) * _1757) + ((((cbLight._m0[_1873].z * _1728) * _1926) * _1940) * _1770);
    float _2089;
    float _2091;
    float _2093;
    if (_1810)
    {
        _2089 = _2025;
        _2091 = _2026;
        _2093 = _2027;
    }
    else
    {
        uint _2095 = _1734 + 2u;
        uint _2099 = _1734 + 10u;
        float _2113 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2095].w)) * _531) * 0.949999988079071044921875);
        float _2114 = _2113 * _2113;
        float _2115 = cbLight._m0[_2095].x + _607;
        float _2116 = cbLight._m0[_2095].y + _608;
        float _2117 = cbLight._m0[_2095].z + _609;
        float _2121 = inversesqrt(dot(vec3(_2115, _2116, _2117), vec3(_2115, _2116, _2117)));
        float _2122 = _2121 * _2115;
        float _2123 = _2121 * _2116;
        float _2124 = _2121 * _2117;
        float _2125 = dot(vec3(_528, _529, _530), vec3(cbLight._m0[_2095].xyz));
        float _4024 = isnan(0.0) ? _2125 : (isnan(_2125) ? 0.0 : max(_2125, 0.0));
        float _2128 = isnan(1.0) ? _4024 : (isnan(_4024) ? 1.0 : min(_4024, 1.0));
        float _2129 = dot(vec3(_528, _529, _530), vec3(_2122, _2123, _2124));
        float _4035 = isnan(0.0) ? _2129 : (isnan(_2129) ? 0.0 : max(_2129, 0.0));
        float _2132 = isnan(1.0) ? _4035 : (isnan(_4035) ? 1.0 : min(_4035, 1.0));
        float _2133 = dot(vec3(cbLight._m0[_2095].xyz), vec3(_2122, _2123, _2124));
        float _4046 = isnan(0.0) ? _2133 : (isnan(_2133) ? 0.0 : max(_2133, 0.0));
        float _2137 = _2114 * _2114;
        float _2141 = ((_2132 * _2132) * (_2137 + (-1.0))) + 1.0;
        float _2150 = (exp2(log2(1.0 - (isnan(1.0) ? _4046 : (isnan(_4046) ? 1.0 : min(_4046, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2151 = 1.0 - _2114;
        float _2161 = (0.5 / (((_1902 * ((_2128 * _2151) + _2114)) + 9.9999999392252902907785028219223e-09) + (((_1902 * _2151) + _2114) * _2128))) * _2128;
        float _4057 = isnan(0.0) ? _2161 : (isnan(_2161) ? 0.0 : max(_2161, 0.0));
        float _2163 = (isnan(1.0) ? _4057 : (isnan(_4057) ? 1.0 : min(_4057, 1.0))) * (_2137 / ((_2141 * _2141) * 3.141590118408203125));
        float _2164 = isnan(1.0) ? _1749 : (isnan(_1749) ? 1.0 : min(_1749, 1.0));
        _2089 = (((_2150 * cbLight._m0[_2099].x) * _2163) * _2164) + _2025;
        _2091 = (((_2150 * cbLight._m0[_2099].y) * _2163) * _2164) + _2026;
        _2093 = (((_2150 * cbLight._m0[_2099].z) * _2163) * _2164) + _2027;
    }
    float _2199;
    float _2201;
    float _2203;
    if (_1828)
    {
        _2199 = _2089;
        _2201 = _2091;
        _2203 = _2093;
    }
    else
    {
        uint _2210 = _1734 + 3u;
        uint _2214 = _1734 + 11u;
        float _2228 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2210].w)) * _531) * 0.949999988079071044921875);
        float _2229 = _2228 * _2228;
        float _2230 = cbLight._m0[_2210].x + _607;
        float _2231 = cbLight._m0[_2210].y + _608;
        float _2232 = cbLight._m0[_2210].z + _609;
        float _2236 = inversesqrt(dot(vec3(_2230, _2231, _2232), vec3(_2230, _2231, _2232)));
        float _2237 = _2236 * _2230;
        float _2238 = _2236 * _2231;
        float _2239 = _2236 * _2232;
        float _2240 = dot(vec3(_528, _529, _530), vec3(cbLight._m0[_2210].xyz));
        float _4073 = isnan(0.0) ? _2240 : (isnan(_2240) ? 0.0 : max(_2240, 0.0));
        float _2243 = isnan(1.0) ? _4073 : (isnan(_4073) ? 1.0 : min(_4073, 1.0));
        float _2244 = dot(vec3(_528, _529, _530), vec3(_2237, _2238, _2239));
        float _4084 = isnan(0.0) ? _2244 : (isnan(_2244) ? 0.0 : max(_2244, 0.0));
        float _2247 = isnan(1.0) ? _4084 : (isnan(_4084) ? 1.0 : min(_4084, 1.0));
        float _2248 = dot(vec3(cbLight._m0[_2210].xyz), vec3(_2237, _2238, _2239));
        float _4095 = isnan(0.0) ? _2248 : (isnan(_2248) ? 0.0 : max(_2248, 0.0));
        float _2252 = _2229 * _2229;
        float _2256 = ((_2247 * _2247) * (_2252 + (-1.0))) + 1.0;
        float _2265 = (exp2(log2(1.0 - (isnan(1.0) ? _4095 : (isnan(_4095) ? 1.0 : min(_4095, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2266 = 1.0 - _2229;
        float _2276 = (0.5 / (((_1902 * ((_2243 * _2266) + _2229)) + 9.9999999392252902907785028219223e-09) + (((_1902 * _2266) + _2229) * _2243))) * _2243;
        float _4106 = isnan(0.0) ? _2276 : (isnan(_2276) ? 0.0 : max(_2276, 0.0));
        float _2278 = (isnan(1.0) ? _4106 : (isnan(_4106) ? 1.0 : min(_4106, 1.0))) * (_2252 / ((_2256 * _2256) * 3.141590118408203125));
        float _2279 = isnan(1.0) ? _1750 : (isnan(_1750) ? 1.0 : min(_1750, 1.0));
        _2199 = (((_2265 * cbLight._m0[_2214].x) * _2278) * _2279) + _2089;
        _2201 = (((_2265 * cbLight._m0[_2214].y) * _2278) * _2279) + _2091;
        _2203 = (((_2265 * cbLight._m0[_2214].z) * _2278) * _2279) + _2093;
    }
    float _2414;
    float _2416;
    float _2418;
    float _2420;
    float _2422;
    float _2424;
    if (_1732.y == 0u)
    {
        float _2354 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2355 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2354;
        float _2356 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2354;
        float _2357 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2354;
        uvec4 _2369 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2370 = _2369.x;
        uint _2381 = uint((float(_2369.y) * floor(float(uint(cbSceneParam._m0[85u].y * _616) / _2370))) + floor(float(uint(cbSceneParam._m0[85u].x * _615) / _2370)));
        float _2391 = (log2(_2357 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2392 = isnan(0.0) ? _2391 : (isnan(_2391) ? 0.0 : max(_2391, 0.0));
        uint _2395 = uint(isnan(14.0) ? _2392 : (isnan(_2392) ? 14.0 : min(_2392, 14.0)));
        uvec4 _2400 = texelFetch(g_lightClusterGridBuffer, int(((_2395 << 2u) + (_2381 << 6u)) >> 2u));
        uint _2401 = _2400.x;
        uint _2402 = _2369.z;
        float _2502;
        float _2504;
        float _2506;
        float _2508;
        float _2510;
        float _2512;
        if (((((1u << ((_2402 >> 4u) & 15u)) + 4294967295u) & _2401) == 0u) || ((_2402 & 240u) == 0u))
        {
            _2502 = 0.0;
            _2504 = 0.0;
            _2506 = 0.0;
            _2508 = 0.0;
            _2510 = 0.0;
            _2512 = 0.0;
        }
        else
        {
            float _2503;
            float _2505;
            float _2507;
            float _2509;
            float _2511;
            float _2513;
            float _2647 = 0.0;
            float _2648 = 0.0;
            float _2649 = 0.0;
            float _2650 = 0.0;
            float _2651 = 0.0;
            float _2652 = 0.0;
            uint _2653 = 0u;
            uint _2662;
            bool _2663;
            for (;;)
            {
                _2662 = texelFetch(g_lightClassification, int((((_2395 << 5u) + (_2381 << 9u)) + (_2653 << 2u)) >> 2u)).x;
                _2663 = _2662 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2663)
                {
                    frontier_phi_61_pred = _2647;
                    frontier_phi_61_pred_1 = _2652;
                    frontier_phi_61_pred_2 = _2651;
                    frontier_phi_61_pred_3 = _2650;
                    frontier_phi_61_pred_4 = _2649;
                    frontier_phi_61_pred_5 = _2648;
                }
                else
                {
                    float _2771;
                    float _2772;
                    float _2773;
                    float _2774;
                    float _2775;
                    float _2776;
                    uint _2777;
                    _2771 = _2647;
                    _2772 = _2648;
                    _2773 = _2649;
                    _2774 = _2650;
                    _2775 = _2651;
                    _2776 = _2652;
                    _2777 = _2662;
                    float _2703;
                    float _2704;
                    float _2705;
                    float _2706;
                    float _2707;
                    float _2708;
                    for (;;)
                    {
                        uint _2781 = uint(findLSB(_2777)) + (_2653 << 5u);
                        uint _2778 = (_2777 + 4294967295u) & _2777;
                        uint _2783 = _2781 * 48u;
                        vec4 _2797 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2783)).x, texelFetch(g_PointLightRenderingBuffer, int(_2783 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2783 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2783 + 3u)).x));
                        uint _2803 = (_2781 * 48u) + 4u;
                        vec4 _2816 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2803)).x, texelFetch(g_PointLightRenderingBuffer, int(_2803 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2803 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2803 + 3u)).x));
                        uint _2822 = (_2781 * 48u) + 8u;
                        vec3 _2833 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2822)).x, texelFetch(g_PointLightRenderingBuffer, int(_2822 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2822 + 2u)).x));
                        float _2837 = _2797.x - _2355;
                        float _2838 = _2797.y - _2356;
                        float _2839 = _2797.z - _2357;
                        float _2840 = dot(vec3(_2837, _2838, _2839), vec3(_2837, _2838, _2839));
                        float _2843 = inversesqrt(_2840);
                        float _2844 = _2843 * _2837;
                        float _2845 = _2843 * _2838;
                        float _2846 = _2843 * _2839;
                        float _2847 = dot(vec3(_634, _637, _640), vec3(_2844, _2845, _2846));
                        float _2852 = 1.0 - (_2840 * _2797.w);
                        float _4132 = isnan(0.0) ? _2852 : (isnan(_2852) ? 0.0 : max(_2852, 0.0));
                        float _2853 = isnan(1.0) ? _4132 : (isnan(_4132) ? 1.0 : min(_4132, 1.0));
                        float _2854 = sqrt(_2840) * _2816.w;
                        float _2857 = 1.39999997615814208984375 / (_2854 + 1.39999997615814208984375);
                        float _2858 = _2857 * _2857;
                        float _2861 = ((1.0 - _2858) * _2847) + _2858;
                        float _2864 = _2854 * _2854;
                        float _2868 = ((isnan(0.0) ? _2861 : (isnan(_2861) ? 0.0 : max(_2861, 0.0))) * _2853) / ((_2864 * 0.699999988079071044921875) + 1.0);
                        float _2872 = (-0.0) - _2355;
                        float _2873 = (-0.0) - _2356;
                        float _2874 = (-0.0) - _2357;
                        float _2878 = inversesqrt(dot(vec3(_2872, _2873, _2874), vec3(_2872, _2873, _2874)));
                        float _2879 = _2878 * _2872;
                        float _2880 = _2878 * _2873;
                        float _2881 = _2878 * _2874;
                        float _2889 = exp2(log2(1.0 / ((_2864 * 3.5) + 5.0)) * 0.25);
                        float _2890 = 1.0 - _694;
                        float _2897 = sqrt(1.0 - ((1.0 - (_2890 * _2890)) * (1.0 - (_2889 * _2889))));
                        float _2898 = _2897 * _2897;
                        float _2899 = _2898 * _2898;
                        float _2900 = _2879 + _2844;
                        float _2901 = _2880 + _2845;
                        float _2902 = _2881 + _2846;
                        float _2906 = inversesqrt(dot(vec3(_2900, _2901, _2902), vec3(_2900, _2901, _2902)));
                        float _2910 = dot(vec3(_634, _637, _640), vec3(_2879, _2880, _2881));
                        float _4148 = isnan(0.0) ? _2910 : (isnan(_2910) ? 0.0 : max(_2910, 0.0));
                        float _2913 = isnan(1.0) ? _4148 : (isnan(_4148) ? 1.0 : min(_4148, 1.0));
                        float _2914 = dot(vec3(_634, _637, _640), vec3(_2906 * _2900, _2906 * _2901, _2906 * _2902));
                        float _4159 = isnan(0.0) ? _2914 : (isnan(_2914) ? 0.0 : max(_2914, 0.0));
                        float _2917 = isnan(1.0) ? _4159 : (isnan(_4159) ? 1.0 : min(_4159, 1.0));
                        float _2921 = ((_2917 * _2917) * (_2899 + (-1.0))) + 1.0;
                        float _2922 = _2857 * _2898;
                        float _2923 = _2922 * _2922;
                        float _2926 = ((1.0 - _2923) * _2847) + _2923;
                        float _4170 = isnan(0.0) ? _2926 : (isnan(_2926) ? 0.0 : max(_2926, 0.0));
                        float _2927 = isnan(1.0) ? _4170 : (isnan(_4170) ? 1.0 : min(_4170, 1.0));
                        float _2928 = 1.0 - _2898;
                        float _2938 = (0.5 / (((_2927 * ((_2913 * _2928) + _2898)) + 9.9999999392252902907785028219223e-09) + (((_2927 * _2928) + _2898) * _2913))) * _2927;
                        float _4181 = isnan(0.0) ? _2938 : (isnan(_2938) ? 0.0 : max(_2938, 0.0));
                        float _2949 = (((_2899 * 3.1415927410125732421875) * (isnan(1.0) ? _4181 : (isnan(_4181) ? 1.0 : min(_4181, 1.0)))) / ((_2921 * _2921) * ((_2864 * 2.1991131305694580078125) + 3.141590118408203125))) * _2853;
                        _2706 = (_2868 * _2816.x) + _2774;
                        _2707 = (_2868 * _2816.y) + _2775;
                        _2708 = (_2868 * _2816.z) + _2776;
                        _2703 = (_2949 * _2833.x) + _2771;
                        _2704 = (_2949 * _2833.y) + _2772;
                        _2705 = (_2949 * _2833.z) + _2773;
                        if (_2778 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2771 = _2703;
                            _2772 = _2704;
                            _2773 = _2705;
                            _2774 = _2706;
                            _2775 = _2707;
                            _2776 = _2708;
                            _2777 = _2778;
                        }
                    }
                    frontier_phi_61_pred = _2703;
                    frontier_phi_61_pred_1 = _2708;
                    frontier_phi_61_pred_2 = _2707;
                    frontier_phi_61_pred_3 = _2706;
                    frontier_phi_61_pred_4 = _2705;
                    frontier_phi_61_pred_5 = _2704;
                }
                _2503 = frontier_phi_61_pred;
                _2513 = frontier_phi_61_pred_1;
                _2511 = frontier_phi_61_pred_2;
                _2509 = frontier_phi_61_pred_3;
                _2507 = frontier_phi_61_pred_4;
                _2505 = frontier_phi_61_pred_5;
                uint _2654 = _2653 + 1u;
                if (_2654 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2647 = _2503;
                    _2648 = _2505;
                    _2649 = _2507;
                    _2650 = _2509;
                    _2651 = _2511;
                    _2652 = _2513;
                    _2653 = _2654;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2502 = _2503;
            _2504 = _2505;
            _2506 = _2507;
            _2508 = _2509;
            _2510 = _2511;
            _2512 = _2513;
        }
        uvec4 _2516 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2517 = _2516.z;
        uint _2519 = (_2517 >> 8u) & 15u;
        float _2615;
        float _2617;
        float _2619;
        float _2621;
        float _2623;
        float _2625;
        if (((4294967295u << _2519) & _2401) == 0u)
        {
            _2615 = _2502;
            _2617 = _2504;
            _2619 = _2506;
            _2621 = _2508;
            _2623 = _2510;
            _2625 = _2512;
        }
        else
        {
            float _2640 = inversesqrt(dot(vec3(_2355, _2356, _2357), vec3(_2355, _2356, _2357)));
            float _2641 = _2640 * _2355;
            float _2642 = _2640 * _2356;
            float _2643 = _2640 * _2357;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2519 < ((_2517 >> 12u) & 15u))
            {
                float _2616;
                float _2618;
                float _2620;
                float _2622;
                float _2624;
                float _2626;
                float _2754 = _2502;
                float _2755 = _2504;
                float _2756 = _2506;
                float _2757 = _2508;
                float _2758 = _2510;
                float _2759 = _2512;
                uint _2760 = _2519;
                uint _2769;
                bool _2770;
                for (;;)
                {
                    _2769 = texelFetch(g_lightClassification, int((((_2395 << 5u) + (_2381 << 9u)) + (_2760 << 2u)) >> 2u)).x;
                    _2770 = _2769 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_2770)
                    {
                        frontier_phi_67_pred = _2757;
                        frontier_phi_67_pred_1 = _2758;
                        frontier_phi_67_pred_2 = _2759;
                        frontier_phi_67_pred_3 = _2756;
                        frontier_phi_67_pred_4 = _2755;
                        frontier_phi_67_pred_5 = _2754;
                    }
                    else
                    {
                        float _2954;
                        float _2955;
                        float _2956;
                        float _2957;
                        float _2958;
                        float _2959;
                        float _3248;
                        float _3249;
                        float _3250;
                        float _3251;
                        float _3252;
                        float _3253;
                        float _2967 = _2754;
                        float _2968 = _2755;
                        float _2969 = _2756;
                        float _2970 = _2757;
                        float _2971 = _2758;
                        float _2972 = _2759;
                        uint _2973 = _2769;
                        uint _2974;
                        vec4 _2999;
                        float _3000;
                        vec4 _3015;
                        vec3 _3027;
                        vec4 _3042;
                        vec4 _3058;
                        float _3104;
                        bool _3105;
                        for (;;)
                        {
                            uint _2984 = ((_2760 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2973));
                            _2974 = (_2973 + 4294967295u) & _2973;
                            uint _2986 = _2984 * 40u;
                            _2999 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2986)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2986 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2986 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2986 + 3u)).x));
                            _3000 = _2999.w;
                            uint _3002 = (_2984 * 40u) + 4u;
                            _3015 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3002)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3002 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3002 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3002 + 3u)).x));
                            uint _3017 = (_2984 * 40u) + 8u;
                            _3027 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3017)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3017 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3017 + 2u)).x));
                            uint _3029 = (_2984 * 40u) + 16u;
                            _3042 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3029)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3029 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3029 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3029 + 3u)).x));
                            uint _3045 = (_2984 * 40u) + 20u;
                            _3058 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3045)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3045 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3045 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3045 + 3u)).x));
                            uint _3060 = (_2984 * 40u) + 24u;
                            vec4 _3073 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3060)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3060 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3060 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3060 + 3u)).x));
                            uint _3079 = (_2984 * 40u) + 28u;
                            vec4 _3092 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3079)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3079 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3079 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3079 + 3u)).x));
                            _3104 = fma(_2357, _3092.z, fma(_2356, _3092.y, _3092.x * _2355)) + _3092.w;
                            _3105 = !((fma(_2357, _3073.z, fma(_2356, _3073.y, _3073.x * _2355)) + _3073.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3105)
                            {
                                float _3132 = _2999.x - _2355;
                                float _3133 = _2999.y - _2356;
                                float _3134 = _2999.z - _2357;
                                float _3135 = dot(vec3(_3132, _3133, _3134), vec3(_3132, _3133, _3134));
                                float _3138 = inversesqrt(_3135);
                                float _3139 = _3138 * _3132;
                                float _3140 = _3138 * _3133;
                                float _3141 = _3138 * _3134;
                                float _3145 = 1.0 - (_3135 / (_3000 * _3000));
                                float _4192 = isnan(0.0) ? _3145 : (isnan(_3145) ? 0.0 : max(_3145, 0.0));
                                float _3146 = isnan(1.0) ? _4192 : (isnan(_4192) ? 1.0 : min(_4192, 1.0));
                                float _3150 = sqrt(_3135) * _3015.w;
                                float _3152 = 1.39999997615814208984375 / (_3150 + 1.39999997615814208984375);
                                float _3153 = _3152 * _3152;
                                float _3156 = ((1.0 - _3153) * dot(vec3(_3139, _3140, _3141), vec3(_634, _637, _640))) + _3153;
                                float _3159 = _3150 * _3150;
                                float _3163 = (fma(_2357, _3042.z, fma(_2356, _3042.y, _3042.x * _2355)) + _3042.w) / _3104;
                                float _3164 = (fma(_2357, _3058.z, fma(_2356, _3058.y, _3058.x * _2355)) + _3058.w) / _3104;
                                float _3168 = 1.0 - dot(vec2(_3163, _3164), vec2(_3163, _3164));
                                float _4208 = isnan(0.0) ? _3168 : (isnan(_3168) ? 0.0 : max(_3168, 0.0));
                                float _3169 = isnan(1.0) ? _4208 : (isnan(_4208) ? 1.0 : min(_4208, 1.0));
                                float _3170 = _3169 * (((isnan(0.0) ? _3156 : (isnan(_3156) ? 0.0 : max(_3156, 0.0))) * _3146) / ((_3159 * 0.699999988079071044921875) + 1.0));
                                float _3182 = exp2(log2(1.0 / ((_3159 * 3.5) + 5.0)) * 0.25);
                                float _3183 = 1.0 - _694;
                                float _3190 = sqrt(1.0 - ((1.0 - (_3183 * _3183)) * (1.0 - (_3182 * _3182))));
                                float _3191 = _3190 * _3190;
                                float _3192 = _3191 * _3191;
                                float _3193 = _3139 - _2641;
                                float _3194 = _3140 - _2642;
                                float _3195 = _3141 - _2643;
                                float _3199 = inversesqrt(dot(vec3(_3193, _3194, _3195), vec3(_3193, _3194, _3195)));
                                float _3203 = dot(vec3(_634, _637, _640), vec3((-0.0) - _2641, (-0.0) - _2642, (-0.0) - _2643));
                                float _4219 = isnan(0.0) ? _3203 : (isnan(_3203) ? 0.0 : max(_3203, 0.0));
                                float _3206 = isnan(1.0) ? _4219 : (isnan(_4219) ? 1.0 : min(_4219, 1.0));
                                float _3207 = dot(vec3(_634, _637, _640), vec3(_3199 * _3193, _3199 * _3194, _3199 * _3195));
                                float _4230 = isnan(0.0) ? _3207 : (isnan(_3207) ? 0.0 : max(_3207, 0.0));
                                float _3210 = isnan(1.0) ? _4230 : (isnan(_4230) ? 1.0 : min(_4230, 1.0));
                                float _3214 = ((_3210 * _3210) * (_3192 + (-1.0))) + 1.0;
                                float _3215 = _3152 * _3191;
                                float _3216 = _3215 * _3215;
                                float _3222 = ((1.0 - _3216) * dot(vec3(_634, _637, _640), vec3(_3139, _3140, _3141))) + _3216;
                                float _4241 = isnan(0.0) ? _3222 : (isnan(_3222) ? 0.0 : max(_3222, 0.0));
                                float _3223 = isnan(1.0) ? _4241 : (isnan(_4241) ? 1.0 : min(_4241, 1.0));
                                float _3224 = 1.0 - _3191;
                                float _3234 = (0.5 / (((_3223 * ((_3206 * _3224) + _3191)) + 9.9999999392252902907785028219223e-09) + (((_3223 * _3224) + _3191) * _3206))) * _3223;
                                float _4252 = isnan(0.0) ? _3234 : (isnan(_3234) ? 0.0 : max(_3234, 0.0));
                                float _3244 = (_3169 * _3146) * (((_3192 * 3.1415927410125732421875) * (isnan(1.0) ? _4252 : (isnan(_4252) ? 1.0 : min(_4252, 1.0)))) / ((_3214 * _3214) * ((_3159 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3244 * _3027.x;
                                frontier_phi_73_pred_1 = _3244 * _3027.y;
                                frontier_phi_73_pred_2 = _3170 * _3015.z;
                                frontier_phi_73_pred_3 = _3170 * _3015.y;
                                frontier_phi_73_pred_4 = _3170 * _3015.x;
                                frontier_phi_73_pred_5 = _3244 * _3027.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3248 = frontier_phi_73_pred;
                            _3249 = frontier_phi_73_pred_1;
                            _3253 = frontier_phi_73_pred_2;
                            _3252 = frontier_phi_73_pred_3;
                            _3251 = frontier_phi_73_pred_4;
                            _3250 = frontier_phi_73_pred_5;
                            _2957 = _3251 + _2970;
                            _2958 = _3252 + _2971;
                            _2959 = _3253 + _2972;
                            _2954 = _3248 + _2967;
                            _2955 = _3249 + _2968;
                            _2956 = _3250 + _2969;
                            if (_2974 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2967 = _2954;
                                _2968 = _2955;
                                _2969 = _2956;
                                _2970 = _2957;
                                _2971 = _2958;
                                _2972 = _2959;
                                _2973 = _2974;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _2957;
                        frontier_phi_67_pred_1 = _2958;
                        frontier_phi_67_pred_2 = _2959;
                        frontier_phi_67_pred_3 = _2956;
                        frontier_phi_67_pred_4 = _2955;
                        frontier_phi_67_pred_5 = _2954;
                    }
                    _2622 = frontier_phi_67_pred;
                    _2624 = frontier_phi_67_pred_1;
                    _2626 = frontier_phi_67_pred_2;
                    _2620 = frontier_phi_67_pred_3;
                    _2618 = frontier_phi_67_pred_4;
                    _2616 = frontier_phi_67_pred_5;
                    uint _2761 = _2760 + 1u;
                    if (_2761 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2754 = _2616;
                        _2755 = _2618;
                        _2756 = _2620;
                        _2757 = _2622;
                        _2758 = _2624;
                        _2759 = _2626;
                        _2760 = _2761;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2624;
                frontier_phi_55_56_ladder_1 = _2626;
                frontier_phi_55_56_ladder_2 = _2622;
                frontier_phi_55_56_ladder_3 = _2620;
                frontier_phi_55_56_ladder_4 = _2618;
                frontier_phi_55_56_ladder_5 = _2616;
            }
            else
            {
                frontier_phi_55_56_ladder = _2510;
                frontier_phi_55_56_ladder_1 = _2512;
                frontier_phi_55_56_ladder_2 = _2508;
                frontier_phi_55_56_ladder_3 = _2506;
                frontier_phi_55_56_ladder_4 = _2504;
                frontier_phi_55_56_ladder_5 = _2502;
            }
            _2615 = frontier_phi_55_56_ladder_5;
            _2617 = frontier_phi_55_56_ladder_4;
            _2619 = frontier_phi_55_56_ladder_3;
            _2621 = frontier_phi_55_56_ladder_2;
            _2623 = frontier_phi_55_56_ladder;
            _2625 = frontier_phi_55_56_ladder_1;
        }
        float _2630 = isnan(1.0) ? _678 : (isnan(_678) ? 1.0 : min(_678, 1.0));
        _2414 = (_2630 * _2621) + _1866;
        _2416 = (_2630 * _2623) + _1868;
        _2418 = (_2630 * _2625) + _1870;
        _2420 = ((_2615 * 0.039999999105930328369140625) * _2630) + _2199;
        _2422 = ((_2617 * 0.039999999105930328369140625) * _2630) + _2201;
        _2424 = ((_2619 * 0.039999999105930328369140625) * _2630) + _2203;
    }
    else
    {
        _2414 = _1866;
        _2416 = _1868;
        _2418 = _1870;
        _2420 = _2199;
        _2422 = _2201;
        _2424 = _2203;
    }
    float _4268 = isnan(0.0) ? _663 : (isnan(_663) ? 0.0 : max(_663, 0.0));
    float _4279 = isnan(0.0) ? _664 : (isnan(_664) ? 0.0 : max(_664, 0.0));
    float _4290 = isnan(0.0) ? _665 : (isnan(_665) ? 0.0 : max(_665, 0.0));
    uint _2444 = _228 + 6u;
    float _2452 = _615 / cbSceneParam._m0[86u].x;
    float _2453 = _616 / cbSceneParam._m0[86u].y;
    vec4 _2467 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2452, _2453, (log2((isnan(cbSceneParam._m0[77u].w) ? _549 : (isnan(_549) ? cbSceneParam._m0[77u].w : min(_549, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2469 = _2467.x;
    float _2470 = _2467.y;
    float _2471 = _2467.z;
    float _2472 = _2467.w;
    float _2565;
    float _2567;
    float _2569;
    float _2571;
    if (_549 > cbSceneParam._m0[78u].w)
    {
        float _2527 = isnan(_549) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _549 : min(cbSceneParam._m0[80u].w, _549));
        float _2528 = _2527 / _549;
        float _2539 = _2528 * _600;
        float _2540 = _601 * _2528;
        float _2541 = (-0.0) - _2540;
        float _2543 = _2528 * _602;
        float _2545 = (cbSceneParam._m0[77u].w * _2541) / _2527;
        float _2546 = _2545 + cbSceneParam._m0[79u].w;
        float _2547 = cbSceneParam._m0[79u].w - _2540;
        float _2553 = sqrt(((_2539 * _2539) + (_2540 * _2540)) + (_2543 * _2543));
        float _2556 = (1.0 - (cbSceneParam._m0[77u].w / _2527)) * _2553;
        float _2561 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2563 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2716;
        if (abs((_2541 - _2545) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2716 = ((((_2546 > 0.0) ? exp2(_2561 * _2546) : (2.0 - exp2(_2563 * _2546))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2556;
        }
        else
        {
            float _2676 = 1.0 / cbSceneParam._m0[80u].x;
            float _2677 = isnan(_2547) ? _2546 : (isnan(_2546) ? _2547 : max(_2546, _2547));
            float _2678 = isnan(_2547) ? _2546 : (isnan(_2546) ? _2547 : min(_2546, _2547));
            float _2687 = isnan(0.0) ? _2677 : (isnan(_2677) ? 0.0 : min(_2677, 0.0));
            float _2688 = isnan(0.0) ? _2678 : (isnan(_2678) ? 0.0 : min(_2678, 0.0));
            _2716 = ((abs(_2553 / _2541) * cbSceneParam._m0[80u].y) * ((((_2687 - _2688) * 2.0) - ((exp2(_2561 * (isnan(0.0) ? _2677 : (isnan(_2677) ? 0.0 : max(_2677, 0.0)))) - exp2(_2561 * (isnan(0.0) ? _2678 : (isnan(_2678) ? 0.0 : max(_2678, 0.0))))) * _2676)) - ((exp2(_2563 * _2687) - exp2(_2563 * _2688)) * _2676))) + (_2556 * cbSceneParam._m0[80u].z);
        }
        vec4 _2718 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2452, _2453, 1.0), 0.0);
        float _2727 = exp2((_2716 * (-1.44269502162933349609375)) * (1.0 - _2718.w));
        float _2728 = log2(_2727);
        float _2744 = log2(_2472);
        _2565 = (exp2(_2744 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2728 * cbSceneParam._m0[78u].x)) * _2718.x) / cbSceneParam._m0[78u].x)) + _2469;
        _2567 = (exp2(_2744 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2728 * cbSceneParam._m0[78u].y)) * _2718.y) / cbSceneParam._m0[78u].y)) + _2470;
        _2569 = (exp2(_2744 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2728 * cbSceneParam._m0[78u].z)) * _2718.z) / cbSceneParam._m0[78u].z)) + _2471;
        _2571 = _2727 * _2472;
    }
    else
    {
        _2565 = _2469;
        _2567 = _2470;
        _2569 = _2471;
        _2571 = _2472;
    }
    float _2583 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2584 = _2583 == 3.0;
    float _2585 = log2(_2571);
    float _2592 = exp2(_2585 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4268 : (isnan(_4268) ? 1.0 : min(_4268, 1.0))) * (_2414 + ((isnan(0.0) ? _1404 : (isnan(_1404) ? 0.0 : max(_1404, 0.0))) * _678))) + ((_2420 + ((isnan(0.0) ? _1698 : (isnan(_1698) ? 0.0 : max(_1698, 0.0))) * _1483)) * cbPerFrame._m0[3u].x));
    float _2593 = exp2(_2585 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4279 : (isnan(_4279) ? 1.0 : min(_4279, 1.0))) * (_2416 + ((isnan(0.0) ? _1407 : (isnan(_1407) ? 0.0 : max(_1407, 0.0))) * _678))) + ((_2422 + ((isnan(0.0) ? _1701 : (isnan(_1701) ? 0.0 : max(_1701, 0.0))) * _1483)) * cbPerFrame._m0[3u].x));
    float _2594 = exp2(_2585 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4290 : (isnan(_4290) ? 1.0 : min(_4290, 1.0))) * (_2418 + ((isnan(0.0) ? _1410 : (isnan(_1410) ? 0.0 : max(_1410, 0.0))) * _678))) + ((_2424 + ((isnan(0.0) ? _1704 : (isnan(_1704) ? 0.0 : max(_1704, 0.0))) * _1483)) * cbPerFrame._m0[3u].x));
    float _2603 = (_2583 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2603 * (_2584 ? _2592 : (_2592 + (cbSceneParam._m0[72u].w * _2565)));
    SV_Target.y = _2603 * (_2584 ? _2593 : (_2593 + (cbSceneParam._m0[72u].w * _2567)));
    SV_Target.z = _2603 * (_2584 ? _2594 : (_2594 + (cbSceneParam._m0[72u].w * _2569)));
    SV_Target.w = cbInstanceData._m0[_2444].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2444].w;
}


