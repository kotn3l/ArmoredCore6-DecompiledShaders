#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_0;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_10;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_6;
layout(set = 0, binding = 23) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_8;
layout(set = 0, binding = 24) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_9;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1371;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _218 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _219 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _220 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _226 = inversesqrt(dot(vec3(_218, _219, _220), vec3(_218, _219, _220)));
    float _227 = _226 * _218;
    float _228 = _226 * _219;
    float _229 = _226 * _220;
    float _233 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _234 = _233 * NORMAL.x;
    float _235 = _233 * NORMAL.y;
    float _236 = _233 * NORMAL.z;
    float _240 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _241 = _240 * TANGENT.x;
    float _242 = _240 * TANGENT.y;
    float _243 = _240 * TANGENT.z;
    uint _246 = uint(roundEven(NORMAL.w)) * 13u;
    uint _252 = _246 + 1u;
    uint _256 = _246 + 2u;
    float _265 = sqrt(((cbInstanceData._m0[_252].x * cbInstanceData._m0[_252].x) + (cbInstanceData._m0[_246].x * cbInstanceData._m0[_246].x)) + (cbInstanceData._m0[_256].x * cbInstanceData._m0[_256].x));
    float _266 = _265 * TEXCOORD.z;
    float _267 = _265 * TEXCOORD.w;
    vec4 _286 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _310 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _315 = _310.x * cbMtdParam._m0[11u].x;
    float _316 = _310.y * cbMtdParam._m0[11u].y;
    float _317 = _310.z * cbMtdParam._m0[11u].z;
    vec4 _336 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _266) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _267) + cbTextureTilingScale._m0[5u].w));
    vec4 _356 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _396 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _398 = _396.x;
    float _410 = dot(vec4(_398, _396.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _427 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _356.x) * 2.0) - ((((_398 - _410) * cbMtdParam._m0[24u].z) + _410) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3957 = isnan(0.0) ? _427 : (isnan(_427) ? 0.0 : max(_427, 0.0));
    float _428 = isnan(1.0) ? _3957 : (isnan(_3957) ? 1.0 : min(_3957, 1.0));
    float _435 = (_428 * ((_336.x * cbMtdParam._m0[12u].x) - _315)) + _315;
    float _436 = (_428 * ((_336.y * cbMtdParam._m0[12u].y) - _316)) + _316;
    float _437 = (_428 * ((_336.z * cbMtdParam._m0[12u].z) - _317)) + _317;
    vec4 _454 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _266) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _267) + cbTextureTilingScale._m0[3u].w));
    vec4 _474 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _476 = _474.x;
    float _486 = dot(vec4(_476, _474.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _500 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _356.y) * 2.0) - ((((_476 - _486) * cbMtdParam._m0[24u].z) + _486) * cbMtdParam._m0[20u].w))) + 1.0;
    float _3968 = isnan(0.0) ? _500 : (isnan(_500) ? 0.0 : max(_500, 0.0));
    float _501 = isnan(1.0) ? _3968 : (isnan(_3968) ? 1.0 : min(_3968, 1.0));
    float _508 = (_501 * ((_454.x * cbMtdParam._m0[13u].x) - _435)) + _435;
    float _509 = (_501 * ((_454.y * cbMtdParam._m0[13u].y) - _436)) + _436;
    float _510 = (_501 * ((_454.z * cbMtdParam._m0[13u].z) - _437)) + _437;
    vec4 _528 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_9, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[24u].x * _266) + cbTextureTilingScale._m0[24u].z, (cbTextureTilingScale._m0[24u].y * _267) + cbTextureTilingScale._m0[24u].w));
    vec4 _545 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[25u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _547 = _545.x;
    float _557 = dot(vec4(_547, _545.yzw), vec4(cbMtdParam._m0[30u].w, cbMtdParam._m0[31u].xy, 0.0));
    float _569 = ((cbMtdParam._m0[25u].x * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.z) - _356.z) * 2.0) - ((((_547 - _557) * cbMtdParam._m0[24u].z) + _557) * cbMtdParam._m0[20u].z))) + 1.0;
    float _3979 = isnan(0.0) ? _569 : (isnan(_569) ? 0.0 : max(_569, 0.0));
    float _570 = isnan(1.0) ? _3979 : (isnan(_3979) ? 1.0 : min(_3979, 1.0));
    float _583 = ((cbMtdParam._m0[9u].x * 4.55000019073486328125) * _286.x) * ((_570 * ((_528.x * cbMtdParam._m0[14u].x) - _508)) + _508);
    float _586 = ((cbMtdParam._m0[9u].y * 4.55000019073486328125) * _286.y) * ((_570 * ((_528.y * cbMtdParam._m0[14u].y) - _509)) + _509);
    float _589 = ((cbMtdParam._m0[9u].z * 4.55000019073486328125) * _286.z) * ((_570 * ((_528.z * cbMtdParam._m0[14u].z) - _510)) + _510);
    vec4 _607 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _266) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _267) + cbTextureTilingScale._m0[4u].w));
    vec4 _624 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _626 = _624.x;
    float _627 = _624.y;
    float _628 = _624.z;
    float _635 = ((_607.x - _626) * _428) + _626;
    float _636 = ((_607.y - _627) * _428) + _627;
    float _637 = ((_607.z - _628) * _428) + _628;
    vec4 _649 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _266) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _267) + cbTextureTilingScale._m0[2u].w));
    float _660 = ((_649.x - _635) * _501) + _635;
    float _661 = ((_649.y - _636) * _501) + _636;
    float _662 = ((_649.z - _637) * _501) + _637;
    vec4 _674 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[23u].x * _266) + cbTextureTilingScale._m0[23u].z, (cbTextureTilingScale._m0[23u].y * _267) + cbTextureTilingScale._m0[23u].w));
    float _687 = ((_674.z - _662) * _570) + _662;
    float _690 = ((((_674.x - _660) * _570) + _660) * 2.0) + (-1.0);
    float _692 = ((((_674.y - _661) * _570) + _661) * 2.0) + (-1.0);
    float _693 = dot(vec2(_690, _692), vec2(_690, _692));
    float _3990 = isnan(0.0) ? _693 : (isnan(_693) ? 0.0 : max(_693, 0.0));
    float _698 = sqrt(1.0 - (isnan(1.0) ? _3990 : (isnan(_3990) ? 1.0 : min(_3990, 1.0))));
    vec4 _712 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _724 = (((_712.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _690;
    float _725 = (((_712.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _692;
    float _728 = fma(_698, _234, fma(_725, _241, _724 * _227));
    float _731 = fma(_698, _235, fma(_725, _242, _724 * _228));
    float _734 = fma(_698, _236, fma(_725, _243, _724 * _229));
    float _738 = inversesqrt(dot(vec3(_728, _731, _734), vec3(_728, _731, _734)));
    vec4 _765 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _266) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _267) + cbTextureTilingScale._m0[11u].w));
    float _767 = _765.x;
    float _768 = 1.0 - _767;
    float _774 = (cbMtdParam._m0[19u].x + dot(vec4(_738 * _728, _738 * _731, _738 * _734, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_767 - _768) * cbMtdParam._m0[24u].w) + _768) * cbMtdParam._m0[21u].z);
    float _4001 = isnan(0.0) ? _774 : (isnan(_774) ? 0.0 : max(_774, 0.0));
    float _775 = isnan(1.0) ? _4001 : (isnan(_4001) ? 1.0 : min(_4001, 1.0));
    float _782 = (_775 * (cbMtdParam._m0[17u].x - _583)) + _583;
    float _783 = (_775 * (cbMtdParam._m0[17u].y - _586)) + _586;
    float _784 = (_775 * (cbMtdParam._m0[17u].z - _589)) + _589;
    float _788 = (cbMtdParam._m0[19u].w * (_712.z - _687)) + _687;
    vec4 _801 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _266) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _267) + cbTextureTilingScale._m0[15u].w));
    float _808 = (_801.x * 2.0) + (-1.0);
    float _809 = (_801.y * 2.0) + (-1.0);
    float _810 = dot(vec2(_808, _809), vec2(_808, _809));
    float _4012 = isnan(0.0) ? _810 : (isnan(_810) ? 0.0 : max(_810, 0.0));
    float _818 = ((_801.z - _788) * _775) + _788;
    float _828 = ((sqrt(1.0 - (isnan(1.0) ? _4012 : (isnan(_4012) ? 1.0 : min(_4012, 1.0)))) - _698) * _775) + _698;
    float _831 = (((_808 - _724) * _775) + _724) + (cbMtdParam._m0[21u].x * _724);
    float _832 = (((_809 - _725) * _775) + _725) + (cbMtdParam._m0[21u].x * _725);
    float _836 = cbMtdParam._m0[22u].x + _712.w;
    float _839 = fma(_828, _234, fma(_832, _241, _831 * _227));
    float _842 = fma(_828, _235, fma(_832, _242, _831 * _228));
    float _845 = fma(_828, _236, fma(_832, _243, _831 * _229));
    float _849 = inversesqrt(dot(vec3(_839, _842, _845), vec3(_839, _842, _845)));
    float _850 = _849 * _839;
    float _851 = _849 * _842;
    float _852 = _849 * _845;
    float _4023 = isnan(0.0) ? _818 : (isnan(_818) ? 0.0 : max(_818, 0.0));
    float _853 = isnan(1.0) ? _4023 : (isnan(_4023) ? 1.0 : min(_4023, 1.0));
    float _4034 = isnan(0.0) ? _836 : (isnan(_836) ? 0.0 : max(_836, 0.0));
    float _4045 = isnan(0.0) ? _782 : (isnan(_782) ? 0.0 : max(_782, 0.0));
    float _4056 = isnan(0.0) ? _783 : (isnan(_783) ? 0.0 : max(_783, 0.0));
    float _4067 = isnan(0.0) ? _784 : (isnan(_784) ? 0.0 : max(_784, 0.0));
    float _871 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _912 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _922 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _912);
    float _923 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _912);
    float _924 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _912);
    float _928 = inversesqrt(dot(vec3(_922, _923, _924), vec3(_922, _923, _924)));
    float _929 = _922 * _928;
    float _930 = _923 * _928;
    float _931 = _924 * _928;
    float _937 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _938 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _956 = fma(_852, cbSceneParam._m0[5u].z, fma(_851, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _850));
    float _959 = fma(_852, cbSceneParam._m0[6u].z, fma(_851, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _850));
    float _962 = fma(_852, cbSceneParam._m0[7u].z, fma(_851, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _850));
    uint _976 = (_246 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _982 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4045 : (isnan(_4045) ? 1.0 : min(_4045, 1.0)))) * cbInstanceData._m0[_976].x;
    float _983 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4056 : (isnan(_4056) ? 1.0 : min(_4056, 1.0)))) * cbInstanceData._m0[_976].y;
    float _984 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4067 : (isnan(_4067) ? 1.0 : min(_4067, 1.0)))) * cbInstanceData._m0[_976].z;
    float _4078 = isnan(0.0) ? _982 : (isnan(_982) ? 0.0 : max(_982, 0.0));
    float _985 = isnan(1.0) ? _4078 : (isnan(_4078) ? 1.0 : min(_4078, 1.0));
    float _4089 = isnan(0.0) ? _983 : (isnan(_983) ? 0.0 : max(_983, 0.0));
    float _986 = isnan(1.0) ? _4089 : (isnan(_4089) ? 1.0 : min(_4089, 1.0));
    float _4100 = isnan(0.0) ? _984 : (isnan(_984) ? 0.0 : max(_984, 0.0));
    float _987 = isnan(1.0) ? _4100 : (isnan(_4100) ? 1.0 : min(_4100, 1.0));
    vec4 _996 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _937, cbSceneParam._m0[86u].y * _938));
    float _1000 = ((isnan(1.0) ? _4034 : (isnan(_4034) ? 1.0 : min(_4034, 1.0))) * TEXCOORD_5.w) * _996.x;
    float _1001 = dot(vec3(_850, _851, _852), vec3(_929, _930, _931));
    float _1004 = _1001 * 2.0;
    float _1008 = (_1004 * _850) - _929;
    float _1009 = (_1004 * _851) - _930;
    float _1010 = (_1004 * _852) - _931;
    float _1014 = abs(dot(vec3(_929, _930, _931), vec3(_850, _851, _852)));
    float _4111 = isnan(0.0) ? _1014 : (isnan(_1014) ? 0.0 : max(_1014, 0.0));
    float _1016 = sqrt(_853);
    float _1029 = exp2((_1016 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4111 : (isnan(_4111) ? 1.0 : min(_4111, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1016 * 3.0));
    float _1061 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1065 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1069 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1370;
    float _1372;
    float _1373;
    float _1374;
    float _1375;
    float _1376;
    float _1377;
    float _1378;
    float _1379;
    float _1380;
    float _1381;
    float _1382;
    float _1383;
    float _1384;
    float _1385;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1095 = fma(_1069, cbModelParam._m0[26u].z, fma(_1065, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1061));
        float _1099 = fma(_1069, cbModelParam._m0[27u].z, fma(_1065, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1061));
        float _1103 = fma(_1069, cbModelParam._m0[28u].z, fma(_1065, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1061));
        float _1128 = _1061 + _850;
        float _1129 = _1065 + _851;
        float _1130 = _1069 + _852;
        float _1140 = fma(_1130, cbModelParam._m0[26u].z, fma(_1129, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1128)) - _1095;
        float _1141 = fma(_1130, cbModelParam._m0[27u].z, fma(_1129, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1128)) - _1099;
        float _1142 = fma(_1130, cbModelParam._m0[28u].z, fma(_1129, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1128)) - _1103;
        float _1146 = inversesqrt(dot(vec3(_1140, _1141, _1142), vec3(_1140, _1141, _1142)));
        float _1159 = ((_1146 * _1140) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1095 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1160 = ((_1146 * _1141) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1099 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1161 = ((_1146 * _1142) / cbModelParam._m0[34u].z) + ((((((_1103 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1164 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1159, _1160, _1161), 0.0);
        vec4 _1171 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1159, _1160, _1161), 0.0);
        vec4 _1178 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1159, _1160, _1161), 0.0);
        vec4 _1185 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1159, _1160, _1161), 0.0);
        float _1198 = exp2((_1164.w + (-0.5)) * 20.0) * 2.0;
        float _1199 = _1198 * (_1164.x + (-0.5));
        float _1200 = _1198 * (_1164.y + (-0.5));
        float _1201 = _1198 * (_1164.z + (-0.5));
        float _1208 = exp2((_1171.w + (-0.5)) * 20.0) * 2.0;
        float _1209 = _1208 * (_1171.x + (-0.5));
        float _1210 = _1208 * (_1171.y + (-0.5));
        float _1211 = _1208 * (_1171.z + (-0.5));
        float _1218 = exp2((_1178.w + (-0.5)) * 20.0) * 2.0;
        float _1219 = _1218 * (_1178.x + (-0.5));
        float _1220 = _1218 * (_1178.y + (-0.5));
        float _1221 = _1218 * (_1178.z + (-0.5));
        float _1228 = exp2((_1185.w + (-0.5)) * 20.0) * 2.0;
        float _1229 = _1228 * (_1185.x + (-0.5));
        float _1230 = _1228 * (_1185.y + (-0.5));
        float _1231 = _1228 * (_1185.z + (-0.5));
        float _1232 = isnan(0.0) ? _1229 : (isnan(_1229) ? 0.0 : max(_1229, 0.0));
        float _1233 = isnan(0.0) ? _1230 : (isnan(_1230) ? 0.0 : max(_1230, 0.0));
        float _1234 = isnan(0.0) ? _1231 : (isnan(_1231) ? 0.0 : max(_1231, 0.0));
        float _1235 = _1199 * 0.5;
        float _1236 = _1209 * 0.5;
        float _1237 = _1219 * 0.5;
        float _1238 = dot(vec3(_1235, _1236, _1237), vec3(_1235, _1236, _1237));
        float _1243 = (_1238 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1238);
        float _1252 = (dot(vec3(_850, _851, _852), vec3(_1243 * _1235, _1243 * _1236, _1243 * _1237)) + 1.0) * 0.5;
        float _4137 = isnan(0.0) ? _1252 : (isnan(_1252) ? 0.0 : max(_1252, 0.0));
        float _1262 = sqrt(((_1236 * _1236) + (_1235 * _1235)) + (_1237 * _1237)) / (_1232 + 9.9999997473787516355514526367188e-06);
        float _4148 = isnan(0.0) ? _1262 : (isnan(_1262) ? 0.0 : max(_1262, 0.0));
        float _1263 = isnan(1.0) ? _4148 : (isnan(_4148) ? 1.0 : min(_4148, 1.0));
        float _1264 = _1263 * 2.0;
        float _1268 = (1.0 - _1263) / (_1263 + 1.0);
        float _4159 = isnan(0.0) ? _1268 : (isnan(_1268) ? 0.0 : max(_1268, 0.0));
        float _1269 = isnan(1.0) ? _4159 : (isnan(_4159) ? 1.0 : min(_4159, 1.0));
        float _1278 = ((((1.0 - _1269) * (_1264 + 2.0)) * exp2(log2(isnan(1.0) ? _4137 : (isnan(_4137) ? 1.0 : min(_4137, 1.0))) * (_1264 + 1.0))) + _1269) * _1232;
        float _1279 = _1200 * 0.5;
        float _1280 = _1210 * 0.5;
        float _1281 = _1220 * 0.5;
        float _1282 = dot(vec3(_1279, _1280, _1281), vec3(_1279, _1280, _1281));
        float _1287 = (_1282 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1282);
        float _1295 = (dot(vec3(_850, _851, _852), vec3(_1287 * _1279, _1287 * _1280, _1287 * _1281)) + 1.0) * 0.5;
        float _4170 = isnan(0.0) ? _1295 : (isnan(_1295) ? 0.0 : max(_1295, 0.0));
        float _1304 = sqrt(((_1280 * _1280) + (_1279 * _1279)) + (_1281 * _1281)) / (_1233 + 9.9999997473787516355514526367188e-06);
        float _4181 = isnan(0.0) ? _1304 : (isnan(_1304) ? 0.0 : max(_1304, 0.0));
        float _1305 = isnan(1.0) ? _4181 : (isnan(_4181) ? 1.0 : min(_4181, 1.0));
        float _1306 = _1305 * 2.0;
        float _1310 = (1.0 - _1305) / (_1305 + 1.0);
        float _4192 = isnan(0.0) ? _1310 : (isnan(_1310) ? 0.0 : max(_1310, 0.0));
        float _1311 = isnan(1.0) ? _4192 : (isnan(_4192) ? 1.0 : min(_4192, 1.0));
        float _1320 = ((((1.0 - _1311) * (_1306 + 2.0)) * exp2(log2(isnan(1.0) ? _4170 : (isnan(_4170) ? 1.0 : min(_4170, 1.0))) * (_1306 + 1.0))) + _1311) * _1233;
        float _1321 = _1201 * 0.5;
        float _1322 = _1211 * 0.5;
        float _1323 = _1221 * 0.5;
        float _1324 = dot(vec3(_1321, _1322, _1323), vec3(_1321, _1322, _1323));
        float _1329 = (_1324 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1324);
        float _1337 = (dot(vec3(_850, _851, _852), vec3(_1329 * _1321, _1329 * _1322, _1329 * _1323)) + 1.0) * 0.5;
        float _4203 = isnan(0.0) ? _1337 : (isnan(_1337) ? 0.0 : max(_1337, 0.0));
        float _1346 = sqrt(((_1322 * _1322) + (_1321 * _1321)) + (_1323 * _1323)) / (_1234 + 9.9999997473787516355514526367188e-06);
        float _4214 = isnan(0.0) ? _1346 : (isnan(_1346) ? 0.0 : max(_1346, 0.0));
        float _1347 = isnan(1.0) ? _4214 : (isnan(_4214) ? 1.0 : min(_4214, 1.0));
        float _1348 = _1347 * 2.0;
        float _1352 = (1.0 - _1347) / (_1347 + 1.0);
        float _4225 = isnan(0.0) ? _1352 : (isnan(_1352) ? 0.0 : max(_1352, 0.0));
        float _1353 = isnan(1.0) ? _4225 : (isnan(_4225) ? 1.0 : min(_4225, 1.0));
        float _1362 = ((((1.0 - _1353) * (_1348 + 2.0)) * exp2(log2(isnan(1.0) ? _4203 : (isnan(_4203) ? 1.0 : min(_4203, 1.0))) * (_1348 + 1.0))) + _1353) * _1234;
        _1370 = _1201;
        _1372 = _1200;
        _1373 = _1199;
        _1374 = _1211;
        _1375 = _1210;
        _1376 = _1209;
        _1377 = _1221;
        _1378 = _1220;
        _1379 = _1219;
        _1380 = _1234;
        _1381 = _1233;
        _1382 = _1232;
        _1383 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1278 : (isnan(_1278) ? 0.0 : max(_1278, 0.0)));
        _1384 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1320 : (isnan(_1320) ? 0.0 : max(_1320, 0.0)));
        _1385 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1362 : (isnan(_1362) ? 0.0 : max(_1362, 0.0)));
    }
    else
    {
        _1370 = _1371;
        _1372 = _1371;
        _1373 = _1371;
        _1374 = _1371;
        _1375 = _1371;
        _1376 = _1371;
        _1377 = _1371;
        _1378 = _1371;
        _1379 = _1371;
        _1380 = _1371;
        _1381 = _1371;
        _1382 = _1371;
        _1383 = 0.0;
        _1384 = 0.0;
        _1385 = 0.0;
    }
    float _1677;
    float _1678;
    float _1679;
    float _1680;
    float _1681;
    float _1682;
    float _1683;
    float _1684;
    float _1685;
    float _1686;
    float _1687;
    float _1688;
    float _1689;
    float _1690;
    float _1691;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1408 = fma(_1069, cbModelParam._m0[30u].z, fma(_1065, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1061));
        float _1412 = fma(_1069, cbModelParam._m0[31u].z, fma(_1065, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1061));
        float _1416 = fma(_1069, cbModelParam._m0[32u].z, fma(_1065, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1061));
        float _1439 = _1061 + _850;
        float _1440 = _1065 + _851;
        float _1441 = _1069 + _852;
        float _1451 = fma(_1441, cbModelParam._m0[30u].z, fma(_1440, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1439)) - _1408;
        float _1452 = fma(_1441, cbModelParam._m0[31u].z, fma(_1440, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1439)) - _1412;
        float _1453 = fma(_1441, cbModelParam._m0[32u].z, fma(_1440, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1439)) - _1416;
        float _1457 = inversesqrt(dot(vec3(_1451, _1452, _1453), vec3(_1451, _1452, _1453)));
        float _1470 = ((_1457 * _1451) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1408 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1471 = ((_1457 * _1452) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1412 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1472 = ((_1457 * _1453) / cbModelParam._m0[35u].z) + ((((((_1416 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1474 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1470, _1471, _1472), 0.0);
        vec4 _1481 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1470, _1471, _1472), 0.0);
        vec4 _1488 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1470, _1471, _1472), 0.0);
        vec4 _1495 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1470, _1471, _1472), 0.0);
        float _1507 = exp2((_1474.w + (-0.5)) * 20.0) * 2.0;
        float _1508 = _1507 * (_1474.x + (-0.5));
        float _1509 = _1507 * (_1474.y + (-0.5));
        float _1510 = _1507 * (_1474.z + (-0.5));
        float _1517 = exp2((_1481.w + (-0.5)) * 20.0) * 2.0;
        float _1518 = _1517 * (_1481.x + (-0.5));
        float _1519 = _1517 * (_1481.y + (-0.5));
        float _1520 = _1517 * (_1481.z + (-0.5));
        float _1527 = exp2((_1488.w + (-0.5)) * 20.0) * 2.0;
        float _1528 = _1527 * (_1488.x + (-0.5));
        float _1529 = _1527 * (_1488.y + (-0.5));
        float _1530 = _1527 * (_1488.z + (-0.5));
        float _1537 = exp2((_1495.w + (-0.5)) * 20.0) * 2.0;
        float _1538 = _1537 * (_1495.x + (-0.5));
        float _1539 = _1537 * (_1495.y + (-0.5));
        float _1540 = _1537 * (_1495.z + (-0.5));
        float _1541 = isnan(0.0) ? _1538 : (isnan(_1538) ? 0.0 : max(_1538, 0.0));
        float _1542 = isnan(0.0) ? _1539 : (isnan(_1539) ? 0.0 : max(_1539, 0.0));
        float _1543 = isnan(0.0) ? _1540 : (isnan(_1540) ? 0.0 : max(_1540, 0.0));
        float _1544 = _1508 * 0.5;
        float _1545 = _1518 * 0.5;
        float _1546 = _1528 * 0.5;
        float _1547 = dot(vec3(_1544, _1545, _1546), vec3(_1544, _1545, _1546));
        float _1552 = (_1547 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1547);
        float _1560 = (dot(vec3(_850, _851, _852), vec3(_1552 * _1544, _1552 * _1545, _1552 * _1546)) + 1.0) * 0.5;
        float _4266 = isnan(0.0) ? _1560 : (isnan(_1560) ? 0.0 : max(_1560, 0.0));
        float _1569 = sqrt(((_1545 * _1545) + (_1544 * _1544)) + (_1546 * _1546)) / (_1541 + 9.9999997473787516355514526367188e-06);
        float _4277 = isnan(0.0) ? _1569 : (isnan(_1569) ? 0.0 : max(_1569, 0.0));
        float _1570 = isnan(1.0) ? _4277 : (isnan(_4277) ? 1.0 : min(_4277, 1.0));
        float _1571 = _1570 * 2.0;
        float _1575 = (1.0 - _1570) / (_1570 + 1.0);
        float _4288 = isnan(0.0) ? _1575 : (isnan(_1575) ? 0.0 : max(_1575, 0.0));
        float _1576 = isnan(1.0) ? _4288 : (isnan(_4288) ? 1.0 : min(_4288, 1.0));
        float _1585 = ((((1.0 - _1576) * (_1571 + 2.0)) * exp2(log2(isnan(1.0) ? _4266 : (isnan(_4266) ? 1.0 : min(_4266, 1.0))) * (_1571 + 1.0))) + _1576) * _1541;
        float _1586 = _1509 * 0.5;
        float _1587 = _1519 * 0.5;
        float _1588 = _1529 * 0.5;
        float _1589 = dot(vec3(_1586, _1587, _1588), vec3(_1586, _1587, _1588));
        float _1594 = (_1589 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1589);
        float _1602 = (dot(vec3(_850, _851, _852), vec3(_1594 * _1586, _1594 * _1587, _1594 * _1588)) + 1.0) * 0.5;
        float _4299 = isnan(0.0) ? _1602 : (isnan(_1602) ? 0.0 : max(_1602, 0.0));
        float _1611 = sqrt(((_1587 * _1587) + (_1586 * _1586)) + (_1588 * _1588)) / (_1542 + 9.9999997473787516355514526367188e-06);
        float _4310 = isnan(0.0) ? _1611 : (isnan(_1611) ? 0.0 : max(_1611, 0.0));
        float _1612 = isnan(1.0) ? _4310 : (isnan(_4310) ? 1.0 : min(_4310, 1.0));
        float _1613 = _1612 * 2.0;
        float _1617 = (1.0 - _1612) / (_1612 + 1.0);
        float _4321 = isnan(0.0) ? _1617 : (isnan(_1617) ? 0.0 : max(_1617, 0.0));
        float _1618 = isnan(1.0) ? _4321 : (isnan(_4321) ? 1.0 : min(_4321, 1.0));
        float _1627 = ((((1.0 - _1618) * (_1613 + 2.0)) * exp2(log2(isnan(1.0) ? _4299 : (isnan(_4299) ? 1.0 : min(_4299, 1.0))) * (_1613 + 1.0))) + _1618) * _1542;
        float _1628 = _1510 * 0.5;
        float _1629 = _1520 * 0.5;
        float _1630 = _1530 * 0.5;
        float _1631 = dot(vec3(_1628, _1629, _1630), vec3(_1628, _1629, _1630));
        float _1636 = (_1631 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1631);
        float _1644 = (dot(vec3(_850, _851, _852), vec3(_1636 * _1628, _1636 * _1629, _1636 * _1630)) + 1.0) * 0.5;
        float _4332 = isnan(0.0) ? _1644 : (isnan(_1644) ? 0.0 : max(_1644, 0.0));
        float _1653 = sqrt(((_1629 * _1629) + (_1628 * _1628)) + (_1630 * _1630)) / (_1543 + 9.9999997473787516355514526367188e-06);
        float _4343 = isnan(0.0) ? _1653 : (isnan(_1653) ? 0.0 : max(_1653, 0.0));
        float _1654 = isnan(1.0) ? _4343 : (isnan(_4343) ? 1.0 : min(_4343, 1.0));
        float _1655 = _1654 * 2.0;
        float _1659 = (1.0 - _1654) / (_1654 + 1.0);
        float _4354 = isnan(0.0) ? _1659 : (isnan(_1659) ? 0.0 : max(_1659, 0.0));
        float _1660 = isnan(1.0) ? _4354 : (isnan(_4354) ? 1.0 : min(_4354, 1.0));
        float _1669 = ((((1.0 - _1660) * (_1655 + 2.0)) * exp2(log2(isnan(1.0) ? _4332 : (isnan(_4332) ? 1.0 : min(_4332, 1.0))) * (_1655 + 1.0))) + _1660) * _1543;
        _1677 = _1510;
        _1678 = _1509;
        _1679 = _1508;
        _1680 = _1520;
        _1681 = _1519;
        _1682 = _1518;
        _1683 = _1530;
        _1684 = _1529;
        _1685 = _1528;
        _1686 = _1543;
        _1687 = _1542;
        _1688 = _1541;
        _1689 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1585 : (isnan(_1585) ? 0.0 : max(_1585, 0.0)));
        _1690 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1627 : (isnan(_1627) ? 0.0 : max(_1627, 0.0)));
        _1691 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1669 : (isnan(_1669) ? 0.0 : max(_1669, 0.0)));
    }
    else
    {
        _1677 = _1371;
        _1678 = _1371;
        _1679 = _1371;
        _1680 = _1371;
        _1681 = _1371;
        _1682 = _1371;
        _1683 = _1371;
        _1684 = _1371;
        _1685 = _1371;
        _1686 = _1371;
        _1687 = _1371;
        _1688 = _1371;
        _1689 = 0.0;
        _1690 = 0.0;
        _1691 = 0.0;
    }
    float _1701 = (cbModelParam._m0[1u].x * (_1689 - _1383)) + _1383;
    float _1702 = (cbModelParam._m0[1u].x * (_1690 - _1384)) + _1384;
    float _1703 = (cbModelParam._m0[1u].x * (_1691 - _1385)) + _1385;
    float _1724 = fma(_1703, cbSceneParam._m0[89u].z, fma(_1702, cbSceneParam._m0[89u].y, _1701 * cbSceneParam._m0[89u].x));
    float _1727 = fma(_1703, cbSceneParam._m0[90u].z, fma(_1702, cbSceneParam._m0[90u].y, _1701 * cbSceneParam._m0[90u].x));
    float _1730 = fma(_1703, cbSceneParam._m0[91u].z, fma(_1702, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1701));
    float _1745 = _1008 * 0.5;
    float _1746 = _1009 * 0.5;
    float _1747 = _1010 * 0.5;
    float _1748 = dot(vec4(_1745, _1746, _1747, 1.0), vec4(_1679, _1682, _1685, _1688));
    float _1751 = dot(vec4(_1745, _1746, _1747, 1.0), vec4(_1678, _1681, _1684, _1687));
    float _1754 = dot(vec4(_1745, _1746, _1747, 1.0), vec4(_1677, _1680, _1683, _1686));
    float _1788;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1761 = dot(vec4(_1745, _1746, _1747, 1.0), vec4(_1370, _1374, _1377, _1380));
        float _1765 = dot(vec4(_1745, _1746, _1747, 1.0), vec4(_1372, _1375, _1378, _1381));
        float _1769 = dot(vec4(_1745, _1746, _1747, 1.0), vec4(_1373, _1376, _1379, _1382));
        float _1776 = dot(vec4(cbModelParam._m0[39u]), vec4(_1745, _1746, _1747, 1.0));
        _1788 = dot(vec3(isnan(0.0) ? _1769 : (isnan(_1769) ? 0.0 : max(_1769, 0.0)), isnan(0.0) ? _1765 : (isnan(_1765) ? 0.0 : max(_1765, 0.0)), isnan(0.0) ? _1761 : (isnan(_1761) ? 0.0 : max(_1761, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1776) ? 0.0 : (isnan(0.0) ? _1776 : max(0.0, _1776))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1788 = 1.0;
    }
    float _1799;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1790 = dot(vec4(cbModelParam._m0[40u]), vec4(_1745, _1746, _1747, 1.0));
        _1799 = dot(vec3(isnan(0.0) ? _1748 : (isnan(_1748) ? 0.0 : max(_1748, 0.0)), isnan(0.0) ? _1751 : (isnan(_1751) ? 0.0 : max(_1751, 0.0)), isnan(0.0) ? _1754 : (isnan(_1754) ? 0.0 : max(_1754, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1790) ? 0.0 : (isnan(0.0) ? _1790 : max(0.0, _1790))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1799 = 1.0;
    }
    float _1803 = (_1799 * cbModelParam._m0[1u].x) + (_1788 * (1.0 - cbModelParam._m0[1u].x));
    float _1813 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _853);
    float _1814 = isnan(_1813) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1813 : min(cbModelParam._m0[25u].z, _1813));
    float _1894;
    float _1896;
    float _1898;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1861 = fma(_1069, cbModelParam._m0[13u].z, fma(_1065, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1061)) + cbModelParam._m0[13u].w;
        float _1865 = fma(_1069, cbModelParam._m0[14u].z, fma(_1065, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1061)) + cbModelParam._m0[14u].w;
        float _1869 = fma(_1069, cbModelParam._m0[15u].z, fma(_1065, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1061)) + cbModelParam._m0[15u].w;
        float _1872 = fma(_1010, cbModelParam._m0[13u].z, fma(_1009, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1008));
        float _1875 = fma(_1010, cbModelParam._m0[14u].z, fma(_1009, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1008));
        float _1878 = fma(_1010, cbModelParam._m0[15u].z, fma(_1009, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1008));
        float _1906;
        if (_1872 > 0.0)
        {
            _1906 = abs((1.0 - _1861) / _1872);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1872 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1861 + 1.0) / _1872);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1906 = frontier_phi_14_12_ladder;
        }
        float _2076;
        if (_1875 > 0.0)
        {
            _2076 = abs((1.0 - _1865) / _1875);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1875 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1865 + 1.0) / _1875);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2076 = frontier_phi_23_19_ladder;
        }
        float _2371;
        if (_1878 > 0.0)
        {
            _2371 = abs((1.0 - _1869) / _1878);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1878 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1869 + 1.0) / _1878);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2371 = frontier_phi_35_30_ladder;
        }
        float _2373 = isnan(_2076) ? _1906 : (isnan(_1906) ? _2076 : min(_1906, _2076));
        float _2374 = isnan(_2371) ? _2373 : (isnan(_2373) ? _2371 : min(_2373, _2371));
        float _2378 = (_2374 * _1872) + _1861;
        float _2379 = (_2374 * _1875) + _1865;
        float _2380 = (_2374 * _1878) + _1869;
        float _2381 = _2374 * 9.9999997473787516355514526367188e-05;
        float _2383 = (-1.0) - _2381;
        float _2385 = _2381 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2380 > _2385) || ((_2380 < _2383) || ((_2379 > _2385) || ((_2379 < _2383) || ((_2378 < _2383) || (_2378 > _2385))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2525 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2380, cbModelParam._m0[9u].z, fma(_2379, cbModelParam._m0[9u].y, _2378 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2380, cbModelParam._m0[10u].z, fma(_2379, cbModelParam._m0[10u].y, _2378 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2380, cbModelParam._m0[11u].z, fma(_2379, cbModelParam._m0[11u].y, _2378 * cbModelParam._m0[11u].x))), _1814);
            frontier_phi_13_35_ladder = _2525.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2525.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2525.x * cbModelParam._m0[1u].y;
        }
        _1894 = frontier_phi_13_35_ladder_2;
        _1896 = frontier_phi_13_35_ladder_1;
        _1898 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1882 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1008, _1009, _1010), _1814);
        _1894 = _1882.x * cbModelParam._m0[1u].y;
        _1896 = _1882.y * cbModelParam._m0[1u].y;
        _1898 = _1882.z * cbModelParam._m0[1u].y;
    }
    float _1902 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _853);
    float _1903 = isnan(_1902) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1902 : min(cbModelParam._m0[25u].w, _1902));
    float _1993;
    float _1995;
    float _1997;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1957 = fma(_1069, cbModelParam._m0[21u].z, fma(_1065, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1061)) + cbModelParam._m0[21u].w;
        float _1961 = fma(_1069, cbModelParam._m0[22u].z, fma(_1065, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1061)) + cbModelParam._m0[22u].w;
        float _1965 = fma(_1069, cbModelParam._m0[23u].z, fma(_1065, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1061)) + cbModelParam._m0[23u].w;
        float _1968 = fma(_1010, cbModelParam._m0[21u].z, fma(_1009, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1008));
        float _1971 = fma(_1010, cbModelParam._m0[22u].z, fma(_1009, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1008));
        float _1974 = fma(_1010, cbModelParam._m0[23u].z, fma(_1009, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1008));
        float _2081;
        if (_1968 > 0.0)
        {
            _2081 = abs((1.0 - _1957) / _1968);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1968 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1957 + 1.0) / _1968);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2081 = frontier_phi_25_21_ladder;
        }
        float _2398;
        if (_1971 > 0.0)
        {
            _2398 = abs((1.0 - _1961) / _1971);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1971 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1961 + 1.0) / _1971);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2398 = frontier_phi_37_32_ladder;
        }
        float _2725;
        if (_1974 > 0.0)
        {
            _2725 = abs((1.0 - _1965) / _1974);
        }
        else
        {
            float frontier_phi_47_44_ladder;
            if (_1974 < 0.0)
            {
                frontier_phi_47_44_ladder = abs((_1965 + 1.0) / _1974);
            }
            else
            {
                frontier_phi_47_44_ladder = 5000.0;
            }
            _2725 = frontier_phi_47_44_ladder;
        }
        float _2727 = isnan(_2398) ? _2081 : (isnan(_2081) ? _2398 : min(_2081, _2398));
        float _2728 = isnan(_2725) ? _2727 : (isnan(_2727) ? _2725 : min(_2727, _2725));
        float _2732 = (_2728 * _1968) + _1957;
        float _2733 = (_2728 * _1971) + _1961;
        float _2734 = (_2728 * _1974) + _1965;
        float _2735 = _2728 * 9.9999997473787516355514526367188e-05;
        float _2736 = (-1.0) - _2735;
        float _2738 = _2735 + 1.0;
        float frontier_phi_22_47_ladder;
        float frontier_phi_22_47_ladder_1;
        float frontier_phi_22_47_ladder_2;
        if ((_2734 > _2738) || ((_2734 < _2736) || ((_2733 > _2738) || ((_2733 < _2736) || ((_2732 < _2736) || (_2732 > _2738))))))
        {
            frontier_phi_22_47_ladder = 0.0;
            frontier_phi_22_47_ladder_1 = 0.0;
            frontier_phi_22_47_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2852 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2734, cbModelParam._m0[17u].z, fma(_2733, cbModelParam._m0[17u].y, _2732 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2734, cbModelParam._m0[18u].z, fma(_2733, cbModelParam._m0[18u].y, _2732 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2734, cbModelParam._m0[19u].z, fma(_2733, cbModelParam._m0[19u].y, _2732 * cbModelParam._m0[19u].x))), _1903);
            frontier_phi_22_47_ladder = _2852.z * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_1 = _2852.y * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_2 = _2852.x * cbModelParam._m0[1u].z;
        }
        _1993 = frontier_phi_22_47_ladder_2;
        _1995 = frontier_phi_22_47_ladder_1;
        _1997 = frontier_phi_22_47_ladder;
    }
    else
    {
        vec4 _1977 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1008, _1009, _1010), _1903);
        _1993 = _1977.x * cbModelParam._m0[1u].z;
        _1995 = _1977.y * cbModelParam._m0[1u].z;
        _1997 = _1977.z * cbModelParam._m0[1u].z;
    }
    float _2009 = ((((1.0 - _1029) * ((_1016 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_1029 * _1016)) * _1000;
    float _2010 = _2009 * ((cbModelParam._m0[1u].w * (_1993 - _1894)) + _1894);
    float _2011 = _2009 * ((cbModelParam._m0[1u].w * (_1995 - _1896)) + _1896);
    float _2012 = _2009 * ((cbModelParam._m0[1u].w * (_1997 - _1898)) + _1898);
    float _2015 = fma(_2012, cbSceneParam._m0[89u].z, fma(_2011, cbSceneParam._m0[89u].y, _2010 * cbSceneParam._m0[89u].x));
    float _2018 = fma(_2012, cbSceneParam._m0[90u].z, fma(_2011, cbSceneParam._m0[90u].y, _2010 * cbSceneParam._m0[90u].x));
    float _2021 = fma(_2012, cbSceneParam._m0[91u].z, fma(_2011, cbSceneParam._m0[91u].y, _2010 * cbSceneParam._m0[91u].x));
    float _2055 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2059 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2063 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2067 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2068 = _2055 / _2067;
    float _2069 = _2059 / _2067;
    float _2070 = _2063 / _2067;
    float _2217;
    float _2218;
    float _2219;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2097 = ((uint(_2070 > cbSceneParam._m0[59u].y) + uint(_2070 > cbSceneParam._m0[59u].x)) + uint(_2070 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2098 = _2097 + 43u;
        uint _2106 = _2097 + 44u;
        uint _2114 = _2097 + 45u;
        uint _2122 = _2097 + 46u;
        float _2133 = fma(_2067, cbSceneParam._m0[_2098].w, fma(_2063, cbSceneParam._m0[_2098].z, fma(_2059, cbSceneParam._m0[_2098].y, _2055 * cbSceneParam._m0[_2098].x)));
        float _2137 = fma(_2067, cbSceneParam._m0[_2106].w, fma(_2063, cbSceneParam._m0[_2106].z, fma(_2059, cbSceneParam._m0[_2106].y, _2055 * cbSceneParam._m0[_2106].x)));
        float _2145 = fma(_2067, cbSceneParam._m0[_2122].w, fma(_2063, cbSceneParam._m0[_2122].z, fma(_2059, cbSceneParam._m0[_2122].y, _2055 * cbSceneParam._m0[_2122].x)));
        float _2150 = cbSceneParam._m0[33u].z * _2145;
        float _2152 = cbSceneParam._m0[33u].w * _2145;
        float _2155 = fma(_2067, cbSceneParam._m0[_2114].w, fma(_2063, cbSceneParam._m0[_2114].z, fma(_2059, cbSceneParam._m0[_2114].y, _2055 * cbSceneParam._m0[_2114].x))) / _2145;
        float _2203 = (cbSceneParam._m0[33u].x - sqrt(((_2069 * _2069) + (_2068 * _2068)) + (_2070 * _2070))) * cbSceneParam._m0[33u].y;
        float _4480 = isnan(0.0) ? _2203 : (isnan(_2203) ? 0.0 : max(_2203, 0.0));
        float _2210 = (isnan(1.0) ? _4480 : (isnan(_4480) ? 1.0 : min(_4480, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2150 + _2133) / _2145, (_2152 + _2137) / _2145), _2155), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2152 + _2133) / _2145, (_2137 - _2150) / _2145), _2155), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2133 - _2150) / _2145, (_2137 - _2152) / _2145), _2155), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2133 - _2152) / _2145, (_2150 + _2137) / _2145), _2155), 0.0)).x), vec4(0.25)));
        _2217 = 1.0 - (_2210 * cbSceneParam._m0[34u].x);
        _2218 = 1.0 - (_2210 * cbSceneParam._m0[34u].y);
        _2219 = 1.0 - (_2210 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2217 = 1.0;
        _2218 = 1.0;
        _2219 = 1.0;
    }
    float _2283;
    float _2285;
    float _2287;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2271 = fma(_2067, cbSceneParam._m0[63u].w, fma(_2063, cbSceneParam._m0[63u].z, fma(_2059, cbSceneParam._m0[63u].y, _2055 * cbSceneParam._m0[63u].x)));
        float _2272 = fma(_2067, cbSceneParam._m0[60u].w, fma(_2063, cbSceneParam._m0[60u].z, fma(_2059, cbSceneParam._m0[60u].y, _2055 * cbSceneParam._m0[60u].x))) / _2271;
        float _2273 = fma(_2067, cbSceneParam._m0[61u].w, fma(_2063, cbSceneParam._m0[61u].z, fma(_2059, cbSceneParam._m0[61u].y, _2055 * cbSceneParam._m0[61u].x))) / _2271;
        float frontier_phi_34_33_ladder;
        float frontier_phi_34_33_ladder_1;
        float frontier_phi_34_33_ladder_2;
        if ((((_2272 >= cbSceneParam._m0[64u].x) && (_2273 >= cbSceneParam._m0[64u].y)) && (_2272 <= cbSceneParam._m0[64u].z)) && (_2273 <= cbSceneParam._m0[64u].w))
        {
            float _2411 = fma(_2067, cbSceneParam._m0[62u].w, fma(_2063, cbSceneParam._m0[62u].z, fma(_2059, cbSceneParam._m0[62u].y, _2055 * cbSceneParam._m0[62u].x))) / _2271;
            float _2415 = isnan(cbSceneParam._m0[41u].w) ? _2411 : (isnan(_2411) ? cbSceneParam._m0[41u].w : max(_2411, cbSceneParam._m0[41u].w));
            float _2458 = (cbSceneParam._m0[33u].x - sqrt(((_2069 * _2069) + (_2068 * _2068)) + (_2070 * _2070))) * cbSceneParam._m0[33u].y;
            float _4496 = isnan(0.0) ? _2458 : (isnan(_2458) ? 0.0 : max(_2458, 0.0));
            float _2465 = (isnan(1.0) ? _4496 : (isnan(_4496) ? 1.0 : min(_4496, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2272, cbSceneParam._m0[33u].w + _2273), _2415), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2272, _2273 - cbSceneParam._m0[33u].z), _2415), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2272 - cbSceneParam._m0[33u].z, _2273 - cbSceneParam._m0[33u].w), _2415), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2272 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2273), _2415), 0.0)).x), vec4(0.25)));
            float _2469 = 1.0 - (_2465 * cbSceneParam._m0[34u].x);
            float _2470 = 1.0 - (_2465 * cbSceneParam._m0[34u].y);
            float _2471 = 1.0 - (_2465 * cbSceneParam._m0[34u].z);
            frontier_phi_34_33_ladder = isnan(_2471) ? _2219 : (isnan(_2219) ? _2471 : min(_2219, _2471));
            frontier_phi_34_33_ladder_1 = isnan(_2470) ? _2218 : (isnan(_2218) ? _2470 : min(_2218, _2470));
            frontier_phi_34_33_ladder_2 = isnan(_2469) ? _2217 : (isnan(_2217) ? _2469 : min(_2217, _2469));
        }
        else
        {
            frontier_phi_34_33_ladder = _2219;
            frontier_phi_34_33_ladder_1 = _2218;
            frontier_phi_34_33_ladder_2 = _2217;
        }
        _2283 = frontier_phi_34_33_ladder_2;
        _2285 = frontier_phi_34_33_ladder_1;
        _2287 = frontier_phi_34_33_ladder;
    }
    else
    {
        _2283 = _2217;
        _2285 = _2218;
        _2287 = _2219;
    }
    uvec4 _2292 = floatBitsToUint(cbInstanceData._m0[_246 + 5u]);
    uint _2294 = _2292.x * 14u;
    uint _2295 = _2294 + 13u;
    float _2302 = _1000 + (-1.0);
    float _2307 = (cbLight._m0[_2295].x * _2302) + 1.0;
    float _2308 = (cbLight._m0[_2295].y * _2302) + 1.0;
    float _2309 = (cbLight._m0[_2295].z * _2302) + 1.0;
    float _2310 = (cbLight._m0[_2295].w * _2302) + 1.0;
    uint _2311 = _2294 + 5u;
    float _2317 = isnan(1.0) ? _2308 : (isnan(_2308) ? 1.0 : min(_2308, 1.0));
    uint _2321 = _2294 + 4u;
    float _2330 = isnan(1.0) ? _2307 : (isnan(_2307) ? 1.0 : min(_2307, 1.0));
    uint _2334 = _2294 | 1u;
    float _2345 = dot(vec3(cbLight._m0[_2294].xyz), vec3(_850, _851, _852));
    float _2348 = dot(vec3(cbLight._m0[_2334].xyz), vec3(_850, _851, _852));
    float _4532 = isnan(0.0) ? _2345 : (isnan(_2345) ? 0.0 : max(_2345, 0.0));
    float _4543 = isnan(0.0) ? _2348 : (isnan(_2348) ? 0.0 : max(_2348, 0.0));
    float _2353 = (isnan(1.0) ? _4532 : (isnan(_4532) ? 1.0 : min(_4532, 1.0))) * 0.3183098733425140380859375;
    float _2355 = (isnan(1.0) ? _4543 : (isnan(_4543) ? 1.0 : min(_4543, 1.0))) * 0.3183098733425140380859375;
    float _2362 = ((cbLight._m0[_2311].x * _2317) * _2355) + (((cbLight._m0[_2321].x * _2283) * _2330) * _2353);
    float _2363 = ((_2317 * cbLight._m0[_2311].y) * _2355) + (((cbLight._m0[_2321].y * _2285) * _2330) * _2353);
    float _2364 = ((_2317 * cbLight._m0[_2311].z) * _2355) + (((cbLight._m0[_2321].z * _2287) * _2330) * _2353);
    uvec4 _2368 = floatBitsToUint(cbLight._m0[_2294 + 12u]);
    bool _2370 = _2368.x == 0u;
    float _2472;
    float _2474;
    float _2476;
    if (_2370)
    {
        _2472 = _2362;
        _2474 = _2363;
        _2476 = _2364;
    }
    else
    {
        uint _2480 = _2294 + 6u;
        float _2496 = (dot(vec3(cbLight._m0[_2294 + 2u].xyz), vec3(_850, _851, _852)) * 0.5) + 0.5;
        float _2497 = _2496 * _2496;
        float _4554 = isnan(0.0) ? _2497 : (isnan(_2497) ? 0.0 : max(_2497, 0.0));
        float _2498 = isnan(1.0) ? _4554 : (isnan(_4554) ? 1.0 : min(_4554, 1.0));
        float _2499 = isnan(1.0) ? _2309 : (isnan(_2309) ? 1.0 : min(_2309, 1.0));
        _2472 = (((cbLight._m0[_2480].x * 0.3183098733425140380859375) * _2498) * _2499) + _2362;
        _2474 = (((cbLight._m0[_2480].y * 0.3183098733425140380859375) * _2498) * _2499) + _2363;
        _2476 = (((cbLight._m0[_2480].z * 0.3183098733425140380859375) * _2498) * _2499) + _2364;
    }
    bool _2479 = _2368.y == 0u;
    float _2534;
    float _2536;
    float _2538;
    if (_2479)
    {
        _2534 = _2472;
        _2536 = _2474;
        _2538 = _2476;
    }
    else
    {
        uint _2696 = _2294 + 7u;
        float _2712 = (dot(vec3(cbLight._m0[_2294 + 3u].xyz), vec3(_850, _851, _852)) * 0.5) + 0.5;
        float _2713 = _2712 * _2712;
        float _4570 = isnan(0.0) ? _2713 : (isnan(_2713) ? 0.0 : max(_2713, 0.0));
        float _2714 = isnan(1.0) ? _4570 : (isnan(_4570) ? 1.0 : min(_4570, 1.0));
        float _2715 = isnan(1.0) ? _2310 : (isnan(_2310) ? 1.0 : min(_2310, 1.0));
        _2534 = (((cbLight._m0[_2696].x * 0.3183098733425140380859375) * _2714) * _2715) + _2472;
        _2536 = (((cbLight._m0[_2696].y * 0.3183098733425140380859375) * _2714) * _2715) + _2474;
        _2538 = (((cbLight._m0[_2696].z * 0.3183098733425140380859375) * _2714) * _2715) + _2476;
    }
    uint _2541 = _2294 + 8u;
    float _2554 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2294].w)) * _853) * 0.949999988079071044921875);
    float _2555 = _2554 * _2554;
    float _2556 = cbLight._m0[_2294].x + _929;
    float _2557 = cbLight._m0[_2294].y + _930;
    float _2558 = cbLight._m0[_2294].z + _931;
    float _2562 = inversesqrt(dot(vec3(_2556, _2557, _2558), vec3(_2556, _2557, _2558)));
    float _2563 = _2562 * _2556;
    float _2564 = _2562 * _2557;
    float _2565 = _2562 * _2558;
    float _2566 = dot(vec3(_850, _851, _852), vec3(cbLight._m0[_2294].xyz));
    float _4586 = isnan(0.0) ? _2566 : (isnan(_2566) ? 0.0 : max(_2566, 0.0));
    float _2569 = isnan(1.0) ? _4586 : (isnan(_4586) ? 1.0 : min(_4586, 1.0));
    float _4597 = isnan(0.0) ? _1001 : (isnan(_1001) ? 0.0 : max(_1001, 0.0));
    float _2570 = isnan(1.0) ? _4597 : (isnan(_4597) ? 1.0 : min(_4597, 1.0));
    float _2571 = dot(vec3(_850, _851, _852), vec3(_2563, _2564, _2565));
    float _4608 = isnan(0.0) ? _2571 : (isnan(_2571) ? 0.0 : max(_2571, 0.0));
    float _2574 = isnan(1.0) ? _4608 : (isnan(_4608) ? 1.0 : min(_4608, 1.0));
    float _2575 = dot(vec3(cbLight._m0[_2294].xyz), vec3(_2563, _2564, _2565));
    float _4619 = isnan(0.0) ? _2575 : (isnan(_2575) ? 0.0 : max(_2575, 0.0));
    float _2579 = _2555 * _2555;
    float _2583 = ((_2574 * _2574) * (_2579 + (-1.0))) + 1.0;
    float _2594 = (exp2(log2(1.0 - (isnan(1.0) ? _4619 : (isnan(_4619) ? 1.0 : min(_4619, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2595 = 1.0 - _2555;
    float _2606 = (0.5 / (((_2570 * ((_2569 * _2595) + _2555)) + 9.9999999392252902907785028219223e-09) + (((_2570 * _2595) + _2555) * _2569))) * _2569;
    float _4630 = isnan(0.0) ? _2606 : (isnan(_2606) ? 0.0 : max(_2606, 0.0));
    float _2608 = (isnan(1.0) ? _4630 : (isnan(_4630) ? 1.0 : min(_4630, 1.0))) * (_2579 / ((_2583 * _2583) * 3.141590118408203125));
    uint _2622 = _2294 + 9u;
    float _2633 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2334].w)) * _853) * 0.949999988079071044921875);
    float _2634 = _2633 * _2633;
    float _2635 = cbLight._m0[_2334].x + _929;
    float _2636 = cbLight._m0[_2334].y + _930;
    float _2637 = cbLight._m0[_2334].z + _931;
    float _2641 = inversesqrt(dot(vec3(_2635, _2636, _2637), vec3(_2635, _2636, _2637)));
    float _2642 = _2641 * _2635;
    float _2643 = _2641 * _2636;
    float _2644 = _2641 * _2637;
    float _2645 = dot(vec3(_850, _851, _852), vec3(cbLight._m0[_2334].xyz));
    float _4641 = isnan(0.0) ? _2645 : (isnan(_2645) ? 0.0 : max(_2645, 0.0));
    float _2648 = isnan(1.0) ? _4641 : (isnan(_4641) ? 1.0 : min(_4641, 1.0));
    float _2649 = dot(vec3(_850, _851, _852), vec3(_2642, _2643, _2644));
    float _4652 = isnan(0.0) ? _2649 : (isnan(_2649) ? 0.0 : max(_2649, 0.0));
    float _2652 = isnan(1.0) ? _4652 : (isnan(_4652) ? 1.0 : min(_4652, 1.0));
    float _2653 = dot(vec3(cbLight._m0[_2334].xyz), vec3(_2642, _2643, _2644));
    float _4663 = isnan(0.0) ? _2653 : (isnan(_2653) ? 0.0 : max(_2653, 0.0));
    float _2657 = _2634 * _2634;
    float _2661 = ((_2652 * _2652) * (_2657 + (-1.0))) + 1.0;
    float _2670 = (exp2(log2(1.0 - (isnan(1.0) ? _4663 : (isnan(_4663) ? 1.0 : min(_4663, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2671 = 1.0 - _2634;
    float _2681 = (0.5 / (((_2570 * ((_2648 * _2671) + _2634)) + 9.9999999392252902907785028219223e-09) + (((_2570 * _2671) + _2634) * _2648))) * _2648;
    float _4674 = isnan(0.0) ? _2681 : (isnan(_2681) ? 0.0 : max(_2681, 0.0));
    float _2683 = (isnan(1.0) ? _4674 : (isnan(_4674) ? 1.0 : min(_4674, 1.0))) * (_2657 / ((_2661 * _2661) * 3.141590118408203125));
    float _2693 = (((_2670 * cbLight._m0[_2622].x) * _2683) * _2317) + ((((cbLight._m0[_2541].x * _2283) * _2594) * _2608) * _2330);
    float _2694 = (((_2670 * cbLight._m0[_2622].y) * _2683) * _2317) + ((((cbLight._m0[_2541].y * _2285) * _2594) * _2608) * _2330);
    float _2695 = (((_2670 * cbLight._m0[_2622].z) * _2683) * _2317) + ((((cbLight._m0[_2541].z * _2287) * _2594) * _2608) * _2330);
    float _2751;
    float _2753;
    float _2755;
    if (_2370)
    {
        _2751 = _2693;
        _2753 = _2694;
        _2755 = _2695;
    }
    else
    {
        uint _2757 = _2294 + 2u;
        uint _2761 = _2294 + 10u;
        float _2775 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2757].w)) * _853) * 0.949999988079071044921875);
        float _2776 = _2775 * _2775;
        float _2777 = cbLight._m0[_2757].x + _929;
        float _2778 = cbLight._m0[_2757].y + _930;
        float _2779 = cbLight._m0[_2757].z + _931;
        float _2783 = inversesqrt(dot(vec3(_2777, _2778, _2779), vec3(_2777, _2778, _2779)));
        float _2784 = _2783 * _2777;
        float _2785 = _2783 * _2778;
        float _2786 = _2783 * _2779;
        float _2787 = dot(vec3(_850, _851, _852), vec3(cbLight._m0[_2757].xyz));
        float _4685 = isnan(0.0) ? _2787 : (isnan(_2787) ? 0.0 : max(_2787, 0.0));
        float _2790 = isnan(1.0) ? _4685 : (isnan(_4685) ? 1.0 : min(_4685, 1.0));
        float _2791 = dot(vec3(_850, _851, _852), vec3(_2784, _2785, _2786));
        float _4696 = isnan(0.0) ? _2791 : (isnan(_2791) ? 0.0 : max(_2791, 0.0));
        float _2794 = isnan(1.0) ? _4696 : (isnan(_4696) ? 1.0 : min(_4696, 1.0));
        float _2795 = dot(vec3(cbLight._m0[_2757].xyz), vec3(_2784, _2785, _2786));
        float _4707 = isnan(0.0) ? _2795 : (isnan(_2795) ? 0.0 : max(_2795, 0.0));
        float _2799 = _2776 * _2776;
        float _2803 = ((_2794 * _2794) * (_2799 + (-1.0))) + 1.0;
        float _2812 = (exp2(log2(1.0 - (isnan(1.0) ? _4707 : (isnan(_4707) ? 1.0 : min(_4707, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2813 = 1.0 - _2776;
        float _2823 = (0.5 / (((_2570 * ((_2790 * _2813) + _2776)) + 9.9999999392252902907785028219223e-09) + (((_2570 * _2813) + _2776) * _2790))) * _2790;
        float _4718 = isnan(0.0) ? _2823 : (isnan(_2823) ? 0.0 : max(_2823, 0.0));
        float _2825 = (isnan(1.0) ? _4718 : (isnan(_4718) ? 1.0 : min(_4718, 1.0))) * (_2799 / ((_2803 * _2803) * 3.141590118408203125));
        float _2826 = isnan(1.0) ? _2309 : (isnan(_2309) ? 1.0 : min(_2309, 1.0));
        _2751 = (((_2812 * cbLight._m0[_2761].x) * _2825) * _2826) + _2693;
        _2753 = (((_2812 * cbLight._m0[_2761].y) * _2825) * _2826) + _2694;
        _2755 = (((_2812 * cbLight._m0[_2761].z) * _2825) * _2826) + _2695;
    }
    float _2857;
    float _2859;
    float _2861;
    if (_2479)
    {
        _2857 = _2751;
        _2859 = _2753;
        _2861 = _2755;
    }
    else
    {
        uint _2868 = _2294 + 3u;
        uint _2872 = _2294 + 11u;
        float _2886 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2868].w)) * _853) * 0.949999988079071044921875);
        float _2887 = _2886 * _2886;
        float _2888 = cbLight._m0[_2868].x + _929;
        float _2889 = cbLight._m0[_2868].y + _930;
        float _2890 = cbLight._m0[_2868].z + _931;
        float _2894 = inversesqrt(dot(vec3(_2888, _2889, _2890), vec3(_2888, _2889, _2890)));
        float _2895 = _2894 * _2888;
        float _2896 = _2894 * _2889;
        float _2897 = _2894 * _2890;
        float _2898 = dot(vec3(_850, _851, _852), vec3(cbLight._m0[_2868].xyz));
        float _4734 = isnan(0.0) ? _2898 : (isnan(_2898) ? 0.0 : max(_2898, 0.0));
        float _2901 = isnan(1.0) ? _4734 : (isnan(_4734) ? 1.0 : min(_4734, 1.0));
        float _2902 = dot(vec3(_850, _851, _852), vec3(_2895, _2896, _2897));
        float _4745 = isnan(0.0) ? _2902 : (isnan(_2902) ? 0.0 : max(_2902, 0.0));
        float _2905 = isnan(1.0) ? _4745 : (isnan(_4745) ? 1.0 : min(_4745, 1.0));
        float _2906 = dot(vec3(cbLight._m0[_2868].xyz), vec3(_2895, _2896, _2897));
        float _4756 = isnan(0.0) ? _2906 : (isnan(_2906) ? 0.0 : max(_2906, 0.0));
        float _2910 = _2887 * _2887;
        float _2914 = ((_2905 * _2905) * (_2910 + (-1.0))) + 1.0;
        float _2923 = (exp2(log2(1.0 - (isnan(1.0) ? _4756 : (isnan(_4756) ? 1.0 : min(_4756, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2924 = 1.0 - _2887;
        float _2934 = (0.5 / (((_2570 * ((_2901 * _2924) + _2887)) + 9.9999999392252902907785028219223e-09) + (((_2570 * _2924) + _2887) * _2901))) * _2901;
        float _4767 = isnan(0.0) ? _2934 : (isnan(_2934) ? 0.0 : max(_2934, 0.0));
        float _2936 = (isnan(1.0) ? _4767 : (isnan(_4767) ? 1.0 : min(_4767, 1.0))) * (_2910 / ((_2914 * _2914) * 3.141590118408203125));
        float _2937 = isnan(1.0) ? _2310 : (isnan(_2310) ? 1.0 : min(_2310, 1.0));
        _2857 = (((_2923 * cbLight._m0[_2872].x) * _2936) * _2937) + _2751;
        _2859 = (((_2923 * cbLight._m0[_2872].y) * _2936) * _2937) + _2753;
        _2861 = (((_2923 * cbLight._m0[_2872].z) * _2936) * _2937) + _2755;
    }
    float _3003;
    float _3005;
    float _3007;
    float _3009;
    float _3011;
    float _3013;
    if (_2292.y == 0u)
    {
        uvec4 _2958 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2959 = _2958.x;
        uint _2970 = uint((float(_2958.y) * floor(float(uint(cbSceneParam._m0[85u].y * _938) / _2959))) + floor(float(uint(cbSceneParam._m0[85u].x * _937) / _2959)));
        float _2980 = (log2(_2070 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2981 = isnan(0.0) ? _2980 : (isnan(_2980) ? 0.0 : max(_2980, 0.0));
        uint _2984 = uint(isnan(14.0) ? _2981 : (isnan(_2981) ? 14.0 : min(_2981, 14.0)));
        uvec4 _2989 = texelFetch(g_lightClusterGridBuffer, int(((_2984 << 2u) + (_2970 << 6u)) >> 2u));
        uint _2990 = _2989.x;
        uint _2991 = _2958.z;
        float _3070;
        float _3072;
        float _3074;
        float _3076;
        float _3078;
        float _3080;
        if (((((1u << ((_2991 >> 4u) & 15u)) + 4294967295u) & _2990) == 0u) || ((_2991 & 240u) == 0u))
        {
            _3070 = 0.0;
            _3072 = 0.0;
            _3074 = 0.0;
            _3076 = 0.0;
            _3078 = 0.0;
            _3080 = 0.0;
        }
        else
        {
            float _3071;
            float _3073;
            float _3075;
            float _3077;
            float _3079;
            float _3081;
            float _3215 = 0.0;
            float _3216 = 0.0;
            float _3217 = 0.0;
            float _3218 = 0.0;
            float _3219 = 0.0;
            float _3220 = 0.0;
            uint _3221 = 0u;
            uint _3230;
            bool _3231;
            for (;;)
            {
                _3230 = texelFetch(g_lightClassification, int((((_2984 << 5u) + (_2970 << 9u)) + (_3221 << 2u)) >> 2u)).x;
                _3231 = _3230 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3231)
                {
                    frontier_phi_66_pred = _3220;
                    frontier_phi_66_pred_1 = _3219;
                    frontier_phi_66_pred_2 = _3218;
                    frontier_phi_66_pred_3 = _3217;
                    frontier_phi_66_pred_4 = _3216;
                    frontier_phi_66_pred_5 = _3215;
                }
                else
                {
                    float _3339;
                    float _3340;
                    float _3341;
                    float _3342;
                    float _3343;
                    float _3344;
                    uint _3345;
                    _3339 = _3215;
                    _3340 = _3216;
                    _3341 = _3217;
                    _3342 = _3218;
                    _3343 = _3219;
                    _3344 = _3220;
                    _3345 = _3230;
                    float _3271;
                    float _3272;
                    float _3273;
                    float _3274;
                    float _3275;
                    float _3276;
                    for (;;)
                    {
                        uint _3349 = uint(findLSB(_3345)) + (_3221 << 5u);
                        uint _3346 = (_3345 + 4294967295u) & _3345;
                        uint _3351 = _3349 * 48u;
                        vec4 _3365 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3351)).x, texelFetch(g_PointLightRenderingBuffer, int(_3351 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3351 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3351 + 3u)).x));
                        uint _3371 = (_3349 * 48u) + 4u;
                        vec4 _3384 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3371)).x, texelFetch(g_PointLightRenderingBuffer, int(_3371 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3371 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3371 + 3u)).x));
                        uint _3390 = (_3349 * 48u) + 8u;
                        vec3 _3401 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3390)).x, texelFetch(g_PointLightRenderingBuffer, int(_3390 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3390 + 2u)).x));
                        float _3405 = _3365.x - _2068;
                        float _3406 = _3365.y - _2069;
                        float _3407 = _3365.z - _2070;
                        float _3408 = dot(vec3(_3405, _3406, _3407), vec3(_3405, _3406, _3407));
                        float _3411 = inversesqrt(_3408);
                        float _3412 = _3411 * _3405;
                        float _3413 = _3411 * _3406;
                        float _3414 = _3411 * _3407;
                        float _3415 = dot(vec3(_956, _959, _962), vec3(_3412, _3413, _3414));
                        float _3420 = 1.0 - (_3408 * _3365.w);
                        float _4793 = isnan(0.0) ? _3420 : (isnan(_3420) ? 0.0 : max(_3420, 0.0));
                        float _3421 = isnan(1.0) ? _4793 : (isnan(_4793) ? 1.0 : min(_4793, 1.0));
                        float _3422 = sqrt(_3408) * _3384.w;
                        float _3425 = 1.39999997615814208984375 / (_3422 + 1.39999997615814208984375);
                        float _3426 = _3425 * _3425;
                        float _3429 = ((1.0 - _3426) * _3415) + _3426;
                        float _3432 = _3422 * _3422;
                        float _3436 = ((isnan(0.0) ? _3429 : (isnan(_3429) ? 0.0 : max(_3429, 0.0))) * _3421) / ((_3432 * 0.699999988079071044921875) + 1.0);
                        float _3440 = (-0.0) - _2068;
                        float _3441 = (-0.0) - _2069;
                        float _3442 = (-0.0) - _2070;
                        float _3446 = inversesqrt(dot(vec3(_3440, _3441, _3442), vec3(_3440, _3441, _3442)));
                        float _3447 = _3446 * _3440;
                        float _3448 = _3446 * _3441;
                        float _3449 = _3446 * _3442;
                        float _3456 = exp2(log2(1.0 / ((_3432 * 3.5) + 5.0)) * 0.25);
                        float _3457 = 1.0 - _1016;
                        float _3464 = sqrt(1.0 - ((1.0 - (_3457 * _3457)) * (1.0 - (_3456 * _3456))));
                        float _3465 = _3464 * _3464;
                        float _3466 = _3465 * _3465;
                        float _3467 = _3447 + _3412;
                        float _3468 = _3448 + _3413;
                        float _3469 = _3449 + _3414;
                        float _3473 = inversesqrt(dot(vec3(_3467, _3468, _3469), vec3(_3467, _3468, _3469)));
                        float _3477 = dot(vec3(_956, _959, _962), vec3(_3447, _3448, _3449));
                        float _4809 = isnan(0.0) ? _3477 : (isnan(_3477) ? 0.0 : max(_3477, 0.0));
                        float _3480 = isnan(1.0) ? _4809 : (isnan(_4809) ? 1.0 : min(_4809, 1.0));
                        float _3481 = dot(vec3(_956, _959, _962), vec3(_3473 * _3467, _3473 * _3468, _3473 * _3469));
                        float _4820 = isnan(0.0) ? _3481 : (isnan(_3481) ? 0.0 : max(_3481, 0.0));
                        float _3484 = isnan(1.0) ? _4820 : (isnan(_4820) ? 1.0 : min(_4820, 1.0));
                        float _3488 = ((_3484 * _3484) * (_3466 + (-1.0))) + 1.0;
                        float _3489 = _3425 * _3465;
                        float _3490 = _3489 * _3489;
                        float _3493 = ((1.0 - _3490) * _3415) + _3490;
                        float _4831 = isnan(0.0) ? _3493 : (isnan(_3493) ? 0.0 : max(_3493, 0.0));
                        float _3494 = isnan(1.0) ? _4831 : (isnan(_4831) ? 1.0 : min(_4831, 1.0));
                        float _3495 = 1.0 - _3465;
                        float _3505 = (0.5 / (((_3494 * ((_3480 * _3495) + _3465)) + 9.9999999392252902907785028219223e-09) + (((_3494 * _3495) + _3465) * _3480))) * _3494;
                        float _4842 = isnan(0.0) ? _3505 : (isnan(_3505) ? 0.0 : max(_3505, 0.0));
                        float _3516 = (((_3466 * 3.1415927410125732421875) * (isnan(1.0) ? _4842 : (isnan(_4842) ? 1.0 : min(_4842, 1.0)))) / ((_3488 * _3488) * ((_3432 * 2.1991131305694580078125) + 3.141590118408203125))) * _3421;
                        _3274 = (_3436 * _3384.x) + _3342;
                        _3275 = (_3436 * _3384.y) + _3343;
                        _3276 = (_3436 * _3384.z) + _3344;
                        _3271 = (_3516 * _3401.x) + _3339;
                        _3272 = (_3516 * _3401.y) + _3340;
                        _3273 = (_3516 * _3401.z) + _3341;
                        if (_3346 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3339 = _3271;
                            _3340 = _3272;
                            _3341 = _3273;
                            _3342 = _3274;
                            _3343 = _3275;
                            _3344 = _3276;
                            _3345 = _3346;
                        }
                    }
                    frontier_phi_66_pred = _3276;
                    frontier_phi_66_pred_1 = _3275;
                    frontier_phi_66_pred_2 = _3274;
                    frontier_phi_66_pred_3 = _3273;
                    frontier_phi_66_pred_4 = _3272;
                    frontier_phi_66_pred_5 = _3271;
                }
                _3081 = frontier_phi_66_pred;
                _3079 = frontier_phi_66_pred_1;
                _3077 = frontier_phi_66_pred_2;
                _3075 = frontier_phi_66_pred_3;
                _3073 = frontier_phi_66_pred_4;
                _3071 = frontier_phi_66_pred_5;
                uint _3222 = _3221 + 1u;
                if (_3222 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3215 = _3071;
                    _3216 = _3073;
                    _3217 = _3075;
                    _3218 = _3077;
                    _3219 = _3079;
                    _3220 = _3081;
                    _3221 = _3222;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3070 = _3071;
            _3072 = _3073;
            _3074 = _3075;
            _3076 = _3077;
            _3078 = _3079;
            _3080 = _3081;
        }
        uvec4 _3084 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3085 = _3084.z;
        uint _3087 = (_3085 >> 8u) & 15u;
        float _3183;
        float _3185;
        float _3187;
        float _3189;
        float _3191;
        float _3193;
        if (((4294967295u << _3087) & _2990) == 0u)
        {
            _3183 = _3070;
            _3185 = _3072;
            _3187 = _3074;
            _3189 = _3076;
            _3191 = _3078;
            _3193 = _3080;
        }
        else
        {
            float _3208 = inversesqrt(dot(vec3(_2068, _2069, _2070), vec3(_2068, _2069, _2070)));
            float _3209 = _3208 * _2068;
            float _3210 = _3208 * _2069;
            float _3211 = _3208 * _2070;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_3087 < ((_3085 >> 12u) & 15u))
            {
                float _3184;
                float _3186;
                float _3188;
                float _3190;
                float _3192;
                float _3194;
                float _3322 = _3070;
                float _3323 = _3072;
                float _3324 = _3074;
                float _3325 = _3076;
                float _3326 = _3078;
                float _3327 = _3080;
                uint _3328 = _3087;
                uint _3337;
                bool _3338;
                for (;;)
                {
                    _3337 = texelFetch(g_lightClassification, int((((_2984 << 5u) + (_2970 << 9u)) + (_3328 << 2u)) >> 2u)).x;
                    _3338 = _3337 == 0u;
                    float frontier_phi_72_pred;
                    float frontier_phi_72_pred_1;
                    float frontier_phi_72_pred_2;
                    float frontier_phi_72_pred_3;
                    float frontier_phi_72_pred_4;
                    float frontier_phi_72_pred_5;
                    if (_3338)
                    {
                        frontier_phi_72_pred = _3327;
                        frontier_phi_72_pred_1 = _3326;
                        frontier_phi_72_pred_2 = _3325;
                        frontier_phi_72_pred_3 = _3324;
                        frontier_phi_72_pred_4 = _3323;
                        frontier_phi_72_pred_5 = _3322;
                    }
                    else
                    {
                        float _3521;
                        float _3522;
                        float _3523;
                        float _3524;
                        float _3525;
                        float _3526;
                        float _3814;
                        float _3815;
                        float _3816;
                        float _3817;
                        float _3818;
                        float _3819;
                        float _3534 = _3322;
                        float _3535 = _3323;
                        float _3536 = _3324;
                        float _3537 = _3325;
                        float _3538 = _3326;
                        float _3539 = _3327;
                        uint _3540 = _3337;
                        uint _3541;
                        vec4 _3566;
                        float _3567;
                        vec4 _3582;
                        vec3 _3594;
                        vec4 _3609;
                        vec4 _3624;
                        float _3670;
                        bool _3671;
                        for (;;)
                        {
                            uint _3551 = ((_3328 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3540));
                            _3541 = (_3540 + 4294967295u) & _3540;
                            uint _3553 = _3551 * 40u;
                            _3566 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3553)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3553 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3553 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3553 + 3u)).x));
                            _3567 = _3566.w;
                            uint _3569 = (_3551 * 40u) + 4u;
                            _3582 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3569)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3569 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3569 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3569 + 3u)).x));
                            uint _3584 = (_3551 * 40u) + 8u;
                            _3594 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3584)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3584 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3584 + 2u)).x));
                            uint _3596 = (_3551 * 40u) + 16u;
                            _3609 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3596)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3596 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3596 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3596 + 3u)).x));
                            uint _3611 = (_3551 * 40u) + 20u;
                            _3624 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3611)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3611 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3611 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3611 + 3u)).x));
                            uint _3626 = (_3551 * 40u) + 24u;
                            vec4 _3639 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3626)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3626 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3626 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3626 + 3u)).x));
                            uint _3645 = (_3551 * 40u) + 28u;
                            vec4 _3658 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3645)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3645 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3645 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3645 + 3u)).x));
                            _3670 = fma(_2070, _3658.z, fma(_2069, _3658.y, _3658.x * _2068)) + _3658.w;
                            _3671 = !((fma(_2070, _3639.z, fma(_2069, _3639.y, _3639.x * _2068)) + _3639.w) <= 0.0);
                            float frontier_phi_78_pred;
                            float frontier_phi_78_pred_1;
                            float frontier_phi_78_pred_2;
                            float frontier_phi_78_pred_3;
                            float frontier_phi_78_pred_4;
                            float frontier_phi_78_pred_5;
                            if (_3671)
                            {
                                float _3698 = _3566.x - _2068;
                                float _3699 = _3566.y - _2069;
                                float _3700 = _3566.z - _2070;
                                float _3701 = dot(vec3(_3698, _3699, _3700), vec3(_3698, _3699, _3700));
                                float _3704 = inversesqrt(_3701);
                                float _3705 = _3704 * _3698;
                                float _3706 = _3704 * _3699;
                                float _3707 = _3704 * _3700;
                                float _3711 = 1.0 - (_3701 / (_3567 * _3567));
                                float _4853 = isnan(0.0) ? _3711 : (isnan(_3711) ? 0.0 : max(_3711, 0.0));
                                float _3712 = isnan(1.0) ? _4853 : (isnan(_4853) ? 1.0 : min(_4853, 1.0));
                                float _3716 = sqrt(_3701) * _3582.w;
                                float _3718 = 1.39999997615814208984375 / (_3716 + 1.39999997615814208984375);
                                float _3719 = _3718 * _3718;
                                float _3722 = ((1.0 - _3719) * dot(vec3(_3705, _3706, _3707), vec3(_956, _959, _962))) + _3719;
                                float _3725 = _3716 * _3716;
                                float _3729 = (fma(_2070, _3609.z, fma(_2069, _3609.y, _3609.x * _2068)) + _3609.w) / _3670;
                                float _3730 = (fma(_2070, _3624.z, fma(_2069, _3624.y, _3624.x * _2068)) + _3624.w) / _3670;
                                float _3734 = 1.0 - dot(vec2(_3729, _3730), vec2(_3729, _3730));
                                float _4869 = isnan(0.0) ? _3734 : (isnan(_3734) ? 0.0 : max(_3734, 0.0));
                                float _3735 = isnan(1.0) ? _4869 : (isnan(_4869) ? 1.0 : min(_4869, 1.0));
                                float _3736 = _3735 * (((isnan(0.0) ? _3722 : (isnan(_3722) ? 0.0 : max(_3722, 0.0))) * _3712) / ((_3725 * 0.699999988079071044921875) + 1.0));
                                float _3748 = exp2(log2(1.0 / ((_3725 * 3.5) + 5.0)) * 0.25);
                                float _3749 = 1.0 - _1016;
                                float _3756 = sqrt(1.0 - ((1.0 - (_3749 * _3749)) * (1.0 - (_3748 * _3748))));
                                float _3757 = _3756 * _3756;
                                float _3758 = _3757 * _3757;
                                float _3759 = _3705 - _3209;
                                float _3760 = _3706 - _3210;
                                float _3761 = _3707 - _3211;
                                float _3765 = inversesqrt(dot(vec3(_3759, _3760, _3761), vec3(_3759, _3760, _3761)));
                                float _3769 = dot(vec3(_956, _959, _962), vec3((-0.0) - _3209, (-0.0) - _3210, (-0.0) - _3211));
                                float _4880 = isnan(0.0) ? _3769 : (isnan(_3769) ? 0.0 : max(_3769, 0.0));
                                float _3772 = isnan(1.0) ? _4880 : (isnan(_4880) ? 1.0 : min(_4880, 1.0));
                                float _3773 = dot(vec3(_956, _959, _962), vec3(_3765 * _3759, _3765 * _3760, _3765 * _3761));
                                float _4891 = isnan(0.0) ? _3773 : (isnan(_3773) ? 0.0 : max(_3773, 0.0));
                                float _3776 = isnan(1.0) ? _4891 : (isnan(_4891) ? 1.0 : min(_4891, 1.0));
                                float _3780 = ((_3776 * _3776) * (_3758 + (-1.0))) + 1.0;
                                float _3781 = _3718 * _3757;
                                float _3782 = _3781 * _3781;
                                float _3788 = ((1.0 - _3782) * dot(vec3(_956, _959, _962), vec3(_3705, _3706, _3707))) + _3782;
                                float _4902 = isnan(0.0) ? _3788 : (isnan(_3788) ? 0.0 : max(_3788, 0.0));
                                float _3789 = isnan(1.0) ? _4902 : (isnan(_4902) ? 1.0 : min(_4902, 1.0));
                                float _3790 = 1.0 - _3757;
                                float _3800 = (0.5 / (((_3789 * ((_3772 * _3790) + _3757)) + 9.9999999392252902907785028219223e-09) + (((_3789 * _3790) + _3757) * _3772))) * _3789;
                                float _4913 = isnan(0.0) ? _3800 : (isnan(_3800) ? 0.0 : max(_3800, 0.0));
                                float _3810 = (_3735 * _3712) * (((_3758 * 3.1415927410125732421875) * (isnan(1.0) ? _4913 : (isnan(_4913) ? 1.0 : min(_4913, 1.0)))) / ((_3780 * _3780) * ((_3725 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_78_pred = _3736 * _3582.y;
                                frontier_phi_78_pred_1 = _3736 * _3582.x;
                                frontier_phi_78_pred_2 = _3810 * _3594.z;
                                frontier_phi_78_pred_3 = _3810 * _3594.y;
                                frontier_phi_78_pred_4 = _3810 * _3594.x;
                                frontier_phi_78_pred_5 = _3736 * _3582.z;
                            }
                            else
                            {
                                frontier_phi_78_pred = 0.0;
                                frontier_phi_78_pred_1 = 0.0;
                                frontier_phi_78_pred_2 = 0.0;
                                frontier_phi_78_pred_3 = 0.0;
                                frontier_phi_78_pred_4 = 0.0;
                                frontier_phi_78_pred_5 = 0.0;
                            }
                            _3818 = frontier_phi_78_pred;
                            _3817 = frontier_phi_78_pred_1;
                            _3816 = frontier_phi_78_pred_2;
                            _3815 = frontier_phi_78_pred_3;
                            _3814 = frontier_phi_78_pred_4;
                            _3819 = frontier_phi_78_pred_5;
                            _3524 = _3817 + _3537;
                            _3525 = _3818 + _3538;
                            _3526 = _3819 + _3539;
                            _3521 = _3814 + _3534;
                            _3522 = _3815 + _3535;
                            _3523 = _3816 + _3536;
                            if (_3541 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3534 = _3521;
                                _3535 = _3522;
                                _3536 = _3523;
                                _3537 = _3524;
                                _3538 = _3525;
                                _3539 = _3526;
                                _3540 = _3541;
                                continue;
                            }
                        }
                        frontier_phi_72_pred = _3526;
                        frontier_phi_72_pred_1 = _3525;
                        frontier_phi_72_pred_2 = _3524;
                        frontier_phi_72_pred_3 = _3523;
                        frontier_phi_72_pred_4 = _3522;
                        frontier_phi_72_pred_5 = _3521;
                    }
                    _3194 = frontier_phi_72_pred;
                    _3192 = frontier_phi_72_pred_1;
                    _3190 = frontier_phi_72_pred_2;
                    _3188 = frontier_phi_72_pred_3;
                    _3186 = frontier_phi_72_pred_4;
                    _3184 = frontier_phi_72_pred_5;
                    uint _3329 = _3328 + 1u;
                    if (_3329 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3322 = _3184;
                        _3323 = _3186;
                        _3324 = _3188;
                        _3325 = _3190;
                        _3326 = _3192;
                        _3327 = _3194;
                        _3328 = _3329;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _3194;
                frontier_phi_60_61_ladder_1 = _3192;
                frontier_phi_60_61_ladder_2 = _3188;
                frontier_phi_60_61_ladder_3 = _3186;
                frontier_phi_60_61_ladder_4 = _3184;
                frontier_phi_60_61_ladder_5 = _3190;
            }
            else
            {
                frontier_phi_60_61_ladder = _3080;
                frontier_phi_60_61_ladder_1 = _3078;
                frontier_phi_60_61_ladder_2 = _3074;
                frontier_phi_60_61_ladder_3 = _3072;
                frontier_phi_60_61_ladder_4 = _3070;
                frontier_phi_60_61_ladder_5 = _3076;
            }
            _3183 = frontier_phi_60_61_ladder_4;
            _3185 = frontier_phi_60_61_ladder_3;
            _3187 = frontier_phi_60_61_ladder_2;
            _3189 = frontier_phi_60_61_ladder_5;
            _3191 = frontier_phi_60_61_ladder_1;
            _3193 = frontier_phi_60_61_ladder;
        }
        float _3198 = isnan(1.0) ? _1000 : (isnan(_1000) ? 1.0 : min(_1000, 1.0));
        _3003 = (_3198 * _3189) + _2534;
        _3005 = (_3198 * _3191) + _2536;
        _3007 = (_3198 * _3193) + _2538;
        _3009 = ((_3183 * 0.039999999105930328369140625) * _3198) + _2857;
        _3011 = ((_3185 * 0.039999999105930328369140625) * _3198) + _2859;
        _3013 = ((_3187 * 0.039999999105930328369140625) * _3198) + _2861;
    }
    else
    {
        _3003 = _2534;
        _3005 = _2536;
        _3007 = _2538;
        _3009 = _2857;
        _3011 = _2859;
        _3013 = _2861;
    }
    float _4929 = isnan(0.0) ? _985 : (isnan(_985) ? 0.0 : max(_985, 0.0));
    float _4940 = isnan(0.0) ? _986 : (isnan(_986) ? 0.0 : max(_986, 0.0));
    float _4951 = isnan(0.0) ? _987 : (isnan(_987) ? 0.0 : max(_987, 0.0));
    uint _3033 = _246 + 6u;
    float _3041 = _937 / cbSceneParam._m0[86u].x;
    float _3042 = _938 / cbSceneParam._m0[86u].y;
    vec4 _3056 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3041, _3042, (log2((isnan(cbSceneParam._m0[77u].w) ? _871 : (isnan(_871) ? cbSceneParam._m0[77u].w : min(_871, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3058 = _3056.x;
    float _3059 = _3056.y;
    float _3060 = _3056.z;
    float _3061 = _3056.w;
    float _3133;
    float _3135;
    float _3137;
    float _3139;
    if (_871 > cbSceneParam._m0[78u].w)
    {
        float _3095 = isnan(_871) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _871 : min(cbSceneParam._m0[80u].w, _871));
        float _3096 = _3095 / _871;
        float _3107 = _3096 * _922;
        float _3108 = _923 * _3096;
        float _3109 = (-0.0) - _3108;
        float _3111 = _3096 * _924;
        float _3113 = (cbSceneParam._m0[77u].w * _3109) / _3095;
        float _3114 = _3113 + cbSceneParam._m0[79u].w;
        float _3115 = cbSceneParam._m0[79u].w - _3108;
        float _3121 = sqrt(((_3107 * _3107) + (_3108 * _3108)) + (_3111 * _3111));
        float _3124 = (1.0 - (cbSceneParam._m0[77u].w / _3095)) * _3121;
        float _3129 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3131 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3284;
        if (abs((_3109 - _3113) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3284 = ((((_3114 > 0.0) ? exp2(_3129 * _3114) : (2.0 - exp2(_3131 * _3114))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3124;
        }
        else
        {
            float _3244 = 1.0 / cbSceneParam._m0[80u].x;
            float _3245 = isnan(_3115) ? _3114 : (isnan(_3114) ? _3115 : max(_3114, _3115));
            float _3246 = isnan(_3115) ? _3114 : (isnan(_3114) ? _3115 : min(_3114, _3115));
            float _3255 = isnan(0.0) ? _3245 : (isnan(_3245) ? 0.0 : min(_3245, 0.0));
            float _3256 = isnan(0.0) ? _3246 : (isnan(_3246) ? 0.0 : min(_3246, 0.0));
            _3284 = ((abs(_3121 / _3109) * cbSceneParam._m0[80u].y) * ((((_3255 - _3256) * 2.0) - ((exp2(_3129 * (isnan(0.0) ? _3245 : (isnan(_3245) ? 0.0 : max(_3245, 0.0)))) - exp2(_3129 * (isnan(0.0) ? _3246 : (isnan(_3246) ? 0.0 : max(_3246, 0.0))))) * _3244)) - ((exp2(_3131 * _3255) - exp2(_3131 * _3256)) * _3244))) + (_3124 * cbSceneParam._m0[80u].z);
        }
        vec4 _3286 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3041, _3042, 1.0), 0.0);
        float _3295 = exp2((_3284 * (-1.44269502162933349609375)) * (1.0 - _3286.w));
        float _3296 = log2(_3295);
        float _3312 = log2(_3061);
        _3133 = (exp2(_3312 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3296 * cbSceneParam._m0[78u].x)) * _3286.x) / cbSceneParam._m0[78u].x)) + _3058;
        _3135 = (exp2(_3312 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3296 * cbSceneParam._m0[78u].y)) * _3286.y) / cbSceneParam._m0[78u].y)) + _3059;
        _3137 = (exp2(_3312 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3296 * cbSceneParam._m0[78u].z)) * _3286.z) / cbSceneParam._m0[78u].z)) + _3060;
        _3139 = _3295 * _3061;
    }
    else
    {
        _3133 = _3058;
        _3135 = _3059;
        _3137 = _3060;
        _3139 = _3061;
    }
    float _3151 = roundEven(cbMatDynParam._m0[0u].y);
    bool _3152 = _3151 == 3.0;
    float _3153 = log2(_3139);
    float _3160 = exp2(_3153 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4929 : (isnan(_4929) ? 1.0 : min(_4929, 1.0))) * (_3003 + ((isnan(0.0) ? _1724 : (isnan(_1724) ? 0.0 : max(_1724, 0.0))) * _1000))) + ((_3009 + ((isnan(0.0) ? _2015 : (isnan(_2015) ? 0.0 : max(_2015, 0.0))) * _1803)) * cbPerFrame._m0[3u].x));
    float _3161 = exp2(_3153 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4940 : (isnan(_4940) ? 1.0 : min(_4940, 1.0))) * (_3005 + ((isnan(0.0) ? _1727 : (isnan(_1727) ? 0.0 : max(_1727, 0.0))) * _1000))) + ((_3011 + ((isnan(0.0) ? _2018 : (isnan(_2018) ? 0.0 : max(_2018, 0.0))) * _1803)) * cbPerFrame._m0[3u].x));
    float _3162 = exp2(_3153 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4951 : (isnan(_4951) ? 1.0 : min(_4951, 1.0))) * (_3007 + ((isnan(0.0) ? _1730 : (isnan(_1730) ? 0.0 : max(_1730, 0.0))) * _1000))) + ((_3013 + ((isnan(0.0) ? _2021 : (isnan(_2021) ? 0.0 : max(_2021, 0.0))) * _1803)) * cbPerFrame._m0[3u].x));
    float _3171 = (_3151 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _3171 * (_3152 ? _3160 : (_3160 + (cbSceneParam._m0[72u].w * _3133)));
    SV_Target.y = _3171 * (_3152 ? _3161 : (_3161 + (cbSceneParam._m0[72u].w * _3135)));
    SV_Target.z = _3171 * (_3152 ? _3162 : (_3162 + (cbSceneParam._m0[72u].w * _3137)));
    SV_Target.w = cbInstanceData._m0[_3033].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_3033].w;
}


