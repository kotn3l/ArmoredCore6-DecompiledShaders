#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_29;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_10;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_6;
layout(set = 0, binding = 23) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_8;
layout(set = 0, binding = 24) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_9;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1480;
float _3837;
float _3838;
float _3839;
float _3840;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _233 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _234 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _235 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _241 = inversesqrt(dot(vec3(_233, _234, _235), vec3(_233, _234, _235)));
    float _248 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _255 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _261 = uint(roundEven(NORMAL.w)) * 13u;
    uint _266 = _261 + 1u;
    uint _270 = _261 + 2u;
    float _279 = sqrt(((cbInstanceData._m0[_266].x * cbInstanceData._m0[_266].x) + (cbInstanceData._m0[_261].x * cbInstanceData._m0[_261].x)) + (cbInstanceData._m0[_270].x * cbInstanceData._m0[_270].x));
    float _280 = _279 * TEXCOORD.z;
    float _281 = _279 * TEXCOORD.w;
    vec4 _301 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _307 = _301.x * cbMtdParam._m0[11u].x;
    float _308 = _301.y * cbMtdParam._m0[11u].y;
    float _309 = _301.z * cbMtdParam._m0[11u].z;
    vec4 _328 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _280) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _281) + cbTextureTilingScale._m0[5u].w));
    vec4 _347 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _387 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _389 = _387.x;
    float _401 = dot(vec4(_389, _387.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _418 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _347.x) * 2.0) - ((((_389 - _401) * cbMtdParam._m0[24u].z) + _401) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3849 = isnan(0.0) ? _418 : (isnan(_418) ? 0.0 : max(_418, 0.0));
    float _419 = isnan(1.0) ? _3849 : (isnan(_3849) ? 1.0 : min(_3849, 1.0));
    float _426 = (_419 * ((_328.x * cbMtdParam._m0[12u].x) - _307)) + _307;
    float _427 = (_419 * ((_328.y * cbMtdParam._m0[12u].y) - _308)) + _308;
    float _428 = (_419 * ((_328.z * cbMtdParam._m0[12u].z) - _309)) + _309;
    vec4 _445 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _280) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _281) + cbTextureTilingScale._m0[3u].w));
    vec4 _465 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _467 = _465.x;
    float _477 = dot(vec4(_467, _465.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _491 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _347.y) * 2.0) - ((((_467 - _477) * cbMtdParam._m0[24u].z) + _477) * cbMtdParam._m0[20u].w))) + 1.0;
    float _3860 = isnan(0.0) ? _491 : (isnan(_491) ? 0.0 : max(_491, 0.0));
    float _492 = isnan(1.0) ? _3860 : (isnan(_3860) ? 1.0 : min(_3860, 1.0));
    float _499 = (_492 * ((_445.x * cbMtdParam._m0[13u].x) - _426)) + _426;
    float _500 = (_492 * ((_445.y * cbMtdParam._m0[13u].y) - _427)) + _427;
    float _501 = (_492 * ((_445.z * cbMtdParam._m0[13u].z) - _428)) + _428;
    vec4 _519 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_9, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[24u].x * _280) + cbTextureTilingScale._m0[24u].z, (cbTextureTilingScale._m0[24u].y * _281) + cbTextureTilingScale._m0[24u].w));
    vec4 _536 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[25u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _538 = _536.x;
    float _548 = dot(vec4(_538, _536.yzw), vec4(cbMtdParam._m0[30u].w, cbMtdParam._m0[31u].xy, 0.0));
    float _560 = ((cbMtdParam._m0[25u].x * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.z) - _347.z) * 2.0) - ((((_538 - _548) * cbMtdParam._m0[24u].z) + _548) * cbMtdParam._m0[20u].z))) + 1.0;
    float _3871 = isnan(0.0) ? _560 : (isnan(_560) ? 0.0 : max(_560, 0.0));
    float _561 = isnan(1.0) ? _3871 : (isnan(_3871) ? 1.0 : min(_3871, 1.0));
    float _568 = (_561 * ((_519.x * cbMtdParam._m0[14u].x) - _499)) + _499;
    float _569 = (_561 * ((_519.y * cbMtdParam._m0[14u].y) - _500)) + _500;
    float _570 = (_561 * ((_519.z * cbMtdParam._m0[14u].z) - _501)) + _501;
    vec4 _588 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _280) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _281) + cbTextureTilingScale._m0[4u].w));
    vec4 _605 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _607 = _605.x;
    float _608 = _605.y;
    float _609 = _605.z;
    float _616 = ((_588.x - _607) * _419) + _607;
    float _617 = ((_588.y - _608) * _419) + _608;
    float _618 = ((_588.z - _609) * _419) + _609;
    vec4 _630 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _280) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _281) + cbTextureTilingScale._m0[2u].w));
    float _641 = ((_630.x - _616) * _492) + _616;
    float _642 = ((_630.y - _617) * _492) + _617;
    float _643 = ((_630.z - _618) * _492) + _618;
    vec4 _655 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[23u].x * _280) + cbTextureTilingScale._m0[23u].z, (cbTextureTilingScale._m0[23u].y * _281) + cbTextureTilingScale._m0[23u].w));
    float _668 = ((_655.z - _643) * _561) + _643;
    float _671 = ((((_655.x - _641) * _561) + _641) * 2.0) + (-1.0);
    float _673 = ((((_655.y - _642) * _561) + _642) * 2.0) + (-1.0);
    float _674 = dot(vec2(_671, _673), vec2(_671, _673));
    float _3882 = isnan(0.0) ? _674 : (isnan(_674) ? 0.0 : max(_674, 0.0));
    float _679 = sqrt(1.0 - (isnan(1.0) ? _3882 : (isnan(_3882) ? 1.0 : min(_3882, 1.0))));
    vec4 _693 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _718 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _280) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _281) + cbTextureTilingScale._m0[11u].w));
    float _720 = _718.x;
    float _721 = 1.0 - _720;
    float _727 = isnan(-1.0) ? cbMtdParam._m0[24u].x : (isnan(cbMtdParam._m0[24u].x) ? (-1.0) : max(cbMtdParam._m0[24u].x, -1.0));
    float _730 = ((isnan(0.0) ? _727 : (isnan(_727) ? 0.0 : min(_727, 0.0))) * TEXCOORD_8.x) + TEXCOORD_8.w;
    float _739 = (_730 - ((((((_720 - _721) * cbMtdParam._m0[24u].w) + _721) + 0.00999999977648258209228515625) * cbMtdParam._m0[21u].z) * (1.0 - _730))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3903 = isnan(0.0) ? _739 : (isnan(_739) ? 0.0 : max(_739, 0.0));
    float _740 = isnan(1.0) ? _3903 : (isnan(_3903) ? 1.0 : min(_3903, 1.0));
    float _747 = (_740 * (cbMtdParam._m0[17u].x - _568)) + _568;
    float _748 = (_740 * (cbMtdParam._m0[17u].y - _569)) + _569;
    float _749 = (_740 * (cbMtdParam._m0[17u].z - _570)) + _570;
    vec4 _761 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _280) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _281) + cbTextureTilingScale._m0[19u].w));
    float _763 = _761.x;
    float _764 = 1.0 - _763;
    float _791 = (TEXCOORD_8.x - ((cbMtdParam._m0[22u].w * (1.0 - TEXCOORD_8.x)) * ((((_763 - _764) * cbMtdParam._m0[24u].y) + _764) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3914 = isnan(0.0) ? _791 : (isnan(_791) ? 0.0 : max(_791, 0.0));
    float _792 = isnan(1.0) ? _3914 : (isnan(_3914) ? 1.0 : min(_3914, 1.0));
    float _800 = ((((cbMtdParam._m0[10u].x - _747) * TEXCOORD_8.x) * cbMtdParam._m0[23u].w) * _792) + _747;
    float _801 = ((((cbMtdParam._m0[10u].y - _748) * TEXCOORD_8.y) * cbMtdParam._m0[23u].w) * _792) + _748;
    float _802 = (((cbMtdParam._m0[23u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _749)) * _792) + _749;
    float _806 = (cbMtdParam._m0[19u].w * (_693.z - _668)) + _668;
    vec4 _820 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _280) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _281) + cbTextureTilingScale._m0[15u].w));
    float _827 = (_820.x * 2.0) + (-1.0);
    float _828 = (_820.y * 2.0) + (-1.0);
    float _829 = dot(vec2(_827, _828), vec2(_827, _828));
    float _3925 = isnan(0.0) ? _829 : (isnan(_829) ? 0.0 : max(_829, 0.0));
    float _837 = (_740 * (_820.z - _806)) + _806;
    float _840 = ((cbMtdParam._m0[23u].y - _837) * _792) + _837;
    vec4 _859 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _280) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _281) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _865 = (_859.x * 2.0) + (-1.0);
    float _866 = (_859.y * 2.0) + (-1.0);
    float _867 = dot(vec2(_865, _866), vec2(_865, _866));
    float _3936 = isnan(0.0) ? _867 : (isnan(_867) ? 0.0 : max(_867, 0.0));
    float _875 = (((_693.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _671;
    float _876 = (((_693.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _673;
    float _888 = (((_827 - _875) + (cbMtdParam._m0[21u].x * _875)) * _740) + _875;
    float _889 = (((_828 - _876) + (cbMtdParam._m0[21u].x * _876)) * _740) + _876;
    float _890 = (_740 * (sqrt(1.0 - (isnan(1.0) ? _3925 : (isnan(_3925) ? 1.0 : min(_3925, 1.0)))) - _679)) + _679;
    float _901 = (((_865 - _888) + (_888 * cbMtdParam._m0[22u].z)) * _792) + _888;
    float _902 = (((_866 - _889) + (_889 * cbMtdParam._m0[22u].z)) * _792) + _889;
    float _903 = ((sqrt(1.0 - (isnan(1.0) ? _3936 : (isnan(_3936) ? 1.0 : min(_3936, 1.0)))) - _890) * _792) + _890;
    float _905 = cbMtdParam._m0[22u].x + _693.w;
    float _908 = fma(_903, _248 * NORMAL.x, fma(_902, _255 * TANGENT.x, (_241 * _233) * _901));
    float _911 = fma(_903, _248 * NORMAL.y, fma(_902, _255 * TANGENT.y, (_241 * _234) * _901));
    float _914 = fma(_903, _248 * NORMAL.z, fma(_902, _255 * TANGENT.z, (_241 * _235) * _901));
    float _918 = inversesqrt(dot(vec3(_908, _911, _914), vec3(_908, _911, _914)));
    float _919 = _918 * _908;
    float _920 = _918 * _911;
    float _921 = _918 * _914;
    float _3947 = isnan(0.0) ? _840 : (isnan(_840) ? 0.0 : max(_840, 0.0));
    float _922 = isnan(1.0) ? _3947 : (isnan(_3947) ? 1.0 : min(_3947, 1.0));
    float _3958 = isnan(0.0) ? _905 : (isnan(_905) ? 0.0 : max(_905, 0.0));
    float _3969 = isnan(0.0) ? _800 : (isnan(_800) ? 0.0 : max(_800, 0.0));
    float _3980 = isnan(0.0) ? _801 : (isnan(_801) ? 0.0 : max(_801, 0.0));
    float _3991 = isnan(0.0) ? _802 : (isnan(_802) ? 0.0 : max(_802, 0.0));
    float _940 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _981 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _991 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _981);
    float _992 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _981);
    float _993 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _981);
    float _997 = inversesqrt(dot(vec3(_991, _992, _993), vec3(_991, _992, _993)));
    float _998 = _991 * _997;
    float _999 = _992 * _997;
    float _1000 = _993 * _997;
    vec4 _1005 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _1007 = _1005.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1161 = sqrt(((_991 * _991) + (_992 * _992)) + (_993 * _993));
        float _1167 = (cbMatDynParam._m0[5u].x * _1161) + cbMatDynParam._m0[5u].y;
        float _4002 = isnan(0.0) ? _1167 : (isnan(_1167) ? 0.0 : max(_1167, 0.0));
        float _1168 = isnan(1.0) ? _4002 : (isnan(_4002) ? 1.0 : min(_4002, 1.0));
        float _1172 = (cbMatDynParam._m0[5u].z * _1161) + cbMatDynParam._m0[5u].w;
        float _4013 = isnan(0.0) ? _1172 : (isnan(_1172) ? 0.0 : max(_1172, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4013 : (isnan(_4013) ? 1.0 : min(_4013, 1.0))) - _1168)) + _1168) < ((_1007 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _1018 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1019 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1037 = fma(_921, cbSceneParam._m0[5u].z, fma(_920, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _919));
    float _1040 = fma(_921, cbSceneParam._m0[6u].z, fma(_920, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _919));
    float _1043 = fma(_921, cbSceneParam._m0[7u].z, fma(_920, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _919));
    uint _1056 = _261 + 9u;
    uint _1057 = _1056 + uint(cbMatDynParam._m0[0u].w);
    float _1063 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3969 : (isnan(_3969) ? 1.0 : min(_3969, 1.0)))) * cbInstanceData._m0[_1057].x;
    float _1064 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3980 : (isnan(_3980) ? 1.0 : min(_3980, 1.0)))) * cbInstanceData._m0[_1057].y;
    float _1065 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3991 : (isnan(_3991) ? 1.0 : min(_3991, 1.0)))) * cbInstanceData._m0[_1057].z;
    float _4024 = isnan(0.0) ? _1063 : (isnan(_1063) ? 0.0 : max(_1063, 0.0));
    float _1066 = isnan(1.0) ? _4024 : (isnan(_4024) ? 1.0 : min(_4024, 1.0));
    float _4035 = isnan(0.0) ? _1064 : (isnan(_1064) ? 0.0 : max(_1064, 0.0));
    float _1067 = isnan(1.0) ? _4035 : (isnan(_4035) ? 1.0 : min(_4035, 1.0));
    float _4046 = isnan(0.0) ? _1065 : (isnan(_1065) ? 0.0 : max(_1065, 0.0));
    float _1068 = isnan(1.0) ? _4046 : (isnan(_4046) ? 1.0 : min(_4046, 1.0));
    vec4 _1077 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1018, cbSceneParam._m0[86u].y * _1019));
    float _1081 = ((isnan(1.0) ? _3958 : (isnan(_3958) ? 1.0 : min(_3958, 1.0))) * TEXCOORD_5.w) * _1077.x;
    float _1082 = dot(vec3(_919, _920, _921), vec3(_998, _999, _1000));
    float _1085 = _1082 * 2.0;
    float _1089 = (_1085 * _919) - _998;
    float _1090 = (_1085 * _920) - _999;
    float _1091 = (_1085 * _921) - _1000;
    float _1095 = abs(dot(vec3(_998, _999, _1000), vec3(_919, _920, _921)));
    float _4057 = isnan(0.0) ? _1095 : (isnan(_1095) ? 0.0 : max(_1095, 0.0));
    float _1097 = sqrt(_922);
    float _1110 = exp2((_1097 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4057 : (isnan(_4057) ? 1.0 : min(_4057, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1097 * 3.0));
    float _1142 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1146 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1150 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1479;
    float _1481;
    float _1482;
    float _1483;
    float _1484;
    float _1485;
    float _1486;
    float _1487;
    float _1488;
    float _1489;
    float _1490;
    float _1491;
    float _1492;
    float _1493;
    float _1494;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1204 = fma(_1150, cbModelParam._m0[26u].z, fma(_1146, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1142));
        float _1208 = fma(_1150, cbModelParam._m0[27u].z, fma(_1146, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1142));
        float _1212 = fma(_1150, cbModelParam._m0[28u].z, fma(_1146, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1142));
        float _1237 = _1142 + _919;
        float _1238 = _1146 + _920;
        float _1239 = _1150 + _921;
        float _1249 = fma(_1239, cbModelParam._m0[26u].z, fma(_1238, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1237)) - _1204;
        float _1250 = fma(_1239, cbModelParam._m0[27u].z, fma(_1238, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1237)) - _1208;
        float _1251 = fma(_1239, cbModelParam._m0[28u].z, fma(_1238, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1237)) - _1212;
        float _1255 = inversesqrt(dot(vec3(_1249, _1250, _1251), vec3(_1249, _1250, _1251)));
        float _1268 = ((_1255 * _1249) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1204 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1269 = ((_1255 * _1250) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1208 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1270 = ((_1255 * _1251) / cbModelParam._m0[34u].z) + ((((((_1212 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1273 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1268, _1269, _1270), 0.0);
        vec4 _1280 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1268, _1269, _1270), 0.0);
        vec4 _1287 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1268, _1269, _1270), 0.0);
        vec4 _1294 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1268, _1269, _1270), 0.0);
        float _1307 = exp2((_1273.w + (-0.5)) * 20.0) * 2.0;
        float _1308 = _1307 * (_1273.x + (-0.5));
        float _1309 = _1307 * (_1273.y + (-0.5));
        float _1310 = _1307 * (_1273.z + (-0.5));
        float _1317 = exp2((_1280.w + (-0.5)) * 20.0) * 2.0;
        float _1318 = _1317 * (_1280.x + (-0.5));
        float _1319 = _1317 * (_1280.y + (-0.5));
        float _1320 = _1317 * (_1280.z + (-0.5));
        float _1327 = exp2((_1287.w + (-0.5)) * 20.0) * 2.0;
        float _1328 = _1327 * (_1287.x + (-0.5));
        float _1329 = _1327 * (_1287.y + (-0.5));
        float _1330 = _1327 * (_1287.z + (-0.5));
        float _1337 = exp2((_1294.w + (-0.5)) * 20.0) * 2.0;
        float _1338 = _1337 * (_1294.x + (-0.5));
        float _1339 = _1337 * (_1294.y + (-0.5));
        float _1340 = _1337 * (_1294.z + (-0.5));
        float _1341 = isnan(0.0) ? _1338 : (isnan(_1338) ? 0.0 : max(_1338, 0.0));
        float _1342 = isnan(0.0) ? _1339 : (isnan(_1339) ? 0.0 : max(_1339, 0.0));
        float _1343 = isnan(0.0) ? _1340 : (isnan(_1340) ? 0.0 : max(_1340, 0.0));
        float _1344 = _1308 * 0.5;
        float _1345 = _1318 * 0.5;
        float _1346 = _1328 * 0.5;
        float _1347 = dot(vec3(_1344, _1345, _1346), vec3(_1344, _1345, _1346));
        float _1352 = (_1347 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1347);
        float _1361 = (dot(vec3(_919, _920, _921), vec3(_1352 * _1344, _1352 * _1345, _1352 * _1346)) + 1.0) * 0.5;
        float _4083 = isnan(0.0) ? _1361 : (isnan(_1361) ? 0.0 : max(_1361, 0.0));
        float _1371 = sqrt(((_1345 * _1345) + (_1344 * _1344)) + (_1346 * _1346)) / (_1341 + 9.9999997473787516355514526367188e-06);
        float _4094 = isnan(0.0) ? _1371 : (isnan(_1371) ? 0.0 : max(_1371, 0.0));
        float _1372 = isnan(1.0) ? _4094 : (isnan(_4094) ? 1.0 : min(_4094, 1.0));
        float _1373 = _1372 * 2.0;
        float _1377 = (1.0 - _1372) / (_1372 + 1.0);
        float _4105 = isnan(0.0) ? _1377 : (isnan(_1377) ? 0.0 : max(_1377, 0.0));
        float _1378 = isnan(1.0) ? _4105 : (isnan(_4105) ? 1.0 : min(_4105, 1.0));
        float _1387 = ((((1.0 - _1378) * (_1373 + 2.0)) * exp2(log2(isnan(1.0) ? _4083 : (isnan(_4083) ? 1.0 : min(_4083, 1.0))) * (_1373 + 1.0))) + _1378) * _1341;
        float _1388 = _1309 * 0.5;
        float _1389 = _1319 * 0.5;
        float _1390 = _1329 * 0.5;
        float _1391 = dot(vec3(_1388, _1389, _1390), vec3(_1388, _1389, _1390));
        float _1396 = (_1391 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1391);
        float _1404 = (dot(vec3(_919, _920, _921), vec3(_1396 * _1388, _1396 * _1389, _1396 * _1390)) + 1.0) * 0.5;
        float _4116 = isnan(0.0) ? _1404 : (isnan(_1404) ? 0.0 : max(_1404, 0.0));
        float _1413 = sqrt(((_1389 * _1389) + (_1388 * _1388)) + (_1390 * _1390)) / (_1342 + 9.9999997473787516355514526367188e-06);
        float _4127 = isnan(0.0) ? _1413 : (isnan(_1413) ? 0.0 : max(_1413, 0.0));
        float _1414 = isnan(1.0) ? _4127 : (isnan(_4127) ? 1.0 : min(_4127, 1.0));
        float _1415 = _1414 * 2.0;
        float _1419 = (1.0 - _1414) / (_1414 + 1.0);
        float _4138 = isnan(0.0) ? _1419 : (isnan(_1419) ? 0.0 : max(_1419, 0.0));
        float _1420 = isnan(1.0) ? _4138 : (isnan(_4138) ? 1.0 : min(_4138, 1.0));
        float _1429 = ((((1.0 - _1420) * (_1415 + 2.0)) * exp2(log2(isnan(1.0) ? _4116 : (isnan(_4116) ? 1.0 : min(_4116, 1.0))) * (_1415 + 1.0))) + _1420) * _1342;
        float _1430 = _1310 * 0.5;
        float _1431 = _1320 * 0.5;
        float _1432 = _1330 * 0.5;
        float _1433 = dot(vec3(_1430, _1431, _1432), vec3(_1430, _1431, _1432));
        float _1438 = (_1433 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1433);
        float _1446 = (dot(vec3(_919, _920, _921), vec3(_1438 * _1430, _1438 * _1431, _1438 * _1432)) + 1.0) * 0.5;
        float _4149 = isnan(0.0) ? _1446 : (isnan(_1446) ? 0.0 : max(_1446, 0.0));
        float _1455 = sqrt(((_1431 * _1431) + (_1430 * _1430)) + (_1432 * _1432)) / (_1343 + 9.9999997473787516355514526367188e-06);
        float _4160 = isnan(0.0) ? _1455 : (isnan(_1455) ? 0.0 : max(_1455, 0.0));
        float _1456 = isnan(1.0) ? _4160 : (isnan(_4160) ? 1.0 : min(_4160, 1.0));
        float _1457 = _1456 * 2.0;
        float _1461 = (1.0 - _1456) / (_1456 + 1.0);
        float _4171 = isnan(0.0) ? _1461 : (isnan(_1461) ? 0.0 : max(_1461, 0.0));
        float _1462 = isnan(1.0) ? _4171 : (isnan(_4171) ? 1.0 : min(_4171, 1.0));
        float _1471 = ((((1.0 - _1462) * (_1457 + 2.0)) * exp2(log2(isnan(1.0) ? _4149 : (isnan(_4149) ? 1.0 : min(_4149, 1.0))) * (_1457 + 1.0))) + _1462) * _1343;
        _1479 = _1310;
        _1481 = _1309;
        _1482 = _1308;
        _1483 = _1320;
        _1484 = _1319;
        _1485 = _1318;
        _1486 = _1330;
        _1487 = _1329;
        _1488 = _1328;
        _1489 = _1343;
        _1490 = _1342;
        _1491 = _1341;
        _1492 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1387 : (isnan(_1387) ? 0.0 : max(_1387, 0.0)));
        _1493 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1429 : (isnan(_1429) ? 0.0 : max(_1429, 0.0)));
        _1494 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1471 : (isnan(_1471) ? 0.0 : max(_1471, 0.0)));
    }
    else
    {
        _1479 = _1480;
        _1481 = _1480;
        _1482 = _1480;
        _1483 = _1480;
        _1484 = _1480;
        _1485 = _1480;
        _1486 = _1480;
        _1487 = _1480;
        _1488 = _1480;
        _1489 = _1480;
        _1490 = _1480;
        _1491 = _1480;
        _1492 = 0.0;
        _1493 = 0.0;
        _1494 = 0.0;
    }
    float _1789;
    float _1790;
    float _1791;
    float _1792;
    float _1793;
    float _1794;
    float _1795;
    float _1796;
    float _1797;
    float _1798;
    float _1799;
    float _1800;
    float _1801;
    float _1802;
    float _1803;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1520 = fma(_1150, cbModelParam._m0[30u].z, fma(_1146, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1142));
        float _1524 = fma(_1150, cbModelParam._m0[31u].z, fma(_1146, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1142));
        float _1528 = fma(_1150, cbModelParam._m0[32u].z, fma(_1146, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1142));
        float _1551 = _1142 + _919;
        float _1552 = _1146 + _920;
        float _1553 = _1150 + _921;
        float _1563 = fma(_1553, cbModelParam._m0[30u].z, fma(_1552, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1551)) - _1520;
        float _1564 = fma(_1553, cbModelParam._m0[31u].z, fma(_1552, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1551)) - _1524;
        float _1565 = fma(_1553, cbModelParam._m0[32u].z, fma(_1552, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1551)) - _1528;
        float _1569 = inversesqrt(dot(vec3(_1563, _1564, _1565), vec3(_1563, _1564, _1565)));
        float _1582 = ((_1569 * _1563) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1520 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1583 = ((_1569 * _1564) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1524 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1584 = ((_1569 * _1565) / cbModelParam._m0[35u].z) + ((((((_1528 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1586 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1582, _1583, _1584), 0.0);
        vec4 _1593 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1582, _1583, _1584), 0.0);
        vec4 _1600 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1582, _1583, _1584), 0.0);
        vec4 _1607 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1582, _1583, _1584), 0.0);
        float _1619 = exp2((_1586.w + (-0.5)) * 20.0) * 2.0;
        float _1620 = _1619 * (_1586.x + (-0.5));
        float _1621 = _1619 * (_1586.y + (-0.5));
        float _1622 = _1619 * (_1586.z + (-0.5));
        float _1629 = exp2((_1593.w + (-0.5)) * 20.0) * 2.0;
        float _1630 = _1629 * (_1593.x + (-0.5));
        float _1631 = _1629 * (_1593.y + (-0.5));
        float _1632 = _1629 * (_1593.z + (-0.5));
        float _1639 = exp2((_1600.w + (-0.5)) * 20.0) * 2.0;
        float _1640 = _1639 * (_1600.x + (-0.5));
        float _1641 = _1639 * (_1600.y + (-0.5));
        float _1642 = _1639 * (_1600.z + (-0.5));
        float _1649 = exp2((_1607.w + (-0.5)) * 20.0) * 2.0;
        float _1650 = _1649 * (_1607.x + (-0.5));
        float _1651 = _1649 * (_1607.y + (-0.5));
        float _1652 = _1649 * (_1607.z + (-0.5));
        float _1653 = isnan(0.0) ? _1650 : (isnan(_1650) ? 0.0 : max(_1650, 0.0));
        float _1654 = isnan(0.0) ? _1651 : (isnan(_1651) ? 0.0 : max(_1651, 0.0));
        float _1655 = isnan(0.0) ? _1652 : (isnan(_1652) ? 0.0 : max(_1652, 0.0));
        float _1656 = _1620 * 0.5;
        float _1657 = _1630 * 0.5;
        float _1658 = _1640 * 0.5;
        float _1659 = dot(vec3(_1656, _1657, _1658), vec3(_1656, _1657, _1658));
        float _1664 = (_1659 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1659);
        float _1672 = (dot(vec3(_919, _920, _921), vec3(_1664 * _1656, _1664 * _1657, _1664 * _1658)) + 1.0) * 0.5;
        float _4212 = isnan(0.0) ? _1672 : (isnan(_1672) ? 0.0 : max(_1672, 0.0));
        float _1681 = sqrt(((_1657 * _1657) + (_1656 * _1656)) + (_1658 * _1658)) / (_1653 + 9.9999997473787516355514526367188e-06);
        float _4223 = isnan(0.0) ? _1681 : (isnan(_1681) ? 0.0 : max(_1681, 0.0));
        float _1682 = isnan(1.0) ? _4223 : (isnan(_4223) ? 1.0 : min(_4223, 1.0));
        float _1683 = _1682 * 2.0;
        float _1687 = (1.0 - _1682) / (_1682 + 1.0);
        float _4234 = isnan(0.0) ? _1687 : (isnan(_1687) ? 0.0 : max(_1687, 0.0));
        float _1688 = isnan(1.0) ? _4234 : (isnan(_4234) ? 1.0 : min(_4234, 1.0));
        float _1697 = ((((1.0 - _1688) * (_1683 + 2.0)) * exp2(log2(isnan(1.0) ? _4212 : (isnan(_4212) ? 1.0 : min(_4212, 1.0))) * (_1683 + 1.0))) + _1688) * _1653;
        float _1698 = _1621 * 0.5;
        float _1699 = _1631 * 0.5;
        float _1700 = _1641 * 0.5;
        float _1701 = dot(vec3(_1698, _1699, _1700), vec3(_1698, _1699, _1700));
        float _1706 = (_1701 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1701);
        float _1714 = (dot(vec3(_919, _920, _921), vec3(_1706 * _1698, _1706 * _1699, _1706 * _1700)) + 1.0) * 0.5;
        float _4245 = isnan(0.0) ? _1714 : (isnan(_1714) ? 0.0 : max(_1714, 0.0));
        float _1723 = sqrt(((_1699 * _1699) + (_1698 * _1698)) + (_1700 * _1700)) / (_1654 + 9.9999997473787516355514526367188e-06);
        float _4256 = isnan(0.0) ? _1723 : (isnan(_1723) ? 0.0 : max(_1723, 0.0));
        float _1724 = isnan(1.0) ? _4256 : (isnan(_4256) ? 1.0 : min(_4256, 1.0));
        float _1725 = _1724 * 2.0;
        float _1729 = (1.0 - _1724) / (_1724 + 1.0);
        float _4267 = isnan(0.0) ? _1729 : (isnan(_1729) ? 0.0 : max(_1729, 0.0));
        float _1730 = isnan(1.0) ? _4267 : (isnan(_4267) ? 1.0 : min(_4267, 1.0));
        float _1739 = ((((1.0 - _1730) * (_1725 + 2.0)) * exp2(log2(isnan(1.0) ? _4245 : (isnan(_4245) ? 1.0 : min(_4245, 1.0))) * (_1725 + 1.0))) + _1730) * _1654;
        float _1740 = _1622 * 0.5;
        float _1741 = _1632 * 0.5;
        float _1742 = _1642 * 0.5;
        float _1743 = dot(vec3(_1740, _1741, _1742), vec3(_1740, _1741, _1742));
        float _1748 = (_1743 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1743);
        float _1756 = (dot(vec3(_919, _920, _921), vec3(_1748 * _1740, _1748 * _1741, _1748 * _1742)) + 1.0) * 0.5;
        float _4278 = isnan(0.0) ? _1756 : (isnan(_1756) ? 0.0 : max(_1756, 0.0));
        float _1765 = sqrt(((_1741 * _1741) + (_1740 * _1740)) + (_1742 * _1742)) / (_1655 + 9.9999997473787516355514526367188e-06);
        float _4289 = isnan(0.0) ? _1765 : (isnan(_1765) ? 0.0 : max(_1765, 0.0));
        float _1766 = isnan(1.0) ? _4289 : (isnan(_4289) ? 1.0 : min(_4289, 1.0));
        float _1767 = _1766 * 2.0;
        float _1771 = (1.0 - _1766) / (_1766 + 1.0);
        float _4300 = isnan(0.0) ? _1771 : (isnan(_1771) ? 0.0 : max(_1771, 0.0));
        float _1772 = isnan(1.0) ? _4300 : (isnan(_4300) ? 1.0 : min(_4300, 1.0));
        float _1781 = ((((1.0 - _1772) * (_1767 + 2.0)) * exp2(log2(isnan(1.0) ? _4278 : (isnan(_4278) ? 1.0 : min(_4278, 1.0))) * (_1767 + 1.0))) + _1772) * _1655;
        _1789 = _1622;
        _1790 = _1621;
        _1791 = _1620;
        _1792 = _1632;
        _1793 = _1631;
        _1794 = _1630;
        _1795 = _1642;
        _1796 = _1641;
        _1797 = _1640;
        _1798 = _1655;
        _1799 = _1654;
        _1800 = _1653;
        _1801 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1697 : (isnan(_1697) ? 0.0 : max(_1697, 0.0)));
        _1802 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1739 : (isnan(_1739) ? 0.0 : max(_1739, 0.0)));
        _1803 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1781 : (isnan(_1781) ? 0.0 : max(_1781, 0.0)));
    }
    else
    {
        _1789 = _1480;
        _1790 = _1480;
        _1791 = _1480;
        _1792 = _1480;
        _1793 = _1480;
        _1794 = _1480;
        _1795 = _1480;
        _1796 = _1480;
        _1797 = _1480;
        _1798 = _1480;
        _1799 = _1480;
        _1800 = _1480;
        _1801 = 0.0;
        _1802 = 0.0;
        _1803 = 0.0;
    }
    float _1813 = (cbModelParam._m0[1u].x * (_1801 - _1492)) + _1492;
    float _1814 = (cbModelParam._m0[1u].x * (_1802 - _1493)) + _1493;
    float _1815 = (cbModelParam._m0[1u].x * (_1803 - _1494)) + _1494;
    float _1836 = fma(_1815, cbSceneParam._m0[89u].z, fma(_1814, cbSceneParam._m0[89u].y, _1813 * cbSceneParam._m0[89u].x));
    float _1839 = fma(_1815, cbSceneParam._m0[90u].z, fma(_1814, cbSceneParam._m0[90u].y, _1813 * cbSceneParam._m0[90u].x));
    float _1842 = fma(_1815, cbSceneParam._m0[91u].z, fma(_1814, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1813));
    float _1857 = _1089 * 0.5;
    float _1858 = _1090 * 0.5;
    float _1859 = _1091 * 0.5;
    float _1860 = dot(vec4(_1857, _1858, _1859, 1.0), vec4(_1791, _1794, _1797, _1800));
    float _1863 = dot(vec4(_1857, _1858, _1859, 1.0), vec4(_1790, _1793, _1796, _1799));
    float _1866 = dot(vec4(_1857, _1858, _1859, 1.0), vec4(_1789, _1792, _1795, _1798));
    float _1900;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1873 = dot(vec4(_1857, _1858, _1859, 1.0), vec4(_1479, _1483, _1486, _1489));
        float _1877 = dot(vec4(_1857, _1858, _1859, 1.0), vec4(_1481, _1484, _1487, _1490));
        float _1881 = dot(vec4(_1857, _1858, _1859, 1.0), vec4(_1482, _1485, _1488, _1491));
        float _1888 = dot(vec4(cbModelParam._m0[39u]), vec4(_1857, _1858, _1859, 1.0));
        _1900 = dot(vec3(isnan(0.0) ? _1881 : (isnan(_1881) ? 0.0 : max(_1881, 0.0)), isnan(0.0) ? _1877 : (isnan(_1877) ? 0.0 : max(_1877, 0.0)), isnan(0.0) ? _1873 : (isnan(_1873) ? 0.0 : max(_1873, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1888) ? 0.0 : (isnan(0.0) ? _1888 : max(0.0, _1888))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1900 = 1.0;
    }
    float _1911;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1902 = dot(vec4(cbModelParam._m0[40u]), vec4(_1857, _1858, _1859, 1.0));
        _1911 = dot(vec3(isnan(0.0) ? _1860 : (isnan(_1860) ? 0.0 : max(_1860, 0.0)), isnan(0.0) ? _1863 : (isnan(_1863) ? 0.0 : max(_1863, 0.0)), isnan(0.0) ? _1866 : (isnan(_1866) ? 0.0 : max(_1866, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1902) ? 0.0 : (isnan(0.0) ? _1902 : max(0.0, _1902))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1911 = 1.0;
    }
    float _1915 = (_1911 * cbModelParam._m0[1u].x) + (_1900 * (1.0 - cbModelParam._m0[1u].x));
    float _1925 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _922);
    float _1926 = isnan(_1925) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1925 : min(cbModelParam._m0[25u].z, _1925));
    float _2006;
    float _2008;
    float _2010;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1973 = fma(_1150, cbModelParam._m0[13u].z, fma(_1146, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1142)) + cbModelParam._m0[13u].w;
        float _1977 = fma(_1150, cbModelParam._m0[14u].z, fma(_1146, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1142)) + cbModelParam._m0[14u].w;
        float _1981 = fma(_1150, cbModelParam._m0[15u].z, fma(_1146, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1142)) + cbModelParam._m0[15u].w;
        float _1984 = fma(_1091, cbModelParam._m0[13u].z, fma(_1090, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1089));
        float _1987 = fma(_1091, cbModelParam._m0[14u].z, fma(_1090, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1089));
        float _1990 = fma(_1091, cbModelParam._m0[15u].z, fma(_1090, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1089));
        float _2018;
        if (_1984 > 0.0)
        {
            _2018 = abs((1.0 - _1973) / _1984);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1984 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1973 + 1.0) / _1984);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _2018 = frontier_phi_17_15_ladder;
        }
        float _2219;
        if (_1987 > 0.0)
        {
            _2219 = abs((1.0 - _1977) / _1987);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1987 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1977 + 1.0) / _1987);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2219 = frontier_phi_26_22_ladder;
        }
        float _2462;
        if (_1990 > 0.0)
        {
            _2462 = abs((1.0 - _1981) / _1990);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1990 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1981 + 1.0) / _1990);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2462 = frontier_phi_38_33_ladder;
        }
        float _2464 = isnan(_2219) ? _2018 : (isnan(_2018) ? _2219 : min(_2018, _2219));
        float _2465 = isnan(_2462) ? _2464 : (isnan(_2464) ? _2462 : min(_2464, _2462));
        float _2469 = (_2465 * _1984) + _1973;
        float _2470 = (_2465 * _1987) + _1977;
        float _2471 = (_2465 * _1990) + _1981;
        float _2472 = _2465 * 9.9999997473787516355514526367188e-05;
        float _2474 = (-1.0) - _2472;
        float _2476 = _2472 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2471 > _2476) || ((_2471 < _2474) || ((_2470 > _2476) || ((_2470 < _2474) || ((_2469 < _2474) || (_2469 > _2476))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2595 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2471, cbModelParam._m0[9u].z, fma(_2470, cbModelParam._m0[9u].y, _2469 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2471, cbModelParam._m0[10u].z, fma(_2470, cbModelParam._m0[10u].y, _2469 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2471, cbModelParam._m0[11u].z, fma(_2470, cbModelParam._m0[11u].y, _2469 * cbModelParam._m0[11u].x))), _1926);
            frontier_phi_16_38_ladder = _2595.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2595.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2595.x * cbModelParam._m0[1u].y;
        }
        _2006 = frontier_phi_16_38_ladder_2;
        _2008 = frontier_phi_16_38_ladder_1;
        _2010 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1994 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1089, _1090, _1091), _1926);
        _2006 = _1994.x * cbModelParam._m0[1u].y;
        _2008 = _1994.y * cbModelParam._m0[1u].y;
        _2010 = _1994.z * cbModelParam._m0[1u].y;
    }
    float _2014 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _922);
    float _2015 = isnan(_2014) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2014 : min(cbModelParam._m0[25u].w, _2014));
    float _2105;
    float _2107;
    float _2109;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2069 = fma(_1150, cbModelParam._m0[21u].z, fma(_1146, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1142)) + cbModelParam._m0[21u].w;
        float _2073 = fma(_1150, cbModelParam._m0[22u].z, fma(_1146, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1142)) + cbModelParam._m0[22u].w;
        float _2077 = fma(_1150, cbModelParam._m0[23u].z, fma(_1146, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1142)) + cbModelParam._m0[23u].w;
        float _2080 = fma(_1091, cbModelParam._m0[21u].z, fma(_1090, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1089));
        float _2083 = fma(_1091, cbModelParam._m0[22u].z, fma(_1090, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1089));
        float _2086 = fma(_1091, cbModelParam._m0[23u].z, fma(_1090, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1089));
        float _2224;
        if (_2080 > 0.0)
        {
            _2224 = abs((1.0 - _2069) / _2080);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_2080 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_2069 + 1.0) / _2080);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2224 = frontier_phi_28_24_ladder;
        }
        float _2489;
        if (_2083 > 0.0)
        {
            _2489 = abs((1.0 - _2073) / _2083);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_2083 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_2073 + 1.0) / _2083);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2489 = frontier_phi_40_35_ladder;
        }
        float _2694;
        if (_2086 > 0.0)
        {
            _2694 = abs((1.0 - _2077) / _2086);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_2086 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_2077 + 1.0) / _2086);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2694 = frontier_phi_49_46_ladder;
        }
        float _2696 = isnan(_2489) ? _2224 : (isnan(_2224) ? _2489 : min(_2224, _2489));
        float _2697 = isnan(_2694) ? _2696 : (isnan(_2696) ? _2694 : min(_2696, _2694));
        float _2701 = (_2697 * _2080) + _2069;
        float _2702 = (_2697 * _2083) + _2073;
        float _2703 = (_2697 * _2086) + _2077;
        float _2704 = _2697 * 9.9999997473787516355514526367188e-05;
        float _2705 = (-1.0) - _2704;
        float _2707 = _2704 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2703 > _2707) || ((_2703 < _2705) || ((_2702 > _2707) || ((_2702 < _2705) || ((_2701 < _2705) || (_2701 > _2707))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2902 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2703, cbModelParam._m0[17u].z, fma(_2702, cbModelParam._m0[17u].y, _2701 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2703, cbModelParam._m0[18u].z, fma(_2702, cbModelParam._m0[18u].y, _2701 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2703, cbModelParam._m0[19u].z, fma(_2702, cbModelParam._m0[19u].y, _2701 * cbModelParam._m0[19u].x))), _2015);
            frontier_phi_25_49_ladder = _2902.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2902.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2902.x * cbModelParam._m0[1u].z;
        }
        _2105 = frontier_phi_25_49_ladder_2;
        _2107 = frontier_phi_25_49_ladder_1;
        _2109 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _2089 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1089, _1090, _1091), _2015);
        _2105 = _2089.x * cbModelParam._m0[1u].z;
        _2107 = _2089.y * cbModelParam._m0[1u].z;
        _2109 = _2089.z * cbModelParam._m0[1u].z;
    }
    float _2121 = ((((1.0 - _1110) * ((_1097 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_1110 * _1097)) * _1081;
    float _2122 = _2121 * ((cbModelParam._m0[1u].w * (_2105 - _2006)) + _2006);
    float _2123 = _2121 * ((cbModelParam._m0[1u].w * (_2107 - _2008)) + _2008);
    float _2124 = _2121 * ((cbModelParam._m0[1u].w * (_2109 - _2010)) + _2010);
    float _2127 = fma(_2124, cbSceneParam._m0[89u].z, fma(_2123, cbSceneParam._m0[89u].y, _2122 * cbSceneParam._m0[89u].x));
    float _2130 = fma(_2124, cbSceneParam._m0[90u].z, fma(_2123, cbSceneParam._m0[90u].y, _2122 * cbSceneParam._m0[90u].x));
    float _2133 = fma(_2124, cbSceneParam._m0[91u].z, fma(_2123, cbSceneParam._m0[91u].y, _2122 * cbSceneParam._m0[91u].x));
    uvec4 _2143 = floatBitsToUint(cbInstanceData._m0[_261 + 5u]);
    uint _2145 = _2143.x * 14u;
    uint _2146 = _2145 + 13u;
    float _2153 = _1081 + (-1.0);
    float _2158 = (cbLight._m0[_2146].x * _2153) + 1.0;
    float _2159 = (cbLight._m0[_2146].y * _2153) + 1.0;
    float _2160 = (cbLight._m0[_2146].z * _2153) + 1.0;
    float _2161 = (cbLight._m0[_2146].w * _2153) + 1.0;
    uint _2162 = _2145 + 5u;
    float _2168 = isnan(1.0) ? _2159 : (isnan(_2159) ? 1.0 : min(_2159, 1.0));
    uint _2172 = _2145 + 4u;
    float _2178 = isnan(1.0) ? _2158 : (isnan(_2158) ? 1.0 : min(_2158, 1.0));
    uint _2182 = _2145 | 1u;
    float _2193 = dot(vec3(cbLight._m0[_2145].xyz), vec3(_919, _920, _921));
    float _2196 = dot(vec3(cbLight._m0[_2182].xyz), vec3(_919, _920, _921));
    float _4436 = isnan(0.0) ? _2193 : (isnan(_2193) ? 0.0 : max(_2193, 0.0));
    float _4447 = isnan(0.0) ? _2196 : (isnan(_2196) ? 0.0 : max(_2196, 0.0));
    float _2201 = (isnan(1.0) ? _4436 : (isnan(_4436) ? 1.0 : min(_4436, 1.0))) * 0.3183098733425140380859375;
    float _2203 = (isnan(1.0) ? _4447 : (isnan(_4447) ? 1.0 : min(_4447, 1.0))) * 0.3183098733425140380859375;
    float _2210 = ((cbLight._m0[_2162].x * _2168) * _2203) + ((cbLight._m0[_2172].x * _2178) * _2201);
    float _2211 = ((_2168 * cbLight._m0[_2162].y) * _2203) + ((_2178 * cbLight._m0[_2172].y) * _2201);
    float _2212 = ((_2168 * cbLight._m0[_2162].z) * _2203) + ((_2178 * cbLight._m0[_2172].z) * _2201);
    uvec4 _2216 = floatBitsToUint(cbLight._m0[_2145 + 12u]);
    bool _2218 = _2216.x == 0u;
    float _2229;
    float _2231;
    float _2233;
    if (_2218)
    {
        _2229 = _2210;
        _2231 = _2211;
        _2233 = _2212;
    }
    else
    {
        uint _2237 = _2145 + 6u;
        float _2253 = (dot(vec3(cbLight._m0[_2145 + 2u].xyz), vec3(_919, _920, _921)) * 0.5) + 0.5;
        float _2254 = _2253 * _2253;
        float _4458 = isnan(0.0) ? _2254 : (isnan(_2254) ? 0.0 : max(_2254, 0.0));
        float _2255 = isnan(1.0) ? _4458 : (isnan(_4458) ? 1.0 : min(_4458, 1.0));
        float _2256 = isnan(1.0) ? _2160 : (isnan(_2160) ? 1.0 : min(_2160, 1.0));
        _2229 = (((cbLight._m0[_2237].x * 0.3183098733425140380859375) * _2255) * _2256) + _2210;
        _2231 = (((cbLight._m0[_2237].y * 0.3183098733425140380859375) * _2255) * _2256) + _2211;
        _2233 = (((cbLight._m0[_2237].z * 0.3183098733425140380859375) * _2255) * _2256) + _2212;
    }
    bool _2236 = _2216.y == 0u;
    float _2274;
    float _2276;
    float _2278;
    if (_2236)
    {
        _2274 = _2229;
        _2276 = _2231;
        _2278 = _2233;
    }
    else
    {
        uint _2433 = _2145 + 7u;
        float _2449 = (dot(vec3(cbLight._m0[_2145 + 3u].xyz), vec3(_919, _920, _921)) * 0.5) + 0.5;
        float _2450 = _2449 * _2449;
        float _4474 = isnan(0.0) ? _2450 : (isnan(_2450) ? 0.0 : max(_2450, 0.0));
        float _2451 = isnan(1.0) ? _4474 : (isnan(_4474) ? 1.0 : min(_4474, 1.0));
        float _2452 = isnan(1.0) ? _2161 : (isnan(_2161) ? 1.0 : min(_2161, 1.0));
        _2274 = (((cbLight._m0[_2433].x * 0.3183098733425140380859375) * _2451) * _2452) + _2229;
        _2276 = (((cbLight._m0[_2433].y * 0.3183098733425140380859375) * _2451) * _2452) + _2231;
        _2278 = (((cbLight._m0[_2433].z * 0.3183098733425140380859375) * _2451) * _2452) + _2233;
    }
    uint _2281 = _2145 + 8u;
    float _2294 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2145].w)) * _922) * 0.949999988079071044921875);
    float _2295 = _2294 * _2294;
    float _2296 = cbLight._m0[_2145].x + _998;
    float _2297 = cbLight._m0[_2145].y + _999;
    float _2298 = cbLight._m0[_2145].z + _1000;
    float _2302 = inversesqrt(dot(vec3(_2296, _2297, _2298), vec3(_2296, _2297, _2298)));
    float _2303 = _2302 * _2296;
    float _2304 = _2302 * _2297;
    float _2305 = _2302 * _2298;
    float _2306 = dot(vec3(_919, _920, _921), vec3(cbLight._m0[_2145].xyz));
    float _4490 = isnan(0.0) ? _2306 : (isnan(_2306) ? 0.0 : max(_2306, 0.0));
    float _2309 = isnan(1.0) ? _4490 : (isnan(_4490) ? 1.0 : min(_4490, 1.0));
    float _4501 = isnan(0.0) ? _1082 : (isnan(_1082) ? 0.0 : max(_1082, 0.0));
    float _2310 = isnan(1.0) ? _4501 : (isnan(_4501) ? 1.0 : min(_4501, 1.0));
    float _2311 = dot(vec3(_919, _920, _921), vec3(_2303, _2304, _2305));
    float _4512 = isnan(0.0) ? _2311 : (isnan(_2311) ? 0.0 : max(_2311, 0.0));
    float _2314 = isnan(1.0) ? _4512 : (isnan(_4512) ? 1.0 : min(_4512, 1.0));
    float _2315 = dot(vec3(cbLight._m0[_2145].xyz), vec3(_2303, _2304, _2305));
    float _4523 = isnan(0.0) ? _2315 : (isnan(_2315) ? 0.0 : max(_2315, 0.0));
    float _2319 = _2295 * _2295;
    float _2323 = ((_2314 * _2314) * (_2319 + (-1.0))) + 1.0;
    float _2334 = (exp2(log2(1.0 - (isnan(1.0) ? _4523 : (isnan(_4523) ? 1.0 : min(_4523, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2335 = 1.0 - _2295;
    float _2346 = (0.5 / (((_2310 * ((_2309 * _2335) + _2295)) + 9.9999999392252902907785028219223e-09) + (((_2310 * _2335) + _2295) * _2309))) * _2309;
    float _4534 = isnan(0.0) ? _2346 : (isnan(_2346) ? 0.0 : max(_2346, 0.0));
    float _2348 = (isnan(1.0) ? _4534 : (isnan(_4534) ? 1.0 : min(_4534, 1.0))) * (_2319 / ((_2323 * _2323) * 3.141590118408203125));
    uint _2359 = _2145 + 9u;
    float _2370 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2182].w)) * _922) * 0.949999988079071044921875);
    float _2371 = _2370 * _2370;
    float _2372 = cbLight._m0[_2182].x + _998;
    float _2373 = cbLight._m0[_2182].y + _999;
    float _2374 = cbLight._m0[_2182].z + _1000;
    float _2378 = inversesqrt(dot(vec3(_2372, _2373, _2374), vec3(_2372, _2373, _2374)));
    float _2379 = _2378 * _2372;
    float _2380 = _2378 * _2373;
    float _2381 = _2378 * _2374;
    float _2382 = dot(vec3(_919, _920, _921), vec3(cbLight._m0[_2182].xyz));
    float _4545 = isnan(0.0) ? _2382 : (isnan(_2382) ? 0.0 : max(_2382, 0.0));
    float _2385 = isnan(1.0) ? _4545 : (isnan(_4545) ? 1.0 : min(_4545, 1.0));
    float _2386 = dot(vec3(_919, _920, _921), vec3(_2379, _2380, _2381));
    float _4556 = isnan(0.0) ? _2386 : (isnan(_2386) ? 0.0 : max(_2386, 0.0));
    float _2389 = isnan(1.0) ? _4556 : (isnan(_4556) ? 1.0 : min(_4556, 1.0));
    float _2390 = dot(vec3(cbLight._m0[_2182].xyz), vec3(_2379, _2380, _2381));
    float _4567 = isnan(0.0) ? _2390 : (isnan(_2390) ? 0.0 : max(_2390, 0.0));
    float _2394 = _2371 * _2371;
    float _2398 = ((_2389 * _2389) * (_2394 + (-1.0))) + 1.0;
    float _2407 = (exp2(log2(1.0 - (isnan(1.0) ? _4567 : (isnan(_4567) ? 1.0 : min(_4567, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2408 = 1.0 - _2371;
    float _2418 = (0.5 / (((_2310 * ((_2385 * _2408) + _2371)) + 9.9999999392252902907785028219223e-09) + (((_2310 * _2408) + _2371) * _2385))) * _2385;
    float _4578 = isnan(0.0) ? _2418 : (isnan(_2418) ? 0.0 : max(_2418, 0.0));
    float _2420 = (isnan(1.0) ? _4578 : (isnan(_4578) ? 1.0 : min(_4578, 1.0))) * (_2394 / ((_2398 * _2398) * 3.141590118408203125));
    float _2430 = (((_2407 * cbLight._m0[_2359].x) * _2420) * _2168) + (((_2334 * cbLight._m0[_2281].x) * _2348) * _2178);
    float _2431 = (((_2407 * cbLight._m0[_2359].y) * _2420) * _2168) + (((_2334 * cbLight._m0[_2281].y) * _2348) * _2178);
    float _2432 = (((_2407 * cbLight._m0[_2359].z) * _2420) * _2168) + (((_2334 * cbLight._m0[_2281].z) * _2348) * _2178);
    float _2494;
    float _2496;
    float _2498;
    if (_2218)
    {
        _2494 = _2430;
        _2496 = _2431;
        _2498 = _2432;
    }
    else
    {
        uint _2500 = _2145 + 2u;
        uint _2504 = _2145 + 10u;
        float _2518 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2500].w)) * _922) * 0.949999988079071044921875);
        float _2519 = _2518 * _2518;
        float _2520 = cbLight._m0[_2500].x + _998;
        float _2521 = cbLight._m0[_2500].y + _999;
        float _2522 = cbLight._m0[_2500].z + _1000;
        float _2526 = inversesqrt(dot(vec3(_2520, _2521, _2522), vec3(_2520, _2521, _2522)));
        float _2527 = _2526 * _2520;
        float _2528 = _2526 * _2521;
        float _2529 = _2526 * _2522;
        float _2530 = dot(vec3(_919, _920, _921), vec3(cbLight._m0[_2500].xyz));
        float _4589 = isnan(0.0) ? _2530 : (isnan(_2530) ? 0.0 : max(_2530, 0.0));
        float _2533 = isnan(1.0) ? _4589 : (isnan(_4589) ? 1.0 : min(_4589, 1.0));
        float _2534 = dot(vec3(_919, _920, _921), vec3(_2527, _2528, _2529));
        float _4600 = isnan(0.0) ? _2534 : (isnan(_2534) ? 0.0 : max(_2534, 0.0));
        float _2537 = isnan(1.0) ? _4600 : (isnan(_4600) ? 1.0 : min(_4600, 1.0));
        float _2538 = dot(vec3(cbLight._m0[_2500].xyz), vec3(_2527, _2528, _2529));
        float _4611 = isnan(0.0) ? _2538 : (isnan(_2538) ? 0.0 : max(_2538, 0.0));
        float _2542 = _2519 * _2519;
        float _2546 = ((_2537 * _2537) * (_2542 + (-1.0))) + 1.0;
        float _2555 = (exp2(log2(1.0 - (isnan(1.0) ? _4611 : (isnan(_4611) ? 1.0 : min(_4611, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2556 = 1.0 - _2519;
        float _2566 = (0.5 / (((_2310 * ((_2533 * _2556) + _2519)) + 9.9999999392252902907785028219223e-09) + (((_2310 * _2556) + _2519) * _2533))) * _2533;
        float _4622 = isnan(0.0) ? _2566 : (isnan(_2566) ? 0.0 : max(_2566, 0.0));
        float _2568 = (isnan(1.0) ? _4622 : (isnan(_4622) ? 1.0 : min(_4622, 1.0))) * (_2542 / ((_2546 * _2546) * 3.141590118408203125));
        float _2569 = isnan(1.0) ? _2160 : (isnan(_2160) ? 1.0 : min(_2160, 1.0));
        _2494 = (((_2555 * cbLight._m0[_2504].x) * _2568) * _2569) + _2430;
        _2496 = (((_2555 * cbLight._m0[_2504].y) * _2568) * _2569) + _2431;
        _2498 = (((_2555 * cbLight._m0[_2504].z) * _2568) * _2569) + _2432;
    }
    float _2604;
    float _2606;
    float _2608;
    if (_2236)
    {
        _2604 = _2494;
        _2606 = _2496;
        _2608 = _2498;
    }
    else
    {
        uint _2615 = _2145 + 3u;
        uint _2619 = _2145 + 11u;
        float _2633 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2615].w)) * _922) * 0.949999988079071044921875);
        float _2634 = _2633 * _2633;
        float _2635 = cbLight._m0[_2615].x + _998;
        float _2636 = cbLight._m0[_2615].y + _999;
        float _2637 = cbLight._m0[_2615].z + _1000;
        float _2641 = inversesqrt(dot(vec3(_2635, _2636, _2637), vec3(_2635, _2636, _2637)));
        float _2642 = _2641 * _2635;
        float _2643 = _2641 * _2636;
        float _2644 = _2641 * _2637;
        float _2645 = dot(vec3(_919, _920, _921), vec3(cbLight._m0[_2615].xyz));
        float _4638 = isnan(0.0) ? _2645 : (isnan(_2645) ? 0.0 : max(_2645, 0.0));
        float _2648 = isnan(1.0) ? _4638 : (isnan(_4638) ? 1.0 : min(_4638, 1.0));
        float _2649 = dot(vec3(_919, _920, _921), vec3(_2642, _2643, _2644));
        float _4649 = isnan(0.0) ? _2649 : (isnan(_2649) ? 0.0 : max(_2649, 0.0));
        float _2652 = isnan(1.0) ? _4649 : (isnan(_4649) ? 1.0 : min(_4649, 1.0));
        float _2653 = dot(vec3(cbLight._m0[_2615].xyz), vec3(_2642, _2643, _2644));
        float _4660 = isnan(0.0) ? _2653 : (isnan(_2653) ? 0.0 : max(_2653, 0.0));
        float _2657 = _2634 * _2634;
        float _2661 = ((_2652 * _2652) * (_2657 + (-1.0))) + 1.0;
        float _2670 = (exp2(log2(1.0 - (isnan(1.0) ? _4660 : (isnan(_4660) ? 1.0 : min(_4660, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2671 = 1.0 - _2634;
        float _2681 = (0.5 / (((_2310 * ((_2648 * _2671) + _2634)) + 9.9999999392252902907785028219223e-09) + (((_2310 * _2671) + _2634) * _2648))) * _2648;
        float _4671 = isnan(0.0) ? _2681 : (isnan(_2681) ? 0.0 : max(_2681, 0.0));
        float _2683 = (isnan(1.0) ? _4671 : (isnan(_4671) ? 1.0 : min(_4671, 1.0))) * (_2657 / ((_2661 * _2661) * 3.141590118408203125));
        float _2684 = isnan(1.0) ? _2161 : (isnan(_2161) ? 1.0 : min(_2161, 1.0));
        _2604 = (((_2670 * cbLight._m0[_2619].x) * _2683) * _2684) + _2494;
        _2606 = (((_2670 * cbLight._m0[_2619].y) * _2683) * _2684) + _2496;
        _2608 = (((_2670 * cbLight._m0[_2619].z) * _2683) * _2684) + _2498;
    }
    float _2819;
    float _2821;
    float _2823;
    float _2825;
    float _2827;
    float _2829;
    if (_2143.y == 0u)
    {
        float _2759 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2760 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2759;
        float _2761 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2759;
        float _2762 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2759;
        uvec4 _2774 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2775 = _2774.x;
        uint _2786 = uint((float(_2774.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1019) / _2775))) + floor(float(uint(cbSceneParam._m0[85u].x * _1018) / _2775)));
        float _2796 = (log2(_2762 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2797 = isnan(0.0) ? _2796 : (isnan(_2796) ? 0.0 : max(_2796, 0.0));
        uint _2800 = uint(isnan(14.0) ? _2797 : (isnan(_2797) ? 14.0 : min(_2797, 14.0)));
        uvec4 _2805 = texelFetch(g_lightClusterGridBuffer, int(((_2800 << 2u) + (_2786 << 6u)) >> 2u));
        uint _2806 = _2805.x;
        uint _2807 = _2774.z;
        float _2907;
        float _2909;
        float _2911;
        float _2913;
        float _2915;
        float _2917;
        if (((((1u << ((_2807 >> 4u) & 15u)) + 4294967295u) & _2806) == 0u) || ((_2807 & 240u) == 0u))
        {
            _2907 = 0.0;
            _2909 = 0.0;
            _2911 = 0.0;
            _2913 = 0.0;
            _2915 = 0.0;
            _2917 = 0.0;
        }
        else
        {
            float _2908;
            float _2910;
            float _2912;
            float _2914;
            float _2916;
            float _2918;
            float _3060 = 0.0;
            float _3061 = 0.0;
            float _3062 = 0.0;
            float _3063 = 0.0;
            float _3064 = 0.0;
            float _3065 = 0.0;
            uint _3066 = 0u;
            uint _3075;
            bool _3076;
            for (;;)
            {
                _3075 = texelFetch(g_lightClassification, int((((_2800 << 5u) + (_2786 << 9u)) + (_3066 << 2u)) >> 2u)).x;
                _3076 = _3075 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3076)
                {
                    frontier_phi_66_pred = _3060;
                    frontier_phi_66_pred_1 = _3065;
                    frontier_phi_66_pred_2 = _3064;
                    frontier_phi_66_pred_3 = _3063;
                    frontier_phi_66_pred_4 = _3062;
                    frontier_phi_66_pred_5 = _3061;
                }
                else
                {
                    float _3205;
                    float _3206;
                    float _3207;
                    float _3208;
                    float _3209;
                    float _3210;
                    uint _3211;
                    _3205 = _3060;
                    _3206 = _3061;
                    _3207 = _3062;
                    _3208 = _3063;
                    _3209 = _3064;
                    _3210 = _3065;
                    _3211 = _3075;
                    float _3132;
                    float _3133;
                    float _3134;
                    float _3135;
                    float _3136;
                    float _3137;
                    for (;;)
                    {
                        uint _3215 = uint(findLSB(_3211)) + (_3066 << 5u);
                        uint _3212 = (_3211 + 4294967295u) & _3211;
                        uint _3217 = _3215 * 48u;
                        vec4 _3231 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3217)).x, texelFetch(g_PointLightRenderingBuffer, int(_3217 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3217 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3217 + 3u)).x));
                        uint _3237 = (_3215 * 48u) + 4u;
                        vec4 _3250 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3237)).x, texelFetch(g_PointLightRenderingBuffer, int(_3237 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3237 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3237 + 3u)).x));
                        uint _3256 = (_3215 * 48u) + 8u;
                        vec3 _3267 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3256)).x, texelFetch(g_PointLightRenderingBuffer, int(_3256 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3256 + 2u)).x));
                        float _3271 = _3231.x - _2760;
                        float _3272 = _3231.y - _2761;
                        float _3273 = _3231.z - _2762;
                        float _3274 = dot(vec3(_3271, _3272, _3273), vec3(_3271, _3272, _3273));
                        float _3277 = inversesqrt(_3274);
                        float _3278 = _3277 * _3271;
                        float _3279 = _3277 * _3272;
                        float _3280 = _3277 * _3273;
                        float _3281 = dot(vec3(_1037, _1040, _1043), vec3(_3278, _3279, _3280));
                        float _3286 = 1.0 - (_3274 * _3231.w);
                        float _4697 = isnan(0.0) ? _3286 : (isnan(_3286) ? 0.0 : max(_3286, 0.0));
                        float _3287 = isnan(1.0) ? _4697 : (isnan(_4697) ? 1.0 : min(_4697, 1.0));
                        float _3288 = sqrt(_3274) * _3250.w;
                        float _3291 = 1.39999997615814208984375 / (_3288 + 1.39999997615814208984375);
                        float _3292 = _3291 * _3291;
                        float _3295 = ((1.0 - _3292) * _3281) + _3292;
                        float _3298 = _3288 * _3288;
                        float _3302 = ((isnan(0.0) ? _3295 : (isnan(_3295) ? 0.0 : max(_3295, 0.0))) * _3287) / ((_3298 * 0.699999988079071044921875) + 1.0);
                        float _3306 = (-0.0) - _2760;
                        float _3307 = (-0.0) - _2761;
                        float _3308 = (-0.0) - _2762;
                        float _3312 = inversesqrt(dot(vec3(_3306, _3307, _3308), vec3(_3306, _3307, _3308)));
                        float _3313 = _3312 * _3306;
                        float _3314 = _3312 * _3307;
                        float _3315 = _3312 * _3308;
                        float _3323 = exp2(log2(1.0 / ((_3298 * 3.5) + 5.0)) * 0.25);
                        float _3324 = 1.0 - _1097;
                        float _3331 = sqrt(1.0 - ((1.0 - (_3324 * _3324)) * (1.0 - (_3323 * _3323))));
                        float _3332 = _3331 * _3331;
                        float _3333 = _3332 * _3332;
                        float _3334 = _3313 + _3278;
                        float _3335 = _3314 + _3279;
                        float _3336 = _3315 + _3280;
                        float _3340 = inversesqrt(dot(vec3(_3334, _3335, _3336), vec3(_3334, _3335, _3336)));
                        float _3344 = dot(vec3(_1037, _1040, _1043), vec3(_3313, _3314, _3315));
                        float _4713 = isnan(0.0) ? _3344 : (isnan(_3344) ? 0.0 : max(_3344, 0.0));
                        float _3347 = isnan(1.0) ? _4713 : (isnan(_4713) ? 1.0 : min(_4713, 1.0));
                        float _3348 = dot(vec3(_1037, _1040, _1043), vec3(_3340 * _3334, _3340 * _3335, _3340 * _3336));
                        float _4724 = isnan(0.0) ? _3348 : (isnan(_3348) ? 0.0 : max(_3348, 0.0));
                        float _3351 = isnan(1.0) ? _4724 : (isnan(_4724) ? 1.0 : min(_4724, 1.0));
                        float _3355 = ((_3351 * _3351) * (_3333 + (-1.0))) + 1.0;
                        float _3356 = _3291 * _3332;
                        float _3357 = _3356 * _3356;
                        float _3360 = ((1.0 - _3357) * _3281) + _3357;
                        float _4735 = isnan(0.0) ? _3360 : (isnan(_3360) ? 0.0 : max(_3360, 0.0));
                        float _3361 = isnan(1.0) ? _4735 : (isnan(_4735) ? 1.0 : min(_4735, 1.0));
                        float _3362 = 1.0 - _3332;
                        float _3372 = (0.5 / (((_3361 * ((_3347 * _3362) + _3332)) + 9.9999999392252902907785028219223e-09) + (((_3361 * _3362) + _3332) * _3347))) * _3361;
                        float _4746 = isnan(0.0) ? _3372 : (isnan(_3372) ? 0.0 : max(_3372, 0.0));
                        float _3383 = (((_3333 * 3.1415927410125732421875) * (isnan(1.0) ? _4746 : (isnan(_4746) ? 1.0 : min(_4746, 1.0)))) / ((_3355 * _3355) * ((_3298 * 2.1991131305694580078125) + 3.141590118408203125))) * _3287;
                        _3135 = (_3302 * _3250.x) + _3208;
                        _3136 = (_3302 * _3250.y) + _3209;
                        _3137 = (_3302 * _3250.z) + _3210;
                        _3132 = (_3383 * _3267.x) + _3205;
                        _3133 = (_3383 * _3267.y) + _3206;
                        _3134 = (_3383 * _3267.z) + _3207;
                        if (_3212 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3205 = _3132;
                            _3206 = _3133;
                            _3207 = _3134;
                            _3208 = _3135;
                            _3209 = _3136;
                            _3210 = _3137;
                            _3211 = _3212;
                        }
                    }
                    frontier_phi_66_pred = _3132;
                    frontier_phi_66_pred_1 = _3137;
                    frontier_phi_66_pred_2 = _3136;
                    frontier_phi_66_pred_3 = _3135;
                    frontier_phi_66_pred_4 = _3134;
                    frontier_phi_66_pred_5 = _3133;
                }
                _2908 = frontier_phi_66_pred;
                _2918 = frontier_phi_66_pred_1;
                _2916 = frontier_phi_66_pred_2;
                _2914 = frontier_phi_66_pred_3;
                _2912 = frontier_phi_66_pred_4;
                _2910 = frontier_phi_66_pred_5;
                uint _3067 = _3066 + 1u;
                if (_3067 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3060 = _2908;
                    _3061 = _2910;
                    _3062 = _2912;
                    _3063 = _2914;
                    _3064 = _2916;
                    _3065 = _2918;
                    _3066 = _3067;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2907 = _2908;
            _2909 = _2910;
            _2911 = _2912;
            _2913 = _2914;
            _2915 = _2916;
            _2917 = _2918;
        }
        uvec4 _2921 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2922 = _2921.z;
        uint _2924 = (_2922 >> 8u) & 15u;
        float _3028;
        float _3030;
        float _3032;
        float _3034;
        float _3036;
        float _3038;
        if (((4294967295u << _2924) & _2806) == 0u)
        {
            _3028 = _2907;
            _3030 = _2909;
            _3032 = _2911;
            _3034 = _2913;
            _3036 = _2915;
            _3038 = _2917;
        }
        else
        {
            float _3053 = inversesqrt(dot(vec3(_2760, _2761, _2762), vec3(_2760, _2761, _2762)));
            float _3054 = _3053 * _2760;
            float _3055 = _3053 * _2761;
            float _3056 = _3053 * _2762;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2924 < ((_2922 >> 12u) & 15u))
            {
                float _3029;
                float _3031;
                float _3033;
                float _3035;
                float _3037;
                float _3039;
                float _3188 = _2907;
                float _3189 = _2909;
                float _3190 = _2911;
                float _3191 = _2913;
                float _3192 = _2915;
                float _3193 = _2917;
                uint _3194 = _2924;
                uint _3203;
                bool _3204;
                for (;;)
                {
                    _3203 = texelFetch(g_lightClassification, int((((_2800 << 5u) + (_2786 << 9u)) + (_3194 << 2u)) >> 2u)).x;
                    _3204 = _3203 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_3204)
                    {
                        frontier_phi_77_pred = _3193;
                        frontier_phi_77_pred_1 = _3192;
                        frontier_phi_77_pred_2 = _3191;
                        frontier_phi_77_pred_3 = _3190;
                        frontier_phi_77_pred_4 = _3189;
                        frontier_phi_77_pred_5 = _3188;
                    }
                    else
                    {
                        float _3397;
                        float _3398;
                        float _3399;
                        float _3400;
                        float _3401;
                        float _3402;
                        float _3690;
                        float _3691;
                        float _3692;
                        float _3693;
                        float _3694;
                        float _3695;
                        float _3410 = _3188;
                        float _3411 = _3189;
                        float _3412 = _3190;
                        float _3413 = _3191;
                        float _3414 = _3192;
                        float _3415 = _3193;
                        uint _3416 = _3203;
                        uint _3417;
                        vec4 _3442;
                        float _3443;
                        vec4 _3458;
                        vec3 _3470;
                        vec4 _3485;
                        vec4 _3500;
                        float _3546;
                        bool _3547;
                        for (;;)
                        {
                            uint _3427 = ((_3194 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3416));
                            _3417 = (_3416 + 4294967295u) & _3416;
                            uint _3429 = _3427 * 40u;
                            _3442 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3429)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3429 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3429 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3429 + 3u)).x));
                            _3443 = _3442.w;
                            uint _3445 = (_3427 * 40u) + 4u;
                            _3458 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3445)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3445 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3445 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3445 + 3u)).x));
                            uint _3460 = (_3427 * 40u) + 8u;
                            _3470 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3460)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3460 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3460 + 2u)).x));
                            uint _3472 = (_3427 * 40u) + 16u;
                            _3485 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3472)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3472 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3472 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3472 + 3u)).x));
                            uint _3487 = (_3427 * 40u) + 20u;
                            _3500 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3487)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3487 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3487 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3487 + 3u)).x));
                            uint _3502 = (_3427 * 40u) + 24u;
                            vec4 _3515 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3502)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3502 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3502 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3502 + 3u)).x));
                            uint _3521 = (_3427 * 40u) + 28u;
                            vec4 _3534 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3521)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3521 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3521 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3521 + 3u)).x));
                            _3546 = fma(_2762, _3534.z, fma(_2761, _3534.y, _3534.x * _2760)) + _3534.w;
                            _3547 = !((fma(_2762, _3515.z, fma(_2761, _3515.y, _3515.x * _2760)) + _3515.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3547)
                            {
                                float _3574 = _3442.x - _2760;
                                float _3575 = _3442.y - _2761;
                                float _3576 = _3442.z - _2762;
                                float _3577 = dot(vec3(_3574, _3575, _3576), vec3(_3574, _3575, _3576));
                                float _3580 = inversesqrt(_3577);
                                float _3581 = _3580 * _3574;
                                float _3582 = _3580 * _3575;
                                float _3583 = _3580 * _3576;
                                float _3587 = 1.0 - (_3577 / (_3443 * _3443));
                                float _4757 = isnan(0.0) ? _3587 : (isnan(_3587) ? 0.0 : max(_3587, 0.0));
                                float _3588 = isnan(1.0) ? _4757 : (isnan(_4757) ? 1.0 : min(_4757, 1.0));
                                float _3592 = sqrt(_3577) * _3458.w;
                                float _3594 = 1.39999997615814208984375 / (_3592 + 1.39999997615814208984375);
                                float _3595 = _3594 * _3594;
                                float _3598 = ((1.0 - _3595) * dot(vec3(_3581, _3582, _3583), vec3(_1037, _1040, _1043))) + _3595;
                                float _3601 = _3592 * _3592;
                                float _3605 = (fma(_2762, _3485.z, fma(_2761, _3485.y, _3485.x * _2760)) + _3485.w) / _3546;
                                float _3606 = (fma(_2762, _3500.z, fma(_2761, _3500.y, _3500.x * _2760)) + _3500.w) / _3546;
                                float _3610 = 1.0 - dot(vec2(_3605, _3606), vec2(_3605, _3606));
                                float _4773 = isnan(0.0) ? _3610 : (isnan(_3610) ? 0.0 : max(_3610, 0.0));
                                float _3611 = isnan(1.0) ? _4773 : (isnan(_4773) ? 1.0 : min(_4773, 1.0));
                                float _3612 = _3611 * (((isnan(0.0) ? _3598 : (isnan(_3598) ? 0.0 : max(_3598, 0.0))) * _3588) / ((_3601 * 0.699999988079071044921875) + 1.0));
                                float _3624 = exp2(log2(1.0 / ((_3601 * 3.5) + 5.0)) * 0.25);
                                float _3625 = 1.0 - _1097;
                                float _3632 = sqrt(1.0 - ((1.0 - (_3625 * _3625)) * (1.0 - (_3624 * _3624))));
                                float _3633 = _3632 * _3632;
                                float _3634 = _3633 * _3633;
                                float _3635 = _3581 - _3054;
                                float _3636 = _3582 - _3055;
                                float _3637 = _3583 - _3056;
                                float _3641 = inversesqrt(dot(vec3(_3635, _3636, _3637), vec3(_3635, _3636, _3637)));
                                float _3645 = dot(vec3(_1037, _1040, _1043), vec3((-0.0) - _3054, (-0.0) - _3055, (-0.0) - _3056));
                                float _4784 = isnan(0.0) ? _3645 : (isnan(_3645) ? 0.0 : max(_3645, 0.0));
                                float _3648 = isnan(1.0) ? _4784 : (isnan(_4784) ? 1.0 : min(_4784, 1.0));
                                float _3649 = dot(vec3(_1037, _1040, _1043), vec3(_3641 * _3635, _3641 * _3636, _3641 * _3637));
                                float _4795 = isnan(0.0) ? _3649 : (isnan(_3649) ? 0.0 : max(_3649, 0.0));
                                float _3652 = isnan(1.0) ? _4795 : (isnan(_4795) ? 1.0 : min(_4795, 1.0));
                                float _3656 = ((_3652 * _3652) * (_3634 + (-1.0))) + 1.0;
                                float _3657 = _3594 * _3633;
                                float _3658 = _3657 * _3657;
                                float _3664 = ((1.0 - _3658) * dot(vec3(_1037, _1040, _1043), vec3(_3581, _3582, _3583))) + _3658;
                                float _4806 = isnan(0.0) ? _3664 : (isnan(_3664) ? 0.0 : max(_3664, 0.0));
                                float _3665 = isnan(1.0) ? _4806 : (isnan(_4806) ? 1.0 : min(_4806, 1.0));
                                float _3666 = 1.0 - _3633;
                                float _3676 = (0.5 / (((_3665 * ((_3648 * _3666) + _3633)) + 9.9999999392252902907785028219223e-09) + (((_3665 * _3666) + _3633) * _3648))) * _3665;
                                float _4817 = isnan(0.0) ? _3676 : (isnan(_3676) ? 0.0 : max(_3676, 0.0));
                                float _3686 = (_3611 * _3588) * (((_3634 * 3.1415927410125732421875) * (isnan(1.0) ? _4817 : (isnan(_4817) ? 1.0 : min(_4817, 1.0)))) / ((_3656 * _3656) * ((_3601 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3612 * _3458.y;
                                frontier_phi_83_pred_1 = _3612 * _3458.x;
                                frontier_phi_83_pred_2 = _3686 * _3470.z;
                                frontier_phi_83_pred_3 = _3686 * _3470.y;
                                frontier_phi_83_pred_4 = _3686 * _3470.x;
                                frontier_phi_83_pred_5 = _3612 * _3458.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3694 = frontier_phi_83_pred;
                            _3693 = frontier_phi_83_pred_1;
                            _3692 = frontier_phi_83_pred_2;
                            _3691 = frontier_phi_83_pred_3;
                            _3690 = frontier_phi_83_pred_4;
                            _3695 = frontier_phi_83_pred_5;
                            _3400 = _3693 + _3413;
                            _3401 = _3694 + _3414;
                            _3402 = _3695 + _3415;
                            _3397 = _3690 + _3410;
                            _3398 = _3691 + _3411;
                            _3399 = _3692 + _3412;
                            if (_3417 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3410 = _3397;
                                _3411 = _3398;
                                _3412 = _3399;
                                _3413 = _3400;
                                _3414 = _3401;
                                _3415 = _3402;
                                _3416 = _3417;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3402;
                        frontier_phi_77_pred_1 = _3401;
                        frontier_phi_77_pred_2 = _3400;
                        frontier_phi_77_pred_3 = _3399;
                        frontier_phi_77_pred_4 = _3398;
                        frontier_phi_77_pred_5 = _3397;
                    }
                    _3039 = frontier_phi_77_pred;
                    _3037 = frontier_phi_77_pred_1;
                    _3035 = frontier_phi_77_pred_2;
                    _3033 = frontier_phi_77_pred_3;
                    _3031 = frontier_phi_77_pred_4;
                    _3029 = frontier_phi_77_pred_5;
                    uint _3195 = _3194 + 1u;
                    if (_3195 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3188 = _3029;
                        _3189 = _3031;
                        _3190 = _3033;
                        _3191 = _3035;
                        _3192 = _3037;
                        _3193 = _3039;
                        _3194 = _3195;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _3033;
                frontier_phi_58_59_ladder_1 = _3039;
                frontier_phi_58_59_ladder_2 = _3037;
                frontier_phi_58_59_ladder_3 = _3035;
                frontier_phi_58_59_ladder_4 = _3031;
                frontier_phi_58_59_ladder_5 = _3029;
            }
            else
            {
                frontier_phi_58_59_ladder = _2911;
                frontier_phi_58_59_ladder_1 = _2917;
                frontier_phi_58_59_ladder_2 = _2915;
                frontier_phi_58_59_ladder_3 = _2913;
                frontier_phi_58_59_ladder_4 = _2909;
                frontier_phi_58_59_ladder_5 = _2907;
            }
            _3028 = frontier_phi_58_59_ladder_5;
            _3030 = frontier_phi_58_59_ladder_4;
            _3032 = frontier_phi_58_59_ladder;
            _3034 = frontier_phi_58_59_ladder_3;
            _3036 = frontier_phi_58_59_ladder_2;
            _3038 = frontier_phi_58_59_ladder_1;
        }
        float _3043 = isnan(1.0) ? _1081 : (isnan(_1081) ? 1.0 : min(_1081, 1.0));
        _2819 = (_3043 * _3034) + _2274;
        _2821 = (_3043 * _3036) + _2276;
        _2823 = (_3043 * _3038) + _2278;
        _2825 = ((_3028 * 0.039999999105930328369140625) * _3043) + _2604;
        _2827 = ((_3030 * 0.039999999105930328369140625) * _3043) + _2606;
        _2829 = ((_3032 * 0.039999999105930328369140625) * _3043) + _2608;
    }
    else
    {
        _2819 = _2274;
        _2821 = _2276;
        _2823 = _2278;
        _2825 = _2604;
        _2827 = _2606;
        _2829 = _2608;
    }
    float _4833 = isnan(0.0) ? _1066 : (isnan(_1066) ? 0.0 : max(_1066, 0.0));
    float _4844 = isnan(0.0) ? _1067 : (isnan(_1067) ? 0.0 : max(_1067, 0.0));
    float _4855 = isnan(0.0) ? _1068 : (isnan(_1068) ? 0.0 : max(_1068, 0.0));
    float _2846 = ((isnan(1.0) ? _4833 : (isnan(_4833) ? 1.0 : min(_4833, 1.0))) * (_2819 + ((isnan(0.0) ? _1836 : (isnan(_1836) ? 0.0 : max(_1836, 0.0))) * _1081))) + ((_2825 + ((isnan(0.0) ? _2127 : (isnan(_2127) ? 0.0 : max(_2127, 0.0))) * _1915)) * cbPerFrame._m0[3u].x);
    float _2847 = ((isnan(1.0) ? _4844 : (isnan(_4844) ? 1.0 : min(_4844, 1.0))) * (_2821 + ((isnan(0.0) ? _1839 : (isnan(_1839) ? 0.0 : max(_1839, 0.0))) * _1081))) + ((_2827 + ((isnan(0.0) ? _2130 : (isnan(_2130) ? 0.0 : max(_2130, 0.0))) * _1915)) * cbPerFrame._m0[3u].x);
    float _2848 = ((isnan(1.0) ? _4855 : (isnan(_4855) ? 1.0 : min(_4855, 1.0))) * (_2823 + ((isnan(0.0) ? _1842 : (isnan(_1842) ? 0.0 : max(_1842, 0.0))) * _1081))) + ((_2829 + ((isnan(0.0) ? _2133 : (isnan(_2133) ? 0.0 : max(_2133, 0.0))) * _1915)) * cbPerFrame._m0[3u].x);
    uint _2849 = _261 + 6u;
    float _2857 = _1018 / cbSceneParam._m0[86u].x;
    float _2858 = _1019 / cbSceneParam._m0[86u].y;
    vec4 _2872 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2857, _2858, (log2((isnan(cbSceneParam._m0[77u].w) ? _940 : (isnan(_940) ? cbSceneParam._m0[77u].w : min(_940, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2874 = _2872.x;
    float _2875 = _2872.y;
    float _2876 = _2872.z;
    float _2877 = _2872.w;
    float _2970;
    float _2972;
    float _2974;
    float _2976;
    if (_940 > cbSceneParam._m0[78u].w)
    {
        float _2932 = isnan(_940) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _940 : min(cbSceneParam._m0[80u].w, _940));
        float _2933 = _2932 / _940;
        float _2944 = _2933 * _991;
        float _2945 = _992 * _2933;
        float _2946 = (-0.0) - _2945;
        float _2948 = _2933 * _993;
        float _2950 = (cbSceneParam._m0[77u].w * _2946) / _2932;
        float _2951 = _2950 + cbSceneParam._m0[79u].w;
        float _2952 = cbSceneParam._m0[79u].w - _2945;
        float _2958 = sqrt(((_2944 * _2944) + (_2945 * _2945)) + (_2948 * _2948));
        float _2961 = (1.0 - (cbSceneParam._m0[77u].w / _2932)) * _2958;
        float _2966 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2968 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3145;
        if (abs((_2946 - _2950) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3145 = ((((_2951 > 0.0) ? exp2(_2966 * _2951) : (2.0 - exp2(_2968 * _2951))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2961;
        }
        else
        {
            float _3089 = 1.0 / cbSceneParam._m0[80u].x;
            float _3090 = isnan(_2952) ? _2951 : (isnan(_2951) ? _2952 : max(_2951, _2952));
            float _3091 = isnan(_2952) ? _2951 : (isnan(_2951) ? _2952 : min(_2951, _2952));
            float _3100 = isnan(0.0) ? _3090 : (isnan(_3090) ? 0.0 : min(_3090, 0.0));
            float _3101 = isnan(0.0) ? _3091 : (isnan(_3091) ? 0.0 : min(_3091, 0.0));
            _3145 = ((abs(_2958 / _2946) * cbSceneParam._m0[80u].y) * ((((_3100 - _3101) * 2.0) - ((exp2(_2966 * (isnan(0.0) ? _3090 : (isnan(_3090) ? 0.0 : max(_3090, 0.0)))) - exp2(_2966 * (isnan(0.0) ? _3091 : (isnan(_3091) ? 0.0 : max(_3091, 0.0))))) * _3089)) - ((exp2(_2968 * _3100) - exp2(_2968 * _3101)) * _3089))) + (_2961 * cbSceneParam._m0[80u].z);
        }
        vec4 _3147 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2857, _2858, 1.0), 0.0);
        float _3156 = exp2((_3145 * (-1.44269502162933349609375)) * (1.0 - _3147.w));
        float _3157 = log2(_3156);
        float _3173 = log2(_2877);
        _2970 = (exp2(_3173 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3157 * cbSceneParam._m0[78u].x)) * _3147.x) / cbSceneParam._m0[78u].x)) + _2874;
        _2972 = (exp2(_3173 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3157 * cbSceneParam._m0[78u].y)) * _3147.y) / cbSceneParam._m0[78u].y)) + _2875;
        _2974 = (exp2(_3173 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3157 * cbSceneParam._m0[78u].z)) * _3147.z) / cbSceneParam._m0[78u].z)) + _2876;
        _2976 = _3156 * _2877;
    }
    else
    {
        _2970 = _2874;
        _2972 = _2875;
        _2974 = _2876;
        _2976 = _2877;
    }
    bool _3183;
    vec4 _2986;
    vec4 _3008;
    float _3010;
    float _3014;
    float _3015;
    float _3016;
    float _3017;
    bool _3027;
    for (;;)
    {
        _2986 = cbMatDynParam._m0[0u];
        float _2988 = roundEven(_2986.y);
        bool _2989 = _2988 == 3.0;
        float _2990 = log2(_2976);
        float _2997 = exp2(_2990 * cbSceneParam._m0[78u].x) * _2846;
        float _2998 = exp2(_2990 * cbSceneParam._m0[78u].y) * _2847;
        float _2999 = exp2(_2990 * cbSceneParam._m0[78u].z) * _2848;
        float _3006 = _1007 + (-0.5);
        _3008 = cbMtdParam._m0[1u];
        _3010 = _3008.y * _3006;
        float _3013 = (_2988 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3014 = _3013 * (_2989 ? _2997 : (_2997 + (cbSceneParam._m0[72u].w * _2970)));
        _3015 = _3013 * (_2989 ? _2998 : (_2998 + (cbSceneParam._m0[72u].w * _2972)));
        _3016 = _3013 * (_2989 ? _2999 : (_2999 + (cbSceneParam._m0[72u].w * _2974)));
        _3017 = _3006 * 0.999000012874603271484375;
        _3027 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3027)
        {
            if ((cbInstanceData._m0[_261 + 7u].x + _3017) < 0.5)
            {
                _3183 = true;
                break;
            }
        }
        uint _3124 = _1056 + uint(_2986.w);
        if ((cbInstanceData._m0[_3124].w < 1.0) && ((cbInstanceData._m0[_3124].w + _3017) < 0.5))
        {
            _3183 = true;
            break;
        }
        if ((_3010 + 1.0) < _3008.x)
        {
            _3183 = true;
            break;
        }
        _3183 = false;
        break;
    }
    float _3388;
    if (_3183)
    {
        discard_state = true;
        _3388 = 0.0;
    }
    else
    {
        _3388 = cbInstanceData._m0[_2849].w;
    }
    SV_Target.x = _3014;
    SV_Target.y = _3015;
    SV_Target.z = _3016;
    SV_Target.w = _3388;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2849].w;
    discard_exit();
}


