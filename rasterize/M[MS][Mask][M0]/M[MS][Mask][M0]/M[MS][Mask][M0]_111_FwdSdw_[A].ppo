#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_10;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_6;
layout(set = 0, binding = 23) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_8;
layout(set = 0, binding = 24) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_9;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1367;
float _4007;
float _4008;
float _4009;
float _4010;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _222 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _223 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _224 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _230 = inversesqrt(dot(vec3(_222, _223, _224), vec3(_222, _223, _224)));
    float _237 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _244 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _250 = uint(roundEven(NORMAL.w)) * 13u;
    uint _256 = _250 + 1u;
    uint _260 = _250 + 2u;
    float _269 = sqrt(((cbInstanceData._m0[_256].x * cbInstanceData._m0[_256].x) + (cbInstanceData._m0[_250].x * cbInstanceData._m0[_250].x)) + (cbInstanceData._m0[_260].x * cbInstanceData._m0[_260].x));
    float _270 = _269 * TEXCOORD.z;
    float _271 = _269 * TEXCOORD.w;
    vec4 _291 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _297 = _291.x * cbMtdParam._m0[11u].x;
    float _298 = _291.y * cbMtdParam._m0[11u].y;
    float _299 = _291.z * cbMtdParam._m0[11u].z;
    vec4 _318 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _270) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _271) + cbTextureTilingScale._m0[5u].w));
    vec4 _338 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _378 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _380 = _378.x;
    float _392 = dot(vec4(_380, _378.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _409 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _338.x) * 2.0) - ((((_380 - _392) * cbMtdParam._m0[24u].z) + _392) * cbMtdParam._m0[23u].x))) + 1.0;
    float _4019 = isnan(0.0) ? _409 : (isnan(_409) ? 0.0 : max(_409, 0.0));
    float _410 = isnan(1.0) ? _4019 : (isnan(_4019) ? 1.0 : min(_4019, 1.0));
    float _417 = (_410 * ((_318.x * cbMtdParam._m0[12u].x) - _297)) + _297;
    float _418 = (_410 * ((_318.y * cbMtdParam._m0[12u].y) - _298)) + _298;
    float _419 = (_410 * ((_318.z * cbMtdParam._m0[12u].z) - _299)) + _299;
    vec4 _436 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _270) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _271) + cbTextureTilingScale._m0[3u].w));
    vec4 _456 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _458 = _456.x;
    float _468 = dot(vec4(_458, _456.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _482 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _338.y) * 2.0) - ((((_458 - _468) * cbMtdParam._m0[24u].z) + _468) * cbMtdParam._m0[20u].w))) + 1.0;
    float _4030 = isnan(0.0) ? _482 : (isnan(_482) ? 0.0 : max(_482, 0.0));
    float _483 = isnan(1.0) ? _4030 : (isnan(_4030) ? 1.0 : min(_4030, 1.0));
    float _490 = (_483 * ((_436.x * cbMtdParam._m0[13u].x) - _417)) + _417;
    float _491 = (_483 * ((_436.y * cbMtdParam._m0[13u].y) - _418)) + _418;
    float _492 = (_483 * ((_436.z * cbMtdParam._m0[13u].z) - _419)) + _419;
    vec4 _510 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_9, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[24u].x * _270) + cbTextureTilingScale._m0[24u].z, (cbTextureTilingScale._m0[24u].y * _271) + cbTextureTilingScale._m0[24u].w));
    vec4 _527 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[25u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _529 = _527.x;
    float _539 = dot(vec4(_529, _527.yzw), vec4(cbMtdParam._m0[30u].w, cbMtdParam._m0[31u].xy, 0.0));
    float _551 = ((cbMtdParam._m0[25u].x * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.z) - _338.z) * 2.0) - ((((_529 - _539) * cbMtdParam._m0[24u].z) + _539) * cbMtdParam._m0[20u].z))) + 1.0;
    float _4041 = isnan(0.0) ? _551 : (isnan(_551) ? 0.0 : max(_551, 0.0));
    float _552 = isnan(1.0) ? _4041 : (isnan(_4041) ? 1.0 : min(_4041, 1.0));
    float _559 = (_552 * ((_510.x * cbMtdParam._m0[14u].x) - _490)) + _490;
    float _560 = (_552 * ((_510.y * cbMtdParam._m0[14u].y) - _491)) + _491;
    float _561 = (_552 * ((_510.z * cbMtdParam._m0[14u].z) - _492)) + _492;
    vec4 _579 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _270) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _271) + cbTextureTilingScale._m0[4u].w));
    vec4 _596 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _598 = _596.x;
    float _599 = _596.y;
    float _600 = _596.z;
    float _607 = ((_579.x - _598) * _410) + _598;
    float _608 = ((_579.y - _599) * _410) + _599;
    float _609 = ((_579.z - _600) * _410) + _600;
    vec4 _621 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _270) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _271) + cbTextureTilingScale._m0[2u].w));
    float _632 = ((_621.x - _607) * _483) + _607;
    float _633 = ((_621.y - _608) * _483) + _608;
    float _634 = ((_621.z - _609) * _483) + _609;
    vec4 _646 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[23u].x * _270) + cbTextureTilingScale._m0[23u].z, (cbTextureTilingScale._m0[23u].y * _271) + cbTextureTilingScale._m0[23u].w));
    float _659 = ((_646.z - _634) * _552) + _634;
    float _662 = ((((_646.x - _632) * _552) + _632) * 2.0) + (-1.0);
    float _664 = ((((_646.y - _633) * _552) + _633) * 2.0) + (-1.0);
    float _665 = dot(vec2(_662, _664), vec2(_662, _664));
    float _4052 = isnan(0.0) ? _665 : (isnan(_665) ? 0.0 : max(_665, 0.0));
    float _670 = sqrt(1.0 - (isnan(1.0) ? _4052 : (isnan(_4052) ? 1.0 : min(_4052, 1.0))));
    vec4 _684 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _709 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _270) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _271) + cbTextureTilingScale._m0[11u].w));
    float _711 = _709.x;
    float _712 = 1.0 - _711;
    float _725 = (TEXCOORD_8.w - ((cbMtdParam._m0[21u].z * (1.0 - TEXCOORD_8.w)) * ((((_711 - _712) * cbMtdParam._m0[24u].w) + _712) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[21u].w + 1.0);
    float _4063 = isnan(0.0) ? _725 : (isnan(_725) ? 0.0 : max(_725, 0.0));
    float _726 = isnan(1.0) ? _4063 : (isnan(_4063) ? 1.0 : min(_4063, 1.0));
    float _733 = (_726 * (cbMtdParam._m0[17u].x - _559)) + _559;
    float _734 = (_726 * (cbMtdParam._m0[17u].y - _560)) + _560;
    float _735 = (_726 * (cbMtdParam._m0[17u].z - _561)) + _561;
    float _739 = (cbMtdParam._m0[19u].w * (_684.z - _659)) + _659;
    vec4 _752 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _270) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _271) + cbTextureTilingScale._m0[15u].w));
    float _759 = (_752.x * 2.0) + (-1.0);
    float _760 = (_752.y * 2.0) + (-1.0);
    float _761 = dot(vec2(_759, _760), vec2(_759, _760));
    float _4074 = isnan(0.0) ? _761 : (isnan(_761) ? 0.0 : max(_761, 0.0));
    float _769 = (_726 * (_752.z - _739)) + _739;
    float _772 = (((_684.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _662;
    float _773 = (((_684.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _664;
    float _785 = (((_759 - _772) + (cbMtdParam._m0[21u].x * _772)) * _726) + _772;
    float _786 = (((_760 - _773) + (cbMtdParam._m0[21u].x * _773)) * _726) + _773;
    float _787 = (_726 * (sqrt(1.0 - (isnan(1.0) ? _4074 : (isnan(_4074) ? 1.0 : min(_4074, 1.0)))) - _670)) + _670;
    float _791 = cbMtdParam._m0[22u].x + _684.w;
    float _794 = fma(_787, _237 * NORMAL.x, fma(_786, _244 * TANGENT.x, (_230 * _222) * _785));
    float _797 = fma(_787, _237 * NORMAL.y, fma(_786, _244 * TANGENT.y, (_230 * _223) * _785));
    float _800 = fma(_787, _237 * NORMAL.z, fma(_786, _244 * TANGENT.z, (_230 * _224) * _785));
    float _804 = inversesqrt(dot(vec3(_794, _797, _800), vec3(_794, _797, _800)));
    float _805 = _804 * _794;
    float _806 = _804 * _797;
    float _807 = _804 * _800;
    float _4085 = isnan(0.0) ? _769 : (isnan(_769) ? 0.0 : max(_769, 0.0));
    float _808 = isnan(1.0) ? _4085 : (isnan(_4085) ? 1.0 : min(_4085, 1.0));
    float _4096 = isnan(0.0) ? _791 : (isnan(_791) ? 0.0 : max(_791, 0.0));
    float _4107 = isnan(0.0) ? _733 : (isnan(_733) ? 0.0 : max(_733, 0.0));
    float _4118 = isnan(0.0) ? _734 : (isnan(_734) ? 0.0 : max(_734, 0.0));
    float _4129 = isnan(0.0) ? _735 : (isnan(_735) ? 0.0 : max(_735, 0.0));
    float _826 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _868 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _878 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _868);
    float _879 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _868);
    float _880 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _868);
    float _884 = inversesqrt(dot(vec3(_878, _879, _880), vec3(_878, _879, _880)));
    float _885 = _878 * _884;
    float _886 = _879 * _884;
    float _887 = _880 * _884;
    vec4 _892 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _894 = _892.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1048 = sqrt(((_878 * _878) + (_879 * _879)) + (_880 * _880));
        float _1054 = (cbMatDynParam._m0[5u].x * _1048) + cbMatDynParam._m0[5u].y;
        float _4140 = isnan(0.0) ? _1054 : (isnan(_1054) ? 0.0 : max(_1054, 0.0));
        float _1055 = isnan(1.0) ? _4140 : (isnan(_4140) ? 1.0 : min(_4140, 1.0));
        float _1059 = (cbMatDynParam._m0[5u].z * _1048) + cbMatDynParam._m0[5u].w;
        float _4151 = isnan(0.0) ? _1059 : (isnan(_1059) ? 0.0 : max(_1059, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4151 : (isnan(_4151) ? 1.0 : min(_4151, 1.0))) - _1055)) + _1055) < ((_894 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _905 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _906 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _924 = fma(_807, cbSceneParam._m0[5u].z, fma(_806, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _805));
    float _927 = fma(_807, cbSceneParam._m0[6u].z, fma(_806, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _805));
    float _930 = fma(_807, cbSceneParam._m0[7u].z, fma(_806, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _805));
    uint _943 = _250 + 9u;
    uint _944 = _943 + uint(cbMatDynParam._m0[0u].w);
    float _950 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4107 : (isnan(_4107) ? 1.0 : min(_4107, 1.0)))) * cbInstanceData._m0[_944].x;
    float _951 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4118 : (isnan(_4118) ? 1.0 : min(_4118, 1.0)))) * cbInstanceData._m0[_944].y;
    float _952 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4129 : (isnan(_4129) ? 1.0 : min(_4129, 1.0)))) * cbInstanceData._m0[_944].z;
    float _4162 = isnan(0.0) ? _950 : (isnan(_950) ? 0.0 : max(_950, 0.0));
    float _953 = isnan(1.0) ? _4162 : (isnan(_4162) ? 1.0 : min(_4162, 1.0));
    float _4173 = isnan(0.0) ? _951 : (isnan(_951) ? 0.0 : max(_951, 0.0));
    float _954 = isnan(1.0) ? _4173 : (isnan(_4173) ? 1.0 : min(_4173, 1.0));
    float _4184 = isnan(0.0) ? _952 : (isnan(_952) ? 0.0 : max(_952, 0.0));
    float _955 = isnan(1.0) ? _4184 : (isnan(_4184) ? 1.0 : min(_4184, 1.0));
    vec4 _964 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _905, cbSceneParam._m0[86u].y * _906));
    float _968 = ((isnan(1.0) ? _4096 : (isnan(_4096) ? 1.0 : min(_4096, 1.0))) * TEXCOORD_5.w) * _964.x;
    float _969 = dot(vec3(_805, _806, _807), vec3(_885, _886, _887));
    float _972 = _969 * 2.0;
    float _976 = (_972 * _805) - _885;
    float _977 = (_972 * _806) - _886;
    float _978 = (_972 * _807) - _887;
    float _982 = abs(dot(vec3(_885, _886, _887), vec3(_805, _806, _807)));
    float _4195 = isnan(0.0) ? _982 : (isnan(_982) ? 0.0 : max(_982, 0.0));
    float _984 = sqrt(_808);
    float _997 = exp2((_984 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4195 : (isnan(_4195) ? 1.0 : min(_4195, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_984 * 3.0));
    float _1029 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1033 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1037 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1366;
    float _1368;
    float _1369;
    float _1370;
    float _1371;
    float _1372;
    float _1373;
    float _1374;
    float _1375;
    float _1376;
    float _1377;
    float _1378;
    float _1379;
    float _1380;
    float _1381;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1091 = fma(_1037, cbModelParam._m0[26u].z, fma(_1033, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1029));
        float _1095 = fma(_1037, cbModelParam._m0[27u].z, fma(_1033, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1029));
        float _1099 = fma(_1037, cbModelParam._m0[28u].z, fma(_1033, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1029));
        float _1124 = _1029 + _805;
        float _1125 = _1033 + _806;
        float _1126 = _1037 + _807;
        float _1136 = fma(_1126, cbModelParam._m0[26u].z, fma(_1125, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1124)) - _1091;
        float _1137 = fma(_1126, cbModelParam._m0[27u].z, fma(_1125, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1124)) - _1095;
        float _1138 = fma(_1126, cbModelParam._m0[28u].z, fma(_1125, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1124)) - _1099;
        float _1142 = inversesqrt(dot(vec3(_1136, _1137, _1138), vec3(_1136, _1137, _1138)));
        float _1155 = ((_1142 * _1136) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1091 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1156 = ((_1142 * _1137) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1095 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1157 = ((_1142 * _1138) / cbModelParam._m0[34u].z) + ((((((_1099 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1160 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1155, _1156, _1157), 0.0);
        vec4 _1167 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1155, _1156, _1157), 0.0);
        vec4 _1174 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1155, _1156, _1157), 0.0);
        vec4 _1181 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1155, _1156, _1157), 0.0);
        float _1194 = exp2((_1160.w + (-0.5)) * 20.0) * 2.0;
        float _1195 = _1194 * (_1160.x + (-0.5));
        float _1196 = _1194 * (_1160.y + (-0.5));
        float _1197 = _1194 * (_1160.z + (-0.5));
        float _1204 = exp2((_1167.w + (-0.5)) * 20.0) * 2.0;
        float _1205 = _1204 * (_1167.x + (-0.5));
        float _1206 = _1204 * (_1167.y + (-0.5));
        float _1207 = _1204 * (_1167.z + (-0.5));
        float _1214 = exp2((_1174.w + (-0.5)) * 20.0) * 2.0;
        float _1215 = _1214 * (_1174.x + (-0.5));
        float _1216 = _1214 * (_1174.y + (-0.5));
        float _1217 = _1214 * (_1174.z + (-0.5));
        float _1224 = exp2((_1181.w + (-0.5)) * 20.0) * 2.0;
        float _1225 = _1224 * (_1181.x + (-0.5));
        float _1226 = _1224 * (_1181.y + (-0.5));
        float _1227 = _1224 * (_1181.z + (-0.5));
        float _1228 = isnan(0.0) ? _1225 : (isnan(_1225) ? 0.0 : max(_1225, 0.0));
        float _1229 = isnan(0.0) ? _1226 : (isnan(_1226) ? 0.0 : max(_1226, 0.0));
        float _1230 = isnan(0.0) ? _1227 : (isnan(_1227) ? 0.0 : max(_1227, 0.0));
        float _1231 = _1195 * 0.5;
        float _1232 = _1205 * 0.5;
        float _1233 = _1215 * 0.5;
        float _1234 = dot(vec3(_1231, _1232, _1233), vec3(_1231, _1232, _1233));
        float _1239 = (_1234 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1234);
        float _1248 = (dot(vec3(_805, _806, _807), vec3(_1239 * _1231, _1239 * _1232, _1239 * _1233)) + 1.0) * 0.5;
        float _4221 = isnan(0.0) ? _1248 : (isnan(_1248) ? 0.0 : max(_1248, 0.0));
        float _1258 = sqrt(((_1232 * _1232) + (_1231 * _1231)) + (_1233 * _1233)) / (_1228 + 9.9999997473787516355514526367188e-06);
        float _4232 = isnan(0.0) ? _1258 : (isnan(_1258) ? 0.0 : max(_1258, 0.0));
        float _1259 = isnan(1.0) ? _4232 : (isnan(_4232) ? 1.0 : min(_4232, 1.0));
        float _1260 = _1259 * 2.0;
        float _1264 = (1.0 - _1259) / (_1259 + 1.0);
        float _4243 = isnan(0.0) ? _1264 : (isnan(_1264) ? 0.0 : max(_1264, 0.0));
        float _1265 = isnan(1.0) ? _4243 : (isnan(_4243) ? 1.0 : min(_4243, 1.0));
        float _1274 = ((((1.0 - _1265) * (_1260 + 2.0)) * exp2(log2(isnan(1.0) ? _4221 : (isnan(_4221) ? 1.0 : min(_4221, 1.0))) * (_1260 + 1.0))) + _1265) * _1228;
        float _1275 = _1196 * 0.5;
        float _1276 = _1206 * 0.5;
        float _1277 = _1216 * 0.5;
        float _1278 = dot(vec3(_1275, _1276, _1277), vec3(_1275, _1276, _1277));
        float _1283 = (_1278 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1278);
        float _1291 = (dot(vec3(_805, _806, _807), vec3(_1283 * _1275, _1283 * _1276, _1283 * _1277)) + 1.0) * 0.5;
        float _4254 = isnan(0.0) ? _1291 : (isnan(_1291) ? 0.0 : max(_1291, 0.0));
        float _1300 = sqrt(((_1276 * _1276) + (_1275 * _1275)) + (_1277 * _1277)) / (_1229 + 9.9999997473787516355514526367188e-06);
        float _4265 = isnan(0.0) ? _1300 : (isnan(_1300) ? 0.0 : max(_1300, 0.0));
        float _1301 = isnan(1.0) ? _4265 : (isnan(_4265) ? 1.0 : min(_4265, 1.0));
        float _1302 = _1301 * 2.0;
        float _1306 = (1.0 - _1301) / (_1301 + 1.0);
        float _4276 = isnan(0.0) ? _1306 : (isnan(_1306) ? 0.0 : max(_1306, 0.0));
        float _1307 = isnan(1.0) ? _4276 : (isnan(_4276) ? 1.0 : min(_4276, 1.0));
        float _1316 = ((((1.0 - _1307) * (_1302 + 2.0)) * exp2(log2(isnan(1.0) ? _4254 : (isnan(_4254) ? 1.0 : min(_4254, 1.0))) * (_1302 + 1.0))) + _1307) * _1229;
        float _1317 = _1197 * 0.5;
        float _1318 = _1207 * 0.5;
        float _1319 = _1217 * 0.5;
        float _1320 = dot(vec3(_1317, _1318, _1319), vec3(_1317, _1318, _1319));
        float _1325 = (_1320 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1320);
        float _1333 = (dot(vec3(_805, _806, _807), vec3(_1325 * _1317, _1325 * _1318, _1325 * _1319)) + 1.0) * 0.5;
        float _4287 = isnan(0.0) ? _1333 : (isnan(_1333) ? 0.0 : max(_1333, 0.0));
        float _1342 = sqrt(((_1318 * _1318) + (_1317 * _1317)) + (_1319 * _1319)) / (_1230 + 9.9999997473787516355514526367188e-06);
        float _4298 = isnan(0.0) ? _1342 : (isnan(_1342) ? 0.0 : max(_1342, 0.0));
        float _1343 = isnan(1.0) ? _4298 : (isnan(_4298) ? 1.0 : min(_4298, 1.0));
        float _1344 = _1343 * 2.0;
        float _1348 = (1.0 - _1343) / (_1343 + 1.0);
        float _4309 = isnan(0.0) ? _1348 : (isnan(_1348) ? 0.0 : max(_1348, 0.0));
        float _1349 = isnan(1.0) ? _4309 : (isnan(_4309) ? 1.0 : min(_4309, 1.0));
        float _1358 = ((((1.0 - _1349) * (_1344 + 2.0)) * exp2(log2(isnan(1.0) ? _4287 : (isnan(_4287) ? 1.0 : min(_4287, 1.0))) * (_1344 + 1.0))) + _1349) * _1230;
        _1366 = _1197;
        _1368 = _1196;
        _1369 = _1195;
        _1370 = _1207;
        _1371 = _1206;
        _1372 = _1205;
        _1373 = _1217;
        _1374 = _1216;
        _1375 = _1215;
        _1376 = _1230;
        _1377 = _1229;
        _1378 = _1228;
        _1379 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1274 : (isnan(_1274) ? 0.0 : max(_1274, 0.0)));
        _1380 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1316 : (isnan(_1316) ? 0.0 : max(_1316, 0.0)));
        _1381 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1358 : (isnan(_1358) ? 0.0 : max(_1358, 0.0)));
    }
    else
    {
        _1366 = _1367;
        _1368 = _1367;
        _1369 = _1367;
        _1370 = _1367;
        _1371 = _1367;
        _1372 = _1367;
        _1373 = _1367;
        _1374 = _1367;
        _1375 = _1367;
        _1376 = _1367;
        _1377 = _1367;
        _1378 = _1367;
        _1379 = 0.0;
        _1380 = 0.0;
        _1381 = 0.0;
    }
    float _1676;
    float _1677;
    float _1678;
    float _1679;
    float _1680;
    float _1681;
    float _1682;
    float _1683;
    float _1684;
    float _1685;
    float _1686;
    float _1687;
    float _1688;
    float _1689;
    float _1690;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1407 = fma(_1037, cbModelParam._m0[30u].z, fma(_1033, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1029));
        float _1411 = fma(_1037, cbModelParam._m0[31u].z, fma(_1033, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1029));
        float _1415 = fma(_1037, cbModelParam._m0[32u].z, fma(_1033, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1029));
        float _1438 = _1029 + _805;
        float _1439 = _1033 + _806;
        float _1440 = _1037 + _807;
        float _1450 = fma(_1440, cbModelParam._m0[30u].z, fma(_1439, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1438)) - _1407;
        float _1451 = fma(_1440, cbModelParam._m0[31u].z, fma(_1439, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1438)) - _1411;
        float _1452 = fma(_1440, cbModelParam._m0[32u].z, fma(_1439, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1438)) - _1415;
        float _1456 = inversesqrt(dot(vec3(_1450, _1451, _1452), vec3(_1450, _1451, _1452)));
        float _1469 = ((_1456 * _1450) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1407 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1470 = ((_1456 * _1451) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1411 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1471 = ((_1456 * _1452) / cbModelParam._m0[35u].z) + ((((((_1415 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1473 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1469, _1470, _1471), 0.0);
        vec4 _1480 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1469, _1470, _1471), 0.0);
        vec4 _1487 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1469, _1470, _1471), 0.0);
        vec4 _1494 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1469, _1470, _1471), 0.0);
        float _1506 = exp2((_1473.w + (-0.5)) * 20.0) * 2.0;
        float _1507 = _1506 * (_1473.x + (-0.5));
        float _1508 = _1506 * (_1473.y + (-0.5));
        float _1509 = _1506 * (_1473.z + (-0.5));
        float _1516 = exp2((_1480.w + (-0.5)) * 20.0) * 2.0;
        float _1517 = _1516 * (_1480.x + (-0.5));
        float _1518 = _1516 * (_1480.y + (-0.5));
        float _1519 = _1516 * (_1480.z + (-0.5));
        float _1526 = exp2((_1487.w + (-0.5)) * 20.0) * 2.0;
        float _1527 = _1526 * (_1487.x + (-0.5));
        float _1528 = _1526 * (_1487.y + (-0.5));
        float _1529 = _1526 * (_1487.z + (-0.5));
        float _1536 = exp2((_1494.w + (-0.5)) * 20.0) * 2.0;
        float _1537 = _1536 * (_1494.x + (-0.5));
        float _1538 = _1536 * (_1494.y + (-0.5));
        float _1539 = _1536 * (_1494.z + (-0.5));
        float _1540 = isnan(0.0) ? _1537 : (isnan(_1537) ? 0.0 : max(_1537, 0.0));
        float _1541 = isnan(0.0) ? _1538 : (isnan(_1538) ? 0.0 : max(_1538, 0.0));
        float _1542 = isnan(0.0) ? _1539 : (isnan(_1539) ? 0.0 : max(_1539, 0.0));
        float _1543 = _1507 * 0.5;
        float _1544 = _1517 * 0.5;
        float _1545 = _1527 * 0.5;
        float _1546 = dot(vec3(_1543, _1544, _1545), vec3(_1543, _1544, _1545));
        float _1551 = (_1546 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1546);
        float _1559 = (dot(vec3(_805, _806, _807), vec3(_1551 * _1543, _1551 * _1544, _1551 * _1545)) + 1.0) * 0.5;
        float _4350 = isnan(0.0) ? _1559 : (isnan(_1559) ? 0.0 : max(_1559, 0.0));
        float _1568 = sqrt(((_1544 * _1544) + (_1543 * _1543)) + (_1545 * _1545)) / (_1540 + 9.9999997473787516355514526367188e-06);
        float _4361 = isnan(0.0) ? _1568 : (isnan(_1568) ? 0.0 : max(_1568, 0.0));
        float _1569 = isnan(1.0) ? _4361 : (isnan(_4361) ? 1.0 : min(_4361, 1.0));
        float _1570 = _1569 * 2.0;
        float _1574 = (1.0 - _1569) / (_1569 + 1.0);
        float _4372 = isnan(0.0) ? _1574 : (isnan(_1574) ? 0.0 : max(_1574, 0.0));
        float _1575 = isnan(1.0) ? _4372 : (isnan(_4372) ? 1.0 : min(_4372, 1.0));
        float _1584 = ((((1.0 - _1575) * (_1570 + 2.0)) * exp2(log2(isnan(1.0) ? _4350 : (isnan(_4350) ? 1.0 : min(_4350, 1.0))) * (_1570 + 1.0))) + _1575) * _1540;
        float _1585 = _1508 * 0.5;
        float _1586 = _1518 * 0.5;
        float _1587 = _1528 * 0.5;
        float _1588 = dot(vec3(_1585, _1586, _1587), vec3(_1585, _1586, _1587));
        float _1593 = (_1588 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1588);
        float _1601 = (dot(vec3(_805, _806, _807), vec3(_1593 * _1585, _1593 * _1586, _1593 * _1587)) + 1.0) * 0.5;
        float _4383 = isnan(0.0) ? _1601 : (isnan(_1601) ? 0.0 : max(_1601, 0.0));
        float _1610 = sqrt(((_1586 * _1586) + (_1585 * _1585)) + (_1587 * _1587)) / (_1541 + 9.9999997473787516355514526367188e-06);
        float _4394 = isnan(0.0) ? _1610 : (isnan(_1610) ? 0.0 : max(_1610, 0.0));
        float _1611 = isnan(1.0) ? _4394 : (isnan(_4394) ? 1.0 : min(_4394, 1.0));
        float _1612 = _1611 * 2.0;
        float _1616 = (1.0 - _1611) / (_1611 + 1.0);
        float _4405 = isnan(0.0) ? _1616 : (isnan(_1616) ? 0.0 : max(_1616, 0.0));
        float _1617 = isnan(1.0) ? _4405 : (isnan(_4405) ? 1.0 : min(_4405, 1.0));
        float _1626 = ((((1.0 - _1617) * (_1612 + 2.0)) * exp2(log2(isnan(1.0) ? _4383 : (isnan(_4383) ? 1.0 : min(_4383, 1.0))) * (_1612 + 1.0))) + _1617) * _1541;
        float _1627 = _1509 * 0.5;
        float _1628 = _1519 * 0.5;
        float _1629 = _1529 * 0.5;
        float _1630 = dot(vec3(_1627, _1628, _1629), vec3(_1627, _1628, _1629));
        float _1635 = (_1630 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1630);
        float _1643 = (dot(vec3(_805, _806, _807), vec3(_1635 * _1627, _1635 * _1628, _1635 * _1629)) + 1.0) * 0.5;
        float _4416 = isnan(0.0) ? _1643 : (isnan(_1643) ? 0.0 : max(_1643, 0.0));
        float _1652 = sqrt(((_1628 * _1628) + (_1627 * _1627)) + (_1629 * _1629)) / (_1542 + 9.9999997473787516355514526367188e-06);
        float _4427 = isnan(0.0) ? _1652 : (isnan(_1652) ? 0.0 : max(_1652, 0.0));
        float _1653 = isnan(1.0) ? _4427 : (isnan(_4427) ? 1.0 : min(_4427, 1.0));
        float _1654 = _1653 * 2.0;
        float _1658 = (1.0 - _1653) / (_1653 + 1.0);
        float _4438 = isnan(0.0) ? _1658 : (isnan(_1658) ? 0.0 : max(_1658, 0.0));
        float _1659 = isnan(1.0) ? _4438 : (isnan(_4438) ? 1.0 : min(_4438, 1.0));
        float _1668 = ((((1.0 - _1659) * (_1654 + 2.0)) * exp2(log2(isnan(1.0) ? _4416 : (isnan(_4416) ? 1.0 : min(_4416, 1.0))) * (_1654 + 1.0))) + _1659) * _1542;
        _1676 = _1509;
        _1677 = _1508;
        _1678 = _1507;
        _1679 = _1519;
        _1680 = _1518;
        _1681 = _1517;
        _1682 = _1529;
        _1683 = _1528;
        _1684 = _1527;
        _1685 = _1542;
        _1686 = _1541;
        _1687 = _1540;
        _1688 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1584 : (isnan(_1584) ? 0.0 : max(_1584, 0.0)));
        _1689 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1626 : (isnan(_1626) ? 0.0 : max(_1626, 0.0)));
        _1690 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1668 : (isnan(_1668) ? 0.0 : max(_1668, 0.0)));
    }
    else
    {
        _1676 = _1367;
        _1677 = _1367;
        _1678 = _1367;
        _1679 = _1367;
        _1680 = _1367;
        _1681 = _1367;
        _1682 = _1367;
        _1683 = _1367;
        _1684 = _1367;
        _1685 = _1367;
        _1686 = _1367;
        _1687 = _1367;
        _1688 = 0.0;
        _1689 = 0.0;
        _1690 = 0.0;
    }
    float _1700 = (cbModelParam._m0[1u].x * (_1688 - _1379)) + _1379;
    float _1701 = (cbModelParam._m0[1u].x * (_1689 - _1380)) + _1380;
    float _1702 = (cbModelParam._m0[1u].x * (_1690 - _1381)) + _1381;
    float _1723 = fma(_1702, cbSceneParam._m0[89u].z, fma(_1701, cbSceneParam._m0[89u].y, _1700 * cbSceneParam._m0[89u].x));
    float _1726 = fma(_1702, cbSceneParam._m0[90u].z, fma(_1701, cbSceneParam._m0[90u].y, _1700 * cbSceneParam._m0[90u].x));
    float _1729 = fma(_1702, cbSceneParam._m0[91u].z, fma(_1701, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1700));
    float _1744 = _976 * 0.5;
    float _1745 = _977 * 0.5;
    float _1746 = _978 * 0.5;
    float _1747 = dot(vec4(_1744, _1745, _1746, 1.0), vec4(_1678, _1681, _1684, _1687));
    float _1750 = dot(vec4(_1744, _1745, _1746, 1.0), vec4(_1677, _1680, _1683, _1686));
    float _1753 = dot(vec4(_1744, _1745, _1746, 1.0), vec4(_1676, _1679, _1682, _1685));
    float _1787;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1760 = dot(vec4(_1744, _1745, _1746, 1.0), vec4(_1366, _1370, _1373, _1376));
        float _1764 = dot(vec4(_1744, _1745, _1746, 1.0), vec4(_1368, _1371, _1374, _1377));
        float _1768 = dot(vec4(_1744, _1745, _1746, 1.0), vec4(_1369, _1372, _1375, _1378));
        float _1775 = dot(vec4(cbModelParam._m0[39u]), vec4(_1744, _1745, _1746, 1.0));
        _1787 = dot(vec3(isnan(0.0) ? _1768 : (isnan(_1768) ? 0.0 : max(_1768, 0.0)), isnan(0.0) ? _1764 : (isnan(_1764) ? 0.0 : max(_1764, 0.0)), isnan(0.0) ? _1760 : (isnan(_1760) ? 0.0 : max(_1760, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1775) ? 0.0 : (isnan(0.0) ? _1775 : max(0.0, _1775))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1787 = 1.0;
    }
    float _1798;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1789 = dot(vec4(cbModelParam._m0[40u]), vec4(_1744, _1745, _1746, 1.0));
        _1798 = dot(vec3(isnan(0.0) ? _1747 : (isnan(_1747) ? 0.0 : max(_1747, 0.0)), isnan(0.0) ? _1750 : (isnan(_1750) ? 0.0 : max(_1750, 0.0)), isnan(0.0) ? _1753 : (isnan(_1753) ? 0.0 : max(_1753, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1789) ? 0.0 : (isnan(0.0) ? _1789 : max(0.0, _1789))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1798 = 1.0;
    }
    float _1802 = (_1798 * cbModelParam._m0[1u].x) + (_1787 * (1.0 - cbModelParam._m0[1u].x));
    float _1812 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _808);
    float _1813 = isnan(_1812) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1812 : min(cbModelParam._m0[25u].z, _1812));
    float _1893;
    float _1895;
    float _1897;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1860 = fma(_1037, cbModelParam._m0[13u].z, fma(_1033, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1029)) + cbModelParam._m0[13u].w;
        float _1864 = fma(_1037, cbModelParam._m0[14u].z, fma(_1033, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1029)) + cbModelParam._m0[14u].w;
        float _1868 = fma(_1037, cbModelParam._m0[15u].z, fma(_1033, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1029)) + cbModelParam._m0[15u].w;
        float _1871 = fma(_978, cbModelParam._m0[13u].z, fma(_977, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _976));
        float _1874 = fma(_978, cbModelParam._m0[14u].z, fma(_977, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _976));
        float _1877 = fma(_978, cbModelParam._m0[15u].z, fma(_977, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _976));
        float _1905;
        if (_1871 > 0.0)
        {
            _1905 = abs((1.0 - _1860) / _1871);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1871 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1860 + 1.0) / _1871);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1905 = frontier_phi_17_15_ladder;
        }
        float _2075;
        if (_1874 > 0.0)
        {
            _2075 = abs((1.0 - _1864) / _1874);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1874 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1864 + 1.0) / _1874);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2075 = frontier_phi_26_22_ladder;
        }
        float _2370;
        if (_1877 > 0.0)
        {
            _2370 = abs((1.0 - _1868) / _1877);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1877 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1868 + 1.0) / _1877);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2370 = frontier_phi_38_33_ladder;
        }
        float _2372 = isnan(_2075) ? _1905 : (isnan(_1905) ? _2075 : min(_1905, _2075));
        float _2373 = isnan(_2370) ? _2372 : (isnan(_2372) ? _2370 : min(_2372, _2370));
        float _2377 = (_2373 * _1871) + _1860;
        float _2378 = (_2373 * _1874) + _1864;
        float _2379 = (_2373 * _1877) + _1868;
        float _2380 = _2373 * 9.9999997473787516355514526367188e-05;
        float _2382 = (-1.0) - _2380;
        float _2384 = _2380 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2379 > _2384) || ((_2379 < _2382) || ((_2378 > _2384) || ((_2378 < _2382) || ((_2377 < _2382) || (_2377 > _2384))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2524 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2379, cbModelParam._m0[9u].z, fma(_2378, cbModelParam._m0[9u].y, _2377 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2379, cbModelParam._m0[10u].z, fma(_2378, cbModelParam._m0[10u].y, _2377 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2379, cbModelParam._m0[11u].z, fma(_2378, cbModelParam._m0[11u].y, _2377 * cbModelParam._m0[11u].x))), _1813);
            frontier_phi_16_38_ladder = _2524.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2524.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2524.x * cbModelParam._m0[1u].y;
        }
        _1893 = frontier_phi_16_38_ladder_2;
        _1895 = frontier_phi_16_38_ladder_1;
        _1897 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1881 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_976, _977, _978), _1813);
        _1893 = _1881.x * cbModelParam._m0[1u].y;
        _1895 = _1881.y * cbModelParam._m0[1u].y;
        _1897 = _1881.z * cbModelParam._m0[1u].y;
    }
    float _1901 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _808);
    float _1902 = isnan(_1901) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1901 : min(cbModelParam._m0[25u].w, _1901));
    float _1992;
    float _1994;
    float _1996;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1956 = fma(_1037, cbModelParam._m0[21u].z, fma(_1033, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1029)) + cbModelParam._m0[21u].w;
        float _1960 = fma(_1037, cbModelParam._m0[22u].z, fma(_1033, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1029)) + cbModelParam._m0[22u].w;
        float _1964 = fma(_1037, cbModelParam._m0[23u].z, fma(_1033, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1029)) + cbModelParam._m0[23u].w;
        float _1967 = fma(_978, cbModelParam._m0[21u].z, fma(_977, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _976));
        float _1970 = fma(_978, cbModelParam._m0[22u].z, fma(_977, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _976));
        float _1973 = fma(_978, cbModelParam._m0[23u].z, fma(_977, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _976));
        float _2080;
        if (_1967 > 0.0)
        {
            _2080 = abs((1.0 - _1956) / _1967);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1967 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1956 + 1.0) / _1967);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2080 = frontier_phi_28_24_ladder;
        }
        float _2397;
        if (_1970 > 0.0)
        {
            _2397 = abs((1.0 - _1960) / _1970);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1970 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1960 + 1.0) / _1970);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2397 = frontier_phi_40_35_ladder;
        }
        float _2724;
        if (_1973 > 0.0)
        {
            _2724 = abs((1.0 - _1964) / _1973);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_1973 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_1964 + 1.0) / _1973);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _2724 = frontier_phi_50_47_ladder;
        }
        float _2726 = isnan(_2397) ? _2080 : (isnan(_2080) ? _2397 : min(_2080, _2397));
        float _2727 = isnan(_2724) ? _2726 : (isnan(_2726) ? _2724 : min(_2726, _2724));
        float _2731 = (_2727 * _1967) + _1956;
        float _2732 = (_2727 * _1970) + _1960;
        float _2733 = (_2727 * _1973) + _1964;
        float _2734 = _2727 * 9.9999997473787516355514526367188e-05;
        float _2735 = (-1.0) - _2734;
        float _2737 = _2734 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_2733 > _2737) || ((_2733 < _2735) || ((_2732 > _2737) || ((_2732 < _2735) || ((_2731 < _2735) || (_2731 > _2737))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2851 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2733, cbModelParam._m0[17u].z, fma(_2732, cbModelParam._m0[17u].y, _2731 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2733, cbModelParam._m0[18u].z, fma(_2732, cbModelParam._m0[18u].y, _2731 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2733, cbModelParam._m0[19u].z, fma(_2732, cbModelParam._m0[19u].y, _2731 * cbModelParam._m0[19u].x))), _1902);
            frontier_phi_25_50_ladder = _2851.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _2851.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _2851.x * cbModelParam._m0[1u].z;
        }
        _1992 = frontier_phi_25_50_ladder_2;
        _1994 = frontier_phi_25_50_ladder_1;
        _1996 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _1976 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_976, _977, _978), _1902);
        _1992 = _1976.x * cbModelParam._m0[1u].z;
        _1994 = _1976.y * cbModelParam._m0[1u].z;
        _1996 = _1976.z * cbModelParam._m0[1u].z;
    }
    float _2008 = ((((1.0 - _997) * ((_984 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_997 * _984)) * _968;
    float _2009 = _2008 * ((cbModelParam._m0[1u].w * (_1992 - _1893)) + _1893);
    float _2010 = _2008 * ((cbModelParam._m0[1u].w * (_1994 - _1895)) + _1895);
    float _2011 = _2008 * ((cbModelParam._m0[1u].w * (_1996 - _1897)) + _1897);
    float _2014 = fma(_2011, cbSceneParam._m0[89u].z, fma(_2010, cbSceneParam._m0[89u].y, _2009 * cbSceneParam._m0[89u].x));
    float _2017 = fma(_2011, cbSceneParam._m0[90u].z, fma(_2010, cbSceneParam._m0[90u].y, _2009 * cbSceneParam._m0[90u].x));
    float _2020 = fma(_2011, cbSceneParam._m0[91u].z, fma(_2010, cbSceneParam._m0[91u].y, _2009 * cbSceneParam._m0[91u].x));
    float _2054 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2058 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2062 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2066 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2067 = _2054 / _2066;
    float _2068 = _2058 / _2066;
    float _2069 = _2062 / _2066;
    float _2216;
    float _2217;
    float _2218;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2096 = ((uint(_2069 > cbSceneParam._m0[59u].y) + uint(_2069 > cbSceneParam._m0[59u].x)) + uint(_2069 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2097 = _2096 + 43u;
        uint _2105 = _2096 + 44u;
        uint _2113 = _2096 + 45u;
        uint _2121 = _2096 + 46u;
        float _2132 = fma(_2066, cbSceneParam._m0[_2097].w, fma(_2062, cbSceneParam._m0[_2097].z, fma(_2058, cbSceneParam._m0[_2097].y, _2054 * cbSceneParam._m0[_2097].x)));
        float _2136 = fma(_2066, cbSceneParam._m0[_2105].w, fma(_2062, cbSceneParam._m0[_2105].z, fma(_2058, cbSceneParam._m0[_2105].y, _2054 * cbSceneParam._m0[_2105].x)));
        float _2144 = fma(_2066, cbSceneParam._m0[_2121].w, fma(_2062, cbSceneParam._m0[_2121].z, fma(_2058, cbSceneParam._m0[_2121].y, _2054 * cbSceneParam._m0[_2121].x)));
        float _2149 = cbSceneParam._m0[33u].z * _2144;
        float _2151 = cbSceneParam._m0[33u].w * _2144;
        float _2154 = fma(_2066, cbSceneParam._m0[_2113].w, fma(_2062, cbSceneParam._m0[_2113].z, fma(_2058, cbSceneParam._m0[_2113].y, _2054 * cbSceneParam._m0[_2113].x))) / _2144;
        float _2202 = (cbSceneParam._m0[33u].x - sqrt(((_2068 * _2068) + (_2067 * _2067)) + (_2069 * _2069))) * cbSceneParam._m0[33u].y;
        float _4564 = isnan(0.0) ? _2202 : (isnan(_2202) ? 0.0 : max(_2202, 0.0));
        float _2209 = (isnan(1.0) ? _4564 : (isnan(_4564) ? 1.0 : min(_4564, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2149 + _2132) / _2144, (_2151 + _2136) / _2144), _2154), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2151 + _2132) / _2144, (_2136 - _2149) / _2144), _2154), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2132 - _2149) / _2144, (_2136 - _2151) / _2144), _2154), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2132 - _2151) / _2144, (_2149 + _2136) / _2144), _2154), 0.0)).x), vec4(0.25)));
        _2216 = 1.0 - (_2209 * cbSceneParam._m0[34u].x);
        _2217 = 1.0 - (_2209 * cbSceneParam._m0[34u].y);
        _2218 = 1.0 - (_2209 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2216 = 1.0;
        _2217 = 1.0;
        _2218 = 1.0;
    }
    float _2282;
    float _2284;
    float _2286;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2270 = fma(_2066, cbSceneParam._m0[63u].w, fma(_2062, cbSceneParam._m0[63u].z, fma(_2058, cbSceneParam._m0[63u].y, _2054 * cbSceneParam._m0[63u].x)));
        float _2271 = fma(_2066, cbSceneParam._m0[60u].w, fma(_2062, cbSceneParam._m0[60u].z, fma(_2058, cbSceneParam._m0[60u].y, _2054 * cbSceneParam._m0[60u].x))) / _2270;
        float _2272 = fma(_2066, cbSceneParam._m0[61u].w, fma(_2062, cbSceneParam._m0[61u].z, fma(_2058, cbSceneParam._m0[61u].y, _2054 * cbSceneParam._m0[61u].x))) / _2270;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_2271 >= cbSceneParam._m0[64u].x) && (_2272 >= cbSceneParam._m0[64u].y)) && (_2271 <= cbSceneParam._m0[64u].z)) && (_2272 <= cbSceneParam._m0[64u].w))
        {
            float _2410 = fma(_2066, cbSceneParam._m0[62u].w, fma(_2062, cbSceneParam._m0[62u].z, fma(_2058, cbSceneParam._m0[62u].y, _2054 * cbSceneParam._m0[62u].x))) / _2270;
            float _2414 = isnan(cbSceneParam._m0[41u].w) ? _2410 : (isnan(_2410) ? cbSceneParam._m0[41u].w : max(_2410, cbSceneParam._m0[41u].w));
            float _2457 = (cbSceneParam._m0[33u].x - sqrt(((_2068 * _2068) + (_2067 * _2067)) + (_2069 * _2069))) * cbSceneParam._m0[33u].y;
            float _4580 = isnan(0.0) ? _2457 : (isnan(_2457) ? 0.0 : max(_2457, 0.0));
            float _2464 = (isnan(1.0) ? _4580 : (isnan(_4580) ? 1.0 : min(_4580, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2271, cbSceneParam._m0[33u].w + _2272), _2414), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2271, _2272 - cbSceneParam._m0[33u].z), _2414), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2271 - cbSceneParam._m0[33u].z, _2272 - cbSceneParam._m0[33u].w), _2414), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2271 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2272), _2414), 0.0)).x), vec4(0.25)));
            float _2468 = 1.0 - (_2464 * cbSceneParam._m0[34u].x);
            float _2469 = 1.0 - (_2464 * cbSceneParam._m0[34u].y);
            float _2470 = 1.0 - (_2464 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_2470) ? _2218 : (isnan(_2218) ? _2470 : min(_2218, _2470));
            frontier_phi_37_36_ladder_1 = isnan(_2469) ? _2217 : (isnan(_2217) ? _2469 : min(_2217, _2469));
            frontier_phi_37_36_ladder_2 = isnan(_2468) ? _2216 : (isnan(_2216) ? _2468 : min(_2216, _2468));
        }
        else
        {
            frontier_phi_37_36_ladder = _2218;
            frontier_phi_37_36_ladder_1 = _2217;
            frontier_phi_37_36_ladder_2 = _2216;
        }
        _2282 = frontier_phi_37_36_ladder_2;
        _2284 = frontier_phi_37_36_ladder_1;
        _2286 = frontier_phi_37_36_ladder;
    }
    else
    {
        _2282 = _2216;
        _2284 = _2217;
        _2286 = _2218;
    }
    uvec4 _2291 = floatBitsToUint(cbInstanceData._m0[_250 + 5u]);
    uint _2293 = _2291.x * 14u;
    uint _2294 = _2293 + 13u;
    float _2301 = _968 + (-1.0);
    float _2306 = (cbLight._m0[_2294].x * _2301) + 1.0;
    float _2307 = (cbLight._m0[_2294].y * _2301) + 1.0;
    float _2308 = (cbLight._m0[_2294].z * _2301) + 1.0;
    float _2309 = (cbLight._m0[_2294].w * _2301) + 1.0;
    uint _2310 = _2293 + 5u;
    float _2316 = isnan(1.0) ? _2307 : (isnan(_2307) ? 1.0 : min(_2307, 1.0));
    uint _2320 = _2293 + 4u;
    float _2329 = isnan(1.0) ? _2306 : (isnan(_2306) ? 1.0 : min(_2306, 1.0));
    uint _2333 = _2293 | 1u;
    float _2344 = dot(vec3(cbLight._m0[_2293].xyz), vec3(_805, _806, _807));
    float _2347 = dot(vec3(cbLight._m0[_2333].xyz), vec3(_805, _806, _807));
    float _4616 = isnan(0.0) ? _2344 : (isnan(_2344) ? 0.0 : max(_2344, 0.0));
    float _4627 = isnan(0.0) ? _2347 : (isnan(_2347) ? 0.0 : max(_2347, 0.0));
    float _2352 = (isnan(1.0) ? _4616 : (isnan(_4616) ? 1.0 : min(_4616, 1.0))) * 0.3183098733425140380859375;
    float _2354 = (isnan(1.0) ? _4627 : (isnan(_4627) ? 1.0 : min(_4627, 1.0))) * 0.3183098733425140380859375;
    float _2361 = ((cbLight._m0[_2310].x * _2316) * _2354) + (((cbLight._m0[_2320].x * _2282) * _2329) * _2352);
    float _2362 = ((_2316 * cbLight._m0[_2310].y) * _2354) + (((cbLight._m0[_2320].y * _2284) * _2329) * _2352);
    float _2363 = ((_2316 * cbLight._m0[_2310].z) * _2354) + (((cbLight._m0[_2320].z * _2286) * _2329) * _2352);
    uvec4 _2367 = floatBitsToUint(cbLight._m0[_2293 + 12u]);
    bool _2369 = _2367.x == 0u;
    float _2471;
    float _2473;
    float _2475;
    if (_2369)
    {
        _2471 = _2361;
        _2473 = _2362;
        _2475 = _2363;
    }
    else
    {
        uint _2479 = _2293 + 6u;
        float _2495 = (dot(vec3(cbLight._m0[_2293 + 2u].xyz), vec3(_805, _806, _807)) * 0.5) + 0.5;
        float _2496 = _2495 * _2495;
        float _4638 = isnan(0.0) ? _2496 : (isnan(_2496) ? 0.0 : max(_2496, 0.0));
        float _2497 = isnan(1.0) ? _4638 : (isnan(_4638) ? 1.0 : min(_4638, 1.0));
        float _2498 = isnan(1.0) ? _2308 : (isnan(_2308) ? 1.0 : min(_2308, 1.0));
        _2471 = (((cbLight._m0[_2479].x * 0.3183098733425140380859375) * _2497) * _2498) + _2361;
        _2473 = (((cbLight._m0[_2479].y * 0.3183098733425140380859375) * _2497) * _2498) + _2362;
        _2475 = (((cbLight._m0[_2479].z * 0.3183098733425140380859375) * _2497) * _2498) + _2363;
    }
    bool _2478 = _2367.y == 0u;
    float _2533;
    float _2535;
    float _2537;
    if (_2478)
    {
        _2533 = _2471;
        _2535 = _2473;
        _2537 = _2475;
    }
    else
    {
        uint _2695 = _2293 + 7u;
        float _2711 = (dot(vec3(cbLight._m0[_2293 + 3u].xyz), vec3(_805, _806, _807)) * 0.5) + 0.5;
        float _2712 = _2711 * _2711;
        float _4654 = isnan(0.0) ? _2712 : (isnan(_2712) ? 0.0 : max(_2712, 0.0));
        float _2713 = isnan(1.0) ? _4654 : (isnan(_4654) ? 1.0 : min(_4654, 1.0));
        float _2714 = isnan(1.0) ? _2309 : (isnan(_2309) ? 1.0 : min(_2309, 1.0));
        _2533 = (((cbLight._m0[_2695].x * 0.3183098733425140380859375) * _2713) * _2714) + _2471;
        _2535 = (((cbLight._m0[_2695].y * 0.3183098733425140380859375) * _2713) * _2714) + _2473;
        _2537 = (((cbLight._m0[_2695].z * 0.3183098733425140380859375) * _2713) * _2714) + _2475;
    }
    uint _2540 = _2293 + 8u;
    float _2553 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2293].w)) * _808) * 0.949999988079071044921875);
    float _2554 = _2553 * _2553;
    float _2555 = cbLight._m0[_2293].x + _885;
    float _2556 = cbLight._m0[_2293].y + _886;
    float _2557 = cbLight._m0[_2293].z + _887;
    float _2561 = inversesqrt(dot(vec3(_2555, _2556, _2557), vec3(_2555, _2556, _2557)));
    float _2562 = _2561 * _2555;
    float _2563 = _2561 * _2556;
    float _2564 = _2561 * _2557;
    float _2565 = dot(vec3(_805, _806, _807), vec3(cbLight._m0[_2293].xyz));
    float _4670 = isnan(0.0) ? _2565 : (isnan(_2565) ? 0.0 : max(_2565, 0.0));
    float _2568 = isnan(1.0) ? _4670 : (isnan(_4670) ? 1.0 : min(_4670, 1.0));
    float _4681 = isnan(0.0) ? _969 : (isnan(_969) ? 0.0 : max(_969, 0.0));
    float _2569 = isnan(1.0) ? _4681 : (isnan(_4681) ? 1.0 : min(_4681, 1.0));
    float _2570 = dot(vec3(_805, _806, _807), vec3(_2562, _2563, _2564));
    float _4692 = isnan(0.0) ? _2570 : (isnan(_2570) ? 0.0 : max(_2570, 0.0));
    float _2573 = isnan(1.0) ? _4692 : (isnan(_4692) ? 1.0 : min(_4692, 1.0));
    float _2574 = dot(vec3(cbLight._m0[_2293].xyz), vec3(_2562, _2563, _2564));
    float _4703 = isnan(0.0) ? _2574 : (isnan(_2574) ? 0.0 : max(_2574, 0.0));
    float _2578 = _2554 * _2554;
    float _2582 = ((_2573 * _2573) * (_2578 + (-1.0))) + 1.0;
    float _2593 = (exp2(log2(1.0 - (isnan(1.0) ? _4703 : (isnan(_4703) ? 1.0 : min(_4703, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2594 = 1.0 - _2554;
    float _2605 = (0.5 / (((_2569 * ((_2568 * _2594) + _2554)) + 9.9999999392252902907785028219223e-09) + (((_2569 * _2594) + _2554) * _2568))) * _2568;
    float _4714 = isnan(0.0) ? _2605 : (isnan(_2605) ? 0.0 : max(_2605, 0.0));
    float _2607 = (isnan(1.0) ? _4714 : (isnan(_4714) ? 1.0 : min(_4714, 1.0))) * (_2578 / ((_2582 * _2582) * 3.141590118408203125));
    uint _2621 = _2293 + 9u;
    float _2632 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2333].w)) * _808) * 0.949999988079071044921875);
    float _2633 = _2632 * _2632;
    float _2634 = cbLight._m0[_2333].x + _885;
    float _2635 = cbLight._m0[_2333].y + _886;
    float _2636 = cbLight._m0[_2333].z + _887;
    float _2640 = inversesqrt(dot(vec3(_2634, _2635, _2636), vec3(_2634, _2635, _2636)));
    float _2641 = _2640 * _2634;
    float _2642 = _2640 * _2635;
    float _2643 = _2640 * _2636;
    float _2644 = dot(vec3(_805, _806, _807), vec3(cbLight._m0[_2333].xyz));
    float _4725 = isnan(0.0) ? _2644 : (isnan(_2644) ? 0.0 : max(_2644, 0.0));
    float _2647 = isnan(1.0) ? _4725 : (isnan(_4725) ? 1.0 : min(_4725, 1.0));
    float _2648 = dot(vec3(_805, _806, _807), vec3(_2641, _2642, _2643));
    float _4736 = isnan(0.0) ? _2648 : (isnan(_2648) ? 0.0 : max(_2648, 0.0));
    float _2651 = isnan(1.0) ? _4736 : (isnan(_4736) ? 1.0 : min(_4736, 1.0));
    float _2652 = dot(vec3(cbLight._m0[_2333].xyz), vec3(_2641, _2642, _2643));
    float _4747 = isnan(0.0) ? _2652 : (isnan(_2652) ? 0.0 : max(_2652, 0.0));
    float _2656 = _2633 * _2633;
    float _2660 = ((_2651 * _2651) * (_2656 + (-1.0))) + 1.0;
    float _2669 = (exp2(log2(1.0 - (isnan(1.0) ? _4747 : (isnan(_4747) ? 1.0 : min(_4747, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2670 = 1.0 - _2633;
    float _2680 = (0.5 / (((_2569 * ((_2647 * _2670) + _2633)) + 9.9999999392252902907785028219223e-09) + (((_2569 * _2670) + _2633) * _2647))) * _2647;
    float _4758 = isnan(0.0) ? _2680 : (isnan(_2680) ? 0.0 : max(_2680, 0.0));
    float _2682 = (isnan(1.0) ? _4758 : (isnan(_4758) ? 1.0 : min(_4758, 1.0))) * (_2656 / ((_2660 * _2660) * 3.141590118408203125));
    float _2692 = (((_2669 * cbLight._m0[_2621].x) * _2682) * _2316) + ((((cbLight._m0[_2540].x * _2282) * _2593) * _2607) * _2329);
    float _2693 = (((_2669 * cbLight._m0[_2621].y) * _2682) * _2316) + ((((cbLight._m0[_2540].y * _2284) * _2593) * _2607) * _2329);
    float _2694 = (((_2669 * cbLight._m0[_2621].z) * _2682) * _2316) + ((((cbLight._m0[_2540].z * _2286) * _2593) * _2607) * _2329);
    float _2750;
    float _2752;
    float _2754;
    if (_2369)
    {
        _2750 = _2692;
        _2752 = _2693;
        _2754 = _2694;
    }
    else
    {
        uint _2756 = _2293 + 2u;
        uint _2760 = _2293 + 10u;
        float _2774 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2756].w)) * _808) * 0.949999988079071044921875);
        float _2775 = _2774 * _2774;
        float _2776 = cbLight._m0[_2756].x + _885;
        float _2777 = cbLight._m0[_2756].y + _886;
        float _2778 = cbLight._m0[_2756].z + _887;
        float _2782 = inversesqrt(dot(vec3(_2776, _2777, _2778), vec3(_2776, _2777, _2778)));
        float _2783 = _2782 * _2776;
        float _2784 = _2782 * _2777;
        float _2785 = _2782 * _2778;
        float _2786 = dot(vec3(_805, _806, _807), vec3(cbLight._m0[_2756].xyz));
        float _4769 = isnan(0.0) ? _2786 : (isnan(_2786) ? 0.0 : max(_2786, 0.0));
        float _2789 = isnan(1.0) ? _4769 : (isnan(_4769) ? 1.0 : min(_4769, 1.0));
        float _2790 = dot(vec3(_805, _806, _807), vec3(_2783, _2784, _2785));
        float _4780 = isnan(0.0) ? _2790 : (isnan(_2790) ? 0.0 : max(_2790, 0.0));
        float _2793 = isnan(1.0) ? _4780 : (isnan(_4780) ? 1.0 : min(_4780, 1.0));
        float _2794 = dot(vec3(cbLight._m0[_2756].xyz), vec3(_2783, _2784, _2785));
        float _4791 = isnan(0.0) ? _2794 : (isnan(_2794) ? 0.0 : max(_2794, 0.0));
        float _2798 = _2775 * _2775;
        float _2802 = ((_2793 * _2793) * (_2798 + (-1.0))) + 1.0;
        float _2811 = (exp2(log2(1.0 - (isnan(1.0) ? _4791 : (isnan(_4791) ? 1.0 : min(_4791, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2812 = 1.0 - _2775;
        float _2822 = (0.5 / (((_2569 * ((_2789 * _2812) + _2775)) + 9.9999999392252902907785028219223e-09) + (((_2569 * _2812) + _2775) * _2789))) * _2789;
        float _4802 = isnan(0.0) ? _2822 : (isnan(_2822) ? 0.0 : max(_2822, 0.0));
        float _2824 = (isnan(1.0) ? _4802 : (isnan(_4802) ? 1.0 : min(_4802, 1.0))) * (_2798 / ((_2802 * _2802) * 3.141590118408203125));
        float _2825 = isnan(1.0) ? _2308 : (isnan(_2308) ? 1.0 : min(_2308, 1.0));
        _2750 = (((_2811 * cbLight._m0[_2760].x) * _2824) * _2825) + _2692;
        _2752 = (((_2811 * cbLight._m0[_2760].y) * _2824) * _2825) + _2693;
        _2754 = (((_2811 * cbLight._m0[_2760].z) * _2824) * _2825) + _2694;
    }
    float _2856;
    float _2858;
    float _2860;
    if (_2478)
    {
        _2856 = _2750;
        _2858 = _2752;
        _2860 = _2754;
    }
    else
    {
        uint _2867 = _2293 + 3u;
        uint _2871 = _2293 + 11u;
        float _2885 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2867].w)) * _808) * 0.949999988079071044921875);
        float _2886 = _2885 * _2885;
        float _2887 = cbLight._m0[_2867].x + _885;
        float _2888 = cbLight._m0[_2867].y + _886;
        float _2889 = cbLight._m0[_2867].z + _887;
        float _2893 = inversesqrt(dot(vec3(_2887, _2888, _2889), vec3(_2887, _2888, _2889)));
        float _2894 = _2893 * _2887;
        float _2895 = _2893 * _2888;
        float _2896 = _2893 * _2889;
        float _2897 = dot(vec3(_805, _806, _807), vec3(cbLight._m0[_2867].xyz));
        float _4818 = isnan(0.0) ? _2897 : (isnan(_2897) ? 0.0 : max(_2897, 0.0));
        float _2900 = isnan(1.0) ? _4818 : (isnan(_4818) ? 1.0 : min(_4818, 1.0));
        float _2901 = dot(vec3(_805, _806, _807), vec3(_2894, _2895, _2896));
        float _4829 = isnan(0.0) ? _2901 : (isnan(_2901) ? 0.0 : max(_2901, 0.0));
        float _2904 = isnan(1.0) ? _4829 : (isnan(_4829) ? 1.0 : min(_4829, 1.0));
        float _2905 = dot(vec3(cbLight._m0[_2867].xyz), vec3(_2894, _2895, _2896));
        float _4840 = isnan(0.0) ? _2905 : (isnan(_2905) ? 0.0 : max(_2905, 0.0));
        float _2909 = _2886 * _2886;
        float _2913 = ((_2904 * _2904) * (_2909 + (-1.0))) + 1.0;
        float _2922 = (exp2(log2(1.0 - (isnan(1.0) ? _4840 : (isnan(_4840) ? 1.0 : min(_4840, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2923 = 1.0 - _2886;
        float _2933 = (0.5 / (((_2569 * ((_2900 * _2923) + _2886)) + 9.9999999392252902907785028219223e-09) + (((_2569 * _2923) + _2886) * _2900))) * _2900;
        float _4851 = isnan(0.0) ? _2933 : (isnan(_2933) ? 0.0 : max(_2933, 0.0));
        float _2935 = (isnan(1.0) ? _4851 : (isnan(_4851) ? 1.0 : min(_4851, 1.0))) * (_2909 / ((_2913 * _2913) * 3.141590118408203125));
        float _2936 = isnan(1.0) ? _2309 : (isnan(_2309) ? 1.0 : min(_2309, 1.0));
        _2856 = (((_2922 * cbLight._m0[_2871].x) * _2935) * _2936) + _2750;
        _2858 = (((_2922 * cbLight._m0[_2871].y) * _2935) * _2936) + _2752;
        _2860 = (((_2922 * cbLight._m0[_2871].z) * _2935) * _2936) + _2754;
    }
    float _3002;
    float _3004;
    float _3006;
    float _3008;
    float _3010;
    float _3012;
    if (_2291.y == 0u)
    {
        uvec4 _2957 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2958 = _2957.x;
        uint _2969 = uint((float(_2957.y) * floor(float(uint(cbSceneParam._m0[85u].y * _906) / _2958))) + floor(float(uint(cbSceneParam._m0[85u].x * _905) / _2958)));
        float _2979 = (log2(_2069 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2980 = isnan(0.0) ? _2979 : (isnan(_2979) ? 0.0 : max(_2979, 0.0));
        uint _2983 = uint(isnan(14.0) ? _2980 : (isnan(_2980) ? 14.0 : min(_2980, 14.0)));
        uvec4 _2988 = texelFetch(g_lightClusterGridBuffer, int(((_2983 << 2u) + (_2969 << 6u)) >> 2u));
        uint _2989 = _2988.x;
        uint _2990 = _2957.z;
        float _3069;
        float _3071;
        float _3073;
        float _3075;
        float _3077;
        float _3079;
        if (((((1u << ((_2990 >> 4u) & 15u)) + 4294967295u) & _2989) == 0u) || ((_2990 & 240u) == 0u))
        {
            _3069 = 0.0;
            _3071 = 0.0;
            _3073 = 0.0;
            _3075 = 0.0;
            _3077 = 0.0;
            _3079 = 0.0;
        }
        else
        {
            float _3070;
            float _3072;
            float _3074;
            float _3076;
            float _3078;
            float _3080;
            float _3222 = 0.0;
            float _3223 = 0.0;
            float _3224 = 0.0;
            float _3225 = 0.0;
            float _3226 = 0.0;
            float _3227 = 0.0;
            uint _3228 = 0u;
            uint _3237;
            bool _3238;
            for (;;)
            {
                _3237 = texelFetch(g_lightClassification, int((((_2983 << 5u) + (_2969 << 9u)) + (_3228 << 2u)) >> 2u)).x;
                _3238 = _3237 == 0u;
                float frontier_phi_71_pred;
                float frontier_phi_71_pred_1;
                float frontier_phi_71_pred_2;
                float frontier_phi_71_pred_3;
                float frontier_phi_71_pred_4;
                float frontier_phi_71_pred_5;
                if (_3238)
                {
                    frontier_phi_71_pred = _3227;
                    frontier_phi_71_pred_1 = _3226;
                    frontier_phi_71_pred_2 = _3225;
                    frontier_phi_71_pred_3 = _3224;
                    frontier_phi_71_pred_4 = _3223;
                    frontier_phi_71_pred_5 = _3222;
                }
                else
                {
                    float _3367;
                    float _3368;
                    float _3369;
                    float _3370;
                    float _3371;
                    float _3372;
                    uint _3373;
                    _3367 = _3222;
                    _3368 = _3223;
                    _3369 = _3224;
                    _3370 = _3225;
                    _3371 = _3226;
                    _3372 = _3227;
                    _3373 = _3237;
                    float _3294;
                    float _3295;
                    float _3296;
                    float _3297;
                    float _3298;
                    float _3299;
                    for (;;)
                    {
                        uint _3377 = uint(findLSB(_3373)) + (_3228 << 5u);
                        uint _3374 = (_3373 + 4294967295u) & _3373;
                        uint _3379 = _3377 * 48u;
                        vec4 _3393 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3379)).x, texelFetch(g_PointLightRenderingBuffer, int(_3379 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3379 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3379 + 3u)).x));
                        uint _3399 = (_3377 * 48u) + 4u;
                        vec4 _3412 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3399)).x, texelFetch(g_PointLightRenderingBuffer, int(_3399 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3399 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3399 + 3u)).x));
                        uint _3418 = (_3377 * 48u) + 8u;
                        vec3 _3429 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3418)).x, texelFetch(g_PointLightRenderingBuffer, int(_3418 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3418 + 2u)).x));
                        float _3433 = _3393.x - _2067;
                        float _3434 = _3393.y - _2068;
                        float _3435 = _3393.z - _2069;
                        float _3436 = dot(vec3(_3433, _3434, _3435), vec3(_3433, _3434, _3435));
                        float _3439 = inversesqrt(_3436);
                        float _3440 = _3439 * _3433;
                        float _3441 = _3439 * _3434;
                        float _3442 = _3439 * _3435;
                        float _3443 = dot(vec3(_924, _927, _930), vec3(_3440, _3441, _3442));
                        float _3448 = 1.0 - (_3436 * _3393.w);
                        float _4877 = isnan(0.0) ? _3448 : (isnan(_3448) ? 0.0 : max(_3448, 0.0));
                        float _3449 = isnan(1.0) ? _4877 : (isnan(_4877) ? 1.0 : min(_4877, 1.0));
                        float _3450 = sqrt(_3436) * _3412.w;
                        float _3453 = 1.39999997615814208984375 / (_3450 + 1.39999997615814208984375);
                        float _3454 = _3453 * _3453;
                        float _3457 = ((1.0 - _3454) * _3443) + _3454;
                        float _3460 = _3450 * _3450;
                        float _3464 = ((isnan(0.0) ? _3457 : (isnan(_3457) ? 0.0 : max(_3457, 0.0))) * _3449) / ((_3460 * 0.699999988079071044921875) + 1.0);
                        float _3468 = (-0.0) - _2067;
                        float _3469 = (-0.0) - _2068;
                        float _3470 = (-0.0) - _2069;
                        float _3474 = inversesqrt(dot(vec3(_3468, _3469, _3470), vec3(_3468, _3469, _3470)));
                        float _3475 = _3474 * _3468;
                        float _3476 = _3474 * _3469;
                        float _3477 = _3474 * _3470;
                        float _3484 = exp2(log2(1.0 / ((_3460 * 3.5) + 5.0)) * 0.25);
                        float _3485 = 1.0 - _984;
                        float _3492 = sqrt(1.0 - ((1.0 - (_3485 * _3485)) * (1.0 - (_3484 * _3484))));
                        float _3493 = _3492 * _3492;
                        float _3494 = _3493 * _3493;
                        float _3495 = _3475 + _3440;
                        float _3496 = _3476 + _3441;
                        float _3497 = _3477 + _3442;
                        float _3501 = inversesqrt(dot(vec3(_3495, _3496, _3497), vec3(_3495, _3496, _3497)));
                        float _3505 = dot(vec3(_924, _927, _930), vec3(_3475, _3476, _3477));
                        float _4893 = isnan(0.0) ? _3505 : (isnan(_3505) ? 0.0 : max(_3505, 0.0));
                        float _3508 = isnan(1.0) ? _4893 : (isnan(_4893) ? 1.0 : min(_4893, 1.0));
                        float _3509 = dot(vec3(_924, _927, _930), vec3(_3501 * _3495, _3501 * _3496, _3501 * _3497));
                        float _4904 = isnan(0.0) ? _3509 : (isnan(_3509) ? 0.0 : max(_3509, 0.0));
                        float _3512 = isnan(1.0) ? _4904 : (isnan(_4904) ? 1.0 : min(_4904, 1.0));
                        float _3516 = ((_3512 * _3512) * (_3494 + (-1.0))) + 1.0;
                        float _3517 = _3453 * _3493;
                        float _3518 = _3517 * _3517;
                        float _3521 = ((1.0 - _3518) * _3443) + _3518;
                        float _4915 = isnan(0.0) ? _3521 : (isnan(_3521) ? 0.0 : max(_3521, 0.0));
                        float _3522 = isnan(1.0) ? _4915 : (isnan(_4915) ? 1.0 : min(_4915, 1.0));
                        float _3523 = 1.0 - _3493;
                        float _3533 = (0.5 / (((_3522 * ((_3508 * _3523) + _3493)) + 9.9999999392252902907785028219223e-09) + (((_3522 * _3523) + _3493) * _3508))) * _3522;
                        float _4926 = isnan(0.0) ? _3533 : (isnan(_3533) ? 0.0 : max(_3533, 0.0));
                        float _3544 = (((_3494 * 3.1415927410125732421875) * (isnan(1.0) ? _4926 : (isnan(_4926) ? 1.0 : min(_4926, 1.0)))) / ((_3516 * _3516) * ((_3460 * 2.1991131305694580078125) + 3.141590118408203125))) * _3449;
                        _3297 = (_3464 * _3412.x) + _3370;
                        _3298 = (_3464 * _3412.y) + _3371;
                        _3299 = (_3464 * _3412.z) + _3372;
                        _3294 = (_3544 * _3429.x) + _3367;
                        _3295 = (_3544 * _3429.y) + _3368;
                        _3296 = (_3544 * _3429.z) + _3369;
                        if (_3374 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3367 = _3294;
                            _3368 = _3295;
                            _3369 = _3296;
                            _3370 = _3297;
                            _3371 = _3298;
                            _3372 = _3299;
                            _3373 = _3374;
                        }
                    }
                    frontier_phi_71_pred = _3299;
                    frontier_phi_71_pred_1 = _3298;
                    frontier_phi_71_pred_2 = _3297;
                    frontier_phi_71_pred_3 = _3296;
                    frontier_phi_71_pred_4 = _3295;
                    frontier_phi_71_pred_5 = _3294;
                }
                _3080 = frontier_phi_71_pred;
                _3078 = frontier_phi_71_pred_1;
                _3076 = frontier_phi_71_pred_2;
                _3074 = frontier_phi_71_pred_3;
                _3072 = frontier_phi_71_pred_4;
                _3070 = frontier_phi_71_pred_5;
                uint _3229 = _3228 + 1u;
                if (_3229 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3222 = _3070;
                    _3223 = _3072;
                    _3224 = _3074;
                    _3225 = _3076;
                    _3226 = _3078;
                    _3227 = _3080;
                    _3228 = _3229;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3069 = _3070;
            _3071 = _3072;
            _3073 = _3074;
            _3075 = _3076;
            _3077 = _3078;
            _3079 = _3080;
        }
        uvec4 _3083 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3084 = _3083.z;
        uint _3086 = (_3084 >> 8u) & 15u;
        float _3190;
        float _3192;
        float _3194;
        float _3196;
        float _3198;
        float _3200;
        if (((4294967295u << _3086) & _2989) == 0u)
        {
            _3190 = _3069;
            _3192 = _3071;
            _3194 = _3073;
            _3196 = _3075;
            _3198 = _3077;
            _3200 = _3079;
        }
        else
        {
            float _3215 = inversesqrt(dot(vec3(_2067, _2068, _2069), vec3(_2067, _2068, _2069)));
            float _3216 = _3215 * _2067;
            float _3217 = _3215 * _2068;
            float _3218 = _3215 * _2069;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_3086 < ((_3084 >> 12u) & 15u))
            {
                float _3191;
                float _3193;
                float _3195;
                float _3197;
                float _3199;
                float _3201;
                float _3350 = _3069;
                float _3351 = _3071;
                float _3352 = _3073;
                float _3353 = _3075;
                float _3354 = _3077;
                float _3355 = _3079;
                uint _3356 = _3086;
                uint _3365;
                bool _3366;
                for (;;)
                {
                    _3365 = texelFetch(g_lightClassification, int((((_2983 << 5u) + (_2969 << 9u)) + (_3356 << 2u)) >> 2u)).x;
                    _3366 = _3365 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    float frontier_phi_82_pred_3;
                    float frontier_phi_82_pred_4;
                    float frontier_phi_82_pred_5;
                    if (_3366)
                    {
                        frontier_phi_82_pred = _3355;
                        frontier_phi_82_pred_1 = _3354;
                        frontier_phi_82_pred_2 = _3353;
                        frontier_phi_82_pred_3 = _3352;
                        frontier_phi_82_pred_4 = _3351;
                        frontier_phi_82_pred_5 = _3350;
                    }
                    else
                    {
                        float _3558;
                        float _3559;
                        float _3560;
                        float _3561;
                        float _3562;
                        float _3563;
                        float _3851;
                        float _3852;
                        float _3853;
                        float _3854;
                        float _3855;
                        float _3856;
                        float _3571 = _3350;
                        float _3572 = _3351;
                        float _3573 = _3352;
                        float _3574 = _3353;
                        float _3575 = _3354;
                        float _3576 = _3355;
                        uint _3577 = _3365;
                        uint _3578;
                        vec4 _3603;
                        float _3604;
                        vec4 _3619;
                        vec3 _3631;
                        vec4 _3646;
                        vec4 _3661;
                        float _3707;
                        bool _3708;
                        for (;;)
                        {
                            uint _3588 = ((_3356 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3577));
                            _3578 = (_3577 + 4294967295u) & _3577;
                            uint _3590 = _3588 * 40u;
                            _3603 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3590)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3590 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3590 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3590 + 3u)).x));
                            _3604 = _3603.w;
                            uint _3606 = (_3588 * 40u) + 4u;
                            _3619 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3606)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3606 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3606 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3606 + 3u)).x));
                            uint _3621 = (_3588 * 40u) + 8u;
                            _3631 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3621)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3621 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3621 + 2u)).x));
                            uint _3633 = (_3588 * 40u) + 16u;
                            _3646 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3633)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3633 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3633 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3633 + 3u)).x));
                            uint _3648 = (_3588 * 40u) + 20u;
                            _3661 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3648)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3648 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3648 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3648 + 3u)).x));
                            uint _3663 = (_3588 * 40u) + 24u;
                            vec4 _3676 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3663)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3663 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3663 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3663 + 3u)).x));
                            uint _3682 = (_3588 * 40u) + 28u;
                            vec4 _3695 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3682)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3682 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3682 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3682 + 3u)).x));
                            _3707 = fma(_2069, _3695.z, fma(_2068, _3695.y, _3695.x * _2067)) + _3695.w;
                            _3708 = !((fma(_2069, _3676.z, fma(_2068, _3676.y, _3676.x * _2067)) + _3676.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_3708)
                            {
                                float _3735 = _3603.x - _2067;
                                float _3736 = _3603.y - _2068;
                                float _3737 = _3603.z - _2069;
                                float _3738 = dot(vec3(_3735, _3736, _3737), vec3(_3735, _3736, _3737));
                                float _3741 = inversesqrt(_3738);
                                float _3742 = _3741 * _3735;
                                float _3743 = _3741 * _3736;
                                float _3744 = _3741 * _3737;
                                float _3748 = 1.0 - (_3738 / (_3604 * _3604));
                                float _4937 = isnan(0.0) ? _3748 : (isnan(_3748) ? 0.0 : max(_3748, 0.0));
                                float _3749 = isnan(1.0) ? _4937 : (isnan(_4937) ? 1.0 : min(_4937, 1.0));
                                float _3753 = sqrt(_3738) * _3619.w;
                                float _3755 = 1.39999997615814208984375 / (_3753 + 1.39999997615814208984375);
                                float _3756 = _3755 * _3755;
                                float _3759 = ((1.0 - _3756) * dot(vec3(_3742, _3743, _3744), vec3(_924, _927, _930))) + _3756;
                                float _3762 = _3753 * _3753;
                                float _3766 = (fma(_2069, _3646.z, fma(_2068, _3646.y, _3646.x * _2067)) + _3646.w) / _3707;
                                float _3767 = (fma(_2069, _3661.z, fma(_2068, _3661.y, _3661.x * _2067)) + _3661.w) / _3707;
                                float _3771 = 1.0 - dot(vec2(_3766, _3767), vec2(_3766, _3767));
                                float _4953 = isnan(0.0) ? _3771 : (isnan(_3771) ? 0.0 : max(_3771, 0.0));
                                float _3772 = isnan(1.0) ? _4953 : (isnan(_4953) ? 1.0 : min(_4953, 1.0));
                                float _3773 = _3772 * (((isnan(0.0) ? _3759 : (isnan(_3759) ? 0.0 : max(_3759, 0.0))) * _3749) / ((_3762 * 0.699999988079071044921875) + 1.0));
                                float _3785 = exp2(log2(1.0 / ((_3762 * 3.5) + 5.0)) * 0.25);
                                float _3786 = 1.0 - _984;
                                float _3793 = sqrt(1.0 - ((1.0 - (_3786 * _3786)) * (1.0 - (_3785 * _3785))));
                                float _3794 = _3793 * _3793;
                                float _3795 = _3794 * _3794;
                                float _3796 = _3742 - _3216;
                                float _3797 = _3743 - _3217;
                                float _3798 = _3744 - _3218;
                                float _3802 = inversesqrt(dot(vec3(_3796, _3797, _3798), vec3(_3796, _3797, _3798)));
                                float _3806 = dot(vec3(_924, _927, _930), vec3((-0.0) - _3216, (-0.0) - _3217, (-0.0) - _3218));
                                float _4964 = isnan(0.0) ? _3806 : (isnan(_3806) ? 0.0 : max(_3806, 0.0));
                                float _3809 = isnan(1.0) ? _4964 : (isnan(_4964) ? 1.0 : min(_4964, 1.0));
                                float _3810 = dot(vec3(_924, _927, _930), vec3(_3802 * _3796, _3802 * _3797, _3802 * _3798));
                                float _4975 = isnan(0.0) ? _3810 : (isnan(_3810) ? 0.0 : max(_3810, 0.0));
                                float _3813 = isnan(1.0) ? _4975 : (isnan(_4975) ? 1.0 : min(_4975, 1.0));
                                float _3817 = ((_3813 * _3813) * (_3795 + (-1.0))) + 1.0;
                                float _3818 = _3755 * _3794;
                                float _3819 = _3818 * _3818;
                                float _3825 = ((1.0 - _3819) * dot(vec3(_924, _927, _930), vec3(_3742, _3743, _3744))) + _3819;
                                float _4986 = isnan(0.0) ? _3825 : (isnan(_3825) ? 0.0 : max(_3825, 0.0));
                                float _3826 = isnan(1.0) ? _4986 : (isnan(_4986) ? 1.0 : min(_4986, 1.0));
                                float _3827 = 1.0 - _3794;
                                float _3837 = (0.5 / (((_3826 * ((_3809 * _3827) + _3794)) + 9.9999999392252902907785028219223e-09) + (((_3826 * _3827) + _3794) * _3809))) * _3826;
                                float _4997 = isnan(0.0) ? _3837 : (isnan(_3837) ? 0.0 : max(_3837, 0.0));
                                float _3847 = (_3772 * _3749) * (((_3795 * 3.1415927410125732421875) * (isnan(1.0) ? _4997 : (isnan(_4997) ? 1.0 : min(_4997, 1.0)))) / ((_3817 * _3817) * ((_3762 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_88_pred = _3773 * _3619.z;
                                frontier_phi_88_pred_1 = _3773 * _3619.y;
                                frontier_phi_88_pred_2 = _3773 * _3619.x;
                                frontier_phi_88_pred_3 = _3847 * _3631.z;
                                frontier_phi_88_pred_4 = _3847 * _3631.y;
                                frontier_phi_88_pred_5 = _3847 * _3631.x;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _3856 = frontier_phi_88_pred;
                            _3855 = frontier_phi_88_pred_1;
                            _3854 = frontier_phi_88_pred_2;
                            _3853 = frontier_phi_88_pred_3;
                            _3852 = frontier_phi_88_pred_4;
                            _3851 = frontier_phi_88_pred_5;
                            _3561 = _3854 + _3574;
                            _3562 = _3855 + _3575;
                            _3563 = _3856 + _3576;
                            _3558 = _3851 + _3571;
                            _3559 = _3852 + _3572;
                            _3560 = _3853 + _3573;
                            if (_3578 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3571 = _3558;
                                _3572 = _3559;
                                _3573 = _3560;
                                _3574 = _3561;
                                _3575 = _3562;
                                _3576 = _3563;
                                _3577 = _3578;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _3563;
                        frontier_phi_82_pred_1 = _3562;
                        frontier_phi_82_pred_2 = _3561;
                        frontier_phi_82_pred_3 = _3560;
                        frontier_phi_82_pred_4 = _3559;
                        frontier_phi_82_pred_5 = _3558;
                    }
                    _3201 = frontier_phi_82_pred;
                    _3199 = frontier_phi_82_pred_1;
                    _3197 = frontier_phi_82_pred_2;
                    _3195 = frontier_phi_82_pred_3;
                    _3193 = frontier_phi_82_pred_4;
                    _3191 = frontier_phi_82_pred_5;
                    uint _3357 = _3356 + 1u;
                    if (_3357 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3350 = _3191;
                        _3351 = _3193;
                        _3352 = _3195;
                        _3353 = _3197;
                        _3354 = _3199;
                        _3355 = _3201;
                        _3356 = _3357;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _3197;
                frontier_phi_63_64_ladder_1 = _3201;
                frontier_phi_63_64_ladder_2 = _3199;
                frontier_phi_63_64_ladder_3 = _3195;
                frontier_phi_63_64_ladder_4 = _3193;
                frontier_phi_63_64_ladder_5 = _3191;
            }
            else
            {
                frontier_phi_63_64_ladder = _3075;
                frontier_phi_63_64_ladder_1 = _3079;
                frontier_phi_63_64_ladder_2 = _3077;
                frontier_phi_63_64_ladder_3 = _3073;
                frontier_phi_63_64_ladder_4 = _3071;
                frontier_phi_63_64_ladder_5 = _3069;
            }
            _3190 = frontier_phi_63_64_ladder_5;
            _3192 = frontier_phi_63_64_ladder_4;
            _3194 = frontier_phi_63_64_ladder_3;
            _3196 = frontier_phi_63_64_ladder;
            _3198 = frontier_phi_63_64_ladder_2;
            _3200 = frontier_phi_63_64_ladder_1;
        }
        float _3205 = isnan(1.0) ? _968 : (isnan(_968) ? 1.0 : min(_968, 1.0));
        _3002 = (_3205 * _3196) + _2533;
        _3004 = (_3205 * _3198) + _2535;
        _3006 = (_3205 * _3200) + _2537;
        _3008 = ((_3190 * 0.039999999105930328369140625) * _3205) + _2856;
        _3010 = ((_3192 * 0.039999999105930328369140625) * _3205) + _2858;
        _3012 = ((_3194 * 0.039999999105930328369140625) * _3205) + _2860;
    }
    else
    {
        _3002 = _2533;
        _3004 = _2535;
        _3006 = _2537;
        _3008 = _2856;
        _3010 = _2858;
        _3012 = _2860;
    }
    float _5013 = isnan(0.0) ? _953 : (isnan(_953) ? 0.0 : max(_953, 0.0));
    float _5024 = isnan(0.0) ? _954 : (isnan(_954) ? 0.0 : max(_954, 0.0));
    float _5035 = isnan(0.0) ? _955 : (isnan(_955) ? 0.0 : max(_955, 0.0));
    float _3029 = ((isnan(1.0) ? _5013 : (isnan(_5013) ? 1.0 : min(_5013, 1.0))) * (_3002 + ((isnan(0.0) ? _1723 : (isnan(_1723) ? 0.0 : max(_1723, 0.0))) * _968))) + ((_3008 + ((isnan(0.0) ? _2014 : (isnan(_2014) ? 0.0 : max(_2014, 0.0))) * _1802)) * cbPerFrame._m0[3u].x);
    float _3030 = ((isnan(1.0) ? _5024 : (isnan(_5024) ? 1.0 : min(_5024, 1.0))) * (_3004 + ((isnan(0.0) ? _1726 : (isnan(_1726) ? 0.0 : max(_1726, 0.0))) * _968))) + ((_3010 + ((isnan(0.0) ? _2017 : (isnan(_2017) ? 0.0 : max(_2017, 0.0))) * _1802)) * cbPerFrame._m0[3u].x);
    float _3031 = ((isnan(1.0) ? _5035 : (isnan(_5035) ? 1.0 : min(_5035, 1.0))) * (_3006 + ((isnan(0.0) ? _1729 : (isnan(_1729) ? 0.0 : max(_1729, 0.0))) * _968))) + ((_3012 + ((isnan(0.0) ? _2020 : (isnan(_2020) ? 0.0 : max(_2020, 0.0))) * _1802)) * cbPerFrame._m0[3u].x);
    uint _3032 = _250 + 6u;
    float _3040 = _905 / cbSceneParam._m0[86u].x;
    float _3041 = _906 / cbSceneParam._m0[86u].y;
    vec4 _3055 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3040, _3041, (log2((isnan(cbSceneParam._m0[77u].w) ? _826 : (isnan(_826) ? cbSceneParam._m0[77u].w : min(_826, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3057 = _3055.x;
    float _3058 = _3055.y;
    float _3059 = _3055.z;
    float _3060 = _3055.w;
    float _3132;
    float _3134;
    float _3136;
    float _3138;
    if (_826 > cbSceneParam._m0[78u].w)
    {
        float _3094 = isnan(_826) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _826 : min(cbSceneParam._m0[80u].w, _826));
        float _3095 = _3094 / _826;
        float _3106 = _3095 * _878;
        float _3107 = _879 * _3095;
        float _3108 = (-0.0) - _3107;
        float _3110 = _3095 * _880;
        float _3112 = (cbSceneParam._m0[77u].w * _3108) / _3094;
        float _3113 = _3112 + cbSceneParam._m0[79u].w;
        float _3114 = cbSceneParam._m0[79u].w - _3107;
        float _3120 = sqrt(((_3106 * _3106) + (_3107 * _3107)) + (_3110 * _3110));
        float _3123 = (1.0 - (cbSceneParam._m0[77u].w / _3094)) * _3120;
        float _3128 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3130 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3307;
        if (abs((_3108 - _3112) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3307 = ((((_3113 > 0.0) ? exp2(_3128 * _3113) : (2.0 - exp2(_3130 * _3113))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3123;
        }
        else
        {
            float _3251 = 1.0 / cbSceneParam._m0[80u].x;
            float _3252 = isnan(_3114) ? _3113 : (isnan(_3113) ? _3114 : max(_3113, _3114));
            float _3253 = isnan(_3114) ? _3113 : (isnan(_3113) ? _3114 : min(_3113, _3114));
            float _3262 = isnan(0.0) ? _3252 : (isnan(_3252) ? 0.0 : min(_3252, 0.0));
            float _3263 = isnan(0.0) ? _3253 : (isnan(_3253) ? 0.0 : min(_3253, 0.0));
            _3307 = ((abs(_3120 / _3108) * cbSceneParam._m0[80u].y) * ((((_3262 - _3263) * 2.0) - ((exp2(_3128 * (isnan(0.0) ? _3252 : (isnan(_3252) ? 0.0 : max(_3252, 0.0)))) - exp2(_3128 * (isnan(0.0) ? _3253 : (isnan(_3253) ? 0.0 : max(_3253, 0.0))))) * _3251)) - ((exp2(_3130 * _3262) - exp2(_3130 * _3263)) * _3251))) + (_3123 * cbSceneParam._m0[80u].z);
        }
        vec4 _3309 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3040, _3041, 1.0), 0.0);
        float _3318 = exp2((_3307 * (-1.44269502162933349609375)) * (1.0 - _3309.w));
        float _3319 = log2(_3318);
        float _3335 = log2(_3060);
        _3132 = (exp2(_3335 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3319 * cbSceneParam._m0[78u].x)) * _3309.x) / cbSceneParam._m0[78u].x)) + _3057;
        _3134 = (exp2(_3335 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3319 * cbSceneParam._m0[78u].y)) * _3309.y) / cbSceneParam._m0[78u].y)) + _3058;
        _3136 = (exp2(_3335 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3319 * cbSceneParam._m0[78u].z)) * _3309.z) / cbSceneParam._m0[78u].z)) + _3059;
        _3138 = _3318 * _3060;
    }
    else
    {
        _3132 = _3057;
        _3134 = _3058;
        _3136 = _3059;
        _3138 = _3060;
    }
    bool _3345;
    vec4 _3148;
    vec4 _3170;
    float _3172;
    float _3176;
    float _3177;
    float _3178;
    float _3179;
    bool _3189;
    for (;;)
    {
        _3148 = cbMatDynParam._m0[0u];
        float _3150 = roundEven(_3148.y);
        bool _3151 = _3150 == 3.0;
        float _3152 = log2(_3138);
        float _3159 = exp2(_3152 * cbSceneParam._m0[78u].x) * _3029;
        float _3160 = exp2(_3152 * cbSceneParam._m0[78u].y) * _3030;
        float _3161 = exp2(_3152 * cbSceneParam._m0[78u].z) * _3031;
        float _3168 = _894 + (-0.5);
        _3170 = cbMtdParam._m0[1u];
        _3172 = _3170.y * _3168;
        float _3175 = (_3150 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3176 = _3175 * (_3151 ? _3159 : (_3159 + (cbSceneParam._m0[72u].w * _3132)));
        _3177 = _3175 * (_3151 ? _3160 : (_3160 + (cbSceneParam._m0[72u].w * _3134)));
        _3178 = _3175 * (_3151 ? _3161 : (_3161 + (cbSceneParam._m0[72u].w * _3136)));
        _3179 = _3168 * 0.999000012874603271484375;
        _3189 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3189)
        {
            if ((cbInstanceData._m0[_250 + 7u].x + _3179) < 0.5)
            {
                _3345 = true;
                break;
            }
        }
        uint _3286 = _943 + uint(_3148.w);
        if ((cbInstanceData._m0[_3286].w < 1.0) && ((cbInstanceData._m0[_3286].w + _3179) < 0.5))
        {
            _3345 = true;
            break;
        }
        if ((_3172 + 1.0) < _3170.x)
        {
            _3345 = true;
            break;
        }
        _3345 = false;
        break;
    }
    float _3549;
    if (_3345)
    {
        discard_state = true;
        _3549 = 0.0;
    }
    else
    {
        _3549 = cbInstanceData._m0[_3032].w;
    }
    SV_Target.x = _3176;
    SV_Target.y = _3177;
    SV_Target.z = _3178;
    SV_Target.w = _3549;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_3032].w;
    discard_exit();
}


