#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 13) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_22;
layout(set = 0, binding = 14) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_29;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_10;
layout(set = 0, binding = 20) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_6;
layout(set = 0, binding = 23) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_8;
layout(set = 0, binding = 24) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_9;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1643;
float _3998;
float _3999;
float _4000;
float _4001;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _244 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _245 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _246 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _252 = inversesqrt(dot(vec3(_244, _245, _246), vec3(_244, _245, _246)));
    float _253 = _252 * _244;
    float _254 = _252 * _245;
    float _255 = _252 * _246;
    float _259 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _260 = _259 * NORMAL.x;
    float _261 = _259 * NORMAL.y;
    float _262 = _259 * NORMAL.z;
    float _266 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _267 = _266 * TANGENT.x;
    float _268 = _266 * TANGENT.y;
    float _269 = _266 * TANGENT.z;
    float _278 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _280 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _281 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _4010 = isnan(0.0) ? _278 : (isnan(_278) ? 0.0 : max(_278, 0.0));
    float _4021 = isnan(0.0) ? _280 : (isnan(_280) ? 0.0 : max(_280, 0.0));
    float _4032 = isnan(0.0) ? _281 : (isnan(_281) ? 0.0 : max(_281, 0.0));
    uint _291 = uint(roundEven(NORMAL.w)) * 13u;
    uint _296 = _291 + 1u;
    uint _300 = _291 + 2u;
    float _309 = sqrt(((cbInstanceData._m0[_296].x * cbInstanceData._m0[_296].x) + (cbInstanceData._m0[_291].x * cbInstanceData._m0[_291].x)) + (cbInstanceData._m0[_300].x * cbInstanceData._m0[_300].x));
    float _310 = _309 * TEXCOORD.z;
    float _311 = _309 * TEXCOORD.w;
    vec4 _324 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _310) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _311) + cbTextureTilingScale._m0[13u].w));
    vec4 _348 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _353 = _348.x * cbMtdParam._m0[11u].x;
    float _354 = _348.y * cbMtdParam._m0[11u].y;
    float _355 = _348.z * cbMtdParam._m0[11u].z;
    vec4 _374 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _310) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _311) + cbTextureTilingScale._m0[5u].w));
    vec4 _393 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _431 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _433 = _431.x;
    float _445 = dot(vec4(_433, _431.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _462 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _393.x) * 2.0) - ((((_433 - _445) * cbMtdParam._m0[24u].z) + _445) * cbMtdParam._m0[23u].x))) + 1.0;
    float _4043 = isnan(0.0) ? _462 : (isnan(_462) ? 0.0 : max(_462, 0.0));
    float _463 = isnan(1.0) ? _4043 : (isnan(_4043) ? 1.0 : min(_4043, 1.0));
    float _470 = (_463 * ((_374.x * cbMtdParam._m0[12u].x) - _353)) + _353;
    float _471 = (_463 * ((_374.y * cbMtdParam._m0[12u].y) - _354)) + _354;
    float _472 = (_463 * ((_374.z * cbMtdParam._m0[12u].z) - _355)) + _355;
    vec4 _489 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _310) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _311) + cbTextureTilingScale._m0[3u].w));
    vec4 _509 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _511 = _509.x;
    float _521 = dot(vec4(_511, _509.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _535 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _393.y) * 2.0) - ((((_511 - _521) * cbMtdParam._m0[24u].z) + _521) * cbMtdParam._m0[20u].w))) + 1.0;
    float _4054 = isnan(0.0) ? _535 : (isnan(_535) ? 0.0 : max(_535, 0.0));
    float _536 = isnan(1.0) ? _4054 : (isnan(_4054) ? 1.0 : min(_4054, 1.0));
    float _543 = (_536 * ((_489.x * cbMtdParam._m0[13u].x) - _470)) + _470;
    float _544 = (_536 * ((_489.y * cbMtdParam._m0[13u].y) - _471)) + _471;
    float _545 = (_536 * ((_489.z * cbMtdParam._m0[13u].z) - _472)) + _472;
    vec4 _563 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_9, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[24u].x * _310) + cbTextureTilingScale._m0[24u].z, (cbTextureTilingScale._m0[24u].y * _311) + cbTextureTilingScale._m0[24u].w));
    vec4 _580 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[25u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _582 = _580.x;
    float _592 = dot(vec4(_582, _580.yzw), vec4(cbMtdParam._m0[30u].w, cbMtdParam._m0[31u].xy, 0.0));
    float _604 = ((cbMtdParam._m0[25u].x * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.z) - _393.z) * 2.0) - ((((_582 - _592) * cbMtdParam._m0[24u].z) + _592) * cbMtdParam._m0[20u].z))) + 1.0;
    float _4065 = isnan(0.0) ? _604 : (isnan(_604) ? 0.0 : max(_604, 0.0));
    float _605 = isnan(1.0) ? _4065 : (isnan(_4065) ? 1.0 : min(_4065, 1.0));
    float _612 = (_605 * ((_563.x * cbMtdParam._m0[14u].x) - _543)) + _543;
    float _613 = (_605 * ((_563.y * cbMtdParam._m0[14u].y) - _544)) + _544;
    float _614 = (_605 * ((_563.z * cbMtdParam._m0[14u].z) - _545)) + _545;
    float _618 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _324.x) * _612;
    float _621 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _324.y) * _613;
    float _624 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _324.z) * _614;
    float _631 = ((_612 - _618) * (isnan(1.0) ? _4010 : (isnan(_4010) ? 1.0 : min(_4010, 1.0)))) + _618;
    float _632 = ((_613 - _621) * (isnan(1.0) ? _4021 : (isnan(_4021) ? 1.0 : min(_4021, 1.0)))) + _621;
    float _633 = ((_614 - _624) * (isnan(1.0) ? _4032 : (isnan(_4032) ? 1.0 : min(_4032, 1.0)))) + _624;
    vec4 _651 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _310) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _311) + cbTextureTilingScale._m0[14u].w));
    vec4 _670 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _310) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _311) + cbTextureTilingScale._m0[20u].w));
    vec4 _695 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _310) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _311) + cbTextureTilingScale._m0[4u].w));
    vec4 _712 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _714 = _712.x;
    float _715 = _712.y;
    float _716 = _712.z;
    float _723 = ((_695.x - _714) * _463) + _714;
    float _724 = ((_695.y - _715) * _463) + _715;
    float _725 = ((_695.z - _716) * _463) + _716;
    vec4 _737 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _310) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _311) + cbTextureTilingScale._m0[2u].w));
    float _748 = ((_737.x - _723) * _536) + _723;
    float _749 = ((_737.y - _724) * _536) + _724;
    float _750 = ((_737.z - _725) * _536) + _725;
    vec4 _762 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[23u].x * _310) + cbTextureTilingScale._m0[23u].z, (cbTextureTilingScale._m0[23u].y * _311) + cbTextureTilingScale._m0[23u].w));
    float _775 = ((_762.z - _750) * _605) + _750;
    float _778 = ((((_762.x - _748) * _605) + _748) * 2.0) + (-1.0);
    float _779 = ((((_762.y - _749) * _605) + _749) * 2.0) + (-1.0);
    float _780 = dot(vec2(_778, _779), vec2(_778, _779));
    float _4076 = isnan(0.0) ? _780 : (isnan(_780) ? 0.0 : max(_780, 0.0));
    float _785 = sqrt(1.0 - (isnan(1.0) ? _4076 : (isnan(_4076) ? 1.0 : min(_4076, 1.0))));
    vec4 _803 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _815 = (_778 + ((((_670.x * 2.0) + (-1.0)) * TEXCOORD_11.x) * cbMtdParam._m0[20u].x)) + (((_803.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _816 = (_779 + ((((_670.y * 2.0) + (-1.0)) * TEXCOORD_11.y) * cbMtdParam._m0[20u].x)) + (((_803.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _819 = fma(_785, _260, fma(_816, _267, _815 * _253));
    float _822 = fma(_785, _261, fma(_816, _268, _815 * _254));
    float _825 = fma(_785, _262, fma(_816, _269, _815 * _255));
    float _829 = inversesqrt(dot(vec3(_819, _822, _825), vec3(_819, _822, _825)));
    vec4 _856 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _310) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _311) + cbTextureTilingScale._m0[11u].w));
    float _858 = _856.x;
    float _859 = 1.0 - _858;
    float _865 = (cbMtdParam._m0[19u].x + dot(vec4(_829 * _819, _829 * _822, _829 * _825, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_858 - _859) * cbMtdParam._m0[24u].w) + _859) * cbMtdParam._m0[21u].z);
    float _4087 = isnan(0.0) ? _865 : (isnan(_865) ? 0.0 : max(_865, 0.0));
    float _866 = isnan(1.0) ? _4087 : (isnan(_4087) ? 1.0 : min(_4087, 1.0));
    float _868 = (-0.0) - cbMtdParam._m0[24u].x;
    float _870 = isnan(0.0) ? _868 : (isnan(_868) ? 0.0 : max(_868, 0.0));
    float _871 = isnan(1.0) ? _870 : (isnan(_870) ? 1.0 : min(_870, 1.0));
    float _878 = _866 - ((_866 * TEXCOORD_8.x) * _871);
    float _879 = _866 - ((_866 * TEXCOORD_8.y) * _871);
    float _880 = _866 - ((_866 * TEXCOORD_8.z) * _871);
    float _887 = (_878 * ((_651.x * cbMtdParam._m0[18u].x) - _631)) + _631;
    float _888 = (_879 * ((_651.y * cbMtdParam._m0[18u].y) - _632)) + _632;
    float _889 = (_880 * ((_651.z * cbMtdParam._m0[18u].z) - _633)) + _633;
    float _904 = sqrt(((cbInstanceData._m0[_296].x * cbInstanceData._m0[_296].x) + (cbInstanceData._m0[_291].x * cbInstanceData._m0[_291].x)) + (cbInstanceData._m0[_300].x * cbInstanceData._m0[_300].x));
    float _905 = _904 * TEXCOORD.z;
    float _906 = _904 * TEXCOORD.w;
    vec4 _918 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _905) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _906) + cbTextureTilingScale._m0[19u].w));
    float _920 = _918.x;
    float _921 = 1.0 - _920;
    float _949 = (TEXCOORD_8.x - ((cbMtdParam._m0[22u].w * (1.0 - TEXCOORD_8.x)) * ((((_920 - _921) * cbMtdParam._m0[24u].y) + _921) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _4108 = isnan(0.0) ? _949 : (isnan(_949) ? 0.0 : max(_949, 0.0));
    float _950 = isnan(1.0) ? _4108 : (isnan(_4108) ? 1.0 : min(_4108, 1.0));
    float _958 = ((((cbMtdParam._m0[10u].x - _887) * TEXCOORD_8.x) * cbMtdParam._m0[23u].w) * _950) + _887;
    float _959 = ((((cbMtdParam._m0[10u].y - _888) * TEXCOORD_8.y) * cbMtdParam._m0[23u].w) * _950) + _888;
    float _960 = (((cbMtdParam._m0[23u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _889)) * _950) + _889;
    float _965 = (((_670.z - _775) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _775;
    float _969 = ((_803.z - _965) * cbMtdParam._m0[19u].w) + _965;
    vec4 _985 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _310) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _311) + cbTextureTilingScale._m0[15u].w));
    float _992 = (_985.x * 2.0) + (-1.0);
    float _993 = (_985.y * 2.0) + (-1.0);
    float _994 = dot(vec2(_992, _993), vec2(_992, _993));
    float _4119 = isnan(0.0) ? _994 : (isnan(_994) ? 0.0 : max(_994, 0.0));
    float _1002 = ((_985.z - _969) * _878) + _969;
    float _1005 = ((cbMtdParam._m0[23u].y - _1002) * _950) + _1002;
    vec4 _1026 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _905) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _906) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _1032 = (_1026.x * 2.0) + (-1.0);
    float _1033 = (_1026.y * 2.0) + (-1.0);
    float _1034 = dot(vec2(_1032, _1033), vec2(_1032, _1033));
    float _4130 = isnan(0.0) ? _1034 : (isnan(_1034) ? 0.0 : max(_1034, 0.0));
    float _1049 = ((sqrt(1.0 - (isnan(1.0) ? _4119 : (isnan(_4119) ? 1.0 : min(_4119, 1.0)))) - _785) * _880) + _785;
    float _1052 = (((_992 - _815) * _878) + _815) + (cbMtdParam._m0[21u].x * _815);
    float _1053 = (((_993 - _816) * _879) + _816) + (cbMtdParam._m0[21u].x * _816);
    float _1064 = (((_1032 - _1052) + (_1052 * cbMtdParam._m0[22u].z)) * _950) + _1052;
    float _1065 = (((_1033 - _1053) + (_1053 * cbMtdParam._m0[22u].z)) * _950) + _1053;
    float _1066 = (_950 * (sqrt(1.0 - (isnan(1.0) ? _4130 : (isnan(_4130) ? 1.0 : min(_4130, 1.0)))) - _1049)) + _1049;
    float _1068 = cbMtdParam._m0[22u].x + _803.w;
    float _1071 = fma(_1066, _260, fma(_1065, _267, _1064 * _253));
    float _1074 = fma(_1066, _261, fma(_1065, _268, _1064 * _254));
    float _1077 = fma(_1066, _262, fma(_1065, _269, _1064 * _255));
    float _1081 = inversesqrt(dot(vec3(_1071, _1074, _1077), vec3(_1071, _1074, _1077)));
    float _1082 = _1081 * _1071;
    float _1083 = _1081 * _1074;
    float _1084 = _1081 * _1077;
    float _4141 = isnan(0.0) ? _1005 : (isnan(_1005) ? 0.0 : max(_1005, 0.0));
    float _1085 = isnan(1.0) ? _4141 : (isnan(_4141) ? 1.0 : min(_4141, 1.0));
    float _4152 = isnan(0.0) ? _1068 : (isnan(_1068) ? 0.0 : max(_1068, 0.0));
    float _4163 = isnan(0.0) ? _958 : (isnan(_958) ? 0.0 : max(_958, 0.0));
    float _4174 = isnan(0.0) ? _959 : (isnan(_959) ? 0.0 : max(_959, 0.0));
    float _4185 = isnan(0.0) ? _960 : (isnan(_960) ? 0.0 : max(_960, 0.0));
    float _1103 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _1144 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _1154 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _1144);
    float _1155 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _1144);
    float _1156 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _1144);
    float _1160 = inversesqrt(dot(vec3(_1154, _1155, _1156), vec3(_1154, _1155, _1156)));
    float _1161 = _1154 * _1160;
    float _1162 = _1155 * _1160;
    float _1163 = _1156 * _1160;
    vec4 _1168 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _1170 = _1168.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1324 = sqrt(((_1154 * _1154) + (_1155 * _1155)) + (_1156 * _1156));
        float _1330 = (cbMatDynParam._m0[5u].x * _1324) + cbMatDynParam._m0[5u].y;
        float _4196 = isnan(0.0) ? _1330 : (isnan(_1330) ? 0.0 : max(_1330, 0.0));
        float _1331 = isnan(1.0) ? _4196 : (isnan(_4196) ? 1.0 : min(_4196, 1.0));
        float _1335 = (cbMatDynParam._m0[5u].z * _1324) + cbMatDynParam._m0[5u].w;
        float _4207 = isnan(0.0) ? _1335 : (isnan(_1335) ? 0.0 : max(_1335, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4207 : (isnan(_4207) ? 1.0 : min(_4207, 1.0))) - _1331)) + _1331) < ((_1170 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _1181 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1182 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1200 = fma(_1084, cbSceneParam._m0[5u].z, fma(_1083, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _1082));
    float _1203 = fma(_1084, cbSceneParam._m0[6u].z, fma(_1083, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _1082));
    float _1206 = fma(_1084, cbSceneParam._m0[7u].z, fma(_1083, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _1082));
    uint _1219 = _291 + 9u;
    uint _1220 = _1219 + uint(cbMatDynParam._m0[0u].w);
    float _1226 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4163 : (isnan(_4163) ? 1.0 : min(_4163, 1.0)))) * cbInstanceData._m0[_1220].x;
    float _1227 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4174 : (isnan(_4174) ? 1.0 : min(_4174, 1.0)))) * cbInstanceData._m0[_1220].y;
    float _1228 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4185 : (isnan(_4185) ? 1.0 : min(_4185, 1.0)))) * cbInstanceData._m0[_1220].z;
    float _4218 = isnan(0.0) ? _1226 : (isnan(_1226) ? 0.0 : max(_1226, 0.0));
    float _1229 = isnan(1.0) ? _4218 : (isnan(_4218) ? 1.0 : min(_4218, 1.0));
    float _4229 = isnan(0.0) ? _1227 : (isnan(_1227) ? 0.0 : max(_1227, 0.0));
    float _1230 = isnan(1.0) ? _4229 : (isnan(_4229) ? 1.0 : min(_4229, 1.0));
    float _4240 = isnan(0.0) ? _1228 : (isnan(_1228) ? 0.0 : max(_1228, 0.0));
    float _1231 = isnan(1.0) ? _4240 : (isnan(_4240) ? 1.0 : min(_4240, 1.0));
    vec4 _1240 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1181, cbSceneParam._m0[86u].y * _1182));
    float _1244 = ((isnan(1.0) ? _4152 : (isnan(_4152) ? 1.0 : min(_4152, 1.0))) * TEXCOORD_5.w) * _1240.x;
    float _1245 = dot(vec3(_1082, _1083, _1084), vec3(_1161, _1162, _1163));
    float _1248 = _1245 * 2.0;
    float _1252 = (_1248 * _1082) - _1161;
    float _1253 = (_1248 * _1083) - _1162;
    float _1254 = (_1248 * _1084) - _1163;
    float _1258 = abs(dot(vec3(_1161, _1162, _1163), vec3(_1082, _1083, _1084)));
    float _4251 = isnan(0.0) ? _1258 : (isnan(_1258) ? 0.0 : max(_1258, 0.0));
    float _1260 = sqrt(_1085);
    float _1273 = exp2((_1260 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4251 : (isnan(_4251) ? 1.0 : min(_4251, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1260 * 3.0));
    float _1305 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1309 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1313 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1642;
    float _1644;
    float _1645;
    float _1646;
    float _1647;
    float _1648;
    float _1649;
    float _1650;
    float _1651;
    float _1652;
    float _1653;
    float _1654;
    float _1655;
    float _1656;
    float _1657;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1367 = fma(_1313, cbModelParam._m0[26u].z, fma(_1309, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1305));
        float _1371 = fma(_1313, cbModelParam._m0[27u].z, fma(_1309, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1305));
        float _1375 = fma(_1313, cbModelParam._m0[28u].z, fma(_1309, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1305));
        float _1400 = _1305 + _1082;
        float _1401 = _1309 + _1083;
        float _1402 = _1313 + _1084;
        float _1412 = fma(_1402, cbModelParam._m0[26u].z, fma(_1401, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1400)) - _1367;
        float _1413 = fma(_1402, cbModelParam._m0[27u].z, fma(_1401, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1400)) - _1371;
        float _1414 = fma(_1402, cbModelParam._m0[28u].z, fma(_1401, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1400)) - _1375;
        float _1418 = inversesqrt(dot(vec3(_1412, _1413, _1414), vec3(_1412, _1413, _1414)));
        float _1431 = ((_1418 * _1412) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1367 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1432 = ((_1418 * _1413) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1371 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1433 = ((_1418 * _1414) / cbModelParam._m0[34u].z) + ((((((_1375 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1436 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1431, _1432, _1433), 0.0);
        vec4 _1443 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1431, _1432, _1433), 0.0);
        vec4 _1450 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1431, _1432, _1433), 0.0);
        vec4 _1457 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1431, _1432, _1433), 0.0);
        float _1470 = exp2((_1436.w + (-0.5)) * 20.0) * 2.0;
        float _1471 = _1470 * (_1436.x + (-0.5));
        float _1472 = _1470 * (_1436.y + (-0.5));
        float _1473 = _1470 * (_1436.z + (-0.5));
        float _1480 = exp2((_1443.w + (-0.5)) * 20.0) * 2.0;
        float _1481 = _1480 * (_1443.x + (-0.5));
        float _1482 = _1480 * (_1443.y + (-0.5));
        float _1483 = _1480 * (_1443.z + (-0.5));
        float _1490 = exp2((_1450.w + (-0.5)) * 20.0) * 2.0;
        float _1491 = _1490 * (_1450.x + (-0.5));
        float _1492 = _1490 * (_1450.y + (-0.5));
        float _1493 = _1490 * (_1450.z + (-0.5));
        float _1500 = exp2((_1457.w + (-0.5)) * 20.0) * 2.0;
        float _1501 = _1500 * (_1457.x + (-0.5));
        float _1502 = _1500 * (_1457.y + (-0.5));
        float _1503 = _1500 * (_1457.z + (-0.5));
        float _1504 = isnan(0.0) ? _1501 : (isnan(_1501) ? 0.0 : max(_1501, 0.0));
        float _1505 = isnan(0.0) ? _1502 : (isnan(_1502) ? 0.0 : max(_1502, 0.0));
        float _1506 = isnan(0.0) ? _1503 : (isnan(_1503) ? 0.0 : max(_1503, 0.0));
        float _1507 = _1471 * 0.5;
        float _1508 = _1481 * 0.5;
        float _1509 = _1491 * 0.5;
        float _1510 = dot(vec3(_1507, _1508, _1509), vec3(_1507, _1508, _1509));
        float _1515 = (_1510 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1510);
        float _1524 = (dot(vec3(_1082, _1083, _1084), vec3(_1515 * _1507, _1515 * _1508, _1515 * _1509)) + 1.0) * 0.5;
        float _4277 = isnan(0.0) ? _1524 : (isnan(_1524) ? 0.0 : max(_1524, 0.0));
        float _1534 = sqrt(((_1508 * _1508) + (_1507 * _1507)) + (_1509 * _1509)) / (_1504 + 9.9999997473787516355514526367188e-06);
        float _4288 = isnan(0.0) ? _1534 : (isnan(_1534) ? 0.0 : max(_1534, 0.0));
        float _1535 = isnan(1.0) ? _4288 : (isnan(_4288) ? 1.0 : min(_4288, 1.0));
        float _1536 = _1535 * 2.0;
        float _1540 = (1.0 - _1535) / (_1535 + 1.0);
        float _4299 = isnan(0.0) ? _1540 : (isnan(_1540) ? 0.0 : max(_1540, 0.0));
        float _1541 = isnan(1.0) ? _4299 : (isnan(_4299) ? 1.0 : min(_4299, 1.0));
        float _1550 = ((((1.0 - _1541) * (_1536 + 2.0)) * exp2(log2(isnan(1.0) ? _4277 : (isnan(_4277) ? 1.0 : min(_4277, 1.0))) * (_1536 + 1.0))) + _1541) * _1504;
        float _1551 = _1472 * 0.5;
        float _1552 = _1482 * 0.5;
        float _1553 = _1492 * 0.5;
        float _1554 = dot(vec3(_1551, _1552, _1553), vec3(_1551, _1552, _1553));
        float _1559 = (_1554 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1554);
        float _1567 = (dot(vec3(_1082, _1083, _1084), vec3(_1559 * _1551, _1559 * _1552, _1559 * _1553)) + 1.0) * 0.5;
        float _4310 = isnan(0.0) ? _1567 : (isnan(_1567) ? 0.0 : max(_1567, 0.0));
        float _1576 = sqrt(((_1552 * _1552) + (_1551 * _1551)) + (_1553 * _1553)) / (_1505 + 9.9999997473787516355514526367188e-06);
        float _4321 = isnan(0.0) ? _1576 : (isnan(_1576) ? 0.0 : max(_1576, 0.0));
        float _1577 = isnan(1.0) ? _4321 : (isnan(_4321) ? 1.0 : min(_4321, 1.0));
        float _1578 = _1577 * 2.0;
        float _1582 = (1.0 - _1577) / (_1577 + 1.0);
        float _4332 = isnan(0.0) ? _1582 : (isnan(_1582) ? 0.0 : max(_1582, 0.0));
        float _1583 = isnan(1.0) ? _4332 : (isnan(_4332) ? 1.0 : min(_4332, 1.0));
        float _1592 = ((((1.0 - _1583) * (_1578 + 2.0)) * exp2(log2(isnan(1.0) ? _4310 : (isnan(_4310) ? 1.0 : min(_4310, 1.0))) * (_1578 + 1.0))) + _1583) * _1505;
        float _1593 = _1473 * 0.5;
        float _1594 = _1483 * 0.5;
        float _1595 = _1493 * 0.5;
        float _1596 = dot(vec3(_1593, _1594, _1595), vec3(_1593, _1594, _1595));
        float _1601 = (_1596 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1596);
        float _1609 = (dot(vec3(_1082, _1083, _1084), vec3(_1601 * _1593, _1601 * _1594, _1601 * _1595)) + 1.0) * 0.5;
        float _4343 = isnan(0.0) ? _1609 : (isnan(_1609) ? 0.0 : max(_1609, 0.0));
        float _1618 = sqrt(((_1594 * _1594) + (_1593 * _1593)) + (_1595 * _1595)) / (_1506 + 9.9999997473787516355514526367188e-06);
        float _4354 = isnan(0.0) ? _1618 : (isnan(_1618) ? 0.0 : max(_1618, 0.0));
        float _1619 = isnan(1.0) ? _4354 : (isnan(_4354) ? 1.0 : min(_4354, 1.0));
        float _1620 = _1619 * 2.0;
        float _1624 = (1.0 - _1619) / (_1619 + 1.0);
        float _4365 = isnan(0.0) ? _1624 : (isnan(_1624) ? 0.0 : max(_1624, 0.0));
        float _1625 = isnan(1.0) ? _4365 : (isnan(_4365) ? 1.0 : min(_4365, 1.0));
        float _1634 = ((((1.0 - _1625) * (_1620 + 2.0)) * exp2(log2(isnan(1.0) ? _4343 : (isnan(_4343) ? 1.0 : min(_4343, 1.0))) * (_1620 + 1.0))) + _1625) * _1506;
        _1642 = _1473;
        _1644 = _1472;
        _1645 = _1471;
        _1646 = _1483;
        _1647 = _1482;
        _1648 = _1481;
        _1649 = _1493;
        _1650 = _1492;
        _1651 = _1491;
        _1652 = _1506;
        _1653 = _1505;
        _1654 = _1504;
        _1655 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1550 : (isnan(_1550) ? 0.0 : max(_1550, 0.0)));
        _1656 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1592 : (isnan(_1592) ? 0.0 : max(_1592, 0.0)));
        _1657 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1634 : (isnan(_1634) ? 0.0 : max(_1634, 0.0)));
    }
    else
    {
        _1642 = _1643;
        _1644 = _1643;
        _1645 = _1643;
        _1646 = _1643;
        _1647 = _1643;
        _1648 = _1643;
        _1649 = _1643;
        _1650 = _1643;
        _1651 = _1643;
        _1652 = _1643;
        _1653 = _1643;
        _1654 = _1643;
        _1655 = 0.0;
        _1656 = 0.0;
        _1657 = 0.0;
    }
    float _1952;
    float _1953;
    float _1954;
    float _1955;
    float _1956;
    float _1957;
    float _1958;
    float _1959;
    float _1960;
    float _1961;
    float _1962;
    float _1963;
    float _1964;
    float _1965;
    float _1966;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1683 = fma(_1313, cbModelParam._m0[30u].z, fma(_1309, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1305));
        float _1687 = fma(_1313, cbModelParam._m0[31u].z, fma(_1309, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1305));
        float _1691 = fma(_1313, cbModelParam._m0[32u].z, fma(_1309, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1305));
        float _1714 = _1305 + _1082;
        float _1715 = _1309 + _1083;
        float _1716 = _1313 + _1084;
        float _1726 = fma(_1716, cbModelParam._m0[30u].z, fma(_1715, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1714)) - _1683;
        float _1727 = fma(_1716, cbModelParam._m0[31u].z, fma(_1715, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1714)) - _1687;
        float _1728 = fma(_1716, cbModelParam._m0[32u].z, fma(_1715, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1714)) - _1691;
        float _1732 = inversesqrt(dot(vec3(_1726, _1727, _1728), vec3(_1726, _1727, _1728)));
        float _1745 = ((_1732 * _1726) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1683 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1746 = ((_1732 * _1727) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1687 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1747 = ((_1732 * _1728) / cbModelParam._m0[35u].z) + ((((((_1691 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1749 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1745, _1746, _1747), 0.0);
        vec4 _1756 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1745, _1746, _1747), 0.0);
        vec4 _1763 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1745, _1746, _1747), 0.0);
        vec4 _1770 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1745, _1746, _1747), 0.0);
        float _1782 = exp2((_1749.w + (-0.5)) * 20.0) * 2.0;
        float _1783 = _1782 * (_1749.x + (-0.5));
        float _1784 = _1782 * (_1749.y + (-0.5));
        float _1785 = _1782 * (_1749.z + (-0.5));
        float _1792 = exp2((_1756.w + (-0.5)) * 20.0) * 2.0;
        float _1793 = _1792 * (_1756.x + (-0.5));
        float _1794 = _1792 * (_1756.y + (-0.5));
        float _1795 = _1792 * (_1756.z + (-0.5));
        float _1802 = exp2((_1763.w + (-0.5)) * 20.0) * 2.0;
        float _1803 = _1802 * (_1763.x + (-0.5));
        float _1804 = _1802 * (_1763.y + (-0.5));
        float _1805 = _1802 * (_1763.z + (-0.5));
        float _1812 = exp2((_1770.w + (-0.5)) * 20.0) * 2.0;
        float _1813 = _1812 * (_1770.x + (-0.5));
        float _1814 = _1812 * (_1770.y + (-0.5));
        float _1815 = _1812 * (_1770.z + (-0.5));
        float _1816 = isnan(0.0) ? _1813 : (isnan(_1813) ? 0.0 : max(_1813, 0.0));
        float _1817 = isnan(0.0) ? _1814 : (isnan(_1814) ? 0.0 : max(_1814, 0.0));
        float _1818 = isnan(0.0) ? _1815 : (isnan(_1815) ? 0.0 : max(_1815, 0.0));
        float _1819 = _1783 * 0.5;
        float _1820 = _1793 * 0.5;
        float _1821 = _1803 * 0.5;
        float _1822 = dot(vec3(_1819, _1820, _1821), vec3(_1819, _1820, _1821));
        float _1827 = (_1822 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1822);
        float _1835 = (dot(vec3(_1082, _1083, _1084), vec3(_1827 * _1819, _1827 * _1820, _1827 * _1821)) + 1.0) * 0.5;
        float _4406 = isnan(0.0) ? _1835 : (isnan(_1835) ? 0.0 : max(_1835, 0.0));
        float _1844 = sqrt(((_1820 * _1820) + (_1819 * _1819)) + (_1821 * _1821)) / (_1816 + 9.9999997473787516355514526367188e-06);
        float _4417 = isnan(0.0) ? _1844 : (isnan(_1844) ? 0.0 : max(_1844, 0.0));
        float _1845 = isnan(1.0) ? _4417 : (isnan(_4417) ? 1.0 : min(_4417, 1.0));
        float _1846 = _1845 * 2.0;
        float _1850 = (1.0 - _1845) / (_1845 + 1.0);
        float _4428 = isnan(0.0) ? _1850 : (isnan(_1850) ? 0.0 : max(_1850, 0.0));
        float _1851 = isnan(1.0) ? _4428 : (isnan(_4428) ? 1.0 : min(_4428, 1.0));
        float _1860 = ((((1.0 - _1851) * (_1846 + 2.0)) * exp2(log2(isnan(1.0) ? _4406 : (isnan(_4406) ? 1.0 : min(_4406, 1.0))) * (_1846 + 1.0))) + _1851) * _1816;
        float _1861 = _1784 * 0.5;
        float _1862 = _1794 * 0.5;
        float _1863 = _1804 * 0.5;
        float _1864 = dot(vec3(_1861, _1862, _1863), vec3(_1861, _1862, _1863));
        float _1869 = (_1864 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1864);
        float _1877 = (dot(vec3(_1082, _1083, _1084), vec3(_1869 * _1861, _1869 * _1862, _1869 * _1863)) + 1.0) * 0.5;
        float _4439 = isnan(0.0) ? _1877 : (isnan(_1877) ? 0.0 : max(_1877, 0.0));
        float _1886 = sqrt(((_1862 * _1862) + (_1861 * _1861)) + (_1863 * _1863)) / (_1817 + 9.9999997473787516355514526367188e-06);
        float _4450 = isnan(0.0) ? _1886 : (isnan(_1886) ? 0.0 : max(_1886, 0.0));
        float _1887 = isnan(1.0) ? _4450 : (isnan(_4450) ? 1.0 : min(_4450, 1.0));
        float _1888 = _1887 * 2.0;
        float _1892 = (1.0 - _1887) / (_1887 + 1.0);
        float _4461 = isnan(0.0) ? _1892 : (isnan(_1892) ? 0.0 : max(_1892, 0.0));
        float _1893 = isnan(1.0) ? _4461 : (isnan(_4461) ? 1.0 : min(_4461, 1.0));
        float _1902 = ((((1.0 - _1893) * (_1888 + 2.0)) * exp2(log2(isnan(1.0) ? _4439 : (isnan(_4439) ? 1.0 : min(_4439, 1.0))) * (_1888 + 1.0))) + _1893) * _1817;
        float _1903 = _1785 * 0.5;
        float _1904 = _1795 * 0.5;
        float _1905 = _1805 * 0.5;
        float _1906 = dot(vec3(_1903, _1904, _1905), vec3(_1903, _1904, _1905));
        float _1911 = (_1906 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1906);
        float _1919 = (dot(vec3(_1082, _1083, _1084), vec3(_1911 * _1903, _1911 * _1904, _1911 * _1905)) + 1.0) * 0.5;
        float _4472 = isnan(0.0) ? _1919 : (isnan(_1919) ? 0.0 : max(_1919, 0.0));
        float _1928 = sqrt(((_1904 * _1904) + (_1903 * _1903)) + (_1905 * _1905)) / (_1818 + 9.9999997473787516355514526367188e-06);
        float _4483 = isnan(0.0) ? _1928 : (isnan(_1928) ? 0.0 : max(_1928, 0.0));
        float _1929 = isnan(1.0) ? _4483 : (isnan(_4483) ? 1.0 : min(_4483, 1.0));
        float _1930 = _1929 * 2.0;
        float _1934 = (1.0 - _1929) / (_1929 + 1.0);
        float _4494 = isnan(0.0) ? _1934 : (isnan(_1934) ? 0.0 : max(_1934, 0.0));
        float _1935 = isnan(1.0) ? _4494 : (isnan(_4494) ? 1.0 : min(_4494, 1.0));
        float _1944 = ((((1.0 - _1935) * (_1930 + 2.0)) * exp2(log2(isnan(1.0) ? _4472 : (isnan(_4472) ? 1.0 : min(_4472, 1.0))) * (_1930 + 1.0))) + _1935) * _1818;
        _1952 = _1785;
        _1953 = _1784;
        _1954 = _1783;
        _1955 = _1795;
        _1956 = _1794;
        _1957 = _1793;
        _1958 = _1805;
        _1959 = _1804;
        _1960 = _1803;
        _1961 = _1818;
        _1962 = _1817;
        _1963 = _1816;
        _1964 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1860 : (isnan(_1860) ? 0.0 : max(_1860, 0.0)));
        _1965 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1902 : (isnan(_1902) ? 0.0 : max(_1902, 0.0)));
        _1966 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1944 : (isnan(_1944) ? 0.0 : max(_1944, 0.0)));
    }
    else
    {
        _1952 = _1643;
        _1953 = _1643;
        _1954 = _1643;
        _1955 = _1643;
        _1956 = _1643;
        _1957 = _1643;
        _1958 = _1643;
        _1959 = _1643;
        _1960 = _1643;
        _1961 = _1643;
        _1962 = _1643;
        _1963 = _1643;
        _1964 = 0.0;
        _1965 = 0.0;
        _1966 = 0.0;
    }
    float _1976 = (cbModelParam._m0[1u].x * (_1964 - _1655)) + _1655;
    float _1977 = (cbModelParam._m0[1u].x * (_1965 - _1656)) + _1656;
    float _1978 = (cbModelParam._m0[1u].x * (_1966 - _1657)) + _1657;
    float _1999 = fma(_1978, cbSceneParam._m0[89u].z, fma(_1977, cbSceneParam._m0[89u].y, _1976 * cbSceneParam._m0[89u].x));
    float _2002 = fma(_1978, cbSceneParam._m0[90u].z, fma(_1977, cbSceneParam._m0[90u].y, _1976 * cbSceneParam._m0[90u].x));
    float _2005 = fma(_1978, cbSceneParam._m0[91u].z, fma(_1977, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1976));
    float _2020 = _1252 * 0.5;
    float _2021 = _1253 * 0.5;
    float _2022 = _1254 * 0.5;
    float _2023 = dot(vec4(_2020, _2021, _2022, 1.0), vec4(_1954, _1957, _1960, _1963));
    float _2026 = dot(vec4(_2020, _2021, _2022, 1.0), vec4(_1953, _1956, _1959, _1962));
    float _2029 = dot(vec4(_2020, _2021, _2022, 1.0), vec4(_1952, _1955, _1958, _1961));
    float _2063;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _2036 = dot(vec4(_2020, _2021, _2022, 1.0), vec4(_1642, _1646, _1649, _1652));
        float _2040 = dot(vec4(_2020, _2021, _2022, 1.0), vec4(_1644, _1647, _1650, _1653));
        float _2044 = dot(vec4(_2020, _2021, _2022, 1.0), vec4(_1645, _1648, _1651, _1654));
        float _2051 = dot(vec4(cbModelParam._m0[39u]), vec4(_2020, _2021, _2022, 1.0));
        _2063 = dot(vec3(isnan(0.0) ? _2044 : (isnan(_2044) ? 0.0 : max(_2044, 0.0)), isnan(0.0) ? _2040 : (isnan(_2040) ? 0.0 : max(_2040, 0.0)), isnan(0.0) ? _2036 : (isnan(_2036) ? 0.0 : max(_2036, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_2051) ? 0.0 : (isnan(0.0) ? _2051 : max(0.0, _2051))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _2063 = 1.0;
    }
    float _2074;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _2065 = dot(vec4(cbModelParam._m0[40u]), vec4(_2020, _2021, _2022, 1.0));
        _2074 = dot(vec3(isnan(0.0) ? _2023 : (isnan(_2023) ? 0.0 : max(_2023, 0.0)), isnan(0.0) ? _2026 : (isnan(_2026) ? 0.0 : max(_2026, 0.0)), isnan(0.0) ? _2029 : (isnan(_2029) ? 0.0 : max(_2029, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_2065) ? 0.0 : (isnan(0.0) ? _2065 : max(0.0, _2065))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _2074 = 1.0;
    }
    float _2078 = (_2074 * cbModelParam._m0[1u].x) + (_2063 * (1.0 - cbModelParam._m0[1u].x));
    float _2088 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _1085);
    float _2089 = isnan(_2088) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _2088 : min(cbModelParam._m0[25u].z, _2088));
    float _2169;
    float _2171;
    float _2173;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _2136 = fma(_1313, cbModelParam._m0[13u].z, fma(_1309, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1305)) + cbModelParam._m0[13u].w;
        float _2140 = fma(_1313, cbModelParam._m0[14u].z, fma(_1309, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1305)) + cbModelParam._m0[14u].w;
        float _2144 = fma(_1313, cbModelParam._m0[15u].z, fma(_1309, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1305)) + cbModelParam._m0[15u].w;
        float _2147 = fma(_1254, cbModelParam._m0[13u].z, fma(_1253, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1252));
        float _2150 = fma(_1254, cbModelParam._m0[14u].z, fma(_1253, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1252));
        float _2153 = fma(_1254, cbModelParam._m0[15u].z, fma(_1253, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1252));
        float _2181;
        if (_2147 > 0.0)
        {
            _2181 = abs((1.0 - _2136) / _2147);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_2147 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_2136 + 1.0) / _2147);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _2181 = frontier_phi_17_15_ladder;
        }
        float _2381;
        if (_2150 > 0.0)
        {
            _2381 = abs((1.0 - _2140) / _2150);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_2150 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_2140 + 1.0) / _2150);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2381 = frontier_phi_26_22_ladder;
        }
        float _2624;
        if (_2153 > 0.0)
        {
            _2624 = abs((1.0 - _2144) / _2153);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_2153 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_2144 + 1.0) / _2153);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2624 = frontier_phi_38_33_ladder;
        }
        float _2626 = isnan(_2381) ? _2181 : (isnan(_2181) ? _2381 : min(_2181, _2381));
        float _2627 = isnan(_2624) ? _2626 : (isnan(_2626) ? _2624 : min(_2626, _2624));
        float _2631 = (_2627 * _2147) + _2136;
        float _2632 = (_2627 * _2150) + _2140;
        float _2633 = (_2627 * _2153) + _2144;
        float _2634 = _2627 * 9.9999997473787516355514526367188e-05;
        float _2636 = (-1.0) - _2634;
        float _2638 = _2634 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2633 > _2638) || ((_2633 < _2636) || ((_2632 > _2638) || ((_2632 < _2636) || ((_2631 < _2636) || (_2631 > _2638))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2757 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2633, cbModelParam._m0[9u].z, fma(_2632, cbModelParam._m0[9u].y, _2631 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2633, cbModelParam._m0[10u].z, fma(_2632, cbModelParam._m0[10u].y, _2631 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2633, cbModelParam._m0[11u].z, fma(_2632, cbModelParam._m0[11u].y, _2631 * cbModelParam._m0[11u].x))), _2089);
            frontier_phi_16_38_ladder = _2757.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2757.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2757.x * cbModelParam._m0[1u].y;
        }
        _2169 = frontier_phi_16_38_ladder_2;
        _2171 = frontier_phi_16_38_ladder_1;
        _2173 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _2157 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1252, _1253, _1254), _2089);
        _2169 = _2157.x * cbModelParam._m0[1u].y;
        _2171 = _2157.y * cbModelParam._m0[1u].y;
        _2173 = _2157.z * cbModelParam._m0[1u].y;
    }
    float _2177 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _1085);
    float _2178 = isnan(_2177) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2177 : min(cbModelParam._m0[25u].w, _2177));
    float _2267;
    float _2269;
    float _2271;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2231 = fma(_1313, cbModelParam._m0[21u].z, fma(_1309, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1305)) + cbModelParam._m0[21u].w;
        float _2235 = fma(_1313, cbModelParam._m0[22u].z, fma(_1309, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1305)) + cbModelParam._m0[22u].w;
        float _2239 = fma(_1313, cbModelParam._m0[23u].z, fma(_1309, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1305)) + cbModelParam._m0[23u].w;
        float _2242 = fma(_1254, cbModelParam._m0[21u].z, fma(_1253, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1252));
        float _2245 = fma(_1254, cbModelParam._m0[22u].z, fma(_1253, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1252));
        float _2248 = fma(_1254, cbModelParam._m0[23u].z, fma(_1253, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1252));
        float _2386;
        if (_2242 > 0.0)
        {
            _2386 = abs((1.0 - _2231) / _2242);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_2242 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_2231 + 1.0) / _2242);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2386 = frontier_phi_28_24_ladder;
        }
        float _2651;
        if (_2245 > 0.0)
        {
            _2651 = abs((1.0 - _2235) / _2245);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_2245 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_2235 + 1.0) / _2245);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2651 = frontier_phi_40_35_ladder;
        }
        float _2856;
        if (_2248 > 0.0)
        {
            _2856 = abs((1.0 - _2239) / _2248);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_2248 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_2239 + 1.0) / _2248);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2856 = frontier_phi_49_46_ladder;
        }
        float _2858 = isnan(_2651) ? _2386 : (isnan(_2386) ? _2651 : min(_2386, _2651));
        float _2859 = isnan(_2856) ? _2858 : (isnan(_2858) ? _2856 : min(_2858, _2856));
        float _2863 = (_2859 * _2242) + _2231;
        float _2864 = (_2859 * _2245) + _2235;
        float _2865 = (_2859 * _2248) + _2239;
        float _2866 = _2859 * 9.9999997473787516355514526367188e-05;
        float _2867 = (-1.0) - _2866;
        float _2869 = _2866 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2865 > _2869) || ((_2865 < _2867) || ((_2864 > _2869) || ((_2864 < _2867) || ((_2863 < _2867) || (_2863 > _2869))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _3064 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2865, cbModelParam._m0[17u].z, fma(_2864, cbModelParam._m0[17u].y, _2863 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2865, cbModelParam._m0[18u].z, fma(_2864, cbModelParam._m0[18u].y, _2863 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2865, cbModelParam._m0[19u].z, fma(_2864, cbModelParam._m0[19u].y, _2863 * cbModelParam._m0[19u].x))), _2178);
            frontier_phi_25_49_ladder = _3064.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _3064.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _3064.x * cbModelParam._m0[1u].z;
        }
        _2267 = frontier_phi_25_49_ladder_2;
        _2269 = frontier_phi_25_49_ladder_1;
        _2271 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _2251 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1252, _1253, _1254), _2178);
        _2267 = _2251.x * cbModelParam._m0[1u].z;
        _2269 = _2251.y * cbModelParam._m0[1u].z;
        _2271 = _2251.z * cbModelParam._m0[1u].z;
    }
    float _2283 = ((((1.0 - _1273) * ((_1260 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_1273 * _1260)) * _1244;
    float _2284 = _2283 * ((cbModelParam._m0[1u].w * (_2267 - _2169)) + _2169);
    float _2285 = _2283 * ((cbModelParam._m0[1u].w * (_2269 - _2171)) + _2171);
    float _2286 = _2283 * ((cbModelParam._m0[1u].w * (_2271 - _2173)) + _2173);
    float _2289 = fma(_2286, cbSceneParam._m0[89u].z, fma(_2285, cbSceneParam._m0[89u].y, _2284 * cbSceneParam._m0[89u].x));
    float _2292 = fma(_2286, cbSceneParam._m0[90u].z, fma(_2285, cbSceneParam._m0[90u].y, _2284 * cbSceneParam._m0[90u].x));
    float _2295 = fma(_2286, cbSceneParam._m0[91u].z, fma(_2285, cbSceneParam._m0[91u].y, _2284 * cbSceneParam._m0[91u].x));
    uvec4 _2305 = floatBitsToUint(cbInstanceData._m0[_291 + 5u]);
    uint _2307 = _2305.x * 14u;
    uint _2308 = _2307 + 13u;
    float _2315 = _1244 + (-1.0);
    float _2320 = (cbLight._m0[_2308].x * _2315) + 1.0;
    float _2321 = (cbLight._m0[_2308].y * _2315) + 1.0;
    float _2322 = (cbLight._m0[_2308].z * _2315) + 1.0;
    float _2323 = (cbLight._m0[_2308].w * _2315) + 1.0;
    uint _2324 = _2307 + 5u;
    float _2330 = isnan(1.0) ? _2321 : (isnan(_2321) ? 1.0 : min(_2321, 1.0));
    uint _2334 = _2307 + 4u;
    float _2340 = isnan(1.0) ? _2320 : (isnan(_2320) ? 1.0 : min(_2320, 1.0));
    uint _2344 = _2307 | 1u;
    float _2355 = dot(vec3(cbLight._m0[_2307].xyz), vec3(_1082, _1083, _1084));
    float _2358 = dot(vec3(cbLight._m0[_2344].xyz), vec3(_1082, _1083, _1084));
    float _4630 = isnan(0.0) ? _2355 : (isnan(_2355) ? 0.0 : max(_2355, 0.0));
    float _4641 = isnan(0.0) ? _2358 : (isnan(_2358) ? 0.0 : max(_2358, 0.0));
    float _2363 = (isnan(1.0) ? _4630 : (isnan(_4630) ? 1.0 : min(_4630, 1.0))) * 0.3183098733425140380859375;
    float _2365 = (isnan(1.0) ? _4641 : (isnan(_4641) ? 1.0 : min(_4641, 1.0))) * 0.3183098733425140380859375;
    float _2372 = ((cbLight._m0[_2324].x * _2330) * _2365) + ((cbLight._m0[_2334].x * _2340) * _2363);
    float _2373 = ((_2330 * cbLight._m0[_2324].y) * _2365) + ((_2340 * cbLight._m0[_2334].y) * _2363);
    float _2374 = ((_2330 * cbLight._m0[_2324].z) * _2365) + ((_2340 * cbLight._m0[_2334].z) * _2363);
    uvec4 _2378 = floatBitsToUint(cbLight._m0[_2307 + 12u]);
    bool _2380 = _2378.x == 0u;
    float _2391;
    float _2393;
    float _2395;
    if (_2380)
    {
        _2391 = _2372;
        _2393 = _2373;
        _2395 = _2374;
    }
    else
    {
        uint _2399 = _2307 + 6u;
        float _2415 = (dot(vec3(cbLight._m0[_2307 + 2u].xyz), vec3(_1082, _1083, _1084)) * 0.5) + 0.5;
        float _2416 = _2415 * _2415;
        float _4652 = isnan(0.0) ? _2416 : (isnan(_2416) ? 0.0 : max(_2416, 0.0));
        float _2417 = isnan(1.0) ? _4652 : (isnan(_4652) ? 1.0 : min(_4652, 1.0));
        float _2418 = isnan(1.0) ? _2322 : (isnan(_2322) ? 1.0 : min(_2322, 1.0));
        _2391 = (((cbLight._m0[_2399].x * 0.3183098733425140380859375) * _2417) * _2418) + _2372;
        _2393 = (((cbLight._m0[_2399].y * 0.3183098733425140380859375) * _2417) * _2418) + _2373;
        _2395 = (((cbLight._m0[_2399].z * 0.3183098733425140380859375) * _2417) * _2418) + _2374;
    }
    bool _2398 = _2378.y == 0u;
    float _2436;
    float _2438;
    float _2440;
    if (_2398)
    {
        _2436 = _2391;
        _2438 = _2393;
        _2440 = _2395;
    }
    else
    {
        uint _2595 = _2307 + 7u;
        float _2611 = (dot(vec3(cbLight._m0[_2307 + 3u].xyz), vec3(_1082, _1083, _1084)) * 0.5) + 0.5;
        float _2612 = _2611 * _2611;
        float _4668 = isnan(0.0) ? _2612 : (isnan(_2612) ? 0.0 : max(_2612, 0.0));
        float _2613 = isnan(1.0) ? _4668 : (isnan(_4668) ? 1.0 : min(_4668, 1.0));
        float _2614 = isnan(1.0) ? _2323 : (isnan(_2323) ? 1.0 : min(_2323, 1.0));
        _2436 = (((cbLight._m0[_2595].x * 0.3183098733425140380859375) * _2613) * _2614) + _2391;
        _2438 = (((cbLight._m0[_2595].y * 0.3183098733425140380859375) * _2613) * _2614) + _2393;
        _2440 = (((cbLight._m0[_2595].z * 0.3183098733425140380859375) * _2613) * _2614) + _2395;
    }
    uint _2443 = _2307 + 8u;
    float _2456 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2307].w)) * _1085) * 0.949999988079071044921875);
    float _2457 = _2456 * _2456;
    float _2458 = cbLight._m0[_2307].x + _1161;
    float _2459 = cbLight._m0[_2307].y + _1162;
    float _2460 = cbLight._m0[_2307].z + _1163;
    float _2464 = inversesqrt(dot(vec3(_2458, _2459, _2460), vec3(_2458, _2459, _2460)));
    float _2465 = _2464 * _2458;
    float _2466 = _2464 * _2459;
    float _2467 = _2464 * _2460;
    float _2468 = dot(vec3(_1082, _1083, _1084), vec3(cbLight._m0[_2307].xyz));
    float _4684 = isnan(0.0) ? _2468 : (isnan(_2468) ? 0.0 : max(_2468, 0.0));
    float _2471 = isnan(1.0) ? _4684 : (isnan(_4684) ? 1.0 : min(_4684, 1.0));
    float _4695 = isnan(0.0) ? _1245 : (isnan(_1245) ? 0.0 : max(_1245, 0.0));
    float _2472 = isnan(1.0) ? _4695 : (isnan(_4695) ? 1.0 : min(_4695, 1.0));
    float _2473 = dot(vec3(_1082, _1083, _1084), vec3(_2465, _2466, _2467));
    float _4706 = isnan(0.0) ? _2473 : (isnan(_2473) ? 0.0 : max(_2473, 0.0));
    float _2476 = isnan(1.0) ? _4706 : (isnan(_4706) ? 1.0 : min(_4706, 1.0));
    float _2477 = dot(vec3(cbLight._m0[_2307].xyz), vec3(_2465, _2466, _2467));
    float _4717 = isnan(0.0) ? _2477 : (isnan(_2477) ? 0.0 : max(_2477, 0.0));
    float _2481 = _2457 * _2457;
    float _2485 = ((_2476 * _2476) * (_2481 + (-1.0))) + 1.0;
    float _2496 = (exp2(log2(1.0 - (isnan(1.0) ? _4717 : (isnan(_4717) ? 1.0 : min(_4717, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2497 = 1.0 - _2457;
    float _2508 = (0.5 / (((_2472 * ((_2471 * _2497) + _2457)) + 9.9999999392252902907785028219223e-09) + (((_2472 * _2497) + _2457) * _2471))) * _2471;
    float _4728 = isnan(0.0) ? _2508 : (isnan(_2508) ? 0.0 : max(_2508, 0.0));
    float _2510 = (isnan(1.0) ? _4728 : (isnan(_4728) ? 1.0 : min(_4728, 1.0))) * (_2481 / ((_2485 * _2485) * 3.141590118408203125));
    uint _2521 = _2307 + 9u;
    float _2532 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2344].w)) * _1085) * 0.949999988079071044921875);
    float _2533 = _2532 * _2532;
    float _2534 = cbLight._m0[_2344].x + _1161;
    float _2535 = cbLight._m0[_2344].y + _1162;
    float _2536 = cbLight._m0[_2344].z + _1163;
    float _2540 = inversesqrt(dot(vec3(_2534, _2535, _2536), vec3(_2534, _2535, _2536)));
    float _2541 = _2540 * _2534;
    float _2542 = _2540 * _2535;
    float _2543 = _2540 * _2536;
    float _2544 = dot(vec3(_1082, _1083, _1084), vec3(cbLight._m0[_2344].xyz));
    float _4739 = isnan(0.0) ? _2544 : (isnan(_2544) ? 0.0 : max(_2544, 0.0));
    float _2547 = isnan(1.0) ? _4739 : (isnan(_4739) ? 1.0 : min(_4739, 1.0));
    float _2548 = dot(vec3(_1082, _1083, _1084), vec3(_2541, _2542, _2543));
    float _4750 = isnan(0.0) ? _2548 : (isnan(_2548) ? 0.0 : max(_2548, 0.0));
    float _2551 = isnan(1.0) ? _4750 : (isnan(_4750) ? 1.0 : min(_4750, 1.0));
    float _2552 = dot(vec3(cbLight._m0[_2344].xyz), vec3(_2541, _2542, _2543));
    float _4761 = isnan(0.0) ? _2552 : (isnan(_2552) ? 0.0 : max(_2552, 0.0));
    float _2556 = _2533 * _2533;
    float _2560 = ((_2551 * _2551) * (_2556 + (-1.0))) + 1.0;
    float _2569 = (exp2(log2(1.0 - (isnan(1.0) ? _4761 : (isnan(_4761) ? 1.0 : min(_4761, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2570 = 1.0 - _2533;
    float _2580 = (0.5 / (((_2472 * ((_2547 * _2570) + _2533)) + 9.9999999392252902907785028219223e-09) + (((_2472 * _2570) + _2533) * _2547))) * _2547;
    float _4772 = isnan(0.0) ? _2580 : (isnan(_2580) ? 0.0 : max(_2580, 0.0));
    float _2582 = (isnan(1.0) ? _4772 : (isnan(_4772) ? 1.0 : min(_4772, 1.0))) * (_2556 / ((_2560 * _2560) * 3.141590118408203125));
    float _2592 = (((_2569 * cbLight._m0[_2521].x) * _2582) * _2330) + (((_2496 * cbLight._m0[_2443].x) * _2510) * _2340);
    float _2593 = (((_2569 * cbLight._m0[_2521].y) * _2582) * _2330) + (((_2496 * cbLight._m0[_2443].y) * _2510) * _2340);
    float _2594 = (((_2569 * cbLight._m0[_2521].z) * _2582) * _2330) + (((_2496 * cbLight._m0[_2443].z) * _2510) * _2340);
    float _2656;
    float _2658;
    float _2660;
    if (_2380)
    {
        _2656 = _2592;
        _2658 = _2593;
        _2660 = _2594;
    }
    else
    {
        uint _2662 = _2307 + 2u;
        uint _2666 = _2307 + 10u;
        float _2680 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2662].w)) * _1085) * 0.949999988079071044921875);
        float _2681 = _2680 * _2680;
        float _2682 = cbLight._m0[_2662].x + _1161;
        float _2683 = cbLight._m0[_2662].y + _1162;
        float _2684 = cbLight._m0[_2662].z + _1163;
        float _2688 = inversesqrt(dot(vec3(_2682, _2683, _2684), vec3(_2682, _2683, _2684)));
        float _2689 = _2688 * _2682;
        float _2690 = _2688 * _2683;
        float _2691 = _2688 * _2684;
        float _2692 = dot(vec3(_1082, _1083, _1084), vec3(cbLight._m0[_2662].xyz));
        float _4783 = isnan(0.0) ? _2692 : (isnan(_2692) ? 0.0 : max(_2692, 0.0));
        float _2695 = isnan(1.0) ? _4783 : (isnan(_4783) ? 1.0 : min(_4783, 1.0));
        float _2696 = dot(vec3(_1082, _1083, _1084), vec3(_2689, _2690, _2691));
        float _4794 = isnan(0.0) ? _2696 : (isnan(_2696) ? 0.0 : max(_2696, 0.0));
        float _2699 = isnan(1.0) ? _4794 : (isnan(_4794) ? 1.0 : min(_4794, 1.0));
        float _2700 = dot(vec3(cbLight._m0[_2662].xyz), vec3(_2689, _2690, _2691));
        float _4805 = isnan(0.0) ? _2700 : (isnan(_2700) ? 0.0 : max(_2700, 0.0));
        float _2704 = _2681 * _2681;
        float _2708 = ((_2699 * _2699) * (_2704 + (-1.0))) + 1.0;
        float _2717 = (exp2(log2(1.0 - (isnan(1.0) ? _4805 : (isnan(_4805) ? 1.0 : min(_4805, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2718 = 1.0 - _2681;
        float _2728 = (0.5 / (((_2472 * ((_2695 * _2718) + _2681)) + 9.9999999392252902907785028219223e-09) + (((_2472 * _2718) + _2681) * _2695))) * _2695;
        float _4816 = isnan(0.0) ? _2728 : (isnan(_2728) ? 0.0 : max(_2728, 0.0));
        float _2730 = (isnan(1.0) ? _4816 : (isnan(_4816) ? 1.0 : min(_4816, 1.0))) * (_2704 / ((_2708 * _2708) * 3.141590118408203125));
        float _2731 = isnan(1.0) ? _2322 : (isnan(_2322) ? 1.0 : min(_2322, 1.0));
        _2656 = (((_2717 * cbLight._m0[_2666].x) * _2730) * _2731) + _2592;
        _2658 = (((_2717 * cbLight._m0[_2666].y) * _2730) * _2731) + _2593;
        _2660 = (((_2717 * cbLight._m0[_2666].z) * _2730) * _2731) + _2594;
    }
    float _2766;
    float _2768;
    float _2770;
    if (_2398)
    {
        _2766 = _2656;
        _2768 = _2658;
        _2770 = _2660;
    }
    else
    {
        uint _2777 = _2307 + 3u;
        uint _2781 = _2307 + 11u;
        float _2795 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2777].w)) * _1085) * 0.949999988079071044921875);
        float _2796 = _2795 * _2795;
        float _2797 = cbLight._m0[_2777].x + _1161;
        float _2798 = cbLight._m0[_2777].y + _1162;
        float _2799 = cbLight._m0[_2777].z + _1163;
        float _2803 = inversesqrt(dot(vec3(_2797, _2798, _2799), vec3(_2797, _2798, _2799)));
        float _2804 = _2803 * _2797;
        float _2805 = _2803 * _2798;
        float _2806 = _2803 * _2799;
        float _2807 = dot(vec3(_1082, _1083, _1084), vec3(cbLight._m0[_2777].xyz));
        float _4832 = isnan(0.0) ? _2807 : (isnan(_2807) ? 0.0 : max(_2807, 0.0));
        float _2810 = isnan(1.0) ? _4832 : (isnan(_4832) ? 1.0 : min(_4832, 1.0));
        float _2811 = dot(vec3(_1082, _1083, _1084), vec3(_2804, _2805, _2806));
        float _4843 = isnan(0.0) ? _2811 : (isnan(_2811) ? 0.0 : max(_2811, 0.0));
        float _2814 = isnan(1.0) ? _4843 : (isnan(_4843) ? 1.0 : min(_4843, 1.0));
        float _2815 = dot(vec3(cbLight._m0[_2777].xyz), vec3(_2804, _2805, _2806));
        float _4854 = isnan(0.0) ? _2815 : (isnan(_2815) ? 0.0 : max(_2815, 0.0));
        float _2819 = _2796 * _2796;
        float _2823 = ((_2814 * _2814) * (_2819 + (-1.0))) + 1.0;
        float _2832 = (exp2(log2(1.0 - (isnan(1.0) ? _4854 : (isnan(_4854) ? 1.0 : min(_4854, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2833 = 1.0 - _2796;
        float _2843 = (0.5 / (((_2472 * ((_2810 * _2833) + _2796)) + 9.9999999392252902907785028219223e-09) + (((_2472 * _2833) + _2796) * _2810))) * _2810;
        float _4865 = isnan(0.0) ? _2843 : (isnan(_2843) ? 0.0 : max(_2843, 0.0));
        float _2845 = (isnan(1.0) ? _4865 : (isnan(_4865) ? 1.0 : min(_4865, 1.0))) * (_2819 / ((_2823 * _2823) * 3.141590118408203125));
        float _2846 = isnan(1.0) ? _2323 : (isnan(_2323) ? 1.0 : min(_2323, 1.0));
        _2766 = (((_2832 * cbLight._m0[_2781].x) * _2845) * _2846) + _2656;
        _2768 = (((_2832 * cbLight._m0[_2781].y) * _2845) * _2846) + _2658;
        _2770 = (((_2832 * cbLight._m0[_2781].z) * _2845) * _2846) + _2660;
    }
    float _2981;
    float _2983;
    float _2985;
    float _2987;
    float _2989;
    float _2991;
    if (_2305.y == 0u)
    {
        float _2921 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2922 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2921;
        float _2923 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2921;
        float _2924 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2921;
        uvec4 _2936 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2937 = _2936.x;
        uint _2948 = uint((float(_2936.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1182) / _2937))) + floor(float(uint(cbSceneParam._m0[85u].x * _1181) / _2937)));
        float _2958 = (log2(_2924 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2959 = isnan(0.0) ? _2958 : (isnan(_2958) ? 0.0 : max(_2958, 0.0));
        uint _2962 = uint(isnan(14.0) ? _2959 : (isnan(_2959) ? 14.0 : min(_2959, 14.0)));
        uvec4 _2967 = texelFetch(g_lightClusterGridBuffer, int(((_2962 << 2u) + (_2948 << 6u)) >> 2u));
        uint _2968 = _2967.x;
        uint _2969 = _2936.z;
        float _3069;
        float _3071;
        float _3073;
        float _3075;
        float _3077;
        float _3079;
        if (((((1u << ((_2969 >> 4u) & 15u)) + 4294967295u) & _2968) == 0u) || ((_2969 & 240u) == 0u))
        {
            _3069 = 0.0;
            _3071 = 0.0;
            _3073 = 0.0;
            _3075 = 0.0;
            _3077 = 0.0;
            _3079 = 0.0;
        }
        else
        {
            float _3070;
            float _3072;
            float _3074;
            float _3076;
            float _3078;
            float _3080;
            float _3221 = 0.0;
            float _3222 = 0.0;
            float _3223 = 0.0;
            float _3224 = 0.0;
            float _3225 = 0.0;
            float _3226 = 0.0;
            uint _3227 = 0u;
            uint _3236;
            bool _3237;
            for (;;)
            {
                _3236 = texelFetch(g_lightClassification, int((((_2962 << 5u) + (_2948 << 9u)) + (_3227 << 2u)) >> 2u)).x;
                _3237 = _3236 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3237)
                {
                    frontier_phi_66_pred = _3221;
                    frontier_phi_66_pred_1 = _3226;
                    frontier_phi_66_pred_2 = _3225;
                    frontier_phi_66_pred_3 = _3224;
                    frontier_phi_66_pred_4 = _3223;
                    frontier_phi_66_pred_5 = _3222;
                }
                else
                {
                    float _3366;
                    float _3367;
                    float _3368;
                    float _3369;
                    float _3370;
                    float _3371;
                    uint _3372;
                    _3366 = _3221;
                    _3367 = _3222;
                    _3368 = _3223;
                    _3369 = _3224;
                    _3370 = _3225;
                    _3371 = _3226;
                    _3372 = _3236;
                    float _3293;
                    float _3294;
                    float _3295;
                    float _3296;
                    float _3297;
                    float _3298;
                    for (;;)
                    {
                        uint _3376 = uint(findLSB(_3372)) + (_3227 << 5u);
                        uint _3373 = (_3372 + 4294967295u) & _3372;
                        uint _3378 = _3376 * 48u;
                        vec4 _3392 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3378)).x, texelFetch(g_PointLightRenderingBuffer, int(_3378 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3378 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3378 + 3u)).x));
                        uint _3398 = (_3376 * 48u) + 4u;
                        vec4 _3411 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3398)).x, texelFetch(g_PointLightRenderingBuffer, int(_3398 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3398 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3398 + 3u)).x));
                        uint _3417 = (_3376 * 48u) + 8u;
                        vec3 _3428 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3417)).x, texelFetch(g_PointLightRenderingBuffer, int(_3417 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3417 + 2u)).x));
                        float _3432 = _3392.x - _2922;
                        float _3433 = _3392.y - _2923;
                        float _3434 = _3392.z - _2924;
                        float _3435 = dot(vec3(_3432, _3433, _3434), vec3(_3432, _3433, _3434));
                        float _3438 = inversesqrt(_3435);
                        float _3439 = _3438 * _3432;
                        float _3440 = _3438 * _3433;
                        float _3441 = _3438 * _3434;
                        float _3442 = dot(vec3(_1200, _1203, _1206), vec3(_3439, _3440, _3441));
                        float _3447 = 1.0 - (_3435 * _3392.w);
                        float _4891 = isnan(0.0) ? _3447 : (isnan(_3447) ? 0.0 : max(_3447, 0.0));
                        float _3448 = isnan(1.0) ? _4891 : (isnan(_4891) ? 1.0 : min(_4891, 1.0));
                        float _3449 = sqrt(_3435) * _3411.w;
                        float _3452 = 1.39999997615814208984375 / (_3449 + 1.39999997615814208984375);
                        float _3453 = _3452 * _3452;
                        float _3456 = ((1.0 - _3453) * _3442) + _3453;
                        float _3459 = _3449 * _3449;
                        float _3463 = ((isnan(0.0) ? _3456 : (isnan(_3456) ? 0.0 : max(_3456, 0.0))) * _3448) / ((_3459 * 0.699999988079071044921875) + 1.0);
                        float _3467 = (-0.0) - _2922;
                        float _3468 = (-0.0) - _2923;
                        float _3469 = (-0.0) - _2924;
                        float _3473 = inversesqrt(dot(vec3(_3467, _3468, _3469), vec3(_3467, _3468, _3469)));
                        float _3474 = _3473 * _3467;
                        float _3475 = _3473 * _3468;
                        float _3476 = _3473 * _3469;
                        float _3484 = exp2(log2(1.0 / ((_3459 * 3.5) + 5.0)) * 0.25);
                        float _3485 = 1.0 - _1260;
                        float _3492 = sqrt(1.0 - ((1.0 - (_3485 * _3485)) * (1.0 - (_3484 * _3484))));
                        float _3493 = _3492 * _3492;
                        float _3494 = _3493 * _3493;
                        float _3495 = _3474 + _3439;
                        float _3496 = _3475 + _3440;
                        float _3497 = _3476 + _3441;
                        float _3501 = inversesqrt(dot(vec3(_3495, _3496, _3497), vec3(_3495, _3496, _3497)));
                        float _3505 = dot(vec3(_1200, _1203, _1206), vec3(_3474, _3475, _3476));
                        float _4907 = isnan(0.0) ? _3505 : (isnan(_3505) ? 0.0 : max(_3505, 0.0));
                        float _3508 = isnan(1.0) ? _4907 : (isnan(_4907) ? 1.0 : min(_4907, 1.0));
                        float _3509 = dot(vec3(_1200, _1203, _1206), vec3(_3501 * _3495, _3501 * _3496, _3501 * _3497));
                        float _4918 = isnan(0.0) ? _3509 : (isnan(_3509) ? 0.0 : max(_3509, 0.0));
                        float _3512 = isnan(1.0) ? _4918 : (isnan(_4918) ? 1.0 : min(_4918, 1.0));
                        float _3516 = ((_3512 * _3512) * (_3494 + (-1.0))) + 1.0;
                        float _3517 = _3452 * _3493;
                        float _3518 = _3517 * _3517;
                        float _3521 = ((1.0 - _3518) * _3442) + _3518;
                        float _4929 = isnan(0.0) ? _3521 : (isnan(_3521) ? 0.0 : max(_3521, 0.0));
                        float _3522 = isnan(1.0) ? _4929 : (isnan(_4929) ? 1.0 : min(_4929, 1.0));
                        float _3523 = 1.0 - _3493;
                        float _3533 = (0.5 / (((_3522 * ((_3508 * _3523) + _3493)) + 9.9999999392252902907785028219223e-09) + (((_3522 * _3523) + _3493) * _3508))) * _3522;
                        float _4940 = isnan(0.0) ? _3533 : (isnan(_3533) ? 0.0 : max(_3533, 0.0));
                        float _3544 = (((_3494 * 3.1415927410125732421875) * (isnan(1.0) ? _4940 : (isnan(_4940) ? 1.0 : min(_4940, 1.0)))) / ((_3516 * _3516) * ((_3459 * 2.1991131305694580078125) + 3.141590118408203125))) * _3448;
                        _3296 = (_3463 * _3411.x) + _3369;
                        _3297 = (_3463 * _3411.y) + _3370;
                        _3298 = (_3463 * _3411.z) + _3371;
                        _3293 = (_3544 * _3428.x) + _3366;
                        _3294 = (_3544 * _3428.y) + _3367;
                        _3295 = (_3544 * _3428.z) + _3368;
                        if (_3373 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3366 = _3293;
                            _3367 = _3294;
                            _3368 = _3295;
                            _3369 = _3296;
                            _3370 = _3297;
                            _3371 = _3298;
                            _3372 = _3373;
                        }
                    }
                    frontier_phi_66_pred = _3293;
                    frontier_phi_66_pred_1 = _3298;
                    frontier_phi_66_pred_2 = _3297;
                    frontier_phi_66_pred_3 = _3296;
                    frontier_phi_66_pred_4 = _3295;
                    frontier_phi_66_pred_5 = _3294;
                }
                _3070 = frontier_phi_66_pred;
                _3080 = frontier_phi_66_pred_1;
                _3078 = frontier_phi_66_pred_2;
                _3076 = frontier_phi_66_pred_3;
                _3074 = frontier_phi_66_pred_4;
                _3072 = frontier_phi_66_pred_5;
                uint _3228 = _3227 + 1u;
                if (_3228 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3221 = _3070;
                    _3222 = _3072;
                    _3223 = _3074;
                    _3224 = _3076;
                    _3225 = _3078;
                    _3226 = _3080;
                    _3227 = _3228;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3069 = _3070;
            _3071 = _3072;
            _3073 = _3074;
            _3075 = _3076;
            _3077 = _3078;
            _3079 = _3080;
        }
        uvec4 _3083 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3084 = _3083.z;
        uint _3086 = (_3084 >> 8u) & 15u;
        float _3189;
        float _3191;
        float _3193;
        float _3195;
        float _3197;
        float _3199;
        if (((4294967295u << _3086) & _2968) == 0u)
        {
            _3189 = _3069;
            _3191 = _3071;
            _3193 = _3073;
            _3195 = _3075;
            _3197 = _3077;
            _3199 = _3079;
        }
        else
        {
            float _3214 = inversesqrt(dot(vec3(_2922, _2923, _2924), vec3(_2922, _2923, _2924)));
            float _3215 = _3214 * _2922;
            float _3216 = _3214 * _2923;
            float _3217 = _3214 * _2924;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_3086 < ((_3084 >> 12u) & 15u))
            {
                float _3190;
                float _3192;
                float _3194;
                float _3196;
                float _3198;
                float _3200;
                float _3349 = _3069;
                float _3350 = _3071;
                float _3351 = _3073;
                float _3352 = _3075;
                float _3353 = _3077;
                float _3354 = _3079;
                uint _3355 = _3086;
                uint _3364;
                bool _3365;
                for (;;)
                {
                    _3364 = texelFetch(g_lightClassification, int((((_2962 << 5u) + (_2948 << 9u)) + (_3355 << 2u)) >> 2u)).x;
                    _3365 = _3364 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_3365)
                    {
                        frontier_phi_77_pred = _3354;
                        frontier_phi_77_pred_1 = _3353;
                        frontier_phi_77_pred_2 = _3352;
                        frontier_phi_77_pred_3 = _3351;
                        frontier_phi_77_pred_4 = _3350;
                        frontier_phi_77_pred_5 = _3349;
                    }
                    else
                    {
                        float _3558;
                        float _3559;
                        float _3560;
                        float _3561;
                        float _3562;
                        float _3563;
                        float _3851;
                        float _3852;
                        float _3853;
                        float _3854;
                        float _3855;
                        float _3856;
                        float _3571 = _3349;
                        float _3572 = _3350;
                        float _3573 = _3351;
                        float _3574 = _3352;
                        float _3575 = _3353;
                        float _3576 = _3354;
                        uint _3577 = _3364;
                        uint _3578;
                        vec4 _3603;
                        float _3604;
                        vec4 _3619;
                        vec3 _3631;
                        vec4 _3646;
                        vec4 _3661;
                        float _3707;
                        bool _3708;
                        for (;;)
                        {
                            uint _3588 = ((_3355 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3577));
                            _3578 = (_3577 + 4294967295u) & _3577;
                            uint _3590 = _3588 * 40u;
                            _3603 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3590)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3590 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3590 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3590 + 3u)).x));
                            _3604 = _3603.w;
                            uint _3606 = (_3588 * 40u) + 4u;
                            _3619 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3606)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3606 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3606 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3606 + 3u)).x));
                            uint _3621 = (_3588 * 40u) + 8u;
                            _3631 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3621)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3621 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3621 + 2u)).x));
                            uint _3633 = (_3588 * 40u) + 16u;
                            _3646 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3633)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3633 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3633 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3633 + 3u)).x));
                            uint _3648 = (_3588 * 40u) + 20u;
                            _3661 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3648)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3648 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3648 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3648 + 3u)).x));
                            uint _3663 = (_3588 * 40u) + 24u;
                            vec4 _3676 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3663)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3663 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3663 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3663 + 3u)).x));
                            uint _3682 = (_3588 * 40u) + 28u;
                            vec4 _3695 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3682)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3682 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3682 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3682 + 3u)).x));
                            _3707 = fma(_2924, _3695.z, fma(_2923, _3695.y, _3695.x * _2922)) + _3695.w;
                            _3708 = !((fma(_2924, _3676.z, fma(_2923, _3676.y, _3676.x * _2922)) + _3676.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3708)
                            {
                                float _3735 = _3603.x - _2922;
                                float _3736 = _3603.y - _2923;
                                float _3737 = _3603.z - _2924;
                                float _3738 = dot(vec3(_3735, _3736, _3737), vec3(_3735, _3736, _3737));
                                float _3741 = inversesqrt(_3738);
                                float _3742 = _3741 * _3735;
                                float _3743 = _3741 * _3736;
                                float _3744 = _3741 * _3737;
                                float _3748 = 1.0 - (_3738 / (_3604 * _3604));
                                float _4951 = isnan(0.0) ? _3748 : (isnan(_3748) ? 0.0 : max(_3748, 0.0));
                                float _3749 = isnan(1.0) ? _4951 : (isnan(_4951) ? 1.0 : min(_4951, 1.0));
                                float _3753 = sqrt(_3738) * _3619.w;
                                float _3755 = 1.39999997615814208984375 / (_3753 + 1.39999997615814208984375);
                                float _3756 = _3755 * _3755;
                                float _3759 = ((1.0 - _3756) * dot(vec3(_3742, _3743, _3744), vec3(_1200, _1203, _1206))) + _3756;
                                float _3762 = _3753 * _3753;
                                float _3766 = (fma(_2924, _3646.z, fma(_2923, _3646.y, _3646.x * _2922)) + _3646.w) / _3707;
                                float _3767 = (fma(_2924, _3661.z, fma(_2923, _3661.y, _3661.x * _2922)) + _3661.w) / _3707;
                                float _3771 = 1.0 - dot(vec2(_3766, _3767), vec2(_3766, _3767));
                                float _4967 = isnan(0.0) ? _3771 : (isnan(_3771) ? 0.0 : max(_3771, 0.0));
                                float _3772 = isnan(1.0) ? _4967 : (isnan(_4967) ? 1.0 : min(_4967, 1.0));
                                float _3773 = _3772 * (((isnan(0.0) ? _3759 : (isnan(_3759) ? 0.0 : max(_3759, 0.0))) * _3749) / ((_3762 * 0.699999988079071044921875) + 1.0));
                                float _3785 = exp2(log2(1.0 / ((_3762 * 3.5) + 5.0)) * 0.25);
                                float _3786 = 1.0 - _1260;
                                float _3793 = sqrt(1.0 - ((1.0 - (_3786 * _3786)) * (1.0 - (_3785 * _3785))));
                                float _3794 = _3793 * _3793;
                                float _3795 = _3794 * _3794;
                                float _3796 = _3742 - _3215;
                                float _3797 = _3743 - _3216;
                                float _3798 = _3744 - _3217;
                                float _3802 = inversesqrt(dot(vec3(_3796, _3797, _3798), vec3(_3796, _3797, _3798)));
                                float _3806 = dot(vec3(_1200, _1203, _1206), vec3((-0.0) - _3215, (-0.0) - _3216, (-0.0) - _3217));
                                float _4978 = isnan(0.0) ? _3806 : (isnan(_3806) ? 0.0 : max(_3806, 0.0));
                                float _3809 = isnan(1.0) ? _4978 : (isnan(_4978) ? 1.0 : min(_4978, 1.0));
                                float _3810 = dot(vec3(_1200, _1203, _1206), vec3(_3802 * _3796, _3802 * _3797, _3802 * _3798));
                                float _4989 = isnan(0.0) ? _3810 : (isnan(_3810) ? 0.0 : max(_3810, 0.0));
                                float _3813 = isnan(1.0) ? _4989 : (isnan(_4989) ? 1.0 : min(_4989, 1.0));
                                float _3817 = ((_3813 * _3813) * (_3795 + (-1.0))) + 1.0;
                                float _3818 = _3755 * _3794;
                                float _3819 = _3818 * _3818;
                                float _3825 = ((1.0 - _3819) * dot(vec3(_1200, _1203, _1206), vec3(_3742, _3743, _3744))) + _3819;
                                float _5000 = isnan(0.0) ? _3825 : (isnan(_3825) ? 0.0 : max(_3825, 0.0));
                                float _3826 = isnan(1.0) ? _5000 : (isnan(_5000) ? 1.0 : min(_5000, 1.0));
                                float _3827 = 1.0 - _3794;
                                float _3837 = (0.5 / (((_3826 * ((_3809 * _3827) + _3794)) + 9.9999999392252902907785028219223e-09) + (((_3826 * _3827) + _3794) * _3809))) * _3826;
                                float _5011 = isnan(0.0) ? _3837 : (isnan(_3837) ? 0.0 : max(_3837, 0.0));
                                float _3847 = (_3772 * _3749) * (((_3795 * 3.1415927410125732421875) * (isnan(1.0) ? _5011 : (isnan(_5011) ? 1.0 : min(_5011, 1.0)))) / ((_3817 * _3817) * ((_3762 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3773 * _3619.y;
                                frontier_phi_83_pred_1 = _3773 * _3619.x;
                                frontier_phi_83_pred_2 = _3847 * _3631.z;
                                frontier_phi_83_pred_3 = _3847 * _3631.y;
                                frontier_phi_83_pred_4 = _3847 * _3631.x;
                                frontier_phi_83_pred_5 = _3773 * _3619.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3855 = frontier_phi_83_pred;
                            _3854 = frontier_phi_83_pred_1;
                            _3853 = frontier_phi_83_pred_2;
                            _3852 = frontier_phi_83_pred_3;
                            _3851 = frontier_phi_83_pred_4;
                            _3856 = frontier_phi_83_pred_5;
                            _3561 = _3854 + _3574;
                            _3562 = _3855 + _3575;
                            _3563 = _3856 + _3576;
                            _3558 = _3851 + _3571;
                            _3559 = _3852 + _3572;
                            _3560 = _3853 + _3573;
                            if (_3578 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3571 = _3558;
                                _3572 = _3559;
                                _3573 = _3560;
                                _3574 = _3561;
                                _3575 = _3562;
                                _3576 = _3563;
                                _3577 = _3578;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3563;
                        frontier_phi_77_pred_1 = _3562;
                        frontier_phi_77_pred_2 = _3561;
                        frontier_phi_77_pred_3 = _3560;
                        frontier_phi_77_pred_4 = _3559;
                        frontier_phi_77_pred_5 = _3558;
                    }
                    _3200 = frontier_phi_77_pred;
                    _3198 = frontier_phi_77_pred_1;
                    _3196 = frontier_phi_77_pred_2;
                    _3194 = frontier_phi_77_pred_3;
                    _3192 = frontier_phi_77_pred_4;
                    _3190 = frontier_phi_77_pred_5;
                    uint _3356 = _3355 + 1u;
                    if (_3356 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3349 = _3190;
                        _3350 = _3192;
                        _3351 = _3194;
                        _3352 = _3196;
                        _3353 = _3198;
                        _3354 = _3200;
                        _3355 = _3356;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _3194;
                frontier_phi_58_59_ladder_1 = _3200;
                frontier_phi_58_59_ladder_2 = _3198;
                frontier_phi_58_59_ladder_3 = _3196;
                frontier_phi_58_59_ladder_4 = _3192;
                frontier_phi_58_59_ladder_5 = _3190;
            }
            else
            {
                frontier_phi_58_59_ladder = _3073;
                frontier_phi_58_59_ladder_1 = _3079;
                frontier_phi_58_59_ladder_2 = _3077;
                frontier_phi_58_59_ladder_3 = _3075;
                frontier_phi_58_59_ladder_4 = _3071;
                frontier_phi_58_59_ladder_5 = _3069;
            }
            _3189 = frontier_phi_58_59_ladder_5;
            _3191 = frontier_phi_58_59_ladder_4;
            _3193 = frontier_phi_58_59_ladder;
            _3195 = frontier_phi_58_59_ladder_3;
            _3197 = frontier_phi_58_59_ladder_2;
            _3199 = frontier_phi_58_59_ladder_1;
        }
        float _3204 = isnan(1.0) ? _1244 : (isnan(_1244) ? 1.0 : min(_1244, 1.0));
        _2981 = (_3204 * _3195) + _2436;
        _2983 = (_3204 * _3197) + _2438;
        _2985 = (_3204 * _3199) + _2440;
        _2987 = ((_3189 * 0.039999999105930328369140625) * _3204) + _2766;
        _2989 = ((_3191 * 0.039999999105930328369140625) * _3204) + _2768;
        _2991 = ((_3193 * 0.039999999105930328369140625) * _3204) + _2770;
    }
    else
    {
        _2981 = _2436;
        _2983 = _2438;
        _2985 = _2440;
        _2987 = _2766;
        _2989 = _2768;
        _2991 = _2770;
    }
    float _5027 = isnan(0.0) ? _1229 : (isnan(_1229) ? 0.0 : max(_1229, 0.0));
    float _5038 = isnan(0.0) ? _1230 : (isnan(_1230) ? 0.0 : max(_1230, 0.0));
    float _5049 = isnan(0.0) ? _1231 : (isnan(_1231) ? 0.0 : max(_1231, 0.0));
    float _3008 = ((isnan(1.0) ? _5027 : (isnan(_5027) ? 1.0 : min(_5027, 1.0))) * (_2981 + ((isnan(0.0) ? _1999 : (isnan(_1999) ? 0.0 : max(_1999, 0.0))) * _1244))) + ((_2987 + ((isnan(0.0) ? _2289 : (isnan(_2289) ? 0.0 : max(_2289, 0.0))) * _2078)) * cbPerFrame._m0[3u].x);
    float _3009 = ((isnan(1.0) ? _5038 : (isnan(_5038) ? 1.0 : min(_5038, 1.0))) * (_2983 + ((isnan(0.0) ? _2002 : (isnan(_2002) ? 0.0 : max(_2002, 0.0))) * _1244))) + ((_2989 + ((isnan(0.0) ? _2292 : (isnan(_2292) ? 0.0 : max(_2292, 0.0))) * _2078)) * cbPerFrame._m0[3u].x);
    float _3010 = ((isnan(1.0) ? _5049 : (isnan(_5049) ? 1.0 : min(_5049, 1.0))) * (_2985 + ((isnan(0.0) ? _2005 : (isnan(_2005) ? 0.0 : max(_2005, 0.0))) * _1244))) + ((_2991 + ((isnan(0.0) ? _2295 : (isnan(_2295) ? 0.0 : max(_2295, 0.0))) * _2078)) * cbPerFrame._m0[3u].x);
    uint _3011 = _291 + 6u;
    float _3019 = _1181 / cbSceneParam._m0[86u].x;
    float _3020 = _1182 / cbSceneParam._m0[86u].y;
    vec4 _3034 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3019, _3020, (log2((isnan(cbSceneParam._m0[77u].w) ? _1103 : (isnan(_1103) ? cbSceneParam._m0[77u].w : min(_1103, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3036 = _3034.x;
    float _3037 = _3034.y;
    float _3038 = _3034.z;
    float _3039 = _3034.w;
    float _3131;
    float _3133;
    float _3135;
    float _3137;
    if (_1103 > cbSceneParam._m0[78u].w)
    {
        float _3094 = isnan(_1103) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _1103 : min(cbSceneParam._m0[80u].w, _1103));
        float _3095 = _3094 / _1103;
        float _3106 = _3095 * _1154;
        float _3107 = _1155 * _3095;
        float _3108 = (-0.0) - _3107;
        float _3109 = _3095 * _1156;
        float _3111 = (cbSceneParam._m0[77u].w * _3108) / _3094;
        float _3112 = _3111 + cbSceneParam._m0[79u].w;
        float _3113 = cbSceneParam._m0[79u].w - _3107;
        float _3119 = sqrt(((_3106 * _3106) + (_3107 * _3107)) + (_3109 * _3109));
        float _3122 = (1.0 - (cbSceneParam._m0[77u].w / _3094)) * _3119;
        float _3127 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3129 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3306;
        if (abs((_3108 - _3111) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3306 = ((((_3112 > 0.0) ? exp2(_3127 * _3112) : (2.0 - exp2(_3129 * _3112))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3122;
        }
        else
        {
            float _3250 = 1.0 / cbSceneParam._m0[80u].x;
            float _3251 = isnan(_3113) ? _3112 : (isnan(_3112) ? _3113 : max(_3112, _3113));
            float _3252 = isnan(_3113) ? _3112 : (isnan(_3112) ? _3113 : min(_3112, _3113));
            float _3261 = isnan(0.0) ? _3251 : (isnan(_3251) ? 0.0 : min(_3251, 0.0));
            float _3262 = isnan(0.0) ? _3252 : (isnan(_3252) ? 0.0 : min(_3252, 0.0));
            _3306 = ((abs(_3119 / _3108) * cbSceneParam._m0[80u].y) * ((((_3261 - _3262) * 2.0) - ((exp2(_3127 * (isnan(0.0) ? _3251 : (isnan(_3251) ? 0.0 : max(_3251, 0.0)))) - exp2(_3127 * (isnan(0.0) ? _3252 : (isnan(_3252) ? 0.0 : max(_3252, 0.0))))) * _3250)) - ((exp2(_3129 * _3261) - exp2(_3129 * _3262)) * _3250))) + (_3122 * cbSceneParam._m0[80u].z);
        }
        vec4 _3308 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3019, _3020, 1.0), 0.0);
        float _3317 = exp2((_3306 * (-1.44269502162933349609375)) * (1.0 - _3308.w));
        float _3318 = log2(_3317);
        float _3334 = log2(_3039);
        _3131 = (exp2(_3334 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3318 * cbSceneParam._m0[78u].x)) * _3308.x) / cbSceneParam._m0[78u].x)) + _3036;
        _3133 = (exp2(_3334 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3318 * cbSceneParam._m0[78u].y)) * _3308.y) / cbSceneParam._m0[78u].y)) + _3037;
        _3135 = (exp2(_3334 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3318 * cbSceneParam._m0[78u].z)) * _3308.z) / cbSceneParam._m0[78u].z)) + _3038;
        _3137 = _3317 * _3039;
    }
    else
    {
        _3131 = _3036;
        _3133 = _3037;
        _3135 = _3038;
        _3137 = _3039;
    }
    bool _3344;
    vec4 _3147;
    vec4 _3169;
    float _3171;
    float _3175;
    float _3176;
    float _3177;
    float _3178;
    bool _3188;
    for (;;)
    {
        _3147 = cbMatDynParam._m0[0u];
        float _3149 = roundEven(_3147.y);
        bool _3150 = _3149 == 3.0;
        float _3151 = log2(_3137);
        float _3158 = exp2(_3151 * cbSceneParam._m0[78u].x) * _3008;
        float _3159 = exp2(_3151 * cbSceneParam._m0[78u].y) * _3009;
        float _3160 = exp2(_3151 * cbSceneParam._m0[78u].z) * _3010;
        float _3167 = _1170 + (-0.5);
        _3169 = cbMtdParam._m0[1u];
        _3171 = _3169.y * _3167;
        float _3174 = (_3149 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3175 = _3174 * (_3150 ? _3158 : (_3158 + (cbSceneParam._m0[72u].w * _3131)));
        _3176 = _3174 * (_3150 ? _3159 : (_3159 + (cbSceneParam._m0[72u].w * _3133)));
        _3177 = _3174 * (_3150 ? _3160 : (_3160 + (cbSceneParam._m0[72u].w * _3135)));
        _3178 = _3167 * 0.999000012874603271484375;
        _3188 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3188)
        {
            if ((cbInstanceData._m0[_291 + 7u].x + _3178) < 0.5)
            {
                _3344 = true;
                break;
            }
        }
        uint _3285 = _1219 + uint(_3147.w);
        if ((cbInstanceData._m0[_3285].w < 1.0) && ((cbInstanceData._m0[_3285].w + _3178) < 0.5))
        {
            _3344 = true;
            break;
        }
        if ((_3171 + 1.0) < _3169.x)
        {
            _3344 = true;
            break;
        }
        _3344 = false;
        break;
    }
    float _3549;
    if (_3344)
    {
        discard_state = true;
        _3549 = 0.0;
    }
    else
    {
        _3549 = cbInstanceData._m0[_3011].w;
    }
    SV_Target.x = _3175;
    SV_Target.y = _3176;
    SV_Target.z = _3177;
    SV_Target.w = _3549;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_3011].w;
    discard_exit();
}


