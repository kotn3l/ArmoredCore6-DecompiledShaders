#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_0;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 13) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_22;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_29;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_10;
layout(set = 0, binding = 20) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_6;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1487;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _236 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _237 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _238 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _244 = inversesqrt(dot(vec3(_236, _237, _238), vec3(_236, _237, _238)));
    float _245 = _244 * _236;
    float _246 = _244 * _237;
    float _247 = _244 * _238;
    float _251 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _252 = _251 * NORMAL.x;
    float _253 = _251 * NORMAL.y;
    float _254 = _251 * NORMAL.z;
    float _258 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _259 = _258 * TANGENT.x;
    float _260 = _258 * TANGENT.y;
    float _261 = _258 * TANGENT.z;
    float _270 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _272 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _273 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3815 = isnan(0.0) ? _270 : (isnan(_270) ? 0.0 : max(_270, 0.0));
    float _3826 = isnan(0.0) ? _272 : (isnan(_272) ? 0.0 : max(_272, 0.0));
    float _3837 = isnan(0.0) ? _273 : (isnan(_273) ? 0.0 : max(_273, 0.0));
    uint _283 = uint(roundEven(NORMAL.w)) * 13u;
    uint _288 = _283 + 1u;
    uint _292 = _283 + 2u;
    float _301 = sqrt(((cbInstanceData._m0[_288].x * cbInstanceData._m0[_288].x) + (cbInstanceData._m0[_283].x * cbInstanceData._m0[_283].x)) + (cbInstanceData._m0[_292].x * cbInstanceData._m0[_292].x));
    float _302 = _301 * TEXCOORD.z;
    float _303 = _301 * TEXCOORD.w;
    vec4 _316 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _302) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _303) + cbTextureTilingScale._m0[13u].w));
    vec4 _339 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _365 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _370 = _365.x * cbMtdParam._m0[11u].x;
    float _371 = _365.y * cbMtdParam._m0[11u].y;
    float _372 = _365.z * cbMtdParam._m0[11u].z;
    vec4 _391 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _302) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _303) + cbTextureTilingScale._m0[5u].w));
    vec4 _410 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _445 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _447 = _445.x;
    float _459 = dot(vec4(_447, _445.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _476 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _410.x) * 2.0) - ((((_447 - _459) * cbMtdParam._m0[24u].z) + _459) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3848 = isnan(0.0) ? _476 : (isnan(_476) ? 0.0 : max(_476, 0.0));
    float _477 = isnan(1.0) ? _3848 : (isnan(_3848) ? 1.0 : min(_3848, 1.0));
    float _484 = (_477 * ((_391.x * cbMtdParam._m0[12u].x) - _370)) + _370;
    float _485 = (_477 * ((_391.y * cbMtdParam._m0[12u].y) - _371)) + _371;
    float _486 = (_477 * ((_391.z * cbMtdParam._m0[12u].z) - _372)) + _372;
    vec4 _503 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _302) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _303) + cbTextureTilingScale._m0[3u].w));
    vec4 _523 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _525 = _523.x;
    float _535 = dot(vec4(_525, _523.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _549 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _410.y) * 2.0) - ((((_525 - _535) * cbMtdParam._m0[24u].z) + _535) * cbMtdParam._m0[20u].w))) + 1.0;
    float _3859 = isnan(0.0) ? _549 : (isnan(_549) ? 0.0 : max(_549, 0.0));
    float _550 = isnan(1.0) ? _3859 : (isnan(_3859) ? 1.0 : min(_3859, 1.0));
    float _560 = (_339.x * cbMtdParam._m0[9u].x) * ((_550 * ((_503.x * cbMtdParam._m0[13u].x) - _484)) + _484);
    float _561 = (_339.y * cbMtdParam._m0[9u].y) * ((_550 * ((_503.y * cbMtdParam._m0[13u].y) - _485)) + _485);
    float _562 = (_339.z * cbMtdParam._m0[9u].z) * ((_550 * ((_503.z * cbMtdParam._m0[13u].z) - _486)) + _486);
    float _566 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _316.x) * _560;
    float _569 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _316.y) * _561;
    float _572 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _316.z) * _562;
    float _580 = (((_560 - _566) * (isnan(1.0) ? _3815 : (isnan(_3815) ? 1.0 : min(_3815, 1.0)))) + _566) * 4.55000019073486328125;
    float _582 = (((_561 - _569) * (isnan(1.0) ? _3826 : (isnan(_3826) ? 1.0 : min(_3826, 1.0)))) + _569) * 4.55000019073486328125;
    float _584 = (((_562 - _572) * (isnan(1.0) ? _3837 : (isnan(_3837) ? 1.0 : min(_3837, 1.0)))) + _572) * 4.55000019073486328125;
    vec4 _601 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _302) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _303) + cbTextureTilingScale._m0[20u].w));
    vec4 _626 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _302) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _303) + cbTextureTilingScale._m0[4u].w));
    vec4 _643 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _645 = _643.x;
    float _646 = _643.y;
    float _647 = _643.z;
    float _654 = ((_626.x - _645) * _477) + _645;
    float _655 = ((_626.y - _646) * _477) + _646;
    float _656 = ((_626.z - _647) * _477) + _647;
    vec4 _668 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _302) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _303) + cbTextureTilingScale._m0[2u].w));
    float _681 = ((_668.z - _656) * _550) + _656;
    float _684 = ((((_668.x - _654) * _550) + _654) * 2.0) + (-1.0);
    float _685 = ((((_668.y - _655) * _550) + _655) * 2.0) + (-1.0);
    float _686 = dot(vec2(_684, _685), vec2(_684, _685));
    float _3870 = isnan(0.0) ? _686 : (isnan(_686) ? 0.0 : max(_686, 0.0));
    float _691 = sqrt(1.0 - (isnan(1.0) ? _3870 : (isnan(_3870) ? 1.0 : min(_3870, 1.0))));
    vec4 _709 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _721 = (_684 + ((((_601.x * 2.0) + (-1.0)) * TEXCOORD_11.x) * cbMtdParam._m0[20u].x)) + (((_709.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _722 = (_685 + ((((_601.y * 2.0) + (-1.0)) * TEXCOORD_11.y) * cbMtdParam._m0[20u].x)) + (((_709.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _725 = fma(_691, _252, fma(_722, _259, _721 * _245));
    float _728 = fma(_691, _253, fma(_722, _260, _721 * _246));
    float _731 = fma(_691, _254, fma(_722, _261, _721 * _247));
    float _735 = inversesqrt(dot(vec3(_725, _728, _731), vec3(_725, _728, _731)));
    vec4 _762 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _302) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _303) + cbTextureTilingScale._m0[11u].w));
    float _764 = _762.x;
    float _765 = 1.0 - _764;
    float _771 = (cbMtdParam._m0[19u].x + dot(vec4(_735 * _725, _735 * _728, _735 * _731, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_764 - _765) * cbMtdParam._m0[24u].w) + _765) * cbMtdParam._m0[21u].z);
    float _3881 = isnan(0.0) ? _771 : (isnan(_771) ? 0.0 : max(_771, 0.0));
    float _772 = isnan(1.0) ? _3881 : (isnan(_3881) ? 1.0 : min(_3881, 1.0));
    float _774 = (-0.0) - cbMtdParam._m0[24u].x;
    float _776 = isnan(0.0) ? _774 : (isnan(_774) ? 0.0 : max(_774, 0.0));
    float _777 = isnan(1.0) ? _776 : (isnan(_776) ? 1.0 : min(_776, 1.0));
    float _784 = _772 - ((_772 * TEXCOORD_8.x) * _777);
    float _785 = _772 - ((_772 * TEXCOORD_8.y) * _777);
    float _786 = _772 - ((_772 * TEXCOORD_8.z) * _777);
    float _793 = (_784 * (cbMtdParam._m0[17u].x - _580)) + _580;
    float _794 = (_785 * (cbMtdParam._m0[17u].y - _582)) + _582;
    float _795 = (_786 * (cbMtdParam._m0[17u].z - _584)) + _584;
    vec4 _807 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _302) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _303) + cbTextureTilingScale._m0[19u].w));
    float _809 = _807.x;
    float _810 = 1.0 - _809;
    float _836 = (TEXCOORD_8.x - ((cbMtdParam._m0[22u].w * (1.0 - TEXCOORD_8.x)) * ((((_809 - _810) * cbMtdParam._m0[24u].y) + _810) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3902 = isnan(0.0) ? _836 : (isnan(_836) ? 0.0 : max(_836, 0.0));
    float _837 = isnan(1.0) ? _3902 : (isnan(_3902) ? 1.0 : min(_3902, 1.0));
    float _845 = ((((cbMtdParam._m0[10u].x - _793) * TEXCOORD_8.x) * cbMtdParam._m0[23u].w) * _837) + _793;
    float _846 = ((((cbMtdParam._m0[10u].y - _794) * TEXCOORD_8.y) * cbMtdParam._m0[23u].w) * _837) + _794;
    float _847 = (((cbMtdParam._m0[23u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _795)) * _837) + _795;
    float _852 = (((_601.z - _681) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _681;
    float _856 = ((_709.z - _852) * cbMtdParam._m0[19u].w) + _852;
    vec4 _870 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _302) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _303) + cbTextureTilingScale._m0[15u].w));
    float _877 = (_870.x * 2.0) + (-1.0);
    float _878 = (_870.y * 2.0) + (-1.0);
    float _879 = dot(vec2(_877, _878), vec2(_877, _878));
    float _3913 = isnan(0.0) ? _879 : (isnan(_879) ? 0.0 : max(_879, 0.0));
    float _887 = ((_870.z - _856) * _784) + _856;
    float _890 = ((cbMtdParam._m0[23u].y - _887) * _837) + _887;
    vec4 _911 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _302) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _303) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _917 = (_911.x * 2.0) + (-1.0);
    float _918 = (_911.y * 2.0) + (-1.0);
    float _919 = dot(vec2(_917, _918), vec2(_917, _918));
    float _3924 = isnan(0.0) ? _919 : (isnan(_919) ? 0.0 : max(_919, 0.0));
    float _934 = ((sqrt(1.0 - (isnan(1.0) ? _3913 : (isnan(_3913) ? 1.0 : min(_3913, 1.0)))) - _691) * _786) + _691;
    float _937 = (((_877 - _721) * _784) + _721) + (cbMtdParam._m0[21u].x * _721);
    float _938 = (((_878 - _722) * _785) + _722) + (cbMtdParam._m0[21u].x * _722);
    float _949 = (((_917 - _937) + (_937 * cbMtdParam._m0[22u].z)) * _837) + _937;
    float _950 = (((_918 - _938) + (_938 * cbMtdParam._m0[22u].z)) * _837) + _938;
    float _951 = (_837 * (sqrt(1.0 - (isnan(1.0) ? _3924 : (isnan(_3924) ? 1.0 : min(_3924, 1.0)))) - _934)) + _934;
    float _953 = cbMtdParam._m0[22u].x + _709.w;
    float _956 = fma(_951, _252, fma(_950, _259, _949 * _245));
    float _959 = fma(_951, _253, fma(_950, _260, _949 * _246));
    float _962 = fma(_951, _254, fma(_950, _261, _949 * _247));
    float _966 = inversesqrt(dot(vec3(_956, _959, _962), vec3(_956, _959, _962)));
    float _967 = _966 * _956;
    float _968 = _966 * _959;
    float _969 = _966 * _962;
    float _3935 = isnan(0.0) ? _890 : (isnan(_890) ? 0.0 : max(_890, 0.0));
    float _970 = isnan(1.0) ? _3935 : (isnan(_3935) ? 1.0 : min(_3935, 1.0));
    float _3946 = isnan(0.0) ? _953 : (isnan(_953) ? 0.0 : max(_953, 0.0));
    float _3957 = isnan(0.0) ? _845 : (isnan(_845) ? 0.0 : max(_845, 0.0));
    float _3968 = isnan(0.0) ? _846 : (isnan(_846) ? 0.0 : max(_846, 0.0));
    float _3979 = isnan(0.0) ? _847 : (isnan(_847) ? 0.0 : max(_847, 0.0));
    float _988 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _1028 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _1038 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _1028);
    float _1039 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _1028);
    float _1040 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _1028);
    float _1044 = inversesqrt(dot(vec3(_1038, _1039, _1040), vec3(_1038, _1039, _1040)));
    float _1045 = _1038 * _1044;
    float _1046 = _1039 * _1044;
    float _1047 = _1040 * _1044;
    float _1053 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1054 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1072 = fma(_969, cbSceneParam._m0[5u].z, fma(_968, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _967));
    float _1075 = fma(_969, cbSceneParam._m0[6u].z, fma(_968, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _967));
    float _1078 = fma(_969, cbSceneParam._m0[7u].z, fma(_968, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _967));
    uint _1092 = (_283 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _1098 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3957 : (isnan(_3957) ? 1.0 : min(_3957, 1.0)))) * cbInstanceData._m0[_1092].x;
    float _1099 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3968 : (isnan(_3968) ? 1.0 : min(_3968, 1.0)))) * cbInstanceData._m0[_1092].y;
    float _1100 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3979 : (isnan(_3979) ? 1.0 : min(_3979, 1.0)))) * cbInstanceData._m0[_1092].z;
    float _3990 = isnan(0.0) ? _1098 : (isnan(_1098) ? 0.0 : max(_1098, 0.0));
    float _1101 = isnan(1.0) ? _3990 : (isnan(_3990) ? 1.0 : min(_3990, 1.0));
    float _4001 = isnan(0.0) ? _1099 : (isnan(_1099) ? 0.0 : max(_1099, 0.0));
    float _1102 = isnan(1.0) ? _4001 : (isnan(_4001) ? 1.0 : min(_4001, 1.0));
    float _4012 = isnan(0.0) ? _1100 : (isnan(_1100) ? 0.0 : max(_1100, 0.0));
    float _1103 = isnan(1.0) ? _4012 : (isnan(_4012) ? 1.0 : min(_4012, 1.0));
    vec4 _1112 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1053, cbSceneParam._m0[86u].y * _1054));
    float _1116 = ((isnan(1.0) ? _3946 : (isnan(_3946) ? 1.0 : min(_3946, 1.0))) * TEXCOORD_5.w) * _1112.x;
    float _1117 = dot(vec3(_967, _968, _969), vec3(_1045, _1046, _1047));
    float _1120 = _1117 * 2.0;
    float _1124 = (_1120 * _967) - _1045;
    float _1125 = (_1120 * _968) - _1046;
    float _1126 = (_1120 * _969) - _1047;
    float _1130 = abs(dot(vec3(_1045, _1046, _1047), vec3(_967, _968, _969)));
    float _4023 = isnan(0.0) ? _1130 : (isnan(_1130) ? 0.0 : max(_1130, 0.0));
    float _1132 = sqrt(_970);
    float _1145 = exp2((_1132 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4023 : (isnan(_4023) ? 1.0 : min(_4023, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1132 * 3.0));
    float _1177 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1181 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1185 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1486;
    float _1488;
    float _1489;
    float _1490;
    float _1491;
    float _1492;
    float _1493;
    float _1494;
    float _1495;
    float _1496;
    float _1497;
    float _1498;
    float _1499;
    float _1500;
    float _1501;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1211 = fma(_1185, cbModelParam._m0[26u].z, fma(_1181, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1177));
        float _1215 = fma(_1185, cbModelParam._m0[27u].z, fma(_1181, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1177));
        float _1219 = fma(_1185, cbModelParam._m0[28u].z, fma(_1181, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1177));
        float _1244 = _1177 + _967;
        float _1245 = _1181 + _968;
        float _1246 = _1185 + _969;
        float _1256 = fma(_1246, cbModelParam._m0[26u].z, fma(_1245, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1244)) - _1211;
        float _1257 = fma(_1246, cbModelParam._m0[27u].z, fma(_1245, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1244)) - _1215;
        float _1258 = fma(_1246, cbModelParam._m0[28u].z, fma(_1245, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1244)) - _1219;
        float _1262 = inversesqrt(dot(vec3(_1256, _1257, _1258), vec3(_1256, _1257, _1258)));
        float _1275 = ((_1262 * _1256) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1211 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1276 = ((_1262 * _1257) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1215 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1277 = ((_1262 * _1258) / cbModelParam._m0[34u].z) + ((((((_1219 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1280 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1275, _1276, _1277), 0.0);
        vec4 _1287 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1275, _1276, _1277), 0.0);
        vec4 _1294 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1275, _1276, _1277), 0.0);
        vec4 _1301 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1275, _1276, _1277), 0.0);
        float _1314 = exp2((_1280.w + (-0.5)) * 20.0) * 2.0;
        float _1315 = _1314 * (_1280.x + (-0.5));
        float _1316 = _1314 * (_1280.y + (-0.5));
        float _1317 = _1314 * (_1280.z + (-0.5));
        float _1324 = exp2((_1287.w + (-0.5)) * 20.0) * 2.0;
        float _1325 = _1324 * (_1287.x + (-0.5));
        float _1326 = _1324 * (_1287.y + (-0.5));
        float _1327 = _1324 * (_1287.z + (-0.5));
        float _1334 = exp2((_1294.w + (-0.5)) * 20.0) * 2.0;
        float _1335 = _1334 * (_1294.x + (-0.5));
        float _1336 = _1334 * (_1294.y + (-0.5));
        float _1337 = _1334 * (_1294.z + (-0.5));
        float _1344 = exp2((_1301.w + (-0.5)) * 20.0) * 2.0;
        float _1345 = _1344 * (_1301.x + (-0.5));
        float _1346 = _1344 * (_1301.y + (-0.5));
        float _1347 = _1344 * (_1301.z + (-0.5));
        float _1348 = isnan(0.0) ? _1345 : (isnan(_1345) ? 0.0 : max(_1345, 0.0));
        float _1349 = isnan(0.0) ? _1346 : (isnan(_1346) ? 0.0 : max(_1346, 0.0));
        float _1350 = isnan(0.0) ? _1347 : (isnan(_1347) ? 0.0 : max(_1347, 0.0));
        float _1351 = _1315 * 0.5;
        float _1352 = _1325 * 0.5;
        float _1353 = _1335 * 0.5;
        float _1354 = dot(vec3(_1351, _1352, _1353), vec3(_1351, _1352, _1353));
        float _1359 = (_1354 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1354);
        float _1368 = (dot(vec3(_967, _968, _969), vec3(_1359 * _1351, _1359 * _1352, _1359 * _1353)) + 1.0) * 0.5;
        float _4049 = isnan(0.0) ? _1368 : (isnan(_1368) ? 0.0 : max(_1368, 0.0));
        float _1378 = sqrt(((_1352 * _1352) + (_1351 * _1351)) + (_1353 * _1353)) / (_1348 + 9.9999997473787516355514526367188e-06);
        float _4060 = isnan(0.0) ? _1378 : (isnan(_1378) ? 0.0 : max(_1378, 0.0));
        float _1379 = isnan(1.0) ? _4060 : (isnan(_4060) ? 1.0 : min(_4060, 1.0));
        float _1380 = _1379 * 2.0;
        float _1384 = (1.0 - _1379) / (_1379 + 1.0);
        float _4071 = isnan(0.0) ? _1384 : (isnan(_1384) ? 0.0 : max(_1384, 0.0));
        float _1385 = isnan(1.0) ? _4071 : (isnan(_4071) ? 1.0 : min(_4071, 1.0));
        float _1394 = ((((1.0 - _1385) * (_1380 + 2.0)) * exp2(log2(isnan(1.0) ? _4049 : (isnan(_4049) ? 1.0 : min(_4049, 1.0))) * (_1380 + 1.0))) + _1385) * _1348;
        float _1395 = _1316 * 0.5;
        float _1396 = _1326 * 0.5;
        float _1397 = _1336 * 0.5;
        float _1398 = dot(vec3(_1395, _1396, _1397), vec3(_1395, _1396, _1397));
        float _1403 = (_1398 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1398);
        float _1411 = (dot(vec3(_967, _968, _969), vec3(_1403 * _1395, _1403 * _1396, _1403 * _1397)) + 1.0) * 0.5;
        float _4082 = isnan(0.0) ? _1411 : (isnan(_1411) ? 0.0 : max(_1411, 0.0));
        float _1420 = sqrt(((_1396 * _1396) + (_1395 * _1395)) + (_1397 * _1397)) / (_1349 + 9.9999997473787516355514526367188e-06);
        float _4093 = isnan(0.0) ? _1420 : (isnan(_1420) ? 0.0 : max(_1420, 0.0));
        float _1421 = isnan(1.0) ? _4093 : (isnan(_4093) ? 1.0 : min(_4093, 1.0));
        float _1422 = _1421 * 2.0;
        float _1426 = (1.0 - _1421) / (_1421 + 1.0);
        float _4104 = isnan(0.0) ? _1426 : (isnan(_1426) ? 0.0 : max(_1426, 0.0));
        float _1427 = isnan(1.0) ? _4104 : (isnan(_4104) ? 1.0 : min(_4104, 1.0));
        float _1436 = ((((1.0 - _1427) * (_1422 + 2.0)) * exp2(log2(isnan(1.0) ? _4082 : (isnan(_4082) ? 1.0 : min(_4082, 1.0))) * (_1422 + 1.0))) + _1427) * _1349;
        float _1437 = _1317 * 0.5;
        float _1438 = _1327 * 0.5;
        float _1439 = _1337 * 0.5;
        float _1440 = dot(vec3(_1437, _1438, _1439), vec3(_1437, _1438, _1439));
        float _1445 = (_1440 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1440);
        float _1453 = (dot(vec3(_967, _968, _969), vec3(_1445 * _1437, _1445 * _1438, _1445 * _1439)) + 1.0) * 0.5;
        float _4115 = isnan(0.0) ? _1453 : (isnan(_1453) ? 0.0 : max(_1453, 0.0));
        float _1462 = sqrt(((_1438 * _1438) + (_1437 * _1437)) + (_1439 * _1439)) / (_1350 + 9.9999997473787516355514526367188e-06);
        float _4126 = isnan(0.0) ? _1462 : (isnan(_1462) ? 0.0 : max(_1462, 0.0));
        float _1463 = isnan(1.0) ? _4126 : (isnan(_4126) ? 1.0 : min(_4126, 1.0));
        float _1464 = _1463 * 2.0;
        float _1468 = (1.0 - _1463) / (_1463 + 1.0);
        float _4137 = isnan(0.0) ? _1468 : (isnan(_1468) ? 0.0 : max(_1468, 0.0));
        float _1469 = isnan(1.0) ? _4137 : (isnan(_4137) ? 1.0 : min(_4137, 1.0));
        float _1478 = ((((1.0 - _1469) * (_1464 + 2.0)) * exp2(log2(isnan(1.0) ? _4115 : (isnan(_4115) ? 1.0 : min(_4115, 1.0))) * (_1464 + 1.0))) + _1469) * _1350;
        _1486 = _1317;
        _1488 = _1316;
        _1489 = _1315;
        _1490 = _1327;
        _1491 = _1326;
        _1492 = _1325;
        _1493 = _1337;
        _1494 = _1336;
        _1495 = _1335;
        _1496 = _1350;
        _1497 = _1349;
        _1498 = _1348;
        _1499 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1394 : (isnan(_1394) ? 0.0 : max(_1394, 0.0)));
        _1500 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1436 : (isnan(_1436) ? 0.0 : max(_1436, 0.0)));
        _1501 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1478 : (isnan(_1478) ? 0.0 : max(_1478, 0.0)));
    }
    else
    {
        _1486 = _1487;
        _1488 = _1487;
        _1489 = _1487;
        _1490 = _1487;
        _1491 = _1487;
        _1492 = _1487;
        _1493 = _1487;
        _1494 = _1487;
        _1495 = _1487;
        _1496 = _1487;
        _1497 = _1487;
        _1498 = _1487;
        _1499 = 0.0;
        _1500 = 0.0;
        _1501 = 0.0;
    }
    float _1794;
    float _1795;
    float _1796;
    float _1797;
    float _1798;
    float _1799;
    float _1800;
    float _1801;
    float _1802;
    float _1803;
    float _1804;
    float _1805;
    float _1806;
    float _1807;
    float _1808;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1525 = fma(_1185, cbModelParam._m0[30u].z, fma(_1181, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1177));
        float _1529 = fma(_1185, cbModelParam._m0[31u].z, fma(_1181, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1177));
        float _1533 = fma(_1185, cbModelParam._m0[32u].z, fma(_1181, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1177));
        float _1556 = _1177 + _967;
        float _1557 = _1181 + _968;
        float _1558 = _1185 + _969;
        float _1568 = fma(_1558, cbModelParam._m0[30u].z, fma(_1557, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1556)) - _1525;
        float _1569 = fma(_1558, cbModelParam._m0[31u].z, fma(_1557, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1556)) - _1529;
        float _1570 = fma(_1558, cbModelParam._m0[32u].z, fma(_1557, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1556)) - _1533;
        float _1574 = inversesqrt(dot(vec3(_1568, _1569, _1570), vec3(_1568, _1569, _1570)));
        float _1587 = ((_1574 * _1568) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1525 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1588 = ((_1574 * _1569) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1529 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1589 = ((_1574 * _1570) / cbModelParam._m0[35u].z) + ((((((_1533 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1591 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1587, _1588, _1589), 0.0);
        vec4 _1598 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1587, _1588, _1589), 0.0);
        vec4 _1605 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1587, _1588, _1589), 0.0);
        vec4 _1612 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1587, _1588, _1589), 0.0);
        float _1624 = exp2((_1591.w + (-0.5)) * 20.0) * 2.0;
        float _1625 = _1624 * (_1591.x + (-0.5));
        float _1626 = _1624 * (_1591.y + (-0.5));
        float _1627 = _1624 * (_1591.z + (-0.5));
        float _1634 = exp2((_1598.w + (-0.5)) * 20.0) * 2.0;
        float _1635 = _1634 * (_1598.x + (-0.5));
        float _1636 = _1634 * (_1598.y + (-0.5));
        float _1637 = _1634 * (_1598.z + (-0.5));
        float _1644 = exp2((_1605.w + (-0.5)) * 20.0) * 2.0;
        float _1645 = _1644 * (_1605.x + (-0.5));
        float _1646 = _1644 * (_1605.y + (-0.5));
        float _1647 = _1644 * (_1605.z + (-0.5));
        float _1654 = exp2((_1612.w + (-0.5)) * 20.0) * 2.0;
        float _1655 = _1654 * (_1612.x + (-0.5));
        float _1656 = _1654 * (_1612.y + (-0.5));
        float _1657 = _1654 * (_1612.z + (-0.5));
        float _1658 = isnan(0.0) ? _1655 : (isnan(_1655) ? 0.0 : max(_1655, 0.0));
        float _1659 = isnan(0.0) ? _1656 : (isnan(_1656) ? 0.0 : max(_1656, 0.0));
        float _1660 = isnan(0.0) ? _1657 : (isnan(_1657) ? 0.0 : max(_1657, 0.0));
        float _1661 = _1625 * 0.5;
        float _1662 = _1635 * 0.5;
        float _1663 = _1645 * 0.5;
        float _1664 = dot(vec3(_1661, _1662, _1663), vec3(_1661, _1662, _1663));
        float _1669 = (_1664 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1664);
        float _1677 = (dot(vec3(_967, _968, _969), vec3(_1669 * _1661, _1669 * _1662, _1669 * _1663)) + 1.0) * 0.5;
        float _4178 = isnan(0.0) ? _1677 : (isnan(_1677) ? 0.0 : max(_1677, 0.0));
        float _1686 = sqrt(((_1662 * _1662) + (_1661 * _1661)) + (_1663 * _1663)) / (_1658 + 9.9999997473787516355514526367188e-06);
        float _4189 = isnan(0.0) ? _1686 : (isnan(_1686) ? 0.0 : max(_1686, 0.0));
        float _1687 = isnan(1.0) ? _4189 : (isnan(_4189) ? 1.0 : min(_4189, 1.0));
        float _1688 = _1687 * 2.0;
        float _1692 = (1.0 - _1687) / (_1687 + 1.0);
        float _4200 = isnan(0.0) ? _1692 : (isnan(_1692) ? 0.0 : max(_1692, 0.0));
        float _1693 = isnan(1.0) ? _4200 : (isnan(_4200) ? 1.0 : min(_4200, 1.0));
        float _1702 = ((((1.0 - _1693) * (_1688 + 2.0)) * exp2(log2(isnan(1.0) ? _4178 : (isnan(_4178) ? 1.0 : min(_4178, 1.0))) * (_1688 + 1.0))) + _1693) * _1658;
        float _1703 = _1626 * 0.5;
        float _1704 = _1636 * 0.5;
        float _1705 = _1646 * 0.5;
        float _1706 = dot(vec3(_1703, _1704, _1705), vec3(_1703, _1704, _1705));
        float _1711 = (_1706 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1706);
        float _1719 = (dot(vec3(_967, _968, _969), vec3(_1711 * _1703, _1711 * _1704, _1711 * _1705)) + 1.0) * 0.5;
        float _4211 = isnan(0.0) ? _1719 : (isnan(_1719) ? 0.0 : max(_1719, 0.0));
        float _1728 = sqrt(((_1704 * _1704) + (_1703 * _1703)) + (_1705 * _1705)) / (_1659 + 9.9999997473787516355514526367188e-06);
        float _4222 = isnan(0.0) ? _1728 : (isnan(_1728) ? 0.0 : max(_1728, 0.0));
        float _1729 = isnan(1.0) ? _4222 : (isnan(_4222) ? 1.0 : min(_4222, 1.0));
        float _1730 = _1729 * 2.0;
        float _1734 = (1.0 - _1729) / (_1729 + 1.0);
        float _4233 = isnan(0.0) ? _1734 : (isnan(_1734) ? 0.0 : max(_1734, 0.0));
        float _1735 = isnan(1.0) ? _4233 : (isnan(_4233) ? 1.0 : min(_4233, 1.0));
        float _1744 = ((((1.0 - _1735) * (_1730 + 2.0)) * exp2(log2(isnan(1.0) ? _4211 : (isnan(_4211) ? 1.0 : min(_4211, 1.0))) * (_1730 + 1.0))) + _1735) * _1659;
        float _1745 = _1627 * 0.5;
        float _1746 = _1637 * 0.5;
        float _1747 = _1647 * 0.5;
        float _1748 = dot(vec3(_1745, _1746, _1747), vec3(_1745, _1746, _1747));
        float _1753 = (_1748 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1748);
        float _1761 = (dot(vec3(_967, _968, _969), vec3(_1753 * _1745, _1753 * _1746, _1753 * _1747)) + 1.0) * 0.5;
        float _4244 = isnan(0.0) ? _1761 : (isnan(_1761) ? 0.0 : max(_1761, 0.0));
        float _1770 = sqrt(((_1746 * _1746) + (_1745 * _1745)) + (_1747 * _1747)) / (_1660 + 9.9999997473787516355514526367188e-06);
        float _4255 = isnan(0.0) ? _1770 : (isnan(_1770) ? 0.0 : max(_1770, 0.0));
        float _1771 = isnan(1.0) ? _4255 : (isnan(_4255) ? 1.0 : min(_4255, 1.0));
        float _1772 = _1771 * 2.0;
        float _1776 = (1.0 - _1771) / (_1771 + 1.0);
        float _4266 = isnan(0.0) ? _1776 : (isnan(_1776) ? 0.0 : max(_1776, 0.0));
        float _1777 = isnan(1.0) ? _4266 : (isnan(_4266) ? 1.0 : min(_4266, 1.0));
        float _1786 = ((((1.0 - _1777) * (_1772 + 2.0)) * exp2(log2(isnan(1.0) ? _4244 : (isnan(_4244) ? 1.0 : min(_4244, 1.0))) * (_1772 + 1.0))) + _1777) * _1660;
        _1794 = _1627;
        _1795 = _1626;
        _1796 = _1625;
        _1797 = _1637;
        _1798 = _1636;
        _1799 = _1635;
        _1800 = _1647;
        _1801 = _1646;
        _1802 = _1645;
        _1803 = _1660;
        _1804 = _1659;
        _1805 = _1658;
        _1806 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1702 : (isnan(_1702) ? 0.0 : max(_1702, 0.0)));
        _1807 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1744 : (isnan(_1744) ? 0.0 : max(_1744, 0.0)));
        _1808 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1786 : (isnan(_1786) ? 0.0 : max(_1786, 0.0)));
    }
    else
    {
        _1794 = _1487;
        _1795 = _1487;
        _1796 = _1487;
        _1797 = _1487;
        _1798 = _1487;
        _1799 = _1487;
        _1800 = _1487;
        _1801 = _1487;
        _1802 = _1487;
        _1803 = _1487;
        _1804 = _1487;
        _1805 = _1487;
        _1806 = 0.0;
        _1807 = 0.0;
        _1808 = 0.0;
    }
    float _1818 = (cbModelParam._m0[1u].x * (_1806 - _1499)) + _1499;
    float _1819 = (cbModelParam._m0[1u].x * (_1807 - _1500)) + _1500;
    float _1820 = (cbModelParam._m0[1u].x * (_1808 - _1501)) + _1501;
    float _1841 = fma(_1820, cbSceneParam._m0[89u].z, fma(_1819, cbSceneParam._m0[89u].y, _1818 * cbSceneParam._m0[89u].x));
    float _1844 = fma(_1820, cbSceneParam._m0[90u].z, fma(_1819, cbSceneParam._m0[90u].y, _1818 * cbSceneParam._m0[90u].x));
    float _1847 = fma(_1820, cbSceneParam._m0[91u].z, fma(_1819, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1818));
    float _1862 = _1124 * 0.5;
    float _1863 = _1125 * 0.5;
    float _1864 = _1126 * 0.5;
    float _1865 = dot(vec4(_1862, _1863, _1864, 1.0), vec4(_1796, _1799, _1802, _1805));
    float _1868 = dot(vec4(_1862, _1863, _1864, 1.0), vec4(_1795, _1798, _1801, _1804));
    float _1871 = dot(vec4(_1862, _1863, _1864, 1.0), vec4(_1794, _1797, _1800, _1803));
    float _1905;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1878 = dot(vec4(_1862, _1863, _1864, 1.0), vec4(_1486, _1490, _1493, _1496));
        float _1882 = dot(vec4(_1862, _1863, _1864, 1.0), vec4(_1488, _1491, _1494, _1497));
        float _1886 = dot(vec4(_1862, _1863, _1864, 1.0), vec4(_1489, _1492, _1495, _1498));
        float _1893 = dot(vec4(cbModelParam._m0[39u]), vec4(_1862, _1863, _1864, 1.0));
        _1905 = dot(vec3(isnan(0.0) ? _1886 : (isnan(_1886) ? 0.0 : max(_1886, 0.0)), isnan(0.0) ? _1882 : (isnan(_1882) ? 0.0 : max(_1882, 0.0)), isnan(0.0) ? _1878 : (isnan(_1878) ? 0.0 : max(_1878, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1893) ? 0.0 : (isnan(0.0) ? _1893 : max(0.0, _1893))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1905 = 1.0;
    }
    float _1916;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1907 = dot(vec4(cbModelParam._m0[40u]), vec4(_1862, _1863, _1864, 1.0));
        _1916 = dot(vec3(isnan(0.0) ? _1865 : (isnan(_1865) ? 0.0 : max(_1865, 0.0)), isnan(0.0) ? _1868 : (isnan(_1868) ? 0.0 : max(_1868, 0.0)), isnan(0.0) ? _1871 : (isnan(_1871) ? 0.0 : max(_1871, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1907) ? 0.0 : (isnan(0.0) ? _1907 : max(0.0, _1907))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1916 = 1.0;
    }
    float _1920 = (_1916 * cbModelParam._m0[1u].x) + (_1905 * (1.0 - cbModelParam._m0[1u].x));
    float _1930 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _970);
    float _1931 = isnan(_1930) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1930 : min(cbModelParam._m0[25u].z, _1930));
    float _2012;
    float _2014;
    float _2016;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1979 = fma(_1185, cbModelParam._m0[13u].z, fma(_1181, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1177)) + cbModelParam._m0[13u].w;
        float _1983 = fma(_1185, cbModelParam._m0[14u].z, fma(_1181, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1177)) + cbModelParam._m0[14u].w;
        float _1987 = fma(_1185, cbModelParam._m0[15u].z, fma(_1181, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1177)) + cbModelParam._m0[15u].w;
        float _1990 = fma(_1126, cbModelParam._m0[13u].z, fma(_1125, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1124));
        float _1993 = fma(_1126, cbModelParam._m0[14u].z, fma(_1125, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1124));
        float _1996 = fma(_1126, cbModelParam._m0[15u].z, fma(_1125, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1124));
        float _2024;
        if (_1990 > 0.0)
        {
            _2024 = abs((1.0 - _1979) / _1990);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1990 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1979 + 1.0) / _1990);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _2024 = frontier_phi_14_12_ladder;
        }
        float _2246;
        if (_1993 > 0.0)
        {
            _2246 = abs((1.0 - _1983) / _1993);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1993 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1983 + 1.0) / _1993);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2246 = frontier_phi_23_19_ladder;
        }
        float _2492;
        if (_1996 > 0.0)
        {
            _2492 = abs((1.0 - _1987) / _1996);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1996 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1987 + 1.0) / _1996);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2492 = frontier_phi_35_30_ladder;
        }
        float _2494 = isnan(_2246) ? _2024 : (isnan(_2024) ? _2246 : min(_2024, _2246));
        float _2495 = isnan(_2492) ? _2494 : (isnan(_2494) ? _2492 : min(_2494, _2492));
        float _2499 = (_2495 * _1990) + _1979;
        float _2500 = (_2495 * _1993) + _1983;
        float _2501 = (_2495 * _1996) + _1987;
        float _2502 = _2495 * 9.9999997473787516355514526367188e-05;
        float _2504 = (-1.0) - _2502;
        float _2506 = _2502 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2501 > _2506) || ((_2501 < _2504) || ((_2500 > _2506) || ((_2500 < _2504) || ((_2499 < _2504) || (_2499 > _2506))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2625 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2501, cbModelParam._m0[9u].z, fma(_2500, cbModelParam._m0[9u].y, _2499 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2501, cbModelParam._m0[10u].z, fma(_2500, cbModelParam._m0[10u].y, _2499 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2501, cbModelParam._m0[11u].z, fma(_2500, cbModelParam._m0[11u].y, _2499 * cbModelParam._m0[11u].x))), _1931);
            frontier_phi_13_35_ladder = _2625.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2625.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2625.x * cbModelParam._m0[1u].y;
        }
        _2012 = frontier_phi_13_35_ladder_2;
        _2014 = frontier_phi_13_35_ladder_1;
        _2016 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _2000 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1124, _1125, _1126), _1931);
        _2012 = _2000.x * cbModelParam._m0[1u].y;
        _2014 = _2000.y * cbModelParam._m0[1u].y;
        _2016 = _2000.z * cbModelParam._m0[1u].y;
    }
    float _2020 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _970);
    float _2021 = isnan(_2020) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2020 : min(cbModelParam._m0[25u].w, _2020));
    float _2111;
    float _2113;
    float _2115;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2075 = fma(_1185, cbModelParam._m0[21u].z, fma(_1181, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1177)) + cbModelParam._m0[21u].w;
        float _2079 = fma(_1185, cbModelParam._m0[22u].z, fma(_1181, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1177)) + cbModelParam._m0[22u].w;
        float _2083 = fma(_1185, cbModelParam._m0[23u].z, fma(_1181, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1177)) + cbModelParam._m0[23u].w;
        float _2086 = fma(_1126, cbModelParam._m0[21u].z, fma(_1125, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1124));
        float _2089 = fma(_1126, cbModelParam._m0[22u].z, fma(_1125, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1124));
        float _2092 = fma(_1126, cbModelParam._m0[23u].z, fma(_1125, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1124));
        float _2251;
        if (_2086 > 0.0)
        {
            _2251 = abs((1.0 - _2075) / _2086);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_2086 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_2075 + 1.0) / _2086);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2251 = frontier_phi_25_21_ladder;
        }
        float _2519;
        if (_2089 > 0.0)
        {
            _2519 = abs((1.0 - _2079) / _2089);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_2089 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_2079 + 1.0) / _2089);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2519 = frontier_phi_37_32_ladder;
        }
        float _2724;
        if (_2092 > 0.0)
        {
            _2724 = abs((1.0 - _2083) / _2092);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_2092 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_2083 + 1.0) / _2092);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2724 = frontier_phi_46_43_ladder;
        }
        float _2726 = isnan(_2519) ? _2251 : (isnan(_2251) ? _2519 : min(_2251, _2519));
        float _2727 = isnan(_2724) ? _2726 : (isnan(_2726) ? _2724 : min(_2726, _2724));
        float _2731 = (_2727 * _2086) + _2075;
        float _2732 = (_2727 * _2089) + _2079;
        float _2733 = (_2727 * _2092) + _2083;
        float _2734 = _2727 * 9.9999997473787516355514526367188e-05;
        float _2735 = (-1.0) - _2734;
        float _2737 = _2734 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2733 > _2737) || ((_2733 < _2735) || ((_2732 > _2737) || ((_2732 < _2735) || ((_2731 < _2735) || (_2731 > _2737))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2932 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2733, cbModelParam._m0[17u].z, fma(_2732, cbModelParam._m0[17u].y, _2731 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2733, cbModelParam._m0[18u].z, fma(_2732, cbModelParam._m0[18u].y, _2731 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2733, cbModelParam._m0[19u].z, fma(_2732, cbModelParam._m0[19u].y, _2731 * cbModelParam._m0[19u].x))), _2021);
            frontier_phi_22_46_ladder = _2932.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2932.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2932.x * cbModelParam._m0[1u].z;
        }
        _2111 = frontier_phi_22_46_ladder_2;
        _2113 = frontier_phi_22_46_ladder_1;
        _2115 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _2095 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1124, _1125, _1126), _2021);
        _2111 = _2095.x * cbModelParam._m0[1u].z;
        _2113 = _2095.y * cbModelParam._m0[1u].z;
        _2115 = _2095.z * cbModelParam._m0[1u].z;
    }
    float _2127 = ((((1.0 - _1145) * ((_1132 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_1145 * _1132)) * _1116;
    float _2128 = _2127 * ((cbModelParam._m0[1u].w * (_2111 - _2012)) + _2012);
    float _2129 = _2127 * ((cbModelParam._m0[1u].w * (_2113 - _2014)) + _2014);
    float _2130 = _2127 * ((cbModelParam._m0[1u].w * (_2115 - _2016)) + _2016);
    float _2133 = fma(_2130, cbSceneParam._m0[89u].z, fma(_2129, cbSceneParam._m0[89u].y, _2128 * cbSceneParam._m0[89u].x));
    float _2136 = fma(_2130, cbSceneParam._m0[90u].z, fma(_2129, cbSceneParam._m0[90u].y, _2128 * cbSceneParam._m0[90u].x));
    float _2139 = fma(_2130, cbSceneParam._m0[91u].z, fma(_2129, cbSceneParam._m0[91u].y, _2128 * cbSceneParam._m0[91u].x));
    vec4 _2147 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_1053, _1054));
    float _2149 = _2147.w;
    float _2161 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _2149);
    float _2162 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _2149);
    float _2163 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _2149);
    uvec4 _2167 = floatBitsToUint(cbInstanceData._m0[_283 + 5u]);
    uint _2169 = _2167.x * 14u;
    uint _2170 = _2169 + 13u;
    float _2177 = _1116 + (-1.0);
    float _2182 = (cbLight._m0[_2170].x * _2177) + 1.0;
    float _2183 = (cbLight._m0[_2170].y * _2177) + 1.0;
    float _2184 = (cbLight._m0[_2170].z * _2177) + 1.0;
    float _2185 = (cbLight._m0[_2170].w * _2177) + 1.0;
    uint _2186 = _2169 + 5u;
    float _2192 = isnan(1.0) ? _2183 : (isnan(_2183) ? 1.0 : min(_2183, 1.0));
    uint _2196 = _2169 + 4u;
    float _2205 = isnan(1.0) ? _2182 : (isnan(_2182) ? 1.0 : min(_2182, 1.0));
    uint _2209 = _2169 | 1u;
    float _2220 = dot(vec3(cbLight._m0[_2169].xyz), vec3(_967, _968, _969));
    float _2223 = dot(vec3(cbLight._m0[_2209].xyz), vec3(_967, _968, _969));
    float _4402 = isnan(0.0) ? _2220 : (isnan(_2220) ? 0.0 : max(_2220, 0.0));
    float _4413 = isnan(0.0) ? _2223 : (isnan(_2223) ? 0.0 : max(_2223, 0.0));
    float _2228 = (isnan(1.0) ? _4402 : (isnan(_4402) ? 1.0 : min(_4402, 1.0))) * 0.3183098733425140380859375;
    float _2230 = (isnan(1.0) ? _4413 : (isnan(_4413) ? 1.0 : min(_4413, 1.0))) * 0.3183098733425140380859375;
    float _2237 = ((cbLight._m0[_2186].x * _2192) * _2230) + (((cbLight._m0[_2196].x * _2161) * _2205) * _2228);
    float _2238 = ((_2192 * cbLight._m0[_2186].y) * _2230) + (((cbLight._m0[_2196].y * _2162) * _2205) * _2228);
    float _2239 = ((_2192 * cbLight._m0[_2186].z) * _2230) + (((cbLight._m0[_2196].z * _2163) * _2205) * _2228);
    uvec4 _2243 = floatBitsToUint(cbLight._m0[_2169 + 12u]);
    bool _2245 = _2243.x == 0u;
    float _2256;
    float _2258;
    float _2260;
    if (_2245)
    {
        _2256 = _2237;
        _2258 = _2238;
        _2260 = _2239;
    }
    else
    {
        uint _2264 = _2169 + 6u;
        float _2280 = (dot(vec3(cbLight._m0[_2169 + 2u].xyz), vec3(_967, _968, _969)) * 0.5) + 0.5;
        float _2281 = _2280 * _2280;
        float _4424 = isnan(0.0) ? _2281 : (isnan(_2281) ? 0.0 : max(_2281, 0.0));
        float _2282 = isnan(1.0) ? _4424 : (isnan(_4424) ? 1.0 : min(_4424, 1.0));
        float _2283 = isnan(1.0) ? _2184 : (isnan(_2184) ? 1.0 : min(_2184, 1.0));
        _2256 = (((cbLight._m0[_2264].x * 0.3183098733425140380859375) * _2282) * _2283) + _2237;
        _2258 = (((cbLight._m0[_2264].y * 0.3183098733425140380859375) * _2282) * _2283) + _2238;
        _2260 = (((cbLight._m0[_2264].z * 0.3183098733425140380859375) * _2282) * _2283) + _2239;
    }
    bool _2263 = _2243.y == 0u;
    float _2301;
    float _2303;
    float _2305;
    if (_2263)
    {
        _2301 = _2256;
        _2303 = _2258;
        _2305 = _2260;
    }
    else
    {
        uint _2463 = _2169 + 7u;
        float _2479 = (dot(vec3(cbLight._m0[_2169 + 3u].xyz), vec3(_967, _968, _969)) * 0.5) + 0.5;
        float _2480 = _2479 * _2479;
        float _4440 = isnan(0.0) ? _2480 : (isnan(_2480) ? 0.0 : max(_2480, 0.0));
        float _2481 = isnan(1.0) ? _4440 : (isnan(_4440) ? 1.0 : min(_4440, 1.0));
        float _2482 = isnan(1.0) ? _2185 : (isnan(_2185) ? 1.0 : min(_2185, 1.0));
        _2301 = (((cbLight._m0[_2463].x * 0.3183098733425140380859375) * _2481) * _2482) + _2256;
        _2303 = (((cbLight._m0[_2463].y * 0.3183098733425140380859375) * _2481) * _2482) + _2258;
        _2305 = (((cbLight._m0[_2463].z * 0.3183098733425140380859375) * _2481) * _2482) + _2260;
    }
    uint _2308 = _2169 + 8u;
    float _2321 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2169].w)) * _970) * 0.949999988079071044921875);
    float _2322 = _2321 * _2321;
    float _2323 = cbLight._m0[_2169].x + _1045;
    float _2324 = cbLight._m0[_2169].y + _1046;
    float _2325 = cbLight._m0[_2169].z + _1047;
    float _2329 = inversesqrt(dot(vec3(_2323, _2324, _2325), vec3(_2323, _2324, _2325)));
    float _2330 = _2329 * _2323;
    float _2331 = _2329 * _2324;
    float _2332 = _2329 * _2325;
    float _2333 = dot(vec3(_967, _968, _969), vec3(cbLight._m0[_2169].xyz));
    float _4456 = isnan(0.0) ? _2333 : (isnan(_2333) ? 0.0 : max(_2333, 0.0));
    float _2336 = isnan(1.0) ? _4456 : (isnan(_4456) ? 1.0 : min(_4456, 1.0));
    float _4467 = isnan(0.0) ? _1117 : (isnan(_1117) ? 0.0 : max(_1117, 0.0));
    float _2337 = isnan(1.0) ? _4467 : (isnan(_4467) ? 1.0 : min(_4467, 1.0));
    float _2338 = dot(vec3(_967, _968, _969), vec3(_2330, _2331, _2332));
    float _4478 = isnan(0.0) ? _2338 : (isnan(_2338) ? 0.0 : max(_2338, 0.0));
    float _2341 = isnan(1.0) ? _4478 : (isnan(_4478) ? 1.0 : min(_4478, 1.0));
    float _2342 = dot(vec3(cbLight._m0[_2169].xyz), vec3(_2330, _2331, _2332));
    float _4489 = isnan(0.0) ? _2342 : (isnan(_2342) ? 0.0 : max(_2342, 0.0));
    float _2346 = _2322 * _2322;
    float _2350 = ((_2341 * _2341) * (_2346 + (-1.0))) + 1.0;
    float _2361 = (exp2(log2(1.0 - (isnan(1.0) ? _4489 : (isnan(_4489) ? 1.0 : min(_4489, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2362 = 1.0 - _2322;
    float _2373 = (0.5 / (((_2337 * ((_2336 * _2362) + _2322)) + 9.9999999392252902907785028219223e-09) + (((_2337 * _2362) + _2322) * _2336))) * _2336;
    float _4500 = isnan(0.0) ? _2373 : (isnan(_2373) ? 0.0 : max(_2373, 0.0));
    float _2375 = (isnan(1.0) ? _4500 : (isnan(_4500) ? 1.0 : min(_4500, 1.0))) * (_2346 / ((_2350 * _2350) * 3.141590118408203125));
    uint _2389 = _2169 + 9u;
    float _2400 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2209].w)) * _970) * 0.949999988079071044921875);
    float _2401 = _2400 * _2400;
    float _2402 = cbLight._m0[_2209].x + _1045;
    float _2403 = cbLight._m0[_2209].y + _1046;
    float _2404 = cbLight._m0[_2209].z + _1047;
    float _2408 = inversesqrt(dot(vec3(_2402, _2403, _2404), vec3(_2402, _2403, _2404)));
    float _2409 = _2408 * _2402;
    float _2410 = _2408 * _2403;
    float _2411 = _2408 * _2404;
    float _2412 = dot(vec3(_967, _968, _969), vec3(cbLight._m0[_2209].xyz));
    float _4511 = isnan(0.0) ? _2412 : (isnan(_2412) ? 0.0 : max(_2412, 0.0));
    float _2415 = isnan(1.0) ? _4511 : (isnan(_4511) ? 1.0 : min(_4511, 1.0));
    float _2416 = dot(vec3(_967, _968, _969), vec3(_2409, _2410, _2411));
    float _4522 = isnan(0.0) ? _2416 : (isnan(_2416) ? 0.0 : max(_2416, 0.0));
    float _2419 = isnan(1.0) ? _4522 : (isnan(_4522) ? 1.0 : min(_4522, 1.0));
    float _2420 = dot(vec3(cbLight._m0[_2209].xyz), vec3(_2409, _2410, _2411));
    float _4533 = isnan(0.0) ? _2420 : (isnan(_2420) ? 0.0 : max(_2420, 0.0));
    float _2424 = _2401 * _2401;
    float _2428 = ((_2419 * _2419) * (_2424 + (-1.0))) + 1.0;
    float _2437 = (exp2(log2(1.0 - (isnan(1.0) ? _4533 : (isnan(_4533) ? 1.0 : min(_4533, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2438 = 1.0 - _2401;
    float _2448 = (0.5 / (((_2337 * ((_2415 * _2438) + _2401)) + 9.9999999392252902907785028219223e-09) + (((_2337 * _2438) + _2401) * _2415))) * _2415;
    float _4544 = isnan(0.0) ? _2448 : (isnan(_2448) ? 0.0 : max(_2448, 0.0));
    float _2450 = (isnan(1.0) ? _4544 : (isnan(_4544) ? 1.0 : min(_4544, 1.0))) * (_2424 / ((_2428 * _2428) * 3.141590118408203125));
    float _2460 = (((_2437 * cbLight._m0[_2389].x) * _2450) * _2192) + ((((cbLight._m0[_2308].x * _2161) * _2361) * _2375) * _2205);
    float _2461 = (((_2437 * cbLight._m0[_2389].y) * _2450) * _2192) + ((((cbLight._m0[_2308].y * _2162) * _2361) * _2375) * _2205);
    float _2462 = (((_2437 * cbLight._m0[_2389].z) * _2450) * _2192) + ((((cbLight._m0[_2308].z * _2163) * _2361) * _2375) * _2205);
    float _2524;
    float _2526;
    float _2528;
    if (_2245)
    {
        _2524 = _2460;
        _2526 = _2461;
        _2528 = _2462;
    }
    else
    {
        uint _2530 = _2169 + 2u;
        uint _2534 = _2169 + 10u;
        float _2548 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2530].w)) * _970) * 0.949999988079071044921875);
        float _2549 = _2548 * _2548;
        float _2550 = cbLight._m0[_2530].x + _1045;
        float _2551 = cbLight._m0[_2530].y + _1046;
        float _2552 = cbLight._m0[_2530].z + _1047;
        float _2556 = inversesqrt(dot(vec3(_2550, _2551, _2552), vec3(_2550, _2551, _2552)));
        float _2557 = _2556 * _2550;
        float _2558 = _2556 * _2551;
        float _2559 = _2556 * _2552;
        float _2560 = dot(vec3(_967, _968, _969), vec3(cbLight._m0[_2530].xyz));
        float _4555 = isnan(0.0) ? _2560 : (isnan(_2560) ? 0.0 : max(_2560, 0.0));
        float _2563 = isnan(1.0) ? _4555 : (isnan(_4555) ? 1.0 : min(_4555, 1.0));
        float _2564 = dot(vec3(_967, _968, _969), vec3(_2557, _2558, _2559));
        float _4566 = isnan(0.0) ? _2564 : (isnan(_2564) ? 0.0 : max(_2564, 0.0));
        float _2567 = isnan(1.0) ? _4566 : (isnan(_4566) ? 1.0 : min(_4566, 1.0));
        float _2568 = dot(vec3(cbLight._m0[_2530].xyz), vec3(_2557, _2558, _2559));
        float _4577 = isnan(0.0) ? _2568 : (isnan(_2568) ? 0.0 : max(_2568, 0.0));
        float _2572 = _2549 * _2549;
        float _2576 = ((_2567 * _2567) * (_2572 + (-1.0))) + 1.0;
        float _2585 = (exp2(log2(1.0 - (isnan(1.0) ? _4577 : (isnan(_4577) ? 1.0 : min(_4577, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2586 = 1.0 - _2549;
        float _2596 = (0.5 / (((_2337 * ((_2563 * _2586) + _2549)) + 9.9999999392252902907785028219223e-09) + (((_2337 * _2586) + _2549) * _2563))) * _2563;
        float _4588 = isnan(0.0) ? _2596 : (isnan(_2596) ? 0.0 : max(_2596, 0.0));
        float _2598 = (isnan(1.0) ? _4588 : (isnan(_4588) ? 1.0 : min(_4588, 1.0))) * (_2572 / ((_2576 * _2576) * 3.141590118408203125));
        float _2599 = isnan(1.0) ? _2184 : (isnan(_2184) ? 1.0 : min(_2184, 1.0));
        _2524 = (((_2585 * cbLight._m0[_2534].x) * _2598) * _2599) + _2460;
        _2526 = (((_2585 * cbLight._m0[_2534].y) * _2598) * _2599) + _2461;
        _2528 = (((_2585 * cbLight._m0[_2534].z) * _2598) * _2599) + _2462;
    }
    float _2634;
    float _2636;
    float _2638;
    if (_2263)
    {
        _2634 = _2524;
        _2636 = _2526;
        _2638 = _2528;
    }
    else
    {
        uint _2645 = _2169 + 3u;
        uint _2649 = _2169 + 11u;
        float _2663 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2645].w)) * _970) * 0.949999988079071044921875);
        float _2664 = _2663 * _2663;
        float _2665 = cbLight._m0[_2645].x + _1045;
        float _2666 = cbLight._m0[_2645].y + _1046;
        float _2667 = cbLight._m0[_2645].z + _1047;
        float _2671 = inversesqrt(dot(vec3(_2665, _2666, _2667), vec3(_2665, _2666, _2667)));
        float _2672 = _2671 * _2665;
        float _2673 = _2671 * _2666;
        float _2674 = _2671 * _2667;
        float _2675 = dot(vec3(_967, _968, _969), vec3(cbLight._m0[_2645].xyz));
        float _4604 = isnan(0.0) ? _2675 : (isnan(_2675) ? 0.0 : max(_2675, 0.0));
        float _2678 = isnan(1.0) ? _4604 : (isnan(_4604) ? 1.0 : min(_4604, 1.0));
        float _2679 = dot(vec3(_967, _968, _969), vec3(_2672, _2673, _2674));
        float _4615 = isnan(0.0) ? _2679 : (isnan(_2679) ? 0.0 : max(_2679, 0.0));
        float _2682 = isnan(1.0) ? _4615 : (isnan(_4615) ? 1.0 : min(_4615, 1.0));
        float _2683 = dot(vec3(cbLight._m0[_2645].xyz), vec3(_2672, _2673, _2674));
        float _4626 = isnan(0.0) ? _2683 : (isnan(_2683) ? 0.0 : max(_2683, 0.0));
        float _2687 = _2664 * _2664;
        float _2691 = ((_2682 * _2682) * (_2687 + (-1.0))) + 1.0;
        float _2700 = (exp2(log2(1.0 - (isnan(1.0) ? _4626 : (isnan(_4626) ? 1.0 : min(_4626, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2701 = 1.0 - _2664;
        float _2711 = (0.5 / (((_2337 * ((_2678 * _2701) + _2664)) + 9.9999999392252902907785028219223e-09) + (((_2337 * _2701) + _2664) * _2678))) * _2678;
        float _4637 = isnan(0.0) ? _2711 : (isnan(_2711) ? 0.0 : max(_2711, 0.0));
        float _2713 = (isnan(1.0) ? _4637 : (isnan(_4637) ? 1.0 : min(_4637, 1.0))) * (_2687 / ((_2691 * _2691) * 3.141590118408203125));
        float _2714 = isnan(1.0) ? _2185 : (isnan(_2185) ? 1.0 : min(_2185, 1.0));
        _2634 = (((_2700 * cbLight._m0[_2649].x) * _2713) * _2714) + _2524;
        _2636 = (((_2700 * cbLight._m0[_2649].y) * _2713) * _2714) + _2526;
        _2638 = (((_2700 * cbLight._m0[_2649].z) * _2713) * _2714) + _2528;
    }
    float _2849;
    float _2851;
    float _2853;
    float _2855;
    float _2857;
    float _2859;
    if (_2167.y == 0u)
    {
        float _2789 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2790 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2789;
        float _2791 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2789;
        float _2792 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2789;
        uvec4 _2804 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2805 = _2804.x;
        uint _2816 = uint((float(_2804.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1054) / _2805))) + floor(float(uint(cbSceneParam._m0[85u].x * _1053) / _2805)));
        float _2826 = (log2(_2792 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2827 = isnan(0.0) ? _2826 : (isnan(_2826) ? 0.0 : max(_2826, 0.0));
        uint _2830 = uint(isnan(14.0) ? _2827 : (isnan(_2827) ? 14.0 : min(_2827, 14.0)));
        uvec4 _2835 = texelFetch(g_lightClusterGridBuffer, int(((_2830 << 2u) + (_2816 << 6u)) >> 2u));
        uint _2836 = _2835.x;
        uint _2837 = _2804.z;
        float _2937;
        float _2939;
        float _2941;
        float _2943;
        float _2945;
        float _2947;
        if (((((1u << ((_2837 >> 4u) & 15u)) + 4294967295u) & _2836) == 0u) || ((_2837 & 240u) == 0u))
        {
            _2937 = 0.0;
            _2939 = 0.0;
            _2941 = 0.0;
            _2943 = 0.0;
            _2945 = 0.0;
            _2947 = 0.0;
        }
        else
        {
            float _2938;
            float _2940;
            float _2942;
            float _2944;
            float _2946;
            float _2948;
            float _3081 = 0.0;
            float _3082 = 0.0;
            float _3083 = 0.0;
            float _3084 = 0.0;
            float _3085 = 0.0;
            float _3086 = 0.0;
            uint _3087 = 0u;
            uint _3096;
            bool _3097;
            for (;;)
            {
                _3096 = texelFetch(g_lightClassification, int((((_2830 << 5u) + (_2816 << 9u)) + (_3087 << 2u)) >> 2u)).x;
                _3097 = _3096 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_3097)
                {
                    frontier_phi_61_pred = _3081;
                    frontier_phi_61_pred_1 = _3086;
                    frontier_phi_61_pred_2 = _3085;
                    frontier_phi_61_pred_3 = _3084;
                    frontier_phi_61_pred_4 = _3083;
                    frontier_phi_61_pred_5 = _3082;
                }
                else
                {
                    float _3205;
                    float _3206;
                    float _3207;
                    float _3208;
                    float _3209;
                    float _3210;
                    uint _3211;
                    _3205 = _3081;
                    _3206 = _3082;
                    _3207 = _3083;
                    _3208 = _3084;
                    _3209 = _3085;
                    _3210 = _3086;
                    _3211 = _3096;
                    float _3137;
                    float _3138;
                    float _3139;
                    float _3140;
                    float _3141;
                    float _3142;
                    for (;;)
                    {
                        uint _3215 = uint(findLSB(_3211)) + (_3087 << 5u);
                        uint _3212 = (_3211 + 4294967295u) & _3211;
                        uint _3217 = _3215 * 48u;
                        vec4 _3231 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3217)).x, texelFetch(g_PointLightRenderingBuffer, int(_3217 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3217 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3217 + 3u)).x));
                        uint _3237 = (_3215 * 48u) + 4u;
                        vec4 _3250 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3237)).x, texelFetch(g_PointLightRenderingBuffer, int(_3237 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3237 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3237 + 3u)).x));
                        uint _3256 = (_3215 * 48u) + 8u;
                        vec3 _3267 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3256)).x, texelFetch(g_PointLightRenderingBuffer, int(_3256 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3256 + 2u)).x));
                        float _3271 = _3231.x - _2790;
                        float _3272 = _3231.y - _2791;
                        float _3273 = _3231.z - _2792;
                        float _3274 = dot(vec3(_3271, _3272, _3273), vec3(_3271, _3272, _3273));
                        float _3277 = inversesqrt(_3274);
                        float _3278 = _3277 * _3271;
                        float _3279 = _3277 * _3272;
                        float _3280 = _3277 * _3273;
                        float _3281 = dot(vec3(_1072, _1075, _1078), vec3(_3278, _3279, _3280));
                        float _3286 = 1.0 - (_3274 * _3231.w);
                        float _4663 = isnan(0.0) ? _3286 : (isnan(_3286) ? 0.0 : max(_3286, 0.0));
                        float _3287 = isnan(1.0) ? _4663 : (isnan(_4663) ? 1.0 : min(_4663, 1.0));
                        float _3288 = sqrt(_3274) * _3250.w;
                        float _3291 = 1.39999997615814208984375 / (_3288 + 1.39999997615814208984375);
                        float _3292 = _3291 * _3291;
                        float _3295 = ((1.0 - _3292) * _3281) + _3292;
                        float _3298 = _3288 * _3288;
                        float _3302 = ((isnan(0.0) ? _3295 : (isnan(_3295) ? 0.0 : max(_3295, 0.0))) * _3287) / ((_3298 * 0.699999988079071044921875) + 1.0);
                        float _3306 = (-0.0) - _2790;
                        float _3307 = (-0.0) - _2791;
                        float _3308 = (-0.0) - _2792;
                        float _3312 = inversesqrt(dot(vec3(_3306, _3307, _3308), vec3(_3306, _3307, _3308)));
                        float _3313 = _3312 * _3306;
                        float _3314 = _3312 * _3307;
                        float _3315 = _3312 * _3308;
                        float _3323 = exp2(log2(1.0 / ((_3298 * 3.5) + 5.0)) * 0.25);
                        float _3324 = 1.0 - _1132;
                        float _3331 = sqrt(1.0 - ((1.0 - (_3324 * _3324)) * (1.0 - (_3323 * _3323))));
                        float _3332 = _3331 * _3331;
                        float _3333 = _3332 * _3332;
                        float _3334 = _3313 + _3278;
                        float _3335 = _3314 + _3279;
                        float _3336 = _3315 + _3280;
                        float _3340 = inversesqrt(dot(vec3(_3334, _3335, _3336), vec3(_3334, _3335, _3336)));
                        float _3344 = dot(vec3(_1072, _1075, _1078), vec3(_3313, _3314, _3315));
                        float _4679 = isnan(0.0) ? _3344 : (isnan(_3344) ? 0.0 : max(_3344, 0.0));
                        float _3347 = isnan(1.0) ? _4679 : (isnan(_4679) ? 1.0 : min(_4679, 1.0));
                        float _3348 = dot(vec3(_1072, _1075, _1078), vec3(_3340 * _3334, _3340 * _3335, _3340 * _3336));
                        float _4690 = isnan(0.0) ? _3348 : (isnan(_3348) ? 0.0 : max(_3348, 0.0));
                        float _3351 = isnan(1.0) ? _4690 : (isnan(_4690) ? 1.0 : min(_4690, 1.0));
                        float _3355 = ((_3351 * _3351) * (_3333 + (-1.0))) + 1.0;
                        float _3356 = _3291 * _3332;
                        float _3357 = _3356 * _3356;
                        float _3360 = ((1.0 - _3357) * _3281) + _3357;
                        float _4701 = isnan(0.0) ? _3360 : (isnan(_3360) ? 0.0 : max(_3360, 0.0));
                        float _3361 = isnan(1.0) ? _4701 : (isnan(_4701) ? 1.0 : min(_4701, 1.0));
                        float _3362 = 1.0 - _3332;
                        float _3372 = (0.5 / (((_3361 * ((_3347 * _3362) + _3332)) + 9.9999999392252902907785028219223e-09) + (((_3361 * _3362) + _3332) * _3347))) * _3361;
                        float _4712 = isnan(0.0) ? _3372 : (isnan(_3372) ? 0.0 : max(_3372, 0.0));
                        float _3383 = (((_3333 * 3.1415927410125732421875) * (isnan(1.0) ? _4712 : (isnan(_4712) ? 1.0 : min(_4712, 1.0)))) / ((_3355 * _3355) * ((_3298 * 2.1991131305694580078125) + 3.141590118408203125))) * _3287;
                        _3140 = (_3302 * _3250.x) + _3208;
                        _3141 = (_3302 * _3250.y) + _3209;
                        _3142 = (_3302 * _3250.z) + _3210;
                        _3137 = (_3383 * _3267.x) + _3205;
                        _3138 = (_3383 * _3267.y) + _3206;
                        _3139 = (_3383 * _3267.z) + _3207;
                        if (_3212 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3205 = _3137;
                            _3206 = _3138;
                            _3207 = _3139;
                            _3208 = _3140;
                            _3209 = _3141;
                            _3210 = _3142;
                            _3211 = _3212;
                        }
                    }
                    frontier_phi_61_pred = _3137;
                    frontier_phi_61_pred_1 = _3142;
                    frontier_phi_61_pred_2 = _3141;
                    frontier_phi_61_pred_3 = _3140;
                    frontier_phi_61_pred_4 = _3139;
                    frontier_phi_61_pred_5 = _3138;
                }
                _2938 = frontier_phi_61_pred;
                _2948 = frontier_phi_61_pred_1;
                _2946 = frontier_phi_61_pred_2;
                _2944 = frontier_phi_61_pred_3;
                _2942 = frontier_phi_61_pred_4;
                _2940 = frontier_phi_61_pred_5;
                uint _3088 = _3087 + 1u;
                if (_3088 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3081 = _2938;
                    _3082 = _2940;
                    _3083 = _2942;
                    _3084 = _2944;
                    _3085 = _2946;
                    _3086 = _2948;
                    _3087 = _3088;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2937 = _2938;
            _2939 = _2940;
            _2941 = _2942;
            _2943 = _2944;
            _2945 = _2946;
            _2947 = _2948;
        }
        uvec4 _2951 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2952 = _2951.z;
        uint _2954 = (_2952 >> 8u) & 15u;
        float _3049;
        float _3051;
        float _3053;
        float _3055;
        float _3057;
        float _3059;
        if (((4294967295u << _2954) & _2836) == 0u)
        {
            _3049 = _2937;
            _3051 = _2939;
            _3053 = _2941;
            _3055 = _2943;
            _3057 = _2945;
            _3059 = _2947;
        }
        else
        {
            float _3074 = inversesqrt(dot(vec3(_2790, _2791, _2792), vec3(_2790, _2791, _2792)));
            float _3075 = _3074 * _2790;
            float _3076 = _3074 * _2791;
            float _3077 = _3074 * _2792;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2954 < ((_2952 >> 12u) & 15u))
            {
                float _3050;
                float _3052;
                float _3054;
                float _3056;
                float _3058;
                float _3060;
                float _3188 = _2937;
                float _3189 = _2939;
                float _3190 = _2941;
                float _3191 = _2943;
                float _3192 = _2945;
                float _3193 = _2947;
                uint _3194 = _2954;
                uint _3203;
                bool _3204;
                for (;;)
                {
                    _3203 = texelFetch(g_lightClassification, int((((_2830 << 5u) + (_2816 << 9u)) + (_3194 << 2u)) >> 2u)).x;
                    _3204 = _3203 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_3204)
                    {
                        frontier_phi_67_pred = _3191;
                        frontier_phi_67_pred_1 = _3192;
                        frontier_phi_67_pred_2 = _3193;
                        frontier_phi_67_pred_3 = _3190;
                        frontier_phi_67_pred_4 = _3189;
                        frontier_phi_67_pred_5 = _3188;
                    }
                    else
                    {
                        float _3388;
                        float _3389;
                        float _3390;
                        float _3391;
                        float _3392;
                        float _3393;
                        float _3681;
                        float _3682;
                        float _3683;
                        float _3684;
                        float _3685;
                        float _3686;
                        float _3401 = _3188;
                        float _3402 = _3189;
                        float _3403 = _3190;
                        float _3404 = _3191;
                        float _3405 = _3192;
                        float _3406 = _3193;
                        uint _3407 = _3203;
                        uint _3408;
                        vec4 _3433;
                        float _3434;
                        vec4 _3449;
                        vec3 _3461;
                        vec4 _3476;
                        vec4 _3491;
                        float _3537;
                        bool _3538;
                        for (;;)
                        {
                            uint _3418 = ((_3194 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3407));
                            _3408 = (_3407 + 4294967295u) & _3407;
                            uint _3420 = _3418 * 40u;
                            _3433 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3420)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3420 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3420 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3420 + 3u)).x));
                            _3434 = _3433.w;
                            uint _3436 = (_3418 * 40u) + 4u;
                            _3449 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3436)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3436 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3436 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3436 + 3u)).x));
                            uint _3451 = (_3418 * 40u) + 8u;
                            _3461 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3451)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3451 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3451 + 2u)).x));
                            uint _3463 = (_3418 * 40u) + 16u;
                            _3476 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3463)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3463 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3463 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3463 + 3u)).x));
                            uint _3478 = (_3418 * 40u) + 20u;
                            _3491 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3478)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3478 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3478 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3478 + 3u)).x));
                            uint _3493 = (_3418 * 40u) + 24u;
                            vec4 _3506 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3493)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3493 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3493 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3493 + 3u)).x));
                            uint _3512 = (_3418 * 40u) + 28u;
                            vec4 _3525 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3512)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3512 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3512 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3512 + 3u)).x));
                            _3537 = fma(_2792, _3525.z, fma(_2791, _3525.y, _3525.x * _2790)) + _3525.w;
                            _3538 = !((fma(_2792, _3506.z, fma(_2791, _3506.y, _3506.x * _2790)) + _3506.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3538)
                            {
                                float _3565 = _3433.x - _2790;
                                float _3566 = _3433.y - _2791;
                                float _3567 = _3433.z - _2792;
                                float _3568 = dot(vec3(_3565, _3566, _3567), vec3(_3565, _3566, _3567));
                                float _3571 = inversesqrt(_3568);
                                float _3572 = _3571 * _3565;
                                float _3573 = _3571 * _3566;
                                float _3574 = _3571 * _3567;
                                float _3578 = 1.0 - (_3568 / (_3434 * _3434));
                                float _4723 = isnan(0.0) ? _3578 : (isnan(_3578) ? 0.0 : max(_3578, 0.0));
                                float _3579 = isnan(1.0) ? _4723 : (isnan(_4723) ? 1.0 : min(_4723, 1.0));
                                float _3583 = sqrt(_3568) * _3449.w;
                                float _3585 = 1.39999997615814208984375 / (_3583 + 1.39999997615814208984375);
                                float _3586 = _3585 * _3585;
                                float _3589 = ((1.0 - _3586) * dot(vec3(_3572, _3573, _3574), vec3(_1072, _1075, _1078))) + _3586;
                                float _3592 = _3583 * _3583;
                                float _3596 = (fma(_2792, _3476.z, fma(_2791, _3476.y, _3476.x * _2790)) + _3476.w) / _3537;
                                float _3597 = (fma(_2792, _3491.z, fma(_2791, _3491.y, _3491.x * _2790)) + _3491.w) / _3537;
                                float _3601 = 1.0 - dot(vec2(_3596, _3597), vec2(_3596, _3597));
                                float _4739 = isnan(0.0) ? _3601 : (isnan(_3601) ? 0.0 : max(_3601, 0.0));
                                float _3602 = isnan(1.0) ? _4739 : (isnan(_4739) ? 1.0 : min(_4739, 1.0));
                                float _3603 = _3602 * (((isnan(0.0) ? _3589 : (isnan(_3589) ? 0.0 : max(_3589, 0.0))) * _3579) / ((_3592 * 0.699999988079071044921875) + 1.0));
                                float _3615 = exp2(log2(1.0 / ((_3592 * 3.5) + 5.0)) * 0.25);
                                float _3616 = 1.0 - _1132;
                                float _3623 = sqrt(1.0 - ((1.0 - (_3616 * _3616)) * (1.0 - (_3615 * _3615))));
                                float _3624 = _3623 * _3623;
                                float _3625 = _3624 * _3624;
                                float _3626 = _3572 - _3075;
                                float _3627 = _3573 - _3076;
                                float _3628 = _3574 - _3077;
                                float _3632 = inversesqrt(dot(vec3(_3626, _3627, _3628), vec3(_3626, _3627, _3628)));
                                float _3636 = dot(vec3(_1072, _1075, _1078), vec3((-0.0) - _3075, (-0.0) - _3076, (-0.0) - _3077));
                                float _4750 = isnan(0.0) ? _3636 : (isnan(_3636) ? 0.0 : max(_3636, 0.0));
                                float _3639 = isnan(1.0) ? _4750 : (isnan(_4750) ? 1.0 : min(_4750, 1.0));
                                float _3640 = dot(vec3(_1072, _1075, _1078), vec3(_3632 * _3626, _3632 * _3627, _3632 * _3628));
                                float _4761 = isnan(0.0) ? _3640 : (isnan(_3640) ? 0.0 : max(_3640, 0.0));
                                float _3643 = isnan(1.0) ? _4761 : (isnan(_4761) ? 1.0 : min(_4761, 1.0));
                                float _3647 = ((_3643 * _3643) * (_3625 + (-1.0))) + 1.0;
                                float _3648 = _3585 * _3624;
                                float _3649 = _3648 * _3648;
                                float _3655 = ((1.0 - _3649) * dot(vec3(_1072, _1075, _1078), vec3(_3572, _3573, _3574))) + _3649;
                                float _4772 = isnan(0.0) ? _3655 : (isnan(_3655) ? 0.0 : max(_3655, 0.0));
                                float _3656 = isnan(1.0) ? _4772 : (isnan(_4772) ? 1.0 : min(_4772, 1.0));
                                float _3657 = 1.0 - _3624;
                                float _3667 = (0.5 / (((_3656 * ((_3639 * _3657) + _3624)) + 9.9999999392252902907785028219223e-09) + (((_3656 * _3657) + _3624) * _3639))) * _3656;
                                float _4783 = isnan(0.0) ? _3667 : (isnan(_3667) ? 0.0 : max(_3667, 0.0));
                                float _3677 = (_3602 * _3579) * (((_3625 * 3.1415927410125732421875) * (isnan(1.0) ? _4783 : (isnan(_4783) ? 1.0 : min(_4783, 1.0)))) / ((_3647 * _3647) * ((_3592 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3677 * _3461.x;
                                frontier_phi_73_pred_1 = _3677 * _3461.y;
                                frontier_phi_73_pred_2 = _3603 * _3449.z;
                                frontier_phi_73_pred_3 = _3603 * _3449.y;
                                frontier_phi_73_pred_4 = _3603 * _3449.x;
                                frontier_phi_73_pred_5 = _3677 * _3461.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3681 = frontier_phi_73_pred;
                            _3682 = frontier_phi_73_pred_1;
                            _3686 = frontier_phi_73_pred_2;
                            _3685 = frontier_phi_73_pred_3;
                            _3684 = frontier_phi_73_pred_4;
                            _3683 = frontier_phi_73_pred_5;
                            _3391 = _3684 + _3404;
                            _3392 = _3685 + _3405;
                            _3393 = _3686 + _3406;
                            _3388 = _3681 + _3401;
                            _3389 = _3682 + _3402;
                            _3390 = _3683 + _3403;
                            if (_3408 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3401 = _3388;
                                _3402 = _3389;
                                _3403 = _3390;
                                _3404 = _3391;
                                _3405 = _3392;
                                _3406 = _3393;
                                _3407 = _3408;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3391;
                        frontier_phi_67_pred_1 = _3392;
                        frontier_phi_67_pred_2 = _3393;
                        frontier_phi_67_pred_3 = _3390;
                        frontier_phi_67_pred_4 = _3389;
                        frontier_phi_67_pred_5 = _3388;
                    }
                    _3056 = frontier_phi_67_pred;
                    _3058 = frontier_phi_67_pred_1;
                    _3060 = frontier_phi_67_pred_2;
                    _3054 = frontier_phi_67_pred_3;
                    _3052 = frontier_phi_67_pred_4;
                    _3050 = frontier_phi_67_pred_5;
                    uint _3195 = _3194 + 1u;
                    if (_3195 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3188 = _3050;
                        _3189 = _3052;
                        _3190 = _3054;
                        _3191 = _3056;
                        _3192 = _3058;
                        _3193 = _3060;
                        _3194 = _3195;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _3058;
                frontier_phi_55_56_ladder_1 = _3060;
                frontier_phi_55_56_ladder_2 = _3056;
                frontier_phi_55_56_ladder_3 = _3054;
                frontier_phi_55_56_ladder_4 = _3052;
                frontier_phi_55_56_ladder_5 = _3050;
            }
            else
            {
                frontier_phi_55_56_ladder = _2945;
                frontier_phi_55_56_ladder_1 = _2947;
                frontier_phi_55_56_ladder_2 = _2943;
                frontier_phi_55_56_ladder_3 = _2941;
                frontier_phi_55_56_ladder_4 = _2939;
                frontier_phi_55_56_ladder_5 = _2937;
            }
            _3049 = frontier_phi_55_56_ladder_5;
            _3051 = frontier_phi_55_56_ladder_4;
            _3053 = frontier_phi_55_56_ladder_3;
            _3055 = frontier_phi_55_56_ladder_2;
            _3057 = frontier_phi_55_56_ladder;
            _3059 = frontier_phi_55_56_ladder_1;
        }
        float _3064 = isnan(1.0) ? _1116 : (isnan(_1116) ? 1.0 : min(_1116, 1.0));
        _2849 = (_3064 * _3055) + _2301;
        _2851 = (_3064 * _3057) + _2303;
        _2853 = (_3064 * _3059) + _2305;
        _2855 = ((_3049 * 0.039999999105930328369140625) * _3064) + _2634;
        _2857 = ((_3051 * 0.039999999105930328369140625) * _3064) + _2636;
        _2859 = ((_3053 * 0.039999999105930328369140625) * _3064) + _2638;
    }
    else
    {
        _2849 = _2301;
        _2851 = _2303;
        _2853 = _2305;
        _2855 = _2634;
        _2857 = _2636;
        _2859 = _2638;
    }
    float _4799 = isnan(0.0) ? _1101 : (isnan(_1101) ? 0.0 : max(_1101, 0.0));
    float _4810 = isnan(0.0) ? _1102 : (isnan(_1102) ? 0.0 : max(_1102, 0.0));
    float _4821 = isnan(0.0) ? _1103 : (isnan(_1103) ? 0.0 : max(_1103, 0.0));
    uint _2879 = _283 + 6u;
    float _2887 = _1053 / cbSceneParam._m0[86u].x;
    float _2888 = _1054 / cbSceneParam._m0[86u].y;
    vec4 _2902 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2887, _2888, (log2((isnan(cbSceneParam._m0[77u].w) ? _988 : (isnan(_988) ? cbSceneParam._m0[77u].w : min(_988, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2904 = _2902.x;
    float _2905 = _2902.y;
    float _2906 = _2902.z;
    float _2907 = _2902.w;
    float _2999;
    float _3001;
    float _3003;
    float _3005;
    if (_988 > cbSceneParam._m0[78u].w)
    {
        float _2962 = isnan(_988) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _988 : min(cbSceneParam._m0[80u].w, _988));
        float _2963 = _2962 / _988;
        float _2974 = _2963 * _1038;
        float _2975 = _1039 * _2963;
        float _2976 = (-0.0) - _2975;
        float _2977 = _2963 * _1040;
        float _2979 = (cbSceneParam._m0[77u].w * _2976) / _2962;
        float _2980 = _2979 + cbSceneParam._m0[79u].w;
        float _2981 = cbSceneParam._m0[79u].w - _2975;
        float _2987 = sqrt(((_2974 * _2974) + (_2975 * _2975)) + (_2977 * _2977));
        float _2990 = (1.0 - (cbSceneParam._m0[77u].w / _2962)) * _2987;
        float _2995 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2997 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3150;
        if (abs((_2976 - _2979) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3150 = ((((_2980 > 0.0) ? exp2(_2995 * _2980) : (2.0 - exp2(_2997 * _2980))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2990;
        }
        else
        {
            float _3110 = 1.0 / cbSceneParam._m0[80u].x;
            float _3111 = isnan(_2981) ? _2980 : (isnan(_2980) ? _2981 : max(_2980, _2981));
            float _3112 = isnan(_2981) ? _2980 : (isnan(_2980) ? _2981 : min(_2980, _2981));
            float _3121 = isnan(0.0) ? _3111 : (isnan(_3111) ? 0.0 : min(_3111, 0.0));
            float _3122 = isnan(0.0) ? _3112 : (isnan(_3112) ? 0.0 : min(_3112, 0.0));
            _3150 = ((abs(_2987 / _2976) * cbSceneParam._m0[80u].y) * ((((_3121 - _3122) * 2.0) - ((exp2(_2995 * (isnan(0.0) ? _3111 : (isnan(_3111) ? 0.0 : max(_3111, 0.0)))) - exp2(_2995 * (isnan(0.0) ? _3112 : (isnan(_3112) ? 0.0 : max(_3112, 0.0))))) * _3110)) - ((exp2(_2997 * _3121) - exp2(_2997 * _3122)) * _3110))) + (_2990 * cbSceneParam._m0[80u].z);
        }
        vec4 _3152 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2887, _2888, 1.0), 0.0);
        float _3161 = exp2((_3150 * (-1.44269502162933349609375)) * (1.0 - _3152.w));
        float _3162 = log2(_3161);
        float _3178 = log2(_2907);
        _2999 = (exp2(_3178 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3162 * cbSceneParam._m0[78u].x)) * _3152.x) / cbSceneParam._m0[78u].x)) + _2904;
        _3001 = (exp2(_3178 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3162 * cbSceneParam._m0[78u].y)) * _3152.y) / cbSceneParam._m0[78u].y)) + _2905;
        _3003 = (exp2(_3178 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3162 * cbSceneParam._m0[78u].z)) * _3152.z) / cbSceneParam._m0[78u].z)) + _2906;
        _3005 = _3161 * _2907;
    }
    else
    {
        _2999 = _2904;
        _3001 = _2905;
        _3003 = _2906;
        _3005 = _2907;
    }
    float _3017 = roundEven(cbMatDynParam._m0[0u].y);
    bool _3018 = _3017 == 3.0;
    float _3019 = log2(_3005);
    float _3026 = exp2(_3019 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4799 : (isnan(_4799) ? 1.0 : min(_4799, 1.0))) * (_2849 + ((isnan(0.0) ? _1841 : (isnan(_1841) ? 0.0 : max(_1841, 0.0))) * _1116))) + ((_2855 + ((isnan(0.0) ? _2133 : (isnan(_2133) ? 0.0 : max(_2133, 0.0))) * _1920)) * cbPerFrame._m0[3u].x));
    float _3027 = exp2(_3019 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4810 : (isnan(_4810) ? 1.0 : min(_4810, 1.0))) * (_2851 + ((isnan(0.0) ? _1844 : (isnan(_1844) ? 0.0 : max(_1844, 0.0))) * _1116))) + ((_2857 + ((isnan(0.0) ? _2136 : (isnan(_2136) ? 0.0 : max(_2136, 0.0))) * _1920)) * cbPerFrame._m0[3u].x));
    float _3028 = exp2(_3019 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4821 : (isnan(_4821) ? 1.0 : min(_4821, 1.0))) * (_2853 + ((isnan(0.0) ? _1847 : (isnan(_1847) ? 0.0 : max(_1847, 0.0))) * _1116))) + ((_2859 + ((isnan(0.0) ? _2139 : (isnan(_2139) ? 0.0 : max(_2139, 0.0))) * _1920)) * cbPerFrame._m0[3u].x));
    float _3037 = (_3017 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _3037 * (_3018 ? _3026 : (_3026 + (cbSceneParam._m0[72u].w * _2999)));
    SV_Target.y = _3037 * (_3018 ? _3027 : (_3027 + (cbSceneParam._m0[72u].w * _3001)));
    SV_Target.z = _3037 * (_3018 ? _3028 : (_3028 + (cbSceneParam._m0[72u].w * _3003)));
    SV_Target.w = cbInstanceData._m0[_2879].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2879].w;
}


