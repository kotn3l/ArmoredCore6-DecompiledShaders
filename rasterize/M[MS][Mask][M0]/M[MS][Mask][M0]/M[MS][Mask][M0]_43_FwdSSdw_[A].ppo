#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 13) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_22;
layout(set = 0, binding = 14) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 20) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_6;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1292;
float _3674;
float _3675;
float _3676;
float _3677;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _219 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _220 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _221 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _227 = inversesqrt(dot(vec3(_219, _220, _221), vec3(_219, _220, _221)));
    float _228 = _227 * _219;
    float _229 = _227 * _220;
    float _230 = _227 * _221;
    float _234 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _235 = _234 * NORMAL.x;
    float _236 = _234 * NORMAL.y;
    float _237 = _234 * NORMAL.z;
    float _241 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _242 = _241 * TANGENT.x;
    float _243 = _241 * TANGENT.y;
    float _244 = _241 * TANGENT.z;
    float _255 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _257 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _258 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3686 = isnan(0.0) ? _255 : (isnan(_255) ? 0.0 : max(_255, 0.0));
    float _3697 = isnan(0.0) ? _257 : (isnan(_257) ? 0.0 : max(_257, 0.0));
    float _3708 = isnan(0.0) ? _258 : (isnan(_258) ? 0.0 : max(_258, 0.0));
    uint _268 = uint(roundEven(NORMAL.w)) * 13u;
    uint _273 = _268 + 1u;
    uint _277 = _268 + 2u;
    float _286 = sqrt(((cbInstanceData._m0[_273].x * cbInstanceData._m0[_273].x) + (cbInstanceData._m0[_268].x * cbInstanceData._m0[_268].x)) + (cbInstanceData._m0[_277].x * cbInstanceData._m0[_277].x));
    float _287 = _286 * TEXCOORD.z;
    float _288 = _286 * TEXCOORD.w;
    vec4 _301 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _287) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _288) + cbTextureTilingScale._m0[13u].w));
    vec4 _325 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _330 = _325.x * cbMtdParam._m0[11u].x;
    float _331 = _325.y * cbMtdParam._m0[11u].y;
    float _332 = _325.z * cbMtdParam._m0[11u].z;
    vec4 _351 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _287) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _288) + cbTextureTilingScale._m0[5u].w));
    vec4 _402 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _404 = _402.x;
    float _416 = dot(vec4(_404, _402.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _433 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w)).x) * 2.0) - ((((_404 - _416) * cbMtdParam._m0[24u].z) + _416) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3719 = isnan(0.0) ? _433 : (isnan(_433) ? 0.0 : max(_433, 0.0));
    float _434 = isnan(1.0) ? _3719 : (isnan(_3719) ? 1.0 : min(_3719, 1.0));
    float _441 = (_434 * ((_351.x * cbMtdParam._m0[12u].x) - _330)) + _330;
    float _442 = (_434 * ((_351.y * cbMtdParam._m0[12u].y) - _331)) + _331;
    float _443 = (_434 * ((_351.z * cbMtdParam._m0[12u].z) - _332)) + _332;
    float _447 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _301.x) * _441;
    float _450 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _301.y) * _442;
    float _453 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _301.z) * _443;
    float _460 = ((_441 - _447) * (isnan(1.0) ? _3686 : (isnan(_3686) ? 1.0 : min(_3686, 1.0)))) + _447;
    float _461 = ((_442 - _450) * (isnan(1.0) ? _3697 : (isnan(_3697) ? 1.0 : min(_3697, 1.0)))) + _450;
    float _462 = ((_443 - _453) * (isnan(1.0) ? _3708 : (isnan(_3708) ? 1.0 : min(_3708, 1.0)))) + _453;
    vec4 _481 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _287) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _288) + cbTextureTilingScale._m0[14u].w));
    vec4 _501 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _287) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _288) + cbTextureTilingScale._m0[20u].w));
    vec4 _528 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _287) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _288) + cbTextureTilingScale._m0[4u].w));
    vec4 _545 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _547 = _545.x;
    float _548 = _545.y;
    float _549 = _545.z;
    float _558 = ((_528.z - _549) * _434) + _549;
    float _561 = ((((_528.x - _547) * _434) + _547) * 2.0) + (-1.0);
    float _562 = ((((_528.y - _548) * _434) + _548) * 2.0) + (-1.0);
    float _563 = dot(vec2(_561, _562), vec2(_561, _562));
    float _3730 = isnan(0.0) ? _563 : (isnan(_563) ? 0.0 : max(_563, 0.0));
    float _568 = sqrt(1.0 - (isnan(1.0) ? _3730 : (isnan(_3730) ? 1.0 : min(_3730, 1.0))));
    vec4 _588 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _600 = (_561 + ((((_501.x * 2.0) + (-1.0)) * TEXCOORD_11.x) * cbMtdParam._m0[20u].x)) + (((_588.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _601 = (_562 + ((((_501.y * 2.0) + (-1.0)) * TEXCOORD_11.y) * cbMtdParam._m0[20u].x)) + (((_588.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _604 = fma(_568, _235, fma(_601, _242, _600 * _228));
    float _607 = fma(_568, _236, fma(_601, _243, _600 * _229));
    float _610 = fma(_568, _237, fma(_601, _244, _600 * _230));
    float _614 = inversesqrt(dot(vec3(_604, _607, _610), vec3(_604, _607, _610)));
    vec4 _641 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _287) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _288) + cbTextureTilingScale._m0[11u].w));
    float _643 = _641.x;
    float _644 = 1.0 - _643;
    float _650 = (cbMtdParam._m0[19u].x + dot(vec4(_614 * _604, _614 * _607, _614 * _610, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_643 - _644) * cbMtdParam._m0[24u].w) + _644) * cbMtdParam._m0[21u].z);
    float _3741 = isnan(0.0) ? _650 : (isnan(_650) ? 0.0 : max(_650, 0.0));
    float _651 = isnan(1.0) ? _3741 : (isnan(_3741) ? 1.0 : min(_3741, 1.0));
    float _658 = (_651 * ((_481.x * cbMtdParam._m0[18u].x) - _460)) + _460;
    float _659 = (_651 * ((_481.y * cbMtdParam._m0[18u].y) - _461)) + _461;
    float _660 = (_651 * ((_481.z * cbMtdParam._m0[18u].z) - _462)) + _462;
    float _665 = (((_501.z - _558) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _558;
    float _669 = ((_588.z - _665) * cbMtdParam._m0[19u].w) + _665;
    vec4 _682 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _287) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _288) + cbTextureTilingScale._m0[15u].w));
    float _689 = (_682.x * 2.0) + (-1.0);
    float _690 = (_682.y * 2.0) + (-1.0);
    float _691 = dot(vec2(_689, _690), vec2(_689, _690));
    float _3752 = isnan(0.0) ? _691 : (isnan(_691) ? 0.0 : max(_691, 0.0));
    float _699 = ((_682.z - _669) * _651) + _669;
    float _709 = ((sqrt(1.0 - (isnan(1.0) ? _3752 : (isnan(_3752) ? 1.0 : min(_3752, 1.0)))) - _568) * _651) + _568;
    float _712 = (((_689 - _600) * _651) + _600) + (cbMtdParam._m0[21u].x * _600);
    float _713 = (((_690 - _601) * _651) + _601) + (cbMtdParam._m0[21u].x * _601);
    float _715 = cbMtdParam._m0[22u].x + _588.w;
    float _718 = fma(_709, _235, fma(_713, _242, _712 * _228));
    float _721 = fma(_709, _236, fma(_713, _243, _712 * _229));
    float _724 = fma(_709, _237, fma(_713, _244, _712 * _230));
    float _728 = inversesqrt(dot(vec3(_718, _721, _724), vec3(_718, _721, _724)));
    float _729 = _728 * _718;
    float _730 = _728 * _721;
    float _731 = _728 * _724;
    float _3763 = isnan(0.0) ? _699 : (isnan(_699) ? 0.0 : max(_699, 0.0));
    float _732 = isnan(1.0) ? _3763 : (isnan(_3763) ? 1.0 : min(_3763, 1.0));
    float _3774 = isnan(0.0) ? _715 : (isnan(_715) ? 0.0 : max(_715, 0.0));
    float _3785 = isnan(0.0) ? _658 : (isnan(_658) ? 0.0 : max(_658, 0.0));
    float _3796 = isnan(0.0) ? _659 : (isnan(_659) ? 0.0 : max(_659, 0.0));
    float _3807 = isnan(0.0) ? _660 : (isnan(_660) ? 0.0 : max(_660, 0.0));
    float _750 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _792 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _802 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _792);
    float _803 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _792);
    float _804 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _792);
    float _808 = inversesqrt(dot(vec3(_802, _803, _804), vec3(_802, _803, _804)));
    float _809 = _802 * _808;
    float _810 = _803 * _808;
    float _811 = _804 * _808;
    vec4 _816 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _818 = _816.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _972 = sqrt(((_802 * _802) + (_803 * _803)) + (_804 * _804));
        float _978 = (cbMatDynParam._m0[5u].x * _972) + cbMatDynParam._m0[5u].y;
        float _3818 = isnan(0.0) ? _978 : (isnan(_978) ? 0.0 : max(_978, 0.0));
        float _979 = isnan(1.0) ? _3818 : (isnan(_3818) ? 1.0 : min(_3818, 1.0));
        float _983 = (cbMatDynParam._m0[5u].z * _972) + cbMatDynParam._m0[5u].w;
        float _3829 = isnan(0.0) ? _983 : (isnan(_983) ? 0.0 : max(_983, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3829 : (isnan(_3829) ? 1.0 : min(_3829, 1.0))) - _979)) + _979) < ((_818 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _829 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _830 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _848 = fma(_731, cbSceneParam._m0[5u].z, fma(_730, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _729));
    float _851 = fma(_731, cbSceneParam._m0[6u].z, fma(_730, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _729));
    float _854 = fma(_731, cbSceneParam._m0[7u].z, fma(_730, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _729));
    uint _867 = _268 + 9u;
    uint _868 = _867 + uint(cbMatDynParam._m0[0u].w);
    float _874 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3785 : (isnan(_3785) ? 1.0 : min(_3785, 1.0)))) * cbInstanceData._m0[_868].x;
    float _875 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3796 : (isnan(_3796) ? 1.0 : min(_3796, 1.0)))) * cbInstanceData._m0[_868].y;
    float _876 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3807 : (isnan(_3807) ? 1.0 : min(_3807, 1.0)))) * cbInstanceData._m0[_868].z;
    float _3840 = isnan(0.0) ? _874 : (isnan(_874) ? 0.0 : max(_874, 0.0));
    float _877 = isnan(1.0) ? _3840 : (isnan(_3840) ? 1.0 : min(_3840, 1.0));
    float _3851 = isnan(0.0) ? _875 : (isnan(_875) ? 0.0 : max(_875, 0.0));
    float _878 = isnan(1.0) ? _3851 : (isnan(_3851) ? 1.0 : min(_3851, 1.0));
    float _3862 = isnan(0.0) ? _876 : (isnan(_876) ? 0.0 : max(_876, 0.0));
    float _879 = isnan(1.0) ? _3862 : (isnan(_3862) ? 1.0 : min(_3862, 1.0));
    vec4 _888 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _829, cbSceneParam._m0[86u].y * _830));
    float _892 = ((isnan(1.0) ? _3774 : (isnan(_3774) ? 1.0 : min(_3774, 1.0))) * TEXCOORD_5.w) * _888.x;
    float _893 = dot(vec3(_729, _730, _731), vec3(_809, _810, _811));
    float _896 = _893 * 2.0;
    float _900 = (_896 * _729) - _809;
    float _901 = (_896 * _730) - _810;
    float _902 = (_896 * _731) - _811;
    float _906 = abs(dot(vec3(_809, _810, _811), vec3(_729, _730, _731)));
    float _3873 = isnan(0.0) ? _906 : (isnan(_906) ? 0.0 : max(_906, 0.0));
    float _908 = sqrt(_732);
    float _921 = exp2((_908 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3873 : (isnan(_3873) ? 1.0 : min(_3873, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_908 * 3.0));
    float _953 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _957 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _961 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1291;
    float _1293;
    float _1294;
    float _1295;
    float _1296;
    float _1297;
    float _1298;
    float _1299;
    float _1300;
    float _1301;
    float _1302;
    float _1303;
    float _1304;
    float _1305;
    float _1306;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1016 = fma(_961, cbModelParam._m0[26u].z, fma(_957, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _953));
        float _1020 = fma(_961, cbModelParam._m0[27u].z, fma(_957, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _953));
        float _1024 = fma(_961, cbModelParam._m0[28u].z, fma(_957, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _953));
        float _1049 = _953 + _729;
        float _1050 = _957 + _730;
        float _1051 = _961 + _731;
        float _1061 = fma(_1051, cbModelParam._m0[26u].z, fma(_1050, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1049)) - _1016;
        float _1062 = fma(_1051, cbModelParam._m0[27u].z, fma(_1050, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1049)) - _1020;
        float _1063 = fma(_1051, cbModelParam._m0[28u].z, fma(_1050, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1049)) - _1024;
        float _1067 = inversesqrt(dot(vec3(_1061, _1062, _1063), vec3(_1061, _1062, _1063)));
        float _1080 = ((_1067 * _1061) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1016 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1081 = ((_1067 * _1062) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1020 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1082 = ((_1067 * _1063) / cbModelParam._m0[34u].z) + ((((((_1024 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1085 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1080, _1081, _1082), 0.0);
        vec4 _1092 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1080, _1081, _1082), 0.0);
        vec4 _1099 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1080, _1081, _1082), 0.0);
        vec4 _1106 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1080, _1081, _1082), 0.0);
        float _1119 = exp2((_1085.w + (-0.5)) * 20.0) * 2.0;
        float _1120 = _1119 * (_1085.x + (-0.5));
        float _1121 = _1119 * (_1085.y + (-0.5));
        float _1122 = _1119 * (_1085.z + (-0.5));
        float _1129 = exp2((_1092.w + (-0.5)) * 20.0) * 2.0;
        float _1130 = _1129 * (_1092.x + (-0.5));
        float _1131 = _1129 * (_1092.y + (-0.5));
        float _1132 = _1129 * (_1092.z + (-0.5));
        float _1139 = exp2((_1099.w + (-0.5)) * 20.0) * 2.0;
        float _1140 = _1139 * (_1099.x + (-0.5));
        float _1141 = _1139 * (_1099.y + (-0.5));
        float _1142 = _1139 * (_1099.z + (-0.5));
        float _1149 = exp2((_1106.w + (-0.5)) * 20.0) * 2.0;
        float _1150 = _1149 * (_1106.x + (-0.5));
        float _1151 = _1149 * (_1106.y + (-0.5));
        float _1152 = _1149 * (_1106.z + (-0.5));
        float _1153 = isnan(0.0) ? _1150 : (isnan(_1150) ? 0.0 : max(_1150, 0.0));
        float _1154 = isnan(0.0) ? _1151 : (isnan(_1151) ? 0.0 : max(_1151, 0.0));
        float _1155 = isnan(0.0) ? _1152 : (isnan(_1152) ? 0.0 : max(_1152, 0.0));
        float _1156 = _1120 * 0.5;
        float _1157 = _1130 * 0.5;
        float _1158 = _1140 * 0.5;
        float _1159 = dot(vec3(_1156, _1157, _1158), vec3(_1156, _1157, _1158));
        float _1164 = (_1159 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1159);
        float _1173 = (dot(vec3(_729, _730, _731), vec3(_1164 * _1156, _1164 * _1157, _1164 * _1158)) + 1.0) * 0.5;
        float _3899 = isnan(0.0) ? _1173 : (isnan(_1173) ? 0.0 : max(_1173, 0.0));
        float _1183 = sqrt(((_1157 * _1157) + (_1156 * _1156)) + (_1158 * _1158)) / (_1153 + 9.9999997473787516355514526367188e-06);
        float _3910 = isnan(0.0) ? _1183 : (isnan(_1183) ? 0.0 : max(_1183, 0.0));
        float _1184 = isnan(1.0) ? _3910 : (isnan(_3910) ? 1.0 : min(_3910, 1.0));
        float _1185 = _1184 * 2.0;
        float _1189 = (1.0 - _1184) / (_1184 + 1.0);
        float _3921 = isnan(0.0) ? _1189 : (isnan(_1189) ? 0.0 : max(_1189, 0.0));
        float _1190 = isnan(1.0) ? _3921 : (isnan(_3921) ? 1.0 : min(_3921, 1.0));
        float _1199 = ((((1.0 - _1190) * (_1185 + 2.0)) * exp2(log2(isnan(1.0) ? _3899 : (isnan(_3899) ? 1.0 : min(_3899, 1.0))) * (_1185 + 1.0))) + _1190) * _1153;
        float _1200 = _1121 * 0.5;
        float _1201 = _1131 * 0.5;
        float _1202 = _1141 * 0.5;
        float _1203 = dot(vec3(_1200, _1201, _1202), vec3(_1200, _1201, _1202));
        float _1208 = (_1203 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1203);
        float _1216 = (dot(vec3(_729, _730, _731), vec3(_1208 * _1200, _1208 * _1201, _1208 * _1202)) + 1.0) * 0.5;
        float _3932 = isnan(0.0) ? _1216 : (isnan(_1216) ? 0.0 : max(_1216, 0.0));
        float _1225 = sqrt(((_1201 * _1201) + (_1200 * _1200)) + (_1202 * _1202)) / (_1154 + 9.9999997473787516355514526367188e-06);
        float _3943 = isnan(0.0) ? _1225 : (isnan(_1225) ? 0.0 : max(_1225, 0.0));
        float _1226 = isnan(1.0) ? _3943 : (isnan(_3943) ? 1.0 : min(_3943, 1.0));
        float _1227 = _1226 * 2.0;
        float _1231 = (1.0 - _1226) / (_1226 + 1.0);
        float _3954 = isnan(0.0) ? _1231 : (isnan(_1231) ? 0.0 : max(_1231, 0.0));
        float _1232 = isnan(1.0) ? _3954 : (isnan(_3954) ? 1.0 : min(_3954, 1.0));
        float _1241 = ((((1.0 - _1232) * (_1227 + 2.0)) * exp2(log2(isnan(1.0) ? _3932 : (isnan(_3932) ? 1.0 : min(_3932, 1.0))) * (_1227 + 1.0))) + _1232) * _1154;
        float _1242 = _1122 * 0.5;
        float _1243 = _1132 * 0.5;
        float _1244 = _1142 * 0.5;
        float _1245 = dot(vec3(_1242, _1243, _1244), vec3(_1242, _1243, _1244));
        float _1250 = (_1245 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1245);
        float _1258 = (dot(vec3(_729, _730, _731), vec3(_1250 * _1242, _1250 * _1243, _1250 * _1244)) + 1.0) * 0.5;
        float _3965 = isnan(0.0) ? _1258 : (isnan(_1258) ? 0.0 : max(_1258, 0.0));
        float _1267 = sqrt(((_1243 * _1243) + (_1242 * _1242)) + (_1244 * _1244)) / (_1155 + 9.9999997473787516355514526367188e-06);
        float _3976 = isnan(0.0) ? _1267 : (isnan(_1267) ? 0.0 : max(_1267, 0.0));
        float _1268 = isnan(1.0) ? _3976 : (isnan(_3976) ? 1.0 : min(_3976, 1.0));
        float _1269 = _1268 * 2.0;
        float _1273 = (1.0 - _1268) / (_1268 + 1.0);
        float _3987 = isnan(0.0) ? _1273 : (isnan(_1273) ? 0.0 : max(_1273, 0.0));
        float _1274 = isnan(1.0) ? _3987 : (isnan(_3987) ? 1.0 : min(_3987, 1.0));
        float _1283 = ((((1.0 - _1274) * (_1269 + 2.0)) * exp2(log2(isnan(1.0) ? _3965 : (isnan(_3965) ? 1.0 : min(_3965, 1.0))) * (_1269 + 1.0))) + _1274) * _1155;
        _1291 = _1122;
        _1293 = _1121;
        _1294 = _1120;
        _1295 = _1132;
        _1296 = _1131;
        _1297 = _1130;
        _1298 = _1142;
        _1299 = _1141;
        _1300 = _1140;
        _1301 = _1155;
        _1302 = _1154;
        _1303 = _1153;
        _1304 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1199 : (isnan(_1199) ? 0.0 : max(_1199, 0.0)));
        _1305 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1241 : (isnan(_1241) ? 0.0 : max(_1241, 0.0)));
        _1306 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1283 : (isnan(_1283) ? 0.0 : max(_1283, 0.0)));
    }
    else
    {
        _1291 = _1292;
        _1293 = _1292;
        _1294 = _1292;
        _1295 = _1292;
        _1296 = _1292;
        _1297 = _1292;
        _1298 = _1292;
        _1299 = _1292;
        _1300 = _1292;
        _1301 = _1292;
        _1302 = _1292;
        _1303 = _1292;
        _1304 = 0.0;
        _1305 = 0.0;
        _1306 = 0.0;
    }
    float _1603;
    float _1604;
    float _1605;
    float _1606;
    float _1607;
    float _1608;
    float _1609;
    float _1610;
    float _1611;
    float _1612;
    float _1613;
    float _1614;
    float _1615;
    float _1616;
    float _1617;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1334 = fma(_961, cbModelParam._m0[30u].z, fma(_957, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _953));
        float _1338 = fma(_961, cbModelParam._m0[31u].z, fma(_957, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _953));
        float _1342 = fma(_961, cbModelParam._m0[32u].z, fma(_957, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _953));
        float _1365 = _953 + _729;
        float _1366 = _957 + _730;
        float _1367 = _961 + _731;
        float _1377 = fma(_1367, cbModelParam._m0[30u].z, fma(_1366, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1365)) - _1334;
        float _1378 = fma(_1367, cbModelParam._m0[31u].z, fma(_1366, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1365)) - _1338;
        float _1379 = fma(_1367, cbModelParam._m0[32u].z, fma(_1366, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1365)) - _1342;
        float _1383 = inversesqrt(dot(vec3(_1377, _1378, _1379), vec3(_1377, _1378, _1379)));
        float _1396 = ((_1383 * _1377) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1334 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1397 = ((_1383 * _1378) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1338 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1398 = ((_1383 * _1379) / cbModelParam._m0[35u].z) + ((((((_1342 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1400 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1396, _1397, _1398), 0.0);
        vec4 _1407 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1396, _1397, _1398), 0.0);
        vec4 _1414 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1396, _1397, _1398), 0.0);
        vec4 _1421 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1396, _1397, _1398), 0.0);
        float _1433 = exp2((_1400.w + (-0.5)) * 20.0) * 2.0;
        float _1434 = _1433 * (_1400.x + (-0.5));
        float _1435 = _1433 * (_1400.y + (-0.5));
        float _1436 = _1433 * (_1400.z + (-0.5));
        float _1443 = exp2((_1407.w + (-0.5)) * 20.0) * 2.0;
        float _1444 = _1443 * (_1407.x + (-0.5));
        float _1445 = _1443 * (_1407.y + (-0.5));
        float _1446 = _1443 * (_1407.z + (-0.5));
        float _1453 = exp2((_1414.w + (-0.5)) * 20.0) * 2.0;
        float _1454 = _1453 * (_1414.x + (-0.5));
        float _1455 = _1453 * (_1414.y + (-0.5));
        float _1456 = _1453 * (_1414.z + (-0.5));
        float _1463 = exp2((_1421.w + (-0.5)) * 20.0) * 2.0;
        float _1464 = _1463 * (_1421.x + (-0.5));
        float _1465 = _1463 * (_1421.y + (-0.5));
        float _1466 = _1463 * (_1421.z + (-0.5));
        float _1467 = isnan(0.0) ? _1464 : (isnan(_1464) ? 0.0 : max(_1464, 0.0));
        float _1468 = isnan(0.0) ? _1465 : (isnan(_1465) ? 0.0 : max(_1465, 0.0));
        float _1469 = isnan(0.0) ? _1466 : (isnan(_1466) ? 0.0 : max(_1466, 0.0));
        float _1470 = _1434 * 0.5;
        float _1471 = _1444 * 0.5;
        float _1472 = _1454 * 0.5;
        float _1473 = dot(vec3(_1470, _1471, _1472), vec3(_1470, _1471, _1472));
        float _1478 = (_1473 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1473);
        float _1486 = (dot(vec3(_729, _730, _731), vec3(_1478 * _1470, _1478 * _1471, _1478 * _1472)) + 1.0) * 0.5;
        float _4028 = isnan(0.0) ? _1486 : (isnan(_1486) ? 0.0 : max(_1486, 0.0));
        float _1495 = sqrt(((_1471 * _1471) + (_1470 * _1470)) + (_1472 * _1472)) / (_1467 + 9.9999997473787516355514526367188e-06);
        float _4039 = isnan(0.0) ? _1495 : (isnan(_1495) ? 0.0 : max(_1495, 0.0));
        float _1496 = isnan(1.0) ? _4039 : (isnan(_4039) ? 1.0 : min(_4039, 1.0));
        float _1497 = _1496 * 2.0;
        float _1501 = (1.0 - _1496) / (_1496 + 1.0);
        float _4050 = isnan(0.0) ? _1501 : (isnan(_1501) ? 0.0 : max(_1501, 0.0));
        float _1502 = isnan(1.0) ? _4050 : (isnan(_4050) ? 1.0 : min(_4050, 1.0));
        float _1511 = ((((1.0 - _1502) * (_1497 + 2.0)) * exp2(log2(isnan(1.0) ? _4028 : (isnan(_4028) ? 1.0 : min(_4028, 1.0))) * (_1497 + 1.0))) + _1502) * _1467;
        float _1512 = _1435 * 0.5;
        float _1513 = _1445 * 0.5;
        float _1514 = _1455 * 0.5;
        float _1515 = dot(vec3(_1512, _1513, _1514), vec3(_1512, _1513, _1514));
        float _1520 = (_1515 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1515);
        float _1528 = (dot(vec3(_729, _730, _731), vec3(_1520 * _1512, _1520 * _1513, _1520 * _1514)) + 1.0) * 0.5;
        float _4061 = isnan(0.0) ? _1528 : (isnan(_1528) ? 0.0 : max(_1528, 0.0));
        float _1537 = sqrt(((_1513 * _1513) + (_1512 * _1512)) + (_1514 * _1514)) / (_1468 + 9.9999997473787516355514526367188e-06);
        float _4072 = isnan(0.0) ? _1537 : (isnan(_1537) ? 0.0 : max(_1537, 0.0));
        float _1538 = isnan(1.0) ? _4072 : (isnan(_4072) ? 1.0 : min(_4072, 1.0));
        float _1539 = _1538 * 2.0;
        float _1543 = (1.0 - _1538) / (_1538 + 1.0);
        float _4083 = isnan(0.0) ? _1543 : (isnan(_1543) ? 0.0 : max(_1543, 0.0));
        float _1544 = isnan(1.0) ? _4083 : (isnan(_4083) ? 1.0 : min(_4083, 1.0));
        float _1553 = ((((1.0 - _1544) * (_1539 + 2.0)) * exp2(log2(isnan(1.0) ? _4061 : (isnan(_4061) ? 1.0 : min(_4061, 1.0))) * (_1539 + 1.0))) + _1544) * _1468;
        float _1554 = _1436 * 0.5;
        float _1555 = _1446 * 0.5;
        float _1556 = _1456 * 0.5;
        float _1557 = dot(vec3(_1554, _1555, _1556), vec3(_1554, _1555, _1556));
        float _1562 = (_1557 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1557);
        float _1570 = (dot(vec3(_729, _730, _731), vec3(_1562 * _1554, _1562 * _1555, _1562 * _1556)) + 1.0) * 0.5;
        float _4094 = isnan(0.0) ? _1570 : (isnan(_1570) ? 0.0 : max(_1570, 0.0));
        float _1579 = sqrt(((_1555 * _1555) + (_1554 * _1554)) + (_1556 * _1556)) / (_1469 + 9.9999997473787516355514526367188e-06);
        float _4105 = isnan(0.0) ? _1579 : (isnan(_1579) ? 0.0 : max(_1579, 0.0));
        float _1580 = isnan(1.0) ? _4105 : (isnan(_4105) ? 1.0 : min(_4105, 1.0));
        float _1581 = _1580 * 2.0;
        float _1585 = (1.0 - _1580) / (_1580 + 1.0);
        float _4116 = isnan(0.0) ? _1585 : (isnan(_1585) ? 0.0 : max(_1585, 0.0));
        float _1586 = isnan(1.0) ? _4116 : (isnan(_4116) ? 1.0 : min(_4116, 1.0));
        float _1595 = ((((1.0 - _1586) * (_1581 + 2.0)) * exp2(log2(isnan(1.0) ? _4094 : (isnan(_4094) ? 1.0 : min(_4094, 1.0))) * (_1581 + 1.0))) + _1586) * _1469;
        _1603 = _1436;
        _1604 = _1435;
        _1605 = _1434;
        _1606 = _1446;
        _1607 = _1445;
        _1608 = _1444;
        _1609 = _1456;
        _1610 = _1455;
        _1611 = _1454;
        _1612 = _1469;
        _1613 = _1468;
        _1614 = _1467;
        _1615 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1511 : (isnan(_1511) ? 0.0 : max(_1511, 0.0)));
        _1616 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1553 : (isnan(_1553) ? 0.0 : max(_1553, 0.0)));
        _1617 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1595 : (isnan(_1595) ? 0.0 : max(_1595, 0.0)));
    }
    else
    {
        _1603 = _1292;
        _1604 = _1292;
        _1605 = _1292;
        _1606 = _1292;
        _1607 = _1292;
        _1608 = _1292;
        _1609 = _1292;
        _1610 = _1292;
        _1611 = _1292;
        _1612 = _1292;
        _1613 = _1292;
        _1614 = _1292;
        _1615 = 0.0;
        _1616 = 0.0;
        _1617 = 0.0;
    }
    float _1627 = (cbModelParam._m0[1u].x * (_1615 - _1304)) + _1304;
    float _1628 = (cbModelParam._m0[1u].x * (_1616 - _1305)) + _1305;
    float _1629 = (cbModelParam._m0[1u].x * (_1617 - _1306)) + _1306;
    float _1650 = fma(_1629, cbSceneParam._m0[89u].z, fma(_1628, cbSceneParam._m0[89u].y, _1627 * cbSceneParam._m0[89u].x));
    float _1653 = fma(_1629, cbSceneParam._m0[90u].z, fma(_1628, cbSceneParam._m0[90u].y, _1627 * cbSceneParam._m0[90u].x));
    float _1656 = fma(_1629, cbSceneParam._m0[91u].z, fma(_1628, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1627));
    float _1671 = _900 * 0.5;
    float _1672 = _901 * 0.5;
    float _1673 = _902 * 0.5;
    float _1674 = dot(vec4(_1671, _1672, _1673, 1.0), vec4(_1605, _1608, _1611, _1614));
    float _1677 = dot(vec4(_1671, _1672, _1673, 1.0), vec4(_1604, _1607, _1610, _1613));
    float _1680 = dot(vec4(_1671, _1672, _1673, 1.0), vec4(_1603, _1606, _1609, _1612));
    float _1714;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1687 = dot(vec4(_1671, _1672, _1673, 1.0), vec4(_1291, _1295, _1298, _1301));
        float _1691 = dot(vec4(_1671, _1672, _1673, 1.0), vec4(_1293, _1296, _1299, _1302));
        float _1695 = dot(vec4(_1671, _1672, _1673, 1.0), vec4(_1294, _1297, _1300, _1303));
        float _1702 = dot(vec4(cbModelParam._m0[39u]), vec4(_1671, _1672, _1673, 1.0));
        _1714 = dot(vec3(isnan(0.0) ? _1695 : (isnan(_1695) ? 0.0 : max(_1695, 0.0)), isnan(0.0) ? _1691 : (isnan(_1691) ? 0.0 : max(_1691, 0.0)), isnan(0.0) ? _1687 : (isnan(_1687) ? 0.0 : max(_1687, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1702) ? 0.0 : (isnan(0.0) ? _1702 : max(0.0, _1702))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1714 = 1.0;
    }
    float _1725;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1716 = dot(vec4(cbModelParam._m0[40u]), vec4(_1671, _1672, _1673, 1.0));
        _1725 = dot(vec3(isnan(0.0) ? _1674 : (isnan(_1674) ? 0.0 : max(_1674, 0.0)), isnan(0.0) ? _1677 : (isnan(_1677) ? 0.0 : max(_1677, 0.0)), isnan(0.0) ? _1680 : (isnan(_1680) ? 0.0 : max(_1680, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1716) ? 0.0 : (isnan(0.0) ? _1716 : max(0.0, _1716))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1725 = 1.0;
    }
    float _1729 = (_1725 * cbModelParam._m0[1u].x) + (_1714 * (1.0 - cbModelParam._m0[1u].x));
    float _1739 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _732);
    float _1740 = isnan(_1739) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1739 : min(cbModelParam._m0[25u].z, _1739));
    float _1820;
    float _1822;
    float _1824;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1787 = fma(_961, cbModelParam._m0[13u].z, fma(_957, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _953)) + cbModelParam._m0[13u].w;
        float _1791 = fma(_961, cbModelParam._m0[14u].z, fma(_957, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _953)) + cbModelParam._m0[14u].w;
        float _1795 = fma(_961, cbModelParam._m0[15u].z, fma(_957, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _953)) + cbModelParam._m0[15u].w;
        float _1798 = fma(_902, cbModelParam._m0[13u].z, fma(_901, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _900));
        float _1801 = fma(_902, cbModelParam._m0[14u].z, fma(_901, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _900));
        float _1804 = fma(_902, cbModelParam._m0[15u].z, fma(_901, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _900));
        float _1832;
        if (_1798 > 0.0)
        {
            _1832 = abs((1.0 - _1787) / _1798);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1798 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1787 + 1.0) / _1798);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1832 = frontier_phi_17_15_ladder;
        }
        float _2053;
        if (_1801 > 0.0)
        {
            _2053 = abs((1.0 - _1791) / _1801);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1801 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1791 + 1.0) / _1801);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2053 = frontier_phi_26_22_ladder;
        }
        float _2299;
        if (_1804 > 0.0)
        {
            _2299 = abs((1.0 - _1795) / _1804);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1804 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1795 + 1.0) / _1804);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2299 = frontier_phi_38_33_ladder;
        }
        float _2301 = isnan(_2053) ? _1832 : (isnan(_1832) ? _2053 : min(_1832, _2053));
        float _2302 = isnan(_2299) ? _2301 : (isnan(_2301) ? _2299 : min(_2301, _2299));
        float _2306 = (_2302 * _1798) + _1787;
        float _2307 = (_2302 * _1801) + _1791;
        float _2308 = (_2302 * _1804) + _1795;
        float _2309 = _2302 * 9.9999997473787516355514526367188e-05;
        float _2311 = (-1.0) - _2309;
        float _2313 = _2309 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2308 > _2313) || ((_2308 < _2311) || ((_2307 > _2313) || ((_2307 < _2311) || ((_2306 < _2311) || (_2306 > _2313))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2432 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2308, cbModelParam._m0[9u].z, fma(_2307, cbModelParam._m0[9u].y, _2306 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2308, cbModelParam._m0[10u].z, fma(_2307, cbModelParam._m0[10u].y, _2306 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2308, cbModelParam._m0[11u].z, fma(_2307, cbModelParam._m0[11u].y, _2306 * cbModelParam._m0[11u].x))), _1740);
            frontier_phi_16_38_ladder = _2432.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2432.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2432.x * cbModelParam._m0[1u].y;
        }
        _1820 = frontier_phi_16_38_ladder_2;
        _1822 = frontier_phi_16_38_ladder_1;
        _1824 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1808 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_900, _901, _902), _1740);
        _1820 = _1808.x * cbModelParam._m0[1u].y;
        _1822 = _1808.y * cbModelParam._m0[1u].y;
        _1824 = _1808.z * cbModelParam._m0[1u].y;
    }
    float _1828 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _732);
    float _1829 = isnan(_1828) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1828 : min(cbModelParam._m0[25u].w, _1828));
    float _1918;
    float _1920;
    float _1922;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1882 = fma(_961, cbModelParam._m0[21u].z, fma(_957, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _953)) + cbModelParam._m0[21u].w;
        float _1886 = fma(_961, cbModelParam._m0[22u].z, fma(_957, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _953)) + cbModelParam._m0[22u].w;
        float _1890 = fma(_961, cbModelParam._m0[23u].z, fma(_957, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _953)) + cbModelParam._m0[23u].w;
        float _1893 = fma(_902, cbModelParam._m0[21u].z, fma(_901, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _900));
        float _1896 = fma(_902, cbModelParam._m0[22u].z, fma(_901, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _900));
        float _1899 = fma(_902, cbModelParam._m0[23u].z, fma(_901, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _900));
        float _2058;
        if (_1893 > 0.0)
        {
            _2058 = abs((1.0 - _1882) / _1893);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1893 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1882 + 1.0) / _1893);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2058 = frontier_phi_28_24_ladder;
        }
        float _2326;
        if (_1896 > 0.0)
        {
            _2326 = abs((1.0 - _1886) / _1896);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1896 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1886 + 1.0) / _1896);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2326 = frontier_phi_40_35_ladder;
        }
        float _2531;
        if (_1899 > 0.0)
        {
            _2531 = abs((1.0 - _1890) / _1899);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1899 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1890 + 1.0) / _1899);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2531 = frontier_phi_49_46_ladder;
        }
        float _2533 = isnan(_2326) ? _2058 : (isnan(_2058) ? _2326 : min(_2058, _2326));
        float _2534 = isnan(_2531) ? _2533 : (isnan(_2533) ? _2531 : min(_2533, _2531));
        float _2538 = (_2534 * _1893) + _1882;
        float _2539 = (_2534 * _1896) + _1886;
        float _2540 = (_2534 * _1899) + _1890;
        float _2541 = _2534 * 9.9999997473787516355514526367188e-05;
        float _2542 = (-1.0) - _2541;
        float _2544 = _2541 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2540 > _2544) || ((_2540 < _2542) || ((_2539 > _2544) || ((_2539 < _2542) || ((_2538 < _2542) || (_2538 > _2544))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2739 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2540, cbModelParam._m0[17u].z, fma(_2539, cbModelParam._m0[17u].y, _2538 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2540, cbModelParam._m0[18u].z, fma(_2539, cbModelParam._m0[18u].y, _2538 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2540, cbModelParam._m0[19u].z, fma(_2539, cbModelParam._m0[19u].y, _2538 * cbModelParam._m0[19u].x))), _1829);
            frontier_phi_25_49_ladder = _2739.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2739.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2739.x * cbModelParam._m0[1u].z;
        }
        _1918 = frontier_phi_25_49_ladder_2;
        _1920 = frontier_phi_25_49_ladder_1;
        _1922 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1902 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_900, _901, _902), _1829);
        _1918 = _1902.x * cbModelParam._m0[1u].z;
        _1920 = _1902.y * cbModelParam._m0[1u].z;
        _1922 = _1902.z * cbModelParam._m0[1u].z;
    }
    float _1934 = ((((1.0 - _921) * ((_908 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_921 * _908)) * _892;
    float _1935 = _1934 * ((cbModelParam._m0[1u].w * (_1918 - _1820)) + _1820);
    float _1936 = _1934 * ((cbModelParam._m0[1u].w * (_1920 - _1822)) + _1822);
    float _1937 = _1934 * ((cbModelParam._m0[1u].w * (_1922 - _1824)) + _1824);
    float _1940 = fma(_1937, cbSceneParam._m0[89u].z, fma(_1936, cbSceneParam._m0[89u].y, _1935 * cbSceneParam._m0[89u].x));
    float _1943 = fma(_1937, cbSceneParam._m0[90u].z, fma(_1936, cbSceneParam._m0[90u].y, _1935 * cbSceneParam._m0[90u].x));
    float _1946 = fma(_1937, cbSceneParam._m0[91u].z, fma(_1936, cbSceneParam._m0[91u].y, _1935 * cbSceneParam._m0[91u].x));
    vec4 _1954 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_829, _830));
    float _1956 = _1954.w;
    float _1968 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1956);
    float _1969 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1956);
    float _1970 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1956);
    uvec4 _1974 = floatBitsToUint(cbInstanceData._m0[_268 + 5u]);
    uint _1976 = _1974.x * 14u;
    uint _1977 = _1976 + 13u;
    float _1984 = _892 + (-1.0);
    float _1989 = (cbLight._m0[_1977].x * _1984) + 1.0;
    float _1990 = (cbLight._m0[_1977].y * _1984) + 1.0;
    float _1991 = (cbLight._m0[_1977].z * _1984) + 1.0;
    float _1992 = (cbLight._m0[_1977].w * _1984) + 1.0;
    uint _1993 = _1976 + 5u;
    float _1999 = isnan(1.0) ? _1990 : (isnan(_1990) ? 1.0 : min(_1990, 1.0));
    uint _2003 = _1976 + 4u;
    float _2012 = isnan(1.0) ? _1989 : (isnan(_1989) ? 1.0 : min(_1989, 1.0));
    uint _2016 = _1976 | 1u;
    float _2027 = dot(vec3(cbLight._m0[_1976].xyz), vec3(_729, _730, _731));
    float _2030 = dot(vec3(cbLight._m0[_2016].xyz), vec3(_729, _730, _731));
    float _4252 = isnan(0.0) ? _2027 : (isnan(_2027) ? 0.0 : max(_2027, 0.0));
    float _4263 = isnan(0.0) ? _2030 : (isnan(_2030) ? 0.0 : max(_2030, 0.0));
    float _2035 = (isnan(1.0) ? _4252 : (isnan(_4252) ? 1.0 : min(_4252, 1.0))) * 0.3183098733425140380859375;
    float _2037 = (isnan(1.0) ? _4263 : (isnan(_4263) ? 1.0 : min(_4263, 1.0))) * 0.3183098733425140380859375;
    float _2044 = ((cbLight._m0[_1993].x * _1999) * _2037) + (((cbLight._m0[_2003].x * _1968) * _2012) * _2035);
    float _2045 = ((_1999 * cbLight._m0[_1993].y) * _2037) + (((cbLight._m0[_2003].y * _1969) * _2012) * _2035);
    float _2046 = ((_1999 * cbLight._m0[_1993].z) * _2037) + (((cbLight._m0[_2003].z * _1970) * _2012) * _2035);
    uvec4 _2050 = floatBitsToUint(cbLight._m0[_1976 + 12u]);
    bool _2052 = _2050.x == 0u;
    float _2063;
    float _2065;
    float _2067;
    if (_2052)
    {
        _2063 = _2044;
        _2065 = _2045;
        _2067 = _2046;
    }
    else
    {
        uint _2071 = _1976 + 6u;
        float _2087 = (dot(vec3(cbLight._m0[_1976 + 2u].xyz), vec3(_729, _730, _731)) * 0.5) + 0.5;
        float _2088 = _2087 * _2087;
        float _4274 = isnan(0.0) ? _2088 : (isnan(_2088) ? 0.0 : max(_2088, 0.0));
        float _2089 = isnan(1.0) ? _4274 : (isnan(_4274) ? 1.0 : min(_4274, 1.0));
        float _2090 = isnan(1.0) ? _1991 : (isnan(_1991) ? 1.0 : min(_1991, 1.0));
        _2063 = (((cbLight._m0[_2071].x * 0.3183098733425140380859375) * _2089) * _2090) + _2044;
        _2065 = (((cbLight._m0[_2071].y * 0.3183098733425140380859375) * _2089) * _2090) + _2045;
        _2067 = (((cbLight._m0[_2071].z * 0.3183098733425140380859375) * _2089) * _2090) + _2046;
    }
    bool _2070 = _2050.y == 0u;
    float _2108;
    float _2110;
    float _2112;
    if (_2070)
    {
        _2108 = _2063;
        _2110 = _2065;
        _2112 = _2067;
    }
    else
    {
        uint _2270 = _1976 + 7u;
        float _2286 = (dot(vec3(cbLight._m0[_1976 + 3u].xyz), vec3(_729, _730, _731)) * 0.5) + 0.5;
        float _2287 = _2286 * _2286;
        float _4290 = isnan(0.0) ? _2287 : (isnan(_2287) ? 0.0 : max(_2287, 0.0));
        float _2288 = isnan(1.0) ? _4290 : (isnan(_4290) ? 1.0 : min(_4290, 1.0));
        float _2289 = isnan(1.0) ? _1992 : (isnan(_1992) ? 1.0 : min(_1992, 1.0));
        _2108 = (((cbLight._m0[_2270].x * 0.3183098733425140380859375) * _2288) * _2289) + _2063;
        _2110 = (((cbLight._m0[_2270].y * 0.3183098733425140380859375) * _2288) * _2289) + _2065;
        _2112 = (((cbLight._m0[_2270].z * 0.3183098733425140380859375) * _2288) * _2289) + _2067;
    }
    uint _2115 = _1976 + 8u;
    float _2128 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1976].w)) * _732) * 0.949999988079071044921875);
    float _2129 = _2128 * _2128;
    float _2130 = cbLight._m0[_1976].x + _809;
    float _2131 = cbLight._m0[_1976].y + _810;
    float _2132 = cbLight._m0[_1976].z + _811;
    float _2136 = inversesqrt(dot(vec3(_2130, _2131, _2132), vec3(_2130, _2131, _2132)));
    float _2137 = _2136 * _2130;
    float _2138 = _2136 * _2131;
    float _2139 = _2136 * _2132;
    float _2140 = dot(vec3(_729, _730, _731), vec3(cbLight._m0[_1976].xyz));
    float _4306 = isnan(0.0) ? _2140 : (isnan(_2140) ? 0.0 : max(_2140, 0.0));
    float _2143 = isnan(1.0) ? _4306 : (isnan(_4306) ? 1.0 : min(_4306, 1.0));
    float _4317 = isnan(0.0) ? _893 : (isnan(_893) ? 0.0 : max(_893, 0.0));
    float _2144 = isnan(1.0) ? _4317 : (isnan(_4317) ? 1.0 : min(_4317, 1.0));
    float _2145 = dot(vec3(_729, _730, _731), vec3(_2137, _2138, _2139));
    float _4328 = isnan(0.0) ? _2145 : (isnan(_2145) ? 0.0 : max(_2145, 0.0));
    float _2148 = isnan(1.0) ? _4328 : (isnan(_4328) ? 1.0 : min(_4328, 1.0));
    float _2149 = dot(vec3(cbLight._m0[_1976].xyz), vec3(_2137, _2138, _2139));
    float _4339 = isnan(0.0) ? _2149 : (isnan(_2149) ? 0.0 : max(_2149, 0.0));
    float _2153 = _2129 * _2129;
    float _2157 = ((_2148 * _2148) * (_2153 + (-1.0))) + 1.0;
    float _2168 = (exp2(log2(1.0 - (isnan(1.0) ? _4339 : (isnan(_4339) ? 1.0 : min(_4339, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2169 = 1.0 - _2129;
    float _2180 = (0.5 / (((_2144 * ((_2143 * _2169) + _2129)) + 9.9999999392252902907785028219223e-09) + (((_2144 * _2169) + _2129) * _2143))) * _2143;
    float _4350 = isnan(0.0) ? _2180 : (isnan(_2180) ? 0.0 : max(_2180, 0.0));
    float _2182 = (isnan(1.0) ? _4350 : (isnan(_4350) ? 1.0 : min(_4350, 1.0))) * (_2153 / ((_2157 * _2157) * 3.141590118408203125));
    uint _2196 = _1976 + 9u;
    float _2207 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2016].w)) * _732) * 0.949999988079071044921875);
    float _2208 = _2207 * _2207;
    float _2209 = cbLight._m0[_2016].x + _809;
    float _2210 = cbLight._m0[_2016].y + _810;
    float _2211 = cbLight._m0[_2016].z + _811;
    float _2215 = inversesqrt(dot(vec3(_2209, _2210, _2211), vec3(_2209, _2210, _2211)));
    float _2216 = _2215 * _2209;
    float _2217 = _2215 * _2210;
    float _2218 = _2215 * _2211;
    float _2219 = dot(vec3(_729, _730, _731), vec3(cbLight._m0[_2016].xyz));
    float _4361 = isnan(0.0) ? _2219 : (isnan(_2219) ? 0.0 : max(_2219, 0.0));
    float _2222 = isnan(1.0) ? _4361 : (isnan(_4361) ? 1.0 : min(_4361, 1.0));
    float _2223 = dot(vec3(_729, _730, _731), vec3(_2216, _2217, _2218));
    float _4372 = isnan(0.0) ? _2223 : (isnan(_2223) ? 0.0 : max(_2223, 0.0));
    float _2226 = isnan(1.0) ? _4372 : (isnan(_4372) ? 1.0 : min(_4372, 1.0));
    float _2227 = dot(vec3(cbLight._m0[_2016].xyz), vec3(_2216, _2217, _2218));
    float _4383 = isnan(0.0) ? _2227 : (isnan(_2227) ? 0.0 : max(_2227, 0.0));
    float _2231 = _2208 * _2208;
    float _2235 = ((_2226 * _2226) * (_2231 + (-1.0))) + 1.0;
    float _2244 = (exp2(log2(1.0 - (isnan(1.0) ? _4383 : (isnan(_4383) ? 1.0 : min(_4383, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2245 = 1.0 - _2208;
    float _2255 = (0.5 / (((_2144 * ((_2222 * _2245) + _2208)) + 9.9999999392252902907785028219223e-09) + (((_2144 * _2245) + _2208) * _2222))) * _2222;
    float _4394 = isnan(0.0) ? _2255 : (isnan(_2255) ? 0.0 : max(_2255, 0.0));
    float _2257 = (isnan(1.0) ? _4394 : (isnan(_4394) ? 1.0 : min(_4394, 1.0))) * (_2231 / ((_2235 * _2235) * 3.141590118408203125));
    float _2267 = (((_2244 * cbLight._m0[_2196].x) * _2257) * _1999) + ((((cbLight._m0[_2115].x * _1968) * _2168) * _2182) * _2012);
    float _2268 = (((_2244 * cbLight._m0[_2196].y) * _2257) * _1999) + ((((cbLight._m0[_2115].y * _1969) * _2168) * _2182) * _2012);
    float _2269 = (((_2244 * cbLight._m0[_2196].z) * _2257) * _1999) + ((((cbLight._m0[_2115].z * _1970) * _2168) * _2182) * _2012);
    float _2331;
    float _2333;
    float _2335;
    if (_2052)
    {
        _2331 = _2267;
        _2333 = _2268;
        _2335 = _2269;
    }
    else
    {
        uint _2337 = _1976 + 2u;
        uint _2341 = _1976 + 10u;
        float _2355 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2337].w)) * _732) * 0.949999988079071044921875);
        float _2356 = _2355 * _2355;
        float _2357 = cbLight._m0[_2337].x + _809;
        float _2358 = cbLight._m0[_2337].y + _810;
        float _2359 = cbLight._m0[_2337].z + _811;
        float _2363 = inversesqrt(dot(vec3(_2357, _2358, _2359), vec3(_2357, _2358, _2359)));
        float _2364 = _2363 * _2357;
        float _2365 = _2363 * _2358;
        float _2366 = _2363 * _2359;
        float _2367 = dot(vec3(_729, _730, _731), vec3(cbLight._m0[_2337].xyz));
        float _4405 = isnan(0.0) ? _2367 : (isnan(_2367) ? 0.0 : max(_2367, 0.0));
        float _2370 = isnan(1.0) ? _4405 : (isnan(_4405) ? 1.0 : min(_4405, 1.0));
        float _2371 = dot(vec3(_729, _730, _731), vec3(_2364, _2365, _2366));
        float _4416 = isnan(0.0) ? _2371 : (isnan(_2371) ? 0.0 : max(_2371, 0.0));
        float _2374 = isnan(1.0) ? _4416 : (isnan(_4416) ? 1.0 : min(_4416, 1.0));
        float _2375 = dot(vec3(cbLight._m0[_2337].xyz), vec3(_2364, _2365, _2366));
        float _4427 = isnan(0.0) ? _2375 : (isnan(_2375) ? 0.0 : max(_2375, 0.0));
        float _2379 = _2356 * _2356;
        float _2383 = ((_2374 * _2374) * (_2379 + (-1.0))) + 1.0;
        float _2392 = (exp2(log2(1.0 - (isnan(1.0) ? _4427 : (isnan(_4427) ? 1.0 : min(_4427, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2393 = 1.0 - _2356;
        float _2403 = (0.5 / (((_2144 * ((_2370 * _2393) + _2356)) + 9.9999999392252902907785028219223e-09) + (((_2144 * _2393) + _2356) * _2370))) * _2370;
        float _4438 = isnan(0.0) ? _2403 : (isnan(_2403) ? 0.0 : max(_2403, 0.0));
        float _2405 = (isnan(1.0) ? _4438 : (isnan(_4438) ? 1.0 : min(_4438, 1.0))) * (_2379 / ((_2383 * _2383) * 3.141590118408203125));
        float _2406 = isnan(1.0) ? _1991 : (isnan(_1991) ? 1.0 : min(_1991, 1.0));
        _2331 = (((_2392 * cbLight._m0[_2341].x) * _2405) * _2406) + _2267;
        _2333 = (((_2392 * cbLight._m0[_2341].y) * _2405) * _2406) + _2268;
        _2335 = (((_2392 * cbLight._m0[_2341].z) * _2405) * _2406) + _2269;
    }
    float _2441;
    float _2443;
    float _2445;
    if (_2070)
    {
        _2441 = _2331;
        _2443 = _2333;
        _2445 = _2335;
    }
    else
    {
        uint _2452 = _1976 + 3u;
        uint _2456 = _1976 + 11u;
        float _2470 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2452].w)) * _732) * 0.949999988079071044921875);
        float _2471 = _2470 * _2470;
        float _2472 = cbLight._m0[_2452].x + _809;
        float _2473 = cbLight._m0[_2452].y + _810;
        float _2474 = cbLight._m0[_2452].z + _811;
        float _2478 = inversesqrt(dot(vec3(_2472, _2473, _2474), vec3(_2472, _2473, _2474)));
        float _2479 = _2478 * _2472;
        float _2480 = _2478 * _2473;
        float _2481 = _2478 * _2474;
        float _2482 = dot(vec3(_729, _730, _731), vec3(cbLight._m0[_2452].xyz));
        float _4454 = isnan(0.0) ? _2482 : (isnan(_2482) ? 0.0 : max(_2482, 0.0));
        float _2485 = isnan(1.0) ? _4454 : (isnan(_4454) ? 1.0 : min(_4454, 1.0));
        float _2486 = dot(vec3(_729, _730, _731), vec3(_2479, _2480, _2481));
        float _4465 = isnan(0.0) ? _2486 : (isnan(_2486) ? 0.0 : max(_2486, 0.0));
        float _2489 = isnan(1.0) ? _4465 : (isnan(_4465) ? 1.0 : min(_4465, 1.0));
        float _2490 = dot(vec3(cbLight._m0[_2452].xyz), vec3(_2479, _2480, _2481));
        float _4476 = isnan(0.0) ? _2490 : (isnan(_2490) ? 0.0 : max(_2490, 0.0));
        float _2494 = _2471 * _2471;
        float _2498 = ((_2489 * _2489) * (_2494 + (-1.0))) + 1.0;
        float _2507 = (exp2(log2(1.0 - (isnan(1.0) ? _4476 : (isnan(_4476) ? 1.0 : min(_4476, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2508 = 1.0 - _2471;
        float _2518 = (0.5 / (((_2144 * ((_2485 * _2508) + _2471)) + 9.9999999392252902907785028219223e-09) + (((_2144 * _2508) + _2471) * _2485))) * _2485;
        float _4487 = isnan(0.0) ? _2518 : (isnan(_2518) ? 0.0 : max(_2518, 0.0));
        float _2520 = (isnan(1.0) ? _4487 : (isnan(_4487) ? 1.0 : min(_4487, 1.0))) * (_2494 / ((_2498 * _2498) * 3.141590118408203125));
        float _2521 = isnan(1.0) ? _1992 : (isnan(_1992) ? 1.0 : min(_1992, 1.0));
        _2441 = (((_2507 * cbLight._m0[_2456].x) * _2520) * _2521) + _2331;
        _2443 = (((_2507 * cbLight._m0[_2456].y) * _2520) * _2521) + _2333;
        _2445 = (((_2507 * cbLight._m0[_2456].z) * _2520) * _2521) + _2335;
    }
    float _2656;
    float _2658;
    float _2660;
    float _2662;
    float _2664;
    float _2666;
    if (_1974.y == 0u)
    {
        float _2596 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2597 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2596;
        float _2598 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2596;
        float _2599 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2596;
        uvec4 _2611 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2612 = _2611.x;
        uint _2623 = uint((float(_2611.y) * floor(float(uint(cbSceneParam._m0[85u].y * _830) / _2612))) + floor(float(uint(cbSceneParam._m0[85u].x * _829) / _2612)));
        float _2633 = (log2(_2599 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2634 = isnan(0.0) ? _2633 : (isnan(_2633) ? 0.0 : max(_2633, 0.0));
        uint _2637 = uint(isnan(14.0) ? _2634 : (isnan(_2634) ? 14.0 : min(_2634, 14.0)));
        uvec4 _2642 = texelFetch(g_lightClusterGridBuffer, int(((_2637 << 2u) + (_2623 << 6u)) >> 2u));
        uint _2643 = _2642.x;
        uint _2644 = _2611.z;
        float _2744;
        float _2746;
        float _2748;
        float _2750;
        float _2752;
        float _2754;
        if (((((1u << ((_2644 >> 4u) & 15u)) + 4294967295u) & _2643) == 0u) || ((_2644 & 240u) == 0u))
        {
            _2744 = 0.0;
            _2746 = 0.0;
            _2748 = 0.0;
            _2750 = 0.0;
            _2752 = 0.0;
            _2754 = 0.0;
        }
        else
        {
            float _2745;
            float _2747;
            float _2749;
            float _2751;
            float _2753;
            float _2755;
            float _2897 = 0.0;
            float _2898 = 0.0;
            float _2899 = 0.0;
            float _2900 = 0.0;
            float _2901 = 0.0;
            float _2902 = 0.0;
            uint _2903 = 0u;
            uint _2912;
            bool _2913;
            for (;;)
            {
                _2912 = texelFetch(g_lightClassification, int((((_2637 << 5u) + (_2623 << 9u)) + (_2903 << 2u)) >> 2u)).x;
                _2913 = _2912 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2913)
                {
                    frontier_phi_66_pred = _2897;
                    frontier_phi_66_pred_1 = _2902;
                    frontier_phi_66_pred_2 = _2901;
                    frontier_phi_66_pred_3 = _2900;
                    frontier_phi_66_pred_4 = _2899;
                    frontier_phi_66_pred_5 = _2898;
                }
                else
                {
                    float _3042;
                    float _3043;
                    float _3044;
                    float _3045;
                    float _3046;
                    float _3047;
                    uint _3048;
                    _3042 = _2897;
                    _3043 = _2898;
                    _3044 = _2899;
                    _3045 = _2900;
                    _3046 = _2901;
                    _3047 = _2902;
                    _3048 = _2912;
                    float _2969;
                    float _2970;
                    float _2971;
                    float _2972;
                    float _2973;
                    float _2974;
                    for (;;)
                    {
                        uint _3052 = uint(findLSB(_3048)) + (_2903 << 5u);
                        uint _3049 = (_3048 + 4294967295u) & _3048;
                        uint _3054 = _3052 * 48u;
                        vec4 _3068 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3054)).x, texelFetch(g_PointLightRenderingBuffer, int(_3054 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3054 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3054 + 3u)).x));
                        uint _3074 = (_3052 * 48u) + 4u;
                        vec4 _3087 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3074)).x, texelFetch(g_PointLightRenderingBuffer, int(_3074 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3074 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3074 + 3u)).x));
                        uint _3093 = (_3052 * 48u) + 8u;
                        vec3 _3104 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3093)).x, texelFetch(g_PointLightRenderingBuffer, int(_3093 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3093 + 2u)).x));
                        float _3108 = _3068.x - _2597;
                        float _3109 = _3068.y - _2598;
                        float _3110 = _3068.z - _2599;
                        float _3111 = dot(vec3(_3108, _3109, _3110), vec3(_3108, _3109, _3110));
                        float _3114 = inversesqrt(_3111);
                        float _3115 = _3114 * _3108;
                        float _3116 = _3114 * _3109;
                        float _3117 = _3114 * _3110;
                        float _3118 = dot(vec3(_848, _851, _854), vec3(_3115, _3116, _3117));
                        float _3123 = 1.0 - (_3111 * _3068.w);
                        float _4513 = isnan(0.0) ? _3123 : (isnan(_3123) ? 0.0 : max(_3123, 0.0));
                        float _3124 = isnan(1.0) ? _4513 : (isnan(_4513) ? 1.0 : min(_4513, 1.0));
                        float _3125 = sqrt(_3111) * _3087.w;
                        float _3128 = 1.39999997615814208984375 / (_3125 + 1.39999997615814208984375);
                        float _3129 = _3128 * _3128;
                        float _3132 = ((1.0 - _3129) * _3118) + _3129;
                        float _3135 = _3125 * _3125;
                        float _3139 = ((isnan(0.0) ? _3132 : (isnan(_3132) ? 0.0 : max(_3132, 0.0))) * _3124) / ((_3135 * 0.699999988079071044921875) + 1.0);
                        float _3143 = (-0.0) - _2597;
                        float _3144 = (-0.0) - _2598;
                        float _3145 = (-0.0) - _2599;
                        float _3149 = inversesqrt(dot(vec3(_3143, _3144, _3145), vec3(_3143, _3144, _3145)));
                        float _3150 = _3149 * _3143;
                        float _3151 = _3149 * _3144;
                        float _3152 = _3149 * _3145;
                        float _3160 = exp2(log2(1.0 / ((_3135 * 3.5) + 5.0)) * 0.25);
                        float _3161 = 1.0 - _908;
                        float _3168 = sqrt(1.0 - ((1.0 - (_3161 * _3161)) * (1.0 - (_3160 * _3160))));
                        float _3169 = _3168 * _3168;
                        float _3170 = _3169 * _3169;
                        float _3171 = _3150 + _3115;
                        float _3172 = _3151 + _3116;
                        float _3173 = _3152 + _3117;
                        float _3177 = inversesqrt(dot(vec3(_3171, _3172, _3173), vec3(_3171, _3172, _3173)));
                        float _3181 = dot(vec3(_848, _851, _854), vec3(_3150, _3151, _3152));
                        float _4529 = isnan(0.0) ? _3181 : (isnan(_3181) ? 0.0 : max(_3181, 0.0));
                        float _3184 = isnan(1.0) ? _4529 : (isnan(_4529) ? 1.0 : min(_4529, 1.0));
                        float _3185 = dot(vec3(_848, _851, _854), vec3(_3177 * _3171, _3177 * _3172, _3177 * _3173));
                        float _4540 = isnan(0.0) ? _3185 : (isnan(_3185) ? 0.0 : max(_3185, 0.0));
                        float _3188 = isnan(1.0) ? _4540 : (isnan(_4540) ? 1.0 : min(_4540, 1.0));
                        float _3192 = ((_3188 * _3188) * (_3170 + (-1.0))) + 1.0;
                        float _3193 = _3128 * _3169;
                        float _3194 = _3193 * _3193;
                        float _3197 = ((1.0 - _3194) * _3118) + _3194;
                        float _4551 = isnan(0.0) ? _3197 : (isnan(_3197) ? 0.0 : max(_3197, 0.0));
                        float _3198 = isnan(1.0) ? _4551 : (isnan(_4551) ? 1.0 : min(_4551, 1.0));
                        float _3199 = 1.0 - _3169;
                        float _3209 = (0.5 / (((_3198 * ((_3184 * _3199) + _3169)) + 9.9999999392252902907785028219223e-09) + (((_3198 * _3199) + _3169) * _3184))) * _3198;
                        float _4562 = isnan(0.0) ? _3209 : (isnan(_3209) ? 0.0 : max(_3209, 0.0));
                        float _3220 = (((_3170 * 3.1415927410125732421875) * (isnan(1.0) ? _4562 : (isnan(_4562) ? 1.0 : min(_4562, 1.0)))) / ((_3192 * _3192) * ((_3135 * 2.1991131305694580078125) + 3.141590118408203125))) * _3124;
                        _2972 = (_3139 * _3087.x) + _3045;
                        _2973 = (_3139 * _3087.y) + _3046;
                        _2974 = (_3139 * _3087.z) + _3047;
                        _2969 = (_3220 * _3104.x) + _3042;
                        _2970 = (_3220 * _3104.y) + _3043;
                        _2971 = (_3220 * _3104.z) + _3044;
                        if (_3049 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3042 = _2969;
                            _3043 = _2970;
                            _3044 = _2971;
                            _3045 = _2972;
                            _3046 = _2973;
                            _3047 = _2974;
                            _3048 = _3049;
                        }
                    }
                    frontier_phi_66_pred = _2969;
                    frontier_phi_66_pred_1 = _2974;
                    frontier_phi_66_pred_2 = _2973;
                    frontier_phi_66_pred_3 = _2972;
                    frontier_phi_66_pred_4 = _2971;
                    frontier_phi_66_pred_5 = _2970;
                }
                _2745 = frontier_phi_66_pred;
                _2755 = frontier_phi_66_pred_1;
                _2753 = frontier_phi_66_pred_2;
                _2751 = frontier_phi_66_pred_3;
                _2749 = frontier_phi_66_pred_4;
                _2747 = frontier_phi_66_pred_5;
                uint _2904 = _2903 + 1u;
                if (_2904 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2897 = _2745;
                    _2898 = _2747;
                    _2899 = _2749;
                    _2900 = _2751;
                    _2901 = _2753;
                    _2902 = _2755;
                    _2903 = _2904;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2744 = _2745;
            _2746 = _2747;
            _2748 = _2749;
            _2750 = _2751;
            _2752 = _2753;
            _2754 = _2755;
        }
        uvec4 _2758 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2759 = _2758.z;
        uint _2761 = (_2759 >> 8u) & 15u;
        float _2865;
        float _2867;
        float _2869;
        float _2871;
        float _2873;
        float _2875;
        if (((4294967295u << _2761) & _2643) == 0u)
        {
            _2865 = _2744;
            _2867 = _2746;
            _2869 = _2748;
            _2871 = _2750;
            _2873 = _2752;
            _2875 = _2754;
        }
        else
        {
            float _2890 = inversesqrt(dot(vec3(_2597, _2598, _2599), vec3(_2597, _2598, _2599)));
            float _2891 = _2890 * _2597;
            float _2892 = _2890 * _2598;
            float _2893 = _2890 * _2599;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2761 < ((_2759 >> 12u) & 15u))
            {
                float _2866;
                float _2868;
                float _2870;
                float _2872;
                float _2874;
                float _2876;
                float _3025 = _2744;
                float _3026 = _2746;
                float _3027 = _2748;
                float _3028 = _2750;
                float _3029 = _2752;
                float _3030 = _2754;
                uint _3031 = _2761;
                uint _3040;
                bool _3041;
                for (;;)
                {
                    _3040 = texelFetch(g_lightClassification, int((((_2637 << 5u) + (_2623 << 9u)) + (_3031 << 2u)) >> 2u)).x;
                    _3041 = _3040 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_3041)
                    {
                        frontier_phi_77_pred = _3030;
                        frontier_phi_77_pred_1 = _3029;
                        frontier_phi_77_pred_2 = _3028;
                        frontier_phi_77_pred_3 = _3027;
                        frontier_phi_77_pred_4 = _3026;
                        frontier_phi_77_pred_5 = _3025;
                    }
                    else
                    {
                        float _3234;
                        float _3235;
                        float _3236;
                        float _3237;
                        float _3238;
                        float _3239;
                        float _3527;
                        float _3528;
                        float _3529;
                        float _3530;
                        float _3531;
                        float _3532;
                        float _3247 = _3025;
                        float _3248 = _3026;
                        float _3249 = _3027;
                        float _3250 = _3028;
                        float _3251 = _3029;
                        float _3252 = _3030;
                        uint _3253 = _3040;
                        uint _3254;
                        vec4 _3279;
                        float _3280;
                        vec4 _3295;
                        vec3 _3307;
                        vec4 _3322;
                        vec4 _3337;
                        float _3383;
                        bool _3384;
                        for (;;)
                        {
                            uint _3264 = ((_3031 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3253));
                            _3254 = (_3253 + 4294967295u) & _3253;
                            uint _3266 = _3264 * 40u;
                            _3279 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3266)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3266 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3266 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3266 + 3u)).x));
                            _3280 = _3279.w;
                            uint _3282 = (_3264 * 40u) + 4u;
                            _3295 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3282)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3282 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3282 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3282 + 3u)).x));
                            uint _3297 = (_3264 * 40u) + 8u;
                            _3307 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3297)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3297 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3297 + 2u)).x));
                            uint _3309 = (_3264 * 40u) + 16u;
                            _3322 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3309)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3309 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3309 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3309 + 3u)).x));
                            uint _3324 = (_3264 * 40u) + 20u;
                            _3337 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3324)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3324 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3324 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3324 + 3u)).x));
                            uint _3339 = (_3264 * 40u) + 24u;
                            vec4 _3352 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3339)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3339 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3339 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3339 + 3u)).x));
                            uint _3358 = (_3264 * 40u) + 28u;
                            vec4 _3371 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3358)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3358 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3358 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3358 + 3u)).x));
                            _3383 = fma(_2599, _3371.z, fma(_2598, _3371.y, _3371.x * _2597)) + _3371.w;
                            _3384 = !((fma(_2599, _3352.z, fma(_2598, _3352.y, _3352.x * _2597)) + _3352.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3384)
                            {
                                float _3411 = _3279.x - _2597;
                                float _3412 = _3279.y - _2598;
                                float _3413 = _3279.z - _2599;
                                float _3414 = dot(vec3(_3411, _3412, _3413), vec3(_3411, _3412, _3413));
                                float _3417 = inversesqrt(_3414);
                                float _3418 = _3417 * _3411;
                                float _3419 = _3417 * _3412;
                                float _3420 = _3417 * _3413;
                                float _3424 = 1.0 - (_3414 / (_3280 * _3280));
                                float _4573 = isnan(0.0) ? _3424 : (isnan(_3424) ? 0.0 : max(_3424, 0.0));
                                float _3425 = isnan(1.0) ? _4573 : (isnan(_4573) ? 1.0 : min(_4573, 1.0));
                                float _3429 = sqrt(_3414) * _3295.w;
                                float _3431 = 1.39999997615814208984375 / (_3429 + 1.39999997615814208984375);
                                float _3432 = _3431 * _3431;
                                float _3435 = ((1.0 - _3432) * dot(vec3(_3418, _3419, _3420), vec3(_848, _851, _854))) + _3432;
                                float _3438 = _3429 * _3429;
                                float _3442 = (fma(_2599, _3322.z, fma(_2598, _3322.y, _3322.x * _2597)) + _3322.w) / _3383;
                                float _3443 = (fma(_2599, _3337.z, fma(_2598, _3337.y, _3337.x * _2597)) + _3337.w) / _3383;
                                float _3447 = 1.0 - dot(vec2(_3442, _3443), vec2(_3442, _3443));
                                float _4589 = isnan(0.0) ? _3447 : (isnan(_3447) ? 0.0 : max(_3447, 0.0));
                                float _3448 = isnan(1.0) ? _4589 : (isnan(_4589) ? 1.0 : min(_4589, 1.0));
                                float _3449 = _3448 * (((isnan(0.0) ? _3435 : (isnan(_3435) ? 0.0 : max(_3435, 0.0))) * _3425) / ((_3438 * 0.699999988079071044921875) + 1.0));
                                float _3461 = exp2(log2(1.0 / ((_3438 * 3.5) + 5.0)) * 0.25);
                                float _3462 = 1.0 - _908;
                                float _3469 = sqrt(1.0 - ((1.0 - (_3462 * _3462)) * (1.0 - (_3461 * _3461))));
                                float _3470 = _3469 * _3469;
                                float _3471 = _3470 * _3470;
                                float _3472 = _3418 - _2891;
                                float _3473 = _3419 - _2892;
                                float _3474 = _3420 - _2893;
                                float _3478 = inversesqrt(dot(vec3(_3472, _3473, _3474), vec3(_3472, _3473, _3474)));
                                float _3482 = dot(vec3(_848, _851, _854), vec3((-0.0) - _2891, (-0.0) - _2892, (-0.0) - _2893));
                                float _4600 = isnan(0.0) ? _3482 : (isnan(_3482) ? 0.0 : max(_3482, 0.0));
                                float _3485 = isnan(1.0) ? _4600 : (isnan(_4600) ? 1.0 : min(_4600, 1.0));
                                float _3486 = dot(vec3(_848, _851, _854), vec3(_3478 * _3472, _3478 * _3473, _3478 * _3474));
                                float _4611 = isnan(0.0) ? _3486 : (isnan(_3486) ? 0.0 : max(_3486, 0.0));
                                float _3489 = isnan(1.0) ? _4611 : (isnan(_4611) ? 1.0 : min(_4611, 1.0));
                                float _3493 = ((_3489 * _3489) * (_3471 + (-1.0))) + 1.0;
                                float _3494 = _3431 * _3470;
                                float _3495 = _3494 * _3494;
                                float _3501 = ((1.0 - _3495) * dot(vec3(_848, _851, _854), vec3(_3418, _3419, _3420))) + _3495;
                                float _4622 = isnan(0.0) ? _3501 : (isnan(_3501) ? 0.0 : max(_3501, 0.0));
                                float _3502 = isnan(1.0) ? _4622 : (isnan(_4622) ? 1.0 : min(_4622, 1.0));
                                float _3503 = 1.0 - _3470;
                                float _3513 = (0.5 / (((_3502 * ((_3485 * _3503) + _3470)) + 9.9999999392252902907785028219223e-09) + (((_3502 * _3503) + _3470) * _3485))) * _3502;
                                float _4633 = isnan(0.0) ? _3513 : (isnan(_3513) ? 0.0 : max(_3513, 0.0));
                                float _3523 = (_3448 * _3425) * (((_3471 * 3.1415927410125732421875) * (isnan(1.0) ? _4633 : (isnan(_4633) ? 1.0 : min(_4633, 1.0)))) / ((_3493 * _3493) * ((_3438 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3449 * _3295.y;
                                frontier_phi_83_pred_1 = _3449 * _3295.x;
                                frontier_phi_83_pred_2 = _3523 * _3307.z;
                                frontier_phi_83_pred_3 = _3523 * _3307.y;
                                frontier_phi_83_pred_4 = _3523 * _3307.x;
                                frontier_phi_83_pred_5 = _3449 * _3295.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3531 = frontier_phi_83_pred;
                            _3530 = frontier_phi_83_pred_1;
                            _3529 = frontier_phi_83_pred_2;
                            _3528 = frontier_phi_83_pred_3;
                            _3527 = frontier_phi_83_pred_4;
                            _3532 = frontier_phi_83_pred_5;
                            _3237 = _3530 + _3250;
                            _3238 = _3531 + _3251;
                            _3239 = _3532 + _3252;
                            _3234 = _3527 + _3247;
                            _3235 = _3528 + _3248;
                            _3236 = _3529 + _3249;
                            if (_3254 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3247 = _3234;
                                _3248 = _3235;
                                _3249 = _3236;
                                _3250 = _3237;
                                _3251 = _3238;
                                _3252 = _3239;
                                _3253 = _3254;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3239;
                        frontier_phi_77_pred_1 = _3238;
                        frontier_phi_77_pred_2 = _3237;
                        frontier_phi_77_pred_3 = _3236;
                        frontier_phi_77_pred_4 = _3235;
                        frontier_phi_77_pred_5 = _3234;
                    }
                    _2876 = frontier_phi_77_pred;
                    _2874 = frontier_phi_77_pred_1;
                    _2872 = frontier_phi_77_pred_2;
                    _2870 = frontier_phi_77_pred_3;
                    _2868 = frontier_phi_77_pred_4;
                    _2866 = frontier_phi_77_pred_5;
                    uint _3032 = _3031 + 1u;
                    if (_3032 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3025 = _2866;
                        _3026 = _2868;
                        _3027 = _2870;
                        _3028 = _2872;
                        _3029 = _2874;
                        _3030 = _2876;
                        _3031 = _3032;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2870;
                frontier_phi_58_59_ladder_1 = _2876;
                frontier_phi_58_59_ladder_2 = _2874;
                frontier_phi_58_59_ladder_3 = _2872;
                frontier_phi_58_59_ladder_4 = _2868;
                frontier_phi_58_59_ladder_5 = _2866;
            }
            else
            {
                frontier_phi_58_59_ladder = _2748;
                frontier_phi_58_59_ladder_1 = _2754;
                frontier_phi_58_59_ladder_2 = _2752;
                frontier_phi_58_59_ladder_3 = _2750;
                frontier_phi_58_59_ladder_4 = _2746;
                frontier_phi_58_59_ladder_5 = _2744;
            }
            _2865 = frontier_phi_58_59_ladder_5;
            _2867 = frontier_phi_58_59_ladder_4;
            _2869 = frontier_phi_58_59_ladder;
            _2871 = frontier_phi_58_59_ladder_3;
            _2873 = frontier_phi_58_59_ladder_2;
            _2875 = frontier_phi_58_59_ladder_1;
        }
        float _2880 = isnan(1.0) ? _892 : (isnan(_892) ? 1.0 : min(_892, 1.0));
        _2656 = (_2880 * _2871) + _2108;
        _2658 = (_2880 * _2873) + _2110;
        _2660 = (_2880 * _2875) + _2112;
        _2662 = ((_2865 * 0.039999999105930328369140625) * _2880) + _2441;
        _2664 = ((_2867 * 0.039999999105930328369140625) * _2880) + _2443;
        _2666 = ((_2869 * 0.039999999105930328369140625) * _2880) + _2445;
    }
    else
    {
        _2656 = _2108;
        _2658 = _2110;
        _2660 = _2112;
        _2662 = _2441;
        _2664 = _2443;
        _2666 = _2445;
    }
    float _4649 = isnan(0.0) ? _877 : (isnan(_877) ? 0.0 : max(_877, 0.0));
    float _4660 = isnan(0.0) ? _878 : (isnan(_878) ? 0.0 : max(_878, 0.0));
    float _4671 = isnan(0.0) ? _879 : (isnan(_879) ? 0.0 : max(_879, 0.0));
    float _2683 = ((isnan(1.0) ? _4649 : (isnan(_4649) ? 1.0 : min(_4649, 1.0))) * (_2656 + ((isnan(0.0) ? _1650 : (isnan(_1650) ? 0.0 : max(_1650, 0.0))) * _892))) + ((_2662 + ((isnan(0.0) ? _1940 : (isnan(_1940) ? 0.0 : max(_1940, 0.0))) * _1729)) * cbPerFrame._m0[3u].x);
    float _2684 = ((isnan(1.0) ? _4660 : (isnan(_4660) ? 1.0 : min(_4660, 1.0))) * (_2658 + ((isnan(0.0) ? _1653 : (isnan(_1653) ? 0.0 : max(_1653, 0.0))) * _892))) + ((_2664 + ((isnan(0.0) ? _1943 : (isnan(_1943) ? 0.0 : max(_1943, 0.0))) * _1729)) * cbPerFrame._m0[3u].x);
    float _2685 = ((isnan(1.0) ? _4671 : (isnan(_4671) ? 1.0 : min(_4671, 1.0))) * (_2660 + ((isnan(0.0) ? _1656 : (isnan(_1656) ? 0.0 : max(_1656, 0.0))) * _892))) + ((_2666 + ((isnan(0.0) ? _1946 : (isnan(_1946) ? 0.0 : max(_1946, 0.0))) * _1729)) * cbPerFrame._m0[3u].x);
    uint _2686 = _268 + 6u;
    float _2694 = _829 / cbSceneParam._m0[86u].x;
    float _2695 = _830 / cbSceneParam._m0[86u].y;
    vec4 _2709 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2694, _2695, (log2((isnan(cbSceneParam._m0[77u].w) ? _750 : (isnan(_750) ? cbSceneParam._m0[77u].w : min(_750, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2711 = _2709.x;
    float _2712 = _2709.y;
    float _2713 = _2709.z;
    float _2714 = _2709.w;
    float _2807;
    float _2809;
    float _2811;
    float _2813;
    if (_750 > cbSceneParam._m0[78u].w)
    {
        float _2769 = isnan(_750) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _750 : min(cbSceneParam._m0[80u].w, _750));
        float _2770 = _2769 / _750;
        float _2781 = _2770 * _802;
        float _2782 = _803 * _2770;
        float _2783 = (-0.0) - _2782;
        float _2785 = _2770 * _804;
        float _2787 = (cbSceneParam._m0[77u].w * _2783) / _2769;
        float _2788 = _2787 + cbSceneParam._m0[79u].w;
        float _2789 = cbSceneParam._m0[79u].w - _2782;
        float _2795 = sqrt(((_2781 * _2781) + (_2782 * _2782)) + (_2785 * _2785));
        float _2798 = (1.0 - (cbSceneParam._m0[77u].w / _2769)) * _2795;
        float _2803 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2805 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2982;
        if (abs((_2783 - _2787) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2982 = ((((_2788 > 0.0) ? exp2(_2803 * _2788) : (2.0 - exp2(_2805 * _2788))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2798;
        }
        else
        {
            float _2926 = 1.0 / cbSceneParam._m0[80u].x;
            float _2927 = isnan(_2789) ? _2788 : (isnan(_2788) ? _2789 : max(_2788, _2789));
            float _2928 = isnan(_2789) ? _2788 : (isnan(_2788) ? _2789 : min(_2788, _2789));
            float _2937 = isnan(0.0) ? _2927 : (isnan(_2927) ? 0.0 : min(_2927, 0.0));
            float _2938 = isnan(0.0) ? _2928 : (isnan(_2928) ? 0.0 : min(_2928, 0.0));
            _2982 = ((abs(_2795 / _2783) * cbSceneParam._m0[80u].y) * ((((_2937 - _2938) * 2.0) - ((exp2(_2803 * (isnan(0.0) ? _2927 : (isnan(_2927) ? 0.0 : max(_2927, 0.0)))) - exp2(_2803 * (isnan(0.0) ? _2928 : (isnan(_2928) ? 0.0 : max(_2928, 0.0))))) * _2926)) - ((exp2(_2805 * _2937) - exp2(_2805 * _2938)) * _2926))) + (_2798 * cbSceneParam._m0[80u].z);
        }
        vec4 _2984 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2694, _2695, 1.0), 0.0);
        float _2993 = exp2((_2982 * (-1.44269502162933349609375)) * (1.0 - _2984.w));
        float _2994 = log2(_2993);
        float _3010 = log2(_2714);
        _2807 = (exp2(_3010 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2994 * cbSceneParam._m0[78u].x)) * _2984.x) / cbSceneParam._m0[78u].x)) + _2711;
        _2809 = (exp2(_3010 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2994 * cbSceneParam._m0[78u].y)) * _2984.y) / cbSceneParam._m0[78u].y)) + _2712;
        _2811 = (exp2(_3010 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2994 * cbSceneParam._m0[78u].z)) * _2984.z) / cbSceneParam._m0[78u].z)) + _2713;
        _2813 = _2993 * _2714;
    }
    else
    {
        _2807 = _2711;
        _2809 = _2712;
        _2811 = _2713;
        _2813 = _2714;
    }
    bool _3020;
    vec4 _2823;
    vec4 _2845;
    float _2847;
    float _2851;
    float _2852;
    float _2853;
    float _2854;
    bool _2864;
    for (;;)
    {
        _2823 = cbMatDynParam._m0[0u];
        float _2825 = roundEven(_2823.y);
        bool _2826 = _2825 == 3.0;
        float _2827 = log2(_2813);
        float _2834 = exp2(_2827 * cbSceneParam._m0[78u].x) * _2683;
        float _2835 = exp2(_2827 * cbSceneParam._m0[78u].y) * _2684;
        float _2836 = exp2(_2827 * cbSceneParam._m0[78u].z) * _2685;
        float _2843 = _818 + (-0.5);
        _2845 = cbMtdParam._m0[1u];
        _2847 = _2845.y * _2843;
        float _2850 = (_2825 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2851 = _2850 * (_2826 ? _2834 : (_2834 + (cbSceneParam._m0[72u].w * _2807)));
        _2852 = _2850 * (_2826 ? _2835 : (_2835 + (cbSceneParam._m0[72u].w * _2809)));
        _2853 = _2850 * (_2826 ? _2836 : (_2836 + (cbSceneParam._m0[72u].w * _2811)));
        _2854 = _2843 * 0.999000012874603271484375;
        _2864 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2864)
        {
            if ((cbInstanceData._m0[_268 + 7u].x + _2854) < 0.5)
            {
                _3020 = true;
                break;
            }
        }
        uint _2961 = _867 + uint(_2823.w);
        if ((cbInstanceData._m0[_2961].w < 1.0) && ((cbInstanceData._m0[_2961].w + _2854) < 0.5))
        {
            _3020 = true;
            break;
        }
        if ((_2847 + 1.0) < _2845.x)
        {
            _3020 = true;
            break;
        }
        _3020 = false;
        break;
    }
    float _3225;
    if (_3020)
    {
        discard_state = true;
        _3225 = 0.0;
    }
    else
    {
        _3225 = cbInstanceData._m0[_2686].w;
    }
    SV_Target.x = _2851;
    SV_Target.y = _2852;
    SV_Target.z = _2853;
    SV_Target.w = _3225;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2686].w;
    discard_exit();
}


