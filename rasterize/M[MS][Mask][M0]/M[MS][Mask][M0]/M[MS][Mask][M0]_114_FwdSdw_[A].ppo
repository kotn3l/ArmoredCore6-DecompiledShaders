#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_0;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 13) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_22;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_10;
layout(set = 0, binding = 20) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_6;
layout(set = 0, binding = 23) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_8;
layout(set = 0, binding = 24) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_9;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1494;
float _4134;
float _4135;
float _4136;
float _4137;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _235 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _236 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _237 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _243 = inversesqrt(dot(vec3(_235, _236, _237), vec3(_235, _236, _237)));
    float _250 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _257 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _271 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _273 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _274 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _4146 = isnan(0.0) ? _271 : (isnan(_271) ? 0.0 : max(_271, 0.0));
    float _4157 = isnan(0.0) ? _273 : (isnan(_273) ? 0.0 : max(_273, 0.0));
    float _4168 = isnan(0.0) ? _274 : (isnan(_274) ? 0.0 : max(_274, 0.0));
    uint _284 = uint(roundEven(NORMAL.w)) * 13u;
    uint _289 = _284 + 1u;
    uint _293 = _284 + 2u;
    float _302 = sqrt(((cbInstanceData._m0[_289].x * cbInstanceData._m0[_289].x) + (cbInstanceData._m0[_284].x * cbInstanceData._m0[_284].x)) + (cbInstanceData._m0[_293].x * cbInstanceData._m0[_293].x));
    float _303 = _302 * TEXCOORD.z;
    float _304 = _302 * TEXCOORD.w;
    vec4 _317 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _303) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _304) + cbTextureTilingScale._m0[13u].w));
    vec4 _340 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _366 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _371 = _366.x * cbMtdParam._m0[11u].x;
    float _372 = _366.y * cbMtdParam._m0[11u].y;
    float _373 = _366.z * cbMtdParam._m0[11u].z;
    vec4 _392 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _303) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _304) + cbTextureTilingScale._m0[5u].w));
    vec4 _411 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _449 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _451 = _449.x;
    float _463 = dot(vec4(_451, _449.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _480 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _411.x) * 2.0) - ((((_451 - _463) * cbMtdParam._m0[24u].z) + _463) * cbMtdParam._m0[23u].x))) + 1.0;
    float _4179 = isnan(0.0) ? _480 : (isnan(_480) ? 0.0 : max(_480, 0.0));
    float _481 = isnan(1.0) ? _4179 : (isnan(_4179) ? 1.0 : min(_4179, 1.0));
    float _488 = (_481 * ((_392.x * cbMtdParam._m0[12u].x) - _371)) + _371;
    float _489 = (_481 * ((_392.y * cbMtdParam._m0[12u].y) - _372)) + _372;
    float _490 = (_481 * ((_392.z * cbMtdParam._m0[12u].z) - _373)) + _373;
    vec4 _507 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _303) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _304) + cbTextureTilingScale._m0[3u].w));
    vec4 _527 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _529 = _527.x;
    float _539 = dot(vec4(_529, _527.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _553 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _411.y) * 2.0) - ((((_529 - _539) * cbMtdParam._m0[24u].z) + _539) * cbMtdParam._m0[20u].w))) + 1.0;
    float _4190 = isnan(0.0) ? _553 : (isnan(_553) ? 0.0 : max(_553, 0.0));
    float _554 = isnan(1.0) ? _4190 : (isnan(_4190) ? 1.0 : min(_4190, 1.0));
    float _561 = (_554 * ((_507.x * cbMtdParam._m0[13u].x) - _488)) + _488;
    float _562 = (_554 * ((_507.y * cbMtdParam._m0[13u].y) - _489)) + _489;
    float _563 = (_554 * ((_507.z * cbMtdParam._m0[13u].z) - _490)) + _490;
    vec4 _581 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_9, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[24u].x * _303) + cbTextureTilingScale._m0[24u].z, (cbTextureTilingScale._m0[24u].y * _304) + cbTextureTilingScale._m0[24u].w));
    vec4 _598 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[25u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _600 = _598.x;
    float _610 = dot(vec4(_600, _598.yzw), vec4(cbMtdParam._m0[30u].w, cbMtdParam._m0[31u].xy, 0.0));
    float _622 = ((cbMtdParam._m0[25u].x * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.z) - _411.z) * 2.0) - ((((_600 - _610) * cbMtdParam._m0[24u].z) + _610) * cbMtdParam._m0[20u].z))) + 1.0;
    float _4201 = isnan(0.0) ? _622 : (isnan(_622) ? 0.0 : max(_622, 0.0));
    float _623 = isnan(1.0) ? _4201 : (isnan(_4201) ? 1.0 : min(_4201, 1.0));
    float _633 = (_340.x * cbMtdParam._m0[9u].x) * ((_623 * ((_581.x * cbMtdParam._m0[14u].x) - _561)) + _561);
    float _634 = (_340.y * cbMtdParam._m0[9u].y) * ((_623 * ((_581.y * cbMtdParam._m0[14u].y) - _562)) + _562);
    float _635 = (_340.z * cbMtdParam._m0[9u].z) * ((_623 * ((_581.z * cbMtdParam._m0[14u].z) - _563)) + _563);
    float _639 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _317.x) * _633;
    float _642 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _317.y) * _634;
    float _645 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _317.z) * _635;
    float _653 = (((_633 - _639) * (isnan(1.0) ? _4146 : (isnan(_4146) ? 1.0 : min(_4146, 1.0)))) + _639) * 4.55000019073486328125;
    float _655 = (((_634 - _642) * (isnan(1.0) ? _4157 : (isnan(_4157) ? 1.0 : min(_4157, 1.0)))) + _642) * 4.55000019073486328125;
    float _657 = (((_635 - _645) * (isnan(1.0) ? _4168 : (isnan(_4168) ? 1.0 : min(_4168, 1.0)))) + _645) * 4.55000019073486328125;
    vec4 _674 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _303) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _304) + cbTextureTilingScale._m0[20u].w));
    vec4 _697 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _303) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _304) + cbTextureTilingScale._m0[4u].w));
    vec4 _714 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _716 = _714.x;
    float _717 = _714.y;
    float _718 = _714.z;
    float _725 = ((_697.x - _716) * _481) + _716;
    float _726 = ((_697.y - _717) * _481) + _717;
    float _727 = ((_697.z - _718) * _481) + _718;
    vec4 _739 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _303) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _304) + cbTextureTilingScale._m0[2u].w));
    float _750 = ((_739.x - _725) * _554) + _725;
    float _751 = ((_739.y - _726) * _554) + _726;
    float _752 = ((_739.z - _727) * _554) + _727;
    vec4 _764 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[23u].x * _303) + cbTextureTilingScale._m0[23u].z, (cbTextureTilingScale._m0[23u].y * _304) + cbTextureTilingScale._m0[23u].w));
    float _777 = ((_764.z - _752) * _623) + _752;
    float _780 = ((((_764.x - _750) * _623) + _750) * 2.0) + (-1.0);
    float _781 = ((((_764.y - _751) * _623) + _751) * 2.0) + (-1.0);
    float _782 = dot(vec2(_780, _781), vec2(_780, _781));
    float _4212 = isnan(0.0) ? _782 : (isnan(_782) ? 0.0 : max(_782, 0.0));
    float _787 = sqrt(1.0 - (isnan(1.0) ? _4212 : (isnan(_4212) ? 1.0 : min(_4212, 1.0))));
    vec4 _801 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _826 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _303) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _304) + cbTextureTilingScale._m0[11u].w));
    float _828 = _826.x;
    float _829 = 1.0 - _828;
    float _842 = (TEXCOORD_8.w - ((cbMtdParam._m0[21u].z * (1.0 - TEXCOORD_8.w)) * ((((_828 - _829) * cbMtdParam._m0[24u].w) + _829) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[21u].w + 1.0);
    float _4223 = isnan(0.0) ? _842 : (isnan(_842) ? 0.0 : max(_842, 0.0));
    float _843 = isnan(1.0) ? _4223 : (isnan(_4223) ? 1.0 : min(_4223, 1.0));
    float _850 = (_843 * (cbMtdParam._m0[17u].x - _653)) + _653;
    float _851 = (_843 * (cbMtdParam._m0[17u].y - _655)) + _655;
    float _852 = (_843 * (cbMtdParam._m0[17u].z - _657)) + _657;
    float _857 = (((_674.z - _777) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _777;
    float _861 = ((_801.z - _857) * cbMtdParam._m0[19u].w) + _857;
    vec4 _874 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _303) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _304) + cbTextureTilingScale._m0[15u].w));
    float _881 = (_874.x * 2.0) + (-1.0);
    float _882 = (_874.y * 2.0) + (-1.0);
    float _883 = dot(vec2(_881, _882), vec2(_881, _882));
    float _4234 = isnan(0.0) ? _883 : (isnan(_883) ? 0.0 : max(_883, 0.0));
    float _891 = (_843 * (_874.z - _861)) + _861;
    float _900 = (_780 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_674.x * 2.0) + (-1.0)))) + (((_801.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _901 = (_781 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_674.y * 2.0) + (-1.0)))) + (((_801.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _913 = (((_881 - _900) + (cbMtdParam._m0[21u].x * _900)) * _843) + _900;
    float _914 = (((_882 - _901) + (cbMtdParam._m0[21u].x * _901)) * _843) + _901;
    float _915 = (_843 * (sqrt(1.0 - (isnan(1.0) ? _4234 : (isnan(_4234) ? 1.0 : min(_4234, 1.0)))) - _787)) + _787;
    float _919 = cbMtdParam._m0[22u].x + _801.w;
    float _922 = fma(_915, _250 * NORMAL.x, fma(_914, _257 * TANGENT.x, (_243 * _235) * _913));
    float _925 = fma(_915, _250 * NORMAL.y, fma(_914, _257 * TANGENT.y, (_243 * _236) * _913));
    float _928 = fma(_915, _250 * NORMAL.z, fma(_914, _257 * TANGENT.z, (_243 * _237) * _913));
    float _932 = inversesqrt(dot(vec3(_922, _925, _928), vec3(_922, _925, _928)));
    float _933 = _932 * _922;
    float _934 = _932 * _925;
    float _935 = _932 * _928;
    float _4245 = isnan(0.0) ? _891 : (isnan(_891) ? 0.0 : max(_891, 0.0));
    float _936 = isnan(1.0) ? _4245 : (isnan(_4245) ? 1.0 : min(_4245, 1.0));
    float _4256 = isnan(0.0) ? _919 : (isnan(_919) ? 0.0 : max(_919, 0.0));
    float _4267 = isnan(0.0) ? _850 : (isnan(_850) ? 0.0 : max(_850, 0.0));
    float _4278 = isnan(0.0) ? _851 : (isnan(_851) ? 0.0 : max(_851, 0.0));
    float _4289 = isnan(0.0) ? _852 : (isnan(_852) ? 0.0 : max(_852, 0.0));
    float _954 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _995 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _1005 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _995);
    float _1006 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _995);
    float _1007 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _995);
    float _1011 = inversesqrt(dot(vec3(_1005, _1006, _1007), vec3(_1005, _1006, _1007)));
    float _1012 = _1005 * _1011;
    float _1013 = _1006 * _1011;
    float _1014 = _1007 * _1011;
    vec4 _1019 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _1021 = _1019.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1175 = sqrt(((_1005 * _1005) + (_1006 * _1006)) + (_1007 * _1007));
        float _1181 = (cbMatDynParam._m0[5u].x * _1175) + cbMatDynParam._m0[5u].y;
        float _4300 = isnan(0.0) ? _1181 : (isnan(_1181) ? 0.0 : max(_1181, 0.0));
        float _1182 = isnan(1.0) ? _4300 : (isnan(_4300) ? 1.0 : min(_4300, 1.0));
        float _1186 = (cbMatDynParam._m0[5u].z * _1175) + cbMatDynParam._m0[5u].w;
        float _4311 = isnan(0.0) ? _1186 : (isnan(_1186) ? 0.0 : max(_1186, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4311 : (isnan(_4311) ? 1.0 : min(_4311, 1.0))) - _1182)) + _1182) < ((_1021 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _1032 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1033 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1051 = fma(_935, cbSceneParam._m0[5u].z, fma(_934, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _933));
    float _1054 = fma(_935, cbSceneParam._m0[6u].z, fma(_934, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _933));
    float _1057 = fma(_935, cbSceneParam._m0[7u].z, fma(_934, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _933));
    uint _1070 = _284 + 9u;
    uint _1071 = _1070 + uint(cbMatDynParam._m0[0u].w);
    float _1077 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4267 : (isnan(_4267) ? 1.0 : min(_4267, 1.0)))) * cbInstanceData._m0[_1071].x;
    float _1078 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4278 : (isnan(_4278) ? 1.0 : min(_4278, 1.0)))) * cbInstanceData._m0[_1071].y;
    float _1079 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4289 : (isnan(_4289) ? 1.0 : min(_4289, 1.0)))) * cbInstanceData._m0[_1071].z;
    float _4322 = isnan(0.0) ? _1077 : (isnan(_1077) ? 0.0 : max(_1077, 0.0));
    float _1080 = isnan(1.0) ? _4322 : (isnan(_4322) ? 1.0 : min(_4322, 1.0));
    float _4333 = isnan(0.0) ? _1078 : (isnan(_1078) ? 0.0 : max(_1078, 0.0));
    float _1081 = isnan(1.0) ? _4333 : (isnan(_4333) ? 1.0 : min(_4333, 1.0));
    float _4344 = isnan(0.0) ? _1079 : (isnan(_1079) ? 0.0 : max(_1079, 0.0));
    float _1082 = isnan(1.0) ? _4344 : (isnan(_4344) ? 1.0 : min(_4344, 1.0));
    vec4 _1091 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1032, cbSceneParam._m0[86u].y * _1033));
    float _1095 = ((isnan(1.0) ? _4256 : (isnan(_4256) ? 1.0 : min(_4256, 1.0))) * TEXCOORD_5.w) * _1091.x;
    float _1096 = dot(vec3(_933, _934, _935), vec3(_1012, _1013, _1014));
    float _1099 = _1096 * 2.0;
    float _1103 = (_1099 * _933) - _1012;
    float _1104 = (_1099 * _934) - _1013;
    float _1105 = (_1099 * _935) - _1014;
    float _1109 = abs(dot(vec3(_1012, _1013, _1014), vec3(_933, _934, _935)));
    float _4355 = isnan(0.0) ? _1109 : (isnan(_1109) ? 0.0 : max(_1109, 0.0));
    float _1111 = sqrt(_936);
    float _1124 = exp2((_1111 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4355 : (isnan(_4355) ? 1.0 : min(_4355, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1111 * 3.0));
    float _1156 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1160 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1164 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1493;
    float _1495;
    float _1496;
    float _1497;
    float _1498;
    float _1499;
    float _1500;
    float _1501;
    float _1502;
    float _1503;
    float _1504;
    float _1505;
    float _1506;
    float _1507;
    float _1508;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1218 = fma(_1164, cbModelParam._m0[26u].z, fma(_1160, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1156));
        float _1222 = fma(_1164, cbModelParam._m0[27u].z, fma(_1160, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1156));
        float _1226 = fma(_1164, cbModelParam._m0[28u].z, fma(_1160, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1156));
        float _1251 = _1156 + _933;
        float _1252 = _1160 + _934;
        float _1253 = _1164 + _935;
        float _1263 = fma(_1253, cbModelParam._m0[26u].z, fma(_1252, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1251)) - _1218;
        float _1264 = fma(_1253, cbModelParam._m0[27u].z, fma(_1252, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1251)) - _1222;
        float _1265 = fma(_1253, cbModelParam._m0[28u].z, fma(_1252, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1251)) - _1226;
        float _1269 = inversesqrt(dot(vec3(_1263, _1264, _1265), vec3(_1263, _1264, _1265)));
        float _1282 = ((_1269 * _1263) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1218 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1283 = ((_1269 * _1264) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1222 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1284 = ((_1269 * _1265) / cbModelParam._m0[34u].z) + ((((((_1226 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1287 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1282, _1283, _1284), 0.0);
        vec4 _1294 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1282, _1283, _1284), 0.0);
        vec4 _1301 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1282, _1283, _1284), 0.0);
        vec4 _1308 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1282, _1283, _1284), 0.0);
        float _1321 = exp2((_1287.w + (-0.5)) * 20.0) * 2.0;
        float _1322 = _1321 * (_1287.x + (-0.5));
        float _1323 = _1321 * (_1287.y + (-0.5));
        float _1324 = _1321 * (_1287.z + (-0.5));
        float _1331 = exp2((_1294.w + (-0.5)) * 20.0) * 2.0;
        float _1332 = _1331 * (_1294.x + (-0.5));
        float _1333 = _1331 * (_1294.y + (-0.5));
        float _1334 = _1331 * (_1294.z + (-0.5));
        float _1341 = exp2((_1301.w + (-0.5)) * 20.0) * 2.0;
        float _1342 = _1341 * (_1301.x + (-0.5));
        float _1343 = _1341 * (_1301.y + (-0.5));
        float _1344 = _1341 * (_1301.z + (-0.5));
        float _1351 = exp2((_1308.w + (-0.5)) * 20.0) * 2.0;
        float _1352 = _1351 * (_1308.x + (-0.5));
        float _1353 = _1351 * (_1308.y + (-0.5));
        float _1354 = _1351 * (_1308.z + (-0.5));
        float _1355 = isnan(0.0) ? _1352 : (isnan(_1352) ? 0.0 : max(_1352, 0.0));
        float _1356 = isnan(0.0) ? _1353 : (isnan(_1353) ? 0.0 : max(_1353, 0.0));
        float _1357 = isnan(0.0) ? _1354 : (isnan(_1354) ? 0.0 : max(_1354, 0.0));
        float _1358 = _1322 * 0.5;
        float _1359 = _1332 * 0.5;
        float _1360 = _1342 * 0.5;
        float _1361 = dot(vec3(_1358, _1359, _1360), vec3(_1358, _1359, _1360));
        float _1366 = (_1361 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1361);
        float _1375 = (dot(vec3(_933, _934, _935), vec3(_1366 * _1358, _1366 * _1359, _1366 * _1360)) + 1.0) * 0.5;
        float _4381 = isnan(0.0) ? _1375 : (isnan(_1375) ? 0.0 : max(_1375, 0.0));
        float _1385 = sqrt(((_1359 * _1359) + (_1358 * _1358)) + (_1360 * _1360)) / (_1355 + 9.9999997473787516355514526367188e-06);
        float _4392 = isnan(0.0) ? _1385 : (isnan(_1385) ? 0.0 : max(_1385, 0.0));
        float _1386 = isnan(1.0) ? _4392 : (isnan(_4392) ? 1.0 : min(_4392, 1.0));
        float _1387 = _1386 * 2.0;
        float _1391 = (1.0 - _1386) / (_1386 + 1.0);
        float _4403 = isnan(0.0) ? _1391 : (isnan(_1391) ? 0.0 : max(_1391, 0.0));
        float _1392 = isnan(1.0) ? _4403 : (isnan(_4403) ? 1.0 : min(_4403, 1.0));
        float _1401 = ((((1.0 - _1392) * (_1387 + 2.0)) * exp2(log2(isnan(1.0) ? _4381 : (isnan(_4381) ? 1.0 : min(_4381, 1.0))) * (_1387 + 1.0))) + _1392) * _1355;
        float _1402 = _1323 * 0.5;
        float _1403 = _1333 * 0.5;
        float _1404 = _1343 * 0.5;
        float _1405 = dot(vec3(_1402, _1403, _1404), vec3(_1402, _1403, _1404));
        float _1410 = (_1405 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1405);
        float _1418 = (dot(vec3(_933, _934, _935), vec3(_1410 * _1402, _1410 * _1403, _1410 * _1404)) + 1.0) * 0.5;
        float _4414 = isnan(0.0) ? _1418 : (isnan(_1418) ? 0.0 : max(_1418, 0.0));
        float _1427 = sqrt(((_1403 * _1403) + (_1402 * _1402)) + (_1404 * _1404)) / (_1356 + 9.9999997473787516355514526367188e-06);
        float _4425 = isnan(0.0) ? _1427 : (isnan(_1427) ? 0.0 : max(_1427, 0.0));
        float _1428 = isnan(1.0) ? _4425 : (isnan(_4425) ? 1.0 : min(_4425, 1.0));
        float _1429 = _1428 * 2.0;
        float _1433 = (1.0 - _1428) / (_1428 + 1.0);
        float _4436 = isnan(0.0) ? _1433 : (isnan(_1433) ? 0.0 : max(_1433, 0.0));
        float _1434 = isnan(1.0) ? _4436 : (isnan(_4436) ? 1.0 : min(_4436, 1.0));
        float _1443 = ((((1.0 - _1434) * (_1429 + 2.0)) * exp2(log2(isnan(1.0) ? _4414 : (isnan(_4414) ? 1.0 : min(_4414, 1.0))) * (_1429 + 1.0))) + _1434) * _1356;
        float _1444 = _1324 * 0.5;
        float _1445 = _1334 * 0.5;
        float _1446 = _1344 * 0.5;
        float _1447 = dot(vec3(_1444, _1445, _1446), vec3(_1444, _1445, _1446));
        float _1452 = (_1447 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1447);
        float _1460 = (dot(vec3(_933, _934, _935), vec3(_1452 * _1444, _1452 * _1445, _1452 * _1446)) + 1.0) * 0.5;
        float _4447 = isnan(0.0) ? _1460 : (isnan(_1460) ? 0.0 : max(_1460, 0.0));
        float _1469 = sqrt(((_1445 * _1445) + (_1444 * _1444)) + (_1446 * _1446)) / (_1357 + 9.9999997473787516355514526367188e-06);
        float _4458 = isnan(0.0) ? _1469 : (isnan(_1469) ? 0.0 : max(_1469, 0.0));
        float _1470 = isnan(1.0) ? _4458 : (isnan(_4458) ? 1.0 : min(_4458, 1.0));
        float _1471 = _1470 * 2.0;
        float _1475 = (1.0 - _1470) / (_1470 + 1.0);
        float _4469 = isnan(0.0) ? _1475 : (isnan(_1475) ? 0.0 : max(_1475, 0.0));
        float _1476 = isnan(1.0) ? _4469 : (isnan(_4469) ? 1.0 : min(_4469, 1.0));
        float _1485 = ((((1.0 - _1476) * (_1471 + 2.0)) * exp2(log2(isnan(1.0) ? _4447 : (isnan(_4447) ? 1.0 : min(_4447, 1.0))) * (_1471 + 1.0))) + _1476) * _1357;
        _1493 = _1324;
        _1495 = _1323;
        _1496 = _1322;
        _1497 = _1334;
        _1498 = _1333;
        _1499 = _1332;
        _1500 = _1344;
        _1501 = _1343;
        _1502 = _1342;
        _1503 = _1357;
        _1504 = _1356;
        _1505 = _1355;
        _1506 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1401 : (isnan(_1401) ? 0.0 : max(_1401, 0.0)));
        _1507 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1443 : (isnan(_1443) ? 0.0 : max(_1443, 0.0)));
        _1508 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1485 : (isnan(_1485) ? 0.0 : max(_1485, 0.0)));
    }
    else
    {
        _1493 = _1494;
        _1495 = _1494;
        _1496 = _1494;
        _1497 = _1494;
        _1498 = _1494;
        _1499 = _1494;
        _1500 = _1494;
        _1501 = _1494;
        _1502 = _1494;
        _1503 = _1494;
        _1504 = _1494;
        _1505 = _1494;
        _1506 = 0.0;
        _1507 = 0.0;
        _1508 = 0.0;
    }
    float _1803;
    float _1804;
    float _1805;
    float _1806;
    float _1807;
    float _1808;
    float _1809;
    float _1810;
    float _1811;
    float _1812;
    float _1813;
    float _1814;
    float _1815;
    float _1816;
    float _1817;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1534 = fma(_1164, cbModelParam._m0[30u].z, fma(_1160, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1156));
        float _1538 = fma(_1164, cbModelParam._m0[31u].z, fma(_1160, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1156));
        float _1542 = fma(_1164, cbModelParam._m0[32u].z, fma(_1160, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1156));
        float _1565 = _1156 + _933;
        float _1566 = _1160 + _934;
        float _1567 = _1164 + _935;
        float _1577 = fma(_1567, cbModelParam._m0[30u].z, fma(_1566, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1565)) - _1534;
        float _1578 = fma(_1567, cbModelParam._m0[31u].z, fma(_1566, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1565)) - _1538;
        float _1579 = fma(_1567, cbModelParam._m0[32u].z, fma(_1566, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1565)) - _1542;
        float _1583 = inversesqrt(dot(vec3(_1577, _1578, _1579), vec3(_1577, _1578, _1579)));
        float _1596 = ((_1583 * _1577) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1534 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1597 = ((_1583 * _1578) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1538 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1598 = ((_1583 * _1579) / cbModelParam._m0[35u].z) + ((((((_1542 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1600 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1596, _1597, _1598), 0.0);
        vec4 _1607 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1596, _1597, _1598), 0.0);
        vec4 _1614 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1596, _1597, _1598), 0.0);
        vec4 _1621 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1596, _1597, _1598), 0.0);
        float _1633 = exp2((_1600.w + (-0.5)) * 20.0) * 2.0;
        float _1634 = _1633 * (_1600.x + (-0.5));
        float _1635 = _1633 * (_1600.y + (-0.5));
        float _1636 = _1633 * (_1600.z + (-0.5));
        float _1643 = exp2((_1607.w + (-0.5)) * 20.0) * 2.0;
        float _1644 = _1643 * (_1607.x + (-0.5));
        float _1645 = _1643 * (_1607.y + (-0.5));
        float _1646 = _1643 * (_1607.z + (-0.5));
        float _1653 = exp2((_1614.w + (-0.5)) * 20.0) * 2.0;
        float _1654 = _1653 * (_1614.x + (-0.5));
        float _1655 = _1653 * (_1614.y + (-0.5));
        float _1656 = _1653 * (_1614.z + (-0.5));
        float _1663 = exp2((_1621.w + (-0.5)) * 20.0) * 2.0;
        float _1664 = _1663 * (_1621.x + (-0.5));
        float _1665 = _1663 * (_1621.y + (-0.5));
        float _1666 = _1663 * (_1621.z + (-0.5));
        float _1667 = isnan(0.0) ? _1664 : (isnan(_1664) ? 0.0 : max(_1664, 0.0));
        float _1668 = isnan(0.0) ? _1665 : (isnan(_1665) ? 0.0 : max(_1665, 0.0));
        float _1669 = isnan(0.0) ? _1666 : (isnan(_1666) ? 0.0 : max(_1666, 0.0));
        float _1670 = _1634 * 0.5;
        float _1671 = _1644 * 0.5;
        float _1672 = _1654 * 0.5;
        float _1673 = dot(vec3(_1670, _1671, _1672), vec3(_1670, _1671, _1672));
        float _1678 = (_1673 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1673);
        float _1686 = (dot(vec3(_933, _934, _935), vec3(_1678 * _1670, _1678 * _1671, _1678 * _1672)) + 1.0) * 0.5;
        float _4510 = isnan(0.0) ? _1686 : (isnan(_1686) ? 0.0 : max(_1686, 0.0));
        float _1695 = sqrt(((_1671 * _1671) + (_1670 * _1670)) + (_1672 * _1672)) / (_1667 + 9.9999997473787516355514526367188e-06);
        float _4521 = isnan(0.0) ? _1695 : (isnan(_1695) ? 0.0 : max(_1695, 0.0));
        float _1696 = isnan(1.0) ? _4521 : (isnan(_4521) ? 1.0 : min(_4521, 1.0));
        float _1697 = _1696 * 2.0;
        float _1701 = (1.0 - _1696) / (_1696 + 1.0);
        float _4532 = isnan(0.0) ? _1701 : (isnan(_1701) ? 0.0 : max(_1701, 0.0));
        float _1702 = isnan(1.0) ? _4532 : (isnan(_4532) ? 1.0 : min(_4532, 1.0));
        float _1711 = ((((1.0 - _1702) * (_1697 + 2.0)) * exp2(log2(isnan(1.0) ? _4510 : (isnan(_4510) ? 1.0 : min(_4510, 1.0))) * (_1697 + 1.0))) + _1702) * _1667;
        float _1712 = _1635 * 0.5;
        float _1713 = _1645 * 0.5;
        float _1714 = _1655 * 0.5;
        float _1715 = dot(vec3(_1712, _1713, _1714), vec3(_1712, _1713, _1714));
        float _1720 = (_1715 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1715);
        float _1728 = (dot(vec3(_933, _934, _935), vec3(_1720 * _1712, _1720 * _1713, _1720 * _1714)) + 1.0) * 0.5;
        float _4543 = isnan(0.0) ? _1728 : (isnan(_1728) ? 0.0 : max(_1728, 0.0));
        float _1737 = sqrt(((_1713 * _1713) + (_1712 * _1712)) + (_1714 * _1714)) / (_1668 + 9.9999997473787516355514526367188e-06);
        float _4554 = isnan(0.0) ? _1737 : (isnan(_1737) ? 0.0 : max(_1737, 0.0));
        float _1738 = isnan(1.0) ? _4554 : (isnan(_4554) ? 1.0 : min(_4554, 1.0));
        float _1739 = _1738 * 2.0;
        float _1743 = (1.0 - _1738) / (_1738 + 1.0);
        float _4565 = isnan(0.0) ? _1743 : (isnan(_1743) ? 0.0 : max(_1743, 0.0));
        float _1744 = isnan(1.0) ? _4565 : (isnan(_4565) ? 1.0 : min(_4565, 1.0));
        float _1753 = ((((1.0 - _1744) * (_1739 + 2.0)) * exp2(log2(isnan(1.0) ? _4543 : (isnan(_4543) ? 1.0 : min(_4543, 1.0))) * (_1739 + 1.0))) + _1744) * _1668;
        float _1754 = _1636 * 0.5;
        float _1755 = _1646 * 0.5;
        float _1756 = _1656 * 0.5;
        float _1757 = dot(vec3(_1754, _1755, _1756), vec3(_1754, _1755, _1756));
        float _1762 = (_1757 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1757);
        float _1770 = (dot(vec3(_933, _934, _935), vec3(_1762 * _1754, _1762 * _1755, _1762 * _1756)) + 1.0) * 0.5;
        float _4576 = isnan(0.0) ? _1770 : (isnan(_1770) ? 0.0 : max(_1770, 0.0));
        float _1779 = sqrt(((_1755 * _1755) + (_1754 * _1754)) + (_1756 * _1756)) / (_1669 + 9.9999997473787516355514526367188e-06);
        float _4587 = isnan(0.0) ? _1779 : (isnan(_1779) ? 0.0 : max(_1779, 0.0));
        float _1780 = isnan(1.0) ? _4587 : (isnan(_4587) ? 1.0 : min(_4587, 1.0));
        float _1781 = _1780 * 2.0;
        float _1785 = (1.0 - _1780) / (_1780 + 1.0);
        float _4598 = isnan(0.0) ? _1785 : (isnan(_1785) ? 0.0 : max(_1785, 0.0));
        float _1786 = isnan(1.0) ? _4598 : (isnan(_4598) ? 1.0 : min(_4598, 1.0));
        float _1795 = ((((1.0 - _1786) * (_1781 + 2.0)) * exp2(log2(isnan(1.0) ? _4576 : (isnan(_4576) ? 1.0 : min(_4576, 1.0))) * (_1781 + 1.0))) + _1786) * _1669;
        _1803 = _1636;
        _1804 = _1635;
        _1805 = _1634;
        _1806 = _1646;
        _1807 = _1645;
        _1808 = _1644;
        _1809 = _1656;
        _1810 = _1655;
        _1811 = _1654;
        _1812 = _1669;
        _1813 = _1668;
        _1814 = _1667;
        _1815 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1711 : (isnan(_1711) ? 0.0 : max(_1711, 0.0)));
        _1816 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1753 : (isnan(_1753) ? 0.0 : max(_1753, 0.0)));
        _1817 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1795 : (isnan(_1795) ? 0.0 : max(_1795, 0.0)));
    }
    else
    {
        _1803 = _1494;
        _1804 = _1494;
        _1805 = _1494;
        _1806 = _1494;
        _1807 = _1494;
        _1808 = _1494;
        _1809 = _1494;
        _1810 = _1494;
        _1811 = _1494;
        _1812 = _1494;
        _1813 = _1494;
        _1814 = _1494;
        _1815 = 0.0;
        _1816 = 0.0;
        _1817 = 0.0;
    }
    float _1827 = (cbModelParam._m0[1u].x * (_1815 - _1506)) + _1506;
    float _1828 = (cbModelParam._m0[1u].x * (_1816 - _1507)) + _1507;
    float _1829 = (cbModelParam._m0[1u].x * (_1817 - _1508)) + _1508;
    float _1850 = fma(_1829, cbSceneParam._m0[89u].z, fma(_1828, cbSceneParam._m0[89u].y, _1827 * cbSceneParam._m0[89u].x));
    float _1853 = fma(_1829, cbSceneParam._m0[90u].z, fma(_1828, cbSceneParam._m0[90u].y, _1827 * cbSceneParam._m0[90u].x));
    float _1856 = fma(_1829, cbSceneParam._m0[91u].z, fma(_1828, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1827));
    float _1871 = _1103 * 0.5;
    float _1872 = _1104 * 0.5;
    float _1873 = _1105 * 0.5;
    float _1874 = dot(vec4(_1871, _1872, _1873, 1.0), vec4(_1805, _1808, _1811, _1814));
    float _1877 = dot(vec4(_1871, _1872, _1873, 1.0), vec4(_1804, _1807, _1810, _1813));
    float _1880 = dot(vec4(_1871, _1872, _1873, 1.0), vec4(_1803, _1806, _1809, _1812));
    float _1914;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1887 = dot(vec4(_1871, _1872, _1873, 1.0), vec4(_1493, _1497, _1500, _1503));
        float _1891 = dot(vec4(_1871, _1872, _1873, 1.0), vec4(_1495, _1498, _1501, _1504));
        float _1895 = dot(vec4(_1871, _1872, _1873, 1.0), vec4(_1496, _1499, _1502, _1505));
        float _1902 = dot(vec4(cbModelParam._m0[39u]), vec4(_1871, _1872, _1873, 1.0));
        _1914 = dot(vec3(isnan(0.0) ? _1895 : (isnan(_1895) ? 0.0 : max(_1895, 0.0)), isnan(0.0) ? _1891 : (isnan(_1891) ? 0.0 : max(_1891, 0.0)), isnan(0.0) ? _1887 : (isnan(_1887) ? 0.0 : max(_1887, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1902) ? 0.0 : (isnan(0.0) ? _1902 : max(0.0, _1902))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1914 = 1.0;
    }
    float _1925;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1916 = dot(vec4(cbModelParam._m0[40u]), vec4(_1871, _1872, _1873, 1.0));
        _1925 = dot(vec3(isnan(0.0) ? _1874 : (isnan(_1874) ? 0.0 : max(_1874, 0.0)), isnan(0.0) ? _1877 : (isnan(_1877) ? 0.0 : max(_1877, 0.0)), isnan(0.0) ? _1880 : (isnan(_1880) ? 0.0 : max(_1880, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1916) ? 0.0 : (isnan(0.0) ? _1916 : max(0.0, _1916))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1925 = 1.0;
    }
    float _1929 = (_1925 * cbModelParam._m0[1u].x) + (_1914 * (1.0 - cbModelParam._m0[1u].x));
    float _1939 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _936);
    float _1940 = isnan(_1939) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1939 : min(cbModelParam._m0[25u].z, _1939));
    float _2020;
    float _2022;
    float _2024;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1987 = fma(_1164, cbModelParam._m0[13u].z, fma(_1160, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1156)) + cbModelParam._m0[13u].w;
        float _1991 = fma(_1164, cbModelParam._m0[14u].z, fma(_1160, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1156)) + cbModelParam._m0[14u].w;
        float _1995 = fma(_1164, cbModelParam._m0[15u].z, fma(_1160, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1156)) + cbModelParam._m0[15u].w;
        float _1998 = fma(_1105, cbModelParam._m0[13u].z, fma(_1104, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1103));
        float _2001 = fma(_1105, cbModelParam._m0[14u].z, fma(_1104, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1103));
        float _2004 = fma(_1105, cbModelParam._m0[15u].z, fma(_1104, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1103));
        float _2032;
        if (_1998 > 0.0)
        {
            _2032 = abs((1.0 - _1987) / _1998);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1998 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1987 + 1.0) / _1998);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _2032 = frontier_phi_17_15_ladder;
        }
        float _2202;
        if (_2001 > 0.0)
        {
            _2202 = abs((1.0 - _1991) / _2001);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_2001 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1991 + 1.0) / _2001);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2202 = frontier_phi_26_22_ladder;
        }
        float _2497;
        if (_2004 > 0.0)
        {
            _2497 = abs((1.0 - _1995) / _2004);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_2004 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1995 + 1.0) / _2004);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2497 = frontier_phi_38_33_ladder;
        }
        float _2499 = isnan(_2202) ? _2032 : (isnan(_2032) ? _2202 : min(_2032, _2202));
        float _2500 = isnan(_2497) ? _2499 : (isnan(_2499) ? _2497 : min(_2499, _2497));
        float _2504 = (_2500 * _1998) + _1987;
        float _2505 = (_2500 * _2001) + _1991;
        float _2506 = (_2500 * _2004) + _1995;
        float _2507 = _2500 * 9.9999997473787516355514526367188e-05;
        float _2509 = (-1.0) - _2507;
        float _2511 = _2507 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2506 > _2511) || ((_2506 < _2509) || ((_2505 > _2511) || ((_2505 < _2509) || ((_2504 < _2509) || (_2504 > _2511))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2651 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2506, cbModelParam._m0[9u].z, fma(_2505, cbModelParam._m0[9u].y, _2504 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2506, cbModelParam._m0[10u].z, fma(_2505, cbModelParam._m0[10u].y, _2504 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2506, cbModelParam._m0[11u].z, fma(_2505, cbModelParam._m0[11u].y, _2504 * cbModelParam._m0[11u].x))), _1940);
            frontier_phi_16_38_ladder = _2651.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2651.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2651.x * cbModelParam._m0[1u].y;
        }
        _2020 = frontier_phi_16_38_ladder_2;
        _2022 = frontier_phi_16_38_ladder_1;
        _2024 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _2008 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1103, _1104, _1105), _1940);
        _2020 = _2008.x * cbModelParam._m0[1u].y;
        _2022 = _2008.y * cbModelParam._m0[1u].y;
        _2024 = _2008.z * cbModelParam._m0[1u].y;
    }
    float _2028 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _936);
    float _2029 = isnan(_2028) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2028 : min(cbModelParam._m0[25u].w, _2028));
    float _2119;
    float _2121;
    float _2123;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2083 = fma(_1164, cbModelParam._m0[21u].z, fma(_1160, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1156)) + cbModelParam._m0[21u].w;
        float _2087 = fma(_1164, cbModelParam._m0[22u].z, fma(_1160, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1156)) + cbModelParam._m0[22u].w;
        float _2091 = fma(_1164, cbModelParam._m0[23u].z, fma(_1160, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1156)) + cbModelParam._m0[23u].w;
        float _2094 = fma(_1105, cbModelParam._m0[21u].z, fma(_1104, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1103));
        float _2097 = fma(_1105, cbModelParam._m0[22u].z, fma(_1104, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1103));
        float _2100 = fma(_1105, cbModelParam._m0[23u].z, fma(_1104, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1103));
        float _2207;
        if (_2094 > 0.0)
        {
            _2207 = abs((1.0 - _2083) / _2094);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_2094 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_2083 + 1.0) / _2094);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2207 = frontier_phi_28_24_ladder;
        }
        float _2524;
        if (_2097 > 0.0)
        {
            _2524 = abs((1.0 - _2087) / _2097);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_2097 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_2087 + 1.0) / _2097);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2524 = frontier_phi_40_35_ladder;
        }
        float _2851;
        if (_2100 > 0.0)
        {
            _2851 = abs((1.0 - _2091) / _2100);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_2100 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_2091 + 1.0) / _2100);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _2851 = frontier_phi_50_47_ladder;
        }
        float _2853 = isnan(_2524) ? _2207 : (isnan(_2207) ? _2524 : min(_2207, _2524));
        float _2854 = isnan(_2851) ? _2853 : (isnan(_2853) ? _2851 : min(_2853, _2851));
        float _2858 = (_2854 * _2094) + _2083;
        float _2859 = (_2854 * _2097) + _2087;
        float _2860 = (_2854 * _2100) + _2091;
        float _2861 = _2854 * 9.9999997473787516355514526367188e-05;
        float _2862 = (-1.0) - _2861;
        float _2864 = _2861 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_2860 > _2864) || ((_2860 < _2862) || ((_2859 > _2864) || ((_2859 < _2862) || ((_2858 < _2862) || (_2858 > _2864))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2978 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2860, cbModelParam._m0[17u].z, fma(_2859, cbModelParam._m0[17u].y, _2858 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2860, cbModelParam._m0[18u].z, fma(_2859, cbModelParam._m0[18u].y, _2858 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2860, cbModelParam._m0[19u].z, fma(_2859, cbModelParam._m0[19u].y, _2858 * cbModelParam._m0[19u].x))), _2029);
            frontier_phi_25_50_ladder = _2978.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _2978.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _2978.x * cbModelParam._m0[1u].z;
        }
        _2119 = frontier_phi_25_50_ladder_2;
        _2121 = frontier_phi_25_50_ladder_1;
        _2123 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _2103 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1103, _1104, _1105), _2029);
        _2119 = _2103.x * cbModelParam._m0[1u].z;
        _2121 = _2103.y * cbModelParam._m0[1u].z;
        _2123 = _2103.z * cbModelParam._m0[1u].z;
    }
    float _2135 = ((((1.0 - _1124) * ((_1111 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_1124 * _1111)) * _1095;
    float _2136 = _2135 * ((cbModelParam._m0[1u].w * (_2119 - _2020)) + _2020);
    float _2137 = _2135 * ((cbModelParam._m0[1u].w * (_2121 - _2022)) + _2022);
    float _2138 = _2135 * ((cbModelParam._m0[1u].w * (_2123 - _2024)) + _2024);
    float _2141 = fma(_2138, cbSceneParam._m0[89u].z, fma(_2137, cbSceneParam._m0[89u].y, _2136 * cbSceneParam._m0[89u].x));
    float _2144 = fma(_2138, cbSceneParam._m0[90u].z, fma(_2137, cbSceneParam._m0[90u].y, _2136 * cbSceneParam._m0[90u].x));
    float _2147 = fma(_2138, cbSceneParam._m0[91u].z, fma(_2137, cbSceneParam._m0[91u].y, _2136 * cbSceneParam._m0[91u].x));
    float _2181 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2185 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2189 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2193 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2194 = _2181 / _2193;
    float _2195 = _2185 / _2193;
    float _2196 = _2189 / _2193;
    float _2343;
    float _2344;
    float _2345;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2223 = ((uint(_2196 > cbSceneParam._m0[59u].y) + uint(_2196 > cbSceneParam._m0[59u].x)) + uint(_2196 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2224 = _2223 + 43u;
        uint _2232 = _2223 + 44u;
        uint _2240 = _2223 + 45u;
        uint _2248 = _2223 + 46u;
        float _2259 = fma(_2193, cbSceneParam._m0[_2224].w, fma(_2189, cbSceneParam._m0[_2224].z, fma(_2185, cbSceneParam._m0[_2224].y, _2181 * cbSceneParam._m0[_2224].x)));
        float _2263 = fma(_2193, cbSceneParam._m0[_2232].w, fma(_2189, cbSceneParam._m0[_2232].z, fma(_2185, cbSceneParam._m0[_2232].y, _2181 * cbSceneParam._m0[_2232].x)));
        float _2271 = fma(_2193, cbSceneParam._m0[_2248].w, fma(_2189, cbSceneParam._m0[_2248].z, fma(_2185, cbSceneParam._m0[_2248].y, _2181 * cbSceneParam._m0[_2248].x)));
        float _2276 = cbSceneParam._m0[33u].z * _2271;
        float _2278 = cbSceneParam._m0[33u].w * _2271;
        float _2281 = fma(_2193, cbSceneParam._m0[_2240].w, fma(_2189, cbSceneParam._m0[_2240].z, fma(_2185, cbSceneParam._m0[_2240].y, _2181 * cbSceneParam._m0[_2240].x))) / _2271;
        float _2329 = (cbSceneParam._m0[33u].x - sqrt(((_2195 * _2195) + (_2194 * _2194)) + (_2196 * _2196))) * cbSceneParam._m0[33u].y;
        float _4724 = isnan(0.0) ? _2329 : (isnan(_2329) ? 0.0 : max(_2329, 0.0));
        float _2336 = (isnan(1.0) ? _4724 : (isnan(_4724) ? 1.0 : min(_4724, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2276 + _2259) / _2271, (_2278 + _2263) / _2271), _2281), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2278 + _2259) / _2271, (_2263 - _2276) / _2271), _2281), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2259 - _2276) / _2271, (_2263 - _2278) / _2271), _2281), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2259 - _2278) / _2271, (_2276 + _2263) / _2271), _2281), 0.0)).x), vec4(0.25)));
        _2343 = 1.0 - (_2336 * cbSceneParam._m0[34u].x);
        _2344 = 1.0 - (_2336 * cbSceneParam._m0[34u].y);
        _2345 = 1.0 - (_2336 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2343 = 1.0;
        _2344 = 1.0;
        _2345 = 1.0;
    }
    float _2409;
    float _2411;
    float _2413;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2397 = fma(_2193, cbSceneParam._m0[63u].w, fma(_2189, cbSceneParam._m0[63u].z, fma(_2185, cbSceneParam._m0[63u].y, _2181 * cbSceneParam._m0[63u].x)));
        float _2398 = fma(_2193, cbSceneParam._m0[60u].w, fma(_2189, cbSceneParam._m0[60u].z, fma(_2185, cbSceneParam._m0[60u].y, _2181 * cbSceneParam._m0[60u].x))) / _2397;
        float _2399 = fma(_2193, cbSceneParam._m0[61u].w, fma(_2189, cbSceneParam._m0[61u].z, fma(_2185, cbSceneParam._m0[61u].y, _2181 * cbSceneParam._m0[61u].x))) / _2397;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_2398 >= cbSceneParam._m0[64u].x) && (_2399 >= cbSceneParam._m0[64u].y)) && (_2398 <= cbSceneParam._m0[64u].z)) && (_2399 <= cbSceneParam._m0[64u].w))
        {
            float _2537 = fma(_2193, cbSceneParam._m0[62u].w, fma(_2189, cbSceneParam._m0[62u].z, fma(_2185, cbSceneParam._m0[62u].y, _2181 * cbSceneParam._m0[62u].x))) / _2397;
            float _2541 = isnan(cbSceneParam._m0[41u].w) ? _2537 : (isnan(_2537) ? cbSceneParam._m0[41u].w : max(_2537, cbSceneParam._m0[41u].w));
            float _2584 = (cbSceneParam._m0[33u].x - sqrt(((_2195 * _2195) + (_2194 * _2194)) + (_2196 * _2196))) * cbSceneParam._m0[33u].y;
            float _4740 = isnan(0.0) ? _2584 : (isnan(_2584) ? 0.0 : max(_2584, 0.0));
            float _2591 = (isnan(1.0) ? _4740 : (isnan(_4740) ? 1.0 : min(_4740, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2398, cbSceneParam._m0[33u].w + _2399), _2541), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2398, _2399 - cbSceneParam._m0[33u].z), _2541), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2398 - cbSceneParam._m0[33u].z, _2399 - cbSceneParam._m0[33u].w), _2541), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2398 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2399), _2541), 0.0)).x), vec4(0.25)));
            float _2595 = 1.0 - (_2591 * cbSceneParam._m0[34u].x);
            float _2596 = 1.0 - (_2591 * cbSceneParam._m0[34u].y);
            float _2597 = 1.0 - (_2591 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_2597) ? _2345 : (isnan(_2345) ? _2597 : min(_2345, _2597));
            frontier_phi_37_36_ladder_1 = isnan(_2596) ? _2344 : (isnan(_2344) ? _2596 : min(_2344, _2596));
            frontier_phi_37_36_ladder_2 = isnan(_2595) ? _2343 : (isnan(_2343) ? _2595 : min(_2343, _2595));
        }
        else
        {
            frontier_phi_37_36_ladder = _2345;
            frontier_phi_37_36_ladder_1 = _2344;
            frontier_phi_37_36_ladder_2 = _2343;
        }
        _2409 = frontier_phi_37_36_ladder_2;
        _2411 = frontier_phi_37_36_ladder_1;
        _2413 = frontier_phi_37_36_ladder;
    }
    else
    {
        _2409 = _2343;
        _2411 = _2344;
        _2413 = _2345;
    }
    uvec4 _2418 = floatBitsToUint(cbInstanceData._m0[_284 + 5u]);
    uint _2420 = _2418.x * 14u;
    uint _2421 = _2420 + 13u;
    float _2428 = _1095 + (-1.0);
    float _2433 = (cbLight._m0[_2421].x * _2428) + 1.0;
    float _2434 = (cbLight._m0[_2421].y * _2428) + 1.0;
    float _2435 = (cbLight._m0[_2421].z * _2428) + 1.0;
    float _2436 = (cbLight._m0[_2421].w * _2428) + 1.0;
    uint _2437 = _2420 + 5u;
    float _2443 = isnan(1.0) ? _2434 : (isnan(_2434) ? 1.0 : min(_2434, 1.0));
    uint _2447 = _2420 + 4u;
    float _2456 = isnan(1.0) ? _2433 : (isnan(_2433) ? 1.0 : min(_2433, 1.0));
    uint _2460 = _2420 | 1u;
    float _2471 = dot(vec3(cbLight._m0[_2420].xyz), vec3(_933, _934, _935));
    float _2474 = dot(vec3(cbLight._m0[_2460].xyz), vec3(_933, _934, _935));
    float _4776 = isnan(0.0) ? _2471 : (isnan(_2471) ? 0.0 : max(_2471, 0.0));
    float _4787 = isnan(0.0) ? _2474 : (isnan(_2474) ? 0.0 : max(_2474, 0.0));
    float _2479 = (isnan(1.0) ? _4776 : (isnan(_4776) ? 1.0 : min(_4776, 1.0))) * 0.3183098733425140380859375;
    float _2481 = (isnan(1.0) ? _4787 : (isnan(_4787) ? 1.0 : min(_4787, 1.0))) * 0.3183098733425140380859375;
    float _2488 = ((cbLight._m0[_2437].x * _2443) * _2481) + (((cbLight._m0[_2447].x * _2409) * _2456) * _2479);
    float _2489 = ((_2443 * cbLight._m0[_2437].y) * _2481) + (((cbLight._m0[_2447].y * _2411) * _2456) * _2479);
    float _2490 = ((_2443 * cbLight._m0[_2437].z) * _2481) + (((cbLight._m0[_2447].z * _2413) * _2456) * _2479);
    uvec4 _2494 = floatBitsToUint(cbLight._m0[_2420 + 12u]);
    bool _2496 = _2494.x == 0u;
    float _2598;
    float _2600;
    float _2602;
    if (_2496)
    {
        _2598 = _2488;
        _2600 = _2489;
        _2602 = _2490;
    }
    else
    {
        uint _2606 = _2420 + 6u;
        float _2622 = (dot(vec3(cbLight._m0[_2420 + 2u].xyz), vec3(_933, _934, _935)) * 0.5) + 0.5;
        float _2623 = _2622 * _2622;
        float _4798 = isnan(0.0) ? _2623 : (isnan(_2623) ? 0.0 : max(_2623, 0.0));
        float _2624 = isnan(1.0) ? _4798 : (isnan(_4798) ? 1.0 : min(_4798, 1.0));
        float _2625 = isnan(1.0) ? _2435 : (isnan(_2435) ? 1.0 : min(_2435, 1.0));
        _2598 = (((cbLight._m0[_2606].x * 0.3183098733425140380859375) * _2624) * _2625) + _2488;
        _2600 = (((cbLight._m0[_2606].y * 0.3183098733425140380859375) * _2624) * _2625) + _2489;
        _2602 = (((cbLight._m0[_2606].z * 0.3183098733425140380859375) * _2624) * _2625) + _2490;
    }
    bool _2605 = _2494.y == 0u;
    float _2660;
    float _2662;
    float _2664;
    if (_2605)
    {
        _2660 = _2598;
        _2662 = _2600;
        _2664 = _2602;
    }
    else
    {
        uint _2822 = _2420 + 7u;
        float _2838 = (dot(vec3(cbLight._m0[_2420 + 3u].xyz), vec3(_933, _934, _935)) * 0.5) + 0.5;
        float _2839 = _2838 * _2838;
        float _4814 = isnan(0.0) ? _2839 : (isnan(_2839) ? 0.0 : max(_2839, 0.0));
        float _2840 = isnan(1.0) ? _4814 : (isnan(_4814) ? 1.0 : min(_4814, 1.0));
        float _2841 = isnan(1.0) ? _2436 : (isnan(_2436) ? 1.0 : min(_2436, 1.0));
        _2660 = (((cbLight._m0[_2822].x * 0.3183098733425140380859375) * _2840) * _2841) + _2598;
        _2662 = (((cbLight._m0[_2822].y * 0.3183098733425140380859375) * _2840) * _2841) + _2600;
        _2664 = (((cbLight._m0[_2822].z * 0.3183098733425140380859375) * _2840) * _2841) + _2602;
    }
    uint _2667 = _2420 + 8u;
    float _2680 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2420].w)) * _936) * 0.949999988079071044921875);
    float _2681 = _2680 * _2680;
    float _2682 = cbLight._m0[_2420].x + _1012;
    float _2683 = cbLight._m0[_2420].y + _1013;
    float _2684 = cbLight._m0[_2420].z + _1014;
    float _2688 = inversesqrt(dot(vec3(_2682, _2683, _2684), vec3(_2682, _2683, _2684)));
    float _2689 = _2688 * _2682;
    float _2690 = _2688 * _2683;
    float _2691 = _2688 * _2684;
    float _2692 = dot(vec3(_933, _934, _935), vec3(cbLight._m0[_2420].xyz));
    float _4830 = isnan(0.0) ? _2692 : (isnan(_2692) ? 0.0 : max(_2692, 0.0));
    float _2695 = isnan(1.0) ? _4830 : (isnan(_4830) ? 1.0 : min(_4830, 1.0));
    float _4841 = isnan(0.0) ? _1096 : (isnan(_1096) ? 0.0 : max(_1096, 0.0));
    float _2696 = isnan(1.0) ? _4841 : (isnan(_4841) ? 1.0 : min(_4841, 1.0));
    float _2697 = dot(vec3(_933, _934, _935), vec3(_2689, _2690, _2691));
    float _4852 = isnan(0.0) ? _2697 : (isnan(_2697) ? 0.0 : max(_2697, 0.0));
    float _2700 = isnan(1.0) ? _4852 : (isnan(_4852) ? 1.0 : min(_4852, 1.0));
    float _2701 = dot(vec3(cbLight._m0[_2420].xyz), vec3(_2689, _2690, _2691));
    float _4863 = isnan(0.0) ? _2701 : (isnan(_2701) ? 0.0 : max(_2701, 0.0));
    float _2705 = _2681 * _2681;
    float _2709 = ((_2700 * _2700) * (_2705 + (-1.0))) + 1.0;
    float _2720 = (exp2(log2(1.0 - (isnan(1.0) ? _4863 : (isnan(_4863) ? 1.0 : min(_4863, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2721 = 1.0 - _2681;
    float _2732 = (0.5 / (((_2696 * ((_2695 * _2721) + _2681)) + 9.9999999392252902907785028219223e-09) + (((_2696 * _2721) + _2681) * _2695))) * _2695;
    float _4874 = isnan(0.0) ? _2732 : (isnan(_2732) ? 0.0 : max(_2732, 0.0));
    float _2734 = (isnan(1.0) ? _4874 : (isnan(_4874) ? 1.0 : min(_4874, 1.0))) * (_2705 / ((_2709 * _2709) * 3.141590118408203125));
    uint _2748 = _2420 + 9u;
    float _2759 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2460].w)) * _936) * 0.949999988079071044921875);
    float _2760 = _2759 * _2759;
    float _2761 = cbLight._m0[_2460].x + _1012;
    float _2762 = cbLight._m0[_2460].y + _1013;
    float _2763 = cbLight._m0[_2460].z + _1014;
    float _2767 = inversesqrt(dot(vec3(_2761, _2762, _2763), vec3(_2761, _2762, _2763)));
    float _2768 = _2767 * _2761;
    float _2769 = _2767 * _2762;
    float _2770 = _2767 * _2763;
    float _2771 = dot(vec3(_933, _934, _935), vec3(cbLight._m0[_2460].xyz));
    float _4885 = isnan(0.0) ? _2771 : (isnan(_2771) ? 0.0 : max(_2771, 0.0));
    float _2774 = isnan(1.0) ? _4885 : (isnan(_4885) ? 1.0 : min(_4885, 1.0));
    float _2775 = dot(vec3(_933, _934, _935), vec3(_2768, _2769, _2770));
    float _4896 = isnan(0.0) ? _2775 : (isnan(_2775) ? 0.0 : max(_2775, 0.0));
    float _2778 = isnan(1.0) ? _4896 : (isnan(_4896) ? 1.0 : min(_4896, 1.0));
    float _2779 = dot(vec3(cbLight._m0[_2460].xyz), vec3(_2768, _2769, _2770));
    float _4907 = isnan(0.0) ? _2779 : (isnan(_2779) ? 0.0 : max(_2779, 0.0));
    float _2783 = _2760 * _2760;
    float _2787 = ((_2778 * _2778) * (_2783 + (-1.0))) + 1.0;
    float _2796 = (exp2(log2(1.0 - (isnan(1.0) ? _4907 : (isnan(_4907) ? 1.0 : min(_4907, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2797 = 1.0 - _2760;
    float _2807 = (0.5 / (((_2696 * ((_2774 * _2797) + _2760)) + 9.9999999392252902907785028219223e-09) + (((_2696 * _2797) + _2760) * _2774))) * _2774;
    float _4918 = isnan(0.0) ? _2807 : (isnan(_2807) ? 0.0 : max(_2807, 0.0));
    float _2809 = (isnan(1.0) ? _4918 : (isnan(_4918) ? 1.0 : min(_4918, 1.0))) * (_2783 / ((_2787 * _2787) * 3.141590118408203125));
    float _2819 = (((_2796 * cbLight._m0[_2748].x) * _2809) * _2443) + ((((cbLight._m0[_2667].x * _2409) * _2720) * _2734) * _2456);
    float _2820 = (((_2796 * cbLight._m0[_2748].y) * _2809) * _2443) + ((((cbLight._m0[_2667].y * _2411) * _2720) * _2734) * _2456);
    float _2821 = (((_2796 * cbLight._m0[_2748].z) * _2809) * _2443) + ((((cbLight._m0[_2667].z * _2413) * _2720) * _2734) * _2456);
    float _2877;
    float _2879;
    float _2881;
    if (_2496)
    {
        _2877 = _2819;
        _2879 = _2820;
        _2881 = _2821;
    }
    else
    {
        uint _2883 = _2420 + 2u;
        uint _2887 = _2420 + 10u;
        float _2901 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2883].w)) * _936) * 0.949999988079071044921875);
        float _2902 = _2901 * _2901;
        float _2903 = cbLight._m0[_2883].x + _1012;
        float _2904 = cbLight._m0[_2883].y + _1013;
        float _2905 = cbLight._m0[_2883].z + _1014;
        float _2909 = inversesqrt(dot(vec3(_2903, _2904, _2905), vec3(_2903, _2904, _2905)));
        float _2910 = _2909 * _2903;
        float _2911 = _2909 * _2904;
        float _2912 = _2909 * _2905;
        float _2913 = dot(vec3(_933, _934, _935), vec3(cbLight._m0[_2883].xyz));
        float _4929 = isnan(0.0) ? _2913 : (isnan(_2913) ? 0.0 : max(_2913, 0.0));
        float _2916 = isnan(1.0) ? _4929 : (isnan(_4929) ? 1.0 : min(_4929, 1.0));
        float _2917 = dot(vec3(_933, _934, _935), vec3(_2910, _2911, _2912));
        float _4940 = isnan(0.0) ? _2917 : (isnan(_2917) ? 0.0 : max(_2917, 0.0));
        float _2920 = isnan(1.0) ? _4940 : (isnan(_4940) ? 1.0 : min(_4940, 1.0));
        float _2921 = dot(vec3(cbLight._m0[_2883].xyz), vec3(_2910, _2911, _2912));
        float _4951 = isnan(0.0) ? _2921 : (isnan(_2921) ? 0.0 : max(_2921, 0.0));
        float _2925 = _2902 * _2902;
        float _2929 = ((_2920 * _2920) * (_2925 + (-1.0))) + 1.0;
        float _2938 = (exp2(log2(1.0 - (isnan(1.0) ? _4951 : (isnan(_4951) ? 1.0 : min(_4951, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2939 = 1.0 - _2902;
        float _2949 = (0.5 / (((_2696 * ((_2916 * _2939) + _2902)) + 9.9999999392252902907785028219223e-09) + (((_2696 * _2939) + _2902) * _2916))) * _2916;
        float _4962 = isnan(0.0) ? _2949 : (isnan(_2949) ? 0.0 : max(_2949, 0.0));
        float _2951 = (isnan(1.0) ? _4962 : (isnan(_4962) ? 1.0 : min(_4962, 1.0))) * (_2925 / ((_2929 * _2929) * 3.141590118408203125));
        float _2952 = isnan(1.0) ? _2435 : (isnan(_2435) ? 1.0 : min(_2435, 1.0));
        _2877 = (((_2938 * cbLight._m0[_2887].x) * _2951) * _2952) + _2819;
        _2879 = (((_2938 * cbLight._m0[_2887].y) * _2951) * _2952) + _2820;
        _2881 = (((_2938 * cbLight._m0[_2887].z) * _2951) * _2952) + _2821;
    }
    float _2983;
    float _2985;
    float _2987;
    if (_2605)
    {
        _2983 = _2877;
        _2985 = _2879;
        _2987 = _2881;
    }
    else
    {
        uint _2994 = _2420 + 3u;
        uint _2998 = _2420 + 11u;
        float _3012 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2994].w)) * _936) * 0.949999988079071044921875);
        float _3013 = _3012 * _3012;
        float _3014 = cbLight._m0[_2994].x + _1012;
        float _3015 = cbLight._m0[_2994].y + _1013;
        float _3016 = cbLight._m0[_2994].z + _1014;
        float _3020 = inversesqrt(dot(vec3(_3014, _3015, _3016), vec3(_3014, _3015, _3016)));
        float _3021 = _3020 * _3014;
        float _3022 = _3020 * _3015;
        float _3023 = _3020 * _3016;
        float _3024 = dot(vec3(_933, _934, _935), vec3(cbLight._m0[_2994].xyz));
        float _4978 = isnan(0.0) ? _3024 : (isnan(_3024) ? 0.0 : max(_3024, 0.0));
        float _3027 = isnan(1.0) ? _4978 : (isnan(_4978) ? 1.0 : min(_4978, 1.0));
        float _3028 = dot(vec3(_933, _934, _935), vec3(_3021, _3022, _3023));
        float _4989 = isnan(0.0) ? _3028 : (isnan(_3028) ? 0.0 : max(_3028, 0.0));
        float _3031 = isnan(1.0) ? _4989 : (isnan(_4989) ? 1.0 : min(_4989, 1.0));
        float _3032 = dot(vec3(cbLight._m0[_2994].xyz), vec3(_3021, _3022, _3023));
        float _5000 = isnan(0.0) ? _3032 : (isnan(_3032) ? 0.0 : max(_3032, 0.0));
        float _3036 = _3013 * _3013;
        float _3040 = ((_3031 * _3031) * (_3036 + (-1.0))) + 1.0;
        float _3049 = (exp2(log2(1.0 - (isnan(1.0) ? _5000 : (isnan(_5000) ? 1.0 : min(_5000, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _3050 = 1.0 - _3013;
        float _3060 = (0.5 / (((_2696 * ((_3027 * _3050) + _3013)) + 9.9999999392252902907785028219223e-09) + (((_2696 * _3050) + _3013) * _3027))) * _3027;
        float _5011 = isnan(0.0) ? _3060 : (isnan(_3060) ? 0.0 : max(_3060, 0.0));
        float _3062 = (isnan(1.0) ? _5011 : (isnan(_5011) ? 1.0 : min(_5011, 1.0))) * (_3036 / ((_3040 * _3040) * 3.141590118408203125));
        float _3063 = isnan(1.0) ? _2436 : (isnan(_2436) ? 1.0 : min(_2436, 1.0));
        _2983 = (((_3049 * cbLight._m0[_2998].x) * _3062) * _3063) + _2877;
        _2985 = (((_3049 * cbLight._m0[_2998].y) * _3062) * _3063) + _2879;
        _2987 = (((_3049 * cbLight._m0[_2998].z) * _3062) * _3063) + _2881;
    }
    float _3129;
    float _3131;
    float _3133;
    float _3135;
    float _3137;
    float _3139;
    if (_2418.y == 0u)
    {
        uvec4 _3084 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3085 = _3084.x;
        uint _3096 = uint((float(_3084.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1033) / _3085))) + floor(float(uint(cbSceneParam._m0[85u].x * _1032) / _3085)));
        float _3106 = (log2(_2196 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _3107 = isnan(0.0) ? _3106 : (isnan(_3106) ? 0.0 : max(_3106, 0.0));
        uint _3110 = uint(isnan(14.0) ? _3107 : (isnan(_3107) ? 14.0 : min(_3107, 14.0)));
        uvec4 _3115 = texelFetch(g_lightClusterGridBuffer, int(((_3110 << 2u) + (_3096 << 6u)) >> 2u));
        uint _3116 = _3115.x;
        uint _3117 = _3084.z;
        float _3196;
        float _3198;
        float _3200;
        float _3202;
        float _3204;
        float _3206;
        if (((((1u << ((_3117 >> 4u) & 15u)) + 4294967295u) & _3116) == 0u) || ((_3117 & 240u) == 0u))
        {
            _3196 = 0.0;
            _3198 = 0.0;
            _3200 = 0.0;
            _3202 = 0.0;
            _3204 = 0.0;
            _3206 = 0.0;
        }
        else
        {
            float _3197;
            float _3199;
            float _3201;
            float _3203;
            float _3205;
            float _3207;
            float _3349 = 0.0;
            float _3350 = 0.0;
            float _3351 = 0.0;
            float _3352 = 0.0;
            float _3353 = 0.0;
            float _3354 = 0.0;
            uint _3355 = 0u;
            uint _3364;
            bool _3365;
            for (;;)
            {
                _3364 = texelFetch(g_lightClassification, int((((_3110 << 5u) + (_3096 << 9u)) + (_3355 << 2u)) >> 2u)).x;
                _3365 = _3364 == 0u;
                float frontier_phi_71_pred;
                float frontier_phi_71_pred_1;
                float frontier_phi_71_pred_2;
                float frontier_phi_71_pred_3;
                float frontier_phi_71_pred_4;
                float frontier_phi_71_pred_5;
                if (_3365)
                {
                    frontier_phi_71_pred = _3354;
                    frontier_phi_71_pred_1 = _3353;
                    frontier_phi_71_pred_2 = _3352;
                    frontier_phi_71_pred_3 = _3351;
                    frontier_phi_71_pred_4 = _3350;
                    frontier_phi_71_pred_5 = _3349;
                }
                else
                {
                    float _3494;
                    float _3495;
                    float _3496;
                    float _3497;
                    float _3498;
                    float _3499;
                    uint _3500;
                    _3494 = _3349;
                    _3495 = _3350;
                    _3496 = _3351;
                    _3497 = _3352;
                    _3498 = _3353;
                    _3499 = _3354;
                    _3500 = _3364;
                    float _3421;
                    float _3422;
                    float _3423;
                    float _3424;
                    float _3425;
                    float _3426;
                    for (;;)
                    {
                        uint _3504 = uint(findLSB(_3500)) + (_3355 << 5u);
                        uint _3501 = (_3500 + 4294967295u) & _3500;
                        uint _3506 = _3504 * 48u;
                        vec4 _3520 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3506)).x, texelFetch(g_PointLightRenderingBuffer, int(_3506 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3506 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3506 + 3u)).x));
                        uint _3526 = (_3504 * 48u) + 4u;
                        vec4 _3539 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3526)).x, texelFetch(g_PointLightRenderingBuffer, int(_3526 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3526 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3526 + 3u)).x));
                        uint _3545 = (_3504 * 48u) + 8u;
                        vec3 _3556 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3545)).x, texelFetch(g_PointLightRenderingBuffer, int(_3545 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3545 + 2u)).x));
                        float _3560 = _3520.x - _2194;
                        float _3561 = _3520.y - _2195;
                        float _3562 = _3520.z - _2196;
                        float _3563 = dot(vec3(_3560, _3561, _3562), vec3(_3560, _3561, _3562));
                        float _3566 = inversesqrt(_3563);
                        float _3567 = _3566 * _3560;
                        float _3568 = _3566 * _3561;
                        float _3569 = _3566 * _3562;
                        float _3570 = dot(vec3(_1051, _1054, _1057), vec3(_3567, _3568, _3569));
                        float _3575 = 1.0 - (_3563 * _3520.w);
                        float _5037 = isnan(0.0) ? _3575 : (isnan(_3575) ? 0.0 : max(_3575, 0.0));
                        float _3576 = isnan(1.0) ? _5037 : (isnan(_5037) ? 1.0 : min(_5037, 1.0));
                        float _3577 = sqrt(_3563) * _3539.w;
                        float _3580 = 1.39999997615814208984375 / (_3577 + 1.39999997615814208984375);
                        float _3581 = _3580 * _3580;
                        float _3584 = ((1.0 - _3581) * _3570) + _3581;
                        float _3587 = _3577 * _3577;
                        float _3591 = ((isnan(0.0) ? _3584 : (isnan(_3584) ? 0.0 : max(_3584, 0.0))) * _3576) / ((_3587 * 0.699999988079071044921875) + 1.0);
                        float _3595 = (-0.0) - _2194;
                        float _3596 = (-0.0) - _2195;
                        float _3597 = (-0.0) - _2196;
                        float _3601 = inversesqrt(dot(vec3(_3595, _3596, _3597), vec3(_3595, _3596, _3597)));
                        float _3602 = _3601 * _3595;
                        float _3603 = _3601 * _3596;
                        float _3604 = _3601 * _3597;
                        float _3611 = exp2(log2(1.0 / ((_3587 * 3.5) + 5.0)) * 0.25);
                        float _3612 = 1.0 - _1111;
                        float _3619 = sqrt(1.0 - ((1.0 - (_3612 * _3612)) * (1.0 - (_3611 * _3611))));
                        float _3620 = _3619 * _3619;
                        float _3621 = _3620 * _3620;
                        float _3622 = _3602 + _3567;
                        float _3623 = _3603 + _3568;
                        float _3624 = _3604 + _3569;
                        float _3628 = inversesqrt(dot(vec3(_3622, _3623, _3624), vec3(_3622, _3623, _3624)));
                        float _3632 = dot(vec3(_1051, _1054, _1057), vec3(_3602, _3603, _3604));
                        float _5053 = isnan(0.0) ? _3632 : (isnan(_3632) ? 0.0 : max(_3632, 0.0));
                        float _3635 = isnan(1.0) ? _5053 : (isnan(_5053) ? 1.0 : min(_5053, 1.0));
                        float _3636 = dot(vec3(_1051, _1054, _1057), vec3(_3628 * _3622, _3628 * _3623, _3628 * _3624));
                        float _5064 = isnan(0.0) ? _3636 : (isnan(_3636) ? 0.0 : max(_3636, 0.0));
                        float _3639 = isnan(1.0) ? _5064 : (isnan(_5064) ? 1.0 : min(_5064, 1.0));
                        float _3643 = ((_3639 * _3639) * (_3621 + (-1.0))) + 1.0;
                        float _3644 = _3580 * _3620;
                        float _3645 = _3644 * _3644;
                        float _3648 = ((1.0 - _3645) * _3570) + _3645;
                        float _5075 = isnan(0.0) ? _3648 : (isnan(_3648) ? 0.0 : max(_3648, 0.0));
                        float _3649 = isnan(1.0) ? _5075 : (isnan(_5075) ? 1.0 : min(_5075, 1.0));
                        float _3650 = 1.0 - _3620;
                        float _3660 = (0.5 / (((_3649 * ((_3635 * _3650) + _3620)) + 9.9999999392252902907785028219223e-09) + (((_3649 * _3650) + _3620) * _3635))) * _3649;
                        float _5086 = isnan(0.0) ? _3660 : (isnan(_3660) ? 0.0 : max(_3660, 0.0));
                        float _3671 = (((_3621 * 3.1415927410125732421875) * (isnan(1.0) ? _5086 : (isnan(_5086) ? 1.0 : min(_5086, 1.0)))) / ((_3643 * _3643) * ((_3587 * 2.1991131305694580078125) + 3.141590118408203125))) * _3576;
                        _3424 = (_3591 * _3539.x) + _3497;
                        _3425 = (_3591 * _3539.y) + _3498;
                        _3426 = (_3591 * _3539.z) + _3499;
                        _3421 = (_3671 * _3556.x) + _3494;
                        _3422 = (_3671 * _3556.y) + _3495;
                        _3423 = (_3671 * _3556.z) + _3496;
                        if (_3501 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3494 = _3421;
                            _3495 = _3422;
                            _3496 = _3423;
                            _3497 = _3424;
                            _3498 = _3425;
                            _3499 = _3426;
                            _3500 = _3501;
                        }
                    }
                    frontier_phi_71_pred = _3426;
                    frontier_phi_71_pred_1 = _3425;
                    frontier_phi_71_pred_2 = _3424;
                    frontier_phi_71_pred_3 = _3423;
                    frontier_phi_71_pred_4 = _3422;
                    frontier_phi_71_pred_5 = _3421;
                }
                _3207 = frontier_phi_71_pred;
                _3205 = frontier_phi_71_pred_1;
                _3203 = frontier_phi_71_pred_2;
                _3201 = frontier_phi_71_pred_3;
                _3199 = frontier_phi_71_pred_4;
                _3197 = frontier_phi_71_pred_5;
                uint _3356 = _3355 + 1u;
                if (_3356 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3349 = _3197;
                    _3350 = _3199;
                    _3351 = _3201;
                    _3352 = _3203;
                    _3353 = _3205;
                    _3354 = _3207;
                    _3355 = _3356;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3196 = _3197;
            _3198 = _3199;
            _3200 = _3201;
            _3202 = _3203;
            _3204 = _3205;
            _3206 = _3207;
        }
        uvec4 _3210 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3211 = _3210.z;
        uint _3213 = (_3211 >> 8u) & 15u;
        float _3317;
        float _3319;
        float _3321;
        float _3323;
        float _3325;
        float _3327;
        if (((4294967295u << _3213) & _3116) == 0u)
        {
            _3317 = _3196;
            _3319 = _3198;
            _3321 = _3200;
            _3323 = _3202;
            _3325 = _3204;
            _3327 = _3206;
        }
        else
        {
            float _3342 = inversesqrt(dot(vec3(_2194, _2195, _2196), vec3(_2194, _2195, _2196)));
            float _3343 = _3342 * _2194;
            float _3344 = _3342 * _2195;
            float _3345 = _3342 * _2196;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_3213 < ((_3211 >> 12u) & 15u))
            {
                float _3318;
                float _3320;
                float _3322;
                float _3324;
                float _3326;
                float _3328;
                float _3477 = _3196;
                float _3478 = _3198;
                float _3479 = _3200;
                float _3480 = _3202;
                float _3481 = _3204;
                float _3482 = _3206;
                uint _3483 = _3213;
                uint _3492;
                bool _3493;
                for (;;)
                {
                    _3492 = texelFetch(g_lightClassification, int((((_3110 << 5u) + (_3096 << 9u)) + (_3483 << 2u)) >> 2u)).x;
                    _3493 = _3492 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    float frontier_phi_82_pred_3;
                    float frontier_phi_82_pred_4;
                    float frontier_phi_82_pred_5;
                    if (_3493)
                    {
                        frontier_phi_82_pred = _3482;
                        frontier_phi_82_pred_1 = _3481;
                        frontier_phi_82_pred_2 = _3480;
                        frontier_phi_82_pred_3 = _3479;
                        frontier_phi_82_pred_4 = _3478;
                        frontier_phi_82_pred_5 = _3477;
                    }
                    else
                    {
                        float _3685;
                        float _3686;
                        float _3687;
                        float _3688;
                        float _3689;
                        float _3690;
                        float _3978;
                        float _3979;
                        float _3980;
                        float _3981;
                        float _3982;
                        float _3983;
                        float _3698 = _3477;
                        float _3699 = _3478;
                        float _3700 = _3479;
                        float _3701 = _3480;
                        float _3702 = _3481;
                        float _3703 = _3482;
                        uint _3704 = _3492;
                        uint _3705;
                        vec4 _3730;
                        float _3731;
                        vec4 _3746;
                        vec3 _3758;
                        vec4 _3773;
                        vec4 _3788;
                        float _3834;
                        bool _3835;
                        for (;;)
                        {
                            uint _3715 = ((_3483 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3704));
                            _3705 = (_3704 + 4294967295u) & _3704;
                            uint _3717 = _3715 * 40u;
                            _3730 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3717)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3717 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3717 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3717 + 3u)).x));
                            _3731 = _3730.w;
                            uint _3733 = (_3715 * 40u) + 4u;
                            _3746 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3733)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3733 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3733 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3733 + 3u)).x));
                            uint _3748 = (_3715 * 40u) + 8u;
                            _3758 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3748)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3748 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3748 + 2u)).x));
                            uint _3760 = (_3715 * 40u) + 16u;
                            _3773 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3760)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3760 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3760 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3760 + 3u)).x));
                            uint _3775 = (_3715 * 40u) + 20u;
                            _3788 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3775)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3775 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3775 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3775 + 3u)).x));
                            uint _3790 = (_3715 * 40u) + 24u;
                            vec4 _3803 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3790)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3790 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3790 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3790 + 3u)).x));
                            uint _3809 = (_3715 * 40u) + 28u;
                            vec4 _3822 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3809)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3809 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3809 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3809 + 3u)).x));
                            _3834 = fma(_2196, _3822.z, fma(_2195, _3822.y, _3822.x * _2194)) + _3822.w;
                            _3835 = !((fma(_2196, _3803.z, fma(_2195, _3803.y, _3803.x * _2194)) + _3803.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_3835)
                            {
                                float _3862 = _3730.x - _2194;
                                float _3863 = _3730.y - _2195;
                                float _3864 = _3730.z - _2196;
                                float _3865 = dot(vec3(_3862, _3863, _3864), vec3(_3862, _3863, _3864));
                                float _3868 = inversesqrt(_3865);
                                float _3869 = _3868 * _3862;
                                float _3870 = _3868 * _3863;
                                float _3871 = _3868 * _3864;
                                float _3875 = 1.0 - (_3865 / (_3731 * _3731));
                                float _5097 = isnan(0.0) ? _3875 : (isnan(_3875) ? 0.0 : max(_3875, 0.0));
                                float _3876 = isnan(1.0) ? _5097 : (isnan(_5097) ? 1.0 : min(_5097, 1.0));
                                float _3880 = sqrt(_3865) * _3746.w;
                                float _3882 = 1.39999997615814208984375 / (_3880 + 1.39999997615814208984375);
                                float _3883 = _3882 * _3882;
                                float _3886 = ((1.0 - _3883) * dot(vec3(_3869, _3870, _3871), vec3(_1051, _1054, _1057))) + _3883;
                                float _3889 = _3880 * _3880;
                                float _3893 = (fma(_2196, _3773.z, fma(_2195, _3773.y, _3773.x * _2194)) + _3773.w) / _3834;
                                float _3894 = (fma(_2196, _3788.z, fma(_2195, _3788.y, _3788.x * _2194)) + _3788.w) / _3834;
                                float _3898 = 1.0 - dot(vec2(_3893, _3894), vec2(_3893, _3894));
                                float _5113 = isnan(0.0) ? _3898 : (isnan(_3898) ? 0.0 : max(_3898, 0.0));
                                float _3899 = isnan(1.0) ? _5113 : (isnan(_5113) ? 1.0 : min(_5113, 1.0));
                                float _3900 = _3899 * (((isnan(0.0) ? _3886 : (isnan(_3886) ? 0.0 : max(_3886, 0.0))) * _3876) / ((_3889 * 0.699999988079071044921875) + 1.0));
                                float _3912 = exp2(log2(1.0 / ((_3889 * 3.5) + 5.0)) * 0.25);
                                float _3913 = 1.0 - _1111;
                                float _3920 = sqrt(1.0 - ((1.0 - (_3913 * _3913)) * (1.0 - (_3912 * _3912))));
                                float _3921 = _3920 * _3920;
                                float _3922 = _3921 * _3921;
                                float _3923 = _3869 - _3343;
                                float _3924 = _3870 - _3344;
                                float _3925 = _3871 - _3345;
                                float _3929 = inversesqrt(dot(vec3(_3923, _3924, _3925), vec3(_3923, _3924, _3925)));
                                float _3933 = dot(vec3(_1051, _1054, _1057), vec3((-0.0) - _3343, (-0.0) - _3344, (-0.0) - _3345));
                                float _5124 = isnan(0.0) ? _3933 : (isnan(_3933) ? 0.0 : max(_3933, 0.0));
                                float _3936 = isnan(1.0) ? _5124 : (isnan(_5124) ? 1.0 : min(_5124, 1.0));
                                float _3937 = dot(vec3(_1051, _1054, _1057), vec3(_3929 * _3923, _3929 * _3924, _3929 * _3925));
                                float _5135 = isnan(0.0) ? _3937 : (isnan(_3937) ? 0.0 : max(_3937, 0.0));
                                float _3940 = isnan(1.0) ? _5135 : (isnan(_5135) ? 1.0 : min(_5135, 1.0));
                                float _3944 = ((_3940 * _3940) * (_3922 + (-1.0))) + 1.0;
                                float _3945 = _3882 * _3921;
                                float _3946 = _3945 * _3945;
                                float _3952 = ((1.0 - _3946) * dot(vec3(_1051, _1054, _1057), vec3(_3869, _3870, _3871))) + _3946;
                                float _5146 = isnan(0.0) ? _3952 : (isnan(_3952) ? 0.0 : max(_3952, 0.0));
                                float _3953 = isnan(1.0) ? _5146 : (isnan(_5146) ? 1.0 : min(_5146, 1.0));
                                float _3954 = 1.0 - _3921;
                                float _3964 = (0.5 / (((_3953 * ((_3936 * _3954) + _3921)) + 9.9999999392252902907785028219223e-09) + (((_3953 * _3954) + _3921) * _3936))) * _3953;
                                float _5157 = isnan(0.0) ? _3964 : (isnan(_3964) ? 0.0 : max(_3964, 0.0));
                                float _3974 = (_3899 * _3876) * (((_3922 * 3.1415927410125732421875) * (isnan(1.0) ? _5157 : (isnan(_5157) ? 1.0 : min(_5157, 1.0)))) / ((_3944 * _3944) * ((_3889 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_88_pred = _3900 * _3746.z;
                                frontier_phi_88_pred_1 = _3900 * _3746.y;
                                frontier_phi_88_pred_2 = _3900 * _3746.x;
                                frontier_phi_88_pred_3 = _3974 * _3758.z;
                                frontier_phi_88_pred_4 = _3974 * _3758.y;
                                frontier_phi_88_pred_5 = _3974 * _3758.x;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _3983 = frontier_phi_88_pred;
                            _3982 = frontier_phi_88_pred_1;
                            _3981 = frontier_phi_88_pred_2;
                            _3980 = frontier_phi_88_pred_3;
                            _3979 = frontier_phi_88_pred_4;
                            _3978 = frontier_phi_88_pred_5;
                            _3688 = _3981 + _3701;
                            _3689 = _3982 + _3702;
                            _3690 = _3983 + _3703;
                            _3685 = _3978 + _3698;
                            _3686 = _3979 + _3699;
                            _3687 = _3980 + _3700;
                            if (_3705 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3698 = _3685;
                                _3699 = _3686;
                                _3700 = _3687;
                                _3701 = _3688;
                                _3702 = _3689;
                                _3703 = _3690;
                                _3704 = _3705;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _3690;
                        frontier_phi_82_pred_1 = _3689;
                        frontier_phi_82_pred_2 = _3688;
                        frontier_phi_82_pred_3 = _3687;
                        frontier_phi_82_pred_4 = _3686;
                        frontier_phi_82_pred_5 = _3685;
                    }
                    _3328 = frontier_phi_82_pred;
                    _3326 = frontier_phi_82_pred_1;
                    _3324 = frontier_phi_82_pred_2;
                    _3322 = frontier_phi_82_pred_3;
                    _3320 = frontier_phi_82_pred_4;
                    _3318 = frontier_phi_82_pred_5;
                    uint _3484 = _3483 + 1u;
                    if (_3484 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3477 = _3318;
                        _3478 = _3320;
                        _3479 = _3322;
                        _3480 = _3324;
                        _3481 = _3326;
                        _3482 = _3328;
                        _3483 = _3484;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _3324;
                frontier_phi_63_64_ladder_1 = _3328;
                frontier_phi_63_64_ladder_2 = _3326;
                frontier_phi_63_64_ladder_3 = _3322;
                frontier_phi_63_64_ladder_4 = _3320;
                frontier_phi_63_64_ladder_5 = _3318;
            }
            else
            {
                frontier_phi_63_64_ladder = _3202;
                frontier_phi_63_64_ladder_1 = _3206;
                frontier_phi_63_64_ladder_2 = _3204;
                frontier_phi_63_64_ladder_3 = _3200;
                frontier_phi_63_64_ladder_4 = _3198;
                frontier_phi_63_64_ladder_5 = _3196;
            }
            _3317 = frontier_phi_63_64_ladder_5;
            _3319 = frontier_phi_63_64_ladder_4;
            _3321 = frontier_phi_63_64_ladder_3;
            _3323 = frontier_phi_63_64_ladder;
            _3325 = frontier_phi_63_64_ladder_2;
            _3327 = frontier_phi_63_64_ladder_1;
        }
        float _3332 = isnan(1.0) ? _1095 : (isnan(_1095) ? 1.0 : min(_1095, 1.0));
        _3129 = (_3332 * _3323) + _2660;
        _3131 = (_3332 * _3325) + _2662;
        _3133 = (_3332 * _3327) + _2664;
        _3135 = ((_3317 * 0.039999999105930328369140625) * _3332) + _2983;
        _3137 = ((_3319 * 0.039999999105930328369140625) * _3332) + _2985;
        _3139 = ((_3321 * 0.039999999105930328369140625) * _3332) + _2987;
    }
    else
    {
        _3129 = _2660;
        _3131 = _2662;
        _3133 = _2664;
        _3135 = _2983;
        _3137 = _2985;
        _3139 = _2987;
    }
    float _5173 = isnan(0.0) ? _1080 : (isnan(_1080) ? 0.0 : max(_1080, 0.0));
    float _5184 = isnan(0.0) ? _1081 : (isnan(_1081) ? 0.0 : max(_1081, 0.0));
    float _5195 = isnan(0.0) ? _1082 : (isnan(_1082) ? 0.0 : max(_1082, 0.0));
    float _3156 = ((isnan(1.0) ? _5173 : (isnan(_5173) ? 1.0 : min(_5173, 1.0))) * (_3129 + ((isnan(0.0) ? _1850 : (isnan(_1850) ? 0.0 : max(_1850, 0.0))) * _1095))) + ((_3135 + ((isnan(0.0) ? _2141 : (isnan(_2141) ? 0.0 : max(_2141, 0.0))) * _1929)) * cbPerFrame._m0[3u].x);
    float _3157 = ((isnan(1.0) ? _5184 : (isnan(_5184) ? 1.0 : min(_5184, 1.0))) * (_3131 + ((isnan(0.0) ? _1853 : (isnan(_1853) ? 0.0 : max(_1853, 0.0))) * _1095))) + ((_3137 + ((isnan(0.0) ? _2144 : (isnan(_2144) ? 0.0 : max(_2144, 0.0))) * _1929)) * cbPerFrame._m0[3u].x);
    float _3158 = ((isnan(1.0) ? _5195 : (isnan(_5195) ? 1.0 : min(_5195, 1.0))) * (_3133 + ((isnan(0.0) ? _1856 : (isnan(_1856) ? 0.0 : max(_1856, 0.0))) * _1095))) + ((_3139 + ((isnan(0.0) ? _2147 : (isnan(_2147) ? 0.0 : max(_2147, 0.0))) * _1929)) * cbPerFrame._m0[3u].x);
    uint _3159 = _284 + 6u;
    float _3167 = _1032 / cbSceneParam._m0[86u].x;
    float _3168 = _1033 / cbSceneParam._m0[86u].y;
    vec4 _3182 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3167, _3168, (log2((isnan(cbSceneParam._m0[77u].w) ? _954 : (isnan(_954) ? cbSceneParam._m0[77u].w : min(_954, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3184 = _3182.x;
    float _3185 = _3182.y;
    float _3186 = _3182.z;
    float _3187 = _3182.w;
    float _3259;
    float _3261;
    float _3263;
    float _3265;
    if (_954 > cbSceneParam._m0[78u].w)
    {
        float _3221 = isnan(_954) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _954 : min(cbSceneParam._m0[80u].w, _954));
        float _3222 = _3221 / _954;
        float _3233 = _3222 * _1005;
        float _3234 = _1006 * _3222;
        float _3235 = (-0.0) - _3234;
        float _3237 = _3222 * _1007;
        float _3239 = (cbSceneParam._m0[77u].w * _3235) / _3221;
        float _3240 = _3239 + cbSceneParam._m0[79u].w;
        float _3241 = cbSceneParam._m0[79u].w - _3234;
        float _3247 = sqrt(((_3233 * _3233) + (_3234 * _3234)) + (_3237 * _3237));
        float _3250 = (1.0 - (cbSceneParam._m0[77u].w / _3221)) * _3247;
        float _3255 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3257 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3434;
        if (abs((_3235 - _3239) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3434 = ((((_3240 > 0.0) ? exp2(_3255 * _3240) : (2.0 - exp2(_3257 * _3240))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3250;
        }
        else
        {
            float _3378 = 1.0 / cbSceneParam._m0[80u].x;
            float _3379 = isnan(_3241) ? _3240 : (isnan(_3240) ? _3241 : max(_3240, _3241));
            float _3380 = isnan(_3241) ? _3240 : (isnan(_3240) ? _3241 : min(_3240, _3241));
            float _3389 = isnan(0.0) ? _3379 : (isnan(_3379) ? 0.0 : min(_3379, 0.0));
            float _3390 = isnan(0.0) ? _3380 : (isnan(_3380) ? 0.0 : min(_3380, 0.0));
            _3434 = ((abs(_3247 / _3235) * cbSceneParam._m0[80u].y) * ((((_3389 - _3390) * 2.0) - ((exp2(_3255 * (isnan(0.0) ? _3379 : (isnan(_3379) ? 0.0 : max(_3379, 0.0)))) - exp2(_3255 * (isnan(0.0) ? _3380 : (isnan(_3380) ? 0.0 : max(_3380, 0.0))))) * _3378)) - ((exp2(_3257 * _3389) - exp2(_3257 * _3390)) * _3378))) + (_3250 * cbSceneParam._m0[80u].z);
        }
        vec4 _3436 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3167, _3168, 1.0), 0.0);
        float _3445 = exp2((_3434 * (-1.44269502162933349609375)) * (1.0 - _3436.w));
        float _3446 = log2(_3445);
        float _3462 = log2(_3187);
        _3259 = (exp2(_3462 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3446 * cbSceneParam._m0[78u].x)) * _3436.x) / cbSceneParam._m0[78u].x)) + _3184;
        _3261 = (exp2(_3462 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3446 * cbSceneParam._m0[78u].y)) * _3436.y) / cbSceneParam._m0[78u].y)) + _3185;
        _3263 = (exp2(_3462 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3446 * cbSceneParam._m0[78u].z)) * _3436.z) / cbSceneParam._m0[78u].z)) + _3186;
        _3265 = _3445 * _3187;
    }
    else
    {
        _3259 = _3184;
        _3261 = _3185;
        _3263 = _3186;
        _3265 = _3187;
    }
    bool _3472;
    vec4 _3275;
    vec4 _3297;
    float _3299;
    float _3303;
    float _3304;
    float _3305;
    float _3306;
    bool _3316;
    for (;;)
    {
        _3275 = cbMatDynParam._m0[0u];
        float _3277 = roundEven(_3275.y);
        bool _3278 = _3277 == 3.0;
        float _3279 = log2(_3265);
        float _3286 = exp2(_3279 * cbSceneParam._m0[78u].x) * _3156;
        float _3287 = exp2(_3279 * cbSceneParam._m0[78u].y) * _3157;
        float _3288 = exp2(_3279 * cbSceneParam._m0[78u].z) * _3158;
        float _3295 = _1021 + (-0.5);
        _3297 = cbMtdParam._m0[1u];
        _3299 = _3297.y * _3295;
        float _3302 = (_3277 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3303 = _3302 * (_3278 ? _3286 : (_3286 + (cbSceneParam._m0[72u].w * _3259)));
        _3304 = _3302 * (_3278 ? _3287 : (_3287 + (cbSceneParam._m0[72u].w * _3261)));
        _3305 = _3302 * (_3278 ? _3288 : (_3288 + (cbSceneParam._m0[72u].w * _3263)));
        _3306 = _3295 * 0.999000012874603271484375;
        _3316 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3316)
        {
            if ((cbInstanceData._m0[_284 + 7u].x + _3306) < 0.5)
            {
                _3472 = true;
                break;
            }
        }
        uint _3413 = _1070 + uint(_3275.w);
        if ((cbInstanceData._m0[_3413].w < 1.0) && ((cbInstanceData._m0[_3413].w + _3306) < 0.5))
        {
            _3472 = true;
            break;
        }
        if ((_3299 + 1.0) < _3297.x)
        {
            _3472 = true;
            break;
        }
        _3472 = false;
        break;
    }
    float _3676;
    if (_3472)
    {
        discard_state = true;
        _3676 = 0.0;
    }
    else
    {
        _3676 = cbInstanceData._m0[_3159].w;
    }
    SV_Target.x = _3303;
    SV_Target.y = _3304;
    SV_Target.z = _3305;
    SV_Target.w = _3676;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_3159].w;
    discard_exit();
}


