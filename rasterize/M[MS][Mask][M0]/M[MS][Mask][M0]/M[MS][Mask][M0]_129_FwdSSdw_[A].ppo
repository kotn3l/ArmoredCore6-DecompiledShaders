#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_0;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 13) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_22;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_29;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_10;
layout(set = 0, binding = 20) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_6;
layout(set = 0, binding = 23) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_8;
layout(set = 0, binding = 24) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_9;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1653;
float _4033;
float _4034;
float _4035;
float _4036;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _246 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _247 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _248 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _254 = inversesqrt(dot(vec3(_246, _247, _248), vec3(_246, _247, _248)));
    float _255 = _254 * _246;
    float _256 = _254 * _247;
    float _257 = _254 * _248;
    float _261 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _262 = _261 * NORMAL.x;
    float _263 = _261 * NORMAL.y;
    float _264 = _261 * NORMAL.z;
    float _268 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _269 = _268 * TANGENT.x;
    float _270 = _268 * TANGENT.y;
    float _271 = _268 * TANGENT.z;
    float _280 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _282 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _283 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _4045 = isnan(0.0) ? _280 : (isnan(_280) ? 0.0 : max(_280, 0.0));
    float _4056 = isnan(0.0) ? _282 : (isnan(_282) ? 0.0 : max(_282, 0.0));
    float _4067 = isnan(0.0) ? _283 : (isnan(_283) ? 0.0 : max(_283, 0.0));
    uint _293 = uint(roundEven(NORMAL.w)) * 13u;
    uint _298 = _293 + 1u;
    uint _302 = _293 + 2u;
    float _311 = sqrt(((cbInstanceData._m0[_298].x * cbInstanceData._m0[_298].x) + (cbInstanceData._m0[_293].x * cbInstanceData._m0[_293].x)) + (cbInstanceData._m0[_302].x * cbInstanceData._m0[_302].x));
    float _312 = _311 * TEXCOORD.z;
    float _313 = _311 * TEXCOORD.w;
    vec4 _326 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _312) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _313) + cbTextureTilingScale._m0[13u].w));
    vec4 _349 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _375 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _380 = _375.x * cbMtdParam._m0[11u].x;
    float _381 = _375.y * cbMtdParam._m0[11u].y;
    float _382 = _375.z * cbMtdParam._m0[11u].z;
    vec4 _401 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _312) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _313) + cbTextureTilingScale._m0[5u].w));
    vec4 _420 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _458 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _460 = _458.x;
    float _472 = dot(vec4(_460, _458.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _489 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _420.x) * 2.0) - ((((_460 - _472) * cbMtdParam._m0[24u].z) + _472) * cbMtdParam._m0[23u].x))) + 1.0;
    float _4078 = isnan(0.0) ? _489 : (isnan(_489) ? 0.0 : max(_489, 0.0));
    float _490 = isnan(1.0) ? _4078 : (isnan(_4078) ? 1.0 : min(_4078, 1.0));
    float _497 = (_490 * ((_401.x * cbMtdParam._m0[12u].x) - _380)) + _380;
    float _498 = (_490 * ((_401.y * cbMtdParam._m0[12u].y) - _381)) + _381;
    float _499 = (_490 * ((_401.z * cbMtdParam._m0[12u].z) - _382)) + _382;
    vec4 _516 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _312) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _313) + cbTextureTilingScale._m0[3u].w));
    vec4 _536 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _538 = _536.x;
    float _548 = dot(vec4(_538, _536.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _562 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _420.y) * 2.0) - ((((_538 - _548) * cbMtdParam._m0[24u].z) + _548) * cbMtdParam._m0[20u].w))) + 1.0;
    float _4089 = isnan(0.0) ? _562 : (isnan(_562) ? 0.0 : max(_562, 0.0));
    float _563 = isnan(1.0) ? _4089 : (isnan(_4089) ? 1.0 : min(_4089, 1.0));
    float _570 = (_563 * ((_516.x * cbMtdParam._m0[13u].x) - _497)) + _497;
    float _571 = (_563 * ((_516.y * cbMtdParam._m0[13u].y) - _498)) + _498;
    float _572 = (_563 * ((_516.z * cbMtdParam._m0[13u].z) - _499)) + _499;
    vec4 _590 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_9, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[24u].x * _312) + cbTextureTilingScale._m0[24u].z, (cbTextureTilingScale._m0[24u].y * _313) + cbTextureTilingScale._m0[24u].w));
    vec4 _607 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[25u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _609 = _607.x;
    float _619 = dot(vec4(_609, _607.yzw), vec4(cbMtdParam._m0[30u].w, cbMtdParam._m0[31u].xy, 0.0));
    float _631 = ((cbMtdParam._m0[25u].x * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.z) - _420.z) * 2.0) - ((((_609 - _619) * cbMtdParam._m0[24u].z) + _619) * cbMtdParam._m0[20u].z))) + 1.0;
    float _4100 = isnan(0.0) ? _631 : (isnan(_631) ? 0.0 : max(_631, 0.0));
    float _632 = isnan(1.0) ? _4100 : (isnan(_4100) ? 1.0 : min(_4100, 1.0));
    float _642 = (_349.x * cbMtdParam._m0[9u].x) * ((_632 * ((_590.x * cbMtdParam._m0[14u].x) - _570)) + _570);
    float _643 = (_349.y * cbMtdParam._m0[9u].y) * ((_632 * ((_590.y * cbMtdParam._m0[14u].y) - _571)) + _571);
    float _644 = (_349.z * cbMtdParam._m0[9u].z) * ((_632 * ((_590.z * cbMtdParam._m0[14u].z) - _572)) + _572);
    float _648 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _326.x) * _642;
    float _651 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _326.y) * _643;
    float _654 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _326.z) * _644;
    float _662 = (((_642 - _648) * (isnan(1.0) ? _4045 : (isnan(_4045) ? 1.0 : min(_4045, 1.0)))) + _648) * 4.55000019073486328125;
    float _664 = (((_643 - _651) * (isnan(1.0) ? _4056 : (isnan(_4056) ? 1.0 : min(_4056, 1.0)))) + _651) * 4.55000019073486328125;
    float _666 = (((_644 - _654) * (isnan(1.0) ? _4067 : (isnan(_4067) ? 1.0 : min(_4067, 1.0)))) + _654) * 4.55000019073486328125;
    vec4 _683 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _312) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _313) + cbTextureTilingScale._m0[20u].w));
    vec4 _708 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _312) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _313) + cbTextureTilingScale._m0[4u].w));
    vec4 _725 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _727 = _725.x;
    float _728 = _725.y;
    float _729 = _725.z;
    float _736 = ((_708.x - _727) * _490) + _727;
    float _737 = ((_708.y - _728) * _490) + _728;
    float _738 = ((_708.z - _729) * _490) + _729;
    vec4 _750 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _312) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _313) + cbTextureTilingScale._m0[2u].w));
    float _761 = ((_750.x - _736) * _563) + _736;
    float _762 = ((_750.y - _737) * _563) + _737;
    float _763 = ((_750.z - _738) * _563) + _738;
    vec4 _775 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[23u].x * _312) + cbTextureTilingScale._m0[23u].z, (cbTextureTilingScale._m0[23u].y * _313) + cbTextureTilingScale._m0[23u].w));
    float _788 = ((_775.z - _763) * _632) + _763;
    float _791 = ((((_775.x - _761) * _632) + _761) * 2.0) + (-1.0);
    float _792 = ((((_775.y - _762) * _632) + _762) * 2.0) + (-1.0);
    float _793 = dot(vec2(_791, _792), vec2(_791, _792));
    float _4111 = isnan(0.0) ? _793 : (isnan(_793) ? 0.0 : max(_793, 0.0));
    float _798 = sqrt(1.0 - (isnan(1.0) ? _4111 : (isnan(_4111) ? 1.0 : min(_4111, 1.0))));
    vec4 _816 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _828 = (_791 + ((((_683.x * 2.0) + (-1.0)) * TEXCOORD_11.x) * cbMtdParam._m0[20u].x)) + (((_816.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _829 = (_792 + ((((_683.y * 2.0) + (-1.0)) * TEXCOORD_11.y) * cbMtdParam._m0[20u].x)) + (((_816.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _832 = fma(_798, _262, fma(_829, _269, _828 * _255));
    float _835 = fma(_798, _263, fma(_829, _270, _828 * _256));
    float _838 = fma(_798, _264, fma(_829, _271, _828 * _257));
    float _842 = inversesqrt(dot(vec3(_832, _835, _838), vec3(_832, _835, _838)));
    vec4 _869 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _312) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _313) + cbTextureTilingScale._m0[11u].w));
    float _871 = _869.x;
    float _872 = 1.0 - _871;
    float _878 = (cbMtdParam._m0[19u].x + dot(vec4(_842 * _832, _842 * _835, _842 * _838, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_871 - _872) * cbMtdParam._m0[24u].w) + _872) * cbMtdParam._m0[21u].z);
    float _4122 = isnan(0.0) ? _878 : (isnan(_878) ? 0.0 : max(_878, 0.0));
    float _879 = isnan(1.0) ? _4122 : (isnan(_4122) ? 1.0 : min(_4122, 1.0));
    float _881 = (-0.0) - cbMtdParam._m0[24u].x;
    float _883 = isnan(0.0) ? _881 : (isnan(_881) ? 0.0 : max(_881, 0.0));
    float _884 = isnan(1.0) ? _883 : (isnan(_883) ? 1.0 : min(_883, 1.0));
    float _891 = _879 - ((_879 * TEXCOORD_8.x) * _884);
    float _892 = _879 - ((_879 * TEXCOORD_8.y) * _884);
    float _893 = _879 - ((_879 * TEXCOORD_8.z) * _884);
    float _900 = (_891 * (cbMtdParam._m0[17u].x - _662)) + _662;
    float _901 = (_892 * (cbMtdParam._m0[17u].y - _664)) + _664;
    float _902 = (_893 * (cbMtdParam._m0[17u].z - _666)) + _666;
    float _917 = sqrt(((cbInstanceData._m0[_298].x * cbInstanceData._m0[_298].x) + (cbInstanceData._m0[_293].x * cbInstanceData._m0[_293].x)) + (cbInstanceData._m0[_302].x * cbInstanceData._m0[_302].x));
    float _918 = _917 * TEXCOORD.z;
    float _919 = _917 * TEXCOORD.w;
    vec4 _931 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _918) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _919) + cbTextureTilingScale._m0[19u].w));
    float _933 = _931.x;
    float _934 = 1.0 - _933;
    float _962 = (TEXCOORD_8.x - ((cbMtdParam._m0[22u].w * (1.0 - TEXCOORD_8.x)) * ((((_933 - _934) * cbMtdParam._m0[24u].y) + _934) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _4143 = isnan(0.0) ? _962 : (isnan(_962) ? 0.0 : max(_962, 0.0));
    float _963 = isnan(1.0) ? _4143 : (isnan(_4143) ? 1.0 : min(_4143, 1.0));
    float _971 = ((((cbMtdParam._m0[10u].x - _900) * TEXCOORD_8.x) * cbMtdParam._m0[23u].w) * _963) + _900;
    float _972 = ((((cbMtdParam._m0[10u].y - _901) * TEXCOORD_8.y) * cbMtdParam._m0[23u].w) * _963) + _901;
    float _973 = (((cbMtdParam._m0[23u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _902)) * _963) + _902;
    float _978 = (((_683.z - _788) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _788;
    float _982 = ((_816.z - _978) * cbMtdParam._m0[19u].w) + _978;
    vec4 _996 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _312) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _313) + cbTextureTilingScale._m0[15u].w));
    float _1003 = (_996.x * 2.0) + (-1.0);
    float _1004 = (_996.y * 2.0) + (-1.0);
    float _1005 = dot(vec2(_1003, _1004), vec2(_1003, _1004));
    float _4154 = isnan(0.0) ? _1005 : (isnan(_1005) ? 0.0 : max(_1005, 0.0));
    float _1013 = ((_996.z - _982) * _891) + _982;
    float _1016 = ((cbMtdParam._m0[23u].y - _1013) * _963) + _1013;
    vec4 _1037 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _918) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _919) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _1043 = (_1037.x * 2.0) + (-1.0);
    float _1044 = (_1037.y * 2.0) + (-1.0);
    float _1045 = dot(vec2(_1043, _1044), vec2(_1043, _1044));
    float _4165 = isnan(0.0) ? _1045 : (isnan(_1045) ? 0.0 : max(_1045, 0.0));
    float _1060 = ((sqrt(1.0 - (isnan(1.0) ? _4154 : (isnan(_4154) ? 1.0 : min(_4154, 1.0)))) - _798) * _893) + _798;
    float _1063 = (((_1003 - _828) * _891) + _828) + (cbMtdParam._m0[21u].x * _828);
    float _1064 = (((_1004 - _829) * _892) + _829) + (cbMtdParam._m0[21u].x * _829);
    float _1075 = (((_1043 - _1063) + (_1063 * cbMtdParam._m0[22u].z)) * _963) + _1063;
    float _1076 = (((_1044 - _1064) + (_1064 * cbMtdParam._m0[22u].z)) * _963) + _1064;
    float _1077 = (_963 * (sqrt(1.0 - (isnan(1.0) ? _4165 : (isnan(_4165) ? 1.0 : min(_4165, 1.0)))) - _1060)) + _1060;
    float _1079 = cbMtdParam._m0[22u].x + _816.w;
    float _1082 = fma(_1077, _262, fma(_1076, _269, _1075 * _255));
    float _1085 = fma(_1077, _263, fma(_1076, _270, _1075 * _256));
    float _1088 = fma(_1077, _264, fma(_1076, _271, _1075 * _257));
    float _1092 = inversesqrt(dot(vec3(_1082, _1085, _1088), vec3(_1082, _1085, _1088)));
    float _1093 = _1092 * _1082;
    float _1094 = _1092 * _1085;
    float _1095 = _1092 * _1088;
    float _4176 = isnan(0.0) ? _1016 : (isnan(_1016) ? 0.0 : max(_1016, 0.0));
    float _1096 = isnan(1.0) ? _4176 : (isnan(_4176) ? 1.0 : min(_4176, 1.0));
    float _4187 = isnan(0.0) ? _1079 : (isnan(_1079) ? 0.0 : max(_1079, 0.0));
    float _4198 = isnan(0.0) ? _971 : (isnan(_971) ? 0.0 : max(_971, 0.0));
    float _4209 = isnan(0.0) ? _972 : (isnan(_972) ? 0.0 : max(_972, 0.0));
    float _4220 = isnan(0.0) ? _973 : (isnan(_973) ? 0.0 : max(_973, 0.0));
    float _1114 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _1154 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _1164 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _1154);
    float _1165 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _1154);
    float _1166 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _1154);
    float _1170 = inversesqrt(dot(vec3(_1164, _1165, _1166), vec3(_1164, _1165, _1166)));
    float _1171 = _1164 * _1170;
    float _1172 = _1165 * _1170;
    float _1173 = _1166 * _1170;
    vec4 _1178 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _1180 = _1178.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1334 = sqrt(((_1164 * _1164) + (_1165 * _1165)) + (_1166 * _1166));
        float _1340 = (cbMatDynParam._m0[5u].x * _1334) + cbMatDynParam._m0[5u].y;
        float _4231 = isnan(0.0) ? _1340 : (isnan(_1340) ? 0.0 : max(_1340, 0.0));
        float _1341 = isnan(1.0) ? _4231 : (isnan(_4231) ? 1.0 : min(_4231, 1.0));
        float _1345 = (cbMatDynParam._m0[5u].z * _1334) + cbMatDynParam._m0[5u].w;
        float _4242 = isnan(0.0) ? _1345 : (isnan(_1345) ? 0.0 : max(_1345, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4242 : (isnan(_4242) ? 1.0 : min(_4242, 1.0))) - _1341)) + _1341) < ((_1180 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _1191 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1192 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1210 = fma(_1095, cbSceneParam._m0[5u].z, fma(_1094, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _1093));
    float _1213 = fma(_1095, cbSceneParam._m0[6u].z, fma(_1094, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _1093));
    float _1216 = fma(_1095, cbSceneParam._m0[7u].z, fma(_1094, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _1093));
    uint _1229 = _293 + 9u;
    uint _1230 = _1229 + uint(cbMatDynParam._m0[0u].w);
    float _1236 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4198 : (isnan(_4198) ? 1.0 : min(_4198, 1.0)))) * cbInstanceData._m0[_1230].x;
    float _1237 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4209 : (isnan(_4209) ? 1.0 : min(_4209, 1.0)))) * cbInstanceData._m0[_1230].y;
    float _1238 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4220 : (isnan(_4220) ? 1.0 : min(_4220, 1.0)))) * cbInstanceData._m0[_1230].z;
    float _4253 = isnan(0.0) ? _1236 : (isnan(_1236) ? 0.0 : max(_1236, 0.0));
    float _1239 = isnan(1.0) ? _4253 : (isnan(_4253) ? 1.0 : min(_4253, 1.0));
    float _4264 = isnan(0.0) ? _1237 : (isnan(_1237) ? 0.0 : max(_1237, 0.0));
    float _1240 = isnan(1.0) ? _4264 : (isnan(_4264) ? 1.0 : min(_4264, 1.0));
    float _4275 = isnan(0.0) ? _1238 : (isnan(_1238) ? 0.0 : max(_1238, 0.0));
    float _1241 = isnan(1.0) ? _4275 : (isnan(_4275) ? 1.0 : min(_4275, 1.0));
    vec4 _1250 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1191, cbSceneParam._m0[86u].y * _1192));
    float _1254 = ((isnan(1.0) ? _4187 : (isnan(_4187) ? 1.0 : min(_4187, 1.0))) * TEXCOORD_5.w) * _1250.x;
    float _1255 = dot(vec3(_1093, _1094, _1095), vec3(_1171, _1172, _1173));
    float _1258 = _1255 * 2.0;
    float _1262 = (_1258 * _1093) - _1171;
    float _1263 = (_1258 * _1094) - _1172;
    float _1264 = (_1258 * _1095) - _1173;
    float _1268 = abs(dot(vec3(_1171, _1172, _1173), vec3(_1093, _1094, _1095)));
    float _4286 = isnan(0.0) ? _1268 : (isnan(_1268) ? 0.0 : max(_1268, 0.0));
    float _1270 = sqrt(_1096);
    float _1283 = exp2((_1270 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4286 : (isnan(_4286) ? 1.0 : min(_4286, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1270 * 3.0));
    float _1315 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1319 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1323 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1652;
    float _1654;
    float _1655;
    float _1656;
    float _1657;
    float _1658;
    float _1659;
    float _1660;
    float _1661;
    float _1662;
    float _1663;
    float _1664;
    float _1665;
    float _1666;
    float _1667;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1377 = fma(_1323, cbModelParam._m0[26u].z, fma(_1319, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1315));
        float _1381 = fma(_1323, cbModelParam._m0[27u].z, fma(_1319, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1315));
        float _1385 = fma(_1323, cbModelParam._m0[28u].z, fma(_1319, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1315));
        float _1410 = _1315 + _1093;
        float _1411 = _1319 + _1094;
        float _1412 = _1323 + _1095;
        float _1422 = fma(_1412, cbModelParam._m0[26u].z, fma(_1411, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1410)) - _1377;
        float _1423 = fma(_1412, cbModelParam._m0[27u].z, fma(_1411, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1410)) - _1381;
        float _1424 = fma(_1412, cbModelParam._m0[28u].z, fma(_1411, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1410)) - _1385;
        float _1428 = inversesqrt(dot(vec3(_1422, _1423, _1424), vec3(_1422, _1423, _1424)));
        float _1441 = ((_1428 * _1422) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1377 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1442 = ((_1428 * _1423) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1381 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1443 = ((_1428 * _1424) / cbModelParam._m0[34u].z) + ((((((_1385 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1446 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1441, _1442, _1443), 0.0);
        vec4 _1453 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1441, _1442, _1443), 0.0);
        vec4 _1460 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1441, _1442, _1443), 0.0);
        vec4 _1467 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1441, _1442, _1443), 0.0);
        float _1480 = exp2((_1446.w + (-0.5)) * 20.0) * 2.0;
        float _1481 = _1480 * (_1446.x + (-0.5));
        float _1482 = _1480 * (_1446.y + (-0.5));
        float _1483 = _1480 * (_1446.z + (-0.5));
        float _1490 = exp2((_1453.w + (-0.5)) * 20.0) * 2.0;
        float _1491 = _1490 * (_1453.x + (-0.5));
        float _1492 = _1490 * (_1453.y + (-0.5));
        float _1493 = _1490 * (_1453.z + (-0.5));
        float _1500 = exp2((_1460.w + (-0.5)) * 20.0) * 2.0;
        float _1501 = _1500 * (_1460.x + (-0.5));
        float _1502 = _1500 * (_1460.y + (-0.5));
        float _1503 = _1500 * (_1460.z + (-0.5));
        float _1510 = exp2((_1467.w + (-0.5)) * 20.0) * 2.0;
        float _1511 = _1510 * (_1467.x + (-0.5));
        float _1512 = _1510 * (_1467.y + (-0.5));
        float _1513 = _1510 * (_1467.z + (-0.5));
        float _1514 = isnan(0.0) ? _1511 : (isnan(_1511) ? 0.0 : max(_1511, 0.0));
        float _1515 = isnan(0.0) ? _1512 : (isnan(_1512) ? 0.0 : max(_1512, 0.0));
        float _1516 = isnan(0.0) ? _1513 : (isnan(_1513) ? 0.0 : max(_1513, 0.0));
        float _1517 = _1481 * 0.5;
        float _1518 = _1491 * 0.5;
        float _1519 = _1501 * 0.5;
        float _1520 = dot(vec3(_1517, _1518, _1519), vec3(_1517, _1518, _1519));
        float _1525 = (_1520 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1520);
        float _1534 = (dot(vec3(_1093, _1094, _1095), vec3(_1525 * _1517, _1525 * _1518, _1525 * _1519)) + 1.0) * 0.5;
        float _4312 = isnan(0.0) ? _1534 : (isnan(_1534) ? 0.0 : max(_1534, 0.0));
        float _1544 = sqrt(((_1518 * _1518) + (_1517 * _1517)) + (_1519 * _1519)) / (_1514 + 9.9999997473787516355514526367188e-06);
        float _4323 = isnan(0.0) ? _1544 : (isnan(_1544) ? 0.0 : max(_1544, 0.0));
        float _1545 = isnan(1.0) ? _4323 : (isnan(_4323) ? 1.0 : min(_4323, 1.0));
        float _1546 = _1545 * 2.0;
        float _1550 = (1.0 - _1545) / (_1545 + 1.0);
        float _4334 = isnan(0.0) ? _1550 : (isnan(_1550) ? 0.0 : max(_1550, 0.0));
        float _1551 = isnan(1.0) ? _4334 : (isnan(_4334) ? 1.0 : min(_4334, 1.0));
        float _1560 = ((((1.0 - _1551) * (_1546 + 2.0)) * exp2(log2(isnan(1.0) ? _4312 : (isnan(_4312) ? 1.0 : min(_4312, 1.0))) * (_1546 + 1.0))) + _1551) * _1514;
        float _1561 = _1482 * 0.5;
        float _1562 = _1492 * 0.5;
        float _1563 = _1502 * 0.5;
        float _1564 = dot(vec3(_1561, _1562, _1563), vec3(_1561, _1562, _1563));
        float _1569 = (_1564 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1564);
        float _1577 = (dot(vec3(_1093, _1094, _1095), vec3(_1569 * _1561, _1569 * _1562, _1569 * _1563)) + 1.0) * 0.5;
        float _4345 = isnan(0.0) ? _1577 : (isnan(_1577) ? 0.0 : max(_1577, 0.0));
        float _1586 = sqrt(((_1562 * _1562) + (_1561 * _1561)) + (_1563 * _1563)) / (_1515 + 9.9999997473787516355514526367188e-06);
        float _4356 = isnan(0.0) ? _1586 : (isnan(_1586) ? 0.0 : max(_1586, 0.0));
        float _1587 = isnan(1.0) ? _4356 : (isnan(_4356) ? 1.0 : min(_4356, 1.0));
        float _1588 = _1587 * 2.0;
        float _1592 = (1.0 - _1587) / (_1587 + 1.0);
        float _4367 = isnan(0.0) ? _1592 : (isnan(_1592) ? 0.0 : max(_1592, 0.0));
        float _1593 = isnan(1.0) ? _4367 : (isnan(_4367) ? 1.0 : min(_4367, 1.0));
        float _1602 = ((((1.0 - _1593) * (_1588 + 2.0)) * exp2(log2(isnan(1.0) ? _4345 : (isnan(_4345) ? 1.0 : min(_4345, 1.0))) * (_1588 + 1.0))) + _1593) * _1515;
        float _1603 = _1483 * 0.5;
        float _1604 = _1493 * 0.5;
        float _1605 = _1503 * 0.5;
        float _1606 = dot(vec3(_1603, _1604, _1605), vec3(_1603, _1604, _1605));
        float _1611 = (_1606 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1606);
        float _1619 = (dot(vec3(_1093, _1094, _1095), vec3(_1611 * _1603, _1611 * _1604, _1611 * _1605)) + 1.0) * 0.5;
        float _4378 = isnan(0.0) ? _1619 : (isnan(_1619) ? 0.0 : max(_1619, 0.0));
        float _1628 = sqrt(((_1604 * _1604) + (_1603 * _1603)) + (_1605 * _1605)) / (_1516 + 9.9999997473787516355514526367188e-06);
        float _4389 = isnan(0.0) ? _1628 : (isnan(_1628) ? 0.0 : max(_1628, 0.0));
        float _1629 = isnan(1.0) ? _4389 : (isnan(_4389) ? 1.0 : min(_4389, 1.0));
        float _1630 = _1629 * 2.0;
        float _1634 = (1.0 - _1629) / (_1629 + 1.0);
        float _4400 = isnan(0.0) ? _1634 : (isnan(_1634) ? 0.0 : max(_1634, 0.0));
        float _1635 = isnan(1.0) ? _4400 : (isnan(_4400) ? 1.0 : min(_4400, 1.0));
        float _1644 = ((((1.0 - _1635) * (_1630 + 2.0)) * exp2(log2(isnan(1.0) ? _4378 : (isnan(_4378) ? 1.0 : min(_4378, 1.0))) * (_1630 + 1.0))) + _1635) * _1516;
        _1652 = _1483;
        _1654 = _1482;
        _1655 = _1481;
        _1656 = _1493;
        _1657 = _1492;
        _1658 = _1491;
        _1659 = _1503;
        _1660 = _1502;
        _1661 = _1501;
        _1662 = _1516;
        _1663 = _1515;
        _1664 = _1514;
        _1665 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1560 : (isnan(_1560) ? 0.0 : max(_1560, 0.0)));
        _1666 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1602 : (isnan(_1602) ? 0.0 : max(_1602, 0.0)));
        _1667 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1644 : (isnan(_1644) ? 0.0 : max(_1644, 0.0)));
    }
    else
    {
        _1652 = _1653;
        _1654 = _1653;
        _1655 = _1653;
        _1656 = _1653;
        _1657 = _1653;
        _1658 = _1653;
        _1659 = _1653;
        _1660 = _1653;
        _1661 = _1653;
        _1662 = _1653;
        _1663 = _1653;
        _1664 = _1653;
        _1665 = 0.0;
        _1666 = 0.0;
        _1667 = 0.0;
    }
    float _1962;
    float _1963;
    float _1964;
    float _1965;
    float _1966;
    float _1967;
    float _1968;
    float _1969;
    float _1970;
    float _1971;
    float _1972;
    float _1973;
    float _1974;
    float _1975;
    float _1976;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1693 = fma(_1323, cbModelParam._m0[30u].z, fma(_1319, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1315));
        float _1697 = fma(_1323, cbModelParam._m0[31u].z, fma(_1319, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1315));
        float _1701 = fma(_1323, cbModelParam._m0[32u].z, fma(_1319, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1315));
        float _1724 = _1315 + _1093;
        float _1725 = _1319 + _1094;
        float _1726 = _1323 + _1095;
        float _1736 = fma(_1726, cbModelParam._m0[30u].z, fma(_1725, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1724)) - _1693;
        float _1737 = fma(_1726, cbModelParam._m0[31u].z, fma(_1725, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1724)) - _1697;
        float _1738 = fma(_1726, cbModelParam._m0[32u].z, fma(_1725, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1724)) - _1701;
        float _1742 = inversesqrt(dot(vec3(_1736, _1737, _1738), vec3(_1736, _1737, _1738)));
        float _1755 = ((_1742 * _1736) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1693 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1756 = ((_1742 * _1737) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1697 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1757 = ((_1742 * _1738) / cbModelParam._m0[35u].z) + ((((((_1701 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1759 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1755, _1756, _1757), 0.0);
        vec4 _1766 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1755, _1756, _1757), 0.0);
        vec4 _1773 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1755, _1756, _1757), 0.0);
        vec4 _1780 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1755, _1756, _1757), 0.0);
        float _1792 = exp2((_1759.w + (-0.5)) * 20.0) * 2.0;
        float _1793 = _1792 * (_1759.x + (-0.5));
        float _1794 = _1792 * (_1759.y + (-0.5));
        float _1795 = _1792 * (_1759.z + (-0.5));
        float _1802 = exp2((_1766.w + (-0.5)) * 20.0) * 2.0;
        float _1803 = _1802 * (_1766.x + (-0.5));
        float _1804 = _1802 * (_1766.y + (-0.5));
        float _1805 = _1802 * (_1766.z + (-0.5));
        float _1812 = exp2((_1773.w + (-0.5)) * 20.0) * 2.0;
        float _1813 = _1812 * (_1773.x + (-0.5));
        float _1814 = _1812 * (_1773.y + (-0.5));
        float _1815 = _1812 * (_1773.z + (-0.5));
        float _1822 = exp2((_1780.w + (-0.5)) * 20.0) * 2.0;
        float _1823 = _1822 * (_1780.x + (-0.5));
        float _1824 = _1822 * (_1780.y + (-0.5));
        float _1825 = _1822 * (_1780.z + (-0.5));
        float _1826 = isnan(0.0) ? _1823 : (isnan(_1823) ? 0.0 : max(_1823, 0.0));
        float _1827 = isnan(0.0) ? _1824 : (isnan(_1824) ? 0.0 : max(_1824, 0.0));
        float _1828 = isnan(0.0) ? _1825 : (isnan(_1825) ? 0.0 : max(_1825, 0.0));
        float _1829 = _1793 * 0.5;
        float _1830 = _1803 * 0.5;
        float _1831 = _1813 * 0.5;
        float _1832 = dot(vec3(_1829, _1830, _1831), vec3(_1829, _1830, _1831));
        float _1837 = (_1832 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1832);
        float _1845 = (dot(vec3(_1093, _1094, _1095), vec3(_1837 * _1829, _1837 * _1830, _1837 * _1831)) + 1.0) * 0.5;
        float _4441 = isnan(0.0) ? _1845 : (isnan(_1845) ? 0.0 : max(_1845, 0.0));
        float _1854 = sqrt(((_1830 * _1830) + (_1829 * _1829)) + (_1831 * _1831)) / (_1826 + 9.9999997473787516355514526367188e-06);
        float _4452 = isnan(0.0) ? _1854 : (isnan(_1854) ? 0.0 : max(_1854, 0.0));
        float _1855 = isnan(1.0) ? _4452 : (isnan(_4452) ? 1.0 : min(_4452, 1.0));
        float _1856 = _1855 * 2.0;
        float _1860 = (1.0 - _1855) / (_1855 + 1.0);
        float _4463 = isnan(0.0) ? _1860 : (isnan(_1860) ? 0.0 : max(_1860, 0.0));
        float _1861 = isnan(1.0) ? _4463 : (isnan(_4463) ? 1.0 : min(_4463, 1.0));
        float _1870 = ((((1.0 - _1861) * (_1856 + 2.0)) * exp2(log2(isnan(1.0) ? _4441 : (isnan(_4441) ? 1.0 : min(_4441, 1.0))) * (_1856 + 1.0))) + _1861) * _1826;
        float _1871 = _1794 * 0.5;
        float _1872 = _1804 * 0.5;
        float _1873 = _1814 * 0.5;
        float _1874 = dot(vec3(_1871, _1872, _1873), vec3(_1871, _1872, _1873));
        float _1879 = (_1874 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1874);
        float _1887 = (dot(vec3(_1093, _1094, _1095), vec3(_1879 * _1871, _1879 * _1872, _1879 * _1873)) + 1.0) * 0.5;
        float _4474 = isnan(0.0) ? _1887 : (isnan(_1887) ? 0.0 : max(_1887, 0.0));
        float _1896 = sqrt(((_1872 * _1872) + (_1871 * _1871)) + (_1873 * _1873)) / (_1827 + 9.9999997473787516355514526367188e-06);
        float _4485 = isnan(0.0) ? _1896 : (isnan(_1896) ? 0.0 : max(_1896, 0.0));
        float _1897 = isnan(1.0) ? _4485 : (isnan(_4485) ? 1.0 : min(_4485, 1.0));
        float _1898 = _1897 * 2.0;
        float _1902 = (1.0 - _1897) / (_1897 + 1.0);
        float _4496 = isnan(0.0) ? _1902 : (isnan(_1902) ? 0.0 : max(_1902, 0.0));
        float _1903 = isnan(1.0) ? _4496 : (isnan(_4496) ? 1.0 : min(_4496, 1.0));
        float _1912 = ((((1.0 - _1903) * (_1898 + 2.0)) * exp2(log2(isnan(1.0) ? _4474 : (isnan(_4474) ? 1.0 : min(_4474, 1.0))) * (_1898 + 1.0))) + _1903) * _1827;
        float _1913 = _1795 * 0.5;
        float _1914 = _1805 * 0.5;
        float _1915 = _1815 * 0.5;
        float _1916 = dot(vec3(_1913, _1914, _1915), vec3(_1913, _1914, _1915));
        float _1921 = (_1916 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1916);
        float _1929 = (dot(vec3(_1093, _1094, _1095), vec3(_1921 * _1913, _1921 * _1914, _1921 * _1915)) + 1.0) * 0.5;
        float _4507 = isnan(0.0) ? _1929 : (isnan(_1929) ? 0.0 : max(_1929, 0.0));
        float _1938 = sqrt(((_1914 * _1914) + (_1913 * _1913)) + (_1915 * _1915)) / (_1828 + 9.9999997473787516355514526367188e-06);
        float _4518 = isnan(0.0) ? _1938 : (isnan(_1938) ? 0.0 : max(_1938, 0.0));
        float _1939 = isnan(1.0) ? _4518 : (isnan(_4518) ? 1.0 : min(_4518, 1.0));
        float _1940 = _1939 * 2.0;
        float _1944 = (1.0 - _1939) / (_1939 + 1.0);
        float _4529 = isnan(0.0) ? _1944 : (isnan(_1944) ? 0.0 : max(_1944, 0.0));
        float _1945 = isnan(1.0) ? _4529 : (isnan(_4529) ? 1.0 : min(_4529, 1.0));
        float _1954 = ((((1.0 - _1945) * (_1940 + 2.0)) * exp2(log2(isnan(1.0) ? _4507 : (isnan(_4507) ? 1.0 : min(_4507, 1.0))) * (_1940 + 1.0))) + _1945) * _1828;
        _1962 = _1795;
        _1963 = _1794;
        _1964 = _1793;
        _1965 = _1805;
        _1966 = _1804;
        _1967 = _1803;
        _1968 = _1815;
        _1969 = _1814;
        _1970 = _1813;
        _1971 = _1828;
        _1972 = _1827;
        _1973 = _1826;
        _1974 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1870 : (isnan(_1870) ? 0.0 : max(_1870, 0.0)));
        _1975 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1912 : (isnan(_1912) ? 0.0 : max(_1912, 0.0)));
        _1976 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1954 : (isnan(_1954) ? 0.0 : max(_1954, 0.0)));
    }
    else
    {
        _1962 = _1653;
        _1963 = _1653;
        _1964 = _1653;
        _1965 = _1653;
        _1966 = _1653;
        _1967 = _1653;
        _1968 = _1653;
        _1969 = _1653;
        _1970 = _1653;
        _1971 = _1653;
        _1972 = _1653;
        _1973 = _1653;
        _1974 = 0.0;
        _1975 = 0.0;
        _1976 = 0.0;
    }
    float _1986 = (cbModelParam._m0[1u].x * (_1974 - _1665)) + _1665;
    float _1987 = (cbModelParam._m0[1u].x * (_1975 - _1666)) + _1666;
    float _1988 = (cbModelParam._m0[1u].x * (_1976 - _1667)) + _1667;
    float _2009 = fma(_1988, cbSceneParam._m0[89u].z, fma(_1987, cbSceneParam._m0[89u].y, _1986 * cbSceneParam._m0[89u].x));
    float _2012 = fma(_1988, cbSceneParam._m0[90u].z, fma(_1987, cbSceneParam._m0[90u].y, _1986 * cbSceneParam._m0[90u].x));
    float _2015 = fma(_1988, cbSceneParam._m0[91u].z, fma(_1987, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1986));
    float _2030 = _1262 * 0.5;
    float _2031 = _1263 * 0.5;
    float _2032 = _1264 * 0.5;
    float _2033 = dot(vec4(_2030, _2031, _2032, 1.0), vec4(_1964, _1967, _1970, _1973));
    float _2036 = dot(vec4(_2030, _2031, _2032, 1.0), vec4(_1963, _1966, _1969, _1972));
    float _2039 = dot(vec4(_2030, _2031, _2032, 1.0), vec4(_1962, _1965, _1968, _1971));
    float _2073;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _2046 = dot(vec4(_2030, _2031, _2032, 1.0), vec4(_1652, _1656, _1659, _1662));
        float _2050 = dot(vec4(_2030, _2031, _2032, 1.0), vec4(_1654, _1657, _1660, _1663));
        float _2054 = dot(vec4(_2030, _2031, _2032, 1.0), vec4(_1655, _1658, _1661, _1664));
        float _2061 = dot(vec4(cbModelParam._m0[39u]), vec4(_2030, _2031, _2032, 1.0));
        _2073 = dot(vec3(isnan(0.0) ? _2054 : (isnan(_2054) ? 0.0 : max(_2054, 0.0)), isnan(0.0) ? _2050 : (isnan(_2050) ? 0.0 : max(_2050, 0.0)), isnan(0.0) ? _2046 : (isnan(_2046) ? 0.0 : max(_2046, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_2061) ? 0.0 : (isnan(0.0) ? _2061 : max(0.0, _2061))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _2073 = 1.0;
    }
    float _2084;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _2075 = dot(vec4(cbModelParam._m0[40u]), vec4(_2030, _2031, _2032, 1.0));
        _2084 = dot(vec3(isnan(0.0) ? _2033 : (isnan(_2033) ? 0.0 : max(_2033, 0.0)), isnan(0.0) ? _2036 : (isnan(_2036) ? 0.0 : max(_2036, 0.0)), isnan(0.0) ? _2039 : (isnan(_2039) ? 0.0 : max(_2039, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_2075) ? 0.0 : (isnan(0.0) ? _2075 : max(0.0, _2075))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _2084 = 1.0;
    }
    float _2088 = (_2084 * cbModelParam._m0[1u].x) + (_2073 * (1.0 - cbModelParam._m0[1u].x));
    float _2098 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _1096);
    float _2099 = isnan(_2098) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _2098 : min(cbModelParam._m0[25u].z, _2098));
    float _2179;
    float _2181;
    float _2183;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _2146 = fma(_1323, cbModelParam._m0[13u].z, fma(_1319, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1315)) + cbModelParam._m0[13u].w;
        float _2150 = fma(_1323, cbModelParam._m0[14u].z, fma(_1319, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1315)) + cbModelParam._m0[14u].w;
        float _2154 = fma(_1323, cbModelParam._m0[15u].z, fma(_1319, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1315)) + cbModelParam._m0[15u].w;
        float _2157 = fma(_1264, cbModelParam._m0[13u].z, fma(_1263, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1262));
        float _2160 = fma(_1264, cbModelParam._m0[14u].z, fma(_1263, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1262));
        float _2163 = fma(_1264, cbModelParam._m0[15u].z, fma(_1263, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1262));
        float _2191;
        if (_2157 > 0.0)
        {
            _2191 = abs((1.0 - _2146) / _2157);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_2157 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_2146 + 1.0) / _2157);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _2191 = frontier_phi_17_15_ladder;
        }
        float _2413;
        if (_2160 > 0.0)
        {
            _2413 = abs((1.0 - _2150) / _2160);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_2160 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_2150 + 1.0) / _2160);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2413 = frontier_phi_26_22_ladder;
        }
        float _2659;
        if (_2163 > 0.0)
        {
            _2659 = abs((1.0 - _2154) / _2163);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_2163 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_2154 + 1.0) / _2163);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2659 = frontier_phi_38_33_ladder;
        }
        float _2661 = isnan(_2413) ? _2191 : (isnan(_2191) ? _2413 : min(_2191, _2413));
        float _2662 = isnan(_2659) ? _2661 : (isnan(_2661) ? _2659 : min(_2661, _2659));
        float _2666 = (_2662 * _2157) + _2146;
        float _2667 = (_2662 * _2160) + _2150;
        float _2668 = (_2662 * _2163) + _2154;
        float _2669 = _2662 * 9.9999997473787516355514526367188e-05;
        float _2671 = (-1.0) - _2669;
        float _2673 = _2669 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2668 > _2673) || ((_2668 < _2671) || ((_2667 > _2673) || ((_2667 < _2671) || ((_2666 < _2671) || (_2666 > _2673))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2792 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2668, cbModelParam._m0[9u].z, fma(_2667, cbModelParam._m0[9u].y, _2666 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2668, cbModelParam._m0[10u].z, fma(_2667, cbModelParam._m0[10u].y, _2666 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2668, cbModelParam._m0[11u].z, fma(_2667, cbModelParam._m0[11u].y, _2666 * cbModelParam._m0[11u].x))), _2099);
            frontier_phi_16_38_ladder = _2792.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2792.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2792.x * cbModelParam._m0[1u].y;
        }
        _2179 = frontier_phi_16_38_ladder_2;
        _2181 = frontier_phi_16_38_ladder_1;
        _2183 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _2167 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1262, _1263, _1264), _2099);
        _2179 = _2167.x * cbModelParam._m0[1u].y;
        _2181 = _2167.y * cbModelParam._m0[1u].y;
        _2183 = _2167.z * cbModelParam._m0[1u].y;
    }
    float _2187 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _1096);
    float _2188 = isnan(_2187) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2187 : min(cbModelParam._m0[25u].w, _2187));
    float _2278;
    float _2280;
    float _2282;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2242 = fma(_1323, cbModelParam._m0[21u].z, fma(_1319, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1315)) + cbModelParam._m0[21u].w;
        float _2246 = fma(_1323, cbModelParam._m0[22u].z, fma(_1319, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1315)) + cbModelParam._m0[22u].w;
        float _2250 = fma(_1323, cbModelParam._m0[23u].z, fma(_1319, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1315)) + cbModelParam._m0[23u].w;
        float _2253 = fma(_1264, cbModelParam._m0[21u].z, fma(_1263, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1262));
        float _2256 = fma(_1264, cbModelParam._m0[22u].z, fma(_1263, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1262));
        float _2259 = fma(_1264, cbModelParam._m0[23u].z, fma(_1263, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1262));
        float _2418;
        if (_2253 > 0.0)
        {
            _2418 = abs((1.0 - _2242) / _2253);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_2253 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_2242 + 1.0) / _2253);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2418 = frontier_phi_28_24_ladder;
        }
        float _2686;
        if (_2256 > 0.0)
        {
            _2686 = abs((1.0 - _2246) / _2256);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_2256 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_2246 + 1.0) / _2256);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2686 = frontier_phi_40_35_ladder;
        }
        float _2891;
        if (_2259 > 0.0)
        {
            _2891 = abs((1.0 - _2250) / _2259);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_2259 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_2250 + 1.0) / _2259);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2891 = frontier_phi_49_46_ladder;
        }
        float _2893 = isnan(_2686) ? _2418 : (isnan(_2418) ? _2686 : min(_2418, _2686));
        float _2894 = isnan(_2891) ? _2893 : (isnan(_2893) ? _2891 : min(_2893, _2891));
        float _2898 = (_2894 * _2253) + _2242;
        float _2899 = (_2894 * _2256) + _2246;
        float _2900 = (_2894 * _2259) + _2250;
        float _2901 = _2894 * 9.9999997473787516355514526367188e-05;
        float _2902 = (-1.0) - _2901;
        float _2904 = _2901 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2900 > _2904) || ((_2900 < _2902) || ((_2899 > _2904) || ((_2899 < _2902) || ((_2898 < _2902) || (_2898 > _2904))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _3099 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2900, cbModelParam._m0[17u].z, fma(_2899, cbModelParam._m0[17u].y, _2898 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2900, cbModelParam._m0[18u].z, fma(_2899, cbModelParam._m0[18u].y, _2898 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2900, cbModelParam._m0[19u].z, fma(_2899, cbModelParam._m0[19u].y, _2898 * cbModelParam._m0[19u].x))), _2188);
            frontier_phi_25_49_ladder = _3099.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _3099.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _3099.x * cbModelParam._m0[1u].z;
        }
        _2278 = frontier_phi_25_49_ladder_2;
        _2280 = frontier_phi_25_49_ladder_1;
        _2282 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _2262 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1262, _1263, _1264), _2188);
        _2278 = _2262.x * cbModelParam._m0[1u].z;
        _2280 = _2262.y * cbModelParam._m0[1u].z;
        _2282 = _2262.z * cbModelParam._m0[1u].z;
    }
    float _2294 = ((((1.0 - _1283) * ((_1270 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_1283 * _1270)) * _1254;
    float _2295 = _2294 * ((cbModelParam._m0[1u].w * (_2278 - _2179)) + _2179);
    float _2296 = _2294 * ((cbModelParam._m0[1u].w * (_2280 - _2181)) + _2181);
    float _2297 = _2294 * ((cbModelParam._m0[1u].w * (_2282 - _2183)) + _2183);
    float _2300 = fma(_2297, cbSceneParam._m0[89u].z, fma(_2296, cbSceneParam._m0[89u].y, _2295 * cbSceneParam._m0[89u].x));
    float _2303 = fma(_2297, cbSceneParam._m0[90u].z, fma(_2296, cbSceneParam._m0[90u].y, _2295 * cbSceneParam._m0[90u].x));
    float _2306 = fma(_2297, cbSceneParam._m0[91u].z, fma(_2296, cbSceneParam._m0[91u].y, _2295 * cbSceneParam._m0[91u].x));
    vec4 _2314 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_1191, _1192));
    float _2316 = _2314.w;
    float _2328 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _2316);
    float _2329 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _2316);
    float _2330 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _2316);
    uvec4 _2334 = floatBitsToUint(cbInstanceData._m0[_293 + 5u]);
    uint _2336 = _2334.x * 14u;
    uint _2337 = _2336 + 13u;
    float _2344 = _1254 + (-1.0);
    float _2349 = (cbLight._m0[_2337].x * _2344) + 1.0;
    float _2350 = (cbLight._m0[_2337].y * _2344) + 1.0;
    float _2351 = (cbLight._m0[_2337].z * _2344) + 1.0;
    float _2352 = (cbLight._m0[_2337].w * _2344) + 1.0;
    uint _2353 = _2336 + 5u;
    float _2359 = isnan(1.0) ? _2350 : (isnan(_2350) ? 1.0 : min(_2350, 1.0));
    uint _2363 = _2336 + 4u;
    float _2372 = isnan(1.0) ? _2349 : (isnan(_2349) ? 1.0 : min(_2349, 1.0));
    uint _2376 = _2336 | 1u;
    float _2387 = dot(vec3(cbLight._m0[_2336].xyz), vec3(_1093, _1094, _1095));
    float _2390 = dot(vec3(cbLight._m0[_2376].xyz), vec3(_1093, _1094, _1095));
    float _4665 = isnan(0.0) ? _2387 : (isnan(_2387) ? 0.0 : max(_2387, 0.0));
    float _4676 = isnan(0.0) ? _2390 : (isnan(_2390) ? 0.0 : max(_2390, 0.0));
    float _2395 = (isnan(1.0) ? _4665 : (isnan(_4665) ? 1.0 : min(_4665, 1.0))) * 0.3183098733425140380859375;
    float _2397 = (isnan(1.0) ? _4676 : (isnan(_4676) ? 1.0 : min(_4676, 1.0))) * 0.3183098733425140380859375;
    float _2404 = ((cbLight._m0[_2353].x * _2359) * _2397) + (((cbLight._m0[_2363].x * _2328) * _2372) * _2395);
    float _2405 = ((_2359 * cbLight._m0[_2353].y) * _2397) + (((cbLight._m0[_2363].y * _2329) * _2372) * _2395);
    float _2406 = ((_2359 * cbLight._m0[_2353].z) * _2397) + (((cbLight._m0[_2363].z * _2330) * _2372) * _2395);
    uvec4 _2410 = floatBitsToUint(cbLight._m0[_2336 + 12u]);
    bool _2412 = _2410.x == 0u;
    float _2423;
    float _2425;
    float _2427;
    if (_2412)
    {
        _2423 = _2404;
        _2425 = _2405;
        _2427 = _2406;
    }
    else
    {
        uint _2431 = _2336 + 6u;
        float _2447 = (dot(vec3(cbLight._m0[_2336 + 2u].xyz), vec3(_1093, _1094, _1095)) * 0.5) + 0.5;
        float _2448 = _2447 * _2447;
        float _4687 = isnan(0.0) ? _2448 : (isnan(_2448) ? 0.0 : max(_2448, 0.0));
        float _2449 = isnan(1.0) ? _4687 : (isnan(_4687) ? 1.0 : min(_4687, 1.0));
        float _2450 = isnan(1.0) ? _2351 : (isnan(_2351) ? 1.0 : min(_2351, 1.0));
        _2423 = (((cbLight._m0[_2431].x * 0.3183098733425140380859375) * _2449) * _2450) + _2404;
        _2425 = (((cbLight._m0[_2431].y * 0.3183098733425140380859375) * _2449) * _2450) + _2405;
        _2427 = (((cbLight._m0[_2431].z * 0.3183098733425140380859375) * _2449) * _2450) + _2406;
    }
    bool _2430 = _2410.y == 0u;
    float _2468;
    float _2470;
    float _2472;
    if (_2430)
    {
        _2468 = _2423;
        _2470 = _2425;
        _2472 = _2427;
    }
    else
    {
        uint _2630 = _2336 + 7u;
        float _2646 = (dot(vec3(cbLight._m0[_2336 + 3u].xyz), vec3(_1093, _1094, _1095)) * 0.5) + 0.5;
        float _2647 = _2646 * _2646;
        float _4703 = isnan(0.0) ? _2647 : (isnan(_2647) ? 0.0 : max(_2647, 0.0));
        float _2648 = isnan(1.0) ? _4703 : (isnan(_4703) ? 1.0 : min(_4703, 1.0));
        float _2649 = isnan(1.0) ? _2352 : (isnan(_2352) ? 1.0 : min(_2352, 1.0));
        _2468 = (((cbLight._m0[_2630].x * 0.3183098733425140380859375) * _2648) * _2649) + _2423;
        _2470 = (((cbLight._m0[_2630].y * 0.3183098733425140380859375) * _2648) * _2649) + _2425;
        _2472 = (((cbLight._m0[_2630].z * 0.3183098733425140380859375) * _2648) * _2649) + _2427;
    }
    uint _2475 = _2336 + 8u;
    float _2488 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2336].w)) * _1096) * 0.949999988079071044921875);
    float _2489 = _2488 * _2488;
    float _2490 = cbLight._m0[_2336].x + _1171;
    float _2491 = cbLight._m0[_2336].y + _1172;
    float _2492 = cbLight._m0[_2336].z + _1173;
    float _2496 = inversesqrt(dot(vec3(_2490, _2491, _2492), vec3(_2490, _2491, _2492)));
    float _2497 = _2496 * _2490;
    float _2498 = _2496 * _2491;
    float _2499 = _2496 * _2492;
    float _2500 = dot(vec3(_1093, _1094, _1095), vec3(cbLight._m0[_2336].xyz));
    float _4719 = isnan(0.0) ? _2500 : (isnan(_2500) ? 0.0 : max(_2500, 0.0));
    float _2503 = isnan(1.0) ? _4719 : (isnan(_4719) ? 1.0 : min(_4719, 1.0));
    float _4730 = isnan(0.0) ? _1255 : (isnan(_1255) ? 0.0 : max(_1255, 0.0));
    float _2504 = isnan(1.0) ? _4730 : (isnan(_4730) ? 1.0 : min(_4730, 1.0));
    float _2505 = dot(vec3(_1093, _1094, _1095), vec3(_2497, _2498, _2499));
    float _4741 = isnan(0.0) ? _2505 : (isnan(_2505) ? 0.0 : max(_2505, 0.0));
    float _2508 = isnan(1.0) ? _4741 : (isnan(_4741) ? 1.0 : min(_4741, 1.0));
    float _2509 = dot(vec3(cbLight._m0[_2336].xyz), vec3(_2497, _2498, _2499));
    float _4752 = isnan(0.0) ? _2509 : (isnan(_2509) ? 0.0 : max(_2509, 0.0));
    float _2513 = _2489 * _2489;
    float _2517 = ((_2508 * _2508) * (_2513 + (-1.0))) + 1.0;
    float _2528 = (exp2(log2(1.0 - (isnan(1.0) ? _4752 : (isnan(_4752) ? 1.0 : min(_4752, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2529 = 1.0 - _2489;
    float _2540 = (0.5 / (((_2504 * ((_2503 * _2529) + _2489)) + 9.9999999392252902907785028219223e-09) + (((_2504 * _2529) + _2489) * _2503))) * _2503;
    float _4763 = isnan(0.0) ? _2540 : (isnan(_2540) ? 0.0 : max(_2540, 0.0));
    float _2542 = (isnan(1.0) ? _4763 : (isnan(_4763) ? 1.0 : min(_4763, 1.0))) * (_2513 / ((_2517 * _2517) * 3.141590118408203125));
    uint _2556 = _2336 + 9u;
    float _2567 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2376].w)) * _1096) * 0.949999988079071044921875);
    float _2568 = _2567 * _2567;
    float _2569 = cbLight._m0[_2376].x + _1171;
    float _2570 = cbLight._m0[_2376].y + _1172;
    float _2571 = cbLight._m0[_2376].z + _1173;
    float _2575 = inversesqrt(dot(vec3(_2569, _2570, _2571), vec3(_2569, _2570, _2571)));
    float _2576 = _2575 * _2569;
    float _2577 = _2575 * _2570;
    float _2578 = _2575 * _2571;
    float _2579 = dot(vec3(_1093, _1094, _1095), vec3(cbLight._m0[_2376].xyz));
    float _4774 = isnan(0.0) ? _2579 : (isnan(_2579) ? 0.0 : max(_2579, 0.0));
    float _2582 = isnan(1.0) ? _4774 : (isnan(_4774) ? 1.0 : min(_4774, 1.0));
    float _2583 = dot(vec3(_1093, _1094, _1095), vec3(_2576, _2577, _2578));
    float _4785 = isnan(0.0) ? _2583 : (isnan(_2583) ? 0.0 : max(_2583, 0.0));
    float _2586 = isnan(1.0) ? _4785 : (isnan(_4785) ? 1.0 : min(_4785, 1.0));
    float _2587 = dot(vec3(cbLight._m0[_2376].xyz), vec3(_2576, _2577, _2578));
    float _4796 = isnan(0.0) ? _2587 : (isnan(_2587) ? 0.0 : max(_2587, 0.0));
    float _2591 = _2568 * _2568;
    float _2595 = ((_2586 * _2586) * (_2591 + (-1.0))) + 1.0;
    float _2604 = (exp2(log2(1.0 - (isnan(1.0) ? _4796 : (isnan(_4796) ? 1.0 : min(_4796, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2605 = 1.0 - _2568;
    float _2615 = (0.5 / (((_2504 * ((_2582 * _2605) + _2568)) + 9.9999999392252902907785028219223e-09) + (((_2504 * _2605) + _2568) * _2582))) * _2582;
    float _4807 = isnan(0.0) ? _2615 : (isnan(_2615) ? 0.0 : max(_2615, 0.0));
    float _2617 = (isnan(1.0) ? _4807 : (isnan(_4807) ? 1.0 : min(_4807, 1.0))) * (_2591 / ((_2595 * _2595) * 3.141590118408203125));
    float _2627 = (((_2604 * cbLight._m0[_2556].x) * _2617) * _2359) + ((((cbLight._m0[_2475].x * _2328) * _2528) * _2542) * _2372);
    float _2628 = (((_2604 * cbLight._m0[_2556].y) * _2617) * _2359) + ((((cbLight._m0[_2475].y * _2329) * _2528) * _2542) * _2372);
    float _2629 = (((_2604 * cbLight._m0[_2556].z) * _2617) * _2359) + ((((cbLight._m0[_2475].z * _2330) * _2528) * _2542) * _2372);
    float _2691;
    float _2693;
    float _2695;
    if (_2412)
    {
        _2691 = _2627;
        _2693 = _2628;
        _2695 = _2629;
    }
    else
    {
        uint _2697 = _2336 + 2u;
        uint _2701 = _2336 + 10u;
        float _2715 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2697].w)) * _1096) * 0.949999988079071044921875);
        float _2716 = _2715 * _2715;
        float _2717 = cbLight._m0[_2697].x + _1171;
        float _2718 = cbLight._m0[_2697].y + _1172;
        float _2719 = cbLight._m0[_2697].z + _1173;
        float _2723 = inversesqrt(dot(vec3(_2717, _2718, _2719), vec3(_2717, _2718, _2719)));
        float _2724 = _2723 * _2717;
        float _2725 = _2723 * _2718;
        float _2726 = _2723 * _2719;
        float _2727 = dot(vec3(_1093, _1094, _1095), vec3(cbLight._m0[_2697].xyz));
        float _4818 = isnan(0.0) ? _2727 : (isnan(_2727) ? 0.0 : max(_2727, 0.0));
        float _2730 = isnan(1.0) ? _4818 : (isnan(_4818) ? 1.0 : min(_4818, 1.0));
        float _2731 = dot(vec3(_1093, _1094, _1095), vec3(_2724, _2725, _2726));
        float _4829 = isnan(0.0) ? _2731 : (isnan(_2731) ? 0.0 : max(_2731, 0.0));
        float _2734 = isnan(1.0) ? _4829 : (isnan(_4829) ? 1.0 : min(_4829, 1.0));
        float _2735 = dot(vec3(cbLight._m0[_2697].xyz), vec3(_2724, _2725, _2726));
        float _4840 = isnan(0.0) ? _2735 : (isnan(_2735) ? 0.0 : max(_2735, 0.0));
        float _2739 = _2716 * _2716;
        float _2743 = ((_2734 * _2734) * (_2739 + (-1.0))) + 1.0;
        float _2752 = (exp2(log2(1.0 - (isnan(1.0) ? _4840 : (isnan(_4840) ? 1.0 : min(_4840, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2753 = 1.0 - _2716;
        float _2763 = (0.5 / (((_2504 * ((_2730 * _2753) + _2716)) + 9.9999999392252902907785028219223e-09) + (((_2504 * _2753) + _2716) * _2730))) * _2730;
        float _4851 = isnan(0.0) ? _2763 : (isnan(_2763) ? 0.0 : max(_2763, 0.0));
        float _2765 = (isnan(1.0) ? _4851 : (isnan(_4851) ? 1.0 : min(_4851, 1.0))) * (_2739 / ((_2743 * _2743) * 3.141590118408203125));
        float _2766 = isnan(1.0) ? _2351 : (isnan(_2351) ? 1.0 : min(_2351, 1.0));
        _2691 = (((_2752 * cbLight._m0[_2701].x) * _2765) * _2766) + _2627;
        _2693 = (((_2752 * cbLight._m0[_2701].y) * _2765) * _2766) + _2628;
        _2695 = (((_2752 * cbLight._m0[_2701].z) * _2765) * _2766) + _2629;
    }
    float _2801;
    float _2803;
    float _2805;
    if (_2430)
    {
        _2801 = _2691;
        _2803 = _2693;
        _2805 = _2695;
    }
    else
    {
        uint _2812 = _2336 + 3u;
        uint _2816 = _2336 + 11u;
        float _2830 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2812].w)) * _1096) * 0.949999988079071044921875);
        float _2831 = _2830 * _2830;
        float _2832 = cbLight._m0[_2812].x + _1171;
        float _2833 = cbLight._m0[_2812].y + _1172;
        float _2834 = cbLight._m0[_2812].z + _1173;
        float _2838 = inversesqrt(dot(vec3(_2832, _2833, _2834), vec3(_2832, _2833, _2834)));
        float _2839 = _2838 * _2832;
        float _2840 = _2838 * _2833;
        float _2841 = _2838 * _2834;
        float _2842 = dot(vec3(_1093, _1094, _1095), vec3(cbLight._m0[_2812].xyz));
        float _4867 = isnan(0.0) ? _2842 : (isnan(_2842) ? 0.0 : max(_2842, 0.0));
        float _2845 = isnan(1.0) ? _4867 : (isnan(_4867) ? 1.0 : min(_4867, 1.0));
        float _2846 = dot(vec3(_1093, _1094, _1095), vec3(_2839, _2840, _2841));
        float _4878 = isnan(0.0) ? _2846 : (isnan(_2846) ? 0.0 : max(_2846, 0.0));
        float _2849 = isnan(1.0) ? _4878 : (isnan(_4878) ? 1.0 : min(_4878, 1.0));
        float _2850 = dot(vec3(cbLight._m0[_2812].xyz), vec3(_2839, _2840, _2841));
        float _4889 = isnan(0.0) ? _2850 : (isnan(_2850) ? 0.0 : max(_2850, 0.0));
        float _2854 = _2831 * _2831;
        float _2858 = ((_2849 * _2849) * (_2854 + (-1.0))) + 1.0;
        float _2867 = (exp2(log2(1.0 - (isnan(1.0) ? _4889 : (isnan(_4889) ? 1.0 : min(_4889, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2868 = 1.0 - _2831;
        float _2878 = (0.5 / (((_2504 * ((_2845 * _2868) + _2831)) + 9.9999999392252902907785028219223e-09) + (((_2504 * _2868) + _2831) * _2845))) * _2845;
        float _4900 = isnan(0.0) ? _2878 : (isnan(_2878) ? 0.0 : max(_2878, 0.0));
        float _2880 = (isnan(1.0) ? _4900 : (isnan(_4900) ? 1.0 : min(_4900, 1.0))) * (_2854 / ((_2858 * _2858) * 3.141590118408203125));
        float _2881 = isnan(1.0) ? _2352 : (isnan(_2352) ? 1.0 : min(_2352, 1.0));
        _2801 = (((_2867 * cbLight._m0[_2816].x) * _2880) * _2881) + _2691;
        _2803 = (((_2867 * cbLight._m0[_2816].y) * _2880) * _2881) + _2693;
        _2805 = (((_2867 * cbLight._m0[_2816].z) * _2880) * _2881) + _2695;
    }
    float _3016;
    float _3018;
    float _3020;
    float _3022;
    float _3024;
    float _3026;
    if (_2334.y == 0u)
    {
        float _2956 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2957 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2956;
        float _2958 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2956;
        float _2959 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2956;
        uvec4 _2971 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2972 = _2971.x;
        uint _2983 = uint((float(_2971.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1192) / _2972))) + floor(float(uint(cbSceneParam._m0[85u].x * _1191) / _2972)));
        float _2993 = (log2(_2959 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2994 = isnan(0.0) ? _2993 : (isnan(_2993) ? 0.0 : max(_2993, 0.0));
        uint _2997 = uint(isnan(14.0) ? _2994 : (isnan(_2994) ? 14.0 : min(_2994, 14.0)));
        uvec4 _3002 = texelFetch(g_lightClusterGridBuffer, int(((_2997 << 2u) + (_2983 << 6u)) >> 2u));
        uint _3003 = _3002.x;
        uint _3004 = _2971.z;
        float _3104;
        float _3106;
        float _3108;
        float _3110;
        float _3112;
        float _3114;
        if (((((1u << ((_3004 >> 4u) & 15u)) + 4294967295u) & _3003) == 0u) || ((_3004 & 240u) == 0u))
        {
            _3104 = 0.0;
            _3106 = 0.0;
            _3108 = 0.0;
            _3110 = 0.0;
            _3112 = 0.0;
            _3114 = 0.0;
        }
        else
        {
            float _3105;
            float _3107;
            float _3109;
            float _3111;
            float _3113;
            float _3115;
            float _3256 = 0.0;
            float _3257 = 0.0;
            float _3258 = 0.0;
            float _3259 = 0.0;
            float _3260 = 0.0;
            float _3261 = 0.0;
            uint _3262 = 0u;
            uint _3271;
            bool _3272;
            for (;;)
            {
                _3271 = texelFetch(g_lightClassification, int((((_2997 << 5u) + (_2983 << 9u)) + (_3262 << 2u)) >> 2u)).x;
                _3272 = _3271 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3272)
                {
                    frontier_phi_66_pred = _3256;
                    frontier_phi_66_pred_1 = _3261;
                    frontier_phi_66_pred_2 = _3260;
                    frontier_phi_66_pred_3 = _3259;
                    frontier_phi_66_pred_4 = _3258;
                    frontier_phi_66_pred_5 = _3257;
                }
                else
                {
                    float _3401;
                    float _3402;
                    float _3403;
                    float _3404;
                    float _3405;
                    float _3406;
                    uint _3407;
                    _3401 = _3256;
                    _3402 = _3257;
                    _3403 = _3258;
                    _3404 = _3259;
                    _3405 = _3260;
                    _3406 = _3261;
                    _3407 = _3271;
                    float _3328;
                    float _3329;
                    float _3330;
                    float _3331;
                    float _3332;
                    float _3333;
                    for (;;)
                    {
                        uint _3411 = uint(findLSB(_3407)) + (_3262 << 5u);
                        uint _3408 = (_3407 + 4294967295u) & _3407;
                        uint _3413 = _3411 * 48u;
                        vec4 _3427 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3413)).x, texelFetch(g_PointLightRenderingBuffer, int(_3413 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3413 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3413 + 3u)).x));
                        uint _3433 = (_3411 * 48u) + 4u;
                        vec4 _3446 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3433)).x, texelFetch(g_PointLightRenderingBuffer, int(_3433 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3433 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3433 + 3u)).x));
                        uint _3452 = (_3411 * 48u) + 8u;
                        vec3 _3463 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3452)).x, texelFetch(g_PointLightRenderingBuffer, int(_3452 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3452 + 2u)).x));
                        float _3467 = _3427.x - _2957;
                        float _3468 = _3427.y - _2958;
                        float _3469 = _3427.z - _2959;
                        float _3470 = dot(vec3(_3467, _3468, _3469), vec3(_3467, _3468, _3469));
                        float _3473 = inversesqrt(_3470);
                        float _3474 = _3473 * _3467;
                        float _3475 = _3473 * _3468;
                        float _3476 = _3473 * _3469;
                        float _3477 = dot(vec3(_1210, _1213, _1216), vec3(_3474, _3475, _3476));
                        float _3482 = 1.0 - (_3470 * _3427.w);
                        float _4926 = isnan(0.0) ? _3482 : (isnan(_3482) ? 0.0 : max(_3482, 0.0));
                        float _3483 = isnan(1.0) ? _4926 : (isnan(_4926) ? 1.0 : min(_4926, 1.0));
                        float _3484 = sqrt(_3470) * _3446.w;
                        float _3487 = 1.39999997615814208984375 / (_3484 + 1.39999997615814208984375);
                        float _3488 = _3487 * _3487;
                        float _3491 = ((1.0 - _3488) * _3477) + _3488;
                        float _3494 = _3484 * _3484;
                        float _3498 = ((isnan(0.0) ? _3491 : (isnan(_3491) ? 0.0 : max(_3491, 0.0))) * _3483) / ((_3494 * 0.699999988079071044921875) + 1.0);
                        float _3502 = (-0.0) - _2957;
                        float _3503 = (-0.0) - _2958;
                        float _3504 = (-0.0) - _2959;
                        float _3508 = inversesqrt(dot(vec3(_3502, _3503, _3504), vec3(_3502, _3503, _3504)));
                        float _3509 = _3508 * _3502;
                        float _3510 = _3508 * _3503;
                        float _3511 = _3508 * _3504;
                        float _3519 = exp2(log2(1.0 / ((_3494 * 3.5) + 5.0)) * 0.25);
                        float _3520 = 1.0 - _1270;
                        float _3527 = sqrt(1.0 - ((1.0 - (_3520 * _3520)) * (1.0 - (_3519 * _3519))));
                        float _3528 = _3527 * _3527;
                        float _3529 = _3528 * _3528;
                        float _3530 = _3509 + _3474;
                        float _3531 = _3510 + _3475;
                        float _3532 = _3511 + _3476;
                        float _3536 = inversesqrt(dot(vec3(_3530, _3531, _3532), vec3(_3530, _3531, _3532)));
                        float _3540 = dot(vec3(_1210, _1213, _1216), vec3(_3509, _3510, _3511));
                        float _4942 = isnan(0.0) ? _3540 : (isnan(_3540) ? 0.0 : max(_3540, 0.0));
                        float _3543 = isnan(1.0) ? _4942 : (isnan(_4942) ? 1.0 : min(_4942, 1.0));
                        float _3544 = dot(vec3(_1210, _1213, _1216), vec3(_3536 * _3530, _3536 * _3531, _3536 * _3532));
                        float _4953 = isnan(0.0) ? _3544 : (isnan(_3544) ? 0.0 : max(_3544, 0.0));
                        float _3547 = isnan(1.0) ? _4953 : (isnan(_4953) ? 1.0 : min(_4953, 1.0));
                        float _3551 = ((_3547 * _3547) * (_3529 + (-1.0))) + 1.0;
                        float _3552 = _3487 * _3528;
                        float _3553 = _3552 * _3552;
                        float _3556 = ((1.0 - _3553) * _3477) + _3553;
                        float _4964 = isnan(0.0) ? _3556 : (isnan(_3556) ? 0.0 : max(_3556, 0.0));
                        float _3557 = isnan(1.0) ? _4964 : (isnan(_4964) ? 1.0 : min(_4964, 1.0));
                        float _3558 = 1.0 - _3528;
                        float _3568 = (0.5 / (((_3557 * ((_3543 * _3558) + _3528)) + 9.9999999392252902907785028219223e-09) + (((_3557 * _3558) + _3528) * _3543))) * _3557;
                        float _4975 = isnan(0.0) ? _3568 : (isnan(_3568) ? 0.0 : max(_3568, 0.0));
                        float _3579 = (((_3529 * 3.1415927410125732421875) * (isnan(1.0) ? _4975 : (isnan(_4975) ? 1.0 : min(_4975, 1.0)))) / ((_3551 * _3551) * ((_3494 * 2.1991131305694580078125) + 3.141590118408203125))) * _3483;
                        _3331 = (_3498 * _3446.x) + _3404;
                        _3332 = (_3498 * _3446.y) + _3405;
                        _3333 = (_3498 * _3446.z) + _3406;
                        _3328 = (_3579 * _3463.x) + _3401;
                        _3329 = (_3579 * _3463.y) + _3402;
                        _3330 = (_3579 * _3463.z) + _3403;
                        if (_3408 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3401 = _3328;
                            _3402 = _3329;
                            _3403 = _3330;
                            _3404 = _3331;
                            _3405 = _3332;
                            _3406 = _3333;
                            _3407 = _3408;
                        }
                    }
                    frontier_phi_66_pred = _3328;
                    frontier_phi_66_pred_1 = _3333;
                    frontier_phi_66_pred_2 = _3332;
                    frontier_phi_66_pred_3 = _3331;
                    frontier_phi_66_pred_4 = _3330;
                    frontier_phi_66_pred_5 = _3329;
                }
                _3105 = frontier_phi_66_pred;
                _3115 = frontier_phi_66_pred_1;
                _3113 = frontier_phi_66_pred_2;
                _3111 = frontier_phi_66_pred_3;
                _3109 = frontier_phi_66_pred_4;
                _3107 = frontier_phi_66_pred_5;
                uint _3263 = _3262 + 1u;
                if (_3263 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3256 = _3105;
                    _3257 = _3107;
                    _3258 = _3109;
                    _3259 = _3111;
                    _3260 = _3113;
                    _3261 = _3115;
                    _3262 = _3263;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3104 = _3105;
            _3106 = _3107;
            _3108 = _3109;
            _3110 = _3111;
            _3112 = _3113;
            _3114 = _3115;
        }
        uvec4 _3118 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3119 = _3118.z;
        uint _3121 = (_3119 >> 8u) & 15u;
        float _3224;
        float _3226;
        float _3228;
        float _3230;
        float _3232;
        float _3234;
        if (((4294967295u << _3121) & _3003) == 0u)
        {
            _3224 = _3104;
            _3226 = _3106;
            _3228 = _3108;
            _3230 = _3110;
            _3232 = _3112;
            _3234 = _3114;
        }
        else
        {
            float _3249 = inversesqrt(dot(vec3(_2957, _2958, _2959), vec3(_2957, _2958, _2959)));
            float _3250 = _3249 * _2957;
            float _3251 = _3249 * _2958;
            float _3252 = _3249 * _2959;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_3121 < ((_3119 >> 12u) & 15u))
            {
                float _3225;
                float _3227;
                float _3229;
                float _3231;
                float _3233;
                float _3235;
                float _3384 = _3104;
                float _3385 = _3106;
                float _3386 = _3108;
                float _3387 = _3110;
                float _3388 = _3112;
                float _3389 = _3114;
                uint _3390 = _3121;
                uint _3399;
                bool _3400;
                for (;;)
                {
                    _3399 = texelFetch(g_lightClassification, int((((_2997 << 5u) + (_2983 << 9u)) + (_3390 << 2u)) >> 2u)).x;
                    _3400 = _3399 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_3400)
                    {
                        frontier_phi_77_pred = _3389;
                        frontier_phi_77_pred_1 = _3388;
                        frontier_phi_77_pred_2 = _3387;
                        frontier_phi_77_pred_3 = _3386;
                        frontier_phi_77_pred_4 = _3385;
                        frontier_phi_77_pred_5 = _3384;
                    }
                    else
                    {
                        float _3593;
                        float _3594;
                        float _3595;
                        float _3596;
                        float _3597;
                        float _3598;
                        float _3886;
                        float _3887;
                        float _3888;
                        float _3889;
                        float _3890;
                        float _3891;
                        float _3606 = _3384;
                        float _3607 = _3385;
                        float _3608 = _3386;
                        float _3609 = _3387;
                        float _3610 = _3388;
                        float _3611 = _3389;
                        uint _3612 = _3399;
                        uint _3613;
                        vec4 _3638;
                        float _3639;
                        vec4 _3654;
                        vec3 _3666;
                        vec4 _3681;
                        vec4 _3696;
                        float _3742;
                        bool _3743;
                        for (;;)
                        {
                            uint _3623 = ((_3390 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3612));
                            _3613 = (_3612 + 4294967295u) & _3612;
                            uint _3625 = _3623 * 40u;
                            _3638 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3625)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3625 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3625 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3625 + 3u)).x));
                            _3639 = _3638.w;
                            uint _3641 = (_3623 * 40u) + 4u;
                            _3654 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3641)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3641 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3641 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3641 + 3u)).x));
                            uint _3656 = (_3623 * 40u) + 8u;
                            _3666 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3656)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3656 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3656 + 2u)).x));
                            uint _3668 = (_3623 * 40u) + 16u;
                            _3681 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3668)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3668 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3668 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3668 + 3u)).x));
                            uint _3683 = (_3623 * 40u) + 20u;
                            _3696 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3683)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3683 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3683 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3683 + 3u)).x));
                            uint _3698 = (_3623 * 40u) + 24u;
                            vec4 _3711 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3698)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3698 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3698 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3698 + 3u)).x));
                            uint _3717 = (_3623 * 40u) + 28u;
                            vec4 _3730 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3717)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3717 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3717 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3717 + 3u)).x));
                            _3742 = fma(_2959, _3730.z, fma(_2958, _3730.y, _3730.x * _2957)) + _3730.w;
                            _3743 = !((fma(_2959, _3711.z, fma(_2958, _3711.y, _3711.x * _2957)) + _3711.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3743)
                            {
                                float _3770 = _3638.x - _2957;
                                float _3771 = _3638.y - _2958;
                                float _3772 = _3638.z - _2959;
                                float _3773 = dot(vec3(_3770, _3771, _3772), vec3(_3770, _3771, _3772));
                                float _3776 = inversesqrt(_3773);
                                float _3777 = _3776 * _3770;
                                float _3778 = _3776 * _3771;
                                float _3779 = _3776 * _3772;
                                float _3783 = 1.0 - (_3773 / (_3639 * _3639));
                                float _4986 = isnan(0.0) ? _3783 : (isnan(_3783) ? 0.0 : max(_3783, 0.0));
                                float _3784 = isnan(1.0) ? _4986 : (isnan(_4986) ? 1.0 : min(_4986, 1.0));
                                float _3788 = sqrt(_3773) * _3654.w;
                                float _3790 = 1.39999997615814208984375 / (_3788 + 1.39999997615814208984375);
                                float _3791 = _3790 * _3790;
                                float _3794 = ((1.0 - _3791) * dot(vec3(_3777, _3778, _3779), vec3(_1210, _1213, _1216))) + _3791;
                                float _3797 = _3788 * _3788;
                                float _3801 = (fma(_2959, _3681.z, fma(_2958, _3681.y, _3681.x * _2957)) + _3681.w) / _3742;
                                float _3802 = (fma(_2959, _3696.z, fma(_2958, _3696.y, _3696.x * _2957)) + _3696.w) / _3742;
                                float _3806 = 1.0 - dot(vec2(_3801, _3802), vec2(_3801, _3802));
                                float _5002 = isnan(0.0) ? _3806 : (isnan(_3806) ? 0.0 : max(_3806, 0.0));
                                float _3807 = isnan(1.0) ? _5002 : (isnan(_5002) ? 1.0 : min(_5002, 1.0));
                                float _3808 = _3807 * (((isnan(0.0) ? _3794 : (isnan(_3794) ? 0.0 : max(_3794, 0.0))) * _3784) / ((_3797 * 0.699999988079071044921875) + 1.0));
                                float _3820 = exp2(log2(1.0 / ((_3797 * 3.5) + 5.0)) * 0.25);
                                float _3821 = 1.0 - _1270;
                                float _3828 = sqrt(1.0 - ((1.0 - (_3821 * _3821)) * (1.0 - (_3820 * _3820))));
                                float _3829 = _3828 * _3828;
                                float _3830 = _3829 * _3829;
                                float _3831 = _3777 - _3250;
                                float _3832 = _3778 - _3251;
                                float _3833 = _3779 - _3252;
                                float _3837 = inversesqrt(dot(vec3(_3831, _3832, _3833), vec3(_3831, _3832, _3833)));
                                float _3841 = dot(vec3(_1210, _1213, _1216), vec3((-0.0) - _3250, (-0.0) - _3251, (-0.0) - _3252));
                                float _5013 = isnan(0.0) ? _3841 : (isnan(_3841) ? 0.0 : max(_3841, 0.0));
                                float _3844 = isnan(1.0) ? _5013 : (isnan(_5013) ? 1.0 : min(_5013, 1.0));
                                float _3845 = dot(vec3(_1210, _1213, _1216), vec3(_3837 * _3831, _3837 * _3832, _3837 * _3833));
                                float _5024 = isnan(0.0) ? _3845 : (isnan(_3845) ? 0.0 : max(_3845, 0.0));
                                float _3848 = isnan(1.0) ? _5024 : (isnan(_5024) ? 1.0 : min(_5024, 1.0));
                                float _3852 = ((_3848 * _3848) * (_3830 + (-1.0))) + 1.0;
                                float _3853 = _3790 * _3829;
                                float _3854 = _3853 * _3853;
                                float _3860 = ((1.0 - _3854) * dot(vec3(_1210, _1213, _1216), vec3(_3777, _3778, _3779))) + _3854;
                                float _5035 = isnan(0.0) ? _3860 : (isnan(_3860) ? 0.0 : max(_3860, 0.0));
                                float _3861 = isnan(1.0) ? _5035 : (isnan(_5035) ? 1.0 : min(_5035, 1.0));
                                float _3862 = 1.0 - _3829;
                                float _3872 = (0.5 / (((_3861 * ((_3844 * _3862) + _3829)) + 9.9999999392252902907785028219223e-09) + (((_3861 * _3862) + _3829) * _3844))) * _3861;
                                float _5046 = isnan(0.0) ? _3872 : (isnan(_3872) ? 0.0 : max(_3872, 0.0));
                                float _3882 = (_3807 * _3784) * (((_3830 * 3.1415927410125732421875) * (isnan(1.0) ? _5046 : (isnan(_5046) ? 1.0 : min(_5046, 1.0)))) / ((_3852 * _3852) * ((_3797 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3808 * _3654.y;
                                frontier_phi_83_pred_1 = _3808 * _3654.x;
                                frontier_phi_83_pred_2 = _3882 * _3666.z;
                                frontier_phi_83_pred_3 = _3882 * _3666.y;
                                frontier_phi_83_pred_4 = _3882 * _3666.x;
                                frontier_phi_83_pred_5 = _3808 * _3654.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3890 = frontier_phi_83_pred;
                            _3889 = frontier_phi_83_pred_1;
                            _3888 = frontier_phi_83_pred_2;
                            _3887 = frontier_phi_83_pred_3;
                            _3886 = frontier_phi_83_pred_4;
                            _3891 = frontier_phi_83_pred_5;
                            _3596 = _3889 + _3609;
                            _3597 = _3890 + _3610;
                            _3598 = _3891 + _3611;
                            _3593 = _3886 + _3606;
                            _3594 = _3887 + _3607;
                            _3595 = _3888 + _3608;
                            if (_3613 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3606 = _3593;
                                _3607 = _3594;
                                _3608 = _3595;
                                _3609 = _3596;
                                _3610 = _3597;
                                _3611 = _3598;
                                _3612 = _3613;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3598;
                        frontier_phi_77_pred_1 = _3597;
                        frontier_phi_77_pred_2 = _3596;
                        frontier_phi_77_pred_3 = _3595;
                        frontier_phi_77_pred_4 = _3594;
                        frontier_phi_77_pred_5 = _3593;
                    }
                    _3235 = frontier_phi_77_pred;
                    _3233 = frontier_phi_77_pred_1;
                    _3231 = frontier_phi_77_pred_2;
                    _3229 = frontier_phi_77_pred_3;
                    _3227 = frontier_phi_77_pred_4;
                    _3225 = frontier_phi_77_pred_5;
                    uint _3391 = _3390 + 1u;
                    if (_3391 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3384 = _3225;
                        _3385 = _3227;
                        _3386 = _3229;
                        _3387 = _3231;
                        _3388 = _3233;
                        _3389 = _3235;
                        _3390 = _3391;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _3229;
                frontier_phi_58_59_ladder_1 = _3235;
                frontier_phi_58_59_ladder_2 = _3233;
                frontier_phi_58_59_ladder_3 = _3231;
                frontier_phi_58_59_ladder_4 = _3227;
                frontier_phi_58_59_ladder_5 = _3225;
            }
            else
            {
                frontier_phi_58_59_ladder = _3108;
                frontier_phi_58_59_ladder_1 = _3114;
                frontier_phi_58_59_ladder_2 = _3112;
                frontier_phi_58_59_ladder_3 = _3110;
                frontier_phi_58_59_ladder_4 = _3106;
                frontier_phi_58_59_ladder_5 = _3104;
            }
            _3224 = frontier_phi_58_59_ladder_5;
            _3226 = frontier_phi_58_59_ladder_4;
            _3228 = frontier_phi_58_59_ladder;
            _3230 = frontier_phi_58_59_ladder_3;
            _3232 = frontier_phi_58_59_ladder_2;
            _3234 = frontier_phi_58_59_ladder_1;
        }
        float _3239 = isnan(1.0) ? _1254 : (isnan(_1254) ? 1.0 : min(_1254, 1.0));
        _3016 = (_3239 * _3230) + _2468;
        _3018 = (_3239 * _3232) + _2470;
        _3020 = (_3239 * _3234) + _2472;
        _3022 = ((_3224 * 0.039999999105930328369140625) * _3239) + _2801;
        _3024 = ((_3226 * 0.039999999105930328369140625) * _3239) + _2803;
        _3026 = ((_3228 * 0.039999999105930328369140625) * _3239) + _2805;
    }
    else
    {
        _3016 = _2468;
        _3018 = _2470;
        _3020 = _2472;
        _3022 = _2801;
        _3024 = _2803;
        _3026 = _2805;
    }
    float _5062 = isnan(0.0) ? _1239 : (isnan(_1239) ? 0.0 : max(_1239, 0.0));
    float _5073 = isnan(0.0) ? _1240 : (isnan(_1240) ? 0.0 : max(_1240, 0.0));
    float _5084 = isnan(0.0) ? _1241 : (isnan(_1241) ? 0.0 : max(_1241, 0.0));
    float _3043 = ((isnan(1.0) ? _5062 : (isnan(_5062) ? 1.0 : min(_5062, 1.0))) * (_3016 + ((isnan(0.0) ? _2009 : (isnan(_2009) ? 0.0 : max(_2009, 0.0))) * _1254))) + ((_3022 + ((isnan(0.0) ? _2300 : (isnan(_2300) ? 0.0 : max(_2300, 0.0))) * _2088)) * cbPerFrame._m0[3u].x);
    float _3044 = ((isnan(1.0) ? _5073 : (isnan(_5073) ? 1.0 : min(_5073, 1.0))) * (_3018 + ((isnan(0.0) ? _2012 : (isnan(_2012) ? 0.0 : max(_2012, 0.0))) * _1254))) + ((_3024 + ((isnan(0.0) ? _2303 : (isnan(_2303) ? 0.0 : max(_2303, 0.0))) * _2088)) * cbPerFrame._m0[3u].x);
    float _3045 = ((isnan(1.0) ? _5084 : (isnan(_5084) ? 1.0 : min(_5084, 1.0))) * (_3020 + ((isnan(0.0) ? _2015 : (isnan(_2015) ? 0.0 : max(_2015, 0.0))) * _1254))) + ((_3026 + ((isnan(0.0) ? _2306 : (isnan(_2306) ? 0.0 : max(_2306, 0.0))) * _2088)) * cbPerFrame._m0[3u].x);
    uint _3046 = _293 + 6u;
    float _3054 = _1191 / cbSceneParam._m0[86u].x;
    float _3055 = _1192 / cbSceneParam._m0[86u].y;
    vec4 _3069 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3054, _3055, (log2((isnan(cbSceneParam._m0[77u].w) ? _1114 : (isnan(_1114) ? cbSceneParam._m0[77u].w : min(_1114, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3071 = _3069.x;
    float _3072 = _3069.y;
    float _3073 = _3069.z;
    float _3074 = _3069.w;
    float _3166;
    float _3168;
    float _3170;
    float _3172;
    if (_1114 > cbSceneParam._m0[78u].w)
    {
        float _3129 = isnan(_1114) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _1114 : min(cbSceneParam._m0[80u].w, _1114));
        float _3130 = _3129 / _1114;
        float _3141 = _3130 * _1164;
        float _3142 = _1165 * _3130;
        float _3143 = (-0.0) - _3142;
        float _3144 = _3130 * _1166;
        float _3146 = (cbSceneParam._m0[77u].w * _3143) / _3129;
        float _3147 = _3146 + cbSceneParam._m0[79u].w;
        float _3148 = cbSceneParam._m0[79u].w - _3142;
        float _3154 = sqrt(((_3141 * _3141) + (_3142 * _3142)) + (_3144 * _3144));
        float _3157 = (1.0 - (cbSceneParam._m0[77u].w / _3129)) * _3154;
        float _3162 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3164 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3341;
        if (abs((_3143 - _3146) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3341 = ((((_3147 > 0.0) ? exp2(_3162 * _3147) : (2.0 - exp2(_3164 * _3147))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3157;
        }
        else
        {
            float _3285 = 1.0 / cbSceneParam._m0[80u].x;
            float _3286 = isnan(_3148) ? _3147 : (isnan(_3147) ? _3148 : max(_3147, _3148));
            float _3287 = isnan(_3148) ? _3147 : (isnan(_3147) ? _3148 : min(_3147, _3148));
            float _3296 = isnan(0.0) ? _3286 : (isnan(_3286) ? 0.0 : min(_3286, 0.0));
            float _3297 = isnan(0.0) ? _3287 : (isnan(_3287) ? 0.0 : min(_3287, 0.0));
            _3341 = ((abs(_3154 / _3143) * cbSceneParam._m0[80u].y) * ((((_3296 - _3297) * 2.0) - ((exp2(_3162 * (isnan(0.0) ? _3286 : (isnan(_3286) ? 0.0 : max(_3286, 0.0)))) - exp2(_3162 * (isnan(0.0) ? _3287 : (isnan(_3287) ? 0.0 : max(_3287, 0.0))))) * _3285)) - ((exp2(_3164 * _3296) - exp2(_3164 * _3297)) * _3285))) + (_3157 * cbSceneParam._m0[80u].z);
        }
        vec4 _3343 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3054, _3055, 1.0), 0.0);
        float _3352 = exp2((_3341 * (-1.44269502162933349609375)) * (1.0 - _3343.w));
        float _3353 = log2(_3352);
        float _3369 = log2(_3074);
        _3166 = (exp2(_3369 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3353 * cbSceneParam._m0[78u].x)) * _3343.x) / cbSceneParam._m0[78u].x)) + _3071;
        _3168 = (exp2(_3369 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3353 * cbSceneParam._m0[78u].y)) * _3343.y) / cbSceneParam._m0[78u].y)) + _3072;
        _3170 = (exp2(_3369 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3353 * cbSceneParam._m0[78u].z)) * _3343.z) / cbSceneParam._m0[78u].z)) + _3073;
        _3172 = _3352 * _3074;
    }
    else
    {
        _3166 = _3071;
        _3168 = _3072;
        _3170 = _3073;
        _3172 = _3074;
    }
    bool _3379;
    vec4 _3182;
    vec4 _3204;
    float _3206;
    float _3210;
    float _3211;
    float _3212;
    float _3213;
    bool _3223;
    for (;;)
    {
        _3182 = cbMatDynParam._m0[0u];
        float _3184 = roundEven(_3182.y);
        bool _3185 = _3184 == 3.0;
        float _3186 = log2(_3172);
        float _3193 = exp2(_3186 * cbSceneParam._m0[78u].x) * _3043;
        float _3194 = exp2(_3186 * cbSceneParam._m0[78u].y) * _3044;
        float _3195 = exp2(_3186 * cbSceneParam._m0[78u].z) * _3045;
        float _3202 = _1180 + (-0.5);
        _3204 = cbMtdParam._m0[1u];
        _3206 = _3204.y * _3202;
        float _3209 = (_3184 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3210 = _3209 * (_3185 ? _3193 : (_3193 + (cbSceneParam._m0[72u].w * _3166)));
        _3211 = _3209 * (_3185 ? _3194 : (_3194 + (cbSceneParam._m0[72u].w * _3168)));
        _3212 = _3209 * (_3185 ? _3195 : (_3195 + (cbSceneParam._m0[72u].w * _3170)));
        _3213 = _3202 * 0.999000012874603271484375;
        _3223 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3223)
        {
            if ((cbInstanceData._m0[_293 + 7u].x + _3213) < 0.5)
            {
                _3379 = true;
                break;
            }
        }
        uint _3320 = _1229 + uint(_3182.w);
        if ((cbInstanceData._m0[_3320].w < 1.0) && ((cbInstanceData._m0[_3320].w + _3213) < 0.5))
        {
            _3379 = true;
            break;
        }
        if ((_3206 + 1.0) < _3204.x)
        {
            _3379 = true;
            break;
        }
        _3379 = false;
        break;
    }
    float _3584;
    if (_3379)
    {
        discard_state = true;
        _3584 = 0.0;
    }
    else
    {
        _3584 = cbInstanceData._m0[_3046].w;
    }
    SV_Target.x = _3210;
    SV_Target.y = _3211;
    SV_Target.z = _3212;
    SV_Target.w = _3584;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_3046].w;
    discard_exit();
}


