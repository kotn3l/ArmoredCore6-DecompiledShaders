#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 13) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_22;
layout(set = 0, binding = 14) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 20) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_6;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1294;
float _3935;
float _3936;
float _3937;
float _3938;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _221 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _222 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _223 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _229 = inversesqrt(dot(vec3(_221, _222, _223), vec3(_221, _222, _223)));
    float _230 = _229 * _221;
    float _231 = _229 * _222;
    float _232 = _229 * _223;
    float _236 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _237 = _236 * NORMAL.x;
    float _238 = _236 * NORMAL.y;
    float _239 = _236 * NORMAL.z;
    float _243 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _244 = _243 * TANGENT.x;
    float _245 = _243 * TANGENT.y;
    float _246 = _243 * TANGENT.z;
    float _257 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _259 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _260 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3947 = isnan(0.0) ? _257 : (isnan(_257) ? 0.0 : max(_257, 0.0));
    float _3958 = isnan(0.0) ? _259 : (isnan(_259) ? 0.0 : max(_259, 0.0));
    float _3969 = isnan(0.0) ? _260 : (isnan(_260) ? 0.0 : max(_260, 0.0));
    uint _270 = uint(roundEven(NORMAL.w)) * 13u;
    uint _275 = _270 + 1u;
    uint _279 = _270 + 2u;
    float _288 = sqrt(((cbInstanceData._m0[_275].x * cbInstanceData._m0[_275].x) + (cbInstanceData._m0[_270].x * cbInstanceData._m0[_270].x)) + (cbInstanceData._m0[_279].x * cbInstanceData._m0[_279].x));
    float _289 = _288 * TEXCOORD.z;
    float _290 = _288 * TEXCOORD.w;
    vec4 _303 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _289) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _290) + cbTextureTilingScale._m0[13u].w));
    vec4 _327 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _332 = _327.x * cbMtdParam._m0[11u].x;
    float _333 = _327.y * cbMtdParam._m0[11u].y;
    float _334 = _327.z * cbMtdParam._m0[11u].z;
    vec4 _353 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _289) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _290) + cbTextureTilingScale._m0[5u].w));
    vec4 _404 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _406 = _404.x;
    float _418 = dot(vec4(_406, _404.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _435 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w)).x) * 2.0) - ((((_406 - _418) * cbMtdParam._m0[24u].z) + _418) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3980 = isnan(0.0) ? _435 : (isnan(_435) ? 0.0 : max(_435, 0.0));
    float _436 = isnan(1.0) ? _3980 : (isnan(_3980) ? 1.0 : min(_3980, 1.0));
    float _443 = (_436 * ((_353.x * cbMtdParam._m0[12u].x) - _332)) + _332;
    float _444 = (_436 * ((_353.y * cbMtdParam._m0[12u].y) - _333)) + _333;
    float _445 = (_436 * ((_353.z * cbMtdParam._m0[12u].z) - _334)) + _334;
    float _449 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _303.x) * _443;
    float _452 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _303.y) * _444;
    float _455 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _303.z) * _445;
    float _462 = ((_443 - _449) * (isnan(1.0) ? _3947 : (isnan(_3947) ? 1.0 : min(_3947, 1.0)))) + _449;
    float _463 = ((_444 - _452) * (isnan(1.0) ? _3958 : (isnan(_3958) ? 1.0 : min(_3958, 1.0)))) + _452;
    float _464 = ((_445 - _455) * (isnan(1.0) ? _3969 : (isnan(_3969) ? 1.0 : min(_3969, 1.0)))) + _455;
    vec4 _483 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _289) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _290) + cbTextureTilingScale._m0[14u].w));
    vec4 _503 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _289) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _290) + cbTextureTilingScale._m0[20u].w));
    vec4 _530 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _289) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _290) + cbTextureTilingScale._m0[4u].w));
    vec4 _547 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _549 = _547.x;
    float _550 = _547.y;
    float _551 = _547.z;
    float _560 = ((_530.z - _551) * _436) + _551;
    float _563 = ((((_530.x - _549) * _436) + _549) * 2.0) + (-1.0);
    float _564 = ((((_530.y - _550) * _436) + _550) * 2.0) + (-1.0);
    float _565 = dot(vec2(_563, _564), vec2(_563, _564));
    float _3991 = isnan(0.0) ? _565 : (isnan(_565) ? 0.0 : max(_565, 0.0));
    float _570 = sqrt(1.0 - (isnan(1.0) ? _3991 : (isnan(_3991) ? 1.0 : min(_3991, 1.0))));
    vec4 _590 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _602 = (_563 + ((((_503.x * 2.0) + (-1.0)) * TEXCOORD_11.x) * cbMtdParam._m0[20u].x)) + (((_590.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _603 = (_564 + ((((_503.y * 2.0) + (-1.0)) * TEXCOORD_11.y) * cbMtdParam._m0[20u].x)) + (((_590.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _606 = fma(_570, _237, fma(_603, _244, _602 * _230));
    float _609 = fma(_570, _238, fma(_603, _245, _602 * _231));
    float _612 = fma(_570, _239, fma(_603, _246, _602 * _232));
    float _616 = inversesqrt(dot(vec3(_606, _609, _612), vec3(_606, _609, _612)));
    vec4 _643 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _289) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _290) + cbTextureTilingScale._m0[11u].w));
    float _645 = _643.x;
    float _646 = 1.0 - _645;
    float _652 = (cbMtdParam._m0[19u].x + dot(vec4(_616 * _606, _616 * _609, _616 * _612, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_645 - _646) * cbMtdParam._m0[24u].w) + _646) * cbMtdParam._m0[21u].z);
    float _4002 = isnan(0.0) ? _652 : (isnan(_652) ? 0.0 : max(_652, 0.0));
    float _653 = isnan(1.0) ? _4002 : (isnan(_4002) ? 1.0 : min(_4002, 1.0));
    float _660 = (_653 * ((_483.x * cbMtdParam._m0[18u].x) - _462)) + _462;
    float _661 = (_653 * ((_483.y * cbMtdParam._m0[18u].y) - _463)) + _463;
    float _662 = (_653 * ((_483.z * cbMtdParam._m0[18u].z) - _464)) + _464;
    float _667 = (((_503.z - _560) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _560;
    float _671 = ((_590.z - _667) * cbMtdParam._m0[19u].w) + _667;
    vec4 _684 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _289) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _290) + cbTextureTilingScale._m0[15u].w));
    float _691 = (_684.x * 2.0) + (-1.0);
    float _692 = (_684.y * 2.0) + (-1.0);
    float _693 = dot(vec2(_691, _692), vec2(_691, _692));
    float _4013 = isnan(0.0) ? _693 : (isnan(_693) ? 0.0 : max(_693, 0.0));
    float _701 = ((_684.z - _671) * _653) + _671;
    float _711 = ((sqrt(1.0 - (isnan(1.0) ? _4013 : (isnan(_4013) ? 1.0 : min(_4013, 1.0)))) - _570) * _653) + _570;
    float _714 = (((_691 - _602) * _653) + _602) + (cbMtdParam._m0[21u].x * _602);
    float _715 = (((_692 - _603) * _653) + _603) + (cbMtdParam._m0[21u].x * _603);
    float _717 = cbMtdParam._m0[22u].x + _590.w;
    float _720 = fma(_711, _237, fma(_715, _244, _714 * _230));
    float _723 = fma(_711, _238, fma(_715, _245, _714 * _231));
    float _726 = fma(_711, _239, fma(_715, _246, _714 * _232));
    float _730 = inversesqrt(dot(vec3(_720, _723, _726), vec3(_720, _723, _726)));
    float _731 = _730 * _720;
    float _732 = _730 * _723;
    float _733 = _730 * _726;
    float _4024 = isnan(0.0) ? _701 : (isnan(_701) ? 0.0 : max(_701, 0.0));
    float _734 = isnan(1.0) ? _4024 : (isnan(_4024) ? 1.0 : min(_4024, 1.0));
    float _4035 = isnan(0.0) ? _717 : (isnan(_717) ? 0.0 : max(_717, 0.0));
    float _4046 = isnan(0.0) ? _660 : (isnan(_660) ? 0.0 : max(_660, 0.0));
    float _4057 = isnan(0.0) ? _661 : (isnan(_661) ? 0.0 : max(_661, 0.0));
    float _4068 = isnan(0.0) ? _662 : (isnan(_662) ? 0.0 : max(_662, 0.0));
    float _752 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _794 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _804 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _794);
    float _805 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _794);
    float _806 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _794);
    float _810 = inversesqrt(dot(vec3(_804, _805, _806), vec3(_804, _805, _806)));
    float _811 = _804 * _810;
    float _812 = _805 * _810;
    float _813 = _806 * _810;
    vec4 _818 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _820 = _818.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _974 = sqrt(((_804 * _804) + (_805 * _805)) + (_806 * _806));
        float _980 = (cbMatDynParam._m0[5u].x * _974) + cbMatDynParam._m0[5u].y;
        float _4079 = isnan(0.0) ? _980 : (isnan(_980) ? 0.0 : max(_980, 0.0));
        float _981 = isnan(1.0) ? _4079 : (isnan(_4079) ? 1.0 : min(_4079, 1.0));
        float _985 = (cbMatDynParam._m0[5u].z * _974) + cbMatDynParam._m0[5u].w;
        float _4090 = isnan(0.0) ? _985 : (isnan(_985) ? 0.0 : max(_985, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4090 : (isnan(_4090) ? 1.0 : min(_4090, 1.0))) - _981)) + _981) < ((_820 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _831 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _832 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _850 = fma(_733, cbSceneParam._m0[5u].z, fma(_732, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _731));
    float _853 = fma(_733, cbSceneParam._m0[6u].z, fma(_732, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _731));
    float _856 = fma(_733, cbSceneParam._m0[7u].z, fma(_732, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _731));
    uint _869 = _270 + 9u;
    uint _870 = _869 + uint(cbMatDynParam._m0[0u].w);
    float _876 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4046 : (isnan(_4046) ? 1.0 : min(_4046, 1.0)))) * cbInstanceData._m0[_870].x;
    float _877 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4057 : (isnan(_4057) ? 1.0 : min(_4057, 1.0)))) * cbInstanceData._m0[_870].y;
    float _878 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4068 : (isnan(_4068) ? 1.0 : min(_4068, 1.0)))) * cbInstanceData._m0[_870].z;
    float _4101 = isnan(0.0) ? _876 : (isnan(_876) ? 0.0 : max(_876, 0.0));
    float _879 = isnan(1.0) ? _4101 : (isnan(_4101) ? 1.0 : min(_4101, 1.0));
    float _4112 = isnan(0.0) ? _877 : (isnan(_877) ? 0.0 : max(_877, 0.0));
    float _880 = isnan(1.0) ? _4112 : (isnan(_4112) ? 1.0 : min(_4112, 1.0));
    float _4123 = isnan(0.0) ? _878 : (isnan(_878) ? 0.0 : max(_878, 0.0));
    float _881 = isnan(1.0) ? _4123 : (isnan(_4123) ? 1.0 : min(_4123, 1.0));
    vec4 _890 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _831, cbSceneParam._m0[86u].y * _832));
    float _894 = ((isnan(1.0) ? _4035 : (isnan(_4035) ? 1.0 : min(_4035, 1.0))) * TEXCOORD_5.w) * _890.x;
    float _895 = dot(vec3(_731, _732, _733), vec3(_811, _812, _813));
    float _898 = _895 * 2.0;
    float _902 = (_898 * _731) - _811;
    float _903 = (_898 * _732) - _812;
    float _904 = (_898 * _733) - _813;
    float _908 = abs(dot(vec3(_811, _812, _813), vec3(_731, _732, _733)));
    float _4134 = isnan(0.0) ? _908 : (isnan(_908) ? 0.0 : max(_908, 0.0));
    float _910 = sqrt(_734);
    float _923 = exp2((_910 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4134 : (isnan(_4134) ? 1.0 : min(_4134, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_910 * 3.0));
    float _955 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _959 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _963 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1293;
    float _1295;
    float _1296;
    float _1297;
    float _1298;
    float _1299;
    float _1300;
    float _1301;
    float _1302;
    float _1303;
    float _1304;
    float _1305;
    float _1306;
    float _1307;
    float _1308;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1018 = fma(_963, cbModelParam._m0[26u].z, fma(_959, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _955));
        float _1022 = fma(_963, cbModelParam._m0[27u].z, fma(_959, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _955));
        float _1026 = fma(_963, cbModelParam._m0[28u].z, fma(_959, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _955));
        float _1051 = _955 + _731;
        float _1052 = _959 + _732;
        float _1053 = _963 + _733;
        float _1063 = fma(_1053, cbModelParam._m0[26u].z, fma(_1052, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1051)) - _1018;
        float _1064 = fma(_1053, cbModelParam._m0[27u].z, fma(_1052, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1051)) - _1022;
        float _1065 = fma(_1053, cbModelParam._m0[28u].z, fma(_1052, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1051)) - _1026;
        float _1069 = inversesqrt(dot(vec3(_1063, _1064, _1065), vec3(_1063, _1064, _1065)));
        float _1082 = ((_1069 * _1063) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1018 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1083 = ((_1069 * _1064) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1022 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1084 = ((_1069 * _1065) / cbModelParam._m0[34u].z) + ((((((_1026 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1087 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1082, _1083, _1084), 0.0);
        vec4 _1094 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1082, _1083, _1084), 0.0);
        vec4 _1101 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1082, _1083, _1084), 0.0);
        vec4 _1108 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1082, _1083, _1084), 0.0);
        float _1121 = exp2((_1087.w + (-0.5)) * 20.0) * 2.0;
        float _1122 = _1121 * (_1087.x + (-0.5));
        float _1123 = _1121 * (_1087.y + (-0.5));
        float _1124 = _1121 * (_1087.z + (-0.5));
        float _1131 = exp2((_1094.w + (-0.5)) * 20.0) * 2.0;
        float _1132 = _1131 * (_1094.x + (-0.5));
        float _1133 = _1131 * (_1094.y + (-0.5));
        float _1134 = _1131 * (_1094.z + (-0.5));
        float _1141 = exp2((_1101.w + (-0.5)) * 20.0) * 2.0;
        float _1142 = _1141 * (_1101.x + (-0.5));
        float _1143 = _1141 * (_1101.y + (-0.5));
        float _1144 = _1141 * (_1101.z + (-0.5));
        float _1151 = exp2((_1108.w + (-0.5)) * 20.0) * 2.0;
        float _1152 = _1151 * (_1108.x + (-0.5));
        float _1153 = _1151 * (_1108.y + (-0.5));
        float _1154 = _1151 * (_1108.z + (-0.5));
        float _1155 = isnan(0.0) ? _1152 : (isnan(_1152) ? 0.0 : max(_1152, 0.0));
        float _1156 = isnan(0.0) ? _1153 : (isnan(_1153) ? 0.0 : max(_1153, 0.0));
        float _1157 = isnan(0.0) ? _1154 : (isnan(_1154) ? 0.0 : max(_1154, 0.0));
        float _1158 = _1122 * 0.5;
        float _1159 = _1132 * 0.5;
        float _1160 = _1142 * 0.5;
        float _1161 = dot(vec3(_1158, _1159, _1160), vec3(_1158, _1159, _1160));
        float _1166 = (_1161 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1161);
        float _1175 = (dot(vec3(_731, _732, _733), vec3(_1166 * _1158, _1166 * _1159, _1166 * _1160)) + 1.0) * 0.5;
        float _4160 = isnan(0.0) ? _1175 : (isnan(_1175) ? 0.0 : max(_1175, 0.0));
        float _1185 = sqrt(((_1159 * _1159) + (_1158 * _1158)) + (_1160 * _1160)) / (_1155 + 9.9999997473787516355514526367188e-06);
        float _4171 = isnan(0.0) ? _1185 : (isnan(_1185) ? 0.0 : max(_1185, 0.0));
        float _1186 = isnan(1.0) ? _4171 : (isnan(_4171) ? 1.0 : min(_4171, 1.0));
        float _1187 = _1186 * 2.0;
        float _1191 = (1.0 - _1186) / (_1186 + 1.0);
        float _4182 = isnan(0.0) ? _1191 : (isnan(_1191) ? 0.0 : max(_1191, 0.0));
        float _1192 = isnan(1.0) ? _4182 : (isnan(_4182) ? 1.0 : min(_4182, 1.0));
        float _1201 = ((((1.0 - _1192) * (_1187 + 2.0)) * exp2(log2(isnan(1.0) ? _4160 : (isnan(_4160) ? 1.0 : min(_4160, 1.0))) * (_1187 + 1.0))) + _1192) * _1155;
        float _1202 = _1123 * 0.5;
        float _1203 = _1133 * 0.5;
        float _1204 = _1143 * 0.5;
        float _1205 = dot(vec3(_1202, _1203, _1204), vec3(_1202, _1203, _1204));
        float _1210 = (_1205 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1205);
        float _1218 = (dot(vec3(_731, _732, _733), vec3(_1210 * _1202, _1210 * _1203, _1210 * _1204)) + 1.0) * 0.5;
        float _4193 = isnan(0.0) ? _1218 : (isnan(_1218) ? 0.0 : max(_1218, 0.0));
        float _1227 = sqrt(((_1203 * _1203) + (_1202 * _1202)) + (_1204 * _1204)) / (_1156 + 9.9999997473787516355514526367188e-06);
        float _4204 = isnan(0.0) ? _1227 : (isnan(_1227) ? 0.0 : max(_1227, 0.0));
        float _1228 = isnan(1.0) ? _4204 : (isnan(_4204) ? 1.0 : min(_4204, 1.0));
        float _1229 = _1228 * 2.0;
        float _1233 = (1.0 - _1228) / (_1228 + 1.0);
        float _4215 = isnan(0.0) ? _1233 : (isnan(_1233) ? 0.0 : max(_1233, 0.0));
        float _1234 = isnan(1.0) ? _4215 : (isnan(_4215) ? 1.0 : min(_4215, 1.0));
        float _1243 = ((((1.0 - _1234) * (_1229 + 2.0)) * exp2(log2(isnan(1.0) ? _4193 : (isnan(_4193) ? 1.0 : min(_4193, 1.0))) * (_1229 + 1.0))) + _1234) * _1156;
        float _1244 = _1124 * 0.5;
        float _1245 = _1134 * 0.5;
        float _1246 = _1144 * 0.5;
        float _1247 = dot(vec3(_1244, _1245, _1246), vec3(_1244, _1245, _1246));
        float _1252 = (_1247 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1247);
        float _1260 = (dot(vec3(_731, _732, _733), vec3(_1252 * _1244, _1252 * _1245, _1252 * _1246)) + 1.0) * 0.5;
        float _4226 = isnan(0.0) ? _1260 : (isnan(_1260) ? 0.0 : max(_1260, 0.0));
        float _1269 = sqrt(((_1245 * _1245) + (_1244 * _1244)) + (_1246 * _1246)) / (_1157 + 9.9999997473787516355514526367188e-06);
        float _4237 = isnan(0.0) ? _1269 : (isnan(_1269) ? 0.0 : max(_1269, 0.0));
        float _1270 = isnan(1.0) ? _4237 : (isnan(_4237) ? 1.0 : min(_4237, 1.0));
        float _1271 = _1270 * 2.0;
        float _1275 = (1.0 - _1270) / (_1270 + 1.0);
        float _4248 = isnan(0.0) ? _1275 : (isnan(_1275) ? 0.0 : max(_1275, 0.0));
        float _1276 = isnan(1.0) ? _4248 : (isnan(_4248) ? 1.0 : min(_4248, 1.0));
        float _1285 = ((((1.0 - _1276) * (_1271 + 2.0)) * exp2(log2(isnan(1.0) ? _4226 : (isnan(_4226) ? 1.0 : min(_4226, 1.0))) * (_1271 + 1.0))) + _1276) * _1157;
        _1293 = _1124;
        _1295 = _1123;
        _1296 = _1122;
        _1297 = _1134;
        _1298 = _1133;
        _1299 = _1132;
        _1300 = _1144;
        _1301 = _1143;
        _1302 = _1142;
        _1303 = _1157;
        _1304 = _1156;
        _1305 = _1155;
        _1306 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1201 : (isnan(_1201) ? 0.0 : max(_1201, 0.0)));
        _1307 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1243 : (isnan(_1243) ? 0.0 : max(_1243, 0.0)));
        _1308 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1285 : (isnan(_1285) ? 0.0 : max(_1285, 0.0)));
    }
    else
    {
        _1293 = _1294;
        _1295 = _1294;
        _1296 = _1294;
        _1297 = _1294;
        _1298 = _1294;
        _1299 = _1294;
        _1300 = _1294;
        _1301 = _1294;
        _1302 = _1294;
        _1303 = _1294;
        _1304 = _1294;
        _1305 = _1294;
        _1306 = 0.0;
        _1307 = 0.0;
        _1308 = 0.0;
    }
    float _1605;
    float _1606;
    float _1607;
    float _1608;
    float _1609;
    float _1610;
    float _1611;
    float _1612;
    float _1613;
    float _1614;
    float _1615;
    float _1616;
    float _1617;
    float _1618;
    float _1619;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1336 = fma(_963, cbModelParam._m0[30u].z, fma(_959, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _955));
        float _1340 = fma(_963, cbModelParam._m0[31u].z, fma(_959, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _955));
        float _1344 = fma(_963, cbModelParam._m0[32u].z, fma(_959, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _955));
        float _1367 = _955 + _731;
        float _1368 = _959 + _732;
        float _1369 = _963 + _733;
        float _1379 = fma(_1369, cbModelParam._m0[30u].z, fma(_1368, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1367)) - _1336;
        float _1380 = fma(_1369, cbModelParam._m0[31u].z, fma(_1368, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1367)) - _1340;
        float _1381 = fma(_1369, cbModelParam._m0[32u].z, fma(_1368, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1367)) - _1344;
        float _1385 = inversesqrt(dot(vec3(_1379, _1380, _1381), vec3(_1379, _1380, _1381)));
        float _1398 = ((_1385 * _1379) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1336 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1399 = ((_1385 * _1380) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1340 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1400 = ((_1385 * _1381) / cbModelParam._m0[35u].z) + ((((((_1344 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1402 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1398, _1399, _1400), 0.0);
        vec4 _1409 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1398, _1399, _1400), 0.0);
        vec4 _1416 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1398, _1399, _1400), 0.0);
        vec4 _1423 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1398, _1399, _1400), 0.0);
        float _1435 = exp2((_1402.w + (-0.5)) * 20.0) * 2.0;
        float _1436 = _1435 * (_1402.x + (-0.5));
        float _1437 = _1435 * (_1402.y + (-0.5));
        float _1438 = _1435 * (_1402.z + (-0.5));
        float _1445 = exp2((_1409.w + (-0.5)) * 20.0) * 2.0;
        float _1446 = _1445 * (_1409.x + (-0.5));
        float _1447 = _1445 * (_1409.y + (-0.5));
        float _1448 = _1445 * (_1409.z + (-0.5));
        float _1455 = exp2((_1416.w + (-0.5)) * 20.0) * 2.0;
        float _1456 = _1455 * (_1416.x + (-0.5));
        float _1457 = _1455 * (_1416.y + (-0.5));
        float _1458 = _1455 * (_1416.z + (-0.5));
        float _1465 = exp2((_1423.w + (-0.5)) * 20.0) * 2.0;
        float _1466 = _1465 * (_1423.x + (-0.5));
        float _1467 = _1465 * (_1423.y + (-0.5));
        float _1468 = _1465 * (_1423.z + (-0.5));
        float _1469 = isnan(0.0) ? _1466 : (isnan(_1466) ? 0.0 : max(_1466, 0.0));
        float _1470 = isnan(0.0) ? _1467 : (isnan(_1467) ? 0.0 : max(_1467, 0.0));
        float _1471 = isnan(0.0) ? _1468 : (isnan(_1468) ? 0.0 : max(_1468, 0.0));
        float _1472 = _1436 * 0.5;
        float _1473 = _1446 * 0.5;
        float _1474 = _1456 * 0.5;
        float _1475 = dot(vec3(_1472, _1473, _1474), vec3(_1472, _1473, _1474));
        float _1480 = (_1475 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1475);
        float _1488 = (dot(vec3(_731, _732, _733), vec3(_1480 * _1472, _1480 * _1473, _1480 * _1474)) + 1.0) * 0.5;
        float _4289 = isnan(0.0) ? _1488 : (isnan(_1488) ? 0.0 : max(_1488, 0.0));
        float _1497 = sqrt(((_1473 * _1473) + (_1472 * _1472)) + (_1474 * _1474)) / (_1469 + 9.9999997473787516355514526367188e-06);
        float _4300 = isnan(0.0) ? _1497 : (isnan(_1497) ? 0.0 : max(_1497, 0.0));
        float _1498 = isnan(1.0) ? _4300 : (isnan(_4300) ? 1.0 : min(_4300, 1.0));
        float _1499 = _1498 * 2.0;
        float _1503 = (1.0 - _1498) / (_1498 + 1.0);
        float _4311 = isnan(0.0) ? _1503 : (isnan(_1503) ? 0.0 : max(_1503, 0.0));
        float _1504 = isnan(1.0) ? _4311 : (isnan(_4311) ? 1.0 : min(_4311, 1.0));
        float _1513 = ((((1.0 - _1504) * (_1499 + 2.0)) * exp2(log2(isnan(1.0) ? _4289 : (isnan(_4289) ? 1.0 : min(_4289, 1.0))) * (_1499 + 1.0))) + _1504) * _1469;
        float _1514 = _1437 * 0.5;
        float _1515 = _1447 * 0.5;
        float _1516 = _1457 * 0.5;
        float _1517 = dot(vec3(_1514, _1515, _1516), vec3(_1514, _1515, _1516));
        float _1522 = (_1517 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1517);
        float _1530 = (dot(vec3(_731, _732, _733), vec3(_1522 * _1514, _1522 * _1515, _1522 * _1516)) + 1.0) * 0.5;
        float _4322 = isnan(0.0) ? _1530 : (isnan(_1530) ? 0.0 : max(_1530, 0.0));
        float _1539 = sqrt(((_1515 * _1515) + (_1514 * _1514)) + (_1516 * _1516)) / (_1470 + 9.9999997473787516355514526367188e-06);
        float _4333 = isnan(0.0) ? _1539 : (isnan(_1539) ? 0.0 : max(_1539, 0.0));
        float _1540 = isnan(1.0) ? _4333 : (isnan(_4333) ? 1.0 : min(_4333, 1.0));
        float _1541 = _1540 * 2.0;
        float _1545 = (1.0 - _1540) / (_1540 + 1.0);
        float _4344 = isnan(0.0) ? _1545 : (isnan(_1545) ? 0.0 : max(_1545, 0.0));
        float _1546 = isnan(1.0) ? _4344 : (isnan(_4344) ? 1.0 : min(_4344, 1.0));
        float _1555 = ((((1.0 - _1546) * (_1541 + 2.0)) * exp2(log2(isnan(1.0) ? _4322 : (isnan(_4322) ? 1.0 : min(_4322, 1.0))) * (_1541 + 1.0))) + _1546) * _1470;
        float _1556 = _1438 * 0.5;
        float _1557 = _1448 * 0.5;
        float _1558 = _1458 * 0.5;
        float _1559 = dot(vec3(_1556, _1557, _1558), vec3(_1556, _1557, _1558));
        float _1564 = (_1559 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1559);
        float _1572 = (dot(vec3(_731, _732, _733), vec3(_1564 * _1556, _1564 * _1557, _1564 * _1558)) + 1.0) * 0.5;
        float _4355 = isnan(0.0) ? _1572 : (isnan(_1572) ? 0.0 : max(_1572, 0.0));
        float _1581 = sqrt(((_1557 * _1557) + (_1556 * _1556)) + (_1558 * _1558)) / (_1471 + 9.9999997473787516355514526367188e-06);
        float _4366 = isnan(0.0) ? _1581 : (isnan(_1581) ? 0.0 : max(_1581, 0.0));
        float _1582 = isnan(1.0) ? _4366 : (isnan(_4366) ? 1.0 : min(_4366, 1.0));
        float _1583 = _1582 * 2.0;
        float _1587 = (1.0 - _1582) / (_1582 + 1.0);
        float _4377 = isnan(0.0) ? _1587 : (isnan(_1587) ? 0.0 : max(_1587, 0.0));
        float _1588 = isnan(1.0) ? _4377 : (isnan(_4377) ? 1.0 : min(_4377, 1.0));
        float _1597 = ((((1.0 - _1588) * (_1583 + 2.0)) * exp2(log2(isnan(1.0) ? _4355 : (isnan(_4355) ? 1.0 : min(_4355, 1.0))) * (_1583 + 1.0))) + _1588) * _1471;
        _1605 = _1438;
        _1606 = _1437;
        _1607 = _1436;
        _1608 = _1448;
        _1609 = _1447;
        _1610 = _1446;
        _1611 = _1458;
        _1612 = _1457;
        _1613 = _1456;
        _1614 = _1471;
        _1615 = _1470;
        _1616 = _1469;
        _1617 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1513 : (isnan(_1513) ? 0.0 : max(_1513, 0.0)));
        _1618 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1555 : (isnan(_1555) ? 0.0 : max(_1555, 0.0)));
        _1619 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1597 : (isnan(_1597) ? 0.0 : max(_1597, 0.0)));
    }
    else
    {
        _1605 = _1294;
        _1606 = _1294;
        _1607 = _1294;
        _1608 = _1294;
        _1609 = _1294;
        _1610 = _1294;
        _1611 = _1294;
        _1612 = _1294;
        _1613 = _1294;
        _1614 = _1294;
        _1615 = _1294;
        _1616 = _1294;
        _1617 = 0.0;
        _1618 = 0.0;
        _1619 = 0.0;
    }
    float _1629 = (cbModelParam._m0[1u].x * (_1617 - _1306)) + _1306;
    float _1630 = (cbModelParam._m0[1u].x * (_1618 - _1307)) + _1307;
    float _1631 = (cbModelParam._m0[1u].x * (_1619 - _1308)) + _1308;
    float _1652 = fma(_1631, cbSceneParam._m0[89u].z, fma(_1630, cbSceneParam._m0[89u].y, _1629 * cbSceneParam._m0[89u].x));
    float _1655 = fma(_1631, cbSceneParam._m0[90u].z, fma(_1630, cbSceneParam._m0[90u].y, _1629 * cbSceneParam._m0[90u].x));
    float _1658 = fma(_1631, cbSceneParam._m0[91u].z, fma(_1630, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1629));
    float _1673 = _902 * 0.5;
    float _1674 = _903 * 0.5;
    float _1675 = _904 * 0.5;
    float _1676 = dot(vec4(_1673, _1674, _1675, 1.0), vec4(_1607, _1610, _1613, _1616));
    float _1679 = dot(vec4(_1673, _1674, _1675, 1.0), vec4(_1606, _1609, _1612, _1615));
    float _1682 = dot(vec4(_1673, _1674, _1675, 1.0), vec4(_1605, _1608, _1611, _1614));
    float _1716;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1689 = dot(vec4(_1673, _1674, _1675, 1.0), vec4(_1293, _1297, _1300, _1303));
        float _1693 = dot(vec4(_1673, _1674, _1675, 1.0), vec4(_1295, _1298, _1301, _1304));
        float _1697 = dot(vec4(_1673, _1674, _1675, 1.0), vec4(_1296, _1299, _1302, _1305));
        float _1704 = dot(vec4(cbModelParam._m0[39u]), vec4(_1673, _1674, _1675, 1.0));
        _1716 = dot(vec3(isnan(0.0) ? _1697 : (isnan(_1697) ? 0.0 : max(_1697, 0.0)), isnan(0.0) ? _1693 : (isnan(_1693) ? 0.0 : max(_1693, 0.0)), isnan(0.0) ? _1689 : (isnan(_1689) ? 0.0 : max(_1689, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1704) ? 0.0 : (isnan(0.0) ? _1704 : max(0.0, _1704))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1716 = 1.0;
    }
    float _1727;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1718 = dot(vec4(cbModelParam._m0[40u]), vec4(_1673, _1674, _1675, 1.0));
        _1727 = dot(vec3(isnan(0.0) ? _1676 : (isnan(_1676) ? 0.0 : max(_1676, 0.0)), isnan(0.0) ? _1679 : (isnan(_1679) ? 0.0 : max(_1679, 0.0)), isnan(0.0) ? _1682 : (isnan(_1682) ? 0.0 : max(_1682, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1718) ? 0.0 : (isnan(0.0) ? _1718 : max(0.0, _1718))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1727 = 1.0;
    }
    float _1731 = (_1727 * cbModelParam._m0[1u].x) + (_1716 * (1.0 - cbModelParam._m0[1u].x));
    float _1741 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _734);
    float _1742 = isnan(_1741) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1741 : min(cbModelParam._m0[25u].z, _1741));
    float _1822;
    float _1824;
    float _1826;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1789 = fma(_963, cbModelParam._m0[13u].z, fma(_959, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _955)) + cbModelParam._m0[13u].w;
        float _1793 = fma(_963, cbModelParam._m0[14u].z, fma(_959, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _955)) + cbModelParam._m0[14u].w;
        float _1797 = fma(_963, cbModelParam._m0[15u].z, fma(_959, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _955)) + cbModelParam._m0[15u].w;
        float _1800 = fma(_904, cbModelParam._m0[13u].z, fma(_903, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _902));
        float _1803 = fma(_904, cbModelParam._m0[14u].z, fma(_903, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _902));
        float _1806 = fma(_904, cbModelParam._m0[15u].z, fma(_903, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _902));
        float _1834;
        if (_1800 > 0.0)
        {
            _1834 = abs((1.0 - _1789) / _1800);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1800 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1789 + 1.0) / _1800);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1834 = frontier_phi_17_15_ladder;
        }
        float _2003;
        if (_1803 > 0.0)
        {
            _2003 = abs((1.0 - _1793) / _1803);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1803 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1793 + 1.0) / _1803);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2003 = frontier_phi_26_22_ladder;
        }
        float _2298;
        if (_1806 > 0.0)
        {
            _2298 = abs((1.0 - _1797) / _1806);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1806 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1797 + 1.0) / _1806);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2298 = frontier_phi_38_33_ladder;
        }
        float _2300 = isnan(_2003) ? _1834 : (isnan(_1834) ? _2003 : min(_1834, _2003));
        float _2301 = isnan(_2298) ? _2300 : (isnan(_2300) ? _2298 : min(_2300, _2298));
        float _2305 = (_2301 * _1800) + _1789;
        float _2306 = (_2301 * _1803) + _1793;
        float _2307 = (_2301 * _1806) + _1797;
        float _2308 = _2301 * 9.9999997473787516355514526367188e-05;
        float _2310 = (-1.0) - _2308;
        float _2312 = _2308 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2307 > _2312) || ((_2307 < _2310) || ((_2306 > _2312) || ((_2306 < _2310) || ((_2305 < _2310) || (_2305 > _2312))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2452 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2307, cbModelParam._m0[9u].z, fma(_2306, cbModelParam._m0[9u].y, _2305 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2307, cbModelParam._m0[10u].z, fma(_2306, cbModelParam._m0[10u].y, _2305 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2307, cbModelParam._m0[11u].z, fma(_2306, cbModelParam._m0[11u].y, _2305 * cbModelParam._m0[11u].x))), _1742);
            frontier_phi_16_38_ladder = _2452.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2452.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2452.x * cbModelParam._m0[1u].y;
        }
        _1822 = frontier_phi_16_38_ladder_2;
        _1824 = frontier_phi_16_38_ladder_1;
        _1826 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1810 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_902, _903, _904), _1742);
        _1822 = _1810.x * cbModelParam._m0[1u].y;
        _1824 = _1810.y * cbModelParam._m0[1u].y;
        _1826 = _1810.z * cbModelParam._m0[1u].y;
    }
    float _1830 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _734);
    float _1831 = isnan(_1830) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1830 : min(cbModelParam._m0[25u].w, _1830));
    float _1920;
    float _1922;
    float _1924;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1884 = fma(_963, cbModelParam._m0[21u].z, fma(_959, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _955)) + cbModelParam._m0[21u].w;
        float _1888 = fma(_963, cbModelParam._m0[22u].z, fma(_959, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _955)) + cbModelParam._m0[22u].w;
        float _1892 = fma(_963, cbModelParam._m0[23u].z, fma(_959, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _955)) + cbModelParam._m0[23u].w;
        float _1895 = fma(_904, cbModelParam._m0[21u].z, fma(_903, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _902));
        float _1898 = fma(_904, cbModelParam._m0[22u].z, fma(_903, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _902));
        float _1901 = fma(_904, cbModelParam._m0[23u].z, fma(_903, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _902));
        float _2008;
        if (_1895 > 0.0)
        {
            _2008 = abs((1.0 - _1884) / _1895);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1895 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1884 + 1.0) / _1895);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2008 = frontier_phi_28_24_ladder;
        }
        float _2325;
        if (_1898 > 0.0)
        {
            _2325 = abs((1.0 - _1888) / _1898);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1898 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1888 + 1.0) / _1898);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2325 = frontier_phi_40_35_ladder;
        }
        float _2652;
        if (_1901 > 0.0)
        {
            _2652 = abs((1.0 - _1892) / _1901);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_1901 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_1892 + 1.0) / _1901);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _2652 = frontier_phi_50_47_ladder;
        }
        float _2654 = isnan(_2325) ? _2008 : (isnan(_2008) ? _2325 : min(_2008, _2325));
        float _2655 = isnan(_2652) ? _2654 : (isnan(_2654) ? _2652 : min(_2654, _2652));
        float _2659 = (_2655 * _1895) + _1884;
        float _2660 = (_2655 * _1898) + _1888;
        float _2661 = (_2655 * _1901) + _1892;
        float _2662 = _2655 * 9.9999997473787516355514526367188e-05;
        float _2663 = (-1.0) - _2662;
        float _2665 = _2662 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_2661 > _2665) || ((_2661 < _2663) || ((_2660 > _2665) || ((_2660 < _2663) || ((_2659 < _2663) || (_2659 > _2665))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2779 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2661, cbModelParam._m0[17u].z, fma(_2660, cbModelParam._m0[17u].y, _2659 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2661, cbModelParam._m0[18u].z, fma(_2660, cbModelParam._m0[18u].y, _2659 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2661, cbModelParam._m0[19u].z, fma(_2660, cbModelParam._m0[19u].y, _2659 * cbModelParam._m0[19u].x))), _1831);
            frontier_phi_25_50_ladder = _2779.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _2779.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _2779.x * cbModelParam._m0[1u].z;
        }
        _1920 = frontier_phi_25_50_ladder_2;
        _1922 = frontier_phi_25_50_ladder_1;
        _1924 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _1904 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_902, _903, _904), _1831);
        _1920 = _1904.x * cbModelParam._m0[1u].z;
        _1922 = _1904.y * cbModelParam._m0[1u].z;
        _1924 = _1904.z * cbModelParam._m0[1u].z;
    }
    float _1936 = ((((1.0 - _923) * ((_910 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_923 * _910)) * _894;
    float _1937 = _1936 * ((cbModelParam._m0[1u].w * (_1920 - _1822)) + _1822);
    float _1938 = _1936 * ((cbModelParam._m0[1u].w * (_1922 - _1824)) + _1824);
    float _1939 = _1936 * ((cbModelParam._m0[1u].w * (_1924 - _1826)) + _1826);
    float _1942 = fma(_1939, cbSceneParam._m0[89u].z, fma(_1938, cbSceneParam._m0[89u].y, _1937 * cbSceneParam._m0[89u].x));
    float _1945 = fma(_1939, cbSceneParam._m0[90u].z, fma(_1938, cbSceneParam._m0[90u].y, _1937 * cbSceneParam._m0[90u].x));
    float _1948 = fma(_1939, cbSceneParam._m0[91u].z, fma(_1938, cbSceneParam._m0[91u].y, _1937 * cbSceneParam._m0[91u].x));
    float _1982 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1986 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1990 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1994 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1995 = _1982 / _1994;
    float _1996 = _1986 / _1994;
    float _1997 = _1990 / _1994;
    float _2144;
    float _2145;
    float _2146;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2024 = ((uint(_1997 > cbSceneParam._m0[59u].y) + uint(_1997 > cbSceneParam._m0[59u].x)) + uint(_1997 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2025 = _2024 + 43u;
        uint _2033 = _2024 + 44u;
        uint _2041 = _2024 + 45u;
        uint _2049 = _2024 + 46u;
        float _2060 = fma(_1994, cbSceneParam._m0[_2025].w, fma(_1990, cbSceneParam._m0[_2025].z, fma(_1986, cbSceneParam._m0[_2025].y, _1982 * cbSceneParam._m0[_2025].x)));
        float _2064 = fma(_1994, cbSceneParam._m0[_2033].w, fma(_1990, cbSceneParam._m0[_2033].z, fma(_1986, cbSceneParam._m0[_2033].y, _1982 * cbSceneParam._m0[_2033].x)));
        float _2072 = fma(_1994, cbSceneParam._m0[_2049].w, fma(_1990, cbSceneParam._m0[_2049].z, fma(_1986, cbSceneParam._m0[_2049].y, _1982 * cbSceneParam._m0[_2049].x)));
        float _2077 = cbSceneParam._m0[33u].z * _2072;
        float _2079 = cbSceneParam._m0[33u].w * _2072;
        float _2082 = fma(_1994, cbSceneParam._m0[_2041].w, fma(_1990, cbSceneParam._m0[_2041].z, fma(_1986, cbSceneParam._m0[_2041].y, _1982 * cbSceneParam._m0[_2041].x))) / _2072;
        float _2130 = (cbSceneParam._m0[33u].x - sqrt(((_1996 * _1996) + (_1995 * _1995)) + (_1997 * _1997))) * cbSceneParam._m0[33u].y;
        float _4503 = isnan(0.0) ? _2130 : (isnan(_2130) ? 0.0 : max(_2130, 0.0));
        float _2137 = (isnan(1.0) ? _4503 : (isnan(_4503) ? 1.0 : min(_4503, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2077 + _2060) / _2072, (_2079 + _2064) / _2072), _2082), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2079 + _2060) / _2072, (_2064 - _2077) / _2072), _2082), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2060 - _2077) / _2072, (_2064 - _2079) / _2072), _2082), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2060 - _2079) / _2072, (_2077 + _2064) / _2072), _2082), 0.0)).x), vec4(0.25)));
        _2144 = 1.0 - (_2137 * cbSceneParam._m0[34u].x);
        _2145 = 1.0 - (_2137 * cbSceneParam._m0[34u].y);
        _2146 = 1.0 - (_2137 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2144 = 1.0;
        _2145 = 1.0;
        _2146 = 1.0;
    }
    float _2210;
    float _2212;
    float _2214;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2198 = fma(_1994, cbSceneParam._m0[63u].w, fma(_1990, cbSceneParam._m0[63u].z, fma(_1986, cbSceneParam._m0[63u].y, _1982 * cbSceneParam._m0[63u].x)));
        float _2199 = fma(_1994, cbSceneParam._m0[60u].w, fma(_1990, cbSceneParam._m0[60u].z, fma(_1986, cbSceneParam._m0[60u].y, _1982 * cbSceneParam._m0[60u].x))) / _2198;
        float _2200 = fma(_1994, cbSceneParam._m0[61u].w, fma(_1990, cbSceneParam._m0[61u].z, fma(_1986, cbSceneParam._m0[61u].y, _1982 * cbSceneParam._m0[61u].x))) / _2198;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_2199 >= cbSceneParam._m0[64u].x) && (_2200 >= cbSceneParam._m0[64u].y)) && (_2199 <= cbSceneParam._m0[64u].z)) && (_2200 <= cbSceneParam._m0[64u].w))
        {
            float _2338 = fma(_1994, cbSceneParam._m0[62u].w, fma(_1990, cbSceneParam._m0[62u].z, fma(_1986, cbSceneParam._m0[62u].y, _1982 * cbSceneParam._m0[62u].x))) / _2198;
            float _2342 = isnan(cbSceneParam._m0[41u].w) ? _2338 : (isnan(_2338) ? cbSceneParam._m0[41u].w : max(_2338, cbSceneParam._m0[41u].w));
            float _2385 = (cbSceneParam._m0[33u].x - sqrt(((_1996 * _1996) + (_1995 * _1995)) + (_1997 * _1997))) * cbSceneParam._m0[33u].y;
            float _4519 = isnan(0.0) ? _2385 : (isnan(_2385) ? 0.0 : max(_2385, 0.0));
            float _2392 = (isnan(1.0) ? _4519 : (isnan(_4519) ? 1.0 : min(_4519, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2199, cbSceneParam._m0[33u].w + _2200), _2342), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2199, _2200 - cbSceneParam._m0[33u].z), _2342), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2199 - cbSceneParam._m0[33u].z, _2200 - cbSceneParam._m0[33u].w), _2342), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2199 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2200), _2342), 0.0)).x), vec4(0.25)));
            float _2396 = 1.0 - (_2392 * cbSceneParam._m0[34u].x);
            float _2397 = 1.0 - (_2392 * cbSceneParam._m0[34u].y);
            float _2398 = 1.0 - (_2392 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_2398) ? _2146 : (isnan(_2146) ? _2398 : min(_2146, _2398));
            frontier_phi_37_36_ladder_1 = isnan(_2397) ? _2145 : (isnan(_2145) ? _2397 : min(_2145, _2397));
            frontier_phi_37_36_ladder_2 = isnan(_2396) ? _2144 : (isnan(_2144) ? _2396 : min(_2144, _2396));
        }
        else
        {
            frontier_phi_37_36_ladder = _2146;
            frontier_phi_37_36_ladder_1 = _2145;
            frontier_phi_37_36_ladder_2 = _2144;
        }
        _2210 = frontier_phi_37_36_ladder_2;
        _2212 = frontier_phi_37_36_ladder_1;
        _2214 = frontier_phi_37_36_ladder;
    }
    else
    {
        _2210 = _2144;
        _2212 = _2145;
        _2214 = _2146;
    }
    uvec4 _2219 = floatBitsToUint(cbInstanceData._m0[_270 + 5u]);
    uint _2221 = _2219.x * 14u;
    uint _2222 = _2221 + 13u;
    float _2229 = _894 + (-1.0);
    float _2234 = (cbLight._m0[_2222].x * _2229) + 1.0;
    float _2235 = (cbLight._m0[_2222].y * _2229) + 1.0;
    float _2236 = (cbLight._m0[_2222].z * _2229) + 1.0;
    float _2237 = (cbLight._m0[_2222].w * _2229) + 1.0;
    uint _2238 = _2221 + 5u;
    float _2244 = isnan(1.0) ? _2235 : (isnan(_2235) ? 1.0 : min(_2235, 1.0));
    uint _2248 = _2221 + 4u;
    float _2257 = isnan(1.0) ? _2234 : (isnan(_2234) ? 1.0 : min(_2234, 1.0));
    uint _2261 = _2221 | 1u;
    float _2272 = dot(vec3(cbLight._m0[_2221].xyz), vec3(_731, _732, _733));
    float _2275 = dot(vec3(cbLight._m0[_2261].xyz), vec3(_731, _732, _733));
    float _4555 = isnan(0.0) ? _2272 : (isnan(_2272) ? 0.0 : max(_2272, 0.0));
    float _4566 = isnan(0.0) ? _2275 : (isnan(_2275) ? 0.0 : max(_2275, 0.0));
    float _2280 = (isnan(1.0) ? _4555 : (isnan(_4555) ? 1.0 : min(_4555, 1.0))) * 0.3183098733425140380859375;
    float _2282 = (isnan(1.0) ? _4566 : (isnan(_4566) ? 1.0 : min(_4566, 1.0))) * 0.3183098733425140380859375;
    float _2289 = ((cbLight._m0[_2238].x * _2244) * _2282) + (((cbLight._m0[_2248].x * _2210) * _2257) * _2280);
    float _2290 = ((_2244 * cbLight._m0[_2238].y) * _2282) + (((cbLight._m0[_2248].y * _2212) * _2257) * _2280);
    float _2291 = ((_2244 * cbLight._m0[_2238].z) * _2282) + (((cbLight._m0[_2248].z * _2214) * _2257) * _2280);
    uvec4 _2295 = floatBitsToUint(cbLight._m0[_2221 + 12u]);
    bool _2297 = _2295.x == 0u;
    float _2399;
    float _2401;
    float _2403;
    if (_2297)
    {
        _2399 = _2289;
        _2401 = _2290;
        _2403 = _2291;
    }
    else
    {
        uint _2407 = _2221 + 6u;
        float _2423 = (dot(vec3(cbLight._m0[_2221 + 2u].xyz), vec3(_731, _732, _733)) * 0.5) + 0.5;
        float _2424 = _2423 * _2423;
        float _4577 = isnan(0.0) ? _2424 : (isnan(_2424) ? 0.0 : max(_2424, 0.0));
        float _2425 = isnan(1.0) ? _4577 : (isnan(_4577) ? 1.0 : min(_4577, 1.0));
        float _2426 = isnan(1.0) ? _2236 : (isnan(_2236) ? 1.0 : min(_2236, 1.0));
        _2399 = (((cbLight._m0[_2407].x * 0.3183098733425140380859375) * _2425) * _2426) + _2289;
        _2401 = (((cbLight._m0[_2407].y * 0.3183098733425140380859375) * _2425) * _2426) + _2290;
        _2403 = (((cbLight._m0[_2407].z * 0.3183098733425140380859375) * _2425) * _2426) + _2291;
    }
    bool _2406 = _2295.y == 0u;
    float _2461;
    float _2463;
    float _2465;
    if (_2406)
    {
        _2461 = _2399;
        _2463 = _2401;
        _2465 = _2403;
    }
    else
    {
        uint _2623 = _2221 + 7u;
        float _2639 = (dot(vec3(cbLight._m0[_2221 + 3u].xyz), vec3(_731, _732, _733)) * 0.5) + 0.5;
        float _2640 = _2639 * _2639;
        float _4593 = isnan(0.0) ? _2640 : (isnan(_2640) ? 0.0 : max(_2640, 0.0));
        float _2641 = isnan(1.0) ? _4593 : (isnan(_4593) ? 1.0 : min(_4593, 1.0));
        float _2642 = isnan(1.0) ? _2237 : (isnan(_2237) ? 1.0 : min(_2237, 1.0));
        _2461 = (((cbLight._m0[_2623].x * 0.3183098733425140380859375) * _2641) * _2642) + _2399;
        _2463 = (((cbLight._m0[_2623].y * 0.3183098733425140380859375) * _2641) * _2642) + _2401;
        _2465 = (((cbLight._m0[_2623].z * 0.3183098733425140380859375) * _2641) * _2642) + _2403;
    }
    uint _2468 = _2221 + 8u;
    float _2481 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2221].w)) * _734) * 0.949999988079071044921875);
    float _2482 = _2481 * _2481;
    float _2483 = cbLight._m0[_2221].x + _811;
    float _2484 = cbLight._m0[_2221].y + _812;
    float _2485 = cbLight._m0[_2221].z + _813;
    float _2489 = inversesqrt(dot(vec3(_2483, _2484, _2485), vec3(_2483, _2484, _2485)));
    float _2490 = _2489 * _2483;
    float _2491 = _2489 * _2484;
    float _2492 = _2489 * _2485;
    float _2493 = dot(vec3(_731, _732, _733), vec3(cbLight._m0[_2221].xyz));
    float _4609 = isnan(0.0) ? _2493 : (isnan(_2493) ? 0.0 : max(_2493, 0.0));
    float _2496 = isnan(1.0) ? _4609 : (isnan(_4609) ? 1.0 : min(_4609, 1.0));
    float _4620 = isnan(0.0) ? _895 : (isnan(_895) ? 0.0 : max(_895, 0.0));
    float _2497 = isnan(1.0) ? _4620 : (isnan(_4620) ? 1.0 : min(_4620, 1.0));
    float _2498 = dot(vec3(_731, _732, _733), vec3(_2490, _2491, _2492));
    float _4631 = isnan(0.0) ? _2498 : (isnan(_2498) ? 0.0 : max(_2498, 0.0));
    float _2501 = isnan(1.0) ? _4631 : (isnan(_4631) ? 1.0 : min(_4631, 1.0));
    float _2502 = dot(vec3(cbLight._m0[_2221].xyz), vec3(_2490, _2491, _2492));
    float _4642 = isnan(0.0) ? _2502 : (isnan(_2502) ? 0.0 : max(_2502, 0.0));
    float _2506 = _2482 * _2482;
    float _2510 = ((_2501 * _2501) * (_2506 + (-1.0))) + 1.0;
    float _2521 = (exp2(log2(1.0 - (isnan(1.0) ? _4642 : (isnan(_4642) ? 1.0 : min(_4642, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2522 = 1.0 - _2482;
    float _2533 = (0.5 / (((_2497 * ((_2496 * _2522) + _2482)) + 9.9999999392252902907785028219223e-09) + (((_2497 * _2522) + _2482) * _2496))) * _2496;
    float _4653 = isnan(0.0) ? _2533 : (isnan(_2533) ? 0.0 : max(_2533, 0.0));
    float _2535 = (isnan(1.0) ? _4653 : (isnan(_4653) ? 1.0 : min(_4653, 1.0))) * (_2506 / ((_2510 * _2510) * 3.141590118408203125));
    uint _2549 = _2221 + 9u;
    float _2560 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2261].w)) * _734) * 0.949999988079071044921875);
    float _2561 = _2560 * _2560;
    float _2562 = cbLight._m0[_2261].x + _811;
    float _2563 = cbLight._m0[_2261].y + _812;
    float _2564 = cbLight._m0[_2261].z + _813;
    float _2568 = inversesqrt(dot(vec3(_2562, _2563, _2564), vec3(_2562, _2563, _2564)));
    float _2569 = _2568 * _2562;
    float _2570 = _2568 * _2563;
    float _2571 = _2568 * _2564;
    float _2572 = dot(vec3(_731, _732, _733), vec3(cbLight._m0[_2261].xyz));
    float _4664 = isnan(0.0) ? _2572 : (isnan(_2572) ? 0.0 : max(_2572, 0.0));
    float _2575 = isnan(1.0) ? _4664 : (isnan(_4664) ? 1.0 : min(_4664, 1.0));
    float _2576 = dot(vec3(_731, _732, _733), vec3(_2569, _2570, _2571));
    float _4675 = isnan(0.0) ? _2576 : (isnan(_2576) ? 0.0 : max(_2576, 0.0));
    float _2579 = isnan(1.0) ? _4675 : (isnan(_4675) ? 1.0 : min(_4675, 1.0));
    float _2580 = dot(vec3(cbLight._m0[_2261].xyz), vec3(_2569, _2570, _2571));
    float _4686 = isnan(0.0) ? _2580 : (isnan(_2580) ? 0.0 : max(_2580, 0.0));
    float _2584 = _2561 * _2561;
    float _2588 = ((_2579 * _2579) * (_2584 + (-1.0))) + 1.0;
    float _2597 = (exp2(log2(1.0 - (isnan(1.0) ? _4686 : (isnan(_4686) ? 1.0 : min(_4686, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2598 = 1.0 - _2561;
    float _2608 = (0.5 / (((_2497 * ((_2575 * _2598) + _2561)) + 9.9999999392252902907785028219223e-09) + (((_2497 * _2598) + _2561) * _2575))) * _2575;
    float _4697 = isnan(0.0) ? _2608 : (isnan(_2608) ? 0.0 : max(_2608, 0.0));
    float _2610 = (isnan(1.0) ? _4697 : (isnan(_4697) ? 1.0 : min(_4697, 1.0))) * (_2584 / ((_2588 * _2588) * 3.141590118408203125));
    float _2620 = (((_2597 * cbLight._m0[_2549].x) * _2610) * _2244) + ((((cbLight._m0[_2468].x * _2210) * _2521) * _2535) * _2257);
    float _2621 = (((_2597 * cbLight._m0[_2549].y) * _2610) * _2244) + ((((cbLight._m0[_2468].y * _2212) * _2521) * _2535) * _2257);
    float _2622 = (((_2597 * cbLight._m0[_2549].z) * _2610) * _2244) + ((((cbLight._m0[_2468].z * _2214) * _2521) * _2535) * _2257);
    float _2678;
    float _2680;
    float _2682;
    if (_2297)
    {
        _2678 = _2620;
        _2680 = _2621;
        _2682 = _2622;
    }
    else
    {
        uint _2684 = _2221 + 2u;
        uint _2688 = _2221 + 10u;
        float _2702 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2684].w)) * _734) * 0.949999988079071044921875);
        float _2703 = _2702 * _2702;
        float _2704 = cbLight._m0[_2684].x + _811;
        float _2705 = cbLight._m0[_2684].y + _812;
        float _2706 = cbLight._m0[_2684].z + _813;
        float _2710 = inversesqrt(dot(vec3(_2704, _2705, _2706), vec3(_2704, _2705, _2706)));
        float _2711 = _2710 * _2704;
        float _2712 = _2710 * _2705;
        float _2713 = _2710 * _2706;
        float _2714 = dot(vec3(_731, _732, _733), vec3(cbLight._m0[_2684].xyz));
        float _4708 = isnan(0.0) ? _2714 : (isnan(_2714) ? 0.0 : max(_2714, 0.0));
        float _2717 = isnan(1.0) ? _4708 : (isnan(_4708) ? 1.0 : min(_4708, 1.0));
        float _2718 = dot(vec3(_731, _732, _733), vec3(_2711, _2712, _2713));
        float _4719 = isnan(0.0) ? _2718 : (isnan(_2718) ? 0.0 : max(_2718, 0.0));
        float _2721 = isnan(1.0) ? _4719 : (isnan(_4719) ? 1.0 : min(_4719, 1.0));
        float _2722 = dot(vec3(cbLight._m0[_2684].xyz), vec3(_2711, _2712, _2713));
        float _4730 = isnan(0.0) ? _2722 : (isnan(_2722) ? 0.0 : max(_2722, 0.0));
        float _2726 = _2703 * _2703;
        float _2730 = ((_2721 * _2721) * (_2726 + (-1.0))) + 1.0;
        float _2739 = (exp2(log2(1.0 - (isnan(1.0) ? _4730 : (isnan(_4730) ? 1.0 : min(_4730, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2740 = 1.0 - _2703;
        float _2750 = (0.5 / (((_2497 * ((_2717 * _2740) + _2703)) + 9.9999999392252902907785028219223e-09) + (((_2497 * _2740) + _2703) * _2717))) * _2717;
        float _4741 = isnan(0.0) ? _2750 : (isnan(_2750) ? 0.0 : max(_2750, 0.0));
        float _2752 = (isnan(1.0) ? _4741 : (isnan(_4741) ? 1.0 : min(_4741, 1.0))) * (_2726 / ((_2730 * _2730) * 3.141590118408203125));
        float _2753 = isnan(1.0) ? _2236 : (isnan(_2236) ? 1.0 : min(_2236, 1.0));
        _2678 = (((_2739 * cbLight._m0[_2688].x) * _2752) * _2753) + _2620;
        _2680 = (((_2739 * cbLight._m0[_2688].y) * _2752) * _2753) + _2621;
        _2682 = (((_2739 * cbLight._m0[_2688].z) * _2752) * _2753) + _2622;
    }
    float _2784;
    float _2786;
    float _2788;
    if (_2406)
    {
        _2784 = _2678;
        _2786 = _2680;
        _2788 = _2682;
    }
    else
    {
        uint _2795 = _2221 + 3u;
        uint _2799 = _2221 + 11u;
        float _2813 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2795].w)) * _734) * 0.949999988079071044921875);
        float _2814 = _2813 * _2813;
        float _2815 = cbLight._m0[_2795].x + _811;
        float _2816 = cbLight._m0[_2795].y + _812;
        float _2817 = cbLight._m0[_2795].z + _813;
        float _2821 = inversesqrt(dot(vec3(_2815, _2816, _2817), vec3(_2815, _2816, _2817)));
        float _2822 = _2821 * _2815;
        float _2823 = _2821 * _2816;
        float _2824 = _2821 * _2817;
        float _2825 = dot(vec3(_731, _732, _733), vec3(cbLight._m0[_2795].xyz));
        float _4757 = isnan(0.0) ? _2825 : (isnan(_2825) ? 0.0 : max(_2825, 0.0));
        float _2828 = isnan(1.0) ? _4757 : (isnan(_4757) ? 1.0 : min(_4757, 1.0));
        float _2829 = dot(vec3(_731, _732, _733), vec3(_2822, _2823, _2824));
        float _4768 = isnan(0.0) ? _2829 : (isnan(_2829) ? 0.0 : max(_2829, 0.0));
        float _2832 = isnan(1.0) ? _4768 : (isnan(_4768) ? 1.0 : min(_4768, 1.0));
        float _2833 = dot(vec3(cbLight._m0[_2795].xyz), vec3(_2822, _2823, _2824));
        float _4779 = isnan(0.0) ? _2833 : (isnan(_2833) ? 0.0 : max(_2833, 0.0));
        float _2837 = _2814 * _2814;
        float _2841 = ((_2832 * _2832) * (_2837 + (-1.0))) + 1.0;
        float _2850 = (exp2(log2(1.0 - (isnan(1.0) ? _4779 : (isnan(_4779) ? 1.0 : min(_4779, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2851 = 1.0 - _2814;
        float _2861 = (0.5 / (((_2497 * ((_2828 * _2851) + _2814)) + 9.9999999392252902907785028219223e-09) + (((_2497 * _2851) + _2814) * _2828))) * _2828;
        float _4790 = isnan(0.0) ? _2861 : (isnan(_2861) ? 0.0 : max(_2861, 0.0));
        float _2863 = (isnan(1.0) ? _4790 : (isnan(_4790) ? 1.0 : min(_4790, 1.0))) * (_2837 / ((_2841 * _2841) * 3.141590118408203125));
        float _2864 = isnan(1.0) ? _2237 : (isnan(_2237) ? 1.0 : min(_2237, 1.0));
        _2784 = (((_2850 * cbLight._m0[_2799].x) * _2863) * _2864) + _2678;
        _2786 = (((_2850 * cbLight._m0[_2799].y) * _2863) * _2864) + _2680;
        _2788 = (((_2850 * cbLight._m0[_2799].z) * _2863) * _2864) + _2682;
    }
    float _2930;
    float _2932;
    float _2934;
    float _2936;
    float _2938;
    float _2940;
    if (_2219.y == 0u)
    {
        uvec4 _2885 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2886 = _2885.x;
        uint _2897 = uint((float(_2885.y) * floor(float(uint(cbSceneParam._m0[85u].y * _832) / _2886))) + floor(float(uint(cbSceneParam._m0[85u].x * _831) / _2886)));
        float _2907 = (log2(_1997 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2908 = isnan(0.0) ? _2907 : (isnan(_2907) ? 0.0 : max(_2907, 0.0));
        uint _2911 = uint(isnan(14.0) ? _2908 : (isnan(_2908) ? 14.0 : min(_2908, 14.0)));
        uvec4 _2916 = texelFetch(g_lightClusterGridBuffer, int(((_2911 << 2u) + (_2897 << 6u)) >> 2u));
        uint _2917 = _2916.x;
        uint _2918 = _2885.z;
        float _2997;
        float _2999;
        float _3001;
        float _3003;
        float _3005;
        float _3007;
        if (((((1u << ((_2918 >> 4u) & 15u)) + 4294967295u) & _2917) == 0u) || ((_2918 & 240u) == 0u))
        {
            _2997 = 0.0;
            _2999 = 0.0;
            _3001 = 0.0;
            _3003 = 0.0;
            _3005 = 0.0;
            _3007 = 0.0;
        }
        else
        {
            float _2998;
            float _3000;
            float _3002;
            float _3004;
            float _3006;
            float _3008;
            float _3150 = 0.0;
            float _3151 = 0.0;
            float _3152 = 0.0;
            float _3153 = 0.0;
            float _3154 = 0.0;
            float _3155 = 0.0;
            uint _3156 = 0u;
            uint _3165;
            bool _3166;
            for (;;)
            {
                _3165 = texelFetch(g_lightClassification, int((((_2911 << 5u) + (_2897 << 9u)) + (_3156 << 2u)) >> 2u)).x;
                _3166 = _3165 == 0u;
                float frontier_phi_71_pred;
                float frontier_phi_71_pred_1;
                float frontier_phi_71_pred_2;
                float frontier_phi_71_pred_3;
                float frontier_phi_71_pred_4;
                float frontier_phi_71_pred_5;
                if (_3166)
                {
                    frontier_phi_71_pred = _3155;
                    frontier_phi_71_pred_1 = _3154;
                    frontier_phi_71_pred_2 = _3153;
                    frontier_phi_71_pred_3 = _3152;
                    frontier_phi_71_pred_4 = _3151;
                    frontier_phi_71_pred_5 = _3150;
                }
                else
                {
                    float _3295;
                    float _3296;
                    float _3297;
                    float _3298;
                    float _3299;
                    float _3300;
                    uint _3301;
                    _3295 = _3150;
                    _3296 = _3151;
                    _3297 = _3152;
                    _3298 = _3153;
                    _3299 = _3154;
                    _3300 = _3155;
                    _3301 = _3165;
                    float _3222;
                    float _3223;
                    float _3224;
                    float _3225;
                    float _3226;
                    float _3227;
                    for (;;)
                    {
                        uint _3305 = uint(findLSB(_3301)) + (_3156 << 5u);
                        uint _3302 = (_3301 + 4294967295u) & _3301;
                        uint _3307 = _3305 * 48u;
                        vec4 _3321 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3307)).x, texelFetch(g_PointLightRenderingBuffer, int(_3307 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3307 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3307 + 3u)).x));
                        uint _3327 = (_3305 * 48u) + 4u;
                        vec4 _3340 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3327)).x, texelFetch(g_PointLightRenderingBuffer, int(_3327 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3327 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3327 + 3u)).x));
                        uint _3346 = (_3305 * 48u) + 8u;
                        vec3 _3357 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3346)).x, texelFetch(g_PointLightRenderingBuffer, int(_3346 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3346 + 2u)).x));
                        float _3361 = _3321.x - _1995;
                        float _3362 = _3321.y - _1996;
                        float _3363 = _3321.z - _1997;
                        float _3364 = dot(vec3(_3361, _3362, _3363), vec3(_3361, _3362, _3363));
                        float _3367 = inversesqrt(_3364);
                        float _3368 = _3367 * _3361;
                        float _3369 = _3367 * _3362;
                        float _3370 = _3367 * _3363;
                        float _3371 = dot(vec3(_850, _853, _856), vec3(_3368, _3369, _3370));
                        float _3376 = 1.0 - (_3364 * _3321.w);
                        float _4816 = isnan(0.0) ? _3376 : (isnan(_3376) ? 0.0 : max(_3376, 0.0));
                        float _3377 = isnan(1.0) ? _4816 : (isnan(_4816) ? 1.0 : min(_4816, 1.0));
                        float _3378 = sqrt(_3364) * _3340.w;
                        float _3381 = 1.39999997615814208984375 / (_3378 + 1.39999997615814208984375);
                        float _3382 = _3381 * _3381;
                        float _3385 = ((1.0 - _3382) * _3371) + _3382;
                        float _3388 = _3378 * _3378;
                        float _3392 = ((isnan(0.0) ? _3385 : (isnan(_3385) ? 0.0 : max(_3385, 0.0))) * _3377) / ((_3388 * 0.699999988079071044921875) + 1.0);
                        float _3396 = (-0.0) - _1995;
                        float _3397 = (-0.0) - _1996;
                        float _3398 = (-0.0) - _1997;
                        float _3402 = inversesqrt(dot(vec3(_3396, _3397, _3398), vec3(_3396, _3397, _3398)));
                        float _3403 = _3402 * _3396;
                        float _3404 = _3402 * _3397;
                        float _3405 = _3402 * _3398;
                        float _3412 = exp2(log2(1.0 / ((_3388 * 3.5) + 5.0)) * 0.25);
                        float _3413 = 1.0 - _910;
                        float _3420 = sqrt(1.0 - ((1.0 - (_3413 * _3413)) * (1.0 - (_3412 * _3412))));
                        float _3421 = _3420 * _3420;
                        float _3422 = _3421 * _3421;
                        float _3423 = _3403 + _3368;
                        float _3424 = _3404 + _3369;
                        float _3425 = _3405 + _3370;
                        float _3429 = inversesqrt(dot(vec3(_3423, _3424, _3425), vec3(_3423, _3424, _3425)));
                        float _3433 = dot(vec3(_850, _853, _856), vec3(_3403, _3404, _3405));
                        float _4832 = isnan(0.0) ? _3433 : (isnan(_3433) ? 0.0 : max(_3433, 0.0));
                        float _3436 = isnan(1.0) ? _4832 : (isnan(_4832) ? 1.0 : min(_4832, 1.0));
                        float _3437 = dot(vec3(_850, _853, _856), vec3(_3429 * _3423, _3429 * _3424, _3429 * _3425));
                        float _4843 = isnan(0.0) ? _3437 : (isnan(_3437) ? 0.0 : max(_3437, 0.0));
                        float _3440 = isnan(1.0) ? _4843 : (isnan(_4843) ? 1.0 : min(_4843, 1.0));
                        float _3444 = ((_3440 * _3440) * (_3422 + (-1.0))) + 1.0;
                        float _3445 = _3381 * _3421;
                        float _3446 = _3445 * _3445;
                        float _3449 = ((1.0 - _3446) * _3371) + _3446;
                        float _4854 = isnan(0.0) ? _3449 : (isnan(_3449) ? 0.0 : max(_3449, 0.0));
                        float _3450 = isnan(1.0) ? _4854 : (isnan(_4854) ? 1.0 : min(_4854, 1.0));
                        float _3451 = 1.0 - _3421;
                        float _3461 = (0.5 / (((_3450 * ((_3436 * _3451) + _3421)) + 9.9999999392252902907785028219223e-09) + (((_3450 * _3451) + _3421) * _3436))) * _3450;
                        float _4865 = isnan(0.0) ? _3461 : (isnan(_3461) ? 0.0 : max(_3461, 0.0));
                        float _3472 = (((_3422 * 3.1415927410125732421875) * (isnan(1.0) ? _4865 : (isnan(_4865) ? 1.0 : min(_4865, 1.0)))) / ((_3444 * _3444) * ((_3388 * 2.1991131305694580078125) + 3.141590118408203125))) * _3377;
                        _3225 = (_3392 * _3340.x) + _3298;
                        _3226 = (_3392 * _3340.y) + _3299;
                        _3227 = (_3392 * _3340.z) + _3300;
                        _3222 = (_3472 * _3357.x) + _3295;
                        _3223 = (_3472 * _3357.y) + _3296;
                        _3224 = (_3472 * _3357.z) + _3297;
                        if (_3302 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3295 = _3222;
                            _3296 = _3223;
                            _3297 = _3224;
                            _3298 = _3225;
                            _3299 = _3226;
                            _3300 = _3227;
                            _3301 = _3302;
                        }
                    }
                    frontier_phi_71_pred = _3227;
                    frontier_phi_71_pred_1 = _3226;
                    frontier_phi_71_pred_2 = _3225;
                    frontier_phi_71_pred_3 = _3224;
                    frontier_phi_71_pred_4 = _3223;
                    frontier_phi_71_pred_5 = _3222;
                }
                _3008 = frontier_phi_71_pred;
                _3006 = frontier_phi_71_pred_1;
                _3004 = frontier_phi_71_pred_2;
                _3002 = frontier_phi_71_pred_3;
                _3000 = frontier_phi_71_pred_4;
                _2998 = frontier_phi_71_pred_5;
                uint _3157 = _3156 + 1u;
                if (_3157 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3150 = _2998;
                    _3151 = _3000;
                    _3152 = _3002;
                    _3153 = _3004;
                    _3154 = _3006;
                    _3155 = _3008;
                    _3156 = _3157;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2997 = _2998;
            _2999 = _3000;
            _3001 = _3002;
            _3003 = _3004;
            _3005 = _3006;
            _3007 = _3008;
        }
        uvec4 _3011 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3012 = _3011.z;
        uint _3014 = (_3012 >> 8u) & 15u;
        float _3118;
        float _3120;
        float _3122;
        float _3124;
        float _3126;
        float _3128;
        if (((4294967295u << _3014) & _2917) == 0u)
        {
            _3118 = _2997;
            _3120 = _2999;
            _3122 = _3001;
            _3124 = _3003;
            _3126 = _3005;
            _3128 = _3007;
        }
        else
        {
            float _3143 = inversesqrt(dot(vec3(_1995, _1996, _1997), vec3(_1995, _1996, _1997)));
            float _3144 = _3143 * _1995;
            float _3145 = _3143 * _1996;
            float _3146 = _3143 * _1997;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_3014 < ((_3012 >> 12u) & 15u))
            {
                float _3119;
                float _3121;
                float _3123;
                float _3125;
                float _3127;
                float _3129;
                float _3278 = _2997;
                float _3279 = _2999;
                float _3280 = _3001;
                float _3281 = _3003;
                float _3282 = _3005;
                float _3283 = _3007;
                uint _3284 = _3014;
                uint _3293;
                bool _3294;
                for (;;)
                {
                    _3293 = texelFetch(g_lightClassification, int((((_2911 << 5u) + (_2897 << 9u)) + (_3284 << 2u)) >> 2u)).x;
                    _3294 = _3293 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    float frontier_phi_82_pred_3;
                    float frontier_phi_82_pred_4;
                    float frontier_phi_82_pred_5;
                    if (_3294)
                    {
                        frontier_phi_82_pred = _3283;
                        frontier_phi_82_pred_1 = _3282;
                        frontier_phi_82_pred_2 = _3281;
                        frontier_phi_82_pred_3 = _3280;
                        frontier_phi_82_pred_4 = _3279;
                        frontier_phi_82_pred_5 = _3278;
                    }
                    else
                    {
                        float _3486;
                        float _3487;
                        float _3488;
                        float _3489;
                        float _3490;
                        float _3491;
                        float _3779;
                        float _3780;
                        float _3781;
                        float _3782;
                        float _3783;
                        float _3784;
                        float _3499 = _3278;
                        float _3500 = _3279;
                        float _3501 = _3280;
                        float _3502 = _3281;
                        float _3503 = _3282;
                        float _3504 = _3283;
                        uint _3505 = _3293;
                        uint _3506;
                        vec4 _3531;
                        float _3532;
                        vec4 _3547;
                        vec3 _3559;
                        vec4 _3574;
                        vec4 _3589;
                        float _3635;
                        bool _3636;
                        for (;;)
                        {
                            uint _3516 = ((_3284 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3505));
                            _3506 = (_3505 + 4294967295u) & _3505;
                            uint _3518 = _3516 * 40u;
                            _3531 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3518)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3518 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3518 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3518 + 3u)).x));
                            _3532 = _3531.w;
                            uint _3534 = (_3516 * 40u) + 4u;
                            _3547 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3534)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3534 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3534 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3534 + 3u)).x));
                            uint _3549 = (_3516 * 40u) + 8u;
                            _3559 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3549)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3549 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3549 + 2u)).x));
                            uint _3561 = (_3516 * 40u) + 16u;
                            _3574 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3561)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3561 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3561 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3561 + 3u)).x));
                            uint _3576 = (_3516 * 40u) + 20u;
                            _3589 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3576)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3576 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3576 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3576 + 3u)).x));
                            uint _3591 = (_3516 * 40u) + 24u;
                            vec4 _3604 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3591)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3591 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3591 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3591 + 3u)).x));
                            uint _3610 = (_3516 * 40u) + 28u;
                            vec4 _3623 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3610)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3610 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3610 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3610 + 3u)).x));
                            _3635 = fma(_1997, _3623.z, fma(_1996, _3623.y, _3623.x * _1995)) + _3623.w;
                            _3636 = !((fma(_1997, _3604.z, fma(_1996, _3604.y, _3604.x * _1995)) + _3604.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_3636)
                            {
                                float _3663 = _3531.x - _1995;
                                float _3664 = _3531.y - _1996;
                                float _3665 = _3531.z - _1997;
                                float _3666 = dot(vec3(_3663, _3664, _3665), vec3(_3663, _3664, _3665));
                                float _3669 = inversesqrt(_3666);
                                float _3670 = _3669 * _3663;
                                float _3671 = _3669 * _3664;
                                float _3672 = _3669 * _3665;
                                float _3676 = 1.0 - (_3666 / (_3532 * _3532));
                                float _4876 = isnan(0.0) ? _3676 : (isnan(_3676) ? 0.0 : max(_3676, 0.0));
                                float _3677 = isnan(1.0) ? _4876 : (isnan(_4876) ? 1.0 : min(_4876, 1.0));
                                float _3681 = sqrt(_3666) * _3547.w;
                                float _3683 = 1.39999997615814208984375 / (_3681 + 1.39999997615814208984375);
                                float _3684 = _3683 * _3683;
                                float _3687 = ((1.0 - _3684) * dot(vec3(_3670, _3671, _3672), vec3(_850, _853, _856))) + _3684;
                                float _3690 = _3681 * _3681;
                                float _3694 = (fma(_1997, _3574.z, fma(_1996, _3574.y, _3574.x * _1995)) + _3574.w) / _3635;
                                float _3695 = (fma(_1997, _3589.z, fma(_1996, _3589.y, _3589.x * _1995)) + _3589.w) / _3635;
                                float _3699 = 1.0 - dot(vec2(_3694, _3695), vec2(_3694, _3695));
                                float _4892 = isnan(0.0) ? _3699 : (isnan(_3699) ? 0.0 : max(_3699, 0.0));
                                float _3700 = isnan(1.0) ? _4892 : (isnan(_4892) ? 1.0 : min(_4892, 1.0));
                                float _3701 = _3700 * (((isnan(0.0) ? _3687 : (isnan(_3687) ? 0.0 : max(_3687, 0.0))) * _3677) / ((_3690 * 0.699999988079071044921875) + 1.0));
                                float _3713 = exp2(log2(1.0 / ((_3690 * 3.5) + 5.0)) * 0.25);
                                float _3714 = 1.0 - _910;
                                float _3721 = sqrt(1.0 - ((1.0 - (_3714 * _3714)) * (1.0 - (_3713 * _3713))));
                                float _3722 = _3721 * _3721;
                                float _3723 = _3722 * _3722;
                                float _3724 = _3670 - _3144;
                                float _3725 = _3671 - _3145;
                                float _3726 = _3672 - _3146;
                                float _3730 = inversesqrt(dot(vec3(_3724, _3725, _3726), vec3(_3724, _3725, _3726)));
                                float _3734 = dot(vec3(_850, _853, _856), vec3((-0.0) - _3144, (-0.0) - _3145, (-0.0) - _3146));
                                float _4903 = isnan(0.0) ? _3734 : (isnan(_3734) ? 0.0 : max(_3734, 0.0));
                                float _3737 = isnan(1.0) ? _4903 : (isnan(_4903) ? 1.0 : min(_4903, 1.0));
                                float _3738 = dot(vec3(_850, _853, _856), vec3(_3730 * _3724, _3730 * _3725, _3730 * _3726));
                                float _4914 = isnan(0.0) ? _3738 : (isnan(_3738) ? 0.0 : max(_3738, 0.0));
                                float _3741 = isnan(1.0) ? _4914 : (isnan(_4914) ? 1.0 : min(_4914, 1.0));
                                float _3745 = ((_3741 * _3741) * (_3723 + (-1.0))) + 1.0;
                                float _3746 = _3683 * _3722;
                                float _3747 = _3746 * _3746;
                                float _3753 = ((1.0 - _3747) * dot(vec3(_850, _853, _856), vec3(_3670, _3671, _3672))) + _3747;
                                float _4925 = isnan(0.0) ? _3753 : (isnan(_3753) ? 0.0 : max(_3753, 0.0));
                                float _3754 = isnan(1.0) ? _4925 : (isnan(_4925) ? 1.0 : min(_4925, 1.0));
                                float _3755 = 1.0 - _3722;
                                float _3765 = (0.5 / (((_3754 * ((_3737 * _3755) + _3722)) + 9.9999999392252902907785028219223e-09) + (((_3754 * _3755) + _3722) * _3737))) * _3754;
                                float _4936 = isnan(0.0) ? _3765 : (isnan(_3765) ? 0.0 : max(_3765, 0.0));
                                float _3775 = (_3700 * _3677) * (((_3723 * 3.1415927410125732421875) * (isnan(1.0) ? _4936 : (isnan(_4936) ? 1.0 : min(_4936, 1.0)))) / ((_3745 * _3745) * ((_3690 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_88_pred = _3701 * _3547.z;
                                frontier_phi_88_pred_1 = _3701 * _3547.y;
                                frontier_phi_88_pred_2 = _3701 * _3547.x;
                                frontier_phi_88_pred_3 = _3775 * _3559.z;
                                frontier_phi_88_pred_4 = _3775 * _3559.y;
                                frontier_phi_88_pred_5 = _3775 * _3559.x;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _3784 = frontier_phi_88_pred;
                            _3783 = frontier_phi_88_pred_1;
                            _3782 = frontier_phi_88_pred_2;
                            _3781 = frontier_phi_88_pred_3;
                            _3780 = frontier_phi_88_pred_4;
                            _3779 = frontier_phi_88_pred_5;
                            _3489 = _3782 + _3502;
                            _3490 = _3783 + _3503;
                            _3491 = _3784 + _3504;
                            _3486 = _3779 + _3499;
                            _3487 = _3780 + _3500;
                            _3488 = _3781 + _3501;
                            if (_3506 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3499 = _3486;
                                _3500 = _3487;
                                _3501 = _3488;
                                _3502 = _3489;
                                _3503 = _3490;
                                _3504 = _3491;
                                _3505 = _3506;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _3491;
                        frontier_phi_82_pred_1 = _3490;
                        frontier_phi_82_pred_2 = _3489;
                        frontier_phi_82_pred_3 = _3488;
                        frontier_phi_82_pred_4 = _3487;
                        frontier_phi_82_pred_5 = _3486;
                    }
                    _3129 = frontier_phi_82_pred;
                    _3127 = frontier_phi_82_pred_1;
                    _3125 = frontier_phi_82_pred_2;
                    _3123 = frontier_phi_82_pred_3;
                    _3121 = frontier_phi_82_pred_4;
                    _3119 = frontier_phi_82_pred_5;
                    uint _3285 = _3284 + 1u;
                    if (_3285 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3278 = _3119;
                        _3279 = _3121;
                        _3280 = _3123;
                        _3281 = _3125;
                        _3282 = _3127;
                        _3283 = _3129;
                        _3284 = _3285;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _3125;
                frontier_phi_63_64_ladder_1 = _3129;
                frontier_phi_63_64_ladder_2 = _3127;
                frontier_phi_63_64_ladder_3 = _3123;
                frontier_phi_63_64_ladder_4 = _3121;
                frontier_phi_63_64_ladder_5 = _3119;
            }
            else
            {
                frontier_phi_63_64_ladder = _3003;
                frontier_phi_63_64_ladder_1 = _3007;
                frontier_phi_63_64_ladder_2 = _3005;
                frontier_phi_63_64_ladder_3 = _3001;
                frontier_phi_63_64_ladder_4 = _2999;
                frontier_phi_63_64_ladder_5 = _2997;
            }
            _3118 = frontier_phi_63_64_ladder_5;
            _3120 = frontier_phi_63_64_ladder_4;
            _3122 = frontier_phi_63_64_ladder_3;
            _3124 = frontier_phi_63_64_ladder;
            _3126 = frontier_phi_63_64_ladder_2;
            _3128 = frontier_phi_63_64_ladder_1;
        }
        float _3133 = isnan(1.0) ? _894 : (isnan(_894) ? 1.0 : min(_894, 1.0));
        _2930 = (_3133 * _3124) + _2461;
        _2932 = (_3133 * _3126) + _2463;
        _2934 = (_3133 * _3128) + _2465;
        _2936 = ((_3118 * 0.039999999105930328369140625) * _3133) + _2784;
        _2938 = ((_3120 * 0.039999999105930328369140625) * _3133) + _2786;
        _2940 = ((_3122 * 0.039999999105930328369140625) * _3133) + _2788;
    }
    else
    {
        _2930 = _2461;
        _2932 = _2463;
        _2934 = _2465;
        _2936 = _2784;
        _2938 = _2786;
        _2940 = _2788;
    }
    float _4952 = isnan(0.0) ? _879 : (isnan(_879) ? 0.0 : max(_879, 0.0));
    float _4963 = isnan(0.0) ? _880 : (isnan(_880) ? 0.0 : max(_880, 0.0));
    float _4974 = isnan(0.0) ? _881 : (isnan(_881) ? 0.0 : max(_881, 0.0));
    float _2957 = ((isnan(1.0) ? _4952 : (isnan(_4952) ? 1.0 : min(_4952, 1.0))) * (_2930 + ((isnan(0.0) ? _1652 : (isnan(_1652) ? 0.0 : max(_1652, 0.0))) * _894))) + ((_2936 + ((isnan(0.0) ? _1942 : (isnan(_1942) ? 0.0 : max(_1942, 0.0))) * _1731)) * cbPerFrame._m0[3u].x);
    float _2958 = ((isnan(1.0) ? _4963 : (isnan(_4963) ? 1.0 : min(_4963, 1.0))) * (_2932 + ((isnan(0.0) ? _1655 : (isnan(_1655) ? 0.0 : max(_1655, 0.0))) * _894))) + ((_2938 + ((isnan(0.0) ? _1945 : (isnan(_1945) ? 0.0 : max(_1945, 0.0))) * _1731)) * cbPerFrame._m0[3u].x);
    float _2959 = ((isnan(1.0) ? _4974 : (isnan(_4974) ? 1.0 : min(_4974, 1.0))) * (_2934 + ((isnan(0.0) ? _1658 : (isnan(_1658) ? 0.0 : max(_1658, 0.0))) * _894))) + ((_2940 + ((isnan(0.0) ? _1948 : (isnan(_1948) ? 0.0 : max(_1948, 0.0))) * _1731)) * cbPerFrame._m0[3u].x);
    uint _2960 = _270 + 6u;
    float _2968 = _831 / cbSceneParam._m0[86u].x;
    float _2969 = _832 / cbSceneParam._m0[86u].y;
    vec4 _2983 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2968, _2969, (log2((isnan(cbSceneParam._m0[77u].w) ? _752 : (isnan(_752) ? cbSceneParam._m0[77u].w : min(_752, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2985 = _2983.x;
    float _2986 = _2983.y;
    float _2987 = _2983.z;
    float _2988 = _2983.w;
    float _3060;
    float _3062;
    float _3064;
    float _3066;
    if (_752 > cbSceneParam._m0[78u].w)
    {
        float _3022 = isnan(_752) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _752 : min(cbSceneParam._m0[80u].w, _752));
        float _3023 = _3022 / _752;
        float _3034 = _3023 * _804;
        float _3035 = _805 * _3023;
        float _3036 = (-0.0) - _3035;
        float _3038 = _3023 * _806;
        float _3040 = (cbSceneParam._m0[77u].w * _3036) / _3022;
        float _3041 = _3040 + cbSceneParam._m0[79u].w;
        float _3042 = cbSceneParam._m0[79u].w - _3035;
        float _3048 = sqrt(((_3034 * _3034) + (_3035 * _3035)) + (_3038 * _3038));
        float _3051 = (1.0 - (cbSceneParam._m0[77u].w / _3022)) * _3048;
        float _3056 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3058 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3235;
        if (abs((_3036 - _3040) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3235 = ((((_3041 > 0.0) ? exp2(_3056 * _3041) : (2.0 - exp2(_3058 * _3041))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3051;
        }
        else
        {
            float _3179 = 1.0 / cbSceneParam._m0[80u].x;
            float _3180 = isnan(_3042) ? _3041 : (isnan(_3041) ? _3042 : max(_3041, _3042));
            float _3181 = isnan(_3042) ? _3041 : (isnan(_3041) ? _3042 : min(_3041, _3042));
            float _3190 = isnan(0.0) ? _3180 : (isnan(_3180) ? 0.0 : min(_3180, 0.0));
            float _3191 = isnan(0.0) ? _3181 : (isnan(_3181) ? 0.0 : min(_3181, 0.0));
            _3235 = ((abs(_3048 / _3036) * cbSceneParam._m0[80u].y) * ((((_3190 - _3191) * 2.0) - ((exp2(_3056 * (isnan(0.0) ? _3180 : (isnan(_3180) ? 0.0 : max(_3180, 0.0)))) - exp2(_3056 * (isnan(0.0) ? _3181 : (isnan(_3181) ? 0.0 : max(_3181, 0.0))))) * _3179)) - ((exp2(_3058 * _3190) - exp2(_3058 * _3191)) * _3179))) + (_3051 * cbSceneParam._m0[80u].z);
        }
        vec4 _3237 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2968, _2969, 1.0), 0.0);
        float _3246 = exp2((_3235 * (-1.44269502162933349609375)) * (1.0 - _3237.w));
        float _3247 = log2(_3246);
        float _3263 = log2(_2988);
        _3060 = (exp2(_3263 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3247 * cbSceneParam._m0[78u].x)) * _3237.x) / cbSceneParam._m0[78u].x)) + _2985;
        _3062 = (exp2(_3263 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3247 * cbSceneParam._m0[78u].y)) * _3237.y) / cbSceneParam._m0[78u].y)) + _2986;
        _3064 = (exp2(_3263 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3247 * cbSceneParam._m0[78u].z)) * _3237.z) / cbSceneParam._m0[78u].z)) + _2987;
        _3066 = _3246 * _2988;
    }
    else
    {
        _3060 = _2985;
        _3062 = _2986;
        _3064 = _2987;
        _3066 = _2988;
    }
    bool _3273;
    vec4 _3076;
    vec4 _3098;
    float _3100;
    float _3104;
    float _3105;
    float _3106;
    float _3107;
    bool _3117;
    for (;;)
    {
        _3076 = cbMatDynParam._m0[0u];
        float _3078 = roundEven(_3076.y);
        bool _3079 = _3078 == 3.0;
        float _3080 = log2(_3066);
        float _3087 = exp2(_3080 * cbSceneParam._m0[78u].x) * _2957;
        float _3088 = exp2(_3080 * cbSceneParam._m0[78u].y) * _2958;
        float _3089 = exp2(_3080 * cbSceneParam._m0[78u].z) * _2959;
        float _3096 = _820 + (-0.5);
        _3098 = cbMtdParam._m0[1u];
        _3100 = _3098.y * _3096;
        float _3103 = (_3078 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3104 = _3103 * (_3079 ? _3087 : (_3087 + (cbSceneParam._m0[72u].w * _3060)));
        _3105 = _3103 * (_3079 ? _3088 : (_3088 + (cbSceneParam._m0[72u].w * _3062)));
        _3106 = _3103 * (_3079 ? _3089 : (_3089 + (cbSceneParam._m0[72u].w * _3064)));
        _3107 = _3096 * 0.999000012874603271484375;
        _3117 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3117)
        {
            if ((cbInstanceData._m0[_270 + 7u].x + _3107) < 0.5)
            {
                _3273 = true;
                break;
            }
        }
        uint _3214 = _869 + uint(_3076.w);
        if ((cbInstanceData._m0[_3214].w < 1.0) && ((cbInstanceData._m0[_3214].w + _3107) < 0.5))
        {
            _3273 = true;
            break;
        }
        if ((_3100 + 1.0) < _3098.x)
        {
            _3273 = true;
            break;
        }
        _3273 = false;
        break;
    }
    float _3477;
    if (_3273)
    {
        discard_state = true;
        _3477 = 0.0;
    }
    else
    {
        _3477 = cbInstanceData._m0[_2960].w;
    }
    SV_Target.x = _3104;
    SV_Target.y = _3105;
    SV_Target.z = _3106;
    SV_Target.w = _3477;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2960].w;
    discard_exit();
}


