#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_0;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 13) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_22;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_29;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_10;
layout(set = 0, binding = 20) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_6;
layout(set = 0, binding = 23) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_8;
layout(set = 0, binding = 24) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_9;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1655;
float _4294;
float _4295;
float _4296;
float _4297;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _248 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _249 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _250 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _256 = inversesqrt(dot(vec3(_248, _249, _250), vec3(_248, _249, _250)));
    float _257 = _256 * _248;
    float _258 = _256 * _249;
    float _259 = _256 * _250;
    float _263 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _264 = _263 * NORMAL.x;
    float _265 = _263 * NORMAL.y;
    float _266 = _263 * NORMAL.z;
    float _270 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _271 = _270 * TANGENT.x;
    float _272 = _270 * TANGENT.y;
    float _273 = _270 * TANGENT.z;
    float _282 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _284 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _285 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _4306 = isnan(0.0) ? _282 : (isnan(_282) ? 0.0 : max(_282, 0.0));
    float _4317 = isnan(0.0) ? _284 : (isnan(_284) ? 0.0 : max(_284, 0.0));
    float _4328 = isnan(0.0) ? _285 : (isnan(_285) ? 0.0 : max(_285, 0.0));
    uint _295 = uint(roundEven(NORMAL.w)) * 13u;
    uint _300 = _295 + 1u;
    uint _304 = _295 + 2u;
    float _313 = sqrt(((cbInstanceData._m0[_300].x * cbInstanceData._m0[_300].x) + (cbInstanceData._m0[_295].x * cbInstanceData._m0[_295].x)) + (cbInstanceData._m0[_304].x * cbInstanceData._m0[_304].x));
    float _314 = _313 * TEXCOORD.z;
    float _315 = _313 * TEXCOORD.w;
    vec4 _328 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _314) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _315) + cbTextureTilingScale._m0[13u].w));
    vec4 _351 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _377 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _382 = _377.x * cbMtdParam._m0[11u].x;
    float _383 = _377.y * cbMtdParam._m0[11u].y;
    float _384 = _377.z * cbMtdParam._m0[11u].z;
    vec4 _403 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _314) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _315) + cbTextureTilingScale._m0[5u].w));
    vec4 _422 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _460 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _462 = _460.x;
    float _474 = dot(vec4(_462, _460.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _491 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _422.x) * 2.0) - ((((_462 - _474) * cbMtdParam._m0[24u].z) + _474) * cbMtdParam._m0[23u].x))) + 1.0;
    float _4339 = isnan(0.0) ? _491 : (isnan(_491) ? 0.0 : max(_491, 0.0));
    float _492 = isnan(1.0) ? _4339 : (isnan(_4339) ? 1.0 : min(_4339, 1.0));
    float _499 = (_492 * ((_403.x * cbMtdParam._m0[12u].x) - _382)) + _382;
    float _500 = (_492 * ((_403.y * cbMtdParam._m0[12u].y) - _383)) + _383;
    float _501 = (_492 * ((_403.z * cbMtdParam._m0[12u].z) - _384)) + _384;
    vec4 _518 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _314) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _315) + cbTextureTilingScale._m0[3u].w));
    vec4 _538 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _540 = _538.x;
    float _550 = dot(vec4(_540, _538.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _564 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _422.y) * 2.0) - ((((_540 - _550) * cbMtdParam._m0[24u].z) + _550) * cbMtdParam._m0[20u].w))) + 1.0;
    float _4350 = isnan(0.0) ? _564 : (isnan(_564) ? 0.0 : max(_564, 0.0));
    float _565 = isnan(1.0) ? _4350 : (isnan(_4350) ? 1.0 : min(_4350, 1.0));
    float _572 = (_565 * ((_518.x * cbMtdParam._m0[13u].x) - _499)) + _499;
    float _573 = (_565 * ((_518.y * cbMtdParam._m0[13u].y) - _500)) + _500;
    float _574 = (_565 * ((_518.z * cbMtdParam._m0[13u].z) - _501)) + _501;
    vec4 _592 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_9, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[24u].x * _314) + cbTextureTilingScale._m0[24u].z, (cbTextureTilingScale._m0[24u].y * _315) + cbTextureTilingScale._m0[24u].w));
    vec4 _609 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[25u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _611 = _609.x;
    float _621 = dot(vec4(_611, _609.yzw), vec4(cbMtdParam._m0[30u].w, cbMtdParam._m0[31u].xy, 0.0));
    float _633 = ((cbMtdParam._m0[25u].x * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.z) - _422.z) * 2.0) - ((((_611 - _621) * cbMtdParam._m0[24u].z) + _621) * cbMtdParam._m0[20u].z))) + 1.0;
    float _4361 = isnan(0.0) ? _633 : (isnan(_633) ? 0.0 : max(_633, 0.0));
    float _634 = isnan(1.0) ? _4361 : (isnan(_4361) ? 1.0 : min(_4361, 1.0));
    float _644 = (_351.x * cbMtdParam._m0[9u].x) * ((_634 * ((_592.x * cbMtdParam._m0[14u].x) - _572)) + _572);
    float _645 = (_351.y * cbMtdParam._m0[9u].y) * ((_634 * ((_592.y * cbMtdParam._m0[14u].y) - _573)) + _573);
    float _646 = (_351.z * cbMtdParam._m0[9u].z) * ((_634 * ((_592.z * cbMtdParam._m0[14u].z) - _574)) + _574);
    float _650 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _328.x) * _644;
    float _653 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _328.y) * _645;
    float _656 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _328.z) * _646;
    float _664 = (((_644 - _650) * (isnan(1.0) ? _4306 : (isnan(_4306) ? 1.0 : min(_4306, 1.0)))) + _650) * 4.55000019073486328125;
    float _666 = (((_645 - _653) * (isnan(1.0) ? _4317 : (isnan(_4317) ? 1.0 : min(_4317, 1.0)))) + _653) * 4.55000019073486328125;
    float _668 = (((_646 - _656) * (isnan(1.0) ? _4328 : (isnan(_4328) ? 1.0 : min(_4328, 1.0)))) + _656) * 4.55000019073486328125;
    vec4 _685 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _314) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _315) + cbTextureTilingScale._m0[20u].w));
    vec4 _710 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _314) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _315) + cbTextureTilingScale._m0[4u].w));
    vec4 _727 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _729 = _727.x;
    float _730 = _727.y;
    float _731 = _727.z;
    float _738 = ((_710.x - _729) * _492) + _729;
    float _739 = ((_710.y - _730) * _492) + _730;
    float _740 = ((_710.z - _731) * _492) + _731;
    vec4 _752 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _314) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _315) + cbTextureTilingScale._m0[2u].w));
    float _763 = ((_752.x - _738) * _565) + _738;
    float _764 = ((_752.y - _739) * _565) + _739;
    float _765 = ((_752.z - _740) * _565) + _740;
    vec4 _777 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[23u].x * _314) + cbTextureTilingScale._m0[23u].z, (cbTextureTilingScale._m0[23u].y * _315) + cbTextureTilingScale._m0[23u].w));
    float _790 = ((_777.z - _765) * _634) + _765;
    float _793 = ((((_777.x - _763) * _634) + _763) * 2.0) + (-1.0);
    float _794 = ((((_777.y - _764) * _634) + _764) * 2.0) + (-1.0);
    float _795 = dot(vec2(_793, _794), vec2(_793, _794));
    float _4372 = isnan(0.0) ? _795 : (isnan(_795) ? 0.0 : max(_795, 0.0));
    float _800 = sqrt(1.0 - (isnan(1.0) ? _4372 : (isnan(_4372) ? 1.0 : min(_4372, 1.0))));
    vec4 _818 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _830 = (_793 + ((((_685.x * 2.0) + (-1.0)) * TEXCOORD_11.x) * cbMtdParam._m0[20u].x)) + (((_818.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _831 = (_794 + ((((_685.y * 2.0) + (-1.0)) * TEXCOORD_11.y) * cbMtdParam._m0[20u].x)) + (((_818.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _834 = fma(_800, _264, fma(_831, _271, _830 * _257));
    float _837 = fma(_800, _265, fma(_831, _272, _830 * _258));
    float _840 = fma(_800, _266, fma(_831, _273, _830 * _259));
    float _844 = inversesqrt(dot(vec3(_834, _837, _840), vec3(_834, _837, _840)));
    vec4 _871 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _314) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _315) + cbTextureTilingScale._m0[11u].w));
    float _873 = _871.x;
    float _874 = 1.0 - _873;
    float _880 = (cbMtdParam._m0[19u].x + dot(vec4(_844 * _834, _844 * _837, _844 * _840, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_873 - _874) * cbMtdParam._m0[24u].w) + _874) * cbMtdParam._m0[21u].z);
    float _4383 = isnan(0.0) ? _880 : (isnan(_880) ? 0.0 : max(_880, 0.0));
    float _881 = isnan(1.0) ? _4383 : (isnan(_4383) ? 1.0 : min(_4383, 1.0));
    float _883 = (-0.0) - cbMtdParam._m0[24u].x;
    float _885 = isnan(0.0) ? _883 : (isnan(_883) ? 0.0 : max(_883, 0.0));
    float _886 = isnan(1.0) ? _885 : (isnan(_885) ? 1.0 : min(_885, 1.0));
    float _893 = _881 - ((_881 * TEXCOORD_8.x) * _886);
    float _894 = _881 - ((_881 * TEXCOORD_8.y) * _886);
    float _895 = _881 - ((_881 * TEXCOORD_8.z) * _886);
    float _902 = (_893 * (cbMtdParam._m0[17u].x - _664)) + _664;
    float _903 = (_894 * (cbMtdParam._m0[17u].y - _666)) + _666;
    float _904 = (_895 * (cbMtdParam._m0[17u].z - _668)) + _668;
    float _919 = sqrt(((cbInstanceData._m0[_300].x * cbInstanceData._m0[_300].x) + (cbInstanceData._m0[_295].x * cbInstanceData._m0[_295].x)) + (cbInstanceData._m0[_304].x * cbInstanceData._m0[_304].x));
    float _920 = _919 * TEXCOORD.z;
    float _921 = _919 * TEXCOORD.w;
    vec4 _933 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _920) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _921) + cbTextureTilingScale._m0[19u].w));
    float _935 = _933.x;
    float _936 = 1.0 - _935;
    float _964 = (TEXCOORD_8.x - ((cbMtdParam._m0[22u].w * (1.0 - TEXCOORD_8.x)) * ((((_935 - _936) * cbMtdParam._m0[24u].y) + _936) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _4404 = isnan(0.0) ? _964 : (isnan(_964) ? 0.0 : max(_964, 0.0));
    float _965 = isnan(1.0) ? _4404 : (isnan(_4404) ? 1.0 : min(_4404, 1.0));
    float _973 = ((((cbMtdParam._m0[10u].x - _902) * TEXCOORD_8.x) * cbMtdParam._m0[23u].w) * _965) + _902;
    float _974 = ((((cbMtdParam._m0[10u].y - _903) * TEXCOORD_8.y) * cbMtdParam._m0[23u].w) * _965) + _903;
    float _975 = (((cbMtdParam._m0[23u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _904)) * _965) + _904;
    float _980 = (((_685.z - _790) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _790;
    float _984 = ((_818.z - _980) * cbMtdParam._m0[19u].w) + _980;
    vec4 _998 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _314) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _315) + cbTextureTilingScale._m0[15u].w));
    float _1005 = (_998.x * 2.0) + (-1.0);
    float _1006 = (_998.y * 2.0) + (-1.0);
    float _1007 = dot(vec2(_1005, _1006), vec2(_1005, _1006));
    float _4415 = isnan(0.0) ? _1007 : (isnan(_1007) ? 0.0 : max(_1007, 0.0));
    float _1015 = ((_998.z - _984) * _893) + _984;
    float _1018 = ((cbMtdParam._m0[23u].y - _1015) * _965) + _1015;
    vec4 _1039 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _920) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _921) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _1045 = (_1039.x * 2.0) + (-1.0);
    float _1046 = (_1039.y * 2.0) + (-1.0);
    float _1047 = dot(vec2(_1045, _1046), vec2(_1045, _1046));
    float _4426 = isnan(0.0) ? _1047 : (isnan(_1047) ? 0.0 : max(_1047, 0.0));
    float _1062 = ((sqrt(1.0 - (isnan(1.0) ? _4415 : (isnan(_4415) ? 1.0 : min(_4415, 1.0)))) - _800) * _895) + _800;
    float _1065 = (((_1005 - _830) * _893) + _830) + (cbMtdParam._m0[21u].x * _830);
    float _1066 = (((_1006 - _831) * _894) + _831) + (cbMtdParam._m0[21u].x * _831);
    float _1077 = (((_1045 - _1065) + (_1065 * cbMtdParam._m0[22u].z)) * _965) + _1065;
    float _1078 = (((_1046 - _1066) + (_1066 * cbMtdParam._m0[22u].z)) * _965) + _1066;
    float _1079 = (_965 * (sqrt(1.0 - (isnan(1.0) ? _4426 : (isnan(_4426) ? 1.0 : min(_4426, 1.0)))) - _1062)) + _1062;
    float _1081 = cbMtdParam._m0[22u].x + _818.w;
    float _1084 = fma(_1079, _264, fma(_1078, _271, _1077 * _257));
    float _1087 = fma(_1079, _265, fma(_1078, _272, _1077 * _258));
    float _1090 = fma(_1079, _266, fma(_1078, _273, _1077 * _259));
    float _1094 = inversesqrt(dot(vec3(_1084, _1087, _1090), vec3(_1084, _1087, _1090)));
    float _1095 = _1094 * _1084;
    float _1096 = _1094 * _1087;
    float _1097 = _1094 * _1090;
    float _4437 = isnan(0.0) ? _1018 : (isnan(_1018) ? 0.0 : max(_1018, 0.0));
    float _1098 = isnan(1.0) ? _4437 : (isnan(_4437) ? 1.0 : min(_4437, 1.0));
    float _4448 = isnan(0.0) ? _1081 : (isnan(_1081) ? 0.0 : max(_1081, 0.0));
    float _4459 = isnan(0.0) ? _973 : (isnan(_973) ? 0.0 : max(_973, 0.0));
    float _4470 = isnan(0.0) ? _974 : (isnan(_974) ? 0.0 : max(_974, 0.0));
    float _4481 = isnan(0.0) ? _975 : (isnan(_975) ? 0.0 : max(_975, 0.0));
    float _1116 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _1156 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _1166 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _1156);
    float _1167 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _1156);
    float _1168 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _1156);
    float _1172 = inversesqrt(dot(vec3(_1166, _1167, _1168), vec3(_1166, _1167, _1168)));
    float _1173 = _1166 * _1172;
    float _1174 = _1167 * _1172;
    float _1175 = _1168 * _1172;
    vec4 _1180 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _1182 = _1180.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1336 = sqrt(((_1166 * _1166) + (_1167 * _1167)) + (_1168 * _1168));
        float _1342 = (cbMatDynParam._m0[5u].x * _1336) + cbMatDynParam._m0[5u].y;
        float _4492 = isnan(0.0) ? _1342 : (isnan(_1342) ? 0.0 : max(_1342, 0.0));
        float _1343 = isnan(1.0) ? _4492 : (isnan(_4492) ? 1.0 : min(_4492, 1.0));
        float _1347 = (cbMatDynParam._m0[5u].z * _1336) + cbMatDynParam._m0[5u].w;
        float _4503 = isnan(0.0) ? _1347 : (isnan(_1347) ? 0.0 : max(_1347, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4503 : (isnan(_4503) ? 1.0 : min(_4503, 1.0))) - _1343)) + _1343) < ((_1182 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _1193 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1194 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1212 = fma(_1097, cbSceneParam._m0[5u].z, fma(_1096, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _1095));
    float _1215 = fma(_1097, cbSceneParam._m0[6u].z, fma(_1096, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _1095));
    float _1218 = fma(_1097, cbSceneParam._m0[7u].z, fma(_1096, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _1095));
    uint _1231 = _295 + 9u;
    uint _1232 = _1231 + uint(cbMatDynParam._m0[0u].w);
    float _1238 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4459 : (isnan(_4459) ? 1.0 : min(_4459, 1.0)))) * cbInstanceData._m0[_1232].x;
    float _1239 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4470 : (isnan(_4470) ? 1.0 : min(_4470, 1.0)))) * cbInstanceData._m0[_1232].y;
    float _1240 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4481 : (isnan(_4481) ? 1.0 : min(_4481, 1.0)))) * cbInstanceData._m0[_1232].z;
    float _4514 = isnan(0.0) ? _1238 : (isnan(_1238) ? 0.0 : max(_1238, 0.0));
    float _1241 = isnan(1.0) ? _4514 : (isnan(_4514) ? 1.0 : min(_4514, 1.0));
    float _4525 = isnan(0.0) ? _1239 : (isnan(_1239) ? 0.0 : max(_1239, 0.0));
    float _1242 = isnan(1.0) ? _4525 : (isnan(_4525) ? 1.0 : min(_4525, 1.0));
    float _4536 = isnan(0.0) ? _1240 : (isnan(_1240) ? 0.0 : max(_1240, 0.0));
    float _1243 = isnan(1.0) ? _4536 : (isnan(_4536) ? 1.0 : min(_4536, 1.0));
    vec4 _1252 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1193, cbSceneParam._m0[86u].y * _1194));
    float _1256 = ((isnan(1.0) ? _4448 : (isnan(_4448) ? 1.0 : min(_4448, 1.0))) * TEXCOORD_5.w) * _1252.x;
    float _1257 = dot(vec3(_1095, _1096, _1097), vec3(_1173, _1174, _1175));
    float _1260 = _1257 * 2.0;
    float _1264 = (_1260 * _1095) - _1173;
    float _1265 = (_1260 * _1096) - _1174;
    float _1266 = (_1260 * _1097) - _1175;
    float _1270 = abs(dot(vec3(_1173, _1174, _1175), vec3(_1095, _1096, _1097)));
    float _4547 = isnan(0.0) ? _1270 : (isnan(_1270) ? 0.0 : max(_1270, 0.0));
    float _1272 = sqrt(_1098);
    float _1285 = exp2((_1272 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4547 : (isnan(_4547) ? 1.0 : min(_4547, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1272 * 3.0));
    float _1317 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1321 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1325 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1654;
    float _1656;
    float _1657;
    float _1658;
    float _1659;
    float _1660;
    float _1661;
    float _1662;
    float _1663;
    float _1664;
    float _1665;
    float _1666;
    float _1667;
    float _1668;
    float _1669;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1379 = fma(_1325, cbModelParam._m0[26u].z, fma(_1321, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1317));
        float _1383 = fma(_1325, cbModelParam._m0[27u].z, fma(_1321, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1317));
        float _1387 = fma(_1325, cbModelParam._m0[28u].z, fma(_1321, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1317));
        float _1412 = _1317 + _1095;
        float _1413 = _1321 + _1096;
        float _1414 = _1325 + _1097;
        float _1424 = fma(_1414, cbModelParam._m0[26u].z, fma(_1413, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1412)) - _1379;
        float _1425 = fma(_1414, cbModelParam._m0[27u].z, fma(_1413, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1412)) - _1383;
        float _1426 = fma(_1414, cbModelParam._m0[28u].z, fma(_1413, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1412)) - _1387;
        float _1430 = inversesqrt(dot(vec3(_1424, _1425, _1426), vec3(_1424, _1425, _1426)));
        float _1443 = ((_1430 * _1424) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1379 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1444 = ((_1430 * _1425) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1383 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1445 = ((_1430 * _1426) / cbModelParam._m0[34u].z) + ((((((_1387 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1448 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1443, _1444, _1445), 0.0);
        vec4 _1455 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1443, _1444, _1445), 0.0);
        vec4 _1462 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1443, _1444, _1445), 0.0);
        vec4 _1469 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1443, _1444, _1445), 0.0);
        float _1482 = exp2((_1448.w + (-0.5)) * 20.0) * 2.0;
        float _1483 = _1482 * (_1448.x + (-0.5));
        float _1484 = _1482 * (_1448.y + (-0.5));
        float _1485 = _1482 * (_1448.z + (-0.5));
        float _1492 = exp2((_1455.w + (-0.5)) * 20.0) * 2.0;
        float _1493 = _1492 * (_1455.x + (-0.5));
        float _1494 = _1492 * (_1455.y + (-0.5));
        float _1495 = _1492 * (_1455.z + (-0.5));
        float _1502 = exp2((_1462.w + (-0.5)) * 20.0) * 2.0;
        float _1503 = _1502 * (_1462.x + (-0.5));
        float _1504 = _1502 * (_1462.y + (-0.5));
        float _1505 = _1502 * (_1462.z + (-0.5));
        float _1512 = exp2((_1469.w + (-0.5)) * 20.0) * 2.0;
        float _1513 = _1512 * (_1469.x + (-0.5));
        float _1514 = _1512 * (_1469.y + (-0.5));
        float _1515 = _1512 * (_1469.z + (-0.5));
        float _1516 = isnan(0.0) ? _1513 : (isnan(_1513) ? 0.0 : max(_1513, 0.0));
        float _1517 = isnan(0.0) ? _1514 : (isnan(_1514) ? 0.0 : max(_1514, 0.0));
        float _1518 = isnan(0.0) ? _1515 : (isnan(_1515) ? 0.0 : max(_1515, 0.0));
        float _1519 = _1483 * 0.5;
        float _1520 = _1493 * 0.5;
        float _1521 = _1503 * 0.5;
        float _1522 = dot(vec3(_1519, _1520, _1521), vec3(_1519, _1520, _1521));
        float _1527 = (_1522 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1522);
        float _1536 = (dot(vec3(_1095, _1096, _1097), vec3(_1527 * _1519, _1527 * _1520, _1527 * _1521)) + 1.0) * 0.5;
        float _4573 = isnan(0.0) ? _1536 : (isnan(_1536) ? 0.0 : max(_1536, 0.0));
        float _1546 = sqrt(((_1520 * _1520) + (_1519 * _1519)) + (_1521 * _1521)) / (_1516 + 9.9999997473787516355514526367188e-06);
        float _4584 = isnan(0.0) ? _1546 : (isnan(_1546) ? 0.0 : max(_1546, 0.0));
        float _1547 = isnan(1.0) ? _4584 : (isnan(_4584) ? 1.0 : min(_4584, 1.0));
        float _1548 = _1547 * 2.0;
        float _1552 = (1.0 - _1547) / (_1547 + 1.0);
        float _4595 = isnan(0.0) ? _1552 : (isnan(_1552) ? 0.0 : max(_1552, 0.0));
        float _1553 = isnan(1.0) ? _4595 : (isnan(_4595) ? 1.0 : min(_4595, 1.0));
        float _1562 = ((((1.0 - _1553) * (_1548 + 2.0)) * exp2(log2(isnan(1.0) ? _4573 : (isnan(_4573) ? 1.0 : min(_4573, 1.0))) * (_1548 + 1.0))) + _1553) * _1516;
        float _1563 = _1484 * 0.5;
        float _1564 = _1494 * 0.5;
        float _1565 = _1504 * 0.5;
        float _1566 = dot(vec3(_1563, _1564, _1565), vec3(_1563, _1564, _1565));
        float _1571 = (_1566 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1566);
        float _1579 = (dot(vec3(_1095, _1096, _1097), vec3(_1571 * _1563, _1571 * _1564, _1571 * _1565)) + 1.0) * 0.5;
        float _4606 = isnan(0.0) ? _1579 : (isnan(_1579) ? 0.0 : max(_1579, 0.0));
        float _1588 = sqrt(((_1564 * _1564) + (_1563 * _1563)) + (_1565 * _1565)) / (_1517 + 9.9999997473787516355514526367188e-06);
        float _4617 = isnan(0.0) ? _1588 : (isnan(_1588) ? 0.0 : max(_1588, 0.0));
        float _1589 = isnan(1.0) ? _4617 : (isnan(_4617) ? 1.0 : min(_4617, 1.0));
        float _1590 = _1589 * 2.0;
        float _1594 = (1.0 - _1589) / (_1589 + 1.0);
        float _4628 = isnan(0.0) ? _1594 : (isnan(_1594) ? 0.0 : max(_1594, 0.0));
        float _1595 = isnan(1.0) ? _4628 : (isnan(_4628) ? 1.0 : min(_4628, 1.0));
        float _1604 = ((((1.0 - _1595) * (_1590 + 2.0)) * exp2(log2(isnan(1.0) ? _4606 : (isnan(_4606) ? 1.0 : min(_4606, 1.0))) * (_1590 + 1.0))) + _1595) * _1517;
        float _1605 = _1485 * 0.5;
        float _1606 = _1495 * 0.5;
        float _1607 = _1505 * 0.5;
        float _1608 = dot(vec3(_1605, _1606, _1607), vec3(_1605, _1606, _1607));
        float _1613 = (_1608 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1608);
        float _1621 = (dot(vec3(_1095, _1096, _1097), vec3(_1613 * _1605, _1613 * _1606, _1613 * _1607)) + 1.0) * 0.5;
        float _4639 = isnan(0.0) ? _1621 : (isnan(_1621) ? 0.0 : max(_1621, 0.0));
        float _1630 = sqrt(((_1606 * _1606) + (_1605 * _1605)) + (_1607 * _1607)) / (_1518 + 9.9999997473787516355514526367188e-06);
        float _4650 = isnan(0.0) ? _1630 : (isnan(_1630) ? 0.0 : max(_1630, 0.0));
        float _1631 = isnan(1.0) ? _4650 : (isnan(_4650) ? 1.0 : min(_4650, 1.0));
        float _1632 = _1631 * 2.0;
        float _1636 = (1.0 - _1631) / (_1631 + 1.0);
        float _4661 = isnan(0.0) ? _1636 : (isnan(_1636) ? 0.0 : max(_1636, 0.0));
        float _1637 = isnan(1.0) ? _4661 : (isnan(_4661) ? 1.0 : min(_4661, 1.0));
        float _1646 = ((((1.0 - _1637) * (_1632 + 2.0)) * exp2(log2(isnan(1.0) ? _4639 : (isnan(_4639) ? 1.0 : min(_4639, 1.0))) * (_1632 + 1.0))) + _1637) * _1518;
        _1654 = _1485;
        _1656 = _1484;
        _1657 = _1483;
        _1658 = _1495;
        _1659 = _1494;
        _1660 = _1493;
        _1661 = _1505;
        _1662 = _1504;
        _1663 = _1503;
        _1664 = _1518;
        _1665 = _1517;
        _1666 = _1516;
        _1667 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1562 : (isnan(_1562) ? 0.0 : max(_1562, 0.0)));
        _1668 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1604 : (isnan(_1604) ? 0.0 : max(_1604, 0.0)));
        _1669 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1646 : (isnan(_1646) ? 0.0 : max(_1646, 0.0)));
    }
    else
    {
        _1654 = _1655;
        _1656 = _1655;
        _1657 = _1655;
        _1658 = _1655;
        _1659 = _1655;
        _1660 = _1655;
        _1661 = _1655;
        _1662 = _1655;
        _1663 = _1655;
        _1664 = _1655;
        _1665 = _1655;
        _1666 = _1655;
        _1667 = 0.0;
        _1668 = 0.0;
        _1669 = 0.0;
    }
    float _1964;
    float _1965;
    float _1966;
    float _1967;
    float _1968;
    float _1969;
    float _1970;
    float _1971;
    float _1972;
    float _1973;
    float _1974;
    float _1975;
    float _1976;
    float _1977;
    float _1978;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1695 = fma(_1325, cbModelParam._m0[30u].z, fma(_1321, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1317));
        float _1699 = fma(_1325, cbModelParam._m0[31u].z, fma(_1321, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1317));
        float _1703 = fma(_1325, cbModelParam._m0[32u].z, fma(_1321, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1317));
        float _1726 = _1317 + _1095;
        float _1727 = _1321 + _1096;
        float _1728 = _1325 + _1097;
        float _1738 = fma(_1728, cbModelParam._m0[30u].z, fma(_1727, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1726)) - _1695;
        float _1739 = fma(_1728, cbModelParam._m0[31u].z, fma(_1727, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1726)) - _1699;
        float _1740 = fma(_1728, cbModelParam._m0[32u].z, fma(_1727, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1726)) - _1703;
        float _1744 = inversesqrt(dot(vec3(_1738, _1739, _1740), vec3(_1738, _1739, _1740)));
        float _1757 = ((_1744 * _1738) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1695 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1758 = ((_1744 * _1739) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1699 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1759 = ((_1744 * _1740) / cbModelParam._m0[35u].z) + ((((((_1703 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1761 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1757, _1758, _1759), 0.0);
        vec4 _1768 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1757, _1758, _1759), 0.0);
        vec4 _1775 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1757, _1758, _1759), 0.0);
        vec4 _1782 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1757, _1758, _1759), 0.0);
        float _1794 = exp2((_1761.w + (-0.5)) * 20.0) * 2.0;
        float _1795 = _1794 * (_1761.x + (-0.5));
        float _1796 = _1794 * (_1761.y + (-0.5));
        float _1797 = _1794 * (_1761.z + (-0.5));
        float _1804 = exp2((_1768.w + (-0.5)) * 20.0) * 2.0;
        float _1805 = _1804 * (_1768.x + (-0.5));
        float _1806 = _1804 * (_1768.y + (-0.5));
        float _1807 = _1804 * (_1768.z + (-0.5));
        float _1814 = exp2((_1775.w + (-0.5)) * 20.0) * 2.0;
        float _1815 = _1814 * (_1775.x + (-0.5));
        float _1816 = _1814 * (_1775.y + (-0.5));
        float _1817 = _1814 * (_1775.z + (-0.5));
        float _1824 = exp2((_1782.w + (-0.5)) * 20.0) * 2.0;
        float _1825 = _1824 * (_1782.x + (-0.5));
        float _1826 = _1824 * (_1782.y + (-0.5));
        float _1827 = _1824 * (_1782.z + (-0.5));
        float _1828 = isnan(0.0) ? _1825 : (isnan(_1825) ? 0.0 : max(_1825, 0.0));
        float _1829 = isnan(0.0) ? _1826 : (isnan(_1826) ? 0.0 : max(_1826, 0.0));
        float _1830 = isnan(0.0) ? _1827 : (isnan(_1827) ? 0.0 : max(_1827, 0.0));
        float _1831 = _1795 * 0.5;
        float _1832 = _1805 * 0.5;
        float _1833 = _1815 * 0.5;
        float _1834 = dot(vec3(_1831, _1832, _1833), vec3(_1831, _1832, _1833));
        float _1839 = (_1834 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1834);
        float _1847 = (dot(vec3(_1095, _1096, _1097), vec3(_1839 * _1831, _1839 * _1832, _1839 * _1833)) + 1.0) * 0.5;
        float _4702 = isnan(0.0) ? _1847 : (isnan(_1847) ? 0.0 : max(_1847, 0.0));
        float _1856 = sqrt(((_1832 * _1832) + (_1831 * _1831)) + (_1833 * _1833)) / (_1828 + 9.9999997473787516355514526367188e-06);
        float _4713 = isnan(0.0) ? _1856 : (isnan(_1856) ? 0.0 : max(_1856, 0.0));
        float _1857 = isnan(1.0) ? _4713 : (isnan(_4713) ? 1.0 : min(_4713, 1.0));
        float _1858 = _1857 * 2.0;
        float _1862 = (1.0 - _1857) / (_1857 + 1.0);
        float _4724 = isnan(0.0) ? _1862 : (isnan(_1862) ? 0.0 : max(_1862, 0.0));
        float _1863 = isnan(1.0) ? _4724 : (isnan(_4724) ? 1.0 : min(_4724, 1.0));
        float _1872 = ((((1.0 - _1863) * (_1858 + 2.0)) * exp2(log2(isnan(1.0) ? _4702 : (isnan(_4702) ? 1.0 : min(_4702, 1.0))) * (_1858 + 1.0))) + _1863) * _1828;
        float _1873 = _1796 * 0.5;
        float _1874 = _1806 * 0.5;
        float _1875 = _1816 * 0.5;
        float _1876 = dot(vec3(_1873, _1874, _1875), vec3(_1873, _1874, _1875));
        float _1881 = (_1876 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1876);
        float _1889 = (dot(vec3(_1095, _1096, _1097), vec3(_1881 * _1873, _1881 * _1874, _1881 * _1875)) + 1.0) * 0.5;
        float _4735 = isnan(0.0) ? _1889 : (isnan(_1889) ? 0.0 : max(_1889, 0.0));
        float _1898 = sqrt(((_1874 * _1874) + (_1873 * _1873)) + (_1875 * _1875)) / (_1829 + 9.9999997473787516355514526367188e-06);
        float _4746 = isnan(0.0) ? _1898 : (isnan(_1898) ? 0.0 : max(_1898, 0.0));
        float _1899 = isnan(1.0) ? _4746 : (isnan(_4746) ? 1.0 : min(_4746, 1.0));
        float _1900 = _1899 * 2.0;
        float _1904 = (1.0 - _1899) / (_1899 + 1.0);
        float _4757 = isnan(0.0) ? _1904 : (isnan(_1904) ? 0.0 : max(_1904, 0.0));
        float _1905 = isnan(1.0) ? _4757 : (isnan(_4757) ? 1.0 : min(_4757, 1.0));
        float _1914 = ((((1.0 - _1905) * (_1900 + 2.0)) * exp2(log2(isnan(1.0) ? _4735 : (isnan(_4735) ? 1.0 : min(_4735, 1.0))) * (_1900 + 1.0))) + _1905) * _1829;
        float _1915 = _1797 * 0.5;
        float _1916 = _1807 * 0.5;
        float _1917 = _1817 * 0.5;
        float _1918 = dot(vec3(_1915, _1916, _1917), vec3(_1915, _1916, _1917));
        float _1923 = (_1918 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1918);
        float _1931 = (dot(vec3(_1095, _1096, _1097), vec3(_1923 * _1915, _1923 * _1916, _1923 * _1917)) + 1.0) * 0.5;
        float _4768 = isnan(0.0) ? _1931 : (isnan(_1931) ? 0.0 : max(_1931, 0.0));
        float _1940 = sqrt(((_1916 * _1916) + (_1915 * _1915)) + (_1917 * _1917)) / (_1830 + 9.9999997473787516355514526367188e-06);
        float _4779 = isnan(0.0) ? _1940 : (isnan(_1940) ? 0.0 : max(_1940, 0.0));
        float _1941 = isnan(1.0) ? _4779 : (isnan(_4779) ? 1.0 : min(_4779, 1.0));
        float _1942 = _1941 * 2.0;
        float _1946 = (1.0 - _1941) / (_1941 + 1.0);
        float _4790 = isnan(0.0) ? _1946 : (isnan(_1946) ? 0.0 : max(_1946, 0.0));
        float _1947 = isnan(1.0) ? _4790 : (isnan(_4790) ? 1.0 : min(_4790, 1.0));
        float _1956 = ((((1.0 - _1947) * (_1942 + 2.0)) * exp2(log2(isnan(1.0) ? _4768 : (isnan(_4768) ? 1.0 : min(_4768, 1.0))) * (_1942 + 1.0))) + _1947) * _1830;
        _1964 = _1797;
        _1965 = _1796;
        _1966 = _1795;
        _1967 = _1807;
        _1968 = _1806;
        _1969 = _1805;
        _1970 = _1817;
        _1971 = _1816;
        _1972 = _1815;
        _1973 = _1830;
        _1974 = _1829;
        _1975 = _1828;
        _1976 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1872 : (isnan(_1872) ? 0.0 : max(_1872, 0.0)));
        _1977 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1914 : (isnan(_1914) ? 0.0 : max(_1914, 0.0)));
        _1978 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1956 : (isnan(_1956) ? 0.0 : max(_1956, 0.0)));
    }
    else
    {
        _1964 = _1655;
        _1965 = _1655;
        _1966 = _1655;
        _1967 = _1655;
        _1968 = _1655;
        _1969 = _1655;
        _1970 = _1655;
        _1971 = _1655;
        _1972 = _1655;
        _1973 = _1655;
        _1974 = _1655;
        _1975 = _1655;
        _1976 = 0.0;
        _1977 = 0.0;
        _1978 = 0.0;
    }
    float _1988 = (cbModelParam._m0[1u].x * (_1976 - _1667)) + _1667;
    float _1989 = (cbModelParam._m0[1u].x * (_1977 - _1668)) + _1668;
    float _1990 = (cbModelParam._m0[1u].x * (_1978 - _1669)) + _1669;
    float _2011 = fma(_1990, cbSceneParam._m0[89u].z, fma(_1989, cbSceneParam._m0[89u].y, _1988 * cbSceneParam._m0[89u].x));
    float _2014 = fma(_1990, cbSceneParam._m0[90u].z, fma(_1989, cbSceneParam._m0[90u].y, _1988 * cbSceneParam._m0[90u].x));
    float _2017 = fma(_1990, cbSceneParam._m0[91u].z, fma(_1989, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1988));
    float _2032 = _1264 * 0.5;
    float _2033 = _1265 * 0.5;
    float _2034 = _1266 * 0.5;
    float _2035 = dot(vec4(_2032, _2033, _2034, 1.0), vec4(_1966, _1969, _1972, _1975));
    float _2038 = dot(vec4(_2032, _2033, _2034, 1.0), vec4(_1965, _1968, _1971, _1974));
    float _2041 = dot(vec4(_2032, _2033, _2034, 1.0), vec4(_1964, _1967, _1970, _1973));
    float _2075;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _2048 = dot(vec4(_2032, _2033, _2034, 1.0), vec4(_1654, _1658, _1661, _1664));
        float _2052 = dot(vec4(_2032, _2033, _2034, 1.0), vec4(_1656, _1659, _1662, _1665));
        float _2056 = dot(vec4(_2032, _2033, _2034, 1.0), vec4(_1657, _1660, _1663, _1666));
        float _2063 = dot(vec4(cbModelParam._m0[39u]), vec4(_2032, _2033, _2034, 1.0));
        _2075 = dot(vec3(isnan(0.0) ? _2056 : (isnan(_2056) ? 0.0 : max(_2056, 0.0)), isnan(0.0) ? _2052 : (isnan(_2052) ? 0.0 : max(_2052, 0.0)), isnan(0.0) ? _2048 : (isnan(_2048) ? 0.0 : max(_2048, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_2063) ? 0.0 : (isnan(0.0) ? _2063 : max(0.0, _2063))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _2075 = 1.0;
    }
    float _2086;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _2077 = dot(vec4(cbModelParam._m0[40u]), vec4(_2032, _2033, _2034, 1.0));
        _2086 = dot(vec3(isnan(0.0) ? _2035 : (isnan(_2035) ? 0.0 : max(_2035, 0.0)), isnan(0.0) ? _2038 : (isnan(_2038) ? 0.0 : max(_2038, 0.0)), isnan(0.0) ? _2041 : (isnan(_2041) ? 0.0 : max(_2041, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_2077) ? 0.0 : (isnan(0.0) ? _2077 : max(0.0, _2077))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _2086 = 1.0;
    }
    float _2090 = (_2086 * cbModelParam._m0[1u].x) + (_2075 * (1.0 - cbModelParam._m0[1u].x));
    float _2100 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _1098);
    float _2101 = isnan(_2100) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _2100 : min(cbModelParam._m0[25u].z, _2100));
    float _2181;
    float _2183;
    float _2185;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _2148 = fma(_1325, cbModelParam._m0[13u].z, fma(_1321, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1317)) + cbModelParam._m0[13u].w;
        float _2152 = fma(_1325, cbModelParam._m0[14u].z, fma(_1321, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1317)) + cbModelParam._m0[14u].w;
        float _2156 = fma(_1325, cbModelParam._m0[15u].z, fma(_1321, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1317)) + cbModelParam._m0[15u].w;
        float _2159 = fma(_1266, cbModelParam._m0[13u].z, fma(_1265, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1264));
        float _2162 = fma(_1266, cbModelParam._m0[14u].z, fma(_1265, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1264));
        float _2165 = fma(_1266, cbModelParam._m0[15u].z, fma(_1265, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1264));
        float _2193;
        if (_2159 > 0.0)
        {
            _2193 = abs((1.0 - _2148) / _2159);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_2159 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_2148 + 1.0) / _2159);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _2193 = frontier_phi_17_15_ladder;
        }
        float _2363;
        if (_2162 > 0.0)
        {
            _2363 = abs((1.0 - _2152) / _2162);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_2162 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_2152 + 1.0) / _2162);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2363 = frontier_phi_26_22_ladder;
        }
        float _2658;
        if (_2165 > 0.0)
        {
            _2658 = abs((1.0 - _2156) / _2165);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_2165 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_2156 + 1.0) / _2165);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2658 = frontier_phi_38_33_ladder;
        }
        float _2660 = isnan(_2363) ? _2193 : (isnan(_2193) ? _2363 : min(_2193, _2363));
        float _2661 = isnan(_2658) ? _2660 : (isnan(_2660) ? _2658 : min(_2660, _2658));
        float _2665 = (_2661 * _2159) + _2148;
        float _2666 = (_2661 * _2162) + _2152;
        float _2667 = (_2661 * _2165) + _2156;
        float _2668 = _2661 * 9.9999997473787516355514526367188e-05;
        float _2670 = (-1.0) - _2668;
        float _2672 = _2668 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2667 > _2672) || ((_2667 < _2670) || ((_2666 > _2672) || ((_2666 < _2670) || ((_2665 < _2670) || (_2665 > _2672))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2812 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2667, cbModelParam._m0[9u].z, fma(_2666, cbModelParam._m0[9u].y, _2665 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2667, cbModelParam._m0[10u].z, fma(_2666, cbModelParam._m0[10u].y, _2665 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2667, cbModelParam._m0[11u].z, fma(_2666, cbModelParam._m0[11u].y, _2665 * cbModelParam._m0[11u].x))), _2101);
            frontier_phi_16_38_ladder = _2812.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2812.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2812.x * cbModelParam._m0[1u].y;
        }
        _2181 = frontier_phi_16_38_ladder_2;
        _2183 = frontier_phi_16_38_ladder_1;
        _2185 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _2169 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1264, _1265, _1266), _2101);
        _2181 = _2169.x * cbModelParam._m0[1u].y;
        _2183 = _2169.y * cbModelParam._m0[1u].y;
        _2185 = _2169.z * cbModelParam._m0[1u].y;
    }
    float _2189 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _1098);
    float _2190 = isnan(_2189) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2189 : min(cbModelParam._m0[25u].w, _2189));
    float _2280;
    float _2282;
    float _2284;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2244 = fma(_1325, cbModelParam._m0[21u].z, fma(_1321, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1317)) + cbModelParam._m0[21u].w;
        float _2248 = fma(_1325, cbModelParam._m0[22u].z, fma(_1321, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1317)) + cbModelParam._m0[22u].w;
        float _2252 = fma(_1325, cbModelParam._m0[23u].z, fma(_1321, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1317)) + cbModelParam._m0[23u].w;
        float _2255 = fma(_1266, cbModelParam._m0[21u].z, fma(_1265, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1264));
        float _2258 = fma(_1266, cbModelParam._m0[22u].z, fma(_1265, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1264));
        float _2261 = fma(_1266, cbModelParam._m0[23u].z, fma(_1265, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1264));
        float _2368;
        if (_2255 > 0.0)
        {
            _2368 = abs((1.0 - _2244) / _2255);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_2255 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_2244 + 1.0) / _2255);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2368 = frontier_phi_28_24_ladder;
        }
        float _2685;
        if (_2258 > 0.0)
        {
            _2685 = abs((1.0 - _2248) / _2258);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_2258 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_2248 + 1.0) / _2258);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2685 = frontier_phi_40_35_ladder;
        }
        float _3012;
        if (_2261 > 0.0)
        {
            _3012 = abs((1.0 - _2252) / _2261);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_2261 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_2252 + 1.0) / _2261);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _3012 = frontier_phi_50_47_ladder;
        }
        float _3014 = isnan(_2685) ? _2368 : (isnan(_2368) ? _2685 : min(_2368, _2685));
        float _3015 = isnan(_3012) ? _3014 : (isnan(_3014) ? _3012 : min(_3014, _3012));
        float _3019 = (_3015 * _2255) + _2244;
        float _3020 = (_3015 * _2258) + _2248;
        float _3021 = (_3015 * _2261) + _2252;
        float _3022 = _3015 * 9.9999997473787516355514526367188e-05;
        float _3023 = (-1.0) - _3022;
        float _3025 = _3022 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_3021 > _3025) || ((_3021 < _3023) || ((_3020 > _3025) || ((_3020 < _3023) || ((_3019 < _3023) || (_3019 > _3025))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _3139 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_3021, cbModelParam._m0[17u].z, fma(_3020, cbModelParam._m0[17u].y, _3019 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_3021, cbModelParam._m0[18u].z, fma(_3020, cbModelParam._m0[18u].y, _3019 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_3021, cbModelParam._m0[19u].z, fma(_3020, cbModelParam._m0[19u].y, _3019 * cbModelParam._m0[19u].x))), _2190);
            frontier_phi_25_50_ladder = _3139.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _3139.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _3139.x * cbModelParam._m0[1u].z;
        }
        _2280 = frontier_phi_25_50_ladder_2;
        _2282 = frontier_phi_25_50_ladder_1;
        _2284 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _2264 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1264, _1265, _1266), _2190);
        _2280 = _2264.x * cbModelParam._m0[1u].z;
        _2282 = _2264.y * cbModelParam._m0[1u].z;
        _2284 = _2264.z * cbModelParam._m0[1u].z;
    }
    float _2296 = ((((1.0 - _1285) * ((_1272 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_1285 * _1272)) * _1256;
    float _2297 = _2296 * ((cbModelParam._m0[1u].w * (_2280 - _2181)) + _2181);
    float _2298 = _2296 * ((cbModelParam._m0[1u].w * (_2282 - _2183)) + _2183);
    float _2299 = _2296 * ((cbModelParam._m0[1u].w * (_2284 - _2185)) + _2185);
    float _2302 = fma(_2299, cbSceneParam._m0[89u].z, fma(_2298, cbSceneParam._m0[89u].y, _2297 * cbSceneParam._m0[89u].x));
    float _2305 = fma(_2299, cbSceneParam._m0[90u].z, fma(_2298, cbSceneParam._m0[90u].y, _2297 * cbSceneParam._m0[90u].x));
    float _2308 = fma(_2299, cbSceneParam._m0[91u].z, fma(_2298, cbSceneParam._m0[91u].y, _2297 * cbSceneParam._m0[91u].x));
    float _2342 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2346 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2350 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2354 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2355 = _2342 / _2354;
    float _2356 = _2346 / _2354;
    float _2357 = _2350 / _2354;
    float _2504;
    float _2505;
    float _2506;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2384 = ((uint(_2357 > cbSceneParam._m0[59u].y) + uint(_2357 > cbSceneParam._m0[59u].x)) + uint(_2357 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2385 = _2384 + 43u;
        uint _2393 = _2384 + 44u;
        uint _2401 = _2384 + 45u;
        uint _2409 = _2384 + 46u;
        float _2420 = fma(_2354, cbSceneParam._m0[_2385].w, fma(_2350, cbSceneParam._m0[_2385].z, fma(_2346, cbSceneParam._m0[_2385].y, _2342 * cbSceneParam._m0[_2385].x)));
        float _2424 = fma(_2354, cbSceneParam._m0[_2393].w, fma(_2350, cbSceneParam._m0[_2393].z, fma(_2346, cbSceneParam._m0[_2393].y, _2342 * cbSceneParam._m0[_2393].x)));
        float _2432 = fma(_2354, cbSceneParam._m0[_2409].w, fma(_2350, cbSceneParam._m0[_2409].z, fma(_2346, cbSceneParam._m0[_2409].y, _2342 * cbSceneParam._m0[_2409].x)));
        float _2437 = cbSceneParam._m0[33u].z * _2432;
        float _2439 = cbSceneParam._m0[33u].w * _2432;
        float _2442 = fma(_2354, cbSceneParam._m0[_2401].w, fma(_2350, cbSceneParam._m0[_2401].z, fma(_2346, cbSceneParam._m0[_2401].y, _2342 * cbSceneParam._m0[_2401].x))) / _2432;
        float _2490 = (cbSceneParam._m0[33u].x - sqrt(((_2356 * _2356) + (_2355 * _2355)) + (_2357 * _2357))) * cbSceneParam._m0[33u].y;
        float _4916 = isnan(0.0) ? _2490 : (isnan(_2490) ? 0.0 : max(_2490, 0.0));
        float _2497 = (isnan(1.0) ? _4916 : (isnan(_4916) ? 1.0 : min(_4916, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2437 + _2420) / _2432, (_2439 + _2424) / _2432), _2442), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2439 + _2420) / _2432, (_2424 - _2437) / _2432), _2442), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2420 - _2437) / _2432, (_2424 - _2439) / _2432), _2442), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2420 - _2439) / _2432, (_2437 + _2424) / _2432), _2442), 0.0)).x), vec4(0.25)));
        _2504 = 1.0 - (_2497 * cbSceneParam._m0[34u].x);
        _2505 = 1.0 - (_2497 * cbSceneParam._m0[34u].y);
        _2506 = 1.0 - (_2497 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2504 = 1.0;
        _2505 = 1.0;
        _2506 = 1.0;
    }
    float _2570;
    float _2572;
    float _2574;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2558 = fma(_2354, cbSceneParam._m0[63u].w, fma(_2350, cbSceneParam._m0[63u].z, fma(_2346, cbSceneParam._m0[63u].y, _2342 * cbSceneParam._m0[63u].x)));
        float _2559 = fma(_2354, cbSceneParam._m0[60u].w, fma(_2350, cbSceneParam._m0[60u].z, fma(_2346, cbSceneParam._m0[60u].y, _2342 * cbSceneParam._m0[60u].x))) / _2558;
        float _2560 = fma(_2354, cbSceneParam._m0[61u].w, fma(_2350, cbSceneParam._m0[61u].z, fma(_2346, cbSceneParam._m0[61u].y, _2342 * cbSceneParam._m0[61u].x))) / _2558;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_2559 >= cbSceneParam._m0[64u].x) && (_2560 >= cbSceneParam._m0[64u].y)) && (_2559 <= cbSceneParam._m0[64u].z)) && (_2560 <= cbSceneParam._m0[64u].w))
        {
            float _2698 = fma(_2354, cbSceneParam._m0[62u].w, fma(_2350, cbSceneParam._m0[62u].z, fma(_2346, cbSceneParam._m0[62u].y, _2342 * cbSceneParam._m0[62u].x))) / _2558;
            float _2702 = isnan(cbSceneParam._m0[41u].w) ? _2698 : (isnan(_2698) ? cbSceneParam._m0[41u].w : max(_2698, cbSceneParam._m0[41u].w));
            float _2745 = (cbSceneParam._m0[33u].x - sqrt(((_2356 * _2356) + (_2355 * _2355)) + (_2357 * _2357))) * cbSceneParam._m0[33u].y;
            float _4932 = isnan(0.0) ? _2745 : (isnan(_2745) ? 0.0 : max(_2745, 0.0));
            float _2752 = (isnan(1.0) ? _4932 : (isnan(_4932) ? 1.0 : min(_4932, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2559, cbSceneParam._m0[33u].w + _2560), _2702), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2559, _2560 - cbSceneParam._m0[33u].z), _2702), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2559 - cbSceneParam._m0[33u].z, _2560 - cbSceneParam._m0[33u].w), _2702), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2559 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2560), _2702), 0.0)).x), vec4(0.25)));
            float _2756 = 1.0 - (_2752 * cbSceneParam._m0[34u].x);
            float _2757 = 1.0 - (_2752 * cbSceneParam._m0[34u].y);
            float _2758 = 1.0 - (_2752 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_2758) ? _2506 : (isnan(_2506) ? _2758 : min(_2506, _2758));
            frontier_phi_37_36_ladder_1 = isnan(_2757) ? _2505 : (isnan(_2505) ? _2757 : min(_2505, _2757));
            frontier_phi_37_36_ladder_2 = isnan(_2756) ? _2504 : (isnan(_2504) ? _2756 : min(_2504, _2756));
        }
        else
        {
            frontier_phi_37_36_ladder = _2506;
            frontier_phi_37_36_ladder_1 = _2505;
            frontier_phi_37_36_ladder_2 = _2504;
        }
        _2570 = frontier_phi_37_36_ladder_2;
        _2572 = frontier_phi_37_36_ladder_1;
        _2574 = frontier_phi_37_36_ladder;
    }
    else
    {
        _2570 = _2504;
        _2572 = _2505;
        _2574 = _2506;
    }
    uvec4 _2579 = floatBitsToUint(cbInstanceData._m0[_295 + 5u]);
    uint _2581 = _2579.x * 14u;
    uint _2582 = _2581 + 13u;
    float _2589 = _1256 + (-1.0);
    float _2594 = (cbLight._m0[_2582].x * _2589) + 1.0;
    float _2595 = (cbLight._m0[_2582].y * _2589) + 1.0;
    float _2596 = (cbLight._m0[_2582].z * _2589) + 1.0;
    float _2597 = (cbLight._m0[_2582].w * _2589) + 1.0;
    uint _2598 = _2581 + 5u;
    float _2604 = isnan(1.0) ? _2595 : (isnan(_2595) ? 1.0 : min(_2595, 1.0));
    uint _2608 = _2581 + 4u;
    float _2617 = isnan(1.0) ? _2594 : (isnan(_2594) ? 1.0 : min(_2594, 1.0));
    uint _2621 = _2581 | 1u;
    float _2632 = dot(vec3(cbLight._m0[_2581].xyz), vec3(_1095, _1096, _1097));
    float _2635 = dot(vec3(cbLight._m0[_2621].xyz), vec3(_1095, _1096, _1097));
    float _4968 = isnan(0.0) ? _2632 : (isnan(_2632) ? 0.0 : max(_2632, 0.0));
    float _4979 = isnan(0.0) ? _2635 : (isnan(_2635) ? 0.0 : max(_2635, 0.0));
    float _2640 = (isnan(1.0) ? _4968 : (isnan(_4968) ? 1.0 : min(_4968, 1.0))) * 0.3183098733425140380859375;
    float _2642 = (isnan(1.0) ? _4979 : (isnan(_4979) ? 1.0 : min(_4979, 1.0))) * 0.3183098733425140380859375;
    float _2649 = ((cbLight._m0[_2598].x * _2604) * _2642) + (((cbLight._m0[_2608].x * _2570) * _2617) * _2640);
    float _2650 = ((_2604 * cbLight._m0[_2598].y) * _2642) + (((cbLight._m0[_2608].y * _2572) * _2617) * _2640);
    float _2651 = ((_2604 * cbLight._m0[_2598].z) * _2642) + (((cbLight._m0[_2608].z * _2574) * _2617) * _2640);
    uvec4 _2655 = floatBitsToUint(cbLight._m0[_2581 + 12u]);
    bool _2657 = _2655.x == 0u;
    float _2759;
    float _2761;
    float _2763;
    if (_2657)
    {
        _2759 = _2649;
        _2761 = _2650;
        _2763 = _2651;
    }
    else
    {
        uint _2767 = _2581 + 6u;
        float _2783 = (dot(vec3(cbLight._m0[_2581 + 2u].xyz), vec3(_1095, _1096, _1097)) * 0.5) + 0.5;
        float _2784 = _2783 * _2783;
        float _4990 = isnan(0.0) ? _2784 : (isnan(_2784) ? 0.0 : max(_2784, 0.0));
        float _2785 = isnan(1.0) ? _4990 : (isnan(_4990) ? 1.0 : min(_4990, 1.0));
        float _2786 = isnan(1.0) ? _2596 : (isnan(_2596) ? 1.0 : min(_2596, 1.0));
        _2759 = (((cbLight._m0[_2767].x * 0.3183098733425140380859375) * _2785) * _2786) + _2649;
        _2761 = (((cbLight._m0[_2767].y * 0.3183098733425140380859375) * _2785) * _2786) + _2650;
        _2763 = (((cbLight._m0[_2767].z * 0.3183098733425140380859375) * _2785) * _2786) + _2651;
    }
    bool _2766 = _2655.y == 0u;
    float _2821;
    float _2823;
    float _2825;
    if (_2766)
    {
        _2821 = _2759;
        _2823 = _2761;
        _2825 = _2763;
    }
    else
    {
        uint _2983 = _2581 + 7u;
        float _2999 = (dot(vec3(cbLight._m0[_2581 + 3u].xyz), vec3(_1095, _1096, _1097)) * 0.5) + 0.5;
        float _3000 = _2999 * _2999;
        float _5006 = isnan(0.0) ? _3000 : (isnan(_3000) ? 0.0 : max(_3000, 0.0));
        float _3001 = isnan(1.0) ? _5006 : (isnan(_5006) ? 1.0 : min(_5006, 1.0));
        float _3002 = isnan(1.0) ? _2597 : (isnan(_2597) ? 1.0 : min(_2597, 1.0));
        _2821 = (((cbLight._m0[_2983].x * 0.3183098733425140380859375) * _3001) * _3002) + _2759;
        _2823 = (((cbLight._m0[_2983].y * 0.3183098733425140380859375) * _3001) * _3002) + _2761;
        _2825 = (((cbLight._m0[_2983].z * 0.3183098733425140380859375) * _3001) * _3002) + _2763;
    }
    uint _2828 = _2581 + 8u;
    float _2841 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2581].w)) * _1098) * 0.949999988079071044921875);
    float _2842 = _2841 * _2841;
    float _2843 = cbLight._m0[_2581].x + _1173;
    float _2844 = cbLight._m0[_2581].y + _1174;
    float _2845 = cbLight._m0[_2581].z + _1175;
    float _2849 = inversesqrt(dot(vec3(_2843, _2844, _2845), vec3(_2843, _2844, _2845)));
    float _2850 = _2849 * _2843;
    float _2851 = _2849 * _2844;
    float _2852 = _2849 * _2845;
    float _2853 = dot(vec3(_1095, _1096, _1097), vec3(cbLight._m0[_2581].xyz));
    float _5022 = isnan(0.0) ? _2853 : (isnan(_2853) ? 0.0 : max(_2853, 0.0));
    float _2856 = isnan(1.0) ? _5022 : (isnan(_5022) ? 1.0 : min(_5022, 1.0));
    float _5033 = isnan(0.0) ? _1257 : (isnan(_1257) ? 0.0 : max(_1257, 0.0));
    float _2857 = isnan(1.0) ? _5033 : (isnan(_5033) ? 1.0 : min(_5033, 1.0));
    float _2858 = dot(vec3(_1095, _1096, _1097), vec3(_2850, _2851, _2852));
    float _5044 = isnan(0.0) ? _2858 : (isnan(_2858) ? 0.0 : max(_2858, 0.0));
    float _2861 = isnan(1.0) ? _5044 : (isnan(_5044) ? 1.0 : min(_5044, 1.0));
    float _2862 = dot(vec3(cbLight._m0[_2581].xyz), vec3(_2850, _2851, _2852));
    float _5055 = isnan(0.0) ? _2862 : (isnan(_2862) ? 0.0 : max(_2862, 0.0));
    float _2866 = _2842 * _2842;
    float _2870 = ((_2861 * _2861) * (_2866 + (-1.0))) + 1.0;
    float _2881 = (exp2(log2(1.0 - (isnan(1.0) ? _5055 : (isnan(_5055) ? 1.0 : min(_5055, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2882 = 1.0 - _2842;
    float _2893 = (0.5 / (((_2857 * ((_2856 * _2882) + _2842)) + 9.9999999392252902907785028219223e-09) + (((_2857 * _2882) + _2842) * _2856))) * _2856;
    float _5066 = isnan(0.0) ? _2893 : (isnan(_2893) ? 0.0 : max(_2893, 0.0));
    float _2895 = (isnan(1.0) ? _5066 : (isnan(_5066) ? 1.0 : min(_5066, 1.0))) * (_2866 / ((_2870 * _2870) * 3.141590118408203125));
    uint _2909 = _2581 + 9u;
    float _2920 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2621].w)) * _1098) * 0.949999988079071044921875);
    float _2921 = _2920 * _2920;
    float _2922 = cbLight._m0[_2621].x + _1173;
    float _2923 = cbLight._m0[_2621].y + _1174;
    float _2924 = cbLight._m0[_2621].z + _1175;
    float _2928 = inversesqrt(dot(vec3(_2922, _2923, _2924), vec3(_2922, _2923, _2924)));
    float _2929 = _2928 * _2922;
    float _2930 = _2928 * _2923;
    float _2931 = _2928 * _2924;
    float _2932 = dot(vec3(_1095, _1096, _1097), vec3(cbLight._m0[_2621].xyz));
    float _5077 = isnan(0.0) ? _2932 : (isnan(_2932) ? 0.0 : max(_2932, 0.0));
    float _2935 = isnan(1.0) ? _5077 : (isnan(_5077) ? 1.0 : min(_5077, 1.0));
    float _2936 = dot(vec3(_1095, _1096, _1097), vec3(_2929, _2930, _2931));
    float _5088 = isnan(0.0) ? _2936 : (isnan(_2936) ? 0.0 : max(_2936, 0.0));
    float _2939 = isnan(1.0) ? _5088 : (isnan(_5088) ? 1.0 : min(_5088, 1.0));
    float _2940 = dot(vec3(cbLight._m0[_2621].xyz), vec3(_2929, _2930, _2931));
    float _5099 = isnan(0.0) ? _2940 : (isnan(_2940) ? 0.0 : max(_2940, 0.0));
    float _2944 = _2921 * _2921;
    float _2948 = ((_2939 * _2939) * (_2944 + (-1.0))) + 1.0;
    float _2957 = (exp2(log2(1.0 - (isnan(1.0) ? _5099 : (isnan(_5099) ? 1.0 : min(_5099, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2958 = 1.0 - _2921;
    float _2968 = (0.5 / (((_2857 * ((_2935 * _2958) + _2921)) + 9.9999999392252902907785028219223e-09) + (((_2857 * _2958) + _2921) * _2935))) * _2935;
    float _5110 = isnan(0.0) ? _2968 : (isnan(_2968) ? 0.0 : max(_2968, 0.0));
    float _2970 = (isnan(1.0) ? _5110 : (isnan(_5110) ? 1.0 : min(_5110, 1.0))) * (_2944 / ((_2948 * _2948) * 3.141590118408203125));
    float _2980 = (((_2957 * cbLight._m0[_2909].x) * _2970) * _2604) + ((((cbLight._m0[_2828].x * _2570) * _2881) * _2895) * _2617);
    float _2981 = (((_2957 * cbLight._m0[_2909].y) * _2970) * _2604) + ((((cbLight._m0[_2828].y * _2572) * _2881) * _2895) * _2617);
    float _2982 = (((_2957 * cbLight._m0[_2909].z) * _2970) * _2604) + ((((cbLight._m0[_2828].z * _2574) * _2881) * _2895) * _2617);
    float _3038;
    float _3040;
    float _3042;
    if (_2657)
    {
        _3038 = _2980;
        _3040 = _2981;
        _3042 = _2982;
    }
    else
    {
        uint _3044 = _2581 + 2u;
        uint _3048 = _2581 + 10u;
        float _3062 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_3044].w)) * _1098) * 0.949999988079071044921875);
        float _3063 = _3062 * _3062;
        float _3064 = cbLight._m0[_3044].x + _1173;
        float _3065 = cbLight._m0[_3044].y + _1174;
        float _3066 = cbLight._m0[_3044].z + _1175;
        float _3070 = inversesqrt(dot(vec3(_3064, _3065, _3066), vec3(_3064, _3065, _3066)));
        float _3071 = _3070 * _3064;
        float _3072 = _3070 * _3065;
        float _3073 = _3070 * _3066;
        float _3074 = dot(vec3(_1095, _1096, _1097), vec3(cbLight._m0[_3044].xyz));
        float _5121 = isnan(0.0) ? _3074 : (isnan(_3074) ? 0.0 : max(_3074, 0.0));
        float _3077 = isnan(1.0) ? _5121 : (isnan(_5121) ? 1.0 : min(_5121, 1.0));
        float _3078 = dot(vec3(_1095, _1096, _1097), vec3(_3071, _3072, _3073));
        float _5132 = isnan(0.0) ? _3078 : (isnan(_3078) ? 0.0 : max(_3078, 0.0));
        float _3081 = isnan(1.0) ? _5132 : (isnan(_5132) ? 1.0 : min(_5132, 1.0));
        float _3082 = dot(vec3(cbLight._m0[_3044].xyz), vec3(_3071, _3072, _3073));
        float _5143 = isnan(0.0) ? _3082 : (isnan(_3082) ? 0.0 : max(_3082, 0.0));
        float _3086 = _3063 * _3063;
        float _3090 = ((_3081 * _3081) * (_3086 + (-1.0))) + 1.0;
        float _3099 = (exp2(log2(1.0 - (isnan(1.0) ? _5143 : (isnan(_5143) ? 1.0 : min(_5143, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _3100 = 1.0 - _3063;
        float _3110 = (0.5 / (((_2857 * ((_3077 * _3100) + _3063)) + 9.9999999392252902907785028219223e-09) + (((_2857 * _3100) + _3063) * _3077))) * _3077;
        float _5154 = isnan(0.0) ? _3110 : (isnan(_3110) ? 0.0 : max(_3110, 0.0));
        float _3112 = (isnan(1.0) ? _5154 : (isnan(_5154) ? 1.0 : min(_5154, 1.0))) * (_3086 / ((_3090 * _3090) * 3.141590118408203125));
        float _3113 = isnan(1.0) ? _2596 : (isnan(_2596) ? 1.0 : min(_2596, 1.0));
        _3038 = (((_3099 * cbLight._m0[_3048].x) * _3112) * _3113) + _2980;
        _3040 = (((_3099 * cbLight._m0[_3048].y) * _3112) * _3113) + _2981;
        _3042 = (((_3099 * cbLight._m0[_3048].z) * _3112) * _3113) + _2982;
    }
    float _3144;
    float _3146;
    float _3148;
    if (_2766)
    {
        _3144 = _3038;
        _3146 = _3040;
        _3148 = _3042;
    }
    else
    {
        uint _3155 = _2581 + 3u;
        uint _3159 = _2581 + 11u;
        float _3173 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_3155].w)) * _1098) * 0.949999988079071044921875);
        float _3174 = _3173 * _3173;
        float _3175 = cbLight._m0[_3155].x + _1173;
        float _3176 = cbLight._m0[_3155].y + _1174;
        float _3177 = cbLight._m0[_3155].z + _1175;
        float _3181 = inversesqrt(dot(vec3(_3175, _3176, _3177), vec3(_3175, _3176, _3177)));
        float _3182 = _3181 * _3175;
        float _3183 = _3181 * _3176;
        float _3184 = _3181 * _3177;
        float _3185 = dot(vec3(_1095, _1096, _1097), vec3(cbLight._m0[_3155].xyz));
        float _5170 = isnan(0.0) ? _3185 : (isnan(_3185) ? 0.0 : max(_3185, 0.0));
        float _3188 = isnan(1.0) ? _5170 : (isnan(_5170) ? 1.0 : min(_5170, 1.0));
        float _3189 = dot(vec3(_1095, _1096, _1097), vec3(_3182, _3183, _3184));
        float _5181 = isnan(0.0) ? _3189 : (isnan(_3189) ? 0.0 : max(_3189, 0.0));
        float _3192 = isnan(1.0) ? _5181 : (isnan(_5181) ? 1.0 : min(_5181, 1.0));
        float _3193 = dot(vec3(cbLight._m0[_3155].xyz), vec3(_3182, _3183, _3184));
        float _5192 = isnan(0.0) ? _3193 : (isnan(_3193) ? 0.0 : max(_3193, 0.0));
        float _3197 = _3174 * _3174;
        float _3201 = ((_3192 * _3192) * (_3197 + (-1.0))) + 1.0;
        float _3210 = (exp2(log2(1.0 - (isnan(1.0) ? _5192 : (isnan(_5192) ? 1.0 : min(_5192, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _3211 = 1.0 - _3174;
        float _3221 = (0.5 / (((_2857 * ((_3188 * _3211) + _3174)) + 9.9999999392252902907785028219223e-09) + (((_2857 * _3211) + _3174) * _3188))) * _3188;
        float _5203 = isnan(0.0) ? _3221 : (isnan(_3221) ? 0.0 : max(_3221, 0.0));
        float _3223 = (isnan(1.0) ? _5203 : (isnan(_5203) ? 1.0 : min(_5203, 1.0))) * (_3197 / ((_3201 * _3201) * 3.141590118408203125));
        float _3224 = isnan(1.0) ? _2597 : (isnan(_2597) ? 1.0 : min(_2597, 1.0));
        _3144 = (((_3210 * cbLight._m0[_3159].x) * _3223) * _3224) + _3038;
        _3146 = (((_3210 * cbLight._m0[_3159].y) * _3223) * _3224) + _3040;
        _3148 = (((_3210 * cbLight._m0[_3159].z) * _3223) * _3224) + _3042;
    }
    float _3290;
    float _3292;
    float _3294;
    float _3296;
    float _3298;
    float _3300;
    if (_2579.y == 0u)
    {
        uvec4 _3245 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3246 = _3245.x;
        uint _3257 = uint((float(_3245.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1194) / _3246))) + floor(float(uint(cbSceneParam._m0[85u].x * _1193) / _3246)));
        float _3267 = (log2(_2357 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _3268 = isnan(0.0) ? _3267 : (isnan(_3267) ? 0.0 : max(_3267, 0.0));
        uint _3271 = uint(isnan(14.0) ? _3268 : (isnan(_3268) ? 14.0 : min(_3268, 14.0)));
        uvec4 _3276 = texelFetch(g_lightClusterGridBuffer, int(((_3271 << 2u) + (_3257 << 6u)) >> 2u));
        uint _3277 = _3276.x;
        uint _3278 = _3245.z;
        float _3357;
        float _3359;
        float _3361;
        float _3363;
        float _3365;
        float _3367;
        if (((((1u << ((_3278 >> 4u) & 15u)) + 4294967295u) & _3277) == 0u) || ((_3278 & 240u) == 0u))
        {
            _3357 = 0.0;
            _3359 = 0.0;
            _3361 = 0.0;
            _3363 = 0.0;
            _3365 = 0.0;
            _3367 = 0.0;
        }
        else
        {
            float _3358;
            float _3360;
            float _3362;
            float _3364;
            float _3366;
            float _3368;
            float _3509 = 0.0;
            float _3510 = 0.0;
            float _3511 = 0.0;
            float _3512 = 0.0;
            float _3513 = 0.0;
            float _3514 = 0.0;
            uint _3515 = 0u;
            uint _3524;
            bool _3525;
            for (;;)
            {
                _3524 = texelFetch(g_lightClassification, int((((_3271 << 5u) + (_3257 << 9u)) + (_3515 << 2u)) >> 2u)).x;
                _3525 = _3524 == 0u;
                float frontier_phi_71_pred;
                float frontier_phi_71_pred_1;
                float frontier_phi_71_pred_2;
                float frontier_phi_71_pred_3;
                float frontier_phi_71_pred_4;
                float frontier_phi_71_pred_5;
                if (_3525)
                {
                    frontier_phi_71_pred = _3514;
                    frontier_phi_71_pred_1 = _3513;
                    frontier_phi_71_pred_2 = _3512;
                    frontier_phi_71_pred_3 = _3511;
                    frontier_phi_71_pred_4 = _3510;
                    frontier_phi_71_pred_5 = _3509;
                }
                else
                {
                    float _3654;
                    float _3655;
                    float _3656;
                    float _3657;
                    float _3658;
                    float _3659;
                    uint _3660;
                    _3654 = _3509;
                    _3655 = _3510;
                    _3656 = _3511;
                    _3657 = _3512;
                    _3658 = _3513;
                    _3659 = _3514;
                    _3660 = _3524;
                    float _3581;
                    float _3582;
                    float _3583;
                    float _3584;
                    float _3585;
                    float _3586;
                    for (;;)
                    {
                        uint _3664 = uint(findLSB(_3660)) + (_3515 << 5u);
                        uint _3661 = (_3660 + 4294967295u) & _3660;
                        uint _3666 = _3664 * 48u;
                        vec4 _3680 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3666)).x, texelFetch(g_PointLightRenderingBuffer, int(_3666 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3666 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3666 + 3u)).x));
                        uint _3686 = (_3664 * 48u) + 4u;
                        vec4 _3699 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3686)).x, texelFetch(g_PointLightRenderingBuffer, int(_3686 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3686 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3686 + 3u)).x));
                        uint _3705 = (_3664 * 48u) + 8u;
                        vec3 _3716 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3705)).x, texelFetch(g_PointLightRenderingBuffer, int(_3705 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3705 + 2u)).x));
                        float _3720 = _3680.x - _2355;
                        float _3721 = _3680.y - _2356;
                        float _3722 = _3680.z - _2357;
                        float _3723 = dot(vec3(_3720, _3721, _3722), vec3(_3720, _3721, _3722));
                        float _3726 = inversesqrt(_3723);
                        float _3727 = _3726 * _3720;
                        float _3728 = _3726 * _3721;
                        float _3729 = _3726 * _3722;
                        float _3730 = dot(vec3(_1212, _1215, _1218), vec3(_3727, _3728, _3729));
                        float _3735 = 1.0 - (_3723 * _3680.w);
                        float _5229 = isnan(0.0) ? _3735 : (isnan(_3735) ? 0.0 : max(_3735, 0.0));
                        float _3736 = isnan(1.0) ? _5229 : (isnan(_5229) ? 1.0 : min(_5229, 1.0));
                        float _3737 = sqrt(_3723) * _3699.w;
                        float _3740 = 1.39999997615814208984375 / (_3737 + 1.39999997615814208984375);
                        float _3741 = _3740 * _3740;
                        float _3744 = ((1.0 - _3741) * _3730) + _3741;
                        float _3747 = _3737 * _3737;
                        float _3751 = ((isnan(0.0) ? _3744 : (isnan(_3744) ? 0.0 : max(_3744, 0.0))) * _3736) / ((_3747 * 0.699999988079071044921875) + 1.0);
                        float _3755 = (-0.0) - _2355;
                        float _3756 = (-0.0) - _2356;
                        float _3757 = (-0.0) - _2357;
                        float _3761 = inversesqrt(dot(vec3(_3755, _3756, _3757), vec3(_3755, _3756, _3757)));
                        float _3762 = _3761 * _3755;
                        float _3763 = _3761 * _3756;
                        float _3764 = _3761 * _3757;
                        float _3771 = exp2(log2(1.0 / ((_3747 * 3.5) + 5.0)) * 0.25);
                        float _3772 = 1.0 - _1272;
                        float _3779 = sqrt(1.0 - ((1.0 - (_3772 * _3772)) * (1.0 - (_3771 * _3771))));
                        float _3780 = _3779 * _3779;
                        float _3781 = _3780 * _3780;
                        float _3782 = _3762 + _3727;
                        float _3783 = _3763 + _3728;
                        float _3784 = _3764 + _3729;
                        float _3788 = inversesqrt(dot(vec3(_3782, _3783, _3784), vec3(_3782, _3783, _3784)));
                        float _3792 = dot(vec3(_1212, _1215, _1218), vec3(_3762, _3763, _3764));
                        float _5245 = isnan(0.0) ? _3792 : (isnan(_3792) ? 0.0 : max(_3792, 0.0));
                        float _3795 = isnan(1.0) ? _5245 : (isnan(_5245) ? 1.0 : min(_5245, 1.0));
                        float _3796 = dot(vec3(_1212, _1215, _1218), vec3(_3788 * _3782, _3788 * _3783, _3788 * _3784));
                        float _5256 = isnan(0.0) ? _3796 : (isnan(_3796) ? 0.0 : max(_3796, 0.0));
                        float _3799 = isnan(1.0) ? _5256 : (isnan(_5256) ? 1.0 : min(_5256, 1.0));
                        float _3803 = ((_3799 * _3799) * (_3781 + (-1.0))) + 1.0;
                        float _3804 = _3740 * _3780;
                        float _3805 = _3804 * _3804;
                        float _3808 = ((1.0 - _3805) * _3730) + _3805;
                        float _5267 = isnan(0.0) ? _3808 : (isnan(_3808) ? 0.0 : max(_3808, 0.0));
                        float _3809 = isnan(1.0) ? _5267 : (isnan(_5267) ? 1.0 : min(_5267, 1.0));
                        float _3810 = 1.0 - _3780;
                        float _3820 = (0.5 / (((_3809 * ((_3795 * _3810) + _3780)) + 9.9999999392252902907785028219223e-09) + (((_3809 * _3810) + _3780) * _3795))) * _3809;
                        float _5278 = isnan(0.0) ? _3820 : (isnan(_3820) ? 0.0 : max(_3820, 0.0));
                        float _3831 = (((_3781 * 3.1415927410125732421875) * (isnan(1.0) ? _5278 : (isnan(_5278) ? 1.0 : min(_5278, 1.0)))) / ((_3803 * _3803) * ((_3747 * 2.1991131305694580078125) + 3.141590118408203125))) * _3736;
                        _3584 = (_3751 * _3699.x) + _3657;
                        _3585 = (_3751 * _3699.y) + _3658;
                        _3586 = (_3751 * _3699.z) + _3659;
                        _3581 = (_3831 * _3716.x) + _3654;
                        _3582 = (_3831 * _3716.y) + _3655;
                        _3583 = (_3831 * _3716.z) + _3656;
                        if (_3661 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3654 = _3581;
                            _3655 = _3582;
                            _3656 = _3583;
                            _3657 = _3584;
                            _3658 = _3585;
                            _3659 = _3586;
                            _3660 = _3661;
                        }
                    }
                    frontier_phi_71_pred = _3586;
                    frontier_phi_71_pred_1 = _3585;
                    frontier_phi_71_pred_2 = _3584;
                    frontier_phi_71_pred_3 = _3583;
                    frontier_phi_71_pred_4 = _3582;
                    frontier_phi_71_pred_5 = _3581;
                }
                _3368 = frontier_phi_71_pred;
                _3366 = frontier_phi_71_pred_1;
                _3364 = frontier_phi_71_pred_2;
                _3362 = frontier_phi_71_pred_3;
                _3360 = frontier_phi_71_pred_4;
                _3358 = frontier_phi_71_pred_5;
                uint _3516 = _3515 + 1u;
                if (_3516 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3509 = _3358;
                    _3510 = _3360;
                    _3511 = _3362;
                    _3512 = _3364;
                    _3513 = _3366;
                    _3514 = _3368;
                    _3515 = _3516;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3357 = _3358;
            _3359 = _3360;
            _3361 = _3362;
            _3363 = _3364;
            _3365 = _3366;
            _3367 = _3368;
        }
        uvec4 _3371 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3372 = _3371.z;
        uint _3374 = (_3372 >> 8u) & 15u;
        float _3477;
        float _3479;
        float _3481;
        float _3483;
        float _3485;
        float _3487;
        if (((4294967295u << _3374) & _3277) == 0u)
        {
            _3477 = _3357;
            _3479 = _3359;
            _3481 = _3361;
            _3483 = _3363;
            _3485 = _3365;
            _3487 = _3367;
        }
        else
        {
            float _3502 = inversesqrt(dot(vec3(_2355, _2356, _2357), vec3(_2355, _2356, _2357)));
            float _3503 = _3502 * _2355;
            float _3504 = _3502 * _2356;
            float _3505 = _3502 * _2357;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_3374 < ((_3372 >> 12u) & 15u))
            {
                float _3478;
                float _3480;
                float _3482;
                float _3484;
                float _3486;
                float _3488;
                float _3637 = _3357;
                float _3638 = _3359;
                float _3639 = _3361;
                float _3640 = _3363;
                float _3641 = _3365;
                float _3642 = _3367;
                uint _3643 = _3374;
                uint _3652;
                bool _3653;
                for (;;)
                {
                    _3652 = texelFetch(g_lightClassification, int((((_3271 << 5u) + (_3257 << 9u)) + (_3643 << 2u)) >> 2u)).x;
                    _3653 = _3652 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    float frontier_phi_82_pred_3;
                    float frontier_phi_82_pred_4;
                    float frontier_phi_82_pred_5;
                    if (_3653)
                    {
                        frontier_phi_82_pred = _3642;
                        frontier_phi_82_pred_1 = _3641;
                        frontier_phi_82_pred_2 = _3640;
                        frontier_phi_82_pred_3 = _3639;
                        frontier_phi_82_pred_4 = _3638;
                        frontier_phi_82_pred_5 = _3637;
                    }
                    else
                    {
                        float _3845;
                        float _3846;
                        float _3847;
                        float _3848;
                        float _3849;
                        float _3850;
                        float _4138;
                        float _4139;
                        float _4140;
                        float _4141;
                        float _4142;
                        float _4143;
                        float _3858 = _3637;
                        float _3859 = _3638;
                        float _3860 = _3639;
                        float _3861 = _3640;
                        float _3862 = _3641;
                        float _3863 = _3642;
                        uint _3864 = _3652;
                        uint _3865;
                        vec4 _3890;
                        float _3891;
                        vec4 _3906;
                        vec3 _3918;
                        vec4 _3933;
                        vec4 _3948;
                        float _3994;
                        bool _3995;
                        for (;;)
                        {
                            uint _3875 = ((_3643 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3864));
                            _3865 = (_3864 + 4294967295u) & _3864;
                            uint _3877 = _3875 * 40u;
                            _3890 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3877)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3877 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3877 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3877 + 3u)).x));
                            _3891 = _3890.w;
                            uint _3893 = (_3875 * 40u) + 4u;
                            _3906 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3893)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3893 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3893 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3893 + 3u)).x));
                            uint _3908 = (_3875 * 40u) + 8u;
                            _3918 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3908)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3908 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3908 + 2u)).x));
                            uint _3920 = (_3875 * 40u) + 16u;
                            _3933 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3920)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3920 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3920 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3920 + 3u)).x));
                            uint _3935 = (_3875 * 40u) + 20u;
                            _3948 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3935)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3935 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3935 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3935 + 3u)).x));
                            uint _3950 = (_3875 * 40u) + 24u;
                            vec4 _3963 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3950)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3950 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3950 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3950 + 3u)).x));
                            uint _3969 = (_3875 * 40u) + 28u;
                            vec4 _3982 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3969)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3969 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3969 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3969 + 3u)).x));
                            _3994 = fma(_2357, _3982.z, fma(_2356, _3982.y, _3982.x * _2355)) + _3982.w;
                            _3995 = !((fma(_2357, _3963.z, fma(_2356, _3963.y, _3963.x * _2355)) + _3963.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_3995)
                            {
                                float _4022 = _3890.x - _2355;
                                float _4023 = _3890.y - _2356;
                                float _4024 = _3890.z - _2357;
                                float _4025 = dot(vec3(_4022, _4023, _4024), vec3(_4022, _4023, _4024));
                                float _4028 = inversesqrt(_4025);
                                float _4029 = _4028 * _4022;
                                float _4030 = _4028 * _4023;
                                float _4031 = _4028 * _4024;
                                float _4035 = 1.0 - (_4025 / (_3891 * _3891));
                                float _5289 = isnan(0.0) ? _4035 : (isnan(_4035) ? 0.0 : max(_4035, 0.0));
                                float _4036 = isnan(1.0) ? _5289 : (isnan(_5289) ? 1.0 : min(_5289, 1.0));
                                float _4040 = sqrt(_4025) * _3906.w;
                                float _4042 = 1.39999997615814208984375 / (_4040 + 1.39999997615814208984375);
                                float _4043 = _4042 * _4042;
                                float _4046 = ((1.0 - _4043) * dot(vec3(_4029, _4030, _4031), vec3(_1212, _1215, _1218))) + _4043;
                                float _4049 = _4040 * _4040;
                                float _4053 = (fma(_2357, _3933.z, fma(_2356, _3933.y, _3933.x * _2355)) + _3933.w) / _3994;
                                float _4054 = (fma(_2357, _3948.z, fma(_2356, _3948.y, _3948.x * _2355)) + _3948.w) / _3994;
                                float _4058 = 1.0 - dot(vec2(_4053, _4054), vec2(_4053, _4054));
                                float _5305 = isnan(0.0) ? _4058 : (isnan(_4058) ? 0.0 : max(_4058, 0.0));
                                float _4059 = isnan(1.0) ? _5305 : (isnan(_5305) ? 1.0 : min(_5305, 1.0));
                                float _4060 = _4059 * (((isnan(0.0) ? _4046 : (isnan(_4046) ? 0.0 : max(_4046, 0.0))) * _4036) / ((_4049 * 0.699999988079071044921875) + 1.0));
                                float _4072 = exp2(log2(1.0 / ((_4049 * 3.5) + 5.0)) * 0.25);
                                float _4073 = 1.0 - _1272;
                                float _4080 = sqrt(1.0 - ((1.0 - (_4073 * _4073)) * (1.0 - (_4072 * _4072))));
                                float _4081 = _4080 * _4080;
                                float _4082 = _4081 * _4081;
                                float _4083 = _4029 - _3503;
                                float _4084 = _4030 - _3504;
                                float _4085 = _4031 - _3505;
                                float _4089 = inversesqrt(dot(vec3(_4083, _4084, _4085), vec3(_4083, _4084, _4085)));
                                float _4093 = dot(vec3(_1212, _1215, _1218), vec3((-0.0) - _3503, (-0.0) - _3504, (-0.0) - _3505));
                                float _5316 = isnan(0.0) ? _4093 : (isnan(_4093) ? 0.0 : max(_4093, 0.0));
                                float _4096 = isnan(1.0) ? _5316 : (isnan(_5316) ? 1.0 : min(_5316, 1.0));
                                float _4097 = dot(vec3(_1212, _1215, _1218), vec3(_4089 * _4083, _4089 * _4084, _4089 * _4085));
                                float _5327 = isnan(0.0) ? _4097 : (isnan(_4097) ? 0.0 : max(_4097, 0.0));
                                float _4100 = isnan(1.0) ? _5327 : (isnan(_5327) ? 1.0 : min(_5327, 1.0));
                                float _4104 = ((_4100 * _4100) * (_4082 + (-1.0))) + 1.0;
                                float _4105 = _4042 * _4081;
                                float _4106 = _4105 * _4105;
                                float _4112 = ((1.0 - _4106) * dot(vec3(_1212, _1215, _1218), vec3(_4029, _4030, _4031))) + _4106;
                                float _5338 = isnan(0.0) ? _4112 : (isnan(_4112) ? 0.0 : max(_4112, 0.0));
                                float _4113 = isnan(1.0) ? _5338 : (isnan(_5338) ? 1.0 : min(_5338, 1.0));
                                float _4114 = 1.0 - _4081;
                                float _4124 = (0.5 / (((_4113 * ((_4096 * _4114) + _4081)) + 9.9999999392252902907785028219223e-09) + (((_4113 * _4114) + _4081) * _4096))) * _4113;
                                float _5349 = isnan(0.0) ? _4124 : (isnan(_4124) ? 0.0 : max(_4124, 0.0));
                                float _4134 = (_4059 * _4036) * (((_4082 * 3.1415927410125732421875) * (isnan(1.0) ? _5349 : (isnan(_5349) ? 1.0 : min(_5349, 1.0)))) / ((_4104 * _4104) * ((_4049 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_88_pred = _4060 * _3906.z;
                                frontier_phi_88_pred_1 = _4060 * _3906.y;
                                frontier_phi_88_pred_2 = _4060 * _3906.x;
                                frontier_phi_88_pred_3 = _4134 * _3918.z;
                                frontier_phi_88_pred_4 = _4134 * _3918.y;
                                frontier_phi_88_pred_5 = _4134 * _3918.x;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _4143 = frontier_phi_88_pred;
                            _4142 = frontier_phi_88_pred_1;
                            _4141 = frontier_phi_88_pred_2;
                            _4140 = frontier_phi_88_pred_3;
                            _4139 = frontier_phi_88_pred_4;
                            _4138 = frontier_phi_88_pred_5;
                            _3848 = _4141 + _3861;
                            _3849 = _4142 + _3862;
                            _3850 = _4143 + _3863;
                            _3845 = _4138 + _3858;
                            _3846 = _4139 + _3859;
                            _3847 = _4140 + _3860;
                            if (_3865 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3858 = _3845;
                                _3859 = _3846;
                                _3860 = _3847;
                                _3861 = _3848;
                                _3862 = _3849;
                                _3863 = _3850;
                                _3864 = _3865;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _3850;
                        frontier_phi_82_pred_1 = _3849;
                        frontier_phi_82_pred_2 = _3848;
                        frontier_phi_82_pred_3 = _3847;
                        frontier_phi_82_pred_4 = _3846;
                        frontier_phi_82_pred_5 = _3845;
                    }
                    _3488 = frontier_phi_82_pred;
                    _3486 = frontier_phi_82_pred_1;
                    _3484 = frontier_phi_82_pred_2;
                    _3482 = frontier_phi_82_pred_3;
                    _3480 = frontier_phi_82_pred_4;
                    _3478 = frontier_phi_82_pred_5;
                    uint _3644 = _3643 + 1u;
                    if (_3644 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3637 = _3478;
                        _3638 = _3480;
                        _3639 = _3482;
                        _3640 = _3484;
                        _3641 = _3486;
                        _3642 = _3488;
                        _3643 = _3644;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _3484;
                frontier_phi_63_64_ladder_1 = _3488;
                frontier_phi_63_64_ladder_2 = _3486;
                frontier_phi_63_64_ladder_3 = _3482;
                frontier_phi_63_64_ladder_4 = _3480;
                frontier_phi_63_64_ladder_5 = _3478;
            }
            else
            {
                frontier_phi_63_64_ladder = _3363;
                frontier_phi_63_64_ladder_1 = _3367;
                frontier_phi_63_64_ladder_2 = _3365;
                frontier_phi_63_64_ladder_3 = _3361;
                frontier_phi_63_64_ladder_4 = _3359;
                frontier_phi_63_64_ladder_5 = _3357;
            }
            _3477 = frontier_phi_63_64_ladder_5;
            _3479 = frontier_phi_63_64_ladder_4;
            _3481 = frontier_phi_63_64_ladder_3;
            _3483 = frontier_phi_63_64_ladder;
            _3485 = frontier_phi_63_64_ladder_2;
            _3487 = frontier_phi_63_64_ladder_1;
        }
        float _3492 = isnan(1.0) ? _1256 : (isnan(_1256) ? 1.0 : min(_1256, 1.0));
        _3290 = (_3492 * _3483) + _2821;
        _3292 = (_3492 * _3485) + _2823;
        _3294 = (_3492 * _3487) + _2825;
        _3296 = ((_3477 * 0.039999999105930328369140625) * _3492) + _3144;
        _3298 = ((_3479 * 0.039999999105930328369140625) * _3492) + _3146;
        _3300 = ((_3481 * 0.039999999105930328369140625) * _3492) + _3148;
    }
    else
    {
        _3290 = _2821;
        _3292 = _2823;
        _3294 = _2825;
        _3296 = _3144;
        _3298 = _3146;
        _3300 = _3148;
    }
    float _5365 = isnan(0.0) ? _1241 : (isnan(_1241) ? 0.0 : max(_1241, 0.0));
    float _5376 = isnan(0.0) ? _1242 : (isnan(_1242) ? 0.0 : max(_1242, 0.0));
    float _5387 = isnan(0.0) ? _1243 : (isnan(_1243) ? 0.0 : max(_1243, 0.0));
    float _3317 = ((isnan(1.0) ? _5365 : (isnan(_5365) ? 1.0 : min(_5365, 1.0))) * (_3290 + ((isnan(0.0) ? _2011 : (isnan(_2011) ? 0.0 : max(_2011, 0.0))) * _1256))) + ((_3296 + ((isnan(0.0) ? _2302 : (isnan(_2302) ? 0.0 : max(_2302, 0.0))) * _2090)) * cbPerFrame._m0[3u].x);
    float _3318 = ((isnan(1.0) ? _5376 : (isnan(_5376) ? 1.0 : min(_5376, 1.0))) * (_3292 + ((isnan(0.0) ? _2014 : (isnan(_2014) ? 0.0 : max(_2014, 0.0))) * _1256))) + ((_3298 + ((isnan(0.0) ? _2305 : (isnan(_2305) ? 0.0 : max(_2305, 0.0))) * _2090)) * cbPerFrame._m0[3u].x);
    float _3319 = ((isnan(1.0) ? _5387 : (isnan(_5387) ? 1.0 : min(_5387, 1.0))) * (_3294 + ((isnan(0.0) ? _2017 : (isnan(_2017) ? 0.0 : max(_2017, 0.0))) * _1256))) + ((_3300 + ((isnan(0.0) ? _2308 : (isnan(_2308) ? 0.0 : max(_2308, 0.0))) * _2090)) * cbPerFrame._m0[3u].x);
    uint _3320 = _295 + 6u;
    float _3328 = _1193 / cbSceneParam._m0[86u].x;
    float _3329 = _1194 / cbSceneParam._m0[86u].y;
    vec4 _3343 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3328, _3329, (log2((isnan(cbSceneParam._m0[77u].w) ? _1116 : (isnan(_1116) ? cbSceneParam._m0[77u].w : min(_1116, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3345 = _3343.x;
    float _3346 = _3343.y;
    float _3347 = _3343.z;
    float _3348 = _3343.w;
    float _3419;
    float _3421;
    float _3423;
    float _3425;
    if (_1116 > cbSceneParam._m0[78u].w)
    {
        float _3382 = isnan(_1116) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _1116 : min(cbSceneParam._m0[80u].w, _1116));
        float _3383 = _3382 / _1116;
        float _3394 = _3383 * _1166;
        float _3395 = _1167 * _3383;
        float _3396 = (-0.0) - _3395;
        float _3397 = _3383 * _1168;
        float _3399 = (cbSceneParam._m0[77u].w * _3396) / _3382;
        float _3400 = _3399 + cbSceneParam._m0[79u].w;
        float _3401 = cbSceneParam._m0[79u].w - _3395;
        float _3407 = sqrt(((_3394 * _3394) + (_3395 * _3395)) + (_3397 * _3397));
        float _3410 = (1.0 - (cbSceneParam._m0[77u].w / _3382)) * _3407;
        float _3415 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3417 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3594;
        if (abs((_3396 - _3399) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3594 = ((((_3400 > 0.0) ? exp2(_3415 * _3400) : (2.0 - exp2(_3417 * _3400))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3410;
        }
        else
        {
            float _3538 = 1.0 / cbSceneParam._m0[80u].x;
            float _3539 = isnan(_3401) ? _3400 : (isnan(_3400) ? _3401 : max(_3400, _3401));
            float _3540 = isnan(_3401) ? _3400 : (isnan(_3400) ? _3401 : min(_3400, _3401));
            float _3549 = isnan(0.0) ? _3539 : (isnan(_3539) ? 0.0 : min(_3539, 0.0));
            float _3550 = isnan(0.0) ? _3540 : (isnan(_3540) ? 0.0 : min(_3540, 0.0));
            _3594 = ((abs(_3407 / _3396) * cbSceneParam._m0[80u].y) * ((((_3549 - _3550) * 2.0) - ((exp2(_3415 * (isnan(0.0) ? _3539 : (isnan(_3539) ? 0.0 : max(_3539, 0.0)))) - exp2(_3415 * (isnan(0.0) ? _3540 : (isnan(_3540) ? 0.0 : max(_3540, 0.0))))) * _3538)) - ((exp2(_3417 * _3549) - exp2(_3417 * _3550)) * _3538))) + (_3410 * cbSceneParam._m0[80u].z);
        }
        vec4 _3596 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3328, _3329, 1.0), 0.0);
        float _3605 = exp2((_3594 * (-1.44269502162933349609375)) * (1.0 - _3596.w));
        float _3606 = log2(_3605);
        float _3622 = log2(_3348);
        _3419 = (exp2(_3622 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3606 * cbSceneParam._m0[78u].x)) * _3596.x) / cbSceneParam._m0[78u].x)) + _3345;
        _3421 = (exp2(_3622 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3606 * cbSceneParam._m0[78u].y)) * _3596.y) / cbSceneParam._m0[78u].y)) + _3346;
        _3423 = (exp2(_3622 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3606 * cbSceneParam._m0[78u].z)) * _3596.z) / cbSceneParam._m0[78u].z)) + _3347;
        _3425 = _3605 * _3348;
    }
    else
    {
        _3419 = _3345;
        _3421 = _3346;
        _3423 = _3347;
        _3425 = _3348;
    }
    bool _3632;
    vec4 _3435;
    vec4 _3457;
    float _3459;
    float _3463;
    float _3464;
    float _3465;
    float _3466;
    bool _3476;
    for (;;)
    {
        _3435 = cbMatDynParam._m0[0u];
        float _3437 = roundEven(_3435.y);
        bool _3438 = _3437 == 3.0;
        float _3439 = log2(_3425);
        float _3446 = exp2(_3439 * cbSceneParam._m0[78u].x) * _3317;
        float _3447 = exp2(_3439 * cbSceneParam._m0[78u].y) * _3318;
        float _3448 = exp2(_3439 * cbSceneParam._m0[78u].z) * _3319;
        float _3455 = _1182 + (-0.5);
        _3457 = cbMtdParam._m0[1u];
        _3459 = _3457.y * _3455;
        float _3462 = (_3437 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3463 = _3462 * (_3438 ? _3446 : (_3446 + (cbSceneParam._m0[72u].w * _3419)));
        _3464 = _3462 * (_3438 ? _3447 : (_3447 + (cbSceneParam._m0[72u].w * _3421)));
        _3465 = _3462 * (_3438 ? _3448 : (_3448 + (cbSceneParam._m0[72u].w * _3423)));
        _3466 = _3455 * 0.999000012874603271484375;
        _3476 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3476)
        {
            if ((cbInstanceData._m0[_295 + 7u].x + _3466) < 0.5)
            {
                _3632 = true;
                break;
            }
        }
        uint _3573 = _1231 + uint(_3435.w);
        if ((cbInstanceData._m0[_3573].w < 1.0) && ((cbInstanceData._m0[_3573].w + _3466) < 0.5))
        {
            _3632 = true;
            break;
        }
        if ((_3459 + 1.0) < _3457.x)
        {
            _3632 = true;
            break;
        }
        _3632 = false;
        break;
    }
    float _3836;
    if (_3632)
    {
        discard_state = true;
        _3836 = 0.0;
    }
    else
    {
        _3836 = cbInstanceData._m0[_3320].w;
    }
    SV_Target.x = _3463;
    SV_Target.y = _3464;
    SV_Target.z = _3465;
    SV_Target.w = _3836;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_3320].w;
    discard_exit();
}


