#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_0;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 13) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_22;
layout(set = 0, binding = 14) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_29;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_10;
layout(set = 0, binding = 20) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_6;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1508;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _236 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _237 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _238 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _244 = inversesqrt(dot(vec3(_236, _237, _238), vec3(_236, _237, _238)));
    float _245 = _244 * _236;
    float _246 = _244 * _237;
    float _247 = _244 * _238;
    float _251 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _252 = _251 * NORMAL.x;
    float _253 = _251 * NORMAL.y;
    float _254 = _251 * NORMAL.z;
    float _258 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _259 = _258 * TANGENT.x;
    float _260 = _258 * TANGENT.y;
    float _261 = _258 * TANGENT.z;
    float _270 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _272 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _273 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3810 = isnan(0.0) ? _270 : (isnan(_270) ? 0.0 : max(_270, 0.0));
    float _3821 = isnan(0.0) ? _272 : (isnan(_272) ? 0.0 : max(_272, 0.0));
    float _3832 = isnan(0.0) ? _273 : (isnan(_273) ? 0.0 : max(_273, 0.0));
    uint _283 = uint(roundEven(NORMAL.w)) * 13u;
    uint _288 = _283 + 1u;
    uint _292 = _283 + 2u;
    float _301 = sqrt(((cbInstanceData._m0[_288].x * cbInstanceData._m0[_288].x) + (cbInstanceData._m0[_283].x * cbInstanceData._m0[_283].x)) + (cbInstanceData._m0[_292].x * cbInstanceData._m0[_292].x));
    float _302 = _301 * TEXCOORD.z;
    float _303 = _301 * TEXCOORD.w;
    vec4 _316 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _302) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _303) + cbTextureTilingScale._m0[13u].w));
    vec4 _339 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _365 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _370 = _365.x * cbMtdParam._m0[11u].x;
    float _371 = _365.y * cbMtdParam._m0[11u].y;
    float _372 = _365.z * cbMtdParam._m0[11u].z;
    vec4 _391 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _302) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _303) + cbTextureTilingScale._m0[5u].w));
    vec4 _410 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _445 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _447 = _445.x;
    float _459 = dot(vec4(_447, _445.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _476 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _410.x) * 2.0) - ((((_447 - _459) * cbMtdParam._m0[24u].z) + _459) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3843 = isnan(0.0) ? _476 : (isnan(_476) ? 0.0 : max(_476, 0.0));
    float _477 = isnan(1.0) ? _3843 : (isnan(_3843) ? 1.0 : min(_3843, 1.0));
    float _484 = (_477 * ((_391.x * cbMtdParam._m0[12u].x) - _370)) + _370;
    float _485 = (_477 * ((_391.y * cbMtdParam._m0[12u].y) - _371)) + _371;
    float _486 = (_477 * ((_391.z * cbMtdParam._m0[12u].z) - _372)) + _372;
    vec4 _503 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _302) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _303) + cbTextureTilingScale._m0[3u].w));
    vec4 _523 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _525 = _523.x;
    float _535 = dot(vec4(_525, _523.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _549 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _410.y) * 2.0) - ((((_525 - _535) * cbMtdParam._m0[24u].z) + _535) * cbMtdParam._m0[20u].w))) + 1.0;
    float _3854 = isnan(0.0) ? _549 : (isnan(_549) ? 0.0 : max(_549, 0.0));
    float _550 = isnan(1.0) ? _3854 : (isnan(_3854) ? 1.0 : min(_3854, 1.0));
    float _560 = (_339.x * cbMtdParam._m0[9u].x) * ((_550 * ((_503.x * cbMtdParam._m0[13u].x) - _484)) + _484);
    float _561 = (_339.y * cbMtdParam._m0[9u].y) * ((_550 * ((_503.y * cbMtdParam._m0[13u].y) - _485)) + _485);
    float _562 = (_339.z * cbMtdParam._m0[9u].z) * ((_550 * ((_503.z * cbMtdParam._m0[13u].z) - _486)) + _486);
    float _566 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _316.x) * _560;
    float _569 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _316.y) * _561;
    float _572 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _316.z) * _562;
    float _580 = (((_560 - _566) * (isnan(1.0) ? _3810 : (isnan(_3810) ? 1.0 : min(_3810, 1.0)))) + _566) * 4.55000019073486328125;
    float _582 = (((_561 - _569) * (isnan(1.0) ? _3821 : (isnan(_3821) ? 1.0 : min(_3821, 1.0)))) + _569) * 4.55000019073486328125;
    float _584 = (((_562 - _572) * (isnan(1.0) ? _3832 : (isnan(_3832) ? 1.0 : min(_3832, 1.0)))) + _572) * 4.55000019073486328125;
    vec4 _603 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _302) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _303) + cbTextureTilingScale._m0[14u].w));
    vec4 _622 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _302) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _303) + cbTextureTilingScale._m0[20u].w));
    vec4 _647 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _302) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _303) + cbTextureTilingScale._m0[4u].w));
    vec4 _664 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _666 = _664.x;
    float _667 = _664.y;
    float _668 = _664.z;
    float _675 = ((_647.x - _666) * _477) + _666;
    float _676 = ((_647.y - _667) * _477) + _667;
    float _677 = ((_647.z - _668) * _477) + _668;
    vec4 _689 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _302) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _303) + cbTextureTilingScale._m0[2u].w));
    float _702 = ((_689.z - _677) * _550) + _677;
    float _705 = ((((_689.x - _675) * _550) + _675) * 2.0) + (-1.0);
    float _706 = ((((_689.y - _676) * _550) + _676) * 2.0) + (-1.0);
    float _707 = dot(vec2(_705, _706), vec2(_705, _706));
    float _3865 = isnan(0.0) ? _707 : (isnan(_707) ? 0.0 : max(_707, 0.0));
    float _712 = sqrt(1.0 - (isnan(1.0) ? _3865 : (isnan(_3865) ? 1.0 : min(_3865, 1.0))));
    vec4 _730 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _742 = (_705 + ((((_622.x * 2.0) + (-1.0)) * TEXCOORD_11.x) * cbMtdParam._m0[20u].x)) + (((_730.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _743 = (_706 + ((((_622.y * 2.0) + (-1.0)) * TEXCOORD_11.y) * cbMtdParam._m0[20u].x)) + (((_730.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _746 = fma(_712, _252, fma(_743, _259, _742 * _245));
    float _749 = fma(_712, _253, fma(_743, _260, _742 * _246));
    float _752 = fma(_712, _254, fma(_743, _261, _742 * _247));
    float _756 = inversesqrt(dot(vec3(_746, _749, _752), vec3(_746, _749, _752)));
    vec4 _783 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _302) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _303) + cbTextureTilingScale._m0[11u].w));
    float _785 = _783.x;
    float _786 = 1.0 - _785;
    float _792 = (cbMtdParam._m0[19u].x + dot(vec4(_756 * _746, _756 * _749, _756 * _752, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_785 - _786) * cbMtdParam._m0[24u].w) + _786) * cbMtdParam._m0[21u].z);
    float _3876 = isnan(0.0) ? _792 : (isnan(_792) ? 0.0 : max(_792, 0.0));
    float _793 = isnan(1.0) ? _3876 : (isnan(_3876) ? 1.0 : min(_3876, 1.0));
    float _795 = (-0.0) - cbMtdParam._m0[24u].x;
    float _797 = isnan(0.0) ? _795 : (isnan(_795) ? 0.0 : max(_795, 0.0));
    float _798 = isnan(1.0) ? _797 : (isnan(_797) ? 1.0 : min(_797, 1.0));
    float _805 = _793 - ((_793 * TEXCOORD_8.x) * _798);
    float _806 = _793 - ((_793 * TEXCOORD_8.y) * _798);
    float _807 = _793 - ((_793 * TEXCOORD_8.z) * _798);
    float _814 = (_805 * ((_603.x * cbMtdParam._m0[18u].x) - _580)) + _580;
    float _815 = (_806 * ((_603.y * cbMtdParam._m0[18u].y) - _582)) + _582;
    float _816 = (_807 * ((_603.z * cbMtdParam._m0[18u].z) - _584)) + _584;
    vec4 _828 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _302) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _303) + cbTextureTilingScale._m0[19u].w));
    float _830 = _828.x;
    float _831 = 1.0 - _830;
    float _859 = (TEXCOORD_8.x - ((cbMtdParam._m0[22u].w * (1.0 - TEXCOORD_8.x)) * ((((_830 - _831) * cbMtdParam._m0[24u].y) + _831) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3897 = isnan(0.0) ? _859 : (isnan(_859) ? 0.0 : max(_859, 0.0));
    float _860 = isnan(1.0) ? _3897 : (isnan(_3897) ? 1.0 : min(_3897, 1.0));
    float _868 = ((((cbMtdParam._m0[10u].x - _814) * TEXCOORD_8.x) * cbMtdParam._m0[23u].w) * _860) + _814;
    float _869 = ((((cbMtdParam._m0[10u].y - _815) * TEXCOORD_8.y) * cbMtdParam._m0[23u].w) * _860) + _815;
    float _870 = (((cbMtdParam._m0[23u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _816)) * _860) + _816;
    float _875 = (((_622.z - _702) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _702;
    float _879 = ((_730.z - _875) * cbMtdParam._m0[19u].w) + _875;
    vec4 _893 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _302) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _303) + cbTextureTilingScale._m0[15u].w));
    float _900 = (_893.x * 2.0) + (-1.0);
    float _901 = (_893.y * 2.0) + (-1.0);
    float _902 = dot(vec2(_900, _901), vec2(_900, _901));
    float _3908 = isnan(0.0) ? _902 : (isnan(_902) ? 0.0 : max(_902, 0.0));
    float _910 = ((_893.z - _879) * _805) + _879;
    float _913 = ((cbMtdParam._m0[23u].y - _910) * _860) + _910;
    vec4 _932 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _302) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _303) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _938 = (_932.x * 2.0) + (-1.0);
    float _939 = (_932.y * 2.0) + (-1.0);
    float _940 = dot(vec2(_938, _939), vec2(_938, _939));
    float _3919 = isnan(0.0) ? _940 : (isnan(_940) ? 0.0 : max(_940, 0.0));
    float _955 = ((sqrt(1.0 - (isnan(1.0) ? _3908 : (isnan(_3908) ? 1.0 : min(_3908, 1.0)))) - _712) * _807) + _712;
    float _958 = (((_900 - _742) * _805) + _742) + (cbMtdParam._m0[21u].x * _742);
    float _959 = (((_901 - _743) * _806) + _743) + (cbMtdParam._m0[21u].x * _743);
    float _970 = (((_938 - _958) + (_958 * cbMtdParam._m0[22u].z)) * _860) + _958;
    float _971 = (((_939 - _959) + (_959 * cbMtdParam._m0[22u].z)) * _860) + _959;
    float _972 = (_860 * (sqrt(1.0 - (isnan(1.0) ? _3919 : (isnan(_3919) ? 1.0 : min(_3919, 1.0)))) - _955)) + _955;
    float _974 = cbMtdParam._m0[22u].x + _730.w;
    float _977 = fma(_972, _252, fma(_971, _259, _970 * _245));
    float _980 = fma(_972, _253, fma(_971, _260, _970 * _246));
    float _983 = fma(_972, _254, fma(_971, _261, _970 * _247));
    float _987 = inversesqrt(dot(vec3(_977, _980, _983), vec3(_977, _980, _983)));
    float _988 = _987 * _977;
    float _989 = _987 * _980;
    float _990 = _987 * _983;
    float _3930 = isnan(0.0) ? _913 : (isnan(_913) ? 0.0 : max(_913, 0.0));
    float _991 = isnan(1.0) ? _3930 : (isnan(_3930) ? 1.0 : min(_3930, 1.0));
    float _3941 = isnan(0.0) ? _974 : (isnan(_974) ? 0.0 : max(_974, 0.0));
    float _3952 = isnan(0.0) ? _868 : (isnan(_868) ? 0.0 : max(_868, 0.0));
    float _3963 = isnan(0.0) ? _869 : (isnan(_869) ? 0.0 : max(_869, 0.0));
    float _3974 = isnan(0.0) ? _870 : (isnan(_870) ? 0.0 : max(_870, 0.0));
    float _1009 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _1049 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _1059 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _1049);
    float _1060 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _1049);
    float _1061 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _1049);
    float _1065 = inversesqrt(dot(vec3(_1059, _1060, _1061), vec3(_1059, _1060, _1061)));
    float _1066 = _1059 * _1065;
    float _1067 = _1060 * _1065;
    float _1068 = _1061 * _1065;
    float _1074 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1075 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1093 = fma(_990, cbSceneParam._m0[5u].z, fma(_989, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _988));
    float _1096 = fma(_990, cbSceneParam._m0[6u].z, fma(_989, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _988));
    float _1099 = fma(_990, cbSceneParam._m0[7u].z, fma(_989, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _988));
    uint _1113 = (_283 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _1119 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3952 : (isnan(_3952) ? 1.0 : min(_3952, 1.0)))) * cbInstanceData._m0[_1113].x;
    float _1120 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3963 : (isnan(_3963) ? 1.0 : min(_3963, 1.0)))) * cbInstanceData._m0[_1113].y;
    float _1121 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3974 : (isnan(_3974) ? 1.0 : min(_3974, 1.0)))) * cbInstanceData._m0[_1113].z;
    float _3985 = isnan(0.0) ? _1119 : (isnan(_1119) ? 0.0 : max(_1119, 0.0));
    float _1122 = isnan(1.0) ? _3985 : (isnan(_3985) ? 1.0 : min(_3985, 1.0));
    float _3996 = isnan(0.0) ? _1120 : (isnan(_1120) ? 0.0 : max(_1120, 0.0));
    float _1123 = isnan(1.0) ? _3996 : (isnan(_3996) ? 1.0 : min(_3996, 1.0));
    float _4007 = isnan(0.0) ? _1121 : (isnan(_1121) ? 0.0 : max(_1121, 0.0));
    float _1124 = isnan(1.0) ? _4007 : (isnan(_4007) ? 1.0 : min(_4007, 1.0));
    vec4 _1133 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1074, cbSceneParam._m0[86u].y * _1075));
    float _1137 = ((isnan(1.0) ? _3941 : (isnan(_3941) ? 1.0 : min(_3941, 1.0))) * TEXCOORD_5.w) * _1133.x;
    float _1138 = dot(vec3(_988, _989, _990), vec3(_1066, _1067, _1068));
    float _1141 = _1138 * 2.0;
    float _1145 = (_1141 * _988) - _1066;
    float _1146 = (_1141 * _989) - _1067;
    float _1147 = (_1141 * _990) - _1068;
    float _1151 = abs(dot(vec3(_1066, _1067, _1068), vec3(_988, _989, _990)));
    float _4018 = isnan(0.0) ? _1151 : (isnan(_1151) ? 0.0 : max(_1151, 0.0));
    float _1153 = sqrt(_991);
    float _1166 = exp2((_1153 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4018 : (isnan(_4018) ? 1.0 : min(_4018, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1153 * 3.0));
    float _1198 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1202 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1206 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1507;
    float _1509;
    float _1510;
    float _1511;
    float _1512;
    float _1513;
    float _1514;
    float _1515;
    float _1516;
    float _1517;
    float _1518;
    float _1519;
    float _1520;
    float _1521;
    float _1522;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1232 = fma(_1206, cbModelParam._m0[26u].z, fma(_1202, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1198));
        float _1236 = fma(_1206, cbModelParam._m0[27u].z, fma(_1202, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1198));
        float _1240 = fma(_1206, cbModelParam._m0[28u].z, fma(_1202, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1198));
        float _1265 = _1198 + _988;
        float _1266 = _1202 + _989;
        float _1267 = _1206 + _990;
        float _1277 = fma(_1267, cbModelParam._m0[26u].z, fma(_1266, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1265)) - _1232;
        float _1278 = fma(_1267, cbModelParam._m0[27u].z, fma(_1266, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1265)) - _1236;
        float _1279 = fma(_1267, cbModelParam._m0[28u].z, fma(_1266, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1265)) - _1240;
        float _1283 = inversesqrt(dot(vec3(_1277, _1278, _1279), vec3(_1277, _1278, _1279)));
        float _1296 = ((_1283 * _1277) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1232 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1297 = ((_1283 * _1278) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1236 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1298 = ((_1283 * _1279) / cbModelParam._m0[34u].z) + ((((((_1240 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1301 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1296, _1297, _1298), 0.0);
        vec4 _1308 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1296, _1297, _1298), 0.0);
        vec4 _1315 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1296, _1297, _1298), 0.0);
        vec4 _1322 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1296, _1297, _1298), 0.0);
        float _1335 = exp2((_1301.w + (-0.5)) * 20.0) * 2.0;
        float _1336 = _1335 * (_1301.x + (-0.5));
        float _1337 = _1335 * (_1301.y + (-0.5));
        float _1338 = _1335 * (_1301.z + (-0.5));
        float _1345 = exp2((_1308.w + (-0.5)) * 20.0) * 2.0;
        float _1346 = _1345 * (_1308.x + (-0.5));
        float _1347 = _1345 * (_1308.y + (-0.5));
        float _1348 = _1345 * (_1308.z + (-0.5));
        float _1355 = exp2((_1315.w + (-0.5)) * 20.0) * 2.0;
        float _1356 = _1355 * (_1315.x + (-0.5));
        float _1357 = _1355 * (_1315.y + (-0.5));
        float _1358 = _1355 * (_1315.z + (-0.5));
        float _1365 = exp2((_1322.w + (-0.5)) * 20.0) * 2.0;
        float _1366 = _1365 * (_1322.x + (-0.5));
        float _1367 = _1365 * (_1322.y + (-0.5));
        float _1368 = _1365 * (_1322.z + (-0.5));
        float _1369 = isnan(0.0) ? _1366 : (isnan(_1366) ? 0.0 : max(_1366, 0.0));
        float _1370 = isnan(0.0) ? _1367 : (isnan(_1367) ? 0.0 : max(_1367, 0.0));
        float _1371 = isnan(0.0) ? _1368 : (isnan(_1368) ? 0.0 : max(_1368, 0.0));
        float _1372 = _1336 * 0.5;
        float _1373 = _1346 * 0.5;
        float _1374 = _1356 * 0.5;
        float _1375 = dot(vec3(_1372, _1373, _1374), vec3(_1372, _1373, _1374));
        float _1380 = (_1375 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1375);
        float _1389 = (dot(vec3(_988, _989, _990), vec3(_1380 * _1372, _1380 * _1373, _1380 * _1374)) + 1.0) * 0.5;
        float _4044 = isnan(0.0) ? _1389 : (isnan(_1389) ? 0.0 : max(_1389, 0.0));
        float _1399 = sqrt(((_1373 * _1373) + (_1372 * _1372)) + (_1374 * _1374)) / (_1369 + 9.9999997473787516355514526367188e-06);
        float _4055 = isnan(0.0) ? _1399 : (isnan(_1399) ? 0.0 : max(_1399, 0.0));
        float _1400 = isnan(1.0) ? _4055 : (isnan(_4055) ? 1.0 : min(_4055, 1.0));
        float _1401 = _1400 * 2.0;
        float _1405 = (1.0 - _1400) / (_1400 + 1.0);
        float _4066 = isnan(0.0) ? _1405 : (isnan(_1405) ? 0.0 : max(_1405, 0.0));
        float _1406 = isnan(1.0) ? _4066 : (isnan(_4066) ? 1.0 : min(_4066, 1.0));
        float _1415 = ((((1.0 - _1406) * (_1401 + 2.0)) * exp2(log2(isnan(1.0) ? _4044 : (isnan(_4044) ? 1.0 : min(_4044, 1.0))) * (_1401 + 1.0))) + _1406) * _1369;
        float _1416 = _1337 * 0.5;
        float _1417 = _1347 * 0.5;
        float _1418 = _1357 * 0.5;
        float _1419 = dot(vec3(_1416, _1417, _1418), vec3(_1416, _1417, _1418));
        float _1424 = (_1419 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1419);
        float _1432 = (dot(vec3(_988, _989, _990), vec3(_1424 * _1416, _1424 * _1417, _1424 * _1418)) + 1.0) * 0.5;
        float _4077 = isnan(0.0) ? _1432 : (isnan(_1432) ? 0.0 : max(_1432, 0.0));
        float _1441 = sqrt(((_1417 * _1417) + (_1416 * _1416)) + (_1418 * _1418)) / (_1370 + 9.9999997473787516355514526367188e-06);
        float _4088 = isnan(0.0) ? _1441 : (isnan(_1441) ? 0.0 : max(_1441, 0.0));
        float _1442 = isnan(1.0) ? _4088 : (isnan(_4088) ? 1.0 : min(_4088, 1.0));
        float _1443 = _1442 * 2.0;
        float _1447 = (1.0 - _1442) / (_1442 + 1.0);
        float _4099 = isnan(0.0) ? _1447 : (isnan(_1447) ? 0.0 : max(_1447, 0.0));
        float _1448 = isnan(1.0) ? _4099 : (isnan(_4099) ? 1.0 : min(_4099, 1.0));
        float _1457 = ((((1.0 - _1448) * (_1443 + 2.0)) * exp2(log2(isnan(1.0) ? _4077 : (isnan(_4077) ? 1.0 : min(_4077, 1.0))) * (_1443 + 1.0))) + _1448) * _1370;
        float _1458 = _1338 * 0.5;
        float _1459 = _1348 * 0.5;
        float _1460 = _1358 * 0.5;
        float _1461 = dot(vec3(_1458, _1459, _1460), vec3(_1458, _1459, _1460));
        float _1466 = (_1461 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1461);
        float _1474 = (dot(vec3(_988, _989, _990), vec3(_1466 * _1458, _1466 * _1459, _1466 * _1460)) + 1.0) * 0.5;
        float _4110 = isnan(0.0) ? _1474 : (isnan(_1474) ? 0.0 : max(_1474, 0.0));
        float _1483 = sqrt(((_1459 * _1459) + (_1458 * _1458)) + (_1460 * _1460)) / (_1371 + 9.9999997473787516355514526367188e-06);
        float _4121 = isnan(0.0) ? _1483 : (isnan(_1483) ? 0.0 : max(_1483, 0.0));
        float _1484 = isnan(1.0) ? _4121 : (isnan(_4121) ? 1.0 : min(_4121, 1.0));
        float _1485 = _1484 * 2.0;
        float _1489 = (1.0 - _1484) / (_1484 + 1.0);
        float _4132 = isnan(0.0) ? _1489 : (isnan(_1489) ? 0.0 : max(_1489, 0.0));
        float _1490 = isnan(1.0) ? _4132 : (isnan(_4132) ? 1.0 : min(_4132, 1.0));
        float _1499 = ((((1.0 - _1490) * (_1485 + 2.0)) * exp2(log2(isnan(1.0) ? _4110 : (isnan(_4110) ? 1.0 : min(_4110, 1.0))) * (_1485 + 1.0))) + _1490) * _1371;
        _1507 = _1338;
        _1509 = _1337;
        _1510 = _1336;
        _1511 = _1348;
        _1512 = _1347;
        _1513 = _1346;
        _1514 = _1358;
        _1515 = _1357;
        _1516 = _1356;
        _1517 = _1371;
        _1518 = _1370;
        _1519 = _1369;
        _1520 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1415 : (isnan(_1415) ? 0.0 : max(_1415, 0.0)));
        _1521 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1457 : (isnan(_1457) ? 0.0 : max(_1457, 0.0)));
        _1522 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1499 : (isnan(_1499) ? 0.0 : max(_1499, 0.0)));
    }
    else
    {
        _1507 = _1508;
        _1509 = _1508;
        _1510 = _1508;
        _1511 = _1508;
        _1512 = _1508;
        _1513 = _1508;
        _1514 = _1508;
        _1515 = _1508;
        _1516 = _1508;
        _1517 = _1508;
        _1518 = _1508;
        _1519 = _1508;
        _1520 = 0.0;
        _1521 = 0.0;
        _1522 = 0.0;
    }
    float _1815;
    float _1816;
    float _1817;
    float _1818;
    float _1819;
    float _1820;
    float _1821;
    float _1822;
    float _1823;
    float _1824;
    float _1825;
    float _1826;
    float _1827;
    float _1828;
    float _1829;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1546 = fma(_1206, cbModelParam._m0[30u].z, fma(_1202, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1198));
        float _1550 = fma(_1206, cbModelParam._m0[31u].z, fma(_1202, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1198));
        float _1554 = fma(_1206, cbModelParam._m0[32u].z, fma(_1202, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1198));
        float _1577 = _1198 + _988;
        float _1578 = _1202 + _989;
        float _1579 = _1206 + _990;
        float _1589 = fma(_1579, cbModelParam._m0[30u].z, fma(_1578, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1577)) - _1546;
        float _1590 = fma(_1579, cbModelParam._m0[31u].z, fma(_1578, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1577)) - _1550;
        float _1591 = fma(_1579, cbModelParam._m0[32u].z, fma(_1578, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1577)) - _1554;
        float _1595 = inversesqrt(dot(vec3(_1589, _1590, _1591), vec3(_1589, _1590, _1591)));
        float _1608 = ((_1595 * _1589) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1546 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1609 = ((_1595 * _1590) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1550 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1610 = ((_1595 * _1591) / cbModelParam._m0[35u].z) + ((((((_1554 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1612 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1608, _1609, _1610), 0.0);
        vec4 _1619 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1608, _1609, _1610), 0.0);
        vec4 _1626 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1608, _1609, _1610), 0.0);
        vec4 _1633 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1608, _1609, _1610), 0.0);
        float _1645 = exp2((_1612.w + (-0.5)) * 20.0) * 2.0;
        float _1646 = _1645 * (_1612.x + (-0.5));
        float _1647 = _1645 * (_1612.y + (-0.5));
        float _1648 = _1645 * (_1612.z + (-0.5));
        float _1655 = exp2((_1619.w + (-0.5)) * 20.0) * 2.0;
        float _1656 = _1655 * (_1619.x + (-0.5));
        float _1657 = _1655 * (_1619.y + (-0.5));
        float _1658 = _1655 * (_1619.z + (-0.5));
        float _1665 = exp2((_1626.w + (-0.5)) * 20.0) * 2.0;
        float _1666 = _1665 * (_1626.x + (-0.5));
        float _1667 = _1665 * (_1626.y + (-0.5));
        float _1668 = _1665 * (_1626.z + (-0.5));
        float _1675 = exp2((_1633.w + (-0.5)) * 20.0) * 2.0;
        float _1676 = _1675 * (_1633.x + (-0.5));
        float _1677 = _1675 * (_1633.y + (-0.5));
        float _1678 = _1675 * (_1633.z + (-0.5));
        float _1679 = isnan(0.0) ? _1676 : (isnan(_1676) ? 0.0 : max(_1676, 0.0));
        float _1680 = isnan(0.0) ? _1677 : (isnan(_1677) ? 0.0 : max(_1677, 0.0));
        float _1681 = isnan(0.0) ? _1678 : (isnan(_1678) ? 0.0 : max(_1678, 0.0));
        float _1682 = _1646 * 0.5;
        float _1683 = _1656 * 0.5;
        float _1684 = _1666 * 0.5;
        float _1685 = dot(vec3(_1682, _1683, _1684), vec3(_1682, _1683, _1684));
        float _1690 = (_1685 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1685);
        float _1698 = (dot(vec3(_988, _989, _990), vec3(_1690 * _1682, _1690 * _1683, _1690 * _1684)) + 1.0) * 0.5;
        float _4173 = isnan(0.0) ? _1698 : (isnan(_1698) ? 0.0 : max(_1698, 0.0));
        float _1707 = sqrt(((_1683 * _1683) + (_1682 * _1682)) + (_1684 * _1684)) / (_1679 + 9.9999997473787516355514526367188e-06);
        float _4184 = isnan(0.0) ? _1707 : (isnan(_1707) ? 0.0 : max(_1707, 0.0));
        float _1708 = isnan(1.0) ? _4184 : (isnan(_4184) ? 1.0 : min(_4184, 1.0));
        float _1709 = _1708 * 2.0;
        float _1713 = (1.0 - _1708) / (_1708 + 1.0);
        float _4195 = isnan(0.0) ? _1713 : (isnan(_1713) ? 0.0 : max(_1713, 0.0));
        float _1714 = isnan(1.0) ? _4195 : (isnan(_4195) ? 1.0 : min(_4195, 1.0));
        float _1723 = ((((1.0 - _1714) * (_1709 + 2.0)) * exp2(log2(isnan(1.0) ? _4173 : (isnan(_4173) ? 1.0 : min(_4173, 1.0))) * (_1709 + 1.0))) + _1714) * _1679;
        float _1724 = _1647 * 0.5;
        float _1725 = _1657 * 0.5;
        float _1726 = _1667 * 0.5;
        float _1727 = dot(vec3(_1724, _1725, _1726), vec3(_1724, _1725, _1726));
        float _1732 = (_1727 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1727);
        float _1740 = (dot(vec3(_988, _989, _990), vec3(_1732 * _1724, _1732 * _1725, _1732 * _1726)) + 1.0) * 0.5;
        float _4206 = isnan(0.0) ? _1740 : (isnan(_1740) ? 0.0 : max(_1740, 0.0));
        float _1749 = sqrt(((_1725 * _1725) + (_1724 * _1724)) + (_1726 * _1726)) / (_1680 + 9.9999997473787516355514526367188e-06);
        float _4217 = isnan(0.0) ? _1749 : (isnan(_1749) ? 0.0 : max(_1749, 0.0));
        float _1750 = isnan(1.0) ? _4217 : (isnan(_4217) ? 1.0 : min(_4217, 1.0));
        float _1751 = _1750 * 2.0;
        float _1755 = (1.0 - _1750) / (_1750 + 1.0);
        float _4228 = isnan(0.0) ? _1755 : (isnan(_1755) ? 0.0 : max(_1755, 0.0));
        float _1756 = isnan(1.0) ? _4228 : (isnan(_4228) ? 1.0 : min(_4228, 1.0));
        float _1765 = ((((1.0 - _1756) * (_1751 + 2.0)) * exp2(log2(isnan(1.0) ? _4206 : (isnan(_4206) ? 1.0 : min(_4206, 1.0))) * (_1751 + 1.0))) + _1756) * _1680;
        float _1766 = _1648 * 0.5;
        float _1767 = _1658 * 0.5;
        float _1768 = _1668 * 0.5;
        float _1769 = dot(vec3(_1766, _1767, _1768), vec3(_1766, _1767, _1768));
        float _1774 = (_1769 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1769);
        float _1782 = (dot(vec3(_988, _989, _990), vec3(_1774 * _1766, _1774 * _1767, _1774 * _1768)) + 1.0) * 0.5;
        float _4239 = isnan(0.0) ? _1782 : (isnan(_1782) ? 0.0 : max(_1782, 0.0));
        float _1791 = sqrt(((_1767 * _1767) + (_1766 * _1766)) + (_1768 * _1768)) / (_1681 + 9.9999997473787516355514526367188e-06);
        float _4250 = isnan(0.0) ? _1791 : (isnan(_1791) ? 0.0 : max(_1791, 0.0));
        float _1792 = isnan(1.0) ? _4250 : (isnan(_4250) ? 1.0 : min(_4250, 1.0));
        float _1793 = _1792 * 2.0;
        float _1797 = (1.0 - _1792) / (_1792 + 1.0);
        float _4261 = isnan(0.0) ? _1797 : (isnan(_1797) ? 0.0 : max(_1797, 0.0));
        float _1798 = isnan(1.0) ? _4261 : (isnan(_4261) ? 1.0 : min(_4261, 1.0));
        float _1807 = ((((1.0 - _1798) * (_1793 + 2.0)) * exp2(log2(isnan(1.0) ? _4239 : (isnan(_4239) ? 1.0 : min(_4239, 1.0))) * (_1793 + 1.0))) + _1798) * _1681;
        _1815 = _1648;
        _1816 = _1647;
        _1817 = _1646;
        _1818 = _1658;
        _1819 = _1657;
        _1820 = _1656;
        _1821 = _1668;
        _1822 = _1667;
        _1823 = _1666;
        _1824 = _1681;
        _1825 = _1680;
        _1826 = _1679;
        _1827 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1723 : (isnan(_1723) ? 0.0 : max(_1723, 0.0)));
        _1828 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1765 : (isnan(_1765) ? 0.0 : max(_1765, 0.0)));
        _1829 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1807 : (isnan(_1807) ? 0.0 : max(_1807, 0.0)));
    }
    else
    {
        _1815 = _1508;
        _1816 = _1508;
        _1817 = _1508;
        _1818 = _1508;
        _1819 = _1508;
        _1820 = _1508;
        _1821 = _1508;
        _1822 = _1508;
        _1823 = _1508;
        _1824 = _1508;
        _1825 = _1508;
        _1826 = _1508;
        _1827 = 0.0;
        _1828 = 0.0;
        _1829 = 0.0;
    }
    float _1839 = (cbModelParam._m0[1u].x * (_1827 - _1520)) + _1520;
    float _1840 = (cbModelParam._m0[1u].x * (_1828 - _1521)) + _1521;
    float _1841 = (cbModelParam._m0[1u].x * (_1829 - _1522)) + _1522;
    float _1862 = fma(_1841, cbSceneParam._m0[89u].z, fma(_1840, cbSceneParam._m0[89u].y, _1839 * cbSceneParam._m0[89u].x));
    float _1865 = fma(_1841, cbSceneParam._m0[90u].z, fma(_1840, cbSceneParam._m0[90u].y, _1839 * cbSceneParam._m0[90u].x));
    float _1868 = fma(_1841, cbSceneParam._m0[91u].z, fma(_1840, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1839));
    float _1883 = _1145 * 0.5;
    float _1884 = _1146 * 0.5;
    float _1885 = _1147 * 0.5;
    float _1886 = dot(vec4(_1883, _1884, _1885, 1.0), vec4(_1817, _1820, _1823, _1826));
    float _1889 = dot(vec4(_1883, _1884, _1885, 1.0), vec4(_1816, _1819, _1822, _1825));
    float _1892 = dot(vec4(_1883, _1884, _1885, 1.0), vec4(_1815, _1818, _1821, _1824));
    float _1926;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1899 = dot(vec4(_1883, _1884, _1885, 1.0), vec4(_1507, _1511, _1514, _1517));
        float _1903 = dot(vec4(_1883, _1884, _1885, 1.0), vec4(_1509, _1512, _1515, _1518));
        float _1907 = dot(vec4(_1883, _1884, _1885, 1.0), vec4(_1510, _1513, _1516, _1519));
        float _1914 = dot(vec4(cbModelParam._m0[39u]), vec4(_1883, _1884, _1885, 1.0));
        _1926 = dot(vec3(isnan(0.0) ? _1907 : (isnan(_1907) ? 0.0 : max(_1907, 0.0)), isnan(0.0) ? _1903 : (isnan(_1903) ? 0.0 : max(_1903, 0.0)), isnan(0.0) ? _1899 : (isnan(_1899) ? 0.0 : max(_1899, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1914) ? 0.0 : (isnan(0.0) ? _1914 : max(0.0, _1914))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1926 = 1.0;
    }
    float _1937;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1928 = dot(vec4(cbModelParam._m0[40u]), vec4(_1883, _1884, _1885, 1.0));
        _1937 = dot(vec3(isnan(0.0) ? _1886 : (isnan(_1886) ? 0.0 : max(_1886, 0.0)), isnan(0.0) ? _1889 : (isnan(_1889) ? 0.0 : max(_1889, 0.0)), isnan(0.0) ? _1892 : (isnan(_1892) ? 0.0 : max(_1892, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1928) ? 0.0 : (isnan(0.0) ? _1928 : max(0.0, _1928))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1937 = 1.0;
    }
    float _1941 = (_1937 * cbModelParam._m0[1u].x) + (_1926 * (1.0 - cbModelParam._m0[1u].x));
    float _1951 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _991);
    float _1952 = isnan(_1951) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1951 : min(cbModelParam._m0[25u].z, _1951));
    float _2032;
    float _2034;
    float _2036;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1999 = fma(_1206, cbModelParam._m0[13u].z, fma(_1202, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1198)) + cbModelParam._m0[13u].w;
        float _2003 = fma(_1206, cbModelParam._m0[14u].z, fma(_1202, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1198)) + cbModelParam._m0[14u].w;
        float _2007 = fma(_1206, cbModelParam._m0[15u].z, fma(_1202, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1198)) + cbModelParam._m0[15u].w;
        float _2010 = fma(_1147, cbModelParam._m0[13u].z, fma(_1146, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1145));
        float _2013 = fma(_1147, cbModelParam._m0[14u].z, fma(_1146, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1145));
        float _2016 = fma(_1147, cbModelParam._m0[15u].z, fma(_1146, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1145));
        float _2044;
        if (_2010 > 0.0)
        {
            _2044 = abs((1.0 - _1999) / _2010);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_2010 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1999 + 1.0) / _2010);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _2044 = frontier_phi_14_12_ladder;
        }
        float _2244;
        if (_2013 > 0.0)
        {
            _2244 = abs((1.0 - _2003) / _2013);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_2013 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_2003 + 1.0) / _2013);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2244 = frontier_phi_23_19_ladder;
        }
        float _2487;
        if (_2016 > 0.0)
        {
            _2487 = abs((1.0 - _2007) / _2016);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_2016 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_2007 + 1.0) / _2016);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2487 = frontier_phi_35_30_ladder;
        }
        float _2489 = isnan(_2244) ? _2044 : (isnan(_2044) ? _2244 : min(_2044, _2244));
        float _2490 = isnan(_2487) ? _2489 : (isnan(_2489) ? _2487 : min(_2489, _2487));
        float _2494 = (_2490 * _2010) + _1999;
        float _2495 = (_2490 * _2013) + _2003;
        float _2496 = (_2490 * _2016) + _2007;
        float _2497 = _2490 * 9.9999997473787516355514526367188e-05;
        float _2499 = (-1.0) - _2497;
        float _2501 = _2497 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2496 > _2501) || ((_2496 < _2499) || ((_2495 > _2501) || ((_2495 < _2499) || ((_2494 < _2499) || (_2494 > _2501))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2620 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2496, cbModelParam._m0[9u].z, fma(_2495, cbModelParam._m0[9u].y, _2494 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2496, cbModelParam._m0[10u].z, fma(_2495, cbModelParam._m0[10u].y, _2494 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2496, cbModelParam._m0[11u].z, fma(_2495, cbModelParam._m0[11u].y, _2494 * cbModelParam._m0[11u].x))), _1952);
            frontier_phi_13_35_ladder = _2620.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2620.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2620.x * cbModelParam._m0[1u].y;
        }
        _2032 = frontier_phi_13_35_ladder_2;
        _2034 = frontier_phi_13_35_ladder_1;
        _2036 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _2020 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1145, _1146, _1147), _1952);
        _2032 = _2020.x * cbModelParam._m0[1u].y;
        _2034 = _2020.y * cbModelParam._m0[1u].y;
        _2036 = _2020.z * cbModelParam._m0[1u].y;
    }
    float _2040 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _991);
    float _2041 = isnan(_2040) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2040 : min(cbModelParam._m0[25u].w, _2040));
    float _2130;
    float _2132;
    float _2134;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2094 = fma(_1206, cbModelParam._m0[21u].z, fma(_1202, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1198)) + cbModelParam._m0[21u].w;
        float _2098 = fma(_1206, cbModelParam._m0[22u].z, fma(_1202, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1198)) + cbModelParam._m0[22u].w;
        float _2102 = fma(_1206, cbModelParam._m0[23u].z, fma(_1202, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1198)) + cbModelParam._m0[23u].w;
        float _2105 = fma(_1147, cbModelParam._m0[21u].z, fma(_1146, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1145));
        float _2108 = fma(_1147, cbModelParam._m0[22u].z, fma(_1146, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1145));
        float _2111 = fma(_1147, cbModelParam._m0[23u].z, fma(_1146, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1145));
        float _2249;
        if (_2105 > 0.0)
        {
            _2249 = abs((1.0 - _2094) / _2105);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_2105 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_2094 + 1.0) / _2105);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2249 = frontier_phi_25_21_ladder;
        }
        float _2514;
        if (_2108 > 0.0)
        {
            _2514 = abs((1.0 - _2098) / _2108);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_2108 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_2098 + 1.0) / _2108);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2514 = frontier_phi_37_32_ladder;
        }
        float _2719;
        if (_2111 > 0.0)
        {
            _2719 = abs((1.0 - _2102) / _2111);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_2111 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_2102 + 1.0) / _2111);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2719 = frontier_phi_46_43_ladder;
        }
        float _2721 = isnan(_2514) ? _2249 : (isnan(_2249) ? _2514 : min(_2249, _2514));
        float _2722 = isnan(_2719) ? _2721 : (isnan(_2721) ? _2719 : min(_2721, _2719));
        float _2726 = (_2722 * _2105) + _2094;
        float _2727 = (_2722 * _2108) + _2098;
        float _2728 = (_2722 * _2111) + _2102;
        float _2729 = _2722 * 9.9999997473787516355514526367188e-05;
        float _2730 = (-1.0) - _2729;
        float _2732 = _2729 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2728 > _2732) || ((_2728 < _2730) || ((_2727 > _2732) || ((_2727 < _2730) || ((_2726 < _2730) || (_2726 > _2732))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2927 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2728, cbModelParam._m0[17u].z, fma(_2727, cbModelParam._m0[17u].y, _2726 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2728, cbModelParam._m0[18u].z, fma(_2727, cbModelParam._m0[18u].y, _2726 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2728, cbModelParam._m0[19u].z, fma(_2727, cbModelParam._m0[19u].y, _2726 * cbModelParam._m0[19u].x))), _2041);
            frontier_phi_22_46_ladder = _2927.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2927.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2927.x * cbModelParam._m0[1u].z;
        }
        _2130 = frontier_phi_22_46_ladder_2;
        _2132 = frontier_phi_22_46_ladder_1;
        _2134 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _2114 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1145, _1146, _1147), _2041);
        _2130 = _2114.x * cbModelParam._m0[1u].z;
        _2132 = _2114.y * cbModelParam._m0[1u].z;
        _2134 = _2114.z * cbModelParam._m0[1u].z;
    }
    float _2146 = ((((1.0 - _1166) * ((_1153 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_1166 * _1153)) * _1137;
    float _2147 = _2146 * ((cbModelParam._m0[1u].w * (_2130 - _2032)) + _2032);
    float _2148 = _2146 * ((cbModelParam._m0[1u].w * (_2132 - _2034)) + _2034);
    float _2149 = _2146 * ((cbModelParam._m0[1u].w * (_2134 - _2036)) + _2036);
    float _2152 = fma(_2149, cbSceneParam._m0[89u].z, fma(_2148, cbSceneParam._m0[89u].y, _2147 * cbSceneParam._m0[89u].x));
    float _2155 = fma(_2149, cbSceneParam._m0[90u].z, fma(_2148, cbSceneParam._m0[90u].y, _2147 * cbSceneParam._m0[90u].x));
    float _2158 = fma(_2149, cbSceneParam._m0[91u].z, fma(_2148, cbSceneParam._m0[91u].y, _2147 * cbSceneParam._m0[91u].x));
    uvec4 _2168 = floatBitsToUint(cbInstanceData._m0[_283 + 5u]);
    uint _2170 = _2168.x * 14u;
    uint _2171 = _2170 + 13u;
    float _2178 = _1137 + (-1.0);
    float _2183 = (cbLight._m0[_2171].x * _2178) + 1.0;
    float _2184 = (cbLight._m0[_2171].y * _2178) + 1.0;
    float _2185 = (cbLight._m0[_2171].z * _2178) + 1.0;
    float _2186 = (cbLight._m0[_2171].w * _2178) + 1.0;
    uint _2187 = _2170 + 5u;
    float _2193 = isnan(1.0) ? _2184 : (isnan(_2184) ? 1.0 : min(_2184, 1.0));
    uint _2197 = _2170 + 4u;
    float _2203 = isnan(1.0) ? _2183 : (isnan(_2183) ? 1.0 : min(_2183, 1.0));
    uint _2207 = _2170 | 1u;
    float _2218 = dot(vec3(cbLight._m0[_2170].xyz), vec3(_988, _989, _990));
    float _2221 = dot(vec3(cbLight._m0[_2207].xyz), vec3(_988, _989, _990));
    float _4397 = isnan(0.0) ? _2218 : (isnan(_2218) ? 0.0 : max(_2218, 0.0));
    float _4408 = isnan(0.0) ? _2221 : (isnan(_2221) ? 0.0 : max(_2221, 0.0));
    float _2226 = (isnan(1.0) ? _4397 : (isnan(_4397) ? 1.0 : min(_4397, 1.0))) * 0.3183098733425140380859375;
    float _2228 = (isnan(1.0) ? _4408 : (isnan(_4408) ? 1.0 : min(_4408, 1.0))) * 0.3183098733425140380859375;
    float _2235 = ((cbLight._m0[_2187].x * _2193) * _2228) + ((cbLight._m0[_2197].x * _2203) * _2226);
    float _2236 = ((_2193 * cbLight._m0[_2187].y) * _2228) + ((_2203 * cbLight._m0[_2197].y) * _2226);
    float _2237 = ((_2193 * cbLight._m0[_2187].z) * _2228) + ((_2203 * cbLight._m0[_2197].z) * _2226);
    uvec4 _2241 = floatBitsToUint(cbLight._m0[_2170 + 12u]);
    bool _2243 = _2241.x == 0u;
    float _2254;
    float _2256;
    float _2258;
    if (_2243)
    {
        _2254 = _2235;
        _2256 = _2236;
        _2258 = _2237;
    }
    else
    {
        uint _2262 = _2170 + 6u;
        float _2278 = (dot(vec3(cbLight._m0[_2170 + 2u].xyz), vec3(_988, _989, _990)) * 0.5) + 0.5;
        float _2279 = _2278 * _2278;
        float _4419 = isnan(0.0) ? _2279 : (isnan(_2279) ? 0.0 : max(_2279, 0.0));
        float _2280 = isnan(1.0) ? _4419 : (isnan(_4419) ? 1.0 : min(_4419, 1.0));
        float _2281 = isnan(1.0) ? _2185 : (isnan(_2185) ? 1.0 : min(_2185, 1.0));
        _2254 = (((cbLight._m0[_2262].x * 0.3183098733425140380859375) * _2280) * _2281) + _2235;
        _2256 = (((cbLight._m0[_2262].y * 0.3183098733425140380859375) * _2280) * _2281) + _2236;
        _2258 = (((cbLight._m0[_2262].z * 0.3183098733425140380859375) * _2280) * _2281) + _2237;
    }
    bool _2261 = _2241.y == 0u;
    float _2299;
    float _2301;
    float _2303;
    if (_2261)
    {
        _2299 = _2254;
        _2301 = _2256;
        _2303 = _2258;
    }
    else
    {
        uint _2458 = _2170 + 7u;
        float _2474 = (dot(vec3(cbLight._m0[_2170 + 3u].xyz), vec3(_988, _989, _990)) * 0.5) + 0.5;
        float _2475 = _2474 * _2474;
        float _4435 = isnan(0.0) ? _2475 : (isnan(_2475) ? 0.0 : max(_2475, 0.0));
        float _2476 = isnan(1.0) ? _4435 : (isnan(_4435) ? 1.0 : min(_4435, 1.0));
        float _2477 = isnan(1.0) ? _2186 : (isnan(_2186) ? 1.0 : min(_2186, 1.0));
        _2299 = (((cbLight._m0[_2458].x * 0.3183098733425140380859375) * _2476) * _2477) + _2254;
        _2301 = (((cbLight._m0[_2458].y * 0.3183098733425140380859375) * _2476) * _2477) + _2256;
        _2303 = (((cbLight._m0[_2458].z * 0.3183098733425140380859375) * _2476) * _2477) + _2258;
    }
    uint _2306 = _2170 + 8u;
    float _2319 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2170].w)) * _991) * 0.949999988079071044921875);
    float _2320 = _2319 * _2319;
    float _2321 = cbLight._m0[_2170].x + _1066;
    float _2322 = cbLight._m0[_2170].y + _1067;
    float _2323 = cbLight._m0[_2170].z + _1068;
    float _2327 = inversesqrt(dot(vec3(_2321, _2322, _2323), vec3(_2321, _2322, _2323)));
    float _2328 = _2327 * _2321;
    float _2329 = _2327 * _2322;
    float _2330 = _2327 * _2323;
    float _2331 = dot(vec3(_988, _989, _990), vec3(cbLight._m0[_2170].xyz));
    float _4451 = isnan(0.0) ? _2331 : (isnan(_2331) ? 0.0 : max(_2331, 0.0));
    float _2334 = isnan(1.0) ? _4451 : (isnan(_4451) ? 1.0 : min(_4451, 1.0));
    float _4462 = isnan(0.0) ? _1138 : (isnan(_1138) ? 0.0 : max(_1138, 0.0));
    float _2335 = isnan(1.0) ? _4462 : (isnan(_4462) ? 1.0 : min(_4462, 1.0));
    float _2336 = dot(vec3(_988, _989, _990), vec3(_2328, _2329, _2330));
    float _4473 = isnan(0.0) ? _2336 : (isnan(_2336) ? 0.0 : max(_2336, 0.0));
    float _2339 = isnan(1.0) ? _4473 : (isnan(_4473) ? 1.0 : min(_4473, 1.0));
    float _2340 = dot(vec3(cbLight._m0[_2170].xyz), vec3(_2328, _2329, _2330));
    float _4484 = isnan(0.0) ? _2340 : (isnan(_2340) ? 0.0 : max(_2340, 0.0));
    float _2344 = _2320 * _2320;
    float _2348 = ((_2339 * _2339) * (_2344 + (-1.0))) + 1.0;
    float _2359 = (exp2(log2(1.0 - (isnan(1.0) ? _4484 : (isnan(_4484) ? 1.0 : min(_4484, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2360 = 1.0 - _2320;
    float _2371 = (0.5 / (((_2335 * ((_2334 * _2360) + _2320)) + 9.9999999392252902907785028219223e-09) + (((_2335 * _2360) + _2320) * _2334))) * _2334;
    float _4495 = isnan(0.0) ? _2371 : (isnan(_2371) ? 0.0 : max(_2371, 0.0));
    float _2373 = (isnan(1.0) ? _4495 : (isnan(_4495) ? 1.0 : min(_4495, 1.0))) * (_2344 / ((_2348 * _2348) * 3.141590118408203125));
    uint _2384 = _2170 + 9u;
    float _2395 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2207].w)) * _991) * 0.949999988079071044921875);
    float _2396 = _2395 * _2395;
    float _2397 = cbLight._m0[_2207].x + _1066;
    float _2398 = cbLight._m0[_2207].y + _1067;
    float _2399 = cbLight._m0[_2207].z + _1068;
    float _2403 = inversesqrt(dot(vec3(_2397, _2398, _2399), vec3(_2397, _2398, _2399)));
    float _2404 = _2403 * _2397;
    float _2405 = _2403 * _2398;
    float _2406 = _2403 * _2399;
    float _2407 = dot(vec3(_988, _989, _990), vec3(cbLight._m0[_2207].xyz));
    float _4506 = isnan(0.0) ? _2407 : (isnan(_2407) ? 0.0 : max(_2407, 0.0));
    float _2410 = isnan(1.0) ? _4506 : (isnan(_4506) ? 1.0 : min(_4506, 1.0));
    float _2411 = dot(vec3(_988, _989, _990), vec3(_2404, _2405, _2406));
    float _4517 = isnan(0.0) ? _2411 : (isnan(_2411) ? 0.0 : max(_2411, 0.0));
    float _2414 = isnan(1.0) ? _4517 : (isnan(_4517) ? 1.0 : min(_4517, 1.0));
    float _2415 = dot(vec3(cbLight._m0[_2207].xyz), vec3(_2404, _2405, _2406));
    float _4528 = isnan(0.0) ? _2415 : (isnan(_2415) ? 0.0 : max(_2415, 0.0));
    float _2419 = _2396 * _2396;
    float _2423 = ((_2414 * _2414) * (_2419 + (-1.0))) + 1.0;
    float _2432 = (exp2(log2(1.0 - (isnan(1.0) ? _4528 : (isnan(_4528) ? 1.0 : min(_4528, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2433 = 1.0 - _2396;
    float _2443 = (0.5 / (((_2335 * ((_2410 * _2433) + _2396)) + 9.9999999392252902907785028219223e-09) + (((_2335 * _2433) + _2396) * _2410))) * _2410;
    float _4539 = isnan(0.0) ? _2443 : (isnan(_2443) ? 0.0 : max(_2443, 0.0));
    float _2445 = (isnan(1.0) ? _4539 : (isnan(_4539) ? 1.0 : min(_4539, 1.0))) * (_2419 / ((_2423 * _2423) * 3.141590118408203125));
    float _2455 = (((_2432 * cbLight._m0[_2384].x) * _2445) * _2193) + (((_2359 * cbLight._m0[_2306].x) * _2373) * _2203);
    float _2456 = (((_2432 * cbLight._m0[_2384].y) * _2445) * _2193) + (((_2359 * cbLight._m0[_2306].y) * _2373) * _2203);
    float _2457 = (((_2432 * cbLight._m0[_2384].z) * _2445) * _2193) + (((_2359 * cbLight._m0[_2306].z) * _2373) * _2203);
    float _2519;
    float _2521;
    float _2523;
    if (_2243)
    {
        _2519 = _2455;
        _2521 = _2456;
        _2523 = _2457;
    }
    else
    {
        uint _2525 = _2170 + 2u;
        uint _2529 = _2170 + 10u;
        float _2543 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2525].w)) * _991) * 0.949999988079071044921875);
        float _2544 = _2543 * _2543;
        float _2545 = cbLight._m0[_2525].x + _1066;
        float _2546 = cbLight._m0[_2525].y + _1067;
        float _2547 = cbLight._m0[_2525].z + _1068;
        float _2551 = inversesqrt(dot(vec3(_2545, _2546, _2547), vec3(_2545, _2546, _2547)));
        float _2552 = _2551 * _2545;
        float _2553 = _2551 * _2546;
        float _2554 = _2551 * _2547;
        float _2555 = dot(vec3(_988, _989, _990), vec3(cbLight._m0[_2525].xyz));
        float _4550 = isnan(0.0) ? _2555 : (isnan(_2555) ? 0.0 : max(_2555, 0.0));
        float _2558 = isnan(1.0) ? _4550 : (isnan(_4550) ? 1.0 : min(_4550, 1.0));
        float _2559 = dot(vec3(_988, _989, _990), vec3(_2552, _2553, _2554));
        float _4561 = isnan(0.0) ? _2559 : (isnan(_2559) ? 0.0 : max(_2559, 0.0));
        float _2562 = isnan(1.0) ? _4561 : (isnan(_4561) ? 1.0 : min(_4561, 1.0));
        float _2563 = dot(vec3(cbLight._m0[_2525].xyz), vec3(_2552, _2553, _2554));
        float _4572 = isnan(0.0) ? _2563 : (isnan(_2563) ? 0.0 : max(_2563, 0.0));
        float _2567 = _2544 * _2544;
        float _2571 = ((_2562 * _2562) * (_2567 + (-1.0))) + 1.0;
        float _2580 = (exp2(log2(1.0 - (isnan(1.0) ? _4572 : (isnan(_4572) ? 1.0 : min(_4572, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2581 = 1.0 - _2544;
        float _2591 = (0.5 / (((_2335 * ((_2558 * _2581) + _2544)) + 9.9999999392252902907785028219223e-09) + (((_2335 * _2581) + _2544) * _2558))) * _2558;
        float _4583 = isnan(0.0) ? _2591 : (isnan(_2591) ? 0.0 : max(_2591, 0.0));
        float _2593 = (isnan(1.0) ? _4583 : (isnan(_4583) ? 1.0 : min(_4583, 1.0))) * (_2567 / ((_2571 * _2571) * 3.141590118408203125));
        float _2594 = isnan(1.0) ? _2185 : (isnan(_2185) ? 1.0 : min(_2185, 1.0));
        _2519 = (((_2580 * cbLight._m0[_2529].x) * _2593) * _2594) + _2455;
        _2521 = (((_2580 * cbLight._m0[_2529].y) * _2593) * _2594) + _2456;
        _2523 = (((_2580 * cbLight._m0[_2529].z) * _2593) * _2594) + _2457;
    }
    float _2629;
    float _2631;
    float _2633;
    if (_2261)
    {
        _2629 = _2519;
        _2631 = _2521;
        _2633 = _2523;
    }
    else
    {
        uint _2640 = _2170 + 3u;
        uint _2644 = _2170 + 11u;
        float _2658 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2640].w)) * _991) * 0.949999988079071044921875);
        float _2659 = _2658 * _2658;
        float _2660 = cbLight._m0[_2640].x + _1066;
        float _2661 = cbLight._m0[_2640].y + _1067;
        float _2662 = cbLight._m0[_2640].z + _1068;
        float _2666 = inversesqrt(dot(vec3(_2660, _2661, _2662), vec3(_2660, _2661, _2662)));
        float _2667 = _2666 * _2660;
        float _2668 = _2666 * _2661;
        float _2669 = _2666 * _2662;
        float _2670 = dot(vec3(_988, _989, _990), vec3(cbLight._m0[_2640].xyz));
        float _4599 = isnan(0.0) ? _2670 : (isnan(_2670) ? 0.0 : max(_2670, 0.0));
        float _2673 = isnan(1.0) ? _4599 : (isnan(_4599) ? 1.0 : min(_4599, 1.0));
        float _2674 = dot(vec3(_988, _989, _990), vec3(_2667, _2668, _2669));
        float _4610 = isnan(0.0) ? _2674 : (isnan(_2674) ? 0.0 : max(_2674, 0.0));
        float _2677 = isnan(1.0) ? _4610 : (isnan(_4610) ? 1.0 : min(_4610, 1.0));
        float _2678 = dot(vec3(cbLight._m0[_2640].xyz), vec3(_2667, _2668, _2669));
        float _4621 = isnan(0.0) ? _2678 : (isnan(_2678) ? 0.0 : max(_2678, 0.0));
        float _2682 = _2659 * _2659;
        float _2686 = ((_2677 * _2677) * (_2682 + (-1.0))) + 1.0;
        float _2695 = (exp2(log2(1.0 - (isnan(1.0) ? _4621 : (isnan(_4621) ? 1.0 : min(_4621, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2696 = 1.0 - _2659;
        float _2706 = (0.5 / (((_2335 * ((_2673 * _2696) + _2659)) + 9.9999999392252902907785028219223e-09) + (((_2335 * _2696) + _2659) * _2673))) * _2673;
        float _4632 = isnan(0.0) ? _2706 : (isnan(_2706) ? 0.0 : max(_2706, 0.0));
        float _2708 = (isnan(1.0) ? _4632 : (isnan(_4632) ? 1.0 : min(_4632, 1.0))) * (_2682 / ((_2686 * _2686) * 3.141590118408203125));
        float _2709 = isnan(1.0) ? _2186 : (isnan(_2186) ? 1.0 : min(_2186, 1.0));
        _2629 = (((_2695 * cbLight._m0[_2644].x) * _2708) * _2709) + _2519;
        _2631 = (((_2695 * cbLight._m0[_2644].y) * _2708) * _2709) + _2521;
        _2633 = (((_2695 * cbLight._m0[_2644].z) * _2708) * _2709) + _2523;
    }
    float _2844;
    float _2846;
    float _2848;
    float _2850;
    float _2852;
    float _2854;
    if (_2168.y == 0u)
    {
        float _2784 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2785 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2784;
        float _2786 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2784;
        float _2787 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2784;
        uvec4 _2799 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2800 = _2799.x;
        uint _2811 = uint((float(_2799.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1075) / _2800))) + floor(float(uint(cbSceneParam._m0[85u].x * _1074) / _2800)));
        float _2821 = (log2(_2787 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2822 = isnan(0.0) ? _2821 : (isnan(_2821) ? 0.0 : max(_2821, 0.0));
        uint _2825 = uint(isnan(14.0) ? _2822 : (isnan(_2822) ? 14.0 : min(_2822, 14.0)));
        uvec4 _2830 = texelFetch(g_lightClusterGridBuffer, int(((_2825 << 2u) + (_2811 << 6u)) >> 2u));
        uint _2831 = _2830.x;
        uint _2832 = _2799.z;
        float _2932;
        float _2934;
        float _2936;
        float _2938;
        float _2940;
        float _2942;
        if (((((1u << ((_2832 >> 4u) & 15u)) + 4294967295u) & _2831) == 0u) || ((_2832 & 240u) == 0u))
        {
            _2932 = 0.0;
            _2934 = 0.0;
            _2936 = 0.0;
            _2938 = 0.0;
            _2940 = 0.0;
            _2942 = 0.0;
        }
        else
        {
            float _2933;
            float _2935;
            float _2937;
            float _2939;
            float _2941;
            float _2943;
            float _3076 = 0.0;
            float _3077 = 0.0;
            float _3078 = 0.0;
            float _3079 = 0.0;
            float _3080 = 0.0;
            float _3081 = 0.0;
            uint _3082 = 0u;
            uint _3091;
            bool _3092;
            for (;;)
            {
                _3091 = texelFetch(g_lightClassification, int((((_2825 << 5u) + (_2811 << 9u)) + (_3082 << 2u)) >> 2u)).x;
                _3092 = _3091 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_3092)
                {
                    frontier_phi_61_pred = _3076;
                    frontier_phi_61_pred_1 = _3081;
                    frontier_phi_61_pred_2 = _3080;
                    frontier_phi_61_pred_3 = _3079;
                    frontier_phi_61_pred_4 = _3078;
                    frontier_phi_61_pred_5 = _3077;
                }
                else
                {
                    float _3200;
                    float _3201;
                    float _3202;
                    float _3203;
                    float _3204;
                    float _3205;
                    uint _3206;
                    _3200 = _3076;
                    _3201 = _3077;
                    _3202 = _3078;
                    _3203 = _3079;
                    _3204 = _3080;
                    _3205 = _3081;
                    _3206 = _3091;
                    float _3132;
                    float _3133;
                    float _3134;
                    float _3135;
                    float _3136;
                    float _3137;
                    for (;;)
                    {
                        uint _3210 = uint(findLSB(_3206)) + (_3082 << 5u);
                        uint _3207 = (_3206 + 4294967295u) & _3206;
                        uint _3212 = _3210 * 48u;
                        vec4 _3226 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3212)).x, texelFetch(g_PointLightRenderingBuffer, int(_3212 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3212 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3212 + 3u)).x));
                        uint _3232 = (_3210 * 48u) + 4u;
                        vec4 _3245 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3232)).x, texelFetch(g_PointLightRenderingBuffer, int(_3232 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3232 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3232 + 3u)).x));
                        uint _3251 = (_3210 * 48u) + 8u;
                        vec3 _3262 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3251)).x, texelFetch(g_PointLightRenderingBuffer, int(_3251 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3251 + 2u)).x));
                        float _3266 = _3226.x - _2785;
                        float _3267 = _3226.y - _2786;
                        float _3268 = _3226.z - _2787;
                        float _3269 = dot(vec3(_3266, _3267, _3268), vec3(_3266, _3267, _3268));
                        float _3272 = inversesqrt(_3269);
                        float _3273 = _3272 * _3266;
                        float _3274 = _3272 * _3267;
                        float _3275 = _3272 * _3268;
                        float _3276 = dot(vec3(_1093, _1096, _1099), vec3(_3273, _3274, _3275));
                        float _3281 = 1.0 - (_3269 * _3226.w);
                        float _4658 = isnan(0.0) ? _3281 : (isnan(_3281) ? 0.0 : max(_3281, 0.0));
                        float _3282 = isnan(1.0) ? _4658 : (isnan(_4658) ? 1.0 : min(_4658, 1.0));
                        float _3283 = sqrt(_3269) * _3245.w;
                        float _3286 = 1.39999997615814208984375 / (_3283 + 1.39999997615814208984375);
                        float _3287 = _3286 * _3286;
                        float _3290 = ((1.0 - _3287) * _3276) + _3287;
                        float _3293 = _3283 * _3283;
                        float _3297 = ((isnan(0.0) ? _3290 : (isnan(_3290) ? 0.0 : max(_3290, 0.0))) * _3282) / ((_3293 * 0.699999988079071044921875) + 1.0);
                        float _3301 = (-0.0) - _2785;
                        float _3302 = (-0.0) - _2786;
                        float _3303 = (-0.0) - _2787;
                        float _3307 = inversesqrt(dot(vec3(_3301, _3302, _3303), vec3(_3301, _3302, _3303)));
                        float _3308 = _3307 * _3301;
                        float _3309 = _3307 * _3302;
                        float _3310 = _3307 * _3303;
                        float _3318 = exp2(log2(1.0 / ((_3293 * 3.5) + 5.0)) * 0.25);
                        float _3319 = 1.0 - _1153;
                        float _3326 = sqrt(1.0 - ((1.0 - (_3319 * _3319)) * (1.0 - (_3318 * _3318))));
                        float _3327 = _3326 * _3326;
                        float _3328 = _3327 * _3327;
                        float _3329 = _3308 + _3273;
                        float _3330 = _3309 + _3274;
                        float _3331 = _3310 + _3275;
                        float _3335 = inversesqrt(dot(vec3(_3329, _3330, _3331), vec3(_3329, _3330, _3331)));
                        float _3339 = dot(vec3(_1093, _1096, _1099), vec3(_3308, _3309, _3310));
                        float _4674 = isnan(0.0) ? _3339 : (isnan(_3339) ? 0.0 : max(_3339, 0.0));
                        float _3342 = isnan(1.0) ? _4674 : (isnan(_4674) ? 1.0 : min(_4674, 1.0));
                        float _3343 = dot(vec3(_1093, _1096, _1099), vec3(_3335 * _3329, _3335 * _3330, _3335 * _3331));
                        float _4685 = isnan(0.0) ? _3343 : (isnan(_3343) ? 0.0 : max(_3343, 0.0));
                        float _3346 = isnan(1.0) ? _4685 : (isnan(_4685) ? 1.0 : min(_4685, 1.0));
                        float _3350 = ((_3346 * _3346) * (_3328 + (-1.0))) + 1.0;
                        float _3351 = _3286 * _3327;
                        float _3352 = _3351 * _3351;
                        float _3355 = ((1.0 - _3352) * _3276) + _3352;
                        float _4696 = isnan(0.0) ? _3355 : (isnan(_3355) ? 0.0 : max(_3355, 0.0));
                        float _3356 = isnan(1.0) ? _4696 : (isnan(_4696) ? 1.0 : min(_4696, 1.0));
                        float _3357 = 1.0 - _3327;
                        float _3367 = (0.5 / (((_3356 * ((_3342 * _3357) + _3327)) + 9.9999999392252902907785028219223e-09) + (((_3356 * _3357) + _3327) * _3342))) * _3356;
                        float _4707 = isnan(0.0) ? _3367 : (isnan(_3367) ? 0.0 : max(_3367, 0.0));
                        float _3378 = (((_3328 * 3.1415927410125732421875) * (isnan(1.0) ? _4707 : (isnan(_4707) ? 1.0 : min(_4707, 1.0)))) / ((_3350 * _3350) * ((_3293 * 2.1991131305694580078125) + 3.141590118408203125))) * _3282;
                        _3135 = (_3297 * _3245.x) + _3203;
                        _3136 = (_3297 * _3245.y) + _3204;
                        _3137 = (_3297 * _3245.z) + _3205;
                        _3132 = (_3378 * _3262.x) + _3200;
                        _3133 = (_3378 * _3262.y) + _3201;
                        _3134 = (_3378 * _3262.z) + _3202;
                        if (_3207 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3200 = _3132;
                            _3201 = _3133;
                            _3202 = _3134;
                            _3203 = _3135;
                            _3204 = _3136;
                            _3205 = _3137;
                            _3206 = _3207;
                        }
                    }
                    frontier_phi_61_pred = _3132;
                    frontier_phi_61_pred_1 = _3137;
                    frontier_phi_61_pred_2 = _3136;
                    frontier_phi_61_pred_3 = _3135;
                    frontier_phi_61_pred_4 = _3134;
                    frontier_phi_61_pred_5 = _3133;
                }
                _2933 = frontier_phi_61_pred;
                _2943 = frontier_phi_61_pred_1;
                _2941 = frontier_phi_61_pred_2;
                _2939 = frontier_phi_61_pred_3;
                _2937 = frontier_phi_61_pred_4;
                _2935 = frontier_phi_61_pred_5;
                uint _3083 = _3082 + 1u;
                if (_3083 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3076 = _2933;
                    _3077 = _2935;
                    _3078 = _2937;
                    _3079 = _2939;
                    _3080 = _2941;
                    _3081 = _2943;
                    _3082 = _3083;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2932 = _2933;
            _2934 = _2935;
            _2936 = _2937;
            _2938 = _2939;
            _2940 = _2941;
            _2942 = _2943;
        }
        uvec4 _2946 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2947 = _2946.z;
        uint _2949 = (_2947 >> 8u) & 15u;
        float _3044;
        float _3046;
        float _3048;
        float _3050;
        float _3052;
        float _3054;
        if (((4294967295u << _2949) & _2831) == 0u)
        {
            _3044 = _2932;
            _3046 = _2934;
            _3048 = _2936;
            _3050 = _2938;
            _3052 = _2940;
            _3054 = _2942;
        }
        else
        {
            float _3069 = inversesqrt(dot(vec3(_2785, _2786, _2787), vec3(_2785, _2786, _2787)));
            float _3070 = _3069 * _2785;
            float _3071 = _3069 * _2786;
            float _3072 = _3069 * _2787;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2949 < ((_2947 >> 12u) & 15u))
            {
                float _3045;
                float _3047;
                float _3049;
                float _3051;
                float _3053;
                float _3055;
                float _3183 = _2932;
                float _3184 = _2934;
                float _3185 = _2936;
                float _3186 = _2938;
                float _3187 = _2940;
                float _3188 = _2942;
                uint _3189 = _2949;
                uint _3198;
                bool _3199;
                for (;;)
                {
                    _3198 = texelFetch(g_lightClassification, int((((_2825 << 5u) + (_2811 << 9u)) + (_3189 << 2u)) >> 2u)).x;
                    _3199 = _3198 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_3199)
                    {
                        frontier_phi_67_pred = _3186;
                        frontier_phi_67_pred_1 = _3187;
                        frontier_phi_67_pred_2 = _3188;
                        frontier_phi_67_pred_3 = _3185;
                        frontier_phi_67_pred_4 = _3184;
                        frontier_phi_67_pred_5 = _3183;
                    }
                    else
                    {
                        float _3383;
                        float _3384;
                        float _3385;
                        float _3386;
                        float _3387;
                        float _3388;
                        float _3676;
                        float _3677;
                        float _3678;
                        float _3679;
                        float _3680;
                        float _3681;
                        float _3396 = _3183;
                        float _3397 = _3184;
                        float _3398 = _3185;
                        float _3399 = _3186;
                        float _3400 = _3187;
                        float _3401 = _3188;
                        uint _3402 = _3198;
                        uint _3403;
                        vec4 _3428;
                        float _3429;
                        vec4 _3444;
                        vec3 _3456;
                        vec4 _3471;
                        vec4 _3486;
                        float _3532;
                        bool _3533;
                        for (;;)
                        {
                            uint _3413 = ((_3189 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3402));
                            _3403 = (_3402 + 4294967295u) & _3402;
                            uint _3415 = _3413 * 40u;
                            _3428 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3415)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3415 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3415 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3415 + 3u)).x));
                            _3429 = _3428.w;
                            uint _3431 = (_3413 * 40u) + 4u;
                            _3444 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3431)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3431 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3431 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3431 + 3u)).x));
                            uint _3446 = (_3413 * 40u) + 8u;
                            _3456 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3446)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3446 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3446 + 2u)).x));
                            uint _3458 = (_3413 * 40u) + 16u;
                            _3471 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3458)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3458 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3458 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3458 + 3u)).x));
                            uint _3473 = (_3413 * 40u) + 20u;
                            _3486 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3473)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3473 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3473 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3473 + 3u)).x));
                            uint _3488 = (_3413 * 40u) + 24u;
                            vec4 _3501 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3488)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3488 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3488 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3488 + 3u)).x));
                            uint _3507 = (_3413 * 40u) + 28u;
                            vec4 _3520 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3507)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3507 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3507 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3507 + 3u)).x));
                            _3532 = fma(_2787, _3520.z, fma(_2786, _3520.y, _3520.x * _2785)) + _3520.w;
                            _3533 = !((fma(_2787, _3501.z, fma(_2786, _3501.y, _3501.x * _2785)) + _3501.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3533)
                            {
                                float _3560 = _3428.x - _2785;
                                float _3561 = _3428.y - _2786;
                                float _3562 = _3428.z - _2787;
                                float _3563 = dot(vec3(_3560, _3561, _3562), vec3(_3560, _3561, _3562));
                                float _3566 = inversesqrt(_3563);
                                float _3567 = _3566 * _3560;
                                float _3568 = _3566 * _3561;
                                float _3569 = _3566 * _3562;
                                float _3573 = 1.0 - (_3563 / (_3429 * _3429));
                                float _4718 = isnan(0.0) ? _3573 : (isnan(_3573) ? 0.0 : max(_3573, 0.0));
                                float _3574 = isnan(1.0) ? _4718 : (isnan(_4718) ? 1.0 : min(_4718, 1.0));
                                float _3578 = sqrt(_3563) * _3444.w;
                                float _3580 = 1.39999997615814208984375 / (_3578 + 1.39999997615814208984375);
                                float _3581 = _3580 * _3580;
                                float _3584 = ((1.0 - _3581) * dot(vec3(_3567, _3568, _3569), vec3(_1093, _1096, _1099))) + _3581;
                                float _3587 = _3578 * _3578;
                                float _3591 = (fma(_2787, _3471.z, fma(_2786, _3471.y, _3471.x * _2785)) + _3471.w) / _3532;
                                float _3592 = (fma(_2787, _3486.z, fma(_2786, _3486.y, _3486.x * _2785)) + _3486.w) / _3532;
                                float _3596 = 1.0 - dot(vec2(_3591, _3592), vec2(_3591, _3592));
                                float _4734 = isnan(0.0) ? _3596 : (isnan(_3596) ? 0.0 : max(_3596, 0.0));
                                float _3597 = isnan(1.0) ? _4734 : (isnan(_4734) ? 1.0 : min(_4734, 1.0));
                                float _3598 = _3597 * (((isnan(0.0) ? _3584 : (isnan(_3584) ? 0.0 : max(_3584, 0.0))) * _3574) / ((_3587 * 0.699999988079071044921875) + 1.0));
                                float _3610 = exp2(log2(1.0 / ((_3587 * 3.5) + 5.0)) * 0.25);
                                float _3611 = 1.0 - _1153;
                                float _3618 = sqrt(1.0 - ((1.0 - (_3611 * _3611)) * (1.0 - (_3610 * _3610))));
                                float _3619 = _3618 * _3618;
                                float _3620 = _3619 * _3619;
                                float _3621 = _3567 - _3070;
                                float _3622 = _3568 - _3071;
                                float _3623 = _3569 - _3072;
                                float _3627 = inversesqrt(dot(vec3(_3621, _3622, _3623), vec3(_3621, _3622, _3623)));
                                float _3631 = dot(vec3(_1093, _1096, _1099), vec3((-0.0) - _3070, (-0.0) - _3071, (-0.0) - _3072));
                                float _4745 = isnan(0.0) ? _3631 : (isnan(_3631) ? 0.0 : max(_3631, 0.0));
                                float _3634 = isnan(1.0) ? _4745 : (isnan(_4745) ? 1.0 : min(_4745, 1.0));
                                float _3635 = dot(vec3(_1093, _1096, _1099), vec3(_3627 * _3621, _3627 * _3622, _3627 * _3623));
                                float _4756 = isnan(0.0) ? _3635 : (isnan(_3635) ? 0.0 : max(_3635, 0.0));
                                float _3638 = isnan(1.0) ? _4756 : (isnan(_4756) ? 1.0 : min(_4756, 1.0));
                                float _3642 = ((_3638 * _3638) * (_3620 + (-1.0))) + 1.0;
                                float _3643 = _3580 * _3619;
                                float _3644 = _3643 * _3643;
                                float _3650 = ((1.0 - _3644) * dot(vec3(_1093, _1096, _1099), vec3(_3567, _3568, _3569))) + _3644;
                                float _4767 = isnan(0.0) ? _3650 : (isnan(_3650) ? 0.0 : max(_3650, 0.0));
                                float _3651 = isnan(1.0) ? _4767 : (isnan(_4767) ? 1.0 : min(_4767, 1.0));
                                float _3652 = 1.0 - _3619;
                                float _3662 = (0.5 / (((_3651 * ((_3634 * _3652) + _3619)) + 9.9999999392252902907785028219223e-09) + (((_3651 * _3652) + _3619) * _3634))) * _3651;
                                float _4778 = isnan(0.0) ? _3662 : (isnan(_3662) ? 0.0 : max(_3662, 0.0));
                                float _3672 = (_3597 * _3574) * (((_3620 * 3.1415927410125732421875) * (isnan(1.0) ? _4778 : (isnan(_4778) ? 1.0 : min(_4778, 1.0)))) / ((_3642 * _3642) * ((_3587 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3672 * _3456.x;
                                frontier_phi_73_pred_1 = _3672 * _3456.y;
                                frontier_phi_73_pred_2 = _3598 * _3444.z;
                                frontier_phi_73_pred_3 = _3598 * _3444.y;
                                frontier_phi_73_pred_4 = _3598 * _3444.x;
                                frontier_phi_73_pred_5 = _3672 * _3456.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3676 = frontier_phi_73_pred;
                            _3677 = frontier_phi_73_pred_1;
                            _3681 = frontier_phi_73_pred_2;
                            _3680 = frontier_phi_73_pred_3;
                            _3679 = frontier_phi_73_pred_4;
                            _3678 = frontier_phi_73_pred_5;
                            _3386 = _3679 + _3399;
                            _3387 = _3680 + _3400;
                            _3388 = _3681 + _3401;
                            _3383 = _3676 + _3396;
                            _3384 = _3677 + _3397;
                            _3385 = _3678 + _3398;
                            if (_3403 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3396 = _3383;
                                _3397 = _3384;
                                _3398 = _3385;
                                _3399 = _3386;
                                _3400 = _3387;
                                _3401 = _3388;
                                _3402 = _3403;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3386;
                        frontier_phi_67_pred_1 = _3387;
                        frontier_phi_67_pred_2 = _3388;
                        frontier_phi_67_pred_3 = _3385;
                        frontier_phi_67_pred_4 = _3384;
                        frontier_phi_67_pred_5 = _3383;
                    }
                    _3051 = frontier_phi_67_pred;
                    _3053 = frontier_phi_67_pred_1;
                    _3055 = frontier_phi_67_pred_2;
                    _3049 = frontier_phi_67_pred_3;
                    _3047 = frontier_phi_67_pred_4;
                    _3045 = frontier_phi_67_pred_5;
                    uint _3190 = _3189 + 1u;
                    if (_3190 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3183 = _3045;
                        _3184 = _3047;
                        _3185 = _3049;
                        _3186 = _3051;
                        _3187 = _3053;
                        _3188 = _3055;
                        _3189 = _3190;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _3053;
                frontier_phi_55_56_ladder_1 = _3055;
                frontier_phi_55_56_ladder_2 = _3051;
                frontier_phi_55_56_ladder_3 = _3049;
                frontier_phi_55_56_ladder_4 = _3047;
                frontier_phi_55_56_ladder_5 = _3045;
            }
            else
            {
                frontier_phi_55_56_ladder = _2940;
                frontier_phi_55_56_ladder_1 = _2942;
                frontier_phi_55_56_ladder_2 = _2938;
                frontier_phi_55_56_ladder_3 = _2936;
                frontier_phi_55_56_ladder_4 = _2934;
                frontier_phi_55_56_ladder_5 = _2932;
            }
            _3044 = frontier_phi_55_56_ladder_5;
            _3046 = frontier_phi_55_56_ladder_4;
            _3048 = frontier_phi_55_56_ladder_3;
            _3050 = frontier_phi_55_56_ladder_2;
            _3052 = frontier_phi_55_56_ladder;
            _3054 = frontier_phi_55_56_ladder_1;
        }
        float _3059 = isnan(1.0) ? _1137 : (isnan(_1137) ? 1.0 : min(_1137, 1.0));
        _2844 = (_3059 * _3050) + _2299;
        _2846 = (_3059 * _3052) + _2301;
        _2848 = (_3059 * _3054) + _2303;
        _2850 = ((_3044 * 0.039999999105930328369140625) * _3059) + _2629;
        _2852 = ((_3046 * 0.039999999105930328369140625) * _3059) + _2631;
        _2854 = ((_3048 * 0.039999999105930328369140625) * _3059) + _2633;
    }
    else
    {
        _2844 = _2299;
        _2846 = _2301;
        _2848 = _2303;
        _2850 = _2629;
        _2852 = _2631;
        _2854 = _2633;
    }
    float _4794 = isnan(0.0) ? _1122 : (isnan(_1122) ? 0.0 : max(_1122, 0.0));
    float _4805 = isnan(0.0) ? _1123 : (isnan(_1123) ? 0.0 : max(_1123, 0.0));
    float _4816 = isnan(0.0) ? _1124 : (isnan(_1124) ? 0.0 : max(_1124, 0.0));
    uint _2874 = _283 + 6u;
    float _2882 = _1074 / cbSceneParam._m0[86u].x;
    float _2883 = _1075 / cbSceneParam._m0[86u].y;
    vec4 _2897 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2882, _2883, (log2((isnan(cbSceneParam._m0[77u].w) ? _1009 : (isnan(_1009) ? cbSceneParam._m0[77u].w : min(_1009, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2899 = _2897.x;
    float _2900 = _2897.y;
    float _2901 = _2897.z;
    float _2902 = _2897.w;
    float _2994;
    float _2996;
    float _2998;
    float _3000;
    if (_1009 > cbSceneParam._m0[78u].w)
    {
        float _2957 = isnan(_1009) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _1009 : min(cbSceneParam._m0[80u].w, _1009));
        float _2958 = _2957 / _1009;
        float _2969 = _2958 * _1059;
        float _2970 = _1060 * _2958;
        float _2971 = (-0.0) - _2970;
        float _2972 = _2958 * _1061;
        float _2974 = (cbSceneParam._m0[77u].w * _2971) / _2957;
        float _2975 = _2974 + cbSceneParam._m0[79u].w;
        float _2976 = cbSceneParam._m0[79u].w - _2970;
        float _2982 = sqrt(((_2969 * _2969) + (_2970 * _2970)) + (_2972 * _2972));
        float _2985 = (1.0 - (cbSceneParam._m0[77u].w / _2957)) * _2982;
        float _2990 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2992 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3145;
        if (abs((_2971 - _2974) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3145 = ((((_2975 > 0.0) ? exp2(_2990 * _2975) : (2.0 - exp2(_2992 * _2975))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2985;
        }
        else
        {
            float _3105 = 1.0 / cbSceneParam._m0[80u].x;
            float _3106 = isnan(_2976) ? _2975 : (isnan(_2975) ? _2976 : max(_2975, _2976));
            float _3107 = isnan(_2976) ? _2975 : (isnan(_2975) ? _2976 : min(_2975, _2976));
            float _3116 = isnan(0.0) ? _3106 : (isnan(_3106) ? 0.0 : min(_3106, 0.0));
            float _3117 = isnan(0.0) ? _3107 : (isnan(_3107) ? 0.0 : min(_3107, 0.0));
            _3145 = ((abs(_2982 / _2971) * cbSceneParam._m0[80u].y) * ((((_3116 - _3117) * 2.0) - ((exp2(_2990 * (isnan(0.0) ? _3106 : (isnan(_3106) ? 0.0 : max(_3106, 0.0)))) - exp2(_2990 * (isnan(0.0) ? _3107 : (isnan(_3107) ? 0.0 : max(_3107, 0.0))))) * _3105)) - ((exp2(_2992 * _3116) - exp2(_2992 * _3117)) * _3105))) + (_2985 * cbSceneParam._m0[80u].z);
        }
        vec4 _3147 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2882, _2883, 1.0), 0.0);
        float _3156 = exp2((_3145 * (-1.44269502162933349609375)) * (1.0 - _3147.w));
        float _3157 = log2(_3156);
        float _3173 = log2(_2902);
        _2994 = (exp2(_3173 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3157 * cbSceneParam._m0[78u].x)) * _3147.x) / cbSceneParam._m0[78u].x)) + _2899;
        _2996 = (exp2(_3173 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3157 * cbSceneParam._m0[78u].y)) * _3147.y) / cbSceneParam._m0[78u].y)) + _2900;
        _2998 = (exp2(_3173 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3157 * cbSceneParam._m0[78u].z)) * _3147.z) / cbSceneParam._m0[78u].z)) + _2901;
        _3000 = _3156 * _2902;
    }
    else
    {
        _2994 = _2899;
        _2996 = _2900;
        _2998 = _2901;
        _3000 = _2902;
    }
    float _3012 = roundEven(cbMatDynParam._m0[0u].y);
    bool _3013 = _3012 == 3.0;
    float _3014 = log2(_3000);
    float _3021 = exp2(_3014 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4794 : (isnan(_4794) ? 1.0 : min(_4794, 1.0))) * (_2844 + ((isnan(0.0) ? _1862 : (isnan(_1862) ? 0.0 : max(_1862, 0.0))) * _1137))) + ((_2850 + ((isnan(0.0) ? _2152 : (isnan(_2152) ? 0.0 : max(_2152, 0.0))) * _1941)) * cbPerFrame._m0[3u].x));
    float _3022 = exp2(_3014 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4805 : (isnan(_4805) ? 1.0 : min(_4805, 1.0))) * (_2846 + ((isnan(0.0) ? _1865 : (isnan(_1865) ? 0.0 : max(_1865, 0.0))) * _1137))) + ((_2852 + ((isnan(0.0) ? _2155 : (isnan(_2155) ? 0.0 : max(_2155, 0.0))) * _1941)) * cbPerFrame._m0[3u].x));
    float _3023 = exp2(_3014 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4816 : (isnan(_4816) ? 1.0 : min(_4816, 1.0))) * (_2848 + ((isnan(0.0) ? _1868 : (isnan(_1868) ? 0.0 : max(_1868, 0.0))) * _1137))) + ((_2854 + ((isnan(0.0) ? _2158 : (isnan(_2158) ? 0.0 : max(_2158, 0.0))) * _1941)) * cbPerFrame._m0[3u].x));
    float _3032 = (_3012 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _3032 * (_3013 ? _3021 : (_3021 + (cbSceneParam._m0[72u].w * _2994)));
    SV_Target.y = _3032 * (_3013 ? _3022 : (_3022 + (cbSceneParam._m0[72u].w * _2996)));
    SV_Target.z = _3032 * (_3013 ? _3023 : (_3023 + (cbSceneParam._m0[72u].w * _2998)));
    SV_Target.w = cbInstanceData._m0[_2874].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2874].w;
}


