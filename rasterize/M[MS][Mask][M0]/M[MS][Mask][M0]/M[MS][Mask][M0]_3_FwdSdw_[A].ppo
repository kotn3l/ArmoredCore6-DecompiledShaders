#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 13) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_22;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 20) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_6;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1159;
float _3804;
float _3805;
float _3806;
float _3807;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _215 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _216 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _217 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _223 = inversesqrt(dot(vec3(_215, _216, _217), vec3(_215, _216, _217)));
    float _230 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _237 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _251 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _253 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _254 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3816 = isnan(0.0) ? _251 : (isnan(_251) ? 0.0 : max(_251, 0.0));
    float _3827 = isnan(0.0) ? _253 : (isnan(_253) ? 0.0 : max(_253, 0.0));
    float _3838 = isnan(0.0) ? _254 : (isnan(_254) ? 0.0 : max(_254, 0.0));
    uint _264 = uint(roundEven(NORMAL.w)) * 13u;
    uint _269 = _264 + 1u;
    uint _273 = _264 + 2u;
    float _282 = sqrt(((cbInstanceData._m0[_269].x * cbInstanceData._m0[_269].x) + (cbInstanceData._m0[_264].x * cbInstanceData._m0[_264].x)) + (cbInstanceData._m0[_273].x * cbInstanceData._m0[_273].x));
    float _283 = _282 * TEXCOORD.z;
    float _284 = _282 * TEXCOORD.w;
    vec4 _297 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _283) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _284) + cbTextureTilingScale._m0[13u].w));
    vec4 _321 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _326 = _321.x * cbMtdParam._m0[11u].x;
    float _327 = _321.y * cbMtdParam._m0[11u].y;
    float _328 = _321.z * cbMtdParam._m0[11u].z;
    vec4 _347 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _283) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _284) + cbTextureTilingScale._m0[5u].w));
    vec4 _398 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _400 = _398.x;
    float _412 = dot(vec4(_400, _398.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _429 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w)).x) * 2.0) - ((((_400 - _412) * cbMtdParam._m0[24u].z) + _412) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3849 = isnan(0.0) ? _429 : (isnan(_429) ? 0.0 : max(_429, 0.0));
    float _430 = isnan(1.0) ? _3849 : (isnan(_3849) ? 1.0 : min(_3849, 1.0));
    float _437 = (_430 * ((_347.x * cbMtdParam._m0[12u].x) - _326)) + _326;
    float _438 = (_430 * ((_347.y * cbMtdParam._m0[12u].y) - _327)) + _327;
    float _439 = (_430 * ((_347.z * cbMtdParam._m0[12u].z) - _328)) + _328;
    float _443 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _297.x) * _437;
    float _446 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _297.y) * _438;
    float _449 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _297.z) * _439;
    float _456 = ((_437 - _443) * (isnan(1.0) ? _3816 : (isnan(_3816) ? 1.0 : min(_3816, 1.0)))) + _443;
    float _457 = ((_438 - _446) * (isnan(1.0) ? _3827 : (isnan(_3827) ? 1.0 : min(_3827, 1.0)))) + _446;
    float _458 = ((_439 - _449) * (isnan(1.0) ? _3838 : (isnan(_3838) ? 1.0 : min(_3838, 1.0)))) + _449;
    vec4 _471 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _283) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _284) + cbTextureTilingScale._m0[20u].w));
    vec4 _496 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _283) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _284) + cbTextureTilingScale._m0[4u].w));
    vec4 _513 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _515 = _513.x;
    float _516 = _513.y;
    float _517 = _513.z;
    float _526 = ((_496.z - _517) * _430) + _517;
    float _529 = ((((_496.x - _515) * _430) + _515) * 2.0) + (-1.0);
    float _530 = ((((_496.y - _516) * _430) + _516) * 2.0) + (-1.0);
    float _531 = dot(vec2(_529, _530), vec2(_529, _530));
    float _3860 = isnan(0.0) ? _531 : (isnan(_531) ? 0.0 : max(_531, 0.0));
    float _536 = sqrt(1.0 - (isnan(1.0) ? _3860 : (isnan(_3860) ? 1.0 : min(_3860, 1.0))));
    vec4 _558 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _570 = (_529 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_471.x * 2.0) + (-1.0)))) + (((_558.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _571 = (_530 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_471.y * 2.0) + (-1.0)))) + (((_558.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _576 = (((_471.z - _526) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _526;
    float _580 = ((_558.z - _576) * cbMtdParam._m0[19u].w) + _576;
    float _582 = cbMtdParam._m0[22u].x + _558.w;
    float _585 = fma(_536, _230 * NORMAL.x, fma(_571, _237 * TANGENT.x, (_223 * _215) * _570));
    float _588 = fma(_536, _230 * NORMAL.y, fma(_571, _237 * TANGENT.y, (_223 * _216) * _570));
    float _591 = fma(_536, _230 * NORMAL.z, fma(_571, _237 * TANGENT.z, (_223 * _217) * _570));
    float _595 = inversesqrt(dot(vec3(_585, _588, _591), vec3(_585, _588, _591)));
    float _596 = _595 * _585;
    float _597 = _595 * _588;
    float _598 = _595 * _591;
    float _3871 = isnan(0.0) ? _580 : (isnan(_580) ? 0.0 : max(_580, 0.0));
    float _599 = isnan(1.0) ? _3871 : (isnan(_3871) ? 1.0 : min(_3871, 1.0));
    float _3882 = isnan(0.0) ? _582 : (isnan(_582) ? 0.0 : max(_582, 0.0));
    float _3893 = isnan(0.0) ? _456 : (isnan(_456) ? 0.0 : max(_456, 0.0));
    float _3904 = isnan(0.0) ? _457 : (isnan(_457) ? 0.0 : max(_457, 0.0));
    float _3915 = isnan(0.0) ? _458 : (isnan(_458) ? 0.0 : max(_458, 0.0));
    float _617 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _659 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _669 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _659);
    float _670 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _659);
    float _671 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _659);
    float _675 = inversesqrt(dot(vec3(_669, _670, _671), vec3(_669, _670, _671)));
    float _676 = _669 * _675;
    float _677 = _670 * _675;
    float _678 = _671 * _675;
    vec4 _683 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _685 = _683.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _839 = sqrt(((_669 * _669) + (_670 * _670)) + (_671 * _671));
        float _845 = (cbMatDynParam._m0[5u].x * _839) + cbMatDynParam._m0[5u].y;
        float _3926 = isnan(0.0) ? _845 : (isnan(_845) ? 0.0 : max(_845, 0.0));
        float _846 = isnan(1.0) ? _3926 : (isnan(_3926) ? 1.0 : min(_3926, 1.0));
        float _850 = (cbMatDynParam._m0[5u].z * _839) + cbMatDynParam._m0[5u].w;
        float _3937 = isnan(0.0) ? _850 : (isnan(_850) ? 0.0 : max(_850, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3937 : (isnan(_3937) ? 1.0 : min(_3937, 1.0))) - _846)) + _846) < ((_685 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _696 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _697 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _715 = fma(_598, cbSceneParam._m0[5u].z, fma(_597, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _596));
    float _718 = fma(_598, cbSceneParam._m0[6u].z, fma(_597, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _596));
    float _721 = fma(_598, cbSceneParam._m0[7u].z, fma(_597, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _596));
    uint _734 = _264 + 9u;
    uint _735 = _734 + uint(cbMatDynParam._m0[0u].w);
    float _741 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3893 : (isnan(_3893) ? 1.0 : min(_3893, 1.0)))) * cbInstanceData._m0[_735].x;
    float _742 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3904 : (isnan(_3904) ? 1.0 : min(_3904, 1.0)))) * cbInstanceData._m0[_735].y;
    float _743 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3915 : (isnan(_3915) ? 1.0 : min(_3915, 1.0)))) * cbInstanceData._m0[_735].z;
    float _3948 = isnan(0.0) ? _741 : (isnan(_741) ? 0.0 : max(_741, 0.0));
    float _744 = isnan(1.0) ? _3948 : (isnan(_3948) ? 1.0 : min(_3948, 1.0));
    float _3959 = isnan(0.0) ? _742 : (isnan(_742) ? 0.0 : max(_742, 0.0));
    float _745 = isnan(1.0) ? _3959 : (isnan(_3959) ? 1.0 : min(_3959, 1.0));
    float _3970 = isnan(0.0) ? _743 : (isnan(_743) ? 0.0 : max(_743, 0.0));
    float _746 = isnan(1.0) ? _3970 : (isnan(_3970) ? 1.0 : min(_3970, 1.0));
    vec4 _755 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _696, cbSceneParam._m0[86u].y * _697));
    float _759 = ((isnan(1.0) ? _3882 : (isnan(_3882) ? 1.0 : min(_3882, 1.0))) * TEXCOORD_5.w) * _755.x;
    float _760 = dot(vec3(_596, _597, _598), vec3(_676, _677, _678));
    float _763 = _760 * 2.0;
    float _767 = (_763 * _596) - _676;
    float _768 = (_763 * _597) - _677;
    float _769 = (_763 * _598) - _678;
    float _773 = abs(dot(vec3(_676, _677, _678), vec3(_596, _597, _598)));
    float _3981 = isnan(0.0) ? _773 : (isnan(_773) ? 0.0 : max(_773, 0.0));
    float _775 = sqrt(_599);
    float _788 = exp2((_775 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3981 : (isnan(_3981) ? 1.0 : min(_3981, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_775 * 3.0));
    float _820 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _824 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _828 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1158;
    float _1160;
    float _1161;
    float _1162;
    float _1163;
    float _1164;
    float _1165;
    float _1166;
    float _1167;
    float _1168;
    float _1169;
    float _1170;
    float _1171;
    float _1172;
    float _1173;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _883 = fma(_828, cbModelParam._m0[26u].z, fma(_824, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _820));
        float _887 = fma(_828, cbModelParam._m0[27u].z, fma(_824, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _820));
        float _891 = fma(_828, cbModelParam._m0[28u].z, fma(_824, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _820));
        float _916 = _820 + _596;
        float _917 = _824 + _597;
        float _918 = _828 + _598;
        float _928 = fma(_918, cbModelParam._m0[26u].z, fma(_917, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _916)) - _883;
        float _929 = fma(_918, cbModelParam._m0[27u].z, fma(_917, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _916)) - _887;
        float _930 = fma(_918, cbModelParam._m0[28u].z, fma(_917, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _916)) - _891;
        float _934 = inversesqrt(dot(vec3(_928, _929, _930), vec3(_928, _929, _930)));
        float _947 = ((_934 * _928) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_883 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _948 = ((_934 * _929) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_887 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _949 = ((_934 * _930) / cbModelParam._m0[34u].z) + ((((((_891 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _952 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_947, _948, _949), 0.0);
        vec4 _959 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_947, _948, _949), 0.0);
        vec4 _966 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_947, _948, _949), 0.0);
        vec4 _973 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_947, _948, _949), 0.0);
        float _986 = exp2((_952.w + (-0.5)) * 20.0) * 2.0;
        float _987 = _986 * (_952.x + (-0.5));
        float _988 = _986 * (_952.y + (-0.5));
        float _989 = _986 * (_952.z + (-0.5));
        float _996 = exp2((_959.w + (-0.5)) * 20.0) * 2.0;
        float _997 = _996 * (_959.x + (-0.5));
        float _998 = _996 * (_959.y + (-0.5));
        float _999 = _996 * (_959.z + (-0.5));
        float _1006 = exp2((_966.w + (-0.5)) * 20.0) * 2.0;
        float _1007 = _1006 * (_966.x + (-0.5));
        float _1008 = _1006 * (_966.y + (-0.5));
        float _1009 = _1006 * (_966.z + (-0.5));
        float _1016 = exp2((_973.w + (-0.5)) * 20.0) * 2.0;
        float _1017 = _1016 * (_973.x + (-0.5));
        float _1018 = _1016 * (_973.y + (-0.5));
        float _1019 = _1016 * (_973.z + (-0.5));
        float _1020 = isnan(0.0) ? _1017 : (isnan(_1017) ? 0.0 : max(_1017, 0.0));
        float _1021 = isnan(0.0) ? _1018 : (isnan(_1018) ? 0.0 : max(_1018, 0.0));
        float _1022 = isnan(0.0) ? _1019 : (isnan(_1019) ? 0.0 : max(_1019, 0.0));
        float _1023 = _987 * 0.5;
        float _1024 = _997 * 0.5;
        float _1025 = _1007 * 0.5;
        float _1026 = dot(vec3(_1023, _1024, _1025), vec3(_1023, _1024, _1025));
        float _1031 = (_1026 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1026);
        float _1040 = (dot(vec3(_596, _597, _598), vec3(_1031 * _1023, _1031 * _1024, _1031 * _1025)) + 1.0) * 0.5;
        float _4007 = isnan(0.0) ? _1040 : (isnan(_1040) ? 0.0 : max(_1040, 0.0));
        float _1050 = sqrt(((_1024 * _1024) + (_1023 * _1023)) + (_1025 * _1025)) / (_1020 + 9.9999997473787516355514526367188e-06);
        float _4018 = isnan(0.0) ? _1050 : (isnan(_1050) ? 0.0 : max(_1050, 0.0));
        float _1051 = isnan(1.0) ? _4018 : (isnan(_4018) ? 1.0 : min(_4018, 1.0));
        float _1052 = _1051 * 2.0;
        float _1056 = (1.0 - _1051) / (_1051 + 1.0);
        float _4029 = isnan(0.0) ? _1056 : (isnan(_1056) ? 0.0 : max(_1056, 0.0));
        float _1057 = isnan(1.0) ? _4029 : (isnan(_4029) ? 1.0 : min(_4029, 1.0));
        float _1066 = ((((1.0 - _1057) * (_1052 + 2.0)) * exp2(log2(isnan(1.0) ? _4007 : (isnan(_4007) ? 1.0 : min(_4007, 1.0))) * (_1052 + 1.0))) + _1057) * _1020;
        float _1067 = _988 * 0.5;
        float _1068 = _998 * 0.5;
        float _1069 = _1008 * 0.5;
        float _1070 = dot(vec3(_1067, _1068, _1069), vec3(_1067, _1068, _1069));
        float _1075 = (_1070 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1070);
        float _1083 = (dot(vec3(_596, _597, _598), vec3(_1075 * _1067, _1075 * _1068, _1075 * _1069)) + 1.0) * 0.5;
        float _4040 = isnan(0.0) ? _1083 : (isnan(_1083) ? 0.0 : max(_1083, 0.0));
        float _1092 = sqrt(((_1068 * _1068) + (_1067 * _1067)) + (_1069 * _1069)) / (_1021 + 9.9999997473787516355514526367188e-06);
        float _4051 = isnan(0.0) ? _1092 : (isnan(_1092) ? 0.0 : max(_1092, 0.0));
        float _1093 = isnan(1.0) ? _4051 : (isnan(_4051) ? 1.0 : min(_4051, 1.0));
        float _1094 = _1093 * 2.0;
        float _1098 = (1.0 - _1093) / (_1093 + 1.0);
        float _4062 = isnan(0.0) ? _1098 : (isnan(_1098) ? 0.0 : max(_1098, 0.0));
        float _1099 = isnan(1.0) ? _4062 : (isnan(_4062) ? 1.0 : min(_4062, 1.0));
        float _1108 = ((((1.0 - _1099) * (_1094 + 2.0)) * exp2(log2(isnan(1.0) ? _4040 : (isnan(_4040) ? 1.0 : min(_4040, 1.0))) * (_1094 + 1.0))) + _1099) * _1021;
        float _1109 = _989 * 0.5;
        float _1110 = _999 * 0.5;
        float _1111 = _1009 * 0.5;
        float _1112 = dot(vec3(_1109, _1110, _1111), vec3(_1109, _1110, _1111));
        float _1117 = (_1112 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1112);
        float _1125 = (dot(vec3(_596, _597, _598), vec3(_1117 * _1109, _1117 * _1110, _1117 * _1111)) + 1.0) * 0.5;
        float _4073 = isnan(0.0) ? _1125 : (isnan(_1125) ? 0.0 : max(_1125, 0.0));
        float _1134 = sqrt(((_1110 * _1110) + (_1109 * _1109)) + (_1111 * _1111)) / (_1022 + 9.9999997473787516355514526367188e-06);
        float _4084 = isnan(0.0) ? _1134 : (isnan(_1134) ? 0.0 : max(_1134, 0.0));
        float _1135 = isnan(1.0) ? _4084 : (isnan(_4084) ? 1.0 : min(_4084, 1.0));
        float _1136 = _1135 * 2.0;
        float _1140 = (1.0 - _1135) / (_1135 + 1.0);
        float _4095 = isnan(0.0) ? _1140 : (isnan(_1140) ? 0.0 : max(_1140, 0.0));
        float _1141 = isnan(1.0) ? _4095 : (isnan(_4095) ? 1.0 : min(_4095, 1.0));
        float _1150 = ((((1.0 - _1141) * (_1136 + 2.0)) * exp2(log2(isnan(1.0) ? _4073 : (isnan(_4073) ? 1.0 : min(_4073, 1.0))) * (_1136 + 1.0))) + _1141) * _1022;
        _1158 = _989;
        _1160 = _988;
        _1161 = _987;
        _1162 = _999;
        _1163 = _998;
        _1164 = _997;
        _1165 = _1009;
        _1166 = _1008;
        _1167 = _1007;
        _1168 = _1022;
        _1169 = _1021;
        _1170 = _1020;
        _1171 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1066 : (isnan(_1066) ? 0.0 : max(_1066, 0.0)));
        _1172 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1108 : (isnan(_1108) ? 0.0 : max(_1108, 0.0)));
        _1173 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1150 : (isnan(_1150) ? 0.0 : max(_1150, 0.0)));
    }
    else
    {
        _1158 = _1159;
        _1160 = _1159;
        _1161 = _1159;
        _1162 = _1159;
        _1163 = _1159;
        _1164 = _1159;
        _1165 = _1159;
        _1166 = _1159;
        _1167 = _1159;
        _1168 = _1159;
        _1169 = _1159;
        _1170 = _1159;
        _1171 = 0.0;
        _1172 = 0.0;
        _1173 = 0.0;
    }
    float _1470;
    float _1471;
    float _1472;
    float _1473;
    float _1474;
    float _1475;
    float _1476;
    float _1477;
    float _1478;
    float _1479;
    float _1480;
    float _1481;
    float _1482;
    float _1483;
    float _1484;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1201 = fma(_828, cbModelParam._m0[30u].z, fma(_824, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _820));
        float _1205 = fma(_828, cbModelParam._m0[31u].z, fma(_824, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _820));
        float _1209 = fma(_828, cbModelParam._m0[32u].z, fma(_824, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _820));
        float _1232 = _820 + _596;
        float _1233 = _824 + _597;
        float _1234 = _828 + _598;
        float _1244 = fma(_1234, cbModelParam._m0[30u].z, fma(_1233, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1232)) - _1201;
        float _1245 = fma(_1234, cbModelParam._m0[31u].z, fma(_1233, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1232)) - _1205;
        float _1246 = fma(_1234, cbModelParam._m0[32u].z, fma(_1233, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1232)) - _1209;
        float _1250 = inversesqrt(dot(vec3(_1244, _1245, _1246), vec3(_1244, _1245, _1246)));
        float _1263 = ((_1250 * _1244) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1201 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1264 = ((_1250 * _1245) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1205 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1265 = ((_1250 * _1246) / cbModelParam._m0[35u].z) + ((((((_1209 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1267 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1263, _1264, _1265), 0.0);
        vec4 _1274 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1263, _1264, _1265), 0.0);
        vec4 _1281 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1263, _1264, _1265), 0.0);
        vec4 _1288 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1263, _1264, _1265), 0.0);
        float _1300 = exp2((_1267.w + (-0.5)) * 20.0) * 2.0;
        float _1301 = _1300 * (_1267.x + (-0.5));
        float _1302 = _1300 * (_1267.y + (-0.5));
        float _1303 = _1300 * (_1267.z + (-0.5));
        float _1310 = exp2((_1274.w + (-0.5)) * 20.0) * 2.0;
        float _1311 = _1310 * (_1274.x + (-0.5));
        float _1312 = _1310 * (_1274.y + (-0.5));
        float _1313 = _1310 * (_1274.z + (-0.5));
        float _1320 = exp2((_1281.w + (-0.5)) * 20.0) * 2.0;
        float _1321 = _1320 * (_1281.x + (-0.5));
        float _1322 = _1320 * (_1281.y + (-0.5));
        float _1323 = _1320 * (_1281.z + (-0.5));
        float _1330 = exp2((_1288.w + (-0.5)) * 20.0) * 2.0;
        float _1331 = _1330 * (_1288.x + (-0.5));
        float _1332 = _1330 * (_1288.y + (-0.5));
        float _1333 = _1330 * (_1288.z + (-0.5));
        float _1334 = isnan(0.0) ? _1331 : (isnan(_1331) ? 0.0 : max(_1331, 0.0));
        float _1335 = isnan(0.0) ? _1332 : (isnan(_1332) ? 0.0 : max(_1332, 0.0));
        float _1336 = isnan(0.0) ? _1333 : (isnan(_1333) ? 0.0 : max(_1333, 0.0));
        float _1337 = _1301 * 0.5;
        float _1338 = _1311 * 0.5;
        float _1339 = _1321 * 0.5;
        float _1340 = dot(vec3(_1337, _1338, _1339), vec3(_1337, _1338, _1339));
        float _1345 = (_1340 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1340);
        float _1353 = (dot(vec3(_596, _597, _598), vec3(_1345 * _1337, _1345 * _1338, _1345 * _1339)) + 1.0) * 0.5;
        float _4136 = isnan(0.0) ? _1353 : (isnan(_1353) ? 0.0 : max(_1353, 0.0));
        float _1362 = sqrt(((_1338 * _1338) + (_1337 * _1337)) + (_1339 * _1339)) / (_1334 + 9.9999997473787516355514526367188e-06);
        float _4147 = isnan(0.0) ? _1362 : (isnan(_1362) ? 0.0 : max(_1362, 0.0));
        float _1363 = isnan(1.0) ? _4147 : (isnan(_4147) ? 1.0 : min(_4147, 1.0));
        float _1364 = _1363 * 2.0;
        float _1368 = (1.0 - _1363) / (_1363 + 1.0);
        float _4158 = isnan(0.0) ? _1368 : (isnan(_1368) ? 0.0 : max(_1368, 0.0));
        float _1369 = isnan(1.0) ? _4158 : (isnan(_4158) ? 1.0 : min(_4158, 1.0));
        float _1378 = ((((1.0 - _1369) * (_1364 + 2.0)) * exp2(log2(isnan(1.0) ? _4136 : (isnan(_4136) ? 1.0 : min(_4136, 1.0))) * (_1364 + 1.0))) + _1369) * _1334;
        float _1379 = _1302 * 0.5;
        float _1380 = _1312 * 0.5;
        float _1381 = _1322 * 0.5;
        float _1382 = dot(vec3(_1379, _1380, _1381), vec3(_1379, _1380, _1381));
        float _1387 = (_1382 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1382);
        float _1395 = (dot(vec3(_596, _597, _598), vec3(_1387 * _1379, _1387 * _1380, _1387 * _1381)) + 1.0) * 0.5;
        float _4169 = isnan(0.0) ? _1395 : (isnan(_1395) ? 0.0 : max(_1395, 0.0));
        float _1404 = sqrt(((_1380 * _1380) + (_1379 * _1379)) + (_1381 * _1381)) / (_1335 + 9.9999997473787516355514526367188e-06);
        float _4180 = isnan(0.0) ? _1404 : (isnan(_1404) ? 0.0 : max(_1404, 0.0));
        float _1405 = isnan(1.0) ? _4180 : (isnan(_4180) ? 1.0 : min(_4180, 1.0));
        float _1406 = _1405 * 2.0;
        float _1410 = (1.0 - _1405) / (_1405 + 1.0);
        float _4191 = isnan(0.0) ? _1410 : (isnan(_1410) ? 0.0 : max(_1410, 0.0));
        float _1411 = isnan(1.0) ? _4191 : (isnan(_4191) ? 1.0 : min(_4191, 1.0));
        float _1420 = ((((1.0 - _1411) * (_1406 + 2.0)) * exp2(log2(isnan(1.0) ? _4169 : (isnan(_4169) ? 1.0 : min(_4169, 1.0))) * (_1406 + 1.0))) + _1411) * _1335;
        float _1421 = _1303 * 0.5;
        float _1422 = _1313 * 0.5;
        float _1423 = _1323 * 0.5;
        float _1424 = dot(vec3(_1421, _1422, _1423), vec3(_1421, _1422, _1423));
        float _1429 = (_1424 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1424);
        float _1437 = (dot(vec3(_596, _597, _598), vec3(_1429 * _1421, _1429 * _1422, _1429 * _1423)) + 1.0) * 0.5;
        float _4202 = isnan(0.0) ? _1437 : (isnan(_1437) ? 0.0 : max(_1437, 0.0));
        float _1446 = sqrt(((_1422 * _1422) + (_1421 * _1421)) + (_1423 * _1423)) / (_1336 + 9.9999997473787516355514526367188e-06);
        float _4213 = isnan(0.0) ? _1446 : (isnan(_1446) ? 0.0 : max(_1446, 0.0));
        float _1447 = isnan(1.0) ? _4213 : (isnan(_4213) ? 1.0 : min(_4213, 1.0));
        float _1448 = _1447 * 2.0;
        float _1452 = (1.0 - _1447) / (_1447 + 1.0);
        float _4224 = isnan(0.0) ? _1452 : (isnan(_1452) ? 0.0 : max(_1452, 0.0));
        float _1453 = isnan(1.0) ? _4224 : (isnan(_4224) ? 1.0 : min(_4224, 1.0));
        float _1462 = ((((1.0 - _1453) * (_1448 + 2.0)) * exp2(log2(isnan(1.0) ? _4202 : (isnan(_4202) ? 1.0 : min(_4202, 1.0))) * (_1448 + 1.0))) + _1453) * _1336;
        _1470 = _1303;
        _1471 = _1302;
        _1472 = _1301;
        _1473 = _1313;
        _1474 = _1312;
        _1475 = _1311;
        _1476 = _1323;
        _1477 = _1322;
        _1478 = _1321;
        _1479 = _1336;
        _1480 = _1335;
        _1481 = _1334;
        _1482 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1378 : (isnan(_1378) ? 0.0 : max(_1378, 0.0)));
        _1483 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1420 : (isnan(_1420) ? 0.0 : max(_1420, 0.0)));
        _1484 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1462 : (isnan(_1462) ? 0.0 : max(_1462, 0.0)));
    }
    else
    {
        _1470 = _1159;
        _1471 = _1159;
        _1472 = _1159;
        _1473 = _1159;
        _1474 = _1159;
        _1475 = _1159;
        _1476 = _1159;
        _1477 = _1159;
        _1478 = _1159;
        _1479 = _1159;
        _1480 = _1159;
        _1481 = _1159;
        _1482 = 0.0;
        _1483 = 0.0;
        _1484 = 0.0;
    }
    float _1494 = (cbModelParam._m0[1u].x * (_1482 - _1171)) + _1171;
    float _1495 = (cbModelParam._m0[1u].x * (_1483 - _1172)) + _1172;
    float _1496 = (cbModelParam._m0[1u].x * (_1484 - _1173)) + _1173;
    float _1517 = fma(_1496, cbSceneParam._m0[89u].z, fma(_1495, cbSceneParam._m0[89u].y, _1494 * cbSceneParam._m0[89u].x));
    float _1520 = fma(_1496, cbSceneParam._m0[90u].z, fma(_1495, cbSceneParam._m0[90u].y, _1494 * cbSceneParam._m0[90u].x));
    float _1523 = fma(_1496, cbSceneParam._m0[91u].z, fma(_1495, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1494));
    float _1538 = _767 * 0.5;
    float _1539 = _768 * 0.5;
    float _1540 = _769 * 0.5;
    float _1541 = dot(vec4(_1538, _1539, _1540, 1.0), vec4(_1472, _1475, _1478, _1481));
    float _1544 = dot(vec4(_1538, _1539, _1540, 1.0), vec4(_1471, _1474, _1477, _1480));
    float _1547 = dot(vec4(_1538, _1539, _1540, 1.0), vec4(_1470, _1473, _1476, _1479));
    float _1581;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1554 = dot(vec4(_1538, _1539, _1540, 1.0), vec4(_1158, _1162, _1165, _1168));
        float _1558 = dot(vec4(_1538, _1539, _1540, 1.0), vec4(_1160, _1163, _1166, _1169));
        float _1562 = dot(vec4(_1538, _1539, _1540, 1.0), vec4(_1161, _1164, _1167, _1170));
        float _1569 = dot(vec4(cbModelParam._m0[39u]), vec4(_1538, _1539, _1540, 1.0));
        _1581 = dot(vec3(isnan(0.0) ? _1562 : (isnan(_1562) ? 0.0 : max(_1562, 0.0)), isnan(0.0) ? _1558 : (isnan(_1558) ? 0.0 : max(_1558, 0.0)), isnan(0.0) ? _1554 : (isnan(_1554) ? 0.0 : max(_1554, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1569) ? 0.0 : (isnan(0.0) ? _1569 : max(0.0, _1569))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1581 = 1.0;
    }
    float _1592;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1583 = dot(vec4(cbModelParam._m0[40u]), vec4(_1538, _1539, _1540, 1.0));
        _1592 = dot(vec3(isnan(0.0) ? _1541 : (isnan(_1541) ? 0.0 : max(_1541, 0.0)), isnan(0.0) ? _1544 : (isnan(_1544) ? 0.0 : max(_1544, 0.0)), isnan(0.0) ? _1547 : (isnan(_1547) ? 0.0 : max(_1547, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1583) ? 0.0 : (isnan(0.0) ? _1583 : max(0.0, _1583))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1592 = 1.0;
    }
    float _1596 = (_1592 * cbModelParam._m0[1u].x) + (_1581 * (1.0 - cbModelParam._m0[1u].x));
    float _1606 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _599);
    float _1607 = isnan(_1606) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1606 : min(cbModelParam._m0[25u].z, _1606));
    float _1689;
    float _1691;
    float _1693;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1656 = fma(_828, cbModelParam._m0[13u].z, fma(_824, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _820)) + cbModelParam._m0[13u].w;
        float _1660 = fma(_828, cbModelParam._m0[14u].z, fma(_824, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _820)) + cbModelParam._m0[14u].w;
        float _1664 = fma(_828, cbModelParam._m0[15u].z, fma(_824, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _820)) + cbModelParam._m0[15u].w;
        float _1667 = fma(_769, cbModelParam._m0[13u].z, fma(_768, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _767));
        float _1670 = fma(_769, cbModelParam._m0[14u].z, fma(_768, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _767));
        float _1673 = fma(_769, cbModelParam._m0[15u].z, fma(_768, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _767));
        float _1701;
        if (_1667 > 0.0)
        {
            _1701 = abs((1.0 - _1656) / _1667);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1667 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1656 + 1.0) / _1667);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1701 = frontier_phi_17_15_ladder;
        }
        float _1872;
        if (_1670 > 0.0)
        {
            _1872 = abs((1.0 - _1660) / _1670);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1670 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1660 + 1.0) / _1670);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1872 = frontier_phi_26_22_ladder;
        }
        float _2167;
        if (_1673 > 0.0)
        {
            _2167 = abs((1.0 - _1664) / _1673);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1673 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1664 + 1.0) / _1673);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2167 = frontier_phi_38_33_ladder;
        }
        float _2169 = isnan(_1872) ? _1701 : (isnan(_1701) ? _1872 : min(_1701, _1872));
        float _2170 = isnan(_2167) ? _2169 : (isnan(_2169) ? _2167 : min(_2169, _2167));
        float _2174 = (_2170 * _1667) + _1656;
        float _2175 = (_2170 * _1670) + _1660;
        float _2176 = (_2170 * _1673) + _1664;
        float _2177 = _2170 * 9.9999997473787516355514526367188e-05;
        float _2179 = (-1.0) - _2177;
        float _2181 = _2177 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2176 > _2181) || ((_2176 < _2179) || ((_2175 > _2181) || ((_2175 < _2179) || ((_2174 < _2179) || (_2174 > _2181))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2321 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2176, cbModelParam._m0[9u].z, fma(_2175, cbModelParam._m0[9u].y, _2174 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2176, cbModelParam._m0[10u].z, fma(_2175, cbModelParam._m0[10u].y, _2174 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2176, cbModelParam._m0[11u].z, fma(_2175, cbModelParam._m0[11u].y, _2174 * cbModelParam._m0[11u].x))), _1607);
            frontier_phi_16_38_ladder = _2321.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2321.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2321.x * cbModelParam._m0[1u].y;
        }
        _1689 = frontier_phi_16_38_ladder_2;
        _1691 = frontier_phi_16_38_ladder_1;
        _1693 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1677 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_767, _768, _769), _1607);
        _1689 = _1677.x * cbModelParam._m0[1u].y;
        _1691 = _1677.y * cbModelParam._m0[1u].y;
        _1693 = _1677.z * cbModelParam._m0[1u].y;
    }
    float _1697 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _599);
    float _1698 = isnan(_1697) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1697 : min(cbModelParam._m0[25u].w, _1697));
    float _1789;
    float _1791;
    float _1793;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1753 = fma(_828, cbModelParam._m0[21u].z, fma(_824, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _820)) + cbModelParam._m0[21u].w;
        float _1757 = fma(_828, cbModelParam._m0[22u].z, fma(_824, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _820)) + cbModelParam._m0[22u].w;
        float _1761 = fma(_828, cbModelParam._m0[23u].z, fma(_824, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _820)) + cbModelParam._m0[23u].w;
        float _1764 = fma(_769, cbModelParam._m0[21u].z, fma(_768, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _767));
        float _1767 = fma(_769, cbModelParam._m0[22u].z, fma(_768, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _767));
        float _1770 = fma(_769, cbModelParam._m0[23u].z, fma(_768, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _767));
        float _1877;
        if (_1764 > 0.0)
        {
            _1877 = abs((1.0 - _1753) / _1764);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1764 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1753 + 1.0) / _1764);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1877 = frontier_phi_28_24_ladder;
        }
        float _2194;
        if (_1767 > 0.0)
        {
            _2194 = abs((1.0 - _1757) / _1767);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1767 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1757 + 1.0) / _1767);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2194 = frontier_phi_40_35_ladder;
        }
        float _2521;
        if (_1770 > 0.0)
        {
            _2521 = abs((1.0 - _1761) / _1770);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_1770 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_1761 + 1.0) / _1770);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _2521 = frontier_phi_50_47_ladder;
        }
        float _2523 = isnan(_2194) ? _1877 : (isnan(_1877) ? _2194 : min(_1877, _2194));
        float _2524 = isnan(_2521) ? _2523 : (isnan(_2523) ? _2521 : min(_2523, _2521));
        float _2528 = (_2524 * _1764) + _1753;
        float _2529 = (_2524 * _1767) + _1757;
        float _2530 = (_2524 * _1770) + _1761;
        float _2531 = _2524 * 9.9999997473787516355514526367188e-05;
        float _2532 = (-1.0) - _2531;
        float _2534 = _2531 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_2530 > _2534) || ((_2530 < _2532) || ((_2529 > _2534) || ((_2529 < _2532) || ((_2528 < _2532) || (_2528 > _2534))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2648 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2530, cbModelParam._m0[17u].z, fma(_2529, cbModelParam._m0[17u].y, _2528 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2530, cbModelParam._m0[18u].z, fma(_2529, cbModelParam._m0[18u].y, _2528 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2530, cbModelParam._m0[19u].z, fma(_2529, cbModelParam._m0[19u].y, _2528 * cbModelParam._m0[19u].x))), _1698);
            frontier_phi_25_50_ladder = _2648.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _2648.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _2648.x * cbModelParam._m0[1u].z;
        }
        _1789 = frontier_phi_25_50_ladder_2;
        _1791 = frontier_phi_25_50_ladder_1;
        _1793 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _1773 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_767, _768, _769), _1698);
        _1789 = _1773.x * cbModelParam._m0[1u].z;
        _1791 = _1773.y * cbModelParam._m0[1u].z;
        _1793 = _1773.z * cbModelParam._m0[1u].z;
    }
    float _1805 = ((((1.0 - _788) * ((_775 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_788 * _775)) * _759;
    float _1806 = _1805 * ((cbModelParam._m0[1u].w * (_1789 - _1689)) + _1689);
    float _1807 = _1805 * ((cbModelParam._m0[1u].w * (_1791 - _1691)) + _1691);
    float _1808 = _1805 * ((cbModelParam._m0[1u].w * (_1793 - _1693)) + _1693);
    float _1811 = fma(_1808, cbSceneParam._m0[89u].z, fma(_1807, cbSceneParam._m0[89u].y, _1806 * cbSceneParam._m0[89u].x));
    float _1814 = fma(_1808, cbSceneParam._m0[90u].z, fma(_1807, cbSceneParam._m0[90u].y, _1806 * cbSceneParam._m0[90u].x));
    float _1817 = fma(_1808, cbSceneParam._m0[91u].z, fma(_1807, cbSceneParam._m0[91u].y, _1806 * cbSceneParam._m0[91u].x));
    float _1851 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1855 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1859 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1863 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1864 = _1851 / _1863;
    float _1865 = _1855 / _1863;
    float _1866 = _1859 / _1863;
    float _2013;
    float _2014;
    float _2015;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1893 = ((uint(_1866 > cbSceneParam._m0[59u].y) + uint(_1866 > cbSceneParam._m0[59u].x)) + uint(_1866 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1894 = _1893 + 43u;
        uint _1902 = _1893 + 44u;
        uint _1910 = _1893 + 45u;
        uint _1918 = _1893 + 46u;
        float _1929 = fma(_1863, cbSceneParam._m0[_1894].w, fma(_1859, cbSceneParam._m0[_1894].z, fma(_1855, cbSceneParam._m0[_1894].y, _1851 * cbSceneParam._m0[_1894].x)));
        float _1933 = fma(_1863, cbSceneParam._m0[_1902].w, fma(_1859, cbSceneParam._m0[_1902].z, fma(_1855, cbSceneParam._m0[_1902].y, _1851 * cbSceneParam._m0[_1902].x)));
        float _1941 = fma(_1863, cbSceneParam._m0[_1918].w, fma(_1859, cbSceneParam._m0[_1918].z, fma(_1855, cbSceneParam._m0[_1918].y, _1851 * cbSceneParam._m0[_1918].x)));
        float _1946 = cbSceneParam._m0[33u].z * _1941;
        float _1948 = cbSceneParam._m0[33u].w * _1941;
        float _1951 = fma(_1863, cbSceneParam._m0[_1910].w, fma(_1859, cbSceneParam._m0[_1910].z, fma(_1855, cbSceneParam._m0[_1910].y, _1851 * cbSceneParam._m0[_1910].x))) / _1941;
        float _1999 = (cbSceneParam._m0[33u].x - sqrt(((_1865 * _1865) + (_1864 * _1864)) + (_1866 * _1866))) * cbSceneParam._m0[33u].y;
        float _4350 = isnan(0.0) ? _1999 : (isnan(_1999) ? 0.0 : max(_1999, 0.0));
        float _2006 = (isnan(1.0) ? _4350 : (isnan(_4350) ? 1.0 : min(_4350, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1946 + _1929) / _1941, (_1948 + _1933) / _1941), _1951), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1948 + _1929) / _1941, (_1933 - _1946) / _1941), _1951), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1929 - _1946) / _1941, (_1933 - _1948) / _1941), _1951), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1929 - _1948) / _1941, (_1946 + _1933) / _1941), _1951), 0.0)).x), vec4(0.25)));
        _2013 = 1.0 - (_2006 * cbSceneParam._m0[34u].x);
        _2014 = 1.0 - (_2006 * cbSceneParam._m0[34u].y);
        _2015 = 1.0 - (_2006 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2013 = 1.0;
        _2014 = 1.0;
        _2015 = 1.0;
    }
    float _2079;
    float _2081;
    float _2083;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2067 = fma(_1863, cbSceneParam._m0[63u].w, fma(_1859, cbSceneParam._m0[63u].z, fma(_1855, cbSceneParam._m0[63u].y, _1851 * cbSceneParam._m0[63u].x)));
        float _2068 = fma(_1863, cbSceneParam._m0[60u].w, fma(_1859, cbSceneParam._m0[60u].z, fma(_1855, cbSceneParam._m0[60u].y, _1851 * cbSceneParam._m0[60u].x))) / _2067;
        float _2069 = fma(_1863, cbSceneParam._m0[61u].w, fma(_1859, cbSceneParam._m0[61u].z, fma(_1855, cbSceneParam._m0[61u].y, _1851 * cbSceneParam._m0[61u].x))) / _2067;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_2068 >= cbSceneParam._m0[64u].x) && (_2069 >= cbSceneParam._m0[64u].y)) && (_2068 <= cbSceneParam._m0[64u].z)) && (_2069 <= cbSceneParam._m0[64u].w))
        {
            float _2207 = fma(_1863, cbSceneParam._m0[62u].w, fma(_1859, cbSceneParam._m0[62u].z, fma(_1855, cbSceneParam._m0[62u].y, _1851 * cbSceneParam._m0[62u].x))) / _2067;
            float _2211 = isnan(cbSceneParam._m0[41u].w) ? _2207 : (isnan(_2207) ? cbSceneParam._m0[41u].w : max(_2207, cbSceneParam._m0[41u].w));
            float _2254 = (cbSceneParam._m0[33u].x - sqrt(((_1865 * _1865) + (_1864 * _1864)) + (_1866 * _1866))) * cbSceneParam._m0[33u].y;
            float _4366 = isnan(0.0) ? _2254 : (isnan(_2254) ? 0.0 : max(_2254, 0.0));
            float _2261 = (isnan(1.0) ? _4366 : (isnan(_4366) ? 1.0 : min(_4366, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2068, cbSceneParam._m0[33u].w + _2069), _2211), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2068, _2069 - cbSceneParam._m0[33u].z), _2211), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2068 - cbSceneParam._m0[33u].z, _2069 - cbSceneParam._m0[33u].w), _2211), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2068 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2069), _2211), 0.0)).x), vec4(0.25)));
            float _2265 = 1.0 - (_2261 * cbSceneParam._m0[34u].x);
            float _2266 = 1.0 - (_2261 * cbSceneParam._m0[34u].y);
            float _2267 = 1.0 - (_2261 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_2267) ? _2015 : (isnan(_2015) ? _2267 : min(_2015, _2267));
            frontier_phi_37_36_ladder_1 = isnan(_2266) ? _2014 : (isnan(_2014) ? _2266 : min(_2014, _2266));
            frontier_phi_37_36_ladder_2 = isnan(_2265) ? _2013 : (isnan(_2013) ? _2265 : min(_2013, _2265));
        }
        else
        {
            frontier_phi_37_36_ladder = _2015;
            frontier_phi_37_36_ladder_1 = _2014;
            frontier_phi_37_36_ladder_2 = _2013;
        }
        _2079 = frontier_phi_37_36_ladder_2;
        _2081 = frontier_phi_37_36_ladder_1;
        _2083 = frontier_phi_37_36_ladder;
    }
    else
    {
        _2079 = _2013;
        _2081 = _2014;
        _2083 = _2015;
    }
    uvec4 _2088 = floatBitsToUint(cbInstanceData._m0[_264 + 5u]);
    uint _2090 = _2088.x * 14u;
    uint _2091 = _2090 + 13u;
    float _2098 = _759 + (-1.0);
    float _2103 = (cbLight._m0[_2091].x * _2098) + 1.0;
    float _2104 = (cbLight._m0[_2091].y * _2098) + 1.0;
    float _2105 = (cbLight._m0[_2091].z * _2098) + 1.0;
    float _2106 = (cbLight._m0[_2091].w * _2098) + 1.0;
    uint _2107 = _2090 + 5u;
    float _2113 = isnan(1.0) ? _2104 : (isnan(_2104) ? 1.0 : min(_2104, 1.0));
    uint _2117 = _2090 + 4u;
    float _2126 = isnan(1.0) ? _2103 : (isnan(_2103) ? 1.0 : min(_2103, 1.0));
    uint _2130 = _2090 | 1u;
    float _2141 = dot(vec3(cbLight._m0[_2090].xyz), vec3(_596, _597, _598));
    float _2144 = dot(vec3(cbLight._m0[_2130].xyz), vec3(_596, _597, _598));
    float _4402 = isnan(0.0) ? _2141 : (isnan(_2141) ? 0.0 : max(_2141, 0.0));
    float _4413 = isnan(0.0) ? _2144 : (isnan(_2144) ? 0.0 : max(_2144, 0.0));
    float _2149 = (isnan(1.0) ? _4402 : (isnan(_4402) ? 1.0 : min(_4402, 1.0))) * 0.3183098733425140380859375;
    float _2151 = (isnan(1.0) ? _4413 : (isnan(_4413) ? 1.0 : min(_4413, 1.0))) * 0.3183098733425140380859375;
    float _2158 = ((cbLight._m0[_2107].x * _2113) * _2151) + (((cbLight._m0[_2117].x * _2079) * _2126) * _2149);
    float _2159 = ((_2113 * cbLight._m0[_2107].y) * _2151) + (((cbLight._m0[_2117].y * _2081) * _2126) * _2149);
    float _2160 = ((_2113 * cbLight._m0[_2107].z) * _2151) + (((cbLight._m0[_2117].z * _2083) * _2126) * _2149);
    uvec4 _2164 = floatBitsToUint(cbLight._m0[_2090 + 12u]);
    bool _2166 = _2164.x == 0u;
    float _2268;
    float _2270;
    float _2272;
    if (_2166)
    {
        _2268 = _2158;
        _2270 = _2159;
        _2272 = _2160;
    }
    else
    {
        uint _2276 = _2090 + 6u;
        float _2292 = (dot(vec3(cbLight._m0[_2090 + 2u].xyz), vec3(_596, _597, _598)) * 0.5) + 0.5;
        float _2293 = _2292 * _2292;
        float _4424 = isnan(0.0) ? _2293 : (isnan(_2293) ? 0.0 : max(_2293, 0.0));
        float _2294 = isnan(1.0) ? _4424 : (isnan(_4424) ? 1.0 : min(_4424, 1.0));
        float _2295 = isnan(1.0) ? _2105 : (isnan(_2105) ? 1.0 : min(_2105, 1.0));
        _2268 = (((cbLight._m0[_2276].x * 0.3183098733425140380859375) * _2294) * _2295) + _2158;
        _2270 = (((cbLight._m0[_2276].y * 0.3183098733425140380859375) * _2294) * _2295) + _2159;
        _2272 = (((cbLight._m0[_2276].z * 0.3183098733425140380859375) * _2294) * _2295) + _2160;
    }
    bool _2275 = _2164.y == 0u;
    float _2330;
    float _2332;
    float _2334;
    if (_2275)
    {
        _2330 = _2268;
        _2332 = _2270;
        _2334 = _2272;
    }
    else
    {
        uint _2492 = _2090 + 7u;
        float _2508 = (dot(vec3(cbLight._m0[_2090 + 3u].xyz), vec3(_596, _597, _598)) * 0.5) + 0.5;
        float _2509 = _2508 * _2508;
        float _4440 = isnan(0.0) ? _2509 : (isnan(_2509) ? 0.0 : max(_2509, 0.0));
        float _2510 = isnan(1.0) ? _4440 : (isnan(_4440) ? 1.0 : min(_4440, 1.0));
        float _2511 = isnan(1.0) ? _2106 : (isnan(_2106) ? 1.0 : min(_2106, 1.0));
        _2330 = (((cbLight._m0[_2492].x * 0.3183098733425140380859375) * _2510) * _2511) + _2268;
        _2332 = (((cbLight._m0[_2492].y * 0.3183098733425140380859375) * _2510) * _2511) + _2270;
        _2334 = (((cbLight._m0[_2492].z * 0.3183098733425140380859375) * _2510) * _2511) + _2272;
    }
    uint _2337 = _2090 + 8u;
    float _2350 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2090].w)) * _599) * 0.949999988079071044921875);
    float _2351 = _2350 * _2350;
    float _2352 = cbLight._m0[_2090].x + _676;
    float _2353 = cbLight._m0[_2090].y + _677;
    float _2354 = cbLight._m0[_2090].z + _678;
    float _2358 = inversesqrt(dot(vec3(_2352, _2353, _2354), vec3(_2352, _2353, _2354)));
    float _2359 = _2358 * _2352;
    float _2360 = _2358 * _2353;
    float _2361 = _2358 * _2354;
    float _2362 = dot(vec3(_596, _597, _598), vec3(cbLight._m0[_2090].xyz));
    float _4456 = isnan(0.0) ? _2362 : (isnan(_2362) ? 0.0 : max(_2362, 0.0));
    float _2365 = isnan(1.0) ? _4456 : (isnan(_4456) ? 1.0 : min(_4456, 1.0));
    float _4467 = isnan(0.0) ? _760 : (isnan(_760) ? 0.0 : max(_760, 0.0));
    float _2366 = isnan(1.0) ? _4467 : (isnan(_4467) ? 1.0 : min(_4467, 1.0));
    float _2367 = dot(vec3(_596, _597, _598), vec3(_2359, _2360, _2361));
    float _4478 = isnan(0.0) ? _2367 : (isnan(_2367) ? 0.0 : max(_2367, 0.0));
    float _2370 = isnan(1.0) ? _4478 : (isnan(_4478) ? 1.0 : min(_4478, 1.0));
    float _2371 = dot(vec3(cbLight._m0[_2090].xyz), vec3(_2359, _2360, _2361));
    float _4489 = isnan(0.0) ? _2371 : (isnan(_2371) ? 0.0 : max(_2371, 0.0));
    float _2375 = _2351 * _2351;
    float _2379 = ((_2370 * _2370) * (_2375 + (-1.0))) + 1.0;
    float _2390 = (exp2(log2(1.0 - (isnan(1.0) ? _4489 : (isnan(_4489) ? 1.0 : min(_4489, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2391 = 1.0 - _2351;
    float _2402 = (0.5 / (((_2366 * ((_2365 * _2391) + _2351)) + 9.9999999392252902907785028219223e-09) + (((_2366 * _2391) + _2351) * _2365))) * _2365;
    float _4500 = isnan(0.0) ? _2402 : (isnan(_2402) ? 0.0 : max(_2402, 0.0));
    float _2404 = (isnan(1.0) ? _4500 : (isnan(_4500) ? 1.0 : min(_4500, 1.0))) * (_2375 / ((_2379 * _2379) * 3.141590118408203125));
    uint _2418 = _2090 + 9u;
    float _2429 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2130].w)) * _599) * 0.949999988079071044921875);
    float _2430 = _2429 * _2429;
    float _2431 = cbLight._m0[_2130].x + _676;
    float _2432 = cbLight._m0[_2130].y + _677;
    float _2433 = cbLight._m0[_2130].z + _678;
    float _2437 = inversesqrt(dot(vec3(_2431, _2432, _2433), vec3(_2431, _2432, _2433)));
    float _2438 = _2437 * _2431;
    float _2439 = _2437 * _2432;
    float _2440 = _2437 * _2433;
    float _2441 = dot(vec3(_596, _597, _598), vec3(cbLight._m0[_2130].xyz));
    float _4511 = isnan(0.0) ? _2441 : (isnan(_2441) ? 0.0 : max(_2441, 0.0));
    float _2444 = isnan(1.0) ? _4511 : (isnan(_4511) ? 1.0 : min(_4511, 1.0));
    float _2445 = dot(vec3(_596, _597, _598), vec3(_2438, _2439, _2440));
    float _4522 = isnan(0.0) ? _2445 : (isnan(_2445) ? 0.0 : max(_2445, 0.0));
    float _2448 = isnan(1.0) ? _4522 : (isnan(_4522) ? 1.0 : min(_4522, 1.0));
    float _2449 = dot(vec3(cbLight._m0[_2130].xyz), vec3(_2438, _2439, _2440));
    float _4533 = isnan(0.0) ? _2449 : (isnan(_2449) ? 0.0 : max(_2449, 0.0));
    float _2453 = _2430 * _2430;
    float _2457 = ((_2448 * _2448) * (_2453 + (-1.0))) + 1.0;
    float _2466 = (exp2(log2(1.0 - (isnan(1.0) ? _4533 : (isnan(_4533) ? 1.0 : min(_4533, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2467 = 1.0 - _2430;
    float _2477 = (0.5 / (((_2366 * ((_2444 * _2467) + _2430)) + 9.9999999392252902907785028219223e-09) + (((_2366 * _2467) + _2430) * _2444))) * _2444;
    float _4544 = isnan(0.0) ? _2477 : (isnan(_2477) ? 0.0 : max(_2477, 0.0));
    float _2479 = (isnan(1.0) ? _4544 : (isnan(_4544) ? 1.0 : min(_4544, 1.0))) * (_2453 / ((_2457 * _2457) * 3.141590118408203125));
    float _2489 = (((_2466 * cbLight._m0[_2418].x) * _2479) * _2113) + ((((cbLight._m0[_2337].x * _2079) * _2390) * _2404) * _2126);
    float _2490 = (((_2466 * cbLight._m0[_2418].y) * _2479) * _2113) + ((((cbLight._m0[_2337].y * _2081) * _2390) * _2404) * _2126);
    float _2491 = (((_2466 * cbLight._m0[_2418].z) * _2479) * _2113) + ((((cbLight._m0[_2337].z * _2083) * _2390) * _2404) * _2126);
    float _2547;
    float _2549;
    float _2551;
    if (_2166)
    {
        _2547 = _2489;
        _2549 = _2490;
        _2551 = _2491;
    }
    else
    {
        uint _2553 = _2090 + 2u;
        uint _2557 = _2090 + 10u;
        float _2571 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2553].w)) * _599) * 0.949999988079071044921875);
        float _2572 = _2571 * _2571;
        float _2573 = cbLight._m0[_2553].x + _676;
        float _2574 = cbLight._m0[_2553].y + _677;
        float _2575 = cbLight._m0[_2553].z + _678;
        float _2579 = inversesqrt(dot(vec3(_2573, _2574, _2575), vec3(_2573, _2574, _2575)));
        float _2580 = _2579 * _2573;
        float _2581 = _2579 * _2574;
        float _2582 = _2579 * _2575;
        float _2583 = dot(vec3(_596, _597, _598), vec3(cbLight._m0[_2553].xyz));
        float _4555 = isnan(0.0) ? _2583 : (isnan(_2583) ? 0.0 : max(_2583, 0.0));
        float _2586 = isnan(1.0) ? _4555 : (isnan(_4555) ? 1.0 : min(_4555, 1.0));
        float _2587 = dot(vec3(_596, _597, _598), vec3(_2580, _2581, _2582));
        float _4566 = isnan(0.0) ? _2587 : (isnan(_2587) ? 0.0 : max(_2587, 0.0));
        float _2590 = isnan(1.0) ? _4566 : (isnan(_4566) ? 1.0 : min(_4566, 1.0));
        float _2591 = dot(vec3(cbLight._m0[_2553].xyz), vec3(_2580, _2581, _2582));
        float _4577 = isnan(0.0) ? _2591 : (isnan(_2591) ? 0.0 : max(_2591, 0.0));
        float _2595 = _2572 * _2572;
        float _2599 = ((_2590 * _2590) * (_2595 + (-1.0))) + 1.0;
        float _2608 = (exp2(log2(1.0 - (isnan(1.0) ? _4577 : (isnan(_4577) ? 1.0 : min(_4577, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2609 = 1.0 - _2572;
        float _2619 = (0.5 / (((_2366 * ((_2586 * _2609) + _2572)) + 9.9999999392252902907785028219223e-09) + (((_2366 * _2609) + _2572) * _2586))) * _2586;
        float _4588 = isnan(0.0) ? _2619 : (isnan(_2619) ? 0.0 : max(_2619, 0.0));
        float _2621 = (isnan(1.0) ? _4588 : (isnan(_4588) ? 1.0 : min(_4588, 1.0))) * (_2595 / ((_2599 * _2599) * 3.141590118408203125));
        float _2622 = isnan(1.0) ? _2105 : (isnan(_2105) ? 1.0 : min(_2105, 1.0));
        _2547 = (((_2608 * cbLight._m0[_2557].x) * _2621) * _2622) + _2489;
        _2549 = (((_2608 * cbLight._m0[_2557].y) * _2621) * _2622) + _2490;
        _2551 = (((_2608 * cbLight._m0[_2557].z) * _2621) * _2622) + _2491;
    }
    float _2653;
    float _2655;
    float _2657;
    if (_2275)
    {
        _2653 = _2547;
        _2655 = _2549;
        _2657 = _2551;
    }
    else
    {
        uint _2664 = _2090 + 3u;
        uint _2668 = _2090 + 11u;
        float _2682 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2664].w)) * _599) * 0.949999988079071044921875);
        float _2683 = _2682 * _2682;
        float _2684 = cbLight._m0[_2664].x + _676;
        float _2685 = cbLight._m0[_2664].y + _677;
        float _2686 = cbLight._m0[_2664].z + _678;
        float _2690 = inversesqrt(dot(vec3(_2684, _2685, _2686), vec3(_2684, _2685, _2686)));
        float _2691 = _2690 * _2684;
        float _2692 = _2690 * _2685;
        float _2693 = _2690 * _2686;
        float _2694 = dot(vec3(_596, _597, _598), vec3(cbLight._m0[_2664].xyz));
        float _4604 = isnan(0.0) ? _2694 : (isnan(_2694) ? 0.0 : max(_2694, 0.0));
        float _2697 = isnan(1.0) ? _4604 : (isnan(_4604) ? 1.0 : min(_4604, 1.0));
        float _2698 = dot(vec3(_596, _597, _598), vec3(_2691, _2692, _2693));
        float _4615 = isnan(0.0) ? _2698 : (isnan(_2698) ? 0.0 : max(_2698, 0.0));
        float _2701 = isnan(1.0) ? _4615 : (isnan(_4615) ? 1.0 : min(_4615, 1.0));
        float _2702 = dot(vec3(cbLight._m0[_2664].xyz), vec3(_2691, _2692, _2693));
        float _4626 = isnan(0.0) ? _2702 : (isnan(_2702) ? 0.0 : max(_2702, 0.0));
        float _2706 = _2683 * _2683;
        float _2710 = ((_2701 * _2701) * (_2706 + (-1.0))) + 1.0;
        float _2719 = (exp2(log2(1.0 - (isnan(1.0) ? _4626 : (isnan(_4626) ? 1.0 : min(_4626, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2720 = 1.0 - _2683;
        float _2730 = (0.5 / (((_2366 * ((_2697 * _2720) + _2683)) + 9.9999999392252902907785028219223e-09) + (((_2366 * _2720) + _2683) * _2697))) * _2697;
        float _4637 = isnan(0.0) ? _2730 : (isnan(_2730) ? 0.0 : max(_2730, 0.0));
        float _2732 = (isnan(1.0) ? _4637 : (isnan(_4637) ? 1.0 : min(_4637, 1.0))) * (_2706 / ((_2710 * _2710) * 3.141590118408203125));
        float _2733 = isnan(1.0) ? _2106 : (isnan(_2106) ? 1.0 : min(_2106, 1.0));
        _2653 = (((_2719 * cbLight._m0[_2668].x) * _2732) * _2733) + _2547;
        _2655 = (((_2719 * cbLight._m0[_2668].y) * _2732) * _2733) + _2549;
        _2657 = (((_2719 * cbLight._m0[_2668].z) * _2732) * _2733) + _2551;
    }
    float _2799;
    float _2801;
    float _2803;
    float _2805;
    float _2807;
    float _2809;
    if (_2088.y == 0u)
    {
        uvec4 _2754 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2755 = _2754.x;
        uint _2766 = uint((float(_2754.y) * floor(float(uint(cbSceneParam._m0[85u].y * _697) / _2755))) + floor(float(uint(cbSceneParam._m0[85u].x * _696) / _2755)));
        float _2776 = (log2(_1866 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2777 = isnan(0.0) ? _2776 : (isnan(_2776) ? 0.0 : max(_2776, 0.0));
        uint _2780 = uint(isnan(14.0) ? _2777 : (isnan(_2777) ? 14.0 : min(_2777, 14.0)));
        uvec4 _2785 = texelFetch(g_lightClusterGridBuffer, int(((_2780 << 2u) + (_2766 << 6u)) >> 2u));
        uint _2786 = _2785.x;
        uint _2787 = _2754.z;
        float _2866;
        float _2868;
        float _2870;
        float _2872;
        float _2874;
        float _2876;
        if (((((1u << ((_2787 >> 4u) & 15u)) + 4294967295u) & _2786) == 0u) || ((_2787 & 240u) == 0u))
        {
            _2866 = 0.0;
            _2868 = 0.0;
            _2870 = 0.0;
            _2872 = 0.0;
            _2874 = 0.0;
            _2876 = 0.0;
        }
        else
        {
            float _2867;
            float _2869;
            float _2871;
            float _2873;
            float _2875;
            float _2877;
            float _3019 = 0.0;
            float _3020 = 0.0;
            float _3021 = 0.0;
            float _3022 = 0.0;
            float _3023 = 0.0;
            float _3024 = 0.0;
            uint _3025 = 0u;
            uint _3034;
            bool _3035;
            for (;;)
            {
                _3034 = texelFetch(g_lightClassification, int((((_2780 << 5u) + (_2766 << 9u)) + (_3025 << 2u)) >> 2u)).x;
                _3035 = _3034 == 0u;
                float frontier_phi_71_pred;
                float frontier_phi_71_pred_1;
                float frontier_phi_71_pred_2;
                float frontier_phi_71_pred_3;
                float frontier_phi_71_pred_4;
                float frontier_phi_71_pred_5;
                if (_3035)
                {
                    frontier_phi_71_pred = _3024;
                    frontier_phi_71_pred_1 = _3023;
                    frontier_phi_71_pred_2 = _3022;
                    frontier_phi_71_pred_3 = _3021;
                    frontier_phi_71_pred_4 = _3020;
                    frontier_phi_71_pred_5 = _3019;
                }
                else
                {
                    float _3164;
                    float _3165;
                    float _3166;
                    float _3167;
                    float _3168;
                    float _3169;
                    uint _3170;
                    _3164 = _3019;
                    _3165 = _3020;
                    _3166 = _3021;
                    _3167 = _3022;
                    _3168 = _3023;
                    _3169 = _3024;
                    _3170 = _3034;
                    float _3091;
                    float _3092;
                    float _3093;
                    float _3094;
                    float _3095;
                    float _3096;
                    for (;;)
                    {
                        uint _3174 = uint(findLSB(_3170)) + (_3025 << 5u);
                        uint _3171 = (_3170 + 4294967295u) & _3170;
                        uint _3176 = _3174 * 48u;
                        vec4 _3190 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3176)).x, texelFetch(g_PointLightRenderingBuffer, int(_3176 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3176 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3176 + 3u)).x));
                        uint _3196 = (_3174 * 48u) + 4u;
                        vec4 _3209 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3196)).x, texelFetch(g_PointLightRenderingBuffer, int(_3196 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3196 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3196 + 3u)).x));
                        uint _3215 = (_3174 * 48u) + 8u;
                        vec3 _3226 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3215)).x, texelFetch(g_PointLightRenderingBuffer, int(_3215 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3215 + 2u)).x));
                        float _3230 = _3190.x - _1864;
                        float _3231 = _3190.y - _1865;
                        float _3232 = _3190.z - _1866;
                        float _3233 = dot(vec3(_3230, _3231, _3232), vec3(_3230, _3231, _3232));
                        float _3236 = inversesqrt(_3233);
                        float _3237 = _3236 * _3230;
                        float _3238 = _3236 * _3231;
                        float _3239 = _3236 * _3232;
                        float _3240 = dot(vec3(_715, _718, _721), vec3(_3237, _3238, _3239));
                        float _3245 = 1.0 - (_3233 * _3190.w);
                        float _4663 = isnan(0.0) ? _3245 : (isnan(_3245) ? 0.0 : max(_3245, 0.0));
                        float _3246 = isnan(1.0) ? _4663 : (isnan(_4663) ? 1.0 : min(_4663, 1.0));
                        float _3247 = sqrt(_3233) * _3209.w;
                        float _3250 = 1.39999997615814208984375 / (_3247 + 1.39999997615814208984375);
                        float _3251 = _3250 * _3250;
                        float _3254 = ((1.0 - _3251) * _3240) + _3251;
                        float _3257 = _3247 * _3247;
                        float _3261 = ((isnan(0.0) ? _3254 : (isnan(_3254) ? 0.0 : max(_3254, 0.0))) * _3246) / ((_3257 * 0.699999988079071044921875) + 1.0);
                        float _3265 = (-0.0) - _1864;
                        float _3266 = (-0.0) - _1865;
                        float _3267 = (-0.0) - _1866;
                        float _3271 = inversesqrt(dot(vec3(_3265, _3266, _3267), vec3(_3265, _3266, _3267)));
                        float _3272 = _3271 * _3265;
                        float _3273 = _3271 * _3266;
                        float _3274 = _3271 * _3267;
                        float _3281 = exp2(log2(1.0 / ((_3257 * 3.5) + 5.0)) * 0.25);
                        float _3282 = 1.0 - _775;
                        float _3289 = sqrt(1.0 - ((1.0 - (_3282 * _3282)) * (1.0 - (_3281 * _3281))));
                        float _3290 = _3289 * _3289;
                        float _3291 = _3290 * _3290;
                        float _3292 = _3272 + _3237;
                        float _3293 = _3273 + _3238;
                        float _3294 = _3274 + _3239;
                        float _3298 = inversesqrt(dot(vec3(_3292, _3293, _3294), vec3(_3292, _3293, _3294)));
                        float _3302 = dot(vec3(_715, _718, _721), vec3(_3272, _3273, _3274));
                        float _4679 = isnan(0.0) ? _3302 : (isnan(_3302) ? 0.0 : max(_3302, 0.0));
                        float _3305 = isnan(1.0) ? _4679 : (isnan(_4679) ? 1.0 : min(_4679, 1.0));
                        float _3306 = dot(vec3(_715, _718, _721), vec3(_3298 * _3292, _3298 * _3293, _3298 * _3294));
                        float _4690 = isnan(0.0) ? _3306 : (isnan(_3306) ? 0.0 : max(_3306, 0.0));
                        float _3309 = isnan(1.0) ? _4690 : (isnan(_4690) ? 1.0 : min(_4690, 1.0));
                        float _3313 = ((_3309 * _3309) * (_3291 + (-1.0))) + 1.0;
                        float _3314 = _3250 * _3290;
                        float _3315 = _3314 * _3314;
                        float _3318 = ((1.0 - _3315) * _3240) + _3315;
                        float _4701 = isnan(0.0) ? _3318 : (isnan(_3318) ? 0.0 : max(_3318, 0.0));
                        float _3319 = isnan(1.0) ? _4701 : (isnan(_4701) ? 1.0 : min(_4701, 1.0));
                        float _3320 = 1.0 - _3290;
                        float _3330 = (0.5 / (((_3319 * ((_3305 * _3320) + _3290)) + 9.9999999392252902907785028219223e-09) + (((_3319 * _3320) + _3290) * _3305))) * _3319;
                        float _4712 = isnan(0.0) ? _3330 : (isnan(_3330) ? 0.0 : max(_3330, 0.0));
                        float _3341 = (((_3291 * 3.1415927410125732421875) * (isnan(1.0) ? _4712 : (isnan(_4712) ? 1.0 : min(_4712, 1.0)))) / ((_3313 * _3313) * ((_3257 * 2.1991131305694580078125) + 3.141590118408203125))) * _3246;
                        _3094 = (_3261 * _3209.x) + _3167;
                        _3095 = (_3261 * _3209.y) + _3168;
                        _3096 = (_3261 * _3209.z) + _3169;
                        _3091 = (_3341 * _3226.x) + _3164;
                        _3092 = (_3341 * _3226.y) + _3165;
                        _3093 = (_3341 * _3226.z) + _3166;
                        if (_3171 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3164 = _3091;
                            _3165 = _3092;
                            _3166 = _3093;
                            _3167 = _3094;
                            _3168 = _3095;
                            _3169 = _3096;
                            _3170 = _3171;
                        }
                    }
                    frontier_phi_71_pred = _3096;
                    frontier_phi_71_pred_1 = _3095;
                    frontier_phi_71_pred_2 = _3094;
                    frontier_phi_71_pred_3 = _3093;
                    frontier_phi_71_pred_4 = _3092;
                    frontier_phi_71_pred_5 = _3091;
                }
                _2877 = frontier_phi_71_pred;
                _2875 = frontier_phi_71_pred_1;
                _2873 = frontier_phi_71_pred_2;
                _2871 = frontier_phi_71_pred_3;
                _2869 = frontier_phi_71_pred_4;
                _2867 = frontier_phi_71_pred_5;
                uint _3026 = _3025 + 1u;
                if (_3026 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3019 = _2867;
                    _3020 = _2869;
                    _3021 = _2871;
                    _3022 = _2873;
                    _3023 = _2875;
                    _3024 = _2877;
                    _3025 = _3026;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2866 = _2867;
            _2868 = _2869;
            _2870 = _2871;
            _2872 = _2873;
            _2874 = _2875;
            _2876 = _2877;
        }
        uvec4 _2880 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2881 = _2880.z;
        uint _2883 = (_2881 >> 8u) & 15u;
        float _2987;
        float _2989;
        float _2991;
        float _2993;
        float _2995;
        float _2997;
        if (((4294967295u << _2883) & _2786) == 0u)
        {
            _2987 = _2866;
            _2989 = _2868;
            _2991 = _2870;
            _2993 = _2872;
            _2995 = _2874;
            _2997 = _2876;
        }
        else
        {
            float _3012 = inversesqrt(dot(vec3(_1864, _1865, _1866), vec3(_1864, _1865, _1866)));
            float _3013 = _3012 * _1864;
            float _3014 = _3012 * _1865;
            float _3015 = _3012 * _1866;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_2883 < ((_2881 >> 12u) & 15u))
            {
                float _2988;
                float _2990;
                float _2992;
                float _2994;
                float _2996;
                float _2998;
                float _3147 = _2866;
                float _3148 = _2868;
                float _3149 = _2870;
                float _3150 = _2872;
                float _3151 = _2874;
                float _3152 = _2876;
                uint _3153 = _2883;
                uint _3162;
                bool _3163;
                for (;;)
                {
                    _3162 = texelFetch(g_lightClassification, int((((_2780 << 5u) + (_2766 << 9u)) + (_3153 << 2u)) >> 2u)).x;
                    _3163 = _3162 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    float frontier_phi_82_pred_3;
                    float frontier_phi_82_pred_4;
                    float frontier_phi_82_pred_5;
                    if (_3163)
                    {
                        frontier_phi_82_pred = _3152;
                        frontier_phi_82_pred_1 = _3151;
                        frontier_phi_82_pred_2 = _3150;
                        frontier_phi_82_pred_3 = _3149;
                        frontier_phi_82_pred_4 = _3148;
                        frontier_phi_82_pred_5 = _3147;
                    }
                    else
                    {
                        float _3355;
                        float _3356;
                        float _3357;
                        float _3358;
                        float _3359;
                        float _3360;
                        float _3648;
                        float _3649;
                        float _3650;
                        float _3651;
                        float _3652;
                        float _3653;
                        float _3368 = _3147;
                        float _3369 = _3148;
                        float _3370 = _3149;
                        float _3371 = _3150;
                        float _3372 = _3151;
                        float _3373 = _3152;
                        uint _3374 = _3162;
                        uint _3375;
                        vec4 _3400;
                        float _3401;
                        vec4 _3416;
                        vec3 _3428;
                        vec4 _3443;
                        vec4 _3458;
                        float _3504;
                        bool _3505;
                        for (;;)
                        {
                            uint _3385 = ((_3153 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3374));
                            _3375 = (_3374 + 4294967295u) & _3374;
                            uint _3387 = _3385 * 40u;
                            _3400 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3387)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3387 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3387 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3387 + 3u)).x));
                            _3401 = _3400.w;
                            uint _3403 = (_3385 * 40u) + 4u;
                            _3416 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3403)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3403 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3403 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3403 + 3u)).x));
                            uint _3418 = (_3385 * 40u) + 8u;
                            _3428 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3418)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3418 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3418 + 2u)).x));
                            uint _3430 = (_3385 * 40u) + 16u;
                            _3443 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3430)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3430 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3430 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3430 + 3u)).x));
                            uint _3445 = (_3385 * 40u) + 20u;
                            _3458 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3445)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3445 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3445 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3445 + 3u)).x));
                            uint _3460 = (_3385 * 40u) + 24u;
                            vec4 _3473 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3460)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3460 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3460 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3460 + 3u)).x));
                            uint _3479 = (_3385 * 40u) + 28u;
                            vec4 _3492 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3479)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3479 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3479 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3479 + 3u)).x));
                            _3504 = fma(_1866, _3492.z, fma(_1865, _3492.y, _3492.x * _1864)) + _3492.w;
                            _3505 = !((fma(_1866, _3473.z, fma(_1865, _3473.y, _3473.x * _1864)) + _3473.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_3505)
                            {
                                float _3532 = _3400.x - _1864;
                                float _3533 = _3400.y - _1865;
                                float _3534 = _3400.z - _1866;
                                float _3535 = dot(vec3(_3532, _3533, _3534), vec3(_3532, _3533, _3534));
                                float _3538 = inversesqrt(_3535);
                                float _3539 = _3538 * _3532;
                                float _3540 = _3538 * _3533;
                                float _3541 = _3538 * _3534;
                                float _3545 = 1.0 - (_3535 / (_3401 * _3401));
                                float _4723 = isnan(0.0) ? _3545 : (isnan(_3545) ? 0.0 : max(_3545, 0.0));
                                float _3546 = isnan(1.0) ? _4723 : (isnan(_4723) ? 1.0 : min(_4723, 1.0));
                                float _3550 = sqrt(_3535) * _3416.w;
                                float _3552 = 1.39999997615814208984375 / (_3550 + 1.39999997615814208984375);
                                float _3553 = _3552 * _3552;
                                float _3556 = ((1.0 - _3553) * dot(vec3(_3539, _3540, _3541), vec3(_715, _718, _721))) + _3553;
                                float _3559 = _3550 * _3550;
                                float _3563 = (fma(_1866, _3443.z, fma(_1865, _3443.y, _3443.x * _1864)) + _3443.w) / _3504;
                                float _3564 = (fma(_1866, _3458.z, fma(_1865, _3458.y, _3458.x * _1864)) + _3458.w) / _3504;
                                float _3568 = 1.0 - dot(vec2(_3563, _3564), vec2(_3563, _3564));
                                float _4739 = isnan(0.0) ? _3568 : (isnan(_3568) ? 0.0 : max(_3568, 0.0));
                                float _3569 = isnan(1.0) ? _4739 : (isnan(_4739) ? 1.0 : min(_4739, 1.0));
                                float _3570 = _3569 * (((isnan(0.0) ? _3556 : (isnan(_3556) ? 0.0 : max(_3556, 0.0))) * _3546) / ((_3559 * 0.699999988079071044921875) + 1.0));
                                float _3582 = exp2(log2(1.0 / ((_3559 * 3.5) + 5.0)) * 0.25);
                                float _3583 = 1.0 - _775;
                                float _3590 = sqrt(1.0 - ((1.0 - (_3583 * _3583)) * (1.0 - (_3582 * _3582))));
                                float _3591 = _3590 * _3590;
                                float _3592 = _3591 * _3591;
                                float _3593 = _3539 - _3013;
                                float _3594 = _3540 - _3014;
                                float _3595 = _3541 - _3015;
                                float _3599 = inversesqrt(dot(vec3(_3593, _3594, _3595), vec3(_3593, _3594, _3595)));
                                float _3603 = dot(vec3(_715, _718, _721), vec3((-0.0) - _3013, (-0.0) - _3014, (-0.0) - _3015));
                                float _4750 = isnan(0.0) ? _3603 : (isnan(_3603) ? 0.0 : max(_3603, 0.0));
                                float _3606 = isnan(1.0) ? _4750 : (isnan(_4750) ? 1.0 : min(_4750, 1.0));
                                float _3607 = dot(vec3(_715, _718, _721), vec3(_3599 * _3593, _3599 * _3594, _3599 * _3595));
                                float _4761 = isnan(0.0) ? _3607 : (isnan(_3607) ? 0.0 : max(_3607, 0.0));
                                float _3610 = isnan(1.0) ? _4761 : (isnan(_4761) ? 1.0 : min(_4761, 1.0));
                                float _3614 = ((_3610 * _3610) * (_3592 + (-1.0))) + 1.0;
                                float _3615 = _3552 * _3591;
                                float _3616 = _3615 * _3615;
                                float _3622 = ((1.0 - _3616) * dot(vec3(_715, _718, _721), vec3(_3539, _3540, _3541))) + _3616;
                                float _4772 = isnan(0.0) ? _3622 : (isnan(_3622) ? 0.0 : max(_3622, 0.0));
                                float _3623 = isnan(1.0) ? _4772 : (isnan(_4772) ? 1.0 : min(_4772, 1.0));
                                float _3624 = 1.0 - _3591;
                                float _3634 = (0.5 / (((_3623 * ((_3606 * _3624) + _3591)) + 9.9999999392252902907785028219223e-09) + (((_3623 * _3624) + _3591) * _3606))) * _3623;
                                float _4783 = isnan(0.0) ? _3634 : (isnan(_3634) ? 0.0 : max(_3634, 0.0));
                                float _3644 = (_3569 * _3546) * (((_3592 * 3.1415927410125732421875) * (isnan(1.0) ? _4783 : (isnan(_4783) ? 1.0 : min(_4783, 1.0)))) / ((_3614 * _3614) * ((_3559 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_88_pred = _3570 * _3416.z;
                                frontier_phi_88_pred_1 = _3570 * _3416.y;
                                frontier_phi_88_pred_2 = _3570 * _3416.x;
                                frontier_phi_88_pred_3 = _3644 * _3428.z;
                                frontier_phi_88_pred_4 = _3644 * _3428.y;
                                frontier_phi_88_pred_5 = _3644 * _3428.x;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _3653 = frontier_phi_88_pred;
                            _3652 = frontier_phi_88_pred_1;
                            _3651 = frontier_phi_88_pred_2;
                            _3650 = frontier_phi_88_pred_3;
                            _3649 = frontier_phi_88_pred_4;
                            _3648 = frontier_phi_88_pred_5;
                            _3358 = _3651 + _3371;
                            _3359 = _3652 + _3372;
                            _3360 = _3653 + _3373;
                            _3355 = _3648 + _3368;
                            _3356 = _3649 + _3369;
                            _3357 = _3650 + _3370;
                            if (_3375 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3368 = _3355;
                                _3369 = _3356;
                                _3370 = _3357;
                                _3371 = _3358;
                                _3372 = _3359;
                                _3373 = _3360;
                                _3374 = _3375;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _3360;
                        frontier_phi_82_pred_1 = _3359;
                        frontier_phi_82_pred_2 = _3358;
                        frontier_phi_82_pred_3 = _3357;
                        frontier_phi_82_pred_4 = _3356;
                        frontier_phi_82_pred_5 = _3355;
                    }
                    _2998 = frontier_phi_82_pred;
                    _2996 = frontier_phi_82_pred_1;
                    _2994 = frontier_phi_82_pred_2;
                    _2992 = frontier_phi_82_pred_3;
                    _2990 = frontier_phi_82_pred_4;
                    _2988 = frontier_phi_82_pred_5;
                    uint _3154 = _3153 + 1u;
                    if (_3154 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3147 = _2988;
                        _3148 = _2990;
                        _3149 = _2992;
                        _3150 = _2994;
                        _3151 = _2996;
                        _3152 = _2998;
                        _3153 = _3154;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _2994;
                frontier_phi_63_64_ladder_1 = _2998;
                frontier_phi_63_64_ladder_2 = _2996;
                frontier_phi_63_64_ladder_3 = _2992;
                frontier_phi_63_64_ladder_4 = _2990;
                frontier_phi_63_64_ladder_5 = _2988;
            }
            else
            {
                frontier_phi_63_64_ladder = _2872;
                frontier_phi_63_64_ladder_1 = _2876;
                frontier_phi_63_64_ladder_2 = _2874;
                frontier_phi_63_64_ladder_3 = _2870;
                frontier_phi_63_64_ladder_4 = _2868;
                frontier_phi_63_64_ladder_5 = _2866;
            }
            _2987 = frontier_phi_63_64_ladder_5;
            _2989 = frontier_phi_63_64_ladder_4;
            _2991 = frontier_phi_63_64_ladder_3;
            _2993 = frontier_phi_63_64_ladder;
            _2995 = frontier_phi_63_64_ladder_2;
            _2997 = frontier_phi_63_64_ladder_1;
        }
        float _3002 = isnan(1.0) ? _759 : (isnan(_759) ? 1.0 : min(_759, 1.0));
        _2799 = (_3002 * _2993) + _2330;
        _2801 = (_3002 * _2995) + _2332;
        _2803 = (_3002 * _2997) + _2334;
        _2805 = ((_2987 * 0.039999999105930328369140625) * _3002) + _2653;
        _2807 = ((_2989 * 0.039999999105930328369140625) * _3002) + _2655;
        _2809 = ((_2991 * 0.039999999105930328369140625) * _3002) + _2657;
    }
    else
    {
        _2799 = _2330;
        _2801 = _2332;
        _2803 = _2334;
        _2805 = _2653;
        _2807 = _2655;
        _2809 = _2657;
    }
    float _4799 = isnan(0.0) ? _744 : (isnan(_744) ? 0.0 : max(_744, 0.0));
    float _4810 = isnan(0.0) ? _745 : (isnan(_745) ? 0.0 : max(_745, 0.0));
    float _4821 = isnan(0.0) ? _746 : (isnan(_746) ? 0.0 : max(_746, 0.0));
    float _2826 = ((isnan(1.0) ? _4799 : (isnan(_4799) ? 1.0 : min(_4799, 1.0))) * (_2799 + ((isnan(0.0) ? _1517 : (isnan(_1517) ? 0.0 : max(_1517, 0.0))) * _759))) + ((_2805 + ((isnan(0.0) ? _1811 : (isnan(_1811) ? 0.0 : max(_1811, 0.0))) * _1596)) * cbPerFrame._m0[3u].x);
    float _2827 = ((isnan(1.0) ? _4810 : (isnan(_4810) ? 1.0 : min(_4810, 1.0))) * (_2801 + ((isnan(0.0) ? _1520 : (isnan(_1520) ? 0.0 : max(_1520, 0.0))) * _759))) + ((_2807 + ((isnan(0.0) ? _1814 : (isnan(_1814) ? 0.0 : max(_1814, 0.0))) * _1596)) * cbPerFrame._m0[3u].x);
    float _2828 = ((isnan(1.0) ? _4821 : (isnan(_4821) ? 1.0 : min(_4821, 1.0))) * (_2803 + ((isnan(0.0) ? _1523 : (isnan(_1523) ? 0.0 : max(_1523, 0.0))) * _759))) + ((_2809 + ((isnan(0.0) ? _1817 : (isnan(_1817) ? 0.0 : max(_1817, 0.0))) * _1596)) * cbPerFrame._m0[3u].x);
    uint _2829 = _264 + 6u;
    float _2837 = _696 / cbSceneParam._m0[86u].x;
    float _2838 = _697 / cbSceneParam._m0[86u].y;
    vec4 _2852 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2837, _2838, (log2((isnan(cbSceneParam._m0[77u].w) ? _617 : (isnan(_617) ? cbSceneParam._m0[77u].w : min(_617, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2854 = _2852.x;
    float _2855 = _2852.y;
    float _2856 = _2852.z;
    float _2857 = _2852.w;
    float _2929;
    float _2931;
    float _2933;
    float _2935;
    if (_617 > cbSceneParam._m0[78u].w)
    {
        float _2891 = isnan(_617) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _617 : min(cbSceneParam._m0[80u].w, _617));
        float _2892 = _2891 / _617;
        float _2903 = _2892 * _669;
        float _2904 = _670 * _2892;
        float _2905 = (-0.0) - _2904;
        float _2907 = _2892 * _671;
        float _2909 = (cbSceneParam._m0[77u].w * _2905) / _2891;
        float _2910 = _2909 + cbSceneParam._m0[79u].w;
        float _2911 = cbSceneParam._m0[79u].w - _2904;
        float _2917 = sqrt(((_2903 * _2903) + (_2904 * _2904)) + (_2907 * _2907));
        float _2920 = (1.0 - (cbSceneParam._m0[77u].w / _2891)) * _2917;
        float _2925 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2927 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3104;
        if (abs((_2905 - _2909) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3104 = ((((_2910 > 0.0) ? exp2(_2925 * _2910) : (2.0 - exp2(_2927 * _2910))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2920;
        }
        else
        {
            float _3048 = 1.0 / cbSceneParam._m0[80u].x;
            float _3049 = isnan(_2911) ? _2910 : (isnan(_2910) ? _2911 : max(_2910, _2911));
            float _3050 = isnan(_2911) ? _2910 : (isnan(_2910) ? _2911 : min(_2910, _2911));
            float _3059 = isnan(0.0) ? _3049 : (isnan(_3049) ? 0.0 : min(_3049, 0.0));
            float _3060 = isnan(0.0) ? _3050 : (isnan(_3050) ? 0.0 : min(_3050, 0.0));
            _3104 = ((abs(_2917 / _2905) * cbSceneParam._m0[80u].y) * ((((_3059 - _3060) * 2.0) - ((exp2(_2925 * (isnan(0.0) ? _3049 : (isnan(_3049) ? 0.0 : max(_3049, 0.0)))) - exp2(_2925 * (isnan(0.0) ? _3050 : (isnan(_3050) ? 0.0 : max(_3050, 0.0))))) * _3048)) - ((exp2(_2927 * _3059) - exp2(_2927 * _3060)) * _3048))) + (_2920 * cbSceneParam._m0[80u].z);
        }
        vec4 _3106 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2837, _2838, 1.0), 0.0);
        float _3115 = exp2((_3104 * (-1.44269502162933349609375)) * (1.0 - _3106.w));
        float _3116 = log2(_3115);
        float _3132 = log2(_2857);
        _2929 = (exp2(_3132 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3116 * cbSceneParam._m0[78u].x)) * _3106.x) / cbSceneParam._m0[78u].x)) + _2854;
        _2931 = (exp2(_3132 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3116 * cbSceneParam._m0[78u].y)) * _3106.y) / cbSceneParam._m0[78u].y)) + _2855;
        _2933 = (exp2(_3132 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3116 * cbSceneParam._m0[78u].z)) * _3106.z) / cbSceneParam._m0[78u].z)) + _2856;
        _2935 = _3115 * _2857;
    }
    else
    {
        _2929 = _2854;
        _2931 = _2855;
        _2933 = _2856;
        _2935 = _2857;
    }
    bool _3142;
    vec4 _2945;
    vec4 _2967;
    float _2969;
    float _2973;
    float _2974;
    float _2975;
    float _2976;
    bool _2986;
    for (;;)
    {
        _2945 = cbMatDynParam._m0[0u];
        float _2947 = roundEven(_2945.y);
        bool _2948 = _2947 == 3.0;
        float _2949 = log2(_2935);
        float _2956 = exp2(_2949 * cbSceneParam._m0[78u].x) * _2826;
        float _2957 = exp2(_2949 * cbSceneParam._m0[78u].y) * _2827;
        float _2958 = exp2(_2949 * cbSceneParam._m0[78u].z) * _2828;
        float _2965 = _685 + (-0.5);
        _2967 = cbMtdParam._m0[1u];
        _2969 = _2967.y * _2965;
        float _2972 = (_2947 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2973 = _2972 * (_2948 ? _2956 : (_2956 + (cbSceneParam._m0[72u].w * _2929)));
        _2974 = _2972 * (_2948 ? _2957 : (_2957 + (cbSceneParam._m0[72u].w * _2931)));
        _2975 = _2972 * (_2948 ? _2958 : (_2958 + (cbSceneParam._m0[72u].w * _2933)));
        _2976 = _2965 * 0.999000012874603271484375;
        _2986 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2986)
        {
            if ((cbInstanceData._m0[_264 + 7u].x + _2976) < 0.5)
            {
                _3142 = true;
                break;
            }
        }
        uint _3083 = _734 + uint(_2945.w);
        if ((cbInstanceData._m0[_3083].w < 1.0) && ((cbInstanceData._m0[_3083].w + _2976) < 0.5))
        {
            _3142 = true;
            break;
        }
        if ((_2969 + 1.0) < _2967.x)
        {
            _3142 = true;
            break;
        }
        _3142 = false;
        break;
    }
    float _3346;
    if (_3142)
    {
        discard_state = true;
        _3346 = 0.0;
    }
    else
    {
        _3346 = cbInstanceData._m0[_2829].w;
    }
    SV_Target.x = _2973;
    SV_Target.y = _2974;
    SV_Target.z = _2975;
    SV_Target.w = _3346;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2829].w;
    discard_exit();
}


