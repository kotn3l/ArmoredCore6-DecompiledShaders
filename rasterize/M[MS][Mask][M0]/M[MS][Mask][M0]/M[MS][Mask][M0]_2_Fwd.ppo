#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_0;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_6;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1047;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _198 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _199 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _200 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _206 = inversesqrt(dot(vec3(_198, _199, _200), vec3(_198, _199, _200)));
    float _213 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _220 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _226 = uint(roundEven(NORMAL.w)) * 13u;
    uint _232 = _226 + 1u;
    uint _236 = _226 + 2u;
    float _245 = sqrt(((cbInstanceData._m0[_232].x * cbInstanceData._m0[_232].x) + (cbInstanceData._m0[_226].x * cbInstanceData._m0[_226].x)) + (cbInstanceData._m0[_236].x * cbInstanceData._m0[_236].x));
    float _246 = _245 * TEXCOORD.z;
    float _247 = _245 * TEXCOORD.w;
    vec4 _266 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _290 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _295 = _290.x * cbMtdParam._m0[11u].x;
    float _296 = _290.y * cbMtdParam._m0[11u].y;
    float _297 = _290.z * cbMtdParam._m0[11u].z;
    vec4 _316 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _246) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _247) + cbTextureTilingScale._m0[5u].w));
    vec4 _370 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _372 = _370.x;
    float _384 = dot(vec4(_372, _370.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _401 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w)).x) * 2.0) - ((((_372 - _384) * cbMtdParam._m0[24u].z) + _384) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3356 = isnan(0.0) ? _401 : (isnan(_401) ? 0.0 : max(_401, 0.0));
    float _402 = isnan(1.0) ? _3356 : (isnan(_3356) ? 1.0 : min(_3356, 1.0));
    float _415 = ((cbMtdParam._m0[9u].x * 4.55000019073486328125) * _266.x) * ((_402 * ((_316.x * cbMtdParam._m0[12u].x) - _295)) + _295);
    float _418 = ((cbMtdParam._m0[9u].y * 4.55000019073486328125) * _266.y) * ((_402 * ((_316.y * cbMtdParam._m0[12u].y) - _296)) + _296);
    float _421 = ((cbMtdParam._m0[9u].z * 4.55000019073486328125) * _266.z) * ((_402 * ((_316.z * cbMtdParam._m0[12u].z) - _297)) + _297);
    vec4 _434 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _246) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _247) + cbTextureTilingScale._m0[4u].w));
    vec4 _451 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _453 = _451.x;
    float _454 = _451.y;
    float _455 = _451.z;
    float _464 = ((_434.z - _455) * _402) + _455;
    float _467 = ((((_434.x - _453) * _402) + _453) * 2.0) + (-1.0);
    float _469 = ((((_434.y - _454) * _402) + _454) * 2.0) + (-1.0);
    float _470 = dot(vec2(_467, _469), vec2(_467, _469));
    float _3367 = isnan(0.0) ? _470 : (isnan(_470) ? 0.0 : max(_470, 0.0));
    float _475 = sqrt(1.0 - (isnan(1.0) ? _3367 : (isnan(_3367) ? 1.0 : min(_3367, 1.0))));
    vec4 _491 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _503 = (((_491.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _467;
    float _504 = (((_491.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _469;
    float _508 = (cbMtdParam._m0[19u].w * (_491.z - _464)) + _464;
    float _512 = cbMtdParam._m0[22u].x + _491.w;
    float _515 = fma(_475, _213 * NORMAL.x, fma(_504, _220 * TANGENT.x, (_206 * _198) * _503));
    float _518 = fma(_475, _213 * NORMAL.y, fma(_504, _220 * TANGENT.y, (_206 * _199) * _503));
    float _521 = fma(_475, _213 * NORMAL.z, fma(_504, _220 * TANGENT.z, (_206 * _200) * _503));
    float _525 = inversesqrt(dot(vec3(_515, _518, _521), vec3(_515, _518, _521)));
    float _526 = _525 * _515;
    float _527 = _525 * _518;
    float _528 = _525 * _521;
    float _3378 = isnan(0.0) ? _508 : (isnan(_508) ? 0.0 : max(_508, 0.0));
    float _529 = isnan(1.0) ? _3378 : (isnan(_3378) ? 1.0 : min(_3378, 1.0));
    float _3389 = isnan(0.0) ? _512 : (isnan(_512) ? 0.0 : max(_512, 0.0));
    float _3400 = isnan(0.0) ? _415 : (isnan(_415) ? 0.0 : max(_415, 0.0));
    float _3411 = isnan(0.0) ? _418 : (isnan(_418) ? 0.0 : max(_418, 0.0));
    float _3422 = isnan(0.0) ? _421 : (isnan(_421) ? 0.0 : max(_421, 0.0));
    float _547 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _588 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _598 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _588);
    float _599 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _588);
    float _600 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _588);
    float _604 = inversesqrt(dot(vec3(_598, _599, _600), vec3(_598, _599, _600)));
    float _605 = _598 * _604;
    float _606 = _599 * _604;
    float _607 = _600 * _604;
    float _613 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _614 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _632 = fma(_528, cbSceneParam._m0[5u].z, fma(_527, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _526));
    float _635 = fma(_528, cbSceneParam._m0[6u].z, fma(_527, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _526));
    float _638 = fma(_528, cbSceneParam._m0[7u].z, fma(_527, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _526));
    uint _652 = (_226 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _658 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3400 : (isnan(_3400) ? 1.0 : min(_3400, 1.0)))) * cbInstanceData._m0[_652].x;
    float _659 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3411 : (isnan(_3411) ? 1.0 : min(_3411, 1.0)))) * cbInstanceData._m0[_652].y;
    float _660 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3422 : (isnan(_3422) ? 1.0 : min(_3422, 1.0)))) * cbInstanceData._m0[_652].z;
    float _3433 = isnan(0.0) ? _658 : (isnan(_658) ? 0.0 : max(_658, 0.0));
    float _661 = isnan(1.0) ? _3433 : (isnan(_3433) ? 1.0 : min(_3433, 1.0));
    float _3444 = isnan(0.0) ? _659 : (isnan(_659) ? 0.0 : max(_659, 0.0));
    float _662 = isnan(1.0) ? _3444 : (isnan(_3444) ? 1.0 : min(_3444, 1.0));
    float _3455 = isnan(0.0) ? _660 : (isnan(_660) ? 0.0 : max(_660, 0.0));
    float _663 = isnan(1.0) ? _3455 : (isnan(_3455) ? 1.0 : min(_3455, 1.0));
    vec4 _672 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _613, cbSceneParam._m0[86u].y * _614));
    float _676 = ((isnan(1.0) ? _3389 : (isnan(_3389) ? 1.0 : min(_3389, 1.0))) * TEXCOORD_5.w) * _672.x;
    float _677 = dot(vec3(_526, _527, _528), vec3(_605, _606, _607));
    float _680 = _677 * 2.0;
    float _684 = (_680 * _526) - _605;
    float _685 = (_680 * _527) - _606;
    float _686 = (_680 * _528) - _607;
    float _690 = abs(dot(vec3(_605, _606, _607), vec3(_526, _527, _528)));
    float _3466 = isnan(0.0) ? _690 : (isnan(_690) ? 0.0 : max(_690, 0.0));
    float _692 = sqrt(_529);
    float _705 = exp2((_692 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3466 : (isnan(_3466) ? 1.0 : min(_3466, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_692 * 3.0));
    float _737 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _741 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _745 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1046;
    float _1048;
    float _1049;
    float _1050;
    float _1051;
    float _1052;
    float _1053;
    float _1054;
    float _1055;
    float _1056;
    float _1057;
    float _1058;
    float _1059;
    float _1060;
    float _1061;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _771 = fma(_745, cbModelParam._m0[26u].z, fma(_741, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _737));
        float _775 = fma(_745, cbModelParam._m0[27u].z, fma(_741, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _737));
        float _779 = fma(_745, cbModelParam._m0[28u].z, fma(_741, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _737));
        float _804 = _737 + _526;
        float _805 = _741 + _527;
        float _806 = _745 + _528;
        float _816 = fma(_806, cbModelParam._m0[26u].z, fma(_805, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _804)) - _771;
        float _817 = fma(_806, cbModelParam._m0[27u].z, fma(_805, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _804)) - _775;
        float _818 = fma(_806, cbModelParam._m0[28u].z, fma(_805, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _804)) - _779;
        float _822 = inversesqrt(dot(vec3(_816, _817, _818), vec3(_816, _817, _818)));
        float _835 = ((_822 * _816) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_771 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _836 = ((_822 * _817) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_775 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _837 = ((_822 * _818) / cbModelParam._m0[34u].z) + ((((((_779 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _840 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_835, _836, _837), 0.0);
        vec4 _847 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_835, _836, _837), 0.0);
        vec4 _854 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_835, _836, _837), 0.0);
        vec4 _861 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_835, _836, _837), 0.0);
        float _874 = exp2((_840.w + (-0.5)) * 20.0) * 2.0;
        float _875 = _874 * (_840.x + (-0.5));
        float _876 = _874 * (_840.y + (-0.5));
        float _877 = _874 * (_840.z + (-0.5));
        float _884 = exp2((_847.w + (-0.5)) * 20.0) * 2.0;
        float _885 = _884 * (_847.x + (-0.5));
        float _886 = _884 * (_847.y + (-0.5));
        float _887 = _884 * (_847.z + (-0.5));
        float _894 = exp2((_854.w + (-0.5)) * 20.0) * 2.0;
        float _895 = _894 * (_854.x + (-0.5));
        float _896 = _894 * (_854.y + (-0.5));
        float _897 = _894 * (_854.z + (-0.5));
        float _904 = exp2((_861.w + (-0.5)) * 20.0) * 2.0;
        float _905 = _904 * (_861.x + (-0.5));
        float _906 = _904 * (_861.y + (-0.5));
        float _907 = _904 * (_861.z + (-0.5));
        float _908 = isnan(0.0) ? _905 : (isnan(_905) ? 0.0 : max(_905, 0.0));
        float _909 = isnan(0.0) ? _906 : (isnan(_906) ? 0.0 : max(_906, 0.0));
        float _910 = isnan(0.0) ? _907 : (isnan(_907) ? 0.0 : max(_907, 0.0));
        float _911 = _875 * 0.5;
        float _912 = _885 * 0.5;
        float _913 = _895 * 0.5;
        float _914 = dot(vec3(_911, _912, _913), vec3(_911, _912, _913));
        float _919 = (_914 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_914);
        float _928 = (dot(vec3(_526, _527, _528), vec3(_919 * _911, _919 * _912, _919 * _913)) + 1.0) * 0.5;
        float _3492 = isnan(0.0) ? _928 : (isnan(_928) ? 0.0 : max(_928, 0.0));
        float _938 = sqrt(((_912 * _912) + (_911 * _911)) + (_913 * _913)) / (_908 + 9.9999997473787516355514526367188e-06);
        float _3503 = isnan(0.0) ? _938 : (isnan(_938) ? 0.0 : max(_938, 0.0));
        float _939 = isnan(1.0) ? _3503 : (isnan(_3503) ? 1.0 : min(_3503, 1.0));
        float _940 = _939 * 2.0;
        float _944 = (1.0 - _939) / (_939 + 1.0);
        float _3514 = isnan(0.0) ? _944 : (isnan(_944) ? 0.0 : max(_944, 0.0));
        float _945 = isnan(1.0) ? _3514 : (isnan(_3514) ? 1.0 : min(_3514, 1.0));
        float _954 = ((((1.0 - _945) * (_940 + 2.0)) * exp2(log2(isnan(1.0) ? _3492 : (isnan(_3492) ? 1.0 : min(_3492, 1.0))) * (_940 + 1.0))) + _945) * _908;
        float _955 = _876 * 0.5;
        float _956 = _886 * 0.5;
        float _957 = _896 * 0.5;
        float _958 = dot(vec3(_955, _956, _957), vec3(_955, _956, _957));
        float _963 = (_958 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_958);
        float _971 = (dot(vec3(_526, _527, _528), vec3(_963 * _955, _963 * _956, _963 * _957)) + 1.0) * 0.5;
        float _3525 = isnan(0.0) ? _971 : (isnan(_971) ? 0.0 : max(_971, 0.0));
        float _980 = sqrt(((_956 * _956) + (_955 * _955)) + (_957 * _957)) / (_909 + 9.9999997473787516355514526367188e-06);
        float _3536 = isnan(0.0) ? _980 : (isnan(_980) ? 0.0 : max(_980, 0.0));
        float _981 = isnan(1.0) ? _3536 : (isnan(_3536) ? 1.0 : min(_3536, 1.0));
        float _982 = _981 * 2.0;
        float _986 = (1.0 - _981) / (_981 + 1.0);
        float _3547 = isnan(0.0) ? _986 : (isnan(_986) ? 0.0 : max(_986, 0.0));
        float _987 = isnan(1.0) ? _3547 : (isnan(_3547) ? 1.0 : min(_3547, 1.0));
        float _996 = ((((1.0 - _987) * (_982 + 2.0)) * exp2(log2(isnan(1.0) ? _3525 : (isnan(_3525) ? 1.0 : min(_3525, 1.0))) * (_982 + 1.0))) + _987) * _909;
        float _997 = _877 * 0.5;
        float _998 = _887 * 0.5;
        float _999 = _897 * 0.5;
        float _1000 = dot(vec3(_997, _998, _999), vec3(_997, _998, _999));
        float _1005 = (_1000 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1000);
        float _1013 = (dot(vec3(_526, _527, _528), vec3(_1005 * _997, _1005 * _998, _1005 * _999)) + 1.0) * 0.5;
        float _3558 = isnan(0.0) ? _1013 : (isnan(_1013) ? 0.0 : max(_1013, 0.0));
        float _1022 = sqrt(((_998 * _998) + (_997 * _997)) + (_999 * _999)) / (_910 + 9.9999997473787516355514526367188e-06);
        float _3569 = isnan(0.0) ? _1022 : (isnan(_1022) ? 0.0 : max(_1022, 0.0));
        float _1023 = isnan(1.0) ? _3569 : (isnan(_3569) ? 1.0 : min(_3569, 1.0));
        float _1024 = _1023 * 2.0;
        float _1028 = (1.0 - _1023) / (_1023 + 1.0);
        float _3580 = isnan(0.0) ? _1028 : (isnan(_1028) ? 0.0 : max(_1028, 0.0));
        float _1029 = isnan(1.0) ? _3580 : (isnan(_3580) ? 1.0 : min(_3580, 1.0));
        float _1038 = ((((1.0 - _1029) * (_1024 + 2.0)) * exp2(log2(isnan(1.0) ? _3558 : (isnan(_3558) ? 1.0 : min(_3558, 1.0))) * (_1024 + 1.0))) + _1029) * _910;
        _1046 = _877;
        _1048 = _876;
        _1049 = _875;
        _1050 = _887;
        _1051 = _886;
        _1052 = _885;
        _1053 = _897;
        _1054 = _896;
        _1055 = _895;
        _1056 = _910;
        _1057 = _909;
        _1058 = _908;
        _1059 = cbModelParam._m0[36u].z * (isnan(0.0) ? _954 : (isnan(_954) ? 0.0 : max(_954, 0.0)));
        _1060 = cbModelParam._m0[36u].z * (isnan(0.0) ? _996 : (isnan(_996) ? 0.0 : max(_996, 0.0)));
        _1061 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1038 : (isnan(_1038) ? 0.0 : max(_1038, 0.0)));
    }
    else
    {
        _1046 = _1047;
        _1048 = _1047;
        _1049 = _1047;
        _1050 = _1047;
        _1051 = _1047;
        _1052 = _1047;
        _1053 = _1047;
        _1054 = _1047;
        _1055 = _1047;
        _1056 = _1047;
        _1057 = _1047;
        _1058 = _1047;
        _1059 = 0.0;
        _1060 = 0.0;
        _1061 = 0.0;
    }
    float _1355;
    float _1356;
    float _1357;
    float _1358;
    float _1359;
    float _1360;
    float _1361;
    float _1362;
    float _1363;
    float _1364;
    float _1365;
    float _1366;
    float _1367;
    float _1368;
    float _1369;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1086 = fma(_745, cbModelParam._m0[30u].z, fma(_741, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _737));
        float _1090 = fma(_745, cbModelParam._m0[31u].z, fma(_741, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _737));
        float _1094 = fma(_745, cbModelParam._m0[32u].z, fma(_741, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _737));
        float _1117 = _737 + _526;
        float _1118 = _741 + _527;
        float _1119 = _745 + _528;
        float _1129 = fma(_1119, cbModelParam._m0[30u].z, fma(_1118, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1117)) - _1086;
        float _1130 = fma(_1119, cbModelParam._m0[31u].z, fma(_1118, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1117)) - _1090;
        float _1131 = fma(_1119, cbModelParam._m0[32u].z, fma(_1118, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1117)) - _1094;
        float _1135 = inversesqrt(dot(vec3(_1129, _1130, _1131), vec3(_1129, _1130, _1131)));
        float _1148 = ((_1135 * _1129) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1086 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1149 = ((_1135 * _1130) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1090 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1150 = ((_1135 * _1131) / cbModelParam._m0[35u].z) + ((((((_1094 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1152 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1148, _1149, _1150), 0.0);
        vec4 _1159 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1148, _1149, _1150), 0.0);
        vec4 _1166 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1148, _1149, _1150), 0.0);
        vec4 _1173 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1148, _1149, _1150), 0.0);
        float _1185 = exp2((_1152.w + (-0.5)) * 20.0) * 2.0;
        float _1186 = _1185 * (_1152.x + (-0.5));
        float _1187 = _1185 * (_1152.y + (-0.5));
        float _1188 = _1185 * (_1152.z + (-0.5));
        float _1195 = exp2((_1159.w + (-0.5)) * 20.0) * 2.0;
        float _1196 = _1195 * (_1159.x + (-0.5));
        float _1197 = _1195 * (_1159.y + (-0.5));
        float _1198 = _1195 * (_1159.z + (-0.5));
        float _1205 = exp2((_1166.w + (-0.5)) * 20.0) * 2.0;
        float _1206 = _1205 * (_1166.x + (-0.5));
        float _1207 = _1205 * (_1166.y + (-0.5));
        float _1208 = _1205 * (_1166.z + (-0.5));
        float _1215 = exp2((_1173.w + (-0.5)) * 20.0) * 2.0;
        float _1216 = _1215 * (_1173.x + (-0.5));
        float _1217 = _1215 * (_1173.y + (-0.5));
        float _1218 = _1215 * (_1173.z + (-0.5));
        float _1219 = isnan(0.0) ? _1216 : (isnan(_1216) ? 0.0 : max(_1216, 0.0));
        float _1220 = isnan(0.0) ? _1217 : (isnan(_1217) ? 0.0 : max(_1217, 0.0));
        float _1221 = isnan(0.0) ? _1218 : (isnan(_1218) ? 0.0 : max(_1218, 0.0));
        float _1222 = _1186 * 0.5;
        float _1223 = _1196 * 0.5;
        float _1224 = _1206 * 0.5;
        float _1225 = dot(vec3(_1222, _1223, _1224), vec3(_1222, _1223, _1224));
        float _1230 = (_1225 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1225);
        float _1238 = (dot(vec3(_526, _527, _528), vec3(_1230 * _1222, _1230 * _1223, _1230 * _1224)) + 1.0) * 0.5;
        float _3621 = isnan(0.0) ? _1238 : (isnan(_1238) ? 0.0 : max(_1238, 0.0));
        float _1247 = sqrt(((_1223 * _1223) + (_1222 * _1222)) + (_1224 * _1224)) / (_1219 + 9.9999997473787516355514526367188e-06);
        float _3632 = isnan(0.0) ? _1247 : (isnan(_1247) ? 0.0 : max(_1247, 0.0));
        float _1248 = isnan(1.0) ? _3632 : (isnan(_3632) ? 1.0 : min(_3632, 1.0));
        float _1249 = _1248 * 2.0;
        float _1253 = (1.0 - _1248) / (_1248 + 1.0);
        float _3643 = isnan(0.0) ? _1253 : (isnan(_1253) ? 0.0 : max(_1253, 0.0));
        float _1254 = isnan(1.0) ? _3643 : (isnan(_3643) ? 1.0 : min(_3643, 1.0));
        float _1263 = ((((1.0 - _1254) * (_1249 + 2.0)) * exp2(log2(isnan(1.0) ? _3621 : (isnan(_3621) ? 1.0 : min(_3621, 1.0))) * (_1249 + 1.0))) + _1254) * _1219;
        float _1264 = _1187 * 0.5;
        float _1265 = _1197 * 0.5;
        float _1266 = _1207 * 0.5;
        float _1267 = dot(vec3(_1264, _1265, _1266), vec3(_1264, _1265, _1266));
        float _1272 = (_1267 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1267);
        float _1280 = (dot(vec3(_526, _527, _528), vec3(_1272 * _1264, _1272 * _1265, _1272 * _1266)) + 1.0) * 0.5;
        float _3654 = isnan(0.0) ? _1280 : (isnan(_1280) ? 0.0 : max(_1280, 0.0));
        float _1289 = sqrt(((_1265 * _1265) + (_1264 * _1264)) + (_1266 * _1266)) / (_1220 + 9.9999997473787516355514526367188e-06);
        float _3665 = isnan(0.0) ? _1289 : (isnan(_1289) ? 0.0 : max(_1289, 0.0));
        float _1290 = isnan(1.0) ? _3665 : (isnan(_3665) ? 1.0 : min(_3665, 1.0));
        float _1291 = _1290 * 2.0;
        float _1295 = (1.0 - _1290) / (_1290 + 1.0);
        float _3676 = isnan(0.0) ? _1295 : (isnan(_1295) ? 0.0 : max(_1295, 0.0));
        float _1296 = isnan(1.0) ? _3676 : (isnan(_3676) ? 1.0 : min(_3676, 1.0));
        float _1305 = ((((1.0 - _1296) * (_1291 + 2.0)) * exp2(log2(isnan(1.0) ? _3654 : (isnan(_3654) ? 1.0 : min(_3654, 1.0))) * (_1291 + 1.0))) + _1296) * _1220;
        float _1306 = _1188 * 0.5;
        float _1307 = _1198 * 0.5;
        float _1308 = _1208 * 0.5;
        float _1309 = dot(vec3(_1306, _1307, _1308), vec3(_1306, _1307, _1308));
        float _1314 = (_1309 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1309);
        float _1322 = (dot(vec3(_526, _527, _528), vec3(_1314 * _1306, _1314 * _1307, _1314 * _1308)) + 1.0) * 0.5;
        float _3687 = isnan(0.0) ? _1322 : (isnan(_1322) ? 0.0 : max(_1322, 0.0));
        float _1331 = sqrt(((_1307 * _1307) + (_1306 * _1306)) + (_1308 * _1308)) / (_1221 + 9.9999997473787516355514526367188e-06);
        float _3698 = isnan(0.0) ? _1331 : (isnan(_1331) ? 0.0 : max(_1331, 0.0));
        float _1332 = isnan(1.0) ? _3698 : (isnan(_3698) ? 1.0 : min(_3698, 1.0));
        float _1333 = _1332 * 2.0;
        float _1337 = (1.0 - _1332) / (_1332 + 1.0);
        float _3709 = isnan(0.0) ? _1337 : (isnan(_1337) ? 0.0 : max(_1337, 0.0));
        float _1338 = isnan(1.0) ? _3709 : (isnan(_3709) ? 1.0 : min(_3709, 1.0));
        float _1347 = ((((1.0 - _1338) * (_1333 + 2.0)) * exp2(log2(isnan(1.0) ? _3687 : (isnan(_3687) ? 1.0 : min(_3687, 1.0))) * (_1333 + 1.0))) + _1338) * _1221;
        _1355 = _1188;
        _1356 = _1187;
        _1357 = _1186;
        _1358 = _1198;
        _1359 = _1197;
        _1360 = _1196;
        _1361 = _1208;
        _1362 = _1207;
        _1363 = _1206;
        _1364 = _1221;
        _1365 = _1220;
        _1366 = _1219;
        _1367 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1263 : (isnan(_1263) ? 0.0 : max(_1263, 0.0)));
        _1368 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1305 : (isnan(_1305) ? 0.0 : max(_1305, 0.0)));
        _1369 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1347 : (isnan(_1347) ? 0.0 : max(_1347, 0.0)));
    }
    else
    {
        _1355 = _1047;
        _1356 = _1047;
        _1357 = _1047;
        _1358 = _1047;
        _1359 = _1047;
        _1360 = _1047;
        _1361 = _1047;
        _1362 = _1047;
        _1363 = _1047;
        _1364 = _1047;
        _1365 = _1047;
        _1366 = _1047;
        _1367 = 0.0;
        _1368 = 0.0;
        _1369 = 0.0;
    }
    float _1379 = (cbModelParam._m0[1u].x * (_1367 - _1059)) + _1059;
    float _1380 = (cbModelParam._m0[1u].x * (_1368 - _1060)) + _1060;
    float _1381 = (cbModelParam._m0[1u].x * (_1369 - _1061)) + _1061;
    float _1402 = fma(_1381, cbSceneParam._m0[89u].z, fma(_1380, cbSceneParam._m0[89u].y, _1379 * cbSceneParam._m0[89u].x));
    float _1405 = fma(_1381, cbSceneParam._m0[90u].z, fma(_1380, cbSceneParam._m0[90u].y, _1379 * cbSceneParam._m0[90u].x));
    float _1408 = fma(_1381, cbSceneParam._m0[91u].z, fma(_1380, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1379));
    float _1423 = _684 * 0.5;
    float _1424 = _685 * 0.5;
    float _1425 = _686 * 0.5;
    float _1426 = dot(vec4(_1423, _1424, _1425, 1.0), vec4(_1357, _1360, _1363, _1366));
    float _1429 = dot(vec4(_1423, _1424, _1425, 1.0), vec4(_1356, _1359, _1362, _1365));
    float _1432 = dot(vec4(_1423, _1424, _1425, 1.0), vec4(_1355, _1358, _1361, _1364));
    float _1466;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1439 = dot(vec4(_1423, _1424, _1425, 1.0), vec4(_1046, _1050, _1053, _1056));
        float _1443 = dot(vec4(_1423, _1424, _1425, 1.0), vec4(_1048, _1051, _1054, _1057));
        float _1447 = dot(vec4(_1423, _1424, _1425, 1.0), vec4(_1049, _1052, _1055, _1058));
        float _1454 = dot(vec4(cbModelParam._m0[39u]), vec4(_1423, _1424, _1425, 1.0));
        _1466 = dot(vec3(isnan(0.0) ? _1447 : (isnan(_1447) ? 0.0 : max(_1447, 0.0)), isnan(0.0) ? _1443 : (isnan(_1443) ? 0.0 : max(_1443, 0.0)), isnan(0.0) ? _1439 : (isnan(_1439) ? 0.0 : max(_1439, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1454) ? 0.0 : (isnan(0.0) ? _1454 : max(0.0, _1454))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1466 = 1.0;
    }
    float _1477;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1468 = dot(vec4(cbModelParam._m0[40u]), vec4(_1423, _1424, _1425, 1.0));
        _1477 = dot(vec3(isnan(0.0) ? _1426 : (isnan(_1426) ? 0.0 : max(_1426, 0.0)), isnan(0.0) ? _1429 : (isnan(_1429) ? 0.0 : max(_1429, 0.0)), isnan(0.0) ? _1432 : (isnan(_1432) ? 0.0 : max(_1432, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1468) ? 0.0 : (isnan(0.0) ? _1468 : max(0.0, _1468))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1477 = 1.0;
    }
    float _1481 = (_1477 * cbModelParam._m0[1u].x) + (_1466 * (1.0 - cbModelParam._m0[1u].x));
    float _1491 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _529);
    float _1492 = isnan(_1491) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1491 : min(cbModelParam._m0[25u].z, _1491));
    float _1574;
    float _1576;
    float _1578;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1541 = fma(_745, cbModelParam._m0[13u].z, fma(_741, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _737)) + cbModelParam._m0[13u].w;
        float _1545 = fma(_745, cbModelParam._m0[14u].z, fma(_741, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _737)) + cbModelParam._m0[14u].w;
        float _1549 = fma(_745, cbModelParam._m0[15u].z, fma(_741, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _737)) + cbModelParam._m0[15u].w;
        float _1552 = fma(_686, cbModelParam._m0[13u].z, fma(_685, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _684));
        float _1555 = fma(_686, cbModelParam._m0[14u].z, fma(_685, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _684));
        float _1558 = fma(_686, cbModelParam._m0[15u].z, fma(_685, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _684));
        float _1586;
        if (_1552 > 0.0)
        {
            _1586 = abs((1.0 - _1541) / _1552);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1552 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1541 + 1.0) / _1552);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1586 = frontier_phi_14_12_ladder;
        }
        float _1788;
        if (_1555 > 0.0)
        {
            _1788 = abs((1.0 - _1545) / _1555);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1555 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1545 + 1.0) / _1555);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1788 = frontier_phi_23_19_ladder;
        }
        float _2031;
        if (_1558 > 0.0)
        {
            _2031 = abs((1.0 - _1549) / _1558);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1558 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1549 + 1.0) / _1558);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2031 = frontier_phi_35_30_ladder;
        }
        float _2033 = isnan(_1788) ? _1586 : (isnan(_1586) ? _1788 : min(_1586, _1788));
        float _2034 = isnan(_2031) ? _2033 : (isnan(_2033) ? _2031 : min(_2033, _2031));
        float _2038 = (_2034 * _1552) + _1541;
        float _2039 = (_2034 * _1555) + _1545;
        float _2040 = (_2034 * _1558) + _1549;
        float _2041 = _2034 * 9.9999997473787516355514526367188e-05;
        float _2043 = (-1.0) - _2041;
        float _2045 = _2041 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2040 > _2045) || ((_2040 < _2043) || ((_2039 > _2045) || ((_2039 < _2043) || ((_2038 < _2043) || (_2038 > _2045))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2164 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2040, cbModelParam._m0[9u].z, fma(_2039, cbModelParam._m0[9u].y, _2038 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2040, cbModelParam._m0[10u].z, fma(_2039, cbModelParam._m0[10u].y, _2038 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2040, cbModelParam._m0[11u].z, fma(_2039, cbModelParam._m0[11u].y, _2038 * cbModelParam._m0[11u].x))), _1492);
            frontier_phi_13_35_ladder = _2164.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2164.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2164.x * cbModelParam._m0[1u].y;
        }
        _1574 = frontier_phi_13_35_ladder_2;
        _1576 = frontier_phi_13_35_ladder_1;
        _1578 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1562 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_684, _685, _686), _1492);
        _1574 = _1562.x * cbModelParam._m0[1u].y;
        _1576 = _1562.y * cbModelParam._m0[1u].y;
        _1578 = _1562.z * cbModelParam._m0[1u].y;
    }
    float _1582 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _529);
    float _1583 = isnan(_1582) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1582 : min(cbModelParam._m0[25u].w, _1582));
    float _1674;
    float _1676;
    float _1678;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1638 = fma(_745, cbModelParam._m0[21u].z, fma(_741, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _737)) + cbModelParam._m0[21u].w;
        float _1642 = fma(_745, cbModelParam._m0[22u].z, fma(_741, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _737)) + cbModelParam._m0[22u].w;
        float _1646 = fma(_745, cbModelParam._m0[23u].z, fma(_741, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _737)) + cbModelParam._m0[23u].w;
        float _1649 = fma(_686, cbModelParam._m0[21u].z, fma(_685, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _684));
        float _1652 = fma(_686, cbModelParam._m0[22u].z, fma(_685, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _684));
        float _1655 = fma(_686, cbModelParam._m0[23u].z, fma(_685, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _684));
        float _1793;
        if (_1649 > 0.0)
        {
            _1793 = abs((1.0 - _1638) / _1649);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1649 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1638 + 1.0) / _1649);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1793 = frontier_phi_25_21_ladder;
        }
        float _2058;
        if (_1652 > 0.0)
        {
            _2058 = abs((1.0 - _1642) / _1652);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1652 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1642 + 1.0) / _1652);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2058 = frontier_phi_37_32_ladder;
        }
        float _2263;
        if (_1655 > 0.0)
        {
            _2263 = abs((1.0 - _1646) / _1655);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1655 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1646 + 1.0) / _1655);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2263 = frontier_phi_46_43_ladder;
        }
        float _2265 = isnan(_2058) ? _1793 : (isnan(_1793) ? _2058 : min(_1793, _2058));
        float _2266 = isnan(_2263) ? _2265 : (isnan(_2265) ? _2263 : min(_2265, _2263));
        float _2270 = (_2266 * _1649) + _1638;
        float _2271 = (_2266 * _1652) + _1642;
        float _2272 = (_2266 * _1655) + _1646;
        float _2273 = _2266 * 9.9999997473787516355514526367188e-05;
        float _2274 = (-1.0) - _2273;
        float _2276 = _2273 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2272 > _2276) || ((_2272 < _2274) || ((_2271 > _2276) || ((_2271 < _2274) || ((_2270 < _2274) || (_2270 > _2276))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2471 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2272, cbModelParam._m0[17u].z, fma(_2271, cbModelParam._m0[17u].y, _2270 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2272, cbModelParam._m0[18u].z, fma(_2271, cbModelParam._m0[18u].y, _2270 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2272, cbModelParam._m0[19u].z, fma(_2271, cbModelParam._m0[19u].y, _2270 * cbModelParam._m0[19u].x))), _1583);
            frontier_phi_22_46_ladder = _2471.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2471.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2471.x * cbModelParam._m0[1u].z;
        }
        _1674 = frontier_phi_22_46_ladder_2;
        _1676 = frontier_phi_22_46_ladder_1;
        _1678 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1658 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_684, _685, _686), _1583);
        _1674 = _1658.x * cbModelParam._m0[1u].z;
        _1676 = _1658.y * cbModelParam._m0[1u].z;
        _1678 = _1658.z * cbModelParam._m0[1u].z;
    }
    float _1690 = ((((1.0 - _705) * ((_692 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_705 * _692)) * _676;
    float _1691 = _1690 * ((cbModelParam._m0[1u].w * (_1674 - _1574)) + _1574);
    float _1692 = _1690 * ((cbModelParam._m0[1u].w * (_1676 - _1576)) + _1576);
    float _1693 = _1690 * ((cbModelParam._m0[1u].w * (_1678 - _1578)) + _1578);
    float _1696 = fma(_1693, cbSceneParam._m0[89u].z, fma(_1692, cbSceneParam._m0[89u].y, _1691 * cbSceneParam._m0[89u].x));
    float _1699 = fma(_1693, cbSceneParam._m0[90u].z, fma(_1692, cbSceneParam._m0[90u].y, _1691 * cbSceneParam._m0[90u].x));
    float _1702 = fma(_1693, cbSceneParam._m0[91u].z, fma(_1692, cbSceneParam._m0[91u].y, _1691 * cbSceneParam._m0[91u].x));
    uvec4 _1712 = floatBitsToUint(cbInstanceData._m0[_226 + 5u]);
    uint _1714 = _1712.x * 14u;
    uint _1715 = _1714 + 13u;
    float _1722 = _676 + (-1.0);
    float _1727 = (cbLight._m0[_1715].x * _1722) + 1.0;
    float _1728 = (cbLight._m0[_1715].y * _1722) + 1.0;
    float _1729 = (cbLight._m0[_1715].z * _1722) + 1.0;
    float _1730 = (cbLight._m0[_1715].w * _1722) + 1.0;
    uint _1731 = _1714 + 5u;
    float _1737 = isnan(1.0) ? _1728 : (isnan(_1728) ? 1.0 : min(_1728, 1.0));
    uint _1741 = _1714 + 4u;
    float _1747 = isnan(1.0) ? _1727 : (isnan(_1727) ? 1.0 : min(_1727, 1.0));
    uint _1751 = _1714 | 1u;
    float _1762 = dot(vec3(cbLight._m0[_1714].xyz), vec3(_526, _527, _528));
    float _1765 = dot(vec3(cbLight._m0[_1751].xyz), vec3(_526, _527, _528));
    float _3845 = isnan(0.0) ? _1762 : (isnan(_1762) ? 0.0 : max(_1762, 0.0));
    float _3856 = isnan(0.0) ? _1765 : (isnan(_1765) ? 0.0 : max(_1765, 0.0));
    float _1770 = (isnan(1.0) ? _3845 : (isnan(_3845) ? 1.0 : min(_3845, 1.0))) * 0.3183098733425140380859375;
    float _1772 = (isnan(1.0) ? _3856 : (isnan(_3856) ? 1.0 : min(_3856, 1.0))) * 0.3183098733425140380859375;
    float _1779 = ((cbLight._m0[_1731].x * _1737) * _1772) + ((cbLight._m0[_1741].x * _1747) * _1770);
    float _1780 = ((_1737 * cbLight._m0[_1731].y) * _1772) + ((_1747 * cbLight._m0[_1741].y) * _1770);
    float _1781 = ((_1737 * cbLight._m0[_1731].z) * _1772) + ((_1747 * cbLight._m0[_1741].z) * _1770);
    uvec4 _1785 = floatBitsToUint(cbLight._m0[_1714 + 12u]);
    bool _1787 = _1785.x == 0u;
    float _1798;
    float _1800;
    float _1802;
    if (_1787)
    {
        _1798 = _1779;
        _1800 = _1780;
        _1802 = _1781;
    }
    else
    {
        uint _1806 = _1714 + 6u;
        float _1822 = (dot(vec3(cbLight._m0[_1714 + 2u].xyz), vec3(_526, _527, _528)) * 0.5) + 0.5;
        float _1823 = _1822 * _1822;
        float _3867 = isnan(0.0) ? _1823 : (isnan(_1823) ? 0.0 : max(_1823, 0.0));
        float _1824 = isnan(1.0) ? _3867 : (isnan(_3867) ? 1.0 : min(_3867, 1.0));
        float _1825 = isnan(1.0) ? _1729 : (isnan(_1729) ? 1.0 : min(_1729, 1.0));
        _1798 = (((cbLight._m0[_1806].x * 0.3183098733425140380859375) * _1824) * _1825) + _1779;
        _1800 = (((cbLight._m0[_1806].y * 0.3183098733425140380859375) * _1824) * _1825) + _1780;
        _1802 = (((cbLight._m0[_1806].z * 0.3183098733425140380859375) * _1824) * _1825) + _1781;
    }
    bool _1805 = _1785.y == 0u;
    float _1843;
    float _1845;
    float _1847;
    if (_1805)
    {
        _1843 = _1798;
        _1845 = _1800;
        _1847 = _1802;
    }
    else
    {
        uint _2002 = _1714 + 7u;
        float _2018 = (dot(vec3(cbLight._m0[_1714 + 3u].xyz), vec3(_526, _527, _528)) * 0.5) + 0.5;
        float _2019 = _2018 * _2018;
        float _3883 = isnan(0.0) ? _2019 : (isnan(_2019) ? 0.0 : max(_2019, 0.0));
        float _2020 = isnan(1.0) ? _3883 : (isnan(_3883) ? 1.0 : min(_3883, 1.0));
        float _2021 = isnan(1.0) ? _1730 : (isnan(_1730) ? 1.0 : min(_1730, 1.0));
        _1843 = (((cbLight._m0[_2002].x * 0.3183098733425140380859375) * _2020) * _2021) + _1798;
        _1845 = (((cbLight._m0[_2002].y * 0.3183098733425140380859375) * _2020) * _2021) + _1800;
        _1847 = (((cbLight._m0[_2002].z * 0.3183098733425140380859375) * _2020) * _2021) + _1802;
    }
    uint _1850 = _1714 + 8u;
    float _1863 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1714].w)) * _529) * 0.949999988079071044921875);
    float _1864 = _1863 * _1863;
    float _1865 = cbLight._m0[_1714].x + _605;
    float _1866 = cbLight._m0[_1714].y + _606;
    float _1867 = cbLight._m0[_1714].z + _607;
    float _1871 = inversesqrt(dot(vec3(_1865, _1866, _1867), vec3(_1865, _1866, _1867)));
    float _1872 = _1871 * _1865;
    float _1873 = _1871 * _1866;
    float _1874 = _1871 * _1867;
    float _1875 = dot(vec3(_526, _527, _528), vec3(cbLight._m0[_1714].xyz));
    float _3899 = isnan(0.0) ? _1875 : (isnan(_1875) ? 0.0 : max(_1875, 0.0));
    float _1878 = isnan(1.0) ? _3899 : (isnan(_3899) ? 1.0 : min(_3899, 1.0));
    float _3910 = isnan(0.0) ? _677 : (isnan(_677) ? 0.0 : max(_677, 0.0));
    float _1879 = isnan(1.0) ? _3910 : (isnan(_3910) ? 1.0 : min(_3910, 1.0));
    float _1880 = dot(vec3(_526, _527, _528), vec3(_1872, _1873, _1874));
    float _3921 = isnan(0.0) ? _1880 : (isnan(_1880) ? 0.0 : max(_1880, 0.0));
    float _1883 = isnan(1.0) ? _3921 : (isnan(_3921) ? 1.0 : min(_3921, 1.0));
    float _1884 = dot(vec3(cbLight._m0[_1714].xyz), vec3(_1872, _1873, _1874));
    float _3932 = isnan(0.0) ? _1884 : (isnan(_1884) ? 0.0 : max(_1884, 0.0));
    float _1888 = _1864 * _1864;
    float _1892 = ((_1883 * _1883) * (_1888 + (-1.0))) + 1.0;
    float _1903 = (exp2(log2(1.0 - (isnan(1.0) ? _3932 : (isnan(_3932) ? 1.0 : min(_3932, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1904 = 1.0 - _1864;
    float _1915 = (0.5 / (((_1879 * ((_1878 * _1904) + _1864)) + 9.9999999392252902907785028219223e-09) + (((_1879 * _1904) + _1864) * _1878))) * _1878;
    float _3943 = isnan(0.0) ? _1915 : (isnan(_1915) ? 0.0 : max(_1915, 0.0));
    float _1917 = (isnan(1.0) ? _3943 : (isnan(_3943) ? 1.0 : min(_3943, 1.0))) * (_1888 / ((_1892 * _1892) * 3.141590118408203125));
    uint _1928 = _1714 + 9u;
    float _1939 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1751].w)) * _529) * 0.949999988079071044921875);
    float _1940 = _1939 * _1939;
    float _1941 = cbLight._m0[_1751].x + _605;
    float _1942 = cbLight._m0[_1751].y + _606;
    float _1943 = cbLight._m0[_1751].z + _607;
    float _1947 = inversesqrt(dot(vec3(_1941, _1942, _1943), vec3(_1941, _1942, _1943)));
    float _1948 = _1947 * _1941;
    float _1949 = _1947 * _1942;
    float _1950 = _1947 * _1943;
    float _1951 = dot(vec3(_526, _527, _528), vec3(cbLight._m0[_1751].xyz));
    float _3954 = isnan(0.0) ? _1951 : (isnan(_1951) ? 0.0 : max(_1951, 0.0));
    float _1954 = isnan(1.0) ? _3954 : (isnan(_3954) ? 1.0 : min(_3954, 1.0));
    float _1955 = dot(vec3(_526, _527, _528), vec3(_1948, _1949, _1950));
    float _3965 = isnan(0.0) ? _1955 : (isnan(_1955) ? 0.0 : max(_1955, 0.0));
    float _1958 = isnan(1.0) ? _3965 : (isnan(_3965) ? 1.0 : min(_3965, 1.0));
    float _1959 = dot(vec3(cbLight._m0[_1751].xyz), vec3(_1948, _1949, _1950));
    float _3976 = isnan(0.0) ? _1959 : (isnan(_1959) ? 0.0 : max(_1959, 0.0));
    float _1963 = _1940 * _1940;
    float _1967 = ((_1958 * _1958) * (_1963 + (-1.0))) + 1.0;
    float _1976 = (exp2(log2(1.0 - (isnan(1.0) ? _3976 : (isnan(_3976) ? 1.0 : min(_3976, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1977 = 1.0 - _1940;
    float _1987 = (0.5 / (((_1879 * ((_1954 * _1977) + _1940)) + 9.9999999392252902907785028219223e-09) + (((_1879 * _1977) + _1940) * _1954))) * _1954;
    float _3987 = isnan(0.0) ? _1987 : (isnan(_1987) ? 0.0 : max(_1987, 0.0));
    float _1989 = (isnan(1.0) ? _3987 : (isnan(_3987) ? 1.0 : min(_3987, 1.0))) * (_1963 / ((_1967 * _1967) * 3.141590118408203125));
    float _1999 = (((_1976 * cbLight._m0[_1928].x) * _1989) * _1737) + (((_1903 * cbLight._m0[_1850].x) * _1917) * _1747);
    float _2000 = (((_1976 * cbLight._m0[_1928].y) * _1989) * _1737) + (((_1903 * cbLight._m0[_1850].y) * _1917) * _1747);
    float _2001 = (((_1976 * cbLight._m0[_1928].z) * _1989) * _1737) + (((_1903 * cbLight._m0[_1850].z) * _1917) * _1747);
    float _2063;
    float _2065;
    float _2067;
    if (_1787)
    {
        _2063 = _1999;
        _2065 = _2000;
        _2067 = _2001;
    }
    else
    {
        uint _2069 = _1714 + 2u;
        uint _2073 = _1714 + 10u;
        float _2087 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2069].w)) * _529) * 0.949999988079071044921875);
        float _2088 = _2087 * _2087;
        float _2089 = cbLight._m0[_2069].x + _605;
        float _2090 = cbLight._m0[_2069].y + _606;
        float _2091 = cbLight._m0[_2069].z + _607;
        float _2095 = inversesqrt(dot(vec3(_2089, _2090, _2091), vec3(_2089, _2090, _2091)));
        float _2096 = _2095 * _2089;
        float _2097 = _2095 * _2090;
        float _2098 = _2095 * _2091;
        float _2099 = dot(vec3(_526, _527, _528), vec3(cbLight._m0[_2069].xyz));
        float _3998 = isnan(0.0) ? _2099 : (isnan(_2099) ? 0.0 : max(_2099, 0.0));
        float _2102 = isnan(1.0) ? _3998 : (isnan(_3998) ? 1.0 : min(_3998, 1.0));
        float _2103 = dot(vec3(_526, _527, _528), vec3(_2096, _2097, _2098));
        float _4009 = isnan(0.0) ? _2103 : (isnan(_2103) ? 0.0 : max(_2103, 0.0));
        float _2106 = isnan(1.0) ? _4009 : (isnan(_4009) ? 1.0 : min(_4009, 1.0));
        float _2107 = dot(vec3(cbLight._m0[_2069].xyz), vec3(_2096, _2097, _2098));
        float _4020 = isnan(0.0) ? _2107 : (isnan(_2107) ? 0.0 : max(_2107, 0.0));
        float _2111 = _2088 * _2088;
        float _2115 = ((_2106 * _2106) * (_2111 + (-1.0))) + 1.0;
        float _2124 = (exp2(log2(1.0 - (isnan(1.0) ? _4020 : (isnan(_4020) ? 1.0 : min(_4020, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2125 = 1.0 - _2088;
        float _2135 = (0.5 / (((_1879 * ((_2102 * _2125) + _2088)) + 9.9999999392252902907785028219223e-09) + (((_1879 * _2125) + _2088) * _2102))) * _2102;
        float _4031 = isnan(0.0) ? _2135 : (isnan(_2135) ? 0.0 : max(_2135, 0.0));
        float _2137 = (isnan(1.0) ? _4031 : (isnan(_4031) ? 1.0 : min(_4031, 1.0))) * (_2111 / ((_2115 * _2115) * 3.141590118408203125));
        float _2138 = isnan(1.0) ? _1729 : (isnan(_1729) ? 1.0 : min(_1729, 1.0));
        _2063 = (((_2124 * cbLight._m0[_2073].x) * _2137) * _2138) + _1999;
        _2065 = (((_2124 * cbLight._m0[_2073].y) * _2137) * _2138) + _2000;
        _2067 = (((_2124 * cbLight._m0[_2073].z) * _2137) * _2138) + _2001;
    }
    float _2173;
    float _2175;
    float _2177;
    if (_1805)
    {
        _2173 = _2063;
        _2175 = _2065;
        _2177 = _2067;
    }
    else
    {
        uint _2184 = _1714 + 3u;
        uint _2188 = _1714 + 11u;
        float _2202 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2184].w)) * _529) * 0.949999988079071044921875);
        float _2203 = _2202 * _2202;
        float _2204 = cbLight._m0[_2184].x + _605;
        float _2205 = cbLight._m0[_2184].y + _606;
        float _2206 = cbLight._m0[_2184].z + _607;
        float _2210 = inversesqrt(dot(vec3(_2204, _2205, _2206), vec3(_2204, _2205, _2206)));
        float _2211 = _2210 * _2204;
        float _2212 = _2210 * _2205;
        float _2213 = _2210 * _2206;
        float _2214 = dot(vec3(_526, _527, _528), vec3(cbLight._m0[_2184].xyz));
        float _4047 = isnan(0.0) ? _2214 : (isnan(_2214) ? 0.0 : max(_2214, 0.0));
        float _2217 = isnan(1.0) ? _4047 : (isnan(_4047) ? 1.0 : min(_4047, 1.0));
        float _2218 = dot(vec3(_526, _527, _528), vec3(_2211, _2212, _2213));
        float _4058 = isnan(0.0) ? _2218 : (isnan(_2218) ? 0.0 : max(_2218, 0.0));
        float _2221 = isnan(1.0) ? _4058 : (isnan(_4058) ? 1.0 : min(_4058, 1.0));
        float _2222 = dot(vec3(cbLight._m0[_2184].xyz), vec3(_2211, _2212, _2213));
        float _4069 = isnan(0.0) ? _2222 : (isnan(_2222) ? 0.0 : max(_2222, 0.0));
        float _2226 = _2203 * _2203;
        float _2230 = ((_2221 * _2221) * (_2226 + (-1.0))) + 1.0;
        float _2239 = (exp2(log2(1.0 - (isnan(1.0) ? _4069 : (isnan(_4069) ? 1.0 : min(_4069, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2240 = 1.0 - _2203;
        float _2250 = (0.5 / (((_1879 * ((_2217 * _2240) + _2203)) + 9.9999999392252902907785028219223e-09) + (((_1879 * _2240) + _2203) * _2217))) * _2217;
        float _4080 = isnan(0.0) ? _2250 : (isnan(_2250) ? 0.0 : max(_2250, 0.0));
        float _2252 = (isnan(1.0) ? _4080 : (isnan(_4080) ? 1.0 : min(_4080, 1.0))) * (_2226 / ((_2230 * _2230) * 3.141590118408203125));
        float _2253 = isnan(1.0) ? _1730 : (isnan(_1730) ? 1.0 : min(_1730, 1.0));
        _2173 = (((_2239 * cbLight._m0[_2188].x) * _2252) * _2253) + _2063;
        _2175 = (((_2239 * cbLight._m0[_2188].y) * _2252) * _2253) + _2065;
        _2177 = (((_2239 * cbLight._m0[_2188].z) * _2252) * _2253) + _2067;
    }
    float _2388;
    float _2390;
    float _2392;
    float _2394;
    float _2396;
    float _2398;
    if (_1712.y == 0u)
    {
        float _2328 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2329 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2328;
        float _2330 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2328;
        float _2331 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2328;
        uvec4 _2343 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2344 = _2343.x;
        uint _2355 = uint((float(_2343.y) * floor(float(uint(cbSceneParam._m0[85u].y * _614) / _2344))) + floor(float(uint(cbSceneParam._m0[85u].x * _613) / _2344)));
        float _2365 = (log2(_2331 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2366 = isnan(0.0) ? _2365 : (isnan(_2365) ? 0.0 : max(_2365, 0.0));
        uint _2369 = uint(isnan(14.0) ? _2366 : (isnan(_2366) ? 14.0 : min(_2366, 14.0)));
        uvec4 _2374 = texelFetch(g_lightClusterGridBuffer, int(((_2369 << 2u) + (_2355 << 6u)) >> 2u));
        uint _2375 = _2374.x;
        uint _2376 = _2343.z;
        float _2476;
        float _2478;
        float _2480;
        float _2482;
        float _2484;
        float _2486;
        if (((((1u << ((_2376 >> 4u) & 15u)) + 4294967295u) & _2375) == 0u) || ((_2376 & 240u) == 0u))
        {
            _2476 = 0.0;
            _2478 = 0.0;
            _2480 = 0.0;
            _2482 = 0.0;
            _2484 = 0.0;
            _2486 = 0.0;
        }
        else
        {
            float _2477;
            float _2479;
            float _2481;
            float _2483;
            float _2485;
            float _2487;
            float _2621 = 0.0;
            float _2622 = 0.0;
            float _2623 = 0.0;
            float _2624 = 0.0;
            float _2625 = 0.0;
            float _2626 = 0.0;
            uint _2627 = 0u;
            uint _2636;
            bool _2637;
            for (;;)
            {
                _2636 = texelFetch(g_lightClassification, int((((_2369 << 5u) + (_2355 << 9u)) + (_2627 << 2u)) >> 2u)).x;
                _2637 = _2636 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2637)
                {
                    frontier_phi_61_pred = _2621;
                    frontier_phi_61_pred_1 = _2626;
                    frontier_phi_61_pred_2 = _2625;
                    frontier_phi_61_pred_3 = _2624;
                    frontier_phi_61_pred_4 = _2623;
                    frontier_phi_61_pred_5 = _2622;
                }
                else
                {
                    float _2745;
                    float _2746;
                    float _2747;
                    float _2748;
                    float _2749;
                    float _2750;
                    uint _2751;
                    _2745 = _2621;
                    _2746 = _2622;
                    _2747 = _2623;
                    _2748 = _2624;
                    _2749 = _2625;
                    _2750 = _2626;
                    _2751 = _2636;
                    float _2677;
                    float _2678;
                    float _2679;
                    float _2680;
                    float _2681;
                    float _2682;
                    for (;;)
                    {
                        uint _2755 = uint(findLSB(_2751)) + (_2627 << 5u);
                        uint _2752 = (_2751 + 4294967295u) & _2751;
                        uint _2757 = _2755 * 48u;
                        vec4 _2771 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2757)).x, texelFetch(g_PointLightRenderingBuffer, int(_2757 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2757 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2757 + 3u)).x));
                        uint _2777 = (_2755 * 48u) + 4u;
                        vec4 _2790 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2777)).x, texelFetch(g_PointLightRenderingBuffer, int(_2777 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2777 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2777 + 3u)).x));
                        uint _2796 = (_2755 * 48u) + 8u;
                        vec3 _2807 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2796)).x, texelFetch(g_PointLightRenderingBuffer, int(_2796 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2796 + 2u)).x));
                        float _2811 = _2771.x - _2329;
                        float _2812 = _2771.y - _2330;
                        float _2813 = _2771.z - _2331;
                        float _2814 = dot(vec3(_2811, _2812, _2813), vec3(_2811, _2812, _2813));
                        float _2817 = inversesqrt(_2814);
                        float _2818 = _2817 * _2811;
                        float _2819 = _2817 * _2812;
                        float _2820 = _2817 * _2813;
                        float _2821 = dot(vec3(_632, _635, _638), vec3(_2818, _2819, _2820));
                        float _2826 = 1.0 - (_2814 * _2771.w);
                        float _4106 = isnan(0.0) ? _2826 : (isnan(_2826) ? 0.0 : max(_2826, 0.0));
                        float _2827 = isnan(1.0) ? _4106 : (isnan(_4106) ? 1.0 : min(_4106, 1.0));
                        float _2828 = sqrt(_2814) * _2790.w;
                        float _2831 = 1.39999997615814208984375 / (_2828 + 1.39999997615814208984375);
                        float _2832 = _2831 * _2831;
                        float _2835 = ((1.0 - _2832) * _2821) + _2832;
                        float _2838 = _2828 * _2828;
                        float _2842 = ((isnan(0.0) ? _2835 : (isnan(_2835) ? 0.0 : max(_2835, 0.0))) * _2827) / ((_2838 * 0.699999988079071044921875) + 1.0);
                        float _2846 = (-0.0) - _2329;
                        float _2847 = (-0.0) - _2330;
                        float _2848 = (-0.0) - _2331;
                        float _2852 = inversesqrt(dot(vec3(_2846, _2847, _2848), vec3(_2846, _2847, _2848)));
                        float _2853 = _2852 * _2846;
                        float _2854 = _2852 * _2847;
                        float _2855 = _2852 * _2848;
                        float _2863 = exp2(log2(1.0 / ((_2838 * 3.5) + 5.0)) * 0.25);
                        float _2864 = 1.0 - _692;
                        float _2871 = sqrt(1.0 - ((1.0 - (_2864 * _2864)) * (1.0 - (_2863 * _2863))));
                        float _2872 = _2871 * _2871;
                        float _2873 = _2872 * _2872;
                        float _2874 = _2853 + _2818;
                        float _2875 = _2854 + _2819;
                        float _2876 = _2855 + _2820;
                        float _2880 = inversesqrt(dot(vec3(_2874, _2875, _2876), vec3(_2874, _2875, _2876)));
                        float _2884 = dot(vec3(_632, _635, _638), vec3(_2853, _2854, _2855));
                        float _4122 = isnan(0.0) ? _2884 : (isnan(_2884) ? 0.0 : max(_2884, 0.0));
                        float _2887 = isnan(1.0) ? _4122 : (isnan(_4122) ? 1.0 : min(_4122, 1.0));
                        float _2888 = dot(vec3(_632, _635, _638), vec3(_2880 * _2874, _2880 * _2875, _2880 * _2876));
                        float _4133 = isnan(0.0) ? _2888 : (isnan(_2888) ? 0.0 : max(_2888, 0.0));
                        float _2891 = isnan(1.0) ? _4133 : (isnan(_4133) ? 1.0 : min(_4133, 1.0));
                        float _2895 = ((_2891 * _2891) * (_2873 + (-1.0))) + 1.0;
                        float _2896 = _2831 * _2872;
                        float _2897 = _2896 * _2896;
                        float _2900 = ((1.0 - _2897) * _2821) + _2897;
                        float _4144 = isnan(0.0) ? _2900 : (isnan(_2900) ? 0.0 : max(_2900, 0.0));
                        float _2901 = isnan(1.0) ? _4144 : (isnan(_4144) ? 1.0 : min(_4144, 1.0));
                        float _2902 = 1.0 - _2872;
                        float _2912 = (0.5 / (((_2901 * ((_2887 * _2902) + _2872)) + 9.9999999392252902907785028219223e-09) + (((_2901 * _2902) + _2872) * _2887))) * _2901;
                        float _4155 = isnan(0.0) ? _2912 : (isnan(_2912) ? 0.0 : max(_2912, 0.0));
                        float _2923 = (((_2873 * 3.1415927410125732421875) * (isnan(1.0) ? _4155 : (isnan(_4155) ? 1.0 : min(_4155, 1.0)))) / ((_2895 * _2895) * ((_2838 * 2.1991131305694580078125) + 3.141590118408203125))) * _2827;
                        _2680 = (_2842 * _2790.x) + _2748;
                        _2681 = (_2842 * _2790.y) + _2749;
                        _2682 = (_2842 * _2790.z) + _2750;
                        _2677 = (_2923 * _2807.x) + _2745;
                        _2678 = (_2923 * _2807.y) + _2746;
                        _2679 = (_2923 * _2807.z) + _2747;
                        if (_2752 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2745 = _2677;
                            _2746 = _2678;
                            _2747 = _2679;
                            _2748 = _2680;
                            _2749 = _2681;
                            _2750 = _2682;
                            _2751 = _2752;
                        }
                    }
                    frontier_phi_61_pred = _2677;
                    frontier_phi_61_pred_1 = _2682;
                    frontier_phi_61_pred_2 = _2681;
                    frontier_phi_61_pred_3 = _2680;
                    frontier_phi_61_pred_4 = _2679;
                    frontier_phi_61_pred_5 = _2678;
                }
                _2477 = frontier_phi_61_pred;
                _2487 = frontier_phi_61_pred_1;
                _2485 = frontier_phi_61_pred_2;
                _2483 = frontier_phi_61_pred_3;
                _2481 = frontier_phi_61_pred_4;
                _2479 = frontier_phi_61_pred_5;
                uint _2628 = _2627 + 1u;
                if (_2628 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2621 = _2477;
                    _2622 = _2479;
                    _2623 = _2481;
                    _2624 = _2483;
                    _2625 = _2485;
                    _2626 = _2487;
                    _2627 = _2628;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2476 = _2477;
            _2478 = _2479;
            _2480 = _2481;
            _2482 = _2483;
            _2484 = _2485;
            _2486 = _2487;
        }
        uvec4 _2490 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2491 = _2490.z;
        uint _2493 = (_2491 >> 8u) & 15u;
        float _2589;
        float _2591;
        float _2593;
        float _2595;
        float _2597;
        float _2599;
        if (((4294967295u << _2493) & _2375) == 0u)
        {
            _2589 = _2476;
            _2591 = _2478;
            _2593 = _2480;
            _2595 = _2482;
            _2597 = _2484;
            _2599 = _2486;
        }
        else
        {
            float _2614 = inversesqrt(dot(vec3(_2329, _2330, _2331), vec3(_2329, _2330, _2331)));
            float _2615 = _2614 * _2329;
            float _2616 = _2614 * _2330;
            float _2617 = _2614 * _2331;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2493 < ((_2491 >> 12u) & 15u))
            {
                float _2590;
                float _2592;
                float _2594;
                float _2596;
                float _2598;
                float _2600;
                float _2728 = _2476;
                float _2729 = _2478;
                float _2730 = _2480;
                float _2731 = _2482;
                float _2732 = _2484;
                float _2733 = _2486;
                uint _2734 = _2493;
                uint _2743;
                bool _2744;
                for (;;)
                {
                    _2743 = texelFetch(g_lightClassification, int((((_2369 << 5u) + (_2355 << 9u)) + (_2734 << 2u)) >> 2u)).x;
                    _2744 = _2743 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_2744)
                    {
                        frontier_phi_67_pred = _2731;
                        frontier_phi_67_pred_1 = _2732;
                        frontier_phi_67_pred_2 = _2733;
                        frontier_phi_67_pred_3 = _2730;
                        frontier_phi_67_pred_4 = _2729;
                        frontier_phi_67_pred_5 = _2728;
                    }
                    else
                    {
                        float _2928;
                        float _2929;
                        float _2930;
                        float _2931;
                        float _2932;
                        float _2933;
                        float _3222;
                        float _3223;
                        float _3224;
                        float _3225;
                        float _3226;
                        float _3227;
                        float _2941 = _2728;
                        float _2942 = _2729;
                        float _2943 = _2730;
                        float _2944 = _2731;
                        float _2945 = _2732;
                        float _2946 = _2733;
                        uint _2947 = _2743;
                        uint _2948;
                        vec4 _2973;
                        float _2974;
                        vec4 _2989;
                        vec3 _3001;
                        vec4 _3016;
                        vec4 _3032;
                        float _3078;
                        bool _3079;
                        for (;;)
                        {
                            uint _2958 = ((_2734 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2947));
                            _2948 = (_2947 + 4294967295u) & _2947;
                            uint _2960 = _2958 * 40u;
                            _2973 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2960)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2960 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2960 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2960 + 3u)).x));
                            _2974 = _2973.w;
                            uint _2976 = (_2958 * 40u) + 4u;
                            _2989 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2976)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2976 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2976 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2976 + 3u)).x));
                            uint _2991 = (_2958 * 40u) + 8u;
                            _3001 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2991)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2991 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2991 + 2u)).x));
                            uint _3003 = (_2958 * 40u) + 16u;
                            _3016 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3003)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3003 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3003 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3003 + 3u)).x));
                            uint _3019 = (_2958 * 40u) + 20u;
                            _3032 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3019)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3019 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3019 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3019 + 3u)).x));
                            uint _3034 = (_2958 * 40u) + 24u;
                            vec4 _3047 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3034)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3034 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3034 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3034 + 3u)).x));
                            uint _3053 = (_2958 * 40u) + 28u;
                            vec4 _3066 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3053)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3053 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3053 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3053 + 3u)).x));
                            _3078 = fma(_2331, _3066.z, fma(_2330, _3066.y, _3066.x * _2329)) + _3066.w;
                            _3079 = !((fma(_2331, _3047.z, fma(_2330, _3047.y, _3047.x * _2329)) + _3047.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3079)
                            {
                                float _3106 = _2973.x - _2329;
                                float _3107 = _2973.y - _2330;
                                float _3108 = _2973.z - _2331;
                                float _3109 = dot(vec3(_3106, _3107, _3108), vec3(_3106, _3107, _3108));
                                float _3112 = inversesqrt(_3109);
                                float _3113 = _3112 * _3106;
                                float _3114 = _3112 * _3107;
                                float _3115 = _3112 * _3108;
                                float _3119 = 1.0 - (_3109 / (_2974 * _2974));
                                float _4166 = isnan(0.0) ? _3119 : (isnan(_3119) ? 0.0 : max(_3119, 0.0));
                                float _3120 = isnan(1.0) ? _4166 : (isnan(_4166) ? 1.0 : min(_4166, 1.0));
                                float _3124 = sqrt(_3109) * _2989.w;
                                float _3126 = 1.39999997615814208984375 / (_3124 + 1.39999997615814208984375);
                                float _3127 = _3126 * _3126;
                                float _3130 = ((1.0 - _3127) * dot(vec3(_3113, _3114, _3115), vec3(_632, _635, _638))) + _3127;
                                float _3133 = _3124 * _3124;
                                float _3137 = (fma(_2331, _3016.z, fma(_2330, _3016.y, _3016.x * _2329)) + _3016.w) / _3078;
                                float _3138 = (fma(_2331, _3032.z, fma(_2330, _3032.y, _3032.x * _2329)) + _3032.w) / _3078;
                                float _3142 = 1.0 - dot(vec2(_3137, _3138), vec2(_3137, _3138));
                                float _4182 = isnan(0.0) ? _3142 : (isnan(_3142) ? 0.0 : max(_3142, 0.0));
                                float _3143 = isnan(1.0) ? _4182 : (isnan(_4182) ? 1.0 : min(_4182, 1.0));
                                float _3144 = _3143 * (((isnan(0.0) ? _3130 : (isnan(_3130) ? 0.0 : max(_3130, 0.0))) * _3120) / ((_3133 * 0.699999988079071044921875) + 1.0));
                                float _3156 = exp2(log2(1.0 / ((_3133 * 3.5) + 5.0)) * 0.25);
                                float _3157 = 1.0 - _692;
                                float _3164 = sqrt(1.0 - ((1.0 - (_3157 * _3157)) * (1.0 - (_3156 * _3156))));
                                float _3165 = _3164 * _3164;
                                float _3166 = _3165 * _3165;
                                float _3167 = _3113 - _2615;
                                float _3168 = _3114 - _2616;
                                float _3169 = _3115 - _2617;
                                float _3173 = inversesqrt(dot(vec3(_3167, _3168, _3169), vec3(_3167, _3168, _3169)));
                                float _3177 = dot(vec3(_632, _635, _638), vec3((-0.0) - _2615, (-0.0) - _2616, (-0.0) - _2617));
                                float _4193 = isnan(0.0) ? _3177 : (isnan(_3177) ? 0.0 : max(_3177, 0.0));
                                float _3180 = isnan(1.0) ? _4193 : (isnan(_4193) ? 1.0 : min(_4193, 1.0));
                                float _3181 = dot(vec3(_632, _635, _638), vec3(_3173 * _3167, _3173 * _3168, _3173 * _3169));
                                float _4204 = isnan(0.0) ? _3181 : (isnan(_3181) ? 0.0 : max(_3181, 0.0));
                                float _3184 = isnan(1.0) ? _4204 : (isnan(_4204) ? 1.0 : min(_4204, 1.0));
                                float _3188 = ((_3184 * _3184) * (_3166 + (-1.0))) + 1.0;
                                float _3189 = _3126 * _3165;
                                float _3190 = _3189 * _3189;
                                float _3196 = ((1.0 - _3190) * dot(vec3(_632, _635, _638), vec3(_3113, _3114, _3115))) + _3190;
                                float _4215 = isnan(0.0) ? _3196 : (isnan(_3196) ? 0.0 : max(_3196, 0.0));
                                float _3197 = isnan(1.0) ? _4215 : (isnan(_4215) ? 1.0 : min(_4215, 1.0));
                                float _3198 = 1.0 - _3165;
                                float _3208 = (0.5 / (((_3197 * ((_3180 * _3198) + _3165)) + 9.9999999392252902907785028219223e-09) + (((_3197 * _3198) + _3165) * _3180))) * _3197;
                                float _4226 = isnan(0.0) ? _3208 : (isnan(_3208) ? 0.0 : max(_3208, 0.0));
                                float _3218 = (_3143 * _3120) * (((_3166 * 3.1415927410125732421875) * (isnan(1.0) ? _4226 : (isnan(_4226) ? 1.0 : min(_4226, 1.0)))) / ((_3188 * _3188) * ((_3133 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3218 * _3001.x;
                                frontier_phi_73_pred_1 = _3218 * _3001.y;
                                frontier_phi_73_pred_2 = _3144 * _2989.z;
                                frontier_phi_73_pred_3 = _3144 * _2989.y;
                                frontier_phi_73_pred_4 = _3144 * _2989.x;
                                frontier_phi_73_pred_5 = _3218 * _3001.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3222 = frontier_phi_73_pred;
                            _3223 = frontier_phi_73_pred_1;
                            _3227 = frontier_phi_73_pred_2;
                            _3226 = frontier_phi_73_pred_3;
                            _3225 = frontier_phi_73_pred_4;
                            _3224 = frontier_phi_73_pred_5;
                            _2931 = _3225 + _2944;
                            _2932 = _3226 + _2945;
                            _2933 = _3227 + _2946;
                            _2928 = _3222 + _2941;
                            _2929 = _3223 + _2942;
                            _2930 = _3224 + _2943;
                            if (_2948 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2941 = _2928;
                                _2942 = _2929;
                                _2943 = _2930;
                                _2944 = _2931;
                                _2945 = _2932;
                                _2946 = _2933;
                                _2947 = _2948;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _2931;
                        frontier_phi_67_pred_1 = _2932;
                        frontier_phi_67_pred_2 = _2933;
                        frontier_phi_67_pred_3 = _2930;
                        frontier_phi_67_pred_4 = _2929;
                        frontier_phi_67_pred_5 = _2928;
                    }
                    _2596 = frontier_phi_67_pred;
                    _2598 = frontier_phi_67_pred_1;
                    _2600 = frontier_phi_67_pred_2;
                    _2594 = frontier_phi_67_pred_3;
                    _2592 = frontier_phi_67_pred_4;
                    _2590 = frontier_phi_67_pred_5;
                    uint _2735 = _2734 + 1u;
                    if (_2735 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2728 = _2590;
                        _2729 = _2592;
                        _2730 = _2594;
                        _2731 = _2596;
                        _2732 = _2598;
                        _2733 = _2600;
                        _2734 = _2735;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2598;
                frontier_phi_55_56_ladder_1 = _2600;
                frontier_phi_55_56_ladder_2 = _2596;
                frontier_phi_55_56_ladder_3 = _2594;
                frontier_phi_55_56_ladder_4 = _2592;
                frontier_phi_55_56_ladder_5 = _2590;
            }
            else
            {
                frontier_phi_55_56_ladder = _2484;
                frontier_phi_55_56_ladder_1 = _2486;
                frontier_phi_55_56_ladder_2 = _2482;
                frontier_phi_55_56_ladder_3 = _2480;
                frontier_phi_55_56_ladder_4 = _2478;
                frontier_phi_55_56_ladder_5 = _2476;
            }
            _2589 = frontier_phi_55_56_ladder_5;
            _2591 = frontier_phi_55_56_ladder_4;
            _2593 = frontier_phi_55_56_ladder_3;
            _2595 = frontier_phi_55_56_ladder_2;
            _2597 = frontier_phi_55_56_ladder;
            _2599 = frontier_phi_55_56_ladder_1;
        }
        float _2604 = isnan(1.0) ? _676 : (isnan(_676) ? 1.0 : min(_676, 1.0));
        _2388 = (_2604 * _2595) + _1843;
        _2390 = (_2604 * _2597) + _1845;
        _2392 = (_2604 * _2599) + _1847;
        _2394 = ((_2589 * 0.039999999105930328369140625) * _2604) + _2173;
        _2396 = ((_2591 * 0.039999999105930328369140625) * _2604) + _2175;
        _2398 = ((_2593 * 0.039999999105930328369140625) * _2604) + _2177;
    }
    else
    {
        _2388 = _1843;
        _2390 = _1845;
        _2392 = _1847;
        _2394 = _2173;
        _2396 = _2175;
        _2398 = _2177;
    }
    float _4242 = isnan(0.0) ? _661 : (isnan(_661) ? 0.0 : max(_661, 0.0));
    float _4253 = isnan(0.0) ? _662 : (isnan(_662) ? 0.0 : max(_662, 0.0));
    float _4264 = isnan(0.0) ? _663 : (isnan(_663) ? 0.0 : max(_663, 0.0));
    uint _2418 = _226 + 6u;
    float _2426 = _613 / cbSceneParam._m0[86u].x;
    float _2427 = _614 / cbSceneParam._m0[86u].y;
    vec4 _2441 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2426, _2427, (log2((isnan(cbSceneParam._m0[77u].w) ? _547 : (isnan(_547) ? cbSceneParam._m0[77u].w : min(_547, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2443 = _2441.x;
    float _2444 = _2441.y;
    float _2445 = _2441.z;
    float _2446 = _2441.w;
    float _2539;
    float _2541;
    float _2543;
    float _2545;
    if (_547 > cbSceneParam._m0[78u].w)
    {
        float _2501 = isnan(_547) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _547 : min(cbSceneParam._m0[80u].w, _547));
        float _2502 = _2501 / _547;
        float _2513 = _2502 * _598;
        float _2514 = _599 * _2502;
        float _2515 = (-0.0) - _2514;
        float _2517 = _2502 * _600;
        float _2519 = (cbSceneParam._m0[77u].w * _2515) / _2501;
        float _2520 = _2519 + cbSceneParam._m0[79u].w;
        float _2521 = cbSceneParam._m0[79u].w - _2514;
        float _2527 = sqrt(((_2513 * _2513) + (_2514 * _2514)) + (_2517 * _2517));
        float _2530 = (1.0 - (cbSceneParam._m0[77u].w / _2501)) * _2527;
        float _2535 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2537 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2690;
        if (abs((_2515 - _2519) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2690 = ((((_2520 > 0.0) ? exp2(_2535 * _2520) : (2.0 - exp2(_2537 * _2520))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2530;
        }
        else
        {
            float _2650 = 1.0 / cbSceneParam._m0[80u].x;
            float _2651 = isnan(_2521) ? _2520 : (isnan(_2520) ? _2521 : max(_2520, _2521));
            float _2652 = isnan(_2521) ? _2520 : (isnan(_2520) ? _2521 : min(_2520, _2521));
            float _2661 = isnan(0.0) ? _2651 : (isnan(_2651) ? 0.0 : min(_2651, 0.0));
            float _2662 = isnan(0.0) ? _2652 : (isnan(_2652) ? 0.0 : min(_2652, 0.0));
            _2690 = ((abs(_2527 / _2515) * cbSceneParam._m0[80u].y) * ((((_2661 - _2662) * 2.0) - ((exp2(_2535 * (isnan(0.0) ? _2651 : (isnan(_2651) ? 0.0 : max(_2651, 0.0)))) - exp2(_2535 * (isnan(0.0) ? _2652 : (isnan(_2652) ? 0.0 : max(_2652, 0.0))))) * _2650)) - ((exp2(_2537 * _2661) - exp2(_2537 * _2662)) * _2650))) + (_2530 * cbSceneParam._m0[80u].z);
        }
        vec4 _2692 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2426, _2427, 1.0), 0.0);
        float _2701 = exp2((_2690 * (-1.44269502162933349609375)) * (1.0 - _2692.w));
        float _2702 = log2(_2701);
        float _2718 = log2(_2446);
        _2539 = (exp2(_2718 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2702 * cbSceneParam._m0[78u].x)) * _2692.x) / cbSceneParam._m0[78u].x)) + _2443;
        _2541 = (exp2(_2718 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2702 * cbSceneParam._m0[78u].y)) * _2692.y) / cbSceneParam._m0[78u].y)) + _2444;
        _2543 = (exp2(_2718 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2702 * cbSceneParam._m0[78u].z)) * _2692.z) / cbSceneParam._m0[78u].z)) + _2445;
        _2545 = _2701 * _2446;
    }
    else
    {
        _2539 = _2443;
        _2541 = _2444;
        _2543 = _2445;
        _2545 = _2446;
    }
    float _2557 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2558 = _2557 == 3.0;
    float _2559 = log2(_2545);
    float _2566 = exp2(_2559 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4242 : (isnan(_4242) ? 1.0 : min(_4242, 1.0))) * (_2388 + ((isnan(0.0) ? _1402 : (isnan(_1402) ? 0.0 : max(_1402, 0.0))) * _676))) + ((_2394 + ((isnan(0.0) ? _1696 : (isnan(_1696) ? 0.0 : max(_1696, 0.0))) * _1481)) * cbPerFrame._m0[3u].x));
    float _2567 = exp2(_2559 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4253 : (isnan(_4253) ? 1.0 : min(_4253, 1.0))) * (_2390 + ((isnan(0.0) ? _1405 : (isnan(_1405) ? 0.0 : max(_1405, 0.0))) * _676))) + ((_2396 + ((isnan(0.0) ? _1699 : (isnan(_1699) ? 0.0 : max(_1699, 0.0))) * _1481)) * cbPerFrame._m0[3u].x));
    float _2568 = exp2(_2559 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4264 : (isnan(_4264) ? 1.0 : min(_4264, 1.0))) * (_2392 + ((isnan(0.0) ? _1408 : (isnan(_1408) ? 0.0 : max(_1408, 0.0))) * _676))) + ((_2398 + ((isnan(0.0) ? _1702 : (isnan(_1702) ? 0.0 : max(_1702, 0.0))) * _1481)) * cbPerFrame._m0[3u].x));
    float _2577 = (_2557 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2577 * (_2558 ? _2566 : (_2566 + (cbSceneParam._m0[72u].w * _2539)));
    SV_Target.y = _2577 * (_2558 ? _2567 : (_2567 + (cbSceneParam._m0[72u].w * _2541)));
    SV_Target.z = _2577 * (_2558 ? _2568 : (_2568 + (cbSceneParam._m0[72u].w * _2543)));
    SV_Target.w = cbInstanceData._m0[_2418].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2418].w;
}


