#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 13) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_22;
layout(set = 0, binding = 14) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_29;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_10;
layout(set = 0, binding = 20) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_6;
layout(set = 0, binding = 23) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_8;
layout(set = 0, binding = 24) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_9;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1601;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _242 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _243 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _244 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _250 = inversesqrt(dot(vec3(_242, _243, _244), vec3(_242, _243, _244)));
    float _251 = _250 * _242;
    float _252 = _250 * _243;
    float _253 = _250 * _244;
    float _257 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _258 = _257 * NORMAL.x;
    float _259 = _257 * NORMAL.y;
    float _260 = _257 * NORMAL.z;
    float _264 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _265 = _264 * TANGENT.x;
    float _266 = _264 * TANGENT.y;
    float _267 = _264 * TANGENT.z;
    float _276 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _278 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _279 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3926 = isnan(0.0) ? _276 : (isnan(_276) ? 0.0 : max(_276, 0.0));
    float _3937 = isnan(0.0) ? _278 : (isnan(_278) ? 0.0 : max(_278, 0.0));
    float _3948 = isnan(0.0) ? _279 : (isnan(_279) ? 0.0 : max(_279, 0.0));
    uint _289 = uint(roundEven(NORMAL.w)) * 13u;
    uint _294 = _289 + 1u;
    uint _298 = _289 + 2u;
    float _307 = sqrt(((cbInstanceData._m0[_294].x * cbInstanceData._m0[_294].x) + (cbInstanceData._m0[_289].x * cbInstanceData._m0[_289].x)) + (cbInstanceData._m0[_298].x * cbInstanceData._m0[_298].x));
    float _308 = _307 * TEXCOORD.z;
    float _309 = _307 * TEXCOORD.w;
    vec4 _322 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _308) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _309) + cbTextureTilingScale._m0[13u].w));
    vec4 _346 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _351 = _346.x * cbMtdParam._m0[11u].x;
    float _352 = _346.y * cbMtdParam._m0[11u].y;
    float _353 = _346.z * cbMtdParam._m0[11u].z;
    vec4 _372 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _308) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _309) + cbTextureTilingScale._m0[5u].w));
    vec4 _391 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _429 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _431 = _429.x;
    float _443 = dot(vec4(_431, _429.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _460 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _391.x) * 2.0) - ((((_431 - _443) * cbMtdParam._m0[24u].z) + _443) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3959 = isnan(0.0) ? _460 : (isnan(_460) ? 0.0 : max(_460, 0.0));
    float _461 = isnan(1.0) ? _3959 : (isnan(_3959) ? 1.0 : min(_3959, 1.0));
    float _468 = (_461 * ((_372.x * cbMtdParam._m0[12u].x) - _351)) + _351;
    float _469 = (_461 * ((_372.y * cbMtdParam._m0[12u].y) - _352)) + _352;
    float _470 = (_461 * ((_372.z * cbMtdParam._m0[12u].z) - _353)) + _353;
    vec4 _487 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _308) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _309) + cbTextureTilingScale._m0[3u].w));
    vec4 _507 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _509 = _507.x;
    float _519 = dot(vec4(_509, _507.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _533 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _391.y) * 2.0) - ((((_509 - _519) * cbMtdParam._m0[24u].z) + _519) * cbMtdParam._m0[20u].w))) + 1.0;
    float _3970 = isnan(0.0) ? _533 : (isnan(_533) ? 0.0 : max(_533, 0.0));
    float _534 = isnan(1.0) ? _3970 : (isnan(_3970) ? 1.0 : min(_3970, 1.0));
    float _541 = (_534 * ((_487.x * cbMtdParam._m0[13u].x) - _468)) + _468;
    float _542 = (_534 * ((_487.y * cbMtdParam._m0[13u].y) - _469)) + _469;
    float _543 = (_534 * ((_487.z * cbMtdParam._m0[13u].z) - _470)) + _470;
    vec4 _561 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_9, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[24u].x * _308) + cbTextureTilingScale._m0[24u].z, (cbTextureTilingScale._m0[24u].y * _309) + cbTextureTilingScale._m0[24u].w));
    vec4 _578 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[25u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _580 = _578.x;
    float _590 = dot(vec4(_580, _578.yzw), vec4(cbMtdParam._m0[30u].w, cbMtdParam._m0[31u].xy, 0.0));
    float _602 = ((cbMtdParam._m0[25u].x * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.z) - _391.z) * 2.0) - ((((_580 - _590) * cbMtdParam._m0[24u].z) + _590) * cbMtdParam._m0[20u].z))) + 1.0;
    float _3981 = isnan(0.0) ? _602 : (isnan(_602) ? 0.0 : max(_602, 0.0));
    float _603 = isnan(1.0) ? _3981 : (isnan(_3981) ? 1.0 : min(_3981, 1.0));
    float _610 = (_603 * ((_561.x * cbMtdParam._m0[14u].x) - _541)) + _541;
    float _611 = (_603 * ((_561.y * cbMtdParam._m0[14u].y) - _542)) + _542;
    float _612 = (_603 * ((_561.z * cbMtdParam._m0[14u].z) - _543)) + _543;
    float _616 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _322.x) * _610;
    float _619 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _322.y) * _611;
    float _622 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _322.z) * _612;
    float _629 = ((_610 - _616) * (isnan(1.0) ? _3926 : (isnan(_3926) ? 1.0 : min(_3926, 1.0)))) + _616;
    float _630 = ((_611 - _619) * (isnan(1.0) ? _3937 : (isnan(_3937) ? 1.0 : min(_3937, 1.0)))) + _619;
    float _631 = ((_612 - _622) * (isnan(1.0) ? _3948 : (isnan(_3948) ? 1.0 : min(_3948, 1.0)))) + _622;
    vec4 _649 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _308) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _309) + cbTextureTilingScale._m0[14u].w));
    vec4 _668 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _308) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _309) + cbTextureTilingScale._m0[20u].w));
    vec4 _693 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _308) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _309) + cbTextureTilingScale._m0[4u].w));
    vec4 _710 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _712 = _710.x;
    float _713 = _710.y;
    float _714 = _710.z;
    float _721 = ((_693.x - _712) * _461) + _712;
    float _722 = ((_693.y - _713) * _461) + _713;
    float _723 = ((_693.z - _714) * _461) + _714;
    vec4 _735 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _308) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _309) + cbTextureTilingScale._m0[2u].w));
    float _746 = ((_735.x - _721) * _534) + _721;
    float _747 = ((_735.y - _722) * _534) + _722;
    float _748 = ((_735.z - _723) * _534) + _723;
    vec4 _760 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[23u].x * _308) + cbTextureTilingScale._m0[23u].z, (cbTextureTilingScale._m0[23u].y * _309) + cbTextureTilingScale._m0[23u].w));
    float _773 = ((_760.z - _748) * _603) + _748;
    float _776 = ((((_760.x - _746) * _603) + _746) * 2.0) + (-1.0);
    float _777 = ((((_760.y - _747) * _603) + _747) * 2.0) + (-1.0);
    float _778 = dot(vec2(_776, _777), vec2(_776, _777));
    float _3992 = isnan(0.0) ? _778 : (isnan(_778) ? 0.0 : max(_778, 0.0));
    float _783 = sqrt(1.0 - (isnan(1.0) ? _3992 : (isnan(_3992) ? 1.0 : min(_3992, 1.0))));
    vec4 _801 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _813 = (_776 + ((((_668.x * 2.0) + (-1.0)) * TEXCOORD_11.x) * cbMtdParam._m0[20u].x)) + (((_801.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _814 = (_777 + ((((_668.y * 2.0) + (-1.0)) * TEXCOORD_11.y) * cbMtdParam._m0[20u].x)) + (((_801.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _817 = fma(_783, _258, fma(_814, _265, _813 * _251));
    float _820 = fma(_783, _259, fma(_814, _266, _813 * _252));
    float _823 = fma(_783, _260, fma(_814, _267, _813 * _253));
    float _827 = inversesqrt(dot(vec3(_817, _820, _823), vec3(_817, _820, _823)));
    vec4 _854 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _308) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _309) + cbTextureTilingScale._m0[11u].w));
    float _856 = _854.x;
    float _857 = 1.0 - _856;
    float _863 = (cbMtdParam._m0[19u].x + dot(vec4(_827 * _817, _827 * _820, _827 * _823, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_856 - _857) * cbMtdParam._m0[24u].w) + _857) * cbMtdParam._m0[21u].z);
    float _4003 = isnan(0.0) ? _863 : (isnan(_863) ? 0.0 : max(_863, 0.0));
    float _864 = isnan(1.0) ? _4003 : (isnan(_4003) ? 1.0 : min(_4003, 1.0));
    float _866 = (-0.0) - cbMtdParam._m0[24u].x;
    float _868 = isnan(0.0) ? _866 : (isnan(_866) ? 0.0 : max(_866, 0.0));
    float _869 = isnan(1.0) ? _868 : (isnan(_868) ? 1.0 : min(_868, 1.0));
    float _876 = _864 - ((_864 * TEXCOORD_8.x) * _869);
    float _877 = _864 - ((_864 * TEXCOORD_8.y) * _869);
    float _878 = _864 - ((_864 * TEXCOORD_8.z) * _869);
    float _885 = (_876 * ((_649.x * cbMtdParam._m0[18u].x) - _629)) + _629;
    float _886 = (_877 * ((_649.y * cbMtdParam._m0[18u].y) - _630)) + _630;
    float _887 = (_878 * ((_649.z * cbMtdParam._m0[18u].z) - _631)) + _631;
    float _902 = sqrt(((cbInstanceData._m0[_294].x * cbInstanceData._m0[_294].x) + (cbInstanceData._m0[_289].x * cbInstanceData._m0[_289].x)) + (cbInstanceData._m0[_298].x * cbInstanceData._m0[_298].x));
    float _903 = _902 * TEXCOORD.z;
    float _904 = _902 * TEXCOORD.w;
    vec4 _916 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _903) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _904) + cbTextureTilingScale._m0[19u].w));
    float _918 = _916.x;
    float _919 = 1.0 - _918;
    float _947 = (TEXCOORD_8.x - ((cbMtdParam._m0[22u].w * (1.0 - TEXCOORD_8.x)) * ((((_918 - _919) * cbMtdParam._m0[24u].y) + _919) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _4024 = isnan(0.0) ? _947 : (isnan(_947) ? 0.0 : max(_947, 0.0));
    float _948 = isnan(1.0) ? _4024 : (isnan(_4024) ? 1.0 : min(_4024, 1.0));
    float _956 = ((((cbMtdParam._m0[10u].x - _885) * TEXCOORD_8.x) * cbMtdParam._m0[23u].w) * _948) + _885;
    float _957 = ((((cbMtdParam._m0[10u].y - _886) * TEXCOORD_8.y) * cbMtdParam._m0[23u].w) * _948) + _886;
    float _958 = (((cbMtdParam._m0[23u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _887)) * _948) + _887;
    float _963 = (((_668.z - _773) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _773;
    float _967 = ((_801.z - _963) * cbMtdParam._m0[19u].w) + _963;
    vec4 _983 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _308) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _309) + cbTextureTilingScale._m0[15u].w));
    float _990 = (_983.x * 2.0) + (-1.0);
    float _991 = (_983.y * 2.0) + (-1.0);
    float _992 = dot(vec2(_990, _991), vec2(_990, _991));
    float _4035 = isnan(0.0) ? _992 : (isnan(_992) ? 0.0 : max(_992, 0.0));
    float _1000 = ((_983.z - _967) * _876) + _967;
    float _1003 = ((cbMtdParam._m0[23u].y - _1000) * _948) + _1000;
    vec4 _1024 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _903) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _904) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _1030 = (_1024.x * 2.0) + (-1.0);
    float _1031 = (_1024.y * 2.0) + (-1.0);
    float _1032 = dot(vec2(_1030, _1031), vec2(_1030, _1031));
    float _4046 = isnan(0.0) ? _1032 : (isnan(_1032) ? 0.0 : max(_1032, 0.0));
    float _1047 = ((sqrt(1.0 - (isnan(1.0) ? _4035 : (isnan(_4035) ? 1.0 : min(_4035, 1.0)))) - _783) * _878) + _783;
    float _1050 = (((_990 - _813) * _876) + _813) + (cbMtdParam._m0[21u].x * _813);
    float _1051 = (((_991 - _814) * _877) + _814) + (cbMtdParam._m0[21u].x * _814);
    float _1062 = (((_1030 - _1050) + (_1050 * cbMtdParam._m0[22u].z)) * _948) + _1050;
    float _1063 = (((_1031 - _1051) + (_1051 * cbMtdParam._m0[22u].z)) * _948) + _1051;
    float _1064 = (_948 * (sqrt(1.0 - (isnan(1.0) ? _4046 : (isnan(_4046) ? 1.0 : min(_4046, 1.0)))) - _1047)) + _1047;
    float _1066 = cbMtdParam._m0[22u].x + _801.w;
    float _1069 = fma(_1064, _258, fma(_1063, _265, _1062 * _251));
    float _1072 = fma(_1064, _259, fma(_1063, _266, _1062 * _252));
    float _1075 = fma(_1064, _260, fma(_1063, _267, _1062 * _253));
    float _1079 = inversesqrt(dot(vec3(_1069, _1072, _1075), vec3(_1069, _1072, _1075)));
    float _1080 = _1079 * _1069;
    float _1081 = _1079 * _1072;
    float _1082 = _1079 * _1075;
    float _4057 = isnan(0.0) ? _1003 : (isnan(_1003) ? 0.0 : max(_1003, 0.0));
    float _1083 = isnan(1.0) ? _4057 : (isnan(_4057) ? 1.0 : min(_4057, 1.0));
    float _4068 = isnan(0.0) ? _1066 : (isnan(_1066) ? 0.0 : max(_1066, 0.0));
    float _4079 = isnan(0.0) ? _956 : (isnan(_956) ? 0.0 : max(_956, 0.0));
    float _4090 = isnan(0.0) ? _957 : (isnan(_957) ? 0.0 : max(_957, 0.0));
    float _4101 = isnan(0.0) ? _958 : (isnan(_958) ? 0.0 : max(_958, 0.0));
    float _1101 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _1142 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _1152 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _1142);
    float _1153 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _1142);
    float _1154 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _1142);
    float _1158 = inversesqrt(dot(vec3(_1152, _1153, _1154), vec3(_1152, _1153, _1154)));
    float _1159 = _1152 * _1158;
    float _1160 = _1153 * _1158;
    float _1161 = _1154 * _1158;
    float _1167 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1168 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1186 = fma(_1082, cbSceneParam._m0[5u].z, fma(_1081, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _1080));
    float _1189 = fma(_1082, cbSceneParam._m0[6u].z, fma(_1081, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _1080));
    float _1192 = fma(_1082, cbSceneParam._m0[7u].z, fma(_1081, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _1080));
    uint _1206 = (_289 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _1212 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4079 : (isnan(_4079) ? 1.0 : min(_4079, 1.0)))) * cbInstanceData._m0[_1206].x;
    float _1213 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4090 : (isnan(_4090) ? 1.0 : min(_4090, 1.0)))) * cbInstanceData._m0[_1206].y;
    float _1214 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4101 : (isnan(_4101) ? 1.0 : min(_4101, 1.0)))) * cbInstanceData._m0[_1206].z;
    float _4112 = isnan(0.0) ? _1212 : (isnan(_1212) ? 0.0 : max(_1212, 0.0));
    float _1215 = isnan(1.0) ? _4112 : (isnan(_4112) ? 1.0 : min(_4112, 1.0));
    float _4123 = isnan(0.0) ? _1213 : (isnan(_1213) ? 0.0 : max(_1213, 0.0));
    float _1216 = isnan(1.0) ? _4123 : (isnan(_4123) ? 1.0 : min(_4123, 1.0));
    float _4134 = isnan(0.0) ? _1214 : (isnan(_1214) ? 0.0 : max(_1214, 0.0));
    float _1217 = isnan(1.0) ? _4134 : (isnan(_4134) ? 1.0 : min(_4134, 1.0));
    vec4 _1226 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1167, cbSceneParam._m0[86u].y * _1168));
    float _1230 = ((isnan(1.0) ? _4068 : (isnan(_4068) ? 1.0 : min(_4068, 1.0))) * TEXCOORD_5.w) * _1226.x;
    float _1231 = dot(vec3(_1080, _1081, _1082), vec3(_1159, _1160, _1161));
    float _1234 = _1231 * 2.0;
    float _1238 = (_1234 * _1080) - _1159;
    float _1239 = (_1234 * _1081) - _1160;
    float _1240 = (_1234 * _1082) - _1161;
    float _1244 = abs(dot(vec3(_1159, _1160, _1161), vec3(_1080, _1081, _1082)));
    float _4145 = isnan(0.0) ? _1244 : (isnan(_1244) ? 0.0 : max(_1244, 0.0));
    float _1246 = sqrt(_1083);
    float _1259 = exp2((_1246 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4145 : (isnan(_4145) ? 1.0 : min(_4145, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1246 * 3.0));
    float _1291 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1295 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1299 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1600;
    float _1602;
    float _1603;
    float _1604;
    float _1605;
    float _1606;
    float _1607;
    float _1608;
    float _1609;
    float _1610;
    float _1611;
    float _1612;
    float _1613;
    float _1614;
    float _1615;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1325 = fma(_1299, cbModelParam._m0[26u].z, fma(_1295, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1291));
        float _1329 = fma(_1299, cbModelParam._m0[27u].z, fma(_1295, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1291));
        float _1333 = fma(_1299, cbModelParam._m0[28u].z, fma(_1295, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1291));
        float _1358 = _1291 + _1080;
        float _1359 = _1295 + _1081;
        float _1360 = _1299 + _1082;
        float _1370 = fma(_1360, cbModelParam._m0[26u].z, fma(_1359, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1358)) - _1325;
        float _1371 = fma(_1360, cbModelParam._m0[27u].z, fma(_1359, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1358)) - _1329;
        float _1372 = fma(_1360, cbModelParam._m0[28u].z, fma(_1359, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1358)) - _1333;
        float _1376 = inversesqrt(dot(vec3(_1370, _1371, _1372), vec3(_1370, _1371, _1372)));
        float _1389 = ((_1376 * _1370) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1325 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1390 = ((_1376 * _1371) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1329 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1391 = ((_1376 * _1372) / cbModelParam._m0[34u].z) + ((((((_1333 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1394 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1389, _1390, _1391), 0.0);
        vec4 _1401 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1389, _1390, _1391), 0.0);
        vec4 _1408 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1389, _1390, _1391), 0.0);
        vec4 _1415 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1389, _1390, _1391), 0.0);
        float _1428 = exp2((_1394.w + (-0.5)) * 20.0) * 2.0;
        float _1429 = _1428 * (_1394.x + (-0.5));
        float _1430 = _1428 * (_1394.y + (-0.5));
        float _1431 = _1428 * (_1394.z + (-0.5));
        float _1438 = exp2((_1401.w + (-0.5)) * 20.0) * 2.0;
        float _1439 = _1438 * (_1401.x + (-0.5));
        float _1440 = _1438 * (_1401.y + (-0.5));
        float _1441 = _1438 * (_1401.z + (-0.5));
        float _1448 = exp2((_1408.w + (-0.5)) * 20.0) * 2.0;
        float _1449 = _1448 * (_1408.x + (-0.5));
        float _1450 = _1448 * (_1408.y + (-0.5));
        float _1451 = _1448 * (_1408.z + (-0.5));
        float _1458 = exp2((_1415.w + (-0.5)) * 20.0) * 2.0;
        float _1459 = _1458 * (_1415.x + (-0.5));
        float _1460 = _1458 * (_1415.y + (-0.5));
        float _1461 = _1458 * (_1415.z + (-0.5));
        float _1462 = isnan(0.0) ? _1459 : (isnan(_1459) ? 0.0 : max(_1459, 0.0));
        float _1463 = isnan(0.0) ? _1460 : (isnan(_1460) ? 0.0 : max(_1460, 0.0));
        float _1464 = isnan(0.0) ? _1461 : (isnan(_1461) ? 0.0 : max(_1461, 0.0));
        float _1465 = _1429 * 0.5;
        float _1466 = _1439 * 0.5;
        float _1467 = _1449 * 0.5;
        float _1468 = dot(vec3(_1465, _1466, _1467), vec3(_1465, _1466, _1467));
        float _1473 = (_1468 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1468);
        float _1482 = (dot(vec3(_1080, _1081, _1082), vec3(_1473 * _1465, _1473 * _1466, _1473 * _1467)) + 1.0) * 0.5;
        float _4171 = isnan(0.0) ? _1482 : (isnan(_1482) ? 0.0 : max(_1482, 0.0));
        float _1492 = sqrt(((_1466 * _1466) + (_1465 * _1465)) + (_1467 * _1467)) / (_1462 + 9.9999997473787516355514526367188e-06);
        float _4182 = isnan(0.0) ? _1492 : (isnan(_1492) ? 0.0 : max(_1492, 0.0));
        float _1493 = isnan(1.0) ? _4182 : (isnan(_4182) ? 1.0 : min(_4182, 1.0));
        float _1494 = _1493 * 2.0;
        float _1498 = (1.0 - _1493) / (_1493 + 1.0);
        float _4193 = isnan(0.0) ? _1498 : (isnan(_1498) ? 0.0 : max(_1498, 0.0));
        float _1499 = isnan(1.0) ? _4193 : (isnan(_4193) ? 1.0 : min(_4193, 1.0));
        float _1508 = ((((1.0 - _1499) * (_1494 + 2.0)) * exp2(log2(isnan(1.0) ? _4171 : (isnan(_4171) ? 1.0 : min(_4171, 1.0))) * (_1494 + 1.0))) + _1499) * _1462;
        float _1509 = _1430 * 0.5;
        float _1510 = _1440 * 0.5;
        float _1511 = _1450 * 0.5;
        float _1512 = dot(vec3(_1509, _1510, _1511), vec3(_1509, _1510, _1511));
        float _1517 = (_1512 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1512);
        float _1525 = (dot(vec3(_1080, _1081, _1082), vec3(_1517 * _1509, _1517 * _1510, _1517 * _1511)) + 1.0) * 0.5;
        float _4204 = isnan(0.0) ? _1525 : (isnan(_1525) ? 0.0 : max(_1525, 0.0));
        float _1534 = sqrt(((_1510 * _1510) + (_1509 * _1509)) + (_1511 * _1511)) / (_1463 + 9.9999997473787516355514526367188e-06);
        float _4215 = isnan(0.0) ? _1534 : (isnan(_1534) ? 0.0 : max(_1534, 0.0));
        float _1535 = isnan(1.0) ? _4215 : (isnan(_4215) ? 1.0 : min(_4215, 1.0));
        float _1536 = _1535 * 2.0;
        float _1540 = (1.0 - _1535) / (_1535 + 1.0);
        float _4226 = isnan(0.0) ? _1540 : (isnan(_1540) ? 0.0 : max(_1540, 0.0));
        float _1541 = isnan(1.0) ? _4226 : (isnan(_4226) ? 1.0 : min(_4226, 1.0));
        float _1550 = ((((1.0 - _1541) * (_1536 + 2.0)) * exp2(log2(isnan(1.0) ? _4204 : (isnan(_4204) ? 1.0 : min(_4204, 1.0))) * (_1536 + 1.0))) + _1541) * _1463;
        float _1551 = _1431 * 0.5;
        float _1552 = _1441 * 0.5;
        float _1553 = _1451 * 0.5;
        float _1554 = dot(vec3(_1551, _1552, _1553), vec3(_1551, _1552, _1553));
        float _1559 = (_1554 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1554);
        float _1567 = (dot(vec3(_1080, _1081, _1082), vec3(_1559 * _1551, _1559 * _1552, _1559 * _1553)) + 1.0) * 0.5;
        float _4237 = isnan(0.0) ? _1567 : (isnan(_1567) ? 0.0 : max(_1567, 0.0));
        float _1576 = sqrt(((_1552 * _1552) + (_1551 * _1551)) + (_1553 * _1553)) / (_1464 + 9.9999997473787516355514526367188e-06);
        float _4248 = isnan(0.0) ? _1576 : (isnan(_1576) ? 0.0 : max(_1576, 0.0));
        float _1577 = isnan(1.0) ? _4248 : (isnan(_4248) ? 1.0 : min(_4248, 1.0));
        float _1578 = _1577 * 2.0;
        float _1582 = (1.0 - _1577) / (_1577 + 1.0);
        float _4259 = isnan(0.0) ? _1582 : (isnan(_1582) ? 0.0 : max(_1582, 0.0));
        float _1583 = isnan(1.0) ? _4259 : (isnan(_4259) ? 1.0 : min(_4259, 1.0));
        float _1592 = ((((1.0 - _1583) * (_1578 + 2.0)) * exp2(log2(isnan(1.0) ? _4237 : (isnan(_4237) ? 1.0 : min(_4237, 1.0))) * (_1578 + 1.0))) + _1583) * _1464;
        _1600 = _1431;
        _1602 = _1430;
        _1603 = _1429;
        _1604 = _1441;
        _1605 = _1440;
        _1606 = _1439;
        _1607 = _1451;
        _1608 = _1450;
        _1609 = _1449;
        _1610 = _1464;
        _1611 = _1463;
        _1612 = _1462;
        _1613 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1508 : (isnan(_1508) ? 0.0 : max(_1508, 0.0)));
        _1614 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1550 : (isnan(_1550) ? 0.0 : max(_1550, 0.0)));
        _1615 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1592 : (isnan(_1592) ? 0.0 : max(_1592, 0.0)));
    }
    else
    {
        _1600 = _1601;
        _1602 = _1601;
        _1603 = _1601;
        _1604 = _1601;
        _1605 = _1601;
        _1606 = _1601;
        _1607 = _1601;
        _1608 = _1601;
        _1609 = _1601;
        _1610 = _1601;
        _1611 = _1601;
        _1612 = _1601;
        _1613 = 0.0;
        _1614 = 0.0;
        _1615 = 0.0;
    }
    float _1907;
    float _1908;
    float _1909;
    float _1910;
    float _1911;
    float _1912;
    float _1913;
    float _1914;
    float _1915;
    float _1916;
    float _1917;
    float _1918;
    float _1919;
    float _1920;
    float _1921;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1638 = fma(_1299, cbModelParam._m0[30u].z, fma(_1295, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1291));
        float _1642 = fma(_1299, cbModelParam._m0[31u].z, fma(_1295, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1291));
        float _1646 = fma(_1299, cbModelParam._m0[32u].z, fma(_1295, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1291));
        float _1669 = _1291 + _1080;
        float _1670 = _1295 + _1081;
        float _1671 = _1299 + _1082;
        float _1681 = fma(_1671, cbModelParam._m0[30u].z, fma(_1670, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1669)) - _1638;
        float _1682 = fma(_1671, cbModelParam._m0[31u].z, fma(_1670, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1669)) - _1642;
        float _1683 = fma(_1671, cbModelParam._m0[32u].z, fma(_1670, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1669)) - _1646;
        float _1687 = inversesqrt(dot(vec3(_1681, _1682, _1683), vec3(_1681, _1682, _1683)));
        float _1700 = ((_1687 * _1681) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1638 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1701 = ((_1687 * _1682) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1642 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1702 = ((_1687 * _1683) / cbModelParam._m0[35u].z) + ((((((_1646 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1704 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1700, _1701, _1702), 0.0);
        vec4 _1711 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1700, _1701, _1702), 0.0);
        vec4 _1718 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1700, _1701, _1702), 0.0);
        vec4 _1725 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1700, _1701, _1702), 0.0);
        float _1737 = exp2((_1704.w + (-0.5)) * 20.0) * 2.0;
        float _1738 = _1737 * (_1704.x + (-0.5));
        float _1739 = _1737 * (_1704.y + (-0.5));
        float _1740 = _1737 * (_1704.z + (-0.5));
        float _1747 = exp2((_1711.w + (-0.5)) * 20.0) * 2.0;
        float _1748 = _1747 * (_1711.x + (-0.5));
        float _1749 = _1747 * (_1711.y + (-0.5));
        float _1750 = _1747 * (_1711.z + (-0.5));
        float _1757 = exp2((_1718.w + (-0.5)) * 20.0) * 2.0;
        float _1758 = _1757 * (_1718.x + (-0.5));
        float _1759 = _1757 * (_1718.y + (-0.5));
        float _1760 = _1757 * (_1718.z + (-0.5));
        float _1767 = exp2((_1725.w + (-0.5)) * 20.0) * 2.0;
        float _1768 = _1767 * (_1725.x + (-0.5));
        float _1769 = _1767 * (_1725.y + (-0.5));
        float _1770 = _1767 * (_1725.z + (-0.5));
        float _1771 = isnan(0.0) ? _1768 : (isnan(_1768) ? 0.0 : max(_1768, 0.0));
        float _1772 = isnan(0.0) ? _1769 : (isnan(_1769) ? 0.0 : max(_1769, 0.0));
        float _1773 = isnan(0.0) ? _1770 : (isnan(_1770) ? 0.0 : max(_1770, 0.0));
        float _1774 = _1738 * 0.5;
        float _1775 = _1748 * 0.5;
        float _1776 = _1758 * 0.5;
        float _1777 = dot(vec3(_1774, _1775, _1776), vec3(_1774, _1775, _1776));
        float _1782 = (_1777 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1777);
        float _1790 = (dot(vec3(_1080, _1081, _1082), vec3(_1782 * _1774, _1782 * _1775, _1782 * _1776)) + 1.0) * 0.5;
        float _4300 = isnan(0.0) ? _1790 : (isnan(_1790) ? 0.0 : max(_1790, 0.0));
        float _1799 = sqrt(((_1775 * _1775) + (_1774 * _1774)) + (_1776 * _1776)) / (_1771 + 9.9999997473787516355514526367188e-06);
        float _4311 = isnan(0.0) ? _1799 : (isnan(_1799) ? 0.0 : max(_1799, 0.0));
        float _1800 = isnan(1.0) ? _4311 : (isnan(_4311) ? 1.0 : min(_4311, 1.0));
        float _1801 = _1800 * 2.0;
        float _1805 = (1.0 - _1800) / (_1800 + 1.0);
        float _4322 = isnan(0.0) ? _1805 : (isnan(_1805) ? 0.0 : max(_1805, 0.0));
        float _1806 = isnan(1.0) ? _4322 : (isnan(_4322) ? 1.0 : min(_4322, 1.0));
        float _1815 = ((((1.0 - _1806) * (_1801 + 2.0)) * exp2(log2(isnan(1.0) ? _4300 : (isnan(_4300) ? 1.0 : min(_4300, 1.0))) * (_1801 + 1.0))) + _1806) * _1771;
        float _1816 = _1739 * 0.5;
        float _1817 = _1749 * 0.5;
        float _1818 = _1759 * 0.5;
        float _1819 = dot(vec3(_1816, _1817, _1818), vec3(_1816, _1817, _1818));
        float _1824 = (_1819 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1819);
        float _1832 = (dot(vec3(_1080, _1081, _1082), vec3(_1824 * _1816, _1824 * _1817, _1824 * _1818)) + 1.0) * 0.5;
        float _4333 = isnan(0.0) ? _1832 : (isnan(_1832) ? 0.0 : max(_1832, 0.0));
        float _1841 = sqrt(((_1817 * _1817) + (_1816 * _1816)) + (_1818 * _1818)) / (_1772 + 9.9999997473787516355514526367188e-06);
        float _4344 = isnan(0.0) ? _1841 : (isnan(_1841) ? 0.0 : max(_1841, 0.0));
        float _1842 = isnan(1.0) ? _4344 : (isnan(_4344) ? 1.0 : min(_4344, 1.0));
        float _1843 = _1842 * 2.0;
        float _1847 = (1.0 - _1842) / (_1842 + 1.0);
        float _4355 = isnan(0.0) ? _1847 : (isnan(_1847) ? 0.0 : max(_1847, 0.0));
        float _1848 = isnan(1.0) ? _4355 : (isnan(_4355) ? 1.0 : min(_4355, 1.0));
        float _1857 = ((((1.0 - _1848) * (_1843 + 2.0)) * exp2(log2(isnan(1.0) ? _4333 : (isnan(_4333) ? 1.0 : min(_4333, 1.0))) * (_1843 + 1.0))) + _1848) * _1772;
        float _1858 = _1740 * 0.5;
        float _1859 = _1750 * 0.5;
        float _1860 = _1760 * 0.5;
        float _1861 = dot(vec3(_1858, _1859, _1860), vec3(_1858, _1859, _1860));
        float _1866 = (_1861 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1861);
        float _1874 = (dot(vec3(_1080, _1081, _1082), vec3(_1866 * _1858, _1866 * _1859, _1866 * _1860)) + 1.0) * 0.5;
        float _4366 = isnan(0.0) ? _1874 : (isnan(_1874) ? 0.0 : max(_1874, 0.0));
        float _1883 = sqrt(((_1859 * _1859) + (_1858 * _1858)) + (_1860 * _1860)) / (_1773 + 9.9999997473787516355514526367188e-06);
        float _4377 = isnan(0.0) ? _1883 : (isnan(_1883) ? 0.0 : max(_1883, 0.0));
        float _1884 = isnan(1.0) ? _4377 : (isnan(_4377) ? 1.0 : min(_4377, 1.0));
        float _1885 = _1884 * 2.0;
        float _1889 = (1.0 - _1884) / (_1884 + 1.0);
        float _4388 = isnan(0.0) ? _1889 : (isnan(_1889) ? 0.0 : max(_1889, 0.0));
        float _1890 = isnan(1.0) ? _4388 : (isnan(_4388) ? 1.0 : min(_4388, 1.0));
        float _1899 = ((((1.0 - _1890) * (_1885 + 2.0)) * exp2(log2(isnan(1.0) ? _4366 : (isnan(_4366) ? 1.0 : min(_4366, 1.0))) * (_1885 + 1.0))) + _1890) * _1773;
        _1907 = _1740;
        _1908 = _1739;
        _1909 = _1738;
        _1910 = _1750;
        _1911 = _1749;
        _1912 = _1748;
        _1913 = _1760;
        _1914 = _1759;
        _1915 = _1758;
        _1916 = _1773;
        _1917 = _1772;
        _1918 = _1771;
        _1919 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1815 : (isnan(_1815) ? 0.0 : max(_1815, 0.0)));
        _1920 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1857 : (isnan(_1857) ? 0.0 : max(_1857, 0.0)));
        _1921 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1899 : (isnan(_1899) ? 0.0 : max(_1899, 0.0)));
    }
    else
    {
        _1907 = _1601;
        _1908 = _1601;
        _1909 = _1601;
        _1910 = _1601;
        _1911 = _1601;
        _1912 = _1601;
        _1913 = _1601;
        _1914 = _1601;
        _1915 = _1601;
        _1916 = _1601;
        _1917 = _1601;
        _1918 = _1601;
        _1919 = 0.0;
        _1920 = 0.0;
        _1921 = 0.0;
    }
    float _1931 = (cbModelParam._m0[1u].x * (_1919 - _1613)) + _1613;
    float _1932 = (cbModelParam._m0[1u].x * (_1920 - _1614)) + _1614;
    float _1933 = (cbModelParam._m0[1u].x * (_1921 - _1615)) + _1615;
    float _1954 = fma(_1933, cbSceneParam._m0[89u].z, fma(_1932, cbSceneParam._m0[89u].y, _1931 * cbSceneParam._m0[89u].x));
    float _1957 = fma(_1933, cbSceneParam._m0[90u].z, fma(_1932, cbSceneParam._m0[90u].y, _1931 * cbSceneParam._m0[90u].x));
    float _1960 = fma(_1933, cbSceneParam._m0[91u].z, fma(_1932, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1931));
    float _1975 = _1238 * 0.5;
    float _1976 = _1239 * 0.5;
    float _1977 = _1240 * 0.5;
    float _1978 = dot(vec4(_1975, _1976, _1977, 1.0), vec4(_1909, _1912, _1915, _1918));
    float _1981 = dot(vec4(_1975, _1976, _1977, 1.0), vec4(_1908, _1911, _1914, _1917));
    float _1984 = dot(vec4(_1975, _1976, _1977, 1.0), vec4(_1907, _1910, _1913, _1916));
    float _2018;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1991 = dot(vec4(_1975, _1976, _1977, 1.0), vec4(_1600, _1604, _1607, _1610));
        float _1995 = dot(vec4(_1975, _1976, _1977, 1.0), vec4(_1602, _1605, _1608, _1611));
        float _1999 = dot(vec4(_1975, _1976, _1977, 1.0), vec4(_1603, _1606, _1609, _1612));
        float _2006 = dot(vec4(cbModelParam._m0[39u]), vec4(_1975, _1976, _1977, 1.0));
        _2018 = dot(vec3(isnan(0.0) ? _1999 : (isnan(_1999) ? 0.0 : max(_1999, 0.0)), isnan(0.0) ? _1995 : (isnan(_1995) ? 0.0 : max(_1995, 0.0)), isnan(0.0) ? _1991 : (isnan(_1991) ? 0.0 : max(_1991, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_2006) ? 0.0 : (isnan(0.0) ? _2006 : max(0.0, _2006))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _2018 = 1.0;
    }
    float _2029;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _2020 = dot(vec4(cbModelParam._m0[40u]), vec4(_1975, _1976, _1977, 1.0));
        _2029 = dot(vec3(isnan(0.0) ? _1978 : (isnan(_1978) ? 0.0 : max(_1978, 0.0)), isnan(0.0) ? _1981 : (isnan(_1981) ? 0.0 : max(_1981, 0.0)), isnan(0.0) ? _1984 : (isnan(_1984) ? 0.0 : max(_1984, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_2020) ? 0.0 : (isnan(0.0) ? _2020 : max(0.0, _2020))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _2029 = 1.0;
    }
    float _2033 = (_2029 * cbModelParam._m0[1u].x) + (_2018 * (1.0 - cbModelParam._m0[1u].x));
    float _2043 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _1083);
    float _2044 = isnan(_2043) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _2043 : min(cbModelParam._m0[25u].z, _2043));
    float _2124;
    float _2126;
    float _2128;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _2091 = fma(_1299, cbModelParam._m0[13u].z, fma(_1295, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1291)) + cbModelParam._m0[13u].w;
        float _2095 = fma(_1299, cbModelParam._m0[14u].z, fma(_1295, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1291)) + cbModelParam._m0[14u].w;
        float _2099 = fma(_1299, cbModelParam._m0[15u].z, fma(_1295, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1291)) + cbModelParam._m0[15u].w;
        float _2102 = fma(_1240, cbModelParam._m0[13u].z, fma(_1239, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1238));
        float _2105 = fma(_1240, cbModelParam._m0[14u].z, fma(_1239, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1238));
        float _2108 = fma(_1240, cbModelParam._m0[15u].z, fma(_1239, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1238));
        float _2136;
        if (_2102 > 0.0)
        {
            _2136 = abs((1.0 - _2091) / _2102);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_2102 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_2091 + 1.0) / _2102);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _2136 = frontier_phi_14_12_ladder;
        }
        float _2357;
        if (_2105 > 0.0)
        {
            _2357 = abs((1.0 - _2095) / _2105);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_2105 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_2095 + 1.0) / _2105);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2357 = frontier_phi_23_19_ladder;
        }
        float _2603;
        if (_2108 > 0.0)
        {
            _2603 = abs((1.0 - _2099) / _2108);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_2108 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_2099 + 1.0) / _2108);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2603 = frontier_phi_35_30_ladder;
        }
        float _2605 = isnan(_2357) ? _2136 : (isnan(_2136) ? _2357 : min(_2136, _2357));
        float _2606 = isnan(_2603) ? _2605 : (isnan(_2605) ? _2603 : min(_2605, _2603));
        float _2610 = (_2606 * _2102) + _2091;
        float _2611 = (_2606 * _2105) + _2095;
        float _2612 = (_2606 * _2108) + _2099;
        float _2613 = _2606 * 9.9999997473787516355514526367188e-05;
        float _2615 = (-1.0) - _2613;
        float _2617 = _2613 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2612 > _2617) || ((_2612 < _2615) || ((_2611 > _2617) || ((_2611 < _2615) || ((_2610 < _2615) || (_2610 > _2617))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2736 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2612, cbModelParam._m0[9u].z, fma(_2611, cbModelParam._m0[9u].y, _2610 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2612, cbModelParam._m0[10u].z, fma(_2611, cbModelParam._m0[10u].y, _2610 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2612, cbModelParam._m0[11u].z, fma(_2611, cbModelParam._m0[11u].y, _2610 * cbModelParam._m0[11u].x))), _2044);
            frontier_phi_13_35_ladder = _2736.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2736.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2736.x * cbModelParam._m0[1u].y;
        }
        _2124 = frontier_phi_13_35_ladder_2;
        _2126 = frontier_phi_13_35_ladder_1;
        _2128 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _2112 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1238, _1239, _1240), _2044);
        _2124 = _2112.x * cbModelParam._m0[1u].y;
        _2126 = _2112.y * cbModelParam._m0[1u].y;
        _2128 = _2112.z * cbModelParam._m0[1u].y;
    }
    float _2132 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _1083);
    float _2133 = isnan(_2132) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2132 : min(cbModelParam._m0[25u].w, _2132));
    float _2222;
    float _2224;
    float _2226;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2186 = fma(_1299, cbModelParam._m0[21u].z, fma(_1295, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1291)) + cbModelParam._m0[21u].w;
        float _2190 = fma(_1299, cbModelParam._m0[22u].z, fma(_1295, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1291)) + cbModelParam._m0[22u].w;
        float _2194 = fma(_1299, cbModelParam._m0[23u].z, fma(_1295, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1291)) + cbModelParam._m0[23u].w;
        float _2197 = fma(_1240, cbModelParam._m0[21u].z, fma(_1239, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1238));
        float _2200 = fma(_1240, cbModelParam._m0[22u].z, fma(_1239, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1238));
        float _2203 = fma(_1240, cbModelParam._m0[23u].z, fma(_1239, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1238));
        float _2362;
        if (_2197 > 0.0)
        {
            _2362 = abs((1.0 - _2186) / _2197);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_2197 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_2186 + 1.0) / _2197);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2362 = frontier_phi_25_21_ladder;
        }
        float _2630;
        if (_2200 > 0.0)
        {
            _2630 = abs((1.0 - _2190) / _2200);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_2200 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_2190 + 1.0) / _2200);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2630 = frontier_phi_37_32_ladder;
        }
        float _2835;
        if (_2203 > 0.0)
        {
            _2835 = abs((1.0 - _2194) / _2203);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_2203 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_2194 + 1.0) / _2203);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2835 = frontier_phi_46_43_ladder;
        }
        float _2837 = isnan(_2630) ? _2362 : (isnan(_2362) ? _2630 : min(_2362, _2630));
        float _2838 = isnan(_2835) ? _2837 : (isnan(_2837) ? _2835 : min(_2837, _2835));
        float _2842 = (_2838 * _2197) + _2186;
        float _2843 = (_2838 * _2200) + _2190;
        float _2844 = (_2838 * _2203) + _2194;
        float _2845 = _2838 * 9.9999997473787516355514526367188e-05;
        float _2846 = (-1.0) - _2845;
        float _2848 = _2845 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2844 > _2848) || ((_2844 < _2846) || ((_2843 > _2848) || ((_2843 < _2846) || ((_2842 < _2846) || (_2842 > _2848))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _3043 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2844, cbModelParam._m0[17u].z, fma(_2843, cbModelParam._m0[17u].y, _2842 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2844, cbModelParam._m0[18u].z, fma(_2843, cbModelParam._m0[18u].y, _2842 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2844, cbModelParam._m0[19u].z, fma(_2843, cbModelParam._m0[19u].y, _2842 * cbModelParam._m0[19u].x))), _2133);
            frontier_phi_22_46_ladder = _3043.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _3043.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _3043.x * cbModelParam._m0[1u].z;
        }
        _2222 = frontier_phi_22_46_ladder_2;
        _2224 = frontier_phi_22_46_ladder_1;
        _2226 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _2206 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1238, _1239, _1240), _2133);
        _2222 = _2206.x * cbModelParam._m0[1u].z;
        _2224 = _2206.y * cbModelParam._m0[1u].z;
        _2226 = _2206.z * cbModelParam._m0[1u].z;
    }
    float _2238 = ((((1.0 - _1259) * ((_1246 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_1259 * _1246)) * _1230;
    float _2239 = _2238 * ((cbModelParam._m0[1u].w * (_2222 - _2124)) + _2124);
    float _2240 = _2238 * ((cbModelParam._m0[1u].w * (_2224 - _2126)) + _2126);
    float _2241 = _2238 * ((cbModelParam._m0[1u].w * (_2226 - _2128)) + _2128);
    float _2244 = fma(_2241, cbSceneParam._m0[89u].z, fma(_2240, cbSceneParam._m0[89u].y, _2239 * cbSceneParam._m0[89u].x));
    float _2247 = fma(_2241, cbSceneParam._m0[90u].z, fma(_2240, cbSceneParam._m0[90u].y, _2239 * cbSceneParam._m0[90u].x));
    float _2250 = fma(_2241, cbSceneParam._m0[91u].z, fma(_2240, cbSceneParam._m0[91u].y, _2239 * cbSceneParam._m0[91u].x));
    vec4 _2258 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_1167, _1168));
    float _2260 = _2258.w;
    float _2272 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _2260);
    float _2273 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _2260);
    float _2274 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _2260);
    uvec4 _2278 = floatBitsToUint(cbInstanceData._m0[_289 + 5u]);
    uint _2280 = _2278.x * 14u;
    uint _2281 = _2280 + 13u;
    float _2288 = _1230 + (-1.0);
    float _2293 = (cbLight._m0[_2281].x * _2288) + 1.0;
    float _2294 = (cbLight._m0[_2281].y * _2288) + 1.0;
    float _2295 = (cbLight._m0[_2281].z * _2288) + 1.0;
    float _2296 = (cbLight._m0[_2281].w * _2288) + 1.0;
    uint _2297 = _2280 + 5u;
    float _2303 = isnan(1.0) ? _2294 : (isnan(_2294) ? 1.0 : min(_2294, 1.0));
    uint _2307 = _2280 + 4u;
    float _2316 = isnan(1.0) ? _2293 : (isnan(_2293) ? 1.0 : min(_2293, 1.0));
    uint _2320 = _2280 | 1u;
    float _2331 = dot(vec3(cbLight._m0[_2280].xyz), vec3(_1080, _1081, _1082));
    float _2334 = dot(vec3(cbLight._m0[_2320].xyz), vec3(_1080, _1081, _1082));
    float _4524 = isnan(0.0) ? _2331 : (isnan(_2331) ? 0.0 : max(_2331, 0.0));
    float _4535 = isnan(0.0) ? _2334 : (isnan(_2334) ? 0.0 : max(_2334, 0.0));
    float _2339 = (isnan(1.0) ? _4524 : (isnan(_4524) ? 1.0 : min(_4524, 1.0))) * 0.3183098733425140380859375;
    float _2341 = (isnan(1.0) ? _4535 : (isnan(_4535) ? 1.0 : min(_4535, 1.0))) * 0.3183098733425140380859375;
    float _2348 = ((cbLight._m0[_2297].x * _2303) * _2341) + (((cbLight._m0[_2307].x * _2272) * _2316) * _2339);
    float _2349 = ((_2303 * cbLight._m0[_2297].y) * _2341) + (((cbLight._m0[_2307].y * _2273) * _2316) * _2339);
    float _2350 = ((_2303 * cbLight._m0[_2297].z) * _2341) + (((cbLight._m0[_2307].z * _2274) * _2316) * _2339);
    uvec4 _2354 = floatBitsToUint(cbLight._m0[_2280 + 12u]);
    bool _2356 = _2354.x == 0u;
    float _2367;
    float _2369;
    float _2371;
    if (_2356)
    {
        _2367 = _2348;
        _2369 = _2349;
        _2371 = _2350;
    }
    else
    {
        uint _2375 = _2280 + 6u;
        float _2391 = (dot(vec3(cbLight._m0[_2280 + 2u].xyz), vec3(_1080, _1081, _1082)) * 0.5) + 0.5;
        float _2392 = _2391 * _2391;
        float _4546 = isnan(0.0) ? _2392 : (isnan(_2392) ? 0.0 : max(_2392, 0.0));
        float _2393 = isnan(1.0) ? _4546 : (isnan(_4546) ? 1.0 : min(_4546, 1.0));
        float _2394 = isnan(1.0) ? _2295 : (isnan(_2295) ? 1.0 : min(_2295, 1.0));
        _2367 = (((cbLight._m0[_2375].x * 0.3183098733425140380859375) * _2393) * _2394) + _2348;
        _2369 = (((cbLight._m0[_2375].y * 0.3183098733425140380859375) * _2393) * _2394) + _2349;
        _2371 = (((cbLight._m0[_2375].z * 0.3183098733425140380859375) * _2393) * _2394) + _2350;
    }
    bool _2374 = _2354.y == 0u;
    float _2412;
    float _2414;
    float _2416;
    if (_2374)
    {
        _2412 = _2367;
        _2414 = _2369;
        _2416 = _2371;
    }
    else
    {
        uint _2574 = _2280 + 7u;
        float _2590 = (dot(vec3(cbLight._m0[_2280 + 3u].xyz), vec3(_1080, _1081, _1082)) * 0.5) + 0.5;
        float _2591 = _2590 * _2590;
        float _4562 = isnan(0.0) ? _2591 : (isnan(_2591) ? 0.0 : max(_2591, 0.0));
        float _2592 = isnan(1.0) ? _4562 : (isnan(_4562) ? 1.0 : min(_4562, 1.0));
        float _2593 = isnan(1.0) ? _2296 : (isnan(_2296) ? 1.0 : min(_2296, 1.0));
        _2412 = (((cbLight._m0[_2574].x * 0.3183098733425140380859375) * _2592) * _2593) + _2367;
        _2414 = (((cbLight._m0[_2574].y * 0.3183098733425140380859375) * _2592) * _2593) + _2369;
        _2416 = (((cbLight._m0[_2574].z * 0.3183098733425140380859375) * _2592) * _2593) + _2371;
    }
    uint _2419 = _2280 + 8u;
    float _2432 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2280].w)) * _1083) * 0.949999988079071044921875);
    float _2433 = _2432 * _2432;
    float _2434 = cbLight._m0[_2280].x + _1159;
    float _2435 = cbLight._m0[_2280].y + _1160;
    float _2436 = cbLight._m0[_2280].z + _1161;
    float _2440 = inversesqrt(dot(vec3(_2434, _2435, _2436), vec3(_2434, _2435, _2436)));
    float _2441 = _2440 * _2434;
    float _2442 = _2440 * _2435;
    float _2443 = _2440 * _2436;
    float _2444 = dot(vec3(_1080, _1081, _1082), vec3(cbLight._m0[_2280].xyz));
    float _4578 = isnan(0.0) ? _2444 : (isnan(_2444) ? 0.0 : max(_2444, 0.0));
    float _2447 = isnan(1.0) ? _4578 : (isnan(_4578) ? 1.0 : min(_4578, 1.0));
    float _4589 = isnan(0.0) ? _1231 : (isnan(_1231) ? 0.0 : max(_1231, 0.0));
    float _2448 = isnan(1.0) ? _4589 : (isnan(_4589) ? 1.0 : min(_4589, 1.0));
    float _2449 = dot(vec3(_1080, _1081, _1082), vec3(_2441, _2442, _2443));
    float _4600 = isnan(0.0) ? _2449 : (isnan(_2449) ? 0.0 : max(_2449, 0.0));
    float _2452 = isnan(1.0) ? _4600 : (isnan(_4600) ? 1.0 : min(_4600, 1.0));
    float _2453 = dot(vec3(cbLight._m0[_2280].xyz), vec3(_2441, _2442, _2443));
    float _4611 = isnan(0.0) ? _2453 : (isnan(_2453) ? 0.0 : max(_2453, 0.0));
    float _2457 = _2433 * _2433;
    float _2461 = ((_2452 * _2452) * (_2457 + (-1.0))) + 1.0;
    float _2472 = (exp2(log2(1.0 - (isnan(1.0) ? _4611 : (isnan(_4611) ? 1.0 : min(_4611, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2473 = 1.0 - _2433;
    float _2484 = (0.5 / (((_2448 * ((_2447 * _2473) + _2433)) + 9.9999999392252902907785028219223e-09) + (((_2448 * _2473) + _2433) * _2447))) * _2447;
    float _4622 = isnan(0.0) ? _2484 : (isnan(_2484) ? 0.0 : max(_2484, 0.0));
    float _2486 = (isnan(1.0) ? _4622 : (isnan(_4622) ? 1.0 : min(_4622, 1.0))) * (_2457 / ((_2461 * _2461) * 3.141590118408203125));
    uint _2500 = _2280 + 9u;
    float _2511 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2320].w)) * _1083) * 0.949999988079071044921875);
    float _2512 = _2511 * _2511;
    float _2513 = cbLight._m0[_2320].x + _1159;
    float _2514 = cbLight._m0[_2320].y + _1160;
    float _2515 = cbLight._m0[_2320].z + _1161;
    float _2519 = inversesqrt(dot(vec3(_2513, _2514, _2515), vec3(_2513, _2514, _2515)));
    float _2520 = _2519 * _2513;
    float _2521 = _2519 * _2514;
    float _2522 = _2519 * _2515;
    float _2523 = dot(vec3(_1080, _1081, _1082), vec3(cbLight._m0[_2320].xyz));
    float _4633 = isnan(0.0) ? _2523 : (isnan(_2523) ? 0.0 : max(_2523, 0.0));
    float _2526 = isnan(1.0) ? _4633 : (isnan(_4633) ? 1.0 : min(_4633, 1.0));
    float _2527 = dot(vec3(_1080, _1081, _1082), vec3(_2520, _2521, _2522));
    float _4644 = isnan(0.0) ? _2527 : (isnan(_2527) ? 0.0 : max(_2527, 0.0));
    float _2530 = isnan(1.0) ? _4644 : (isnan(_4644) ? 1.0 : min(_4644, 1.0));
    float _2531 = dot(vec3(cbLight._m0[_2320].xyz), vec3(_2520, _2521, _2522));
    float _4655 = isnan(0.0) ? _2531 : (isnan(_2531) ? 0.0 : max(_2531, 0.0));
    float _2535 = _2512 * _2512;
    float _2539 = ((_2530 * _2530) * (_2535 + (-1.0))) + 1.0;
    float _2548 = (exp2(log2(1.0 - (isnan(1.0) ? _4655 : (isnan(_4655) ? 1.0 : min(_4655, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2549 = 1.0 - _2512;
    float _2559 = (0.5 / (((_2448 * ((_2526 * _2549) + _2512)) + 9.9999999392252902907785028219223e-09) + (((_2448 * _2549) + _2512) * _2526))) * _2526;
    float _4666 = isnan(0.0) ? _2559 : (isnan(_2559) ? 0.0 : max(_2559, 0.0));
    float _2561 = (isnan(1.0) ? _4666 : (isnan(_4666) ? 1.0 : min(_4666, 1.0))) * (_2535 / ((_2539 * _2539) * 3.141590118408203125));
    float _2571 = (((_2548 * cbLight._m0[_2500].x) * _2561) * _2303) + ((((cbLight._m0[_2419].x * _2272) * _2472) * _2486) * _2316);
    float _2572 = (((_2548 * cbLight._m0[_2500].y) * _2561) * _2303) + ((((cbLight._m0[_2419].y * _2273) * _2472) * _2486) * _2316);
    float _2573 = (((_2548 * cbLight._m0[_2500].z) * _2561) * _2303) + ((((cbLight._m0[_2419].z * _2274) * _2472) * _2486) * _2316);
    float _2635;
    float _2637;
    float _2639;
    if (_2356)
    {
        _2635 = _2571;
        _2637 = _2572;
        _2639 = _2573;
    }
    else
    {
        uint _2641 = _2280 + 2u;
        uint _2645 = _2280 + 10u;
        float _2659 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2641].w)) * _1083) * 0.949999988079071044921875);
        float _2660 = _2659 * _2659;
        float _2661 = cbLight._m0[_2641].x + _1159;
        float _2662 = cbLight._m0[_2641].y + _1160;
        float _2663 = cbLight._m0[_2641].z + _1161;
        float _2667 = inversesqrt(dot(vec3(_2661, _2662, _2663), vec3(_2661, _2662, _2663)));
        float _2668 = _2667 * _2661;
        float _2669 = _2667 * _2662;
        float _2670 = _2667 * _2663;
        float _2671 = dot(vec3(_1080, _1081, _1082), vec3(cbLight._m0[_2641].xyz));
        float _4677 = isnan(0.0) ? _2671 : (isnan(_2671) ? 0.0 : max(_2671, 0.0));
        float _2674 = isnan(1.0) ? _4677 : (isnan(_4677) ? 1.0 : min(_4677, 1.0));
        float _2675 = dot(vec3(_1080, _1081, _1082), vec3(_2668, _2669, _2670));
        float _4688 = isnan(0.0) ? _2675 : (isnan(_2675) ? 0.0 : max(_2675, 0.0));
        float _2678 = isnan(1.0) ? _4688 : (isnan(_4688) ? 1.0 : min(_4688, 1.0));
        float _2679 = dot(vec3(cbLight._m0[_2641].xyz), vec3(_2668, _2669, _2670));
        float _4699 = isnan(0.0) ? _2679 : (isnan(_2679) ? 0.0 : max(_2679, 0.0));
        float _2683 = _2660 * _2660;
        float _2687 = ((_2678 * _2678) * (_2683 + (-1.0))) + 1.0;
        float _2696 = (exp2(log2(1.0 - (isnan(1.0) ? _4699 : (isnan(_4699) ? 1.0 : min(_4699, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2697 = 1.0 - _2660;
        float _2707 = (0.5 / (((_2448 * ((_2674 * _2697) + _2660)) + 9.9999999392252902907785028219223e-09) + (((_2448 * _2697) + _2660) * _2674))) * _2674;
        float _4710 = isnan(0.0) ? _2707 : (isnan(_2707) ? 0.0 : max(_2707, 0.0));
        float _2709 = (isnan(1.0) ? _4710 : (isnan(_4710) ? 1.0 : min(_4710, 1.0))) * (_2683 / ((_2687 * _2687) * 3.141590118408203125));
        float _2710 = isnan(1.0) ? _2295 : (isnan(_2295) ? 1.0 : min(_2295, 1.0));
        _2635 = (((_2696 * cbLight._m0[_2645].x) * _2709) * _2710) + _2571;
        _2637 = (((_2696 * cbLight._m0[_2645].y) * _2709) * _2710) + _2572;
        _2639 = (((_2696 * cbLight._m0[_2645].z) * _2709) * _2710) + _2573;
    }
    float _2745;
    float _2747;
    float _2749;
    if (_2374)
    {
        _2745 = _2635;
        _2747 = _2637;
        _2749 = _2639;
    }
    else
    {
        uint _2756 = _2280 + 3u;
        uint _2760 = _2280 + 11u;
        float _2774 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2756].w)) * _1083) * 0.949999988079071044921875);
        float _2775 = _2774 * _2774;
        float _2776 = cbLight._m0[_2756].x + _1159;
        float _2777 = cbLight._m0[_2756].y + _1160;
        float _2778 = cbLight._m0[_2756].z + _1161;
        float _2782 = inversesqrt(dot(vec3(_2776, _2777, _2778), vec3(_2776, _2777, _2778)));
        float _2783 = _2782 * _2776;
        float _2784 = _2782 * _2777;
        float _2785 = _2782 * _2778;
        float _2786 = dot(vec3(_1080, _1081, _1082), vec3(cbLight._m0[_2756].xyz));
        float _4726 = isnan(0.0) ? _2786 : (isnan(_2786) ? 0.0 : max(_2786, 0.0));
        float _2789 = isnan(1.0) ? _4726 : (isnan(_4726) ? 1.0 : min(_4726, 1.0));
        float _2790 = dot(vec3(_1080, _1081, _1082), vec3(_2783, _2784, _2785));
        float _4737 = isnan(0.0) ? _2790 : (isnan(_2790) ? 0.0 : max(_2790, 0.0));
        float _2793 = isnan(1.0) ? _4737 : (isnan(_4737) ? 1.0 : min(_4737, 1.0));
        float _2794 = dot(vec3(cbLight._m0[_2756].xyz), vec3(_2783, _2784, _2785));
        float _4748 = isnan(0.0) ? _2794 : (isnan(_2794) ? 0.0 : max(_2794, 0.0));
        float _2798 = _2775 * _2775;
        float _2802 = ((_2793 * _2793) * (_2798 + (-1.0))) + 1.0;
        float _2811 = (exp2(log2(1.0 - (isnan(1.0) ? _4748 : (isnan(_4748) ? 1.0 : min(_4748, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2812 = 1.0 - _2775;
        float _2822 = (0.5 / (((_2448 * ((_2789 * _2812) + _2775)) + 9.9999999392252902907785028219223e-09) + (((_2448 * _2812) + _2775) * _2789))) * _2789;
        float _4759 = isnan(0.0) ? _2822 : (isnan(_2822) ? 0.0 : max(_2822, 0.0));
        float _2824 = (isnan(1.0) ? _4759 : (isnan(_4759) ? 1.0 : min(_4759, 1.0))) * (_2798 / ((_2802 * _2802) * 3.141590118408203125));
        float _2825 = isnan(1.0) ? _2296 : (isnan(_2296) ? 1.0 : min(_2296, 1.0));
        _2745 = (((_2811 * cbLight._m0[_2760].x) * _2824) * _2825) + _2635;
        _2747 = (((_2811 * cbLight._m0[_2760].y) * _2824) * _2825) + _2637;
        _2749 = (((_2811 * cbLight._m0[_2760].z) * _2824) * _2825) + _2639;
    }
    float _2960;
    float _2962;
    float _2964;
    float _2966;
    float _2968;
    float _2970;
    if (_2278.y == 0u)
    {
        float _2900 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2901 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2900;
        float _2902 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2900;
        float _2903 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2900;
        uvec4 _2915 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2916 = _2915.x;
        uint _2927 = uint((float(_2915.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1168) / _2916))) + floor(float(uint(cbSceneParam._m0[85u].x * _1167) / _2916)));
        float _2937 = (log2(_2903 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2938 = isnan(0.0) ? _2937 : (isnan(_2937) ? 0.0 : max(_2937, 0.0));
        uint _2941 = uint(isnan(14.0) ? _2938 : (isnan(_2938) ? 14.0 : min(_2938, 14.0)));
        uvec4 _2946 = texelFetch(g_lightClusterGridBuffer, int(((_2941 << 2u) + (_2927 << 6u)) >> 2u));
        uint _2947 = _2946.x;
        uint _2948 = _2915.z;
        float _3048;
        float _3050;
        float _3052;
        float _3054;
        float _3056;
        float _3058;
        if (((((1u << ((_2948 >> 4u) & 15u)) + 4294967295u) & _2947) == 0u) || ((_2948 & 240u) == 0u))
        {
            _3048 = 0.0;
            _3050 = 0.0;
            _3052 = 0.0;
            _3054 = 0.0;
            _3056 = 0.0;
            _3058 = 0.0;
        }
        else
        {
            float _3049;
            float _3051;
            float _3053;
            float _3055;
            float _3057;
            float _3059;
            float _3192 = 0.0;
            float _3193 = 0.0;
            float _3194 = 0.0;
            float _3195 = 0.0;
            float _3196 = 0.0;
            float _3197 = 0.0;
            uint _3198 = 0u;
            uint _3207;
            bool _3208;
            for (;;)
            {
                _3207 = texelFetch(g_lightClassification, int((((_2941 << 5u) + (_2927 << 9u)) + (_3198 << 2u)) >> 2u)).x;
                _3208 = _3207 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_3208)
                {
                    frontier_phi_61_pred = _3192;
                    frontier_phi_61_pred_1 = _3197;
                    frontier_phi_61_pred_2 = _3196;
                    frontier_phi_61_pred_3 = _3195;
                    frontier_phi_61_pred_4 = _3194;
                    frontier_phi_61_pred_5 = _3193;
                }
                else
                {
                    float _3316;
                    float _3317;
                    float _3318;
                    float _3319;
                    float _3320;
                    float _3321;
                    uint _3322;
                    _3316 = _3192;
                    _3317 = _3193;
                    _3318 = _3194;
                    _3319 = _3195;
                    _3320 = _3196;
                    _3321 = _3197;
                    _3322 = _3207;
                    float _3248;
                    float _3249;
                    float _3250;
                    float _3251;
                    float _3252;
                    float _3253;
                    for (;;)
                    {
                        uint _3326 = uint(findLSB(_3322)) + (_3198 << 5u);
                        uint _3323 = (_3322 + 4294967295u) & _3322;
                        uint _3328 = _3326 * 48u;
                        vec4 _3342 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3328)).x, texelFetch(g_PointLightRenderingBuffer, int(_3328 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3328 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3328 + 3u)).x));
                        uint _3348 = (_3326 * 48u) + 4u;
                        vec4 _3361 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3348)).x, texelFetch(g_PointLightRenderingBuffer, int(_3348 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3348 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3348 + 3u)).x));
                        uint _3367 = (_3326 * 48u) + 8u;
                        vec3 _3378 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3367)).x, texelFetch(g_PointLightRenderingBuffer, int(_3367 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3367 + 2u)).x));
                        float _3382 = _3342.x - _2901;
                        float _3383 = _3342.y - _2902;
                        float _3384 = _3342.z - _2903;
                        float _3385 = dot(vec3(_3382, _3383, _3384), vec3(_3382, _3383, _3384));
                        float _3388 = inversesqrt(_3385);
                        float _3389 = _3388 * _3382;
                        float _3390 = _3388 * _3383;
                        float _3391 = _3388 * _3384;
                        float _3392 = dot(vec3(_1186, _1189, _1192), vec3(_3389, _3390, _3391));
                        float _3397 = 1.0 - (_3385 * _3342.w);
                        float _4785 = isnan(0.0) ? _3397 : (isnan(_3397) ? 0.0 : max(_3397, 0.0));
                        float _3398 = isnan(1.0) ? _4785 : (isnan(_4785) ? 1.0 : min(_4785, 1.0));
                        float _3399 = sqrt(_3385) * _3361.w;
                        float _3402 = 1.39999997615814208984375 / (_3399 + 1.39999997615814208984375);
                        float _3403 = _3402 * _3402;
                        float _3406 = ((1.0 - _3403) * _3392) + _3403;
                        float _3409 = _3399 * _3399;
                        float _3413 = ((isnan(0.0) ? _3406 : (isnan(_3406) ? 0.0 : max(_3406, 0.0))) * _3398) / ((_3409 * 0.699999988079071044921875) + 1.0);
                        float _3417 = (-0.0) - _2901;
                        float _3418 = (-0.0) - _2902;
                        float _3419 = (-0.0) - _2903;
                        float _3423 = inversesqrt(dot(vec3(_3417, _3418, _3419), vec3(_3417, _3418, _3419)));
                        float _3424 = _3423 * _3417;
                        float _3425 = _3423 * _3418;
                        float _3426 = _3423 * _3419;
                        float _3434 = exp2(log2(1.0 / ((_3409 * 3.5) + 5.0)) * 0.25);
                        float _3435 = 1.0 - _1246;
                        float _3442 = sqrt(1.0 - ((1.0 - (_3435 * _3435)) * (1.0 - (_3434 * _3434))));
                        float _3443 = _3442 * _3442;
                        float _3444 = _3443 * _3443;
                        float _3445 = _3424 + _3389;
                        float _3446 = _3425 + _3390;
                        float _3447 = _3426 + _3391;
                        float _3451 = inversesqrt(dot(vec3(_3445, _3446, _3447), vec3(_3445, _3446, _3447)));
                        float _3455 = dot(vec3(_1186, _1189, _1192), vec3(_3424, _3425, _3426));
                        float _4801 = isnan(0.0) ? _3455 : (isnan(_3455) ? 0.0 : max(_3455, 0.0));
                        float _3458 = isnan(1.0) ? _4801 : (isnan(_4801) ? 1.0 : min(_4801, 1.0));
                        float _3459 = dot(vec3(_1186, _1189, _1192), vec3(_3451 * _3445, _3451 * _3446, _3451 * _3447));
                        float _4812 = isnan(0.0) ? _3459 : (isnan(_3459) ? 0.0 : max(_3459, 0.0));
                        float _3462 = isnan(1.0) ? _4812 : (isnan(_4812) ? 1.0 : min(_4812, 1.0));
                        float _3466 = ((_3462 * _3462) * (_3444 + (-1.0))) + 1.0;
                        float _3467 = _3402 * _3443;
                        float _3468 = _3467 * _3467;
                        float _3471 = ((1.0 - _3468) * _3392) + _3468;
                        float _4823 = isnan(0.0) ? _3471 : (isnan(_3471) ? 0.0 : max(_3471, 0.0));
                        float _3472 = isnan(1.0) ? _4823 : (isnan(_4823) ? 1.0 : min(_4823, 1.0));
                        float _3473 = 1.0 - _3443;
                        float _3483 = (0.5 / (((_3472 * ((_3458 * _3473) + _3443)) + 9.9999999392252902907785028219223e-09) + (((_3472 * _3473) + _3443) * _3458))) * _3472;
                        float _4834 = isnan(0.0) ? _3483 : (isnan(_3483) ? 0.0 : max(_3483, 0.0));
                        float _3494 = (((_3444 * 3.1415927410125732421875) * (isnan(1.0) ? _4834 : (isnan(_4834) ? 1.0 : min(_4834, 1.0)))) / ((_3466 * _3466) * ((_3409 * 2.1991131305694580078125) + 3.141590118408203125))) * _3398;
                        _3251 = (_3413 * _3361.x) + _3319;
                        _3252 = (_3413 * _3361.y) + _3320;
                        _3253 = (_3413 * _3361.z) + _3321;
                        _3248 = (_3494 * _3378.x) + _3316;
                        _3249 = (_3494 * _3378.y) + _3317;
                        _3250 = (_3494 * _3378.z) + _3318;
                        if (_3323 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3316 = _3248;
                            _3317 = _3249;
                            _3318 = _3250;
                            _3319 = _3251;
                            _3320 = _3252;
                            _3321 = _3253;
                            _3322 = _3323;
                        }
                    }
                    frontier_phi_61_pred = _3248;
                    frontier_phi_61_pred_1 = _3253;
                    frontier_phi_61_pred_2 = _3252;
                    frontier_phi_61_pred_3 = _3251;
                    frontier_phi_61_pred_4 = _3250;
                    frontier_phi_61_pred_5 = _3249;
                }
                _3049 = frontier_phi_61_pred;
                _3059 = frontier_phi_61_pred_1;
                _3057 = frontier_phi_61_pred_2;
                _3055 = frontier_phi_61_pred_3;
                _3053 = frontier_phi_61_pred_4;
                _3051 = frontier_phi_61_pred_5;
                uint _3199 = _3198 + 1u;
                if (_3199 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3192 = _3049;
                    _3193 = _3051;
                    _3194 = _3053;
                    _3195 = _3055;
                    _3196 = _3057;
                    _3197 = _3059;
                    _3198 = _3199;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3048 = _3049;
            _3050 = _3051;
            _3052 = _3053;
            _3054 = _3055;
            _3056 = _3057;
            _3058 = _3059;
        }
        uvec4 _3062 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3063 = _3062.z;
        uint _3065 = (_3063 >> 8u) & 15u;
        float _3160;
        float _3162;
        float _3164;
        float _3166;
        float _3168;
        float _3170;
        if (((4294967295u << _3065) & _2947) == 0u)
        {
            _3160 = _3048;
            _3162 = _3050;
            _3164 = _3052;
            _3166 = _3054;
            _3168 = _3056;
            _3170 = _3058;
        }
        else
        {
            float _3185 = inversesqrt(dot(vec3(_2901, _2902, _2903), vec3(_2901, _2902, _2903)));
            float _3186 = _3185 * _2901;
            float _3187 = _3185 * _2902;
            float _3188 = _3185 * _2903;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_3065 < ((_3063 >> 12u) & 15u))
            {
                float _3161;
                float _3163;
                float _3165;
                float _3167;
                float _3169;
                float _3171;
                float _3299 = _3048;
                float _3300 = _3050;
                float _3301 = _3052;
                float _3302 = _3054;
                float _3303 = _3056;
                float _3304 = _3058;
                uint _3305 = _3065;
                uint _3314;
                bool _3315;
                for (;;)
                {
                    _3314 = texelFetch(g_lightClassification, int((((_2941 << 5u) + (_2927 << 9u)) + (_3305 << 2u)) >> 2u)).x;
                    _3315 = _3314 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_3315)
                    {
                        frontier_phi_67_pred = _3302;
                        frontier_phi_67_pred_1 = _3303;
                        frontier_phi_67_pred_2 = _3304;
                        frontier_phi_67_pred_3 = _3301;
                        frontier_phi_67_pred_4 = _3300;
                        frontier_phi_67_pred_5 = _3299;
                    }
                    else
                    {
                        float _3499;
                        float _3500;
                        float _3501;
                        float _3502;
                        float _3503;
                        float _3504;
                        float _3792;
                        float _3793;
                        float _3794;
                        float _3795;
                        float _3796;
                        float _3797;
                        float _3512 = _3299;
                        float _3513 = _3300;
                        float _3514 = _3301;
                        float _3515 = _3302;
                        float _3516 = _3303;
                        float _3517 = _3304;
                        uint _3518 = _3314;
                        uint _3519;
                        vec4 _3544;
                        float _3545;
                        vec4 _3560;
                        vec3 _3572;
                        vec4 _3587;
                        vec4 _3602;
                        float _3648;
                        bool _3649;
                        for (;;)
                        {
                            uint _3529 = ((_3305 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3518));
                            _3519 = (_3518 + 4294967295u) & _3518;
                            uint _3531 = _3529 * 40u;
                            _3544 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3531)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3531 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3531 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3531 + 3u)).x));
                            _3545 = _3544.w;
                            uint _3547 = (_3529 * 40u) + 4u;
                            _3560 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3547)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3547 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3547 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3547 + 3u)).x));
                            uint _3562 = (_3529 * 40u) + 8u;
                            _3572 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3562)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3562 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3562 + 2u)).x));
                            uint _3574 = (_3529 * 40u) + 16u;
                            _3587 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3574)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3574 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3574 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3574 + 3u)).x));
                            uint _3589 = (_3529 * 40u) + 20u;
                            _3602 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3589)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3589 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3589 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3589 + 3u)).x));
                            uint _3604 = (_3529 * 40u) + 24u;
                            vec4 _3617 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3604)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3604 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3604 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3604 + 3u)).x));
                            uint _3623 = (_3529 * 40u) + 28u;
                            vec4 _3636 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3623)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3623 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3623 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3623 + 3u)).x));
                            _3648 = fma(_2903, _3636.z, fma(_2902, _3636.y, _3636.x * _2901)) + _3636.w;
                            _3649 = !((fma(_2903, _3617.z, fma(_2902, _3617.y, _3617.x * _2901)) + _3617.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3649)
                            {
                                float _3676 = _3544.x - _2901;
                                float _3677 = _3544.y - _2902;
                                float _3678 = _3544.z - _2903;
                                float _3679 = dot(vec3(_3676, _3677, _3678), vec3(_3676, _3677, _3678));
                                float _3682 = inversesqrt(_3679);
                                float _3683 = _3682 * _3676;
                                float _3684 = _3682 * _3677;
                                float _3685 = _3682 * _3678;
                                float _3689 = 1.0 - (_3679 / (_3545 * _3545));
                                float _4845 = isnan(0.0) ? _3689 : (isnan(_3689) ? 0.0 : max(_3689, 0.0));
                                float _3690 = isnan(1.0) ? _4845 : (isnan(_4845) ? 1.0 : min(_4845, 1.0));
                                float _3694 = sqrt(_3679) * _3560.w;
                                float _3696 = 1.39999997615814208984375 / (_3694 + 1.39999997615814208984375);
                                float _3697 = _3696 * _3696;
                                float _3700 = ((1.0 - _3697) * dot(vec3(_3683, _3684, _3685), vec3(_1186, _1189, _1192))) + _3697;
                                float _3703 = _3694 * _3694;
                                float _3707 = (fma(_2903, _3587.z, fma(_2902, _3587.y, _3587.x * _2901)) + _3587.w) / _3648;
                                float _3708 = (fma(_2903, _3602.z, fma(_2902, _3602.y, _3602.x * _2901)) + _3602.w) / _3648;
                                float _3712 = 1.0 - dot(vec2(_3707, _3708), vec2(_3707, _3708));
                                float _4861 = isnan(0.0) ? _3712 : (isnan(_3712) ? 0.0 : max(_3712, 0.0));
                                float _3713 = isnan(1.0) ? _4861 : (isnan(_4861) ? 1.0 : min(_4861, 1.0));
                                float _3714 = _3713 * (((isnan(0.0) ? _3700 : (isnan(_3700) ? 0.0 : max(_3700, 0.0))) * _3690) / ((_3703 * 0.699999988079071044921875) + 1.0));
                                float _3726 = exp2(log2(1.0 / ((_3703 * 3.5) + 5.0)) * 0.25);
                                float _3727 = 1.0 - _1246;
                                float _3734 = sqrt(1.0 - ((1.0 - (_3727 * _3727)) * (1.0 - (_3726 * _3726))));
                                float _3735 = _3734 * _3734;
                                float _3736 = _3735 * _3735;
                                float _3737 = _3683 - _3186;
                                float _3738 = _3684 - _3187;
                                float _3739 = _3685 - _3188;
                                float _3743 = inversesqrt(dot(vec3(_3737, _3738, _3739), vec3(_3737, _3738, _3739)));
                                float _3747 = dot(vec3(_1186, _1189, _1192), vec3((-0.0) - _3186, (-0.0) - _3187, (-0.0) - _3188));
                                float _4872 = isnan(0.0) ? _3747 : (isnan(_3747) ? 0.0 : max(_3747, 0.0));
                                float _3750 = isnan(1.0) ? _4872 : (isnan(_4872) ? 1.0 : min(_4872, 1.0));
                                float _3751 = dot(vec3(_1186, _1189, _1192), vec3(_3743 * _3737, _3743 * _3738, _3743 * _3739));
                                float _4883 = isnan(0.0) ? _3751 : (isnan(_3751) ? 0.0 : max(_3751, 0.0));
                                float _3754 = isnan(1.0) ? _4883 : (isnan(_4883) ? 1.0 : min(_4883, 1.0));
                                float _3758 = ((_3754 * _3754) * (_3736 + (-1.0))) + 1.0;
                                float _3759 = _3696 * _3735;
                                float _3760 = _3759 * _3759;
                                float _3766 = ((1.0 - _3760) * dot(vec3(_1186, _1189, _1192), vec3(_3683, _3684, _3685))) + _3760;
                                float _4894 = isnan(0.0) ? _3766 : (isnan(_3766) ? 0.0 : max(_3766, 0.0));
                                float _3767 = isnan(1.0) ? _4894 : (isnan(_4894) ? 1.0 : min(_4894, 1.0));
                                float _3768 = 1.0 - _3735;
                                float _3778 = (0.5 / (((_3767 * ((_3750 * _3768) + _3735)) + 9.9999999392252902907785028219223e-09) + (((_3767 * _3768) + _3735) * _3750))) * _3767;
                                float _4905 = isnan(0.0) ? _3778 : (isnan(_3778) ? 0.0 : max(_3778, 0.0));
                                float _3788 = (_3713 * _3690) * (((_3736 * 3.1415927410125732421875) * (isnan(1.0) ? _4905 : (isnan(_4905) ? 1.0 : min(_4905, 1.0)))) / ((_3758 * _3758) * ((_3703 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3788 * _3572.x;
                                frontier_phi_73_pred_1 = _3788 * _3572.y;
                                frontier_phi_73_pred_2 = _3714 * _3560.z;
                                frontier_phi_73_pred_3 = _3714 * _3560.y;
                                frontier_phi_73_pred_4 = _3714 * _3560.x;
                                frontier_phi_73_pred_5 = _3788 * _3572.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3792 = frontier_phi_73_pred;
                            _3793 = frontier_phi_73_pred_1;
                            _3797 = frontier_phi_73_pred_2;
                            _3796 = frontier_phi_73_pred_3;
                            _3795 = frontier_phi_73_pred_4;
                            _3794 = frontier_phi_73_pred_5;
                            _3502 = _3795 + _3515;
                            _3503 = _3796 + _3516;
                            _3504 = _3797 + _3517;
                            _3499 = _3792 + _3512;
                            _3500 = _3793 + _3513;
                            _3501 = _3794 + _3514;
                            if (_3519 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3512 = _3499;
                                _3513 = _3500;
                                _3514 = _3501;
                                _3515 = _3502;
                                _3516 = _3503;
                                _3517 = _3504;
                                _3518 = _3519;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3502;
                        frontier_phi_67_pred_1 = _3503;
                        frontier_phi_67_pred_2 = _3504;
                        frontier_phi_67_pred_3 = _3501;
                        frontier_phi_67_pred_4 = _3500;
                        frontier_phi_67_pred_5 = _3499;
                    }
                    _3167 = frontier_phi_67_pred;
                    _3169 = frontier_phi_67_pred_1;
                    _3171 = frontier_phi_67_pred_2;
                    _3165 = frontier_phi_67_pred_3;
                    _3163 = frontier_phi_67_pred_4;
                    _3161 = frontier_phi_67_pred_5;
                    uint _3306 = _3305 + 1u;
                    if (_3306 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3299 = _3161;
                        _3300 = _3163;
                        _3301 = _3165;
                        _3302 = _3167;
                        _3303 = _3169;
                        _3304 = _3171;
                        _3305 = _3306;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _3169;
                frontier_phi_55_56_ladder_1 = _3171;
                frontier_phi_55_56_ladder_2 = _3167;
                frontier_phi_55_56_ladder_3 = _3165;
                frontier_phi_55_56_ladder_4 = _3163;
                frontier_phi_55_56_ladder_5 = _3161;
            }
            else
            {
                frontier_phi_55_56_ladder = _3056;
                frontier_phi_55_56_ladder_1 = _3058;
                frontier_phi_55_56_ladder_2 = _3054;
                frontier_phi_55_56_ladder_3 = _3052;
                frontier_phi_55_56_ladder_4 = _3050;
                frontier_phi_55_56_ladder_5 = _3048;
            }
            _3160 = frontier_phi_55_56_ladder_5;
            _3162 = frontier_phi_55_56_ladder_4;
            _3164 = frontier_phi_55_56_ladder_3;
            _3166 = frontier_phi_55_56_ladder_2;
            _3168 = frontier_phi_55_56_ladder;
            _3170 = frontier_phi_55_56_ladder_1;
        }
        float _3175 = isnan(1.0) ? _1230 : (isnan(_1230) ? 1.0 : min(_1230, 1.0));
        _2960 = (_3175 * _3166) + _2412;
        _2962 = (_3175 * _3168) + _2414;
        _2964 = (_3175 * _3170) + _2416;
        _2966 = ((_3160 * 0.039999999105930328369140625) * _3175) + _2745;
        _2968 = ((_3162 * 0.039999999105930328369140625) * _3175) + _2747;
        _2970 = ((_3164 * 0.039999999105930328369140625) * _3175) + _2749;
    }
    else
    {
        _2960 = _2412;
        _2962 = _2414;
        _2964 = _2416;
        _2966 = _2745;
        _2968 = _2747;
        _2970 = _2749;
    }
    float _4921 = isnan(0.0) ? _1215 : (isnan(_1215) ? 0.0 : max(_1215, 0.0));
    float _4932 = isnan(0.0) ? _1216 : (isnan(_1216) ? 0.0 : max(_1216, 0.0));
    float _4943 = isnan(0.0) ? _1217 : (isnan(_1217) ? 0.0 : max(_1217, 0.0));
    uint _2990 = _289 + 6u;
    float _2998 = _1167 / cbSceneParam._m0[86u].x;
    float _2999 = _1168 / cbSceneParam._m0[86u].y;
    vec4 _3013 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2998, _2999, (log2((isnan(cbSceneParam._m0[77u].w) ? _1101 : (isnan(_1101) ? cbSceneParam._m0[77u].w : min(_1101, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3015 = _3013.x;
    float _3016 = _3013.y;
    float _3017 = _3013.z;
    float _3018 = _3013.w;
    float _3110;
    float _3112;
    float _3114;
    float _3116;
    if (_1101 > cbSceneParam._m0[78u].w)
    {
        float _3073 = isnan(_1101) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _1101 : min(cbSceneParam._m0[80u].w, _1101));
        float _3074 = _3073 / _1101;
        float _3085 = _3074 * _1152;
        float _3086 = _1153 * _3074;
        float _3087 = (-0.0) - _3086;
        float _3088 = _3074 * _1154;
        float _3090 = (cbSceneParam._m0[77u].w * _3087) / _3073;
        float _3091 = _3090 + cbSceneParam._m0[79u].w;
        float _3092 = cbSceneParam._m0[79u].w - _3086;
        float _3098 = sqrt(((_3085 * _3085) + (_3086 * _3086)) + (_3088 * _3088));
        float _3101 = (1.0 - (cbSceneParam._m0[77u].w / _3073)) * _3098;
        float _3106 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3108 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3261;
        if (abs((_3087 - _3090) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3261 = ((((_3091 > 0.0) ? exp2(_3106 * _3091) : (2.0 - exp2(_3108 * _3091))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3101;
        }
        else
        {
            float _3221 = 1.0 / cbSceneParam._m0[80u].x;
            float _3222 = isnan(_3092) ? _3091 : (isnan(_3091) ? _3092 : max(_3091, _3092));
            float _3223 = isnan(_3092) ? _3091 : (isnan(_3091) ? _3092 : min(_3091, _3092));
            float _3232 = isnan(0.0) ? _3222 : (isnan(_3222) ? 0.0 : min(_3222, 0.0));
            float _3233 = isnan(0.0) ? _3223 : (isnan(_3223) ? 0.0 : min(_3223, 0.0));
            _3261 = ((abs(_3098 / _3087) * cbSceneParam._m0[80u].y) * ((((_3232 - _3233) * 2.0) - ((exp2(_3106 * (isnan(0.0) ? _3222 : (isnan(_3222) ? 0.0 : max(_3222, 0.0)))) - exp2(_3106 * (isnan(0.0) ? _3223 : (isnan(_3223) ? 0.0 : max(_3223, 0.0))))) * _3221)) - ((exp2(_3108 * _3232) - exp2(_3108 * _3233)) * _3221))) + (_3101 * cbSceneParam._m0[80u].z);
        }
        vec4 _3263 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2998, _2999, 1.0), 0.0);
        float _3272 = exp2((_3261 * (-1.44269502162933349609375)) * (1.0 - _3263.w));
        float _3273 = log2(_3272);
        float _3289 = log2(_3018);
        _3110 = (exp2(_3289 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3273 * cbSceneParam._m0[78u].x)) * _3263.x) / cbSceneParam._m0[78u].x)) + _3015;
        _3112 = (exp2(_3289 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3273 * cbSceneParam._m0[78u].y)) * _3263.y) / cbSceneParam._m0[78u].y)) + _3016;
        _3114 = (exp2(_3289 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3273 * cbSceneParam._m0[78u].z)) * _3263.z) / cbSceneParam._m0[78u].z)) + _3017;
        _3116 = _3272 * _3018;
    }
    else
    {
        _3110 = _3015;
        _3112 = _3016;
        _3114 = _3017;
        _3116 = _3018;
    }
    float _3128 = roundEven(cbMatDynParam._m0[0u].y);
    bool _3129 = _3128 == 3.0;
    float _3130 = log2(_3116);
    float _3137 = exp2(_3130 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4921 : (isnan(_4921) ? 1.0 : min(_4921, 1.0))) * (_2960 + ((isnan(0.0) ? _1954 : (isnan(_1954) ? 0.0 : max(_1954, 0.0))) * _1230))) + ((_2966 + ((isnan(0.0) ? _2244 : (isnan(_2244) ? 0.0 : max(_2244, 0.0))) * _2033)) * cbPerFrame._m0[3u].x));
    float _3138 = exp2(_3130 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4932 : (isnan(_4932) ? 1.0 : min(_4932, 1.0))) * (_2962 + ((isnan(0.0) ? _1957 : (isnan(_1957) ? 0.0 : max(_1957, 0.0))) * _1230))) + ((_2968 + ((isnan(0.0) ? _2247 : (isnan(_2247) ? 0.0 : max(_2247, 0.0))) * _2033)) * cbPerFrame._m0[3u].x));
    float _3139 = exp2(_3130 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4943 : (isnan(_4943) ? 1.0 : min(_4943, 1.0))) * (_2964 + ((isnan(0.0) ? _1960 : (isnan(_1960) ? 0.0 : max(_1960, 0.0))) * _1230))) + ((_2970 + ((isnan(0.0) ? _2250 : (isnan(_2250) ? 0.0 : max(_2250, 0.0))) * _2033)) * cbPerFrame._m0[3u].x));
    float _3148 = (_3128 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _3148 * (_3129 ? _3137 : (_3137 + (cbSceneParam._m0[72u].w * _3110)));
    SV_Target.y = _3148 * (_3129 ? _3138 : (_3138 + (cbSceneParam._m0[72u].w * _3112)));
    SV_Target.z = _3148 * (_3129 ? _3139 : (_3139 + (cbSceneParam._m0[72u].w * _3114)));
    SV_Target.w = cbInstanceData._m0[_2990].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2990].w;
}


