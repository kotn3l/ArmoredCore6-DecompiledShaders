#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_29;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_10;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_6;
layout(set = 0, binding = 23) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_8;
layout(set = 0, binding = 24) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_9;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1484;
float _4124;
float _4125;
float _4126;
float _4127;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _237 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _238 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _239 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _245 = inversesqrt(dot(vec3(_237, _238, _239), vec3(_237, _238, _239)));
    float _252 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _259 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _265 = uint(roundEven(NORMAL.w)) * 13u;
    uint _270 = _265 + 1u;
    uint _274 = _265 + 2u;
    float _283 = sqrt(((cbInstanceData._m0[_270].x * cbInstanceData._m0[_270].x) + (cbInstanceData._m0[_265].x * cbInstanceData._m0[_265].x)) + (cbInstanceData._m0[_274].x * cbInstanceData._m0[_274].x));
    float _284 = _283 * TEXCOORD.z;
    float _285 = _283 * TEXCOORD.w;
    vec4 _305 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _311 = _305.x * cbMtdParam._m0[11u].x;
    float _312 = _305.y * cbMtdParam._m0[11u].y;
    float _313 = _305.z * cbMtdParam._m0[11u].z;
    vec4 _332 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _284) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _285) + cbTextureTilingScale._m0[5u].w));
    vec4 _351 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _391 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _393 = _391.x;
    float _405 = dot(vec4(_393, _391.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _422 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _351.x) * 2.0) - ((((_393 - _405) * cbMtdParam._m0[24u].z) + _405) * cbMtdParam._m0[23u].x))) + 1.0;
    float _4136 = isnan(0.0) ? _422 : (isnan(_422) ? 0.0 : max(_422, 0.0));
    float _423 = isnan(1.0) ? _4136 : (isnan(_4136) ? 1.0 : min(_4136, 1.0));
    float _430 = (_423 * ((_332.x * cbMtdParam._m0[12u].x) - _311)) + _311;
    float _431 = (_423 * ((_332.y * cbMtdParam._m0[12u].y) - _312)) + _312;
    float _432 = (_423 * ((_332.z * cbMtdParam._m0[12u].z) - _313)) + _313;
    vec4 _449 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _284) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _285) + cbTextureTilingScale._m0[3u].w));
    vec4 _469 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _471 = _469.x;
    float _481 = dot(vec4(_471, _469.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _495 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _351.y) * 2.0) - ((((_471 - _481) * cbMtdParam._m0[24u].z) + _481) * cbMtdParam._m0[20u].w))) + 1.0;
    float _4147 = isnan(0.0) ? _495 : (isnan(_495) ? 0.0 : max(_495, 0.0));
    float _496 = isnan(1.0) ? _4147 : (isnan(_4147) ? 1.0 : min(_4147, 1.0));
    float _503 = (_496 * ((_449.x * cbMtdParam._m0[13u].x) - _430)) + _430;
    float _504 = (_496 * ((_449.y * cbMtdParam._m0[13u].y) - _431)) + _431;
    float _505 = (_496 * ((_449.z * cbMtdParam._m0[13u].z) - _432)) + _432;
    vec4 _523 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_9, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[24u].x * _284) + cbTextureTilingScale._m0[24u].z, (cbTextureTilingScale._m0[24u].y * _285) + cbTextureTilingScale._m0[24u].w));
    vec4 _540 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[25u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _542 = _540.x;
    float _552 = dot(vec4(_542, _540.yzw), vec4(cbMtdParam._m0[30u].w, cbMtdParam._m0[31u].xy, 0.0));
    float _564 = ((cbMtdParam._m0[25u].x * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.z) - _351.z) * 2.0) - ((((_542 - _552) * cbMtdParam._m0[24u].z) + _552) * cbMtdParam._m0[20u].z))) + 1.0;
    float _4158 = isnan(0.0) ? _564 : (isnan(_564) ? 0.0 : max(_564, 0.0));
    float _565 = isnan(1.0) ? _4158 : (isnan(_4158) ? 1.0 : min(_4158, 1.0));
    float _572 = (_565 * ((_523.x * cbMtdParam._m0[14u].x) - _503)) + _503;
    float _573 = (_565 * ((_523.y * cbMtdParam._m0[14u].y) - _504)) + _504;
    float _574 = (_565 * ((_523.z * cbMtdParam._m0[14u].z) - _505)) + _505;
    vec4 _592 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _284) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _285) + cbTextureTilingScale._m0[4u].w));
    vec4 _609 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _611 = _609.x;
    float _612 = _609.y;
    float _613 = _609.z;
    float _620 = ((_592.x - _611) * _423) + _611;
    float _621 = ((_592.y - _612) * _423) + _612;
    float _622 = ((_592.z - _613) * _423) + _613;
    vec4 _634 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _284) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _285) + cbTextureTilingScale._m0[2u].w));
    float _645 = ((_634.x - _620) * _496) + _620;
    float _646 = ((_634.y - _621) * _496) + _621;
    float _647 = ((_634.z - _622) * _496) + _622;
    vec4 _659 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[23u].x * _284) + cbTextureTilingScale._m0[23u].z, (cbTextureTilingScale._m0[23u].y * _285) + cbTextureTilingScale._m0[23u].w));
    float _672 = ((_659.z - _647) * _565) + _647;
    float _675 = ((((_659.x - _645) * _565) + _645) * 2.0) + (-1.0);
    float _677 = ((((_659.y - _646) * _565) + _646) * 2.0) + (-1.0);
    float _678 = dot(vec2(_675, _677), vec2(_675, _677));
    float _4169 = isnan(0.0) ? _678 : (isnan(_678) ? 0.0 : max(_678, 0.0));
    float _683 = sqrt(1.0 - (isnan(1.0) ? _4169 : (isnan(_4169) ? 1.0 : min(_4169, 1.0))));
    vec4 _697 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _722 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _284) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _285) + cbTextureTilingScale._m0[11u].w));
    float _724 = _722.x;
    float _725 = 1.0 - _724;
    float _731 = isnan(-1.0) ? cbMtdParam._m0[24u].x : (isnan(cbMtdParam._m0[24u].x) ? (-1.0) : max(cbMtdParam._m0[24u].x, -1.0));
    float _734 = ((isnan(0.0) ? _731 : (isnan(_731) ? 0.0 : min(_731, 0.0))) * TEXCOORD_8.x) + TEXCOORD_8.w;
    float _743 = (_734 - ((((((_724 - _725) * cbMtdParam._m0[24u].w) + _725) + 0.00999999977648258209228515625) * cbMtdParam._m0[21u].z) * (1.0 - _734))) * (cbMtdParam._m0[21u].w + 1.0);
    float _4190 = isnan(0.0) ? _743 : (isnan(_743) ? 0.0 : max(_743, 0.0));
    float _744 = isnan(1.0) ? _4190 : (isnan(_4190) ? 1.0 : min(_4190, 1.0));
    float _751 = (_744 * (cbMtdParam._m0[17u].x - _572)) + _572;
    float _752 = (_744 * (cbMtdParam._m0[17u].y - _573)) + _573;
    float _753 = (_744 * (cbMtdParam._m0[17u].z - _574)) + _574;
    vec4 _765 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _284) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _285) + cbTextureTilingScale._m0[19u].w));
    float _767 = _765.x;
    float _768 = 1.0 - _767;
    float _795 = (TEXCOORD_8.x - ((cbMtdParam._m0[22u].w * (1.0 - TEXCOORD_8.x)) * ((((_767 - _768) * cbMtdParam._m0[24u].y) + _768) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _4201 = isnan(0.0) ? _795 : (isnan(_795) ? 0.0 : max(_795, 0.0));
    float _796 = isnan(1.0) ? _4201 : (isnan(_4201) ? 1.0 : min(_4201, 1.0));
    float _804 = ((((cbMtdParam._m0[10u].x - _751) * TEXCOORD_8.x) * cbMtdParam._m0[23u].w) * _796) + _751;
    float _805 = ((((cbMtdParam._m0[10u].y - _752) * TEXCOORD_8.y) * cbMtdParam._m0[23u].w) * _796) + _752;
    float _806 = (((cbMtdParam._m0[23u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _753)) * _796) + _753;
    float _810 = (cbMtdParam._m0[19u].w * (_697.z - _672)) + _672;
    vec4 _824 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _284) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _285) + cbTextureTilingScale._m0[15u].w));
    float _831 = (_824.x * 2.0) + (-1.0);
    float _832 = (_824.y * 2.0) + (-1.0);
    float _833 = dot(vec2(_831, _832), vec2(_831, _832));
    float _4212 = isnan(0.0) ? _833 : (isnan(_833) ? 0.0 : max(_833, 0.0));
    float _841 = (_744 * (_824.z - _810)) + _810;
    float _844 = ((cbMtdParam._m0[23u].y - _841) * _796) + _841;
    vec4 _863 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _284) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _285) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _869 = (_863.x * 2.0) + (-1.0);
    float _870 = (_863.y * 2.0) + (-1.0);
    float _871 = dot(vec2(_869, _870), vec2(_869, _870));
    float _4223 = isnan(0.0) ? _871 : (isnan(_871) ? 0.0 : max(_871, 0.0));
    float _879 = (((_697.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _675;
    float _880 = (((_697.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _677;
    float _892 = (((_831 - _879) + (cbMtdParam._m0[21u].x * _879)) * _744) + _879;
    float _893 = (((_832 - _880) + (cbMtdParam._m0[21u].x * _880)) * _744) + _880;
    float _894 = (_744 * (sqrt(1.0 - (isnan(1.0) ? _4212 : (isnan(_4212) ? 1.0 : min(_4212, 1.0)))) - _683)) + _683;
    float _905 = (((_869 - _892) + (_892 * cbMtdParam._m0[22u].z)) * _796) + _892;
    float _906 = (((_870 - _893) + (_893 * cbMtdParam._m0[22u].z)) * _796) + _893;
    float _907 = ((sqrt(1.0 - (isnan(1.0) ? _4223 : (isnan(_4223) ? 1.0 : min(_4223, 1.0)))) - _894) * _796) + _894;
    float _909 = cbMtdParam._m0[22u].x + _697.w;
    float _912 = fma(_907, _252 * NORMAL.x, fma(_906, _259 * TANGENT.x, (_245 * _237) * _905));
    float _915 = fma(_907, _252 * NORMAL.y, fma(_906, _259 * TANGENT.y, (_245 * _238) * _905));
    float _918 = fma(_907, _252 * NORMAL.z, fma(_906, _259 * TANGENT.z, (_245 * _239) * _905));
    float _922 = inversesqrt(dot(vec3(_912, _915, _918), vec3(_912, _915, _918)));
    float _923 = _922 * _912;
    float _924 = _922 * _915;
    float _925 = _922 * _918;
    float _4234 = isnan(0.0) ? _844 : (isnan(_844) ? 0.0 : max(_844, 0.0));
    float _926 = isnan(1.0) ? _4234 : (isnan(_4234) ? 1.0 : min(_4234, 1.0));
    float _4245 = isnan(0.0) ? _909 : (isnan(_909) ? 0.0 : max(_909, 0.0));
    float _4256 = isnan(0.0) ? _804 : (isnan(_804) ? 0.0 : max(_804, 0.0));
    float _4267 = isnan(0.0) ? _805 : (isnan(_805) ? 0.0 : max(_805, 0.0));
    float _4278 = isnan(0.0) ? _806 : (isnan(_806) ? 0.0 : max(_806, 0.0));
    float _944 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _985 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _995 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _985);
    float _996 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _985);
    float _997 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _985);
    float _1001 = inversesqrt(dot(vec3(_995, _996, _997), vec3(_995, _996, _997)));
    float _1002 = _995 * _1001;
    float _1003 = _996 * _1001;
    float _1004 = _997 * _1001;
    vec4 _1009 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _1011 = _1009.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1165 = sqrt(((_995 * _995) + (_996 * _996)) + (_997 * _997));
        float _1171 = (cbMatDynParam._m0[5u].x * _1165) + cbMatDynParam._m0[5u].y;
        float _4289 = isnan(0.0) ? _1171 : (isnan(_1171) ? 0.0 : max(_1171, 0.0));
        float _1172 = isnan(1.0) ? _4289 : (isnan(_4289) ? 1.0 : min(_4289, 1.0));
        float _1176 = (cbMatDynParam._m0[5u].z * _1165) + cbMatDynParam._m0[5u].w;
        float _4300 = isnan(0.0) ? _1176 : (isnan(_1176) ? 0.0 : max(_1176, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4300 : (isnan(_4300) ? 1.0 : min(_4300, 1.0))) - _1172)) + _1172) < ((_1011 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _1022 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1023 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1041 = fma(_925, cbSceneParam._m0[5u].z, fma(_924, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _923));
    float _1044 = fma(_925, cbSceneParam._m0[6u].z, fma(_924, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _923));
    float _1047 = fma(_925, cbSceneParam._m0[7u].z, fma(_924, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _923));
    uint _1060 = _265 + 9u;
    uint _1061 = _1060 + uint(cbMatDynParam._m0[0u].w);
    float _1067 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4256 : (isnan(_4256) ? 1.0 : min(_4256, 1.0)))) * cbInstanceData._m0[_1061].x;
    float _1068 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4267 : (isnan(_4267) ? 1.0 : min(_4267, 1.0)))) * cbInstanceData._m0[_1061].y;
    float _1069 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4278 : (isnan(_4278) ? 1.0 : min(_4278, 1.0)))) * cbInstanceData._m0[_1061].z;
    float _4311 = isnan(0.0) ? _1067 : (isnan(_1067) ? 0.0 : max(_1067, 0.0));
    float _1070 = isnan(1.0) ? _4311 : (isnan(_4311) ? 1.0 : min(_4311, 1.0));
    float _4322 = isnan(0.0) ? _1068 : (isnan(_1068) ? 0.0 : max(_1068, 0.0));
    float _1071 = isnan(1.0) ? _4322 : (isnan(_4322) ? 1.0 : min(_4322, 1.0));
    float _4333 = isnan(0.0) ? _1069 : (isnan(_1069) ? 0.0 : max(_1069, 0.0));
    float _1072 = isnan(1.0) ? _4333 : (isnan(_4333) ? 1.0 : min(_4333, 1.0));
    vec4 _1081 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1022, cbSceneParam._m0[86u].y * _1023));
    float _1085 = ((isnan(1.0) ? _4245 : (isnan(_4245) ? 1.0 : min(_4245, 1.0))) * TEXCOORD_5.w) * _1081.x;
    float _1086 = dot(vec3(_923, _924, _925), vec3(_1002, _1003, _1004));
    float _1089 = _1086 * 2.0;
    float _1093 = (_1089 * _923) - _1002;
    float _1094 = (_1089 * _924) - _1003;
    float _1095 = (_1089 * _925) - _1004;
    float _1099 = abs(dot(vec3(_1002, _1003, _1004), vec3(_923, _924, _925)));
    float _4344 = isnan(0.0) ? _1099 : (isnan(_1099) ? 0.0 : max(_1099, 0.0));
    float _1101 = sqrt(_926);
    float _1114 = exp2((_1101 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4344 : (isnan(_4344) ? 1.0 : min(_4344, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1101 * 3.0));
    float _1146 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1150 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1154 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1483;
    float _1485;
    float _1486;
    float _1487;
    float _1488;
    float _1489;
    float _1490;
    float _1491;
    float _1492;
    float _1493;
    float _1494;
    float _1495;
    float _1496;
    float _1497;
    float _1498;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1208 = fma(_1154, cbModelParam._m0[26u].z, fma(_1150, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1146));
        float _1212 = fma(_1154, cbModelParam._m0[27u].z, fma(_1150, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1146));
        float _1216 = fma(_1154, cbModelParam._m0[28u].z, fma(_1150, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1146));
        float _1241 = _1146 + _923;
        float _1242 = _1150 + _924;
        float _1243 = _1154 + _925;
        float _1253 = fma(_1243, cbModelParam._m0[26u].z, fma(_1242, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1241)) - _1208;
        float _1254 = fma(_1243, cbModelParam._m0[27u].z, fma(_1242, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1241)) - _1212;
        float _1255 = fma(_1243, cbModelParam._m0[28u].z, fma(_1242, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1241)) - _1216;
        float _1259 = inversesqrt(dot(vec3(_1253, _1254, _1255), vec3(_1253, _1254, _1255)));
        float _1272 = ((_1259 * _1253) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1208 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1273 = ((_1259 * _1254) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1212 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1274 = ((_1259 * _1255) / cbModelParam._m0[34u].z) + ((((((_1216 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1277 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1272, _1273, _1274), 0.0);
        vec4 _1284 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1272, _1273, _1274), 0.0);
        vec4 _1291 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1272, _1273, _1274), 0.0);
        vec4 _1298 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1272, _1273, _1274), 0.0);
        float _1311 = exp2((_1277.w + (-0.5)) * 20.0) * 2.0;
        float _1312 = _1311 * (_1277.x + (-0.5));
        float _1313 = _1311 * (_1277.y + (-0.5));
        float _1314 = _1311 * (_1277.z + (-0.5));
        float _1321 = exp2((_1284.w + (-0.5)) * 20.0) * 2.0;
        float _1322 = _1321 * (_1284.x + (-0.5));
        float _1323 = _1321 * (_1284.y + (-0.5));
        float _1324 = _1321 * (_1284.z + (-0.5));
        float _1331 = exp2((_1291.w + (-0.5)) * 20.0) * 2.0;
        float _1332 = _1331 * (_1291.x + (-0.5));
        float _1333 = _1331 * (_1291.y + (-0.5));
        float _1334 = _1331 * (_1291.z + (-0.5));
        float _1341 = exp2((_1298.w + (-0.5)) * 20.0) * 2.0;
        float _1342 = _1341 * (_1298.x + (-0.5));
        float _1343 = _1341 * (_1298.y + (-0.5));
        float _1344 = _1341 * (_1298.z + (-0.5));
        float _1345 = isnan(0.0) ? _1342 : (isnan(_1342) ? 0.0 : max(_1342, 0.0));
        float _1346 = isnan(0.0) ? _1343 : (isnan(_1343) ? 0.0 : max(_1343, 0.0));
        float _1347 = isnan(0.0) ? _1344 : (isnan(_1344) ? 0.0 : max(_1344, 0.0));
        float _1348 = _1312 * 0.5;
        float _1349 = _1322 * 0.5;
        float _1350 = _1332 * 0.5;
        float _1351 = dot(vec3(_1348, _1349, _1350), vec3(_1348, _1349, _1350));
        float _1356 = (_1351 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1351);
        float _1365 = (dot(vec3(_923, _924, _925), vec3(_1356 * _1348, _1356 * _1349, _1356 * _1350)) + 1.0) * 0.5;
        float _4370 = isnan(0.0) ? _1365 : (isnan(_1365) ? 0.0 : max(_1365, 0.0));
        float _1375 = sqrt(((_1349 * _1349) + (_1348 * _1348)) + (_1350 * _1350)) / (_1345 + 9.9999997473787516355514526367188e-06);
        float _4381 = isnan(0.0) ? _1375 : (isnan(_1375) ? 0.0 : max(_1375, 0.0));
        float _1376 = isnan(1.0) ? _4381 : (isnan(_4381) ? 1.0 : min(_4381, 1.0));
        float _1377 = _1376 * 2.0;
        float _1381 = (1.0 - _1376) / (_1376 + 1.0);
        float _4392 = isnan(0.0) ? _1381 : (isnan(_1381) ? 0.0 : max(_1381, 0.0));
        float _1382 = isnan(1.0) ? _4392 : (isnan(_4392) ? 1.0 : min(_4392, 1.0));
        float _1391 = ((((1.0 - _1382) * (_1377 + 2.0)) * exp2(log2(isnan(1.0) ? _4370 : (isnan(_4370) ? 1.0 : min(_4370, 1.0))) * (_1377 + 1.0))) + _1382) * _1345;
        float _1392 = _1313 * 0.5;
        float _1393 = _1323 * 0.5;
        float _1394 = _1333 * 0.5;
        float _1395 = dot(vec3(_1392, _1393, _1394), vec3(_1392, _1393, _1394));
        float _1400 = (_1395 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1395);
        float _1408 = (dot(vec3(_923, _924, _925), vec3(_1400 * _1392, _1400 * _1393, _1400 * _1394)) + 1.0) * 0.5;
        float _4403 = isnan(0.0) ? _1408 : (isnan(_1408) ? 0.0 : max(_1408, 0.0));
        float _1417 = sqrt(((_1393 * _1393) + (_1392 * _1392)) + (_1394 * _1394)) / (_1346 + 9.9999997473787516355514526367188e-06);
        float _4414 = isnan(0.0) ? _1417 : (isnan(_1417) ? 0.0 : max(_1417, 0.0));
        float _1418 = isnan(1.0) ? _4414 : (isnan(_4414) ? 1.0 : min(_4414, 1.0));
        float _1419 = _1418 * 2.0;
        float _1423 = (1.0 - _1418) / (_1418 + 1.0);
        float _4425 = isnan(0.0) ? _1423 : (isnan(_1423) ? 0.0 : max(_1423, 0.0));
        float _1424 = isnan(1.0) ? _4425 : (isnan(_4425) ? 1.0 : min(_4425, 1.0));
        float _1433 = ((((1.0 - _1424) * (_1419 + 2.0)) * exp2(log2(isnan(1.0) ? _4403 : (isnan(_4403) ? 1.0 : min(_4403, 1.0))) * (_1419 + 1.0))) + _1424) * _1346;
        float _1434 = _1314 * 0.5;
        float _1435 = _1324 * 0.5;
        float _1436 = _1334 * 0.5;
        float _1437 = dot(vec3(_1434, _1435, _1436), vec3(_1434, _1435, _1436));
        float _1442 = (_1437 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1437);
        float _1450 = (dot(vec3(_923, _924, _925), vec3(_1442 * _1434, _1442 * _1435, _1442 * _1436)) + 1.0) * 0.5;
        float _4436 = isnan(0.0) ? _1450 : (isnan(_1450) ? 0.0 : max(_1450, 0.0));
        float _1459 = sqrt(((_1435 * _1435) + (_1434 * _1434)) + (_1436 * _1436)) / (_1347 + 9.9999997473787516355514526367188e-06);
        float _4447 = isnan(0.0) ? _1459 : (isnan(_1459) ? 0.0 : max(_1459, 0.0));
        float _1460 = isnan(1.0) ? _4447 : (isnan(_4447) ? 1.0 : min(_4447, 1.0));
        float _1461 = _1460 * 2.0;
        float _1465 = (1.0 - _1460) / (_1460 + 1.0);
        float _4458 = isnan(0.0) ? _1465 : (isnan(_1465) ? 0.0 : max(_1465, 0.0));
        float _1466 = isnan(1.0) ? _4458 : (isnan(_4458) ? 1.0 : min(_4458, 1.0));
        float _1475 = ((((1.0 - _1466) * (_1461 + 2.0)) * exp2(log2(isnan(1.0) ? _4436 : (isnan(_4436) ? 1.0 : min(_4436, 1.0))) * (_1461 + 1.0))) + _1466) * _1347;
        _1483 = _1314;
        _1485 = _1313;
        _1486 = _1312;
        _1487 = _1324;
        _1488 = _1323;
        _1489 = _1322;
        _1490 = _1334;
        _1491 = _1333;
        _1492 = _1332;
        _1493 = _1347;
        _1494 = _1346;
        _1495 = _1345;
        _1496 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1391 : (isnan(_1391) ? 0.0 : max(_1391, 0.0)));
        _1497 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1433 : (isnan(_1433) ? 0.0 : max(_1433, 0.0)));
        _1498 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1475 : (isnan(_1475) ? 0.0 : max(_1475, 0.0)));
    }
    else
    {
        _1483 = _1484;
        _1485 = _1484;
        _1486 = _1484;
        _1487 = _1484;
        _1488 = _1484;
        _1489 = _1484;
        _1490 = _1484;
        _1491 = _1484;
        _1492 = _1484;
        _1493 = _1484;
        _1494 = _1484;
        _1495 = _1484;
        _1496 = 0.0;
        _1497 = 0.0;
        _1498 = 0.0;
    }
    float _1793;
    float _1794;
    float _1795;
    float _1796;
    float _1797;
    float _1798;
    float _1799;
    float _1800;
    float _1801;
    float _1802;
    float _1803;
    float _1804;
    float _1805;
    float _1806;
    float _1807;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1524 = fma(_1154, cbModelParam._m0[30u].z, fma(_1150, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1146));
        float _1528 = fma(_1154, cbModelParam._m0[31u].z, fma(_1150, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1146));
        float _1532 = fma(_1154, cbModelParam._m0[32u].z, fma(_1150, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1146));
        float _1555 = _1146 + _923;
        float _1556 = _1150 + _924;
        float _1557 = _1154 + _925;
        float _1567 = fma(_1557, cbModelParam._m0[30u].z, fma(_1556, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1555)) - _1524;
        float _1568 = fma(_1557, cbModelParam._m0[31u].z, fma(_1556, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1555)) - _1528;
        float _1569 = fma(_1557, cbModelParam._m0[32u].z, fma(_1556, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1555)) - _1532;
        float _1573 = inversesqrt(dot(vec3(_1567, _1568, _1569), vec3(_1567, _1568, _1569)));
        float _1586 = ((_1573 * _1567) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1524 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1587 = ((_1573 * _1568) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1528 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1588 = ((_1573 * _1569) / cbModelParam._m0[35u].z) + ((((((_1532 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1590 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1586, _1587, _1588), 0.0);
        vec4 _1597 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1586, _1587, _1588), 0.0);
        vec4 _1604 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1586, _1587, _1588), 0.0);
        vec4 _1611 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1586, _1587, _1588), 0.0);
        float _1623 = exp2((_1590.w + (-0.5)) * 20.0) * 2.0;
        float _1624 = _1623 * (_1590.x + (-0.5));
        float _1625 = _1623 * (_1590.y + (-0.5));
        float _1626 = _1623 * (_1590.z + (-0.5));
        float _1633 = exp2((_1597.w + (-0.5)) * 20.0) * 2.0;
        float _1634 = _1633 * (_1597.x + (-0.5));
        float _1635 = _1633 * (_1597.y + (-0.5));
        float _1636 = _1633 * (_1597.z + (-0.5));
        float _1643 = exp2((_1604.w + (-0.5)) * 20.0) * 2.0;
        float _1644 = _1643 * (_1604.x + (-0.5));
        float _1645 = _1643 * (_1604.y + (-0.5));
        float _1646 = _1643 * (_1604.z + (-0.5));
        float _1653 = exp2((_1611.w + (-0.5)) * 20.0) * 2.0;
        float _1654 = _1653 * (_1611.x + (-0.5));
        float _1655 = _1653 * (_1611.y + (-0.5));
        float _1656 = _1653 * (_1611.z + (-0.5));
        float _1657 = isnan(0.0) ? _1654 : (isnan(_1654) ? 0.0 : max(_1654, 0.0));
        float _1658 = isnan(0.0) ? _1655 : (isnan(_1655) ? 0.0 : max(_1655, 0.0));
        float _1659 = isnan(0.0) ? _1656 : (isnan(_1656) ? 0.0 : max(_1656, 0.0));
        float _1660 = _1624 * 0.5;
        float _1661 = _1634 * 0.5;
        float _1662 = _1644 * 0.5;
        float _1663 = dot(vec3(_1660, _1661, _1662), vec3(_1660, _1661, _1662));
        float _1668 = (_1663 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1663);
        float _1676 = (dot(vec3(_923, _924, _925), vec3(_1668 * _1660, _1668 * _1661, _1668 * _1662)) + 1.0) * 0.5;
        float _4499 = isnan(0.0) ? _1676 : (isnan(_1676) ? 0.0 : max(_1676, 0.0));
        float _1685 = sqrt(((_1661 * _1661) + (_1660 * _1660)) + (_1662 * _1662)) / (_1657 + 9.9999997473787516355514526367188e-06);
        float _4510 = isnan(0.0) ? _1685 : (isnan(_1685) ? 0.0 : max(_1685, 0.0));
        float _1686 = isnan(1.0) ? _4510 : (isnan(_4510) ? 1.0 : min(_4510, 1.0));
        float _1687 = _1686 * 2.0;
        float _1691 = (1.0 - _1686) / (_1686 + 1.0);
        float _4521 = isnan(0.0) ? _1691 : (isnan(_1691) ? 0.0 : max(_1691, 0.0));
        float _1692 = isnan(1.0) ? _4521 : (isnan(_4521) ? 1.0 : min(_4521, 1.0));
        float _1701 = ((((1.0 - _1692) * (_1687 + 2.0)) * exp2(log2(isnan(1.0) ? _4499 : (isnan(_4499) ? 1.0 : min(_4499, 1.0))) * (_1687 + 1.0))) + _1692) * _1657;
        float _1702 = _1625 * 0.5;
        float _1703 = _1635 * 0.5;
        float _1704 = _1645 * 0.5;
        float _1705 = dot(vec3(_1702, _1703, _1704), vec3(_1702, _1703, _1704));
        float _1710 = (_1705 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1705);
        float _1718 = (dot(vec3(_923, _924, _925), vec3(_1710 * _1702, _1710 * _1703, _1710 * _1704)) + 1.0) * 0.5;
        float _4532 = isnan(0.0) ? _1718 : (isnan(_1718) ? 0.0 : max(_1718, 0.0));
        float _1727 = sqrt(((_1703 * _1703) + (_1702 * _1702)) + (_1704 * _1704)) / (_1658 + 9.9999997473787516355514526367188e-06);
        float _4543 = isnan(0.0) ? _1727 : (isnan(_1727) ? 0.0 : max(_1727, 0.0));
        float _1728 = isnan(1.0) ? _4543 : (isnan(_4543) ? 1.0 : min(_4543, 1.0));
        float _1729 = _1728 * 2.0;
        float _1733 = (1.0 - _1728) / (_1728 + 1.0);
        float _4554 = isnan(0.0) ? _1733 : (isnan(_1733) ? 0.0 : max(_1733, 0.0));
        float _1734 = isnan(1.0) ? _4554 : (isnan(_4554) ? 1.0 : min(_4554, 1.0));
        float _1743 = ((((1.0 - _1734) * (_1729 + 2.0)) * exp2(log2(isnan(1.0) ? _4532 : (isnan(_4532) ? 1.0 : min(_4532, 1.0))) * (_1729 + 1.0))) + _1734) * _1658;
        float _1744 = _1626 * 0.5;
        float _1745 = _1636 * 0.5;
        float _1746 = _1646 * 0.5;
        float _1747 = dot(vec3(_1744, _1745, _1746), vec3(_1744, _1745, _1746));
        float _1752 = (_1747 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1747);
        float _1760 = (dot(vec3(_923, _924, _925), vec3(_1752 * _1744, _1752 * _1745, _1752 * _1746)) + 1.0) * 0.5;
        float _4565 = isnan(0.0) ? _1760 : (isnan(_1760) ? 0.0 : max(_1760, 0.0));
        float _1769 = sqrt(((_1745 * _1745) + (_1744 * _1744)) + (_1746 * _1746)) / (_1659 + 9.9999997473787516355514526367188e-06);
        float _4576 = isnan(0.0) ? _1769 : (isnan(_1769) ? 0.0 : max(_1769, 0.0));
        float _1770 = isnan(1.0) ? _4576 : (isnan(_4576) ? 1.0 : min(_4576, 1.0));
        float _1771 = _1770 * 2.0;
        float _1775 = (1.0 - _1770) / (_1770 + 1.0);
        float _4587 = isnan(0.0) ? _1775 : (isnan(_1775) ? 0.0 : max(_1775, 0.0));
        float _1776 = isnan(1.0) ? _4587 : (isnan(_4587) ? 1.0 : min(_4587, 1.0));
        float _1785 = ((((1.0 - _1776) * (_1771 + 2.0)) * exp2(log2(isnan(1.0) ? _4565 : (isnan(_4565) ? 1.0 : min(_4565, 1.0))) * (_1771 + 1.0))) + _1776) * _1659;
        _1793 = _1626;
        _1794 = _1625;
        _1795 = _1624;
        _1796 = _1636;
        _1797 = _1635;
        _1798 = _1634;
        _1799 = _1646;
        _1800 = _1645;
        _1801 = _1644;
        _1802 = _1659;
        _1803 = _1658;
        _1804 = _1657;
        _1805 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1701 : (isnan(_1701) ? 0.0 : max(_1701, 0.0)));
        _1806 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1743 : (isnan(_1743) ? 0.0 : max(_1743, 0.0)));
        _1807 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1785 : (isnan(_1785) ? 0.0 : max(_1785, 0.0)));
    }
    else
    {
        _1793 = _1484;
        _1794 = _1484;
        _1795 = _1484;
        _1796 = _1484;
        _1797 = _1484;
        _1798 = _1484;
        _1799 = _1484;
        _1800 = _1484;
        _1801 = _1484;
        _1802 = _1484;
        _1803 = _1484;
        _1804 = _1484;
        _1805 = 0.0;
        _1806 = 0.0;
        _1807 = 0.0;
    }
    float _1817 = (cbModelParam._m0[1u].x * (_1805 - _1496)) + _1496;
    float _1818 = (cbModelParam._m0[1u].x * (_1806 - _1497)) + _1497;
    float _1819 = (cbModelParam._m0[1u].x * (_1807 - _1498)) + _1498;
    float _1840 = fma(_1819, cbSceneParam._m0[89u].z, fma(_1818, cbSceneParam._m0[89u].y, _1817 * cbSceneParam._m0[89u].x));
    float _1843 = fma(_1819, cbSceneParam._m0[90u].z, fma(_1818, cbSceneParam._m0[90u].y, _1817 * cbSceneParam._m0[90u].x));
    float _1846 = fma(_1819, cbSceneParam._m0[91u].z, fma(_1818, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1817));
    float _1861 = _1093 * 0.5;
    float _1862 = _1094 * 0.5;
    float _1863 = _1095 * 0.5;
    float _1864 = dot(vec4(_1861, _1862, _1863, 1.0), vec4(_1795, _1798, _1801, _1804));
    float _1867 = dot(vec4(_1861, _1862, _1863, 1.0), vec4(_1794, _1797, _1800, _1803));
    float _1870 = dot(vec4(_1861, _1862, _1863, 1.0), vec4(_1793, _1796, _1799, _1802));
    float _1904;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1877 = dot(vec4(_1861, _1862, _1863, 1.0), vec4(_1483, _1487, _1490, _1493));
        float _1881 = dot(vec4(_1861, _1862, _1863, 1.0), vec4(_1485, _1488, _1491, _1494));
        float _1885 = dot(vec4(_1861, _1862, _1863, 1.0), vec4(_1486, _1489, _1492, _1495));
        float _1892 = dot(vec4(cbModelParam._m0[39u]), vec4(_1861, _1862, _1863, 1.0));
        _1904 = dot(vec3(isnan(0.0) ? _1885 : (isnan(_1885) ? 0.0 : max(_1885, 0.0)), isnan(0.0) ? _1881 : (isnan(_1881) ? 0.0 : max(_1881, 0.0)), isnan(0.0) ? _1877 : (isnan(_1877) ? 0.0 : max(_1877, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1892) ? 0.0 : (isnan(0.0) ? _1892 : max(0.0, _1892))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1904 = 1.0;
    }
    float _1915;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1906 = dot(vec4(cbModelParam._m0[40u]), vec4(_1861, _1862, _1863, 1.0));
        _1915 = dot(vec3(isnan(0.0) ? _1864 : (isnan(_1864) ? 0.0 : max(_1864, 0.0)), isnan(0.0) ? _1867 : (isnan(_1867) ? 0.0 : max(_1867, 0.0)), isnan(0.0) ? _1870 : (isnan(_1870) ? 0.0 : max(_1870, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1906) ? 0.0 : (isnan(0.0) ? _1906 : max(0.0, _1906))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1915 = 1.0;
    }
    float _1919 = (_1915 * cbModelParam._m0[1u].x) + (_1904 * (1.0 - cbModelParam._m0[1u].x));
    float _1929 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _926);
    float _1930 = isnan(_1929) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1929 : min(cbModelParam._m0[25u].z, _1929));
    float _2010;
    float _2012;
    float _2014;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1977 = fma(_1154, cbModelParam._m0[13u].z, fma(_1150, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1146)) + cbModelParam._m0[13u].w;
        float _1981 = fma(_1154, cbModelParam._m0[14u].z, fma(_1150, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1146)) + cbModelParam._m0[14u].w;
        float _1985 = fma(_1154, cbModelParam._m0[15u].z, fma(_1150, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1146)) + cbModelParam._m0[15u].w;
        float _1988 = fma(_1095, cbModelParam._m0[13u].z, fma(_1094, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1093));
        float _1991 = fma(_1095, cbModelParam._m0[14u].z, fma(_1094, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1093));
        float _1994 = fma(_1095, cbModelParam._m0[15u].z, fma(_1094, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1093));
        float _2022;
        if (_1988 > 0.0)
        {
            _2022 = abs((1.0 - _1977) / _1988);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1988 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1977 + 1.0) / _1988);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _2022 = frontier_phi_17_15_ladder;
        }
        float _2192;
        if (_1991 > 0.0)
        {
            _2192 = abs((1.0 - _1981) / _1991);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1991 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1981 + 1.0) / _1991);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2192 = frontier_phi_26_22_ladder;
        }
        float _2487;
        if (_1994 > 0.0)
        {
            _2487 = abs((1.0 - _1985) / _1994);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1994 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1985 + 1.0) / _1994);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2487 = frontier_phi_38_33_ladder;
        }
        float _2489 = isnan(_2192) ? _2022 : (isnan(_2022) ? _2192 : min(_2022, _2192));
        float _2490 = isnan(_2487) ? _2489 : (isnan(_2489) ? _2487 : min(_2489, _2487));
        float _2494 = (_2490 * _1988) + _1977;
        float _2495 = (_2490 * _1991) + _1981;
        float _2496 = (_2490 * _1994) + _1985;
        float _2497 = _2490 * 9.9999997473787516355514526367188e-05;
        float _2499 = (-1.0) - _2497;
        float _2501 = _2497 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2496 > _2501) || ((_2496 < _2499) || ((_2495 > _2501) || ((_2495 < _2499) || ((_2494 < _2499) || (_2494 > _2501))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2641 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2496, cbModelParam._m0[9u].z, fma(_2495, cbModelParam._m0[9u].y, _2494 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2496, cbModelParam._m0[10u].z, fma(_2495, cbModelParam._m0[10u].y, _2494 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2496, cbModelParam._m0[11u].z, fma(_2495, cbModelParam._m0[11u].y, _2494 * cbModelParam._m0[11u].x))), _1930);
            frontier_phi_16_38_ladder = _2641.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2641.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2641.x * cbModelParam._m0[1u].y;
        }
        _2010 = frontier_phi_16_38_ladder_2;
        _2012 = frontier_phi_16_38_ladder_1;
        _2014 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1998 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1093, _1094, _1095), _1930);
        _2010 = _1998.x * cbModelParam._m0[1u].y;
        _2012 = _1998.y * cbModelParam._m0[1u].y;
        _2014 = _1998.z * cbModelParam._m0[1u].y;
    }
    float _2018 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _926);
    float _2019 = isnan(_2018) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2018 : min(cbModelParam._m0[25u].w, _2018));
    float _2109;
    float _2111;
    float _2113;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2073 = fma(_1154, cbModelParam._m0[21u].z, fma(_1150, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1146)) + cbModelParam._m0[21u].w;
        float _2077 = fma(_1154, cbModelParam._m0[22u].z, fma(_1150, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1146)) + cbModelParam._m0[22u].w;
        float _2081 = fma(_1154, cbModelParam._m0[23u].z, fma(_1150, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1146)) + cbModelParam._m0[23u].w;
        float _2084 = fma(_1095, cbModelParam._m0[21u].z, fma(_1094, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1093));
        float _2087 = fma(_1095, cbModelParam._m0[22u].z, fma(_1094, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1093));
        float _2090 = fma(_1095, cbModelParam._m0[23u].z, fma(_1094, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1093));
        float _2197;
        if (_2084 > 0.0)
        {
            _2197 = abs((1.0 - _2073) / _2084);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_2084 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_2073 + 1.0) / _2084);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2197 = frontier_phi_28_24_ladder;
        }
        float _2514;
        if (_2087 > 0.0)
        {
            _2514 = abs((1.0 - _2077) / _2087);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_2087 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_2077 + 1.0) / _2087);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2514 = frontier_phi_40_35_ladder;
        }
        float _2841;
        if (_2090 > 0.0)
        {
            _2841 = abs((1.0 - _2081) / _2090);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_2090 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_2081 + 1.0) / _2090);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _2841 = frontier_phi_50_47_ladder;
        }
        float _2843 = isnan(_2514) ? _2197 : (isnan(_2197) ? _2514 : min(_2197, _2514));
        float _2844 = isnan(_2841) ? _2843 : (isnan(_2843) ? _2841 : min(_2843, _2841));
        float _2848 = (_2844 * _2084) + _2073;
        float _2849 = (_2844 * _2087) + _2077;
        float _2850 = (_2844 * _2090) + _2081;
        float _2851 = _2844 * 9.9999997473787516355514526367188e-05;
        float _2852 = (-1.0) - _2851;
        float _2854 = _2851 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_2850 > _2854) || ((_2850 < _2852) || ((_2849 > _2854) || ((_2849 < _2852) || ((_2848 < _2852) || (_2848 > _2854))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2968 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2850, cbModelParam._m0[17u].z, fma(_2849, cbModelParam._m0[17u].y, _2848 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2850, cbModelParam._m0[18u].z, fma(_2849, cbModelParam._m0[18u].y, _2848 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2850, cbModelParam._m0[19u].z, fma(_2849, cbModelParam._m0[19u].y, _2848 * cbModelParam._m0[19u].x))), _2019);
            frontier_phi_25_50_ladder = _2968.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _2968.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _2968.x * cbModelParam._m0[1u].z;
        }
        _2109 = frontier_phi_25_50_ladder_2;
        _2111 = frontier_phi_25_50_ladder_1;
        _2113 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _2093 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1093, _1094, _1095), _2019);
        _2109 = _2093.x * cbModelParam._m0[1u].z;
        _2111 = _2093.y * cbModelParam._m0[1u].z;
        _2113 = _2093.z * cbModelParam._m0[1u].z;
    }
    float _2125 = ((((1.0 - _1114) * ((_1101 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_1114 * _1101)) * _1085;
    float _2126 = _2125 * ((cbModelParam._m0[1u].w * (_2109 - _2010)) + _2010);
    float _2127 = _2125 * ((cbModelParam._m0[1u].w * (_2111 - _2012)) + _2012);
    float _2128 = _2125 * ((cbModelParam._m0[1u].w * (_2113 - _2014)) + _2014);
    float _2131 = fma(_2128, cbSceneParam._m0[89u].z, fma(_2127, cbSceneParam._m0[89u].y, _2126 * cbSceneParam._m0[89u].x));
    float _2134 = fma(_2128, cbSceneParam._m0[90u].z, fma(_2127, cbSceneParam._m0[90u].y, _2126 * cbSceneParam._m0[90u].x));
    float _2137 = fma(_2128, cbSceneParam._m0[91u].z, fma(_2127, cbSceneParam._m0[91u].y, _2126 * cbSceneParam._m0[91u].x));
    float _2171 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2175 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2179 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2183 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2184 = _2171 / _2183;
    float _2185 = _2175 / _2183;
    float _2186 = _2179 / _2183;
    float _2333;
    float _2334;
    float _2335;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2213 = ((uint(_2186 > cbSceneParam._m0[59u].y) + uint(_2186 > cbSceneParam._m0[59u].x)) + uint(_2186 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2214 = _2213 + 43u;
        uint _2222 = _2213 + 44u;
        uint _2230 = _2213 + 45u;
        uint _2238 = _2213 + 46u;
        float _2249 = fma(_2183, cbSceneParam._m0[_2214].w, fma(_2179, cbSceneParam._m0[_2214].z, fma(_2175, cbSceneParam._m0[_2214].y, _2171 * cbSceneParam._m0[_2214].x)));
        float _2253 = fma(_2183, cbSceneParam._m0[_2222].w, fma(_2179, cbSceneParam._m0[_2222].z, fma(_2175, cbSceneParam._m0[_2222].y, _2171 * cbSceneParam._m0[_2222].x)));
        float _2261 = fma(_2183, cbSceneParam._m0[_2238].w, fma(_2179, cbSceneParam._m0[_2238].z, fma(_2175, cbSceneParam._m0[_2238].y, _2171 * cbSceneParam._m0[_2238].x)));
        float _2266 = cbSceneParam._m0[33u].z * _2261;
        float _2268 = cbSceneParam._m0[33u].w * _2261;
        float _2271 = fma(_2183, cbSceneParam._m0[_2230].w, fma(_2179, cbSceneParam._m0[_2230].z, fma(_2175, cbSceneParam._m0[_2230].y, _2171 * cbSceneParam._m0[_2230].x))) / _2261;
        float _2319 = (cbSceneParam._m0[33u].x - sqrt(((_2185 * _2185) + (_2184 * _2184)) + (_2186 * _2186))) * cbSceneParam._m0[33u].y;
        float _4713 = isnan(0.0) ? _2319 : (isnan(_2319) ? 0.0 : max(_2319, 0.0));
        float _2326 = (isnan(1.0) ? _4713 : (isnan(_4713) ? 1.0 : min(_4713, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2266 + _2249) / _2261, (_2268 + _2253) / _2261), _2271), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2268 + _2249) / _2261, (_2253 - _2266) / _2261), _2271), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2249 - _2266) / _2261, (_2253 - _2268) / _2261), _2271), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2249 - _2268) / _2261, (_2266 + _2253) / _2261), _2271), 0.0)).x), vec4(0.25)));
        _2333 = 1.0 - (_2326 * cbSceneParam._m0[34u].x);
        _2334 = 1.0 - (_2326 * cbSceneParam._m0[34u].y);
        _2335 = 1.0 - (_2326 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2333 = 1.0;
        _2334 = 1.0;
        _2335 = 1.0;
    }
    float _2399;
    float _2401;
    float _2403;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2387 = fma(_2183, cbSceneParam._m0[63u].w, fma(_2179, cbSceneParam._m0[63u].z, fma(_2175, cbSceneParam._m0[63u].y, _2171 * cbSceneParam._m0[63u].x)));
        float _2388 = fma(_2183, cbSceneParam._m0[60u].w, fma(_2179, cbSceneParam._m0[60u].z, fma(_2175, cbSceneParam._m0[60u].y, _2171 * cbSceneParam._m0[60u].x))) / _2387;
        float _2389 = fma(_2183, cbSceneParam._m0[61u].w, fma(_2179, cbSceneParam._m0[61u].z, fma(_2175, cbSceneParam._m0[61u].y, _2171 * cbSceneParam._m0[61u].x))) / _2387;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_2388 >= cbSceneParam._m0[64u].x) && (_2389 >= cbSceneParam._m0[64u].y)) && (_2388 <= cbSceneParam._m0[64u].z)) && (_2389 <= cbSceneParam._m0[64u].w))
        {
            float _2527 = fma(_2183, cbSceneParam._m0[62u].w, fma(_2179, cbSceneParam._m0[62u].z, fma(_2175, cbSceneParam._m0[62u].y, _2171 * cbSceneParam._m0[62u].x))) / _2387;
            float _2531 = isnan(cbSceneParam._m0[41u].w) ? _2527 : (isnan(_2527) ? cbSceneParam._m0[41u].w : max(_2527, cbSceneParam._m0[41u].w));
            float _2574 = (cbSceneParam._m0[33u].x - sqrt(((_2185 * _2185) + (_2184 * _2184)) + (_2186 * _2186))) * cbSceneParam._m0[33u].y;
            float _4729 = isnan(0.0) ? _2574 : (isnan(_2574) ? 0.0 : max(_2574, 0.0));
            float _2581 = (isnan(1.0) ? _4729 : (isnan(_4729) ? 1.0 : min(_4729, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2388, cbSceneParam._m0[33u].w + _2389), _2531), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2388, _2389 - cbSceneParam._m0[33u].z), _2531), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2388 - cbSceneParam._m0[33u].z, _2389 - cbSceneParam._m0[33u].w), _2531), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2388 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2389), _2531), 0.0)).x), vec4(0.25)));
            float _2585 = 1.0 - (_2581 * cbSceneParam._m0[34u].x);
            float _2586 = 1.0 - (_2581 * cbSceneParam._m0[34u].y);
            float _2587 = 1.0 - (_2581 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_2587) ? _2335 : (isnan(_2335) ? _2587 : min(_2335, _2587));
            frontier_phi_37_36_ladder_1 = isnan(_2586) ? _2334 : (isnan(_2334) ? _2586 : min(_2334, _2586));
            frontier_phi_37_36_ladder_2 = isnan(_2585) ? _2333 : (isnan(_2333) ? _2585 : min(_2333, _2585));
        }
        else
        {
            frontier_phi_37_36_ladder = _2335;
            frontier_phi_37_36_ladder_1 = _2334;
            frontier_phi_37_36_ladder_2 = _2333;
        }
        _2399 = frontier_phi_37_36_ladder_2;
        _2401 = frontier_phi_37_36_ladder_1;
        _2403 = frontier_phi_37_36_ladder;
    }
    else
    {
        _2399 = _2333;
        _2401 = _2334;
        _2403 = _2335;
    }
    uvec4 _2408 = floatBitsToUint(cbInstanceData._m0[_265 + 5u]);
    uint _2410 = _2408.x * 14u;
    uint _2411 = _2410 + 13u;
    float _2418 = _1085 + (-1.0);
    float _2423 = (cbLight._m0[_2411].x * _2418) + 1.0;
    float _2424 = (cbLight._m0[_2411].y * _2418) + 1.0;
    float _2425 = (cbLight._m0[_2411].z * _2418) + 1.0;
    float _2426 = (cbLight._m0[_2411].w * _2418) + 1.0;
    uint _2427 = _2410 + 5u;
    float _2433 = isnan(1.0) ? _2424 : (isnan(_2424) ? 1.0 : min(_2424, 1.0));
    uint _2437 = _2410 + 4u;
    float _2446 = isnan(1.0) ? _2423 : (isnan(_2423) ? 1.0 : min(_2423, 1.0));
    uint _2450 = _2410 | 1u;
    float _2461 = dot(vec3(cbLight._m0[_2410].xyz), vec3(_923, _924, _925));
    float _2464 = dot(vec3(cbLight._m0[_2450].xyz), vec3(_923, _924, _925));
    float _4765 = isnan(0.0) ? _2461 : (isnan(_2461) ? 0.0 : max(_2461, 0.0));
    float _4776 = isnan(0.0) ? _2464 : (isnan(_2464) ? 0.0 : max(_2464, 0.0));
    float _2469 = (isnan(1.0) ? _4765 : (isnan(_4765) ? 1.0 : min(_4765, 1.0))) * 0.3183098733425140380859375;
    float _2471 = (isnan(1.0) ? _4776 : (isnan(_4776) ? 1.0 : min(_4776, 1.0))) * 0.3183098733425140380859375;
    float _2478 = ((cbLight._m0[_2427].x * _2433) * _2471) + (((cbLight._m0[_2437].x * _2399) * _2446) * _2469);
    float _2479 = ((_2433 * cbLight._m0[_2427].y) * _2471) + (((cbLight._m0[_2437].y * _2401) * _2446) * _2469);
    float _2480 = ((_2433 * cbLight._m0[_2427].z) * _2471) + (((cbLight._m0[_2437].z * _2403) * _2446) * _2469);
    uvec4 _2484 = floatBitsToUint(cbLight._m0[_2410 + 12u]);
    bool _2486 = _2484.x == 0u;
    float _2588;
    float _2590;
    float _2592;
    if (_2486)
    {
        _2588 = _2478;
        _2590 = _2479;
        _2592 = _2480;
    }
    else
    {
        uint _2596 = _2410 + 6u;
        float _2612 = (dot(vec3(cbLight._m0[_2410 + 2u].xyz), vec3(_923, _924, _925)) * 0.5) + 0.5;
        float _2613 = _2612 * _2612;
        float _4787 = isnan(0.0) ? _2613 : (isnan(_2613) ? 0.0 : max(_2613, 0.0));
        float _2614 = isnan(1.0) ? _4787 : (isnan(_4787) ? 1.0 : min(_4787, 1.0));
        float _2615 = isnan(1.0) ? _2425 : (isnan(_2425) ? 1.0 : min(_2425, 1.0));
        _2588 = (((cbLight._m0[_2596].x * 0.3183098733425140380859375) * _2614) * _2615) + _2478;
        _2590 = (((cbLight._m0[_2596].y * 0.3183098733425140380859375) * _2614) * _2615) + _2479;
        _2592 = (((cbLight._m0[_2596].z * 0.3183098733425140380859375) * _2614) * _2615) + _2480;
    }
    bool _2595 = _2484.y == 0u;
    float _2650;
    float _2652;
    float _2654;
    if (_2595)
    {
        _2650 = _2588;
        _2652 = _2590;
        _2654 = _2592;
    }
    else
    {
        uint _2812 = _2410 + 7u;
        float _2828 = (dot(vec3(cbLight._m0[_2410 + 3u].xyz), vec3(_923, _924, _925)) * 0.5) + 0.5;
        float _2829 = _2828 * _2828;
        float _4803 = isnan(0.0) ? _2829 : (isnan(_2829) ? 0.0 : max(_2829, 0.0));
        float _2830 = isnan(1.0) ? _4803 : (isnan(_4803) ? 1.0 : min(_4803, 1.0));
        float _2831 = isnan(1.0) ? _2426 : (isnan(_2426) ? 1.0 : min(_2426, 1.0));
        _2650 = (((cbLight._m0[_2812].x * 0.3183098733425140380859375) * _2830) * _2831) + _2588;
        _2652 = (((cbLight._m0[_2812].y * 0.3183098733425140380859375) * _2830) * _2831) + _2590;
        _2654 = (((cbLight._m0[_2812].z * 0.3183098733425140380859375) * _2830) * _2831) + _2592;
    }
    uint _2657 = _2410 + 8u;
    float _2670 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2410].w)) * _926) * 0.949999988079071044921875);
    float _2671 = _2670 * _2670;
    float _2672 = cbLight._m0[_2410].x + _1002;
    float _2673 = cbLight._m0[_2410].y + _1003;
    float _2674 = cbLight._m0[_2410].z + _1004;
    float _2678 = inversesqrt(dot(vec3(_2672, _2673, _2674), vec3(_2672, _2673, _2674)));
    float _2679 = _2678 * _2672;
    float _2680 = _2678 * _2673;
    float _2681 = _2678 * _2674;
    float _2682 = dot(vec3(_923, _924, _925), vec3(cbLight._m0[_2410].xyz));
    float _4819 = isnan(0.0) ? _2682 : (isnan(_2682) ? 0.0 : max(_2682, 0.0));
    float _2685 = isnan(1.0) ? _4819 : (isnan(_4819) ? 1.0 : min(_4819, 1.0));
    float _4830 = isnan(0.0) ? _1086 : (isnan(_1086) ? 0.0 : max(_1086, 0.0));
    float _2686 = isnan(1.0) ? _4830 : (isnan(_4830) ? 1.0 : min(_4830, 1.0));
    float _2687 = dot(vec3(_923, _924, _925), vec3(_2679, _2680, _2681));
    float _4841 = isnan(0.0) ? _2687 : (isnan(_2687) ? 0.0 : max(_2687, 0.0));
    float _2690 = isnan(1.0) ? _4841 : (isnan(_4841) ? 1.0 : min(_4841, 1.0));
    float _2691 = dot(vec3(cbLight._m0[_2410].xyz), vec3(_2679, _2680, _2681));
    float _4852 = isnan(0.0) ? _2691 : (isnan(_2691) ? 0.0 : max(_2691, 0.0));
    float _2695 = _2671 * _2671;
    float _2699 = ((_2690 * _2690) * (_2695 + (-1.0))) + 1.0;
    float _2710 = (exp2(log2(1.0 - (isnan(1.0) ? _4852 : (isnan(_4852) ? 1.0 : min(_4852, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2711 = 1.0 - _2671;
    float _2722 = (0.5 / (((_2686 * ((_2685 * _2711) + _2671)) + 9.9999999392252902907785028219223e-09) + (((_2686 * _2711) + _2671) * _2685))) * _2685;
    float _4863 = isnan(0.0) ? _2722 : (isnan(_2722) ? 0.0 : max(_2722, 0.0));
    float _2724 = (isnan(1.0) ? _4863 : (isnan(_4863) ? 1.0 : min(_4863, 1.0))) * (_2695 / ((_2699 * _2699) * 3.141590118408203125));
    uint _2738 = _2410 + 9u;
    float _2749 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2450].w)) * _926) * 0.949999988079071044921875);
    float _2750 = _2749 * _2749;
    float _2751 = cbLight._m0[_2450].x + _1002;
    float _2752 = cbLight._m0[_2450].y + _1003;
    float _2753 = cbLight._m0[_2450].z + _1004;
    float _2757 = inversesqrt(dot(vec3(_2751, _2752, _2753), vec3(_2751, _2752, _2753)));
    float _2758 = _2757 * _2751;
    float _2759 = _2757 * _2752;
    float _2760 = _2757 * _2753;
    float _2761 = dot(vec3(_923, _924, _925), vec3(cbLight._m0[_2450].xyz));
    float _4874 = isnan(0.0) ? _2761 : (isnan(_2761) ? 0.0 : max(_2761, 0.0));
    float _2764 = isnan(1.0) ? _4874 : (isnan(_4874) ? 1.0 : min(_4874, 1.0));
    float _2765 = dot(vec3(_923, _924, _925), vec3(_2758, _2759, _2760));
    float _4885 = isnan(0.0) ? _2765 : (isnan(_2765) ? 0.0 : max(_2765, 0.0));
    float _2768 = isnan(1.0) ? _4885 : (isnan(_4885) ? 1.0 : min(_4885, 1.0));
    float _2769 = dot(vec3(cbLight._m0[_2450].xyz), vec3(_2758, _2759, _2760));
    float _4896 = isnan(0.0) ? _2769 : (isnan(_2769) ? 0.0 : max(_2769, 0.0));
    float _2773 = _2750 * _2750;
    float _2777 = ((_2768 * _2768) * (_2773 + (-1.0))) + 1.0;
    float _2786 = (exp2(log2(1.0 - (isnan(1.0) ? _4896 : (isnan(_4896) ? 1.0 : min(_4896, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2787 = 1.0 - _2750;
    float _2797 = (0.5 / (((_2686 * ((_2764 * _2787) + _2750)) + 9.9999999392252902907785028219223e-09) + (((_2686 * _2787) + _2750) * _2764))) * _2764;
    float _4907 = isnan(0.0) ? _2797 : (isnan(_2797) ? 0.0 : max(_2797, 0.0));
    float _2799 = (isnan(1.0) ? _4907 : (isnan(_4907) ? 1.0 : min(_4907, 1.0))) * (_2773 / ((_2777 * _2777) * 3.141590118408203125));
    float _2809 = (((_2786 * cbLight._m0[_2738].x) * _2799) * _2433) + ((((cbLight._m0[_2657].x * _2399) * _2710) * _2724) * _2446);
    float _2810 = (((_2786 * cbLight._m0[_2738].y) * _2799) * _2433) + ((((cbLight._m0[_2657].y * _2401) * _2710) * _2724) * _2446);
    float _2811 = (((_2786 * cbLight._m0[_2738].z) * _2799) * _2433) + ((((cbLight._m0[_2657].z * _2403) * _2710) * _2724) * _2446);
    float _2867;
    float _2869;
    float _2871;
    if (_2486)
    {
        _2867 = _2809;
        _2869 = _2810;
        _2871 = _2811;
    }
    else
    {
        uint _2873 = _2410 + 2u;
        uint _2877 = _2410 + 10u;
        float _2891 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2873].w)) * _926) * 0.949999988079071044921875);
        float _2892 = _2891 * _2891;
        float _2893 = cbLight._m0[_2873].x + _1002;
        float _2894 = cbLight._m0[_2873].y + _1003;
        float _2895 = cbLight._m0[_2873].z + _1004;
        float _2899 = inversesqrt(dot(vec3(_2893, _2894, _2895), vec3(_2893, _2894, _2895)));
        float _2900 = _2899 * _2893;
        float _2901 = _2899 * _2894;
        float _2902 = _2899 * _2895;
        float _2903 = dot(vec3(_923, _924, _925), vec3(cbLight._m0[_2873].xyz));
        float _4918 = isnan(0.0) ? _2903 : (isnan(_2903) ? 0.0 : max(_2903, 0.0));
        float _2906 = isnan(1.0) ? _4918 : (isnan(_4918) ? 1.0 : min(_4918, 1.0));
        float _2907 = dot(vec3(_923, _924, _925), vec3(_2900, _2901, _2902));
        float _4929 = isnan(0.0) ? _2907 : (isnan(_2907) ? 0.0 : max(_2907, 0.0));
        float _2910 = isnan(1.0) ? _4929 : (isnan(_4929) ? 1.0 : min(_4929, 1.0));
        float _2911 = dot(vec3(cbLight._m0[_2873].xyz), vec3(_2900, _2901, _2902));
        float _4940 = isnan(0.0) ? _2911 : (isnan(_2911) ? 0.0 : max(_2911, 0.0));
        float _2915 = _2892 * _2892;
        float _2919 = ((_2910 * _2910) * (_2915 + (-1.0))) + 1.0;
        float _2928 = (exp2(log2(1.0 - (isnan(1.0) ? _4940 : (isnan(_4940) ? 1.0 : min(_4940, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2929 = 1.0 - _2892;
        float _2939 = (0.5 / (((_2686 * ((_2906 * _2929) + _2892)) + 9.9999999392252902907785028219223e-09) + (((_2686 * _2929) + _2892) * _2906))) * _2906;
        float _4951 = isnan(0.0) ? _2939 : (isnan(_2939) ? 0.0 : max(_2939, 0.0));
        float _2941 = (isnan(1.0) ? _4951 : (isnan(_4951) ? 1.0 : min(_4951, 1.0))) * (_2915 / ((_2919 * _2919) * 3.141590118408203125));
        float _2942 = isnan(1.0) ? _2425 : (isnan(_2425) ? 1.0 : min(_2425, 1.0));
        _2867 = (((_2928 * cbLight._m0[_2877].x) * _2941) * _2942) + _2809;
        _2869 = (((_2928 * cbLight._m0[_2877].y) * _2941) * _2942) + _2810;
        _2871 = (((_2928 * cbLight._m0[_2877].z) * _2941) * _2942) + _2811;
    }
    float _2973;
    float _2975;
    float _2977;
    if (_2595)
    {
        _2973 = _2867;
        _2975 = _2869;
        _2977 = _2871;
    }
    else
    {
        uint _2984 = _2410 + 3u;
        uint _2988 = _2410 + 11u;
        float _3002 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2984].w)) * _926) * 0.949999988079071044921875);
        float _3003 = _3002 * _3002;
        float _3004 = cbLight._m0[_2984].x + _1002;
        float _3005 = cbLight._m0[_2984].y + _1003;
        float _3006 = cbLight._m0[_2984].z + _1004;
        float _3010 = inversesqrt(dot(vec3(_3004, _3005, _3006), vec3(_3004, _3005, _3006)));
        float _3011 = _3010 * _3004;
        float _3012 = _3010 * _3005;
        float _3013 = _3010 * _3006;
        float _3014 = dot(vec3(_923, _924, _925), vec3(cbLight._m0[_2984].xyz));
        float _4967 = isnan(0.0) ? _3014 : (isnan(_3014) ? 0.0 : max(_3014, 0.0));
        float _3017 = isnan(1.0) ? _4967 : (isnan(_4967) ? 1.0 : min(_4967, 1.0));
        float _3018 = dot(vec3(_923, _924, _925), vec3(_3011, _3012, _3013));
        float _4978 = isnan(0.0) ? _3018 : (isnan(_3018) ? 0.0 : max(_3018, 0.0));
        float _3021 = isnan(1.0) ? _4978 : (isnan(_4978) ? 1.0 : min(_4978, 1.0));
        float _3022 = dot(vec3(cbLight._m0[_2984].xyz), vec3(_3011, _3012, _3013));
        float _4989 = isnan(0.0) ? _3022 : (isnan(_3022) ? 0.0 : max(_3022, 0.0));
        float _3026 = _3003 * _3003;
        float _3030 = ((_3021 * _3021) * (_3026 + (-1.0))) + 1.0;
        float _3039 = (exp2(log2(1.0 - (isnan(1.0) ? _4989 : (isnan(_4989) ? 1.0 : min(_4989, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _3040 = 1.0 - _3003;
        float _3050 = (0.5 / (((_2686 * ((_3017 * _3040) + _3003)) + 9.9999999392252902907785028219223e-09) + (((_2686 * _3040) + _3003) * _3017))) * _3017;
        float _5000 = isnan(0.0) ? _3050 : (isnan(_3050) ? 0.0 : max(_3050, 0.0));
        float _3052 = (isnan(1.0) ? _5000 : (isnan(_5000) ? 1.0 : min(_5000, 1.0))) * (_3026 / ((_3030 * _3030) * 3.141590118408203125));
        float _3053 = isnan(1.0) ? _2426 : (isnan(_2426) ? 1.0 : min(_2426, 1.0));
        _2973 = (((_3039 * cbLight._m0[_2988].x) * _3052) * _3053) + _2867;
        _2975 = (((_3039 * cbLight._m0[_2988].y) * _3052) * _3053) + _2869;
        _2977 = (((_3039 * cbLight._m0[_2988].z) * _3052) * _3053) + _2871;
    }
    float _3119;
    float _3121;
    float _3123;
    float _3125;
    float _3127;
    float _3129;
    if (_2408.y == 0u)
    {
        uvec4 _3074 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3075 = _3074.x;
        uint _3086 = uint((float(_3074.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1023) / _3075))) + floor(float(uint(cbSceneParam._m0[85u].x * _1022) / _3075)));
        float _3096 = (log2(_2186 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _3097 = isnan(0.0) ? _3096 : (isnan(_3096) ? 0.0 : max(_3096, 0.0));
        uint _3100 = uint(isnan(14.0) ? _3097 : (isnan(_3097) ? 14.0 : min(_3097, 14.0)));
        uvec4 _3105 = texelFetch(g_lightClusterGridBuffer, int(((_3100 << 2u) + (_3086 << 6u)) >> 2u));
        uint _3106 = _3105.x;
        uint _3107 = _3074.z;
        float _3186;
        float _3188;
        float _3190;
        float _3192;
        float _3194;
        float _3196;
        if (((((1u << ((_3107 >> 4u) & 15u)) + 4294967295u) & _3106) == 0u) || ((_3107 & 240u) == 0u))
        {
            _3186 = 0.0;
            _3188 = 0.0;
            _3190 = 0.0;
            _3192 = 0.0;
            _3194 = 0.0;
            _3196 = 0.0;
        }
        else
        {
            float _3187;
            float _3189;
            float _3191;
            float _3193;
            float _3195;
            float _3197;
            float _3339 = 0.0;
            float _3340 = 0.0;
            float _3341 = 0.0;
            float _3342 = 0.0;
            float _3343 = 0.0;
            float _3344 = 0.0;
            uint _3345 = 0u;
            uint _3354;
            bool _3355;
            for (;;)
            {
                _3354 = texelFetch(g_lightClassification, int((((_3100 << 5u) + (_3086 << 9u)) + (_3345 << 2u)) >> 2u)).x;
                _3355 = _3354 == 0u;
                float frontier_phi_71_pred;
                float frontier_phi_71_pred_1;
                float frontier_phi_71_pred_2;
                float frontier_phi_71_pred_3;
                float frontier_phi_71_pred_4;
                float frontier_phi_71_pred_5;
                if (_3355)
                {
                    frontier_phi_71_pred = _3344;
                    frontier_phi_71_pred_1 = _3343;
                    frontier_phi_71_pred_2 = _3342;
                    frontier_phi_71_pred_3 = _3341;
                    frontier_phi_71_pred_4 = _3340;
                    frontier_phi_71_pred_5 = _3339;
                }
                else
                {
                    float _3484;
                    float _3485;
                    float _3486;
                    float _3487;
                    float _3488;
                    float _3489;
                    uint _3490;
                    _3484 = _3339;
                    _3485 = _3340;
                    _3486 = _3341;
                    _3487 = _3342;
                    _3488 = _3343;
                    _3489 = _3344;
                    _3490 = _3354;
                    float _3411;
                    float _3412;
                    float _3413;
                    float _3414;
                    float _3415;
                    float _3416;
                    for (;;)
                    {
                        uint _3494 = uint(findLSB(_3490)) + (_3345 << 5u);
                        uint _3491 = (_3490 + 4294967295u) & _3490;
                        uint _3496 = _3494 * 48u;
                        vec4 _3510 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3496)).x, texelFetch(g_PointLightRenderingBuffer, int(_3496 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3496 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3496 + 3u)).x));
                        uint _3516 = (_3494 * 48u) + 4u;
                        vec4 _3529 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3516)).x, texelFetch(g_PointLightRenderingBuffer, int(_3516 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3516 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3516 + 3u)).x));
                        uint _3535 = (_3494 * 48u) + 8u;
                        vec3 _3546 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3535)).x, texelFetch(g_PointLightRenderingBuffer, int(_3535 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3535 + 2u)).x));
                        float _3550 = _3510.x - _2184;
                        float _3551 = _3510.y - _2185;
                        float _3552 = _3510.z - _2186;
                        float _3553 = dot(vec3(_3550, _3551, _3552), vec3(_3550, _3551, _3552));
                        float _3556 = inversesqrt(_3553);
                        float _3557 = _3556 * _3550;
                        float _3558 = _3556 * _3551;
                        float _3559 = _3556 * _3552;
                        float _3560 = dot(vec3(_1041, _1044, _1047), vec3(_3557, _3558, _3559));
                        float _3565 = 1.0 - (_3553 * _3510.w);
                        float _5026 = isnan(0.0) ? _3565 : (isnan(_3565) ? 0.0 : max(_3565, 0.0));
                        float _3566 = isnan(1.0) ? _5026 : (isnan(_5026) ? 1.0 : min(_5026, 1.0));
                        float _3567 = sqrt(_3553) * _3529.w;
                        float _3570 = 1.39999997615814208984375 / (_3567 + 1.39999997615814208984375);
                        float _3571 = _3570 * _3570;
                        float _3574 = ((1.0 - _3571) * _3560) + _3571;
                        float _3577 = _3567 * _3567;
                        float _3581 = ((isnan(0.0) ? _3574 : (isnan(_3574) ? 0.0 : max(_3574, 0.0))) * _3566) / ((_3577 * 0.699999988079071044921875) + 1.0);
                        float _3585 = (-0.0) - _2184;
                        float _3586 = (-0.0) - _2185;
                        float _3587 = (-0.0) - _2186;
                        float _3591 = inversesqrt(dot(vec3(_3585, _3586, _3587), vec3(_3585, _3586, _3587)));
                        float _3592 = _3591 * _3585;
                        float _3593 = _3591 * _3586;
                        float _3594 = _3591 * _3587;
                        float _3601 = exp2(log2(1.0 / ((_3577 * 3.5) + 5.0)) * 0.25);
                        float _3602 = 1.0 - _1101;
                        float _3609 = sqrt(1.0 - ((1.0 - (_3602 * _3602)) * (1.0 - (_3601 * _3601))));
                        float _3610 = _3609 * _3609;
                        float _3611 = _3610 * _3610;
                        float _3612 = _3592 + _3557;
                        float _3613 = _3593 + _3558;
                        float _3614 = _3594 + _3559;
                        float _3618 = inversesqrt(dot(vec3(_3612, _3613, _3614), vec3(_3612, _3613, _3614)));
                        float _3622 = dot(vec3(_1041, _1044, _1047), vec3(_3592, _3593, _3594));
                        float _5042 = isnan(0.0) ? _3622 : (isnan(_3622) ? 0.0 : max(_3622, 0.0));
                        float _3625 = isnan(1.0) ? _5042 : (isnan(_5042) ? 1.0 : min(_5042, 1.0));
                        float _3626 = dot(vec3(_1041, _1044, _1047), vec3(_3618 * _3612, _3618 * _3613, _3618 * _3614));
                        float _5053 = isnan(0.0) ? _3626 : (isnan(_3626) ? 0.0 : max(_3626, 0.0));
                        float _3629 = isnan(1.0) ? _5053 : (isnan(_5053) ? 1.0 : min(_5053, 1.0));
                        float _3633 = ((_3629 * _3629) * (_3611 + (-1.0))) + 1.0;
                        float _3634 = _3570 * _3610;
                        float _3635 = _3634 * _3634;
                        float _3638 = ((1.0 - _3635) * _3560) + _3635;
                        float _5064 = isnan(0.0) ? _3638 : (isnan(_3638) ? 0.0 : max(_3638, 0.0));
                        float _3639 = isnan(1.0) ? _5064 : (isnan(_5064) ? 1.0 : min(_5064, 1.0));
                        float _3640 = 1.0 - _3610;
                        float _3650 = (0.5 / (((_3639 * ((_3625 * _3640) + _3610)) + 9.9999999392252902907785028219223e-09) + (((_3639 * _3640) + _3610) * _3625))) * _3639;
                        float _5075 = isnan(0.0) ? _3650 : (isnan(_3650) ? 0.0 : max(_3650, 0.0));
                        float _3661 = (((_3611 * 3.1415927410125732421875) * (isnan(1.0) ? _5075 : (isnan(_5075) ? 1.0 : min(_5075, 1.0)))) / ((_3633 * _3633) * ((_3577 * 2.1991131305694580078125) + 3.141590118408203125))) * _3566;
                        _3414 = (_3581 * _3529.x) + _3487;
                        _3415 = (_3581 * _3529.y) + _3488;
                        _3416 = (_3581 * _3529.z) + _3489;
                        _3411 = (_3661 * _3546.x) + _3484;
                        _3412 = (_3661 * _3546.y) + _3485;
                        _3413 = (_3661 * _3546.z) + _3486;
                        if (_3491 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3484 = _3411;
                            _3485 = _3412;
                            _3486 = _3413;
                            _3487 = _3414;
                            _3488 = _3415;
                            _3489 = _3416;
                            _3490 = _3491;
                        }
                    }
                    frontier_phi_71_pred = _3416;
                    frontier_phi_71_pred_1 = _3415;
                    frontier_phi_71_pred_2 = _3414;
                    frontier_phi_71_pred_3 = _3413;
                    frontier_phi_71_pred_4 = _3412;
                    frontier_phi_71_pred_5 = _3411;
                }
                _3197 = frontier_phi_71_pred;
                _3195 = frontier_phi_71_pred_1;
                _3193 = frontier_phi_71_pred_2;
                _3191 = frontier_phi_71_pred_3;
                _3189 = frontier_phi_71_pred_4;
                _3187 = frontier_phi_71_pred_5;
                uint _3346 = _3345 + 1u;
                if (_3346 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3339 = _3187;
                    _3340 = _3189;
                    _3341 = _3191;
                    _3342 = _3193;
                    _3343 = _3195;
                    _3344 = _3197;
                    _3345 = _3346;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3186 = _3187;
            _3188 = _3189;
            _3190 = _3191;
            _3192 = _3193;
            _3194 = _3195;
            _3196 = _3197;
        }
        uvec4 _3200 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3201 = _3200.z;
        uint _3203 = (_3201 >> 8u) & 15u;
        float _3307;
        float _3309;
        float _3311;
        float _3313;
        float _3315;
        float _3317;
        if (((4294967295u << _3203) & _3106) == 0u)
        {
            _3307 = _3186;
            _3309 = _3188;
            _3311 = _3190;
            _3313 = _3192;
            _3315 = _3194;
            _3317 = _3196;
        }
        else
        {
            float _3332 = inversesqrt(dot(vec3(_2184, _2185, _2186), vec3(_2184, _2185, _2186)));
            float _3333 = _3332 * _2184;
            float _3334 = _3332 * _2185;
            float _3335 = _3332 * _2186;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_3203 < ((_3201 >> 12u) & 15u))
            {
                float _3308;
                float _3310;
                float _3312;
                float _3314;
                float _3316;
                float _3318;
                float _3467 = _3186;
                float _3468 = _3188;
                float _3469 = _3190;
                float _3470 = _3192;
                float _3471 = _3194;
                float _3472 = _3196;
                uint _3473 = _3203;
                uint _3482;
                bool _3483;
                for (;;)
                {
                    _3482 = texelFetch(g_lightClassification, int((((_3100 << 5u) + (_3086 << 9u)) + (_3473 << 2u)) >> 2u)).x;
                    _3483 = _3482 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    float frontier_phi_82_pred_3;
                    float frontier_phi_82_pred_4;
                    float frontier_phi_82_pred_5;
                    if (_3483)
                    {
                        frontier_phi_82_pred = _3472;
                        frontier_phi_82_pred_1 = _3471;
                        frontier_phi_82_pred_2 = _3470;
                        frontier_phi_82_pred_3 = _3469;
                        frontier_phi_82_pred_4 = _3468;
                        frontier_phi_82_pred_5 = _3467;
                    }
                    else
                    {
                        float _3675;
                        float _3676;
                        float _3677;
                        float _3678;
                        float _3679;
                        float _3680;
                        float _3968;
                        float _3969;
                        float _3970;
                        float _3971;
                        float _3972;
                        float _3973;
                        float _3688 = _3467;
                        float _3689 = _3468;
                        float _3690 = _3469;
                        float _3691 = _3470;
                        float _3692 = _3471;
                        float _3693 = _3472;
                        uint _3694 = _3482;
                        uint _3695;
                        vec4 _3720;
                        float _3721;
                        vec4 _3736;
                        vec3 _3748;
                        vec4 _3763;
                        vec4 _3778;
                        float _3824;
                        bool _3825;
                        for (;;)
                        {
                            uint _3705 = ((_3473 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3694));
                            _3695 = (_3694 + 4294967295u) & _3694;
                            uint _3707 = _3705 * 40u;
                            _3720 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3707)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3707 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3707 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3707 + 3u)).x));
                            _3721 = _3720.w;
                            uint _3723 = (_3705 * 40u) + 4u;
                            _3736 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3723)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3723 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3723 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3723 + 3u)).x));
                            uint _3738 = (_3705 * 40u) + 8u;
                            _3748 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3738)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3738 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3738 + 2u)).x));
                            uint _3750 = (_3705 * 40u) + 16u;
                            _3763 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3750)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3750 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3750 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3750 + 3u)).x));
                            uint _3765 = (_3705 * 40u) + 20u;
                            _3778 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3765)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3765 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3765 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3765 + 3u)).x));
                            uint _3780 = (_3705 * 40u) + 24u;
                            vec4 _3793 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3780)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3780 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3780 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3780 + 3u)).x));
                            uint _3799 = (_3705 * 40u) + 28u;
                            vec4 _3812 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3799)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3799 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3799 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3799 + 3u)).x));
                            _3824 = fma(_2186, _3812.z, fma(_2185, _3812.y, _3812.x * _2184)) + _3812.w;
                            _3825 = !((fma(_2186, _3793.z, fma(_2185, _3793.y, _3793.x * _2184)) + _3793.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_3825)
                            {
                                float _3852 = _3720.x - _2184;
                                float _3853 = _3720.y - _2185;
                                float _3854 = _3720.z - _2186;
                                float _3855 = dot(vec3(_3852, _3853, _3854), vec3(_3852, _3853, _3854));
                                float _3858 = inversesqrt(_3855);
                                float _3859 = _3858 * _3852;
                                float _3860 = _3858 * _3853;
                                float _3861 = _3858 * _3854;
                                float _3865 = 1.0 - (_3855 / (_3721 * _3721));
                                float _5086 = isnan(0.0) ? _3865 : (isnan(_3865) ? 0.0 : max(_3865, 0.0));
                                float _3866 = isnan(1.0) ? _5086 : (isnan(_5086) ? 1.0 : min(_5086, 1.0));
                                float _3870 = sqrt(_3855) * _3736.w;
                                float _3872 = 1.39999997615814208984375 / (_3870 + 1.39999997615814208984375);
                                float _3873 = _3872 * _3872;
                                float _3876 = ((1.0 - _3873) * dot(vec3(_3859, _3860, _3861), vec3(_1041, _1044, _1047))) + _3873;
                                float _3879 = _3870 * _3870;
                                float _3883 = (fma(_2186, _3763.z, fma(_2185, _3763.y, _3763.x * _2184)) + _3763.w) / _3824;
                                float _3884 = (fma(_2186, _3778.z, fma(_2185, _3778.y, _3778.x * _2184)) + _3778.w) / _3824;
                                float _3888 = 1.0 - dot(vec2(_3883, _3884), vec2(_3883, _3884));
                                float _5102 = isnan(0.0) ? _3888 : (isnan(_3888) ? 0.0 : max(_3888, 0.0));
                                float _3889 = isnan(1.0) ? _5102 : (isnan(_5102) ? 1.0 : min(_5102, 1.0));
                                float _3890 = _3889 * (((isnan(0.0) ? _3876 : (isnan(_3876) ? 0.0 : max(_3876, 0.0))) * _3866) / ((_3879 * 0.699999988079071044921875) + 1.0));
                                float _3902 = exp2(log2(1.0 / ((_3879 * 3.5) + 5.0)) * 0.25);
                                float _3903 = 1.0 - _1101;
                                float _3910 = sqrt(1.0 - ((1.0 - (_3903 * _3903)) * (1.0 - (_3902 * _3902))));
                                float _3911 = _3910 * _3910;
                                float _3912 = _3911 * _3911;
                                float _3913 = _3859 - _3333;
                                float _3914 = _3860 - _3334;
                                float _3915 = _3861 - _3335;
                                float _3919 = inversesqrt(dot(vec3(_3913, _3914, _3915), vec3(_3913, _3914, _3915)));
                                float _3923 = dot(vec3(_1041, _1044, _1047), vec3((-0.0) - _3333, (-0.0) - _3334, (-0.0) - _3335));
                                float _5113 = isnan(0.0) ? _3923 : (isnan(_3923) ? 0.0 : max(_3923, 0.0));
                                float _3926 = isnan(1.0) ? _5113 : (isnan(_5113) ? 1.0 : min(_5113, 1.0));
                                float _3927 = dot(vec3(_1041, _1044, _1047), vec3(_3919 * _3913, _3919 * _3914, _3919 * _3915));
                                float _5124 = isnan(0.0) ? _3927 : (isnan(_3927) ? 0.0 : max(_3927, 0.0));
                                float _3930 = isnan(1.0) ? _5124 : (isnan(_5124) ? 1.0 : min(_5124, 1.0));
                                float _3934 = ((_3930 * _3930) * (_3912 + (-1.0))) + 1.0;
                                float _3935 = _3872 * _3911;
                                float _3936 = _3935 * _3935;
                                float _3942 = ((1.0 - _3936) * dot(vec3(_1041, _1044, _1047), vec3(_3859, _3860, _3861))) + _3936;
                                float _5135 = isnan(0.0) ? _3942 : (isnan(_3942) ? 0.0 : max(_3942, 0.0));
                                float _3943 = isnan(1.0) ? _5135 : (isnan(_5135) ? 1.0 : min(_5135, 1.0));
                                float _3944 = 1.0 - _3911;
                                float _3954 = (0.5 / (((_3943 * ((_3926 * _3944) + _3911)) + 9.9999999392252902907785028219223e-09) + (((_3943 * _3944) + _3911) * _3926))) * _3943;
                                float _5146 = isnan(0.0) ? _3954 : (isnan(_3954) ? 0.0 : max(_3954, 0.0));
                                float _3964 = (_3889 * _3866) * (((_3912 * 3.1415927410125732421875) * (isnan(1.0) ? _5146 : (isnan(_5146) ? 1.0 : min(_5146, 1.0)))) / ((_3934 * _3934) * ((_3879 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_88_pred = _3890 * _3736.z;
                                frontier_phi_88_pred_1 = _3890 * _3736.y;
                                frontier_phi_88_pred_2 = _3890 * _3736.x;
                                frontier_phi_88_pred_3 = _3964 * _3748.z;
                                frontier_phi_88_pred_4 = _3964 * _3748.y;
                                frontier_phi_88_pred_5 = _3964 * _3748.x;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _3973 = frontier_phi_88_pred;
                            _3972 = frontier_phi_88_pred_1;
                            _3971 = frontier_phi_88_pred_2;
                            _3970 = frontier_phi_88_pred_3;
                            _3969 = frontier_phi_88_pred_4;
                            _3968 = frontier_phi_88_pred_5;
                            _3678 = _3971 + _3691;
                            _3679 = _3972 + _3692;
                            _3680 = _3973 + _3693;
                            _3675 = _3968 + _3688;
                            _3676 = _3969 + _3689;
                            _3677 = _3970 + _3690;
                            if (_3695 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3688 = _3675;
                                _3689 = _3676;
                                _3690 = _3677;
                                _3691 = _3678;
                                _3692 = _3679;
                                _3693 = _3680;
                                _3694 = _3695;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _3680;
                        frontier_phi_82_pred_1 = _3679;
                        frontier_phi_82_pred_2 = _3678;
                        frontier_phi_82_pred_3 = _3677;
                        frontier_phi_82_pred_4 = _3676;
                        frontier_phi_82_pred_5 = _3675;
                    }
                    _3318 = frontier_phi_82_pred;
                    _3316 = frontier_phi_82_pred_1;
                    _3314 = frontier_phi_82_pred_2;
                    _3312 = frontier_phi_82_pred_3;
                    _3310 = frontier_phi_82_pred_4;
                    _3308 = frontier_phi_82_pred_5;
                    uint _3474 = _3473 + 1u;
                    if (_3474 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3467 = _3308;
                        _3468 = _3310;
                        _3469 = _3312;
                        _3470 = _3314;
                        _3471 = _3316;
                        _3472 = _3318;
                        _3473 = _3474;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _3314;
                frontier_phi_63_64_ladder_1 = _3318;
                frontier_phi_63_64_ladder_2 = _3316;
                frontier_phi_63_64_ladder_3 = _3312;
                frontier_phi_63_64_ladder_4 = _3310;
                frontier_phi_63_64_ladder_5 = _3308;
            }
            else
            {
                frontier_phi_63_64_ladder = _3192;
                frontier_phi_63_64_ladder_1 = _3196;
                frontier_phi_63_64_ladder_2 = _3194;
                frontier_phi_63_64_ladder_3 = _3190;
                frontier_phi_63_64_ladder_4 = _3188;
                frontier_phi_63_64_ladder_5 = _3186;
            }
            _3307 = frontier_phi_63_64_ladder_5;
            _3309 = frontier_phi_63_64_ladder_4;
            _3311 = frontier_phi_63_64_ladder_3;
            _3313 = frontier_phi_63_64_ladder;
            _3315 = frontier_phi_63_64_ladder_2;
            _3317 = frontier_phi_63_64_ladder_1;
        }
        float _3322 = isnan(1.0) ? _1085 : (isnan(_1085) ? 1.0 : min(_1085, 1.0));
        _3119 = (_3322 * _3313) + _2650;
        _3121 = (_3322 * _3315) + _2652;
        _3123 = (_3322 * _3317) + _2654;
        _3125 = ((_3307 * 0.039999999105930328369140625) * _3322) + _2973;
        _3127 = ((_3309 * 0.039999999105930328369140625) * _3322) + _2975;
        _3129 = ((_3311 * 0.039999999105930328369140625) * _3322) + _2977;
    }
    else
    {
        _3119 = _2650;
        _3121 = _2652;
        _3123 = _2654;
        _3125 = _2973;
        _3127 = _2975;
        _3129 = _2977;
    }
    float _5162 = isnan(0.0) ? _1070 : (isnan(_1070) ? 0.0 : max(_1070, 0.0));
    float _5173 = isnan(0.0) ? _1071 : (isnan(_1071) ? 0.0 : max(_1071, 0.0));
    float _5184 = isnan(0.0) ? _1072 : (isnan(_1072) ? 0.0 : max(_1072, 0.0));
    float _3146 = ((isnan(1.0) ? _5162 : (isnan(_5162) ? 1.0 : min(_5162, 1.0))) * (_3119 + ((isnan(0.0) ? _1840 : (isnan(_1840) ? 0.0 : max(_1840, 0.0))) * _1085))) + ((_3125 + ((isnan(0.0) ? _2131 : (isnan(_2131) ? 0.0 : max(_2131, 0.0))) * _1919)) * cbPerFrame._m0[3u].x);
    float _3147 = ((isnan(1.0) ? _5173 : (isnan(_5173) ? 1.0 : min(_5173, 1.0))) * (_3121 + ((isnan(0.0) ? _1843 : (isnan(_1843) ? 0.0 : max(_1843, 0.0))) * _1085))) + ((_3127 + ((isnan(0.0) ? _2134 : (isnan(_2134) ? 0.0 : max(_2134, 0.0))) * _1919)) * cbPerFrame._m0[3u].x);
    float _3148 = ((isnan(1.0) ? _5184 : (isnan(_5184) ? 1.0 : min(_5184, 1.0))) * (_3123 + ((isnan(0.0) ? _1846 : (isnan(_1846) ? 0.0 : max(_1846, 0.0))) * _1085))) + ((_3129 + ((isnan(0.0) ? _2137 : (isnan(_2137) ? 0.0 : max(_2137, 0.0))) * _1919)) * cbPerFrame._m0[3u].x);
    uint _3149 = _265 + 6u;
    float _3157 = _1022 / cbSceneParam._m0[86u].x;
    float _3158 = _1023 / cbSceneParam._m0[86u].y;
    vec4 _3172 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3157, _3158, (log2((isnan(cbSceneParam._m0[77u].w) ? _944 : (isnan(_944) ? cbSceneParam._m0[77u].w : min(_944, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3174 = _3172.x;
    float _3175 = _3172.y;
    float _3176 = _3172.z;
    float _3177 = _3172.w;
    float _3249;
    float _3251;
    float _3253;
    float _3255;
    if (_944 > cbSceneParam._m0[78u].w)
    {
        float _3211 = isnan(_944) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _944 : min(cbSceneParam._m0[80u].w, _944));
        float _3212 = _3211 / _944;
        float _3223 = _3212 * _995;
        float _3224 = _996 * _3212;
        float _3225 = (-0.0) - _3224;
        float _3227 = _3212 * _997;
        float _3229 = (cbSceneParam._m0[77u].w * _3225) / _3211;
        float _3230 = _3229 + cbSceneParam._m0[79u].w;
        float _3231 = cbSceneParam._m0[79u].w - _3224;
        float _3237 = sqrt(((_3223 * _3223) + (_3224 * _3224)) + (_3227 * _3227));
        float _3240 = (1.0 - (cbSceneParam._m0[77u].w / _3211)) * _3237;
        float _3245 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3247 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3424;
        if (abs((_3225 - _3229) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3424 = ((((_3230 > 0.0) ? exp2(_3245 * _3230) : (2.0 - exp2(_3247 * _3230))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3240;
        }
        else
        {
            float _3368 = 1.0 / cbSceneParam._m0[80u].x;
            float _3369 = isnan(_3231) ? _3230 : (isnan(_3230) ? _3231 : max(_3230, _3231));
            float _3370 = isnan(_3231) ? _3230 : (isnan(_3230) ? _3231 : min(_3230, _3231));
            float _3379 = isnan(0.0) ? _3369 : (isnan(_3369) ? 0.0 : min(_3369, 0.0));
            float _3380 = isnan(0.0) ? _3370 : (isnan(_3370) ? 0.0 : min(_3370, 0.0));
            _3424 = ((abs(_3237 / _3225) * cbSceneParam._m0[80u].y) * ((((_3379 - _3380) * 2.0) - ((exp2(_3245 * (isnan(0.0) ? _3369 : (isnan(_3369) ? 0.0 : max(_3369, 0.0)))) - exp2(_3245 * (isnan(0.0) ? _3370 : (isnan(_3370) ? 0.0 : max(_3370, 0.0))))) * _3368)) - ((exp2(_3247 * _3379) - exp2(_3247 * _3380)) * _3368))) + (_3240 * cbSceneParam._m0[80u].z);
        }
        vec4 _3426 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3157, _3158, 1.0), 0.0);
        float _3435 = exp2((_3424 * (-1.44269502162933349609375)) * (1.0 - _3426.w));
        float _3436 = log2(_3435);
        float _3452 = log2(_3177);
        _3249 = (exp2(_3452 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3436 * cbSceneParam._m0[78u].x)) * _3426.x) / cbSceneParam._m0[78u].x)) + _3174;
        _3251 = (exp2(_3452 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3436 * cbSceneParam._m0[78u].y)) * _3426.y) / cbSceneParam._m0[78u].y)) + _3175;
        _3253 = (exp2(_3452 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3436 * cbSceneParam._m0[78u].z)) * _3426.z) / cbSceneParam._m0[78u].z)) + _3176;
        _3255 = _3435 * _3177;
    }
    else
    {
        _3249 = _3174;
        _3251 = _3175;
        _3253 = _3176;
        _3255 = _3177;
    }
    bool _3462;
    vec4 _3265;
    vec4 _3287;
    float _3289;
    float _3293;
    float _3294;
    float _3295;
    float _3296;
    bool _3306;
    for (;;)
    {
        _3265 = cbMatDynParam._m0[0u];
        float _3267 = roundEven(_3265.y);
        bool _3268 = _3267 == 3.0;
        float _3269 = log2(_3255);
        float _3276 = exp2(_3269 * cbSceneParam._m0[78u].x) * _3146;
        float _3277 = exp2(_3269 * cbSceneParam._m0[78u].y) * _3147;
        float _3278 = exp2(_3269 * cbSceneParam._m0[78u].z) * _3148;
        float _3285 = _1011 + (-0.5);
        _3287 = cbMtdParam._m0[1u];
        _3289 = _3287.y * _3285;
        float _3292 = (_3267 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3293 = _3292 * (_3268 ? _3276 : (_3276 + (cbSceneParam._m0[72u].w * _3249)));
        _3294 = _3292 * (_3268 ? _3277 : (_3277 + (cbSceneParam._m0[72u].w * _3251)));
        _3295 = _3292 * (_3268 ? _3278 : (_3278 + (cbSceneParam._m0[72u].w * _3253)));
        _3296 = _3285 * 0.999000012874603271484375;
        _3306 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3306)
        {
            if ((cbInstanceData._m0[_265 + 7u].x + _3296) < 0.5)
            {
                _3462 = true;
                break;
            }
        }
        uint _3403 = _1060 + uint(_3265.w);
        if ((cbInstanceData._m0[_3403].w < 1.0) && ((cbInstanceData._m0[_3403].w + _3296) < 0.5))
        {
            _3462 = true;
            break;
        }
        if ((_3289 + 1.0) < _3287.x)
        {
            _3462 = true;
            break;
        }
        _3462 = false;
        break;
    }
    float _3666;
    if (_3462)
    {
        discard_state = true;
        _3666 = 0.0;
    }
    else
    {
        _3666 = cbInstanceData._m0[_3149].w;
    }
    SV_Target.x = _3293;
    SV_Target.y = _3294;
    SV_Target.z = _3295;
    SV_Target.w = _3666;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_3149].w;
    discard_exit();
}


