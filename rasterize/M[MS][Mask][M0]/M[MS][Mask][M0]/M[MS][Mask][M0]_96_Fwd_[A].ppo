#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 14) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_29;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_10;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_6;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1425;
float _3781;
float _3782;
float _3783;
float _3784;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _227 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _228 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _229 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _235 = inversesqrt(dot(vec3(_227, _228, _229), vec3(_227, _228, _229)));
    float _236 = _235 * _227;
    float _237 = _235 * _228;
    float _238 = _235 * _229;
    float _242 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _243 = _242 * NORMAL.x;
    float _244 = _242 * NORMAL.y;
    float _245 = _242 * NORMAL.z;
    float _249 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _250 = _249 * TANGENT.x;
    float _251 = _249 * TANGENT.y;
    float _252 = _249 * TANGENT.z;
    uint _255 = uint(roundEven(NORMAL.w)) * 13u;
    uint _260 = _255 + 1u;
    uint _264 = _255 + 2u;
    float _273 = sqrt(((cbInstanceData._m0[_260].x * cbInstanceData._m0[_260].x) + (cbInstanceData._m0[_255].x * cbInstanceData._m0[_255].x)) + (cbInstanceData._m0[_264].x * cbInstanceData._m0[_264].x));
    float _274 = _273 * TEXCOORD.z;
    float _275 = _273 * TEXCOORD.w;
    vec4 _295 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _301 = _295.x * cbMtdParam._m0[11u].x;
    float _302 = _295.y * cbMtdParam._m0[11u].y;
    float _303 = _295.z * cbMtdParam._m0[11u].z;
    vec4 _322 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _274) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _275) + cbTextureTilingScale._m0[5u].w));
    vec4 _341 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _378 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _380 = _378.x;
    float _392 = dot(vec4(_380, _378.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _409 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _341.x) * 2.0) - ((((_380 - _392) * cbMtdParam._m0[24u].z) + _392) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3793 = isnan(0.0) ? _409 : (isnan(_409) ? 0.0 : max(_409, 0.0));
    float _410 = isnan(1.0) ? _3793 : (isnan(_3793) ? 1.0 : min(_3793, 1.0));
    float _417 = (_410 * ((_322.x * cbMtdParam._m0[12u].x) - _301)) + _301;
    float _418 = (_410 * ((_322.y * cbMtdParam._m0[12u].y) - _302)) + _302;
    float _419 = (_410 * ((_322.z * cbMtdParam._m0[12u].z) - _303)) + _303;
    vec4 _436 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _274) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _275) + cbTextureTilingScale._m0[3u].w));
    vec4 _456 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _458 = _456.x;
    float _468 = dot(vec4(_458, _456.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _482 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _341.y) * 2.0) - ((((_458 - _468) * cbMtdParam._m0[24u].z) + _468) * cbMtdParam._m0[20u].w))) + 1.0;
    float _3804 = isnan(0.0) ? _482 : (isnan(_482) ? 0.0 : max(_482, 0.0));
    float _483 = isnan(1.0) ? _3804 : (isnan(_3804) ? 1.0 : min(_3804, 1.0));
    float _490 = (_483 * ((_436.x * cbMtdParam._m0[13u].x) - _417)) + _417;
    float _491 = (_483 * ((_436.y * cbMtdParam._m0[13u].y) - _418)) + _418;
    float _492 = (_483 * ((_436.z * cbMtdParam._m0[13u].z) - _419)) + _419;
    vec4 _511 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _274) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _275) + cbTextureTilingScale._m0[14u].w));
    vec4 _531 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _274) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _275) + cbTextureTilingScale._m0[4u].w));
    vec4 _548 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _550 = _548.x;
    float _551 = _548.y;
    float _552 = _548.z;
    float _559 = ((_531.x - _550) * _410) + _550;
    float _560 = ((_531.y - _551) * _410) + _551;
    float _561 = ((_531.z - _552) * _410) + _552;
    vec4 _573 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _274) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _275) + cbTextureTilingScale._m0[2u].w));
    float _586 = ((_573.z - _561) * _483) + _561;
    float _589 = ((((_573.x - _559) * _483) + _559) * 2.0) + (-1.0);
    float _591 = ((((_573.y - _560) * _483) + _560) * 2.0) + (-1.0);
    float _592 = dot(vec2(_589, _591), vec2(_589, _591));
    float _3815 = isnan(0.0) ? _592 : (isnan(_592) ? 0.0 : max(_592, 0.0));
    float _597 = sqrt(1.0 - (isnan(1.0) ? _3815 : (isnan(_3815) ? 1.0 : min(_3815, 1.0))));
    vec4 _611 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _623 = (((_611.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _589;
    float _624 = (((_611.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _591;
    float _627 = fma(_597, _243, fma(_624, _250, _623 * _236));
    float _630 = fma(_597, _244, fma(_624, _251, _623 * _237));
    float _633 = fma(_597, _245, fma(_624, _252, _623 * _238));
    float _637 = inversesqrt(dot(vec3(_627, _630, _633), vec3(_627, _630, _633)));
    vec4 _664 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _274) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _275) + cbTextureTilingScale._m0[11u].w));
    float _666 = _664.x;
    float _667 = 1.0 - _666;
    float _673 = (cbMtdParam._m0[19u].x + dot(vec4(_637 * _627, _637 * _630, _637 * _633, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_666 - _667) * cbMtdParam._m0[24u].w) + _667) * cbMtdParam._m0[21u].z);
    float _3826 = isnan(0.0) ? _673 : (isnan(_673) ? 0.0 : max(_673, 0.0));
    float _674 = isnan(1.0) ? _3826 : (isnan(_3826) ? 1.0 : min(_3826, 1.0));
    float _676 = (-0.0) - cbMtdParam._m0[24u].x;
    float _678 = isnan(0.0) ? _676 : (isnan(_676) ? 0.0 : max(_676, 0.0));
    float _679 = isnan(1.0) ? _678 : (isnan(_678) ? 1.0 : min(_678, 1.0));
    float _686 = _674 - ((_674 * TEXCOORD_8.x) * _679);
    float _687 = _674 - ((_674 * TEXCOORD_8.y) * _679);
    float _688 = _674 - ((_674 * TEXCOORD_8.z) * _679);
    float _695 = (_686 * ((_511.x * cbMtdParam._m0[18u].x) - _490)) + _490;
    float _696 = (_687 * ((_511.y * cbMtdParam._m0[18u].y) - _491)) + _491;
    float _697 = (_688 * ((_511.z * cbMtdParam._m0[18u].z) - _492)) + _492;
    vec4 _709 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _274) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _275) + cbTextureTilingScale._m0[19u].w));
    float _711 = _709.x;
    float _712 = 1.0 - _711;
    float _740 = (TEXCOORD_8.x - ((cbMtdParam._m0[22u].w * (1.0 - TEXCOORD_8.x)) * ((((_711 - _712) * cbMtdParam._m0[24u].y) + _712) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3847 = isnan(0.0) ? _740 : (isnan(_740) ? 0.0 : max(_740, 0.0));
    float _741 = isnan(1.0) ? _3847 : (isnan(_3847) ? 1.0 : min(_3847, 1.0));
    float _749 = ((((cbMtdParam._m0[10u].x - _695) * TEXCOORD_8.x) * cbMtdParam._m0[23u].w) * _741) + _695;
    float _750 = ((((cbMtdParam._m0[10u].y - _696) * TEXCOORD_8.y) * cbMtdParam._m0[23u].w) * _741) + _696;
    float _751 = (((cbMtdParam._m0[23u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _697)) * _741) + _697;
    float _755 = (cbMtdParam._m0[19u].w * (_611.z - _586)) + _586;
    vec4 _769 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _274) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _275) + cbTextureTilingScale._m0[15u].w));
    float _776 = (_769.x * 2.0) + (-1.0);
    float _777 = (_769.y * 2.0) + (-1.0);
    float _778 = dot(vec2(_776, _777), vec2(_776, _777));
    float _3858 = isnan(0.0) ? _778 : (isnan(_778) ? 0.0 : max(_778, 0.0));
    float _786 = ((_769.z - _755) * _686) + _755;
    float _789 = ((cbMtdParam._m0[23u].y - _786) * _741) + _786;
    vec4 _808 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _274) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _275) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _814 = (_808.x * 2.0) + (-1.0);
    float _815 = (_808.y * 2.0) + (-1.0);
    float _816 = dot(vec2(_814, _815), vec2(_814, _815));
    float _3869 = isnan(0.0) ? _816 : (isnan(_816) ? 0.0 : max(_816, 0.0));
    float _831 = ((sqrt(1.0 - (isnan(1.0) ? _3858 : (isnan(_3858) ? 1.0 : min(_3858, 1.0)))) - _597) * _688) + _597;
    float _834 = (((_776 - _623) * _686) + _623) + (cbMtdParam._m0[21u].x * _623);
    float _835 = (((_777 - _624) * _687) + _624) + (cbMtdParam._m0[21u].x * _624);
    float _846 = (((_814 - _834) + (_834 * cbMtdParam._m0[22u].z)) * _741) + _834;
    float _847 = (((_815 - _835) + (_835 * cbMtdParam._m0[22u].z)) * _741) + _835;
    float _848 = (_741 * (sqrt(1.0 - (isnan(1.0) ? _3869 : (isnan(_3869) ? 1.0 : min(_3869, 1.0)))) - _831)) + _831;
    float _850 = cbMtdParam._m0[22u].x + _611.w;
    float _853 = fma(_848, _243, fma(_847, _250, _846 * _236));
    float _856 = fma(_848, _244, fma(_847, _251, _846 * _237));
    float _859 = fma(_848, _245, fma(_847, _252, _846 * _238));
    float _863 = inversesqrt(dot(vec3(_853, _856, _859), vec3(_853, _856, _859)));
    float _864 = _863 * _853;
    float _865 = _863 * _856;
    float _866 = _863 * _859;
    float _3880 = isnan(0.0) ? _789 : (isnan(_789) ? 0.0 : max(_789, 0.0));
    float _867 = isnan(1.0) ? _3880 : (isnan(_3880) ? 1.0 : min(_3880, 1.0));
    float _3891 = isnan(0.0) ? _850 : (isnan(_850) ? 0.0 : max(_850, 0.0));
    float _3902 = isnan(0.0) ? _749 : (isnan(_749) ? 0.0 : max(_749, 0.0));
    float _3913 = isnan(0.0) ? _750 : (isnan(_750) ? 0.0 : max(_750, 0.0));
    float _3924 = isnan(0.0) ? _751 : (isnan(_751) ? 0.0 : max(_751, 0.0));
    float _885 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _926 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _936 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _926);
    float _937 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _926);
    float _938 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _926);
    float _942 = inversesqrt(dot(vec3(_936, _937, _938), vec3(_936, _937, _938)));
    float _943 = _936 * _942;
    float _944 = _937 * _942;
    float _945 = _938 * _942;
    vec4 _950 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _952 = _950.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1106 = sqrt(((_936 * _936) + (_937 * _937)) + (_938 * _938));
        float _1112 = (cbMatDynParam._m0[5u].x * _1106) + cbMatDynParam._m0[5u].y;
        float _3935 = isnan(0.0) ? _1112 : (isnan(_1112) ? 0.0 : max(_1112, 0.0));
        float _1113 = isnan(1.0) ? _3935 : (isnan(_3935) ? 1.0 : min(_3935, 1.0));
        float _1117 = (cbMatDynParam._m0[5u].z * _1106) + cbMatDynParam._m0[5u].w;
        float _3946 = isnan(0.0) ? _1117 : (isnan(_1117) ? 0.0 : max(_1117, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3946 : (isnan(_3946) ? 1.0 : min(_3946, 1.0))) - _1113)) + _1113) < ((_952 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _963 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _964 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _982 = fma(_866, cbSceneParam._m0[5u].z, fma(_865, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _864));
    float _985 = fma(_866, cbSceneParam._m0[6u].z, fma(_865, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _864));
    float _988 = fma(_866, cbSceneParam._m0[7u].z, fma(_865, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _864));
    uint _1001 = _255 + 9u;
    uint _1002 = _1001 + uint(cbMatDynParam._m0[0u].w);
    float _1008 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3902 : (isnan(_3902) ? 1.0 : min(_3902, 1.0)))) * cbInstanceData._m0[_1002].x;
    float _1009 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3913 : (isnan(_3913) ? 1.0 : min(_3913, 1.0)))) * cbInstanceData._m0[_1002].y;
    float _1010 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3924 : (isnan(_3924) ? 1.0 : min(_3924, 1.0)))) * cbInstanceData._m0[_1002].z;
    float _3957 = isnan(0.0) ? _1008 : (isnan(_1008) ? 0.0 : max(_1008, 0.0));
    float _1011 = isnan(1.0) ? _3957 : (isnan(_3957) ? 1.0 : min(_3957, 1.0));
    float _3968 = isnan(0.0) ? _1009 : (isnan(_1009) ? 0.0 : max(_1009, 0.0));
    float _1012 = isnan(1.0) ? _3968 : (isnan(_3968) ? 1.0 : min(_3968, 1.0));
    float _3979 = isnan(0.0) ? _1010 : (isnan(_1010) ? 0.0 : max(_1010, 0.0));
    float _1013 = isnan(1.0) ? _3979 : (isnan(_3979) ? 1.0 : min(_3979, 1.0));
    vec4 _1022 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _963, cbSceneParam._m0[86u].y * _964));
    float _1026 = ((isnan(1.0) ? _3891 : (isnan(_3891) ? 1.0 : min(_3891, 1.0))) * TEXCOORD_5.w) * _1022.x;
    float _1027 = dot(vec3(_864, _865, _866), vec3(_943, _944, _945));
    float _1030 = _1027 * 2.0;
    float _1034 = (_1030 * _864) - _943;
    float _1035 = (_1030 * _865) - _944;
    float _1036 = (_1030 * _866) - _945;
    float _1040 = abs(dot(vec3(_943, _944, _945), vec3(_864, _865, _866)));
    float _3990 = isnan(0.0) ? _1040 : (isnan(_1040) ? 0.0 : max(_1040, 0.0));
    float _1042 = sqrt(_867);
    float _1055 = exp2((_1042 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3990 : (isnan(_3990) ? 1.0 : min(_3990, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1042 * 3.0));
    float _1087 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1091 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1095 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1424;
    float _1426;
    float _1427;
    float _1428;
    float _1429;
    float _1430;
    float _1431;
    float _1432;
    float _1433;
    float _1434;
    float _1435;
    float _1436;
    float _1437;
    float _1438;
    float _1439;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1149 = fma(_1095, cbModelParam._m0[26u].z, fma(_1091, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1087));
        float _1153 = fma(_1095, cbModelParam._m0[27u].z, fma(_1091, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1087));
        float _1157 = fma(_1095, cbModelParam._m0[28u].z, fma(_1091, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1087));
        float _1182 = _1087 + _864;
        float _1183 = _1091 + _865;
        float _1184 = _1095 + _866;
        float _1194 = fma(_1184, cbModelParam._m0[26u].z, fma(_1183, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1182)) - _1149;
        float _1195 = fma(_1184, cbModelParam._m0[27u].z, fma(_1183, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1182)) - _1153;
        float _1196 = fma(_1184, cbModelParam._m0[28u].z, fma(_1183, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1182)) - _1157;
        float _1200 = inversesqrt(dot(vec3(_1194, _1195, _1196), vec3(_1194, _1195, _1196)));
        float _1213 = ((_1200 * _1194) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1149 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1214 = ((_1200 * _1195) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1153 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1215 = ((_1200 * _1196) / cbModelParam._m0[34u].z) + ((((((_1157 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1218 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1213, _1214, _1215), 0.0);
        vec4 _1225 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1213, _1214, _1215), 0.0);
        vec4 _1232 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1213, _1214, _1215), 0.0);
        vec4 _1239 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1213, _1214, _1215), 0.0);
        float _1252 = exp2((_1218.w + (-0.5)) * 20.0) * 2.0;
        float _1253 = _1252 * (_1218.x + (-0.5));
        float _1254 = _1252 * (_1218.y + (-0.5));
        float _1255 = _1252 * (_1218.z + (-0.5));
        float _1262 = exp2((_1225.w + (-0.5)) * 20.0) * 2.0;
        float _1263 = _1262 * (_1225.x + (-0.5));
        float _1264 = _1262 * (_1225.y + (-0.5));
        float _1265 = _1262 * (_1225.z + (-0.5));
        float _1272 = exp2((_1232.w + (-0.5)) * 20.0) * 2.0;
        float _1273 = _1272 * (_1232.x + (-0.5));
        float _1274 = _1272 * (_1232.y + (-0.5));
        float _1275 = _1272 * (_1232.z + (-0.5));
        float _1282 = exp2((_1239.w + (-0.5)) * 20.0) * 2.0;
        float _1283 = _1282 * (_1239.x + (-0.5));
        float _1284 = _1282 * (_1239.y + (-0.5));
        float _1285 = _1282 * (_1239.z + (-0.5));
        float _1286 = isnan(0.0) ? _1283 : (isnan(_1283) ? 0.0 : max(_1283, 0.0));
        float _1287 = isnan(0.0) ? _1284 : (isnan(_1284) ? 0.0 : max(_1284, 0.0));
        float _1288 = isnan(0.0) ? _1285 : (isnan(_1285) ? 0.0 : max(_1285, 0.0));
        float _1289 = _1253 * 0.5;
        float _1290 = _1263 * 0.5;
        float _1291 = _1273 * 0.5;
        float _1292 = dot(vec3(_1289, _1290, _1291), vec3(_1289, _1290, _1291));
        float _1297 = (_1292 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1292);
        float _1306 = (dot(vec3(_864, _865, _866), vec3(_1297 * _1289, _1297 * _1290, _1297 * _1291)) + 1.0) * 0.5;
        float _4016 = isnan(0.0) ? _1306 : (isnan(_1306) ? 0.0 : max(_1306, 0.0));
        float _1316 = sqrt(((_1290 * _1290) + (_1289 * _1289)) + (_1291 * _1291)) / (_1286 + 9.9999997473787516355514526367188e-06);
        float _4027 = isnan(0.0) ? _1316 : (isnan(_1316) ? 0.0 : max(_1316, 0.0));
        float _1317 = isnan(1.0) ? _4027 : (isnan(_4027) ? 1.0 : min(_4027, 1.0));
        float _1318 = _1317 * 2.0;
        float _1322 = (1.0 - _1317) / (_1317 + 1.0);
        float _4038 = isnan(0.0) ? _1322 : (isnan(_1322) ? 0.0 : max(_1322, 0.0));
        float _1323 = isnan(1.0) ? _4038 : (isnan(_4038) ? 1.0 : min(_4038, 1.0));
        float _1332 = ((((1.0 - _1323) * (_1318 + 2.0)) * exp2(log2(isnan(1.0) ? _4016 : (isnan(_4016) ? 1.0 : min(_4016, 1.0))) * (_1318 + 1.0))) + _1323) * _1286;
        float _1333 = _1254 * 0.5;
        float _1334 = _1264 * 0.5;
        float _1335 = _1274 * 0.5;
        float _1336 = dot(vec3(_1333, _1334, _1335), vec3(_1333, _1334, _1335));
        float _1341 = (_1336 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1336);
        float _1349 = (dot(vec3(_864, _865, _866), vec3(_1341 * _1333, _1341 * _1334, _1341 * _1335)) + 1.0) * 0.5;
        float _4049 = isnan(0.0) ? _1349 : (isnan(_1349) ? 0.0 : max(_1349, 0.0));
        float _1358 = sqrt(((_1334 * _1334) + (_1333 * _1333)) + (_1335 * _1335)) / (_1287 + 9.9999997473787516355514526367188e-06);
        float _4060 = isnan(0.0) ? _1358 : (isnan(_1358) ? 0.0 : max(_1358, 0.0));
        float _1359 = isnan(1.0) ? _4060 : (isnan(_4060) ? 1.0 : min(_4060, 1.0));
        float _1360 = _1359 * 2.0;
        float _1364 = (1.0 - _1359) / (_1359 + 1.0);
        float _4071 = isnan(0.0) ? _1364 : (isnan(_1364) ? 0.0 : max(_1364, 0.0));
        float _1365 = isnan(1.0) ? _4071 : (isnan(_4071) ? 1.0 : min(_4071, 1.0));
        float _1374 = ((((1.0 - _1365) * (_1360 + 2.0)) * exp2(log2(isnan(1.0) ? _4049 : (isnan(_4049) ? 1.0 : min(_4049, 1.0))) * (_1360 + 1.0))) + _1365) * _1287;
        float _1375 = _1255 * 0.5;
        float _1376 = _1265 * 0.5;
        float _1377 = _1275 * 0.5;
        float _1378 = dot(vec3(_1375, _1376, _1377), vec3(_1375, _1376, _1377));
        float _1383 = (_1378 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1378);
        float _1391 = (dot(vec3(_864, _865, _866), vec3(_1383 * _1375, _1383 * _1376, _1383 * _1377)) + 1.0) * 0.5;
        float _4082 = isnan(0.0) ? _1391 : (isnan(_1391) ? 0.0 : max(_1391, 0.0));
        float _1400 = sqrt(((_1376 * _1376) + (_1375 * _1375)) + (_1377 * _1377)) / (_1288 + 9.9999997473787516355514526367188e-06);
        float _4093 = isnan(0.0) ? _1400 : (isnan(_1400) ? 0.0 : max(_1400, 0.0));
        float _1401 = isnan(1.0) ? _4093 : (isnan(_4093) ? 1.0 : min(_4093, 1.0));
        float _1402 = _1401 * 2.0;
        float _1406 = (1.0 - _1401) / (_1401 + 1.0);
        float _4104 = isnan(0.0) ? _1406 : (isnan(_1406) ? 0.0 : max(_1406, 0.0));
        float _1407 = isnan(1.0) ? _4104 : (isnan(_4104) ? 1.0 : min(_4104, 1.0));
        float _1416 = ((((1.0 - _1407) * (_1402 + 2.0)) * exp2(log2(isnan(1.0) ? _4082 : (isnan(_4082) ? 1.0 : min(_4082, 1.0))) * (_1402 + 1.0))) + _1407) * _1288;
        _1424 = _1255;
        _1426 = _1254;
        _1427 = _1253;
        _1428 = _1265;
        _1429 = _1264;
        _1430 = _1263;
        _1431 = _1275;
        _1432 = _1274;
        _1433 = _1273;
        _1434 = _1288;
        _1435 = _1287;
        _1436 = _1286;
        _1437 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1332 : (isnan(_1332) ? 0.0 : max(_1332, 0.0)));
        _1438 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1374 : (isnan(_1374) ? 0.0 : max(_1374, 0.0)));
        _1439 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1416 : (isnan(_1416) ? 0.0 : max(_1416, 0.0)));
    }
    else
    {
        _1424 = _1425;
        _1426 = _1425;
        _1427 = _1425;
        _1428 = _1425;
        _1429 = _1425;
        _1430 = _1425;
        _1431 = _1425;
        _1432 = _1425;
        _1433 = _1425;
        _1434 = _1425;
        _1435 = _1425;
        _1436 = _1425;
        _1437 = 0.0;
        _1438 = 0.0;
        _1439 = 0.0;
    }
    float _1735;
    float _1736;
    float _1737;
    float _1738;
    float _1739;
    float _1740;
    float _1741;
    float _1742;
    float _1743;
    float _1744;
    float _1745;
    float _1746;
    float _1747;
    float _1748;
    float _1749;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1466 = fma(_1095, cbModelParam._m0[30u].z, fma(_1091, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1087));
        float _1470 = fma(_1095, cbModelParam._m0[31u].z, fma(_1091, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1087));
        float _1474 = fma(_1095, cbModelParam._m0[32u].z, fma(_1091, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1087));
        float _1497 = _1087 + _864;
        float _1498 = _1091 + _865;
        float _1499 = _1095 + _866;
        float _1509 = fma(_1499, cbModelParam._m0[30u].z, fma(_1498, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1497)) - _1466;
        float _1510 = fma(_1499, cbModelParam._m0[31u].z, fma(_1498, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1497)) - _1470;
        float _1511 = fma(_1499, cbModelParam._m0[32u].z, fma(_1498, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1497)) - _1474;
        float _1515 = inversesqrt(dot(vec3(_1509, _1510, _1511), vec3(_1509, _1510, _1511)));
        float _1528 = ((_1515 * _1509) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1466 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1529 = ((_1515 * _1510) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1470 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1530 = ((_1515 * _1511) / cbModelParam._m0[35u].z) + ((((((_1474 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1532 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1528, _1529, _1530), 0.0);
        vec4 _1539 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1528, _1529, _1530), 0.0);
        vec4 _1546 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1528, _1529, _1530), 0.0);
        vec4 _1553 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1528, _1529, _1530), 0.0);
        float _1565 = exp2((_1532.w + (-0.5)) * 20.0) * 2.0;
        float _1566 = _1565 * (_1532.x + (-0.5));
        float _1567 = _1565 * (_1532.y + (-0.5));
        float _1568 = _1565 * (_1532.z + (-0.5));
        float _1575 = exp2((_1539.w + (-0.5)) * 20.0) * 2.0;
        float _1576 = _1575 * (_1539.x + (-0.5));
        float _1577 = _1575 * (_1539.y + (-0.5));
        float _1578 = _1575 * (_1539.z + (-0.5));
        float _1585 = exp2((_1546.w + (-0.5)) * 20.0) * 2.0;
        float _1586 = _1585 * (_1546.x + (-0.5));
        float _1587 = _1585 * (_1546.y + (-0.5));
        float _1588 = _1585 * (_1546.z + (-0.5));
        float _1595 = exp2((_1553.w + (-0.5)) * 20.0) * 2.0;
        float _1596 = _1595 * (_1553.x + (-0.5));
        float _1597 = _1595 * (_1553.y + (-0.5));
        float _1598 = _1595 * (_1553.z + (-0.5));
        float _1599 = isnan(0.0) ? _1596 : (isnan(_1596) ? 0.0 : max(_1596, 0.0));
        float _1600 = isnan(0.0) ? _1597 : (isnan(_1597) ? 0.0 : max(_1597, 0.0));
        float _1601 = isnan(0.0) ? _1598 : (isnan(_1598) ? 0.0 : max(_1598, 0.0));
        float _1602 = _1566 * 0.5;
        float _1603 = _1576 * 0.5;
        float _1604 = _1586 * 0.5;
        float _1605 = dot(vec3(_1602, _1603, _1604), vec3(_1602, _1603, _1604));
        float _1610 = (_1605 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1605);
        float _1618 = (dot(vec3(_864, _865, _866), vec3(_1610 * _1602, _1610 * _1603, _1610 * _1604)) + 1.0) * 0.5;
        float _4145 = isnan(0.0) ? _1618 : (isnan(_1618) ? 0.0 : max(_1618, 0.0));
        float _1627 = sqrt(((_1603 * _1603) + (_1602 * _1602)) + (_1604 * _1604)) / (_1599 + 9.9999997473787516355514526367188e-06);
        float _4156 = isnan(0.0) ? _1627 : (isnan(_1627) ? 0.0 : max(_1627, 0.0));
        float _1628 = isnan(1.0) ? _4156 : (isnan(_4156) ? 1.0 : min(_4156, 1.0));
        float _1629 = _1628 * 2.0;
        float _1633 = (1.0 - _1628) / (_1628 + 1.0);
        float _4167 = isnan(0.0) ? _1633 : (isnan(_1633) ? 0.0 : max(_1633, 0.0));
        float _1634 = isnan(1.0) ? _4167 : (isnan(_4167) ? 1.0 : min(_4167, 1.0));
        float _1643 = ((((1.0 - _1634) * (_1629 + 2.0)) * exp2(log2(isnan(1.0) ? _4145 : (isnan(_4145) ? 1.0 : min(_4145, 1.0))) * (_1629 + 1.0))) + _1634) * _1599;
        float _1644 = _1567 * 0.5;
        float _1645 = _1577 * 0.5;
        float _1646 = _1587 * 0.5;
        float _1647 = dot(vec3(_1644, _1645, _1646), vec3(_1644, _1645, _1646));
        float _1652 = (_1647 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1647);
        float _1660 = (dot(vec3(_864, _865, _866), vec3(_1652 * _1644, _1652 * _1645, _1652 * _1646)) + 1.0) * 0.5;
        float _4178 = isnan(0.0) ? _1660 : (isnan(_1660) ? 0.0 : max(_1660, 0.0));
        float _1669 = sqrt(((_1645 * _1645) + (_1644 * _1644)) + (_1646 * _1646)) / (_1600 + 9.9999997473787516355514526367188e-06);
        float _4189 = isnan(0.0) ? _1669 : (isnan(_1669) ? 0.0 : max(_1669, 0.0));
        float _1670 = isnan(1.0) ? _4189 : (isnan(_4189) ? 1.0 : min(_4189, 1.0));
        float _1671 = _1670 * 2.0;
        float _1675 = (1.0 - _1670) / (_1670 + 1.0);
        float _4200 = isnan(0.0) ? _1675 : (isnan(_1675) ? 0.0 : max(_1675, 0.0));
        float _1676 = isnan(1.0) ? _4200 : (isnan(_4200) ? 1.0 : min(_4200, 1.0));
        float _1685 = ((((1.0 - _1676) * (_1671 + 2.0)) * exp2(log2(isnan(1.0) ? _4178 : (isnan(_4178) ? 1.0 : min(_4178, 1.0))) * (_1671 + 1.0))) + _1676) * _1600;
        float _1686 = _1568 * 0.5;
        float _1687 = _1578 * 0.5;
        float _1688 = _1588 * 0.5;
        float _1689 = dot(vec3(_1686, _1687, _1688), vec3(_1686, _1687, _1688));
        float _1694 = (_1689 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1689);
        float _1702 = (dot(vec3(_864, _865, _866), vec3(_1694 * _1686, _1694 * _1687, _1694 * _1688)) + 1.0) * 0.5;
        float _4211 = isnan(0.0) ? _1702 : (isnan(_1702) ? 0.0 : max(_1702, 0.0));
        float _1711 = sqrt(((_1687 * _1687) + (_1686 * _1686)) + (_1688 * _1688)) / (_1601 + 9.9999997473787516355514526367188e-06);
        float _4222 = isnan(0.0) ? _1711 : (isnan(_1711) ? 0.0 : max(_1711, 0.0));
        float _1712 = isnan(1.0) ? _4222 : (isnan(_4222) ? 1.0 : min(_4222, 1.0));
        float _1713 = _1712 * 2.0;
        float _1717 = (1.0 - _1712) / (_1712 + 1.0);
        float _4233 = isnan(0.0) ? _1717 : (isnan(_1717) ? 0.0 : max(_1717, 0.0));
        float _1718 = isnan(1.0) ? _4233 : (isnan(_4233) ? 1.0 : min(_4233, 1.0));
        float _1727 = ((((1.0 - _1718) * (_1713 + 2.0)) * exp2(log2(isnan(1.0) ? _4211 : (isnan(_4211) ? 1.0 : min(_4211, 1.0))) * (_1713 + 1.0))) + _1718) * _1601;
        _1735 = _1568;
        _1736 = _1567;
        _1737 = _1566;
        _1738 = _1578;
        _1739 = _1577;
        _1740 = _1576;
        _1741 = _1588;
        _1742 = _1587;
        _1743 = _1586;
        _1744 = _1601;
        _1745 = _1600;
        _1746 = _1599;
        _1747 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1643 : (isnan(_1643) ? 0.0 : max(_1643, 0.0)));
        _1748 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1685 : (isnan(_1685) ? 0.0 : max(_1685, 0.0)));
        _1749 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1727 : (isnan(_1727) ? 0.0 : max(_1727, 0.0)));
    }
    else
    {
        _1735 = _1425;
        _1736 = _1425;
        _1737 = _1425;
        _1738 = _1425;
        _1739 = _1425;
        _1740 = _1425;
        _1741 = _1425;
        _1742 = _1425;
        _1743 = _1425;
        _1744 = _1425;
        _1745 = _1425;
        _1746 = _1425;
        _1747 = 0.0;
        _1748 = 0.0;
        _1749 = 0.0;
    }
    float _1759 = (cbModelParam._m0[1u].x * (_1747 - _1437)) + _1437;
    float _1760 = (cbModelParam._m0[1u].x * (_1748 - _1438)) + _1438;
    float _1761 = (cbModelParam._m0[1u].x * (_1749 - _1439)) + _1439;
    float _1782 = fma(_1761, cbSceneParam._m0[89u].z, fma(_1760, cbSceneParam._m0[89u].y, _1759 * cbSceneParam._m0[89u].x));
    float _1785 = fma(_1761, cbSceneParam._m0[90u].z, fma(_1760, cbSceneParam._m0[90u].y, _1759 * cbSceneParam._m0[90u].x));
    float _1788 = fma(_1761, cbSceneParam._m0[91u].z, fma(_1760, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1759));
    float _1803 = _1034 * 0.5;
    float _1804 = _1035 * 0.5;
    float _1805 = _1036 * 0.5;
    float _1806 = dot(vec4(_1803, _1804, _1805, 1.0), vec4(_1737, _1740, _1743, _1746));
    float _1809 = dot(vec4(_1803, _1804, _1805, 1.0), vec4(_1736, _1739, _1742, _1745));
    float _1812 = dot(vec4(_1803, _1804, _1805, 1.0), vec4(_1735, _1738, _1741, _1744));
    float _1846;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1819 = dot(vec4(_1803, _1804, _1805, 1.0), vec4(_1424, _1428, _1431, _1434));
        float _1823 = dot(vec4(_1803, _1804, _1805, 1.0), vec4(_1426, _1429, _1432, _1435));
        float _1827 = dot(vec4(_1803, _1804, _1805, 1.0), vec4(_1427, _1430, _1433, _1436));
        float _1834 = dot(vec4(cbModelParam._m0[39u]), vec4(_1803, _1804, _1805, 1.0));
        _1846 = dot(vec3(isnan(0.0) ? _1827 : (isnan(_1827) ? 0.0 : max(_1827, 0.0)), isnan(0.0) ? _1823 : (isnan(_1823) ? 0.0 : max(_1823, 0.0)), isnan(0.0) ? _1819 : (isnan(_1819) ? 0.0 : max(_1819, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1834) ? 0.0 : (isnan(0.0) ? _1834 : max(0.0, _1834))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1846 = 1.0;
    }
    float _1857;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1848 = dot(vec4(cbModelParam._m0[40u]), vec4(_1803, _1804, _1805, 1.0));
        _1857 = dot(vec3(isnan(0.0) ? _1806 : (isnan(_1806) ? 0.0 : max(_1806, 0.0)), isnan(0.0) ? _1809 : (isnan(_1809) ? 0.0 : max(_1809, 0.0)), isnan(0.0) ? _1812 : (isnan(_1812) ? 0.0 : max(_1812, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1848) ? 0.0 : (isnan(0.0) ? _1848 : max(0.0, _1848))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1857 = 1.0;
    }
    float _1861 = (_1857 * cbModelParam._m0[1u].x) + (_1846 * (1.0 - cbModelParam._m0[1u].x));
    float _1871 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _867);
    float _1872 = isnan(_1871) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1871 : min(cbModelParam._m0[25u].z, _1871));
    float _1952;
    float _1954;
    float _1956;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1919 = fma(_1095, cbModelParam._m0[13u].z, fma(_1091, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1087)) + cbModelParam._m0[13u].w;
        float _1923 = fma(_1095, cbModelParam._m0[14u].z, fma(_1091, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1087)) + cbModelParam._m0[14u].w;
        float _1927 = fma(_1095, cbModelParam._m0[15u].z, fma(_1091, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1087)) + cbModelParam._m0[15u].w;
        float _1930 = fma(_1036, cbModelParam._m0[13u].z, fma(_1035, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1034));
        float _1933 = fma(_1036, cbModelParam._m0[14u].z, fma(_1035, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1034));
        float _1936 = fma(_1036, cbModelParam._m0[15u].z, fma(_1035, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1034));
        float _1964;
        if (_1930 > 0.0)
        {
            _1964 = abs((1.0 - _1919) / _1930);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1930 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1919 + 1.0) / _1930);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1964 = frontier_phi_17_15_ladder;
        }
        float _2164;
        if (_1933 > 0.0)
        {
            _2164 = abs((1.0 - _1923) / _1933);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1933 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1923 + 1.0) / _1933);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2164 = frontier_phi_26_22_ladder;
        }
        float _2407;
        if (_1936 > 0.0)
        {
            _2407 = abs((1.0 - _1927) / _1936);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1936 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1927 + 1.0) / _1936);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2407 = frontier_phi_38_33_ladder;
        }
        float _2409 = isnan(_2164) ? _1964 : (isnan(_1964) ? _2164 : min(_1964, _2164));
        float _2410 = isnan(_2407) ? _2409 : (isnan(_2409) ? _2407 : min(_2409, _2407));
        float _2414 = (_2410 * _1930) + _1919;
        float _2415 = (_2410 * _1933) + _1923;
        float _2416 = (_2410 * _1936) + _1927;
        float _2417 = _2410 * 9.9999997473787516355514526367188e-05;
        float _2419 = (-1.0) - _2417;
        float _2421 = _2417 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2416 > _2421) || ((_2416 < _2419) || ((_2415 > _2421) || ((_2415 < _2419) || ((_2414 < _2419) || (_2414 > _2421))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2540 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2416, cbModelParam._m0[9u].z, fma(_2415, cbModelParam._m0[9u].y, _2414 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2416, cbModelParam._m0[10u].z, fma(_2415, cbModelParam._m0[10u].y, _2414 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2416, cbModelParam._m0[11u].z, fma(_2415, cbModelParam._m0[11u].y, _2414 * cbModelParam._m0[11u].x))), _1872);
            frontier_phi_16_38_ladder = _2540.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2540.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2540.x * cbModelParam._m0[1u].y;
        }
        _1952 = frontier_phi_16_38_ladder_2;
        _1954 = frontier_phi_16_38_ladder_1;
        _1956 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1940 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1034, _1035, _1036), _1872);
        _1952 = _1940.x * cbModelParam._m0[1u].y;
        _1954 = _1940.y * cbModelParam._m0[1u].y;
        _1956 = _1940.z * cbModelParam._m0[1u].y;
    }
    float _1960 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _867);
    float _1961 = isnan(_1960) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1960 : min(cbModelParam._m0[25u].w, _1960));
    float _2050;
    float _2052;
    float _2054;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2014 = fma(_1095, cbModelParam._m0[21u].z, fma(_1091, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1087)) + cbModelParam._m0[21u].w;
        float _2018 = fma(_1095, cbModelParam._m0[22u].z, fma(_1091, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1087)) + cbModelParam._m0[22u].w;
        float _2022 = fma(_1095, cbModelParam._m0[23u].z, fma(_1091, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1087)) + cbModelParam._m0[23u].w;
        float _2025 = fma(_1036, cbModelParam._m0[21u].z, fma(_1035, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1034));
        float _2028 = fma(_1036, cbModelParam._m0[22u].z, fma(_1035, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1034));
        float _2031 = fma(_1036, cbModelParam._m0[23u].z, fma(_1035, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1034));
        float _2169;
        if (_2025 > 0.0)
        {
            _2169 = abs((1.0 - _2014) / _2025);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_2025 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_2014 + 1.0) / _2025);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2169 = frontier_phi_28_24_ladder;
        }
        float _2434;
        if (_2028 > 0.0)
        {
            _2434 = abs((1.0 - _2018) / _2028);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_2028 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_2018 + 1.0) / _2028);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2434 = frontier_phi_40_35_ladder;
        }
        float _2639;
        if (_2031 > 0.0)
        {
            _2639 = abs((1.0 - _2022) / _2031);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_2031 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_2022 + 1.0) / _2031);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2639 = frontier_phi_49_46_ladder;
        }
        float _2641 = isnan(_2434) ? _2169 : (isnan(_2169) ? _2434 : min(_2169, _2434));
        float _2642 = isnan(_2639) ? _2641 : (isnan(_2641) ? _2639 : min(_2641, _2639));
        float _2646 = (_2642 * _2025) + _2014;
        float _2647 = (_2642 * _2028) + _2018;
        float _2648 = (_2642 * _2031) + _2022;
        float _2649 = _2642 * 9.9999997473787516355514526367188e-05;
        float _2650 = (-1.0) - _2649;
        float _2652 = _2649 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2648 > _2652) || ((_2648 < _2650) || ((_2647 > _2652) || ((_2647 < _2650) || ((_2646 < _2650) || (_2646 > _2652))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2847 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2648, cbModelParam._m0[17u].z, fma(_2647, cbModelParam._m0[17u].y, _2646 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2648, cbModelParam._m0[18u].z, fma(_2647, cbModelParam._m0[18u].y, _2646 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2648, cbModelParam._m0[19u].z, fma(_2647, cbModelParam._m0[19u].y, _2646 * cbModelParam._m0[19u].x))), _1961);
            frontier_phi_25_49_ladder = _2847.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2847.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2847.x * cbModelParam._m0[1u].z;
        }
        _2050 = frontier_phi_25_49_ladder_2;
        _2052 = frontier_phi_25_49_ladder_1;
        _2054 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _2034 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1034, _1035, _1036), _1961);
        _2050 = _2034.x * cbModelParam._m0[1u].z;
        _2052 = _2034.y * cbModelParam._m0[1u].z;
        _2054 = _2034.z * cbModelParam._m0[1u].z;
    }
    float _2066 = ((((1.0 - _1055) * ((_1042 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_1055 * _1042)) * _1026;
    float _2067 = _2066 * ((cbModelParam._m0[1u].w * (_2050 - _1952)) + _1952);
    float _2068 = _2066 * ((cbModelParam._m0[1u].w * (_2052 - _1954)) + _1954);
    float _2069 = _2066 * ((cbModelParam._m0[1u].w * (_2054 - _1956)) + _1956);
    float _2072 = fma(_2069, cbSceneParam._m0[89u].z, fma(_2068, cbSceneParam._m0[89u].y, _2067 * cbSceneParam._m0[89u].x));
    float _2075 = fma(_2069, cbSceneParam._m0[90u].z, fma(_2068, cbSceneParam._m0[90u].y, _2067 * cbSceneParam._m0[90u].x));
    float _2078 = fma(_2069, cbSceneParam._m0[91u].z, fma(_2068, cbSceneParam._m0[91u].y, _2067 * cbSceneParam._m0[91u].x));
    uvec4 _2088 = floatBitsToUint(cbInstanceData._m0[_255 + 5u]);
    uint _2090 = _2088.x * 14u;
    uint _2091 = _2090 + 13u;
    float _2098 = _1026 + (-1.0);
    float _2103 = (cbLight._m0[_2091].x * _2098) + 1.0;
    float _2104 = (cbLight._m0[_2091].y * _2098) + 1.0;
    float _2105 = (cbLight._m0[_2091].z * _2098) + 1.0;
    float _2106 = (cbLight._m0[_2091].w * _2098) + 1.0;
    uint _2107 = _2090 + 5u;
    float _2113 = isnan(1.0) ? _2104 : (isnan(_2104) ? 1.0 : min(_2104, 1.0));
    uint _2117 = _2090 + 4u;
    float _2123 = isnan(1.0) ? _2103 : (isnan(_2103) ? 1.0 : min(_2103, 1.0));
    uint _2127 = _2090 | 1u;
    float _2138 = dot(vec3(cbLight._m0[_2090].xyz), vec3(_864, _865, _866));
    float _2141 = dot(vec3(cbLight._m0[_2127].xyz), vec3(_864, _865, _866));
    float _4369 = isnan(0.0) ? _2138 : (isnan(_2138) ? 0.0 : max(_2138, 0.0));
    float _4380 = isnan(0.0) ? _2141 : (isnan(_2141) ? 0.0 : max(_2141, 0.0));
    float _2146 = (isnan(1.0) ? _4369 : (isnan(_4369) ? 1.0 : min(_4369, 1.0))) * 0.3183098733425140380859375;
    float _2148 = (isnan(1.0) ? _4380 : (isnan(_4380) ? 1.0 : min(_4380, 1.0))) * 0.3183098733425140380859375;
    float _2155 = ((cbLight._m0[_2107].x * _2113) * _2148) + ((cbLight._m0[_2117].x * _2123) * _2146);
    float _2156 = ((_2113 * cbLight._m0[_2107].y) * _2148) + ((_2123 * cbLight._m0[_2117].y) * _2146);
    float _2157 = ((_2113 * cbLight._m0[_2107].z) * _2148) + ((_2123 * cbLight._m0[_2117].z) * _2146);
    uvec4 _2161 = floatBitsToUint(cbLight._m0[_2090 + 12u]);
    bool _2163 = _2161.x == 0u;
    float _2174;
    float _2176;
    float _2178;
    if (_2163)
    {
        _2174 = _2155;
        _2176 = _2156;
        _2178 = _2157;
    }
    else
    {
        uint _2182 = _2090 + 6u;
        float _2198 = (dot(vec3(cbLight._m0[_2090 + 2u].xyz), vec3(_864, _865, _866)) * 0.5) + 0.5;
        float _2199 = _2198 * _2198;
        float _4391 = isnan(0.0) ? _2199 : (isnan(_2199) ? 0.0 : max(_2199, 0.0));
        float _2200 = isnan(1.0) ? _4391 : (isnan(_4391) ? 1.0 : min(_4391, 1.0));
        float _2201 = isnan(1.0) ? _2105 : (isnan(_2105) ? 1.0 : min(_2105, 1.0));
        _2174 = (((cbLight._m0[_2182].x * 0.3183098733425140380859375) * _2200) * _2201) + _2155;
        _2176 = (((cbLight._m0[_2182].y * 0.3183098733425140380859375) * _2200) * _2201) + _2156;
        _2178 = (((cbLight._m0[_2182].z * 0.3183098733425140380859375) * _2200) * _2201) + _2157;
    }
    bool _2181 = _2161.y == 0u;
    float _2219;
    float _2221;
    float _2223;
    if (_2181)
    {
        _2219 = _2174;
        _2221 = _2176;
        _2223 = _2178;
    }
    else
    {
        uint _2378 = _2090 + 7u;
        float _2394 = (dot(vec3(cbLight._m0[_2090 + 3u].xyz), vec3(_864, _865, _866)) * 0.5) + 0.5;
        float _2395 = _2394 * _2394;
        float _4407 = isnan(0.0) ? _2395 : (isnan(_2395) ? 0.0 : max(_2395, 0.0));
        float _2396 = isnan(1.0) ? _4407 : (isnan(_4407) ? 1.0 : min(_4407, 1.0));
        float _2397 = isnan(1.0) ? _2106 : (isnan(_2106) ? 1.0 : min(_2106, 1.0));
        _2219 = (((cbLight._m0[_2378].x * 0.3183098733425140380859375) * _2396) * _2397) + _2174;
        _2221 = (((cbLight._m0[_2378].y * 0.3183098733425140380859375) * _2396) * _2397) + _2176;
        _2223 = (((cbLight._m0[_2378].z * 0.3183098733425140380859375) * _2396) * _2397) + _2178;
    }
    uint _2226 = _2090 + 8u;
    float _2239 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2090].w)) * _867) * 0.949999988079071044921875);
    float _2240 = _2239 * _2239;
    float _2241 = cbLight._m0[_2090].x + _943;
    float _2242 = cbLight._m0[_2090].y + _944;
    float _2243 = cbLight._m0[_2090].z + _945;
    float _2247 = inversesqrt(dot(vec3(_2241, _2242, _2243), vec3(_2241, _2242, _2243)));
    float _2248 = _2247 * _2241;
    float _2249 = _2247 * _2242;
    float _2250 = _2247 * _2243;
    float _2251 = dot(vec3(_864, _865, _866), vec3(cbLight._m0[_2090].xyz));
    float _4423 = isnan(0.0) ? _2251 : (isnan(_2251) ? 0.0 : max(_2251, 0.0));
    float _2254 = isnan(1.0) ? _4423 : (isnan(_4423) ? 1.0 : min(_4423, 1.0));
    float _4434 = isnan(0.0) ? _1027 : (isnan(_1027) ? 0.0 : max(_1027, 0.0));
    float _2255 = isnan(1.0) ? _4434 : (isnan(_4434) ? 1.0 : min(_4434, 1.0));
    float _2256 = dot(vec3(_864, _865, _866), vec3(_2248, _2249, _2250));
    float _4445 = isnan(0.0) ? _2256 : (isnan(_2256) ? 0.0 : max(_2256, 0.0));
    float _2259 = isnan(1.0) ? _4445 : (isnan(_4445) ? 1.0 : min(_4445, 1.0));
    float _2260 = dot(vec3(cbLight._m0[_2090].xyz), vec3(_2248, _2249, _2250));
    float _4456 = isnan(0.0) ? _2260 : (isnan(_2260) ? 0.0 : max(_2260, 0.0));
    float _2264 = _2240 * _2240;
    float _2268 = ((_2259 * _2259) * (_2264 + (-1.0))) + 1.0;
    float _2279 = (exp2(log2(1.0 - (isnan(1.0) ? _4456 : (isnan(_4456) ? 1.0 : min(_4456, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2280 = 1.0 - _2240;
    float _2291 = (0.5 / (((_2255 * ((_2254 * _2280) + _2240)) + 9.9999999392252902907785028219223e-09) + (((_2255 * _2280) + _2240) * _2254))) * _2254;
    float _4467 = isnan(0.0) ? _2291 : (isnan(_2291) ? 0.0 : max(_2291, 0.0));
    float _2293 = (isnan(1.0) ? _4467 : (isnan(_4467) ? 1.0 : min(_4467, 1.0))) * (_2264 / ((_2268 * _2268) * 3.141590118408203125));
    uint _2304 = _2090 + 9u;
    float _2315 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2127].w)) * _867) * 0.949999988079071044921875);
    float _2316 = _2315 * _2315;
    float _2317 = cbLight._m0[_2127].x + _943;
    float _2318 = cbLight._m0[_2127].y + _944;
    float _2319 = cbLight._m0[_2127].z + _945;
    float _2323 = inversesqrt(dot(vec3(_2317, _2318, _2319), vec3(_2317, _2318, _2319)));
    float _2324 = _2323 * _2317;
    float _2325 = _2323 * _2318;
    float _2326 = _2323 * _2319;
    float _2327 = dot(vec3(_864, _865, _866), vec3(cbLight._m0[_2127].xyz));
    float _4478 = isnan(0.0) ? _2327 : (isnan(_2327) ? 0.0 : max(_2327, 0.0));
    float _2330 = isnan(1.0) ? _4478 : (isnan(_4478) ? 1.0 : min(_4478, 1.0));
    float _2331 = dot(vec3(_864, _865, _866), vec3(_2324, _2325, _2326));
    float _4489 = isnan(0.0) ? _2331 : (isnan(_2331) ? 0.0 : max(_2331, 0.0));
    float _2334 = isnan(1.0) ? _4489 : (isnan(_4489) ? 1.0 : min(_4489, 1.0));
    float _2335 = dot(vec3(cbLight._m0[_2127].xyz), vec3(_2324, _2325, _2326));
    float _4500 = isnan(0.0) ? _2335 : (isnan(_2335) ? 0.0 : max(_2335, 0.0));
    float _2339 = _2316 * _2316;
    float _2343 = ((_2334 * _2334) * (_2339 + (-1.0))) + 1.0;
    float _2352 = (exp2(log2(1.0 - (isnan(1.0) ? _4500 : (isnan(_4500) ? 1.0 : min(_4500, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2353 = 1.0 - _2316;
    float _2363 = (0.5 / (((_2255 * ((_2330 * _2353) + _2316)) + 9.9999999392252902907785028219223e-09) + (((_2255 * _2353) + _2316) * _2330))) * _2330;
    float _4511 = isnan(0.0) ? _2363 : (isnan(_2363) ? 0.0 : max(_2363, 0.0));
    float _2365 = (isnan(1.0) ? _4511 : (isnan(_4511) ? 1.0 : min(_4511, 1.0))) * (_2339 / ((_2343 * _2343) * 3.141590118408203125));
    float _2375 = (((_2352 * cbLight._m0[_2304].x) * _2365) * _2113) + (((_2279 * cbLight._m0[_2226].x) * _2293) * _2123);
    float _2376 = (((_2352 * cbLight._m0[_2304].y) * _2365) * _2113) + (((_2279 * cbLight._m0[_2226].y) * _2293) * _2123);
    float _2377 = (((_2352 * cbLight._m0[_2304].z) * _2365) * _2113) + (((_2279 * cbLight._m0[_2226].z) * _2293) * _2123);
    float _2439;
    float _2441;
    float _2443;
    if (_2163)
    {
        _2439 = _2375;
        _2441 = _2376;
        _2443 = _2377;
    }
    else
    {
        uint _2445 = _2090 + 2u;
        uint _2449 = _2090 + 10u;
        float _2463 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2445].w)) * _867) * 0.949999988079071044921875);
        float _2464 = _2463 * _2463;
        float _2465 = cbLight._m0[_2445].x + _943;
        float _2466 = cbLight._m0[_2445].y + _944;
        float _2467 = cbLight._m0[_2445].z + _945;
        float _2471 = inversesqrt(dot(vec3(_2465, _2466, _2467), vec3(_2465, _2466, _2467)));
        float _2472 = _2471 * _2465;
        float _2473 = _2471 * _2466;
        float _2474 = _2471 * _2467;
        float _2475 = dot(vec3(_864, _865, _866), vec3(cbLight._m0[_2445].xyz));
        float _4522 = isnan(0.0) ? _2475 : (isnan(_2475) ? 0.0 : max(_2475, 0.0));
        float _2478 = isnan(1.0) ? _4522 : (isnan(_4522) ? 1.0 : min(_4522, 1.0));
        float _2479 = dot(vec3(_864, _865, _866), vec3(_2472, _2473, _2474));
        float _4533 = isnan(0.0) ? _2479 : (isnan(_2479) ? 0.0 : max(_2479, 0.0));
        float _2482 = isnan(1.0) ? _4533 : (isnan(_4533) ? 1.0 : min(_4533, 1.0));
        float _2483 = dot(vec3(cbLight._m0[_2445].xyz), vec3(_2472, _2473, _2474));
        float _4544 = isnan(0.0) ? _2483 : (isnan(_2483) ? 0.0 : max(_2483, 0.0));
        float _2487 = _2464 * _2464;
        float _2491 = ((_2482 * _2482) * (_2487 + (-1.0))) + 1.0;
        float _2500 = (exp2(log2(1.0 - (isnan(1.0) ? _4544 : (isnan(_4544) ? 1.0 : min(_4544, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2501 = 1.0 - _2464;
        float _2511 = (0.5 / (((_2255 * ((_2478 * _2501) + _2464)) + 9.9999999392252902907785028219223e-09) + (((_2255 * _2501) + _2464) * _2478))) * _2478;
        float _4555 = isnan(0.0) ? _2511 : (isnan(_2511) ? 0.0 : max(_2511, 0.0));
        float _2513 = (isnan(1.0) ? _4555 : (isnan(_4555) ? 1.0 : min(_4555, 1.0))) * (_2487 / ((_2491 * _2491) * 3.141590118408203125));
        float _2514 = isnan(1.0) ? _2105 : (isnan(_2105) ? 1.0 : min(_2105, 1.0));
        _2439 = (((_2500 * cbLight._m0[_2449].x) * _2513) * _2514) + _2375;
        _2441 = (((_2500 * cbLight._m0[_2449].y) * _2513) * _2514) + _2376;
        _2443 = (((_2500 * cbLight._m0[_2449].z) * _2513) * _2514) + _2377;
    }
    float _2549;
    float _2551;
    float _2553;
    if (_2181)
    {
        _2549 = _2439;
        _2551 = _2441;
        _2553 = _2443;
    }
    else
    {
        uint _2560 = _2090 + 3u;
        uint _2564 = _2090 + 11u;
        float _2578 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2560].w)) * _867) * 0.949999988079071044921875);
        float _2579 = _2578 * _2578;
        float _2580 = cbLight._m0[_2560].x + _943;
        float _2581 = cbLight._m0[_2560].y + _944;
        float _2582 = cbLight._m0[_2560].z + _945;
        float _2586 = inversesqrt(dot(vec3(_2580, _2581, _2582), vec3(_2580, _2581, _2582)));
        float _2587 = _2586 * _2580;
        float _2588 = _2586 * _2581;
        float _2589 = _2586 * _2582;
        float _2590 = dot(vec3(_864, _865, _866), vec3(cbLight._m0[_2560].xyz));
        float _4571 = isnan(0.0) ? _2590 : (isnan(_2590) ? 0.0 : max(_2590, 0.0));
        float _2593 = isnan(1.0) ? _4571 : (isnan(_4571) ? 1.0 : min(_4571, 1.0));
        float _2594 = dot(vec3(_864, _865, _866), vec3(_2587, _2588, _2589));
        float _4582 = isnan(0.0) ? _2594 : (isnan(_2594) ? 0.0 : max(_2594, 0.0));
        float _2597 = isnan(1.0) ? _4582 : (isnan(_4582) ? 1.0 : min(_4582, 1.0));
        float _2598 = dot(vec3(cbLight._m0[_2560].xyz), vec3(_2587, _2588, _2589));
        float _4593 = isnan(0.0) ? _2598 : (isnan(_2598) ? 0.0 : max(_2598, 0.0));
        float _2602 = _2579 * _2579;
        float _2606 = ((_2597 * _2597) * (_2602 + (-1.0))) + 1.0;
        float _2615 = (exp2(log2(1.0 - (isnan(1.0) ? _4593 : (isnan(_4593) ? 1.0 : min(_4593, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2616 = 1.0 - _2579;
        float _2626 = (0.5 / (((_2255 * ((_2593 * _2616) + _2579)) + 9.9999999392252902907785028219223e-09) + (((_2255 * _2616) + _2579) * _2593))) * _2593;
        float _4604 = isnan(0.0) ? _2626 : (isnan(_2626) ? 0.0 : max(_2626, 0.0));
        float _2628 = (isnan(1.0) ? _4604 : (isnan(_4604) ? 1.0 : min(_4604, 1.0))) * (_2602 / ((_2606 * _2606) * 3.141590118408203125));
        float _2629 = isnan(1.0) ? _2106 : (isnan(_2106) ? 1.0 : min(_2106, 1.0));
        _2549 = (((_2615 * cbLight._m0[_2564].x) * _2628) * _2629) + _2439;
        _2551 = (((_2615 * cbLight._m0[_2564].y) * _2628) * _2629) + _2441;
        _2553 = (((_2615 * cbLight._m0[_2564].z) * _2628) * _2629) + _2443;
    }
    float _2764;
    float _2766;
    float _2768;
    float _2770;
    float _2772;
    float _2774;
    if (_2088.y == 0u)
    {
        float _2704 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2705 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2704;
        float _2706 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2704;
        float _2707 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2704;
        uvec4 _2719 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2720 = _2719.x;
        uint _2731 = uint((float(_2719.y) * floor(float(uint(cbSceneParam._m0[85u].y * _964) / _2720))) + floor(float(uint(cbSceneParam._m0[85u].x * _963) / _2720)));
        float _2741 = (log2(_2707 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2742 = isnan(0.0) ? _2741 : (isnan(_2741) ? 0.0 : max(_2741, 0.0));
        uint _2745 = uint(isnan(14.0) ? _2742 : (isnan(_2742) ? 14.0 : min(_2742, 14.0)));
        uvec4 _2750 = texelFetch(g_lightClusterGridBuffer, int(((_2745 << 2u) + (_2731 << 6u)) >> 2u));
        uint _2751 = _2750.x;
        uint _2752 = _2719.z;
        float _2852;
        float _2854;
        float _2856;
        float _2858;
        float _2860;
        float _2862;
        if (((((1u << ((_2752 >> 4u) & 15u)) + 4294967295u) & _2751) == 0u) || ((_2752 & 240u) == 0u))
        {
            _2852 = 0.0;
            _2854 = 0.0;
            _2856 = 0.0;
            _2858 = 0.0;
            _2860 = 0.0;
            _2862 = 0.0;
        }
        else
        {
            float _2853;
            float _2855;
            float _2857;
            float _2859;
            float _2861;
            float _2863;
            float _3004 = 0.0;
            float _3005 = 0.0;
            float _3006 = 0.0;
            float _3007 = 0.0;
            float _3008 = 0.0;
            float _3009 = 0.0;
            uint _3010 = 0u;
            uint _3019;
            bool _3020;
            for (;;)
            {
                _3019 = texelFetch(g_lightClassification, int((((_2745 << 5u) + (_2731 << 9u)) + (_3010 << 2u)) >> 2u)).x;
                _3020 = _3019 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3020)
                {
                    frontier_phi_66_pred = _3004;
                    frontier_phi_66_pred_1 = _3009;
                    frontier_phi_66_pred_2 = _3008;
                    frontier_phi_66_pred_3 = _3007;
                    frontier_phi_66_pred_4 = _3006;
                    frontier_phi_66_pred_5 = _3005;
                }
                else
                {
                    float _3149;
                    float _3150;
                    float _3151;
                    float _3152;
                    float _3153;
                    float _3154;
                    uint _3155;
                    _3149 = _3004;
                    _3150 = _3005;
                    _3151 = _3006;
                    _3152 = _3007;
                    _3153 = _3008;
                    _3154 = _3009;
                    _3155 = _3019;
                    float _3076;
                    float _3077;
                    float _3078;
                    float _3079;
                    float _3080;
                    float _3081;
                    for (;;)
                    {
                        uint _3159 = uint(findLSB(_3155)) + (_3010 << 5u);
                        uint _3156 = (_3155 + 4294967295u) & _3155;
                        uint _3161 = _3159 * 48u;
                        vec4 _3175 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3161)).x, texelFetch(g_PointLightRenderingBuffer, int(_3161 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3161 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3161 + 3u)).x));
                        uint _3181 = (_3159 * 48u) + 4u;
                        vec4 _3194 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3181)).x, texelFetch(g_PointLightRenderingBuffer, int(_3181 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3181 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3181 + 3u)).x));
                        uint _3200 = (_3159 * 48u) + 8u;
                        vec3 _3211 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3200)).x, texelFetch(g_PointLightRenderingBuffer, int(_3200 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3200 + 2u)).x));
                        float _3215 = _3175.x - _2705;
                        float _3216 = _3175.y - _2706;
                        float _3217 = _3175.z - _2707;
                        float _3218 = dot(vec3(_3215, _3216, _3217), vec3(_3215, _3216, _3217));
                        float _3221 = inversesqrt(_3218);
                        float _3222 = _3221 * _3215;
                        float _3223 = _3221 * _3216;
                        float _3224 = _3221 * _3217;
                        float _3225 = dot(vec3(_982, _985, _988), vec3(_3222, _3223, _3224));
                        float _3230 = 1.0 - (_3218 * _3175.w);
                        float _4630 = isnan(0.0) ? _3230 : (isnan(_3230) ? 0.0 : max(_3230, 0.0));
                        float _3231 = isnan(1.0) ? _4630 : (isnan(_4630) ? 1.0 : min(_4630, 1.0));
                        float _3232 = sqrt(_3218) * _3194.w;
                        float _3235 = 1.39999997615814208984375 / (_3232 + 1.39999997615814208984375);
                        float _3236 = _3235 * _3235;
                        float _3239 = ((1.0 - _3236) * _3225) + _3236;
                        float _3242 = _3232 * _3232;
                        float _3246 = ((isnan(0.0) ? _3239 : (isnan(_3239) ? 0.0 : max(_3239, 0.0))) * _3231) / ((_3242 * 0.699999988079071044921875) + 1.0);
                        float _3250 = (-0.0) - _2705;
                        float _3251 = (-0.0) - _2706;
                        float _3252 = (-0.0) - _2707;
                        float _3256 = inversesqrt(dot(vec3(_3250, _3251, _3252), vec3(_3250, _3251, _3252)));
                        float _3257 = _3256 * _3250;
                        float _3258 = _3256 * _3251;
                        float _3259 = _3256 * _3252;
                        float _3267 = exp2(log2(1.0 / ((_3242 * 3.5) + 5.0)) * 0.25);
                        float _3268 = 1.0 - _1042;
                        float _3275 = sqrt(1.0 - ((1.0 - (_3268 * _3268)) * (1.0 - (_3267 * _3267))));
                        float _3276 = _3275 * _3275;
                        float _3277 = _3276 * _3276;
                        float _3278 = _3257 + _3222;
                        float _3279 = _3258 + _3223;
                        float _3280 = _3259 + _3224;
                        float _3284 = inversesqrt(dot(vec3(_3278, _3279, _3280), vec3(_3278, _3279, _3280)));
                        float _3288 = dot(vec3(_982, _985, _988), vec3(_3257, _3258, _3259));
                        float _4646 = isnan(0.0) ? _3288 : (isnan(_3288) ? 0.0 : max(_3288, 0.0));
                        float _3291 = isnan(1.0) ? _4646 : (isnan(_4646) ? 1.0 : min(_4646, 1.0));
                        float _3292 = dot(vec3(_982, _985, _988), vec3(_3284 * _3278, _3284 * _3279, _3284 * _3280));
                        float _4657 = isnan(0.0) ? _3292 : (isnan(_3292) ? 0.0 : max(_3292, 0.0));
                        float _3295 = isnan(1.0) ? _4657 : (isnan(_4657) ? 1.0 : min(_4657, 1.0));
                        float _3299 = ((_3295 * _3295) * (_3277 + (-1.0))) + 1.0;
                        float _3300 = _3235 * _3276;
                        float _3301 = _3300 * _3300;
                        float _3304 = ((1.0 - _3301) * _3225) + _3301;
                        float _4668 = isnan(0.0) ? _3304 : (isnan(_3304) ? 0.0 : max(_3304, 0.0));
                        float _3305 = isnan(1.0) ? _4668 : (isnan(_4668) ? 1.0 : min(_4668, 1.0));
                        float _3306 = 1.0 - _3276;
                        float _3316 = (0.5 / (((_3305 * ((_3291 * _3306) + _3276)) + 9.9999999392252902907785028219223e-09) + (((_3305 * _3306) + _3276) * _3291))) * _3305;
                        float _4679 = isnan(0.0) ? _3316 : (isnan(_3316) ? 0.0 : max(_3316, 0.0));
                        float _3327 = (((_3277 * 3.1415927410125732421875) * (isnan(1.0) ? _4679 : (isnan(_4679) ? 1.0 : min(_4679, 1.0)))) / ((_3299 * _3299) * ((_3242 * 2.1991131305694580078125) + 3.141590118408203125))) * _3231;
                        _3079 = (_3246 * _3194.x) + _3152;
                        _3080 = (_3246 * _3194.y) + _3153;
                        _3081 = (_3246 * _3194.z) + _3154;
                        _3076 = (_3327 * _3211.x) + _3149;
                        _3077 = (_3327 * _3211.y) + _3150;
                        _3078 = (_3327 * _3211.z) + _3151;
                        if (_3156 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3149 = _3076;
                            _3150 = _3077;
                            _3151 = _3078;
                            _3152 = _3079;
                            _3153 = _3080;
                            _3154 = _3081;
                            _3155 = _3156;
                        }
                    }
                    frontier_phi_66_pred = _3076;
                    frontier_phi_66_pred_1 = _3081;
                    frontier_phi_66_pred_2 = _3080;
                    frontier_phi_66_pred_3 = _3079;
                    frontier_phi_66_pred_4 = _3078;
                    frontier_phi_66_pred_5 = _3077;
                }
                _2853 = frontier_phi_66_pred;
                _2863 = frontier_phi_66_pred_1;
                _2861 = frontier_phi_66_pred_2;
                _2859 = frontier_phi_66_pred_3;
                _2857 = frontier_phi_66_pred_4;
                _2855 = frontier_phi_66_pred_5;
                uint _3011 = _3010 + 1u;
                if (_3011 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3004 = _2853;
                    _3005 = _2855;
                    _3006 = _2857;
                    _3007 = _2859;
                    _3008 = _2861;
                    _3009 = _2863;
                    _3010 = _3011;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2852 = _2853;
            _2854 = _2855;
            _2856 = _2857;
            _2858 = _2859;
            _2860 = _2861;
            _2862 = _2863;
        }
        uvec4 _2866 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2867 = _2866.z;
        uint _2869 = (_2867 >> 8u) & 15u;
        float _2972;
        float _2974;
        float _2976;
        float _2978;
        float _2980;
        float _2982;
        if (((4294967295u << _2869) & _2751) == 0u)
        {
            _2972 = _2852;
            _2974 = _2854;
            _2976 = _2856;
            _2978 = _2858;
            _2980 = _2860;
            _2982 = _2862;
        }
        else
        {
            float _2997 = inversesqrt(dot(vec3(_2705, _2706, _2707), vec3(_2705, _2706, _2707)));
            float _2998 = _2997 * _2705;
            float _2999 = _2997 * _2706;
            float _3000 = _2997 * _2707;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2869 < ((_2867 >> 12u) & 15u))
            {
                float _2973;
                float _2975;
                float _2977;
                float _2979;
                float _2981;
                float _2983;
                float _3132 = _2852;
                float _3133 = _2854;
                float _3134 = _2856;
                float _3135 = _2858;
                float _3136 = _2860;
                float _3137 = _2862;
                uint _3138 = _2869;
                uint _3147;
                bool _3148;
                for (;;)
                {
                    _3147 = texelFetch(g_lightClassification, int((((_2745 << 5u) + (_2731 << 9u)) + (_3138 << 2u)) >> 2u)).x;
                    _3148 = _3147 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_3148)
                    {
                        frontier_phi_77_pred = _3137;
                        frontier_phi_77_pred_1 = _3136;
                        frontier_phi_77_pred_2 = _3135;
                        frontier_phi_77_pred_3 = _3134;
                        frontier_phi_77_pred_4 = _3133;
                        frontier_phi_77_pred_5 = _3132;
                    }
                    else
                    {
                        float _3341;
                        float _3342;
                        float _3343;
                        float _3344;
                        float _3345;
                        float _3346;
                        float _3634;
                        float _3635;
                        float _3636;
                        float _3637;
                        float _3638;
                        float _3639;
                        float _3354 = _3132;
                        float _3355 = _3133;
                        float _3356 = _3134;
                        float _3357 = _3135;
                        float _3358 = _3136;
                        float _3359 = _3137;
                        uint _3360 = _3147;
                        uint _3361;
                        vec4 _3386;
                        float _3387;
                        vec4 _3402;
                        vec3 _3414;
                        vec4 _3429;
                        vec4 _3444;
                        float _3490;
                        bool _3491;
                        for (;;)
                        {
                            uint _3371 = ((_3138 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3360));
                            _3361 = (_3360 + 4294967295u) & _3360;
                            uint _3373 = _3371 * 40u;
                            _3386 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3373)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3373 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3373 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3373 + 3u)).x));
                            _3387 = _3386.w;
                            uint _3389 = (_3371 * 40u) + 4u;
                            _3402 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3389)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3389 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3389 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3389 + 3u)).x));
                            uint _3404 = (_3371 * 40u) + 8u;
                            _3414 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3404)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3404 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3404 + 2u)).x));
                            uint _3416 = (_3371 * 40u) + 16u;
                            _3429 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3416)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3416 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3416 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3416 + 3u)).x));
                            uint _3431 = (_3371 * 40u) + 20u;
                            _3444 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3431)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3431 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3431 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3431 + 3u)).x));
                            uint _3446 = (_3371 * 40u) + 24u;
                            vec4 _3459 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3446)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3446 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3446 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3446 + 3u)).x));
                            uint _3465 = (_3371 * 40u) + 28u;
                            vec4 _3478 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3465)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3465 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3465 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3465 + 3u)).x));
                            _3490 = fma(_2707, _3478.z, fma(_2706, _3478.y, _3478.x * _2705)) + _3478.w;
                            _3491 = !((fma(_2707, _3459.z, fma(_2706, _3459.y, _3459.x * _2705)) + _3459.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3491)
                            {
                                float _3518 = _3386.x - _2705;
                                float _3519 = _3386.y - _2706;
                                float _3520 = _3386.z - _2707;
                                float _3521 = dot(vec3(_3518, _3519, _3520), vec3(_3518, _3519, _3520));
                                float _3524 = inversesqrt(_3521);
                                float _3525 = _3524 * _3518;
                                float _3526 = _3524 * _3519;
                                float _3527 = _3524 * _3520;
                                float _3531 = 1.0 - (_3521 / (_3387 * _3387));
                                float _4690 = isnan(0.0) ? _3531 : (isnan(_3531) ? 0.0 : max(_3531, 0.0));
                                float _3532 = isnan(1.0) ? _4690 : (isnan(_4690) ? 1.0 : min(_4690, 1.0));
                                float _3536 = sqrt(_3521) * _3402.w;
                                float _3538 = 1.39999997615814208984375 / (_3536 + 1.39999997615814208984375);
                                float _3539 = _3538 * _3538;
                                float _3542 = ((1.0 - _3539) * dot(vec3(_3525, _3526, _3527), vec3(_982, _985, _988))) + _3539;
                                float _3545 = _3536 * _3536;
                                float _3549 = (fma(_2707, _3429.z, fma(_2706, _3429.y, _3429.x * _2705)) + _3429.w) / _3490;
                                float _3550 = (fma(_2707, _3444.z, fma(_2706, _3444.y, _3444.x * _2705)) + _3444.w) / _3490;
                                float _3554 = 1.0 - dot(vec2(_3549, _3550), vec2(_3549, _3550));
                                float _4706 = isnan(0.0) ? _3554 : (isnan(_3554) ? 0.0 : max(_3554, 0.0));
                                float _3555 = isnan(1.0) ? _4706 : (isnan(_4706) ? 1.0 : min(_4706, 1.0));
                                float _3556 = _3555 * (((isnan(0.0) ? _3542 : (isnan(_3542) ? 0.0 : max(_3542, 0.0))) * _3532) / ((_3545 * 0.699999988079071044921875) + 1.0));
                                float _3568 = exp2(log2(1.0 / ((_3545 * 3.5) + 5.0)) * 0.25);
                                float _3569 = 1.0 - _1042;
                                float _3576 = sqrt(1.0 - ((1.0 - (_3569 * _3569)) * (1.0 - (_3568 * _3568))));
                                float _3577 = _3576 * _3576;
                                float _3578 = _3577 * _3577;
                                float _3579 = _3525 - _2998;
                                float _3580 = _3526 - _2999;
                                float _3581 = _3527 - _3000;
                                float _3585 = inversesqrt(dot(vec3(_3579, _3580, _3581), vec3(_3579, _3580, _3581)));
                                float _3589 = dot(vec3(_982, _985, _988), vec3((-0.0) - _2998, (-0.0) - _2999, (-0.0) - _3000));
                                float _4717 = isnan(0.0) ? _3589 : (isnan(_3589) ? 0.0 : max(_3589, 0.0));
                                float _3592 = isnan(1.0) ? _4717 : (isnan(_4717) ? 1.0 : min(_4717, 1.0));
                                float _3593 = dot(vec3(_982, _985, _988), vec3(_3585 * _3579, _3585 * _3580, _3585 * _3581));
                                float _4728 = isnan(0.0) ? _3593 : (isnan(_3593) ? 0.0 : max(_3593, 0.0));
                                float _3596 = isnan(1.0) ? _4728 : (isnan(_4728) ? 1.0 : min(_4728, 1.0));
                                float _3600 = ((_3596 * _3596) * (_3578 + (-1.0))) + 1.0;
                                float _3601 = _3538 * _3577;
                                float _3602 = _3601 * _3601;
                                float _3608 = ((1.0 - _3602) * dot(vec3(_982, _985, _988), vec3(_3525, _3526, _3527))) + _3602;
                                float _4739 = isnan(0.0) ? _3608 : (isnan(_3608) ? 0.0 : max(_3608, 0.0));
                                float _3609 = isnan(1.0) ? _4739 : (isnan(_4739) ? 1.0 : min(_4739, 1.0));
                                float _3610 = 1.0 - _3577;
                                float _3620 = (0.5 / (((_3609 * ((_3592 * _3610) + _3577)) + 9.9999999392252902907785028219223e-09) + (((_3609 * _3610) + _3577) * _3592))) * _3609;
                                float _4750 = isnan(0.0) ? _3620 : (isnan(_3620) ? 0.0 : max(_3620, 0.0));
                                float _3630 = (_3555 * _3532) * (((_3578 * 3.1415927410125732421875) * (isnan(1.0) ? _4750 : (isnan(_4750) ? 1.0 : min(_4750, 1.0)))) / ((_3600 * _3600) * ((_3545 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3556 * _3402.y;
                                frontier_phi_83_pred_1 = _3556 * _3402.x;
                                frontier_phi_83_pred_2 = _3630 * _3414.z;
                                frontier_phi_83_pred_3 = _3630 * _3414.y;
                                frontier_phi_83_pred_4 = _3630 * _3414.x;
                                frontier_phi_83_pred_5 = _3556 * _3402.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3638 = frontier_phi_83_pred;
                            _3637 = frontier_phi_83_pred_1;
                            _3636 = frontier_phi_83_pred_2;
                            _3635 = frontier_phi_83_pred_3;
                            _3634 = frontier_phi_83_pred_4;
                            _3639 = frontier_phi_83_pred_5;
                            _3344 = _3637 + _3357;
                            _3345 = _3638 + _3358;
                            _3346 = _3639 + _3359;
                            _3341 = _3634 + _3354;
                            _3342 = _3635 + _3355;
                            _3343 = _3636 + _3356;
                            if (_3361 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3354 = _3341;
                                _3355 = _3342;
                                _3356 = _3343;
                                _3357 = _3344;
                                _3358 = _3345;
                                _3359 = _3346;
                                _3360 = _3361;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3346;
                        frontier_phi_77_pred_1 = _3345;
                        frontier_phi_77_pred_2 = _3344;
                        frontier_phi_77_pred_3 = _3343;
                        frontier_phi_77_pred_4 = _3342;
                        frontier_phi_77_pred_5 = _3341;
                    }
                    _2983 = frontier_phi_77_pred;
                    _2981 = frontier_phi_77_pred_1;
                    _2979 = frontier_phi_77_pred_2;
                    _2977 = frontier_phi_77_pred_3;
                    _2975 = frontier_phi_77_pred_4;
                    _2973 = frontier_phi_77_pred_5;
                    uint _3139 = _3138 + 1u;
                    if (_3139 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3132 = _2973;
                        _3133 = _2975;
                        _3134 = _2977;
                        _3135 = _2979;
                        _3136 = _2981;
                        _3137 = _2983;
                        _3138 = _3139;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2977;
                frontier_phi_58_59_ladder_1 = _2983;
                frontier_phi_58_59_ladder_2 = _2981;
                frontier_phi_58_59_ladder_3 = _2979;
                frontier_phi_58_59_ladder_4 = _2975;
                frontier_phi_58_59_ladder_5 = _2973;
            }
            else
            {
                frontier_phi_58_59_ladder = _2856;
                frontier_phi_58_59_ladder_1 = _2862;
                frontier_phi_58_59_ladder_2 = _2860;
                frontier_phi_58_59_ladder_3 = _2858;
                frontier_phi_58_59_ladder_4 = _2854;
                frontier_phi_58_59_ladder_5 = _2852;
            }
            _2972 = frontier_phi_58_59_ladder_5;
            _2974 = frontier_phi_58_59_ladder_4;
            _2976 = frontier_phi_58_59_ladder;
            _2978 = frontier_phi_58_59_ladder_3;
            _2980 = frontier_phi_58_59_ladder_2;
            _2982 = frontier_phi_58_59_ladder_1;
        }
        float _2987 = isnan(1.0) ? _1026 : (isnan(_1026) ? 1.0 : min(_1026, 1.0));
        _2764 = (_2987 * _2978) + _2219;
        _2766 = (_2987 * _2980) + _2221;
        _2768 = (_2987 * _2982) + _2223;
        _2770 = ((_2972 * 0.039999999105930328369140625) * _2987) + _2549;
        _2772 = ((_2974 * 0.039999999105930328369140625) * _2987) + _2551;
        _2774 = ((_2976 * 0.039999999105930328369140625) * _2987) + _2553;
    }
    else
    {
        _2764 = _2219;
        _2766 = _2221;
        _2768 = _2223;
        _2770 = _2549;
        _2772 = _2551;
        _2774 = _2553;
    }
    float _4766 = isnan(0.0) ? _1011 : (isnan(_1011) ? 0.0 : max(_1011, 0.0));
    float _4777 = isnan(0.0) ? _1012 : (isnan(_1012) ? 0.0 : max(_1012, 0.0));
    float _4788 = isnan(0.0) ? _1013 : (isnan(_1013) ? 0.0 : max(_1013, 0.0));
    float _2791 = ((isnan(1.0) ? _4766 : (isnan(_4766) ? 1.0 : min(_4766, 1.0))) * (_2764 + ((isnan(0.0) ? _1782 : (isnan(_1782) ? 0.0 : max(_1782, 0.0))) * _1026))) + ((_2770 + ((isnan(0.0) ? _2072 : (isnan(_2072) ? 0.0 : max(_2072, 0.0))) * _1861)) * cbPerFrame._m0[3u].x);
    float _2792 = ((isnan(1.0) ? _4777 : (isnan(_4777) ? 1.0 : min(_4777, 1.0))) * (_2766 + ((isnan(0.0) ? _1785 : (isnan(_1785) ? 0.0 : max(_1785, 0.0))) * _1026))) + ((_2772 + ((isnan(0.0) ? _2075 : (isnan(_2075) ? 0.0 : max(_2075, 0.0))) * _1861)) * cbPerFrame._m0[3u].x);
    float _2793 = ((isnan(1.0) ? _4788 : (isnan(_4788) ? 1.0 : min(_4788, 1.0))) * (_2768 + ((isnan(0.0) ? _1788 : (isnan(_1788) ? 0.0 : max(_1788, 0.0))) * _1026))) + ((_2774 + ((isnan(0.0) ? _2078 : (isnan(_2078) ? 0.0 : max(_2078, 0.0))) * _1861)) * cbPerFrame._m0[3u].x);
    uint _2794 = _255 + 6u;
    float _2802 = _963 / cbSceneParam._m0[86u].x;
    float _2803 = _964 / cbSceneParam._m0[86u].y;
    vec4 _2817 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2802, _2803, (log2((isnan(cbSceneParam._m0[77u].w) ? _885 : (isnan(_885) ? cbSceneParam._m0[77u].w : min(_885, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2819 = _2817.x;
    float _2820 = _2817.y;
    float _2821 = _2817.z;
    float _2822 = _2817.w;
    float _2914;
    float _2916;
    float _2918;
    float _2920;
    if (_885 > cbSceneParam._m0[78u].w)
    {
        float _2877 = isnan(_885) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _885 : min(cbSceneParam._m0[80u].w, _885));
        float _2878 = _2877 / _885;
        float _2889 = _2878 * _936;
        float _2890 = _937 * _2878;
        float _2891 = (-0.0) - _2890;
        float _2892 = _2878 * _938;
        float _2894 = (cbSceneParam._m0[77u].w * _2891) / _2877;
        float _2895 = _2894 + cbSceneParam._m0[79u].w;
        float _2896 = cbSceneParam._m0[79u].w - _2890;
        float _2902 = sqrt(((_2889 * _2889) + (_2890 * _2890)) + (_2892 * _2892));
        float _2905 = (1.0 - (cbSceneParam._m0[77u].w / _2877)) * _2902;
        float _2910 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2912 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3089;
        if (abs((_2891 - _2894) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3089 = ((((_2895 > 0.0) ? exp2(_2910 * _2895) : (2.0 - exp2(_2912 * _2895))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2905;
        }
        else
        {
            float _3033 = 1.0 / cbSceneParam._m0[80u].x;
            float _3034 = isnan(_2896) ? _2895 : (isnan(_2895) ? _2896 : max(_2895, _2896));
            float _3035 = isnan(_2896) ? _2895 : (isnan(_2895) ? _2896 : min(_2895, _2896));
            float _3044 = isnan(0.0) ? _3034 : (isnan(_3034) ? 0.0 : min(_3034, 0.0));
            float _3045 = isnan(0.0) ? _3035 : (isnan(_3035) ? 0.0 : min(_3035, 0.0));
            _3089 = ((abs(_2902 / _2891) * cbSceneParam._m0[80u].y) * ((((_3044 - _3045) * 2.0) - ((exp2(_2910 * (isnan(0.0) ? _3034 : (isnan(_3034) ? 0.0 : max(_3034, 0.0)))) - exp2(_2910 * (isnan(0.0) ? _3035 : (isnan(_3035) ? 0.0 : max(_3035, 0.0))))) * _3033)) - ((exp2(_2912 * _3044) - exp2(_2912 * _3045)) * _3033))) + (_2905 * cbSceneParam._m0[80u].z);
        }
        vec4 _3091 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2802, _2803, 1.0), 0.0);
        float _3100 = exp2((_3089 * (-1.44269502162933349609375)) * (1.0 - _3091.w));
        float _3101 = log2(_3100);
        float _3117 = log2(_2822);
        _2914 = (exp2(_3117 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3101 * cbSceneParam._m0[78u].x)) * _3091.x) / cbSceneParam._m0[78u].x)) + _2819;
        _2916 = (exp2(_3117 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3101 * cbSceneParam._m0[78u].y)) * _3091.y) / cbSceneParam._m0[78u].y)) + _2820;
        _2918 = (exp2(_3117 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3101 * cbSceneParam._m0[78u].z)) * _3091.z) / cbSceneParam._m0[78u].z)) + _2821;
        _2920 = _3100 * _2822;
    }
    else
    {
        _2914 = _2819;
        _2916 = _2820;
        _2918 = _2821;
        _2920 = _2822;
    }
    bool _3127;
    vec4 _2930;
    vec4 _2952;
    float _2954;
    float _2958;
    float _2959;
    float _2960;
    float _2961;
    bool _2971;
    for (;;)
    {
        _2930 = cbMatDynParam._m0[0u];
        float _2932 = roundEven(_2930.y);
        bool _2933 = _2932 == 3.0;
        float _2934 = log2(_2920);
        float _2941 = exp2(_2934 * cbSceneParam._m0[78u].x) * _2791;
        float _2942 = exp2(_2934 * cbSceneParam._m0[78u].y) * _2792;
        float _2943 = exp2(_2934 * cbSceneParam._m0[78u].z) * _2793;
        float _2950 = _952 + (-0.5);
        _2952 = cbMtdParam._m0[1u];
        _2954 = _2952.y * _2950;
        float _2957 = (_2932 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2958 = _2957 * (_2933 ? _2941 : (_2941 + (cbSceneParam._m0[72u].w * _2914)));
        _2959 = _2957 * (_2933 ? _2942 : (_2942 + (cbSceneParam._m0[72u].w * _2916)));
        _2960 = _2957 * (_2933 ? _2943 : (_2943 + (cbSceneParam._m0[72u].w * _2918)));
        _2961 = _2950 * 0.999000012874603271484375;
        _2971 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2971)
        {
            if ((cbInstanceData._m0[_255 + 7u].x + _2961) < 0.5)
            {
                _3127 = true;
                break;
            }
        }
        uint _3068 = _1001 + uint(_2930.w);
        if ((cbInstanceData._m0[_3068].w < 1.0) && ((cbInstanceData._m0[_3068].w + _2961) < 0.5))
        {
            _3127 = true;
            break;
        }
        if ((_2954 + 1.0) < _2952.x)
        {
            _3127 = true;
            break;
        }
        _3127 = false;
        break;
    }
    float _3332;
    if (_3127)
    {
        discard_state = true;
        _3332 = 0.0;
    }
    else
    {
        _3332 = cbInstanceData._m0[_2794].w;
    }
    SV_Target.x = _2958;
    SV_Target.y = _2959;
    SV_Target.z = _2960;
    SV_Target.w = _3332;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2794].w;
    discard_exit();
}


