#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_0;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 13) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_22;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_29;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_10;
layout(set = 0, binding = 20) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_6;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1460;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _236 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _237 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _238 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _244 = inversesqrt(dot(vec3(_236, _237, _238), vec3(_236, _237, _238)));
    float _251 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _258 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _270 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _272 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _273 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3765 = isnan(0.0) ? _270 : (isnan(_270) ? 0.0 : max(_270, 0.0));
    float _3776 = isnan(0.0) ? _272 : (isnan(_272) ? 0.0 : max(_272, 0.0));
    float _3787 = isnan(0.0) ? _273 : (isnan(_273) ? 0.0 : max(_273, 0.0));
    uint _283 = uint(roundEven(NORMAL.w)) * 13u;
    uint _288 = _283 + 1u;
    uint _292 = _283 + 2u;
    float _301 = sqrt(((cbInstanceData._m0[_288].x * cbInstanceData._m0[_288].x) + (cbInstanceData._m0[_283].x * cbInstanceData._m0[_283].x)) + (cbInstanceData._m0[_292].x * cbInstanceData._m0[_292].x));
    float _302 = _301 * TEXCOORD.z;
    float _303 = _301 * TEXCOORD.w;
    vec4 _316 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _302) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _303) + cbTextureTilingScale._m0[13u].w));
    vec4 _339 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _365 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _370 = _365.x * cbMtdParam._m0[11u].x;
    float _371 = _365.y * cbMtdParam._m0[11u].y;
    float _372 = _365.z * cbMtdParam._m0[11u].z;
    vec4 _391 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _302) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _303) + cbTextureTilingScale._m0[5u].w));
    vec4 _410 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _445 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _447 = _445.x;
    float _459 = dot(vec4(_447, _445.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _476 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _410.x) * 2.0) - ((((_447 - _459) * cbMtdParam._m0[24u].z) + _459) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3798 = isnan(0.0) ? _476 : (isnan(_476) ? 0.0 : max(_476, 0.0));
    float _477 = isnan(1.0) ? _3798 : (isnan(_3798) ? 1.0 : min(_3798, 1.0));
    float _484 = (_477 * ((_391.x * cbMtdParam._m0[12u].x) - _370)) + _370;
    float _485 = (_477 * ((_391.y * cbMtdParam._m0[12u].y) - _371)) + _371;
    float _486 = (_477 * ((_391.z * cbMtdParam._m0[12u].z) - _372)) + _372;
    vec4 _503 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _302) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _303) + cbTextureTilingScale._m0[3u].w));
    vec4 _523 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _525 = _523.x;
    float _535 = dot(vec4(_525, _523.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _549 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _410.y) * 2.0) - ((((_525 - _535) * cbMtdParam._m0[24u].z) + _535) * cbMtdParam._m0[20u].w))) + 1.0;
    float _3809 = isnan(0.0) ? _549 : (isnan(_549) ? 0.0 : max(_549, 0.0));
    float _550 = isnan(1.0) ? _3809 : (isnan(_3809) ? 1.0 : min(_3809, 1.0));
    float _560 = (_339.x * cbMtdParam._m0[9u].x) * ((_550 * ((_503.x * cbMtdParam._m0[13u].x) - _484)) + _484);
    float _561 = (_339.y * cbMtdParam._m0[9u].y) * ((_550 * ((_503.y * cbMtdParam._m0[13u].y) - _485)) + _485);
    float _562 = (_339.z * cbMtdParam._m0[9u].z) * ((_550 * ((_503.z * cbMtdParam._m0[13u].z) - _486)) + _486);
    float _566 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _316.x) * _560;
    float _569 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _316.y) * _561;
    float _572 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _316.z) * _562;
    float _580 = (((_560 - _566) * (isnan(1.0) ? _3765 : (isnan(_3765) ? 1.0 : min(_3765, 1.0)))) + _566) * 4.55000019073486328125;
    float _582 = (((_561 - _569) * (isnan(1.0) ? _3776 : (isnan(_3776) ? 1.0 : min(_3776, 1.0)))) + _569) * 4.55000019073486328125;
    float _584 = (((_562 - _572) * (isnan(1.0) ? _3787 : (isnan(_3787) ? 1.0 : min(_3787, 1.0)))) + _572) * 4.55000019073486328125;
    vec4 _601 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _302) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _303) + cbTextureTilingScale._m0[20u].w));
    vec4 _624 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _302) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _303) + cbTextureTilingScale._m0[4u].w));
    vec4 _641 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _643 = _641.x;
    float _644 = _641.y;
    float _645 = _641.z;
    float _652 = ((_624.x - _643) * _477) + _643;
    float _653 = ((_624.y - _644) * _477) + _644;
    float _654 = ((_624.z - _645) * _477) + _645;
    vec4 _666 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _302) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _303) + cbTextureTilingScale._m0[2u].w));
    float _679 = ((_666.z - _654) * _550) + _654;
    float _682 = ((((_666.x - _652) * _550) + _652) * 2.0) + (-1.0);
    float _683 = ((((_666.y - _653) * _550) + _653) * 2.0) + (-1.0);
    float _684 = dot(vec2(_682, _683), vec2(_682, _683));
    float _3820 = isnan(0.0) ? _684 : (isnan(_684) ? 0.0 : max(_684, 0.0));
    float _689 = sqrt(1.0 - (isnan(1.0) ? _3820 : (isnan(_3820) ? 1.0 : min(_3820, 1.0))));
    vec4 _703 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _728 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _302) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _303) + cbTextureTilingScale._m0[11u].w));
    float _730 = _728.x;
    float _731 = 1.0 - _730;
    float _737 = isnan(-1.0) ? cbMtdParam._m0[24u].x : (isnan(cbMtdParam._m0[24u].x) ? (-1.0) : max(cbMtdParam._m0[24u].x, -1.0));
    float _740 = ((isnan(0.0) ? _737 : (isnan(_737) ? 0.0 : min(_737, 0.0))) * TEXCOORD_8.x) + TEXCOORD_8.w;
    float _749 = (_740 - ((((((_730 - _731) * cbMtdParam._m0[24u].w) + _731) + 0.00999999977648258209228515625) * cbMtdParam._m0[21u].z) * (1.0 - _740))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3841 = isnan(0.0) ? _749 : (isnan(_749) ? 0.0 : max(_749, 0.0));
    float _750 = isnan(1.0) ? _3841 : (isnan(_3841) ? 1.0 : min(_3841, 1.0));
    float _757 = (_750 * (cbMtdParam._m0[17u].x - _580)) + _580;
    float _758 = (_750 * (cbMtdParam._m0[17u].y - _582)) + _582;
    float _759 = (_750 * (cbMtdParam._m0[17u].z - _584)) + _584;
    vec4 _771 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _302) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _303) + cbTextureTilingScale._m0[19u].w));
    float _773 = _771.x;
    float _774 = 1.0 - _773;
    float _799 = (TEXCOORD_8.x - ((cbMtdParam._m0[22u].w * (1.0 - TEXCOORD_8.x)) * ((((_773 - _774) * cbMtdParam._m0[24u].y) + _774) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3852 = isnan(0.0) ? _799 : (isnan(_799) ? 0.0 : max(_799, 0.0));
    float _800 = isnan(1.0) ? _3852 : (isnan(_3852) ? 1.0 : min(_3852, 1.0));
    float _808 = ((((cbMtdParam._m0[10u].x - _757) * TEXCOORD_8.x) * cbMtdParam._m0[23u].w) * _800) + _757;
    float _809 = ((((cbMtdParam._m0[10u].y - _758) * TEXCOORD_8.y) * cbMtdParam._m0[23u].w) * _800) + _758;
    float _810 = (((cbMtdParam._m0[23u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _759)) * _800) + _759;
    float _815 = (((_601.z - _679) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _679;
    float _819 = ((_703.z - _815) * cbMtdParam._m0[19u].w) + _815;
    vec4 _833 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _302) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _303) + cbTextureTilingScale._m0[15u].w));
    float _840 = (_833.x * 2.0) + (-1.0);
    float _841 = (_833.y * 2.0) + (-1.0);
    float _842 = dot(vec2(_840, _841), vec2(_840, _841));
    float _3863 = isnan(0.0) ? _842 : (isnan(_842) ? 0.0 : max(_842, 0.0));
    float _850 = (_750 * (_833.z - _819)) + _819;
    float _853 = ((cbMtdParam._m0[23u].y - _850) * _800) + _850;
    vec4 _874 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _302) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _303) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _880 = (_874.x * 2.0) + (-1.0);
    float _881 = (_874.y * 2.0) + (-1.0);
    float _882 = dot(vec2(_880, _881), vec2(_880, _881));
    float _3874 = isnan(0.0) ? _882 : (isnan(_882) ? 0.0 : max(_882, 0.0));
    float _896 = (_682 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_601.x * 2.0) + (-1.0)))) + (((_703.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _897 = (_683 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_601.y * 2.0) + (-1.0)))) + (((_703.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _909 = (((_840 - _896) + (cbMtdParam._m0[21u].x * _896)) * _750) + _896;
    float _910 = (((_841 - _897) + (cbMtdParam._m0[21u].x * _897)) * _750) + _897;
    float _911 = (_750 * (sqrt(1.0 - (isnan(1.0) ? _3863 : (isnan(_3863) ? 1.0 : min(_3863, 1.0)))) - _689)) + _689;
    float _922 = (((_880 - _909) + (_909 * cbMtdParam._m0[22u].z)) * _800) + _909;
    float _923 = (((_881 - _910) + (_910 * cbMtdParam._m0[22u].z)) * _800) + _910;
    float _924 = ((sqrt(1.0 - (isnan(1.0) ? _3874 : (isnan(_3874) ? 1.0 : min(_3874, 1.0)))) - _911) * _800) + _911;
    float _926 = cbMtdParam._m0[22u].x + _703.w;
    float _929 = fma(_924, _251 * NORMAL.x, fma(_923, _258 * TANGENT.x, (_244 * _236) * _922));
    float _932 = fma(_924, _251 * NORMAL.y, fma(_923, _258 * TANGENT.y, (_244 * _237) * _922));
    float _935 = fma(_924, _251 * NORMAL.z, fma(_923, _258 * TANGENT.z, (_244 * _238) * _922));
    float _939 = inversesqrt(dot(vec3(_929, _932, _935), vec3(_929, _932, _935)));
    float _940 = _939 * _929;
    float _941 = _939 * _932;
    float _942 = _939 * _935;
    float _3885 = isnan(0.0) ? _853 : (isnan(_853) ? 0.0 : max(_853, 0.0));
    float _943 = isnan(1.0) ? _3885 : (isnan(_3885) ? 1.0 : min(_3885, 1.0));
    float _3896 = isnan(0.0) ? _926 : (isnan(_926) ? 0.0 : max(_926, 0.0));
    float _3907 = isnan(0.0) ? _808 : (isnan(_808) ? 0.0 : max(_808, 0.0));
    float _3918 = isnan(0.0) ? _809 : (isnan(_809) ? 0.0 : max(_809, 0.0));
    float _3929 = isnan(0.0) ? _810 : (isnan(_810) ? 0.0 : max(_810, 0.0));
    float _961 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _1001 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _1011 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _1001);
    float _1012 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _1001);
    float _1013 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _1001);
    float _1017 = inversesqrt(dot(vec3(_1011, _1012, _1013), vec3(_1011, _1012, _1013)));
    float _1018 = _1011 * _1017;
    float _1019 = _1012 * _1017;
    float _1020 = _1013 * _1017;
    float _1026 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1027 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1045 = fma(_942, cbSceneParam._m0[5u].z, fma(_941, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _940));
    float _1048 = fma(_942, cbSceneParam._m0[6u].z, fma(_941, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _940));
    float _1051 = fma(_942, cbSceneParam._m0[7u].z, fma(_941, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _940));
    uint _1065 = (_283 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _1071 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3907 : (isnan(_3907) ? 1.0 : min(_3907, 1.0)))) * cbInstanceData._m0[_1065].x;
    float _1072 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3918 : (isnan(_3918) ? 1.0 : min(_3918, 1.0)))) * cbInstanceData._m0[_1065].y;
    float _1073 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3929 : (isnan(_3929) ? 1.0 : min(_3929, 1.0)))) * cbInstanceData._m0[_1065].z;
    float _3940 = isnan(0.0) ? _1071 : (isnan(_1071) ? 0.0 : max(_1071, 0.0));
    float _1074 = isnan(1.0) ? _3940 : (isnan(_3940) ? 1.0 : min(_3940, 1.0));
    float _3951 = isnan(0.0) ? _1072 : (isnan(_1072) ? 0.0 : max(_1072, 0.0));
    float _1075 = isnan(1.0) ? _3951 : (isnan(_3951) ? 1.0 : min(_3951, 1.0));
    float _3962 = isnan(0.0) ? _1073 : (isnan(_1073) ? 0.0 : max(_1073, 0.0));
    float _1076 = isnan(1.0) ? _3962 : (isnan(_3962) ? 1.0 : min(_3962, 1.0));
    vec4 _1085 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1026, cbSceneParam._m0[86u].y * _1027));
    float _1089 = ((isnan(1.0) ? _3896 : (isnan(_3896) ? 1.0 : min(_3896, 1.0))) * TEXCOORD_5.w) * _1085.x;
    float _1090 = dot(vec3(_940, _941, _942), vec3(_1018, _1019, _1020));
    float _1093 = _1090 * 2.0;
    float _1097 = (_1093 * _940) - _1018;
    float _1098 = (_1093 * _941) - _1019;
    float _1099 = (_1093 * _942) - _1020;
    float _1103 = abs(dot(vec3(_1018, _1019, _1020), vec3(_940, _941, _942)));
    float _3973 = isnan(0.0) ? _1103 : (isnan(_1103) ? 0.0 : max(_1103, 0.0));
    float _1105 = sqrt(_943);
    float _1118 = exp2((_1105 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3973 : (isnan(_3973) ? 1.0 : min(_3973, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1105 * 3.0));
    float _1150 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1154 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1158 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1459;
    float _1461;
    float _1462;
    float _1463;
    float _1464;
    float _1465;
    float _1466;
    float _1467;
    float _1468;
    float _1469;
    float _1470;
    float _1471;
    float _1472;
    float _1473;
    float _1474;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1184 = fma(_1158, cbModelParam._m0[26u].z, fma(_1154, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1150));
        float _1188 = fma(_1158, cbModelParam._m0[27u].z, fma(_1154, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1150));
        float _1192 = fma(_1158, cbModelParam._m0[28u].z, fma(_1154, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1150));
        float _1217 = _1150 + _940;
        float _1218 = _1154 + _941;
        float _1219 = _1158 + _942;
        float _1229 = fma(_1219, cbModelParam._m0[26u].z, fma(_1218, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1217)) - _1184;
        float _1230 = fma(_1219, cbModelParam._m0[27u].z, fma(_1218, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1217)) - _1188;
        float _1231 = fma(_1219, cbModelParam._m0[28u].z, fma(_1218, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1217)) - _1192;
        float _1235 = inversesqrt(dot(vec3(_1229, _1230, _1231), vec3(_1229, _1230, _1231)));
        float _1248 = ((_1235 * _1229) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1184 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1249 = ((_1235 * _1230) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1188 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1250 = ((_1235 * _1231) / cbModelParam._m0[34u].z) + ((((((_1192 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1253 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1248, _1249, _1250), 0.0);
        vec4 _1260 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1248, _1249, _1250), 0.0);
        vec4 _1267 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1248, _1249, _1250), 0.0);
        vec4 _1274 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1248, _1249, _1250), 0.0);
        float _1287 = exp2((_1253.w + (-0.5)) * 20.0) * 2.0;
        float _1288 = _1287 * (_1253.x + (-0.5));
        float _1289 = _1287 * (_1253.y + (-0.5));
        float _1290 = _1287 * (_1253.z + (-0.5));
        float _1297 = exp2((_1260.w + (-0.5)) * 20.0) * 2.0;
        float _1298 = _1297 * (_1260.x + (-0.5));
        float _1299 = _1297 * (_1260.y + (-0.5));
        float _1300 = _1297 * (_1260.z + (-0.5));
        float _1307 = exp2((_1267.w + (-0.5)) * 20.0) * 2.0;
        float _1308 = _1307 * (_1267.x + (-0.5));
        float _1309 = _1307 * (_1267.y + (-0.5));
        float _1310 = _1307 * (_1267.z + (-0.5));
        float _1317 = exp2((_1274.w + (-0.5)) * 20.0) * 2.0;
        float _1318 = _1317 * (_1274.x + (-0.5));
        float _1319 = _1317 * (_1274.y + (-0.5));
        float _1320 = _1317 * (_1274.z + (-0.5));
        float _1321 = isnan(0.0) ? _1318 : (isnan(_1318) ? 0.0 : max(_1318, 0.0));
        float _1322 = isnan(0.0) ? _1319 : (isnan(_1319) ? 0.0 : max(_1319, 0.0));
        float _1323 = isnan(0.0) ? _1320 : (isnan(_1320) ? 0.0 : max(_1320, 0.0));
        float _1324 = _1288 * 0.5;
        float _1325 = _1298 * 0.5;
        float _1326 = _1308 * 0.5;
        float _1327 = dot(vec3(_1324, _1325, _1326), vec3(_1324, _1325, _1326));
        float _1332 = (_1327 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1327);
        float _1341 = (dot(vec3(_940, _941, _942), vec3(_1332 * _1324, _1332 * _1325, _1332 * _1326)) + 1.0) * 0.5;
        float _3999 = isnan(0.0) ? _1341 : (isnan(_1341) ? 0.0 : max(_1341, 0.0));
        float _1351 = sqrt(((_1325 * _1325) + (_1324 * _1324)) + (_1326 * _1326)) / (_1321 + 9.9999997473787516355514526367188e-06);
        float _4010 = isnan(0.0) ? _1351 : (isnan(_1351) ? 0.0 : max(_1351, 0.0));
        float _1352 = isnan(1.0) ? _4010 : (isnan(_4010) ? 1.0 : min(_4010, 1.0));
        float _1353 = _1352 * 2.0;
        float _1357 = (1.0 - _1352) / (_1352 + 1.0);
        float _4021 = isnan(0.0) ? _1357 : (isnan(_1357) ? 0.0 : max(_1357, 0.0));
        float _1358 = isnan(1.0) ? _4021 : (isnan(_4021) ? 1.0 : min(_4021, 1.0));
        float _1367 = ((((1.0 - _1358) * (_1353 + 2.0)) * exp2(log2(isnan(1.0) ? _3999 : (isnan(_3999) ? 1.0 : min(_3999, 1.0))) * (_1353 + 1.0))) + _1358) * _1321;
        float _1368 = _1289 * 0.5;
        float _1369 = _1299 * 0.5;
        float _1370 = _1309 * 0.5;
        float _1371 = dot(vec3(_1368, _1369, _1370), vec3(_1368, _1369, _1370));
        float _1376 = (_1371 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1371);
        float _1384 = (dot(vec3(_940, _941, _942), vec3(_1376 * _1368, _1376 * _1369, _1376 * _1370)) + 1.0) * 0.5;
        float _4032 = isnan(0.0) ? _1384 : (isnan(_1384) ? 0.0 : max(_1384, 0.0));
        float _1393 = sqrt(((_1369 * _1369) + (_1368 * _1368)) + (_1370 * _1370)) / (_1322 + 9.9999997473787516355514526367188e-06);
        float _4043 = isnan(0.0) ? _1393 : (isnan(_1393) ? 0.0 : max(_1393, 0.0));
        float _1394 = isnan(1.0) ? _4043 : (isnan(_4043) ? 1.0 : min(_4043, 1.0));
        float _1395 = _1394 * 2.0;
        float _1399 = (1.0 - _1394) / (_1394 + 1.0);
        float _4054 = isnan(0.0) ? _1399 : (isnan(_1399) ? 0.0 : max(_1399, 0.0));
        float _1400 = isnan(1.0) ? _4054 : (isnan(_4054) ? 1.0 : min(_4054, 1.0));
        float _1409 = ((((1.0 - _1400) * (_1395 + 2.0)) * exp2(log2(isnan(1.0) ? _4032 : (isnan(_4032) ? 1.0 : min(_4032, 1.0))) * (_1395 + 1.0))) + _1400) * _1322;
        float _1410 = _1290 * 0.5;
        float _1411 = _1300 * 0.5;
        float _1412 = _1310 * 0.5;
        float _1413 = dot(vec3(_1410, _1411, _1412), vec3(_1410, _1411, _1412));
        float _1418 = (_1413 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1413);
        float _1426 = (dot(vec3(_940, _941, _942), vec3(_1418 * _1410, _1418 * _1411, _1418 * _1412)) + 1.0) * 0.5;
        float _4065 = isnan(0.0) ? _1426 : (isnan(_1426) ? 0.0 : max(_1426, 0.0));
        float _1435 = sqrt(((_1411 * _1411) + (_1410 * _1410)) + (_1412 * _1412)) / (_1323 + 9.9999997473787516355514526367188e-06);
        float _4076 = isnan(0.0) ? _1435 : (isnan(_1435) ? 0.0 : max(_1435, 0.0));
        float _1436 = isnan(1.0) ? _4076 : (isnan(_4076) ? 1.0 : min(_4076, 1.0));
        float _1437 = _1436 * 2.0;
        float _1441 = (1.0 - _1436) / (_1436 + 1.0);
        float _4087 = isnan(0.0) ? _1441 : (isnan(_1441) ? 0.0 : max(_1441, 0.0));
        float _1442 = isnan(1.0) ? _4087 : (isnan(_4087) ? 1.0 : min(_4087, 1.0));
        float _1451 = ((((1.0 - _1442) * (_1437 + 2.0)) * exp2(log2(isnan(1.0) ? _4065 : (isnan(_4065) ? 1.0 : min(_4065, 1.0))) * (_1437 + 1.0))) + _1442) * _1323;
        _1459 = _1290;
        _1461 = _1289;
        _1462 = _1288;
        _1463 = _1300;
        _1464 = _1299;
        _1465 = _1298;
        _1466 = _1310;
        _1467 = _1309;
        _1468 = _1308;
        _1469 = _1323;
        _1470 = _1322;
        _1471 = _1321;
        _1472 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1367 : (isnan(_1367) ? 0.0 : max(_1367, 0.0)));
        _1473 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1409 : (isnan(_1409) ? 0.0 : max(_1409, 0.0)));
        _1474 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1451 : (isnan(_1451) ? 0.0 : max(_1451, 0.0)));
    }
    else
    {
        _1459 = _1460;
        _1461 = _1460;
        _1462 = _1460;
        _1463 = _1460;
        _1464 = _1460;
        _1465 = _1460;
        _1466 = _1460;
        _1467 = _1460;
        _1468 = _1460;
        _1469 = _1460;
        _1470 = _1460;
        _1471 = _1460;
        _1472 = 0.0;
        _1473 = 0.0;
        _1474 = 0.0;
    }
    float _1767;
    float _1768;
    float _1769;
    float _1770;
    float _1771;
    float _1772;
    float _1773;
    float _1774;
    float _1775;
    float _1776;
    float _1777;
    float _1778;
    float _1779;
    float _1780;
    float _1781;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1498 = fma(_1158, cbModelParam._m0[30u].z, fma(_1154, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1150));
        float _1502 = fma(_1158, cbModelParam._m0[31u].z, fma(_1154, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1150));
        float _1506 = fma(_1158, cbModelParam._m0[32u].z, fma(_1154, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1150));
        float _1529 = _1150 + _940;
        float _1530 = _1154 + _941;
        float _1531 = _1158 + _942;
        float _1541 = fma(_1531, cbModelParam._m0[30u].z, fma(_1530, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1529)) - _1498;
        float _1542 = fma(_1531, cbModelParam._m0[31u].z, fma(_1530, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1529)) - _1502;
        float _1543 = fma(_1531, cbModelParam._m0[32u].z, fma(_1530, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1529)) - _1506;
        float _1547 = inversesqrt(dot(vec3(_1541, _1542, _1543), vec3(_1541, _1542, _1543)));
        float _1560 = ((_1547 * _1541) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1498 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1561 = ((_1547 * _1542) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1502 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1562 = ((_1547 * _1543) / cbModelParam._m0[35u].z) + ((((((_1506 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1564 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1560, _1561, _1562), 0.0);
        vec4 _1571 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1560, _1561, _1562), 0.0);
        vec4 _1578 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1560, _1561, _1562), 0.0);
        vec4 _1585 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1560, _1561, _1562), 0.0);
        float _1597 = exp2((_1564.w + (-0.5)) * 20.0) * 2.0;
        float _1598 = _1597 * (_1564.x + (-0.5));
        float _1599 = _1597 * (_1564.y + (-0.5));
        float _1600 = _1597 * (_1564.z + (-0.5));
        float _1607 = exp2((_1571.w + (-0.5)) * 20.0) * 2.0;
        float _1608 = _1607 * (_1571.x + (-0.5));
        float _1609 = _1607 * (_1571.y + (-0.5));
        float _1610 = _1607 * (_1571.z + (-0.5));
        float _1617 = exp2((_1578.w + (-0.5)) * 20.0) * 2.0;
        float _1618 = _1617 * (_1578.x + (-0.5));
        float _1619 = _1617 * (_1578.y + (-0.5));
        float _1620 = _1617 * (_1578.z + (-0.5));
        float _1627 = exp2((_1585.w + (-0.5)) * 20.0) * 2.0;
        float _1628 = _1627 * (_1585.x + (-0.5));
        float _1629 = _1627 * (_1585.y + (-0.5));
        float _1630 = _1627 * (_1585.z + (-0.5));
        float _1631 = isnan(0.0) ? _1628 : (isnan(_1628) ? 0.0 : max(_1628, 0.0));
        float _1632 = isnan(0.0) ? _1629 : (isnan(_1629) ? 0.0 : max(_1629, 0.0));
        float _1633 = isnan(0.0) ? _1630 : (isnan(_1630) ? 0.0 : max(_1630, 0.0));
        float _1634 = _1598 * 0.5;
        float _1635 = _1608 * 0.5;
        float _1636 = _1618 * 0.5;
        float _1637 = dot(vec3(_1634, _1635, _1636), vec3(_1634, _1635, _1636));
        float _1642 = (_1637 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1637);
        float _1650 = (dot(vec3(_940, _941, _942), vec3(_1642 * _1634, _1642 * _1635, _1642 * _1636)) + 1.0) * 0.5;
        float _4128 = isnan(0.0) ? _1650 : (isnan(_1650) ? 0.0 : max(_1650, 0.0));
        float _1659 = sqrt(((_1635 * _1635) + (_1634 * _1634)) + (_1636 * _1636)) / (_1631 + 9.9999997473787516355514526367188e-06);
        float _4139 = isnan(0.0) ? _1659 : (isnan(_1659) ? 0.0 : max(_1659, 0.0));
        float _1660 = isnan(1.0) ? _4139 : (isnan(_4139) ? 1.0 : min(_4139, 1.0));
        float _1661 = _1660 * 2.0;
        float _1665 = (1.0 - _1660) / (_1660 + 1.0);
        float _4150 = isnan(0.0) ? _1665 : (isnan(_1665) ? 0.0 : max(_1665, 0.0));
        float _1666 = isnan(1.0) ? _4150 : (isnan(_4150) ? 1.0 : min(_4150, 1.0));
        float _1675 = ((((1.0 - _1666) * (_1661 + 2.0)) * exp2(log2(isnan(1.0) ? _4128 : (isnan(_4128) ? 1.0 : min(_4128, 1.0))) * (_1661 + 1.0))) + _1666) * _1631;
        float _1676 = _1599 * 0.5;
        float _1677 = _1609 * 0.5;
        float _1678 = _1619 * 0.5;
        float _1679 = dot(vec3(_1676, _1677, _1678), vec3(_1676, _1677, _1678));
        float _1684 = (_1679 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1679);
        float _1692 = (dot(vec3(_940, _941, _942), vec3(_1684 * _1676, _1684 * _1677, _1684 * _1678)) + 1.0) * 0.5;
        float _4161 = isnan(0.0) ? _1692 : (isnan(_1692) ? 0.0 : max(_1692, 0.0));
        float _1701 = sqrt(((_1677 * _1677) + (_1676 * _1676)) + (_1678 * _1678)) / (_1632 + 9.9999997473787516355514526367188e-06);
        float _4172 = isnan(0.0) ? _1701 : (isnan(_1701) ? 0.0 : max(_1701, 0.0));
        float _1702 = isnan(1.0) ? _4172 : (isnan(_4172) ? 1.0 : min(_4172, 1.0));
        float _1703 = _1702 * 2.0;
        float _1707 = (1.0 - _1702) / (_1702 + 1.0);
        float _4183 = isnan(0.0) ? _1707 : (isnan(_1707) ? 0.0 : max(_1707, 0.0));
        float _1708 = isnan(1.0) ? _4183 : (isnan(_4183) ? 1.0 : min(_4183, 1.0));
        float _1717 = ((((1.0 - _1708) * (_1703 + 2.0)) * exp2(log2(isnan(1.0) ? _4161 : (isnan(_4161) ? 1.0 : min(_4161, 1.0))) * (_1703 + 1.0))) + _1708) * _1632;
        float _1718 = _1600 * 0.5;
        float _1719 = _1610 * 0.5;
        float _1720 = _1620 * 0.5;
        float _1721 = dot(vec3(_1718, _1719, _1720), vec3(_1718, _1719, _1720));
        float _1726 = (_1721 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1721);
        float _1734 = (dot(vec3(_940, _941, _942), vec3(_1726 * _1718, _1726 * _1719, _1726 * _1720)) + 1.0) * 0.5;
        float _4194 = isnan(0.0) ? _1734 : (isnan(_1734) ? 0.0 : max(_1734, 0.0));
        float _1743 = sqrt(((_1719 * _1719) + (_1718 * _1718)) + (_1720 * _1720)) / (_1633 + 9.9999997473787516355514526367188e-06);
        float _4205 = isnan(0.0) ? _1743 : (isnan(_1743) ? 0.0 : max(_1743, 0.0));
        float _1744 = isnan(1.0) ? _4205 : (isnan(_4205) ? 1.0 : min(_4205, 1.0));
        float _1745 = _1744 * 2.0;
        float _1749 = (1.0 - _1744) / (_1744 + 1.0);
        float _4216 = isnan(0.0) ? _1749 : (isnan(_1749) ? 0.0 : max(_1749, 0.0));
        float _1750 = isnan(1.0) ? _4216 : (isnan(_4216) ? 1.0 : min(_4216, 1.0));
        float _1759 = ((((1.0 - _1750) * (_1745 + 2.0)) * exp2(log2(isnan(1.0) ? _4194 : (isnan(_4194) ? 1.0 : min(_4194, 1.0))) * (_1745 + 1.0))) + _1750) * _1633;
        _1767 = _1600;
        _1768 = _1599;
        _1769 = _1598;
        _1770 = _1610;
        _1771 = _1609;
        _1772 = _1608;
        _1773 = _1620;
        _1774 = _1619;
        _1775 = _1618;
        _1776 = _1633;
        _1777 = _1632;
        _1778 = _1631;
        _1779 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1675 : (isnan(_1675) ? 0.0 : max(_1675, 0.0)));
        _1780 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1717 : (isnan(_1717) ? 0.0 : max(_1717, 0.0)));
        _1781 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1759 : (isnan(_1759) ? 0.0 : max(_1759, 0.0)));
    }
    else
    {
        _1767 = _1460;
        _1768 = _1460;
        _1769 = _1460;
        _1770 = _1460;
        _1771 = _1460;
        _1772 = _1460;
        _1773 = _1460;
        _1774 = _1460;
        _1775 = _1460;
        _1776 = _1460;
        _1777 = _1460;
        _1778 = _1460;
        _1779 = 0.0;
        _1780 = 0.0;
        _1781 = 0.0;
    }
    float _1791 = (cbModelParam._m0[1u].x * (_1779 - _1472)) + _1472;
    float _1792 = (cbModelParam._m0[1u].x * (_1780 - _1473)) + _1473;
    float _1793 = (cbModelParam._m0[1u].x * (_1781 - _1474)) + _1474;
    float _1814 = fma(_1793, cbSceneParam._m0[89u].z, fma(_1792, cbSceneParam._m0[89u].y, _1791 * cbSceneParam._m0[89u].x));
    float _1817 = fma(_1793, cbSceneParam._m0[90u].z, fma(_1792, cbSceneParam._m0[90u].y, _1791 * cbSceneParam._m0[90u].x));
    float _1820 = fma(_1793, cbSceneParam._m0[91u].z, fma(_1792, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1791));
    float _1835 = _1097 * 0.5;
    float _1836 = _1098 * 0.5;
    float _1837 = _1099 * 0.5;
    float _1838 = dot(vec4(_1835, _1836, _1837, 1.0), vec4(_1769, _1772, _1775, _1778));
    float _1841 = dot(vec4(_1835, _1836, _1837, 1.0), vec4(_1768, _1771, _1774, _1777));
    float _1844 = dot(vec4(_1835, _1836, _1837, 1.0), vec4(_1767, _1770, _1773, _1776));
    float _1878;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1851 = dot(vec4(_1835, _1836, _1837, 1.0), vec4(_1459, _1463, _1466, _1469));
        float _1855 = dot(vec4(_1835, _1836, _1837, 1.0), vec4(_1461, _1464, _1467, _1470));
        float _1859 = dot(vec4(_1835, _1836, _1837, 1.0), vec4(_1462, _1465, _1468, _1471));
        float _1866 = dot(vec4(cbModelParam._m0[39u]), vec4(_1835, _1836, _1837, 1.0));
        _1878 = dot(vec3(isnan(0.0) ? _1859 : (isnan(_1859) ? 0.0 : max(_1859, 0.0)), isnan(0.0) ? _1855 : (isnan(_1855) ? 0.0 : max(_1855, 0.0)), isnan(0.0) ? _1851 : (isnan(_1851) ? 0.0 : max(_1851, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1866) ? 0.0 : (isnan(0.0) ? _1866 : max(0.0, _1866))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1878 = 1.0;
    }
    float _1889;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1880 = dot(vec4(cbModelParam._m0[40u]), vec4(_1835, _1836, _1837, 1.0));
        _1889 = dot(vec3(isnan(0.0) ? _1838 : (isnan(_1838) ? 0.0 : max(_1838, 0.0)), isnan(0.0) ? _1841 : (isnan(_1841) ? 0.0 : max(_1841, 0.0)), isnan(0.0) ? _1844 : (isnan(_1844) ? 0.0 : max(_1844, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1880) ? 0.0 : (isnan(0.0) ? _1880 : max(0.0, _1880))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1889 = 1.0;
    }
    float _1893 = (_1889 * cbModelParam._m0[1u].x) + (_1878 * (1.0 - cbModelParam._m0[1u].x));
    float _1903 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _943);
    float _1904 = isnan(_1903) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1903 : min(cbModelParam._m0[25u].z, _1903));
    float _1985;
    float _1987;
    float _1989;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1952 = fma(_1158, cbModelParam._m0[13u].z, fma(_1154, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1150)) + cbModelParam._m0[13u].w;
        float _1956 = fma(_1158, cbModelParam._m0[14u].z, fma(_1154, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1150)) + cbModelParam._m0[14u].w;
        float _1960 = fma(_1158, cbModelParam._m0[15u].z, fma(_1154, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1150)) + cbModelParam._m0[15u].w;
        float _1963 = fma(_1099, cbModelParam._m0[13u].z, fma(_1098, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1097));
        float _1966 = fma(_1099, cbModelParam._m0[14u].z, fma(_1098, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1097));
        float _1969 = fma(_1099, cbModelParam._m0[15u].z, fma(_1098, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1097));
        float _1997;
        if (_1963 > 0.0)
        {
            _1997 = abs((1.0 - _1952) / _1963);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1963 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1952 + 1.0) / _1963);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1997 = frontier_phi_14_12_ladder;
        }
        float _2198;
        if (_1966 > 0.0)
        {
            _2198 = abs((1.0 - _1956) / _1966);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1966 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1956 + 1.0) / _1966);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2198 = frontier_phi_23_19_ladder;
        }
        float _2441;
        if (_1969 > 0.0)
        {
            _2441 = abs((1.0 - _1960) / _1969);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1969 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1960 + 1.0) / _1969);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2441 = frontier_phi_35_30_ladder;
        }
        float _2443 = isnan(_2198) ? _1997 : (isnan(_1997) ? _2198 : min(_1997, _2198));
        float _2444 = isnan(_2441) ? _2443 : (isnan(_2443) ? _2441 : min(_2443, _2441));
        float _2448 = (_2444 * _1963) + _1952;
        float _2449 = (_2444 * _1966) + _1956;
        float _2450 = (_2444 * _1969) + _1960;
        float _2451 = _2444 * 9.9999997473787516355514526367188e-05;
        float _2453 = (-1.0) - _2451;
        float _2455 = _2451 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2450 > _2455) || ((_2450 < _2453) || ((_2449 > _2455) || ((_2449 < _2453) || ((_2448 < _2453) || (_2448 > _2455))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2574 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2450, cbModelParam._m0[9u].z, fma(_2449, cbModelParam._m0[9u].y, _2448 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2450, cbModelParam._m0[10u].z, fma(_2449, cbModelParam._m0[10u].y, _2448 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2450, cbModelParam._m0[11u].z, fma(_2449, cbModelParam._m0[11u].y, _2448 * cbModelParam._m0[11u].x))), _1904);
            frontier_phi_13_35_ladder = _2574.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2574.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2574.x * cbModelParam._m0[1u].y;
        }
        _1985 = frontier_phi_13_35_ladder_2;
        _1987 = frontier_phi_13_35_ladder_1;
        _1989 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1973 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1097, _1098, _1099), _1904);
        _1985 = _1973.x * cbModelParam._m0[1u].y;
        _1987 = _1973.y * cbModelParam._m0[1u].y;
        _1989 = _1973.z * cbModelParam._m0[1u].y;
    }
    float _1993 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _943);
    float _1994 = isnan(_1993) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1993 : min(cbModelParam._m0[25u].w, _1993));
    float _2084;
    float _2086;
    float _2088;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2048 = fma(_1158, cbModelParam._m0[21u].z, fma(_1154, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1150)) + cbModelParam._m0[21u].w;
        float _2052 = fma(_1158, cbModelParam._m0[22u].z, fma(_1154, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1150)) + cbModelParam._m0[22u].w;
        float _2056 = fma(_1158, cbModelParam._m0[23u].z, fma(_1154, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1150)) + cbModelParam._m0[23u].w;
        float _2059 = fma(_1099, cbModelParam._m0[21u].z, fma(_1098, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1097));
        float _2062 = fma(_1099, cbModelParam._m0[22u].z, fma(_1098, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1097));
        float _2065 = fma(_1099, cbModelParam._m0[23u].z, fma(_1098, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1097));
        float _2203;
        if (_2059 > 0.0)
        {
            _2203 = abs((1.0 - _2048) / _2059);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_2059 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_2048 + 1.0) / _2059);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2203 = frontier_phi_25_21_ladder;
        }
        float _2468;
        if (_2062 > 0.0)
        {
            _2468 = abs((1.0 - _2052) / _2062);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_2062 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_2052 + 1.0) / _2062);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2468 = frontier_phi_37_32_ladder;
        }
        float _2673;
        if (_2065 > 0.0)
        {
            _2673 = abs((1.0 - _2056) / _2065);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_2065 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_2056 + 1.0) / _2065);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2673 = frontier_phi_46_43_ladder;
        }
        float _2675 = isnan(_2468) ? _2203 : (isnan(_2203) ? _2468 : min(_2203, _2468));
        float _2676 = isnan(_2673) ? _2675 : (isnan(_2675) ? _2673 : min(_2675, _2673));
        float _2680 = (_2676 * _2059) + _2048;
        float _2681 = (_2676 * _2062) + _2052;
        float _2682 = (_2676 * _2065) + _2056;
        float _2683 = _2676 * 9.9999997473787516355514526367188e-05;
        float _2684 = (-1.0) - _2683;
        float _2686 = _2683 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2682 > _2686) || ((_2682 < _2684) || ((_2681 > _2686) || ((_2681 < _2684) || ((_2680 < _2684) || (_2680 > _2686))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2881 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2682, cbModelParam._m0[17u].z, fma(_2681, cbModelParam._m0[17u].y, _2680 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2682, cbModelParam._m0[18u].z, fma(_2681, cbModelParam._m0[18u].y, _2680 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2682, cbModelParam._m0[19u].z, fma(_2681, cbModelParam._m0[19u].y, _2680 * cbModelParam._m0[19u].x))), _1994);
            frontier_phi_22_46_ladder = _2881.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2881.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2881.x * cbModelParam._m0[1u].z;
        }
        _2084 = frontier_phi_22_46_ladder_2;
        _2086 = frontier_phi_22_46_ladder_1;
        _2088 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _2068 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1097, _1098, _1099), _1994);
        _2084 = _2068.x * cbModelParam._m0[1u].z;
        _2086 = _2068.y * cbModelParam._m0[1u].z;
        _2088 = _2068.z * cbModelParam._m0[1u].z;
    }
    float _2100 = ((((1.0 - _1118) * ((_1105 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_1118 * _1105)) * _1089;
    float _2101 = _2100 * ((cbModelParam._m0[1u].w * (_2084 - _1985)) + _1985);
    float _2102 = _2100 * ((cbModelParam._m0[1u].w * (_2086 - _1987)) + _1987);
    float _2103 = _2100 * ((cbModelParam._m0[1u].w * (_2088 - _1989)) + _1989);
    float _2106 = fma(_2103, cbSceneParam._m0[89u].z, fma(_2102, cbSceneParam._m0[89u].y, _2101 * cbSceneParam._m0[89u].x));
    float _2109 = fma(_2103, cbSceneParam._m0[90u].z, fma(_2102, cbSceneParam._m0[90u].y, _2101 * cbSceneParam._m0[90u].x));
    float _2112 = fma(_2103, cbSceneParam._m0[91u].z, fma(_2102, cbSceneParam._m0[91u].y, _2101 * cbSceneParam._m0[91u].x));
    uvec4 _2122 = floatBitsToUint(cbInstanceData._m0[_283 + 5u]);
    uint _2124 = _2122.x * 14u;
    uint _2125 = _2124 + 13u;
    float _2132 = _1089 + (-1.0);
    float _2137 = (cbLight._m0[_2125].x * _2132) + 1.0;
    float _2138 = (cbLight._m0[_2125].y * _2132) + 1.0;
    float _2139 = (cbLight._m0[_2125].z * _2132) + 1.0;
    float _2140 = (cbLight._m0[_2125].w * _2132) + 1.0;
    uint _2141 = _2124 + 5u;
    float _2147 = isnan(1.0) ? _2138 : (isnan(_2138) ? 1.0 : min(_2138, 1.0));
    uint _2151 = _2124 + 4u;
    float _2157 = isnan(1.0) ? _2137 : (isnan(_2137) ? 1.0 : min(_2137, 1.0));
    uint _2161 = _2124 | 1u;
    float _2172 = dot(vec3(cbLight._m0[_2124].xyz), vec3(_940, _941, _942));
    float _2175 = dot(vec3(cbLight._m0[_2161].xyz), vec3(_940, _941, _942));
    float _4352 = isnan(0.0) ? _2172 : (isnan(_2172) ? 0.0 : max(_2172, 0.0));
    float _4363 = isnan(0.0) ? _2175 : (isnan(_2175) ? 0.0 : max(_2175, 0.0));
    float _2180 = (isnan(1.0) ? _4352 : (isnan(_4352) ? 1.0 : min(_4352, 1.0))) * 0.3183098733425140380859375;
    float _2182 = (isnan(1.0) ? _4363 : (isnan(_4363) ? 1.0 : min(_4363, 1.0))) * 0.3183098733425140380859375;
    float _2189 = ((cbLight._m0[_2141].x * _2147) * _2182) + ((cbLight._m0[_2151].x * _2157) * _2180);
    float _2190 = ((_2147 * cbLight._m0[_2141].y) * _2182) + ((_2157 * cbLight._m0[_2151].y) * _2180);
    float _2191 = ((_2147 * cbLight._m0[_2141].z) * _2182) + ((_2157 * cbLight._m0[_2151].z) * _2180);
    uvec4 _2195 = floatBitsToUint(cbLight._m0[_2124 + 12u]);
    bool _2197 = _2195.x == 0u;
    float _2208;
    float _2210;
    float _2212;
    if (_2197)
    {
        _2208 = _2189;
        _2210 = _2190;
        _2212 = _2191;
    }
    else
    {
        uint _2216 = _2124 + 6u;
        float _2232 = (dot(vec3(cbLight._m0[_2124 + 2u].xyz), vec3(_940, _941, _942)) * 0.5) + 0.5;
        float _2233 = _2232 * _2232;
        float _4374 = isnan(0.0) ? _2233 : (isnan(_2233) ? 0.0 : max(_2233, 0.0));
        float _2234 = isnan(1.0) ? _4374 : (isnan(_4374) ? 1.0 : min(_4374, 1.0));
        float _2235 = isnan(1.0) ? _2139 : (isnan(_2139) ? 1.0 : min(_2139, 1.0));
        _2208 = (((cbLight._m0[_2216].x * 0.3183098733425140380859375) * _2234) * _2235) + _2189;
        _2210 = (((cbLight._m0[_2216].y * 0.3183098733425140380859375) * _2234) * _2235) + _2190;
        _2212 = (((cbLight._m0[_2216].z * 0.3183098733425140380859375) * _2234) * _2235) + _2191;
    }
    bool _2215 = _2195.y == 0u;
    float _2253;
    float _2255;
    float _2257;
    if (_2215)
    {
        _2253 = _2208;
        _2255 = _2210;
        _2257 = _2212;
    }
    else
    {
        uint _2412 = _2124 + 7u;
        float _2428 = (dot(vec3(cbLight._m0[_2124 + 3u].xyz), vec3(_940, _941, _942)) * 0.5) + 0.5;
        float _2429 = _2428 * _2428;
        float _4390 = isnan(0.0) ? _2429 : (isnan(_2429) ? 0.0 : max(_2429, 0.0));
        float _2430 = isnan(1.0) ? _4390 : (isnan(_4390) ? 1.0 : min(_4390, 1.0));
        float _2431 = isnan(1.0) ? _2140 : (isnan(_2140) ? 1.0 : min(_2140, 1.0));
        _2253 = (((cbLight._m0[_2412].x * 0.3183098733425140380859375) * _2430) * _2431) + _2208;
        _2255 = (((cbLight._m0[_2412].y * 0.3183098733425140380859375) * _2430) * _2431) + _2210;
        _2257 = (((cbLight._m0[_2412].z * 0.3183098733425140380859375) * _2430) * _2431) + _2212;
    }
    uint _2260 = _2124 + 8u;
    float _2273 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2124].w)) * _943) * 0.949999988079071044921875);
    float _2274 = _2273 * _2273;
    float _2275 = cbLight._m0[_2124].x + _1018;
    float _2276 = cbLight._m0[_2124].y + _1019;
    float _2277 = cbLight._m0[_2124].z + _1020;
    float _2281 = inversesqrt(dot(vec3(_2275, _2276, _2277), vec3(_2275, _2276, _2277)));
    float _2282 = _2281 * _2275;
    float _2283 = _2281 * _2276;
    float _2284 = _2281 * _2277;
    float _2285 = dot(vec3(_940, _941, _942), vec3(cbLight._m0[_2124].xyz));
    float _4406 = isnan(0.0) ? _2285 : (isnan(_2285) ? 0.0 : max(_2285, 0.0));
    float _2288 = isnan(1.0) ? _4406 : (isnan(_4406) ? 1.0 : min(_4406, 1.0));
    float _4417 = isnan(0.0) ? _1090 : (isnan(_1090) ? 0.0 : max(_1090, 0.0));
    float _2289 = isnan(1.0) ? _4417 : (isnan(_4417) ? 1.0 : min(_4417, 1.0));
    float _2290 = dot(vec3(_940, _941, _942), vec3(_2282, _2283, _2284));
    float _4428 = isnan(0.0) ? _2290 : (isnan(_2290) ? 0.0 : max(_2290, 0.0));
    float _2293 = isnan(1.0) ? _4428 : (isnan(_4428) ? 1.0 : min(_4428, 1.0));
    float _2294 = dot(vec3(cbLight._m0[_2124].xyz), vec3(_2282, _2283, _2284));
    float _4439 = isnan(0.0) ? _2294 : (isnan(_2294) ? 0.0 : max(_2294, 0.0));
    float _2298 = _2274 * _2274;
    float _2302 = ((_2293 * _2293) * (_2298 + (-1.0))) + 1.0;
    float _2313 = (exp2(log2(1.0 - (isnan(1.0) ? _4439 : (isnan(_4439) ? 1.0 : min(_4439, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2314 = 1.0 - _2274;
    float _2325 = (0.5 / (((_2289 * ((_2288 * _2314) + _2274)) + 9.9999999392252902907785028219223e-09) + (((_2289 * _2314) + _2274) * _2288))) * _2288;
    float _4450 = isnan(0.0) ? _2325 : (isnan(_2325) ? 0.0 : max(_2325, 0.0));
    float _2327 = (isnan(1.0) ? _4450 : (isnan(_4450) ? 1.0 : min(_4450, 1.0))) * (_2298 / ((_2302 * _2302) * 3.141590118408203125));
    uint _2338 = _2124 + 9u;
    float _2349 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2161].w)) * _943) * 0.949999988079071044921875);
    float _2350 = _2349 * _2349;
    float _2351 = cbLight._m0[_2161].x + _1018;
    float _2352 = cbLight._m0[_2161].y + _1019;
    float _2353 = cbLight._m0[_2161].z + _1020;
    float _2357 = inversesqrt(dot(vec3(_2351, _2352, _2353), vec3(_2351, _2352, _2353)));
    float _2358 = _2357 * _2351;
    float _2359 = _2357 * _2352;
    float _2360 = _2357 * _2353;
    float _2361 = dot(vec3(_940, _941, _942), vec3(cbLight._m0[_2161].xyz));
    float _4461 = isnan(0.0) ? _2361 : (isnan(_2361) ? 0.0 : max(_2361, 0.0));
    float _2364 = isnan(1.0) ? _4461 : (isnan(_4461) ? 1.0 : min(_4461, 1.0));
    float _2365 = dot(vec3(_940, _941, _942), vec3(_2358, _2359, _2360));
    float _4472 = isnan(0.0) ? _2365 : (isnan(_2365) ? 0.0 : max(_2365, 0.0));
    float _2368 = isnan(1.0) ? _4472 : (isnan(_4472) ? 1.0 : min(_4472, 1.0));
    float _2369 = dot(vec3(cbLight._m0[_2161].xyz), vec3(_2358, _2359, _2360));
    float _4483 = isnan(0.0) ? _2369 : (isnan(_2369) ? 0.0 : max(_2369, 0.0));
    float _2373 = _2350 * _2350;
    float _2377 = ((_2368 * _2368) * (_2373 + (-1.0))) + 1.0;
    float _2386 = (exp2(log2(1.0 - (isnan(1.0) ? _4483 : (isnan(_4483) ? 1.0 : min(_4483, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2387 = 1.0 - _2350;
    float _2397 = (0.5 / (((_2289 * ((_2364 * _2387) + _2350)) + 9.9999999392252902907785028219223e-09) + (((_2289 * _2387) + _2350) * _2364))) * _2364;
    float _4494 = isnan(0.0) ? _2397 : (isnan(_2397) ? 0.0 : max(_2397, 0.0));
    float _2399 = (isnan(1.0) ? _4494 : (isnan(_4494) ? 1.0 : min(_4494, 1.0))) * (_2373 / ((_2377 * _2377) * 3.141590118408203125));
    float _2409 = (((_2386 * cbLight._m0[_2338].x) * _2399) * _2147) + (((_2313 * cbLight._m0[_2260].x) * _2327) * _2157);
    float _2410 = (((_2386 * cbLight._m0[_2338].y) * _2399) * _2147) + (((_2313 * cbLight._m0[_2260].y) * _2327) * _2157);
    float _2411 = (((_2386 * cbLight._m0[_2338].z) * _2399) * _2147) + (((_2313 * cbLight._m0[_2260].z) * _2327) * _2157);
    float _2473;
    float _2475;
    float _2477;
    if (_2197)
    {
        _2473 = _2409;
        _2475 = _2410;
        _2477 = _2411;
    }
    else
    {
        uint _2479 = _2124 + 2u;
        uint _2483 = _2124 + 10u;
        float _2497 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2479].w)) * _943) * 0.949999988079071044921875);
        float _2498 = _2497 * _2497;
        float _2499 = cbLight._m0[_2479].x + _1018;
        float _2500 = cbLight._m0[_2479].y + _1019;
        float _2501 = cbLight._m0[_2479].z + _1020;
        float _2505 = inversesqrt(dot(vec3(_2499, _2500, _2501), vec3(_2499, _2500, _2501)));
        float _2506 = _2505 * _2499;
        float _2507 = _2505 * _2500;
        float _2508 = _2505 * _2501;
        float _2509 = dot(vec3(_940, _941, _942), vec3(cbLight._m0[_2479].xyz));
        float _4505 = isnan(0.0) ? _2509 : (isnan(_2509) ? 0.0 : max(_2509, 0.0));
        float _2512 = isnan(1.0) ? _4505 : (isnan(_4505) ? 1.0 : min(_4505, 1.0));
        float _2513 = dot(vec3(_940, _941, _942), vec3(_2506, _2507, _2508));
        float _4516 = isnan(0.0) ? _2513 : (isnan(_2513) ? 0.0 : max(_2513, 0.0));
        float _2516 = isnan(1.0) ? _4516 : (isnan(_4516) ? 1.0 : min(_4516, 1.0));
        float _2517 = dot(vec3(cbLight._m0[_2479].xyz), vec3(_2506, _2507, _2508));
        float _4527 = isnan(0.0) ? _2517 : (isnan(_2517) ? 0.0 : max(_2517, 0.0));
        float _2521 = _2498 * _2498;
        float _2525 = ((_2516 * _2516) * (_2521 + (-1.0))) + 1.0;
        float _2534 = (exp2(log2(1.0 - (isnan(1.0) ? _4527 : (isnan(_4527) ? 1.0 : min(_4527, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2535 = 1.0 - _2498;
        float _2545 = (0.5 / (((_2289 * ((_2512 * _2535) + _2498)) + 9.9999999392252902907785028219223e-09) + (((_2289 * _2535) + _2498) * _2512))) * _2512;
        float _4538 = isnan(0.0) ? _2545 : (isnan(_2545) ? 0.0 : max(_2545, 0.0));
        float _2547 = (isnan(1.0) ? _4538 : (isnan(_4538) ? 1.0 : min(_4538, 1.0))) * (_2521 / ((_2525 * _2525) * 3.141590118408203125));
        float _2548 = isnan(1.0) ? _2139 : (isnan(_2139) ? 1.0 : min(_2139, 1.0));
        _2473 = (((_2534 * cbLight._m0[_2483].x) * _2547) * _2548) + _2409;
        _2475 = (((_2534 * cbLight._m0[_2483].y) * _2547) * _2548) + _2410;
        _2477 = (((_2534 * cbLight._m0[_2483].z) * _2547) * _2548) + _2411;
    }
    float _2583;
    float _2585;
    float _2587;
    if (_2215)
    {
        _2583 = _2473;
        _2585 = _2475;
        _2587 = _2477;
    }
    else
    {
        uint _2594 = _2124 + 3u;
        uint _2598 = _2124 + 11u;
        float _2612 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2594].w)) * _943) * 0.949999988079071044921875);
        float _2613 = _2612 * _2612;
        float _2614 = cbLight._m0[_2594].x + _1018;
        float _2615 = cbLight._m0[_2594].y + _1019;
        float _2616 = cbLight._m0[_2594].z + _1020;
        float _2620 = inversesqrt(dot(vec3(_2614, _2615, _2616), vec3(_2614, _2615, _2616)));
        float _2621 = _2620 * _2614;
        float _2622 = _2620 * _2615;
        float _2623 = _2620 * _2616;
        float _2624 = dot(vec3(_940, _941, _942), vec3(cbLight._m0[_2594].xyz));
        float _4554 = isnan(0.0) ? _2624 : (isnan(_2624) ? 0.0 : max(_2624, 0.0));
        float _2627 = isnan(1.0) ? _4554 : (isnan(_4554) ? 1.0 : min(_4554, 1.0));
        float _2628 = dot(vec3(_940, _941, _942), vec3(_2621, _2622, _2623));
        float _4565 = isnan(0.0) ? _2628 : (isnan(_2628) ? 0.0 : max(_2628, 0.0));
        float _2631 = isnan(1.0) ? _4565 : (isnan(_4565) ? 1.0 : min(_4565, 1.0));
        float _2632 = dot(vec3(cbLight._m0[_2594].xyz), vec3(_2621, _2622, _2623));
        float _4576 = isnan(0.0) ? _2632 : (isnan(_2632) ? 0.0 : max(_2632, 0.0));
        float _2636 = _2613 * _2613;
        float _2640 = ((_2631 * _2631) * (_2636 + (-1.0))) + 1.0;
        float _2649 = (exp2(log2(1.0 - (isnan(1.0) ? _4576 : (isnan(_4576) ? 1.0 : min(_4576, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2650 = 1.0 - _2613;
        float _2660 = (0.5 / (((_2289 * ((_2627 * _2650) + _2613)) + 9.9999999392252902907785028219223e-09) + (((_2289 * _2650) + _2613) * _2627))) * _2627;
        float _4587 = isnan(0.0) ? _2660 : (isnan(_2660) ? 0.0 : max(_2660, 0.0));
        float _2662 = (isnan(1.0) ? _4587 : (isnan(_4587) ? 1.0 : min(_4587, 1.0))) * (_2636 / ((_2640 * _2640) * 3.141590118408203125));
        float _2663 = isnan(1.0) ? _2140 : (isnan(_2140) ? 1.0 : min(_2140, 1.0));
        _2583 = (((_2649 * cbLight._m0[_2598].x) * _2662) * _2663) + _2473;
        _2585 = (((_2649 * cbLight._m0[_2598].y) * _2662) * _2663) + _2475;
        _2587 = (((_2649 * cbLight._m0[_2598].z) * _2662) * _2663) + _2477;
    }
    float _2798;
    float _2800;
    float _2802;
    float _2804;
    float _2806;
    float _2808;
    if (_2122.y == 0u)
    {
        float _2738 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2739 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2738;
        float _2740 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2738;
        float _2741 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2738;
        uvec4 _2753 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2754 = _2753.x;
        uint _2765 = uint((float(_2753.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1027) / _2754))) + floor(float(uint(cbSceneParam._m0[85u].x * _1026) / _2754)));
        float _2775 = (log2(_2741 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2776 = isnan(0.0) ? _2775 : (isnan(_2775) ? 0.0 : max(_2775, 0.0));
        uint _2779 = uint(isnan(14.0) ? _2776 : (isnan(_2776) ? 14.0 : min(_2776, 14.0)));
        uvec4 _2784 = texelFetch(g_lightClusterGridBuffer, int(((_2779 << 2u) + (_2765 << 6u)) >> 2u));
        uint _2785 = _2784.x;
        uint _2786 = _2753.z;
        float _2886;
        float _2888;
        float _2890;
        float _2892;
        float _2894;
        float _2896;
        if (((((1u << ((_2786 >> 4u) & 15u)) + 4294967295u) & _2785) == 0u) || ((_2786 & 240u) == 0u))
        {
            _2886 = 0.0;
            _2888 = 0.0;
            _2890 = 0.0;
            _2892 = 0.0;
            _2894 = 0.0;
            _2896 = 0.0;
        }
        else
        {
            float _2887;
            float _2889;
            float _2891;
            float _2893;
            float _2895;
            float _2897;
            float _3031 = 0.0;
            float _3032 = 0.0;
            float _3033 = 0.0;
            float _3034 = 0.0;
            float _3035 = 0.0;
            float _3036 = 0.0;
            uint _3037 = 0u;
            uint _3046;
            bool _3047;
            for (;;)
            {
                _3046 = texelFetch(g_lightClassification, int((((_2779 << 5u) + (_2765 << 9u)) + (_3037 << 2u)) >> 2u)).x;
                _3047 = _3046 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_3047)
                {
                    frontier_phi_61_pred = _3031;
                    frontier_phi_61_pred_1 = _3036;
                    frontier_phi_61_pred_2 = _3035;
                    frontier_phi_61_pred_3 = _3034;
                    frontier_phi_61_pred_4 = _3033;
                    frontier_phi_61_pred_5 = _3032;
                }
                else
                {
                    float _3155;
                    float _3156;
                    float _3157;
                    float _3158;
                    float _3159;
                    float _3160;
                    uint _3161;
                    _3155 = _3031;
                    _3156 = _3032;
                    _3157 = _3033;
                    _3158 = _3034;
                    _3159 = _3035;
                    _3160 = _3036;
                    _3161 = _3046;
                    float _3087;
                    float _3088;
                    float _3089;
                    float _3090;
                    float _3091;
                    float _3092;
                    for (;;)
                    {
                        uint _3165 = uint(findLSB(_3161)) + (_3037 << 5u);
                        uint _3162 = (_3161 + 4294967295u) & _3161;
                        uint _3167 = _3165 * 48u;
                        vec4 _3181 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3167)).x, texelFetch(g_PointLightRenderingBuffer, int(_3167 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3167 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3167 + 3u)).x));
                        uint _3187 = (_3165 * 48u) + 4u;
                        vec4 _3200 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3187)).x, texelFetch(g_PointLightRenderingBuffer, int(_3187 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3187 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3187 + 3u)).x));
                        uint _3206 = (_3165 * 48u) + 8u;
                        vec3 _3217 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3206)).x, texelFetch(g_PointLightRenderingBuffer, int(_3206 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3206 + 2u)).x));
                        float _3221 = _3181.x - _2739;
                        float _3222 = _3181.y - _2740;
                        float _3223 = _3181.z - _2741;
                        float _3224 = dot(vec3(_3221, _3222, _3223), vec3(_3221, _3222, _3223));
                        float _3227 = inversesqrt(_3224);
                        float _3228 = _3227 * _3221;
                        float _3229 = _3227 * _3222;
                        float _3230 = _3227 * _3223;
                        float _3231 = dot(vec3(_1045, _1048, _1051), vec3(_3228, _3229, _3230));
                        float _3236 = 1.0 - (_3224 * _3181.w);
                        float _4613 = isnan(0.0) ? _3236 : (isnan(_3236) ? 0.0 : max(_3236, 0.0));
                        float _3237 = isnan(1.0) ? _4613 : (isnan(_4613) ? 1.0 : min(_4613, 1.0));
                        float _3238 = sqrt(_3224) * _3200.w;
                        float _3241 = 1.39999997615814208984375 / (_3238 + 1.39999997615814208984375);
                        float _3242 = _3241 * _3241;
                        float _3245 = ((1.0 - _3242) * _3231) + _3242;
                        float _3248 = _3238 * _3238;
                        float _3252 = ((isnan(0.0) ? _3245 : (isnan(_3245) ? 0.0 : max(_3245, 0.0))) * _3237) / ((_3248 * 0.699999988079071044921875) + 1.0);
                        float _3256 = (-0.0) - _2739;
                        float _3257 = (-0.0) - _2740;
                        float _3258 = (-0.0) - _2741;
                        float _3262 = inversesqrt(dot(vec3(_3256, _3257, _3258), vec3(_3256, _3257, _3258)));
                        float _3263 = _3262 * _3256;
                        float _3264 = _3262 * _3257;
                        float _3265 = _3262 * _3258;
                        float _3273 = exp2(log2(1.0 / ((_3248 * 3.5) + 5.0)) * 0.25);
                        float _3274 = 1.0 - _1105;
                        float _3281 = sqrt(1.0 - ((1.0 - (_3274 * _3274)) * (1.0 - (_3273 * _3273))));
                        float _3282 = _3281 * _3281;
                        float _3283 = _3282 * _3282;
                        float _3284 = _3263 + _3228;
                        float _3285 = _3264 + _3229;
                        float _3286 = _3265 + _3230;
                        float _3290 = inversesqrt(dot(vec3(_3284, _3285, _3286), vec3(_3284, _3285, _3286)));
                        float _3294 = dot(vec3(_1045, _1048, _1051), vec3(_3263, _3264, _3265));
                        float _4629 = isnan(0.0) ? _3294 : (isnan(_3294) ? 0.0 : max(_3294, 0.0));
                        float _3297 = isnan(1.0) ? _4629 : (isnan(_4629) ? 1.0 : min(_4629, 1.0));
                        float _3298 = dot(vec3(_1045, _1048, _1051), vec3(_3290 * _3284, _3290 * _3285, _3290 * _3286));
                        float _4640 = isnan(0.0) ? _3298 : (isnan(_3298) ? 0.0 : max(_3298, 0.0));
                        float _3301 = isnan(1.0) ? _4640 : (isnan(_4640) ? 1.0 : min(_4640, 1.0));
                        float _3305 = ((_3301 * _3301) * (_3283 + (-1.0))) + 1.0;
                        float _3306 = _3241 * _3282;
                        float _3307 = _3306 * _3306;
                        float _3310 = ((1.0 - _3307) * _3231) + _3307;
                        float _4651 = isnan(0.0) ? _3310 : (isnan(_3310) ? 0.0 : max(_3310, 0.0));
                        float _3311 = isnan(1.0) ? _4651 : (isnan(_4651) ? 1.0 : min(_4651, 1.0));
                        float _3312 = 1.0 - _3282;
                        float _3322 = (0.5 / (((_3311 * ((_3297 * _3312) + _3282)) + 9.9999999392252902907785028219223e-09) + (((_3311 * _3312) + _3282) * _3297))) * _3311;
                        float _4662 = isnan(0.0) ? _3322 : (isnan(_3322) ? 0.0 : max(_3322, 0.0));
                        float _3333 = (((_3283 * 3.1415927410125732421875) * (isnan(1.0) ? _4662 : (isnan(_4662) ? 1.0 : min(_4662, 1.0)))) / ((_3305 * _3305) * ((_3248 * 2.1991131305694580078125) + 3.141590118408203125))) * _3237;
                        _3090 = (_3252 * _3200.x) + _3158;
                        _3091 = (_3252 * _3200.y) + _3159;
                        _3092 = (_3252 * _3200.z) + _3160;
                        _3087 = (_3333 * _3217.x) + _3155;
                        _3088 = (_3333 * _3217.y) + _3156;
                        _3089 = (_3333 * _3217.z) + _3157;
                        if (_3162 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3155 = _3087;
                            _3156 = _3088;
                            _3157 = _3089;
                            _3158 = _3090;
                            _3159 = _3091;
                            _3160 = _3092;
                            _3161 = _3162;
                        }
                    }
                    frontier_phi_61_pred = _3087;
                    frontier_phi_61_pred_1 = _3092;
                    frontier_phi_61_pred_2 = _3091;
                    frontier_phi_61_pred_3 = _3090;
                    frontier_phi_61_pred_4 = _3089;
                    frontier_phi_61_pred_5 = _3088;
                }
                _2887 = frontier_phi_61_pred;
                _2897 = frontier_phi_61_pred_1;
                _2895 = frontier_phi_61_pred_2;
                _2893 = frontier_phi_61_pred_3;
                _2891 = frontier_phi_61_pred_4;
                _2889 = frontier_phi_61_pred_5;
                uint _3038 = _3037 + 1u;
                if (_3038 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3031 = _2887;
                    _3032 = _2889;
                    _3033 = _2891;
                    _3034 = _2893;
                    _3035 = _2895;
                    _3036 = _2897;
                    _3037 = _3038;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2886 = _2887;
            _2888 = _2889;
            _2890 = _2891;
            _2892 = _2893;
            _2894 = _2895;
            _2896 = _2897;
        }
        uvec4 _2900 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2901 = _2900.z;
        uint _2903 = (_2901 >> 8u) & 15u;
        float _2999;
        float _3001;
        float _3003;
        float _3005;
        float _3007;
        float _3009;
        if (((4294967295u << _2903) & _2785) == 0u)
        {
            _2999 = _2886;
            _3001 = _2888;
            _3003 = _2890;
            _3005 = _2892;
            _3007 = _2894;
            _3009 = _2896;
        }
        else
        {
            float _3024 = inversesqrt(dot(vec3(_2739, _2740, _2741), vec3(_2739, _2740, _2741)));
            float _3025 = _3024 * _2739;
            float _3026 = _3024 * _2740;
            float _3027 = _3024 * _2741;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2903 < ((_2901 >> 12u) & 15u))
            {
                float _3000;
                float _3002;
                float _3004;
                float _3006;
                float _3008;
                float _3010;
                float _3138 = _2886;
                float _3139 = _2888;
                float _3140 = _2890;
                float _3141 = _2892;
                float _3142 = _2894;
                float _3143 = _2896;
                uint _3144 = _2903;
                uint _3153;
                bool _3154;
                for (;;)
                {
                    _3153 = texelFetch(g_lightClassification, int((((_2779 << 5u) + (_2765 << 9u)) + (_3144 << 2u)) >> 2u)).x;
                    _3154 = _3153 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_3154)
                    {
                        frontier_phi_67_pred = _3141;
                        frontier_phi_67_pred_1 = _3142;
                        frontier_phi_67_pred_2 = _3143;
                        frontier_phi_67_pred_3 = _3140;
                        frontier_phi_67_pred_4 = _3139;
                        frontier_phi_67_pred_5 = _3138;
                    }
                    else
                    {
                        float _3338;
                        float _3339;
                        float _3340;
                        float _3341;
                        float _3342;
                        float _3343;
                        float _3631;
                        float _3632;
                        float _3633;
                        float _3634;
                        float _3635;
                        float _3636;
                        float _3351 = _3138;
                        float _3352 = _3139;
                        float _3353 = _3140;
                        float _3354 = _3141;
                        float _3355 = _3142;
                        float _3356 = _3143;
                        uint _3357 = _3153;
                        uint _3358;
                        vec4 _3383;
                        float _3384;
                        vec4 _3399;
                        vec3 _3411;
                        vec4 _3426;
                        vec4 _3441;
                        float _3487;
                        bool _3488;
                        for (;;)
                        {
                            uint _3368 = ((_3144 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3357));
                            _3358 = (_3357 + 4294967295u) & _3357;
                            uint _3370 = _3368 * 40u;
                            _3383 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3370)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3370 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3370 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3370 + 3u)).x));
                            _3384 = _3383.w;
                            uint _3386 = (_3368 * 40u) + 4u;
                            _3399 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3386)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3386 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3386 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3386 + 3u)).x));
                            uint _3401 = (_3368 * 40u) + 8u;
                            _3411 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3401)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3401 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3401 + 2u)).x));
                            uint _3413 = (_3368 * 40u) + 16u;
                            _3426 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3413)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3413 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3413 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3413 + 3u)).x));
                            uint _3428 = (_3368 * 40u) + 20u;
                            _3441 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3428)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3428 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3428 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3428 + 3u)).x));
                            uint _3443 = (_3368 * 40u) + 24u;
                            vec4 _3456 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3443)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3443 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3443 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3443 + 3u)).x));
                            uint _3462 = (_3368 * 40u) + 28u;
                            vec4 _3475 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3462)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3462 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3462 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3462 + 3u)).x));
                            _3487 = fma(_2741, _3475.z, fma(_2740, _3475.y, _3475.x * _2739)) + _3475.w;
                            _3488 = !((fma(_2741, _3456.z, fma(_2740, _3456.y, _3456.x * _2739)) + _3456.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3488)
                            {
                                float _3515 = _3383.x - _2739;
                                float _3516 = _3383.y - _2740;
                                float _3517 = _3383.z - _2741;
                                float _3518 = dot(vec3(_3515, _3516, _3517), vec3(_3515, _3516, _3517));
                                float _3521 = inversesqrt(_3518);
                                float _3522 = _3521 * _3515;
                                float _3523 = _3521 * _3516;
                                float _3524 = _3521 * _3517;
                                float _3528 = 1.0 - (_3518 / (_3384 * _3384));
                                float _4673 = isnan(0.0) ? _3528 : (isnan(_3528) ? 0.0 : max(_3528, 0.0));
                                float _3529 = isnan(1.0) ? _4673 : (isnan(_4673) ? 1.0 : min(_4673, 1.0));
                                float _3533 = sqrt(_3518) * _3399.w;
                                float _3535 = 1.39999997615814208984375 / (_3533 + 1.39999997615814208984375);
                                float _3536 = _3535 * _3535;
                                float _3539 = ((1.0 - _3536) * dot(vec3(_3522, _3523, _3524), vec3(_1045, _1048, _1051))) + _3536;
                                float _3542 = _3533 * _3533;
                                float _3546 = (fma(_2741, _3426.z, fma(_2740, _3426.y, _3426.x * _2739)) + _3426.w) / _3487;
                                float _3547 = (fma(_2741, _3441.z, fma(_2740, _3441.y, _3441.x * _2739)) + _3441.w) / _3487;
                                float _3551 = 1.0 - dot(vec2(_3546, _3547), vec2(_3546, _3547));
                                float _4689 = isnan(0.0) ? _3551 : (isnan(_3551) ? 0.0 : max(_3551, 0.0));
                                float _3552 = isnan(1.0) ? _4689 : (isnan(_4689) ? 1.0 : min(_4689, 1.0));
                                float _3553 = _3552 * (((isnan(0.0) ? _3539 : (isnan(_3539) ? 0.0 : max(_3539, 0.0))) * _3529) / ((_3542 * 0.699999988079071044921875) + 1.0));
                                float _3565 = exp2(log2(1.0 / ((_3542 * 3.5) + 5.0)) * 0.25);
                                float _3566 = 1.0 - _1105;
                                float _3573 = sqrt(1.0 - ((1.0 - (_3566 * _3566)) * (1.0 - (_3565 * _3565))));
                                float _3574 = _3573 * _3573;
                                float _3575 = _3574 * _3574;
                                float _3576 = _3522 - _3025;
                                float _3577 = _3523 - _3026;
                                float _3578 = _3524 - _3027;
                                float _3582 = inversesqrt(dot(vec3(_3576, _3577, _3578), vec3(_3576, _3577, _3578)));
                                float _3586 = dot(vec3(_1045, _1048, _1051), vec3((-0.0) - _3025, (-0.0) - _3026, (-0.0) - _3027));
                                float _4700 = isnan(0.0) ? _3586 : (isnan(_3586) ? 0.0 : max(_3586, 0.0));
                                float _3589 = isnan(1.0) ? _4700 : (isnan(_4700) ? 1.0 : min(_4700, 1.0));
                                float _3590 = dot(vec3(_1045, _1048, _1051), vec3(_3582 * _3576, _3582 * _3577, _3582 * _3578));
                                float _4711 = isnan(0.0) ? _3590 : (isnan(_3590) ? 0.0 : max(_3590, 0.0));
                                float _3593 = isnan(1.0) ? _4711 : (isnan(_4711) ? 1.0 : min(_4711, 1.0));
                                float _3597 = ((_3593 * _3593) * (_3575 + (-1.0))) + 1.0;
                                float _3598 = _3535 * _3574;
                                float _3599 = _3598 * _3598;
                                float _3605 = ((1.0 - _3599) * dot(vec3(_1045, _1048, _1051), vec3(_3522, _3523, _3524))) + _3599;
                                float _4722 = isnan(0.0) ? _3605 : (isnan(_3605) ? 0.0 : max(_3605, 0.0));
                                float _3606 = isnan(1.0) ? _4722 : (isnan(_4722) ? 1.0 : min(_4722, 1.0));
                                float _3607 = 1.0 - _3574;
                                float _3617 = (0.5 / (((_3606 * ((_3589 * _3607) + _3574)) + 9.9999999392252902907785028219223e-09) + (((_3606 * _3607) + _3574) * _3589))) * _3606;
                                float _4733 = isnan(0.0) ? _3617 : (isnan(_3617) ? 0.0 : max(_3617, 0.0));
                                float _3627 = (_3552 * _3529) * (((_3575 * 3.1415927410125732421875) * (isnan(1.0) ? _4733 : (isnan(_4733) ? 1.0 : min(_4733, 1.0)))) / ((_3597 * _3597) * ((_3542 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3627 * _3411.x;
                                frontier_phi_73_pred_1 = _3627 * _3411.y;
                                frontier_phi_73_pred_2 = _3553 * _3399.z;
                                frontier_phi_73_pred_3 = _3553 * _3399.y;
                                frontier_phi_73_pred_4 = _3553 * _3399.x;
                                frontier_phi_73_pred_5 = _3627 * _3411.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3631 = frontier_phi_73_pred;
                            _3632 = frontier_phi_73_pred_1;
                            _3636 = frontier_phi_73_pred_2;
                            _3635 = frontier_phi_73_pred_3;
                            _3634 = frontier_phi_73_pred_4;
                            _3633 = frontier_phi_73_pred_5;
                            _3341 = _3634 + _3354;
                            _3342 = _3635 + _3355;
                            _3343 = _3636 + _3356;
                            _3338 = _3631 + _3351;
                            _3339 = _3632 + _3352;
                            _3340 = _3633 + _3353;
                            if (_3358 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3351 = _3338;
                                _3352 = _3339;
                                _3353 = _3340;
                                _3354 = _3341;
                                _3355 = _3342;
                                _3356 = _3343;
                                _3357 = _3358;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3341;
                        frontier_phi_67_pred_1 = _3342;
                        frontier_phi_67_pred_2 = _3343;
                        frontier_phi_67_pred_3 = _3340;
                        frontier_phi_67_pred_4 = _3339;
                        frontier_phi_67_pred_5 = _3338;
                    }
                    _3006 = frontier_phi_67_pred;
                    _3008 = frontier_phi_67_pred_1;
                    _3010 = frontier_phi_67_pred_2;
                    _3004 = frontier_phi_67_pred_3;
                    _3002 = frontier_phi_67_pred_4;
                    _3000 = frontier_phi_67_pred_5;
                    uint _3145 = _3144 + 1u;
                    if (_3145 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3138 = _3000;
                        _3139 = _3002;
                        _3140 = _3004;
                        _3141 = _3006;
                        _3142 = _3008;
                        _3143 = _3010;
                        _3144 = _3145;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _3008;
                frontier_phi_55_56_ladder_1 = _3010;
                frontier_phi_55_56_ladder_2 = _3006;
                frontier_phi_55_56_ladder_3 = _3004;
                frontier_phi_55_56_ladder_4 = _3002;
                frontier_phi_55_56_ladder_5 = _3000;
            }
            else
            {
                frontier_phi_55_56_ladder = _2894;
                frontier_phi_55_56_ladder_1 = _2896;
                frontier_phi_55_56_ladder_2 = _2892;
                frontier_phi_55_56_ladder_3 = _2890;
                frontier_phi_55_56_ladder_4 = _2888;
                frontier_phi_55_56_ladder_5 = _2886;
            }
            _2999 = frontier_phi_55_56_ladder_5;
            _3001 = frontier_phi_55_56_ladder_4;
            _3003 = frontier_phi_55_56_ladder_3;
            _3005 = frontier_phi_55_56_ladder_2;
            _3007 = frontier_phi_55_56_ladder;
            _3009 = frontier_phi_55_56_ladder_1;
        }
        float _3014 = isnan(1.0) ? _1089 : (isnan(_1089) ? 1.0 : min(_1089, 1.0));
        _2798 = (_3014 * _3005) + _2253;
        _2800 = (_3014 * _3007) + _2255;
        _2802 = (_3014 * _3009) + _2257;
        _2804 = ((_2999 * 0.039999999105930328369140625) * _3014) + _2583;
        _2806 = ((_3001 * 0.039999999105930328369140625) * _3014) + _2585;
        _2808 = ((_3003 * 0.039999999105930328369140625) * _3014) + _2587;
    }
    else
    {
        _2798 = _2253;
        _2800 = _2255;
        _2802 = _2257;
        _2804 = _2583;
        _2806 = _2585;
        _2808 = _2587;
    }
    float _4749 = isnan(0.0) ? _1074 : (isnan(_1074) ? 0.0 : max(_1074, 0.0));
    float _4760 = isnan(0.0) ? _1075 : (isnan(_1075) ? 0.0 : max(_1075, 0.0));
    float _4771 = isnan(0.0) ? _1076 : (isnan(_1076) ? 0.0 : max(_1076, 0.0));
    uint _2828 = _283 + 6u;
    float _2836 = _1026 / cbSceneParam._m0[86u].x;
    float _2837 = _1027 / cbSceneParam._m0[86u].y;
    vec4 _2851 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2836, _2837, (log2((isnan(cbSceneParam._m0[77u].w) ? _961 : (isnan(_961) ? cbSceneParam._m0[77u].w : min(_961, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2853 = _2851.x;
    float _2854 = _2851.y;
    float _2855 = _2851.z;
    float _2856 = _2851.w;
    float _2949;
    float _2951;
    float _2953;
    float _2955;
    if (_961 > cbSceneParam._m0[78u].w)
    {
        float _2911 = isnan(_961) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _961 : min(cbSceneParam._m0[80u].w, _961));
        float _2912 = _2911 / _961;
        float _2923 = _2912 * _1011;
        float _2924 = _1012 * _2912;
        float _2925 = (-0.0) - _2924;
        float _2927 = _2912 * _1013;
        float _2929 = (cbSceneParam._m0[77u].w * _2925) / _2911;
        float _2930 = _2929 + cbSceneParam._m0[79u].w;
        float _2931 = cbSceneParam._m0[79u].w - _2924;
        float _2937 = sqrt(((_2923 * _2923) + (_2924 * _2924)) + (_2927 * _2927));
        float _2940 = (1.0 - (cbSceneParam._m0[77u].w / _2911)) * _2937;
        float _2945 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2947 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3100;
        if (abs((_2925 - _2929) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3100 = ((((_2930 > 0.0) ? exp2(_2945 * _2930) : (2.0 - exp2(_2947 * _2930))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2940;
        }
        else
        {
            float _3060 = 1.0 / cbSceneParam._m0[80u].x;
            float _3061 = isnan(_2931) ? _2930 : (isnan(_2930) ? _2931 : max(_2930, _2931));
            float _3062 = isnan(_2931) ? _2930 : (isnan(_2930) ? _2931 : min(_2930, _2931));
            float _3071 = isnan(0.0) ? _3061 : (isnan(_3061) ? 0.0 : min(_3061, 0.0));
            float _3072 = isnan(0.0) ? _3062 : (isnan(_3062) ? 0.0 : min(_3062, 0.0));
            _3100 = ((abs(_2937 / _2925) * cbSceneParam._m0[80u].y) * ((((_3071 - _3072) * 2.0) - ((exp2(_2945 * (isnan(0.0) ? _3061 : (isnan(_3061) ? 0.0 : max(_3061, 0.0)))) - exp2(_2945 * (isnan(0.0) ? _3062 : (isnan(_3062) ? 0.0 : max(_3062, 0.0))))) * _3060)) - ((exp2(_2947 * _3071) - exp2(_2947 * _3072)) * _3060))) + (_2940 * cbSceneParam._m0[80u].z);
        }
        vec4 _3102 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2836, _2837, 1.0), 0.0);
        float _3111 = exp2((_3100 * (-1.44269502162933349609375)) * (1.0 - _3102.w));
        float _3112 = log2(_3111);
        float _3128 = log2(_2856);
        _2949 = (exp2(_3128 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3112 * cbSceneParam._m0[78u].x)) * _3102.x) / cbSceneParam._m0[78u].x)) + _2853;
        _2951 = (exp2(_3128 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3112 * cbSceneParam._m0[78u].y)) * _3102.y) / cbSceneParam._m0[78u].y)) + _2854;
        _2953 = (exp2(_3128 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3112 * cbSceneParam._m0[78u].z)) * _3102.z) / cbSceneParam._m0[78u].z)) + _2855;
        _2955 = _3111 * _2856;
    }
    else
    {
        _2949 = _2853;
        _2951 = _2854;
        _2953 = _2855;
        _2955 = _2856;
    }
    float _2967 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2968 = _2967 == 3.0;
    float _2969 = log2(_2955);
    float _2976 = exp2(_2969 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4749 : (isnan(_4749) ? 1.0 : min(_4749, 1.0))) * (_2798 + ((isnan(0.0) ? _1814 : (isnan(_1814) ? 0.0 : max(_1814, 0.0))) * _1089))) + ((_2804 + ((isnan(0.0) ? _2106 : (isnan(_2106) ? 0.0 : max(_2106, 0.0))) * _1893)) * cbPerFrame._m0[3u].x));
    float _2977 = exp2(_2969 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4760 : (isnan(_4760) ? 1.0 : min(_4760, 1.0))) * (_2800 + ((isnan(0.0) ? _1817 : (isnan(_1817) ? 0.0 : max(_1817, 0.0))) * _1089))) + ((_2806 + ((isnan(0.0) ? _2109 : (isnan(_2109) ? 0.0 : max(_2109, 0.0))) * _1893)) * cbPerFrame._m0[3u].x));
    float _2978 = exp2(_2969 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4771 : (isnan(_4771) ? 1.0 : min(_4771, 1.0))) * (_2802 + ((isnan(0.0) ? _1820 : (isnan(_1820) ? 0.0 : max(_1820, 0.0))) * _1089))) + ((_2808 + ((isnan(0.0) ? _2112 : (isnan(_2112) ? 0.0 : max(_2112, 0.0))) * _1893)) * cbPerFrame._m0[3u].x));
    float _2987 = (_2967 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2987 * (_2968 ? _2976 : (_2976 + (cbSceneParam._m0[72u].w * _2949)));
    SV_Target.y = _2987 * (_2968 ? _2977 : (_2977 + (cbSceneParam._m0[72u].w * _2951)));
    SV_Target.z = _2987 * (_2968 ? _2978 : (_2978 + (cbSceneParam._m0[72u].w * _2953)));
    SV_Target.w = cbInstanceData._m0[_2828].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2828].w;
}


