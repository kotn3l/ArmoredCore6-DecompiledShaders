#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_0;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 13) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_22;
layout(set = 0, binding = 14) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_10;
layout(set = 0, binding = 20) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_6;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1414;
float _4054;
float _4055;
float _4056;
float _4057;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _231 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _232 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _233 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _239 = inversesqrt(dot(vec3(_231, _232, _233), vec3(_231, _232, _233)));
    float _246 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _253 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _267 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _269 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _270 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _4066 = isnan(0.0) ? _267 : (isnan(_267) ? 0.0 : max(_267, 0.0));
    float _4077 = isnan(0.0) ? _269 : (isnan(_269) ? 0.0 : max(_269, 0.0));
    float _4088 = isnan(0.0) ? _270 : (isnan(_270) ? 0.0 : max(_270, 0.0));
    uint _280 = uint(roundEven(NORMAL.w)) * 13u;
    uint _285 = _280 + 1u;
    uint _289 = _280 + 2u;
    float _298 = sqrt(((cbInstanceData._m0[_285].x * cbInstanceData._m0[_285].x) + (cbInstanceData._m0[_280].x * cbInstanceData._m0[_280].x)) + (cbInstanceData._m0[_289].x * cbInstanceData._m0[_289].x));
    float _299 = _298 * TEXCOORD.z;
    float _300 = _298 * TEXCOORD.w;
    vec4 _313 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _299) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _300) + cbTextureTilingScale._m0[13u].w));
    vec4 _336 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _362 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _367 = _362.x * cbMtdParam._m0[11u].x;
    float _368 = _362.y * cbMtdParam._m0[11u].y;
    float _369 = _362.z * cbMtdParam._m0[11u].z;
    vec4 _388 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _299) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _300) + cbTextureTilingScale._m0[5u].w));
    vec4 _407 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _442 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _444 = _442.x;
    float _456 = dot(vec4(_444, _442.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _473 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _407.x) * 2.0) - ((((_444 - _456) * cbMtdParam._m0[24u].z) + _456) * cbMtdParam._m0[23u].x))) + 1.0;
    float _4099 = isnan(0.0) ? _473 : (isnan(_473) ? 0.0 : max(_473, 0.0));
    float _474 = isnan(1.0) ? _4099 : (isnan(_4099) ? 1.0 : min(_4099, 1.0));
    float _481 = (_474 * ((_388.x * cbMtdParam._m0[12u].x) - _367)) + _367;
    float _482 = (_474 * ((_388.y * cbMtdParam._m0[12u].y) - _368)) + _368;
    float _483 = (_474 * ((_388.z * cbMtdParam._m0[12u].z) - _369)) + _369;
    vec4 _500 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _299) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _300) + cbTextureTilingScale._m0[3u].w));
    vec4 _520 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _522 = _520.x;
    float _532 = dot(vec4(_522, _520.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _546 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _407.y) * 2.0) - ((((_522 - _532) * cbMtdParam._m0[24u].z) + _532) * cbMtdParam._m0[20u].w))) + 1.0;
    float _4110 = isnan(0.0) ? _546 : (isnan(_546) ? 0.0 : max(_546, 0.0));
    float _547 = isnan(1.0) ? _4110 : (isnan(_4110) ? 1.0 : min(_4110, 1.0));
    float _557 = (_336.x * cbMtdParam._m0[9u].x) * ((_547 * ((_500.x * cbMtdParam._m0[13u].x) - _481)) + _481);
    float _558 = (_336.y * cbMtdParam._m0[9u].y) * ((_547 * ((_500.y * cbMtdParam._m0[13u].y) - _482)) + _482);
    float _559 = (_336.z * cbMtdParam._m0[9u].z) * ((_547 * ((_500.z * cbMtdParam._m0[13u].z) - _483)) + _483);
    float _563 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _313.x) * _557;
    float _566 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _313.y) * _558;
    float _569 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _313.z) * _559;
    float _577 = (((_557 - _563) * (isnan(1.0) ? _4066 : (isnan(_4066) ? 1.0 : min(_4066, 1.0)))) + _563) * 4.55000019073486328125;
    float _579 = (((_558 - _566) * (isnan(1.0) ? _4077 : (isnan(_4077) ? 1.0 : min(_4077, 1.0)))) + _566) * 4.55000019073486328125;
    float _581 = (((_559 - _569) * (isnan(1.0) ? _4088 : (isnan(_4088) ? 1.0 : min(_4088, 1.0)))) + _569) * 4.55000019073486328125;
    vec4 _600 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _299) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _300) + cbTextureTilingScale._m0[14u].w));
    vec4 _619 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _299) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _300) + cbTextureTilingScale._m0[20u].w));
    vec4 _642 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _299) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _300) + cbTextureTilingScale._m0[4u].w));
    vec4 _659 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _661 = _659.x;
    float _662 = _659.y;
    float _663 = _659.z;
    float _670 = ((_642.x - _661) * _474) + _661;
    float _671 = ((_642.y - _662) * _474) + _662;
    float _672 = ((_642.z - _663) * _474) + _663;
    vec4 _684 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _299) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _300) + cbTextureTilingScale._m0[2u].w));
    float _697 = ((_684.z - _672) * _547) + _672;
    float _700 = ((((_684.x - _670) * _547) + _670) * 2.0) + (-1.0);
    float _701 = ((((_684.y - _671) * _547) + _671) * 2.0) + (-1.0);
    float _702 = dot(vec2(_700, _701), vec2(_700, _701));
    float _4121 = isnan(0.0) ? _702 : (isnan(_702) ? 0.0 : max(_702, 0.0));
    float _707 = sqrt(1.0 - (isnan(1.0) ? _4121 : (isnan(_4121) ? 1.0 : min(_4121, 1.0))));
    vec4 _721 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _746 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _299) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _300) + cbTextureTilingScale._m0[11u].w));
    float _748 = _746.x;
    float _749 = 1.0 - _748;
    float _762 = (TEXCOORD_8.w - ((cbMtdParam._m0[21u].z * (1.0 - TEXCOORD_8.w)) * ((((_748 - _749) * cbMtdParam._m0[24u].w) + _749) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[21u].w + 1.0);
    float _4132 = isnan(0.0) ? _762 : (isnan(_762) ? 0.0 : max(_762, 0.0));
    float _763 = isnan(1.0) ? _4132 : (isnan(_4132) ? 1.0 : min(_4132, 1.0));
    float _770 = (_763 * ((_600.x * cbMtdParam._m0[18u].x) - _577)) + _577;
    float _771 = (_763 * ((_600.y * cbMtdParam._m0[18u].y) - _579)) + _579;
    float _772 = (_763 * ((_600.z * cbMtdParam._m0[18u].z) - _581)) + _581;
    float _777 = (((_619.z - _697) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _697;
    float _781 = ((_721.z - _777) * cbMtdParam._m0[19u].w) + _777;
    vec4 _794 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _299) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _300) + cbTextureTilingScale._m0[15u].w));
    float _801 = (_794.x * 2.0) + (-1.0);
    float _802 = (_794.y * 2.0) + (-1.0);
    float _803 = dot(vec2(_801, _802), vec2(_801, _802));
    float _4143 = isnan(0.0) ? _803 : (isnan(_803) ? 0.0 : max(_803, 0.0));
    float _811 = (_763 * (_794.z - _781)) + _781;
    float _820 = (_700 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_619.x * 2.0) + (-1.0)))) + (((_721.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _821 = (_701 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_619.y * 2.0) + (-1.0)))) + (((_721.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _833 = (((_801 - _820) + (cbMtdParam._m0[21u].x * _820)) * _763) + _820;
    float _834 = (((_802 - _821) + (cbMtdParam._m0[21u].x * _821)) * _763) + _821;
    float _835 = (_763 * (sqrt(1.0 - (isnan(1.0) ? _4143 : (isnan(_4143) ? 1.0 : min(_4143, 1.0)))) - _707)) + _707;
    float _839 = cbMtdParam._m0[22u].x + _721.w;
    float _842 = fma(_835, _246 * NORMAL.x, fma(_834, _253 * TANGENT.x, (_239 * _231) * _833));
    float _845 = fma(_835, _246 * NORMAL.y, fma(_834, _253 * TANGENT.y, (_239 * _232) * _833));
    float _848 = fma(_835, _246 * NORMAL.z, fma(_834, _253 * TANGENT.z, (_239 * _233) * _833));
    float _852 = inversesqrt(dot(vec3(_842, _845, _848), vec3(_842, _845, _848)));
    float _853 = _852 * _842;
    float _854 = _852 * _845;
    float _855 = _852 * _848;
    float _4154 = isnan(0.0) ? _811 : (isnan(_811) ? 0.0 : max(_811, 0.0));
    float _856 = isnan(1.0) ? _4154 : (isnan(_4154) ? 1.0 : min(_4154, 1.0));
    float _4165 = isnan(0.0) ? _839 : (isnan(_839) ? 0.0 : max(_839, 0.0));
    float _4176 = isnan(0.0) ? _770 : (isnan(_770) ? 0.0 : max(_770, 0.0));
    float _4187 = isnan(0.0) ? _771 : (isnan(_771) ? 0.0 : max(_771, 0.0));
    float _4198 = isnan(0.0) ? _772 : (isnan(_772) ? 0.0 : max(_772, 0.0));
    float _874 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _915 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _925 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _915);
    float _926 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _915);
    float _927 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _915);
    float _931 = inversesqrt(dot(vec3(_925, _926, _927), vec3(_925, _926, _927)));
    float _932 = _925 * _931;
    float _933 = _926 * _931;
    float _934 = _927 * _931;
    vec4 _939 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _941 = _939.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1095 = sqrt(((_925 * _925) + (_926 * _926)) + (_927 * _927));
        float _1101 = (cbMatDynParam._m0[5u].x * _1095) + cbMatDynParam._m0[5u].y;
        float _4209 = isnan(0.0) ? _1101 : (isnan(_1101) ? 0.0 : max(_1101, 0.0));
        float _1102 = isnan(1.0) ? _4209 : (isnan(_4209) ? 1.0 : min(_4209, 1.0));
        float _1106 = (cbMatDynParam._m0[5u].z * _1095) + cbMatDynParam._m0[5u].w;
        float _4220 = isnan(0.0) ? _1106 : (isnan(_1106) ? 0.0 : max(_1106, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4220 : (isnan(_4220) ? 1.0 : min(_4220, 1.0))) - _1102)) + _1102) < ((_941 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _952 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _953 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _971 = fma(_855, cbSceneParam._m0[5u].z, fma(_854, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _853));
    float _974 = fma(_855, cbSceneParam._m0[6u].z, fma(_854, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _853));
    float _977 = fma(_855, cbSceneParam._m0[7u].z, fma(_854, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _853));
    uint _990 = _280 + 9u;
    uint _991 = _990 + uint(cbMatDynParam._m0[0u].w);
    float _997 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4176 : (isnan(_4176) ? 1.0 : min(_4176, 1.0)))) * cbInstanceData._m0[_991].x;
    float _998 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4187 : (isnan(_4187) ? 1.0 : min(_4187, 1.0)))) * cbInstanceData._m0[_991].y;
    float _999 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4198 : (isnan(_4198) ? 1.0 : min(_4198, 1.0)))) * cbInstanceData._m0[_991].z;
    float _4231 = isnan(0.0) ? _997 : (isnan(_997) ? 0.0 : max(_997, 0.0));
    float _1000 = isnan(1.0) ? _4231 : (isnan(_4231) ? 1.0 : min(_4231, 1.0));
    float _4242 = isnan(0.0) ? _998 : (isnan(_998) ? 0.0 : max(_998, 0.0));
    float _1001 = isnan(1.0) ? _4242 : (isnan(_4242) ? 1.0 : min(_4242, 1.0));
    float _4253 = isnan(0.0) ? _999 : (isnan(_999) ? 0.0 : max(_999, 0.0));
    float _1002 = isnan(1.0) ? _4253 : (isnan(_4253) ? 1.0 : min(_4253, 1.0));
    vec4 _1011 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _952, cbSceneParam._m0[86u].y * _953));
    float _1015 = ((isnan(1.0) ? _4165 : (isnan(_4165) ? 1.0 : min(_4165, 1.0))) * TEXCOORD_5.w) * _1011.x;
    float _1016 = dot(vec3(_853, _854, _855), vec3(_932, _933, _934));
    float _1019 = _1016 * 2.0;
    float _1023 = (_1019 * _853) - _932;
    float _1024 = (_1019 * _854) - _933;
    float _1025 = (_1019 * _855) - _934;
    float _1029 = abs(dot(vec3(_932, _933, _934), vec3(_853, _854, _855)));
    float _4264 = isnan(0.0) ? _1029 : (isnan(_1029) ? 0.0 : max(_1029, 0.0));
    float _1031 = sqrt(_856);
    float _1044 = exp2((_1031 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4264 : (isnan(_4264) ? 1.0 : min(_4264, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1031 * 3.0));
    float _1076 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1080 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1084 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1413;
    float _1415;
    float _1416;
    float _1417;
    float _1418;
    float _1419;
    float _1420;
    float _1421;
    float _1422;
    float _1423;
    float _1424;
    float _1425;
    float _1426;
    float _1427;
    float _1428;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1138 = fma(_1084, cbModelParam._m0[26u].z, fma(_1080, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1076));
        float _1142 = fma(_1084, cbModelParam._m0[27u].z, fma(_1080, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1076));
        float _1146 = fma(_1084, cbModelParam._m0[28u].z, fma(_1080, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1076));
        float _1171 = _1076 + _853;
        float _1172 = _1080 + _854;
        float _1173 = _1084 + _855;
        float _1183 = fma(_1173, cbModelParam._m0[26u].z, fma(_1172, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1171)) - _1138;
        float _1184 = fma(_1173, cbModelParam._m0[27u].z, fma(_1172, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1171)) - _1142;
        float _1185 = fma(_1173, cbModelParam._m0[28u].z, fma(_1172, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1171)) - _1146;
        float _1189 = inversesqrt(dot(vec3(_1183, _1184, _1185), vec3(_1183, _1184, _1185)));
        float _1202 = ((_1189 * _1183) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1138 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1203 = ((_1189 * _1184) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1142 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1204 = ((_1189 * _1185) / cbModelParam._m0[34u].z) + ((((((_1146 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1207 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1202, _1203, _1204), 0.0);
        vec4 _1214 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1202, _1203, _1204), 0.0);
        vec4 _1221 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1202, _1203, _1204), 0.0);
        vec4 _1228 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1202, _1203, _1204), 0.0);
        float _1241 = exp2((_1207.w + (-0.5)) * 20.0) * 2.0;
        float _1242 = _1241 * (_1207.x + (-0.5));
        float _1243 = _1241 * (_1207.y + (-0.5));
        float _1244 = _1241 * (_1207.z + (-0.5));
        float _1251 = exp2((_1214.w + (-0.5)) * 20.0) * 2.0;
        float _1252 = _1251 * (_1214.x + (-0.5));
        float _1253 = _1251 * (_1214.y + (-0.5));
        float _1254 = _1251 * (_1214.z + (-0.5));
        float _1261 = exp2((_1221.w + (-0.5)) * 20.0) * 2.0;
        float _1262 = _1261 * (_1221.x + (-0.5));
        float _1263 = _1261 * (_1221.y + (-0.5));
        float _1264 = _1261 * (_1221.z + (-0.5));
        float _1271 = exp2((_1228.w + (-0.5)) * 20.0) * 2.0;
        float _1272 = _1271 * (_1228.x + (-0.5));
        float _1273 = _1271 * (_1228.y + (-0.5));
        float _1274 = _1271 * (_1228.z + (-0.5));
        float _1275 = isnan(0.0) ? _1272 : (isnan(_1272) ? 0.0 : max(_1272, 0.0));
        float _1276 = isnan(0.0) ? _1273 : (isnan(_1273) ? 0.0 : max(_1273, 0.0));
        float _1277 = isnan(0.0) ? _1274 : (isnan(_1274) ? 0.0 : max(_1274, 0.0));
        float _1278 = _1242 * 0.5;
        float _1279 = _1252 * 0.5;
        float _1280 = _1262 * 0.5;
        float _1281 = dot(vec3(_1278, _1279, _1280), vec3(_1278, _1279, _1280));
        float _1286 = (_1281 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1281);
        float _1295 = (dot(vec3(_853, _854, _855), vec3(_1286 * _1278, _1286 * _1279, _1286 * _1280)) + 1.0) * 0.5;
        float _4290 = isnan(0.0) ? _1295 : (isnan(_1295) ? 0.0 : max(_1295, 0.0));
        float _1305 = sqrt(((_1279 * _1279) + (_1278 * _1278)) + (_1280 * _1280)) / (_1275 + 9.9999997473787516355514526367188e-06);
        float _4301 = isnan(0.0) ? _1305 : (isnan(_1305) ? 0.0 : max(_1305, 0.0));
        float _1306 = isnan(1.0) ? _4301 : (isnan(_4301) ? 1.0 : min(_4301, 1.0));
        float _1307 = _1306 * 2.0;
        float _1311 = (1.0 - _1306) / (_1306 + 1.0);
        float _4312 = isnan(0.0) ? _1311 : (isnan(_1311) ? 0.0 : max(_1311, 0.0));
        float _1312 = isnan(1.0) ? _4312 : (isnan(_4312) ? 1.0 : min(_4312, 1.0));
        float _1321 = ((((1.0 - _1312) * (_1307 + 2.0)) * exp2(log2(isnan(1.0) ? _4290 : (isnan(_4290) ? 1.0 : min(_4290, 1.0))) * (_1307 + 1.0))) + _1312) * _1275;
        float _1322 = _1243 * 0.5;
        float _1323 = _1253 * 0.5;
        float _1324 = _1263 * 0.5;
        float _1325 = dot(vec3(_1322, _1323, _1324), vec3(_1322, _1323, _1324));
        float _1330 = (_1325 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1325);
        float _1338 = (dot(vec3(_853, _854, _855), vec3(_1330 * _1322, _1330 * _1323, _1330 * _1324)) + 1.0) * 0.5;
        float _4323 = isnan(0.0) ? _1338 : (isnan(_1338) ? 0.0 : max(_1338, 0.0));
        float _1347 = sqrt(((_1323 * _1323) + (_1322 * _1322)) + (_1324 * _1324)) / (_1276 + 9.9999997473787516355514526367188e-06);
        float _4334 = isnan(0.0) ? _1347 : (isnan(_1347) ? 0.0 : max(_1347, 0.0));
        float _1348 = isnan(1.0) ? _4334 : (isnan(_4334) ? 1.0 : min(_4334, 1.0));
        float _1349 = _1348 * 2.0;
        float _1353 = (1.0 - _1348) / (_1348 + 1.0);
        float _4345 = isnan(0.0) ? _1353 : (isnan(_1353) ? 0.0 : max(_1353, 0.0));
        float _1354 = isnan(1.0) ? _4345 : (isnan(_4345) ? 1.0 : min(_4345, 1.0));
        float _1363 = ((((1.0 - _1354) * (_1349 + 2.0)) * exp2(log2(isnan(1.0) ? _4323 : (isnan(_4323) ? 1.0 : min(_4323, 1.0))) * (_1349 + 1.0))) + _1354) * _1276;
        float _1364 = _1244 * 0.5;
        float _1365 = _1254 * 0.5;
        float _1366 = _1264 * 0.5;
        float _1367 = dot(vec3(_1364, _1365, _1366), vec3(_1364, _1365, _1366));
        float _1372 = (_1367 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1367);
        float _1380 = (dot(vec3(_853, _854, _855), vec3(_1372 * _1364, _1372 * _1365, _1372 * _1366)) + 1.0) * 0.5;
        float _4356 = isnan(0.0) ? _1380 : (isnan(_1380) ? 0.0 : max(_1380, 0.0));
        float _1389 = sqrt(((_1365 * _1365) + (_1364 * _1364)) + (_1366 * _1366)) / (_1277 + 9.9999997473787516355514526367188e-06);
        float _4367 = isnan(0.0) ? _1389 : (isnan(_1389) ? 0.0 : max(_1389, 0.0));
        float _1390 = isnan(1.0) ? _4367 : (isnan(_4367) ? 1.0 : min(_4367, 1.0));
        float _1391 = _1390 * 2.0;
        float _1395 = (1.0 - _1390) / (_1390 + 1.0);
        float _4378 = isnan(0.0) ? _1395 : (isnan(_1395) ? 0.0 : max(_1395, 0.0));
        float _1396 = isnan(1.0) ? _4378 : (isnan(_4378) ? 1.0 : min(_4378, 1.0));
        float _1405 = ((((1.0 - _1396) * (_1391 + 2.0)) * exp2(log2(isnan(1.0) ? _4356 : (isnan(_4356) ? 1.0 : min(_4356, 1.0))) * (_1391 + 1.0))) + _1396) * _1277;
        _1413 = _1244;
        _1415 = _1243;
        _1416 = _1242;
        _1417 = _1254;
        _1418 = _1253;
        _1419 = _1252;
        _1420 = _1264;
        _1421 = _1263;
        _1422 = _1262;
        _1423 = _1277;
        _1424 = _1276;
        _1425 = _1275;
        _1426 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1321 : (isnan(_1321) ? 0.0 : max(_1321, 0.0)));
        _1427 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1363 : (isnan(_1363) ? 0.0 : max(_1363, 0.0)));
        _1428 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1405 : (isnan(_1405) ? 0.0 : max(_1405, 0.0)));
    }
    else
    {
        _1413 = _1414;
        _1415 = _1414;
        _1416 = _1414;
        _1417 = _1414;
        _1418 = _1414;
        _1419 = _1414;
        _1420 = _1414;
        _1421 = _1414;
        _1422 = _1414;
        _1423 = _1414;
        _1424 = _1414;
        _1425 = _1414;
        _1426 = 0.0;
        _1427 = 0.0;
        _1428 = 0.0;
    }
    float _1724;
    float _1725;
    float _1726;
    float _1727;
    float _1728;
    float _1729;
    float _1730;
    float _1731;
    float _1732;
    float _1733;
    float _1734;
    float _1735;
    float _1736;
    float _1737;
    float _1738;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1455 = fma(_1084, cbModelParam._m0[30u].z, fma(_1080, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1076));
        float _1459 = fma(_1084, cbModelParam._m0[31u].z, fma(_1080, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1076));
        float _1463 = fma(_1084, cbModelParam._m0[32u].z, fma(_1080, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1076));
        float _1486 = _1076 + _853;
        float _1487 = _1080 + _854;
        float _1488 = _1084 + _855;
        float _1498 = fma(_1488, cbModelParam._m0[30u].z, fma(_1487, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1486)) - _1455;
        float _1499 = fma(_1488, cbModelParam._m0[31u].z, fma(_1487, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1486)) - _1459;
        float _1500 = fma(_1488, cbModelParam._m0[32u].z, fma(_1487, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1486)) - _1463;
        float _1504 = inversesqrt(dot(vec3(_1498, _1499, _1500), vec3(_1498, _1499, _1500)));
        float _1517 = ((_1504 * _1498) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1455 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1518 = ((_1504 * _1499) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1459 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1519 = ((_1504 * _1500) / cbModelParam._m0[35u].z) + ((((((_1463 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1521 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1517, _1518, _1519), 0.0);
        vec4 _1528 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1517, _1518, _1519), 0.0);
        vec4 _1535 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1517, _1518, _1519), 0.0);
        vec4 _1542 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1517, _1518, _1519), 0.0);
        float _1554 = exp2((_1521.w + (-0.5)) * 20.0) * 2.0;
        float _1555 = _1554 * (_1521.x + (-0.5));
        float _1556 = _1554 * (_1521.y + (-0.5));
        float _1557 = _1554 * (_1521.z + (-0.5));
        float _1564 = exp2((_1528.w + (-0.5)) * 20.0) * 2.0;
        float _1565 = _1564 * (_1528.x + (-0.5));
        float _1566 = _1564 * (_1528.y + (-0.5));
        float _1567 = _1564 * (_1528.z + (-0.5));
        float _1574 = exp2((_1535.w + (-0.5)) * 20.0) * 2.0;
        float _1575 = _1574 * (_1535.x + (-0.5));
        float _1576 = _1574 * (_1535.y + (-0.5));
        float _1577 = _1574 * (_1535.z + (-0.5));
        float _1584 = exp2((_1542.w + (-0.5)) * 20.0) * 2.0;
        float _1585 = _1584 * (_1542.x + (-0.5));
        float _1586 = _1584 * (_1542.y + (-0.5));
        float _1587 = _1584 * (_1542.z + (-0.5));
        float _1588 = isnan(0.0) ? _1585 : (isnan(_1585) ? 0.0 : max(_1585, 0.0));
        float _1589 = isnan(0.0) ? _1586 : (isnan(_1586) ? 0.0 : max(_1586, 0.0));
        float _1590 = isnan(0.0) ? _1587 : (isnan(_1587) ? 0.0 : max(_1587, 0.0));
        float _1591 = _1555 * 0.5;
        float _1592 = _1565 * 0.5;
        float _1593 = _1575 * 0.5;
        float _1594 = dot(vec3(_1591, _1592, _1593), vec3(_1591, _1592, _1593));
        float _1599 = (_1594 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1594);
        float _1607 = (dot(vec3(_853, _854, _855), vec3(_1599 * _1591, _1599 * _1592, _1599 * _1593)) + 1.0) * 0.5;
        float _4419 = isnan(0.0) ? _1607 : (isnan(_1607) ? 0.0 : max(_1607, 0.0));
        float _1616 = sqrt(((_1592 * _1592) + (_1591 * _1591)) + (_1593 * _1593)) / (_1588 + 9.9999997473787516355514526367188e-06);
        float _4430 = isnan(0.0) ? _1616 : (isnan(_1616) ? 0.0 : max(_1616, 0.0));
        float _1617 = isnan(1.0) ? _4430 : (isnan(_4430) ? 1.0 : min(_4430, 1.0));
        float _1618 = _1617 * 2.0;
        float _1622 = (1.0 - _1617) / (_1617 + 1.0);
        float _4441 = isnan(0.0) ? _1622 : (isnan(_1622) ? 0.0 : max(_1622, 0.0));
        float _1623 = isnan(1.0) ? _4441 : (isnan(_4441) ? 1.0 : min(_4441, 1.0));
        float _1632 = ((((1.0 - _1623) * (_1618 + 2.0)) * exp2(log2(isnan(1.0) ? _4419 : (isnan(_4419) ? 1.0 : min(_4419, 1.0))) * (_1618 + 1.0))) + _1623) * _1588;
        float _1633 = _1556 * 0.5;
        float _1634 = _1566 * 0.5;
        float _1635 = _1576 * 0.5;
        float _1636 = dot(vec3(_1633, _1634, _1635), vec3(_1633, _1634, _1635));
        float _1641 = (_1636 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1636);
        float _1649 = (dot(vec3(_853, _854, _855), vec3(_1641 * _1633, _1641 * _1634, _1641 * _1635)) + 1.0) * 0.5;
        float _4452 = isnan(0.0) ? _1649 : (isnan(_1649) ? 0.0 : max(_1649, 0.0));
        float _1658 = sqrt(((_1634 * _1634) + (_1633 * _1633)) + (_1635 * _1635)) / (_1589 + 9.9999997473787516355514526367188e-06);
        float _4463 = isnan(0.0) ? _1658 : (isnan(_1658) ? 0.0 : max(_1658, 0.0));
        float _1659 = isnan(1.0) ? _4463 : (isnan(_4463) ? 1.0 : min(_4463, 1.0));
        float _1660 = _1659 * 2.0;
        float _1664 = (1.0 - _1659) / (_1659 + 1.0);
        float _4474 = isnan(0.0) ? _1664 : (isnan(_1664) ? 0.0 : max(_1664, 0.0));
        float _1665 = isnan(1.0) ? _4474 : (isnan(_4474) ? 1.0 : min(_4474, 1.0));
        float _1674 = ((((1.0 - _1665) * (_1660 + 2.0)) * exp2(log2(isnan(1.0) ? _4452 : (isnan(_4452) ? 1.0 : min(_4452, 1.0))) * (_1660 + 1.0))) + _1665) * _1589;
        float _1675 = _1557 * 0.5;
        float _1676 = _1567 * 0.5;
        float _1677 = _1577 * 0.5;
        float _1678 = dot(vec3(_1675, _1676, _1677), vec3(_1675, _1676, _1677));
        float _1683 = (_1678 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1678);
        float _1691 = (dot(vec3(_853, _854, _855), vec3(_1683 * _1675, _1683 * _1676, _1683 * _1677)) + 1.0) * 0.5;
        float _4485 = isnan(0.0) ? _1691 : (isnan(_1691) ? 0.0 : max(_1691, 0.0));
        float _1700 = sqrt(((_1676 * _1676) + (_1675 * _1675)) + (_1677 * _1677)) / (_1590 + 9.9999997473787516355514526367188e-06);
        float _4496 = isnan(0.0) ? _1700 : (isnan(_1700) ? 0.0 : max(_1700, 0.0));
        float _1701 = isnan(1.0) ? _4496 : (isnan(_4496) ? 1.0 : min(_4496, 1.0));
        float _1702 = _1701 * 2.0;
        float _1706 = (1.0 - _1701) / (_1701 + 1.0);
        float _4507 = isnan(0.0) ? _1706 : (isnan(_1706) ? 0.0 : max(_1706, 0.0));
        float _1707 = isnan(1.0) ? _4507 : (isnan(_4507) ? 1.0 : min(_4507, 1.0));
        float _1716 = ((((1.0 - _1707) * (_1702 + 2.0)) * exp2(log2(isnan(1.0) ? _4485 : (isnan(_4485) ? 1.0 : min(_4485, 1.0))) * (_1702 + 1.0))) + _1707) * _1590;
        _1724 = _1557;
        _1725 = _1556;
        _1726 = _1555;
        _1727 = _1567;
        _1728 = _1566;
        _1729 = _1565;
        _1730 = _1577;
        _1731 = _1576;
        _1732 = _1575;
        _1733 = _1590;
        _1734 = _1589;
        _1735 = _1588;
        _1736 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1632 : (isnan(_1632) ? 0.0 : max(_1632, 0.0)));
        _1737 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1674 : (isnan(_1674) ? 0.0 : max(_1674, 0.0)));
        _1738 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1716 : (isnan(_1716) ? 0.0 : max(_1716, 0.0)));
    }
    else
    {
        _1724 = _1414;
        _1725 = _1414;
        _1726 = _1414;
        _1727 = _1414;
        _1728 = _1414;
        _1729 = _1414;
        _1730 = _1414;
        _1731 = _1414;
        _1732 = _1414;
        _1733 = _1414;
        _1734 = _1414;
        _1735 = _1414;
        _1736 = 0.0;
        _1737 = 0.0;
        _1738 = 0.0;
    }
    float _1748 = (cbModelParam._m0[1u].x * (_1736 - _1426)) + _1426;
    float _1749 = (cbModelParam._m0[1u].x * (_1737 - _1427)) + _1427;
    float _1750 = (cbModelParam._m0[1u].x * (_1738 - _1428)) + _1428;
    float _1771 = fma(_1750, cbSceneParam._m0[89u].z, fma(_1749, cbSceneParam._m0[89u].y, _1748 * cbSceneParam._m0[89u].x));
    float _1774 = fma(_1750, cbSceneParam._m0[90u].z, fma(_1749, cbSceneParam._m0[90u].y, _1748 * cbSceneParam._m0[90u].x));
    float _1777 = fma(_1750, cbSceneParam._m0[91u].z, fma(_1749, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1748));
    float _1792 = _1023 * 0.5;
    float _1793 = _1024 * 0.5;
    float _1794 = _1025 * 0.5;
    float _1795 = dot(vec4(_1792, _1793, _1794, 1.0), vec4(_1726, _1729, _1732, _1735));
    float _1798 = dot(vec4(_1792, _1793, _1794, 1.0), vec4(_1725, _1728, _1731, _1734));
    float _1801 = dot(vec4(_1792, _1793, _1794, 1.0), vec4(_1724, _1727, _1730, _1733));
    float _1835;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1808 = dot(vec4(_1792, _1793, _1794, 1.0), vec4(_1413, _1417, _1420, _1423));
        float _1812 = dot(vec4(_1792, _1793, _1794, 1.0), vec4(_1415, _1418, _1421, _1424));
        float _1816 = dot(vec4(_1792, _1793, _1794, 1.0), vec4(_1416, _1419, _1422, _1425));
        float _1823 = dot(vec4(cbModelParam._m0[39u]), vec4(_1792, _1793, _1794, 1.0));
        _1835 = dot(vec3(isnan(0.0) ? _1816 : (isnan(_1816) ? 0.0 : max(_1816, 0.0)), isnan(0.0) ? _1812 : (isnan(_1812) ? 0.0 : max(_1812, 0.0)), isnan(0.0) ? _1808 : (isnan(_1808) ? 0.0 : max(_1808, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1823) ? 0.0 : (isnan(0.0) ? _1823 : max(0.0, _1823))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1835 = 1.0;
    }
    float _1846;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1837 = dot(vec4(cbModelParam._m0[40u]), vec4(_1792, _1793, _1794, 1.0));
        _1846 = dot(vec3(isnan(0.0) ? _1795 : (isnan(_1795) ? 0.0 : max(_1795, 0.0)), isnan(0.0) ? _1798 : (isnan(_1798) ? 0.0 : max(_1798, 0.0)), isnan(0.0) ? _1801 : (isnan(_1801) ? 0.0 : max(_1801, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1837) ? 0.0 : (isnan(0.0) ? _1837 : max(0.0, _1837))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1846 = 1.0;
    }
    float _1850 = (_1846 * cbModelParam._m0[1u].x) + (_1835 * (1.0 - cbModelParam._m0[1u].x));
    float _1860 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _856);
    float _1861 = isnan(_1860) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1860 : min(cbModelParam._m0[25u].z, _1860));
    float _1941;
    float _1943;
    float _1945;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1908 = fma(_1084, cbModelParam._m0[13u].z, fma(_1080, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1076)) + cbModelParam._m0[13u].w;
        float _1912 = fma(_1084, cbModelParam._m0[14u].z, fma(_1080, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1076)) + cbModelParam._m0[14u].w;
        float _1916 = fma(_1084, cbModelParam._m0[15u].z, fma(_1080, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1076)) + cbModelParam._m0[15u].w;
        float _1919 = fma(_1025, cbModelParam._m0[13u].z, fma(_1024, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1023));
        float _1922 = fma(_1025, cbModelParam._m0[14u].z, fma(_1024, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1023));
        float _1925 = fma(_1025, cbModelParam._m0[15u].z, fma(_1024, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1023));
        float _1953;
        if (_1919 > 0.0)
        {
            _1953 = abs((1.0 - _1908) / _1919);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1919 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1908 + 1.0) / _1919);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1953 = frontier_phi_17_15_ladder;
        }
        float _2122;
        if (_1922 > 0.0)
        {
            _2122 = abs((1.0 - _1912) / _1922);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1922 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1912 + 1.0) / _1922);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2122 = frontier_phi_26_22_ladder;
        }
        float _2417;
        if (_1925 > 0.0)
        {
            _2417 = abs((1.0 - _1916) / _1925);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1925 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1916 + 1.0) / _1925);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2417 = frontier_phi_38_33_ladder;
        }
        float _2419 = isnan(_2122) ? _1953 : (isnan(_1953) ? _2122 : min(_1953, _2122));
        float _2420 = isnan(_2417) ? _2419 : (isnan(_2419) ? _2417 : min(_2419, _2417));
        float _2424 = (_2420 * _1919) + _1908;
        float _2425 = (_2420 * _1922) + _1912;
        float _2426 = (_2420 * _1925) + _1916;
        float _2427 = _2420 * 9.9999997473787516355514526367188e-05;
        float _2429 = (-1.0) - _2427;
        float _2431 = _2427 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2426 > _2431) || ((_2426 < _2429) || ((_2425 > _2431) || ((_2425 < _2429) || ((_2424 < _2429) || (_2424 > _2431))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2571 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2426, cbModelParam._m0[9u].z, fma(_2425, cbModelParam._m0[9u].y, _2424 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2426, cbModelParam._m0[10u].z, fma(_2425, cbModelParam._m0[10u].y, _2424 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2426, cbModelParam._m0[11u].z, fma(_2425, cbModelParam._m0[11u].y, _2424 * cbModelParam._m0[11u].x))), _1861);
            frontier_phi_16_38_ladder = _2571.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2571.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2571.x * cbModelParam._m0[1u].y;
        }
        _1941 = frontier_phi_16_38_ladder_2;
        _1943 = frontier_phi_16_38_ladder_1;
        _1945 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1929 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1023, _1024, _1025), _1861);
        _1941 = _1929.x * cbModelParam._m0[1u].y;
        _1943 = _1929.y * cbModelParam._m0[1u].y;
        _1945 = _1929.z * cbModelParam._m0[1u].y;
    }
    float _1949 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _856);
    float _1950 = isnan(_1949) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1949 : min(cbModelParam._m0[25u].w, _1949));
    float _2039;
    float _2041;
    float _2043;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2003 = fma(_1084, cbModelParam._m0[21u].z, fma(_1080, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1076)) + cbModelParam._m0[21u].w;
        float _2007 = fma(_1084, cbModelParam._m0[22u].z, fma(_1080, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1076)) + cbModelParam._m0[22u].w;
        float _2011 = fma(_1084, cbModelParam._m0[23u].z, fma(_1080, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1076)) + cbModelParam._m0[23u].w;
        float _2014 = fma(_1025, cbModelParam._m0[21u].z, fma(_1024, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1023));
        float _2017 = fma(_1025, cbModelParam._m0[22u].z, fma(_1024, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1023));
        float _2020 = fma(_1025, cbModelParam._m0[23u].z, fma(_1024, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1023));
        float _2127;
        if (_2014 > 0.0)
        {
            _2127 = abs((1.0 - _2003) / _2014);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_2014 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_2003 + 1.0) / _2014);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2127 = frontier_phi_28_24_ladder;
        }
        float _2444;
        if (_2017 > 0.0)
        {
            _2444 = abs((1.0 - _2007) / _2017);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_2017 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_2007 + 1.0) / _2017);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2444 = frontier_phi_40_35_ladder;
        }
        float _2771;
        if (_2020 > 0.0)
        {
            _2771 = abs((1.0 - _2011) / _2020);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_2020 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_2011 + 1.0) / _2020);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _2771 = frontier_phi_50_47_ladder;
        }
        float _2773 = isnan(_2444) ? _2127 : (isnan(_2127) ? _2444 : min(_2127, _2444));
        float _2774 = isnan(_2771) ? _2773 : (isnan(_2773) ? _2771 : min(_2773, _2771));
        float _2778 = (_2774 * _2014) + _2003;
        float _2779 = (_2774 * _2017) + _2007;
        float _2780 = (_2774 * _2020) + _2011;
        float _2781 = _2774 * 9.9999997473787516355514526367188e-05;
        float _2782 = (-1.0) - _2781;
        float _2784 = _2781 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_2780 > _2784) || ((_2780 < _2782) || ((_2779 > _2784) || ((_2779 < _2782) || ((_2778 < _2782) || (_2778 > _2784))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2898 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2780, cbModelParam._m0[17u].z, fma(_2779, cbModelParam._m0[17u].y, _2778 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2780, cbModelParam._m0[18u].z, fma(_2779, cbModelParam._m0[18u].y, _2778 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2780, cbModelParam._m0[19u].z, fma(_2779, cbModelParam._m0[19u].y, _2778 * cbModelParam._m0[19u].x))), _1950);
            frontier_phi_25_50_ladder = _2898.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _2898.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _2898.x * cbModelParam._m0[1u].z;
        }
        _2039 = frontier_phi_25_50_ladder_2;
        _2041 = frontier_phi_25_50_ladder_1;
        _2043 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _2023 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1023, _1024, _1025), _1950);
        _2039 = _2023.x * cbModelParam._m0[1u].z;
        _2041 = _2023.y * cbModelParam._m0[1u].z;
        _2043 = _2023.z * cbModelParam._m0[1u].z;
    }
    float _2055 = ((((1.0 - _1044) * ((_1031 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_1044 * _1031)) * _1015;
    float _2056 = _2055 * ((cbModelParam._m0[1u].w * (_2039 - _1941)) + _1941);
    float _2057 = _2055 * ((cbModelParam._m0[1u].w * (_2041 - _1943)) + _1943);
    float _2058 = _2055 * ((cbModelParam._m0[1u].w * (_2043 - _1945)) + _1945);
    float _2061 = fma(_2058, cbSceneParam._m0[89u].z, fma(_2057, cbSceneParam._m0[89u].y, _2056 * cbSceneParam._m0[89u].x));
    float _2064 = fma(_2058, cbSceneParam._m0[90u].z, fma(_2057, cbSceneParam._m0[90u].y, _2056 * cbSceneParam._m0[90u].x));
    float _2067 = fma(_2058, cbSceneParam._m0[91u].z, fma(_2057, cbSceneParam._m0[91u].y, _2056 * cbSceneParam._m0[91u].x));
    float _2101 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2105 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2109 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2113 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2114 = _2101 / _2113;
    float _2115 = _2105 / _2113;
    float _2116 = _2109 / _2113;
    float _2263;
    float _2264;
    float _2265;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2143 = ((uint(_2116 > cbSceneParam._m0[59u].y) + uint(_2116 > cbSceneParam._m0[59u].x)) + uint(_2116 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2144 = _2143 + 43u;
        uint _2152 = _2143 + 44u;
        uint _2160 = _2143 + 45u;
        uint _2168 = _2143 + 46u;
        float _2179 = fma(_2113, cbSceneParam._m0[_2144].w, fma(_2109, cbSceneParam._m0[_2144].z, fma(_2105, cbSceneParam._m0[_2144].y, _2101 * cbSceneParam._m0[_2144].x)));
        float _2183 = fma(_2113, cbSceneParam._m0[_2152].w, fma(_2109, cbSceneParam._m0[_2152].z, fma(_2105, cbSceneParam._m0[_2152].y, _2101 * cbSceneParam._m0[_2152].x)));
        float _2191 = fma(_2113, cbSceneParam._m0[_2168].w, fma(_2109, cbSceneParam._m0[_2168].z, fma(_2105, cbSceneParam._m0[_2168].y, _2101 * cbSceneParam._m0[_2168].x)));
        float _2196 = cbSceneParam._m0[33u].z * _2191;
        float _2198 = cbSceneParam._m0[33u].w * _2191;
        float _2201 = fma(_2113, cbSceneParam._m0[_2160].w, fma(_2109, cbSceneParam._m0[_2160].z, fma(_2105, cbSceneParam._m0[_2160].y, _2101 * cbSceneParam._m0[_2160].x))) / _2191;
        float _2249 = (cbSceneParam._m0[33u].x - sqrt(((_2115 * _2115) + (_2114 * _2114)) + (_2116 * _2116))) * cbSceneParam._m0[33u].y;
        float _4633 = isnan(0.0) ? _2249 : (isnan(_2249) ? 0.0 : max(_2249, 0.0));
        float _2256 = (isnan(1.0) ? _4633 : (isnan(_4633) ? 1.0 : min(_4633, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2196 + _2179) / _2191, (_2198 + _2183) / _2191), _2201), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2198 + _2179) / _2191, (_2183 - _2196) / _2191), _2201), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2179 - _2196) / _2191, (_2183 - _2198) / _2191), _2201), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2179 - _2198) / _2191, (_2196 + _2183) / _2191), _2201), 0.0)).x), vec4(0.25)));
        _2263 = 1.0 - (_2256 * cbSceneParam._m0[34u].x);
        _2264 = 1.0 - (_2256 * cbSceneParam._m0[34u].y);
        _2265 = 1.0 - (_2256 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2263 = 1.0;
        _2264 = 1.0;
        _2265 = 1.0;
    }
    float _2329;
    float _2331;
    float _2333;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2317 = fma(_2113, cbSceneParam._m0[63u].w, fma(_2109, cbSceneParam._m0[63u].z, fma(_2105, cbSceneParam._m0[63u].y, _2101 * cbSceneParam._m0[63u].x)));
        float _2318 = fma(_2113, cbSceneParam._m0[60u].w, fma(_2109, cbSceneParam._m0[60u].z, fma(_2105, cbSceneParam._m0[60u].y, _2101 * cbSceneParam._m0[60u].x))) / _2317;
        float _2319 = fma(_2113, cbSceneParam._m0[61u].w, fma(_2109, cbSceneParam._m0[61u].z, fma(_2105, cbSceneParam._m0[61u].y, _2101 * cbSceneParam._m0[61u].x))) / _2317;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_2318 >= cbSceneParam._m0[64u].x) && (_2319 >= cbSceneParam._m0[64u].y)) && (_2318 <= cbSceneParam._m0[64u].z)) && (_2319 <= cbSceneParam._m0[64u].w))
        {
            float _2457 = fma(_2113, cbSceneParam._m0[62u].w, fma(_2109, cbSceneParam._m0[62u].z, fma(_2105, cbSceneParam._m0[62u].y, _2101 * cbSceneParam._m0[62u].x))) / _2317;
            float _2461 = isnan(cbSceneParam._m0[41u].w) ? _2457 : (isnan(_2457) ? cbSceneParam._m0[41u].w : max(_2457, cbSceneParam._m0[41u].w));
            float _2504 = (cbSceneParam._m0[33u].x - sqrt(((_2115 * _2115) + (_2114 * _2114)) + (_2116 * _2116))) * cbSceneParam._m0[33u].y;
            float _4649 = isnan(0.0) ? _2504 : (isnan(_2504) ? 0.0 : max(_2504, 0.0));
            float _2511 = (isnan(1.0) ? _4649 : (isnan(_4649) ? 1.0 : min(_4649, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2318, cbSceneParam._m0[33u].w + _2319), _2461), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2318, _2319 - cbSceneParam._m0[33u].z), _2461), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2318 - cbSceneParam._m0[33u].z, _2319 - cbSceneParam._m0[33u].w), _2461), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2318 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2319), _2461), 0.0)).x), vec4(0.25)));
            float _2515 = 1.0 - (_2511 * cbSceneParam._m0[34u].x);
            float _2516 = 1.0 - (_2511 * cbSceneParam._m0[34u].y);
            float _2517 = 1.0 - (_2511 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_2517) ? _2265 : (isnan(_2265) ? _2517 : min(_2265, _2517));
            frontier_phi_37_36_ladder_1 = isnan(_2516) ? _2264 : (isnan(_2264) ? _2516 : min(_2264, _2516));
            frontier_phi_37_36_ladder_2 = isnan(_2515) ? _2263 : (isnan(_2263) ? _2515 : min(_2263, _2515));
        }
        else
        {
            frontier_phi_37_36_ladder = _2265;
            frontier_phi_37_36_ladder_1 = _2264;
            frontier_phi_37_36_ladder_2 = _2263;
        }
        _2329 = frontier_phi_37_36_ladder_2;
        _2331 = frontier_phi_37_36_ladder_1;
        _2333 = frontier_phi_37_36_ladder;
    }
    else
    {
        _2329 = _2263;
        _2331 = _2264;
        _2333 = _2265;
    }
    uvec4 _2338 = floatBitsToUint(cbInstanceData._m0[_280 + 5u]);
    uint _2340 = _2338.x * 14u;
    uint _2341 = _2340 + 13u;
    float _2348 = _1015 + (-1.0);
    float _2353 = (cbLight._m0[_2341].x * _2348) + 1.0;
    float _2354 = (cbLight._m0[_2341].y * _2348) + 1.0;
    float _2355 = (cbLight._m0[_2341].z * _2348) + 1.0;
    float _2356 = (cbLight._m0[_2341].w * _2348) + 1.0;
    uint _2357 = _2340 + 5u;
    float _2363 = isnan(1.0) ? _2354 : (isnan(_2354) ? 1.0 : min(_2354, 1.0));
    uint _2367 = _2340 + 4u;
    float _2376 = isnan(1.0) ? _2353 : (isnan(_2353) ? 1.0 : min(_2353, 1.0));
    uint _2380 = _2340 | 1u;
    float _2391 = dot(vec3(cbLight._m0[_2340].xyz), vec3(_853, _854, _855));
    float _2394 = dot(vec3(cbLight._m0[_2380].xyz), vec3(_853, _854, _855));
    float _4685 = isnan(0.0) ? _2391 : (isnan(_2391) ? 0.0 : max(_2391, 0.0));
    float _4696 = isnan(0.0) ? _2394 : (isnan(_2394) ? 0.0 : max(_2394, 0.0));
    float _2399 = (isnan(1.0) ? _4685 : (isnan(_4685) ? 1.0 : min(_4685, 1.0))) * 0.3183098733425140380859375;
    float _2401 = (isnan(1.0) ? _4696 : (isnan(_4696) ? 1.0 : min(_4696, 1.0))) * 0.3183098733425140380859375;
    float _2408 = ((cbLight._m0[_2357].x * _2363) * _2401) + (((cbLight._m0[_2367].x * _2329) * _2376) * _2399);
    float _2409 = ((_2363 * cbLight._m0[_2357].y) * _2401) + (((cbLight._m0[_2367].y * _2331) * _2376) * _2399);
    float _2410 = ((_2363 * cbLight._m0[_2357].z) * _2401) + (((cbLight._m0[_2367].z * _2333) * _2376) * _2399);
    uvec4 _2414 = floatBitsToUint(cbLight._m0[_2340 + 12u]);
    bool _2416 = _2414.x == 0u;
    float _2518;
    float _2520;
    float _2522;
    if (_2416)
    {
        _2518 = _2408;
        _2520 = _2409;
        _2522 = _2410;
    }
    else
    {
        uint _2526 = _2340 + 6u;
        float _2542 = (dot(vec3(cbLight._m0[_2340 + 2u].xyz), vec3(_853, _854, _855)) * 0.5) + 0.5;
        float _2543 = _2542 * _2542;
        float _4707 = isnan(0.0) ? _2543 : (isnan(_2543) ? 0.0 : max(_2543, 0.0));
        float _2544 = isnan(1.0) ? _4707 : (isnan(_4707) ? 1.0 : min(_4707, 1.0));
        float _2545 = isnan(1.0) ? _2355 : (isnan(_2355) ? 1.0 : min(_2355, 1.0));
        _2518 = (((cbLight._m0[_2526].x * 0.3183098733425140380859375) * _2544) * _2545) + _2408;
        _2520 = (((cbLight._m0[_2526].y * 0.3183098733425140380859375) * _2544) * _2545) + _2409;
        _2522 = (((cbLight._m0[_2526].z * 0.3183098733425140380859375) * _2544) * _2545) + _2410;
    }
    bool _2525 = _2414.y == 0u;
    float _2580;
    float _2582;
    float _2584;
    if (_2525)
    {
        _2580 = _2518;
        _2582 = _2520;
        _2584 = _2522;
    }
    else
    {
        uint _2742 = _2340 + 7u;
        float _2758 = (dot(vec3(cbLight._m0[_2340 + 3u].xyz), vec3(_853, _854, _855)) * 0.5) + 0.5;
        float _2759 = _2758 * _2758;
        float _4723 = isnan(0.0) ? _2759 : (isnan(_2759) ? 0.0 : max(_2759, 0.0));
        float _2760 = isnan(1.0) ? _4723 : (isnan(_4723) ? 1.0 : min(_4723, 1.0));
        float _2761 = isnan(1.0) ? _2356 : (isnan(_2356) ? 1.0 : min(_2356, 1.0));
        _2580 = (((cbLight._m0[_2742].x * 0.3183098733425140380859375) * _2760) * _2761) + _2518;
        _2582 = (((cbLight._m0[_2742].y * 0.3183098733425140380859375) * _2760) * _2761) + _2520;
        _2584 = (((cbLight._m0[_2742].z * 0.3183098733425140380859375) * _2760) * _2761) + _2522;
    }
    uint _2587 = _2340 + 8u;
    float _2600 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2340].w)) * _856) * 0.949999988079071044921875);
    float _2601 = _2600 * _2600;
    float _2602 = cbLight._m0[_2340].x + _932;
    float _2603 = cbLight._m0[_2340].y + _933;
    float _2604 = cbLight._m0[_2340].z + _934;
    float _2608 = inversesqrt(dot(vec3(_2602, _2603, _2604), vec3(_2602, _2603, _2604)));
    float _2609 = _2608 * _2602;
    float _2610 = _2608 * _2603;
    float _2611 = _2608 * _2604;
    float _2612 = dot(vec3(_853, _854, _855), vec3(cbLight._m0[_2340].xyz));
    float _4739 = isnan(0.0) ? _2612 : (isnan(_2612) ? 0.0 : max(_2612, 0.0));
    float _2615 = isnan(1.0) ? _4739 : (isnan(_4739) ? 1.0 : min(_4739, 1.0));
    float _4750 = isnan(0.0) ? _1016 : (isnan(_1016) ? 0.0 : max(_1016, 0.0));
    float _2616 = isnan(1.0) ? _4750 : (isnan(_4750) ? 1.0 : min(_4750, 1.0));
    float _2617 = dot(vec3(_853, _854, _855), vec3(_2609, _2610, _2611));
    float _4761 = isnan(0.0) ? _2617 : (isnan(_2617) ? 0.0 : max(_2617, 0.0));
    float _2620 = isnan(1.0) ? _4761 : (isnan(_4761) ? 1.0 : min(_4761, 1.0));
    float _2621 = dot(vec3(cbLight._m0[_2340].xyz), vec3(_2609, _2610, _2611));
    float _4772 = isnan(0.0) ? _2621 : (isnan(_2621) ? 0.0 : max(_2621, 0.0));
    float _2625 = _2601 * _2601;
    float _2629 = ((_2620 * _2620) * (_2625 + (-1.0))) + 1.0;
    float _2640 = (exp2(log2(1.0 - (isnan(1.0) ? _4772 : (isnan(_4772) ? 1.0 : min(_4772, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2641 = 1.0 - _2601;
    float _2652 = (0.5 / (((_2616 * ((_2615 * _2641) + _2601)) + 9.9999999392252902907785028219223e-09) + (((_2616 * _2641) + _2601) * _2615))) * _2615;
    float _4783 = isnan(0.0) ? _2652 : (isnan(_2652) ? 0.0 : max(_2652, 0.0));
    float _2654 = (isnan(1.0) ? _4783 : (isnan(_4783) ? 1.0 : min(_4783, 1.0))) * (_2625 / ((_2629 * _2629) * 3.141590118408203125));
    uint _2668 = _2340 + 9u;
    float _2679 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2380].w)) * _856) * 0.949999988079071044921875);
    float _2680 = _2679 * _2679;
    float _2681 = cbLight._m0[_2380].x + _932;
    float _2682 = cbLight._m0[_2380].y + _933;
    float _2683 = cbLight._m0[_2380].z + _934;
    float _2687 = inversesqrt(dot(vec3(_2681, _2682, _2683), vec3(_2681, _2682, _2683)));
    float _2688 = _2687 * _2681;
    float _2689 = _2687 * _2682;
    float _2690 = _2687 * _2683;
    float _2691 = dot(vec3(_853, _854, _855), vec3(cbLight._m0[_2380].xyz));
    float _4794 = isnan(0.0) ? _2691 : (isnan(_2691) ? 0.0 : max(_2691, 0.0));
    float _2694 = isnan(1.0) ? _4794 : (isnan(_4794) ? 1.0 : min(_4794, 1.0));
    float _2695 = dot(vec3(_853, _854, _855), vec3(_2688, _2689, _2690));
    float _4805 = isnan(0.0) ? _2695 : (isnan(_2695) ? 0.0 : max(_2695, 0.0));
    float _2698 = isnan(1.0) ? _4805 : (isnan(_4805) ? 1.0 : min(_4805, 1.0));
    float _2699 = dot(vec3(cbLight._m0[_2380].xyz), vec3(_2688, _2689, _2690));
    float _4816 = isnan(0.0) ? _2699 : (isnan(_2699) ? 0.0 : max(_2699, 0.0));
    float _2703 = _2680 * _2680;
    float _2707 = ((_2698 * _2698) * (_2703 + (-1.0))) + 1.0;
    float _2716 = (exp2(log2(1.0 - (isnan(1.0) ? _4816 : (isnan(_4816) ? 1.0 : min(_4816, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2717 = 1.0 - _2680;
    float _2727 = (0.5 / (((_2616 * ((_2694 * _2717) + _2680)) + 9.9999999392252902907785028219223e-09) + (((_2616 * _2717) + _2680) * _2694))) * _2694;
    float _4827 = isnan(0.0) ? _2727 : (isnan(_2727) ? 0.0 : max(_2727, 0.0));
    float _2729 = (isnan(1.0) ? _4827 : (isnan(_4827) ? 1.0 : min(_4827, 1.0))) * (_2703 / ((_2707 * _2707) * 3.141590118408203125));
    float _2739 = (((_2716 * cbLight._m0[_2668].x) * _2729) * _2363) + ((((cbLight._m0[_2587].x * _2329) * _2640) * _2654) * _2376);
    float _2740 = (((_2716 * cbLight._m0[_2668].y) * _2729) * _2363) + ((((cbLight._m0[_2587].y * _2331) * _2640) * _2654) * _2376);
    float _2741 = (((_2716 * cbLight._m0[_2668].z) * _2729) * _2363) + ((((cbLight._m0[_2587].z * _2333) * _2640) * _2654) * _2376);
    float _2797;
    float _2799;
    float _2801;
    if (_2416)
    {
        _2797 = _2739;
        _2799 = _2740;
        _2801 = _2741;
    }
    else
    {
        uint _2803 = _2340 + 2u;
        uint _2807 = _2340 + 10u;
        float _2821 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2803].w)) * _856) * 0.949999988079071044921875);
        float _2822 = _2821 * _2821;
        float _2823 = cbLight._m0[_2803].x + _932;
        float _2824 = cbLight._m0[_2803].y + _933;
        float _2825 = cbLight._m0[_2803].z + _934;
        float _2829 = inversesqrt(dot(vec3(_2823, _2824, _2825), vec3(_2823, _2824, _2825)));
        float _2830 = _2829 * _2823;
        float _2831 = _2829 * _2824;
        float _2832 = _2829 * _2825;
        float _2833 = dot(vec3(_853, _854, _855), vec3(cbLight._m0[_2803].xyz));
        float _4838 = isnan(0.0) ? _2833 : (isnan(_2833) ? 0.0 : max(_2833, 0.0));
        float _2836 = isnan(1.0) ? _4838 : (isnan(_4838) ? 1.0 : min(_4838, 1.0));
        float _2837 = dot(vec3(_853, _854, _855), vec3(_2830, _2831, _2832));
        float _4849 = isnan(0.0) ? _2837 : (isnan(_2837) ? 0.0 : max(_2837, 0.0));
        float _2840 = isnan(1.0) ? _4849 : (isnan(_4849) ? 1.0 : min(_4849, 1.0));
        float _2841 = dot(vec3(cbLight._m0[_2803].xyz), vec3(_2830, _2831, _2832));
        float _4860 = isnan(0.0) ? _2841 : (isnan(_2841) ? 0.0 : max(_2841, 0.0));
        float _2845 = _2822 * _2822;
        float _2849 = ((_2840 * _2840) * (_2845 + (-1.0))) + 1.0;
        float _2858 = (exp2(log2(1.0 - (isnan(1.0) ? _4860 : (isnan(_4860) ? 1.0 : min(_4860, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2859 = 1.0 - _2822;
        float _2869 = (0.5 / (((_2616 * ((_2836 * _2859) + _2822)) + 9.9999999392252902907785028219223e-09) + (((_2616 * _2859) + _2822) * _2836))) * _2836;
        float _4871 = isnan(0.0) ? _2869 : (isnan(_2869) ? 0.0 : max(_2869, 0.0));
        float _2871 = (isnan(1.0) ? _4871 : (isnan(_4871) ? 1.0 : min(_4871, 1.0))) * (_2845 / ((_2849 * _2849) * 3.141590118408203125));
        float _2872 = isnan(1.0) ? _2355 : (isnan(_2355) ? 1.0 : min(_2355, 1.0));
        _2797 = (((_2858 * cbLight._m0[_2807].x) * _2871) * _2872) + _2739;
        _2799 = (((_2858 * cbLight._m0[_2807].y) * _2871) * _2872) + _2740;
        _2801 = (((_2858 * cbLight._m0[_2807].z) * _2871) * _2872) + _2741;
    }
    float _2903;
    float _2905;
    float _2907;
    if (_2525)
    {
        _2903 = _2797;
        _2905 = _2799;
        _2907 = _2801;
    }
    else
    {
        uint _2914 = _2340 + 3u;
        uint _2918 = _2340 + 11u;
        float _2932 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2914].w)) * _856) * 0.949999988079071044921875);
        float _2933 = _2932 * _2932;
        float _2934 = cbLight._m0[_2914].x + _932;
        float _2935 = cbLight._m0[_2914].y + _933;
        float _2936 = cbLight._m0[_2914].z + _934;
        float _2940 = inversesqrt(dot(vec3(_2934, _2935, _2936), vec3(_2934, _2935, _2936)));
        float _2941 = _2940 * _2934;
        float _2942 = _2940 * _2935;
        float _2943 = _2940 * _2936;
        float _2944 = dot(vec3(_853, _854, _855), vec3(cbLight._m0[_2914].xyz));
        float _4887 = isnan(0.0) ? _2944 : (isnan(_2944) ? 0.0 : max(_2944, 0.0));
        float _2947 = isnan(1.0) ? _4887 : (isnan(_4887) ? 1.0 : min(_4887, 1.0));
        float _2948 = dot(vec3(_853, _854, _855), vec3(_2941, _2942, _2943));
        float _4898 = isnan(0.0) ? _2948 : (isnan(_2948) ? 0.0 : max(_2948, 0.0));
        float _2951 = isnan(1.0) ? _4898 : (isnan(_4898) ? 1.0 : min(_4898, 1.0));
        float _2952 = dot(vec3(cbLight._m0[_2914].xyz), vec3(_2941, _2942, _2943));
        float _4909 = isnan(0.0) ? _2952 : (isnan(_2952) ? 0.0 : max(_2952, 0.0));
        float _2956 = _2933 * _2933;
        float _2960 = ((_2951 * _2951) * (_2956 + (-1.0))) + 1.0;
        float _2969 = (exp2(log2(1.0 - (isnan(1.0) ? _4909 : (isnan(_4909) ? 1.0 : min(_4909, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2970 = 1.0 - _2933;
        float _2980 = (0.5 / (((_2616 * ((_2947 * _2970) + _2933)) + 9.9999999392252902907785028219223e-09) + (((_2616 * _2970) + _2933) * _2947))) * _2947;
        float _4920 = isnan(0.0) ? _2980 : (isnan(_2980) ? 0.0 : max(_2980, 0.0));
        float _2982 = (isnan(1.0) ? _4920 : (isnan(_4920) ? 1.0 : min(_4920, 1.0))) * (_2956 / ((_2960 * _2960) * 3.141590118408203125));
        float _2983 = isnan(1.0) ? _2356 : (isnan(_2356) ? 1.0 : min(_2356, 1.0));
        _2903 = (((_2969 * cbLight._m0[_2918].x) * _2982) * _2983) + _2797;
        _2905 = (((_2969 * cbLight._m0[_2918].y) * _2982) * _2983) + _2799;
        _2907 = (((_2969 * cbLight._m0[_2918].z) * _2982) * _2983) + _2801;
    }
    float _3049;
    float _3051;
    float _3053;
    float _3055;
    float _3057;
    float _3059;
    if (_2338.y == 0u)
    {
        uvec4 _3004 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3005 = _3004.x;
        uint _3016 = uint((float(_3004.y) * floor(float(uint(cbSceneParam._m0[85u].y * _953) / _3005))) + floor(float(uint(cbSceneParam._m0[85u].x * _952) / _3005)));
        float _3026 = (log2(_2116 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _3027 = isnan(0.0) ? _3026 : (isnan(_3026) ? 0.0 : max(_3026, 0.0));
        uint _3030 = uint(isnan(14.0) ? _3027 : (isnan(_3027) ? 14.0 : min(_3027, 14.0)));
        uvec4 _3035 = texelFetch(g_lightClusterGridBuffer, int(((_3030 << 2u) + (_3016 << 6u)) >> 2u));
        uint _3036 = _3035.x;
        uint _3037 = _3004.z;
        float _3116;
        float _3118;
        float _3120;
        float _3122;
        float _3124;
        float _3126;
        if (((((1u << ((_3037 >> 4u) & 15u)) + 4294967295u) & _3036) == 0u) || ((_3037 & 240u) == 0u))
        {
            _3116 = 0.0;
            _3118 = 0.0;
            _3120 = 0.0;
            _3122 = 0.0;
            _3124 = 0.0;
            _3126 = 0.0;
        }
        else
        {
            float _3117;
            float _3119;
            float _3121;
            float _3123;
            float _3125;
            float _3127;
            float _3269 = 0.0;
            float _3270 = 0.0;
            float _3271 = 0.0;
            float _3272 = 0.0;
            float _3273 = 0.0;
            float _3274 = 0.0;
            uint _3275 = 0u;
            uint _3284;
            bool _3285;
            for (;;)
            {
                _3284 = texelFetch(g_lightClassification, int((((_3030 << 5u) + (_3016 << 9u)) + (_3275 << 2u)) >> 2u)).x;
                _3285 = _3284 == 0u;
                float frontier_phi_71_pred;
                float frontier_phi_71_pred_1;
                float frontier_phi_71_pred_2;
                float frontier_phi_71_pred_3;
                float frontier_phi_71_pred_4;
                float frontier_phi_71_pred_5;
                if (_3285)
                {
                    frontier_phi_71_pred = _3274;
                    frontier_phi_71_pred_1 = _3273;
                    frontier_phi_71_pred_2 = _3272;
                    frontier_phi_71_pred_3 = _3271;
                    frontier_phi_71_pred_4 = _3270;
                    frontier_phi_71_pred_5 = _3269;
                }
                else
                {
                    float _3414;
                    float _3415;
                    float _3416;
                    float _3417;
                    float _3418;
                    float _3419;
                    uint _3420;
                    _3414 = _3269;
                    _3415 = _3270;
                    _3416 = _3271;
                    _3417 = _3272;
                    _3418 = _3273;
                    _3419 = _3274;
                    _3420 = _3284;
                    float _3341;
                    float _3342;
                    float _3343;
                    float _3344;
                    float _3345;
                    float _3346;
                    for (;;)
                    {
                        uint _3424 = uint(findLSB(_3420)) + (_3275 << 5u);
                        uint _3421 = (_3420 + 4294967295u) & _3420;
                        uint _3426 = _3424 * 48u;
                        vec4 _3440 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3426)).x, texelFetch(g_PointLightRenderingBuffer, int(_3426 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3426 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3426 + 3u)).x));
                        uint _3446 = (_3424 * 48u) + 4u;
                        vec4 _3459 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3446)).x, texelFetch(g_PointLightRenderingBuffer, int(_3446 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3446 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3446 + 3u)).x));
                        uint _3465 = (_3424 * 48u) + 8u;
                        vec3 _3476 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3465)).x, texelFetch(g_PointLightRenderingBuffer, int(_3465 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3465 + 2u)).x));
                        float _3480 = _3440.x - _2114;
                        float _3481 = _3440.y - _2115;
                        float _3482 = _3440.z - _2116;
                        float _3483 = dot(vec3(_3480, _3481, _3482), vec3(_3480, _3481, _3482));
                        float _3486 = inversesqrt(_3483);
                        float _3487 = _3486 * _3480;
                        float _3488 = _3486 * _3481;
                        float _3489 = _3486 * _3482;
                        float _3490 = dot(vec3(_971, _974, _977), vec3(_3487, _3488, _3489));
                        float _3495 = 1.0 - (_3483 * _3440.w);
                        float _4946 = isnan(0.0) ? _3495 : (isnan(_3495) ? 0.0 : max(_3495, 0.0));
                        float _3496 = isnan(1.0) ? _4946 : (isnan(_4946) ? 1.0 : min(_4946, 1.0));
                        float _3497 = sqrt(_3483) * _3459.w;
                        float _3500 = 1.39999997615814208984375 / (_3497 + 1.39999997615814208984375);
                        float _3501 = _3500 * _3500;
                        float _3504 = ((1.0 - _3501) * _3490) + _3501;
                        float _3507 = _3497 * _3497;
                        float _3511 = ((isnan(0.0) ? _3504 : (isnan(_3504) ? 0.0 : max(_3504, 0.0))) * _3496) / ((_3507 * 0.699999988079071044921875) + 1.0);
                        float _3515 = (-0.0) - _2114;
                        float _3516 = (-0.0) - _2115;
                        float _3517 = (-0.0) - _2116;
                        float _3521 = inversesqrt(dot(vec3(_3515, _3516, _3517), vec3(_3515, _3516, _3517)));
                        float _3522 = _3521 * _3515;
                        float _3523 = _3521 * _3516;
                        float _3524 = _3521 * _3517;
                        float _3531 = exp2(log2(1.0 / ((_3507 * 3.5) + 5.0)) * 0.25);
                        float _3532 = 1.0 - _1031;
                        float _3539 = sqrt(1.0 - ((1.0 - (_3532 * _3532)) * (1.0 - (_3531 * _3531))));
                        float _3540 = _3539 * _3539;
                        float _3541 = _3540 * _3540;
                        float _3542 = _3522 + _3487;
                        float _3543 = _3523 + _3488;
                        float _3544 = _3524 + _3489;
                        float _3548 = inversesqrt(dot(vec3(_3542, _3543, _3544), vec3(_3542, _3543, _3544)));
                        float _3552 = dot(vec3(_971, _974, _977), vec3(_3522, _3523, _3524));
                        float _4962 = isnan(0.0) ? _3552 : (isnan(_3552) ? 0.0 : max(_3552, 0.0));
                        float _3555 = isnan(1.0) ? _4962 : (isnan(_4962) ? 1.0 : min(_4962, 1.0));
                        float _3556 = dot(vec3(_971, _974, _977), vec3(_3548 * _3542, _3548 * _3543, _3548 * _3544));
                        float _4973 = isnan(0.0) ? _3556 : (isnan(_3556) ? 0.0 : max(_3556, 0.0));
                        float _3559 = isnan(1.0) ? _4973 : (isnan(_4973) ? 1.0 : min(_4973, 1.0));
                        float _3563 = ((_3559 * _3559) * (_3541 + (-1.0))) + 1.0;
                        float _3564 = _3500 * _3540;
                        float _3565 = _3564 * _3564;
                        float _3568 = ((1.0 - _3565) * _3490) + _3565;
                        float _4984 = isnan(0.0) ? _3568 : (isnan(_3568) ? 0.0 : max(_3568, 0.0));
                        float _3569 = isnan(1.0) ? _4984 : (isnan(_4984) ? 1.0 : min(_4984, 1.0));
                        float _3570 = 1.0 - _3540;
                        float _3580 = (0.5 / (((_3569 * ((_3555 * _3570) + _3540)) + 9.9999999392252902907785028219223e-09) + (((_3569 * _3570) + _3540) * _3555))) * _3569;
                        float _4995 = isnan(0.0) ? _3580 : (isnan(_3580) ? 0.0 : max(_3580, 0.0));
                        float _3591 = (((_3541 * 3.1415927410125732421875) * (isnan(1.0) ? _4995 : (isnan(_4995) ? 1.0 : min(_4995, 1.0)))) / ((_3563 * _3563) * ((_3507 * 2.1991131305694580078125) + 3.141590118408203125))) * _3496;
                        _3344 = (_3511 * _3459.x) + _3417;
                        _3345 = (_3511 * _3459.y) + _3418;
                        _3346 = (_3511 * _3459.z) + _3419;
                        _3341 = (_3591 * _3476.x) + _3414;
                        _3342 = (_3591 * _3476.y) + _3415;
                        _3343 = (_3591 * _3476.z) + _3416;
                        if (_3421 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3414 = _3341;
                            _3415 = _3342;
                            _3416 = _3343;
                            _3417 = _3344;
                            _3418 = _3345;
                            _3419 = _3346;
                            _3420 = _3421;
                        }
                    }
                    frontier_phi_71_pred = _3346;
                    frontier_phi_71_pred_1 = _3345;
                    frontier_phi_71_pred_2 = _3344;
                    frontier_phi_71_pred_3 = _3343;
                    frontier_phi_71_pred_4 = _3342;
                    frontier_phi_71_pred_5 = _3341;
                }
                _3127 = frontier_phi_71_pred;
                _3125 = frontier_phi_71_pred_1;
                _3123 = frontier_phi_71_pred_2;
                _3121 = frontier_phi_71_pred_3;
                _3119 = frontier_phi_71_pred_4;
                _3117 = frontier_phi_71_pred_5;
                uint _3276 = _3275 + 1u;
                if (_3276 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3269 = _3117;
                    _3270 = _3119;
                    _3271 = _3121;
                    _3272 = _3123;
                    _3273 = _3125;
                    _3274 = _3127;
                    _3275 = _3276;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3116 = _3117;
            _3118 = _3119;
            _3120 = _3121;
            _3122 = _3123;
            _3124 = _3125;
            _3126 = _3127;
        }
        uvec4 _3130 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3131 = _3130.z;
        uint _3133 = (_3131 >> 8u) & 15u;
        float _3237;
        float _3239;
        float _3241;
        float _3243;
        float _3245;
        float _3247;
        if (((4294967295u << _3133) & _3036) == 0u)
        {
            _3237 = _3116;
            _3239 = _3118;
            _3241 = _3120;
            _3243 = _3122;
            _3245 = _3124;
            _3247 = _3126;
        }
        else
        {
            float _3262 = inversesqrt(dot(vec3(_2114, _2115, _2116), vec3(_2114, _2115, _2116)));
            float _3263 = _3262 * _2114;
            float _3264 = _3262 * _2115;
            float _3265 = _3262 * _2116;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_3133 < ((_3131 >> 12u) & 15u))
            {
                float _3238;
                float _3240;
                float _3242;
                float _3244;
                float _3246;
                float _3248;
                float _3397 = _3116;
                float _3398 = _3118;
                float _3399 = _3120;
                float _3400 = _3122;
                float _3401 = _3124;
                float _3402 = _3126;
                uint _3403 = _3133;
                uint _3412;
                bool _3413;
                for (;;)
                {
                    _3412 = texelFetch(g_lightClassification, int((((_3030 << 5u) + (_3016 << 9u)) + (_3403 << 2u)) >> 2u)).x;
                    _3413 = _3412 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    float frontier_phi_82_pred_3;
                    float frontier_phi_82_pred_4;
                    float frontier_phi_82_pred_5;
                    if (_3413)
                    {
                        frontier_phi_82_pred = _3402;
                        frontier_phi_82_pred_1 = _3401;
                        frontier_phi_82_pred_2 = _3400;
                        frontier_phi_82_pred_3 = _3399;
                        frontier_phi_82_pred_4 = _3398;
                        frontier_phi_82_pred_5 = _3397;
                    }
                    else
                    {
                        float _3605;
                        float _3606;
                        float _3607;
                        float _3608;
                        float _3609;
                        float _3610;
                        float _3898;
                        float _3899;
                        float _3900;
                        float _3901;
                        float _3902;
                        float _3903;
                        float _3618 = _3397;
                        float _3619 = _3398;
                        float _3620 = _3399;
                        float _3621 = _3400;
                        float _3622 = _3401;
                        float _3623 = _3402;
                        uint _3624 = _3412;
                        uint _3625;
                        vec4 _3650;
                        float _3651;
                        vec4 _3666;
                        vec3 _3678;
                        vec4 _3693;
                        vec4 _3708;
                        float _3754;
                        bool _3755;
                        for (;;)
                        {
                            uint _3635 = ((_3403 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3624));
                            _3625 = (_3624 + 4294967295u) & _3624;
                            uint _3637 = _3635 * 40u;
                            _3650 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3637)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3637 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3637 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3637 + 3u)).x));
                            _3651 = _3650.w;
                            uint _3653 = (_3635 * 40u) + 4u;
                            _3666 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3653)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3653 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3653 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3653 + 3u)).x));
                            uint _3668 = (_3635 * 40u) + 8u;
                            _3678 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3668)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3668 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3668 + 2u)).x));
                            uint _3680 = (_3635 * 40u) + 16u;
                            _3693 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3680)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3680 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3680 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3680 + 3u)).x));
                            uint _3695 = (_3635 * 40u) + 20u;
                            _3708 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3695)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3695 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3695 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3695 + 3u)).x));
                            uint _3710 = (_3635 * 40u) + 24u;
                            vec4 _3723 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3710)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3710 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3710 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3710 + 3u)).x));
                            uint _3729 = (_3635 * 40u) + 28u;
                            vec4 _3742 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3729)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3729 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3729 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3729 + 3u)).x));
                            _3754 = fma(_2116, _3742.z, fma(_2115, _3742.y, _3742.x * _2114)) + _3742.w;
                            _3755 = !((fma(_2116, _3723.z, fma(_2115, _3723.y, _3723.x * _2114)) + _3723.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_3755)
                            {
                                float _3782 = _3650.x - _2114;
                                float _3783 = _3650.y - _2115;
                                float _3784 = _3650.z - _2116;
                                float _3785 = dot(vec3(_3782, _3783, _3784), vec3(_3782, _3783, _3784));
                                float _3788 = inversesqrt(_3785);
                                float _3789 = _3788 * _3782;
                                float _3790 = _3788 * _3783;
                                float _3791 = _3788 * _3784;
                                float _3795 = 1.0 - (_3785 / (_3651 * _3651));
                                float _5006 = isnan(0.0) ? _3795 : (isnan(_3795) ? 0.0 : max(_3795, 0.0));
                                float _3796 = isnan(1.0) ? _5006 : (isnan(_5006) ? 1.0 : min(_5006, 1.0));
                                float _3800 = sqrt(_3785) * _3666.w;
                                float _3802 = 1.39999997615814208984375 / (_3800 + 1.39999997615814208984375);
                                float _3803 = _3802 * _3802;
                                float _3806 = ((1.0 - _3803) * dot(vec3(_3789, _3790, _3791), vec3(_971, _974, _977))) + _3803;
                                float _3809 = _3800 * _3800;
                                float _3813 = (fma(_2116, _3693.z, fma(_2115, _3693.y, _3693.x * _2114)) + _3693.w) / _3754;
                                float _3814 = (fma(_2116, _3708.z, fma(_2115, _3708.y, _3708.x * _2114)) + _3708.w) / _3754;
                                float _3818 = 1.0 - dot(vec2(_3813, _3814), vec2(_3813, _3814));
                                float _5022 = isnan(0.0) ? _3818 : (isnan(_3818) ? 0.0 : max(_3818, 0.0));
                                float _3819 = isnan(1.0) ? _5022 : (isnan(_5022) ? 1.0 : min(_5022, 1.0));
                                float _3820 = _3819 * (((isnan(0.0) ? _3806 : (isnan(_3806) ? 0.0 : max(_3806, 0.0))) * _3796) / ((_3809 * 0.699999988079071044921875) + 1.0));
                                float _3832 = exp2(log2(1.0 / ((_3809 * 3.5) + 5.0)) * 0.25);
                                float _3833 = 1.0 - _1031;
                                float _3840 = sqrt(1.0 - ((1.0 - (_3833 * _3833)) * (1.0 - (_3832 * _3832))));
                                float _3841 = _3840 * _3840;
                                float _3842 = _3841 * _3841;
                                float _3843 = _3789 - _3263;
                                float _3844 = _3790 - _3264;
                                float _3845 = _3791 - _3265;
                                float _3849 = inversesqrt(dot(vec3(_3843, _3844, _3845), vec3(_3843, _3844, _3845)));
                                float _3853 = dot(vec3(_971, _974, _977), vec3((-0.0) - _3263, (-0.0) - _3264, (-0.0) - _3265));
                                float _5033 = isnan(0.0) ? _3853 : (isnan(_3853) ? 0.0 : max(_3853, 0.0));
                                float _3856 = isnan(1.0) ? _5033 : (isnan(_5033) ? 1.0 : min(_5033, 1.0));
                                float _3857 = dot(vec3(_971, _974, _977), vec3(_3849 * _3843, _3849 * _3844, _3849 * _3845));
                                float _5044 = isnan(0.0) ? _3857 : (isnan(_3857) ? 0.0 : max(_3857, 0.0));
                                float _3860 = isnan(1.0) ? _5044 : (isnan(_5044) ? 1.0 : min(_5044, 1.0));
                                float _3864 = ((_3860 * _3860) * (_3842 + (-1.0))) + 1.0;
                                float _3865 = _3802 * _3841;
                                float _3866 = _3865 * _3865;
                                float _3872 = ((1.0 - _3866) * dot(vec3(_971, _974, _977), vec3(_3789, _3790, _3791))) + _3866;
                                float _5055 = isnan(0.0) ? _3872 : (isnan(_3872) ? 0.0 : max(_3872, 0.0));
                                float _3873 = isnan(1.0) ? _5055 : (isnan(_5055) ? 1.0 : min(_5055, 1.0));
                                float _3874 = 1.0 - _3841;
                                float _3884 = (0.5 / (((_3873 * ((_3856 * _3874) + _3841)) + 9.9999999392252902907785028219223e-09) + (((_3873 * _3874) + _3841) * _3856))) * _3873;
                                float _5066 = isnan(0.0) ? _3884 : (isnan(_3884) ? 0.0 : max(_3884, 0.0));
                                float _3894 = (_3819 * _3796) * (((_3842 * 3.1415927410125732421875) * (isnan(1.0) ? _5066 : (isnan(_5066) ? 1.0 : min(_5066, 1.0)))) / ((_3864 * _3864) * ((_3809 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_88_pred = _3820 * _3666.z;
                                frontier_phi_88_pred_1 = _3820 * _3666.y;
                                frontier_phi_88_pred_2 = _3820 * _3666.x;
                                frontier_phi_88_pred_3 = _3894 * _3678.z;
                                frontier_phi_88_pred_4 = _3894 * _3678.y;
                                frontier_phi_88_pred_5 = _3894 * _3678.x;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _3903 = frontier_phi_88_pred;
                            _3902 = frontier_phi_88_pred_1;
                            _3901 = frontier_phi_88_pred_2;
                            _3900 = frontier_phi_88_pred_3;
                            _3899 = frontier_phi_88_pred_4;
                            _3898 = frontier_phi_88_pred_5;
                            _3608 = _3901 + _3621;
                            _3609 = _3902 + _3622;
                            _3610 = _3903 + _3623;
                            _3605 = _3898 + _3618;
                            _3606 = _3899 + _3619;
                            _3607 = _3900 + _3620;
                            if (_3625 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3618 = _3605;
                                _3619 = _3606;
                                _3620 = _3607;
                                _3621 = _3608;
                                _3622 = _3609;
                                _3623 = _3610;
                                _3624 = _3625;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _3610;
                        frontier_phi_82_pred_1 = _3609;
                        frontier_phi_82_pred_2 = _3608;
                        frontier_phi_82_pred_3 = _3607;
                        frontier_phi_82_pred_4 = _3606;
                        frontier_phi_82_pred_5 = _3605;
                    }
                    _3248 = frontier_phi_82_pred;
                    _3246 = frontier_phi_82_pred_1;
                    _3244 = frontier_phi_82_pred_2;
                    _3242 = frontier_phi_82_pred_3;
                    _3240 = frontier_phi_82_pred_4;
                    _3238 = frontier_phi_82_pred_5;
                    uint _3404 = _3403 + 1u;
                    if (_3404 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3397 = _3238;
                        _3398 = _3240;
                        _3399 = _3242;
                        _3400 = _3244;
                        _3401 = _3246;
                        _3402 = _3248;
                        _3403 = _3404;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _3244;
                frontier_phi_63_64_ladder_1 = _3248;
                frontier_phi_63_64_ladder_2 = _3246;
                frontier_phi_63_64_ladder_3 = _3242;
                frontier_phi_63_64_ladder_4 = _3240;
                frontier_phi_63_64_ladder_5 = _3238;
            }
            else
            {
                frontier_phi_63_64_ladder = _3122;
                frontier_phi_63_64_ladder_1 = _3126;
                frontier_phi_63_64_ladder_2 = _3124;
                frontier_phi_63_64_ladder_3 = _3120;
                frontier_phi_63_64_ladder_4 = _3118;
                frontier_phi_63_64_ladder_5 = _3116;
            }
            _3237 = frontier_phi_63_64_ladder_5;
            _3239 = frontier_phi_63_64_ladder_4;
            _3241 = frontier_phi_63_64_ladder_3;
            _3243 = frontier_phi_63_64_ladder;
            _3245 = frontier_phi_63_64_ladder_2;
            _3247 = frontier_phi_63_64_ladder_1;
        }
        float _3252 = isnan(1.0) ? _1015 : (isnan(_1015) ? 1.0 : min(_1015, 1.0));
        _3049 = (_3252 * _3243) + _2580;
        _3051 = (_3252 * _3245) + _2582;
        _3053 = (_3252 * _3247) + _2584;
        _3055 = ((_3237 * 0.039999999105930328369140625) * _3252) + _2903;
        _3057 = ((_3239 * 0.039999999105930328369140625) * _3252) + _2905;
        _3059 = ((_3241 * 0.039999999105930328369140625) * _3252) + _2907;
    }
    else
    {
        _3049 = _2580;
        _3051 = _2582;
        _3053 = _2584;
        _3055 = _2903;
        _3057 = _2905;
        _3059 = _2907;
    }
    float _5082 = isnan(0.0) ? _1000 : (isnan(_1000) ? 0.0 : max(_1000, 0.0));
    float _5093 = isnan(0.0) ? _1001 : (isnan(_1001) ? 0.0 : max(_1001, 0.0));
    float _5104 = isnan(0.0) ? _1002 : (isnan(_1002) ? 0.0 : max(_1002, 0.0));
    float _3076 = ((isnan(1.0) ? _5082 : (isnan(_5082) ? 1.0 : min(_5082, 1.0))) * (_3049 + ((isnan(0.0) ? _1771 : (isnan(_1771) ? 0.0 : max(_1771, 0.0))) * _1015))) + ((_3055 + ((isnan(0.0) ? _2061 : (isnan(_2061) ? 0.0 : max(_2061, 0.0))) * _1850)) * cbPerFrame._m0[3u].x);
    float _3077 = ((isnan(1.0) ? _5093 : (isnan(_5093) ? 1.0 : min(_5093, 1.0))) * (_3051 + ((isnan(0.0) ? _1774 : (isnan(_1774) ? 0.0 : max(_1774, 0.0))) * _1015))) + ((_3057 + ((isnan(0.0) ? _2064 : (isnan(_2064) ? 0.0 : max(_2064, 0.0))) * _1850)) * cbPerFrame._m0[3u].x);
    float _3078 = ((isnan(1.0) ? _5104 : (isnan(_5104) ? 1.0 : min(_5104, 1.0))) * (_3053 + ((isnan(0.0) ? _1777 : (isnan(_1777) ? 0.0 : max(_1777, 0.0))) * _1015))) + ((_3059 + ((isnan(0.0) ? _2067 : (isnan(_2067) ? 0.0 : max(_2067, 0.0))) * _1850)) * cbPerFrame._m0[3u].x);
    uint _3079 = _280 + 6u;
    float _3087 = _952 / cbSceneParam._m0[86u].x;
    float _3088 = _953 / cbSceneParam._m0[86u].y;
    vec4 _3102 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3087, _3088, (log2((isnan(cbSceneParam._m0[77u].w) ? _874 : (isnan(_874) ? cbSceneParam._m0[77u].w : min(_874, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3104 = _3102.x;
    float _3105 = _3102.y;
    float _3106 = _3102.z;
    float _3107 = _3102.w;
    float _3179;
    float _3181;
    float _3183;
    float _3185;
    if (_874 > cbSceneParam._m0[78u].w)
    {
        float _3141 = isnan(_874) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _874 : min(cbSceneParam._m0[80u].w, _874));
        float _3142 = _3141 / _874;
        float _3153 = _3142 * _925;
        float _3154 = _926 * _3142;
        float _3155 = (-0.0) - _3154;
        float _3157 = _3142 * _927;
        float _3159 = (cbSceneParam._m0[77u].w * _3155) / _3141;
        float _3160 = _3159 + cbSceneParam._m0[79u].w;
        float _3161 = cbSceneParam._m0[79u].w - _3154;
        float _3167 = sqrt(((_3153 * _3153) + (_3154 * _3154)) + (_3157 * _3157));
        float _3170 = (1.0 - (cbSceneParam._m0[77u].w / _3141)) * _3167;
        float _3175 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3177 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3354;
        if (abs((_3155 - _3159) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3354 = ((((_3160 > 0.0) ? exp2(_3175 * _3160) : (2.0 - exp2(_3177 * _3160))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3170;
        }
        else
        {
            float _3298 = 1.0 / cbSceneParam._m0[80u].x;
            float _3299 = isnan(_3161) ? _3160 : (isnan(_3160) ? _3161 : max(_3160, _3161));
            float _3300 = isnan(_3161) ? _3160 : (isnan(_3160) ? _3161 : min(_3160, _3161));
            float _3309 = isnan(0.0) ? _3299 : (isnan(_3299) ? 0.0 : min(_3299, 0.0));
            float _3310 = isnan(0.0) ? _3300 : (isnan(_3300) ? 0.0 : min(_3300, 0.0));
            _3354 = ((abs(_3167 / _3155) * cbSceneParam._m0[80u].y) * ((((_3309 - _3310) * 2.0) - ((exp2(_3175 * (isnan(0.0) ? _3299 : (isnan(_3299) ? 0.0 : max(_3299, 0.0)))) - exp2(_3175 * (isnan(0.0) ? _3300 : (isnan(_3300) ? 0.0 : max(_3300, 0.0))))) * _3298)) - ((exp2(_3177 * _3309) - exp2(_3177 * _3310)) * _3298))) + (_3170 * cbSceneParam._m0[80u].z);
        }
        vec4 _3356 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3087, _3088, 1.0), 0.0);
        float _3365 = exp2((_3354 * (-1.44269502162933349609375)) * (1.0 - _3356.w));
        float _3366 = log2(_3365);
        float _3382 = log2(_3107);
        _3179 = (exp2(_3382 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3366 * cbSceneParam._m0[78u].x)) * _3356.x) / cbSceneParam._m0[78u].x)) + _3104;
        _3181 = (exp2(_3382 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3366 * cbSceneParam._m0[78u].y)) * _3356.y) / cbSceneParam._m0[78u].y)) + _3105;
        _3183 = (exp2(_3382 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3366 * cbSceneParam._m0[78u].z)) * _3356.z) / cbSceneParam._m0[78u].z)) + _3106;
        _3185 = _3365 * _3107;
    }
    else
    {
        _3179 = _3104;
        _3181 = _3105;
        _3183 = _3106;
        _3185 = _3107;
    }
    bool _3392;
    vec4 _3195;
    vec4 _3217;
    float _3219;
    float _3223;
    float _3224;
    float _3225;
    float _3226;
    bool _3236;
    for (;;)
    {
        _3195 = cbMatDynParam._m0[0u];
        float _3197 = roundEven(_3195.y);
        bool _3198 = _3197 == 3.0;
        float _3199 = log2(_3185);
        float _3206 = exp2(_3199 * cbSceneParam._m0[78u].x) * _3076;
        float _3207 = exp2(_3199 * cbSceneParam._m0[78u].y) * _3077;
        float _3208 = exp2(_3199 * cbSceneParam._m0[78u].z) * _3078;
        float _3215 = _941 + (-0.5);
        _3217 = cbMtdParam._m0[1u];
        _3219 = _3217.y * _3215;
        float _3222 = (_3197 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3223 = _3222 * (_3198 ? _3206 : (_3206 + (cbSceneParam._m0[72u].w * _3179)));
        _3224 = _3222 * (_3198 ? _3207 : (_3207 + (cbSceneParam._m0[72u].w * _3181)));
        _3225 = _3222 * (_3198 ? _3208 : (_3208 + (cbSceneParam._m0[72u].w * _3183)));
        _3226 = _3215 * 0.999000012874603271484375;
        _3236 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3236)
        {
            if ((cbInstanceData._m0[_280 + 7u].x + _3226) < 0.5)
            {
                _3392 = true;
                break;
            }
        }
        uint _3333 = _990 + uint(_3195.w);
        if ((cbInstanceData._m0[_3333].w < 1.0) && ((cbInstanceData._m0[_3333].w + _3226) < 0.5))
        {
            _3392 = true;
            break;
        }
        if ((_3219 + 1.0) < _3217.x)
        {
            _3392 = true;
            break;
        }
        _3392 = false;
        break;
    }
    float _3596;
    if (_3392)
    {
        discard_state = true;
        _3596 = 0.0;
    }
    else
    {
        _3596 = cbInstanceData._m0[_3079].w;
    }
    SV_Target.x = _3223;
    SV_Target.y = _3224;
    SV_Target.z = _3225;
    SV_Target.w = _3596;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_3079].w;
    discard_exit();
}


