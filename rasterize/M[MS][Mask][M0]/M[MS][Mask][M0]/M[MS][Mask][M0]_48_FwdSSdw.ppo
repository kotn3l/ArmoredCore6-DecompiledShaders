#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 13) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_22;
layout(set = 0, binding = 14) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_29;
layout(set = 0, binding = 20) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_6;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1376;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _230 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _231 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _232 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _238 = inversesqrt(dot(vec3(_230, _231, _232), vec3(_230, _231, _232)));
    float _239 = _238 * _230;
    float _240 = _238 * _231;
    float _241 = _238 * _232;
    float _245 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _246 = _245 * NORMAL.x;
    float _247 = _245 * NORMAL.y;
    float _248 = _245 * NORMAL.z;
    float _252 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _253 = _252 * TANGENT.x;
    float _254 = _252 * TANGENT.y;
    float _255 = _252 * TANGENT.z;
    float _264 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _266 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _267 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3703 = isnan(0.0) ? _264 : (isnan(_264) ? 0.0 : max(_264, 0.0));
    float _3714 = isnan(0.0) ? _266 : (isnan(_266) ? 0.0 : max(_266, 0.0));
    float _3725 = isnan(0.0) ? _267 : (isnan(_267) ? 0.0 : max(_267, 0.0));
    uint _277 = uint(roundEven(NORMAL.w)) * 13u;
    uint _282 = _277 + 1u;
    uint _286 = _277 + 2u;
    float _295 = sqrt(((cbInstanceData._m0[_282].x * cbInstanceData._m0[_282].x) + (cbInstanceData._m0[_277].x * cbInstanceData._m0[_277].x)) + (cbInstanceData._m0[_286].x * cbInstanceData._m0[_286].x));
    float _296 = _295 * TEXCOORD.z;
    float _297 = _295 * TEXCOORD.w;
    vec4 _310 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _296) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _297) + cbTextureTilingScale._m0[13u].w));
    vec4 _334 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _339 = _334.x * cbMtdParam._m0[11u].x;
    float _340 = _334.y * cbMtdParam._m0[11u].y;
    float _341 = _334.z * cbMtdParam._m0[11u].z;
    vec4 _360 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _296) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _297) + cbTextureTilingScale._m0[5u].w));
    vec4 _411 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _413 = _411.x;
    float _425 = dot(vec4(_413, _411.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _442 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w)).x) * 2.0) - ((((_413 - _425) * cbMtdParam._m0[24u].z) + _425) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3736 = isnan(0.0) ? _442 : (isnan(_442) ? 0.0 : max(_442, 0.0));
    float _443 = isnan(1.0) ? _3736 : (isnan(_3736) ? 1.0 : min(_3736, 1.0));
    float _450 = (_443 * ((_360.x * cbMtdParam._m0[12u].x) - _339)) + _339;
    float _451 = (_443 * ((_360.y * cbMtdParam._m0[12u].y) - _340)) + _340;
    float _452 = (_443 * ((_360.z * cbMtdParam._m0[12u].z) - _341)) + _341;
    float _456 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _310.x) * _450;
    float _459 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _310.y) * _451;
    float _462 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _310.z) * _452;
    float _469 = ((_450 - _456) * (isnan(1.0) ? _3703 : (isnan(_3703) ? 1.0 : min(_3703, 1.0)))) + _456;
    float _470 = ((_451 - _459) * (isnan(1.0) ? _3714 : (isnan(_3714) ? 1.0 : min(_3714, 1.0)))) + _459;
    float _471 = ((_452 - _462) * (isnan(1.0) ? _3725 : (isnan(_3725) ? 1.0 : min(_3725, 1.0)))) + _462;
    vec4 _490 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _296) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _297) + cbTextureTilingScale._m0[14u].w));
    vec4 _510 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _296) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _297) + cbTextureTilingScale._m0[20u].w));
    vec4 _537 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _296) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _297) + cbTextureTilingScale._m0[4u].w));
    vec4 _554 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _556 = _554.x;
    float _557 = _554.y;
    float _558 = _554.z;
    float _567 = ((_537.z - _558) * _443) + _558;
    float _570 = ((((_537.x - _556) * _443) + _556) * 2.0) + (-1.0);
    float _571 = ((((_537.y - _557) * _443) + _557) * 2.0) + (-1.0);
    float _572 = dot(vec2(_570, _571), vec2(_570, _571));
    float _3747 = isnan(0.0) ? _572 : (isnan(_572) ? 0.0 : max(_572, 0.0));
    float _577 = sqrt(1.0 - (isnan(1.0) ? _3747 : (isnan(_3747) ? 1.0 : min(_3747, 1.0))));
    vec4 _597 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _609 = (_570 + ((((_510.x * 2.0) + (-1.0)) * TEXCOORD_11.x) * cbMtdParam._m0[20u].x)) + (((_597.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _610 = (_571 + ((((_510.y * 2.0) + (-1.0)) * TEXCOORD_11.y) * cbMtdParam._m0[20u].x)) + (((_597.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _613 = fma(_577, _246, fma(_610, _253, _609 * _239));
    float _616 = fma(_577, _247, fma(_610, _254, _609 * _240));
    float _619 = fma(_577, _248, fma(_610, _255, _609 * _241));
    float _623 = inversesqrt(dot(vec3(_613, _616, _619), vec3(_613, _616, _619)));
    vec4 _650 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _296) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _297) + cbTextureTilingScale._m0[11u].w));
    float _652 = _650.x;
    float _653 = 1.0 - _652;
    float _659 = (cbMtdParam._m0[19u].x + dot(vec4(_623 * _613, _623 * _616, _623 * _619, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_652 - _653) * cbMtdParam._m0[24u].w) + _653) * cbMtdParam._m0[21u].z);
    float _3758 = isnan(0.0) ? _659 : (isnan(_659) ? 0.0 : max(_659, 0.0));
    float _660 = isnan(1.0) ? _3758 : (isnan(_3758) ? 1.0 : min(_3758, 1.0));
    float _662 = (-0.0) - cbMtdParam._m0[24u].x;
    float _664 = isnan(0.0) ? _662 : (isnan(_662) ? 0.0 : max(_662, 0.0));
    float _665 = isnan(1.0) ? _664 : (isnan(_664) ? 1.0 : min(_664, 1.0));
    float _672 = _660 - ((_660 * TEXCOORD_8.x) * _665);
    float _673 = _660 - ((_660 * TEXCOORD_8.y) * _665);
    float _674 = _660 - ((_660 * TEXCOORD_8.z) * _665);
    float _681 = (_672 * ((_490.x * cbMtdParam._m0[18u].x) - _469)) + _469;
    float _682 = (_673 * ((_490.y * cbMtdParam._m0[18u].y) - _470)) + _470;
    float _683 = (_674 * ((_490.z * cbMtdParam._m0[18u].z) - _471)) + _471;
    vec4 _695 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _296) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _297) + cbTextureTilingScale._m0[19u].w));
    float _697 = _695.x;
    float _698 = 1.0 - _697;
    float _724 = (TEXCOORD_8.x - ((cbMtdParam._m0[22u].w * (1.0 - TEXCOORD_8.x)) * ((((_697 - _698) * cbMtdParam._m0[24u].y) + _698) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3779 = isnan(0.0) ? _724 : (isnan(_724) ? 0.0 : max(_724, 0.0));
    float _725 = isnan(1.0) ? _3779 : (isnan(_3779) ? 1.0 : min(_3779, 1.0));
    float _733 = ((((cbMtdParam._m0[10u].x - _681) * TEXCOORD_8.x) * cbMtdParam._m0[23u].w) * _725) + _681;
    float _734 = ((((cbMtdParam._m0[10u].y - _682) * TEXCOORD_8.y) * cbMtdParam._m0[23u].w) * _725) + _682;
    float _735 = (((cbMtdParam._m0[23u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _683)) * _725) + _683;
    float _740 = (((_510.z - _567) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _567;
    float _744 = ((_597.z - _740) * cbMtdParam._m0[19u].w) + _740;
    vec4 _758 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _296) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _297) + cbTextureTilingScale._m0[15u].w));
    float _765 = (_758.x * 2.0) + (-1.0);
    float _766 = (_758.y * 2.0) + (-1.0);
    float _767 = dot(vec2(_765, _766), vec2(_765, _766));
    float _3790 = isnan(0.0) ? _767 : (isnan(_767) ? 0.0 : max(_767, 0.0));
    float _775 = ((_758.z - _744) * _672) + _744;
    float _778 = ((cbMtdParam._m0[23u].y - _775) * _725) + _775;
    vec4 _797 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _296) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _297) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _803 = (_797.x * 2.0) + (-1.0);
    float _804 = (_797.y * 2.0) + (-1.0);
    float _805 = dot(vec2(_803, _804), vec2(_803, _804));
    float _3801 = isnan(0.0) ? _805 : (isnan(_805) ? 0.0 : max(_805, 0.0));
    float _820 = ((sqrt(1.0 - (isnan(1.0) ? _3790 : (isnan(_3790) ? 1.0 : min(_3790, 1.0)))) - _577) * _674) + _577;
    float _823 = (((_765 - _609) * _672) + _609) + (cbMtdParam._m0[21u].x * _609);
    float _824 = (((_766 - _610) * _673) + _610) + (cbMtdParam._m0[21u].x * _610);
    float _835 = (((_803 - _823) + (_823 * cbMtdParam._m0[22u].z)) * _725) + _823;
    float _836 = (((_804 - _824) + (_824 * cbMtdParam._m0[22u].z)) * _725) + _824;
    float _837 = (_725 * (sqrt(1.0 - (isnan(1.0) ? _3801 : (isnan(_3801) ? 1.0 : min(_3801, 1.0)))) - _820)) + _820;
    float _841 = cbMtdParam._m0[22u].x + _597.w;
    float _844 = fma(_837, _246, fma(_836, _253, _835 * _239));
    float _847 = fma(_837, _247, fma(_836, _254, _835 * _240));
    float _850 = fma(_837, _248, fma(_836, _255, _835 * _241));
    float _854 = inversesqrt(dot(vec3(_844, _847, _850), vec3(_844, _847, _850)));
    float _855 = _854 * _844;
    float _856 = _854 * _847;
    float _857 = _854 * _850;
    float _3812 = isnan(0.0) ? _778 : (isnan(_778) ? 0.0 : max(_778, 0.0));
    float _858 = isnan(1.0) ? _3812 : (isnan(_3812) ? 1.0 : min(_3812, 1.0));
    float _3823 = isnan(0.0) ? _841 : (isnan(_841) ? 0.0 : max(_841, 0.0));
    float _3834 = isnan(0.0) ? _733 : (isnan(_733) ? 0.0 : max(_733, 0.0));
    float _3845 = isnan(0.0) ? _734 : (isnan(_734) ? 0.0 : max(_734, 0.0));
    float _3856 = isnan(0.0) ? _735 : (isnan(_735) ? 0.0 : max(_735, 0.0));
    float _876 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _917 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _927 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _917);
    float _928 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _917);
    float _929 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _917);
    float _933 = inversesqrt(dot(vec3(_927, _928, _929), vec3(_927, _928, _929)));
    float _934 = _927 * _933;
    float _935 = _928 * _933;
    float _936 = _929 * _933;
    float _942 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _943 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _961 = fma(_857, cbSceneParam._m0[5u].z, fma(_856, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _855));
    float _964 = fma(_857, cbSceneParam._m0[6u].z, fma(_856, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _855));
    float _967 = fma(_857, cbSceneParam._m0[7u].z, fma(_856, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _855));
    uint _981 = (_277 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _987 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3834 : (isnan(_3834) ? 1.0 : min(_3834, 1.0)))) * cbInstanceData._m0[_981].x;
    float _988 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3845 : (isnan(_3845) ? 1.0 : min(_3845, 1.0)))) * cbInstanceData._m0[_981].y;
    float _989 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3856 : (isnan(_3856) ? 1.0 : min(_3856, 1.0)))) * cbInstanceData._m0[_981].z;
    float _3867 = isnan(0.0) ? _987 : (isnan(_987) ? 0.0 : max(_987, 0.0));
    float _990 = isnan(1.0) ? _3867 : (isnan(_3867) ? 1.0 : min(_3867, 1.0));
    float _3878 = isnan(0.0) ? _988 : (isnan(_988) ? 0.0 : max(_988, 0.0));
    float _991 = isnan(1.0) ? _3878 : (isnan(_3878) ? 1.0 : min(_3878, 1.0));
    float _3889 = isnan(0.0) ? _989 : (isnan(_989) ? 0.0 : max(_989, 0.0));
    float _992 = isnan(1.0) ? _3889 : (isnan(_3889) ? 1.0 : min(_3889, 1.0));
    vec4 _1001 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _942, cbSceneParam._m0[86u].y * _943));
    float _1005 = ((isnan(1.0) ? _3823 : (isnan(_3823) ? 1.0 : min(_3823, 1.0))) * TEXCOORD_5.w) * _1001.x;
    float _1006 = dot(vec3(_855, _856, _857), vec3(_934, _935, _936));
    float _1009 = _1006 * 2.0;
    float _1013 = (_1009 * _855) - _934;
    float _1014 = (_1009 * _856) - _935;
    float _1015 = (_1009 * _857) - _936;
    float _1019 = abs(dot(vec3(_934, _935, _936), vec3(_855, _856, _857)));
    float _3900 = isnan(0.0) ? _1019 : (isnan(_1019) ? 0.0 : max(_1019, 0.0));
    float _1021 = sqrt(_858);
    float _1034 = exp2((_1021 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3900 : (isnan(_3900) ? 1.0 : min(_3900, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1021 * 3.0));
    float _1066 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1070 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1074 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1375;
    float _1377;
    float _1378;
    float _1379;
    float _1380;
    float _1381;
    float _1382;
    float _1383;
    float _1384;
    float _1385;
    float _1386;
    float _1387;
    float _1388;
    float _1389;
    float _1390;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1100 = fma(_1074, cbModelParam._m0[26u].z, fma(_1070, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1066));
        float _1104 = fma(_1074, cbModelParam._m0[27u].z, fma(_1070, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1066));
        float _1108 = fma(_1074, cbModelParam._m0[28u].z, fma(_1070, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1066));
        float _1133 = _1066 + _855;
        float _1134 = _1070 + _856;
        float _1135 = _1074 + _857;
        float _1145 = fma(_1135, cbModelParam._m0[26u].z, fma(_1134, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1133)) - _1100;
        float _1146 = fma(_1135, cbModelParam._m0[27u].z, fma(_1134, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1133)) - _1104;
        float _1147 = fma(_1135, cbModelParam._m0[28u].z, fma(_1134, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1133)) - _1108;
        float _1151 = inversesqrt(dot(vec3(_1145, _1146, _1147), vec3(_1145, _1146, _1147)));
        float _1164 = ((_1151 * _1145) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1100 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1165 = ((_1151 * _1146) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1104 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1166 = ((_1151 * _1147) / cbModelParam._m0[34u].z) + ((((((_1108 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1169 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1164, _1165, _1166), 0.0);
        vec4 _1176 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1164, _1165, _1166), 0.0);
        vec4 _1183 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1164, _1165, _1166), 0.0);
        vec4 _1190 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1164, _1165, _1166), 0.0);
        float _1203 = exp2((_1169.w + (-0.5)) * 20.0) * 2.0;
        float _1204 = _1203 * (_1169.x + (-0.5));
        float _1205 = _1203 * (_1169.y + (-0.5));
        float _1206 = _1203 * (_1169.z + (-0.5));
        float _1213 = exp2((_1176.w + (-0.5)) * 20.0) * 2.0;
        float _1214 = _1213 * (_1176.x + (-0.5));
        float _1215 = _1213 * (_1176.y + (-0.5));
        float _1216 = _1213 * (_1176.z + (-0.5));
        float _1223 = exp2((_1183.w + (-0.5)) * 20.0) * 2.0;
        float _1224 = _1223 * (_1183.x + (-0.5));
        float _1225 = _1223 * (_1183.y + (-0.5));
        float _1226 = _1223 * (_1183.z + (-0.5));
        float _1233 = exp2((_1190.w + (-0.5)) * 20.0) * 2.0;
        float _1234 = _1233 * (_1190.x + (-0.5));
        float _1235 = _1233 * (_1190.y + (-0.5));
        float _1236 = _1233 * (_1190.z + (-0.5));
        float _1237 = isnan(0.0) ? _1234 : (isnan(_1234) ? 0.0 : max(_1234, 0.0));
        float _1238 = isnan(0.0) ? _1235 : (isnan(_1235) ? 0.0 : max(_1235, 0.0));
        float _1239 = isnan(0.0) ? _1236 : (isnan(_1236) ? 0.0 : max(_1236, 0.0));
        float _1240 = _1204 * 0.5;
        float _1241 = _1214 * 0.5;
        float _1242 = _1224 * 0.5;
        float _1243 = dot(vec3(_1240, _1241, _1242), vec3(_1240, _1241, _1242));
        float _1248 = (_1243 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1243);
        float _1257 = (dot(vec3(_855, _856, _857), vec3(_1248 * _1240, _1248 * _1241, _1248 * _1242)) + 1.0) * 0.5;
        float _3926 = isnan(0.0) ? _1257 : (isnan(_1257) ? 0.0 : max(_1257, 0.0));
        float _1267 = sqrt(((_1241 * _1241) + (_1240 * _1240)) + (_1242 * _1242)) / (_1237 + 9.9999997473787516355514526367188e-06);
        float _3937 = isnan(0.0) ? _1267 : (isnan(_1267) ? 0.0 : max(_1267, 0.0));
        float _1268 = isnan(1.0) ? _3937 : (isnan(_3937) ? 1.0 : min(_3937, 1.0));
        float _1269 = _1268 * 2.0;
        float _1273 = (1.0 - _1268) / (_1268 + 1.0);
        float _3948 = isnan(0.0) ? _1273 : (isnan(_1273) ? 0.0 : max(_1273, 0.0));
        float _1274 = isnan(1.0) ? _3948 : (isnan(_3948) ? 1.0 : min(_3948, 1.0));
        float _1283 = ((((1.0 - _1274) * (_1269 + 2.0)) * exp2(log2(isnan(1.0) ? _3926 : (isnan(_3926) ? 1.0 : min(_3926, 1.0))) * (_1269 + 1.0))) + _1274) * _1237;
        float _1284 = _1205 * 0.5;
        float _1285 = _1215 * 0.5;
        float _1286 = _1225 * 0.5;
        float _1287 = dot(vec3(_1284, _1285, _1286), vec3(_1284, _1285, _1286));
        float _1292 = (_1287 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1287);
        float _1300 = (dot(vec3(_855, _856, _857), vec3(_1292 * _1284, _1292 * _1285, _1292 * _1286)) + 1.0) * 0.5;
        float _3959 = isnan(0.0) ? _1300 : (isnan(_1300) ? 0.0 : max(_1300, 0.0));
        float _1309 = sqrt(((_1285 * _1285) + (_1284 * _1284)) + (_1286 * _1286)) / (_1238 + 9.9999997473787516355514526367188e-06);
        float _3970 = isnan(0.0) ? _1309 : (isnan(_1309) ? 0.0 : max(_1309, 0.0));
        float _1310 = isnan(1.0) ? _3970 : (isnan(_3970) ? 1.0 : min(_3970, 1.0));
        float _1311 = _1310 * 2.0;
        float _1315 = (1.0 - _1310) / (_1310 + 1.0);
        float _3981 = isnan(0.0) ? _1315 : (isnan(_1315) ? 0.0 : max(_1315, 0.0));
        float _1316 = isnan(1.0) ? _3981 : (isnan(_3981) ? 1.0 : min(_3981, 1.0));
        float _1325 = ((((1.0 - _1316) * (_1311 + 2.0)) * exp2(log2(isnan(1.0) ? _3959 : (isnan(_3959) ? 1.0 : min(_3959, 1.0))) * (_1311 + 1.0))) + _1316) * _1238;
        float _1326 = _1206 * 0.5;
        float _1327 = _1216 * 0.5;
        float _1328 = _1226 * 0.5;
        float _1329 = dot(vec3(_1326, _1327, _1328), vec3(_1326, _1327, _1328));
        float _1334 = (_1329 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1329);
        float _1342 = (dot(vec3(_855, _856, _857), vec3(_1334 * _1326, _1334 * _1327, _1334 * _1328)) + 1.0) * 0.5;
        float _3992 = isnan(0.0) ? _1342 : (isnan(_1342) ? 0.0 : max(_1342, 0.0));
        float _1351 = sqrt(((_1327 * _1327) + (_1326 * _1326)) + (_1328 * _1328)) / (_1239 + 9.9999997473787516355514526367188e-06);
        float _4003 = isnan(0.0) ? _1351 : (isnan(_1351) ? 0.0 : max(_1351, 0.0));
        float _1352 = isnan(1.0) ? _4003 : (isnan(_4003) ? 1.0 : min(_4003, 1.0));
        float _1353 = _1352 * 2.0;
        float _1357 = (1.0 - _1352) / (_1352 + 1.0);
        float _4014 = isnan(0.0) ? _1357 : (isnan(_1357) ? 0.0 : max(_1357, 0.0));
        float _1358 = isnan(1.0) ? _4014 : (isnan(_4014) ? 1.0 : min(_4014, 1.0));
        float _1367 = ((((1.0 - _1358) * (_1353 + 2.0)) * exp2(log2(isnan(1.0) ? _3992 : (isnan(_3992) ? 1.0 : min(_3992, 1.0))) * (_1353 + 1.0))) + _1358) * _1239;
        _1375 = _1206;
        _1377 = _1205;
        _1378 = _1204;
        _1379 = _1216;
        _1380 = _1215;
        _1381 = _1214;
        _1382 = _1226;
        _1383 = _1225;
        _1384 = _1224;
        _1385 = _1239;
        _1386 = _1238;
        _1387 = _1237;
        _1388 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1283 : (isnan(_1283) ? 0.0 : max(_1283, 0.0)));
        _1389 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1325 : (isnan(_1325) ? 0.0 : max(_1325, 0.0)));
        _1390 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1367 : (isnan(_1367) ? 0.0 : max(_1367, 0.0)));
    }
    else
    {
        _1375 = _1376;
        _1377 = _1376;
        _1378 = _1376;
        _1379 = _1376;
        _1380 = _1376;
        _1381 = _1376;
        _1382 = _1376;
        _1383 = _1376;
        _1384 = _1376;
        _1385 = _1376;
        _1386 = _1376;
        _1387 = _1376;
        _1388 = 0.0;
        _1389 = 0.0;
        _1390 = 0.0;
    }
    float _1684;
    float _1685;
    float _1686;
    float _1687;
    float _1688;
    float _1689;
    float _1690;
    float _1691;
    float _1692;
    float _1693;
    float _1694;
    float _1695;
    float _1696;
    float _1697;
    float _1698;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1415 = fma(_1074, cbModelParam._m0[30u].z, fma(_1070, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1066));
        float _1419 = fma(_1074, cbModelParam._m0[31u].z, fma(_1070, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1066));
        float _1423 = fma(_1074, cbModelParam._m0[32u].z, fma(_1070, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1066));
        float _1446 = _1066 + _855;
        float _1447 = _1070 + _856;
        float _1448 = _1074 + _857;
        float _1458 = fma(_1448, cbModelParam._m0[30u].z, fma(_1447, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1446)) - _1415;
        float _1459 = fma(_1448, cbModelParam._m0[31u].z, fma(_1447, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1446)) - _1419;
        float _1460 = fma(_1448, cbModelParam._m0[32u].z, fma(_1447, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1446)) - _1423;
        float _1464 = inversesqrt(dot(vec3(_1458, _1459, _1460), vec3(_1458, _1459, _1460)));
        float _1477 = ((_1464 * _1458) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1415 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1478 = ((_1464 * _1459) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1419 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1479 = ((_1464 * _1460) / cbModelParam._m0[35u].z) + ((((((_1423 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1481 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1477, _1478, _1479), 0.0);
        vec4 _1488 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1477, _1478, _1479), 0.0);
        vec4 _1495 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1477, _1478, _1479), 0.0);
        vec4 _1502 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1477, _1478, _1479), 0.0);
        float _1514 = exp2((_1481.w + (-0.5)) * 20.0) * 2.0;
        float _1515 = _1514 * (_1481.x + (-0.5));
        float _1516 = _1514 * (_1481.y + (-0.5));
        float _1517 = _1514 * (_1481.z + (-0.5));
        float _1524 = exp2((_1488.w + (-0.5)) * 20.0) * 2.0;
        float _1525 = _1524 * (_1488.x + (-0.5));
        float _1526 = _1524 * (_1488.y + (-0.5));
        float _1527 = _1524 * (_1488.z + (-0.5));
        float _1534 = exp2((_1495.w + (-0.5)) * 20.0) * 2.0;
        float _1535 = _1534 * (_1495.x + (-0.5));
        float _1536 = _1534 * (_1495.y + (-0.5));
        float _1537 = _1534 * (_1495.z + (-0.5));
        float _1544 = exp2((_1502.w + (-0.5)) * 20.0) * 2.0;
        float _1545 = _1544 * (_1502.x + (-0.5));
        float _1546 = _1544 * (_1502.y + (-0.5));
        float _1547 = _1544 * (_1502.z + (-0.5));
        float _1548 = isnan(0.0) ? _1545 : (isnan(_1545) ? 0.0 : max(_1545, 0.0));
        float _1549 = isnan(0.0) ? _1546 : (isnan(_1546) ? 0.0 : max(_1546, 0.0));
        float _1550 = isnan(0.0) ? _1547 : (isnan(_1547) ? 0.0 : max(_1547, 0.0));
        float _1551 = _1515 * 0.5;
        float _1552 = _1525 * 0.5;
        float _1553 = _1535 * 0.5;
        float _1554 = dot(vec3(_1551, _1552, _1553), vec3(_1551, _1552, _1553));
        float _1559 = (_1554 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1554);
        float _1567 = (dot(vec3(_855, _856, _857), vec3(_1559 * _1551, _1559 * _1552, _1559 * _1553)) + 1.0) * 0.5;
        float _4055 = isnan(0.0) ? _1567 : (isnan(_1567) ? 0.0 : max(_1567, 0.0));
        float _1576 = sqrt(((_1552 * _1552) + (_1551 * _1551)) + (_1553 * _1553)) / (_1548 + 9.9999997473787516355514526367188e-06);
        float _4066 = isnan(0.0) ? _1576 : (isnan(_1576) ? 0.0 : max(_1576, 0.0));
        float _1577 = isnan(1.0) ? _4066 : (isnan(_4066) ? 1.0 : min(_4066, 1.0));
        float _1578 = _1577 * 2.0;
        float _1582 = (1.0 - _1577) / (_1577 + 1.0);
        float _4077 = isnan(0.0) ? _1582 : (isnan(_1582) ? 0.0 : max(_1582, 0.0));
        float _1583 = isnan(1.0) ? _4077 : (isnan(_4077) ? 1.0 : min(_4077, 1.0));
        float _1592 = ((((1.0 - _1583) * (_1578 + 2.0)) * exp2(log2(isnan(1.0) ? _4055 : (isnan(_4055) ? 1.0 : min(_4055, 1.0))) * (_1578 + 1.0))) + _1583) * _1548;
        float _1593 = _1516 * 0.5;
        float _1594 = _1526 * 0.5;
        float _1595 = _1536 * 0.5;
        float _1596 = dot(vec3(_1593, _1594, _1595), vec3(_1593, _1594, _1595));
        float _1601 = (_1596 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1596);
        float _1609 = (dot(vec3(_855, _856, _857), vec3(_1601 * _1593, _1601 * _1594, _1601 * _1595)) + 1.0) * 0.5;
        float _4088 = isnan(0.0) ? _1609 : (isnan(_1609) ? 0.0 : max(_1609, 0.0));
        float _1618 = sqrt(((_1594 * _1594) + (_1593 * _1593)) + (_1595 * _1595)) / (_1549 + 9.9999997473787516355514526367188e-06);
        float _4099 = isnan(0.0) ? _1618 : (isnan(_1618) ? 0.0 : max(_1618, 0.0));
        float _1619 = isnan(1.0) ? _4099 : (isnan(_4099) ? 1.0 : min(_4099, 1.0));
        float _1620 = _1619 * 2.0;
        float _1624 = (1.0 - _1619) / (_1619 + 1.0);
        float _4110 = isnan(0.0) ? _1624 : (isnan(_1624) ? 0.0 : max(_1624, 0.0));
        float _1625 = isnan(1.0) ? _4110 : (isnan(_4110) ? 1.0 : min(_4110, 1.0));
        float _1634 = ((((1.0 - _1625) * (_1620 + 2.0)) * exp2(log2(isnan(1.0) ? _4088 : (isnan(_4088) ? 1.0 : min(_4088, 1.0))) * (_1620 + 1.0))) + _1625) * _1549;
        float _1635 = _1517 * 0.5;
        float _1636 = _1527 * 0.5;
        float _1637 = _1537 * 0.5;
        float _1638 = dot(vec3(_1635, _1636, _1637), vec3(_1635, _1636, _1637));
        float _1643 = (_1638 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1638);
        float _1651 = (dot(vec3(_855, _856, _857), vec3(_1643 * _1635, _1643 * _1636, _1643 * _1637)) + 1.0) * 0.5;
        float _4121 = isnan(0.0) ? _1651 : (isnan(_1651) ? 0.0 : max(_1651, 0.0));
        float _1660 = sqrt(((_1636 * _1636) + (_1635 * _1635)) + (_1637 * _1637)) / (_1550 + 9.9999997473787516355514526367188e-06);
        float _4132 = isnan(0.0) ? _1660 : (isnan(_1660) ? 0.0 : max(_1660, 0.0));
        float _1661 = isnan(1.0) ? _4132 : (isnan(_4132) ? 1.0 : min(_4132, 1.0));
        float _1662 = _1661 * 2.0;
        float _1666 = (1.0 - _1661) / (_1661 + 1.0);
        float _4143 = isnan(0.0) ? _1666 : (isnan(_1666) ? 0.0 : max(_1666, 0.0));
        float _1667 = isnan(1.0) ? _4143 : (isnan(_4143) ? 1.0 : min(_4143, 1.0));
        float _1676 = ((((1.0 - _1667) * (_1662 + 2.0)) * exp2(log2(isnan(1.0) ? _4121 : (isnan(_4121) ? 1.0 : min(_4121, 1.0))) * (_1662 + 1.0))) + _1667) * _1550;
        _1684 = _1517;
        _1685 = _1516;
        _1686 = _1515;
        _1687 = _1527;
        _1688 = _1526;
        _1689 = _1525;
        _1690 = _1537;
        _1691 = _1536;
        _1692 = _1535;
        _1693 = _1550;
        _1694 = _1549;
        _1695 = _1548;
        _1696 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1592 : (isnan(_1592) ? 0.0 : max(_1592, 0.0)));
        _1697 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1634 : (isnan(_1634) ? 0.0 : max(_1634, 0.0)));
        _1698 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1676 : (isnan(_1676) ? 0.0 : max(_1676, 0.0)));
    }
    else
    {
        _1684 = _1376;
        _1685 = _1376;
        _1686 = _1376;
        _1687 = _1376;
        _1688 = _1376;
        _1689 = _1376;
        _1690 = _1376;
        _1691 = _1376;
        _1692 = _1376;
        _1693 = _1376;
        _1694 = _1376;
        _1695 = _1376;
        _1696 = 0.0;
        _1697 = 0.0;
        _1698 = 0.0;
    }
    float _1708 = (cbModelParam._m0[1u].x * (_1696 - _1388)) + _1388;
    float _1709 = (cbModelParam._m0[1u].x * (_1697 - _1389)) + _1389;
    float _1710 = (cbModelParam._m0[1u].x * (_1698 - _1390)) + _1390;
    float _1731 = fma(_1710, cbSceneParam._m0[89u].z, fma(_1709, cbSceneParam._m0[89u].y, _1708 * cbSceneParam._m0[89u].x));
    float _1734 = fma(_1710, cbSceneParam._m0[90u].z, fma(_1709, cbSceneParam._m0[90u].y, _1708 * cbSceneParam._m0[90u].x));
    float _1737 = fma(_1710, cbSceneParam._m0[91u].z, fma(_1709, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1708));
    float _1752 = _1013 * 0.5;
    float _1753 = _1014 * 0.5;
    float _1754 = _1015 * 0.5;
    float _1755 = dot(vec4(_1752, _1753, _1754, 1.0), vec4(_1686, _1689, _1692, _1695));
    float _1758 = dot(vec4(_1752, _1753, _1754, 1.0), vec4(_1685, _1688, _1691, _1694));
    float _1761 = dot(vec4(_1752, _1753, _1754, 1.0), vec4(_1684, _1687, _1690, _1693));
    float _1795;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1768 = dot(vec4(_1752, _1753, _1754, 1.0), vec4(_1375, _1379, _1382, _1385));
        float _1772 = dot(vec4(_1752, _1753, _1754, 1.0), vec4(_1377, _1380, _1383, _1386));
        float _1776 = dot(vec4(_1752, _1753, _1754, 1.0), vec4(_1378, _1381, _1384, _1387));
        float _1783 = dot(vec4(cbModelParam._m0[39u]), vec4(_1752, _1753, _1754, 1.0));
        _1795 = dot(vec3(isnan(0.0) ? _1776 : (isnan(_1776) ? 0.0 : max(_1776, 0.0)), isnan(0.0) ? _1772 : (isnan(_1772) ? 0.0 : max(_1772, 0.0)), isnan(0.0) ? _1768 : (isnan(_1768) ? 0.0 : max(_1768, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1783) ? 0.0 : (isnan(0.0) ? _1783 : max(0.0, _1783))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1795 = 1.0;
    }
    float _1806;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1797 = dot(vec4(cbModelParam._m0[40u]), vec4(_1752, _1753, _1754, 1.0));
        _1806 = dot(vec3(isnan(0.0) ? _1755 : (isnan(_1755) ? 0.0 : max(_1755, 0.0)), isnan(0.0) ? _1758 : (isnan(_1758) ? 0.0 : max(_1758, 0.0)), isnan(0.0) ? _1761 : (isnan(_1761) ? 0.0 : max(_1761, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1797) ? 0.0 : (isnan(0.0) ? _1797 : max(0.0, _1797))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1806 = 1.0;
    }
    float _1810 = (_1806 * cbModelParam._m0[1u].x) + (_1795 * (1.0 - cbModelParam._m0[1u].x));
    float _1820 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _858);
    float _1821 = isnan(_1820) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1820 : min(cbModelParam._m0[25u].z, _1820));
    float _1901;
    float _1903;
    float _1905;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1868 = fma(_1074, cbModelParam._m0[13u].z, fma(_1070, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1066)) + cbModelParam._m0[13u].w;
        float _1872 = fma(_1074, cbModelParam._m0[14u].z, fma(_1070, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1066)) + cbModelParam._m0[14u].w;
        float _1876 = fma(_1074, cbModelParam._m0[15u].z, fma(_1070, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1066)) + cbModelParam._m0[15u].w;
        float _1879 = fma(_1015, cbModelParam._m0[13u].z, fma(_1014, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1013));
        float _1882 = fma(_1015, cbModelParam._m0[14u].z, fma(_1014, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1013));
        float _1885 = fma(_1015, cbModelParam._m0[15u].z, fma(_1014, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1013));
        float _1913;
        if (_1879 > 0.0)
        {
            _1913 = abs((1.0 - _1868) / _1879);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1879 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1868 + 1.0) / _1879);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1913 = frontier_phi_14_12_ladder;
        }
        float _2134;
        if (_1882 > 0.0)
        {
            _2134 = abs((1.0 - _1872) / _1882);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1882 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1872 + 1.0) / _1882);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2134 = frontier_phi_23_19_ladder;
        }
        float _2380;
        if (_1885 > 0.0)
        {
            _2380 = abs((1.0 - _1876) / _1885);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1885 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1876 + 1.0) / _1885);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2380 = frontier_phi_35_30_ladder;
        }
        float _2382 = isnan(_2134) ? _1913 : (isnan(_1913) ? _2134 : min(_1913, _2134));
        float _2383 = isnan(_2380) ? _2382 : (isnan(_2382) ? _2380 : min(_2382, _2380));
        float _2387 = (_2383 * _1879) + _1868;
        float _2388 = (_2383 * _1882) + _1872;
        float _2389 = (_2383 * _1885) + _1876;
        float _2390 = _2383 * 9.9999997473787516355514526367188e-05;
        float _2392 = (-1.0) - _2390;
        float _2394 = _2390 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2389 > _2394) || ((_2389 < _2392) || ((_2388 > _2394) || ((_2388 < _2392) || ((_2387 < _2392) || (_2387 > _2394))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2513 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2389, cbModelParam._m0[9u].z, fma(_2388, cbModelParam._m0[9u].y, _2387 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2389, cbModelParam._m0[10u].z, fma(_2388, cbModelParam._m0[10u].y, _2387 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2389, cbModelParam._m0[11u].z, fma(_2388, cbModelParam._m0[11u].y, _2387 * cbModelParam._m0[11u].x))), _1821);
            frontier_phi_13_35_ladder = _2513.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2513.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2513.x * cbModelParam._m0[1u].y;
        }
        _1901 = frontier_phi_13_35_ladder_2;
        _1903 = frontier_phi_13_35_ladder_1;
        _1905 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1889 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1013, _1014, _1015), _1821);
        _1901 = _1889.x * cbModelParam._m0[1u].y;
        _1903 = _1889.y * cbModelParam._m0[1u].y;
        _1905 = _1889.z * cbModelParam._m0[1u].y;
    }
    float _1909 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _858);
    float _1910 = isnan(_1909) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1909 : min(cbModelParam._m0[25u].w, _1909));
    float _1999;
    float _2001;
    float _2003;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1963 = fma(_1074, cbModelParam._m0[21u].z, fma(_1070, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1066)) + cbModelParam._m0[21u].w;
        float _1967 = fma(_1074, cbModelParam._m0[22u].z, fma(_1070, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1066)) + cbModelParam._m0[22u].w;
        float _1971 = fma(_1074, cbModelParam._m0[23u].z, fma(_1070, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1066)) + cbModelParam._m0[23u].w;
        float _1974 = fma(_1015, cbModelParam._m0[21u].z, fma(_1014, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1013));
        float _1977 = fma(_1015, cbModelParam._m0[22u].z, fma(_1014, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1013));
        float _1980 = fma(_1015, cbModelParam._m0[23u].z, fma(_1014, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1013));
        float _2139;
        if (_1974 > 0.0)
        {
            _2139 = abs((1.0 - _1963) / _1974);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1974 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1963 + 1.0) / _1974);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2139 = frontier_phi_25_21_ladder;
        }
        float _2407;
        if (_1977 > 0.0)
        {
            _2407 = abs((1.0 - _1967) / _1977);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1977 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1967 + 1.0) / _1977);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2407 = frontier_phi_37_32_ladder;
        }
        float _2612;
        if (_1980 > 0.0)
        {
            _2612 = abs((1.0 - _1971) / _1980);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1980 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1971 + 1.0) / _1980);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2612 = frontier_phi_46_43_ladder;
        }
        float _2614 = isnan(_2407) ? _2139 : (isnan(_2139) ? _2407 : min(_2139, _2407));
        float _2615 = isnan(_2612) ? _2614 : (isnan(_2614) ? _2612 : min(_2614, _2612));
        float _2619 = (_2615 * _1974) + _1963;
        float _2620 = (_2615 * _1977) + _1967;
        float _2621 = (_2615 * _1980) + _1971;
        float _2622 = _2615 * 9.9999997473787516355514526367188e-05;
        float _2623 = (-1.0) - _2622;
        float _2625 = _2622 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2621 > _2625) || ((_2621 < _2623) || ((_2620 > _2625) || ((_2620 < _2623) || ((_2619 < _2623) || (_2619 > _2625))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2820 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2621, cbModelParam._m0[17u].z, fma(_2620, cbModelParam._m0[17u].y, _2619 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2621, cbModelParam._m0[18u].z, fma(_2620, cbModelParam._m0[18u].y, _2619 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2621, cbModelParam._m0[19u].z, fma(_2620, cbModelParam._m0[19u].y, _2619 * cbModelParam._m0[19u].x))), _1910);
            frontier_phi_22_46_ladder = _2820.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2820.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2820.x * cbModelParam._m0[1u].z;
        }
        _1999 = frontier_phi_22_46_ladder_2;
        _2001 = frontier_phi_22_46_ladder_1;
        _2003 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1983 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1013, _1014, _1015), _1910);
        _1999 = _1983.x * cbModelParam._m0[1u].z;
        _2001 = _1983.y * cbModelParam._m0[1u].z;
        _2003 = _1983.z * cbModelParam._m0[1u].z;
    }
    float _2015 = ((((1.0 - _1034) * ((_1021 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_1034 * _1021)) * _1005;
    float _2016 = _2015 * ((cbModelParam._m0[1u].w * (_1999 - _1901)) + _1901);
    float _2017 = _2015 * ((cbModelParam._m0[1u].w * (_2001 - _1903)) + _1903);
    float _2018 = _2015 * ((cbModelParam._m0[1u].w * (_2003 - _1905)) + _1905);
    float _2021 = fma(_2018, cbSceneParam._m0[89u].z, fma(_2017, cbSceneParam._m0[89u].y, _2016 * cbSceneParam._m0[89u].x));
    float _2024 = fma(_2018, cbSceneParam._m0[90u].z, fma(_2017, cbSceneParam._m0[90u].y, _2016 * cbSceneParam._m0[90u].x));
    float _2027 = fma(_2018, cbSceneParam._m0[91u].z, fma(_2017, cbSceneParam._m0[91u].y, _2016 * cbSceneParam._m0[91u].x));
    vec4 _2035 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_942, _943));
    float _2037 = _2035.w;
    float _2049 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _2037);
    float _2050 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _2037);
    float _2051 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _2037);
    uvec4 _2055 = floatBitsToUint(cbInstanceData._m0[_277 + 5u]);
    uint _2057 = _2055.x * 14u;
    uint _2058 = _2057 + 13u;
    float _2065 = _1005 + (-1.0);
    float _2070 = (cbLight._m0[_2058].x * _2065) + 1.0;
    float _2071 = (cbLight._m0[_2058].y * _2065) + 1.0;
    float _2072 = (cbLight._m0[_2058].z * _2065) + 1.0;
    float _2073 = (cbLight._m0[_2058].w * _2065) + 1.0;
    uint _2074 = _2057 + 5u;
    float _2080 = isnan(1.0) ? _2071 : (isnan(_2071) ? 1.0 : min(_2071, 1.0));
    uint _2084 = _2057 + 4u;
    float _2093 = isnan(1.0) ? _2070 : (isnan(_2070) ? 1.0 : min(_2070, 1.0));
    uint _2097 = _2057 | 1u;
    float _2108 = dot(vec3(cbLight._m0[_2057].xyz), vec3(_855, _856, _857));
    float _2111 = dot(vec3(cbLight._m0[_2097].xyz), vec3(_855, _856, _857));
    float _4279 = isnan(0.0) ? _2108 : (isnan(_2108) ? 0.0 : max(_2108, 0.0));
    float _4290 = isnan(0.0) ? _2111 : (isnan(_2111) ? 0.0 : max(_2111, 0.0));
    float _2116 = (isnan(1.0) ? _4279 : (isnan(_4279) ? 1.0 : min(_4279, 1.0))) * 0.3183098733425140380859375;
    float _2118 = (isnan(1.0) ? _4290 : (isnan(_4290) ? 1.0 : min(_4290, 1.0))) * 0.3183098733425140380859375;
    float _2125 = ((cbLight._m0[_2074].x * _2080) * _2118) + (((cbLight._m0[_2084].x * _2049) * _2093) * _2116);
    float _2126 = ((_2080 * cbLight._m0[_2074].y) * _2118) + (((cbLight._m0[_2084].y * _2050) * _2093) * _2116);
    float _2127 = ((_2080 * cbLight._m0[_2074].z) * _2118) + (((cbLight._m0[_2084].z * _2051) * _2093) * _2116);
    uvec4 _2131 = floatBitsToUint(cbLight._m0[_2057 + 12u]);
    bool _2133 = _2131.x == 0u;
    float _2144;
    float _2146;
    float _2148;
    if (_2133)
    {
        _2144 = _2125;
        _2146 = _2126;
        _2148 = _2127;
    }
    else
    {
        uint _2152 = _2057 + 6u;
        float _2168 = (dot(vec3(cbLight._m0[_2057 + 2u].xyz), vec3(_855, _856, _857)) * 0.5) + 0.5;
        float _2169 = _2168 * _2168;
        float _4301 = isnan(0.0) ? _2169 : (isnan(_2169) ? 0.0 : max(_2169, 0.0));
        float _2170 = isnan(1.0) ? _4301 : (isnan(_4301) ? 1.0 : min(_4301, 1.0));
        float _2171 = isnan(1.0) ? _2072 : (isnan(_2072) ? 1.0 : min(_2072, 1.0));
        _2144 = (((cbLight._m0[_2152].x * 0.3183098733425140380859375) * _2170) * _2171) + _2125;
        _2146 = (((cbLight._m0[_2152].y * 0.3183098733425140380859375) * _2170) * _2171) + _2126;
        _2148 = (((cbLight._m0[_2152].z * 0.3183098733425140380859375) * _2170) * _2171) + _2127;
    }
    bool _2151 = _2131.y == 0u;
    float _2189;
    float _2191;
    float _2193;
    if (_2151)
    {
        _2189 = _2144;
        _2191 = _2146;
        _2193 = _2148;
    }
    else
    {
        uint _2351 = _2057 + 7u;
        float _2367 = (dot(vec3(cbLight._m0[_2057 + 3u].xyz), vec3(_855, _856, _857)) * 0.5) + 0.5;
        float _2368 = _2367 * _2367;
        float _4317 = isnan(0.0) ? _2368 : (isnan(_2368) ? 0.0 : max(_2368, 0.0));
        float _2369 = isnan(1.0) ? _4317 : (isnan(_4317) ? 1.0 : min(_4317, 1.0));
        float _2370 = isnan(1.0) ? _2073 : (isnan(_2073) ? 1.0 : min(_2073, 1.0));
        _2189 = (((cbLight._m0[_2351].x * 0.3183098733425140380859375) * _2369) * _2370) + _2144;
        _2191 = (((cbLight._m0[_2351].y * 0.3183098733425140380859375) * _2369) * _2370) + _2146;
        _2193 = (((cbLight._m0[_2351].z * 0.3183098733425140380859375) * _2369) * _2370) + _2148;
    }
    uint _2196 = _2057 + 8u;
    float _2209 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2057].w)) * _858) * 0.949999988079071044921875);
    float _2210 = _2209 * _2209;
    float _2211 = cbLight._m0[_2057].x + _934;
    float _2212 = cbLight._m0[_2057].y + _935;
    float _2213 = cbLight._m0[_2057].z + _936;
    float _2217 = inversesqrt(dot(vec3(_2211, _2212, _2213), vec3(_2211, _2212, _2213)));
    float _2218 = _2217 * _2211;
    float _2219 = _2217 * _2212;
    float _2220 = _2217 * _2213;
    float _2221 = dot(vec3(_855, _856, _857), vec3(cbLight._m0[_2057].xyz));
    float _4333 = isnan(0.0) ? _2221 : (isnan(_2221) ? 0.0 : max(_2221, 0.0));
    float _2224 = isnan(1.0) ? _4333 : (isnan(_4333) ? 1.0 : min(_4333, 1.0));
    float _4344 = isnan(0.0) ? _1006 : (isnan(_1006) ? 0.0 : max(_1006, 0.0));
    float _2225 = isnan(1.0) ? _4344 : (isnan(_4344) ? 1.0 : min(_4344, 1.0));
    float _2226 = dot(vec3(_855, _856, _857), vec3(_2218, _2219, _2220));
    float _4355 = isnan(0.0) ? _2226 : (isnan(_2226) ? 0.0 : max(_2226, 0.0));
    float _2229 = isnan(1.0) ? _4355 : (isnan(_4355) ? 1.0 : min(_4355, 1.0));
    float _2230 = dot(vec3(cbLight._m0[_2057].xyz), vec3(_2218, _2219, _2220));
    float _4366 = isnan(0.0) ? _2230 : (isnan(_2230) ? 0.0 : max(_2230, 0.0));
    float _2234 = _2210 * _2210;
    float _2238 = ((_2229 * _2229) * (_2234 + (-1.0))) + 1.0;
    float _2249 = (exp2(log2(1.0 - (isnan(1.0) ? _4366 : (isnan(_4366) ? 1.0 : min(_4366, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2250 = 1.0 - _2210;
    float _2261 = (0.5 / (((_2225 * ((_2224 * _2250) + _2210)) + 9.9999999392252902907785028219223e-09) + (((_2225 * _2250) + _2210) * _2224))) * _2224;
    float _4377 = isnan(0.0) ? _2261 : (isnan(_2261) ? 0.0 : max(_2261, 0.0));
    float _2263 = (isnan(1.0) ? _4377 : (isnan(_4377) ? 1.0 : min(_4377, 1.0))) * (_2234 / ((_2238 * _2238) * 3.141590118408203125));
    uint _2277 = _2057 + 9u;
    float _2288 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2097].w)) * _858) * 0.949999988079071044921875);
    float _2289 = _2288 * _2288;
    float _2290 = cbLight._m0[_2097].x + _934;
    float _2291 = cbLight._m0[_2097].y + _935;
    float _2292 = cbLight._m0[_2097].z + _936;
    float _2296 = inversesqrt(dot(vec3(_2290, _2291, _2292), vec3(_2290, _2291, _2292)));
    float _2297 = _2296 * _2290;
    float _2298 = _2296 * _2291;
    float _2299 = _2296 * _2292;
    float _2300 = dot(vec3(_855, _856, _857), vec3(cbLight._m0[_2097].xyz));
    float _4388 = isnan(0.0) ? _2300 : (isnan(_2300) ? 0.0 : max(_2300, 0.0));
    float _2303 = isnan(1.0) ? _4388 : (isnan(_4388) ? 1.0 : min(_4388, 1.0));
    float _2304 = dot(vec3(_855, _856, _857), vec3(_2297, _2298, _2299));
    float _4399 = isnan(0.0) ? _2304 : (isnan(_2304) ? 0.0 : max(_2304, 0.0));
    float _2307 = isnan(1.0) ? _4399 : (isnan(_4399) ? 1.0 : min(_4399, 1.0));
    float _2308 = dot(vec3(cbLight._m0[_2097].xyz), vec3(_2297, _2298, _2299));
    float _4410 = isnan(0.0) ? _2308 : (isnan(_2308) ? 0.0 : max(_2308, 0.0));
    float _2312 = _2289 * _2289;
    float _2316 = ((_2307 * _2307) * (_2312 + (-1.0))) + 1.0;
    float _2325 = (exp2(log2(1.0 - (isnan(1.0) ? _4410 : (isnan(_4410) ? 1.0 : min(_4410, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2326 = 1.0 - _2289;
    float _2336 = (0.5 / (((_2225 * ((_2303 * _2326) + _2289)) + 9.9999999392252902907785028219223e-09) + (((_2225 * _2326) + _2289) * _2303))) * _2303;
    float _4421 = isnan(0.0) ? _2336 : (isnan(_2336) ? 0.0 : max(_2336, 0.0));
    float _2338 = (isnan(1.0) ? _4421 : (isnan(_4421) ? 1.0 : min(_4421, 1.0))) * (_2312 / ((_2316 * _2316) * 3.141590118408203125));
    float _2348 = (((_2325 * cbLight._m0[_2277].x) * _2338) * _2080) + ((((cbLight._m0[_2196].x * _2049) * _2249) * _2263) * _2093);
    float _2349 = (((_2325 * cbLight._m0[_2277].y) * _2338) * _2080) + ((((cbLight._m0[_2196].y * _2050) * _2249) * _2263) * _2093);
    float _2350 = (((_2325 * cbLight._m0[_2277].z) * _2338) * _2080) + ((((cbLight._m0[_2196].z * _2051) * _2249) * _2263) * _2093);
    float _2412;
    float _2414;
    float _2416;
    if (_2133)
    {
        _2412 = _2348;
        _2414 = _2349;
        _2416 = _2350;
    }
    else
    {
        uint _2418 = _2057 + 2u;
        uint _2422 = _2057 + 10u;
        float _2436 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2418].w)) * _858) * 0.949999988079071044921875);
        float _2437 = _2436 * _2436;
        float _2438 = cbLight._m0[_2418].x + _934;
        float _2439 = cbLight._m0[_2418].y + _935;
        float _2440 = cbLight._m0[_2418].z + _936;
        float _2444 = inversesqrt(dot(vec3(_2438, _2439, _2440), vec3(_2438, _2439, _2440)));
        float _2445 = _2444 * _2438;
        float _2446 = _2444 * _2439;
        float _2447 = _2444 * _2440;
        float _2448 = dot(vec3(_855, _856, _857), vec3(cbLight._m0[_2418].xyz));
        float _4432 = isnan(0.0) ? _2448 : (isnan(_2448) ? 0.0 : max(_2448, 0.0));
        float _2451 = isnan(1.0) ? _4432 : (isnan(_4432) ? 1.0 : min(_4432, 1.0));
        float _2452 = dot(vec3(_855, _856, _857), vec3(_2445, _2446, _2447));
        float _4443 = isnan(0.0) ? _2452 : (isnan(_2452) ? 0.0 : max(_2452, 0.0));
        float _2455 = isnan(1.0) ? _4443 : (isnan(_4443) ? 1.0 : min(_4443, 1.0));
        float _2456 = dot(vec3(cbLight._m0[_2418].xyz), vec3(_2445, _2446, _2447));
        float _4454 = isnan(0.0) ? _2456 : (isnan(_2456) ? 0.0 : max(_2456, 0.0));
        float _2460 = _2437 * _2437;
        float _2464 = ((_2455 * _2455) * (_2460 + (-1.0))) + 1.0;
        float _2473 = (exp2(log2(1.0 - (isnan(1.0) ? _4454 : (isnan(_4454) ? 1.0 : min(_4454, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2474 = 1.0 - _2437;
        float _2484 = (0.5 / (((_2225 * ((_2451 * _2474) + _2437)) + 9.9999999392252902907785028219223e-09) + (((_2225 * _2474) + _2437) * _2451))) * _2451;
        float _4465 = isnan(0.0) ? _2484 : (isnan(_2484) ? 0.0 : max(_2484, 0.0));
        float _2486 = (isnan(1.0) ? _4465 : (isnan(_4465) ? 1.0 : min(_4465, 1.0))) * (_2460 / ((_2464 * _2464) * 3.141590118408203125));
        float _2487 = isnan(1.0) ? _2072 : (isnan(_2072) ? 1.0 : min(_2072, 1.0));
        _2412 = (((_2473 * cbLight._m0[_2422].x) * _2486) * _2487) + _2348;
        _2414 = (((_2473 * cbLight._m0[_2422].y) * _2486) * _2487) + _2349;
        _2416 = (((_2473 * cbLight._m0[_2422].z) * _2486) * _2487) + _2350;
    }
    float _2522;
    float _2524;
    float _2526;
    if (_2151)
    {
        _2522 = _2412;
        _2524 = _2414;
        _2526 = _2416;
    }
    else
    {
        uint _2533 = _2057 + 3u;
        uint _2537 = _2057 + 11u;
        float _2551 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2533].w)) * _858) * 0.949999988079071044921875);
        float _2552 = _2551 * _2551;
        float _2553 = cbLight._m0[_2533].x + _934;
        float _2554 = cbLight._m0[_2533].y + _935;
        float _2555 = cbLight._m0[_2533].z + _936;
        float _2559 = inversesqrt(dot(vec3(_2553, _2554, _2555), vec3(_2553, _2554, _2555)));
        float _2560 = _2559 * _2553;
        float _2561 = _2559 * _2554;
        float _2562 = _2559 * _2555;
        float _2563 = dot(vec3(_855, _856, _857), vec3(cbLight._m0[_2533].xyz));
        float _4481 = isnan(0.0) ? _2563 : (isnan(_2563) ? 0.0 : max(_2563, 0.0));
        float _2566 = isnan(1.0) ? _4481 : (isnan(_4481) ? 1.0 : min(_4481, 1.0));
        float _2567 = dot(vec3(_855, _856, _857), vec3(_2560, _2561, _2562));
        float _4492 = isnan(0.0) ? _2567 : (isnan(_2567) ? 0.0 : max(_2567, 0.0));
        float _2570 = isnan(1.0) ? _4492 : (isnan(_4492) ? 1.0 : min(_4492, 1.0));
        float _2571 = dot(vec3(cbLight._m0[_2533].xyz), vec3(_2560, _2561, _2562));
        float _4503 = isnan(0.0) ? _2571 : (isnan(_2571) ? 0.0 : max(_2571, 0.0));
        float _2575 = _2552 * _2552;
        float _2579 = ((_2570 * _2570) * (_2575 + (-1.0))) + 1.0;
        float _2588 = (exp2(log2(1.0 - (isnan(1.0) ? _4503 : (isnan(_4503) ? 1.0 : min(_4503, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2589 = 1.0 - _2552;
        float _2599 = (0.5 / (((_2225 * ((_2566 * _2589) + _2552)) + 9.9999999392252902907785028219223e-09) + (((_2225 * _2589) + _2552) * _2566))) * _2566;
        float _4514 = isnan(0.0) ? _2599 : (isnan(_2599) ? 0.0 : max(_2599, 0.0));
        float _2601 = (isnan(1.0) ? _4514 : (isnan(_4514) ? 1.0 : min(_4514, 1.0))) * (_2575 / ((_2579 * _2579) * 3.141590118408203125));
        float _2602 = isnan(1.0) ? _2073 : (isnan(_2073) ? 1.0 : min(_2073, 1.0));
        _2522 = (((_2588 * cbLight._m0[_2537].x) * _2601) * _2602) + _2412;
        _2524 = (((_2588 * cbLight._m0[_2537].y) * _2601) * _2602) + _2414;
        _2526 = (((_2588 * cbLight._m0[_2537].z) * _2601) * _2602) + _2416;
    }
    float _2737;
    float _2739;
    float _2741;
    float _2743;
    float _2745;
    float _2747;
    if (_2055.y == 0u)
    {
        float _2677 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2678 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2677;
        float _2679 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2677;
        float _2680 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2677;
        uvec4 _2692 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2693 = _2692.x;
        uint _2704 = uint((float(_2692.y) * floor(float(uint(cbSceneParam._m0[85u].y * _943) / _2693))) + floor(float(uint(cbSceneParam._m0[85u].x * _942) / _2693)));
        float _2714 = (log2(_2680 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2715 = isnan(0.0) ? _2714 : (isnan(_2714) ? 0.0 : max(_2714, 0.0));
        uint _2718 = uint(isnan(14.0) ? _2715 : (isnan(_2715) ? 14.0 : min(_2715, 14.0)));
        uvec4 _2723 = texelFetch(g_lightClusterGridBuffer, int(((_2718 << 2u) + (_2704 << 6u)) >> 2u));
        uint _2724 = _2723.x;
        uint _2725 = _2692.z;
        float _2825;
        float _2827;
        float _2829;
        float _2831;
        float _2833;
        float _2835;
        if (((((1u << ((_2725 >> 4u) & 15u)) + 4294967295u) & _2724) == 0u) || ((_2725 & 240u) == 0u))
        {
            _2825 = 0.0;
            _2827 = 0.0;
            _2829 = 0.0;
            _2831 = 0.0;
            _2833 = 0.0;
            _2835 = 0.0;
        }
        else
        {
            float _2826;
            float _2828;
            float _2830;
            float _2832;
            float _2834;
            float _2836;
            float _2969 = 0.0;
            float _2970 = 0.0;
            float _2971 = 0.0;
            float _2972 = 0.0;
            float _2973 = 0.0;
            float _2974 = 0.0;
            uint _2975 = 0u;
            uint _2984;
            bool _2985;
            for (;;)
            {
                _2984 = texelFetch(g_lightClassification, int((((_2718 << 5u) + (_2704 << 9u)) + (_2975 << 2u)) >> 2u)).x;
                _2985 = _2984 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2985)
                {
                    frontier_phi_61_pred = _2969;
                    frontier_phi_61_pred_1 = _2974;
                    frontier_phi_61_pred_2 = _2973;
                    frontier_phi_61_pred_3 = _2972;
                    frontier_phi_61_pred_4 = _2971;
                    frontier_phi_61_pred_5 = _2970;
                }
                else
                {
                    float _3093;
                    float _3094;
                    float _3095;
                    float _3096;
                    float _3097;
                    float _3098;
                    uint _3099;
                    _3093 = _2969;
                    _3094 = _2970;
                    _3095 = _2971;
                    _3096 = _2972;
                    _3097 = _2973;
                    _3098 = _2974;
                    _3099 = _2984;
                    float _3025;
                    float _3026;
                    float _3027;
                    float _3028;
                    float _3029;
                    float _3030;
                    for (;;)
                    {
                        uint _3103 = uint(findLSB(_3099)) + (_2975 << 5u);
                        uint _3100 = (_3099 + 4294967295u) & _3099;
                        uint _3105 = _3103 * 48u;
                        vec4 _3119 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3105)).x, texelFetch(g_PointLightRenderingBuffer, int(_3105 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3105 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3105 + 3u)).x));
                        uint _3125 = (_3103 * 48u) + 4u;
                        vec4 _3138 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3125)).x, texelFetch(g_PointLightRenderingBuffer, int(_3125 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3125 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3125 + 3u)).x));
                        uint _3144 = (_3103 * 48u) + 8u;
                        vec3 _3155 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3144)).x, texelFetch(g_PointLightRenderingBuffer, int(_3144 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3144 + 2u)).x));
                        float _3159 = _3119.x - _2678;
                        float _3160 = _3119.y - _2679;
                        float _3161 = _3119.z - _2680;
                        float _3162 = dot(vec3(_3159, _3160, _3161), vec3(_3159, _3160, _3161));
                        float _3165 = inversesqrt(_3162);
                        float _3166 = _3165 * _3159;
                        float _3167 = _3165 * _3160;
                        float _3168 = _3165 * _3161;
                        float _3169 = dot(vec3(_961, _964, _967), vec3(_3166, _3167, _3168));
                        float _3174 = 1.0 - (_3162 * _3119.w);
                        float _4540 = isnan(0.0) ? _3174 : (isnan(_3174) ? 0.0 : max(_3174, 0.0));
                        float _3175 = isnan(1.0) ? _4540 : (isnan(_4540) ? 1.0 : min(_4540, 1.0));
                        float _3176 = sqrt(_3162) * _3138.w;
                        float _3179 = 1.39999997615814208984375 / (_3176 + 1.39999997615814208984375);
                        float _3180 = _3179 * _3179;
                        float _3183 = ((1.0 - _3180) * _3169) + _3180;
                        float _3186 = _3176 * _3176;
                        float _3190 = ((isnan(0.0) ? _3183 : (isnan(_3183) ? 0.0 : max(_3183, 0.0))) * _3175) / ((_3186 * 0.699999988079071044921875) + 1.0);
                        float _3194 = (-0.0) - _2678;
                        float _3195 = (-0.0) - _2679;
                        float _3196 = (-0.0) - _2680;
                        float _3200 = inversesqrt(dot(vec3(_3194, _3195, _3196), vec3(_3194, _3195, _3196)));
                        float _3201 = _3200 * _3194;
                        float _3202 = _3200 * _3195;
                        float _3203 = _3200 * _3196;
                        float _3211 = exp2(log2(1.0 / ((_3186 * 3.5) + 5.0)) * 0.25);
                        float _3212 = 1.0 - _1021;
                        float _3219 = sqrt(1.0 - ((1.0 - (_3212 * _3212)) * (1.0 - (_3211 * _3211))));
                        float _3220 = _3219 * _3219;
                        float _3221 = _3220 * _3220;
                        float _3222 = _3201 + _3166;
                        float _3223 = _3202 + _3167;
                        float _3224 = _3203 + _3168;
                        float _3228 = inversesqrt(dot(vec3(_3222, _3223, _3224), vec3(_3222, _3223, _3224)));
                        float _3232 = dot(vec3(_961, _964, _967), vec3(_3201, _3202, _3203));
                        float _4556 = isnan(0.0) ? _3232 : (isnan(_3232) ? 0.0 : max(_3232, 0.0));
                        float _3235 = isnan(1.0) ? _4556 : (isnan(_4556) ? 1.0 : min(_4556, 1.0));
                        float _3236 = dot(vec3(_961, _964, _967), vec3(_3228 * _3222, _3228 * _3223, _3228 * _3224));
                        float _4567 = isnan(0.0) ? _3236 : (isnan(_3236) ? 0.0 : max(_3236, 0.0));
                        float _3239 = isnan(1.0) ? _4567 : (isnan(_4567) ? 1.0 : min(_4567, 1.0));
                        float _3243 = ((_3239 * _3239) * (_3221 + (-1.0))) + 1.0;
                        float _3244 = _3179 * _3220;
                        float _3245 = _3244 * _3244;
                        float _3248 = ((1.0 - _3245) * _3169) + _3245;
                        float _4578 = isnan(0.0) ? _3248 : (isnan(_3248) ? 0.0 : max(_3248, 0.0));
                        float _3249 = isnan(1.0) ? _4578 : (isnan(_4578) ? 1.0 : min(_4578, 1.0));
                        float _3250 = 1.0 - _3220;
                        float _3260 = (0.5 / (((_3249 * ((_3235 * _3250) + _3220)) + 9.9999999392252902907785028219223e-09) + (((_3249 * _3250) + _3220) * _3235))) * _3249;
                        float _4589 = isnan(0.0) ? _3260 : (isnan(_3260) ? 0.0 : max(_3260, 0.0));
                        float _3271 = (((_3221 * 3.1415927410125732421875) * (isnan(1.0) ? _4589 : (isnan(_4589) ? 1.0 : min(_4589, 1.0)))) / ((_3243 * _3243) * ((_3186 * 2.1991131305694580078125) + 3.141590118408203125))) * _3175;
                        _3028 = (_3190 * _3138.x) + _3096;
                        _3029 = (_3190 * _3138.y) + _3097;
                        _3030 = (_3190 * _3138.z) + _3098;
                        _3025 = (_3271 * _3155.x) + _3093;
                        _3026 = (_3271 * _3155.y) + _3094;
                        _3027 = (_3271 * _3155.z) + _3095;
                        if (_3100 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3093 = _3025;
                            _3094 = _3026;
                            _3095 = _3027;
                            _3096 = _3028;
                            _3097 = _3029;
                            _3098 = _3030;
                            _3099 = _3100;
                        }
                    }
                    frontier_phi_61_pred = _3025;
                    frontier_phi_61_pred_1 = _3030;
                    frontier_phi_61_pred_2 = _3029;
                    frontier_phi_61_pred_3 = _3028;
                    frontier_phi_61_pred_4 = _3027;
                    frontier_phi_61_pred_5 = _3026;
                }
                _2826 = frontier_phi_61_pred;
                _2836 = frontier_phi_61_pred_1;
                _2834 = frontier_phi_61_pred_2;
                _2832 = frontier_phi_61_pred_3;
                _2830 = frontier_phi_61_pred_4;
                _2828 = frontier_phi_61_pred_5;
                uint _2976 = _2975 + 1u;
                if (_2976 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2969 = _2826;
                    _2970 = _2828;
                    _2971 = _2830;
                    _2972 = _2832;
                    _2973 = _2834;
                    _2974 = _2836;
                    _2975 = _2976;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2825 = _2826;
            _2827 = _2828;
            _2829 = _2830;
            _2831 = _2832;
            _2833 = _2834;
            _2835 = _2836;
        }
        uvec4 _2839 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2840 = _2839.z;
        uint _2842 = (_2840 >> 8u) & 15u;
        float _2937;
        float _2939;
        float _2941;
        float _2943;
        float _2945;
        float _2947;
        if (((4294967295u << _2842) & _2724) == 0u)
        {
            _2937 = _2825;
            _2939 = _2827;
            _2941 = _2829;
            _2943 = _2831;
            _2945 = _2833;
            _2947 = _2835;
        }
        else
        {
            float _2962 = inversesqrt(dot(vec3(_2678, _2679, _2680), vec3(_2678, _2679, _2680)));
            float _2963 = _2962 * _2678;
            float _2964 = _2962 * _2679;
            float _2965 = _2962 * _2680;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2842 < ((_2840 >> 12u) & 15u))
            {
                float _2938;
                float _2940;
                float _2942;
                float _2944;
                float _2946;
                float _2948;
                float _3076 = _2825;
                float _3077 = _2827;
                float _3078 = _2829;
                float _3079 = _2831;
                float _3080 = _2833;
                float _3081 = _2835;
                uint _3082 = _2842;
                uint _3091;
                bool _3092;
                for (;;)
                {
                    _3091 = texelFetch(g_lightClassification, int((((_2718 << 5u) + (_2704 << 9u)) + (_3082 << 2u)) >> 2u)).x;
                    _3092 = _3091 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_3092)
                    {
                        frontier_phi_67_pred = _3079;
                        frontier_phi_67_pred_1 = _3080;
                        frontier_phi_67_pred_2 = _3081;
                        frontier_phi_67_pred_3 = _3078;
                        frontier_phi_67_pred_4 = _3077;
                        frontier_phi_67_pred_5 = _3076;
                    }
                    else
                    {
                        float _3276;
                        float _3277;
                        float _3278;
                        float _3279;
                        float _3280;
                        float _3281;
                        float _3569;
                        float _3570;
                        float _3571;
                        float _3572;
                        float _3573;
                        float _3574;
                        float _3289 = _3076;
                        float _3290 = _3077;
                        float _3291 = _3078;
                        float _3292 = _3079;
                        float _3293 = _3080;
                        float _3294 = _3081;
                        uint _3295 = _3091;
                        uint _3296;
                        vec4 _3321;
                        float _3322;
                        vec4 _3337;
                        vec3 _3349;
                        vec4 _3364;
                        vec4 _3379;
                        float _3425;
                        bool _3426;
                        for (;;)
                        {
                            uint _3306 = ((_3082 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3295));
                            _3296 = (_3295 + 4294967295u) & _3295;
                            uint _3308 = _3306 * 40u;
                            _3321 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3308)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3308 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3308 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3308 + 3u)).x));
                            _3322 = _3321.w;
                            uint _3324 = (_3306 * 40u) + 4u;
                            _3337 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3324)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3324 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3324 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3324 + 3u)).x));
                            uint _3339 = (_3306 * 40u) + 8u;
                            _3349 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3339)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3339 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3339 + 2u)).x));
                            uint _3351 = (_3306 * 40u) + 16u;
                            _3364 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3351)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3351 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3351 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3351 + 3u)).x));
                            uint _3366 = (_3306 * 40u) + 20u;
                            _3379 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3366)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3366 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3366 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3366 + 3u)).x));
                            uint _3381 = (_3306 * 40u) + 24u;
                            vec4 _3394 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3381)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3381 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3381 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3381 + 3u)).x));
                            uint _3400 = (_3306 * 40u) + 28u;
                            vec4 _3413 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3400)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3400 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3400 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3400 + 3u)).x));
                            _3425 = fma(_2680, _3413.z, fma(_2679, _3413.y, _3413.x * _2678)) + _3413.w;
                            _3426 = !((fma(_2680, _3394.z, fma(_2679, _3394.y, _3394.x * _2678)) + _3394.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3426)
                            {
                                float _3453 = _3321.x - _2678;
                                float _3454 = _3321.y - _2679;
                                float _3455 = _3321.z - _2680;
                                float _3456 = dot(vec3(_3453, _3454, _3455), vec3(_3453, _3454, _3455));
                                float _3459 = inversesqrt(_3456);
                                float _3460 = _3459 * _3453;
                                float _3461 = _3459 * _3454;
                                float _3462 = _3459 * _3455;
                                float _3466 = 1.0 - (_3456 / (_3322 * _3322));
                                float _4600 = isnan(0.0) ? _3466 : (isnan(_3466) ? 0.0 : max(_3466, 0.0));
                                float _3467 = isnan(1.0) ? _4600 : (isnan(_4600) ? 1.0 : min(_4600, 1.0));
                                float _3471 = sqrt(_3456) * _3337.w;
                                float _3473 = 1.39999997615814208984375 / (_3471 + 1.39999997615814208984375);
                                float _3474 = _3473 * _3473;
                                float _3477 = ((1.0 - _3474) * dot(vec3(_3460, _3461, _3462), vec3(_961, _964, _967))) + _3474;
                                float _3480 = _3471 * _3471;
                                float _3484 = (fma(_2680, _3364.z, fma(_2679, _3364.y, _3364.x * _2678)) + _3364.w) / _3425;
                                float _3485 = (fma(_2680, _3379.z, fma(_2679, _3379.y, _3379.x * _2678)) + _3379.w) / _3425;
                                float _3489 = 1.0 - dot(vec2(_3484, _3485), vec2(_3484, _3485));
                                float _4616 = isnan(0.0) ? _3489 : (isnan(_3489) ? 0.0 : max(_3489, 0.0));
                                float _3490 = isnan(1.0) ? _4616 : (isnan(_4616) ? 1.0 : min(_4616, 1.0));
                                float _3491 = _3490 * (((isnan(0.0) ? _3477 : (isnan(_3477) ? 0.0 : max(_3477, 0.0))) * _3467) / ((_3480 * 0.699999988079071044921875) + 1.0));
                                float _3503 = exp2(log2(1.0 / ((_3480 * 3.5) + 5.0)) * 0.25);
                                float _3504 = 1.0 - _1021;
                                float _3511 = sqrt(1.0 - ((1.0 - (_3504 * _3504)) * (1.0 - (_3503 * _3503))));
                                float _3512 = _3511 * _3511;
                                float _3513 = _3512 * _3512;
                                float _3514 = _3460 - _2963;
                                float _3515 = _3461 - _2964;
                                float _3516 = _3462 - _2965;
                                float _3520 = inversesqrt(dot(vec3(_3514, _3515, _3516), vec3(_3514, _3515, _3516)));
                                float _3524 = dot(vec3(_961, _964, _967), vec3((-0.0) - _2963, (-0.0) - _2964, (-0.0) - _2965));
                                float _4627 = isnan(0.0) ? _3524 : (isnan(_3524) ? 0.0 : max(_3524, 0.0));
                                float _3527 = isnan(1.0) ? _4627 : (isnan(_4627) ? 1.0 : min(_4627, 1.0));
                                float _3528 = dot(vec3(_961, _964, _967), vec3(_3520 * _3514, _3520 * _3515, _3520 * _3516));
                                float _4638 = isnan(0.0) ? _3528 : (isnan(_3528) ? 0.0 : max(_3528, 0.0));
                                float _3531 = isnan(1.0) ? _4638 : (isnan(_4638) ? 1.0 : min(_4638, 1.0));
                                float _3535 = ((_3531 * _3531) * (_3513 + (-1.0))) + 1.0;
                                float _3536 = _3473 * _3512;
                                float _3537 = _3536 * _3536;
                                float _3543 = ((1.0 - _3537) * dot(vec3(_961, _964, _967), vec3(_3460, _3461, _3462))) + _3537;
                                float _4649 = isnan(0.0) ? _3543 : (isnan(_3543) ? 0.0 : max(_3543, 0.0));
                                float _3544 = isnan(1.0) ? _4649 : (isnan(_4649) ? 1.0 : min(_4649, 1.0));
                                float _3545 = 1.0 - _3512;
                                float _3555 = (0.5 / (((_3544 * ((_3527 * _3545) + _3512)) + 9.9999999392252902907785028219223e-09) + (((_3544 * _3545) + _3512) * _3527))) * _3544;
                                float _4660 = isnan(0.0) ? _3555 : (isnan(_3555) ? 0.0 : max(_3555, 0.0));
                                float _3565 = (_3490 * _3467) * (((_3513 * 3.1415927410125732421875) * (isnan(1.0) ? _4660 : (isnan(_4660) ? 1.0 : min(_4660, 1.0)))) / ((_3535 * _3535) * ((_3480 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3565 * _3349.x;
                                frontier_phi_73_pred_1 = _3565 * _3349.y;
                                frontier_phi_73_pred_2 = _3491 * _3337.z;
                                frontier_phi_73_pred_3 = _3491 * _3337.y;
                                frontier_phi_73_pred_4 = _3491 * _3337.x;
                                frontier_phi_73_pred_5 = _3565 * _3349.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3569 = frontier_phi_73_pred;
                            _3570 = frontier_phi_73_pred_1;
                            _3574 = frontier_phi_73_pred_2;
                            _3573 = frontier_phi_73_pred_3;
                            _3572 = frontier_phi_73_pred_4;
                            _3571 = frontier_phi_73_pred_5;
                            _3279 = _3572 + _3292;
                            _3280 = _3573 + _3293;
                            _3281 = _3574 + _3294;
                            _3276 = _3569 + _3289;
                            _3277 = _3570 + _3290;
                            _3278 = _3571 + _3291;
                            if (_3296 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3289 = _3276;
                                _3290 = _3277;
                                _3291 = _3278;
                                _3292 = _3279;
                                _3293 = _3280;
                                _3294 = _3281;
                                _3295 = _3296;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3279;
                        frontier_phi_67_pred_1 = _3280;
                        frontier_phi_67_pred_2 = _3281;
                        frontier_phi_67_pred_3 = _3278;
                        frontier_phi_67_pred_4 = _3277;
                        frontier_phi_67_pred_5 = _3276;
                    }
                    _2944 = frontier_phi_67_pred;
                    _2946 = frontier_phi_67_pred_1;
                    _2948 = frontier_phi_67_pred_2;
                    _2942 = frontier_phi_67_pred_3;
                    _2940 = frontier_phi_67_pred_4;
                    _2938 = frontier_phi_67_pred_5;
                    uint _3083 = _3082 + 1u;
                    if (_3083 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3076 = _2938;
                        _3077 = _2940;
                        _3078 = _2942;
                        _3079 = _2944;
                        _3080 = _2946;
                        _3081 = _2948;
                        _3082 = _3083;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2946;
                frontier_phi_55_56_ladder_1 = _2948;
                frontier_phi_55_56_ladder_2 = _2944;
                frontier_phi_55_56_ladder_3 = _2942;
                frontier_phi_55_56_ladder_4 = _2940;
                frontier_phi_55_56_ladder_5 = _2938;
            }
            else
            {
                frontier_phi_55_56_ladder = _2833;
                frontier_phi_55_56_ladder_1 = _2835;
                frontier_phi_55_56_ladder_2 = _2831;
                frontier_phi_55_56_ladder_3 = _2829;
                frontier_phi_55_56_ladder_4 = _2827;
                frontier_phi_55_56_ladder_5 = _2825;
            }
            _2937 = frontier_phi_55_56_ladder_5;
            _2939 = frontier_phi_55_56_ladder_4;
            _2941 = frontier_phi_55_56_ladder_3;
            _2943 = frontier_phi_55_56_ladder_2;
            _2945 = frontier_phi_55_56_ladder;
            _2947 = frontier_phi_55_56_ladder_1;
        }
        float _2952 = isnan(1.0) ? _1005 : (isnan(_1005) ? 1.0 : min(_1005, 1.0));
        _2737 = (_2952 * _2943) + _2189;
        _2739 = (_2952 * _2945) + _2191;
        _2741 = (_2952 * _2947) + _2193;
        _2743 = ((_2937 * 0.039999999105930328369140625) * _2952) + _2522;
        _2745 = ((_2939 * 0.039999999105930328369140625) * _2952) + _2524;
        _2747 = ((_2941 * 0.039999999105930328369140625) * _2952) + _2526;
    }
    else
    {
        _2737 = _2189;
        _2739 = _2191;
        _2741 = _2193;
        _2743 = _2522;
        _2745 = _2524;
        _2747 = _2526;
    }
    float _4676 = isnan(0.0) ? _990 : (isnan(_990) ? 0.0 : max(_990, 0.0));
    float _4687 = isnan(0.0) ? _991 : (isnan(_991) ? 0.0 : max(_991, 0.0));
    float _4698 = isnan(0.0) ? _992 : (isnan(_992) ? 0.0 : max(_992, 0.0));
    uint _2767 = _277 + 6u;
    float _2775 = _942 / cbSceneParam._m0[86u].x;
    float _2776 = _943 / cbSceneParam._m0[86u].y;
    vec4 _2790 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2775, _2776, (log2((isnan(cbSceneParam._m0[77u].w) ? _876 : (isnan(_876) ? cbSceneParam._m0[77u].w : min(_876, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2792 = _2790.x;
    float _2793 = _2790.y;
    float _2794 = _2790.z;
    float _2795 = _2790.w;
    float _2887;
    float _2889;
    float _2891;
    float _2893;
    if (_876 > cbSceneParam._m0[78u].w)
    {
        float _2850 = isnan(_876) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _876 : min(cbSceneParam._m0[80u].w, _876));
        float _2851 = _2850 / _876;
        float _2862 = _2851 * _927;
        float _2863 = _928 * _2851;
        float _2864 = (-0.0) - _2863;
        float _2865 = _2851 * _929;
        float _2867 = (cbSceneParam._m0[77u].w * _2864) / _2850;
        float _2868 = _2867 + cbSceneParam._m0[79u].w;
        float _2869 = cbSceneParam._m0[79u].w - _2863;
        float _2875 = sqrt(((_2862 * _2862) + (_2863 * _2863)) + (_2865 * _2865));
        float _2878 = (1.0 - (cbSceneParam._m0[77u].w / _2850)) * _2875;
        float _2883 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2885 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3038;
        if (abs((_2864 - _2867) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3038 = ((((_2868 > 0.0) ? exp2(_2883 * _2868) : (2.0 - exp2(_2885 * _2868))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2878;
        }
        else
        {
            float _2998 = 1.0 / cbSceneParam._m0[80u].x;
            float _2999 = isnan(_2869) ? _2868 : (isnan(_2868) ? _2869 : max(_2868, _2869));
            float _3000 = isnan(_2869) ? _2868 : (isnan(_2868) ? _2869 : min(_2868, _2869));
            float _3009 = isnan(0.0) ? _2999 : (isnan(_2999) ? 0.0 : min(_2999, 0.0));
            float _3010 = isnan(0.0) ? _3000 : (isnan(_3000) ? 0.0 : min(_3000, 0.0));
            _3038 = ((abs(_2875 / _2864) * cbSceneParam._m0[80u].y) * ((((_3009 - _3010) * 2.0) - ((exp2(_2883 * (isnan(0.0) ? _2999 : (isnan(_2999) ? 0.0 : max(_2999, 0.0)))) - exp2(_2883 * (isnan(0.0) ? _3000 : (isnan(_3000) ? 0.0 : max(_3000, 0.0))))) * _2998)) - ((exp2(_2885 * _3009) - exp2(_2885 * _3010)) * _2998))) + (_2878 * cbSceneParam._m0[80u].z);
        }
        vec4 _3040 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2775, _2776, 1.0), 0.0);
        float _3049 = exp2((_3038 * (-1.44269502162933349609375)) * (1.0 - _3040.w));
        float _3050 = log2(_3049);
        float _3066 = log2(_2795);
        _2887 = (exp2(_3066 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3050 * cbSceneParam._m0[78u].x)) * _3040.x) / cbSceneParam._m0[78u].x)) + _2792;
        _2889 = (exp2(_3066 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3050 * cbSceneParam._m0[78u].y)) * _3040.y) / cbSceneParam._m0[78u].y)) + _2793;
        _2891 = (exp2(_3066 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3050 * cbSceneParam._m0[78u].z)) * _3040.z) / cbSceneParam._m0[78u].z)) + _2794;
        _2893 = _3049 * _2795;
    }
    else
    {
        _2887 = _2792;
        _2889 = _2793;
        _2891 = _2794;
        _2893 = _2795;
    }
    float _2905 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2906 = _2905 == 3.0;
    float _2907 = log2(_2893);
    float _2914 = exp2(_2907 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4676 : (isnan(_4676) ? 1.0 : min(_4676, 1.0))) * (_2737 + ((isnan(0.0) ? _1731 : (isnan(_1731) ? 0.0 : max(_1731, 0.0))) * _1005))) + ((_2743 + ((isnan(0.0) ? _2021 : (isnan(_2021) ? 0.0 : max(_2021, 0.0))) * _1810)) * cbPerFrame._m0[3u].x));
    float _2915 = exp2(_2907 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4687 : (isnan(_4687) ? 1.0 : min(_4687, 1.0))) * (_2739 + ((isnan(0.0) ? _1734 : (isnan(_1734) ? 0.0 : max(_1734, 0.0))) * _1005))) + ((_2745 + ((isnan(0.0) ? _2024 : (isnan(_2024) ? 0.0 : max(_2024, 0.0))) * _1810)) * cbPerFrame._m0[3u].x));
    float _2916 = exp2(_2907 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4698 : (isnan(_4698) ? 1.0 : min(_4698, 1.0))) * (_2741 + ((isnan(0.0) ? _1737 : (isnan(_1737) ? 0.0 : max(_1737, 0.0))) * _1005))) + ((_2747 + ((isnan(0.0) ? _2027 : (isnan(_2027) ? 0.0 : max(_2027, 0.0))) * _1810)) * cbPerFrame._m0[3u].x));
    float _2925 = (_2905 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2925 * (_2906 ? _2914 : (_2914 + (cbSceneParam._m0[72u].w * _2887)));
    SV_Target.y = _2925 * (_2906 ? _2915 : (_2915 + (cbSceneParam._m0[72u].w * _2889)));
    SV_Target.z = _2925 * (_2906 ? _2916 : (_2916 + (cbSceneParam._m0[72u].w * _2891)));
    SV_Target.w = cbInstanceData._m0[_2767].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2767].w;
}


