#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 13) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_22;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_29;
layout(set = 0, binding = 20) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_6;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1225;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _224 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _225 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _226 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _232 = inversesqrt(dot(vec3(_224, _225, _226), vec3(_224, _225, _226)));
    float _239 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _246 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _258 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _260 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _261 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3557 = isnan(0.0) ? _258 : (isnan(_258) ? 0.0 : max(_258, 0.0));
    float _3568 = isnan(0.0) ? _260 : (isnan(_260) ? 0.0 : max(_260, 0.0));
    float _3579 = isnan(0.0) ? _261 : (isnan(_261) ? 0.0 : max(_261, 0.0));
    uint _271 = uint(roundEven(NORMAL.w)) * 13u;
    uint _276 = _271 + 1u;
    uint _280 = _271 + 2u;
    float _289 = sqrt(((cbInstanceData._m0[_276].x * cbInstanceData._m0[_276].x) + (cbInstanceData._m0[_271].x * cbInstanceData._m0[_271].x)) + (cbInstanceData._m0[_280].x * cbInstanceData._m0[_280].x));
    float _290 = _289 * TEXCOORD.z;
    float _291 = _289 * TEXCOORD.w;
    vec4 _304 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _290) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _291) + cbTextureTilingScale._m0[13u].w));
    vec4 _328 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _333 = _328.x * cbMtdParam._m0[11u].x;
    float _334 = _328.y * cbMtdParam._m0[11u].y;
    float _335 = _328.z * cbMtdParam._m0[11u].z;
    vec4 _354 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _290) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _291) + cbTextureTilingScale._m0[5u].w));
    vec4 _405 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _407 = _405.x;
    float _419 = dot(vec4(_407, _405.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _436 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w)).x) * 2.0) - ((((_407 - _419) * cbMtdParam._m0[24u].z) + _419) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3590 = isnan(0.0) ? _436 : (isnan(_436) ? 0.0 : max(_436, 0.0));
    float _437 = isnan(1.0) ? _3590 : (isnan(_3590) ? 1.0 : min(_3590, 1.0));
    float _444 = (_437 * ((_354.x * cbMtdParam._m0[12u].x) - _333)) + _333;
    float _445 = (_437 * ((_354.y * cbMtdParam._m0[12u].y) - _334)) + _334;
    float _446 = (_437 * ((_354.z * cbMtdParam._m0[12u].z) - _335)) + _335;
    float _450 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _304.x) * _444;
    float _453 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _304.y) * _445;
    float _456 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _304.z) * _446;
    float _463 = ((_444 - _450) * (isnan(1.0) ? _3557 : (isnan(_3557) ? 1.0 : min(_3557, 1.0)))) + _450;
    float _464 = ((_445 - _453) * (isnan(1.0) ? _3568 : (isnan(_3568) ? 1.0 : min(_3568, 1.0)))) + _453;
    float _465 = ((_446 - _456) * (isnan(1.0) ? _3579 : (isnan(_3579) ? 1.0 : min(_3579, 1.0)))) + _456;
    vec4 _478 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _290) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _291) + cbTextureTilingScale._m0[20u].w));
    vec4 _503 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _290) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _291) + cbTextureTilingScale._m0[4u].w));
    vec4 _520 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _522 = _520.x;
    float _523 = _520.y;
    float _524 = _520.z;
    float _533 = ((_503.z - _524) * _437) + _524;
    float _536 = ((((_503.x - _522) * _437) + _522) * 2.0) + (-1.0);
    float _537 = ((((_503.y - _523) * _437) + _523) * 2.0) + (-1.0);
    float _538 = dot(vec2(_536, _537), vec2(_536, _537));
    float _3601 = isnan(0.0) ? _538 : (isnan(_538) ? 0.0 : max(_538, 0.0));
    float _543 = sqrt(1.0 - (isnan(1.0) ? _3601 : (isnan(_3601) ? 1.0 : min(_3601, 1.0))));
    vec4 _565 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _577 = (_536 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_478.x * 2.0) + (-1.0)))) + (((_565.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _578 = (_537 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_478.y * 2.0) + (-1.0)))) + (((_565.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    vec4 _590 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _290) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _291) + cbTextureTilingScale._m0[19u].w));
    float _592 = _590.x;
    float _593 = 1.0 - _592;
    float _619 = (TEXCOORD_8.x - ((cbMtdParam._m0[22u].w * (1.0 - TEXCOORD_8.x)) * ((((_592 - _593) * cbMtdParam._m0[24u].y) + _593) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3612 = isnan(0.0) ? _619 : (isnan(_619) ? 0.0 : max(_619, 0.0));
    float _620 = isnan(1.0) ? _3612 : (isnan(_3612) ? 1.0 : min(_3612, 1.0));
    float _628 = ((((cbMtdParam._m0[10u].x - _463) * TEXCOORD_8.x) * cbMtdParam._m0[23u].w) * _620) + _463;
    float _629 = ((((cbMtdParam._m0[10u].y - _464) * TEXCOORD_8.y) * cbMtdParam._m0[23u].w) * _620) + _464;
    float _630 = (((cbMtdParam._m0[23u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _465)) * _620) + _465;
    float _635 = (((_478.z - _533) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _533;
    float _639 = ((_565.z - _635) * cbMtdParam._m0[19u].w) + _635;
    float _643 = ((cbMtdParam._m0[23u].y - _639) * _620) + _639;
    vec4 _662 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _290) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _291) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _668 = (_662.x * 2.0) + (-1.0);
    float _669 = (_662.y * 2.0) + (-1.0);
    float _670 = dot(vec2(_668, _669), vec2(_668, _669));
    float _3623 = isnan(0.0) ? _670 : (isnan(_670) ? 0.0 : max(_670, 0.0));
    float _686 = (_620 * (((cbMtdParam._m0[22u].z * _577) - _577) + _668)) + _577;
    float _687 = (_620 * (((cbMtdParam._m0[22u].z * _578) - _578) + _669)) + _578;
    float _688 = (_620 * (sqrt(1.0 - (isnan(1.0) ? _3623 : (isnan(_3623) ? 1.0 : min(_3623, 1.0)))) - _543)) + _543;
    float _690 = cbMtdParam._m0[22u].x + _565.w;
    float _693 = fma(_688, _239 * NORMAL.x, fma(_687, _246 * TANGENT.x, (_232 * _224) * _686));
    float _696 = fma(_688, _239 * NORMAL.y, fma(_687, _246 * TANGENT.y, (_232 * _225) * _686));
    float _699 = fma(_688, _239 * NORMAL.z, fma(_687, _246 * TANGENT.z, (_232 * _226) * _686));
    float _703 = inversesqrt(dot(vec3(_693, _696, _699), vec3(_693, _696, _699)));
    float _704 = _703 * _693;
    float _705 = _703 * _696;
    float _706 = _703 * _699;
    float _3634 = isnan(0.0) ? _643 : (isnan(_643) ? 0.0 : max(_643, 0.0));
    float _707 = isnan(1.0) ? _3634 : (isnan(_3634) ? 1.0 : min(_3634, 1.0));
    float _3645 = isnan(0.0) ? _690 : (isnan(_690) ? 0.0 : max(_690, 0.0));
    float _3656 = isnan(0.0) ? _628 : (isnan(_628) ? 0.0 : max(_628, 0.0));
    float _3667 = isnan(0.0) ? _629 : (isnan(_629) ? 0.0 : max(_629, 0.0));
    float _3678 = isnan(0.0) ? _630 : (isnan(_630) ? 0.0 : max(_630, 0.0));
    float _725 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _766 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _776 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _766);
    float _777 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _766);
    float _778 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _766);
    float _782 = inversesqrt(dot(vec3(_776, _777, _778), vec3(_776, _777, _778)));
    float _783 = _776 * _782;
    float _784 = _777 * _782;
    float _785 = _778 * _782;
    float _791 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _792 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _810 = fma(_706, cbSceneParam._m0[5u].z, fma(_705, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _704));
    float _813 = fma(_706, cbSceneParam._m0[6u].z, fma(_705, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _704));
    float _816 = fma(_706, cbSceneParam._m0[7u].z, fma(_705, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _704));
    uint _830 = (_271 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _836 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3656 : (isnan(_3656) ? 1.0 : min(_3656, 1.0)))) * cbInstanceData._m0[_830].x;
    float _837 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3667 : (isnan(_3667) ? 1.0 : min(_3667, 1.0)))) * cbInstanceData._m0[_830].y;
    float _838 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3678 : (isnan(_3678) ? 1.0 : min(_3678, 1.0)))) * cbInstanceData._m0[_830].z;
    float _3689 = isnan(0.0) ? _836 : (isnan(_836) ? 0.0 : max(_836, 0.0));
    float _839 = isnan(1.0) ? _3689 : (isnan(_3689) ? 1.0 : min(_3689, 1.0));
    float _3700 = isnan(0.0) ? _837 : (isnan(_837) ? 0.0 : max(_837, 0.0));
    float _840 = isnan(1.0) ? _3700 : (isnan(_3700) ? 1.0 : min(_3700, 1.0));
    float _3711 = isnan(0.0) ? _838 : (isnan(_838) ? 0.0 : max(_838, 0.0));
    float _841 = isnan(1.0) ? _3711 : (isnan(_3711) ? 1.0 : min(_3711, 1.0));
    vec4 _850 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _791, cbSceneParam._m0[86u].y * _792));
    float _854 = ((isnan(1.0) ? _3645 : (isnan(_3645) ? 1.0 : min(_3645, 1.0))) * TEXCOORD_5.w) * _850.x;
    float _855 = dot(vec3(_704, _705, _706), vec3(_783, _784, _785));
    float _858 = _855 * 2.0;
    float _862 = (_858 * _704) - _783;
    float _863 = (_858 * _705) - _784;
    float _864 = (_858 * _706) - _785;
    float _868 = abs(dot(vec3(_783, _784, _785), vec3(_704, _705, _706)));
    float _3722 = isnan(0.0) ? _868 : (isnan(_868) ? 0.0 : max(_868, 0.0));
    float _870 = sqrt(_707);
    float _883 = exp2((_870 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3722 : (isnan(_3722) ? 1.0 : min(_3722, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_870 * 3.0));
    float _915 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _919 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _923 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1224;
    float _1226;
    float _1227;
    float _1228;
    float _1229;
    float _1230;
    float _1231;
    float _1232;
    float _1233;
    float _1234;
    float _1235;
    float _1236;
    float _1237;
    float _1238;
    float _1239;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _949 = fma(_923, cbModelParam._m0[26u].z, fma(_919, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _915));
        float _953 = fma(_923, cbModelParam._m0[27u].z, fma(_919, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _915));
        float _957 = fma(_923, cbModelParam._m0[28u].z, fma(_919, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _915));
        float _982 = _915 + _704;
        float _983 = _919 + _705;
        float _984 = _923 + _706;
        float _994 = fma(_984, cbModelParam._m0[26u].z, fma(_983, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _982)) - _949;
        float _995 = fma(_984, cbModelParam._m0[27u].z, fma(_983, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _982)) - _953;
        float _996 = fma(_984, cbModelParam._m0[28u].z, fma(_983, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _982)) - _957;
        float _1000 = inversesqrt(dot(vec3(_994, _995, _996), vec3(_994, _995, _996)));
        float _1013 = ((_1000 * _994) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_949 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1014 = ((_1000 * _995) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_953 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1015 = ((_1000 * _996) / cbModelParam._m0[34u].z) + ((((((_957 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1018 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1013, _1014, _1015), 0.0);
        vec4 _1025 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1013, _1014, _1015), 0.0);
        vec4 _1032 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1013, _1014, _1015), 0.0);
        vec4 _1039 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1013, _1014, _1015), 0.0);
        float _1052 = exp2((_1018.w + (-0.5)) * 20.0) * 2.0;
        float _1053 = _1052 * (_1018.x + (-0.5));
        float _1054 = _1052 * (_1018.y + (-0.5));
        float _1055 = _1052 * (_1018.z + (-0.5));
        float _1062 = exp2((_1025.w + (-0.5)) * 20.0) * 2.0;
        float _1063 = _1062 * (_1025.x + (-0.5));
        float _1064 = _1062 * (_1025.y + (-0.5));
        float _1065 = _1062 * (_1025.z + (-0.5));
        float _1072 = exp2((_1032.w + (-0.5)) * 20.0) * 2.0;
        float _1073 = _1072 * (_1032.x + (-0.5));
        float _1074 = _1072 * (_1032.y + (-0.5));
        float _1075 = _1072 * (_1032.z + (-0.5));
        float _1082 = exp2((_1039.w + (-0.5)) * 20.0) * 2.0;
        float _1083 = _1082 * (_1039.x + (-0.5));
        float _1084 = _1082 * (_1039.y + (-0.5));
        float _1085 = _1082 * (_1039.z + (-0.5));
        float _1086 = isnan(0.0) ? _1083 : (isnan(_1083) ? 0.0 : max(_1083, 0.0));
        float _1087 = isnan(0.0) ? _1084 : (isnan(_1084) ? 0.0 : max(_1084, 0.0));
        float _1088 = isnan(0.0) ? _1085 : (isnan(_1085) ? 0.0 : max(_1085, 0.0));
        float _1089 = _1053 * 0.5;
        float _1090 = _1063 * 0.5;
        float _1091 = _1073 * 0.5;
        float _1092 = dot(vec3(_1089, _1090, _1091), vec3(_1089, _1090, _1091));
        float _1097 = (_1092 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1092);
        float _1106 = (dot(vec3(_704, _705, _706), vec3(_1097 * _1089, _1097 * _1090, _1097 * _1091)) + 1.0) * 0.5;
        float _3748 = isnan(0.0) ? _1106 : (isnan(_1106) ? 0.0 : max(_1106, 0.0));
        float _1116 = sqrt(((_1090 * _1090) + (_1089 * _1089)) + (_1091 * _1091)) / (_1086 + 9.9999997473787516355514526367188e-06);
        float _3759 = isnan(0.0) ? _1116 : (isnan(_1116) ? 0.0 : max(_1116, 0.0));
        float _1117 = isnan(1.0) ? _3759 : (isnan(_3759) ? 1.0 : min(_3759, 1.0));
        float _1118 = _1117 * 2.0;
        float _1122 = (1.0 - _1117) / (_1117 + 1.0);
        float _3770 = isnan(0.0) ? _1122 : (isnan(_1122) ? 0.0 : max(_1122, 0.0));
        float _1123 = isnan(1.0) ? _3770 : (isnan(_3770) ? 1.0 : min(_3770, 1.0));
        float _1132 = ((((1.0 - _1123) * (_1118 + 2.0)) * exp2(log2(isnan(1.0) ? _3748 : (isnan(_3748) ? 1.0 : min(_3748, 1.0))) * (_1118 + 1.0))) + _1123) * _1086;
        float _1133 = _1054 * 0.5;
        float _1134 = _1064 * 0.5;
        float _1135 = _1074 * 0.5;
        float _1136 = dot(vec3(_1133, _1134, _1135), vec3(_1133, _1134, _1135));
        float _1141 = (_1136 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1136);
        float _1149 = (dot(vec3(_704, _705, _706), vec3(_1141 * _1133, _1141 * _1134, _1141 * _1135)) + 1.0) * 0.5;
        float _3781 = isnan(0.0) ? _1149 : (isnan(_1149) ? 0.0 : max(_1149, 0.0));
        float _1158 = sqrt(((_1134 * _1134) + (_1133 * _1133)) + (_1135 * _1135)) / (_1087 + 9.9999997473787516355514526367188e-06);
        float _3792 = isnan(0.0) ? _1158 : (isnan(_1158) ? 0.0 : max(_1158, 0.0));
        float _1159 = isnan(1.0) ? _3792 : (isnan(_3792) ? 1.0 : min(_3792, 1.0));
        float _1160 = _1159 * 2.0;
        float _1164 = (1.0 - _1159) / (_1159 + 1.0);
        float _3803 = isnan(0.0) ? _1164 : (isnan(_1164) ? 0.0 : max(_1164, 0.0));
        float _1165 = isnan(1.0) ? _3803 : (isnan(_3803) ? 1.0 : min(_3803, 1.0));
        float _1174 = ((((1.0 - _1165) * (_1160 + 2.0)) * exp2(log2(isnan(1.0) ? _3781 : (isnan(_3781) ? 1.0 : min(_3781, 1.0))) * (_1160 + 1.0))) + _1165) * _1087;
        float _1175 = _1055 * 0.5;
        float _1176 = _1065 * 0.5;
        float _1177 = _1075 * 0.5;
        float _1178 = dot(vec3(_1175, _1176, _1177), vec3(_1175, _1176, _1177));
        float _1183 = (_1178 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1178);
        float _1191 = (dot(vec3(_704, _705, _706), vec3(_1183 * _1175, _1183 * _1176, _1183 * _1177)) + 1.0) * 0.5;
        float _3814 = isnan(0.0) ? _1191 : (isnan(_1191) ? 0.0 : max(_1191, 0.0));
        float _1200 = sqrt(((_1176 * _1176) + (_1175 * _1175)) + (_1177 * _1177)) / (_1088 + 9.9999997473787516355514526367188e-06);
        float _3825 = isnan(0.0) ? _1200 : (isnan(_1200) ? 0.0 : max(_1200, 0.0));
        float _1201 = isnan(1.0) ? _3825 : (isnan(_3825) ? 1.0 : min(_3825, 1.0));
        float _1202 = _1201 * 2.0;
        float _1206 = (1.0 - _1201) / (_1201 + 1.0);
        float _3836 = isnan(0.0) ? _1206 : (isnan(_1206) ? 0.0 : max(_1206, 0.0));
        float _1207 = isnan(1.0) ? _3836 : (isnan(_3836) ? 1.0 : min(_3836, 1.0));
        float _1216 = ((((1.0 - _1207) * (_1202 + 2.0)) * exp2(log2(isnan(1.0) ? _3814 : (isnan(_3814) ? 1.0 : min(_3814, 1.0))) * (_1202 + 1.0))) + _1207) * _1088;
        _1224 = _1055;
        _1226 = _1054;
        _1227 = _1053;
        _1228 = _1065;
        _1229 = _1064;
        _1230 = _1063;
        _1231 = _1075;
        _1232 = _1074;
        _1233 = _1073;
        _1234 = _1088;
        _1235 = _1087;
        _1236 = _1086;
        _1237 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1132 : (isnan(_1132) ? 0.0 : max(_1132, 0.0)));
        _1238 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1174 : (isnan(_1174) ? 0.0 : max(_1174, 0.0)));
        _1239 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1216 : (isnan(_1216) ? 0.0 : max(_1216, 0.0)));
    }
    else
    {
        _1224 = _1225;
        _1226 = _1225;
        _1227 = _1225;
        _1228 = _1225;
        _1229 = _1225;
        _1230 = _1225;
        _1231 = _1225;
        _1232 = _1225;
        _1233 = _1225;
        _1234 = _1225;
        _1235 = _1225;
        _1236 = _1225;
        _1237 = 0.0;
        _1238 = 0.0;
        _1239 = 0.0;
    }
    float _1533;
    float _1534;
    float _1535;
    float _1536;
    float _1537;
    float _1538;
    float _1539;
    float _1540;
    float _1541;
    float _1542;
    float _1543;
    float _1544;
    float _1545;
    float _1546;
    float _1547;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1264 = fma(_923, cbModelParam._m0[30u].z, fma(_919, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _915));
        float _1268 = fma(_923, cbModelParam._m0[31u].z, fma(_919, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _915));
        float _1272 = fma(_923, cbModelParam._m0[32u].z, fma(_919, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _915));
        float _1295 = _915 + _704;
        float _1296 = _919 + _705;
        float _1297 = _923 + _706;
        float _1307 = fma(_1297, cbModelParam._m0[30u].z, fma(_1296, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1295)) - _1264;
        float _1308 = fma(_1297, cbModelParam._m0[31u].z, fma(_1296, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1295)) - _1268;
        float _1309 = fma(_1297, cbModelParam._m0[32u].z, fma(_1296, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1295)) - _1272;
        float _1313 = inversesqrt(dot(vec3(_1307, _1308, _1309), vec3(_1307, _1308, _1309)));
        float _1326 = ((_1313 * _1307) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1264 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1327 = ((_1313 * _1308) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1268 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1328 = ((_1313 * _1309) / cbModelParam._m0[35u].z) + ((((((_1272 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1330 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1326, _1327, _1328), 0.0);
        vec4 _1337 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1326, _1327, _1328), 0.0);
        vec4 _1344 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1326, _1327, _1328), 0.0);
        vec4 _1351 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1326, _1327, _1328), 0.0);
        float _1363 = exp2((_1330.w + (-0.5)) * 20.0) * 2.0;
        float _1364 = _1363 * (_1330.x + (-0.5));
        float _1365 = _1363 * (_1330.y + (-0.5));
        float _1366 = _1363 * (_1330.z + (-0.5));
        float _1373 = exp2((_1337.w + (-0.5)) * 20.0) * 2.0;
        float _1374 = _1373 * (_1337.x + (-0.5));
        float _1375 = _1373 * (_1337.y + (-0.5));
        float _1376 = _1373 * (_1337.z + (-0.5));
        float _1383 = exp2((_1344.w + (-0.5)) * 20.0) * 2.0;
        float _1384 = _1383 * (_1344.x + (-0.5));
        float _1385 = _1383 * (_1344.y + (-0.5));
        float _1386 = _1383 * (_1344.z + (-0.5));
        float _1393 = exp2((_1351.w + (-0.5)) * 20.0) * 2.0;
        float _1394 = _1393 * (_1351.x + (-0.5));
        float _1395 = _1393 * (_1351.y + (-0.5));
        float _1396 = _1393 * (_1351.z + (-0.5));
        float _1397 = isnan(0.0) ? _1394 : (isnan(_1394) ? 0.0 : max(_1394, 0.0));
        float _1398 = isnan(0.0) ? _1395 : (isnan(_1395) ? 0.0 : max(_1395, 0.0));
        float _1399 = isnan(0.0) ? _1396 : (isnan(_1396) ? 0.0 : max(_1396, 0.0));
        float _1400 = _1364 * 0.5;
        float _1401 = _1374 * 0.5;
        float _1402 = _1384 * 0.5;
        float _1403 = dot(vec3(_1400, _1401, _1402), vec3(_1400, _1401, _1402));
        float _1408 = (_1403 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1403);
        float _1416 = (dot(vec3(_704, _705, _706), vec3(_1408 * _1400, _1408 * _1401, _1408 * _1402)) + 1.0) * 0.5;
        float _3877 = isnan(0.0) ? _1416 : (isnan(_1416) ? 0.0 : max(_1416, 0.0));
        float _1425 = sqrt(((_1401 * _1401) + (_1400 * _1400)) + (_1402 * _1402)) / (_1397 + 9.9999997473787516355514526367188e-06);
        float _3888 = isnan(0.0) ? _1425 : (isnan(_1425) ? 0.0 : max(_1425, 0.0));
        float _1426 = isnan(1.0) ? _3888 : (isnan(_3888) ? 1.0 : min(_3888, 1.0));
        float _1427 = _1426 * 2.0;
        float _1431 = (1.0 - _1426) / (_1426 + 1.0);
        float _3899 = isnan(0.0) ? _1431 : (isnan(_1431) ? 0.0 : max(_1431, 0.0));
        float _1432 = isnan(1.0) ? _3899 : (isnan(_3899) ? 1.0 : min(_3899, 1.0));
        float _1441 = ((((1.0 - _1432) * (_1427 + 2.0)) * exp2(log2(isnan(1.0) ? _3877 : (isnan(_3877) ? 1.0 : min(_3877, 1.0))) * (_1427 + 1.0))) + _1432) * _1397;
        float _1442 = _1365 * 0.5;
        float _1443 = _1375 * 0.5;
        float _1444 = _1385 * 0.5;
        float _1445 = dot(vec3(_1442, _1443, _1444), vec3(_1442, _1443, _1444));
        float _1450 = (_1445 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1445);
        float _1458 = (dot(vec3(_704, _705, _706), vec3(_1450 * _1442, _1450 * _1443, _1450 * _1444)) + 1.0) * 0.5;
        float _3910 = isnan(0.0) ? _1458 : (isnan(_1458) ? 0.0 : max(_1458, 0.0));
        float _1467 = sqrt(((_1443 * _1443) + (_1442 * _1442)) + (_1444 * _1444)) / (_1398 + 9.9999997473787516355514526367188e-06);
        float _3921 = isnan(0.0) ? _1467 : (isnan(_1467) ? 0.0 : max(_1467, 0.0));
        float _1468 = isnan(1.0) ? _3921 : (isnan(_3921) ? 1.0 : min(_3921, 1.0));
        float _1469 = _1468 * 2.0;
        float _1473 = (1.0 - _1468) / (_1468 + 1.0);
        float _3932 = isnan(0.0) ? _1473 : (isnan(_1473) ? 0.0 : max(_1473, 0.0));
        float _1474 = isnan(1.0) ? _3932 : (isnan(_3932) ? 1.0 : min(_3932, 1.0));
        float _1483 = ((((1.0 - _1474) * (_1469 + 2.0)) * exp2(log2(isnan(1.0) ? _3910 : (isnan(_3910) ? 1.0 : min(_3910, 1.0))) * (_1469 + 1.0))) + _1474) * _1398;
        float _1484 = _1366 * 0.5;
        float _1485 = _1376 * 0.5;
        float _1486 = _1386 * 0.5;
        float _1487 = dot(vec3(_1484, _1485, _1486), vec3(_1484, _1485, _1486));
        float _1492 = (_1487 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1487);
        float _1500 = (dot(vec3(_704, _705, _706), vec3(_1492 * _1484, _1492 * _1485, _1492 * _1486)) + 1.0) * 0.5;
        float _3943 = isnan(0.0) ? _1500 : (isnan(_1500) ? 0.0 : max(_1500, 0.0));
        float _1509 = sqrt(((_1485 * _1485) + (_1484 * _1484)) + (_1486 * _1486)) / (_1399 + 9.9999997473787516355514526367188e-06);
        float _3954 = isnan(0.0) ? _1509 : (isnan(_1509) ? 0.0 : max(_1509, 0.0));
        float _1510 = isnan(1.0) ? _3954 : (isnan(_3954) ? 1.0 : min(_3954, 1.0));
        float _1511 = _1510 * 2.0;
        float _1515 = (1.0 - _1510) / (_1510 + 1.0);
        float _3965 = isnan(0.0) ? _1515 : (isnan(_1515) ? 0.0 : max(_1515, 0.0));
        float _1516 = isnan(1.0) ? _3965 : (isnan(_3965) ? 1.0 : min(_3965, 1.0));
        float _1525 = ((((1.0 - _1516) * (_1511 + 2.0)) * exp2(log2(isnan(1.0) ? _3943 : (isnan(_3943) ? 1.0 : min(_3943, 1.0))) * (_1511 + 1.0))) + _1516) * _1399;
        _1533 = _1366;
        _1534 = _1365;
        _1535 = _1364;
        _1536 = _1376;
        _1537 = _1375;
        _1538 = _1374;
        _1539 = _1386;
        _1540 = _1385;
        _1541 = _1384;
        _1542 = _1399;
        _1543 = _1398;
        _1544 = _1397;
        _1545 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1441 : (isnan(_1441) ? 0.0 : max(_1441, 0.0)));
        _1546 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1483 : (isnan(_1483) ? 0.0 : max(_1483, 0.0)));
        _1547 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1525 : (isnan(_1525) ? 0.0 : max(_1525, 0.0)));
    }
    else
    {
        _1533 = _1225;
        _1534 = _1225;
        _1535 = _1225;
        _1536 = _1225;
        _1537 = _1225;
        _1538 = _1225;
        _1539 = _1225;
        _1540 = _1225;
        _1541 = _1225;
        _1542 = _1225;
        _1543 = _1225;
        _1544 = _1225;
        _1545 = 0.0;
        _1546 = 0.0;
        _1547 = 0.0;
    }
    float _1557 = (cbModelParam._m0[1u].x * (_1545 - _1237)) + _1237;
    float _1558 = (cbModelParam._m0[1u].x * (_1546 - _1238)) + _1238;
    float _1559 = (cbModelParam._m0[1u].x * (_1547 - _1239)) + _1239;
    float _1580 = fma(_1559, cbSceneParam._m0[89u].z, fma(_1558, cbSceneParam._m0[89u].y, _1557 * cbSceneParam._m0[89u].x));
    float _1583 = fma(_1559, cbSceneParam._m0[90u].z, fma(_1558, cbSceneParam._m0[90u].y, _1557 * cbSceneParam._m0[90u].x));
    float _1586 = fma(_1559, cbSceneParam._m0[91u].z, fma(_1558, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1557));
    float _1601 = _862 * 0.5;
    float _1602 = _863 * 0.5;
    float _1603 = _864 * 0.5;
    float _1604 = dot(vec4(_1601, _1602, _1603, 1.0), vec4(_1535, _1538, _1541, _1544));
    float _1607 = dot(vec4(_1601, _1602, _1603, 1.0), vec4(_1534, _1537, _1540, _1543));
    float _1610 = dot(vec4(_1601, _1602, _1603, 1.0), vec4(_1533, _1536, _1539, _1542));
    float _1644;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1617 = dot(vec4(_1601, _1602, _1603, 1.0), vec4(_1224, _1228, _1231, _1234));
        float _1621 = dot(vec4(_1601, _1602, _1603, 1.0), vec4(_1226, _1229, _1232, _1235));
        float _1625 = dot(vec4(_1601, _1602, _1603, 1.0), vec4(_1227, _1230, _1233, _1236));
        float _1632 = dot(vec4(cbModelParam._m0[39u]), vec4(_1601, _1602, _1603, 1.0));
        _1644 = dot(vec3(isnan(0.0) ? _1625 : (isnan(_1625) ? 0.0 : max(_1625, 0.0)), isnan(0.0) ? _1621 : (isnan(_1621) ? 0.0 : max(_1621, 0.0)), isnan(0.0) ? _1617 : (isnan(_1617) ? 0.0 : max(_1617, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1632) ? 0.0 : (isnan(0.0) ? _1632 : max(0.0, _1632))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1644 = 1.0;
    }
    float _1655;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1646 = dot(vec4(cbModelParam._m0[40u]), vec4(_1601, _1602, _1603, 1.0));
        _1655 = dot(vec3(isnan(0.0) ? _1604 : (isnan(_1604) ? 0.0 : max(_1604, 0.0)), isnan(0.0) ? _1607 : (isnan(_1607) ? 0.0 : max(_1607, 0.0)), isnan(0.0) ? _1610 : (isnan(_1610) ? 0.0 : max(_1610, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1646) ? 0.0 : (isnan(0.0) ? _1646 : max(0.0, _1646))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1655 = 1.0;
    }
    float _1659 = (_1655 * cbModelParam._m0[1u].x) + (_1644 * (1.0 - cbModelParam._m0[1u].x));
    float _1669 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _707);
    float _1670 = isnan(_1669) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1669 : min(cbModelParam._m0[25u].z, _1669));
    float _1752;
    float _1754;
    float _1756;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1719 = fma(_923, cbModelParam._m0[13u].z, fma(_919, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _915)) + cbModelParam._m0[13u].w;
        float _1723 = fma(_923, cbModelParam._m0[14u].z, fma(_919, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _915)) + cbModelParam._m0[14u].w;
        float _1727 = fma(_923, cbModelParam._m0[15u].z, fma(_919, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _915)) + cbModelParam._m0[15u].w;
        float _1730 = fma(_864, cbModelParam._m0[13u].z, fma(_863, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _862));
        float _1733 = fma(_864, cbModelParam._m0[14u].z, fma(_863, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _862));
        float _1736 = fma(_864, cbModelParam._m0[15u].z, fma(_863, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _862));
        float _1764;
        if (_1730 > 0.0)
        {
            _1764 = abs((1.0 - _1719) / _1730);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1730 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1719 + 1.0) / _1730);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1764 = frontier_phi_14_12_ladder;
        }
        float _1987;
        if (_1733 > 0.0)
        {
            _1987 = abs((1.0 - _1723) / _1733);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1733 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1723 + 1.0) / _1733);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1987 = frontier_phi_23_19_ladder;
        }
        float _2233;
        if (_1736 > 0.0)
        {
            _2233 = abs((1.0 - _1727) / _1736);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1736 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1727 + 1.0) / _1736);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2233 = frontier_phi_35_30_ladder;
        }
        float _2235 = isnan(_1987) ? _1764 : (isnan(_1764) ? _1987 : min(_1764, _1987));
        float _2236 = isnan(_2233) ? _2235 : (isnan(_2235) ? _2233 : min(_2235, _2233));
        float _2240 = (_2236 * _1730) + _1719;
        float _2241 = (_2236 * _1733) + _1723;
        float _2242 = (_2236 * _1736) + _1727;
        float _2243 = _2236 * 9.9999997473787516355514526367188e-05;
        float _2245 = (-1.0) - _2243;
        float _2247 = _2243 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2242 > _2247) || ((_2242 < _2245) || ((_2241 > _2247) || ((_2241 < _2245) || ((_2240 < _2245) || (_2240 > _2247))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2366 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2242, cbModelParam._m0[9u].z, fma(_2241, cbModelParam._m0[9u].y, _2240 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2242, cbModelParam._m0[10u].z, fma(_2241, cbModelParam._m0[10u].y, _2240 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2242, cbModelParam._m0[11u].z, fma(_2241, cbModelParam._m0[11u].y, _2240 * cbModelParam._m0[11u].x))), _1670);
            frontier_phi_13_35_ladder = _2366.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2366.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2366.x * cbModelParam._m0[1u].y;
        }
        _1752 = frontier_phi_13_35_ladder_2;
        _1754 = frontier_phi_13_35_ladder_1;
        _1756 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1740 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_862, _863, _864), _1670);
        _1752 = _1740.x * cbModelParam._m0[1u].y;
        _1754 = _1740.y * cbModelParam._m0[1u].y;
        _1756 = _1740.z * cbModelParam._m0[1u].y;
    }
    float _1760 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _707);
    float _1761 = isnan(_1760) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1760 : min(cbModelParam._m0[25u].w, _1760));
    float _1852;
    float _1854;
    float _1856;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1816 = fma(_923, cbModelParam._m0[21u].z, fma(_919, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _915)) + cbModelParam._m0[21u].w;
        float _1820 = fma(_923, cbModelParam._m0[22u].z, fma(_919, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _915)) + cbModelParam._m0[22u].w;
        float _1824 = fma(_923, cbModelParam._m0[23u].z, fma(_919, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _915)) + cbModelParam._m0[23u].w;
        float _1827 = fma(_864, cbModelParam._m0[21u].z, fma(_863, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _862));
        float _1830 = fma(_864, cbModelParam._m0[22u].z, fma(_863, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _862));
        float _1833 = fma(_864, cbModelParam._m0[23u].z, fma(_863, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _862));
        float _1992;
        if (_1827 > 0.0)
        {
            _1992 = abs((1.0 - _1816) / _1827);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1827 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1816 + 1.0) / _1827);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1992 = frontier_phi_25_21_ladder;
        }
        float _2260;
        if (_1830 > 0.0)
        {
            _2260 = abs((1.0 - _1820) / _1830);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1830 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1820 + 1.0) / _1830);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2260 = frontier_phi_37_32_ladder;
        }
        float _2465;
        if (_1833 > 0.0)
        {
            _2465 = abs((1.0 - _1824) / _1833);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1833 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1824 + 1.0) / _1833);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2465 = frontier_phi_46_43_ladder;
        }
        float _2467 = isnan(_2260) ? _1992 : (isnan(_1992) ? _2260 : min(_1992, _2260));
        float _2468 = isnan(_2465) ? _2467 : (isnan(_2467) ? _2465 : min(_2467, _2465));
        float _2472 = (_2468 * _1827) + _1816;
        float _2473 = (_2468 * _1830) + _1820;
        float _2474 = (_2468 * _1833) + _1824;
        float _2475 = _2468 * 9.9999997473787516355514526367188e-05;
        float _2476 = (-1.0) - _2475;
        float _2478 = _2475 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2474 > _2478) || ((_2474 < _2476) || ((_2473 > _2478) || ((_2473 < _2476) || ((_2472 < _2476) || (_2472 > _2478))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2673 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2474, cbModelParam._m0[17u].z, fma(_2473, cbModelParam._m0[17u].y, _2472 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2474, cbModelParam._m0[18u].z, fma(_2473, cbModelParam._m0[18u].y, _2472 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2474, cbModelParam._m0[19u].z, fma(_2473, cbModelParam._m0[19u].y, _2472 * cbModelParam._m0[19u].x))), _1761);
            frontier_phi_22_46_ladder = _2673.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2673.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2673.x * cbModelParam._m0[1u].z;
        }
        _1852 = frontier_phi_22_46_ladder_2;
        _1854 = frontier_phi_22_46_ladder_1;
        _1856 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1836 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_862, _863, _864), _1761);
        _1852 = _1836.x * cbModelParam._m0[1u].z;
        _1854 = _1836.y * cbModelParam._m0[1u].z;
        _1856 = _1836.z * cbModelParam._m0[1u].z;
    }
    float _1868 = ((((1.0 - _883) * ((_870 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_883 * _870)) * _854;
    float _1869 = _1868 * ((cbModelParam._m0[1u].w * (_1852 - _1752)) + _1752);
    float _1870 = _1868 * ((cbModelParam._m0[1u].w * (_1854 - _1754)) + _1754);
    float _1871 = _1868 * ((cbModelParam._m0[1u].w * (_1856 - _1756)) + _1756);
    float _1874 = fma(_1871, cbSceneParam._m0[89u].z, fma(_1870, cbSceneParam._m0[89u].y, _1869 * cbSceneParam._m0[89u].x));
    float _1877 = fma(_1871, cbSceneParam._m0[90u].z, fma(_1870, cbSceneParam._m0[90u].y, _1869 * cbSceneParam._m0[90u].x));
    float _1880 = fma(_1871, cbSceneParam._m0[91u].z, fma(_1870, cbSceneParam._m0[91u].y, _1869 * cbSceneParam._m0[91u].x));
    vec4 _1888 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_791, _792));
    float _1890 = _1888.w;
    float _1902 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1890);
    float _1903 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1890);
    float _1904 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1890);
    uvec4 _1908 = floatBitsToUint(cbInstanceData._m0[_271 + 5u]);
    uint _1910 = _1908.x * 14u;
    uint _1911 = _1910 + 13u;
    float _1918 = _854 + (-1.0);
    float _1923 = (cbLight._m0[_1911].x * _1918) + 1.0;
    float _1924 = (cbLight._m0[_1911].y * _1918) + 1.0;
    float _1925 = (cbLight._m0[_1911].z * _1918) + 1.0;
    float _1926 = (cbLight._m0[_1911].w * _1918) + 1.0;
    uint _1927 = _1910 + 5u;
    float _1933 = isnan(1.0) ? _1924 : (isnan(_1924) ? 1.0 : min(_1924, 1.0));
    uint _1937 = _1910 + 4u;
    float _1946 = isnan(1.0) ? _1923 : (isnan(_1923) ? 1.0 : min(_1923, 1.0));
    uint _1950 = _1910 | 1u;
    float _1961 = dot(vec3(cbLight._m0[_1910].xyz), vec3(_704, _705, _706));
    float _1964 = dot(vec3(cbLight._m0[_1950].xyz), vec3(_704, _705, _706));
    float _4101 = isnan(0.0) ? _1961 : (isnan(_1961) ? 0.0 : max(_1961, 0.0));
    float _4112 = isnan(0.0) ? _1964 : (isnan(_1964) ? 0.0 : max(_1964, 0.0));
    float _1969 = (isnan(1.0) ? _4101 : (isnan(_4101) ? 1.0 : min(_4101, 1.0))) * 0.3183098733425140380859375;
    float _1971 = (isnan(1.0) ? _4112 : (isnan(_4112) ? 1.0 : min(_4112, 1.0))) * 0.3183098733425140380859375;
    float _1978 = ((cbLight._m0[_1927].x * _1933) * _1971) + (((cbLight._m0[_1937].x * _1902) * _1946) * _1969);
    float _1979 = ((_1933 * cbLight._m0[_1927].y) * _1971) + (((cbLight._m0[_1937].y * _1903) * _1946) * _1969);
    float _1980 = ((_1933 * cbLight._m0[_1927].z) * _1971) + (((cbLight._m0[_1937].z * _1904) * _1946) * _1969);
    uvec4 _1984 = floatBitsToUint(cbLight._m0[_1910 + 12u]);
    bool _1986 = _1984.x == 0u;
    float _1997;
    float _1999;
    float _2001;
    if (_1986)
    {
        _1997 = _1978;
        _1999 = _1979;
        _2001 = _1980;
    }
    else
    {
        uint _2005 = _1910 + 6u;
        float _2021 = (dot(vec3(cbLight._m0[_1910 + 2u].xyz), vec3(_704, _705, _706)) * 0.5) + 0.5;
        float _2022 = _2021 * _2021;
        float _4123 = isnan(0.0) ? _2022 : (isnan(_2022) ? 0.0 : max(_2022, 0.0));
        float _2023 = isnan(1.0) ? _4123 : (isnan(_4123) ? 1.0 : min(_4123, 1.0));
        float _2024 = isnan(1.0) ? _1925 : (isnan(_1925) ? 1.0 : min(_1925, 1.0));
        _1997 = (((cbLight._m0[_2005].x * 0.3183098733425140380859375) * _2023) * _2024) + _1978;
        _1999 = (((cbLight._m0[_2005].y * 0.3183098733425140380859375) * _2023) * _2024) + _1979;
        _2001 = (((cbLight._m0[_2005].z * 0.3183098733425140380859375) * _2023) * _2024) + _1980;
    }
    bool _2004 = _1984.y == 0u;
    float _2042;
    float _2044;
    float _2046;
    if (_2004)
    {
        _2042 = _1997;
        _2044 = _1999;
        _2046 = _2001;
    }
    else
    {
        uint _2204 = _1910 + 7u;
        float _2220 = (dot(vec3(cbLight._m0[_1910 + 3u].xyz), vec3(_704, _705, _706)) * 0.5) + 0.5;
        float _2221 = _2220 * _2220;
        float _4139 = isnan(0.0) ? _2221 : (isnan(_2221) ? 0.0 : max(_2221, 0.0));
        float _2222 = isnan(1.0) ? _4139 : (isnan(_4139) ? 1.0 : min(_4139, 1.0));
        float _2223 = isnan(1.0) ? _1926 : (isnan(_1926) ? 1.0 : min(_1926, 1.0));
        _2042 = (((cbLight._m0[_2204].x * 0.3183098733425140380859375) * _2222) * _2223) + _1997;
        _2044 = (((cbLight._m0[_2204].y * 0.3183098733425140380859375) * _2222) * _2223) + _1999;
        _2046 = (((cbLight._m0[_2204].z * 0.3183098733425140380859375) * _2222) * _2223) + _2001;
    }
    uint _2049 = _1910 + 8u;
    float _2062 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1910].w)) * _707) * 0.949999988079071044921875);
    float _2063 = _2062 * _2062;
    float _2064 = cbLight._m0[_1910].x + _783;
    float _2065 = cbLight._m0[_1910].y + _784;
    float _2066 = cbLight._m0[_1910].z + _785;
    float _2070 = inversesqrt(dot(vec3(_2064, _2065, _2066), vec3(_2064, _2065, _2066)));
    float _2071 = _2070 * _2064;
    float _2072 = _2070 * _2065;
    float _2073 = _2070 * _2066;
    float _2074 = dot(vec3(_704, _705, _706), vec3(cbLight._m0[_1910].xyz));
    float _4155 = isnan(0.0) ? _2074 : (isnan(_2074) ? 0.0 : max(_2074, 0.0));
    float _2077 = isnan(1.0) ? _4155 : (isnan(_4155) ? 1.0 : min(_4155, 1.0));
    float _4166 = isnan(0.0) ? _855 : (isnan(_855) ? 0.0 : max(_855, 0.0));
    float _2078 = isnan(1.0) ? _4166 : (isnan(_4166) ? 1.0 : min(_4166, 1.0));
    float _2079 = dot(vec3(_704, _705, _706), vec3(_2071, _2072, _2073));
    float _4177 = isnan(0.0) ? _2079 : (isnan(_2079) ? 0.0 : max(_2079, 0.0));
    float _2082 = isnan(1.0) ? _4177 : (isnan(_4177) ? 1.0 : min(_4177, 1.0));
    float _2083 = dot(vec3(cbLight._m0[_1910].xyz), vec3(_2071, _2072, _2073));
    float _4188 = isnan(0.0) ? _2083 : (isnan(_2083) ? 0.0 : max(_2083, 0.0));
    float _2087 = _2063 * _2063;
    float _2091 = ((_2082 * _2082) * (_2087 + (-1.0))) + 1.0;
    float _2102 = (exp2(log2(1.0 - (isnan(1.0) ? _4188 : (isnan(_4188) ? 1.0 : min(_4188, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2103 = 1.0 - _2063;
    float _2114 = (0.5 / (((_2078 * ((_2077 * _2103) + _2063)) + 9.9999999392252902907785028219223e-09) + (((_2078 * _2103) + _2063) * _2077))) * _2077;
    float _4199 = isnan(0.0) ? _2114 : (isnan(_2114) ? 0.0 : max(_2114, 0.0));
    float _2116 = (isnan(1.0) ? _4199 : (isnan(_4199) ? 1.0 : min(_4199, 1.0))) * (_2087 / ((_2091 * _2091) * 3.141590118408203125));
    uint _2130 = _1910 + 9u;
    float _2141 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1950].w)) * _707) * 0.949999988079071044921875);
    float _2142 = _2141 * _2141;
    float _2143 = cbLight._m0[_1950].x + _783;
    float _2144 = cbLight._m0[_1950].y + _784;
    float _2145 = cbLight._m0[_1950].z + _785;
    float _2149 = inversesqrt(dot(vec3(_2143, _2144, _2145), vec3(_2143, _2144, _2145)));
    float _2150 = _2149 * _2143;
    float _2151 = _2149 * _2144;
    float _2152 = _2149 * _2145;
    float _2153 = dot(vec3(_704, _705, _706), vec3(cbLight._m0[_1950].xyz));
    float _4210 = isnan(0.0) ? _2153 : (isnan(_2153) ? 0.0 : max(_2153, 0.0));
    float _2156 = isnan(1.0) ? _4210 : (isnan(_4210) ? 1.0 : min(_4210, 1.0));
    float _2157 = dot(vec3(_704, _705, _706), vec3(_2150, _2151, _2152));
    float _4221 = isnan(0.0) ? _2157 : (isnan(_2157) ? 0.0 : max(_2157, 0.0));
    float _2160 = isnan(1.0) ? _4221 : (isnan(_4221) ? 1.0 : min(_4221, 1.0));
    float _2161 = dot(vec3(cbLight._m0[_1950].xyz), vec3(_2150, _2151, _2152));
    float _4232 = isnan(0.0) ? _2161 : (isnan(_2161) ? 0.0 : max(_2161, 0.0));
    float _2165 = _2142 * _2142;
    float _2169 = ((_2160 * _2160) * (_2165 + (-1.0))) + 1.0;
    float _2178 = (exp2(log2(1.0 - (isnan(1.0) ? _4232 : (isnan(_4232) ? 1.0 : min(_4232, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2179 = 1.0 - _2142;
    float _2189 = (0.5 / (((_2078 * ((_2156 * _2179) + _2142)) + 9.9999999392252902907785028219223e-09) + (((_2078 * _2179) + _2142) * _2156))) * _2156;
    float _4243 = isnan(0.0) ? _2189 : (isnan(_2189) ? 0.0 : max(_2189, 0.0));
    float _2191 = (isnan(1.0) ? _4243 : (isnan(_4243) ? 1.0 : min(_4243, 1.0))) * (_2165 / ((_2169 * _2169) * 3.141590118408203125));
    float _2201 = (((_2178 * cbLight._m0[_2130].x) * _2191) * _1933) + ((((cbLight._m0[_2049].x * _1902) * _2102) * _2116) * _1946);
    float _2202 = (((_2178 * cbLight._m0[_2130].y) * _2191) * _1933) + ((((cbLight._m0[_2049].y * _1903) * _2102) * _2116) * _1946);
    float _2203 = (((_2178 * cbLight._m0[_2130].z) * _2191) * _1933) + ((((cbLight._m0[_2049].z * _1904) * _2102) * _2116) * _1946);
    float _2265;
    float _2267;
    float _2269;
    if (_1986)
    {
        _2265 = _2201;
        _2267 = _2202;
        _2269 = _2203;
    }
    else
    {
        uint _2271 = _1910 + 2u;
        uint _2275 = _1910 + 10u;
        float _2289 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2271].w)) * _707) * 0.949999988079071044921875);
        float _2290 = _2289 * _2289;
        float _2291 = cbLight._m0[_2271].x + _783;
        float _2292 = cbLight._m0[_2271].y + _784;
        float _2293 = cbLight._m0[_2271].z + _785;
        float _2297 = inversesqrt(dot(vec3(_2291, _2292, _2293), vec3(_2291, _2292, _2293)));
        float _2298 = _2297 * _2291;
        float _2299 = _2297 * _2292;
        float _2300 = _2297 * _2293;
        float _2301 = dot(vec3(_704, _705, _706), vec3(cbLight._m0[_2271].xyz));
        float _4254 = isnan(0.0) ? _2301 : (isnan(_2301) ? 0.0 : max(_2301, 0.0));
        float _2304 = isnan(1.0) ? _4254 : (isnan(_4254) ? 1.0 : min(_4254, 1.0));
        float _2305 = dot(vec3(_704, _705, _706), vec3(_2298, _2299, _2300));
        float _4265 = isnan(0.0) ? _2305 : (isnan(_2305) ? 0.0 : max(_2305, 0.0));
        float _2308 = isnan(1.0) ? _4265 : (isnan(_4265) ? 1.0 : min(_4265, 1.0));
        float _2309 = dot(vec3(cbLight._m0[_2271].xyz), vec3(_2298, _2299, _2300));
        float _4276 = isnan(0.0) ? _2309 : (isnan(_2309) ? 0.0 : max(_2309, 0.0));
        float _2313 = _2290 * _2290;
        float _2317 = ((_2308 * _2308) * (_2313 + (-1.0))) + 1.0;
        float _2326 = (exp2(log2(1.0 - (isnan(1.0) ? _4276 : (isnan(_4276) ? 1.0 : min(_4276, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2327 = 1.0 - _2290;
        float _2337 = (0.5 / (((_2078 * ((_2304 * _2327) + _2290)) + 9.9999999392252902907785028219223e-09) + (((_2078 * _2327) + _2290) * _2304))) * _2304;
        float _4287 = isnan(0.0) ? _2337 : (isnan(_2337) ? 0.0 : max(_2337, 0.0));
        float _2339 = (isnan(1.0) ? _4287 : (isnan(_4287) ? 1.0 : min(_4287, 1.0))) * (_2313 / ((_2317 * _2317) * 3.141590118408203125));
        float _2340 = isnan(1.0) ? _1925 : (isnan(_1925) ? 1.0 : min(_1925, 1.0));
        _2265 = (((_2326 * cbLight._m0[_2275].x) * _2339) * _2340) + _2201;
        _2267 = (((_2326 * cbLight._m0[_2275].y) * _2339) * _2340) + _2202;
        _2269 = (((_2326 * cbLight._m0[_2275].z) * _2339) * _2340) + _2203;
    }
    float _2375;
    float _2377;
    float _2379;
    if (_2004)
    {
        _2375 = _2265;
        _2377 = _2267;
        _2379 = _2269;
    }
    else
    {
        uint _2386 = _1910 + 3u;
        uint _2390 = _1910 + 11u;
        float _2404 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2386].w)) * _707) * 0.949999988079071044921875);
        float _2405 = _2404 * _2404;
        float _2406 = cbLight._m0[_2386].x + _783;
        float _2407 = cbLight._m0[_2386].y + _784;
        float _2408 = cbLight._m0[_2386].z + _785;
        float _2412 = inversesqrt(dot(vec3(_2406, _2407, _2408), vec3(_2406, _2407, _2408)));
        float _2413 = _2412 * _2406;
        float _2414 = _2412 * _2407;
        float _2415 = _2412 * _2408;
        float _2416 = dot(vec3(_704, _705, _706), vec3(cbLight._m0[_2386].xyz));
        float _4303 = isnan(0.0) ? _2416 : (isnan(_2416) ? 0.0 : max(_2416, 0.0));
        float _2419 = isnan(1.0) ? _4303 : (isnan(_4303) ? 1.0 : min(_4303, 1.0));
        float _2420 = dot(vec3(_704, _705, _706), vec3(_2413, _2414, _2415));
        float _4314 = isnan(0.0) ? _2420 : (isnan(_2420) ? 0.0 : max(_2420, 0.0));
        float _2423 = isnan(1.0) ? _4314 : (isnan(_4314) ? 1.0 : min(_4314, 1.0));
        float _2424 = dot(vec3(cbLight._m0[_2386].xyz), vec3(_2413, _2414, _2415));
        float _4325 = isnan(0.0) ? _2424 : (isnan(_2424) ? 0.0 : max(_2424, 0.0));
        float _2428 = _2405 * _2405;
        float _2432 = ((_2423 * _2423) * (_2428 + (-1.0))) + 1.0;
        float _2441 = (exp2(log2(1.0 - (isnan(1.0) ? _4325 : (isnan(_4325) ? 1.0 : min(_4325, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2442 = 1.0 - _2405;
        float _2452 = (0.5 / (((_2078 * ((_2419 * _2442) + _2405)) + 9.9999999392252902907785028219223e-09) + (((_2078 * _2442) + _2405) * _2419))) * _2419;
        float _4336 = isnan(0.0) ? _2452 : (isnan(_2452) ? 0.0 : max(_2452, 0.0));
        float _2454 = (isnan(1.0) ? _4336 : (isnan(_4336) ? 1.0 : min(_4336, 1.0))) * (_2428 / ((_2432 * _2432) * 3.141590118408203125));
        float _2455 = isnan(1.0) ? _1926 : (isnan(_1926) ? 1.0 : min(_1926, 1.0));
        _2375 = (((_2441 * cbLight._m0[_2390].x) * _2454) * _2455) + _2265;
        _2377 = (((_2441 * cbLight._m0[_2390].y) * _2454) * _2455) + _2267;
        _2379 = (((_2441 * cbLight._m0[_2390].z) * _2454) * _2455) + _2269;
    }
    float _2590;
    float _2592;
    float _2594;
    float _2596;
    float _2598;
    float _2600;
    if (_1908.y == 0u)
    {
        float _2530 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2531 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2530;
        float _2532 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2530;
        float _2533 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2530;
        uvec4 _2545 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2546 = _2545.x;
        uint _2557 = uint((float(_2545.y) * floor(float(uint(cbSceneParam._m0[85u].y * _792) / _2546))) + floor(float(uint(cbSceneParam._m0[85u].x * _791) / _2546)));
        float _2567 = (log2(_2533 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2568 = isnan(0.0) ? _2567 : (isnan(_2567) ? 0.0 : max(_2567, 0.0));
        uint _2571 = uint(isnan(14.0) ? _2568 : (isnan(_2568) ? 14.0 : min(_2568, 14.0)));
        uvec4 _2576 = texelFetch(g_lightClusterGridBuffer, int(((_2571 << 2u) + (_2557 << 6u)) >> 2u));
        uint _2577 = _2576.x;
        uint _2578 = _2545.z;
        float _2678;
        float _2680;
        float _2682;
        float _2684;
        float _2686;
        float _2688;
        if (((((1u << ((_2578 >> 4u) & 15u)) + 4294967295u) & _2577) == 0u) || ((_2578 & 240u) == 0u))
        {
            _2678 = 0.0;
            _2680 = 0.0;
            _2682 = 0.0;
            _2684 = 0.0;
            _2686 = 0.0;
            _2688 = 0.0;
        }
        else
        {
            float _2679;
            float _2681;
            float _2683;
            float _2685;
            float _2687;
            float _2689;
            float _2823 = 0.0;
            float _2824 = 0.0;
            float _2825 = 0.0;
            float _2826 = 0.0;
            float _2827 = 0.0;
            float _2828 = 0.0;
            uint _2829 = 0u;
            uint _2838;
            bool _2839;
            for (;;)
            {
                _2838 = texelFetch(g_lightClassification, int((((_2571 << 5u) + (_2557 << 9u)) + (_2829 << 2u)) >> 2u)).x;
                _2839 = _2838 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2839)
                {
                    frontier_phi_61_pred = _2823;
                    frontier_phi_61_pred_1 = _2828;
                    frontier_phi_61_pred_2 = _2827;
                    frontier_phi_61_pred_3 = _2826;
                    frontier_phi_61_pred_4 = _2825;
                    frontier_phi_61_pred_5 = _2824;
                }
                else
                {
                    float _2947;
                    float _2948;
                    float _2949;
                    float _2950;
                    float _2951;
                    float _2952;
                    uint _2953;
                    _2947 = _2823;
                    _2948 = _2824;
                    _2949 = _2825;
                    _2950 = _2826;
                    _2951 = _2827;
                    _2952 = _2828;
                    _2953 = _2838;
                    float _2879;
                    float _2880;
                    float _2881;
                    float _2882;
                    float _2883;
                    float _2884;
                    for (;;)
                    {
                        uint _2957 = uint(findLSB(_2953)) + (_2829 << 5u);
                        uint _2954 = (_2953 + 4294967295u) & _2953;
                        uint _2959 = _2957 * 48u;
                        vec4 _2973 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2959)).x, texelFetch(g_PointLightRenderingBuffer, int(_2959 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2959 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2959 + 3u)).x));
                        uint _2979 = (_2957 * 48u) + 4u;
                        vec4 _2992 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2979)).x, texelFetch(g_PointLightRenderingBuffer, int(_2979 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2979 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2979 + 3u)).x));
                        uint _2998 = (_2957 * 48u) + 8u;
                        vec3 _3009 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2998)).x, texelFetch(g_PointLightRenderingBuffer, int(_2998 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2998 + 2u)).x));
                        float _3013 = _2973.x - _2531;
                        float _3014 = _2973.y - _2532;
                        float _3015 = _2973.z - _2533;
                        float _3016 = dot(vec3(_3013, _3014, _3015), vec3(_3013, _3014, _3015));
                        float _3019 = inversesqrt(_3016);
                        float _3020 = _3019 * _3013;
                        float _3021 = _3019 * _3014;
                        float _3022 = _3019 * _3015;
                        float _3023 = dot(vec3(_810, _813, _816), vec3(_3020, _3021, _3022));
                        float _3028 = 1.0 - (_3016 * _2973.w);
                        float _4362 = isnan(0.0) ? _3028 : (isnan(_3028) ? 0.0 : max(_3028, 0.0));
                        float _3029 = isnan(1.0) ? _4362 : (isnan(_4362) ? 1.0 : min(_4362, 1.0));
                        float _3030 = sqrt(_3016) * _2992.w;
                        float _3033 = 1.39999997615814208984375 / (_3030 + 1.39999997615814208984375);
                        float _3034 = _3033 * _3033;
                        float _3037 = ((1.0 - _3034) * _3023) + _3034;
                        float _3040 = _3030 * _3030;
                        float _3044 = ((isnan(0.0) ? _3037 : (isnan(_3037) ? 0.0 : max(_3037, 0.0))) * _3029) / ((_3040 * 0.699999988079071044921875) + 1.0);
                        float _3048 = (-0.0) - _2531;
                        float _3049 = (-0.0) - _2532;
                        float _3050 = (-0.0) - _2533;
                        float _3054 = inversesqrt(dot(vec3(_3048, _3049, _3050), vec3(_3048, _3049, _3050)));
                        float _3055 = _3054 * _3048;
                        float _3056 = _3054 * _3049;
                        float _3057 = _3054 * _3050;
                        float _3065 = exp2(log2(1.0 / ((_3040 * 3.5) + 5.0)) * 0.25);
                        float _3066 = 1.0 - _870;
                        float _3073 = sqrt(1.0 - ((1.0 - (_3066 * _3066)) * (1.0 - (_3065 * _3065))));
                        float _3074 = _3073 * _3073;
                        float _3075 = _3074 * _3074;
                        float _3076 = _3055 + _3020;
                        float _3077 = _3056 + _3021;
                        float _3078 = _3057 + _3022;
                        float _3082 = inversesqrt(dot(vec3(_3076, _3077, _3078), vec3(_3076, _3077, _3078)));
                        float _3086 = dot(vec3(_810, _813, _816), vec3(_3055, _3056, _3057));
                        float _4378 = isnan(0.0) ? _3086 : (isnan(_3086) ? 0.0 : max(_3086, 0.0));
                        float _3089 = isnan(1.0) ? _4378 : (isnan(_4378) ? 1.0 : min(_4378, 1.0));
                        float _3090 = dot(vec3(_810, _813, _816), vec3(_3082 * _3076, _3082 * _3077, _3082 * _3078));
                        float _4389 = isnan(0.0) ? _3090 : (isnan(_3090) ? 0.0 : max(_3090, 0.0));
                        float _3093 = isnan(1.0) ? _4389 : (isnan(_4389) ? 1.0 : min(_4389, 1.0));
                        float _3097 = ((_3093 * _3093) * (_3075 + (-1.0))) + 1.0;
                        float _3098 = _3033 * _3074;
                        float _3099 = _3098 * _3098;
                        float _3102 = ((1.0 - _3099) * _3023) + _3099;
                        float _4400 = isnan(0.0) ? _3102 : (isnan(_3102) ? 0.0 : max(_3102, 0.0));
                        float _3103 = isnan(1.0) ? _4400 : (isnan(_4400) ? 1.0 : min(_4400, 1.0));
                        float _3104 = 1.0 - _3074;
                        float _3114 = (0.5 / (((_3103 * ((_3089 * _3104) + _3074)) + 9.9999999392252902907785028219223e-09) + (((_3103 * _3104) + _3074) * _3089))) * _3103;
                        float _4411 = isnan(0.0) ? _3114 : (isnan(_3114) ? 0.0 : max(_3114, 0.0));
                        float _3125 = (((_3075 * 3.1415927410125732421875) * (isnan(1.0) ? _4411 : (isnan(_4411) ? 1.0 : min(_4411, 1.0)))) / ((_3097 * _3097) * ((_3040 * 2.1991131305694580078125) + 3.141590118408203125))) * _3029;
                        _2882 = (_3044 * _2992.x) + _2950;
                        _2883 = (_3044 * _2992.y) + _2951;
                        _2884 = (_3044 * _2992.z) + _2952;
                        _2879 = (_3125 * _3009.x) + _2947;
                        _2880 = (_3125 * _3009.y) + _2948;
                        _2881 = (_3125 * _3009.z) + _2949;
                        if (_2954 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2947 = _2879;
                            _2948 = _2880;
                            _2949 = _2881;
                            _2950 = _2882;
                            _2951 = _2883;
                            _2952 = _2884;
                            _2953 = _2954;
                        }
                    }
                    frontier_phi_61_pred = _2879;
                    frontier_phi_61_pred_1 = _2884;
                    frontier_phi_61_pred_2 = _2883;
                    frontier_phi_61_pred_3 = _2882;
                    frontier_phi_61_pred_4 = _2881;
                    frontier_phi_61_pred_5 = _2880;
                }
                _2679 = frontier_phi_61_pred;
                _2689 = frontier_phi_61_pred_1;
                _2687 = frontier_phi_61_pred_2;
                _2685 = frontier_phi_61_pred_3;
                _2683 = frontier_phi_61_pred_4;
                _2681 = frontier_phi_61_pred_5;
                uint _2830 = _2829 + 1u;
                if (_2830 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2823 = _2679;
                    _2824 = _2681;
                    _2825 = _2683;
                    _2826 = _2685;
                    _2827 = _2687;
                    _2828 = _2689;
                    _2829 = _2830;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2678 = _2679;
            _2680 = _2681;
            _2682 = _2683;
            _2684 = _2685;
            _2686 = _2687;
            _2688 = _2689;
        }
        uvec4 _2692 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2693 = _2692.z;
        uint _2695 = (_2693 >> 8u) & 15u;
        float _2791;
        float _2793;
        float _2795;
        float _2797;
        float _2799;
        float _2801;
        if (((4294967295u << _2695) & _2577) == 0u)
        {
            _2791 = _2678;
            _2793 = _2680;
            _2795 = _2682;
            _2797 = _2684;
            _2799 = _2686;
            _2801 = _2688;
        }
        else
        {
            float _2816 = inversesqrt(dot(vec3(_2531, _2532, _2533), vec3(_2531, _2532, _2533)));
            float _2817 = _2816 * _2531;
            float _2818 = _2816 * _2532;
            float _2819 = _2816 * _2533;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2695 < ((_2693 >> 12u) & 15u))
            {
                float _2792;
                float _2794;
                float _2796;
                float _2798;
                float _2800;
                float _2802;
                float _2930 = _2678;
                float _2931 = _2680;
                float _2932 = _2682;
                float _2933 = _2684;
                float _2934 = _2686;
                float _2935 = _2688;
                uint _2936 = _2695;
                uint _2945;
                bool _2946;
                for (;;)
                {
                    _2945 = texelFetch(g_lightClassification, int((((_2571 << 5u) + (_2557 << 9u)) + (_2936 << 2u)) >> 2u)).x;
                    _2946 = _2945 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_2946)
                    {
                        frontier_phi_67_pred = _2933;
                        frontier_phi_67_pred_1 = _2934;
                        frontier_phi_67_pred_2 = _2935;
                        frontier_phi_67_pred_3 = _2932;
                        frontier_phi_67_pred_4 = _2931;
                        frontier_phi_67_pred_5 = _2930;
                    }
                    else
                    {
                        float _3130;
                        float _3131;
                        float _3132;
                        float _3133;
                        float _3134;
                        float _3135;
                        float _3423;
                        float _3424;
                        float _3425;
                        float _3426;
                        float _3427;
                        float _3428;
                        float _3143 = _2930;
                        float _3144 = _2931;
                        float _3145 = _2932;
                        float _3146 = _2933;
                        float _3147 = _2934;
                        float _3148 = _2935;
                        uint _3149 = _2945;
                        uint _3150;
                        vec4 _3175;
                        float _3176;
                        vec4 _3191;
                        vec3 _3203;
                        vec4 _3218;
                        vec4 _3233;
                        float _3279;
                        bool _3280;
                        for (;;)
                        {
                            uint _3160 = ((_2936 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3149));
                            _3150 = (_3149 + 4294967295u) & _3149;
                            uint _3162 = _3160 * 40u;
                            _3175 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3162)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3162 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3162 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3162 + 3u)).x));
                            _3176 = _3175.w;
                            uint _3178 = (_3160 * 40u) + 4u;
                            _3191 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3178)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3178 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3178 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3178 + 3u)).x));
                            uint _3193 = (_3160 * 40u) + 8u;
                            _3203 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3193)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3193 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3193 + 2u)).x));
                            uint _3205 = (_3160 * 40u) + 16u;
                            _3218 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3205)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3205 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3205 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3205 + 3u)).x));
                            uint _3220 = (_3160 * 40u) + 20u;
                            _3233 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3220)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3220 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3220 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3220 + 3u)).x));
                            uint _3235 = (_3160 * 40u) + 24u;
                            vec4 _3248 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3235)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3235 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3235 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3235 + 3u)).x));
                            uint _3254 = (_3160 * 40u) + 28u;
                            vec4 _3267 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3254)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3254 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3254 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3254 + 3u)).x));
                            _3279 = fma(_2533, _3267.z, fma(_2532, _3267.y, _3267.x * _2531)) + _3267.w;
                            _3280 = !((fma(_2533, _3248.z, fma(_2532, _3248.y, _3248.x * _2531)) + _3248.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3280)
                            {
                                float _3307 = _3175.x - _2531;
                                float _3308 = _3175.y - _2532;
                                float _3309 = _3175.z - _2533;
                                float _3310 = dot(vec3(_3307, _3308, _3309), vec3(_3307, _3308, _3309));
                                float _3313 = inversesqrt(_3310);
                                float _3314 = _3313 * _3307;
                                float _3315 = _3313 * _3308;
                                float _3316 = _3313 * _3309;
                                float _3320 = 1.0 - (_3310 / (_3176 * _3176));
                                float _4422 = isnan(0.0) ? _3320 : (isnan(_3320) ? 0.0 : max(_3320, 0.0));
                                float _3321 = isnan(1.0) ? _4422 : (isnan(_4422) ? 1.0 : min(_4422, 1.0));
                                float _3325 = sqrt(_3310) * _3191.w;
                                float _3327 = 1.39999997615814208984375 / (_3325 + 1.39999997615814208984375);
                                float _3328 = _3327 * _3327;
                                float _3331 = ((1.0 - _3328) * dot(vec3(_3314, _3315, _3316), vec3(_810, _813, _816))) + _3328;
                                float _3334 = _3325 * _3325;
                                float _3338 = (fma(_2533, _3218.z, fma(_2532, _3218.y, _3218.x * _2531)) + _3218.w) / _3279;
                                float _3339 = (fma(_2533, _3233.z, fma(_2532, _3233.y, _3233.x * _2531)) + _3233.w) / _3279;
                                float _3343 = 1.0 - dot(vec2(_3338, _3339), vec2(_3338, _3339));
                                float _4438 = isnan(0.0) ? _3343 : (isnan(_3343) ? 0.0 : max(_3343, 0.0));
                                float _3344 = isnan(1.0) ? _4438 : (isnan(_4438) ? 1.0 : min(_4438, 1.0));
                                float _3345 = _3344 * (((isnan(0.0) ? _3331 : (isnan(_3331) ? 0.0 : max(_3331, 0.0))) * _3321) / ((_3334 * 0.699999988079071044921875) + 1.0));
                                float _3357 = exp2(log2(1.0 / ((_3334 * 3.5) + 5.0)) * 0.25);
                                float _3358 = 1.0 - _870;
                                float _3365 = sqrt(1.0 - ((1.0 - (_3358 * _3358)) * (1.0 - (_3357 * _3357))));
                                float _3366 = _3365 * _3365;
                                float _3367 = _3366 * _3366;
                                float _3368 = _3314 - _2817;
                                float _3369 = _3315 - _2818;
                                float _3370 = _3316 - _2819;
                                float _3374 = inversesqrt(dot(vec3(_3368, _3369, _3370), vec3(_3368, _3369, _3370)));
                                float _3378 = dot(vec3(_810, _813, _816), vec3((-0.0) - _2817, (-0.0) - _2818, (-0.0) - _2819));
                                float _4449 = isnan(0.0) ? _3378 : (isnan(_3378) ? 0.0 : max(_3378, 0.0));
                                float _3381 = isnan(1.0) ? _4449 : (isnan(_4449) ? 1.0 : min(_4449, 1.0));
                                float _3382 = dot(vec3(_810, _813, _816), vec3(_3374 * _3368, _3374 * _3369, _3374 * _3370));
                                float _4460 = isnan(0.0) ? _3382 : (isnan(_3382) ? 0.0 : max(_3382, 0.0));
                                float _3385 = isnan(1.0) ? _4460 : (isnan(_4460) ? 1.0 : min(_4460, 1.0));
                                float _3389 = ((_3385 * _3385) * (_3367 + (-1.0))) + 1.0;
                                float _3390 = _3327 * _3366;
                                float _3391 = _3390 * _3390;
                                float _3397 = ((1.0 - _3391) * dot(vec3(_810, _813, _816), vec3(_3314, _3315, _3316))) + _3391;
                                float _4471 = isnan(0.0) ? _3397 : (isnan(_3397) ? 0.0 : max(_3397, 0.0));
                                float _3398 = isnan(1.0) ? _4471 : (isnan(_4471) ? 1.0 : min(_4471, 1.0));
                                float _3399 = 1.0 - _3366;
                                float _3409 = (0.5 / (((_3398 * ((_3381 * _3399) + _3366)) + 9.9999999392252902907785028219223e-09) + (((_3398 * _3399) + _3366) * _3381))) * _3398;
                                float _4482 = isnan(0.0) ? _3409 : (isnan(_3409) ? 0.0 : max(_3409, 0.0));
                                float _3419 = (_3344 * _3321) * (((_3367 * 3.1415927410125732421875) * (isnan(1.0) ? _4482 : (isnan(_4482) ? 1.0 : min(_4482, 1.0)))) / ((_3389 * _3389) * ((_3334 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3419 * _3203.x;
                                frontier_phi_73_pred_1 = _3419 * _3203.y;
                                frontier_phi_73_pred_2 = _3345 * _3191.z;
                                frontier_phi_73_pred_3 = _3345 * _3191.y;
                                frontier_phi_73_pred_4 = _3345 * _3191.x;
                                frontier_phi_73_pred_5 = _3419 * _3203.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3423 = frontier_phi_73_pred;
                            _3424 = frontier_phi_73_pred_1;
                            _3428 = frontier_phi_73_pred_2;
                            _3427 = frontier_phi_73_pred_3;
                            _3426 = frontier_phi_73_pred_4;
                            _3425 = frontier_phi_73_pred_5;
                            _3133 = _3426 + _3146;
                            _3134 = _3427 + _3147;
                            _3135 = _3428 + _3148;
                            _3130 = _3423 + _3143;
                            _3131 = _3424 + _3144;
                            _3132 = _3425 + _3145;
                            if (_3150 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3143 = _3130;
                                _3144 = _3131;
                                _3145 = _3132;
                                _3146 = _3133;
                                _3147 = _3134;
                                _3148 = _3135;
                                _3149 = _3150;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3133;
                        frontier_phi_67_pred_1 = _3134;
                        frontier_phi_67_pred_2 = _3135;
                        frontier_phi_67_pred_3 = _3132;
                        frontier_phi_67_pred_4 = _3131;
                        frontier_phi_67_pred_5 = _3130;
                    }
                    _2798 = frontier_phi_67_pred;
                    _2800 = frontier_phi_67_pred_1;
                    _2802 = frontier_phi_67_pred_2;
                    _2796 = frontier_phi_67_pred_3;
                    _2794 = frontier_phi_67_pred_4;
                    _2792 = frontier_phi_67_pred_5;
                    uint _2937 = _2936 + 1u;
                    if (_2937 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2930 = _2792;
                        _2931 = _2794;
                        _2932 = _2796;
                        _2933 = _2798;
                        _2934 = _2800;
                        _2935 = _2802;
                        _2936 = _2937;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2800;
                frontier_phi_55_56_ladder_1 = _2802;
                frontier_phi_55_56_ladder_2 = _2798;
                frontier_phi_55_56_ladder_3 = _2796;
                frontier_phi_55_56_ladder_4 = _2794;
                frontier_phi_55_56_ladder_5 = _2792;
            }
            else
            {
                frontier_phi_55_56_ladder = _2686;
                frontier_phi_55_56_ladder_1 = _2688;
                frontier_phi_55_56_ladder_2 = _2684;
                frontier_phi_55_56_ladder_3 = _2682;
                frontier_phi_55_56_ladder_4 = _2680;
                frontier_phi_55_56_ladder_5 = _2678;
            }
            _2791 = frontier_phi_55_56_ladder_5;
            _2793 = frontier_phi_55_56_ladder_4;
            _2795 = frontier_phi_55_56_ladder_3;
            _2797 = frontier_phi_55_56_ladder_2;
            _2799 = frontier_phi_55_56_ladder;
            _2801 = frontier_phi_55_56_ladder_1;
        }
        float _2806 = isnan(1.0) ? _854 : (isnan(_854) ? 1.0 : min(_854, 1.0));
        _2590 = (_2806 * _2797) + _2042;
        _2592 = (_2806 * _2799) + _2044;
        _2594 = (_2806 * _2801) + _2046;
        _2596 = ((_2791 * 0.039999999105930328369140625) * _2806) + _2375;
        _2598 = ((_2793 * 0.039999999105930328369140625) * _2806) + _2377;
        _2600 = ((_2795 * 0.039999999105930328369140625) * _2806) + _2379;
    }
    else
    {
        _2590 = _2042;
        _2592 = _2044;
        _2594 = _2046;
        _2596 = _2375;
        _2598 = _2377;
        _2600 = _2379;
    }
    float _4498 = isnan(0.0) ? _839 : (isnan(_839) ? 0.0 : max(_839, 0.0));
    float _4509 = isnan(0.0) ? _840 : (isnan(_840) ? 0.0 : max(_840, 0.0));
    float _4520 = isnan(0.0) ? _841 : (isnan(_841) ? 0.0 : max(_841, 0.0));
    uint _2620 = _271 + 6u;
    float _2628 = _791 / cbSceneParam._m0[86u].x;
    float _2629 = _792 / cbSceneParam._m0[86u].y;
    vec4 _2643 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2628, _2629, (log2((isnan(cbSceneParam._m0[77u].w) ? _725 : (isnan(_725) ? cbSceneParam._m0[77u].w : min(_725, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2645 = _2643.x;
    float _2646 = _2643.y;
    float _2647 = _2643.z;
    float _2648 = _2643.w;
    float _2741;
    float _2743;
    float _2745;
    float _2747;
    if (_725 > cbSceneParam._m0[78u].w)
    {
        float _2703 = isnan(_725) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _725 : min(cbSceneParam._m0[80u].w, _725));
        float _2704 = _2703 / _725;
        float _2715 = _2704 * _776;
        float _2716 = _777 * _2704;
        float _2717 = (-0.0) - _2716;
        float _2719 = _2704 * _778;
        float _2721 = (cbSceneParam._m0[77u].w * _2717) / _2703;
        float _2722 = _2721 + cbSceneParam._m0[79u].w;
        float _2723 = cbSceneParam._m0[79u].w - _2716;
        float _2729 = sqrt(((_2715 * _2715) + (_2716 * _2716)) + (_2719 * _2719));
        float _2732 = (1.0 - (cbSceneParam._m0[77u].w / _2703)) * _2729;
        float _2737 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2739 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2892;
        if (abs((_2717 - _2721) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2892 = ((((_2722 > 0.0) ? exp2(_2737 * _2722) : (2.0 - exp2(_2739 * _2722))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2732;
        }
        else
        {
            float _2852 = 1.0 / cbSceneParam._m0[80u].x;
            float _2853 = isnan(_2723) ? _2722 : (isnan(_2722) ? _2723 : max(_2722, _2723));
            float _2854 = isnan(_2723) ? _2722 : (isnan(_2722) ? _2723 : min(_2722, _2723));
            float _2863 = isnan(0.0) ? _2853 : (isnan(_2853) ? 0.0 : min(_2853, 0.0));
            float _2864 = isnan(0.0) ? _2854 : (isnan(_2854) ? 0.0 : min(_2854, 0.0));
            _2892 = ((abs(_2729 / _2717) * cbSceneParam._m0[80u].y) * ((((_2863 - _2864) * 2.0) - ((exp2(_2737 * (isnan(0.0) ? _2853 : (isnan(_2853) ? 0.0 : max(_2853, 0.0)))) - exp2(_2737 * (isnan(0.0) ? _2854 : (isnan(_2854) ? 0.0 : max(_2854, 0.0))))) * _2852)) - ((exp2(_2739 * _2863) - exp2(_2739 * _2864)) * _2852))) + (_2732 * cbSceneParam._m0[80u].z);
        }
        vec4 _2894 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2628, _2629, 1.0), 0.0);
        float _2903 = exp2((_2892 * (-1.44269502162933349609375)) * (1.0 - _2894.w));
        float _2904 = log2(_2903);
        float _2920 = log2(_2648);
        _2741 = (exp2(_2920 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2904 * cbSceneParam._m0[78u].x)) * _2894.x) / cbSceneParam._m0[78u].x)) + _2645;
        _2743 = (exp2(_2920 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2904 * cbSceneParam._m0[78u].y)) * _2894.y) / cbSceneParam._m0[78u].y)) + _2646;
        _2745 = (exp2(_2920 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2904 * cbSceneParam._m0[78u].z)) * _2894.z) / cbSceneParam._m0[78u].z)) + _2647;
        _2747 = _2903 * _2648;
    }
    else
    {
        _2741 = _2645;
        _2743 = _2646;
        _2745 = _2647;
        _2747 = _2648;
    }
    float _2759 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2760 = _2759 == 3.0;
    float _2761 = log2(_2747);
    float _2768 = exp2(_2761 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4498 : (isnan(_4498) ? 1.0 : min(_4498, 1.0))) * (_2590 + ((isnan(0.0) ? _1580 : (isnan(_1580) ? 0.0 : max(_1580, 0.0))) * _854))) + ((_2596 + ((isnan(0.0) ? _1874 : (isnan(_1874) ? 0.0 : max(_1874, 0.0))) * _1659)) * cbPerFrame._m0[3u].x));
    float _2769 = exp2(_2761 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4509 : (isnan(_4509) ? 1.0 : min(_4509, 1.0))) * (_2592 + ((isnan(0.0) ? _1583 : (isnan(_1583) ? 0.0 : max(_1583, 0.0))) * _854))) + ((_2598 + ((isnan(0.0) ? _1877 : (isnan(_1877) ? 0.0 : max(_1877, 0.0))) * _1659)) * cbPerFrame._m0[3u].x));
    float _2770 = exp2(_2761 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4520 : (isnan(_4520) ? 1.0 : min(_4520, 1.0))) * (_2594 + ((isnan(0.0) ? _1586 : (isnan(_1586) ? 0.0 : max(_1586, 0.0))) * _854))) + ((_2600 + ((isnan(0.0) ? _1880 : (isnan(_1880) ? 0.0 : max(_1880, 0.0))) * _1659)) * cbPerFrame._m0[3u].x));
    float _2779 = (_2759 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2779 * (_2760 ? _2768 : (_2768 + (cbSceneParam._m0[72u].w * _2741)));
    SV_Target.y = _2779 * (_2760 ? _2769 : (_2769 + (cbSceneParam._m0[72u].w * _2743)));
    SV_Target.z = _2779 * (_2760 ? _2770 : (_2770 + (cbSceneParam._m0[72u].w * _2745)));
    SV_Target.w = cbInstanceData._m0[_2620].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2620].w;
}


