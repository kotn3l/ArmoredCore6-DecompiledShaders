#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_29;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_10;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_6;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1335;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _225 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _226 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _227 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _233 = inversesqrt(dot(vec3(_225, _226, _227), vec3(_225, _226, _227)));
    float _240 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _247 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _253 = uint(roundEven(NORMAL.w)) * 13u;
    uint _258 = _253 + 1u;
    uint _262 = _253 + 2u;
    float _271 = sqrt(((cbInstanceData._m0[_258].x * cbInstanceData._m0[_258].x) + (cbInstanceData._m0[_253].x * cbInstanceData._m0[_253].x)) + (cbInstanceData._m0[_262].x * cbInstanceData._m0[_262].x));
    float _272 = _271 * TEXCOORD.z;
    float _273 = _271 * TEXCOORD.w;
    vec4 _293 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _299 = _293.x * cbMtdParam._m0[11u].x;
    float _300 = _293.y * cbMtdParam._m0[11u].y;
    float _301 = _293.z * cbMtdParam._m0[11u].z;
    vec4 _320 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _272) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _273) + cbTextureTilingScale._m0[5u].w));
    vec4 _339 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _376 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _378 = _376.x;
    float _390 = dot(vec4(_378, _376.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _407 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _339.x) * 2.0) - ((((_378 - _390) * cbMtdParam._m0[24u].z) + _390) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3664 = isnan(0.0) ? _407 : (isnan(_407) ? 0.0 : max(_407, 0.0));
    float _408 = isnan(1.0) ? _3664 : (isnan(_3664) ? 1.0 : min(_3664, 1.0));
    float _415 = (_408 * ((_320.x * cbMtdParam._m0[12u].x) - _299)) + _299;
    float _416 = (_408 * ((_320.y * cbMtdParam._m0[12u].y) - _300)) + _300;
    float _417 = (_408 * ((_320.z * cbMtdParam._m0[12u].z) - _301)) + _301;
    vec4 _434 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _272) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _273) + cbTextureTilingScale._m0[3u].w));
    vec4 _454 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _456 = _454.x;
    float _466 = dot(vec4(_456, _454.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _480 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _339.y) * 2.0) - ((((_456 - _466) * cbMtdParam._m0[24u].z) + _466) * cbMtdParam._m0[20u].w))) + 1.0;
    float _3675 = isnan(0.0) ? _480 : (isnan(_480) ? 0.0 : max(_480, 0.0));
    float _481 = isnan(1.0) ? _3675 : (isnan(_3675) ? 1.0 : min(_3675, 1.0));
    float _488 = (_481 * ((_434.x * cbMtdParam._m0[13u].x) - _415)) + _415;
    float _489 = (_481 * ((_434.y * cbMtdParam._m0[13u].y) - _416)) + _416;
    float _490 = (_481 * ((_434.z * cbMtdParam._m0[13u].z) - _417)) + _417;
    vec4 _508 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _272) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _273) + cbTextureTilingScale._m0[4u].w));
    vec4 _525 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _527 = _525.x;
    float _528 = _525.y;
    float _529 = _525.z;
    float _536 = ((_508.x - _527) * _408) + _527;
    float _537 = ((_508.y - _528) * _408) + _528;
    float _538 = ((_508.z - _529) * _408) + _529;
    vec4 _550 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _272) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _273) + cbTextureTilingScale._m0[2u].w));
    float _563 = ((_550.z - _538) * _481) + _538;
    float _566 = ((((_550.x - _536) * _481) + _536) * 2.0) + (-1.0);
    float _568 = ((((_550.y - _537) * _481) + _537) * 2.0) + (-1.0);
    float _569 = dot(vec2(_566, _568), vec2(_566, _568));
    float _3686 = isnan(0.0) ? _569 : (isnan(_569) ? 0.0 : max(_569, 0.0));
    float _574 = sqrt(1.0 - (isnan(1.0) ? _3686 : (isnan(_3686) ? 1.0 : min(_3686, 1.0))));
    vec4 _588 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _613 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _272) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _273) + cbTextureTilingScale._m0[11u].w));
    float _615 = _613.x;
    float _616 = 1.0 - _615;
    float _622 = isnan(-1.0) ? cbMtdParam._m0[24u].x : (isnan(cbMtdParam._m0[24u].x) ? (-1.0) : max(cbMtdParam._m0[24u].x, -1.0));
    float _625 = ((isnan(0.0) ? _622 : (isnan(_622) ? 0.0 : min(_622, 0.0))) * TEXCOORD_8.x) + TEXCOORD_8.w;
    float _634 = (_625 - ((((((_615 - _616) * cbMtdParam._m0[24u].w) + _616) + 0.00999999977648258209228515625) * cbMtdParam._m0[21u].z) * (1.0 - _625))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3707 = isnan(0.0) ? _634 : (isnan(_634) ? 0.0 : max(_634, 0.0));
    float _635 = isnan(1.0) ? _3707 : (isnan(_3707) ? 1.0 : min(_3707, 1.0));
    float _642 = (_635 * (cbMtdParam._m0[17u].x - _488)) + _488;
    float _643 = (_635 * (cbMtdParam._m0[17u].y - _489)) + _489;
    float _644 = (_635 * (cbMtdParam._m0[17u].z - _490)) + _490;
    vec4 _656 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _272) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _273) + cbTextureTilingScale._m0[19u].w));
    float _658 = _656.x;
    float _659 = 1.0 - _658;
    float _686 = (TEXCOORD_8.x - ((cbMtdParam._m0[22u].w * (1.0 - TEXCOORD_8.x)) * ((((_658 - _659) * cbMtdParam._m0[24u].y) + _659) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3718 = isnan(0.0) ? _686 : (isnan(_686) ? 0.0 : max(_686, 0.0));
    float _687 = isnan(1.0) ? _3718 : (isnan(_3718) ? 1.0 : min(_3718, 1.0));
    float _695 = ((((cbMtdParam._m0[10u].x - _642) * TEXCOORD_8.x) * cbMtdParam._m0[23u].w) * _687) + _642;
    float _696 = ((((cbMtdParam._m0[10u].y - _643) * TEXCOORD_8.y) * cbMtdParam._m0[23u].w) * _687) + _643;
    float _697 = (((cbMtdParam._m0[23u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _644)) * _687) + _644;
    float _701 = (cbMtdParam._m0[19u].w * (_588.z - _563)) + _563;
    vec4 _715 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _272) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _273) + cbTextureTilingScale._m0[15u].w));
    float _722 = (_715.x * 2.0) + (-1.0);
    float _723 = (_715.y * 2.0) + (-1.0);
    float _724 = dot(vec2(_722, _723), vec2(_722, _723));
    float _3729 = isnan(0.0) ? _724 : (isnan(_724) ? 0.0 : max(_724, 0.0));
    float _732 = (_635 * (_715.z - _701)) + _701;
    float _735 = ((cbMtdParam._m0[23u].y - _732) * _687) + _732;
    vec4 _754 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _272) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _273) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _760 = (_754.x * 2.0) + (-1.0);
    float _761 = (_754.y * 2.0) + (-1.0);
    float _762 = dot(vec2(_760, _761), vec2(_760, _761));
    float _3740 = isnan(0.0) ? _762 : (isnan(_762) ? 0.0 : max(_762, 0.0));
    float _770 = (((_588.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _566;
    float _771 = (((_588.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _568;
    float _783 = (((_722 - _770) + (cbMtdParam._m0[21u].x * _770)) * _635) + _770;
    float _784 = (((_723 - _771) + (cbMtdParam._m0[21u].x * _771)) * _635) + _771;
    float _785 = (_635 * (sqrt(1.0 - (isnan(1.0) ? _3729 : (isnan(_3729) ? 1.0 : min(_3729, 1.0)))) - _574)) + _574;
    float _796 = (((_760 - _783) + (_783 * cbMtdParam._m0[22u].z)) * _687) + _783;
    float _797 = (((_761 - _784) + (_784 * cbMtdParam._m0[22u].z)) * _687) + _784;
    float _798 = ((sqrt(1.0 - (isnan(1.0) ? _3740 : (isnan(_3740) ? 1.0 : min(_3740, 1.0)))) - _785) * _687) + _785;
    float _800 = cbMtdParam._m0[22u].x + _588.w;
    float _803 = fma(_798, _240 * NORMAL.x, fma(_797, _247 * TANGENT.x, (_233 * _225) * _796));
    float _806 = fma(_798, _240 * NORMAL.y, fma(_797, _247 * TANGENT.y, (_233 * _226) * _796));
    float _809 = fma(_798, _240 * NORMAL.z, fma(_797, _247 * TANGENT.z, (_233 * _227) * _796));
    float _813 = inversesqrt(dot(vec3(_803, _806, _809), vec3(_803, _806, _809)));
    float _814 = _813 * _803;
    float _815 = _813 * _806;
    float _816 = _813 * _809;
    float _3751 = isnan(0.0) ? _735 : (isnan(_735) ? 0.0 : max(_735, 0.0));
    float _817 = isnan(1.0) ? _3751 : (isnan(_3751) ? 1.0 : min(_3751, 1.0));
    float _3762 = isnan(0.0) ? _800 : (isnan(_800) ? 0.0 : max(_800, 0.0));
    float _3773 = isnan(0.0) ? _695 : (isnan(_695) ? 0.0 : max(_695, 0.0));
    float _3784 = isnan(0.0) ? _696 : (isnan(_696) ? 0.0 : max(_696, 0.0));
    float _3795 = isnan(0.0) ? _697 : (isnan(_697) ? 0.0 : max(_697, 0.0));
    float _835 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _876 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _886 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _876);
    float _887 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _876);
    float _888 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _876);
    float _892 = inversesqrt(dot(vec3(_886, _887, _888), vec3(_886, _887, _888)));
    float _893 = _886 * _892;
    float _894 = _887 * _892;
    float _895 = _888 * _892;
    float _901 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _902 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _920 = fma(_816, cbSceneParam._m0[5u].z, fma(_815, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _814));
    float _923 = fma(_816, cbSceneParam._m0[6u].z, fma(_815, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _814));
    float _926 = fma(_816, cbSceneParam._m0[7u].z, fma(_815, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _814));
    uint _940 = (_253 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _946 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3773 : (isnan(_3773) ? 1.0 : min(_3773, 1.0)))) * cbInstanceData._m0[_940].x;
    float _947 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3784 : (isnan(_3784) ? 1.0 : min(_3784, 1.0)))) * cbInstanceData._m0[_940].y;
    float _948 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3795 : (isnan(_3795) ? 1.0 : min(_3795, 1.0)))) * cbInstanceData._m0[_940].z;
    float _3806 = isnan(0.0) ? _946 : (isnan(_946) ? 0.0 : max(_946, 0.0));
    float _949 = isnan(1.0) ? _3806 : (isnan(_3806) ? 1.0 : min(_3806, 1.0));
    float _3817 = isnan(0.0) ? _947 : (isnan(_947) ? 0.0 : max(_947, 0.0));
    float _950 = isnan(1.0) ? _3817 : (isnan(_3817) ? 1.0 : min(_3817, 1.0));
    float _3828 = isnan(0.0) ? _948 : (isnan(_948) ? 0.0 : max(_948, 0.0));
    float _951 = isnan(1.0) ? _3828 : (isnan(_3828) ? 1.0 : min(_3828, 1.0));
    vec4 _960 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _901, cbSceneParam._m0[86u].y * _902));
    float _964 = ((isnan(1.0) ? _3762 : (isnan(_3762) ? 1.0 : min(_3762, 1.0))) * TEXCOORD_5.w) * _960.x;
    float _965 = dot(vec3(_814, _815, _816), vec3(_893, _894, _895));
    float _968 = _965 * 2.0;
    float _972 = (_968 * _814) - _893;
    float _973 = (_968 * _815) - _894;
    float _974 = (_968 * _816) - _895;
    float _978 = abs(dot(vec3(_893, _894, _895), vec3(_814, _815, _816)));
    float _3839 = isnan(0.0) ? _978 : (isnan(_978) ? 0.0 : max(_978, 0.0));
    float _980 = sqrt(_817);
    float _993 = exp2((_980 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3839 : (isnan(_3839) ? 1.0 : min(_3839, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_980 * 3.0));
    float _1025 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1029 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1033 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1334;
    float _1336;
    float _1337;
    float _1338;
    float _1339;
    float _1340;
    float _1341;
    float _1342;
    float _1343;
    float _1344;
    float _1345;
    float _1346;
    float _1347;
    float _1348;
    float _1349;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1059 = fma(_1033, cbModelParam._m0[26u].z, fma(_1029, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1025));
        float _1063 = fma(_1033, cbModelParam._m0[27u].z, fma(_1029, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1025));
        float _1067 = fma(_1033, cbModelParam._m0[28u].z, fma(_1029, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1025));
        float _1092 = _1025 + _814;
        float _1093 = _1029 + _815;
        float _1094 = _1033 + _816;
        float _1104 = fma(_1094, cbModelParam._m0[26u].z, fma(_1093, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1092)) - _1059;
        float _1105 = fma(_1094, cbModelParam._m0[27u].z, fma(_1093, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1092)) - _1063;
        float _1106 = fma(_1094, cbModelParam._m0[28u].z, fma(_1093, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1092)) - _1067;
        float _1110 = inversesqrt(dot(vec3(_1104, _1105, _1106), vec3(_1104, _1105, _1106)));
        float _1123 = ((_1110 * _1104) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1059 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1124 = ((_1110 * _1105) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1063 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1125 = ((_1110 * _1106) / cbModelParam._m0[34u].z) + ((((((_1067 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1128 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1123, _1124, _1125), 0.0);
        vec4 _1135 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1123, _1124, _1125), 0.0);
        vec4 _1142 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1123, _1124, _1125), 0.0);
        vec4 _1149 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1123, _1124, _1125), 0.0);
        float _1162 = exp2((_1128.w + (-0.5)) * 20.0) * 2.0;
        float _1163 = _1162 * (_1128.x + (-0.5));
        float _1164 = _1162 * (_1128.y + (-0.5));
        float _1165 = _1162 * (_1128.z + (-0.5));
        float _1172 = exp2((_1135.w + (-0.5)) * 20.0) * 2.0;
        float _1173 = _1172 * (_1135.x + (-0.5));
        float _1174 = _1172 * (_1135.y + (-0.5));
        float _1175 = _1172 * (_1135.z + (-0.5));
        float _1182 = exp2((_1142.w + (-0.5)) * 20.0) * 2.0;
        float _1183 = _1182 * (_1142.x + (-0.5));
        float _1184 = _1182 * (_1142.y + (-0.5));
        float _1185 = _1182 * (_1142.z + (-0.5));
        float _1192 = exp2((_1149.w + (-0.5)) * 20.0) * 2.0;
        float _1193 = _1192 * (_1149.x + (-0.5));
        float _1194 = _1192 * (_1149.y + (-0.5));
        float _1195 = _1192 * (_1149.z + (-0.5));
        float _1196 = isnan(0.0) ? _1193 : (isnan(_1193) ? 0.0 : max(_1193, 0.0));
        float _1197 = isnan(0.0) ? _1194 : (isnan(_1194) ? 0.0 : max(_1194, 0.0));
        float _1198 = isnan(0.0) ? _1195 : (isnan(_1195) ? 0.0 : max(_1195, 0.0));
        float _1199 = _1163 * 0.5;
        float _1200 = _1173 * 0.5;
        float _1201 = _1183 * 0.5;
        float _1202 = dot(vec3(_1199, _1200, _1201), vec3(_1199, _1200, _1201));
        float _1207 = (_1202 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1202);
        float _1216 = (dot(vec3(_814, _815, _816), vec3(_1207 * _1199, _1207 * _1200, _1207 * _1201)) + 1.0) * 0.5;
        float _3865 = isnan(0.0) ? _1216 : (isnan(_1216) ? 0.0 : max(_1216, 0.0));
        float _1226 = sqrt(((_1200 * _1200) + (_1199 * _1199)) + (_1201 * _1201)) / (_1196 + 9.9999997473787516355514526367188e-06);
        float _3876 = isnan(0.0) ? _1226 : (isnan(_1226) ? 0.0 : max(_1226, 0.0));
        float _1227 = isnan(1.0) ? _3876 : (isnan(_3876) ? 1.0 : min(_3876, 1.0));
        float _1228 = _1227 * 2.0;
        float _1232 = (1.0 - _1227) / (_1227 + 1.0);
        float _3887 = isnan(0.0) ? _1232 : (isnan(_1232) ? 0.0 : max(_1232, 0.0));
        float _1233 = isnan(1.0) ? _3887 : (isnan(_3887) ? 1.0 : min(_3887, 1.0));
        float _1242 = ((((1.0 - _1233) * (_1228 + 2.0)) * exp2(log2(isnan(1.0) ? _3865 : (isnan(_3865) ? 1.0 : min(_3865, 1.0))) * (_1228 + 1.0))) + _1233) * _1196;
        float _1243 = _1164 * 0.5;
        float _1244 = _1174 * 0.5;
        float _1245 = _1184 * 0.5;
        float _1246 = dot(vec3(_1243, _1244, _1245), vec3(_1243, _1244, _1245));
        float _1251 = (_1246 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1246);
        float _1259 = (dot(vec3(_814, _815, _816), vec3(_1251 * _1243, _1251 * _1244, _1251 * _1245)) + 1.0) * 0.5;
        float _3898 = isnan(0.0) ? _1259 : (isnan(_1259) ? 0.0 : max(_1259, 0.0));
        float _1268 = sqrt(((_1244 * _1244) + (_1243 * _1243)) + (_1245 * _1245)) / (_1197 + 9.9999997473787516355514526367188e-06);
        float _3909 = isnan(0.0) ? _1268 : (isnan(_1268) ? 0.0 : max(_1268, 0.0));
        float _1269 = isnan(1.0) ? _3909 : (isnan(_3909) ? 1.0 : min(_3909, 1.0));
        float _1270 = _1269 * 2.0;
        float _1274 = (1.0 - _1269) / (_1269 + 1.0);
        float _3920 = isnan(0.0) ? _1274 : (isnan(_1274) ? 0.0 : max(_1274, 0.0));
        float _1275 = isnan(1.0) ? _3920 : (isnan(_3920) ? 1.0 : min(_3920, 1.0));
        float _1284 = ((((1.0 - _1275) * (_1270 + 2.0)) * exp2(log2(isnan(1.0) ? _3898 : (isnan(_3898) ? 1.0 : min(_3898, 1.0))) * (_1270 + 1.0))) + _1275) * _1197;
        float _1285 = _1165 * 0.5;
        float _1286 = _1175 * 0.5;
        float _1287 = _1185 * 0.5;
        float _1288 = dot(vec3(_1285, _1286, _1287), vec3(_1285, _1286, _1287));
        float _1293 = (_1288 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1288);
        float _1301 = (dot(vec3(_814, _815, _816), vec3(_1293 * _1285, _1293 * _1286, _1293 * _1287)) + 1.0) * 0.5;
        float _3931 = isnan(0.0) ? _1301 : (isnan(_1301) ? 0.0 : max(_1301, 0.0));
        float _1310 = sqrt(((_1286 * _1286) + (_1285 * _1285)) + (_1287 * _1287)) / (_1198 + 9.9999997473787516355514526367188e-06);
        float _3942 = isnan(0.0) ? _1310 : (isnan(_1310) ? 0.0 : max(_1310, 0.0));
        float _1311 = isnan(1.0) ? _3942 : (isnan(_3942) ? 1.0 : min(_3942, 1.0));
        float _1312 = _1311 * 2.0;
        float _1316 = (1.0 - _1311) / (_1311 + 1.0);
        float _3953 = isnan(0.0) ? _1316 : (isnan(_1316) ? 0.0 : max(_1316, 0.0));
        float _1317 = isnan(1.0) ? _3953 : (isnan(_3953) ? 1.0 : min(_3953, 1.0));
        float _1326 = ((((1.0 - _1317) * (_1312 + 2.0)) * exp2(log2(isnan(1.0) ? _3931 : (isnan(_3931) ? 1.0 : min(_3931, 1.0))) * (_1312 + 1.0))) + _1317) * _1198;
        _1334 = _1165;
        _1336 = _1164;
        _1337 = _1163;
        _1338 = _1175;
        _1339 = _1174;
        _1340 = _1173;
        _1341 = _1185;
        _1342 = _1184;
        _1343 = _1183;
        _1344 = _1198;
        _1345 = _1197;
        _1346 = _1196;
        _1347 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1242 : (isnan(_1242) ? 0.0 : max(_1242, 0.0)));
        _1348 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1284 : (isnan(_1284) ? 0.0 : max(_1284, 0.0)));
        _1349 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1326 : (isnan(_1326) ? 0.0 : max(_1326, 0.0)));
    }
    else
    {
        _1334 = _1335;
        _1336 = _1335;
        _1337 = _1335;
        _1338 = _1335;
        _1339 = _1335;
        _1340 = _1335;
        _1341 = _1335;
        _1342 = _1335;
        _1343 = _1335;
        _1344 = _1335;
        _1345 = _1335;
        _1346 = _1335;
        _1347 = 0.0;
        _1348 = 0.0;
        _1349 = 0.0;
    }
    float _1642;
    float _1643;
    float _1644;
    float _1645;
    float _1646;
    float _1647;
    float _1648;
    float _1649;
    float _1650;
    float _1651;
    float _1652;
    float _1653;
    float _1654;
    float _1655;
    float _1656;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1373 = fma(_1033, cbModelParam._m0[30u].z, fma(_1029, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1025));
        float _1377 = fma(_1033, cbModelParam._m0[31u].z, fma(_1029, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1025));
        float _1381 = fma(_1033, cbModelParam._m0[32u].z, fma(_1029, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1025));
        float _1404 = _1025 + _814;
        float _1405 = _1029 + _815;
        float _1406 = _1033 + _816;
        float _1416 = fma(_1406, cbModelParam._m0[30u].z, fma(_1405, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1404)) - _1373;
        float _1417 = fma(_1406, cbModelParam._m0[31u].z, fma(_1405, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1404)) - _1377;
        float _1418 = fma(_1406, cbModelParam._m0[32u].z, fma(_1405, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1404)) - _1381;
        float _1422 = inversesqrt(dot(vec3(_1416, _1417, _1418), vec3(_1416, _1417, _1418)));
        float _1435 = ((_1422 * _1416) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1373 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1436 = ((_1422 * _1417) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1377 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1437 = ((_1422 * _1418) / cbModelParam._m0[35u].z) + ((((((_1381 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1439 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1435, _1436, _1437), 0.0);
        vec4 _1446 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1435, _1436, _1437), 0.0);
        vec4 _1453 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1435, _1436, _1437), 0.0);
        vec4 _1460 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1435, _1436, _1437), 0.0);
        float _1472 = exp2((_1439.w + (-0.5)) * 20.0) * 2.0;
        float _1473 = _1472 * (_1439.x + (-0.5));
        float _1474 = _1472 * (_1439.y + (-0.5));
        float _1475 = _1472 * (_1439.z + (-0.5));
        float _1482 = exp2((_1446.w + (-0.5)) * 20.0) * 2.0;
        float _1483 = _1482 * (_1446.x + (-0.5));
        float _1484 = _1482 * (_1446.y + (-0.5));
        float _1485 = _1482 * (_1446.z + (-0.5));
        float _1492 = exp2((_1453.w + (-0.5)) * 20.0) * 2.0;
        float _1493 = _1492 * (_1453.x + (-0.5));
        float _1494 = _1492 * (_1453.y + (-0.5));
        float _1495 = _1492 * (_1453.z + (-0.5));
        float _1502 = exp2((_1460.w + (-0.5)) * 20.0) * 2.0;
        float _1503 = _1502 * (_1460.x + (-0.5));
        float _1504 = _1502 * (_1460.y + (-0.5));
        float _1505 = _1502 * (_1460.z + (-0.5));
        float _1506 = isnan(0.0) ? _1503 : (isnan(_1503) ? 0.0 : max(_1503, 0.0));
        float _1507 = isnan(0.0) ? _1504 : (isnan(_1504) ? 0.0 : max(_1504, 0.0));
        float _1508 = isnan(0.0) ? _1505 : (isnan(_1505) ? 0.0 : max(_1505, 0.0));
        float _1509 = _1473 * 0.5;
        float _1510 = _1483 * 0.5;
        float _1511 = _1493 * 0.5;
        float _1512 = dot(vec3(_1509, _1510, _1511), vec3(_1509, _1510, _1511));
        float _1517 = (_1512 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1512);
        float _1525 = (dot(vec3(_814, _815, _816), vec3(_1517 * _1509, _1517 * _1510, _1517 * _1511)) + 1.0) * 0.5;
        float _3994 = isnan(0.0) ? _1525 : (isnan(_1525) ? 0.0 : max(_1525, 0.0));
        float _1534 = sqrt(((_1510 * _1510) + (_1509 * _1509)) + (_1511 * _1511)) / (_1506 + 9.9999997473787516355514526367188e-06);
        float _4005 = isnan(0.0) ? _1534 : (isnan(_1534) ? 0.0 : max(_1534, 0.0));
        float _1535 = isnan(1.0) ? _4005 : (isnan(_4005) ? 1.0 : min(_4005, 1.0));
        float _1536 = _1535 * 2.0;
        float _1540 = (1.0 - _1535) / (_1535 + 1.0);
        float _4016 = isnan(0.0) ? _1540 : (isnan(_1540) ? 0.0 : max(_1540, 0.0));
        float _1541 = isnan(1.0) ? _4016 : (isnan(_4016) ? 1.0 : min(_4016, 1.0));
        float _1550 = ((((1.0 - _1541) * (_1536 + 2.0)) * exp2(log2(isnan(1.0) ? _3994 : (isnan(_3994) ? 1.0 : min(_3994, 1.0))) * (_1536 + 1.0))) + _1541) * _1506;
        float _1551 = _1474 * 0.5;
        float _1552 = _1484 * 0.5;
        float _1553 = _1494 * 0.5;
        float _1554 = dot(vec3(_1551, _1552, _1553), vec3(_1551, _1552, _1553));
        float _1559 = (_1554 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1554);
        float _1567 = (dot(vec3(_814, _815, _816), vec3(_1559 * _1551, _1559 * _1552, _1559 * _1553)) + 1.0) * 0.5;
        float _4027 = isnan(0.0) ? _1567 : (isnan(_1567) ? 0.0 : max(_1567, 0.0));
        float _1576 = sqrt(((_1552 * _1552) + (_1551 * _1551)) + (_1553 * _1553)) / (_1507 + 9.9999997473787516355514526367188e-06);
        float _4038 = isnan(0.0) ? _1576 : (isnan(_1576) ? 0.0 : max(_1576, 0.0));
        float _1577 = isnan(1.0) ? _4038 : (isnan(_4038) ? 1.0 : min(_4038, 1.0));
        float _1578 = _1577 * 2.0;
        float _1582 = (1.0 - _1577) / (_1577 + 1.0);
        float _4049 = isnan(0.0) ? _1582 : (isnan(_1582) ? 0.0 : max(_1582, 0.0));
        float _1583 = isnan(1.0) ? _4049 : (isnan(_4049) ? 1.0 : min(_4049, 1.0));
        float _1592 = ((((1.0 - _1583) * (_1578 + 2.0)) * exp2(log2(isnan(1.0) ? _4027 : (isnan(_4027) ? 1.0 : min(_4027, 1.0))) * (_1578 + 1.0))) + _1583) * _1507;
        float _1593 = _1475 * 0.5;
        float _1594 = _1485 * 0.5;
        float _1595 = _1495 * 0.5;
        float _1596 = dot(vec3(_1593, _1594, _1595), vec3(_1593, _1594, _1595));
        float _1601 = (_1596 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1596);
        float _1609 = (dot(vec3(_814, _815, _816), vec3(_1601 * _1593, _1601 * _1594, _1601 * _1595)) + 1.0) * 0.5;
        float _4060 = isnan(0.0) ? _1609 : (isnan(_1609) ? 0.0 : max(_1609, 0.0));
        float _1618 = sqrt(((_1594 * _1594) + (_1593 * _1593)) + (_1595 * _1595)) / (_1508 + 9.9999997473787516355514526367188e-06);
        float _4071 = isnan(0.0) ? _1618 : (isnan(_1618) ? 0.0 : max(_1618, 0.0));
        float _1619 = isnan(1.0) ? _4071 : (isnan(_4071) ? 1.0 : min(_4071, 1.0));
        float _1620 = _1619 * 2.0;
        float _1624 = (1.0 - _1619) / (_1619 + 1.0);
        float _4082 = isnan(0.0) ? _1624 : (isnan(_1624) ? 0.0 : max(_1624, 0.0));
        float _1625 = isnan(1.0) ? _4082 : (isnan(_4082) ? 1.0 : min(_4082, 1.0));
        float _1634 = ((((1.0 - _1625) * (_1620 + 2.0)) * exp2(log2(isnan(1.0) ? _4060 : (isnan(_4060) ? 1.0 : min(_4060, 1.0))) * (_1620 + 1.0))) + _1625) * _1508;
        _1642 = _1475;
        _1643 = _1474;
        _1644 = _1473;
        _1645 = _1485;
        _1646 = _1484;
        _1647 = _1483;
        _1648 = _1495;
        _1649 = _1494;
        _1650 = _1493;
        _1651 = _1508;
        _1652 = _1507;
        _1653 = _1506;
        _1654 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1550 : (isnan(_1550) ? 0.0 : max(_1550, 0.0)));
        _1655 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1592 : (isnan(_1592) ? 0.0 : max(_1592, 0.0)));
        _1656 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1634 : (isnan(_1634) ? 0.0 : max(_1634, 0.0)));
    }
    else
    {
        _1642 = _1335;
        _1643 = _1335;
        _1644 = _1335;
        _1645 = _1335;
        _1646 = _1335;
        _1647 = _1335;
        _1648 = _1335;
        _1649 = _1335;
        _1650 = _1335;
        _1651 = _1335;
        _1652 = _1335;
        _1653 = _1335;
        _1654 = 0.0;
        _1655 = 0.0;
        _1656 = 0.0;
    }
    float _1666 = (cbModelParam._m0[1u].x * (_1654 - _1347)) + _1347;
    float _1667 = (cbModelParam._m0[1u].x * (_1655 - _1348)) + _1348;
    float _1668 = (cbModelParam._m0[1u].x * (_1656 - _1349)) + _1349;
    float _1689 = fma(_1668, cbSceneParam._m0[89u].z, fma(_1667, cbSceneParam._m0[89u].y, _1666 * cbSceneParam._m0[89u].x));
    float _1692 = fma(_1668, cbSceneParam._m0[90u].z, fma(_1667, cbSceneParam._m0[90u].y, _1666 * cbSceneParam._m0[90u].x));
    float _1695 = fma(_1668, cbSceneParam._m0[91u].z, fma(_1667, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1666));
    float _1710 = _972 * 0.5;
    float _1711 = _973 * 0.5;
    float _1712 = _974 * 0.5;
    float _1713 = dot(vec4(_1710, _1711, _1712, 1.0), vec4(_1644, _1647, _1650, _1653));
    float _1716 = dot(vec4(_1710, _1711, _1712, 1.0), vec4(_1643, _1646, _1649, _1652));
    float _1719 = dot(vec4(_1710, _1711, _1712, 1.0), vec4(_1642, _1645, _1648, _1651));
    float _1753;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1726 = dot(vec4(_1710, _1711, _1712, 1.0), vec4(_1334, _1338, _1341, _1344));
        float _1730 = dot(vec4(_1710, _1711, _1712, 1.0), vec4(_1336, _1339, _1342, _1345));
        float _1734 = dot(vec4(_1710, _1711, _1712, 1.0), vec4(_1337, _1340, _1343, _1346));
        float _1741 = dot(vec4(cbModelParam._m0[39u]), vec4(_1710, _1711, _1712, 1.0));
        _1753 = dot(vec3(isnan(0.0) ? _1734 : (isnan(_1734) ? 0.0 : max(_1734, 0.0)), isnan(0.0) ? _1730 : (isnan(_1730) ? 0.0 : max(_1730, 0.0)), isnan(0.0) ? _1726 : (isnan(_1726) ? 0.0 : max(_1726, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1741) ? 0.0 : (isnan(0.0) ? _1741 : max(0.0, _1741))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1753 = 1.0;
    }
    float _1764;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1755 = dot(vec4(cbModelParam._m0[40u]), vec4(_1710, _1711, _1712, 1.0));
        _1764 = dot(vec3(isnan(0.0) ? _1713 : (isnan(_1713) ? 0.0 : max(_1713, 0.0)), isnan(0.0) ? _1716 : (isnan(_1716) ? 0.0 : max(_1716, 0.0)), isnan(0.0) ? _1719 : (isnan(_1719) ? 0.0 : max(_1719, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1755) ? 0.0 : (isnan(0.0) ? _1755 : max(0.0, _1755))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1764 = 1.0;
    }
    float _1768 = (_1764 * cbModelParam._m0[1u].x) + (_1753 * (1.0 - cbModelParam._m0[1u].x));
    float _1778 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _817);
    float _1779 = isnan(_1778) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1778 : min(cbModelParam._m0[25u].z, _1778));
    float _1860;
    float _1862;
    float _1864;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1827 = fma(_1033, cbModelParam._m0[13u].z, fma(_1029, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1025)) + cbModelParam._m0[13u].w;
        float _1831 = fma(_1033, cbModelParam._m0[14u].z, fma(_1029, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1025)) + cbModelParam._m0[14u].w;
        float _1835 = fma(_1033, cbModelParam._m0[15u].z, fma(_1029, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1025)) + cbModelParam._m0[15u].w;
        float _1838 = fma(_974, cbModelParam._m0[13u].z, fma(_973, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _972));
        float _1841 = fma(_974, cbModelParam._m0[14u].z, fma(_973, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _972));
        float _1844 = fma(_974, cbModelParam._m0[15u].z, fma(_973, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _972));
        float _1872;
        if (_1838 > 0.0)
        {
            _1872 = abs((1.0 - _1827) / _1838);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1838 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1827 + 1.0) / _1838);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1872 = frontier_phi_14_12_ladder;
        }
        float _2094;
        if (_1841 > 0.0)
        {
            _2094 = abs((1.0 - _1831) / _1841);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1841 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1831 + 1.0) / _1841);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2094 = frontier_phi_23_19_ladder;
        }
        float _2340;
        if (_1844 > 0.0)
        {
            _2340 = abs((1.0 - _1835) / _1844);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1844 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1835 + 1.0) / _1844);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2340 = frontier_phi_35_30_ladder;
        }
        float _2342 = isnan(_2094) ? _1872 : (isnan(_1872) ? _2094 : min(_1872, _2094));
        float _2343 = isnan(_2340) ? _2342 : (isnan(_2342) ? _2340 : min(_2342, _2340));
        float _2347 = (_2343 * _1838) + _1827;
        float _2348 = (_2343 * _1841) + _1831;
        float _2349 = (_2343 * _1844) + _1835;
        float _2350 = _2343 * 9.9999997473787516355514526367188e-05;
        float _2352 = (-1.0) - _2350;
        float _2354 = _2350 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2349 > _2354) || ((_2349 < _2352) || ((_2348 > _2354) || ((_2348 < _2352) || ((_2347 < _2352) || (_2347 > _2354))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2473 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2349, cbModelParam._m0[9u].z, fma(_2348, cbModelParam._m0[9u].y, _2347 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2349, cbModelParam._m0[10u].z, fma(_2348, cbModelParam._m0[10u].y, _2347 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2349, cbModelParam._m0[11u].z, fma(_2348, cbModelParam._m0[11u].y, _2347 * cbModelParam._m0[11u].x))), _1779);
            frontier_phi_13_35_ladder = _2473.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2473.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2473.x * cbModelParam._m0[1u].y;
        }
        _1860 = frontier_phi_13_35_ladder_2;
        _1862 = frontier_phi_13_35_ladder_1;
        _1864 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1848 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_972, _973, _974), _1779);
        _1860 = _1848.x * cbModelParam._m0[1u].y;
        _1862 = _1848.y * cbModelParam._m0[1u].y;
        _1864 = _1848.z * cbModelParam._m0[1u].y;
    }
    float _1868 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _817);
    float _1869 = isnan(_1868) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1868 : min(cbModelParam._m0[25u].w, _1868));
    float _1959;
    float _1961;
    float _1963;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1923 = fma(_1033, cbModelParam._m0[21u].z, fma(_1029, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1025)) + cbModelParam._m0[21u].w;
        float _1927 = fma(_1033, cbModelParam._m0[22u].z, fma(_1029, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1025)) + cbModelParam._m0[22u].w;
        float _1931 = fma(_1033, cbModelParam._m0[23u].z, fma(_1029, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1025)) + cbModelParam._m0[23u].w;
        float _1934 = fma(_974, cbModelParam._m0[21u].z, fma(_973, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _972));
        float _1937 = fma(_974, cbModelParam._m0[22u].z, fma(_973, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _972));
        float _1940 = fma(_974, cbModelParam._m0[23u].z, fma(_973, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _972));
        float _2099;
        if (_1934 > 0.0)
        {
            _2099 = abs((1.0 - _1923) / _1934);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1934 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1923 + 1.0) / _1934);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2099 = frontier_phi_25_21_ladder;
        }
        float _2367;
        if (_1937 > 0.0)
        {
            _2367 = abs((1.0 - _1927) / _1937);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1937 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1927 + 1.0) / _1937);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2367 = frontier_phi_37_32_ladder;
        }
        float _2572;
        if (_1940 > 0.0)
        {
            _2572 = abs((1.0 - _1931) / _1940);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1940 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1931 + 1.0) / _1940);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2572 = frontier_phi_46_43_ladder;
        }
        float _2574 = isnan(_2367) ? _2099 : (isnan(_2099) ? _2367 : min(_2099, _2367));
        float _2575 = isnan(_2572) ? _2574 : (isnan(_2574) ? _2572 : min(_2574, _2572));
        float _2579 = (_2575 * _1934) + _1923;
        float _2580 = (_2575 * _1937) + _1927;
        float _2581 = (_2575 * _1940) + _1931;
        float _2582 = _2575 * 9.9999997473787516355514526367188e-05;
        float _2583 = (-1.0) - _2582;
        float _2585 = _2582 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2581 > _2585) || ((_2581 < _2583) || ((_2580 > _2585) || ((_2580 < _2583) || ((_2579 < _2583) || (_2579 > _2585))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2780 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2581, cbModelParam._m0[17u].z, fma(_2580, cbModelParam._m0[17u].y, _2579 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2581, cbModelParam._m0[18u].z, fma(_2580, cbModelParam._m0[18u].y, _2579 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2581, cbModelParam._m0[19u].z, fma(_2580, cbModelParam._m0[19u].y, _2579 * cbModelParam._m0[19u].x))), _1869);
            frontier_phi_22_46_ladder = _2780.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2780.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2780.x * cbModelParam._m0[1u].z;
        }
        _1959 = frontier_phi_22_46_ladder_2;
        _1961 = frontier_phi_22_46_ladder_1;
        _1963 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1943 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_972, _973, _974), _1869);
        _1959 = _1943.x * cbModelParam._m0[1u].z;
        _1961 = _1943.y * cbModelParam._m0[1u].z;
        _1963 = _1943.z * cbModelParam._m0[1u].z;
    }
    float _1975 = ((((1.0 - _993) * ((_980 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_993 * _980)) * _964;
    float _1976 = _1975 * ((cbModelParam._m0[1u].w * (_1959 - _1860)) + _1860);
    float _1977 = _1975 * ((cbModelParam._m0[1u].w * (_1961 - _1862)) + _1862);
    float _1978 = _1975 * ((cbModelParam._m0[1u].w * (_1963 - _1864)) + _1864);
    float _1981 = fma(_1978, cbSceneParam._m0[89u].z, fma(_1977, cbSceneParam._m0[89u].y, _1976 * cbSceneParam._m0[89u].x));
    float _1984 = fma(_1978, cbSceneParam._m0[90u].z, fma(_1977, cbSceneParam._m0[90u].y, _1976 * cbSceneParam._m0[90u].x));
    float _1987 = fma(_1978, cbSceneParam._m0[91u].z, fma(_1977, cbSceneParam._m0[91u].y, _1976 * cbSceneParam._m0[91u].x));
    vec4 _1995 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_901, _902));
    float _1997 = _1995.w;
    float _2009 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1997);
    float _2010 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1997);
    float _2011 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1997);
    uvec4 _2015 = floatBitsToUint(cbInstanceData._m0[_253 + 5u]);
    uint _2017 = _2015.x * 14u;
    uint _2018 = _2017 + 13u;
    float _2025 = _964 + (-1.0);
    float _2030 = (cbLight._m0[_2018].x * _2025) + 1.0;
    float _2031 = (cbLight._m0[_2018].y * _2025) + 1.0;
    float _2032 = (cbLight._m0[_2018].z * _2025) + 1.0;
    float _2033 = (cbLight._m0[_2018].w * _2025) + 1.0;
    uint _2034 = _2017 + 5u;
    float _2040 = isnan(1.0) ? _2031 : (isnan(_2031) ? 1.0 : min(_2031, 1.0));
    uint _2044 = _2017 + 4u;
    float _2053 = isnan(1.0) ? _2030 : (isnan(_2030) ? 1.0 : min(_2030, 1.0));
    uint _2057 = _2017 | 1u;
    float _2068 = dot(vec3(cbLight._m0[_2017].xyz), vec3(_814, _815, _816));
    float _2071 = dot(vec3(cbLight._m0[_2057].xyz), vec3(_814, _815, _816));
    float _4218 = isnan(0.0) ? _2068 : (isnan(_2068) ? 0.0 : max(_2068, 0.0));
    float _4229 = isnan(0.0) ? _2071 : (isnan(_2071) ? 0.0 : max(_2071, 0.0));
    float _2076 = (isnan(1.0) ? _4218 : (isnan(_4218) ? 1.0 : min(_4218, 1.0))) * 0.3183098733425140380859375;
    float _2078 = (isnan(1.0) ? _4229 : (isnan(_4229) ? 1.0 : min(_4229, 1.0))) * 0.3183098733425140380859375;
    float _2085 = ((cbLight._m0[_2034].x * _2040) * _2078) + (((cbLight._m0[_2044].x * _2009) * _2053) * _2076);
    float _2086 = ((_2040 * cbLight._m0[_2034].y) * _2078) + (((cbLight._m0[_2044].y * _2010) * _2053) * _2076);
    float _2087 = ((_2040 * cbLight._m0[_2034].z) * _2078) + (((cbLight._m0[_2044].z * _2011) * _2053) * _2076);
    uvec4 _2091 = floatBitsToUint(cbLight._m0[_2017 + 12u]);
    bool _2093 = _2091.x == 0u;
    float _2104;
    float _2106;
    float _2108;
    if (_2093)
    {
        _2104 = _2085;
        _2106 = _2086;
        _2108 = _2087;
    }
    else
    {
        uint _2112 = _2017 + 6u;
        float _2128 = (dot(vec3(cbLight._m0[_2017 + 2u].xyz), vec3(_814, _815, _816)) * 0.5) + 0.5;
        float _2129 = _2128 * _2128;
        float _4240 = isnan(0.0) ? _2129 : (isnan(_2129) ? 0.0 : max(_2129, 0.0));
        float _2130 = isnan(1.0) ? _4240 : (isnan(_4240) ? 1.0 : min(_4240, 1.0));
        float _2131 = isnan(1.0) ? _2032 : (isnan(_2032) ? 1.0 : min(_2032, 1.0));
        _2104 = (((cbLight._m0[_2112].x * 0.3183098733425140380859375) * _2130) * _2131) + _2085;
        _2106 = (((cbLight._m0[_2112].y * 0.3183098733425140380859375) * _2130) * _2131) + _2086;
        _2108 = (((cbLight._m0[_2112].z * 0.3183098733425140380859375) * _2130) * _2131) + _2087;
    }
    bool _2111 = _2091.y == 0u;
    float _2149;
    float _2151;
    float _2153;
    if (_2111)
    {
        _2149 = _2104;
        _2151 = _2106;
        _2153 = _2108;
    }
    else
    {
        uint _2311 = _2017 + 7u;
        float _2327 = (dot(vec3(cbLight._m0[_2017 + 3u].xyz), vec3(_814, _815, _816)) * 0.5) + 0.5;
        float _2328 = _2327 * _2327;
        float _4256 = isnan(0.0) ? _2328 : (isnan(_2328) ? 0.0 : max(_2328, 0.0));
        float _2329 = isnan(1.0) ? _4256 : (isnan(_4256) ? 1.0 : min(_4256, 1.0));
        float _2330 = isnan(1.0) ? _2033 : (isnan(_2033) ? 1.0 : min(_2033, 1.0));
        _2149 = (((cbLight._m0[_2311].x * 0.3183098733425140380859375) * _2329) * _2330) + _2104;
        _2151 = (((cbLight._m0[_2311].y * 0.3183098733425140380859375) * _2329) * _2330) + _2106;
        _2153 = (((cbLight._m0[_2311].z * 0.3183098733425140380859375) * _2329) * _2330) + _2108;
    }
    uint _2156 = _2017 + 8u;
    float _2169 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2017].w)) * _817) * 0.949999988079071044921875);
    float _2170 = _2169 * _2169;
    float _2171 = cbLight._m0[_2017].x + _893;
    float _2172 = cbLight._m0[_2017].y + _894;
    float _2173 = cbLight._m0[_2017].z + _895;
    float _2177 = inversesqrt(dot(vec3(_2171, _2172, _2173), vec3(_2171, _2172, _2173)));
    float _2178 = _2177 * _2171;
    float _2179 = _2177 * _2172;
    float _2180 = _2177 * _2173;
    float _2181 = dot(vec3(_814, _815, _816), vec3(cbLight._m0[_2017].xyz));
    float _4272 = isnan(0.0) ? _2181 : (isnan(_2181) ? 0.0 : max(_2181, 0.0));
    float _2184 = isnan(1.0) ? _4272 : (isnan(_4272) ? 1.0 : min(_4272, 1.0));
    float _4283 = isnan(0.0) ? _965 : (isnan(_965) ? 0.0 : max(_965, 0.0));
    float _2185 = isnan(1.0) ? _4283 : (isnan(_4283) ? 1.0 : min(_4283, 1.0));
    float _2186 = dot(vec3(_814, _815, _816), vec3(_2178, _2179, _2180));
    float _4294 = isnan(0.0) ? _2186 : (isnan(_2186) ? 0.0 : max(_2186, 0.0));
    float _2189 = isnan(1.0) ? _4294 : (isnan(_4294) ? 1.0 : min(_4294, 1.0));
    float _2190 = dot(vec3(cbLight._m0[_2017].xyz), vec3(_2178, _2179, _2180));
    float _4305 = isnan(0.0) ? _2190 : (isnan(_2190) ? 0.0 : max(_2190, 0.0));
    float _2194 = _2170 * _2170;
    float _2198 = ((_2189 * _2189) * (_2194 + (-1.0))) + 1.0;
    float _2209 = (exp2(log2(1.0 - (isnan(1.0) ? _4305 : (isnan(_4305) ? 1.0 : min(_4305, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2210 = 1.0 - _2170;
    float _2221 = (0.5 / (((_2185 * ((_2184 * _2210) + _2170)) + 9.9999999392252902907785028219223e-09) + (((_2185 * _2210) + _2170) * _2184))) * _2184;
    float _4316 = isnan(0.0) ? _2221 : (isnan(_2221) ? 0.0 : max(_2221, 0.0));
    float _2223 = (isnan(1.0) ? _4316 : (isnan(_4316) ? 1.0 : min(_4316, 1.0))) * (_2194 / ((_2198 * _2198) * 3.141590118408203125));
    uint _2237 = _2017 + 9u;
    float _2248 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2057].w)) * _817) * 0.949999988079071044921875);
    float _2249 = _2248 * _2248;
    float _2250 = cbLight._m0[_2057].x + _893;
    float _2251 = cbLight._m0[_2057].y + _894;
    float _2252 = cbLight._m0[_2057].z + _895;
    float _2256 = inversesqrt(dot(vec3(_2250, _2251, _2252), vec3(_2250, _2251, _2252)));
    float _2257 = _2256 * _2250;
    float _2258 = _2256 * _2251;
    float _2259 = _2256 * _2252;
    float _2260 = dot(vec3(_814, _815, _816), vec3(cbLight._m0[_2057].xyz));
    float _4327 = isnan(0.0) ? _2260 : (isnan(_2260) ? 0.0 : max(_2260, 0.0));
    float _2263 = isnan(1.0) ? _4327 : (isnan(_4327) ? 1.0 : min(_4327, 1.0));
    float _2264 = dot(vec3(_814, _815, _816), vec3(_2257, _2258, _2259));
    float _4338 = isnan(0.0) ? _2264 : (isnan(_2264) ? 0.0 : max(_2264, 0.0));
    float _2267 = isnan(1.0) ? _4338 : (isnan(_4338) ? 1.0 : min(_4338, 1.0));
    float _2268 = dot(vec3(cbLight._m0[_2057].xyz), vec3(_2257, _2258, _2259));
    float _4349 = isnan(0.0) ? _2268 : (isnan(_2268) ? 0.0 : max(_2268, 0.0));
    float _2272 = _2249 * _2249;
    float _2276 = ((_2267 * _2267) * (_2272 + (-1.0))) + 1.0;
    float _2285 = (exp2(log2(1.0 - (isnan(1.0) ? _4349 : (isnan(_4349) ? 1.0 : min(_4349, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2286 = 1.0 - _2249;
    float _2296 = (0.5 / (((_2185 * ((_2263 * _2286) + _2249)) + 9.9999999392252902907785028219223e-09) + (((_2185 * _2286) + _2249) * _2263))) * _2263;
    float _4360 = isnan(0.0) ? _2296 : (isnan(_2296) ? 0.0 : max(_2296, 0.0));
    float _2298 = (isnan(1.0) ? _4360 : (isnan(_4360) ? 1.0 : min(_4360, 1.0))) * (_2272 / ((_2276 * _2276) * 3.141590118408203125));
    float _2308 = (((_2285 * cbLight._m0[_2237].x) * _2298) * _2040) + ((((cbLight._m0[_2156].x * _2009) * _2209) * _2223) * _2053);
    float _2309 = (((_2285 * cbLight._m0[_2237].y) * _2298) * _2040) + ((((cbLight._m0[_2156].y * _2010) * _2209) * _2223) * _2053);
    float _2310 = (((_2285 * cbLight._m0[_2237].z) * _2298) * _2040) + ((((cbLight._m0[_2156].z * _2011) * _2209) * _2223) * _2053);
    float _2372;
    float _2374;
    float _2376;
    if (_2093)
    {
        _2372 = _2308;
        _2374 = _2309;
        _2376 = _2310;
    }
    else
    {
        uint _2378 = _2017 + 2u;
        uint _2382 = _2017 + 10u;
        float _2396 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2378].w)) * _817) * 0.949999988079071044921875);
        float _2397 = _2396 * _2396;
        float _2398 = cbLight._m0[_2378].x + _893;
        float _2399 = cbLight._m0[_2378].y + _894;
        float _2400 = cbLight._m0[_2378].z + _895;
        float _2404 = inversesqrt(dot(vec3(_2398, _2399, _2400), vec3(_2398, _2399, _2400)));
        float _2405 = _2404 * _2398;
        float _2406 = _2404 * _2399;
        float _2407 = _2404 * _2400;
        float _2408 = dot(vec3(_814, _815, _816), vec3(cbLight._m0[_2378].xyz));
        float _4371 = isnan(0.0) ? _2408 : (isnan(_2408) ? 0.0 : max(_2408, 0.0));
        float _2411 = isnan(1.0) ? _4371 : (isnan(_4371) ? 1.0 : min(_4371, 1.0));
        float _2412 = dot(vec3(_814, _815, _816), vec3(_2405, _2406, _2407));
        float _4382 = isnan(0.0) ? _2412 : (isnan(_2412) ? 0.0 : max(_2412, 0.0));
        float _2415 = isnan(1.0) ? _4382 : (isnan(_4382) ? 1.0 : min(_4382, 1.0));
        float _2416 = dot(vec3(cbLight._m0[_2378].xyz), vec3(_2405, _2406, _2407));
        float _4393 = isnan(0.0) ? _2416 : (isnan(_2416) ? 0.0 : max(_2416, 0.0));
        float _2420 = _2397 * _2397;
        float _2424 = ((_2415 * _2415) * (_2420 + (-1.0))) + 1.0;
        float _2433 = (exp2(log2(1.0 - (isnan(1.0) ? _4393 : (isnan(_4393) ? 1.0 : min(_4393, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2434 = 1.0 - _2397;
        float _2444 = (0.5 / (((_2185 * ((_2411 * _2434) + _2397)) + 9.9999999392252902907785028219223e-09) + (((_2185 * _2434) + _2397) * _2411))) * _2411;
        float _4404 = isnan(0.0) ? _2444 : (isnan(_2444) ? 0.0 : max(_2444, 0.0));
        float _2446 = (isnan(1.0) ? _4404 : (isnan(_4404) ? 1.0 : min(_4404, 1.0))) * (_2420 / ((_2424 * _2424) * 3.141590118408203125));
        float _2447 = isnan(1.0) ? _2032 : (isnan(_2032) ? 1.0 : min(_2032, 1.0));
        _2372 = (((_2433 * cbLight._m0[_2382].x) * _2446) * _2447) + _2308;
        _2374 = (((_2433 * cbLight._m0[_2382].y) * _2446) * _2447) + _2309;
        _2376 = (((_2433 * cbLight._m0[_2382].z) * _2446) * _2447) + _2310;
    }
    float _2482;
    float _2484;
    float _2486;
    if (_2111)
    {
        _2482 = _2372;
        _2484 = _2374;
        _2486 = _2376;
    }
    else
    {
        uint _2493 = _2017 + 3u;
        uint _2497 = _2017 + 11u;
        float _2511 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2493].w)) * _817) * 0.949999988079071044921875);
        float _2512 = _2511 * _2511;
        float _2513 = cbLight._m0[_2493].x + _893;
        float _2514 = cbLight._m0[_2493].y + _894;
        float _2515 = cbLight._m0[_2493].z + _895;
        float _2519 = inversesqrt(dot(vec3(_2513, _2514, _2515), vec3(_2513, _2514, _2515)));
        float _2520 = _2519 * _2513;
        float _2521 = _2519 * _2514;
        float _2522 = _2519 * _2515;
        float _2523 = dot(vec3(_814, _815, _816), vec3(cbLight._m0[_2493].xyz));
        float _4420 = isnan(0.0) ? _2523 : (isnan(_2523) ? 0.0 : max(_2523, 0.0));
        float _2526 = isnan(1.0) ? _4420 : (isnan(_4420) ? 1.0 : min(_4420, 1.0));
        float _2527 = dot(vec3(_814, _815, _816), vec3(_2520, _2521, _2522));
        float _4431 = isnan(0.0) ? _2527 : (isnan(_2527) ? 0.0 : max(_2527, 0.0));
        float _2530 = isnan(1.0) ? _4431 : (isnan(_4431) ? 1.0 : min(_4431, 1.0));
        float _2531 = dot(vec3(cbLight._m0[_2493].xyz), vec3(_2520, _2521, _2522));
        float _4442 = isnan(0.0) ? _2531 : (isnan(_2531) ? 0.0 : max(_2531, 0.0));
        float _2535 = _2512 * _2512;
        float _2539 = ((_2530 * _2530) * (_2535 + (-1.0))) + 1.0;
        float _2548 = (exp2(log2(1.0 - (isnan(1.0) ? _4442 : (isnan(_4442) ? 1.0 : min(_4442, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2549 = 1.0 - _2512;
        float _2559 = (0.5 / (((_2185 * ((_2526 * _2549) + _2512)) + 9.9999999392252902907785028219223e-09) + (((_2185 * _2549) + _2512) * _2526))) * _2526;
        float _4453 = isnan(0.0) ? _2559 : (isnan(_2559) ? 0.0 : max(_2559, 0.0));
        float _2561 = (isnan(1.0) ? _4453 : (isnan(_4453) ? 1.0 : min(_4453, 1.0))) * (_2535 / ((_2539 * _2539) * 3.141590118408203125));
        float _2562 = isnan(1.0) ? _2033 : (isnan(_2033) ? 1.0 : min(_2033, 1.0));
        _2482 = (((_2548 * cbLight._m0[_2497].x) * _2561) * _2562) + _2372;
        _2484 = (((_2548 * cbLight._m0[_2497].y) * _2561) * _2562) + _2374;
        _2486 = (((_2548 * cbLight._m0[_2497].z) * _2561) * _2562) + _2376;
    }
    float _2697;
    float _2699;
    float _2701;
    float _2703;
    float _2705;
    float _2707;
    if (_2015.y == 0u)
    {
        float _2637 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2638 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2637;
        float _2639 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2637;
        float _2640 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2637;
        uvec4 _2652 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2653 = _2652.x;
        uint _2664 = uint((float(_2652.y) * floor(float(uint(cbSceneParam._m0[85u].y * _902) / _2653))) + floor(float(uint(cbSceneParam._m0[85u].x * _901) / _2653)));
        float _2674 = (log2(_2640 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2675 = isnan(0.0) ? _2674 : (isnan(_2674) ? 0.0 : max(_2674, 0.0));
        uint _2678 = uint(isnan(14.0) ? _2675 : (isnan(_2675) ? 14.0 : min(_2675, 14.0)));
        uvec4 _2683 = texelFetch(g_lightClusterGridBuffer, int(((_2678 << 2u) + (_2664 << 6u)) >> 2u));
        uint _2684 = _2683.x;
        uint _2685 = _2652.z;
        float _2785;
        float _2787;
        float _2789;
        float _2791;
        float _2793;
        float _2795;
        if (((((1u << ((_2685 >> 4u) & 15u)) + 4294967295u) & _2684) == 0u) || ((_2685 & 240u) == 0u))
        {
            _2785 = 0.0;
            _2787 = 0.0;
            _2789 = 0.0;
            _2791 = 0.0;
            _2793 = 0.0;
            _2795 = 0.0;
        }
        else
        {
            float _2786;
            float _2788;
            float _2790;
            float _2792;
            float _2794;
            float _2796;
            float _2930 = 0.0;
            float _2931 = 0.0;
            float _2932 = 0.0;
            float _2933 = 0.0;
            float _2934 = 0.0;
            float _2935 = 0.0;
            uint _2936 = 0u;
            uint _2945;
            bool _2946;
            for (;;)
            {
                _2945 = texelFetch(g_lightClassification, int((((_2678 << 5u) + (_2664 << 9u)) + (_2936 << 2u)) >> 2u)).x;
                _2946 = _2945 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2946)
                {
                    frontier_phi_61_pred = _2930;
                    frontier_phi_61_pred_1 = _2935;
                    frontier_phi_61_pred_2 = _2934;
                    frontier_phi_61_pred_3 = _2933;
                    frontier_phi_61_pred_4 = _2932;
                    frontier_phi_61_pred_5 = _2931;
                }
                else
                {
                    float _3054;
                    float _3055;
                    float _3056;
                    float _3057;
                    float _3058;
                    float _3059;
                    uint _3060;
                    _3054 = _2930;
                    _3055 = _2931;
                    _3056 = _2932;
                    _3057 = _2933;
                    _3058 = _2934;
                    _3059 = _2935;
                    _3060 = _2945;
                    float _2986;
                    float _2987;
                    float _2988;
                    float _2989;
                    float _2990;
                    float _2991;
                    for (;;)
                    {
                        uint _3064 = uint(findLSB(_3060)) + (_2936 << 5u);
                        uint _3061 = (_3060 + 4294967295u) & _3060;
                        uint _3066 = _3064 * 48u;
                        vec4 _3080 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3066)).x, texelFetch(g_PointLightRenderingBuffer, int(_3066 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3066 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3066 + 3u)).x));
                        uint _3086 = (_3064 * 48u) + 4u;
                        vec4 _3099 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3086)).x, texelFetch(g_PointLightRenderingBuffer, int(_3086 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3086 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3086 + 3u)).x));
                        uint _3105 = (_3064 * 48u) + 8u;
                        vec3 _3116 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3105)).x, texelFetch(g_PointLightRenderingBuffer, int(_3105 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3105 + 2u)).x));
                        float _3120 = _3080.x - _2638;
                        float _3121 = _3080.y - _2639;
                        float _3122 = _3080.z - _2640;
                        float _3123 = dot(vec3(_3120, _3121, _3122), vec3(_3120, _3121, _3122));
                        float _3126 = inversesqrt(_3123);
                        float _3127 = _3126 * _3120;
                        float _3128 = _3126 * _3121;
                        float _3129 = _3126 * _3122;
                        float _3130 = dot(vec3(_920, _923, _926), vec3(_3127, _3128, _3129));
                        float _3135 = 1.0 - (_3123 * _3080.w);
                        float _4479 = isnan(0.0) ? _3135 : (isnan(_3135) ? 0.0 : max(_3135, 0.0));
                        float _3136 = isnan(1.0) ? _4479 : (isnan(_4479) ? 1.0 : min(_4479, 1.0));
                        float _3137 = sqrt(_3123) * _3099.w;
                        float _3140 = 1.39999997615814208984375 / (_3137 + 1.39999997615814208984375);
                        float _3141 = _3140 * _3140;
                        float _3144 = ((1.0 - _3141) * _3130) + _3141;
                        float _3147 = _3137 * _3137;
                        float _3151 = ((isnan(0.0) ? _3144 : (isnan(_3144) ? 0.0 : max(_3144, 0.0))) * _3136) / ((_3147 * 0.699999988079071044921875) + 1.0);
                        float _3155 = (-0.0) - _2638;
                        float _3156 = (-0.0) - _2639;
                        float _3157 = (-0.0) - _2640;
                        float _3161 = inversesqrt(dot(vec3(_3155, _3156, _3157), vec3(_3155, _3156, _3157)));
                        float _3162 = _3161 * _3155;
                        float _3163 = _3161 * _3156;
                        float _3164 = _3161 * _3157;
                        float _3172 = exp2(log2(1.0 / ((_3147 * 3.5) + 5.0)) * 0.25);
                        float _3173 = 1.0 - _980;
                        float _3180 = sqrt(1.0 - ((1.0 - (_3173 * _3173)) * (1.0 - (_3172 * _3172))));
                        float _3181 = _3180 * _3180;
                        float _3182 = _3181 * _3181;
                        float _3183 = _3162 + _3127;
                        float _3184 = _3163 + _3128;
                        float _3185 = _3164 + _3129;
                        float _3189 = inversesqrt(dot(vec3(_3183, _3184, _3185), vec3(_3183, _3184, _3185)));
                        float _3193 = dot(vec3(_920, _923, _926), vec3(_3162, _3163, _3164));
                        float _4495 = isnan(0.0) ? _3193 : (isnan(_3193) ? 0.0 : max(_3193, 0.0));
                        float _3196 = isnan(1.0) ? _4495 : (isnan(_4495) ? 1.0 : min(_4495, 1.0));
                        float _3197 = dot(vec3(_920, _923, _926), vec3(_3189 * _3183, _3189 * _3184, _3189 * _3185));
                        float _4506 = isnan(0.0) ? _3197 : (isnan(_3197) ? 0.0 : max(_3197, 0.0));
                        float _3200 = isnan(1.0) ? _4506 : (isnan(_4506) ? 1.0 : min(_4506, 1.0));
                        float _3204 = ((_3200 * _3200) * (_3182 + (-1.0))) + 1.0;
                        float _3205 = _3140 * _3181;
                        float _3206 = _3205 * _3205;
                        float _3209 = ((1.0 - _3206) * _3130) + _3206;
                        float _4517 = isnan(0.0) ? _3209 : (isnan(_3209) ? 0.0 : max(_3209, 0.0));
                        float _3210 = isnan(1.0) ? _4517 : (isnan(_4517) ? 1.0 : min(_4517, 1.0));
                        float _3211 = 1.0 - _3181;
                        float _3221 = (0.5 / (((_3210 * ((_3196 * _3211) + _3181)) + 9.9999999392252902907785028219223e-09) + (((_3210 * _3211) + _3181) * _3196))) * _3210;
                        float _4528 = isnan(0.0) ? _3221 : (isnan(_3221) ? 0.0 : max(_3221, 0.0));
                        float _3232 = (((_3182 * 3.1415927410125732421875) * (isnan(1.0) ? _4528 : (isnan(_4528) ? 1.0 : min(_4528, 1.0)))) / ((_3204 * _3204) * ((_3147 * 2.1991131305694580078125) + 3.141590118408203125))) * _3136;
                        _2989 = (_3151 * _3099.x) + _3057;
                        _2990 = (_3151 * _3099.y) + _3058;
                        _2991 = (_3151 * _3099.z) + _3059;
                        _2986 = (_3232 * _3116.x) + _3054;
                        _2987 = (_3232 * _3116.y) + _3055;
                        _2988 = (_3232 * _3116.z) + _3056;
                        if (_3061 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3054 = _2986;
                            _3055 = _2987;
                            _3056 = _2988;
                            _3057 = _2989;
                            _3058 = _2990;
                            _3059 = _2991;
                            _3060 = _3061;
                        }
                    }
                    frontier_phi_61_pred = _2986;
                    frontier_phi_61_pred_1 = _2991;
                    frontier_phi_61_pred_2 = _2990;
                    frontier_phi_61_pred_3 = _2989;
                    frontier_phi_61_pred_4 = _2988;
                    frontier_phi_61_pred_5 = _2987;
                }
                _2786 = frontier_phi_61_pred;
                _2796 = frontier_phi_61_pred_1;
                _2794 = frontier_phi_61_pred_2;
                _2792 = frontier_phi_61_pred_3;
                _2790 = frontier_phi_61_pred_4;
                _2788 = frontier_phi_61_pred_5;
                uint _2937 = _2936 + 1u;
                if (_2937 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2930 = _2786;
                    _2931 = _2788;
                    _2932 = _2790;
                    _2933 = _2792;
                    _2934 = _2794;
                    _2935 = _2796;
                    _2936 = _2937;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2785 = _2786;
            _2787 = _2788;
            _2789 = _2790;
            _2791 = _2792;
            _2793 = _2794;
            _2795 = _2796;
        }
        uvec4 _2799 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2800 = _2799.z;
        uint _2802 = (_2800 >> 8u) & 15u;
        float _2898;
        float _2900;
        float _2902;
        float _2904;
        float _2906;
        float _2908;
        if (((4294967295u << _2802) & _2684) == 0u)
        {
            _2898 = _2785;
            _2900 = _2787;
            _2902 = _2789;
            _2904 = _2791;
            _2906 = _2793;
            _2908 = _2795;
        }
        else
        {
            float _2923 = inversesqrt(dot(vec3(_2638, _2639, _2640), vec3(_2638, _2639, _2640)));
            float _2924 = _2923 * _2638;
            float _2925 = _2923 * _2639;
            float _2926 = _2923 * _2640;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2802 < ((_2800 >> 12u) & 15u))
            {
                float _2899;
                float _2901;
                float _2903;
                float _2905;
                float _2907;
                float _2909;
                float _3037 = _2785;
                float _3038 = _2787;
                float _3039 = _2789;
                float _3040 = _2791;
                float _3041 = _2793;
                float _3042 = _2795;
                uint _3043 = _2802;
                uint _3052;
                bool _3053;
                for (;;)
                {
                    _3052 = texelFetch(g_lightClassification, int((((_2678 << 5u) + (_2664 << 9u)) + (_3043 << 2u)) >> 2u)).x;
                    _3053 = _3052 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_3053)
                    {
                        frontier_phi_67_pred = _3040;
                        frontier_phi_67_pred_1 = _3041;
                        frontier_phi_67_pred_2 = _3042;
                        frontier_phi_67_pred_3 = _3039;
                        frontier_phi_67_pred_4 = _3038;
                        frontier_phi_67_pred_5 = _3037;
                    }
                    else
                    {
                        float _3237;
                        float _3238;
                        float _3239;
                        float _3240;
                        float _3241;
                        float _3242;
                        float _3530;
                        float _3531;
                        float _3532;
                        float _3533;
                        float _3534;
                        float _3535;
                        float _3250 = _3037;
                        float _3251 = _3038;
                        float _3252 = _3039;
                        float _3253 = _3040;
                        float _3254 = _3041;
                        float _3255 = _3042;
                        uint _3256 = _3052;
                        uint _3257;
                        vec4 _3282;
                        float _3283;
                        vec4 _3298;
                        vec3 _3310;
                        vec4 _3325;
                        vec4 _3340;
                        float _3386;
                        bool _3387;
                        for (;;)
                        {
                            uint _3267 = ((_3043 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3256));
                            _3257 = (_3256 + 4294967295u) & _3256;
                            uint _3269 = _3267 * 40u;
                            _3282 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3269)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3269 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3269 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3269 + 3u)).x));
                            _3283 = _3282.w;
                            uint _3285 = (_3267 * 40u) + 4u;
                            _3298 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3285)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3285 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3285 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3285 + 3u)).x));
                            uint _3300 = (_3267 * 40u) + 8u;
                            _3310 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3300)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3300 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3300 + 2u)).x));
                            uint _3312 = (_3267 * 40u) + 16u;
                            _3325 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3312)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3312 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3312 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3312 + 3u)).x));
                            uint _3327 = (_3267 * 40u) + 20u;
                            _3340 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3327)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3327 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3327 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3327 + 3u)).x));
                            uint _3342 = (_3267 * 40u) + 24u;
                            vec4 _3355 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3342)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3342 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3342 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3342 + 3u)).x));
                            uint _3361 = (_3267 * 40u) + 28u;
                            vec4 _3374 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3361)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3361 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3361 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3361 + 3u)).x));
                            _3386 = fma(_2640, _3374.z, fma(_2639, _3374.y, _3374.x * _2638)) + _3374.w;
                            _3387 = !((fma(_2640, _3355.z, fma(_2639, _3355.y, _3355.x * _2638)) + _3355.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3387)
                            {
                                float _3414 = _3282.x - _2638;
                                float _3415 = _3282.y - _2639;
                                float _3416 = _3282.z - _2640;
                                float _3417 = dot(vec3(_3414, _3415, _3416), vec3(_3414, _3415, _3416));
                                float _3420 = inversesqrt(_3417);
                                float _3421 = _3420 * _3414;
                                float _3422 = _3420 * _3415;
                                float _3423 = _3420 * _3416;
                                float _3427 = 1.0 - (_3417 / (_3283 * _3283));
                                float _4539 = isnan(0.0) ? _3427 : (isnan(_3427) ? 0.0 : max(_3427, 0.0));
                                float _3428 = isnan(1.0) ? _4539 : (isnan(_4539) ? 1.0 : min(_4539, 1.0));
                                float _3432 = sqrt(_3417) * _3298.w;
                                float _3434 = 1.39999997615814208984375 / (_3432 + 1.39999997615814208984375);
                                float _3435 = _3434 * _3434;
                                float _3438 = ((1.0 - _3435) * dot(vec3(_3421, _3422, _3423), vec3(_920, _923, _926))) + _3435;
                                float _3441 = _3432 * _3432;
                                float _3445 = (fma(_2640, _3325.z, fma(_2639, _3325.y, _3325.x * _2638)) + _3325.w) / _3386;
                                float _3446 = (fma(_2640, _3340.z, fma(_2639, _3340.y, _3340.x * _2638)) + _3340.w) / _3386;
                                float _3450 = 1.0 - dot(vec2(_3445, _3446), vec2(_3445, _3446));
                                float _4555 = isnan(0.0) ? _3450 : (isnan(_3450) ? 0.0 : max(_3450, 0.0));
                                float _3451 = isnan(1.0) ? _4555 : (isnan(_4555) ? 1.0 : min(_4555, 1.0));
                                float _3452 = _3451 * (((isnan(0.0) ? _3438 : (isnan(_3438) ? 0.0 : max(_3438, 0.0))) * _3428) / ((_3441 * 0.699999988079071044921875) + 1.0));
                                float _3464 = exp2(log2(1.0 / ((_3441 * 3.5) + 5.0)) * 0.25);
                                float _3465 = 1.0 - _980;
                                float _3472 = sqrt(1.0 - ((1.0 - (_3465 * _3465)) * (1.0 - (_3464 * _3464))));
                                float _3473 = _3472 * _3472;
                                float _3474 = _3473 * _3473;
                                float _3475 = _3421 - _2924;
                                float _3476 = _3422 - _2925;
                                float _3477 = _3423 - _2926;
                                float _3481 = inversesqrt(dot(vec3(_3475, _3476, _3477), vec3(_3475, _3476, _3477)));
                                float _3485 = dot(vec3(_920, _923, _926), vec3((-0.0) - _2924, (-0.0) - _2925, (-0.0) - _2926));
                                float _4566 = isnan(0.0) ? _3485 : (isnan(_3485) ? 0.0 : max(_3485, 0.0));
                                float _3488 = isnan(1.0) ? _4566 : (isnan(_4566) ? 1.0 : min(_4566, 1.0));
                                float _3489 = dot(vec3(_920, _923, _926), vec3(_3481 * _3475, _3481 * _3476, _3481 * _3477));
                                float _4577 = isnan(0.0) ? _3489 : (isnan(_3489) ? 0.0 : max(_3489, 0.0));
                                float _3492 = isnan(1.0) ? _4577 : (isnan(_4577) ? 1.0 : min(_4577, 1.0));
                                float _3496 = ((_3492 * _3492) * (_3474 + (-1.0))) + 1.0;
                                float _3497 = _3434 * _3473;
                                float _3498 = _3497 * _3497;
                                float _3504 = ((1.0 - _3498) * dot(vec3(_920, _923, _926), vec3(_3421, _3422, _3423))) + _3498;
                                float _4588 = isnan(0.0) ? _3504 : (isnan(_3504) ? 0.0 : max(_3504, 0.0));
                                float _3505 = isnan(1.0) ? _4588 : (isnan(_4588) ? 1.0 : min(_4588, 1.0));
                                float _3506 = 1.0 - _3473;
                                float _3516 = (0.5 / (((_3505 * ((_3488 * _3506) + _3473)) + 9.9999999392252902907785028219223e-09) + (((_3505 * _3506) + _3473) * _3488))) * _3505;
                                float _4599 = isnan(0.0) ? _3516 : (isnan(_3516) ? 0.0 : max(_3516, 0.0));
                                float _3526 = (_3451 * _3428) * (((_3474 * 3.1415927410125732421875) * (isnan(1.0) ? _4599 : (isnan(_4599) ? 1.0 : min(_4599, 1.0)))) / ((_3496 * _3496) * ((_3441 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3526 * _3310.x;
                                frontier_phi_73_pred_1 = _3526 * _3310.y;
                                frontier_phi_73_pred_2 = _3452 * _3298.z;
                                frontier_phi_73_pred_3 = _3452 * _3298.y;
                                frontier_phi_73_pred_4 = _3452 * _3298.x;
                                frontier_phi_73_pred_5 = _3526 * _3310.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3530 = frontier_phi_73_pred;
                            _3531 = frontier_phi_73_pred_1;
                            _3535 = frontier_phi_73_pred_2;
                            _3534 = frontier_phi_73_pred_3;
                            _3533 = frontier_phi_73_pred_4;
                            _3532 = frontier_phi_73_pred_5;
                            _3240 = _3533 + _3253;
                            _3241 = _3534 + _3254;
                            _3242 = _3535 + _3255;
                            _3237 = _3530 + _3250;
                            _3238 = _3531 + _3251;
                            _3239 = _3532 + _3252;
                            if (_3257 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3250 = _3237;
                                _3251 = _3238;
                                _3252 = _3239;
                                _3253 = _3240;
                                _3254 = _3241;
                                _3255 = _3242;
                                _3256 = _3257;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3240;
                        frontier_phi_67_pred_1 = _3241;
                        frontier_phi_67_pred_2 = _3242;
                        frontier_phi_67_pred_3 = _3239;
                        frontier_phi_67_pred_4 = _3238;
                        frontier_phi_67_pred_5 = _3237;
                    }
                    _2905 = frontier_phi_67_pred;
                    _2907 = frontier_phi_67_pred_1;
                    _2909 = frontier_phi_67_pred_2;
                    _2903 = frontier_phi_67_pred_3;
                    _2901 = frontier_phi_67_pred_4;
                    _2899 = frontier_phi_67_pred_5;
                    uint _3044 = _3043 + 1u;
                    if (_3044 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3037 = _2899;
                        _3038 = _2901;
                        _3039 = _2903;
                        _3040 = _2905;
                        _3041 = _2907;
                        _3042 = _2909;
                        _3043 = _3044;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2907;
                frontier_phi_55_56_ladder_1 = _2909;
                frontier_phi_55_56_ladder_2 = _2905;
                frontier_phi_55_56_ladder_3 = _2903;
                frontier_phi_55_56_ladder_4 = _2901;
                frontier_phi_55_56_ladder_5 = _2899;
            }
            else
            {
                frontier_phi_55_56_ladder = _2793;
                frontier_phi_55_56_ladder_1 = _2795;
                frontier_phi_55_56_ladder_2 = _2791;
                frontier_phi_55_56_ladder_3 = _2789;
                frontier_phi_55_56_ladder_4 = _2787;
                frontier_phi_55_56_ladder_5 = _2785;
            }
            _2898 = frontier_phi_55_56_ladder_5;
            _2900 = frontier_phi_55_56_ladder_4;
            _2902 = frontier_phi_55_56_ladder_3;
            _2904 = frontier_phi_55_56_ladder_2;
            _2906 = frontier_phi_55_56_ladder;
            _2908 = frontier_phi_55_56_ladder_1;
        }
        float _2913 = isnan(1.0) ? _964 : (isnan(_964) ? 1.0 : min(_964, 1.0));
        _2697 = (_2913 * _2904) + _2149;
        _2699 = (_2913 * _2906) + _2151;
        _2701 = (_2913 * _2908) + _2153;
        _2703 = ((_2898 * 0.039999999105930328369140625) * _2913) + _2482;
        _2705 = ((_2900 * 0.039999999105930328369140625) * _2913) + _2484;
        _2707 = ((_2902 * 0.039999999105930328369140625) * _2913) + _2486;
    }
    else
    {
        _2697 = _2149;
        _2699 = _2151;
        _2701 = _2153;
        _2703 = _2482;
        _2705 = _2484;
        _2707 = _2486;
    }
    float _4615 = isnan(0.0) ? _949 : (isnan(_949) ? 0.0 : max(_949, 0.0));
    float _4626 = isnan(0.0) ? _950 : (isnan(_950) ? 0.0 : max(_950, 0.0));
    float _4637 = isnan(0.0) ? _951 : (isnan(_951) ? 0.0 : max(_951, 0.0));
    uint _2727 = _253 + 6u;
    float _2735 = _901 / cbSceneParam._m0[86u].x;
    float _2736 = _902 / cbSceneParam._m0[86u].y;
    vec4 _2750 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2735, _2736, (log2((isnan(cbSceneParam._m0[77u].w) ? _835 : (isnan(_835) ? cbSceneParam._m0[77u].w : min(_835, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2752 = _2750.x;
    float _2753 = _2750.y;
    float _2754 = _2750.z;
    float _2755 = _2750.w;
    float _2848;
    float _2850;
    float _2852;
    float _2854;
    if (_835 > cbSceneParam._m0[78u].w)
    {
        float _2810 = isnan(_835) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _835 : min(cbSceneParam._m0[80u].w, _835));
        float _2811 = _2810 / _835;
        float _2822 = _2811 * _886;
        float _2823 = _887 * _2811;
        float _2824 = (-0.0) - _2823;
        float _2826 = _2811 * _888;
        float _2828 = (cbSceneParam._m0[77u].w * _2824) / _2810;
        float _2829 = _2828 + cbSceneParam._m0[79u].w;
        float _2830 = cbSceneParam._m0[79u].w - _2823;
        float _2836 = sqrt(((_2822 * _2822) + (_2823 * _2823)) + (_2826 * _2826));
        float _2839 = (1.0 - (cbSceneParam._m0[77u].w / _2810)) * _2836;
        float _2844 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2846 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2999;
        if (abs((_2824 - _2828) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2999 = ((((_2829 > 0.0) ? exp2(_2844 * _2829) : (2.0 - exp2(_2846 * _2829))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2839;
        }
        else
        {
            float _2959 = 1.0 / cbSceneParam._m0[80u].x;
            float _2960 = isnan(_2830) ? _2829 : (isnan(_2829) ? _2830 : max(_2829, _2830));
            float _2961 = isnan(_2830) ? _2829 : (isnan(_2829) ? _2830 : min(_2829, _2830));
            float _2970 = isnan(0.0) ? _2960 : (isnan(_2960) ? 0.0 : min(_2960, 0.0));
            float _2971 = isnan(0.0) ? _2961 : (isnan(_2961) ? 0.0 : min(_2961, 0.0));
            _2999 = ((abs(_2836 / _2824) * cbSceneParam._m0[80u].y) * ((((_2970 - _2971) * 2.0) - ((exp2(_2844 * (isnan(0.0) ? _2960 : (isnan(_2960) ? 0.0 : max(_2960, 0.0)))) - exp2(_2844 * (isnan(0.0) ? _2961 : (isnan(_2961) ? 0.0 : max(_2961, 0.0))))) * _2959)) - ((exp2(_2846 * _2970) - exp2(_2846 * _2971)) * _2959))) + (_2839 * cbSceneParam._m0[80u].z);
        }
        vec4 _3001 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2735, _2736, 1.0), 0.0);
        float _3010 = exp2((_2999 * (-1.44269502162933349609375)) * (1.0 - _3001.w));
        float _3011 = log2(_3010);
        float _3027 = log2(_2755);
        _2848 = (exp2(_3027 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3011 * cbSceneParam._m0[78u].x)) * _3001.x) / cbSceneParam._m0[78u].x)) + _2752;
        _2850 = (exp2(_3027 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3011 * cbSceneParam._m0[78u].y)) * _3001.y) / cbSceneParam._m0[78u].y)) + _2753;
        _2852 = (exp2(_3027 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3011 * cbSceneParam._m0[78u].z)) * _3001.z) / cbSceneParam._m0[78u].z)) + _2754;
        _2854 = _3010 * _2755;
    }
    else
    {
        _2848 = _2752;
        _2850 = _2753;
        _2852 = _2754;
        _2854 = _2755;
    }
    float _2866 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2867 = _2866 == 3.0;
    float _2868 = log2(_2854);
    float _2875 = exp2(_2868 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4615 : (isnan(_4615) ? 1.0 : min(_4615, 1.0))) * (_2697 + ((isnan(0.0) ? _1689 : (isnan(_1689) ? 0.0 : max(_1689, 0.0))) * _964))) + ((_2703 + ((isnan(0.0) ? _1981 : (isnan(_1981) ? 0.0 : max(_1981, 0.0))) * _1768)) * cbPerFrame._m0[3u].x));
    float _2876 = exp2(_2868 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4626 : (isnan(_4626) ? 1.0 : min(_4626, 1.0))) * (_2699 + ((isnan(0.0) ? _1692 : (isnan(_1692) ? 0.0 : max(_1692, 0.0))) * _964))) + ((_2705 + ((isnan(0.0) ? _1984 : (isnan(_1984) ? 0.0 : max(_1984, 0.0))) * _1768)) * cbPerFrame._m0[3u].x));
    float _2877 = exp2(_2868 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4637 : (isnan(_4637) ? 1.0 : min(_4637, 1.0))) * (_2701 + ((isnan(0.0) ? _1695 : (isnan(_1695) ? 0.0 : max(_1695, 0.0))) * _964))) + ((_2707 + ((isnan(0.0) ? _1987 : (isnan(_1987) ? 0.0 : max(_1987, 0.0))) * _1768)) * cbPerFrame._m0[3u].x));
    float _2886 = (_2866 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2886 * (_2867 ? _2875 : (_2875 + (cbSceneParam._m0[72u].w * _2848)));
    SV_Target.y = _2886 * (_2867 ? _2876 : (_2876 + (cbSceneParam._m0[72u].w * _2850)));
    SV_Target.z = _2886 * (_2867 ? _2877 : (_2877 + (cbSceneParam._m0[72u].w * _2852)));
    SV_Target.w = cbInstanceData._m0[_2727].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2727].w;
}


