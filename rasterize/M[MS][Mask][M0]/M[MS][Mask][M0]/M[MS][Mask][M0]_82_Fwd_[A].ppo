#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_0;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 14) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_10;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_6;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1316;
float _3673;
float _3674;
float _3675;
float _3676;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _216 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _217 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _218 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _224 = inversesqrt(dot(vec3(_216, _217, _218), vec3(_216, _217, _218)));
    float _231 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _238 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _244 = uint(roundEven(NORMAL.w)) * 13u;
    uint _250 = _244 + 1u;
    uint _254 = _244 + 2u;
    float _263 = sqrt(((cbInstanceData._m0[_250].x * cbInstanceData._m0[_250].x) + (cbInstanceData._m0[_244].x * cbInstanceData._m0[_244].x)) + (cbInstanceData._m0[_254].x * cbInstanceData._m0[_254].x));
    float _264 = _263 * TEXCOORD.z;
    float _265 = _263 * TEXCOORD.w;
    vec4 _284 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _308 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _313 = _308.x * cbMtdParam._m0[11u].x;
    float _314 = _308.y * cbMtdParam._m0[11u].y;
    float _315 = _308.z * cbMtdParam._m0[11u].z;
    vec4 _334 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _264) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _265) + cbTextureTilingScale._m0[5u].w));
    vec4 _354 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _391 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _393 = _391.x;
    float _405 = dot(vec4(_393, _391.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _422 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _354.x) * 2.0) - ((((_393 - _405) * cbMtdParam._m0[24u].z) + _405) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3685 = isnan(0.0) ? _422 : (isnan(_422) ? 0.0 : max(_422, 0.0));
    float _423 = isnan(1.0) ? _3685 : (isnan(_3685) ? 1.0 : min(_3685, 1.0));
    float _430 = (_423 * ((_334.x * cbMtdParam._m0[12u].x) - _313)) + _313;
    float _431 = (_423 * ((_334.y * cbMtdParam._m0[12u].y) - _314)) + _314;
    float _432 = (_423 * ((_334.z * cbMtdParam._m0[12u].z) - _315)) + _315;
    vec4 _449 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _264) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _265) + cbTextureTilingScale._m0[3u].w));
    vec4 _469 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _471 = _469.x;
    float _481 = dot(vec4(_471, _469.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _495 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _354.y) * 2.0) - ((((_471 - _481) * cbMtdParam._m0[24u].z) + _481) * cbMtdParam._m0[20u].w))) + 1.0;
    float _3696 = isnan(0.0) ? _495 : (isnan(_495) ? 0.0 : max(_495, 0.0));
    float _496 = isnan(1.0) ? _3696 : (isnan(_3696) ? 1.0 : min(_3696, 1.0));
    float _509 = ((cbMtdParam._m0[9u].x * 4.55000019073486328125) * _284.x) * ((_496 * ((_449.x * cbMtdParam._m0[13u].x) - _430)) + _430);
    float _512 = ((cbMtdParam._m0[9u].y * 4.55000019073486328125) * _284.y) * ((_496 * ((_449.y * cbMtdParam._m0[13u].y) - _431)) + _431);
    float _515 = ((cbMtdParam._m0[9u].z * 4.55000019073486328125) * _284.z) * ((_496 * ((_449.z * cbMtdParam._m0[13u].z) - _432)) + _432);
    vec4 _534 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _264) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _265) + cbTextureTilingScale._m0[14u].w));
    vec4 _554 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _264) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _265) + cbTextureTilingScale._m0[4u].w));
    vec4 _571 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _573 = _571.x;
    float _574 = _571.y;
    float _575 = _571.z;
    float _582 = ((_554.x - _573) * _423) + _573;
    float _583 = ((_554.y - _574) * _423) + _574;
    float _584 = ((_554.z - _575) * _423) + _575;
    vec4 _596 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _264) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _265) + cbTextureTilingScale._m0[2u].w));
    float _609 = ((_596.z - _584) * _496) + _584;
    float _612 = ((((_596.x - _582) * _496) + _582) * 2.0) + (-1.0);
    float _614 = ((((_596.y - _583) * _496) + _583) * 2.0) + (-1.0);
    float _615 = dot(vec2(_612, _614), vec2(_612, _614));
    float _3707 = isnan(0.0) ? _615 : (isnan(_615) ? 0.0 : max(_615, 0.0));
    float _620 = sqrt(1.0 - (isnan(1.0) ? _3707 : (isnan(_3707) ? 1.0 : min(_3707, 1.0))));
    vec4 _634 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _659 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _264) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _265) + cbTextureTilingScale._m0[11u].w));
    float _661 = _659.x;
    float _662 = 1.0 - _661;
    float _675 = (TEXCOORD_8.w - ((cbMtdParam._m0[21u].z * (1.0 - TEXCOORD_8.w)) * ((((_661 - _662) * cbMtdParam._m0[24u].w) + _662) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3718 = isnan(0.0) ? _675 : (isnan(_675) ? 0.0 : max(_675, 0.0));
    float _676 = isnan(1.0) ? _3718 : (isnan(_3718) ? 1.0 : min(_3718, 1.0));
    float _683 = (_676 * ((_534.x * cbMtdParam._m0[18u].x) - _509)) + _509;
    float _684 = (_676 * ((_534.y * cbMtdParam._m0[18u].y) - _512)) + _512;
    float _685 = (_676 * ((_534.z * cbMtdParam._m0[18u].z) - _515)) + _515;
    float _689 = (cbMtdParam._m0[19u].w * (_634.z - _609)) + _609;
    vec4 _702 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _264) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _265) + cbTextureTilingScale._m0[15u].w));
    float _709 = (_702.x * 2.0) + (-1.0);
    float _710 = (_702.y * 2.0) + (-1.0);
    float _711 = dot(vec2(_709, _710), vec2(_709, _710));
    float _3729 = isnan(0.0) ? _711 : (isnan(_711) ? 0.0 : max(_711, 0.0));
    float _719 = (_676 * (_702.z - _689)) + _689;
    float _722 = (((_634.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _612;
    float _723 = (((_634.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _614;
    float _735 = (((_709 - _722) + (cbMtdParam._m0[21u].x * _722)) * _676) + _722;
    float _736 = (((_710 - _723) + (cbMtdParam._m0[21u].x * _723)) * _676) + _723;
    float _737 = (_676 * (sqrt(1.0 - (isnan(1.0) ? _3729 : (isnan(_3729) ? 1.0 : min(_3729, 1.0)))) - _620)) + _620;
    float _741 = cbMtdParam._m0[22u].x + _634.w;
    float _744 = fma(_737, _231 * NORMAL.x, fma(_736, _238 * TANGENT.x, (_224 * _216) * _735));
    float _747 = fma(_737, _231 * NORMAL.y, fma(_736, _238 * TANGENT.y, (_224 * _217) * _735));
    float _750 = fma(_737, _231 * NORMAL.z, fma(_736, _238 * TANGENT.z, (_224 * _218) * _735));
    float _754 = inversesqrt(dot(vec3(_744, _747, _750), vec3(_744, _747, _750)));
    float _755 = _754 * _744;
    float _756 = _754 * _747;
    float _757 = _754 * _750;
    float _3740 = isnan(0.0) ? _719 : (isnan(_719) ? 0.0 : max(_719, 0.0));
    float _758 = isnan(1.0) ? _3740 : (isnan(_3740) ? 1.0 : min(_3740, 1.0));
    float _3751 = isnan(0.0) ? _741 : (isnan(_741) ? 0.0 : max(_741, 0.0));
    float _3762 = isnan(0.0) ? _683 : (isnan(_683) ? 0.0 : max(_683, 0.0));
    float _3773 = isnan(0.0) ? _684 : (isnan(_684) ? 0.0 : max(_684, 0.0));
    float _3784 = isnan(0.0) ? _685 : (isnan(_685) ? 0.0 : max(_685, 0.0));
    float _776 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _817 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _827 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _817);
    float _828 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _817);
    float _829 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _817);
    float _833 = inversesqrt(dot(vec3(_827, _828, _829), vec3(_827, _828, _829)));
    float _834 = _827 * _833;
    float _835 = _828 * _833;
    float _836 = _829 * _833;
    vec4 _841 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _843 = _841.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _997 = sqrt(((_827 * _827) + (_828 * _828)) + (_829 * _829));
        float _1003 = (cbMatDynParam._m0[5u].x * _997) + cbMatDynParam._m0[5u].y;
        float _3795 = isnan(0.0) ? _1003 : (isnan(_1003) ? 0.0 : max(_1003, 0.0));
        float _1004 = isnan(1.0) ? _3795 : (isnan(_3795) ? 1.0 : min(_3795, 1.0));
        float _1008 = (cbMatDynParam._m0[5u].z * _997) + cbMatDynParam._m0[5u].w;
        float _3806 = isnan(0.0) ? _1008 : (isnan(_1008) ? 0.0 : max(_1008, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3806 : (isnan(_3806) ? 1.0 : min(_3806, 1.0))) - _1004)) + _1004) < ((_843 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _854 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _855 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _873 = fma(_757, cbSceneParam._m0[5u].z, fma(_756, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _755));
    float _876 = fma(_757, cbSceneParam._m0[6u].z, fma(_756, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _755));
    float _879 = fma(_757, cbSceneParam._m0[7u].z, fma(_756, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _755));
    uint _892 = _244 + 9u;
    uint _893 = _892 + uint(cbMatDynParam._m0[0u].w);
    float _899 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3762 : (isnan(_3762) ? 1.0 : min(_3762, 1.0)))) * cbInstanceData._m0[_893].x;
    float _900 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3773 : (isnan(_3773) ? 1.0 : min(_3773, 1.0)))) * cbInstanceData._m0[_893].y;
    float _901 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3784 : (isnan(_3784) ? 1.0 : min(_3784, 1.0)))) * cbInstanceData._m0[_893].z;
    float _3817 = isnan(0.0) ? _899 : (isnan(_899) ? 0.0 : max(_899, 0.0));
    float _902 = isnan(1.0) ? _3817 : (isnan(_3817) ? 1.0 : min(_3817, 1.0));
    float _3828 = isnan(0.0) ? _900 : (isnan(_900) ? 0.0 : max(_900, 0.0));
    float _903 = isnan(1.0) ? _3828 : (isnan(_3828) ? 1.0 : min(_3828, 1.0));
    float _3839 = isnan(0.0) ? _901 : (isnan(_901) ? 0.0 : max(_901, 0.0));
    float _904 = isnan(1.0) ? _3839 : (isnan(_3839) ? 1.0 : min(_3839, 1.0));
    vec4 _913 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _854, cbSceneParam._m0[86u].y * _855));
    float _917 = ((isnan(1.0) ? _3751 : (isnan(_3751) ? 1.0 : min(_3751, 1.0))) * TEXCOORD_5.w) * _913.x;
    float _918 = dot(vec3(_755, _756, _757), vec3(_834, _835, _836));
    float _921 = _918 * 2.0;
    float _925 = (_921 * _755) - _834;
    float _926 = (_921 * _756) - _835;
    float _927 = (_921 * _757) - _836;
    float _931 = abs(dot(vec3(_834, _835, _836), vec3(_755, _756, _757)));
    float _3850 = isnan(0.0) ? _931 : (isnan(_931) ? 0.0 : max(_931, 0.0));
    float _933 = sqrt(_758);
    float _946 = exp2((_933 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3850 : (isnan(_3850) ? 1.0 : min(_3850, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_933 * 3.0));
    float _978 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _982 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _986 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1315;
    float _1317;
    float _1318;
    float _1319;
    float _1320;
    float _1321;
    float _1322;
    float _1323;
    float _1324;
    float _1325;
    float _1326;
    float _1327;
    float _1328;
    float _1329;
    float _1330;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1040 = fma(_986, cbModelParam._m0[26u].z, fma(_982, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _978));
        float _1044 = fma(_986, cbModelParam._m0[27u].z, fma(_982, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _978));
        float _1048 = fma(_986, cbModelParam._m0[28u].z, fma(_982, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _978));
        float _1073 = _978 + _755;
        float _1074 = _982 + _756;
        float _1075 = _986 + _757;
        float _1085 = fma(_1075, cbModelParam._m0[26u].z, fma(_1074, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1073)) - _1040;
        float _1086 = fma(_1075, cbModelParam._m0[27u].z, fma(_1074, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1073)) - _1044;
        float _1087 = fma(_1075, cbModelParam._m0[28u].z, fma(_1074, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1073)) - _1048;
        float _1091 = inversesqrt(dot(vec3(_1085, _1086, _1087), vec3(_1085, _1086, _1087)));
        float _1104 = ((_1091 * _1085) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1040 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1105 = ((_1091 * _1086) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1044 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1106 = ((_1091 * _1087) / cbModelParam._m0[34u].z) + ((((((_1048 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1109 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1104, _1105, _1106), 0.0);
        vec4 _1116 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1104, _1105, _1106), 0.0);
        vec4 _1123 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1104, _1105, _1106), 0.0);
        vec4 _1130 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1104, _1105, _1106), 0.0);
        float _1143 = exp2((_1109.w + (-0.5)) * 20.0) * 2.0;
        float _1144 = _1143 * (_1109.x + (-0.5));
        float _1145 = _1143 * (_1109.y + (-0.5));
        float _1146 = _1143 * (_1109.z + (-0.5));
        float _1153 = exp2((_1116.w + (-0.5)) * 20.0) * 2.0;
        float _1154 = _1153 * (_1116.x + (-0.5));
        float _1155 = _1153 * (_1116.y + (-0.5));
        float _1156 = _1153 * (_1116.z + (-0.5));
        float _1163 = exp2((_1123.w + (-0.5)) * 20.0) * 2.0;
        float _1164 = _1163 * (_1123.x + (-0.5));
        float _1165 = _1163 * (_1123.y + (-0.5));
        float _1166 = _1163 * (_1123.z + (-0.5));
        float _1173 = exp2((_1130.w + (-0.5)) * 20.0) * 2.0;
        float _1174 = _1173 * (_1130.x + (-0.5));
        float _1175 = _1173 * (_1130.y + (-0.5));
        float _1176 = _1173 * (_1130.z + (-0.5));
        float _1177 = isnan(0.0) ? _1174 : (isnan(_1174) ? 0.0 : max(_1174, 0.0));
        float _1178 = isnan(0.0) ? _1175 : (isnan(_1175) ? 0.0 : max(_1175, 0.0));
        float _1179 = isnan(0.0) ? _1176 : (isnan(_1176) ? 0.0 : max(_1176, 0.0));
        float _1180 = _1144 * 0.5;
        float _1181 = _1154 * 0.5;
        float _1182 = _1164 * 0.5;
        float _1183 = dot(vec3(_1180, _1181, _1182), vec3(_1180, _1181, _1182));
        float _1188 = (_1183 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1183);
        float _1197 = (dot(vec3(_755, _756, _757), vec3(_1188 * _1180, _1188 * _1181, _1188 * _1182)) + 1.0) * 0.5;
        float _3876 = isnan(0.0) ? _1197 : (isnan(_1197) ? 0.0 : max(_1197, 0.0));
        float _1207 = sqrt(((_1181 * _1181) + (_1180 * _1180)) + (_1182 * _1182)) / (_1177 + 9.9999997473787516355514526367188e-06);
        float _3887 = isnan(0.0) ? _1207 : (isnan(_1207) ? 0.0 : max(_1207, 0.0));
        float _1208 = isnan(1.0) ? _3887 : (isnan(_3887) ? 1.0 : min(_3887, 1.0));
        float _1209 = _1208 * 2.0;
        float _1213 = (1.0 - _1208) / (_1208 + 1.0);
        float _3898 = isnan(0.0) ? _1213 : (isnan(_1213) ? 0.0 : max(_1213, 0.0));
        float _1214 = isnan(1.0) ? _3898 : (isnan(_3898) ? 1.0 : min(_3898, 1.0));
        float _1223 = ((((1.0 - _1214) * (_1209 + 2.0)) * exp2(log2(isnan(1.0) ? _3876 : (isnan(_3876) ? 1.0 : min(_3876, 1.0))) * (_1209 + 1.0))) + _1214) * _1177;
        float _1224 = _1145 * 0.5;
        float _1225 = _1155 * 0.5;
        float _1226 = _1165 * 0.5;
        float _1227 = dot(vec3(_1224, _1225, _1226), vec3(_1224, _1225, _1226));
        float _1232 = (_1227 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1227);
        float _1240 = (dot(vec3(_755, _756, _757), vec3(_1232 * _1224, _1232 * _1225, _1232 * _1226)) + 1.0) * 0.5;
        float _3909 = isnan(0.0) ? _1240 : (isnan(_1240) ? 0.0 : max(_1240, 0.0));
        float _1249 = sqrt(((_1225 * _1225) + (_1224 * _1224)) + (_1226 * _1226)) / (_1178 + 9.9999997473787516355514526367188e-06);
        float _3920 = isnan(0.0) ? _1249 : (isnan(_1249) ? 0.0 : max(_1249, 0.0));
        float _1250 = isnan(1.0) ? _3920 : (isnan(_3920) ? 1.0 : min(_3920, 1.0));
        float _1251 = _1250 * 2.0;
        float _1255 = (1.0 - _1250) / (_1250 + 1.0);
        float _3931 = isnan(0.0) ? _1255 : (isnan(_1255) ? 0.0 : max(_1255, 0.0));
        float _1256 = isnan(1.0) ? _3931 : (isnan(_3931) ? 1.0 : min(_3931, 1.0));
        float _1265 = ((((1.0 - _1256) * (_1251 + 2.0)) * exp2(log2(isnan(1.0) ? _3909 : (isnan(_3909) ? 1.0 : min(_3909, 1.0))) * (_1251 + 1.0))) + _1256) * _1178;
        float _1266 = _1146 * 0.5;
        float _1267 = _1156 * 0.5;
        float _1268 = _1166 * 0.5;
        float _1269 = dot(vec3(_1266, _1267, _1268), vec3(_1266, _1267, _1268));
        float _1274 = (_1269 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1269);
        float _1282 = (dot(vec3(_755, _756, _757), vec3(_1274 * _1266, _1274 * _1267, _1274 * _1268)) + 1.0) * 0.5;
        float _3942 = isnan(0.0) ? _1282 : (isnan(_1282) ? 0.0 : max(_1282, 0.0));
        float _1291 = sqrt(((_1267 * _1267) + (_1266 * _1266)) + (_1268 * _1268)) / (_1179 + 9.9999997473787516355514526367188e-06);
        float _3953 = isnan(0.0) ? _1291 : (isnan(_1291) ? 0.0 : max(_1291, 0.0));
        float _1292 = isnan(1.0) ? _3953 : (isnan(_3953) ? 1.0 : min(_3953, 1.0));
        float _1293 = _1292 * 2.0;
        float _1297 = (1.0 - _1292) / (_1292 + 1.0);
        float _3964 = isnan(0.0) ? _1297 : (isnan(_1297) ? 0.0 : max(_1297, 0.0));
        float _1298 = isnan(1.0) ? _3964 : (isnan(_3964) ? 1.0 : min(_3964, 1.0));
        float _1307 = ((((1.0 - _1298) * (_1293 + 2.0)) * exp2(log2(isnan(1.0) ? _3942 : (isnan(_3942) ? 1.0 : min(_3942, 1.0))) * (_1293 + 1.0))) + _1298) * _1179;
        _1315 = _1146;
        _1317 = _1145;
        _1318 = _1144;
        _1319 = _1156;
        _1320 = _1155;
        _1321 = _1154;
        _1322 = _1166;
        _1323 = _1165;
        _1324 = _1164;
        _1325 = _1179;
        _1326 = _1178;
        _1327 = _1177;
        _1328 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1223 : (isnan(_1223) ? 0.0 : max(_1223, 0.0)));
        _1329 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1265 : (isnan(_1265) ? 0.0 : max(_1265, 0.0)));
        _1330 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1307 : (isnan(_1307) ? 0.0 : max(_1307, 0.0)));
    }
    else
    {
        _1315 = _1316;
        _1317 = _1316;
        _1318 = _1316;
        _1319 = _1316;
        _1320 = _1316;
        _1321 = _1316;
        _1322 = _1316;
        _1323 = _1316;
        _1324 = _1316;
        _1325 = _1316;
        _1326 = _1316;
        _1327 = _1316;
        _1328 = 0.0;
        _1329 = 0.0;
        _1330 = 0.0;
    }
    float _1626;
    float _1627;
    float _1628;
    float _1629;
    float _1630;
    float _1631;
    float _1632;
    float _1633;
    float _1634;
    float _1635;
    float _1636;
    float _1637;
    float _1638;
    float _1639;
    float _1640;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1357 = fma(_986, cbModelParam._m0[30u].z, fma(_982, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _978));
        float _1361 = fma(_986, cbModelParam._m0[31u].z, fma(_982, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _978));
        float _1365 = fma(_986, cbModelParam._m0[32u].z, fma(_982, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _978));
        float _1388 = _978 + _755;
        float _1389 = _982 + _756;
        float _1390 = _986 + _757;
        float _1400 = fma(_1390, cbModelParam._m0[30u].z, fma(_1389, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1388)) - _1357;
        float _1401 = fma(_1390, cbModelParam._m0[31u].z, fma(_1389, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1388)) - _1361;
        float _1402 = fma(_1390, cbModelParam._m0[32u].z, fma(_1389, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1388)) - _1365;
        float _1406 = inversesqrt(dot(vec3(_1400, _1401, _1402), vec3(_1400, _1401, _1402)));
        float _1419 = ((_1406 * _1400) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1357 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1420 = ((_1406 * _1401) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1361 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1421 = ((_1406 * _1402) / cbModelParam._m0[35u].z) + ((((((_1365 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1423 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1419, _1420, _1421), 0.0);
        vec4 _1430 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1419, _1420, _1421), 0.0);
        vec4 _1437 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1419, _1420, _1421), 0.0);
        vec4 _1444 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1419, _1420, _1421), 0.0);
        float _1456 = exp2((_1423.w + (-0.5)) * 20.0) * 2.0;
        float _1457 = _1456 * (_1423.x + (-0.5));
        float _1458 = _1456 * (_1423.y + (-0.5));
        float _1459 = _1456 * (_1423.z + (-0.5));
        float _1466 = exp2((_1430.w + (-0.5)) * 20.0) * 2.0;
        float _1467 = _1466 * (_1430.x + (-0.5));
        float _1468 = _1466 * (_1430.y + (-0.5));
        float _1469 = _1466 * (_1430.z + (-0.5));
        float _1476 = exp2((_1437.w + (-0.5)) * 20.0) * 2.0;
        float _1477 = _1476 * (_1437.x + (-0.5));
        float _1478 = _1476 * (_1437.y + (-0.5));
        float _1479 = _1476 * (_1437.z + (-0.5));
        float _1486 = exp2((_1444.w + (-0.5)) * 20.0) * 2.0;
        float _1487 = _1486 * (_1444.x + (-0.5));
        float _1488 = _1486 * (_1444.y + (-0.5));
        float _1489 = _1486 * (_1444.z + (-0.5));
        float _1490 = isnan(0.0) ? _1487 : (isnan(_1487) ? 0.0 : max(_1487, 0.0));
        float _1491 = isnan(0.0) ? _1488 : (isnan(_1488) ? 0.0 : max(_1488, 0.0));
        float _1492 = isnan(0.0) ? _1489 : (isnan(_1489) ? 0.0 : max(_1489, 0.0));
        float _1493 = _1457 * 0.5;
        float _1494 = _1467 * 0.5;
        float _1495 = _1477 * 0.5;
        float _1496 = dot(vec3(_1493, _1494, _1495), vec3(_1493, _1494, _1495));
        float _1501 = (_1496 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1496);
        float _1509 = (dot(vec3(_755, _756, _757), vec3(_1501 * _1493, _1501 * _1494, _1501 * _1495)) + 1.0) * 0.5;
        float _4005 = isnan(0.0) ? _1509 : (isnan(_1509) ? 0.0 : max(_1509, 0.0));
        float _1518 = sqrt(((_1494 * _1494) + (_1493 * _1493)) + (_1495 * _1495)) / (_1490 + 9.9999997473787516355514526367188e-06);
        float _4016 = isnan(0.0) ? _1518 : (isnan(_1518) ? 0.0 : max(_1518, 0.0));
        float _1519 = isnan(1.0) ? _4016 : (isnan(_4016) ? 1.0 : min(_4016, 1.0));
        float _1520 = _1519 * 2.0;
        float _1524 = (1.0 - _1519) / (_1519 + 1.0);
        float _4027 = isnan(0.0) ? _1524 : (isnan(_1524) ? 0.0 : max(_1524, 0.0));
        float _1525 = isnan(1.0) ? _4027 : (isnan(_4027) ? 1.0 : min(_4027, 1.0));
        float _1534 = ((((1.0 - _1525) * (_1520 + 2.0)) * exp2(log2(isnan(1.0) ? _4005 : (isnan(_4005) ? 1.0 : min(_4005, 1.0))) * (_1520 + 1.0))) + _1525) * _1490;
        float _1535 = _1458 * 0.5;
        float _1536 = _1468 * 0.5;
        float _1537 = _1478 * 0.5;
        float _1538 = dot(vec3(_1535, _1536, _1537), vec3(_1535, _1536, _1537));
        float _1543 = (_1538 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1538);
        float _1551 = (dot(vec3(_755, _756, _757), vec3(_1543 * _1535, _1543 * _1536, _1543 * _1537)) + 1.0) * 0.5;
        float _4038 = isnan(0.0) ? _1551 : (isnan(_1551) ? 0.0 : max(_1551, 0.0));
        float _1560 = sqrt(((_1536 * _1536) + (_1535 * _1535)) + (_1537 * _1537)) / (_1491 + 9.9999997473787516355514526367188e-06);
        float _4049 = isnan(0.0) ? _1560 : (isnan(_1560) ? 0.0 : max(_1560, 0.0));
        float _1561 = isnan(1.0) ? _4049 : (isnan(_4049) ? 1.0 : min(_4049, 1.0));
        float _1562 = _1561 * 2.0;
        float _1566 = (1.0 - _1561) / (_1561 + 1.0);
        float _4060 = isnan(0.0) ? _1566 : (isnan(_1566) ? 0.0 : max(_1566, 0.0));
        float _1567 = isnan(1.0) ? _4060 : (isnan(_4060) ? 1.0 : min(_4060, 1.0));
        float _1576 = ((((1.0 - _1567) * (_1562 + 2.0)) * exp2(log2(isnan(1.0) ? _4038 : (isnan(_4038) ? 1.0 : min(_4038, 1.0))) * (_1562 + 1.0))) + _1567) * _1491;
        float _1577 = _1459 * 0.5;
        float _1578 = _1469 * 0.5;
        float _1579 = _1479 * 0.5;
        float _1580 = dot(vec3(_1577, _1578, _1579), vec3(_1577, _1578, _1579));
        float _1585 = (_1580 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1580);
        float _1593 = (dot(vec3(_755, _756, _757), vec3(_1585 * _1577, _1585 * _1578, _1585 * _1579)) + 1.0) * 0.5;
        float _4071 = isnan(0.0) ? _1593 : (isnan(_1593) ? 0.0 : max(_1593, 0.0));
        float _1602 = sqrt(((_1578 * _1578) + (_1577 * _1577)) + (_1579 * _1579)) / (_1492 + 9.9999997473787516355514526367188e-06);
        float _4082 = isnan(0.0) ? _1602 : (isnan(_1602) ? 0.0 : max(_1602, 0.0));
        float _1603 = isnan(1.0) ? _4082 : (isnan(_4082) ? 1.0 : min(_4082, 1.0));
        float _1604 = _1603 * 2.0;
        float _1608 = (1.0 - _1603) / (_1603 + 1.0);
        float _4093 = isnan(0.0) ? _1608 : (isnan(_1608) ? 0.0 : max(_1608, 0.0));
        float _1609 = isnan(1.0) ? _4093 : (isnan(_4093) ? 1.0 : min(_4093, 1.0));
        float _1618 = ((((1.0 - _1609) * (_1604 + 2.0)) * exp2(log2(isnan(1.0) ? _4071 : (isnan(_4071) ? 1.0 : min(_4071, 1.0))) * (_1604 + 1.0))) + _1609) * _1492;
        _1626 = _1459;
        _1627 = _1458;
        _1628 = _1457;
        _1629 = _1469;
        _1630 = _1468;
        _1631 = _1467;
        _1632 = _1479;
        _1633 = _1478;
        _1634 = _1477;
        _1635 = _1492;
        _1636 = _1491;
        _1637 = _1490;
        _1638 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1534 : (isnan(_1534) ? 0.0 : max(_1534, 0.0)));
        _1639 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1576 : (isnan(_1576) ? 0.0 : max(_1576, 0.0)));
        _1640 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1618 : (isnan(_1618) ? 0.0 : max(_1618, 0.0)));
    }
    else
    {
        _1626 = _1316;
        _1627 = _1316;
        _1628 = _1316;
        _1629 = _1316;
        _1630 = _1316;
        _1631 = _1316;
        _1632 = _1316;
        _1633 = _1316;
        _1634 = _1316;
        _1635 = _1316;
        _1636 = _1316;
        _1637 = _1316;
        _1638 = 0.0;
        _1639 = 0.0;
        _1640 = 0.0;
    }
    float _1650 = (cbModelParam._m0[1u].x * (_1638 - _1328)) + _1328;
    float _1651 = (cbModelParam._m0[1u].x * (_1639 - _1329)) + _1329;
    float _1652 = (cbModelParam._m0[1u].x * (_1640 - _1330)) + _1330;
    float _1673 = fma(_1652, cbSceneParam._m0[89u].z, fma(_1651, cbSceneParam._m0[89u].y, _1650 * cbSceneParam._m0[89u].x));
    float _1676 = fma(_1652, cbSceneParam._m0[90u].z, fma(_1651, cbSceneParam._m0[90u].y, _1650 * cbSceneParam._m0[90u].x));
    float _1679 = fma(_1652, cbSceneParam._m0[91u].z, fma(_1651, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1650));
    float _1694 = _925 * 0.5;
    float _1695 = _926 * 0.5;
    float _1696 = _927 * 0.5;
    float _1697 = dot(vec4(_1694, _1695, _1696, 1.0), vec4(_1628, _1631, _1634, _1637));
    float _1700 = dot(vec4(_1694, _1695, _1696, 1.0), vec4(_1627, _1630, _1633, _1636));
    float _1703 = dot(vec4(_1694, _1695, _1696, 1.0), vec4(_1626, _1629, _1632, _1635));
    float _1737;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1710 = dot(vec4(_1694, _1695, _1696, 1.0), vec4(_1315, _1319, _1322, _1325));
        float _1714 = dot(vec4(_1694, _1695, _1696, 1.0), vec4(_1317, _1320, _1323, _1326));
        float _1718 = dot(vec4(_1694, _1695, _1696, 1.0), vec4(_1318, _1321, _1324, _1327));
        float _1725 = dot(vec4(cbModelParam._m0[39u]), vec4(_1694, _1695, _1696, 1.0));
        _1737 = dot(vec3(isnan(0.0) ? _1718 : (isnan(_1718) ? 0.0 : max(_1718, 0.0)), isnan(0.0) ? _1714 : (isnan(_1714) ? 0.0 : max(_1714, 0.0)), isnan(0.0) ? _1710 : (isnan(_1710) ? 0.0 : max(_1710, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1725) ? 0.0 : (isnan(0.0) ? _1725 : max(0.0, _1725))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1737 = 1.0;
    }
    float _1748;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1739 = dot(vec4(cbModelParam._m0[40u]), vec4(_1694, _1695, _1696, 1.0));
        _1748 = dot(vec3(isnan(0.0) ? _1697 : (isnan(_1697) ? 0.0 : max(_1697, 0.0)), isnan(0.0) ? _1700 : (isnan(_1700) ? 0.0 : max(_1700, 0.0)), isnan(0.0) ? _1703 : (isnan(_1703) ? 0.0 : max(_1703, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1739) ? 0.0 : (isnan(0.0) ? _1739 : max(0.0, _1739))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1748 = 1.0;
    }
    float _1752 = (_1748 * cbModelParam._m0[1u].x) + (_1737 * (1.0 - cbModelParam._m0[1u].x));
    float _1762 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _758);
    float _1763 = isnan(_1762) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1762 : min(cbModelParam._m0[25u].z, _1762));
    float _1843;
    float _1845;
    float _1847;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1810 = fma(_986, cbModelParam._m0[13u].z, fma(_982, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _978)) + cbModelParam._m0[13u].w;
        float _1814 = fma(_986, cbModelParam._m0[14u].z, fma(_982, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _978)) + cbModelParam._m0[14u].w;
        float _1818 = fma(_986, cbModelParam._m0[15u].z, fma(_982, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _978)) + cbModelParam._m0[15u].w;
        float _1821 = fma(_927, cbModelParam._m0[13u].z, fma(_926, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _925));
        float _1824 = fma(_927, cbModelParam._m0[14u].z, fma(_926, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _925));
        float _1827 = fma(_927, cbModelParam._m0[15u].z, fma(_926, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _925));
        float _1855;
        if (_1821 > 0.0)
        {
            _1855 = abs((1.0 - _1810) / _1821);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1821 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1810 + 1.0) / _1821);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1855 = frontier_phi_17_15_ladder;
        }
        float _2055;
        if (_1824 > 0.0)
        {
            _2055 = abs((1.0 - _1814) / _1824);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1824 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1814 + 1.0) / _1824);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2055 = frontier_phi_26_22_ladder;
        }
        float _2298;
        if (_1827 > 0.0)
        {
            _2298 = abs((1.0 - _1818) / _1827);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1827 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1818 + 1.0) / _1827);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2298 = frontier_phi_38_33_ladder;
        }
        float _2300 = isnan(_2055) ? _1855 : (isnan(_1855) ? _2055 : min(_1855, _2055));
        float _2301 = isnan(_2298) ? _2300 : (isnan(_2300) ? _2298 : min(_2300, _2298));
        float _2305 = (_2301 * _1821) + _1810;
        float _2306 = (_2301 * _1824) + _1814;
        float _2307 = (_2301 * _1827) + _1818;
        float _2308 = _2301 * 9.9999997473787516355514526367188e-05;
        float _2310 = (-1.0) - _2308;
        float _2312 = _2308 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2307 > _2312) || ((_2307 < _2310) || ((_2306 > _2312) || ((_2306 < _2310) || ((_2305 < _2310) || (_2305 > _2312))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2431 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2307, cbModelParam._m0[9u].z, fma(_2306, cbModelParam._m0[9u].y, _2305 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2307, cbModelParam._m0[10u].z, fma(_2306, cbModelParam._m0[10u].y, _2305 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2307, cbModelParam._m0[11u].z, fma(_2306, cbModelParam._m0[11u].y, _2305 * cbModelParam._m0[11u].x))), _1763);
            frontier_phi_16_38_ladder = _2431.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2431.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2431.x * cbModelParam._m0[1u].y;
        }
        _1843 = frontier_phi_16_38_ladder_2;
        _1845 = frontier_phi_16_38_ladder_1;
        _1847 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1831 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_925, _926, _927), _1763);
        _1843 = _1831.x * cbModelParam._m0[1u].y;
        _1845 = _1831.y * cbModelParam._m0[1u].y;
        _1847 = _1831.z * cbModelParam._m0[1u].y;
    }
    float _1851 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _758);
    float _1852 = isnan(_1851) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1851 : min(cbModelParam._m0[25u].w, _1851));
    float _1941;
    float _1943;
    float _1945;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1905 = fma(_986, cbModelParam._m0[21u].z, fma(_982, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _978)) + cbModelParam._m0[21u].w;
        float _1909 = fma(_986, cbModelParam._m0[22u].z, fma(_982, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _978)) + cbModelParam._m0[22u].w;
        float _1913 = fma(_986, cbModelParam._m0[23u].z, fma(_982, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _978)) + cbModelParam._m0[23u].w;
        float _1916 = fma(_927, cbModelParam._m0[21u].z, fma(_926, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _925));
        float _1919 = fma(_927, cbModelParam._m0[22u].z, fma(_926, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _925));
        float _1922 = fma(_927, cbModelParam._m0[23u].z, fma(_926, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _925));
        float _2060;
        if (_1916 > 0.0)
        {
            _2060 = abs((1.0 - _1905) / _1916);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1916 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1905 + 1.0) / _1916);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2060 = frontier_phi_28_24_ladder;
        }
        float _2325;
        if (_1919 > 0.0)
        {
            _2325 = abs((1.0 - _1909) / _1919);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1919 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1909 + 1.0) / _1919);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2325 = frontier_phi_40_35_ladder;
        }
        float _2530;
        if (_1922 > 0.0)
        {
            _2530 = abs((1.0 - _1913) / _1922);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1922 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1913 + 1.0) / _1922);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2530 = frontier_phi_49_46_ladder;
        }
        float _2532 = isnan(_2325) ? _2060 : (isnan(_2060) ? _2325 : min(_2060, _2325));
        float _2533 = isnan(_2530) ? _2532 : (isnan(_2532) ? _2530 : min(_2532, _2530));
        float _2537 = (_2533 * _1916) + _1905;
        float _2538 = (_2533 * _1919) + _1909;
        float _2539 = (_2533 * _1922) + _1913;
        float _2540 = _2533 * 9.9999997473787516355514526367188e-05;
        float _2541 = (-1.0) - _2540;
        float _2543 = _2540 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2539 > _2543) || ((_2539 < _2541) || ((_2538 > _2543) || ((_2538 < _2541) || ((_2537 < _2541) || (_2537 > _2543))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2738 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2539, cbModelParam._m0[17u].z, fma(_2538, cbModelParam._m0[17u].y, _2537 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2539, cbModelParam._m0[18u].z, fma(_2538, cbModelParam._m0[18u].y, _2537 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2539, cbModelParam._m0[19u].z, fma(_2538, cbModelParam._m0[19u].y, _2537 * cbModelParam._m0[19u].x))), _1852);
            frontier_phi_25_49_ladder = _2738.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2738.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2738.x * cbModelParam._m0[1u].z;
        }
        _1941 = frontier_phi_25_49_ladder_2;
        _1943 = frontier_phi_25_49_ladder_1;
        _1945 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1925 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_925, _926, _927), _1852);
        _1941 = _1925.x * cbModelParam._m0[1u].z;
        _1943 = _1925.y * cbModelParam._m0[1u].z;
        _1945 = _1925.z * cbModelParam._m0[1u].z;
    }
    float _1957 = ((((1.0 - _946) * ((_933 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_946 * _933)) * _917;
    float _1958 = _1957 * ((cbModelParam._m0[1u].w * (_1941 - _1843)) + _1843);
    float _1959 = _1957 * ((cbModelParam._m0[1u].w * (_1943 - _1845)) + _1845);
    float _1960 = _1957 * ((cbModelParam._m0[1u].w * (_1945 - _1847)) + _1847);
    float _1963 = fma(_1960, cbSceneParam._m0[89u].z, fma(_1959, cbSceneParam._m0[89u].y, _1958 * cbSceneParam._m0[89u].x));
    float _1966 = fma(_1960, cbSceneParam._m0[90u].z, fma(_1959, cbSceneParam._m0[90u].y, _1958 * cbSceneParam._m0[90u].x));
    float _1969 = fma(_1960, cbSceneParam._m0[91u].z, fma(_1959, cbSceneParam._m0[91u].y, _1958 * cbSceneParam._m0[91u].x));
    uvec4 _1979 = floatBitsToUint(cbInstanceData._m0[_244 + 5u]);
    uint _1981 = _1979.x * 14u;
    uint _1982 = _1981 + 13u;
    float _1989 = _917 + (-1.0);
    float _1994 = (cbLight._m0[_1982].x * _1989) + 1.0;
    float _1995 = (cbLight._m0[_1982].y * _1989) + 1.0;
    float _1996 = (cbLight._m0[_1982].z * _1989) + 1.0;
    float _1997 = (cbLight._m0[_1982].w * _1989) + 1.0;
    uint _1998 = _1981 + 5u;
    float _2004 = isnan(1.0) ? _1995 : (isnan(_1995) ? 1.0 : min(_1995, 1.0));
    uint _2008 = _1981 + 4u;
    float _2014 = isnan(1.0) ? _1994 : (isnan(_1994) ? 1.0 : min(_1994, 1.0));
    uint _2018 = _1981 | 1u;
    float _2029 = dot(vec3(cbLight._m0[_1981].xyz), vec3(_755, _756, _757));
    float _2032 = dot(vec3(cbLight._m0[_2018].xyz), vec3(_755, _756, _757));
    float _4229 = isnan(0.0) ? _2029 : (isnan(_2029) ? 0.0 : max(_2029, 0.0));
    float _4240 = isnan(0.0) ? _2032 : (isnan(_2032) ? 0.0 : max(_2032, 0.0));
    float _2037 = (isnan(1.0) ? _4229 : (isnan(_4229) ? 1.0 : min(_4229, 1.0))) * 0.3183098733425140380859375;
    float _2039 = (isnan(1.0) ? _4240 : (isnan(_4240) ? 1.0 : min(_4240, 1.0))) * 0.3183098733425140380859375;
    float _2046 = ((cbLight._m0[_1998].x * _2004) * _2039) + ((cbLight._m0[_2008].x * _2014) * _2037);
    float _2047 = ((_2004 * cbLight._m0[_1998].y) * _2039) + ((_2014 * cbLight._m0[_2008].y) * _2037);
    float _2048 = ((_2004 * cbLight._m0[_1998].z) * _2039) + ((_2014 * cbLight._m0[_2008].z) * _2037);
    uvec4 _2052 = floatBitsToUint(cbLight._m0[_1981 + 12u]);
    bool _2054 = _2052.x == 0u;
    float _2065;
    float _2067;
    float _2069;
    if (_2054)
    {
        _2065 = _2046;
        _2067 = _2047;
        _2069 = _2048;
    }
    else
    {
        uint _2073 = _1981 + 6u;
        float _2089 = (dot(vec3(cbLight._m0[_1981 + 2u].xyz), vec3(_755, _756, _757)) * 0.5) + 0.5;
        float _2090 = _2089 * _2089;
        float _4251 = isnan(0.0) ? _2090 : (isnan(_2090) ? 0.0 : max(_2090, 0.0));
        float _2091 = isnan(1.0) ? _4251 : (isnan(_4251) ? 1.0 : min(_4251, 1.0));
        float _2092 = isnan(1.0) ? _1996 : (isnan(_1996) ? 1.0 : min(_1996, 1.0));
        _2065 = (((cbLight._m0[_2073].x * 0.3183098733425140380859375) * _2091) * _2092) + _2046;
        _2067 = (((cbLight._m0[_2073].y * 0.3183098733425140380859375) * _2091) * _2092) + _2047;
        _2069 = (((cbLight._m0[_2073].z * 0.3183098733425140380859375) * _2091) * _2092) + _2048;
    }
    bool _2072 = _2052.y == 0u;
    float _2110;
    float _2112;
    float _2114;
    if (_2072)
    {
        _2110 = _2065;
        _2112 = _2067;
        _2114 = _2069;
    }
    else
    {
        uint _2269 = _1981 + 7u;
        float _2285 = (dot(vec3(cbLight._m0[_1981 + 3u].xyz), vec3(_755, _756, _757)) * 0.5) + 0.5;
        float _2286 = _2285 * _2285;
        float _4267 = isnan(0.0) ? _2286 : (isnan(_2286) ? 0.0 : max(_2286, 0.0));
        float _2287 = isnan(1.0) ? _4267 : (isnan(_4267) ? 1.0 : min(_4267, 1.0));
        float _2288 = isnan(1.0) ? _1997 : (isnan(_1997) ? 1.0 : min(_1997, 1.0));
        _2110 = (((cbLight._m0[_2269].x * 0.3183098733425140380859375) * _2287) * _2288) + _2065;
        _2112 = (((cbLight._m0[_2269].y * 0.3183098733425140380859375) * _2287) * _2288) + _2067;
        _2114 = (((cbLight._m0[_2269].z * 0.3183098733425140380859375) * _2287) * _2288) + _2069;
    }
    uint _2117 = _1981 + 8u;
    float _2130 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1981].w)) * _758) * 0.949999988079071044921875);
    float _2131 = _2130 * _2130;
    float _2132 = cbLight._m0[_1981].x + _834;
    float _2133 = cbLight._m0[_1981].y + _835;
    float _2134 = cbLight._m0[_1981].z + _836;
    float _2138 = inversesqrt(dot(vec3(_2132, _2133, _2134), vec3(_2132, _2133, _2134)));
    float _2139 = _2138 * _2132;
    float _2140 = _2138 * _2133;
    float _2141 = _2138 * _2134;
    float _2142 = dot(vec3(_755, _756, _757), vec3(cbLight._m0[_1981].xyz));
    float _4283 = isnan(0.0) ? _2142 : (isnan(_2142) ? 0.0 : max(_2142, 0.0));
    float _2145 = isnan(1.0) ? _4283 : (isnan(_4283) ? 1.0 : min(_4283, 1.0));
    float _4294 = isnan(0.0) ? _918 : (isnan(_918) ? 0.0 : max(_918, 0.0));
    float _2146 = isnan(1.0) ? _4294 : (isnan(_4294) ? 1.0 : min(_4294, 1.0));
    float _2147 = dot(vec3(_755, _756, _757), vec3(_2139, _2140, _2141));
    float _4305 = isnan(0.0) ? _2147 : (isnan(_2147) ? 0.0 : max(_2147, 0.0));
    float _2150 = isnan(1.0) ? _4305 : (isnan(_4305) ? 1.0 : min(_4305, 1.0));
    float _2151 = dot(vec3(cbLight._m0[_1981].xyz), vec3(_2139, _2140, _2141));
    float _4316 = isnan(0.0) ? _2151 : (isnan(_2151) ? 0.0 : max(_2151, 0.0));
    float _2155 = _2131 * _2131;
    float _2159 = ((_2150 * _2150) * (_2155 + (-1.0))) + 1.0;
    float _2170 = (exp2(log2(1.0 - (isnan(1.0) ? _4316 : (isnan(_4316) ? 1.0 : min(_4316, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2171 = 1.0 - _2131;
    float _2182 = (0.5 / (((_2146 * ((_2145 * _2171) + _2131)) + 9.9999999392252902907785028219223e-09) + (((_2146 * _2171) + _2131) * _2145))) * _2145;
    float _4327 = isnan(0.0) ? _2182 : (isnan(_2182) ? 0.0 : max(_2182, 0.0));
    float _2184 = (isnan(1.0) ? _4327 : (isnan(_4327) ? 1.0 : min(_4327, 1.0))) * (_2155 / ((_2159 * _2159) * 3.141590118408203125));
    uint _2195 = _1981 + 9u;
    float _2206 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2018].w)) * _758) * 0.949999988079071044921875);
    float _2207 = _2206 * _2206;
    float _2208 = cbLight._m0[_2018].x + _834;
    float _2209 = cbLight._m0[_2018].y + _835;
    float _2210 = cbLight._m0[_2018].z + _836;
    float _2214 = inversesqrt(dot(vec3(_2208, _2209, _2210), vec3(_2208, _2209, _2210)));
    float _2215 = _2214 * _2208;
    float _2216 = _2214 * _2209;
    float _2217 = _2214 * _2210;
    float _2218 = dot(vec3(_755, _756, _757), vec3(cbLight._m0[_2018].xyz));
    float _4338 = isnan(0.0) ? _2218 : (isnan(_2218) ? 0.0 : max(_2218, 0.0));
    float _2221 = isnan(1.0) ? _4338 : (isnan(_4338) ? 1.0 : min(_4338, 1.0));
    float _2222 = dot(vec3(_755, _756, _757), vec3(_2215, _2216, _2217));
    float _4349 = isnan(0.0) ? _2222 : (isnan(_2222) ? 0.0 : max(_2222, 0.0));
    float _2225 = isnan(1.0) ? _4349 : (isnan(_4349) ? 1.0 : min(_4349, 1.0));
    float _2226 = dot(vec3(cbLight._m0[_2018].xyz), vec3(_2215, _2216, _2217));
    float _4360 = isnan(0.0) ? _2226 : (isnan(_2226) ? 0.0 : max(_2226, 0.0));
    float _2230 = _2207 * _2207;
    float _2234 = ((_2225 * _2225) * (_2230 + (-1.0))) + 1.0;
    float _2243 = (exp2(log2(1.0 - (isnan(1.0) ? _4360 : (isnan(_4360) ? 1.0 : min(_4360, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2244 = 1.0 - _2207;
    float _2254 = (0.5 / (((_2146 * ((_2221 * _2244) + _2207)) + 9.9999999392252902907785028219223e-09) + (((_2146 * _2244) + _2207) * _2221))) * _2221;
    float _4371 = isnan(0.0) ? _2254 : (isnan(_2254) ? 0.0 : max(_2254, 0.0));
    float _2256 = (isnan(1.0) ? _4371 : (isnan(_4371) ? 1.0 : min(_4371, 1.0))) * (_2230 / ((_2234 * _2234) * 3.141590118408203125));
    float _2266 = (((_2243 * cbLight._m0[_2195].x) * _2256) * _2004) + (((_2170 * cbLight._m0[_2117].x) * _2184) * _2014);
    float _2267 = (((_2243 * cbLight._m0[_2195].y) * _2256) * _2004) + (((_2170 * cbLight._m0[_2117].y) * _2184) * _2014);
    float _2268 = (((_2243 * cbLight._m0[_2195].z) * _2256) * _2004) + (((_2170 * cbLight._m0[_2117].z) * _2184) * _2014);
    float _2330;
    float _2332;
    float _2334;
    if (_2054)
    {
        _2330 = _2266;
        _2332 = _2267;
        _2334 = _2268;
    }
    else
    {
        uint _2336 = _1981 + 2u;
        uint _2340 = _1981 + 10u;
        float _2354 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2336].w)) * _758) * 0.949999988079071044921875);
        float _2355 = _2354 * _2354;
        float _2356 = cbLight._m0[_2336].x + _834;
        float _2357 = cbLight._m0[_2336].y + _835;
        float _2358 = cbLight._m0[_2336].z + _836;
        float _2362 = inversesqrt(dot(vec3(_2356, _2357, _2358), vec3(_2356, _2357, _2358)));
        float _2363 = _2362 * _2356;
        float _2364 = _2362 * _2357;
        float _2365 = _2362 * _2358;
        float _2366 = dot(vec3(_755, _756, _757), vec3(cbLight._m0[_2336].xyz));
        float _4382 = isnan(0.0) ? _2366 : (isnan(_2366) ? 0.0 : max(_2366, 0.0));
        float _2369 = isnan(1.0) ? _4382 : (isnan(_4382) ? 1.0 : min(_4382, 1.0));
        float _2370 = dot(vec3(_755, _756, _757), vec3(_2363, _2364, _2365));
        float _4393 = isnan(0.0) ? _2370 : (isnan(_2370) ? 0.0 : max(_2370, 0.0));
        float _2373 = isnan(1.0) ? _4393 : (isnan(_4393) ? 1.0 : min(_4393, 1.0));
        float _2374 = dot(vec3(cbLight._m0[_2336].xyz), vec3(_2363, _2364, _2365));
        float _4404 = isnan(0.0) ? _2374 : (isnan(_2374) ? 0.0 : max(_2374, 0.0));
        float _2378 = _2355 * _2355;
        float _2382 = ((_2373 * _2373) * (_2378 + (-1.0))) + 1.0;
        float _2391 = (exp2(log2(1.0 - (isnan(1.0) ? _4404 : (isnan(_4404) ? 1.0 : min(_4404, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2392 = 1.0 - _2355;
        float _2402 = (0.5 / (((_2146 * ((_2369 * _2392) + _2355)) + 9.9999999392252902907785028219223e-09) + (((_2146 * _2392) + _2355) * _2369))) * _2369;
        float _4415 = isnan(0.0) ? _2402 : (isnan(_2402) ? 0.0 : max(_2402, 0.0));
        float _2404 = (isnan(1.0) ? _4415 : (isnan(_4415) ? 1.0 : min(_4415, 1.0))) * (_2378 / ((_2382 * _2382) * 3.141590118408203125));
        float _2405 = isnan(1.0) ? _1996 : (isnan(_1996) ? 1.0 : min(_1996, 1.0));
        _2330 = (((_2391 * cbLight._m0[_2340].x) * _2404) * _2405) + _2266;
        _2332 = (((_2391 * cbLight._m0[_2340].y) * _2404) * _2405) + _2267;
        _2334 = (((_2391 * cbLight._m0[_2340].z) * _2404) * _2405) + _2268;
    }
    float _2440;
    float _2442;
    float _2444;
    if (_2072)
    {
        _2440 = _2330;
        _2442 = _2332;
        _2444 = _2334;
    }
    else
    {
        uint _2451 = _1981 + 3u;
        uint _2455 = _1981 + 11u;
        float _2469 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2451].w)) * _758) * 0.949999988079071044921875);
        float _2470 = _2469 * _2469;
        float _2471 = cbLight._m0[_2451].x + _834;
        float _2472 = cbLight._m0[_2451].y + _835;
        float _2473 = cbLight._m0[_2451].z + _836;
        float _2477 = inversesqrt(dot(vec3(_2471, _2472, _2473), vec3(_2471, _2472, _2473)));
        float _2478 = _2477 * _2471;
        float _2479 = _2477 * _2472;
        float _2480 = _2477 * _2473;
        float _2481 = dot(vec3(_755, _756, _757), vec3(cbLight._m0[_2451].xyz));
        float _4431 = isnan(0.0) ? _2481 : (isnan(_2481) ? 0.0 : max(_2481, 0.0));
        float _2484 = isnan(1.0) ? _4431 : (isnan(_4431) ? 1.0 : min(_4431, 1.0));
        float _2485 = dot(vec3(_755, _756, _757), vec3(_2478, _2479, _2480));
        float _4442 = isnan(0.0) ? _2485 : (isnan(_2485) ? 0.0 : max(_2485, 0.0));
        float _2488 = isnan(1.0) ? _4442 : (isnan(_4442) ? 1.0 : min(_4442, 1.0));
        float _2489 = dot(vec3(cbLight._m0[_2451].xyz), vec3(_2478, _2479, _2480));
        float _4453 = isnan(0.0) ? _2489 : (isnan(_2489) ? 0.0 : max(_2489, 0.0));
        float _2493 = _2470 * _2470;
        float _2497 = ((_2488 * _2488) * (_2493 + (-1.0))) + 1.0;
        float _2506 = (exp2(log2(1.0 - (isnan(1.0) ? _4453 : (isnan(_4453) ? 1.0 : min(_4453, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2507 = 1.0 - _2470;
        float _2517 = (0.5 / (((_2146 * ((_2484 * _2507) + _2470)) + 9.9999999392252902907785028219223e-09) + (((_2146 * _2507) + _2470) * _2484))) * _2484;
        float _4464 = isnan(0.0) ? _2517 : (isnan(_2517) ? 0.0 : max(_2517, 0.0));
        float _2519 = (isnan(1.0) ? _4464 : (isnan(_4464) ? 1.0 : min(_4464, 1.0))) * (_2493 / ((_2497 * _2497) * 3.141590118408203125));
        float _2520 = isnan(1.0) ? _1997 : (isnan(_1997) ? 1.0 : min(_1997, 1.0));
        _2440 = (((_2506 * cbLight._m0[_2455].x) * _2519) * _2520) + _2330;
        _2442 = (((_2506 * cbLight._m0[_2455].y) * _2519) * _2520) + _2332;
        _2444 = (((_2506 * cbLight._m0[_2455].z) * _2519) * _2520) + _2334;
    }
    float _2655;
    float _2657;
    float _2659;
    float _2661;
    float _2663;
    float _2665;
    if (_1979.y == 0u)
    {
        float _2595 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2596 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2595;
        float _2597 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2595;
        float _2598 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2595;
        uvec4 _2610 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2611 = _2610.x;
        uint _2622 = uint((float(_2610.y) * floor(float(uint(cbSceneParam._m0[85u].y * _855) / _2611))) + floor(float(uint(cbSceneParam._m0[85u].x * _854) / _2611)));
        float _2632 = (log2(_2598 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2633 = isnan(0.0) ? _2632 : (isnan(_2632) ? 0.0 : max(_2632, 0.0));
        uint _2636 = uint(isnan(14.0) ? _2633 : (isnan(_2633) ? 14.0 : min(_2633, 14.0)));
        uvec4 _2641 = texelFetch(g_lightClusterGridBuffer, int(((_2636 << 2u) + (_2622 << 6u)) >> 2u));
        uint _2642 = _2641.x;
        uint _2643 = _2610.z;
        float _2743;
        float _2745;
        float _2747;
        float _2749;
        float _2751;
        float _2753;
        if (((((1u << ((_2643 >> 4u) & 15u)) + 4294967295u) & _2642) == 0u) || ((_2643 & 240u) == 0u))
        {
            _2743 = 0.0;
            _2745 = 0.0;
            _2747 = 0.0;
            _2749 = 0.0;
            _2751 = 0.0;
            _2753 = 0.0;
        }
        else
        {
            float _2744;
            float _2746;
            float _2748;
            float _2750;
            float _2752;
            float _2754;
            float _2896 = 0.0;
            float _2897 = 0.0;
            float _2898 = 0.0;
            float _2899 = 0.0;
            float _2900 = 0.0;
            float _2901 = 0.0;
            uint _2902 = 0u;
            uint _2911;
            bool _2912;
            for (;;)
            {
                _2911 = texelFetch(g_lightClassification, int((((_2636 << 5u) + (_2622 << 9u)) + (_2902 << 2u)) >> 2u)).x;
                _2912 = _2911 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2912)
                {
                    frontier_phi_66_pred = _2896;
                    frontier_phi_66_pred_1 = _2901;
                    frontier_phi_66_pred_2 = _2900;
                    frontier_phi_66_pred_3 = _2899;
                    frontier_phi_66_pred_4 = _2898;
                    frontier_phi_66_pred_5 = _2897;
                }
                else
                {
                    float _3041;
                    float _3042;
                    float _3043;
                    float _3044;
                    float _3045;
                    float _3046;
                    uint _3047;
                    _3041 = _2896;
                    _3042 = _2897;
                    _3043 = _2898;
                    _3044 = _2899;
                    _3045 = _2900;
                    _3046 = _2901;
                    _3047 = _2911;
                    float _2968;
                    float _2969;
                    float _2970;
                    float _2971;
                    float _2972;
                    float _2973;
                    for (;;)
                    {
                        uint _3051 = uint(findLSB(_3047)) + (_2902 << 5u);
                        uint _3048 = (_3047 + 4294967295u) & _3047;
                        uint _3053 = _3051 * 48u;
                        vec4 _3067 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3053)).x, texelFetch(g_PointLightRenderingBuffer, int(_3053 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3053 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3053 + 3u)).x));
                        uint _3073 = (_3051 * 48u) + 4u;
                        vec4 _3086 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3073)).x, texelFetch(g_PointLightRenderingBuffer, int(_3073 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3073 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3073 + 3u)).x));
                        uint _3092 = (_3051 * 48u) + 8u;
                        vec3 _3103 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3092)).x, texelFetch(g_PointLightRenderingBuffer, int(_3092 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3092 + 2u)).x));
                        float _3107 = _3067.x - _2596;
                        float _3108 = _3067.y - _2597;
                        float _3109 = _3067.z - _2598;
                        float _3110 = dot(vec3(_3107, _3108, _3109), vec3(_3107, _3108, _3109));
                        float _3113 = inversesqrt(_3110);
                        float _3114 = _3113 * _3107;
                        float _3115 = _3113 * _3108;
                        float _3116 = _3113 * _3109;
                        float _3117 = dot(vec3(_873, _876, _879), vec3(_3114, _3115, _3116));
                        float _3122 = 1.0 - (_3110 * _3067.w);
                        float _4490 = isnan(0.0) ? _3122 : (isnan(_3122) ? 0.0 : max(_3122, 0.0));
                        float _3123 = isnan(1.0) ? _4490 : (isnan(_4490) ? 1.0 : min(_4490, 1.0));
                        float _3124 = sqrt(_3110) * _3086.w;
                        float _3127 = 1.39999997615814208984375 / (_3124 + 1.39999997615814208984375);
                        float _3128 = _3127 * _3127;
                        float _3131 = ((1.0 - _3128) * _3117) + _3128;
                        float _3134 = _3124 * _3124;
                        float _3138 = ((isnan(0.0) ? _3131 : (isnan(_3131) ? 0.0 : max(_3131, 0.0))) * _3123) / ((_3134 * 0.699999988079071044921875) + 1.0);
                        float _3142 = (-0.0) - _2596;
                        float _3143 = (-0.0) - _2597;
                        float _3144 = (-0.0) - _2598;
                        float _3148 = inversesqrt(dot(vec3(_3142, _3143, _3144), vec3(_3142, _3143, _3144)));
                        float _3149 = _3148 * _3142;
                        float _3150 = _3148 * _3143;
                        float _3151 = _3148 * _3144;
                        float _3159 = exp2(log2(1.0 / ((_3134 * 3.5) + 5.0)) * 0.25);
                        float _3160 = 1.0 - _933;
                        float _3167 = sqrt(1.0 - ((1.0 - (_3160 * _3160)) * (1.0 - (_3159 * _3159))));
                        float _3168 = _3167 * _3167;
                        float _3169 = _3168 * _3168;
                        float _3170 = _3149 + _3114;
                        float _3171 = _3150 + _3115;
                        float _3172 = _3151 + _3116;
                        float _3176 = inversesqrt(dot(vec3(_3170, _3171, _3172), vec3(_3170, _3171, _3172)));
                        float _3180 = dot(vec3(_873, _876, _879), vec3(_3149, _3150, _3151));
                        float _4506 = isnan(0.0) ? _3180 : (isnan(_3180) ? 0.0 : max(_3180, 0.0));
                        float _3183 = isnan(1.0) ? _4506 : (isnan(_4506) ? 1.0 : min(_4506, 1.0));
                        float _3184 = dot(vec3(_873, _876, _879), vec3(_3176 * _3170, _3176 * _3171, _3176 * _3172));
                        float _4517 = isnan(0.0) ? _3184 : (isnan(_3184) ? 0.0 : max(_3184, 0.0));
                        float _3187 = isnan(1.0) ? _4517 : (isnan(_4517) ? 1.0 : min(_4517, 1.0));
                        float _3191 = ((_3187 * _3187) * (_3169 + (-1.0))) + 1.0;
                        float _3192 = _3127 * _3168;
                        float _3193 = _3192 * _3192;
                        float _3196 = ((1.0 - _3193) * _3117) + _3193;
                        float _4528 = isnan(0.0) ? _3196 : (isnan(_3196) ? 0.0 : max(_3196, 0.0));
                        float _3197 = isnan(1.0) ? _4528 : (isnan(_4528) ? 1.0 : min(_4528, 1.0));
                        float _3198 = 1.0 - _3168;
                        float _3208 = (0.5 / (((_3197 * ((_3183 * _3198) + _3168)) + 9.9999999392252902907785028219223e-09) + (((_3197 * _3198) + _3168) * _3183))) * _3197;
                        float _4539 = isnan(0.0) ? _3208 : (isnan(_3208) ? 0.0 : max(_3208, 0.0));
                        float _3219 = (((_3169 * 3.1415927410125732421875) * (isnan(1.0) ? _4539 : (isnan(_4539) ? 1.0 : min(_4539, 1.0)))) / ((_3191 * _3191) * ((_3134 * 2.1991131305694580078125) + 3.141590118408203125))) * _3123;
                        _2971 = (_3138 * _3086.x) + _3044;
                        _2972 = (_3138 * _3086.y) + _3045;
                        _2973 = (_3138 * _3086.z) + _3046;
                        _2968 = (_3219 * _3103.x) + _3041;
                        _2969 = (_3219 * _3103.y) + _3042;
                        _2970 = (_3219 * _3103.z) + _3043;
                        if (_3048 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3041 = _2968;
                            _3042 = _2969;
                            _3043 = _2970;
                            _3044 = _2971;
                            _3045 = _2972;
                            _3046 = _2973;
                            _3047 = _3048;
                        }
                    }
                    frontier_phi_66_pred = _2968;
                    frontier_phi_66_pred_1 = _2973;
                    frontier_phi_66_pred_2 = _2972;
                    frontier_phi_66_pred_3 = _2971;
                    frontier_phi_66_pred_4 = _2970;
                    frontier_phi_66_pred_5 = _2969;
                }
                _2744 = frontier_phi_66_pred;
                _2754 = frontier_phi_66_pred_1;
                _2752 = frontier_phi_66_pred_2;
                _2750 = frontier_phi_66_pred_3;
                _2748 = frontier_phi_66_pred_4;
                _2746 = frontier_phi_66_pred_5;
                uint _2903 = _2902 + 1u;
                if (_2903 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2896 = _2744;
                    _2897 = _2746;
                    _2898 = _2748;
                    _2899 = _2750;
                    _2900 = _2752;
                    _2901 = _2754;
                    _2902 = _2903;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2743 = _2744;
            _2745 = _2746;
            _2747 = _2748;
            _2749 = _2750;
            _2751 = _2752;
            _2753 = _2754;
        }
        uvec4 _2757 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2758 = _2757.z;
        uint _2760 = (_2758 >> 8u) & 15u;
        float _2864;
        float _2866;
        float _2868;
        float _2870;
        float _2872;
        float _2874;
        if (((4294967295u << _2760) & _2642) == 0u)
        {
            _2864 = _2743;
            _2866 = _2745;
            _2868 = _2747;
            _2870 = _2749;
            _2872 = _2751;
            _2874 = _2753;
        }
        else
        {
            float _2889 = inversesqrt(dot(vec3(_2596, _2597, _2598), vec3(_2596, _2597, _2598)));
            float _2890 = _2889 * _2596;
            float _2891 = _2889 * _2597;
            float _2892 = _2889 * _2598;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2760 < ((_2758 >> 12u) & 15u))
            {
                float _2865;
                float _2867;
                float _2869;
                float _2871;
                float _2873;
                float _2875;
                float _3024 = _2743;
                float _3025 = _2745;
                float _3026 = _2747;
                float _3027 = _2749;
                float _3028 = _2751;
                float _3029 = _2753;
                uint _3030 = _2760;
                uint _3039;
                bool _3040;
                for (;;)
                {
                    _3039 = texelFetch(g_lightClassification, int((((_2636 << 5u) + (_2622 << 9u)) + (_3030 << 2u)) >> 2u)).x;
                    _3040 = _3039 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_3040)
                    {
                        frontier_phi_77_pred = _3029;
                        frontier_phi_77_pred_1 = _3028;
                        frontier_phi_77_pred_2 = _3027;
                        frontier_phi_77_pred_3 = _3026;
                        frontier_phi_77_pred_4 = _3025;
                        frontier_phi_77_pred_5 = _3024;
                    }
                    else
                    {
                        float _3233;
                        float _3234;
                        float _3235;
                        float _3236;
                        float _3237;
                        float _3238;
                        float _3526;
                        float _3527;
                        float _3528;
                        float _3529;
                        float _3530;
                        float _3531;
                        float _3246 = _3024;
                        float _3247 = _3025;
                        float _3248 = _3026;
                        float _3249 = _3027;
                        float _3250 = _3028;
                        float _3251 = _3029;
                        uint _3252 = _3039;
                        uint _3253;
                        vec4 _3278;
                        float _3279;
                        vec4 _3294;
                        vec3 _3306;
                        vec4 _3321;
                        vec4 _3336;
                        float _3382;
                        bool _3383;
                        for (;;)
                        {
                            uint _3263 = ((_3030 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3252));
                            _3253 = (_3252 + 4294967295u) & _3252;
                            uint _3265 = _3263 * 40u;
                            _3278 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3265)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3265 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3265 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3265 + 3u)).x));
                            _3279 = _3278.w;
                            uint _3281 = (_3263 * 40u) + 4u;
                            _3294 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3281)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3281 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3281 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3281 + 3u)).x));
                            uint _3296 = (_3263 * 40u) + 8u;
                            _3306 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3296)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3296 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3296 + 2u)).x));
                            uint _3308 = (_3263 * 40u) + 16u;
                            _3321 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3308)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3308 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3308 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3308 + 3u)).x));
                            uint _3323 = (_3263 * 40u) + 20u;
                            _3336 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3323)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3323 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3323 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3323 + 3u)).x));
                            uint _3338 = (_3263 * 40u) + 24u;
                            vec4 _3351 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3338)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3338 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3338 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3338 + 3u)).x));
                            uint _3357 = (_3263 * 40u) + 28u;
                            vec4 _3370 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3357)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3357 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3357 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3357 + 3u)).x));
                            _3382 = fma(_2598, _3370.z, fma(_2597, _3370.y, _3370.x * _2596)) + _3370.w;
                            _3383 = !((fma(_2598, _3351.z, fma(_2597, _3351.y, _3351.x * _2596)) + _3351.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3383)
                            {
                                float _3410 = _3278.x - _2596;
                                float _3411 = _3278.y - _2597;
                                float _3412 = _3278.z - _2598;
                                float _3413 = dot(vec3(_3410, _3411, _3412), vec3(_3410, _3411, _3412));
                                float _3416 = inversesqrt(_3413);
                                float _3417 = _3416 * _3410;
                                float _3418 = _3416 * _3411;
                                float _3419 = _3416 * _3412;
                                float _3423 = 1.0 - (_3413 / (_3279 * _3279));
                                float _4550 = isnan(0.0) ? _3423 : (isnan(_3423) ? 0.0 : max(_3423, 0.0));
                                float _3424 = isnan(1.0) ? _4550 : (isnan(_4550) ? 1.0 : min(_4550, 1.0));
                                float _3428 = sqrt(_3413) * _3294.w;
                                float _3430 = 1.39999997615814208984375 / (_3428 + 1.39999997615814208984375);
                                float _3431 = _3430 * _3430;
                                float _3434 = ((1.0 - _3431) * dot(vec3(_3417, _3418, _3419), vec3(_873, _876, _879))) + _3431;
                                float _3437 = _3428 * _3428;
                                float _3441 = (fma(_2598, _3321.z, fma(_2597, _3321.y, _3321.x * _2596)) + _3321.w) / _3382;
                                float _3442 = (fma(_2598, _3336.z, fma(_2597, _3336.y, _3336.x * _2596)) + _3336.w) / _3382;
                                float _3446 = 1.0 - dot(vec2(_3441, _3442), vec2(_3441, _3442));
                                float _4566 = isnan(0.0) ? _3446 : (isnan(_3446) ? 0.0 : max(_3446, 0.0));
                                float _3447 = isnan(1.0) ? _4566 : (isnan(_4566) ? 1.0 : min(_4566, 1.0));
                                float _3448 = _3447 * (((isnan(0.0) ? _3434 : (isnan(_3434) ? 0.0 : max(_3434, 0.0))) * _3424) / ((_3437 * 0.699999988079071044921875) + 1.0));
                                float _3460 = exp2(log2(1.0 / ((_3437 * 3.5) + 5.0)) * 0.25);
                                float _3461 = 1.0 - _933;
                                float _3468 = sqrt(1.0 - ((1.0 - (_3461 * _3461)) * (1.0 - (_3460 * _3460))));
                                float _3469 = _3468 * _3468;
                                float _3470 = _3469 * _3469;
                                float _3471 = _3417 - _2890;
                                float _3472 = _3418 - _2891;
                                float _3473 = _3419 - _2892;
                                float _3477 = inversesqrt(dot(vec3(_3471, _3472, _3473), vec3(_3471, _3472, _3473)));
                                float _3481 = dot(vec3(_873, _876, _879), vec3((-0.0) - _2890, (-0.0) - _2891, (-0.0) - _2892));
                                float _4577 = isnan(0.0) ? _3481 : (isnan(_3481) ? 0.0 : max(_3481, 0.0));
                                float _3484 = isnan(1.0) ? _4577 : (isnan(_4577) ? 1.0 : min(_4577, 1.0));
                                float _3485 = dot(vec3(_873, _876, _879), vec3(_3477 * _3471, _3477 * _3472, _3477 * _3473));
                                float _4588 = isnan(0.0) ? _3485 : (isnan(_3485) ? 0.0 : max(_3485, 0.0));
                                float _3488 = isnan(1.0) ? _4588 : (isnan(_4588) ? 1.0 : min(_4588, 1.0));
                                float _3492 = ((_3488 * _3488) * (_3470 + (-1.0))) + 1.0;
                                float _3493 = _3430 * _3469;
                                float _3494 = _3493 * _3493;
                                float _3500 = ((1.0 - _3494) * dot(vec3(_873, _876, _879), vec3(_3417, _3418, _3419))) + _3494;
                                float _4599 = isnan(0.0) ? _3500 : (isnan(_3500) ? 0.0 : max(_3500, 0.0));
                                float _3501 = isnan(1.0) ? _4599 : (isnan(_4599) ? 1.0 : min(_4599, 1.0));
                                float _3502 = 1.0 - _3469;
                                float _3512 = (0.5 / (((_3501 * ((_3484 * _3502) + _3469)) + 9.9999999392252902907785028219223e-09) + (((_3501 * _3502) + _3469) * _3484))) * _3501;
                                float _4610 = isnan(0.0) ? _3512 : (isnan(_3512) ? 0.0 : max(_3512, 0.0));
                                float _3522 = (_3447 * _3424) * (((_3470 * 3.1415927410125732421875) * (isnan(1.0) ? _4610 : (isnan(_4610) ? 1.0 : min(_4610, 1.0)))) / ((_3492 * _3492) * ((_3437 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3448 * _3294.y;
                                frontier_phi_83_pred_1 = _3448 * _3294.x;
                                frontier_phi_83_pred_2 = _3522 * _3306.z;
                                frontier_phi_83_pred_3 = _3522 * _3306.y;
                                frontier_phi_83_pred_4 = _3522 * _3306.x;
                                frontier_phi_83_pred_5 = _3448 * _3294.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3530 = frontier_phi_83_pred;
                            _3529 = frontier_phi_83_pred_1;
                            _3528 = frontier_phi_83_pred_2;
                            _3527 = frontier_phi_83_pred_3;
                            _3526 = frontier_phi_83_pred_4;
                            _3531 = frontier_phi_83_pred_5;
                            _3236 = _3529 + _3249;
                            _3237 = _3530 + _3250;
                            _3238 = _3531 + _3251;
                            _3233 = _3526 + _3246;
                            _3234 = _3527 + _3247;
                            _3235 = _3528 + _3248;
                            if (_3253 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3246 = _3233;
                                _3247 = _3234;
                                _3248 = _3235;
                                _3249 = _3236;
                                _3250 = _3237;
                                _3251 = _3238;
                                _3252 = _3253;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3238;
                        frontier_phi_77_pred_1 = _3237;
                        frontier_phi_77_pred_2 = _3236;
                        frontier_phi_77_pred_3 = _3235;
                        frontier_phi_77_pred_4 = _3234;
                        frontier_phi_77_pred_5 = _3233;
                    }
                    _2875 = frontier_phi_77_pred;
                    _2873 = frontier_phi_77_pred_1;
                    _2871 = frontier_phi_77_pred_2;
                    _2869 = frontier_phi_77_pred_3;
                    _2867 = frontier_phi_77_pred_4;
                    _2865 = frontier_phi_77_pred_5;
                    uint _3031 = _3030 + 1u;
                    if (_3031 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3024 = _2865;
                        _3025 = _2867;
                        _3026 = _2869;
                        _3027 = _2871;
                        _3028 = _2873;
                        _3029 = _2875;
                        _3030 = _3031;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2869;
                frontier_phi_58_59_ladder_1 = _2875;
                frontier_phi_58_59_ladder_2 = _2873;
                frontier_phi_58_59_ladder_3 = _2871;
                frontier_phi_58_59_ladder_4 = _2867;
                frontier_phi_58_59_ladder_5 = _2865;
            }
            else
            {
                frontier_phi_58_59_ladder = _2747;
                frontier_phi_58_59_ladder_1 = _2753;
                frontier_phi_58_59_ladder_2 = _2751;
                frontier_phi_58_59_ladder_3 = _2749;
                frontier_phi_58_59_ladder_4 = _2745;
                frontier_phi_58_59_ladder_5 = _2743;
            }
            _2864 = frontier_phi_58_59_ladder_5;
            _2866 = frontier_phi_58_59_ladder_4;
            _2868 = frontier_phi_58_59_ladder;
            _2870 = frontier_phi_58_59_ladder_3;
            _2872 = frontier_phi_58_59_ladder_2;
            _2874 = frontier_phi_58_59_ladder_1;
        }
        float _2879 = isnan(1.0) ? _917 : (isnan(_917) ? 1.0 : min(_917, 1.0));
        _2655 = (_2879 * _2870) + _2110;
        _2657 = (_2879 * _2872) + _2112;
        _2659 = (_2879 * _2874) + _2114;
        _2661 = ((_2864 * 0.039999999105930328369140625) * _2879) + _2440;
        _2663 = ((_2866 * 0.039999999105930328369140625) * _2879) + _2442;
        _2665 = ((_2868 * 0.039999999105930328369140625) * _2879) + _2444;
    }
    else
    {
        _2655 = _2110;
        _2657 = _2112;
        _2659 = _2114;
        _2661 = _2440;
        _2663 = _2442;
        _2665 = _2444;
    }
    float _4626 = isnan(0.0) ? _902 : (isnan(_902) ? 0.0 : max(_902, 0.0));
    float _4637 = isnan(0.0) ? _903 : (isnan(_903) ? 0.0 : max(_903, 0.0));
    float _4648 = isnan(0.0) ? _904 : (isnan(_904) ? 0.0 : max(_904, 0.0));
    float _2682 = ((isnan(1.0) ? _4626 : (isnan(_4626) ? 1.0 : min(_4626, 1.0))) * (_2655 + ((isnan(0.0) ? _1673 : (isnan(_1673) ? 0.0 : max(_1673, 0.0))) * _917))) + ((_2661 + ((isnan(0.0) ? _1963 : (isnan(_1963) ? 0.0 : max(_1963, 0.0))) * _1752)) * cbPerFrame._m0[3u].x);
    float _2683 = ((isnan(1.0) ? _4637 : (isnan(_4637) ? 1.0 : min(_4637, 1.0))) * (_2657 + ((isnan(0.0) ? _1676 : (isnan(_1676) ? 0.0 : max(_1676, 0.0))) * _917))) + ((_2663 + ((isnan(0.0) ? _1966 : (isnan(_1966) ? 0.0 : max(_1966, 0.0))) * _1752)) * cbPerFrame._m0[3u].x);
    float _2684 = ((isnan(1.0) ? _4648 : (isnan(_4648) ? 1.0 : min(_4648, 1.0))) * (_2659 + ((isnan(0.0) ? _1679 : (isnan(_1679) ? 0.0 : max(_1679, 0.0))) * _917))) + ((_2665 + ((isnan(0.0) ? _1969 : (isnan(_1969) ? 0.0 : max(_1969, 0.0))) * _1752)) * cbPerFrame._m0[3u].x);
    uint _2685 = _244 + 6u;
    float _2693 = _854 / cbSceneParam._m0[86u].x;
    float _2694 = _855 / cbSceneParam._m0[86u].y;
    vec4 _2708 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2693, _2694, (log2((isnan(cbSceneParam._m0[77u].w) ? _776 : (isnan(_776) ? cbSceneParam._m0[77u].w : min(_776, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2710 = _2708.x;
    float _2711 = _2708.y;
    float _2712 = _2708.z;
    float _2713 = _2708.w;
    float _2806;
    float _2808;
    float _2810;
    float _2812;
    if (_776 > cbSceneParam._m0[78u].w)
    {
        float _2768 = isnan(_776) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _776 : min(cbSceneParam._m0[80u].w, _776));
        float _2769 = _2768 / _776;
        float _2780 = _2769 * _827;
        float _2781 = _828 * _2769;
        float _2782 = (-0.0) - _2781;
        float _2784 = _2769 * _829;
        float _2786 = (cbSceneParam._m0[77u].w * _2782) / _2768;
        float _2787 = _2786 + cbSceneParam._m0[79u].w;
        float _2788 = cbSceneParam._m0[79u].w - _2781;
        float _2794 = sqrt(((_2780 * _2780) + (_2781 * _2781)) + (_2784 * _2784));
        float _2797 = (1.0 - (cbSceneParam._m0[77u].w / _2768)) * _2794;
        float _2802 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2804 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2981;
        if (abs((_2782 - _2786) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2981 = ((((_2787 > 0.0) ? exp2(_2802 * _2787) : (2.0 - exp2(_2804 * _2787))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2797;
        }
        else
        {
            float _2925 = 1.0 / cbSceneParam._m0[80u].x;
            float _2926 = isnan(_2788) ? _2787 : (isnan(_2787) ? _2788 : max(_2787, _2788));
            float _2927 = isnan(_2788) ? _2787 : (isnan(_2787) ? _2788 : min(_2787, _2788));
            float _2936 = isnan(0.0) ? _2926 : (isnan(_2926) ? 0.0 : min(_2926, 0.0));
            float _2937 = isnan(0.0) ? _2927 : (isnan(_2927) ? 0.0 : min(_2927, 0.0));
            _2981 = ((abs(_2794 / _2782) * cbSceneParam._m0[80u].y) * ((((_2936 - _2937) * 2.0) - ((exp2(_2802 * (isnan(0.0) ? _2926 : (isnan(_2926) ? 0.0 : max(_2926, 0.0)))) - exp2(_2802 * (isnan(0.0) ? _2927 : (isnan(_2927) ? 0.0 : max(_2927, 0.0))))) * _2925)) - ((exp2(_2804 * _2936) - exp2(_2804 * _2937)) * _2925))) + (_2797 * cbSceneParam._m0[80u].z);
        }
        vec4 _2983 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2693, _2694, 1.0), 0.0);
        float _2992 = exp2((_2981 * (-1.44269502162933349609375)) * (1.0 - _2983.w));
        float _2993 = log2(_2992);
        float _3009 = log2(_2713);
        _2806 = (exp2(_3009 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2993 * cbSceneParam._m0[78u].x)) * _2983.x) / cbSceneParam._m0[78u].x)) + _2710;
        _2808 = (exp2(_3009 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2993 * cbSceneParam._m0[78u].y)) * _2983.y) / cbSceneParam._m0[78u].y)) + _2711;
        _2810 = (exp2(_3009 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2993 * cbSceneParam._m0[78u].z)) * _2983.z) / cbSceneParam._m0[78u].z)) + _2712;
        _2812 = _2992 * _2713;
    }
    else
    {
        _2806 = _2710;
        _2808 = _2711;
        _2810 = _2712;
        _2812 = _2713;
    }
    bool _3019;
    vec4 _2822;
    vec4 _2844;
    float _2846;
    float _2850;
    float _2851;
    float _2852;
    float _2853;
    bool _2863;
    for (;;)
    {
        _2822 = cbMatDynParam._m0[0u];
        float _2824 = roundEven(_2822.y);
        bool _2825 = _2824 == 3.0;
        float _2826 = log2(_2812);
        float _2833 = exp2(_2826 * cbSceneParam._m0[78u].x) * _2682;
        float _2834 = exp2(_2826 * cbSceneParam._m0[78u].y) * _2683;
        float _2835 = exp2(_2826 * cbSceneParam._m0[78u].z) * _2684;
        float _2842 = _843 + (-0.5);
        _2844 = cbMtdParam._m0[1u];
        _2846 = _2844.y * _2842;
        float _2849 = (_2824 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2850 = _2849 * (_2825 ? _2833 : (_2833 + (cbSceneParam._m0[72u].w * _2806)));
        _2851 = _2849 * (_2825 ? _2834 : (_2834 + (cbSceneParam._m0[72u].w * _2808)));
        _2852 = _2849 * (_2825 ? _2835 : (_2835 + (cbSceneParam._m0[72u].w * _2810)));
        _2853 = _2842 * 0.999000012874603271484375;
        _2863 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2863)
        {
            if ((cbInstanceData._m0[_244 + 7u].x + _2853) < 0.5)
            {
                _3019 = true;
                break;
            }
        }
        uint _2960 = _892 + uint(_2822.w);
        if ((cbInstanceData._m0[_2960].w < 1.0) && ((cbInstanceData._m0[_2960].w + _2853) < 0.5))
        {
            _3019 = true;
            break;
        }
        if ((_2846 + 1.0) < _2844.x)
        {
            _3019 = true;
            break;
        }
        _3019 = false;
        break;
    }
    float _3224;
    if (_3019)
    {
        discard_state = true;
        _3224 = 0.0;
    }
    else
    {
        _3224 = cbInstanceData._m0[_2685].w;
    }
    SV_Target.x = _2850;
    SV_Target.y = _2851;
    SV_Target.z = _2852;
    SV_Target.w = _3224;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2685].w;
    discard_exit();
}


