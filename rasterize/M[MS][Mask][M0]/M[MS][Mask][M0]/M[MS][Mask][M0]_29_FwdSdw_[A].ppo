#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_0;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 13) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_22;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_29;
layout(set = 0, binding = 20) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_6;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1431;
float _4073;
float _4074;
float _4075;
float _4076;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _236 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _237 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _238 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _244 = inversesqrt(dot(vec3(_236, _237, _238), vec3(_236, _237, _238)));
    float _245 = _244 * _236;
    float _246 = _244 * _237;
    float _247 = _244 * _238;
    float _251 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _252 = _251 * NORMAL.x;
    float _253 = _251 * NORMAL.y;
    float _254 = _251 * NORMAL.z;
    float _258 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _259 = _258 * TANGENT.x;
    float _260 = _258 * TANGENT.y;
    float _261 = _258 * TANGENT.z;
    float _270 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _272 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _273 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _4085 = isnan(0.0) ? _270 : (isnan(_270) ? 0.0 : max(_270, 0.0));
    float _4096 = isnan(0.0) ? _272 : (isnan(_272) ? 0.0 : max(_272, 0.0));
    float _4107 = isnan(0.0) ? _273 : (isnan(_273) ? 0.0 : max(_273, 0.0));
    uint _283 = uint(roundEven(NORMAL.w)) * 13u;
    uint _288 = _283 + 1u;
    uint _292 = _283 + 2u;
    float _301 = sqrt(((cbInstanceData._m0[_288].x * cbInstanceData._m0[_288].x) + (cbInstanceData._m0[_283].x * cbInstanceData._m0[_283].x)) + (cbInstanceData._m0[_292].x * cbInstanceData._m0[_292].x));
    float _302 = _301 * TEXCOORD.z;
    float _303 = _301 * TEXCOORD.w;
    vec4 _316 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _302) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _303) + cbTextureTilingScale._m0[13u].w));
    vec4 _339 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _365 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _370 = _365.x * cbMtdParam._m0[11u].x;
    float _371 = _365.y * cbMtdParam._m0[11u].y;
    float _372 = _365.z * cbMtdParam._m0[11u].z;
    vec4 _391 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _302) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _303) + cbTextureTilingScale._m0[5u].w));
    vec4 _442 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _444 = _442.x;
    float _456 = dot(vec4(_444, _442.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _473 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w)).x) * 2.0) - ((((_444 - _456) * cbMtdParam._m0[24u].z) + _456) * cbMtdParam._m0[23u].x))) + 1.0;
    float _4118 = isnan(0.0) ? _473 : (isnan(_473) ? 0.0 : max(_473, 0.0));
    float _474 = isnan(1.0) ? _4118 : (isnan(_4118) ? 1.0 : min(_4118, 1.0));
    float _484 = (_339.x * cbMtdParam._m0[9u].x) * ((_474 * ((_391.x * cbMtdParam._m0[12u].x) - _370)) + _370);
    float _485 = (_339.y * cbMtdParam._m0[9u].y) * ((_474 * ((_391.y * cbMtdParam._m0[12u].y) - _371)) + _371);
    float _486 = (_339.z * cbMtdParam._m0[9u].z) * ((_474 * ((_391.z * cbMtdParam._m0[12u].z) - _372)) + _372);
    float _490 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _316.x) * _484;
    float _493 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _316.y) * _485;
    float _496 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _316.z) * _486;
    float _504 = (((_484 - _490) * (isnan(1.0) ? _4085 : (isnan(_4085) ? 1.0 : min(_4085, 1.0)))) + _490) * 4.55000019073486328125;
    float _506 = (((_485 - _493) * (isnan(1.0) ? _4096 : (isnan(_4096) ? 1.0 : min(_4096, 1.0)))) + _493) * 4.55000019073486328125;
    float _508 = (((_486 - _496) * (isnan(1.0) ? _4107 : (isnan(_4107) ? 1.0 : min(_4107, 1.0)))) + _496) * 4.55000019073486328125;
    vec4 _526 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _302) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _303) + cbTextureTilingScale._m0[20u].w));
    vec4 _553 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _302) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _303) + cbTextureTilingScale._m0[4u].w));
    vec4 _570 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _572 = _570.x;
    float _573 = _570.y;
    float _574 = _570.z;
    float _583 = ((_553.z - _574) * _474) + _574;
    float _586 = ((((_553.x - _572) * _474) + _572) * 2.0) + (-1.0);
    float _587 = ((((_553.y - _573) * _474) + _573) * 2.0) + (-1.0);
    float _588 = dot(vec2(_586, _587), vec2(_586, _587));
    float _4129 = isnan(0.0) ? _588 : (isnan(_588) ? 0.0 : max(_588, 0.0));
    float _593 = sqrt(1.0 - (isnan(1.0) ? _4129 : (isnan(_4129) ? 1.0 : min(_4129, 1.0))));
    vec4 _613 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _625 = (_586 + ((((_526.x * 2.0) + (-1.0)) * TEXCOORD_11.x) * cbMtdParam._m0[20u].x)) + (((_613.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _626 = (_587 + ((((_526.y * 2.0) + (-1.0)) * TEXCOORD_11.y) * cbMtdParam._m0[20u].x)) + (((_613.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _629 = fma(_593, _252, fma(_626, _259, _625 * _245));
    float _632 = fma(_593, _253, fma(_626, _260, _625 * _246));
    float _635 = fma(_593, _254, fma(_626, _261, _625 * _247));
    float _639 = inversesqrt(dot(vec3(_629, _632, _635), vec3(_629, _632, _635)));
    vec4 _666 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _302) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _303) + cbTextureTilingScale._m0[11u].w));
    float _668 = _666.x;
    float _669 = 1.0 - _668;
    float _675 = (cbMtdParam._m0[19u].x + dot(vec4(_639 * _629, _639 * _632, _639 * _635, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_668 - _669) * cbMtdParam._m0[24u].w) + _669) * cbMtdParam._m0[21u].z);
    float _4140 = isnan(0.0) ? _675 : (isnan(_675) ? 0.0 : max(_675, 0.0));
    float _676 = isnan(1.0) ? _4140 : (isnan(_4140) ? 1.0 : min(_4140, 1.0));
    float _678 = (-0.0) - cbMtdParam._m0[24u].x;
    float _680 = isnan(0.0) ? _678 : (isnan(_678) ? 0.0 : max(_678, 0.0));
    float _681 = isnan(1.0) ? _680 : (isnan(_680) ? 1.0 : min(_680, 1.0));
    float _688 = _676 - ((_676 * TEXCOORD_8.x) * _681);
    float _689 = _676 - ((_676 * TEXCOORD_8.y) * _681);
    float _690 = _676 - ((_676 * TEXCOORD_8.z) * _681);
    float _697 = (_688 * (cbMtdParam._m0[17u].x - _504)) + _504;
    float _698 = (_689 * (cbMtdParam._m0[17u].y - _506)) + _506;
    float _699 = (_690 * (cbMtdParam._m0[17u].z - _508)) + _508;
    vec4 _711 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _302) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _303) + cbTextureTilingScale._m0[19u].w));
    float _713 = _711.x;
    float _714 = 1.0 - _713;
    float _740 = (TEXCOORD_8.x - ((cbMtdParam._m0[22u].w * (1.0 - TEXCOORD_8.x)) * ((((_713 - _714) * cbMtdParam._m0[24u].y) + _714) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _4161 = isnan(0.0) ? _740 : (isnan(_740) ? 0.0 : max(_740, 0.0));
    float _741 = isnan(1.0) ? _4161 : (isnan(_4161) ? 1.0 : min(_4161, 1.0));
    float _749 = ((((cbMtdParam._m0[10u].x - _697) * TEXCOORD_8.x) * cbMtdParam._m0[23u].w) * _741) + _697;
    float _750 = ((((cbMtdParam._m0[10u].y - _698) * TEXCOORD_8.y) * cbMtdParam._m0[23u].w) * _741) + _698;
    float _751 = (((cbMtdParam._m0[23u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _699)) * _741) + _699;
    float _756 = (((_526.z - _583) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _583;
    float _760 = ((_613.z - _756) * cbMtdParam._m0[19u].w) + _756;
    vec4 _774 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _302) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _303) + cbTextureTilingScale._m0[15u].w));
    float _781 = (_774.x * 2.0) + (-1.0);
    float _782 = (_774.y * 2.0) + (-1.0);
    float _783 = dot(vec2(_781, _782), vec2(_781, _782));
    float _4172 = isnan(0.0) ? _783 : (isnan(_783) ? 0.0 : max(_783, 0.0));
    float _791 = ((_774.z - _760) * _688) + _760;
    float _794 = ((cbMtdParam._m0[23u].y - _791) * _741) + _791;
    vec4 _813 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _302) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _303) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _819 = (_813.x * 2.0) + (-1.0);
    float _820 = (_813.y * 2.0) + (-1.0);
    float _821 = dot(vec2(_819, _820), vec2(_819, _820));
    float _4183 = isnan(0.0) ? _821 : (isnan(_821) ? 0.0 : max(_821, 0.0));
    float _836 = ((sqrt(1.0 - (isnan(1.0) ? _4172 : (isnan(_4172) ? 1.0 : min(_4172, 1.0)))) - _593) * _690) + _593;
    float _839 = (((_781 - _625) * _688) + _625) + (cbMtdParam._m0[21u].x * _625);
    float _840 = (((_782 - _626) * _689) + _626) + (cbMtdParam._m0[21u].x * _626);
    float _851 = (((_819 - _839) + (_839 * cbMtdParam._m0[22u].z)) * _741) + _839;
    float _852 = (((_820 - _840) + (_840 * cbMtdParam._m0[22u].z)) * _741) + _840;
    float _853 = (_741 * (sqrt(1.0 - (isnan(1.0) ? _4183 : (isnan(_4183) ? 1.0 : min(_4183, 1.0)))) - _836)) + _836;
    float _857 = cbMtdParam._m0[22u].x + _613.w;
    float _860 = fma(_853, _252, fma(_852, _259, _851 * _245));
    float _863 = fma(_853, _253, fma(_852, _260, _851 * _246));
    float _866 = fma(_853, _254, fma(_852, _261, _851 * _247));
    float _870 = inversesqrt(dot(vec3(_860, _863, _866), vec3(_860, _863, _866)));
    float _871 = _870 * _860;
    float _872 = _870 * _863;
    float _873 = _870 * _866;
    float _4194 = isnan(0.0) ? _794 : (isnan(_794) ? 0.0 : max(_794, 0.0));
    float _874 = isnan(1.0) ? _4194 : (isnan(_4194) ? 1.0 : min(_4194, 1.0));
    float _4205 = isnan(0.0) ? _857 : (isnan(_857) ? 0.0 : max(_857, 0.0));
    float _4216 = isnan(0.0) ? _749 : (isnan(_749) ? 0.0 : max(_749, 0.0));
    float _4227 = isnan(0.0) ? _750 : (isnan(_750) ? 0.0 : max(_750, 0.0));
    float _4238 = isnan(0.0) ? _751 : (isnan(_751) ? 0.0 : max(_751, 0.0));
    float _892 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _932 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _942 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _932);
    float _943 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _932);
    float _944 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _932);
    float _948 = inversesqrt(dot(vec3(_942, _943, _944), vec3(_942, _943, _944)));
    float _949 = _942 * _948;
    float _950 = _943 * _948;
    float _951 = _944 * _948;
    vec4 _956 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _958 = _956.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1112 = sqrt(((_942 * _942) + (_943 * _943)) + (_944 * _944));
        float _1118 = (cbMatDynParam._m0[5u].x * _1112) + cbMatDynParam._m0[5u].y;
        float _4249 = isnan(0.0) ? _1118 : (isnan(_1118) ? 0.0 : max(_1118, 0.0));
        float _1119 = isnan(1.0) ? _4249 : (isnan(_4249) ? 1.0 : min(_4249, 1.0));
        float _1123 = (cbMatDynParam._m0[5u].z * _1112) + cbMatDynParam._m0[5u].w;
        float _4260 = isnan(0.0) ? _1123 : (isnan(_1123) ? 0.0 : max(_1123, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4260 : (isnan(_4260) ? 1.0 : min(_4260, 1.0))) - _1119)) + _1119) < ((_958 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _969 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _970 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _988 = fma(_873, cbSceneParam._m0[5u].z, fma(_872, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _871));
    float _991 = fma(_873, cbSceneParam._m0[6u].z, fma(_872, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _871));
    float _994 = fma(_873, cbSceneParam._m0[7u].z, fma(_872, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _871));
    uint _1007 = _283 + 9u;
    uint _1008 = _1007 + uint(cbMatDynParam._m0[0u].w);
    float _1014 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4216 : (isnan(_4216) ? 1.0 : min(_4216, 1.0)))) * cbInstanceData._m0[_1008].x;
    float _1015 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4227 : (isnan(_4227) ? 1.0 : min(_4227, 1.0)))) * cbInstanceData._m0[_1008].y;
    float _1016 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4238 : (isnan(_4238) ? 1.0 : min(_4238, 1.0)))) * cbInstanceData._m0[_1008].z;
    float _4271 = isnan(0.0) ? _1014 : (isnan(_1014) ? 0.0 : max(_1014, 0.0));
    float _1017 = isnan(1.0) ? _4271 : (isnan(_4271) ? 1.0 : min(_4271, 1.0));
    float _4282 = isnan(0.0) ? _1015 : (isnan(_1015) ? 0.0 : max(_1015, 0.0));
    float _1018 = isnan(1.0) ? _4282 : (isnan(_4282) ? 1.0 : min(_4282, 1.0));
    float _4293 = isnan(0.0) ? _1016 : (isnan(_1016) ? 0.0 : max(_1016, 0.0));
    float _1019 = isnan(1.0) ? _4293 : (isnan(_4293) ? 1.0 : min(_4293, 1.0));
    vec4 _1028 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _969, cbSceneParam._m0[86u].y * _970));
    float _1032 = ((isnan(1.0) ? _4205 : (isnan(_4205) ? 1.0 : min(_4205, 1.0))) * TEXCOORD_5.w) * _1028.x;
    float _1033 = dot(vec3(_871, _872, _873), vec3(_949, _950, _951));
    float _1036 = _1033 * 2.0;
    float _1040 = (_1036 * _871) - _949;
    float _1041 = (_1036 * _872) - _950;
    float _1042 = (_1036 * _873) - _951;
    float _1046 = abs(dot(vec3(_949, _950, _951), vec3(_871, _872, _873)));
    float _4304 = isnan(0.0) ? _1046 : (isnan(_1046) ? 0.0 : max(_1046, 0.0));
    float _1048 = sqrt(_874);
    float _1061 = exp2((_1048 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4304 : (isnan(_4304) ? 1.0 : min(_4304, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1048 * 3.0));
    float _1093 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1097 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1101 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1430;
    float _1432;
    float _1433;
    float _1434;
    float _1435;
    float _1436;
    float _1437;
    float _1438;
    float _1439;
    float _1440;
    float _1441;
    float _1442;
    float _1443;
    float _1444;
    float _1445;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1155 = fma(_1101, cbModelParam._m0[26u].z, fma(_1097, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1093));
        float _1159 = fma(_1101, cbModelParam._m0[27u].z, fma(_1097, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1093));
        float _1163 = fma(_1101, cbModelParam._m0[28u].z, fma(_1097, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1093));
        float _1188 = _1093 + _871;
        float _1189 = _1097 + _872;
        float _1190 = _1101 + _873;
        float _1200 = fma(_1190, cbModelParam._m0[26u].z, fma(_1189, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1188)) - _1155;
        float _1201 = fma(_1190, cbModelParam._m0[27u].z, fma(_1189, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1188)) - _1159;
        float _1202 = fma(_1190, cbModelParam._m0[28u].z, fma(_1189, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1188)) - _1163;
        float _1206 = inversesqrt(dot(vec3(_1200, _1201, _1202), vec3(_1200, _1201, _1202)));
        float _1219 = ((_1206 * _1200) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1155 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1220 = ((_1206 * _1201) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1159 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1221 = ((_1206 * _1202) / cbModelParam._m0[34u].z) + ((((((_1163 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1224 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1219, _1220, _1221), 0.0);
        vec4 _1231 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1219, _1220, _1221), 0.0);
        vec4 _1238 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1219, _1220, _1221), 0.0);
        vec4 _1245 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1219, _1220, _1221), 0.0);
        float _1258 = exp2((_1224.w + (-0.5)) * 20.0) * 2.0;
        float _1259 = _1258 * (_1224.x + (-0.5));
        float _1260 = _1258 * (_1224.y + (-0.5));
        float _1261 = _1258 * (_1224.z + (-0.5));
        float _1268 = exp2((_1231.w + (-0.5)) * 20.0) * 2.0;
        float _1269 = _1268 * (_1231.x + (-0.5));
        float _1270 = _1268 * (_1231.y + (-0.5));
        float _1271 = _1268 * (_1231.z + (-0.5));
        float _1278 = exp2((_1238.w + (-0.5)) * 20.0) * 2.0;
        float _1279 = _1278 * (_1238.x + (-0.5));
        float _1280 = _1278 * (_1238.y + (-0.5));
        float _1281 = _1278 * (_1238.z + (-0.5));
        float _1288 = exp2((_1245.w + (-0.5)) * 20.0) * 2.0;
        float _1289 = _1288 * (_1245.x + (-0.5));
        float _1290 = _1288 * (_1245.y + (-0.5));
        float _1291 = _1288 * (_1245.z + (-0.5));
        float _1292 = isnan(0.0) ? _1289 : (isnan(_1289) ? 0.0 : max(_1289, 0.0));
        float _1293 = isnan(0.0) ? _1290 : (isnan(_1290) ? 0.0 : max(_1290, 0.0));
        float _1294 = isnan(0.0) ? _1291 : (isnan(_1291) ? 0.0 : max(_1291, 0.0));
        float _1295 = _1259 * 0.5;
        float _1296 = _1269 * 0.5;
        float _1297 = _1279 * 0.5;
        float _1298 = dot(vec3(_1295, _1296, _1297), vec3(_1295, _1296, _1297));
        float _1303 = (_1298 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1298);
        float _1312 = (dot(vec3(_871, _872, _873), vec3(_1303 * _1295, _1303 * _1296, _1303 * _1297)) + 1.0) * 0.5;
        float _4330 = isnan(0.0) ? _1312 : (isnan(_1312) ? 0.0 : max(_1312, 0.0));
        float _1322 = sqrt(((_1296 * _1296) + (_1295 * _1295)) + (_1297 * _1297)) / (_1292 + 9.9999997473787516355514526367188e-06);
        float _4341 = isnan(0.0) ? _1322 : (isnan(_1322) ? 0.0 : max(_1322, 0.0));
        float _1323 = isnan(1.0) ? _4341 : (isnan(_4341) ? 1.0 : min(_4341, 1.0));
        float _1324 = _1323 * 2.0;
        float _1328 = (1.0 - _1323) / (_1323 + 1.0);
        float _4352 = isnan(0.0) ? _1328 : (isnan(_1328) ? 0.0 : max(_1328, 0.0));
        float _1329 = isnan(1.0) ? _4352 : (isnan(_4352) ? 1.0 : min(_4352, 1.0));
        float _1338 = ((((1.0 - _1329) * (_1324 + 2.0)) * exp2(log2(isnan(1.0) ? _4330 : (isnan(_4330) ? 1.0 : min(_4330, 1.0))) * (_1324 + 1.0))) + _1329) * _1292;
        float _1339 = _1260 * 0.5;
        float _1340 = _1270 * 0.5;
        float _1341 = _1280 * 0.5;
        float _1342 = dot(vec3(_1339, _1340, _1341), vec3(_1339, _1340, _1341));
        float _1347 = (_1342 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1342);
        float _1355 = (dot(vec3(_871, _872, _873), vec3(_1347 * _1339, _1347 * _1340, _1347 * _1341)) + 1.0) * 0.5;
        float _4363 = isnan(0.0) ? _1355 : (isnan(_1355) ? 0.0 : max(_1355, 0.0));
        float _1364 = sqrt(((_1340 * _1340) + (_1339 * _1339)) + (_1341 * _1341)) / (_1293 + 9.9999997473787516355514526367188e-06);
        float _4374 = isnan(0.0) ? _1364 : (isnan(_1364) ? 0.0 : max(_1364, 0.0));
        float _1365 = isnan(1.0) ? _4374 : (isnan(_4374) ? 1.0 : min(_4374, 1.0));
        float _1366 = _1365 * 2.0;
        float _1370 = (1.0 - _1365) / (_1365 + 1.0);
        float _4385 = isnan(0.0) ? _1370 : (isnan(_1370) ? 0.0 : max(_1370, 0.0));
        float _1371 = isnan(1.0) ? _4385 : (isnan(_4385) ? 1.0 : min(_4385, 1.0));
        float _1380 = ((((1.0 - _1371) * (_1366 + 2.0)) * exp2(log2(isnan(1.0) ? _4363 : (isnan(_4363) ? 1.0 : min(_4363, 1.0))) * (_1366 + 1.0))) + _1371) * _1293;
        float _1381 = _1261 * 0.5;
        float _1382 = _1271 * 0.5;
        float _1383 = _1281 * 0.5;
        float _1384 = dot(vec3(_1381, _1382, _1383), vec3(_1381, _1382, _1383));
        float _1389 = (_1384 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1384);
        float _1397 = (dot(vec3(_871, _872, _873), vec3(_1389 * _1381, _1389 * _1382, _1389 * _1383)) + 1.0) * 0.5;
        float _4396 = isnan(0.0) ? _1397 : (isnan(_1397) ? 0.0 : max(_1397, 0.0));
        float _1406 = sqrt(((_1382 * _1382) + (_1381 * _1381)) + (_1383 * _1383)) / (_1294 + 9.9999997473787516355514526367188e-06);
        float _4407 = isnan(0.0) ? _1406 : (isnan(_1406) ? 0.0 : max(_1406, 0.0));
        float _1407 = isnan(1.0) ? _4407 : (isnan(_4407) ? 1.0 : min(_4407, 1.0));
        float _1408 = _1407 * 2.0;
        float _1412 = (1.0 - _1407) / (_1407 + 1.0);
        float _4418 = isnan(0.0) ? _1412 : (isnan(_1412) ? 0.0 : max(_1412, 0.0));
        float _1413 = isnan(1.0) ? _4418 : (isnan(_4418) ? 1.0 : min(_4418, 1.0));
        float _1422 = ((((1.0 - _1413) * (_1408 + 2.0)) * exp2(log2(isnan(1.0) ? _4396 : (isnan(_4396) ? 1.0 : min(_4396, 1.0))) * (_1408 + 1.0))) + _1413) * _1294;
        _1430 = _1261;
        _1432 = _1260;
        _1433 = _1259;
        _1434 = _1271;
        _1435 = _1270;
        _1436 = _1269;
        _1437 = _1281;
        _1438 = _1280;
        _1439 = _1279;
        _1440 = _1294;
        _1441 = _1293;
        _1442 = _1292;
        _1443 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1338 : (isnan(_1338) ? 0.0 : max(_1338, 0.0)));
        _1444 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1380 : (isnan(_1380) ? 0.0 : max(_1380, 0.0)));
        _1445 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1422 : (isnan(_1422) ? 0.0 : max(_1422, 0.0)));
    }
    else
    {
        _1430 = _1431;
        _1432 = _1431;
        _1433 = _1431;
        _1434 = _1431;
        _1435 = _1431;
        _1436 = _1431;
        _1437 = _1431;
        _1438 = _1431;
        _1439 = _1431;
        _1440 = _1431;
        _1441 = _1431;
        _1442 = _1431;
        _1443 = 0.0;
        _1444 = 0.0;
        _1445 = 0.0;
    }
    float _1742;
    float _1743;
    float _1744;
    float _1745;
    float _1746;
    float _1747;
    float _1748;
    float _1749;
    float _1750;
    float _1751;
    float _1752;
    float _1753;
    float _1754;
    float _1755;
    float _1756;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1473 = fma(_1101, cbModelParam._m0[30u].z, fma(_1097, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1093));
        float _1477 = fma(_1101, cbModelParam._m0[31u].z, fma(_1097, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1093));
        float _1481 = fma(_1101, cbModelParam._m0[32u].z, fma(_1097, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1093));
        float _1504 = _1093 + _871;
        float _1505 = _1097 + _872;
        float _1506 = _1101 + _873;
        float _1516 = fma(_1506, cbModelParam._m0[30u].z, fma(_1505, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1504)) - _1473;
        float _1517 = fma(_1506, cbModelParam._m0[31u].z, fma(_1505, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1504)) - _1477;
        float _1518 = fma(_1506, cbModelParam._m0[32u].z, fma(_1505, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1504)) - _1481;
        float _1522 = inversesqrt(dot(vec3(_1516, _1517, _1518), vec3(_1516, _1517, _1518)));
        float _1535 = ((_1522 * _1516) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1473 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1536 = ((_1522 * _1517) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1477 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1537 = ((_1522 * _1518) / cbModelParam._m0[35u].z) + ((((((_1481 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1539 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1535, _1536, _1537), 0.0);
        vec4 _1546 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1535, _1536, _1537), 0.0);
        vec4 _1553 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1535, _1536, _1537), 0.0);
        vec4 _1560 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1535, _1536, _1537), 0.0);
        float _1572 = exp2((_1539.w + (-0.5)) * 20.0) * 2.0;
        float _1573 = _1572 * (_1539.x + (-0.5));
        float _1574 = _1572 * (_1539.y + (-0.5));
        float _1575 = _1572 * (_1539.z + (-0.5));
        float _1582 = exp2((_1546.w + (-0.5)) * 20.0) * 2.0;
        float _1583 = _1582 * (_1546.x + (-0.5));
        float _1584 = _1582 * (_1546.y + (-0.5));
        float _1585 = _1582 * (_1546.z + (-0.5));
        float _1592 = exp2((_1553.w + (-0.5)) * 20.0) * 2.0;
        float _1593 = _1592 * (_1553.x + (-0.5));
        float _1594 = _1592 * (_1553.y + (-0.5));
        float _1595 = _1592 * (_1553.z + (-0.5));
        float _1602 = exp2((_1560.w + (-0.5)) * 20.0) * 2.0;
        float _1603 = _1602 * (_1560.x + (-0.5));
        float _1604 = _1602 * (_1560.y + (-0.5));
        float _1605 = _1602 * (_1560.z + (-0.5));
        float _1606 = isnan(0.0) ? _1603 : (isnan(_1603) ? 0.0 : max(_1603, 0.0));
        float _1607 = isnan(0.0) ? _1604 : (isnan(_1604) ? 0.0 : max(_1604, 0.0));
        float _1608 = isnan(0.0) ? _1605 : (isnan(_1605) ? 0.0 : max(_1605, 0.0));
        float _1609 = _1573 * 0.5;
        float _1610 = _1583 * 0.5;
        float _1611 = _1593 * 0.5;
        float _1612 = dot(vec3(_1609, _1610, _1611), vec3(_1609, _1610, _1611));
        float _1617 = (_1612 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1612);
        float _1625 = (dot(vec3(_871, _872, _873), vec3(_1617 * _1609, _1617 * _1610, _1617 * _1611)) + 1.0) * 0.5;
        float _4459 = isnan(0.0) ? _1625 : (isnan(_1625) ? 0.0 : max(_1625, 0.0));
        float _1634 = sqrt(((_1610 * _1610) + (_1609 * _1609)) + (_1611 * _1611)) / (_1606 + 9.9999997473787516355514526367188e-06);
        float _4470 = isnan(0.0) ? _1634 : (isnan(_1634) ? 0.0 : max(_1634, 0.0));
        float _1635 = isnan(1.0) ? _4470 : (isnan(_4470) ? 1.0 : min(_4470, 1.0));
        float _1636 = _1635 * 2.0;
        float _1640 = (1.0 - _1635) / (_1635 + 1.0);
        float _4481 = isnan(0.0) ? _1640 : (isnan(_1640) ? 0.0 : max(_1640, 0.0));
        float _1641 = isnan(1.0) ? _4481 : (isnan(_4481) ? 1.0 : min(_4481, 1.0));
        float _1650 = ((((1.0 - _1641) * (_1636 + 2.0)) * exp2(log2(isnan(1.0) ? _4459 : (isnan(_4459) ? 1.0 : min(_4459, 1.0))) * (_1636 + 1.0))) + _1641) * _1606;
        float _1651 = _1574 * 0.5;
        float _1652 = _1584 * 0.5;
        float _1653 = _1594 * 0.5;
        float _1654 = dot(vec3(_1651, _1652, _1653), vec3(_1651, _1652, _1653));
        float _1659 = (_1654 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1654);
        float _1667 = (dot(vec3(_871, _872, _873), vec3(_1659 * _1651, _1659 * _1652, _1659 * _1653)) + 1.0) * 0.5;
        float _4492 = isnan(0.0) ? _1667 : (isnan(_1667) ? 0.0 : max(_1667, 0.0));
        float _1676 = sqrt(((_1652 * _1652) + (_1651 * _1651)) + (_1653 * _1653)) / (_1607 + 9.9999997473787516355514526367188e-06);
        float _4503 = isnan(0.0) ? _1676 : (isnan(_1676) ? 0.0 : max(_1676, 0.0));
        float _1677 = isnan(1.0) ? _4503 : (isnan(_4503) ? 1.0 : min(_4503, 1.0));
        float _1678 = _1677 * 2.0;
        float _1682 = (1.0 - _1677) / (_1677 + 1.0);
        float _4514 = isnan(0.0) ? _1682 : (isnan(_1682) ? 0.0 : max(_1682, 0.0));
        float _1683 = isnan(1.0) ? _4514 : (isnan(_4514) ? 1.0 : min(_4514, 1.0));
        float _1692 = ((((1.0 - _1683) * (_1678 + 2.0)) * exp2(log2(isnan(1.0) ? _4492 : (isnan(_4492) ? 1.0 : min(_4492, 1.0))) * (_1678 + 1.0))) + _1683) * _1607;
        float _1693 = _1575 * 0.5;
        float _1694 = _1585 * 0.5;
        float _1695 = _1595 * 0.5;
        float _1696 = dot(vec3(_1693, _1694, _1695), vec3(_1693, _1694, _1695));
        float _1701 = (_1696 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1696);
        float _1709 = (dot(vec3(_871, _872, _873), vec3(_1701 * _1693, _1701 * _1694, _1701 * _1695)) + 1.0) * 0.5;
        float _4525 = isnan(0.0) ? _1709 : (isnan(_1709) ? 0.0 : max(_1709, 0.0));
        float _1718 = sqrt(((_1694 * _1694) + (_1693 * _1693)) + (_1695 * _1695)) / (_1608 + 9.9999997473787516355514526367188e-06);
        float _4536 = isnan(0.0) ? _1718 : (isnan(_1718) ? 0.0 : max(_1718, 0.0));
        float _1719 = isnan(1.0) ? _4536 : (isnan(_4536) ? 1.0 : min(_4536, 1.0));
        float _1720 = _1719 * 2.0;
        float _1724 = (1.0 - _1719) / (_1719 + 1.0);
        float _4547 = isnan(0.0) ? _1724 : (isnan(_1724) ? 0.0 : max(_1724, 0.0));
        float _1725 = isnan(1.0) ? _4547 : (isnan(_4547) ? 1.0 : min(_4547, 1.0));
        float _1734 = ((((1.0 - _1725) * (_1720 + 2.0)) * exp2(log2(isnan(1.0) ? _4525 : (isnan(_4525) ? 1.0 : min(_4525, 1.0))) * (_1720 + 1.0))) + _1725) * _1608;
        _1742 = _1575;
        _1743 = _1574;
        _1744 = _1573;
        _1745 = _1585;
        _1746 = _1584;
        _1747 = _1583;
        _1748 = _1595;
        _1749 = _1594;
        _1750 = _1593;
        _1751 = _1608;
        _1752 = _1607;
        _1753 = _1606;
        _1754 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1650 : (isnan(_1650) ? 0.0 : max(_1650, 0.0)));
        _1755 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1692 : (isnan(_1692) ? 0.0 : max(_1692, 0.0)));
        _1756 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1734 : (isnan(_1734) ? 0.0 : max(_1734, 0.0)));
    }
    else
    {
        _1742 = _1431;
        _1743 = _1431;
        _1744 = _1431;
        _1745 = _1431;
        _1746 = _1431;
        _1747 = _1431;
        _1748 = _1431;
        _1749 = _1431;
        _1750 = _1431;
        _1751 = _1431;
        _1752 = _1431;
        _1753 = _1431;
        _1754 = 0.0;
        _1755 = 0.0;
        _1756 = 0.0;
    }
    float _1766 = (cbModelParam._m0[1u].x * (_1754 - _1443)) + _1443;
    float _1767 = (cbModelParam._m0[1u].x * (_1755 - _1444)) + _1444;
    float _1768 = (cbModelParam._m0[1u].x * (_1756 - _1445)) + _1445;
    float _1789 = fma(_1768, cbSceneParam._m0[89u].z, fma(_1767, cbSceneParam._m0[89u].y, _1766 * cbSceneParam._m0[89u].x));
    float _1792 = fma(_1768, cbSceneParam._m0[90u].z, fma(_1767, cbSceneParam._m0[90u].y, _1766 * cbSceneParam._m0[90u].x));
    float _1795 = fma(_1768, cbSceneParam._m0[91u].z, fma(_1767, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1766));
    float _1810 = _1040 * 0.5;
    float _1811 = _1041 * 0.5;
    float _1812 = _1042 * 0.5;
    float _1813 = dot(vec4(_1810, _1811, _1812, 1.0), vec4(_1744, _1747, _1750, _1753));
    float _1816 = dot(vec4(_1810, _1811, _1812, 1.0), vec4(_1743, _1746, _1749, _1752));
    float _1819 = dot(vec4(_1810, _1811, _1812, 1.0), vec4(_1742, _1745, _1748, _1751));
    float _1853;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1826 = dot(vec4(_1810, _1811, _1812, 1.0), vec4(_1430, _1434, _1437, _1440));
        float _1830 = dot(vec4(_1810, _1811, _1812, 1.0), vec4(_1432, _1435, _1438, _1441));
        float _1834 = dot(vec4(_1810, _1811, _1812, 1.0), vec4(_1433, _1436, _1439, _1442));
        float _1841 = dot(vec4(cbModelParam._m0[39u]), vec4(_1810, _1811, _1812, 1.0));
        _1853 = dot(vec3(isnan(0.0) ? _1834 : (isnan(_1834) ? 0.0 : max(_1834, 0.0)), isnan(0.0) ? _1830 : (isnan(_1830) ? 0.0 : max(_1830, 0.0)), isnan(0.0) ? _1826 : (isnan(_1826) ? 0.0 : max(_1826, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1841) ? 0.0 : (isnan(0.0) ? _1841 : max(0.0, _1841))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1853 = 1.0;
    }
    float _1864;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1855 = dot(vec4(cbModelParam._m0[40u]), vec4(_1810, _1811, _1812, 1.0));
        _1864 = dot(vec3(isnan(0.0) ? _1813 : (isnan(_1813) ? 0.0 : max(_1813, 0.0)), isnan(0.0) ? _1816 : (isnan(_1816) ? 0.0 : max(_1816, 0.0)), isnan(0.0) ? _1819 : (isnan(_1819) ? 0.0 : max(_1819, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1855) ? 0.0 : (isnan(0.0) ? _1855 : max(0.0, _1855))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1864 = 1.0;
    }
    float _1868 = (_1864 * cbModelParam._m0[1u].x) + (_1853 * (1.0 - cbModelParam._m0[1u].x));
    float _1878 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _874);
    float _1879 = isnan(_1878) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1878 : min(cbModelParam._m0[25u].z, _1878));
    float _1960;
    float _1962;
    float _1964;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1927 = fma(_1101, cbModelParam._m0[13u].z, fma(_1097, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1093)) + cbModelParam._m0[13u].w;
        float _1931 = fma(_1101, cbModelParam._m0[14u].z, fma(_1097, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1093)) + cbModelParam._m0[14u].w;
        float _1935 = fma(_1101, cbModelParam._m0[15u].z, fma(_1097, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1093)) + cbModelParam._m0[15u].w;
        float _1938 = fma(_1042, cbModelParam._m0[13u].z, fma(_1041, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1040));
        float _1941 = fma(_1042, cbModelParam._m0[14u].z, fma(_1041, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1040));
        float _1944 = fma(_1042, cbModelParam._m0[15u].z, fma(_1041, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1040));
        float _1972;
        if (_1938 > 0.0)
        {
            _1972 = abs((1.0 - _1927) / _1938);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1938 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1927 + 1.0) / _1938);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1972 = frontier_phi_17_15_ladder;
        }
        float _2142;
        if (_1941 > 0.0)
        {
            _2142 = abs((1.0 - _1931) / _1941);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1941 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1931 + 1.0) / _1941);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2142 = frontier_phi_26_22_ladder;
        }
        float _2437;
        if (_1944 > 0.0)
        {
            _2437 = abs((1.0 - _1935) / _1944);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1944 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1935 + 1.0) / _1944);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2437 = frontier_phi_38_33_ladder;
        }
        float _2439 = isnan(_2142) ? _1972 : (isnan(_1972) ? _2142 : min(_1972, _2142));
        float _2440 = isnan(_2437) ? _2439 : (isnan(_2439) ? _2437 : min(_2439, _2437));
        float _2444 = (_2440 * _1938) + _1927;
        float _2445 = (_2440 * _1941) + _1931;
        float _2446 = (_2440 * _1944) + _1935;
        float _2447 = _2440 * 9.9999997473787516355514526367188e-05;
        float _2449 = (-1.0) - _2447;
        float _2451 = _2447 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2446 > _2451) || ((_2446 < _2449) || ((_2445 > _2451) || ((_2445 < _2449) || ((_2444 < _2449) || (_2444 > _2451))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2591 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2446, cbModelParam._m0[9u].z, fma(_2445, cbModelParam._m0[9u].y, _2444 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2446, cbModelParam._m0[10u].z, fma(_2445, cbModelParam._m0[10u].y, _2444 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2446, cbModelParam._m0[11u].z, fma(_2445, cbModelParam._m0[11u].y, _2444 * cbModelParam._m0[11u].x))), _1879);
            frontier_phi_16_38_ladder = _2591.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2591.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2591.x * cbModelParam._m0[1u].y;
        }
        _1960 = frontier_phi_16_38_ladder_2;
        _1962 = frontier_phi_16_38_ladder_1;
        _1964 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1948 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1040, _1041, _1042), _1879);
        _1960 = _1948.x * cbModelParam._m0[1u].y;
        _1962 = _1948.y * cbModelParam._m0[1u].y;
        _1964 = _1948.z * cbModelParam._m0[1u].y;
    }
    float _1968 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _874);
    float _1969 = isnan(_1968) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1968 : min(cbModelParam._m0[25u].w, _1968));
    float _2059;
    float _2061;
    float _2063;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2023 = fma(_1101, cbModelParam._m0[21u].z, fma(_1097, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1093)) + cbModelParam._m0[21u].w;
        float _2027 = fma(_1101, cbModelParam._m0[22u].z, fma(_1097, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1093)) + cbModelParam._m0[22u].w;
        float _2031 = fma(_1101, cbModelParam._m0[23u].z, fma(_1097, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1093)) + cbModelParam._m0[23u].w;
        float _2034 = fma(_1042, cbModelParam._m0[21u].z, fma(_1041, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1040));
        float _2037 = fma(_1042, cbModelParam._m0[22u].z, fma(_1041, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1040));
        float _2040 = fma(_1042, cbModelParam._m0[23u].z, fma(_1041, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1040));
        float _2147;
        if (_2034 > 0.0)
        {
            _2147 = abs((1.0 - _2023) / _2034);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_2034 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_2023 + 1.0) / _2034);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2147 = frontier_phi_28_24_ladder;
        }
        float _2464;
        if (_2037 > 0.0)
        {
            _2464 = abs((1.0 - _2027) / _2037);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_2037 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_2027 + 1.0) / _2037);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2464 = frontier_phi_40_35_ladder;
        }
        float _2791;
        if (_2040 > 0.0)
        {
            _2791 = abs((1.0 - _2031) / _2040);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_2040 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_2031 + 1.0) / _2040);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _2791 = frontier_phi_50_47_ladder;
        }
        float _2793 = isnan(_2464) ? _2147 : (isnan(_2147) ? _2464 : min(_2147, _2464));
        float _2794 = isnan(_2791) ? _2793 : (isnan(_2793) ? _2791 : min(_2793, _2791));
        float _2798 = (_2794 * _2034) + _2023;
        float _2799 = (_2794 * _2037) + _2027;
        float _2800 = (_2794 * _2040) + _2031;
        float _2801 = _2794 * 9.9999997473787516355514526367188e-05;
        float _2802 = (-1.0) - _2801;
        float _2804 = _2801 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_2800 > _2804) || ((_2800 < _2802) || ((_2799 > _2804) || ((_2799 < _2802) || ((_2798 < _2802) || (_2798 > _2804))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2918 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2800, cbModelParam._m0[17u].z, fma(_2799, cbModelParam._m0[17u].y, _2798 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2800, cbModelParam._m0[18u].z, fma(_2799, cbModelParam._m0[18u].y, _2798 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2800, cbModelParam._m0[19u].z, fma(_2799, cbModelParam._m0[19u].y, _2798 * cbModelParam._m0[19u].x))), _1969);
            frontier_phi_25_50_ladder = _2918.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _2918.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _2918.x * cbModelParam._m0[1u].z;
        }
        _2059 = frontier_phi_25_50_ladder_2;
        _2061 = frontier_phi_25_50_ladder_1;
        _2063 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _2043 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1040, _1041, _1042), _1969);
        _2059 = _2043.x * cbModelParam._m0[1u].z;
        _2061 = _2043.y * cbModelParam._m0[1u].z;
        _2063 = _2043.z * cbModelParam._m0[1u].z;
    }
    float _2075 = ((((1.0 - _1061) * ((_1048 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_1061 * _1048)) * _1032;
    float _2076 = _2075 * ((cbModelParam._m0[1u].w * (_2059 - _1960)) + _1960);
    float _2077 = _2075 * ((cbModelParam._m0[1u].w * (_2061 - _1962)) + _1962);
    float _2078 = _2075 * ((cbModelParam._m0[1u].w * (_2063 - _1964)) + _1964);
    float _2081 = fma(_2078, cbSceneParam._m0[89u].z, fma(_2077, cbSceneParam._m0[89u].y, _2076 * cbSceneParam._m0[89u].x));
    float _2084 = fma(_2078, cbSceneParam._m0[90u].z, fma(_2077, cbSceneParam._m0[90u].y, _2076 * cbSceneParam._m0[90u].x));
    float _2087 = fma(_2078, cbSceneParam._m0[91u].z, fma(_2077, cbSceneParam._m0[91u].y, _2076 * cbSceneParam._m0[91u].x));
    float _2121 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2125 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2129 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2133 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2134 = _2121 / _2133;
    float _2135 = _2125 / _2133;
    float _2136 = _2129 / _2133;
    float _2283;
    float _2284;
    float _2285;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2163 = ((uint(_2136 > cbSceneParam._m0[59u].y) + uint(_2136 > cbSceneParam._m0[59u].x)) + uint(_2136 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2164 = _2163 + 43u;
        uint _2172 = _2163 + 44u;
        uint _2180 = _2163 + 45u;
        uint _2188 = _2163 + 46u;
        float _2199 = fma(_2133, cbSceneParam._m0[_2164].w, fma(_2129, cbSceneParam._m0[_2164].z, fma(_2125, cbSceneParam._m0[_2164].y, _2121 * cbSceneParam._m0[_2164].x)));
        float _2203 = fma(_2133, cbSceneParam._m0[_2172].w, fma(_2129, cbSceneParam._m0[_2172].z, fma(_2125, cbSceneParam._m0[_2172].y, _2121 * cbSceneParam._m0[_2172].x)));
        float _2211 = fma(_2133, cbSceneParam._m0[_2188].w, fma(_2129, cbSceneParam._m0[_2188].z, fma(_2125, cbSceneParam._m0[_2188].y, _2121 * cbSceneParam._m0[_2188].x)));
        float _2216 = cbSceneParam._m0[33u].z * _2211;
        float _2218 = cbSceneParam._m0[33u].w * _2211;
        float _2221 = fma(_2133, cbSceneParam._m0[_2180].w, fma(_2129, cbSceneParam._m0[_2180].z, fma(_2125, cbSceneParam._m0[_2180].y, _2121 * cbSceneParam._m0[_2180].x))) / _2211;
        float _2269 = (cbSceneParam._m0[33u].x - sqrt(((_2135 * _2135) + (_2134 * _2134)) + (_2136 * _2136))) * cbSceneParam._m0[33u].y;
        float _4673 = isnan(0.0) ? _2269 : (isnan(_2269) ? 0.0 : max(_2269, 0.0));
        float _2276 = (isnan(1.0) ? _4673 : (isnan(_4673) ? 1.0 : min(_4673, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2216 + _2199) / _2211, (_2218 + _2203) / _2211), _2221), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2218 + _2199) / _2211, (_2203 - _2216) / _2211), _2221), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2199 - _2216) / _2211, (_2203 - _2218) / _2211), _2221), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2199 - _2218) / _2211, (_2216 + _2203) / _2211), _2221), 0.0)).x), vec4(0.25)));
        _2283 = 1.0 - (_2276 * cbSceneParam._m0[34u].x);
        _2284 = 1.0 - (_2276 * cbSceneParam._m0[34u].y);
        _2285 = 1.0 - (_2276 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2283 = 1.0;
        _2284 = 1.0;
        _2285 = 1.0;
    }
    float _2349;
    float _2351;
    float _2353;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2337 = fma(_2133, cbSceneParam._m0[63u].w, fma(_2129, cbSceneParam._m0[63u].z, fma(_2125, cbSceneParam._m0[63u].y, _2121 * cbSceneParam._m0[63u].x)));
        float _2338 = fma(_2133, cbSceneParam._m0[60u].w, fma(_2129, cbSceneParam._m0[60u].z, fma(_2125, cbSceneParam._m0[60u].y, _2121 * cbSceneParam._m0[60u].x))) / _2337;
        float _2339 = fma(_2133, cbSceneParam._m0[61u].w, fma(_2129, cbSceneParam._m0[61u].z, fma(_2125, cbSceneParam._m0[61u].y, _2121 * cbSceneParam._m0[61u].x))) / _2337;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_2338 >= cbSceneParam._m0[64u].x) && (_2339 >= cbSceneParam._m0[64u].y)) && (_2338 <= cbSceneParam._m0[64u].z)) && (_2339 <= cbSceneParam._m0[64u].w))
        {
            float _2477 = fma(_2133, cbSceneParam._m0[62u].w, fma(_2129, cbSceneParam._m0[62u].z, fma(_2125, cbSceneParam._m0[62u].y, _2121 * cbSceneParam._m0[62u].x))) / _2337;
            float _2481 = isnan(cbSceneParam._m0[41u].w) ? _2477 : (isnan(_2477) ? cbSceneParam._m0[41u].w : max(_2477, cbSceneParam._m0[41u].w));
            float _2524 = (cbSceneParam._m0[33u].x - sqrt(((_2135 * _2135) + (_2134 * _2134)) + (_2136 * _2136))) * cbSceneParam._m0[33u].y;
            float _4689 = isnan(0.0) ? _2524 : (isnan(_2524) ? 0.0 : max(_2524, 0.0));
            float _2531 = (isnan(1.0) ? _4689 : (isnan(_4689) ? 1.0 : min(_4689, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2338, cbSceneParam._m0[33u].w + _2339), _2481), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2338, _2339 - cbSceneParam._m0[33u].z), _2481), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2338 - cbSceneParam._m0[33u].z, _2339 - cbSceneParam._m0[33u].w), _2481), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2338 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2339), _2481), 0.0)).x), vec4(0.25)));
            float _2535 = 1.0 - (_2531 * cbSceneParam._m0[34u].x);
            float _2536 = 1.0 - (_2531 * cbSceneParam._m0[34u].y);
            float _2537 = 1.0 - (_2531 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_2537) ? _2285 : (isnan(_2285) ? _2537 : min(_2285, _2537));
            frontier_phi_37_36_ladder_1 = isnan(_2536) ? _2284 : (isnan(_2284) ? _2536 : min(_2284, _2536));
            frontier_phi_37_36_ladder_2 = isnan(_2535) ? _2283 : (isnan(_2283) ? _2535 : min(_2283, _2535));
        }
        else
        {
            frontier_phi_37_36_ladder = _2285;
            frontier_phi_37_36_ladder_1 = _2284;
            frontier_phi_37_36_ladder_2 = _2283;
        }
        _2349 = frontier_phi_37_36_ladder_2;
        _2351 = frontier_phi_37_36_ladder_1;
        _2353 = frontier_phi_37_36_ladder;
    }
    else
    {
        _2349 = _2283;
        _2351 = _2284;
        _2353 = _2285;
    }
    uvec4 _2358 = floatBitsToUint(cbInstanceData._m0[_283 + 5u]);
    uint _2360 = _2358.x * 14u;
    uint _2361 = _2360 + 13u;
    float _2368 = _1032 + (-1.0);
    float _2373 = (cbLight._m0[_2361].x * _2368) + 1.0;
    float _2374 = (cbLight._m0[_2361].y * _2368) + 1.0;
    float _2375 = (cbLight._m0[_2361].z * _2368) + 1.0;
    float _2376 = (cbLight._m0[_2361].w * _2368) + 1.0;
    uint _2377 = _2360 + 5u;
    float _2383 = isnan(1.0) ? _2374 : (isnan(_2374) ? 1.0 : min(_2374, 1.0));
    uint _2387 = _2360 + 4u;
    float _2396 = isnan(1.0) ? _2373 : (isnan(_2373) ? 1.0 : min(_2373, 1.0));
    uint _2400 = _2360 | 1u;
    float _2411 = dot(vec3(cbLight._m0[_2360].xyz), vec3(_871, _872, _873));
    float _2414 = dot(vec3(cbLight._m0[_2400].xyz), vec3(_871, _872, _873));
    float _4725 = isnan(0.0) ? _2411 : (isnan(_2411) ? 0.0 : max(_2411, 0.0));
    float _4736 = isnan(0.0) ? _2414 : (isnan(_2414) ? 0.0 : max(_2414, 0.0));
    float _2419 = (isnan(1.0) ? _4725 : (isnan(_4725) ? 1.0 : min(_4725, 1.0))) * 0.3183098733425140380859375;
    float _2421 = (isnan(1.0) ? _4736 : (isnan(_4736) ? 1.0 : min(_4736, 1.0))) * 0.3183098733425140380859375;
    float _2428 = ((cbLight._m0[_2377].x * _2383) * _2421) + (((cbLight._m0[_2387].x * _2349) * _2396) * _2419);
    float _2429 = ((_2383 * cbLight._m0[_2377].y) * _2421) + (((cbLight._m0[_2387].y * _2351) * _2396) * _2419);
    float _2430 = ((_2383 * cbLight._m0[_2377].z) * _2421) + (((cbLight._m0[_2387].z * _2353) * _2396) * _2419);
    uvec4 _2434 = floatBitsToUint(cbLight._m0[_2360 + 12u]);
    bool _2436 = _2434.x == 0u;
    float _2538;
    float _2540;
    float _2542;
    if (_2436)
    {
        _2538 = _2428;
        _2540 = _2429;
        _2542 = _2430;
    }
    else
    {
        uint _2546 = _2360 + 6u;
        float _2562 = (dot(vec3(cbLight._m0[_2360 + 2u].xyz), vec3(_871, _872, _873)) * 0.5) + 0.5;
        float _2563 = _2562 * _2562;
        float _4747 = isnan(0.0) ? _2563 : (isnan(_2563) ? 0.0 : max(_2563, 0.0));
        float _2564 = isnan(1.0) ? _4747 : (isnan(_4747) ? 1.0 : min(_4747, 1.0));
        float _2565 = isnan(1.0) ? _2375 : (isnan(_2375) ? 1.0 : min(_2375, 1.0));
        _2538 = (((cbLight._m0[_2546].x * 0.3183098733425140380859375) * _2564) * _2565) + _2428;
        _2540 = (((cbLight._m0[_2546].y * 0.3183098733425140380859375) * _2564) * _2565) + _2429;
        _2542 = (((cbLight._m0[_2546].z * 0.3183098733425140380859375) * _2564) * _2565) + _2430;
    }
    bool _2545 = _2434.y == 0u;
    float _2600;
    float _2602;
    float _2604;
    if (_2545)
    {
        _2600 = _2538;
        _2602 = _2540;
        _2604 = _2542;
    }
    else
    {
        uint _2762 = _2360 + 7u;
        float _2778 = (dot(vec3(cbLight._m0[_2360 + 3u].xyz), vec3(_871, _872, _873)) * 0.5) + 0.5;
        float _2779 = _2778 * _2778;
        float _4763 = isnan(0.0) ? _2779 : (isnan(_2779) ? 0.0 : max(_2779, 0.0));
        float _2780 = isnan(1.0) ? _4763 : (isnan(_4763) ? 1.0 : min(_4763, 1.0));
        float _2781 = isnan(1.0) ? _2376 : (isnan(_2376) ? 1.0 : min(_2376, 1.0));
        _2600 = (((cbLight._m0[_2762].x * 0.3183098733425140380859375) * _2780) * _2781) + _2538;
        _2602 = (((cbLight._m0[_2762].y * 0.3183098733425140380859375) * _2780) * _2781) + _2540;
        _2604 = (((cbLight._m0[_2762].z * 0.3183098733425140380859375) * _2780) * _2781) + _2542;
    }
    uint _2607 = _2360 + 8u;
    float _2620 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2360].w)) * _874) * 0.949999988079071044921875);
    float _2621 = _2620 * _2620;
    float _2622 = cbLight._m0[_2360].x + _949;
    float _2623 = cbLight._m0[_2360].y + _950;
    float _2624 = cbLight._m0[_2360].z + _951;
    float _2628 = inversesqrt(dot(vec3(_2622, _2623, _2624), vec3(_2622, _2623, _2624)));
    float _2629 = _2628 * _2622;
    float _2630 = _2628 * _2623;
    float _2631 = _2628 * _2624;
    float _2632 = dot(vec3(_871, _872, _873), vec3(cbLight._m0[_2360].xyz));
    float _4779 = isnan(0.0) ? _2632 : (isnan(_2632) ? 0.0 : max(_2632, 0.0));
    float _2635 = isnan(1.0) ? _4779 : (isnan(_4779) ? 1.0 : min(_4779, 1.0));
    float _4790 = isnan(0.0) ? _1033 : (isnan(_1033) ? 0.0 : max(_1033, 0.0));
    float _2636 = isnan(1.0) ? _4790 : (isnan(_4790) ? 1.0 : min(_4790, 1.0));
    float _2637 = dot(vec3(_871, _872, _873), vec3(_2629, _2630, _2631));
    float _4801 = isnan(0.0) ? _2637 : (isnan(_2637) ? 0.0 : max(_2637, 0.0));
    float _2640 = isnan(1.0) ? _4801 : (isnan(_4801) ? 1.0 : min(_4801, 1.0));
    float _2641 = dot(vec3(cbLight._m0[_2360].xyz), vec3(_2629, _2630, _2631));
    float _4812 = isnan(0.0) ? _2641 : (isnan(_2641) ? 0.0 : max(_2641, 0.0));
    float _2645 = _2621 * _2621;
    float _2649 = ((_2640 * _2640) * (_2645 + (-1.0))) + 1.0;
    float _2660 = (exp2(log2(1.0 - (isnan(1.0) ? _4812 : (isnan(_4812) ? 1.0 : min(_4812, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2661 = 1.0 - _2621;
    float _2672 = (0.5 / (((_2636 * ((_2635 * _2661) + _2621)) + 9.9999999392252902907785028219223e-09) + (((_2636 * _2661) + _2621) * _2635))) * _2635;
    float _4823 = isnan(0.0) ? _2672 : (isnan(_2672) ? 0.0 : max(_2672, 0.0));
    float _2674 = (isnan(1.0) ? _4823 : (isnan(_4823) ? 1.0 : min(_4823, 1.0))) * (_2645 / ((_2649 * _2649) * 3.141590118408203125));
    uint _2688 = _2360 + 9u;
    float _2699 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2400].w)) * _874) * 0.949999988079071044921875);
    float _2700 = _2699 * _2699;
    float _2701 = cbLight._m0[_2400].x + _949;
    float _2702 = cbLight._m0[_2400].y + _950;
    float _2703 = cbLight._m0[_2400].z + _951;
    float _2707 = inversesqrt(dot(vec3(_2701, _2702, _2703), vec3(_2701, _2702, _2703)));
    float _2708 = _2707 * _2701;
    float _2709 = _2707 * _2702;
    float _2710 = _2707 * _2703;
    float _2711 = dot(vec3(_871, _872, _873), vec3(cbLight._m0[_2400].xyz));
    float _4834 = isnan(0.0) ? _2711 : (isnan(_2711) ? 0.0 : max(_2711, 0.0));
    float _2714 = isnan(1.0) ? _4834 : (isnan(_4834) ? 1.0 : min(_4834, 1.0));
    float _2715 = dot(vec3(_871, _872, _873), vec3(_2708, _2709, _2710));
    float _4845 = isnan(0.0) ? _2715 : (isnan(_2715) ? 0.0 : max(_2715, 0.0));
    float _2718 = isnan(1.0) ? _4845 : (isnan(_4845) ? 1.0 : min(_4845, 1.0));
    float _2719 = dot(vec3(cbLight._m0[_2400].xyz), vec3(_2708, _2709, _2710));
    float _4856 = isnan(0.0) ? _2719 : (isnan(_2719) ? 0.0 : max(_2719, 0.0));
    float _2723 = _2700 * _2700;
    float _2727 = ((_2718 * _2718) * (_2723 + (-1.0))) + 1.0;
    float _2736 = (exp2(log2(1.0 - (isnan(1.0) ? _4856 : (isnan(_4856) ? 1.0 : min(_4856, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2737 = 1.0 - _2700;
    float _2747 = (0.5 / (((_2636 * ((_2714 * _2737) + _2700)) + 9.9999999392252902907785028219223e-09) + (((_2636 * _2737) + _2700) * _2714))) * _2714;
    float _4867 = isnan(0.0) ? _2747 : (isnan(_2747) ? 0.0 : max(_2747, 0.0));
    float _2749 = (isnan(1.0) ? _4867 : (isnan(_4867) ? 1.0 : min(_4867, 1.0))) * (_2723 / ((_2727 * _2727) * 3.141590118408203125));
    float _2759 = (((_2736 * cbLight._m0[_2688].x) * _2749) * _2383) + ((((cbLight._m0[_2607].x * _2349) * _2660) * _2674) * _2396);
    float _2760 = (((_2736 * cbLight._m0[_2688].y) * _2749) * _2383) + ((((cbLight._m0[_2607].y * _2351) * _2660) * _2674) * _2396);
    float _2761 = (((_2736 * cbLight._m0[_2688].z) * _2749) * _2383) + ((((cbLight._m0[_2607].z * _2353) * _2660) * _2674) * _2396);
    float _2817;
    float _2819;
    float _2821;
    if (_2436)
    {
        _2817 = _2759;
        _2819 = _2760;
        _2821 = _2761;
    }
    else
    {
        uint _2823 = _2360 + 2u;
        uint _2827 = _2360 + 10u;
        float _2841 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2823].w)) * _874) * 0.949999988079071044921875);
        float _2842 = _2841 * _2841;
        float _2843 = cbLight._m0[_2823].x + _949;
        float _2844 = cbLight._m0[_2823].y + _950;
        float _2845 = cbLight._m0[_2823].z + _951;
        float _2849 = inversesqrt(dot(vec3(_2843, _2844, _2845), vec3(_2843, _2844, _2845)));
        float _2850 = _2849 * _2843;
        float _2851 = _2849 * _2844;
        float _2852 = _2849 * _2845;
        float _2853 = dot(vec3(_871, _872, _873), vec3(cbLight._m0[_2823].xyz));
        float _4878 = isnan(0.0) ? _2853 : (isnan(_2853) ? 0.0 : max(_2853, 0.0));
        float _2856 = isnan(1.0) ? _4878 : (isnan(_4878) ? 1.0 : min(_4878, 1.0));
        float _2857 = dot(vec3(_871, _872, _873), vec3(_2850, _2851, _2852));
        float _4889 = isnan(0.0) ? _2857 : (isnan(_2857) ? 0.0 : max(_2857, 0.0));
        float _2860 = isnan(1.0) ? _4889 : (isnan(_4889) ? 1.0 : min(_4889, 1.0));
        float _2861 = dot(vec3(cbLight._m0[_2823].xyz), vec3(_2850, _2851, _2852));
        float _4900 = isnan(0.0) ? _2861 : (isnan(_2861) ? 0.0 : max(_2861, 0.0));
        float _2865 = _2842 * _2842;
        float _2869 = ((_2860 * _2860) * (_2865 + (-1.0))) + 1.0;
        float _2878 = (exp2(log2(1.0 - (isnan(1.0) ? _4900 : (isnan(_4900) ? 1.0 : min(_4900, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2879 = 1.0 - _2842;
        float _2889 = (0.5 / (((_2636 * ((_2856 * _2879) + _2842)) + 9.9999999392252902907785028219223e-09) + (((_2636 * _2879) + _2842) * _2856))) * _2856;
        float _4911 = isnan(0.0) ? _2889 : (isnan(_2889) ? 0.0 : max(_2889, 0.0));
        float _2891 = (isnan(1.0) ? _4911 : (isnan(_4911) ? 1.0 : min(_4911, 1.0))) * (_2865 / ((_2869 * _2869) * 3.141590118408203125));
        float _2892 = isnan(1.0) ? _2375 : (isnan(_2375) ? 1.0 : min(_2375, 1.0));
        _2817 = (((_2878 * cbLight._m0[_2827].x) * _2891) * _2892) + _2759;
        _2819 = (((_2878 * cbLight._m0[_2827].y) * _2891) * _2892) + _2760;
        _2821 = (((_2878 * cbLight._m0[_2827].z) * _2891) * _2892) + _2761;
    }
    float _2923;
    float _2925;
    float _2927;
    if (_2545)
    {
        _2923 = _2817;
        _2925 = _2819;
        _2927 = _2821;
    }
    else
    {
        uint _2934 = _2360 + 3u;
        uint _2938 = _2360 + 11u;
        float _2952 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2934].w)) * _874) * 0.949999988079071044921875);
        float _2953 = _2952 * _2952;
        float _2954 = cbLight._m0[_2934].x + _949;
        float _2955 = cbLight._m0[_2934].y + _950;
        float _2956 = cbLight._m0[_2934].z + _951;
        float _2960 = inversesqrt(dot(vec3(_2954, _2955, _2956), vec3(_2954, _2955, _2956)));
        float _2961 = _2960 * _2954;
        float _2962 = _2960 * _2955;
        float _2963 = _2960 * _2956;
        float _2964 = dot(vec3(_871, _872, _873), vec3(cbLight._m0[_2934].xyz));
        float _4927 = isnan(0.0) ? _2964 : (isnan(_2964) ? 0.0 : max(_2964, 0.0));
        float _2967 = isnan(1.0) ? _4927 : (isnan(_4927) ? 1.0 : min(_4927, 1.0));
        float _2968 = dot(vec3(_871, _872, _873), vec3(_2961, _2962, _2963));
        float _4938 = isnan(0.0) ? _2968 : (isnan(_2968) ? 0.0 : max(_2968, 0.0));
        float _2971 = isnan(1.0) ? _4938 : (isnan(_4938) ? 1.0 : min(_4938, 1.0));
        float _2972 = dot(vec3(cbLight._m0[_2934].xyz), vec3(_2961, _2962, _2963));
        float _4949 = isnan(0.0) ? _2972 : (isnan(_2972) ? 0.0 : max(_2972, 0.0));
        float _2976 = _2953 * _2953;
        float _2980 = ((_2971 * _2971) * (_2976 + (-1.0))) + 1.0;
        float _2989 = (exp2(log2(1.0 - (isnan(1.0) ? _4949 : (isnan(_4949) ? 1.0 : min(_4949, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2990 = 1.0 - _2953;
        float _3000 = (0.5 / (((_2636 * ((_2967 * _2990) + _2953)) + 9.9999999392252902907785028219223e-09) + (((_2636 * _2990) + _2953) * _2967))) * _2967;
        float _4960 = isnan(0.0) ? _3000 : (isnan(_3000) ? 0.0 : max(_3000, 0.0));
        float _3002 = (isnan(1.0) ? _4960 : (isnan(_4960) ? 1.0 : min(_4960, 1.0))) * (_2976 / ((_2980 * _2980) * 3.141590118408203125));
        float _3003 = isnan(1.0) ? _2376 : (isnan(_2376) ? 1.0 : min(_2376, 1.0));
        _2923 = (((_2989 * cbLight._m0[_2938].x) * _3002) * _3003) + _2817;
        _2925 = (((_2989 * cbLight._m0[_2938].y) * _3002) * _3003) + _2819;
        _2927 = (((_2989 * cbLight._m0[_2938].z) * _3002) * _3003) + _2821;
    }
    float _3069;
    float _3071;
    float _3073;
    float _3075;
    float _3077;
    float _3079;
    if (_2358.y == 0u)
    {
        uvec4 _3024 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3025 = _3024.x;
        uint _3036 = uint((float(_3024.y) * floor(float(uint(cbSceneParam._m0[85u].y * _970) / _3025))) + floor(float(uint(cbSceneParam._m0[85u].x * _969) / _3025)));
        float _3046 = (log2(_2136 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _3047 = isnan(0.0) ? _3046 : (isnan(_3046) ? 0.0 : max(_3046, 0.0));
        uint _3050 = uint(isnan(14.0) ? _3047 : (isnan(_3047) ? 14.0 : min(_3047, 14.0)));
        uvec4 _3055 = texelFetch(g_lightClusterGridBuffer, int(((_3050 << 2u) + (_3036 << 6u)) >> 2u));
        uint _3056 = _3055.x;
        uint _3057 = _3024.z;
        float _3136;
        float _3138;
        float _3140;
        float _3142;
        float _3144;
        float _3146;
        if (((((1u << ((_3057 >> 4u) & 15u)) + 4294967295u) & _3056) == 0u) || ((_3057 & 240u) == 0u))
        {
            _3136 = 0.0;
            _3138 = 0.0;
            _3140 = 0.0;
            _3142 = 0.0;
            _3144 = 0.0;
            _3146 = 0.0;
        }
        else
        {
            float _3137;
            float _3139;
            float _3141;
            float _3143;
            float _3145;
            float _3147;
            float _3288 = 0.0;
            float _3289 = 0.0;
            float _3290 = 0.0;
            float _3291 = 0.0;
            float _3292 = 0.0;
            float _3293 = 0.0;
            uint _3294 = 0u;
            uint _3303;
            bool _3304;
            for (;;)
            {
                _3303 = texelFetch(g_lightClassification, int((((_3050 << 5u) + (_3036 << 9u)) + (_3294 << 2u)) >> 2u)).x;
                _3304 = _3303 == 0u;
                float frontier_phi_71_pred;
                float frontier_phi_71_pred_1;
                float frontier_phi_71_pred_2;
                float frontier_phi_71_pred_3;
                float frontier_phi_71_pred_4;
                float frontier_phi_71_pred_5;
                if (_3304)
                {
                    frontier_phi_71_pred = _3293;
                    frontier_phi_71_pred_1 = _3292;
                    frontier_phi_71_pred_2 = _3291;
                    frontier_phi_71_pred_3 = _3290;
                    frontier_phi_71_pred_4 = _3289;
                    frontier_phi_71_pred_5 = _3288;
                }
                else
                {
                    float _3433;
                    float _3434;
                    float _3435;
                    float _3436;
                    float _3437;
                    float _3438;
                    uint _3439;
                    _3433 = _3288;
                    _3434 = _3289;
                    _3435 = _3290;
                    _3436 = _3291;
                    _3437 = _3292;
                    _3438 = _3293;
                    _3439 = _3303;
                    float _3360;
                    float _3361;
                    float _3362;
                    float _3363;
                    float _3364;
                    float _3365;
                    for (;;)
                    {
                        uint _3443 = uint(findLSB(_3439)) + (_3294 << 5u);
                        uint _3440 = (_3439 + 4294967295u) & _3439;
                        uint _3445 = _3443 * 48u;
                        vec4 _3459 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3445)).x, texelFetch(g_PointLightRenderingBuffer, int(_3445 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3445 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3445 + 3u)).x));
                        uint _3465 = (_3443 * 48u) + 4u;
                        vec4 _3478 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3465)).x, texelFetch(g_PointLightRenderingBuffer, int(_3465 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3465 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3465 + 3u)).x));
                        uint _3484 = (_3443 * 48u) + 8u;
                        vec3 _3495 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3484)).x, texelFetch(g_PointLightRenderingBuffer, int(_3484 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3484 + 2u)).x));
                        float _3499 = _3459.x - _2134;
                        float _3500 = _3459.y - _2135;
                        float _3501 = _3459.z - _2136;
                        float _3502 = dot(vec3(_3499, _3500, _3501), vec3(_3499, _3500, _3501));
                        float _3505 = inversesqrt(_3502);
                        float _3506 = _3505 * _3499;
                        float _3507 = _3505 * _3500;
                        float _3508 = _3505 * _3501;
                        float _3509 = dot(vec3(_988, _991, _994), vec3(_3506, _3507, _3508));
                        float _3514 = 1.0 - (_3502 * _3459.w);
                        float _4986 = isnan(0.0) ? _3514 : (isnan(_3514) ? 0.0 : max(_3514, 0.0));
                        float _3515 = isnan(1.0) ? _4986 : (isnan(_4986) ? 1.0 : min(_4986, 1.0));
                        float _3516 = sqrt(_3502) * _3478.w;
                        float _3519 = 1.39999997615814208984375 / (_3516 + 1.39999997615814208984375);
                        float _3520 = _3519 * _3519;
                        float _3523 = ((1.0 - _3520) * _3509) + _3520;
                        float _3526 = _3516 * _3516;
                        float _3530 = ((isnan(0.0) ? _3523 : (isnan(_3523) ? 0.0 : max(_3523, 0.0))) * _3515) / ((_3526 * 0.699999988079071044921875) + 1.0);
                        float _3534 = (-0.0) - _2134;
                        float _3535 = (-0.0) - _2135;
                        float _3536 = (-0.0) - _2136;
                        float _3540 = inversesqrt(dot(vec3(_3534, _3535, _3536), vec3(_3534, _3535, _3536)));
                        float _3541 = _3540 * _3534;
                        float _3542 = _3540 * _3535;
                        float _3543 = _3540 * _3536;
                        float _3550 = exp2(log2(1.0 / ((_3526 * 3.5) + 5.0)) * 0.25);
                        float _3551 = 1.0 - _1048;
                        float _3558 = sqrt(1.0 - ((1.0 - (_3551 * _3551)) * (1.0 - (_3550 * _3550))));
                        float _3559 = _3558 * _3558;
                        float _3560 = _3559 * _3559;
                        float _3561 = _3541 + _3506;
                        float _3562 = _3542 + _3507;
                        float _3563 = _3543 + _3508;
                        float _3567 = inversesqrt(dot(vec3(_3561, _3562, _3563), vec3(_3561, _3562, _3563)));
                        float _3571 = dot(vec3(_988, _991, _994), vec3(_3541, _3542, _3543));
                        float _5002 = isnan(0.0) ? _3571 : (isnan(_3571) ? 0.0 : max(_3571, 0.0));
                        float _3574 = isnan(1.0) ? _5002 : (isnan(_5002) ? 1.0 : min(_5002, 1.0));
                        float _3575 = dot(vec3(_988, _991, _994), vec3(_3567 * _3561, _3567 * _3562, _3567 * _3563));
                        float _5013 = isnan(0.0) ? _3575 : (isnan(_3575) ? 0.0 : max(_3575, 0.0));
                        float _3578 = isnan(1.0) ? _5013 : (isnan(_5013) ? 1.0 : min(_5013, 1.0));
                        float _3582 = ((_3578 * _3578) * (_3560 + (-1.0))) + 1.0;
                        float _3583 = _3519 * _3559;
                        float _3584 = _3583 * _3583;
                        float _3587 = ((1.0 - _3584) * _3509) + _3584;
                        float _5024 = isnan(0.0) ? _3587 : (isnan(_3587) ? 0.0 : max(_3587, 0.0));
                        float _3588 = isnan(1.0) ? _5024 : (isnan(_5024) ? 1.0 : min(_5024, 1.0));
                        float _3589 = 1.0 - _3559;
                        float _3599 = (0.5 / (((_3588 * ((_3574 * _3589) + _3559)) + 9.9999999392252902907785028219223e-09) + (((_3588 * _3589) + _3559) * _3574))) * _3588;
                        float _5035 = isnan(0.0) ? _3599 : (isnan(_3599) ? 0.0 : max(_3599, 0.0));
                        float _3610 = (((_3560 * 3.1415927410125732421875) * (isnan(1.0) ? _5035 : (isnan(_5035) ? 1.0 : min(_5035, 1.0)))) / ((_3582 * _3582) * ((_3526 * 2.1991131305694580078125) + 3.141590118408203125))) * _3515;
                        _3363 = (_3530 * _3478.x) + _3436;
                        _3364 = (_3530 * _3478.y) + _3437;
                        _3365 = (_3530 * _3478.z) + _3438;
                        _3360 = (_3610 * _3495.x) + _3433;
                        _3361 = (_3610 * _3495.y) + _3434;
                        _3362 = (_3610 * _3495.z) + _3435;
                        if (_3440 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3433 = _3360;
                            _3434 = _3361;
                            _3435 = _3362;
                            _3436 = _3363;
                            _3437 = _3364;
                            _3438 = _3365;
                            _3439 = _3440;
                        }
                    }
                    frontier_phi_71_pred = _3365;
                    frontier_phi_71_pred_1 = _3364;
                    frontier_phi_71_pred_2 = _3363;
                    frontier_phi_71_pred_3 = _3362;
                    frontier_phi_71_pred_4 = _3361;
                    frontier_phi_71_pred_5 = _3360;
                }
                _3147 = frontier_phi_71_pred;
                _3145 = frontier_phi_71_pred_1;
                _3143 = frontier_phi_71_pred_2;
                _3141 = frontier_phi_71_pred_3;
                _3139 = frontier_phi_71_pred_4;
                _3137 = frontier_phi_71_pred_5;
                uint _3295 = _3294 + 1u;
                if (_3295 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3288 = _3137;
                    _3289 = _3139;
                    _3290 = _3141;
                    _3291 = _3143;
                    _3292 = _3145;
                    _3293 = _3147;
                    _3294 = _3295;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3136 = _3137;
            _3138 = _3139;
            _3140 = _3141;
            _3142 = _3143;
            _3144 = _3145;
            _3146 = _3147;
        }
        uvec4 _3150 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3151 = _3150.z;
        uint _3153 = (_3151 >> 8u) & 15u;
        float _3256;
        float _3258;
        float _3260;
        float _3262;
        float _3264;
        float _3266;
        if (((4294967295u << _3153) & _3056) == 0u)
        {
            _3256 = _3136;
            _3258 = _3138;
            _3260 = _3140;
            _3262 = _3142;
            _3264 = _3144;
            _3266 = _3146;
        }
        else
        {
            float _3281 = inversesqrt(dot(vec3(_2134, _2135, _2136), vec3(_2134, _2135, _2136)));
            float _3282 = _3281 * _2134;
            float _3283 = _3281 * _2135;
            float _3284 = _3281 * _2136;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_3153 < ((_3151 >> 12u) & 15u))
            {
                float _3257;
                float _3259;
                float _3261;
                float _3263;
                float _3265;
                float _3267;
                float _3416 = _3136;
                float _3417 = _3138;
                float _3418 = _3140;
                float _3419 = _3142;
                float _3420 = _3144;
                float _3421 = _3146;
                uint _3422 = _3153;
                uint _3431;
                bool _3432;
                for (;;)
                {
                    _3431 = texelFetch(g_lightClassification, int((((_3050 << 5u) + (_3036 << 9u)) + (_3422 << 2u)) >> 2u)).x;
                    _3432 = _3431 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    float frontier_phi_82_pred_3;
                    float frontier_phi_82_pred_4;
                    float frontier_phi_82_pred_5;
                    if (_3432)
                    {
                        frontier_phi_82_pred = _3421;
                        frontier_phi_82_pred_1 = _3420;
                        frontier_phi_82_pred_2 = _3419;
                        frontier_phi_82_pred_3 = _3418;
                        frontier_phi_82_pred_4 = _3417;
                        frontier_phi_82_pred_5 = _3416;
                    }
                    else
                    {
                        float _3624;
                        float _3625;
                        float _3626;
                        float _3627;
                        float _3628;
                        float _3629;
                        float _3917;
                        float _3918;
                        float _3919;
                        float _3920;
                        float _3921;
                        float _3922;
                        float _3637 = _3416;
                        float _3638 = _3417;
                        float _3639 = _3418;
                        float _3640 = _3419;
                        float _3641 = _3420;
                        float _3642 = _3421;
                        uint _3643 = _3431;
                        uint _3644;
                        vec4 _3669;
                        float _3670;
                        vec4 _3685;
                        vec3 _3697;
                        vec4 _3712;
                        vec4 _3727;
                        float _3773;
                        bool _3774;
                        for (;;)
                        {
                            uint _3654 = ((_3422 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3643));
                            _3644 = (_3643 + 4294967295u) & _3643;
                            uint _3656 = _3654 * 40u;
                            _3669 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3656)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3656 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3656 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3656 + 3u)).x));
                            _3670 = _3669.w;
                            uint _3672 = (_3654 * 40u) + 4u;
                            _3685 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3672)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3672 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3672 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3672 + 3u)).x));
                            uint _3687 = (_3654 * 40u) + 8u;
                            _3697 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3687)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3687 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3687 + 2u)).x));
                            uint _3699 = (_3654 * 40u) + 16u;
                            _3712 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3699)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3699 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3699 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3699 + 3u)).x));
                            uint _3714 = (_3654 * 40u) + 20u;
                            _3727 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3714)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3714 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3714 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3714 + 3u)).x));
                            uint _3729 = (_3654 * 40u) + 24u;
                            vec4 _3742 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3729)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3729 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3729 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3729 + 3u)).x));
                            uint _3748 = (_3654 * 40u) + 28u;
                            vec4 _3761 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3748)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3748 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3748 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3748 + 3u)).x));
                            _3773 = fma(_2136, _3761.z, fma(_2135, _3761.y, _3761.x * _2134)) + _3761.w;
                            _3774 = !((fma(_2136, _3742.z, fma(_2135, _3742.y, _3742.x * _2134)) + _3742.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_3774)
                            {
                                float _3801 = _3669.x - _2134;
                                float _3802 = _3669.y - _2135;
                                float _3803 = _3669.z - _2136;
                                float _3804 = dot(vec3(_3801, _3802, _3803), vec3(_3801, _3802, _3803));
                                float _3807 = inversesqrt(_3804);
                                float _3808 = _3807 * _3801;
                                float _3809 = _3807 * _3802;
                                float _3810 = _3807 * _3803;
                                float _3814 = 1.0 - (_3804 / (_3670 * _3670));
                                float _5046 = isnan(0.0) ? _3814 : (isnan(_3814) ? 0.0 : max(_3814, 0.0));
                                float _3815 = isnan(1.0) ? _5046 : (isnan(_5046) ? 1.0 : min(_5046, 1.0));
                                float _3819 = sqrt(_3804) * _3685.w;
                                float _3821 = 1.39999997615814208984375 / (_3819 + 1.39999997615814208984375);
                                float _3822 = _3821 * _3821;
                                float _3825 = ((1.0 - _3822) * dot(vec3(_3808, _3809, _3810), vec3(_988, _991, _994))) + _3822;
                                float _3828 = _3819 * _3819;
                                float _3832 = (fma(_2136, _3712.z, fma(_2135, _3712.y, _3712.x * _2134)) + _3712.w) / _3773;
                                float _3833 = (fma(_2136, _3727.z, fma(_2135, _3727.y, _3727.x * _2134)) + _3727.w) / _3773;
                                float _3837 = 1.0 - dot(vec2(_3832, _3833), vec2(_3832, _3833));
                                float _5062 = isnan(0.0) ? _3837 : (isnan(_3837) ? 0.0 : max(_3837, 0.0));
                                float _3838 = isnan(1.0) ? _5062 : (isnan(_5062) ? 1.0 : min(_5062, 1.0));
                                float _3839 = _3838 * (((isnan(0.0) ? _3825 : (isnan(_3825) ? 0.0 : max(_3825, 0.0))) * _3815) / ((_3828 * 0.699999988079071044921875) + 1.0));
                                float _3851 = exp2(log2(1.0 / ((_3828 * 3.5) + 5.0)) * 0.25);
                                float _3852 = 1.0 - _1048;
                                float _3859 = sqrt(1.0 - ((1.0 - (_3852 * _3852)) * (1.0 - (_3851 * _3851))));
                                float _3860 = _3859 * _3859;
                                float _3861 = _3860 * _3860;
                                float _3862 = _3808 - _3282;
                                float _3863 = _3809 - _3283;
                                float _3864 = _3810 - _3284;
                                float _3868 = inversesqrt(dot(vec3(_3862, _3863, _3864), vec3(_3862, _3863, _3864)));
                                float _3872 = dot(vec3(_988, _991, _994), vec3((-0.0) - _3282, (-0.0) - _3283, (-0.0) - _3284));
                                float _5073 = isnan(0.0) ? _3872 : (isnan(_3872) ? 0.0 : max(_3872, 0.0));
                                float _3875 = isnan(1.0) ? _5073 : (isnan(_5073) ? 1.0 : min(_5073, 1.0));
                                float _3876 = dot(vec3(_988, _991, _994), vec3(_3868 * _3862, _3868 * _3863, _3868 * _3864));
                                float _5084 = isnan(0.0) ? _3876 : (isnan(_3876) ? 0.0 : max(_3876, 0.0));
                                float _3879 = isnan(1.0) ? _5084 : (isnan(_5084) ? 1.0 : min(_5084, 1.0));
                                float _3883 = ((_3879 * _3879) * (_3861 + (-1.0))) + 1.0;
                                float _3884 = _3821 * _3860;
                                float _3885 = _3884 * _3884;
                                float _3891 = ((1.0 - _3885) * dot(vec3(_988, _991, _994), vec3(_3808, _3809, _3810))) + _3885;
                                float _5095 = isnan(0.0) ? _3891 : (isnan(_3891) ? 0.0 : max(_3891, 0.0));
                                float _3892 = isnan(1.0) ? _5095 : (isnan(_5095) ? 1.0 : min(_5095, 1.0));
                                float _3893 = 1.0 - _3860;
                                float _3903 = (0.5 / (((_3892 * ((_3875 * _3893) + _3860)) + 9.9999999392252902907785028219223e-09) + (((_3892 * _3893) + _3860) * _3875))) * _3892;
                                float _5106 = isnan(0.0) ? _3903 : (isnan(_3903) ? 0.0 : max(_3903, 0.0));
                                float _3913 = (_3838 * _3815) * (((_3861 * 3.1415927410125732421875) * (isnan(1.0) ? _5106 : (isnan(_5106) ? 1.0 : min(_5106, 1.0)))) / ((_3883 * _3883) * ((_3828 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_88_pred = _3839 * _3685.z;
                                frontier_phi_88_pred_1 = _3839 * _3685.y;
                                frontier_phi_88_pred_2 = _3839 * _3685.x;
                                frontier_phi_88_pred_3 = _3913 * _3697.z;
                                frontier_phi_88_pred_4 = _3913 * _3697.y;
                                frontier_phi_88_pred_5 = _3913 * _3697.x;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _3922 = frontier_phi_88_pred;
                            _3921 = frontier_phi_88_pred_1;
                            _3920 = frontier_phi_88_pred_2;
                            _3919 = frontier_phi_88_pred_3;
                            _3918 = frontier_phi_88_pred_4;
                            _3917 = frontier_phi_88_pred_5;
                            _3627 = _3920 + _3640;
                            _3628 = _3921 + _3641;
                            _3629 = _3922 + _3642;
                            _3624 = _3917 + _3637;
                            _3625 = _3918 + _3638;
                            _3626 = _3919 + _3639;
                            if (_3644 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3637 = _3624;
                                _3638 = _3625;
                                _3639 = _3626;
                                _3640 = _3627;
                                _3641 = _3628;
                                _3642 = _3629;
                                _3643 = _3644;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _3629;
                        frontier_phi_82_pred_1 = _3628;
                        frontier_phi_82_pred_2 = _3627;
                        frontier_phi_82_pred_3 = _3626;
                        frontier_phi_82_pred_4 = _3625;
                        frontier_phi_82_pred_5 = _3624;
                    }
                    _3267 = frontier_phi_82_pred;
                    _3265 = frontier_phi_82_pred_1;
                    _3263 = frontier_phi_82_pred_2;
                    _3261 = frontier_phi_82_pred_3;
                    _3259 = frontier_phi_82_pred_4;
                    _3257 = frontier_phi_82_pred_5;
                    uint _3423 = _3422 + 1u;
                    if (_3423 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3416 = _3257;
                        _3417 = _3259;
                        _3418 = _3261;
                        _3419 = _3263;
                        _3420 = _3265;
                        _3421 = _3267;
                        _3422 = _3423;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _3263;
                frontier_phi_63_64_ladder_1 = _3267;
                frontier_phi_63_64_ladder_2 = _3265;
                frontier_phi_63_64_ladder_3 = _3261;
                frontier_phi_63_64_ladder_4 = _3259;
                frontier_phi_63_64_ladder_5 = _3257;
            }
            else
            {
                frontier_phi_63_64_ladder = _3142;
                frontier_phi_63_64_ladder_1 = _3146;
                frontier_phi_63_64_ladder_2 = _3144;
                frontier_phi_63_64_ladder_3 = _3140;
                frontier_phi_63_64_ladder_4 = _3138;
                frontier_phi_63_64_ladder_5 = _3136;
            }
            _3256 = frontier_phi_63_64_ladder_5;
            _3258 = frontier_phi_63_64_ladder_4;
            _3260 = frontier_phi_63_64_ladder_3;
            _3262 = frontier_phi_63_64_ladder;
            _3264 = frontier_phi_63_64_ladder_2;
            _3266 = frontier_phi_63_64_ladder_1;
        }
        float _3271 = isnan(1.0) ? _1032 : (isnan(_1032) ? 1.0 : min(_1032, 1.0));
        _3069 = (_3271 * _3262) + _2600;
        _3071 = (_3271 * _3264) + _2602;
        _3073 = (_3271 * _3266) + _2604;
        _3075 = ((_3256 * 0.039999999105930328369140625) * _3271) + _2923;
        _3077 = ((_3258 * 0.039999999105930328369140625) * _3271) + _2925;
        _3079 = ((_3260 * 0.039999999105930328369140625) * _3271) + _2927;
    }
    else
    {
        _3069 = _2600;
        _3071 = _2602;
        _3073 = _2604;
        _3075 = _2923;
        _3077 = _2925;
        _3079 = _2927;
    }
    float _5122 = isnan(0.0) ? _1017 : (isnan(_1017) ? 0.0 : max(_1017, 0.0));
    float _5133 = isnan(0.0) ? _1018 : (isnan(_1018) ? 0.0 : max(_1018, 0.0));
    float _5144 = isnan(0.0) ? _1019 : (isnan(_1019) ? 0.0 : max(_1019, 0.0));
    float _3096 = ((isnan(1.0) ? _5122 : (isnan(_5122) ? 1.0 : min(_5122, 1.0))) * (_3069 + ((isnan(0.0) ? _1789 : (isnan(_1789) ? 0.0 : max(_1789, 0.0))) * _1032))) + ((_3075 + ((isnan(0.0) ? _2081 : (isnan(_2081) ? 0.0 : max(_2081, 0.0))) * _1868)) * cbPerFrame._m0[3u].x);
    float _3097 = ((isnan(1.0) ? _5133 : (isnan(_5133) ? 1.0 : min(_5133, 1.0))) * (_3071 + ((isnan(0.0) ? _1792 : (isnan(_1792) ? 0.0 : max(_1792, 0.0))) * _1032))) + ((_3077 + ((isnan(0.0) ? _2084 : (isnan(_2084) ? 0.0 : max(_2084, 0.0))) * _1868)) * cbPerFrame._m0[3u].x);
    float _3098 = ((isnan(1.0) ? _5144 : (isnan(_5144) ? 1.0 : min(_5144, 1.0))) * (_3073 + ((isnan(0.0) ? _1795 : (isnan(_1795) ? 0.0 : max(_1795, 0.0))) * _1032))) + ((_3079 + ((isnan(0.0) ? _2087 : (isnan(_2087) ? 0.0 : max(_2087, 0.0))) * _1868)) * cbPerFrame._m0[3u].x);
    uint _3099 = _283 + 6u;
    float _3107 = _969 / cbSceneParam._m0[86u].x;
    float _3108 = _970 / cbSceneParam._m0[86u].y;
    vec4 _3122 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3107, _3108, (log2((isnan(cbSceneParam._m0[77u].w) ? _892 : (isnan(_892) ? cbSceneParam._m0[77u].w : min(_892, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3124 = _3122.x;
    float _3125 = _3122.y;
    float _3126 = _3122.z;
    float _3127 = _3122.w;
    float _3198;
    float _3200;
    float _3202;
    float _3204;
    if (_892 > cbSceneParam._m0[78u].w)
    {
        float _3161 = isnan(_892) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _892 : min(cbSceneParam._m0[80u].w, _892));
        float _3162 = _3161 / _892;
        float _3173 = _3162 * _942;
        float _3174 = _943 * _3162;
        float _3175 = (-0.0) - _3174;
        float _3176 = _3162 * _944;
        float _3178 = (cbSceneParam._m0[77u].w * _3175) / _3161;
        float _3179 = _3178 + cbSceneParam._m0[79u].w;
        float _3180 = cbSceneParam._m0[79u].w - _3174;
        float _3186 = sqrt(((_3173 * _3173) + (_3174 * _3174)) + (_3176 * _3176));
        float _3189 = (1.0 - (cbSceneParam._m0[77u].w / _3161)) * _3186;
        float _3194 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3196 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3373;
        if (abs((_3175 - _3178) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3373 = ((((_3179 > 0.0) ? exp2(_3194 * _3179) : (2.0 - exp2(_3196 * _3179))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3189;
        }
        else
        {
            float _3317 = 1.0 / cbSceneParam._m0[80u].x;
            float _3318 = isnan(_3180) ? _3179 : (isnan(_3179) ? _3180 : max(_3179, _3180));
            float _3319 = isnan(_3180) ? _3179 : (isnan(_3179) ? _3180 : min(_3179, _3180));
            float _3328 = isnan(0.0) ? _3318 : (isnan(_3318) ? 0.0 : min(_3318, 0.0));
            float _3329 = isnan(0.0) ? _3319 : (isnan(_3319) ? 0.0 : min(_3319, 0.0));
            _3373 = ((abs(_3186 / _3175) * cbSceneParam._m0[80u].y) * ((((_3328 - _3329) * 2.0) - ((exp2(_3194 * (isnan(0.0) ? _3318 : (isnan(_3318) ? 0.0 : max(_3318, 0.0)))) - exp2(_3194 * (isnan(0.0) ? _3319 : (isnan(_3319) ? 0.0 : max(_3319, 0.0))))) * _3317)) - ((exp2(_3196 * _3328) - exp2(_3196 * _3329)) * _3317))) + (_3189 * cbSceneParam._m0[80u].z);
        }
        vec4 _3375 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3107, _3108, 1.0), 0.0);
        float _3384 = exp2((_3373 * (-1.44269502162933349609375)) * (1.0 - _3375.w));
        float _3385 = log2(_3384);
        float _3401 = log2(_3127);
        _3198 = (exp2(_3401 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3385 * cbSceneParam._m0[78u].x)) * _3375.x) / cbSceneParam._m0[78u].x)) + _3124;
        _3200 = (exp2(_3401 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3385 * cbSceneParam._m0[78u].y)) * _3375.y) / cbSceneParam._m0[78u].y)) + _3125;
        _3202 = (exp2(_3401 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3385 * cbSceneParam._m0[78u].z)) * _3375.z) / cbSceneParam._m0[78u].z)) + _3126;
        _3204 = _3384 * _3127;
    }
    else
    {
        _3198 = _3124;
        _3200 = _3125;
        _3202 = _3126;
        _3204 = _3127;
    }
    bool _3411;
    vec4 _3214;
    vec4 _3236;
    float _3238;
    float _3242;
    float _3243;
    float _3244;
    float _3245;
    bool _3255;
    for (;;)
    {
        _3214 = cbMatDynParam._m0[0u];
        float _3216 = roundEven(_3214.y);
        bool _3217 = _3216 == 3.0;
        float _3218 = log2(_3204);
        float _3225 = exp2(_3218 * cbSceneParam._m0[78u].x) * _3096;
        float _3226 = exp2(_3218 * cbSceneParam._m0[78u].y) * _3097;
        float _3227 = exp2(_3218 * cbSceneParam._m0[78u].z) * _3098;
        float _3234 = _958 + (-0.5);
        _3236 = cbMtdParam._m0[1u];
        _3238 = _3236.y * _3234;
        float _3241 = (_3216 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3242 = _3241 * (_3217 ? _3225 : (_3225 + (cbSceneParam._m0[72u].w * _3198)));
        _3243 = _3241 * (_3217 ? _3226 : (_3226 + (cbSceneParam._m0[72u].w * _3200)));
        _3244 = _3241 * (_3217 ? _3227 : (_3227 + (cbSceneParam._m0[72u].w * _3202)));
        _3245 = _3234 * 0.999000012874603271484375;
        _3255 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3255)
        {
            if ((cbInstanceData._m0[_283 + 7u].x + _3245) < 0.5)
            {
                _3411 = true;
                break;
            }
        }
        uint _3352 = _1007 + uint(_3214.w);
        if ((cbInstanceData._m0[_3352].w < 1.0) && ((cbInstanceData._m0[_3352].w + _3245) < 0.5))
        {
            _3411 = true;
            break;
        }
        if ((_3238 + 1.0) < _3236.x)
        {
            _3411 = true;
            break;
        }
        _3411 = false;
        break;
    }
    float _3615;
    if (_3411)
    {
        discard_state = true;
        _3615 = 0.0;
    }
    else
    {
        _3615 = cbInstanceData._m0[_3099].w;
    }
    SV_Target.x = _3242;
    SV_Target.y = _3243;
    SV_Target.z = _3244;
    SV_Target.w = _3615;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_3099].w;
    discard_exit();
}


