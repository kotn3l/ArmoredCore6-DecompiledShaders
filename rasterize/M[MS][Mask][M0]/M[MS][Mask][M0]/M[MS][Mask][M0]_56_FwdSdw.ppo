#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_29;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_10;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_6;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1236;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _221 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _222 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _223 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _229 = inversesqrt(dot(vec3(_221, _222, _223), vec3(_221, _222, _223)));
    float _236 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _243 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _249 = uint(roundEven(NORMAL.w)) * 13u;
    uint _254 = _249 + 1u;
    uint _258 = _249 + 2u;
    float _267 = sqrt(((cbInstanceData._m0[_254].x * cbInstanceData._m0[_254].x) + (cbInstanceData._m0[_249].x * cbInstanceData._m0[_249].x)) + (cbInstanceData._m0[_258].x * cbInstanceData._m0[_258].x));
    float _268 = _267 * TEXCOORD.z;
    float _269 = _267 * TEXCOORD.w;
    vec4 _289 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _295 = _289.x * cbMtdParam._m0[11u].x;
    float _296 = _289.y * cbMtdParam._m0[11u].y;
    float _297 = _289.z * cbMtdParam._m0[11u].z;
    vec4 _316 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _268) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _269) + cbTextureTilingScale._m0[5u].w));
    vec4 _335 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _372 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _374 = _372.x;
    float _386 = dot(vec4(_374, _372.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _403 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _335.x) * 2.0) - ((((_374 - _386) * cbMtdParam._m0[24u].z) + _386) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3826 = isnan(0.0) ? _403 : (isnan(_403) ? 0.0 : max(_403, 0.0));
    float _404 = isnan(1.0) ? _3826 : (isnan(_3826) ? 1.0 : min(_3826, 1.0));
    float _411 = (_404 * ((_316.x * cbMtdParam._m0[12u].x) - _295)) + _295;
    float _412 = (_404 * ((_316.y * cbMtdParam._m0[12u].y) - _296)) + _296;
    float _413 = (_404 * ((_316.z * cbMtdParam._m0[12u].z) - _297)) + _297;
    vec4 _430 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _268) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _269) + cbTextureTilingScale._m0[3u].w));
    vec4 _450 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _452 = _450.x;
    float _462 = dot(vec4(_452, _450.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _476 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _335.y) * 2.0) - ((((_452 - _462) * cbMtdParam._m0[24u].z) + _462) * cbMtdParam._m0[20u].w))) + 1.0;
    float _3837 = isnan(0.0) ? _476 : (isnan(_476) ? 0.0 : max(_476, 0.0));
    float _477 = isnan(1.0) ? _3837 : (isnan(_3837) ? 1.0 : min(_3837, 1.0));
    float _484 = (_477 * ((_430.x * cbMtdParam._m0[13u].x) - _411)) + _411;
    float _485 = (_477 * ((_430.y * cbMtdParam._m0[13u].y) - _412)) + _412;
    float _486 = (_477 * ((_430.z * cbMtdParam._m0[13u].z) - _413)) + _413;
    vec4 _499 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _268) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _269) + cbTextureTilingScale._m0[4u].w));
    vec4 _516 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _518 = _516.x;
    float _519 = _516.y;
    float _520 = _516.z;
    float _527 = ((_499.x - _518) * _404) + _518;
    float _528 = ((_499.y - _519) * _404) + _519;
    float _529 = ((_499.z - _520) * _404) + _520;
    vec4 _541 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _268) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _269) + cbTextureTilingScale._m0[2u].w));
    float _554 = ((_541.z - _529) * _477) + _529;
    float _557 = ((((_541.x - _527) * _477) + _527) * 2.0) + (-1.0);
    float _559 = ((((_541.y - _528) * _477) + _528) * 2.0) + (-1.0);
    float _560 = dot(vec2(_557, _559), vec2(_557, _559));
    float _3848 = isnan(0.0) ? _560 : (isnan(_560) ? 0.0 : max(_560, 0.0));
    float _565 = sqrt(1.0 - (isnan(1.0) ? _3848 : (isnan(_3848) ? 1.0 : min(_3848, 1.0))));
    vec4 _579 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _591 = (((_579.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _557;
    float _592 = (((_579.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _559;
    vec4 _604 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _268) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _269) + cbTextureTilingScale._m0[19u].w));
    float _606 = _604.x;
    float _607 = 1.0 - _606;
    float _635 = (TEXCOORD_8.x - ((cbMtdParam._m0[22u].w * (1.0 - TEXCOORD_8.x)) * ((((_606 - _607) * cbMtdParam._m0[24u].y) + _607) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3859 = isnan(0.0) ? _635 : (isnan(_635) ? 0.0 : max(_635, 0.0));
    float _636 = isnan(1.0) ? _3859 : (isnan(_3859) ? 1.0 : min(_3859, 1.0));
    float _644 = ((((cbMtdParam._m0[10u].x - _484) * TEXCOORD_8.x) * cbMtdParam._m0[23u].w) * _636) + _484;
    float _645 = ((((cbMtdParam._m0[10u].y - _485) * TEXCOORD_8.y) * cbMtdParam._m0[23u].w) * _636) + _485;
    float _646 = (((cbMtdParam._m0[23u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _486)) * _636) + _486;
    float _650 = (cbMtdParam._m0[19u].w * (_579.z - _554)) + _554;
    float _654 = ((cbMtdParam._m0[23u].y - _650) * _636) + _650;
    vec4 _673 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _268) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _269) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _679 = (_673.x * 2.0) + (-1.0);
    float _680 = (_673.y * 2.0) + (-1.0);
    float _681 = dot(vec2(_679, _680), vec2(_679, _680));
    float _3870 = isnan(0.0) ? _681 : (isnan(_681) ? 0.0 : max(_681, 0.0));
    float _697 = (_636 * (((cbMtdParam._m0[22u].z * _591) - _591) + _679)) + _591;
    float _698 = (_636 * (((cbMtdParam._m0[22u].z * _592) - _592) + _680)) + _592;
    float _699 = (_636 * (sqrt(1.0 - (isnan(1.0) ? _3870 : (isnan(_3870) ? 1.0 : min(_3870, 1.0)))) - _565)) + _565;
    float _701 = cbMtdParam._m0[22u].x + _579.w;
    float _704 = fma(_699, _236 * NORMAL.x, fma(_698, _243 * TANGENT.x, (_229 * _221) * _697));
    float _707 = fma(_699, _236 * NORMAL.y, fma(_698, _243 * TANGENT.y, (_229 * _222) * _697));
    float _710 = fma(_699, _236 * NORMAL.z, fma(_698, _243 * TANGENT.z, (_229 * _223) * _697));
    float _714 = inversesqrt(dot(vec3(_704, _707, _710), vec3(_704, _707, _710)));
    float _715 = _714 * _704;
    float _716 = _714 * _707;
    float _717 = _714 * _710;
    float _3881 = isnan(0.0) ? _654 : (isnan(_654) ? 0.0 : max(_654, 0.0));
    float _718 = isnan(1.0) ? _3881 : (isnan(_3881) ? 1.0 : min(_3881, 1.0));
    float _3892 = isnan(0.0) ? _701 : (isnan(_701) ? 0.0 : max(_701, 0.0));
    float _3903 = isnan(0.0) ? _644 : (isnan(_644) ? 0.0 : max(_644, 0.0));
    float _3914 = isnan(0.0) ? _645 : (isnan(_645) ? 0.0 : max(_645, 0.0));
    float _3925 = isnan(0.0) ? _646 : (isnan(_646) ? 0.0 : max(_646, 0.0));
    float _736 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _777 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _787 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _777);
    float _788 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _777);
    float _789 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _777);
    float _793 = inversesqrt(dot(vec3(_787, _788, _789), vec3(_787, _788, _789)));
    float _794 = _787 * _793;
    float _795 = _788 * _793;
    float _796 = _789 * _793;
    float _802 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _803 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _821 = fma(_717, cbSceneParam._m0[5u].z, fma(_716, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _715));
    float _824 = fma(_717, cbSceneParam._m0[6u].z, fma(_716, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _715));
    float _827 = fma(_717, cbSceneParam._m0[7u].z, fma(_716, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _715));
    uint _841 = (_249 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _847 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3903 : (isnan(_3903) ? 1.0 : min(_3903, 1.0)))) * cbInstanceData._m0[_841].x;
    float _848 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3914 : (isnan(_3914) ? 1.0 : min(_3914, 1.0)))) * cbInstanceData._m0[_841].y;
    float _849 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3925 : (isnan(_3925) ? 1.0 : min(_3925, 1.0)))) * cbInstanceData._m0[_841].z;
    float _3936 = isnan(0.0) ? _847 : (isnan(_847) ? 0.0 : max(_847, 0.0));
    float _850 = isnan(1.0) ? _3936 : (isnan(_3936) ? 1.0 : min(_3936, 1.0));
    float _3947 = isnan(0.0) ? _848 : (isnan(_848) ? 0.0 : max(_848, 0.0));
    float _851 = isnan(1.0) ? _3947 : (isnan(_3947) ? 1.0 : min(_3947, 1.0));
    float _3958 = isnan(0.0) ? _849 : (isnan(_849) ? 0.0 : max(_849, 0.0));
    float _852 = isnan(1.0) ? _3958 : (isnan(_3958) ? 1.0 : min(_3958, 1.0));
    vec4 _861 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _802, cbSceneParam._m0[86u].y * _803));
    float _865 = ((isnan(1.0) ? _3892 : (isnan(_3892) ? 1.0 : min(_3892, 1.0))) * TEXCOORD_5.w) * _861.x;
    float _866 = dot(vec3(_715, _716, _717), vec3(_794, _795, _796));
    float _869 = _866 * 2.0;
    float _873 = (_869 * _715) - _794;
    float _874 = (_869 * _716) - _795;
    float _875 = (_869 * _717) - _796;
    float _879 = abs(dot(vec3(_794, _795, _796), vec3(_715, _716, _717)));
    float _3969 = isnan(0.0) ? _879 : (isnan(_879) ? 0.0 : max(_879, 0.0));
    float _881 = sqrt(_718);
    float _894 = exp2((_881 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3969 : (isnan(_3969) ? 1.0 : min(_3969, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_881 * 3.0));
    float _926 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _930 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _934 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1235;
    float _1237;
    float _1238;
    float _1239;
    float _1240;
    float _1241;
    float _1242;
    float _1243;
    float _1244;
    float _1245;
    float _1246;
    float _1247;
    float _1248;
    float _1249;
    float _1250;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _960 = fma(_934, cbModelParam._m0[26u].z, fma(_930, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _926));
        float _964 = fma(_934, cbModelParam._m0[27u].z, fma(_930, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _926));
        float _968 = fma(_934, cbModelParam._m0[28u].z, fma(_930, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _926));
        float _993 = _926 + _715;
        float _994 = _930 + _716;
        float _995 = _934 + _717;
        float _1005 = fma(_995, cbModelParam._m0[26u].z, fma(_994, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _993)) - _960;
        float _1006 = fma(_995, cbModelParam._m0[27u].z, fma(_994, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _993)) - _964;
        float _1007 = fma(_995, cbModelParam._m0[28u].z, fma(_994, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _993)) - _968;
        float _1011 = inversesqrt(dot(vec3(_1005, _1006, _1007), vec3(_1005, _1006, _1007)));
        float _1024 = ((_1011 * _1005) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_960 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1025 = ((_1011 * _1006) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_964 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1026 = ((_1011 * _1007) / cbModelParam._m0[34u].z) + ((((((_968 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1029 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1024, _1025, _1026), 0.0);
        vec4 _1036 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1024, _1025, _1026), 0.0);
        vec4 _1043 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1024, _1025, _1026), 0.0);
        vec4 _1050 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1024, _1025, _1026), 0.0);
        float _1063 = exp2((_1029.w + (-0.5)) * 20.0) * 2.0;
        float _1064 = _1063 * (_1029.x + (-0.5));
        float _1065 = _1063 * (_1029.y + (-0.5));
        float _1066 = _1063 * (_1029.z + (-0.5));
        float _1073 = exp2((_1036.w + (-0.5)) * 20.0) * 2.0;
        float _1074 = _1073 * (_1036.x + (-0.5));
        float _1075 = _1073 * (_1036.y + (-0.5));
        float _1076 = _1073 * (_1036.z + (-0.5));
        float _1083 = exp2((_1043.w + (-0.5)) * 20.0) * 2.0;
        float _1084 = _1083 * (_1043.x + (-0.5));
        float _1085 = _1083 * (_1043.y + (-0.5));
        float _1086 = _1083 * (_1043.z + (-0.5));
        float _1093 = exp2((_1050.w + (-0.5)) * 20.0) * 2.0;
        float _1094 = _1093 * (_1050.x + (-0.5));
        float _1095 = _1093 * (_1050.y + (-0.5));
        float _1096 = _1093 * (_1050.z + (-0.5));
        float _1097 = isnan(0.0) ? _1094 : (isnan(_1094) ? 0.0 : max(_1094, 0.0));
        float _1098 = isnan(0.0) ? _1095 : (isnan(_1095) ? 0.0 : max(_1095, 0.0));
        float _1099 = isnan(0.0) ? _1096 : (isnan(_1096) ? 0.0 : max(_1096, 0.0));
        float _1100 = _1064 * 0.5;
        float _1101 = _1074 * 0.5;
        float _1102 = _1084 * 0.5;
        float _1103 = dot(vec3(_1100, _1101, _1102), vec3(_1100, _1101, _1102));
        float _1108 = (_1103 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1103);
        float _1117 = (dot(vec3(_715, _716, _717), vec3(_1108 * _1100, _1108 * _1101, _1108 * _1102)) + 1.0) * 0.5;
        float _3995 = isnan(0.0) ? _1117 : (isnan(_1117) ? 0.0 : max(_1117, 0.0));
        float _1127 = sqrt(((_1101 * _1101) + (_1100 * _1100)) + (_1102 * _1102)) / (_1097 + 9.9999997473787516355514526367188e-06);
        float _4006 = isnan(0.0) ? _1127 : (isnan(_1127) ? 0.0 : max(_1127, 0.0));
        float _1128 = isnan(1.0) ? _4006 : (isnan(_4006) ? 1.0 : min(_4006, 1.0));
        float _1129 = _1128 * 2.0;
        float _1133 = (1.0 - _1128) / (_1128 + 1.0);
        float _4017 = isnan(0.0) ? _1133 : (isnan(_1133) ? 0.0 : max(_1133, 0.0));
        float _1134 = isnan(1.0) ? _4017 : (isnan(_4017) ? 1.0 : min(_4017, 1.0));
        float _1143 = ((((1.0 - _1134) * (_1129 + 2.0)) * exp2(log2(isnan(1.0) ? _3995 : (isnan(_3995) ? 1.0 : min(_3995, 1.0))) * (_1129 + 1.0))) + _1134) * _1097;
        float _1144 = _1065 * 0.5;
        float _1145 = _1075 * 0.5;
        float _1146 = _1085 * 0.5;
        float _1147 = dot(vec3(_1144, _1145, _1146), vec3(_1144, _1145, _1146));
        float _1152 = (_1147 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1147);
        float _1160 = (dot(vec3(_715, _716, _717), vec3(_1152 * _1144, _1152 * _1145, _1152 * _1146)) + 1.0) * 0.5;
        float _4028 = isnan(0.0) ? _1160 : (isnan(_1160) ? 0.0 : max(_1160, 0.0));
        float _1169 = sqrt(((_1145 * _1145) + (_1144 * _1144)) + (_1146 * _1146)) / (_1098 + 9.9999997473787516355514526367188e-06);
        float _4039 = isnan(0.0) ? _1169 : (isnan(_1169) ? 0.0 : max(_1169, 0.0));
        float _1170 = isnan(1.0) ? _4039 : (isnan(_4039) ? 1.0 : min(_4039, 1.0));
        float _1171 = _1170 * 2.0;
        float _1175 = (1.0 - _1170) / (_1170 + 1.0);
        float _4050 = isnan(0.0) ? _1175 : (isnan(_1175) ? 0.0 : max(_1175, 0.0));
        float _1176 = isnan(1.0) ? _4050 : (isnan(_4050) ? 1.0 : min(_4050, 1.0));
        float _1185 = ((((1.0 - _1176) * (_1171 + 2.0)) * exp2(log2(isnan(1.0) ? _4028 : (isnan(_4028) ? 1.0 : min(_4028, 1.0))) * (_1171 + 1.0))) + _1176) * _1098;
        float _1186 = _1066 * 0.5;
        float _1187 = _1076 * 0.5;
        float _1188 = _1086 * 0.5;
        float _1189 = dot(vec3(_1186, _1187, _1188), vec3(_1186, _1187, _1188));
        float _1194 = (_1189 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1189);
        float _1202 = (dot(vec3(_715, _716, _717), vec3(_1194 * _1186, _1194 * _1187, _1194 * _1188)) + 1.0) * 0.5;
        float _4061 = isnan(0.0) ? _1202 : (isnan(_1202) ? 0.0 : max(_1202, 0.0));
        float _1211 = sqrt(((_1187 * _1187) + (_1186 * _1186)) + (_1188 * _1188)) / (_1099 + 9.9999997473787516355514526367188e-06);
        float _4072 = isnan(0.0) ? _1211 : (isnan(_1211) ? 0.0 : max(_1211, 0.0));
        float _1212 = isnan(1.0) ? _4072 : (isnan(_4072) ? 1.0 : min(_4072, 1.0));
        float _1213 = _1212 * 2.0;
        float _1217 = (1.0 - _1212) / (_1212 + 1.0);
        float _4083 = isnan(0.0) ? _1217 : (isnan(_1217) ? 0.0 : max(_1217, 0.0));
        float _1218 = isnan(1.0) ? _4083 : (isnan(_4083) ? 1.0 : min(_4083, 1.0));
        float _1227 = ((((1.0 - _1218) * (_1213 + 2.0)) * exp2(log2(isnan(1.0) ? _4061 : (isnan(_4061) ? 1.0 : min(_4061, 1.0))) * (_1213 + 1.0))) + _1218) * _1099;
        _1235 = _1066;
        _1237 = _1065;
        _1238 = _1064;
        _1239 = _1076;
        _1240 = _1075;
        _1241 = _1074;
        _1242 = _1086;
        _1243 = _1085;
        _1244 = _1084;
        _1245 = _1099;
        _1246 = _1098;
        _1247 = _1097;
        _1248 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1143 : (isnan(_1143) ? 0.0 : max(_1143, 0.0)));
        _1249 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1185 : (isnan(_1185) ? 0.0 : max(_1185, 0.0)));
        _1250 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1227 : (isnan(_1227) ? 0.0 : max(_1227, 0.0)));
    }
    else
    {
        _1235 = _1236;
        _1237 = _1236;
        _1238 = _1236;
        _1239 = _1236;
        _1240 = _1236;
        _1241 = _1236;
        _1242 = _1236;
        _1243 = _1236;
        _1244 = _1236;
        _1245 = _1236;
        _1246 = _1236;
        _1247 = _1236;
        _1248 = 0.0;
        _1249 = 0.0;
        _1250 = 0.0;
    }
    float _1543;
    float _1544;
    float _1545;
    float _1546;
    float _1547;
    float _1548;
    float _1549;
    float _1550;
    float _1551;
    float _1552;
    float _1553;
    float _1554;
    float _1555;
    float _1556;
    float _1557;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1274 = fma(_934, cbModelParam._m0[30u].z, fma(_930, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _926));
        float _1278 = fma(_934, cbModelParam._m0[31u].z, fma(_930, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _926));
        float _1282 = fma(_934, cbModelParam._m0[32u].z, fma(_930, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _926));
        float _1305 = _926 + _715;
        float _1306 = _930 + _716;
        float _1307 = _934 + _717;
        float _1317 = fma(_1307, cbModelParam._m0[30u].z, fma(_1306, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1305)) - _1274;
        float _1318 = fma(_1307, cbModelParam._m0[31u].z, fma(_1306, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1305)) - _1278;
        float _1319 = fma(_1307, cbModelParam._m0[32u].z, fma(_1306, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1305)) - _1282;
        float _1323 = inversesqrt(dot(vec3(_1317, _1318, _1319), vec3(_1317, _1318, _1319)));
        float _1336 = ((_1323 * _1317) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1274 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1337 = ((_1323 * _1318) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1278 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1338 = ((_1323 * _1319) / cbModelParam._m0[35u].z) + ((((((_1282 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1340 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1336, _1337, _1338), 0.0);
        vec4 _1347 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1336, _1337, _1338), 0.0);
        vec4 _1354 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1336, _1337, _1338), 0.0);
        vec4 _1361 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1336, _1337, _1338), 0.0);
        float _1373 = exp2((_1340.w + (-0.5)) * 20.0) * 2.0;
        float _1374 = _1373 * (_1340.x + (-0.5));
        float _1375 = _1373 * (_1340.y + (-0.5));
        float _1376 = _1373 * (_1340.z + (-0.5));
        float _1383 = exp2((_1347.w + (-0.5)) * 20.0) * 2.0;
        float _1384 = _1383 * (_1347.x + (-0.5));
        float _1385 = _1383 * (_1347.y + (-0.5));
        float _1386 = _1383 * (_1347.z + (-0.5));
        float _1393 = exp2((_1354.w + (-0.5)) * 20.0) * 2.0;
        float _1394 = _1393 * (_1354.x + (-0.5));
        float _1395 = _1393 * (_1354.y + (-0.5));
        float _1396 = _1393 * (_1354.z + (-0.5));
        float _1403 = exp2((_1361.w + (-0.5)) * 20.0) * 2.0;
        float _1404 = _1403 * (_1361.x + (-0.5));
        float _1405 = _1403 * (_1361.y + (-0.5));
        float _1406 = _1403 * (_1361.z + (-0.5));
        float _1407 = isnan(0.0) ? _1404 : (isnan(_1404) ? 0.0 : max(_1404, 0.0));
        float _1408 = isnan(0.0) ? _1405 : (isnan(_1405) ? 0.0 : max(_1405, 0.0));
        float _1409 = isnan(0.0) ? _1406 : (isnan(_1406) ? 0.0 : max(_1406, 0.0));
        float _1410 = _1374 * 0.5;
        float _1411 = _1384 * 0.5;
        float _1412 = _1394 * 0.5;
        float _1413 = dot(vec3(_1410, _1411, _1412), vec3(_1410, _1411, _1412));
        float _1418 = (_1413 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1413);
        float _1426 = (dot(vec3(_715, _716, _717), vec3(_1418 * _1410, _1418 * _1411, _1418 * _1412)) + 1.0) * 0.5;
        float _4124 = isnan(0.0) ? _1426 : (isnan(_1426) ? 0.0 : max(_1426, 0.0));
        float _1435 = sqrt(((_1411 * _1411) + (_1410 * _1410)) + (_1412 * _1412)) / (_1407 + 9.9999997473787516355514526367188e-06);
        float _4135 = isnan(0.0) ? _1435 : (isnan(_1435) ? 0.0 : max(_1435, 0.0));
        float _1436 = isnan(1.0) ? _4135 : (isnan(_4135) ? 1.0 : min(_4135, 1.0));
        float _1437 = _1436 * 2.0;
        float _1441 = (1.0 - _1436) / (_1436 + 1.0);
        float _4146 = isnan(0.0) ? _1441 : (isnan(_1441) ? 0.0 : max(_1441, 0.0));
        float _1442 = isnan(1.0) ? _4146 : (isnan(_4146) ? 1.0 : min(_4146, 1.0));
        float _1451 = ((((1.0 - _1442) * (_1437 + 2.0)) * exp2(log2(isnan(1.0) ? _4124 : (isnan(_4124) ? 1.0 : min(_4124, 1.0))) * (_1437 + 1.0))) + _1442) * _1407;
        float _1452 = _1375 * 0.5;
        float _1453 = _1385 * 0.5;
        float _1454 = _1395 * 0.5;
        float _1455 = dot(vec3(_1452, _1453, _1454), vec3(_1452, _1453, _1454));
        float _1460 = (_1455 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1455);
        float _1468 = (dot(vec3(_715, _716, _717), vec3(_1460 * _1452, _1460 * _1453, _1460 * _1454)) + 1.0) * 0.5;
        float _4157 = isnan(0.0) ? _1468 : (isnan(_1468) ? 0.0 : max(_1468, 0.0));
        float _1477 = sqrt(((_1453 * _1453) + (_1452 * _1452)) + (_1454 * _1454)) / (_1408 + 9.9999997473787516355514526367188e-06);
        float _4168 = isnan(0.0) ? _1477 : (isnan(_1477) ? 0.0 : max(_1477, 0.0));
        float _1478 = isnan(1.0) ? _4168 : (isnan(_4168) ? 1.0 : min(_4168, 1.0));
        float _1479 = _1478 * 2.0;
        float _1483 = (1.0 - _1478) / (_1478 + 1.0);
        float _4179 = isnan(0.0) ? _1483 : (isnan(_1483) ? 0.0 : max(_1483, 0.0));
        float _1484 = isnan(1.0) ? _4179 : (isnan(_4179) ? 1.0 : min(_4179, 1.0));
        float _1493 = ((((1.0 - _1484) * (_1479 + 2.0)) * exp2(log2(isnan(1.0) ? _4157 : (isnan(_4157) ? 1.0 : min(_4157, 1.0))) * (_1479 + 1.0))) + _1484) * _1408;
        float _1494 = _1376 * 0.5;
        float _1495 = _1386 * 0.5;
        float _1496 = _1396 * 0.5;
        float _1497 = dot(vec3(_1494, _1495, _1496), vec3(_1494, _1495, _1496));
        float _1502 = (_1497 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1497);
        float _1510 = (dot(vec3(_715, _716, _717), vec3(_1502 * _1494, _1502 * _1495, _1502 * _1496)) + 1.0) * 0.5;
        float _4190 = isnan(0.0) ? _1510 : (isnan(_1510) ? 0.0 : max(_1510, 0.0));
        float _1519 = sqrt(((_1495 * _1495) + (_1494 * _1494)) + (_1496 * _1496)) / (_1409 + 9.9999997473787516355514526367188e-06);
        float _4201 = isnan(0.0) ? _1519 : (isnan(_1519) ? 0.0 : max(_1519, 0.0));
        float _1520 = isnan(1.0) ? _4201 : (isnan(_4201) ? 1.0 : min(_4201, 1.0));
        float _1521 = _1520 * 2.0;
        float _1525 = (1.0 - _1520) / (_1520 + 1.0);
        float _4212 = isnan(0.0) ? _1525 : (isnan(_1525) ? 0.0 : max(_1525, 0.0));
        float _1526 = isnan(1.0) ? _4212 : (isnan(_4212) ? 1.0 : min(_4212, 1.0));
        float _1535 = ((((1.0 - _1526) * (_1521 + 2.0)) * exp2(log2(isnan(1.0) ? _4190 : (isnan(_4190) ? 1.0 : min(_4190, 1.0))) * (_1521 + 1.0))) + _1526) * _1409;
        _1543 = _1376;
        _1544 = _1375;
        _1545 = _1374;
        _1546 = _1386;
        _1547 = _1385;
        _1548 = _1384;
        _1549 = _1396;
        _1550 = _1395;
        _1551 = _1394;
        _1552 = _1409;
        _1553 = _1408;
        _1554 = _1407;
        _1555 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1451 : (isnan(_1451) ? 0.0 : max(_1451, 0.0)));
        _1556 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1493 : (isnan(_1493) ? 0.0 : max(_1493, 0.0)));
        _1557 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1535 : (isnan(_1535) ? 0.0 : max(_1535, 0.0)));
    }
    else
    {
        _1543 = _1236;
        _1544 = _1236;
        _1545 = _1236;
        _1546 = _1236;
        _1547 = _1236;
        _1548 = _1236;
        _1549 = _1236;
        _1550 = _1236;
        _1551 = _1236;
        _1552 = _1236;
        _1553 = _1236;
        _1554 = _1236;
        _1555 = 0.0;
        _1556 = 0.0;
        _1557 = 0.0;
    }
    float _1567 = (cbModelParam._m0[1u].x * (_1555 - _1248)) + _1248;
    float _1568 = (cbModelParam._m0[1u].x * (_1556 - _1249)) + _1249;
    float _1569 = (cbModelParam._m0[1u].x * (_1557 - _1250)) + _1250;
    float _1590 = fma(_1569, cbSceneParam._m0[89u].z, fma(_1568, cbSceneParam._m0[89u].y, _1567 * cbSceneParam._m0[89u].x));
    float _1593 = fma(_1569, cbSceneParam._m0[90u].z, fma(_1568, cbSceneParam._m0[90u].y, _1567 * cbSceneParam._m0[90u].x));
    float _1596 = fma(_1569, cbSceneParam._m0[91u].z, fma(_1568, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1567));
    float _1611 = _873 * 0.5;
    float _1612 = _874 * 0.5;
    float _1613 = _875 * 0.5;
    float _1614 = dot(vec4(_1611, _1612, _1613, 1.0), vec4(_1545, _1548, _1551, _1554));
    float _1617 = dot(vec4(_1611, _1612, _1613, 1.0), vec4(_1544, _1547, _1550, _1553));
    float _1620 = dot(vec4(_1611, _1612, _1613, 1.0), vec4(_1543, _1546, _1549, _1552));
    float _1654;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1627 = dot(vec4(_1611, _1612, _1613, 1.0), vec4(_1235, _1239, _1242, _1245));
        float _1631 = dot(vec4(_1611, _1612, _1613, 1.0), vec4(_1237, _1240, _1243, _1246));
        float _1635 = dot(vec4(_1611, _1612, _1613, 1.0), vec4(_1238, _1241, _1244, _1247));
        float _1642 = dot(vec4(cbModelParam._m0[39u]), vec4(_1611, _1612, _1613, 1.0));
        _1654 = dot(vec3(isnan(0.0) ? _1635 : (isnan(_1635) ? 0.0 : max(_1635, 0.0)), isnan(0.0) ? _1631 : (isnan(_1631) ? 0.0 : max(_1631, 0.0)), isnan(0.0) ? _1627 : (isnan(_1627) ? 0.0 : max(_1627, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1642) ? 0.0 : (isnan(0.0) ? _1642 : max(0.0, _1642))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1654 = 1.0;
    }
    float _1665;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1656 = dot(vec4(cbModelParam._m0[40u]), vec4(_1611, _1612, _1613, 1.0));
        _1665 = dot(vec3(isnan(0.0) ? _1614 : (isnan(_1614) ? 0.0 : max(_1614, 0.0)), isnan(0.0) ? _1617 : (isnan(_1617) ? 0.0 : max(_1617, 0.0)), isnan(0.0) ? _1620 : (isnan(_1620) ? 0.0 : max(_1620, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1656) ? 0.0 : (isnan(0.0) ? _1656 : max(0.0, _1656))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1665 = 1.0;
    }
    float _1669 = (_1665 * cbModelParam._m0[1u].x) + (_1654 * (1.0 - cbModelParam._m0[1u].x));
    float _1679 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _718);
    float _1680 = isnan(_1679) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1679 : min(cbModelParam._m0[25u].z, _1679));
    float _1762;
    float _1764;
    float _1766;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1729 = fma(_934, cbModelParam._m0[13u].z, fma(_930, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _926)) + cbModelParam._m0[13u].w;
        float _1733 = fma(_934, cbModelParam._m0[14u].z, fma(_930, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _926)) + cbModelParam._m0[14u].w;
        float _1737 = fma(_934, cbModelParam._m0[15u].z, fma(_930, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _926)) + cbModelParam._m0[15u].w;
        float _1740 = fma(_875, cbModelParam._m0[13u].z, fma(_874, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _873));
        float _1743 = fma(_875, cbModelParam._m0[14u].z, fma(_874, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _873));
        float _1746 = fma(_875, cbModelParam._m0[15u].z, fma(_874, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _873));
        float _1774;
        if (_1740 > 0.0)
        {
            _1774 = abs((1.0 - _1729) / _1740);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1740 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1729 + 1.0) / _1740);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1774 = frontier_phi_14_12_ladder;
        }
        float _1945;
        if (_1743 > 0.0)
        {
            _1945 = abs((1.0 - _1733) / _1743);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1743 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1733 + 1.0) / _1743);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1945 = frontier_phi_23_19_ladder;
        }
        float _2240;
        if (_1746 > 0.0)
        {
            _2240 = abs((1.0 - _1737) / _1746);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1746 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1737 + 1.0) / _1746);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2240 = frontier_phi_35_30_ladder;
        }
        float _2242 = isnan(_1945) ? _1774 : (isnan(_1774) ? _1945 : min(_1774, _1945));
        float _2243 = isnan(_2240) ? _2242 : (isnan(_2242) ? _2240 : min(_2242, _2240));
        float _2247 = (_2243 * _1740) + _1729;
        float _2248 = (_2243 * _1743) + _1733;
        float _2249 = (_2243 * _1746) + _1737;
        float _2250 = _2243 * 9.9999997473787516355514526367188e-05;
        float _2252 = (-1.0) - _2250;
        float _2254 = _2250 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2249 > _2254) || ((_2249 < _2252) || ((_2248 > _2254) || ((_2248 < _2252) || ((_2247 < _2252) || (_2247 > _2254))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2394 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2249, cbModelParam._m0[9u].z, fma(_2248, cbModelParam._m0[9u].y, _2247 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2249, cbModelParam._m0[10u].z, fma(_2248, cbModelParam._m0[10u].y, _2247 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2249, cbModelParam._m0[11u].z, fma(_2248, cbModelParam._m0[11u].y, _2247 * cbModelParam._m0[11u].x))), _1680);
            frontier_phi_13_35_ladder = _2394.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2394.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2394.x * cbModelParam._m0[1u].y;
        }
        _1762 = frontier_phi_13_35_ladder_2;
        _1764 = frontier_phi_13_35_ladder_1;
        _1766 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1750 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_873, _874, _875), _1680);
        _1762 = _1750.x * cbModelParam._m0[1u].y;
        _1764 = _1750.y * cbModelParam._m0[1u].y;
        _1766 = _1750.z * cbModelParam._m0[1u].y;
    }
    float _1770 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _718);
    float _1771 = isnan(_1770) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1770 : min(cbModelParam._m0[25u].w, _1770));
    float _1862;
    float _1864;
    float _1866;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1826 = fma(_934, cbModelParam._m0[21u].z, fma(_930, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _926)) + cbModelParam._m0[21u].w;
        float _1830 = fma(_934, cbModelParam._m0[22u].z, fma(_930, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _926)) + cbModelParam._m0[22u].w;
        float _1834 = fma(_934, cbModelParam._m0[23u].z, fma(_930, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _926)) + cbModelParam._m0[23u].w;
        float _1837 = fma(_875, cbModelParam._m0[21u].z, fma(_874, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _873));
        float _1840 = fma(_875, cbModelParam._m0[22u].z, fma(_874, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _873));
        float _1843 = fma(_875, cbModelParam._m0[23u].z, fma(_874, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _873));
        float _1950;
        if (_1837 > 0.0)
        {
            _1950 = abs((1.0 - _1826) / _1837);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1837 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1826 + 1.0) / _1837);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1950 = frontier_phi_25_21_ladder;
        }
        float _2267;
        if (_1840 > 0.0)
        {
            _2267 = abs((1.0 - _1830) / _1840);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1840 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1830 + 1.0) / _1840);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2267 = frontier_phi_37_32_ladder;
        }
        float _2594;
        if (_1843 > 0.0)
        {
            _2594 = abs((1.0 - _1834) / _1843);
        }
        else
        {
            float frontier_phi_47_44_ladder;
            if (_1843 < 0.0)
            {
                frontier_phi_47_44_ladder = abs((_1834 + 1.0) / _1843);
            }
            else
            {
                frontier_phi_47_44_ladder = 5000.0;
            }
            _2594 = frontier_phi_47_44_ladder;
        }
        float _2596 = isnan(_2267) ? _1950 : (isnan(_1950) ? _2267 : min(_1950, _2267));
        float _2597 = isnan(_2594) ? _2596 : (isnan(_2596) ? _2594 : min(_2596, _2594));
        float _2601 = (_2597 * _1837) + _1826;
        float _2602 = (_2597 * _1840) + _1830;
        float _2603 = (_2597 * _1843) + _1834;
        float _2604 = _2597 * 9.9999997473787516355514526367188e-05;
        float _2605 = (-1.0) - _2604;
        float _2607 = _2604 + 1.0;
        float frontier_phi_22_47_ladder;
        float frontier_phi_22_47_ladder_1;
        float frontier_phi_22_47_ladder_2;
        if ((_2603 > _2607) || ((_2603 < _2605) || ((_2602 > _2607) || ((_2602 < _2605) || ((_2601 < _2605) || (_2601 > _2607))))))
        {
            frontier_phi_22_47_ladder = 0.0;
            frontier_phi_22_47_ladder_1 = 0.0;
            frontier_phi_22_47_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2721 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2603, cbModelParam._m0[17u].z, fma(_2602, cbModelParam._m0[17u].y, _2601 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2603, cbModelParam._m0[18u].z, fma(_2602, cbModelParam._m0[18u].y, _2601 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2603, cbModelParam._m0[19u].z, fma(_2602, cbModelParam._m0[19u].y, _2601 * cbModelParam._m0[19u].x))), _1771);
            frontier_phi_22_47_ladder = _2721.z * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_1 = _2721.y * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_2 = _2721.x * cbModelParam._m0[1u].z;
        }
        _1862 = frontier_phi_22_47_ladder_2;
        _1864 = frontier_phi_22_47_ladder_1;
        _1866 = frontier_phi_22_47_ladder;
    }
    else
    {
        vec4 _1846 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_873, _874, _875), _1771);
        _1862 = _1846.x * cbModelParam._m0[1u].z;
        _1864 = _1846.y * cbModelParam._m0[1u].z;
        _1866 = _1846.z * cbModelParam._m0[1u].z;
    }
    float _1878 = ((((1.0 - _894) * ((_881 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_894 * _881)) * _865;
    float _1879 = _1878 * ((cbModelParam._m0[1u].w * (_1862 - _1762)) + _1762);
    float _1880 = _1878 * ((cbModelParam._m0[1u].w * (_1864 - _1764)) + _1764);
    float _1881 = _1878 * ((cbModelParam._m0[1u].w * (_1866 - _1766)) + _1766);
    float _1884 = fma(_1881, cbSceneParam._m0[89u].z, fma(_1880, cbSceneParam._m0[89u].y, _1879 * cbSceneParam._m0[89u].x));
    float _1887 = fma(_1881, cbSceneParam._m0[90u].z, fma(_1880, cbSceneParam._m0[90u].y, _1879 * cbSceneParam._m0[90u].x));
    float _1890 = fma(_1881, cbSceneParam._m0[91u].z, fma(_1880, cbSceneParam._m0[91u].y, _1879 * cbSceneParam._m0[91u].x));
    float _1924 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1928 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1932 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1936 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1937 = _1924 / _1936;
    float _1938 = _1928 / _1936;
    float _1939 = _1932 / _1936;
    float _2086;
    float _2087;
    float _2088;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1966 = ((uint(_1939 > cbSceneParam._m0[59u].y) + uint(_1939 > cbSceneParam._m0[59u].x)) + uint(_1939 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1967 = _1966 + 43u;
        uint _1975 = _1966 + 44u;
        uint _1983 = _1966 + 45u;
        uint _1991 = _1966 + 46u;
        float _2002 = fma(_1936, cbSceneParam._m0[_1967].w, fma(_1932, cbSceneParam._m0[_1967].z, fma(_1928, cbSceneParam._m0[_1967].y, _1924 * cbSceneParam._m0[_1967].x)));
        float _2006 = fma(_1936, cbSceneParam._m0[_1975].w, fma(_1932, cbSceneParam._m0[_1975].z, fma(_1928, cbSceneParam._m0[_1975].y, _1924 * cbSceneParam._m0[_1975].x)));
        float _2014 = fma(_1936, cbSceneParam._m0[_1991].w, fma(_1932, cbSceneParam._m0[_1991].z, fma(_1928, cbSceneParam._m0[_1991].y, _1924 * cbSceneParam._m0[_1991].x)));
        float _2019 = cbSceneParam._m0[33u].z * _2014;
        float _2021 = cbSceneParam._m0[33u].w * _2014;
        float _2024 = fma(_1936, cbSceneParam._m0[_1983].w, fma(_1932, cbSceneParam._m0[_1983].z, fma(_1928, cbSceneParam._m0[_1983].y, _1924 * cbSceneParam._m0[_1983].x))) / _2014;
        float _2072 = (cbSceneParam._m0[33u].x - sqrt(((_1938 * _1938) + (_1937 * _1937)) + (_1939 * _1939))) * cbSceneParam._m0[33u].y;
        float _4338 = isnan(0.0) ? _2072 : (isnan(_2072) ? 0.0 : max(_2072, 0.0));
        float _2079 = (isnan(1.0) ? _4338 : (isnan(_4338) ? 1.0 : min(_4338, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2019 + _2002) / _2014, (_2021 + _2006) / _2014), _2024), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2021 + _2002) / _2014, (_2006 - _2019) / _2014), _2024), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2002 - _2019) / _2014, (_2006 - _2021) / _2014), _2024), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2002 - _2021) / _2014, (_2019 + _2006) / _2014), _2024), 0.0)).x), vec4(0.25)));
        _2086 = 1.0 - (_2079 * cbSceneParam._m0[34u].x);
        _2087 = 1.0 - (_2079 * cbSceneParam._m0[34u].y);
        _2088 = 1.0 - (_2079 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2086 = 1.0;
        _2087 = 1.0;
        _2088 = 1.0;
    }
    float _2152;
    float _2154;
    float _2156;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2140 = fma(_1936, cbSceneParam._m0[63u].w, fma(_1932, cbSceneParam._m0[63u].z, fma(_1928, cbSceneParam._m0[63u].y, _1924 * cbSceneParam._m0[63u].x)));
        float _2141 = fma(_1936, cbSceneParam._m0[60u].w, fma(_1932, cbSceneParam._m0[60u].z, fma(_1928, cbSceneParam._m0[60u].y, _1924 * cbSceneParam._m0[60u].x))) / _2140;
        float _2142 = fma(_1936, cbSceneParam._m0[61u].w, fma(_1932, cbSceneParam._m0[61u].z, fma(_1928, cbSceneParam._m0[61u].y, _1924 * cbSceneParam._m0[61u].x))) / _2140;
        float frontier_phi_34_33_ladder;
        float frontier_phi_34_33_ladder_1;
        float frontier_phi_34_33_ladder_2;
        if ((((_2141 >= cbSceneParam._m0[64u].x) && (_2142 >= cbSceneParam._m0[64u].y)) && (_2141 <= cbSceneParam._m0[64u].z)) && (_2142 <= cbSceneParam._m0[64u].w))
        {
            float _2280 = fma(_1936, cbSceneParam._m0[62u].w, fma(_1932, cbSceneParam._m0[62u].z, fma(_1928, cbSceneParam._m0[62u].y, _1924 * cbSceneParam._m0[62u].x))) / _2140;
            float _2284 = isnan(cbSceneParam._m0[41u].w) ? _2280 : (isnan(_2280) ? cbSceneParam._m0[41u].w : max(_2280, cbSceneParam._m0[41u].w));
            float _2327 = (cbSceneParam._m0[33u].x - sqrt(((_1938 * _1938) + (_1937 * _1937)) + (_1939 * _1939))) * cbSceneParam._m0[33u].y;
            float _4354 = isnan(0.0) ? _2327 : (isnan(_2327) ? 0.0 : max(_2327, 0.0));
            float _2334 = (isnan(1.0) ? _4354 : (isnan(_4354) ? 1.0 : min(_4354, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2141, cbSceneParam._m0[33u].w + _2142), _2284), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2141, _2142 - cbSceneParam._m0[33u].z), _2284), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2141 - cbSceneParam._m0[33u].z, _2142 - cbSceneParam._m0[33u].w), _2284), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2141 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2142), _2284), 0.0)).x), vec4(0.25)));
            float _2338 = 1.0 - (_2334 * cbSceneParam._m0[34u].x);
            float _2339 = 1.0 - (_2334 * cbSceneParam._m0[34u].y);
            float _2340 = 1.0 - (_2334 * cbSceneParam._m0[34u].z);
            frontier_phi_34_33_ladder = isnan(_2340) ? _2088 : (isnan(_2088) ? _2340 : min(_2088, _2340));
            frontier_phi_34_33_ladder_1 = isnan(_2339) ? _2087 : (isnan(_2087) ? _2339 : min(_2087, _2339));
            frontier_phi_34_33_ladder_2 = isnan(_2338) ? _2086 : (isnan(_2086) ? _2338 : min(_2086, _2338));
        }
        else
        {
            frontier_phi_34_33_ladder = _2088;
            frontier_phi_34_33_ladder_1 = _2087;
            frontier_phi_34_33_ladder_2 = _2086;
        }
        _2152 = frontier_phi_34_33_ladder_2;
        _2154 = frontier_phi_34_33_ladder_1;
        _2156 = frontier_phi_34_33_ladder;
    }
    else
    {
        _2152 = _2086;
        _2154 = _2087;
        _2156 = _2088;
    }
    uvec4 _2161 = floatBitsToUint(cbInstanceData._m0[_249 + 5u]);
    uint _2163 = _2161.x * 14u;
    uint _2164 = _2163 + 13u;
    float _2171 = _865 + (-1.0);
    float _2176 = (cbLight._m0[_2164].x * _2171) + 1.0;
    float _2177 = (cbLight._m0[_2164].y * _2171) + 1.0;
    float _2178 = (cbLight._m0[_2164].z * _2171) + 1.0;
    float _2179 = (cbLight._m0[_2164].w * _2171) + 1.0;
    uint _2180 = _2163 + 5u;
    float _2186 = isnan(1.0) ? _2177 : (isnan(_2177) ? 1.0 : min(_2177, 1.0));
    uint _2190 = _2163 + 4u;
    float _2199 = isnan(1.0) ? _2176 : (isnan(_2176) ? 1.0 : min(_2176, 1.0));
    uint _2203 = _2163 | 1u;
    float _2214 = dot(vec3(cbLight._m0[_2163].xyz), vec3(_715, _716, _717));
    float _2217 = dot(vec3(cbLight._m0[_2203].xyz), vec3(_715, _716, _717));
    float _4390 = isnan(0.0) ? _2214 : (isnan(_2214) ? 0.0 : max(_2214, 0.0));
    float _4401 = isnan(0.0) ? _2217 : (isnan(_2217) ? 0.0 : max(_2217, 0.0));
    float _2222 = (isnan(1.0) ? _4390 : (isnan(_4390) ? 1.0 : min(_4390, 1.0))) * 0.3183098733425140380859375;
    float _2224 = (isnan(1.0) ? _4401 : (isnan(_4401) ? 1.0 : min(_4401, 1.0))) * 0.3183098733425140380859375;
    float _2231 = ((cbLight._m0[_2180].x * _2186) * _2224) + (((cbLight._m0[_2190].x * _2152) * _2199) * _2222);
    float _2232 = ((_2186 * cbLight._m0[_2180].y) * _2224) + (((cbLight._m0[_2190].y * _2154) * _2199) * _2222);
    float _2233 = ((_2186 * cbLight._m0[_2180].z) * _2224) + (((cbLight._m0[_2190].z * _2156) * _2199) * _2222);
    uvec4 _2237 = floatBitsToUint(cbLight._m0[_2163 + 12u]);
    bool _2239 = _2237.x == 0u;
    float _2341;
    float _2343;
    float _2345;
    if (_2239)
    {
        _2341 = _2231;
        _2343 = _2232;
        _2345 = _2233;
    }
    else
    {
        uint _2349 = _2163 + 6u;
        float _2365 = (dot(vec3(cbLight._m0[_2163 + 2u].xyz), vec3(_715, _716, _717)) * 0.5) + 0.5;
        float _2366 = _2365 * _2365;
        float _4412 = isnan(0.0) ? _2366 : (isnan(_2366) ? 0.0 : max(_2366, 0.0));
        float _2367 = isnan(1.0) ? _4412 : (isnan(_4412) ? 1.0 : min(_4412, 1.0));
        float _2368 = isnan(1.0) ? _2178 : (isnan(_2178) ? 1.0 : min(_2178, 1.0));
        _2341 = (((cbLight._m0[_2349].x * 0.3183098733425140380859375) * _2367) * _2368) + _2231;
        _2343 = (((cbLight._m0[_2349].y * 0.3183098733425140380859375) * _2367) * _2368) + _2232;
        _2345 = (((cbLight._m0[_2349].z * 0.3183098733425140380859375) * _2367) * _2368) + _2233;
    }
    bool _2348 = _2237.y == 0u;
    float _2403;
    float _2405;
    float _2407;
    if (_2348)
    {
        _2403 = _2341;
        _2405 = _2343;
        _2407 = _2345;
    }
    else
    {
        uint _2565 = _2163 + 7u;
        float _2581 = (dot(vec3(cbLight._m0[_2163 + 3u].xyz), vec3(_715, _716, _717)) * 0.5) + 0.5;
        float _2582 = _2581 * _2581;
        float _4428 = isnan(0.0) ? _2582 : (isnan(_2582) ? 0.0 : max(_2582, 0.0));
        float _2583 = isnan(1.0) ? _4428 : (isnan(_4428) ? 1.0 : min(_4428, 1.0));
        float _2584 = isnan(1.0) ? _2179 : (isnan(_2179) ? 1.0 : min(_2179, 1.0));
        _2403 = (((cbLight._m0[_2565].x * 0.3183098733425140380859375) * _2583) * _2584) + _2341;
        _2405 = (((cbLight._m0[_2565].y * 0.3183098733425140380859375) * _2583) * _2584) + _2343;
        _2407 = (((cbLight._m0[_2565].z * 0.3183098733425140380859375) * _2583) * _2584) + _2345;
    }
    uint _2410 = _2163 + 8u;
    float _2423 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2163].w)) * _718) * 0.949999988079071044921875);
    float _2424 = _2423 * _2423;
    float _2425 = cbLight._m0[_2163].x + _794;
    float _2426 = cbLight._m0[_2163].y + _795;
    float _2427 = cbLight._m0[_2163].z + _796;
    float _2431 = inversesqrt(dot(vec3(_2425, _2426, _2427), vec3(_2425, _2426, _2427)));
    float _2432 = _2431 * _2425;
    float _2433 = _2431 * _2426;
    float _2434 = _2431 * _2427;
    float _2435 = dot(vec3(_715, _716, _717), vec3(cbLight._m0[_2163].xyz));
    float _4444 = isnan(0.0) ? _2435 : (isnan(_2435) ? 0.0 : max(_2435, 0.0));
    float _2438 = isnan(1.0) ? _4444 : (isnan(_4444) ? 1.0 : min(_4444, 1.0));
    float _4455 = isnan(0.0) ? _866 : (isnan(_866) ? 0.0 : max(_866, 0.0));
    float _2439 = isnan(1.0) ? _4455 : (isnan(_4455) ? 1.0 : min(_4455, 1.0));
    float _2440 = dot(vec3(_715, _716, _717), vec3(_2432, _2433, _2434));
    float _4466 = isnan(0.0) ? _2440 : (isnan(_2440) ? 0.0 : max(_2440, 0.0));
    float _2443 = isnan(1.0) ? _4466 : (isnan(_4466) ? 1.0 : min(_4466, 1.0));
    float _2444 = dot(vec3(cbLight._m0[_2163].xyz), vec3(_2432, _2433, _2434));
    float _4477 = isnan(0.0) ? _2444 : (isnan(_2444) ? 0.0 : max(_2444, 0.0));
    float _2448 = _2424 * _2424;
    float _2452 = ((_2443 * _2443) * (_2448 + (-1.0))) + 1.0;
    float _2463 = (exp2(log2(1.0 - (isnan(1.0) ? _4477 : (isnan(_4477) ? 1.0 : min(_4477, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2464 = 1.0 - _2424;
    float _2475 = (0.5 / (((_2439 * ((_2438 * _2464) + _2424)) + 9.9999999392252902907785028219223e-09) + (((_2439 * _2464) + _2424) * _2438))) * _2438;
    float _4488 = isnan(0.0) ? _2475 : (isnan(_2475) ? 0.0 : max(_2475, 0.0));
    float _2477 = (isnan(1.0) ? _4488 : (isnan(_4488) ? 1.0 : min(_4488, 1.0))) * (_2448 / ((_2452 * _2452) * 3.141590118408203125));
    uint _2491 = _2163 + 9u;
    float _2502 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2203].w)) * _718) * 0.949999988079071044921875);
    float _2503 = _2502 * _2502;
    float _2504 = cbLight._m0[_2203].x + _794;
    float _2505 = cbLight._m0[_2203].y + _795;
    float _2506 = cbLight._m0[_2203].z + _796;
    float _2510 = inversesqrt(dot(vec3(_2504, _2505, _2506), vec3(_2504, _2505, _2506)));
    float _2511 = _2510 * _2504;
    float _2512 = _2510 * _2505;
    float _2513 = _2510 * _2506;
    float _2514 = dot(vec3(_715, _716, _717), vec3(cbLight._m0[_2203].xyz));
    float _4499 = isnan(0.0) ? _2514 : (isnan(_2514) ? 0.0 : max(_2514, 0.0));
    float _2517 = isnan(1.0) ? _4499 : (isnan(_4499) ? 1.0 : min(_4499, 1.0));
    float _2518 = dot(vec3(_715, _716, _717), vec3(_2511, _2512, _2513));
    float _4510 = isnan(0.0) ? _2518 : (isnan(_2518) ? 0.0 : max(_2518, 0.0));
    float _2521 = isnan(1.0) ? _4510 : (isnan(_4510) ? 1.0 : min(_4510, 1.0));
    float _2522 = dot(vec3(cbLight._m0[_2203].xyz), vec3(_2511, _2512, _2513));
    float _4521 = isnan(0.0) ? _2522 : (isnan(_2522) ? 0.0 : max(_2522, 0.0));
    float _2526 = _2503 * _2503;
    float _2530 = ((_2521 * _2521) * (_2526 + (-1.0))) + 1.0;
    float _2539 = (exp2(log2(1.0 - (isnan(1.0) ? _4521 : (isnan(_4521) ? 1.0 : min(_4521, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2540 = 1.0 - _2503;
    float _2550 = (0.5 / (((_2439 * ((_2517 * _2540) + _2503)) + 9.9999999392252902907785028219223e-09) + (((_2439 * _2540) + _2503) * _2517))) * _2517;
    float _4532 = isnan(0.0) ? _2550 : (isnan(_2550) ? 0.0 : max(_2550, 0.0));
    float _2552 = (isnan(1.0) ? _4532 : (isnan(_4532) ? 1.0 : min(_4532, 1.0))) * (_2526 / ((_2530 * _2530) * 3.141590118408203125));
    float _2562 = (((_2539 * cbLight._m0[_2491].x) * _2552) * _2186) + ((((cbLight._m0[_2410].x * _2152) * _2463) * _2477) * _2199);
    float _2563 = (((_2539 * cbLight._m0[_2491].y) * _2552) * _2186) + ((((cbLight._m0[_2410].y * _2154) * _2463) * _2477) * _2199);
    float _2564 = (((_2539 * cbLight._m0[_2491].z) * _2552) * _2186) + ((((cbLight._m0[_2410].z * _2156) * _2463) * _2477) * _2199);
    float _2620;
    float _2622;
    float _2624;
    if (_2239)
    {
        _2620 = _2562;
        _2622 = _2563;
        _2624 = _2564;
    }
    else
    {
        uint _2626 = _2163 + 2u;
        uint _2630 = _2163 + 10u;
        float _2644 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2626].w)) * _718) * 0.949999988079071044921875);
        float _2645 = _2644 * _2644;
        float _2646 = cbLight._m0[_2626].x + _794;
        float _2647 = cbLight._m0[_2626].y + _795;
        float _2648 = cbLight._m0[_2626].z + _796;
        float _2652 = inversesqrt(dot(vec3(_2646, _2647, _2648), vec3(_2646, _2647, _2648)));
        float _2653 = _2652 * _2646;
        float _2654 = _2652 * _2647;
        float _2655 = _2652 * _2648;
        float _2656 = dot(vec3(_715, _716, _717), vec3(cbLight._m0[_2626].xyz));
        float _4543 = isnan(0.0) ? _2656 : (isnan(_2656) ? 0.0 : max(_2656, 0.0));
        float _2659 = isnan(1.0) ? _4543 : (isnan(_4543) ? 1.0 : min(_4543, 1.0));
        float _2660 = dot(vec3(_715, _716, _717), vec3(_2653, _2654, _2655));
        float _4554 = isnan(0.0) ? _2660 : (isnan(_2660) ? 0.0 : max(_2660, 0.0));
        float _2663 = isnan(1.0) ? _4554 : (isnan(_4554) ? 1.0 : min(_4554, 1.0));
        float _2664 = dot(vec3(cbLight._m0[_2626].xyz), vec3(_2653, _2654, _2655));
        float _4565 = isnan(0.0) ? _2664 : (isnan(_2664) ? 0.0 : max(_2664, 0.0));
        float _2668 = _2645 * _2645;
        float _2672 = ((_2663 * _2663) * (_2668 + (-1.0))) + 1.0;
        float _2681 = (exp2(log2(1.0 - (isnan(1.0) ? _4565 : (isnan(_4565) ? 1.0 : min(_4565, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2682 = 1.0 - _2645;
        float _2692 = (0.5 / (((_2439 * ((_2659 * _2682) + _2645)) + 9.9999999392252902907785028219223e-09) + (((_2439 * _2682) + _2645) * _2659))) * _2659;
        float _4576 = isnan(0.0) ? _2692 : (isnan(_2692) ? 0.0 : max(_2692, 0.0));
        float _2694 = (isnan(1.0) ? _4576 : (isnan(_4576) ? 1.0 : min(_4576, 1.0))) * (_2668 / ((_2672 * _2672) * 3.141590118408203125));
        float _2695 = isnan(1.0) ? _2178 : (isnan(_2178) ? 1.0 : min(_2178, 1.0));
        _2620 = (((_2681 * cbLight._m0[_2630].x) * _2694) * _2695) + _2562;
        _2622 = (((_2681 * cbLight._m0[_2630].y) * _2694) * _2695) + _2563;
        _2624 = (((_2681 * cbLight._m0[_2630].z) * _2694) * _2695) + _2564;
    }
    float _2726;
    float _2728;
    float _2730;
    if (_2348)
    {
        _2726 = _2620;
        _2728 = _2622;
        _2730 = _2624;
    }
    else
    {
        uint _2737 = _2163 + 3u;
        uint _2741 = _2163 + 11u;
        float _2755 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2737].w)) * _718) * 0.949999988079071044921875);
        float _2756 = _2755 * _2755;
        float _2757 = cbLight._m0[_2737].x + _794;
        float _2758 = cbLight._m0[_2737].y + _795;
        float _2759 = cbLight._m0[_2737].z + _796;
        float _2763 = inversesqrt(dot(vec3(_2757, _2758, _2759), vec3(_2757, _2758, _2759)));
        float _2764 = _2763 * _2757;
        float _2765 = _2763 * _2758;
        float _2766 = _2763 * _2759;
        float _2767 = dot(vec3(_715, _716, _717), vec3(cbLight._m0[_2737].xyz));
        float _4592 = isnan(0.0) ? _2767 : (isnan(_2767) ? 0.0 : max(_2767, 0.0));
        float _2770 = isnan(1.0) ? _4592 : (isnan(_4592) ? 1.0 : min(_4592, 1.0));
        float _2771 = dot(vec3(_715, _716, _717), vec3(_2764, _2765, _2766));
        float _4603 = isnan(0.0) ? _2771 : (isnan(_2771) ? 0.0 : max(_2771, 0.0));
        float _2774 = isnan(1.0) ? _4603 : (isnan(_4603) ? 1.0 : min(_4603, 1.0));
        float _2775 = dot(vec3(cbLight._m0[_2737].xyz), vec3(_2764, _2765, _2766));
        float _4614 = isnan(0.0) ? _2775 : (isnan(_2775) ? 0.0 : max(_2775, 0.0));
        float _2779 = _2756 * _2756;
        float _2783 = ((_2774 * _2774) * (_2779 + (-1.0))) + 1.0;
        float _2792 = (exp2(log2(1.0 - (isnan(1.0) ? _4614 : (isnan(_4614) ? 1.0 : min(_4614, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2793 = 1.0 - _2756;
        float _2803 = (0.5 / (((_2439 * ((_2770 * _2793) + _2756)) + 9.9999999392252902907785028219223e-09) + (((_2439 * _2793) + _2756) * _2770))) * _2770;
        float _4625 = isnan(0.0) ? _2803 : (isnan(_2803) ? 0.0 : max(_2803, 0.0));
        float _2805 = (isnan(1.0) ? _4625 : (isnan(_4625) ? 1.0 : min(_4625, 1.0))) * (_2779 / ((_2783 * _2783) * 3.141590118408203125));
        float _2806 = isnan(1.0) ? _2179 : (isnan(_2179) ? 1.0 : min(_2179, 1.0));
        _2726 = (((_2792 * cbLight._m0[_2741].x) * _2805) * _2806) + _2620;
        _2728 = (((_2792 * cbLight._m0[_2741].y) * _2805) * _2806) + _2622;
        _2730 = (((_2792 * cbLight._m0[_2741].z) * _2805) * _2806) + _2624;
    }
    float _2872;
    float _2874;
    float _2876;
    float _2878;
    float _2880;
    float _2882;
    if (_2161.y == 0u)
    {
        uvec4 _2827 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2828 = _2827.x;
        uint _2839 = uint((float(_2827.y) * floor(float(uint(cbSceneParam._m0[85u].y * _803) / _2828))) + floor(float(uint(cbSceneParam._m0[85u].x * _802) / _2828)));
        float _2849 = (log2(_1939 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2850 = isnan(0.0) ? _2849 : (isnan(_2849) ? 0.0 : max(_2849, 0.0));
        uint _2853 = uint(isnan(14.0) ? _2850 : (isnan(_2850) ? 14.0 : min(_2850, 14.0)));
        uvec4 _2858 = texelFetch(g_lightClusterGridBuffer, int(((_2853 << 2u) + (_2839 << 6u)) >> 2u));
        uint _2859 = _2858.x;
        uint _2860 = _2827.z;
        float _2939;
        float _2941;
        float _2943;
        float _2945;
        float _2947;
        float _2949;
        if (((((1u << ((_2860 >> 4u) & 15u)) + 4294967295u) & _2859) == 0u) || ((_2860 & 240u) == 0u))
        {
            _2939 = 0.0;
            _2941 = 0.0;
            _2943 = 0.0;
            _2945 = 0.0;
            _2947 = 0.0;
            _2949 = 0.0;
        }
        else
        {
            float _2940;
            float _2942;
            float _2944;
            float _2946;
            float _2948;
            float _2950;
            float _3084 = 0.0;
            float _3085 = 0.0;
            float _3086 = 0.0;
            float _3087 = 0.0;
            float _3088 = 0.0;
            float _3089 = 0.0;
            uint _3090 = 0u;
            uint _3099;
            bool _3100;
            for (;;)
            {
                _3099 = texelFetch(g_lightClassification, int((((_2853 << 5u) + (_2839 << 9u)) + (_3090 << 2u)) >> 2u)).x;
                _3100 = _3099 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3100)
                {
                    frontier_phi_66_pred = _3089;
                    frontier_phi_66_pred_1 = _3088;
                    frontier_phi_66_pred_2 = _3087;
                    frontier_phi_66_pred_3 = _3086;
                    frontier_phi_66_pred_4 = _3085;
                    frontier_phi_66_pred_5 = _3084;
                }
                else
                {
                    float _3208;
                    float _3209;
                    float _3210;
                    float _3211;
                    float _3212;
                    float _3213;
                    uint _3214;
                    _3208 = _3084;
                    _3209 = _3085;
                    _3210 = _3086;
                    _3211 = _3087;
                    _3212 = _3088;
                    _3213 = _3089;
                    _3214 = _3099;
                    float _3140;
                    float _3141;
                    float _3142;
                    float _3143;
                    float _3144;
                    float _3145;
                    for (;;)
                    {
                        uint _3218 = uint(findLSB(_3214)) + (_3090 << 5u);
                        uint _3215 = (_3214 + 4294967295u) & _3214;
                        uint _3220 = _3218 * 48u;
                        vec4 _3234 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3220)).x, texelFetch(g_PointLightRenderingBuffer, int(_3220 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3220 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3220 + 3u)).x));
                        uint _3240 = (_3218 * 48u) + 4u;
                        vec4 _3253 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3240)).x, texelFetch(g_PointLightRenderingBuffer, int(_3240 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3240 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3240 + 3u)).x));
                        uint _3259 = (_3218 * 48u) + 8u;
                        vec3 _3270 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3259)).x, texelFetch(g_PointLightRenderingBuffer, int(_3259 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3259 + 2u)).x));
                        float _3274 = _3234.x - _1937;
                        float _3275 = _3234.y - _1938;
                        float _3276 = _3234.z - _1939;
                        float _3277 = dot(vec3(_3274, _3275, _3276), vec3(_3274, _3275, _3276));
                        float _3280 = inversesqrt(_3277);
                        float _3281 = _3280 * _3274;
                        float _3282 = _3280 * _3275;
                        float _3283 = _3280 * _3276;
                        float _3284 = dot(vec3(_821, _824, _827), vec3(_3281, _3282, _3283));
                        float _3289 = 1.0 - (_3277 * _3234.w);
                        float _4651 = isnan(0.0) ? _3289 : (isnan(_3289) ? 0.0 : max(_3289, 0.0));
                        float _3290 = isnan(1.0) ? _4651 : (isnan(_4651) ? 1.0 : min(_4651, 1.0));
                        float _3291 = sqrt(_3277) * _3253.w;
                        float _3294 = 1.39999997615814208984375 / (_3291 + 1.39999997615814208984375);
                        float _3295 = _3294 * _3294;
                        float _3298 = ((1.0 - _3295) * _3284) + _3295;
                        float _3301 = _3291 * _3291;
                        float _3305 = ((isnan(0.0) ? _3298 : (isnan(_3298) ? 0.0 : max(_3298, 0.0))) * _3290) / ((_3301 * 0.699999988079071044921875) + 1.0);
                        float _3309 = (-0.0) - _1937;
                        float _3310 = (-0.0) - _1938;
                        float _3311 = (-0.0) - _1939;
                        float _3315 = inversesqrt(dot(vec3(_3309, _3310, _3311), vec3(_3309, _3310, _3311)));
                        float _3316 = _3315 * _3309;
                        float _3317 = _3315 * _3310;
                        float _3318 = _3315 * _3311;
                        float _3325 = exp2(log2(1.0 / ((_3301 * 3.5) + 5.0)) * 0.25);
                        float _3326 = 1.0 - _881;
                        float _3333 = sqrt(1.0 - ((1.0 - (_3326 * _3326)) * (1.0 - (_3325 * _3325))));
                        float _3334 = _3333 * _3333;
                        float _3335 = _3334 * _3334;
                        float _3336 = _3316 + _3281;
                        float _3337 = _3317 + _3282;
                        float _3338 = _3318 + _3283;
                        float _3342 = inversesqrt(dot(vec3(_3336, _3337, _3338), vec3(_3336, _3337, _3338)));
                        float _3346 = dot(vec3(_821, _824, _827), vec3(_3316, _3317, _3318));
                        float _4667 = isnan(0.0) ? _3346 : (isnan(_3346) ? 0.0 : max(_3346, 0.0));
                        float _3349 = isnan(1.0) ? _4667 : (isnan(_4667) ? 1.0 : min(_4667, 1.0));
                        float _3350 = dot(vec3(_821, _824, _827), vec3(_3342 * _3336, _3342 * _3337, _3342 * _3338));
                        float _4678 = isnan(0.0) ? _3350 : (isnan(_3350) ? 0.0 : max(_3350, 0.0));
                        float _3353 = isnan(1.0) ? _4678 : (isnan(_4678) ? 1.0 : min(_4678, 1.0));
                        float _3357 = ((_3353 * _3353) * (_3335 + (-1.0))) + 1.0;
                        float _3358 = _3294 * _3334;
                        float _3359 = _3358 * _3358;
                        float _3362 = ((1.0 - _3359) * _3284) + _3359;
                        float _4689 = isnan(0.0) ? _3362 : (isnan(_3362) ? 0.0 : max(_3362, 0.0));
                        float _3363 = isnan(1.0) ? _4689 : (isnan(_4689) ? 1.0 : min(_4689, 1.0));
                        float _3364 = 1.0 - _3334;
                        float _3374 = (0.5 / (((_3363 * ((_3349 * _3364) + _3334)) + 9.9999999392252902907785028219223e-09) + (((_3363 * _3364) + _3334) * _3349))) * _3363;
                        float _4700 = isnan(0.0) ? _3374 : (isnan(_3374) ? 0.0 : max(_3374, 0.0));
                        float _3385 = (((_3335 * 3.1415927410125732421875) * (isnan(1.0) ? _4700 : (isnan(_4700) ? 1.0 : min(_4700, 1.0)))) / ((_3357 * _3357) * ((_3301 * 2.1991131305694580078125) + 3.141590118408203125))) * _3290;
                        _3143 = (_3305 * _3253.x) + _3211;
                        _3144 = (_3305 * _3253.y) + _3212;
                        _3145 = (_3305 * _3253.z) + _3213;
                        _3140 = (_3385 * _3270.x) + _3208;
                        _3141 = (_3385 * _3270.y) + _3209;
                        _3142 = (_3385 * _3270.z) + _3210;
                        if (_3215 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3208 = _3140;
                            _3209 = _3141;
                            _3210 = _3142;
                            _3211 = _3143;
                            _3212 = _3144;
                            _3213 = _3145;
                            _3214 = _3215;
                        }
                    }
                    frontier_phi_66_pred = _3145;
                    frontier_phi_66_pred_1 = _3144;
                    frontier_phi_66_pred_2 = _3143;
                    frontier_phi_66_pred_3 = _3142;
                    frontier_phi_66_pred_4 = _3141;
                    frontier_phi_66_pred_5 = _3140;
                }
                _2950 = frontier_phi_66_pred;
                _2948 = frontier_phi_66_pred_1;
                _2946 = frontier_phi_66_pred_2;
                _2944 = frontier_phi_66_pred_3;
                _2942 = frontier_phi_66_pred_4;
                _2940 = frontier_phi_66_pred_5;
                uint _3091 = _3090 + 1u;
                if (_3091 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3084 = _2940;
                    _3085 = _2942;
                    _3086 = _2944;
                    _3087 = _2946;
                    _3088 = _2948;
                    _3089 = _2950;
                    _3090 = _3091;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2939 = _2940;
            _2941 = _2942;
            _2943 = _2944;
            _2945 = _2946;
            _2947 = _2948;
            _2949 = _2950;
        }
        uvec4 _2953 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2954 = _2953.z;
        uint _2956 = (_2954 >> 8u) & 15u;
        float _3052;
        float _3054;
        float _3056;
        float _3058;
        float _3060;
        float _3062;
        if (((4294967295u << _2956) & _2859) == 0u)
        {
            _3052 = _2939;
            _3054 = _2941;
            _3056 = _2943;
            _3058 = _2945;
            _3060 = _2947;
            _3062 = _2949;
        }
        else
        {
            float _3077 = inversesqrt(dot(vec3(_1937, _1938, _1939), vec3(_1937, _1938, _1939)));
            float _3078 = _3077 * _1937;
            float _3079 = _3077 * _1938;
            float _3080 = _3077 * _1939;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2956 < ((_2954 >> 12u) & 15u))
            {
                float _3053;
                float _3055;
                float _3057;
                float _3059;
                float _3061;
                float _3063;
                float _3191 = _2939;
                float _3192 = _2941;
                float _3193 = _2943;
                float _3194 = _2945;
                float _3195 = _2947;
                float _3196 = _2949;
                uint _3197 = _2956;
                uint _3206;
                bool _3207;
                for (;;)
                {
                    _3206 = texelFetch(g_lightClassification, int((((_2853 << 5u) + (_2839 << 9u)) + (_3197 << 2u)) >> 2u)).x;
                    _3207 = _3206 == 0u;
                    float frontier_phi_72_pred;
                    float frontier_phi_72_pred_1;
                    float frontier_phi_72_pred_2;
                    float frontier_phi_72_pred_3;
                    float frontier_phi_72_pred_4;
                    float frontier_phi_72_pred_5;
                    if (_3207)
                    {
                        frontier_phi_72_pred = _3196;
                        frontier_phi_72_pred_1 = _3195;
                        frontier_phi_72_pred_2 = _3194;
                        frontier_phi_72_pred_3 = _3193;
                        frontier_phi_72_pred_4 = _3192;
                        frontier_phi_72_pred_5 = _3191;
                    }
                    else
                    {
                        float _3390;
                        float _3391;
                        float _3392;
                        float _3393;
                        float _3394;
                        float _3395;
                        float _3683;
                        float _3684;
                        float _3685;
                        float _3686;
                        float _3687;
                        float _3688;
                        float _3403 = _3191;
                        float _3404 = _3192;
                        float _3405 = _3193;
                        float _3406 = _3194;
                        float _3407 = _3195;
                        float _3408 = _3196;
                        uint _3409 = _3206;
                        uint _3410;
                        vec4 _3435;
                        float _3436;
                        vec4 _3451;
                        vec3 _3463;
                        vec4 _3478;
                        vec4 _3493;
                        float _3539;
                        bool _3540;
                        for (;;)
                        {
                            uint _3420 = ((_3197 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3409));
                            _3410 = (_3409 + 4294967295u) & _3409;
                            uint _3422 = _3420 * 40u;
                            _3435 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3422)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3422 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3422 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3422 + 3u)).x));
                            _3436 = _3435.w;
                            uint _3438 = (_3420 * 40u) + 4u;
                            _3451 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3438)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3438 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3438 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3438 + 3u)).x));
                            uint _3453 = (_3420 * 40u) + 8u;
                            _3463 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3453)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3453 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3453 + 2u)).x));
                            uint _3465 = (_3420 * 40u) + 16u;
                            _3478 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3465)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3465 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3465 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3465 + 3u)).x));
                            uint _3480 = (_3420 * 40u) + 20u;
                            _3493 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3480)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3480 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3480 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3480 + 3u)).x));
                            uint _3495 = (_3420 * 40u) + 24u;
                            vec4 _3508 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3495)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3495 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3495 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3495 + 3u)).x));
                            uint _3514 = (_3420 * 40u) + 28u;
                            vec4 _3527 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3514)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3514 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3514 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3514 + 3u)).x));
                            _3539 = fma(_1939, _3527.z, fma(_1938, _3527.y, _3527.x * _1937)) + _3527.w;
                            _3540 = !((fma(_1939, _3508.z, fma(_1938, _3508.y, _3508.x * _1937)) + _3508.w) <= 0.0);
                            float frontier_phi_78_pred;
                            float frontier_phi_78_pred_1;
                            float frontier_phi_78_pred_2;
                            float frontier_phi_78_pred_3;
                            float frontier_phi_78_pred_4;
                            float frontier_phi_78_pred_5;
                            if (_3540)
                            {
                                float _3567 = _3435.x - _1937;
                                float _3568 = _3435.y - _1938;
                                float _3569 = _3435.z - _1939;
                                float _3570 = dot(vec3(_3567, _3568, _3569), vec3(_3567, _3568, _3569));
                                float _3573 = inversesqrt(_3570);
                                float _3574 = _3573 * _3567;
                                float _3575 = _3573 * _3568;
                                float _3576 = _3573 * _3569;
                                float _3580 = 1.0 - (_3570 / (_3436 * _3436));
                                float _4711 = isnan(0.0) ? _3580 : (isnan(_3580) ? 0.0 : max(_3580, 0.0));
                                float _3581 = isnan(1.0) ? _4711 : (isnan(_4711) ? 1.0 : min(_4711, 1.0));
                                float _3585 = sqrt(_3570) * _3451.w;
                                float _3587 = 1.39999997615814208984375 / (_3585 + 1.39999997615814208984375);
                                float _3588 = _3587 * _3587;
                                float _3591 = ((1.0 - _3588) * dot(vec3(_3574, _3575, _3576), vec3(_821, _824, _827))) + _3588;
                                float _3594 = _3585 * _3585;
                                float _3598 = (fma(_1939, _3478.z, fma(_1938, _3478.y, _3478.x * _1937)) + _3478.w) / _3539;
                                float _3599 = (fma(_1939, _3493.z, fma(_1938, _3493.y, _3493.x * _1937)) + _3493.w) / _3539;
                                float _3603 = 1.0 - dot(vec2(_3598, _3599), vec2(_3598, _3599));
                                float _4727 = isnan(0.0) ? _3603 : (isnan(_3603) ? 0.0 : max(_3603, 0.0));
                                float _3604 = isnan(1.0) ? _4727 : (isnan(_4727) ? 1.0 : min(_4727, 1.0));
                                float _3605 = _3604 * (((isnan(0.0) ? _3591 : (isnan(_3591) ? 0.0 : max(_3591, 0.0))) * _3581) / ((_3594 * 0.699999988079071044921875) + 1.0));
                                float _3617 = exp2(log2(1.0 / ((_3594 * 3.5) + 5.0)) * 0.25);
                                float _3618 = 1.0 - _881;
                                float _3625 = sqrt(1.0 - ((1.0 - (_3618 * _3618)) * (1.0 - (_3617 * _3617))));
                                float _3626 = _3625 * _3625;
                                float _3627 = _3626 * _3626;
                                float _3628 = _3574 - _3078;
                                float _3629 = _3575 - _3079;
                                float _3630 = _3576 - _3080;
                                float _3634 = inversesqrt(dot(vec3(_3628, _3629, _3630), vec3(_3628, _3629, _3630)));
                                float _3638 = dot(vec3(_821, _824, _827), vec3((-0.0) - _3078, (-0.0) - _3079, (-0.0) - _3080));
                                float _4738 = isnan(0.0) ? _3638 : (isnan(_3638) ? 0.0 : max(_3638, 0.0));
                                float _3641 = isnan(1.0) ? _4738 : (isnan(_4738) ? 1.0 : min(_4738, 1.0));
                                float _3642 = dot(vec3(_821, _824, _827), vec3(_3634 * _3628, _3634 * _3629, _3634 * _3630));
                                float _4749 = isnan(0.0) ? _3642 : (isnan(_3642) ? 0.0 : max(_3642, 0.0));
                                float _3645 = isnan(1.0) ? _4749 : (isnan(_4749) ? 1.0 : min(_4749, 1.0));
                                float _3649 = ((_3645 * _3645) * (_3627 + (-1.0))) + 1.0;
                                float _3650 = _3587 * _3626;
                                float _3651 = _3650 * _3650;
                                float _3657 = ((1.0 - _3651) * dot(vec3(_821, _824, _827), vec3(_3574, _3575, _3576))) + _3651;
                                float _4760 = isnan(0.0) ? _3657 : (isnan(_3657) ? 0.0 : max(_3657, 0.0));
                                float _3658 = isnan(1.0) ? _4760 : (isnan(_4760) ? 1.0 : min(_4760, 1.0));
                                float _3659 = 1.0 - _3626;
                                float _3669 = (0.5 / (((_3658 * ((_3641 * _3659) + _3626)) + 9.9999999392252902907785028219223e-09) + (((_3658 * _3659) + _3626) * _3641))) * _3658;
                                float _4771 = isnan(0.0) ? _3669 : (isnan(_3669) ? 0.0 : max(_3669, 0.0));
                                float _3679 = (_3604 * _3581) * (((_3627 * 3.1415927410125732421875) * (isnan(1.0) ? _4771 : (isnan(_4771) ? 1.0 : min(_4771, 1.0)))) / ((_3649 * _3649) * ((_3594 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_78_pred = _3605 * _3451.y;
                                frontier_phi_78_pred_1 = _3605 * _3451.x;
                                frontier_phi_78_pred_2 = _3679 * _3463.z;
                                frontier_phi_78_pred_3 = _3679 * _3463.y;
                                frontier_phi_78_pred_4 = _3679 * _3463.x;
                                frontier_phi_78_pred_5 = _3605 * _3451.z;
                            }
                            else
                            {
                                frontier_phi_78_pred = 0.0;
                                frontier_phi_78_pred_1 = 0.0;
                                frontier_phi_78_pred_2 = 0.0;
                                frontier_phi_78_pred_3 = 0.0;
                                frontier_phi_78_pred_4 = 0.0;
                                frontier_phi_78_pred_5 = 0.0;
                            }
                            _3687 = frontier_phi_78_pred;
                            _3686 = frontier_phi_78_pred_1;
                            _3685 = frontier_phi_78_pred_2;
                            _3684 = frontier_phi_78_pred_3;
                            _3683 = frontier_phi_78_pred_4;
                            _3688 = frontier_phi_78_pred_5;
                            _3393 = _3686 + _3406;
                            _3394 = _3687 + _3407;
                            _3395 = _3688 + _3408;
                            _3390 = _3683 + _3403;
                            _3391 = _3684 + _3404;
                            _3392 = _3685 + _3405;
                            if (_3410 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3403 = _3390;
                                _3404 = _3391;
                                _3405 = _3392;
                                _3406 = _3393;
                                _3407 = _3394;
                                _3408 = _3395;
                                _3409 = _3410;
                                continue;
                            }
                        }
                        frontier_phi_72_pred = _3395;
                        frontier_phi_72_pred_1 = _3394;
                        frontier_phi_72_pred_2 = _3393;
                        frontier_phi_72_pred_3 = _3392;
                        frontier_phi_72_pred_4 = _3391;
                        frontier_phi_72_pred_5 = _3390;
                    }
                    _3063 = frontier_phi_72_pred;
                    _3061 = frontier_phi_72_pred_1;
                    _3059 = frontier_phi_72_pred_2;
                    _3057 = frontier_phi_72_pred_3;
                    _3055 = frontier_phi_72_pred_4;
                    _3053 = frontier_phi_72_pred_5;
                    uint _3198 = _3197 + 1u;
                    if (_3198 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3191 = _3053;
                        _3192 = _3055;
                        _3193 = _3057;
                        _3194 = _3059;
                        _3195 = _3061;
                        _3196 = _3063;
                        _3197 = _3198;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _3063;
                frontier_phi_60_61_ladder_1 = _3061;
                frontier_phi_60_61_ladder_2 = _3057;
                frontier_phi_60_61_ladder_3 = _3055;
                frontier_phi_60_61_ladder_4 = _3053;
                frontier_phi_60_61_ladder_5 = _3059;
            }
            else
            {
                frontier_phi_60_61_ladder = _2949;
                frontier_phi_60_61_ladder_1 = _2947;
                frontier_phi_60_61_ladder_2 = _2943;
                frontier_phi_60_61_ladder_3 = _2941;
                frontier_phi_60_61_ladder_4 = _2939;
                frontier_phi_60_61_ladder_5 = _2945;
            }
            _3052 = frontier_phi_60_61_ladder_4;
            _3054 = frontier_phi_60_61_ladder_3;
            _3056 = frontier_phi_60_61_ladder_2;
            _3058 = frontier_phi_60_61_ladder_5;
            _3060 = frontier_phi_60_61_ladder_1;
            _3062 = frontier_phi_60_61_ladder;
        }
        float _3067 = isnan(1.0) ? _865 : (isnan(_865) ? 1.0 : min(_865, 1.0));
        _2872 = (_3067 * _3058) + _2403;
        _2874 = (_3067 * _3060) + _2405;
        _2876 = (_3067 * _3062) + _2407;
        _2878 = ((_3052 * 0.039999999105930328369140625) * _3067) + _2726;
        _2880 = ((_3054 * 0.039999999105930328369140625) * _3067) + _2728;
        _2882 = ((_3056 * 0.039999999105930328369140625) * _3067) + _2730;
    }
    else
    {
        _2872 = _2403;
        _2874 = _2405;
        _2876 = _2407;
        _2878 = _2726;
        _2880 = _2728;
        _2882 = _2730;
    }
    float _4787 = isnan(0.0) ? _850 : (isnan(_850) ? 0.0 : max(_850, 0.0));
    float _4798 = isnan(0.0) ? _851 : (isnan(_851) ? 0.0 : max(_851, 0.0));
    float _4809 = isnan(0.0) ? _852 : (isnan(_852) ? 0.0 : max(_852, 0.0));
    uint _2902 = _249 + 6u;
    float _2910 = _802 / cbSceneParam._m0[86u].x;
    float _2911 = _803 / cbSceneParam._m0[86u].y;
    vec4 _2925 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2910, _2911, (log2((isnan(cbSceneParam._m0[77u].w) ? _736 : (isnan(_736) ? cbSceneParam._m0[77u].w : min(_736, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2927 = _2925.x;
    float _2928 = _2925.y;
    float _2929 = _2925.z;
    float _2930 = _2925.w;
    float _3002;
    float _3004;
    float _3006;
    float _3008;
    if (_736 > cbSceneParam._m0[78u].w)
    {
        float _2964 = isnan(_736) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _736 : min(cbSceneParam._m0[80u].w, _736));
        float _2965 = _2964 / _736;
        float _2976 = _2965 * _787;
        float _2977 = _788 * _2965;
        float _2978 = (-0.0) - _2977;
        float _2980 = _2965 * _789;
        float _2982 = (cbSceneParam._m0[77u].w * _2978) / _2964;
        float _2983 = _2982 + cbSceneParam._m0[79u].w;
        float _2984 = cbSceneParam._m0[79u].w - _2977;
        float _2990 = sqrt(((_2976 * _2976) + (_2977 * _2977)) + (_2980 * _2980));
        float _2993 = (1.0 - (cbSceneParam._m0[77u].w / _2964)) * _2990;
        float _2998 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3000 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3153;
        if (abs((_2978 - _2982) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3153 = ((((_2983 > 0.0) ? exp2(_2998 * _2983) : (2.0 - exp2(_3000 * _2983))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2993;
        }
        else
        {
            float _3113 = 1.0 / cbSceneParam._m0[80u].x;
            float _3114 = isnan(_2984) ? _2983 : (isnan(_2983) ? _2984 : max(_2983, _2984));
            float _3115 = isnan(_2984) ? _2983 : (isnan(_2983) ? _2984 : min(_2983, _2984));
            float _3124 = isnan(0.0) ? _3114 : (isnan(_3114) ? 0.0 : min(_3114, 0.0));
            float _3125 = isnan(0.0) ? _3115 : (isnan(_3115) ? 0.0 : min(_3115, 0.0));
            _3153 = ((abs(_2990 / _2978) * cbSceneParam._m0[80u].y) * ((((_3124 - _3125) * 2.0) - ((exp2(_2998 * (isnan(0.0) ? _3114 : (isnan(_3114) ? 0.0 : max(_3114, 0.0)))) - exp2(_2998 * (isnan(0.0) ? _3115 : (isnan(_3115) ? 0.0 : max(_3115, 0.0))))) * _3113)) - ((exp2(_3000 * _3124) - exp2(_3000 * _3125)) * _3113))) + (_2993 * cbSceneParam._m0[80u].z);
        }
        vec4 _3155 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2910, _2911, 1.0), 0.0);
        float _3164 = exp2((_3153 * (-1.44269502162933349609375)) * (1.0 - _3155.w));
        float _3165 = log2(_3164);
        float _3181 = log2(_2930);
        _3002 = (exp2(_3181 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3165 * cbSceneParam._m0[78u].x)) * _3155.x) / cbSceneParam._m0[78u].x)) + _2927;
        _3004 = (exp2(_3181 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3165 * cbSceneParam._m0[78u].y)) * _3155.y) / cbSceneParam._m0[78u].y)) + _2928;
        _3006 = (exp2(_3181 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3165 * cbSceneParam._m0[78u].z)) * _3155.z) / cbSceneParam._m0[78u].z)) + _2929;
        _3008 = _3164 * _2930;
    }
    else
    {
        _3002 = _2927;
        _3004 = _2928;
        _3006 = _2929;
        _3008 = _2930;
    }
    float _3020 = roundEven(cbMatDynParam._m0[0u].y);
    bool _3021 = _3020 == 3.0;
    float _3022 = log2(_3008);
    float _3029 = exp2(_3022 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4787 : (isnan(_4787) ? 1.0 : min(_4787, 1.0))) * (_2872 + ((isnan(0.0) ? _1590 : (isnan(_1590) ? 0.0 : max(_1590, 0.0))) * _865))) + ((_2878 + ((isnan(0.0) ? _1884 : (isnan(_1884) ? 0.0 : max(_1884, 0.0))) * _1669)) * cbPerFrame._m0[3u].x));
    float _3030 = exp2(_3022 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4798 : (isnan(_4798) ? 1.0 : min(_4798, 1.0))) * (_2874 + ((isnan(0.0) ? _1593 : (isnan(_1593) ? 0.0 : max(_1593, 0.0))) * _865))) + ((_2880 + ((isnan(0.0) ? _1887 : (isnan(_1887) ? 0.0 : max(_1887, 0.0))) * _1669)) * cbPerFrame._m0[3u].x));
    float _3031 = exp2(_3022 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4809 : (isnan(_4809) ? 1.0 : min(_4809, 1.0))) * (_2876 + ((isnan(0.0) ? _1596 : (isnan(_1596) ? 0.0 : max(_1596, 0.0))) * _865))) + ((_2882 + ((isnan(0.0) ? _1890 : (isnan(_1890) ? 0.0 : max(_1890, 0.0))) * _1669)) * cbPerFrame._m0[3u].x));
    float _3040 = (_3020 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _3040 * (_3021 ? _3029 : (_3029 + (cbSceneParam._m0[72u].w * _3002)));
    SV_Target.y = _3040 * (_3021 ? _3030 : (_3030 + (cbSceneParam._m0[72u].w * _3004)));
    SV_Target.z = _3040 * (_3021 ? _3031 : (_3031 + (cbSceneParam._m0[72u].w * _3006)));
    SV_Target.w = cbInstanceData._m0[_2902].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2902].w;
}


