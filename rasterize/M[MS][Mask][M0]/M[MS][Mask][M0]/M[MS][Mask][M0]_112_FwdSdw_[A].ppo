#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_0;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_10;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_6;
layout(set = 0, binding = 23) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_8;
layout(set = 0, binding = 24) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_9;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1400;
float _4040;
float _4041;
float _4042;
float _4043;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _224 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _225 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _226 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _232 = inversesqrt(dot(vec3(_224, _225, _226), vec3(_224, _225, _226)));
    float _239 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _246 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _252 = uint(roundEven(NORMAL.w)) * 13u;
    uint _258 = _252 + 1u;
    uint _262 = _252 + 2u;
    float _271 = sqrt(((cbInstanceData._m0[_258].x * cbInstanceData._m0[_258].x) + (cbInstanceData._m0[_252].x * cbInstanceData._m0[_252].x)) + (cbInstanceData._m0[_262].x * cbInstanceData._m0[_262].x));
    float _272 = _271 * TEXCOORD.z;
    float _273 = _271 * TEXCOORD.w;
    vec4 _292 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _316 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _321 = _316.x * cbMtdParam._m0[11u].x;
    float _322 = _316.y * cbMtdParam._m0[11u].y;
    float _323 = _316.z * cbMtdParam._m0[11u].z;
    vec4 _342 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _272) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _273) + cbTextureTilingScale._m0[5u].w));
    vec4 _362 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _402 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _404 = _402.x;
    float _416 = dot(vec4(_404, _402.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _433 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _362.x) * 2.0) - ((((_404 - _416) * cbMtdParam._m0[24u].z) + _416) * cbMtdParam._m0[23u].x))) + 1.0;
    float _4052 = isnan(0.0) ? _433 : (isnan(_433) ? 0.0 : max(_433, 0.0));
    float _434 = isnan(1.0) ? _4052 : (isnan(_4052) ? 1.0 : min(_4052, 1.0));
    float _441 = (_434 * ((_342.x * cbMtdParam._m0[12u].x) - _321)) + _321;
    float _442 = (_434 * ((_342.y * cbMtdParam._m0[12u].y) - _322)) + _322;
    float _443 = (_434 * ((_342.z * cbMtdParam._m0[12u].z) - _323)) + _323;
    vec4 _460 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _272) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _273) + cbTextureTilingScale._m0[3u].w));
    vec4 _480 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _482 = _480.x;
    float _492 = dot(vec4(_482, _480.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _506 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _362.y) * 2.0) - ((((_482 - _492) * cbMtdParam._m0[24u].z) + _492) * cbMtdParam._m0[20u].w))) + 1.0;
    float _4063 = isnan(0.0) ? _506 : (isnan(_506) ? 0.0 : max(_506, 0.0));
    float _507 = isnan(1.0) ? _4063 : (isnan(_4063) ? 1.0 : min(_4063, 1.0));
    float _514 = (_507 * ((_460.x * cbMtdParam._m0[13u].x) - _441)) + _441;
    float _515 = (_507 * ((_460.y * cbMtdParam._m0[13u].y) - _442)) + _442;
    float _516 = (_507 * ((_460.z * cbMtdParam._m0[13u].z) - _443)) + _443;
    vec4 _534 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_9, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[24u].x * _272) + cbTextureTilingScale._m0[24u].z, (cbTextureTilingScale._m0[24u].y * _273) + cbTextureTilingScale._m0[24u].w));
    vec4 _551 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[25u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _553 = _551.x;
    float _563 = dot(vec4(_553, _551.yzw), vec4(cbMtdParam._m0[30u].w, cbMtdParam._m0[31u].xy, 0.0));
    float _575 = ((cbMtdParam._m0[25u].x * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.z) - _362.z) * 2.0) - ((((_553 - _563) * cbMtdParam._m0[24u].z) + _563) * cbMtdParam._m0[20u].z))) + 1.0;
    float _4074 = isnan(0.0) ? _575 : (isnan(_575) ? 0.0 : max(_575, 0.0));
    float _576 = isnan(1.0) ? _4074 : (isnan(_4074) ? 1.0 : min(_4074, 1.0));
    float _589 = ((cbMtdParam._m0[9u].x * 4.55000019073486328125) * _292.x) * ((_576 * ((_534.x * cbMtdParam._m0[14u].x) - _514)) + _514);
    float _592 = ((cbMtdParam._m0[9u].y * 4.55000019073486328125) * _292.y) * ((_576 * ((_534.y * cbMtdParam._m0[14u].y) - _515)) + _515);
    float _595 = ((cbMtdParam._m0[9u].z * 4.55000019073486328125) * _292.z) * ((_576 * ((_534.z * cbMtdParam._m0[14u].z) - _516)) + _516);
    vec4 _613 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _272) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _273) + cbTextureTilingScale._m0[4u].w));
    vec4 _630 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _632 = _630.x;
    float _633 = _630.y;
    float _634 = _630.z;
    float _641 = ((_613.x - _632) * _434) + _632;
    float _642 = ((_613.y - _633) * _434) + _633;
    float _643 = ((_613.z - _634) * _434) + _634;
    vec4 _655 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _272) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _273) + cbTextureTilingScale._m0[2u].w));
    float _666 = ((_655.x - _641) * _507) + _641;
    float _667 = ((_655.y - _642) * _507) + _642;
    float _668 = ((_655.z - _643) * _507) + _643;
    vec4 _680 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[23u].x * _272) + cbTextureTilingScale._m0[23u].z, (cbTextureTilingScale._m0[23u].y * _273) + cbTextureTilingScale._m0[23u].w));
    float _693 = ((_680.z - _668) * _576) + _668;
    float _696 = ((((_680.x - _666) * _576) + _666) * 2.0) + (-1.0);
    float _698 = ((((_680.y - _667) * _576) + _667) * 2.0) + (-1.0);
    float _699 = dot(vec2(_696, _698), vec2(_696, _698));
    float _4085 = isnan(0.0) ? _699 : (isnan(_699) ? 0.0 : max(_699, 0.0));
    float _704 = sqrt(1.0 - (isnan(1.0) ? _4085 : (isnan(_4085) ? 1.0 : min(_4085, 1.0))));
    vec4 _718 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _743 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _272) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _273) + cbTextureTilingScale._m0[11u].w));
    float _745 = _743.x;
    float _746 = 1.0 - _745;
    float _759 = (TEXCOORD_8.w - ((cbMtdParam._m0[21u].z * (1.0 - TEXCOORD_8.w)) * ((((_745 - _746) * cbMtdParam._m0[24u].w) + _746) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[21u].w + 1.0);
    float _4096 = isnan(0.0) ? _759 : (isnan(_759) ? 0.0 : max(_759, 0.0));
    float _760 = isnan(1.0) ? _4096 : (isnan(_4096) ? 1.0 : min(_4096, 1.0));
    float _767 = (_760 * (cbMtdParam._m0[17u].x - _589)) + _589;
    float _768 = (_760 * (cbMtdParam._m0[17u].y - _592)) + _592;
    float _769 = (_760 * (cbMtdParam._m0[17u].z - _595)) + _595;
    float _773 = (cbMtdParam._m0[19u].w * (_718.z - _693)) + _693;
    vec4 _786 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _272) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _273) + cbTextureTilingScale._m0[15u].w));
    float _793 = (_786.x * 2.0) + (-1.0);
    float _794 = (_786.y * 2.0) + (-1.0);
    float _795 = dot(vec2(_793, _794), vec2(_793, _794));
    float _4107 = isnan(0.0) ? _795 : (isnan(_795) ? 0.0 : max(_795, 0.0));
    float _803 = (_760 * (_786.z - _773)) + _773;
    float _806 = (((_718.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _696;
    float _807 = (((_718.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _698;
    float _819 = (((_793 - _806) + (cbMtdParam._m0[21u].x * _806)) * _760) + _806;
    float _820 = (((_794 - _807) + (cbMtdParam._m0[21u].x * _807)) * _760) + _807;
    float _821 = (_760 * (sqrt(1.0 - (isnan(1.0) ? _4107 : (isnan(_4107) ? 1.0 : min(_4107, 1.0)))) - _704)) + _704;
    float _825 = cbMtdParam._m0[22u].x + _718.w;
    float _828 = fma(_821, _239 * NORMAL.x, fma(_820, _246 * TANGENT.x, (_232 * _224) * _819));
    float _831 = fma(_821, _239 * NORMAL.y, fma(_820, _246 * TANGENT.y, (_232 * _225) * _819));
    float _834 = fma(_821, _239 * NORMAL.z, fma(_820, _246 * TANGENT.z, (_232 * _226) * _819));
    float _838 = inversesqrt(dot(vec3(_828, _831, _834), vec3(_828, _831, _834)));
    float _839 = _838 * _828;
    float _840 = _838 * _831;
    float _841 = _838 * _834;
    float _4118 = isnan(0.0) ? _803 : (isnan(_803) ? 0.0 : max(_803, 0.0));
    float _842 = isnan(1.0) ? _4118 : (isnan(_4118) ? 1.0 : min(_4118, 1.0));
    float _4129 = isnan(0.0) ? _825 : (isnan(_825) ? 0.0 : max(_825, 0.0));
    float _4140 = isnan(0.0) ? _767 : (isnan(_767) ? 0.0 : max(_767, 0.0));
    float _4151 = isnan(0.0) ? _768 : (isnan(_768) ? 0.0 : max(_768, 0.0));
    float _4162 = isnan(0.0) ? _769 : (isnan(_769) ? 0.0 : max(_769, 0.0));
    float _860 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _901 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _911 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _901);
    float _912 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _901);
    float _913 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _901);
    float _917 = inversesqrt(dot(vec3(_911, _912, _913), vec3(_911, _912, _913)));
    float _918 = _911 * _917;
    float _919 = _912 * _917;
    float _920 = _913 * _917;
    vec4 _925 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _927 = _925.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1081 = sqrt(((_911 * _911) + (_912 * _912)) + (_913 * _913));
        float _1087 = (cbMatDynParam._m0[5u].x * _1081) + cbMatDynParam._m0[5u].y;
        float _4173 = isnan(0.0) ? _1087 : (isnan(_1087) ? 0.0 : max(_1087, 0.0));
        float _1088 = isnan(1.0) ? _4173 : (isnan(_4173) ? 1.0 : min(_4173, 1.0));
        float _1092 = (cbMatDynParam._m0[5u].z * _1081) + cbMatDynParam._m0[5u].w;
        float _4184 = isnan(0.0) ? _1092 : (isnan(_1092) ? 0.0 : max(_1092, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4184 : (isnan(_4184) ? 1.0 : min(_4184, 1.0))) - _1088)) + _1088) < ((_927 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _938 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _939 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _957 = fma(_841, cbSceneParam._m0[5u].z, fma(_840, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _839));
    float _960 = fma(_841, cbSceneParam._m0[6u].z, fma(_840, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _839));
    float _963 = fma(_841, cbSceneParam._m0[7u].z, fma(_840, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _839));
    uint _976 = _252 + 9u;
    uint _977 = _976 + uint(cbMatDynParam._m0[0u].w);
    float _983 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4140 : (isnan(_4140) ? 1.0 : min(_4140, 1.0)))) * cbInstanceData._m0[_977].x;
    float _984 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4151 : (isnan(_4151) ? 1.0 : min(_4151, 1.0)))) * cbInstanceData._m0[_977].y;
    float _985 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4162 : (isnan(_4162) ? 1.0 : min(_4162, 1.0)))) * cbInstanceData._m0[_977].z;
    float _4195 = isnan(0.0) ? _983 : (isnan(_983) ? 0.0 : max(_983, 0.0));
    float _986 = isnan(1.0) ? _4195 : (isnan(_4195) ? 1.0 : min(_4195, 1.0));
    float _4206 = isnan(0.0) ? _984 : (isnan(_984) ? 0.0 : max(_984, 0.0));
    float _987 = isnan(1.0) ? _4206 : (isnan(_4206) ? 1.0 : min(_4206, 1.0));
    float _4217 = isnan(0.0) ? _985 : (isnan(_985) ? 0.0 : max(_985, 0.0));
    float _988 = isnan(1.0) ? _4217 : (isnan(_4217) ? 1.0 : min(_4217, 1.0));
    vec4 _997 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _938, cbSceneParam._m0[86u].y * _939));
    float _1001 = ((isnan(1.0) ? _4129 : (isnan(_4129) ? 1.0 : min(_4129, 1.0))) * TEXCOORD_5.w) * _997.x;
    float _1002 = dot(vec3(_839, _840, _841), vec3(_918, _919, _920));
    float _1005 = _1002 * 2.0;
    float _1009 = (_1005 * _839) - _918;
    float _1010 = (_1005 * _840) - _919;
    float _1011 = (_1005 * _841) - _920;
    float _1015 = abs(dot(vec3(_918, _919, _920), vec3(_839, _840, _841)));
    float _4228 = isnan(0.0) ? _1015 : (isnan(_1015) ? 0.0 : max(_1015, 0.0));
    float _1017 = sqrt(_842);
    float _1030 = exp2((_1017 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4228 : (isnan(_4228) ? 1.0 : min(_4228, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1017 * 3.0));
    float _1062 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1066 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1070 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1399;
    float _1401;
    float _1402;
    float _1403;
    float _1404;
    float _1405;
    float _1406;
    float _1407;
    float _1408;
    float _1409;
    float _1410;
    float _1411;
    float _1412;
    float _1413;
    float _1414;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1124 = fma(_1070, cbModelParam._m0[26u].z, fma(_1066, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1062));
        float _1128 = fma(_1070, cbModelParam._m0[27u].z, fma(_1066, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1062));
        float _1132 = fma(_1070, cbModelParam._m0[28u].z, fma(_1066, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1062));
        float _1157 = _1062 + _839;
        float _1158 = _1066 + _840;
        float _1159 = _1070 + _841;
        float _1169 = fma(_1159, cbModelParam._m0[26u].z, fma(_1158, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1157)) - _1124;
        float _1170 = fma(_1159, cbModelParam._m0[27u].z, fma(_1158, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1157)) - _1128;
        float _1171 = fma(_1159, cbModelParam._m0[28u].z, fma(_1158, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1157)) - _1132;
        float _1175 = inversesqrt(dot(vec3(_1169, _1170, _1171), vec3(_1169, _1170, _1171)));
        float _1188 = ((_1175 * _1169) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1124 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1189 = ((_1175 * _1170) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1128 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1190 = ((_1175 * _1171) / cbModelParam._m0[34u].z) + ((((((_1132 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1193 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1188, _1189, _1190), 0.0);
        vec4 _1200 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1188, _1189, _1190), 0.0);
        vec4 _1207 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1188, _1189, _1190), 0.0);
        vec4 _1214 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1188, _1189, _1190), 0.0);
        float _1227 = exp2((_1193.w + (-0.5)) * 20.0) * 2.0;
        float _1228 = _1227 * (_1193.x + (-0.5));
        float _1229 = _1227 * (_1193.y + (-0.5));
        float _1230 = _1227 * (_1193.z + (-0.5));
        float _1237 = exp2((_1200.w + (-0.5)) * 20.0) * 2.0;
        float _1238 = _1237 * (_1200.x + (-0.5));
        float _1239 = _1237 * (_1200.y + (-0.5));
        float _1240 = _1237 * (_1200.z + (-0.5));
        float _1247 = exp2((_1207.w + (-0.5)) * 20.0) * 2.0;
        float _1248 = _1247 * (_1207.x + (-0.5));
        float _1249 = _1247 * (_1207.y + (-0.5));
        float _1250 = _1247 * (_1207.z + (-0.5));
        float _1257 = exp2((_1214.w + (-0.5)) * 20.0) * 2.0;
        float _1258 = _1257 * (_1214.x + (-0.5));
        float _1259 = _1257 * (_1214.y + (-0.5));
        float _1260 = _1257 * (_1214.z + (-0.5));
        float _1261 = isnan(0.0) ? _1258 : (isnan(_1258) ? 0.0 : max(_1258, 0.0));
        float _1262 = isnan(0.0) ? _1259 : (isnan(_1259) ? 0.0 : max(_1259, 0.0));
        float _1263 = isnan(0.0) ? _1260 : (isnan(_1260) ? 0.0 : max(_1260, 0.0));
        float _1264 = _1228 * 0.5;
        float _1265 = _1238 * 0.5;
        float _1266 = _1248 * 0.5;
        float _1267 = dot(vec3(_1264, _1265, _1266), vec3(_1264, _1265, _1266));
        float _1272 = (_1267 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1267);
        float _1281 = (dot(vec3(_839, _840, _841), vec3(_1272 * _1264, _1272 * _1265, _1272 * _1266)) + 1.0) * 0.5;
        float _4254 = isnan(0.0) ? _1281 : (isnan(_1281) ? 0.0 : max(_1281, 0.0));
        float _1291 = sqrt(((_1265 * _1265) + (_1264 * _1264)) + (_1266 * _1266)) / (_1261 + 9.9999997473787516355514526367188e-06);
        float _4265 = isnan(0.0) ? _1291 : (isnan(_1291) ? 0.0 : max(_1291, 0.0));
        float _1292 = isnan(1.0) ? _4265 : (isnan(_4265) ? 1.0 : min(_4265, 1.0));
        float _1293 = _1292 * 2.0;
        float _1297 = (1.0 - _1292) / (_1292 + 1.0);
        float _4276 = isnan(0.0) ? _1297 : (isnan(_1297) ? 0.0 : max(_1297, 0.0));
        float _1298 = isnan(1.0) ? _4276 : (isnan(_4276) ? 1.0 : min(_4276, 1.0));
        float _1307 = ((((1.0 - _1298) * (_1293 + 2.0)) * exp2(log2(isnan(1.0) ? _4254 : (isnan(_4254) ? 1.0 : min(_4254, 1.0))) * (_1293 + 1.0))) + _1298) * _1261;
        float _1308 = _1229 * 0.5;
        float _1309 = _1239 * 0.5;
        float _1310 = _1249 * 0.5;
        float _1311 = dot(vec3(_1308, _1309, _1310), vec3(_1308, _1309, _1310));
        float _1316 = (_1311 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1311);
        float _1324 = (dot(vec3(_839, _840, _841), vec3(_1316 * _1308, _1316 * _1309, _1316 * _1310)) + 1.0) * 0.5;
        float _4287 = isnan(0.0) ? _1324 : (isnan(_1324) ? 0.0 : max(_1324, 0.0));
        float _1333 = sqrt(((_1309 * _1309) + (_1308 * _1308)) + (_1310 * _1310)) / (_1262 + 9.9999997473787516355514526367188e-06);
        float _4298 = isnan(0.0) ? _1333 : (isnan(_1333) ? 0.0 : max(_1333, 0.0));
        float _1334 = isnan(1.0) ? _4298 : (isnan(_4298) ? 1.0 : min(_4298, 1.0));
        float _1335 = _1334 * 2.0;
        float _1339 = (1.0 - _1334) / (_1334 + 1.0);
        float _4309 = isnan(0.0) ? _1339 : (isnan(_1339) ? 0.0 : max(_1339, 0.0));
        float _1340 = isnan(1.0) ? _4309 : (isnan(_4309) ? 1.0 : min(_4309, 1.0));
        float _1349 = ((((1.0 - _1340) * (_1335 + 2.0)) * exp2(log2(isnan(1.0) ? _4287 : (isnan(_4287) ? 1.0 : min(_4287, 1.0))) * (_1335 + 1.0))) + _1340) * _1262;
        float _1350 = _1230 * 0.5;
        float _1351 = _1240 * 0.5;
        float _1352 = _1250 * 0.5;
        float _1353 = dot(vec3(_1350, _1351, _1352), vec3(_1350, _1351, _1352));
        float _1358 = (_1353 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1353);
        float _1366 = (dot(vec3(_839, _840, _841), vec3(_1358 * _1350, _1358 * _1351, _1358 * _1352)) + 1.0) * 0.5;
        float _4320 = isnan(0.0) ? _1366 : (isnan(_1366) ? 0.0 : max(_1366, 0.0));
        float _1375 = sqrt(((_1351 * _1351) + (_1350 * _1350)) + (_1352 * _1352)) / (_1263 + 9.9999997473787516355514526367188e-06);
        float _4331 = isnan(0.0) ? _1375 : (isnan(_1375) ? 0.0 : max(_1375, 0.0));
        float _1376 = isnan(1.0) ? _4331 : (isnan(_4331) ? 1.0 : min(_4331, 1.0));
        float _1377 = _1376 * 2.0;
        float _1381 = (1.0 - _1376) / (_1376 + 1.0);
        float _4342 = isnan(0.0) ? _1381 : (isnan(_1381) ? 0.0 : max(_1381, 0.0));
        float _1382 = isnan(1.0) ? _4342 : (isnan(_4342) ? 1.0 : min(_4342, 1.0));
        float _1391 = ((((1.0 - _1382) * (_1377 + 2.0)) * exp2(log2(isnan(1.0) ? _4320 : (isnan(_4320) ? 1.0 : min(_4320, 1.0))) * (_1377 + 1.0))) + _1382) * _1263;
        _1399 = _1230;
        _1401 = _1229;
        _1402 = _1228;
        _1403 = _1240;
        _1404 = _1239;
        _1405 = _1238;
        _1406 = _1250;
        _1407 = _1249;
        _1408 = _1248;
        _1409 = _1263;
        _1410 = _1262;
        _1411 = _1261;
        _1412 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1307 : (isnan(_1307) ? 0.0 : max(_1307, 0.0)));
        _1413 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1349 : (isnan(_1349) ? 0.0 : max(_1349, 0.0)));
        _1414 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1391 : (isnan(_1391) ? 0.0 : max(_1391, 0.0)));
    }
    else
    {
        _1399 = _1400;
        _1401 = _1400;
        _1402 = _1400;
        _1403 = _1400;
        _1404 = _1400;
        _1405 = _1400;
        _1406 = _1400;
        _1407 = _1400;
        _1408 = _1400;
        _1409 = _1400;
        _1410 = _1400;
        _1411 = _1400;
        _1412 = 0.0;
        _1413 = 0.0;
        _1414 = 0.0;
    }
    float _1709;
    float _1710;
    float _1711;
    float _1712;
    float _1713;
    float _1714;
    float _1715;
    float _1716;
    float _1717;
    float _1718;
    float _1719;
    float _1720;
    float _1721;
    float _1722;
    float _1723;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1440 = fma(_1070, cbModelParam._m0[30u].z, fma(_1066, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1062));
        float _1444 = fma(_1070, cbModelParam._m0[31u].z, fma(_1066, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1062));
        float _1448 = fma(_1070, cbModelParam._m0[32u].z, fma(_1066, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1062));
        float _1471 = _1062 + _839;
        float _1472 = _1066 + _840;
        float _1473 = _1070 + _841;
        float _1483 = fma(_1473, cbModelParam._m0[30u].z, fma(_1472, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1471)) - _1440;
        float _1484 = fma(_1473, cbModelParam._m0[31u].z, fma(_1472, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1471)) - _1444;
        float _1485 = fma(_1473, cbModelParam._m0[32u].z, fma(_1472, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1471)) - _1448;
        float _1489 = inversesqrt(dot(vec3(_1483, _1484, _1485), vec3(_1483, _1484, _1485)));
        float _1502 = ((_1489 * _1483) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1440 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1503 = ((_1489 * _1484) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1444 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1504 = ((_1489 * _1485) / cbModelParam._m0[35u].z) + ((((((_1448 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1506 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1502, _1503, _1504), 0.0);
        vec4 _1513 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1502, _1503, _1504), 0.0);
        vec4 _1520 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1502, _1503, _1504), 0.0);
        vec4 _1527 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1502, _1503, _1504), 0.0);
        float _1539 = exp2((_1506.w + (-0.5)) * 20.0) * 2.0;
        float _1540 = _1539 * (_1506.x + (-0.5));
        float _1541 = _1539 * (_1506.y + (-0.5));
        float _1542 = _1539 * (_1506.z + (-0.5));
        float _1549 = exp2((_1513.w + (-0.5)) * 20.0) * 2.0;
        float _1550 = _1549 * (_1513.x + (-0.5));
        float _1551 = _1549 * (_1513.y + (-0.5));
        float _1552 = _1549 * (_1513.z + (-0.5));
        float _1559 = exp2((_1520.w + (-0.5)) * 20.0) * 2.0;
        float _1560 = _1559 * (_1520.x + (-0.5));
        float _1561 = _1559 * (_1520.y + (-0.5));
        float _1562 = _1559 * (_1520.z + (-0.5));
        float _1569 = exp2((_1527.w + (-0.5)) * 20.0) * 2.0;
        float _1570 = _1569 * (_1527.x + (-0.5));
        float _1571 = _1569 * (_1527.y + (-0.5));
        float _1572 = _1569 * (_1527.z + (-0.5));
        float _1573 = isnan(0.0) ? _1570 : (isnan(_1570) ? 0.0 : max(_1570, 0.0));
        float _1574 = isnan(0.0) ? _1571 : (isnan(_1571) ? 0.0 : max(_1571, 0.0));
        float _1575 = isnan(0.0) ? _1572 : (isnan(_1572) ? 0.0 : max(_1572, 0.0));
        float _1576 = _1540 * 0.5;
        float _1577 = _1550 * 0.5;
        float _1578 = _1560 * 0.5;
        float _1579 = dot(vec3(_1576, _1577, _1578), vec3(_1576, _1577, _1578));
        float _1584 = (_1579 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1579);
        float _1592 = (dot(vec3(_839, _840, _841), vec3(_1584 * _1576, _1584 * _1577, _1584 * _1578)) + 1.0) * 0.5;
        float _4383 = isnan(0.0) ? _1592 : (isnan(_1592) ? 0.0 : max(_1592, 0.0));
        float _1601 = sqrt(((_1577 * _1577) + (_1576 * _1576)) + (_1578 * _1578)) / (_1573 + 9.9999997473787516355514526367188e-06);
        float _4394 = isnan(0.0) ? _1601 : (isnan(_1601) ? 0.0 : max(_1601, 0.0));
        float _1602 = isnan(1.0) ? _4394 : (isnan(_4394) ? 1.0 : min(_4394, 1.0));
        float _1603 = _1602 * 2.0;
        float _1607 = (1.0 - _1602) / (_1602 + 1.0);
        float _4405 = isnan(0.0) ? _1607 : (isnan(_1607) ? 0.0 : max(_1607, 0.0));
        float _1608 = isnan(1.0) ? _4405 : (isnan(_4405) ? 1.0 : min(_4405, 1.0));
        float _1617 = ((((1.0 - _1608) * (_1603 + 2.0)) * exp2(log2(isnan(1.0) ? _4383 : (isnan(_4383) ? 1.0 : min(_4383, 1.0))) * (_1603 + 1.0))) + _1608) * _1573;
        float _1618 = _1541 * 0.5;
        float _1619 = _1551 * 0.5;
        float _1620 = _1561 * 0.5;
        float _1621 = dot(vec3(_1618, _1619, _1620), vec3(_1618, _1619, _1620));
        float _1626 = (_1621 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1621);
        float _1634 = (dot(vec3(_839, _840, _841), vec3(_1626 * _1618, _1626 * _1619, _1626 * _1620)) + 1.0) * 0.5;
        float _4416 = isnan(0.0) ? _1634 : (isnan(_1634) ? 0.0 : max(_1634, 0.0));
        float _1643 = sqrt(((_1619 * _1619) + (_1618 * _1618)) + (_1620 * _1620)) / (_1574 + 9.9999997473787516355514526367188e-06);
        float _4427 = isnan(0.0) ? _1643 : (isnan(_1643) ? 0.0 : max(_1643, 0.0));
        float _1644 = isnan(1.0) ? _4427 : (isnan(_4427) ? 1.0 : min(_4427, 1.0));
        float _1645 = _1644 * 2.0;
        float _1649 = (1.0 - _1644) / (_1644 + 1.0);
        float _4438 = isnan(0.0) ? _1649 : (isnan(_1649) ? 0.0 : max(_1649, 0.0));
        float _1650 = isnan(1.0) ? _4438 : (isnan(_4438) ? 1.0 : min(_4438, 1.0));
        float _1659 = ((((1.0 - _1650) * (_1645 + 2.0)) * exp2(log2(isnan(1.0) ? _4416 : (isnan(_4416) ? 1.0 : min(_4416, 1.0))) * (_1645 + 1.0))) + _1650) * _1574;
        float _1660 = _1542 * 0.5;
        float _1661 = _1552 * 0.5;
        float _1662 = _1562 * 0.5;
        float _1663 = dot(vec3(_1660, _1661, _1662), vec3(_1660, _1661, _1662));
        float _1668 = (_1663 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1663);
        float _1676 = (dot(vec3(_839, _840, _841), vec3(_1668 * _1660, _1668 * _1661, _1668 * _1662)) + 1.0) * 0.5;
        float _4449 = isnan(0.0) ? _1676 : (isnan(_1676) ? 0.0 : max(_1676, 0.0));
        float _1685 = sqrt(((_1661 * _1661) + (_1660 * _1660)) + (_1662 * _1662)) / (_1575 + 9.9999997473787516355514526367188e-06);
        float _4460 = isnan(0.0) ? _1685 : (isnan(_1685) ? 0.0 : max(_1685, 0.0));
        float _1686 = isnan(1.0) ? _4460 : (isnan(_4460) ? 1.0 : min(_4460, 1.0));
        float _1687 = _1686 * 2.0;
        float _1691 = (1.0 - _1686) / (_1686 + 1.0);
        float _4471 = isnan(0.0) ? _1691 : (isnan(_1691) ? 0.0 : max(_1691, 0.0));
        float _1692 = isnan(1.0) ? _4471 : (isnan(_4471) ? 1.0 : min(_4471, 1.0));
        float _1701 = ((((1.0 - _1692) * (_1687 + 2.0)) * exp2(log2(isnan(1.0) ? _4449 : (isnan(_4449) ? 1.0 : min(_4449, 1.0))) * (_1687 + 1.0))) + _1692) * _1575;
        _1709 = _1542;
        _1710 = _1541;
        _1711 = _1540;
        _1712 = _1552;
        _1713 = _1551;
        _1714 = _1550;
        _1715 = _1562;
        _1716 = _1561;
        _1717 = _1560;
        _1718 = _1575;
        _1719 = _1574;
        _1720 = _1573;
        _1721 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1617 : (isnan(_1617) ? 0.0 : max(_1617, 0.0)));
        _1722 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1659 : (isnan(_1659) ? 0.0 : max(_1659, 0.0)));
        _1723 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1701 : (isnan(_1701) ? 0.0 : max(_1701, 0.0)));
    }
    else
    {
        _1709 = _1400;
        _1710 = _1400;
        _1711 = _1400;
        _1712 = _1400;
        _1713 = _1400;
        _1714 = _1400;
        _1715 = _1400;
        _1716 = _1400;
        _1717 = _1400;
        _1718 = _1400;
        _1719 = _1400;
        _1720 = _1400;
        _1721 = 0.0;
        _1722 = 0.0;
        _1723 = 0.0;
    }
    float _1733 = (cbModelParam._m0[1u].x * (_1721 - _1412)) + _1412;
    float _1734 = (cbModelParam._m0[1u].x * (_1722 - _1413)) + _1413;
    float _1735 = (cbModelParam._m0[1u].x * (_1723 - _1414)) + _1414;
    float _1756 = fma(_1735, cbSceneParam._m0[89u].z, fma(_1734, cbSceneParam._m0[89u].y, _1733 * cbSceneParam._m0[89u].x));
    float _1759 = fma(_1735, cbSceneParam._m0[90u].z, fma(_1734, cbSceneParam._m0[90u].y, _1733 * cbSceneParam._m0[90u].x));
    float _1762 = fma(_1735, cbSceneParam._m0[91u].z, fma(_1734, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1733));
    float _1777 = _1009 * 0.5;
    float _1778 = _1010 * 0.5;
    float _1779 = _1011 * 0.5;
    float _1780 = dot(vec4(_1777, _1778, _1779, 1.0), vec4(_1711, _1714, _1717, _1720));
    float _1783 = dot(vec4(_1777, _1778, _1779, 1.0), vec4(_1710, _1713, _1716, _1719));
    float _1786 = dot(vec4(_1777, _1778, _1779, 1.0), vec4(_1709, _1712, _1715, _1718));
    float _1820;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1793 = dot(vec4(_1777, _1778, _1779, 1.0), vec4(_1399, _1403, _1406, _1409));
        float _1797 = dot(vec4(_1777, _1778, _1779, 1.0), vec4(_1401, _1404, _1407, _1410));
        float _1801 = dot(vec4(_1777, _1778, _1779, 1.0), vec4(_1402, _1405, _1408, _1411));
        float _1808 = dot(vec4(cbModelParam._m0[39u]), vec4(_1777, _1778, _1779, 1.0));
        _1820 = dot(vec3(isnan(0.0) ? _1801 : (isnan(_1801) ? 0.0 : max(_1801, 0.0)), isnan(0.0) ? _1797 : (isnan(_1797) ? 0.0 : max(_1797, 0.0)), isnan(0.0) ? _1793 : (isnan(_1793) ? 0.0 : max(_1793, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1808) ? 0.0 : (isnan(0.0) ? _1808 : max(0.0, _1808))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1820 = 1.0;
    }
    float _1831;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1822 = dot(vec4(cbModelParam._m0[40u]), vec4(_1777, _1778, _1779, 1.0));
        _1831 = dot(vec3(isnan(0.0) ? _1780 : (isnan(_1780) ? 0.0 : max(_1780, 0.0)), isnan(0.0) ? _1783 : (isnan(_1783) ? 0.0 : max(_1783, 0.0)), isnan(0.0) ? _1786 : (isnan(_1786) ? 0.0 : max(_1786, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1822) ? 0.0 : (isnan(0.0) ? _1822 : max(0.0, _1822))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1831 = 1.0;
    }
    float _1835 = (_1831 * cbModelParam._m0[1u].x) + (_1820 * (1.0 - cbModelParam._m0[1u].x));
    float _1845 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _842);
    float _1846 = isnan(_1845) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1845 : min(cbModelParam._m0[25u].z, _1845));
    float _1926;
    float _1928;
    float _1930;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1893 = fma(_1070, cbModelParam._m0[13u].z, fma(_1066, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1062)) + cbModelParam._m0[13u].w;
        float _1897 = fma(_1070, cbModelParam._m0[14u].z, fma(_1066, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1062)) + cbModelParam._m0[14u].w;
        float _1901 = fma(_1070, cbModelParam._m0[15u].z, fma(_1066, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1062)) + cbModelParam._m0[15u].w;
        float _1904 = fma(_1011, cbModelParam._m0[13u].z, fma(_1010, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1009));
        float _1907 = fma(_1011, cbModelParam._m0[14u].z, fma(_1010, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1009));
        float _1910 = fma(_1011, cbModelParam._m0[15u].z, fma(_1010, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1009));
        float _1938;
        if (_1904 > 0.0)
        {
            _1938 = abs((1.0 - _1893) / _1904);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1904 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1893 + 1.0) / _1904);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1938 = frontier_phi_17_15_ladder;
        }
        float _2108;
        if (_1907 > 0.0)
        {
            _2108 = abs((1.0 - _1897) / _1907);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1907 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1897 + 1.0) / _1907);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2108 = frontier_phi_26_22_ladder;
        }
        float _2403;
        if (_1910 > 0.0)
        {
            _2403 = abs((1.0 - _1901) / _1910);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1910 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1901 + 1.0) / _1910);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2403 = frontier_phi_38_33_ladder;
        }
        float _2405 = isnan(_2108) ? _1938 : (isnan(_1938) ? _2108 : min(_1938, _2108));
        float _2406 = isnan(_2403) ? _2405 : (isnan(_2405) ? _2403 : min(_2405, _2403));
        float _2410 = (_2406 * _1904) + _1893;
        float _2411 = (_2406 * _1907) + _1897;
        float _2412 = (_2406 * _1910) + _1901;
        float _2413 = _2406 * 9.9999997473787516355514526367188e-05;
        float _2415 = (-1.0) - _2413;
        float _2417 = _2413 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2412 > _2417) || ((_2412 < _2415) || ((_2411 > _2417) || ((_2411 < _2415) || ((_2410 < _2415) || (_2410 > _2417))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2557 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2412, cbModelParam._m0[9u].z, fma(_2411, cbModelParam._m0[9u].y, _2410 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2412, cbModelParam._m0[10u].z, fma(_2411, cbModelParam._m0[10u].y, _2410 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2412, cbModelParam._m0[11u].z, fma(_2411, cbModelParam._m0[11u].y, _2410 * cbModelParam._m0[11u].x))), _1846);
            frontier_phi_16_38_ladder = _2557.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2557.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2557.x * cbModelParam._m0[1u].y;
        }
        _1926 = frontier_phi_16_38_ladder_2;
        _1928 = frontier_phi_16_38_ladder_1;
        _1930 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1914 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1009, _1010, _1011), _1846);
        _1926 = _1914.x * cbModelParam._m0[1u].y;
        _1928 = _1914.y * cbModelParam._m0[1u].y;
        _1930 = _1914.z * cbModelParam._m0[1u].y;
    }
    float _1934 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _842);
    float _1935 = isnan(_1934) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1934 : min(cbModelParam._m0[25u].w, _1934));
    float _2025;
    float _2027;
    float _2029;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1989 = fma(_1070, cbModelParam._m0[21u].z, fma(_1066, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1062)) + cbModelParam._m0[21u].w;
        float _1993 = fma(_1070, cbModelParam._m0[22u].z, fma(_1066, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1062)) + cbModelParam._m0[22u].w;
        float _1997 = fma(_1070, cbModelParam._m0[23u].z, fma(_1066, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1062)) + cbModelParam._m0[23u].w;
        float _2000 = fma(_1011, cbModelParam._m0[21u].z, fma(_1010, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1009));
        float _2003 = fma(_1011, cbModelParam._m0[22u].z, fma(_1010, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1009));
        float _2006 = fma(_1011, cbModelParam._m0[23u].z, fma(_1010, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1009));
        float _2113;
        if (_2000 > 0.0)
        {
            _2113 = abs((1.0 - _1989) / _2000);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_2000 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1989 + 1.0) / _2000);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2113 = frontier_phi_28_24_ladder;
        }
        float _2430;
        if (_2003 > 0.0)
        {
            _2430 = abs((1.0 - _1993) / _2003);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_2003 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1993 + 1.0) / _2003);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2430 = frontier_phi_40_35_ladder;
        }
        float _2757;
        if (_2006 > 0.0)
        {
            _2757 = abs((1.0 - _1997) / _2006);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_2006 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_1997 + 1.0) / _2006);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _2757 = frontier_phi_50_47_ladder;
        }
        float _2759 = isnan(_2430) ? _2113 : (isnan(_2113) ? _2430 : min(_2113, _2430));
        float _2760 = isnan(_2757) ? _2759 : (isnan(_2759) ? _2757 : min(_2759, _2757));
        float _2764 = (_2760 * _2000) + _1989;
        float _2765 = (_2760 * _2003) + _1993;
        float _2766 = (_2760 * _2006) + _1997;
        float _2767 = _2760 * 9.9999997473787516355514526367188e-05;
        float _2768 = (-1.0) - _2767;
        float _2770 = _2767 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_2766 > _2770) || ((_2766 < _2768) || ((_2765 > _2770) || ((_2765 < _2768) || ((_2764 < _2768) || (_2764 > _2770))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2884 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2766, cbModelParam._m0[17u].z, fma(_2765, cbModelParam._m0[17u].y, _2764 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2766, cbModelParam._m0[18u].z, fma(_2765, cbModelParam._m0[18u].y, _2764 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2766, cbModelParam._m0[19u].z, fma(_2765, cbModelParam._m0[19u].y, _2764 * cbModelParam._m0[19u].x))), _1935);
            frontier_phi_25_50_ladder = _2884.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _2884.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _2884.x * cbModelParam._m0[1u].z;
        }
        _2025 = frontier_phi_25_50_ladder_2;
        _2027 = frontier_phi_25_50_ladder_1;
        _2029 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _2009 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1009, _1010, _1011), _1935);
        _2025 = _2009.x * cbModelParam._m0[1u].z;
        _2027 = _2009.y * cbModelParam._m0[1u].z;
        _2029 = _2009.z * cbModelParam._m0[1u].z;
    }
    float _2041 = ((((1.0 - _1030) * ((_1017 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_1030 * _1017)) * _1001;
    float _2042 = _2041 * ((cbModelParam._m0[1u].w * (_2025 - _1926)) + _1926);
    float _2043 = _2041 * ((cbModelParam._m0[1u].w * (_2027 - _1928)) + _1928);
    float _2044 = _2041 * ((cbModelParam._m0[1u].w * (_2029 - _1930)) + _1930);
    float _2047 = fma(_2044, cbSceneParam._m0[89u].z, fma(_2043, cbSceneParam._m0[89u].y, _2042 * cbSceneParam._m0[89u].x));
    float _2050 = fma(_2044, cbSceneParam._m0[90u].z, fma(_2043, cbSceneParam._m0[90u].y, _2042 * cbSceneParam._m0[90u].x));
    float _2053 = fma(_2044, cbSceneParam._m0[91u].z, fma(_2043, cbSceneParam._m0[91u].y, _2042 * cbSceneParam._m0[91u].x));
    float _2087 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2091 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2095 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2099 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2100 = _2087 / _2099;
    float _2101 = _2091 / _2099;
    float _2102 = _2095 / _2099;
    float _2249;
    float _2250;
    float _2251;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2129 = ((uint(_2102 > cbSceneParam._m0[59u].y) + uint(_2102 > cbSceneParam._m0[59u].x)) + uint(_2102 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2130 = _2129 + 43u;
        uint _2138 = _2129 + 44u;
        uint _2146 = _2129 + 45u;
        uint _2154 = _2129 + 46u;
        float _2165 = fma(_2099, cbSceneParam._m0[_2130].w, fma(_2095, cbSceneParam._m0[_2130].z, fma(_2091, cbSceneParam._m0[_2130].y, _2087 * cbSceneParam._m0[_2130].x)));
        float _2169 = fma(_2099, cbSceneParam._m0[_2138].w, fma(_2095, cbSceneParam._m0[_2138].z, fma(_2091, cbSceneParam._m0[_2138].y, _2087 * cbSceneParam._m0[_2138].x)));
        float _2177 = fma(_2099, cbSceneParam._m0[_2154].w, fma(_2095, cbSceneParam._m0[_2154].z, fma(_2091, cbSceneParam._m0[_2154].y, _2087 * cbSceneParam._m0[_2154].x)));
        float _2182 = cbSceneParam._m0[33u].z * _2177;
        float _2184 = cbSceneParam._m0[33u].w * _2177;
        float _2187 = fma(_2099, cbSceneParam._m0[_2146].w, fma(_2095, cbSceneParam._m0[_2146].z, fma(_2091, cbSceneParam._m0[_2146].y, _2087 * cbSceneParam._m0[_2146].x))) / _2177;
        float _2235 = (cbSceneParam._m0[33u].x - sqrt(((_2101 * _2101) + (_2100 * _2100)) + (_2102 * _2102))) * cbSceneParam._m0[33u].y;
        float _4597 = isnan(0.0) ? _2235 : (isnan(_2235) ? 0.0 : max(_2235, 0.0));
        float _2242 = (isnan(1.0) ? _4597 : (isnan(_4597) ? 1.0 : min(_4597, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2182 + _2165) / _2177, (_2184 + _2169) / _2177), _2187), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2184 + _2165) / _2177, (_2169 - _2182) / _2177), _2187), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2165 - _2182) / _2177, (_2169 - _2184) / _2177), _2187), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2165 - _2184) / _2177, (_2182 + _2169) / _2177), _2187), 0.0)).x), vec4(0.25)));
        _2249 = 1.0 - (_2242 * cbSceneParam._m0[34u].x);
        _2250 = 1.0 - (_2242 * cbSceneParam._m0[34u].y);
        _2251 = 1.0 - (_2242 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2249 = 1.0;
        _2250 = 1.0;
        _2251 = 1.0;
    }
    float _2315;
    float _2317;
    float _2319;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2303 = fma(_2099, cbSceneParam._m0[63u].w, fma(_2095, cbSceneParam._m0[63u].z, fma(_2091, cbSceneParam._m0[63u].y, _2087 * cbSceneParam._m0[63u].x)));
        float _2304 = fma(_2099, cbSceneParam._m0[60u].w, fma(_2095, cbSceneParam._m0[60u].z, fma(_2091, cbSceneParam._m0[60u].y, _2087 * cbSceneParam._m0[60u].x))) / _2303;
        float _2305 = fma(_2099, cbSceneParam._m0[61u].w, fma(_2095, cbSceneParam._m0[61u].z, fma(_2091, cbSceneParam._m0[61u].y, _2087 * cbSceneParam._m0[61u].x))) / _2303;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_2304 >= cbSceneParam._m0[64u].x) && (_2305 >= cbSceneParam._m0[64u].y)) && (_2304 <= cbSceneParam._m0[64u].z)) && (_2305 <= cbSceneParam._m0[64u].w))
        {
            float _2443 = fma(_2099, cbSceneParam._m0[62u].w, fma(_2095, cbSceneParam._m0[62u].z, fma(_2091, cbSceneParam._m0[62u].y, _2087 * cbSceneParam._m0[62u].x))) / _2303;
            float _2447 = isnan(cbSceneParam._m0[41u].w) ? _2443 : (isnan(_2443) ? cbSceneParam._m0[41u].w : max(_2443, cbSceneParam._m0[41u].w));
            float _2490 = (cbSceneParam._m0[33u].x - sqrt(((_2101 * _2101) + (_2100 * _2100)) + (_2102 * _2102))) * cbSceneParam._m0[33u].y;
            float _4613 = isnan(0.0) ? _2490 : (isnan(_2490) ? 0.0 : max(_2490, 0.0));
            float _2497 = (isnan(1.0) ? _4613 : (isnan(_4613) ? 1.0 : min(_4613, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2304, cbSceneParam._m0[33u].w + _2305), _2447), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2304, _2305 - cbSceneParam._m0[33u].z), _2447), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2304 - cbSceneParam._m0[33u].z, _2305 - cbSceneParam._m0[33u].w), _2447), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2304 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2305), _2447), 0.0)).x), vec4(0.25)));
            float _2501 = 1.0 - (_2497 * cbSceneParam._m0[34u].x);
            float _2502 = 1.0 - (_2497 * cbSceneParam._m0[34u].y);
            float _2503 = 1.0 - (_2497 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_2503) ? _2251 : (isnan(_2251) ? _2503 : min(_2251, _2503));
            frontier_phi_37_36_ladder_1 = isnan(_2502) ? _2250 : (isnan(_2250) ? _2502 : min(_2250, _2502));
            frontier_phi_37_36_ladder_2 = isnan(_2501) ? _2249 : (isnan(_2249) ? _2501 : min(_2249, _2501));
        }
        else
        {
            frontier_phi_37_36_ladder = _2251;
            frontier_phi_37_36_ladder_1 = _2250;
            frontier_phi_37_36_ladder_2 = _2249;
        }
        _2315 = frontier_phi_37_36_ladder_2;
        _2317 = frontier_phi_37_36_ladder_1;
        _2319 = frontier_phi_37_36_ladder;
    }
    else
    {
        _2315 = _2249;
        _2317 = _2250;
        _2319 = _2251;
    }
    uvec4 _2324 = floatBitsToUint(cbInstanceData._m0[_252 + 5u]);
    uint _2326 = _2324.x * 14u;
    uint _2327 = _2326 + 13u;
    float _2334 = _1001 + (-1.0);
    float _2339 = (cbLight._m0[_2327].x * _2334) + 1.0;
    float _2340 = (cbLight._m0[_2327].y * _2334) + 1.0;
    float _2341 = (cbLight._m0[_2327].z * _2334) + 1.0;
    float _2342 = (cbLight._m0[_2327].w * _2334) + 1.0;
    uint _2343 = _2326 + 5u;
    float _2349 = isnan(1.0) ? _2340 : (isnan(_2340) ? 1.0 : min(_2340, 1.0));
    uint _2353 = _2326 + 4u;
    float _2362 = isnan(1.0) ? _2339 : (isnan(_2339) ? 1.0 : min(_2339, 1.0));
    uint _2366 = _2326 | 1u;
    float _2377 = dot(vec3(cbLight._m0[_2326].xyz), vec3(_839, _840, _841));
    float _2380 = dot(vec3(cbLight._m0[_2366].xyz), vec3(_839, _840, _841));
    float _4649 = isnan(0.0) ? _2377 : (isnan(_2377) ? 0.0 : max(_2377, 0.0));
    float _4660 = isnan(0.0) ? _2380 : (isnan(_2380) ? 0.0 : max(_2380, 0.0));
    float _2385 = (isnan(1.0) ? _4649 : (isnan(_4649) ? 1.0 : min(_4649, 1.0))) * 0.3183098733425140380859375;
    float _2387 = (isnan(1.0) ? _4660 : (isnan(_4660) ? 1.0 : min(_4660, 1.0))) * 0.3183098733425140380859375;
    float _2394 = ((cbLight._m0[_2343].x * _2349) * _2387) + (((cbLight._m0[_2353].x * _2315) * _2362) * _2385);
    float _2395 = ((_2349 * cbLight._m0[_2343].y) * _2387) + (((cbLight._m0[_2353].y * _2317) * _2362) * _2385);
    float _2396 = ((_2349 * cbLight._m0[_2343].z) * _2387) + (((cbLight._m0[_2353].z * _2319) * _2362) * _2385);
    uvec4 _2400 = floatBitsToUint(cbLight._m0[_2326 + 12u]);
    bool _2402 = _2400.x == 0u;
    float _2504;
    float _2506;
    float _2508;
    if (_2402)
    {
        _2504 = _2394;
        _2506 = _2395;
        _2508 = _2396;
    }
    else
    {
        uint _2512 = _2326 + 6u;
        float _2528 = (dot(vec3(cbLight._m0[_2326 + 2u].xyz), vec3(_839, _840, _841)) * 0.5) + 0.5;
        float _2529 = _2528 * _2528;
        float _4671 = isnan(0.0) ? _2529 : (isnan(_2529) ? 0.0 : max(_2529, 0.0));
        float _2530 = isnan(1.0) ? _4671 : (isnan(_4671) ? 1.0 : min(_4671, 1.0));
        float _2531 = isnan(1.0) ? _2341 : (isnan(_2341) ? 1.0 : min(_2341, 1.0));
        _2504 = (((cbLight._m0[_2512].x * 0.3183098733425140380859375) * _2530) * _2531) + _2394;
        _2506 = (((cbLight._m0[_2512].y * 0.3183098733425140380859375) * _2530) * _2531) + _2395;
        _2508 = (((cbLight._m0[_2512].z * 0.3183098733425140380859375) * _2530) * _2531) + _2396;
    }
    bool _2511 = _2400.y == 0u;
    float _2566;
    float _2568;
    float _2570;
    if (_2511)
    {
        _2566 = _2504;
        _2568 = _2506;
        _2570 = _2508;
    }
    else
    {
        uint _2728 = _2326 + 7u;
        float _2744 = (dot(vec3(cbLight._m0[_2326 + 3u].xyz), vec3(_839, _840, _841)) * 0.5) + 0.5;
        float _2745 = _2744 * _2744;
        float _4687 = isnan(0.0) ? _2745 : (isnan(_2745) ? 0.0 : max(_2745, 0.0));
        float _2746 = isnan(1.0) ? _4687 : (isnan(_4687) ? 1.0 : min(_4687, 1.0));
        float _2747 = isnan(1.0) ? _2342 : (isnan(_2342) ? 1.0 : min(_2342, 1.0));
        _2566 = (((cbLight._m0[_2728].x * 0.3183098733425140380859375) * _2746) * _2747) + _2504;
        _2568 = (((cbLight._m0[_2728].y * 0.3183098733425140380859375) * _2746) * _2747) + _2506;
        _2570 = (((cbLight._m0[_2728].z * 0.3183098733425140380859375) * _2746) * _2747) + _2508;
    }
    uint _2573 = _2326 + 8u;
    float _2586 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2326].w)) * _842) * 0.949999988079071044921875);
    float _2587 = _2586 * _2586;
    float _2588 = cbLight._m0[_2326].x + _918;
    float _2589 = cbLight._m0[_2326].y + _919;
    float _2590 = cbLight._m0[_2326].z + _920;
    float _2594 = inversesqrt(dot(vec3(_2588, _2589, _2590), vec3(_2588, _2589, _2590)));
    float _2595 = _2594 * _2588;
    float _2596 = _2594 * _2589;
    float _2597 = _2594 * _2590;
    float _2598 = dot(vec3(_839, _840, _841), vec3(cbLight._m0[_2326].xyz));
    float _4703 = isnan(0.0) ? _2598 : (isnan(_2598) ? 0.0 : max(_2598, 0.0));
    float _2601 = isnan(1.0) ? _4703 : (isnan(_4703) ? 1.0 : min(_4703, 1.0));
    float _4714 = isnan(0.0) ? _1002 : (isnan(_1002) ? 0.0 : max(_1002, 0.0));
    float _2602 = isnan(1.0) ? _4714 : (isnan(_4714) ? 1.0 : min(_4714, 1.0));
    float _2603 = dot(vec3(_839, _840, _841), vec3(_2595, _2596, _2597));
    float _4725 = isnan(0.0) ? _2603 : (isnan(_2603) ? 0.0 : max(_2603, 0.0));
    float _2606 = isnan(1.0) ? _4725 : (isnan(_4725) ? 1.0 : min(_4725, 1.0));
    float _2607 = dot(vec3(cbLight._m0[_2326].xyz), vec3(_2595, _2596, _2597));
    float _4736 = isnan(0.0) ? _2607 : (isnan(_2607) ? 0.0 : max(_2607, 0.0));
    float _2611 = _2587 * _2587;
    float _2615 = ((_2606 * _2606) * (_2611 + (-1.0))) + 1.0;
    float _2626 = (exp2(log2(1.0 - (isnan(1.0) ? _4736 : (isnan(_4736) ? 1.0 : min(_4736, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2627 = 1.0 - _2587;
    float _2638 = (0.5 / (((_2602 * ((_2601 * _2627) + _2587)) + 9.9999999392252902907785028219223e-09) + (((_2602 * _2627) + _2587) * _2601))) * _2601;
    float _4747 = isnan(0.0) ? _2638 : (isnan(_2638) ? 0.0 : max(_2638, 0.0));
    float _2640 = (isnan(1.0) ? _4747 : (isnan(_4747) ? 1.0 : min(_4747, 1.0))) * (_2611 / ((_2615 * _2615) * 3.141590118408203125));
    uint _2654 = _2326 + 9u;
    float _2665 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2366].w)) * _842) * 0.949999988079071044921875);
    float _2666 = _2665 * _2665;
    float _2667 = cbLight._m0[_2366].x + _918;
    float _2668 = cbLight._m0[_2366].y + _919;
    float _2669 = cbLight._m0[_2366].z + _920;
    float _2673 = inversesqrt(dot(vec3(_2667, _2668, _2669), vec3(_2667, _2668, _2669)));
    float _2674 = _2673 * _2667;
    float _2675 = _2673 * _2668;
    float _2676 = _2673 * _2669;
    float _2677 = dot(vec3(_839, _840, _841), vec3(cbLight._m0[_2366].xyz));
    float _4758 = isnan(0.0) ? _2677 : (isnan(_2677) ? 0.0 : max(_2677, 0.0));
    float _2680 = isnan(1.0) ? _4758 : (isnan(_4758) ? 1.0 : min(_4758, 1.0));
    float _2681 = dot(vec3(_839, _840, _841), vec3(_2674, _2675, _2676));
    float _4769 = isnan(0.0) ? _2681 : (isnan(_2681) ? 0.0 : max(_2681, 0.0));
    float _2684 = isnan(1.0) ? _4769 : (isnan(_4769) ? 1.0 : min(_4769, 1.0));
    float _2685 = dot(vec3(cbLight._m0[_2366].xyz), vec3(_2674, _2675, _2676));
    float _4780 = isnan(0.0) ? _2685 : (isnan(_2685) ? 0.0 : max(_2685, 0.0));
    float _2689 = _2666 * _2666;
    float _2693 = ((_2684 * _2684) * (_2689 + (-1.0))) + 1.0;
    float _2702 = (exp2(log2(1.0 - (isnan(1.0) ? _4780 : (isnan(_4780) ? 1.0 : min(_4780, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2703 = 1.0 - _2666;
    float _2713 = (0.5 / (((_2602 * ((_2680 * _2703) + _2666)) + 9.9999999392252902907785028219223e-09) + (((_2602 * _2703) + _2666) * _2680))) * _2680;
    float _4791 = isnan(0.0) ? _2713 : (isnan(_2713) ? 0.0 : max(_2713, 0.0));
    float _2715 = (isnan(1.0) ? _4791 : (isnan(_4791) ? 1.0 : min(_4791, 1.0))) * (_2689 / ((_2693 * _2693) * 3.141590118408203125));
    float _2725 = (((_2702 * cbLight._m0[_2654].x) * _2715) * _2349) + ((((cbLight._m0[_2573].x * _2315) * _2626) * _2640) * _2362);
    float _2726 = (((_2702 * cbLight._m0[_2654].y) * _2715) * _2349) + ((((cbLight._m0[_2573].y * _2317) * _2626) * _2640) * _2362);
    float _2727 = (((_2702 * cbLight._m0[_2654].z) * _2715) * _2349) + ((((cbLight._m0[_2573].z * _2319) * _2626) * _2640) * _2362);
    float _2783;
    float _2785;
    float _2787;
    if (_2402)
    {
        _2783 = _2725;
        _2785 = _2726;
        _2787 = _2727;
    }
    else
    {
        uint _2789 = _2326 + 2u;
        uint _2793 = _2326 + 10u;
        float _2807 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2789].w)) * _842) * 0.949999988079071044921875);
        float _2808 = _2807 * _2807;
        float _2809 = cbLight._m0[_2789].x + _918;
        float _2810 = cbLight._m0[_2789].y + _919;
        float _2811 = cbLight._m0[_2789].z + _920;
        float _2815 = inversesqrt(dot(vec3(_2809, _2810, _2811), vec3(_2809, _2810, _2811)));
        float _2816 = _2815 * _2809;
        float _2817 = _2815 * _2810;
        float _2818 = _2815 * _2811;
        float _2819 = dot(vec3(_839, _840, _841), vec3(cbLight._m0[_2789].xyz));
        float _4802 = isnan(0.0) ? _2819 : (isnan(_2819) ? 0.0 : max(_2819, 0.0));
        float _2822 = isnan(1.0) ? _4802 : (isnan(_4802) ? 1.0 : min(_4802, 1.0));
        float _2823 = dot(vec3(_839, _840, _841), vec3(_2816, _2817, _2818));
        float _4813 = isnan(0.0) ? _2823 : (isnan(_2823) ? 0.0 : max(_2823, 0.0));
        float _2826 = isnan(1.0) ? _4813 : (isnan(_4813) ? 1.0 : min(_4813, 1.0));
        float _2827 = dot(vec3(cbLight._m0[_2789].xyz), vec3(_2816, _2817, _2818));
        float _4824 = isnan(0.0) ? _2827 : (isnan(_2827) ? 0.0 : max(_2827, 0.0));
        float _2831 = _2808 * _2808;
        float _2835 = ((_2826 * _2826) * (_2831 + (-1.0))) + 1.0;
        float _2844 = (exp2(log2(1.0 - (isnan(1.0) ? _4824 : (isnan(_4824) ? 1.0 : min(_4824, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2845 = 1.0 - _2808;
        float _2855 = (0.5 / (((_2602 * ((_2822 * _2845) + _2808)) + 9.9999999392252902907785028219223e-09) + (((_2602 * _2845) + _2808) * _2822))) * _2822;
        float _4835 = isnan(0.0) ? _2855 : (isnan(_2855) ? 0.0 : max(_2855, 0.0));
        float _2857 = (isnan(1.0) ? _4835 : (isnan(_4835) ? 1.0 : min(_4835, 1.0))) * (_2831 / ((_2835 * _2835) * 3.141590118408203125));
        float _2858 = isnan(1.0) ? _2341 : (isnan(_2341) ? 1.0 : min(_2341, 1.0));
        _2783 = (((_2844 * cbLight._m0[_2793].x) * _2857) * _2858) + _2725;
        _2785 = (((_2844 * cbLight._m0[_2793].y) * _2857) * _2858) + _2726;
        _2787 = (((_2844 * cbLight._m0[_2793].z) * _2857) * _2858) + _2727;
    }
    float _2889;
    float _2891;
    float _2893;
    if (_2511)
    {
        _2889 = _2783;
        _2891 = _2785;
        _2893 = _2787;
    }
    else
    {
        uint _2900 = _2326 + 3u;
        uint _2904 = _2326 + 11u;
        float _2918 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2900].w)) * _842) * 0.949999988079071044921875);
        float _2919 = _2918 * _2918;
        float _2920 = cbLight._m0[_2900].x + _918;
        float _2921 = cbLight._m0[_2900].y + _919;
        float _2922 = cbLight._m0[_2900].z + _920;
        float _2926 = inversesqrt(dot(vec3(_2920, _2921, _2922), vec3(_2920, _2921, _2922)));
        float _2927 = _2926 * _2920;
        float _2928 = _2926 * _2921;
        float _2929 = _2926 * _2922;
        float _2930 = dot(vec3(_839, _840, _841), vec3(cbLight._m0[_2900].xyz));
        float _4851 = isnan(0.0) ? _2930 : (isnan(_2930) ? 0.0 : max(_2930, 0.0));
        float _2933 = isnan(1.0) ? _4851 : (isnan(_4851) ? 1.0 : min(_4851, 1.0));
        float _2934 = dot(vec3(_839, _840, _841), vec3(_2927, _2928, _2929));
        float _4862 = isnan(0.0) ? _2934 : (isnan(_2934) ? 0.0 : max(_2934, 0.0));
        float _2937 = isnan(1.0) ? _4862 : (isnan(_4862) ? 1.0 : min(_4862, 1.0));
        float _2938 = dot(vec3(cbLight._m0[_2900].xyz), vec3(_2927, _2928, _2929));
        float _4873 = isnan(0.0) ? _2938 : (isnan(_2938) ? 0.0 : max(_2938, 0.0));
        float _2942 = _2919 * _2919;
        float _2946 = ((_2937 * _2937) * (_2942 + (-1.0))) + 1.0;
        float _2955 = (exp2(log2(1.0 - (isnan(1.0) ? _4873 : (isnan(_4873) ? 1.0 : min(_4873, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2956 = 1.0 - _2919;
        float _2966 = (0.5 / (((_2602 * ((_2933 * _2956) + _2919)) + 9.9999999392252902907785028219223e-09) + (((_2602 * _2956) + _2919) * _2933))) * _2933;
        float _4884 = isnan(0.0) ? _2966 : (isnan(_2966) ? 0.0 : max(_2966, 0.0));
        float _2968 = (isnan(1.0) ? _4884 : (isnan(_4884) ? 1.0 : min(_4884, 1.0))) * (_2942 / ((_2946 * _2946) * 3.141590118408203125));
        float _2969 = isnan(1.0) ? _2342 : (isnan(_2342) ? 1.0 : min(_2342, 1.0));
        _2889 = (((_2955 * cbLight._m0[_2904].x) * _2968) * _2969) + _2783;
        _2891 = (((_2955 * cbLight._m0[_2904].y) * _2968) * _2969) + _2785;
        _2893 = (((_2955 * cbLight._m0[_2904].z) * _2968) * _2969) + _2787;
    }
    float _3035;
    float _3037;
    float _3039;
    float _3041;
    float _3043;
    float _3045;
    if (_2324.y == 0u)
    {
        uvec4 _2990 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2991 = _2990.x;
        uint _3002 = uint((float(_2990.y) * floor(float(uint(cbSceneParam._m0[85u].y * _939) / _2991))) + floor(float(uint(cbSceneParam._m0[85u].x * _938) / _2991)));
        float _3012 = (log2(_2102 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _3013 = isnan(0.0) ? _3012 : (isnan(_3012) ? 0.0 : max(_3012, 0.0));
        uint _3016 = uint(isnan(14.0) ? _3013 : (isnan(_3013) ? 14.0 : min(_3013, 14.0)));
        uvec4 _3021 = texelFetch(g_lightClusterGridBuffer, int(((_3016 << 2u) + (_3002 << 6u)) >> 2u));
        uint _3022 = _3021.x;
        uint _3023 = _2990.z;
        float _3102;
        float _3104;
        float _3106;
        float _3108;
        float _3110;
        float _3112;
        if (((((1u << ((_3023 >> 4u) & 15u)) + 4294967295u) & _3022) == 0u) || ((_3023 & 240u) == 0u))
        {
            _3102 = 0.0;
            _3104 = 0.0;
            _3106 = 0.0;
            _3108 = 0.0;
            _3110 = 0.0;
            _3112 = 0.0;
        }
        else
        {
            float _3103;
            float _3105;
            float _3107;
            float _3109;
            float _3111;
            float _3113;
            float _3255 = 0.0;
            float _3256 = 0.0;
            float _3257 = 0.0;
            float _3258 = 0.0;
            float _3259 = 0.0;
            float _3260 = 0.0;
            uint _3261 = 0u;
            uint _3270;
            bool _3271;
            for (;;)
            {
                _3270 = texelFetch(g_lightClassification, int((((_3016 << 5u) + (_3002 << 9u)) + (_3261 << 2u)) >> 2u)).x;
                _3271 = _3270 == 0u;
                float frontier_phi_71_pred;
                float frontier_phi_71_pred_1;
                float frontier_phi_71_pred_2;
                float frontier_phi_71_pred_3;
                float frontier_phi_71_pred_4;
                float frontier_phi_71_pred_5;
                if (_3271)
                {
                    frontier_phi_71_pred = _3260;
                    frontier_phi_71_pred_1 = _3259;
                    frontier_phi_71_pred_2 = _3258;
                    frontier_phi_71_pred_3 = _3257;
                    frontier_phi_71_pred_4 = _3256;
                    frontier_phi_71_pred_5 = _3255;
                }
                else
                {
                    float _3400;
                    float _3401;
                    float _3402;
                    float _3403;
                    float _3404;
                    float _3405;
                    uint _3406;
                    _3400 = _3255;
                    _3401 = _3256;
                    _3402 = _3257;
                    _3403 = _3258;
                    _3404 = _3259;
                    _3405 = _3260;
                    _3406 = _3270;
                    float _3327;
                    float _3328;
                    float _3329;
                    float _3330;
                    float _3331;
                    float _3332;
                    for (;;)
                    {
                        uint _3410 = uint(findLSB(_3406)) + (_3261 << 5u);
                        uint _3407 = (_3406 + 4294967295u) & _3406;
                        uint _3412 = _3410 * 48u;
                        vec4 _3426 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3412)).x, texelFetch(g_PointLightRenderingBuffer, int(_3412 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3412 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3412 + 3u)).x));
                        uint _3432 = (_3410 * 48u) + 4u;
                        vec4 _3445 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3432)).x, texelFetch(g_PointLightRenderingBuffer, int(_3432 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3432 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3432 + 3u)).x));
                        uint _3451 = (_3410 * 48u) + 8u;
                        vec3 _3462 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3451)).x, texelFetch(g_PointLightRenderingBuffer, int(_3451 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3451 + 2u)).x));
                        float _3466 = _3426.x - _2100;
                        float _3467 = _3426.y - _2101;
                        float _3468 = _3426.z - _2102;
                        float _3469 = dot(vec3(_3466, _3467, _3468), vec3(_3466, _3467, _3468));
                        float _3472 = inversesqrt(_3469);
                        float _3473 = _3472 * _3466;
                        float _3474 = _3472 * _3467;
                        float _3475 = _3472 * _3468;
                        float _3476 = dot(vec3(_957, _960, _963), vec3(_3473, _3474, _3475));
                        float _3481 = 1.0 - (_3469 * _3426.w);
                        float _4910 = isnan(0.0) ? _3481 : (isnan(_3481) ? 0.0 : max(_3481, 0.0));
                        float _3482 = isnan(1.0) ? _4910 : (isnan(_4910) ? 1.0 : min(_4910, 1.0));
                        float _3483 = sqrt(_3469) * _3445.w;
                        float _3486 = 1.39999997615814208984375 / (_3483 + 1.39999997615814208984375);
                        float _3487 = _3486 * _3486;
                        float _3490 = ((1.0 - _3487) * _3476) + _3487;
                        float _3493 = _3483 * _3483;
                        float _3497 = ((isnan(0.0) ? _3490 : (isnan(_3490) ? 0.0 : max(_3490, 0.0))) * _3482) / ((_3493 * 0.699999988079071044921875) + 1.0);
                        float _3501 = (-0.0) - _2100;
                        float _3502 = (-0.0) - _2101;
                        float _3503 = (-0.0) - _2102;
                        float _3507 = inversesqrt(dot(vec3(_3501, _3502, _3503), vec3(_3501, _3502, _3503)));
                        float _3508 = _3507 * _3501;
                        float _3509 = _3507 * _3502;
                        float _3510 = _3507 * _3503;
                        float _3517 = exp2(log2(1.0 / ((_3493 * 3.5) + 5.0)) * 0.25);
                        float _3518 = 1.0 - _1017;
                        float _3525 = sqrt(1.0 - ((1.0 - (_3518 * _3518)) * (1.0 - (_3517 * _3517))));
                        float _3526 = _3525 * _3525;
                        float _3527 = _3526 * _3526;
                        float _3528 = _3508 + _3473;
                        float _3529 = _3509 + _3474;
                        float _3530 = _3510 + _3475;
                        float _3534 = inversesqrt(dot(vec3(_3528, _3529, _3530), vec3(_3528, _3529, _3530)));
                        float _3538 = dot(vec3(_957, _960, _963), vec3(_3508, _3509, _3510));
                        float _4926 = isnan(0.0) ? _3538 : (isnan(_3538) ? 0.0 : max(_3538, 0.0));
                        float _3541 = isnan(1.0) ? _4926 : (isnan(_4926) ? 1.0 : min(_4926, 1.0));
                        float _3542 = dot(vec3(_957, _960, _963), vec3(_3534 * _3528, _3534 * _3529, _3534 * _3530));
                        float _4937 = isnan(0.0) ? _3542 : (isnan(_3542) ? 0.0 : max(_3542, 0.0));
                        float _3545 = isnan(1.0) ? _4937 : (isnan(_4937) ? 1.0 : min(_4937, 1.0));
                        float _3549 = ((_3545 * _3545) * (_3527 + (-1.0))) + 1.0;
                        float _3550 = _3486 * _3526;
                        float _3551 = _3550 * _3550;
                        float _3554 = ((1.0 - _3551) * _3476) + _3551;
                        float _4948 = isnan(0.0) ? _3554 : (isnan(_3554) ? 0.0 : max(_3554, 0.0));
                        float _3555 = isnan(1.0) ? _4948 : (isnan(_4948) ? 1.0 : min(_4948, 1.0));
                        float _3556 = 1.0 - _3526;
                        float _3566 = (0.5 / (((_3555 * ((_3541 * _3556) + _3526)) + 9.9999999392252902907785028219223e-09) + (((_3555 * _3556) + _3526) * _3541))) * _3555;
                        float _4959 = isnan(0.0) ? _3566 : (isnan(_3566) ? 0.0 : max(_3566, 0.0));
                        float _3577 = (((_3527 * 3.1415927410125732421875) * (isnan(1.0) ? _4959 : (isnan(_4959) ? 1.0 : min(_4959, 1.0)))) / ((_3549 * _3549) * ((_3493 * 2.1991131305694580078125) + 3.141590118408203125))) * _3482;
                        _3330 = (_3497 * _3445.x) + _3403;
                        _3331 = (_3497 * _3445.y) + _3404;
                        _3332 = (_3497 * _3445.z) + _3405;
                        _3327 = (_3577 * _3462.x) + _3400;
                        _3328 = (_3577 * _3462.y) + _3401;
                        _3329 = (_3577 * _3462.z) + _3402;
                        if (_3407 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3400 = _3327;
                            _3401 = _3328;
                            _3402 = _3329;
                            _3403 = _3330;
                            _3404 = _3331;
                            _3405 = _3332;
                            _3406 = _3407;
                        }
                    }
                    frontier_phi_71_pred = _3332;
                    frontier_phi_71_pred_1 = _3331;
                    frontier_phi_71_pred_2 = _3330;
                    frontier_phi_71_pred_3 = _3329;
                    frontier_phi_71_pred_4 = _3328;
                    frontier_phi_71_pred_5 = _3327;
                }
                _3113 = frontier_phi_71_pred;
                _3111 = frontier_phi_71_pred_1;
                _3109 = frontier_phi_71_pred_2;
                _3107 = frontier_phi_71_pred_3;
                _3105 = frontier_phi_71_pred_4;
                _3103 = frontier_phi_71_pred_5;
                uint _3262 = _3261 + 1u;
                if (_3262 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3255 = _3103;
                    _3256 = _3105;
                    _3257 = _3107;
                    _3258 = _3109;
                    _3259 = _3111;
                    _3260 = _3113;
                    _3261 = _3262;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3102 = _3103;
            _3104 = _3105;
            _3106 = _3107;
            _3108 = _3109;
            _3110 = _3111;
            _3112 = _3113;
        }
        uvec4 _3116 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3117 = _3116.z;
        uint _3119 = (_3117 >> 8u) & 15u;
        float _3223;
        float _3225;
        float _3227;
        float _3229;
        float _3231;
        float _3233;
        if (((4294967295u << _3119) & _3022) == 0u)
        {
            _3223 = _3102;
            _3225 = _3104;
            _3227 = _3106;
            _3229 = _3108;
            _3231 = _3110;
            _3233 = _3112;
        }
        else
        {
            float _3248 = inversesqrt(dot(vec3(_2100, _2101, _2102), vec3(_2100, _2101, _2102)));
            float _3249 = _3248 * _2100;
            float _3250 = _3248 * _2101;
            float _3251 = _3248 * _2102;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_3119 < ((_3117 >> 12u) & 15u))
            {
                float _3224;
                float _3226;
                float _3228;
                float _3230;
                float _3232;
                float _3234;
                float _3383 = _3102;
                float _3384 = _3104;
                float _3385 = _3106;
                float _3386 = _3108;
                float _3387 = _3110;
                float _3388 = _3112;
                uint _3389 = _3119;
                uint _3398;
                bool _3399;
                for (;;)
                {
                    _3398 = texelFetch(g_lightClassification, int((((_3016 << 5u) + (_3002 << 9u)) + (_3389 << 2u)) >> 2u)).x;
                    _3399 = _3398 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    float frontier_phi_82_pred_3;
                    float frontier_phi_82_pred_4;
                    float frontier_phi_82_pred_5;
                    if (_3399)
                    {
                        frontier_phi_82_pred = _3388;
                        frontier_phi_82_pred_1 = _3387;
                        frontier_phi_82_pred_2 = _3386;
                        frontier_phi_82_pred_3 = _3385;
                        frontier_phi_82_pred_4 = _3384;
                        frontier_phi_82_pred_5 = _3383;
                    }
                    else
                    {
                        float _3591;
                        float _3592;
                        float _3593;
                        float _3594;
                        float _3595;
                        float _3596;
                        float _3884;
                        float _3885;
                        float _3886;
                        float _3887;
                        float _3888;
                        float _3889;
                        float _3604 = _3383;
                        float _3605 = _3384;
                        float _3606 = _3385;
                        float _3607 = _3386;
                        float _3608 = _3387;
                        float _3609 = _3388;
                        uint _3610 = _3398;
                        uint _3611;
                        vec4 _3636;
                        float _3637;
                        vec4 _3652;
                        vec3 _3664;
                        vec4 _3679;
                        vec4 _3694;
                        float _3740;
                        bool _3741;
                        for (;;)
                        {
                            uint _3621 = ((_3389 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3610));
                            _3611 = (_3610 + 4294967295u) & _3610;
                            uint _3623 = _3621 * 40u;
                            _3636 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3623)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3623 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3623 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3623 + 3u)).x));
                            _3637 = _3636.w;
                            uint _3639 = (_3621 * 40u) + 4u;
                            _3652 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3639)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3639 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3639 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3639 + 3u)).x));
                            uint _3654 = (_3621 * 40u) + 8u;
                            _3664 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3654)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3654 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3654 + 2u)).x));
                            uint _3666 = (_3621 * 40u) + 16u;
                            _3679 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3666)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3666 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3666 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3666 + 3u)).x));
                            uint _3681 = (_3621 * 40u) + 20u;
                            _3694 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3681)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3681 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3681 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3681 + 3u)).x));
                            uint _3696 = (_3621 * 40u) + 24u;
                            vec4 _3709 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3696)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3696 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3696 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3696 + 3u)).x));
                            uint _3715 = (_3621 * 40u) + 28u;
                            vec4 _3728 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3715)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3715 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3715 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3715 + 3u)).x));
                            _3740 = fma(_2102, _3728.z, fma(_2101, _3728.y, _3728.x * _2100)) + _3728.w;
                            _3741 = !((fma(_2102, _3709.z, fma(_2101, _3709.y, _3709.x * _2100)) + _3709.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_3741)
                            {
                                float _3768 = _3636.x - _2100;
                                float _3769 = _3636.y - _2101;
                                float _3770 = _3636.z - _2102;
                                float _3771 = dot(vec3(_3768, _3769, _3770), vec3(_3768, _3769, _3770));
                                float _3774 = inversesqrt(_3771);
                                float _3775 = _3774 * _3768;
                                float _3776 = _3774 * _3769;
                                float _3777 = _3774 * _3770;
                                float _3781 = 1.0 - (_3771 / (_3637 * _3637));
                                float _4970 = isnan(0.0) ? _3781 : (isnan(_3781) ? 0.0 : max(_3781, 0.0));
                                float _3782 = isnan(1.0) ? _4970 : (isnan(_4970) ? 1.0 : min(_4970, 1.0));
                                float _3786 = sqrt(_3771) * _3652.w;
                                float _3788 = 1.39999997615814208984375 / (_3786 + 1.39999997615814208984375);
                                float _3789 = _3788 * _3788;
                                float _3792 = ((1.0 - _3789) * dot(vec3(_3775, _3776, _3777), vec3(_957, _960, _963))) + _3789;
                                float _3795 = _3786 * _3786;
                                float _3799 = (fma(_2102, _3679.z, fma(_2101, _3679.y, _3679.x * _2100)) + _3679.w) / _3740;
                                float _3800 = (fma(_2102, _3694.z, fma(_2101, _3694.y, _3694.x * _2100)) + _3694.w) / _3740;
                                float _3804 = 1.0 - dot(vec2(_3799, _3800), vec2(_3799, _3800));
                                float _4986 = isnan(0.0) ? _3804 : (isnan(_3804) ? 0.0 : max(_3804, 0.0));
                                float _3805 = isnan(1.0) ? _4986 : (isnan(_4986) ? 1.0 : min(_4986, 1.0));
                                float _3806 = _3805 * (((isnan(0.0) ? _3792 : (isnan(_3792) ? 0.0 : max(_3792, 0.0))) * _3782) / ((_3795 * 0.699999988079071044921875) + 1.0));
                                float _3818 = exp2(log2(1.0 / ((_3795 * 3.5) + 5.0)) * 0.25);
                                float _3819 = 1.0 - _1017;
                                float _3826 = sqrt(1.0 - ((1.0 - (_3819 * _3819)) * (1.0 - (_3818 * _3818))));
                                float _3827 = _3826 * _3826;
                                float _3828 = _3827 * _3827;
                                float _3829 = _3775 - _3249;
                                float _3830 = _3776 - _3250;
                                float _3831 = _3777 - _3251;
                                float _3835 = inversesqrt(dot(vec3(_3829, _3830, _3831), vec3(_3829, _3830, _3831)));
                                float _3839 = dot(vec3(_957, _960, _963), vec3((-0.0) - _3249, (-0.0) - _3250, (-0.0) - _3251));
                                float _4997 = isnan(0.0) ? _3839 : (isnan(_3839) ? 0.0 : max(_3839, 0.0));
                                float _3842 = isnan(1.0) ? _4997 : (isnan(_4997) ? 1.0 : min(_4997, 1.0));
                                float _3843 = dot(vec3(_957, _960, _963), vec3(_3835 * _3829, _3835 * _3830, _3835 * _3831));
                                float _5008 = isnan(0.0) ? _3843 : (isnan(_3843) ? 0.0 : max(_3843, 0.0));
                                float _3846 = isnan(1.0) ? _5008 : (isnan(_5008) ? 1.0 : min(_5008, 1.0));
                                float _3850 = ((_3846 * _3846) * (_3828 + (-1.0))) + 1.0;
                                float _3851 = _3788 * _3827;
                                float _3852 = _3851 * _3851;
                                float _3858 = ((1.0 - _3852) * dot(vec3(_957, _960, _963), vec3(_3775, _3776, _3777))) + _3852;
                                float _5019 = isnan(0.0) ? _3858 : (isnan(_3858) ? 0.0 : max(_3858, 0.0));
                                float _3859 = isnan(1.0) ? _5019 : (isnan(_5019) ? 1.0 : min(_5019, 1.0));
                                float _3860 = 1.0 - _3827;
                                float _3870 = (0.5 / (((_3859 * ((_3842 * _3860) + _3827)) + 9.9999999392252902907785028219223e-09) + (((_3859 * _3860) + _3827) * _3842))) * _3859;
                                float _5030 = isnan(0.0) ? _3870 : (isnan(_3870) ? 0.0 : max(_3870, 0.0));
                                float _3880 = (_3805 * _3782) * (((_3828 * 3.1415927410125732421875) * (isnan(1.0) ? _5030 : (isnan(_5030) ? 1.0 : min(_5030, 1.0)))) / ((_3850 * _3850) * ((_3795 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_88_pred = _3806 * _3652.z;
                                frontier_phi_88_pred_1 = _3806 * _3652.y;
                                frontier_phi_88_pred_2 = _3806 * _3652.x;
                                frontier_phi_88_pred_3 = _3880 * _3664.z;
                                frontier_phi_88_pred_4 = _3880 * _3664.y;
                                frontier_phi_88_pred_5 = _3880 * _3664.x;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _3889 = frontier_phi_88_pred;
                            _3888 = frontier_phi_88_pred_1;
                            _3887 = frontier_phi_88_pred_2;
                            _3886 = frontier_phi_88_pred_3;
                            _3885 = frontier_phi_88_pred_4;
                            _3884 = frontier_phi_88_pred_5;
                            _3594 = _3887 + _3607;
                            _3595 = _3888 + _3608;
                            _3596 = _3889 + _3609;
                            _3591 = _3884 + _3604;
                            _3592 = _3885 + _3605;
                            _3593 = _3886 + _3606;
                            if (_3611 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3604 = _3591;
                                _3605 = _3592;
                                _3606 = _3593;
                                _3607 = _3594;
                                _3608 = _3595;
                                _3609 = _3596;
                                _3610 = _3611;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _3596;
                        frontier_phi_82_pred_1 = _3595;
                        frontier_phi_82_pred_2 = _3594;
                        frontier_phi_82_pred_3 = _3593;
                        frontier_phi_82_pred_4 = _3592;
                        frontier_phi_82_pred_5 = _3591;
                    }
                    _3234 = frontier_phi_82_pred;
                    _3232 = frontier_phi_82_pred_1;
                    _3230 = frontier_phi_82_pred_2;
                    _3228 = frontier_phi_82_pred_3;
                    _3226 = frontier_phi_82_pred_4;
                    _3224 = frontier_phi_82_pred_5;
                    uint _3390 = _3389 + 1u;
                    if (_3390 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3383 = _3224;
                        _3384 = _3226;
                        _3385 = _3228;
                        _3386 = _3230;
                        _3387 = _3232;
                        _3388 = _3234;
                        _3389 = _3390;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _3230;
                frontier_phi_63_64_ladder_1 = _3234;
                frontier_phi_63_64_ladder_2 = _3232;
                frontier_phi_63_64_ladder_3 = _3228;
                frontier_phi_63_64_ladder_4 = _3226;
                frontier_phi_63_64_ladder_5 = _3224;
            }
            else
            {
                frontier_phi_63_64_ladder = _3108;
                frontier_phi_63_64_ladder_1 = _3112;
                frontier_phi_63_64_ladder_2 = _3110;
                frontier_phi_63_64_ladder_3 = _3106;
                frontier_phi_63_64_ladder_4 = _3104;
                frontier_phi_63_64_ladder_5 = _3102;
            }
            _3223 = frontier_phi_63_64_ladder_5;
            _3225 = frontier_phi_63_64_ladder_4;
            _3227 = frontier_phi_63_64_ladder_3;
            _3229 = frontier_phi_63_64_ladder;
            _3231 = frontier_phi_63_64_ladder_2;
            _3233 = frontier_phi_63_64_ladder_1;
        }
        float _3238 = isnan(1.0) ? _1001 : (isnan(_1001) ? 1.0 : min(_1001, 1.0));
        _3035 = (_3238 * _3229) + _2566;
        _3037 = (_3238 * _3231) + _2568;
        _3039 = (_3238 * _3233) + _2570;
        _3041 = ((_3223 * 0.039999999105930328369140625) * _3238) + _2889;
        _3043 = ((_3225 * 0.039999999105930328369140625) * _3238) + _2891;
        _3045 = ((_3227 * 0.039999999105930328369140625) * _3238) + _2893;
    }
    else
    {
        _3035 = _2566;
        _3037 = _2568;
        _3039 = _2570;
        _3041 = _2889;
        _3043 = _2891;
        _3045 = _2893;
    }
    float _5046 = isnan(0.0) ? _986 : (isnan(_986) ? 0.0 : max(_986, 0.0));
    float _5057 = isnan(0.0) ? _987 : (isnan(_987) ? 0.0 : max(_987, 0.0));
    float _5068 = isnan(0.0) ? _988 : (isnan(_988) ? 0.0 : max(_988, 0.0));
    float _3062 = ((isnan(1.0) ? _5046 : (isnan(_5046) ? 1.0 : min(_5046, 1.0))) * (_3035 + ((isnan(0.0) ? _1756 : (isnan(_1756) ? 0.0 : max(_1756, 0.0))) * _1001))) + ((_3041 + ((isnan(0.0) ? _2047 : (isnan(_2047) ? 0.0 : max(_2047, 0.0))) * _1835)) * cbPerFrame._m0[3u].x);
    float _3063 = ((isnan(1.0) ? _5057 : (isnan(_5057) ? 1.0 : min(_5057, 1.0))) * (_3037 + ((isnan(0.0) ? _1759 : (isnan(_1759) ? 0.0 : max(_1759, 0.0))) * _1001))) + ((_3043 + ((isnan(0.0) ? _2050 : (isnan(_2050) ? 0.0 : max(_2050, 0.0))) * _1835)) * cbPerFrame._m0[3u].x);
    float _3064 = ((isnan(1.0) ? _5068 : (isnan(_5068) ? 1.0 : min(_5068, 1.0))) * (_3039 + ((isnan(0.0) ? _1762 : (isnan(_1762) ? 0.0 : max(_1762, 0.0))) * _1001))) + ((_3045 + ((isnan(0.0) ? _2053 : (isnan(_2053) ? 0.0 : max(_2053, 0.0))) * _1835)) * cbPerFrame._m0[3u].x);
    uint _3065 = _252 + 6u;
    float _3073 = _938 / cbSceneParam._m0[86u].x;
    float _3074 = _939 / cbSceneParam._m0[86u].y;
    vec4 _3088 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3073, _3074, (log2((isnan(cbSceneParam._m0[77u].w) ? _860 : (isnan(_860) ? cbSceneParam._m0[77u].w : min(_860, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3090 = _3088.x;
    float _3091 = _3088.y;
    float _3092 = _3088.z;
    float _3093 = _3088.w;
    float _3165;
    float _3167;
    float _3169;
    float _3171;
    if (_860 > cbSceneParam._m0[78u].w)
    {
        float _3127 = isnan(_860) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _860 : min(cbSceneParam._m0[80u].w, _860));
        float _3128 = _3127 / _860;
        float _3139 = _3128 * _911;
        float _3140 = _912 * _3128;
        float _3141 = (-0.0) - _3140;
        float _3143 = _3128 * _913;
        float _3145 = (cbSceneParam._m0[77u].w * _3141) / _3127;
        float _3146 = _3145 + cbSceneParam._m0[79u].w;
        float _3147 = cbSceneParam._m0[79u].w - _3140;
        float _3153 = sqrt(((_3139 * _3139) + (_3140 * _3140)) + (_3143 * _3143));
        float _3156 = (1.0 - (cbSceneParam._m0[77u].w / _3127)) * _3153;
        float _3161 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3163 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3340;
        if (abs((_3141 - _3145) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3340 = ((((_3146 > 0.0) ? exp2(_3161 * _3146) : (2.0 - exp2(_3163 * _3146))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3156;
        }
        else
        {
            float _3284 = 1.0 / cbSceneParam._m0[80u].x;
            float _3285 = isnan(_3147) ? _3146 : (isnan(_3146) ? _3147 : max(_3146, _3147));
            float _3286 = isnan(_3147) ? _3146 : (isnan(_3146) ? _3147 : min(_3146, _3147));
            float _3295 = isnan(0.0) ? _3285 : (isnan(_3285) ? 0.0 : min(_3285, 0.0));
            float _3296 = isnan(0.0) ? _3286 : (isnan(_3286) ? 0.0 : min(_3286, 0.0));
            _3340 = ((abs(_3153 / _3141) * cbSceneParam._m0[80u].y) * ((((_3295 - _3296) * 2.0) - ((exp2(_3161 * (isnan(0.0) ? _3285 : (isnan(_3285) ? 0.0 : max(_3285, 0.0)))) - exp2(_3161 * (isnan(0.0) ? _3286 : (isnan(_3286) ? 0.0 : max(_3286, 0.0))))) * _3284)) - ((exp2(_3163 * _3295) - exp2(_3163 * _3296)) * _3284))) + (_3156 * cbSceneParam._m0[80u].z);
        }
        vec4 _3342 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3073, _3074, 1.0), 0.0);
        float _3351 = exp2((_3340 * (-1.44269502162933349609375)) * (1.0 - _3342.w));
        float _3352 = log2(_3351);
        float _3368 = log2(_3093);
        _3165 = (exp2(_3368 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3352 * cbSceneParam._m0[78u].x)) * _3342.x) / cbSceneParam._m0[78u].x)) + _3090;
        _3167 = (exp2(_3368 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3352 * cbSceneParam._m0[78u].y)) * _3342.y) / cbSceneParam._m0[78u].y)) + _3091;
        _3169 = (exp2(_3368 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3352 * cbSceneParam._m0[78u].z)) * _3342.z) / cbSceneParam._m0[78u].z)) + _3092;
        _3171 = _3351 * _3093;
    }
    else
    {
        _3165 = _3090;
        _3167 = _3091;
        _3169 = _3092;
        _3171 = _3093;
    }
    bool _3378;
    vec4 _3181;
    vec4 _3203;
    float _3205;
    float _3209;
    float _3210;
    float _3211;
    float _3212;
    bool _3222;
    for (;;)
    {
        _3181 = cbMatDynParam._m0[0u];
        float _3183 = roundEven(_3181.y);
        bool _3184 = _3183 == 3.0;
        float _3185 = log2(_3171);
        float _3192 = exp2(_3185 * cbSceneParam._m0[78u].x) * _3062;
        float _3193 = exp2(_3185 * cbSceneParam._m0[78u].y) * _3063;
        float _3194 = exp2(_3185 * cbSceneParam._m0[78u].z) * _3064;
        float _3201 = _927 + (-0.5);
        _3203 = cbMtdParam._m0[1u];
        _3205 = _3203.y * _3201;
        float _3208 = (_3183 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3209 = _3208 * (_3184 ? _3192 : (_3192 + (cbSceneParam._m0[72u].w * _3165)));
        _3210 = _3208 * (_3184 ? _3193 : (_3193 + (cbSceneParam._m0[72u].w * _3167)));
        _3211 = _3208 * (_3184 ? _3194 : (_3194 + (cbSceneParam._m0[72u].w * _3169)));
        _3212 = _3201 * 0.999000012874603271484375;
        _3222 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3222)
        {
            if ((cbInstanceData._m0[_252 + 7u].x + _3212) < 0.5)
            {
                _3378 = true;
                break;
            }
        }
        uint _3319 = _976 + uint(_3181.w);
        if ((cbInstanceData._m0[_3319].w < 1.0) && ((cbInstanceData._m0[_3319].w + _3212) < 0.5))
        {
            _3378 = true;
            break;
        }
        if ((_3205 + 1.0) < _3203.x)
        {
            _3378 = true;
            break;
        }
        _3378 = false;
        break;
    }
    float _3582;
    if (_3378)
    {
        discard_state = true;
        _3582 = 0.0;
    }
    else
    {
        _3582 = cbInstanceData._m0[_3065].w;
    }
    SV_Target.x = _3209;
    SV_Target.y = _3210;
    SV_Target.z = _3211;
    SV_Target.w = _3582;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_3065].w;
    discard_exit();
}


