#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_0;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_6;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1148;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _208 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _209 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _210 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _216 = inversesqrt(dot(vec3(_208, _209, _210), vec3(_208, _209, _210)));
    float _223 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _230 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _236 = uint(roundEven(NORMAL.w)) * 13u;
    uint _242 = _236 + 1u;
    uint _246 = _236 + 2u;
    float _255 = sqrt(((cbInstanceData._m0[_242].x * cbInstanceData._m0[_242].x) + (cbInstanceData._m0[_236].x * cbInstanceData._m0[_236].x)) + (cbInstanceData._m0[_246].x * cbInstanceData._m0[_246].x));
    float _256 = _255 * TEXCOORD.z;
    float _257 = _255 * TEXCOORD.w;
    vec4 _276 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _300 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _305 = _300.x * cbMtdParam._m0[11u].x;
    float _306 = _300.y * cbMtdParam._m0[11u].y;
    float _307 = _300.z * cbMtdParam._m0[11u].z;
    vec4 _326 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _256) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _257) + cbTextureTilingScale._m0[5u].w));
    vec4 _380 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _382 = _380.x;
    float _394 = dot(vec4(_382, _380.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _411 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w)).x) * 2.0) - ((((_382 - _394) * cbMtdParam._m0[24u].z) + _394) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3738 = isnan(0.0) ? _411 : (isnan(_411) ? 0.0 : max(_411, 0.0));
    float _412 = isnan(1.0) ? _3738 : (isnan(_3738) ? 1.0 : min(_3738, 1.0));
    float _425 = ((cbMtdParam._m0[9u].x * 4.55000019073486328125) * _276.x) * ((_412 * ((_326.x * cbMtdParam._m0[12u].x) - _305)) + _305);
    float _428 = ((cbMtdParam._m0[9u].y * 4.55000019073486328125) * _276.y) * ((_412 * ((_326.y * cbMtdParam._m0[12u].y) - _306)) + _306);
    float _431 = ((cbMtdParam._m0[9u].z * 4.55000019073486328125) * _276.z) * ((_412 * ((_326.z * cbMtdParam._m0[12u].z) - _307)) + _307);
    vec4 _449 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _256) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _257) + cbTextureTilingScale._m0[4u].w));
    vec4 _466 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _468 = _466.x;
    float _469 = _466.y;
    float _470 = _466.z;
    float _479 = ((_449.z - _470) * _412) + _470;
    float _482 = ((((_449.x - _468) * _412) + _468) * 2.0) + (-1.0);
    float _484 = ((((_449.y - _469) * _412) + _469) * 2.0) + (-1.0);
    float _485 = dot(vec2(_482, _484), vec2(_482, _484));
    float _3749 = isnan(0.0) ? _485 : (isnan(_485) ? 0.0 : max(_485, 0.0));
    float _490 = sqrt(1.0 - (isnan(1.0) ? _3749 : (isnan(_3749) ? 1.0 : min(_3749, 1.0))));
    vec4 _506 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _531 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _256) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _257) + cbTextureTilingScale._m0[11u].w));
    float _533 = _531.x;
    float _534 = 1.0 - _533;
    float _547 = (TEXCOORD_8.w - ((cbMtdParam._m0[21u].z * (1.0 - TEXCOORD_8.w)) * ((((_533 - _534) * cbMtdParam._m0[24u].w) + _534) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3760 = isnan(0.0) ? _547 : (isnan(_547) ? 0.0 : max(_547, 0.0));
    float _548 = isnan(1.0) ? _3760 : (isnan(_3760) ? 1.0 : min(_3760, 1.0));
    float _555 = (_548 * (cbMtdParam._m0[17u].x - _425)) + _425;
    float _556 = (_548 * (cbMtdParam._m0[17u].y - _428)) + _428;
    float _557 = (_548 * (cbMtdParam._m0[17u].z - _431)) + _431;
    float _561 = (cbMtdParam._m0[19u].w * (_506.z - _479)) + _479;
    vec4 _574 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _256) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _257) + cbTextureTilingScale._m0[15u].w));
    float _581 = (_574.x * 2.0) + (-1.0);
    float _582 = (_574.y * 2.0) + (-1.0);
    float _583 = dot(vec2(_581, _582), vec2(_581, _582));
    float _3771 = isnan(0.0) ? _583 : (isnan(_583) ? 0.0 : max(_583, 0.0));
    float _591 = (_548 * (_574.z - _561)) + _561;
    float _594 = (((_506.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _482;
    float _595 = (((_506.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _484;
    float _607 = (((_581 - _594) + (cbMtdParam._m0[21u].x * _594)) * _548) + _594;
    float _608 = (((_582 - _595) + (cbMtdParam._m0[21u].x * _595)) * _548) + _595;
    float _609 = (_548 * (sqrt(1.0 - (isnan(1.0) ? _3771 : (isnan(_3771) ? 1.0 : min(_3771, 1.0)))) - _490)) + _490;
    float _613 = cbMtdParam._m0[22u].x + _506.w;
    float _616 = fma(_609, _223 * NORMAL.x, fma(_608, _230 * TANGENT.x, (_216 * _208) * _607));
    float _619 = fma(_609, _223 * NORMAL.y, fma(_608, _230 * TANGENT.y, (_216 * _209) * _607));
    float _622 = fma(_609, _223 * NORMAL.z, fma(_608, _230 * TANGENT.z, (_216 * _210) * _607));
    float _626 = inversesqrt(dot(vec3(_616, _619, _622), vec3(_616, _619, _622)));
    float _627 = _626 * _616;
    float _628 = _626 * _619;
    float _629 = _626 * _622;
    float _3782 = isnan(0.0) ? _591 : (isnan(_591) ? 0.0 : max(_591, 0.0));
    float _630 = isnan(1.0) ? _3782 : (isnan(_3782) ? 1.0 : min(_3782, 1.0));
    float _3793 = isnan(0.0) ? _613 : (isnan(_613) ? 0.0 : max(_613, 0.0));
    float _3804 = isnan(0.0) ? _555 : (isnan(_555) ? 0.0 : max(_555, 0.0));
    float _3815 = isnan(0.0) ? _556 : (isnan(_556) ? 0.0 : max(_556, 0.0));
    float _3826 = isnan(0.0) ? _557 : (isnan(_557) ? 0.0 : max(_557, 0.0));
    float _648 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _689 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _699 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _689);
    float _700 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _689);
    float _701 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _689);
    float _705 = inversesqrt(dot(vec3(_699, _700, _701), vec3(_699, _700, _701)));
    float _706 = _699 * _705;
    float _707 = _700 * _705;
    float _708 = _701 * _705;
    float _714 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _715 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _733 = fma(_629, cbSceneParam._m0[5u].z, fma(_628, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _627));
    float _736 = fma(_629, cbSceneParam._m0[6u].z, fma(_628, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _627));
    float _739 = fma(_629, cbSceneParam._m0[7u].z, fma(_628, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _627));
    uint _753 = (_236 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _759 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3804 : (isnan(_3804) ? 1.0 : min(_3804, 1.0)))) * cbInstanceData._m0[_753].x;
    float _760 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3815 : (isnan(_3815) ? 1.0 : min(_3815, 1.0)))) * cbInstanceData._m0[_753].y;
    float _761 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3826 : (isnan(_3826) ? 1.0 : min(_3826, 1.0)))) * cbInstanceData._m0[_753].z;
    float _3837 = isnan(0.0) ? _759 : (isnan(_759) ? 0.0 : max(_759, 0.0));
    float _762 = isnan(1.0) ? _3837 : (isnan(_3837) ? 1.0 : min(_3837, 1.0));
    float _3848 = isnan(0.0) ? _760 : (isnan(_760) ? 0.0 : max(_760, 0.0));
    float _763 = isnan(1.0) ? _3848 : (isnan(_3848) ? 1.0 : min(_3848, 1.0));
    float _3859 = isnan(0.0) ? _761 : (isnan(_761) ? 0.0 : max(_761, 0.0));
    float _764 = isnan(1.0) ? _3859 : (isnan(_3859) ? 1.0 : min(_3859, 1.0));
    vec4 _773 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _714, cbSceneParam._m0[86u].y * _715));
    float _777 = ((isnan(1.0) ? _3793 : (isnan(_3793) ? 1.0 : min(_3793, 1.0))) * TEXCOORD_5.w) * _773.x;
    float _778 = dot(vec3(_627, _628, _629), vec3(_706, _707, _708));
    float _781 = _778 * 2.0;
    float _785 = (_781 * _627) - _706;
    float _786 = (_781 * _628) - _707;
    float _787 = (_781 * _629) - _708;
    float _791 = abs(dot(vec3(_706, _707, _708), vec3(_627, _628, _629)));
    float _3870 = isnan(0.0) ? _791 : (isnan(_791) ? 0.0 : max(_791, 0.0));
    float _793 = sqrt(_630);
    float _806 = exp2((_793 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3870 : (isnan(_3870) ? 1.0 : min(_3870, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_793 * 3.0));
    float _838 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _842 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _846 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1147;
    float _1149;
    float _1150;
    float _1151;
    float _1152;
    float _1153;
    float _1154;
    float _1155;
    float _1156;
    float _1157;
    float _1158;
    float _1159;
    float _1160;
    float _1161;
    float _1162;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _872 = fma(_846, cbModelParam._m0[26u].z, fma(_842, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _838));
        float _876 = fma(_846, cbModelParam._m0[27u].z, fma(_842, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _838));
        float _880 = fma(_846, cbModelParam._m0[28u].z, fma(_842, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _838));
        float _905 = _838 + _627;
        float _906 = _842 + _628;
        float _907 = _846 + _629;
        float _917 = fma(_907, cbModelParam._m0[26u].z, fma(_906, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _905)) - _872;
        float _918 = fma(_907, cbModelParam._m0[27u].z, fma(_906, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _905)) - _876;
        float _919 = fma(_907, cbModelParam._m0[28u].z, fma(_906, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _905)) - _880;
        float _923 = inversesqrt(dot(vec3(_917, _918, _919), vec3(_917, _918, _919)));
        float _936 = ((_923 * _917) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_872 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _937 = ((_923 * _918) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_876 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _938 = ((_923 * _919) / cbModelParam._m0[34u].z) + ((((((_880 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _941 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_936, _937, _938), 0.0);
        vec4 _948 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_936, _937, _938), 0.0);
        vec4 _955 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_936, _937, _938), 0.0);
        vec4 _962 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_936, _937, _938), 0.0);
        float _975 = exp2((_941.w + (-0.5)) * 20.0) * 2.0;
        float _976 = _975 * (_941.x + (-0.5));
        float _977 = _975 * (_941.y + (-0.5));
        float _978 = _975 * (_941.z + (-0.5));
        float _985 = exp2((_948.w + (-0.5)) * 20.0) * 2.0;
        float _986 = _985 * (_948.x + (-0.5));
        float _987 = _985 * (_948.y + (-0.5));
        float _988 = _985 * (_948.z + (-0.5));
        float _995 = exp2((_955.w + (-0.5)) * 20.0) * 2.0;
        float _996 = _995 * (_955.x + (-0.5));
        float _997 = _995 * (_955.y + (-0.5));
        float _998 = _995 * (_955.z + (-0.5));
        float _1005 = exp2((_962.w + (-0.5)) * 20.0) * 2.0;
        float _1006 = _1005 * (_962.x + (-0.5));
        float _1007 = _1005 * (_962.y + (-0.5));
        float _1008 = _1005 * (_962.z + (-0.5));
        float _1009 = isnan(0.0) ? _1006 : (isnan(_1006) ? 0.0 : max(_1006, 0.0));
        float _1010 = isnan(0.0) ? _1007 : (isnan(_1007) ? 0.0 : max(_1007, 0.0));
        float _1011 = isnan(0.0) ? _1008 : (isnan(_1008) ? 0.0 : max(_1008, 0.0));
        float _1012 = _976 * 0.5;
        float _1013 = _986 * 0.5;
        float _1014 = _996 * 0.5;
        float _1015 = dot(vec3(_1012, _1013, _1014), vec3(_1012, _1013, _1014));
        float _1020 = (_1015 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1015);
        float _1029 = (dot(vec3(_627, _628, _629), vec3(_1020 * _1012, _1020 * _1013, _1020 * _1014)) + 1.0) * 0.5;
        float _3896 = isnan(0.0) ? _1029 : (isnan(_1029) ? 0.0 : max(_1029, 0.0));
        float _1039 = sqrt(((_1013 * _1013) + (_1012 * _1012)) + (_1014 * _1014)) / (_1009 + 9.9999997473787516355514526367188e-06);
        float _3907 = isnan(0.0) ? _1039 : (isnan(_1039) ? 0.0 : max(_1039, 0.0));
        float _1040 = isnan(1.0) ? _3907 : (isnan(_3907) ? 1.0 : min(_3907, 1.0));
        float _1041 = _1040 * 2.0;
        float _1045 = (1.0 - _1040) / (_1040 + 1.0);
        float _3918 = isnan(0.0) ? _1045 : (isnan(_1045) ? 0.0 : max(_1045, 0.0));
        float _1046 = isnan(1.0) ? _3918 : (isnan(_3918) ? 1.0 : min(_3918, 1.0));
        float _1055 = ((((1.0 - _1046) * (_1041 + 2.0)) * exp2(log2(isnan(1.0) ? _3896 : (isnan(_3896) ? 1.0 : min(_3896, 1.0))) * (_1041 + 1.0))) + _1046) * _1009;
        float _1056 = _977 * 0.5;
        float _1057 = _987 * 0.5;
        float _1058 = _997 * 0.5;
        float _1059 = dot(vec3(_1056, _1057, _1058), vec3(_1056, _1057, _1058));
        float _1064 = (_1059 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1059);
        float _1072 = (dot(vec3(_627, _628, _629), vec3(_1064 * _1056, _1064 * _1057, _1064 * _1058)) + 1.0) * 0.5;
        float _3929 = isnan(0.0) ? _1072 : (isnan(_1072) ? 0.0 : max(_1072, 0.0));
        float _1081 = sqrt(((_1057 * _1057) + (_1056 * _1056)) + (_1058 * _1058)) / (_1010 + 9.9999997473787516355514526367188e-06);
        float _3940 = isnan(0.0) ? _1081 : (isnan(_1081) ? 0.0 : max(_1081, 0.0));
        float _1082 = isnan(1.0) ? _3940 : (isnan(_3940) ? 1.0 : min(_3940, 1.0));
        float _1083 = _1082 * 2.0;
        float _1087 = (1.0 - _1082) / (_1082 + 1.0);
        float _3951 = isnan(0.0) ? _1087 : (isnan(_1087) ? 0.0 : max(_1087, 0.0));
        float _1088 = isnan(1.0) ? _3951 : (isnan(_3951) ? 1.0 : min(_3951, 1.0));
        float _1097 = ((((1.0 - _1088) * (_1083 + 2.0)) * exp2(log2(isnan(1.0) ? _3929 : (isnan(_3929) ? 1.0 : min(_3929, 1.0))) * (_1083 + 1.0))) + _1088) * _1010;
        float _1098 = _978 * 0.5;
        float _1099 = _988 * 0.5;
        float _1100 = _998 * 0.5;
        float _1101 = dot(vec3(_1098, _1099, _1100), vec3(_1098, _1099, _1100));
        float _1106 = (_1101 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1101);
        float _1114 = (dot(vec3(_627, _628, _629), vec3(_1106 * _1098, _1106 * _1099, _1106 * _1100)) + 1.0) * 0.5;
        float _3962 = isnan(0.0) ? _1114 : (isnan(_1114) ? 0.0 : max(_1114, 0.0));
        float _1123 = sqrt(((_1099 * _1099) + (_1098 * _1098)) + (_1100 * _1100)) / (_1011 + 9.9999997473787516355514526367188e-06);
        float _3973 = isnan(0.0) ? _1123 : (isnan(_1123) ? 0.0 : max(_1123, 0.0));
        float _1124 = isnan(1.0) ? _3973 : (isnan(_3973) ? 1.0 : min(_3973, 1.0));
        float _1125 = _1124 * 2.0;
        float _1129 = (1.0 - _1124) / (_1124 + 1.0);
        float _3984 = isnan(0.0) ? _1129 : (isnan(_1129) ? 0.0 : max(_1129, 0.0));
        float _1130 = isnan(1.0) ? _3984 : (isnan(_3984) ? 1.0 : min(_3984, 1.0));
        float _1139 = ((((1.0 - _1130) * (_1125 + 2.0)) * exp2(log2(isnan(1.0) ? _3962 : (isnan(_3962) ? 1.0 : min(_3962, 1.0))) * (_1125 + 1.0))) + _1130) * _1011;
        _1147 = _978;
        _1149 = _977;
        _1150 = _976;
        _1151 = _988;
        _1152 = _987;
        _1153 = _986;
        _1154 = _998;
        _1155 = _997;
        _1156 = _996;
        _1157 = _1011;
        _1158 = _1010;
        _1159 = _1009;
        _1160 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1055 : (isnan(_1055) ? 0.0 : max(_1055, 0.0)));
        _1161 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1097 : (isnan(_1097) ? 0.0 : max(_1097, 0.0)));
        _1162 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1139 : (isnan(_1139) ? 0.0 : max(_1139, 0.0)));
    }
    else
    {
        _1147 = _1148;
        _1149 = _1148;
        _1150 = _1148;
        _1151 = _1148;
        _1152 = _1148;
        _1153 = _1148;
        _1154 = _1148;
        _1155 = _1148;
        _1156 = _1148;
        _1157 = _1148;
        _1158 = _1148;
        _1159 = _1148;
        _1160 = 0.0;
        _1161 = 0.0;
        _1162 = 0.0;
    }
    float _1456;
    float _1457;
    float _1458;
    float _1459;
    float _1460;
    float _1461;
    float _1462;
    float _1463;
    float _1464;
    float _1465;
    float _1466;
    float _1467;
    float _1468;
    float _1469;
    float _1470;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1187 = fma(_846, cbModelParam._m0[30u].z, fma(_842, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _838));
        float _1191 = fma(_846, cbModelParam._m0[31u].z, fma(_842, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _838));
        float _1195 = fma(_846, cbModelParam._m0[32u].z, fma(_842, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _838));
        float _1218 = _838 + _627;
        float _1219 = _842 + _628;
        float _1220 = _846 + _629;
        float _1230 = fma(_1220, cbModelParam._m0[30u].z, fma(_1219, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1218)) - _1187;
        float _1231 = fma(_1220, cbModelParam._m0[31u].z, fma(_1219, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1218)) - _1191;
        float _1232 = fma(_1220, cbModelParam._m0[32u].z, fma(_1219, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1218)) - _1195;
        float _1236 = inversesqrt(dot(vec3(_1230, _1231, _1232), vec3(_1230, _1231, _1232)));
        float _1249 = ((_1236 * _1230) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1187 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1250 = ((_1236 * _1231) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1191 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1251 = ((_1236 * _1232) / cbModelParam._m0[35u].z) + ((((((_1195 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1253 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1249, _1250, _1251), 0.0);
        vec4 _1260 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1249, _1250, _1251), 0.0);
        vec4 _1267 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1249, _1250, _1251), 0.0);
        vec4 _1274 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1249, _1250, _1251), 0.0);
        float _1286 = exp2((_1253.w + (-0.5)) * 20.0) * 2.0;
        float _1287 = _1286 * (_1253.x + (-0.5));
        float _1288 = _1286 * (_1253.y + (-0.5));
        float _1289 = _1286 * (_1253.z + (-0.5));
        float _1296 = exp2((_1260.w + (-0.5)) * 20.0) * 2.0;
        float _1297 = _1296 * (_1260.x + (-0.5));
        float _1298 = _1296 * (_1260.y + (-0.5));
        float _1299 = _1296 * (_1260.z + (-0.5));
        float _1306 = exp2((_1267.w + (-0.5)) * 20.0) * 2.0;
        float _1307 = _1306 * (_1267.x + (-0.5));
        float _1308 = _1306 * (_1267.y + (-0.5));
        float _1309 = _1306 * (_1267.z + (-0.5));
        float _1316 = exp2((_1274.w + (-0.5)) * 20.0) * 2.0;
        float _1317 = _1316 * (_1274.x + (-0.5));
        float _1318 = _1316 * (_1274.y + (-0.5));
        float _1319 = _1316 * (_1274.z + (-0.5));
        float _1320 = isnan(0.0) ? _1317 : (isnan(_1317) ? 0.0 : max(_1317, 0.0));
        float _1321 = isnan(0.0) ? _1318 : (isnan(_1318) ? 0.0 : max(_1318, 0.0));
        float _1322 = isnan(0.0) ? _1319 : (isnan(_1319) ? 0.0 : max(_1319, 0.0));
        float _1323 = _1287 * 0.5;
        float _1324 = _1297 * 0.5;
        float _1325 = _1307 * 0.5;
        float _1326 = dot(vec3(_1323, _1324, _1325), vec3(_1323, _1324, _1325));
        float _1331 = (_1326 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1326);
        float _1339 = (dot(vec3(_627, _628, _629), vec3(_1331 * _1323, _1331 * _1324, _1331 * _1325)) + 1.0) * 0.5;
        float _4025 = isnan(0.0) ? _1339 : (isnan(_1339) ? 0.0 : max(_1339, 0.0));
        float _1348 = sqrt(((_1324 * _1324) + (_1323 * _1323)) + (_1325 * _1325)) / (_1320 + 9.9999997473787516355514526367188e-06);
        float _4036 = isnan(0.0) ? _1348 : (isnan(_1348) ? 0.0 : max(_1348, 0.0));
        float _1349 = isnan(1.0) ? _4036 : (isnan(_4036) ? 1.0 : min(_4036, 1.0));
        float _1350 = _1349 * 2.0;
        float _1354 = (1.0 - _1349) / (_1349 + 1.0);
        float _4047 = isnan(0.0) ? _1354 : (isnan(_1354) ? 0.0 : max(_1354, 0.0));
        float _1355 = isnan(1.0) ? _4047 : (isnan(_4047) ? 1.0 : min(_4047, 1.0));
        float _1364 = ((((1.0 - _1355) * (_1350 + 2.0)) * exp2(log2(isnan(1.0) ? _4025 : (isnan(_4025) ? 1.0 : min(_4025, 1.0))) * (_1350 + 1.0))) + _1355) * _1320;
        float _1365 = _1288 * 0.5;
        float _1366 = _1298 * 0.5;
        float _1367 = _1308 * 0.5;
        float _1368 = dot(vec3(_1365, _1366, _1367), vec3(_1365, _1366, _1367));
        float _1373 = (_1368 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1368);
        float _1381 = (dot(vec3(_627, _628, _629), vec3(_1373 * _1365, _1373 * _1366, _1373 * _1367)) + 1.0) * 0.5;
        float _4058 = isnan(0.0) ? _1381 : (isnan(_1381) ? 0.0 : max(_1381, 0.0));
        float _1390 = sqrt(((_1366 * _1366) + (_1365 * _1365)) + (_1367 * _1367)) / (_1321 + 9.9999997473787516355514526367188e-06);
        float _4069 = isnan(0.0) ? _1390 : (isnan(_1390) ? 0.0 : max(_1390, 0.0));
        float _1391 = isnan(1.0) ? _4069 : (isnan(_4069) ? 1.0 : min(_4069, 1.0));
        float _1392 = _1391 * 2.0;
        float _1396 = (1.0 - _1391) / (_1391 + 1.0);
        float _4080 = isnan(0.0) ? _1396 : (isnan(_1396) ? 0.0 : max(_1396, 0.0));
        float _1397 = isnan(1.0) ? _4080 : (isnan(_4080) ? 1.0 : min(_4080, 1.0));
        float _1406 = ((((1.0 - _1397) * (_1392 + 2.0)) * exp2(log2(isnan(1.0) ? _4058 : (isnan(_4058) ? 1.0 : min(_4058, 1.0))) * (_1392 + 1.0))) + _1397) * _1321;
        float _1407 = _1289 * 0.5;
        float _1408 = _1299 * 0.5;
        float _1409 = _1309 * 0.5;
        float _1410 = dot(vec3(_1407, _1408, _1409), vec3(_1407, _1408, _1409));
        float _1415 = (_1410 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1410);
        float _1423 = (dot(vec3(_627, _628, _629), vec3(_1415 * _1407, _1415 * _1408, _1415 * _1409)) + 1.0) * 0.5;
        float _4091 = isnan(0.0) ? _1423 : (isnan(_1423) ? 0.0 : max(_1423, 0.0));
        float _1432 = sqrt(((_1408 * _1408) + (_1407 * _1407)) + (_1409 * _1409)) / (_1322 + 9.9999997473787516355514526367188e-06);
        float _4102 = isnan(0.0) ? _1432 : (isnan(_1432) ? 0.0 : max(_1432, 0.0));
        float _1433 = isnan(1.0) ? _4102 : (isnan(_4102) ? 1.0 : min(_4102, 1.0));
        float _1434 = _1433 * 2.0;
        float _1438 = (1.0 - _1433) / (_1433 + 1.0);
        float _4113 = isnan(0.0) ? _1438 : (isnan(_1438) ? 0.0 : max(_1438, 0.0));
        float _1439 = isnan(1.0) ? _4113 : (isnan(_4113) ? 1.0 : min(_4113, 1.0));
        float _1448 = ((((1.0 - _1439) * (_1434 + 2.0)) * exp2(log2(isnan(1.0) ? _4091 : (isnan(_4091) ? 1.0 : min(_4091, 1.0))) * (_1434 + 1.0))) + _1439) * _1322;
        _1456 = _1289;
        _1457 = _1288;
        _1458 = _1287;
        _1459 = _1299;
        _1460 = _1298;
        _1461 = _1297;
        _1462 = _1309;
        _1463 = _1308;
        _1464 = _1307;
        _1465 = _1322;
        _1466 = _1321;
        _1467 = _1320;
        _1468 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1364 : (isnan(_1364) ? 0.0 : max(_1364, 0.0)));
        _1469 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1406 : (isnan(_1406) ? 0.0 : max(_1406, 0.0)));
        _1470 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1448 : (isnan(_1448) ? 0.0 : max(_1448, 0.0)));
    }
    else
    {
        _1456 = _1148;
        _1457 = _1148;
        _1458 = _1148;
        _1459 = _1148;
        _1460 = _1148;
        _1461 = _1148;
        _1462 = _1148;
        _1463 = _1148;
        _1464 = _1148;
        _1465 = _1148;
        _1466 = _1148;
        _1467 = _1148;
        _1468 = 0.0;
        _1469 = 0.0;
        _1470 = 0.0;
    }
    float _1480 = (cbModelParam._m0[1u].x * (_1468 - _1160)) + _1160;
    float _1481 = (cbModelParam._m0[1u].x * (_1469 - _1161)) + _1161;
    float _1482 = (cbModelParam._m0[1u].x * (_1470 - _1162)) + _1162;
    float _1503 = fma(_1482, cbSceneParam._m0[89u].z, fma(_1481, cbSceneParam._m0[89u].y, _1480 * cbSceneParam._m0[89u].x));
    float _1506 = fma(_1482, cbSceneParam._m0[90u].z, fma(_1481, cbSceneParam._m0[90u].y, _1480 * cbSceneParam._m0[90u].x));
    float _1509 = fma(_1482, cbSceneParam._m0[91u].z, fma(_1481, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1480));
    float _1524 = _785 * 0.5;
    float _1525 = _786 * 0.5;
    float _1526 = _787 * 0.5;
    float _1527 = dot(vec4(_1524, _1525, _1526, 1.0), vec4(_1458, _1461, _1464, _1467));
    float _1530 = dot(vec4(_1524, _1525, _1526, 1.0), vec4(_1457, _1460, _1463, _1466));
    float _1533 = dot(vec4(_1524, _1525, _1526, 1.0), vec4(_1456, _1459, _1462, _1465));
    float _1567;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1540 = dot(vec4(_1524, _1525, _1526, 1.0), vec4(_1147, _1151, _1154, _1157));
        float _1544 = dot(vec4(_1524, _1525, _1526, 1.0), vec4(_1149, _1152, _1155, _1158));
        float _1548 = dot(vec4(_1524, _1525, _1526, 1.0), vec4(_1150, _1153, _1156, _1159));
        float _1555 = dot(vec4(cbModelParam._m0[39u]), vec4(_1524, _1525, _1526, 1.0));
        _1567 = dot(vec3(isnan(0.0) ? _1548 : (isnan(_1548) ? 0.0 : max(_1548, 0.0)), isnan(0.0) ? _1544 : (isnan(_1544) ? 0.0 : max(_1544, 0.0)), isnan(0.0) ? _1540 : (isnan(_1540) ? 0.0 : max(_1540, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1555) ? 0.0 : (isnan(0.0) ? _1555 : max(0.0, _1555))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1567 = 1.0;
    }
    float _1578;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1569 = dot(vec4(cbModelParam._m0[40u]), vec4(_1524, _1525, _1526, 1.0));
        _1578 = dot(vec3(isnan(0.0) ? _1527 : (isnan(_1527) ? 0.0 : max(_1527, 0.0)), isnan(0.0) ? _1530 : (isnan(_1530) ? 0.0 : max(_1530, 0.0)), isnan(0.0) ? _1533 : (isnan(_1533) ? 0.0 : max(_1533, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1569) ? 0.0 : (isnan(0.0) ? _1569 : max(0.0, _1569))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1578 = 1.0;
    }
    float _1582 = (_1578 * cbModelParam._m0[1u].x) + (_1567 * (1.0 - cbModelParam._m0[1u].x));
    float _1592 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _630);
    float _1593 = isnan(_1592) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1592 : min(cbModelParam._m0[25u].z, _1592));
    float _1674;
    float _1676;
    float _1678;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1641 = fma(_846, cbModelParam._m0[13u].z, fma(_842, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _838)) + cbModelParam._m0[13u].w;
        float _1645 = fma(_846, cbModelParam._m0[14u].z, fma(_842, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _838)) + cbModelParam._m0[14u].w;
        float _1649 = fma(_846, cbModelParam._m0[15u].z, fma(_842, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _838)) + cbModelParam._m0[15u].w;
        float _1652 = fma(_787, cbModelParam._m0[13u].z, fma(_786, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _785));
        float _1655 = fma(_787, cbModelParam._m0[14u].z, fma(_786, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _785));
        float _1658 = fma(_787, cbModelParam._m0[15u].z, fma(_786, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _785));
        float _1686;
        if (_1652 > 0.0)
        {
            _1686 = abs((1.0 - _1641) / _1652);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1652 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1641 + 1.0) / _1652);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1686 = frontier_phi_14_12_ladder;
        }
        float _1856;
        if (_1655 > 0.0)
        {
            _1856 = abs((1.0 - _1645) / _1655);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1655 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1645 + 1.0) / _1655);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1856 = frontier_phi_23_19_ladder;
        }
        float _2151;
        if (_1658 > 0.0)
        {
            _2151 = abs((1.0 - _1649) / _1658);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1658 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1649 + 1.0) / _1658);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2151 = frontier_phi_35_30_ladder;
        }
        float _2153 = isnan(_1856) ? _1686 : (isnan(_1686) ? _1856 : min(_1686, _1856));
        float _2154 = isnan(_2151) ? _2153 : (isnan(_2153) ? _2151 : min(_2153, _2151));
        float _2158 = (_2154 * _1652) + _1641;
        float _2159 = (_2154 * _1655) + _1645;
        float _2160 = (_2154 * _1658) + _1649;
        float _2161 = _2154 * 9.9999997473787516355514526367188e-05;
        float _2163 = (-1.0) - _2161;
        float _2165 = _2161 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2160 > _2165) || ((_2160 < _2163) || ((_2159 > _2165) || ((_2159 < _2163) || ((_2158 < _2163) || (_2158 > _2165))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2305 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2160, cbModelParam._m0[9u].z, fma(_2159, cbModelParam._m0[9u].y, _2158 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2160, cbModelParam._m0[10u].z, fma(_2159, cbModelParam._m0[10u].y, _2158 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2160, cbModelParam._m0[11u].z, fma(_2159, cbModelParam._m0[11u].y, _2158 * cbModelParam._m0[11u].x))), _1593);
            frontier_phi_13_35_ladder = _2305.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2305.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2305.x * cbModelParam._m0[1u].y;
        }
        _1674 = frontier_phi_13_35_ladder_2;
        _1676 = frontier_phi_13_35_ladder_1;
        _1678 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1662 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_785, _786, _787), _1593);
        _1674 = _1662.x * cbModelParam._m0[1u].y;
        _1676 = _1662.y * cbModelParam._m0[1u].y;
        _1678 = _1662.z * cbModelParam._m0[1u].y;
    }
    float _1682 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _630);
    float _1683 = isnan(_1682) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1682 : min(cbModelParam._m0[25u].w, _1682));
    float _1773;
    float _1775;
    float _1777;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1737 = fma(_846, cbModelParam._m0[21u].z, fma(_842, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _838)) + cbModelParam._m0[21u].w;
        float _1741 = fma(_846, cbModelParam._m0[22u].z, fma(_842, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _838)) + cbModelParam._m0[22u].w;
        float _1745 = fma(_846, cbModelParam._m0[23u].z, fma(_842, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _838)) + cbModelParam._m0[23u].w;
        float _1748 = fma(_787, cbModelParam._m0[21u].z, fma(_786, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _785));
        float _1751 = fma(_787, cbModelParam._m0[22u].z, fma(_786, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _785));
        float _1754 = fma(_787, cbModelParam._m0[23u].z, fma(_786, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _785));
        float _1861;
        if (_1748 > 0.0)
        {
            _1861 = abs((1.0 - _1737) / _1748);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1748 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1737 + 1.0) / _1748);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1861 = frontier_phi_25_21_ladder;
        }
        float _2178;
        if (_1751 > 0.0)
        {
            _2178 = abs((1.0 - _1741) / _1751);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1751 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1741 + 1.0) / _1751);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2178 = frontier_phi_37_32_ladder;
        }
        float _2505;
        if (_1754 > 0.0)
        {
            _2505 = abs((1.0 - _1745) / _1754);
        }
        else
        {
            float frontier_phi_47_44_ladder;
            if (_1754 < 0.0)
            {
                frontier_phi_47_44_ladder = abs((_1745 + 1.0) / _1754);
            }
            else
            {
                frontier_phi_47_44_ladder = 5000.0;
            }
            _2505 = frontier_phi_47_44_ladder;
        }
        float _2507 = isnan(_2178) ? _1861 : (isnan(_1861) ? _2178 : min(_1861, _2178));
        float _2508 = isnan(_2505) ? _2507 : (isnan(_2507) ? _2505 : min(_2507, _2505));
        float _2512 = (_2508 * _1748) + _1737;
        float _2513 = (_2508 * _1751) + _1741;
        float _2514 = (_2508 * _1754) + _1745;
        float _2515 = _2508 * 9.9999997473787516355514526367188e-05;
        float _2516 = (-1.0) - _2515;
        float _2518 = _2515 + 1.0;
        float frontier_phi_22_47_ladder;
        float frontier_phi_22_47_ladder_1;
        float frontier_phi_22_47_ladder_2;
        if ((_2514 > _2518) || ((_2514 < _2516) || ((_2513 > _2518) || ((_2513 < _2516) || ((_2512 < _2516) || (_2512 > _2518))))))
        {
            frontier_phi_22_47_ladder = 0.0;
            frontier_phi_22_47_ladder_1 = 0.0;
            frontier_phi_22_47_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2632 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2514, cbModelParam._m0[17u].z, fma(_2513, cbModelParam._m0[17u].y, _2512 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2514, cbModelParam._m0[18u].z, fma(_2513, cbModelParam._m0[18u].y, _2512 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2514, cbModelParam._m0[19u].z, fma(_2513, cbModelParam._m0[19u].y, _2512 * cbModelParam._m0[19u].x))), _1683);
            frontier_phi_22_47_ladder = _2632.z * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_1 = _2632.y * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_2 = _2632.x * cbModelParam._m0[1u].z;
        }
        _1773 = frontier_phi_22_47_ladder_2;
        _1775 = frontier_phi_22_47_ladder_1;
        _1777 = frontier_phi_22_47_ladder;
    }
    else
    {
        vec4 _1757 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_785, _786, _787), _1683);
        _1773 = _1757.x * cbModelParam._m0[1u].z;
        _1775 = _1757.y * cbModelParam._m0[1u].z;
        _1777 = _1757.z * cbModelParam._m0[1u].z;
    }
    float _1789 = ((((1.0 - _806) * ((_793 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_806 * _793)) * _777;
    float _1790 = _1789 * ((cbModelParam._m0[1u].w * (_1773 - _1674)) + _1674);
    float _1791 = _1789 * ((cbModelParam._m0[1u].w * (_1775 - _1676)) + _1676);
    float _1792 = _1789 * ((cbModelParam._m0[1u].w * (_1777 - _1678)) + _1678);
    float _1795 = fma(_1792, cbSceneParam._m0[89u].z, fma(_1791, cbSceneParam._m0[89u].y, _1790 * cbSceneParam._m0[89u].x));
    float _1798 = fma(_1792, cbSceneParam._m0[90u].z, fma(_1791, cbSceneParam._m0[90u].y, _1790 * cbSceneParam._m0[90u].x));
    float _1801 = fma(_1792, cbSceneParam._m0[91u].z, fma(_1791, cbSceneParam._m0[91u].y, _1790 * cbSceneParam._m0[91u].x));
    float _1835 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1839 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1843 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1847 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1848 = _1835 / _1847;
    float _1849 = _1839 / _1847;
    float _1850 = _1843 / _1847;
    float _1997;
    float _1998;
    float _1999;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1877 = ((uint(_1850 > cbSceneParam._m0[59u].y) + uint(_1850 > cbSceneParam._m0[59u].x)) + uint(_1850 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1878 = _1877 + 43u;
        uint _1886 = _1877 + 44u;
        uint _1894 = _1877 + 45u;
        uint _1902 = _1877 + 46u;
        float _1913 = fma(_1847, cbSceneParam._m0[_1878].w, fma(_1843, cbSceneParam._m0[_1878].z, fma(_1839, cbSceneParam._m0[_1878].y, _1835 * cbSceneParam._m0[_1878].x)));
        float _1917 = fma(_1847, cbSceneParam._m0[_1886].w, fma(_1843, cbSceneParam._m0[_1886].z, fma(_1839, cbSceneParam._m0[_1886].y, _1835 * cbSceneParam._m0[_1886].x)));
        float _1925 = fma(_1847, cbSceneParam._m0[_1902].w, fma(_1843, cbSceneParam._m0[_1902].z, fma(_1839, cbSceneParam._m0[_1902].y, _1835 * cbSceneParam._m0[_1902].x)));
        float _1930 = cbSceneParam._m0[33u].z * _1925;
        float _1932 = cbSceneParam._m0[33u].w * _1925;
        float _1935 = fma(_1847, cbSceneParam._m0[_1894].w, fma(_1843, cbSceneParam._m0[_1894].z, fma(_1839, cbSceneParam._m0[_1894].y, _1835 * cbSceneParam._m0[_1894].x))) / _1925;
        float _1983 = (cbSceneParam._m0[33u].x - sqrt(((_1849 * _1849) + (_1848 * _1848)) + (_1850 * _1850))) * cbSceneParam._m0[33u].y;
        float _4239 = isnan(0.0) ? _1983 : (isnan(_1983) ? 0.0 : max(_1983, 0.0));
        float _1990 = (isnan(1.0) ? _4239 : (isnan(_4239) ? 1.0 : min(_4239, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1930 + _1913) / _1925, (_1932 + _1917) / _1925), _1935), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1932 + _1913) / _1925, (_1917 - _1930) / _1925), _1935), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1913 - _1930) / _1925, (_1917 - _1932) / _1925), _1935), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1913 - _1932) / _1925, (_1930 + _1917) / _1925), _1935), 0.0)).x), vec4(0.25)));
        _1997 = 1.0 - (_1990 * cbSceneParam._m0[34u].x);
        _1998 = 1.0 - (_1990 * cbSceneParam._m0[34u].y);
        _1999 = 1.0 - (_1990 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1997 = 1.0;
        _1998 = 1.0;
        _1999 = 1.0;
    }
    float _2063;
    float _2065;
    float _2067;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2051 = fma(_1847, cbSceneParam._m0[63u].w, fma(_1843, cbSceneParam._m0[63u].z, fma(_1839, cbSceneParam._m0[63u].y, _1835 * cbSceneParam._m0[63u].x)));
        float _2052 = fma(_1847, cbSceneParam._m0[60u].w, fma(_1843, cbSceneParam._m0[60u].z, fma(_1839, cbSceneParam._m0[60u].y, _1835 * cbSceneParam._m0[60u].x))) / _2051;
        float _2053 = fma(_1847, cbSceneParam._m0[61u].w, fma(_1843, cbSceneParam._m0[61u].z, fma(_1839, cbSceneParam._m0[61u].y, _1835 * cbSceneParam._m0[61u].x))) / _2051;
        float frontier_phi_34_33_ladder;
        float frontier_phi_34_33_ladder_1;
        float frontier_phi_34_33_ladder_2;
        if ((((_2052 >= cbSceneParam._m0[64u].x) && (_2053 >= cbSceneParam._m0[64u].y)) && (_2052 <= cbSceneParam._m0[64u].z)) && (_2053 <= cbSceneParam._m0[64u].w))
        {
            float _2191 = fma(_1847, cbSceneParam._m0[62u].w, fma(_1843, cbSceneParam._m0[62u].z, fma(_1839, cbSceneParam._m0[62u].y, _1835 * cbSceneParam._m0[62u].x))) / _2051;
            float _2195 = isnan(cbSceneParam._m0[41u].w) ? _2191 : (isnan(_2191) ? cbSceneParam._m0[41u].w : max(_2191, cbSceneParam._m0[41u].w));
            float _2238 = (cbSceneParam._m0[33u].x - sqrt(((_1849 * _1849) + (_1848 * _1848)) + (_1850 * _1850))) * cbSceneParam._m0[33u].y;
            float _4255 = isnan(0.0) ? _2238 : (isnan(_2238) ? 0.0 : max(_2238, 0.0));
            float _2245 = (isnan(1.0) ? _4255 : (isnan(_4255) ? 1.0 : min(_4255, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2052, cbSceneParam._m0[33u].w + _2053), _2195), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2052, _2053 - cbSceneParam._m0[33u].z), _2195), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2052 - cbSceneParam._m0[33u].z, _2053 - cbSceneParam._m0[33u].w), _2195), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2052 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2053), _2195), 0.0)).x), vec4(0.25)));
            float _2249 = 1.0 - (_2245 * cbSceneParam._m0[34u].x);
            float _2250 = 1.0 - (_2245 * cbSceneParam._m0[34u].y);
            float _2251 = 1.0 - (_2245 * cbSceneParam._m0[34u].z);
            frontier_phi_34_33_ladder = isnan(_2251) ? _1999 : (isnan(_1999) ? _2251 : min(_1999, _2251));
            frontier_phi_34_33_ladder_1 = isnan(_2250) ? _1998 : (isnan(_1998) ? _2250 : min(_1998, _2250));
            frontier_phi_34_33_ladder_2 = isnan(_2249) ? _1997 : (isnan(_1997) ? _2249 : min(_1997, _2249));
        }
        else
        {
            frontier_phi_34_33_ladder = _1999;
            frontier_phi_34_33_ladder_1 = _1998;
            frontier_phi_34_33_ladder_2 = _1997;
        }
        _2063 = frontier_phi_34_33_ladder_2;
        _2065 = frontier_phi_34_33_ladder_1;
        _2067 = frontier_phi_34_33_ladder;
    }
    else
    {
        _2063 = _1997;
        _2065 = _1998;
        _2067 = _1999;
    }
    uvec4 _2072 = floatBitsToUint(cbInstanceData._m0[_236 + 5u]);
    uint _2074 = _2072.x * 14u;
    uint _2075 = _2074 + 13u;
    float _2082 = _777 + (-1.0);
    float _2087 = (cbLight._m0[_2075].x * _2082) + 1.0;
    float _2088 = (cbLight._m0[_2075].y * _2082) + 1.0;
    float _2089 = (cbLight._m0[_2075].z * _2082) + 1.0;
    float _2090 = (cbLight._m0[_2075].w * _2082) + 1.0;
    uint _2091 = _2074 + 5u;
    float _2097 = isnan(1.0) ? _2088 : (isnan(_2088) ? 1.0 : min(_2088, 1.0));
    uint _2101 = _2074 + 4u;
    float _2110 = isnan(1.0) ? _2087 : (isnan(_2087) ? 1.0 : min(_2087, 1.0));
    uint _2114 = _2074 | 1u;
    float _2125 = dot(vec3(cbLight._m0[_2074].xyz), vec3(_627, _628, _629));
    float _2128 = dot(vec3(cbLight._m0[_2114].xyz), vec3(_627, _628, _629));
    float _4291 = isnan(0.0) ? _2125 : (isnan(_2125) ? 0.0 : max(_2125, 0.0));
    float _4302 = isnan(0.0) ? _2128 : (isnan(_2128) ? 0.0 : max(_2128, 0.0));
    float _2133 = (isnan(1.0) ? _4291 : (isnan(_4291) ? 1.0 : min(_4291, 1.0))) * 0.3183098733425140380859375;
    float _2135 = (isnan(1.0) ? _4302 : (isnan(_4302) ? 1.0 : min(_4302, 1.0))) * 0.3183098733425140380859375;
    float _2142 = ((cbLight._m0[_2091].x * _2097) * _2135) + (((cbLight._m0[_2101].x * _2063) * _2110) * _2133);
    float _2143 = ((_2097 * cbLight._m0[_2091].y) * _2135) + (((cbLight._m0[_2101].y * _2065) * _2110) * _2133);
    float _2144 = ((_2097 * cbLight._m0[_2091].z) * _2135) + (((cbLight._m0[_2101].z * _2067) * _2110) * _2133);
    uvec4 _2148 = floatBitsToUint(cbLight._m0[_2074 + 12u]);
    bool _2150 = _2148.x == 0u;
    float _2252;
    float _2254;
    float _2256;
    if (_2150)
    {
        _2252 = _2142;
        _2254 = _2143;
        _2256 = _2144;
    }
    else
    {
        uint _2260 = _2074 + 6u;
        float _2276 = (dot(vec3(cbLight._m0[_2074 + 2u].xyz), vec3(_627, _628, _629)) * 0.5) + 0.5;
        float _2277 = _2276 * _2276;
        float _4313 = isnan(0.0) ? _2277 : (isnan(_2277) ? 0.0 : max(_2277, 0.0));
        float _2278 = isnan(1.0) ? _4313 : (isnan(_4313) ? 1.0 : min(_4313, 1.0));
        float _2279 = isnan(1.0) ? _2089 : (isnan(_2089) ? 1.0 : min(_2089, 1.0));
        _2252 = (((cbLight._m0[_2260].x * 0.3183098733425140380859375) * _2278) * _2279) + _2142;
        _2254 = (((cbLight._m0[_2260].y * 0.3183098733425140380859375) * _2278) * _2279) + _2143;
        _2256 = (((cbLight._m0[_2260].z * 0.3183098733425140380859375) * _2278) * _2279) + _2144;
    }
    bool _2259 = _2148.y == 0u;
    float _2314;
    float _2316;
    float _2318;
    if (_2259)
    {
        _2314 = _2252;
        _2316 = _2254;
        _2318 = _2256;
    }
    else
    {
        uint _2476 = _2074 + 7u;
        float _2492 = (dot(vec3(cbLight._m0[_2074 + 3u].xyz), vec3(_627, _628, _629)) * 0.5) + 0.5;
        float _2493 = _2492 * _2492;
        float _4329 = isnan(0.0) ? _2493 : (isnan(_2493) ? 0.0 : max(_2493, 0.0));
        float _2494 = isnan(1.0) ? _4329 : (isnan(_4329) ? 1.0 : min(_4329, 1.0));
        float _2495 = isnan(1.0) ? _2090 : (isnan(_2090) ? 1.0 : min(_2090, 1.0));
        _2314 = (((cbLight._m0[_2476].x * 0.3183098733425140380859375) * _2494) * _2495) + _2252;
        _2316 = (((cbLight._m0[_2476].y * 0.3183098733425140380859375) * _2494) * _2495) + _2254;
        _2318 = (((cbLight._m0[_2476].z * 0.3183098733425140380859375) * _2494) * _2495) + _2256;
    }
    uint _2321 = _2074 + 8u;
    float _2334 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2074].w)) * _630) * 0.949999988079071044921875);
    float _2335 = _2334 * _2334;
    float _2336 = cbLight._m0[_2074].x + _706;
    float _2337 = cbLight._m0[_2074].y + _707;
    float _2338 = cbLight._m0[_2074].z + _708;
    float _2342 = inversesqrt(dot(vec3(_2336, _2337, _2338), vec3(_2336, _2337, _2338)));
    float _2343 = _2342 * _2336;
    float _2344 = _2342 * _2337;
    float _2345 = _2342 * _2338;
    float _2346 = dot(vec3(_627, _628, _629), vec3(cbLight._m0[_2074].xyz));
    float _4345 = isnan(0.0) ? _2346 : (isnan(_2346) ? 0.0 : max(_2346, 0.0));
    float _2349 = isnan(1.0) ? _4345 : (isnan(_4345) ? 1.0 : min(_4345, 1.0));
    float _4356 = isnan(0.0) ? _778 : (isnan(_778) ? 0.0 : max(_778, 0.0));
    float _2350 = isnan(1.0) ? _4356 : (isnan(_4356) ? 1.0 : min(_4356, 1.0));
    float _2351 = dot(vec3(_627, _628, _629), vec3(_2343, _2344, _2345));
    float _4367 = isnan(0.0) ? _2351 : (isnan(_2351) ? 0.0 : max(_2351, 0.0));
    float _2354 = isnan(1.0) ? _4367 : (isnan(_4367) ? 1.0 : min(_4367, 1.0));
    float _2355 = dot(vec3(cbLight._m0[_2074].xyz), vec3(_2343, _2344, _2345));
    float _4378 = isnan(0.0) ? _2355 : (isnan(_2355) ? 0.0 : max(_2355, 0.0));
    float _2359 = _2335 * _2335;
    float _2363 = ((_2354 * _2354) * (_2359 + (-1.0))) + 1.0;
    float _2374 = (exp2(log2(1.0 - (isnan(1.0) ? _4378 : (isnan(_4378) ? 1.0 : min(_4378, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2375 = 1.0 - _2335;
    float _2386 = (0.5 / (((_2350 * ((_2349 * _2375) + _2335)) + 9.9999999392252902907785028219223e-09) + (((_2350 * _2375) + _2335) * _2349))) * _2349;
    float _4389 = isnan(0.0) ? _2386 : (isnan(_2386) ? 0.0 : max(_2386, 0.0));
    float _2388 = (isnan(1.0) ? _4389 : (isnan(_4389) ? 1.0 : min(_4389, 1.0))) * (_2359 / ((_2363 * _2363) * 3.141590118408203125));
    uint _2402 = _2074 + 9u;
    float _2413 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2114].w)) * _630) * 0.949999988079071044921875);
    float _2414 = _2413 * _2413;
    float _2415 = cbLight._m0[_2114].x + _706;
    float _2416 = cbLight._m0[_2114].y + _707;
    float _2417 = cbLight._m0[_2114].z + _708;
    float _2421 = inversesqrt(dot(vec3(_2415, _2416, _2417), vec3(_2415, _2416, _2417)));
    float _2422 = _2421 * _2415;
    float _2423 = _2421 * _2416;
    float _2424 = _2421 * _2417;
    float _2425 = dot(vec3(_627, _628, _629), vec3(cbLight._m0[_2114].xyz));
    float _4400 = isnan(0.0) ? _2425 : (isnan(_2425) ? 0.0 : max(_2425, 0.0));
    float _2428 = isnan(1.0) ? _4400 : (isnan(_4400) ? 1.0 : min(_4400, 1.0));
    float _2429 = dot(vec3(_627, _628, _629), vec3(_2422, _2423, _2424));
    float _4411 = isnan(0.0) ? _2429 : (isnan(_2429) ? 0.0 : max(_2429, 0.0));
    float _2432 = isnan(1.0) ? _4411 : (isnan(_4411) ? 1.0 : min(_4411, 1.0));
    float _2433 = dot(vec3(cbLight._m0[_2114].xyz), vec3(_2422, _2423, _2424));
    float _4422 = isnan(0.0) ? _2433 : (isnan(_2433) ? 0.0 : max(_2433, 0.0));
    float _2437 = _2414 * _2414;
    float _2441 = ((_2432 * _2432) * (_2437 + (-1.0))) + 1.0;
    float _2450 = (exp2(log2(1.0 - (isnan(1.0) ? _4422 : (isnan(_4422) ? 1.0 : min(_4422, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2451 = 1.0 - _2414;
    float _2461 = (0.5 / (((_2350 * ((_2428 * _2451) + _2414)) + 9.9999999392252902907785028219223e-09) + (((_2350 * _2451) + _2414) * _2428))) * _2428;
    float _4433 = isnan(0.0) ? _2461 : (isnan(_2461) ? 0.0 : max(_2461, 0.0));
    float _2463 = (isnan(1.0) ? _4433 : (isnan(_4433) ? 1.0 : min(_4433, 1.0))) * (_2437 / ((_2441 * _2441) * 3.141590118408203125));
    float _2473 = (((_2450 * cbLight._m0[_2402].x) * _2463) * _2097) + ((((cbLight._m0[_2321].x * _2063) * _2374) * _2388) * _2110);
    float _2474 = (((_2450 * cbLight._m0[_2402].y) * _2463) * _2097) + ((((cbLight._m0[_2321].y * _2065) * _2374) * _2388) * _2110);
    float _2475 = (((_2450 * cbLight._m0[_2402].z) * _2463) * _2097) + ((((cbLight._m0[_2321].z * _2067) * _2374) * _2388) * _2110);
    float _2531;
    float _2533;
    float _2535;
    if (_2150)
    {
        _2531 = _2473;
        _2533 = _2474;
        _2535 = _2475;
    }
    else
    {
        uint _2537 = _2074 + 2u;
        uint _2541 = _2074 + 10u;
        float _2555 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2537].w)) * _630) * 0.949999988079071044921875);
        float _2556 = _2555 * _2555;
        float _2557 = cbLight._m0[_2537].x + _706;
        float _2558 = cbLight._m0[_2537].y + _707;
        float _2559 = cbLight._m0[_2537].z + _708;
        float _2563 = inversesqrt(dot(vec3(_2557, _2558, _2559), vec3(_2557, _2558, _2559)));
        float _2564 = _2563 * _2557;
        float _2565 = _2563 * _2558;
        float _2566 = _2563 * _2559;
        float _2567 = dot(vec3(_627, _628, _629), vec3(cbLight._m0[_2537].xyz));
        float _4444 = isnan(0.0) ? _2567 : (isnan(_2567) ? 0.0 : max(_2567, 0.0));
        float _2570 = isnan(1.0) ? _4444 : (isnan(_4444) ? 1.0 : min(_4444, 1.0));
        float _2571 = dot(vec3(_627, _628, _629), vec3(_2564, _2565, _2566));
        float _4455 = isnan(0.0) ? _2571 : (isnan(_2571) ? 0.0 : max(_2571, 0.0));
        float _2574 = isnan(1.0) ? _4455 : (isnan(_4455) ? 1.0 : min(_4455, 1.0));
        float _2575 = dot(vec3(cbLight._m0[_2537].xyz), vec3(_2564, _2565, _2566));
        float _4466 = isnan(0.0) ? _2575 : (isnan(_2575) ? 0.0 : max(_2575, 0.0));
        float _2579 = _2556 * _2556;
        float _2583 = ((_2574 * _2574) * (_2579 + (-1.0))) + 1.0;
        float _2592 = (exp2(log2(1.0 - (isnan(1.0) ? _4466 : (isnan(_4466) ? 1.0 : min(_4466, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2593 = 1.0 - _2556;
        float _2603 = (0.5 / (((_2350 * ((_2570 * _2593) + _2556)) + 9.9999999392252902907785028219223e-09) + (((_2350 * _2593) + _2556) * _2570))) * _2570;
        float _4477 = isnan(0.0) ? _2603 : (isnan(_2603) ? 0.0 : max(_2603, 0.0));
        float _2605 = (isnan(1.0) ? _4477 : (isnan(_4477) ? 1.0 : min(_4477, 1.0))) * (_2579 / ((_2583 * _2583) * 3.141590118408203125));
        float _2606 = isnan(1.0) ? _2089 : (isnan(_2089) ? 1.0 : min(_2089, 1.0));
        _2531 = (((_2592 * cbLight._m0[_2541].x) * _2605) * _2606) + _2473;
        _2533 = (((_2592 * cbLight._m0[_2541].y) * _2605) * _2606) + _2474;
        _2535 = (((_2592 * cbLight._m0[_2541].z) * _2605) * _2606) + _2475;
    }
    float _2637;
    float _2639;
    float _2641;
    if (_2259)
    {
        _2637 = _2531;
        _2639 = _2533;
        _2641 = _2535;
    }
    else
    {
        uint _2648 = _2074 + 3u;
        uint _2652 = _2074 + 11u;
        float _2666 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2648].w)) * _630) * 0.949999988079071044921875);
        float _2667 = _2666 * _2666;
        float _2668 = cbLight._m0[_2648].x + _706;
        float _2669 = cbLight._m0[_2648].y + _707;
        float _2670 = cbLight._m0[_2648].z + _708;
        float _2674 = inversesqrt(dot(vec3(_2668, _2669, _2670), vec3(_2668, _2669, _2670)));
        float _2675 = _2674 * _2668;
        float _2676 = _2674 * _2669;
        float _2677 = _2674 * _2670;
        float _2678 = dot(vec3(_627, _628, _629), vec3(cbLight._m0[_2648].xyz));
        float _4493 = isnan(0.0) ? _2678 : (isnan(_2678) ? 0.0 : max(_2678, 0.0));
        float _2681 = isnan(1.0) ? _4493 : (isnan(_4493) ? 1.0 : min(_4493, 1.0));
        float _2682 = dot(vec3(_627, _628, _629), vec3(_2675, _2676, _2677));
        float _4504 = isnan(0.0) ? _2682 : (isnan(_2682) ? 0.0 : max(_2682, 0.0));
        float _2685 = isnan(1.0) ? _4504 : (isnan(_4504) ? 1.0 : min(_4504, 1.0));
        float _2686 = dot(vec3(cbLight._m0[_2648].xyz), vec3(_2675, _2676, _2677));
        float _4515 = isnan(0.0) ? _2686 : (isnan(_2686) ? 0.0 : max(_2686, 0.0));
        float _2690 = _2667 * _2667;
        float _2694 = ((_2685 * _2685) * (_2690 + (-1.0))) + 1.0;
        float _2703 = (exp2(log2(1.0 - (isnan(1.0) ? _4515 : (isnan(_4515) ? 1.0 : min(_4515, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2704 = 1.0 - _2667;
        float _2714 = (0.5 / (((_2350 * ((_2681 * _2704) + _2667)) + 9.9999999392252902907785028219223e-09) + (((_2350 * _2704) + _2667) * _2681))) * _2681;
        float _4526 = isnan(0.0) ? _2714 : (isnan(_2714) ? 0.0 : max(_2714, 0.0));
        float _2716 = (isnan(1.0) ? _4526 : (isnan(_4526) ? 1.0 : min(_4526, 1.0))) * (_2690 / ((_2694 * _2694) * 3.141590118408203125));
        float _2717 = isnan(1.0) ? _2090 : (isnan(_2090) ? 1.0 : min(_2090, 1.0));
        _2637 = (((_2703 * cbLight._m0[_2652].x) * _2716) * _2717) + _2531;
        _2639 = (((_2703 * cbLight._m0[_2652].y) * _2716) * _2717) + _2533;
        _2641 = (((_2703 * cbLight._m0[_2652].z) * _2716) * _2717) + _2535;
    }
    float _2783;
    float _2785;
    float _2787;
    float _2789;
    float _2791;
    float _2793;
    if (_2072.y == 0u)
    {
        uvec4 _2738 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2739 = _2738.x;
        uint _2750 = uint((float(_2738.y) * floor(float(uint(cbSceneParam._m0[85u].y * _715) / _2739))) + floor(float(uint(cbSceneParam._m0[85u].x * _714) / _2739)));
        float _2760 = (log2(_1850 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2761 = isnan(0.0) ? _2760 : (isnan(_2760) ? 0.0 : max(_2760, 0.0));
        uint _2764 = uint(isnan(14.0) ? _2761 : (isnan(_2761) ? 14.0 : min(_2761, 14.0)));
        uvec4 _2769 = texelFetch(g_lightClusterGridBuffer, int(((_2764 << 2u) + (_2750 << 6u)) >> 2u));
        uint _2770 = _2769.x;
        uint _2771 = _2738.z;
        float _2850;
        float _2852;
        float _2854;
        float _2856;
        float _2858;
        float _2860;
        if (((((1u << ((_2771 >> 4u) & 15u)) + 4294967295u) & _2770) == 0u) || ((_2771 & 240u) == 0u))
        {
            _2850 = 0.0;
            _2852 = 0.0;
            _2854 = 0.0;
            _2856 = 0.0;
            _2858 = 0.0;
            _2860 = 0.0;
        }
        else
        {
            float _2851;
            float _2853;
            float _2855;
            float _2857;
            float _2859;
            float _2861;
            float _2995 = 0.0;
            float _2996 = 0.0;
            float _2997 = 0.0;
            float _2998 = 0.0;
            float _2999 = 0.0;
            float _3000 = 0.0;
            uint _3001 = 0u;
            uint _3010;
            bool _3011;
            for (;;)
            {
                _3010 = texelFetch(g_lightClassification, int((((_2764 << 5u) + (_2750 << 9u)) + (_3001 << 2u)) >> 2u)).x;
                _3011 = _3010 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3011)
                {
                    frontier_phi_66_pred = _3000;
                    frontier_phi_66_pred_1 = _2999;
                    frontier_phi_66_pred_2 = _2998;
                    frontier_phi_66_pred_3 = _2997;
                    frontier_phi_66_pred_4 = _2996;
                    frontier_phi_66_pred_5 = _2995;
                }
                else
                {
                    float _3119;
                    float _3120;
                    float _3121;
                    float _3122;
                    float _3123;
                    float _3124;
                    uint _3125;
                    _3119 = _2995;
                    _3120 = _2996;
                    _3121 = _2997;
                    _3122 = _2998;
                    _3123 = _2999;
                    _3124 = _3000;
                    _3125 = _3010;
                    float _3051;
                    float _3052;
                    float _3053;
                    float _3054;
                    float _3055;
                    float _3056;
                    for (;;)
                    {
                        uint _3129 = uint(findLSB(_3125)) + (_3001 << 5u);
                        uint _3126 = (_3125 + 4294967295u) & _3125;
                        uint _3131 = _3129 * 48u;
                        vec4 _3145 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3131)).x, texelFetch(g_PointLightRenderingBuffer, int(_3131 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3131 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3131 + 3u)).x));
                        uint _3151 = (_3129 * 48u) + 4u;
                        vec4 _3164 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3151)).x, texelFetch(g_PointLightRenderingBuffer, int(_3151 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3151 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3151 + 3u)).x));
                        uint _3170 = (_3129 * 48u) + 8u;
                        vec3 _3181 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3170)).x, texelFetch(g_PointLightRenderingBuffer, int(_3170 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3170 + 2u)).x));
                        float _3185 = _3145.x - _1848;
                        float _3186 = _3145.y - _1849;
                        float _3187 = _3145.z - _1850;
                        float _3188 = dot(vec3(_3185, _3186, _3187), vec3(_3185, _3186, _3187));
                        float _3191 = inversesqrt(_3188);
                        float _3192 = _3191 * _3185;
                        float _3193 = _3191 * _3186;
                        float _3194 = _3191 * _3187;
                        float _3195 = dot(vec3(_733, _736, _739), vec3(_3192, _3193, _3194));
                        float _3200 = 1.0 - (_3188 * _3145.w);
                        float _4552 = isnan(0.0) ? _3200 : (isnan(_3200) ? 0.0 : max(_3200, 0.0));
                        float _3201 = isnan(1.0) ? _4552 : (isnan(_4552) ? 1.0 : min(_4552, 1.0));
                        float _3202 = sqrt(_3188) * _3164.w;
                        float _3205 = 1.39999997615814208984375 / (_3202 + 1.39999997615814208984375);
                        float _3206 = _3205 * _3205;
                        float _3209 = ((1.0 - _3206) * _3195) + _3206;
                        float _3212 = _3202 * _3202;
                        float _3216 = ((isnan(0.0) ? _3209 : (isnan(_3209) ? 0.0 : max(_3209, 0.0))) * _3201) / ((_3212 * 0.699999988079071044921875) + 1.0);
                        float _3220 = (-0.0) - _1848;
                        float _3221 = (-0.0) - _1849;
                        float _3222 = (-0.0) - _1850;
                        float _3226 = inversesqrt(dot(vec3(_3220, _3221, _3222), vec3(_3220, _3221, _3222)));
                        float _3227 = _3226 * _3220;
                        float _3228 = _3226 * _3221;
                        float _3229 = _3226 * _3222;
                        float _3236 = exp2(log2(1.0 / ((_3212 * 3.5) + 5.0)) * 0.25);
                        float _3237 = 1.0 - _793;
                        float _3244 = sqrt(1.0 - ((1.0 - (_3237 * _3237)) * (1.0 - (_3236 * _3236))));
                        float _3245 = _3244 * _3244;
                        float _3246 = _3245 * _3245;
                        float _3247 = _3227 + _3192;
                        float _3248 = _3228 + _3193;
                        float _3249 = _3229 + _3194;
                        float _3253 = inversesqrt(dot(vec3(_3247, _3248, _3249), vec3(_3247, _3248, _3249)));
                        float _3257 = dot(vec3(_733, _736, _739), vec3(_3227, _3228, _3229));
                        float _4568 = isnan(0.0) ? _3257 : (isnan(_3257) ? 0.0 : max(_3257, 0.0));
                        float _3260 = isnan(1.0) ? _4568 : (isnan(_4568) ? 1.0 : min(_4568, 1.0));
                        float _3261 = dot(vec3(_733, _736, _739), vec3(_3253 * _3247, _3253 * _3248, _3253 * _3249));
                        float _4579 = isnan(0.0) ? _3261 : (isnan(_3261) ? 0.0 : max(_3261, 0.0));
                        float _3264 = isnan(1.0) ? _4579 : (isnan(_4579) ? 1.0 : min(_4579, 1.0));
                        float _3268 = ((_3264 * _3264) * (_3246 + (-1.0))) + 1.0;
                        float _3269 = _3205 * _3245;
                        float _3270 = _3269 * _3269;
                        float _3273 = ((1.0 - _3270) * _3195) + _3270;
                        float _4590 = isnan(0.0) ? _3273 : (isnan(_3273) ? 0.0 : max(_3273, 0.0));
                        float _3274 = isnan(1.0) ? _4590 : (isnan(_4590) ? 1.0 : min(_4590, 1.0));
                        float _3275 = 1.0 - _3245;
                        float _3285 = (0.5 / (((_3274 * ((_3260 * _3275) + _3245)) + 9.9999999392252902907785028219223e-09) + (((_3274 * _3275) + _3245) * _3260))) * _3274;
                        float _4601 = isnan(0.0) ? _3285 : (isnan(_3285) ? 0.0 : max(_3285, 0.0));
                        float _3296 = (((_3246 * 3.1415927410125732421875) * (isnan(1.0) ? _4601 : (isnan(_4601) ? 1.0 : min(_4601, 1.0)))) / ((_3268 * _3268) * ((_3212 * 2.1991131305694580078125) + 3.141590118408203125))) * _3201;
                        _3054 = (_3216 * _3164.x) + _3122;
                        _3055 = (_3216 * _3164.y) + _3123;
                        _3056 = (_3216 * _3164.z) + _3124;
                        _3051 = (_3296 * _3181.x) + _3119;
                        _3052 = (_3296 * _3181.y) + _3120;
                        _3053 = (_3296 * _3181.z) + _3121;
                        if (_3126 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3119 = _3051;
                            _3120 = _3052;
                            _3121 = _3053;
                            _3122 = _3054;
                            _3123 = _3055;
                            _3124 = _3056;
                            _3125 = _3126;
                        }
                    }
                    frontier_phi_66_pred = _3056;
                    frontier_phi_66_pred_1 = _3055;
                    frontier_phi_66_pred_2 = _3054;
                    frontier_phi_66_pred_3 = _3053;
                    frontier_phi_66_pred_4 = _3052;
                    frontier_phi_66_pred_5 = _3051;
                }
                _2861 = frontier_phi_66_pred;
                _2859 = frontier_phi_66_pred_1;
                _2857 = frontier_phi_66_pred_2;
                _2855 = frontier_phi_66_pred_3;
                _2853 = frontier_phi_66_pred_4;
                _2851 = frontier_phi_66_pred_5;
                uint _3002 = _3001 + 1u;
                if (_3002 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2995 = _2851;
                    _2996 = _2853;
                    _2997 = _2855;
                    _2998 = _2857;
                    _2999 = _2859;
                    _3000 = _2861;
                    _3001 = _3002;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2850 = _2851;
            _2852 = _2853;
            _2854 = _2855;
            _2856 = _2857;
            _2858 = _2859;
            _2860 = _2861;
        }
        uvec4 _2864 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2865 = _2864.z;
        uint _2867 = (_2865 >> 8u) & 15u;
        float _2963;
        float _2965;
        float _2967;
        float _2969;
        float _2971;
        float _2973;
        if (((4294967295u << _2867) & _2770) == 0u)
        {
            _2963 = _2850;
            _2965 = _2852;
            _2967 = _2854;
            _2969 = _2856;
            _2971 = _2858;
            _2973 = _2860;
        }
        else
        {
            float _2988 = inversesqrt(dot(vec3(_1848, _1849, _1850), vec3(_1848, _1849, _1850)));
            float _2989 = _2988 * _1848;
            float _2990 = _2988 * _1849;
            float _2991 = _2988 * _1850;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2867 < ((_2865 >> 12u) & 15u))
            {
                float _2964;
                float _2966;
                float _2968;
                float _2970;
                float _2972;
                float _2974;
                float _3102 = _2850;
                float _3103 = _2852;
                float _3104 = _2854;
                float _3105 = _2856;
                float _3106 = _2858;
                float _3107 = _2860;
                uint _3108 = _2867;
                uint _3117;
                bool _3118;
                for (;;)
                {
                    _3117 = texelFetch(g_lightClassification, int((((_2764 << 5u) + (_2750 << 9u)) + (_3108 << 2u)) >> 2u)).x;
                    _3118 = _3117 == 0u;
                    float frontier_phi_72_pred;
                    float frontier_phi_72_pred_1;
                    float frontier_phi_72_pred_2;
                    float frontier_phi_72_pred_3;
                    float frontier_phi_72_pred_4;
                    float frontier_phi_72_pred_5;
                    if (_3118)
                    {
                        frontier_phi_72_pred = _3107;
                        frontier_phi_72_pred_1 = _3106;
                        frontier_phi_72_pred_2 = _3105;
                        frontier_phi_72_pred_3 = _3104;
                        frontier_phi_72_pred_4 = _3103;
                        frontier_phi_72_pred_5 = _3102;
                    }
                    else
                    {
                        float _3301;
                        float _3302;
                        float _3303;
                        float _3304;
                        float _3305;
                        float _3306;
                        float _3595;
                        float _3596;
                        float _3597;
                        float _3598;
                        float _3599;
                        float _3600;
                        float _3314 = _3102;
                        float _3315 = _3103;
                        float _3316 = _3104;
                        float _3317 = _3105;
                        float _3318 = _3106;
                        float _3319 = _3107;
                        uint _3320 = _3117;
                        uint _3321;
                        vec4 _3346;
                        float _3347;
                        vec4 _3362;
                        vec3 _3374;
                        vec4 _3389;
                        vec4 _3405;
                        float _3451;
                        bool _3452;
                        for (;;)
                        {
                            uint _3331 = ((_3108 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3320));
                            _3321 = (_3320 + 4294967295u) & _3320;
                            uint _3333 = _3331 * 40u;
                            _3346 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3333)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3333 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3333 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3333 + 3u)).x));
                            _3347 = _3346.w;
                            uint _3349 = (_3331 * 40u) + 4u;
                            _3362 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3349)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3349 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3349 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3349 + 3u)).x));
                            uint _3364 = (_3331 * 40u) + 8u;
                            _3374 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3364)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3364 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3364 + 2u)).x));
                            uint _3376 = (_3331 * 40u) + 16u;
                            _3389 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3376)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3376 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3376 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3376 + 3u)).x));
                            uint _3392 = (_3331 * 40u) + 20u;
                            _3405 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3392)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3392 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3392 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3392 + 3u)).x));
                            uint _3407 = (_3331 * 40u) + 24u;
                            vec4 _3420 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3407)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3407 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3407 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3407 + 3u)).x));
                            uint _3426 = (_3331 * 40u) + 28u;
                            vec4 _3439 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3426)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3426 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3426 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3426 + 3u)).x));
                            _3451 = fma(_1850, _3439.z, fma(_1849, _3439.y, _3439.x * _1848)) + _3439.w;
                            _3452 = !((fma(_1850, _3420.z, fma(_1849, _3420.y, _3420.x * _1848)) + _3420.w) <= 0.0);
                            float frontier_phi_78_pred;
                            float frontier_phi_78_pred_1;
                            float frontier_phi_78_pred_2;
                            float frontier_phi_78_pred_3;
                            float frontier_phi_78_pred_4;
                            float frontier_phi_78_pred_5;
                            if (_3452)
                            {
                                float _3479 = _3346.x - _1848;
                                float _3480 = _3346.y - _1849;
                                float _3481 = _3346.z - _1850;
                                float _3482 = dot(vec3(_3479, _3480, _3481), vec3(_3479, _3480, _3481));
                                float _3485 = inversesqrt(_3482);
                                float _3486 = _3485 * _3479;
                                float _3487 = _3485 * _3480;
                                float _3488 = _3485 * _3481;
                                float _3492 = 1.0 - (_3482 / (_3347 * _3347));
                                float _4612 = isnan(0.0) ? _3492 : (isnan(_3492) ? 0.0 : max(_3492, 0.0));
                                float _3493 = isnan(1.0) ? _4612 : (isnan(_4612) ? 1.0 : min(_4612, 1.0));
                                float _3497 = sqrt(_3482) * _3362.w;
                                float _3499 = 1.39999997615814208984375 / (_3497 + 1.39999997615814208984375);
                                float _3500 = _3499 * _3499;
                                float _3503 = ((1.0 - _3500) * dot(vec3(_3486, _3487, _3488), vec3(_733, _736, _739))) + _3500;
                                float _3506 = _3497 * _3497;
                                float _3510 = (fma(_1850, _3389.z, fma(_1849, _3389.y, _3389.x * _1848)) + _3389.w) / _3451;
                                float _3511 = (fma(_1850, _3405.z, fma(_1849, _3405.y, _3405.x * _1848)) + _3405.w) / _3451;
                                float _3515 = 1.0 - dot(vec2(_3510, _3511), vec2(_3510, _3511));
                                float _4628 = isnan(0.0) ? _3515 : (isnan(_3515) ? 0.0 : max(_3515, 0.0));
                                float _3516 = isnan(1.0) ? _4628 : (isnan(_4628) ? 1.0 : min(_4628, 1.0));
                                float _3517 = _3516 * (((isnan(0.0) ? _3503 : (isnan(_3503) ? 0.0 : max(_3503, 0.0))) * _3493) / ((_3506 * 0.699999988079071044921875) + 1.0));
                                float _3529 = exp2(log2(1.0 / ((_3506 * 3.5) + 5.0)) * 0.25);
                                float _3530 = 1.0 - _793;
                                float _3537 = sqrt(1.0 - ((1.0 - (_3530 * _3530)) * (1.0 - (_3529 * _3529))));
                                float _3538 = _3537 * _3537;
                                float _3539 = _3538 * _3538;
                                float _3540 = _3486 - _2989;
                                float _3541 = _3487 - _2990;
                                float _3542 = _3488 - _2991;
                                float _3546 = inversesqrt(dot(vec3(_3540, _3541, _3542), vec3(_3540, _3541, _3542)));
                                float _3550 = dot(vec3(_733, _736, _739), vec3((-0.0) - _2989, (-0.0) - _2990, (-0.0) - _2991));
                                float _4639 = isnan(0.0) ? _3550 : (isnan(_3550) ? 0.0 : max(_3550, 0.0));
                                float _3553 = isnan(1.0) ? _4639 : (isnan(_4639) ? 1.0 : min(_4639, 1.0));
                                float _3554 = dot(vec3(_733, _736, _739), vec3(_3546 * _3540, _3546 * _3541, _3546 * _3542));
                                float _4650 = isnan(0.0) ? _3554 : (isnan(_3554) ? 0.0 : max(_3554, 0.0));
                                float _3557 = isnan(1.0) ? _4650 : (isnan(_4650) ? 1.0 : min(_4650, 1.0));
                                float _3561 = ((_3557 * _3557) * (_3539 + (-1.0))) + 1.0;
                                float _3562 = _3499 * _3538;
                                float _3563 = _3562 * _3562;
                                float _3569 = ((1.0 - _3563) * dot(vec3(_733, _736, _739), vec3(_3486, _3487, _3488))) + _3563;
                                float _4661 = isnan(0.0) ? _3569 : (isnan(_3569) ? 0.0 : max(_3569, 0.0));
                                float _3570 = isnan(1.0) ? _4661 : (isnan(_4661) ? 1.0 : min(_4661, 1.0));
                                float _3571 = 1.0 - _3538;
                                float _3581 = (0.5 / (((_3570 * ((_3553 * _3571) + _3538)) + 9.9999999392252902907785028219223e-09) + (((_3570 * _3571) + _3538) * _3553))) * _3570;
                                float _4672 = isnan(0.0) ? _3581 : (isnan(_3581) ? 0.0 : max(_3581, 0.0));
                                float _3591 = (_3516 * _3493) * (((_3539 * 3.1415927410125732421875) * (isnan(1.0) ? _4672 : (isnan(_4672) ? 1.0 : min(_4672, 1.0)))) / ((_3561 * _3561) * ((_3506 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_78_pred = _3517 * _3362.y;
                                frontier_phi_78_pred_1 = _3517 * _3362.x;
                                frontier_phi_78_pred_2 = _3591 * _3374.z;
                                frontier_phi_78_pred_3 = _3591 * _3374.y;
                                frontier_phi_78_pred_4 = _3591 * _3374.x;
                                frontier_phi_78_pred_5 = _3517 * _3362.z;
                            }
                            else
                            {
                                frontier_phi_78_pred = 0.0;
                                frontier_phi_78_pred_1 = 0.0;
                                frontier_phi_78_pred_2 = 0.0;
                                frontier_phi_78_pred_3 = 0.0;
                                frontier_phi_78_pred_4 = 0.0;
                                frontier_phi_78_pred_5 = 0.0;
                            }
                            _3599 = frontier_phi_78_pred;
                            _3598 = frontier_phi_78_pred_1;
                            _3597 = frontier_phi_78_pred_2;
                            _3596 = frontier_phi_78_pred_3;
                            _3595 = frontier_phi_78_pred_4;
                            _3600 = frontier_phi_78_pred_5;
                            _3304 = _3598 + _3317;
                            _3305 = _3599 + _3318;
                            _3306 = _3600 + _3319;
                            _3301 = _3595 + _3314;
                            _3302 = _3596 + _3315;
                            _3303 = _3597 + _3316;
                            if (_3321 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3314 = _3301;
                                _3315 = _3302;
                                _3316 = _3303;
                                _3317 = _3304;
                                _3318 = _3305;
                                _3319 = _3306;
                                _3320 = _3321;
                                continue;
                            }
                        }
                        frontier_phi_72_pred = _3306;
                        frontier_phi_72_pred_1 = _3305;
                        frontier_phi_72_pred_2 = _3304;
                        frontier_phi_72_pred_3 = _3303;
                        frontier_phi_72_pred_4 = _3302;
                        frontier_phi_72_pred_5 = _3301;
                    }
                    _2974 = frontier_phi_72_pred;
                    _2972 = frontier_phi_72_pred_1;
                    _2970 = frontier_phi_72_pred_2;
                    _2968 = frontier_phi_72_pred_3;
                    _2966 = frontier_phi_72_pred_4;
                    _2964 = frontier_phi_72_pred_5;
                    uint _3109 = _3108 + 1u;
                    if (_3109 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3102 = _2964;
                        _3103 = _2966;
                        _3104 = _2968;
                        _3105 = _2970;
                        _3106 = _2972;
                        _3107 = _2974;
                        _3108 = _3109;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _2974;
                frontier_phi_60_61_ladder_1 = _2972;
                frontier_phi_60_61_ladder_2 = _2968;
                frontier_phi_60_61_ladder_3 = _2966;
                frontier_phi_60_61_ladder_4 = _2964;
                frontier_phi_60_61_ladder_5 = _2970;
            }
            else
            {
                frontier_phi_60_61_ladder = _2860;
                frontier_phi_60_61_ladder_1 = _2858;
                frontier_phi_60_61_ladder_2 = _2854;
                frontier_phi_60_61_ladder_3 = _2852;
                frontier_phi_60_61_ladder_4 = _2850;
                frontier_phi_60_61_ladder_5 = _2856;
            }
            _2963 = frontier_phi_60_61_ladder_4;
            _2965 = frontier_phi_60_61_ladder_3;
            _2967 = frontier_phi_60_61_ladder_2;
            _2969 = frontier_phi_60_61_ladder_5;
            _2971 = frontier_phi_60_61_ladder_1;
            _2973 = frontier_phi_60_61_ladder;
        }
        float _2978 = isnan(1.0) ? _777 : (isnan(_777) ? 1.0 : min(_777, 1.0));
        _2783 = (_2978 * _2969) + _2314;
        _2785 = (_2978 * _2971) + _2316;
        _2787 = (_2978 * _2973) + _2318;
        _2789 = ((_2963 * 0.039999999105930328369140625) * _2978) + _2637;
        _2791 = ((_2965 * 0.039999999105930328369140625) * _2978) + _2639;
        _2793 = ((_2967 * 0.039999999105930328369140625) * _2978) + _2641;
    }
    else
    {
        _2783 = _2314;
        _2785 = _2316;
        _2787 = _2318;
        _2789 = _2637;
        _2791 = _2639;
        _2793 = _2641;
    }
    float _4688 = isnan(0.0) ? _762 : (isnan(_762) ? 0.0 : max(_762, 0.0));
    float _4699 = isnan(0.0) ? _763 : (isnan(_763) ? 0.0 : max(_763, 0.0));
    float _4710 = isnan(0.0) ? _764 : (isnan(_764) ? 0.0 : max(_764, 0.0));
    uint _2813 = _236 + 6u;
    float _2821 = _714 / cbSceneParam._m0[86u].x;
    float _2822 = _715 / cbSceneParam._m0[86u].y;
    vec4 _2836 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2821, _2822, (log2((isnan(cbSceneParam._m0[77u].w) ? _648 : (isnan(_648) ? cbSceneParam._m0[77u].w : min(_648, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2838 = _2836.x;
    float _2839 = _2836.y;
    float _2840 = _2836.z;
    float _2841 = _2836.w;
    float _2913;
    float _2915;
    float _2917;
    float _2919;
    if (_648 > cbSceneParam._m0[78u].w)
    {
        float _2875 = isnan(_648) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _648 : min(cbSceneParam._m0[80u].w, _648));
        float _2876 = _2875 / _648;
        float _2887 = _2876 * _699;
        float _2888 = _700 * _2876;
        float _2889 = (-0.0) - _2888;
        float _2891 = _2876 * _701;
        float _2893 = (cbSceneParam._m0[77u].w * _2889) / _2875;
        float _2894 = _2893 + cbSceneParam._m0[79u].w;
        float _2895 = cbSceneParam._m0[79u].w - _2888;
        float _2901 = sqrt(((_2887 * _2887) + (_2888 * _2888)) + (_2891 * _2891));
        float _2904 = (1.0 - (cbSceneParam._m0[77u].w / _2875)) * _2901;
        float _2909 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2911 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3064;
        if (abs((_2889 - _2893) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3064 = ((((_2894 > 0.0) ? exp2(_2909 * _2894) : (2.0 - exp2(_2911 * _2894))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2904;
        }
        else
        {
            float _3024 = 1.0 / cbSceneParam._m0[80u].x;
            float _3025 = isnan(_2895) ? _2894 : (isnan(_2894) ? _2895 : max(_2894, _2895));
            float _3026 = isnan(_2895) ? _2894 : (isnan(_2894) ? _2895 : min(_2894, _2895));
            float _3035 = isnan(0.0) ? _3025 : (isnan(_3025) ? 0.0 : min(_3025, 0.0));
            float _3036 = isnan(0.0) ? _3026 : (isnan(_3026) ? 0.0 : min(_3026, 0.0));
            _3064 = ((abs(_2901 / _2889) * cbSceneParam._m0[80u].y) * ((((_3035 - _3036) * 2.0) - ((exp2(_2909 * (isnan(0.0) ? _3025 : (isnan(_3025) ? 0.0 : max(_3025, 0.0)))) - exp2(_2909 * (isnan(0.0) ? _3026 : (isnan(_3026) ? 0.0 : max(_3026, 0.0))))) * _3024)) - ((exp2(_2911 * _3035) - exp2(_2911 * _3036)) * _3024))) + (_2904 * cbSceneParam._m0[80u].z);
        }
        vec4 _3066 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2821, _2822, 1.0), 0.0);
        float _3075 = exp2((_3064 * (-1.44269502162933349609375)) * (1.0 - _3066.w));
        float _3076 = log2(_3075);
        float _3092 = log2(_2841);
        _2913 = (exp2(_3092 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3076 * cbSceneParam._m0[78u].x)) * _3066.x) / cbSceneParam._m0[78u].x)) + _2838;
        _2915 = (exp2(_3092 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3076 * cbSceneParam._m0[78u].y)) * _3066.y) / cbSceneParam._m0[78u].y)) + _2839;
        _2917 = (exp2(_3092 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3076 * cbSceneParam._m0[78u].z)) * _3066.z) / cbSceneParam._m0[78u].z)) + _2840;
        _2919 = _3075 * _2841;
    }
    else
    {
        _2913 = _2838;
        _2915 = _2839;
        _2917 = _2840;
        _2919 = _2841;
    }
    float _2931 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2932 = _2931 == 3.0;
    float _2933 = log2(_2919);
    float _2940 = exp2(_2933 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4688 : (isnan(_4688) ? 1.0 : min(_4688, 1.0))) * (_2783 + ((isnan(0.0) ? _1503 : (isnan(_1503) ? 0.0 : max(_1503, 0.0))) * _777))) + ((_2789 + ((isnan(0.0) ? _1795 : (isnan(_1795) ? 0.0 : max(_1795, 0.0))) * _1582)) * cbPerFrame._m0[3u].x));
    float _2941 = exp2(_2933 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4699 : (isnan(_4699) ? 1.0 : min(_4699, 1.0))) * (_2785 + ((isnan(0.0) ? _1506 : (isnan(_1506) ? 0.0 : max(_1506, 0.0))) * _777))) + ((_2791 + ((isnan(0.0) ? _1798 : (isnan(_1798) ? 0.0 : max(_1798, 0.0))) * _1582)) * cbPerFrame._m0[3u].x));
    float _2942 = exp2(_2933 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4710 : (isnan(_4710) ? 1.0 : min(_4710, 1.0))) * (_2787 + ((isnan(0.0) ? _1509 : (isnan(_1509) ? 0.0 : max(_1509, 0.0))) * _777))) + ((_2793 + ((isnan(0.0) ? _1801 : (isnan(_1801) ? 0.0 : max(_1801, 0.0))) * _1582)) * cbPerFrame._m0[3u].x));
    float _2951 = (_2931 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2951 * (_2932 ? _2940 : (_2940 + (cbSceneParam._m0[72u].w * _2913)));
    SV_Target.y = _2951 * (_2932 ? _2941 : (_2941 + (cbSceneParam._m0[72u].w * _2915)));
    SV_Target.z = _2951 * (_2932 ? _2942 : (_2942 + (cbSceneParam._m0[72u].w * _2917)));
    SV_Target.w = cbInstanceData._m0[_2813].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2813].w;
}


