#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_0;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 14) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_29;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_10;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_6;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1433;
float _3790;
float _3791;
float _3792;
float _3793;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _231 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _232 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _233 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _239 = inversesqrt(dot(vec3(_231, _232, _233), vec3(_231, _232, _233)));
    float _246 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _253 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _259 = uint(roundEven(NORMAL.w)) * 13u;
    uint _264 = _259 + 1u;
    uint _268 = _259 + 2u;
    float _277 = sqrt(((cbInstanceData._m0[_264].x * cbInstanceData._m0[_264].x) + (cbInstanceData._m0[_259].x * cbInstanceData._m0[_259].x)) + (cbInstanceData._m0[_268].x * cbInstanceData._m0[_268].x));
    float _278 = _277 * TEXCOORD.z;
    float _279 = _277 * TEXCOORD.w;
    vec4 _298 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _322 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _327 = _322.x * cbMtdParam._m0[11u].x;
    float _328 = _322.y * cbMtdParam._m0[11u].y;
    float _329 = _322.z * cbMtdParam._m0[11u].z;
    vec4 _348 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _278) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _279) + cbTextureTilingScale._m0[5u].w));
    vec4 _367 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _404 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _406 = _404.x;
    float _418 = dot(vec4(_406, _404.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _435 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _367.x) * 2.0) - ((((_406 - _418) * cbMtdParam._m0[24u].z) + _418) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3802 = isnan(0.0) ? _435 : (isnan(_435) ? 0.0 : max(_435, 0.0));
    float _436 = isnan(1.0) ? _3802 : (isnan(_3802) ? 1.0 : min(_3802, 1.0));
    float _443 = (_436 * ((_348.x * cbMtdParam._m0[12u].x) - _327)) + _327;
    float _444 = (_436 * ((_348.y * cbMtdParam._m0[12u].y) - _328)) + _328;
    float _445 = (_436 * ((_348.z * cbMtdParam._m0[12u].z) - _329)) + _329;
    vec4 _462 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _278) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _279) + cbTextureTilingScale._m0[3u].w));
    vec4 _482 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _484 = _482.x;
    float _494 = dot(vec4(_484, _482.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _508 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _367.y) * 2.0) - ((((_484 - _494) * cbMtdParam._m0[24u].z) + _494) * cbMtdParam._m0[20u].w))) + 1.0;
    float _3813 = isnan(0.0) ? _508 : (isnan(_508) ? 0.0 : max(_508, 0.0));
    float _509 = isnan(1.0) ? _3813 : (isnan(_3813) ? 1.0 : min(_3813, 1.0));
    float _522 = ((cbMtdParam._m0[9u].x * 4.55000019073486328125) * _298.x) * ((_509 * ((_462.x * cbMtdParam._m0[13u].x) - _443)) + _443);
    float _525 = ((cbMtdParam._m0[9u].y * 4.55000019073486328125) * _298.y) * ((_509 * ((_462.y * cbMtdParam._m0[13u].y) - _444)) + _444);
    float _528 = ((cbMtdParam._m0[9u].z * 4.55000019073486328125) * _298.z) * ((_509 * ((_462.z * cbMtdParam._m0[13u].z) - _445)) + _445);
    vec4 _547 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _278) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _279) + cbTextureTilingScale._m0[14u].w));
    vec4 _567 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _278) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _279) + cbTextureTilingScale._m0[4u].w));
    vec4 _584 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _586 = _584.x;
    float _587 = _584.y;
    float _588 = _584.z;
    float _595 = ((_567.x - _586) * _436) + _586;
    float _596 = ((_567.y - _587) * _436) + _587;
    float _597 = ((_567.z - _588) * _436) + _588;
    vec4 _609 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _278) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _279) + cbTextureTilingScale._m0[2u].w));
    float _622 = ((_609.z - _597) * _509) + _597;
    float _625 = ((((_609.x - _595) * _509) + _595) * 2.0) + (-1.0);
    float _627 = ((((_609.y - _596) * _509) + _596) * 2.0) + (-1.0);
    float _628 = dot(vec2(_625, _627), vec2(_625, _627));
    float _3824 = isnan(0.0) ? _628 : (isnan(_628) ? 0.0 : max(_628, 0.0));
    float _633 = sqrt(1.0 - (isnan(1.0) ? _3824 : (isnan(_3824) ? 1.0 : min(_3824, 1.0))));
    vec4 _647 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _672 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _278) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _279) + cbTextureTilingScale._m0[11u].w));
    float _674 = _672.x;
    float _675 = 1.0 - _674;
    float _681 = isnan(-1.0) ? cbMtdParam._m0[24u].x : (isnan(cbMtdParam._m0[24u].x) ? (-1.0) : max(cbMtdParam._m0[24u].x, -1.0));
    float _684 = ((isnan(0.0) ? _681 : (isnan(_681) ? 0.0 : min(_681, 0.0))) * TEXCOORD_8.x) + TEXCOORD_8.w;
    float _693 = (_684 - ((((((_674 - _675) * cbMtdParam._m0[24u].w) + _675) + 0.00999999977648258209228515625) * cbMtdParam._m0[21u].z) * (1.0 - _684))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3845 = isnan(0.0) ? _693 : (isnan(_693) ? 0.0 : max(_693, 0.0));
    float _694 = isnan(1.0) ? _3845 : (isnan(_3845) ? 1.0 : min(_3845, 1.0));
    float _701 = (_694 * ((_547.x * cbMtdParam._m0[18u].x) - _522)) + _522;
    float _702 = (_694 * ((_547.y * cbMtdParam._m0[18u].y) - _525)) + _525;
    float _703 = (_694 * ((_547.z * cbMtdParam._m0[18u].z) - _528)) + _528;
    vec4 _715 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _278) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _279) + cbTextureTilingScale._m0[19u].w));
    float _717 = _715.x;
    float _718 = 1.0 - _717;
    float _745 = (TEXCOORD_8.x - ((cbMtdParam._m0[22u].w * (1.0 - TEXCOORD_8.x)) * ((((_717 - _718) * cbMtdParam._m0[24u].y) + _718) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3856 = isnan(0.0) ? _745 : (isnan(_745) ? 0.0 : max(_745, 0.0));
    float _746 = isnan(1.0) ? _3856 : (isnan(_3856) ? 1.0 : min(_3856, 1.0));
    float _754 = ((((cbMtdParam._m0[10u].x - _701) * TEXCOORD_8.x) * cbMtdParam._m0[23u].w) * _746) + _701;
    float _755 = ((((cbMtdParam._m0[10u].y - _702) * TEXCOORD_8.y) * cbMtdParam._m0[23u].w) * _746) + _702;
    float _756 = (((cbMtdParam._m0[23u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _703)) * _746) + _703;
    float _760 = (cbMtdParam._m0[19u].w * (_647.z - _622)) + _622;
    vec4 _774 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _278) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _279) + cbTextureTilingScale._m0[15u].w));
    float _781 = (_774.x * 2.0) + (-1.0);
    float _782 = (_774.y * 2.0) + (-1.0);
    float _783 = dot(vec2(_781, _782), vec2(_781, _782));
    float _3867 = isnan(0.0) ? _783 : (isnan(_783) ? 0.0 : max(_783, 0.0));
    float _791 = (_694 * (_774.z - _760)) + _760;
    float _794 = ((cbMtdParam._m0[23u].y - _791) * _746) + _791;
    vec4 _813 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _278) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _279) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _819 = (_813.x * 2.0) + (-1.0);
    float _820 = (_813.y * 2.0) + (-1.0);
    float _821 = dot(vec2(_819, _820), vec2(_819, _820));
    float _3878 = isnan(0.0) ? _821 : (isnan(_821) ? 0.0 : max(_821, 0.0));
    float _829 = (((_647.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _625;
    float _830 = (((_647.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _627;
    float _842 = (((_781 - _829) + (cbMtdParam._m0[21u].x * _829)) * _694) + _829;
    float _843 = (((_782 - _830) + (cbMtdParam._m0[21u].x * _830)) * _694) + _830;
    float _844 = (_694 * (sqrt(1.0 - (isnan(1.0) ? _3867 : (isnan(_3867) ? 1.0 : min(_3867, 1.0)))) - _633)) + _633;
    float _855 = (((_819 - _842) + (_842 * cbMtdParam._m0[22u].z)) * _746) + _842;
    float _856 = (((_820 - _843) + (_843 * cbMtdParam._m0[22u].z)) * _746) + _843;
    float _857 = ((sqrt(1.0 - (isnan(1.0) ? _3878 : (isnan(_3878) ? 1.0 : min(_3878, 1.0)))) - _844) * _746) + _844;
    float _859 = cbMtdParam._m0[22u].x + _647.w;
    float _862 = fma(_857, _246 * NORMAL.x, fma(_856, _253 * TANGENT.x, (_239 * _231) * _855));
    float _865 = fma(_857, _246 * NORMAL.y, fma(_856, _253 * TANGENT.y, (_239 * _232) * _855));
    float _868 = fma(_857, _246 * NORMAL.z, fma(_856, _253 * TANGENT.z, (_239 * _233) * _855));
    float _872 = inversesqrt(dot(vec3(_862, _865, _868), vec3(_862, _865, _868)));
    float _873 = _872 * _862;
    float _874 = _872 * _865;
    float _875 = _872 * _868;
    float _3889 = isnan(0.0) ? _794 : (isnan(_794) ? 0.0 : max(_794, 0.0));
    float _876 = isnan(1.0) ? _3889 : (isnan(_3889) ? 1.0 : min(_3889, 1.0));
    float _3900 = isnan(0.0) ? _859 : (isnan(_859) ? 0.0 : max(_859, 0.0));
    float _3911 = isnan(0.0) ? _754 : (isnan(_754) ? 0.0 : max(_754, 0.0));
    float _3922 = isnan(0.0) ? _755 : (isnan(_755) ? 0.0 : max(_755, 0.0));
    float _3933 = isnan(0.0) ? _756 : (isnan(_756) ? 0.0 : max(_756, 0.0));
    float _894 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _934 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _944 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _934);
    float _945 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _934);
    float _946 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _934);
    float _950 = inversesqrt(dot(vec3(_944, _945, _946), vec3(_944, _945, _946)));
    float _951 = _944 * _950;
    float _952 = _945 * _950;
    float _953 = _946 * _950;
    vec4 _958 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _960 = _958.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1114 = sqrt(((_944 * _944) + (_945 * _945)) + (_946 * _946));
        float _1120 = (cbMatDynParam._m0[5u].x * _1114) + cbMatDynParam._m0[5u].y;
        float _3944 = isnan(0.0) ? _1120 : (isnan(_1120) ? 0.0 : max(_1120, 0.0));
        float _1121 = isnan(1.0) ? _3944 : (isnan(_3944) ? 1.0 : min(_3944, 1.0));
        float _1125 = (cbMatDynParam._m0[5u].z * _1114) + cbMatDynParam._m0[5u].w;
        float _3955 = isnan(0.0) ? _1125 : (isnan(_1125) ? 0.0 : max(_1125, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3955 : (isnan(_3955) ? 1.0 : min(_3955, 1.0))) - _1121)) + _1121) < ((_960 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _971 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _972 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _990 = fma(_875, cbSceneParam._m0[5u].z, fma(_874, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _873));
    float _993 = fma(_875, cbSceneParam._m0[6u].z, fma(_874, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _873));
    float _996 = fma(_875, cbSceneParam._m0[7u].z, fma(_874, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _873));
    uint _1009 = _259 + 9u;
    uint _1010 = _1009 + uint(cbMatDynParam._m0[0u].w);
    float _1016 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3911 : (isnan(_3911) ? 1.0 : min(_3911, 1.0)))) * cbInstanceData._m0[_1010].x;
    float _1017 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3922 : (isnan(_3922) ? 1.0 : min(_3922, 1.0)))) * cbInstanceData._m0[_1010].y;
    float _1018 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3933 : (isnan(_3933) ? 1.0 : min(_3933, 1.0)))) * cbInstanceData._m0[_1010].z;
    float _3966 = isnan(0.0) ? _1016 : (isnan(_1016) ? 0.0 : max(_1016, 0.0));
    float _1019 = isnan(1.0) ? _3966 : (isnan(_3966) ? 1.0 : min(_3966, 1.0));
    float _3977 = isnan(0.0) ? _1017 : (isnan(_1017) ? 0.0 : max(_1017, 0.0));
    float _1020 = isnan(1.0) ? _3977 : (isnan(_3977) ? 1.0 : min(_3977, 1.0));
    float _3988 = isnan(0.0) ? _1018 : (isnan(_1018) ? 0.0 : max(_1018, 0.0));
    float _1021 = isnan(1.0) ? _3988 : (isnan(_3988) ? 1.0 : min(_3988, 1.0));
    vec4 _1030 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _971, cbSceneParam._m0[86u].y * _972));
    float _1034 = ((isnan(1.0) ? _3900 : (isnan(_3900) ? 1.0 : min(_3900, 1.0))) * TEXCOORD_5.w) * _1030.x;
    float _1035 = dot(vec3(_873, _874, _875), vec3(_951, _952, _953));
    float _1038 = _1035 * 2.0;
    float _1042 = (_1038 * _873) - _951;
    float _1043 = (_1038 * _874) - _952;
    float _1044 = (_1038 * _875) - _953;
    float _1048 = abs(dot(vec3(_951, _952, _953), vec3(_873, _874, _875)));
    float _3999 = isnan(0.0) ? _1048 : (isnan(_1048) ? 0.0 : max(_1048, 0.0));
    float _1050 = sqrt(_876);
    float _1063 = exp2((_1050 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3999 : (isnan(_3999) ? 1.0 : min(_3999, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1050 * 3.0));
    float _1095 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1099 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1103 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1432;
    float _1434;
    float _1435;
    float _1436;
    float _1437;
    float _1438;
    float _1439;
    float _1440;
    float _1441;
    float _1442;
    float _1443;
    float _1444;
    float _1445;
    float _1446;
    float _1447;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1157 = fma(_1103, cbModelParam._m0[26u].z, fma(_1099, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1095));
        float _1161 = fma(_1103, cbModelParam._m0[27u].z, fma(_1099, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1095));
        float _1165 = fma(_1103, cbModelParam._m0[28u].z, fma(_1099, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1095));
        float _1190 = _1095 + _873;
        float _1191 = _1099 + _874;
        float _1192 = _1103 + _875;
        float _1202 = fma(_1192, cbModelParam._m0[26u].z, fma(_1191, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1190)) - _1157;
        float _1203 = fma(_1192, cbModelParam._m0[27u].z, fma(_1191, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1190)) - _1161;
        float _1204 = fma(_1192, cbModelParam._m0[28u].z, fma(_1191, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1190)) - _1165;
        float _1208 = inversesqrt(dot(vec3(_1202, _1203, _1204), vec3(_1202, _1203, _1204)));
        float _1221 = ((_1208 * _1202) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1157 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1222 = ((_1208 * _1203) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1161 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1223 = ((_1208 * _1204) / cbModelParam._m0[34u].z) + ((((((_1165 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1226 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1221, _1222, _1223), 0.0);
        vec4 _1233 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1221, _1222, _1223), 0.0);
        vec4 _1240 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1221, _1222, _1223), 0.0);
        vec4 _1247 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1221, _1222, _1223), 0.0);
        float _1260 = exp2((_1226.w + (-0.5)) * 20.0) * 2.0;
        float _1261 = _1260 * (_1226.x + (-0.5));
        float _1262 = _1260 * (_1226.y + (-0.5));
        float _1263 = _1260 * (_1226.z + (-0.5));
        float _1270 = exp2((_1233.w + (-0.5)) * 20.0) * 2.0;
        float _1271 = _1270 * (_1233.x + (-0.5));
        float _1272 = _1270 * (_1233.y + (-0.5));
        float _1273 = _1270 * (_1233.z + (-0.5));
        float _1280 = exp2((_1240.w + (-0.5)) * 20.0) * 2.0;
        float _1281 = _1280 * (_1240.x + (-0.5));
        float _1282 = _1280 * (_1240.y + (-0.5));
        float _1283 = _1280 * (_1240.z + (-0.5));
        float _1290 = exp2((_1247.w + (-0.5)) * 20.0) * 2.0;
        float _1291 = _1290 * (_1247.x + (-0.5));
        float _1292 = _1290 * (_1247.y + (-0.5));
        float _1293 = _1290 * (_1247.z + (-0.5));
        float _1294 = isnan(0.0) ? _1291 : (isnan(_1291) ? 0.0 : max(_1291, 0.0));
        float _1295 = isnan(0.0) ? _1292 : (isnan(_1292) ? 0.0 : max(_1292, 0.0));
        float _1296 = isnan(0.0) ? _1293 : (isnan(_1293) ? 0.0 : max(_1293, 0.0));
        float _1297 = _1261 * 0.5;
        float _1298 = _1271 * 0.5;
        float _1299 = _1281 * 0.5;
        float _1300 = dot(vec3(_1297, _1298, _1299), vec3(_1297, _1298, _1299));
        float _1305 = (_1300 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1300);
        float _1314 = (dot(vec3(_873, _874, _875), vec3(_1305 * _1297, _1305 * _1298, _1305 * _1299)) + 1.0) * 0.5;
        float _4025 = isnan(0.0) ? _1314 : (isnan(_1314) ? 0.0 : max(_1314, 0.0));
        float _1324 = sqrt(((_1298 * _1298) + (_1297 * _1297)) + (_1299 * _1299)) / (_1294 + 9.9999997473787516355514526367188e-06);
        float _4036 = isnan(0.0) ? _1324 : (isnan(_1324) ? 0.0 : max(_1324, 0.0));
        float _1325 = isnan(1.0) ? _4036 : (isnan(_4036) ? 1.0 : min(_4036, 1.0));
        float _1326 = _1325 * 2.0;
        float _1330 = (1.0 - _1325) / (_1325 + 1.0);
        float _4047 = isnan(0.0) ? _1330 : (isnan(_1330) ? 0.0 : max(_1330, 0.0));
        float _1331 = isnan(1.0) ? _4047 : (isnan(_4047) ? 1.0 : min(_4047, 1.0));
        float _1340 = ((((1.0 - _1331) * (_1326 + 2.0)) * exp2(log2(isnan(1.0) ? _4025 : (isnan(_4025) ? 1.0 : min(_4025, 1.0))) * (_1326 + 1.0))) + _1331) * _1294;
        float _1341 = _1262 * 0.5;
        float _1342 = _1272 * 0.5;
        float _1343 = _1282 * 0.5;
        float _1344 = dot(vec3(_1341, _1342, _1343), vec3(_1341, _1342, _1343));
        float _1349 = (_1344 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1344);
        float _1357 = (dot(vec3(_873, _874, _875), vec3(_1349 * _1341, _1349 * _1342, _1349 * _1343)) + 1.0) * 0.5;
        float _4058 = isnan(0.0) ? _1357 : (isnan(_1357) ? 0.0 : max(_1357, 0.0));
        float _1366 = sqrt(((_1342 * _1342) + (_1341 * _1341)) + (_1343 * _1343)) / (_1295 + 9.9999997473787516355514526367188e-06);
        float _4069 = isnan(0.0) ? _1366 : (isnan(_1366) ? 0.0 : max(_1366, 0.0));
        float _1367 = isnan(1.0) ? _4069 : (isnan(_4069) ? 1.0 : min(_4069, 1.0));
        float _1368 = _1367 * 2.0;
        float _1372 = (1.0 - _1367) / (_1367 + 1.0);
        float _4080 = isnan(0.0) ? _1372 : (isnan(_1372) ? 0.0 : max(_1372, 0.0));
        float _1373 = isnan(1.0) ? _4080 : (isnan(_4080) ? 1.0 : min(_4080, 1.0));
        float _1382 = ((((1.0 - _1373) * (_1368 + 2.0)) * exp2(log2(isnan(1.0) ? _4058 : (isnan(_4058) ? 1.0 : min(_4058, 1.0))) * (_1368 + 1.0))) + _1373) * _1295;
        float _1383 = _1263 * 0.5;
        float _1384 = _1273 * 0.5;
        float _1385 = _1283 * 0.5;
        float _1386 = dot(vec3(_1383, _1384, _1385), vec3(_1383, _1384, _1385));
        float _1391 = (_1386 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1386);
        float _1399 = (dot(vec3(_873, _874, _875), vec3(_1391 * _1383, _1391 * _1384, _1391 * _1385)) + 1.0) * 0.5;
        float _4091 = isnan(0.0) ? _1399 : (isnan(_1399) ? 0.0 : max(_1399, 0.0));
        float _1408 = sqrt(((_1384 * _1384) + (_1383 * _1383)) + (_1385 * _1385)) / (_1296 + 9.9999997473787516355514526367188e-06);
        float _4102 = isnan(0.0) ? _1408 : (isnan(_1408) ? 0.0 : max(_1408, 0.0));
        float _1409 = isnan(1.0) ? _4102 : (isnan(_4102) ? 1.0 : min(_4102, 1.0));
        float _1410 = _1409 * 2.0;
        float _1414 = (1.0 - _1409) / (_1409 + 1.0);
        float _4113 = isnan(0.0) ? _1414 : (isnan(_1414) ? 0.0 : max(_1414, 0.0));
        float _1415 = isnan(1.0) ? _4113 : (isnan(_4113) ? 1.0 : min(_4113, 1.0));
        float _1424 = ((((1.0 - _1415) * (_1410 + 2.0)) * exp2(log2(isnan(1.0) ? _4091 : (isnan(_4091) ? 1.0 : min(_4091, 1.0))) * (_1410 + 1.0))) + _1415) * _1296;
        _1432 = _1263;
        _1434 = _1262;
        _1435 = _1261;
        _1436 = _1273;
        _1437 = _1272;
        _1438 = _1271;
        _1439 = _1283;
        _1440 = _1282;
        _1441 = _1281;
        _1442 = _1296;
        _1443 = _1295;
        _1444 = _1294;
        _1445 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1340 : (isnan(_1340) ? 0.0 : max(_1340, 0.0)));
        _1446 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1382 : (isnan(_1382) ? 0.0 : max(_1382, 0.0)));
        _1447 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1424 : (isnan(_1424) ? 0.0 : max(_1424, 0.0)));
    }
    else
    {
        _1432 = _1433;
        _1434 = _1433;
        _1435 = _1433;
        _1436 = _1433;
        _1437 = _1433;
        _1438 = _1433;
        _1439 = _1433;
        _1440 = _1433;
        _1441 = _1433;
        _1442 = _1433;
        _1443 = _1433;
        _1444 = _1433;
        _1445 = 0.0;
        _1446 = 0.0;
        _1447 = 0.0;
    }
    float _1743;
    float _1744;
    float _1745;
    float _1746;
    float _1747;
    float _1748;
    float _1749;
    float _1750;
    float _1751;
    float _1752;
    float _1753;
    float _1754;
    float _1755;
    float _1756;
    float _1757;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1474 = fma(_1103, cbModelParam._m0[30u].z, fma(_1099, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1095));
        float _1478 = fma(_1103, cbModelParam._m0[31u].z, fma(_1099, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1095));
        float _1482 = fma(_1103, cbModelParam._m0[32u].z, fma(_1099, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1095));
        float _1505 = _1095 + _873;
        float _1506 = _1099 + _874;
        float _1507 = _1103 + _875;
        float _1517 = fma(_1507, cbModelParam._m0[30u].z, fma(_1506, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1505)) - _1474;
        float _1518 = fma(_1507, cbModelParam._m0[31u].z, fma(_1506, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1505)) - _1478;
        float _1519 = fma(_1507, cbModelParam._m0[32u].z, fma(_1506, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1505)) - _1482;
        float _1523 = inversesqrt(dot(vec3(_1517, _1518, _1519), vec3(_1517, _1518, _1519)));
        float _1536 = ((_1523 * _1517) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1474 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1537 = ((_1523 * _1518) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1478 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1538 = ((_1523 * _1519) / cbModelParam._m0[35u].z) + ((((((_1482 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1540 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1536, _1537, _1538), 0.0);
        vec4 _1547 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1536, _1537, _1538), 0.0);
        vec4 _1554 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1536, _1537, _1538), 0.0);
        vec4 _1561 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1536, _1537, _1538), 0.0);
        float _1573 = exp2((_1540.w + (-0.5)) * 20.0) * 2.0;
        float _1574 = _1573 * (_1540.x + (-0.5));
        float _1575 = _1573 * (_1540.y + (-0.5));
        float _1576 = _1573 * (_1540.z + (-0.5));
        float _1583 = exp2((_1547.w + (-0.5)) * 20.0) * 2.0;
        float _1584 = _1583 * (_1547.x + (-0.5));
        float _1585 = _1583 * (_1547.y + (-0.5));
        float _1586 = _1583 * (_1547.z + (-0.5));
        float _1593 = exp2((_1554.w + (-0.5)) * 20.0) * 2.0;
        float _1594 = _1593 * (_1554.x + (-0.5));
        float _1595 = _1593 * (_1554.y + (-0.5));
        float _1596 = _1593 * (_1554.z + (-0.5));
        float _1603 = exp2((_1561.w + (-0.5)) * 20.0) * 2.0;
        float _1604 = _1603 * (_1561.x + (-0.5));
        float _1605 = _1603 * (_1561.y + (-0.5));
        float _1606 = _1603 * (_1561.z + (-0.5));
        float _1607 = isnan(0.0) ? _1604 : (isnan(_1604) ? 0.0 : max(_1604, 0.0));
        float _1608 = isnan(0.0) ? _1605 : (isnan(_1605) ? 0.0 : max(_1605, 0.0));
        float _1609 = isnan(0.0) ? _1606 : (isnan(_1606) ? 0.0 : max(_1606, 0.0));
        float _1610 = _1574 * 0.5;
        float _1611 = _1584 * 0.5;
        float _1612 = _1594 * 0.5;
        float _1613 = dot(vec3(_1610, _1611, _1612), vec3(_1610, _1611, _1612));
        float _1618 = (_1613 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1613);
        float _1626 = (dot(vec3(_873, _874, _875), vec3(_1618 * _1610, _1618 * _1611, _1618 * _1612)) + 1.0) * 0.5;
        float _4154 = isnan(0.0) ? _1626 : (isnan(_1626) ? 0.0 : max(_1626, 0.0));
        float _1635 = sqrt(((_1611 * _1611) + (_1610 * _1610)) + (_1612 * _1612)) / (_1607 + 9.9999997473787516355514526367188e-06);
        float _4165 = isnan(0.0) ? _1635 : (isnan(_1635) ? 0.0 : max(_1635, 0.0));
        float _1636 = isnan(1.0) ? _4165 : (isnan(_4165) ? 1.0 : min(_4165, 1.0));
        float _1637 = _1636 * 2.0;
        float _1641 = (1.0 - _1636) / (_1636 + 1.0);
        float _4176 = isnan(0.0) ? _1641 : (isnan(_1641) ? 0.0 : max(_1641, 0.0));
        float _1642 = isnan(1.0) ? _4176 : (isnan(_4176) ? 1.0 : min(_4176, 1.0));
        float _1651 = ((((1.0 - _1642) * (_1637 + 2.0)) * exp2(log2(isnan(1.0) ? _4154 : (isnan(_4154) ? 1.0 : min(_4154, 1.0))) * (_1637 + 1.0))) + _1642) * _1607;
        float _1652 = _1575 * 0.5;
        float _1653 = _1585 * 0.5;
        float _1654 = _1595 * 0.5;
        float _1655 = dot(vec3(_1652, _1653, _1654), vec3(_1652, _1653, _1654));
        float _1660 = (_1655 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1655);
        float _1668 = (dot(vec3(_873, _874, _875), vec3(_1660 * _1652, _1660 * _1653, _1660 * _1654)) + 1.0) * 0.5;
        float _4187 = isnan(0.0) ? _1668 : (isnan(_1668) ? 0.0 : max(_1668, 0.0));
        float _1677 = sqrt(((_1653 * _1653) + (_1652 * _1652)) + (_1654 * _1654)) / (_1608 + 9.9999997473787516355514526367188e-06);
        float _4198 = isnan(0.0) ? _1677 : (isnan(_1677) ? 0.0 : max(_1677, 0.0));
        float _1678 = isnan(1.0) ? _4198 : (isnan(_4198) ? 1.0 : min(_4198, 1.0));
        float _1679 = _1678 * 2.0;
        float _1683 = (1.0 - _1678) / (_1678 + 1.0);
        float _4209 = isnan(0.0) ? _1683 : (isnan(_1683) ? 0.0 : max(_1683, 0.0));
        float _1684 = isnan(1.0) ? _4209 : (isnan(_4209) ? 1.0 : min(_4209, 1.0));
        float _1693 = ((((1.0 - _1684) * (_1679 + 2.0)) * exp2(log2(isnan(1.0) ? _4187 : (isnan(_4187) ? 1.0 : min(_4187, 1.0))) * (_1679 + 1.0))) + _1684) * _1608;
        float _1694 = _1576 * 0.5;
        float _1695 = _1586 * 0.5;
        float _1696 = _1596 * 0.5;
        float _1697 = dot(vec3(_1694, _1695, _1696), vec3(_1694, _1695, _1696));
        float _1702 = (_1697 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1697);
        float _1710 = (dot(vec3(_873, _874, _875), vec3(_1702 * _1694, _1702 * _1695, _1702 * _1696)) + 1.0) * 0.5;
        float _4220 = isnan(0.0) ? _1710 : (isnan(_1710) ? 0.0 : max(_1710, 0.0));
        float _1719 = sqrt(((_1695 * _1695) + (_1694 * _1694)) + (_1696 * _1696)) / (_1609 + 9.9999997473787516355514526367188e-06);
        float _4231 = isnan(0.0) ? _1719 : (isnan(_1719) ? 0.0 : max(_1719, 0.0));
        float _1720 = isnan(1.0) ? _4231 : (isnan(_4231) ? 1.0 : min(_4231, 1.0));
        float _1721 = _1720 * 2.0;
        float _1725 = (1.0 - _1720) / (_1720 + 1.0);
        float _4242 = isnan(0.0) ? _1725 : (isnan(_1725) ? 0.0 : max(_1725, 0.0));
        float _1726 = isnan(1.0) ? _4242 : (isnan(_4242) ? 1.0 : min(_4242, 1.0));
        float _1735 = ((((1.0 - _1726) * (_1721 + 2.0)) * exp2(log2(isnan(1.0) ? _4220 : (isnan(_4220) ? 1.0 : min(_4220, 1.0))) * (_1721 + 1.0))) + _1726) * _1609;
        _1743 = _1576;
        _1744 = _1575;
        _1745 = _1574;
        _1746 = _1586;
        _1747 = _1585;
        _1748 = _1584;
        _1749 = _1596;
        _1750 = _1595;
        _1751 = _1594;
        _1752 = _1609;
        _1753 = _1608;
        _1754 = _1607;
        _1755 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1651 : (isnan(_1651) ? 0.0 : max(_1651, 0.0)));
        _1756 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1693 : (isnan(_1693) ? 0.0 : max(_1693, 0.0)));
        _1757 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1735 : (isnan(_1735) ? 0.0 : max(_1735, 0.0)));
    }
    else
    {
        _1743 = _1433;
        _1744 = _1433;
        _1745 = _1433;
        _1746 = _1433;
        _1747 = _1433;
        _1748 = _1433;
        _1749 = _1433;
        _1750 = _1433;
        _1751 = _1433;
        _1752 = _1433;
        _1753 = _1433;
        _1754 = _1433;
        _1755 = 0.0;
        _1756 = 0.0;
        _1757 = 0.0;
    }
    float _1767 = (cbModelParam._m0[1u].x * (_1755 - _1445)) + _1445;
    float _1768 = (cbModelParam._m0[1u].x * (_1756 - _1446)) + _1446;
    float _1769 = (cbModelParam._m0[1u].x * (_1757 - _1447)) + _1447;
    float _1790 = fma(_1769, cbSceneParam._m0[89u].z, fma(_1768, cbSceneParam._m0[89u].y, _1767 * cbSceneParam._m0[89u].x));
    float _1793 = fma(_1769, cbSceneParam._m0[90u].z, fma(_1768, cbSceneParam._m0[90u].y, _1767 * cbSceneParam._m0[90u].x));
    float _1796 = fma(_1769, cbSceneParam._m0[91u].z, fma(_1768, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1767));
    float _1811 = _1042 * 0.5;
    float _1812 = _1043 * 0.5;
    float _1813 = _1044 * 0.5;
    float _1814 = dot(vec4(_1811, _1812, _1813, 1.0), vec4(_1745, _1748, _1751, _1754));
    float _1817 = dot(vec4(_1811, _1812, _1813, 1.0), vec4(_1744, _1747, _1750, _1753));
    float _1820 = dot(vec4(_1811, _1812, _1813, 1.0), vec4(_1743, _1746, _1749, _1752));
    float _1854;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1827 = dot(vec4(_1811, _1812, _1813, 1.0), vec4(_1432, _1436, _1439, _1442));
        float _1831 = dot(vec4(_1811, _1812, _1813, 1.0), vec4(_1434, _1437, _1440, _1443));
        float _1835 = dot(vec4(_1811, _1812, _1813, 1.0), vec4(_1435, _1438, _1441, _1444));
        float _1842 = dot(vec4(cbModelParam._m0[39u]), vec4(_1811, _1812, _1813, 1.0));
        _1854 = dot(vec3(isnan(0.0) ? _1835 : (isnan(_1835) ? 0.0 : max(_1835, 0.0)), isnan(0.0) ? _1831 : (isnan(_1831) ? 0.0 : max(_1831, 0.0)), isnan(0.0) ? _1827 : (isnan(_1827) ? 0.0 : max(_1827, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1842) ? 0.0 : (isnan(0.0) ? _1842 : max(0.0, _1842))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1854 = 1.0;
    }
    float _1865;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1856 = dot(vec4(cbModelParam._m0[40u]), vec4(_1811, _1812, _1813, 1.0));
        _1865 = dot(vec3(isnan(0.0) ? _1814 : (isnan(_1814) ? 0.0 : max(_1814, 0.0)), isnan(0.0) ? _1817 : (isnan(_1817) ? 0.0 : max(_1817, 0.0)), isnan(0.0) ? _1820 : (isnan(_1820) ? 0.0 : max(_1820, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1856) ? 0.0 : (isnan(0.0) ? _1856 : max(0.0, _1856))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1865 = 1.0;
    }
    float _1869 = (_1865 * cbModelParam._m0[1u].x) + (_1854 * (1.0 - cbModelParam._m0[1u].x));
    float _1879 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _876);
    float _1880 = isnan(_1879) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1879 : min(cbModelParam._m0[25u].z, _1879));
    float _1960;
    float _1962;
    float _1964;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1927 = fma(_1103, cbModelParam._m0[13u].z, fma(_1099, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1095)) + cbModelParam._m0[13u].w;
        float _1931 = fma(_1103, cbModelParam._m0[14u].z, fma(_1099, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1095)) + cbModelParam._m0[14u].w;
        float _1935 = fma(_1103, cbModelParam._m0[15u].z, fma(_1099, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1095)) + cbModelParam._m0[15u].w;
        float _1938 = fma(_1044, cbModelParam._m0[13u].z, fma(_1043, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1042));
        float _1941 = fma(_1044, cbModelParam._m0[14u].z, fma(_1043, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1042));
        float _1944 = fma(_1044, cbModelParam._m0[15u].z, fma(_1043, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1042));
        float _1972;
        if (_1938 > 0.0)
        {
            _1972 = abs((1.0 - _1927) / _1938);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1938 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1927 + 1.0) / _1938);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1972 = frontier_phi_17_15_ladder;
        }
        float _2172;
        if (_1941 > 0.0)
        {
            _2172 = abs((1.0 - _1931) / _1941);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1941 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1931 + 1.0) / _1941);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2172 = frontier_phi_26_22_ladder;
        }
        float _2415;
        if (_1944 > 0.0)
        {
            _2415 = abs((1.0 - _1935) / _1944);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1944 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1935 + 1.0) / _1944);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2415 = frontier_phi_38_33_ladder;
        }
        float _2417 = isnan(_2172) ? _1972 : (isnan(_1972) ? _2172 : min(_1972, _2172));
        float _2418 = isnan(_2415) ? _2417 : (isnan(_2417) ? _2415 : min(_2417, _2415));
        float _2422 = (_2418 * _1938) + _1927;
        float _2423 = (_2418 * _1941) + _1931;
        float _2424 = (_2418 * _1944) + _1935;
        float _2425 = _2418 * 9.9999997473787516355514526367188e-05;
        float _2427 = (-1.0) - _2425;
        float _2429 = _2425 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2424 > _2429) || ((_2424 < _2427) || ((_2423 > _2429) || ((_2423 < _2427) || ((_2422 < _2427) || (_2422 > _2429))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2548 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2424, cbModelParam._m0[9u].z, fma(_2423, cbModelParam._m0[9u].y, _2422 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2424, cbModelParam._m0[10u].z, fma(_2423, cbModelParam._m0[10u].y, _2422 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2424, cbModelParam._m0[11u].z, fma(_2423, cbModelParam._m0[11u].y, _2422 * cbModelParam._m0[11u].x))), _1880);
            frontier_phi_16_38_ladder = _2548.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2548.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2548.x * cbModelParam._m0[1u].y;
        }
        _1960 = frontier_phi_16_38_ladder_2;
        _1962 = frontier_phi_16_38_ladder_1;
        _1964 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1948 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1042, _1043, _1044), _1880);
        _1960 = _1948.x * cbModelParam._m0[1u].y;
        _1962 = _1948.y * cbModelParam._m0[1u].y;
        _1964 = _1948.z * cbModelParam._m0[1u].y;
    }
    float _1968 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _876);
    float _1969 = isnan(_1968) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1968 : min(cbModelParam._m0[25u].w, _1968));
    float _2058;
    float _2060;
    float _2062;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2022 = fma(_1103, cbModelParam._m0[21u].z, fma(_1099, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1095)) + cbModelParam._m0[21u].w;
        float _2026 = fma(_1103, cbModelParam._m0[22u].z, fma(_1099, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1095)) + cbModelParam._m0[22u].w;
        float _2030 = fma(_1103, cbModelParam._m0[23u].z, fma(_1099, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1095)) + cbModelParam._m0[23u].w;
        float _2033 = fma(_1044, cbModelParam._m0[21u].z, fma(_1043, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1042));
        float _2036 = fma(_1044, cbModelParam._m0[22u].z, fma(_1043, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1042));
        float _2039 = fma(_1044, cbModelParam._m0[23u].z, fma(_1043, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1042));
        float _2177;
        if (_2033 > 0.0)
        {
            _2177 = abs((1.0 - _2022) / _2033);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_2033 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_2022 + 1.0) / _2033);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2177 = frontier_phi_28_24_ladder;
        }
        float _2442;
        if (_2036 > 0.0)
        {
            _2442 = abs((1.0 - _2026) / _2036);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_2036 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_2026 + 1.0) / _2036);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2442 = frontier_phi_40_35_ladder;
        }
        float _2647;
        if (_2039 > 0.0)
        {
            _2647 = abs((1.0 - _2030) / _2039);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_2039 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_2030 + 1.0) / _2039);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2647 = frontier_phi_49_46_ladder;
        }
        float _2649 = isnan(_2442) ? _2177 : (isnan(_2177) ? _2442 : min(_2177, _2442));
        float _2650 = isnan(_2647) ? _2649 : (isnan(_2649) ? _2647 : min(_2649, _2647));
        float _2654 = (_2650 * _2033) + _2022;
        float _2655 = (_2650 * _2036) + _2026;
        float _2656 = (_2650 * _2039) + _2030;
        float _2657 = _2650 * 9.9999997473787516355514526367188e-05;
        float _2658 = (-1.0) - _2657;
        float _2660 = _2657 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2656 > _2660) || ((_2656 < _2658) || ((_2655 > _2660) || ((_2655 < _2658) || ((_2654 < _2658) || (_2654 > _2660))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2855 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2656, cbModelParam._m0[17u].z, fma(_2655, cbModelParam._m0[17u].y, _2654 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2656, cbModelParam._m0[18u].z, fma(_2655, cbModelParam._m0[18u].y, _2654 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2656, cbModelParam._m0[19u].z, fma(_2655, cbModelParam._m0[19u].y, _2654 * cbModelParam._m0[19u].x))), _1969);
            frontier_phi_25_49_ladder = _2855.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2855.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2855.x * cbModelParam._m0[1u].z;
        }
        _2058 = frontier_phi_25_49_ladder_2;
        _2060 = frontier_phi_25_49_ladder_1;
        _2062 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _2042 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1042, _1043, _1044), _1969);
        _2058 = _2042.x * cbModelParam._m0[1u].z;
        _2060 = _2042.y * cbModelParam._m0[1u].z;
        _2062 = _2042.z * cbModelParam._m0[1u].z;
    }
    float _2074 = ((((1.0 - _1063) * ((_1050 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_1063 * _1050)) * _1034;
    float _2075 = _2074 * ((cbModelParam._m0[1u].w * (_2058 - _1960)) + _1960);
    float _2076 = _2074 * ((cbModelParam._m0[1u].w * (_2060 - _1962)) + _1962);
    float _2077 = _2074 * ((cbModelParam._m0[1u].w * (_2062 - _1964)) + _1964);
    float _2080 = fma(_2077, cbSceneParam._m0[89u].z, fma(_2076, cbSceneParam._m0[89u].y, _2075 * cbSceneParam._m0[89u].x));
    float _2083 = fma(_2077, cbSceneParam._m0[90u].z, fma(_2076, cbSceneParam._m0[90u].y, _2075 * cbSceneParam._m0[90u].x));
    float _2086 = fma(_2077, cbSceneParam._m0[91u].z, fma(_2076, cbSceneParam._m0[91u].y, _2075 * cbSceneParam._m0[91u].x));
    uvec4 _2096 = floatBitsToUint(cbInstanceData._m0[_259 + 5u]);
    uint _2098 = _2096.x * 14u;
    uint _2099 = _2098 + 13u;
    float _2106 = _1034 + (-1.0);
    float _2111 = (cbLight._m0[_2099].x * _2106) + 1.0;
    float _2112 = (cbLight._m0[_2099].y * _2106) + 1.0;
    float _2113 = (cbLight._m0[_2099].z * _2106) + 1.0;
    float _2114 = (cbLight._m0[_2099].w * _2106) + 1.0;
    uint _2115 = _2098 + 5u;
    float _2121 = isnan(1.0) ? _2112 : (isnan(_2112) ? 1.0 : min(_2112, 1.0));
    uint _2125 = _2098 + 4u;
    float _2131 = isnan(1.0) ? _2111 : (isnan(_2111) ? 1.0 : min(_2111, 1.0));
    uint _2135 = _2098 | 1u;
    float _2146 = dot(vec3(cbLight._m0[_2098].xyz), vec3(_873, _874, _875));
    float _2149 = dot(vec3(cbLight._m0[_2135].xyz), vec3(_873, _874, _875));
    float _4378 = isnan(0.0) ? _2146 : (isnan(_2146) ? 0.0 : max(_2146, 0.0));
    float _4389 = isnan(0.0) ? _2149 : (isnan(_2149) ? 0.0 : max(_2149, 0.0));
    float _2154 = (isnan(1.0) ? _4378 : (isnan(_4378) ? 1.0 : min(_4378, 1.0))) * 0.3183098733425140380859375;
    float _2156 = (isnan(1.0) ? _4389 : (isnan(_4389) ? 1.0 : min(_4389, 1.0))) * 0.3183098733425140380859375;
    float _2163 = ((cbLight._m0[_2115].x * _2121) * _2156) + ((cbLight._m0[_2125].x * _2131) * _2154);
    float _2164 = ((_2121 * cbLight._m0[_2115].y) * _2156) + ((_2131 * cbLight._m0[_2125].y) * _2154);
    float _2165 = ((_2121 * cbLight._m0[_2115].z) * _2156) + ((_2131 * cbLight._m0[_2125].z) * _2154);
    uvec4 _2169 = floatBitsToUint(cbLight._m0[_2098 + 12u]);
    bool _2171 = _2169.x == 0u;
    float _2182;
    float _2184;
    float _2186;
    if (_2171)
    {
        _2182 = _2163;
        _2184 = _2164;
        _2186 = _2165;
    }
    else
    {
        uint _2190 = _2098 + 6u;
        float _2206 = (dot(vec3(cbLight._m0[_2098 + 2u].xyz), vec3(_873, _874, _875)) * 0.5) + 0.5;
        float _2207 = _2206 * _2206;
        float _4400 = isnan(0.0) ? _2207 : (isnan(_2207) ? 0.0 : max(_2207, 0.0));
        float _2208 = isnan(1.0) ? _4400 : (isnan(_4400) ? 1.0 : min(_4400, 1.0));
        float _2209 = isnan(1.0) ? _2113 : (isnan(_2113) ? 1.0 : min(_2113, 1.0));
        _2182 = (((cbLight._m0[_2190].x * 0.3183098733425140380859375) * _2208) * _2209) + _2163;
        _2184 = (((cbLight._m0[_2190].y * 0.3183098733425140380859375) * _2208) * _2209) + _2164;
        _2186 = (((cbLight._m0[_2190].z * 0.3183098733425140380859375) * _2208) * _2209) + _2165;
    }
    bool _2189 = _2169.y == 0u;
    float _2227;
    float _2229;
    float _2231;
    if (_2189)
    {
        _2227 = _2182;
        _2229 = _2184;
        _2231 = _2186;
    }
    else
    {
        uint _2386 = _2098 + 7u;
        float _2402 = (dot(vec3(cbLight._m0[_2098 + 3u].xyz), vec3(_873, _874, _875)) * 0.5) + 0.5;
        float _2403 = _2402 * _2402;
        float _4416 = isnan(0.0) ? _2403 : (isnan(_2403) ? 0.0 : max(_2403, 0.0));
        float _2404 = isnan(1.0) ? _4416 : (isnan(_4416) ? 1.0 : min(_4416, 1.0));
        float _2405 = isnan(1.0) ? _2114 : (isnan(_2114) ? 1.0 : min(_2114, 1.0));
        _2227 = (((cbLight._m0[_2386].x * 0.3183098733425140380859375) * _2404) * _2405) + _2182;
        _2229 = (((cbLight._m0[_2386].y * 0.3183098733425140380859375) * _2404) * _2405) + _2184;
        _2231 = (((cbLight._m0[_2386].z * 0.3183098733425140380859375) * _2404) * _2405) + _2186;
    }
    uint _2234 = _2098 + 8u;
    float _2247 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2098].w)) * _876) * 0.949999988079071044921875);
    float _2248 = _2247 * _2247;
    float _2249 = cbLight._m0[_2098].x + _951;
    float _2250 = cbLight._m0[_2098].y + _952;
    float _2251 = cbLight._m0[_2098].z + _953;
    float _2255 = inversesqrt(dot(vec3(_2249, _2250, _2251), vec3(_2249, _2250, _2251)));
    float _2256 = _2255 * _2249;
    float _2257 = _2255 * _2250;
    float _2258 = _2255 * _2251;
    float _2259 = dot(vec3(_873, _874, _875), vec3(cbLight._m0[_2098].xyz));
    float _4432 = isnan(0.0) ? _2259 : (isnan(_2259) ? 0.0 : max(_2259, 0.0));
    float _2262 = isnan(1.0) ? _4432 : (isnan(_4432) ? 1.0 : min(_4432, 1.0));
    float _4443 = isnan(0.0) ? _1035 : (isnan(_1035) ? 0.0 : max(_1035, 0.0));
    float _2263 = isnan(1.0) ? _4443 : (isnan(_4443) ? 1.0 : min(_4443, 1.0));
    float _2264 = dot(vec3(_873, _874, _875), vec3(_2256, _2257, _2258));
    float _4454 = isnan(0.0) ? _2264 : (isnan(_2264) ? 0.0 : max(_2264, 0.0));
    float _2267 = isnan(1.0) ? _4454 : (isnan(_4454) ? 1.0 : min(_4454, 1.0));
    float _2268 = dot(vec3(cbLight._m0[_2098].xyz), vec3(_2256, _2257, _2258));
    float _4465 = isnan(0.0) ? _2268 : (isnan(_2268) ? 0.0 : max(_2268, 0.0));
    float _2272 = _2248 * _2248;
    float _2276 = ((_2267 * _2267) * (_2272 + (-1.0))) + 1.0;
    float _2287 = (exp2(log2(1.0 - (isnan(1.0) ? _4465 : (isnan(_4465) ? 1.0 : min(_4465, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2288 = 1.0 - _2248;
    float _2299 = (0.5 / (((_2263 * ((_2262 * _2288) + _2248)) + 9.9999999392252902907785028219223e-09) + (((_2263 * _2288) + _2248) * _2262))) * _2262;
    float _4476 = isnan(0.0) ? _2299 : (isnan(_2299) ? 0.0 : max(_2299, 0.0));
    float _2301 = (isnan(1.0) ? _4476 : (isnan(_4476) ? 1.0 : min(_4476, 1.0))) * (_2272 / ((_2276 * _2276) * 3.141590118408203125));
    uint _2312 = _2098 + 9u;
    float _2323 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2135].w)) * _876) * 0.949999988079071044921875);
    float _2324 = _2323 * _2323;
    float _2325 = cbLight._m0[_2135].x + _951;
    float _2326 = cbLight._m0[_2135].y + _952;
    float _2327 = cbLight._m0[_2135].z + _953;
    float _2331 = inversesqrt(dot(vec3(_2325, _2326, _2327), vec3(_2325, _2326, _2327)));
    float _2332 = _2331 * _2325;
    float _2333 = _2331 * _2326;
    float _2334 = _2331 * _2327;
    float _2335 = dot(vec3(_873, _874, _875), vec3(cbLight._m0[_2135].xyz));
    float _4487 = isnan(0.0) ? _2335 : (isnan(_2335) ? 0.0 : max(_2335, 0.0));
    float _2338 = isnan(1.0) ? _4487 : (isnan(_4487) ? 1.0 : min(_4487, 1.0));
    float _2339 = dot(vec3(_873, _874, _875), vec3(_2332, _2333, _2334));
    float _4498 = isnan(0.0) ? _2339 : (isnan(_2339) ? 0.0 : max(_2339, 0.0));
    float _2342 = isnan(1.0) ? _4498 : (isnan(_4498) ? 1.0 : min(_4498, 1.0));
    float _2343 = dot(vec3(cbLight._m0[_2135].xyz), vec3(_2332, _2333, _2334));
    float _4509 = isnan(0.0) ? _2343 : (isnan(_2343) ? 0.0 : max(_2343, 0.0));
    float _2347 = _2324 * _2324;
    float _2351 = ((_2342 * _2342) * (_2347 + (-1.0))) + 1.0;
    float _2360 = (exp2(log2(1.0 - (isnan(1.0) ? _4509 : (isnan(_4509) ? 1.0 : min(_4509, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2361 = 1.0 - _2324;
    float _2371 = (0.5 / (((_2263 * ((_2338 * _2361) + _2324)) + 9.9999999392252902907785028219223e-09) + (((_2263 * _2361) + _2324) * _2338))) * _2338;
    float _4520 = isnan(0.0) ? _2371 : (isnan(_2371) ? 0.0 : max(_2371, 0.0));
    float _2373 = (isnan(1.0) ? _4520 : (isnan(_4520) ? 1.0 : min(_4520, 1.0))) * (_2347 / ((_2351 * _2351) * 3.141590118408203125));
    float _2383 = (((_2360 * cbLight._m0[_2312].x) * _2373) * _2121) + (((_2287 * cbLight._m0[_2234].x) * _2301) * _2131);
    float _2384 = (((_2360 * cbLight._m0[_2312].y) * _2373) * _2121) + (((_2287 * cbLight._m0[_2234].y) * _2301) * _2131);
    float _2385 = (((_2360 * cbLight._m0[_2312].z) * _2373) * _2121) + (((_2287 * cbLight._m0[_2234].z) * _2301) * _2131);
    float _2447;
    float _2449;
    float _2451;
    if (_2171)
    {
        _2447 = _2383;
        _2449 = _2384;
        _2451 = _2385;
    }
    else
    {
        uint _2453 = _2098 + 2u;
        uint _2457 = _2098 + 10u;
        float _2471 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2453].w)) * _876) * 0.949999988079071044921875);
        float _2472 = _2471 * _2471;
        float _2473 = cbLight._m0[_2453].x + _951;
        float _2474 = cbLight._m0[_2453].y + _952;
        float _2475 = cbLight._m0[_2453].z + _953;
        float _2479 = inversesqrt(dot(vec3(_2473, _2474, _2475), vec3(_2473, _2474, _2475)));
        float _2480 = _2479 * _2473;
        float _2481 = _2479 * _2474;
        float _2482 = _2479 * _2475;
        float _2483 = dot(vec3(_873, _874, _875), vec3(cbLight._m0[_2453].xyz));
        float _4531 = isnan(0.0) ? _2483 : (isnan(_2483) ? 0.0 : max(_2483, 0.0));
        float _2486 = isnan(1.0) ? _4531 : (isnan(_4531) ? 1.0 : min(_4531, 1.0));
        float _2487 = dot(vec3(_873, _874, _875), vec3(_2480, _2481, _2482));
        float _4542 = isnan(0.0) ? _2487 : (isnan(_2487) ? 0.0 : max(_2487, 0.0));
        float _2490 = isnan(1.0) ? _4542 : (isnan(_4542) ? 1.0 : min(_4542, 1.0));
        float _2491 = dot(vec3(cbLight._m0[_2453].xyz), vec3(_2480, _2481, _2482));
        float _4553 = isnan(0.0) ? _2491 : (isnan(_2491) ? 0.0 : max(_2491, 0.0));
        float _2495 = _2472 * _2472;
        float _2499 = ((_2490 * _2490) * (_2495 + (-1.0))) + 1.0;
        float _2508 = (exp2(log2(1.0 - (isnan(1.0) ? _4553 : (isnan(_4553) ? 1.0 : min(_4553, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2509 = 1.0 - _2472;
        float _2519 = (0.5 / (((_2263 * ((_2486 * _2509) + _2472)) + 9.9999999392252902907785028219223e-09) + (((_2263 * _2509) + _2472) * _2486))) * _2486;
        float _4564 = isnan(0.0) ? _2519 : (isnan(_2519) ? 0.0 : max(_2519, 0.0));
        float _2521 = (isnan(1.0) ? _4564 : (isnan(_4564) ? 1.0 : min(_4564, 1.0))) * (_2495 / ((_2499 * _2499) * 3.141590118408203125));
        float _2522 = isnan(1.0) ? _2113 : (isnan(_2113) ? 1.0 : min(_2113, 1.0));
        _2447 = (((_2508 * cbLight._m0[_2457].x) * _2521) * _2522) + _2383;
        _2449 = (((_2508 * cbLight._m0[_2457].y) * _2521) * _2522) + _2384;
        _2451 = (((_2508 * cbLight._m0[_2457].z) * _2521) * _2522) + _2385;
    }
    float _2557;
    float _2559;
    float _2561;
    if (_2189)
    {
        _2557 = _2447;
        _2559 = _2449;
        _2561 = _2451;
    }
    else
    {
        uint _2568 = _2098 + 3u;
        uint _2572 = _2098 + 11u;
        float _2586 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2568].w)) * _876) * 0.949999988079071044921875);
        float _2587 = _2586 * _2586;
        float _2588 = cbLight._m0[_2568].x + _951;
        float _2589 = cbLight._m0[_2568].y + _952;
        float _2590 = cbLight._m0[_2568].z + _953;
        float _2594 = inversesqrt(dot(vec3(_2588, _2589, _2590), vec3(_2588, _2589, _2590)));
        float _2595 = _2594 * _2588;
        float _2596 = _2594 * _2589;
        float _2597 = _2594 * _2590;
        float _2598 = dot(vec3(_873, _874, _875), vec3(cbLight._m0[_2568].xyz));
        float _4580 = isnan(0.0) ? _2598 : (isnan(_2598) ? 0.0 : max(_2598, 0.0));
        float _2601 = isnan(1.0) ? _4580 : (isnan(_4580) ? 1.0 : min(_4580, 1.0));
        float _2602 = dot(vec3(_873, _874, _875), vec3(_2595, _2596, _2597));
        float _4591 = isnan(0.0) ? _2602 : (isnan(_2602) ? 0.0 : max(_2602, 0.0));
        float _2605 = isnan(1.0) ? _4591 : (isnan(_4591) ? 1.0 : min(_4591, 1.0));
        float _2606 = dot(vec3(cbLight._m0[_2568].xyz), vec3(_2595, _2596, _2597));
        float _4602 = isnan(0.0) ? _2606 : (isnan(_2606) ? 0.0 : max(_2606, 0.0));
        float _2610 = _2587 * _2587;
        float _2614 = ((_2605 * _2605) * (_2610 + (-1.0))) + 1.0;
        float _2623 = (exp2(log2(1.0 - (isnan(1.0) ? _4602 : (isnan(_4602) ? 1.0 : min(_4602, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2624 = 1.0 - _2587;
        float _2634 = (0.5 / (((_2263 * ((_2601 * _2624) + _2587)) + 9.9999999392252902907785028219223e-09) + (((_2263 * _2624) + _2587) * _2601))) * _2601;
        float _4613 = isnan(0.0) ? _2634 : (isnan(_2634) ? 0.0 : max(_2634, 0.0));
        float _2636 = (isnan(1.0) ? _4613 : (isnan(_4613) ? 1.0 : min(_4613, 1.0))) * (_2610 / ((_2614 * _2614) * 3.141590118408203125));
        float _2637 = isnan(1.0) ? _2114 : (isnan(_2114) ? 1.0 : min(_2114, 1.0));
        _2557 = (((_2623 * cbLight._m0[_2572].x) * _2636) * _2637) + _2447;
        _2559 = (((_2623 * cbLight._m0[_2572].y) * _2636) * _2637) + _2449;
        _2561 = (((_2623 * cbLight._m0[_2572].z) * _2636) * _2637) + _2451;
    }
    float _2772;
    float _2774;
    float _2776;
    float _2778;
    float _2780;
    float _2782;
    if (_2096.y == 0u)
    {
        float _2712 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2713 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2712;
        float _2714 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2712;
        float _2715 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2712;
        uvec4 _2727 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2728 = _2727.x;
        uint _2739 = uint((float(_2727.y) * floor(float(uint(cbSceneParam._m0[85u].y * _972) / _2728))) + floor(float(uint(cbSceneParam._m0[85u].x * _971) / _2728)));
        float _2749 = (log2(_2715 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2750 = isnan(0.0) ? _2749 : (isnan(_2749) ? 0.0 : max(_2749, 0.0));
        uint _2753 = uint(isnan(14.0) ? _2750 : (isnan(_2750) ? 14.0 : min(_2750, 14.0)));
        uvec4 _2758 = texelFetch(g_lightClusterGridBuffer, int(((_2753 << 2u) + (_2739 << 6u)) >> 2u));
        uint _2759 = _2758.x;
        uint _2760 = _2727.z;
        float _2860;
        float _2862;
        float _2864;
        float _2866;
        float _2868;
        float _2870;
        if (((((1u << ((_2760 >> 4u) & 15u)) + 4294967295u) & _2759) == 0u) || ((_2760 & 240u) == 0u))
        {
            _2860 = 0.0;
            _2862 = 0.0;
            _2864 = 0.0;
            _2866 = 0.0;
            _2868 = 0.0;
            _2870 = 0.0;
        }
        else
        {
            float _2861;
            float _2863;
            float _2865;
            float _2867;
            float _2869;
            float _2871;
            float _3013 = 0.0;
            float _3014 = 0.0;
            float _3015 = 0.0;
            float _3016 = 0.0;
            float _3017 = 0.0;
            float _3018 = 0.0;
            uint _3019 = 0u;
            uint _3028;
            bool _3029;
            for (;;)
            {
                _3028 = texelFetch(g_lightClassification, int((((_2753 << 5u) + (_2739 << 9u)) + (_3019 << 2u)) >> 2u)).x;
                _3029 = _3028 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3029)
                {
                    frontier_phi_66_pred = _3013;
                    frontier_phi_66_pred_1 = _3018;
                    frontier_phi_66_pred_2 = _3017;
                    frontier_phi_66_pred_3 = _3016;
                    frontier_phi_66_pred_4 = _3015;
                    frontier_phi_66_pred_5 = _3014;
                }
                else
                {
                    float _3158;
                    float _3159;
                    float _3160;
                    float _3161;
                    float _3162;
                    float _3163;
                    uint _3164;
                    _3158 = _3013;
                    _3159 = _3014;
                    _3160 = _3015;
                    _3161 = _3016;
                    _3162 = _3017;
                    _3163 = _3018;
                    _3164 = _3028;
                    float _3085;
                    float _3086;
                    float _3087;
                    float _3088;
                    float _3089;
                    float _3090;
                    for (;;)
                    {
                        uint _3168 = uint(findLSB(_3164)) + (_3019 << 5u);
                        uint _3165 = (_3164 + 4294967295u) & _3164;
                        uint _3170 = _3168 * 48u;
                        vec4 _3184 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3170)).x, texelFetch(g_PointLightRenderingBuffer, int(_3170 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3170 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3170 + 3u)).x));
                        uint _3190 = (_3168 * 48u) + 4u;
                        vec4 _3203 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3190)).x, texelFetch(g_PointLightRenderingBuffer, int(_3190 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3190 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3190 + 3u)).x));
                        uint _3209 = (_3168 * 48u) + 8u;
                        vec3 _3220 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3209)).x, texelFetch(g_PointLightRenderingBuffer, int(_3209 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3209 + 2u)).x));
                        float _3224 = _3184.x - _2713;
                        float _3225 = _3184.y - _2714;
                        float _3226 = _3184.z - _2715;
                        float _3227 = dot(vec3(_3224, _3225, _3226), vec3(_3224, _3225, _3226));
                        float _3230 = inversesqrt(_3227);
                        float _3231 = _3230 * _3224;
                        float _3232 = _3230 * _3225;
                        float _3233 = _3230 * _3226;
                        float _3234 = dot(vec3(_990, _993, _996), vec3(_3231, _3232, _3233));
                        float _3239 = 1.0 - (_3227 * _3184.w);
                        float _4639 = isnan(0.0) ? _3239 : (isnan(_3239) ? 0.0 : max(_3239, 0.0));
                        float _3240 = isnan(1.0) ? _4639 : (isnan(_4639) ? 1.0 : min(_4639, 1.0));
                        float _3241 = sqrt(_3227) * _3203.w;
                        float _3244 = 1.39999997615814208984375 / (_3241 + 1.39999997615814208984375);
                        float _3245 = _3244 * _3244;
                        float _3248 = ((1.0 - _3245) * _3234) + _3245;
                        float _3251 = _3241 * _3241;
                        float _3255 = ((isnan(0.0) ? _3248 : (isnan(_3248) ? 0.0 : max(_3248, 0.0))) * _3240) / ((_3251 * 0.699999988079071044921875) + 1.0);
                        float _3259 = (-0.0) - _2713;
                        float _3260 = (-0.0) - _2714;
                        float _3261 = (-0.0) - _2715;
                        float _3265 = inversesqrt(dot(vec3(_3259, _3260, _3261), vec3(_3259, _3260, _3261)));
                        float _3266 = _3265 * _3259;
                        float _3267 = _3265 * _3260;
                        float _3268 = _3265 * _3261;
                        float _3276 = exp2(log2(1.0 / ((_3251 * 3.5) + 5.0)) * 0.25);
                        float _3277 = 1.0 - _1050;
                        float _3284 = sqrt(1.0 - ((1.0 - (_3277 * _3277)) * (1.0 - (_3276 * _3276))));
                        float _3285 = _3284 * _3284;
                        float _3286 = _3285 * _3285;
                        float _3287 = _3266 + _3231;
                        float _3288 = _3267 + _3232;
                        float _3289 = _3268 + _3233;
                        float _3293 = inversesqrt(dot(vec3(_3287, _3288, _3289), vec3(_3287, _3288, _3289)));
                        float _3297 = dot(vec3(_990, _993, _996), vec3(_3266, _3267, _3268));
                        float _4655 = isnan(0.0) ? _3297 : (isnan(_3297) ? 0.0 : max(_3297, 0.0));
                        float _3300 = isnan(1.0) ? _4655 : (isnan(_4655) ? 1.0 : min(_4655, 1.0));
                        float _3301 = dot(vec3(_990, _993, _996), vec3(_3293 * _3287, _3293 * _3288, _3293 * _3289));
                        float _4666 = isnan(0.0) ? _3301 : (isnan(_3301) ? 0.0 : max(_3301, 0.0));
                        float _3304 = isnan(1.0) ? _4666 : (isnan(_4666) ? 1.0 : min(_4666, 1.0));
                        float _3308 = ((_3304 * _3304) * (_3286 + (-1.0))) + 1.0;
                        float _3309 = _3244 * _3285;
                        float _3310 = _3309 * _3309;
                        float _3313 = ((1.0 - _3310) * _3234) + _3310;
                        float _4677 = isnan(0.0) ? _3313 : (isnan(_3313) ? 0.0 : max(_3313, 0.0));
                        float _3314 = isnan(1.0) ? _4677 : (isnan(_4677) ? 1.0 : min(_4677, 1.0));
                        float _3315 = 1.0 - _3285;
                        float _3325 = (0.5 / (((_3314 * ((_3300 * _3315) + _3285)) + 9.9999999392252902907785028219223e-09) + (((_3314 * _3315) + _3285) * _3300))) * _3314;
                        float _4688 = isnan(0.0) ? _3325 : (isnan(_3325) ? 0.0 : max(_3325, 0.0));
                        float _3336 = (((_3286 * 3.1415927410125732421875) * (isnan(1.0) ? _4688 : (isnan(_4688) ? 1.0 : min(_4688, 1.0)))) / ((_3308 * _3308) * ((_3251 * 2.1991131305694580078125) + 3.141590118408203125))) * _3240;
                        _3088 = (_3255 * _3203.x) + _3161;
                        _3089 = (_3255 * _3203.y) + _3162;
                        _3090 = (_3255 * _3203.z) + _3163;
                        _3085 = (_3336 * _3220.x) + _3158;
                        _3086 = (_3336 * _3220.y) + _3159;
                        _3087 = (_3336 * _3220.z) + _3160;
                        if (_3165 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3158 = _3085;
                            _3159 = _3086;
                            _3160 = _3087;
                            _3161 = _3088;
                            _3162 = _3089;
                            _3163 = _3090;
                            _3164 = _3165;
                        }
                    }
                    frontier_phi_66_pred = _3085;
                    frontier_phi_66_pred_1 = _3090;
                    frontier_phi_66_pred_2 = _3089;
                    frontier_phi_66_pred_3 = _3088;
                    frontier_phi_66_pred_4 = _3087;
                    frontier_phi_66_pred_5 = _3086;
                }
                _2861 = frontier_phi_66_pred;
                _2871 = frontier_phi_66_pred_1;
                _2869 = frontier_phi_66_pred_2;
                _2867 = frontier_phi_66_pred_3;
                _2865 = frontier_phi_66_pred_4;
                _2863 = frontier_phi_66_pred_5;
                uint _3020 = _3019 + 1u;
                if (_3020 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3013 = _2861;
                    _3014 = _2863;
                    _3015 = _2865;
                    _3016 = _2867;
                    _3017 = _2869;
                    _3018 = _2871;
                    _3019 = _3020;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2860 = _2861;
            _2862 = _2863;
            _2864 = _2865;
            _2866 = _2867;
            _2868 = _2869;
            _2870 = _2871;
        }
        uvec4 _2874 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2875 = _2874.z;
        uint _2877 = (_2875 >> 8u) & 15u;
        float _2981;
        float _2983;
        float _2985;
        float _2987;
        float _2989;
        float _2991;
        if (((4294967295u << _2877) & _2759) == 0u)
        {
            _2981 = _2860;
            _2983 = _2862;
            _2985 = _2864;
            _2987 = _2866;
            _2989 = _2868;
            _2991 = _2870;
        }
        else
        {
            float _3006 = inversesqrt(dot(vec3(_2713, _2714, _2715), vec3(_2713, _2714, _2715)));
            float _3007 = _3006 * _2713;
            float _3008 = _3006 * _2714;
            float _3009 = _3006 * _2715;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2877 < ((_2875 >> 12u) & 15u))
            {
                float _2982;
                float _2984;
                float _2986;
                float _2988;
                float _2990;
                float _2992;
                float _3141 = _2860;
                float _3142 = _2862;
                float _3143 = _2864;
                float _3144 = _2866;
                float _3145 = _2868;
                float _3146 = _2870;
                uint _3147 = _2877;
                uint _3156;
                bool _3157;
                for (;;)
                {
                    _3156 = texelFetch(g_lightClassification, int((((_2753 << 5u) + (_2739 << 9u)) + (_3147 << 2u)) >> 2u)).x;
                    _3157 = _3156 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_3157)
                    {
                        frontier_phi_77_pred = _3146;
                        frontier_phi_77_pred_1 = _3145;
                        frontier_phi_77_pred_2 = _3144;
                        frontier_phi_77_pred_3 = _3143;
                        frontier_phi_77_pred_4 = _3142;
                        frontier_phi_77_pred_5 = _3141;
                    }
                    else
                    {
                        float _3350;
                        float _3351;
                        float _3352;
                        float _3353;
                        float _3354;
                        float _3355;
                        float _3643;
                        float _3644;
                        float _3645;
                        float _3646;
                        float _3647;
                        float _3648;
                        float _3363 = _3141;
                        float _3364 = _3142;
                        float _3365 = _3143;
                        float _3366 = _3144;
                        float _3367 = _3145;
                        float _3368 = _3146;
                        uint _3369 = _3156;
                        uint _3370;
                        vec4 _3395;
                        float _3396;
                        vec4 _3411;
                        vec3 _3423;
                        vec4 _3438;
                        vec4 _3453;
                        float _3499;
                        bool _3500;
                        for (;;)
                        {
                            uint _3380 = ((_3147 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3369));
                            _3370 = (_3369 + 4294967295u) & _3369;
                            uint _3382 = _3380 * 40u;
                            _3395 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3382)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3382 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3382 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3382 + 3u)).x));
                            _3396 = _3395.w;
                            uint _3398 = (_3380 * 40u) + 4u;
                            _3411 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3398)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3398 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3398 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3398 + 3u)).x));
                            uint _3413 = (_3380 * 40u) + 8u;
                            _3423 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3413)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3413 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3413 + 2u)).x));
                            uint _3425 = (_3380 * 40u) + 16u;
                            _3438 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3425)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3425 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3425 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3425 + 3u)).x));
                            uint _3440 = (_3380 * 40u) + 20u;
                            _3453 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3440)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3440 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3440 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3440 + 3u)).x));
                            uint _3455 = (_3380 * 40u) + 24u;
                            vec4 _3468 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3455)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3455 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3455 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3455 + 3u)).x));
                            uint _3474 = (_3380 * 40u) + 28u;
                            vec4 _3487 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3474)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3474 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3474 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3474 + 3u)).x));
                            _3499 = fma(_2715, _3487.z, fma(_2714, _3487.y, _3487.x * _2713)) + _3487.w;
                            _3500 = !((fma(_2715, _3468.z, fma(_2714, _3468.y, _3468.x * _2713)) + _3468.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3500)
                            {
                                float _3527 = _3395.x - _2713;
                                float _3528 = _3395.y - _2714;
                                float _3529 = _3395.z - _2715;
                                float _3530 = dot(vec3(_3527, _3528, _3529), vec3(_3527, _3528, _3529));
                                float _3533 = inversesqrt(_3530);
                                float _3534 = _3533 * _3527;
                                float _3535 = _3533 * _3528;
                                float _3536 = _3533 * _3529;
                                float _3540 = 1.0 - (_3530 / (_3396 * _3396));
                                float _4699 = isnan(0.0) ? _3540 : (isnan(_3540) ? 0.0 : max(_3540, 0.0));
                                float _3541 = isnan(1.0) ? _4699 : (isnan(_4699) ? 1.0 : min(_4699, 1.0));
                                float _3545 = sqrt(_3530) * _3411.w;
                                float _3547 = 1.39999997615814208984375 / (_3545 + 1.39999997615814208984375);
                                float _3548 = _3547 * _3547;
                                float _3551 = ((1.0 - _3548) * dot(vec3(_3534, _3535, _3536), vec3(_990, _993, _996))) + _3548;
                                float _3554 = _3545 * _3545;
                                float _3558 = (fma(_2715, _3438.z, fma(_2714, _3438.y, _3438.x * _2713)) + _3438.w) / _3499;
                                float _3559 = (fma(_2715, _3453.z, fma(_2714, _3453.y, _3453.x * _2713)) + _3453.w) / _3499;
                                float _3563 = 1.0 - dot(vec2(_3558, _3559), vec2(_3558, _3559));
                                float _4715 = isnan(0.0) ? _3563 : (isnan(_3563) ? 0.0 : max(_3563, 0.0));
                                float _3564 = isnan(1.0) ? _4715 : (isnan(_4715) ? 1.0 : min(_4715, 1.0));
                                float _3565 = _3564 * (((isnan(0.0) ? _3551 : (isnan(_3551) ? 0.0 : max(_3551, 0.0))) * _3541) / ((_3554 * 0.699999988079071044921875) + 1.0));
                                float _3577 = exp2(log2(1.0 / ((_3554 * 3.5) + 5.0)) * 0.25);
                                float _3578 = 1.0 - _1050;
                                float _3585 = sqrt(1.0 - ((1.0 - (_3578 * _3578)) * (1.0 - (_3577 * _3577))));
                                float _3586 = _3585 * _3585;
                                float _3587 = _3586 * _3586;
                                float _3588 = _3534 - _3007;
                                float _3589 = _3535 - _3008;
                                float _3590 = _3536 - _3009;
                                float _3594 = inversesqrt(dot(vec3(_3588, _3589, _3590), vec3(_3588, _3589, _3590)));
                                float _3598 = dot(vec3(_990, _993, _996), vec3((-0.0) - _3007, (-0.0) - _3008, (-0.0) - _3009));
                                float _4726 = isnan(0.0) ? _3598 : (isnan(_3598) ? 0.0 : max(_3598, 0.0));
                                float _3601 = isnan(1.0) ? _4726 : (isnan(_4726) ? 1.0 : min(_4726, 1.0));
                                float _3602 = dot(vec3(_990, _993, _996), vec3(_3594 * _3588, _3594 * _3589, _3594 * _3590));
                                float _4737 = isnan(0.0) ? _3602 : (isnan(_3602) ? 0.0 : max(_3602, 0.0));
                                float _3605 = isnan(1.0) ? _4737 : (isnan(_4737) ? 1.0 : min(_4737, 1.0));
                                float _3609 = ((_3605 * _3605) * (_3587 + (-1.0))) + 1.0;
                                float _3610 = _3547 * _3586;
                                float _3611 = _3610 * _3610;
                                float _3617 = ((1.0 - _3611) * dot(vec3(_990, _993, _996), vec3(_3534, _3535, _3536))) + _3611;
                                float _4748 = isnan(0.0) ? _3617 : (isnan(_3617) ? 0.0 : max(_3617, 0.0));
                                float _3618 = isnan(1.0) ? _4748 : (isnan(_4748) ? 1.0 : min(_4748, 1.0));
                                float _3619 = 1.0 - _3586;
                                float _3629 = (0.5 / (((_3618 * ((_3601 * _3619) + _3586)) + 9.9999999392252902907785028219223e-09) + (((_3618 * _3619) + _3586) * _3601))) * _3618;
                                float _4759 = isnan(0.0) ? _3629 : (isnan(_3629) ? 0.0 : max(_3629, 0.0));
                                float _3639 = (_3564 * _3541) * (((_3587 * 3.1415927410125732421875) * (isnan(1.0) ? _4759 : (isnan(_4759) ? 1.0 : min(_4759, 1.0)))) / ((_3609 * _3609) * ((_3554 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3565 * _3411.y;
                                frontier_phi_83_pred_1 = _3565 * _3411.x;
                                frontier_phi_83_pred_2 = _3639 * _3423.z;
                                frontier_phi_83_pred_3 = _3639 * _3423.y;
                                frontier_phi_83_pred_4 = _3639 * _3423.x;
                                frontier_phi_83_pred_5 = _3565 * _3411.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3647 = frontier_phi_83_pred;
                            _3646 = frontier_phi_83_pred_1;
                            _3645 = frontier_phi_83_pred_2;
                            _3644 = frontier_phi_83_pred_3;
                            _3643 = frontier_phi_83_pred_4;
                            _3648 = frontier_phi_83_pred_5;
                            _3353 = _3646 + _3366;
                            _3354 = _3647 + _3367;
                            _3355 = _3648 + _3368;
                            _3350 = _3643 + _3363;
                            _3351 = _3644 + _3364;
                            _3352 = _3645 + _3365;
                            if (_3370 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3363 = _3350;
                                _3364 = _3351;
                                _3365 = _3352;
                                _3366 = _3353;
                                _3367 = _3354;
                                _3368 = _3355;
                                _3369 = _3370;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3355;
                        frontier_phi_77_pred_1 = _3354;
                        frontier_phi_77_pred_2 = _3353;
                        frontier_phi_77_pred_3 = _3352;
                        frontier_phi_77_pred_4 = _3351;
                        frontier_phi_77_pred_5 = _3350;
                    }
                    _2992 = frontier_phi_77_pred;
                    _2990 = frontier_phi_77_pred_1;
                    _2988 = frontier_phi_77_pred_2;
                    _2986 = frontier_phi_77_pred_3;
                    _2984 = frontier_phi_77_pred_4;
                    _2982 = frontier_phi_77_pred_5;
                    uint _3148 = _3147 + 1u;
                    if (_3148 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3141 = _2982;
                        _3142 = _2984;
                        _3143 = _2986;
                        _3144 = _2988;
                        _3145 = _2990;
                        _3146 = _2992;
                        _3147 = _3148;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2986;
                frontier_phi_58_59_ladder_1 = _2992;
                frontier_phi_58_59_ladder_2 = _2990;
                frontier_phi_58_59_ladder_3 = _2988;
                frontier_phi_58_59_ladder_4 = _2984;
                frontier_phi_58_59_ladder_5 = _2982;
            }
            else
            {
                frontier_phi_58_59_ladder = _2864;
                frontier_phi_58_59_ladder_1 = _2870;
                frontier_phi_58_59_ladder_2 = _2868;
                frontier_phi_58_59_ladder_3 = _2866;
                frontier_phi_58_59_ladder_4 = _2862;
                frontier_phi_58_59_ladder_5 = _2860;
            }
            _2981 = frontier_phi_58_59_ladder_5;
            _2983 = frontier_phi_58_59_ladder_4;
            _2985 = frontier_phi_58_59_ladder;
            _2987 = frontier_phi_58_59_ladder_3;
            _2989 = frontier_phi_58_59_ladder_2;
            _2991 = frontier_phi_58_59_ladder_1;
        }
        float _2996 = isnan(1.0) ? _1034 : (isnan(_1034) ? 1.0 : min(_1034, 1.0));
        _2772 = (_2996 * _2987) + _2227;
        _2774 = (_2996 * _2989) + _2229;
        _2776 = (_2996 * _2991) + _2231;
        _2778 = ((_2981 * 0.039999999105930328369140625) * _2996) + _2557;
        _2780 = ((_2983 * 0.039999999105930328369140625) * _2996) + _2559;
        _2782 = ((_2985 * 0.039999999105930328369140625) * _2996) + _2561;
    }
    else
    {
        _2772 = _2227;
        _2774 = _2229;
        _2776 = _2231;
        _2778 = _2557;
        _2780 = _2559;
        _2782 = _2561;
    }
    float _4775 = isnan(0.0) ? _1019 : (isnan(_1019) ? 0.0 : max(_1019, 0.0));
    float _4786 = isnan(0.0) ? _1020 : (isnan(_1020) ? 0.0 : max(_1020, 0.0));
    float _4797 = isnan(0.0) ? _1021 : (isnan(_1021) ? 0.0 : max(_1021, 0.0));
    float _2799 = ((isnan(1.0) ? _4775 : (isnan(_4775) ? 1.0 : min(_4775, 1.0))) * (_2772 + ((isnan(0.0) ? _1790 : (isnan(_1790) ? 0.0 : max(_1790, 0.0))) * _1034))) + ((_2778 + ((isnan(0.0) ? _2080 : (isnan(_2080) ? 0.0 : max(_2080, 0.0))) * _1869)) * cbPerFrame._m0[3u].x);
    float _2800 = ((isnan(1.0) ? _4786 : (isnan(_4786) ? 1.0 : min(_4786, 1.0))) * (_2774 + ((isnan(0.0) ? _1793 : (isnan(_1793) ? 0.0 : max(_1793, 0.0))) * _1034))) + ((_2780 + ((isnan(0.0) ? _2083 : (isnan(_2083) ? 0.0 : max(_2083, 0.0))) * _1869)) * cbPerFrame._m0[3u].x);
    float _2801 = ((isnan(1.0) ? _4797 : (isnan(_4797) ? 1.0 : min(_4797, 1.0))) * (_2776 + ((isnan(0.0) ? _1796 : (isnan(_1796) ? 0.0 : max(_1796, 0.0))) * _1034))) + ((_2782 + ((isnan(0.0) ? _2086 : (isnan(_2086) ? 0.0 : max(_2086, 0.0))) * _1869)) * cbPerFrame._m0[3u].x);
    uint _2802 = _259 + 6u;
    float _2810 = _971 / cbSceneParam._m0[86u].x;
    float _2811 = _972 / cbSceneParam._m0[86u].y;
    vec4 _2825 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2810, _2811, (log2((isnan(cbSceneParam._m0[77u].w) ? _894 : (isnan(_894) ? cbSceneParam._m0[77u].w : min(_894, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2827 = _2825.x;
    float _2828 = _2825.y;
    float _2829 = _2825.z;
    float _2830 = _2825.w;
    float _2923;
    float _2925;
    float _2927;
    float _2929;
    if (_894 > cbSceneParam._m0[78u].w)
    {
        float _2885 = isnan(_894) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _894 : min(cbSceneParam._m0[80u].w, _894));
        float _2886 = _2885 / _894;
        float _2897 = _2886 * _944;
        float _2898 = _945 * _2886;
        float _2899 = (-0.0) - _2898;
        float _2901 = _2886 * _946;
        float _2903 = (cbSceneParam._m0[77u].w * _2899) / _2885;
        float _2904 = _2903 + cbSceneParam._m0[79u].w;
        float _2905 = cbSceneParam._m0[79u].w - _2898;
        float _2911 = sqrt(((_2897 * _2897) + (_2898 * _2898)) + (_2901 * _2901));
        float _2914 = (1.0 - (cbSceneParam._m0[77u].w / _2885)) * _2911;
        float _2919 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2921 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3098;
        if (abs((_2899 - _2903) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3098 = ((((_2904 > 0.0) ? exp2(_2919 * _2904) : (2.0 - exp2(_2921 * _2904))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2914;
        }
        else
        {
            float _3042 = 1.0 / cbSceneParam._m0[80u].x;
            float _3043 = isnan(_2905) ? _2904 : (isnan(_2904) ? _2905 : max(_2904, _2905));
            float _3044 = isnan(_2905) ? _2904 : (isnan(_2904) ? _2905 : min(_2904, _2905));
            float _3053 = isnan(0.0) ? _3043 : (isnan(_3043) ? 0.0 : min(_3043, 0.0));
            float _3054 = isnan(0.0) ? _3044 : (isnan(_3044) ? 0.0 : min(_3044, 0.0));
            _3098 = ((abs(_2911 / _2899) * cbSceneParam._m0[80u].y) * ((((_3053 - _3054) * 2.0) - ((exp2(_2919 * (isnan(0.0) ? _3043 : (isnan(_3043) ? 0.0 : max(_3043, 0.0)))) - exp2(_2919 * (isnan(0.0) ? _3044 : (isnan(_3044) ? 0.0 : max(_3044, 0.0))))) * _3042)) - ((exp2(_2921 * _3053) - exp2(_2921 * _3054)) * _3042))) + (_2914 * cbSceneParam._m0[80u].z);
        }
        vec4 _3100 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2810, _2811, 1.0), 0.0);
        float _3109 = exp2((_3098 * (-1.44269502162933349609375)) * (1.0 - _3100.w));
        float _3110 = log2(_3109);
        float _3126 = log2(_2830);
        _2923 = (exp2(_3126 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3110 * cbSceneParam._m0[78u].x)) * _3100.x) / cbSceneParam._m0[78u].x)) + _2827;
        _2925 = (exp2(_3126 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3110 * cbSceneParam._m0[78u].y)) * _3100.y) / cbSceneParam._m0[78u].y)) + _2828;
        _2927 = (exp2(_3126 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3110 * cbSceneParam._m0[78u].z)) * _3100.z) / cbSceneParam._m0[78u].z)) + _2829;
        _2929 = _3109 * _2830;
    }
    else
    {
        _2923 = _2827;
        _2925 = _2828;
        _2927 = _2829;
        _2929 = _2830;
    }
    bool _3136;
    vec4 _2939;
    vec4 _2961;
    float _2963;
    float _2967;
    float _2968;
    float _2969;
    float _2970;
    bool _2980;
    for (;;)
    {
        _2939 = cbMatDynParam._m0[0u];
        float _2941 = roundEven(_2939.y);
        bool _2942 = _2941 == 3.0;
        float _2943 = log2(_2929);
        float _2950 = exp2(_2943 * cbSceneParam._m0[78u].x) * _2799;
        float _2951 = exp2(_2943 * cbSceneParam._m0[78u].y) * _2800;
        float _2952 = exp2(_2943 * cbSceneParam._m0[78u].z) * _2801;
        float _2959 = _960 + (-0.5);
        _2961 = cbMtdParam._m0[1u];
        _2963 = _2961.y * _2959;
        float _2966 = (_2941 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2967 = _2966 * (_2942 ? _2950 : (_2950 + (cbSceneParam._m0[72u].w * _2923)));
        _2968 = _2966 * (_2942 ? _2951 : (_2951 + (cbSceneParam._m0[72u].w * _2925)));
        _2969 = _2966 * (_2942 ? _2952 : (_2952 + (cbSceneParam._m0[72u].w * _2927)));
        _2970 = _2959 * 0.999000012874603271484375;
        _2980 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2980)
        {
            if ((cbInstanceData._m0[_259 + 7u].x + _2970) < 0.5)
            {
                _3136 = true;
                break;
            }
        }
        uint _3077 = _1009 + uint(_2939.w);
        if ((cbInstanceData._m0[_3077].w < 1.0) && ((cbInstanceData._m0[_3077].w + _2970) < 0.5))
        {
            _3136 = true;
            break;
        }
        if ((_2963 + 1.0) < _2961.x)
        {
            _3136 = true;
            break;
        }
        _3136 = false;
        break;
    }
    float _3341;
    if (_3136)
    {
        discard_state = true;
        _3341 = 0.0;
    }
    else
    {
        _3341 = cbInstanceData._m0[_2802].w;
    }
    SV_Target.x = _2967;
    SV_Target.y = _2968;
    SV_Target.z = _2969;
    SV_Target.w = _3341;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2802].w;
    discard_exit();
}


