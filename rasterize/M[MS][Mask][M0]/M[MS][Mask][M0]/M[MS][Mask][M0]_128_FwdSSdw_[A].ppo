#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 13) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_22;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_29;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_10;
layout(set = 0, binding = 20) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_6;
layout(set = 0, binding = 23) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_8;
layout(set = 0, binding = 24) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_9;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1621;
float _4001;
float _4002;
float _4003;
float _4004;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _244 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _245 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _246 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _252 = inversesqrt(dot(vec3(_244, _245, _246), vec3(_244, _245, _246)));
    float _253 = _252 * _244;
    float _254 = _252 * _245;
    float _255 = _252 * _246;
    float _259 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _260 = _259 * NORMAL.x;
    float _261 = _259 * NORMAL.y;
    float _262 = _259 * NORMAL.z;
    float _266 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _267 = _266 * TANGENT.x;
    float _268 = _266 * TANGENT.y;
    float _269 = _266 * TANGENT.z;
    float _278 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _280 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _281 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _4013 = isnan(0.0) ? _278 : (isnan(_278) ? 0.0 : max(_278, 0.0));
    float _4024 = isnan(0.0) ? _280 : (isnan(_280) ? 0.0 : max(_280, 0.0));
    float _4035 = isnan(0.0) ? _281 : (isnan(_281) ? 0.0 : max(_281, 0.0));
    uint _291 = uint(roundEven(NORMAL.w)) * 13u;
    uint _296 = _291 + 1u;
    uint _300 = _291 + 2u;
    float _309 = sqrt(((cbInstanceData._m0[_296].x * cbInstanceData._m0[_296].x) + (cbInstanceData._m0[_291].x * cbInstanceData._m0[_291].x)) + (cbInstanceData._m0[_300].x * cbInstanceData._m0[_300].x));
    float _310 = _309 * TEXCOORD.z;
    float _311 = _309 * TEXCOORD.w;
    vec4 _324 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _310) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _311) + cbTextureTilingScale._m0[13u].w));
    vec4 _348 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _353 = _348.x * cbMtdParam._m0[11u].x;
    float _354 = _348.y * cbMtdParam._m0[11u].y;
    float _355 = _348.z * cbMtdParam._m0[11u].z;
    vec4 _374 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _310) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _311) + cbTextureTilingScale._m0[5u].w));
    vec4 _393 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _431 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _433 = _431.x;
    float _445 = dot(vec4(_433, _431.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _462 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _393.x) * 2.0) - ((((_433 - _445) * cbMtdParam._m0[24u].z) + _445) * cbMtdParam._m0[23u].x))) + 1.0;
    float _4046 = isnan(0.0) ? _462 : (isnan(_462) ? 0.0 : max(_462, 0.0));
    float _463 = isnan(1.0) ? _4046 : (isnan(_4046) ? 1.0 : min(_4046, 1.0));
    float _470 = (_463 * ((_374.x * cbMtdParam._m0[12u].x) - _353)) + _353;
    float _471 = (_463 * ((_374.y * cbMtdParam._m0[12u].y) - _354)) + _354;
    float _472 = (_463 * ((_374.z * cbMtdParam._m0[12u].z) - _355)) + _355;
    vec4 _489 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _310) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _311) + cbTextureTilingScale._m0[3u].w));
    vec4 _509 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _511 = _509.x;
    float _521 = dot(vec4(_511, _509.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _535 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _393.y) * 2.0) - ((((_511 - _521) * cbMtdParam._m0[24u].z) + _521) * cbMtdParam._m0[20u].w))) + 1.0;
    float _4057 = isnan(0.0) ? _535 : (isnan(_535) ? 0.0 : max(_535, 0.0));
    float _536 = isnan(1.0) ? _4057 : (isnan(_4057) ? 1.0 : min(_4057, 1.0));
    float _543 = (_536 * ((_489.x * cbMtdParam._m0[13u].x) - _470)) + _470;
    float _544 = (_536 * ((_489.y * cbMtdParam._m0[13u].y) - _471)) + _471;
    float _545 = (_536 * ((_489.z * cbMtdParam._m0[13u].z) - _472)) + _472;
    vec4 _563 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_9, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[24u].x * _310) + cbTextureTilingScale._m0[24u].z, (cbTextureTilingScale._m0[24u].y * _311) + cbTextureTilingScale._m0[24u].w));
    vec4 _580 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[25u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _582 = _580.x;
    float _592 = dot(vec4(_582, _580.yzw), vec4(cbMtdParam._m0[30u].w, cbMtdParam._m0[31u].xy, 0.0));
    float _604 = ((cbMtdParam._m0[25u].x * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.z) - _393.z) * 2.0) - ((((_582 - _592) * cbMtdParam._m0[24u].z) + _592) * cbMtdParam._m0[20u].z))) + 1.0;
    float _4068 = isnan(0.0) ? _604 : (isnan(_604) ? 0.0 : max(_604, 0.0));
    float _605 = isnan(1.0) ? _4068 : (isnan(_4068) ? 1.0 : min(_4068, 1.0));
    float _612 = (_605 * ((_563.x * cbMtdParam._m0[14u].x) - _543)) + _543;
    float _613 = (_605 * ((_563.y * cbMtdParam._m0[14u].y) - _544)) + _544;
    float _614 = (_605 * ((_563.z * cbMtdParam._m0[14u].z) - _545)) + _545;
    float _618 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _324.x) * _612;
    float _621 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _324.y) * _613;
    float _624 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _324.z) * _614;
    float _631 = ((_612 - _618) * (isnan(1.0) ? _4013 : (isnan(_4013) ? 1.0 : min(_4013, 1.0)))) + _618;
    float _632 = ((_613 - _621) * (isnan(1.0) ? _4024 : (isnan(_4024) ? 1.0 : min(_4024, 1.0)))) + _621;
    float _633 = ((_614 - _624) * (isnan(1.0) ? _4035 : (isnan(_4035) ? 1.0 : min(_4035, 1.0)))) + _624;
    vec4 _650 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _310) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _311) + cbTextureTilingScale._m0[20u].w));
    vec4 _675 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _310) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _311) + cbTextureTilingScale._m0[4u].w));
    vec4 _692 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _694 = _692.x;
    float _695 = _692.y;
    float _696 = _692.z;
    float _703 = ((_675.x - _694) * _463) + _694;
    float _704 = ((_675.y - _695) * _463) + _695;
    float _705 = ((_675.z - _696) * _463) + _696;
    vec4 _717 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _310) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _311) + cbTextureTilingScale._m0[2u].w));
    float _728 = ((_717.x - _703) * _536) + _703;
    float _729 = ((_717.y - _704) * _536) + _704;
    float _730 = ((_717.z - _705) * _536) + _705;
    vec4 _742 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[23u].x * _310) + cbTextureTilingScale._m0[23u].z, (cbTextureTilingScale._m0[23u].y * _311) + cbTextureTilingScale._m0[23u].w));
    float _755 = ((_742.z - _730) * _605) + _730;
    float _758 = ((((_742.x - _728) * _605) + _728) * 2.0) + (-1.0);
    float _759 = ((((_742.y - _729) * _605) + _729) * 2.0) + (-1.0);
    float _760 = dot(vec2(_758, _759), vec2(_758, _759));
    float _4079 = isnan(0.0) ? _760 : (isnan(_760) ? 0.0 : max(_760, 0.0));
    float _765 = sqrt(1.0 - (isnan(1.0) ? _4079 : (isnan(_4079) ? 1.0 : min(_4079, 1.0))));
    vec4 _783 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _795 = (_758 + ((((_650.x * 2.0) + (-1.0)) * TEXCOORD_11.x) * cbMtdParam._m0[20u].x)) + (((_783.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _796 = (_759 + ((((_650.y * 2.0) + (-1.0)) * TEXCOORD_11.y) * cbMtdParam._m0[20u].x)) + (((_783.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _799 = fma(_765, _260, fma(_796, _267, _795 * _253));
    float _802 = fma(_765, _261, fma(_796, _268, _795 * _254));
    float _805 = fma(_765, _262, fma(_796, _269, _795 * _255));
    float _809 = inversesqrt(dot(vec3(_799, _802, _805), vec3(_799, _802, _805)));
    vec4 _836 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _310) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _311) + cbTextureTilingScale._m0[11u].w));
    float _838 = _836.x;
    float _839 = 1.0 - _838;
    float _845 = (cbMtdParam._m0[19u].x + dot(vec4(_809 * _799, _809 * _802, _809 * _805, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_838 - _839) * cbMtdParam._m0[24u].w) + _839) * cbMtdParam._m0[21u].z);
    float _4090 = isnan(0.0) ? _845 : (isnan(_845) ? 0.0 : max(_845, 0.0));
    float _846 = isnan(1.0) ? _4090 : (isnan(_4090) ? 1.0 : min(_4090, 1.0));
    float _848 = (-0.0) - cbMtdParam._m0[24u].x;
    float _850 = isnan(0.0) ? _848 : (isnan(_848) ? 0.0 : max(_848, 0.0));
    float _851 = isnan(1.0) ? _850 : (isnan(_850) ? 1.0 : min(_850, 1.0));
    float _858 = _846 - ((_846 * TEXCOORD_8.x) * _851);
    float _859 = _846 - ((_846 * TEXCOORD_8.y) * _851);
    float _860 = _846 - ((_846 * TEXCOORD_8.z) * _851);
    float _867 = (_858 * (cbMtdParam._m0[17u].x - _631)) + _631;
    float _868 = (_859 * (cbMtdParam._m0[17u].y - _632)) + _632;
    float _869 = (_860 * (cbMtdParam._m0[17u].z - _633)) + _633;
    float _884 = sqrt(((cbInstanceData._m0[_296].x * cbInstanceData._m0[_296].x) + (cbInstanceData._m0[_291].x * cbInstanceData._m0[_291].x)) + (cbInstanceData._m0[_300].x * cbInstanceData._m0[_300].x));
    float _885 = _884 * TEXCOORD.z;
    float _886 = _884 * TEXCOORD.w;
    vec4 _898 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _885) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _886) + cbTextureTilingScale._m0[19u].w));
    float _900 = _898.x;
    float _901 = 1.0 - _900;
    float _929 = (TEXCOORD_8.x - ((cbMtdParam._m0[22u].w * (1.0 - TEXCOORD_8.x)) * ((((_900 - _901) * cbMtdParam._m0[24u].y) + _901) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _4111 = isnan(0.0) ? _929 : (isnan(_929) ? 0.0 : max(_929, 0.0));
    float _930 = isnan(1.0) ? _4111 : (isnan(_4111) ? 1.0 : min(_4111, 1.0));
    float _938 = ((((cbMtdParam._m0[10u].x - _867) * TEXCOORD_8.x) * cbMtdParam._m0[23u].w) * _930) + _867;
    float _939 = ((((cbMtdParam._m0[10u].y - _868) * TEXCOORD_8.y) * cbMtdParam._m0[23u].w) * _930) + _868;
    float _940 = (((cbMtdParam._m0[23u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _869)) * _930) + _869;
    float _945 = (((_650.z - _755) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _755;
    float _949 = ((_783.z - _945) * cbMtdParam._m0[19u].w) + _945;
    vec4 _963 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _310) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _311) + cbTextureTilingScale._m0[15u].w));
    float _970 = (_963.x * 2.0) + (-1.0);
    float _971 = (_963.y * 2.0) + (-1.0);
    float _972 = dot(vec2(_970, _971), vec2(_970, _971));
    float _4122 = isnan(0.0) ? _972 : (isnan(_972) ? 0.0 : max(_972, 0.0));
    float _980 = ((_963.z - _949) * _858) + _949;
    float _983 = ((cbMtdParam._m0[23u].y - _980) * _930) + _980;
    vec4 _1004 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _885) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _886) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _1010 = (_1004.x * 2.0) + (-1.0);
    float _1011 = (_1004.y * 2.0) + (-1.0);
    float _1012 = dot(vec2(_1010, _1011), vec2(_1010, _1011));
    float _4133 = isnan(0.0) ? _1012 : (isnan(_1012) ? 0.0 : max(_1012, 0.0));
    float _1027 = ((sqrt(1.0 - (isnan(1.0) ? _4122 : (isnan(_4122) ? 1.0 : min(_4122, 1.0)))) - _765) * _860) + _765;
    float _1030 = (((_970 - _795) * _858) + _795) + (cbMtdParam._m0[21u].x * _795);
    float _1031 = (((_971 - _796) * _859) + _796) + (cbMtdParam._m0[21u].x * _796);
    float _1042 = (((_1010 - _1030) + (_1030 * cbMtdParam._m0[22u].z)) * _930) + _1030;
    float _1043 = (((_1011 - _1031) + (_1031 * cbMtdParam._m0[22u].z)) * _930) + _1031;
    float _1044 = (_930 * (sqrt(1.0 - (isnan(1.0) ? _4133 : (isnan(_4133) ? 1.0 : min(_4133, 1.0)))) - _1027)) + _1027;
    float _1046 = cbMtdParam._m0[22u].x + _783.w;
    float _1049 = fma(_1044, _260, fma(_1043, _267, _1042 * _253));
    float _1052 = fma(_1044, _261, fma(_1043, _268, _1042 * _254));
    float _1055 = fma(_1044, _262, fma(_1043, _269, _1042 * _255));
    float _1059 = inversesqrt(dot(vec3(_1049, _1052, _1055), vec3(_1049, _1052, _1055)));
    float _1060 = _1059 * _1049;
    float _1061 = _1059 * _1052;
    float _1062 = _1059 * _1055;
    float _4144 = isnan(0.0) ? _983 : (isnan(_983) ? 0.0 : max(_983, 0.0));
    float _1063 = isnan(1.0) ? _4144 : (isnan(_4144) ? 1.0 : min(_4144, 1.0));
    float _4155 = isnan(0.0) ? _1046 : (isnan(_1046) ? 0.0 : max(_1046, 0.0));
    float _4166 = isnan(0.0) ? _938 : (isnan(_938) ? 0.0 : max(_938, 0.0));
    float _4177 = isnan(0.0) ? _939 : (isnan(_939) ? 0.0 : max(_939, 0.0));
    float _4188 = isnan(0.0) ? _940 : (isnan(_940) ? 0.0 : max(_940, 0.0));
    float _1081 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _1122 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _1132 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _1122);
    float _1133 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _1122);
    float _1134 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _1122);
    float _1138 = inversesqrt(dot(vec3(_1132, _1133, _1134), vec3(_1132, _1133, _1134)));
    float _1139 = _1132 * _1138;
    float _1140 = _1133 * _1138;
    float _1141 = _1134 * _1138;
    vec4 _1146 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _1148 = _1146.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1302 = sqrt(((_1132 * _1132) + (_1133 * _1133)) + (_1134 * _1134));
        float _1308 = (cbMatDynParam._m0[5u].x * _1302) + cbMatDynParam._m0[5u].y;
        float _4199 = isnan(0.0) ? _1308 : (isnan(_1308) ? 0.0 : max(_1308, 0.0));
        float _1309 = isnan(1.0) ? _4199 : (isnan(_4199) ? 1.0 : min(_4199, 1.0));
        float _1313 = (cbMatDynParam._m0[5u].z * _1302) + cbMatDynParam._m0[5u].w;
        float _4210 = isnan(0.0) ? _1313 : (isnan(_1313) ? 0.0 : max(_1313, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4210 : (isnan(_4210) ? 1.0 : min(_4210, 1.0))) - _1309)) + _1309) < ((_1148 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _1159 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1160 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1178 = fma(_1062, cbSceneParam._m0[5u].z, fma(_1061, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _1060));
    float _1181 = fma(_1062, cbSceneParam._m0[6u].z, fma(_1061, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _1060));
    float _1184 = fma(_1062, cbSceneParam._m0[7u].z, fma(_1061, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _1060));
    uint _1197 = _291 + 9u;
    uint _1198 = _1197 + uint(cbMatDynParam._m0[0u].w);
    float _1204 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4166 : (isnan(_4166) ? 1.0 : min(_4166, 1.0)))) * cbInstanceData._m0[_1198].x;
    float _1205 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4177 : (isnan(_4177) ? 1.0 : min(_4177, 1.0)))) * cbInstanceData._m0[_1198].y;
    float _1206 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4188 : (isnan(_4188) ? 1.0 : min(_4188, 1.0)))) * cbInstanceData._m0[_1198].z;
    float _4221 = isnan(0.0) ? _1204 : (isnan(_1204) ? 0.0 : max(_1204, 0.0));
    float _1207 = isnan(1.0) ? _4221 : (isnan(_4221) ? 1.0 : min(_4221, 1.0));
    float _4232 = isnan(0.0) ? _1205 : (isnan(_1205) ? 0.0 : max(_1205, 0.0));
    float _1208 = isnan(1.0) ? _4232 : (isnan(_4232) ? 1.0 : min(_4232, 1.0));
    float _4243 = isnan(0.0) ? _1206 : (isnan(_1206) ? 0.0 : max(_1206, 0.0));
    float _1209 = isnan(1.0) ? _4243 : (isnan(_4243) ? 1.0 : min(_4243, 1.0));
    vec4 _1218 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1159, cbSceneParam._m0[86u].y * _1160));
    float _1222 = ((isnan(1.0) ? _4155 : (isnan(_4155) ? 1.0 : min(_4155, 1.0))) * TEXCOORD_5.w) * _1218.x;
    float _1223 = dot(vec3(_1060, _1061, _1062), vec3(_1139, _1140, _1141));
    float _1226 = _1223 * 2.0;
    float _1230 = (_1226 * _1060) - _1139;
    float _1231 = (_1226 * _1061) - _1140;
    float _1232 = (_1226 * _1062) - _1141;
    float _1236 = abs(dot(vec3(_1139, _1140, _1141), vec3(_1060, _1061, _1062)));
    float _4254 = isnan(0.0) ? _1236 : (isnan(_1236) ? 0.0 : max(_1236, 0.0));
    float _1238 = sqrt(_1063);
    float _1251 = exp2((_1238 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4254 : (isnan(_4254) ? 1.0 : min(_4254, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1238 * 3.0));
    float _1283 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1287 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1291 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1620;
    float _1622;
    float _1623;
    float _1624;
    float _1625;
    float _1626;
    float _1627;
    float _1628;
    float _1629;
    float _1630;
    float _1631;
    float _1632;
    float _1633;
    float _1634;
    float _1635;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1345 = fma(_1291, cbModelParam._m0[26u].z, fma(_1287, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1283));
        float _1349 = fma(_1291, cbModelParam._m0[27u].z, fma(_1287, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1283));
        float _1353 = fma(_1291, cbModelParam._m0[28u].z, fma(_1287, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1283));
        float _1378 = _1283 + _1060;
        float _1379 = _1287 + _1061;
        float _1380 = _1291 + _1062;
        float _1390 = fma(_1380, cbModelParam._m0[26u].z, fma(_1379, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1378)) - _1345;
        float _1391 = fma(_1380, cbModelParam._m0[27u].z, fma(_1379, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1378)) - _1349;
        float _1392 = fma(_1380, cbModelParam._m0[28u].z, fma(_1379, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1378)) - _1353;
        float _1396 = inversesqrt(dot(vec3(_1390, _1391, _1392), vec3(_1390, _1391, _1392)));
        float _1409 = ((_1396 * _1390) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1345 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1410 = ((_1396 * _1391) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1349 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1411 = ((_1396 * _1392) / cbModelParam._m0[34u].z) + ((((((_1353 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1414 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1409, _1410, _1411), 0.0);
        vec4 _1421 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1409, _1410, _1411), 0.0);
        vec4 _1428 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1409, _1410, _1411), 0.0);
        vec4 _1435 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1409, _1410, _1411), 0.0);
        float _1448 = exp2((_1414.w + (-0.5)) * 20.0) * 2.0;
        float _1449 = _1448 * (_1414.x + (-0.5));
        float _1450 = _1448 * (_1414.y + (-0.5));
        float _1451 = _1448 * (_1414.z + (-0.5));
        float _1458 = exp2((_1421.w + (-0.5)) * 20.0) * 2.0;
        float _1459 = _1458 * (_1421.x + (-0.5));
        float _1460 = _1458 * (_1421.y + (-0.5));
        float _1461 = _1458 * (_1421.z + (-0.5));
        float _1468 = exp2((_1428.w + (-0.5)) * 20.0) * 2.0;
        float _1469 = _1468 * (_1428.x + (-0.5));
        float _1470 = _1468 * (_1428.y + (-0.5));
        float _1471 = _1468 * (_1428.z + (-0.5));
        float _1478 = exp2((_1435.w + (-0.5)) * 20.0) * 2.0;
        float _1479 = _1478 * (_1435.x + (-0.5));
        float _1480 = _1478 * (_1435.y + (-0.5));
        float _1481 = _1478 * (_1435.z + (-0.5));
        float _1482 = isnan(0.0) ? _1479 : (isnan(_1479) ? 0.0 : max(_1479, 0.0));
        float _1483 = isnan(0.0) ? _1480 : (isnan(_1480) ? 0.0 : max(_1480, 0.0));
        float _1484 = isnan(0.0) ? _1481 : (isnan(_1481) ? 0.0 : max(_1481, 0.0));
        float _1485 = _1449 * 0.5;
        float _1486 = _1459 * 0.5;
        float _1487 = _1469 * 0.5;
        float _1488 = dot(vec3(_1485, _1486, _1487), vec3(_1485, _1486, _1487));
        float _1493 = (_1488 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1488);
        float _1502 = (dot(vec3(_1060, _1061, _1062), vec3(_1493 * _1485, _1493 * _1486, _1493 * _1487)) + 1.0) * 0.5;
        float _4280 = isnan(0.0) ? _1502 : (isnan(_1502) ? 0.0 : max(_1502, 0.0));
        float _1512 = sqrt(((_1486 * _1486) + (_1485 * _1485)) + (_1487 * _1487)) / (_1482 + 9.9999997473787516355514526367188e-06);
        float _4291 = isnan(0.0) ? _1512 : (isnan(_1512) ? 0.0 : max(_1512, 0.0));
        float _1513 = isnan(1.0) ? _4291 : (isnan(_4291) ? 1.0 : min(_4291, 1.0));
        float _1514 = _1513 * 2.0;
        float _1518 = (1.0 - _1513) / (_1513 + 1.0);
        float _4302 = isnan(0.0) ? _1518 : (isnan(_1518) ? 0.0 : max(_1518, 0.0));
        float _1519 = isnan(1.0) ? _4302 : (isnan(_4302) ? 1.0 : min(_4302, 1.0));
        float _1528 = ((((1.0 - _1519) * (_1514 + 2.0)) * exp2(log2(isnan(1.0) ? _4280 : (isnan(_4280) ? 1.0 : min(_4280, 1.0))) * (_1514 + 1.0))) + _1519) * _1482;
        float _1529 = _1450 * 0.5;
        float _1530 = _1460 * 0.5;
        float _1531 = _1470 * 0.5;
        float _1532 = dot(vec3(_1529, _1530, _1531), vec3(_1529, _1530, _1531));
        float _1537 = (_1532 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1532);
        float _1545 = (dot(vec3(_1060, _1061, _1062), vec3(_1537 * _1529, _1537 * _1530, _1537 * _1531)) + 1.0) * 0.5;
        float _4313 = isnan(0.0) ? _1545 : (isnan(_1545) ? 0.0 : max(_1545, 0.0));
        float _1554 = sqrt(((_1530 * _1530) + (_1529 * _1529)) + (_1531 * _1531)) / (_1483 + 9.9999997473787516355514526367188e-06);
        float _4324 = isnan(0.0) ? _1554 : (isnan(_1554) ? 0.0 : max(_1554, 0.0));
        float _1555 = isnan(1.0) ? _4324 : (isnan(_4324) ? 1.0 : min(_4324, 1.0));
        float _1556 = _1555 * 2.0;
        float _1560 = (1.0 - _1555) / (_1555 + 1.0);
        float _4335 = isnan(0.0) ? _1560 : (isnan(_1560) ? 0.0 : max(_1560, 0.0));
        float _1561 = isnan(1.0) ? _4335 : (isnan(_4335) ? 1.0 : min(_4335, 1.0));
        float _1570 = ((((1.0 - _1561) * (_1556 + 2.0)) * exp2(log2(isnan(1.0) ? _4313 : (isnan(_4313) ? 1.0 : min(_4313, 1.0))) * (_1556 + 1.0))) + _1561) * _1483;
        float _1571 = _1451 * 0.5;
        float _1572 = _1461 * 0.5;
        float _1573 = _1471 * 0.5;
        float _1574 = dot(vec3(_1571, _1572, _1573), vec3(_1571, _1572, _1573));
        float _1579 = (_1574 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1574);
        float _1587 = (dot(vec3(_1060, _1061, _1062), vec3(_1579 * _1571, _1579 * _1572, _1579 * _1573)) + 1.0) * 0.5;
        float _4346 = isnan(0.0) ? _1587 : (isnan(_1587) ? 0.0 : max(_1587, 0.0));
        float _1596 = sqrt(((_1572 * _1572) + (_1571 * _1571)) + (_1573 * _1573)) / (_1484 + 9.9999997473787516355514526367188e-06);
        float _4357 = isnan(0.0) ? _1596 : (isnan(_1596) ? 0.0 : max(_1596, 0.0));
        float _1597 = isnan(1.0) ? _4357 : (isnan(_4357) ? 1.0 : min(_4357, 1.0));
        float _1598 = _1597 * 2.0;
        float _1602 = (1.0 - _1597) / (_1597 + 1.0);
        float _4368 = isnan(0.0) ? _1602 : (isnan(_1602) ? 0.0 : max(_1602, 0.0));
        float _1603 = isnan(1.0) ? _4368 : (isnan(_4368) ? 1.0 : min(_4368, 1.0));
        float _1612 = ((((1.0 - _1603) * (_1598 + 2.0)) * exp2(log2(isnan(1.0) ? _4346 : (isnan(_4346) ? 1.0 : min(_4346, 1.0))) * (_1598 + 1.0))) + _1603) * _1484;
        _1620 = _1451;
        _1622 = _1450;
        _1623 = _1449;
        _1624 = _1461;
        _1625 = _1460;
        _1626 = _1459;
        _1627 = _1471;
        _1628 = _1470;
        _1629 = _1469;
        _1630 = _1484;
        _1631 = _1483;
        _1632 = _1482;
        _1633 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1528 : (isnan(_1528) ? 0.0 : max(_1528, 0.0)));
        _1634 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1570 : (isnan(_1570) ? 0.0 : max(_1570, 0.0)));
        _1635 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1612 : (isnan(_1612) ? 0.0 : max(_1612, 0.0)));
    }
    else
    {
        _1620 = _1621;
        _1622 = _1621;
        _1623 = _1621;
        _1624 = _1621;
        _1625 = _1621;
        _1626 = _1621;
        _1627 = _1621;
        _1628 = _1621;
        _1629 = _1621;
        _1630 = _1621;
        _1631 = _1621;
        _1632 = _1621;
        _1633 = 0.0;
        _1634 = 0.0;
        _1635 = 0.0;
    }
    float _1930;
    float _1931;
    float _1932;
    float _1933;
    float _1934;
    float _1935;
    float _1936;
    float _1937;
    float _1938;
    float _1939;
    float _1940;
    float _1941;
    float _1942;
    float _1943;
    float _1944;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1661 = fma(_1291, cbModelParam._m0[30u].z, fma(_1287, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1283));
        float _1665 = fma(_1291, cbModelParam._m0[31u].z, fma(_1287, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1283));
        float _1669 = fma(_1291, cbModelParam._m0[32u].z, fma(_1287, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1283));
        float _1692 = _1283 + _1060;
        float _1693 = _1287 + _1061;
        float _1694 = _1291 + _1062;
        float _1704 = fma(_1694, cbModelParam._m0[30u].z, fma(_1693, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1692)) - _1661;
        float _1705 = fma(_1694, cbModelParam._m0[31u].z, fma(_1693, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1692)) - _1665;
        float _1706 = fma(_1694, cbModelParam._m0[32u].z, fma(_1693, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1692)) - _1669;
        float _1710 = inversesqrt(dot(vec3(_1704, _1705, _1706), vec3(_1704, _1705, _1706)));
        float _1723 = ((_1710 * _1704) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1661 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1724 = ((_1710 * _1705) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1665 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1725 = ((_1710 * _1706) / cbModelParam._m0[35u].z) + ((((((_1669 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1727 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1723, _1724, _1725), 0.0);
        vec4 _1734 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1723, _1724, _1725), 0.0);
        vec4 _1741 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1723, _1724, _1725), 0.0);
        vec4 _1748 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1723, _1724, _1725), 0.0);
        float _1760 = exp2((_1727.w + (-0.5)) * 20.0) * 2.0;
        float _1761 = _1760 * (_1727.x + (-0.5));
        float _1762 = _1760 * (_1727.y + (-0.5));
        float _1763 = _1760 * (_1727.z + (-0.5));
        float _1770 = exp2((_1734.w + (-0.5)) * 20.0) * 2.0;
        float _1771 = _1770 * (_1734.x + (-0.5));
        float _1772 = _1770 * (_1734.y + (-0.5));
        float _1773 = _1770 * (_1734.z + (-0.5));
        float _1780 = exp2((_1741.w + (-0.5)) * 20.0) * 2.0;
        float _1781 = _1780 * (_1741.x + (-0.5));
        float _1782 = _1780 * (_1741.y + (-0.5));
        float _1783 = _1780 * (_1741.z + (-0.5));
        float _1790 = exp2((_1748.w + (-0.5)) * 20.0) * 2.0;
        float _1791 = _1790 * (_1748.x + (-0.5));
        float _1792 = _1790 * (_1748.y + (-0.5));
        float _1793 = _1790 * (_1748.z + (-0.5));
        float _1794 = isnan(0.0) ? _1791 : (isnan(_1791) ? 0.0 : max(_1791, 0.0));
        float _1795 = isnan(0.0) ? _1792 : (isnan(_1792) ? 0.0 : max(_1792, 0.0));
        float _1796 = isnan(0.0) ? _1793 : (isnan(_1793) ? 0.0 : max(_1793, 0.0));
        float _1797 = _1761 * 0.5;
        float _1798 = _1771 * 0.5;
        float _1799 = _1781 * 0.5;
        float _1800 = dot(vec3(_1797, _1798, _1799), vec3(_1797, _1798, _1799));
        float _1805 = (_1800 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1800);
        float _1813 = (dot(vec3(_1060, _1061, _1062), vec3(_1805 * _1797, _1805 * _1798, _1805 * _1799)) + 1.0) * 0.5;
        float _4409 = isnan(0.0) ? _1813 : (isnan(_1813) ? 0.0 : max(_1813, 0.0));
        float _1822 = sqrt(((_1798 * _1798) + (_1797 * _1797)) + (_1799 * _1799)) / (_1794 + 9.9999997473787516355514526367188e-06);
        float _4420 = isnan(0.0) ? _1822 : (isnan(_1822) ? 0.0 : max(_1822, 0.0));
        float _1823 = isnan(1.0) ? _4420 : (isnan(_4420) ? 1.0 : min(_4420, 1.0));
        float _1824 = _1823 * 2.0;
        float _1828 = (1.0 - _1823) / (_1823 + 1.0);
        float _4431 = isnan(0.0) ? _1828 : (isnan(_1828) ? 0.0 : max(_1828, 0.0));
        float _1829 = isnan(1.0) ? _4431 : (isnan(_4431) ? 1.0 : min(_4431, 1.0));
        float _1838 = ((((1.0 - _1829) * (_1824 + 2.0)) * exp2(log2(isnan(1.0) ? _4409 : (isnan(_4409) ? 1.0 : min(_4409, 1.0))) * (_1824 + 1.0))) + _1829) * _1794;
        float _1839 = _1762 * 0.5;
        float _1840 = _1772 * 0.5;
        float _1841 = _1782 * 0.5;
        float _1842 = dot(vec3(_1839, _1840, _1841), vec3(_1839, _1840, _1841));
        float _1847 = (_1842 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1842);
        float _1855 = (dot(vec3(_1060, _1061, _1062), vec3(_1847 * _1839, _1847 * _1840, _1847 * _1841)) + 1.0) * 0.5;
        float _4442 = isnan(0.0) ? _1855 : (isnan(_1855) ? 0.0 : max(_1855, 0.0));
        float _1864 = sqrt(((_1840 * _1840) + (_1839 * _1839)) + (_1841 * _1841)) / (_1795 + 9.9999997473787516355514526367188e-06);
        float _4453 = isnan(0.0) ? _1864 : (isnan(_1864) ? 0.0 : max(_1864, 0.0));
        float _1865 = isnan(1.0) ? _4453 : (isnan(_4453) ? 1.0 : min(_4453, 1.0));
        float _1866 = _1865 * 2.0;
        float _1870 = (1.0 - _1865) / (_1865 + 1.0);
        float _4464 = isnan(0.0) ? _1870 : (isnan(_1870) ? 0.0 : max(_1870, 0.0));
        float _1871 = isnan(1.0) ? _4464 : (isnan(_4464) ? 1.0 : min(_4464, 1.0));
        float _1880 = ((((1.0 - _1871) * (_1866 + 2.0)) * exp2(log2(isnan(1.0) ? _4442 : (isnan(_4442) ? 1.0 : min(_4442, 1.0))) * (_1866 + 1.0))) + _1871) * _1795;
        float _1881 = _1763 * 0.5;
        float _1882 = _1773 * 0.5;
        float _1883 = _1783 * 0.5;
        float _1884 = dot(vec3(_1881, _1882, _1883), vec3(_1881, _1882, _1883));
        float _1889 = (_1884 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1884);
        float _1897 = (dot(vec3(_1060, _1061, _1062), vec3(_1889 * _1881, _1889 * _1882, _1889 * _1883)) + 1.0) * 0.5;
        float _4475 = isnan(0.0) ? _1897 : (isnan(_1897) ? 0.0 : max(_1897, 0.0));
        float _1906 = sqrt(((_1882 * _1882) + (_1881 * _1881)) + (_1883 * _1883)) / (_1796 + 9.9999997473787516355514526367188e-06);
        float _4486 = isnan(0.0) ? _1906 : (isnan(_1906) ? 0.0 : max(_1906, 0.0));
        float _1907 = isnan(1.0) ? _4486 : (isnan(_4486) ? 1.0 : min(_4486, 1.0));
        float _1908 = _1907 * 2.0;
        float _1912 = (1.0 - _1907) / (_1907 + 1.0);
        float _4497 = isnan(0.0) ? _1912 : (isnan(_1912) ? 0.0 : max(_1912, 0.0));
        float _1913 = isnan(1.0) ? _4497 : (isnan(_4497) ? 1.0 : min(_4497, 1.0));
        float _1922 = ((((1.0 - _1913) * (_1908 + 2.0)) * exp2(log2(isnan(1.0) ? _4475 : (isnan(_4475) ? 1.0 : min(_4475, 1.0))) * (_1908 + 1.0))) + _1913) * _1796;
        _1930 = _1763;
        _1931 = _1762;
        _1932 = _1761;
        _1933 = _1773;
        _1934 = _1772;
        _1935 = _1771;
        _1936 = _1783;
        _1937 = _1782;
        _1938 = _1781;
        _1939 = _1796;
        _1940 = _1795;
        _1941 = _1794;
        _1942 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1838 : (isnan(_1838) ? 0.0 : max(_1838, 0.0)));
        _1943 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1880 : (isnan(_1880) ? 0.0 : max(_1880, 0.0)));
        _1944 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1922 : (isnan(_1922) ? 0.0 : max(_1922, 0.0)));
    }
    else
    {
        _1930 = _1621;
        _1931 = _1621;
        _1932 = _1621;
        _1933 = _1621;
        _1934 = _1621;
        _1935 = _1621;
        _1936 = _1621;
        _1937 = _1621;
        _1938 = _1621;
        _1939 = _1621;
        _1940 = _1621;
        _1941 = _1621;
        _1942 = 0.0;
        _1943 = 0.0;
        _1944 = 0.0;
    }
    float _1954 = (cbModelParam._m0[1u].x * (_1942 - _1633)) + _1633;
    float _1955 = (cbModelParam._m0[1u].x * (_1943 - _1634)) + _1634;
    float _1956 = (cbModelParam._m0[1u].x * (_1944 - _1635)) + _1635;
    float _1977 = fma(_1956, cbSceneParam._m0[89u].z, fma(_1955, cbSceneParam._m0[89u].y, _1954 * cbSceneParam._m0[89u].x));
    float _1980 = fma(_1956, cbSceneParam._m0[90u].z, fma(_1955, cbSceneParam._m0[90u].y, _1954 * cbSceneParam._m0[90u].x));
    float _1983 = fma(_1956, cbSceneParam._m0[91u].z, fma(_1955, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1954));
    float _1998 = _1230 * 0.5;
    float _1999 = _1231 * 0.5;
    float _2000 = _1232 * 0.5;
    float _2001 = dot(vec4(_1998, _1999, _2000, 1.0), vec4(_1932, _1935, _1938, _1941));
    float _2004 = dot(vec4(_1998, _1999, _2000, 1.0), vec4(_1931, _1934, _1937, _1940));
    float _2007 = dot(vec4(_1998, _1999, _2000, 1.0), vec4(_1930, _1933, _1936, _1939));
    float _2041;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _2014 = dot(vec4(_1998, _1999, _2000, 1.0), vec4(_1620, _1624, _1627, _1630));
        float _2018 = dot(vec4(_1998, _1999, _2000, 1.0), vec4(_1622, _1625, _1628, _1631));
        float _2022 = dot(vec4(_1998, _1999, _2000, 1.0), vec4(_1623, _1626, _1629, _1632));
        float _2029 = dot(vec4(cbModelParam._m0[39u]), vec4(_1998, _1999, _2000, 1.0));
        _2041 = dot(vec3(isnan(0.0) ? _2022 : (isnan(_2022) ? 0.0 : max(_2022, 0.0)), isnan(0.0) ? _2018 : (isnan(_2018) ? 0.0 : max(_2018, 0.0)), isnan(0.0) ? _2014 : (isnan(_2014) ? 0.0 : max(_2014, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_2029) ? 0.0 : (isnan(0.0) ? _2029 : max(0.0, _2029))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _2041 = 1.0;
    }
    float _2052;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _2043 = dot(vec4(cbModelParam._m0[40u]), vec4(_1998, _1999, _2000, 1.0));
        _2052 = dot(vec3(isnan(0.0) ? _2001 : (isnan(_2001) ? 0.0 : max(_2001, 0.0)), isnan(0.0) ? _2004 : (isnan(_2004) ? 0.0 : max(_2004, 0.0)), isnan(0.0) ? _2007 : (isnan(_2007) ? 0.0 : max(_2007, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_2043) ? 0.0 : (isnan(0.0) ? _2043 : max(0.0, _2043))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _2052 = 1.0;
    }
    float _2056 = (_2052 * cbModelParam._m0[1u].x) + (_2041 * (1.0 - cbModelParam._m0[1u].x));
    float _2066 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _1063);
    float _2067 = isnan(_2066) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _2066 : min(cbModelParam._m0[25u].z, _2066));
    float _2147;
    float _2149;
    float _2151;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _2114 = fma(_1291, cbModelParam._m0[13u].z, fma(_1287, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1283)) + cbModelParam._m0[13u].w;
        float _2118 = fma(_1291, cbModelParam._m0[14u].z, fma(_1287, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1283)) + cbModelParam._m0[14u].w;
        float _2122 = fma(_1291, cbModelParam._m0[15u].z, fma(_1287, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1283)) + cbModelParam._m0[15u].w;
        float _2125 = fma(_1232, cbModelParam._m0[13u].z, fma(_1231, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1230));
        float _2128 = fma(_1232, cbModelParam._m0[14u].z, fma(_1231, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1230));
        float _2131 = fma(_1232, cbModelParam._m0[15u].z, fma(_1231, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1230));
        float _2159;
        if (_2125 > 0.0)
        {
            _2159 = abs((1.0 - _2114) / _2125);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_2125 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_2114 + 1.0) / _2125);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _2159 = frontier_phi_17_15_ladder;
        }
        float _2381;
        if (_2128 > 0.0)
        {
            _2381 = abs((1.0 - _2118) / _2128);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_2128 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_2118 + 1.0) / _2128);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2381 = frontier_phi_26_22_ladder;
        }
        float _2627;
        if (_2131 > 0.0)
        {
            _2627 = abs((1.0 - _2122) / _2131);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_2131 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_2122 + 1.0) / _2131);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2627 = frontier_phi_38_33_ladder;
        }
        float _2629 = isnan(_2381) ? _2159 : (isnan(_2159) ? _2381 : min(_2159, _2381));
        float _2630 = isnan(_2627) ? _2629 : (isnan(_2629) ? _2627 : min(_2629, _2627));
        float _2634 = (_2630 * _2125) + _2114;
        float _2635 = (_2630 * _2128) + _2118;
        float _2636 = (_2630 * _2131) + _2122;
        float _2637 = _2630 * 9.9999997473787516355514526367188e-05;
        float _2639 = (-1.0) - _2637;
        float _2641 = _2637 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2636 > _2641) || ((_2636 < _2639) || ((_2635 > _2641) || ((_2635 < _2639) || ((_2634 < _2639) || (_2634 > _2641))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2760 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2636, cbModelParam._m0[9u].z, fma(_2635, cbModelParam._m0[9u].y, _2634 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2636, cbModelParam._m0[10u].z, fma(_2635, cbModelParam._m0[10u].y, _2634 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2636, cbModelParam._m0[11u].z, fma(_2635, cbModelParam._m0[11u].y, _2634 * cbModelParam._m0[11u].x))), _2067);
            frontier_phi_16_38_ladder = _2760.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2760.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2760.x * cbModelParam._m0[1u].y;
        }
        _2147 = frontier_phi_16_38_ladder_2;
        _2149 = frontier_phi_16_38_ladder_1;
        _2151 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _2135 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1230, _1231, _1232), _2067);
        _2147 = _2135.x * cbModelParam._m0[1u].y;
        _2149 = _2135.y * cbModelParam._m0[1u].y;
        _2151 = _2135.z * cbModelParam._m0[1u].y;
    }
    float _2155 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _1063);
    float _2156 = isnan(_2155) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2155 : min(cbModelParam._m0[25u].w, _2155));
    float _2246;
    float _2248;
    float _2250;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2210 = fma(_1291, cbModelParam._m0[21u].z, fma(_1287, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1283)) + cbModelParam._m0[21u].w;
        float _2214 = fma(_1291, cbModelParam._m0[22u].z, fma(_1287, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1283)) + cbModelParam._m0[22u].w;
        float _2218 = fma(_1291, cbModelParam._m0[23u].z, fma(_1287, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1283)) + cbModelParam._m0[23u].w;
        float _2221 = fma(_1232, cbModelParam._m0[21u].z, fma(_1231, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1230));
        float _2224 = fma(_1232, cbModelParam._m0[22u].z, fma(_1231, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1230));
        float _2227 = fma(_1232, cbModelParam._m0[23u].z, fma(_1231, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1230));
        float _2386;
        if (_2221 > 0.0)
        {
            _2386 = abs((1.0 - _2210) / _2221);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_2221 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_2210 + 1.0) / _2221);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2386 = frontier_phi_28_24_ladder;
        }
        float _2654;
        if (_2224 > 0.0)
        {
            _2654 = abs((1.0 - _2214) / _2224);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_2224 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_2214 + 1.0) / _2224);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2654 = frontier_phi_40_35_ladder;
        }
        float _2859;
        if (_2227 > 0.0)
        {
            _2859 = abs((1.0 - _2218) / _2227);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_2227 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_2218 + 1.0) / _2227);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2859 = frontier_phi_49_46_ladder;
        }
        float _2861 = isnan(_2654) ? _2386 : (isnan(_2386) ? _2654 : min(_2386, _2654));
        float _2862 = isnan(_2859) ? _2861 : (isnan(_2861) ? _2859 : min(_2861, _2859));
        float _2866 = (_2862 * _2221) + _2210;
        float _2867 = (_2862 * _2224) + _2214;
        float _2868 = (_2862 * _2227) + _2218;
        float _2869 = _2862 * 9.9999997473787516355514526367188e-05;
        float _2870 = (-1.0) - _2869;
        float _2872 = _2869 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2868 > _2872) || ((_2868 < _2870) || ((_2867 > _2872) || ((_2867 < _2870) || ((_2866 < _2870) || (_2866 > _2872))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _3067 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2868, cbModelParam._m0[17u].z, fma(_2867, cbModelParam._m0[17u].y, _2866 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2868, cbModelParam._m0[18u].z, fma(_2867, cbModelParam._m0[18u].y, _2866 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2868, cbModelParam._m0[19u].z, fma(_2867, cbModelParam._m0[19u].y, _2866 * cbModelParam._m0[19u].x))), _2156);
            frontier_phi_25_49_ladder = _3067.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _3067.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _3067.x * cbModelParam._m0[1u].z;
        }
        _2246 = frontier_phi_25_49_ladder_2;
        _2248 = frontier_phi_25_49_ladder_1;
        _2250 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _2230 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1230, _1231, _1232), _2156);
        _2246 = _2230.x * cbModelParam._m0[1u].z;
        _2248 = _2230.y * cbModelParam._m0[1u].z;
        _2250 = _2230.z * cbModelParam._m0[1u].z;
    }
    float _2262 = ((((1.0 - _1251) * ((_1238 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_1251 * _1238)) * _1222;
    float _2263 = _2262 * ((cbModelParam._m0[1u].w * (_2246 - _2147)) + _2147);
    float _2264 = _2262 * ((cbModelParam._m0[1u].w * (_2248 - _2149)) + _2149);
    float _2265 = _2262 * ((cbModelParam._m0[1u].w * (_2250 - _2151)) + _2151);
    float _2268 = fma(_2265, cbSceneParam._m0[89u].z, fma(_2264, cbSceneParam._m0[89u].y, _2263 * cbSceneParam._m0[89u].x));
    float _2271 = fma(_2265, cbSceneParam._m0[90u].z, fma(_2264, cbSceneParam._m0[90u].y, _2263 * cbSceneParam._m0[90u].x));
    float _2274 = fma(_2265, cbSceneParam._m0[91u].z, fma(_2264, cbSceneParam._m0[91u].y, _2263 * cbSceneParam._m0[91u].x));
    vec4 _2282 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_1159, _1160));
    float _2284 = _2282.w;
    float _2296 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _2284);
    float _2297 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _2284);
    float _2298 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _2284);
    uvec4 _2302 = floatBitsToUint(cbInstanceData._m0[_291 + 5u]);
    uint _2304 = _2302.x * 14u;
    uint _2305 = _2304 + 13u;
    float _2312 = _1222 + (-1.0);
    float _2317 = (cbLight._m0[_2305].x * _2312) + 1.0;
    float _2318 = (cbLight._m0[_2305].y * _2312) + 1.0;
    float _2319 = (cbLight._m0[_2305].z * _2312) + 1.0;
    float _2320 = (cbLight._m0[_2305].w * _2312) + 1.0;
    uint _2321 = _2304 + 5u;
    float _2327 = isnan(1.0) ? _2318 : (isnan(_2318) ? 1.0 : min(_2318, 1.0));
    uint _2331 = _2304 + 4u;
    float _2340 = isnan(1.0) ? _2317 : (isnan(_2317) ? 1.0 : min(_2317, 1.0));
    uint _2344 = _2304 | 1u;
    float _2355 = dot(vec3(cbLight._m0[_2304].xyz), vec3(_1060, _1061, _1062));
    float _2358 = dot(vec3(cbLight._m0[_2344].xyz), vec3(_1060, _1061, _1062));
    float _4633 = isnan(0.0) ? _2355 : (isnan(_2355) ? 0.0 : max(_2355, 0.0));
    float _4644 = isnan(0.0) ? _2358 : (isnan(_2358) ? 0.0 : max(_2358, 0.0));
    float _2363 = (isnan(1.0) ? _4633 : (isnan(_4633) ? 1.0 : min(_4633, 1.0))) * 0.3183098733425140380859375;
    float _2365 = (isnan(1.0) ? _4644 : (isnan(_4644) ? 1.0 : min(_4644, 1.0))) * 0.3183098733425140380859375;
    float _2372 = ((cbLight._m0[_2321].x * _2327) * _2365) + (((cbLight._m0[_2331].x * _2296) * _2340) * _2363);
    float _2373 = ((_2327 * cbLight._m0[_2321].y) * _2365) + (((cbLight._m0[_2331].y * _2297) * _2340) * _2363);
    float _2374 = ((_2327 * cbLight._m0[_2321].z) * _2365) + (((cbLight._m0[_2331].z * _2298) * _2340) * _2363);
    uvec4 _2378 = floatBitsToUint(cbLight._m0[_2304 + 12u]);
    bool _2380 = _2378.x == 0u;
    float _2391;
    float _2393;
    float _2395;
    if (_2380)
    {
        _2391 = _2372;
        _2393 = _2373;
        _2395 = _2374;
    }
    else
    {
        uint _2399 = _2304 + 6u;
        float _2415 = (dot(vec3(cbLight._m0[_2304 + 2u].xyz), vec3(_1060, _1061, _1062)) * 0.5) + 0.5;
        float _2416 = _2415 * _2415;
        float _4655 = isnan(0.0) ? _2416 : (isnan(_2416) ? 0.0 : max(_2416, 0.0));
        float _2417 = isnan(1.0) ? _4655 : (isnan(_4655) ? 1.0 : min(_4655, 1.0));
        float _2418 = isnan(1.0) ? _2319 : (isnan(_2319) ? 1.0 : min(_2319, 1.0));
        _2391 = (((cbLight._m0[_2399].x * 0.3183098733425140380859375) * _2417) * _2418) + _2372;
        _2393 = (((cbLight._m0[_2399].y * 0.3183098733425140380859375) * _2417) * _2418) + _2373;
        _2395 = (((cbLight._m0[_2399].z * 0.3183098733425140380859375) * _2417) * _2418) + _2374;
    }
    bool _2398 = _2378.y == 0u;
    float _2436;
    float _2438;
    float _2440;
    if (_2398)
    {
        _2436 = _2391;
        _2438 = _2393;
        _2440 = _2395;
    }
    else
    {
        uint _2598 = _2304 + 7u;
        float _2614 = (dot(vec3(cbLight._m0[_2304 + 3u].xyz), vec3(_1060, _1061, _1062)) * 0.5) + 0.5;
        float _2615 = _2614 * _2614;
        float _4671 = isnan(0.0) ? _2615 : (isnan(_2615) ? 0.0 : max(_2615, 0.0));
        float _2616 = isnan(1.0) ? _4671 : (isnan(_4671) ? 1.0 : min(_4671, 1.0));
        float _2617 = isnan(1.0) ? _2320 : (isnan(_2320) ? 1.0 : min(_2320, 1.0));
        _2436 = (((cbLight._m0[_2598].x * 0.3183098733425140380859375) * _2616) * _2617) + _2391;
        _2438 = (((cbLight._m0[_2598].y * 0.3183098733425140380859375) * _2616) * _2617) + _2393;
        _2440 = (((cbLight._m0[_2598].z * 0.3183098733425140380859375) * _2616) * _2617) + _2395;
    }
    uint _2443 = _2304 + 8u;
    float _2456 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2304].w)) * _1063) * 0.949999988079071044921875);
    float _2457 = _2456 * _2456;
    float _2458 = cbLight._m0[_2304].x + _1139;
    float _2459 = cbLight._m0[_2304].y + _1140;
    float _2460 = cbLight._m0[_2304].z + _1141;
    float _2464 = inversesqrt(dot(vec3(_2458, _2459, _2460), vec3(_2458, _2459, _2460)));
    float _2465 = _2464 * _2458;
    float _2466 = _2464 * _2459;
    float _2467 = _2464 * _2460;
    float _2468 = dot(vec3(_1060, _1061, _1062), vec3(cbLight._m0[_2304].xyz));
    float _4687 = isnan(0.0) ? _2468 : (isnan(_2468) ? 0.0 : max(_2468, 0.0));
    float _2471 = isnan(1.0) ? _4687 : (isnan(_4687) ? 1.0 : min(_4687, 1.0));
    float _4698 = isnan(0.0) ? _1223 : (isnan(_1223) ? 0.0 : max(_1223, 0.0));
    float _2472 = isnan(1.0) ? _4698 : (isnan(_4698) ? 1.0 : min(_4698, 1.0));
    float _2473 = dot(vec3(_1060, _1061, _1062), vec3(_2465, _2466, _2467));
    float _4709 = isnan(0.0) ? _2473 : (isnan(_2473) ? 0.0 : max(_2473, 0.0));
    float _2476 = isnan(1.0) ? _4709 : (isnan(_4709) ? 1.0 : min(_4709, 1.0));
    float _2477 = dot(vec3(cbLight._m0[_2304].xyz), vec3(_2465, _2466, _2467));
    float _4720 = isnan(0.0) ? _2477 : (isnan(_2477) ? 0.0 : max(_2477, 0.0));
    float _2481 = _2457 * _2457;
    float _2485 = ((_2476 * _2476) * (_2481 + (-1.0))) + 1.0;
    float _2496 = (exp2(log2(1.0 - (isnan(1.0) ? _4720 : (isnan(_4720) ? 1.0 : min(_4720, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2497 = 1.0 - _2457;
    float _2508 = (0.5 / (((_2472 * ((_2471 * _2497) + _2457)) + 9.9999999392252902907785028219223e-09) + (((_2472 * _2497) + _2457) * _2471))) * _2471;
    float _4731 = isnan(0.0) ? _2508 : (isnan(_2508) ? 0.0 : max(_2508, 0.0));
    float _2510 = (isnan(1.0) ? _4731 : (isnan(_4731) ? 1.0 : min(_4731, 1.0))) * (_2481 / ((_2485 * _2485) * 3.141590118408203125));
    uint _2524 = _2304 + 9u;
    float _2535 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2344].w)) * _1063) * 0.949999988079071044921875);
    float _2536 = _2535 * _2535;
    float _2537 = cbLight._m0[_2344].x + _1139;
    float _2538 = cbLight._m0[_2344].y + _1140;
    float _2539 = cbLight._m0[_2344].z + _1141;
    float _2543 = inversesqrt(dot(vec3(_2537, _2538, _2539), vec3(_2537, _2538, _2539)));
    float _2544 = _2543 * _2537;
    float _2545 = _2543 * _2538;
    float _2546 = _2543 * _2539;
    float _2547 = dot(vec3(_1060, _1061, _1062), vec3(cbLight._m0[_2344].xyz));
    float _4742 = isnan(0.0) ? _2547 : (isnan(_2547) ? 0.0 : max(_2547, 0.0));
    float _2550 = isnan(1.0) ? _4742 : (isnan(_4742) ? 1.0 : min(_4742, 1.0));
    float _2551 = dot(vec3(_1060, _1061, _1062), vec3(_2544, _2545, _2546));
    float _4753 = isnan(0.0) ? _2551 : (isnan(_2551) ? 0.0 : max(_2551, 0.0));
    float _2554 = isnan(1.0) ? _4753 : (isnan(_4753) ? 1.0 : min(_4753, 1.0));
    float _2555 = dot(vec3(cbLight._m0[_2344].xyz), vec3(_2544, _2545, _2546));
    float _4764 = isnan(0.0) ? _2555 : (isnan(_2555) ? 0.0 : max(_2555, 0.0));
    float _2559 = _2536 * _2536;
    float _2563 = ((_2554 * _2554) * (_2559 + (-1.0))) + 1.0;
    float _2572 = (exp2(log2(1.0 - (isnan(1.0) ? _4764 : (isnan(_4764) ? 1.0 : min(_4764, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2573 = 1.0 - _2536;
    float _2583 = (0.5 / (((_2472 * ((_2550 * _2573) + _2536)) + 9.9999999392252902907785028219223e-09) + (((_2472 * _2573) + _2536) * _2550))) * _2550;
    float _4775 = isnan(0.0) ? _2583 : (isnan(_2583) ? 0.0 : max(_2583, 0.0));
    float _2585 = (isnan(1.0) ? _4775 : (isnan(_4775) ? 1.0 : min(_4775, 1.0))) * (_2559 / ((_2563 * _2563) * 3.141590118408203125));
    float _2595 = (((_2572 * cbLight._m0[_2524].x) * _2585) * _2327) + ((((cbLight._m0[_2443].x * _2296) * _2496) * _2510) * _2340);
    float _2596 = (((_2572 * cbLight._m0[_2524].y) * _2585) * _2327) + ((((cbLight._m0[_2443].y * _2297) * _2496) * _2510) * _2340);
    float _2597 = (((_2572 * cbLight._m0[_2524].z) * _2585) * _2327) + ((((cbLight._m0[_2443].z * _2298) * _2496) * _2510) * _2340);
    float _2659;
    float _2661;
    float _2663;
    if (_2380)
    {
        _2659 = _2595;
        _2661 = _2596;
        _2663 = _2597;
    }
    else
    {
        uint _2665 = _2304 + 2u;
        uint _2669 = _2304 + 10u;
        float _2683 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2665].w)) * _1063) * 0.949999988079071044921875);
        float _2684 = _2683 * _2683;
        float _2685 = cbLight._m0[_2665].x + _1139;
        float _2686 = cbLight._m0[_2665].y + _1140;
        float _2687 = cbLight._m0[_2665].z + _1141;
        float _2691 = inversesqrt(dot(vec3(_2685, _2686, _2687), vec3(_2685, _2686, _2687)));
        float _2692 = _2691 * _2685;
        float _2693 = _2691 * _2686;
        float _2694 = _2691 * _2687;
        float _2695 = dot(vec3(_1060, _1061, _1062), vec3(cbLight._m0[_2665].xyz));
        float _4786 = isnan(0.0) ? _2695 : (isnan(_2695) ? 0.0 : max(_2695, 0.0));
        float _2698 = isnan(1.0) ? _4786 : (isnan(_4786) ? 1.0 : min(_4786, 1.0));
        float _2699 = dot(vec3(_1060, _1061, _1062), vec3(_2692, _2693, _2694));
        float _4797 = isnan(0.0) ? _2699 : (isnan(_2699) ? 0.0 : max(_2699, 0.0));
        float _2702 = isnan(1.0) ? _4797 : (isnan(_4797) ? 1.0 : min(_4797, 1.0));
        float _2703 = dot(vec3(cbLight._m0[_2665].xyz), vec3(_2692, _2693, _2694));
        float _4808 = isnan(0.0) ? _2703 : (isnan(_2703) ? 0.0 : max(_2703, 0.0));
        float _2707 = _2684 * _2684;
        float _2711 = ((_2702 * _2702) * (_2707 + (-1.0))) + 1.0;
        float _2720 = (exp2(log2(1.0 - (isnan(1.0) ? _4808 : (isnan(_4808) ? 1.0 : min(_4808, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2721 = 1.0 - _2684;
        float _2731 = (0.5 / (((_2472 * ((_2698 * _2721) + _2684)) + 9.9999999392252902907785028219223e-09) + (((_2472 * _2721) + _2684) * _2698))) * _2698;
        float _4819 = isnan(0.0) ? _2731 : (isnan(_2731) ? 0.0 : max(_2731, 0.0));
        float _2733 = (isnan(1.0) ? _4819 : (isnan(_4819) ? 1.0 : min(_4819, 1.0))) * (_2707 / ((_2711 * _2711) * 3.141590118408203125));
        float _2734 = isnan(1.0) ? _2319 : (isnan(_2319) ? 1.0 : min(_2319, 1.0));
        _2659 = (((_2720 * cbLight._m0[_2669].x) * _2733) * _2734) + _2595;
        _2661 = (((_2720 * cbLight._m0[_2669].y) * _2733) * _2734) + _2596;
        _2663 = (((_2720 * cbLight._m0[_2669].z) * _2733) * _2734) + _2597;
    }
    float _2769;
    float _2771;
    float _2773;
    if (_2398)
    {
        _2769 = _2659;
        _2771 = _2661;
        _2773 = _2663;
    }
    else
    {
        uint _2780 = _2304 + 3u;
        uint _2784 = _2304 + 11u;
        float _2798 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2780].w)) * _1063) * 0.949999988079071044921875);
        float _2799 = _2798 * _2798;
        float _2800 = cbLight._m0[_2780].x + _1139;
        float _2801 = cbLight._m0[_2780].y + _1140;
        float _2802 = cbLight._m0[_2780].z + _1141;
        float _2806 = inversesqrt(dot(vec3(_2800, _2801, _2802), vec3(_2800, _2801, _2802)));
        float _2807 = _2806 * _2800;
        float _2808 = _2806 * _2801;
        float _2809 = _2806 * _2802;
        float _2810 = dot(vec3(_1060, _1061, _1062), vec3(cbLight._m0[_2780].xyz));
        float _4835 = isnan(0.0) ? _2810 : (isnan(_2810) ? 0.0 : max(_2810, 0.0));
        float _2813 = isnan(1.0) ? _4835 : (isnan(_4835) ? 1.0 : min(_4835, 1.0));
        float _2814 = dot(vec3(_1060, _1061, _1062), vec3(_2807, _2808, _2809));
        float _4846 = isnan(0.0) ? _2814 : (isnan(_2814) ? 0.0 : max(_2814, 0.0));
        float _2817 = isnan(1.0) ? _4846 : (isnan(_4846) ? 1.0 : min(_4846, 1.0));
        float _2818 = dot(vec3(cbLight._m0[_2780].xyz), vec3(_2807, _2808, _2809));
        float _4857 = isnan(0.0) ? _2818 : (isnan(_2818) ? 0.0 : max(_2818, 0.0));
        float _2822 = _2799 * _2799;
        float _2826 = ((_2817 * _2817) * (_2822 + (-1.0))) + 1.0;
        float _2835 = (exp2(log2(1.0 - (isnan(1.0) ? _4857 : (isnan(_4857) ? 1.0 : min(_4857, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2836 = 1.0 - _2799;
        float _2846 = (0.5 / (((_2472 * ((_2813 * _2836) + _2799)) + 9.9999999392252902907785028219223e-09) + (((_2472 * _2836) + _2799) * _2813))) * _2813;
        float _4868 = isnan(0.0) ? _2846 : (isnan(_2846) ? 0.0 : max(_2846, 0.0));
        float _2848 = (isnan(1.0) ? _4868 : (isnan(_4868) ? 1.0 : min(_4868, 1.0))) * (_2822 / ((_2826 * _2826) * 3.141590118408203125));
        float _2849 = isnan(1.0) ? _2320 : (isnan(_2320) ? 1.0 : min(_2320, 1.0));
        _2769 = (((_2835 * cbLight._m0[_2784].x) * _2848) * _2849) + _2659;
        _2771 = (((_2835 * cbLight._m0[_2784].y) * _2848) * _2849) + _2661;
        _2773 = (((_2835 * cbLight._m0[_2784].z) * _2848) * _2849) + _2663;
    }
    float _2984;
    float _2986;
    float _2988;
    float _2990;
    float _2992;
    float _2994;
    if (_2302.y == 0u)
    {
        float _2924 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2925 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2924;
        float _2926 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2924;
        float _2927 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2924;
        uvec4 _2939 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2940 = _2939.x;
        uint _2951 = uint((float(_2939.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1160) / _2940))) + floor(float(uint(cbSceneParam._m0[85u].x * _1159) / _2940)));
        float _2961 = (log2(_2927 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2962 = isnan(0.0) ? _2961 : (isnan(_2961) ? 0.0 : max(_2961, 0.0));
        uint _2965 = uint(isnan(14.0) ? _2962 : (isnan(_2962) ? 14.0 : min(_2962, 14.0)));
        uvec4 _2970 = texelFetch(g_lightClusterGridBuffer, int(((_2965 << 2u) + (_2951 << 6u)) >> 2u));
        uint _2971 = _2970.x;
        uint _2972 = _2939.z;
        float _3072;
        float _3074;
        float _3076;
        float _3078;
        float _3080;
        float _3082;
        if (((((1u << ((_2972 >> 4u) & 15u)) + 4294967295u) & _2971) == 0u) || ((_2972 & 240u) == 0u))
        {
            _3072 = 0.0;
            _3074 = 0.0;
            _3076 = 0.0;
            _3078 = 0.0;
            _3080 = 0.0;
            _3082 = 0.0;
        }
        else
        {
            float _3073;
            float _3075;
            float _3077;
            float _3079;
            float _3081;
            float _3083;
            float _3224 = 0.0;
            float _3225 = 0.0;
            float _3226 = 0.0;
            float _3227 = 0.0;
            float _3228 = 0.0;
            float _3229 = 0.0;
            uint _3230 = 0u;
            uint _3239;
            bool _3240;
            for (;;)
            {
                _3239 = texelFetch(g_lightClassification, int((((_2965 << 5u) + (_2951 << 9u)) + (_3230 << 2u)) >> 2u)).x;
                _3240 = _3239 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3240)
                {
                    frontier_phi_66_pred = _3224;
                    frontier_phi_66_pred_1 = _3229;
                    frontier_phi_66_pred_2 = _3228;
                    frontier_phi_66_pred_3 = _3227;
                    frontier_phi_66_pred_4 = _3226;
                    frontier_phi_66_pred_5 = _3225;
                }
                else
                {
                    float _3369;
                    float _3370;
                    float _3371;
                    float _3372;
                    float _3373;
                    float _3374;
                    uint _3375;
                    _3369 = _3224;
                    _3370 = _3225;
                    _3371 = _3226;
                    _3372 = _3227;
                    _3373 = _3228;
                    _3374 = _3229;
                    _3375 = _3239;
                    float _3296;
                    float _3297;
                    float _3298;
                    float _3299;
                    float _3300;
                    float _3301;
                    for (;;)
                    {
                        uint _3379 = uint(findLSB(_3375)) + (_3230 << 5u);
                        uint _3376 = (_3375 + 4294967295u) & _3375;
                        uint _3381 = _3379 * 48u;
                        vec4 _3395 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3381)).x, texelFetch(g_PointLightRenderingBuffer, int(_3381 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3381 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3381 + 3u)).x));
                        uint _3401 = (_3379 * 48u) + 4u;
                        vec4 _3414 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3401)).x, texelFetch(g_PointLightRenderingBuffer, int(_3401 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3401 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3401 + 3u)).x));
                        uint _3420 = (_3379 * 48u) + 8u;
                        vec3 _3431 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3420)).x, texelFetch(g_PointLightRenderingBuffer, int(_3420 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3420 + 2u)).x));
                        float _3435 = _3395.x - _2925;
                        float _3436 = _3395.y - _2926;
                        float _3437 = _3395.z - _2927;
                        float _3438 = dot(vec3(_3435, _3436, _3437), vec3(_3435, _3436, _3437));
                        float _3441 = inversesqrt(_3438);
                        float _3442 = _3441 * _3435;
                        float _3443 = _3441 * _3436;
                        float _3444 = _3441 * _3437;
                        float _3445 = dot(vec3(_1178, _1181, _1184), vec3(_3442, _3443, _3444));
                        float _3450 = 1.0 - (_3438 * _3395.w);
                        float _4894 = isnan(0.0) ? _3450 : (isnan(_3450) ? 0.0 : max(_3450, 0.0));
                        float _3451 = isnan(1.0) ? _4894 : (isnan(_4894) ? 1.0 : min(_4894, 1.0));
                        float _3452 = sqrt(_3438) * _3414.w;
                        float _3455 = 1.39999997615814208984375 / (_3452 + 1.39999997615814208984375);
                        float _3456 = _3455 * _3455;
                        float _3459 = ((1.0 - _3456) * _3445) + _3456;
                        float _3462 = _3452 * _3452;
                        float _3466 = ((isnan(0.0) ? _3459 : (isnan(_3459) ? 0.0 : max(_3459, 0.0))) * _3451) / ((_3462 * 0.699999988079071044921875) + 1.0);
                        float _3470 = (-0.0) - _2925;
                        float _3471 = (-0.0) - _2926;
                        float _3472 = (-0.0) - _2927;
                        float _3476 = inversesqrt(dot(vec3(_3470, _3471, _3472), vec3(_3470, _3471, _3472)));
                        float _3477 = _3476 * _3470;
                        float _3478 = _3476 * _3471;
                        float _3479 = _3476 * _3472;
                        float _3487 = exp2(log2(1.0 / ((_3462 * 3.5) + 5.0)) * 0.25);
                        float _3488 = 1.0 - _1238;
                        float _3495 = sqrt(1.0 - ((1.0 - (_3488 * _3488)) * (1.0 - (_3487 * _3487))));
                        float _3496 = _3495 * _3495;
                        float _3497 = _3496 * _3496;
                        float _3498 = _3477 + _3442;
                        float _3499 = _3478 + _3443;
                        float _3500 = _3479 + _3444;
                        float _3504 = inversesqrt(dot(vec3(_3498, _3499, _3500), vec3(_3498, _3499, _3500)));
                        float _3508 = dot(vec3(_1178, _1181, _1184), vec3(_3477, _3478, _3479));
                        float _4910 = isnan(0.0) ? _3508 : (isnan(_3508) ? 0.0 : max(_3508, 0.0));
                        float _3511 = isnan(1.0) ? _4910 : (isnan(_4910) ? 1.0 : min(_4910, 1.0));
                        float _3512 = dot(vec3(_1178, _1181, _1184), vec3(_3504 * _3498, _3504 * _3499, _3504 * _3500));
                        float _4921 = isnan(0.0) ? _3512 : (isnan(_3512) ? 0.0 : max(_3512, 0.0));
                        float _3515 = isnan(1.0) ? _4921 : (isnan(_4921) ? 1.0 : min(_4921, 1.0));
                        float _3519 = ((_3515 * _3515) * (_3497 + (-1.0))) + 1.0;
                        float _3520 = _3455 * _3496;
                        float _3521 = _3520 * _3520;
                        float _3524 = ((1.0 - _3521) * _3445) + _3521;
                        float _4932 = isnan(0.0) ? _3524 : (isnan(_3524) ? 0.0 : max(_3524, 0.0));
                        float _3525 = isnan(1.0) ? _4932 : (isnan(_4932) ? 1.0 : min(_4932, 1.0));
                        float _3526 = 1.0 - _3496;
                        float _3536 = (0.5 / (((_3525 * ((_3511 * _3526) + _3496)) + 9.9999999392252902907785028219223e-09) + (((_3525 * _3526) + _3496) * _3511))) * _3525;
                        float _4943 = isnan(0.0) ? _3536 : (isnan(_3536) ? 0.0 : max(_3536, 0.0));
                        float _3547 = (((_3497 * 3.1415927410125732421875) * (isnan(1.0) ? _4943 : (isnan(_4943) ? 1.0 : min(_4943, 1.0)))) / ((_3519 * _3519) * ((_3462 * 2.1991131305694580078125) + 3.141590118408203125))) * _3451;
                        _3299 = (_3466 * _3414.x) + _3372;
                        _3300 = (_3466 * _3414.y) + _3373;
                        _3301 = (_3466 * _3414.z) + _3374;
                        _3296 = (_3547 * _3431.x) + _3369;
                        _3297 = (_3547 * _3431.y) + _3370;
                        _3298 = (_3547 * _3431.z) + _3371;
                        if (_3376 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3369 = _3296;
                            _3370 = _3297;
                            _3371 = _3298;
                            _3372 = _3299;
                            _3373 = _3300;
                            _3374 = _3301;
                            _3375 = _3376;
                        }
                    }
                    frontier_phi_66_pred = _3296;
                    frontier_phi_66_pred_1 = _3301;
                    frontier_phi_66_pred_2 = _3300;
                    frontier_phi_66_pred_3 = _3299;
                    frontier_phi_66_pred_4 = _3298;
                    frontier_phi_66_pred_5 = _3297;
                }
                _3073 = frontier_phi_66_pred;
                _3083 = frontier_phi_66_pred_1;
                _3081 = frontier_phi_66_pred_2;
                _3079 = frontier_phi_66_pred_3;
                _3077 = frontier_phi_66_pred_4;
                _3075 = frontier_phi_66_pred_5;
                uint _3231 = _3230 + 1u;
                if (_3231 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3224 = _3073;
                    _3225 = _3075;
                    _3226 = _3077;
                    _3227 = _3079;
                    _3228 = _3081;
                    _3229 = _3083;
                    _3230 = _3231;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3072 = _3073;
            _3074 = _3075;
            _3076 = _3077;
            _3078 = _3079;
            _3080 = _3081;
            _3082 = _3083;
        }
        uvec4 _3086 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3087 = _3086.z;
        uint _3089 = (_3087 >> 8u) & 15u;
        float _3192;
        float _3194;
        float _3196;
        float _3198;
        float _3200;
        float _3202;
        if (((4294967295u << _3089) & _2971) == 0u)
        {
            _3192 = _3072;
            _3194 = _3074;
            _3196 = _3076;
            _3198 = _3078;
            _3200 = _3080;
            _3202 = _3082;
        }
        else
        {
            float _3217 = inversesqrt(dot(vec3(_2925, _2926, _2927), vec3(_2925, _2926, _2927)));
            float _3218 = _3217 * _2925;
            float _3219 = _3217 * _2926;
            float _3220 = _3217 * _2927;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_3089 < ((_3087 >> 12u) & 15u))
            {
                float _3193;
                float _3195;
                float _3197;
                float _3199;
                float _3201;
                float _3203;
                float _3352 = _3072;
                float _3353 = _3074;
                float _3354 = _3076;
                float _3355 = _3078;
                float _3356 = _3080;
                float _3357 = _3082;
                uint _3358 = _3089;
                uint _3367;
                bool _3368;
                for (;;)
                {
                    _3367 = texelFetch(g_lightClassification, int((((_2965 << 5u) + (_2951 << 9u)) + (_3358 << 2u)) >> 2u)).x;
                    _3368 = _3367 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_3368)
                    {
                        frontier_phi_77_pred = _3357;
                        frontier_phi_77_pred_1 = _3356;
                        frontier_phi_77_pred_2 = _3355;
                        frontier_phi_77_pred_3 = _3354;
                        frontier_phi_77_pred_4 = _3353;
                        frontier_phi_77_pred_5 = _3352;
                    }
                    else
                    {
                        float _3561;
                        float _3562;
                        float _3563;
                        float _3564;
                        float _3565;
                        float _3566;
                        float _3854;
                        float _3855;
                        float _3856;
                        float _3857;
                        float _3858;
                        float _3859;
                        float _3574 = _3352;
                        float _3575 = _3353;
                        float _3576 = _3354;
                        float _3577 = _3355;
                        float _3578 = _3356;
                        float _3579 = _3357;
                        uint _3580 = _3367;
                        uint _3581;
                        vec4 _3606;
                        float _3607;
                        vec4 _3622;
                        vec3 _3634;
                        vec4 _3649;
                        vec4 _3664;
                        float _3710;
                        bool _3711;
                        for (;;)
                        {
                            uint _3591 = ((_3358 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3580));
                            _3581 = (_3580 + 4294967295u) & _3580;
                            uint _3593 = _3591 * 40u;
                            _3606 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3593)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3593 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3593 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3593 + 3u)).x));
                            _3607 = _3606.w;
                            uint _3609 = (_3591 * 40u) + 4u;
                            _3622 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3609)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3609 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3609 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3609 + 3u)).x));
                            uint _3624 = (_3591 * 40u) + 8u;
                            _3634 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3624)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3624 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3624 + 2u)).x));
                            uint _3636 = (_3591 * 40u) + 16u;
                            _3649 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3636)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3636 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3636 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3636 + 3u)).x));
                            uint _3651 = (_3591 * 40u) + 20u;
                            _3664 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3651)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3651 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3651 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3651 + 3u)).x));
                            uint _3666 = (_3591 * 40u) + 24u;
                            vec4 _3679 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3666)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3666 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3666 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3666 + 3u)).x));
                            uint _3685 = (_3591 * 40u) + 28u;
                            vec4 _3698 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3685)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3685 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3685 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3685 + 3u)).x));
                            _3710 = fma(_2927, _3698.z, fma(_2926, _3698.y, _3698.x * _2925)) + _3698.w;
                            _3711 = !((fma(_2927, _3679.z, fma(_2926, _3679.y, _3679.x * _2925)) + _3679.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3711)
                            {
                                float _3738 = _3606.x - _2925;
                                float _3739 = _3606.y - _2926;
                                float _3740 = _3606.z - _2927;
                                float _3741 = dot(vec3(_3738, _3739, _3740), vec3(_3738, _3739, _3740));
                                float _3744 = inversesqrt(_3741);
                                float _3745 = _3744 * _3738;
                                float _3746 = _3744 * _3739;
                                float _3747 = _3744 * _3740;
                                float _3751 = 1.0 - (_3741 / (_3607 * _3607));
                                float _4954 = isnan(0.0) ? _3751 : (isnan(_3751) ? 0.0 : max(_3751, 0.0));
                                float _3752 = isnan(1.0) ? _4954 : (isnan(_4954) ? 1.0 : min(_4954, 1.0));
                                float _3756 = sqrt(_3741) * _3622.w;
                                float _3758 = 1.39999997615814208984375 / (_3756 + 1.39999997615814208984375);
                                float _3759 = _3758 * _3758;
                                float _3762 = ((1.0 - _3759) * dot(vec3(_3745, _3746, _3747), vec3(_1178, _1181, _1184))) + _3759;
                                float _3765 = _3756 * _3756;
                                float _3769 = (fma(_2927, _3649.z, fma(_2926, _3649.y, _3649.x * _2925)) + _3649.w) / _3710;
                                float _3770 = (fma(_2927, _3664.z, fma(_2926, _3664.y, _3664.x * _2925)) + _3664.w) / _3710;
                                float _3774 = 1.0 - dot(vec2(_3769, _3770), vec2(_3769, _3770));
                                float _4970 = isnan(0.0) ? _3774 : (isnan(_3774) ? 0.0 : max(_3774, 0.0));
                                float _3775 = isnan(1.0) ? _4970 : (isnan(_4970) ? 1.0 : min(_4970, 1.0));
                                float _3776 = _3775 * (((isnan(0.0) ? _3762 : (isnan(_3762) ? 0.0 : max(_3762, 0.0))) * _3752) / ((_3765 * 0.699999988079071044921875) + 1.0));
                                float _3788 = exp2(log2(1.0 / ((_3765 * 3.5) + 5.0)) * 0.25);
                                float _3789 = 1.0 - _1238;
                                float _3796 = sqrt(1.0 - ((1.0 - (_3789 * _3789)) * (1.0 - (_3788 * _3788))));
                                float _3797 = _3796 * _3796;
                                float _3798 = _3797 * _3797;
                                float _3799 = _3745 - _3218;
                                float _3800 = _3746 - _3219;
                                float _3801 = _3747 - _3220;
                                float _3805 = inversesqrt(dot(vec3(_3799, _3800, _3801), vec3(_3799, _3800, _3801)));
                                float _3809 = dot(vec3(_1178, _1181, _1184), vec3((-0.0) - _3218, (-0.0) - _3219, (-0.0) - _3220));
                                float _4981 = isnan(0.0) ? _3809 : (isnan(_3809) ? 0.0 : max(_3809, 0.0));
                                float _3812 = isnan(1.0) ? _4981 : (isnan(_4981) ? 1.0 : min(_4981, 1.0));
                                float _3813 = dot(vec3(_1178, _1181, _1184), vec3(_3805 * _3799, _3805 * _3800, _3805 * _3801));
                                float _4992 = isnan(0.0) ? _3813 : (isnan(_3813) ? 0.0 : max(_3813, 0.0));
                                float _3816 = isnan(1.0) ? _4992 : (isnan(_4992) ? 1.0 : min(_4992, 1.0));
                                float _3820 = ((_3816 * _3816) * (_3798 + (-1.0))) + 1.0;
                                float _3821 = _3758 * _3797;
                                float _3822 = _3821 * _3821;
                                float _3828 = ((1.0 - _3822) * dot(vec3(_1178, _1181, _1184), vec3(_3745, _3746, _3747))) + _3822;
                                float _5003 = isnan(0.0) ? _3828 : (isnan(_3828) ? 0.0 : max(_3828, 0.0));
                                float _3829 = isnan(1.0) ? _5003 : (isnan(_5003) ? 1.0 : min(_5003, 1.0));
                                float _3830 = 1.0 - _3797;
                                float _3840 = (0.5 / (((_3829 * ((_3812 * _3830) + _3797)) + 9.9999999392252902907785028219223e-09) + (((_3829 * _3830) + _3797) * _3812))) * _3829;
                                float _5014 = isnan(0.0) ? _3840 : (isnan(_3840) ? 0.0 : max(_3840, 0.0));
                                float _3850 = (_3775 * _3752) * (((_3798 * 3.1415927410125732421875) * (isnan(1.0) ? _5014 : (isnan(_5014) ? 1.0 : min(_5014, 1.0)))) / ((_3820 * _3820) * ((_3765 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3776 * _3622.y;
                                frontier_phi_83_pred_1 = _3776 * _3622.x;
                                frontier_phi_83_pred_2 = _3850 * _3634.z;
                                frontier_phi_83_pred_3 = _3850 * _3634.y;
                                frontier_phi_83_pred_4 = _3850 * _3634.x;
                                frontier_phi_83_pred_5 = _3776 * _3622.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3858 = frontier_phi_83_pred;
                            _3857 = frontier_phi_83_pred_1;
                            _3856 = frontier_phi_83_pred_2;
                            _3855 = frontier_phi_83_pred_3;
                            _3854 = frontier_phi_83_pred_4;
                            _3859 = frontier_phi_83_pred_5;
                            _3564 = _3857 + _3577;
                            _3565 = _3858 + _3578;
                            _3566 = _3859 + _3579;
                            _3561 = _3854 + _3574;
                            _3562 = _3855 + _3575;
                            _3563 = _3856 + _3576;
                            if (_3581 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3574 = _3561;
                                _3575 = _3562;
                                _3576 = _3563;
                                _3577 = _3564;
                                _3578 = _3565;
                                _3579 = _3566;
                                _3580 = _3581;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3566;
                        frontier_phi_77_pred_1 = _3565;
                        frontier_phi_77_pred_2 = _3564;
                        frontier_phi_77_pred_3 = _3563;
                        frontier_phi_77_pred_4 = _3562;
                        frontier_phi_77_pred_5 = _3561;
                    }
                    _3203 = frontier_phi_77_pred;
                    _3201 = frontier_phi_77_pred_1;
                    _3199 = frontier_phi_77_pred_2;
                    _3197 = frontier_phi_77_pred_3;
                    _3195 = frontier_phi_77_pred_4;
                    _3193 = frontier_phi_77_pred_5;
                    uint _3359 = _3358 + 1u;
                    if (_3359 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3352 = _3193;
                        _3353 = _3195;
                        _3354 = _3197;
                        _3355 = _3199;
                        _3356 = _3201;
                        _3357 = _3203;
                        _3358 = _3359;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _3197;
                frontier_phi_58_59_ladder_1 = _3203;
                frontier_phi_58_59_ladder_2 = _3201;
                frontier_phi_58_59_ladder_3 = _3199;
                frontier_phi_58_59_ladder_4 = _3195;
                frontier_phi_58_59_ladder_5 = _3193;
            }
            else
            {
                frontier_phi_58_59_ladder = _3076;
                frontier_phi_58_59_ladder_1 = _3082;
                frontier_phi_58_59_ladder_2 = _3080;
                frontier_phi_58_59_ladder_3 = _3078;
                frontier_phi_58_59_ladder_4 = _3074;
                frontier_phi_58_59_ladder_5 = _3072;
            }
            _3192 = frontier_phi_58_59_ladder_5;
            _3194 = frontier_phi_58_59_ladder_4;
            _3196 = frontier_phi_58_59_ladder;
            _3198 = frontier_phi_58_59_ladder_3;
            _3200 = frontier_phi_58_59_ladder_2;
            _3202 = frontier_phi_58_59_ladder_1;
        }
        float _3207 = isnan(1.0) ? _1222 : (isnan(_1222) ? 1.0 : min(_1222, 1.0));
        _2984 = (_3207 * _3198) + _2436;
        _2986 = (_3207 * _3200) + _2438;
        _2988 = (_3207 * _3202) + _2440;
        _2990 = ((_3192 * 0.039999999105930328369140625) * _3207) + _2769;
        _2992 = ((_3194 * 0.039999999105930328369140625) * _3207) + _2771;
        _2994 = ((_3196 * 0.039999999105930328369140625) * _3207) + _2773;
    }
    else
    {
        _2984 = _2436;
        _2986 = _2438;
        _2988 = _2440;
        _2990 = _2769;
        _2992 = _2771;
        _2994 = _2773;
    }
    float _5030 = isnan(0.0) ? _1207 : (isnan(_1207) ? 0.0 : max(_1207, 0.0));
    float _5041 = isnan(0.0) ? _1208 : (isnan(_1208) ? 0.0 : max(_1208, 0.0));
    float _5052 = isnan(0.0) ? _1209 : (isnan(_1209) ? 0.0 : max(_1209, 0.0));
    float _3011 = ((isnan(1.0) ? _5030 : (isnan(_5030) ? 1.0 : min(_5030, 1.0))) * (_2984 + ((isnan(0.0) ? _1977 : (isnan(_1977) ? 0.0 : max(_1977, 0.0))) * _1222))) + ((_2990 + ((isnan(0.0) ? _2268 : (isnan(_2268) ? 0.0 : max(_2268, 0.0))) * _2056)) * cbPerFrame._m0[3u].x);
    float _3012 = ((isnan(1.0) ? _5041 : (isnan(_5041) ? 1.0 : min(_5041, 1.0))) * (_2986 + ((isnan(0.0) ? _1980 : (isnan(_1980) ? 0.0 : max(_1980, 0.0))) * _1222))) + ((_2992 + ((isnan(0.0) ? _2271 : (isnan(_2271) ? 0.0 : max(_2271, 0.0))) * _2056)) * cbPerFrame._m0[3u].x);
    float _3013 = ((isnan(1.0) ? _5052 : (isnan(_5052) ? 1.0 : min(_5052, 1.0))) * (_2988 + ((isnan(0.0) ? _1983 : (isnan(_1983) ? 0.0 : max(_1983, 0.0))) * _1222))) + ((_2994 + ((isnan(0.0) ? _2274 : (isnan(_2274) ? 0.0 : max(_2274, 0.0))) * _2056)) * cbPerFrame._m0[3u].x);
    uint _3014 = _291 + 6u;
    float _3022 = _1159 / cbSceneParam._m0[86u].x;
    float _3023 = _1160 / cbSceneParam._m0[86u].y;
    vec4 _3037 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3022, _3023, (log2((isnan(cbSceneParam._m0[77u].w) ? _1081 : (isnan(_1081) ? cbSceneParam._m0[77u].w : min(_1081, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3039 = _3037.x;
    float _3040 = _3037.y;
    float _3041 = _3037.z;
    float _3042 = _3037.w;
    float _3134;
    float _3136;
    float _3138;
    float _3140;
    if (_1081 > cbSceneParam._m0[78u].w)
    {
        float _3097 = isnan(_1081) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _1081 : min(cbSceneParam._m0[80u].w, _1081));
        float _3098 = _3097 / _1081;
        float _3109 = _3098 * _1132;
        float _3110 = _1133 * _3098;
        float _3111 = (-0.0) - _3110;
        float _3112 = _3098 * _1134;
        float _3114 = (cbSceneParam._m0[77u].w * _3111) / _3097;
        float _3115 = _3114 + cbSceneParam._m0[79u].w;
        float _3116 = cbSceneParam._m0[79u].w - _3110;
        float _3122 = sqrt(((_3109 * _3109) + (_3110 * _3110)) + (_3112 * _3112));
        float _3125 = (1.0 - (cbSceneParam._m0[77u].w / _3097)) * _3122;
        float _3130 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3132 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3309;
        if (abs((_3111 - _3114) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3309 = ((((_3115 > 0.0) ? exp2(_3130 * _3115) : (2.0 - exp2(_3132 * _3115))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3125;
        }
        else
        {
            float _3253 = 1.0 / cbSceneParam._m0[80u].x;
            float _3254 = isnan(_3116) ? _3115 : (isnan(_3115) ? _3116 : max(_3115, _3116));
            float _3255 = isnan(_3116) ? _3115 : (isnan(_3115) ? _3116 : min(_3115, _3116));
            float _3264 = isnan(0.0) ? _3254 : (isnan(_3254) ? 0.0 : min(_3254, 0.0));
            float _3265 = isnan(0.0) ? _3255 : (isnan(_3255) ? 0.0 : min(_3255, 0.0));
            _3309 = ((abs(_3122 / _3111) * cbSceneParam._m0[80u].y) * ((((_3264 - _3265) * 2.0) - ((exp2(_3130 * (isnan(0.0) ? _3254 : (isnan(_3254) ? 0.0 : max(_3254, 0.0)))) - exp2(_3130 * (isnan(0.0) ? _3255 : (isnan(_3255) ? 0.0 : max(_3255, 0.0))))) * _3253)) - ((exp2(_3132 * _3264) - exp2(_3132 * _3265)) * _3253))) + (_3125 * cbSceneParam._m0[80u].z);
        }
        vec4 _3311 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3022, _3023, 1.0), 0.0);
        float _3320 = exp2((_3309 * (-1.44269502162933349609375)) * (1.0 - _3311.w));
        float _3321 = log2(_3320);
        float _3337 = log2(_3042);
        _3134 = (exp2(_3337 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3321 * cbSceneParam._m0[78u].x)) * _3311.x) / cbSceneParam._m0[78u].x)) + _3039;
        _3136 = (exp2(_3337 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3321 * cbSceneParam._m0[78u].y)) * _3311.y) / cbSceneParam._m0[78u].y)) + _3040;
        _3138 = (exp2(_3337 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3321 * cbSceneParam._m0[78u].z)) * _3311.z) / cbSceneParam._m0[78u].z)) + _3041;
        _3140 = _3320 * _3042;
    }
    else
    {
        _3134 = _3039;
        _3136 = _3040;
        _3138 = _3041;
        _3140 = _3042;
    }
    bool _3347;
    vec4 _3150;
    vec4 _3172;
    float _3174;
    float _3178;
    float _3179;
    float _3180;
    float _3181;
    bool _3191;
    for (;;)
    {
        _3150 = cbMatDynParam._m0[0u];
        float _3152 = roundEven(_3150.y);
        bool _3153 = _3152 == 3.0;
        float _3154 = log2(_3140);
        float _3161 = exp2(_3154 * cbSceneParam._m0[78u].x) * _3011;
        float _3162 = exp2(_3154 * cbSceneParam._m0[78u].y) * _3012;
        float _3163 = exp2(_3154 * cbSceneParam._m0[78u].z) * _3013;
        float _3170 = _1148 + (-0.5);
        _3172 = cbMtdParam._m0[1u];
        _3174 = _3172.y * _3170;
        float _3177 = (_3152 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3178 = _3177 * (_3153 ? _3161 : (_3161 + (cbSceneParam._m0[72u].w * _3134)));
        _3179 = _3177 * (_3153 ? _3162 : (_3162 + (cbSceneParam._m0[72u].w * _3136)));
        _3180 = _3177 * (_3153 ? _3163 : (_3163 + (cbSceneParam._m0[72u].w * _3138)));
        _3181 = _3170 * 0.999000012874603271484375;
        _3191 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3191)
        {
            if ((cbInstanceData._m0[_291 + 7u].x + _3181) < 0.5)
            {
                _3347 = true;
                break;
            }
        }
        uint _3288 = _1197 + uint(_3150.w);
        if ((cbInstanceData._m0[_3288].w < 1.0) && ((cbInstanceData._m0[_3288].w + _3181) < 0.5))
        {
            _3347 = true;
            break;
        }
        if ((_3174 + 1.0) < _3172.x)
        {
            _3347 = true;
            break;
        }
        _3347 = false;
        break;
    }
    float _3552;
    if (_3347)
    {
        discard_state = true;
        _3552 = 0.0;
    }
    else
    {
        _3552 = cbInstanceData._m0[_3014].w;
    }
    SV_Target.x = _3178;
    SV_Target.y = _3179;
    SV_Target.z = _3180;
    SV_Target.w = _3552;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_3014].w;
    discard_exit();
}


