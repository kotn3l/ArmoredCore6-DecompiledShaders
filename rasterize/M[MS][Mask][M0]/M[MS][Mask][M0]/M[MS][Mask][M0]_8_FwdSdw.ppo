#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 13) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_22;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_29;
layout(set = 0, binding = 20) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_6;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1227;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _226 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _227 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _228 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _234 = inversesqrt(dot(vec3(_226, _227, _228), vec3(_226, _227, _228)));
    float _241 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _248 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _260 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _262 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _263 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3818 = isnan(0.0) ? _260 : (isnan(_260) ? 0.0 : max(_260, 0.0));
    float _3829 = isnan(0.0) ? _262 : (isnan(_262) ? 0.0 : max(_262, 0.0));
    float _3840 = isnan(0.0) ? _263 : (isnan(_263) ? 0.0 : max(_263, 0.0));
    uint _273 = uint(roundEven(NORMAL.w)) * 13u;
    uint _278 = _273 + 1u;
    uint _282 = _273 + 2u;
    float _291 = sqrt(((cbInstanceData._m0[_278].x * cbInstanceData._m0[_278].x) + (cbInstanceData._m0[_273].x * cbInstanceData._m0[_273].x)) + (cbInstanceData._m0[_282].x * cbInstanceData._m0[_282].x));
    float _292 = _291 * TEXCOORD.z;
    float _293 = _291 * TEXCOORD.w;
    vec4 _306 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _292) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _293) + cbTextureTilingScale._m0[13u].w));
    vec4 _330 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _335 = _330.x * cbMtdParam._m0[11u].x;
    float _336 = _330.y * cbMtdParam._m0[11u].y;
    float _337 = _330.z * cbMtdParam._m0[11u].z;
    vec4 _356 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _292) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _293) + cbTextureTilingScale._m0[5u].w));
    vec4 _407 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _409 = _407.x;
    float _421 = dot(vec4(_409, _407.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _438 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w)).x) * 2.0) - ((((_409 - _421) * cbMtdParam._m0[24u].z) + _421) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3851 = isnan(0.0) ? _438 : (isnan(_438) ? 0.0 : max(_438, 0.0));
    float _439 = isnan(1.0) ? _3851 : (isnan(_3851) ? 1.0 : min(_3851, 1.0));
    float _446 = (_439 * ((_356.x * cbMtdParam._m0[12u].x) - _335)) + _335;
    float _447 = (_439 * ((_356.y * cbMtdParam._m0[12u].y) - _336)) + _336;
    float _448 = (_439 * ((_356.z * cbMtdParam._m0[12u].z) - _337)) + _337;
    float _452 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _306.x) * _446;
    float _455 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _306.y) * _447;
    float _458 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _306.z) * _448;
    float _465 = ((_446 - _452) * (isnan(1.0) ? _3818 : (isnan(_3818) ? 1.0 : min(_3818, 1.0)))) + _452;
    float _466 = ((_447 - _455) * (isnan(1.0) ? _3829 : (isnan(_3829) ? 1.0 : min(_3829, 1.0)))) + _455;
    float _467 = ((_448 - _458) * (isnan(1.0) ? _3840 : (isnan(_3840) ? 1.0 : min(_3840, 1.0)))) + _458;
    vec4 _480 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _292) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _293) + cbTextureTilingScale._m0[20u].w));
    vec4 _505 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _292) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _293) + cbTextureTilingScale._m0[4u].w));
    vec4 _522 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _524 = _522.x;
    float _525 = _522.y;
    float _526 = _522.z;
    float _535 = ((_505.z - _526) * _439) + _526;
    float _538 = ((((_505.x - _524) * _439) + _524) * 2.0) + (-1.0);
    float _539 = ((((_505.y - _525) * _439) + _525) * 2.0) + (-1.0);
    float _540 = dot(vec2(_538, _539), vec2(_538, _539));
    float _3862 = isnan(0.0) ? _540 : (isnan(_540) ? 0.0 : max(_540, 0.0));
    float _545 = sqrt(1.0 - (isnan(1.0) ? _3862 : (isnan(_3862) ? 1.0 : min(_3862, 1.0))));
    vec4 _567 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _579 = (_538 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_480.x * 2.0) + (-1.0)))) + (((_567.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _580 = (_539 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_480.y * 2.0) + (-1.0)))) + (((_567.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    vec4 _592 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _292) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _293) + cbTextureTilingScale._m0[19u].w));
    float _594 = _592.x;
    float _595 = 1.0 - _594;
    float _621 = (TEXCOORD_8.x - ((cbMtdParam._m0[22u].w * (1.0 - TEXCOORD_8.x)) * ((((_594 - _595) * cbMtdParam._m0[24u].y) + _595) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3873 = isnan(0.0) ? _621 : (isnan(_621) ? 0.0 : max(_621, 0.0));
    float _622 = isnan(1.0) ? _3873 : (isnan(_3873) ? 1.0 : min(_3873, 1.0));
    float _630 = ((((cbMtdParam._m0[10u].x - _465) * TEXCOORD_8.x) * cbMtdParam._m0[23u].w) * _622) + _465;
    float _631 = ((((cbMtdParam._m0[10u].y - _466) * TEXCOORD_8.y) * cbMtdParam._m0[23u].w) * _622) + _466;
    float _632 = (((cbMtdParam._m0[23u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _467)) * _622) + _467;
    float _637 = (((_480.z - _535) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _535;
    float _641 = ((_567.z - _637) * cbMtdParam._m0[19u].w) + _637;
    float _645 = ((cbMtdParam._m0[23u].y - _641) * _622) + _641;
    vec4 _664 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _292) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _293) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _670 = (_664.x * 2.0) + (-1.0);
    float _671 = (_664.y * 2.0) + (-1.0);
    float _672 = dot(vec2(_670, _671), vec2(_670, _671));
    float _3884 = isnan(0.0) ? _672 : (isnan(_672) ? 0.0 : max(_672, 0.0));
    float _688 = (_622 * (((cbMtdParam._m0[22u].z * _579) - _579) + _670)) + _579;
    float _689 = (_622 * (((cbMtdParam._m0[22u].z * _580) - _580) + _671)) + _580;
    float _690 = (_622 * (sqrt(1.0 - (isnan(1.0) ? _3884 : (isnan(_3884) ? 1.0 : min(_3884, 1.0)))) - _545)) + _545;
    float _692 = cbMtdParam._m0[22u].x + _567.w;
    float _695 = fma(_690, _241 * NORMAL.x, fma(_689, _248 * TANGENT.x, (_234 * _226) * _688));
    float _698 = fma(_690, _241 * NORMAL.y, fma(_689, _248 * TANGENT.y, (_234 * _227) * _688));
    float _701 = fma(_690, _241 * NORMAL.z, fma(_689, _248 * TANGENT.z, (_234 * _228) * _688));
    float _705 = inversesqrt(dot(vec3(_695, _698, _701), vec3(_695, _698, _701)));
    float _706 = _705 * _695;
    float _707 = _705 * _698;
    float _708 = _705 * _701;
    float _3895 = isnan(0.0) ? _645 : (isnan(_645) ? 0.0 : max(_645, 0.0));
    float _709 = isnan(1.0) ? _3895 : (isnan(_3895) ? 1.0 : min(_3895, 1.0));
    float _3906 = isnan(0.0) ? _692 : (isnan(_692) ? 0.0 : max(_692, 0.0));
    float _3917 = isnan(0.0) ? _630 : (isnan(_630) ? 0.0 : max(_630, 0.0));
    float _3928 = isnan(0.0) ? _631 : (isnan(_631) ? 0.0 : max(_631, 0.0));
    float _3939 = isnan(0.0) ? _632 : (isnan(_632) ? 0.0 : max(_632, 0.0));
    float _727 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _768 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _778 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _768);
    float _779 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _768);
    float _780 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _768);
    float _784 = inversesqrt(dot(vec3(_778, _779, _780), vec3(_778, _779, _780)));
    float _785 = _778 * _784;
    float _786 = _779 * _784;
    float _787 = _780 * _784;
    float _793 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _794 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _812 = fma(_708, cbSceneParam._m0[5u].z, fma(_707, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _706));
    float _815 = fma(_708, cbSceneParam._m0[6u].z, fma(_707, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _706));
    float _818 = fma(_708, cbSceneParam._m0[7u].z, fma(_707, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _706));
    uint _832 = (_273 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _838 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3917 : (isnan(_3917) ? 1.0 : min(_3917, 1.0)))) * cbInstanceData._m0[_832].x;
    float _839 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3928 : (isnan(_3928) ? 1.0 : min(_3928, 1.0)))) * cbInstanceData._m0[_832].y;
    float _840 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3939 : (isnan(_3939) ? 1.0 : min(_3939, 1.0)))) * cbInstanceData._m0[_832].z;
    float _3950 = isnan(0.0) ? _838 : (isnan(_838) ? 0.0 : max(_838, 0.0));
    float _841 = isnan(1.0) ? _3950 : (isnan(_3950) ? 1.0 : min(_3950, 1.0));
    float _3961 = isnan(0.0) ? _839 : (isnan(_839) ? 0.0 : max(_839, 0.0));
    float _842 = isnan(1.0) ? _3961 : (isnan(_3961) ? 1.0 : min(_3961, 1.0));
    float _3972 = isnan(0.0) ? _840 : (isnan(_840) ? 0.0 : max(_840, 0.0));
    float _843 = isnan(1.0) ? _3972 : (isnan(_3972) ? 1.0 : min(_3972, 1.0));
    vec4 _852 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _793, cbSceneParam._m0[86u].y * _794));
    float _856 = ((isnan(1.0) ? _3906 : (isnan(_3906) ? 1.0 : min(_3906, 1.0))) * TEXCOORD_5.w) * _852.x;
    float _857 = dot(vec3(_706, _707, _708), vec3(_785, _786, _787));
    float _860 = _857 * 2.0;
    float _864 = (_860 * _706) - _785;
    float _865 = (_860 * _707) - _786;
    float _866 = (_860 * _708) - _787;
    float _870 = abs(dot(vec3(_785, _786, _787), vec3(_706, _707, _708)));
    float _3983 = isnan(0.0) ? _870 : (isnan(_870) ? 0.0 : max(_870, 0.0));
    float _872 = sqrt(_709);
    float _885 = exp2((_872 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3983 : (isnan(_3983) ? 1.0 : min(_3983, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_872 * 3.0));
    float _917 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _921 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _925 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1226;
    float _1228;
    float _1229;
    float _1230;
    float _1231;
    float _1232;
    float _1233;
    float _1234;
    float _1235;
    float _1236;
    float _1237;
    float _1238;
    float _1239;
    float _1240;
    float _1241;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _951 = fma(_925, cbModelParam._m0[26u].z, fma(_921, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _917));
        float _955 = fma(_925, cbModelParam._m0[27u].z, fma(_921, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _917));
        float _959 = fma(_925, cbModelParam._m0[28u].z, fma(_921, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _917));
        float _984 = _917 + _706;
        float _985 = _921 + _707;
        float _986 = _925 + _708;
        float _996 = fma(_986, cbModelParam._m0[26u].z, fma(_985, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _984)) - _951;
        float _997 = fma(_986, cbModelParam._m0[27u].z, fma(_985, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _984)) - _955;
        float _998 = fma(_986, cbModelParam._m0[28u].z, fma(_985, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _984)) - _959;
        float _1002 = inversesqrt(dot(vec3(_996, _997, _998), vec3(_996, _997, _998)));
        float _1015 = ((_1002 * _996) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_951 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1016 = ((_1002 * _997) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_955 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1017 = ((_1002 * _998) / cbModelParam._m0[34u].z) + ((((((_959 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1020 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1015, _1016, _1017), 0.0);
        vec4 _1027 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1015, _1016, _1017), 0.0);
        vec4 _1034 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1015, _1016, _1017), 0.0);
        vec4 _1041 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1015, _1016, _1017), 0.0);
        float _1054 = exp2((_1020.w + (-0.5)) * 20.0) * 2.0;
        float _1055 = _1054 * (_1020.x + (-0.5));
        float _1056 = _1054 * (_1020.y + (-0.5));
        float _1057 = _1054 * (_1020.z + (-0.5));
        float _1064 = exp2((_1027.w + (-0.5)) * 20.0) * 2.0;
        float _1065 = _1064 * (_1027.x + (-0.5));
        float _1066 = _1064 * (_1027.y + (-0.5));
        float _1067 = _1064 * (_1027.z + (-0.5));
        float _1074 = exp2((_1034.w + (-0.5)) * 20.0) * 2.0;
        float _1075 = _1074 * (_1034.x + (-0.5));
        float _1076 = _1074 * (_1034.y + (-0.5));
        float _1077 = _1074 * (_1034.z + (-0.5));
        float _1084 = exp2((_1041.w + (-0.5)) * 20.0) * 2.0;
        float _1085 = _1084 * (_1041.x + (-0.5));
        float _1086 = _1084 * (_1041.y + (-0.5));
        float _1087 = _1084 * (_1041.z + (-0.5));
        float _1088 = isnan(0.0) ? _1085 : (isnan(_1085) ? 0.0 : max(_1085, 0.0));
        float _1089 = isnan(0.0) ? _1086 : (isnan(_1086) ? 0.0 : max(_1086, 0.0));
        float _1090 = isnan(0.0) ? _1087 : (isnan(_1087) ? 0.0 : max(_1087, 0.0));
        float _1091 = _1055 * 0.5;
        float _1092 = _1065 * 0.5;
        float _1093 = _1075 * 0.5;
        float _1094 = dot(vec3(_1091, _1092, _1093), vec3(_1091, _1092, _1093));
        float _1099 = (_1094 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1094);
        float _1108 = (dot(vec3(_706, _707, _708), vec3(_1099 * _1091, _1099 * _1092, _1099 * _1093)) + 1.0) * 0.5;
        float _4009 = isnan(0.0) ? _1108 : (isnan(_1108) ? 0.0 : max(_1108, 0.0));
        float _1118 = sqrt(((_1092 * _1092) + (_1091 * _1091)) + (_1093 * _1093)) / (_1088 + 9.9999997473787516355514526367188e-06);
        float _4020 = isnan(0.0) ? _1118 : (isnan(_1118) ? 0.0 : max(_1118, 0.0));
        float _1119 = isnan(1.0) ? _4020 : (isnan(_4020) ? 1.0 : min(_4020, 1.0));
        float _1120 = _1119 * 2.0;
        float _1124 = (1.0 - _1119) / (_1119 + 1.0);
        float _4031 = isnan(0.0) ? _1124 : (isnan(_1124) ? 0.0 : max(_1124, 0.0));
        float _1125 = isnan(1.0) ? _4031 : (isnan(_4031) ? 1.0 : min(_4031, 1.0));
        float _1134 = ((((1.0 - _1125) * (_1120 + 2.0)) * exp2(log2(isnan(1.0) ? _4009 : (isnan(_4009) ? 1.0 : min(_4009, 1.0))) * (_1120 + 1.0))) + _1125) * _1088;
        float _1135 = _1056 * 0.5;
        float _1136 = _1066 * 0.5;
        float _1137 = _1076 * 0.5;
        float _1138 = dot(vec3(_1135, _1136, _1137), vec3(_1135, _1136, _1137));
        float _1143 = (_1138 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1138);
        float _1151 = (dot(vec3(_706, _707, _708), vec3(_1143 * _1135, _1143 * _1136, _1143 * _1137)) + 1.0) * 0.5;
        float _4042 = isnan(0.0) ? _1151 : (isnan(_1151) ? 0.0 : max(_1151, 0.0));
        float _1160 = sqrt(((_1136 * _1136) + (_1135 * _1135)) + (_1137 * _1137)) / (_1089 + 9.9999997473787516355514526367188e-06);
        float _4053 = isnan(0.0) ? _1160 : (isnan(_1160) ? 0.0 : max(_1160, 0.0));
        float _1161 = isnan(1.0) ? _4053 : (isnan(_4053) ? 1.0 : min(_4053, 1.0));
        float _1162 = _1161 * 2.0;
        float _1166 = (1.0 - _1161) / (_1161 + 1.0);
        float _4064 = isnan(0.0) ? _1166 : (isnan(_1166) ? 0.0 : max(_1166, 0.0));
        float _1167 = isnan(1.0) ? _4064 : (isnan(_4064) ? 1.0 : min(_4064, 1.0));
        float _1176 = ((((1.0 - _1167) * (_1162 + 2.0)) * exp2(log2(isnan(1.0) ? _4042 : (isnan(_4042) ? 1.0 : min(_4042, 1.0))) * (_1162 + 1.0))) + _1167) * _1089;
        float _1177 = _1057 * 0.5;
        float _1178 = _1067 * 0.5;
        float _1179 = _1077 * 0.5;
        float _1180 = dot(vec3(_1177, _1178, _1179), vec3(_1177, _1178, _1179));
        float _1185 = (_1180 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1180);
        float _1193 = (dot(vec3(_706, _707, _708), vec3(_1185 * _1177, _1185 * _1178, _1185 * _1179)) + 1.0) * 0.5;
        float _4075 = isnan(0.0) ? _1193 : (isnan(_1193) ? 0.0 : max(_1193, 0.0));
        float _1202 = sqrt(((_1178 * _1178) + (_1177 * _1177)) + (_1179 * _1179)) / (_1090 + 9.9999997473787516355514526367188e-06);
        float _4086 = isnan(0.0) ? _1202 : (isnan(_1202) ? 0.0 : max(_1202, 0.0));
        float _1203 = isnan(1.0) ? _4086 : (isnan(_4086) ? 1.0 : min(_4086, 1.0));
        float _1204 = _1203 * 2.0;
        float _1208 = (1.0 - _1203) / (_1203 + 1.0);
        float _4097 = isnan(0.0) ? _1208 : (isnan(_1208) ? 0.0 : max(_1208, 0.0));
        float _1209 = isnan(1.0) ? _4097 : (isnan(_4097) ? 1.0 : min(_4097, 1.0));
        float _1218 = ((((1.0 - _1209) * (_1204 + 2.0)) * exp2(log2(isnan(1.0) ? _4075 : (isnan(_4075) ? 1.0 : min(_4075, 1.0))) * (_1204 + 1.0))) + _1209) * _1090;
        _1226 = _1057;
        _1228 = _1056;
        _1229 = _1055;
        _1230 = _1067;
        _1231 = _1066;
        _1232 = _1065;
        _1233 = _1077;
        _1234 = _1076;
        _1235 = _1075;
        _1236 = _1090;
        _1237 = _1089;
        _1238 = _1088;
        _1239 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1134 : (isnan(_1134) ? 0.0 : max(_1134, 0.0)));
        _1240 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1176 : (isnan(_1176) ? 0.0 : max(_1176, 0.0)));
        _1241 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1218 : (isnan(_1218) ? 0.0 : max(_1218, 0.0)));
    }
    else
    {
        _1226 = _1227;
        _1228 = _1227;
        _1229 = _1227;
        _1230 = _1227;
        _1231 = _1227;
        _1232 = _1227;
        _1233 = _1227;
        _1234 = _1227;
        _1235 = _1227;
        _1236 = _1227;
        _1237 = _1227;
        _1238 = _1227;
        _1239 = 0.0;
        _1240 = 0.0;
        _1241 = 0.0;
    }
    float _1535;
    float _1536;
    float _1537;
    float _1538;
    float _1539;
    float _1540;
    float _1541;
    float _1542;
    float _1543;
    float _1544;
    float _1545;
    float _1546;
    float _1547;
    float _1548;
    float _1549;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1266 = fma(_925, cbModelParam._m0[30u].z, fma(_921, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _917));
        float _1270 = fma(_925, cbModelParam._m0[31u].z, fma(_921, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _917));
        float _1274 = fma(_925, cbModelParam._m0[32u].z, fma(_921, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _917));
        float _1297 = _917 + _706;
        float _1298 = _921 + _707;
        float _1299 = _925 + _708;
        float _1309 = fma(_1299, cbModelParam._m0[30u].z, fma(_1298, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1297)) - _1266;
        float _1310 = fma(_1299, cbModelParam._m0[31u].z, fma(_1298, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1297)) - _1270;
        float _1311 = fma(_1299, cbModelParam._m0[32u].z, fma(_1298, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1297)) - _1274;
        float _1315 = inversesqrt(dot(vec3(_1309, _1310, _1311), vec3(_1309, _1310, _1311)));
        float _1328 = ((_1315 * _1309) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1266 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1329 = ((_1315 * _1310) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1270 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1330 = ((_1315 * _1311) / cbModelParam._m0[35u].z) + ((((((_1274 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1332 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1328, _1329, _1330), 0.0);
        vec4 _1339 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1328, _1329, _1330), 0.0);
        vec4 _1346 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1328, _1329, _1330), 0.0);
        vec4 _1353 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1328, _1329, _1330), 0.0);
        float _1365 = exp2((_1332.w + (-0.5)) * 20.0) * 2.0;
        float _1366 = _1365 * (_1332.x + (-0.5));
        float _1367 = _1365 * (_1332.y + (-0.5));
        float _1368 = _1365 * (_1332.z + (-0.5));
        float _1375 = exp2((_1339.w + (-0.5)) * 20.0) * 2.0;
        float _1376 = _1375 * (_1339.x + (-0.5));
        float _1377 = _1375 * (_1339.y + (-0.5));
        float _1378 = _1375 * (_1339.z + (-0.5));
        float _1385 = exp2((_1346.w + (-0.5)) * 20.0) * 2.0;
        float _1386 = _1385 * (_1346.x + (-0.5));
        float _1387 = _1385 * (_1346.y + (-0.5));
        float _1388 = _1385 * (_1346.z + (-0.5));
        float _1395 = exp2((_1353.w + (-0.5)) * 20.0) * 2.0;
        float _1396 = _1395 * (_1353.x + (-0.5));
        float _1397 = _1395 * (_1353.y + (-0.5));
        float _1398 = _1395 * (_1353.z + (-0.5));
        float _1399 = isnan(0.0) ? _1396 : (isnan(_1396) ? 0.0 : max(_1396, 0.0));
        float _1400 = isnan(0.0) ? _1397 : (isnan(_1397) ? 0.0 : max(_1397, 0.0));
        float _1401 = isnan(0.0) ? _1398 : (isnan(_1398) ? 0.0 : max(_1398, 0.0));
        float _1402 = _1366 * 0.5;
        float _1403 = _1376 * 0.5;
        float _1404 = _1386 * 0.5;
        float _1405 = dot(vec3(_1402, _1403, _1404), vec3(_1402, _1403, _1404));
        float _1410 = (_1405 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1405);
        float _1418 = (dot(vec3(_706, _707, _708), vec3(_1410 * _1402, _1410 * _1403, _1410 * _1404)) + 1.0) * 0.5;
        float _4138 = isnan(0.0) ? _1418 : (isnan(_1418) ? 0.0 : max(_1418, 0.0));
        float _1427 = sqrt(((_1403 * _1403) + (_1402 * _1402)) + (_1404 * _1404)) / (_1399 + 9.9999997473787516355514526367188e-06);
        float _4149 = isnan(0.0) ? _1427 : (isnan(_1427) ? 0.0 : max(_1427, 0.0));
        float _1428 = isnan(1.0) ? _4149 : (isnan(_4149) ? 1.0 : min(_4149, 1.0));
        float _1429 = _1428 * 2.0;
        float _1433 = (1.0 - _1428) / (_1428 + 1.0);
        float _4160 = isnan(0.0) ? _1433 : (isnan(_1433) ? 0.0 : max(_1433, 0.0));
        float _1434 = isnan(1.0) ? _4160 : (isnan(_4160) ? 1.0 : min(_4160, 1.0));
        float _1443 = ((((1.0 - _1434) * (_1429 + 2.0)) * exp2(log2(isnan(1.0) ? _4138 : (isnan(_4138) ? 1.0 : min(_4138, 1.0))) * (_1429 + 1.0))) + _1434) * _1399;
        float _1444 = _1367 * 0.5;
        float _1445 = _1377 * 0.5;
        float _1446 = _1387 * 0.5;
        float _1447 = dot(vec3(_1444, _1445, _1446), vec3(_1444, _1445, _1446));
        float _1452 = (_1447 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1447);
        float _1460 = (dot(vec3(_706, _707, _708), vec3(_1452 * _1444, _1452 * _1445, _1452 * _1446)) + 1.0) * 0.5;
        float _4171 = isnan(0.0) ? _1460 : (isnan(_1460) ? 0.0 : max(_1460, 0.0));
        float _1469 = sqrt(((_1445 * _1445) + (_1444 * _1444)) + (_1446 * _1446)) / (_1400 + 9.9999997473787516355514526367188e-06);
        float _4182 = isnan(0.0) ? _1469 : (isnan(_1469) ? 0.0 : max(_1469, 0.0));
        float _1470 = isnan(1.0) ? _4182 : (isnan(_4182) ? 1.0 : min(_4182, 1.0));
        float _1471 = _1470 * 2.0;
        float _1475 = (1.0 - _1470) / (_1470 + 1.0);
        float _4193 = isnan(0.0) ? _1475 : (isnan(_1475) ? 0.0 : max(_1475, 0.0));
        float _1476 = isnan(1.0) ? _4193 : (isnan(_4193) ? 1.0 : min(_4193, 1.0));
        float _1485 = ((((1.0 - _1476) * (_1471 + 2.0)) * exp2(log2(isnan(1.0) ? _4171 : (isnan(_4171) ? 1.0 : min(_4171, 1.0))) * (_1471 + 1.0))) + _1476) * _1400;
        float _1486 = _1368 * 0.5;
        float _1487 = _1378 * 0.5;
        float _1488 = _1388 * 0.5;
        float _1489 = dot(vec3(_1486, _1487, _1488), vec3(_1486, _1487, _1488));
        float _1494 = (_1489 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1489);
        float _1502 = (dot(vec3(_706, _707, _708), vec3(_1494 * _1486, _1494 * _1487, _1494 * _1488)) + 1.0) * 0.5;
        float _4204 = isnan(0.0) ? _1502 : (isnan(_1502) ? 0.0 : max(_1502, 0.0));
        float _1511 = sqrt(((_1487 * _1487) + (_1486 * _1486)) + (_1488 * _1488)) / (_1401 + 9.9999997473787516355514526367188e-06);
        float _4215 = isnan(0.0) ? _1511 : (isnan(_1511) ? 0.0 : max(_1511, 0.0));
        float _1512 = isnan(1.0) ? _4215 : (isnan(_4215) ? 1.0 : min(_4215, 1.0));
        float _1513 = _1512 * 2.0;
        float _1517 = (1.0 - _1512) / (_1512 + 1.0);
        float _4226 = isnan(0.0) ? _1517 : (isnan(_1517) ? 0.0 : max(_1517, 0.0));
        float _1518 = isnan(1.0) ? _4226 : (isnan(_4226) ? 1.0 : min(_4226, 1.0));
        float _1527 = ((((1.0 - _1518) * (_1513 + 2.0)) * exp2(log2(isnan(1.0) ? _4204 : (isnan(_4204) ? 1.0 : min(_4204, 1.0))) * (_1513 + 1.0))) + _1518) * _1401;
        _1535 = _1368;
        _1536 = _1367;
        _1537 = _1366;
        _1538 = _1378;
        _1539 = _1377;
        _1540 = _1376;
        _1541 = _1388;
        _1542 = _1387;
        _1543 = _1386;
        _1544 = _1401;
        _1545 = _1400;
        _1546 = _1399;
        _1547 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1443 : (isnan(_1443) ? 0.0 : max(_1443, 0.0)));
        _1548 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1485 : (isnan(_1485) ? 0.0 : max(_1485, 0.0)));
        _1549 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1527 : (isnan(_1527) ? 0.0 : max(_1527, 0.0)));
    }
    else
    {
        _1535 = _1227;
        _1536 = _1227;
        _1537 = _1227;
        _1538 = _1227;
        _1539 = _1227;
        _1540 = _1227;
        _1541 = _1227;
        _1542 = _1227;
        _1543 = _1227;
        _1544 = _1227;
        _1545 = _1227;
        _1546 = _1227;
        _1547 = 0.0;
        _1548 = 0.0;
        _1549 = 0.0;
    }
    float _1559 = (cbModelParam._m0[1u].x * (_1547 - _1239)) + _1239;
    float _1560 = (cbModelParam._m0[1u].x * (_1548 - _1240)) + _1240;
    float _1561 = (cbModelParam._m0[1u].x * (_1549 - _1241)) + _1241;
    float _1582 = fma(_1561, cbSceneParam._m0[89u].z, fma(_1560, cbSceneParam._m0[89u].y, _1559 * cbSceneParam._m0[89u].x));
    float _1585 = fma(_1561, cbSceneParam._m0[90u].z, fma(_1560, cbSceneParam._m0[90u].y, _1559 * cbSceneParam._m0[90u].x));
    float _1588 = fma(_1561, cbSceneParam._m0[91u].z, fma(_1560, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1559));
    float _1603 = _864 * 0.5;
    float _1604 = _865 * 0.5;
    float _1605 = _866 * 0.5;
    float _1606 = dot(vec4(_1603, _1604, _1605, 1.0), vec4(_1537, _1540, _1543, _1546));
    float _1609 = dot(vec4(_1603, _1604, _1605, 1.0), vec4(_1536, _1539, _1542, _1545));
    float _1612 = dot(vec4(_1603, _1604, _1605, 1.0), vec4(_1535, _1538, _1541, _1544));
    float _1646;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1619 = dot(vec4(_1603, _1604, _1605, 1.0), vec4(_1226, _1230, _1233, _1236));
        float _1623 = dot(vec4(_1603, _1604, _1605, 1.0), vec4(_1228, _1231, _1234, _1237));
        float _1627 = dot(vec4(_1603, _1604, _1605, 1.0), vec4(_1229, _1232, _1235, _1238));
        float _1634 = dot(vec4(cbModelParam._m0[39u]), vec4(_1603, _1604, _1605, 1.0));
        _1646 = dot(vec3(isnan(0.0) ? _1627 : (isnan(_1627) ? 0.0 : max(_1627, 0.0)), isnan(0.0) ? _1623 : (isnan(_1623) ? 0.0 : max(_1623, 0.0)), isnan(0.0) ? _1619 : (isnan(_1619) ? 0.0 : max(_1619, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1634) ? 0.0 : (isnan(0.0) ? _1634 : max(0.0, _1634))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1646 = 1.0;
    }
    float _1657;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1648 = dot(vec4(cbModelParam._m0[40u]), vec4(_1603, _1604, _1605, 1.0));
        _1657 = dot(vec3(isnan(0.0) ? _1606 : (isnan(_1606) ? 0.0 : max(_1606, 0.0)), isnan(0.0) ? _1609 : (isnan(_1609) ? 0.0 : max(_1609, 0.0)), isnan(0.0) ? _1612 : (isnan(_1612) ? 0.0 : max(_1612, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1648) ? 0.0 : (isnan(0.0) ? _1648 : max(0.0, _1648))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1657 = 1.0;
    }
    float _1661 = (_1657 * cbModelParam._m0[1u].x) + (_1646 * (1.0 - cbModelParam._m0[1u].x));
    float _1671 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _709);
    float _1672 = isnan(_1671) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1671 : min(cbModelParam._m0[25u].z, _1671));
    float _1754;
    float _1756;
    float _1758;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1721 = fma(_925, cbModelParam._m0[13u].z, fma(_921, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _917)) + cbModelParam._m0[13u].w;
        float _1725 = fma(_925, cbModelParam._m0[14u].z, fma(_921, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _917)) + cbModelParam._m0[14u].w;
        float _1729 = fma(_925, cbModelParam._m0[15u].z, fma(_921, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _917)) + cbModelParam._m0[15u].w;
        float _1732 = fma(_866, cbModelParam._m0[13u].z, fma(_865, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _864));
        float _1735 = fma(_866, cbModelParam._m0[14u].z, fma(_865, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _864));
        float _1738 = fma(_866, cbModelParam._m0[15u].z, fma(_865, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _864));
        float _1766;
        if (_1732 > 0.0)
        {
            _1766 = abs((1.0 - _1721) / _1732);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1732 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1721 + 1.0) / _1732);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1766 = frontier_phi_14_12_ladder;
        }
        float _1937;
        if (_1735 > 0.0)
        {
            _1937 = abs((1.0 - _1725) / _1735);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1735 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1725 + 1.0) / _1735);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1937 = frontier_phi_23_19_ladder;
        }
        float _2232;
        if (_1738 > 0.0)
        {
            _2232 = abs((1.0 - _1729) / _1738);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1738 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1729 + 1.0) / _1738);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2232 = frontier_phi_35_30_ladder;
        }
        float _2234 = isnan(_1937) ? _1766 : (isnan(_1766) ? _1937 : min(_1766, _1937));
        float _2235 = isnan(_2232) ? _2234 : (isnan(_2234) ? _2232 : min(_2234, _2232));
        float _2239 = (_2235 * _1732) + _1721;
        float _2240 = (_2235 * _1735) + _1725;
        float _2241 = (_2235 * _1738) + _1729;
        float _2242 = _2235 * 9.9999997473787516355514526367188e-05;
        float _2244 = (-1.0) - _2242;
        float _2246 = _2242 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2241 > _2246) || ((_2241 < _2244) || ((_2240 > _2246) || ((_2240 < _2244) || ((_2239 < _2244) || (_2239 > _2246))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2386 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2241, cbModelParam._m0[9u].z, fma(_2240, cbModelParam._m0[9u].y, _2239 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2241, cbModelParam._m0[10u].z, fma(_2240, cbModelParam._m0[10u].y, _2239 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2241, cbModelParam._m0[11u].z, fma(_2240, cbModelParam._m0[11u].y, _2239 * cbModelParam._m0[11u].x))), _1672);
            frontier_phi_13_35_ladder = _2386.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2386.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2386.x * cbModelParam._m0[1u].y;
        }
        _1754 = frontier_phi_13_35_ladder_2;
        _1756 = frontier_phi_13_35_ladder_1;
        _1758 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1742 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_864, _865, _866), _1672);
        _1754 = _1742.x * cbModelParam._m0[1u].y;
        _1756 = _1742.y * cbModelParam._m0[1u].y;
        _1758 = _1742.z * cbModelParam._m0[1u].y;
    }
    float _1762 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _709);
    float _1763 = isnan(_1762) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1762 : min(cbModelParam._m0[25u].w, _1762));
    float _1854;
    float _1856;
    float _1858;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1818 = fma(_925, cbModelParam._m0[21u].z, fma(_921, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _917)) + cbModelParam._m0[21u].w;
        float _1822 = fma(_925, cbModelParam._m0[22u].z, fma(_921, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _917)) + cbModelParam._m0[22u].w;
        float _1826 = fma(_925, cbModelParam._m0[23u].z, fma(_921, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _917)) + cbModelParam._m0[23u].w;
        float _1829 = fma(_866, cbModelParam._m0[21u].z, fma(_865, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _864));
        float _1832 = fma(_866, cbModelParam._m0[22u].z, fma(_865, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _864));
        float _1835 = fma(_866, cbModelParam._m0[23u].z, fma(_865, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _864));
        float _1942;
        if (_1829 > 0.0)
        {
            _1942 = abs((1.0 - _1818) / _1829);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1829 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1818 + 1.0) / _1829);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1942 = frontier_phi_25_21_ladder;
        }
        float _2259;
        if (_1832 > 0.0)
        {
            _2259 = abs((1.0 - _1822) / _1832);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1832 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1822 + 1.0) / _1832);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2259 = frontier_phi_37_32_ladder;
        }
        float _2586;
        if (_1835 > 0.0)
        {
            _2586 = abs((1.0 - _1826) / _1835);
        }
        else
        {
            float frontier_phi_47_44_ladder;
            if (_1835 < 0.0)
            {
                frontier_phi_47_44_ladder = abs((_1826 + 1.0) / _1835);
            }
            else
            {
                frontier_phi_47_44_ladder = 5000.0;
            }
            _2586 = frontier_phi_47_44_ladder;
        }
        float _2588 = isnan(_2259) ? _1942 : (isnan(_1942) ? _2259 : min(_1942, _2259));
        float _2589 = isnan(_2586) ? _2588 : (isnan(_2588) ? _2586 : min(_2588, _2586));
        float _2593 = (_2589 * _1829) + _1818;
        float _2594 = (_2589 * _1832) + _1822;
        float _2595 = (_2589 * _1835) + _1826;
        float _2596 = _2589 * 9.9999997473787516355514526367188e-05;
        float _2597 = (-1.0) - _2596;
        float _2599 = _2596 + 1.0;
        float frontier_phi_22_47_ladder;
        float frontier_phi_22_47_ladder_1;
        float frontier_phi_22_47_ladder_2;
        if ((_2595 > _2599) || ((_2595 < _2597) || ((_2594 > _2599) || ((_2594 < _2597) || ((_2593 < _2597) || (_2593 > _2599))))))
        {
            frontier_phi_22_47_ladder = 0.0;
            frontier_phi_22_47_ladder_1 = 0.0;
            frontier_phi_22_47_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2713 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2595, cbModelParam._m0[17u].z, fma(_2594, cbModelParam._m0[17u].y, _2593 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2595, cbModelParam._m0[18u].z, fma(_2594, cbModelParam._m0[18u].y, _2593 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2595, cbModelParam._m0[19u].z, fma(_2594, cbModelParam._m0[19u].y, _2593 * cbModelParam._m0[19u].x))), _1763);
            frontier_phi_22_47_ladder = _2713.z * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_1 = _2713.y * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_2 = _2713.x * cbModelParam._m0[1u].z;
        }
        _1854 = frontier_phi_22_47_ladder_2;
        _1856 = frontier_phi_22_47_ladder_1;
        _1858 = frontier_phi_22_47_ladder;
    }
    else
    {
        vec4 _1838 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_864, _865, _866), _1763);
        _1854 = _1838.x * cbModelParam._m0[1u].z;
        _1856 = _1838.y * cbModelParam._m0[1u].z;
        _1858 = _1838.z * cbModelParam._m0[1u].z;
    }
    float _1870 = ((((1.0 - _885) * ((_872 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_885 * _872)) * _856;
    float _1871 = _1870 * ((cbModelParam._m0[1u].w * (_1854 - _1754)) + _1754);
    float _1872 = _1870 * ((cbModelParam._m0[1u].w * (_1856 - _1756)) + _1756);
    float _1873 = _1870 * ((cbModelParam._m0[1u].w * (_1858 - _1758)) + _1758);
    float _1876 = fma(_1873, cbSceneParam._m0[89u].z, fma(_1872, cbSceneParam._m0[89u].y, _1871 * cbSceneParam._m0[89u].x));
    float _1879 = fma(_1873, cbSceneParam._m0[90u].z, fma(_1872, cbSceneParam._m0[90u].y, _1871 * cbSceneParam._m0[90u].x));
    float _1882 = fma(_1873, cbSceneParam._m0[91u].z, fma(_1872, cbSceneParam._m0[91u].y, _1871 * cbSceneParam._m0[91u].x));
    float _1916 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1920 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1924 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1928 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1929 = _1916 / _1928;
    float _1930 = _1920 / _1928;
    float _1931 = _1924 / _1928;
    float _2078;
    float _2079;
    float _2080;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1958 = ((uint(_1931 > cbSceneParam._m0[59u].y) + uint(_1931 > cbSceneParam._m0[59u].x)) + uint(_1931 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1959 = _1958 + 43u;
        uint _1967 = _1958 + 44u;
        uint _1975 = _1958 + 45u;
        uint _1983 = _1958 + 46u;
        float _1994 = fma(_1928, cbSceneParam._m0[_1959].w, fma(_1924, cbSceneParam._m0[_1959].z, fma(_1920, cbSceneParam._m0[_1959].y, _1916 * cbSceneParam._m0[_1959].x)));
        float _1998 = fma(_1928, cbSceneParam._m0[_1967].w, fma(_1924, cbSceneParam._m0[_1967].z, fma(_1920, cbSceneParam._m0[_1967].y, _1916 * cbSceneParam._m0[_1967].x)));
        float _2006 = fma(_1928, cbSceneParam._m0[_1983].w, fma(_1924, cbSceneParam._m0[_1983].z, fma(_1920, cbSceneParam._m0[_1983].y, _1916 * cbSceneParam._m0[_1983].x)));
        float _2011 = cbSceneParam._m0[33u].z * _2006;
        float _2013 = cbSceneParam._m0[33u].w * _2006;
        float _2016 = fma(_1928, cbSceneParam._m0[_1975].w, fma(_1924, cbSceneParam._m0[_1975].z, fma(_1920, cbSceneParam._m0[_1975].y, _1916 * cbSceneParam._m0[_1975].x))) / _2006;
        float _2064 = (cbSceneParam._m0[33u].x - sqrt(((_1930 * _1930) + (_1929 * _1929)) + (_1931 * _1931))) * cbSceneParam._m0[33u].y;
        float _4352 = isnan(0.0) ? _2064 : (isnan(_2064) ? 0.0 : max(_2064, 0.0));
        float _2071 = (isnan(1.0) ? _4352 : (isnan(_4352) ? 1.0 : min(_4352, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2011 + _1994) / _2006, (_2013 + _1998) / _2006), _2016), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2013 + _1994) / _2006, (_1998 - _2011) / _2006), _2016), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1994 - _2011) / _2006, (_1998 - _2013) / _2006), _2016), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1994 - _2013) / _2006, (_2011 + _1998) / _2006), _2016), 0.0)).x), vec4(0.25)));
        _2078 = 1.0 - (_2071 * cbSceneParam._m0[34u].x);
        _2079 = 1.0 - (_2071 * cbSceneParam._m0[34u].y);
        _2080 = 1.0 - (_2071 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2078 = 1.0;
        _2079 = 1.0;
        _2080 = 1.0;
    }
    float _2144;
    float _2146;
    float _2148;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2132 = fma(_1928, cbSceneParam._m0[63u].w, fma(_1924, cbSceneParam._m0[63u].z, fma(_1920, cbSceneParam._m0[63u].y, _1916 * cbSceneParam._m0[63u].x)));
        float _2133 = fma(_1928, cbSceneParam._m0[60u].w, fma(_1924, cbSceneParam._m0[60u].z, fma(_1920, cbSceneParam._m0[60u].y, _1916 * cbSceneParam._m0[60u].x))) / _2132;
        float _2134 = fma(_1928, cbSceneParam._m0[61u].w, fma(_1924, cbSceneParam._m0[61u].z, fma(_1920, cbSceneParam._m0[61u].y, _1916 * cbSceneParam._m0[61u].x))) / _2132;
        float frontier_phi_34_33_ladder;
        float frontier_phi_34_33_ladder_1;
        float frontier_phi_34_33_ladder_2;
        if ((((_2133 >= cbSceneParam._m0[64u].x) && (_2134 >= cbSceneParam._m0[64u].y)) && (_2133 <= cbSceneParam._m0[64u].z)) && (_2134 <= cbSceneParam._m0[64u].w))
        {
            float _2272 = fma(_1928, cbSceneParam._m0[62u].w, fma(_1924, cbSceneParam._m0[62u].z, fma(_1920, cbSceneParam._m0[62u].y, _1916 * cbSceneParam._m0[62u].x))) / _2132;
            float _2276 = isnan(cbSceneParam._m0[41u].w) ? _2272 : (isnan(_2272) ? cbSceneParam._m0[41u].w : max(_2272, cbSceneParam._m0[41u].w));
            float _2319 = (cbSceneParam._m0[33u].x - sqrt(((_1930 * _1930) + (_1929 * _1929)) + (_1931 * _1931))) * cbSceneParam._m0[33u].y;
            float _4368 = isnan(0.0) ? _2319 : (isnan(_2319) ? 0.0 : max(_2319, 0.0));
            float _2326 = (isnan(1.0) ? _4368 : (isnan(_4368) ? 1.0 : min(_4368, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2133, cbSceneParam._m0[33u].w + _2134), _2276), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2133, _2134 - cbSceneParam._m0[33u].z), _2276), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2133 - cbSceneParam._m0[33u].z, _2134 - cbSceneParam._m0[33u].w), _2276), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2133 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2134), _2276), 0.0)).x), vec4(0.25)));
            float _2330 = 1.0 - (_2326 * cbSceneParam._m0[34u].x);
            float _2331 = 1.0 - (_2326 * cbSceneParam._m0[34u].y);
            float _2332 = 1.0 - (_2326 * cbSceneParam._m0[34u].z);
            frontier_phi_34_33_ladder = isnan(_2332) ? _2080 : (isnan(_2080) ? _2332 : min(_2080, _2332));
            frontier_phi_34_33_ladder_1 = isnan(_2331) ? _2079 : (isnan(_2079) ? _2331 : min(_2079, _2331));
            frontier_phi_34_33_ladder_2 = isnan(_2330) ? _2078 : (isnan(_2078) ? _2330 : min(_2078, _2330));
        }
        else
        {
            frontier_phi_34_33_ladder = _2080;
            frontier_phi_34_33_ladder_1 = _2079;
            frontier_phi_34_33_ladder_2 = _2078;
        }
        _2144 = frontier_phi_34_33_ladder_2;
        _2146 = frontier_phi_34_33_ladder_1;
        _2148 = frontier_phi_34_33_ladder;
    }
    else
    {
        _2144 = _2078;
        _2146 = _2079;
        _2148 = _2080;
    }
    uvec4 _2153 = floatBitsToUint(cbInstanceData._m0[_273 + 5u]);
    uint _2155 = _2153.x * 14u;
    uint _2156 = _2155 + 13u;
    float _2163 = _856 + (-1.0);
    float _2168 = (cbLight._m0[_2156].x * _2163) + 1.0;
    float _2169 = (cbLight._m0[_2156].y * _2163) + 1.0;
    float _2170 = (cbLight._m0[_2156].z * _2163) + 1.0;
    float _2171 = (cbLight._m0[_2156].w * _2163) + 1.0;
    uint _2172 = _2155 + 5u;
    float _2178 = isnan(1.0) ? _2169 : (isnan(_2169) ? 1.0 : min(_2169, 1.0));
    uint _2182 = _2155 + 4u;
    float _2191 = isnan(1.0) ? _2168 : (isnan(_2168) ? 1.0 : min(_2168, 1.0));
    uint _2195 = _2155 | 1u;
    float _2206 = dot(vec3(cbLight._m0[_2155].xyz), vec3(_706, _707, _708));
    float _2209 = dot(vec3(cbLight._m0[_2195].xyz), vec3(_706, _707, _708));
    float _4404 = isnan(0.0) ? _2206 : (isnan(_2206) ? 0.0 : max(_2206, 0.0));
    float _4415 = isnan(0.0) ? _2209 : (isnan(_2209) ? 0.0 : max(_2209, 0.0));
    float _2214 = (isnan(1.0) ? _4404 : (isnan(_4404) ? 1.0 : min(_4404, 1.0))) * 0.3183098733425140380859375;
    float _2216 = (isnan(1.0) ? _4415 : (isnan(_4415) ? 1.0 : min(_4415, 1.0))) * 0.3183098733425140380859375;
    float _2223 = ((cbLight._m0[_2172].x * _2178) * _2216) + (((cbLight._m0[_2182].x * _2144) * _2191) * _2214);
    float _2224 = ((_2178 * cbLight._m0[_2172].y) * _2216) + (((cbLight._m0[_2182].y * _2146) * _2191) * _2214);
    float _2225 = ((_2178 * cbLight._m0[_2172].z) * _2216) + (((cbLight._m0[_2182].z * _2148) * _2191) * _2214);
    uvec4 _2229 = floatBitsToUint(cbLight._m0[_2155 + 12u]);
    bool _2231 = _2229.x == 0u;
    float _2333;
    float _2335;
    float _2337;
    if (_2231)
    {
        _2333 = _2223;
        _2335 = _2224;
        _2337 = _2225;
    }
    else
    {
        uint _2341 = _2155 + 6u;
        float _2357 = (dot(vec3(cbLight._m0[_2155 + 2u].xyz), vec3(_706, _707, _708)) * 0.5) + 0.5;
        float _2358 = _2357 * _2357;
        float _4426 = isnan(0.0) ? _2358 : (isnan(_2358) ? 0.0 : max(_2358, 0.0));
        float _2359 = isnan(1.0) ? _4426 : (isnan(_4426) ? 1.0 : min(_4426, 1.0));
        float _2360 = isnan(1.0) ? _2170 : (isnan(_2170) ? 1.0 : min(_2170, 1.0));
        _2333 = (((cbLight._m0[_2341].x * 0.3183098733425140380859375) * _2359) * _2360) + _2223;
        _2335 = (((cbLight._m0[_2341].y * 0.3183098733425140380859375) * _2359) * _2360) + _2224;
        _2337 = (((cbLight._m0[_2341].z * 0.3183098733425140380859375) * _2359) * _2360) + _2225;
    }
    bool _2340 = _2229.y == 0u;
    float _2395;
    float _2397;
    float _2399;
    if (_2340)
    {
        _2395 = _2333;
        _2397 = _2335;
        _2399 = _2337;
    }
    else
    {
        uint _2557 = _2155 + 7u;
        float _2573 = (dot(vec3(cbLight._m0[_2155 + 3u].xyz), vec3(_706, _707, _708)) * 0.5) + 0.5;
        float _2574 = _2573 * _2573;
        float _4442 = isnan(0.0) ? _2574 : (isnan(_2574) ? 0.0 : max(_2574, 0.0));
        float _2575 = isnan(1.0) ? _4442 : (isnan(_4442) ? 1.0 : min(_4442, 1.0));
        float _2576 = isnan(1.0) ? _2171 : (isnan(_2171) ? 1.0 : min(_2171, 1.0));
        _2395 = (((cbLight._m0[_2557].x * 0.3183098733425140380859375) * _2575) * _2576) + _2333;
        _2397 = (((cbLight._m0[_2557].y * 0.3183098733425140380859375) * _2575) * _2576) + _2335;
        _2399 = (((cbLight._m0[_2557].z * 0.3183098733425140380859375) * _2575) * _2576) + _2337;
    }
    uint _2402 = _2155 + 8u;
    float _2415 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2155].w)) * _709) * 0.949999988079071044921875);
    float _2416 = _2415 * _2415;
    float _2417 = cbLight._m0[_2155].x + _785;
    float _2418 = cbLight._m0[_2155].y + _786;
    float _2419 = cbLight._m0[_2155].z + _787;
    float _2423 = inversesqrt(dot(vec3(_2417, _2418, _2419), vec3(_2417, _2418, _2419)));
    float _2424 = _2423 * _2417;
    float _2425 = _2423 * _2418;
    float _2426 = _2423 * _2419;
    float _2427 = dot(vec3(_706, _707, _708), vec3(cbLight._m0[_2155].xyz));
    float _4458 = isnan(0.0) ? _2427 : (isnan(_2427) ? 0.0 : max(_2427, 0.0));
    float _2430 = isnan(1.0) ? _4458 : (isnan(_4458) ? 1.0 : min(_4458, 1.0));
    float _4469 = isnan(0.0) ? _857 : (isnan(_857) ? 0.0 : max(_857, 0.0));
    float _2431 = isnan(1.0) ? _4469 : (isnan(_4469) ? 1.0 : min(_4469, 1.0));
    float _2432 = dot(vec3(_706, _707, _708), vec3(_2424, _2425, _2426));
    float _4480 = isnan(0.0) ? _2432 : (isnan(_2432) ? 0.0 : max(_2432, 0.0));
    float _2435 = isnan(1.0) ? _4480 : (isnan(_4480) ? 1.0 : min(_4480, 1.0));
    float _2436 = dot(vec3(cbLight._m0[_2155].xyz), vec3(_2424, _2425, _2426));
    float _4491 = isnan(0.0) ? _2436 : (isnan(_2436) ? 0.0 : max(_2436, 0.0));
    float _2440 = _2416 * _2416;
    float _2444 = ((_2435 * _2435) * (_2440 + (-1.0))) + 1.0;
    float _2455 = (exp2(log2(1.0 - (isnan(1.0) ? _4491 : (isnan(_4491) ? 1.0 : min(_4491, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2456 = 1.0 - _2416;
    float _2467 = (0.5 / (((_2431 * ((_2430 * _2456) + _2416)) + 9.9999999392252902907785028219223e-09) + (((_2431 * _2456) + _2416) * _2430))) * _2430;
    float _4502 = isnan(0.0) ? _2467 : (isnan(_2467) ? 0.0 : max(_2467, 0.0));
    float _2469 = (isnan(1.0) ? _4502 : (isnan(_4502) ? 1.0 : min(_4502, 1.0))) * (_2440 / ((_2444 * _2444) * 3.141590118408203125));
    uint _2483 = _2155 + 9u;
    float _2494 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2195].w)) * _709) * 0.949999988079071044921875);
    float _2495 = _2494 * _2494;
    float _2496 = cbLight._m0[_2195].x + _785;
    float _2497 = cbLight._m0[_2195].y + _786;
    float _2498 = cbLight._m0[_2195].z + _787;
    float _2502 = inversesqrt(dot(vec3(_2496, _2497, _2498), vec3(_2496, _2497, _2498)));
    float _2503 = _2502 * _2496;
    float _2504 = _2502 * _2497;
    float _2505 = _2502 * _2498;
    float _2506 = dot(vec3(_706, _707, _708), vec3(cbLight._m0[_2195].xyz));
    float _4513 = isnan(0.0) ? _2506 : (isnan(_2506) ? 0.0 : max(_2506, 0.0));
    float _2509 = isnan(1.0) ? _4513 : (isnan(_4513) ? 1.0 : min(_4513, 1.0));
    float _2510 = dot(vec3(_706, _707, _708), vec3(_2503, _2504, _2505));
    float _4524 = isnan(0.0) ? _2510 : (isnan(_2510) ? 0.0 : max(_2510, 0.0));
    float _2513 = isnan(1.0) ? _4524 : (isnan(_4524) ? 1.0 : min(_4524, 1.0));
    float _2514 = dot(vec3(cbLight._m0[_2195].xyz), vec3(_2503, _2504, _2505));
    float _4535 = isnan(0.0) ? _2514 : (isnan(_2514) ? 0.0 : max(_2514, 0.0));
    float _2518 = _2495 * _2495;
    float _2522 = ((_2513 * _2513) * (_2518 + (-1.0))) + 1.0;
    float _2531 = (exp2(log2(1.0 - (isnan(1.0) ? _4535 : (isnan(_4535) ? 1.0 : min(_4535, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2532 = 1.0 - _2495;
    float _2542 = (0.5 / (((_2431 * ((_2509 * _2532) + _2495)) + 9.9999999392252902907785028219223e-09) + (((_2431 * _2532) + _2495) * _2509))) * _2509;
    float _4546 = isnan(0.0) ? _2542 : (isnan(_2542) ? 0.0 : max(_2542, 0.0));
    float _2544 = (isnan(1.0) ? _4546 : (isnan(_4546) ? 1.0 : min(_4546, 1.0))) * (_2518 / ((_2522 * _2522) * 3.141590118408203125));
    float _2554 = (((_2531 * cbLight._m0[_2483].x) * _2544) * _2178) + ((((cbLight._m0[_2402].x * _2144) * _2455) * _2469) * _2191);
    float _2555 = (((_2531 * cbLight._m0[_2483].y) * _2544) * _2178) + ((((cbLight._m0[_2402].y * _2146) * _2455) * _2469) * _2191);
    float _2556 = (((_2531 * cbLight._m0[_2483].z) * _2544) * _2178) + ((((cbLight._m0[_2402].z * _2148) * _2455) * _2469) * _2191);
    float _2612;
    float _2614;
    float _2616;
    if (_2231)
    {
        _2612 = _2554;
        _2614 = _2555;
        _2616 = _2556;
    }
    else
    {
        uint _2618 = _2155 + 2u;
        uint _2622 = _2155 + 10u;
        float _2636 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2618].w)) * _709) * 0.949999988079071044921875);
        float _2637 = _2636 * _2636;
        float _2638 = cbLight._m0[_2618].x + _785;
        float _2639 = cbLight._m0[_2618].y + _786;
        float _2640 = cbLight._m0[_2618].z + _787;
        float _2644 = inversesqrt(dot(vec3(_2638, _2639, _2640), vec3(_2638, _2639, _2640)));
        float _2645 = _2644 * _2638;
        float _2646 = _2644 * _2639;
        float _2647 = _2644 * _2640;
        float _2648 = dot(vec3(_706, _707, _708), vec3(cbLight._m0[_2618].xyz));
        float _4557 = isnan(0.0) ? _2648 : (isnan(_2648) ? 0.0 : max(_2648, 0.0));
        float _2651 = isnan(1.0) ? _4557 : (isnan(_4557) ? 1.0 : min(_4557, 1.0));
        float _2652 = dot(vec3(_706, _707, _708), vec3(_2645, _2646, _2647));
        float _4568 = isnan(0.0) ? _2652 : (isnan(_2652) ? 0.0 : max(_2652, 0.0));
        float _2655 = isnan(1.0) ? _4568 : (isnan(_4568) ? 1.0 : min(_4568, 1.0));
        float _2656 = dot(vec3(cbLight._m0[_2618].xyz), vec3(_2645, _2646, _2647));
        float _4579 = isnan(0.0) ? _2656 : (isnan(_2656) ? 0.0 : max(_2656, 0.0));
        float _2660 = _2637 * _2637;
        float _2664 = ((_2655 * _2655) * (_2660 + (-1.0))) + 1.0;
        float _2673 = (exp2(log2(1.0 - (isnan(1.0) ? _4579 : (isnan(_4579) ? 1.0 : min(_4579, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2674 = 1.0 - _2637;
        float _2684 = (0.5 / (((_2431 * ((_2651 * _2674) + _2637)) + 9.9999999392252902907785028219223e-09) + (((_2431 * _2674) + _2637) * _2651))) * _2651;
        float _4590 = isnan(0.0) ? _2684 : (isnan(_2684) ? 0.0 : max(_2684, 0.0));
        float _2686 = (isnan(1.0) ? _4590 : (isnan(_4590) ? 1.0 : min(_4590, 1.0))) * (_2660 / ((_2664 * _2664) * 3.141590118408203125));
        float _2687 = isnan(1.0) ? _2170 : (isnan(_2170) ? 1.0 : min(_2170, 1.0));
        _2612 = (((_2673 * cbLight._m0[_2622].x) * _2686) * _2687) + _2554;
        _2614 = (((_2673 * cbLight._m0[_2622].y) * _2686) * _2687) + _2555;
        _2616 = (((_2673 * cbLight._m0[_2622].z) * _2686) * _2687) + _2556;
    }
    float _2718;
    float _2720;
    float _2722;
    if (_2340)
    {
        _2718 = _2612;
        _2720 = _2614;
        _2722 = _2616;
    }
    else
    {
        uint _2729 = _2155 + 3u;
        uint _2733 = _2155 + 11u;
        float _2747 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2729].w)) * _709) * 0.949999988079071044921875);
        float _2748 = _2747 * _2747;
        float _2749 = cbLight._m0[_2729].x + _785;
        float _2750 = cbLight._m0[_2729].y + _786;
        float _2751 = cbLight._m0[_2729].z + _787;
        float _2755 = inversesqrt(dot(vec3(_2749, _2750, _2751), vec3(_2749, _2750, _2751)));
        float _2756 = _2755 * _2749;
        float _2757 = _2755 * _2750;
        float _2758 = _2755 * _2751;
        float _2759 = dot(vec3(_706, _707, _708), vec3(cbLight._m0[_2729].xyz));
        float _4606 = isnan(0.0) ? _2759 : (isnan(_2759) ? 0.0 : max(_2759, 0.0));
        float _2762 = isnan(1.0) ? _4606 : (isnan(_4606) ? 1.0 : min(_4606, 1.0));
        float _2763 = dot(vec3(_706, _707, _708), vec3(_2756, _2757, _2758));
        float _4617 = isnan(0.0) ? _2763 : (isnan(_2763) ? 0.0 : max(_2763, 0.0));
        float _2766 = isnan(1.0) ? _4617 : (isnan(_4617) ? 1.0 : min(_4617, 1.0));
        float _2767 = dot(vec3(cbLight._m0[_2729].xyz), vec3(_2756, _2757, _2758));
        float _4628 = isnan(0.0) ? _2767 : (isnan(_2767) ? 0.0 : max(_2767, 0.0));
        float _2771 = _2748 * _2748;
        float _2775 = ((_2766 * _2766) * (_2771 + (-1.0))) + 1.0;
        float _2784 = (exp2(log2(1.0 - (isnan(1.0) ? _4628 : (isnan(_4628) ? 1.0 : min(_4628, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2785 = 1.0 - _2748;
        float _2795 = (0.5 / (((_2431 * ((_2762 * _2785) + _2748)) + 9.9999999392252902907785028219223e-09) + (((_2431 * _2785) + _2748) * _2762))) * _2762;
        float _4639 = isnan(0.0) ? _2795 : (isnan(_2795) ? 0.0 : max(_2795, 0.0));
        float _2797 = (isnan(1.0) ? _4639 : (isnan(_4639) ? 1.0 : min(_4639, 1.0))) * (_2771 / ((_2775 * _2775) * 3.141590118408203125));
        float _2798 = isnan(1.0) ? _2171 : (isnan(_2171) ? 1.0 : min(_2171, 1.0));
        _2718 = (((_2784 * cbLight._m0[_2733].x) * _2797) * _2798) + _2612;
        _2720 = (((_2784 * cbLight._m0[_2733].y) * _2797) * _2798) + _2614;
        _2722 = (((_2784 * cbLight._m0[_2733].z) * _2797) * _2798) + _2616;
    }
    float _2864;
    float _2866;
    float _2868;
    float _2870;
    float _2872;
    float _2874;
    if (_2153.y == 0u)
    {
        uvec4 _2819 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2820 = _2819.x;
        uint _2831 = uint((float(_2819.y) * floor(float(uint(cbSceneParam._m0[85u].y * _794) / _2820))) + floor(float(uint(cbSceneParam._m0[85u].x * _793) / _2820)));
        float _2841 = (log2(_1931 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2842 = isnan(0.0) ? _2841 : (isnan(_2841) ? 0.0 : max(_2841, 0.0));
        uint _2845 = uint(isnan(14.0) ? _2842 : (isnan(_2842) ? 14.0 : min(_2842, 14.0)));
        uvec4 _2850 = texelFetch(g_lightClusterGridBuffer, int(((_2845 << 2u) + (_2831 << 6u)) >> 2u));
        uint _2851 = _2850.x;
        uint _2852 = _2819.z;
        float _2931;
        float _2933;
        float _2935;
        float _2937;
        float _2939;
        float _2941;
        if (((((1u << ((_2852 >> 4u) & 15u)) + 4294967295u) & _2851) == 0u) || ((_2852 & 240u) == 0u))
        {
            _2931 = 0.0;
            _2933 = 0.0;
            _2935 = 0.0;
            _2937 = 0.0;
            _2939 = 0.0;
            _2941 = 0.0;
        }
        else
        {
            float _2932;
            float _2934;
            float _2936;
            float _2938;
            float _2940;
            float _2942;
            float _3076 = 0.0;
            float _3077 = 0.0;
            float _3078 = 0.0;
            float _3079 = 0.0;
            float _3080 = 0.0;
            float _3081 = 0.0;
            uint _3082 = 0u;
            uint _3091;
            bool _3092;
            for (;;)
            {
                _3091 = texelFetch(g_lightClassification, int((((_2845 << 5u) + (_2831 << 9u)) + (_3082 << 2u)) >> 2u)).x;
                _3092 = _3091 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3092)
                {
                    frontier_phi_66_pred = _3081;
                    frontier_phi_66_pred_1 = _3080;
                    frontier_phi_66_pred_2 = _3079;
                    frontier_phi_66_pred_3 = _3078;
                    frontier_phi_66_pred_4 = _3077;
                    frontier_phi_66_pred_5 = _3076;
                }
                else
                {
                    float _3200;
                    float _3201;
                    float _3202;
                    float _3203;
                    float _3204;
                    float _3205;
                    uint _3206;
                    _3200 = _3076;
                    _3201 = _3077;
                    _3202 = _3078;
                    _3203 = _3079;
                    _3204 = _3080;
                    _3205 = _3081;
                    _3206 = _3091;
                    float _3132;
                    float _3133;
                    float _3134;
                    float _3135;
                    float _3136;
                    float _3137;
                    for (;;)
                    {
                        uint _3210 = uint(findLSB(_3206)) + (_3082 << 5u);
                        uint _3207 = (_3206 + 4294967295u) & _3206;
                        uint _3212 = _3210 * 48u;
                        vec4 _3226 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3212)).x, texelFetch(g_PointLightRenderingBuffer, int(_3212 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3212 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3212 + 3u)).x));
                        uint _3232 = (_3210 * 48u) + 4u;
                        vec4 _3245 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3232)).x, texelFetch(g_PointLightRenderingBuffer, int(_3232 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3232 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3232 + 3u)).x));
                        uint _3251 = (_3210 * 48u) + 8u;
                        vec3 _3262 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3251)).x, texelFetch(g_PointLightRenderingBuffer, int(_3251 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3251 + 2u)).x));
                        float _3266 = _3226.x - _1929;
                        float _3267 = _3226.y - _1930;
                        float _3268 = _3226.z - _1931;
                        float _3269 = dot(vec3(_3266, _3267, _3268), vec3(_3266, _3267, _3268));
                        float _3272 = inversesqrt(_3269);
                        float _3273 = _3272 * _3266;
                        float _3274 = _3272 * _3267;
                        float _3275 = _3272 * _3268;
                        float _3276 = dot(vec3(_812, _815, _818), vec3(_3273, _3274, _3275));
                        float _3281 = 1.0 - (_3269 * _3226.w);
                        float _4665 = isnan(0.0) ? _3281 : (isnan(_3281) ? 0.0 : max(_3281, 0.0));
                        float _3282 = isnan(1.0) ? _4665 : (isnan(_4665) ? 1.0 : min(_4665, 1.0));
                        float _3283 = sqrt(_3269) * _3245.w;
                        float _3286 = 1.39999997615814208984375 / (_3283 + 1.39999997615814208984375);
                        float _3287 = _3286 * _3286;
                        float _3290 = ((1.0 - _3287) * _3276) + _3287;
                        float _3293 = _3283 * _3283;
                        float _3297 = ((isnan(0.0) ? _3290 : (isnan(_3290) ? 0.0 : max(_3290, 0.0))) * _3282) / ((_3293 * 0.699999988079071044921875) + 1.0);
                        float _3301 = (-0.0) - _1929;
                        float _3302 = (-0.0) - _1930;
                        float _3303 = (-0.0) - _1931;
                        float _3307 = inversesqrt(dot(vec3(_3301, _3302, _3303), vec3(_3301, _3302, _3303)));
                        float _3308 = _3307 * _3301;
                        float _3309 = _3307 * _3302;
                        float _3310 = _3307 * _3303;
                        float _3317 = exp2(log2(1.0 / ((_3293 * 3.5) + 5.0)) * 0.25);
                        float _3318 = 1.0 - _872;
                        float _3325 = sqrt(1.0 - ((1.0 - (_3318 * _3318)) * (1.0 - (_3317 * _3317))));
                        float _3326 = _3325 * _3325;
                        float _3327 = _3326 * _3326;
                        float _3328 = _3308 + _3273;
                        float _3329 = _3309 + _3274;
                        float _3330 = _3310 + _3275;
                        float _3334 = inversesqrt(dot(vec3(_3328, _3329, _3330), vec3(_3328, _3329, _3330)));
                        float _3338 = dot(vec3(_812, _815, _818), vec3(_3308, _3309, _3310));
                        float _4681 = isnan(0.0) ? _3338 : (isnan(_3338) ? 0.0 : max(_3338, 0.0));
                        float _3341 = isnan(1.0) ? _4681 : (isnan(_4681) ? 1.0 : min(_4681, 1.0));
                        float _3342 = dot(vec3(_812, _815, _818), vec3(_3334 * _3328, _3334 * _3329, _3334 * _3330));
                        float _4692 = isnan(0.0) ? _3342 : (isnan(_3342) ? 0.0 : max(_3342, 0.0));
                        float _3345 = isnan(1.0) ? _4692 : (isnan(_4692) ? 1.0 : min(_4692, 1.0));
                        float _3349 = ((_3345 * _3345) * (_3327 + (-1.0))) + 1.0;
                        float _3350 = _3286 * _3326;
                        float _3351 = _3350 * _3350;
                        float _3354 = ((1.0 - _3351) * _3276) + _3351;
                        float _4703 = isnan(0.0) ? _3354 : (isnan(_3354) ? 0.0 : max(_3354, 0.0));
                        float _3355 = isnan(1.0) ? _4703 : (isnan(_4703) ? 1.0 : min(_4703, 1.0));
                        float _3356 = 1.0 - _3326;
                        float _3366 = (0.5 / (((_3355 * ((_3341 * _3356) + _3326)) + 9.9999999392252902907785028219223e-09) + (((_3355 * _3356) + _3326) * _3341))) * _3355;
                        float _4714 = isnan(0.0) ? _3366 : (isnan(_3366) ? 0.0 : max(_3366, 0.0));
                        float _3377 = (((_3327 * 3.1415927410125732421875) * (isnan(1.0) ? _4714 : (isnan(_4714) ? 1.0 : min(_4714, 1.0)))) / ((_3349 * _3349) * ((_3293 * 2.1991131305694580078125) + 3.141590118408203125))) * _3282;
                        _3135 = (_3297 * _3245.x) + _3203;
                        _3136 = (_3297 * _3245.y) + _3204;
                        _3137 = (_3297 * _3245.z) + _3205;
                        _3132 = (_3377 * _3262.x) + _3200;
                        _3133 = (_3377 * _3262.y) + _3201;
                        _3134 = (_3377 * _3262.z) + _3202;
                        if (_3207 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3200 = _3132;
                            _3201 = _3133;
                            _3202 = _3134;
                            _3203 = _3135;
                            _3204 = _3136;
                            _3205 = _3137;
                            _3206 = _3207;
                        }
                    }
                    frontier_phi_66_pred = _3137;
                    frontier_phi_66_pred_1 = _3136;
                    frontier_phi_66_pred_2 = _3135;
                    frontier_phi_66_pred_3 = _3134;
                    frontier_phi_66_pred_4 = _3133;
                    frontier_phi_66_pred_5 = _3132;
                }
                _2942 = frontier_phi_66_pred;
                _2940 = frontier_phi_66_pred_1;
                _2938 = frontier_phi_66_pred_2;
                _2936 = frontier_phi_66_pred_3;
                _2934 = frontier_phi_66_pred_4;
                _2932 = frontier_phi_66_pred_5;
                uint _3083 = _3082 + 1u;
                if (_3083 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3076 = _2932;
                    _3077 = _2934;
                    _3078 = _2936;
                    _3079 = _2938;
                    _3080 = _2940;
                    _3081 = _2942;
                    _3082 = _3083;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2931 = _2932;
            _2933 = _2934;
            _2935 = _2936;
            _2937 = _2938;
            _2939 = _2940;
            _2941 = _2942;
        }
        uvec4 _2945 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2946 = _2945.z;
        uint _2948 = (_2946 >> 8u) & 15u;
        float _3044;
        float _3046;
        float _3048;
        float _3050;
        float _3052;
        float _3054;
        if (((4294967295u << _2948) & _2851) == 0u)
        {
            _3044 = _2931;
            _3046 = _2933;
            _3048 = _2935;
            _3050 = _2937;
            _3052 = _2939;
            _3054 = _2941;
        }
        else
        {
            float _3069 = inversesqrt(dot(vec3(_1929, _1930, _1931), vec3(_1929, _1930, _1931)));
            float _3070 = _3069 * _1929;
            float _3071 = _3069 * _1930;
            float _3072 = _3069 * _1931;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2948 < ((_2946 >> 12u) & 15u))
            {
                float _3045;
                float _3047;
                float _3049;
                float _3051;
                float _3053;
                float _3055;
                float _3183 = _2931;
                float _3184 = _2933;
                float _3185 = _2935;
                float _3186 = _2937;
                float _3187 = _2939;
                float _3188 = _2941;
                uint _3189 = _2948;
                uint _3198;
                bool _3199;
                for (;;)
                {
                    _3198 = texelFetch(g_lightClassification, int((((_2845 << 5u) + (_2831 << 9u)) + (_3189 << 2u)) >> 2u)).x;
                    _3199 = _3198 == 0u;
                    float frontier_phi_72_pred;
                    float frontier_phi_72_pred_1;
                    float frontier_phi_72_pred_2;
                    float frontier_phi_72_pred_3;
                    float frontier_phi_72_pred_4;
                    float frontier_phi_72_pred_5;
                    if (_3199)
                    {
                        frontier_phi_72_pred = _3188;
                        frontier_phi_72_pred_1 = _3187;
                        frontier_phi_72_pred_2 = _3186;
                        frontier_phi_72_pred_3 = _3185;
                        frontier_phi_72_pred_4 = _3184;
                        frontier_phi_72_pred_5 = _3183;
                    }
                    else
                    {
                        float _3382;
                        float _3383;
                        float _3384;
                        float _3385;
                        float _3386;
                        float _3387;
                        float _3675;
                        float _3676;
                        float _3677;
                        float _3678;
                        float _3679;
                        float _3680;
                        float _3395 = _3183;
                        float _3396 = _3184;
                        float _3397 = _3185;
                        float _3398 = _3186;
                        float _3399 = _3187;
                        float _3400 = _3188;
                        uint _3401 = _3198;
                        uint _3402;
                        vec4 _3427;
                        float _3428;
                        vec4 _3443;
                        vec3 _3455;
                        vec4 _3470;
                        vec4 _3485;
                        float _3531;
                        bool _3532;
                        for (;;)
                        {
                            uint _3412 = ((_3189 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3401));
                            _3402 = (_3401 + 4294967295u) & _3401;
                            uint _3414 = _3412 * 40u;
                            _3427 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3414)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3414 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3414 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3414 + 3u)).x));
                            _3428 = _3427.w;
                            uint _3430 = (_3412 * 40u) + 4u;
                            _3443 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3430)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3430 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3430 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3430 + 3u)).x));
                            uint _3445 = (_3412 * 40u) + 8u;
                            _3455 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3445)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3445 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3445 + 2u)).x));
                            uint _3457 = (_3412 * 40u) + 16u;
                            _3470 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3457)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3457 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3457 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3457 + 3u)).x));
                            uint _3472 = (_3412 * 40u) + 20u;
                            _3485 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3472)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3472 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3472 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3472 + 3u)).x));
                            uint _3487 = (_3412 * 40u) + 24u;
                            vec4 _3500 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3487)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3487 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3487 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3487 + 3u)).x));
                            uint _3506 = (_3412 * 40u) + 28u;
                            vec4 _3519 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3506)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3506 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3506 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3506 + 3u)).x));
                            _3531 = fma(_1931, _3519.z, fma(_1930, _3519.y, _3519.x * _1929)) + _3519.w;
                            _3532 = !((fma(_1931, _3500.z, fma(_1930, _3500.y, _3500.x * _1929)) + _3500.w) <= 0.0);
                            float frontier_phi_78_pred;
                            float frontier_phi_78_pred_1;
                            float frontier_phi_78_pred_2;
                            float frontier_phi_78_pred_3;
                            float frontier_phi_78_pred_4;
                            float frontier_phi_78_pred_5;
                            if (_3532)
                            {
                                float _3559 = _3427.x - _1929;
                                float _3560 = _3427.y - _1930;
                                float _3561 = _3427.z - _1931;
                                float _3562 = dot(vec3(_3559, _3560, _3561), vec3(_3559, _3560, _3561));
                                float _3565 = inversesqrt(_3562);
                                float _3566 = _3565 * _3559;
                                float _3567 = _3565 * _3560;
                                float _3568 = _3565 * _3561;
                                float _3572 = 1.0 - (_3562 / (_3428 * _3428));
                                float _4725 = isnan(0.0) ? _3572 : (isnan(_3572) ? 0.0 : max(_3572, 0.0));
                                float _3573 = isnan(1.0) ? _4725 : (isnan(_4725) ? 1.0 : min(_4725, 1.0));
                                float _3577 = sqrt(_3562) * _3443.w;
                                float _3579 = 1.39999997615814208984375 / (_3577 + 1.39999997615814208984375);
                                float _3580 = _3579 * _3579;
                                float _3583 = ((1.0 - _3580) * dot(vec3(_3566, _3567, _3568), vec3(_812, _815, _818))) + _3580;
                                float _3586 = _3577 * _3577;
                                float _3590 = (fma(_1931, _3470.z, fma(_1930, _3470.y, _3470.x * _1929)) + _3470.w) / _3531;
                                float _3591 = (fma(_1931, _3485.z, fma(_1930, _3485.y, _3485.x * _1929)) + _3485.w) / _3531;
                                float _3595 = 1.0 - dot(vec2(_3590, _3591), vec2(_3590, _3591));
                                float _4741 = isnan(0.0) ? _3595 : (isnan(_3595) ? 0.0 : max(_3595, 0.0));
                                float _3596 = isnan(1.0) ? _4741 : (isnan(_4741) ? 1.0 : min(_4741, 1.0));
                                float _3597 = _3596 * (((isnan(0.0) ? _3583 : (isnan(_3583) ? 0.0 : max(_3583, 0.0))) * _3573) / ((_3586 * 0.699999988079071044921875) + 1.0));
                                float _3609 = exp2(log2(1.0 / ((_3586 * 3.5) + 5.0)) * 0.25);
                                float _3610 = 1.0 - _872;
                                float _3617 = sqrt(1.0 - ((1.0 - (_3610 * _3610)) * (1.0 - (_3609 * _3609))));
                                float _3618 = _3617 * _3617;
                                float _3619 = _3618 * _3618;
                                float _3620 = _3566 - _3070;
                                float _3621 = _3567 - _3071;
                                float _3622 = _3568 - _3072;
                                float _3626 = inversesqrt(dot(vec3(_3620, _3621, _3622), vec3(_3620, _3621, _3622)));
                                float _3630 = dot(vec3(_812, _815, _818), vec3((-0.0) - _3070, (-0.0) - _3071, (-0.0) - _3072));
                                float _4752 = isnan(0.0) ? _3630 : (isnan(_3630) ? 0.0 : max(_3630, 0.0));
                                float _3633 = isnan(1.0) ? _4752 : (isnan(_4752) ? 1.0 : min(_4752, 1.0));
                                float _3634 = dot(vec3(_812, _815, _818), vec3(_3626 * _3620, _3626 * _3621, _3626 * _3622));
                                float _4763 = isnan(0.0) ? _3634 : (isnan(_3634) ? 0.0 : max(_3634, 0.0));
                                float _3637 = isnan(1.0) ? _4763 : (isnan(_4763) ? 1.0 : min(_4763, 1.0));
                                float _3641 = ((_3637 * _3637) * (_3619 + (-1.0))) + 1.0;
                                float _3642 = _3579 * _3618;
                                float _3643 = _3642 * _3642;
                                float _3649 = ((1.0 - _3643) * dot(vec3(_812, _815, _818), vec3(_3566, _3567, _3568))) + _3643;
                                float _4774 = isnan(0.0) ? _3649 : (isnan(_3649) ? 0.0 : max(_3649, 0.0));
                                float _3650 = isnan(1.0) ? _4774 : (isnan(_4774) ? 1.0 : min(_4774, 1.0));
                                float _3651 = 1.0 - _3618;
                                float _3661 = (0.5 / (((_3650 * ((_3633 * _3651) + _3618)) + 9.9999999392252902907785028219223e-09) + (((_3650 * _3651) + _3618) * _3633))) * _3650;
                                float _4785 = isnan(0.0) ? _3661 : (isnan(_3661) ? 0.0 : max(_3661, 0.0));
                                float _3671 = (_3596 * _3573) * (((_3619 * 3.1415927410125732421875) * (isnan(1.0) ? _4785 : (isnan(_4785) ? 1.0 : min(_4785, 1.0)))) / ((_3641 * _3641) * ((_3586 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_78_pred = _3597 * _3443.y;
                                frontier_phi_78_pred_1 = _3597 * _3443.x;
                                frontier_phi_78_pred_2 = _3671 * _3455.z;
                                frontier_phi_78_pred_3 = _3671 * _3455.y;
                                frontier_phi_78_pred_4 = _3671 * _3455.x;
                                frontier_phi_78_pred_5 = _3597 * _3443.z;
                            }
                            else
                            {
                                frontier_phi_78_pred = 0.0;
                                frontier_phi_78_pred_1 = 0.0;
                                frontier_phi_78_pred_2 = 0.0;
                                frontier_phi_78_pred_3 = 0.0;
                                frontier_phi_78_pred_4 = 0.0;
                                frontier_phi_78_pred_5 = 0.0;
                            }
                            _3679 = frontier_phi_78_pred;
                            _3678 = frontier_phi_78_pred_1;
                            _3677 = frontier_phi_78_pred_2;
                            _3676 = frontier_phi_78_pred_3;
                            _3675 = frontier_phi_78_pred_4;
                            _3680 = frontier_phi_78_pred_5;
                            _3385 = _3678 + _3398;
                            _3386 = _3679 + _3399;
                            _3387 = _3680 + _3400;
                            _3382 = _3675 + _3395;
                            _3383 = _3676 + _3396;
                            _3384 = _3677 + _3397;
                            if (_3402 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3395 = _3382;
                                _3396 = _3383;
                                _3397 = _3384;
                                _3398 = _3385;
                                _3399 = _3386;
                                _3400 = _3387;
                                _3401 = _3402;
                                continue;
                            }
                        }
                        frontier_phi_72_pred = _3387;
                        frontier_phi_72_pred_1 = _3386;
                        frontier_phi_72_pred_2 = _3385;
                        frontier_phi_72_pred_3 = _3384;
                        frontier_phi_72_pred_4 = _3383;
                        frontier_phi_72_pred_5 = _3382;
                    }
                    _3055 = frontier_phi_72_pred;
                    _3053 = frontier_phi_72_pred_1;
                    _3051 = frontier_phi_72_pred_2;
                    _3049 = frontier_phi_72_pred_3;
                    _3047 = frontier_phi_72_pred_4;
                    _3045 = frontier_phi_72_pred_5;
                    uint _3190 = _3189 + 1u;
                    if (_3190 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3183 = _3045;
                        _3184 = _3047;
                        _3185 = _3049;
                        _3186 = _3051;
                        _3187 = _3053;
                        _3188 = _3055;
                        _3189 = _3190;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _3055;
                frontier_phi_60_61_ladder_1 = _3053;
                frontier_phi_60_61_ladder_2 = _3049;
                frontier_phi_60_61_ladder_3 = _3047;
                frontier_phi_60_61_ladder_4 = _3045;
                frontier_phi_60_61_ladder_5 = _3051;
            }
            else
            {
                frontier_phi_60_61_ladder = _2941;
                frontier_phi_60_61_ladder_1 = _2939;
                frontier_phi_60_61_ladder_2 = _2935;
                frontier_phi_60_61_ladder_3 = _2933;
                frontier_phi_60_61_ladder_4 = _2931;
                frontier_phi_60_61_ladder_5 = _2937;
            }
            _3044 = frontier_phi_60_61_ladder_4;
            _3046 = frontier_phi_60_61_ladder_3;
            _3048 = frontier_phi_60_61_ladder_2;
            _3050 = frontier_phi_60_61_ladder_5;
            _3052 = frontier_phi_60_61_ladder_1;
            _3054 = frontier_phi_60_61_ladder;
        }
        float _3059 = isnan(1.0) ? _856 : (isnan(_856) ? 1.0 : min(_856, 1.0));
        _2864 = (_3059 * _3050) + _2395;
        _2866 = (_3059 * _3052) + _2397;
        _2868 = (_3059 * _3054) + _2399;
        _2870 = ((_3044 * 0.039999999105930328369140625) * _3059) + _2718;
        _2872 = ((_3046 * 0.039999999105930328369140625) * _3059) + _2720;
        _2874 = ((_3048 * 0.039999999105930328369140625) * _3059) + _2722;
    }
    else
    {
        _2864 = _2395;
        _2866 = _2397;
        _2868 = _2399;
        _2870 = _2718;
        _2872 = _2720;
        _2874 = _2722;
    }
    float _4801 = isnan(0.0) ? _841 : (isnan(_841) ? 0.0 : max(_841, 0.0));
    float _4812 = isnan(0.0) ? _842 : (isnan(_842) ? 0.0 : max(_842, 0.0));
    float _4823 = isnan(0.0) ? _843 : (isnan(_843) ? 0.0 : max(_843, 0.0));
    uint _2894 = _273 + 6u;
    float _2902 = _793 / cbSceneParam._m0[86u].x;
    float _2903 = _794 / cbSceneParam._m0[86u].y;
    vec4 _2917 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2902, _2903, (log2((isnan(cbSceneParam._m0[77u].w) ? _727 : (isnan(_727) ? cbSceneParam._m0[77u].w : min(_727, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2919 = _2917.x;
    float _2920 = _2917.y;
    float _2921 = _2917.z;
    float _2922 = _2917.w;
    float _2994;
    float _2996;
    float _2998;
    float _3000;
    if (_727 > cbSceneParam._m0[78u].w)
    {
        float _2956 = isnan(_727) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _727 : min(cbSceneParam._m0[80u].w, _727));
        float _2957 = _2956 / _727;
        float _2968 = _2957 * _778;
        float _2969 = _779 * _2957;
        float _2970 = (-0.0) - _2969;
        float _2972 = _2957 * _780;
        float _2974 = (cbSceneParam._m0[77u].w * _2970) / _2956;
        float _2975 = _2974 + cbSceneParam._m0[79u].w;
        float _2976 = cbSceneParam._m0[79u].w - _2969;
        float _2982 = sqrt(((_2968 * _2968) + (_2969 * _2969)) + (_2972 * _2972));
        float _2985 = (1.0 - (cbSceneParam._m0[77u].w / _2956)) * _2982;
        float _2990 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2992 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3145;
        if (abs((_2970 - _2974) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3145 = ((((_2975 > 0.0) ? exp2(_2990 * _2975) : (2.0 - exp2(_2992 * _2975))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2985;
        }
        else
        {
            float _3105 = 1.0 / cbSceneParam._m0[80u].x;
            float _3106 = isnan(_2976) ? _2975 : (isnan(_2975) ? _2976 : max(_2975, _2976));
            float _3107 = isnan(_2976) ? _2975 : (isnan(_2975) ? _2976 : min(_2975, _2976));
            float _3116 = isnan(0.0) ? _3106 : (isnan(_3106) ? 0.0 : min(_3106, 0.0));
            float _3117 = isnan(0.0) ? _3107 : (isnan(_3107) ? 0.0 : min(_3107, 0.0));
            _3145 = ((abs(_2982 / _2970) * cbSceneParam._m0[80u].y) * ((((_3116 - _3117) * 2.0) - ((exp2(_2990 * (isnan(0.0) ? _3106 : (isnan(_3106) ? 0.0 : max(_3106, 0.0)))) - exp2(_2990 * (isnan(0.0) ? _3107 : (isnan(_3107) ? 0.0 : max(_3107, 0.0))))) * _3105)) - ((exp2(_2992 * _3116) - exp2(_2992 * _3117)) * _3105))) + (_2985 * cbSceneParam._m0[80u].z);
        }
        vec4 _3147 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2902, _2903, 1.0), 0.0);
        float _3156 = exp2((_3145 * (-1.44269502162933349609375)) * (1.0 - _3147.w));
        float _3157 = log2(_3156);
        float _3173 = log2(_2922);
        _2994 = (exp2(_3173 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3157 * cbSceneParam._m0[78u].x)) * _3147.x) / cbSceneParam._m0[78u].x)) + _2919;
        _2996 = (exp2(_3173 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3157 * cbSceneParam._m0[78u].y)) * _3147.y) / cbSceneParam._m0[78u].y)) + _2920;
        _2998 = (exp2(_3173 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3157 * cbSceneParam._m0[78u].z)) * _3147.z) / cbSceneParam._m0[78u].z)) + _2921;
        _3000 = _3156 * _2922;
    }
    else
    {
        _2994 = _2919;
        _2996 = _2920;
        _2998 = _2921;
        _3000 = _2922;
    }
    float _3012 = roundEven(cbMatDynParam._m0[0u].y);
    bool _3013 = _3012 == 3.0;
    float _3014 = log2(_3000);
    float _3021 = exp2(_3014 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4801 : (isnan(_4801) ? 1.0 : min(_4801, 1.0))) * (_2864 + ((isnan(0.0) ? _1582 : (isnan(_1582) ? 0.0 : max(_1582, 0.0))) * _856))) + ((_2870 + ((isnan(0.0) ? _1876 : (isnan(_1876) ? 0.0 : max(_1876, 0.0))) * _1661)) * cbPerFrame._m0[3u].x));
    float _3022 = exp2(_3014 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4812 : (isnan(_4812) ? 1.0 : min(_4812, 1.0))) * (_2866 + ((isnan(0.0) ? _1585 : (isnan(_1585) ? 0.0 : max(_1585, 0.0))) * _856))) + ((_2872 + ((isnan(0.0) ? _1879 : (isnan(_1879) ? 0.0 : max(_1879, 0.0))) * _1661)) * cbPerFrame._m0[3u].x));
    float _3023 = exp2(_3014 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4823 : (isnan(_4823) ? 1.0 : min(_4823, 1.0))) * (_2868 + ((isnan(0.0) ? _1588 : (isnan(_1588) ? 0.0 : max(_1588, 0.0))) * _856))) + ((_2874 + ((isnan(0.0) ? _1882 : (isnan(_1882) ? 0.0 : max(_1882, 0.0))) * _1661)) * cbPerFrame._m0[3u].x));
    float _3032 = (_3012 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _3032 * (_3013 ? _3021 : (_3021 + (cbSceneParam._m0[72u].w * _2994)));
    SV_Target.y = _3032 * (_3013 ? _3022 : (_3022 + (cbSceneParam._m0[72u].w * _2996)));
    SV_Target.z = _3032 * (_3013 ? _3023 : (_3023 + (cbSceneParam._m0[72u].w * _2998)));
    SV_Target.w = cbInstanceData._m0[_2894].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2894].w;
}


