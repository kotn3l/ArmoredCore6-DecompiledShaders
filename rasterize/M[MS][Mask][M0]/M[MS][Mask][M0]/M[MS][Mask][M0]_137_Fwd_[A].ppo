#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_0;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 14) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_29;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_10;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_6;
layout(set = 0, binding = 23) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_8;
layout(set = 0, binding = 24) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_9;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1535;
float _3891;
float _3892;
float _3893;
float _3894;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _237 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _238 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _239 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _245 = inversesqrt(dot(vec3(_237, _238, _239), vec3(_237, _238, _239)));
    float _252 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _259 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _265 = uint(roundEven(NORMAL.w)) * 13u;
    uint _270 = _265 + 1u;
    uint _274 = _265 + 2u;
    float _283 = sqrt(((cbInstanceData._m0[_270].x * cbInstanceData._m0[_270].x) + (cbInstanceData._m0[_265].x * cbInstanceData._m0[_265].x)) + (cbInstanceData._m0[_274].x * cbInstanceData._m0[_274].x));
    float _284 = _283 * TEXCOORD.z;
    float _285 = _283 * TEXCOORD.w;
    vec4 _304 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _328 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _333 = _328.x * cbMtdParam._m0[11u].x;
    float _334 = _328.y * cbMtdParam._m0[11u].y;
    float _335 = _328.z * cbMtdParam._m0[11u].z;
    vec4 _354 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _284) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _285) + cbTextureTilingScale._m0[5u].w));
    vec4 _373 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _413 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _415 = _413.x;
    float _427 = dot(vec4(_415, _413.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _444 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _373.x) * 2.0) - ((((_415 - _427) * cbMtdParam._m0[24u].z) + _427) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3903 = isnan(0.0) ? _444 : (isnan(_444) ? 0.0 : max(_444, 0.0));
    float _445 = isnan(1.0) ? _3903 : (isnan(_3903) ? 1.0 : min(_3903, 1.0));
    float _452 = (_445 * ((_354.x * cbMtdParam._m0[12u].x) - _333)) + _333;
    float _453 = (_445 * ((_354.y * cbMtdParam._m0[12u].y) - _334)) + _334;
    float _454 = (_445 * ((_354.z * cbMtdParam._m0[12u].z) - _335)) + _335;
    vec4 _471 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _284) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _285) + cbTextureTilingScale._m0[3u].w));
    vec4 _491 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _493 = _491.x;
    float _503 = dot(vec4(_493, _491.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _517 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _373.y) * 2.0) - ((((_493 - _503) * cbMtdParam._m0[24u].z) + _503) * cbMtdParam._m0[20u].w))) + 1.0;
    float _3914 = isnan(0.0) ? _517 : (isnan(_517) ? 0.0 : max(_517, 0.0));
    float _518 = isnan(1.0) ? _3914 : (isnan(_3914) ? 1.0 : min(_3914, 1.0));
    float _525 = (_518 * ((_471.x * cbMtdParam._m0[13u].x) - _452)) + _452;
    float _526 = (_518 * ((_471.y * cbMtdParam._m0[13u].y) - _453)) + _453;
    float _527 = (_518 * ((_471.z * cbMtdParam._m0[13u].z) - _454)) + _454;
    vec4 _545 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_9, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[24u].x * _284) + cbTextureTilingScale._m0[24u].z, (cbTextureTilingScale._m0[24u].y * _285) + cbTextureTilingScale._m0[24u].w));
    vec4 _562 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[25u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _564 = _562.x;
    float _574 = dot(vec4(_564, _562.yzw), vec4(cbMtdParam._m0[30u].w, cbMtdParam._m0[31u].xy, 0.0));
    float _586 = ((cbMtdParam._m0[25u].x * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.z) - _373.z) * 2.0) - ((((_564 - _574) * cbMtdParam._m0[24u].z) + _574) * cbMtdParam._m0[20u].z))) + 1.0;
    float _3925 = isnan(0.0) ? _586 : (isnan(_586) ? 0.0 : max(_586, 0.0));
    float _587 = isnan(1.0) ? _3925 : (isnan(_3925) ? 1.0 : min(_3925, 1.0));
    float _600 = ((cbMtdParam._m0[9u].x * 4.55000019073486328125) * _304.x) * ((_587 * ((_545.x * cbMtdParam._m0[14u].x) - _525)) + _525);
    float _603 = ((cbMtdParam._m0[9u].y * 4.55000019073486328125) * _304.y) * ((_587 * ((_545.y * cbMtdParam._m0[14u].y) - _526)) + _526);
    float _606 = ((cbMtdParam._m0[9u].z * 4.55000019073486328125) * _304.z) * ((_587 * ((_545.z * cbMtdParam._m0[14u].z) - _527)) + _527);
    vec4 _624 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _284) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _285) + cbTextureTilingScale._m0[14u].w));
    vec4 _644 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _284) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _285) + cbTextureTilingScale._m0[4u].w));
    vec4 _661 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _663 = _661.x;
    float _664 = _661.y;
    float _665 = _661.z;
    float _672 = ((_644.x - _663) * _445) + _663;
    float _673 = ((_644.y - _664) * _445) + _664;
    float _674 = ((_644.z - _665) * _445) + _665;
    vec4 _686 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _284) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _285) + cbTextureTilingScale._m0[2u].w));
    float _697 = ((_686.x - _672) * _518) + _672;
    float _698 = ((_686.y - _673) * _518) + _673;
    float _699 = ((_686.z - _674) * _518) + _674;
    vec4 _711 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[23u].x * _284) + cbTextureTilingScale._m0[23u].z, (cbTextureTilingScale._m0[23u].y * _285) + cbTextureTilingScale._m0[23u].w));
    float _724 = ((_711.z - _699) * _587) + _699;
    float _727 = ((((_711.x - _697) * _587) + _697) * 2.0) + (-1.0);
    float _729 = ((((_711.y - _698) * _587) + _698) * 2.0) + (-1.0);
    float _730 = dot(vec2(_727, _729), vec2(_727, _729));
    float _3936 = isnan(0.0) ? _730 : (isnan(_730) ? 0.0 : max(_730, 0.0));
    float _735 = sqrt(1.0 - (isnan(1.0) ? _3936 : (isnan(_3936) ? 1.0 : min(_3936, 1.0))));
    vec4 _749 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _774 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _284) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _285) + cbTextureTilingScale._m0[11u].w));
    float _776 = _774.x;
    float _777 = 1.0 - _776;
    float _783 = isnan(-1.0) ? cbMtdParam._m0[24u].x : (isnan(cbMtdParam._m0[24u].x) ? (-1.0) : max(cbMtdParam._m0[24u].x, -1.0));
    float _786 = ((isnan(0.0) ? _783 : (isnan(_783) ? 0.0 : min(_783, 0.0))) * TEXCOORD_8.x) + TEXCOORD_8.w;
    float _795 = (_786 - ((((((_776 - _777) * cbMtdParam._m0[24u].w) + _777) + 0.00999999977648258209228515625) * cbMtdParam._m0[21u].z) * (1.0 - _786))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3957 = isnan(0.0) ? _795 : (isnan(_795) ? 0.0 : max(_795, 0.0));
    float _796 = isnan(1.0) ? _3957 : (isnan(_3957) ? 1.0 : min(_3957, 1.0));
    float _803 = (_796 * ((_624.x * cbMtdParam._m0[18u].x) - _600)) + _600;
    float _804 = (_796 * ((_624.y * cbMtdParam._m0[18u].y) - _603)) + _603;
    float _805 = (_796 * ((_624.z * cbMtdParam._m0[18u].z) - _606)) + _606;
    vec4 _817 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _284) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _285) + cbTextureTilingScale._m0[19u].w));
    float _819 = _817.x;
    float _820 = 1.0 - _819;
    float _847 = (TEXCOORD_8.x - ((cbMtdParam._m0[22u].w * (1.0 - TEXCOORD_8.x)) * ((((_819 - _820) * cbMtdParam._m0[24u].y) + _820) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3968 = isnan(0.0) ? _847 : (isnan(_847) ? 0.0 : max(_847, 0.0));
    float _848 = isnan(1.0) ? _3968 : (isnan(_3968) ? 1.0 : min(_3968, 1.0));
    float _856 = ((((cbMtdParam._m0[10u].x - _803) * TEXCOORD_8.x) * cbMtdParam._m0[23u].w) * _848) + _803;
    float _857 = ((((cbMtdParam._m0[10u].y - _804) * TEXCOORD_8.y) * cbMtdParam._m0[23u].w) * _848) + _804;
    float _858 = (((cbMtdParam._m0[23u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _805)) * _848) + _805;
    float _862 = (cbMtdParam._m0[19u].w * (_749.z - _724)) + _724;
    vec4 _876 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _284) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _285) + cbTextureTilingScale._m0[15u].w));
    float _883 = (_876.x * 2.0) + (-1.0);
    float _884 = (_876.y * 2.0) + (-1.0);
    float _885 = dot(vec2(_883, _884), vec2(_883, _884));
    float _3979 = isnan(0.0) ? _885 : (isnan(_885) ? 0.0 : max(_885, 0.0));
    float _893 = (_796 * (_876.z - _862)) + _862;
    float _896 = ((cbMtdParam._m0[23u].y - _893) * _848) + _893;
    vec4 _915 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _284) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _285) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _921 = (_915.x * 2.0) + (-1.0);
    float _922 = (_915.y * 2.0) + (-1.0);
    float _923 = dot(vec2(_921, _922), vec2(_921, _922));
    float _3990 = isnan(0.0) ? _923 : (isnan(_923) ? 0.0 : max(_923, 0.0));
    float _931 = (((_749.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _727;
    float _932 = (((_749.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _729;
    float _944 = (((_883 - _931) + (cbMtdParam._m0[21u].x * _931)) * _796) + _931;
    float _945 = (((_884 - _932) + (cbMtdParam._m0[21u].x * _932)) * _796) + _932;
    float _946 = (_796 * (sqrt(1.0 - (isnan(1.0) ? _3979 : (isnan(_3979) ? 1.0 : min(_3979, 1.0)))) - _735)) + _735;
    float _957 = (((_921 - _944) + (_944 * cbMtdParam._m0[22u].z)) * _848) + _944;
    float _958 = (((_922 - _945) + (_945 * cbMtdParam._m0[22u].z)) * _848) + _945;
    float _959 = ((sqrt(1.0 - (isnan(1.0) ? _3990 : (isnan(_3990) ? 1.0 : min(_3990, 1.0)))) - _946) * _848) + _946;
    float _961 = cbMtdParam._m0[22u].x + _749.w;
    float _964 = fma(_959, _252 * NORMAL.x, fma(_958, _259 * TANGENT.x, (_245 * _237) * _957));
    float _967 = fma(_959, _252 * NORMAL.y, fma(_958, _259 * TANGENT.y, (_245 * _238) * _957));
    float _970 = fma(_959, _252 * NORMAL.z, fma(_958, _259 * TANGENT.z, (_245 * _239) * _957));
    float _974 = inversesqrt(dot(vec3(_964, _967, _970), vec3(_964, _967, _970)));
    float _975 = _974 * _964;
    float _976 = _974 * _967;
    float _977 = _974 * _970;
    float _4001 = isnan(0.0) ? _896 : (isnan(_896) ? 0.0 : max(_896, 0.0));
    float _978 = isnan(1.0) ? _4001 : (isnan(_4001) ? 1.0 : min(_4001, 1.0));
    float _4012 = isnan(0.0) ? _961 : (isnan(_961) ? 0.0 : max(_961, 0.0));
    float _4023 = isnan(0.0) ? _856 : (isnan(_856) ? 0.0 : max(_856, 0.0));
    float _4034 = isnan(0.0) ? _857 : (isnan(_857) ? 0.0 : max(_857, 0.0));
    float _4045 = isnan(0.0) ? _858 : (isnan(_858) ? 0.0 : max(_858, 0.0));
    float _996 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _1036 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _1046 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _1036);
    float _1047 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _1036);
    float _1048 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _1036);
    float _1052 = inversesqrt(dot(vec3(_1046, _1047, _1048), vec3(_1046, _1047, _1048)));
    float _1053 = _1046 * _1052;
    float _1054 = _1047 * _1052;
    float _1055 = _1048 * _1052;
    vec4 _1060 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _1062 = _1060.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1216 = sqrt(((_1046 * _1046) + (_1047 * _1047)) + (_1048 * _1048));
        float _1222 = (cbMatDynParam._m0[5u].x * _1216) + cbMatDynParam._m0[5u].y;
        float _4056 = isnan(0.0) ? _1222 : (isnan(_1222) ? 0.0 : max(_1222, 0.0));
        float _1223 = isnan(1.0) ? _4056 : (isnan(_4056) ? 1.0 : min(_4056, 1.0));
        float _1227 = (cbMatDynParam._m0[5u].z * _1216) + cbMatDynParam._m0[5u].w;
        float _4067 = isnan(0.0) ? _1227 : (isnan(_1227) ? 0.0 : max(_1227, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4067 : (isnan(_4067) ? 1.0 : min(_4067, 1.0))) - _1223)) + _1223) < ((_1062 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _1073 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1074 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1092 = fma(_977, cbSceneParam._m0[5u].z, fma(_976, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _975));
    float _1095 = fma(_977, cbSceneParam._m0[6u].z, fma(_976, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _975));
    float _1098 = fma(_977, cbSceneParam._m0[7u].z, fma(_976, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _975));
    uint _1111 = _265 + 9u;
    uint _1112 = _1111 + uint(cbMatDynParam._m0[0u].w);
    float _1118 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4023 : (isnan(_4023) ? 1.0 : min(_4023, 1.0)))) * cbInstanceData._m0[_1112].x;
    float _1119 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4034 : (isnan(_4034) ? 1.0 : min(_4034, 1.0)))) * cbInstanceData._m0[_1112].y;
    float _1120 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4045 : (isnan(_4045) ? 1.0 : min(_4045, 1.0)))) * cbInstanceData._m0[_1112].z;
    float _4078 = isnan(0.0) ? _1118 : (isnan(_1118) ? 0.0 : max(_1118, 0.0));
    float _1121 = isnan(1.0) ? _4078 : (isnan(_4078) ? 1.0 : min(_4078, 1.0));
    float _4089 = isnan(0.0) ? _1119 : (isnan(_1119) ? 0.0 : max(_1119, 0.0));
    float _1122 = isnan(1.0) ? _4089 : (isnan(_4089) ? 1.0 : min(_4089, 1.0));
    float _4100 = isnan(0.0) ? _1120 : (isnan(_1120) ? 0.0 : max(_1120, 0.0));
    float _1123 = isnan(1.0) ? _4100 : (isnan(_4100) ? 1.0 : min(_4100, 1.0));
    vec4 _1132 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1073, cbSceneParam._m0[86u].y * _1074));
    float _1136 = ((isnan(1.0) ? _4012 : (isnan(_4012) ? 1.0 : min(_4012, 1.0))) * TEXCOORD_5.w) * _1132.x;
    float _1137 = dot(vec3(_975, _976, _977), vec3(_1053, _1054, _1055));
    float _1140 = _1137 * 2.0;
    float _1144 = (_1140 * _975) - _1053;
    float _1145 = (_1140 * _976) - _1054;
    float _1146 = (_1140 * _977) - _1055;
    float _1150 = abs(dot(vec3(_1053, _1054, _1055), vec3(_975, _976, _977)));
    float _4111 = isnan(0.0) ? _1150 : (isnan(_1150) ? 0.0 : max(_1150, 0.0));
    float _1152 = sqrt(_978);
    float _1165 = exp2((_1152 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4111 : (isnan(_4111) ? 1.0 : min(_4111, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1152 * 3.0));
    float _1197 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1201 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1205 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1534;
    float _1536;
    float _1537;
    float _1538;
    float _1539;
    float _1540;
    float _1541;
    float _1542;
    float _1543;
    float _1544;
    float _1545;
    float _1546;
    float _1547;
    float _1548;
    float _1549;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1259 = fma(_1205, cbModelParam._m0[26u].z, fma(_1201, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1197));
        float _1263 = fma(_1205, cbModelParam._m0[27u].z, fma(_1201, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1197));
        float _1267 = fma(_1205, cbModelParam._m0[28u].z, fma(_1201, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1197));
        float _1292 = _1197 + _975;
        float _1293 = _1201 + _976;
        float _1294 = _1205 + _977;
        float _1304 = fma(_1294, cbModelParam._m0[26u].z, fma(_1293, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1292)) - _1259;
        float _1305 = fma(_1294, cbModelParam._m0[27u].z, fma(_1293, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1292)) - _1263;
        float _1306 = fma(_1294, cbModelParam._m0[28u].z, fma(_1293, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1292)) - _1267;
        float _1310 = inversesqrt(dot(vec3(_1304, _1305, _1306), vec3(_1304, _1305, _1306)));
        float _1323 = ((_1310 * _1304) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1259 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1324 = ((_1310 * _1305) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1263 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1325 = ((_1310 * _1306) / cbModelParam._m0[34u].z) + ((((((_1267 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1328 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1323, _1324, _1325), 0.0);
        vec4 _1335 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1323, _1324, _1325), 0.0);
        vec4 _1342 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1323, _1324, _1325), 0.0);
        vec4 _1349 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1323, _1324, _1325), 0.0);
        float _1362 = exp2((_1328.w + (-0.5)) * 20.0) * 2.0;
        float _1363 = _1362 * (_1328.x + (-0.5));
        float _1364 = _1362 * (_1328.y + (-0.5));
        float _1365 = _1362 * (_1328.z + (-0.5));
        float _1372 = exp2((_1335.w + (-0.5)) * 20.0) * 2.0;
        float _1373 = _1372 * (_1335.x + (-0.5));
        float _1374 = _1372 * (_1335.y + (-0.5));
        float _1375 = _1372 * (_1335.z + (-0.5));
        float _1382 = exp2((_1342.w + (-0.5)) * 20.0) * 2.0;
        float _1383 = _1382 * (_1342.x + (-0.5));
        float _1384 = _1382 * (_1342.y + (-0.5));
        float _1385 = _1382 * (_1342.z + (-0.5));
        float _1392 = exp2((_1349.w + (-0.5)) * 20.0) * 2.0;
        float _1393 = _1392 * (_1349.x + (-0.5));
        float _1394 = _1392 * (_1349.y + (-0.5));
        float _1395 = _1392 * (_1349.z + (-0.5));
        float _1396 = isnan(0.0) ? _1393 : (isnan(_1393) ? 0.0 : max(_1393, 0.0));
        float _1397 = isnan(0.0) ? _1394 : (isnan(_1394) ? 0.0 : max(_1394, 0.0));
        float _1398 = isnan(0.0) ? _1395 : (isnan(_1395) ? 0.0 : max(_1395, 0.0));
        float _1399 = _1363 * 0.5;
        float _1400 = _1373 * 0.5;
        float _1401 = _1383 * 0.5;
        float _1402 = dot(vec3(_1399, _1400, _1401), vec3(_1399, _1400, _1401));
        float _1407 = (_1402 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1402);
        float _1416 = (dot(vec3(_975, _976, _977), vec3(_1407 * _1399, _1407 * _1400, _1407 * _1401)) + 1.0) * 0.5;
        float _4137 = isnan(0.0) ? _1416 : (isnan(_1416) ? 0.0 : max(_1416, 0.0));
        float _1426 = sqrt(((_1400 * _1400) + (_1399 * _1399)) + (_1401 * _1401)) / (_1396 + 9.9999997473787516355514526367188e-06);
        float _4148 = isnan(0.0) ? _1426 : (isnan(_1426) ? 0.0 : max(_1426, 0.0));
        float _1427 = isnan(1.0) ? _4148 : (isnan(_4148) ? 1.0 : min(_4148, 1.0));
        float _1428 = _1427 * 2.0;
        float _1432 = (1.0 - _1427) / (_1427 + 1.0);
        float _4159 = isnan(0.0) ? _1432 : (isnan(_1432) ? 0.0 : max(_1432, 0.0));
        float _1433 = isnan(1.0) ? _4159 : (isnan(_4159) ? 1.0 : min(_4159, 1.0));
        float _1442 = ((((1.0 - _1433) * (_1428 + 2.0)) * exp2(log2(isnan(1.0) ? _4137 : (isnan(_4137) ? 1.0 : min(_4137, 1.0))) * (_1428 + 1.0))) + _1433) * _1396;
        float _1443 = _1364 * 0.5;
        float _1444 = _1374 * 0.5;
        float _1445 = _1384 * 0.5;
        float _1446 = dot(vec3(_1443, _1444, _1445), vec3(_1443, _1444, _1445));
        float _1451 = (_1446 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1446);
        float _1459 = (dot(vec3(_975, _976, _977), vec3(_1451 * _1443, _1451 * _1444, _1451 * _1445)) + 1.0) * 0.5;
        float _4170 = isnan(0.0) ? _1459 : (isnan(_1459) ? 0.0 : max(_1459, 0.0));
        float _1468 = sqrt(((_1444 * _1444) + (_1443 * _1443)) + (_1445 * _1445)) / (_1397 + 9.9999997473787516355514526367188e-06);
        float _4181 = isnan(0.0) ? _1468 : (isnan(_1468) ? 0.0 : max(_1468, 0.0));
        float _1469 = isnan(1.0) ? _4181 : (isnan(_4181) ? 1.0 : min(_4181, 1.0));
        float _1470 = _1469 * 2.0;
        float _1474 = (1.0 - _1469) / (_1469 + 1.0);
        float _4192 = isnan(0.0) ? _1474 : (isnan(_1474) ? 0.0 : max(_1474, 0.0));
        float _1475 = isnan(1.0) ? _4192 : (isnan(_4192) ? 1.0 : min(_4192, 1.0));
        float _1484 = ((((1.0 - _1475) * (_1470 + 2.0)) * exp2(log2(isnan(1.0) ? _4170 : (isnan(_4170) ? 1.0 : min(_4170, 1.0))) * (_1470 + 1.0))) + _1475) * _1397;
        float _1485 = _1365 * 0.5;
        float _1486 = _1375 * 0.5;
        float _1487 = _1385 * 0.5;
        float _1488 = dot(vec3(_1485, _1486, _1487), vec3(_1485, _1486, _1487));
        float _1493 = (_1488 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1488);
        float _1501 = (dot(vec3(_975, _976, _977), vec3(_1493 * _1485, _1493 * _1486, _1493 * _1487)) + 1.0) * 0.5;
        float _4203 = isnan(0.0) ? _1501 : (isnan(_1501) ? 0.0 : max(_1501, 0.0));
        float _1510 = sqrt(((_1486 * _1486) + (_1485 * _1485)) + (_1487 * _1487)) / (_1398 + 9.9999997473787516355514526367188e-06);
        float _4214 = isnan(0.0) ? _1510 : (isnan(_1510) ? 0.0 : max(_1510, 0.0));
        float _1511 = isnan(1.0) ? _4214 : (isnan(_4214) ? 1.0 : min(_4214, 1.0));
        float _1512 = _1511 * 2.0;
        float _1516 = (1.0 - _1511) / (_1511 + 1.0);
        float _4225 = isnan(0.0) ? _1516 : (isnan(_1516) ? 0.0 : max(_1516, 0.0));
        float _1517 = isnan(1.0) ? _4225 : (isnan(_4225) ? 1.0 : min(_4225, 1.0));
        float _1526 = ((((1.0 - _1517) * (_1512 + 2.0)) * exp2(log2(isnan(1.0) ? _4203 : (isnan(_4203) ? 1.0 : min(_4203, 1.0))) * (_1512 + 1.0))) + _1517) * _1398;
        _1534 = _1365;
        _1536 = _1364;
        _1537 = _1363;
        _1538 = _1375;
        _1539 = _1374;
        _1540 = _1373;
        _1541 = _1385;
        _1542 = _1384;
        _1543 = _1383;
        _1544 = _1398;
        _1545 = _1397;
        _1546 = _1396;
        _1547 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1442 : (isnan(_1442) ? 0.0 : max(_1442, 0.0)));
        _1548 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1484 : (isnan(_1484) ? 0.0 : max(_1484, 0.0)));
        _1549 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1526 : (isnan(_1526) ? 0.0 : max(_1526, 0.0)));
    }
    else
    {
        _1534 = _1535;
        _1536 = _1535;
        _1537 = _1535;
        _1538 = _1535;
        _1539 = _1535;
        _1540 = _1535;
        _1541 = _1535;
        _1542 = _1535;
        _1543 = _1535;
        _1544 = _1535;
        _1545 = _1535;
        _1546 = _1535;
        _1547 = 0.0;
        _1548 = 0.0;
        _1549 = 0.0;
    }
    float _1844;
    float _1845;
    float _1846;
    float _1847;
    float _1848;
    float _1849;
    float _1850;
    float _1851;
    float _1852;
    float _1853;
    float _1854;
    float _1855;
    float _1856;
    float _1857;
    float _1858;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1575 = fma(_1205, cbModelParam._m0[30u].z, fma(_1201, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1197));
        float _1579 = fma(_1205, cbModelParam._m0[31u].z, fma(_1201, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1197));
        float _1583 = fma(_1205, cbModelParam._m0[32u].z, fma(_1201, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1197));
        float _1606 = _1197 + _975;
        float _1607 = _1201 + _976;
        float _1608 = _1205 + _977;
        float _1618 = fma(_1608, cbModelParam._m0[30u].z, fma(_1607, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1606)) - _1575;
        float _1619 = fma(_1608, cbModelParam._m0[31u].z, fma(_1607, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1606)) - _1579;
        float _1620 = fma(_1608, cbModelParam._m0[32u].z, fma(_1607, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1606)) - _1583;
        float _1624 = inversesqrt(dot(vec3(_1618, _1619, _1620), vec3(_1618, _1619, _1620)));
        float _1637 = ((_1624 * _1618) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1575 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1638 = ((_1624 * _1619) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1579 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1639 = ((_1624 * _1620) / cbModelParam._m0[35u].z) + ((((((_1583 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1641 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1637, _1638, _1639), 0.0);
        vec4 _1648 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1637, _1638, _1639), 0.0);
        vec4 _1655 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1637, _1638, _1639), 0.0);
        vec4 _1662 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1637, _1638, _1639), 0.0);
        float _1674 = exp2((_1641.w + (-0.5)) * 20.0) * 2.0;
        float _1675 = _1674 * (_1641.x + (-0.5));
        float _1676 = _1674 * (_1641.y + (-0.5));
        float _1677 = _1674 * (_1641.z + (-0.5));
        float _1684 = exp2((_1648.w + (-0.5)) * 20.0) * 2.0;
        float _1685 = _1684 * (_1648.x + (-0.5));
        float _1686 = _1684 * (_1648.y + (-0.5));
        float _1687 = _1684 * (_1648.z + (-0.5));
        float _1694 = exp2((_1655.w + (-0.5)) * 20.0) * 2.0;
        float _1695 = _1694 * (_1655.x + (-0.5));
        float _1696 = _1694 * (_1655.y + (-0.5));
        float _1697 = _1694 * (_1655.z + (-0.5));
        float _1704 = exp2((_1662.w + (-0.5)) * 20.0) * 2.0;
        float _1705 = _1704 * (_1662.x + (-0.5));
        float _1706 = _1704 * (_1662.y + (-0.5));
        float _1707 = _1704 * (_1662.z + (-0.5));
        float _1708 = isnan(0.0) ? _1705 : (isnan(_1705) ? 0.0 : max(_1705, 0.0));
        float _1709 = isnan(0.0) ? _1706 : (isnan(_1706) ? 0.0 : max(_1706, 0.0));
        float _1710 = isnan(0.0) ? _1707 : (isnan(_1707) ? 0.0 : max(_1707, 0.0));
        float _1711 = _1675 * 0.5;
        float _1712 = _1685 * 0.5;
        float _1713 = _1695 * 0.5;
        float _1714 = dot(vec3(_1711, _1712, _1713), vec3(_1711, _1712, _1713));
        float _1719 = (_1714 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1714);
        float _1727 = (dot(vec3(_975, _976, _977), vec3(_1719 * _1711, _1719 * _1712, _1719 * _1713)) + 1.0) * 0.5;
        float _4266 = isnan(0.0) ? _1727 : (isnan(_1727) ? 0.0 : max(_1727, 0.0));
        float _1736 = sqrt(((_1712 * _1712) + (_1711 * _1711)) + (_1713 * _1713)) / (_1708 + 9.9999997473787516355514526367188e-06);
        float _4277 = isnan(0.0) ? _1736 : (isnan(_1736) ? 0.0 : max(_1736, 0.0));
        float _1737 = isnan(1.0) ? _4277 : (isnan(_4277) ? 1.0 : min(_4277, 1.0));
        float _1738 = _1737 * 2.0;
        float _1742 = (1.0 - _1737) / (_1737 + 1.0);
        float _4288 = isnan(0.0) ? _1742 : (isnan(_1742) ? 0.0 : max(_1742, 0.0));
        float _1743 = isnan(1.0) ? _4288 : (isnan(_4288) ? 1.0 : min(_4288, 1.0));
        float _1752 = ((((1.0 - _1743) * (_1738 + 2.0)) * exp2(log2(isnan(1.0) ? _4266 : (isnan(_4266) ? 1.0 : min(_4266, 1.0))) * (_1738 + 1.0))) + _1743) * _1708;
        float _1753 = _1676 * 0.5;
        float _1754 = _1686 * 0.5;
        float _1755 = _1696 * 0.5;
        float _1756 = dot(vec3(_1753, _1754, _1755), vec3(_1753, _1754, _1755));
        float _1761 = (_1756 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1756);
        float _1769 = (dot(vec3(_975, _976, _977), vec3(_1761 * _1753, _1761 * _1754, _1761 * _1755)) + 1.0) * 0.5;
        float _4299 = isnan(0.0) ? _1769 : (isnan(_1769) ? 0.0 : max(_1769, 0.0));
        float _1778 = sqrt(((_1754 * _1754) + (_1753 * _1753)) + (_1755 * _1755)) / (_1709 + 9.9999997473787516355514526367188e-06);
        float _4310 = isnan(0.0) ? _1778 : (isnan(_1778) ? 0.0 : max(_1778, 0.0));
        float _1779 = isnan(1.0) ? _4310 : (isnan(_4310) ? 1.0 : min(_4310, 1.0));
        float _1780 = _1779 * 2.0;
        float _1784 = (1.0 - _1779) / (_1779 + 1.0);
        float _4321 = isnan(0.0) ? _1784 : (isnan(_1784) ? 0.0 : max(_1784, 0.0));
        float _1785 = isnan(1.0) ? _4321 : (isnan(_4321) ? 1.0 : min(_4321, 1.0));
        float _1794 = ((((1.0 - _1785) * (_1780 + 2.0)) * exp2(log2(isnan(1.0) ? _4299 : (isnan(_4299) ? 1.0 : min(_4299, 1.0))) * (_1780 + 1.0))) + _1785) * _1709;
        float _1795 = _1677 * 0.5;
        float _1796 = _1687 * 0.5;
        float _1797 = _1697 * 0.5;
        float _1798 = dot(vec3(_1795, _1796, _1797), vec3(_1795, _1796, _1797));
        float _1803 = (_1798 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1798);
        float _1811 = (dot(vec3(_975, _976, _977), vec3(_1803 * _1795, _1803 * _1796, _1803 * _1797)) + 1.0) * 0.5;
        float _4332 = isnan(0.0) ? _1811 : (isnan(_1811) ? 0.0 : max(_1811, 0.0));
        float _1820 = sqrt(((_1796 * _1796) + (_1795 * _1795)) + (_1797 * _1797)) / (_1710 + 9.9999997473787516355514526367188e-06);
        float _4343 = isnan(0.0) ? _1820 : (isnan(_1820) ? 0.0 : max(_1820, 0.0));
        float _1821 = isnan(1.0) ? _4343 : (isnan(_4343) ? 1.0 : min(_4343, 1.0));
        float _1822 = _1821 * 2.0;
        float _1826 = (1.0 - _1821) / (_1821 + 1.0);
        float _4354 = isnan(0.0) ? _1826 : (isnan(_1826) ? 0.0 : max(_1826, 0.0));
        float _1827 = isnan(1.0) ? _4354 : (isnan(_4354) ? 1.0 : min(_4354, 1.0));
        float _1836 = ((((1.0 - _1827) * (_1822 + 2.0)) * exp2(log2(isnan(1.0) ? _4332 : (isnan(_4332) ? 1.0 : min(_4332, 1.0))) * (_1822 + 1.0))) + _1827) * _1710;
        _1844 = _1677;
        _1845 = _1676;
        _1846 = _1675;
        _1847 = _1687;
        _1848 = _1686;
        _1849 = _1685;
        _1850 = _1697;
        _1851 = _1696;
        _1852 = _1695;
        _1853 = _1710;
        _1854 = _1709;
        _1855 = _1708;
        _1856 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1752 : (isnan(_1752) ? 0.0 : max(_1752, 0.0)));
        _1857 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1794 : (isnan(_1794) ? 0.0 : max(_1794, 0.0)));
        _1858 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1836 : (isnan(_1836) ? 0.0 : max(_1836, 0.0)));
    }
    else
    {
        _1844 = _1535;
        _1845 = _1535;
        _1846 = _1535;
        _1847 = _1535;
        _1848 = _1535;
        _1849 = _1535;
        _1850 = _1535;
        _1851 = _1535;
        _1852 = _1535;
        _1853 = _1535;
        _1854 = _1535;
        _1855 = _1535;
        _1856 = 0.0;
        _1857 = 0.0;
        _1858 = 0.0;
    }
    float _1868 = (cbModelParam._m0[1u].x * (_1856 - _1547)) + _1547;
    float _1869 = (cbModelParam._m0[1u].x * (_1857 - _1548)) + _1548;
    float _1870 = (cbModelParam._m0[1u].x * (_1858 - _1549)) + _1549;
    float _1891 = fma(_1870, cbSceneParam._m0[89u].z, fma(_1869, cbSceneParam._m0[89u].y, _1868 * cbSceneParam._m0[89u].x));
    float _1894 = fma(_1870, cbSceneParam._m0[90u].z, fma(_1869, cbSceneParam._m0[90u].y, _1868 * cbSceneParam._m0[90u].x));
    float _1897 = fma(_1870, cbSceneParam._m0[91u].z, fma(_1869, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1868));
    float _1912 = _1144 * 0.5;
    float _1913 = _1145 * 0.5;
    float _1914 = _1146 * 0.5;
    float _1915 = dot(vec4(_1912, _1913, _1914, 1.0), vec4(_1846, _1849, _1852, _1855));
    float _1918 = dot(vec4(_1912, _1913, _1914, 1.0), vec4(_1845, _1848, _1851, _1854));
    float _1921 = dot(vec4(_1912, _1913, _1914, 1.0), vec4(_1844, _1847, _1850, _1853));
    float _1955;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1928 = dot(vec4(_1912, _1913, _1914, 1.0), vec4(_1534, _1538, _1541, _1544));
        float _1932 = dot(vec4(_1912, _1913, _1914, 1.0), vec4(_1536, _1539, _1542, _1545));
        float _1936 = dot(vec4(_1912, _1913, _1914, 1.0), vec4(_1537, _1540, _1543, _1546));
        float _1943 = dot(vec4(cbModelParam._m0[39u]), vec4(_1912, _1913, _1914, 1.0));
        _1955 = dot(vec3(isnan(0.0) ? _1936 : (isnan(_1936) ? 0.0 : max(_1936, 0.0)), isnan(0.0) ? _1932 : (isnan(_1932) ? 0.0 : max(_1932, 0.0)), isnan(0.0) ? _1928 : (isnan(_1928) ? 0.0 : max(_1928, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1943) ? 0.0 : (isnan(0.0) ? _1943 : max(0.0, _1943))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1955 = 1.0;
    }
    float _1966;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1957 = dot(vec4(cbModelParam._m0[40u]), vec4(_1912, _1913, _1914, 1.0));
        _1966 = dot(vec3(isnan(0.0) ? _1915 : (isnan(_1915) ? 0.0 : max(_1915, 0.0)), isnan(0.0) ? _1918 : (isnan(_1918) ? 0.0 : max(_1918, 0.0)), isnan(0.0) ? _1921 : (isnan(_1921) ? 0.0 : max(_1921, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1957) ? 0.0 : (isnan(0.0) ? _1957 : max(0.0, _1957))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1966 = 1.0;
    }
    float _1970 = (_1966 * cbModelParam._m0[1u].x) + (_1955 * (1.0 - cbModelParam._m0[1u].x));
    float _1980 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _978);
    float _1981 = isnan(_1980) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1980 : min(cbModelParam._m0[25u].z, _1980));
    float _2061;
    float _2063;
    float _2065;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _2028 = fma(_1205, cbModelParam._m0[13u].z, fma(_1201, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1197)) + cbModelParam._m0[13u].w;
        float _2032 = fma(_1205, cbModelParam._m0[14u].z, fma(_1201, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1197)) + cbModelParam._m0[14u].w;
        float _2036 = fma(_1205, cbModelParam._m0[15u].z, fma(_1201, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1197)) + cbModelParam._m0[15u].w;
        float _2039 = fma(_1146, cbModelParam._m0[13u].z, fma(_1145, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1144));
        float _2042 = fma(_1146, cbModelParam._m0[14u].z, fma(_1145, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1144));
        float _2045 = fma(_1146, cbModelParam._m0[15u].z, fma(_1145, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1144));
        float _2073;
        if (_2039 > 0.0)
        {
            _2073 = abs((1.0 - _2028) / _2039);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_2039 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_2028 + 1.0) / _2039);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _2073 = frontier_phi_17_15_ladder;
        }
        float _2273;
        if (_2042 > 0.0)
        {
            _2273 = abs((1.0 - _2032) / _2042);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_2042 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_2032 + 1.0) / _2042);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2273 = frontier_phi_26_22_ladder;
        }
        float _2516;
        if (_2045 > 0.0)
        {
            _2516 = abs((1.0 - _2036) / _2045);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_2045 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_2036 + 1.0) / _2045);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2516 = frontier_phi_38_33_ladder;
        }
        float _2518 = isnan(_2273) ? _2073 : (isnan(_2073) ? _2273 : min(_2073, _2273));
        float _2519 = isnan(_2516) ? _2518 : (isnan(_2518) ? _2516 : min(_2518, _2516));
        float _2523 = (_2519 * _2039) + _2028;
        float _2524 = (_2519 * _2042) + _2032;
        float _2525 = (_2519 * _2045) + _2036;
        float _2526 = _2519 * 9.9999997473787516355514526367188e-05;
        float _2528 = (-1.0) - _2526;
        float _2530 = _2526 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2525 > _2530) || ((_2525 < _2528) || ((_2524 > _2530) || ((_2524 < _2528) || ((_2523 < _2528) || (_2523 > _2530))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2649 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2525, cbModelParam._m0[9u].z, fma(_2524, cbModelParam._m0[9u].y, _2523 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2525, cbModelParam._m0[10u].z, fma(_2524, cbModelParam._m0[10u].y, _2523 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2525, cbModelParam._m0[11u].z, fma(_2524, cbModelParam._m0[11u].y, _2523 * cbModelParam._m0[11u].x))), _1981);
            frontier_phi_16_38_ladder = _2649.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2649.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2649.x * cbModelParam._m0[1u].y;
        }
        _2061 = frontier_phi_16_38_ladder_2;
        _2063 = frontier_phi_16_38_ladder_1;
        _2065 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _2049 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1144, _1145, _1146), _1981);
        _2061 = _2049.x * cbModelParam._m0[1u].y;
        _2063 = _2049.y * cbModelParam._m0[1u].y;
        _2065 = _2049.z * cbModelParam._m0[1u].y;
    }
    float _2069 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _978);
    float _2070 = isnan(_2069) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2069 : min(cbModelParam._m0[25u].w, _2069));
    float _2159;
    float _2161;
    float _2163;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2123 = fma(_1205, cbModelParam._m0[21u].z, fma(_1201, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1197)) + cbModelParam._m0[21u].w;
        float _2127 = fma(_1205, cbModelParam._m0[22u].z, fma(_1201, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1197)) + cbModelParam._m0[22u].w;
        float _2131 = fma(_1205, cbModelParam._m0[23u].z, fma(_1201, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1197)) + cbModelParam._m0[23u].w;
        float _2134 = fma(_1146, cbModelParam._m0[21u].z, fma(_1145, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1144));
        float _2137 = fma(_1146, cbModelParam._m0[22u].z, fma(_1145, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1144));
        float _2140 = fma(_1146, cbModelParam._m0[23u].z, fma(_1145, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1144));
        float _2278;
        if (_2134 > 0.0)
        {
            _2278 = abs((1.0 - _2123) / _2134);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_2134 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_2123 + 1.0) / _2134);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2278 = frontier_phi_28_24_ladder;
        }
        float _2543;
        if (_2137 > 0.0)
        {
            _2543 = abs((1.0 - _2127) / _2137);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_2137 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_2127 + 1.0) / _2137);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2543 = frontier_phi_40_35_ladder;
        }
        float _2748;
        if (_2140 > 0.0)
        {
            _2748 = abs((1.0 - _2131) / _2140);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_2140 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_2131 + 1.0) / _2140);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2748 = frontier_phi_49_46_ladder;
        }
        float _2750 = isnan(_2543) ? _2278 : (isnan(_2278) ? _2543 : min(_2278, _2543));
        float _2751 = isnan(_2748) ? _2750 : (isnan(_2750) ? _2748 : min(_2750, _2748));
        float _2755 = (_2751 * _2134) + _2123;
        float _2756 = (_2751 * _2137) + _2127;
        float _2757 = (_2751 * _2140) + _2131;
        float _2758 = _2751 * 9.9999997473787516355514526367188e-05;
        float _2759 = (-1.0) - _2758;
        float _2761 = _2758 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2757 > _2761) || ((_2757 < _2759) || ((_2756 > _2761) || ((_2756 < _2759) || ((_2755 < _2759) || (_2755 > _2761))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2956 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2757, cbModelParam._m0[17u].z, fma(_2756, cbModelParam._m0[17u].y, _2755 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2757, cbModelParam._m0[18u].z, fma(_2756, cbModelParam._m0[18u].y, _2755 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2757, cbModelParam._m0[19u].z, fma(_2756, cbModelParam._m0[19u].y, _2755 * cbModelParam._m0[19u].x))), _2070);
            frontier_phi_25_49_ladder = _2956.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2956.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2956.x * cbModelParam._m0[1u].z;
        }
        _2159 = frontier_phi_25_49_ladder_2;
        _2161 = frontier_phi_25_49_ladder_1;
        _2163 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _2143 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1144, _1145, _1146), _2070);
        _2159 = _2143.x * cbModelParam._m0[1u].z;
        _2161 = _2143.y * cbModelParam._m0[1u].z;
        _2163 = _2143.z * cbModelParam._m0[1u].z;
    }
    float _2175 = ((((1.0 - _1165) * ((_1152 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_1165 * _1152)) * _1136;
    float _2176 = _2175 * ((cbModelParam._m0[1u].w * (_2159 - _2061)) + _2061);
    float _2177 = _2175 * ((cbModelParam._m0[1u].w * (_2161 - _2063)) + _2063);
    float _2178 = _2175 * ((cbModelParam._m0[1u].w * (_2163 - _2065)) + _2065);
    float _2181 = fma(_2178, cbSceneParam._m0[89u].z, fma(_2177, cbSceneParam._m0[89u].y, _2176 * cbSceneParam._m0[89u].x));
    float _2184 = fma(_2178, cbSceneParam._m0[90u].z, fma(_2177, cbSceneParam._m0[90u].y, _2176 * cbSceneParam._m0[90u].x));
    float _2187 = fma(_2178, cbSceneParam._m0[91u].z, fma(_2177, cbSceneParam._m0[91u].y, _2176 * cbSceneParam._m0[91u].x));
    uvec4 _2197 = floatBitsToUint(cbInstanceData._m0[_265 + 5u]);
    uint _2199 = _2197.x * 14u;
    uint _2200 = _2199 + 13u;
    float _2207 = _1136 + (-1.0);
    float _2212 = (cbLight._m0[_2200].x * _2207) + 1.0;
    float _2213 = (cbLight._m0[_2200].y * _2207) + 1.0;
    float _2214 = (cbLight._m0[_2200].z * _2207) + 1.0;
    float _2215 = (cbLight._m0[_2200].w * _2207) + 1.0;
    uint _2216 = _2199 + 5u;
    float _2222 = isnan(1.0) ? _2213 : (isnan(_2213) ? 1.0 : min(_2213, 1.0));
    uint _2226 = _2199 + 4u;
    float _2232 = isnan(1.0) ? _2212 : (isnan(_2212) ? 1.0 : min(_2212, 1.0));
    uint _2236 = _2199 | 1u;
    float _2247 = dot(vec3(cbLight._m0[_2199].xyz), vec3(_975, _976, _977));
    float _2250 = dot(vec3(cbLight._m0[_2236].xyz), vec3(_975, _976, _977));
    float _4490 = isnan(0.0) ? _2247 : (isnan(_2247) ? 0.0 : max(_2247, 0.0));
    float _4501 = isnan(0.0) ? _2250 : (isnan(_2250) ? 0.0 : max(_2250, 0.0));
    float _2255 = (isnan(1.0) ? _4490 : (isnan(_4490) ? 1.0 : min(_4490, 1.0))) * 0.3183098733425140380859375;
    float _2257 = (isnan(1.0) ? _4501 : (isnan(_4501) ? 1.0 : min(_4501, 1.0))) * 0.3183098733425140380859375;
    float _2264 = ((cbLight._m0[_2216].x * _2222) * _2257) + ((cbLight._m0[_2226].x * _2232) * _2255);
    float _2265 = ((_2222 * cbLight._m0[_2216].y) * _2257) + ((_2232 * cbLight._m0[_2226].y) * _2255);
    float _2266 = ((_2222 * cbLight._m0[_2216].z) * _2257) + ((_2232 * cbLight._m0[_2226].z) * _2255);
    uvec4 _2270 = floatBitsToUint(cbLight._m0[_2199 + 12u]);
    bool _2272 = _2270.x == 0u;
    float _2283;
    float _2285;
    float _2287;
    if (_2272)
    {
        _2283 = _2264;
        _2285 = _2265;
        _2287 = _2266;
    }
    else
    {
        uint _2291 = _2199 + 6u;
        float _2307 = (dot(vec3(cbLight._m0[_2199 + 2u].xyz), vec3(_975, _976, _977)) * 0.5) + 0.5;
        float _2308 = _2307 * _2307;
        float _4512 = isnan(0.0) ? _2308 : (isnan(_2308) ? 0.0 : max(_2308, 0.0));
        float _2309 = isnan(1.0) ? _4512 : (isnan(_4512) ? 1.0 : min(_4512, 1.0));
        float _2310 = isnan(1.0) ? _2214 : (isnan(_2214) ? 1.0 : min(_2214, 1.0));
        _2283 = (((cbLight._m0[_2291].x * 0.3183098733425140380859375) * _2309) * _2310) + _2264;
        _2285 = (((cbLight._m0[_2291].y * 0.3183098733425140380859375) * _2309) * _2310) + _2265;
        _2287 = (((cbLight._m0[_2291].z * 0.3183098733425140380859375) * _2309) * _2310) + _2266;
    }
    bool _2290 = _2270.y == 0u;
    float _2328;
    float _2330;
    float _2332;
    if (_2290)
    {
        _2328 = _2283;
        _2330 = _2285;
        _2332 = _2287;
    }
    else
    {
        uint _2487 = _2199 + 7u;
        float _2503 = (dot(vec3(cbLight._m0[_2199 + 3u].xyz), vec3(_975, _976, _977)) * 0.5) + 0.5;
        float _2504 = _2503 * _2503;
        float _4528 = isnan(0.0) ? _2504 : (isnan(_2504) ? 0.0 : max(_2504, 0.0));
        float _2505 = isnan(1.0) ? _4528 : (isnan(_4528) ? 1.0 : min(_4528, 1.0));
        float _2506 = isnan(1.0) ? _2215 : (isnan(_2215) ? 1.0 : min(_2215, 1.0));
        _2328 = (((cbLight._m0[_2487].x * 0.3183098733425140380859375) * _2505) * _2506) + _2283;
        _2330 = (((cbLight._m0[_2487].y * 0.3183098733425140380859375) * _2505) * _2506) + _2285;
        _2332 = (((cbLight._m0[_2487].z * 0.3183098733425140380859375) * _2505) * _2506) + _2287;
    }
    uint _2335 = _2199 + 8u;
    float _2348 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2199].w)) * _978) * 0.949999988079071044921875);
    float _2349 = _2348 * _2348;
    float _2350 = cbLight._m0[_2199].x + _1053;
    float _2351 = cbLight._m0[_2199].y + _1054;
    float _2352 = cbLight._m0[_2199].z + _1055;
    float _2356 = inversesqrt(dot(vec3(_2350, _2351, _2352), vec3(_2350, _2351, _2352)));
    float _2357 = _2356 * _2350;
    float _2358 = _2356 * _2351;
    float _2359 = _2356 * _2352;
    float _2360 = dot(vec3(_975, _976, _977), vec3(cbLight._m0[_2199].xyz));
    float _4544 = isnan(0.0) ? _2360 : (isnan(_2360) ? 0.0 : max(_2360, 0.0));
    float _2363 = isnan(1.0) ? _4544 : (isnan(_4544) ? 1.0 : min(_4544, 1.0));
    float _4555 = isnan(0.0) ? _1137 : (isnan(_1137) ? 0.0 : max(_1137, 0.0));
    float _2364 = isnan(1.0) ? _4555 : (isnan(_4555) ? 1.0 : min(_4555, 1.0));
    float _2365 = dot(vec3(_975, _976, _977), vec3(_2357, _2358, _2359));
    float _4566 = isnan(0.0) ? _2365 : (isnan(_2365) ? 0.0 : max(_2365, 0.0));
    float _2368 = isnan(1.0) ? _4566 : (isnan(_4566) ? 1.0 : min(_4566, 1.0));
    float _2369 = dot(vec3(cbLight._m0[_2199].xyz), vec3(_2357, _2358, _2359));
    float _4577 = isnan(0.0) ? _2369 : (isnan(_2369) ? 0.0 : max(_2369, 0.0));
    float _2373 = _2349 * _2349;
    float _2377 = ((_2368 * _2368) * (_2373 + (-1.0))) + 1.0;
    float _2388 = (exp2(log2(1.0 - (isnan(1.0) ? _4577 : (isnan(_4577) ? 1.0 : min(_4577, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2389 = 1.0 - _2349;
    float _2400 = (0.5 / (((_2364 * ((_2363 * _2389) + _2349)) + 9.9999999392252902907785028219223e-09) + (((_2364 * _2389) + _2349) * _2363))) * _2363;
    float _4588 = isnan(0.0) ? _2400 : (isnan(_2400) ? 0.0 : max(_2400, 0.0));
    float _2402 = (isnan(1.0) ? _4588 : (isnan(_4588) ? 1.0 : min(_4588, 1.0))) * (_2373 / ((_2377 * _2377) * 3.141590118408203125));
    uint _2413 = _2199 + 9u;
    float _2424 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2236].w)) * _978) * 0.949999988079071044921875);
    float _2425 = _2424 * _2424;
    float _2426 = cbLight._m0[_2236].x + _1053;
    float _2427 = cbLight._m0[_2236].y + _1054;
    float _2428 = cbLight._m0[_2236].z + _1055;
    float _2432 = inversesqrt(dot(vec3(_2426, _2427, _2428), vec3(_2426, _2427, _2428)));
    float _2433 = _2432 * _2426;
    float _2434 = _2432 * _2427;
    float _2435 = _2432 * _2428;
    float _2436 = dot(vec3(_975, _976, _977), vec3(cbLight._m0[_2236].xyz));
    float _4599 = isnan(0.0) ? _2436 : (isnan(_2436) ? 0.0 : max(_2436, 0.0));
    float _2439 = isnan(1.0) ? _4599 : (isnan(_4599) ? 1.0 : min(_4599, 1.0));
    float _2440 = dot(vec3(_975, _976, _977), vec3(_2433, _2434, _2435));
    float _4610 = isnan(0.0) ? _2440 : (isnan(_2440) ? 0.0 : max(_2440, 0.0));
    float _2443 = isnan(1.0) ? _4610 : (isnan(_4610) ? 1.0 : min(_4610, 1.0));
    float _2444 = dot(vec3(cbLight._m0[_2236].xyz), vec3(_2433, _2434, _2435));
    float _4621 = isnan(0.0) ? _2444 : (isnan(_2444) ? 0.0 : max(_2444, 0.0));
    float _2448 = _2425 * _2425;
    float _2452 = ((_2443 * _2443) * (_2448 + (-1.0))) + 1.0;
    float _2461 = (exp2(log2(1.0 - (isnan(1.0) ? _4621 : (isnan(_4621) ? 1.0 : min(_4621, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2462 = 1.0 - _2425;
    float _2472 = (0.5 / (((_2364 * ((_2439 * _2462) + _2425)) + 9.9999999392252902907785028219223e-09) + (((_2364 * _2462) + _2425) * _2439))) * _2439;
    float _4632 = isnan(0.0) ? _2472 : (isnan(_2472) ? 0.0 : max(_2472, 0.0));
    float _2474 = (isnan(1.0) ? _4632 : (isnan(_4632) ? 1.0 : min(_4632, 1.0))) * (_2448 / ((_2452 * _2452) * 3.141590118408203125));
    float _2484 = (((_2461 * cbLight._m0[_2413].x) * _2474) * _2222) + (((_2388 * cbLight._m0[_2335].x) * _2402) * _2232);
    float _2485 = (((_2461 * cbLight._m0[_2413].y) * _2474) * _2222) + (((_2388 * cbLight._m0[_2335].y) * _2402) * _2232);
    float _2486 = (((_2461 * cbLight._m0[_2413].z) * _2474) * _2222) + (((_2388 * cbLight._m0[_2335].z) * _2402) * _2232);
    float _2548;
    float _2550;
    float _2552;
    if (_2272)
    {
        _2548 = _2484;
        _2550 = _2485;
        _2552 = _2486;
    }
    else
    {
        uint _2554 = _2199 + 2u;
        uint _2558 = _2199 + 10u;
        float _2572 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2554].w)) * _978) * 0.949999988079071044921875);
        float _2573 = _2572 * _2572;
        float _2574 = cbLight._m0[_2554].x + _1053;
        float _2575 = cbLight._m0[_2554].y + _1054;
        float _2576 = cbLight._m0[_2554].z + _1055;
        float _2580 = inversesqrt(dot(vec3(_2574, _2575, _2576), vec3(_2574, _2575, _2576)));
        float _2581 = _2580 * _2574;
        float _2582 = _2580 * _2575;
        float _2583 = _2580 * _2576;
        float _2584 = dot(vec3(_975, _976, _977), vec3(cbLight._m0[_2554].xyz));
        float _4643 = isnan(0.0) ? _2584 : (isnan(_2584) ? 0.0 : max(_2584, 0.0));
        float _2587 = isnan(1.0) ? _4643 : (isnan(_4643) ? 1.0 : min(_4643, 1.0));
        float _2588 = dot(vec3(_975, _976, _977), vec3(_2581, _2582, _2583));
        float _4654 = isnan(0.0) ? _2588 : (isnan(_2588) ? 0.0 : max(_2588, 0.0));
        float _2591 = isnan(1.0) ? _4654 : (isnan(_4654) ? 1.0 : min(_4654, 1.0));
        float _2592 = dot(vec3(cbLight._m0[_2554].xyz), vec3(_2581, _2582, _2583));
        float _4665 = isnan(0.0) ? _2592 : (isnan(_2592) ? 0.0 : max(_2592, 0.0));
        float _2596 = _2573 * _2573;
        float _2600 = ((_2591 * _2591) * (_2596 + (-1.0))) + 1.0;
        float _2609 = (exp2(log2(1.0 - (isnan(1.0) ? _4665 : (isnan(_4665) ? 1.0 : min(_4665, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2610 = 1.0 - _2573;
        float _2620 = (0.5 / (((_2364 * ((_2587 * _2610) + _2573)) + 9.9999999392252902907785028219223e-09) + (((_2364 * _2610) + _2573) * _2587))) * _2587;
        float _4676 = isnan(0.0) ? _2620 : (isnan(_2620) ? 0.0 : max(_2620, 0.0));
        float _2622 = (isnan(1.0) ? _4676 : (isnan(_4676) ? 1.0 : min(_4676, 1.0))) * (_2596 / ((_2600 * _2600) * 3.141590118408203125));
        float _2623 = isnan(1.0) ? _2214 : (isnan(_2214) ? 1.0 : min(_2214, 1.0));
        _2548 = (((_2609 * cbLight._m0[_2558].x) * _2622) * _2623) + _2484;
        _2550 = (((_2609 * cbLight._m0[_2558].y) * _2622) * _2623) + _2485;
        _2552 = (((_2609 * cbLight._m0[_2558].z) * _2622) * _2623) + _2486;
    }
    float _2658;
    float _2660;
    float _2662;
    if (_2290)
    {
        _2658 = _2548;
        _2660 = _2550;
        _2662 = _2552;
    }
    else
    {
        uint _2669 = _2199 + 3u;
        uint _2673 = _2199 + 11u;
        float _2687 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2669].w)) * _978) * 0.949999988079071044921875);
        float _2688 = _2687 * _2687;
        float _2689 = cbLight._m0[_2669].x + _1053;
        float _2690 = cbLight._m0[_2669].y + _1054;
        float _2691 = cbLight._m0[_2669].z + _1055;
        float _2695 = inversesqrt(dot(vec3(_2689, _2690, _2691), vec3(_2689, _2690, _2691)));
        float _2696 = _2695 * _2689;
        float _2697 = _2695 * _2690;
        float _2698 = _2695 * _2691;
        float _2699 = dot(vec3(_975, _976, _977), vec3(cbLight._m0[_2669].xyz));
        float _4692 = isnan(0.0) ? _2699 : (isnan(_2699) ? 0.0 : max(_2699, 0.0));
        float _2702 = isnan(1.0) ? _4692 : (isnan(_4692) ? 1.0 : min(_4692, 1.0));
        float _2703 = dot(vec3(_975, _976, _977), vec3(_2696, _2697, _2698));
        float _4703 = isnan(0.0) ? _2703 : (isnan(_2703) ? 0.0 : max(_2703, 0.0));
        float _2706 = isnan(1.0) ? _4703 : (isnan(_4703) ? 1.0 : min(_4703, 1.0));
        float _2707 = dot(vec3(cbLight._m0[_2669].xyz), vec3(_2696, _2697, _2698));
        float _4714 = isnan(0.0) ? _2707 : (isnan(_2707) ? 0.0 : max(_2707, 0.0));
        float _2711 = _2688 * _2688;
        float _2715 = ((_2706 * _2706) * (_2711 + (-1.0))) + 1.0;
        float _2724 = (exp2(log2(1.0 - (isnan(1.0) ? _4714 : (isnan(_4714) ? 1.0 : min(_4714, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2725 = 1.0 - _2688;
        float _2735 = (0.5 / (((_2364 * ((_2702 * _2725) + _2688)) + 9.9999999392252902907785028219223e-09) + (((_2364 * _2725) + _2688) * _2702))) * _2702;
        float _4725 = isnan(0.0) ? _2735 : (isnan(_2735) ? 0.0 : max(_2735, 0.0));
        float _2737 = (isnan(1.0) ? _4725 : (isnan(_4725) ? 1.0 : min(_4725, 1.0))) * (_2711 / ((_2715 * _2715) * 3.141590118408203125));
        float _2738 = isnan(1.0) ? _2215 : (isnan(_2215) ? 1.0 : min(_2215, 1.0));
        _2658 = (((_2724 * cbLight._m0[_2673].x) * _2737) * _2738) + _2548;
        _2660 = (((_2724 * cbLight._m0[_2673].y) * _2737) * _2738) + _2550;
        _2662 = (((_2724 * cbLight._m0[_2673].z) * _2737) * _2738) + _2552;
    }
    float _2873;
    float _2875;
    float _2877;
    float _2879;
    float _2881;
    float _2883;
    if (_2197.y == 0u)
    {
        float _2813 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2814 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2813;
        float _2815 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2813;
        float _2816 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2813;
        uvec4 _2828 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2829 = _2828.x;
        uint _2840 = uint((float(_2828.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1074) / _2829))) + floor(float(uint(cbSceneParam._m0[85u].x * _1073) / _2829)));
        float _2850 = (log2(_2816 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2851 = isnan(0.0) ? _2850 : (isnan(_2850) ? 0.0 : max(_2850, 0.0));
        uint _2854 = uint(isnan(14.0) ? _2851 : (isnan(_2851) ? 14.0 : min(_2851, 14.0)));
        uvec4 _2859 = texelFetch(g_lightClusterGridBuffer, int(((_2854 << 2u) + (_2840 << 6u)) >> 2u));
        uint _2860 = _2859.x;
        uint _2861 = _2828.z;
        float _2961;
        float _2963;
        float _2965;
        float _2967;
        float _2969;
        float _2971;
        if (((((1u << ((_2861 >> 4u) & 15u)) + 4294967295u) & _2860) == 0u) || ((_2861 & 240u) == 0u))
        {
            _2961 = 0.0;
            _2963 = 0.0;
            _2965 = 0.0;
            _2967 = 0.0;
            _2969 = 0.0;
            _2971 = 0.0;
        }
        else
        {
            float _2962;
            float _2964;
            float _2966;
            float _2968;
            float _2970;
            float _2972;
            float _3114 = 0.0;
            float _3115 = 0.0;
            float _3116 = 0.0;
            float _3117 = 0.0;
            float _3118 = 0.0;
            float _3119 = 0.0;
            uint _3120 = 0u;
            uint _3129;
            bool _3130;
            for (;;)
            {
                _3129 = texelFetch(g_lightClassification, int((((_2854 << 5u) + (_2840 << 9u)) + (_3120 << 2u)) >> 2u)).x;
                _3130 = _3129 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3130)
                {
                    frontier_phi_66_pred = _3114;
                    frontier_phi_66_pred_1 = _3119;
                    frontier_phi_66_pred_2 = _3118;
                    frontier_phi_66_pred_3 = _3117;
                    frontier_phi_66_pred_4 = _3116;
                    frontier_phi_66_pred_5 = _3115;
                }
                else
                {
                    float _3259;
                    float _3260;
                    float _3261;
                    float _3262;
                    float _3263;
                    float _3264;
                    uint _3265;
                    _3259 = _3114;
                    _3260 = _3115;
                    _3261 = _3116;
                    _3262 = _3117;
                    _3263 = _3118;
                    _3264 = _3119;
                    _3265 = _3129;
                    float _3186;
                    float _3187;
                    float _3188;
                    float _3189;
                    float _3190;
                    float _3191;
                    for (;;)
                    {
                        uint _3269 = uint(findLSB(_3265)) + (_3120 << 5u);
                        uint _3266 = (_3265 + 4294967295u) & _3265;
                        uint _3271 = _3269 * 48u;
                        vec4 _3285 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3271)).x, texelFetch(g_PointLightRenderingBuffer, int(_3271 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3271 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3271 + 3u)).x));
                        uint _3291 = (_3269 * 48u) + 4u;
                        vec4 _3304 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3291)).x, texelFetch(g_PointLightRenderingBuffer, int(_3291 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3291 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3291 + 3u)).x));
                        uint _3310 = (_3269 * 48u) + 8u;
                        vec3 _3321 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3310)).x, texelFetch(g_PointLightRenderingBuffer, int(_3310 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3310 + 2u)).x));
                        float _3325 = _3285.x - _2814;
                        float _3326 = _3285.y - _2815;
                        float _3327 = _3285.z - _2816;
                        float _3328 = dot(vec3(_3325, _3326, _3327), vec3(_3325, _3326, _3327));
                        float _3331 = inversesqrt(_3328);
                        float _3332 = _3331 * _3325;
                        float _3333 = _3331 * _3326;
                        float _3334 = _3331 * _3327;
                        float _3335 = dot(vec3(_1092, _1095, _1098), vec3(_3332, _3333, _3334));
                        float _3340 = 1.0 - (_3328 * _3285.w);
                        float _4751 = isnan(0.0) ? _3340 : (isnan(_3340) ? 0.0 : max(_3340, 0.0));
                        float _3341 = isnan(1.0) ? _4751 : (isnan(_4751) ? 1.0 : min(_4751, 1.0));
                        float _3342 = sqrt(_3328) * _3304.w;
                        float _3345 = 1.39999997615814208984375 / (_3342 + 1.39999997615814208984375);
                        float _3346 = _3345 * _3345;
                        float _3349 = ((1.0 - _3346) * _3335) + _3346;
                        float _3352 = _3342 * _3342;
                        float _3356 = ((isnan(0.0) ? _3349 : (isnan(_3349) ? 0.0 : max(_3349, 0.0))) * _3341) / ((_3352 * 0.699999988079071044921875) + 1.0);
                        float _3360 = (-0.0) - _2814;
                        float _3361 = (-0.0) - _2815;
                        float _3362 = (-0.0) - _2816;
                        float _3366 = inversesqrt(dot(vec3(_3360, _3361, _3362), vec3(_3360, _3361, _3362)));
                        float _3367 = _3366 * _3360;
                        float _3368 = _3366 * _3361;
                        float _3369 = _3366 * _3362;
                        float _3377 = exp2(log2(1.0 / ((_3352 * 3.5) + 5.0)) * 0.25);
                        float _3378 = 1.0 - _1152;
                        float _3385 = sqrt(1.0 - ((1.0 - (_3378 * _3378)) * (1.0 - (_3377 * _3377))));
                        float _3386 = _3385 * _3385;
                        float _3387 = _3386 * _3386;
                        float _3388 = _3367 + _3332;
                        float _3389 = _3368 + _3333;
                        float _3390 = _3369 + _3334;
                        float _3394 = inversesqrt(dot(vec3(_3388, _3389, _3390), vec3(_3388, _3389, _3390)));
                        float _3398 = dot(vec3(_1092, _1095, _1098), vec3(_3367, _3368, _3369));
                        float _4767 = isnan(0.0) ? _3398 : (isnan(_3398) ? 0.0 : max(_3398, 0.0));
                        float _3401 = isnan(1.0) ? _4767 : (isnan(_4767) ? 1.0 : min(_4767, 1.0));
                        float _3402 = dot(vec3(_1092, _1095, _1098), vec3(_3394 * _3388, _3394 * _3389, _3394 * _3390));
                        float _4778 = isnan(0.0) ? _3402 : (isnan(_3402) ? 0.0 : max(_3402, 0.0));
                        float _3405 = isnan(1.0) ? _4778 : (isnan(_4778) ? 1.0 : min(_4778, 1.0));
                        float _3409 = ((_3405 * _3405) * (_3387 + (-1.0))) + 1.0;
                        float _3410 = _3345 * _3386;
                        float _3411 = _3410 * _3410;
                        float _3414 = ((1.0 - _3411) * _3335) + _3411;
                        float _4789 = isnan(0.0) ? _3414 : (isnan(_3414) ? 0.0 : max(_3414, 0.0));
                        float _3415 = isnan(1.0) ? _4789 : (isnan(_4789) ? 1.0 : min(_4789, 1.0));
                        float _3416 = 1.0 - _3386;
                        float _3426 = (0.5 / (((_3415 * ((_3401 * _3416) + _3386)) + 9.9999999392252902907785028219223e-09) + (((_3415 * _3416) + _3386) * _3401))) * _3415;
                        float _4800 = isnan(0.0) ? _3426 : (isnan(_3426) ? 0.0 : max(_3426, 0.0));
                        float _3437 = (((_3387 * 3.1415927410125732421875) * (isnan(1.0) ? _4800 : (isnan(_4800) ? 1.0 : min(_4800, 1.0)))) / ((_3409 * _3409) * ((_3352 * 2.1991131305694580078125) + 3.141590118408203125))) * _3341;
                        _3189 = (_3356 * _3304.x) + _3262;
                        _3190 = (_3356 * _3304.y) + _3263;
                        _3191 = (_3356 * _3304.z) + _3264;
                        _3186 = (_3437 * _3321.x) + _3259;
                        _3187 = (_3437 * _3321.y) + _3260;
                        _3188 = (_3437 * _3321.z) + _3261;
                        if (_3266 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3259 = _3186;
                            _3260 = _3187;
                            _3261 = _3188;
                            _3262 = _3189;
                            _3263 = _3190;
                            _3264 = _3191;
                            _3265 = _3266;
                        }
                    }
                    frontier_phi_66_pred = _3186;
                    frontier_phi_66_pred_1 = _3191;
                    frontier_phi_66_pred_2 = _3190;
                    frontier_phi_66_pred_3 = _3189;
                    frontier_phi_66_pred_4 = _3188;
                    frontier_phi_66_pred_5 = _3187;
                }
                _2962 = frontier_phi_66_pred;
                _2972 = frontier_phi_66_pred_1;
                _2970 = frontier_phi_66_pred_2;
                _2968 = frontier_phi_66_pred_3;
                _2966 = frontier_phi_66_pred_4;
                _2964 = frontier_phi_66_pred_5;
                uint _3121 = _3120 + 1u;
                if (_3121 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3114 = _2962;
                    _3115 = _2964;
                    _3116 = _2966;
                    _3117 = _2968;
                    _3118 = _2970;
                    _3119 = _2972;
                    _3120 = _3121;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2961 = _2962;
            _2963 = _2964;
            _2965 = _2966;
            _2967 = _2968;
            _2969 = _2970;
            _2971 = _2972;
        }
        uvec4 _2975 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2976 = _2975.z;
        uint _2978 = (_2976 >> 8u) & 15u;
        float _3082;
        float _3084;
        float _3086;
        float _3088;
        float _3090;
        float _3092;
        if (((4294967295u << _2978) & _2860) == 0u)
        {
            _3082 = _2961;
            _3084 = _2963;
            _3086 = _2965;
            _3088 = _2967;
            _3090 = _2969;
            _3092 = _2971;
        }
        else
        {
            float _3107 = inversesqrt(dot(vec3(_2814, _2815, _2816), vec3(_2814, _2815, _2816)));
            float _3108 = _3107 * _2814;
            float _3109 = _3107 * _2815;
            float _3110 = _3107 * _2816;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2978 < ((_2976 >> 12u) & 15u))
            {
                float _3083;
                float _3085;
                float _3087;
                float _3089;
                float _3091;
                float _3093;
                float _3242 = _2961;
                float _3243 = _2963;
                float _3244 = _2965;
                float _3245 = _2967;
                float _3246 = _2969;
                float _3247 = _2971;
                uint _3248 = _2978;
                uint _3257;
                bool _3258;
                for (;;)
                {
                    _3257 = texelFetch(g_lightClassification, int((((_2854 << 5u) + (_2840 << 9u)) + (_3248 << 2u)) >> 2u)).x;
                    _3258 = _3257 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_3258)
                    {
                        frontier_phi_77_pred = _3247;
                        frontier_phi_77_pred_1 = _3246;
                        frontier_phi_77_pred_2 = _3245;
                        frontier_phi_77_pred_3 = _3244;
                        frontier_phi_77_pred_4 = _3243;
                        frontier_phi_77_pred_5 = _3242;
                    }
                    else
                    {
                        float _3451;
                        float _3452;
                        float _3453;
                        float _3454;
                        float _3455;
                        float _3456;
                        float _3744;
                        float _3745;
                        float _3746;
                        float _3747;
                        float _3748;
                        float _3749;
                        float _3464 = _3242;
                        float _3465 = _3243;
                        float _3466 = _3244;
                        float _3467 = _3245;
                        float _3468 = _3246;
                        float _3469 = _3247;
                        uint _3470 = _3257;
                        uint _3471;
                        vec4 _3496;
                        float _3497;
                        vec4 _3512;
                        vec3 _3524;
                        vec4 _3539;
                        vec4 _3554;
                        float _3600;
                        bool _3601;
                        for (;;)
                        {
                            uint _3481 = ((_3248 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3470));
                            _3471 = (_3470 + 4294967295u) & _3470;
                            uint _3483 = _3481 * 40u;
                            _3496 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3483)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3483 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3483 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3483 + 3u)).x));
                            _3497 = _3496.w;
                            uint _3499 = (_3481 * 40u) + 4u;
                            _3512 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3499)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3499 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3499 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3499 + 3u)).x));
                            uint _3514 = (_3481 * 40u) + 8u;
                            _3524 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3514)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3514 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3514 + 2u)).x));
                            uint _3526 = (_3481 * 40u) + 16u;
                            _3539 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3526)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3526 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3526 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3526 + 3u)).x));
                            uint _3541 = (_3481 * 40u) + 20u;
                            _3554 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3541)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3541 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3541 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3541 + 3u)).x));
                            uint _3556 = (_3481 * 40u) + 24u;
                            vec4 _3569 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3556)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3556 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3556 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3556 + 3u)).x));
                            uint _3575 = (_3481 * 40u) + 28u;
                            vec4 _3588 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3575)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3575 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3575 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3575 + 3u)).x));
                            _3600 = fma(_2816, _3588.z, fma(_2815, _3588.y, _3588.x * _2814)) + _3588.w;
                            _3601 = !((fma(_2816, _3569.z, fma(_2815, _3569.y, _3569.x * _2814)) + _3569.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3601)
                            {
                                float _3628 = _3496.x - _2814;
                                float _3629 = _3496.y - _2815;
                                float _3630 = _3496.z - _2816;
                                float _3631 = dot(vec3(_3628, _3629, _3630), vec3(_3628, _3629, _3630));
                                float _3634 = inversesqrt(_3631);
                                float _3635 = _3634 * _3628;
                                float _3636 = _3634 * _3629;
                                float _3637 = _3634 * _3630;
                                float _3641 = 1.0 - (_3631 / (_3497 * _3497));
                                float _4811 = isnan(0.0) ? _3641 : (isnan(_3641) ? 0.0 : max(_3641, 0.0));
                                float _3642 = isnan(1.0) ? _4811 : (isnan(_4811) ? 1.0 : min(_4811, 1.0));
                                float _3646 = sqrt(_3631) * _3512.w;
                                float _3648 = 1.39999997615814208984375 / (_3646 + 1.39999997615814208984375);
                                float _3649 = _3648 * _3648;
                                float _3652 = ((1.0 - _3649) * dot(vec3(_3635, _3636, _3637), vec3(_1092, _1095, _1098))) + _3649;
                                float _3655 = _3646 * _3646;
                                float _3659 = (fma(_2816, _3539.z, fma(_2815, _3539.y, _3539.x * _2814)) + _3539.w) / _3600;
                                float _3660 = (fma(_2816, _3554.z, fma(_2815, _3554.y, _3554.x * _2814)) + _3554.w) / _3600;
                                float _3664 = 1.0 - dot(vec2(_3659, _3660), vec2(_3659, _3660));
                                float _4827 = isnan(0.0) ? _3664 : (isnan(_3664) ? 0.0 : max(_3664, 0.0));
                                float _3665 = isnan(1.0) ? _4827 : (isnan(_4827) ? 1.0 : min(_4827, 1.0));
                                float _3666 = _3665 * (((isnan(0.0) ? _3652 : (isnan(_3652) ? 0.0 : max(_3652, 0.0))) * _3642) / ((_3655 * 0.699999988079071044921875) + 1.0));
                                float _3678 = exp2(log2(1.0 / ((_3655 * 3.5) + 5.0)) * 0.25);
                                float _3679 = 1.0 - _1152;
                                float _3686 = sqrt(1.0 - ((1.0 - (_3679 * _3679)) * (1.0 - (_3678 * _3678))));
                                float _3687 = _3686 * _3686;
                                float _3688 = _3687 * _3687;
                                float _3689 = _3635 - _3108;
                                float _3690 = _3636 - _3109;
                                float _3691 = _3637 - _3110;
                                float _3695 = inversesqrt(dot(vec3(_3689, _3690, _3691), vec3(_3689, _3690, _3691)));
                                float _3699 = dot(vec3(_1092, _1095, _1098), vec3((-0.0) - _3108, (-0.0) - _3109, (-0.0) - _3110));
                                float _4838 = isnan(0.0) ? _3699 : (isnan(_3699) ? 0.0 : max(_3699, 0.0));
                                float _3702 = isnan(1.0) ? _4838 : (isnan(_4838) ? 1.0 : min(_4838, 1.0));
                                float _3703 = dot(vec3(_1092, _1095, _1098), vec3(_3695 * _3689, _3695 * _3690, _3695 * _3691));
                                float _4849 = isnan(0.0) ? _3703 : (isnan(_3703) ? 0.0 : max(_3703, 0.0));
                                float _3706 = isnan(1.0) ? _4849 : (isnan(_4849) ? 1.0 : min(_4849, 1.0));
                                float _3710 = ((_3706 * _3706) * (_3688 + (-1.0))) + 1.0;
                                float _3711 = _3648 * _3687;
                                float _3712 = _3711 * _3711;
                                float _3718 = ((1.0 - _3712) * dot(vec3(_1092, _1095, _1098), vec3(_3635, _3636, _3637))) + _3712;
                                float _4860 = isnan(0.0) ? _3718 : (isnan(_3718) ? 0.0 : max(_3718, 0.0));
                                float _3719 = isnan(1.0) ? _4860 : (isnan(_4860) ? 1.0 : min(_4860, 1.0));
                                float _3720 = 1.0 - _3687;
                                float _3730 = (0.5 / (((_3719 * ((_3702 * _3720) + _3687)) + 9.9999999392252902907785028219223e-09) + (((_3719 * _3720) + _3687) * _3702))) * _3719;
                                float _4871 = isnan(0.0) ? _3730 : (isnan(_3730) ? 0.0 : max(_3730, 0.0));
                                float _3740 = (_3665 * _3642) * (((_3688 * 3.1415927410125732421875) * (isnan(1.0) ? _4871 : (isnan(_4871) ? 1.0 : min(_4871, 1.0)))) / ((_3710 * _3710) * ((_3655 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3666 * _3512.y;
                                frontier_phi_83_pred_1 = _3666 * _3512.x;
                                frontier_phi_83_pred_2 = _3740 * _3524.z;
                                frontier_phi_83_pred_3 = _3740 * _3524.y;
                                frontier_phi_83_pred_4 = _3740 * _3524.x;
                                frontier_phi_83_pred_5 = _3666 * _3512.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3748 = frontier_phi_83_pred;
                            _3747 = frontier_phi_83_pred_1;
                            _3746 = frontier_phi_83_pred_2;
                            _3745 = frontier_phi_83_pred_3;
                            _3744 = frontier_phi_83_pred_4;
                            _3749 = frontier_phi_83_pred_5;
                            _3454 = _3747 + _3467;
                            _3455 = _3748 + _3468;
                            _3456 = _3749 + _3469;
                            _3451 = _3744 + _3464;
                            _3452 = _3745 + _3465;
                            _3453 = _3746 + _3466;
                            if (_3471 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3464 = _3451;
                                _3465 = _3452;
                                _3466 = _3453;
                                _3467 = _3454;
                                _3468 = _3455;
                                _3469 = _3456;
                                _3470 = _3471;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3456;
                        frontier_phi_77_pred_1 = _3455;
                        frontier_phi_77_pred_2 = _3454;
                        frontier_phi_77_pred_3 = _3453;
                        frontier_phi_77_pred_4 = _3452;
                        frontier_phi_77_pred_5 = _3451;
                    }
                    _3093 = frontier_phi_77_pred;
                    _3091 = frontier_phi_77_pred_1;
                    _3089 = frontier_phi_77_pred_2;
                    _3087 = frontier_phi_77_pred_3;
                    _3085 = frontier_phi_77_pred_4;
                    _3083 = frontier_phi_77_pred_5;
                    uint _3249 = _3248 + 1u;
                    if (_3249 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3242 = _3083;
                        _3243 = _3085;
                        _3244 = _3087;
                        _3245 = _3089;
                        _3246 = _3091;
                        _3247 = _3093;
                        _3248 = _3249;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _3087;
                frontier_phi_58_59_ladder_1 = _3093;
                frontier_phi_58_59_ladder_2 = _3091;
                frontier_phi_58_59_ladder_3 = _3089;
                frontier_phi_58_59_ladder_4 = _3085;
                frontier_phi_58_59_ladder_5 = _3083;
            }
            else
            {
                frontier_phi_58_59_ladder = _2965;
                frontier_phi_58_59_ladder_1 = _2971;
                frontier_phi_58_59_ladder_2 = _2969;
                frontier_phi_58_59_ladder_3 = _2967;
                frontier_phi_58_59_ladder_4 = _2963;
                frontier_phi_58_59_ladder_5 = _2961;
            }
            _3082 = frontier_phi_58_59_ladder_5;
            _3084 = frontier_phi_58_59_ladder_4;
            _3086 = frontier_phi_58_59_ladder;
            _3088 = frontier_phi_58_59_ladder_3;
            _3090 = frontier_phi_58_59_ladder_2;
            _3092 = frontier_phi_58_59_ladder_1;
        }
        float _3097 = isnan(1.0) ? _1136 : (isnan(_1136) ? 1.0 : min(_1136, 1.0));
        _2873 = (_3097 * _3088) + _2328;
        _2875 = (_3097 * _3090) + _2330;
        _2877 = (_3097 * _3092) + _2332;
        _2879 = ((_3082 * 0.039999999105930328369140625) * _3097) + _2658;
        _2881 = ((_3084 * 0.039999999105930328369140625) * _3097) + _2660;
        _2883 = ((_3086 * 0.039999999105930328369140625) * _3097) + _2662;
    }
    else
    {
        _2873 = _2328;
        _2875 = _2330;
        _2877 = _2332;
        _2879 = _2658;
        _2881 = _2660;
        _2883 = _2662;
    }
    float _4887 = isnan(0.0) ? _1121 : (isnan(_1121) ? 0.0 : max(_1121, 0.0));
    float _4898 = isnan(0.0) ? _1122 : (isnan(_1122) ? 0.0 : max(_1122, 0.0));
    float _4909 = isnan(0.0) ? _1123 : (isnan(_1123) ? 0.0 : max(_1123, 0.0));
    float _2900 = ((isnan(1.0) ? _4887 : (isnan(_4887) ? 1.0 : min(_4887, 1.0))) * (_2873 + ((isnan(0.0) ? _1891 : (isnan(_1891) ? 0.0 : max(_1891, 0.0))) * _1136))) + ((_2879 + ((isnan(0.0) ? _2181 : (isnan(_2181) ? 0.0 : max(_2181, 0.0))) * _1970)) * cbPerFrame._m0[3u].x);
    float _2901 = ((isnan(1.0) ? _4898 : (isnan(_4898) ? 1.0 : min(_4898, 1.0))) * (_2875 + ((isnan(0.0) ? _1894 : (isnan(_1894) ? 0.0 : max(_1894, 0.0))) * _1136))) + ((_2881 + ((isnan(0.0) ? _2184 : (isnan(_2184) ? 0.0 : max(_2184, 0.0))) * _1970)) * cbPerFrame._m0[3u].x);
    float _2902 = ((isnan(1.0) ? _4909 : (isnan(_4909) ? 1.0 : min(_4909, 1.0))) * (_2877 + ((isnan(0.0) ? _1897 : (isnan(_1897) ? 0.0 : max(_1897, 0.0))) * _1136))) + ((_2883 + ((isnan(0.0) ? _2187 : (isnan(_2187) ? 0.0 : max(_2187, 0.0))) * _1970)) * cbPerFrame._m0[3u].x);
    uint _2903 = _265 + 6u;
    float _2911 = _1073 / cbSceneParam._m0[86u].x;
    float _2912 = _1074 / cbSceneParam._m0[86u].y;
    vec4 _2926 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2911, _2912, (log2((isnan(cbSceneParam._m0[77u].w) ? _996 : (isnan(_996) ? cbSceneParam._m0[77u].w : min(_996, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2928 = _2926.x;
    float _2929 = _2926.y;
    float _2930 = _2926.z;
    float _2931 = _2926.w;
    float _3024;
    float _3026;
    float _3028;
    float _3030;
    if (_996 > cbSceneParam._m0[78u].w)
    {
        float _2986 = isnan(_996) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _996 : min(cbSceneParam._m0[80u].w, _996));
        float _2987 = _2986 / _996;
        float _2998 = _2987 * _1046;
        float _2999 = _1047 * _2987;
        float _3000 = (-0.0) - _2999;
        float _3002 = _2987 * _1048;
        float _3004 = (cbSceneParam._m0[77u].w * _3000) / _2986;
        float _3005 = _3004 + cbSceneParam._m0[79u].w;
        float _3006 = cbSceneParam._m0[79u].w - _2999;
        float _3012 = sqrt(((_2998 * _2998) + (_2999 * _2999)) + (_3002 * _3002));
        float _3015 = (1.0 - (cbSceneParam._m0[77u].w / _2986)) * _3012;
        float _3020 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3022 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3199;
        if (abs((_3000 - _3004) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3199 = ((((_3005 > 0.0) ? exp2(_3020 * _3005) : (2.0 - exp2(_3022 * _3005))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3015;
        }
        else
        {
            float _3143 = 1.0 / cbSceneParam._m0[80u].x;
            float _3144 = isnan(_3006) ? _3005 : (isnan(_3005) ? _3006 : max(_3005, _3006));
            float _3145 = isnan(_3006) ? _3005 : (isnan(_3005) ? _3006 : min(_3005, _3006));
            float _3154 = isnan(0.0) ? _3144 : (isnan(_3144) ? 0.0 : min(_3144, 0.0));
            float _3155 = isnan(0.0) ? _3145 : (isnan(_3145) ? 0.0 : min(_3145, 0.0));
            _3199 = ((abs(_3012 / _3000) * cbSceneParam._m0[80u].y) * ((((_3154 - _3155) * 2.0) - ((exp2(_3020 * (isnan(0.0) ? _3144 : (isnan(_3144) ? 0.0 : max(_3144, 0.0)))) - exp2(_3020 * (isnan(0.0) ? _3145 : (isnan(_3145) ? 0.0 : max(_3145, 0.0))))) * _3143)) - ((exp2(_3022 * _3154) - exp2(_3022 * _3155)) * _3143))) + (_3015 * cbSceneParam._m0[80u].z);
        }
        vec4 _3201 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2911, _2912, 1.0), 0.0);
        float _3210 = exp2((_3199 * (-1.44269502162933349609375)) * (1.0 - _3201.w));
        float _3211 = log2(_3210);
        float _3227 = log2(_2931);
        _3024 = (exp2(_3227 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3211 * cbSceneParam._m0[78u].x)) * _3201.x) / cbSceneParam._m0[78u].x)) + _2928;
        _3026 = (exp2(_3227 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3211 * cbSceneParam._m0[78u].y)) * _3201.y) / cbSceneParam._m0[78u].y)) + _2929;
        _3028 = (exp2(_3227 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3211 * cbSceneParam._m0[78u].z)) * _3201.z) / cbSceneParam._m0[78u].z)) + _2930;
        _3030 = _3210 * _2931;
    }
    else
    {
        _3024 = _2928;
        _3026 = _2929;
        _3028 = _2930;
        _3030 = _2931;
    }
    bool _3237;
    vec4 _3040;
    vec4 _3062;
    float _3064;
    float _3068;
    float _3069;
    float _3070;
    float _3071;
    bool _3081;
    for (;;)
    {
        _3040 = cbMatDynParam._m0[0u];
        float _3042 = roundEven(_3040.y);
        bool _3043 = _3042 == 3.0;
        float _3044 = log2(_3030);
        float _3051 = exp2(_3044 * cbSceneParam._m0[78u].x) * _2900;
        float _3052 = exp2(_3044 * cbSceneParam._m0[78u].y) * _2901;
        float _3053 = exp2(_3044 * cbSceneParam._m0[78u].z) * _2902;
        float _3060 = _1062 + (-0.5);
        _3062 = cbMtdParam._m0[1u];
        _3064 = _3062.y * _3060;
        float _3067 = (_3042 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3068 = _3067 * (_3043 ? _3051 : (_3051 + (cbSceneParam._m0[72u].w * _3024)));
        _3069 = _3067 * (_3043 ? _3052 : (_3052 + (cbSceneParam._m0[72u].w * _3026)));
        _3070 = _3067 * (_3043 ? _3053 : (_3053 + (cbSceneParam._m0[72u].w * _3028)));
        _3071 = _3060 * 0.999000012874603271484375;
        _3081 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3081)
        {
            if ((cbInstanceData._m0[_265 + 7u].x + _3071) < 0.5)
            {
                _3237 = true;
                break;
            }
        }
        uint _3178 = _1111 + uint(_3040.w);
        if ((cbInstanceData._m0[_3178].w < 1.0) && ((cbInstanceData._m0[_3178].w + _3071) < 0.5))
        {
            _3237 = true;
            break;
        }
        if ((_3064 + 1.0) < _3062.x)
        {
            _3237 = true;
            break;
        }
        _3237 = false;
        break;
    }
    float _3442;
    if (_3237)
    {
        discard_state = true;
        _3442 = 0.0;
    }
    else
    {
        _3442 = cbInstanceData._m0[_2903].w;
    }
    SV_Target.x = _3068;
    SV_Target.y = _3069;
    SV_Target.z = _3070;
    SV_Target.w = _3442;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2903].w;
    discard_exit();
}


