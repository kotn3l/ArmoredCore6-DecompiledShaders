#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 13) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_22;
layout(set = 0, binding = 14) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_10;
layout(set = 0, binding = 20) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_6;
layout(set = 0, binding = 23) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_8;
layout(set = 0, binding = 24) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_9;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1480;
float _3836;
float _3837;
float _3838;
float _3839;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _231 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _232 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _233 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _239 = inversesqrt(dot(vec3(_231, _232, _233), vec3(_231, _232, _233)));
    float _246 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _253 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _267 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _269 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _270 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3848 = isnan(0.0) ? _267 : (isnan(_267) ? 0.0 : max(_267, 0.0));
    float _3859 = isnan(0.0) ? _269 : (isnan(_269) ? 0.0 : max(_269, 0.0));
    float _3870 = isnan(0.0) ? _270 : (isnan(_270) ? 0.0 : max(_270, 0.0));
    uint _280 = uint(roundEven(NORMAL.w)) * 13u;
    uint _285 = _280 + 1u;
    uint _289 = _280 + 2u;
    float _298 = sqrt(((cbInstanceData._m0[_285].x * cbInstanceData._m0[_285].x) + (cbInstanceData._m0[_280].x * cbInstanceData._m0[_280].x)) + (cbInstanceData._m0[_289].x * cbInstanceData._m0[_289].x));
    float _299 = _298 * TEXCOORD.z;
    float _300 = _298 * TEXCOORD.w;
    vec4 _313 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _299) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _300) + cbTextureTilingScale._m0[13u].w));
    vec4 _337 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _342 = _337.x * cbMtdParam._m0[11u].x;
    float _343 = _337.y * cbMtdParam._m0[11u].y;
    float _344 = _337.z * cbMtdParam._m0[11u].z;
    vec4 _363 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _299) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _300) + cbTextureTilingScale._m0[5u].w));
    vec4 _382 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _420 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _422 = _420.x;
    float _434 = dot(vec4(_422, _420.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _451 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _382.x) * 2.0) - ((((_422 - _434) * cbMtdParam._m0[24u].z) + _434) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3881 = isnan(0.0) ? _451 : (isnan(_451) ? 0.0 : max(_451, 0.0));
    float _452 = isnan(1.0) ? _3881 : (isnan(_3881) ? 1.0 : min(_3881, 1.0));
    float _459 = (_452 * ((_363.x * cbMtdParam._m0[12u].x) - _342)) + _342;
    float _460 = (_452 * ((_363.y * cbMtdParam._m0[12u].y) - _343)) + _343;
    float _461 = (_452 * ((_363.z * cbMtdParam._m0[12u].z) - _344)) + _344;
    vec4 _478 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _299) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _300) + cbTextureTilingScale._m0[3u].w));
    vec4 _498 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _500 = _498.x;
    float _510 = dot(vec4(_500, _498.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _524 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _382.y) * 2.0) - ((((_500 - _510) * cbMtdParam._m0[24u].z) + _510) * cbMtdParam._m0[20u].w))) + 1.0;
    float _3892 = isnan(0.0) ? _524 : (isnan(_524) ? 0.0 : max(_524, 0.0));
    float _525 = isnan(1.0) ? _3892 : (isnan(_3892) ? 1.0 : min(_3892, 1.0));
    float _532 = (_525 * ((_478.x * cbMtdParam._m0[13u].x) - _459)) + _459;
    float _533 = (_525 * ((_478.y * cbMtdParam._m0[13u].y) - _460)) + _460;
    float _534 = (_525 * ((_478.z * cbMtdParam._m0[13u].z) - _461)) + _461;
    vec4 _552 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_9, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[24u].x * _299) + cbTextureTilingScale._m0[24u].z, (cbTextureTilingScale._m0[24u].y * _300) + cbTextureTilingScale._m0[24u].w));
    vec4 _569 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[25u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _571 = _569.x;
    float _581 = dot(vec4(_571, _569.yzw), vec4(cbMtdParam._m0[30u].w, cbMtdParam._m0[31u].xy, 0.0));
    float _593 = ((cbMtdParam._m0[25u].x * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.z) - _382.z) * 2.0) - ((((_571 - _581) * cbMtdParam._m0[24u].z) + _581) * cbMtdParam._m0[20u].z))) + 1.0;
    float _3903 = isnan(0.0) ? _593 : (isnan(_593) ? 0.0 : max(_593, 0.0));
    float _594 = isnan(1.0) ? _3903 : (isnan(_3903) ? 1.0 : min(_3903, 1.0));
    float _601 = (_594 * ((_552.x * cbMtdParam._m0[14u].x) - _532)) + _532;
    float _602 = (_594 * ((_552.y * cbMtdParam._m0[14u].y) - _533)) + _533;
    float _603 = (_594 * ((_552.z * cbMtdParam._m0[14u].z) - _534)) + _534;
    float _607 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _313.x) * _601;
    float _610 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _313.y) * _602;
    float _613 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _313.z) * _603;
    float _620 = ((_601 - _607) * (isnan(1.0) ? _3848 : (isnan(_3848) ? 1.0 : min(_3848, 1.0)))) + _607;
    float _621 = ((_602 - _610) * (isnan(1.0) ? _3859 : (isnan(_3859) ? 1.0 : min(_3859, 1.0)))) + _610;
    float _622 = ((_603 - _613) * (isnan(1.0) ? _3870 : (isnan(_3870) ? 1.0 : min(_3870, 1.0)))) + _613;
    vec4 _640 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _299) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _300) + cbTextureTilingScale._m0[14u].w));
    vec4 _659 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _299) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _300) + cbTextureTilingScale._m0[20u].w));
    vec4 _682 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _299) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _300) + cbTextureTilingScale._m0[4u].w));
    vec4 _699 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _701 = _699.x;
    float _702 = _699.y;
    float _703 = _699.z;
    float _710 = ((_682.x - _701) * _452) + _701;
    float _711 = ((_682.y - _702) * _452) + _702;
    float _712 = ((_682.z - _703) * _452) + _703;
    vec4 _724 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _299) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _300) + cbTextureTilingScale._m0[2u].w));
    float _735 = ((_724.x - _710) * _525) + _710;
    float _736 = ((_724.y - _711) * _525) + _711;
    float _737 = ((_724.z - _712) * _525) + _712;
    vec4 _749 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[23u].x * _299) + cbTextureTilingScale._m0[23u].z, (cbTextureTilingScale._m0[23u].y * _300) + cbTextureTilingScale._m0[23u].w));
    float _762 = ((_749.z - _737) * _594) + _737;
    float _765 = ((((_749.x - _735) * _594) + _735) * 2.0) + (-1.0);
    float _766 = ((((_749.y - _736) * _594) + _736) * 2.0) + (-1.0);
    float _767 = dot(vec2(_765, _766), vec2(_765, _766));
    float _3914 = isnan(0.0) ? _767 : (isnan(_767) ? 0.0 : max(_767, 0.0));
    float _772 = sqrt(1.0 - (isnan(1.0) ? _3914 : (isnan(_3914) ? 1.0 : min(_3914, 1.0))));
    vec4 _786 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _811 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _299) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _300) + cbTextureTilingScale._m0[11u].w));
    float _813 = _811.x;
    float _814 = 1.0 - _813;
    float _827 = (TEXCOORD_8.w - ((cbMtdParam._m0[21u].z * (1.0 - TEXCOORD_8.w)) * ((((_813 - _814) * cbMtdParam._m0[24u].w) + _814) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3925 = isnan(0.0) ? _827 : (isnan(_827) ? 0.0 : max(_827, 0.0));
    float _828 = isnan(1.0) ? _3925 : (isnan(_3925) ? 1.0 : min(_3925, 1.0));
    float _835 = (_828 * ((_640.x * cbMtdParam._m0[18u].x) - _620)) + _620;
    float _836 = (_828 * ((_640.y * cbMtdParam._m0[18u].y) - _621)) + _621;
    float _837 = (_828 * ((_640.z * cbMtdParam._m0[18u].z) - _622)) + _622;
    float _842 = (((_659.z - _762) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _762;
    float _846 = ((_786.z - _842) * cbMtdParam._m0[19u].w) + _842;
    vec4 _859 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _299) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _300) + cbTextureTilingScale._m0[15u].w));
    float _866 = (_859.x * 2.0) + (-1.0);
    float _867 = (_859.y * 2.0) + (-1.0);
    float _868 = dot(vec2(_866, _867), vec2(_866, _867));
    float _3936 = isnan(0.0) ? _868 : (isnan(_868) ? 0.0 : max(_868, 0.0));
    float _876 = (_828 * (_859.z - _846)) + _846;
    float _885 = (_765 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_659.x * 2.0) + (-1.0)))) + (((_786.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _886 = (_766 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_659.y * 2.0) + (-1.0)))) + (((_786.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _898 = (((_866 - _885) + (cbMtdParam._m0[21u].x * _885)) * _828) + _885;
    float _899 = (((_867 - _886) + (cbMtdParam._m0[21u].x * _886)) * _828) + _886;
    float _900 = (_828 * (sqrt(1.0 - (isnan(1.0) ? _3936 : (isnan(_3936) ? 1.0 : min(_3936, 1.0)))) - _772)) + _772;
    float _904 = cbMtdParam._m0[22u].x + _786.w;
    float _907 = fma(_900, _246 * NORMAL.x, fma(_899, _253 * TANGENT.x, (_239 * _231) * _898));
    float _910 = fma(_900, _246 * NORMAL.y, fma(_899, _253 * TANGENT.y, (_239 * _232) * _898));
    float _913 = fma(_900, _246 * NORMAL.z, fma(_899, _253 * TANGENT.z, (_239 * _233) * _898));
    float _917 = inversesqrt(dot(vec3(_907, _910, _913), vec3(_907, _910, _913)));
    float _918 = _917 * _907;
    float _919 = _917 * _910;
    float _920 = _917 * _913;
    float _3947 = isnan(0.0) ? _876 : (isnan(_876) ? 0.0 : max(_876, 0.0));
    float _921 = isnan(1.0) ? _3947 : (isnan(_3947) ? 1.0 : min(_3947, 1.0));
    float _3958 = isnan(0.0) ? _904 : (isnan(_904) ? 0.0 : max(_904, 0.0));
    float _3969 = isnan(0.0) ? _835 : (isnan(_835) ? 0.0 : max(_835, 0.0));
    float _3980 = isnan(0.0) ? _836 : (isnan(_836) ? 0.0 : max(_836, 0.0));
    float _3991 = isnan(0.0) ? _837 : (isnan(_837) ? 0.0 : max(_837, 0.0));
    float _939 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _981 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _991 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _981);
    float _992 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _981);
    float _993 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _981);
    float _997 = inversesqrt(dot(vec3(_991, _992, _993), vec3(_991, _992, _993)));
    float _998 = _991 * _997;
    float _999 = _992 * _997;
    float _1000 = _993 * _997;
    vec4 _1005 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _1007 = _1005.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1161 = sqrt(((_991 * _991) + (_992 * _992)) + (_993 * _993));
        float _1167 = (cbMatDynParam._m0[5u].x * _1161) + cbMatDynParam._m0[5u].y;
        float _4002 = isnan(0.0) ? _1167 : (isnan(_1167) ? 0.0 : max(_1167, 0.0));
        float _1168 = isnan(1.0) ? _4002 : (isnan(_4002) ? 1.0 : min(_4002, 1.0));
        float _1172 = (cbMatDynParam._m0[5u].z * _1161) + cbMatDynParam._m0[5u].w;
        float _4013 = isnan(0.0) ? _1172 : (isnan(_1172) ? 0.0 : max(_1172, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4013 : (isnan(_4013) ? 1.0 : min(_4013, 1.0))) - _1168)) + _1168) < ((_1007 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _1018 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1019 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1037 = fma(_920, cbSceneParam._m0[5u].z, fma(_919, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _918));
    float _1040 = fma(_920, cbSceneParam._m0[6u].z, fma(_919, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _918));
    float _1043 = fma(_920, cbSceneParam._m0[7u].z, fma(_919, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _918));
    uint _1056 = _280 + 9u;
    uint _1057 = _1056 + uint(cbMatDynParam._m0[0u].w);
    float _1063 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3969 : (isnan(_3969) ? 1.0 : min(_3969, 1.0)))) * cbInstanceData._m0[_1057].x;
    float _1064 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3980 : (isnan(_3980) ? 1.0 : min(_3980, 1.0)))) * cbInstanceData._m0[_1057].y;
    float _1065 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3991 : (isnan(_3991) ? 1.0 : min(_3991, 1.0)))) * cbInstanceData._m0[_1057].z;
    float _4024 = isnan(0.0) ? _1063 : (isnan(_1063) ? 0.0 : max(_1063, 0.0));
    float _1066 = isnan(1.0) ? _4024 : (isnan(_4024) ? 1.0 : min(_4024, 1.0));
    float _4035 = isnan(0.0) ? _1064 : (isnan(_1064) ? 0.0 : max(_1064, 0.0));
    float _1067 = isnan(1.0) ? _4035 : (isnan(_4035) ? 1.0 : min(_4035, 1.0));
    float _4046 = isnan(0.0) ? _1065 : (isnan(_1065) ? 0.0 : max(_1065, 0.0));
    float _1068 = isnan(1.0) ? _4046 : (isnan(_4046) ? 1.0 : min(_4046, 1.0));
    vec4 _1077 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1018, cbSceneParam._m0[86u].y * _1019));
    float _1081 = ((isnan(1.0) ? _3958 : (isnan(_3958) ? 1.0 : min(_3958, 1.0))) * TEXCOORD_5.w) * _1077.x;
    float _1082 = dot(vec3(_918, _919, _920), vec3(_998, _999, _1000));
    float _1085 = _1082 * 2.0;
    float _1089 = (_1085 * _918) - _998;
    float _1090 = (_1085 * _919) - _999;
    float _1091 = (_1085 * _920) - _1000;
    float _1095 = abs(dot(vec3(_998, _999, _1000), vec3(_918, _919, _920)));
    float _4057 = isnan(0.0) ? _1095 : (isnan(_1095) ? 0.0 : max(_1095, 0.0));
    float _1097 = sqrt(_921);
    float _1110 = exp2((_1097 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4057 : (isnan(_4057) ? 1.0 : min(_4057, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1097 * 3.0));
    float _1142 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1146 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1150 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1479;
    float _1481;
    float _1482;
    float _1483;
    float _1484;
    float _1485;
    float _1486;
    float _1487;
    float _1488;
    float _1489;
    float _1490;
    float _1491;
    float _1492;
    float _1493;
    float _1494;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1204 = fma(_1150, cbModelParam._m0[26u].z, fma(_1146, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1142));
        float _1208 = fma(_1150, cbModelParam._m0[27u].z, fma(_1146, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1142));
        float _1212 = fma(_1150, cbModelParam._m0[28u].z, fma(_1146, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1142));
        float _1237 = _1142 + _918;
        float _1238 = _1146 + _919;
        float _1239 = _1150 + _920;
        float _1249 = fma(_1239, cbModelParam._m0[26u].z, fma(_1238, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1237)) - _1204;
        float _1250 = fma(_1239, cbModelParam._m0[27u].z, fma(_1238, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1237)) - _1208;
        float _1251 = fma(_1239, cbModelParam._m0[28u].z, fma(_1238, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1237)) - _1212;
        float _1255 = inversesqrt(dot(vec3(_1249, _1250, _1251), vec3(_1249, _1250, _1251)));
        float _1268 = ((_1255 * _1249) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1204 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1269 = ((_1255 * _1250) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1208 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1270 = ((_1255 * _1251) / cbModelParam._m0[34u].z) + ((((((_1212 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1273 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1268, _1269, _1270), 0.0);
        vec4 _1280 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1268, _1269, _1270), 0.0);
        vec4 _1287 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1268, _1269, _1270), 0.0);
        vec4 _1294 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1268, _1269, _1270), 0.0);
        float _1307 = exp2((_1273.w + (-0.5)) * 20.0) * 2.0;
        float _1308 = _1307 * (_1273.x + (-0.5));
        float _1309 = _1307 * (_1273.y + (-0.5));
        float _1310 = _1307 * (_1273.z + (-0.5));
        float _1317 = exp2((_1280.w + (-0.5)) * 20.0) * 2.0;
        float _1318 = _1317 * (_1280.x + (-0.5));
        float _1319 = _1317 * (_1280.y + (-0.5));
        float _1320 = _1317 * (_1280.z + (-0.5));
        float _1327 = exp2((_1287.w + (-0.5)) * 20.0) * 2.0;
        float _1328 = _1327 * (_1287.x + (-0.5));
        float _1329 = _1327 * (_1287.y + (-0.5));
        float _1330 = _1327 * (_1287.z + (-0.5));
        float _1337 = exp2((_1294.w + (-0.5)) * 20.0) * 2.0;
        float _1338 = _1337 * (_1294.x + (-0.5));
        float _1339 = _1337 * (_1294.y + (-0.5));
        float _1340 = _1337 * (_1294.z + (-0.5));
        float _1341 = isnan(0.0) ? _1338 : (isnan(_1338) ? 0.0 : max(_1338, 0.0));
        float _1342 = isnan(0.0) ? _1339 : (isnan(_1339) ? 0.0 : max(_1339, 0.0));
        float _1343 = isnan(0.0) ? _1340 : (isnan(_1340) ? 0.0 : max(_1340, 0.0));
        float _1344 = _1308 * 0.5;
        float _1345 = _1318 * 0.5;
        float _1346 = _1328 * 0.5;
        float _1347 = dot(vec3(_1344, _1345, _1346), vec3(_1344, _1345, _1346));
        float _1352 = (_1347 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1347);
        float _1361 = (dot(vec3(_918, _919, _920), vec3(_1352 * _1344, _1352 * _1345, _1352 * _1346)) + 1.0) * 0.5;
        float _4083 = isnan(0.0) ? _1361 : (isnan(_1361) ? 0.0 : max(_1361, 0.0));
        float _1371 = sqrt(((_1345 * _1345) + (_1344 * _1344)) + (_1346 * _1346)) / (_1341 + 9.9999997473787516355514526367188e-06);
        float _4094 = isnan(0.0) ? _1371 : (isnan(_1371) ? 0.0 : max(_1371, 0.0));
        float _1372 = isnan(1.0) ? _4094 : (isnan(_4094) ? 1.0 : min(_4094, 1.0));
        float _1373 = _1372 * 2.0;
        float _1377 = (1.0 - _1372) / (_1372 + 1.0);
        float _4105 = isnan(0.0) ? _1377 : (isnan(_1377) ? 0.0 : max(_1377, 0.0));
        float _1378 = isnan(1.0) ? _4105 : (isnan(_4105) ? 1.0 : min(_4105, 1.0));
        float _1387 = ((((1.0 - _1378) * (_1373 + 2.0)) * exp2(log2(isnan(1.0) ? _4083 : (isnan(_4083) ? 1.0 : min(_4083, 1.0))) * (_1373 + 1.0))) + _1378) * _1341;
        float _1388 = _1309 * 0.5;
        float _1389 = _1319 * 0.5;
        float _1390 = _1329 * 0.5;
        float _1391 = dot(vec3(_1388, _1389, _1390), vec3(_1388, _1389, _1390));
        float _1396 = (_1391 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1391);
        float _1404 = (dot(vec3(_918, _919, _920), vec3(_1396 * _1388, _1396 * _1389, _1396 * _1390)) + 1.0) * 0.5;
        float _4116 = isnan(0.0) ? _1404 : (isnan(_1404) ? 0.0 : max(_1404, 0.0));
        float _1413 = sqrt(((_1389 * _1389) + (_1388 * _1388)) + (_1390 * _1390)) / (_1342 + 9.9999997473787516355514526367188e-06);
        float _4127 = isnan(0.0) ? _1413 : (isnan(_1413) ? 0.0 : max(_1413, 0.0));
        float _1414 = isnan(1.0) ? _4127 : (isnan(_4127) ? 1.0 : min(_4127, 1.0));
        float _1415 = _1414 * 2.0;
        float _1419 = (1.0 - _1414) / (_1414 + 1.0);
        float _4138 = isnan(0.0) ? _1419 : (isnan(_1419) ? 0.0 : max(_1419, 0.0));
        float _1420 = isnan(1.0) ? _4138 : (isnan(_4138) ? 1.0 : min(_4138, 1.0));
        float _1429 = ((((1.0 - _1420) * (_1415 + 2.0)) * exp2(log2(isnan(1.0) ? _4116 : (isnan(_4116) ? 1.0 : min(_4116, 1.0))) * (_1415 + 1.0))) + _1420) * _1342;
        float _1430 = _1310 * 0.5;
        float _1431 = _1320 * 0.5;
        float _1432 = _1330 * 0.5;
        float _1433 = dot(vec3(_1430, _1431, _1432), vec3(_1430, _1431, _1432));
        float _1438 = (_1433 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1433);
        float _1446 = (dot(vec3(_918, _919, _920), vec3(_1438 * _1430, _1438 * _1431, _1438 * _1432)) + 1.0) * 0.5;
        float _4149 = isnan(0.0) ? _1446 : (isnan(_1446) ? 0.0 : max(_1446, 0.0));
        float _1455 = sqrt(((_1431 * _1431) + (_1430 * _1430)) + (_1432 * _1432)) / (_1343 + 9.9999997473787516355514526367188e-06);
        float _4160 = isnan(0.0) ? _1455 : (isnan(_1455) ? 0.0 : max(_1455, 0.0));
        float _1456 = isnan(1.0) ? _4160 : (isnan(_4160) ? 1.0 : min(_4160, 1.0));
        float _1457 = _1456 * 2.0;
        float _1461 = (1.0 - _1456) / (_1456 + 1.0);
        float _4171 = isnan(0.0) ? _1461 : (isnan(_1461) ? 0.0 : max(_1461, 0.0));
        float _1462 = isnan(1.0) ? _4171 : (isnan(_4171) ? 1.0 : min(_4171, 1.0));
        float _1471 = ((((1.0 - _1462) * (_1457 + 2.0)) * exp2(log2(isnan(1.0) ? _4149 : (isnan(_4149) ? 1.0 : min(_4149, 1.0))) * (_1457 + 1.0))) + _1462) * _1343;
        _1479 = _1310;
        _1481 = _1309;
        _1482 = _1308;
        _1483 = _1320;
        _1484 = _1319;
        _1485 = _1318;
        _1486 = _1330;
        _1487 = _1329;
        _1488 = _1328;
        _1489 = _1343;
        _1490 = _1342;
        _1491 = _1341;
        _1492 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1387 : (isnan(_1387) ? 0.0 : max(_1387, 0.0)));
        _1493 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1429 : (isnan(_1429) ? 0.0 : max(_1429, 0.0)));
        _1494 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1471 : (isnan(_1471) ? 0.0 : max(_1471, 0.0)));
    }
    else
    {
        _1479 = _1480;
        _1481 = _1480;
        _1482 = _1480;
        _1483 = _1480;
        _1484 = _1480;
        _1485 = _1480;
        _1486 = _1480;
        _1487 = _1480;
        _1488 = _1480;
        _1489 = _1480;
        _1490 = _1480;
        _1491 = _1480;
        _1492 = 0.0;
        _1493 = 0.0;
        _1494 = 0.0;
    }
    float _1789;
    float _1790;
    float _1791;
    float _1792;
    float _1793;
    float _1794;
    float _1795;
    float _1796;
    float _1797;
    float _1798;
    float _1799;
    float _1800;
    float _1801;
    float _1802;
    float _1803;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1520 = fma(_1150, cbModelParam._m0[30u].z, fma(_1146, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1142));
        float _1524 = fma(_1150, cbModelParam._m0[31u].z, fma(_1146, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1142));
        float _1528 = fma(_1150, cbModelParam._m0[32u].z, fma(_1146, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1142));
        float _1551 = _1142 + _918;
        float _1552 = _1146 + _919;
        float _1553 = _1150 + _920;
        float _1563 = fma(_1553, cbModelParam._m0[30u].z, fma(_1552, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1551)) - _1520;
        float _1564 = fma(_1553, cbModelParam._m0[31u].z, fma(_1552, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1551)) - _1524;
        float _1565 = fma(_1553, cbModelParam._m0[32u].z, fma(_1552, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1551)) - _1528;
        float _1569 = inversesqrt(dot(vec3(_1563, _1564, _1565), vec3(_1563, _1564, _1565)));
        float _1582 = ((_1569 * _1563) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1520 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1583 = ((_1569 * _1564) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1524 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1584 = ((_1569 * _1565) / cbModelParam._m0[35u].z) + ((((((_1528 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1586 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1582, _1583, _1584), 0.0);
        vec4 _1593 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1582, _1583, _1584), 0.0);
        vec4 _1600 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1582, _1583, _1584), 0.0);
        vec4 _1607 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1582, _1583, _1584), 0.0);
        float _1619 = exp2((_1586.w + (-0.5)) * 20.0) * 2.0;
        float _1620 = _1619 * (_1586.x + (-0.5));
        float _1621 = _1619 * (_1586.y + (-0.5));
        float _1622 = _1619 * (_1586.z + (-0.5));
        float _1629 = exp2((_1593.w + (-0.5)) * 20.0) * 2.0;
        float _1630 = _1629 * (_1593.x + (-0.5));
        float _1631 = _1629 * (_1593.y + (-0.5));
        float _1632 = _1629 * (_1593.z + (-0.5));
        float _1639 = exp2((_1600.w + (-0.5)) * 20.0) * 2.0;
        float _1640 = _1639 * (_1600.x + (-0.5));
        float _1641 = _1639 * (_1600.y + (-0.5));
        float _1642 = _1639 * (_1600.z + (-0.5));
        float _1649 = exp2((_1607.w + (-0.5)) * 20.0) * 2.0;
        float _1650 = _1649 * (_1607.x + (-0.5));
        float _1651 = _1649 * (_1607.y + (-0.5));
        float _1652 = _1649 * (_1607.z + (-0.5));
        float _1653 = isnan(0.0) ? _1650 : (isnan(_1650) ? 0.0 : max(_1650, 0.0));
        float _1654 = isnan(0.0) ? _1651 : (isnan(_1651) ? 0.0 : max(_1651, 0.0));
        float _1655 = isnan(0.0) ? _1652 : (isnan(_1652) ? 0.0 : max(_1652, 0.0));
        float _1656 = _1620 * 0.5;
        float _1657 = _1630 * 0.5;
        float _1658 = _1640 * 0.5;
        float _1659 = dot(vec3(_1656, _1657, _1658), vec3(_1656, _1657, _1658));
        float _1664 = (_1659 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1659);
        float _1672 = (dot(vec3(_918, _919, _920), vec3(_1664 * _1656, _1664 * _1657, _1664 * _1658)) + 1.0) * 0.5;
        float _4212 = isnan(0.0) ? _1672 : (isnan(_1672) ? 0.0 : max(_1672, 0.0));
        float _1681 = sqrt(((_1657 * _1657) + (_1656 * _1656)) + (_1658 * _1658)) / (_1653 + 9.9999997473787516355514526367188e-06);
        float _4223 = isnan(0.0) ? _1681 : (isnan(_1681) ? 0.0 : max(_1681, 0.0));
        float _1682 = isnan(1.0) ? _4223 : (isnan(_4223) ? 1.0 : min(_4223, 1.0));
        float _1683 = _1682 * 2.0;
        float _1687 = (1.0 - _1682) / (_1682 + 1.0);
        float _4234 = isnan(0.0) ? _1687 : (isnan(_1687) ? 0.0 : max(_1687, 0.0));
        float _1688 = isnan(1.0) ? _4234 : (isnan(_4234) ? 1.0 : min(_4234, 1.0));
        float _1697 = ((((1.0 - _1688) * (_1683 + 2.0)) * exp2(log2(isnan(1.0) ? _4212 : (isnan(_4212) ? 1.0 : min(_4212, 1.0))) * (_1683 + 1.0))) + _1688) * _1653;
        float _1698 = _1621 * 0.5;
        float _1699 = _1631 * 0.5;
        float _1700 = _1641 * 0.5;
        float _1701 = dot(vec3(_1698, _1699, _1700), vec3(_1698, _1699, _1700));
        float _1706 = (_1701 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1701);
        float _1714 = (dot(vec3(_918, _919, _920), vec3(_1706 * _1698, _1706 * _1699, _1706 * _1700)) + 1.0) * 0.5;
        float _4245 = isnan(0.0) ? _1714 : (isnan(_1714) ? 0.0 : max(_1714, 0.0));
        float _1723 = sqrt(((_1699 * _1699) + (_1698 * _1698)) + (_1700 * _1700)) / (_1654 + 9.9999997473787516355514526367188e-06);
        float _4256 = isnan(0.0) ? _1723 : (isnan(_1723) ? 0.0 : max(_1723, 0.0));
        float _1724 = isnan(1.0) ? _4256 : (isnan(_4256) ? 1.0 : min(_4256, 1.0));
        float _1725 = _1724 * 2.0;
        float _1729 = (1.0 - _1724) / (_1724 + 1.0);
        float _4267 = isnan(0.0) ? _1729 : (isnan(_1729) ? 0.0 : max(_1729, 0.0));
        float _1730 = isnan(1.0) ? _4267 : (isnan(_4267) ? 1.0 : min(_4267, 1.0));
        float _1739 = ((((1.0 - _1730) * (_1725 + 2.0)) * exp2(log2(isnan(1.0) ? _4245 : (isnan(_4245) ? 1.0 : min(_4245, 1.0))) * (_1725 + 1.0))) + _1730) * _1654;
        float _1740 = _1622 * 0.5;
        float _1741 = _1632 * 0.5;
        float _1742 = _1642 * 0.5;
        float _1743 = dot(vec3(_1740, _1741, _1742), vec3(_1740, _1741, _1742));
        float _1748 = (_1743 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1743);
        float _1756 = (dot(vec3(_918, _919, _920), vec3(_1748 * _1740, _1748 * _1741, _1748 * _1742)) + 1.0) * 0.5;
        float _4278 = isnan(0.0) ? _1756 : (isnan(_1756) ? 0.0 : max(_1756, 0.0));
        float _1765 = sqrt(((_1741 * _1741) + (_1740 * _1740)) + (_1742 * _1742)) / (_1655 + 9.9999997473787516355514526367188e-06);
        float _4289 = isnan(0.0) ? _1765 : (isnan(_1765) ? 0.0 : max(_1765, 0.0));
        float _1766 = isnan(1.0) ? _4289 : (isnan(_4289) ? 1.0 : min(_4289, 1.0));
        float _1767 = _1766 * 2.0;
        float _1771 = (1.0 - _1766) / (_1766 + 1.0);
        float _4300 = isnan(0.0) ? _1771 : (isnan(_1771) ? 0.0 : max(_1771, 0.0));
        float _1772 = isnan(1.0) ? _4300 : (isnan(_4300) ? 1.0 : min(_4300, 1.0));
        float _1781 = ((((1.0 - _1772) * (_1767 + 2.0)) * exp2(log2(isnan(1.0) ? _4278 : (isnan(_4278) ? 1.0 : min(_4278, 1.0))) * (_1767 + 1.0))) + _1772) * _1655;
        _1789 = _1622;
        _1790 = _1621;
        _1791 = _1620;
        _1792 = _1632;
        _1793 = _1631;
        _1794 = _1630;
        _1795 = _1642;
        _1796 = _1641;
        _1797 = _1640;
        _1798 = _1655;
        _1799 = _1654;
        _1800 = _1653;
        _1801 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1697 : (isnan(_1697) ? 0.0 : max(_1697, 0.0)));
        _1802 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1739 : (isnan(_1739) ? 0.0 : max(_1739, 0.0)));
        _1803 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1781 : (isnan(_1781) ? 0.0 : max(_1781, 0.0)));
    }
    else
    {
        _1789 = _1480;
        _1790 = _1480;
        _1791 = _1480;
        _1792 = _1480;
        _1793 = _1480;
        _1794 = _1480;
        _1795 = _1480;
        _1796 = _1480;
        _1797 = _1480;
        _1798 = _1480;
        _1799 = _1480;
        _1800 = _1480;
        _1801 = 0.0;
        _1802 = 0.0;
        _1803 = 0.0;
    }
    float _1813 = (cbModelParam._m0[1u].x * (_1801 - _1492)) + _1492;
    float _1814 = (cbModelParam._m0[1u].x * (_1802 - _1493)) + _1493;
    float _1815 = (cbModelParam._m0[1u].x * (_1803 - _1494)) + _1494;
    float _1836 = fma(_1815, cbSceneParam._m0[89u].z, fma(_1814, cbSceneParam._m0[89u].y, _1813 * cbSceneParam._m0[89u].x));
    float _1839 = fma(_1815, cbSceneParam._m0[90u].z, fma(_1814, cbSceneParam._m0[90u].y, _1813 * cbSceneParam._m0[90u].x));
    float _1842 = fma(_1815, cbSceneParam._m0[91u].z, fma(_1814, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1813));
    float _1857 = _1089 * 0.5;
    float _1858 = _1090 * 0.5;
    float _1859 = _1091 * 0.5;
    float _1860 = dot(vec4(_1857, _1858, _1859, 1.0), vec4(_1791, _1794, _1797, _1800));
    float _1863 = dot(vec4(_1857, _1858, _1859, 1.0), vec4(_1790, _1793, _1796, _1799));
    float _1866 = dot(vec4(_1857, _1858, _1859, 1.0), vec4(_1789, _1792, _1795, _1798));
    float _1900;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1873 = dot(vec4(_1857, _1858, _1859, 1.0), vec4(_1479, _1483, _1486, _1489));
        float _1877 = dot(vec4(_1857, _1858, _1859, 1.0), vec4(_1481, _1484, _1487, _1490));
        float _1881 = dot(vec4(_1857, _1858, _1859, 1.0), vec4(_1482, _1485, _1488, _1491));
        float _1888 = dot(vec4(cbModelParam._m0[39u]), vec4(_1857, _1858, _1859, 1.0));
        _1900 = dot(vec3(isnan(0.0) ? _1881 : (isnan(_1881) ? 0.0 : max(_1881, 0.0)), isnan(0.0) ? _1877 : (isnan(_1877) ? 0.0 : max(_1877, 0.0)), isnan(0.0) ? _1873 : (isnan(_1873) ? 0.0 : max(_1873, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1888) ? 0.0 : (isnan(0.0) ? _1888 : max(0.0, _1888))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1900 = 1.0;
    }
    float _1911;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1902 = dot(vec4(cbModelParam._m0[40u]), vec4(_1857, _1858, _1859, 1.0));
        _1911 = dot(vec3(isnan(0.0) ? _1860 : (isnan(_1860) ? 0.0 : max(_1860, 0.0)), isnan(0.0) ? _1863 : (isnan(_1863) ? 0.0 : max(_1863, 0.0)), isnan(0.0) ? _1866 : (isnan(_1866) ? 0.0 : max(_1866, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1902) ? 0.0 : (isnan(0.0) ? _1902 : max(0.0, _1902))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1911 = 1.0;
    }
    float _1915 = (_1911 * cbModelParam._m0[1u].x) + (_1900 * (1.0 - cbModelParam._m0[1u].x));
    float _1925 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _921);
    float _1926 = isnan(_1925) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1925 : min(cbModelParam._m0[25u].z, _1925));
    float _2006;
    float _2008;
    float _2010;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1973 = fma(_1150, cbModelParam._m0[13u].z, fma(_1146, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1142)) + cbModelParam._m0[13u].w;
        float _1977 = fma(_1150, cbModelParam._m0[14u].z, fma(_1146, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1142)) + cbModelParam._m0[14u].w;
        float _1981 = fma(_1150, cbModelParam._m0[15u].z, fma(_1146, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1142)) + cbModelParam._m0[15u].w;
        float _1984 = fma(_1091, cbModelParam._m0[13u].z, fma(_1090, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1089));
        float _1987 = fma(_1091, cbModelParam._m0[14u].z, fma(_1090, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1089));
        float _1990 = fma(_1091, cbModelParam._m0[15u].z, fma(_1090, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1089));
        float _2018;
        if (_1984 > 0.0)
        {
            _2018 = abs((1.0 - _1973) / _1984);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1984 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1973 + 1.0) / _1984);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _2018 = frontier_phi_17_15_ladder;
        }
        float _2218;
        if (_1987 > 0.0)
        {
            _2218 = abs((1.0 - _1977) / _1987);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1987 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1977 + 1.0) / _1987);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2218 = frontier_phi_26_22_ladder;
        }
        float _2461;
        if (_1990 > 0.0)
        {
            _2461 = abs((1.0 - _1981) / _1990);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1990 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1981 + 1.0) / _1990);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2461 = frontier_phi_38_33_ladder;
        }
        float _2463 = isnan(_2218) ? _2018 : (isnan(_2018) ? _2218 : min(_2018, _2218));
        float _2464 = isnan(_2461) ? _2463 : (isnan(_2463) ? _2461 : min(_2463, _2461));
        float _2468 = (_2464 * _1984) + _1973;
        float _2469 = (_2464 * _1987) + _1977;
        float _2470 = (_2464 * _1990) + _1981;
        float _2471 = _2464 * 9.9999997473787516355514526367188e-05;
        float _2473 = (-1.0) - _2471;
        float _2475 = _2471 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2470 > _2475) || ((_2470 < _2473) || ((_2469 > _2475) || ((_2469 < _2473) || ((_2468 < _2473) || (_2468 > _2475))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2594 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2470, cbModelParam._m0[9u].z, fma(_2469, cbModelParam._m0[9u].y, _2468 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2470, cbModelParam._m0[10u].z, fma(_2469, cbModelParam._m0[10u].y, _2468 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2470, cbModelParam._m0[11u].z, fma(_2469, cbModelParam._m0[11u].y, _2468 * cbModelParam._m0[11u].x))), _1926);
            frontier_phi_16_38_ladder = _2594.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2594.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2594.x * cbModelParam._m0[1u].y;
        }
        _2006 = frontier_phi_16_38_ladder_2;
        _2008 = frontier_phi_16_38_ladder_1;
        _2010 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1994 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1089, _1090, _1091), _1926);
        _2006 = _1994.x * cbModelParam._m0[1u].y;
        _2008 = _1994.y * cbModelParam._m0[1u].y;
        _2010 = _1994.z * cbModelParam._m0[1u].y;
    }
    float _2014 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _921);
    float _2015 = isnan(_2014) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2014 : min(cbModelParam._m0[25u].w, _2014));
    float _2104;
    float _2106;
    float _2108;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2068 = fma(_1150, cbModelParam._m0[21u].z, fma(_1146, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1142)) + cbModelParam._m0[21u].w;
        float _2072 = fma(_1150, cbModelParam._m0[22u].z, fma(_1146, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1142)) + cbModelParam._m0[22u].w;
        float _2076 = fma(_1150, cbModelParam._m0[23u].z, fma(_1146, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1142)) + cbModelParam._m0[23u].w;
        float _2079 = fma(_1091, cbModelParam._m0[21u].z, fma(_1090, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1089));
        float _2082 = fma(_1091, cbModelParam._m0[22u].z, fma(_1090, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1089));
        float _2085 = fma(_1091, cbModelParam._m0[23u].z, fma(_1090, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1089));
        float _2223;
        if (_2079 > 0.0)
        {
            _2223 = abs((1.0 - _2068) / _2079);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_2079 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_2068 + 1.0) / _2079);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2223 = frontier_phi_28_24_ladder;
        }
        float _2488;
        if (_2082 > 0.0)
        {
            _2488 = abs((1.0 - _2072) / _2082);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_2082 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_2072 + 1.0) / _2082);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2488 = frontier_phi_40_35_ladder;
        }
        float _2693;
        if (_2085 > 0.0)
        {
            _2693 = abs((1.0 - _2076) / _2085);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_2085 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_2076 + 1.0) / _2085);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2693 = frontier_phi_49_46_ladder;
        }
        float _2695 = isnan(_2488) ? _2223 : (isnan(_2223) ? _2488 : min(_2223, _2488));
        float _2696 = isnan(_2693) ? _2695 : (isnan(_2695) ? _2693 : min(_2695, _2693));
        float _2700 = (_2696 * _2079) + _2068;
        float _2701 = (_2696 * _2082) + _2072;
        float _2702 = (_2696 * _2085) + _2076;
        float _2703 = _2696 * 9.9999997473787516355514526367188e-05;
        float _2704 = (-1.0) - _2703;
        float _2706 = _2703 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2702 > _2706) || ((_2702 < _2704) || ((_2701 > _2706) || ((_2701 < _2704) || ((_2700 < _2704) || (_2700 > _2706))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2901 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2702, cbModelParam._m0[17u].z, fma(_2701, cbModelParam._m0[17u].y, _2700 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2702, cbModelParam._m0[18u].z, fma(_2701, cbModelParam._m0[18u].y, _2700 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2702, cbModelParam._m0[19u].z, fma(_2701, cbModelParam._m0[19u].y, _2700 * cbModelParam._m0[19u].x))), _2015);
            frontier_phi_25_49_ladder = _2901.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2901.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2901.x * cbModelParam._m0[1u].z;
        }
        _2104 = frontier_phi_25_49_ladder_2;
        _2106 = frontier_phi_25_49_ladder_1;
        _2108 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _2088 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1089, _1090, _1091), _2015);
        _2104 = _2088.x * cbModelParam._m0[1u].z;
        _2106 = _2088.y * cbModelParam._m0[1u].z;
        _2108 = _2088.z * cbModelParam._m0[1u].z;
    }
    float _2120 = ((((1.0 - _1110) * ((_1097 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_1110 * _1097)) * _1081;
    float _2121 = _2120 * ((cbModelParam._m0[1u].w * (_2104 - _2006)) + _2006);
    float _2122 = _2120 * ((cbModelParam._m0[1u].w * (_2106 - _2008)) + _2008);
    float _2123 = _2120 * ((cbModelParam._m0[1u].w * (_2108 - _2010)) + _2010);
    float _2126 = fma(_2123, cbSceneParam._m0[89u].z, fma(_2122, cbSceneParam._m0[89u].y, _2121 * cbSceneParam._m0[89u].x));
    float _2129 = fma(_2123, cbSceneParam._m0[90u].z, fma(_2122, cbSceneParam._m0[90u].y, _2121 * cbSceneParam._m0[90u].x));
    float _2132 = fma(_2123, cbSceneParam._m0[91u].z, fma(_2122, cbSceneParam._m0[91u].y, _2121 * cbSceneParam._m0[91u].x));
    uvec4 _2142 = floatBitsToUint(cbInstanceData._m0[_280 + 5u]);
    uint _2144 = _2142.x * 14u;
    uint _2145 = _2144 + 13u;
    float _2152 = _1081 + (-1.0);
    float _2157 = (cbLight._m0[_2145].x * _2152) + 1.0;
    float _2158 = (cbLight._m0[_2145].y * _2152) + 1.0;
    float _2159 = (cbLight._m0[_2145].z * _2152) + 1.0;
    float _2160 = (cbLight._m0[_2145].w * _2152) + 1.0;
    uint _2161 = _2144 + 5u;
    float _2167 = isnan(1.0) ? _2158 : (isnan(_2158) ? 1.0 : min(_2158, 1.0));
    uint _2171 = _2144 + 4u;
    float _2177 = isnan(1.0) ? _2157 : (isnan(_2157) ? 1.0 : min(_2157, 1.0));
    uint _2181 = _2144 | 1u;
    float _2192 = dot(vec3(cbLight._m0[_2144].xyz), vec3(_918, _919, _920));
    float _2195 = dot(vec3(cbLight._m0[_2181].xyz), vec3(_918, _919, _920));
    float _4436 = isnan(0.0) ? _2192 : (isnan(_2192) ? 0.0 : max(_2192, 0.0));
    float _4447 = isnan(0.0) ? _2195 : (isnan(_2195) ? 0.0 : max(_2195, 0.0));
    float _2200 = (isnan(1.0) ? _4436 : (isnan(_4436) ? 1.0 : min(_4436, 1.0))) * 0.3183098733425140380859375;
    float _2202 = (isnan(1.0) ? _4447 : (isnan(_4447) ? 1.0 : min(_4447, 1.0))) * 0.3183098733425140380859375;
    float _2209 = ((cbLight._m0[_2161].x * _2167) * _2202) + ((cbLight._m0[_2171].x * _2177) * _2200);
    float _2210 = ((_2167 * cbLight._m0[_2161].y) * _2202) + ((_2177 * cbLight._m0[_2171].y) * _2200);
    float _2211 = ((_2167 * cbLight._m0[_2161].z) * _2202) + ((_2177 * cbLight._m0[_2171].z) * _2200);
    uvec4 _2215 = floatBitsToUint(cbLight._m0[_2144 + 12u]);
    bool _2217 = _2215.x == 0u;
    float _2228;
    float _2230;
    float _2232;
    if (_2217)
    {
        _2228 = _2209;
        _2230 = _2210;
        _2232 = _2211;
    }
    else
    {
        uint _2236 = _2144 + 6u;
        float _2252 = (dot(vec3(cbLight._m0[_2144 + 2u].xyz), vec3(_918, _919, _920)) * 0.5) + 0.5;
        float _2253 = _2252 * _2252;
        float _4458 = isnan(0.0) ? _2253 : (isnan(_2253) ? 0.0 : max(_2253, 0.0));
        float _2254 = isnan(1.0) ? _4458 : (isnan(_4458) ? 1.0 : min(_4458, 1.0));
        float _2255 = isnan(1.0) ? _2159 : (isnan(_2159) ? 1.0 : min(_2159, 1.0));
        _2228 = (((cbLight._m0[_2236].x * 0.3183098733425140380859375) * _2254) * _2255) + _2209;
        _2230 = (((cbLight._m0[_2236].y * 0.3183098733425140380859375) * _2254) * _2255) + _2210;
        _2232 = (((cbLight._m0[_2236].z * 0.3183098733425140380859375) * _2254) * _2255) + _2211;
    }
    bool _2235 = _2215.y == 0u;
    float _2273;
    float _2275;
    float _2277;
    if (_2235)
    {
        _2273 = _2228;
        _2275 = _2230;
        _2277 = _2232;
    }
    else
    {
        uint _2432 = _2144 + 7u;
        float _2448 = (dot(vec3(cbLight._m0[_2144 + 3u].xyz), vec3(_918, _919, _920)) * 0.5) + 0.5;
        float _2449 = _2448 * _2448;
        float _4474 = isnan(0.0) ? _2449 : (isnan(_2449) ? 0.0 : max(_2449, 0.0));
        float _2450 = isnan(1.0) ? _4474 : (isnan(_4474) ? 1.0 : min(_4474, 1.0));
        float _2451 = isnan(1.0) ? _2160 : (isnan(_2160) ? 1.0 : min(_2160, 1.0));
        _2273 = (((cbLight._m0[_2432].x * 0.3183098733425140380859375) * _2450) * _2451) + _2228;
        _2275 = (((cbLight._m0[_2432].y * 0.3183098733425140380859375) * _2450) * _2451) + _2230;
        _2277 = (((cbLight._m0[_2432].z * 0.3183098733425140380859375) * _2450) * _2451) + _2232;
    }
    uint _2280 = _2144 + 8u;
    float _2293 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2144].w)) * _921) * 0.949999988079071044921875);
    float _2294 = _2293 * _2293;
    float _2295 = cbLight._m0[_2144].x + _998;
    float _2296 = cbLight._m0[_2144].y + _999;
    float _2297 = cbLight._m0[_2144].z + _1000;
    float _2301 = inversesqrt(dot(vec3(_2295, _2296, _2297), vec3(_2295, _2296, _2297)));
    float _2302 = _2301 * _2295;
    float _2303 = _2301 * _2296;
    float _2304 = _2301 * _2297;
    float _2305 = dot(vec3(_918, _919, _920), vec3(cbLight._m0[_2144].xyz));
    float _4490 = isnan(0.0) ? _2305 : (isnan(_2305) ? 0.0 : max(_2305, 0.0));
    float _2308 = isnan(1.0) ? _4490 : (isnan(_4490) ? 1.0 : min(_4490, 1.0));
    float _4501 = isnan(0.0) ? _1082 : (isnan(_1082) ? 0.0 : max(_1082, 0.0));
    float _2309 = isnan(1.0) ? _4501 : (isnan(_4501) ? 1.0 : min(_4501, 1.0));
    float _2310 = dot(vec3(_918, _919, _920), vec3(_2302, _2303, _2304));
    float _4512 = isnan(0.0) ? _2310 : (isnan(_2310) ? 0.0 : max(_2310, 0.0));
    float _2313 = isnan(1.0) ? _4512 : (isnan(_4512) ? 1.0 : min(_4512, 1.0));
    float _2314 = dot(vec3(cbLight._m0[_2144].xyz), vec3(_2302, _2303, _2304));
    float _4523 = isnan(0.0) ? _2314 : (isnan(_2314) ? 0.0 : max(_2314, 0.0));
    float _2318 = _2294 * _2294;
    float _2322 = ((_2313 * _2313) * (_2318 + (-1.0))) + 1.0;
    float _2333 = (exp2(log2(1.0 - (isnan(1.0) ? _4523 : (isnan(_4523) ? 1.0 : min(_4523, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2334 = 1.0 - _2294;
    float _2345 = (0.5 / (((_2309 * ((_2308 * _2334) + _2294)) + 9.9999999392252902907785028219223e-09) + (((_2309 * _2334) + _2294) * _2308))) * _2308;
    float _4534 = isnan(0.0) ? _2345 : (isnan(_2345) ? 0.0 : max(_2345, 0.0));
    float _2347 = (isnan(1.0) ? _4534 : (isnan(_4534) ? 1.0 : min(_4534, 1.0))) * (_2318 / ((_2322 * _2322) * 3.141590118408203125));
    uint _2358 = _2144 + 9u;
    float _2369 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2181].w)) * _921) * 0.949999988079071044921875);
    float _2370 = _2369 * _2369;
    float _2371 = cbLight._m0[_2181].x + _998;
    float _2372 = cbLight._m0[_2181].y + _999;
    float _2373 = cbLight._m0[_2181].z + _1000;
    float _2377 = inversesqrt(dot(vec3(_2371, _2372, _2373), vec3(_2371, _2372, _2373)));
    float _2378 = _2377 * _2371;
    float _2379 = _2377 * _2372;
    float _2380 = _2377 * _2373;
    float _2381 = dot(vec3(_918, _919, _920), vec3(cbLight._m0[_2181].xyz));
    float _4545 = isnan(0.0) ? _2381 : (isnan(_2381) ? 0.0 : max(_2381, 0.0));
    float _2384 = isnan(1.0) ? _4545 : (isnan(_4545) ? 1.0 : min(_4545, 1.0));
    float _2385 = dot(vec3(_918, _919, _920), vec3(_2378, _2379, _2380));
    float _4556 = isnan(0.0) ? _2385 : (isnan(_2385) ? 0.0 : max(_2385, 0.0));
    float _2388 = isnan(1.0) ? _4556 : (isnan(_4556) ? 1.0 : min(_4556, 1.0));
    float _2389 = dot(vec3(cbLight._m0[_2181].xyz), vec3(_2378, _2379, _2380));
    float _4567 = isnan(0.0) ? _2389 : (isnan(_2389) ? 0.0 : max(_2389, 0.0));
    float _2393 = _2370 * _2370;
    float _2397 = ((_2388 * _2388) * (_2393 + (-1.0))) + 1.0;
    float _2406 = (exp2(log2(1.0 - (isnan(1.0) ? _4567 : (isnan(_4567) ? 1.0 : min(_4567, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2407 = 1.0 - _2370;
    float _2417 = (0.5 / (((_2309 * ((_2384 * _2407) + _2370)) + 9.9999999392252902907785028219223e-09) + (((_2309 * _2407) + _2370) * _2384))) * _2384;
    float _4578 = isnan(0.0) ? _2417 : (isnan(_2417) ? 0.0 : max(_2417, 0.0));
    float _2419 = (isnan(1.0) ? _4578 : (isnan(_4578) ? 1.0 : min(_4578, 1.0))) * (_2393 / ((_2397 * _2397) * 3.141590118408203125));
    float _2429 = (((_2406 * cbLight._m0[_2358].x) * _2419) * _2167) + (((_2333 * cbLight._m0[_2280].x) * _2347) * _2177);
    float _2430 = (((_2406 * cbLight._m0[_2358].y) * _2419) * _2167) + (((_2333 * cbLight._m0[_2280].y) * _2347) * _2177);
    float _2431 = (((_2406 * cbLight._m0[_2358].z) * _2419) * _2167) + (((_2333 * cbLight._m0[_2280].z) * _2347) * _2177);
    float _2493;
    float _2495;
    float _2497;
    if (_2217)
    {
        _2493 = _2429;
        _2495 = _2430;
        _2497 = _2431;
    }
    else
    {
        uint _2499 = _2144 + 2u;
        uint _2503 = _2144 + 10u;
        float _2517 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2499].w)) * _921) * 0.949999988079071044921875);
        float _2518 = _2517 * _2517;
        float _2519 = cbLight._m0[_2499].x + _998;
        float _2520 = cbLight._m0[_2499].y + _999;
        float _2521 = cbLight._m0[_2499].z + _1000;
        float _2525 = inversesqrt(dot(vec3(_2519, _2520, _2521), vec3(_2519, _2520, _2521)));
        float _2526 = _2525 * _2519;
        float _2527 = _2525 * _2520;
        float _2528 = _2525 * _2521;
        float _2529 = dot(vec3(_918, _919, _920), vec3(cbLight._m0[_2499].xyz));
        float _4589 = isnan(0.0) ? _2529 : (isnan(_2529) ? 0.0 : max(_2529, 0.0));
        float _2532 = isnan(1.0) ? _4589 : (isnan(_4589) ? 1.0 : min(_4589, 1.0));
        float _2533 = dot(vec3(_918, _919, _920), vec3(_2526, _2527, _2528));
        float _4600 = isnan(0.0) ? _2533 : (isnan(_2533) ? 0.0 : max(_2533, 0.0));
        float _2536 = isnan(1.0) ? _4600 : (isnan(_4600) ? 1.0 : min(_4600, 1.0));
        float _2537 = dot(vec3(cbLight._m0[_2499].xyz), vec3(_2526, _2527, _2528));
        float _4611 = isnan(0.0) ? _2537 : (isnan(_2537) ? 0.0 : max(_2537, 0.0));
        float _2541 = _2518 * _2518;
        float _2545 = ((_2536 * _2536) * (_2541 + (-1.0))) + 1.0;
        float _2554 = (exp2(log2(1.0 - (isnan(1.0) ? _4611 : (isnan(_4611) ? 1.0 : min(_4611, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2555 = 1.0 - _2518;
        float _2565 = (0.5 / (((_2309 * ((_2532 * _2555) + _2518)) + 9.9999999392252902907785028219223e-09) + (((_2309 * _2555) + _2518) * _2532))) * _2532;
        float _4622 = isnan(0.0) ? _2565 : (isnan(_2565) ? 0.0 : max(_2565, 0.0));
        float _2567 = (isnan(1.0) ? _4622 : (isnan(_4622) ? 1.0 : min(_4622, 1.0))) * (_2541 / ((_2545 * _2545) * 3.141590118408203125));
        float _2568 = isnan(1.0) ? _2159 : (isnan(_2159) ? 1.0 : min(_2159, 1.0));
        _2493 = (((_2554 * cbLight._m0[_2503].x) * _2567) * _2568) + _2429;
        _2495 = (((_2554 * cbLight._m0[_2503].y) * _2567) * _2568) + _2430;
        _2497 = (((_2554 * cbLight._m0[_2503].z) * _2567) * _2568) + _2431;
    }
    float _2603;
    float _2605;
    float _2607;
    if (_2235)
    {
        _2603 = _2493;
        _2605 = _2495;
        _2607 = _2497;
    }
    else
    {
        uint _2614 = _2144 + 3u;
        uint _2618 = _2144 + 11u;
        float _2632 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2614].w)) * _921) * 0.949999988079071044921875);
        float _2633 = _2632 * _2632;
        float _2634 = cbLight._m0[_2614].x + _998;
        float _2635 = cbLight._m0[_2614].y + _999;
        float _2636 = cbLight._m0[_2614].z + _1000;
        float _2640 = inversesqrt(dot(vec3(_2634, _2635, _2636), vec3(_2634, _2635, _2636)));
        float _2641 = _2640 * _2634;
        float _2642 = _2640 * _2635;
        float _2643 = _2640 * _2636;
        float _2644 = dot(vec3(_918, _919, _920), vec3(cbLight._m0[_2614].xyz));
        float _4638 = isnan(0.0) ? _2644 : (isnan(_2644) ? 0.0 : max(_2644, 0.0));
        float _2647 = isnan(1.0) ? _4638 : (isnan(_4638) ? 1.0 : min(_4638, 1.0));
        float _2648 = dot(vec3(_918, _919, _920), vec3(_2641, _2642, _2643));
        float _4649 = isnan(0.0) ? _2648 : (isnan(_2648) ? 0.0 : max(_2648, 0.0));
        float _2651 = isnan(1.0) ? _4649 : (isnan(_4649) ? 1.0 : min(_4649, 1.0));
        float _2652 = dot(vec3(cbLight._m0[_2614].xyz), vec3(_2641, _2642, _2643));
        float _4660 = isnan(0.0) ? _2652 : (isnan(_2652) ? 0.0 : max(_2652, 0.0));
        float _2656 = _2633 * _2633;
        float _2660 = ((_2651 * _2651) * (_2656 + (-1.0))) + 1.0;
        float _2669 = (exp2(log2(1.0 - (isnan(1.0) ? _4660 : (isnan(_4660) ? 1.0 : min(_4660, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2670 = 1.0 - _2633;
        float _2680 = (0.5 / (((_2309 * ((_2647 * _2670) + _2633)) + 9.9999999392252902907785028219223e-09) + (((_2309 * _2670) + _2633) * _2647))) * _2647;
        float _4671 = isnan(0.0) ? _2680 : (isnan(_2680) ? 0.0 : max(_2680, 0.0));
        float _2682 = (isnan(1.0) ? _4671 : (isnan(_4671) ? 1.0 : min(_4671, 1.0))) * (_2656 / ((_2660 * _2660) * 3.141590118408203125));
        float _2683 = isnan(1.0) ? _2160 : (isnan(_2160) ? 1.0 : min(_2160, 1.0));
        _2603 = (((_2669 * cbLight._m0[_2618].x) * _2682) * _2683) + _2493;
        _2605 = (((_2669 * cbLight._m0[_2618].y) * _2682) * _2683) + _2495;
        _2607 = (((_2669 * cbLight._m0[_2618].z) * _2682) * _2683) + _2497;
    }
    float _2818;
    float _2820;
    float _2822;
    float _2824;
    float _2826;
    float _2828;
    if (_2142.y == 0u)
    {
        float _2758 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2759 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2758;
        float _2760 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2758;
        float _2761 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2758;
        uvec4 _2773 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2774 = _2773.x;
        uint _2785 = uint((float(_2773.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1019) / _2774))) + floor(float(uint(cbSceneParam._m0[85u].x * _1018) / _2774)));
        float _2795 = (log2(_2761 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2796 = isnan(0.0) ? _2795 : (isnan(_2795) ? 0.0 : max(_2795, 0.0));
        uint _2799 = uint(isnan(14.0) ? _2796 : (isnan(_2796) ? 14.0 : min(_2796, 14.0)));
        uvec4 _2804 = texelFetch(g_lightClusterGridBuffer, int(((_2799 << 2u) + (_2785 << 6u)) >> 2u));
        uint _2805 = _2804.x;
        uint _2806 = _2773.z;
        float _2906;
        float _2908;
        float _2910;
        float _2912;
        float _2914;
        float _2916;
        if (((((1u << ((_2806 >> 4u) & 15u)) + 4294967295u) & _2805) == 0u) || ((_2806 & 240u) == 0u))
        {
            _2906 = 0.0;
            _2908 = 0.0;
            _2910 = 0.0;
            _2912 = 0.0;
            _2914 = 0.0;
            _2916 = 0.0;
        }
        else
        {
            float _2907;
            float _2909;
            float _2911;
            float _2913;
            float _2915;
            float _2917;
            float _3059 = 0.0;
            float _3060 = 0.0;
            float _3061 = 0.0;
            float _3062 = 0.0;
            float _3063 = 0.0;
            float _3064 = 0.0;
            uint _3065 = 0u;
            uint _3074;
            bool _3075;
            for (;;)
            {
                _3074 = texelFetch(g_lightClassification, int((((_2799 << 5u) + (_2785 << 9u)) + (_3065 << 2u)) >> 2u)).x;
                _3075 = _3074 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3075)
                {
                    frontier_phi_66_pred = _3059;
                    frontier_phi_66_pred_1 = _3064;
                    frontier_phi_66_pred_2 = _3063;
                    frontier_phi_66_pred_3 = _3062;
                    frontier_phi_66_pred_4 = _3061;
                    frontier_phi_66_pred_5 = _3060;
                }
                else
                {
                    float _3204;
                    float _3205;
                    float _3206;
                    float _3207;
                    float _3208;
                    float _3209;
                    uint _3210;
                    _3204 = _3059;
                    _3205 = _3060;
                    _3206 = _3061;
                    _3207 = _3062;
                    _3208 = _3063;
                    _3209 = _3064;
                    _3210 = _3074;
                    float _3131;
                    float _3132;
                    float _3133;
                    float _3134;
                    float _3135;
                    float _3136;
                    for (;;)
                    {
                        uint _3214 = uint(findLSB(_3210)) + (_3065 << 5u);
                        uint _3211 = (_3210 + 4294967295u) & _3210;
                        uint _3216 = _3214 * 48u;
                        vec4 _3230 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3216)).x, texelFetch(g_PointLightRenderingBuffer, int(_3216 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3216 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3216 + 3u)).x));
                        uint _3236 = (_3214 * 48u) + 4u;
                        vec4 _3249 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3236)).x, texelFetch(g_PointLightRenderingBuffer, int(_3236 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3236 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3236 + 3u)).x));
                        uint _3255 = (_3214 * 48u) + 8u;
                        vec3 _3266 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3255)).x, texelFetch(g_PointLightRenderingBuffer, int(_3255 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3255 + 2u)).x));
                        float _3270 = _3230.x - _2759;
                        float _3271 = _3230.y - _2760;
                        float _3272 = _3230.z - _2761;
                        float _3273 = dot(vec3(_3270, _3271, _3272), vec3(_3270, _3271, _3272));
                        float _3276 = inversesqrt(_3273);
                        float _3277 = _3276 * _3270;
                        float _3278 = _3276 * _3271;
                        float _3279 = _3276 * _3272;
                        float _3280 = dot(vec3(_1037, _1040, _1043), vec3(_3277, _3278, _3279));
                        float _3285 = 1.0 - (_3273 * _3230.w);
                        float _4697 = isnan(0.0) ? _3285 : (isnan(_3285) ? 0.0 : max(_3285, 0.0));
                        float _3286 = isnan(1.0) ? _4697 : (isnan(_4697) ? 1.0 : min(_4697, 1.0));
                        float _3287 = sqrt(_3273) * _3249.w;
                        float _3290 = 1.39999997615814208984375 / (_3287 + 1.39999997615814208984375);
                        float _3291 = _3290 * _3290;
                        float _3294 = ((1.0 - _3291) * _3280) + _3291;
                        float _3297 = _3287 * _3287;
                        float _3301 = ((isnan(0.0) ? _3294 : (isnan(_3294) ? 0.0 : max(_3294, 0.0))) * _3286) / ((_3297 * 0.699999988079071044921875) + 1.0);
                        float _3305 = (-0.0) - _2759;
                        float _3306 = (-0.0) - _2760;
                        float _3307 = (-0.0) - _2761;
                        float _3311 = inversesqrt(dot(vec3(_3305, _3306, _3307), vec3(_3305, _3306, _3307)));
                        float _3312 = _3311 * _3305;
                        float _3313 = _3311 * _3306;
                        float _3314 = _3311 * _3307;
                        float _3322 = exp2(log2(1.0 / ((_3297 * 3.5) + 5.0)) * 0.25);
                        float _3323 = 1.0 - _1097;
                        float _3330 = sqrt(1.0 - ((1.0 - (_3323 * _3323)) * (1.0 - (_3322 * _3322))));
                        float _3331 = _3330 * _3330;
                        float _3332 = _3331 * _3331;
                        float _3333 = _3312 + _3277;
                        float _3334 = _3313 + _3278;
                        float _3335 = _3314 + _3279;
                        float _3339 = inversesqrt(dot(vec3(_3333, _3334, _3335), vec3(_3333, _3334, _3335)));
                        float _3343 = dot(vec3(_1037, _1040, _1043), vec3(_3312, _3313, _3314));
                        float _4713 = isnan(0.0) ? _3343 : (isnan(_3343) ? 0.0 : max(_3343, 0.0));
                        float _3346 = isnan(1.0) ? _4713 : (isnan(_4713) ? 1.0 : min(_4713, 1.0));
                        float _3347 = dot(vec3(_1037, _1040, _1043), vec3(_3339 * _3333, _3339 * _3334, _3339 * _3335));
                        float _4724 = isnan(0.0) ? _3347 : (isnan(_3347) ? 0.0 : max(_3347, 0.0));
                        float _3350 = isnan(1.0) ? _4724 : (isnan(_4724) ? 1.0 : min(_4724, 1.0));
                        float _3354 = ((_3350 * _3350) * (_3332 + (-1.0))) + 1.0;
                        float _3355 = _3290 * _3331;
                        float _3356 = _3355 * _3355;
                        float _3359 = ((1.0 - _3356) * _3280) + _3356;
                        float _4735 = isnan(0.0) ? _3359 : (isnan(_3359) ? 0.0 : max(_3359, 0.0));
                        float _3360 = isnan(1.0) ? _4735 : (isnan(_4735) ? 1.0 : min(_4735, 1.0));
                        float _3361 = 1.0 - _3331;
                        float _3371 = (0.5 / (((_3360 * ((_3346 * _3361) + _3331)) + 9.9999999392252902907785028219223e-09) + (((_3360 * _3361) + _3331) * _3346))) * _3360;
                        float _4746 = isnan(0.0) ? _3371 : (isnan(_3371) ? 0.0 : max(_3371, 0.0));
                        float _3382 = (((_3332 * 3.1415927410125732421875) * (isnan(1.0) ? _4746 : (isnan(_4746) ? 1.0 : min(_4746, 1.0)))) / ((_3354 * _3354) * ((_3297 * 2.1991131305694580078125) + 3.141590118408203125))) * _3286;
                        _3134 = (_3301 * _3249.x) + _3207;
                        _3135 = (_3301 * _3249.y) + _3208;
                        _3136 = (_3301 * _3249.z) + _3209;
                        _3131 = (_3382 * _3266.x) + _3204;
                        _3132 = (_3382 * _3266.y) + _3205;
                        _3133 = (_3382 * _3266.z) + _3206;
                        if (_3211 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3204 = _3131;
                            _3205 = _3132;
                            _3206 = _3133;
                            _3207 = _3134;
                            _3208 = _3135;
                            _3209 = _3136;
                            _3210 = _3211;
                        }
                    }
                    frontier_phi_66_pred = _3131;
                    frontier_phi_66_pred_1 = _3136;
                    frontier_phi_66_pred_2 = _3135;
                    frontier_phi_66_pred_3 = _3134;
                    frontier_phi_66_pred_4 = _3133;
                    frontier_phi_66_pred_5 = _3132;
                }
                _2907 = frontier_phi_66_pred;
                _2917 = frontier_phi_66_pred_1;
                _2915 = frontier_phi_66_pred_2;
                _2913 = frontier_phi_66_pred_3;
                _2911 = frontier_phi_66_pred_4;
                _2909 = frontier_phi_66_pred_5;
                uint _3066 = _3065 + 1u;
                if (_3066 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3059 = _2907;
                    _3060 = _2909;
                    _3061 = _2911;
                    _3062 = _2913;
                    _3063 = _2915;
                    _3064 = _2917;
                    _3065 = _3066;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2906 = _2907;
            _2908 = _2909;
            _2910 = _2911;
            _2912 = _2913;
            _2914 = _2915;
            _2916 = _2917;
        }
        uvec4 _2920 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2921 = _2920.z;
        uint _2923 = (_2921 >> 8u) & 15u;
        float _3027;
        float _3029;
        float _3031;
        float _3033;
        float _3035;
        float _3037;
        if (((4294967295u << _2923) & _2805) == 0u)
        {
            _3027 = _2906;
            _3029 = _2908;
            _3031 = _2910;
            _3033 = _2912;
            _3035 = _2914;
            _3037 = _2916;
        }
        else
        {
            float _3052 = inversesqrt(dot(vec3(_2759, _2760, _2761), vec3(_2759, _2760, _2761)));
            float _3053 = _3052 * _2759;
            float _3054 = _3052 * _2760;
            float _3055 = _3052 * _2761;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2923 < ((_2921 >> 12u) & 15u))
            {
                float _3028;
                float _3030;
                float _3032;
                float _3034;
                float _3036;
                float _3038;
                float _3187 = _2906;
                float _3188 = _2908;
                float _3189 = _2910;
                float _3190 = _2912;
                float _3191 = _2914;
                float _3192 = _2916;
                uint _3193 = _2923;
                uint _3202;
                bool _3203;
                for (;;)
                {
                    _3202 = texelFetch(g_lightClassification, int((((_2799 << 5u) + (_2785 << 9u)) + (_3193 << 2u)) >> 2u)).x;
                    _3203 = _3202 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_3203)
                    {
                        frontier_phi_77_pred = _3192;
                        frontier_phi_77_pred_1 = _3191;
                        frontier_phi_77_pred_2 = _3190;
                        frontier_phi_77_pred_3 = _3189;
                        frontier_phi_77_pred_4 = _3188;
                        frontier_phi_77_pred_5 = _3187;
                    }
                    else
                    {
                        float _3396;
                        float _3397;
                        float _3398;
                        float _3399;
                        float _3400;
                        float _3401;
                        float _3689;
                        float _3690;
                        float _3691;
                        float _3692;
                        float _3693;
                        float _3694;
                        float _3409 = _3187;
                        float _3410 = _3188;
                        float _3411 = _3189;
                        float _3412 = _3190;
                        float _3413 = _3191;
                        float _3414 = _3192;
                        uint _3415 = _3202;
                        uint _3416;
                        vec4 _3441;
                        float _3442;
                        vec4 _3457;
                        vec3 _3469;
                        vec4 _3484;
                        vec4 _3499;
                        float _3545;
                        bool _3546;
                        for (;;)
                        {
                            uint _3426 = ((_3193 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3415));
                            _3416 = (_3415 + 4294967295u) & _3415;
                            uint _3428 = _3426 * 40u;
                            _3441 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3428)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3428 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3428 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3428 + 3u)).x));
                            _3442 = _3441.w;
                            uint _3444 = (_3426 * 40u) + 4u;
                            _3457 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3444)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3444 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3444 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3444 + 3u)).x));
                            uint _3459 = (_3426 * 40u) + 8u;
                            _3469 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3459)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3459 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3459 + 2u)).x));
                            uint _3471 = (_3426 * 40u) + 16u;
                            _3484 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3471)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3471 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3471 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3471 + 3u)).x));
                            uint _3486 = (_3426 * 40u) + 20u;
                            _3499 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3486)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3486 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3486 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3486 + 3u)).x));
                            uint _3501 = (_3426 * 40u) + 24u;
                            vec4 _3514 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3501)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3501 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3501 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3501 + 3u)).x));
                            uint _3520 = (_3426 * 40u) + 28u;
                            vec4 _3533 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3520)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3520 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3520 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3520 + 3u)).x));
                            _3545 = fma(_2761, _3533.z, fma(_2760, _3533.y, _3533.x * _2759)) + _3533.w;
                            _3546 = !((fma(_2761, _3514.z, fma(_2760, _3514.y, _3514.x * _2759)) + _3514.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3546)
                            {
                                float _3573 = _3441.x - _2759;
                                float _3574 = _3441.y - _2760;
                                float _3575 = _3441.z - _2761;
                                float _3576 = dot(vec3(_3573, _3574, _3575), vec3(_3573, _3574, _3575));
                                float _3579 = inversesqrt(_3576);
                                float _3580 = _3579 * _3573;
                                float _3581 = _3579 * _3574;
                                float _3582 = _3579 * _3575;
                                float _3586 = 1.0 - (_3576 / (_3442 * _3442));
                                float _4757 = isnan(0.0) ? _3586 : (isnan(_3586) ? 0.0 : max(_3586, 0.0));
                                float _3587 = isnan(1.0) ? _4757 : (isnan(_4757) ? 1.0 : min(_4757, 1.0));
                                float _3591 = sqrt(_3576) * _3457.w;
                                float _3593 = 1.39999997615814208984375 / (_3591 + 1.39999997615814208984375);
                                float _3594 = _3593 * _3593;
                                float _3597 = ((1.0 - _3594) * dot(vec3(_3580, _3581, _3582), vec3(_1037, _1040, _1043))) + _3594;
                                float _3600 = _3591 * _3591;
                                float _3604 = (fma(_2761, _3484.z, fma(_2760, _3484.y, _3484.x * _2759)) + _3484.w) / _3545;
                                float _3605 = (fma(_2761, _3499.z, fma(_2760, _3499.y, _3499.x * _2759)) + _3499.w) / _3545;
                                float _3609 = 1.0 - dot(vec2(_3604, _3605), vec2(_3604, _3605));
                                float _4773 = isnan(0.0) ? _3609 : (isnan(_3609) ? 0.0 : max(_3609, 0.0));
                                float _3610 = isnan(1.0) ? _4773 : (isnan(_4773) ? 1.0 : min(_4773, 1.0));
                                float _3611 = _3610 * (((isnan(0.0) ? _3597 : (isnan(_3597) ? 0.0 : max(_3597, 0.0))) * _3587) / ((_3600 * 0.699999988079071044921875) + 1.0));
                                float _3623 = exp2(log2(1.0 / ((_3600 * 3.5) + 5.0)) * 0.25);
                                float _3624 = 1.0 - _1097;
                                float _3631 = sqrt(1.0 - ((1.0 - (_3624 * _3624)) * (1.0 - (_3623 * _3623))));
                                float _3632 = _3631 * _3631;
                                float _3633 = _3632 * _3632;
                                float _3634 = _3580 - _3053;
                                float _3635 = _3581 - _3054;
                                float _3636 = _3582 - _3055;
                                float _3640 = inversesqrt(dot(vec3(_3634, _3635, _3636), vec3(_3634, _3635, _3636)));
                                float _3644 = dot(vec3(_1037, _1040, _1043), vec3((-0.0) - _3053, (-0.0) - _3054, (-0.0) - _3055));
                                float _4784 = isnan(0.0) ? _3644 : (isnan(_3644) ? 0.0 : max(_3644, 0.0));
                                float _3647 = isnan(1.0) ? _4784 : (isnan(_4784) ? 1.0 : min(_4784, 1.0));
                                float _3648 = dot(vec3(_1037, _1040, _1043), vec3(_3640 * _3634, _3640 * _3635, _3640 * _3636));
                                float _4795 = isnan(0.0) ? _3648 : (isnan(_3648) ? 0.0 : max(_3648, 0.0));
                                float _3651 = isnan(1.0) ? _4795 : (isnan(_4795) ? 1.0 : min(_4795, 1.0));
                                float _3655 = ((_3651 * _3651) * (_3633 + (-1.0))) + 1.0;
                                float _3656 = _3593 * _3632;
                                float _3657 = _3656 * _3656;
                                float _3663 = ((1.0 - _3657) * dot(vec3(_1037, _1040, _1043), vec3(_3580, _3581, _3582))) + _3657;
                                float _4806 = isnan(0.0) ? _3663 : (isnan(_3663) ? 0.0 : max(_3663, 0.0));
                                float _3664 = isnan(1.0) ? _4806 : (isnan(_4806) ? 1.0 : min(_4806, 1.0));
                                float _3665 = 1.0 - _3632;
                                float _3675 = (0.5 / (((_3664 * ((_3647 * _3665) + _3632)) + 9.9999999392252902907785028219223e-09) + (((_3664 * _3665) + _3632) * _3647))) * _3664;
                                float _4817 = isnan(0.0) ? _3675 : (isnan(_3675) ? 0.0 : max(_3675, 0.0));
                                float _3685 = (_3610 * _3587) * (((_3633 * 3.1415927410125732421875) * (isnan(1.0) ? _4817 : (isnan(_4817) ? 1.0 : min(_4817, 1.0)))) / ((_3655 * _3655) * ((_3600 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3611 * _3457.y;
                                frontier_phi_83_pred_1 = _3611 * _3457.x;
                                frontier_phi_83_pred_2 = _3685 * _3469.z;
                                frontier_phi_83_pred_3 = _3685 * _3469.y;
                                frontier_phi_83_pred_4 = _3685 * _3469.x;
                                frontier_phi_83_pred_5 = _3611 * _3457.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3693 = frontier_phi_83_pred;
                            _3692 = frontier_phi_83_pred_1;
                            _3691 = frontier_phi_83_pred_2;
                            _3690 = frontier_phi_83_pred_3;
                            _3689 = frontier_phi_83_pred_4;
                            _3694 = frontier_phi_83_pred_5;
                            _3399 = _3692 + _3412;
                            _3400 = _3693 + _3413;
                            _3401 = _3694 + _3414;
                            _3396 = _3689 + _3409;
                            _3397 = _3690 + _3410;
                            _3398 = _3691 + _3411;
                            if (_3416 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3409 = _3396;
                                _3410 = _3397;
                                _3411 = _3398;
                                _3412 = _3399;
                                _3413 = _3400;
                                _3414 = _3401;
                                _3415 = _3416;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3401;
                        frontier_phi_77_pred_1 = _3400;
                        frontier_phi_77_pred_2 = _3399;
                        frontier_phi_77_pred_3 = _3398;
                        frontier_phi_77_pred_4 = _3397;
                        frontier_phi_77_pred_5 = _3396;
                    }
                    _3038 = frontier_phi_77_pred;
                    _3036 = frontier_phi_77_pred_1;
                    _3034 = frontier_phi_77_pred_2;
                    _3032 = frontier_phi_77_pred_3;
                    _3030 = frontier_phi_77_pred_4;
                    _3028 = frontier_phi_77_pred_5;
                    uint _3194 = _3193 + 1u;
                    if (_3194 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3187 = _3028;
                        _3188 = _3030;
                        _3189 = _3032;
                        _3190 = _3034;
                        _3191 = _3036;
                        _3192 = _3038;
                        _3193 = _3194;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _3032;
                frontier_phi_58_59_ladder_1 = _3038;
                frontier_phi_58_59_ladder_2 = _3036;
                frontier_phi_58_59_ladder_3 = _3034;
                frontier_phi_58_59_ladder_4 = _3030;
                frontier_phi_58_59_ladder_5 = _3028;
            }
            else
            {
                frontier_phi_58_59_ladder = _2910;
                frontier_phi_58_59_ladder_1 = _2916;
                frontier_phi_58_59_ladder_2 = _2914;
                frontier_phi_58_59_ladder_3 = _2912;
                frontier_phi_58_59_ladder_4 = _2908;
                frontier_phi_58_59_ladder_5 = _2906;
            }
            _3027 = frontier_phi_58_59_ladder_5;
            _3029 = frontier_phi_58_59_ladder_4;
            _3031 = frontier_phi_58_59_ladder;
            _3033 = frontier_phi_58_59_ladder_3;
            _3035 = frontier_phi_58_59_ladder_2;
            _3037 = frontier_phi_58_59_ladder_1;
        }
        float _3042 = isnan(1.0) ? _1081 : (isnan(_1081) ? 1.0 : min(_1081, 1.0));
        _2818 = (_3042 * _3033) + _2273;
        _2820 = (_3042 * _3035) + _2275;
        _2822 = (_3042 * _3037) + _2277;
        _2824 = ((_3027 * 0.039999999105930328369140625) * _3042) + _2603;
        _2826 = ((_3029 * 0.039999999105930328369140625) * _3042) + _2605;
        _2828 = ((_3031 * 0.039999999105930328369140625) * _3042) + _2607;
    }
    else
    {
        _2818 = _2273;
        _2820 = _2275;
        _2822 = _2277;
        _2824 = _2603;
        _2826 = _2605;
        _2828 = _2607;
    }
    float _4833 = isnan(0.0) ? _1066 : (isnan(_1066) ? 0.0 : max(_1066, 0.0));
    float _4844 = isnan(0.0) ? _1067 : (isnan(_1067) ? 0.0 : max(_1067, 0.0));
    float _4855 = isnan(0.0) ? _1068 : (isnan(_1068) ? 0.0 : max(_1068, 0.0));
    float _2845 = ((isnan(1.0) ? _4833 : (isnan(_4833) ? 1.0 : min(_4833, 1.0))) * (_2818 + ((isnan(0.0) ? _1836 : (isnan(_1836) ? 0.0 : max(_1836, 0.0))) * _1081))) + ((_2824 + ((isnan(0.0) ? _2126 : (isnan(_2126) ? 0.0 : max(_2126, 0.0))) * _1915)) * cbPerFrame._m0[3u].x);
    float _2846 = ((isnan(1.0) ? _4844 : (isnan(_4844) ? 1.0 : min(_4844, 1.0))) * (_2820 + ((isnan(0.0) ? _1839 : (isnan(_1839) ? 0.0 : max(_1839, 0.0))) * _1081))) + ((_2826 + ((isnan(0.0) ? _2129 : (isnan(_2129) ? 0.0 : max(_2129, 0.0))) * _1915)) * cbPerFrame._m0[3u].x);
    float _2847 = ((isnan(1.0) ? _4855 : (isnan(_4855) ? 1.0 : min(_4855, 1.0))) * (_2822 + ((isnan(0.0) ? _1842 : (isnan(_1842) ? 0.0 : max(_1842, 0.0))) * _1081))) + ((_2828 + ((isnan(0.0) ? _2132 : (isnan(_2132) ? 0.0 : max(_2132, 0.0))) * _1915)) * cbPerFrame._m0[3u].x);
    uint _2848 = _280 + 6u;
    float _2856 = _1018 / cbSceneParam._m0[86u].x;
    float _2857 = _1019 / cbSceneParam._m0[86u].y;
    vec4 _2871 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2856, _2857, (log2((isnan(cbSceneParam._m0[77u].w) ? _939 : (isnan(_939) ? cbSceneParam._m0[77u].w : min(_939, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2873 = _2871.x;
    float _2874 = _2871.y;
    float _2875 = _2871.z;
    float _2876 = _2871.w;
    float _2969;
    float _2971;
    float _2973;
    float _2975;
    if (_939 > cbSceneParam._m0[78u].w)
    {
        float _2931 = isnan(_939) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _939 : min(cbSceneParam._m0[80u].w, _939));
        float _2932 = _2931 / _939;
        float _2943 = _2932 * _991;
        float _2944 = _992 * _2932;
        float _2945 = (-0.0) - _2944;
        float _2947 = _2932 * _993;
        float _2949 = (cbSceneParam._m0[77u].w * _2945) / _2931;
        float _2950 = _2949 + cbSceneParam._m0[79u].w;
        float _2951 = cbSceneParam._m0[79u].w - _2944;
        float _2957 = sqrt(((_2943 * _2943) + (_2944 * _2944)) + (_2947 * _2947));
        float _2960 = (1.0 - (cbSceneParam._m0[77u].w / _2931)) * _2957;
        float _2965 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2967 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3144;
        if (abs((_2945 - _2949) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3144 = ((((_2950 > 0.0) ? exp2(_2965 * _2950) : (2.0 - exp2(_2967 * _2950))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2960;
        }
        else
        {
            float _3088 = 1.0 / cbSceneParam._m0[80u].x;
            float _3089 = isnan(_2951) ? _2950 : (isnan(_2950) ? _2951 : max(_2950, _2951));
            float _3090 = isnan(_2951) ? _2950 : (isnan(_2950) ? _2951 : min(_2950, _2951));
            float _3099 = isnan(0.0) ? _3089 : (isnan(_3089) ? 0.0 : min(_3089, 0.0));
            float _3100 = isnan(0.0) ? _3090 : (isnan(_3090) ? 0.0 : min(_3090, 0.0));
            _3144 = ((abs(_2957 / _2945) * cbSceneParam._m0[80u].y) * ((((_3099 - _3100) * 2.0) - ((exp2(_2965 * (isnan(0.0) ? _3089 : (isnan(_3089) ? 0.0 : max(_3089, 0.0)))) - exp2(_2965 * (isnan(0.0) ? _3090 : (isnan(_3090) ? 0.0 : max(_3090, 0.0))))) * _3088)) - ((exp2(_2967 * _3099) - exp2(_2967 * _3100)) * _3088))) + (_2960 * cbSceneParam._m0[80u].z);
        }
        vec4 _3146 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2856, _2857, 1.0), 0.0);
        float _3155 = exp2((_3144 * (-1.44269502162933349609375)) * (1.0 - _3146.w));
        float _3156 = log2(_3155);
        float _3172 = log2(_2876);
        _2969 = (exp2(_3172 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3156 * cbSceneParam._m0[78u].x)) * _3146.x) / cbSceneParam._m0[78u].x)) + _2873;
        _2971 = (exp2(_3172 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3156 * cbSceneParam._m0[78u].y)) * _3146.y) / cbSceneParam._m0[78u].y)) + _2874;
        _2973 = (exp2(_3172 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3156 * cbSceneParam._m0[78u].z)) * _3146.z) / cbSceneParam._m0[78u].z)) + _2875;
        _2975 = _3155 * _2876;
    }
    else
    {
        _2969 = _2873;
        _2971 = _2874;
        _2973 = _2875;
        _2975 = _2876;
    }
    bool _3182;
    vec4 _2985;
    vec4 _3007;
    float _3009;
    float _3013;
    float _3014;
    float _3015;
    float _3016;
    bool _3026;
    for (;;)
    {
        _2985 = cbMatDynParam._m0[0u];
        float _2987 = roundEven(_2985.y);
        bool _2988 = _2987 == 3.0;
        float _2989 = log2(_2975);
        float _2996 = exp2(_2989 * cbSceneParam._m0[78u].x) * _2845;
        float _2997 = exp2(_2989 * cbSceneParam._m0[78u].y) * _2846;
        float _2998 = exp2(_2989 * cbSceneParam._m0[78u].z) * _2847;
        float _3005 = _1007 + (-0.5);
        _3007 = cbMtdParam._m0[1u];
        _3009 = _3007.y * _3005;
        float _3012 = (_2987 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3013 = _3012 * (_2988 ? _2996 : (_2996 + (cbSceneParam._m0[72u].w * _2969)));
        _3014 = _3012 * (_2988 ? _2997 : (_2997 + (cbSceneParam._m0[72u].w * _2971)));
        _3015 = _3012 * (_2988 ? _2998 : (_2998 + (cbSceneParam._m0[72u].w * _2973)));
        _3016 = _3005 * 0.999000012874603271484375;
        _3026 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3026)
        {
            if ((cbInstanceData._m0[_280 + 7u].x + _3016) < 0.5)
            {
                _3182 = true;
                break;
            }
        }
        uint _3123 = _1056 + uint(_2985.w);
        if ((cbInstanceData._m0[_3123].w < 1.0) && ((cbInstanceData._m0[_3123].w + _3016) < 0.5))
        {
            _3182 = true;
            break;
        }
        if ((_3009 + 1.0) < _3007.x)
        {
            _3182 = true;
            break;
        }
        _3182 = false;
        break;
    }
    float _3387;
    if (_3182)
    {
        discard_state = true;
        _3387 = 0.0;
    }
    else
    {
        _3387 = cbInstanceData._m0[_2848].w;
    }
    SV_Target.x = _3013;
    SV_Target.y = _3014;
    SV_Target.z = _3015;
    SV_Target.w = _3387;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2848].w;
    discard_exit();
}


