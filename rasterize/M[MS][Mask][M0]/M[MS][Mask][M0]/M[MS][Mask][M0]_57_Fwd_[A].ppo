#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_0;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_29;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_10;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_6;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1309;
float _3670;
float _3671;
float _3672;
float _3673;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _223 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _224 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _225 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _231 = inversesqrt(dot(vec3(_223, _224, _225), vec3(_223, _224, _225)));
    float _238 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _245 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _251 = uint(roundEven(NORMAL.w)) * 13u;
    uint _256 = _251 + 1u;
    uint _260 = _251 + 2u;
    float _269 = sqrt(((cbInstanceData._m0[_256].x * cbInstanceData._m0[_256].x) + (cbInstanceData._m0[_251].x * cbInstanceData._m0[_251].x)) + (cbInstanceData._m0[_260].x * cbInstanceData._m0[_260].x));
    float _270 = _269 * TEXCOORD.z;
    float _271 = _269 * TEXCOORD.w;
    vec4 _290 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _314 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _319 = _314.x * cbMtdParam._m0[11u].x;
    float _320 = _314.y * cbMtdParam._m0[11u].y;
    float _321 = _314.z * cbMtdParam._m0[11u].z;
    vec4 _340 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _270) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _271) + cbTextureTilingScale._m0[5u].w));
    vec4 _359 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _396 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _398 = _396.x;
    float _410 = dot(vec4(_398, _396.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _427 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _359.x) * 2.0) - ((((_398 - _410) * cbMtdParam._m0[24u].z) + _410) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3682 = isnan(0.0) ? _427 : (isnan(_427) ? 0.0 : max(_427, 0.0));
    float _428 = isnan(1.0) ? _3682 : (isnan(_3682) ? 1.0 : min(_3682, 1.0));
    float _435 = (_428 * ((_340.x * cbMtdParam._m0[12u].x) - _319)) + _319;
    float _436 = (_428 * ((_340.y * cbMtdParam._m0[12u].y) - _320)) + _320;
    float _437 = (_428 * ((_340.z * cbMtdParam._m0[12u].z) - _321)) + _321;
    vec4 _454 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _270) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _271) + cbTextureTilingScale._m0[3u].w));
    vec4 _474 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _476 = _474.x;
    float _486 = dot(vec4(_476, _474.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _500 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _359.y) * 2.0) - ((((_476 - _486) * cbMtdParam._m0[24u].z) + _486) * cbMtdParam._m0[20u].w))) + 1.0;
    float _3693 = isnan(0.0) ? _500 : (isnan(_500) ? 0.0 : max(_500, 0.0));
    float _501 = isnan(1.0) ? _3693 : (isnan(_3693) ? 1.0 : min(_3693, 1.0));
    float _514 = ((cbMtdParam._m0[9u].x * 4.55000019073486328125) * _290.x) * ((_501 * ((_454.x * cbMtdParam._m0[13u].x) - _435)) + _435);
    float _517 = ((cbMtdParam._m0[9u].y * 4.55000019073486328125) * _290.y) * ((_501 * ((_454.y * cbMtdParam._m0[13u].y) - _436)) + _436);
    float _520 = ((cbMtdParam._m0[9u].z * 4.55000019073486328125) * _290.z) * ((_501 * ((_454.z * cbMtdParam._m0[13u].z) - _437)) + _437);
    vec4 _533 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _270) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _271) + cbTextureTilingScale._m0[4u].w));
    vec4 _550 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _552 = _550.x;
    float _553 = _550.y;
    float _554 = _550.z;
    float _561 = ((_533.x - _552) * _428) + _552;
    float _562 = ((_533.y - _553) * _428) + _553;
    float _563 = ((_533.z - _554) * _428) + _554;
    vec4 _575 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _270) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _271) + cbTextureTilingScale._m0[2u].w));
    float _588 = ((_575.z - _563) * _501) + _563;
    float _591 = ((((_575.x - _561) * _501) + _561) * 2.0) + (-1.0);
    float _593 = ((((_575.y - _562) * _501) + _562) * 2.0) + (-1.0);
    float _594 = dot(vec2(_591, _593), vec2(_591, _593));
    float _3704 = isnan(0.0) ? _594 : (isnan(_594) ? 0.0 : max(_594, 0.0));
    float _599 = sqrt(1.0 - (isnan(1.0) ? _3704 : (isnan(_3704) ? 1.0 : min(_3704, 1.0))));
    vec4 _613 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _625 = (((_613.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _591;
    float _626 = (((_613.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _593;
    vec4 _638 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _270) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _271) + cbTextureTilingScale._m0[19u].w));
    float _640 = _638.x;
    float _641 = 1.0 - _640;
    float _669 = (TEXCOORD_8.x - ((cbMtdParam._m0[22u].w * (1.0 - TEXCOORD_8.x)) * ((((_640 - _641) * cbMtdParam._m0[24u].y) + _641) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3715 = isnan(0.0) ? _669 : (isnan(_669) ? 0.0 : max(_669, 0.0));
    float _670 = isnan(1.0) ? _3715 : (isnan(_3715) ? 1.0 : min(_3715, 1.0));
    float _678 = ((((cbMtdParam._m0[10u].x - _514) * TEXCOORD_8.x) * cbMtdParam._m0[23u].w) * _670) + _514;
    float _679 = ((((cbMtdParam._m0[10u].y - _517) * TEXCOORD_8.y) * cbMtdParam._m0[23u].w) * _670) + _517;
    float _680 = (((cbMtdParam._m0[23u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _520)) * _670) + _520;
    float _684 = (cbMtdParam._m0[19u].w * (_613.z - _588)) + _588;
    float _688 = ((cbMtdParam._m0[23u].y - _684) * _670) + _684;
    vec4 _707 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _270) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _271) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _713 = (_707.x * 2.0) + (-1.0);
    float _714 = (_707.y * 2.0) + (-1.0);
    float _715 = dot(vec2(_713, _714), vec2(_713, _714));
    float _3726 = isnan(0.0) ? _715 : (isnan(_715) ? 0.0 : max(_715, 0.0));
    float _731 = (_670 * (((cbMtdParam._m0[22u].z * _625) - _625) + _713)) + _625;
    float _732 = (_670 * (((cbMtdParam._m0[22u].z * _626) - _626) + _714)) + _626;
    float _733 = (_670 * (sqrt(1.0 - (isnan(1.0) ? _3726 : (isnan(_3726) ? 1.0 : min(_3726, 1.0)))) - _599)) + _599;
    float _735 = cbMtdParam._m0[22u].x + _613.w;
    float _738 = fma(_733, _238 * NORMAL.x, fma(_732, _245 * TANGENT.x, (_231 * _223) * _731));
    float _741 = fma(_733, _238 * NORMAL.y, fma(_732, _245 * TANGENT.y, (_231 * _224) * _731));
    float _744 = fma(_733, _238 * NORMAL.z, fma(_732, _245 * TANGENT.z, (_231 * _225) * _731));
    float _748 = inversesqrt(dot(vec3(_738, _741, _744), vec3(_738, _741, _744)));
    float _749 = _748 * _738;
    float _750 = _748 * _741;
    float _751 = _748 * _744;
    float _3737 = isnan(0.0) ? _688 : (isnan(_688) ? 0.0 : max(_688, 0.0));
    float _752 = isnan(1.0) ? _3737 : (isnan(_3737) ? 1.0 : min(_3737, 1.0));
    float _3748 = isnan(0.0) ? _735 : (isnan(_735) ? 0.0 : max(_735, 0.0));
    float _3759 = isnan(0.0) ? _678 : (isnan(_678) ? 0.0 : max(_678, 0.0));
    float _3770 = isnan(0.0) ? _679 : (isnan(_679) ? 0.0 : max(_679, 0.0));
    float _3781 = isnan(0.0) ? _680 : (isnan(_680) ? 0.0 : max(_680, 0.0));
    float _770 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _810 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _820 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _810);
    float _821 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _810);
    float _822 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _810);
    float _826 = inversesqrt(dot(vec3(_820, _821, _822), vec3(_820, _821, _822)));
    float _827 = _820 * _826;
    float _828 = _821 * _826;
    float _829 = _822 * _826;
    vec4 _834 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _836 = _834.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _990 = sqrt(((_820 * _820) + (_821 * _821)) + (_822 * _822));
        float _996 = (cbMatDynParam._m0[5u].x * _990) + cbMatDynParam._m0[5u].y;
        float _3792 = isnan(0.0) ? _996 : (isnan(_996) ? 0.0 : max(_996, 0.0));
        float _997 = isnan(1.0) ? _3792 : (isnan(_3792) ? 1.0 : min(_3792, 1.0));
        float _1001 = (cbMatDynParam._m0[5u].z * _990) + cbMatDynParam._m0[5u].w;
        float _3803 = isnan(0.0) ? _1001 : (isnan(_1001) ? 0.0 : max(_1001, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3803 : (isnan(_3803) ? 1.0 : min(_3803, 1.0))) - _997)) + _997) < ((_836 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _847 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _848 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _866 = fma(_751, cbSceneParam._m0[5u].z, fma(_750, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _749));
    float _869 = fma(_751, cbSceneParam._m0[6u].z, fma(_750, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _749));
    float _872 = fma(_751, cbSceneParam._m0[7u].z, fma(_750, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _749));
    uint _885 = _251 + 9u;
    uint _886 = _885 + uint(cbMatDynParam._m0[0u].w);
    float _892 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3759 : (isnan(_3759) ? 1.0 : min(_3759, 1.0)))) * cbInstanceData._m0[_886].x;
    float _893 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3770 : (isnan(_3770) ? 1.0 : min(_3770, 1.0)))) * cbInstanceData._m0[_886].y;
    float _894 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3781 : (isnan(_3781) ? 1.0 : min(_3781, 1.0)))) * cbInstanceData._m0[_886].z;
    float _3814 = isnan(0.0) ? _892 : (isnan(_892) ? 0.0 : max(_892, 0.0));
    float _895 = isnan(1.0) ? _3814 : (isnan(_3814) ? 1.0 : min(_3814, 1.0));
    float _3825 = isnan(0.0) ? _893 : (isnan(_893) ? 0.0 : max(_893, 0.0));
    float _896 = isnan(1.0) ? _3825 : (isnan(_3825) ? 1.0 : min(_3825, 1.0));
    float _3836 = isnan(0.0) ? _894 : (isnan(_894) ? 0.0 : max(_894, 0.0));
    float _897 = isnan(1.0) ? _3836 : (isnan(_3836) ? 1.0 : min(_3836, 1.0));
    vec4 _906 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _847, cbSceneParam._m0[86u].y * _848));
    float _910 = ((isnan(1.0) ? _3748 : (isnan(_3748) ? 1.0 : min(_3748, 1.0))) * TEXCOORD_5.w) * _906.x;
    float _911 = dot(vec3(_749, _750, _751), vec3(_827, _828, _829));
    float _914 = _911 * 2.0;
    float _918 = (_914 * _749) - _827;
    float _919 = (_914 * _750) - _828;
    float _920 = (_914 * _751) - _829;
    float _924 = abs(dot(vec3(_827, _828, _829), vec3(_749, _750, _751)));
    float _3847 = isnan(0.0) ? _924 : (isnan(_924) ? 0.0 : max(_924, 0.0));
    float _926 = sqrt(_752);
    float _939 = exp2((_926 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3847 : (isnan(_3847) ? 1.0 : min(_3847, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_926 * 3.0));
    float _971 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _975 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _979 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1308;
    float _1310;
    float _1311;
    float _1312;
    float _1313;
    float _1314;
    float _1315;
    float _1316;
    float _1317;
    float _1318;
    float _1319;
    float _1320;
    float _1321;
    float _1322;
    float _1323;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1033 = fma(_979, cbModelParam._m0[26u].z, fma(_975, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _971));
        float _1037 = fma(_979, cbModelParam._m0[27u].z, fma(_975, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _971));
        float _1041 = fma(_979, cbModelParam._m0[28u].z, fma(_975, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _971));
        float _1066 = _971 + _749;
        float _1067 = _975 + _750;
        float _1068 = _979 + _751;
        float _1078 = fma(_1068, cbModelParam._m0[26u].z, fma(_1067, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1066)) - _1033;
        float _1079 = fma(_1068, cbModelParam._m0[27u].z, fma(_1067, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1066)) - _1037;
        float _1080 = fma(_1068, cbModelParam._m0[28u].z, fma(_1067, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1066)) - _1041;
        float _1084 = inversesqrt(dot(vec3(_1078, _1079, _1080), vec3(_1078, _1079, _1080)));
        float _1097 = ((_1084 * _1078) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1033 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1098 = ((_1084 * _1079) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1037 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1099 = ((_1084 * _1080) / cbModelParam._m0[34u].z) + ((((((_1041 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1102 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1097, _1098, _1099), 0.0);
        vec4 _1109 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1097, _1098, _1099), 0.0);
        vec4 _1116 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1097, _1098, _1099), 0.0);
        vec4 _1123 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1097, _1098, _1099), 0.0);
        float _1136 = exp2((_1102.w + (-0.5)) * 20.0) * 2.0;
        float _1137 = _1136 * (_1102.x + (-0.5));
        float _1138 = _1136 * (_1102.y + (-0.5));
        float _1139 = _1136 * (_1102.z + (-0.5));
        float _1146 = exp2((_1109.w + (-0.5)) * 20.0) * 2.0;
        float _1147 = _1146 * (_1109.x + (-0.5));
        float _1148 = _1146 * (_1109.y + (-0.5));
        float _1149 = _1146 * (_1109.z + (-0.5));
        float _1156 = exp2((_1116.w + (-0.5)) * 20.0) * 2.0;
        float _1157 = _1156 * (_1116.x + (-0.5));
        float _1158 = _1156 * (_1116.y + (-0.5));
        float _1159 = _1156 * (_1116.z + (-0.5));
        float _1166 = exp2((_1123.w + (-0.5)) * 20.0) * 2.0;
        float _1167 = _1166 * (_1123.x + (-0.5));
        float _1168 = _1166 * (_1123.y + (-0.5));
        float _1169 = _1166 * (_1123.z + (-0.5));
        float _1170 = isnan(0.0) ? _1167 : (isnan(_1167) ? 0.0 : max(_1167, 0.0));
        float _1171 = isnan(0.0) ? _1168 : (isnan(_1168) ? 0.0 : max(_1168, 0.0));
        float _1172 = isnan(0.0) ? _1169 : (isnan(_1169) ? 0.0 : max(_1169, 0.0));
        float _1173 = _1137 * 0.5;
        float _1174 = _1147 * 0.5;
        float _1175 = _1157 * 0.5;
        float _1176 = dot(vec3(_1173, _1174, _1175), vec3(_1173, _1174, _1175));
        float _1181 = (_1176 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1176);
        float _1190 = (dot(vec3(_749, _750, _751), vec3(_1181 * _1173, _1181 * _1174, _1181 * _1175)) + 1.0) * 0.5;
        float _3873 = isnan(0.0) ? _1190 : (isnan(_1190) ? 0.0 : max(_1190, 0.0));
        float _1200 = sqrt(((_1174 * _1174) + (_1173 * _1173)) + (_1175 * _1175)) / (_1170 + 9.9999997473787516355514526367188e-06);
        float _3884 = isnan(0.0) ? _1200 : (isnan(_1200) ? 0.0 : max(_1200, 0.0));
        float _1201 = isnan(1.0) ? _3884 : (isnan(_3884) ? 1.0 : min(_3884, 1.0));
        float _1202 = _1201 * 2.0;
        float _1206 = (1.0 - _1201) / (_1201 + 1.0);
        float _3895 = isnan(0.0) ? _1206 : (isnan(_1206) ? 0.0 : max(_1206, 0.0));
        float _1207 = isnan(1.0) ? _3895 : (isnan(_3895) ? 1.0 : min(_3895, 1.0));
        float _1216 = ((((1.0 - _1207) * (_1202 + 2.0)) * exp2(log2(isnan(1.0) ? _3873 : (isnan(_3873) ? 1.0 : min(_3873, 1.0))) * (_1202 + 1.0))) + _1207) * _1170;
        float _1217 = _1138 * 0.5;
        float _1218 = _1148 * 0.5;
        float _1219 = _1158 * 0.5;
        float _1220 = dot(vec3(_1217, _1218, _1219), vec3(_1217, _1218, _1219));
        float _1225 = (_1220 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1220);
        float _1233 = (dot(vec3(_749, _750, _751), vec3(_1225 * _1217, _1225 * _1218, _1225 * _1219)) + 1.0) * 0.5;
        float _3906 = isnan(0.0) ? _1233 : (isnan(_1233) ? 0.0 : max(_1233, 0.0));
        float _1242 = sqrt(((_1218 * _1218) + (_1217 * _1217)) + (_1219 * _1219)) / (_1171 + 9.9999997473787516355514526367188e-06);
        float _3917 = isnan(0.0) ? _1242 : (isnan(_1242) ? 0.0 : max(_1242, 0.0));
        float _1243 = isnan(1.0) ? _3917 : (isnan(_3917) ? 1.0 : min(_3917, 1.0));
        float _1244 = _1243 * 2.0;
        float _1248 = (1.0 - _1243) / (_1243 + 1.0);
        float _3928 = isnan(0.0) ? _1248 : (isnan(_1248) ? 0.0 : max(_1248, 0.0));
        float _1249 = isnan(1.0) ? _3928 : (isnan(_3928) ? 1.0 : min(_3928, 1.0));
        float _1258 = ((((1.0 - _1249) * (_1244 + 2.0)) * exp2(log2(isnan(1.0) ? _3906 : (isnan(_3906) ? 1.0 : min(_3906, 1.0))) * (_1244 + 1.0))) + _1249) * _1171;
        float _1259 = _1139 * 0.5;
        float _1260 = _1149 * 0.5;
        float _1261 = _1159 * 0.5;
        float _1262 = dot(vec3(_1259, _1260, _1261), vec3(_1259, _1260, _1261));
        float _1267 = (_1262 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1262);
        float _1275 = (dot(vec3(_749, _750, _751), vec3(_1267 * _1259, _1267 * _1260, _1267 * _1261)) + 1.0) * 0.5;
        float _3939 = isnan(0.0) ? _1275 : (isnan(_1275) ? 0.0 : max(_1275, 0.0));
        float _1284 = sqrt(((_1260 * _1260) + (_1259 * _1259)) + (_1261 * _1261)) / (_1172 + 9.9999997473787516355514526367188e-06);
        float _3950 = isnan(0.0) ? _1284 : (isnan(_1284) ? 0.0 : max(_1284, 0.0));
        float _1285 = isnan(1.0) ? _3950 : (isnan(_3950) ? 1.0 : min(_3950, 1.0));
        float _1286 = _1285 * 2.0;
        float _1290 = (1.0 - _1285) / (_1285 + 1.0);
        float _3961 = isnan(0.0) ? _1290 : (isnan(_1290) ? 0.0 : max(_1290, 0.0));
        float _1291 = isnan(1.0) ? _3961 : (isnan(_3961) ? 1.0 : min(_3961, 1.0));
        float _1300 = ((((1.0 - _1291) * (_1286 + 2.0)) * exp2(log2(isnan(1.0) ? _3939 : (isnan(_3939) ? 1.0 : min(_3939, 1.0))) * (_1286 + 1.0))) + _1291) * _1172;
        _1308 = _1139;
        _1310 = _1138;
        _1311 = _1137;
        _1312 = _1149;
        _1313 = _1148;
        _1314 = _1147;
        _1315 = _1159;
        _1316 = _1158;
        _1317 = _1157;
        _1318 = _1172;
        _1319 = _1171;
        _1320 = _1170;
        _1321 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1216 : (isnan(_1216) ? 0.0 : max(_1216, 0.0)));
        _1322 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1258 : (isnan(_1258) ? 0.0 : max(_1258, 0.0)));
        _1323 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1300 : (isnan(_1300) ? 0.0 : max(_1300, 0.0)));
    }
    else
    {
        _1308 = _1309;
        _1310 = _1309;
        _1311 = _1309;
        _1312 = _1309;
        _1313 = _1309;
        _1314 = _1309;
        _1315 = _1309;
        _1316 = _1309;
        _1317 = _1309;
        _1318 = _1309;
        _1319 = _1309;
        _1320 = _1309;
        _1321 = 0.0;
        _1322 = 0.0;
        _1323 = 0.0;
    }
    float _1619;
    float _1620;
    float _1621;
    float _1622;
    float _1623;
    float _1624;
    float _1625;
    float _1626;
    float _1627;
    float _1628;
    float _1629;
    float _1630;
    float _1631;
    float _1632;
    float _1633;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1350 = fma(_979, cbModelParam._m0[30u].z, fma(_975, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _971));
        float _1354 = fma(_979, cbModelParam._m0[31u].z, fma(_975, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _971));
        float _1358 = fma(_979, cbModelParam._m0[32u].z, fma(_975, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _971));
        float _1381 = _971 + _749;
        float _1382 = _975 + _750;
        float _1383 = _979 + _751;
        float _1393 = fma(_1383, cbModelParam._m0[30u].z, fma(_1382, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1381)) - _1350;
        float _1394 = fma(_1383, cbModelParam._m0[31u].z, fma(_1382, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1381)) - _1354;
        float _1395 = fma(_1383, cbModelParam._m0[32u].z, fma(_1382, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1381)) - _1358;
        float _1399 = inversesqrt(dot(vec3(_1393, _1394, _1395), vec3(_1393, _1394, _1395)));
        float _1412 = ((_1399 * _1393) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1350 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1413 = ((_1399 * _1394) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1354 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1414 = ((_1399 * _1395) / cbModelParam._m0[35u].z) + ((((((_1358 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1416 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1412, _1413, _1414), 0.0);
        vec4 _1423 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1412, _1413, _1414), 0.0);
        vec4 _1430 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1412, _1413, _1414), 0.0);
        vec4 _1437 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1412, _1413, _1414), 0.0);
        float _1449 = exp2((_1416.w + (-0.5)) * 20.0) * 2.0;
        float _1450 = _1449 * (_1416.x + (-0.5));
        float _1451 = _1449 * (_1416.y + (-0.5));
        float _1452 = _1449 * (_1416.z + (-0.5));
        float _1459 = exp2((_1423.w + (-0.5)) * 20.0) * 2.0;
        float _1460 = _1459 * (_1423.x + (-0.5));
        float _1461 = _1459 * (_1423.y + (-0.5));
        float _1462 = _1459 * (_1423.z + (-0.5));
        float _1469 = exp2((_1430.w + (-0.5)) * 20.0) * 2.0;
        float _1470 = _1469 * (_1430.x + (-0.5));
        float _1471 = _1469 * (_1430.y + (-0.5));
        float _1472 = _1469 * (_1430.z + (-0.5));
        float _1479 = exp2((_1437.w + (-0.5)) * 20.0) * 2.0;
        float _1480 = _1479 * (_1437.x + (-0.5));
        float _1481 = _1479 * (_1437.y + (-0.5));
        float _1482 = _1479 * (_1437.z + (-0.5));
        float _1483 = isnan(0.0) ? _1480 : (isnan(_1480) ? 0.0 : max(_1480, 0.0));
        float _1484 = isnan(0.0) ? _1481 : (isnan(_1481) ? 0.0 : max(_1481, 0.0));
        float _1485 = isnan(0.0) ? _1482 : (isnan(_1482) ? 0.0 : max(_1482, 0.0));
        float _1486 = _1450 * 0.5;
        float _1487 = _1460 * 0.5;
        float _1488 = _1470 * 0.5;
        float _1489 = dot(vec3(_1486, _1487, _1488), vec3(_1486, _1487, _1488));
        float _1494 = (_1489 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1489);
        float _1502 = (dot(vec3(_749, _750, _751), vec3(_1494 * _1486, _1494 * _1487, _1494 * _1488)) + 1.0) * 0.5;
        float _4002 = isnan(0.0) ? _1502 : (isnan(_1502) ? 0.0 : max(_1502, 0.0));
        float _1511 = sqrt(((_1487 * _1487) + (_1486 * _1486)) + (_1488 * _1488)) / (_1483 + 9.9999997473787516355514526367188e-06);
        float _4013 = isnan(0.0) ? _1511 : (isnan(_1511) ? 0.0 : max(_1511, 0.0));
        float _1512 = isnan(1.0) ? _4013 : (isnan(_4013) ? 1.0 : min(_4013, 1.0));
        float _1513 = _1512 * 2.0;
        float _1517 = (1.0 - _1512) / (_1512 + 1.0);
        float _4024 = isnan(0.0) ? _1517 : (isnan(_1517) ? 0.0 : max(_1517, 0.0));
        float _1518 = isnan(1.0) ? _4024 : (isnan(_4024) ? 1.0 : min(_4024, 1.0));
        float _1527 = ((((1.0 - _1518) * (_1513 + 2.0)) * exp2(log2(isnan(1.0) ? _4002 : (isnan(_4002) ? 1.0 : min(_4002, 1.0))) * (_1513 + 1.0))) + _1518) * _1483;
        float _1528 = _1451 * 0.5;
        float _1529 = _1461 * 0.5;
        float _1530 = _1471 * 0.5;
        float _1531 = dot(vec3(_1528, _1529, _1530), vec3(_1528, _1529, _1530));
        float _1536 = (_1531 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1531);
        float _1544 = (dot(vec3(_749, _750, _751), vec3(_1536 * _1528, _1536 * _1529, _1536 * _1530)) + 1.0) * 0.5;
        float _4035 = isnan(0.0) ? _1544 : (isnan(_1544) ? 0.0 : max(_1544, 0.0));
        float _1553 = sqrt(((_1529 * _1529) + (_1528 * _1528)) + (_1530 * _1530)) / (_1484 + 9.9999997473787516355514526367188e-06);
        float _4046 = isnan(0.0) ? _1553 : (isnan(_1553) ? 0.0 : max(_1553, 0.0));
        float _1554 = isnan(1.0) ? _4046 : (isnan(_4046) ? 1.0 : min(_4046, 1.0));
        float _1555 = _1554 * 2.0;
        float _1559 = (1.0 - _1554) / (_1554 + 1.0);
        float _4057 = isnan(0.0) ? _1559 : (isnan(_1559) ? 0.0 : max(_1559, 0.0));
        float _1560 = isnan(1.0) ? _4057 : (isnan(_4057) ? 1.0 : min(_4057, 1.0));
        float _1569 = ((((1.0 - _1560) * (_1555 + 2.0)) * exp2(log2(isnan(1.0) ? _4035 : (isnan(_4035) ? 1.0 : min(_4035, 1.0))) * (_1555 + 1.0))) + _1560) * _1484;
        float _1570 = _1452 * 0.5;
        float _1571 = _1462 * 0.5;
        float _1572 = _1472 * 0.5;
        float _1573 = dot(vec3(_1570, _1571, _1572), vec3(_1570, _1571, _1572));
        float _1578 = (_1573 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1573);
        float _1586 = (dot(vec3(_749, _750, _751), vec3(_1578 * _1570, _1578 * _1571, _1578 * _1572)) + 1.0) * 0.5;
        float _4068 = isnan(0.0) ? _1586 : (isnan(_1586) ? 0.0 : max(_1586, 0.0));
        float _1595 = sqrt(((_1571 * _1571) + (_1570 * _1570)) + (_1572 * _1572)) / (_1485 + 9.9999997473787516355514526367188e-06);
        float _4079 = isnan(0.0) ? _1595 : (isnan(_1595) ? 0.0 : max(_1595, 0.0));
        float _1596 = isnan(1.0) ? _4079 : (isnan(_4079) ? 1.0 : min(_4079, 1.0));
        float _1597 = _1596 * 2.0;
        float _1601 = (1.0 - _1596) / (_1596 + 1.0);
        float _4090 = isnan(0.0) ? _1601 : (isnan(_1601) ? 0.0 : max(_1601, 0.0));
        float _1602 = isnan(1.0) ? _4090 : (isnan(_4090) ? 1.0 : min(_4090, 1.0));
        float _1611 = ((((1.0 - _1602) * (_1597 + 2.0)) * exp2(log2(isnan(1.0) ? _4068 : (isnan(_4068) ? 1.0 : min(_4068, 1.0))) * (_1597 + 1.0))) + _1602) * _1485;
        _1619 = _1452;
        _1620 = _1451;
        _1621 = _1450;
        _1622 = _1462;
        _1623 = _1461;
        _1624 = _1460;
        _1625 = _1472;
        _1626 = _1471;
        _1627 = _1470;
        _1628 = _1485;
        _1629 = _1484;
        _1630 = _1483;
        _1631 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1527 : (isnan(_1527) ? 0.0 : max(_1527, 0.0)));
        _1632 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1569 : (isnan(_1569) ? 0.0 : max(_1569, 0.0)));
        _1633 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1611 : (isnan(_1611) ? 0.0 : max(_1611, 0.0)));
    }
    else
    {
        _1619 = _1309;
        _1620 = _1309;
        _1621 = _1309;
        _1622 = _1309;
        _1623 = _1309;
        _1624 = _1309;
        _1625 = _1309;
        _1626 = _1309;
        _1627 = _1309;
        _1628 = _1309;
        _1629 = _1309;
        _1630 = _1309;
        _1631 = 0.0;
        _1632 = 0.0;
        _1633 = 0.0;
    }
    float _1643 = (cbModelParam._m0[1u].x * (_1631 - _1321)) + _1321;
    float _1644 = (cbModelParam._m0[1u].x * (_1632 - _1322)) + _1322;
    float _1645 = (cbModelParam._m0[1u].x * (_1633 - _1323)) + _1323;
    float _1666 = fma(_1645, cbSceneParam._m0[89u].z, fma(_1644, cbSceneParam._m0[89u].y, _1643 * cbSceneParam._m0[89u].x));
    float _1669 = fma(_1645, cbSceneParam._m0[90u].z, fma(_1644, cbSceneParam._m0[90u].y, _1643 * cbSceneParam._m0[90u].x));
    float _1672 = fma(_1645, cbSceneParam._m0[91u].z, fma(_1644, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1643));
    float _1687 = _918 * 0.5;
    float _1688 = _919 * 0.5;
    float _1689 = _920 * 0.5;
    float _1690 = dot(vec4(_1687, _1688, _1689, 1.0), vec4(_1621, _1624, _1627, _1630));
    float _1693 = dot(vec4(_1687, _1688, _1689, 1.0), vec4(_1620, _1623, _1626, _1629));
    float _1696 = dot(vec4(_1687, _1688, _1689, 1.0), vec4(_1619, _1622, _1625, _1628));
    float _1730;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1703 = dot(vec4(_1687, _1688, _1689, 1.0), vec4(_1308, _1312, _1315, _1318));
        float _1707 = dot(vec4(_1687, _1688, _1689, 1.0), vec4(_1310, _1313, _1316, _1319));
        float _1711 = dot(vec4(_1687, _1688, _1689, 1.0), vec4(_1311, _1314, _1317, _1320));
        float _1718 = dot(vec4(cbModelParam._m0[39u]), vec4(_1687, _1688, _1689, 1.0));
        _1730 = dot(vec3(isnan(0.0) ? _1711 : (isnan(_1711) ? 0.0 : max(_1711, 0.0)), isnan(0.0) ? _1707 : (isnan(_1707) ? 0.0 : max(_1707, 0.0)), isnan(0.0) ? _1703 : (isnan(_1703) ? 0.0 : max(_1703, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1718) ? 0.0 : (isnan(0.0) ? _1718 : max(0.0, _1718))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1730 = 1.0;
    }
    float _1741;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1732 = dot(vec4(cbModelParam._m0[40u]), vec4(_1687, _1688, _1689, 1.0));
        _1741 = dot(vec3(isnan(0.0) ? _1690 : (isnan(_1690) ? 0.0 : max(_1690, 0.0)), isnan(0.0) ? _1693 : (isnan(_1693) ? 0.0 : max(_1693, 0.0)), isnan(0.0) ? _1696 : (isnan(_1696) ? 0.0 : max(_1696, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1732) ? 0.0 : (isnan(0.0) ? _1732 : max(0.0, _1732))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1741 = 1.0;
    }
    float _1745 = (_1741 * cbModelParam._m0[1u].x) + (_1730 * (1.0 - cbModelParam._m0[1u].x));
    float _1755 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _752);
    float _1756 = isnan(_1755) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1755 : min(cbModelParam._m0[25u].z, _1755));
    float _1838;
    float _1840;
    float _1842;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1805 = fma(_979, cbModelParam._m0[13u].z, fma(_975, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _971)) + cbModelParam._m0[13u].w;
        float _1809 = fma(_979, cbModelParam._m0[14u].z, fma(_975, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _971)) + cbModelParam._m0[14u].w;
        float _1813 = fma(_979, cbModelParam._m0[15u].z, fma(_975, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _971)) + cbModelParam._m0[15u].w;
        float _1816 = fma(_920, cbModelParam._m0[13u].z, fma(_919, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _918));
        float _1819 = fma(_920, cbModelParam._m0[14u].z, fma(_919, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _918));
        float _1822 = fma(_920, cbModelParam._m0[15u].z, fma(_919, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _918));
        float _1850;
        if (_1816 > 0.0)
        {
            _1850 = abs((1.0 - _1805) / _1816);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1816 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1805 + 1.0) / _1816);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1850 = frontier_phi_17_15_ladder;
        }
        float _2052;
        if (_1819 > 0.0)
        {
            _2052 = abs((1.0 - _1809) / _1819);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1819 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1809 + 1.0) / _1819);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2052 = frontier_phi_26_22_ladder;
        }
        float _2295;
        if (_1822 > 0.0)
        {
            _2295 = abs((1.0 - _1813) / _1822);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1822 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1813 + 1.0) / _1822);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2295 = frontier_phi_38_33_ladder;
        }
        float _2297 = isnan(_2052) ? _1850 : (isnan(_1850) ? _2052 : min(_1850, _2052));
        float _2298 = isnan(_2295) ? _2297 : (isnan(_2297) ? _2295 : min(_2297, _2295));
        float _2302 = (_2298 * _1816) + _1805;
        float _2303 = (_2298 * _1819) + _1809;
        float _2304 = (_2298 * _1822) + _1813;
        float _2305 = _2298 * 9.9999997473787516355514526367188e-05;
        float _2307 = (-1.0) - _2305;
        float _2309 = _2305 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2304 > _2309) || ((_2304 < _2307) || ((_2303 > _2309) || ((_2303 < _2307) || ((_2302 < _2307) || (_2302 > _2309))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2428 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2304, cbModelParam._m0[9u].z, fma(_2303, cbModelParam._m0[9u].y, _2302 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2304, cbModelParam._m0[10u].z, fma(_2303, cbModelParam._m0[10u].y, _2302 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2304, cbModelParam._m0[11u].z, fma(_2303, cbModelParam._m0[11u].y, _2302 * cbModelParam._m0[11u].x))), _1756);
            frontier_phi_16_38_ladder = _2428.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2428.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2428.x * cbModelParam._m0[1u].y;
        }
        _1838 = frontier_phi_16_38_ladder_2;
        _1840 = frontier_phi_16_38_ladder_1;
        _1842 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1826 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_918, _919, _920), _1756);
        _1838 = _1826.x * cbModelParam._m0[1u].y;
        _1840 = _1826.y * cbModelParam._m0[1u].y;
        _1842 = _1826.z * cbModelParam._m0[1u].y;
    }
    float _1846 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _752);
    float _1847 = isnan(_1846) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1846 : min(cbModelParam._m0[25u].w, _1846));
    float _1938;
    float _1940;
    float _1942;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1902 = fma(_979, cbModelParam._m0[21u].z, fma(_975, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _971)) + cbModelParam._m0[21u].w;
        float _1906 = fma(_979, cbModelParam._m0[22u].z, fma(_975, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _971)) + cbModelParam._m0[22u].w;
        float _1910 = fma(_979, cbModelParam._m0[23u].z, fma(_975, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _971)) + cbModelParam._m0[23u].w;
        float _1913 = fma(_920, cbModelParam._m0[21u].z, fma(_919, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _918));
        float _1916 = fma(_920, cbModelParam._m0[22u].z, fma(_919, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _918));
        float _1919 = fma(_920, cbModelParam._m0[23u].z, fma(_919, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _918));
        float _2057;
        if (_1913 > 0.0)
        {
            _2057 = abs((1.0 - _1902) / _1913);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1913 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1902 + 1.0) / _1913);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2057 = frontier_phi_28_24_ladder;
        }
        float _2322;
        if (_1916 > 0.0)
        {
            _2322 = abs((1.0 - _1906) / _1916);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1916 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1906 + 1.0) / _1916);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2322 = frontier_phi_40_35_ladder;
        }
        float _2527;
        if (_1919 > 0.0)
        {
            _2527 = abs((1.0 - _1910) / _1919);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1919 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1910 + 1.0) / _1919);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2527 = frontier_phi_49_46_ladder;
        }
        float _2529 = isnan(_2322) ? _2057 : (isnan(_2057) ? _2322 : min(_2057, _2322));
        float _2530 = isnan(_2527) ? _2529 : (isnan(_2529) ? _2527 : min(_2529, _2527));
        float _2534 = (_2530 * _1913) + _1902;
        float _2535 = (_2530 * _1916) + _1906;
        float _2536 = (_2530 * _1919) + _1910;
        float _2537 = _2530 * 9.9999997473787516355514526367188e-05;
        float _2538 = (-1.0) - _2537;
        float _2540 = _2537 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2536 > _2540) || ((_2536 < _2538) || ((_2535 > _2540) || ((_2535 < _2538) || ((_2534 < _2538) || (_2534 > _2540))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2735 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2536, cbModelParam._m0[17u].z, fma(_2535, cbModelParam._m0[17u].y, _2534 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2536, cbModelParam._m0[18u].z, fma(_2535, cbModelParam._m0[18u].y, _2534 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2536, cbModelParam._m0[19u].z, fma(_2535, cbModelParam._m0[19u].y, _2534 * cbModelParam._m0[19u].x))), _1847);
            frontier_phi_25_49_ladder = _2735.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2735.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2735.x * cbModelParam._m0[1u].z;
        }
        _1938 = frontier_phi_25_49_ladder_2;
        _1940 = frontier_phi_25_49_ladder_1;
        _1942 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1922 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_918, _919, _920), _1847);
        _1938 = _1922.x * cbModelParam._m0[1u].z;
        _1940 = _1922.y * cbModelParam._m0[1u].z;
        _1942 = _1922.z * cbModelParam._m0[1u].z;
    }
    float _1954 = ((((1.0 - _939) * ((_926 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_939 * _926)) * _910;
    float _1955 = _1954 * ((cbModelParam._m0[1u].w * (_1938 - _1838)) + _1838);
    float _1956 = _1954 * ((cbModelParam._m0[1u].w * (_1940 - _1840)) + _1840);
    float _1957 = _1954 * ((cbModelParam._m0[1u].w * (_1942 - _1842)) + _1842);
    float _1960 = fma(_1957, cbSceneParam._m0[89u].z, fma(_1956, cbSceneParam._m0[89u].y, _1955 * cbSceneParam._m0[89u].x));
    float _1963 = fma(_1957, cbSceneParam._m0[90u].z, fma(_1956, cbSceneParam._m0[90u].y, _1955 * cbSceneParam._m0[90u].x));
    float _1966 = fma(_1957, cbSceneParam._m0[91u].z, fma(_1956, cbSceneParam._m0[91u].y, _1955 * cbSceneParam._m0[91u].x));
    uvec4 _1976 = floatBitsToUint(cbInstanceData._m0[_251 + 5u]);
    uint _1978 = _1976.x * 14u;
    uint _1979 = _1978 + 13u;
    float _1986 = _910 + (-1.0);
    float _1991 = (cbLight._m0[_1979].x * _1986) + 1.0;
    float _1992 = (cbLight._m0[_1979].y * _1986) + 1.0;
    float _1993 = (cbLight._m0[_1979].z * _1986) + 1.0;
    float _1994 = (cbLight._m0[_1979].w * _1986) + 1.0;
    uint _1995 = _1978 + 5u;
    float _2001 = isnan(1.0) ? _1992 : (isnan(_1992) ? 1.0 : min(_1992, 1.0));
    uint _2005 = _1978 + 4u;
    float _2011 = isnan(1.0) ? _1991 : (isnan(_1991) ? 1.0 : min(_1991, 1.0));
    uint _2015 = _1978 | 1u;
    float _2026 = dot(vec3(cbLight._m0[_1978].xyz), vec3(_749, _750, _751));
    float _2029 = dot(vec3(cbLight._m0[_2015].xyz), vec3(_749, _750, _751));
    float _4226 = isnan(0.0) ? _2026 : (isnan(_2026) ? 0.0 : max(_2026, 0.0));
    float _4237 = isnan(0.0) ? _2029 : (isnan(_2029) ? 0.0 : max(_2029, 0.0));
    float _2034 = (isnan(1.0) ? _4226 : (isnan(_4226) ? 1.0 : min(_4226, 1.0))) * 0.3183098733425140380859375;
    float _2036 = (isnan(1.0) ? _4237 : (isnan(_4237) ? 1.0 : min(_4237, 1.0))) * 0.3183098733425140380859375;
    float _2043 = ((cbLight._m0[_1995].x * _2001) * _2036) + ((cbLight._m0[_2005].x * _2011) * _2034);
    float _2044 = ((_2001 * cbLight._m0[_1995].y) * _2036) + ((_2011 * cbLight._m0[_2005].y) * _2034);
    float _2045 = ((_2001 * cbLight._m0[_1995].z) * _2036) + ((_2011 * cbLight._m0[_2005].z) * _2034);
    uvec4 _2049 = floatBitsToUint(cbLight._m0[_1978 + 12u]);
    bool _2051 = _2049.x == 0u;
    float _2062;
    float _2064;
    float _2066;
    if (_2051)
    {
        _2062 = _2043;
        _2064 = _2044;
        _2066 = _2045;
    }
    else
    {
        uint _2070 = _1978 + 6u;
        float _2086 = (dot(vec3(cbLight._m0[_1978 + 2u].xyz), vec3(_749, _750, _751)) * 0.5) + 0.5;
        float _2087 = _2086 * _2086;
        float _4248 = isnan(0.0) ? _2087 : (isnan(_2087) ? 0.0 : max(_2087, 0.0));
        float _2088 = isnan(1.0) ? _4248 : (isnan(_4248) ? 1.0 : min(_4248, 1.0));
        float _2089 = isnan(1.0) ? _1993 : (isnan(_1993) ? 1.0 : min(_1993, 1.0));
        _2062 = (((cbLight._m0[_2070].x * 0.3183098733425140380859375) * _2088) * _2089) + _2043;
        _2064 = (((cbLight._m0[_2070].y * 0.3183098733425140380859375) * _2088) * _2089) + _2044;
        _2066 = (((cbLight._m0[_2070].z * 0.3183098733425140380859375) * _2088) * _2089) + _2045;
    }
    bool _2069 = _2049.y == 0u;
    float _2107;
    float _2109;
    float _2111;
    if (_2069)
    {
        _2107 = _2062;
        _2109 = _2064;
        _2111 = _2066;
    }
    else
    {
        uint _2266 = _1978 + 7u;
        float _2282 = (dot(vec3(cbLight._m0[_1978 + 3u].xyz), vec3(_749, _750, _751)) * 0.5) + 0.5;
        float _2283 = _2282 * _2282;
        float _4264 = isnan(0.0) ? _2283 : (isnan(_2283) ? 0.0 : max(_2283, 0.0));
        float _2284 = isnan(1.0) ? _4264 : (isnan(_4264) ? 1.0 : min(_4264, 1.0));
        float _2285 = isnan(1.0) ? _1994 : (isnan(_1994) ? 1.0 : min(_1994, 1.0));
        _2107 = (((cbLight._m0[_2266].x * 0.3183098733425140380859375) * _2284) * _2285) + _2062;
        _2109 = (((cbLight._m0[_2266].y * 0.3183098733425140380859375) * _2284) * _2285) + _2064;
        _2111 = (((cbLight._m0[_2266].z * 0.3183098733425140380859375) * _2284) * _2285) + _2066;
    }
    uint _2114 = _1978 + 8u;
    float _2127 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1978].w)) * _752) * 0.949999988079071044921875);
    float _2128 = _2127 * _2127;
    float _2129 = cbLight._m0[_1978].x + _827;
    float _2130 = cbLight._m0[_1978].y + _828;
    float _2131 = cbLight._m0[_1978].z + _829;
    float _2135 = inversesqrt(dot(vec3(_2129, _2130, _2131), vec3(_2129, _2130, _2131)));
    float _2136 = _2135 * _2129;
    float _2137 = _2135 * _2130;
    float _2138 = _2135 * _2131;
    float _2139 = dot(vec3(_749, _750, _751), vec3(cbLight._m0[_1978].xyz));
    float _4280 = isnan(0.0) ? _2139 : (isnan(_2139) ? 0.0 : max(_2139, 0.0));
    float _2142 = isnan(1.0) ? _4280 : (isnan(_4280) ? 1.0 : min(_4280, 1.0));
    float _4291 = isnan(0.0) ? _911 : (isnan(_911) ? 0.0 : max(_911, 0.0));
    float _2143 = isnan(1.0) ? _4291 : (isnan(_4291) ? 1.0 : min(_4291, 1.0));
    float _2144 = dot(vec3(_749, _750, _751), vec3(_2136, _2137, _2138));
    float _4302 = isnan(0.0) ? _2144 : (isnan(_2144) ? 0.0 : max(_2144, 0.0));
    float _2147 = isnan(1.0) ? _4302 : (isnan(_4302) ? 1.0 : min(_4302, 1.0));
    float _2148 = dot(vec3(cbLight._m0[_1978].xyz), vec3(_2136, _2137, _2138));
    float _4313 = isnan(0.0) ? _2148 : (isnan(_2148) ? 0.0 : max(_2148, 0.0));
    float _2152 = _2128 * _2128;
    float _2156 = ((_2147 * _2147) * (_2152 + (-1.0))) + 1.0;
    float _2167 = (exp2(log2(1.0 - (isnan(1.0) ? _4313 : (isnan(_4313) ? 1.0 : min(_4313, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2168 = 1.0 - _2128;
    float _2179 = (0.5 / (((_2143 * ((_2142 * _2168) + _2128)) + 9.9999999392252902907785028219223e-09) + (((_2143 * _2168) + _2128) * _2142))) * _2142;
    float _4324 = isnan(0.0) ? _2179 : (isnan(_2179) ? 0.0 : max(_2179, 0.0));
    float _2181 = (isnan(1.0) ? _4324 : (isnan(_4324) ? 1.0 : min(_4324, 1.0))) * (_2152 / ((_2156 * _2156) * 3.141590118408203125));
    uint _2192 = _1978 + 9u;
    float _2203 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2015].w)) * _752) * 0.949999988079071044921875);
    float _2204 = _2203 * _2203;
    float _2205 = cbLight._m0[_2015].x + _827;
    float _2206 = cbLight._m0[_2015].y + _828;
    float _2207 = cbLight._m0[_2015].z + _829;
    float _2211 = inversesqrt(dot(vec3(_2205, _2206, _2207), vec3(_2205, _2206, _2207)));
    float _2212 = _2211 * _2205;
    float _2213 = _2211 * _2206;
    float _2214 = _2211 * _2207;
    float _2215 = dot(vec3(_749, _750, _751), vec3(cbLight._m0[_2015].xyz));
    float _4335 = isnan(0.0) ? _2215 : (isnan(_2215) ? 0.0 : max(_2215, 0.0));
    float _2218 = isnan(1.0) ? _4335 : (isnan(_4335) ? 1.0 : min(_4335, 1.0));
    float _2219 = dot(vec3(_749, _750, _751), vec3(_2212, _2213, _2214));
    float _4346 = isnan(0.0) ? _2219 : (isnan(_2219) ? 0.0 : max(_2219, 0.0));
    float _2222 = isnan(1.0) ? _4346 : (isnan(_4346) ? 1.0 : min(_4346, 1.0));
    float _2223 = dot(vec3(cbLight._m0[_2015].xyz), vec3(_2212, _2213, _2214));
    float _4357 = isnan(0.0) ? _2223 : (isnan(_2223) ? 0.0 : max(_2223, 0.0));
    float _2227 = _2204 * _2204;
    float _2231 = ((_2222 * _2222) * (_2227 + (-1.0))) + 1.0;
    float _2240 = (exp2(log2(1.0 - (isnan(1.0) ? _4357 : (isnan(_4357) ? 1.0 : min(_4357, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2241 = 1.0 - _2204;
    float _2251 = (0.5 / (((_2143 * ((_2218 * _2241) + _2204)) + 9.9999999392252902907785028219223e-09) + (((_2143 * _2241) + _2204) * _2218))) * _2218;
    float _4368 = isnan(0.0) ? _2251 : (isnan(_2251) ? 0.0 : max(_2251, 0.0));
    float _2253 = (isnan(1.0) ? _4368 : (isnan(_4368) ? 1.0 : min(_4368, 1.0))) * (_2227 / ((_2231 * _2231) * 3.141590118408203125));
    float _2263 = (((_2240 * cbLight._m0[_2192].x) * _2253) * _2001) + (((_2167 * cbLight._m0[_2114].x) * _2181) * _2011);
    float _2264 = (((_2240 * cbLight._m0[_2192].y) * _2253) * _2001) + (((_2167 * cbLight._m0[_2114].y) * _2181) * _2011);
    float _2265 = (((_2240 * cbLight._m0[_2192].z) * _2253) * _2001) + (((_2167 * cbLight._m0[_2114].z) * _2181) * _2011);
    float _2327;
    float _2329;
    float _2331;
    if (_2051)
    {
        _2327 = _2263;
        _2329 = _2264;
        _2331 = _2265;
    }
    else
    {
        uint _2333 = _1978 + 2u;
        uint _2337 = _1978 + 10u;
        float _2351 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2333].w)) * _752) * 0.949999988079071044921875);
        float _2352 = _2351 * _2351;
        float _2353 = cbLight._m0[_2333].x + _827;
        float _2354 = cbLight._m0[_2333].y + _828;
        float _2355 = cbLight._m0[_2333].z + _829;
        float _2359 = inversesqrt(dot(vec3(_2353, _2354, _2355), vec3(_2353, _2354, _2355)));
        float _2360 = _2359 * _2353;
        float _2361 = _2359 * _2354;
        float _2362 = _2359 * _2355;
        float _2363 = dot(vec3(_749, _750, _751), vec3(cbLight._m0[_2333].xyz));
        float _4379 = isnan(0.0) ? _2363 : (isnan(_2363) ? 0.0 : max(_2363, 0.0));
        float _2366 = isnan(1.0) ? _4379 : (isnan(_4379) ? 1.0 : min(_4379, 1.0));
        float _2367 = dot(vec3(_749, _750, _751), vec3(_2360, _2361, _2362));
        float _4390 = isnan(0.0) ? _2367 : (isnan(_2367) ? 0.0 : max(_2367, 0.0));
        float _2370 = isnan(1.0) ? _4390 : (isnan(_4390) ? 1.0 : min(_4390, 1.0));
        float _2371 = dot(vec3(cbLight._m0[_2333].xyz), vec3(_2360, _2361, _2362));
        float _4401 = isnan(0.0) ? _2371 : (isnan(_2371) ? 0.0 : max(_2371, 0.0));
        float _2375 = _2352 * _2352;
        float _2379 = ((_2370 * _2370) * (_2375 + (-1.0))) + 1.0;
        float _2388 = (exp2(log2(1.0 - (isnan(1.0) ? _4401 : (isnan(_4401) ? 1.0 : min(_4401, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2389 = 1.0 - _2352;
        float _2399 = (0.5 / (((_2143 * ((_2366 * _2389) + _2352)) + 9.9999999392252902907785028219223e-09) + (((_2143 * _2389) + _2352) * _2366))) * _2366;
        float _4412 = isnan(0.0) ? _2399 : (isnan(_2399) ? 0.0 : max(_2399, 0.0));
        float _2401 = (isnan(1.0) ? _4412 : (isnan(_4412) ? 1.0 : min(_4412, 1.0))) * (_2375 / ((_2379 * _2379) * 3.141590118408203125));
        float _2402 = isnan(1.0) ? _1993 : (isnan(_1993) ? 1.0 : min(_1993, 1.0));
        _2327 = (((_2388 * cbLight._m0[_2337].x) * _2401) * _2402) + _2263;
        _2329 = (((_2388 * cbLight._m0[_2337].y) * _2401) * _2402) + _2264;
        _2331 = (((_2388 * cbLight._m0[_2337].z) * _2401) * _2402) + _2265;
    }
    float _2437;
    float _2439;
    float _2441;
    if (_2069)
    {
        _2437 = _2327;
        _2439 = _2329;
        _2441 = _2331;
    }
    else
    {
        uint _2448 = _1978 + 3u;
        uint _2452 = _1978 + 11u;
        float _2466 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2448].w)) * _752) * 0.949999988079071044921875);
        float _2467 = _2466 * _2466;
        float _2468 = cbLight._m0[_2448].x + _827;
        float _2469 = cbLight._m0[_2448].y + _828;
        float _2470 = cbLight._m0[_2448].z + _829;
        float _2474 = inversesqrt(dot(vec3(_2468, _2469, _2470), vec3(_2468, _2469, _2470)));
        float _2475 = _2474 * _2468;
        float _2476 = _2474 * _2469;
        float _2477 = _2474 * _2470;
        float _2478 = dot(vec3(_749, _750, _751), vec3(cbLight._m0[_2448].xyz));
        float _4428 = isnan(0.0) ? _2478 : (isnan(_2478) ? 0.0 : max(_2478, 0.0));
        float _2481 = isnan(1.0) ? _4428 : (isnan(_4428) ? 1.0 : min(_4428, 1.0));
        float _2482 = dot(vec3(_749, _750, _751), vec3(_2475, _2476, _2477));
        float _4439 = isnan(0.0) ? _2482 : (isnan(_2482) ? 0.0 : max(_2482, 0.0));
        float _2485 = isnan(1.0) ? _4439 : (isnan(_4439) ? 1.0 : min(_4439, 1.0));
        float _2486 = dot(vec3(cbLight._m0[_2448].xyz), vec3(_2475, _2476, _2477));
        float _4450 = isnan(0.0) ? _2486 : (isnan(_2486) ? 0.0 : max(_2486, 0.0));
        float _2490 = _2467 * _2467;
        float _2494 = ((_2485 * _2485) * (_2490 + (-1.0))) + 1.0;
        float _2503 = (exp2(log2(1.0 - (isnan(1.0) ? _4450 : (isnan(_4450) ? 1.0 : min(_4450, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2504 = 1.0 - _2467;
        float _2514 = (0.5 / (((_2143 * ((_2481 * _2504) + _2467)) + 9.9999999392252902907785028219223e-09) + (((_2143 * _2504) + _2467) * _2481))) * _2481;
        float _4461 = isnan(0.0) ? _2514 : (isnan(_2514) ? 0.0 : max(_2514, 0.0));
        float _2516 = (isnan(1.0) ? _4461 : (isnan(_4461) ? 1.0 : min(_4461, 1.0))) * (_2490 / ((_2494 * _2494) * 3.141590118408203125));
        float _2517 = isnan(1.0) ? _1994 : (isnan(_1994) ? 1.0 : min(_1994, 1.0));
        _2437 = (((_2503 * cbLight._m0[_2452].x) * _2516) * _2517) + _2327;
        _2439 = (((_2503 * cbLight._m0[_2452].y) * _2516) * _2517) + _2329;
        _2441 = (((_2503 * cbLight._m0[_2452].z) * _2516) * _2517) + _2331;
    }
    float _2652;
    float _2654;
    float _2656;
    float _2658;
    float _2660;
    float _2662;
    if (_1976.y == 0u)
    {
        float _2592 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2593 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2592;
        float _2594 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2592;
        float _2595 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2592;
        uvec4 _2607 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2608 = _2607.x;
        uint _2619 = uint((float(_2607.y) * floor(float(uint(cbSceneParam._m0[85u].y * _848) / _2608))) + floor(float(uint(cbSceneParam._m0[85u].x * _847) / _2608)));
        float _2629 = (log2(_2595 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2630 = isnan(0.0) ? _2629 : (isnan(_2629) ? 0.0 : max(_2629, 0.0));
        uint _2633 = uint(isnan(14.0) ? _2630 : (isnan(_2630) ? 14.0 : min(_2630, 14.0)));
        uvec4 _2638 = texelFetch(g_lightClusterGridBuffer, int(((_2633 << 2u) + (_2619 << 6u)) >> 2u));
        uint _2639 = _2638.x;
        uint _2640 = _2607.z;
        float _2740;
        float _2742;
        float _2744;
        float _2746;
        float _2748;
        float _2750;
        if (((((1u << ((_2640 >> 4u) & 15u)) + 4294967295u) & _2639) == 0u) || ((_2640 & 240u) == 0u))
        {
            _2740 = 0.0;
            _2742 = 0.0;
            _2744 = 0.0;
            _2746 = 0.0;
            _2748 = 0.0;
            _2750 = 0.0;
        }
        else
        {
            float _2741;
            float _2743;
            float _2745;
            float _2747;
            float _2749;
            float _2751;
            float _2893 = 0.0;
            float _2894 = 0.0;
            float _2895 = 0.0;
            float _2896 = 0.0;
            float _2897 = 0.0;
            float _2898 = 0.0;
            uint _2899 = 0u;
            uint _2908;
            bool _2909;
            for (;;)
            {
                _2908 = texelFetch(g_lightClassification, int((((_2633 << 5u) + (_2619 << 9u)) + (_2899 << 2u)) >> 2u)).x;
                _2909 = _2908 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2909)
                {
                    frontier_phi_66_pred = _2893;
                    frontier_phi_66_pred_1 = _2898;
                    frontier_phi_66_pred_2 = _2897;
                    frontier_phi_66_pred_3 = _2896;
                    frontier_phi_66_pred_4 = _2895;
                    frontier_phi_66_pred_5 = _2894;
                }
                else
                {
                    float _3038;
                    float _3039;
                    float _3040;
                    float _3041;
                    float _3042;
                    float _3043;
                    uint _3044;
                    _3038 = _2893;
                    _3039 = _2894;
                    _3040 = _2895;
                    _3041 = _2896;
                    _3042 = _2897;
                    _3043 = _2898;
                    _3044 = _2908;
                    float _2965;
                    float _2966;
                    float _2967;
                    float _2968;
                    float _2969;
                    float _2970;
                    for (;;)
                    {
                        uint _3048 = uint(findLSB(_3044)) + (_2899 << 5u);
                        uint _3045 = (_3044 + 4294967295u) & _3044;
                        uint _3050 = _3048 * 48u;
                        vec4 _3064 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3050)).x, texelFetch(g_PointLightRenderingBuffer, int(_3050 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3050 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3050 + 3u)).x));
                        uint _3070 = (_3048 * 48u) + 4u;
                        vec4 _3083 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3070)).x, texelFetch(g_PointLightRenderingBuffer, int(_3070 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3070 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3070 + 3u)).x));
                        uint _3089 = (_3048 * 48u) + 8u;
                        vec3 _3100 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3089)).x, texelFetch(g_PointLightRenderingBuffer, int(_3089 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3089 + 2u)).x));
                        float _3104 = _3064.x - _2593;
                        float _3105 = _3064.y - _2594;
                        float _3106 = _3064.z - _2595;
                        float _3107 = dot(vec3(_3104, _3105, _3106), vec3(_3104, _3105, _3106));
                        float _3110 = inversesqrt(_3107);
                        float _3111 = _3110 * _3104;
                        float _3112 = _3110 * _3105;
                        float _3113 = _3110 * _3106;
                        float _3114 = dot(vec3(_866, _869, _872), vec3(_3111, _3112, _3113));
                        float _3119 = 1.0 - (_3107 * _3064.w);
                        float _4487 = isnan(0.0) ? _3119 : (isnan(_3119) ? 0.0 : max(_3119, 0.0));
                        float _3120 = isnan(1.0) ? _4487 : (isnan(_4487) ? 1.0 : min(_4487, 1.0));
                        float _3121 = sqrt(_3107) * _3083.w;
                        float _3124 = 1.39999997615814208984375 / (_3121 + 1.39999997615814208984375);
                        float _3125 = _3124 * _3124;
                        float _3128 = ((1.0 - _3125) * _3114) + _3125;
                        float _3131 = _3121 * _3121;
                        float _3135 = ((isnan(0.0) ? _3128 : (isnan(_3128) ? 0.0 : max(_3128, 0.0))) * _3120) / ((_3131 * 0.699999988079071044921875) + 1.0);
                        float _3139 = (-0.0) - _2593;
                        float _3140 = (-0.0) - _2594;
                        float _3141 = (-0.0) - _2595;
                        float _3145 = inversesqrt(dot(vec3(_3139, _3140, _3141), vec3(_3139, _3140, _3141)));
                        float _3146 = _3145 * _3139;
                        float _3147 = _3145 * _3140;
                        float _3148 = _3145 * _3141;
                        float _3156 = exp2(log2(1.0 / ((_3131 * 3.5) + 5.0)) * 0.25);
                        float _3157 = 1.0 - _926;
                        float _3164 = sqrt(1.0 - ((1.0 - (_3157 * _3157)) * (1.0 - (_3156 * _3156))));
                        float _3165 = _3164 * _3164;
                        float _3166 = _3165 * _3165;
                        float _3167 = _3146 + _3111;
                        float _3168 = _3147 + _3112;
                        float _3169 = _3148 + _3113;
                        float _3173 = inversesqrt(dot(vec3(_3167, _3168, _3169), vec3(_3167, _3168, _3169)));
                        float _3177 = dot(vec3(_866, _869, _872), vec3(_3146, _3147, _3148));
                        float _4503 = isnan(0.0) ? _3177 : (isnan(_3177) ? 0.0 : max(_3177, 0.0));
                        float _3180 = isnan(1.0) ? _4503 : (isnan(_4503) ? 1.0 : min(_4503, 1.0));
                        float _3181 = dot(vec3(_866, _869, _872), vec3(_3173 * _3167, _3173 * _3168, _3173 * _3169));
                        float _4514 = isnan(0.0) ? _3181 : (isnan(_3181) ? 0.0 : max(_3181, 0.0));
                        float _3184 = isnan(1.0) ? _4514 : (isnan(_4514) ? 1.0 : min(_4514, 1.0));
                        float _3188 = ((_3184 * _3184) * (_3166 + (-1.0))) + 1.0;
                        float _3189 = _3124 * _3165;
                        float _3190 = _3189 * _3189;
                        float _3193 = ((1.0 - _3190) * _3114) + _3190;
                        float _4525 = isnan(0.0) ? _3193 : (isnan(_3193) ? 0.0 : max(_3193, 0.0));
                        float _3194 = isnan(1.0) ? _4525 : (isnan(_4525) ? 1.0 : min(_4525, 1.0));
                        float _3195 = 1.0 - _3165;
                        float _3205 = (0.5 / (((_3194 * ((_3180 * _3195) + _3165)) + 9.9999999392252902907785028219223e-09) + (((_3194 * _3195) + _3165) * _3180))) * _3194;
                        float _4536 = isnan(0.0) ? _3205 : (isnan(_3205) ? 0.0 : max(_3205, 0.0));
                        float _3216 = (((_3166 * 3.1415927410125732421875) * (isnan(1.0) ? _4536 : (isnan(_4536) ? 1.0 : min(_4536, 1.0)))) / ((_3188 * _3188) * ((_3131 * 2.1991131305694580078125) + 3.141590118408203125))) * _3120;
                        _2968 = (_3135 * _3083.x) + _3041;
                        _2969 = (_3135 * _3083.y) + _3042;
                        _2970 = (_3135 * _3083.z) + _3043;
                        _2965 = (_3216 * _3100.x) + _3038;
                        _2966 = (_3216 * _3100.y) + _3039;
                        _2967 = (_3216 * _3100.z) + _3040;
                        if (_3045 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3038 = _2965;
                            _3039 = _2966;
                            _3040 = _2967;
                            _3041 = _2968;
                            _3042 = _2969;
                            _3043 = _2970;
                            _3044 = _3045;
                        }
                    }
                    frontier_phi_66_pred = _2965;
                    frontier_phi_66_pred_1 = _2970;
                    frontier_phi_66_pred_2 = _2969;
                    frontier_phi_66_pred_3 = _2968;
                    frontier_phi_66_pred_4 = _2967;
                    frontier_phi_66_pred_5 = _2966;
                }
                _2741 = frontier_phi_66_pred;
                _2751 = frontier_phi_66_pred_1;
                _2749 = frontier_phi_66_pred_2;
                _2747 = frontier_phi_66_pred_3;
                _2745 = frontier_phi_66_pred_4;
                _2743 = frontier_phi_66_pred_5;
                uint _2900 = _2899 + 1u;
                if (_2900 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2893 = _2741;
                    _2894 = _2743;
                    _2895 = _2745;
                    _2896 = _2747;
                    _2897 = _2749;
                    _2898 = _2751;
                    _2899 = _2900;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2740 = _2741;
            _2742 = _2743;
            _2744 = _2745;
            _2746 = _2747;
            _2748 = _2749;
            _2750 = _2751;
        }
        uvec4 _2754 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2755 = _2754.z;
        uint _2757 = (_2755 >> 8u) & 15u;
        float _2861;
        float _2863;
        float _2865;
        float _2867;
        float _2869;
        float _2871;
        if (((4294967295u << _2757) & _2639) == 0u)
        {
            _2861 = _2740;
            _2863 = _2742;
            _2865 = _2744;
            _2867 = _2746;
            _2869 = _2748;
            _2871 = _2750;
        }
        else
        {
            float _2886 = inversesqrt(dot(vec3(_2593, _2594, _2595), vec3(_2593, _2594, _2595)));
            float _2887 = _2886 * _2593;
            float _2888 = _2886 * _2594;
            float _2889 = _2886 * _2595;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2757 < ((_2755 >> 12u) & 15u))
            {
                float _2862;
                float _2864;
                float _2866;
                float _2868;
                float _2870;
                float _2872;
                float _3021 = _2740;
                float _3022 = _2742;
                float _3023 = _2744;
                float _3024 = _2746;
                float _3025 = _2748;
                float _3026 = _2750;
                uint _3027 = _2757;
                uint _3036;
                bool _3037;
                for (;;)
                {
                    _3036 = texelFetch(g_lightClassification, int((((_2633 << 5u) + (_2619 << 9u)) + (_3027 << 2u)) >> 2u)).x;
                    _3037 = _3036 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_3037)
                    {
                        frontier_phi_77_pred = _3026;
                        frontier_phi_77_pred_1 = _3025;
                        frontier_phi_77_pred_2 = _3024;
                        frontier_phi_77_pred_3 = _3023;
                        frontier_phi_77_pred_4 = _3022;
                        frontier_phi_77_pred_5 = _3021;
                    }
                    else
                    {
                        float _3230;
                        float _3231;
                        float _3232;
                        float _3233;
                        float _3234;
                        float _3235;
                        float _3523;
                        float _3524;
                        float _3525;
                        float _3526;
                        float _3527;
                        float _3528;
                        float _3243 = _3021;
                        float _3244 = _3022;
                        float _3245 = _3023;
                        float _3246 = _3024;
                        float _3247 = _3025;
                        float _3248 = _3026;
                        uint _3249 = _3036;
                        uint _3250;
                        vec4 _3275;
                        float _3276;
                        vec4 _3291;
                        vec3 _3303;
                        vec4 _3318;
                        vec4 _3333;
                        float _3379;
                        bool _3380;
                        for (;;)
                        {
                            uint _3260 = ((_3027 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3249));
                            _3250 = (_3249 + 4294967295u) & _3249;
                            uint _3262 = _3260 * 40u;
                            _3275 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3262)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3262 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3262 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3262 + 3u)).x));
                            _3276 = _3275.w;
                            uint _3278 = (_3260 * 40u) + 4u;
                            _3291 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3278)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3278 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3278 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3278 + 3u)).x));
                            uint _3293 = (_3260 * 40u) + 8u;
                            _3303 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3293)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3293 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3293 + 2u)).x));
                            uint _3305 = (_3260 * 40u) + 16u;
                            _3318 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3305)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3305 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3305 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3305 + 3u)).x));
                            uint _3320 = (_3260 * 40u) + 20u;
                            _3333 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3320)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3320 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3320 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3320 + 3u)).x));
                            uint _3335 = (_3260 * 40u) + 24u;
                            vec4 _3348 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3335)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3335 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3335 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3335 + 3u)).x));
                            uint _3354 = (_3260 * 40u) + 28u;
                            vec4 _3367 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3354)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3354 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3354 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3354 + 3u)).x));
                            _3379 = fma(_2595, _3367.z, fma(_2594, _3367.y, _3367.x * _2593)) + _3367.w;
                            _3380 = !((fma(_2595, _3348.z, fma(_2594, _3348.y, _3348.x * _2593)) + _3348.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3380)
                            {
                                float _3407 = _3275.x - _2593;
                                float _3408 = _3275.y - _2594;
                                float _3409 = _3275.z - _2595;
                                float _3410 = dot(vec3(_3407, _3408, _3409), vec3(_3407, _3408, _3409));
                                float _3413 = inversesqrt(_3410);
                                float _3414 = _3413 * _3407;
                                float _3415 = _3413 * _3408;
                                float _3416 = _3413 * _3409;
                                float _3420 = 1.0 - (_3410 / (_3276 * _3276));
                                float _4547 = isnan(0.0) ? _3420 : (isnan(_3420) ? 0.0 : max(_3420, 0.0));
                                float _3421 = isnan(1.0) ? _4547 : (isnan(_4547) ? 1.0 : min(_4547, 1.0));
                                float _3425 = sqrt(_3410) * _3291.w;
                                float _3427 = 1.39999997615814208984375 / (_3425 + 1.39999997615814208984375);
                                float _3428 = _3427 * _3427;
                                float _3431 = ((1.0 - _3428) * dot(vec3(_3414, _3415, _3416), vec3(_866, _869, _872))) + _3428;
                                float _3434 = _3425 * _3425;
                                float _3438 = (fma(_2595, _3318.z, fma(_2594, _3318.y, _3318.x * _2593)) + _3318.w) / _3379;
                                float _3439 = (fma(_2595, _3333.z, fma(_2594, _3333.y, _3333.x * _2593)) + _3333.w) / _3379;
                                float _3443 = 1.0 - dot(vec2(_3438, _3439), vec2(_3438, _3439));
                                float _4563 = isnan(0.0) ? _3443 : (isnan(_3443) ? 0.0 : max(_3443, 0.0));
                                float _3444 = isnan(1.0) ? _4563 : (isnan(_4563) ? 1.0 : min(_4563, 1.0));
                                float _3445 = _3444 * (((isnan(0.0) ? _3431 : (isnan(_3431) ? 0.0 : max(_3431, 0.0))) * _3421) / ((_3434 * 0.699999988079071044921875) + 1.0));
                                float _3457 = exp2(log2(1.0 / ((_3434 * 3.5) + 5.0)) * 0.25);
                                float _3458 = 1.0 - _926;
                                float _3465 = sqrt(1.0 - ((1.0 - (_3458 * _3458)) * (1.0 - (_3457 * _3457))));
                                float _3466 = _3465 * _3465;
                                float _3467 = _3466 * _3466;
                                float _3468 = _3414 - _2887;
                                float _3469 = _3415 - _2888;
                                float _3470 = _3416 - _2889;
                                float _3474 = inversesqrt(dot(vec3(_3468, _3469, _3470), vec3(_3468, _3469, _3470)));
                                float _3478 = dot(vec3(_866, _869, _872), vec3((-0.0) - _2887, (-0.0) - _2888, (-0.0) - _2889));
                                float _4574 = isnan(0.0) ? _3478 : (isnan(_3478) ? 0.0 : max(_3478, 0.0));
                                float _3481 = isnan(1.0) ? _4574 : (isnan(_4574) ? 1.0 : min(_4574, 1.0));
                                float _3482 = dot(vec3(_866, _869, _872), vec3(_3474 * _3468, _3474 * _3469, _3474 * _3470));
                                float _4585 = isnan(0.0) ? _3482 : (isnan(_3482) ? 0.0 : max(_3482, 0.0));
                                float _3485 = isnan(1.0) ? _4585 : (isnan(_4585) ? 1.0 : min(_4585, 1.0));
                                float _3489 = ((_3485 * _3485) * (_3467 + (-1.0))) + 1.0;
                                float _3490 = _3427 * _3466;
                                float _3491 = _3490 * _3490;
                                float _3497 = ((1.0 - _3491) * dot(vec3(_866, _869, _872), vec3(_3414, _3415, _3416))) + _3491;
                                float _4596 = isnan(0.0) ? _3497 : (isnan(_3497) ? 0.0 : max(_3497, 0.0));
                                float _3498 = isnan(1.0) ? _4596 : (isnan(_4596) ? 1.0 : min(_4596, 1.0));
                                float _3499 = 1.0 - _3466;
                                float _3509 = (0.5 / (((_3498 * ((_3481 * _3499) + _3466)) + 9.9999999392252902907785028219223e-09) + (((_3498 * _3499) + _3466) * _3481))) * _3498;
                                float _4607 = isnan(0.0) ? _3509 : (isnan(_3509) ? 0.0 : max(_3509, 0.0));
                                float _3519 = (_3444 * _3421) * (((_3467 * 3.1415927410125732421875) * (isnan(1.0) ? _4607 : (isnan(_4607) ? 1.0 : min(_4607, 1.0)))) / ((_3489 * _3489) * ((_3434 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3445 * _3291.y;
                                frontier_phi_83_pred_1 = _3445 * _3291.x;
                                frontier_phi_83_pred_2 = _3519 * _3303.z;
                                frontier_phi_83_pred_3 = _3519 * _3303.y;
                                frontier_phi_83_pred_4 = _3519 * _3303.x;
                                frontier_phi_83_pred_5 = _3445 * _3291.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3527 = frontier_phi_83_pred;
                            _3526 = frontier_phi_83_pred_1;
                            _3525 = frontier_phi_83_pred_2;
                            _3524 = frontier_phi_83_pred_3;
                            _3523 = frontier_phi_83_pred_4;
                            _3528 = frontier_phi_83_pred_5;
                            _3233 = _3526 + _3246;
                            _3234 = _3527 + _3247;
                            _3235 = _3528 + _3248;
                            _3230 = _3523 + _3243;
                            _3231 = _3524 + _3244;
                            _3232 = _3525 + _3245;
                            if (_3250 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3243 = _3230;
                                _3244 = _3231;
                                _3245 = _3232;
                                _3246 = _3233;
                                _3247 = _3234;
                                _3248 = _3235;
                                _3249 = _3250;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3235;
                        frontier_phi_77_pred_1 = _3234;
                        frontier_phi_77_pred_2 = _3233;
                        frontier_phi_77_pred_3 = _3232;
                        frontier_phi_77_pred_4 = _3231;
                        frontier_phi_77_pred_5 = _3230;
                    }
                    _2872 = frontier_phi_77_pred;
                    _2870 = frontier_phi_77_pred_1;
                    _2868 = frontier_phi_77_pred_2;
                    _2866 = frontier_phi_77_pred_3;
                    _2864 = frontier_phi_77_pred_4;
                    _2862 = frontier_phi_77_pred_5;
                    uint _3028 = _3027 + 1u;
                    if (_3028 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3021 = _2862;
                        _3022 = _2864;
                        _3023 = _2866;
                        _3024 = _2868;
                        _3025 = _2870;
                        _3026 = _2872;
                        _3027 = _3028;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2866;
                frontier_phi_58_59_ladder_1 = _2872;
                frontier_phi_58_59_ladder_2 = _2870;
                frontier_phi_58_59_ladder_3 = _2868;
                frontier_phi_58_59_ladder_4 = _2864;
                frontier_phi_58_59_ladder_5 = _2862;
            }
            else
            {
                frontier_phi_58_59_ladder = _2744;
                frontier_phi_58_59_ladder_1 = _2750;
                frontier_phi_58_59_ladder_2 = _2748;
                frontier_phi_58_59_ladder_3 = _2746;
                frontier_phi_58_59_ladder_4 = _2742;
                frontier_phi_58_59_ladder_5 = _2740;
            }
            _2861 = frontier_phi_58_59_ladder_5;
            _2863 = frontier_phi_58_59_ladder_4;
            _2865 = frontier_phi_58_59_ladder;
            _2867 = frontier_phi_58_59_ladder_3;
            _2869 = frontier_phi_58_59_ladder_2;
            _2871 = frontier_phi_58_59_ladder_1;
        }
        float _2876 = isnan(1.0) ? _910 : (isnan(_910) ? 1.0 : min(_910, 1.0));
        _2652 = (_2876 * _2867) + _2107;
        _2654 = (_2876 * _2869) + _2109;
        _2656 = (_2876 * _2871) + _2111;
        _2658 = ((_2861 * 0.039999999105930328369140625) * _2876) + _2437;
        _2660 = ((_2863 * 0.039999999105930328369140625) * _2876) + _2439;
        _2662 = ((_2865 * 0.039999999105930328369140625) * _2876) + _2441;
    }
    else
    {
        _2652 = _2107;
        _2654 = _2109;
        _2656 = _2111;
        _2658 = _2437;
        _2660 = _2439;
        _2662 = _2441;
    }
    float _4623 = isnan(0.0) ? _895 : (isnan(_895) ? 0.0 : max(_895, 0.0));
    float _4634 = isnan(0.0) ? _896 : (isnan(_896) ? 0.0 : max(_896, 0.0));
    float _4645 = isnan(0.0) ? _897 : (isnan(_897) ? 0.0 : max(_897, 0.0));
    float _2679 = ((isnan(1.0) ? _4623 : (isnan(_4623) ? 1.0 : min(_4623, 1.0))) * (_2652 + ((isnan(0.0) ? _1666 : (isnan(_1666) ? 0.0 : max(_1666, 0.0))) * _910))) + ((_2658 + ((isnan(0.0) ? _1960 : (isnan(_1960) ? 0.0 : max(_1960, 0.0))) * _1745)) * cbPerFrame._m0[3u].x);
    float _2680 = ((isnan(1.0) ? _4634 : (isnan(_4634) ? 1.0 : min(_4634, 1.0))) * (_2654 + ((isnan(0.0) ? _1669 : (isnan(_1669) ? 0.0 : max(_1669, 0.0))) * _910))) + ((_2660 + ((isnan(0.0) ? _1963 : (isnan(_1963) ? 0.0 : max(_1963, 0.0))) * _1745)) * cbPerFrame._m0[3u].x);
    float _2681 = ((isnan(1.0) ? _4645 : (isnan(_4645) ? 1.0 : min(_4645, 1.0))) * (_2656 + ((isnan(0.0) ? _1672 : (isnan(_1672) ? 0.0 : max(_1672, 0.0))) * _910))) + ((_2662 + ((isnan(0.0) ? _1966 : (isnan(_1966) ? 0.0 : max(_1966, 0.0))) * _1745)) * cbPerFrame._m0[3u].x);
    uint _2682 = _251 + 6u;
    float _2690 = _847 / cbSceneParam._m0[86u].x;
    float _2691 = _848 / cbSceneParam._m0[86u].y;
    vec4 _2705 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2690, _2691, (log2((isnan(cbSceneParam._m0[77u].w) ? _770 : (isnan(_770) ? cbSceneParam._m0[77u].w : min(_770, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2707 = _2705.x;
    float _2708 = _2705.y;
    float _2709 = _2705.z;
    float _2710 = _2705.w;
    float _2803;
    float _2805;
    float _2807;
    float _2809;
    if (_770 > cbSceneParam._m0[78u].w)
    {
        float _2765 = isnan(_770) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _770 : min(cbSceneParam._m0[80u].w, _770));
        float _2766 = _2765 / _770;
        float _2777 = _2766 * _820;
        float _2778 = _821 * _2766;
        float _2779 = (-0.0) - _2778;
        float _2781 = _2766 * _822;
        float _2783 = (cbSceneParam._m0[77u].w * _2779) / _2765;
        float _2784 = _2783 + cbSceneParam._m0[79u].w;
        float _2785 = cbSceneParam._m0[79u].w - _2778;
        float _2791 = sqrt(((_2777 * _2777) + (_2778 * _2778)) + (_2781 * _2781));
        float _2794 = (1.0 - (cbSceneParam._m0[77u].w / _2765)) * _2791;
        float _2799 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2801 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2978;
        if (abs((_2779 - _2783) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2978 = ((((_2784 > 0.0) ? exp2(_2799 * _2784) : (2.0 - exp2(_2801 * _2784))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2794;
        }
        else
        {
            float _2922 = 1.0 / cbSceneParam._m0[80u].x;
            float _2923 = isnan(_2785) ? _2784 : (isnan(_2784) ? _2785 : max(_2784, _2785));
            float _2924 = isnan(_2785) ? _2784 : (isnan(_2784) ? _2785 : min(_2784, _2785));
            float _2933 = isnan(0.0) ? _2923 : (isnan(_2923) ? 0.0 : min(_2923, 0.0));
            float _2934 = isnan(0.0) ? _2924 : (isnan(_2924) ? 0.0 : min(_2924, 0.0));
            _2978 = ((abs(_2791 / _2779) * cbSceneParam._m0[80u].y) * ((((_2933 - _2934) * 2.0) - ((exp2(_2799 * (isnan(0.0) ? _2923 : (isnan(_2923) ? 0.0 : max(_2923, 0.0)))) - exp2(_2799 * (isnan(0.0) ? _2924 : (isnan(_2924) ? 0.0 : max(_2924, 0.0))))) * _2922)) - ((exp2(_2801 * _2933) - exp2(_2801 * _2934)) * _2922))) + (_2794 * cbSceneParam._m0[80u].z);
        }
        vec4 _2980 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2690, _2691, 1.0), 0.0);
        float _2989 = exp2((_2978 * (-1.44269502162933349609375)) * (1.0 - _2980.w));
        float _2990 = log2(_2989);
        float _3006 = log2(_2710);
        _2803 = (exp2(_3006 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2990 * cbSceneParam._m0[78u].x)) * _2980.x) / cbSceneParam._m0[78u].x)) + _2707;
        _2805 = (exp2(_3006 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2990 * cbSceneParam._m0[78u].y)) * _2980.y) / cbSceneParam._m0[78u].y)) + _2708;
        _2807 = (exp2(_3006 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2990 * cbSceneParam._m0[78u].z)) * _2980.z) / cbSceneParam._m0[78u].z)) + _2709;
        _2809 = _2989 * _2710;
    }
    else
    {
        _2803 = _2707;
        _2805 = _2708;
        _2807 = _2709;
        _2809 = _2710;
    }
    bool _3016;
    vec4 _2819;
    vec4 _2841;
    float _2843;
    float _2847;
    float _2848;
    float _2849;
    float _2850;
    bool _2860;
    for (;;)
    {
        _2819 = cbMatDynParam._m0[0u];
        float _2821 = roundEven(_2819.y);
        bool _2822 = _2821 == 3.0;
        float _2823 = log2(_2809);
        float _2830 = exp2(_2823 * cbSceneParam._m0[78u].x) * _2679;
        float _2831 = exp2(_2823 * cbSceneParam._m0[78u].y) * _2680;
        float _2832 = exp2(_2823 * cbSceneParam._m0[78u].z) * _2681;
        float _2839 = _836 + (-0.5);
        _2841 = cbMtdParam._m0[1u];
        _2843 = _2841.y * _2839;
        float _2846 = (_2821 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2847 = _2846 * (_2822 ? _2830 : (_2830 + (cbSceneParam._m0[72u].w * _2803)));
        _2848 = _2846 * (_2822 ? _2831 : (_2831 + (cbSceneParam._m0[72u].w * _2805)));
        _2849 = _2846 * (_2822 ? _2832 : (_2832 + (cbSceneParam._m0[72u].w * _2807)));
        _2850 = _2839 * 0.999000012874603271484375;
        _2860 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2860)
        {
            if ((cbInstanceData._m0[_251 + 7u].x + _2850) < 0.5)
            {
                _3016 = true;
                break;
            }
        }
        uint _2957 = _885 + uint(_2819.w);
        if ((cbInstanceData._m0[_2957].w < 1.0) && ((cbInstanceData._m0[_2957].w + _2850) < 0.5))
        {
            _3016 = true;
            break;
        }
        if ((_2843 + 1.0) < _2841.x)
        {
            _3016 = true;
            break;
        }
        _3016 = false;
        break;
    }
    float _3221;
    if (_3016)
    {
        discard_state = true;
        _3221 = 0.0;
    }
    else
    {
        _3221 = cbInstanceData._m0[_2682].w;
    }
    SV_Target.x = _2847;
    SV_Target.y = _2848;
    SV_Target.z = _2849;
    SV_Target.w = _3221;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2682].w;
    discard_exit();
}


