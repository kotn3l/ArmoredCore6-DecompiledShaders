#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_0;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_6;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1146;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _206 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _207 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _208 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _214 = inversesqrt(dot(vec3(_206, _207, _208), vec3(_206, _207, _208)));
    float _221 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _228 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _234 = uint(roundEven(NORMAL.w)) * 13u;
    uint _240 = _234 + 1u;
    uint _244 = _234 + 2u;
    float _253 = sqrt(((cbInstanceData._m0[_240].x * cbInstanceData._m0[_240].x) + (cbInstanceData._m0[_234].x * cbInstanceData._m0[_234].x)) + (cbInstanceData._m0[_244].x * cbInstanceData._m0[_244].x));
    float _254 = _253 * TEXCOORD.z;
    float _255 = _253 * TEXCOORD.w;
    vec4 _274 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _298 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _303 = _298.x * cbMtdParam._m0[11u].x;
    float _304 = _298.y * cbMtdParam._m0[11u].y;
    float _305 = _298.z * cbMtdParam._m0[11u].z;
    vec4 _324 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _254) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _255) + cbTextureTilingScale._m0[5u].w));
    vec4 _378 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _380 = _378.x;
    float _392 = dot(vec4(_380, _378.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _409 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w)).x) * 2.0) - ((((_380 - _392) * cbMtdParam._m0[24u].z) + _392) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3477 = isnan(0.0) ? _409 : (isnan(_409) ? 0.0 : max(_409, 0.0));
    float _410 = isnan(1.0) ? _3477 : (isnan(_3477) ? 1.0 : min(_3477, 1.0));
    float _423 = ((cbMtdParam._m0[9u].x * 4.55000019073486328125) * _274.x) * ((_410 * ((_324.x * cbMtdParam._m0[12u].x) - _303)) + _303);
    float _426 = ((cbMtdParam._m0[9u].y * 4.55000019073486328125) * _274.y) * ((_410 * ((_324.y * cbMtdParam._m0[12u].y) - _304)) + _304);
    float _429 = ((cbMtdParam._m0[9u].z * 4.55000019073486328125) * _274.z) * ((_410 * ((_324.z * cbMtdParam._m0[12u].z) - _305)) + _305);
    vec4 _447 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _254) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _255) + cbTextureTilingScale._m0[4u].w));
    vec4 _464 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _466 = _464.x;
    float _467 = _464.y;
    float _468 = _464.z;
    float _477 = ((_447.z - _468) * _410) + _468;
    float _480 = ((((_447.x - _466) * _410) + _466) * 2.0) + (-1.0);
    float _482 = ((((_447.y - _467) * _410) + _467) * 2.0) + (-1.0);
    float _483 = dot(vec2(_480, _482), vec2(_480, _482));
    float _3488 = isnan(0.0) ? _483 : (isnan(_483) ? 0.0 : max(_483, 0.0));
    float _488 = sqrt(1.0 - (isnan(1.0) ? _3488 : (isnan(_3488) ? 1.0 : min(_3488, 1.0))));
    vec4 _504 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _529 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _254) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _255) + cbTextureTilingScale._m0[11u].w));
    float _531 = _529.x;
    float _532 = 1.0 - _531;
    float _545 = (TEXCOORD_8.w - ((cbMtdParam._m0[21u].z * (1.0 - TEXCOORD_8.w)) * ((((_531 - _532) * cbMtdParam._m0[24u].w) + _532) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3499 = isnan(0.0) ? _545 : (isnan(_545) ? 0.0 : max(_545, 0.0));
    float _546 = isnan(1.0) ? _3499 : (isnan(_3499) ? 1.0 : min(_3499, 1.0));
    float _553 = (_546 * (cbMtdParam._m0[17u].x - _423)) + _423;
    float _554 = (_546 * (cbMtdParam._m0[17u].y - _426)) + _426;
    float _555 = (_546 * (cbMtdParam._m0[17u].z - _429)) + _429;
    float _559 = (cbMtdParam._m0[19u].w * (_504.z - _477)) + _477;
    vec4 _572 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _254) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _255) + cbTextureTilingScale._m0[15u].w));
    float _579 = (_572.x * 2.0) + (-1.0);
    float _580 = (_572.y * 2.0) + (-1.0);
    float _581 = dot(vec2(_579, _580), vec2(_579, _580));
    float _3510 = isnan(0.0) ? _581 : (isnan(_581) ? 0.0 : max(_581, 0.0));
    float _589 = (_546 * (_572.z - _559)) + _559;
    float _592 = (((_504.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _480;
    float _593 = (((_504.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _482;
    float _605 = (((_579 - _592) + (cbMtdParam._m0[21u].x * _592)) * _546) + _592;
    float _606 = (((_580 - _593) + (cbMtdParam._m0[21u].x * _593)) * _546) + _593;
    float _607 = (_546 * (sqrt(1.0 - (isnan(1.0) ? _3510 : (isnan(_3510) ? 1.0 : min(_3510, 1.0)))) - _488)) + _488;
    float _611 = cbMtdParam._m0[22u].x + _504.w;
    float _614 = fma(_607, _221 * NORMAL.x, fma(_606, _228 * TANGENT.x, (_214 * _206) * _605));
    float _617 = fma(_607, _221 * NORMAL.y, fma(_606, _228 * TANGENT.y, (_214 * _207) * _605));
    float _620 = fma(_607, _221 * NORMAL.z, fma(_606, _228 * TANGENT.z, (_214 * _208) * _605));
    float _624 = inversesqrt(dot(vec3(_614, _617, _620), vec3(_614, _617, _620)));
    float _625 = _624 * _614;
    float _626 = _624 * _617;
    float _627 = _624 * _620;
    float _3521 = isnan(0.0) ? _589 : (isnan(_589) ? 0.0 : max(_589, 0.0));
    float _628 = isnan(1.0) ? _3521 : (isnan(_3521) ? 1.0 : min(_3521, 1.0));
    float _3532 = isnan(0.0) ? _611 : (isnan(_611) ? 0.0 : max(_611, 0.0));
    float _3543 = isnan(0.0) ? _553 : (isnan(_553) ? 0.0 : max(_553, 0.0));
    float _3554 = isnan(0.0) ? _554 : (isnan(_554) ? 0.0 : max(_554, 0.0));
    float _3565 = isnan(0.0) ? _555 : (isnan(_555) ? 0.0 : max(_555, 0.0));
    float _646 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _687 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _697 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _687);
    float _698 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _687);
    float _699 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _687);
    float _703 = inversesqrt(dot(vec3(_697, _698, _699), vec3(_697, _698, _699)));
    float _704 = _697 * _703;
    float _705 = _698 * _703;
    float _706 = _699 * _703;
    float _712 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _713 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _731 = fma(_627, cbSceneParam._m0[5u].z, fma(_626, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _625));
    float _734 = fma(_627, cbSceneParam._m0[6u].z, fma(_626, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _625));
    float _737 = fma(_627, cbSceneParam._m0[7u].z, fma(_626, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _625));
    uint _751 = (_234 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _757 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3543 : (isnan(_3543) ? 1.0 : min(_3543, 1.0)))) * cbInstanceData._m0[_751].x;
    float _758 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3554 : (isnan(_3554) ? 1.0 : min(_3554, 1.0)))) * cbInstanceData._m0[_751].y;
    float _759 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3565 : (isnan(_3565) ? 1.0 : min(_3565, 1.0)))) * cbInstanceData._m0[_751].z;
    float _3576 = isnan(0.0) ? _757 : (isnan(_757) ? 0.0 : max(_757, 0.0));
    float _760 = isnan(1.0) ? _3576 : (isnan(_3576) ? 1.0 : min(_3576, 1.0));
    float _3587 = isnan(0.0) ? _758 : (isnan(_758) ? 0.0 : max(_758, 0.0));
    float _761 = isnan(1.0) ? _3587 : (isnan(_3587) ? 1.0 : min(_3587, 1.0));
    float _3598 = isnan(0.0) ? _759 : (isnan(_759) ? 0.0 : max(_759, 0.0));
    float _762 = isnan(1.0) ? _3598 : (isnan(_3598) ? 1.0 : min(_3598, 1.0));
    vec4 _771 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _712, cbSceneParam._m0[86u].y * _713));
    float _775 = ((isnan(1.0) ? _3532 : (isnan(_3532) ? 1.0 : min(_3532, 1.0))) * TEXCOORD_5.w) * _771.x;
    float _776 = dot(vec3(_625, _626, _627), vec3(_704, _705, _706));
    float _779 = _776 * 2.0;
    float _783 = (_779 * _625) - _704;
    float _784 = (_779 * _626) - _705;
    float _785 = (_779 * _627) - _706;
    float _789 = abs(dot(vec3(_704, _705, _706), vec3(_625, _626, _627)));
    float _3609 = isnan(0.0) ? _789 : (isnan(_789) ? 0.0 : max(_789, 0.0));
    float _791 = sqrt(_628);
    float _804 = exp2((_791 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3609 : (isnan(_3609) ? 1.0 : min(_3609, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_791 * 3.0));
    float _836 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _840 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _844 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1145;
    float _1147;
    float _1148;
    float _1149;
    float _1150;
    float _1151;
    float _1152;
    float _1153;
    float _1154;
    float _1155;
    float _1156;
    float _1157;
    float _1158;
    float _1159;
    float _1160;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _870 = fma(_844, cbModelParam._m0[26u].z, fma(_840, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _836));
        float _874 = fma(_844, cbModelParam._m0[27u].z, fma(_840, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _836));
        float _878 = fma(_844, cbModelParam._m0[28u].z, fma(_840, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _836));
        float _903 = _836 + _625;
        float _904 = _840 + _626;
        float _905 = _844 + _627;
        float _915 = fma(_905, cbModelParam._m0[26u].z, fma(_904, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _903)) - _870;
        float _916 = fma(_905, cbModelParam._m0[27u].z, fma(_904, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _903)) - _874;
        float _917 = fma(_905, cbModelParam._m0[28u].z, fma(_904, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _903)) - _878;
        float _921 = inversesqrt(dot(vec3(_915, _916, _917), vec3(_915, _916, _917)));
        float _934 = ((_921 * _915) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_870 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _935 = ((_921 * _916) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_874 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _936 = ((_921 * _917) / cbModelParam._m0[34u].z) + ((((((_878 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _939 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_934, _935, _936), 0.0);
        vec4 _946 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_934, _935, _936), 0.0);
        vec4 _953 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_934, _935, _936), 0.0);
        vec4 _960 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_934, _935, _936), 0.0);
        float _973 = exp2((_939.w + (-0.5)) * 20.0) * 2.0;
        float _974 = _973 * (_939.x + (-0.5));
        float _975 = _973 * (_939.y + (-0.5));
        float _976 = _973 * (_939.z + (-0.5));
        float _983 = exp2((_946.w + (-0.5)) * 20.0) * 2.0;
        float _984 = _983 * (_946.x + (-0.5));
        float _985 = _983 * (_946.y + (-0.5));
        float _986 = _983 * (_946.z + (-0.5));
        float _993 = exp2((_953.w + (-0.5)) * 20.0) * 2.0;
        float _994 = _993 * (_953.x + (-0.5));
        float _995 = _993 * (_953.y + (-0.5));
        float _996 = _993 * (_953.z + (-0.5));
        float _1003 = exp2((_960.w + (-0.5)) * 20.0) * 2.0;
        float _1004 = _1003 * (_960.x + (-0.5));
        float _1005 = _1003 * (_960.y + (-0.5));
        float _1006 = _1003 * (_960.z + (-0.5));
        float _1007 = isnan(0.0) ? _1004 : (isnan(_1004) ? 0.0 : max(_1004, 0.0));
        float _1008 = isnan(0.0) ? _1005 : (isnan(_1005) ? 0.0 : max(_1005, 0.0));
        float _1009 = isnan(0.0) ? _1006 : (isnan(_1006) ? 0.0 : max(_1006, 0.0));
        float _1010 = _974 * 0.5;
        float _1011 = _984 * 0.5;
        float _1012 = _994 * 0.5;
        float _1013 = dot(vec3(_1010, _1011, _1012), vec3(_1010, _1011, _1012));
        float _1018 = (_1013 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1013);
        float _1027 = (dot(vec3(_625, _626, _627), vec3(_1018 * _1010, _1018 * _1011, _1018 * _1012)) + 1.0) * 0.5;
        float _3635 = isnan(0.0) ? _1027 : (isnan(_1027) ? 0.0 : max(_1027, 0.0));
        float _1037 = sqrt(((_1011 * _1011) + (_1010 * _1010)) + (_1012 * _1012)) / (_1007 + 9.9999997473787516355514526367188e-06);
        float _3646 = isnan(0.0) ? _1037 : (isnan(_1037) ? 0.0 : max(_1037, 0.0));
        float _1038 = isnan(1.0) ? _3646 : (isnan(_3646) ? 1.0 : min(_3646, 1.0));
        float _1039 = _1038 * 2.0;
        float _1043 = (1.0 - _1038) / (_1038 + 1.0);
        float _3657 = isnan(0.0) ? _1043 : (isnan(_1043) ? 0.0 : max(_1043, 0.0));
        float _1044 = isnan(1.0) ? _3657 : (isnan(_3657) ? 1.0 : min(_3657, 1.0));
        float _1053 = ((((1.0 - _1044) * (_1039 + 2.0)) * exp2(log2(isnan(1.0) ? _3635 : (isnan(_3635) ? 1.0 : min(_3635, 1.0))) * (_1039 + 1.0))) + _1044) * _1007;
        float _1054 = _975 * 0.5;
        float _1055 = _985 * 0.5;
        float _1056 = _995 * 0.5;
        float _1057 = dot(vec3(_1054, _1055, _1056), vec3(_1054, _1055, _1056));
        float _1062 = (_1057 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1057);
        float _1070 = (dot(vec3(_625, _626, _627), vec3(_1062 * _1054, _1062 * _1055, _1062 * _1056)) + 1.0) * 0.5;
        float _3668 = isnan(0.0) ? _1070 : (isnan(_1070) ? 0.0 : max(_1070, 0.0));
        float _1079 = sqrt(((_1055 * _1055) + (_1054 * _1054)) + (_1056 * _1056)) / (_1008 + 9.9999997473787516355514526367188e-06);
        float _3679 = isnan(0.0) ? _1079 : (isnan(_1079) ? 0.0 : max(_1079, 0.0));
        float _1080 = isnan(1.0) ? _3679 : (isnan(_3679) ? 1.0 : min(_3679, 1.0));
        float _1081 = _1080 * 2.0;
        float _1085 = (1.0 - _1080) / (_1080 + 1.0);
        float _3690 = isnan(0.0) ? _1085 : (isnan(_1085) ? 0.0 : max(_1085, 0.0));
        float _1086 = isnan(1.0) ? _3690 : (isnan(_3690) ? 1.0 : min(_3690, 1.0));
        float _1095 = ((((1.0 - _1086) * (_1081 + 2.0)) * exp2(log2(isnan(1.0) ? _3668 : (isnan(_3668) ? 1.0 : min(_3668, 1.0))) * (_1081 + 1.0))) + _1086) * _1008;
        float _1096 = _976 * 0.5;
        float _1097 = _986 * 0.5;
        float _1098 = _996 * 0.5;
        float _1099 = dot(vec3(_1096, _1097, _1098), vec3(_1096, _1097, _1098));
        float _1104 = (_1099 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1099);
        float _1112 = (dot(vec3(_625, _626, _627), vec3(_1104 * _1096, _1104 * _1097, _1104 * _1098)) + 1.0) * 0.5;
        float _3701 = isnan(0.0) ? _1112 : (isnan(_1112) ? 0.0 : max(_1112, 0.0));
        float _1121 = sqrt(((_1097 * _1097) + (_1096 * _1096)) + (_1098 * _1098)) / (_1009 + 9.9999997473787516355514526367188e-06);
        float _3712 = isnan(0.0) ? _1121 : (isnan(_1121) ? 0.0 : max(_1121, 0.0));
        float _1122 = isnan(1.0) ? _3712 : (isnan(_3712) ? 1.0 : min(_3712, 1.0));
        float _1123 = _1122 * 2.0;
        float _1127 = (1.0 - _1122) / (_1122 + 1.0);
        float _3723 = isnan(0.0) ? _1127 : (isnan(_1127) ? 0.0 : max(_1127, 0.0));
        float _1128 = isnan(1.0) ? _3723 : (isnan(_3723) ? 1.0 : min(_3723, 1.0));
        float _1137 = ((((1.0 - _1128) * (_1123 + 2.0)) * exp2(log2(isnan(1.0) ? _3701 : (isnan(_3701) ? 1.0 : min(_3701, 1.0))) * (_1123 + 1.0))) + _1128) * _1009;
        _1145 = _976;
        _1147 = _975;
        _1148 = _974;
        _1149 = _986;
        _1150 = _985;
        _1151 = _984;
        _1152 = _996;
        _1153 = _995;
        _1154 = _994;
        _1155 = _1009;
        _1156 = _1008;
        _1157 = _1007;
        _1158 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1053 : (isnan(_1053) ? 0.0 : max(_1053, 0.0)));
        _1159 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1095 : (isnan(_1095) ? 0.0 : max(_1095, 0.0)));
        _1160 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1137 : (isnan(_1137) ? 0.0 : max(_1137, 0.0)));
    }
    else
    {
        _1145 = _1146;
        _1147 = _1146;
        _1148 = _1146;
        _1149 = _1146;
        _1150 = _1146;
        _1151 = _1146;
        _1152 = _1146;
        _1153 = _1146;
        _1154 = _1146;
        _1155 = _1146;
        _1156 = _1146;
        _1157 = _1146;
        _1158 = 0.0;
        _1159 = 0.0;
        _1160 = 0.0;
    }
    float _1454;
    float _1455;
    float _1456;
    float _1457;
    float _1458;
    float _1459;
    float _1460;
    float _1461;
    float _1462;
    float _1463;
    float _1464;
    float _1465;
    float _1466;
    float _1467;
    float _1468;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1185 = fma(_844, cbModelParam._m0[30u].z, fma(_840, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _836));
        float _1189 = fma(_844, cbModelParam._m0[31u].z, fma(_840, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _836));
        float _1193 = fma(_844, cbModelParam._m0[32u].z, fma(_840, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _836));
        float _1216 = _836 + _625;
        float _1217 = _840 + _626;
        float _1218 = _844 + _627;
        float _1228 = fma(_1218, cbModelParam._m0[30u].z, fma(_1217, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1216)) - _1185;
        float _1229 = fma(_1218, cbModelParam._m0[31u].z, fma(_1217, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1216)) - _1189;
        float _1230 = fma(_1218, cbModelParam._m0[32u].z, fma(_1217, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1216)) - _1193;
        float _1234 = inversesqrt(dot(vec3(_1228, _1229, _1230), vec3(_1228, _1229, _1230)));
        float _1247 = ((_1234 * _1228) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1185 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1248 = ((_1234 * _1229) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1189 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1249 = ((_1234 * _1230) / cbModelParam._m0[35u].z) + ((((((_1193 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1251 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1247, _1248, _1249), 0.0);
        vec4 _1258 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1247, _1248, _1249), 0.0);
        vec4 _1265 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1247, _1248, _1249), 0.0);
        vec4 _1272 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1247, _1248, _1249), 0.0);
        float _1284 = exp2((_1251.w + (-0.5)) * 20.0) * 2.0;
        float _1285 = _1284 * (_1251.x + (-0.5));
        float _1286 = _1284 * (_1251.y + (-0.5));
        float _1287 = _1284 * (_1251.z + (-0.5));
        float _1294 = exp2((_1258.w + (-0.5)) * 20.0) * 2.0;
        float _1295 = _1294 * (_1258.x + (-0.5));
        float _1296 = _1294 * (_1258.y + (-0.5));
        float _1297 = _1294 * (_1258.z + (-0.5));
        float _1304 = exp2((_1265.w + (-0.5)) * 20.0) * 2.0;
        float _1305 = _1304 * (_1265.x + (-0.5));
        float _1306 = _1304 * (_1265.y + (-0.5));
        float _1307 = _1304 * (_1265.z + (-0.5));
        float _1314 = exp2((_1272.w + (-0.5)) * 20.0) * 2.0;
        float _1315 = _1314 * (_1272.x + (-0.5));
        float _1316 = _1314 * (_1272.y + (-0.5));
        float _1317 = _1314 * (_1272.z + (-0.5));
        float _1318 = isnan(0.0) ? _1315 : (isnan(_1315) ? 0.0 : max(_1315, 0.0));
        float _1319 = isnan(0.0) ? _1316 : (isnan(_1316) ? 0.0 : max(_1316, 0.0));
        float _1320 = isnan(0.0) ? _1317 : (isnan(_1317) ? 0.0 : max(_1317, 0.0));
        float _1321 = _1285 * 0.5;
        float _1322 = _1295 * 0.5;
        float _1323 = _1305 * 0.5;
        float _1324 = dot(vec3(_1321, _1322, _1323), vec3(_1321, _1322, _1323));
        float _1329 = (_1324 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1324);
        float _1337 = (dot(vec3(_625, _626, _627), vec3(_1329 * _1321, _1329 * _1322, _1329 * _1323)) + 1.0) * 0.5;
        float _3764 = isnan(0.0) ? _1337 : (isnan(_1337) ? 0.0 : max(_1337, 0.0));
        float _1346 = sqrt(((_1322 * _1322) + (_1321 * _1321)) + (_1323 * _1323)) / (_1318 + 9.9999997473787516355514526367188e-06);
        float _3775 = isnan(0.0) ? _1346 : (isnan(_1346) ? 0.0 : max(_1346, 0.0));
        float _1347 = isnan(1.0) ? _3775 : (isnan(_3775) ? 1.0 : min(_3775, 1.0));
        float _1348 = _1347 * 2.0;
        float _1352 = (1.0 - _1347) / (_1347 + 1.0);
        float _3786 = isnan(0.0) ? _1352 : (isnan(_1352) ? 0.0 : max(_1352, 0.0));
        float _1353 = isnan(1.0) ? _3786 : (isnan(_3786) ? 1.0 : min(_3786, 1.0));
        float _1362 = ((((1.0 - _1353) * (_1348 + 2.0)) * exp2(log2(isnan(1.0) ? _3764 : (isnan(_3764) ? 1.0 : min(_3764, 1.0))) * (_1348 + 1.0))) + _1353) * _1318;
        float _1363 = _1286 * 0.5;
        float _1364 = _1296 * 0.5;
        float _1365 = _1306 * 0.5;
        float _1366 = dot(vec3(_1363, _1364, _1365), vec3(_1363, _1364, _1365));
        float _1371 = (_1366 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1366);
        float _1379 = (dot(vec3(_625, _626, _627), vec3(_1371 * _1363, _1371 * _1364, _1371 * _1365)) + 1.0) * 0.5;
        float _3797 = isnan(0.0) ? _1379 : (isnan(_1379) ? 0.0 : max(_1379, 0.0));
        float _1388 = sqrt(((_1364 * _1364) + (_1363 * _1363)) + (_1365 * _1365)) / (_1319 + 9.9999997473787516355514526367188e-06);
        float _3808 = isnan(0.0) ? _1388 : (isnan(_1388) ? 0.0 : max(_1388, 0.0));
        float _1389 = isnan(1.0) ? _3808 : (isnan(_3808) ? 1.0 : min(_3808, 1.0));
        float _1390 = _1389 * 2.0;
        float _1394 = (1.0 - _1389) / (_1389 + 1.0);
        float _3819 = isnan(0.0) ? _1394 : (isnan(_1394) ? 0.0 : max(_1394, 0.0));
        float _1395 = isnan(1.0) ? _3819 : (isnan(_3819) ? 1.0 : min(_3819, 1.0));
        float _1404 = ((((1.0 - _1395) * (_1390 + 2.0)) * exp2(log2(isnan(1.0) ? _3797 : (isnan(_3797) ? 1.0 : min(_3797, 1.0))) * (_1390 + 1.0))) + _1395) * _1319;
        float _1405 = _1287 * 0.5;
        float _1406 = _1297 * 0.5;
        float _1407 = _1307 * 0.5;
        float _1408 = dot(vec3(_1405, _1406, _1407), vec3(_1405, _1406, _1407));
        float _1413 = (_1408 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1408);
        float _1421 = (dot(vec3(_625, _626, _627), vec3(_1413 * _1405, _1413 * _1406, _1413 * _1407)) + 1.0) * 0.5;
        float _3830 = isnan(0.0) ? _1421 : (isnan(_1421) ? 0.0 : max(_1421, 0.0));
        float _1430 = sqrt(((_1406 * _1406) + (_1405 * _1405)) + (_1407 * _1407)) / (_1320 + 9.9999997473787516355514526367188e-06);
        float _3841 = isnan(0.0) ? _1430 : (isnan(_1430) ? 0.0 : max(_1430, 0.0));
        float _1431 = isnan(1.0) ? _3841 : (isnan(_3841) ? 1.0 : min(_3841, 1.0));
        float _1432 = _1431 * 2.0;
        float _1436 = (1.0 - _1431) / (_1431 + 1.0);
        float _3852 = isnan(0.0) ? _1436 : (isnan(_1436) ? 0.0 : max(_1436, 0.0));
        float _1437 = isnan(1.0) ? _3852 : (isnan(_3852) ? 1.0 : min(_3852, 1.0));
        float _1446 = ((((1.0 - _1437) * (_1432 + 2.0)) * exp2(log2(isnan(1.0) ? _3830 : (isnan(_3830) ? 1.0 : min(_3830, 1.0))) * (_1432 + 1.0))) + _1437) * _1320;
        _1454 = _1287;
        _1455 = _1286;
        _1456 = _1285;
        _1457 = _1297;
        _1458 = _1296;
        _1459 = _1295;
        _1460 = _1307;
        _1461 = _1306;
        _1462 = _1305;
        _1463 = _1320;
        _1464 = _1319;
        _1465 = _1318;
        _1466 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1362 : (isnan(_1362) ? 0.0 : max(_1362, 0.0)));
        _1467 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1404 : (isnan(_1404) ? 0.0 : max(_1404, 0.0)));
        _1468 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1446 : (isnan(_1446) ? 0.0 : max(_1446, 0.0)));
    }
    else
    {
        _1454 = _1146;
        _1455 = _1146;
        _1456 = _1146;
        _1457 = _1146;
        _1458 = _1146;
        _1459 = _1146;
        _1460 = _1146;
        _1461 = _1146;
        _1462 = _1146;
        _1463 = _1146;
        _1464 = _1146;
        _1465 = _1146;
        _1466 = 0.0;
        _1467 = 0.0;
        _1468 = 0.0;
    }
    float _1478 = (cbModelParam._m0[1u].x * (_1466 - _1158)) + _1158;
    float _1479 = (cbModelParam._m0[1u].x * (_1467 - _1159)) + _1159;
    float _1480 = (cbModelParam._m0[1u].x * (_1468 - _1160)) + _1160;
    float _1501 = fma(_1480, cbSceneParam._m0[89u].z, fma(_1479, cbSceneParam._m0[89u].y, _1478 * cbSceneParam._m0[89u].x));
    float _1504 = fma(_1480, cbSceneParam._m0[90u].z, fma(_1479, cbSceneParam._m0[90u].y, _1478 * cbSceneParam._m0[90u].x));
    float _1507 = fma(_1480, cbSceneParam._m0[91u].z, fma(_1479, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1478));
    float _1522 = _783 * 0.5;
    float _1523 = _784 * 0.5;
    float _1524 = _785 * 0.5;
    float _1525 = dot(vec4(_1522, _1523, _1524, 1.0), vec4(_1456, _1459, _1462, _1465));
    float _1528 = dot(vec4(_1522, _1523, _1524, 1.0), vec4(_1455, _1458, _1461, _1464));
    float _1531 = dot(vec4(_1522, _1523, _1524, 1.0), vec4(_1454, _1457, _1460, _1463));
    float _1565;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1538 = dot(vec4(_1522, _1523, _1524, 1.0), vec4(_1145, _1149, _1152, _1155));
        float _1542 = dot(vec4(_1522, _1523, _1524, 1.0), vec4(_1147, _1150, _1153, _1156));
        float _1546 = dot(vec4(_1522, _1523, _1524, 1.0), vec4(_1148, _1151, _1154, _1157));
        float _1553 = dot(vec4(cbModelParam._m0[39u]), vec4(_1522, _1523, _1524, 1.0));
        _1565 = dot(vec3(isnan(0.0) ? _1546 : (isnan(_1546) ? 0.0 : max(_1546, 0.0)), isnan(0.0) ? _1542 : (isnan(_1542) ? 0.0 : max(_1542, 0.0)), isnan(0.0) ? _1538 : (isnan(_1538) ? 0.0 : max(_1538, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1553) ? 0.0 : (isnan(0.0) ? _1553 : max(0.0, _1553))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1565 = 1.0;
    }
    float _1576;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1567 = dot(vec4(cbModelParam._m0[40u]), vec4(_1522, _1523, _1524, 1.0));
        _1576 = dot(vec3(isnan(0.0) ? _1525 : (isnan(_1525) ? 0.0 : max(_1525, 0.0)), isnan(0.0) ? _1528 : (isnan(_1528) ? 0.0 : max(_1528, 0.0)), isnan(0.0) ? _1531 : (isnan(_1531) ? 0.0 : max(_1531, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1567) ? 0.0 : (isnan(0.0) ? _1567 : max(0.0, _1567))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1576 = 1.0;
    }
    float _1580 = (_1576 * cbModelParam._m0[1u].x) + (_1565 * (1.0 - cbModelParam._m0[1u].x));
    float _1590 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _628);
    float _1591 = isnan(_1590) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1590 : min(cbModelParam._m0[25u].z, _1590));
    float _1672;
    float _1674;
    float _1676;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1639 = fma(_844, cbModelParam._m0[13u].z, fma(_840, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _836)) + cbModelParam._m0[13u].w;
        float _1643 = fma(_844, cbModelParam._m0[14u].z, fma(_840, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _836)) + cbModelParam._m0[14u].w;
        float _1647 = fma(_844, cbModelParam._m0[15u].z, fma(_840, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _836)) + cbModelParam._m0[15u].w;
        float _1650 = fma(_785, cbModelParam._m0[13u].z, fma(_784, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _783));
        float _1653 = fma(_785, cbModelParam._m0[14u].z, fma(_784, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _783));
        float _1656 = fma(_785, cbModelParam._m0[15u].z, fma(_784, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _783));
        float _1684;
        if (_1650 > 0.0)
        {
            _1684 = abs((1.0 - _1639) / _1650);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1650 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1639 + 1.0) / _1650);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1684 = frontier_phi_14_12_ladder;
        }
        float _1906;
        if (_1653 > 0.0)
        {
            _1906 = abs((1.0 - _1643) / _1653);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1653 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1643 + 1.0) / _1653);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1906 = frontier_phi_23_19_ladder;
        }
        float _2152;
        if (_1656 > 0.0)
        {
            _2152 = abs((1.0 - _1647) / _1656);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1656 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1647 + 1.0) / _1656);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2152 = frontier_phi_35_30_ladder;
        }
        float _2154 = isnan(_1906) ? _1684 : (isnan(_1684) ? _1906 : min(_1684, _1906));
        float _2155 = isnan(_2152) ? _2154 : (isnan(_2154) ? _2152 : min(_2154, _2152));
        float _2159 = (_2155 * _1650) + _1639;
        float _2160 = (_2155 * _1653) + _1643;
        float _2161 = (_2155 * _1656) + _1647;
        float _2162 = _2155 * 9.9999997473787516355514526367188e-05;
        float _2164 = (-1.0) - _2162;
        float _2166 = _2162 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2161 > _2166) || ((_2161 < _2164) || ((_2160 > _2166) || ((_2160 < _2164) || ((_2159 < _2164) || (_2159 > _2166))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2285 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2161, cbModelParam._m0[9u].z, fma(_2160, cbModelParam._m0[9u].y, _2159 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2161, cbModelParam._m0[10u].z, fma(_2160, cbModelParam._m0[10u].y, _2159 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2161, cbModelParam._m0[11u].z, fma(_2160, cbModelParam._m0[11u].y, _2159 * cbModelParam._m0[11u].x))), _1591);
            frontier_phi_13_35_ladder = _2285.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2285.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2285.x * cbModelParam._m0[1u].y;
        }
        _1672 = frontier_phi_13_35_ladder_2;
        _1674 = frontier_phi_13_35_ladder_1;
        _1676 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1660 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_783, _784, _785), _1591);
        _1672 = _1660.x * cbModelParam._m0[1u].y;
        _1674 = _1660.y * cbModelParam._m0[1u].y;
        _1676 = _1660.z * cbModelParam._m0[1u].y;
    }
    float _1680 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _628);
    float _1681 = isnan(_1680) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1680 : min(cbModelParam._m0[25u].w, _1680));
    float _1771;
    float _1773;
    float _1775;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1735 = fma(_844, cbModelParam._m0[21u].z, fma(_840, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _836)) + cbModelParam._m0[21u].w;
        float _1739 = fma(_844, cbModelParam._m0[22u].z, fma(_840, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _836)) + cbModelParam._m0[22u].w;
        float _1743 = fma(_844, cbModelParam._m0[23u].z, fma(_840, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _836)) + cbModelParam._m0[23u].w;
        float _1746 = fma(_785, cbModelParam._m0[21u].z, fma(_784, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _783));
        float _1749 = fma(_785, cbModelParam._m0[22u].z, fma(_784, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _783));
        float _1752 = fma(_785, cbModelParam._m0[23u].z, fma(_784, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _783));
        float _1911;
        if (_1746 > 0.0)
        {
            _1911 = abs((1.0 - _1735) / _1746);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1746 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1735 + 1.0) / _1746);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1911 = frontier_phi_25_21_ladder;
        }
        float _2179;
        if (_1749 > 0.0)
        {
            _2179 = abs((1.0 - _1739) / _1749);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1749 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1739 + 1.0) / _1749);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2179 = frontier_phi_37_32_ladder;
        }
        float _2384;
        if (_1752 > 0.0)
        {
            _2384 = abs((1.0 - _1743) / _1752);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1752 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1743 + 1.0) / _1752);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2384 = frontier_phi_46_43_ladder;
        }
        float _2386 = isnan(_2179) ? _1911 : (isnan(_1911) ? _2179 : min(_1911, _2179));
        float _2387 = isnan(_2384) ? _2386 : (isnan(_2386) ? _2384 : min(_2386, _2384));
        float _2391 = (_2387 * _1746) + _1735;
        float _2392 = (_2387 * _1749) + _1739;
        float _2393 = (_2387 * _1752) + _1743;
        float _2394 = _2387 * 9.9999997473787516355514526367188e-05;
        float _2395 = (-1.0) - _2394;
        float _2397 = _2394 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2393 > _2397) || ((_2393 < _2395) || ((_2392 > _2397) || ((_2392 < _2395) || ((_2391 < _2395) || (_2391 > _2397))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2592 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2393, cbModelParam._m0[17u].z, fma(_2392, cbModelParam._m0[17u].y, _2391 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2393, cbModelParam._m0[18u].z, fma(_2392, cbModelParam._m0[18u].y, _2391 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2393, cbModelParam._m0[19u].z, fma(_2392, cbModelParam._m0[19u].y, _2391 * cbModelParam._m0[19u].x))), _1681);
            frontier_phi_22_46_ladder = _2592.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2592.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2592.x * cbModelParam._m0[1u].z;
        }
        _1771 = frontier_phi_22_46_ladder_2;
        _1773 = frontier_phi_22_46_ladder_1;
        _1775 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1755 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_783, _784, _785), _1681);
        _1771 = _1755.x * cbModelParam._m0[1u].z;
        _1773 = _1755.y * cbModelParam._m0[1u].z;
        _1775 = _1755.z * cbModelParam._m0[1u].z;
    }
    float _1787 = ((((1.0 - _804) * ((_791 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_804 * _791)) * _775;
    float _1788 = _1787 * ((cbModelParam._m0[1u].w * (_1771 - _1672)) + _1672);
    float _1789 = _1787 * ((cbModelParam._m0[1u].w * (_1773 - _1674)) + _1674);
    float _1790 = _1787 * ((cbModelParam._m0[1u].w * (_1775 - _1676)) + _1676);
    float _1793 = fma(_1790, cbSceneParam._m0[89u].z, fma(_1789, cbSceneParam._m0[89u].y, _1788 * cbSceneParam._m0[89u].x));
    float _1796 = fma(_1790, cbSceneParam._m0[90u].z, fma(_1789, cbSceneParam._m0[90u].y, _1788 * cbSceneParam._m0[90u].x));
    float _1799 = fma(_1790, cbSceneParam._m0[91u].z, fma(_1789, cbSceneParam._m0[91u].y, _1788 * cbSceneParam._m0[91u].x));
    vec4 _1807 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_712, _713));
    float _1809 = _1807.w;
    float _1821 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1809);
    float _1822 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1809);
    float _1823 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1809);
    uvec4 _1827 = floatBitsToUint(cbInstanceData._m0[_234 + 5u]);
    uint _1829 = _1827.x * 14u;
    uint _1830 = _1829 + 13u;
    float _1837 = _775 + (-1.0);
    float _1842 = (cbLight._m0[_1830].x * _1837) + 1.0;
    float _1843 = (cbLight._m0[_1830].y * _1837) + 1.0;
    float _1844 = (cbLight._m0[_1830].z * _1837) + 1.0;
    float _1845 = (cbLight._m0[_1830].w * _1837) + 1.0;
    uint _1846 = _1829 + 5u;
    float _1852 = isnan(1.0) ? _1843 : (isnan(_1843) ? 1.0 : min(_1843, 1.0));
    uint _1856 = _1829 + 4u;
    float _1865 = isnan(1.0) ? _1842 : (isnan(_1842) ? 1.0 : min(_1842, 1.0));
    uint _1869 = _1829 | 1u;
    float _1880 = dot(vec3(cbLight._m0[_1829].xyz), vec3(_625, _626, _627));
    float _1883 = dot(vec3(cbLight._m0[_1869].xyz), vec3(_625, _626, _627));
    float _3988 = isnan(0.0) ? _1880 : (isnan(_1880) ? 0.0 : max(_1880, 0.0));
    float _3999 = isnan(0.0) ? _1883 : (isnan(_1883) ? 0.0 : max(_1883, 0.0));
    float _1888 = (isnan(1.0) ? _3988 : (isnan(_3988) ? 1.0 : min(_3988, 1.0))) * 0.3183098733425140380859375;
    float _1890 = (isnan(1.0) ? _3999 : (isnan(_3999) ? 1.0 : min(_3999, 1.0))) * 0.3183098733425140380859375;
    float _1897 = ((cbLight._m0[_1846].x * _1852) * _1890) + (((cbLight._m0[_1856].x * _1821) * _1865) * _1888);
    float _1898 = ((_1852 * cbLight._m0[_1846].y) * _1890) + (((cbLight._m0[_1856].y * _1822) * _1865) * _1888);
    float _1899 = ((_1852 * cbLight._m0[_1846].z) * _1890) + (((cbLight._m0[_1856].z * _1823) * _1865) * _1888);
    uvec4 _1903 = floatBitsToUint(cbLight._m0[_1829 + 12u]);
    bool _1905 = _1903.x == 0u;
    float _1916;
    float _1918;
    float _1920;
    if (_1905)
    {
        _1916 = _1897;
        _1918 = _1898;
        _1920 = _1899;
    }
    else
    {
        uint _1924 = _1829 + 6u;
        float _1940 = (dot(vec3(cbLight._m0[_1829 + 2u].xyz), vec3(_625, _626, _627)) * 0.5) + 0.5;
        float _1941 = _1940 * _1940;
        float _4010 = isnan(0.0) ? _1941 : (isnan(_1941) ? 0.0 : max(_1941, 0.0));
        float _1942 = isnan(1.0) ? _4010 : (isnan(_4010) ? 1.0 : min(_4010, 1.0));
        float _1943 = isnan(1.0) ? _1844 : (isnan(_1844) ? 1.0 : min(_1844, 1.0));
        _1916 = (((cbLight._m0[_1924].x * 0.3183098733425140380859375) * _1942) * _1943) + _1897;
        _1918 = (((cbLight._m0[_1924].y * 0.3183098733425140380859375) * _1942) * _1943) + _1898;
        _1920 = (((cbLight._m0[_1924].z * 0.3183098733425140380859375) * _1942) * _1943) + _1899;
    }
    bool _1923 = _1903.y == 0u;
    float _1961;
    float _1963;
    float _1965;
    if (_1923)
    {
        _1961 = _1916;
        _1963 = _1918;
        _1965 = _1920;
    }
    else
    {
        uint _2123 = _1829 + 7u;
        float _2139 = (dot(vec3(cbLight._m0[_1829 + 3u].xyz), vec3(_625, _626, _627)) * 0.5) + 0.5;
        float _2140 = _2139 * _2139;
        float _4026 = isnan(0.0) ? _2140 : (isnan(_2140) ? 0.0 : max(_2140, 0.0));
        float _2141 = isnan(1.0) ? _4026 : (isnan(_4026) ? 1.0 : min(_4026, 1.0));
        float _2142 = isnan(1.0) ? _1845 : (isnan(_1845) ? 1.0 : min(_1845, 1.0));
        _1961 = (((cbLight._m0[_2123].x * 0.3183098733425140380859375) * _2141) * _2142) + _1916;
        _1963 = (((cbLight._m0[_2123].y * 0.3183098733425140380859375) * _2141) * _2142) + _1918;
        _1965 = (((cbLight._m0[_2123].z * 0.3183098733425140380859375) * _2141) * _2142) + _1920;
    }
    uint _1968 = _1829 + 8u;
    float _1981 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1829].w)) * _628) * 0.949999988079071044921875);
    float _1982 = _1981 * _1981;
    float _1983 = cbLight._m0[_1829].x + _704;
    float _1984 = cbLight._m0[_1829].y + _705;
    float _1985 = cbLight._m0[_1829].z + _706;
    float _1989 = inversesqrt(dot(vec3(_1983, _1984, _1985), vec3(_1983, _1984, _1985)));
    float _1990 = _1989 * _1983;
    float _1991 = _1989 * _1984;
    float _1992 = _1989 * _1985;
    float _1993 = dot(vec3(_625, _626, _627), vec3(cbLight._m0[_1829].xyz));
    float _4042 = isnan(0.0) ? _1993 : (isnan(_1993) ? 0.0 : max(_1993, 0.0));
    float _1996 = isnan(1.0) ? _4042 : (isnan(_4042) ? 1.0 : min(_4042, 1.0));
    float _4053 = isnan(0.0) ? _776 : (isnan(_776) ? 0.0 : max(_776, 0.0));
    float _1997 = isnan(1.0) ? _4053 : (isnan(_4053) ? 1.0 : min(_4053, 1.0));
    float _1998 = dot(vec3(_625, _626, _627), vec3(_1990, _1991, _1992));
    float _4064 = isnan(0.0) ? _1998 : (isnan(_1998) ? 0.0 : max(_1998, 0.0));
    float _2001 = isnan(1.0) ? _4064 : (isnan(_4064) ? 1.0 : min(_4064, 1.0));
    float _2002 = dot(vec3(cbLight._m0[_1829].xyz), vec3(_1990, _1991, _1992));
    float _4075 = isnan(0.0) ? _2002 : (isnan(_2002) ? 0.0 : max(_2002, 0.0));
    float _2006 = _1982 * _1982;
    float _2010 = ((_2001 * _2001) * (_2006 + (-1.0))) + 1.0;
    float _2021 = (exp2(log2(1.0 - (isnan(1.0) ? _4075 : (isnan(_4075) ? 1.0 : min(_4075, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2022 = 1.0 - _1982;
    float _2033 = (0.5 / (((_1997 * ((_1996 * _2022) + _1982)) + 9.9999999392252902907785028219223e-09) + (((_1997 * _2022) + _1982) * _1996))) * _1996;
    float _4086 = isnan(0.0) ? _2033 : (isnan(_2033) ? 0.0 : max(_2033, 0.0));
    float _2035 = (isnan(1.0) ? _4086 : (isnan(_4086) ? 1.0 : min(_4086, 1.0))) * (_2006 / ((_2010 * _2010) * 3.141590118408203125));
    uint _2049 = _1829 + 9u;
    float _2060 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1869].w)) * _628) * 0.949999988079071044921875);
    float _2061 = _2060 * _2060;
    float _2062 = cbLight._m0[_1869].x + _704;
    float _2063 = cbLight._m0[_1869].y + _705;
    float _2064 = cbLight._m0[_1869].z + _706;
    float _2068 = inversesqrt(dot(vec3(_2062, _2063, _2064), vec3(_2062, _2063, _2064)));
    float _2069 = _2068 * _2062;
    float _2070 = _2068 * _2063;
    float _2071 = _2068 * _2064;
    float _2072 = dot(vec3(_625, _626, _627), vec3(cbLight._m0[_1869].xyz));
    float _4097 = isnan(0.0) ? _2072 : (isnan(_2072) ? 0.0 : max(_2072, 0.0));
    float _2075 = isnan(1.0) ? _4097 : (isnan(_4097) ? 1.0 : min(_4097, 1.0));
    float _2076 = dot(vec3(_625, _626, _627), vec3(_2069, _2070, _2071));
    float _4108 = isnan(0.0) ? _2076 : (isnan(_2076) ? 0.0 : max(_2076, 0.0));
    float _2079 = isnan(1.0) ? _4108 : (isnan(_4108) ? 1.0 : min(_4108, 1.0));
    float _2080 = dot(vec3(cbLight._m0[_1869].xyz), vec3(_2069, _2070, _2071));
    float _4119 = isnan(0.0) ? _2080 : (isnan(_2080) ? 0.0 : max(_2080, 0.0));
    float _2084 = _2061 * _2061;
    float _2088 = ((_2079 * _2079) * (_2084 + (-1.0))) + 1.0;
    float _2097 = (exp2(log2(1.0 - (isnan(1.0) ? _4119 : (isnan(_4119) ? 1.0 : min(_4119, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2098 = 1.0 - _2061;
    float _2108 = (0.5 / (((_1997 * ((_2075 * _2098) + _2061)) + 9.9999999392252902907785028219223e-09) + (((_1997 * _2098) + _2061) * _2075))) * _2075;
    float _4130 = isnan(0.0) ? _2108 : (isnan(_2108) ? 0.0 : max(_2108, 0.0));
    float _2110 = (isnan(1.0) ? _4130 : (isnan(_4130) ? 1.0 : min(_4130, 1.0))) * (_2084 / ((_2088 * _2088) * 3.141590118408203125));
    float _2120 = (((_2097 * cbLight._m0[_2049].x) * _2110) * _1852) + ((((cbLight._m0[_1968].x * _1821) * _2021) * _2035) * _1865);
    float _2121 = (((_2097 * cbLight._m0[_2049].y) * _2110) * _1852) + ((((cbLight._m0[_1968].y * _1822) * _2021) * _2035) * _1865);
    float _2122 = (((_2097 * cbLight._m0[_2049].z) * _2110) * _1852) + ((((cbLight._m0[_1968].z * _1823) * _2021) * _2035) * _1865);
    float _2184;
    float _2186;
    float _2188;
    if (_1905)
    {
        _2184 = _2120;
        _2186 = _2121;
        _2188 = _2122;
    }
    else
    {
        uint _2190 = _1829 + 2u;
        uint _2194 = _1829 + 10u;
        float _2208 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2190].w)) * _628) * 0.949999988079071044921875);
        float _2209 = _2208 * _2208;
        float _2210 = cbLight._m0[_2190].x + _704;
        float _2211 = cbLight._m0[_2190].y + _705;
        float _2212 = cbLight._m0[_2190].z + _706;
        float _2216 = inversesqrt(dot(vec3(_2210, _2211, _2212), vec3(_2210, _2211, _2212)));
        float _2217 = _2216 * _2210;
        float _2218 = _2216 * _2211;
        float _2219 = _2216 * _2212;
        float _2220 = dot(vec3(_625, _626, _627), vec3(cbLight._m0[_2190].xyz));
        float _4141 = isnan(0.0) ? _2220 : (isnan(_2220) ? 0.0 : max(_2220, 0.0));
        float _2223 = isnan(1.0) ? _4141 : (isnan(_4141) ? 1.0 : min(_4141, 1.0));
        float _2224 = dot(vec3(_625, _626, _627), vec3(_2217, _2218, _2219));
        float _4152 = isnan(0.0) ? _2224 : (isnan(_2224) ? 0.0 : max(_2224, 0.0));
        float _2227 = isnan(1.0) ? _4152 : (isnan(_4152) ? 1.0 : min(_4152, 1.0));
        float _2228 = dot(vec3(cbLight._m0[_2190].xyz), vec3(_2217, _2218, _2219));
        float _4163 = isnan(0.0) ? _2228 : (isnan(_2228) ? 0.0 : max(_2228, 0.0));
        float _2232 = _2209 * _2209;
        float _2236 = ((_2227 * _2227) * (_2232 + (-1.0))) + 1.0;
        float _2245 = (exp2(log2(1.0 - (isnan(1.0) ? _4163 : (isnan(_4163) ? 1.0 : min(_4163, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2246 = 1.0 - _2209;
        float _2256 = (0.5 / (((_1997 * ((_2223 * _2246) + _2209)) + 9.9999999392252902907785028219223e-09) + (((_1997 * _2246) + _2209) * _2223))) * _2223;
        float _4174 = isnan(0.0) ? _2256 : (isnan(_2256) ? 0.0 : max(_2256, 0.0));
        float _2258 = (isnan(1.0) ? _4174 : (isnan(_4174) ? 1.0 : min(_4174, 1.0))) * (_2232 / ((_2236 * _2236) * 3.141590118408203125));
        float _2259 = isnan(1.0) ? _1844 : (isnan(_1844) ? 1.0 : min(_1844, 1.0));
        _2184 = (((_2245 * cbLight._m0[_2194].x) * _2258) * _2259) + _2120;
        _2186 = (((_2245 * cbLight._m0[_2194].y) * _2258) * _2259) + _2121;
        _2188 = (((_2245 * cbLight._m0[_2194].z) * _2258) * _2259) + _2122;
    }
    float _2294;
    float _2296;
    float _2298;
    if (_1923)
    {
        _2294 = _2184;
        _2296 = _2186;
        _2298 = _2188;
    }
    else
    {
        uint _2305 = _1829 + 3u;
        uint _2309 = _1829 + 11u;
        float _2323 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2305].w)) * _628) * 0.949999988079071044921875);
        float _2324 = _2323 * _2323;
        float _2325 = cbLight._m0[_2305].x + _704;
        float _2326 = cbLight._m0[_2305].y + _705;
        float _2327 = cbLight._m0[_2305].z + _706;
        float _2331 = inversesqrt(dot(vec3(_2325, _2326, _2327), vec3(_2325, _2326, _2327)));
        float _2332 = _2331 * _2325;
        float _2333 = _2331 * _2326;
        float _2334 = _2331 * _2327;
        float _2335 = dot(vec3(_625, _626, _627), vec3(cbLight._m0[_2305].xyz));
        float _4190 = isnan(0.0) ? _2335 : (isnan(_2335) ? 0.0 : max(_2335, 0.0));
        float _2338 = isnan(1.0) ? _4190 : (isnan(_4190) ? 1.0 : min(_4190, 1.0));
        float _2339 = dot(vec3(_625, _626, _627), vec3(_2332, _2333, _2334));
        float _4201 = isnan(0.0) ? _2339 : (isnan(_2339) ? 0.0 : max(_2339, 0.0));
        float _2342 = isnan(1.0) ? _4201 : (isnan(_4201) ? 1.0 : min(_4201, 1.0));
        float _2343 = dot(vec3(cbLight._m0[_2305].xyz), vec3(_2332, _2333, _2334));
        float _4212 = isnan(0.0) ? _2343 : (isnan(_2343) ? 0.0 : max(_2343, 0.0));
        float _2347 = _2324 * _2324;
        float _2351 = ((_2342 * _2342) * (_2347 + (-1.0))) + 1.0;
        float _2360 = (exp2(log2(1.0 - (isnan(1.0) ? _4212 : (isnan(_4212) ? 1.0 : min(_4212, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2361 = 1.0 - _2324;
        float _2371 = (0.5 / (((_1997 * ((_2338 * _2361) + _2324)) + 9.9999999392252902907785028219223e-09) + (((_1997 * _2361) + _2324) * _2338))) * _2338;
        float _4223 = isnan(0.0) ? _2371 : (isnan(_2371) ? 0.0 : max(_2371, 0.0));
        float _2373 = (isnan(1.0) ? _4223 : (isnan(_4223) ? 1.0 : min(_4223, 1.0))) * (_2347 / ((_2351 * _2351) * 3.141590118408203125));
        float _2374 = isnan(1.0) ? _1845 : (isnan(_1845) ? 1.0 : min(_1845, 1.0));
        _2294 = (((_2360 * cbLight._m0[_2309].x) * _2373) * _2374) + _2184;
        _2296 = (((_2360 * cbLight._m0[_2309].y) * _2373) * _2374) + _2186;
        _2298 = (((_2360 * cbLight._m0[_2309].z) * _2373) * _2374) + _2188;
    }
    float _2509;
    float _2511;
    float _2513;
    float _2515;
    float _2517;
    float _2519;
    if (_1827.y == 0u)
    {
        float _2449 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2450 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2449;
        float _2451 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2449;
        float _2452 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2449;
        uvec4 _2464 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2465 = _2464.x;
        uint _2476 = uint((float(_2464.y) * floor(float(uint(cbSceneParam._m0[85u].y * _713) / _2465))) + floor(float(uint(cbSceneParam._m0[85u].x * _712) / _2465)));
        float _2486 = (log2(_2452 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2487 = isnan(0.0) ? _2486 : (isnan(_2486) ? 0.0 : max(_2486, 0.0));
        uint _2490 = uint(isnan(14.0) ? _2487 : (isnan(_2487) ? 14.0 : min(_2487, 14.0)));
        uvec4 _2495 = texelFetch(g_lightClusterGridBuffer, int(((_2490 << 2u) + (_2476 << 6u)) >> 2u));
        uint _2496 = _2495.x;
        uint _2497 = _2464.z;
        float _2597;
        float _2599;
        float _2601;
        float _2603;
        float _2605;
        float _2607;
        if (((((1u << ((_2497 >> 4u) & 15u)) + 4294967295u) & _2496) == 0u) || ((_2497 & 240u) == 0u))
        {
            _2597 = 0.0;
            _2599 = 0.0;
            _2601 = 0.0;
            _2603 = 0.0;
            _2605 = 0.0;
            _2607 = 0.0;
        }
        else
        {
            float _2598;
            float _2600;
            float _2602;
            float _2604;
            float _2606;
            float _2608;
            float _2742 = 0.0;
            float _2743 = 0.0;
            float _2744 = 0.0;
            float _2745 = 0.0;
            float _2746 = 0.0;
            float _2747 = 0.0;
            uint _2748 = 0u;
            uint _2757;
            bool _2758;
            for (;;)
            {
                _2757 = texelFetch(g_lightClassification, int((((_2490 << 5u) + (_2476 << 9u)) + (_2748 << 2u)) >> 2u)).x;
                _2758 = _2757 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2758)
                {
                    frontier_phi_61_pred = _2742;
                    frontier_phi_61_pred_1 = _2747;
                    frontier_phi_61_pred_2 = _2746;
                    frontier_phi_61_pred_3 = _2745;
                    frontier_phi_61_pred_4 = _2744;
                    frontier_phi_61_pred_5 = _2743;
                }
                else
                {
                    float _2866;
                    float _2867;
                    float _2868;
                    float _2869;
                    float _2870;
                    float _2871;
                    uint _2872;
                    _2866 = _2742;
                    _2867 = _2743;
                    _2868 = _2744;
                    _2869 = _2745;
                    _2870 = _2746;
                    _2871 = _2747;
                    _2872 = _2757;
                    float _2798;
                    float _2799;
                    float _2800;
                    float _2801;
                    float _2802;
                    float _2803;
                    for (;;)
                    {
                        uint _2876 = uint(findLSB(_2872)) + (_2748 << 5u);
                        uint _2873 = (_2872 + 4294967295u) & _2872;
                        uint _2878 = _2876 * 48u;
                        vec4 _2892 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2878)).x, texelFetch(g_PointLightRenderingBuffer, int(_2878 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2878 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2878 + 3u)).x));
                        uint _2898 = (_2876 * 48u) + 4u;
                        vec4 _2911 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2898)).x, texelFetch(g_PointLightRenderingBuffer, int(_2898 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2898 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2898 + 3u)).x));
                        uint _2917 = (_2876 * 48u) + 8u;
                        vec3 _2928 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2917)).x, texelFetch(g_PointLightRenderingBuffer, int(_2917 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2917 + 2u)).x));
                        float _2932 = _2892.x - _2450;
                        float _2933 = _2892.y - _2451;
                        float _2934 = _2892.z - _2452;
                        float _2935 = dot(vec3(_2932, _2933, _2934), vec3(_2932, _2933, _2934));
                        float _2938 = inversesqrt(_2935);
                        float _2939 = _2938 * _2932;
                        float _2940 = _2938 * _2933;
                        float _2941 = _2938 * _2934;
                        float _2942 = dot(vec3(_731, _734, _737), vec3(_2939, _2940, _2941));
                        float _2947 = 1.0 - (_2935 * _2892.w);
                        float _4249 = isnan(0.0) ? _2947 : (isnan(_2947) ? 0.0 : max(_2947, 0.0));
                        float _2948 = isnan(1.0) ? _4249 : (isnan(_4249) ? 1.0 : min(_4249, 1.0));
                        float _2949 = sqrt(_2935) * _2911.w;
                        float _2952 = 1.39999997615814208984375 / (_2949 + 1.39999997615814208984375);
                        float _2953 = _2952 * _2952;
                        float _2956 = ((1.0 - _2953) * _2942) + _2953;
                        float _2959 = _2949 * _2949;
                        float _2963 = ((isnan(0.0) ? _2956 : (isnan(_2956) ? 0.0 : max(_2956, 0.0))) * _2948) / ((_2959 * 0.699999988079071044921875) + 1.0);
                        float _2967 = (-0.0) - _2450;
                        float _2968 = (-0.0) - _2451;
                        float _2969 = (-0.0) - _2452;
                        float _2973 = inversesqrt(dot(vec3(_2967, _2968, _2969), vec3(_2967, _2968, _2969)));
                        float _2974 = _2973 * _2967;
                        float _2975 = _2973 * _2968;
                        float _2976 = _2973 * _2969;
                        float _2984 = exp2(log2(1.0 / ((_2959 * 3.5) + 5.0)) * 0.25);
                        float _2985 = 1.0 - _791;
                        float _2992 = sqrt(1.0 - ((1.0 - (_2985 * _2985)) * (1.0 - (_2984 * _2984))));
                        float _2993 = _2992 * _2992;
                        float _2994 = _2993 * _2993;
                        float _2995 = _2974 + _2939;
                        float _2996 = _2975 + _2940;
                        float _2997 = _2976 + _2941;
                        float _3001 = inversesqrt(dot(vec3(_2995, _2996, _2997), vec3(_2995, _2996, _2997)));
                        float _3005 = dot(vec3(_731, _734, _737), vec3(_2974, _2975, _2976));
                        float _4265 = isnan(0.0) ? _3005 : (isnan(_3005) ? 0.0 : max(_3005, 0.0));
                        float _3008 = isnan(1.0) ? _4265 : (isnan(_4265) ? 1.0 : min(_4265, 1.0));
                        float _3009 = dot(vec3(_731, _734, _737), vec3(_3001 * _2995, _3001 * _2996, _3001 * _2997));
                        float _4276 = isnan(0.0) ? _3009 : (isnan(_3009) ? 0.0 : max(_3009, 0.0));
                        float _3012 = isnan(1.0) ? _4276 : (isnan(_4276) ? 1.0 : min(_4276, 1.0));
                        float _3016 = ((_3012 * _3012) * (_2994 + (-1.0))) + 1.0;
                        float _3017 = _2952 * _2993;
                        float _3018 = _3017 * _3017;
                        float _3021 = ((1.0 - _3018) * _2942) + _3018;
                        float _4287 = isnan(0.0) ? _3021 : (isnan(_3021) ? 0.0 : max(_3021, 0.0));
                        float _3022 = isnan(1.0) ? _4287 : (isnan(_4287) ? 1.0 : min(_4287, 1.0));
                        float _3023 = 1.0 - _2993;
                        float _3033 = (0.5 / (((_3022 * ((_3008 * _3023) + _2993)) + 9.9999999392252902907785028219223e-09) + (((_3022 * _3023) + _2993) * _3008))) * _3022;
                        float _4298 = isnan(0.0) ? _3033 : (isnan(_3033) ? 0.0 : max(_3033, 0.0));
                        float _3044 = (((_2994 * 3.1415927410125732421875) * (isnan(1.0) ? _4298 : (isnan(_4298) ? 1.0 : min(_4298, 1.0)))) / ((_3016 * _3016) * ((_2959 * 2.1991131305694580078125) + 3.141590118408203125))) * _2948;
                        _2801 = (_2963 * _2911.x) + _2869;
                        _2802 = (_2963 * _2911.y) + _2870;
                        _2803 = (_2963 * _2911.z) + _2871;
                        _2798 = (_3044 * _2928.x) + _2866;
                        _2799 = (_3044 * _2928.y) + _2867;
                        _2800 = (_3044 * _2928.z) + _2868;
                        if (_2873 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2866 = _2798;
                            _2867 = _2799;
                            _2868 = _2800;
                            _2869 = _2801;
                            _2870 = _2802;
                            _2871 = _2803;
                            _2872 = _2873;
                        }
                    }
                    frontier_phi_61_pred = _2798;
                    frontier_phi_61_pred_1 = _2803;
                    frontier_phi_61_pred_2 = _2802;
                    frontier_phi_61_pred_3 = _2801;
                    frontier_phi_61_pred_4 = _2800;
                    frontier_phi_61_pred_5 = _2799;
                }
                _2598 = frontier_phi_61_pred;
                _2608 = frontier_phi_61_pred_1;
                _2606 = frontier_phi_61_pred_2;
                _2604 = frontier_phi_61_pred_3;
                _2602 = frontier_phi_61_pred_4;
                _2600 = frontier_phi_61_pred_5;
                uint _2749 = _2748 + 1u;
                if (_2749 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2742 = _2598;
                    _2743 = _2600;
                    _2744 = _2602;
                    _2745 = _2604;
                    _2746 = _2606;
                    _2747 = _2608;
                    _2748 = _2749;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2597 = _2598;
            _2599 = _2600;
            _2601 = _2602;
            _2603 = _2604;
            _2605 = _2606;
            _2607 = _2608;
        }
        uvec4 _2611 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2612 = _2611.z;
        uint _2614 = (_2612 >> 8u) & 15u;
        float _2710;
        float _2712;
        float _2714;
        float _2716;
        float _2718;
        float _2720;
        if (((4294967295u << _2614) & _2496) == 0u)
        {
            _2710 = _2597;
            _2712 = _2599;
            _2714 = _2601;
            _2716 = _2603;
            _2718 = _2605;
            _2720 = _2607;
        }
        else
        {
            float _2735 = inversesqrt(dot(vec3(_2450, _2451, _2452), vec3(_2450, _2451, _2452)));
            float _2736 = _2735 * _2450;
            float _2737 = _2735 * _2451;
            float _2738 = _2735 * _2452;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2614 < ((_2612 >> 12u) & 15u))
            {
                float _2711;
                float _2713;
                float _2715;
                float _2717;
                float _2719;
                float _2721;
                float _2849 = _2597;
                float _2850 = _2599;
                float _2851 = _2601;
                float _2852 = _2603;
                float _2853 = _2605;
                float _2854 = _2607;
                uint _2855 = _2614;
                uint _2864;
                bool _2865;
                for (;;)
                {
                    _2864 = texelFetch(g_lightClassification, int((((_2490 << 5u) + (_2476 << 9u)) + (_2855 << 2u)) >> 2u)).x;
                    _2865 = _2864 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_2865)
                    {
                        frontier_phi_67_pred = _2852;
                        frontier_phi_67_pred_1 = _2853;
                        frontier_phi_67_pred_2 = _2854;
                        frontier_phi_67_pred_3 = _2851;
                        frontier_phi_67_pred_4 = _2850;
                        frontier_phi_67_pred_5 = _2849;
                    }
                    else
                    {
                        float _3049;
                        float _3050;
                        float _3051;
                        float _3052;
                        float _3053;
                        float _3054;
                        float _3343;
                        float _3344;
                        float _3345;
                        float _3346;
                        float _3347;
                        float _3348;
                        float _3062 = _2849;
                        float _3063 = _2850;
                        float _3064 = _2851;
                        float _3065 = _2852;
                        float _3066 = _2853;
                        float _3067 = _2854;
                        uint _3068 = _2864;
                        uint _3069;
                        vec4 _3094;
                        float _3095;
                        vec4 _3110;
                        vec3 _3122;
                        vec4 _3137;
                        vec4 _3153;
                        float _3199;
                        bool _3200;
                        for (;;)
                        {
                            uint _3079 = ((_2855 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3068));
                            _3069 = (_3068 + 4294967295u) & _3068;
                            uint _3081 = _3079 * 40u;
                            _3094 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3081)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3081 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3081 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3081 + 3u)).x));
                            _3095 = _3094.w;
                            uint _3097 = (_3079 * 40u) + 4u;
                            _3110 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3097)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3097 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3097 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3097 + 3u)).x));
                            uint _3112 = (_3079 * 40u) + 8u;
                            _3122 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3112)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3112 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3112 + 2u)).x));
                            uint _3124 = (_3079 * 40u) + 16u;
                            _3137 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3124)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3124 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3124 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3124 + 3u)).x));
                            uint _3140 = (_3079 * 40u) + 20u;
                            _3153 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3140)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3140 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3140 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3140 + 3u)).x));
                            uint _3155 = (_3079 * 40u) + 24u;
                            vec4 _3168 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3155)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3155 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3155 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3155 + 3u)).x));
                            uint _3174 = (_3079 * 40u) + 28u;
                            vec4 _3187 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3174)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3174 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3174 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3174 + 3u)).x));
                            _3199 = fma(_2452, _3187.z, fma(_2451, _3187.y, _3187.x * _2450)) + _3187.w;
                            _3200 = !((fma(_2452, _3168.z, fma(_2451, _3168.y, _3168.x * _2450)) + _3168.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3200)
                            {
                                float _3227 = _3094.x - _2450;
                                float _3228 = _3094.y - _2451;
                                float _3229 = _3094.z - _2452;
                                float _3230 = dot(vec3(_3227, _3228, _3229), vec3(_3227, _3228, _3229));
                                float _3233 = inversesqrt(_3230);
                                float _3234 = _3233 * _3227;
                                float _3235 = _3233 * _3228;
                                float _3236 = _3233 * _3229;
                                float _3240 = 1.0 - (_3230 / (_3095 * _3095));
                                float _4309 = isnan(0.0) ? _3240 : (isnan(_3240) ? 0.0 : max(_3240, 0.0));
                                float _3241 = isnan(1.0) ? _4309 : (isnan(_4309) ? 1.0 : min(_4309, 1.0));
                                float _3245 = sqrt(_3230) * _3110.w;
                                float _3247 = 1.39999997615814208984375 / (_3245 + 1.39999997615814208984375);
                                float _3248 = _3247 * _3247;
                                float _3251 = ((1.0 - _3248) * dot(vec3(_3234, _3235, _3236), vec3(_731, _734, _737))) + _3248;
                                float _3254 = _3245 * _3245;
                                float _3258 = (fma(_2452, _3137.z, fma(_2451, _3137.y, _3137.x * _2450)) + _3137.w) / _3199;
                                float _3259 = (fma(_2452, _3153.z, fma(_2451, _3153.y, _3153.x * _2450)) + _3153.w) / _3199;
                                float _3263 = 1.0 - dot(vec2(_3258, _3259), vec2(_3258, _3259));
                                float _4325 = isnan(0.0) ? _3263 : (isnan(_3263) ? 0.0 : max(_3263, 0.0));
                                float _3264 = isnan(1.0) ? _4325 : (isnan(_4325) ? 1.0 : min(_4325, 1.0));
                                float _3265 = _3264 * (((isnan(0.0) ? _3251 : (isnan(_3251) ? 0.0 : max(_3251, 0.0))) * _3241) / ((_3254 * 0.699999988079071044921875) + 1.0));
                                float _3277 = exp2(log2(1.0 / ((_3254 * 3.5) + 5.0)) * 0.25);
                                float _3278 = 1.0 - _791;
                                float _3285 = sqrt(1.0 - ((1.0 - (_3278 * _3278)) * (1.0 - (_3277 * _3277))));
                                float _3286 = _3285 * _3285;
                                float _3287 = _3286 * _3286;
                                float _3288 = _3234 - _2736;
                                float _3289 = _3235 - _2737;
                                float _3290 = _3236 - _2738;
                                float _3294 = inversesqrt(dot(vec3(_3288, _3289, _3290), vec3(_3288, _3289, _3290)));
                                float _3298 = dot(vec3(_731, _734, _737), vec3((-0.0) - _2736, (-0.0) - _2737, (-0.0) - _2738));
                                float _4336 = isnan(0.0) ? _3298 : (isnan(_3298) ? 0.0 : max(_3298, 0.0));
                                float _3301 = isnan(1.0) ? _4336 : (isnan(_4336) ? 1.0 : min(_4336, 1.0));
                                float _3302 = dot(vec3(_731, _734, _737), vec3(_3294 * _3288, _3294 * _3289, _3294 * _3290));
                                float _4347 = isnan(0.0) ? _3302 : (isnan(_3302) ? 0.0 : max(_3302, 0.0));
                                float _3305 = isnan(1.0) ? _4347 : (isnan(_4347) ? 1.0 : min(_4347, 1.0));
                                float _3309 = ((_3305 * _3305) * (_3287 + (-1.0))) + 1.0;
                                float _3310 = _3247 * _3286;
                                float _3311 = _3310 * _3310;
                                float _3317 = ((1.0 - _3311) * dot(vec3(_731, _734, _737), vec3(_3234, _3235, _3236))) + _3311;
                                float _4358 = isnan(0.0) ? _3317 : (isnan(_3317) ? 0.0 : max(_3317, 0.0));
                                float _3318 = isnan(1.0) ? _4358 : (isnan(_4358) ? 1.0 : min(_4358, 1.0));
                                float _3319 = 1.0 - _3286;
                                float _3329 = (0.5 / (((_3318 * ((_3301 * _3319) + _3286)) + 9.9999999392252902907785028219223e-09) + (((_3318 * _3319) + _3286) * _3301))) * _3318;
                                float _4369 = isnan(0.0) ? _3329 : (isnan(_3329) ? 0.0 : max(_3329, 0.0));
                                float _3339 = (_3264 * _3241) * (((_3287 * 3.1415927410125732421875) * (isnan(1.0) ? _4369 : (isnan(_4369) ? 1.0 : min(_4369, 1.0)))) / ((_3309 * _3309) * ((_3254 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3339 * _3122.x;
                                frontier_phi_73_pred_1 = _3339 * _3122.y;
                                frontier_phi_73_pred_2 = _3265 * _3110.z;
                                frontier_phi_73_pred_3 = _3265 * _3110.y;
                                frontier_phi_73_pred_4 = _3265 * _3110.x;
                                frontier_phi_73_pred_5 = _3339 * _3122.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3343 = frontier_phi_73_pred;
                            _3344 = frontier_phi_73_pred_1;
                            _3348 = frontier_phi_73_pred_2;
                            _3347 = frontier_phi_73_pred_3;
                            _3346 = frontier_phi_73_pred_4;
                            _3345 = frontier_phi_73_pred_5;
                            _3052 = _3346 + _3065;
                            _3053 = _3347 + _3066;
                            _3054 = _3348 + _3067;
                            _3049 = _3343 + _3062;
                            _3050 = _3344 + _3063;
                            _3051 = _3345 + _3064;
                            if (_3069 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3062 = _3049;
                                _3063 = _3050;
                                _3064 = _3051;
                                _3065 = _3052;
                                _3066 = _3053;
                                _3067 = _3054;
                                _3068 = _3069;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3052;
                        frontier_phi_67_pred_1 = _3053;
                        frontier_phi_67_pred_2 = _3054;
                        frontier_phi_67_pred_3 = _3051;
                        frontier_phi_67_pred_4 = _3050;
                        frontier_phi_67_pred_5 = _3049;
                    }
                    _2717 = frontier_phi_67_pred;
                    _2719 = frontier_phi_67_pred_1;
                    _2721 = frontier_phi_67_pred_2;
                    _2715 = frontier_phi_67_pred_3;
                    _2713 = frontier_phi_67_pred_4;
                    _2711 = frontier_phi_67_pred_5;
                    uint _2856 = _2855 + 1u;
                    if (_2856 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2849 = _2711;
                        _2850 = _2713;
                        _2851 = _2715;
                        _2852 = _2717;
                        _2853 = _2719;
                        _2854 = _2721;
                        _2855 = _2856;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2719;
                frontier_phi_55_56_ladder_1 = _2721;
                frontier_phi_55_56_ladder_2 = _2717;
                frontier_phi_55_56_ladder_3 = _2715;
                frontier_phi_55_56_ladder_4 = _2713;
                frontier_phi_55_56_ladder_5 = _2711;
            }
            else
            {
                frontier_phi_55_56_ladder = _2605;
                frontier_phi_55_56_ladder_1 = _2607;
                frontier_phi_55_56_ladder_2 = _2603;
                frontier_phi_55_56_ladder_3 = _2601;
                frontier_phi_55_56_ladder_4 = _2599;
                frontier_phi_55_56_ladder_5 = _2597;
            }
            _2710 = frontier_phi_55_56_ladder_5;
            _2712 = frontier_phi_55_56_ladder_4;
            _2714 = frontier_phi_55_56_ladder_3;
            _2716 = frontier_phi_55_56_ladder_2;
            _2718 = frontier_phi_55_56_ladder;
            _2720 = frontier_phi_55_56_ladder_1;
        }
        float _2725 = isnan(1.0) ? _775 : (isnan(_775) ? 1.0 : min(_775, 1.0));
        _2509 = (_2725 * _2716) + _1961;
        _2511 = (_2725 * _2718) + _1963;
        _2513 = (_2725 * _2720) + _1965;
        _2515 = ((_2710 * 0.039999999105930328369140625) * _2725) + _2294;
        _2517 = ((_2712 * 0.039999999105930328369140625) * _2725) + _2296;
        _2519 = ((_2714 * 0.039999999105930328369140625) * _2725) + _2298;
    }
    else
    {
        _2509 = _1961;
        _2511 = _1963;
        _2513 = _1965;
        _2515 = _2294;
        _2517 = _2296;
        _2519 = _2298;
    }
    float _4385 = isnan(0.0) ? _760 : (isnan(_760) ? 0.0 : max(_760, 0.0));
    float _4396 = isnan(0.0) ? _761 : (isnan(_761) ? 0.0 : max(_761, 0.0));
    float _4407 = isnan(0.0) ? _762 : (isnan(_762) ? 0.0 : max(_762, 0.0));
    uint _2539 = _234 + 6u;
    float _2547 = _712 / cbSceneParam._m0[86u].x;
    float _2548 = _713 / cbSceneParam._m0[86u].y;
    vec4 _2562 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2547, _2548, (log2((isnan(cbSceneParam._m0[77u].w) ? _646 : (isnan(_646) ? cbSceneParam._m0[77u].w : min(_646, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2564 = _2562.x;
    float _2565 = _2562.y;
    float _2566 = _2562.z;
    float _2567 = _2562.w;
    float _2660;
    float _2662;
    float _2664;
    float _2666;
    if (_646 > cbSceneParam._m0[78u].w)
    {
        float _2622 = isnan(_646) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _646 : min(cbSceneParam._m0[80u].w, _646));
        float _2623 = _2622 / _646;
        float _2634 = _2623 * _697;
        float _2635 = _698 * _2623;
        float _2636 = (-0.0) - _2635;
        float _2638 = _2623 * _699;
        float _2640 = (cbSceneParam._m0[77u].w * _2636) / _2622;
        float _2641 = _2640 + cbSceneParam._m0[79u].w;
        float _2642 = cbSceneParam._m0[79u].w - _2635;
        float _2648 = sqrt(((_2634 * _2634) + (_2635 * _2635)) + (_2638 * _2638));
        float _2651 = (1.0 - (cbSceneParam._m0[77u].w / _2622)) * _2648;
        float _2656 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2658 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2811;
        if (abs((_2636 - _2640) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2811 = ((((_2641 > 0.0) ? exp2(_2656 * _2641) : (2.0 - exp2(_2658 * _2641))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2651;
        }
        else
        {
            float _2771 = 1.0 / cbSceneParam._m0[80u].x;
            float _2772 = isnan(_2642) ? _2641 : (isnan(_2641) ? _2642 : max(_2641, _2642));
            float _2773 = isnan(_2642) ? _2641 : (isnan(_2641) ? _2642 : min(_2641, _2642));
            float _2782 = isnan(0.0) ? _2772 : (isnan(_2772) ? 0.0 : min(_2772, 0.0));
            float _2783 = isnan(0.0) ? _2773 : (isnan(_2773) ? 0.0 : min(_2773, 0.0));
            _2811 = ((abs(_2648 / _2636) * cbSceneParam._m0[80u].y) * ((((_2782 - _2783) * 2.0) - ((exp2(_2656 * (isnan(0.0) ? _2772 : (isnan(_2772) ? 0.0 : max(_2772, 0.0)))) - exp2(_2656 * (isnan(0.0) ? _2773 : (isnan(_2773) ? 0.0 : max(_2773, 0.0))))) * _2771)) - ((exp2(_2658 * _2782) - exp2(_2658 * _2783)) * _2771))) + (_2651 * cbSceneParam._m0[80u].z);
        }
        vec4 _2813 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2547, _2548, 1.0), 0.0);
        float _2822 = exp2((_2811 * (-1.44269502162933349609375)) * (1.0 - _2813.w));
        float _2823 = log2(_2822);
        float _2839 = log2(_2567);
        _2660 = (exp2(_2839 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2823 * cbSceneParam._m0[78u].x)) * _2813.x) / cbSceneParam._m0[78u].x)) + _2564;
        _2662 = (exp2(_2839 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2823 * cbSceneParam._m0[78u].y)) * _2813.y) / cbSceneParam._m0[78u].y)) + _2565;
        _2664 = (exp2(_2839 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2823 * cbSceneParam._m0[78u].z)) * _2813.z) / cbSceneParam._m0[78u].z)) + _2566;
        _2666 = _2822 * _2567;
    }
    else
    {
        _2660 = _2564;
        _2662 = _2565;
        _2664 = _2566;
        _2666 = _2567;
    }
    float _2678 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2679 = _2678 == 3.0;
    float _2680 = log2(_2666);
    float _2687 = exp2(_2680 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4385 : (isnan(_4385) ? 1.0 : min(_4385, 1.0))) * (_2509 + ((isnan(0.0) ? _1501 : (isnan(_1501) ? 0.0 : max(_1501, 0.0))) * _775))) + ((_2515 + ((isnan(0.0) ? _1793 : (isnan(_1793) ? 0.0 : max(_1793, 0.0))) * _1580)) * cbPerFrame._m0[3u].x));
    float _2688 = exp2(_2680 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4396 : (isnan(_4396) ? 1.0 : min(_4396, 1.0))) * (_2511 + ((isnan(0.0) ? _1504 : (isnan(_1504) ? 0.0 : max(_1504, 0.0))) * _775))) + ((_2517 + ((isnan(0.0) ? _1796 : (isnan(_1796) ? 0.0 : max(_1796, 0.0))) * _1580)) * cbPerFrame._m0[3u].x));
    float _2689 = exp2(_2680 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4407 : (isnan(_4407) ? 1.0 : min(_4407, 1.0))) * (_2513 + ((isnan(0.0) ? _1507 : (isnan(_1507) ? 0.0 : max(_1507, 0.0))) * _775))) + ((_2519 + ((isnan(0.0) ? _1799 : (isnan(_1799) ? 0.0 : max(_1799, 0.0))) * _1580)) * cbPerFrame._m0[3u].x));
    float _2698 = (_2678 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2698 * (_2679 ? _2687 : (_2687 + (cbSceneParam._m0[72u].w * _2660)));
    SV_Target.y = _2698 * (_2679 ? _2688 : (_2688 + (cbSceneParam._m0[72u].w * _2662)));
    SV_Target.z = _2698 * (_2679 ? _2689 : (_2689 + (cbSceneParam._m0[72u].w * _2664)));
    SV_Target.w = cbInstanceData._m0[_2539].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2539].w;
}


