#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 13) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_22;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_29;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_10;
layout(set = 0, binding = 20) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_6;
layout(set = 0, binding = 23) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_8;
layout(set = 0, binding = 24) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_9;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1619;
float _3975;
float _3976;
float _3977;
float _3978;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _242 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _243 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _244 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _250 = inversesqrt(dot(vec3(_242, _243, _244), vec3(_242, _243, _244)));
    float _251 = _250 * _242;
    float _252 = _250 * _243;
    float _253 = _250 * _244;
    float _257 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _258 = _257 * NORMAL.x;
    float _259 = _257 * NORMAL.y;
    float _260 = _257 * NORMAL.z;
    float _264 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _265 = _264 * TANGENT.x;
    float _266 = _264 * TANGENT.y;
    float _267 = _264 * TANGENT.z;
    float _276 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _278 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _279 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3987 = isnan(0.0) ? _276 : (isnan(_276) ? 0.0 : max(_276, 0.0));
    float _3998 = isnan(0.0) ? _278 : (isnan(_278) ? 0.0 : max(_278, 0.0));
    float _4009 = isnan(0.0) ? _279 : (isnan(_279) ? 0.0 : max(_279, 0.0));
    uint _289 = uint(roundEven(NORMAL.w)) * 13u;
    uint _294 = _289 + 1u;
    uint _298 = _289 + 2u;
    float _307 = sqrt(((cbInstanceData._m0[_294].x * cbInstanceData._m0[_294].x) + (cbInstanceData._m0[_289].x * cbInstanceData._m0[_289].x)) + (cbInstanceData._m0[_298].x * cbInstanceData._m0[_298].x));
    float _308 = _307 * TEXCOORD.z;
    float _309 = _307 * TEXCOORD.w;
    vec4 _322 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _308) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _309) + cbTextureTilingScale._m0[13u].w));
    vec4 _346 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _351 = _346.x * cbMtdParam._m0[11u].x;
    float _352 = _346.y * cbMtdParam._m0[11u].y;
    float _353 = _346.z * cbMtdParam._m0[11u].z;
    vec4 _372 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _308) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _309) + cbTextureTilingScale._m0[5u].w));
    vec4 _391 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _429 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _431 = _429.x;
    float _443 = dot(vec4(_431, _429.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _460 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _391.x) * 2.0) - ((((_431 - _443) * cbMtdParam._m0[24u].z) + _443) * cbMtdParam._m0[23u].x))) + 1.0;
    float _4020 = isnan(0.0) ? _460 : (isnan(_460) ? 0.0 : max(_460, 0.0));
    float _461 = isnan(1.0) ? _4020 : (isnan(_4020) ? 1.0 : min(_4020, 1.0));
    float _468 = (_461 * ((_372.x * cbMtdParam._m0[12u].x) - _351)) + _351;
    float _469 = (_461 * ((_372.y * cbMtdParam._m0[12u].y) - _352)) + _352;
    float _470 = (_461 * ((_372.z * cbMtdParam._m0[12u].z) - _353)) + _353;
    vec4 _487 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _308) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _309) + cbTextureTilingScale._m0[3u].w));
    vec4 _507 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _509 = _507.x;
    float _519 = dot(vec4(_509, _507.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _533 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _391.y) * 2.0) - ((((_509 - _519) * cbMtdParam._m0[24u].z) + _519) * cbMtdParam._m0[20u].w))) + 1.0;
    float _4031 = isnan(0.0) ? _533 : (isnan(_533) ? 0.0 : max(_533, 0.0));
    float _534 = isnan(1.0) ? _4031 : (isnan(_4031) ? 1.0 : min(_4031, 1.0));
    float _541 = (_534 * ((_487.x * cbMtdParam._m0[13u].x) - _468)) + _468;
    float _542 = (_534 * ((_487.y * cbMtdParam._m0[13u].y) - _469)) + _469;
    float _543 = (_534 * ((_487.z * cbMtdParam._m0[13u].z) - _470)) + _470;
    vec4 _561 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_9, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[24u].x * _308) + cbTextureTilingScale._m0[24u].z, (cbTextureTilingScale._m0[24u].y * _309) + cbTextureTilingScale._m0[24u].w));
    vec4 _578 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[25u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _580 = _578.x;
    float _590 = dot(vec4(_580, _578.yzw), vec4(cbMtdParam._m0[30u].w, cbMtdParam._m0[31u].xy, 0.0));
    float _602 = ((cbMtdParam._m0[25u].x * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.z) - _391.z) * 2.0) - ((((_580 - _590) * cbMtdParam._m0[24u].z) + _590) * cbMtdParam._m0[20u].z))) + 1.0;
    float _4042 = isnan(0.0) ? _602 : (isnan(_602) ? 0.0 : max(_602, 0.0));
    float _603 = isnan(1.0) ? _4042 : (isnan(_4042) ? 1.0 : min(_4042, 1.0));
    float _610 = (_603 * ((_561.x * cbMtdParam._m0[14u].x) - _541)) + _541;
    float _611 = (_603 * ((_561.y * cbMtdParam._m0[14u].y) - _542)) + _542;
    float _612 = (_603 * ((_561.z * cbMtdParam._m0[14u].z) - _543)) + _543;
    float _616 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _322.x) * _610;
    float _619 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _322.y) * _611;
    float _622 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _322.z) * _612;
    float _629 = ((_610 - _616) * (isnan(1.0) ? _3987 : (isnan(_3987) ? 1.0 : min(_3987, 1.0)))) + _616;
    float _630 = ((_611 - _619) * (isnan(1.0) ? _3998 : (isnan(_3998) ? 1.0 : min(_3998, 1.0)))) + _619;
    float _631 = ((_612 - _622) * (isnan(1.0) ? _4009 : (isnan(_4009) ? 1.0 : min(_4009, 1.0)))) + _622;
    vec4 _648 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _308) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _309) + cbTextureTilingScale._m0[20u].w));
    vec4 _673 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _308) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _309) + cbTextureTilingScale._m0[4u].w));
    vec4 _690 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _692 = _690.x;
    float _693 = _690.y;
    float _694 = _690.z;
    float _701 = ((_673.x - _692) * _461) + _692;
    float _702 = ((_673.y - _693) * _461) + _693;
    float _703 = ((_673.z - _694) * _461) + _694;
    vec4 _715 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _308) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _309) + cbTextureTilingScale._m0[2u].w));
    float _726 = ((_715.x - _701) * _534) + _701;
    float _727 = ((_715.y - _702) * _534) + _702;
    float _728 = ((_715.z - _703) * _534) + _703;
    vec4 _740 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[23u].x * _308) + cbTextureTilingScale._m0[23u].z, (cbTextureTilingScale._m0[23u].y * _309) + cbTextureTilingScale._m0[23u].w));
    float _753 = ((_740.z - _728) * _603) + _728;
    float _756 = ((((_740.x - _726) * _603) + _726) * 2.0) + (-1.0);
    float _757 = ((((_740.y - _727) * _603) + _727) * 2.0) + (-1.0);
    float _758 = dot(vec2(_756, _757), vec2(_756, _757));
    float _4053 = isnan(0.0) ? _758 : (isnan(_758) ? 0.0 : max(_758, 0.0));
    float _763 = sqrt(1.0 - (isnan(1.0) ? _4053 : (isnan(_4053) ? 1.0 : min(_4053, 1.0))));
    vec4 _781 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _793 = (_756 + ((((_648.x * 2.0) + (-1.0)) * TEXCOORD_11.x) * cbMtdParam._m0[20u].x)) + (((_781.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _794 = (_757 + ((((_648.y * 2.0) + (-1.0)) * TEXCOORD_11.y) * cbMtdParam._m0[20u].x)) + (((_781.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _797 = fma(_763, _258, fma(_794, _265, _793 * _251));
    float _800 = fma(_763, _259, fma(_794, _266, _793 * _252));
    float _803 = fma(_763, _260, fma(_794, _267, _793 * _253));
    float _807 = inversesqrt(dot(vec3(_797, _800, _803), vec3(_797, _800, _803)));
    vec4 _834 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _308) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _309) + cbTextureTilingScale._m0[11u].w));
    float _836 = _834.x;
    float _837 = 1.0 - _836;
    float _843 = (cbMtdParam._m0[19u].x + dot(vec4(_807 * _797, _807 * _800, _807 * _803, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_836 - _837) * cbMtdParam._m0[24u].w) + _837) * cbMtdParam._m0[21u].z);
    float _4064 = isnan(0.0) ? _843 : (isnan(_843) ? 0.0 : max(_843, 0.0));
    float _844 = isnan(1.0) ? _4064 : (isnan(_4064) ? 1.0 : min(_4064, 1.0));
    float _846 = (-0.0) - cbMtdParam._m0[24u].x;
    float _848 = isnan(0.0) ? _846 : (isnan(_846) ? 0.0 : max(_846, 0.0));
    float _849 = isnan(1.0) ? _848 : (isnan(_848) ? 1.0 : min(_848, 1.0));
    float _856 = _844 - ((_844 * TEXCOORD_8.x) * _849);
    float _857 = _844 - ((_844 * TEXCOORD_8.y) * _849);
    float _858 = _844 - ((_844 * TEXCOORD_8.z) * _849);
    float _865 = (_856 * (cbMtdParam._m0[17u].x - _629)) + _629;
    float _866 = (_857 * (cbMtdParam._m0[17u].y - _630)) + _630;
    float _867 = (_858 * (cbMtdParam._m0[17u].z - _631)) + _631;
    float _882 = sqrt(((cbInstanceData._m0[_294].x * cbInstanceData._m0[_294].x) + (cbInstanceData._m0[_289].x * cbInstanceData._m0[_289].x)) + (cbInstanceData._m0[_298].x * cbInstanceData._m0[_298].x));
    float _883 = _882 * TEXCOORD.z;
    float _884 = _882 * TEXCOORD.w;
    vec4 _896 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _883) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _884) + cbTextureTilingScale._m0[19u].w));
    float _898 = _896.x;
    float _899 = 1.0 - _898;
    float _927 = (TEXCOORD_8.x - ((cbMtdParam._m0[22u].w * (1.0 - TEXCOORD_8.x)) * ((((_898 - _899) * cbMtdParam._m0[24u].y) + _899) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _4085 = isnan(0.0) ? _927 : (isnan(_927) ? 0.0 : max(_927, 0.0));
    float _928 = isnan(1.0) ? _4085 : (isnan(_4085) ? 1.0 : min(_4085, 1.0));
    float _936 = ((((cbMtdParam._m0[10u].x - _865) * TEXCOORD_8.x) * cbMtdParam._m0[23u].w) * _928) + _865;
    float _937 = ((((cbMtdParam._m0[10u].y - _866) * TEXCOORD_8.y) * cbMtdParam._m0[23u].w) * _928) + _866;
    float _938 = (((cbMtdParam._m0[23u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _867)) * _928) + _867;
    float _943 = (((_648.z - _753) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _753;
    float _947 = ((_781.z - _943) * cbMtdParam._m0[19u].w) + _943;
    vec4 _961 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _308) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _309) + cbTextureTilingScale._m0[15u].w));
    float _968 = (_961.x * 2.0) + (-1.0);
    float _969 = (_961.y * 2.0) + (-1.0);
    float _970 = dot(vec2(_968, _969), vec2(_968, _969));
    float _4096 = isnan(0.0) ? _970 : (isnan(_970) ? 0.0 : max(_970, 0.0));
    float _978 = ((_961.z - _947) * _856) + _947;
    float _981 = ((cbMtdParam._m0[23u].y - _978) * _928) + _978;
    vec4 _1002 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _883) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _884) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _1008 = (_1002.x * 2.0) + (-1.0);
    float _1009 = (_1002.y * 2.0) + (-1.0);
    float _1010 = dot(vec2(_1008, _1009), vec2(_1008, _1009));
    float _4107 = isnan(0.0) ? _1010 : (isnan(_1010) ? 0.0 : max(_1010, 0.0));
    float _1025 = ((sqrt(1.0 - (isnan(1.0) ? _4096 : (isnan(_4096) ? 1.0 : min(_4096, 1.0)))) - _763) * _858) + _763;
    float _1028 = (((_968 - _793) * _856) + _793) + (cbMtdParam._m0[21u].x * _793);
    float _1029 = (((_969 - _794) * _857) + _794) + (cbMtdParam._m0[21u].x * _794);
    float _1040 = (((_1008 - _1028) + (_1028 * cbMtdParam._m0[22u].z)) * _928) + _1028;
    float _1041 = (((_1009 - _1029) + (_1029 * cbMtdParam._m0[22u].z)) * _928) + _1029;
    float _1042 = (_928 * (sqrt(1.0 - (isnan(1.0) ? _4107 : (isnan(_4107) ? 1.0 : min(_4107, 1.0)))) - _1025)) + _1025;
    float _1044 = cbMtdParam._m0[22u].x + _781.w;
    float _1047 = fma(_1042, _258, fma(_1041, _265, _1040 * _251));
    float _1050 = fma(_1042, _259, fma(_1041, _266, _1040 * _252));
    float _1053 = fma(_1042, _260, fma(_1041, _267, _1040 * _253));
    float _1057 = inversesqrt(dot(vec3(_1047, _1050, _1053), vec3(_1047, _1050, _1053)));
    float _1058 = _1057 * _1047;
    float _1059 = _1057 * _1050;
    float _1060 = _1057 * _1053;
    float _4118 = isnan(0.0) ? _981 : (isnan(_981) ? 0.0 : max(_981, 0.0));
    float _1061 = isnan(1.0) ? _4118 : (isnan(_4118) ? 1.0 : min(_4118, 1.0));
    float _4129 = isnan(0.0) ? _1044 : (isnan(_1044) ? 0.0 : max(_1044, 0.0));
    float _4140 = isnan(0.0) ? _936 : (isnan(_936) ? 0.0 : max(_936, 0.0));
    float _4151 = isnan(0.0) ? _937 : (isnan(_937) ? 0.0 : max(_937, 0.0));
    float _4162 = isnan(0.0) ? _938 : (isnan(_938) ? 0.0 : max(_938, 0.0));
    float _1079 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _1120 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _1130 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _1120);
    float _1131 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _1120);
    float _1132 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _1120);
    float _1136 = inversesqrt(dot(vec3(_1130, _1131, _1132), vec3(_1130, _1131, _1132)));
    float _1137 = _1130 * _1136;
    float _1138 = _1131 * _1136;
    float _1139 = _1132 * _1136;
    vec4 _1144 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _1146 = _1144.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1300 = sqrt(((_1130 * _1130) + (_1131 * _1131)) + (_1132 * _1132));
        float _1306 = (cbMatDynParam._m0[5u].x * _1300) + cbMatDynParam._m0[5u].y;
        float _4173 = isnan(0.0) ? _1306 : (isnan(_1306) ? 0.0 : max(_1306, 0.0));
        float _1307 = isnan(1.0) ? _4173 : (isnan(_4173) ? 1.0 : min(_4173, 1.0));
        float _1311 = (cbMatDynParam._m0[5u].z * _1300) + cbMatDynParam._m0[5u].w;
        float _4184 = isnan(0.0) ? _1311 : (isnan(_1311) ? 0.0 : max(_1311, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4184 : (isnan(_4184) ? 1.0 : min(_4184, 1.0))) - _1307)) + _1307) < ((_1146 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _1157 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1158 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1176 = fma(_1060, cbSceneParam._m0[5u].z, fma(_1059, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _1058));
    float _1179 = fma(_1060, cbSceneParam._m0[6u].z, fma(_1059, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _1058));
    float _1182 = fma(_1060, cbSceneParam._m0[7u].z, fma(_1059, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _1058));
    uint _1195 = _289 + 9u;
    uint _1196 = _1195 + uint(cbMatDynParam._m0[0u].w);
    float _1202 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4140 : (isnan(_4140) ? 1.0 : min(_4140, 1.0)))) * cbInstanceData._m0[_1196].x;
    float _1203 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4151 : (isnan(_4151) ? 1.0 : min(_4151, 1.0)))) * cbInstanceData._m0[_1196].y;
    float _1204 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4162 : (isnan(_4162) ? 1.0 : min(_4162, 1.0)))) * cbInstanceData._m0[_1196].z;
    float _4195 = isnan(0.0) ? _1202 : (isnan(_1202) ? 0.0 : max(_1202, 0.0));
    float _1205 = isnan(1.0) ? _4195 : (isnan(_4195) ? 1.0 : min(_4195, 1.0));
    float _4206 = isnan(0.0) ? _1203 : (isnan(_1203) ? 0.0 : max(_1203, 0.0));
    float _1206 = isnan(1.0) ? _4206 : (isnan(_4206) ? 1.0 : min(_4206, 1.0));
    float _4217 = isnan(0.0) ? _1204 : (isnan(_1204) ? 0.0 : max(_1204, 0.0));
    float _1207 = isnan(1.0) ? _4217 : (isnan(_4217) ? 1.0 : min(_4217, 1.0));
    vec4 _1216 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1157, cbSceneParam._m0[86u].y * _1158));
    float _1220 = ((isnan(1.0) ? _4129 : (isnan(_4129) ? 1.0 : min(_4129, 1.0))) * TEXCOORD_5.w) * _1216.x;
    float _1221 = dot(vec3(_1058, _1059, _1060), vec3(_1137, _1138, _1139));
    float _1224 = _1221 * 2.0;
    float _1228 = (_1224 * _1058) - _1137;
    float _1229 = (_1224 * _1059) - _1138;
    float _1230 = (_1224 * _1060) - _1139;
    float _1234 = abs(dot(vec3(_1137, _1138, _1139), vec3(_1058, _1059, _1060)));
    float _4228 = isnan(0.0) ? _1234 : (isnan(_1234) ? 0.0 : max(_1234, 0.0));
    float _1236 = sqrt(_1061);
    float _1249 = exp2((_1236 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4228 : (isnan(_4228) ? 1.0 : min(_4228, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1236 * 3.0));
    float _1281 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1285 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1289 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1618;
    float _1620;
    float _1621;
    float _1622;
    float _1623;
    float _1624;
    float _1625;
    float _1626;
    float _1627;
    float _1628;
    float _1629;
    float _1630;
    float _1631;
    float _1632;
    float _1633;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1343 = fma(_1289, cbModelParam._m0[26u].z, fma(_1285, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1281));
        float _1347 = fma(_1289, cbModelParam._m0[27u].z, fma(_1285, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1281));
        float _1351 = fma(_1289, cbModelParam._m0[28u].z, fma(_1285, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1281));
        float _1376 = _1281 + _1058;
        float _1377 = _1285 + _1059;
        float _1378 = _1289 + _1060;
        float _1388 = fma(_1378, cbModelParam._m0[26u].z, fma(_1377, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1376)) - _1343;
        float _1389 = fma(_1378, cbModelParam._m0[27u].z, fma(_1377, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1376)) - _1347;
        float _1390 = fma(_1378, cbModelParam._m0[28u].z, fma(_1377, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1376)) - _1351;
        float _1394 = inversesqrt(dot(vec3(_1388, _1389, _1390), vec3(_1388, _1389, _1390)));
        float _1407 = ((_1394 * _1388) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1343 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1408 = ((_1394 * _1389) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1347 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1409 = ((_1394 * _1390) / cbModelParam._m0[34u].z) + ((((((_1351 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1412 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1407, _1408, _1409), 0.0);
        vec4 _1419 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1407, _1408, _1409), 0.0);
        vec4 _1426 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1407, _1408, _1409), 0.0);
        vec4 _1433 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1407, _1408, _1409), 0.0);
        float _1446 = exp2((_1412.w + (-0.5)) * 20.0) * 2.0;
        float _1447 = _1446 * (_1412.x + (-0.5));
        float _1448 = _1446 * (_1412.y + (-0.5));
        float _1449 = _1446 * (_1412.z + (-0.5));
        float _1456 = exp2((_1419.w + (-0.5)) * 20.0) * 2.0;
        float _1457 = _1456 * (_1419.x + (-0.5));
        float _1458 = _1456 * (_1419.y + (-0.5));
        float _1459 = _1456 * (_1419.z + (-0.5));
        float _1466 = exp2((_1426.w + (-0.5)) * 20.0) * 2.0;
        float _1467 = _1466 * (_1426.x + (-0.5));
        float _1468 = _1466 * (_1426.y + (-0.5));
        float _1469 = _1466 * (_1426.z + (-0.5));
        float _1476 = exp2((_1433.w + (-0.5)) * 20.0) * 2.0;
        float _1477 = _1476 * (_1433.x + (-0.5));
        float _1478 = _1476 * (_1433.y + (-0.5));
        float _1479 = _1476 * (_1433.z + (-0.5));
        float _1480 = isnan(0.0) ? _1477 : (isnan(_1477) ? 0.0 : max(_1477, 0.0));
        float _1481 = isnan(0.0) ? _1478 : (isnan(_1478) ? 0.0 : max(_1478, 0.0));
        float _1482 = isnan(0.0) ? _1479 : (isnan(_1479) ? 0.0 : max(_1479, 0.0));
        float _1483 = _1447 * 0.5;
        float _1484 = _1457 * 0.5;
        float _1485 = _1467 * 0.5;
        float _1486 = dot(vec3(_1483, _1484, _1485), vec3(_1483, _1484, _1485));
        float _1491 = (_1486 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1486);
        float _1500 = (dot(vec3(_1058, _1059, _1060), vec3(_1491 * _1483, _1491 * _1484, _1491 * _1485)) + 1.0) * 0.5;
        float _4254 = isnan(0.0) ? _1500 : (isnan(_1500) ? 0.0 : max(_1500, 0.0));
        float _1510 = sqrt(((_1484 * _1484) + (_1483 * _1483)) + (_1485 * _1485)) / (_1480 + 9.9999997473787516355514526367188e-06);
        float _4265 = isnan(0.0) ? _1510 : (isnan(_1510) ? 0.0 : max(_1510, 0.0));
        float _1511 = isnan(1.0) ? _4265 : (isnan(_4265) ? 1.0 : min(_4265, 1.0));
        float _1512 = _1511 * 2.0;
        float _1516 = (1.0 - _1511) / (_1511 + 1.0);
        float _4276 = isnan(0.0) ? _1516 : (isnan(_1516) ? 0.0 : max(_1516, 0.0));
        float _1517 = isnan(1.0) ? _4276 : (isnan(_4276) ? 1.0 : min(_4276, 1.0));
        float _1526 = ((((1.0 - _1517) * (_1512 + 2.0)) * exp2(log2(isnan(1.0) ? _4254 : (isnan(_4254) ? 1.0 : min(_4254, 1.0))) * (_1512 + 1.0))) + _1517) * _1480;
        float _1527 = _1448 * 0.5;
        float _1528 = _1458 * 0.5;
        float _1529 = _1468 * 0.5;
        float _1530 = dot(vec3(_1527, _1528, _1529), vec3(_1527, _1528, _1529));
        float _1535 = (_1530 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1530);
        float _1543 = (dot(vec3(_1058, _1059, _1060), vec3(_1535 * _1527, _1535 * _1528, _1535 * _1529)) + 1.0) * 0.5;
        float _4287 = isnan(0.0) ? _1543 : (isnan(_1543) ? 0.0 : max(_1543, 0.0));
        float _1552 = sqrt(((_1528 * _1528) + (_1527 * _1527)) + (_1529 * _1529)) / (_1481 + 9.9999997473787516355514526367188e-06);
        float _4298 = isnan(0.0) ? _1552 : (isnan(_1552) ? 0.0 : max(_1552, 0.0));
        float _1553 = isnan(1.0) ? _4298 : (isnan(_4298) ? 1.0 : min(_4298, 1.0));
        float _1554 = _1553 * 2.0;
        float _1558 = (1.0 - _1553) / (_1553 + 1.0);
        float _4309 = isnan(0.0) ? _1558 : (isnan(_1558) ? 0.0 : max(_1558, 0.0));
        float _1559 = isnan(1.0) ? _4309 : (isnan(_4309) ? 1.0 : min(_4309, 1.0));
        float _1568 = ((((1.0 - _1559) * (_1554 + 2.0)) * exp2(log2(isnan(1.0) ? _4287 : (isnan(_4287) ? 1.0 : min(_4287, 1.0))) * (_1554 + 1.0))) + _1559) * _1481;
        float _1569 = _1449 * 0.5;
        float _1570 = _1459 * 0.5;
        float _1571 = _1469 * 0.5;
        float _1572 = dot(vec3(_1569, _1570, _1571), vec3(_1569, _1570, _1571));
        float _1577 = (_1572 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1572);
        float _1585 = (dot(vec3(_1058, _1059, _1060), vec3(_1577 * _1569, _1577 * _1570, _1577 * _1571)) + 1.0) * 0.5;
        float _4320 = isnan(0.0) ? _1585 : (isnan(_1585) ? 0.0 : max(_1585, 0.0));
        float _1594 = sqrt(((_1570 * _1570) + (_1569 * _1569)) + (_1571 * _1571)) / (_1482 + 9.9999997473787516355514526367188e-06);
        float _4331 = isnan(0.0) ? _1594 : (isnan(_1594) ? 0.0 : max(_1594, 0.0));
        float _1595 = isnan(1.0) ? _4331 : (isnan(_4331) ? 1.0 : min(_4331, 1.0));
        float _1596 = _1595 * 2.0;
        float _1600 = (1.0 - _1595) / (_1595 + 1.0);
        float _4342 = isnan(0.0) ? _1600 : (isnan(_1600) ? 0.0 : max(_1600, 0.0));
        float _1601 = isnan(1.0) ? _4342 : (isnan(_4342) ? 1.0 : min(_4342, 1.0));
        float _1610 = ((((1.0 - _1601) * (_1596 + 2.0)) * exp2(log2(isnan(1.0) ? _4320 : (isnan(_4320) ? 1.0 : min(_4320, 1.0))) * (_1596 + 1.0))) + _1601) * _1482;
        _1618 = _1449;
        _1620 = _1448;
        _1621 = _1447;
        _1622 = _1459;
        _1623 = _1458;
        _1624 = _1457;
        _1625 = _1469;
        _1626 = _1468;
        _1627 = _1467;
        _1628 = _1482;
        _1629 = _1481;
        _1630 = _1480;
        _1631 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1526 : (isnan(_1526) ? 0.0 : max(_1526, 0.0)));
        _1632 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1568 : (isnan(_1568) ? 0.0 : max(_1568, 0.0)));
        _1633 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1610 : (isnan(_1610) ? 0.0 : max(_1610, 0.0)));
    }
    else
    {
        _1618 = _1619;
        _1620 = _1619;
        _1621 = _1619;
        _1622 = _1619;
        _1623 = _1619;
        _1624 = _1619;
        _1625 = _1619;
        _1626 = _1619;
        _1627 = _1619;
        _1628 = _1619;
        _1629 = _1619;
        _1630 = _1619;
        _1631 = 0.0;
        _1632 = 0.0;
        _1633 = 0.0;
    }
    float _1928;
    float _1929;
    float _1930;
    float _1931;
    float _1932;
    float _1933;
    float _1934;
    float _1935;
    float _1936;
    float _1937;
    float _1938;
    float _1939;
    float _1940;
    float _1941;
    float _1942;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1659 = fma(_1289, cbModelParam._m0[30u].z, fma(_1285, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1281));
        float _1663 = fma(_1289, cbModelParam._m0[31u].z, fma(_1285, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1281));
        float _1667 = fma(_1289, cbModelParam._m0[32u].z, fma(_1285, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1281));
        float _1690 = _1281 + _1058;
        float _1691 = _1285 + _1059;
        float _1692 = _1289 + _1060;
        float _1702 = fma(_1692, cbModelParam._m0[30u].z, fma(_1691, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1690)) - _1659;
        float _1703 = fma(_1692, cbModelParam._m0[31u].z, fma(_1691, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1690)) - _1663;
        float _1704 = fma(_1692, cbModelParam._m0[32u].z, fma(_1691, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1690)) - _1667;
        float _1708 = inversesqrt(dot(vec3(_1702, _1703, _1704), vec3(_1702, _1703, _1704)));
        float _1721 = ((_1708 * _1702) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1659 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1722 = ((_1708 * _1703) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1663 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1723 = ((_1708 * _1704) / cbModelParam._m0[35u].z) + ((((((_1667 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1725 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1721, _1722, _1723), 0.0);
        vec4 _1732 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1721, _1722, _1723), 0.0);
        vec4 _1739 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1721, _1722, _1723), 0.0);
        vec4 _1746 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1721, _1722, _1723), 0.0);
        float _1758 = exp2((_1725.w + (-0.5)) * 20.0) * 2.0;
        float _1759 = _1758 * (_1725.x + (-0.5));
        float _1760 = _1758 * (_1725.y + (-0.5));
        float _1761 = _1758 * (_1725.z + (-0.5));
        float _1768 = exp2((_1732.w + (-0.5)) * 20.0) * 2.0;
        float _1769 = _1768 * (_1732.x + (-0.5));
        float _1770 = _1768 * (_1732.y + (-0.5));
        float _1771 = _1768 * (_1732.z + (-0.5));
        float _1778 = exp2((_1739.w + (-0.5)) * 20.0) * 2.0;
        float _1779 = _1778 * (_1739.x + (-0.5));
        float _1780 = _1778 * (_1739.y + (-0.5));
        float _1781 = _1778 * (_1739.z + (-0.5));
        float _1788 = exp2((_1746.w + (-0.5)) * 20.0) * 2.0;
        float _1789 = _1788 * (_1746.x + (-0.5));
        float _1790 = _1788 * (_1746.y + (-0.5));
        float _1791 = _1788 * (_1746.z + (-0.5));
        float _1792 = isnan(0.0) ? _1789 : (isnan(_1789) ? 0.0 : max(_1789, 0.0));
        float _1793 = isnan(0.0) ? _1790 : (isnan(_1790) ? 0.0 : max(_1790, 0.0));
        float _1794 = isnan(0.0) ? _1791 : (isnan(_1791) ? 0.0 : max(_1791, 0.0));
        float _1795 = _1759 * 0.5;
        float _1796 = _1769 * 0.5;
        float _1797 = _1779 * 0.5;
        float _1798 = dot(vec3(_1795, _1796, _1797), vec3(_1795, _1796, _1797));
        float _1803 = (_1798 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1798);
        float _1811 = (dot(vec3(_1058, _1059, _1060), vec3(_1803 * _1795, _1803 * _1796, _1803 * _1797)) + 1.0) * 0.5;
        float _4383 = isnan(0.0) ? _1811 : (isnan(_1811) ? 0.0 : max(_1811, 0.0));
        float _1820 = sqrt(((_1796 * _1796) + (_1795 * _1795)) + (_1797 * _1797)) / (_1792 + 9.9999997473787516355514526367188e-06);
        float _4394 = isnan(0.0) ? _1820 : (isnan(_1820) ? 0.0 : max(_1820, 0.0));
        float _1821 = isnan(1.0) ? _4394 : (isnan(_4394) ? 1.0 : min(_4394, 1.0));
        float _1822 = _1821 * 2.0;
        float _1826 = (1.0 - _1821) / (_1821 + 1.0);
        float _4405 = isnan(0.0) ? _1826 : (isnan(_1826) ? 0.0 : max(_1826, 0.0));
        float _1827 = isnan(1.0) ? _4405 : (isnan(_4405) ? 1.0 : min(_4405, 1.0));
        float _1836 = ((((1.0 - _1827) * (_1822 + 2.0)) * exp2(log2(isnan(1.0) ? _4383 : (isnan(_4383) ? 1.0 : min(_4383, 1.0))) * (_1822 + 1.0))) + _1827) * _1792;
        float _1837 = _1760 * 0.5;
        float _1838 = _1770 * 0.5;
        float _1839 = _1780 * 0.5;
        float _1840 = dot(vec3(_1837, _1838, _1839), vec3(_1837, _1838, _1839));
        float _1845 = (_1840 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1840);
        float _1853 = (dot(vec3(_1058, _1059, _1060), vec3(_1845 * _1837, _1845 * _1838, _1845 * _1839)) + 1.0) * 0.5;
        float _4416 = isnan(0.0) ? _1853 : (isnan(_1853) ? 0.0 : max(_1853, 0.0));
        float _1862 = sqrt(((_1838 * _1838) + (_1837 * _1837)) + (_1839 * _1839)) / (_1793 + 9.9999997473787516355514526367188e-06);
        float _4427 = isnan(0.0) ? _1862 : (isnan(_1862) ? 0.0 : max(_1862, 0.0));
        float _1863 = isnan(1.0) ? _4427 : (isnan(_4427) ? 1.0 : min(_4427, 1.0));
        float _1864 = _1863 * 2.0;
        float _1868 = (1.0 - _1863) / (_1863 + 1.0);
        float _4438 = isnan(0.0) ? _1868 : (isnan(_1868) ? 0.0 : max(_1868, 0.0));
        float _1869 = isnan(1.0) ? _4438 : (isnan(_4438) ? 1.0 : min(_4438, 1.0));
        float _1878 = ((((1.0 - _1869) * (_1864 + 2.0)) * exp2(log2(isnan(1.0) ? _4416 : (isnan(_4416) ? 1.0 : min(_4416, 1.0))) * (_1864 + 1.0))) + _1869) * _1793;
        float _1879 = _1761 * 0.5;
        float _1880 = _1771 * 0.5;
        float _1881 = _1781 * 0.5;
        float _1882 = dot(vec3(_1879, _1880, _1881), vec3(_1879, _1880, _1881));
        float _1887 = (_1882 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1882);
        float _1895 = (dot(vec3(_1058, _1059, _1060), vec3(_1887 * _1879, _1887 * _1880, _1887 * _1881)) + 1.0) * 0.5;
        float _4449 = isnan(0.0) ? _1895 : (isnan(_1895) ? 0.0 : max(_1895, 0.0));
        float _1904 = sqrt(((_1880 * _1880) + (_1879 * _1879)) + (_1881 * _1881)) / (_1794 + 9.9999997473787516355514526367188e-06);
        float _4460 = isnan(0.0) ? _1904 : (isnan(_1904) ? 0.0 : max(_1904, 0.0));
        float _1905 = isnan(1.0) ? _4460 : (isnan(_4460) ? 1.0 : min(_4460, 1.0));
        float _1906 = _1905 * 2.0;
        float _1910 = (1.0 - _1905) / (_1905 + 1.0);
        float _4471 = isnan(0.0) ? _1910 : (isnan(_1910) ? 0.0 : max(_1910, 0.0));
        float _1911 = isnan(1.0) ? _4471 : (isnan(_4471) ? 1.0 : min(_4471, 1.0));
        float _1920 = ((((1.0 - _1911) * (_1906 + 2.0)) * exp2(log2(isnan(1.0) ? _4449 : (isnan(_4449) ? 1.0 : min(_4449, 1.0))) * (_1906 + 1.0))) + _1911) * _1794;
        _1928 = _1761;
        _1929 = _1760;
        _1930 = _1759;
        _1931 = _1771;
        _1932 = _1770;
        _1933 = _1769;
        _1934 = _1781;
        _1935 = _1780;
        _1936 = _1779;
        _1937 = _1794;
        _1938 = _1793;
        _1939 = _1792;
        _1940 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1836 : (isnan(_1836) ? 0.0 : max(_1836, 0.0)));
        _1941 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1878 : (isnan(_1878) ? 0.0 : max(_1878, 0.0)));
        _1942 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1920 : (isnan(_1920) ? 0.0 : max(_1920, 0.0)));
    }
    else
    {
        _1928 = _1619;
        _1929 = _1619;
        _1930 = _1619;
        _1931 = _1619;
        _1932 = _1619;
        _1933 = _1619;
        _1934 = _1619;
        _1935 = _1619;
        _1936 = _1619;
        _1937 = _1619;
        _1938 = _1619;
        _1939 = _1619;
        _1940 = 0.0;
        _1941 = 0.0;
        _1942 = 0.0;
    }
    float _1952 = (cbModelParam._m0[1u].x * (_1940 - _1631)) + _1631;
    float _1953 = (cbModelParam._m0[1u].x * (_1941 - _1632)) + _1632;
    float _1954 = (cbModelParam._m0[1u].x * (_1942 - _1633)) + _1633;
    float _1975 = fma(_1954, cbSceneParam._m0[89u].z, fma(_1953, cbSceneParam._m0[89u].y, _1952 * cbSceneParam._m0[89u].x));
    float _1978 = fma(_1954, cbSceneParam._m0[90u].z, fma(_1953, cbSceneParam._m0[90u].y, _1952 * cbSceneParam._m0[90u].x));
    float _1981 = fma(_1954, cbSceneParam._m0[91u].z, fma(_1953, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1952));
    float _1996 = _1228 * 0.5;
    float _1997 = _1229 * 0.5;
    float _1998 = _1230 * 0.5;
    float _1999 = dot(vec4(_1996, _1997, _1998, 1.0), vec4(_1930, _1933, _1936, _1939));
    float _2002 = dot(vec4(_1996, _1997, _1998, 1.0), vec4(_1929, _1932, _1935, _1938));
    float _2005 = dot(vec4(_1996, _1997, _1998, 1.0), vec4(_1928, _1931, _1934, _1937));
    float _2039;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _2012 = dot(vec4(_1996, _1997, _1998, 1.0), vec4(_1618, _1622, _1625, _1628));
        float _2016 = dot(vec4(_1996, _1997, _1998, 1.0), vec4(_1620, _1623, _1626, _1629));
        float _2020 = dot(vec4(_1996, _1997, _1998, 1.0), vec4(_1621, _1624, _1627, _1630));
        float _2027 = dot(vec4(cbModelParam._m0[39u]), vec4(_1996, _1997, _1998, 1.0));
        _2039 = dot(vec3(isnan(0.0) ? _2020 : (isnan(_2020) ? 0.0 : max(_2020, 0.0)), isnan(0.0) ? _2016 : (isnan(_2016) ? 0.0 : max(_2016, 0.0)), isnan(0.0) ? _2012 : (isnan(_2012) ? 0.0 : max(_2012, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_2027) ? 0.0 : (isnan(0.0) ? _2027 : max(0.0, _2027))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _2039 = 1.0;
    }
    float _2050;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _2041 = dot(vec4(cbModelParam._m0[40u]), vec4(_1996, _1997, _1998, 1.0));
        _2050 = dot(vec3(isnan(0.0) ? _1999 : (isnan(_1999) ? 0.0 : max(_1999, 0.0)), isnan(0.0) ? _2002 : (isnan(_2002) ? 0.0 : max(_2002, 0.0)), isnan(0.0) ? _2005 : (isnan(_2005) ? 0.0 : max(_2005, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_2041) ? 0.0 : (isnan(0.0) ? _2041 : max(0.0, _2041))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _2050 = 1.0;
    }
    float _2054 = (_2050 * cbModelParam._m0[1u].x) + (_2039 * (1.0 - cbModelParam._m0[1u].x));
    float _2064 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _1061);
    float _2065 = isnan(_2064) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _2064 : min(cbModelParam._m0[25u].z, _2064));
    float _2145;
    float _2147;
    float _2149;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _2112 = fma(_1289, cbModelParam._m0[13u].z, fma(_1285, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1281)) + cbModelParam._m0[13u].w;
        float _2116 = fma(_1289, cbModelParam._m0[14u].z, fma(_1285, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1281)) + cbModelParam._m0[14u].w;
        float _2120 = fma(_1289, cbModelParam._m0[15u].z, fma(_1285, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1281)) + cbModelParam._m0[15u].w;
        float _2123 = fma(_1230, cbModelParam._m0[13u].z, fma(_1229, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1228));
        float _2126 = fma(_1230, cbModelParam._m0[14u].z, fma(_1229, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1228));
        float _2129 = fma(_1230, cbModelParam._m0[15u].z, fma(_1229, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1228));
        float _2157;
        if (_2123 > 0.0)
        {
            _2157 = abs((1.0 - _2112) / _2123);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_2123 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_2112 + 1.0) / _2123);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _2157 = frontier_phi_17_15_ladder;
        }
        float _2358;
        if (_2126 > 0.0)
        {
            _2358 = abs((1.0 - _2116) / _2126);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_2126 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_2116 + 1.0) / _2126);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2358 = frontier_phi_26_22_ladder;
        }
        float _2601;
        if (_2129 > 0.0)
        {
            _2601 = abs((1.0 - _2120) / _2129);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_2129 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_2120 + 1.0) / _2129);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2601 = frontier_phi_38_33_ladder;
        }
        float _2603 = isnan(_2358) ? _2157 : (isnan(_2157) ? _2358 : min(_2157, _2358));
        float _2604 = isnan(_2601) ? _2603 : (isnan(_2603) ? _2601 : min(_2603, _2601));
        float _2608 = (_2604 * _2123) + _2112;
        float _2609 = (_2604 * _2126) + _2116;
        float _2610 = (_2604 * _2129) + _2120;
        float _2611 = _2604 * 9.9999997473787516355514526367188e-05;
        float _2613 = (-1.0) - _2611;
        float _2615 = _2611 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2610 > _2615) || ((_2610 < _2613) || ((_2609 > _2615) || ((_2609 < _2613) || ((_2608 < _2613) || (_2608 > _2615))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2734 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2610, cbModelParam._m0[9u].z, fma(_2609, cbModelParam._m0[9u].y, _2608 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2610, cbModelParam._m0[10u].z, fma(_2609, cbModelParam._m0[10u].y, _2608 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2610, cbModelParam._m0[11u].z, fma(_2609, cbModelParam._m0[11u].y, _2608 * cbModelParam._m0[11u].x))), _2065);
            frontier_phi_16_38_ladder = _2734.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2734.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2734.x * cbModelParam._m0[1u].y;
        }
        _2145 = frontier_phi_16_38_ladder_2;
        _2147 = frontier_phi_16_38_ladder_1;
        _2149 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _2133 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1228, _1229, _1230), _2065);
        _2145 = _2133.x * cbModelParam._m0[1u].y;
        _2147 = _2133.y * cbModelParam._m0[1u].y;
        _2149 = _2133.z * cbModelParam._m0[1u].y;
    }
    float _2153 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _1061);
    float _2154 = isnan(_2153) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2153 : min(cbModelParam._m0[25u].w, _2153));
    float _2244;
    float _2246;
    float _2248;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2208 = fma(_1289, cbModelParam._m0[21u].z, fma(_1285, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1281)) + cbModelParam._m0[21u].w;
        float _2212 = fma(_1289, cbModelParam._m0[22u].z, fma(_1285, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1281)) + cbModelParam._m0[22u].w;
        float _2216 = fma(_1289, cbModelParam._m0[23u].z, fma(_1285, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1281)) + cbModelParam._m0[23u].w;
        float _2219 = fma(_1230, cbModelParam._m0[21u].z, fma(_1229, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1228));
        float _2222 = fma(_1230, cbModelParam._m0[22u].z, fma(_1229, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1228));
        float _2225 = fma(_1230, cbModelParam._m0[23u].z, fma(_1229, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1228));
        float _2363;
        if (_2219 > 0.0)
        {
            _2363 = abs((1.0 - _2208) / _2219);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_2219 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_2208 + 1.0) / _2219);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2363 = frontier_phi_28_24_ladder;
        }
        float _2628;
        if (_2222 > 0.0)
        {
            _2628 = abs((1.0 - _2212) / _2222);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_2222 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_2212 + 1.0) / _2222);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2628 = frontier_phi_40_35_ladder;
        }
        float _2833;
        if (_2225 > 0.0)
        {
            _2833 = abs((1.0 - _2216) / _2225);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_2225 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_2216 + 1.0) / _2225);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2833 = frontier_phi_49_46_ladder;
        }
        float _2835 = isnan(_2628) ? _2363 : (isnan(_2363) ? _2628 : min(_2363, _2628));
        float _2836 = isnan(_2833) ? _2835 : (isnan(_2835) ? _2833 : min(_2835, _2833));
        float _2840 = (_2836 * _2219) + _2208;
        float _2841 = (_2836 * _2222) + _2212;
        float _2842 = (_2836 * _2225) + _2216;
        float _2843 = _2836 * 9.9999997473787516355514526367188e-05;
        float _2844 = (-1.0) - _2843;
        float _2846 = _2843 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2842 > _2846) || ((_2842 < _2844) || ((_2841 > _2846) || ((_2841 < _2844) || ((_2840 < _2844) || (_2840 > _2846))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _3041 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2842, cbModelParam._m0[17u].z, fma(_2841, cbModelParam._m0[17u].y, _2840 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2842, cbModelParam._m0[18u].z, fma(_2841, cbModelParam._m0[18u].y, _2840 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2842, cbModelParam._m0[19u].z, fma(_2841, cbModelParam._m0[19u].y, _2840 * cbModelParam._m0[19u].x))), _2154);
            frontier_phi_25_49_ladder = _3041.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _3041.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _3041.x * cbModelParam._m0[1u].z;
        }
        _2244 = frontier_phi_25_49_ladder_2;
        _2246 = frontier_phi_25_49_ladder_1;
        _2248 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _2228 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1228, _1229, _1230), _2154);
        _2244 = _2228.x * cbModelParam._m0[1u].z;
        _2246 = _2228.y * cbModelParam._m0[1u].z;
        _2248 = _2228.z * cbModelParam._m0[1u].z;
    }
    float _2260 = ((((1.0 - _1249) * ((_1236 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_1249 * _1236)) * _1220;
    float _2261 = _2260 * ((cbModelParam._m0[1u].w * (_2244 - _2145)) + _2145);
    float _2262 = _2260 * ((cbModelParam._m0[1u].w * (_2246 - _2147)) + _2147);
    float _2263 = _2260 * ((cbModelParam._m0[1u].w * (_2248 - _2149)) + _2149);
    float _2266 = fma(_2263, cbSceneParam._m0[89u].z, fma(_2262, cbSceneParam._m0[89u].y, _2261 * cbSceneParam._m0[89u].x));
    float _2269 = fma(_2263, cbSceneParam._m0[90u].z, fma(_2262, cbSceneParam._m0[90u].y, _2261 * cbSceneParam._m0[90u].x));
    float _2272 = fma(_2263, cbSceneParam._m0[91u].z, fma(_2262, cbSceneParam._m0[91u].y, _2261 * cbSceneParam._m0[91u].x));
    uvec4 _2282 = floatBitsToUint(cbInstanceData._m0[_289 + 5u]);
    uint _2284 = _2282.x * 14u;
    uint _2285 = _2284 + 13u;
    float _2292 = _1220 + (-1.0);
    float _2297 = (cbLight._m0[_2285].x * _2292) + 1.0;
    float _2298 = (cbLight._m0[_2285].y * _2292) + 1.0;
    float _2299 = (cbLight._m0[_2285].z * _2292) + 1.0;
    float _2300 = (cbLight._m0[_2285].w * _2292) + 1.0;
    uint _2301 = _2284 + 5u;
    float _2307 = isnan(1.0) ? _2298 : (isnan(_2298) ? 1.0 : min(_2298, 1.0));
    uint _2311 = _2284 + 4u;
    float _2317 = isnan(1.0) ? _2297 : (isnan(_2297) ? 1.0 : min(_2297, 1.0));
    uint _2321 = _2284 | 1u;
    float _2332 = dot(vec3(cbLight._m0[_2284].xyz), vec3(_1058, _1059, _1060));
    float _2335 = dot(vec3(cbLight._m0[_2321].xyz), vec3(_1058, _1059, _1060));
    float _4607 = isnan(0.0) ? _2332 : (isnan(_2332) ? 0.0 : max(_2332, 0.0));
    float _4618 = isnan(0.0) ? _2335 : (isnan(_2335) ? 0.0 : max(_2335, 0.0));
    float _2340 = (isnan(1.0) ? _4607 : (isnan(_4607) ? 1.0 : min(_4607, 1.0))) * 0.3183098733425140380859375;
    float _2342 = (isnan(1.0) ? _4618 : (isnan(_4618) ? 1.0 : min(_4618, 1.0))) * 0.3183098733425140380859375;
    float _2349 = ((cbLight._m0[_2301].x * _2307) * _2342) + ((cbLight._m0[_2311].x * _2317) * _2340);
    float _2350 = ((_2307 * cbLight._m0[_2301].y) * _2342) + ((_2317 * cbLight._m0[_2311].y) * _2340);
    float _2351 = ((_2307 * cbLight._m0[_2301].z) * _2342) + ((_2317 * cbLight._m0[_2311].z) * _2340);
    uvec4 _2355 = floatBitsToUint(cbLight._m0[_2284 + 12u]);
    bool _2357 = _2355.x == 0u;
    float _2368;
    float _2370;
    float _2372;
    if (_2357)
    {
        _2368 = _2349;
        _2370 = _2350;
        _2372 = _2351;
    }
    else
    {
        uint _2376 = _2284 + 6u;
        float _2392 = (dot(vec3(cbLight._m0[_2284 + 2u].xyz), vec3(_1058, _1059, _1060)) * 0.5) + 0.5;
        float _2393 = _2392 * _2392;
        float _4629 = isnan(0.0) ? _2393 : (isnan(_2393) ? 0.0 : max(_2393, 0.0));
        float _2394 = isnan(1.0) ? _4629 : (isnan(_4629) ? 1.0 : min(_4629, 1.0));
        float _2395 = isnan(1.0) ? _2299 : (isnan(_2299) ? 1.0 : min(_2299, 1.0));
        _2368 = (((cbLight._m0[_2376].x * 0.3183098733425140380859375) * _2394) * _2395) + _2349;
        _2370 = (((cbLight._m0[_2376].y * 0.3183098733425140380859375) * _2394) * _2395) + _2350;
        _2372 = (((cbLight._m0[_2376].z * 0.3183098733425140380859375) * _2394) * _2395) + _2351;
    }
    bool _2375 = _2355.y == 0u;
    float _2413;
    float _2415;
    float _2417;
    if (_2375)
    {
        _2413 = _2368;
        _2415 = _2370;
        _2417 = _2372;
    }
    else
    {
        uint _2572 = _2284 + 7u;
        float _2588 = (dot(vec3(cbLight._m0[_2284 + 3u].xyz), vec3(_1058, _1059, _1060)) * 0.5) + 0.5;
        float _2589 = _2588 * _2588;
        float _4645 = isnan(0.0) ? _2589 : (isnan(_2589) ? 0.0 : max(_2589, 0.0));
        float _2590 = isnan(1.0) ? _4645 : (isnan(_4645) ? 1.0 : min(_4645, 1.0));
        float _2591 = isnan(1.0) ? _2300 : (isnan(_2300) ? 1.0 : min(_2300, 1.0));
        _2413 = (((cbLight._m0[_2572].x * 0.3183098733425140380859375) * _2590) * _2591) + _2368;
        _2415 = (((cbLight._m0[_2572].y * 0.3183098733425140380859375) * _2590) * _2591) + _2370;
        _2417 = (((cbLight._m0[_2572].z * 0.3183098733425140380859375) * _2590) * _2591) + _2372;
    }
    uint _2420 = _2284 + 8u;
    float _2433 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2284].w)) * _1061) * 0.949999988079071044921875);
    float _2434 = _2433 * _2433;
    float _2435 = cbLight._m0[_2284].x + _1137;
    float _2436 = cbLight._m0[_2284].y + _1138;
    float _2437 = cbLight._m0[_2284].z + _1139;
    float _2441 = inversesqrt(dot(vec3(_2435, _2436, _2437), vec3(_2435, _2436, _2437)));
    float _2442 = _2441 * _2435;
    float _2443 = _2441 * _2436;
    float _2444 = _2441 * _2437;
    float _2445 = dot(vec3(_1058, _1059, _1060), vec3(cbLight._m0[_2284].xyz));
    float _4661 = isnan(0.0) ? _2445 : (isnan(_2445) ? 0.0 : max(_2445, 0.0));
    float _2448 = isnan(1.0) ? _4661 : (isnan(_4661) ? 1.0 : min(_4661, 1.0));
    float _4672 = isnan(0.0) ? _1221 : (isnan(_1221) ? 0.0 : max(_1221, 0.0));
    float _2449 = isnan(1.0) ? _4672 : (isnan(_4672) ? 1.0 : min(_4672, 1.0));
    float _2450 = dot(vec3(_1058, _1059, _1060), vec3(_2442, _2443, _2444));
    float _4683 = isnan(0.0) ? _2450 : (isnan(_2450) ? 0.0 : max(_2450, 0.0));
    float _2453 = isnan(1.0) ? _4683 : (isnan(_4683) ? 1.0 : min(_4683, 1.0));
    float _2454 = dot(vec3(cbLight._m0[_2284].xyz), vec3(_2442, _2443, _2444));
    float _4694 = isnan(0.0) ? _2454 : (isnan(_2454) ? 0.0 : max(_2454, 0.0));
    float _2458 = _2434 * _2434;
    float _2462 = ((_2453 * _2453) * (_2458 + (-1.0))) + 1.0;
    float _2473 = (exp2(log2(1.0 - (isnan(1.0) ? _4694 : (isnan(_4694) ? 1.0 : min(_4694, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2474 = 1.0 - _2434;
    float _2485 = (0.5 / (((_2449 * ((_2448 * _2474) + _2434)) + 9.9999999392252902907785028219223e-09) + (((_2449 * _2474) + _2434) * _2448))) * _2448;
    float _4705 = isnan(0.0) ? _2485 : (isnan(_2485) ? 0.0 : max(_2485, 0.0));
    float _2487 = (isnan(1.0) ? _4705 : (isnan(_4705) ? 1.0 : min(_4705, 1.0))) * (_2458 / ((_2462 * _2462) * 3.141590118408203125));
    uint _2498 = _2284 + 9u;
    float _2509 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2321].w)) * _1061) * 0.949999988079071044921875);
    float _2510 = _2509 * _2509;
    float _2511 = cbLight._m0[_2321].x + _1137;
    float _2512 = cbLight._m0[_2321].y + _1138;
    float _2513 = cbLight._m0[_2321].z + _1139;
    float _2517 = inversesqrt(dot(vec3(_2511, _2512, _2513), vec3(_2511, _2512, _2513)));
    float _2518 = _2517 * _2511;
    float _2519 = _2517 * _2512;
    float _2520 = _2517 * _2513;
    float _2521 = dot(vec3(_1058, _1059, _1060), vec3(cbLight._m0[_2321].xyz));
    float _4716 = isnan(0.0) ? _2521 : (isnan(_2521) ? 0.0 : max(_2521, 0.0));
    float _2524 = isnan(1.0) ? _4716 : (isnan(_4716) ? 1.0 : min(_4716, 1.0));
    float _2525 = dot(vec3(_1058, _1059, _1060), vec3(_2518, _2519, _2520));
    float _4727 = isnan(0.0) ? _2525 : (isnan(_2525) ? 0.0 : max(_2525, 0.0));
    float _2528 = isnan(1.0) ? _4727 : (isnan(_4727) ? 1.0 : min(_4727, 1.0));
    float _2529 = dot(vec3(cbLight._m0[_2321].xyz), vec3(_2518, _2519, _2520));
    float _4738 = isnan(0.0) ? _2529 : (isnan(_2529) ? 0.0 : max(_2529, 0.0));
    float _2533 = _2510 * _2510;
    float _2537 = ((_2528 * _2528) * (_2533 + (-1.0))) + 1.0;
    float _2546 = (exp2(log2(1.0 - (isnan(1.0) ? _4738 : (isnan(_4738) ? 1.0 : min(_4738, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2547 = 1.0 - _2510;
    float _2557 = (0.5 / (((_2449 * ((_2524 * _2547) + _2510)) + 9.9999999392252902907785028219223e-09) + (((_2449 * _2547) + _2510) * _2524))) * _2524;
    float _4749 = isnan(0.0) ? _2557 : (isnan(_2557) ? 0.0 : max(_2557, 0.0));
    float _2559 = (isnan(1.0) ? _4749 : (isnan(_4749) ? 1.0 : min(_4749, 1.0))) * (_2533 / ((_2537 * _2537) * 3.141590118408203125));
    float _2569 = (((_2546 * cbLight._m0[_2498].x) * _2559) * _2307) + (((_2473 * cbLight._m0[_2420].x) * _2487) * _2317);
    float _2570 = (((_2546 * cbLight._m0[_2498].y) * _2559) * _2307) + (((_2473 * cbLight._m0[_2420].y) * _2487) * _2317);
    float _2571 = (((_2546 * cbLight._m0[_2498].z) * _2559) * _2307) + (((_2473 * cbLight._m0[_2420].z) * _2487) * _2317);
    float _2633;
    float _2635;
    float _2637;
    if (_2357)
    {
        _2633 = _2569;
        _2635 = _2570;
        _2637 = _2571;
    }
    else
    {
        uint _2639 = _2284 + 2u;
        uint _2643 = _2284 + 10u;
        float _2657 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2639].w)) * _1061) * 0.949999988079071044921875);
        float _2658 = _2657 * _2657;
        float _2659 = cbLight._m0[_2639].x + _1137;
        float _2660 = cbLight._m0[_2639].y + _1138;
        float _2661 = cbLight._m0[_2639].z + _1139;
        float _2665 = inversesqrt(dot(vec3(_2659, _2660, _2661), vec3(_2659, _2660, _2661)));
        float _2666 = _2665 * _2659;
        float _2667 = _2665 * _2660;
        float _2668 = _2665 * _2661;
        float _2669 = dot(vec3(_1058, _1059, _1060), vec3(cbLight._m0[_2639].xyz));
        float _4760 = isnan(0.0) ? _2669 : (isnan(_2669) ? 0.0 : max(_2669, 0.0));
        float _2672 = isnan(1.0) ? _4760 : (isnan(_4760) ? 1.0 : min(_4760, 1.0));
        float _2673 = dot(vec3(_1058, _1059, _1060), vec3(_2666, _2667, _2668));
        float _4771 = isnan(0.0) ? _2673 : (isnan(_2673) ? 0.0 : max(_2673, 0.0));
        float _2676 = isnan(1.0) ? _4771 : (isnan(_4771) ? 1.0 : min(_4771, 1.0));
        float _2677 = dot(vec3(cbLight._m0[_2639].xyz), vec3(_2666, _2667, _2668));
        float _4782 = isnan(0.0) ? _2677 : (isnan(_2677) ? 0.0 : max(_2677, 0.0));
        float _2681 = _2658 * _2658;
        float _2685 = ((_2676 * _2676) * (_2681 + (-1.0))) + 1.0;
        float _2694 = (exp2(log2(1.0 - (isnan(1.0) ? _4782 : (isnan(_4782) ? 1.0 : min(_4782, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2695 = 1.0 - _2658;
        float _2705 = (0.5 / (((_2449 * ((_2672 * _2695) + _2658)) + 9.9999999392252902907785028219223e-09) + (((_2449 * _2695) + _2658) * _2672))) * _2672;
        float _4793 = isnan(0.0) ? _2705 : (isnan(_2705) ? 0.0 : max(_2705, 0.0));
        float _2707 = (isnan(1.0) ? _4793 : (isnan(_4793) ? 1.0 : min(_4793, 1.0))) * (_2681 / ((_2685 * _2685) * 3.141590118408203125));
        float _2708 = isnan(1.0) ? _2299 : (isnan(_2299) ? 1.0 : min(_2299, 1.0));
        _2633 = (((_2694 * cbLight._m0[_2643].x) * _2707) * _2708) + _2569;
        _2635 = (((_2694 * cbLight._m0[_2643].y) * _2707) * _2708) + _2570;
        _2637 = (((_2694 * cbLight._m0[_2643].z) * _2707) * _2708) + _2571;
    }
    float _2743;
    float _2745;
    float _2747;
    if (_2375)
    {
        _2743 = _2633;
        _2745 = _2635;
        _2747 = _2637;
    }
    else
    {
        uint _2754 = _2284 + 3u;
        uint _2758 = _2284 + 11u;
        float _2772 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2754].w)) * _1061) * 0.949999988079071044921875);
        float _2773 = _2772 * _2772;
        float _2774 = cbLight._m0[_2754].x + _1137;
        float _2775 = cbLight._m0[_2754].y + _1138;
        float _2776 = cbLight._m0[_2754].z + _1139;
        float _2780 = inversesqrt(dot(vec3(_2774, _2775, _2776), vec3(_2774, _2775, _2776)));
        float _2781 = _2780 * _2774;
        float _2782 = _2780 * _2775;
        float _2783 = _2780 * _2776;
        float _2784 = dot(vec3(_1058, _1059, _1060), vec3(cbLight._m0[_2754].xyz));
        float _4809 = isnan(0.0) ? _2784 : (isnan(_2784) ? 0.0 : max(_2784, 0.0));
        float _2787 = isnan(1.0) ? _4809 : (isnan(_4809) ? 1.0 : min(_4809, 1.0));
        float _2788 = dot(vec3(_1058, _1059, _1060), vec3(_2781, _2782, _2783));
        float _4820 = isnan(0.0) ? _2788 : (isnan(_2788) ? 0.0 : max(_2788, 0.0));
        float _2791 = isnan(1.0) ? _4820 : (isnan(_4820) ? 1.0 : min(_4820, 1.0));
        float _2792 = dot(vec3(cbLight._m0[_2754].xyz), vec3(_2781, _2782, _2783));
        float _4831 = isnan(0.0) ? _2792 : (isnan(_2792) ? 0.0 : max(_2792, 0.0));
        float _2796 = _2773 * _2773;
        float _2800 = ((_2791 * _2791) * (_2796 + (-1.0))) + 1.0;
        float _2809 = (exp2(log2(1.0 - (isnan(1.0) ? _4831 : (isnan(_4831) ? 1.0 : min(_4831, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2810 = 1.0 - _2773;
        float _2820 = (0.5 / (((_2449 * ((_2787 * _2810) + _2773)) + 9.9999999392252902907785028219223e-09) + (((_2449 * _2810) + _2773) * _2787))) * _2787;
        float _4842 = isnan(0.0) ? _2820 : (isnan(_2820) ? 0.0 : max(_2820, 0.0));
        float _2822 = (isnan(1.0) ? _4842 : (isnan(_4842) ? 1.0 : min(_4842, 1.0))) * (_2796 / ((_2800 * _2800) * 3.141590118408203125));
        float _2823 = isnan(1.0) ? _2300 : (isnan(_2300) ? 1.0 : min(_2300, 1.0));
        _2743 = (((_2809 * cbLight._m0[_2758].x) * _2822) * _2823) + _2633;
        _2745 = (((_2809 * cbLight._m0[_2758].y) * _2822) * _2823) + _2635;
        _2747 = (((_2809 * cbLight._m0[_2758].z) * _2822) * _2823) + _2637;
    }
    float _2958;
    float _2960;
    float _2962;
    float _2964;
    float _2966;
    float _2968;
    if (_2282.y == 0u)
    {
        float _2898 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2899 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2898;
        float _2900 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2898;
        float _2901 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2898;
        uvec4 _2913 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2914 = _2913.x;
        uint _2925 = uint((float(_2913.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1158) / _2914))) + floor(float(uint(cbSceneParam._m0[85u].x * _1157) / _2914)));
        float _2935 = (log2(_2901 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2936 = isnan(0.0) ? _2935 : (isnan(_2935) ? 0.0 : max(_2935, 0.0));
        uint _2939 = uint(isnan(14.0) ? _2936 : (isnan(_2936) ? 14.0 : min(_2936, 14.0)));
        uvec4 _2944 = texelFetch(g_lightClusterGridBuffer, int(((_2939 << 2u) + (_2925 << 6u)) >> 2u));
        uint _2945 = _2944.x;
        uint _2946 = _2913.z;
        float _3046;
        float _3048;
        float _3050;
        float _3052;
        float _3054;
        float _3056;
        if (((((1u << ((_2946 >> 4u) & 15u)) + 4294967295u) & _2945) == 0u) || ((_2946 & 240u) == 0u))
        {
            _3046 = 0.0;
            _3048 = 0.0;
            _3050 = 0.0;
            _3052 = 0.0;
            _3054 = 0.0;
            _3056 = 0.0;
        }
        else
        {
            float _3047;
            float _3049;
            float _3051;
            float _3053;
            float _3055;
            float _3057;
            float _3198 = 0.0;
            float _3199 = 0.0;
            float _3200 = 0.0;
            float _3201 = 0.0;
            float _3202 = 0.0;
            float _3203 = 0.0;
            uint _3204 = 0u;
            uint _3213;
            bool _3214;
            for (;;)
            {
                _3213 = texelFetch(g_lightClassification, int((((_2939 << 5u) + (_2925 << 9u)) + (_3204 << 2u)) >> 2u)).x;
                _3214 = _3213 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3214)
                {
                    frontier_phi_66_pred = _3198;
                    frontier_phi_66_pred_1 = _3203;
                    frontier_phi_66_pred_2 = _3202;
                    frontier_phi_66_pred_3 = _3201;
                    frontier_phi_66_pred_4 = _3200;
                    frontier_phi_66_pred_5 = _3199;
                }
                else
                {
                    float _3343;
                    float _3344;
                    float _3345;
                    float _3346;
                    float _3347;
                    float _3348;
                    uint _3349;
                    _3343 = _3198;
                    _3344 = _3199;
                    _3345 = _3200;
                    _3346 = _3201;
                    _3347 = _3202;
                    _3348 = _3203;
                    _3349 = _3213;
                    float _3270;
                    float _3271;
                    float _3272;
                    float _3273;
                    float _3274;
                    float _3275;
                    for (;;)
                    {
                        uint _3353 = uint(findLSB(_3349)) + (_3204 << 5u);
                        uint _3350 = (_3349 + 4294967295u) & _3349;
                        uint _3355 = _3353 * 48u;
                        vec4 _3369 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3355)).x, texelFetch(g_PointLightRenderingBuffer, int(_3355 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3355 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3355 + 3u)).x));
                        uint _3375 = (_3353 * 48u) + 4u;
                        vec4 _3388 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3375)).x, texelFetch(g_PointLightRenderingBuffer, int(_3375 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3375 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3375 + 3u)).x));
                        uint _3394 = (_3353 * 48u) + 8u;
                        vec3 _3405 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3394)).x, texelFetch(g_PointLightRenderingBuffer, int(_3394 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3394 + 2u)).x));
                        float _3409 = _3369.x - _2899;
                        float _3410 = _3369.y - _2900;
                        float _3411 = _3369.z - _2901;
                        float _3412 = dot(vec3(_3409, _3410, _3411), vec3(_3409, _3410, _3411));
                        float _3415 = inversesqrt(_3412);
                        float _3416 = _3415 * _3409;
                        float _3417 = _3415 * _3410;
                        float _3418 = _3415 * _3411;
                        float _3419 = dot(vec3(_1176, _1179, _1182), vec3(_3416, _3417, _3418));
                        float _3424 = 1.0 - (_3412 * _3369.w);
                        float _4868 = isnan(0.0) ? _3424 : (isnan(_3424) ? 0.0 : max(_3424, 0.0));
                        float _3425 = isnan(1.0) ? _4868 : (isnan(_4868) ? 1.0 : min(_4868, 1.0));
                        float _3426 = sqrt(_3412) * _3388.w;
                        float _3429 = 1.39999997615814208984375 / (_3426 + 1.39999997615814208984375);
                        float _3430 = _3429 * _3429;
                        float _3433 = ((1.0 - _3430) * _3419) + _3430;
                        float _3436 = _3426 * _3426;
                        float _3440 = ((isnan(0.0) ? _3433 : (isnan(_3433) ? 0.0 : max(_3433, 0.0))) * _3425) / ((_3436 * 0.699999988079071044921875) + 1.0);
                        float _3444 = (-0.0) - _2899;
                        float _3445 = (-0.0) - _2900;
                        float _3446 = (-0.0) - _2901;
                        float _3450 = inversesqrt(dot(vec3(_3444, _3445, _3446), vec3(_3444, _3445, _3446)));
                        float _3451 = _3450 * _3444;
                        float _3452 = _3450 * _3445;
                        float _3453 = _3450 * _3446;
                        float _3461 = exp2(log2(1.0 / ((_3436 * 3.5) + 5.0)) * 0.25);
                        float _3462 = 1.0 - _1236;
                        float _3469 = sqrt(1.0 - ((1.0 - (_3462 * _3462)) * (1.0 - (_3461 * _3461))));
                        float _3470 = _3469 * _3469;
                        float _3471 = _3470 * _3470;
                        float _3472 = _3451 + _3416;
                        float _3473 = _3452 + _3417;
                        float _3474 = _3453 + _3418;
                        float _3478 = inversesqrt(dot(vec3(_3472, _3473, _3474), vec3(_3472, _3473, _3474)));
                        float _3482 = dot(vec3(_1176, _1179, _1182), vec3(_3451, _3452, _3453));
                        float _4884 = isnan(0.0) ? _3482 : (isnan(_3482) ? 0.0 : max(_3482, 0.0));
                        float _3485 = isnan(1.0) ? _4884 : (isnan(_4884) ? 1.0 : min(_4884, 1.0));
                        float _3486 = dot(vec3(_1176, _1179, _1182), vec3(_3478 * _3472, _3478 * _3473, _3478 * _3474));
                        float _4895 = isnan(0.0) ? _3486 : (isnan(_3486) ? 0.0 : max(_3486, 0.0));
                        float _3489 = isnan(1.0) ? _4895 : (isnan(_4895) ? 1.0 : min(_4895, 1.0));
                        float _3493 = ((_3489 * _3489) * (_3471 + (-1.0))) + 1.0;
                        float _3494 = _3429 * _3470;
                        float _3495 = _3494 * _3494;
                        float _3498 = ((1.0 - _3495) * _3419) + _3495;
                        float _4906 = isnan(0.0) ? _3498 : (isnan(_3498) ? 0.0 : max(_3498, 0.0));
                        float _3499 = isnan(1.0) ? _4906 : (isnan(_4906) ? 1.0 : min(_4906, 1.0));
                        float _3500 = 1.0 - _3470;
                        float _3510 = (0.5 / (((_3499 * ((_3485 * _3500) + _3470)) + 9.9999999392252902907785028219223e-09) + (((_3499 * _3500) + _3470) * _3485))) * _3499;
                        float _4917 = isnan(0.0) ? _3510 : (isnan(_3510) ? 0.0 : max(_3510, 0.0));
                        float _3521 = (((_3471 * 3.1415927410125732421875) * (isnan(1.0) ? _4917 : (isnan(_4917) ? 1.0 : min(_4917, 1.0)))) / ((_3493 * _3493) * ((_3436 * 2.1991131305694580078125) + 3.141590118408203125))) * _3425;
                        _3273 = (_3440 * _3388.x) + _3346;
                        _3274 = (_3440 * _3388.y) + _3347;
                        _3275 = (_3440 * _3388.z) + _3348;
                        _3270 = (_3521 * _3405.x) + _3343;
                        _3271 = (_3521 * _3405.y) + _3344;
                        _3272 = (_3521 * _3405.z) + _3345;
                        if (_3350 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3343 = _3270;
                            _3344 = _3271;
                            _3345 = _3272;
                            _3346 = _3273;
                            _3347 = _3274;
                            _3348 = _3275;
                            _3349 = _3350;
                        }
                    }
                    frontier_phi_66_pred = _3270;
                    frontier_phi_66_pred_1 = _3275;
                    frontier_phi_66_pred_2 = _3274;
                    frontier_phi_66_pred_3 = _3273;
                    frontier_phi_66_pred_4 = _3272;
                    frontier_phi_66_pred_5 = _3271;
                }
                _3047 = frontier_phi_66_pred;
                _3057 = frontier_phi_66_pred_1;
                _3055 = frontier_phi_66_pred_2;
                _3053 = frontier_phi_66_pred_3;
                _3051 = frontier_phi_66_pred_4;
                _3049 = frontier_phi_66_pred_5;
                uint _3205 = _3204 + 1u;
                if (_3205 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3198 = _3047;
                    _3199 = _3049;
                    _3200 = _3051;
                    _3201 = _3053;
                    _3202 = _3055;
                    _3203 = _3057;
                    _3204 = _3205;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3046 = _3047;
            _3048 = _3049;
            _3050 = _3051;
            _3052 = _3053;
            _3054 = _3055;
            _3056 = _3057;
        }
        uvec4 _3060 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3061 = _3060.z;
        uint _3063 = (_3061 >> 8u) & 15u;
        float _3166;
        float _3168;
        float _3170;
        float _3172;
        float _3174;
        float _3176;
        if (((4294967295u << _3063) & _2945) == 0u)
        {
            _3166 = _3046;
            _3168 = _3048;
            _3170 = _3050;
            _3172 = _3052;
            _3174 = _3054;
            _3176 = _3056;
        }
        else
        {
            float _3191 = inversesqrt(dot(vec3(_2899, _2900, _2901), vec3(_2899, _2900, _2901)));
            float _3192 = _3191 * _2899;
            float _3193 = _3191 * _2900;
            float _3194 = _3191 * _2901;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_3063 < ((_3061 >> 12u) & 15u))
            {
                float _3167;
                float _3169;
                float _3171;
                float _3173;
                float _3175;
                float _3177;
                float _3326 = _3046;
                float _3327 = _3048;
                float _3328 = _3050;
                float _3329 = _3052;
                float _3330 = _3054;
                float _3331 = _3056;
                uint _3332 = _3063;
                uint _3341;
                bool _3342;
                for (;;)
                {
                    _3341 = texelFetch(g_lightClassification, int((((_2939 << 5u) + (_2925 << 9u)) + (_3332 << 2u)) >> 2u)).x;
                    _3342 = _3341 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_3342)
                    {
                        frontier_phi_77_pred = _3331;
                        frontier_phi_77_pred_1 = _3330;
                        frontier_phi_77_pred_2 = _3329;
                        frontier_phi_77_pred_3 = _3328;
                        frontier_phi_77_pred_4 = _3327;
                        frontier_phi_77_pred_5 = _3326;
                    }
                    else
                    {
                        float _3535;
                        float _3536;
                        float _3537;
                        float _3538;
                        float _3539;
                        float _3540;
                        float _3828;
                        float _3829;
                        float _3830;
                        float _3831;
                        float _3832;
                        float _3833;
                        float _3548 = _3326;
                        float _3549 = _3327;
                        float _3550 = _3328;
                        float _3551 = _3329;
                        float _3552 = _3330;
                        float _3553 = _3331;
                        uint _3554 = _3341;
                        uint _3555;
                        vec4 _3580;
                        float _3581;
                        vec4 _3596;
                        vec3 _3608;
                        vec4 _3623;
                        vec4 _3638;
                        float _3684;
                        bool _3685;
                        for (;;)
                        {
                            uint _3565 = ((_3332 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3554));
                            _3555 = (_3554 + 4294967295u) & _3554;
                            uint _3567 = _3565 * 40u;
                            _3580 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3567)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3567 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3567 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3567 + 3u)).x));
                            _3581 = _3580.w;
                            uint _3583 = (_3565 * 40u) + 4u;
                            _3596 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3583)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3583 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3583 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3583 + 3u)).x));
                            uint _3598 = (_3565 * 40u) + 8u;
                            _3608 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3598)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3598 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3598 + 2u)).x));
                            uint _3610 = (_3565 * 40u) + 16u;
                            _3623 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3610)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3610 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3610 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3610 + 3u)).x));
                            uint _3625 = (_3565 * 40u) + 20u;
                            _3638 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3625)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3625 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3625 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3625 + 3u)).x));
                            uint _3640 = (_3565 * 40u) + 24u;
                            vec4 _3653 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3640)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3640 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3640 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3640 + 3u)).x));
                            uint _3659 = (_3565 * 40u) + 28u;
                            vec4 _3672 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3659)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3659 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3659 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3659 + 3u)).x));
                            _3684 = fma(_2901, _3672.z, fma(_2900, _3672.y, _3672.x * _2899)) + _3672.w;
                            _3685 = !((fma(_2901, _3653.z, fma(_2900, _3653.y, _3653.x * _2899)) + _3653.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3685)
                            {
                                float _3712 = _3580.x - _2899;
                                float _3713 = _3580.y - _2900;
                                float _3714 = _3580.z - _2901;
                                float _3715 = dot(vec3(_3712, _3713, _3714), vec3(_3712, _3713, _3714));
                                float _3718 = inversesqrt(_3715);
                                float _3719 = _3718 * _3712;
                                float _3720 = _3718 * _3713;
                                float _3721 = _3718 * _3714;
                                float _3725 = 1.0 - (_3715 / (_3581 * _3581));
                                float _4928 = isnan(0.0) ? _3725 : (isnan(_3725) ? 0.0 : max(_3725, 0.0));
                                float _3726 = isnan(1.0) ? _4928 : (isnan(_4928) ? 1.0 : min(_4928, 1.0));
                                float _3730 = sqrt(_3715) * _3596.w;
                                float _3732 = 1.39999997615814208984375 / (_3730 + 1.39999997615814208984375);
                                float _3733 = _3732 * _3732;
                                float _3736 = ((1.0 - _3733) * dot(vec3(_3719, _3720, _3721), vec3(_1176, _1179, _1182))) + _3733;
                                float _3739 = _3730 * _3730;
                                float _3743 = (fma(_2901, _3623.z, fma(_2900, _3623.y, _3623.x * _2899)) + _3623.w) / _3684;
                                float _3744 = (fma(_2901, _3638.z, fma(_2900, _3638.y, _3638.x * _2899)) + _3638.w) / _3684;
                                float _3748 = 1.0 - dot(vec2(_3743, _3744), vec2(_3743, _3744));
                                float _4944 = isnan(0.0) ? _3748 : (isnan(_3748) ? 0.0 : max(_3748, 0.0));
                                float _3749 = isnan(1.0) ? _4944 : (isnan(_4944) ? 1.0 : min(_4944, 1.0));
                                float _3750 = _3749 * (((isnan(0.0) ? _3736 : (isnan(_3736) ? 0.0 : max(_3736, 0.0))) * _3726) / ((_3739 * 0.699999988079071044921875) + 1.0));
                                float _3762 = exp2(log2(1.0 / ((_3739 * 3.5) + 5.0)) * 0.25);
                                float _3763 = 1.0 - _1236;
                                float _3770 = sqrt(1.0 - ((1.0 - (_3763 * _3763)) * (1.0 - (_3762 * _3762))));
                                float _3771 = _3770 * _3770;
                                float _3772 = _3771 * _3771;
                                float _3773 = _3719 - _3192;
                                float _3774 = _3720 - _3193;
                                float _3775 = _3721 - _3194;
                                float _3779 = inversesqrt(dot(vec3(_3773, _3774, _3775), vec3(_3773, _3774, _3775)));
                                float _3783 = dot(vec3(_1176, _1179, _1182), vec3((-0.0) - _3192, (-0.0) - _3193, (-0.0) - _3194));
                                float _4955 = isnan(0.0) ? _3783 : (isnan(_3783) ? 0.0 : max(_3783, 0.0));
                                float _3786 = isnan(1.0) ? _4955 : (isnan(_4955) ? 1.0 : min(_4955, 1.0));
                                float _3787 = dot(vec3(_1176, _1179, _1182), vec3(_3779 * _3773, _3779 * _3774, _3779 * _3775));
                                float _4966 = isnan(0.0) ? _3787 : (isnan(_3787) ? 0.0 : max(_3787, 0.0));
                                float _3790 = isnan(1.0) ? _4966 : (isnan(_4966) ? 1.0 : min(_4966, 1.0));
                                float _3794 = ((_3790 * _3790) * (_3772 + (-1.0))) + 1.0;
                                float _3795 = _3732 * _3771;
                                float _3796 = _3795 * _3795;
                                float _3802 = ((1.0 - _3796) * dot(vec3(_1176, _1179, _1182), vec3(_3719, _3720, _3721))) + _3796;
                                float _4977 = isnan(0.0) ? _3802 : (isnan(_3802) ? 0.0 : max(_3802, 0.0));
                                float _3803 = isnan(1.0) ? _4977 : (isnan(_4977) ? 1.0 : min(_4977, 1.0));
                                float _3804 = 1.0 - _3771;
                                float _3814 = (0.5 / (((_3803 * ((_3786 * _3804) + _3771)) + 9.9999999392252902907785028219223e-09) + (((_3803 * _3804) + _3771) * _3786))) * _3803;
                                float _4988 = isnan(0.0) ? _3814 : (isnan(_3814) ? 0.0 : max(_3814, 0.0));
                                float _3824 = (_3749 * _3726) * (((_3772 * 3.1415927410125732421875) * (isnan(1.0) ? _4988 : (isnan(_4988) ? 1.0 : min(_4988, 1.0)))) / ((_3794 * _3794) * ((_3739 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3750 * _3596.y;
                                frontier_phi_83_pred_1 = _3750 * _3596.x;
                                frontier_phi_83_pred_2 = _3824 * _3608.z;
                                frontier_phi_83_pred_3 = _3824 * _3608.y;
                                frontier_phi_83_pred_4 = _3824 * _3608.x;
                                frontier_phi_83_pred_5 = _3750 * _3596.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3832 = frontier_phi_83_pred;
                            _3831 = frontier_phi_83_pred_1;
                            _3830 = frontier_phi_83_pred_2;
                            _3829 = frontier_phi_83_pred_3;
                            _3828 = frontier_phi_83_pred_4;
                            _3833 = frontier_phi_83_pred_5;
                            _3538 = _3831 + _3551;
                            _3539 = _3832 + _3552;
                            _3540 = _3833 + _3553;
                            _3535 = _3828 + _3548;
                            _3536 = _3829 + _3549;
                            _3537 = _3830 + _3550;
                            if (_3555 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3548 = _3535;
                                _3549 = _3536;
                                _3550 = _3537;
                                _3551 = _3538;
                                _3552 = _3539;
                                _3553 = _3540;
                                _3554 = _3555;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3540;
                        frontier_phi_77_pred_1 = _3539;
                        frontier_phi_77_pred_2 = _3538;
                        frontier_phi_77_pred_3 = _3537;
                        frontier_phi_77_pred_4 = _3536;
                        frontier_phi_77_pred_5 = _3535;
                    }
                    _3177 = frontier_phi_77_pred;
                    _3175 = frontier_phi_77_pred_1;
                    _3173 = frontier_phi_77_pred_2;
                    _3171 = frontier_phi_77_pred_3;
                    _3169 = frontier_phi_77_pred_4;
                    _3167 = frontier_phi_77_pred_5;
                    uint _3333 = _3332 + 1u;
                    if (_3333 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3326 = _3167;
                        _3327 = _3169;
                        _3328 = _3171;
                        _3329 = _3173;
                        _3330 = _3175;
                        _3331 = _3177;
                        _3332 = _3333;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _3171;
                frontier_phi_58_59_ladder_1 = _3177;
                frontier_phi_58_59_ladder_2 = _3175;
                frontier_phi_58_59_ladder_3 = _3173;
                frontier_phi_58_59_ladder_4 = _3169;
                frontier_phi_58_59_ladder_5 = _3167;
            }
            else
            {
                frontier_phi_58_59_ladder = _3050;
                frontier_phi_58_59_ladder_1 = _3056;
                frontier_phi_58_59_ladder_2 = _3054;
                frontier_phi_58_59_ladder_3 = _3052;
                frontier_phi_58_59_ladder_4 = _3048;
                frontier_phi_58_59_ladder_5 = _3046;
            }
            _3166 = frontier_phi_58_59_ladder_5;
            _3168 = frontier_phi_58_59_ladder_4;
            _3170 = frontier_phi_58_59_ladder;
            _3172 = frontier_phi_58_59_ladder_3;
            _3174 = frontier_phi_58_59_ladder_2;
            _3176 = frontier_phi_58_59_ladder_1;
        }
        float _3181 = isnan(1.0) ? _1220 : (isnan(_1220) ? 1.0 : min(_1220, 1.0));
        _2958 = (_3181 * _3172) + _2413;
        _2960 = (_3181 * _3174) + _2415;
        _2962 = (_3181 * _3176) + _2417;
        _2964 = ((_3166 * 0.039999999105930328369140625) * _3181) + _2743;
        _2966 = ((_3168 * 0.039999999105930328369140625) * _3181) + _2745;
        _2968 = ((_3170 * 0.039999999105930328369140625) * _3181) + _2747;
    }
    else
    {
        _2958 = _2413;
        _2960 = _2415;
        _2962 = _2417;
        _2964 = _2743;
        _2966 = _2745;
        _2968 = _2747;
    }
    float _5004 = isnan(0.0) ? _1205 : (isnan(_1205) ? 0.0 : max(_1205, 0.0));
    float _5015 = isnan(0.0) ? _1206 : (isnan(_1206) ? 0.0 : max(_1206, 0.0));
    float _5026 = isnan(0.0) ? _1207 : (isnan(_1207) ? 0.0 : max(_1207, 0.0));
    float _2985 = ((isnan(1.0) ? _5004 : (isnan(_5004) ? 1.0 : min(_5004, 1.0))) * (_2958 + ((isnan(0.0) ? _1975 : (isnan(_1975) ? 0.0 : max(_1975, 0.0))) * _1220))) + ((_2964 + ((isnan(0.0) ? _2266 : (isnan(_2266) ? 0.0 : max(_2266, 0.0))) * _2054)) * cbPerFrame._m0[3u].x);
    float _2986 = ((isnan(1.0) ? _5015 : (isnan(_5015) ? 1.0 : min(_5015, 1.0))) * (_2960 + ((isnan(0.0) ? _1978 : (isnan(_1978) ? 0.0 : max(_1978, 0.0))) * _1220))) + ((_2966 + ((isnan(0.0) ? _2269 : (isnan(_2269) ? 0.0 : max(_2269, 0.0))) * _2054)) * cbPerFrame._m0[3u].x);
    float _2987 = ((isnan(1.0) ? _5026 : (isnan(_5026) ? 1.0 : min(_5026, 1.0))) * (_2962 + ((isnan(0.0) ? _1981 : (isnan(_1981) ? 0.0 : max(_1981, 0.0))) * _1220))) + ((_2968 + ((isnan(0.0) ? _2272 : (isnan(_2272) ? 0.0 : max(_2272, 0.0))) * _2054)) * cbPerFrame._m0[3u].x);
    uint _2988 = _289 + 6u;
    float _2996 = _1157 / cbSceneParam._m0[86u].x;
    float _2997 = _1158 / cbSceneParam._m0[86u].y;
    vec4 _3011 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2996, _2997, (log2((isnan(cbSceneParam._m0[77u].w) ? _1079 : (isnan(_1079) ? cbSceneParam._m0[77u].w : min(_1079, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3013 = _3011.x;
    float _3014 = _3011.y;
    float _3015 = _3011.z;
    float _3016 = _3011.w;
    float _3108;
    float _3110;
    float _3112;
    float _3114;
    if (_1079 > cbSceneParam._m0[78u].w)
    {
        float _3071 = isnan(_1079) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _1079 : min(cbSceneParam._m0[80u].w, _1079));
        float _3072 = _3071 / _1079;
        float _3083 = _3072 * _1130;
        float _3084 = _1131 * _3072;
        float _3085 = (-0.0) - _3084;
        float _3086 = _3072 * _1132;
        float _3088 = (cbSceneParam._m0[77u].w * _3085) / _3071;
        float _3089 = _3088 + cbSceneParam._m0[79u].w;
        float _3090 = cbSceneParam._m0[79u].w - _3084;
        float _3096 = sqrt(((_3083 * _3083) + (_3084 * _3084)) + (_3086 * _3086));
        float _3099 = (1.0 - (cbSceneParam._m0[77u].w / _3071)) * _3096;
        float _3104 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3106 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3283;
        if (abs((_3085 - _3088) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3283 = ((((_3089 > 0.0) ? exp2(_3104 * _3089) : (2.0 - exp2(_3106 * _3089))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3099;
        }
        else
        {
            float _3227 = 1.0 / cbSceneParam._m0[80u].x;
            float _3228 = isnan(_3090) ? _3089 : (isnan(_3089) ? _3090 : max(_3089, _3090));
            float _3229 = isnan(_3090) ? _3089 : (isnan(_3089) ? _3090 : min(_3089, _3090));
            float _3238 = isnan(0.0) ? _3228 : (isnan(_3228) ? 0.0 : min(_3228, 0.0));
            float _3239 = isnan(0.0) ? _3229 : (isnan(_3229) ? 0.0 : min(_3229, 0.0));
            _3283 = ((abs(_3096 / _3085) * cbSceneParam._m0[80u].y) * ((((_3238 - _3239) * 2.0) - ((exp2(_3104 * (isnan(0.0) ? _3228 : (isnan(_3228) ? 0.0 : max(_3228, 0.0)))) - exp2(_3104 * (isnan(0.0) ? _3229 : (isnan(_3229) ? 0.0 : max(_3229, 0.0))))) * _3227)) - ((exp2(_3106 * _3238) - exp2(_3106 * _3239)) * _3227))) + (_3099 * cbSceneParam._m0[80u].z);
        }
        vec4 _3285 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2996, _2997, 1.0), 0.0);
        float _3294 = exp2((_3283 * (-1.44269502162933349609375)) * (1.0 - _3285.w));
        float _3295 = log2(_3294);
        float _3311 = log2(_3016);
        _3108 = (exp2(_3311 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3295 * cbSceneParam._m0[78u].x)) * _3285.x) / cbSceneParam._m0[78u].x)) + _3013;
        _3110 = (exp2(_3311 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3295 * cbSceneParam._m0[78u].y)) * _3285.y) / cbSceneParam._m0[78u].y)) + _3014;
        _3112 = (exp2(_3311 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3295 * cbSceneParam._m0[78u].z)) * _3285.z) / cbSceneParam._m0[78u].z)) + _3015;
        _3114 = _3294 * _3016;
    }
    else
    {
        _3108 = _3013;
        _3110 = _3014;
        _3112 = _3015;
        _3114 = _3016;
    }
    bool _3321;
    vec4 _3124;
    vec4 _3146;
    float _3148;
    float _3152;
    float _3153;
    float _3154;
    float _3155;
    bool _3165;
    for (;;)
    {
        _3124 = cbMatDynParam._m0[0u];
        float _3126 = roundEven(_3124.y);
        bool _3127 = _3126 == 3.0;
        float _3128 = log2(_3114);
        float _3135 = exp2(_3128 * cbSceneParam._m0[78u].x) * _2985;
        float _3136 = exp2(_3128 * cbSceneParam._m0[78u].y) * _2986;
        float _3137 = exp2(_3128 * cbSceneParam._m0[78u].z) * _2987;
        float _3144 = _1146 + (-0.5);
        _3146 = cbMtdParam._m0[1u];
        _3148 = _3146.y * _3144;
        float _3151 = (_3126 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3152 = _3151 * (_3127 ? _3135 : (_3135 + (cbSceneParam._m0[72u].w * _3108)));
        _3153 = _3151 * (_3127 ? _3136 : (_3136 + (cbSceneParam._m0[72u].w * _3110)));
        _3154 = _3151 * (_3127 ? _3137 : (_3137 + (cbSceneParam._m0[72u].w * _3112)));
        _3155 = _3144 * 0.999000012874603271484375;
        _3165 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3165)
        {
            if ((cbInstanceData._m0[_289 + 7u].x + _3155) < 0.5)
            {
                _3321 = true;
                break;
            }
        }
        uint _3262 = _1195 + uint(_3124.w);
        if ((cbInstanceData._m0[_3262].w < 1.0) && ((cbInstanceData._m0[_3262].w + _3155) < 0.5))
        {
            _3321 = true;
            break;
        }
        if ((_3148 + 1.0) < _3146.x)
        {
            _3321 = true;
            break;
        }
        _3321 = false;
        break;
    }
    float _3526;
    if (_3321)
    {
        discard_state = true;
        _3526 = 0.0;
    }
    else
    {
        _3526 = cbInstanceData._m0[_2988].w;
    }
    SV_Target.x = _3152;
    SV_Target.y = _3153;
    SV_Target.z = _3154;
    SV_Target.w = _3526;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2988].w;
    discard_exit();
}


