#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_10;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_6;
layout(set = 0, binding = 23) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_8;
layout(set = 0, binding = 24) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_9;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1321;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _216 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _217 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _218 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _224 = inversesqrt(dot(vec3(_216, _217, _218), vec3(_216, _217, _218)));
    float _231 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _238 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _244 = uint(roundEven(NORMAL.w)) * 13u;
    uint _250 = _244 + 1u;
    uint _254 = _244 + 2u;
    float _263 = sqrt(((cbInstanceData._m0[_250].x * cbInstanceData._m0[_250].x) + (cbInstanceData._m0[_244].x * cbInstanceData._m0[_244].x)) + (cbInstanceData._m0[_254].x * cbInstanceData._m0[_254].x));
    float _264 = _263 * TEXCOORD.z;
    float _265 = _263 * TEXCOORD.w;
    vec4 _285 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _291 = _285.x * cbMtdParam._m0[11u].x;
    float _292 = _285.y * cbMtdParam._m0[11u].y;
    float _293 = _285.z * cbMtdParam._m0[11u].z;
    vec4 _312 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _264) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _265) + cbTextureTilingScale._m0[5u].w));
    vec4 _332 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _372 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _374 = _372.x;
    float _386 = dot(vec4(_374, _372.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _403 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _332.x) * 2.0) - ((((_374 - _386) * cbMtdParam._m0[24u].z) + _386) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3648 = isnan(0.0) ? _403 : (isnan(_403) ? 0.0 : max(_403, 0.0));
    float _404 = isnan(1.0) ? _3648 : (isnan(_3648) ? 1.0 : min(_3648, 1.0));
    float _411 = (_404 * ((_312.x * cbMtdParam._m0[12u].x) - _291)) + _291;
    float _412 = (_404 * ((_312.y * cbMtdParam._m0[12u].y) - _292)) + _292;
    float _413 = (_404 * ((_312.z * cbMtdParam._m0[12u].z) - _293)) + _293;
    vec4 _430 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _264) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _265) + cbTextureTilingScale._m0[3u].w));
    vec4 _450 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _452 = _450.x;
    float _462 = dot(vec4(_452, _450.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _476 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _332.y) * 2.0) - ((((_452 - _462) * cbMtdParam._m0[24u].z) + _462) * cbMtdParam._m0[20u].w))) + 1.0;
    float _3659 = isnan(0.0) ? _476 : (isnan(_476) ? 0.0 : max(_476, 0.0));
    float _477 = isnan(1.0) ? _3659 : (isnan(_3659) ? 1.0 : min(_3659, 1.0));
    float _484 = (_477 * ((_430.x * cbMtdParam._m0[13u].x) - _411)) + _411;
    float _485 = (_477 * ((_430.y * cbMtdParam._m0[13u].y) - _412)) + _412;
    float _486 = (_477 * ((_430.z * cbMtdParam._m0[13u].z) - _413)) + _413;
    vec4 _504 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_9, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[24u].x * _264) + cbTextureTilingScale._m0[24u].z, (cbTextureTilingScale._m0[24u].y * _265) + cbTextureTilingScale._m0[24u].w));
    vec4 _521 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[25u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _523 = _521.x;
    float _533 = dot(vec4(_523, _521.yzw), vec4(cbMtdParam._m0[30u].w, cbMtdParam._m0[31u].xy, 0.0));
    float _545 = ((cbMtdParam._m0[25u].x * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.z) - _332.z) * 2.0) - ((((_523 - _533) * cbMtdParam._m0[24u].z) + _533) * cbMtdParam._m0[20u].z))) + 1.0;
    float _3670 = isnan(0.0) ? _545 : (isnan(_545) ? 0.0 : max(_545, 0.0));
    float _546 = isnan(1.0) ? _3670 : (isnan(_3670) ? 1.0 : min(_3670, 1.0));
    float _553 = (_546 * ((_504.x * cbMtdParam._m0[14u].x) - _484)) + _484;
    float _554 = (_546 * ((_504.y * cbMtdParam._m0[14u].y) - _485)) + _485;
    float _555 = (_546 * ((_504.z * cbMtdParam._m0[14u].z) - _486)) + _486;
    vec4 _573 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _264) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _265) + cbTextureTilingScale._m0[4u].w));
    vec4 _590 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _592 = _590.x;
    float _593 = _590.y;
    float _594 = _590.z;
    float _601 = ((_573.x - _592) * _404) + _592;
    float _602 = ((_573.y - _593) * _404) + _593;
    float _603 = ((_573.z - _594) * _404) + _594;
    vec4 _615 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _264) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _265) + cbTextureTilingScale._m0[2u].w));
    float _626 = ((_615.x - _601) * _477) + _601;
    float _627 = ((_615.y - _602) * _477) + _602;
    float _628 = ((_615.z - _603) * _477) + _603;
    vec4 _640 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[23u].x * _264) + cbTextureTilingScale._m0[23u].z, (cbTextureTilingScale._m0[23u].y * _265) + cbTextureTilingScale._m0[23u].w));
    float _653 = ((_640.z - _628) * _546) + _628;
    float _656 = ((((_640.x - _626) * _546) + _626) * 2.0) + (-1.0);
    float _658 = ((((_640.y - _627) * _546) + _627) * 2.0) + (-1.0);
    float _659 = dot(vec2(_656, _658), vec2(_656, _658));
    float _3681 = isnan(0.0) ? _659 : (isnan(_659) ? 0.0 : max(_659, 0.0));
    float _664 = sqrt(1.0 - (isnan(1.0) ? _3681 : (isnan(_3681) ? 1.0 : min(_3681, 1.0))));
    vec4 _678 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _703 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _264) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _265) + cbTextureTilingScale._m0[11u].w));
    float _705 = _703.x;
    float _706 = 1.0 - _705;
    float _719 = (TEXCOORD_8.w - ((cbMtdParam._m0[21u].z * (1.0 - TEXCOORD_8.w)) * ((((_705 - _706) * cbMtdParam._m0[24u].w) + _706) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3692 = isnan(0.0) ? _719 : (isnan(_719) ? 0.0 : max(_719, 0.0));
    float _720 = isnan(1.0) ? _3692 : (isnan(_3692) ? 1.0 : min(_3692, 1.0));
    float _727 = (_720 * (cbMtdParam._m0[17u].x - _553)) + _553;
    float _728 = (_720 * (cbMtdParam._m0[17u].y - _554)) + _554;
    float _729 = (_720 * (cbMtdParam._m0[17u].z - _555)) + _555;
    float _733 = (cbMtdParam._m0[19u].w * (_678.z - _653)) + _653;
    vec4 _746 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _264) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _265) + cbTextureTilingScale._m0[15u].w));
    float _753 = (_746.x * 2.0) + (-1.0);
    float _754 = (_746.y * 2.0) + (-1.0);
    float _755 = dot(vec2(_753, _754), vec2(_753, _754));
    float _3703 = isnan(0.0) ? _755 : (isnan(_755) ? 0.0 : max(_755, 0.0));
    float _763 = (_720 * (_746.z - _733)) + _733;
    float _766 = (((_678.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _656;
    float _767 = (((_678.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _658;
    float _779 = (((_753 - _766) + (cbMtdParam._m0[21u].x * _766)) * _720) + _766;
    float _780 = (((_754 - _767) + (cbMtdParam._m0[21u].x * _767)) * _720) + _767;
    float _781 = (_720 * (sqrt(1.0 - (isnan(1.0) ? _3703 : (isnan(_3703) ? 1.0 : min(_3703, 1.0)))) - _664)) + _664;
    float _785 = cbMtdParam._m0[22u].x + _678.w;
    float _788 = fma(_781, _231 * NORMAL.x, fma(_780, _238 * TANGENT.x, (_224 * _216) * _779));
    float _791 = fma(_781, _231 * NORMAL.y, fma(_780, _238 * TANGENT.y, (_224 * _217) * _779));
    float _794 = fma(_781, _231 * NORMAL.z, fma(_780, _238 * TANGENT.z, (_224 * _218) * _779));
    float _798 = inversesqrt(dot(vec3(_788, _791, _794), vec3(_788, _791, _794)));
    float _799 = _798 * _788;
    float _800 = _798 * _791;
    float _801 = _798 * _794;
    float _3714 = isnan(0.0) ? _763 : (isnan(_763) ? 0.0 : max(_763, 0.0));
    float _802 = isnan(1.0) ? _3714 : (isnan(_3714) ? 1.0 : min(_3714, 1.0));
    float _3725 = isnan(0.0) ? _785 : (isnan(_785) ? 0.0 : max(_785, 0.0));
    float _3736 = isnan(0.0) ? _727 : (isnan(_727) ? 0.0 : max(_727, 0.0));
    float _3747 = isnan(0.0) ? _728 : (isnan(_728) ? 0.0 : max(_728, 0.0));
    float _3758 = isnan(0.0) ? _729 : (isnan(_729) ? 0.0 : max(_729, 0.0));
    float _820 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _862 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _872 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _862);
    float _873 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _862);
    float _874 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _862);
    float _878 = inversesqrt(dot(vec3(_872, _873, _874), vec3(_872, _873, _874)));
    float _879 = _872 * _878;
    float _880 = _873 * _878;
    float _881 = _874 * _878;
    float _887 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _888 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _906 = fma(_801, cbSceneParam._m0[5u].z, fma(_800, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _799));
    float _909 = fma(_801, cbSceneParam._m0[6u].z, fma(_800, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _799));
    float _912 = fma(_801, cbSceneParam._m0[7u].z, fma(_800, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _799));
    uint _926 = (_244 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _932 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3736 : (isnan(_3736) ? 1.0 : min(_3736, 1.0)))) * cbInstanceData._m0[_926].x;
    float _933 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3747 : (isnan(_3747) ? 1.0 : min(_3747, 1.0)))) * cbInstanceData._m0[_926].y;
    float _934 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3758 : (isnan(_3758) ? 1.0 : min(_3758, 1.0)))) * cbInstanceData._m0[_926].z;
    float _3769 = isnan(0.0) ? _932 : (isnan(_932) ? 0.0 : max(_932, 0.0));
    float _935 = isnan(1.0) ? _3769 : (isnan(_3769) ? 1.0 : min(_3769, 1.0));
    float _3780 = isnan(0.0) ? _933 : (isnan(_933) ? 0.0 : max(_933, 0.0));
    float _936 = isnan(1.0) ? _3780 : (isnan(_3780) ? 1.0 : min(_3780, 1.0));
    float _3791 = isnan(0.0) ? _934 : (isnan(_934) ? 0.0 : max(_934, 0.0));
    float _937 = isnan(1.0) ? _3791 : (isnan(_3791) ? 1.0 : min(_3791, 1.0));
    vec4 _946 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _887, cbSceneParam._m0[86u].y * _888));
    float _950 = ((isnan(1.0) ? _3725 : (isnan(_3725) ? 1.0 : min(_3725, 1.0))) * TEXCOORD_5.w) * _946.x;
    float _951 = dot(vec3(_799, _800, _801), vec3(_879, _880, _881));
    float _954 = _951 * 2.0;
    float _958 = (_954 * _799) - _879;
    float _959 = (_954 * _800) - _880;
    float _960 = (_954 * _801) - _881;
    float _964 = abs(dot(vec3(_879, _880, _881), vec3(_799, _800, _801)));
    float _3802 = isnan(0.0) ? _964 : (isnan(_964) ? 0.0 : max(_964, 0.0));
    float _966 = sqrt(_802);
    float _979 = exp2((_966 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3802 : (isnan(_3802) ? 1.0 : min(_3802, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_966 * 3.0));
    float _1011 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1015 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1019 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1320;
    float _1322;
    float _1323;
    float _1324;
    float _1325;
    float _1326;
    float _1327;
    float _1328;
    float _1329;
    float _1330;
    float _1331;
    float _1332;
    float _1333;
    float _1334;
    float _1335;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1045 = fma(_1019, cbModelParam._m0[26u].z, fma(_1015, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1011));
        float _1049 = fma(_1019, cbModelParam._m0[27u].z, fma(_1015, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1011));
        float _1053 = fma(_1019, cbModelParam._m0[28u].z, fma(_1015, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1011));
        float _1078 = _1011 + _799;
        float _1079 = _1015 + _800;
        float _1080 = _1019 + _801;
        float _1090 = fma(_1080, cbModelParam._m0[26u].z, fma(_1079, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1078)) - _1045;
        float _1091 = fma(_1080, cbModelParam._m0[27u].z, fma(_1079, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1078)) - _1049;
        float _1092 = fma(_1080, cbModelParam._m0[28u].z, fma(_1079, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1078)) - _1053;
        float _1096 = inversesqrt(dot(vec3(_1090, _1091, _1092), vec3(_1090, _1091, _1092)));
        float _1109 = ((_1096 * _1090) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1045 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1110 = ((_1096 * _1091) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1049 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1111 = ((_1096 * _1092) / cbModelParam._m0[34u].z) + ((((((_1053 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1114 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1109, _1110, _1111), 0.0);
        vec4 _1121 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1109, _1110, _1111), 0.0);
        vec4 _1128 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1109, _1110, _1111), 0.0);
        vec4 _1135 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1109, _1110, _1111), 0.0);
        float _1148 = exp2((_1114.w + (-0.5)) * 20.0) * 2.0;
        float _1149 = _1148 * (_1114.x + (-0.5));
        float _1150 = _1148 * (_1114.y + (-0.5));
        float _1151 = _1148 * (_1114.z + (-0.5));
        float _1158 = exp2((_1121.w + (-0.5)) * 20.0) * 2.0;
        float _1159 = _1158 * (_1121.x + (-0.5));
        float _1160 = _1158 * (_1121.y + (-0.5));
        float _1161 = _1158 * (_1121.z + (-0.5));
        float _1168 = exp2((_1128.w + (-0.5)) * 20.0) * 2.0;
        float _1169 = _1168 * (_1128.x + (-0.5));
        float _1170 = _1168 * (_1128.y + (-0.5));
        float _1171 = _1168 * (_1128.z + (-0.5));
        float _1178 = exp2((_1135.w + (-0.5)) * 20.0) * 2.0;
        float _1179 = _1178 * (_1135.x + (-0.5));
        float _1180 = _1178 * (_1135.y + (-0.5));
        float _1181 = _1178 * (_1135.z + (-0.5));
        float _1182 = isnan(0.0) ? _1179 : (isnan(_1179) ? 0.0 : max(_1179, 0.0));
        float _1183 = isnan(0.0) ? _1180 : (isnan(_1180) ? 0.0 : max(_1180, 0.0));
        float _1184 = isnan(0.0) ? _1181 : (isnan(_1181) ? 0.0 : max(_1181, 0.0));
        float _1185 = _1149 * 0.5;
        float _1186 = _1159 * 0.5;
        float _1187 = _1169 * 0.5;
        float _1188 = dot(vec3(_1185, _1186, _1187), vec3(_1185, _1186, _1187));
        float _1193 = (_1188 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1188);
        float _1202 = (dot(vec3(_799, _800, _801), vec3(_1193 * _1185, _1193 * _1186, _1193 * _1187)) + 1.0) * 0.5;
        float _3828 = isnan(0.0) ? _1202 : (isnan(_1202) ? 0.0 : max(_1202, 0.0));
        float _1212 = sqrt(((_1186 * _1186) + (_1185 * _1185)) + (_1187 * _1187)) / (_1182 + 9.9999997473787516355514526367188e-06);
        float _3839 = isnan(0.0) ? _1212 : (isnan(_1212) ? 0.0 : max(_1212, 0.0));
        float _1213 = isnan(1.0) ? _3839 : (isnan(_3839) ? 1.0 : min(_3839, 1.0));
        float _1214 = _1213 * 2.0;
        float _1218 = (1.0 - _1213) / (_1213 + 1.0);
        float _3850 = isnan(0.0) ? _1218 : (isnan(_1218) ? 0.0 : max(_1218, 0.0));
        float _1219 = isnan(1.0) ? _3850 : (isnan(_3850) ? 1.0 : min(_3850, 1.0));
        float _1228 = ((((1.0 - _1219) * (_1214 + 2.0)) * exp2(log2(isnan(1.0) ? _3828 : (isnan(_3828) ? 1.0 : min(_3828, 1.0))) * (_1214 + 1.0))) + _1219) * _1182;
        float _1229 = _1150 * 0.5;
        float _1230 = _1160 * 0.5;
        float _1231 = _1170 * 0.5;
        float _1232 = dot(vec3(_1229, _1230, _1231), vec3(_1229, _1230, _1231));
        float _1237 = (_1232 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1232);
        float _1245 = (dot(vec3(_799, _800, _801), vec3(_1237 * _1229, _1237 * _1230, _1237 * _1231)) + 1.0) * 0.5;
        float _3861 = isnan(0.0) ? _1245 : (isnan(_1245) ? 0.0 : max(_1245, 0.0));
        float _1254 = sqrt(((_1230 * _1230) + (_1229 * _1229)) + (_1231 * _1231)) / (_1183 + 9.9999997473787516355514526367188e-06);
        float _3872 = isnan(0.0) ? _1254 : (isnan(_1254) ? 0.0 : max(_1254, 0.0));
        float _1255 = isnan(1.0) ? _3872 : (isnan(_3872) ? 1.0 : min(_3872, 1.0));
        float _1256 = _1255 * 2.0;
        float _1260 = (1.0 - _1255) / (_1255 + 1.0);
        float _3883 = isnan(0.0) ? _1260 : (isnan(_1260) ? 0.0 : max(_1260, 0.0));
        float _1261 = isnan(1.0) ? _3883 : (isnan(_3883) ? 1.0 : min(_3883, 1.0));
        float _1270 = ((((1.0 - _1261) * (_1256 + 2.0)) * exp2(log2(isnan(1.0) ? _3861 : (isnan(_3861) ? 1.0 : min(_3861, 1.0))) * (_1256 + 1.0))) + _1261) * _1183;
        float _1271 = _1151 * 0.5;
        float _1272 = _1161 * 0.5;
        float _1273 = _1171 * 0.5;
        float _1274 = dot(vec3(_1271, _1272, _1273), vec3(_1271, _1272, _1273));
        float _1279 = (_1274 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1274);
        float _1287 = (dot(vec3(_799, _800, _801), vec3(_1279 * _1271, _1279 * _1272, _1279 * _1273)) + 1.0) * 0.5;
        float _3894 = isnan(0.0) ? _1287 : (isnan(_1287) ? 0.0 : max(_1287, 0.0));
        float _1296 = sqrt(((_1272 * _1272) + (_1271 * _1271)) + (_1273 * _1273)) / (_1184 + 9.9999997473787516355514526367188e-06);
        float _3905 = isnan(0.0) ? _1296 : (isnan(_1296) ? 0.0 : max(_1296, 0.0));
        float _1297 = isnan(1.0) ? _3905 : (isnan(_3905) ? 1.0 : min(_3905, 1.0));
        float _1298 = _1297 * 2.0;
        float _1302 = (1.0 - _1297) / (_1297 + 1.0);
        float _3916 = isnan(0.0) ? _1302 : (isnan(_1302) ? 0.0 : max(_1302, 0.0));
        float _1303 = isnan(1.0) ? _3916 : (isnan(_3916) ? 1.0 : min(_3916, 1.0));
        float _1312 = ((((1.0 - _1303) * (_1298 + 2.0)) * exp2(log2(isnan(1.0) ? _3894 : (isnan(_3894) ? 1.0 : min(_3894, 1.0))) * (_1298 + 1.0))) + _1303) * _1184;
        _1320 = _1151;
        _1322 = _1150;
        _1323 = _1149;
        _1324 = _1161;
        _1325 = _1160;
        _1326 = _1159;
        _1327 = _1171;
        _1328 = _1170;
        _1329 = _1169;
        _1330 = _1184;
        _1331 = _1183;
        _1332 = _1182;
        _1333 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1228 : (isnan(_1228) ? 0.0 : max(_1228, 0.0)));
        _1334 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1270 : (isnan(_1270) ? 0.0 : max(_1270, 0.0)));
        _1335 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1312 : (isnan(_1312) ? 0.0 : max(_1312, 0.0)));
    }
    else
    {
        _1320 = _1321;
        _1322 = _1321;
        _1323 = _1321;
        _1324 = _1321;
        _1325 = _1321;
        _1326 = _1321;
        _1327 = _1321;
        _1328 = _1321;
        _1329 = _1321;
        _1330 = _1321;
        _1331 = _1321;
        _1332 = _1321;
        _1333 = 0.0;
        _1334 = 0.0;
        _1335 = 0.0;
    }
    float _1627;
    float _1628;
    float _1629;
    float _1630;
    float _1631;
    float _1632;
    float _1633;
    float _1634;
    float _1635;
    float _1636;
    float _1637;
    float _1638;
    float _1639;
    float _1640;
    float _1641;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1358 = fma(_1019, cbModelParam._m0[30u].z, fma(_1015, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1011));
        float _1362 = fma(_1019, cbModelParam._m0[31u].z, fma(_1015, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1011));
        float _1366 = fma(_1019, cbModelParam._m0[32u].z, fma(_1015, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1011));
        float _1389 = _1011 + _799;
        float _1390 = _1015 + _800;
        float _1391 = _1019 + _801;
        float _1401 = fma(_1391, cbModelParam._m0[30u].z, fma(_1390, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1389)) - _1358;
        float _1402 = fma(_1391, cbModelParam._m0[31u].z, fma(_1390, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1389)) - _1362;
        float _1403 = fma(_1391, cbModelParam._m0[32u].z, fma(_1390, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1389)) - _1366;
        float _1407 = inversesqrt(dot(vec3(_1401, _1402, _1403), vec3(_1401, _1402, _1403)));
        float _1420 = ((_1407 * _1401) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1358 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1421 = ((_1407 * _1402) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1362 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1422 = ((_1407 * _1403) / cbModelParam._m0[35u].z) + ((((((_1366 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1424 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1420, _1421, _1422), 0.0);
        vec4 _1431 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1420, _1421, _1422), 0.0);
        vec4 _1438 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1420, _1421, _1422), 0.0);
        vec4 _1445 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1420, _1421, _1422), 0.0);
        float _1457 = exp2((_1424.w + (-0.5)) * 20.0) * 2.0;
        float _1458 = _1457 * (_1424.x + (-0.5));
        float _1459 = _1457 * (_1424.y + (-0.5));
        float _1460 = _1457 * (_1424.z + (-0.5));
        float _1467 = exp2((_1431.w + (-0.5)) * 20.0) * 2.0;
        float _1468 = _1467 * (_1431.x + (-0.5));
        float _1469 = _1467 * (_1431.y + (-0.5));
        float _1470 = _1467 * (_1431.z + (-0.5));
        float _1477 = exp2((_1438.w + (-0.5)) * 20.0) * 2.0;
        float _1478 = _1477 * (_1438.x + (-0.5));
        float _1479 = _1477 * (_1438.y + (-0.5));
        float _1480 = _1477 * (_1438.z + (-0.5));
        float _1487 = exp2((_1445.w + (-0.5)) * 20.0) * 2.0;
        float _1488 = _1487 * (_1445.x + (-0.5));
        float _1489 = _1487 * (_1445.y + (-0.5));
        float _1490 = _1487 * (_1445.z + (-0.5));
        float _1491 = isnan(0.0) ? _1488 : (isnan(_1488) ? 0.0 : max(_1488, 0.0));
        float _1492 = isnan(0.0) ? _1489 : (isnan(_1489) ? 0.0 : max(_1489, 0.0));
        float _1493 = isnan(0.0) ? _1490 : (isnan(_1490) ? 0.0 : max(_1490, 0.0));
        float _1494 = _1458 * 0.5;
        float _1495 = _1468 * 0.5;
        float _1496 = _1478 * 0.5;
        float _1497 = dot(vec3(_1494, _1495, _1496), vec3(_1494, _1495, _1496));
        float _1502 = (_1497 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1497);
        float _1510 = (dot(vec3(_799, _800, _801), vec3(_1502 * _1494, _1502 * _1495, _1502 * _1496)) + 1.0) * 0.5;
        float _3957 = isnan(0.0) ? _1510 : (isnan(_1510) ? 0.0 : max(_1510, 0.0));
        float _1519 = sqrt(((_1495 * _1495) + (_1494 * _1494)) + (_1496 * _1496)) / (_1491 + 9.9999997473787516355514526367188e-06);
        float _3968 = isnan(0.0) ? _1519 : (isnan(_1519) ? 0.0 : max(_1519, 0.0));
        float _1520 = isnan(1.0) ? _3968 : (isnan(_3968) ? 1.0 : min(_3968, 1.0));
        float _1521 = _1520 * 2.0;
        float _1525 = (1.0 - _1520) / (_1520 + 1.0);
        float _3979 = isnan(0.0) ? _1525 : (isnan(_1525) ? 0.0 : max(_1525, 0.0));
        float _1526 = isnan(1.0) ? _3979 : (isnan(_3979) ? 1.0 : min(_3979, 1.0));
        float _1535 = ((((1.0 - _1526) * (_1521 + 2.0)) * exp2(log2(isnan(1.0) ? _3957 : (isnan(_3957) ? 1.0 : min(_3957, 1.0))) * (_1521 + 1.0))) + _1526) * _1491;
        float _1536 = _1459 * 0.5;
        float _1537 = _1469 * 0.5;
        float _1538 = _1479 * 0.5;
        float _1539 = dot(vec3(_1536, _1537, _1538), vec3(_1536, _1537, _1538));
        float _1544 = (_1539 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1539);
        float _1552 = (dot(vec3(_799, _800, _801), vec3(_1544 * _1536, _1544 * _1537, _1544 * _1538)) + 1.0) * 0.5;
        float _3990 = isnan(0.0) ? _1552 : (isnan(_1552) ? 0.0 : max(_1552, 0.0));
        float _1561 = sqrt(((_1537 * _1537) + (_1536 * _1536)) + (_1538 * _1538)) / (_1492 + 9.9999997473787516355514526367188e-06);
        float _4001 = isnan(0.0) ? _1561 : (isnan(_1561) ? 0.0 : max(_1561, 0.0));
        float _1562 = isnan(1.0) ? _4001 : (isnan(_4001) ? 1.0 : min(_4001, 1.0));
        float _1563 = _1562 * 2.0;
        float _1567 = (1.0 - _1562) / (_1562 + 1.0);
        float _4012 = isnan(0.0) ? _1567 : (isnan(_1567) ? 0.0 : max(_1567, 0.0));
        float _1568 = isnan(1.0) ? _4012 : (isnan(_4012) ? 1.0 : min(_4012, 1.0));
        float _1577 = ((((1.0 - _1568) * (_1563 + 2.0)) * exp2(log2(isnan(1.0) ? _3990 : (isnan(_3990) ? 1.0 : min(_3990, 1.0))) * (_1563 + 1.0))) + _1568) * _1492;
        float _1578 = _1460 * 0.5;
        float _1579 = _1470 * 0.5;
        float _1580 = _1480 * 0.5;
        float _1581 = dot(vec3(_1578, _1579, _1580), vec3(_1578, _1579, _1580));
        float _1586 = (_1581 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1581);
        float _1594 = (dot(vec3(_799, _800, _801), vec3(_1586 * _1578, _1586 * _1579, _1586 * _1580)) + 1.0) * 0.5;
        float _4023 = isnan(0.0) ? _1594 : (isnan(_1594) ? 0.0 : max(_1594, 0.0));
        float _1603 = sqrt(((_1579 * _1579) + (_1578 * _1578)) + (_1580 * _1580)) / (_1493 + 9.9999997473787516355514526367188e-06);
        float _4034 = isnan(0.0) ? _1603 : (isnan(_1603) ? 0.0 : max(_1603, 0.0));
        float _1604 = isnan(1.0) ? _4034 : (isnan(_4034) ? 1.0 : min(_4034, 1.0));
        float _1605 = _1604 * 2.0;
        float _1609 = (1.0 - _1604) / (_1604 + 1.0);
        float _4045 = isnan(0.0) ? _1609 : (isnan(_1609) ? 0.0 : max(_1609, 0.0));
        float _1610 = isnan(1.0) ? _4045 : (isnan(_4045) ? 1.0 : min(_4045, 1.0));
        float _1619 = ((((1.0 - _1610) * (_1605 + 2.0)) * exp2(log2(isnan(1.0) ? _4023 : (isnan(_4023) ? 1.0 : min(_4023, 1.0))) * (_1605 + 1.0))) + _1610) * _1493;
        _1627 = _1460;
        _1628 = _1459;
        _1629 = _1458;
        _1630 = _1470;
        _1631 = _1469;
        _1632 = _1468;
        _1633 = _1480;
        _1634 = _1479;
        _1635 = _1478;
        _1636 = _1493;
        _1637 = _1492;
        _1638 = _1491;
        _1639 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1535 : (isnan(_1535) ? 0.0 : max(_1535, 0.0)));
        _1640 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1577 : (isnan(_1577) ? 0.0 : max(_1577, 0.0)));
        _1641 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1619 : (isnan(_1619) ? 0.0 : max(_1619, 0.0)));
    }
    else
    {
        _1627 = _1321;
        _1628 = _1321;
        _1629 = _1321;
        _1630 = _1321;
        _1631 = _1321;
        _1632 = _1321;
        _1633 = _1321;
        _1634 = _1321;
        _1635 = _1321;
        _1636 = _1321;
        _1637 = _1321;
        _1638 = _1321;
        _1639 = 0.0;
        _1640 = 0.0;
        _1641 = 0.0;
    }
    float _1651 = (cbModelParam._m0[1u].x * (_1639 - _1333)) + _1333;
    float _1652 = (cbModelParam._m0[1u].x * (_1640 - _1334)) + _1334;
    float _1653 = (cbModelParam._m0[1u].x * (_1641 - _1335)) + _1335;
    float _1674 = fma(_1653, cbSceneParam._m0[89u].z, fma(_1652, cbSceneParam._m0[89u].y, _1651 * cbSceneParam._m0[89u].x));
    float _1677 = fma(_1653, cbSceneParam._m0[90u].z, fma(_1652, cbSceneParam._m0[90u].y, _1651 * cbSceneParam._m0[90u].x));
    float _1680 = fma(_1653, cbSceneParam._m0[91u].z, fma(_1652, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1651));
    float _1695 = _958 * 0.5;
    float _1696 = _959 * 0.5;
    float _1697 = _960 * 0.5;
    float _1698 = dot(vec4(_1695, _1696, _1697, 1.0), vec4(_1629, _1632, _1635, _1638));
    float _1701 = dot(vec4(_1695, _1696, _1697, 1.0), vec4(_1628, _1631, _1634, _1637));
    float _1704 = dot(vec4(_1695, _1696, _1697, 1.0), vec4(_1627, _1630, _1633, _1636));
    float _1738;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1711 = dot(vec4(_1695, _1696, _1697, 1.0), vec4(_1320, _1324, _1327, _1330));
        float _1715 = dot(vec4(_1695, _1696, _1697, 1.0), vec4(_1322, _1325, _1328, _1331));
        float _1719 = dot(vec4(_1695, _1696, _1697, 1.0), vec4(_1323, _1326, _1329, _1332));
        float _1726 = dot(vec4(cbModelParam._m0[39u]), vec4(_1695, _1696, _1697, 1.0));
        _1738 = dot(vec3(isnan(0.0) ? _1719 : (isnan(_1719) ? 0.0 : max(_1719, 0.0)), isnan(0.0) ? _1715 : (isnan(_1715) ? 0.0 : max(_1715, 0.0)), isnan(0.0) ? _1711 : (isnan(_1711) ? 0.0 : max(_1711, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1726) ? 0.0 : (isnan(0.0) ? _1726 : max(0.0, _1726))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1738 = 1.0;
    }
    float _1749;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1740 = dot(vec4(cbModelParam._m0[40u]), vec4(_1695, _1696, _1697, 1.0));
        _1749 = dot(vec3(isnan(0.0) ? _1698 : (isnan(_1698) ? 0.0 : max(_1698, 0.0)), isnan(0.0) ? _1701 : (isnan(_1701) ? 0.0 : max(_1701, 0.0)), isnan(0.0) ? _1704 : (isnan(_1704) ? 0.0 : max(_1704, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1740) ? 0.0 : (isnan(0.0) ? _1740 : max(0.0, _1740))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1749 = 1.0;
    }
    float _1753 = (_1749 * cbModelParam._m0[1u].x) + (_1738 * (1.0 - cbModelParam._m0[1u].x));
    float _1763 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _802);
    float _1764 = isnan(_1763) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1763 : min(cbModelParam._m0[25u].z, _1763));
    float _1844;
    float _1846;
    float _1848;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1811 = fma(_1019, cbModelParam._m0[13u].z, fma(_1015, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1011)) + cbModelParam._m0[13u].w;
        float _1815 = fma(_1019, cbModelParam._m0[14u].z, fma(_1015, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1011)) + cbModelParam._m0[14u].w;
        float _1819 = fma(_1019, cbModelParam._m0[15u].z, fma(_1015, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1011)) + cbModelParam._m0[15u].w;
        float _1822 = fma(_960, cbModelParam._m0[13u].z, fma(_959, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _958));
        float _1825 = fma(_960, cbModelParam._m0[14u].z, fma(_959, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _958));
        float _1828 = fma(_960, cbModelParam._m0[15u].z, fma(_959, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _958));
        float _1856;
        if (_1822 > 0.0)
        {
            _1856 = abs((1.0 - _1811) / _1822);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1822 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1811 + 1.0) / _1822);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1856 = frontier_phi_14_12_ladder;
        }
        float _2078;
        if (_1825 > 0.0)
        {
            _2078 = abs((1.0 - _1815) / _1825);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1825 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1815 + 1.0) / _1825);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2078 = frontier_phi_23_19_ladder;
        }
        float _2324;
        if (_1828 > 0.0)
        {
            _2324 = abs((1.0 - _1819) / _1828);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1828 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1819 + 1.0) / _1828);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2324 = frontier_phi_35_30_ladder;
        }
        float _2326 = isnan(_2078) ? _1856 : (isnan(_1856) ? _2078 : min(_1856, _2078));
        float _2327 = isnan(_2324) ? _2326 : (isnan(_2326) ? _2324 : min(_2326, _2324));
        float _2331 = (_2327 * _1822) + _1811;
        float _2332 = (_2327 * _1825) + _1815;
        float _2333 = (_2327 * _1828) + _1819;
        float _2334 = _2327 * 9.9999997473787516355514526367188e-05;
        float _2336 = (-1.0) - _2334;
        float _2338 = _2334 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2333 > _2338) || ((_2333 < _2336) || ((_2332 > _2338) || ((_2332 < _2336) || ((_2331 < _2336) || (_2331 > _2338))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2457 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2333, cbModelParam._m0[9u].z, fma(_2332, cbModelParam._m0[9u].y, _2331 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2333, cbModelParam._m0[10u].z, fma(_2332, cbModelParam._m0[10u].y, _2331 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2333, cbModelParam._m0[11u].z, fma(_2332, cbModelParam._m0[11u].y, _2331 * cbModelParam._m0[11u].x))), _1764);
            frontier_phi_13_35_ladder = _2457.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2457.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2457.x * cbModelParam._m0[1u].y;
        }
        _1844 = frontier_phi_13_35_ladder_2;
        _1846 = frontier_phi_13_35_ladder_1;
        _1848 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1832 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_958, _959, _960), _1764);
        _1844 = _1832.x * cbModelParam._m0[1u].y;
        _1846 = _1832.y * cbModelParam._m0[1u].y;
        _1848 = _1832.z * cbModelParam._m0[1u].y;
    }
    float _1852 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _802);
    float _1853 = isnan(_1852) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1852 : min(cbModelParam._m0[25u].w, _1852));
    float _1943;
    float _1945;
    float _1947;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1907 = fma(_1019, cbModelParam._m0[21u].z, fma(_1015, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1011)) + cbModelParam._m0[21u].w;
        float _1911 = fma(_1019, cbModelParam._m0[22u].z, fma(_1015, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1011)) + cbModelParam._m0[22u].w;
        float _1915 = fma(_1019, cbModelParam._m0[23u].z, fma(_1015, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1011)) + cbModelParam._m0[23u].w;
        float _1918 = fma(_960, cbModelParam._m0[21u].z, fma(_959, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _958));
        float _1921 = fma(_960, cbModelParam._m0[22u].z, fma(_959, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _958));
        float _1924 = fma(_960, cbModelParam._m0[23u].z, fma(_959, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _958));
        float _2083;
        if (_1918 > 0.0)
        {
            _2083 = abs((1.0 - _1907) / _1918);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1918 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1907 + 1.0) / _1918);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2083 = frontier_phi_25_21_ladder;
        }
        float _2351;
        if (_1921 > 0.0)
        {
            _2351 = abs((1.0 - _1911) / _1921);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1921 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1911 + 1.0) / _1921);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2351 = frontier_phi_37_32_ladder;
        }
        float _2556;
        if (_1924 > 0.0)
        {
            _2556 = abs((1.0 - _1915) / _1924);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1924 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1915 + 1.0) / _1924);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2556 = frontier_phi_46_43_ladder;
        }
        float _2558 = isnan(_2351) ? _2083 : (isnan(_2083) ? _2351 : min(_2083, _2351));
        float _2559 = isnan(_2556) ? _2558 : (isnan(_2558) ? _2556 : min(_2558, _2556));
        float _2563 = (_2559 * _1918) + _1907;
        float _2564 = (_2559 * _1921) + _1911;
        float _2565 = (_2559 * _1924) + _1915;
        float _2566 = _2559 * 9.9999997473787516355514526367188e-05;
        float _2567 = (-1.0) - _2566;
        float _2569 = _2566 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2565 > _2569) || ((_2565 < _2567) || ((_2564 > _2569) || ((_2564 < _2567) || ((_2563 < _2567) || (_2563 > _2569))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2764 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2565, cbModelParam._m0[17u].z, fma(_2564, cbModelParam._m0[17u].y, _2563 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2565, cbModelParam._m0[18u].z, fma(_2564, cbModelParam._m0[18u].y, _2563 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2565, cbModelParam._m0[19u].z, fma(_2564, cbModelParam._m0[19u].y, _2563 * cbModelParam._m0[19u].x))), _1853);
            frontier_phi_22_46_ladder = _2764.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2764.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2764.x * cbModelParam._m0[1u].z;
        }
        _1943 = frontier_phi_22_46_ladder_2;
        _1945 = frontier_phi_22_46_ladder_1;
        _1947 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1927 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_958, _959, _960), _1853);
        _1943 = _1927.x * cbModelParam._m0[1u].z;
        _1945 = _1927.y * cbModelParam._m0[1u].z;
        _1947 = _1927.z * cbModelParam._m0[1u].z;
    }
    float _1959 = ((((1.0 - _979) * ((_966 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_979 * _966)) * _950;
    float _1960 = _1959 * ((cbModelParam._m0[1u].w * (_1943 - _1844)) + _1844);
    float _1961 = _1959 * ((cbModelParam._m0[1u].w * (_1945 - _1846)) + _1846);
    float _1962 = _1959 * ((cbModelParam._m0[1u].w * (_1947 - _1848)) + _1848);
    float _1965 = fma(_1962, cbSceneParam._m0[89u].z, fma(_1961, cbSceneParam._m0[89u].y, _1960 * cbSceneParam._m0[89u].x));
    float _1968 = fma(_1962, cbSceneParam._m0[90u].z, fma(_1961, cbSceneParam._m0[90u].y, _1960 * cbSceneParam._m0[90u].x));
    float _1971 = fma(_1962, cbSceneParam._m0[91u].z, fma(_1961, cbSceneParam._m0[91u].y, _1960 * cbSceneParam._m0[91u].x));
    vec4 _1979 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_887, _888));
    float _1981 = _1979.w;
    float _1993 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1981);
    float _1994 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1981);
    float _1995 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1981);
    uvec4 _1999 = floatBitsToUint(cbInstanceData._m0[_244 + 5u]);
    uint _2001 = _1999.x * 14u;
    uint _2002 = _2001 + 13u;
    float _2009 = _950 + (-1.0);
    float _2014 = (cbLight._m0[_2002].x * _2009) + 1.0;
    float _2015 = (cbLight._m0[_2002].y * _2009) + 1.0;
    float _2016 = (cbLight._m0[_2002].z * _2009) + 1.0;
    float _2017 = (cbLight._m0[_2002].w * _2009) + 1.0;
    uint _2018 = _2001 + 5u;
    float _2024 = isnan(1.0) ? _2015 : (isnan(_2015) ? 1.0 : min(_2015, 1.0));
    uint _2028 = _2001 + 4u;
    float _2037 = isnan(1.0) ? _2014 : (isnan(_2014) ? 1.0 : min(_2014, 1.0));
    uint _2041 = _2001 | 1u;
    float _2052 = dot(vec3(cbLight._m0[_2001].xyz), vec3(_799, _800, _801));
    float _2055 = dot(vec3(cbLight._m0[_2041].xyz), vec3(_799, _800, _801));
    float _4181 = isnan(0.0) ? _2052 : (isnan(_2052) ? 0.0 : max(_2052, 0.0));
    float _4192 = isnan(0.0) ? _2055 : (isnan(_2055) ? 0.0 : max(_2055, 0.0));
    float _2060 = (isnan(1.0) ? _4181 : (isnan(_4181) ? 1.0 : min(_4181, 1.0))) * 0.3183098733425140380859375;
    float _2062 = (isnan(1.0) ? _4192 : (isnan(_4192) ? 1.0 : min(_4192, 1.0))) * 0.3183098733425140380859375;
    float _2069 = ((cbLight._m0[_2018].x * _2024) * _2062) + (((cbLight._m0[_2028].x * _1993) * _2037) * _2060);
    float _2070 = ((_2024 * cbLight._m0[_2018].y) * _2062) + (((cbLight._m0[_2028].y * _1994) * _2037) * _2060);
    float _2071 = ((_2024 * cbLight._m0[_2018].z) * _2062) + (((cbLight._m0[_2028].z * _1995) * _2037) * _2060);
    uvec4 _2075 = floatBitsToUint(cbLight._m0[_2001 + 12u]);
    bool _2077 = _2075.x == 0u;
    float _2088;
    float _2090;
    float _2092;
    if (_2077)
    {
        _2088 = _2069;
        _2090 = _2070;
        _2092 = _2071;
    }
    else
    {
        uint _2096 = _2001 + 6u;
        float _2112 = (dot(vec3(cbLight._m0[_2001 + 2u].xyz), vec3(_799, _800, _801)) * 0.5) + 0.5;
        float _2113 = _2112 * _2112;
        float _4203 = isnan(0.0) ? _2113 : (isnan(_2113) ? 0.0 : max(_2113, 0.0));
        float _2114 = isnan(1.0) ? _4203 : (isnan(_4203) ? 1.0 : min(_4203, 1.0));
        float _2115 = isnan(1.0) ? _2016 : (isnan(_2016) ? 1.0 : min(_2016, 1.0));
        _2088 = (((cbLight._m0[_2096].x * 0.3183098733425140380859375) * _2114) * _2115) + _2069;
        _2090 = (((cbLight._m0[_2096].y * 0.3183098733425140380859375) * _2114) * _2115) + _2070;
        _2092 = (((cbLight._m0[_2096].z * 0.3183098733425140380859375) * _2114) * _2115) + _2071;
    }
    bool _2095 = _2075.y == 0u;
    float _2133;
    float _2135;
    float _2137;
    if (_2095)
    {
        _2133 = _2088;
        _2135 = _2090;
        _2137 = _2092;
    }
    else
    {
        uint _2295 = _2001 + 7u;
        float _2311 = (dot(vec3(cbLight._m0[_2001 + 3u].xyz), vec3(_799, _800, _801)) * 0.5) + 0.5;
        float _2312 = _2311 * _2311;
        float _4219 = isnan(0.0) ? _2312 : (isnan(_2312) ? 0.0 : max(_2312, 0.0));
        float _2313 = isnan(1.0) ? _4219 : (isnan(_4219) ? 1.0 : min(_4219, 1.0));
        float _2314 = isnan(1.0) ? _2017 : (isnan(_2017) ? 1.0 : min(_2017, 1.0));
        _2133 = (((cbLight._m0[_2295].x * 0.3183098733425140380859375) * _2313) * _2314) + _2088;
        _2135 = (((cbLight._m0[_2295].y * 0.3183098733425140380859375) * _2313) * _2314) + _2090;
        _2137 = (((cbLight._m0[_2295].z * 0.3183098733425140380859375) * _2313) * _2314) + _2092;
    }
    uint _2140 = _2001 + 8u;
    float _2153 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2001].w)) * _802) * 0.949999988079071044921875);
    float _2154 = _2153 * _2153;
    float _2155 = cbLight._m0[_2001].x + _879;
    float _2156 = cbLight._m0[_2001].y + _880;
    float _2157 = cbLight._m0[_2001].z + _881;
    float _2161 = inversesqrt(dot(vec3(_2155, _2156, _2157), vec3(_2155, _2156, _2157)));
    float _2162 = _2161 * _2155;
    float _2163 = _2161 * _2156;
    float _2164 = _2161 * _2157;
    float _2165 = dot(vec3(_799, _800, _801), vec3(cbLight._m0[_2001].xyz));
    float _4235 = isnan(0.0) ? _2165 : (isnan(_2165) ? 0.0 : max(_2165, 0.0));
    float _2168 = isnan(1.0) ? _4235 : (isnan(_4235) ? 1.0 : min(_4235, 1.0));
    float _4246 = isnan(0.0) ? _951 : (isnan(_951) ? 0.0 : max(_951, 0.0));
    float _2169 = isnan(1.0) ? _4246 : (isnan(_4246) ? 1.0 : min(_4246, 1.0));
    float _2170 = dot(vec3(_799, _800, _801), vec3(_2162, _2163, _2164));
    float _4257 = isnan(0.0) ? _2170 : (isnan(_2170) ? 0.0 : max(_2170, 0.0));
    float _2173 = isnan(1.0) ? _4257 : (isnan(_4257) ? 1.0 : min(_4257, 1.0));
    float _2174 = dot(vec3(cbLight._m0[_2001].xyz), vec3(_2162, _2163, _2164));
    float _4268 = isnan(0.0) ? _2174 : (isnan(_2174) ? 0.0 : max(_2174, 0.0));
    float _2178 = _2154 * _2154;
    float _2182 = ((_2173 * _2173) * (_2178 + (-1.0))) + 1.0;
    float _2193 = (exp2(log2(1.0 - (isnan(1.0) ? _4268 : (isnan(_4268) ? 1.0 : min(_4268, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2194 = 1.0 - _2154;
    float _2205 = (0.5 / (((_2169 * ((_2168 * _2194) + _2154)) + 9.9999999392252902907785028219223e-09) + (((_2169 * _2194) + _2154) * _2168))) * _2168;
    float _4279 = isnan(0.0) ? _2205 : (isnan(_2205) ? 0.0 : max(_2205, 0.0));
    float _2207 = (isnan(1.0) ? _4279 : (isnan(_4279) ? 1.0 : min(_4279, 1.0))) * (_2178 / ((_2182 * _2182) * 3.141590118408203125));
    uint _2221 = _2001 + 9u;
    float _2232 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2041].w)) * _802) * 0.949999988079071044921875);
    float _2233 = _2232 * _2232;
    float _2234 = cbLight._m0[_2041].x + _879;
    float _2235 = cbLight._m0[_2041].y + _880;
    float _2236 = cbLight._m0[_2041].z + _881;
    float _2240 = inversesqrt(dot(vec3(_2234, _2235, _2236), vec3(_2234, _2235, _2236)));
    float _2241 = _2240 * _2234;
    float _2242 = _2240 * _2235;
    float _2243 = _2240 * _2236;
    float _2244 = dot(vec3(_799, _800, _801), vec3(cbLight._m0[_2041].xyz));
    float _4290 = isnan(0.0) ? _2244 : (isnan(_2244) ? 0.0 : max(_2244, 0.0));
    float _2247 = isnan(1.0) ? _4290 : (isnan(_4290) ? 1.0 : min(_4290, 1.0));
    float _2248 = dot(vec3(_799, _800, _801), vec3(_2241, _2242, _2243));
    float _4301 = isnan(0.0) ? _2248 : (isnan(_2248) ? 0.0 : max(_2248, 0.0));
    float _2251 = isnan(1.0) ? _4301 : (isnan(_4301) ? 1.0 : min(_4301, 1.0));
    float _2252 = dot(vec3(cbLight._m0[_2041].xyz), vec3(_2241, _2242, _2243));
    float _4312 = isnan(0.0) ? _2252 : (isnan(_2252) ? 0.0 : max(_2252, 0.0));
    float _2256 = _2233 * _2233;
    float _2260 = ((_2251 * _2251) * (_2256 + (-1.0))) + 1.0;
    float _2269 = (exp2(log2(1.0 - (isnan(1.0) ? _4312 : (isnan(_4312) ? 1.0 : min(_4312, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2270 = 1.0 - _2233;
    float _2280 = (0.5 / (((_2169 * ((_2247 * _2270) + _2233)) + 9.9999999392252902907785028219223e-09) + (((_2169 * _2270) + _2233) * _2247))) * _2247;
    float _4323 = isnan(0.0) ? _2280 : (isnan(_2280) ? 0.0 : max(_2280, 0.0));
    float _2282 = (isnan(1.0) ? _4323 : (isnan(_4323) ? 1.0 : min(_4323, 1.0))) * (_2256 / ((_2260 * _2260) * 3.141590118408203125));
    float _2292 = (((_2269 * cbLight._m0[_2221].x) * _2282) * _2024) + ((((cbLight._m0[_2140].x * _1993) * _2193) * _2207) * _2037);
    float _2293 = (((_2269 * cbLight._m0[_2221].y) * _2282) * _2024) + ((((cbLight._m0[_2140].y * _1994) * _2193) * _2207) * _2037);
    float _2294 = (((_2269 * cbLight._m0[_2221].z) * _2282) * _2024) + ((((cbLight._m0[_2140].z * _1995) * _2193) * _2207) * _2037);
    float _2356;
    float _2358;
    float _2360;
    if (_2077)
    {
        _2356 = _2292;
        _2358 = _2293;
        _2360 = _2294;
    }
    else
    {
        uint _2362 = _2001 + 2u;
        uint _2366 = _2001 + 10u;
        float _2380 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2362].w)) * _802) * 0.949999988079071044921875);
        float _2381 = _2380 * _2380;
        float _2382 = cbLight._m0[_2362].x + _879;
        float _2383 = cbLight._m0[_2362].y + _880;
        float _2384 = cbLight._m0[_2362].z + _881;
        float _2388 = inversesqrt(dot(vec3(_2382, _2383, _2384), vec3(_2382, _2383, _2384)));
        float _2389 = _2388 * _2382;
        float _2390 = _2388 * _2383;
        float _2391 = _2388 * _2384;
        float _2392 = dot(vec3(_799, _800, _801), vec3(cbLight._m0[_2362].xyz));
        float _4334 = isnan(0.0) ? _2392 : (isnan(_2392) ? 0.0 : max(_2392, 0.0));
        float _2395 = isnan(1.0) ? _4334 : (isnan(_4334) ? 1.0 : min(_4334, 1.0));
        float _2396 = dot(vec3(_799, _800, _801), vec3(_2389, _2390, _2391));
        float _4345 = isnan(0.0) ? _2396 : (isnan(_2396) ? 0.0 : max(_2396, 0.0));
        float _2399 = isnan(1.0) ? _4345 : (isnan(_4345) ? 1.0 : min(_4345, 1.0));
        float _2400 = dot(vec3(cbLight._m0[_2362].xyz), vec3(_2389, _2390, _2391));
        float _4356 = isnan(0.0) ? _2400 : (isnan(_2400) ? 0.0 : max(_2400, 0.0));
        float _2404 = _2381 * _2381;
        float _2408 = ((_2399 * _2399) * (_2404 + (-1.0))) + 1.0;
        float _2417 = (exp2(log2(1.0 - (isnan(1.0) ? _4356 : (isnan(_4356) ? 1.0 : min(_4356, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2418 = 1.0 - _2381;
        float _2428 = (0.5 / (((_2169 * ((_2395 * _2418) + _2381)) + 9.9999999392252902907785028219223e-09) + (((_2169 * _2418) + _2381) * _2395))) * _2395;
        float _4367 = isnan(0.0) ? _2428 : (isnan(_2428) ? 0.0 : max(_2428, 0.0));
        float _2430 = (isnan(1.0) ? _4367 : (isnan(_4367) ? 1.0 : min(_4367, 1.0))) * (_2404 / ((_2408 * _2408) * 3.141590118408203125));
        float _2431 = isnan(1.0) ? _2016 : (isnan(_2016) ? 1.0 : min(_2016, 1.0));
        _2356 = (((_2417 * cbLight._m0[_2366].x) * _2430) * _2431) + _2292;
        _2358 = (((_2417 * cbLight._m0[_2366].y) * _2430) * _2431) + _2293;
        _2360 = (((_2417 * cbLight._m0[_2366].z) * _2430) * _2431) + _2294;
    }
    float _2466;
    float _2468;
    float _2470;
    if (_2095)
    {
        _2466 = _2356;
        _2468 = _2358;
        _2470 = _2360;
    }
    else
    {
        uint _2477 = _2001 + 3u;
        uint _2481 = _2001 + 11u;
        float _2495 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2477].w)) * _802) * 0.949999988079071044921875);
        float _2496 = _2495 * _2495;
        float _2497 = cbLight._m0[_2477].x + _879;
        float _2498 = cbLight._m0[_2477].y + _880;
        float _2499 = cbLight._m0[_2477].z + _881;
        float _2503 = inversesqrt(dot(vec3(_2497, _2498, _2499), vec3(_2497, _2498, _2499)));
        float _2504 = _2503 * _2497;
        float _2505 = _2503 * _2498;
        float _2506 = _2503 * _2499;
        float _2507 = dot(vec3(_799, _800, _801), vec3(cbLight._m0[_2477].xyz));
        float _4383 = isnan(0.0) ? _2507 : (isnan(_2507) ? 0.0 : max(_2507, 0.0));
        float _2510 = isnan(1.0) ? _4383 : (isnan(_4383) ? 1.0 : min(_4383, 1.0));
        float _2511 = dot(vec3(_799, _800, _801), vec3(_2504, _2505, _2506));
        float _4394 = isnan(0.0) ? _2511 : (isnan(_2511) ? 0.0 : max(_2511, 0.0));
        float _2514 = isnan(1.0) ? _4394 : (isnan(_4394) ? 1.0 : min(_4394, 1.0));
        float _2515 = dot(vec3(cbLight._m0[_2477].xyz), vec3(_2504, _2505, _2506));
        float _4405 = isnan(0.0) ? _2515 : (isnan(_2515) ? 0.0 : max(_2515, 0.0));
        float _2519 = _2496 * _2496;
        float _2523 = ((_2514 * _2514) * (_2519 + (-1.0))) + 1.0;
        float _2532 = (exp2(log2(1.0 - (isnan(1.0) ? _4405 : (isnan(_4405) ? 1.0 : min(_4405, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2533 = 1.0 - _2496;
        float _2543 = (0.5 / (((_2169 * ((_2510 * _2533) + _2496)) + 9.9999999392252902907785028219223e-09) + (((_2169 * _2533) + _2496) * _2510))) * _2510;
        float _4416 = isnan(0.0) ? _2543 : (isnan(_2543) ? 0.0 : max(_2543, 0.0));
        float _2545 = (isnan(1.0) ? _4416 : (isnan(_4416) ? 1.0 : min(_4416, 1.0))) * (_2519 / ((_2523 * _2523) * 3.141590118408203125));
        float _2546 = isnan(1.0) ? _2017 : (isnan(_2017) ? 1.0 : min(_2017, 1.0));
        _2466 = (((_2532 * cbLight._m0[_2481].x) * _2545) * _2546) + _2356;
        _2468 = (((_2532 * cbLight._m0[_2481].y) * _2545) * _2546) + _2358;
        _2470 = (((_2532 * cbLight._m0[_2481].z) * _2545) * _2546) + _2360;
    }
    float _2681;
    float _2683;
    float _2685;
    float _2687;
    float _2689;
    float _2691;
    if (_1999.y == 0u)
    {
        float _2621 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2622 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2621;
        float _2623 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2621;
        float _2624 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2621;
        uvec4 _2636 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2637 = _2636.x;
        uint _2648 = uint((float(_2636.y) * floor(float(uint(cbSceneParam._m0[85u].y * _888) / _2637))) + floor(float(uint(cbSceneParam._m0[85u].x * _887) / _2637)));
        float _2658 = (log2(_2624 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2659 = isnan(0.0) ? _2658 : (isnan(_2658) ? 0.0 : max(_2658, 0.0));
        uint _2662 = uint(isnan(14.0) ? _2659 : (isnan(_2659) ? 14.0 : min(_2659, 14.0)));
        uvec4 _2667 = texelFetch(g_lightClusterGridBuffer, int(((_2662 << 2u) + (_2648 << 6u)) >> 2u));
        uint _2668 = _2667.x;
        uint _2669 = _2636.z;
        float _2769;
        float _2771;
        float _2773;
        float _2775;
        float _2777;
        float _2779;
        if (((((1u << ((_2669 >> 4u) & 15u)) + 4294967295u) & _2668) == 0u) || ((_2669 & 240u) == 0u))
        {
            _2769 = 0.0;
            _2771 = 0.0;
            _2773 = 0.0;
            _2775 = 0.0;
            _2777 = 0.0;
            _2779 = 0.0;
        }
        else
        {
            float _2770;
            float _2772;
            float _2774;
            float _2776;
            float _2778;
            float _2780;
            float _2914 = 0.0;
            float _2915 = 0.0;
            float _2916 = 0.0;
            float _2917 = 0.0;
            float _2918 = 0.0;
            float _2919 = 0.0;
            uint _2920 = 0u;
            uint _2929;
            bool _2930;
            for (;;)
            {
                _2929 = texelFetch(g_lightClassification, int((((_2662 << 5u) + (_2648 << 9u)) + (_2920 << 2u)) >> 2u)).x;
                _2930 = _2929 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2930)
                {
                    frontier_phi_61_pred = _2914;
                    frontier_phi_61_pred_1 = _2919;
                    frontier_phi_61_pred_2 = _2918;
                    frontier_phi_61_pred_3 = _2917;
                    frontier_phi_61_pred_4 = _2916;
                    frontier_phi_61_pred_5 = _2915;
                }
                else
                {
                    float _3038;
                    float _3039;
                    float _3040;
                    float _3041;
                    float _3042;
                    float _3043;
                    uint _3044;
                    _3038 = _2914;
                    _3039 = _2915;
                    _3040 = _2916;
                    _3041 = _2917;
                    _3042 = _2918;
                    _3043 = _2919;
                    _3044 = _2929;
                    float _2970;
                    float _2971;
                    float _2972;
                    float _2973;
                    float _2974;
                    float _2975;
                    for (;;)
                    {
                        uint _3048 = uint(findLSB(_3044)) + (_2920 << 5u);
                        uint _3045 = (_3044 + 4294967295u) & _3044;
                        uint _3050 = _3048 * 48u;
                        vec4 _3064 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3050)).x, texelFetch(g_PointLightRenderingBuffer, int(_3050 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3050 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3050 + 3u)).x));
                        uint _3070 = (_3048 * 48u) + 4u;
                        vec4 _3083 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3070)).x, texelFetch(g_PointLightRenderingBuffer, int(_3070 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3070 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3070 + 3u)).x));
                        uint _3089 = (_3048 * 48u) + 8u;
                        vec3 _3100 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3089)).x, texelFetch(g_PointLightRenderingBuffer, int(_3089 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3089 + 2u)).x));
                        float _3104 = _3064.x - _2622;
                        float _3105 = _3064.y - _2623;
                        float _3106 = _3064.z - _2624;
                        float _3107 = dot(vec3(_3104, _3105, _3106), vec3(_3104, _3105, _3106));
                        float _3110 = inversesqrt(_3107);
                        float _3111 = _3110 * _3104;
                        float _3112 = _3110 * _3105;
                        float _3113 = _3110 * _3106;
                        float _3114 = dot(vec3(_906, _909, _912), vec3(_3111, _3112, _3113));
                        float _3119 = 1.0 - (_3107 * _3064.w);
                        float _4442 = isnan(0.0) ? _3119 : (isnan(_3119) ? 0.0 : max(_3119, 0.0));
                        float _3120 = isnan(1.0) ? _4442 : (isnan(_4442) ? 1.0 : min(_4442, 1.0));
                        float _3121 = sqrt(_3107) * _3083.w;
                        float _3124 = 1.39999997615814208984375 / (_3121 + 1.39999997615814208984375);
                        float _3125 = _3124 * _3124;
                        float _3128 = ((1.0 - _3125) * _3114) + _3125;
                        float _3131 = _3121 * _3121;
                        float _3135 = ((isnan(0.0) ? _3128 : (isnan(_3128) ? 0.0 : max(_3128, 0.0))) * _3120) / ((_3131 * 0.699999988079071044921875) + 1.0);
                        float _3139 = (-0.0) - _2622;
                        float _3140 = (-0.0) - _2623;
                        float _3141 = (-0.0) - _2624;
                        float _3145 = inversesqrt(dot(vec3(_3139, _3140, _3141), vec3(_3139, _3140, _3141)));
                        float _3146 = _3145 * _3139;
                        float _3147 = _3145 * _3140;
                        float _3148 = _3145 * _3141;
                        float _3156 = exp2(log2(1.0 / ((_3131 * 3.5) + 5.0)) * 0.25);
                        float _3157 = 1.0 - _966;
                        float _3164 = sqrt(1.0 - ((1.0 - (_3157 * _3157)) * (1.0 - (_3156 * _3156))));
                        float _3165 = _3164 * _3164;
                        float _3166 = _3165 * _3165;
                        float _3167 = _3146 + _3111;
                        float _3168 = _3147 + _3112;
                        float _3169 = _3148 + _3113;
                        float _3173 = inversesqrt(dot(vec3(_3167, _3168, _3169), vec3(_3167, _3168, _3169)));
                        float _3177 = dot(vec3(_906, _909, _912), vec3(_3146, _3147, _3148));
                        float _4458 = isnan(0.0) ? _3177 : (isnan(_3177) ? 0.0 : max(_3177, 0.0));
                        float _3180 = isnan(1.0) ? _4458 : (isnan(_4458) ? 1.0 : min(_4458, 1.0));
                        float _3181 = dot(vec3(_906, _909, _912), vec3(_3173 * _3167, _3173 * _3168, _3173 * _3169));
                        float _4469 = isnan(0.0) ? _3181 : (isnan(_3181) ? 0.0 : max(_3181, 0.0));
                        float _3184 = isnan(1.0) ? _4469 : (isnan(_4469) ? 1.0 : min(_4469, 1.0));
                        float _3188 = ((_3184 * _3184) * (_3166 + (-1.0))) + 1.0;
                        float _3189 = _3124 * _3165;
                        float _3190 = _3189 * _3189;
                        float _3193 = ((1.0 - _3190) * _3114) + _3190;
                        float _4480 = isnan(0.0) ? _3193 : (isnan(_3193) ? 0.0 : max(_3193, 0.0));
                        float _3194 = isnan(1.0) ? _4480 : (isnan(_4480) ? 1.0 : min(_4480, 1.0));
                        float _3195 = 1.0 - _3165;
                        float _3205 = (0.5 / (((_3194 * ((_3180 * _3195) + _3165)) + 9.9999999392252902907785028219223e-09) + (((_3194 * _3195) + _3165) * _3180))) * _3194;
                        float _4491 = isnan(0.0) ? _3205 : (isnan(_3205) ? 0.0 : max(_3205, 0.0));
                        float _3216 = (((_3166 * 3.1415927410125732421875) * (isnan(1.0) ? _4491 : (isnan(_4491) ? 1.0 : min(_4491, 1.0)))) / ((_3188 * _3188) * ((_3131 * 2.1991131305694580078125) + 3.141590118408203125))) * _3120;
                        _2973 = (_3135 * _3083.x) + _3041;
                        _2974 = (_3135 * _3083.y) + _3042;
                        _2975 = (_3135 * _3083.z) + _3043;
                        _2970 = (_3216 * _3100.x) + _3038;
                        _2971 = (_3216 * _3100.y) + _3039;
                        _2972 = (_3216 * _3100.z) + _3040;
                        if (_3045 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3038 = _2970;
                            _3039 = _2971;
                            _3040 = _2972;
                            _3041 = _2973;
                            _3042 = _2974;
                            _3043 = _2975;
                            _3044 = _3045;
                        }
                    }
                    frontier_phi_61_pred = _2970;
                    frontier_phi_61_pred_1 = _2975;
                    frontier_phi_61_pred_2 = _2974;
                    frontier_phi_61_pred_3 = _2973;
                    frontier_phi_61_pred_4 = _2972;
                    frontier_phi_61_pred_5 = _2971;
                }
                _2770 = frontier_phi_61_pred;
                _2780 = frontier_phi_61_pred_1;
                _2778 = frontier_phi_61_pred_2;
                _2776 = frontier_phi_61_pred_3;
                _2774 = frontier_phi_61_pred_4;
                _2772 = frontier_phi_61_pred_5;
                uint _2921 = _2920 + 1u;
                if (_2921 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2914 = _2770;
                    _2915 = _2772;
                    _2916 = _2774;
                    _2917 = _2776;
                    _2918 = _2778;
                    _2919 = _2780;
                    _2920 = _2921;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2769 = _2770;
            _2771 = _2772;
            _2773 = _2774;
            _2775 = _2776;
            _2777 = _2778;
            _2779 = _2780;
        }
        uvec4 _2783 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2784 = _2783.z;
        uint _2786 = (_2784 >> 8u) & 15u;
        float _2882;
        float _2884;
        float _2886;
        float _2888;
        float _2890;
        float _2892;
        if (((4294967295u << _2786) & _2668) == 0u)
        {
            _2882 = _2769;
            _2884 = _2771;
            _2886 = _2773;
            _2888 = _2775;
            _2890 = _2777;
            _2892 = _2779;
        }
        else
        {
            float _2907 = inversesqrt(dot(vec3(_2622, _2623, _2624), vec3(_2622, _2623, _2624)));
            float _2908 = _2907 * _2622;
            float _2909 = _2907 * _2623;
            float _2910 = _2907 * _2624;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2786 < ((_2784 >> 12u) & 15u))
            {
                float _2883;
                float _2885;
                float _2887;
                float _2889;
                float _2891;
                float _2893;
                float _3021 = _2769;
                float _3022 = _2771;
                float _3023 = _2773;
                float _3024 = _2775;
                float _3025 = _2777;
                float _3026 = _2779;
                uint _3027 = _2786;
                uint _3036;
                bool _3037;
                for (;;)
                {
                    _3036 = texelFetch(g_lightClassification, int((((_2662 << 5u) + (_2648 << 9u)) + (_3027 << 2u)) >> 2u)).x;
                    _3037 = _3036 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_3037)
                    {
                        frontier_phi_67_pred = _3024;
                        frontier_phi_67_pred_1 = _3025;
                        frontier_phi_67_pred_2 = _3026;
                        frontier_phi_67_pred_3 = _3023;
                        frontier_phi_67_pred_4 = _3022;
                        frontier_phi_67_pred_5 = _3021;
                    }
                    else
                    {
                        float _3221;
                        float _3222;
                        float _3223;
                        float _3224;
                        float _3225;
                        float _3226;
                        float _3514;
                        float _3515;
                        float _3516;
                        float _3517;
                        float _3518;
                        float _3519;
                        float _3234 = _3021;
                        float _3235 = _3022;
                        float _3236 = _3023;
                        float _3237 = _3024;
                        float _3238 = _3025;
                        float _3239 = _3026;
                        uint _3240 = _3036;
                        uint _3241;
                        vec4 _3266;
                        float _3267;
                        vec4 _3282;
                        vec3 _3294;
                        vec4 _3309;
                        vec4 _3324;
                        float _3370;
                        bool _3371;
                        for (;;)
                        {
                            uint _3251 = ((_3027 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3240));
                            _3241 = (_3240 + 4294967295u) & _3240;
                            uint _3253 = _3251 * 40u;
                            _3266 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3253)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3253 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3253 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3253 + 3u)).x));
                            _3267 = _3266.w;
                            uint _3269 = (_3251 * 40u) + 4u;
                            _3282 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3269)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3269 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3269 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3269 + 3u)).x));
                            uint _3284 = (_3251 * 40u) + 8u;
                            _3294 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3284)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3284 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3284 + 2u)).x));
                            uint _3296 = (_3251 * 40u) + 16u;
                            _3309 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3296)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3296 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3296 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3296 + 3u)).x));
                            uint _3311 = (_3251 * 40u) + 20u;
                            _3324 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3311)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3311 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3311 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3311 + 3u)).x));
                            uint _3326 = (_3251 * 40u) + 24u;
                            vec4 _3339 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3326)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3326 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3326 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3326 + 3u)).x));
                            uint _3345 = (_3251 * 40u) + 28u;
                            vec4 _3358 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3345)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3345 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3345 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3345 + 3u)).x));
                            _3370 = fma(_2624, _3358.z, fma(_2623, _3358.y, _3358.x * _2622)) + _3358.w;
                            _3371 = !((fma(_2624, _3339.z, fma(_2623, _3339.y, _3339.x * _2622)) + _3339.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3371)
                            {
                                float _3398 = _3266.x - _2622;
                                float _3399 = _3266.y - _2623;
                                float _3400 = _3266.z - _2624;
                                float _3401 = dot(vec3(_3398, _3399, _3400), vec3(_3398, _3399, _3400));
                                float _3404 = inversesqrt(_3401);
                                float _3405 = _3404 * _3398;
                                float _3406 = _3404 * _3399;
                                float _3407 = _3404 * _3400;
                                float _3411 = 1.0 - (_3401 / (_3267 * _3267));
                                float _4502 = isnan(0.0) ? _3411 : (isnan(_3411) ? 0.0 : max(_3411, 0.0));
                                float _3412 = isnan(1.0) ? _4502 : (isnan(_4502) ? 1.0 : min(_4502, 1.0));
                                float _3416 = sqrt(_3401) * _3282.w;
                                float _3418 = 1.39999997615814208984375 / (_3416 + 1.39999997615814208984375);
                                float _3419 = _3418 * _3418;
                                float _3422 = ((1.0 - _3419) * dot(vec3(_3405, _3406, _3407), vec3(_906, _909, _912))) + _3419;
                                float _3425 = _3416 * _3416;
                                float _3429 = (fma(_2624, _3309.z, fma(_2623, _3309.y, _3309.x * _2622)) + _3309.w) / _3370;
                                float _3430 = (fma(_2624, _3324.z, fma(_2623, _3324.y, _3324.x * _2622)) + _3324.w) / _3370;
                                float _3434 = 1.0 - dot(vec2(_3429, _3430), vec2(_3429, _3430));
                                float _4518 = isnan(0.0) ? _3434 : (isnan(_3434) ? 0.0 : max(_3434, 0.0));
                                float _3435 = isnan(1.0) ? _4518 : (isnan(_4518) ? 1.0 : min(_4518, 1.0));
                                float _3436 = _3435 * (((isnan(0.0) ? _3422 : (isnan(_3422) ? 0.0 : max(_3422, 0.0))) * _3412) / ((_3425 * 0.699999988079071044921875) + 1.0));
                                float _3448 = exp2(log2(1.0 / ((_3425 * 3.5) + 5.0)) * 0.25);
                                float _3449 = 1.0 - _966;
                                float _3456 = sqrt(1.0 - ((1.0 - (_3449 * _3449)) * (1.0 - (_3448 * _3448))));
                                float _3457 = _3456 * _3456;
                                float _3458 = _3457 * _3457;
                                float _3459 = _3405 - _2908;
                                float _3460 = _3406 - _2909;
                                float _3461 = _3407 - _2910;
                                float _3465 = inversesqrt(dot(vec3(_3459, _3460, _3461), vec3(_3459, _3460, _3461)));
                                float _3469 = dot(vec3(_906, _909, _912), vec3((-0.0) - _2908, (-0.0) - _2909, (-0.0) - _2910));
                                float _4529 = isnan(0.0) ? _3469 : (isnan(_3469) ? 0.0 : max(_3469, 0.0));
                                float _3472 = isnan(1.0) ? _4529 : (isnan(_4529) ? 1.0 : min(_4529, 1.0));
                                float _3473 = dot(vec3(_906, _909, _912), vec3(_3465 * _3459, _3465 * _3460, _3465 * _3461));
                                float _4540 = isnan(0.0) ? _3473 : (isnan(_3473) ? 0.0 : max(_3473, 0.0));
                                float _3476 = isnan(1.0) ? _4540 : (isnan(_4540) ? 1.0 : min(_4540, 1.0));
                                float _3480 = ((_3476 * _3476) * (_3458 + (-1.0))) + 1.0;
                                float _3481 = _3418 * _3457;
                                float _3482 = _3481 * _3481;
                                float _3488 = ((1.0 - _3482) * dot(vec3(_906, _909, _912), vec3(_3405, _3406, _3407))) + _3482;
                                float _4551 = isnan(0.0) ? _3488 : (isnan(_3488) ? 0.0 : max(_3488, 0.0));
                                float _3489 = isnan(1.0) ? _4551 : (isnan(_4551) ? 1.0 : min(_4551, 1.0));
                                float _3490 = 1.0 - _3457;
                                float _3500 = (0.5 / (((_3489 * ((_3472 * _3490) + _3457)) + 9.9999999392252902907785028219223e-09) + (((_3489 * _3490) + _3457) * _3472))) * _3489;
                                float _4562 = isnan(0.0) ? _3500 : (isnan(_3500) ? 0.0 : max(_3500, 0.0));
                                float _3510 = (_3435 * _3412) * (((_3458 * 3.1415927410125732421875) * (isnan(1.0) ? _4562 : (isnan(_4562) ? 1.0 : min(_4562, 1.0)))) / ((_3480 * _3480) * ((_3425 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3510 * _3294.x;
                                frontier_phi_73_pred_1 = _3510 * _3294.y;
                                frontier_phi_73_pred_2 = _3436 * _3282.z;
                                frontier_phi_73_pred_3 = _3436 * _3282.y;
                                frontier_phi_73_pred_4 = _3436 * _3282.x;
                                frontier_phi_73_pred_5 = _3510 * _3294.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3514 = frontier_phi_73_pred;
                            _3515 = frontier_phi_73_pred_1;
                            _3519 = frontier_phi_73_pred_2;
                            _3518 = frontier_phi_73_pred_3;
                            _3517 = frontier_phi_73_pred_4;
                            _3516 = frontier_phi_73_pred_5;
                            _3224 = _3517 + _3237;
                            _3225 = _3518 + _3238;
                            _3226 = _3519 + _3239;
                            _3221 = _3514 + _3234;
                            _3222 = _3515 + _3235;
                            _3223 = _3516 + _3236;
                            if (_3241 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3234 = _3221;
                                _3235 = _3222;
                                _3236 = _3223;
                                _3237 = _3224;
                                _3238 = _3225;
                                _3239 = _3226;
                                _3240 = _3241;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3224;
                        frontier_phi_67_pred_1 = _3225;
                        frontier_phi_67_pred_2 = _3226;
                        frontier_phi_67_pred_3 = _3223;
                        frontier_phi_67_pred_4 = _3222;
                        frontier_phi_67_pred_5 = _3221;
                    }
                    _2889 = frontier_phi_67_pred;
                    _2891 = frontier_phi_67_pred_1;
                    _2893 = frontier_phi_67_pred_2;
                    _2887 = frontier_phi_67_pred_3;
                    _2885 = frontier_phi_67_pred_4;
                    _2883 = frontier_phi_67_pred_5;
                    uint _3028 = _3027 + 1u;
                    if (_3028 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3021 = _2883;
                        _3022 = _2885;
                        _3023 = _2887;
                        _3024 = _2889;
                        _3025 = _2891;
                        _3026 = _2893;
                        _3027 = _3028;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2891;
                frontier_phi_55_56_ladder_1 = _2893;
                frontier_phi_55_56_ladder_2 = _2889;
                frontier_phi_55_56_ladder_3 = _2887;
                frontier_phi_55_56_ladder_4 = _2885;
                frontier_phi_55_56_ladder_5 = _2883;
            }
            else
            {
                frontier_phi_55_56_ladder = _2777;
                frontier_phi_55_56_ladder_1 = _2779;
                frontier_phi_55_56_ladder_2 = _2775;
                frontier_phi_55_56_ladder_3 = _2773;
                frontier_phi_55_56_ladder_4 = _2771;
                frontier_phi_55_56_ladder_5 = _2769;
            }
            _2882 = frontier_phi_55_56_ladder_5;
            _2884 = frontier_phi_55_56_ladder_4;
            _2886 = frontier_phi_55_56_ladder_3;
            _2888 = frontier_phi_55_56_ladder_2;
            _2890 = frontier_phi_55_56_ladder;
            _2892 = frontier_phi_55_56_ladder_1;
        }
        float _2897 = isnan(1.0) ? _950 : (isnan(_950) ? 1.0 : min(_950, 1.0));
        _2681 = (_2897 * _2888) + _2133;
        _2683 = (_2897 * _2890) + _2135;
        _2685 = (_2897 * _2892) + _2137;
        _2687 = ((_2882 * 0.039999999105930328369140625) * _2897) + _2466;
        _2689 = ((_2884 * 0.039999999105930328369140625) * _2897) + _2468;
        _2691 = ((_2886 * 0.039999999105930328369140625) * _2897) + _2470;
    }
    else
    {
        _2681 = _2133;
        _2683 = _2135;
        _2685 = _2137;
        _2687 = _2466;
        _2689 = _2468;
        _2691 = _2470;
    }
    float _4578 = isnan(0.0) ? _935 : (isnan(_935) ? 0.0 : max(_935, 0.0));
    float _4589 = isnan(0.0) ? _936 : (isnan(_936) ? 0.0 : max(_936, 0.0));
    float _4600 = isnan(0.0) ? _937 : (isnan(_937) ? 0.0 : max(_937, 0.0));
    uint _2711 = _244 + 6u;
    float _2719 = _887 / cbSceneParam._m0[86u].x;
    float _2720 = _888 / cbSceneParam._m0[86u].y;
    vec4 _2734 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2719, _2720, (log2((isnan(cbSceneParam._m0[77u].w) ? _820 : (isnan(_820) ? cbSceneParam._m0[77u].w : min(_820, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2736 = _2734.x;
    float _2737 = _2734.y;
    float _2738 = _2734.z;
    float _2739 = _2734.w;
    float _2832;
    float _2834;
    float _2836;
    float _2838;
    if (_820 > cbSceneParam._m0[78u].w)
    {
        float _2794 = isnan(_820) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _820 : min(cbSceneParam._m0[80u].w, _820));
        float _2795 = _2794 / _820;
        float _2806 = _2795 * _872;
        float _2807 = _873 * _2795;
        float _2808 = (-0.0) - _2807;
        float _2810 = _2795 * _874;
        float _2812 = (cbSceneParam._m0[77u].w * _2808) / _2794;
        float _2813 = _2812 + cbSceneParam._m0[79u].w;
        float _2814 = cbSceneParam._m0[79u].w - _2807;
        float _2820 = sqrt(((_2806 * _2806) + (_2807 * _2807)) + (_2810 * _2810));
        float _2823 = (1.0 - (cbSceneParam._m0[77u].w / _2794)) * _2820;
        float _2828 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2830 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2983;
        if (abs((_2808 - _2812) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2983 = ((((_2813 > 0.0) ? exp2(_2828 * _2813) : (2.0 - exp2(_2830 * _2813))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2823;
        }
        else
        {
            float _2943 = 1.0 / cbSceneParam._m0[80u].x;
            float _2944 = isnan(_2814) ? _2813 : (isnan(_2813) ? _2814 : max(_2813, _2814));
            float _2945 = isnan(_2814) ? _2813 : (isnan(_2813) ? _2814 : min(_2813, _2814));
            float _2954 = isnan(0.0) ? _2944 : (isnan(_2944) ? 0.0 : min(_2944, 0.0));
            float _2955 = isnan(0.0) ? _2945 : (isnan(_2945) ? 0.0 : min(_2945, 0.0));
            _2983 = ((abs(_2820 / _2808) * cbSceneParam._m0[80u].y) * ((((_2954 - _2955) * 2.0) - ((exp2(_2828 * (isnan(0.0) ? _2944 : (isnan(_2944) ? 0.0 : max(_2944, 0.0)))) - exp2(_2828 * (isnan(0.0) ? _2945 : (isnan(_2945) ? 0.0 : max(_2945, 0.0))))) * _2943)) - ((exp2(_2830 * _2954) - exp2(_2830 * _2955)) * _2943))) + (_2823 * cbSceneParam._m0[80u].z);
        }
        vec4 _2985 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2719, _2720, 1.0), 0.0);
        float _2994 = exp2((_2983 * (-1.44269502162933349609375)) * (1.0 - _2985.w));
        float _2995 = log2(_2994);
        float _3011 = log2(_2739);
        _2832 = (exp2(_3011 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2995 * cbSceneParam._m0[78u].x)) * _2985.x) / cbSceneParam._m0[78u].x)) + _2736;
        _2834 = (exp2(_3011 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2995 * cbSceneParam._m0[78u].y)) * _2985.y) / cbSceneParam._m0[78u].y)) + _2737;
        _2836 = (exp2(_3011 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2995 * cbSceneParam._m0[78u].z)) * _2985.z) / cbSceneParam._m0[78u].z)) + _2738;
        _2838 = _2994 * _2739;
    }
    else
    {
        _2832 = _2736;
        _2834 = _2737;
        _2836 = _2738;
        _2838 = _2739;
    }
    float _2850 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2851 = _2850 == 3.0;
    float _2852 = log2(_2838);
    float _2859 = exp2(_2852 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4578 : (isnan(_4578) ? 1.0 : min(_4578, 1.0))) * (_2681 + ((isnan(0.0) ? _1674 : (isnan(_1674) ? 0.0 : max(_1674, 0.0))) * _950))) + ((_2687 + ((isnan(0.0) ? _1965 : (isnan(_1965) ? 0.0 : max(_1965, 0.0))) * _1753)) * cbPerFrame._m0[3u].x));
    float _2860 = exp2(_2852 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4589 : (isnan(_4589) ? 1.0 : min(_4589, 1.0))) * (_2683 + ((isnan(0.0) ? _1677 : (isnan(_1677) ? 0.0 : max(_1677, 0.0))) * _950))) + ((_2689 + ((isnan(0.0) ? _1968 : (isnan(_1968) ? 0.0 : max(_1968, 0.0))) * _1753)) * cbPerFrame._m0[3u].x));
    float _2861 = exp2(_2852 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4600 : (isnan(_4600) ? 1.0 : min(_4600, 1.0))) * (_2685 + ((isnan(0.0) ? _1680 : (isnan(_1680) ? 0.0 : max(_1680, 0.0))) * _950))) + ((_2691 + ((isnan(0.0) ? _1971 : (isnan(_1971) ? 0.0 : max(_1971, 0.0))) * _1753)) * cbPerFrame._m0[3u].x));
    float _2870 = (_2850 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2870 * (_2851 ? _2859 : (_2859 + (cbSceneParam._m0[72u].w * _2832)));
    SV_Target.y = _2870 * (_2851 ? _2860 : (_2860 + (cbSceneParam._m0[72u].w * _2834)));
    SV_Target.z = _2870 * (_2851 ? _2861 : (_2861 + (cbSceneParam._m0[72u].w * _2836)));
    SV_Target.w = cbInstanceData._m0[_2711].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2711].w;
}


