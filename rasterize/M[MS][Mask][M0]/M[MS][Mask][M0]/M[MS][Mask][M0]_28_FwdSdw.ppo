#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 13) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_22;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_29;
layout(set = 0, binding = 20) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_6;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1353;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _230 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _231 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _232 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _238 = inversesqrt(dot(vec3(_230, _231, _232), vec3(_230, _231, _232)));
    float _239 = _238 * _230;
    float _240 = _238 * _231;
    float _241 = _238 * _232;
    float _245 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _246 = _245 * NORMAL.x;
    float _247 = _245 * NORMAL.y;
    float _248 = _245 * NORMAL.z;
    float _252 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _253 = _252 * TANGENT.x;
    float _254 = _252 * TANGENT.y;
    float _255 = _252 * TANGENT.z;
    float _264 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _266 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _267 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3941 = isnan(0.0) ? _264 : (isnan(_264) ? 0.0 : max(_264, 0.0));
    float _3952 = isnan(0.0) ? _266 : (isnan(_266) ? 0.0 : max(_266, 0.0));
    float _3963 = isnan(0.0) ? _267 : (isnan(_267) ? 0.0 : max(_267, 0.0));
    uint _277 = uint(roundEven(NORMAL.w)) * 13u;
    uint _282 = _277 + 1u;
    uint _286 = _277 + 2u;
    float _295 = sqrt(((cbInstanceData._m0[_282].x * cbInstanceData._m0[_282].x) + (cbInstanceData._m0[_277].x * cbInstanceData._m0[_277].x)) + (cbInstanceData._m0[_286].x * cbInstanceData._m0[_286].x));
    float _296 = _295 * TEXCOORD.z;
    float _297 = _295 * TEXCOORD.w;
    vec4 _310 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _296) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _297) + cbTextureTilingScale._m0[13u].w));
    vec4 _334 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _339 = _334.x * cbMtdParam._m0[11u].x;
    float _340 = _334.y * cbMtdParam._m0[11u].y;
    float _341 = _334.z * cbMtdParam._m0[11u].z;
    vec4 _360 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _296) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _297) + cbTextureTilingScale._m0[5u].w));
    vec4 _411 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _413 = _411.x;
    float _425 = dot(vec4(_413, _411.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _442 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w)).x) * 2.0) - ((((_413 - _425) * cbMtdParam._m0[24u].z) + _425) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3974 = isnan(0.0) ? _442 : (isnan(_442) ? 0.0 : max(_442, 0.0));
    float _443 = isnan(1.0) ? _3974 : (isnan(_3974) ? 1.0 : min(_3974, 1.0));
    float _450 = (_443 * ((_360.x * cbMtdParam._m0[12u].x) - _339)) + _339;
    float _451 = (_443 * ((_360.y * cbMtdParam._m0[12u].y) - _340)) + _340;
    float _452 = (_443 * ((_360.z * cbMtdParam._m0[12u].z) - _341)) + _341;
    float _456 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _310.x) * _450;
    float _459 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _310.y) * _451;
    float _462 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _310.z) * _452;
    float _469 = ((_450 - _456) * (isnan(1.0) ? _3941 : (isnan(_3941) ? 1.0 : min(_3941, 1.0)))) + _456;
    float _470 = ((_451 - _459) * (isnan(1.0) ? _3952 : (isnan(_3952) ? 1.0 : min(_3952, 1.0)))) + _459;
    float _471 = ((_452 - _462) * (isnan(1.0) ? _3963 : (isnan(_3963) ? 1.0 : min(_3963, 1.0)))) + _462;
    vec4 _489 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _296) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _297) + cbTextureTilingScale._m0[20u].w));
    vec4 _516 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _296) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _297) + cbTextureTilingScale._m0[4u].w));
    vec4 _533 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _535 = _533.x;
    float _536 = _533.y;
    float _537 = _533.z;
    float _546 = ((_516.z - _537) * _443) + _537;
    float _549 = ((((_516.x - _535) * _443) + _535) * 2.0) + (-1.0);
    float _550 = ((((_516.y - _536) * _443) + _536) * 2.0) + (-1.0);
    float _551 = dot(vec2(_549, _550), vec2(_549, _550));
    float _3985 = isnan(0.0) ? _551 : (isnan(_551) ? 0.0 : max(_551, 0.0));
    float _556 = sqrt(1.0 - (isnan(1.0) ? _3985 : (isnan(_3985) ? 1.0 : min(_3985, 1.0))));
    vec4 _576 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _588 = (_549 + ((((_489.x * 2.0) + (-1.0)) * TEXCOORD_11.x) * cbMtdParam._m0[20u].x)) + (((_576.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _589 = (_550 + ((((_489.y * 2.0) + (-1.0)) * TEXCOORD_11.y) * cbMtdParam._m0[20u].x)) + (((_576.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _592 = fma(_556, _246, fma(_589, _253, _588 * _239));
    float _595 = fma(_556, _247, fma(_589, _254, _588 * _240));
    float _598 = fma(_556, _248, fma(_589, _255, _588 * _241));
    float _602 = inversesqrt(dot(vec3(_592, _595, _598), vec3(_592, _595, _598)));
    vec4 _629 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _296) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _297) + cbTextureTilingScale._m0[11u].w));
    float _631 = _629.x;
    float _632 = 1.0 - _631;
    float _638 = (cbMtdParam._m0[19u].x + dot(vec4(_602 * _592, _602 * _595, _602 * _598, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_631 - _632) * cbMtdParam._m0[24u].w) + _632) * cbMtdParam._m0[21u].z);
    float _3996 = isnan(0.0) ? _638 : (isnan(_638) ? 0.0 : max(_638, 0.0));
    float _639 = isnan(1.0) ? _3996 : (isnan(_3996) ? 1.0 : min(_3996, 1.0));
    float _641 = (-0.0) - cbMtdParam._m0[24u].x;
    float _643 = isnan(0.0) ? _641 : (isnan(_641) ? 0.0 : max(_641, 0.0));
    float _644 = isnan(1.0) ? _643 : (isnan(_643) ? 1.0 : min(_643, 1.0));
    float _651 = _639 - ((_639 * TEXCOORD_8.x) * _644);
    float _652 = _639 - ((_639 * TEXCOORD_8.y) * _644);
    float _653 = _639 - ((_639 * TEXCOORD_8.z) * _644);
    float _660 = (_651 * (cbMtdParam._m0[17u].x - _469)) + _469;
    float _661 = (_652 * (cbMtdParam._m0[17u].y - _470)) + _470;
    float _662 = (_653 * (cbMtdParam._m0[17u].z - _471)) + _471;
    vec4 _674 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _296) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _297) + cbTextureTilingScale._m0[19u].w));
    float _676 = _674.x;
    float _677 = 1.0 - _676;
    float _703 = (TEXCOORD_8.x - ((cbMtdParam._m0[22u].w * (1.0 - TEXCOORD_8.x)) * ((((_676 - _677) * cbMtdParam._m0[24u].y) + _677) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _4017 = isnan(0.0) ? _703 : (isnan(_703) ? 0.0 : max(_703, 0.0));
    float _704 = isnan(1.0) ? _4017 : (isnan(_4017) ? 1.0 : min(_4017, 1.0));
    float _712 = ((((cbMtdParam._m0[10u].x - _660) * TEXCOORD_8.x) * cbMtdParam._m0[23u].w) * _704) + _660;
    float _713 = ((((cbMtdParam._m0[10u].y - _661) * TEXCOORD_8.y) * cbMtdParam._m0[23u].w) * _704) + _661;
    float _714 = (((cbMtdParam._m0[23u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _662)) * _704) + _662;
    float _719 = (((_489.z - _546) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _546;
    float _723 = ((_576.z - _719) * cbMtdParam._m0[19u].w) + _719;
    vec4 _737 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _296) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _297) + cbTextureTilingScale._m0[15u].w));
    float _744 = (_737.x * 2.0) + (-1.0);
    float _745 = (_737.y * 2.0) + (-1.0);
    float _746 = dot(vec2(_744, _745), vec2(_744, _745));
    float _4028 = isnan(0.0) ? _746 : (isnan(_746) ? 0.0 : max(_746, 0.0));
    float _754 = ((_737.z - _723) * _651) + _723;
    float _757 = ((cbMtdParam._m0[23u].y - _754) * _704) + _754;
    vec4 _776 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _296) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _297) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _782 = (_776.x * 2.0) + (-1.0);
    float _783 = (_776.y * 2.0) + (-1.0);
    float _784 = dot(vec2(_782, _783), vec2(_782, _783));
    float _4039 = isnan(0.0) ? _784 : (isnan(_784) ? 0.0 : max(_784, 0.0));
    float _799 = ((sqrt(1.0 - (isnan(1.0) ? _4028 : (isnan(_4028) ? 1.0 : min(_4028, 1.0)))) - _556) * _653) + _556;
    float _802 = (((_744 - _588) * _651) + _588) + (cbMtdParam._m0[21u].x * _588);
    float _803 = (((_745 - _589) * _652) + _589) + (cbMtdParam._m0[21u].x * _589);
    float _814 = (((_782 - _802) + (_802 * cbMtdParam._m0[22u].z)) * _704) + _802;
    float _815 = (((_783 - _803) + (_803 * cbMtdParam._m0[22u].z)) * _704) + _803;
    float _816 = (_704 * (sqrt(1.0 - (isnan(1.0) ? _4039 : (isnan(_4039) ? 1.0 : min(_4039, 1.0)))) - _799)) + _799;
    float _818 = cbMtdParam._m0[22u].x + _576.w;
    float _821 = fma(_816, _246, fma(_815, _253, _814 * _239));
    float _824 = fma(_816, _247, fma(_815, _254, _814 * _240));
    float _827 = fma(_816, _248, fma(_815, _255, _814 * _241));
    float _831 = inversesqrt(dot(vec3(_821, _824, _827), vec3(_821, _824, _827)));
    float _832 = _831 * _821;
    float _833 = _831 * _824;
    float _834 = _831 * _827;
    float _4050 = isnan(0.0) ? _757 : (isnan(_757) ? 0.0 : max(_757, 0.0));
    float _835 = isnan(1.0) ? _4050 : (isnan(_4050) ? 1.0 : min(_4050, 1.0));
    float _4061 = isnan(0.0) ? _818 : (isnan(_818) ? 0.0 : max(_818, 0.0));
    float _4072 = isnan(0.0) ? _712 : (isnan(_712) ? 0.0 : max(_712, 0.0));
    float _4083 = isnan(0.0) ? _713 : (isnan(_713) ? 0.0 : max(_713, 0.0));
    float _4094 = isnan(0.0) ? _714 : (isnan(_714) ? 0.0 : max(_714, 0.0));
    float _853 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _894 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _904 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _894);
    float _905 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _894);
    float _906 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _894);
    float _910 = inversesqrt(dot(vec3(_904, _905, _906), vec3(_904, _905, _906)));
    float _911 = _904 * _910;
    float _912 = _905 * _910;
    float _913 = _906 * _910;
    float _919 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _920 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _938 = fma(_834, cbSceneParam._m0[5u].z, fma(_833, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _832));
    float _941 = fma(_834, cbSceneParam._m0[6u].z, fma(_833, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _832));
    float _944 = fma(_834, cbSceneParam._m0[7u].z, fma(_833, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _832));
    uint _958 = (_277 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _964 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4072 : (isnan(_4072) ? 1.0 : min(_4072, 1.0)))) * cbInstanceData._m0[_958].x;
    float _965 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4083 : (isnan(_4083) ? 1.0 : min(_4083, 1.0)))) * cbInstanceData._m0[_958].y;
    float _966 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4094 : (isnan(_4094) ? 1.0 : min(_4094, 1.0)))) * cbInstanceData._m0[_958].z;
    float _4105 = isnan(0.0) ? _964 : (isnan(_964) ? 0.0 : max(_964, 0.0));
    float _967 = isnan(1.0) ? _4105 : (isnan(_4105) ? 1.0 : min(_4105, 1.0));
    float _4116 = isnan(0.0) ? _965 : (isnan(_965) ? 0.0 : max(_965, 0.0));
    float _968 = isnan(1.0) ? _4116 : (isnan(_4116) ? 1.0 : min(_4116, 1.0));
    float _4127 = isnan(0.0) ? _966 : (isnan(_966) ? 0.0 : max(_966, 0.0));
    float _969 = isnan(1.0) ? _4127 : (isnan(_4127) ? 1.0 : min(_4127, 1.0));
    vec4 _978 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _919, cbSceneParam._m0[86u].y * _920));
    float _982 = ((isnan(1.0) ? _4061 : (isnan(_4061) ? 1.0 : min(_4061, 1.0))) * TEXCOORD_5.w) * _978.x;
    float _983 = dot(vec3(_832, _833, _834), vec3(_911, _912, _913));
    float _986 = _983 * 2.0;
    float _990 = (_986 * _832) - _911;
    float _991 = (_986 * _833) - _912;
    float _992 = (_986 * _834) - _913;
    float _996 = abs(dot(vec3(_911, _912, _913), vec3(_832, _833, _834)));
    float _4138 = isnan(0.0) ? _996 : (isnan(_996) ? 0.0 : max(_996, 0.0));
    float _998 = sqrt(_835);
    float _1011 = exp2((_998 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4138 : (isnan(_4138) ? 1.0 : min(_4138, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_998 * 3.0));
    float _1043 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1047 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1051 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1352;
    float _1354;
    float _1355;
    float _1356;
    float _1357;
    float _1358;
    float _1359;
    float _1360;
    float _1361;
    float _1362;
    float _1363;
    float _1364;
    float _1365;
    float _1366;
    float _1367;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1077 = fma(_1051, cbModelParam._m0[26u].z, fma(_1047, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1043));
        float _1081 = fma(_1051, cbModelParam._m0[27u].z, fma(_1047, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1043));
        float _1085 = fma(_1051, cbModelParam._m0[28u].z, fma(_1047, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1043));
        float _1110 = _1043 + _832;
        float _1111 = _1047 + _833;
        float _1112 = _1051 + _834;
        float _1122 = fma(_1112, cbModelParam._m0[26u].z, fma(_1111, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1110)) - _1077;
        float _1123 = fma(_1112, cbModelParam._m0[27u].z, fma(_1111, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1110)) - _1081;
        float _1124 = fma(_1112, cbModelParam._m0[28u].z, fma(_1111, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1110)) - _1085;
        float _1128 = inversesqrt(dot(vec3(_1122, _1123, _1124), vec3(_1122, _1123, _1124)));
        float _1141 = ((_1128 * _1122) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1077 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1142 = ((_1128 * _1123) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1081 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1143 = ((_1128 * _1124) / cbModelParam._m0[34u].z) + ((((((_1085 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1146 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1141, _1142, _1143), 0.0);
        vec4 _1153 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1141, _1142, _1143), 0.0);
        vec4 _1160 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1141, _1142, _1143), 0.0);
        vec4 _1167 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1141, _1142, _1143), 0.0);
        float _1180 = exp2((_1146.w + (-0.5)) * 20.0) * 2.0;
        float _1181 = _1180 * (_1146.x + (-0.5));
        float _1182 = _1180 * (_1146.y + (-0.5));
        float _1183 = _1180 * (_1146.z + (-0.5));
        float _1190 = exp2((_1153.w + (-0.5)) * 20.0) * 2.0;
        float _1191 = _1190 * (_1153.x + (-0.5));
        float _1192 = _1190 * (_1153.y + (-0.5));
        float _1193 = _1190 * (_1153.z + (-0.5));
        float _1200 = exp2((_1160.w + (-0.5)) * 20.0) * 2.0;
        float _1201 = _1200 * (_1160.x + (-0.5));
        float _1202 = _1200 * (_1160.y + (-0.5));
        float _1203 = _1200 * (_1160.z + (-0.5));
        float _1210 = exp2((_1167.w + (-0.5)) * 20.0) * 2.0;
        float _1211 = _1210 * (_1167.x + (-0.5));
        float _1212 = _1210 * (_1167.y + (-0.5));
        float _1213 = _1210 * (_1167.z + (-0.5));
        float _1214 = isnan(0.0) ? _1211 : (isnan(_1211) ? 0.0 : max(_1211, 0.0));
        float _1215 = isnan(0.0) ? _1212 : (isnan(_1212) ? 0.0 : max(_1212, 0.0));
        float _1216 = isnan(0.0) ? _1213 : (isnan(_1213) ? 0.0 : max(_1213, 0.0));
        float _1217 = _1181 * 0.5;
        float _1218 = _1191 * 0.5;
        float _1219 = _1201 * 0.5;
        float _1220 = dot(vec3(_1217, _1218, _1219), vec3(_1217, _1218, _1219));
        float _1225 = (_1220 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1220);
        float _1234 = (dot(vec3(_832, _833, _834), vec3(_1225 * _1217, _1225 * _1218, _1225 * _1219)) + 1.0) * 0.5;
        float _4164 = isnan(0.0) ? _1234 : (isnan(_1234) ? 0.0 : max(_1234, 0.0));
        float _1244 = sqrt(((_1218 * _1218) + (_1217 * _1217)) + (_1219 * _1219)) / (_1214 + 9.9999997473787516355514526367188e-06);
        float _4175 = isnan(0.0) ? _1244 : (isnan(_1244) ? 0.0 : max(_1244, 0.0));
        float _1245 = isnan(1.0) ? _4175 : (isnan(_4175) ? 1.0 : min(_4175, 1.0));
        float _1246 = _1245 * 2.0;
        float _1250 = (1.0 - _1245) / (_1245 + 1.0);
        float _4186 = isnan(0.0) ? _1250 : (isnan(_1250) ? 0.0 : max(_1250, 0.0));
        float _1251 = isnan(1.0) ? _4186 : (isnan(_4186) ? 1.0 : min(_4186, 1.0));
        float _1260 = ((((1.0 - _1251) * (_1246 + 2.0)) * exp2(log2(isnan(1.0) ? _4164 : (isnan(_4164) ? 1.0 : min(_4164, 1.0))) * (_1246 + 1.0))) + _1251) * _1214;
        float _1261 = _1182 * 0.5;
        float _1262 = _1192 * 0.5;
        float _1263 = _1202 * 0.5;
        float _1264 = dot(vec3(_1261, _1262, _1263), vec3(_1261, _1262, _1263));
        float _1269 = (_1264 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1264);
        float _1277 = (dot(vec3(_832, _833, _834), vec3(_1269 * _1261, _1269 * _1262, _1269 * _1263)) + 1.0) * 0.5;
        float _4197 = isnan(0.0) ? _1277 : (isnan(_1277) ? 0.0 : max(_1277, 0.0));
        float _1286 = sqrt(((_1262 * _1262) + (_1261 * _1261)) + (_1263 * _1263)) / (_1215 + 9.9999997473787516355514526367188e-06);
        float _4208 = isnan(0.0) ? _1286 : (isnan(_1286) ? 0.0 : max(_1286, 0.0));
        float _1287 = isnan(1.0) ? _4208 : (isnan(_4208) ? 1.0 : min(_4208, 1.0));
        float _1288 = _1287 * 2.0;
        float _1292 = (1.0 - _1287) / (_1287 + 1.0);
        float _4219 = isnan(0.0) ? _1292 : (isnan(_1292) ? 0.0 : max(_1292, 0.0));
        float _1293 = isnan(1.0) ? _4219 : (isnan(_4219) ? 1.0 : min(_4219, 1.0));
        float _1302 = ((((1.0 - _1293) * (_1288 + 2.0)) * exp2(log2(isnan(1.0) ? _4197 : (isnan(_4197) ? 1.0 : min(_4197, 1.0))) * (_1288 + 1.0))) + _1293) * _1215;
        float _1303 = _1183 * 0.5;
        float _1304 = _1193 * 0.5;
        float _1305 = _1203 * 0.5;
        float _1306 = dot(vec3(_1303, _1304, _1305), vec3(_1303, _1304, _1305));
        float _1311 = (_1306 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1306);
        float _1319 = (dot(vec3(_832, _833, _834), vec3(_1311 * _1303, _1311 * _1304, _1311 * _1305)) + 1.0) * 0.5;
        float _4230 = isnan(0.0) ? _1319 : (isnan(_1319) ? 0.0 : max(_1319, 0.0));
        float _1328 = sqrt(((_1304 * _1304) + (_1303 * _1303)) + (_1305 * _1305)) / (_1216 + 9.9999997473787516355514526367188e-06);
        float _4241 = isnan(0.0) ? _1328 : (isnan(_1328) ? 0.0 : max(_1328, 0.0));
        float _1329 = isnan(1.0) ? _4241 : (isnan(_4241) ? 1.0 : min(_4241, 1.0));
        float _1330 = _1329 * 2.0;
        float _1334 = (1.0 - _1329) / (_1329 + 1.0);
        float _4252 = isnan(0.0) ? _1334 : (isnan(_1334) ? 0.0 : max(_1334, 0.0));
        float _1335 = isnan(1.0) ? _4252 : (isnan(_4252) ? 1.0 : min(_4252, 1.0));
        float _1344 = ((((1.0 - _1335) * (_1330 + 2.0)) * exp2(log2(isnan(1.0) ? _4230 : (isnan(_4230) ? 1.0 : min(_4230, 1.0))) * (_1330 + 1.0))) + _1335) * _1216;
        _1352 = _1183;
        _1354 = _1182;
        _1355 = _1181;
        _1356 = _1193;
        _1357 = _1192;
        _1358 = _1191;
        _1359 = _1203;
        _1360 = _1202;
        _1361 = _1201;
        _1362 = _1216;
        _1363 = _1215;
        _1364 = _1214;
        _1365 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1260 : (isnan(_1260) ? 0.0 : max(_1260, 0.0)));
        _1366 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1302 : (isnan(_1302) ? 0.0 : max(_1302, 0.0)));
        _1367 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1344 : (isnan(_1344) ? 0.0 : max(_1344, 0.0)));
    }
    else
    {
        _1352 = _1353;
        _1354 = _1353;
        _1355 = _1353;
        _1356 = _1353;
        _1357 = _1353;
        _1358 = _1353;
        _1359 = _1353;
        _1360 = _1353;
        _1361 = _1353;
        _1362 = _1353;
        _1363 = _1353;
        _1364 = _1353;
        _1365 = 0.0;
        _1366 = 0.0;
        _1367 = 0.0;
    }
    float _1661;
    float _1662;
    float _1663;
    float _1664;
    float _1665;
    float _1666;
    float _1667;
    float _1668;
    float _1669;
    float _1670;
    float _1671;
    float _1672;
    float _1673;
    float _1674;
    float _1675;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1392 = fma(_1051, cbModelParam._m0[30u].z, fma(_1047, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1043));
        float _1396 = fma(_1051, cbModelParam._m0[31u].z, fma(_1047, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1043));
        float _1400 = fma(_1051, cbModelParam._m0[32u].z, fma(_1047, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1043));
        float _1423 = _1043 + _832;
        float _1424 = _1047 + _833;
        float _1425 = _1051 + _834;
        float _1435 = fma(_1425, cbModelParam._m0[30u].z, fma(_1424, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1423)) - _1392;
        float _1436 = fma(_1425, cbModelParam._m0[31u].z, fma(_1424, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1423)) - _1396;
        float _1437 = fma(_1425, cbModelParam._m0[32u].z, fma(_1424, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1423)) - _1400;
        float _1441 = inversesqrt(dot(vec3(_1435, _1436, _1437), vec3(_1435, _1436, _1437)));
        float _1454 = ((_1441 * _1435) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1392 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1455 = ((_1441 * _1436) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1396 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1456 = ((_1441 * _1437) / cbModelParam._m0[35u].z) + ((((((_1400 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1458 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1454, _1455, _1456), 0.0);
        vec4 _1465 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1454, _1455, _1456), 0.0);
        vec4 _1472 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1454, _1455, _1456), 0.0);
        vec4 _1479 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1454, _1455, _1456), 0.0);
        float _1491 = exp2((_1458.w + (-0.5)) * 20.0) * 2.0;
        float _1492 = _1491 * (_1458.x + (-0.5));
        float _1493 = _1491 * (_1458.y + (-0.5));
        float _1494 = _1491 * (_1458.z + (-0.5));
        float _1501 = exp2((_1465.w + (-0.5)) * 20.0) * 2.0;
        float _1502 = _1501 * (_1465.x + (-0.5));
        float _1503 = _1501 * (_1465.y + (-0.5));
        float _1504 = _1501 * (_1465.z + (-0.5));
        float _1511 = exp2((_1472.w + (-0.5)) * 20.0) * 2.0;
        float _1512 = _1511 * (_1472.x + (-0.5));
        float _1513 = _1511 * (_1472.y + (-0.5));
        float _1514 = _1511 * (_1472.z + (-0.5));
        float _1521 = exp2((_1479.w + (-0.5)) * 20.0) * 2.0;
        float _1522 = _1521 * (_1479.x + (-0.5));
        float _1523 = _1521 * (_1479.y + (-0.5));
        float _1524 = _1521 * (_1479.z + (-0.5));
        float _1525 = isnan(0.0) ? _1522 : (isnan(_1522) ? 0.0 : max(_1522, 0.0));
        float _1526 = isnan(0.0) ? _1523 : (isnan(_1523) ? 0.0 : max(_1523, 0.0));
        float _1527 = isnan(0.0) ? _1524 : (isnan(_1524) ? 0.0 : max(_1524, 0.0));
        float _1528 = _1492 * 0.5;
        float _1529 = _1502 * 0.5;
        float _1530 = _1512 * 0.5;
        float _1531 = dot(vec3(_1528, _1529, _1530), vec3(_1528, _1529, _1530));
        float _1536 = (_1531 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1531);
        float _1544 = (dot(vec3(_832, _833, _834), vec3(_1536 * _1528, _1536 * _1529, _1536 * _1530)) + 1.0) * 0.5;
        float _4293 = isnan(0.0) ? _1544 : (isnan(_1544) ? 0.0 : max(_1544, 0.0));
        float _1553 = sqrt(((_1529 * _1529) + (_1528 * _1528)) + (_1530 * _1530)) / (_1525 + 9.9999997473787516355514526367188e-06);
        float _4304 = isnan(0.0) ? _1553 : (isnan(_1553) ? 0.0 : max(_1553, 0.0));
        float _1554 = isnan(1.0) ? _4304 : (isnan(_4304) ? 1.0 : min(_4304, 1.0));
        float _1555 = _1554 * 2.0;
        float _1559 = (1.0 - _1554) / (_1554 + 1.0);
        float _4315 = isnan(0.0) ? _1559 : (isnan(_1559) ? 0.0 : max(_1559, 0.0));
        float _1560 = isnan(1.0) ? _4315 : (isnan(_4315) ? 1.0 : min(_4315, 1.0));
        float _1569 = ((((1.0 - _1560) * (_1555 + 2.0)) * exp2(log2(isnan(1.0) ? _4293 : (isnan(_4293) ? 1.0 : min(_4293, 1.0))) * (_1555 + 1.0))) + _1560) * _1525;
        float _1570 = _1493 * 0.5;
        float _1571 = _1503 * 0.5;
        float _1572 = _1513 * 0.5;
        float _1573 = dot(vec3(_1570, _1571, _1572), vec3(_1570, _1571, _1572));
        float _1578 = (_1573 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1573);
        float _1586 = (dot(vec3(_832, _833, _834), vec3(_1578 * _1570, _1578 * _1571, _1578 * _1572)) + 1.0) * 0.5;
        float _4326 = isnan(0.0) ? _1586 : (isnan(_1586) ? 0.0 : max(_1586, 0.0));
        float _1595 = sqrt(((_1571 * _1571) + (_1570 * _1570)) + (_1572 * _1572)) / (_1526 + 9.9999997473787516355514526367188e-06);
        float _4337 = isnan(0.0) ? _1595 : (isnan(_1595) ? 0.0 : max(_1595, 0.0));
        float _1596 = isnan(1.0) ? _4337 : (isnan(_4337) ? 1.0 : min(_4337, 1.0));
        float _1597 = _1596 * 2.0;
        float _1601 = (1.0 - _1596) / (_1596 + 1.0);
        float _4348 = isnan(0.0) ? _1601 : (isnan(_1601) ? 0.0 : max(_1601, 0.0));
        float _1602 = isnan(1.0) ? _4348 : (isnan(_4348) ? 1.0 : min(_4348, 1.0));
        float _1611 = ((((1.0 - _1602) * (_1597 + 2.0)) * exp2(log2(isnan(1.0) ? _4326 : (isnan(_4326) ? 1.0 : min(_4326, 1.0))) * (_1597 + 1.0))) + _1602) * _1526;
        float _1612 = _1494 * 0.5;
        float _1613 = _1504 * 0.5;
        float _1614 = _1514 * 0.5;
        float _1615 = dot(vec3(_1612, _1613, _1614), vec3(_1612, _1613, _1614));
        float _1620 = (_1615 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1615);
        float _1628 = (dot(vec3(_832, _833, _834), vec3(_1620 * _1612, _1620 * _1613, _1620 * _1614)) + 1.0) * 0.5;
        float _4359 = isnan(0.0) ? _1628 : (isnan(_1628) ? 0.0 : max(_1628, 0.0));
        float _1637 = sqrt(((_1613 * _1613) + (_1612 * _1612)) + (_1614 * _1614)) / (_1527 + 9.9999997473787516355514526367188e-06);
        float _4370 = isnan(0.0) ? _1637 : (isnan(_1637) ? 0.0 : max(_1637, 0.0));
        float _1638 = isnan(1.0) ? _4370 : (isnan(_4370) ? 1.0 : min(_4370, 1.0));
        float _1639 = _1638 * 2.0;
        float _1643 = (1.0 - _1638) / (_1638 + 1.0);
        float _4381 = isnan(0.0) ? _1643 : (isnan(_1643) ? 0.0 : max(_1643, 0.0));
        float _1644 = isnan(1.0) ? _4381 : (isnan(_4381) ? 1.0 : min(_4381, 1.0));
        float _1653 = ((((1.0 - _1644) * (_1639 + 2.0)) * exp2(log2(isnan(1.0) ? _4359 : (isnan(_4359) ? 1.0 : min(_4359, 1.0))) * (_1639 + 1.0))) + _1644) * _1527;
        _1661 = _1494;
        _1662 = _1493;
        _1663 = _1492;
        _1664 = _1504;
        _1665 = _1503;
        _1666 = _1502;
        _1667 = _1514;
        _1668 = _1513;
        _1669 = _1512;
        _1670 = _1527;
        _1671 = _1526;
        _1672 = _1525;
        _1673 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1569 : (isnan(_1569) ? 0.0 : max(_1569, 0.0)));
        _1674 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1611 : (isnan(_1611) ? 0.0 : max(_1611, 0.0)));
        _1675 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1653 : (isnan(_1653) ? 0.0 : max(_1653, 0.0)));
    }
    else
    {
        _1661 = _1353;
        _1662 = _1353;
        _1663 = _1353;
        _1664 = _1353;
        _1665 = _1353;
        _1666 = _1353;
        _1667 = _1353;
        _1668 = _1353;
        _1669 = _1353;
        _1670 = _1353;
        _1671 = _1353;
        _1672 = _1353;
        _1673 = 0.0;
        _1674 = 0.0;
        _1675 = 0.0;
    }
    float _1685 = (cbModelParam._m0[1u].x * (_1673 - _1365)) + _1365;
    float _1686 = (cbModelParam._m0[1u].x * (_1674 - _1366)) + _1366;
    float _1687 = (cbModelParam._m0[1u].x * (_1675 - _1367)) + _1367;
    float _1708 = fma(_1687, cbSceneParam._m0[89u].z, fma(_1686, cbSceneParam._m0[89u].y, _1685 * cbSceneParam._m0[89u].x));
    float _1711 = fma(_1687, cbSceneParam._m0[90u].z, fma(_1686, cbSceneParam._m0[90u].y, _1685 * cbSceneParam._m0[90u].x));
    float _1714 = fma(_1687, cbSceneParam._m0[91u].z, fma(_1686, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1685));
    float _1729 = _990 * 0.5;
    float _1730 = _991 * 0.5;
    float _1731 = _992 * 0.5;
    float _1732 = dot(vec4(_1729, _1730, _1731, 1.0), vec4(_1663, _1666, _1669, _1672));
    float _1735 = dot(vec4(_1729, _1730, _1731, 1.0), vec4(_1662, _1665, _1668, _1671));
    float _1738 = dot(vec4(_1729, _1730, _1731, 1.0), vec4(_1661, _1664, _1667, _1670));
    float _1772;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1745 = dot(vec4(_1729, _1730, _1731, 1.0), vec4(_1352, _1356, _1359, _1362));
        float _1749 = dot(vec4(_1729, _1730, _1731, 1.0), vec4(_1354, _1357, _1360, _1363));
        float _1753 = dot(vec4(_1729, _1730, _1731, 1.0), vec4(_1355, _1358, _1361, _1364));
        float _1760 = dot(vec4(cbModelParam._m0[39u]), vec4(_1729, _1730, _1731, 1.0));
        _1772 = dot(vec3(isnan(0.0) ? _1753 : (isnan(_1753) ? 0.0 : max(_1753, 0.0)), isnan(0.0) ? _1749 : (isnan(_1749) ? 0.0 : max(_1749, 0.0)), isnan(0.0) ? _1745 : (isnan(_1745) ? 0.0 : max(_1745, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1760) ? 0.0 : (isnan(0.0) ? _1760 : max(0.0, _1760))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1772 = 1.0;
    }
    float _1783;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1774 = dot(vec4(cbModelParam._m0[40u]), vec4(_1729, _1730, _1731, 1.0));
        _1783 = dot(vec3(isnan(0.0) ? _1732 : (isnan(_1732) ? 0.0 : max(_1732, 0.0)), isnan(0.0) ? _1735 : (isnan(_1735) ? 0.0 : max(_1735, 0.0)), isnan(0.0) ? _1738 : (isnan(_1738) ? 0.0 : max(_1738, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1774) ? 0.0 : (isnan(0.0) ? _1774 : max(0.0, _1774))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1783 = 1.0;
    }
    float _1787 = (_1783 * cbModelParam._m0[1u].x) + (_1772 * (1.0 - cbModelParam._m0[1u].x));
    float _1797 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _835);
    float _1798 = isnan(_1797) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1797 : min(cbModelParam._m0[25u].z, _1797));
    float _1879;
    float _1881;
    float _1883;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1846 = fma(_1051, cbModelParam._m0[13u].z, fma(_1047, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1043)) + cbModelParam._m0[13u].w;
        float _1850 = fma(_1051, cbModelParam._m0[14u].z, fma(_1047, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1043)) + cbModelParam._m0[14u].w;
        float _1854 = fma(_1051, cbModelParam._m0[15u].z, fma(_1047, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1043)) + cbModelParam._m0[15u].w;
        float _1857 = fma(_992, cbModelParam._m0[13u].z, fma(_991, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _990));
        float _1860 = fma(_992, cbModelParam._m0[14u].z, fma(_991, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _990));
        float _1863 = fma(_992, cbModelParam._m0[15u].z, fma(_991, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _990));
        float _1891;
        if (_1857 > 0.0)
        {
            _1891 = abs((1.0 - _1846) / _1857);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1857 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1846 + 1.0) / _1857);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1891 = frontier_phi_14_12_ladder;
        }
        float _2061;
        if (_1860 > 0.0)
        {
            _2061 = abs((1.0 - _1850) / _1860);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1860 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1850 + 1.0) / _1860);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2061 = frontier_phi_23_19_ladder;
        }
        float _2356;
        if (_1863 > 0.0)
        {
            _2356 = abs((1.0 - _1854) / _1863);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1863 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1854 + 1.0) / _1863);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2356 = frontier_phi_35_30_ladder;
        }
        float _2358 = isnan(_2061) ? _1891 : (isnan(_1891) ? _2061 : min(_1891, _2061));
        float _2359 = isnan(_2356) ? _2358 : (isnan(_2358) ? _2356 : min(_2358, _2356));
        float _2363 = (_2359 * _1857) + _1846;
        float _2364 = (_2359 * _1860) + _1850;
        float _2365 = (_2359 * _1863) + _1854;
        float _2366 = _2359 * 9.9999997473787516355514526367188e-05;
        float _2368 = (-1.0) - _2366;
        float _2370 = _2366 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2365 > _2370) || ((_2365 < _2368) || ((_2364 > _2370) || ((_2364 < _2368) || ((_2363 < _2368) || (_2363 > _2370))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2510 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2365, cbModelParam._m0[9u].z, fma(_2364, cbModelParam._m0[9u].y, _2363 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2365, cbModelParam._m0[10u].z, fma(_2364, cbModelParam._m0[10u].y, _2363 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2365, cbModelParam._m0[11u].z, fma(_2364, cbModelParam._m0[11u].y, _2363 * cbModelParam._m0[11u].x))), _1798);
            frontier_phi_13_35_ladder = _2510.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2510.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2510.x * cbModelParam._m0[1u].y;
        }
        _1879 = frontier_phi_13_35_ladder_2;
        _1881 = frontier_phi_13_35_ladder_1;
        _1883 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1867 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_990, _991, _992), _1798);
        _1879 = _1867.x * cbModelParam._m0[1u].y;
        _1881 = _1867.y * cbModelParam._m0[1u].y;
        _1883 = _1867.z * cbModelParam._m0[1u].y;
    }
    float _1887 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _835);
    float _1888 = isnan(_1887) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1887 : min(cbModelParam._m0[25u].w, _1887));
    float _1978;
    float _1980;
    float _1982;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1942 = fma(_1051, cbModelParam._m0[21u].z, fma(_1047, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1043)) + cbModelParam._m0[21u].w;
        float _1946 = fma(_1051, cbModelParam._m0[22u].z, fma(_1047, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1043)) + cbModelParam._m0[22u].w;
        float _1950 = fma(_1051, cbModelParam._m0[23u].z, fma(_1047, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1043)) + cbModelParam._m0[23u].w;
        float _1953 = fma(_992, cbModelParam._m0[21u].z, fma(_991, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _990));
        float _1956 = fma(_992, cbModelParam._m0[22u].z, fma(_991, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _990));
        float _1959 = fma(_992, cbModelParam._m0[23u].z, fma(_991, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _990));
        float _2066;
        if (_1953 > 0.0)
        {
            _2066 = abs((1.0 - _1942) / _1953);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1953 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1942 + 1.0) / _1953);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2066 = frontier_phi_25_21_ladder;
        }
        float _2383;
        if (_1956 > 0.0)
        {
            _2383 = abs((1.0 - _1946) / _1956);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1956 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1946 + 1.0) / _1956);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2383 = frontier_phi_37_32_ladder;
        }
        float _2710;
        if (_1959 > 0.0)
        {
            _2710 = abs((1.0 - _1950) / _1959);
        }
        else
        {
            float frontier_phi_47_44_ladder;
            if (_1959 < 0.0)
            {
                frontier_phi_47_44_ladder = abs((_1950 + 1.0) / _1959);
            }
            else
            {
                frontier_phi_47_44_ladder = 5000.0;
            }
            _2710 = frontier_phi_47_44_ladder;
        }
        float _2712 = isnan(_2383) ? _2066 : (isnan(_2066) ? _2383 : min(_2066, _2383));
        float _2713 = isnan(_2710) ? _2712 : (isnan(_2712) ? _2710 : min(_2712, _2710));
        float _2717 = (_2713 * _1953) + _1942;
        float _2718 = (_2713 * _1956) + _1946;
        float _2719 = (_2713 * _1959) + _1950;
        float _2720 = _2713 * 9.9999997473787516355514526367188e-05;
        float _2721 = (-1.0) - _2720;
        float _2723 = _2720 + 1.0;
        float frontier_phi_22_47_ladder;
        float frontier_phi_22_47_ladder_1;
        float frontier_phi_22_47_ladder_2;
        if ((_2719 > _2723) || ((_2719 < _2721) || ((_2718 > _2723) || ((_2718 < _2721) || ((_2717 < _2721) || (_2717 > _2723))))))
        {
            frontier_phi_22_47_ladder = 0.0;
            frontier_phi_22_47_ladder_1 = 0.0;
            frontier_phi_22_47_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2837 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2719, cbModelParam._m0[17u].z, fma(_2718, cbModelParam._m0[17u].y, _2717 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2719, cbModelParam._m0[18u].z, fma(_2718, cbModelParam._m0[18u].y, _2717 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2719, cbModelParam._m0[19u].z, fma(_2718, cbModelParam._m0[19u].y, _2717 * cbModelParam._m0[19u].x))), _1888);
            frontier_phi_22_47_ladder = _2837.z * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_1 = _2837.y * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_2 = _2837.x * cbModelParam._m0[1u].z;
        }
        _1978 = frontier_phi_22_47_ladder_2;
        _1980 = frontier_phi_22_47_ladder_1;
        _1982 = frontier_phi_22_47_ladder;
    }
    else
    {
        vec4 _1962 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_990, _991, _992), _1888);
        _1978 = _1962.x * cbModelParam._m0[1u].z;
        _1980 = _1962.y * cbModelParam._m0[1u].z;
        _1982 = _1962.z * cbModelParam._m0[1u].z;
    }
    float _1994 = ((((1.0 - _1011) * ((_998 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_1011 * _998)) * _982;
    float _1995 = _1994 * ((cbModelParam._m0[1u].w * (_1978 - _1879)) + _1879);
    float _1996 = _1994 * ((cbModelParam._m0[1u].w * (_1980 - _1881)) + _1881);
    float _1997 = _1994 * ((cbModelParam._m0[1u].w * (_1982 - _1883)) + _1883);
    float _2000 = fma(_1997, cbSceneParam._m0[89u].z, fma(_1996, cbSceneParam._m0[89u].y, _1995 * cbSceneParam._m0[89u].x));
    float _2003 = fma(_1997, cbSceneParam._m0[90u].z, fma(_1996, cbSceneParam._m0[90u].y, _1995 * cbSceneParam._m0[90u].x));
    float _2006 = fma(_1997, cbSceneParam._m0[91u].z, fma(_1996, cbSceneParam._m0[91u].y, _1995 * cbSceneParam._m0[91u].x));
    float _2040 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2044 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2048 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2052 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2053 = _2040 / _2052;
    float _2054 = _2044 / _2052;
    float _2055 = _2048 / _2052;
    float _2202;
    float _2203;
    float _2204;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2082 = ((uint(_2055 > cbSceneParam._m0[59u].y) + uint(_2055 > cbSceneParam._m0[59u].x)) + uint(_2055 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2083 = _2082 + 43u;
        uint _2091 = _2082 + 44u;
        uint _2099 = _2082 + 45u;
        uint _2107 = _2082 + 46u;
        float _2118 = fma(_2052, cbSceneParam._m0[_2083].w, fma(_2048, cbSceneParam._m0[_2083].z, fma(_2044, cbSceneParam._m0[_2083].y, _2040 * cbSceneParam._m0[_2083].x)));
        float _2122 = fma(_2052, cbSceneParam._m0[_2091].w, fma(_2048, cbSceneParam._m0[_2091].z, fma(_2044, cbSceneParam._m0[_2091].y, _2040 * cbSceneParam._m0[_2091].x)));
        float _2130 = fma(_2052, cbSceneParam._m0[_2107].w, fma(_2048, cbSceneParam._m0[_2107].z, fma(_2044, cbSceneParam._m0[_2107].y, _2040 * cbSceneParam._m0[_2107].x)));
        float _2135 = cbSceneParam._m0[33u].z * _2130;
        float _2137 = cbSceneParam._m0[33u].w * _2130;
        float _2140 = fma(_2052, cbSceneParam._m0[_2099].w, fma(_2048, cbSceneParam._m0[_2099].z, fma(_2044, cbSceneParam._m0[_2099].y, _2040 * cbSceneParam._m0[_2099].x))) / _2130;
        float _2188 = (cbSceneParam._m0[33u].x - sqrt(((_2054 * _2054) + (_2053 * _2053)) + (_2055 * _2055))) * cbSceneParam._m0[33u].y;
        float _4507 = isnan(0.0) ? _2188 : (isnan(_2188) ? 0.0 : max(_2188, 0.0));
        float _2195 = (isnan(1.0) ? _4507 : (isnan(_4507) ? 1.0 : min(_4507, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2135 + _2118) / _2130, (_2137 + _2122) / _2130), _2140), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2137 + _2118) / _2130, (_2122 - _2135) / _2130), _2140), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2118 - _2135) / _2130, (_2122 - _2137) / _2130), _2140), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2118 - _2137) / _2130, (_2135 + _2122) / _2130), _2140), 0.0)).x), vec4(0.25)));
        _2202 = 1.0 - (_2195 * cbSceneParam._m0[34u].x);
        _2203 = 1.0 - (_2195 * cbSceneParam._m0[34u].y);
        _2204 = 1.0 - (_2195 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2202 = 1.0;
        _2203 = 1.0;
        _2204 = 1.0;
    }
    float _2268;
    float _2270;
    float _2272;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2256 = fma(_2052, cbSceneParam._m0[63u].w, fma(_2048, cbSceneParam._m0[63u].z, fma(_2044, cbSceneParam._m0[63u].y, _2040 * cbSceneParam._m0[63u].x)));
        float _2257 = fma(_2052, cbSceneParam._m0[60u].w, fma(_2048, cbSceneParam._m0[60u].z, fma(_2044, cbSceneParam._m0[60u].y, _2040 * cbSceneParam._m0[60u].x))) / _2256;
        float _2258 = fma(_2052, cbSceneParam._m0[61u].w, fma(_2048, cbSceneParam._m0[61u].z, fma(_2044, cbSceneParam._m0[61u].y, _2040 * cbSceneParam._m0[61u].x))) / _2256;
        float frontier_phi_34_33_ladder;
        float frontier_phi_34_33_ladder_1;
        float frontier_phi_34_33_ladder_2;
        if ((((_2257 >= cbSceneParam._m0[64u].x) && (_2258 >= cbSceneParam._m0[64u].y)) && (_2257 <= cbSceneParam._m0[64u].z)) && (_2258 <= cbSceneParam._m0[64u].w))
        {
            float _2396 = fma(_2052, cbSceneParam._m0[62u].w, fma(_2048, cbSceneParam._m0[62u].z, fma(_2044, cbSceneParam._m0[62u].y, _2040 * cbSceneParam._m0[62u].x))) / _2256;
            float _2400 = isnan(cbSceneParam._m0[41u].w) ? _2396 : (isnan(_2396) ? cbSceneParam._m0[41u].w : max(_2396, cbSceneParam._m0[41u].w));
            float _2443 = (cbSceneParam._m0[33u].x - sqrt(((_2054 * _2054) + (_2053 * _2053)) + (_2055 * _2055))) * cbSceneParam._m0[33u].y;
            float _4523 = isnan(0.0) ? _2443 : (isnan(_2443) ? 0.0 : max(_2443, 0.0));
            float _2450 = (isnan(1.0) ? _4523 : (isnan(_4523) ? 1.0 : min(_4523, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2257, cbSceneParam._m0[33u].w + _2258), _2400), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2257, _2258 - cbSceneParam._m0[33u].z), _2400), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2257 - cbSceneParam._m0[33u].z, _2258 - cbSceneParam._m0[33u].w), _2400), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2257 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2258), _2400), 0.0)).x), vec4(0.25)));
            float _2454 = 1.0 - (_2450 * cbSceneParam._m0[34u].x);
            float _2455 = 1.0 - (_2450 * cbSceneParam._m0[34u].y);
            float _2456 = 1.0 - (_2450 * cbSceneParam._m0[34u].z);
            frontier_phi_34_33_ladder = isnan(_2456) ? _2204 : (isnan(_2204) ? _2456 : min(_2204, _2456));
            frontier_phi_34_33_ladder_1 = isnan(_2455) ? _2203 : (isnan(_2203) ? _2455 : min(_2203, _2455));
            frontier_phi_34_33_ladder_2 = isnan(_2454) ? _2202 : (isnan(_2202) ? _2454 : min(_2202, _2454));
        }
        else
        {
            frontier_phi_34_33_ladder = _2204;
            frontier_phi_34_33_ladder_1 = _2203;
            frontier_phi_34_33_ladder_2 = _2202;
        }
        _2268 = frontier_phi_34_33_ladder_2;
        _2270 = frontier_phi_34_33_ladder_1;
        _2272 = frontier_phi_34_33_ladder;
    }
    else
    {
        _2268 = _2202;
        _2270 = _2203;
        _2272 = _2204;
    }
    uvec4 _2277 = floatBitsToUint(cbInstanceData._m0[_277 + 5u]);
    uint _2279 = _2277.x * 14u;
    uint _2280 = _2279 + 13u;
    float _2287 = _982 + (-1.0);
    float _2292 = (cbLight._m0[_2280].x * _2287) + 1.0;
    float _2293 = (cbLight._m0[_2280].y * _2287) + 1.0;
    float _2294 = (cbLight._m0[_2280].z * _2287) + 1.0;
    float _2295 = (cbLight._m0[_2280].w * _2287) + 1.0;
    uint _2296 = _2279 + 5u;
    float _2302 = isnan(1.0) ? _2293 : (isnan(_2293) ? 1.0 : min(_2293, 1.0));
    uint _2306 = _2279 + 4u;
    float _2315 = isnan(1.0) ? _2292 : (isnan(_2292) ? 1.0 : min(_2292, 1.0));
    uint _2319 = _2279 | 1u;
    float _2330 = dot(vec3(cbLight._m0[_2279].xyz), vec3(_832, _833, _834));
    float _2333 = dot(vec3(cbLight._m0[_2319].xyz), vec3(_832, _833, _834));
    float _4559 = isnan(0.0) ? _2330 : (isnan(_2330) ? 0.0 : max(_2330, 0.0));
    float _4570 = isnan(0.0) ? _2333 : (isnan(_2333) ? 0.0 : max(_2333, 0.0));
    float _2338 = (isnan(1.0) ? _4559 : (isnan(_4559) ? 1.0 : min(_4559, 1.0))) * 0.3183098733425140380859375;
    float _2340 = (isnan(1.0) ? _4570 : (isnan(_4570) ? 1.0 : min(_4570, 1.0))) * 0.3183098733425140380859375;
    float _2347 = ((cbLight._m0[_2296].x * _2302) * _2340) + (((cbLight._m0[_2306].x * _2268) * _2315) * _2338);
    float _2348 = ((_2302 * cbLight._m0[_2296].y) * _2340) + (((cbLight._m0[_2306].y * _2270) * _2315) * _2338);
    float _2349 = ((_2302 * cbLight._m0[_2296].z) * _2340) + (((cbLight._m0[_2306].z * _2272) * _2315) * _2338);
    uvec4 _2353 = floatBitsToUint(cbLight._m0[_2279 + 12u]);
    bool _2355 = _2353.x == 0u;
    float _2457;
    float _2459;
    float _2461;
    if (_2355)
    {
        _2457 = _2347;
        _2459 = _2348;
        _2461 = _2349;
    }
    else
    {
        uint _2465 = _2279 + 6u;
        float _2481 = (dot(vec3(cbLight._m0[_2279 + 2u].xyz), vec3(_832, _833, _834)) * 0.5) + 0.5;
        float _2482 = _2481 * _2481;
        float _4581 = isnan(0.0) ? _2482 : (isnan(_2482) ? 0.0 : max(_2482, 0.0));
        float _2483 = isnan(1.0) ? _4581 : (isnan(_4581) ? 1.0 : min(_4581, 1.0));
        float _2484 = isnan(1.0) ? _2294 : (isnan(_2294) ? 1.0 : min(_2294, 1.0));
        _2457 = (((cbLight._m0[_2465].x * 0.3183098733425140380859375) * _2483) * _2484) + _2347;
        _2459 = (((cbLight._m0[_2465].y * 0.3183098733425140380859375) * _2483) * _2484) + _2348;
        _2461 = (((cbLight._m0[_2465].z * 0.3183098733425140380859375) * _2483) * _2484) + _2349;
    }
    bool _2464 = _2353.y == 0u;
    float _2519;
    float _2521;
    float _2523;
    if (_2464)
    {
        _2519 = _2457;
        _2521 = _2459;
        _2523 = _2461;
    }
    else
    {
        uint _2681 = _2279 + 7u;
        float _2697 = (dot(vec3(cbLight._m0[_2279 + 3u].xyz), vec3(_832, _833, _834)) * 0.5) + 0.5;
        float _2698 = _2697 * _2697;
        float _4597 = isnan(0.0) ? _2698 : (isnan(_2698) ? 0.0 : max(_2698, 0.0));
        float _2699 = isnan(1.0) ? _4597 : (isnan(_4597) ? 1.0 : min(_4597, 1.0));
        float _2700 = isnan(1.0) ? _2295 : (isnan(_2295) ? 1.0 : min(_2295, 1.0));
        _2519 = (((cbLight._m0[_2681].x * 0.3183098733425140380859375) * _2699) * _2700) + _2457;
        _2521 = (((cbLight._m0[_2681].y * 0.3183098733425140380859375) * _2699) * _2700) + _2459;
        _2523 = (((cbLight._m0[_2681].z * 0.3183098733425140380859375) * _2699) * _2700) + _2461;
    }
    uint _2526 = _2279 + 8u;
    float _2539 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2279].w)) * _835) * 0.949999988079071044921875);
    float _2540 = _2539 * _2539;
    float _2541 = cbLight._m0[_2279].x + _911;
    float _2542 = cbLight._m0[_2279].y + _912;
    float _2543 = cbLight._m0[_2279].z + _913;
    float _2547 = inversesqrt(dot(vec3(_2541, _2542, _2543), vec3(_2541, _2542, _2543)));
    float _2548 = _2547 * _2541;
    float _2549 = _2547 * _2542;
    float _2550 = _2547 * _2543;
    float _2551 = dot(vec3(_832, _833, _834), vec3(cbLight._m0[_2279].xyz));
    float _4613 = isnan(0.0) ? _2551 : (isnan(_2551) ? 0.0 : max(_2551, 0.0));
    float _2554 = isnan(1.0) ? _4613 : (isnan(_4613) ? 1.0 : min(_4613, 1.0));
    float _4624 = isnan(0.0) ? _983 : (isnan(_983) ? 0.0 : max(_983, 0.0));
    float _2555 = isnan(1.0) ? _4624 : (isnan(_4624) ? 1.0 : min(_4624, 1.0));
    float _2556 = dot(vec3(_832, _833, _834), vec3(_2548, _2549, _2550));
    float _4635 = isnan(0.0) ? _2556 : (isnan(_2556) ? 0.0 : max(_2556, 0.0));
    float _2559 = isnan(1.0) ? _4635 : (isnan(_4635) ? 1.0 : min(_4635, 1.0));
    float _2560 = dot(vec3(cbLight._m0[_2279].xyz), vec3(_2548, _2549, _2550));
    float _4646 = isnan(0.0) ? _2560 : (isnan(_2560) ? 0.0 : max(_2560, 0.0));
    float _2564 = _2540 * _2540;
    float _2568 = ((_2559 * _2559) * (_2564 + (-1.0))) + 1.0;
    float _2579 = (exp2(log2(1.0 - (isnan(1.0) ? _4646 : (isnan(_4646) ? 1.0 : min(_4646, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2580 = 1.0 - _2540;
    float _2591 = (0.5 / (((_2555 * ((_2554 * _2580) + _2540)) + 9.9999999392252902907785028219223e-09) + (((_2555 * _2580) + _2540) * _2554))) * _2554;
    float _4657 = isnan(0.0) ? _2591 : (isnan(_2591) ? 0.0 : max(_2591, 0.0));
    float _2593 = (isnan(1.0) ? _4657 : (isnan(_4657) ? 1.0 : min(_4657, 1.0))) * (_2564 / ((_2568 * _2568) * 3.141590118408203125));
    uint _2607 = _2279 + 9u;
    float _2618 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2319].w)) * _835) * 0.949999988079071044921875);
    float _2619 = _2618 * _2618;
    float _2620 = cbLight._m0[_2319].x + _911;
    float _2621 = cbLight._m0[_2319].y + _912;
    float _2622 = cbLight._m0[_2319].z + _913;
    float _2626 = inversesqrt(dot(vec3(_2620, _2621, _2622), vec3(_2620, _2621, _2622)));
    float _2627 = _2626 * _2620;
    float _2628 = _2626 * _2621;
    float _2629 = _2626 * _2622;
    float _2630 = dot(vec3(_832, _833, _834), vec3(cbLight._m0[_2319].xyz));
    float _4668 = isnan(0.0) ? _2630 : (isnan(_2630) ? 0.0 : max(_2630, 0.0));
    float _2633 = isnan(1.0) ? _4668 : (isnan(_4668) ? 1.0 : min(_4668, 1.0));
    float _2634 = dot(vec3(_832, _833, _834), vec3(_2627, _2628, _2629));
    float _4679 = isnan(0.0) ? _2634 : (isnan(_2634) ? 0.0 : max(_2634, 0.0));
    float _2637 = isnan(1.0) ? _4679 : (isnan(_4679) ? 1.0 : min(_4679, 1.0));
    float _2638 = dot(vec3(cbLight._m0[_2319].xyz), vec3(_2627, _2628, _2629));
    float _4690 = isnan(0.0) ? _2638 : (isnan(_2638) ? 0.0 : max(_2638, 0.0));
    float _2642 = _2619 * _2619;
    float _2646 = ((_2637 * _2637) * (_2642 + (-1.0))) + 1.0;
    float _2655 = (exp2(log2(1.0 - (isnan(1.0) ? _4690 : (isnan(_4690) ? 1.0 : min(_4690, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2656 = 1.0 - _2619;
    float _2666 = (0.5 / (((_2555 * ((_2633 * _2656) + _2619)) + 9.9999999392252902907785028219223e-09) + (((_2555 * _2656) + _2619) * _2633))) * _2633;
    float _4701 = isnan(0.0) ? _2666 : (isnan(_2666) ? 0.0 : max(_2666, 0.0));
    float _2668 = (isnan(1.0) ? _4701 : (isnan(_4701) ? 1.0 : min(_4701, 1.0))) * (_2642 / ((_2646 * _2646) * 3.141590118408203125));
    float _2678 = (((_2655 * cbLight._m0[_2607].x) * _2668) * _2302) + ((((cbLight._m0[_2526].x * _2268) * _2579) * _2593) * _2315);
    float _2679 = (((_2655 * cbLight._m0[_2607].y) * _2668) * _2302) + ((((cbLight._m0[_2526].y * _2270) * _2579) * _2593) * _2315);
    float _2680 = (((_2655 * cbLight._m0[_2607].z) * _2668) * _2302) + ((((cbLight._m0[_2526].z * _2272) * _2579) * _2593) * _2315);
    float _2736;
    float _2738;
    float _2740;
    if (_2355)
    {
        _2736 = _2678;
        _2738 = _2679;
        _2740 = _2680;
    }
    else
    {
        uint _2742 = _2279 + 2u;
        uint _2746 = _2279 + 10u;
        float _2760 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2742].w)) * _835) * 0.949999988079071044921875);
        float _2761 = _2760 * _2760;
        float _2762 = cbLight._m0[_2742].x + _911;
        float _2763 = cbLight._m0[_2742].y + _912;
        float _2764 = cbLight._m0[_2742].z + _913;
        float _2768 = inversesqrt(dot(vec3(_2762, _2763, _2764), vec3(_2762, _2763, _2764)));
        float _2769 = _2768 * _2762;
        float _2770 = _2768 * _2763;
        float _2771 = _2768 * _2764;
        float _2772 = dot(vec3(_832, _833, _834), vec3(cbLight._m0[_2742].xyz));
        float _4712 = isnan(0.0) ? _2772 : (isnan(_2772) ? 0.0 : max(_2772, 0.0));
        float _2775 = isnan(1.0) ? _4712 : (isnan(_4712) ? 1.0 : min(_4712, 1.0));
        float _2776 = dot(vec3(_832, _833, _834), vec3(_2769, _2770, _2771));
        float _4723 = isnan(0.0) ? _2776 : (isnan(_2776) ? 0.0 : max(_2776, 0.0));
        float _2779 = isnan(1.0) ? _4723 : (isnan(_4723) ? 1.0 : min(_4723, 1.0));
        float _2780 = dot(vec3(cbLight._m0[_2742].xyz), vec3(_2769, _2770, _2771));
        float _4734 = isnan(0.0) ? _2780 : (isnan(_2780) ? 0.0 : max(_2780, 0.0));
        float _2784 = _2761 * _2761;
        float _2788 = ((_2779 * _2779) * (_2784 + (-1.0))) + 1.0;
        float _2797 = (exp2(log2(1.0 - (isnan(1.0) ? _4734 : (isnan(_4734) ? 1.0 : min(_4734, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2798 = 1.0 - _2761;
        float _2808 = (0.5 / (((_2555 * ((_2775 * _2798) + _2761)) + 9.9999999392252902907785028219223e-09) + (((_2555 * _2798) + _2761) * _2775))) * _2775;
        float _4745 = isnan(0.0) ? _2808 : (isnan(_2808) ? 0.0 : max(_2808, 0.0));
        float _2810 = (isnan(1.0) ? _4745 : (isnan(_4745) ? 1.0 : min(_4745, 1.0))) * (_2784 / ((_2788 * _2788) * 3.141590118408203125));
        float _2811 = isnan(1.0) ? _2294 : (isnan(_2294) ? 1.0 : min(_2294, 1.0));
        _2736 = (((_2797 * cbLight._m0[_2746].x) * _2810) * _2811) + _2678;
        _2738 = (((_2797 * cbLight._m0[_2746].y) * _2810) * _2811) + _2679;
        _2740 = (((_2797 * cbLight._m0[_2746].z) * _2810) * _2811) + _2680;
    }
    float _2842;
    float _2844;
    float _2846;
    if (_2464)
    {
        _2842 = _2736;
        _2844 = _2738;
        _2846 = _2740;
    }
    else
    {
        uint _2853 = _2279 + 3u;
        uint _2857 = _2279 + 11u;
        float _2871 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2853].w)) * _835) * 0.949999988079071044921875);
        float _2872 = _2871 * _2871;
        float _2873 = cbLight._m0[_2853].x + _911;
        float _2874 = cbLight._m0[_2853].y + _912;
        float _2875 = cbLight._m0[_2853].z + _913;
        float _2879 = inversesqrt(dot(vec3(_2873, _2874, _2875), vec3(_2873, _2874, _2875)));
        float _2880 = _2879 * _2873;
        float _2881 = _2879 * _2874;
        float _2882 = _2879 * _2875;
        float _2883 = dot(vec3(_832, _833, _834), vec3(cbLight._m0[_2853].xyz));
        float _4761 = isnan(0.0) ? _2883 : (isnan(_2883) ? 0.0 : max(_2883, 0.0));
        float _2886 = isnan(1.0) ? _4761 : (isnan(_4761) ? 1.0 : min(_4761, 1.0));
        float _2887 = dot(vec3(_832, _833, _834), vec3(_2880, _2881, _2882));
        float _4772 = isnan(0.0) ? _2887 : (isnan(_2887) ? 0.0 : max(_2887, 0.0));
        float _2890 = isnan(1.0) ? _4772 : (isnan(_4772) ? 1.0 : min(_4772, 1.0));
        float _2891 = dot(vec3(cbLight._m0[_2853].xyz), vec3(_2880, _2881, _2882));
        float _4783 = isnan(0.0) ? _2891 : (isnan(_2891) ? 0.0 : max(_2891, 0.0));
        float _2895 = _2872 * _2872;
        float _2899 = ((_2890 * _2890) * (_2895 + (-1.0))) + 1.0;
        float _2908 = (exp2(log2(1.0 - (isnan(1.0) ? _4783 : (isnan(_4783) ? 1.0 : min(_4783, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2909 = 1.0 - _2872;
        float _2919 = (0.5 / (((_2555 * ((_2886 * _2909) + _2872)) + 9.9999999392252902907785028219223e-09) + (((_2555 * _2909) + _2872) * _2886))) * _2886;
        float _4794 = isnan(0.0) ? _2919 : (isnan(_2919) ? 0.0 : max(_2919, 0.0));
        float _2921 = (isnan(1.0) ? _4794 : (isnan(_4794) ? 1.0 : min(_4794, 1.0))) * (_2895 / ((_2899 * _2899) * 3.141590118408203125));
        float _2922 = isnan(1.0) ? _2295 : (isnan(_2295) ? 1.0 : min(_2295, 1.0));
        _2842 = (((_2908 * cbLight._m0[_2857].x) * _2921) * _2922) + _2736;
        _2844 = (((_2908 * cbLight._m0[_2857].y) * _2921) * _2922) + _2738;
        _2846 = (((_2908 * cbLight._m0[_2857].z) * _2921) * _2922) + _2740;
    }
    float _2988;
    float _2990;
    float _2992;
    float _2994;
    float _2996;
    float _2998;
    if (_2277.y == 0u)
    {
        uvec4 _2943 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2944 = _2943.x;
        uint _2955 = uint((float(_2943.y) * floor(float(uint(cbSceneParam._m0[85u].y * _920) / _2944))) + floor(float(uint(cbSceneParam._m0[85u].x * _919) / _2944)));
        float _2965 = (log2(_2055 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2966 = isnan(0.0) ? _2965 : (isnan(_2965) ? 0.0 : max(_2965, 0.0));
        uint _2969 = uint(isnan(14.0) ? _2966 : (isnan(_2966) ? 14.0 : min(_2966, 14.0)));
        uvec4 _2974 = texelFetch(g_lightClusterGridBuffer, int(((_2969 << 2u) + (_2955 << 6u)) >> 2u));
        uint _2975 = _2974.x;
        uint _2976 = _2943.z;
        float _3055;
        float _3057;
        float _3059;
        float _3061;
        float _3063;
        float _3065;
        if (((((1u << ((_2976 >> 4u) & 15u)) + 4294967295u) & _2975) == 0u) || ((_2976 & 240u) == 0u))
        {
            _3055 = 0.0;
            _3057 = 0.0;
            _3059 = 0.0;
            _3061 = 0.0;
            _3063 = 0.0;
            _3065 = 0.0;
        }
        else
        {
            float _3056;
            float _3058;
            float _3060;
            float _3062;
            float _3064;
            float _3066;
            float _3199 = 0.0;
            float _3200 = 0.0;
            float _3201 = 0.0;
            float _3202 = 0.0;
            float _3203 = 0.0;
            float _3204 = 0.0;
            uint _3205 = 0u;
            uint _3214;
            bool _3215;
            for (;;)
            {
                _3214 = texelFetch(g_lightClassification, int((((_2969 << 5u) + (_2955 << 9u)) + (_3205 << 2u)) >> 2u)).x;
                _3215 = _3214 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3215)
                {
                    frontier_phi_66_pred = _3204;
                    frontier_phi_66_pred_1 = _3203;
                    frontier_phi_66_pred_2 = _3202;
                    frontier_phi_66_pred_3 = _3201;
                    frontier_phi_66_pred_4 = _3200;
                    frontier_phi_66_pred_5 = _3199;
                }
                else
                {
                    float _3323;
                    float _3324;
                    float _3325;
                    float _3326;
                    float _3327;
                    float _3328;
                    uint _3329;
                    _3323 = _3199;
                    _3324 = _3200;
                    _3325 = _3201;
                    _3326 = _3202;
                    _3327 = _3203;
                    _3328 = _3204;
                    _3329 = _3214;
                    float _3255;
                    float _3256;
                    float _3257;
                    float _3258;
                    float _3259;
                    float _3260;
                    for (;;)
                    {
                        uint _3333 = uint(findLSB(_3329)) + (_3205 << 5u);
                        uint _3330 = (_3329 + 4294967295u) & _3329;
                        uint _3335 = _3333 * 48u;
                        vec4 _3349 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3335)).x, texelFetch(g_PointLightRenderingBuffer, int(_3335 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3335 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3335 + 3u)).x));
                        uint _3355 = (_3333 * 48u) + 4u;
                        vec4 _3368 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3355)).x, texelFetch(g_PointLightRenderingBuffer, int(_3355 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3355 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3355 + 3u)).x));
                        uint _3374 = (_3333 * 48u) + 8u;
                        vec3 _3385 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3374)).x, texelFetch(g_PointLightRenderingBuffer, int(_3374 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3374 + 2u)).x));
                        float _3389 = _3349.x - _2053;
                        float _3390 = _3349.y - _2054;
                        float _3391 = _3349.z - _2055;
                        float _3392 = dot(vec3(_3389, _3390, _3391), vec3(_3389, _3390, _3391));
                        float _3395 = inversesqrt(_3392);
                        float _3396 = _3395 * _3389;
                        float _3397 = _3395 * _3390;
                        float _3398 = _3395 * _3391;
                        float _3399 = dot(vec3(_938, _941, _944), vec3(_3396, _3397, _3398));
                        float _3404 = 1.0 - (_3392 * _3349.w);
                        float _4820 = isnan(0.0) ? _3404 : (isnan(_3404) ? 0.0 : max(_3404, 0.0));
                        float _3405 = isnan(1.0) ? _4820 : (isnan(_4820) ? 1.0 : min(_4820, 1.0));
                        float _3406 = sqrt(_3392) * _3368.w;
                        float _3409 = 1.39999997615814208984375 / (_3406 + 1.39999997615814208984375);
                        float _3410 = _3409 * _3409;
                        float _3413 = ((1.0 - _3410) * _3399) + _3410;
                        float _3416 = _3406 * _3406;
                        float _3420 = ((isnan(0.0) ? _3413 : (isnan(_3413) ? 0.0 : max(_3413, 0.0))) * _3405) / ((_3416 * 0.699999988079071044921875) + 1.0);
                        float _3424 = (-0.0) - _2053;
                        float _3425 = (-0.0) - _2054;
                        float _3426 = (-0.0) - _2055;
                        float _3430 = inversesqrt(dot(vec3(_3424, _3425, _3426), vec3(_3424, _3425, _3426)));
                        float _3431 = _3430 * _3424;
                        float _3432 = _3430 * _3425;
                        float _3433 = _3430 * _3426;
                        float _3440 = exp2(log2(1.0 / ((_3416 * 3.5) + 5.0)) * 0.25);
                        float _3441 = 1.0 - _998;
                        float _3448 = sqrt(1.0 - ((1.0 - (_3441 * _3441)) * (1.0 - (_3440 * _3440))));
                        float _3449 = _3448 * _3448;
                        float _3450 = _3449 * _3449;
                        float _3451 = _3431 + _3396;
                        float _3452 = _3432 + _3397;
                        float _3453 = _3433 + _3398;
                        float _3457 = inversesqrt(dot(vec3(_3451, _3452, _3453), vec3(_3451, _3452, _3453)));
                        float _3461 = dot(vec3(_938, _941, _944), vec3(_3431, _3432, _3433));
                        float _4836 = isnan(0.0) ? _3461 : (isnan(_3461) ? 0.0 : max(_3461, 0.0));
                        float _3464 = isnan(1.0) ? _4836 : (isnan(_4836) ? 1.0 : min(_4836, 1.0));
                        float _3465 = dot(vec3(_938, _941, _944), vec3(_3457 * _3451, _3457 * _3452, _3457 * _3453));
                        float _4847 = isnan(0.0) ? _3465 : (isnan(_3465) ? 0.0 : max(_3465, 0.0));
                        float _3468 = isnan(1.0) ? _4847 : (isnan(_4847) ? 1.0 : min(_4847, 1.0));
                        float _3472 = ((_3468 * _3468) * (_3450 + (-1.0))) + 1.0;
                        float _3473 = _3409 * _3449;
                        float _3474 = _3473 * _3473;
                        float _3477 = ((1.0 - _3474) * _3399) + _3474;
                        float _4858 = isnan(0.0) ? _3477 : (isnan(_3477) ? 0.0 : max(_3477, 0.0));
                        float _3478 = isnan(1.0) ? _4858 : (isnan(_4858) ? 1.0 : min(_4858, 1.0));
                        float _3479 = 1.0 - _3449;
                        float _3489 = (0.5 / (((_3478 * ((_3464 * _3479) + _3449)) + 9.9999999392252902907785028219223e-09) + (((_3478 * _3479) + _3449) * _3464))) * _3478;
                        float _4869 = isnan(0.0) ? _3489 : (isnan(_3489) ? 0.0 : max(_3489, 0.0));
                        float _3500 = (((_3450 * 3.1415927410125732421875) * (isnan(1.0) ? _4869 : (isnan(_4869) ? 1.0 : min(_4869, 1.0)))) / ((_3472 * _3472) * ((_3416 * 2.1991131305694580078125) + 3.141590118408203125))) * _3405;
                        _3258 = (_3420 * _3368.x) + _3326;
                        _3259 = (_3420 * _3368.y) + _3327;
                        _3260 = (_3420 * _3368.z) + _3328;
                        _3255 = (_3500 * _3385.x) + _3323;
                        _3256 = (_3500 * _3385.y) + _3324;
                        _3257 = (_3500 * _3385.z) + _3325;
                        if (_3330 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3323 = _3255;
                            _3324 = _3256;
                            _3325 = _3257;
                            _3326 = _3258;
                            _3327 = _3259;
                            _3328 = _3260;
                            _3329 = _3330;
                        }
                    }
                    frontier_phi_66_pred = _3260;
                    frontier_phi_66_pred_1 = _3259;
                    frontier_phi_66_pred_2 = _3258;
                    frontier_phi_66_pred_3 = _3257;
                    frontier_phi_66_pred_4 = _3256;
                    frontier_phi_66_pred_5 = _3255;
                }
                _3066 = frontier_phi_66_pred;
                _3064 = frontier_phi_66_pred_1;
                _3062 = frontier_phi_66_pred_2;
                _3060 = frontier_phi_66_pred_3;
                _3058 = frontier_phi_66_pred_4;
                _3056 = frontier_phi_66_pred_5;
                uint _3206 = _3205 + 1u;
                if (_3206 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3199 = _3056;
                    _3200 = _3058;
                    _3201 = _3060;
                    _3202 = _3062;
                    _3203 = _3064;
                    _3204 = _3066;
                    _3205 = _3206;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3055 = _3056;
            _3057 = _3058;
            _3059 = _3060;
            _3061 = _3062;
            _3063 = _3064;
            _3065 = _3066;
        }
        uvec4 _3069 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3070 = _3069.z;
        uint _3072 = (_3070 >> 8u) & 15u;
        float _3167;
        float _3169;
        float _3171;
        float _3173;
        float _3175;
        float _3177;
        if (((4294967295u << _3072) & _2975) == 0u)
        {
            _3167 = _3055;
            _3169 = _3057;
            _3171 = _3059;
            _3173 = _3061;
            _3175 = _3063;
            _3177 = _3065;
        }
        else
        {
            float _3192 = inversesqrt(dot(vec3(_2053, _2054, _2055), vec3(_2053, _2054, _2055)));
            float _3193 = _3192 * _2053;
            float _3194 = _3192 * _2054;
            float _3195 = _3192 * _2055;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_3072 < ((_3070 >> 12u) & 15u))
            {
                float _3168;
                float _3170;
                float _3172;
                float _3174;
                float _3176;
                float _3178;
                float _3306 = _3055;
                float _3307 = _3057;
                float _3308 = _3059;
                float _3309 = _3061;
                float _3310 = _3063;
                float _3311 = _3065;
                uint _3312 = _3072;
                uint _3321;
                bool _3322;
                for (;;)
                {
                    _3321 = texelFetch(g_lightClassification, int((((_2969 << 5u) + (_2955 << 9u)) + (_3312 << 2u)) >> 2u)).x;
                    _3322 = _3321 == 0u;
                    float frontier_phi_72_pred;
                    float frontier_phi_72_pred_1;
                    float frontier_phi_72_pred_2;
                    float frontier_phi_72_pred_3;
                    float frontier_phi_72_pred_4;
                    float frontier_phi_72_pred_5;
                    if (_3322)
                    {
                        frontier_phi_72_pred = _3311;
                        frontier_phi_72_pred_1 = _3310;
                        frontier_phi_72_pred_2 = _3309;
                        frontier_phi_72_pred_3 = _3308;
                        frontier_phi_72_pred_4 = _3307;
                        frontier_phi_72_pred_5 = _3306;
                    }
                    else
                    {
                        float _3505;
                        float _3506;
                        float _3507;
                        float _3508;
                        float _3509;
                        float _3510;
                        float _3798;
                        float _3799;
                        float _3800;
                        float _3801;
                        float _3802;
                        float _3803;
                        float _3518 = _3306;
                        float _3519 = _3307;
                        float _3520 = _3308;
                        float _3521 = _3309;
                        float _3522 = _3310;
                        float _3523 = _3311;
                        uint _3524 = _3321;
                        uint _3525;
                        vec4 _3550;
                        float _3551;
                        vec4 _3566;
                        vec3 _3578;
                        vec4 _3593;
                        vec4 _3608;
                        float _3654;
                        bool _3655;
                        for (;;)
                        {
                            uint _3535 = ((_3312 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3524));
                            _3525 = (_3524 + 4294967295u) & _3524;
                            uint _3537 = _3535 * 40u;
                            _3550 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3537)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3537 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3537 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3537 + 3u)).x));
                            _3551 = _3550.w;
                            uint _3553 = (_3535 * 40u) + 4u;
                            _3566 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3553)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3553 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3553 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3553 + 3u)).x));
                            uint _3568 = (_3535 * 40u) + 8u;
                            _3578 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3568)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3568 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3568 + 2u)).x));
                            uint _3580 = (_3535 * 40u) + 16u;
                            _3593 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3580)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3580 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3580 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3580 + 3u)).x));
                            uint _3595 = (_3535 * 40u) + 20u;
                            _3608 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3595)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3595 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3595 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3595 + 3u)).x));
                            uint _3610 = (_3535 * 40u) + 24u;
                            vec4 _3623 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3610)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3610 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3610 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3610 + 3u)).x));
                            uint _3629 = (_3535 * 40u) + 28u;
                            vec4 _3642 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3629)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3629 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3629 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3629 + 3u)).x));
                            _3654 = fma(_2055, _3642.z, fma(_2054, _3642.y, _3642.x * _2053)) + _3642.w;
                            _3655 = !((fma(_2055, _3623.z, fma(_2054, _3623.y, _3623.x * _2053)) + _3623.w) <= 0.0);
                            float frontier_phi_78_pred;
                            float frontier_phi_78_pred_1;
                            float frontier_phi_78_pred_2;
                            float frontier_phi_78_pred_3;
                            float frontier_phi_78_pred_4;
                            float frontier_phi_78_pred_5;
                            if (_3655)
                            {
                                float _3682 = _3550.x - _2053;
                                float _3683 = _3550.y - _2054;
                                float _3684 = _3550.z - _2055;
                                float _3685 = dot(vec3(_3682, _3683, _3684), vec3(_3682, _3683, _3684));
                                float _3688 = inversesqrt(_3685);
                                float _3689 = _3688 * _3682;
                                float _3690 = _3688 * _3683;
                                float _3691 = _3688 * _3684;
                                float _3695 = 1.0 - (_3685 / (_3551 * _3551));
                                float _4880 = isnan(0.0) ? _3695 : (isnan(_3695) ? 0.0 : max(_3695, 0.0));
                                float _3696 = isnan(1.0) ? _4880 : (isnan(_4880) ? 1.0 : min(_4880, 1.0));
                                float _3700 = sqrt(_3685) * _3566.w;
                                float _3702 = 1.39999997615814208984375 / (_3700 + 1.39999997615814208984375);
                                float _3703 = _3702 * _3702;
                                float _3706 = ((1.0 - _3703) * dot(vec3(_3689, _3690, _3691), vec3(_938, _941, _944))) + _3703;
                                float _3709 = _3700 * _3700;
                                float _3713 = (fma(_2055, _3593.z, fma(_2054, _3593.y, _3593.x * _2053)) + _3593.w) / _3654;
                                float _3714 = (fma(_2055, _3608.z, fma(_2054, _3608.y, _3608.x * _2053)) + _3608.w) / _3654;
                                float _3718 = 1.0 - dot(vec2(_3713, _3714), vec2(_3713, _3714));
                                float _4896 = isnan(0.0) ? _3718 : (isnan(_3718) ? 0.0 : max(_3718, 0.0));
                                float _3719 = isnan(1.0) ? _4896 : (isnan(_4896) ? 1.0 : min(_4896, 1.0));
                                float _3720 = _3719 * (((isnan(0.0) ? _3706 : (isnan(_3706) ? 0.0 : max(_3706, 0.0))) * _3696) / ((_3709 * 0.699999988079071044921875) + 1.0));
                                float _3732 = exp2(log2(1.0 / ((_3709 * 3.5) + 5.0)) * 0.25);
                                float _3733 = 1.0 - _998;
                                float _3740 = sqrt(1.0 - ((1.0 - (_3733 * _3733)) * (1.0 - (_3732 * _3732))));
                                float _3741 = _3740 * _3740;
                                float _3742 = _3741 * _3741;
                                float _3743 = _3689 - _3193;
                                float _3744 = _3690 - _3194;
                                float _3745 = _3691 - _3195;
                                float _3749 = inversesqrt(dot(vec3(_3743, _3744, _3745), vec3(_3743, _3744, _3745)));
                                float _3753 = dot(vec3(_938, _941, _944), vec3((-0.0) - _3193, (-0.0) - _3194, (-0.0) - _3195));
                                float _4907 = isnan(0.0) ? _3753 : (isnan(_3753) ? 0.0 : max(_3753, 0.0));
                                float _3756 = isnan(1.0) ? _4907 : (isnan(_4907) ? 1.0 : min(_4907, 1.0));
                                float _3757 = dot(vec3(_938, _941, _944), vec3(_3749 * _3743, _3749 * _3744, _3749 * _3745));
                                float _4918 = isnan(0.0) ? _3757 : (isnan(_3757) ? 0.0 : max(_3757, 0.0));
                                float _3760 = isnan(1.0) ? _4918 : (isnan(_4918) ? 1.0 : min(_4918, 1.0));
                                float _3764 = ((_3760 * _3760) * (_3742 + (-1.0))) + 1.0;
                                float _3765 = _3702 * _3741;
                                float _3766 = _3765 * _3765;
                                float _3772 = ((1.0 - _3766) * dot(vec3(_938, _941, _944), vec3(_3689, _3690, _3691))) + _3766;
                                float _4929 = isnan(0.0) ? _3772 : (isnan(_3772) ? 0.0 : max(_3772, 0.0));
                                float _3773 = isnan(1.0) ? _4929 : (isnan(_4929) ? 1.0 : min(_4929, 1.0));
                                float _3774 = 1.0 - _3741;
                                float _3784 = (0.5 / (((_3773 * ((_3756 * _3774) + _3741)) + 9.9999999392252902907785028219223e-09) + (((_3773 * _3774) + _3741) * _3756))) * _3773;
                                float _4940 = isnan(0.0) ? _3784 : (isnan(_3784) ? 0.0 : max(_3784, 0.0));
                                float _3794 = (_3719 * _3696) * (((_3742 * 3.1415927410125732421875) * (isnan(1.0) ? _4940 : (isnan(_4940) ? 1.0 : min(_4940, 1.0)))) / ((_3764 * _3764) * ((_3709 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_78_pred = _3720 * _3566.y;
                                frontier_phi_78_pred_1 = _3720 * _3566.x;
                                frontier_phi_78_pred_2 = _3794 * _3578.z;
                                frontier_phi_78_pred_3 = _3794 * _3578.y;
                                frontier_phi_78_pred_4 = _3794 * _3578.x;
                                frontier_phi_78_pred_5 = _3720 * _3566.z;
                            }
                            else
                            {
                                frontier_phi_78_pred = 0.0;
                                frontier_phi_78_pred_1 = 0.0;
                                frontier_phi_78_pred_2 = 0.0;
                                frontier_phi_78_pred_3 = 0.0;
                                frontier_phi_78_pred_4 = 0.0;
                                frontier_phi_78_pred_5 = 0.0;
                            }
                            _3802 = frontier_phi_78_pred;
                            _3801 = frontier_phi_78_pred_1;
                            _3800 = frontier_phi_78_pred_2;
                            _3799 = frontier_phi_78_pred_3;
                            _3798 = frontier_phi_78_pred_4;
                            _3803 = frontier_phi_78_pred_5;
                            _3508 = _3801 + _3521;
                            _3509 = _3802 + _3522;
                            _3510 = _3803 + _3523;
                            _3505 = _3798 + _3518;
                            _3506 = _3799 + _3519;
                            _3507 = _3800 + _3520;
                            if (_3525 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3518 = _3505;
                                _3519 = _3506;
                                _3520 = _3507;
                                _3521 = _3508;
                                _3522 = _3509;
                                _3523 = _3510;
                                _3524 = _3525;
                                continue;
                            }
                        }
                        frontier_phi_72_pred = _3510;
                        frontier_phi_72_pred_1 = _3509;
                        frontier_phi_72_pred_2 = _3508;
                        frontier_phi_72_pred_3 = _3507;
                        frontier_phi_72_pred_4 = _3506;
                        frontier_phi_72_pred_5 = _3505;
                    }
                    _3178 = frontier_phi_72_pred;
                    _3176 = frontier_phi_72_pred_1;
                    _3174 = frontier_phi_72_pred_2;
                    _3172 = frontier_phi_72_pred_3;
                    _3170 = frontier_phi_72_pred_4;
                    _3168 = frontier_phi_72_pred_5;
                    uint _3313 = _3312 + 1u;
                    if (_3313 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3306 = _3168;
                        _3307 = _3170;
                        _3308 = _3172;
                        _3309 = _3174;
                        _3310 = _3176;
                        _3311 = _3178;
                        _3312 = _3313;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _3178;
                frontier_phi_60_61_ladder_1 = _3176;
                frontier_phi_60_61_ladder_2 = _3172;
                frontier_phi_60_61_ladder_3 = _3170;
                frontier_phi_60_61_ladder_4 = _3168;
                frontier_phi_60_61_ladder_5 = _3174;
            }
            else
            {
                frontier_phi_60_61_ladder = _3065;
                frontier_phi_60_61_ladder_1 = _3063;
                frontier_phi_60_61_ladder_2 = _3059;
                frontier_phi_60_61_ladder_3 = _3057;
                frontier_phi_60_61_ladder_4 = _3055;
                frontier_phi_60_61_ladder_5 = _3061;
            }
            _3167 = frontier_phi_60_61_ladder_4;
            _3169 = frontier_phi_60_61_ladder_3;
            _3171 = frontier_phi_60_61_ladder_2;
            _3173 = frontier_phi_60_61_ladder_5;
            _3175 = frontier_phi_60_61_ladder_1;
            _3177 = frontier_phi_60_61_ladder;
        }
        float _3182 = isnan(1.0) ? _982 : (isnan(_982) ? 1.0 : min(_982, 1.0));
        _2988 = (_3182 * _3173) + _2519;
        _2990 = (_3182 * _3175) + _2521;
        _2992 = (_3182 * _3177) + _2523;
        _2994 = ((_3167 * 0.039999999105930328369140625) * _3182) + _2842;
        _2996 = ((_3169 * 0.039999999105930328369140625) * _3182) + _2844;
        _2998 = ((_3171 * 0.039999999105930328369140625) * _3182) + _2846;
    }
    else
    {
        _2988 = _2519;
        _2990 = _2521;
        _2992 = _2523;
        _2994 = _2842;
        _2996 = _2844;
        _2998 = _2846;
    }
    float _4956 = isnan(0.0) ? _967 : (isnan(_967) ? 0.0 : max(_967, 0.0));
    float _4967 = isnan(0.0) ? _968 : (isnan(_968) ? 0.0 : max(_968, 0.0));
    float _4978 = isnan(0.0) ? _969 : (isnan(_969) ? 0.0 : max(_969, 0.0));
    uint _3018 = _277 + 6u;
    float _3026 = _919 / cbSceneParam._m0[86u].x;
    float _3027 = _920 / cbSceneParam._m0[86u].y;
    vec4 _3041 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3026, _3027, (log2((isnan(cbSceneParam._m0[77u].w) ? _853 : (isnan(_853) ? cbSceneParam._m0[77u].w : min(_853, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3043 = _3041.x;
    float _3044 = _3041.y;
    float _3045 = _3041.z;
    float _3046 = _3041.w;
    float _3117;
    float _3119;
    float _3121;
    float _3123;
    if (_853 > cbSceneParam._m0[78u].w)
    {
        float _3080 = isnan(_853) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _853 : min(cbSceneParam._m0[80u].w, _853));
        float _3081 = _3080 / _853;
        float _3092 = _3081 * _904;
        float _3093 = _905 * _3081;
        float _3094 = (-0.0) - _3093;
        float _3095 = _3081 * _906;
        float _3097 = (cbSceneParam._m0[77u].w * _3094) / _3080;
        float _3098 = _3097 + cbSceneParam._m0[79u].w;
        float _3099 = cbSceneParam._m0[79u].w - _3093;
        float _3105 = sqrt(((_3092 * _3092) + (_3093 * _3093)) + (_3095 * _3095));
        float _3108 = (1.0 - (cbSceneParam._m0[77u].w / _3080)) * _3105;
        float _3113 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3115 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3268;
        if (abs((_3094 - _3097) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3268 = ((((_3098 > 0.0) ? exp2(_3113 * _3098) : (2.0 - exp2(_3115 * _3098))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3108;
        }
        else
        {
            float _3228 = 1.0 / cbSceneParam._m0[80u].x;
            float _3229 = isnan(_3099) ? _3098 : (isnan(_3098) ? _3099 : max(_3098, _3099));
            float _3230 = isnan(_3099) ? _3098 : (isnan(_3098) ? _3099 : min(_3098, _3099));
            float _3239 = isnan(0.0) ? _3229 : (isnan(_3229) ? 0.0 : min(_3229, 0.0));
            float _3240 = isnan(0.0) ? _3230 : (isnan(_3230) ? 0.0 : min(_3230, 0.0));
            _3268 = ((abs(_3105 / _3094) * cbSceneParam._m0[80u].y) * ((((_3239 - _3240) * 2.0) - ((exp2(_3113 * (isnan(0.0) ? _3229 : (isnan(_3229) ? 0.0 : max(_3229, 0.0)))) - exp2(_3113 * (isnan(0.0) ? _3230 : (isnan(_3230) ? 0.0 : max(_3230, 0.0))))) * _3228)) - ((exp2(_3115 * _3239) - exp2(_3115 * _3240)) * _3228))) + (_3108 * cbSceneParam._m0[80u].z);
        }
        vec4 _3270 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3026, _3027, 1.0), 0.0);
        float _3279 = exp2((_3268 * (-1.44269502162933349609375)) * (1.0 - _3270.w));
        float _3280 = log2(_3279);
        float _3296 = log2(_3046);
        _3117 = (exp2(_3296 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3280 * cbSceneParam._m0[78u].x)) * _3270.x) / cbSceneParam._m0[78u].x)) + _3043;
        _3119 = (exp2(_3296 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3280 * cbSceneParam._m0[78u].y)) * _3270.y) / cbSceneParam._m0[78u].y)) + _3044;
        _3121 = (exp2(_3296 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3280 * cbSceneParam._m0[78u].z)) * _3270.z) / cbSceneParam._m0[78u].z)) + _3045;
        _3123 = _3279 * _3046;
    }
    else
    {
        _3117 = _3043;
        _3119 = _3044;
        _3121 = _3045;
        _3123 = _3046;
    }
    float _3135 = roundEven(cbMatDynParam._m0[0u].y);
    bool _3136 = _3135 == 3.0;
    float _3137 = log2(_3123);
    float _3144 = exp2(_3137 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4956 : (isnan(_4956) ? 1.0 : min(_4956, 1.0))) * (_2988 + ((isnan(0.0) ? _1708 : (isnan(_1708) ? 0.0 : max(_1708, 0.0))) * _982))) + ((_2994 + ((isnan(0.0) ? _2000 : (isnan(_2000) ? 0.0 : max(_2000, 0.0))) * _1787)) * cbPerFrame._m0[3u].x));
    float _3145 = exp2(_3137 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4967 : (isnan(_4967) ? 1.0 : min(_4967, 1.0))) * (_2990 + ((isnan(0.0) ? _1711 : (isnan(_1711) ? 0.0 : max(_1711, 0.0))) * _982))) + ((_2996 + ((isnan(0.0) ? _2003 : (isnan(_2003) ? 0.0 : max(_2003, 0.0))) * _1787)) * cbPerFrame._m0[3u].x));
    float _3146 = exp2(_3137 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4978 : (isnan(_4978) ? 1.0 : min(_4978, 1.0))) * (_2992 + ((isnan(0.0) ? _1714 : (isnan(_1714) ? 0.0 : max(_1714, 0.0))) * _982))) + ((_2998 + ((isnan(0.0) ? _2006 : (isnan(_2006) ? 0.0 : max(_2006, 0.0))) * _1787)) * cbPerFrame._m0[3u].x));
    float _3155 = (_3135 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _3155 * (_3136 ? _3144 : (_3144 + (cbSceneParam._m0[72u].w * _3117)));
    SV_Target.y = _3155 * (_3136 ? _3145 : (_3145 + (cbSceneParam._m0[72u].w * _3119)));
    SV_Target.z = _3155 * (_3136 ? _3146 : (_3146 + (cbSceneParam._m0[72u].w * _3121)));
    SV_Target.w = cbInstanceData._m0[_3018].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_3018].w;
}


