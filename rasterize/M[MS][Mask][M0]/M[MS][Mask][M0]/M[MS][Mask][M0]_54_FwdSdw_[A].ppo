#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_0;
layout(set = 0, binding = 13) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_22;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_10;
layout(set = 0, binding = 20) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_6;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1293;
float _3937;
float _3938;
float _3939;
float _3940;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _223 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _224 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _225 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _231 = inversesqrt(dot(vec3(_223, _224, _225), vec3(_223, _224, _225)));
    float _238 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _245 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _259 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _261 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _262 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3949 = isnan(0.0) ? _259 : (isnan(_259) ? 0.0 : max(_259, 0.0));
    float _3960 = isnan(0.0) ? _261 : (isnan(_261) ? 0.0 : max(_261, 0.0));
    float _3971 = isnan(0.0) ? _262 : (isnan(_262) ? 0.0 : max(_262, 0.0));
    uint _272 = uint(roundEven(NORMAL.w)) * 13u;
    uint _277 = _272 + 1u;
    uint _281 = _272 + 2u;
    float _290 = sqrt(((cbInstanceData._m0[_277].x * cbInstanceData._m0[_277].x) + (cbInstanceData._m0[_272].x * cbInstanceData._m0[_272].x)) + (cbInstanceData._m0[_281].x * cbInstanceData._m0[_281].x));
    float _291 = _290 * TEXCOORD.z;
    float _292 = _290 * TEXCOORD.w;
    vec4 _305 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _291) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _292) + cbTextureTilingScale._m0[13u].w));
    vec4 _328 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _354 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _359 = _354.x * cbMtdParam._m0[11u].x;
    float _360 = _354.y * cbMtdParam._m0[11u].y;
    float _361 = _354.z * cbMtdParam._m0[11u].z;
    vec4 _380 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _291) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _292) + cbTextureTilingScale._m0[5u].w));
    vec4 _399 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _434 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _436 = _434.x;
    float _448 = dot(vec4(_436, _434.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _465 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _399.x) * 2.0) - ((((_436 - _448) * cbMtdParam._m0[24u].z) + _448) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3982 = isnan(0.0) ? _465 : (isnan(_465) ? 0.0 : max(_465, 0.0));
    float _466 = isnan(1.0) ? _3982 : (isnan(_3982) ? 1.0 : min(_3982, 1.0));
    float _473 = (_466 * ((_380.x * cbMtdParam._m0[12u].x) - _359)) + _359;
    float _474 = (_466 * ((_380.y * cbMtdParam._m0[12u].y) - _360)) + _360;
    float _475 = (_466 * ((_380.z * cbMtdParam._m0[12u].z) - _361)) + _361;
    vec4 _492 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _291) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _292) + cbTextureTilingScale._m0[3u].w));
    vec4 _512 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _514 = _512.x;
    float _524 = dot(vec4(_514, _512.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _538 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _399.y) * 2.0) - ((((_514 - _524) * cbMtdParam._m0[24u].z) + _524) * cbMtdParam._m0[20u].w))) + 1.0;
    float _3993 = isnan(0.0) ? _538 : (isnan(_538) ? 0.0 : max(_538, 0.0));
    float _539 = isnan(1.0) ? _3993 : (isnan(_3993) ? 1.0 : min(_3993, 1.0));
    float _549 = (_328.x * cbMtdParam._m0[9u].x) * ((_539 * ((_492.x * cbMtdParam._m0[13u].x) - _473)) + _473);
    float _550 = (_328.y * cbMtdParam._m0[9u].y) * ((_539 * ((_492.y * cbMtdParam._m0[13u].y) - _474)) + _474);
    float _551 = (_328.z * cbMtdParam._m0[9u].z) * ((_539 * ((_492.z * cbMtdParam._m0[13u].z) - _475)) + _475);
    float _555 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _305.x) * _549;
    float _558 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _305.y) * _550;
    float _561 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _305.z) * _551;
    float _569 = (((_549 - _555) * (isnan(1.0) ? _3949 : (isnan(_3949) ? 1.0 : min(_3949, 1.0)))) + _555) * 4.55000019073486328125;
    float _571 = (((_550 - _558) * (isnan(1.0) ? _3960 : (isnan(_3960) ? 1.0 : min(_3960, 1.0)))) + _558) * 4.55000019073486328125;
    float _573 = (((_551 - _561) * (isnan(1.0) ? _3971 : (isnan(_3971) ? 1.0 : min(_3971, 1.0)))) + _561) * 4.55000019073486328125;
    vec4 _585 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _291) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _292) + cbTextureTilingScale._m0[20u].w));
    vec4 _608 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _291) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _292) + cbTextureTilingScale._m0[4u].w));
    vec4 _625 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _627 = _625.x;
    float _628 = _625.y;
    float _629 = _625.z;
    float _636 = ((_608.x - _627) * _466) + _627;
    float _637 = ((_608.y - _628) * _466) + _628;
    float _638 = ((_608.z - _629) * _466) + _629;
    vec4 _650 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _291) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _292) + cbTextureTilingScale._m0[2u].w));
    float _663 = ((_650.z - _638) * _539) + _638;
    float _666 = ((((_650.x - _636) * _539) + _636) * 2.0) + (-1.0);
    float _667 = ((((_650.y - _637) * _539) + _637) * 2.0) + (-1.0);
    float _668 = dot(vec2(_666, _667), vec2(_666, _667));
    float _4004 = isnan(0.0) ? _668 : (isnan(_668) ? 0.0 : max(_668, 0.0));
    float _673 = sqrt(1.0 - (isnan(1.0) ? _4004 : (isnan(_4004) ? 1.0 : min(_4004, 1.0))));
    vec4 _693 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _705 = (_666 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_585.x * 2.0) + (-1.0)))) + (((_693.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _706 = (_667 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_585.y * 2.0) + (-1.0)))) + (((_693.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _711 = (((_585.z - _663) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _663;
    float _715 = ((_693.z - _711) * cbMtdParam._m0[19u].w) + _711;
    float _717 = cbMtdParam._m0[22u].x + _693.w;
    float _720 = fma(_673, _238 * NORMAL.x, fma(_706, _245 * TANGENT.x, (_231 * _223) * _705));
    float _723 = fma(_673, _238 * NORMAL.y, fma(_706, _245 * TANGENT.y, (_231 * _224) * _705));
    float _726 = fma(_673, _238 * NORMAL.z, fma(_706, _245 * TANGENT.z, (_231 * _225) * _705));
    float _730 = inversesqrt(dot(vec3(_720, _723, _726), vec3(_720, _723, _726)));
    float _731 = _730 * _720;
    float _732 = _730 * _723;
    float _733 = _730 * _726;
    float _4015 = isnan(0.0) ? _715 : (isnan(_715) ? 0.0 : max(_715, 0.0));
    float _734 = isnan(1.0) ? _4015 : (isnan(_4015) ? 1.0 : min(_4015, 1.0));
    float _4026 = isnan(0.0) ? _717 : (isnan(_717) ? 0.0 : max(_717, 0.0));
    float _4037 = isnan(0.0) ? _569 : (isnan(_569) ? 0.0 : max(_569, 0.0));
    float _4048 = isnan(0.0) ? _571 : (isnan(_571) ? 0.0 : max(_571, 0.0));
    float _4059 = isnan(0.0) ? _573 : (isnan(_573) ? 0.0 : max(_573, 0.0));
    float _752 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _793 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _803 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _793);
    float _804 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _793);
    float _805 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _793);
    float _809 = inversesqrt(dot(vec3(_803, _804, _805), vec3(_803, _804, _805)));
    float _810 = _803 * _809;
    float _811 = _804 * _809;
    float _812 = _805 * _809;
    vec4 _817 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _819 = _817.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _973 = sqrt(((_803 * _803) + (_804 * _804)) + (_805 * _805));
        float _979 = (cbMatDynParam._m0[5u].x * _973) + cbMatDynParam._m0[5u].y;
        float _4070 = isnan(0.0) ? _979 : (isnan(_979) ? 0.0 : max(_979, 0.0));
        float _980 = isnan(1.0) ? _4070 : (isnan(_4070) ? 1.0 : min(_4070, 1.0));
        float _984 = (cbMatDynParam._m0[5u].z * _973) + cbMatDynParam._m0[5u].w;
        float _4081 = isnan(0.0) ? _984 : (isnan(_984) ? 0.0 : max(_984, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4081 : (isnan(_4081) ? 1.0 : min(_4081, 1.0))) - _980)) + _980) < ((_819 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _830 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _831 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _849 = fma(_733, cbSceneParam._m0[5u].z, fma(_732, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _731));
    float _852 = fma(_733, cbSceneParam._m0[6u].z, fma(_732, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _731));
    float _855 = fma(_733, cbSceneParam._m0[7u].z, fma(_732, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _731));
    uint _868 = _272 + 9u;
    uint _869 = _868 + uint(cbMatDynParam._m0[0u].w);
    float _875 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4037 : (isnan(_4037) ? 1.0 : min(_4037, 1.0)))) * cbInstanceData._m0[_869].x;
    float _876 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4048 : (isnan(_4048) ? 1.0 : min(_4048, 1.0)))) * cbInstanceData._m0[_869].y;
    float _877 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4059 : (isnan(_4059) ? 1.0 : min(_4059, 1.0)))) * cbInstanceData._m0[_869].z;
    float _4092 = isnan(0.0) ? _875 : (isnan(_875) ? 0.0 : max(_875, 0.0));
    float _878 = isnan(1.0) ? _4092 : (isnan(_4092) ? 1.0 : min(_4092, 1.0));
    float _4103 = isnan(0.0) ? _876 : (isnan(_876) ? 0.0 : max(_876, 0.0));
    float _879 = isnan(1.0) ? _4103 : (isnan(_4103) ? 1.0 : min(_4103, 1.0));
    float _4114 = isnan(0.0) ? _877 : (isnan(_877) ? 0.0 : max(_877, 0.0));
    float _880 = isnan(1.0) ? _4114 : (isnan(_4114) ? 1.0 : min(_4114, 1.0));
    vec4 _889 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _830, cbSceneParam._m0[86u].y * _831));
    float _893 = ((isnan(1.0) ? _4026 : (isnan(_4026) ? 1.0 : min(_4026, 1.0))) * TEXCOORD_5.w) * _889.x;
    float _894 = dot(vec3(_731, _732, _733), vec3(_810, _811, _812));
    float _897 = _894 * 2.0;
    float _901 = (_897 * _731) - _810;
    float _902 = (_897 * _732) - _811;
    float _903 = (_897 * _733) - _812;
    float _907 = abs(dot(vec3(_810, _811, _812), vec3(_731, _732, _733)));
    float _4125 = isnan(0.0) ? _907 : (isnan(_907) ? 0.0 : max(_907, 0.0));
    float _909 = sqrt(_734);
    float _922 = exp2((_909 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4125 : (isnan(_4125) ? 1.0 : min(_4125, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_909 * 3.0));
    float _954 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _958 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _962 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1292;
    float _1294;
    float _1295;
    float _1296;
    float _1297;
    float _1298;
    float _1299;
    float _1300;
    float _1301;
    float _1302;
    float _1303;
    float _1304;
    float _1305;
    float _1306;
    float _1307;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1017 = fma(_962, cbModelParam._m0[26u].z, fma(_958, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _954));
        float _1021 = fma(_962, cbModelParam._m0[27u].z, fma(_958, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _954));
        float _1025 = fma(_962, cbModelParam._m0[28u].z, fma(_958, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _954));
        float _1050 = _954 + _731;
        float _1051 = _958 + _732;
        float _1052 = _962 + _733;
        float _1062 = fma(_1052, cbModelParam._m0[26u].z, fma(_1051, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1050)) - _1017;
        float _1063 = fma(_1052, cbModelParam._m0[27u].z, fma(_1051, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1050)) - _1021;
        float _1064 = fma(_1052, cbModelParam._m0[28u].z, fma(_1051, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1050)) - _1025;
        float _1068 = inversesqrt(dot(vec3(_1062, _1063, _1064), vec3(_1062, _1063, _1064)));
        float _1081 = ((_1068 * _1062) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1017 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1082 = ((_1068 * _1063) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1021 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1083 = ((_1068 * _1064) / cbModelParam._m0[34u].z) + ((((((_1025 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1086 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1081, _1082, _1083), 0.0);
        vec4 _1093 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1081, _1082, _1083), 0.0);
        vec4 _1100 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1081, _1082, _1083), 0.0);
        vec4 _1107 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1081, _1082, _1083), 0.0);
        float _1120 = exp2((_1086.w + (-0.5)) * 20.0) * 2.0;
        float _1121 = _1120 * (_1086.x + (-0.5));
        float _1122 = _1120 * (_1086.y + (-0.5));
        float _1123 = _1120 * (_1086.z + (-0.5));
        float _1130 = exp2((_1093.w + (-0.5)) * 20.0) * 2.0;
        float _1131 = _1130 * (_1093.x + (-0.5));
        float _1132 = _1130 * (_1093.y + (-0.5));
        float _1133 = _1130 * (_1093.z + (-0.5));
        float _1140 = exp2((_1100.w + (-0.5)) * 20.0) * 2.0;
        float _1141 = _1140 * (_1100.x + (-0.5));
        float _1142 = _1140 * (_1100.y + (-0.5));
        float _1143 = _1140 * (_1100.z + (-0.5));
        float _1150 = exp2((_1107.w + (-0.5)) * 20.0) * 2.0;
        float _1151 = _1150 * (_1107.x + (-0.5));
        float _1152 = _1150 * (_1107.y + (-0.5));
        float _1153 = _1150 * (_1107.z + (-0.5));
        float _1154 = isnan(0.0) ? _1151 : (isnan(_1151) ? 0.0 : max(_1151, 0.0));
        float _1155 = isnan(0.0) ? _1152 : (isnan(_1152) ? 0.0 : max(_1152, 0.0));
        float _1156 = isnan(0.0) ? _1153 : (isnan(_1153) ? 0.0 : max(_1153, 0.0));
        float _1157 = _1121 * 0.5;
        float _1158 = _1131 * 0.5;
        float _1159 = _1141 * 0.5;
        float _1160 = dot(vec3(_1157, _1158, _1159), vec3(_1157, _1158, _1159));
        float _1165 = (_1160 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1160);
        float _1174 = (dot(vec3(_731, _732, _733), vec3(_1165 * _1157, _1165 * _1158, _1165 * _1159)) + 1.0) * 0.5;
        float _4151 = isnan(0.0) ? _1174 : (isnan(_1174) ? 0.0 : max(_1174, 0.0));
        float _1184 = sqrt(((_1158 * _1158) + (_1157 * _1157)) + (_1159 * _1159)) / (_1154 + 9.9999997473787516355514526367188e-06);
        float _4162 = isnan(0.0) ? _1184 : (isnan(_1184) ? 0.0 : max(_1184, 0.0));
        float _1185 = isnan(1.0) ? _4162 : (isnan(_4162) ? 1.0 : min(_4162, 1.0));
        float _1186 = _1185 * 2.0;
        float _1190 = (1.0 - _1185) / (_1185 + 1.0);
        float _4173 = isnan(0.0) ? _1190 : (isnan(_1190) ? 0.0 : max(_1190, 0.0));
        float _1191 = isnan(1.0) ? _4173 : (isnan(_4173) ? 1.0 : min(_4173, 1.0));
        float _1200 = ((((1.0 - _1191) * (_1186 + 2.0)) * exp2(log2(isnan(1.0) ? _4151 : (isnan(_4151) ? 1.0 : min(_4151, 1.0))) * (_1186 + 1.0))) + _1191) * _1154;
        float _1201 = _1122 * 0.5;
        float _1202 = _1132 * 0.5;
        float _1203 = _1142 * 0.5;
        float _1204 = dot(vec3(_1201, _1202, _1203), vec3(_1201, _1202, _1203));
        float _1209 = (_1204 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1204);
        float _1217 = (dot(vec3(_731, _732, _733), vec3(_1209 * _1201, _1209 * _1202, _1209 * _1203)) + 1.0) * 0.5;
        float _4184 = isnan(0.0) ? _1217 : (isnan(_1217) ? 0.0 : max(_1217, 0.0));
        float _1226 = sqrt(((_1202 * _1202) + (_1201 * _1201)) + (_1203 * _1203)) / (_1155 + 9.9999997473787516355514526367188e-06);
        float _4195 = isnan(0.0) ? _1226 : (isnan(_1226) ? 0.0 : max(_1226, 0.0));
        float _1227 = isnan(1.0) ? _4195 : (isnan(_4195) ? 1.0 : min(_4195, 1.0));
        float _1228 = _1227 * 2.0;
        float _1232 = (1.0 - _1227) / (_1227 + 1.0);
        float _4206 = isnan(0.0) ? _1232 : (isnan(_1232) ? 0.0 : max(_1232, 0.0));
        float _1233 = isnan(1.0) ? _4206 : (isnan(_4206) ? 1.0 : min(_4206, 1.0));
        float _1242 = ((((1.0 - _1233) * (_1228 + 2.0)) * exp2(log2(isnan(1.0) ? _4184 : (isnan(_4184) ? 1.0 : min(_4184, 1.0))) * (_1228 + 1.0))) + _1233) * _1155;
        float _1243 = _1123 * 0.5;
        float _1244 = _1133 * 0.5;
        float _1245 = _1143 * 0.5;
        float _1246 = dot(vec3(_1243, _1244, _1245), vec3(_1243, _1244, _1245));
        float _1251 = (_1246 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1246);
        float _1259 = (dot(vec3(_731, _732, _733), vec3(_1251 * _1243, _1251 * _1244, _1251 * _1245)) + 1.0) * 0.5;
        float _4217 = isnan(0.0) ? _1259 : (isnan(_1259) ? 0.0 : max(_1259, 0.0));
        float _1268 = sqrt(((_1244 * _1244) + (_1243 * _1243)) + (_1245 * _1245)) / (_1156 + 9.9999997473787516355514526367188e-06);
        float _4228 = isnan(0.0) ? _1268 : (isnan(_1268) ? 0.0 : max(_1268, 0.0));
        float _1269 = isnan(1.0) ? _4228 : (isnan(_4228) ? 1.0 : min(_4228, 1.0));
        float _1270 = _1269 * 2.0;
        float _1274 = (1.0 - _1269) / (_1269 + 1.0);
        float _4239 = isnan(0.0) ? _1274 : (isnan(_1274) ? 0.0 : max(_1274, 0.0));
        float _1275 = isnan(1.0) ? _4239 : (isnan(_4239) ? 1.0 : min(_4239, 1.0));
        float _1284 = ((((1.0 - _1275) * (_1270 + 2.0)) * exp2(log2(isnan(1.0) ? _4217 : (isnan(_4217) ? 1.0 : min(_4217, 1.0))) * (_1270 + 1.0))) + _1275) * _1156;
        _1292 = _1123;
        _1294 = _1122;
        _1295 = _1121;
        _1296 = _1133;
        _1297 = _1132;
        _1298 = _1131;
        _1299 = _1143;
        _1300 = _1142;
        _1301 = _1141;
        _1302 = _1156;
        _1303 = _1155;
        _1304 = _1154;
        _1305 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1200 : (isnan(_1200) ? 0.0 : max(_1200, 0.0)));
        _1306 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1242 : (isnan(_1242) ? 0.0 : max(_1242, 0.0)));
        _1307 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1284 : (isnan(_1284) ? 0.0 : max(_1284, 0.0)));
    }
    else
    {
        _1292 = _1293;
        _1294 = _1293;
        _1295 = _1293;
        _1296 = _1293;
        _1297 = _1293;
        _1298 = _1293;
        _1299 = _1293;
        _1300 = _1293;
        _1301 = _1293;
        _1302 = _1293;
        _1303 = _1293;
        _1304 = _1293;
        _1305 = 0.0;
        _1306 = 0.0;
        _1307 = 0.0;
    }
    float _1603;
    float _1604;
    float _1605;
    float _1606;
    float _1607;
    float _1608;
    float _1609;
    float _1610;
    float _1611;
    float _1612;
    float _1613;
    float _1614;
    float _1615;
    float _1616;
    float _1617;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1334 = fma(_962, cbModelParam._m0[30u].z, fma(_958, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _954));
        float _1338 = fma(_962, cbModelParam._m0[31u].z, fma(_958, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _954));
        float _1342 = fma(_962, cbModelParam._m0[32u].z, fma(_958, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _954));
        float _1365 = _954 + _731;
        float _1366 = _958 + _732;
        float _1367 = _962 + _733;
        float _1377 = fma(_1367, cbModelParam._m0[30u].z, fma(_1366, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1365)) - _1334;
        float _1378 = fma(_1367, cbModelParam._m0[31u].z, fma(_1366, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1365)) - _1338;
        float _1379 = fma(_1367, cbModelParam._m0[32u].z, fma(_1366, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1365)) - _1342;
        float _1383 = inversesqrt(dot(vec3(_1377, _1378, _1379), vec3(_1377, _1378, _1379)));
        float _1396 = ((_1383 * _1377) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1334 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1397 = ((_1383 * _1378) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1338 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1398 = ((_1383 * _1379) / cbModelParam._m0[35u].z) + ((((((_1342 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1400 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1396, _1397, _1398), 0.0);
        vec4 _1407 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1396, _1397, _1398), 0.0);
        vec4 _1414 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1396, _1397, _1398), 0.0);
        vec4 _1421 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1396, _1397, _1398), 0.0);
        float _1433 = exp2((_1400.w + (-0.5)) * 20.0) * 2.0;
        float _1434 = _1433 * (_1400.x + (-0.5));
        float _1435 = _1433 * (_1400.y + (-0.5));
        float _1436 = _1433 * (_1400.z + (-0.5));
        float _1443 = exp2((_1407.w + (-0.5)) * 20.0) * 2.0;
        float _1444 = _1443 * (_1407.x + (-0.5));
        float _1445 = _1443 * (_1407.y + (-0.5));
        float _1446 = _1443 * (_1407.z + (-0.5));
        float _1453 = exp2((_1414.w + (-0.5)) * 20.0) * 2.0;
        float _1454 = _1453 * (_1414.x + (-0.5));
        float _1455 = _1453 * (_1414.y + (-0.5));
        float _1456 = _1453 * (_1414.z + (-0.5));
        float _1463 = exp2((_1421.w + (-0.5)) * 20.0) * 2.0;
        float _1464 = _1463 * (_1421.x + (-0.5));
        float _1465 = _1463 * (_1421.y + (-0.5));
        float _1466 = _1463 * (_1421.z + (-0.5));
        float _1467 = isnan(0.0) ? _1464 : (isnan(_1464) ? 0.0 : max(_1464, 0.0));
        float _1468 = isnan(0.0) ? _1465 : (isnan(_1465) ? 0.0 : max(_1465, 0.0));
        float _1469 = isnan(0.0) ? _1466 : (isnan(_1466) ? 0.0 : max(_1466, 0.0));
        float _1470 = _1434 * 0.5;
        float _1471 = _1444 * 0.5;
        float _1472 = _1454 * 0.5;
        float _1473 = dot(vec3(_1470, _1471, _1472), vec3(_1470, _1471, _1472));
        float _1478 = (_1473 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1473);
        float _1486 = (dot(vec3(_731, _732, _733), vec3(_1478 * _1470, _1478 * _1471, _1478 * _1472)) + 1.0) * 0.5;
        float _4280 = isnan(0.0) ? _1486 : (isnan(_1486) ? 0.0 : max(_1486, 0.0));
        float _1495 = sqrt(((_1471 * _1471) + (_1470 * _1470)) + (_1472 * _1472)) / (_1467 + 9.9999997473787516355514526367188e-06);
        float _4291 = isnan(0.0) ? _1495 : (isnan(_1495) ? 0.0 : max(_1495, 0.0));
        float _1496 = isnan(1.0) ? _4291 : (isnan(_4291) ? 1.0 : min(_4291, 1.0));
        float _1497 = _1496 * 2.0;
        float _1501 = (1.0 - _1496) / (_1496 + 1.0);
        float _4302 = isnan(0.0) ? _1501 : (isnan(_1501) ? 0.0 : max(_1501, 0.0));
        float _1502 = isnan(1.0) ? _4302 : (isnan(_4302) ? 1.0 : min(_4302, 1.0));
        float _1511 = ((((1.0 - _1502) * (_1497 + 2.0)) * exp2(log2(isnan(1.0) ? _4280 : (isnan(_4280) ? 1.0 : min(_4280, 1.0))) * (_1497 + 1.0))) + _1502) * _1467;
        float _1512 = _1435 * 0.5;
        float _1513 = _1445 * 0.5;
        float _1514 = _1455 * 0.5;
        float _1515 = dot(vec3(_1512, _1513, _1514), vec3(_1512, _1513, _1514));
        float _1520 = (_1515 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1515);
        float _1528 = (dot(vec3(_731, _732, _733), vec3(_1520 * _1512, _1520 * _1513, _1520 * _1514)) + 1.0) * 0.5;
        float _4313 = isnan(0.0) ? _1528 : (isnan(_1528) ? 0.0 : max(_1528, 0.0));
        float _1537 = sqrt(((_1513 * _1513) + (_1512 * _1512)) + (_1514 * _1514)) / (_1468 + 9.9999997473787516355514526367188e-06);
        float _4324 = isnan(0.0) ? _1537 : (isnan(_1537) ? 0.0 : max(_1537, 0.0));
        float _1538 = isnan(1.0) ? _4324 : (isnan(_4324) ? 1.0 : min(_4324, 1.0));
        float _1539 = _1538 * 2.0;
        float _1543 = (1.0 - _1538) / (_1538 + 1.0);
        float _4335 = isnan(0.0) ? _1543 : (isnan(_1543) ? 0.0 : max(_1543, 0.0));
        float _1544 = isnan(1.0) ? _4335 : (isnan(_4335) ? 1.0 : min(_4335, 1.0));
        float _1553 = ((((1.0 - _1544) * (_1539 + 2.0)) * exp2(log2(isnan(1.0) ? _4313 : (isnan(_4313) ? 1.0 : min(_4313, 1.0))) * (_1539 + 1.0))) + _1544) * _1468;
        float _1554 = _1436 * 0.5;
        float _1555 = _1446 * 0.5;
        float _1556 = _1456 * 0.5;
        float _1557 = dot(vec3(_1554, _1555, _1556), vec3(_1554, _1555, _1556));
        float _1562 = (_1557 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1557);
        float _1570 = (dot(vec3(_731, _732, _733), vec3(_1562 * _1554, _1562 * _1555, _1562 * _1556)) + 1.0) * 0.5;
        float _4346 = isnan(0.0) ? _1570 : (isnan(_1570) ? 0.0 : max(_1570, 0.0));
        float _1579 = sqrt(((_1555 * _1555) + (_1554 * _1554)) + (_1556 * _1556)) / (_1469 + 9.9999997473787516355514526367188e-06);
        float _4357 = isnan(0.0) ? _1579 : (isnan(_1579) ? 0.0 : max(_1579, 0.0));
        float _1580 = isnan(1.0) ? _4357 : (isnan(_4357) ? 1.0 : min(_4357, 1.0));
        float _1581 = _1580 * 2.0;
        float _1585 = (1.0 - _1580) / (_1580 + 1.0);
        float _4368 = isnan(0.0) ? _1585 : (isnan(_1585) ? 0.0 : max(_1585, 0.0));
        float _1586 = isnan(1.0) ? _4368 : (isnan(_4368) ? 1.0 : min(_4368, 1.0));
        float _1595 = ((((1.0 - _1586) * (_1581 + 2.0)) * exp2(log2(isnan(1.0) ? _4346 : (isnan(_4346) ? 1.0 : min(_4346, 1.0))) * (_1581 + 1.0))) + _1586) * _1469;
        _1603 = _1436;
        _1604 = _1435;
        _1605 = _1434;
        _1606 = _1446;
        _1607 = _1445;
        _1608 = _1444;
        _1609 = _1456;
        _1610 = _1455;
        _1611 = _1454;
        _1612 = _1469;
        _1613 = _1468;
        _1614 = _1467;
        _1615 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1511 : (isnan(_1511) ? 0.0 : max(_1511, 0.0)));
        _1616 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1553 : (isnan(_1553) ? 0.0 : max(_1553, 0.0)));
        _1617 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1595 : (isnan(_1595) ? 0.0 : max(_1595, 0.0)));
    }
    else
    {
        _1603 = _1293;
        _1604 = _1293;
        _1605 = _1293;
        _1606 = _1293;
        _1607 = _1293;
        _1608 = _1293;
        _1609 = _1293;
        _1610 = _1293;
        _1611 = _1293;
        _1612 = _1293;
        _1613 = _1293;
        _1614 = _1293;
        _1615 = 0.0;
        _1616 = 0.0;
        _1617 = 0.0;
    }
    float _1627 = (cbModelParam._m0[1u].x * (_1615 - _1305)) + _1305;
    float _1628 = (cbModelParam._m0[1u].x * (_1616 - _1306)) + _1306;
    float _1629 = (cbModelParam._m0[1u].x * (_1617 - _1307)) + _1307;
    float _1650 = fma(_1629, cbSceneParam._m0[89u].z, fma(_1628, cbSceneParam._m0[89u].y, _1627 * cbSceneParam._m0[89u].x));
    float _1653 = fma(_1629, cbSceneParam._m0[90u].z, fma(_1628, cbSceneParam._m0[90u].y, _1627 * cbSceneParam._m0[90u].x));
    float _1656 = fma(_1629, cbSceneParam._m0[91u].z, fma(_1628, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1627));
    float _1671 = _901 * 0.5;
    float _1672 = _902 * 0.5;
    float _1673 = _903 * 0.5;
    float _1674 = dot(vec4(_1671, _1672, _1673, 1.0), vec4(_1605, _1608, _1611, _1614));
    float _1677 = dot(vec4(_1671, _1672, _1673, 1.0), vec4(_1604, _1607, _1610, _1613));
    float _1680 = dot(vec4(_1671, _1672, _1673, 1.0), vec4(_1603, _1606, _1609, _1612));
    float _1714;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1687 = dot(vec4(_1671, _1672, _1673, 1.0), vec4(_1292, _1296, _1299, _1302));
        float _1691 = dot(vec4(_1671, _1672, _1673, 1.0), vec4(_1294, _1297, _1300, _1303));
        float _1695 = dot(vec4(_1671, _1672, _1673, 1.0), vec4(_1295, _1298, _1301, _1304));
        float _1702 = dot(vec4(cbModelParam._m0[39u]), vec4(_1671, _1672, _1673, 1.0));
        _1714 = dot(vec3(isnan(0.0) ? _1695 : (isnan(_1695) ? 0.0 : max(_1695, 0.0)), isnan(0.0) ? _1691 : (isnan(_1691) ? 0.0 : max(_1691, 0.0)), isnan(0.0) ? _1687 : (isnan(_1687) ? 0.0 : max(_1687, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1702) ? 0.0 : (isnan(0.0) ? _1702 : max(0.0, _1702))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1714 = 1.0;
    }
    float _1725;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1716 = dot(vec4(cbModelParam._m0[40u]), vec4(_1671, _1672, _1673, 1.0));
        _1725 = dot(vec3(isnan(0.0) ? _1674 : (isnan(_1674) ? 0.0 : max(_1674, 0.0)), isnan(0.0) ? _1677 : (isnan(_1677) ? 0.0 : max(_1677, 0.0)), isnan(0.0) ? _1680 : (isnan(_1680) ? 0.0 : max(_1680, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1716) ? 0.0 : (isnan(0.0) ? _1716 : max(0.0, _1716))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1725 = 1.0;
    }
    float _1729 = (_1725 * cbModelParam._m0[1u].x) + (_1714 * (1.0 - cbModelParam._m0[1u].x));
    float _1739 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _734);
    float _1740 = isnan(_1739) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1739 : min(cbModelParam._m0[25u].z, _1739));
    float _1822;
    float _1824;
    float _1826;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1789 = fma(_962, cbModelParam._m0[13u].z, fma(_958, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _954)) + cbModelParam._m0[13u].w;
        float _1793 = fma(_962, cbModelParam._m0[14u].z, fma(_958, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _954)) + cbModelParam._m0[14u].w;
        float _1797 = fma(_962, cbModelParam._m0[15u].z, fma(_958, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _954)) + cbModelParam._m0[15u].w;
        float _1800 = fma(_903, cbModelParam._m0[13u].z, fma(_902, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _901));
        float _1803 = fma(_903, cbModelParam._m0[14u].z, fma(_902, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _901));
        float _1806 = fma(_903, cbModelParam._m0[15u].z, fma(_902, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _901));
        float _1834;
        if (_1800 > 0.0)
        {
            _1834 = abs((1.0 - _1789) / _1800);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1800 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1789 + 1.0) / _1800);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1834 = frontier_phi_17_15_ladder;
        }
        float _2005;
        if (_1803 > 0.0)
        {
            _2005 = abs((1.0 - _1793) / _1803);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1803 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1793 + 1.0) / _1803);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2005 = frontier_phi_26_22_ladder;
        }
        float _2300;
        if (_1806 > 0.0)
        {
            _2300 = abs((1.0 - _1797) / _1806);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1806 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1797 + 1.0) / _1806);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2300 = frontier_phi_38_33_ladder;
        }
        float _2302 = isnan(_2005) ? _1834 : (isnan(_1834) ? _2005 : min(_1834, _2005));
        float _2303 = isnan(_2300) ? _2302 : (isnan(_2302) ? _2300 : min(_2302, _2300));
        float _2307 = (_2303 * _1800) + _1789;
        float _2308 = (_2303 * _1803) + _1793;
        float _2309 = (_2303 * _1806) + _1797;
        float _2310 = _2303 * 9.9999997473787516355514526367188e-05;
        float _2312 = (-1.0) - _2310;
        float _2314 = _2310 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2309 > _2314) || ((_2309 < _2312) || ((_2308 > _2314) || ((_2308 < _2312) || ((_2307 < _2312) || (_2307 > _2314))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2454 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2309, cbModelParam._m0[9u].z, fma(_2308, cbModelParam._m0[9u].y, _2307 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2309, cbModelParam._m0[10u].z, fma(_2308, cbModelParam._m0[10u].y, _2307 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2309, cbModelParam._m0[11u].z, fma(_2308, cbModelParam._m0[11u].y, _2307 * cbModelParam._m0[11u].x))), _1740);
            frontier_phi_16_38_ladder = _2454.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2454.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2454.x * cbModelParam._m0[1u].y;
        }
        _1822 = frontier_phi_16_38_ladder_2;
        _1824 = frontier_phi_16_38_ladder_1;
        _1826 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1810 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_901, _902, _903), _1740);
        _1822 = _1810.x * cbModelParam._m0[1u].y;
        _1824 = _1810.y * cbModelParam._m0[1u].y;
        _1826 = _1810.z * cbModelParam._m0[1u].y;
    }
    float _1830 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _734);
    float _1831 = isnan(_1830) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1830 : min(cbModelParam._m0[25u].w, _1830));
    float _1922;
    float _1924;
    float _1926;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1886 = fma(_962, cbModelParam._m0[21u].z, fma(_958, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _954)) + cbModelParam._m0[21u].w;
        float _1890 = fma(_962, cbModelParam._m0[22u].z, fma(_958, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _954)) + cbModelParam._m0[22u].w;
        float _1894 = fma(_962, cbModelParam._m0[23u].z, fma(_958, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _954)) + cbModelParam._m0[23u].w;
        float _1897 = fma(_903, cbModelParam._m0[21u].z, fma(_902, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _901));
        float _1900 = fma(_903, cbModelParam._m0[22u].z, fma(_902, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _901));
        float _1903 = fma(_903, cbModelParam._m0[23u].z, fma(_902, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _901));
        float _2010;
        if (_1897 > 0.0)
        {
            _2010 = abs((1.0 - _1886) / _1897);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1897 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1886 + 1.0) / _1897);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2010 = frontier_phi_28_24_ladder;
        }
        float _2327;
        if (_1900 > 0.0)
        {
            _2327 = abs((1.0 - _1890) / _1900);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1900 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1890 + 1.0) / _1900);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2327 = frontier_phi_40_35_ladder;
        }
        float _2654;
        if (_1903 > 0.0)
        {
            _2654 = abs((1.0 - _1894) / _1903);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_1903 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_1894 + 1.0) / _1903);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _2654 = frontier_phi_50_47_ladder;
        }
        float _2656 = isnan(_2327) ? _2010 : (isnan(_2010) ? _2327 : min(_2010, _2327));
        float _2657 = isnan(_2654) ? _2656 : (isnan(_2656) ? _2654 : min(_2656, _2654));
        float _2661 = (_2657 * _1897) + _1886;
        float _2662 = (_2657 * _1900) + _1890;
        float _2663 = (_2657 * _1903) + _1894;
        float _2664 = _2657 * 9.9999997473787516355514526367188e-05;
        float _2665 = (-1.0) - _2664;
        float _2667 = _2664 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_2663 > _2667) || ((_2663 < _2665) || ((_2662 > _2667) || ((_2662 < _2665) || ((_2661 < _2665) || (_2661 > _2667))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2781 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2663, cbModelParam._m0[17u].z, fma(_2662, cbModelParam._m0[17u].y, _2661 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2663, cbModelParam._m0[18u].z, fma(_2662, cbModelParam._m0[18u].y, _2661 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2663, cbModelParam._m0[19u].z, fma(_2662, cbModelParam._m0[19u].y, _2661 * cbModelParam._m0[19u].x))), _1831);
            frontier_phi_25_50_ladder = _2781.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _2781.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _2781.x * cbModelParam._m0[1u].z;
        }
        _1922 = frontier_phi_25_50_ladder_2;
        _1924 = frontier_phi_25_50_ladder_1;
        _1926 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _1906 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_901, _902, _903), _1831);
        _1922 = _1906.x * cbModelParam._m0[1u].z;
        _1924 = _1906.y * cbModelParam._m0[1u].z;
        _1926 = _1906.z * cbModelParam._m0[1u].z;
    }
    float _1938 = ((((1.0 - _922) * ((_909 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_922 * _909)) * _893;
    float _1939 = _1938 * ((cbModelParam._m0[1u].w * (_1922 - _1822)) + _1822);
    float _1940 = _1938 * ((cbModelParam._m0[1u].w * (_1924 - _1824)) + _1824);
    float _1941 = _1938 * ((cbModelParam._m0[1u].w * (_1926 - _1826)) + _1826);
    float _1944 = fma(_1941, cbSceneParam._m0[89u].z, fma(_1940, cbSceneParam._m0[89u].y, _1939 * cbSceneParam._m0[89u].x));
    float _1947 = fma(_1941, cbSceneParam._m0[90u].z, fma(_1940, cbSceneParam._m0[90u].y, _1939 * cbSceneParam._m0[90u].x));
    float _1950 = fma(_1941, cbSceneParam._m0[91u].z, fma(_1940, cbSceneParam._m0[91u].y, _1939 * cbSceneParam._m0[91u].x));
    float _1984 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1988 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1992 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1996 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1997 = _1984 / _1996;
    float _1998 = _1988 / _1996;
    float _1999 = _1992 / _1996;
    float _2146;
    float _2147;
    float _2148;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2026 = ((uint(_1999 > cbSceneParam._m0[59u].y) + uint(_1999 > cbSceneParam._m0[59u].x)) + uint(_1999 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2027 = _2026 + 43u;
        uint _2035 = _2026 + 44u;
        uint _2043 = _2026 + 45u;
        uint _2051 = _2026 + 46u;
        float _2062 = fma(_1996, cbSceneParam._m0[_2027].w, fma(_1992, cbSceneParam._m0[_2027].z, fma(_1988, cbSceneParam._m0[_2027].y, _1984 * cbSceneParam._m0[_2027].x)));
        float _2066 = fma(_1996, cbSceneParam._m0[_2035].w, fma(_1992, cbSceneParam._m0[_2035].z, fma(_1988, cbSceneParam._m0[_2035].y, _1984 * cbSceneParam._m0[_2035].x)));
        float _2074 = fma(_1996, cbSceneParam._m0[_2051].w, fma(_1992, cbSceneParam._m0[_2051].z, fma(_1988, cbSceneParam._m0[_2051].y, _1984 * cbSceneParam._m0[_2051].x)));
        float _2079 = cbSceneParam._m0[33u].z * _2074;
        float _2081 = cbSceneParam._m0[33u].w * _2074;
        float _2084 = fma(_1996, cbSceneParam._m0[_2043].w, fma(_1992, cbSceneParam._m0[_2043].z, fma(_1988, cbSceneParam._m0[_2043].y, _1984 * cbSceneParam._m0[_2043].x))) / _2074;
        float _2132 = (cbSceneParam._m0[33u].x - sqrt(((_1998 * _1998) + (_1997 * _1997)) + (_1999 * _1999))) * cbSceneParam._m0[33u].y;
        float _4494 = isnan(0.0) ? _2132 : (isnan(_2132) ? 0.0 : max(_2132, 0.0));
        float _2139 = (isnan(1.0) ? _4494 : (isnan(_4494) ? 1.0 : min(_4494, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2079 + _2062) / _2074, (_2081 + _2066) / _2074), _2084), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2081 + _2062) / _2074, (_2066 - _2079) / _2074), _2084), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2062 - _2079) / _2074, (_2066 - _2081) / _2074), _2084), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2062 - _2081) / _2074, (_2079 + _2066) / _2074), _2084), 0.0)).x), vec4(0.25)));
        _2146 = 1.0 - (_2139 * cbSceneParam._m0[34u].x);
        _2147 = 1.0 - (_2139 * cbSceneParam._m0[34u].y);
        _2148 = 1.0 - (_2139 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2146 = 1.0;
        _2147 = 1.0;
        _2148 = 1.0;
    }
    float _2212;
    float _2214;
    float _2216;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2200 = fma(_1996, cbSceneParam._m0[63u].w, fma(_1992, cbSceneParam._m0[63u].z, fma(_1988, cbSceneParam._m0[63u].y, _1984 * cbSceneParam._m0[63u].x)));
        float _2201 = fma(_1996, cbSceneParam._m0[60u].w, fma(_1992, cbSceneParam._m0[60u].z, fma(_1988, cbSceneParam._m0[60u].y, _1984 * cbSceneParam._m0[60u].x))) / _2200;
        float _2202 = fma(_1996, cbSceneParam._m0[61u].w, fma(_1992, cbSceneParam._m0[61u].z, fma(_1988, cbSceneParam._m0[61u].y, _1984 * cbSceneParam._m0[61u].x))) / _2200;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_2201 >= cbSceneParam._m0[64u].x) && (_2202 >= cbSceneParam._m0[64u].y)) && (_2201 <= cbSceneParam._m0[64u].z)) && (_2202 <= cbSceneParam._m0[64u].w))
        {
            float _2340 = fma(_1996, cbSceneParam._m0[62u].w, fma(_1992, cbSceneParam._m0[62u].z, fma(_1988, cbSceneParam._m0[62u].y, _1984 * cbSceneParam._m0[62u].x))) / _2200;
            float _2344 = isnan(cbSceneParam._m0[41u].w) ? _2340 : (isnan(_2340) ? cbSceneParam._m0[41u].w : max(_2340, cbSceneParam._m0[41u].w));
            float _2387 = (cbSceneParam._m0[33u].x - sqrt(((_1998 * _1998) + (_1997 * _1997)) + (_1999 * _1999))) * cbSceneParam._m0[33u].y;
            float _4510 = isnan(0.0) ? _2387 : (isnan(_2387) ? 0.0 : max(_2387, 0.0));
            float _2394 = (isnan(1.0) ? _4510 : (isnan(_4510) ? 1.0 : min(_4510, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2201, cbSceneParam._m0[33u].w + _2202), _2344), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2201, _2202 - cbSceneParam._m0[33u].z), _2344), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2201 - cbSceneParam._m0[33u].z, _2202 - cbSceneParam._m0[33u].w), _2344), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2201 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2202), _2344), 0.0)).x), vec4(0.25)));
            float _2398 = 1.0 - (_2394 * cbSceneParam._m0[34u].x);
            float _2399 = 1.0 - (_2394 * cbSceneParam._m0[34u].y);
            float _2400 = 1.0 - (_2394 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_2400) ? _2148 : (isnan(_2148) ? _2400 : min(_2148, _2400));
            frontier_phi_37_36_ladder_1 = isnan(_2399) ? _2147 : (isnan(_2147) ? _2399 : min(_2147, _2399));
            frontier_phi_37_36_ladder_2 = isnan(_2398) ? _2146 : (isnan(_2146) ? _2398 : min(_2146, _2398));
        }
        else
        {
            frontier_phi_37_36_ladder = _2148;
            frontier_phi_37_36_ladder_1 = _2147;
            frontier_phi_37_36_ladder_2 = _2146;
        }
        _2212 = frontier_phi_37_36_ladder_2;
        _2214 = frontier_phi_37_36_ladder_1;
        _2216 = frontier_phi_37_36_ladder;
    }
    else
    {
        _2212 = _2146;
        _2214 = _2147;
        _2216 = _2148;
    }
    uvec4 _2221 = floatBitsToUint(cbInstanceData._m0[_272 + 5u]);
    uint _2223 = _2221.x * 14u;
    uint _2224 = _2223 + 13u;
    float _2231 = _893 + (-1.0);
    float _2236 = (cbLight._m0[_2224].x * _2231) + 1.0;
    float _2237 = (cbLight._m0[_2224].y * _2231) + 1.0;
    float _2238 = (cbLight._m0[_2224].z * _2231) + 1.0;
    float _2239 = (cbLight._m0[_2224].w * _2231) + 1.0;
    uint _2240 = _2223 + 5u;
    float _2246 = isnan(1.0) ? _2237 : (isnan(_2237) ? 1.0 : min(_2237, 1.0));
    uint _2250 = _2223 + 4u;
    float _2259 = isnan(1.0) ? _2236 : (isnan(_2236) ? 1.0 : min(_2236, 1.0));
    uint _2263 = _2223 | 1u;
    float _2274 = dot(vec3(cbLight._m0[_2223].xyz), vec3(_731, _732, _733));
    float _2277 = dot(vec3(cbLight._m0[_2263].xyz), vec3(_731, _732, _733));
    float _4546 = isnan(0.0) ? _2274 : (isnan(_2274) ? 0.0 : max(_2274, 0.0));
    float _4557 = isnan(0.0) ? _2277 : (isnan(_2277) ? 0.0 : max(_2277, 0.0));
    float _2282 = (isnan(1.0) ? _4546 : (isnan(_4546) ? 1.0 : min(_4546, 1.0))) * 0.3183098733425140380859375;
    float _2284 = (isnan(1.0) ? _4557 : (isnan(_4557) ? 1.0 : min(_4557, 1.0))) * 0.3183098733425140380859375;
    float _2291 = ((cbLight._m0[_2240].x * _2246) * _2284) + (((cbLight._m0[_2250].x * _2212) * _2259) * _2282);
    float _2292 = ((_2246 * cbLight._m0[_2240].y) * _2284) + (((cbLight._m0[_2250].y * _2214) * _2259) * _2282);
    float _2293 = ((_2246 * cbLight._m0[_2240].z) * _2284) + (((cbLight._m0[_2250].z * _2216) * _2259) * _2282);
    uvec4 _2297 = floatBitsToUint(cbLight._m0[_2223 + 12u]);
    bool _2299 = _2297.x == 0u;
    float _2401;
    float _2403;
    float _2405;
    if (_2299)
    {
        _2401 = _2291;
        _2403 = _2292;
        _2405 = _2293;
    }
    else
    {
        uint _2409 = _2223 + 6u;
        float _2425 = (dot(vec3(cbLight._m0[_2223 + 2u].xyz), vec3(_731, _732, _733)) * 0.5) + 0.5;
        float _2426 = _2425 * _2425;
        float _4568 = isnan(0.0) ? _2426 : (isnan(_2426) ? 0.0 : max(_2426, 0.0));
        float _2427 = isnan(1.0) ? _4568 : (isnan(_4568) ? 1.0 : min(_4568, 1.0));
        float _2428 = isnan(1.0) ? _2238 : (isnan(_2238) ? 1.0 : min(_2238, 1.0));
        _2401 = (((cbLight._m0[_2409].x * 0.3183098733425140380859375) * _2427) * _2428) + _2291;
        _2403 = (((cbLight._m0[_2409].y * 0.3183098733425140380859375) * _2427) * _2428) + _2292;
        _2405 = (((cbLight._m0[_2409].z * 0.3183098733425140380859375) * _2427) * _2428) + _2293;
    }
    bool _2408 = _2297.y == 0u;
    float _2463;
    float _2465;
    float _2467;
    if (_2408)
    {
        _2463 = _2401;
        _2465 = _2403;
        _2467 = _2405;
    }
    else
    {
        uint _2625 = _2223 + 7u;
        float _2641 = (dot(vec3(cbLight._m0[_2223 + 3u].xyz), vec3(_731, _732, _733)) * 0.5) + 0.5;
        float _2642 = _2641 * _2641;
        float _4584 = isnan(0.0) ? _2642 : (isnan(_2642) ? 0.0 : max(_2642, 0.0));
        float _2643 = isnan(1.0) ? _4584 : (isnan(_4584) ? 1.0 : min(_4584, 1.0));
        float _2644 = isnan(1.0) ? _2239 : (isnan(_2239) ? 1.0 : min(_2239, 1.0));
        _2463 = (((cbLight._m0[_2625].x * 0.3183098733425140380859375) * _2643) * _2644) + _2401;
        _2465 = (((cbLight._m0[_2625].y * 0.3183098733425140380859375) * _2643) * _2644) + _2403;
        _2467 = (((cbLight._m0[_2625].z * 0.3183098733425140380859375) * _2643) * _2644) + _2405;
    }
    uint _2470 = _2223 + 8u;
    float _2483 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2223].w)) * _734) * 0.949999988079071044921875);
    float _2484 = _2483 * _2483;
    float _2485 = cbLight._m0[_2223].x + _810;
    float _2486 = cbLight._m0[_2223].y + _811;
    float _2487 = cbLight._m0[_2223].z + _812;
    float _2491 = inversesqrt(dot(vec3(_2485, _2486, _2487), vec3(_2485, _2486, _2487)));
    float _2492 = _2491 * _2485;
    float _2493 = _2491 * _2486;
    float _2494 = _2491 * _2487;
    float _2495 = dot(vec3(_731, _732, _733), vec3(cbLight._m0[_2223].xyz));
    float _4600 = isnan(0.0) ? _2495 : (isnan(_2495) ? 0.0 : max(_2495, 0.0));
    float _2498 = isnan(1.0) ? _4600 : (isnan(_4600) ? 1.0 : min(_4600, 1.0));
    float _4611 = isnan(0.0) ? _894 : (isnan(_894) ? 0.0 : max(_894, 0.0));
    float _2499 = isnan(1.0) ? _4611 : (isnan(_4611) ? 1.0 : min(_4611, 1.0));
    float _2500 = dot(vec3(_731, _732, _733), vec3(_2492, _2493, _2494));
    float _4622 = isnan(0.0) ? _2500 : (isnan(_2500) ? 0.0 : max(_2500, 0.0));
    float _2503 = isnan(1.0) ? _4622 : (isnan(_4622) ? 1.0 : min(_4622, 1.0));
    float _2504 = dot(vec3(cbLight._m0[_2223].xyz), vec3(_2492, _2493, _2494));
    float _4633 = isnan(0.0) ? _2504 : (isnan(_2504) ? 0.0 : max(_2504, 0.0));
    float _2508 = _2484 * _2484;
    float _2512 = ((_2503 * _2503) * (_2508 + (-1.0))) + 1.0;
    float _2523 = (exp2(log2(1.0 - (isnan(1.0) ? _4633 : (isnan(_4633) ? 1.0 : min(_4633, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2524 = 1.0 - _2484;
    float _2535 = (0.5 / (((_2499 * ((_2498 * _2524) + _2484)) + 9.9999999392252902907785028219223e-09) + (((_2499 * _2524) + _2484) * _2498))) * _2498;
    float _4644 = isnan(0.0) ? _2535 : (isnan(_2535) ? 0.0 : max(_2535, 0.0));
    float _2537 = (isnan(1.0) ? _4644 : (isnan(_4644) ? 1.0 : min(_4644, 1.0))) * (_2508 / ((_2512 * _2512) * 3.141590118408203125));
    uint _2551 = _2223 + 9u;
    float _2562 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2263].w)) * _734) * 0.949999988079071044921875);
    float _2563 = _2562 * _2562;
    float _2564 = cbLight._m0[_2263].x + _810;
    float _2565 = cbLight._m0[_2263].y + _811;
    float _2566 = cbLight._m0[_2263].z + _812;
    float _2570 = inversesqrt(dot(vec3(_2564, _2565, _2566), vec3(_2564, _2565, _2566)));
    float _2571 = _2570 * _2564;
    float _2572 = _2570 * _2565;
    float _2573 = _2570 * _2566;
    float _2574 = dot(vec3(_731, _732, _733), vec3(cbLight._m0[_2263].xyz));
    float _4655 = isnan(0.0) ? _2574 : (isnan(_2574) ? 0.0 : max(_2574, 0.0));
    float _2577 = isnan(1.0) ? _4655 : (isnan(_4655) ? 1.0 : min(_4655, 1.0));
    float _2578 = dot(vec3(_731, _732, _733), vec3(_2571, _2572, _2573));
    float _4666 = isnan(0.0) ? _2578 : (isnan(_2578) ? 0.0 : max(_2578, 0.0));
    float _2581 = isnan(1.0) ? _4666 : (isnan(_4666) ? 1.0 : min(_4666, 1.0));
    float _2582 = dot(vec3(cbLight._m0[_2263].xyz), vec3(_2571, _2572, _2573));
    float _4677 = isnan(0.0) ? _2582 : (isnan(_2582) ? 0.0 : max(_2582, 0.0));
    float _2586 = _2563 * _2563;
    float _2590 = ((_2581 * _2581) * (_2586 + (-1.0))) + 1.0;
    float _2599 = (exp2(log2(1.0 - (isnan(1.0) ? _4677 : (isnan(_4677) ? 1.0 : min(_4677, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2600 = 1.0 - _2563;
    float _2610 = (0.5 / (((_2499 * ((_2577 * _2600) + _2563)) + 9.9999999392252902907785028219223e-09) + (((_2499 * _2600) + _2563) * _2577))) * _2577;
    float _4688 = isnan(0.0) ? _2610 : (isnan(_2610) ? 0.0 : max(_2610, 0.0));
    float _2612 = (isnan(1.0) ? _4688 : (isnan(_4688) ? 1.0 : min(_4688, 1.0))) * (_2586 / ((_2590 * _2590) * 3.141590118408203125));
    float _2622 = (((_2599 * cbLight._m0[_2551].x) * _2612) * _2246) + ((((cbLight._m0[_2470].x * _2212) * _2523) * _2537) * _2259);
    float _2623 = (((_2599 * cbLight._m0[_2551].y) * _2612) * _2246) + ((((cbLight._m0[_2470].y * _2214) * _2523) * _2537) * _2259);
    float _2624 = (((_2599 * cbLight._m0[_2551].z) * _2612) * _2246) + ((((cbLight._m0[_2470].z * _2216) * _2523) * _2537) * _2259);
    float _2680;
    float _2682;
    float _2684;
    if (_2299)
    {
        _2680 = _2622;
        _2682 = _2623;
        _2684 = _2624;
    }
    else
    {
        uint _2686 = _2223 + 2u;
        uint _2690 = _2223 + 10u;
        float _2704 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2686].w)) * _734) * 0.949999988079071044921875);
        float _2705 = _2704 * _2704;
        float _2706 = cbLight._m0[_2686].x + _810;
        float _2707 = cbLight._m0[_2686].y + _811;
        float _2708 = cbLight._m0[_2686].z + _812;
        float _2712 = inversesqrt(dot(vec3(_2706, _2707, _2708), vec3(_2706, _2707, _2708)));
        float _2713 = _2712 * _2706;
        float _2714 = _2712 * _2707;
        float _2715 = _2712 * _2708;
        float _2716 = dot(vec3(_731, _732, _733), vec3(cbLight._m0[_2686].xyz));
        float _4699 = isnan(0.0) ? _2716 : (isnan(_2716) ? 0.0 : max(_2716, 0.0));
        float _2719 = isnan(1.0) ? _4699 : (isnan(_4699) ? 1.0 : min(_4699, 1.0));
        float _2720 = dot(vec3(_731, _732, _733), vec3(_2713, _2714, _2715));
        float _4710 = isnan(0.0) ? _2720 : (isnan(_2720) ? 0.0 : max(_2720, 0.0));
        float _2723 = isnan(1.0) ? _4710 : (isnan(_4710) ? 1.0 : min(_4710, 1.0));
        float _2724 = dot(vec3(cbLight._m0[_2686].xyz), vec3(_2713, _2714, _2715));
        float _4721 = isnan(0.0) ? _2724 : (isnan(_2724) ? 0.0 : max(_2724, 0.0));
        float _2728 = _2705 * _2705;
        float _2732 = ((_2723 * _2723) * (_2728 + (-1.0))) + 1.0;
        float _2741 = (exp2(log2(1.0 - (isnan(1.0) ? _4721 : (isnan(_4721) ? 1.0 : min(_4721, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2742 = 1.0 - _2705;
        float _2752 = (0.5 / (((_2499 * ((_2719 * _2742) + _2705)) + 9.9999999392252902907785028219223e-09) + (((_2499 * _2742) + _2705) * _2719))) * _2719;
        float _4732 = isnan(0.0) ? _2752 : (isnan(_2752) ? 0.0 : max(_2752, 0.0));
        float _2754 = (isnan(1.0) ? _4732 : (isnan(_4732) ? 1.0 : min(_4732, 1.0))) * (_2728 / ((_2732 * _2732) * 3.141590118408203125));
        float _2755 = isnan(1.0) ? _2238 : (isnan(_2238) ? 1.0 : min(_2238, 1.0));
        _2680 = (((_2741 * cbLight._m0[_2690].x) * _2754) * _2755) + _2622;
        _2682 = (((_2741 * cbLight._m0[_2690].y) * _2754) * _2755) + _2623;
        _2684 = (((_2741 * cbLight._m0[_2690].z) * _2754) * _2755) + _2624;
    }
    float _2786;
    float _2788;
    float _2790;
    if (_2408)
    {
        _2786 = _2680;
        _2788 = _2682;
        _2790 = _2684;
    }
    else
    {
        uint _2797 = _2223 + 3u;
        uint _2801 = _2223 + 11u;
        float _2815 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2797].w)) * _734) * 0.949999988079071044921875);
        float _2816 = _2815 * _2815;
        float _2817 = cbLight._m0[_2797].x + _810;
        float _2818 = cbLight._m0[_2797].y + _811;
        float _2819 = cbLight._m0[_2797].z + _812;
        float _2823 = inversesqrt(dot(vec3(_2817, _2818, _2819), vec3(_2817, _2818, _2819)));
        float _2824 = _2823 * _2817;
        float _2825 = _2823 * _2818;
        float _2826 = _2823 * _2819;
        float _2827 = dot(vec3(_731, _732, _733), vec3(cbLight._m0[_2797].xyz));
        float _4748 = isnan(0.0) ? _2827 : (isnan(_2827) ? 0.0 : max(_2827, 0.0));
        float _2830 = isnan(1.0) ? _4748 : (isnan(_4748) ? 1.0 : min(_4748, 1.0));
        float _2831 = dot(vec3(_731, _732, _733), vec3(_2824, _2825, _2826));
        float _4759 = isnan(0.0) ? _2831 : (isnan(_2831) ? 0.0 : max(_2831, 0.0));
        float _2834 = isnan(1.0) ? _4759 : (isnan(_4759) ? 1.0 : min(_4759, 1.0));
        float _2835 = dot(vec3(cbLight._m0[_2797].xyz), vec3(_2824, _2825, _2826));
        float _4770 = isnan(0.0) ? _2835 : (isnan(_2835) ? 0.0 : max(_2835, 0.0));
        float _2839 = _2816 * _2816;
        float _2843 = ((_2834 * _2834) * (_2839 + (-1.0))) + 1.0;
        float _2852 = (exp2(log2(1.0 - (isnan(1.0) ? _4770 : (isnan(_4770) ? 1.0 : min(_4770, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2853 = 1.0 - _2816;
        float _2863 = (0.5 / (((_2499 * ((_2830 * _2853) + _2816)) + 9.9999999392252902907785028219223e-09) + (((_2499 * _2853) + _2816) * _2830))) * _2830;
        float _4781 = isnan(0.0) ? _2863 : (isnan(_2863) ? 0.0 : max(_2863, 0.0));
        float _2865 = (isnan(1.0) ? _4781 : (isnan(_4781) ? 1.0 : min(_4781, 1.0))) * (_2839 / ((_2843 * _2843) * 3.141590118408203125));
        float _2866 = isnan(1.0) ? _2239 : (isnan(_2239) ? 1.0 : min(_2239, 1.0));
        _2786 = (((_2852 * cbLight._m0[_2801].x) * _2865) * _2866) + _2680;
        _2788 = (((_2852 * cbLight._m0[_2801].y) * _2865) * _2866) + _2682;
        _2790 = (((_2852 * cbLight._m0[_2801].z) * _2865) * _2866) + _2684;
    }
    float _2932;
    float _2934;
    float _2936;
    float _2938;
    float _2940;
    float _2942;
    if (_2221.y == 0u)
    {
        uvec4 _2887 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2888 = _2887.x;
        uint _2899 = uint((float(_2887.y) * floor(float(uint(cbSceneParam._m0[85u].y * _831) / _2888))) + floor(float(uint(cbSceneParam._m0[85u].x * _830) / _2888)));
        float _2909 = (log2(_1999 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2910 = isnan(0.0) ? _2909 : (isnan(_2909) ? 0.0 : max(_2909, 0.0));
        uint _2913 = uint(isnan(14.0) ? _2910 : (isnan(_2910) ? 14.0 : min(_2910, 14.0)));
        uvec4 _2918 = texelFetch(g_lightClusterGridBuffer, int(((_2913 << 2u) + (_2899 << 6u)) >> 2u));
        uint _2919 = _2918.x;
        uint _2920 = _2887.z;
        float _2999;
        float _3001;
        float _3003;
        float _3005;
        float _3007;
        float _3009;
        if (((((1u << ((_2920 >> 4u) & 15u)) + 4294967295u) & _2919) == 0u) || ((_2920 & 240u) == 0u))
        {
            _2999 = 0.0;
            _3001 = 0.0;
            _3003 = 0.0;
            _3005 = 0.0;
            _3007 = 0.0;
            _3009 = 0.0;
        }
        else
        {
            float _3000;
            float _3002;
            float _3004;
            float _3006;
            float _3008;
            float _3010;
            float _3152 = 0.0;
            float _3153 = 0.0;
            float _3154 = 0.0;
            float _3155 = 0.0;
            float _3156 = 0.0;
            float _3157 = 0.0;
            uint _3158 = 0u;
            uint _3167;
            bool _3168;
            for (;;)
            {
                _3167 = texelFetch(g_lightClassification, int((((_2913 << 5u) + (_2899 << 9u)) + (_3158 << 2u)) >> 2u)).x;
                _3168 = _3167 == 0u;
                float frontier_phi_71_pred;
                float frontier_phi_71_pred_1;
                float frontier_phi_71_pred_2;
                float frontier_phi_71_pred_3;
                float frontier_phi_71_pred_4;
                float frontier_phi_71_pred_5;
                if (_3168)
                {
                    frontier_phi_71_pred = _3157;
                    frontier_phi_71_pred_1 = _3156;
                    frontier_phi_71_pred_2 = _3155;
                    frontier_phi_71_pred_3 = _3154;
                    frontier_phi_71_pred_4 = _3153;
                    frontier_phi_71_pred_5 = _3152;
                }
                else
                {
                    float _3297;
                    float _3298;
                    float _3299;
                    float _3300;
                    float _3301;
                    float _3302;
                    uint _3303;
                    _3297 = _3152;
                    _3298 = _3153;
                    _3299 = _3154;
                    _3300 = _3155;
                    _3301 = _3156;
                    _3302 = _3157;
                    _3303 = _3167;
                    float _3224;
                    float _3225;
                    float _3226;
                    float _3227;
                    float _3228;
                    float _3229;
                    for (;;)
                    {
                        uint _3307 = uint(findLSB(_3303)) + (_3158 << 5u);
                        uint _3304 = (_3303 + 4294967295u) & _3303;
                        uint _3309 = _3307 * 48u;
                        vec4 _3323 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3309)).x, texelFetch(g_PointLightRenderingBuffer, int(_3309 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3309 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3309 + 3u)).x));
                        uint _3329 = (_3307 * 48u) + 4u;
                        vec4 _3342 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3329)).x, texelFetch(g_PointLightRenderingBuffer, int(_3329 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3329 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3329 + 3u)).x));
                        uint _3348 = (_3307 * 48u) + 8u;
                        vec3 _3359 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3348)).x, texelFetch(g_PointLightRenderingBuffer, int(_3348 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3348 + 2u)).x));
                        float _3363 = _3323.x - _1997;
                        float _3364 = _3323.y - _1998;
                        float _3365 = _3323.z - _1999;
                        float _3366 = dot(vec3(_3363, _3364, _3365), vec3(_3363, _3364, _3365));
                        float _3369 = inversesqrt(_3366);
                        float _3370 = _3369 * _3363;
                        float _3371 = _3369 * _3364;
                        float _3372 = _3369 * _3365;
                        float _3373 = dot(vec3(_849, _852, _855), vec3(_3370, _3371, _3372));
                        float _3378 = 1.0 - (_3366 * _3323.w);
                        float _4807 = isnan(0.0) ? _3378 : (isnan(_3378) ? 0.0 : max(_3378, 0.0));
                        float _3379 = isnan(1.0) ? _4807 : (isnan(_4807) ? 1.0 : min(_4807, 1.0));
                        float _3380 = sqrt(_3366) * _3342.w;
                        float _3383 = 1.39999997615814208984375 / (_3380 + 1.39999997615814208984375);
                        float _3384 = _3383 * _3383;
                        float _3387 = ((1.0 - _3384) * _3373) + _3384;
                        float _3390 = _3380 * _3380;
                        float _3394 = ((isnan(0.0) ? _3387 : (isnan(_3387) ? 0.0 : max(_3387, 0.0))) * _3379) / ((_3390 * 0.699999988079071044921875) + 1.0);
                        float _3398 = (-0.0) - _1997;
                        float _3399 = (-0.0) - _1998;
                        float _3400 = (-0.0) - _1999;
                        float _3404 = inversesqrt(dot(vec3(_3398, _3399, _3400), vec3(_3398, _3399, _3400)));
                        float _3405 = _3404 * _3398;
                        float _3406 = _3404 * _3399;
                        float _3407 = _3404 * _3400;
                        float _3414 = exp2(log2(1.0 / ((_3390 * 3.5) + 5.0)) * 0.25);
                        float _3415 = 1.0 - _909;
                        float _3422 = sqrt(1.0 - ((1.0 - (_3415 * _3415)) * (1.0 - (_3414 * _3414))));
                        float _3423 = _3422 * _3422;
                        float _3424 = _3423 * _3423;
                        float _3425 = _3405 + _3370;
                        float _3426 = _3406 + _3371;
                        float _3427 = _3407 + _3372;
                        float _3431 = inversesqrt(dot(vec3(_3425, _3426, _3427), vec3(_3425, _3426, _3427)));
                        float _3435 = dot(vec3(_849, _852, _855), vec3(_3405, _3406, _3407));
                        float _4823 = isnan(0.0) ? _3435 : (isnan(_3435) ? 0.0 : max(_3435, 0.0));
                        float _3438 = isnan(1.0) ? _4823 : (isnan(_4823) ? 1.0 : min(_4823, 1.0));
                        float _3439 = dot(vec3(_849, _852, _855), vec3(_3431 * _3425, _3431 * _3426, _3431 * _3427));
                        float _4834 = isnan(0.0) ? _3439 : (isnan(_3439) ? 0.0 : max(_3439, 0.0));
                        float _3442 = isnan(1.0) ? _4834 : (isnan(_4834) ? 1.0 : min(_4834, 1.0));
                        float _3446 = ((_3442 * _3442) * (_3424 + (-1.0))) + 1.0;
                        float _3447 = _3383 * _3423;
                        float _3448 = _3447 * _3447;
                        float _3451 = ((1.0 - _3448) * _3373) + _3448;
                        float _4845 = isnan(0.0) ? _3451 : (isnan(_3451) ? 0.0 : max(_3451, 0.0));
                        float _3452 = isnan(1.0) ? _4845 : (isnan(_4845) ? 1.0 : min(_4845, 1.0));
                        float _3453 = 1.0 - _3423;
                        float _3463 = (0.5 / (((_3452 * ((_3438 * _3453) + _3423)) + 9.9999999392252902907785028219223e-09) + (((_3452 * _3453) + _3423) * _3438))) * _3452;
                        float _4856 = isnan(0.0) ? _3463 : (isnan(_3463) ? 0.0 : max(_3463, 0.0));
                        float _3474 = (((_3424 * 3.1415927410125732421875) * (isnan(1.0) ? _4856 : (isnan(_4856) ? 1.0 : min(_4856, 1.0)))) / ((_3446 * _3446) * ((_3390 * 2.1991131305694580078125) + 3.141590118408203125))) * _3379;
                        _3227 = (_3394 * _3342.x) + _3300;
                        _3228 = (_3394 * _3342.y) + _3301;
                        _3229 = (_3394 * _3342.z) + _3302;
                        _3224 = (_3474 * _3359.x) + _3297;
                        _3225 = (_3474 * _3359.y) + _3298;
                        _3226 = (_3474 * _3359.z) + _3299;
                        if (_3304 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3297 = _3224;
                            _3298 = _3225;
                            _3299 = _3226;
                            _3300 = _3227;
                            _3301 = _3228;
                            _3302 = _3229;
                            _3303 = _3304;
                        }
                    }
                    frontier_phi_71_pred = _3229;
                    frontier_phi_71_pred_1 = _3228;
                    frontier_phi_71_pred_2 = _3227;
                    frontier_phi_71_pred_3 = _3226;
                    frontier_phi_71_pred_4 = _3225;
                    frontier_phi_71_pred_5 = _3224;
                }
                _3010 = frontier_phi_71_pred;
                _3008 = frontier_phi_71_pred_1;
                _3006 = frontier_phi_71_pred_2;
                _3004 = frontier_phi_71_pred_3;
                _3002 = frontier_phi_71_pred_4;
                _3000 = frontier_phi_71_pred_5;
                uint _3159 = _3158 + 1u;
                if (_3159 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3152 = _3000;
                    _3153 = _3002;
                    _3154 = _3004;
                    _3155 = _3006;
                    _3156 = _3008;
                    _3157 = _3010;
                    _3158 = _3159;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2999 = _3000;
            _3001 = _3002;
            _3003 = _3004;
            _3005 = _3006;
            _3007 = _3008;
            _3009 = _3010;
        }
        uvec4 _3013 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3014 = _3013.z;
        uint _3016 = (_3014 >> 8u) & 15u;
        float _3120;
        float _3122;
        float _3124;
        float _3126;
        float _3128;
        float _3130;
        if (((4294967295u << _3016) & _2919) == 0u)
        {
            _3120 = _2999;
            _3122 = _3001;
            _3124 = _3003;
            _3126 = _3005;
            _3128 = _3007;
            _3130 = _3009;
        }
        else
        {
            float _3145 = inversesqrt(dot(vec3(_1997, _1998, _1999), vec3(_1997, _1998, _1999)));
            float _3146 = _3145 * _1997;
            float _3147 = _3145 * _1998;
            float _3148 = _3145 * _1999;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_3016 < ((_3014 >> 12u) & 15u))
            {
                float _3121;
                float _3123;
                float _3125;
                float _3127;
                float _3129;
                float _3131;
                float _3280 = _2999;
                float _3281 = _3001;
                float _3282 = _3003;
                float _3283 = _3005;
                float _3284 = _3007;
                float _3285 = _3009;
                uint _3286 = _3016;
                uint _3295;
                bool _3296;
                for (;;)
                {
                    _3295 = texelFetch(g_lightClassification, int((((_2913 << 5u) + (_2899 << 9u)) + (_3286 << 2u)) >> 2u)).x;
                    _3296 = _3295 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    float frontier_phi_82_pred_3;
                    float frontier_phi_82_pred_4;
                    float frontier_phi_82_pred_5;
                    if (_3296)
                    {
                        frontier_phi_82_pred = _3285;
                        frontier_phi_82_pred_1 = _3284;
                        frontier_phi_82_pred_2 = _3283;
                        frontier_phi_82_pred_3 = _3282;
                        frontier_phi_82_pred_4 = _3281;
                        frontier_phi_82_pred_5 = _3280;
                    }
                    else
                    {
                        float _3488;
                        float _3489;
                        float _3490;
                        float _3491;
                        float _3492;
                        float _3493;
                        float _3781;
                        float _3782;
                        float _3783;
                        float _3784;
                        float _3785;
                        float _3786;
                        float _3501 = _3280;
                        float _3502 = _3281;
                        float _3503 = _3282;
                        float _3504 = _3283;
                        float _3505 = _3284;
                        float _3506 = _3285;
                        uint _3507 = _3295;
                        uint _3508;
                        vec4 _3533;
                        float _3534;
                        vec4 _3549;
                        vec3 _3561;
                        vec4 _3576;
                        vec4 _3591;
                        float _3637;
                        bool _3638;
                        for (;;)
                        {
                            uint _3518 = ((_3286 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3507));
                            _3508 = (_3507 + 4294967295u) & _3507;
                            uint _3520 = _3518 * 40u;
                            _3533 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3520)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3520 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3520 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3520 + 3u)).x));
                            _3534 = _3533.w;
                            uint _3536 = (_3518 * 40u) + 4u;
                            _3549 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3536)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3536 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3536 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3536 + 3u)).x));
                            uint _3551 = (_3518 * 40u) + 8u;
                            _3561 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3551)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3551 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3551 + 2u)).x));
                            uint _3563 = (_3518 * 40u) + 16u;
                            _3576 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3563)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3563 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3563 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3563 + 3u)).x));
                            uint _3578 = (_3518 * 40u) + 20u;
                            _3591 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3578)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3578 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3578 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3578 + 3u)).x));
                            uint _3593 = (_3518 * 40u) + 24u;
                            vec4 _3606 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3593)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3593 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3593 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3593 + 3u)).x));
                            uint _3612 = (_3518 * 40u) + 28u;
                            vec4 _3625 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3612)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3612 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3612 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3612 + 3u)).x));
                            _3637 = fma(_1999, _3625.z, fma(_1998, _3625.y, _3625.x * _1997)) + _3625.w;
                            _3638 = !((fma(_1999, _3606.z, fma(_1998, _3606.y, _3606.x * _1997)) + _3606.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_3638)
                            {
                                float _3665 = _3533.x - _1997;
                                float _3666 = _3533.y - _1998;
                                float _3667 = _3533.z - _1999;
                                float _3668 = dot(vec3(_3665, _3666, _3667), vec3(_3665, _3666, _3667));
                                float _3671 = inversesqrt(_3668);
                                float _3672 = _3671 * _3665;
                                float _3673 = _3671 * _3666;
                                float _3674 = _3671 * _3667;
                                float _3678 = 1.0 - (_3668 / (_3534 * _3534));
                                float _4867 = isnan(0.0) ? _3678 : (isnan(_3678) ? 0.0 : max(_3678, 0.0));
                                float _3679 = isnan(1.0) ? _4867 : (isnan(_4867) ? 1.0 : min(_4867, 1.0));
                                float _3683 = sqrt(_3668) * _3549.w;
                                float _3685 = 1.39999997615814208984375 / (_3683 + 1.39999997615814208984375);
                                float _3686 = _3685 * _3685;
                                float _3689 = ((1.0 - _3686) * dot(vec3(_3672, _3673, _3674), vec3(_849, _852, _855))) + _3686;
                                float _3692 = _3683 * _3683;
                                float _3696 = (fma(_1999, _3576.z, fma(_1998, _3576.y, _3576.x * _1997)) + _3576.w) / _3637;
                                float _3697 = (fma(_1999, _3591.z, fma(_1998, _3591.y, _3591.x * _1997)) + _3591.w) / _3637;
                                float _3701 = 1.0 - dot(vec2(_3696, _3697), vec2(_3696, _3697));
                                float _4883 = isnan(0.0) ? _3701 : (isnan(_3701) ? 0.0 : max(_3701, 0.0));
                                float _3702 = isnan(1.0) ? _4883 : (isnan(_4883) ? 1.0 : min(_4883, 1.0));
                                float _3703 = _3702 * (((isnan(0.0) ? _3689 : (isnan(_3689) ? 0.0 : max(_3689, 0.0))) * _3679) / ((_3692 * 0.699999988079071044921875) + 1.0));
                                float _3715 = exp2(log2(1.0 / ((_3692 * 3.5) + 5.0)) * 0.25);
                                float _3716 = 1.0 - _909;
                                float _3723 = sqrt(1.0 - ((1.0 - (_3716 * _3716)) * (1.0 - (_3715 * _3715))));
                                float _3724 = _3723 * _3723;
                                float _3725 = _3724 * _3724;
                                float _3726 = _3672 - _3146;
                                float _3727 = _3673 - _3147;
                                float _3728 = _3674 - _3148;
                                float _3732 = inversesqrt(dot(vec3(_3726, _3727, _3728), vec3(_3726, _3727, _3728)));
                                float _3736 = dot(vec3(_849, _852, _855), vec3((-0.0) - _3146, (-0.0) - _3147, (-0.0) - _3148));
                                float _4894 = isnan(0.0) ? _3736 : (isnan(_3736) ? 0.0 : max(_3736, 0.0));
                                float _3739 = isnan(1.0) ? _4894 : (isnan(_4894) ? 1.0 : min(_4894, 1.0));
                                float _3740 = dot(vec3(_849, _852, _855), vec3(_3732 * _3726, _3732 * _3727, _3732 * _3728));
                                float _4905 = isnan(0.0) ? _3740 : (isnan(_3740) ? 0.0 : max(_3740, 0.0));
                                float _3743 = isnan(1.0) ? _4905 : (isnan(_4905) ? 1.0 : min(_4905, 1.0));
                                float _3747 = ((_3743 * _3743) * (_3725 + (-1.0))) + 1.0;
                                float _3748 = _3685 * _3724;
                                float _3749 = _3748 * _3748;
                                float _3755 = ((1.0 - _3749) * dot(vec3(_849, _852, _855), vec3(_3672, _3673, _3674))) + _3749;
                                float _4916 = isnan(0.0) ? _3755 : (isnan(_3755) ? 0.0 : max(_3755, 0.0));
                                float _3756 = isnan(1.0) ? _4916 : (isnan(_4916) ? 1.0 : min(_4916, 1.0));
                                float _3757 = 1.0 - _3724;
                                float _3767 = (0.5 / (((_3756 * ((_3739 * _3757) + _3724)) + 9.9999999392252902907785028219223e-09) + (((_3756 * _3757) + _3724) * _3739))) * _3756;
                                float _4927 = isnan(0.0) ? _3767 : (isnan(_3767) ? 0.0 : max(_3767, 0.0));
                                float _3777 = (_3702 * _3679) * (((_3725 * 3.1415927410125732421875) * (isnan(1.0) ? _4927 : (isnan(_4927) ? 1.0 : min(_4927, 1.0)))) / ((_3747 * _3747) * ((_3692 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_88_pred = _3703 * _3549.z;
                                frontier_phi_88_pred_1 = _3703 * _3549.y;
                                frontier_phi_88_pred_2 = _3703 * _3549.x;
                                frontier_phi_88_pred_3 = _3777 * _3561.z;
                                frontier_phi_88_pred_4 = _3777 * _3561.y;
                                frontier_phi_88_pred_5 = _3777 * _3561.x;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _3786 = frontier_phi_88_pred;
                            _3785 = frontier_phi_88_pred_1;
                            _3784 = frontier_phi_88_pred_2;
                            _3783 = frontier_phi_88_pred_3;
                            _3782 = frontier_phi_88_pred_4;
                            _3781 = frontier_phi_88_pred_5;
                            _3491 = _3784 + _3504;
                            _3492 = _3785 + _3505;
                            _3493 = _3786 + _3506;
                            _3488 = _3781 + _3501;
                            _3489 = _3782 + _3502;
                            _3490 = _3783 + _3503;
                            if (_3508 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3501 = _3488;
                                _3502 = _3489;
                                _3503 = _3490;
                                _3504 = _3491;
                                _3505 = _3492;
                                _3506 = _3493;
                                _3507 = _3508;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _3493;
                        frontier_phi_82_pred_1 = _3492;
                        frontier_phi_82_pred_2 = _3491;
                        frontier_phi_82_pred_3 = _3490;
                        frontier_phi_82_pred_4 = _3489;
                        frontier_phi_82_pred_5 = _3488;
                    }
                    _3131 = frontier_phi_82_pred;
                    _3129 = frontier_phi_82_pred_1;
                    _3127 = frontier_phi_82_pred_2;
                    _3125 = frontier_phi_82_pred_3;
                    _3123 = frontier_phi_82_pred_4;
                    _3121 = frontier_phi_82_pred_5;
                    uint _3287 = _3286 + 1u;
                    if (_3287 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3280 = _3121;
                        _3281 = _3123;
                        _3282 = _3125;
                        _3283 = _3127;
                        _3284 = _3129;
                        _3285 = _3131;
                        _3286 = _3287;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _3127;
                frontier_phi_63_64_ladder_1 = _3131;
                frontier_phi_63_64_ladder_2 = _3129;
                frontier_phi_63_64_ladder_3 = _3125;
                frontier_phi_63_64_ladder_4 = _3123;
                frontier_phi_63_64_ladder_5 = _3121;
            }
            else
            {
                frontier_phi_63_64_ladder = _3005;
                frontier_phi_63_64_ladder_1 = _3009;
                frontier_phi_63_64_ladder_2 = _3007;
                frontier_phi_63_64_ladder_3 = _3003;
                frontier_phi_63_64_ladder_4 = _3001;
                frontier_phi_63_64_ladder_5 = _2999;
            }
            _3120 = frontier_phi_63_64_ladder_5;
            _3122 = frontier_phi_63_64_ladder_4;
            _3124 = frontier_phi_63_64_ladder_3;
            _3126 = frontier_phi_63_64_ladder;
            _3128 = frontier_phi_63_64_ladder_2;
            _3130 = frontier_phi_63_64_ladder_1;
        }
        float _3135 = isnan(1.0) ? _893 : (isnan(_893) ? 1.0 : min(_893, 1.0));
        _2932 = (_3135 * _3126) + _2463;
        _2934 = (_3135 * _3128) + _2465;
        _2936 = (_3135 * _3130) + _2467;
        _2938 = ((_3120 * 0.039999999105930328369140625) * _3135) + _2786;
        _2940 = ((_3122 * 0.039999999105930328369140625) * _3135) + _2788;
        _2942 = ((_3124 * 0.039999999105930328369140625) * _3135) + _2790;
    }
    else
    {
        _2932 = _2463;
        _2934 = _2465;
        _2936 = _2467;
        _2938 = _2786;
        _2940 = _2788;
        _2942 = _2790;
    }
    float _4943 = isnan(0.0) ? _878 : (isnan(_878) ? 0.0 : max(_878, 0.0));
    float _4954 = isnan(0.0) ? _879 : (isnan(_879) ? 0.0 : max(_879, 0.0));
    float _4965 = isnan(0.0) ? _880 : (isnan(_880) ? 0.0 : max(_880, 0.0));
    float _2959 = ((isnan(1.0) ? _4943 : (isnan(_4943) ? 1.0 : min(_4943, 1.0))) * (_2932 + ((isnan(0.0) ? _1650 : (isnan(_1650) ? 0.0 : max(_1650, 0.0))) * _893))) + ((_2938 + ((isnan(0.0) ? _1944 : (isnan(_1944) ? 0.0 : max(_1944, 0.0))) * _1729)) * cbPerFrame._m0[3u].x);
    float _2960 = ((isnan(1.0) ? _4954 : (isnan(_4954) ? 1.0 : min(_4954, 1.0))) * (_2934 + ((isnan(0.0) ? _1653 : (isnan(_1653) ? 0.0 : max(_1653, 0.0))) * _893))) + ((_2940 + ((isnan(0.0) ? _1947 : (isnan(_1947) ? 0.0 : max(_1947, 0.0))) * _1729)) * cbPerFrame._m0[3u].x);
    float _2961 = ((isnan(1.0) ? _4965 : (isnan(_4965) ? 1.0 : min(_4965, 1.0))) * (_2936 + ((isnan(0.0) ? _1656 : (isnan(_1656) ? 0.0 : max(_1656, 0.0))) * _893))) + ((_2942 + ((isnan(0.0) ? _1950 : (isnan(_1950) ? 0.0 : max(_1950, 0.0))) * _1729)) * cbPerFrame._m0[3u].x);
    uint _2962 = _272 + 6u;
    float _2970 = _830 / cbSceneParam._m0[86u].x;
    float _2971 = _831 / cbSceneParam._m0[86u].y;
    vec4 _2985 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2970, _2971, (log2((isnan(cbSceneParam._m0[77u].w) ? _752 : (isnan(_752) ? cbSceneParam._m0[77u].w : min(_752, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2987 = _2985.x;
    float _2988 = _2985.y;
    float _2989 = _2985.z;
    float _2990 = _2985.w;
    float _3062;
    float _3064;
    float _3066;
    float _3068;
    if (_752 > cbSceneParam._m0[78u].w)
    {
        float _3024 = isnan(_752) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _752 : min(cbSceneParam._m0[80u].w, _752));
        float _3025 = _3024 / _752;
        float _3036 = _3025 * _803;
        float _3037 = _804 * _3025;
        float _3038 = (-0.0) - _3037;
        float _3040 = _3025 * _805;
        float _3042 = (cbSceneParam._m0[77u].w * _3038) / _3024;
        float _3043 = _3042 + cbSceneParam._m0[79u].w;
        float _3044 = cbSceneParam._m0[79u].w - _3037;
        float _3050 = sqrt(((_3036 * _3036) + (_3037 * _3037)) + (_3040 * _3040));
        float _3053 = (1.0 - (cbSceneParam._m0[77u].w / _3024)) * _3050;
        float _3058 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3060 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3237;
        if (abs((_3038 - _3042) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3237 = ((((_3043 > 0.0) ? exp2(_3058 * _3043) : (2.0 - exp2(_3060 * _3043))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3053;
        }
        else
        {
            float _3181 = 1.0 / cbSceneParam._m0[80u].x;
            float _3182 = isnan(_3044) ? _3043 : (isnan(_3043) ? _3044 : max(_3043, _3044));
            float _3183 = isnan(_3044) ? _3043 : (isnan(_3043) ? _3044 : min(_3043, _3044));
            float _3192 = isnan(0.0) ? _3182 : (isnan(_3182) ? 0.0 : min(_3182, 0.0));
            float _3193 = isnan(0.0) ? _3183 : (isnan(_3183) ? 0.0 : min(_3183, 0.0));
            _3237 = ((abs(_3050 / _3038) * cbSceneParam._m0[80u].y) * ((((_3192 - _3193) * 2.0) - ((exp2(_3058 * (isnan(0.0) ? _3182 : (isnan(_3182) ? 0.0 : max(_3182, 0.0)))) - exp2(_3058 * (isnan(0.0) ? _3183 : (isnan(_3183) ? 0.0 : max(_3183, 0.0))))) * _3181)) - ((exp2(_3060 * _3192) - exp2(_3060 * _3193)) * _3181))) + (_3053 * cbSceneParam._m0[80u].z);
        }
        vec4 _3239 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2970, _2971, 1.0), 0.0);
        float _3248 = exp2((_3237 * (-1.44269502162933349609375)) * (1.0 - _3239.w));
        float _3249 = log2(_3248);
        float _3265 = log2(_2990);
        _3062 = (exp2(_3265 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3249 * cbSceneParam._m0[78u].x)) * _3239.x) / cbSceneParam._m0[78u].x)) + _2987;
        _3064 = (exp2(_3265 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3249 * cbSceneParam._m0[78u].y)) * _3239.y) / cbSceneParam._m0[78u].y)) + _2988;
        _3066 = (exp2(_3265 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3249 * cbSceneParam._m0[78u].z)) * _3239.z) / cbSceneParam._m0[78u].z)) + _2989;
        _3068 = _3248 * _2990;
    }
    else
    {
        _3062 = _2987;
        _3064 = _2988;
        _3066 = _2989;
        _3068 = _2990;
    }
    bool _3275;
    vec4 _3078;
    vec4 _3100;
    float _3102;
    float _3106;
    float _3107;
    float _3108;
    float _3109;
    bool _3119;
    for (;;)
    {
        _3078 = cbMatDynParam._m0[0u];
        float _3080 = roundEven(_3078.y);
        bool _3081 = _3080 == 3.0;
        float _3082 = log2(_3068);
        float _3089 = exp2(_3082 * cbSceneParam._m0[78u].x) * _2959;
        float _3090 = exp2(_3082 * cbSceneParam._m0[78u].y) * _2960;
        float _3091 = exp2(_3082 * cbSceneParam._m0[78u].z) * _2961;
        float _3098 = _819 + (-0.5);
        _3100 = cbMtdParam._m0[1u];
        _3102 = _3100.y * _3098;
        float _3105 = (_3080 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3106 = _3105 * (_3081 ? _3089 : (_3089 + (cbSceneParam._m0[72u].w * _3062)));
        _3107 = _3105 * (_3081 ? _3090 : (_3090 + (cbSceneParam._m0[72u].w * _3064)));
        _3108 = _3105 * (_3081 ? _3091 : (_3091 + (cbSceneParam._m0[72u].w * _3066)));
        _3109 = _3098 * 0.999000012874603271484375;
        _3119 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3119)
        {
            if ((cbInstanceData._m0[_272 + 7u].x + _3109) < 0.5)
            {
                _3275 = true;
                break;
            }
        }
        uint _3216 = _868 + uint(_3078.w);
        if ((cbInstanceData._m0[_3216].w < 1.0) && ((cbInstanceData._m0[_3216].w + _3109) < 0.5))
        {
            _3275 = true;
            break;
        }
        if ((_3102 + 1.0) < _3100.x)
        {
            _3275 = true;
            break;
        }
        _3275 = false;
        break;
    }
    float _3479;
    if (_3275)
    {
        discard_state = true;
        _3479 = 0.0;
    }
    else
    {
        _3479 = cbInstanceData._m0[_2962].w;
    }
    SV_Target.x = _3106;
    SV_Target.y = _3107;
    SV_Target.z = _3108;
    SV_Target.w = _3479;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2962].w;
    discard_exit();
}


