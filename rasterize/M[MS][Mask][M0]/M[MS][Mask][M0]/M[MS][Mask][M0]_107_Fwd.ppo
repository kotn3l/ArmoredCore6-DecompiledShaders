#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_0;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_29;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_10;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_6;
layout(set = 0, binding = 23) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_8;
layout(set = 0, binding = 24) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_9;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1368;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _225 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _226 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _227 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _233 = inversesqrt(dot(vec3(_225, _226, _227), vec3(_225, _226, _227)));
    float _240 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _247 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _253 = uint(roundEven(NORMAL.w)) * 13u;
    uint _258 = _253 + 1u;
    uint _262 = _253 + 2u;
    float _271 = sqrt(((cbInstanceData._m0[_258].x * cbInstanceData._m0[_258].x) + (cbInstanceData._m0[_253].x * cbInstanceData._m0[_253].x)) + (cbInstanceData._m0[_262].x * cbInstanceData._m0[_262].x));
    float _272 = _271 * TEXCOORD.z;
    float _273 = _271 * TEXCOORD.w;
    vec4 _292 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _316 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _321 = _316.x * cbMtdParam._m0[11u].x;
    float _322 = _316.y * cbMtdParam._m0[11u].y;
    float _323 = _316.z * cbMtdParam._m0[11u].z;
    vec4 _342 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _272) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _273) + cbTextureTilingScale._m0[5u].w));
    vec4 _361 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _401 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _403 = _401.x;
    float _415 = dot(vec4(_403, _401.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _432 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _361.x) * 2.0) - ((((_403 - _415) * cbMtdParam._m0[24u].z) + _415) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3673 = isnan(0.0) ? _432 : (isnan(_432) ? 0.0 : max(_432, 0.0));
    float _433 = isnan(1.0) ? _3673 : (isnan(_3673) ? 1.0 : min(_3673, 1.0));
    float _440 = (_433 * ((_342.x * cbMtdParam._m0[12u].x) - _321)) + _321;
    float _441 = (_433 * ((_342.y * cbMtdParam._m0[12u].y) - _322)) + _322;
    float _442 = (_433 * ((_342.z * cbMtdParam._m0[12u].z) - _323)) + _323;
    vec4 _459 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _272) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _273) + cbTextureTilingScale._m0[3u].w));
    vec4 _479 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _481 = _479.x;
    float _491 = dot(vec4(_481, _479.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _505 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _361.y) * 2.0) - ((((_481 - _491) * cbMtdParam._m0[24u].z) + _491) * cbMtdParam._m0[20u].w))) + 1.0;
    float _3684 = isnan(0.0) ? _505 : (isnan(_505) ? 0.0 : max(_505, 0.0));
    float _506 = isnan(1.0) ? _3684 : (isnan(_3684) ? 1.0 : min(_3684, 1.0));
    float _513 = (_506 * ((_459.x * cbMtdParam._m0[13u].x) - _440)) + _440;
    float _514 = (_506 * ((_459.y * cbMtdParam._m0[13u].y) - _441)) + _441;
    float _515 = (_506 * ((_459.z * cbMtdParam._m0[13u].z) - _442)) + _442;
    vec4 _533 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_9, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[24u].x * _272) + cbTextureTilingScale._m0[24u].z, (cbTextureTilingScale._m0[24u].y * _273) + cbTextureTilingScale._m0[24u].w));
    vec4 _550 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[25u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _552 = _550.x;
    float _562 = dot(vec4(_552, _550.yzw), vec4(cbMtdParam._m0[30u].w, cbMtdParam._m0[31u].xy, 0.0));
    float _574 = ((cbMtdParam._m0[25u].x * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.z) - _361.z) * 2.0) - ((((_552 - _562) * cbMtdParam._m0[24u].z) + _562) * cbMtdParam._m0[20u].z))) + 1.0;
    float _3695 = isnan(0.0) ? _574 : (isnan(_574) ? 0.0 : max(_574, 0.0));
    float _575 = isnan(1.0) ? _3695 : (isnan(_3695) ? 1.0 : min(_3695, 1.0));
    float _588 = ((cbMtdParam._m0[9u].x * 4.55000019073486328125) * _292.x) * ((_575 * ((_533.x * cbMtdParam._m0[14u].x) - _513)) + _513);
    float _591 = ((cbMtdParam._m0[9u].y * 4.55000019073486328125) * _292.y) * ((_575 * ((_533.y * cbMtdParam._m0[14u].y) - _514)) + _514);
    float _594 = ((cbMtdParam._m0[9u].z * 4.55000019073486328125) * _292.z) * ((_575 * ((_533.z * cbMtdParam._m0[14u].z) - _515)) + _515);
    vec4 _607 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _272) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _273) + cbTextureTilingScale._m0[4u].w));
    vec4 _624 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _626 = _624.x;
    float _627 = _624.y;
    float _628 = _624.z;
    float _635 = ((_607.x - _626) * _433) + _626;
    float _636 = ((_607.y - _627) * _433) + _627;
    float _637 = ((_607.z - _628) * _433) + _628;
    vec4 _649 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _272) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _273) + cbTextureTilingScale._m0[2u].w));
    float _660 = ((_649.x - _635) * _506) + _635;
    float _661 = ((_649.y - _636) * _506) + _636;
    float _662 = ((_649.z - _637) * _506) + _637;
    vec4 _674 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[23u].x * _272) + cbTextureTilingScale._m0[23u].z, (cbTextureTilingScale._m0[23u].y * _273) + cbTextureTilingScale._m0[23u].w));
    float _687 = ((_674.z - _662) * _575) + _662;
    float _690 = ((((_674.x - _660) * _575) + _660) * 2.0) + (-1.0);
    float _692 = ((((_674.y - _661) * _575) + _661) * 2.0) + (-1.0);
    float _693 = dot(vec2(_690, _692), vec2(_690, _692));
    float _3706 = isnan(0.0) ? _693 : (isnan(_693) ? 0.0 : max(_693, 0.0));
    float _698 = sqrt(1.0 - (isnan(1.0) ? _3706 : (isnan(_3706) ? 1.0 : min(_3706, 1.0))));
    vec4 _712 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _724 = (((_712.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _690;
    float _725 = (((_712.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _692;
    vec4 _737 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _272) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _273) + cbTextureTilingScale._m0[19u].w));
    float _739 = _737.x;
    float _740 = 1.0 - _739;
    float _768 = (TEXCOORD_8.x - ((cbMtdParam._m0[22u].w * (1.0 - TEXCOORD_8.x)) * ((((_739 - _740) * cbMtdParam._m0[24u].y) + _740) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3717 = isnan(0.0) ? _768 : (isnan(_768) ? 0.0 : max(_768, 0.0));
    float _769 = isnan(1.0) ? _3717 : (isnan(_3717) ? 1.0 : min(_3717, 1.0));
    float _777 = ((((cbMtdParam._m0[10u].x - _588) * TEXCOORD_8.x) * cbMtdParam._m0[23u].w) * _769) + _588;
    float _778 = ((((cbMtdParam._m0[10u].y - _591) * TEXCOORD_8.y) * cbMtdParam._m0[23u].w) * _769) + _591;
    float _779 = (((cbMtdParam._m0[23u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _594)) * _769) + _594;
    float _783 = (cbMtdParam._m0[19u].w * (_712.z - _687)) + _687;
    float _787 = ((cbMtdParam._m0[23u].y - _783) * _769) + _783;
    vec4 _806 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _272) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _273) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _812 = (_806.x * 2.0) + (-1.0);
    float _813 = (_806.y * 2.0) + (-1.0);
    float _814 = dot(vec2(_812, _813), vec2(_812, _813));
    float _3728 = isnan(0.0) ? _814 : (isnan(_814) ? 0.0 : max(_814, 0.0));
    float _830 = (_769 * (((cbMtdParam._m0[22u].z * _724) - _724) + _812)) + _724;
    float _831 = (_769 * (((cbMtdParam._m0[22u].z * _725) - _725) + _813)) + _725;
    float _832 = (_769 * (sqrt(1.0 - (isnan(1.0) ? _3728 : (isnan(_3728) ? 1.0 : min(_3728, 1.0)))) - _698)) + _698;
    float _834 = cbMtdParam._m0[22u].x + _712.w;
    float _837 = fma(_832, _240 * NORMAL.x, fma(_831, _247 * TANGENT.x, (_233 * _225) * _830));
    float _840 = fma(_832, _240 * NORMAL.y, fma(_831, _247 * TANGENT.y, (_233 * _226) * _830));
    float _843 = fma(_832, _240 * NORMAL.z, fma(_831, _247 * TANGENT.z, (_233 * _227) * _830));
    float _847 = inversesqrt(dot(vec3(_837, _840, _843), vec3(_837, _840, _843)));
    float _848 = _847 * _837;
    float _849 = _847 * _840;
    float _850 = _847 * _843;
    float _3739 = isnan(0.0) ? _787 : (isnan(_787) ? 0.0 : max(_787, 0.0));
    float _851 = isnan(1.0) ? _3739 : (isnan(_3739) ? 1.0 : min(_3739, 1.0));
    float _3750 = isnan(0.0) ? _834 : (isnan(_834) ? 0.0 : max(_834, 0.0));
    float _3761 = isnan(0.0) ? _777 : (isnan(_777) ? 0.0 : max(_777, 0.0));
    float _3772 = isnan(0.0) ? _778 : (isnan(_778) ? 0.0 : max(_778, 0.0));
    float _3783 = isnan(0.0) ? _779 : (isnan(_779) ? 0.0 : max(_779, 0.0));
    float _869 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _909 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _919 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _909);
    float _920 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _909);
    float _921 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _909);
    float _925 = inversesqrt(dot(vec3(_919, _920, _921), vec3(_919, _920, _921)));
    float _926 = _919 * _925;
    float _927 = _920 * _925;
    float _928 = _921 * _925;
    float _934 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _935 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _953 = fma(_850, cbSceneParam._m0[5u].z, fma(_849, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _848));
    float _956 = fma(_850, cbSceneParam._m0[6u].z, fma(_849, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _848));
    float _959 = fma(_850, cbSceneParam._m0[7u].z, fma(_849, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _848));
    uint _973 = (_253 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _979 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3761 : (isnan(_3761) ? 1.0 : min(_3761, 1.0)))) * cbInstanceData._m0[_973].x;
    float _980 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3772 : (isnan(_3772) ? 1.0 : min(_3772, 1.0)))) * cbInstanceData._m0[_973].y;
    float _981 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3783 : (isnan(_3783) ? 1.0 : min(_3783, 1.0)))) * cbInstanceData._m0[_973].z;
    float _3794 = isnan(0.0) ? _979 : (isnan(_979) ? 0.0 : max(_979, 0.0));
    float _982 = isnan(1.0) ? _3794 : (isnan(_3794) ? 1.0 : min(_3794, 1.0));
    float _3805 = isnan(0.0) ? _980 : (isnan(_980) ? 0.0 : max(_980, 0.0));
    float _983 = isnan(1.0) ? _3805 : (isnan(_3805) ? 1.0 : min(_3805, 1.0));
    float _3816 = isnan(0.0) ? _981 : (isnan(_981) ? 0.0 : max(_981, 0.0));
    float _984 = isnan(1.0) ? _3816 : (isnan(_3816) ? 1.0 : min(_3816, 1.0));
    vec4 _993 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _934, cbSceneParam._m0[86u].y * _935));
    float _997 = ((isnan(1.0) ? _3750 : (isnan(_3750) ? 1.0 : min(_3750, 1.0))) * TEXCOORD_5.w) * _993.x;
    float _998 = dot(vec3(_848, _849, _850), vec3(_926, _927, _928));
    float _1001 = _998 * 2.0;
    float _1005 = (_1001 * _848) - _926;
    float _1006 = (_1001 * _849) - _927;
    float _1007 = (_1001 * _850) - _928;
    float _1011 = abs(dot(vec3(_926, _927, _928), vec3(_848, _849, _850)));
    float _3827 = isnan(0.0) ? _1011 : (isnan(_1011) ? 0.0 : max(_1011, 0.0));
    float _1013 = sqrt(_851);
    float _1026 = exp2((_1013 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3827 : (isnan(_3827) ? 1.0 : min(_3827, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1013 * 3.0));
    float _1058 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1062 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1066 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1367;
    float _1369;
    float _1370;
    float _1371;
    float _1372;
    float _1373;
    float _1374;
    float _1375;
    float _1376;
    float _1377;
    float _1378;
    float _1379;
    float _1380;
    float _1381;
    float _1382;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1092 = fma(_1066, cbModelParam._m0[26u].z, fma(_1062, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1058));
        float _1096 = fma(_1066, cbModelParam._m0[27u].z, fma(_1062, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1058));
        float _1100 = fma(_1066, cbModelParam._m0[28u].z, fma(_1062, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1058));
        float _1125 = _1058 + _848;
        float _1126 = _1062 + _849;
        float _1127 = _1066 + _850;
        float _1137 = fma(_1127, cbModelParam._m0[26u].z, fma(_1126, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1125)) - _1092;
        float _1138 = fma(_1127, cbModelParam._m0[27u].z, fma(_1126, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1125)) - _1096;
        float _1139 = fma(_1127, cbModelParam._m0[28u].z, fma(_1126, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1125)) - _1100;
        float _1143 = inversesqrt(dot(vec3(_1137, _1138, _1139), vec3(_1137, _1138, _1139)));
        float _1156 = ((_1143 * _1137) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1092 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1157 = ((_1143 * _1138) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1096 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1158 = ((_1143 * _1139) / cbModelParam._m0[34u].z) + ((((((_1100 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1161 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1156, _1157, _1158), 0.0);
        vec4 _1168 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1156, _1157, _1158), 0.0);
        vec4 _1175 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1156, _1157, _1158), 0.0);
        vec4 _1182 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1156, _1157, _1158), 0.0);
        float _1195 = exp2((_1161.w + (-0.5)) * 20.0) * 2.0;
        float _1196 = _1195 * (_1161.x + (-0.5));
        float _1197 = _1195 * (_1161.y + (-0.5));
        float _1198 = _1195 * (_1161.z + (-0.5));
        float _1205 = exp2((_1168.w + (-0.5)) * 20.0) * 2.0;
        float _1206 = _1205 * (_1168.x + (-0.5));
        float _1207 = _1205 * (_1168.y + (-0.5));
        float _1208 = _1205 * (_1168.z + (-0.5));
        float _1215 = exp2((_1175.w + (-0.5)) * 20.0) * 2.0;
        float _1216 = _1215 * (_1175.x + (-0.5));
        float _1217 = _1215 * (_1175.y + (-0.5));
        float _1218 = _1215 * (_1175.z + (-0.5));
        float _1225 = exp2((_1182.w + (-0.5)) * 20.0) * 2.0;
        float _1226 = _1225 * (_1182.x + (-0.5));
        float _1227 = _1225 * (_1182.y + (-0.5));
        float _1228 = _1225 * (_1182.z + (-0.5));
        float _1229 = isnan(0.0) ? _1226 : (isnan(_1226) ? 0.0 : max(_1226, 0.0));
        float _1230 = isnan(0.0) ? _1227 : (isnan(_1227) ? 0.0 : max(_1227, 0.0));
        float _1231 = isnan(0.0) ? _1228 : (isnan(_1228) ? 0.0 : max(_1228, 0.0));
        float _1232 = _1196 * 0.5;
        float _1233 = _1206 * 0.5;
        float _1234 = _1216 * 0.5;
        float _1235 = dot(vec3(_1232, _1233, _1234), vec3(_1232, _1233, _1234));
        float _1240 = (_1235 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1235);
        float _1249 = (dot(vec3(_848, _849, _850), vec3(_1240 * _1232, _1240 * _1233, _1240 * _1234)) + 1.0) * 0.5;
        float _3853 = isnan(0.0) ? _1249 : (isnan(_1249) ? 0.0 : max(_1249, 0.0));
        float _1259 = sqrt(((_1233 * _1233) + (_1232 * _1232)) + (_1234 * _1234)) / (_1229 + 9.9999997473787516355514526367188e-06);
        float _3864 = isnan(0.0) ? _1259 : (isnan(_1259) ? 0.0 : max(_1259, 0.0));
        float _1260 = isnan(1.0) ? _3864 : (isnan(_3864) ? 1.0 : min(_3864, 1.0));
        float _1261 = _1260 * 2.0;
        float _1265 = (1.0 - _1260) / (_1260 + 1.0);
        float _3875 = isnan(0.0) ? _1265 : (isnan(_1265) ? 0.0 : max(_1265, 0.0));
        float _1266 = isnan(1.0) ? _3875 : (isnan(_3875) ? 1.0 : min(_3875, 1.0));
        float _1275 = ((((1.0 - _1266) * (_1261 + 2.0)) * exp2(log2(isnan(1.0) ? _3853 : (isnan(_3853) ? 1.0 : min(_3853, 1.0))) * (_1261 + 1.0))) + _1266) * _1229;
        float _1276 = _1197 * 0.5;
        float _1277 = _1207 * 0.5;
        float _1278 = _1217 * 0.5;
        float _1279 = dot(vec3(_1276, _1277, _1278), vec3(_1276, _1277, _1278));
        float _1284 = (_1279 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1279);
        float _1292 = (dot(vec3(_848, _849, _850), vec3(_1284 * _1276, _1284 * _1277, _1284 * _1278)) + 1.0) * 0.5;
        float _3886 = isnan(0.0) ? _1292 : (isnan(_1292) ? 0.0 : max(_1292, 0.0));
        float _1301 = sqrt(((_1277 * _1277) + (_1276 * _1276)) + (_1278 * _1278)) / (_1230 + 9.9999997473787516355514526367188e-06);
        float _3897 = isnan(0.0) ? _1301 : (isnan(_1301) ? 0.0 : max(_1301, 0.0));
        float _1302 = isnan(1.0) ? _3897 : (isnan(_3897) ? 1.0 : min(_3897, 1.0));
        float _1303 = _1302 * 2.0;
        float _1307 = (1.0 - _1302) / (_1302 + 1.0);
        float _3908 = isnan(0.0) ? _1307 : (isnan(_1307) ? 0.0 : max(_1307, 0.0));
        float _1308 = isnan(1.0) ? _3908 : (isnan(_3908) ? 1.0 : min(_3908, 1.0));
        float _1317 = ((((1.0 - _1308) * (_1303 + 2.0)) * exp2(log2(isnan(1.0) ? _3886 : (isnan(_3886) ? 1.0 : min(_3886, 1.0))) * (_1303 + 1.0))) + _1308) * _1230;
        float _1318 = _1198 * 0.5;
        float _1319 = _1208 * 0.5;
        float _1320 = _1218 * 0.5;
        float _1321 = dot(vec3(_1318, _1319, _1320), vec3(_1318, _1319, _1320));
        float _1326 = (_1321 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1321);
        float _1334 = (dot(vec3(_848, _849, _850), vec3(_1326 * _1318, _1326 * _1319, _1326 * _1320)) + 1.0) * 0.5;
        float _3919 = isnan(0.0) ? _1334 : (isnan(_1334) ? 0.0 : max(_1334, 0.0));
        float _1343 = sqrt(((_1319 * _1319) + (_1318 * _1318)) + (_1320 * _1320)) / (_1231 + 9.9999997473787516355514526367188e-06);
        float _3930 = isnan(0.0) ? _1343 : (isnan(_1343) ? 0.0 : max(_1343, 0.0));
        float _1344 = isnan(1.0) ? _3930 : (isnan(_3930) ? 1.0 : min(_3930, 1.0));
        float _1345 = _1344 * 2.0;
        float _1349 = (1.0 - _1344) / (_1344 + 1.0);
        float _3941 = isnan(0.0) ? _1349 : (isnan(_1349) ? 0.0 : max(_1349, 0.0));
        float _1350 = isnan(1.0) ? _3941 : (isnan(_3941) ? 1.0 : min(_3941, 1.0));
        float _1359 = ((((1.0 - _1350) * (_1345 + 2.0)) * exp2(log2(isnan(1.0) ? _3919 : (isnan(_3919) ? 1.0 : min(_3919, 1.0))) * (_1345 + 1.0))) + _1350) * _1231;
        _1367 = _1198;
        _1369 = _1197;
        _1370 = _1196;
        _1371 = _1208;
        _1372 = _1207;
        _1373 = _1206;
        _1374 = _1218;
        _1375 = _1217;
        _1376 = _1216;
        _1377 = _1231;
        _1378 = _1230;
        _1379 = _1229;
        _1380 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1275 : (isnan(_1275) ? 0.0 : max(_1275, 0.0)));
        _1381 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1317 : (isnan(_1317) ? 0.0 : max(_1317, 0.0)));
        _1382 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1359 : (isnan(_1359) ? 0.0 : max(_1359, 0.0)));
    }
    else
    {
        _1367 = _1368;
        _1369 = _1368;
        _1370 = _1368;
        _1371 = _1368;
        _1372 = _1368;
        _1373 = _1368;
        _1374 = _1368;
        _1375 = _1368;
        _1376 = _1368;
        _1377 = _1368;
        _1378 = _1368;
        _1379 = _1368;
        _1380 = 0.0;
        _1381 = 0.0;
        _1382 = 0.0;
    }
    float _1674;
    float _1675;
    float _1676;
    float _1677;
    float _1678;
    float _1679;
    float _1680;
    float _1681;
    float _1682;
    float _1683;
    float _1684;
    float _1685;
    float _1686;
    float _1687;
    float _1688;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1405 = fma(_1066, cbModelParam._m0[30u].z, fma(_1062, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1058));
        float _1409 = fma(_1066, cbModelParam._m0[31u].z, fma(_1062, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1058));
        float _1413 = fma(_1066, cbModelParam._m0[32u].z, fma(_1062, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1058));
        float _1436 = _1058 + _848;
        float _1437 = _1062 + _849;
        float _1438 = _1066 + _850;
        float _1448 = fma(_1438, cbModelParam._m0[30u].z, fma(_1437, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1436)) - _1405;
        float _1449 = fma(_1438, cbModelParam._m0[31u].z, fma(_1437, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1436)) - _1409;
        float _1450 = fma(_1438, cbModelParam._m0[32u].z, fma(_1437, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1436)) - _1413;
        float _1454 = inversesqrt(dot(vec3(_1448, _1449, _1450), vec3(_1448, _1449, _1450)));
        float _1467 = ((_1454 * _1448) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1405 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1468 = ((_1454 * _1449) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1409 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1469 = ((_1454 * _1450) / cbModelParam._m0[35u].z) + ((((((_1413 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1471 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1467, _1468, _1469), 0.0);
        vec4 _1478 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1467, _1468, _1469), 0.0);
        vec4 _1485 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1467, _1468, _1469), 0.0);
        vec4 _1492 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1467, _1468, _1469), 0.0);
        float _1504 = exp2((_1471.w + (-0.5)) * 20.0) * 2.0;
        float _1505 = _1504 * (_1471.x + (-0.5));
        float _1506 = _1504 * (_1471.y + (-0.5));
        float _1507 = _1504 * (_1471.z + (-0.5));
        float _1514 = exp2((_1478.w + (-0.5)) * 20.0) * 2.0;
        float _1515 = _1514 * (_1478.x + (-0.5));
        float _1516 = _1514 * (_1478.y + (-0.5));
        float _1517 = _1514 * (_1478.z + (-0.5));
        float _1524 = exp2((_1485.w + (-0.5)) * 20.0) * 2.0;
        float _1525 = _1524 * (_1485.x + (-0.5));
        float _1526 = _1524 * (_1485.y + (-0.5));
        float _1527 = _1524 * (_1485.z + (-0.5));
        float _1534 = exp2((_1492.w + (-0.5)) * 20.0) * 2.0;
        float _1535 = _1534 * (_1492.x + (-0.5));
        float _1536 = _1534 * (_1492.y + (-0.5));
        float _1537 = _1534 * (_1492.z + (-0.5));
        float _1538 = isnan(0.0) ? _1535 : (isnan(_1535) ? 0.0 : max(_1535, 0.0));
        float _1539 = isnan(0.0) ? _1536 : (isnan(_1536) ? 0.0 : max(_1536, 0.0));
        float _1540 = isnan(0.0) ? _1537 : (isnan(_1537) ? 0.0 : max(_1537, 0.0));
        float _1541 = _1505 * 0.5;
        float _1542 = _1515 * 0.5;
        float _1543 = _1525 * 0.5;
        float _1544 = dot(vec3(_1541, _1542, _1543), vec3(_1541, _1542, _1543));
        float _1549 = (_1544 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1544);
        float _1557 = (dot(vec3(_848, _849, _850), vec3(_1549 * _1541, _1549 * _1542, _1549 * _1543)) + 1.0) * 0.5;
        float _3982 = isnan(0.0) ? _1557 : (isnan(_1557) ? 0.0 : max(_1557, 0.0));
        float _1566 = sqrt(((_1542 * _1542) + (_1541 * _1541)) + (_1543 * _1543)) / (_1538 + 9.9999997473787516355514526367188e-06);
        float _3993 = isnan(0.0) ? _1566 : (isnan(_1566) ? 0.0 : max(_1566, 0.0));
        float _1567 = isnan(1.0) ? _3993 : (isnan(_3993) ? 1.0 : min(_3993, 1.0));
        float _1568 = _1567 * 2.0;
        float _1572 = (1.0 - _1567) / (_1567 + 1.0);
        float _4004 = isnan(0.0) ? _1572 : (isnan(_1572) ? 0.0 : max(_1572, 0.0));
        float _1573 = isnan(1.0) ? _4004 : (isnan(_4004) ? 1.0 : min(_4004, 1.0));
        float _1582 = ((((1.0 - _1573) * (_1568 + 2.0)) * exp2(log2(isnan(1.0) ? _3982 : (isnan(_3982) ? 1.0 : min(_3982, 1.0))) * (_1568 + 1.0))) + _1573) * _1538;
        float _1583 = _1506 * 0.5;
        float _1584 = _1516 * 0.5;
        float _1585 = _1526 * 0.5;
        float _1586 = dot(vec3(_1583, _1584, _1585), vec3(_1583, _1584, _1585));
        float _1591 = (_1586 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1586);
        float _1599 = (dot(vec3(_848, _849, _850), vec3(_1591 * _1583, _1591 * _1584, _1591 * _1585)) + 1.0) * 0.5;
        float _4015 = isnan(0.0) ? _1599 : (isnan(_1599) ? 0.0 : max(_1599, 0.0));
        float _1608 = sqrt(((_1584 * _1584) + (_1583 * _1583)) + (_1585 * _1585)) / (_1539 + 9.9999997473787516355514526367188e-06);
        float _4026 = isnan(0.0) ? _1608 : (isnan(_1608) ? 0.0 : max(_1608, 0.0));
        float _1609 = isnan(1.0) ? _4026 : (isnan(_4026) ? 1.0 : min(_4026, 1.0));
        float _1610 = _1609 * 2.0;
        float _1614 = (1.0 - _1609) / (_1609 + 1.0);
        float _4037 = isnan(0.0) ? _1614 : (isnan(_1614) ? 0.0 : max(_1614, 0.0));
        float _1615 = isnan(1.0) ? _4037 : (isnan(_4037) ? 1.0 : min(_4037, 1.0));
        float _1624 = ((((1.0 - _1615) * (_1610 + 2.0)) * exp2(log2(isnan(1.0) ? _4015 : (isnan(_4015) ? 1.0 : min(_4015, 1.0))) * (_1610 + 1.0))) + _1615) * _1539;
        float _1625 = _1507 * 0.5;
        float _1626 = _1517 * 0.5;
        float _1627 = _1527 * 0.5;
        float _1628 = dot(vec3(_1625, _1626, _1627), vec3(_1625, _1626, _1627));
        float _1633 = (_1628 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1628);
        float _1641 = (dot(vec3(_848, _849, _850), vec3(_1633 * _1625, _1633 * _1626, _1633 * _1627)) + 1.0) * 0.5;
        float _4048 = isnan(0.0) ? _1641 : (isnan(_1641) ? 0.0 : max(_1641, 0.0));
        float _1650 = sqrt(((_1626 * _1626) + (_1625 * _1625)) + (_1627 * _1627)) / (_1540 + 9.9999997473787516355514526367188e-06);
        float _4059 = isnan(0.0) ? _1650 : (isnan(_1650) ? 0.0 : max(_1650, 0.0));
        float _1651 = isnan(1.0) ? _4059 : (isnan(_4059) ? 1.0 : min(_4059, 1.0));
        float _1652 = _1651 * 2.0;
        float _1656 = (1.0 - _1651) / (_1651 + 1.0);
        float _4070 = isnan(0.0) ? _1656 : (isnan(_1656) ? 0.0 : max(_1656, 0.0));
        float _1657 = isnan(1.0) ? _4070 : (isnan(_4070) ? 1.0 : min(_4070, 1.0));
        float _1666 = ((((1.0 - _1657) * (_1652 + 2.0)) * exp2(log2(isnan(1.0) ? _4048 : (isnan(_4048) ? 1.0 : min(_4048, 1.0))) * (_1652 + 1.0))) + _1657) * _1540;
        _1674 = _1507;
        _1675 = _1506;
        _1676 = _1505;
        _1677 = _1517;
        _1678 = _1516;
        _1679 = _1515;
        _1680 = _1527;
        _1681 = _1526;
        _1682 = _1525;
        _1683 = _1540;
        _1684 = _1539;
        _1685 = _1538;
        _1686 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1582 : (isnan(_1582) ? 0.0 : max(_1582, 0.0)));
        _1687 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1624 : (isnan(_1624) ? 0.0 : max(_1624, 0.0)));
        _1688 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1666 : (isnan(_1666) ? 0.0 : max(_1666, 0.0)));
    }
    else
    {
        _1674 = _1368;
        _1675 = _1368;
        _1676 = _1368;
        _1677 = _1368;
        _1678 = _1368;
        _1679 = _1368;
        _1680 = _1368;
        _1681 = _1368;
        _1682 = _1368;
        _1683 = _1368;
        _1684 = _1368;
        _1685 = _1368;
        _1686 = 0.0;
        _1687 = 0.0;
        _1688 = 0.0;
    }
    float _1698 = (cbModelParam._m0[1u].x * (_1686 - _1380)) + _1380;
    float _1699 = (cbModelParam._m0[1u].x * (_1687 - _1381)) + _1381;
    float _1700 = (cbModelParam._m0[1u].x * (_1688 - _1382)) + _1382;
    float _1721 = fma(_1700, cbSceneParam._m0[89u].z, fma(_1699, cbSceneParam._m0[89u].y, _1698 * cbSceneParam._m0[89u].x));
    float _1724 = fma(_1700, cbSceneParam._m0[90u].z, fma(_1699, cbSceneParam._m0[90u].y, _1698 * cbSceneParam._m0[90u].x));
    float _1727 = fma(_1700, cbSceneParam._m0[91u].z, fma(_1699, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1698));
    float _1742 = _1005 * 0.5;
    float _1743 = _1006 * 0.5;
    float _1744 = _1007 * 0.5;
    float _1745 = dot(vec4(_1742, _1743, _1744, 1.0), vec4(_1676, _1679, _1682, _1685));
    float _1748 = dot(vec4(_1742, _1743, _1744, 1.0), vec4(_1675, _1678, _1681, _1684));
    float _1751 = dot(vec4(_1742, _1743, _1744, 1.0), vec4(_1674, _1677, _1680, _1683));
    float _1785;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1758 = dot(vec4(_1742, _1743, _1744, 1.0), vec4(_1367, _1371, _1374, _1377));
        float _1762 = dot(vec4(_1742, _1743, _1744, 1.0), vec4(_1369, _1372, _1375, _1378));
        float _1766 = dot(vec4(_1742, _1743, _1744, 1.0), vec4(_1370, _1373, _1376, _1379));
        float _1773 = dot(vec4(cbModelParam._m0[39u]), vec4(_1742, _1743, _1744, 1.0));
        _1785 = dot(vec3(isnan(0.0) ? _1766 : (isnan(_1766) ? 0.0 : max(_1766, 0.0)), isnan(0.0) ? _1762 : (isnan(_1762) ? 0.0 : max(_1762, 0.0)), isnan(0.0) ? _1758 : (isnan(_1758) ? 0.0 : max(_1758, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1773) ? 0.0 : (isnan(0.0) ? _1773 : max(0.0, _1773))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1785 = 1.0;
    }
    float _1796;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1787 = dot(vec4(cbModelParam._m0[40u]), vec4(_1742, _1743, _1744, 1.0));
        _1796 = dot(vec3(isnan(0.0) ? _1745 : (isnan(_1745) ? 0.0 : max(_1745, 0.0)), isnan(0.0) ? _1748 : (isnan(_1748) ? 0.0 : max(_1748, 0.0)), isnan(0.0) ? _1751 : (isnan(_1751) ? 0.0 : max(_1751, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1787) ? 0.0 : (isnan(0.0) ? _1787 : max(0.0, _1787))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1796 = 1.0;
    }
    float _1800 = (_1796 * cbModelParam._m0[1u].x) + (_1785 * (1.0 - cbModelParam._m0[1u].x));
    float _1810 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _851);
    float _1811 = isnan(_1810) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1810 : min(cbModelParam._m0[25u].z, _1810));
    float _1892;
    float _1894;
    float _1896;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1859 = fma(_1066, cbModelParam._m0[13u].z, fma(_1062, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1058)) + cbModelParam._m0[13u].w;
        float _1863 = fma(_1066, cbModelParam._m0[14u].z, fma(_1062, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1058)) + cbModelParam._m0[14u].w;
        float _1867 = fma(_1066, cbModelParam._m0[15u].z, fma(_1062, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1058)) + cbModelParam._m0[15u].w;
        float _1870 = fma(_1007, cbModelParam._m0[13u].z, fma(_1006, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1005));
        float _1873 = fma(_1007, cbModelParam._m0[14u].z, fma(_1006, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1005));
        float _1876 = fma(_1007, cbModelParam._m0[15u].z, fma(_1006, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1005));
        float _1904;
        if (_1870 > 0.0)
        {
            _1904 = abs((1.0 - _1859) / _1870);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1870 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1859 + 1.0) / _1870);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1904 = frontier_phi_14_12_ladder;
        }
        float _2106;
        if (_1873 > 0.0)
        {
            _2106 = abs((1.0 - _1863) / _1873);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1873 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1863 + 1.0) / _1873);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2106 = frontier_phi_23_19_ladder;
        }
        float _2349;
        if (_1876 > 0.0)
        {
            _2349 = abs((1.0 - _1867) / _1876);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1876 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1867 + 1.0) / _1876);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2349 = frontier_phi_35_30_ladder;
        }
        float _2351 = isnan(_2106) ? _1904 : (isnan(_1904) ? _2106 : min(_1904, _2106));
        float _2352 = isnan(_2349) ? _2351 : (isnan(_2351) ? _2349 : min(_2351, _2349));
        float _2356 = (_2352 * _1870) + _1859;
        float _2357 = (_2352 * _1873) + _1863;
        float _2358 = (_2352 * _1876) + _1867;
        float _2359 = _2352 * 9.9999997473787516355514526367188e-05;
        float _2361 = (-1.0) - _2359;
        float _2363 = _2359 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2358 > _2363) || ((_2358 < _2361) || ((_2357 > _2363) || ((_2357 < _2361) || ((_2356 < _2361) || (_2356 > _2363))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2482 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2358, cbModelParam._m0[9u].z, fma(_2357, cbModelParam._m0[9u].y, _2356 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2358, cbModelParam._m0[10u].z, fma(_2357, cbModelParam._m0[10u].y, _2356 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2358, cbModelParam._m0[11u].z, fma(_2357, cbModelParam._m0[11u].y, _2356 * cbModelParam._m0[11u].x))), _1811);
            frontier_phi_13_35_ladder = _2482.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2482.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2482.x * cbModelParam._m0[1u].y;
        }
        _1892 = frontier_phi_13_35_ladder_2;
        _1894 = frontier_phi_13_35_ladder_1;
        _1896 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1880 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1005, _1006, _1007), _1811);
        _1892 = _1880.x * cbModelParam._m0[1u].y;
        _1894 = _1880.y * cbModelParam._m0[1u].y;
        _1896 = _1880.z * cbModelParam._m0[1u].y;
    }
    float _1900 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _851);
    float _1901 = isnan(_1900) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1900 : min(cbModelParam._m0[25u].w, _1900));
    float _1992;
    float _1994;
    float _1996;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1956 = fma(_1066, cbModelParam._m0[21u].z, fma(_1062, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1058)) + cbModelParam._m0[21u].w;
        float _1960 = fma(_1066, cbModelParam._m0[22u].z, fma(_1062, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1058)) + cbModelParam._m0[22u].w;
        float _1964 = fma(_1066, cbModelParam._m0[23u].z, fma(_1062, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1058)) + cbModelParam._m0[23u].w;
        float _1967 = fma(_1007, cbModelParam._m0[21u].z, fma(_1006, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1005));
        float _1970 = fma(_1007, cbModelParam._m0[22u].z, fma(_1006, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1005));
        float _1973 = fma(_1007, cbModelParam._m0[23u].z, fma(_1006, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1005));
        float _2111;
        if (_1967 > 0.0)
        {
            _2111 = abs((1.0 - _1956) / _1967);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1967 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1956 + 1.0) / _1967);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2111 = frontier_phi_25_21_ladder;
        }
        float _2376;
        if (_1970 > 0.0)
        {
            _2376 = abs((1.0 - _1960) / _1970);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1970 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1960 + 1.0) / _1970);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2376 = frontier_phi_37_32_ladder;
        }
        float _2581;
        if (_1973 > 0.0)
        {
            _2581 = abs((1.0 - _1964) / _1973);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1973 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1964 + 1.0) / _1973);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2581 = frontier_phi_46_43_ladder;
        }
        float _2583 = isnan(_2376) ? _2111 : (isnan(_2111) ? _2376 : min(_2111, _2376));
        float _2584 = isnan(_2581) ? _2583 : (isnan(_2583) ? _2581 : min(_2583, _2581));
        float _2588 = (_2584 * _1967) + _1956;
        float _2589 = (_2584 * _1970) + _1960;
        float _2590 = (_2584 * _1973) + _1964;
        float _2591 = _2584 * 9.9999997473787516355514526367188e-05;
        float _2592 = (-1.0) - _2591;
        float _2594 = _2591 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2590 > _2594) || ((_2590 < _2592) || ((_2589 > _2594) || ((_2589 < _2592) || ((_2588 < _2592) || (_2588 > _2594))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2789 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2590, cbModelParam._m0[17u].z, fma(_2589, cbModelParam._m0[17u].y, _2588 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2590, cbModelParam._m0[18u].z, fma(_2589, cbModelParam._m0[18u].y, _2588 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2590, cbModelParam._m0[19u].z, fma(_2589, cbModelParam._m0[19u].y, _2588 * cbModelParam._m0[19u].x))), _1901);
            frontier_phi_22_46_ladder = _2789.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2789.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2789.x * cbModelParam._m0[1u].z;
        }
        _1992 = frontier_phi_22_46_ladder_2;
        _1994 = frontier_phi_22_46_ladder_1;
        _1996 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1976 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1005, _1006, _1007), _1901);
        _1992 = _1976.x * cbModelParam._m0[1u].z;
        _1994 = _1976.y * cbModelParam._m0[1u].z;
        _1996 = _1976.z * cbModelParam._m0[1u].z;
    }
    float _2008 = ((((1.0 - _1026) * ((_1013 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_1026 * _1013)) * _997;
    float _2009 = _2008 * ((cbModelParam._m0[1u].w * (_1992 - _1892)) + _1892);
    float _2010 = _2008 * ((cbModelParam._m0[1u].w * (_1994 - _1894)) + _1894);
    float _2011 = _2008 * ((cbModelParam._m0[1u].w * (_1996 - _1896)) + _1896);
    float _2014 = fma(_2011, cbSceneParam._m0[89u].z, fma(_2010, cbSceneParam._m0[89u].y, _2009 * cbSceneParam._m0[89u].x));
    float _2017 = fma(_2011, cbSceneParam._m0[90u].z, fma(_2010, cbSceneParam._m0[90u].y, _2009 * cbSceneParam._m0[90u].x));
    float _2020 = fma(_2011, cbSceneParam._m0[91u].z, fma(_2010, cbSceneParam._m0[91u].y, _2009 * cbSceneParam._m0[91u].x));
    uvec4 _2030 = floatBitsToUint(cbInstanceData._m0[_253 + 5u]);
    uint _2032 = _2030.x * 14u;
    uint _2033 = _2032 + 13u;
    float _2040 = _997 + (-1.0);
    float _2045 = (cbLight._m0[_2033].x * _2040) + 1.0;
    float _2046 = (cbLight._m0[_2033].y * _2040) + 1.0;
    float _2047 = (cbLight._m0[_2033].z * _2040) + 1.0;
    float _2048 = (cbLight._m0[_2033].w * _2040) + 1.0;
    uint _2049 = _2032 + 5u;
    float _2055 = isnan(1.0) ? _2046 : (isnan(_2046) ? 1.0 : min(_2046, 1.0));
    uint _2059 = _2032 + 4u;
    float _2065 = isnan(1.0) ? _2045 : (isnan(_2045) ? 1.0 : min(_2045, 1.0));
    uint _2069 = _2032 | 1u;
    float _2080 = dot(vec3(cbLight._m0[_2032].xyz), vec3(_848, _849, _850));
    float _2083 = dot(vec3(cbLight._m0[_2069].xyz), vec3(_848, _849, _850));
    float _4206 = isnan(0.0) ? _2080 : (isnan(_2080) ? 0.0 : max(_2080, 0.0));
    float _4217 = isnan(0.0) ? _2083 : (isnan(_2083) ? 0.0 : max(_2083, 0.0));
    float _2088 = (isnan(1.0) ? _4206 : (isnan(_4206) ? 1.0 : min(_4206, 1.0))) * 0.3183098733425140380859375;
    float _2090 = (isnan(1.0) ? _4217 : (isnan(_4217) ? 1.0 : min(_4217, 1.0))) * 0.3183098733425140380859375;
    float _2097 = ((cbLight._m0[_2049].x * _2055) * _2090) + ((cbLight._m0[_2059].x * _2065) * _2088);
    float _2098 = ((_2055 * cbLight._m0[_2049].y) * _2090) + ((_2065 * cbLight._m0[_2059].y) * _2088);
    float _2099 = ((_2055 * cbLight._m0[_2049].z) * _2090) + ((_2065 * cbLight._m0[_2059].z) * _2088);
    uvec4 _2103 = floatBitsToUint(cbLight._m0[_2032 + 12u]);
    bool _2105 = _2103.x == 0u;
    float _2116;
    float _2118;
    float _2120;
    if (_2105)
    {
        _2116 = _2097;
        _2118 = _2098;
        _2120 = _2099;
    }
    else
    {
        uint _2124 = _2032 + 6u;
        float _2140 = (dot(vec3(cbLight._m0[_2032 + 2u].xyz), vec3(_848, _849, _850)) * 0.5) + 0.5;
        float _2141 = _2140 * _2140;
        float _4228 = isnan(0.0) ? _2141 : (isnan(_2141) ? 0.0 : max(_2141, 0.0));
        float _2142 = isnan(1.0) ? _4228 : (isnan(_4228) ? 1.0 : min(_4228, 1.0));
        float _2143 = isnan(1.0) ? _2047 : (isnan(_2047) ? 1.0 : min(_2047, 1.0));
        _2116 = (((cbLight._m0[_2124].x * 0.3183098733425140380859375) * _2142) * _2143) + _2097;
        _2118 = (((cbLight._m0[_2124].y * 0.3183098733425140380859375) * _2142) * _2143) + _2098;
        _2120 = (((cbLight._m0[_2124].z * 0.3183098733425140380859375) * _2142) * _2143) + _2099;
    }
    bool _2123 = _2103.y == 0u;
    float _2161;
    float _2163;
    float _2165;
    if (_2123)
    {
        _2161 = _2116;
        _2163 = _2118;
        _2165 = _2120;
    }
    else
    {
        uint _2320 = _2032 + 7u;
        float _2336 = (dot(vec3(cbLight._m0[_2032 + 3u].xyz), vec3(_848, _849, _850)) * 0.5) + 0.5;
        float _2337 = _2336 * _2336;
        float _4244 = isnan(0.0) ? _2337 : (isnan(_2337) ? 0.0 : max(_2337, 0.0));
        float _2338 = isnan(1.0) ? _4244 : (isnan(_4244) ? 1.0 : min(_4244, 1.0));
        float _2339 = isnan(1.0) ? _2048 : (isnan(_2048) ? 1.0 : min(_2048, 1.0));
        _2161 = (((cbLight._m0[_2320].x * 0.3183098733425140380859375) * _2338) * _2339) + _2116;
        _2163 = (((cbLight._m0[_2320].y * 0.3183098733425140380859375) * _2338) * _2339) + _2118;
        _2165 = (((cbLight._m0[_2320].z * 0.3183098733425140380859375) * _2338) * _2339) + _2120;
    }
    uint _2168 = _2032 + 8u;
    float _2181 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2032].w)) * _851) * 0.949999988079071044921875);
    float _2182 = _2181 * _2181;
    float _2183 = cbLight._m0[_2032].x + _926;
    float _2184 = cbLight._m0[_2032].y + _927;
    float _2185 = cbLight._m0[_2032].z + _928;
    float _2189 = inversesqrt(dot(vec3(_2183, _2184, _2185), vec3(_2183, _2184, _2185)));
    float _2190 = _2189 * _2183;
    float _2191 = _2189 * _2184;
    float _2192 = _2189 * _2185;
    float _2193 = dot(vec3(_848, _849, _850), vec3(cbLight._m0[_2032].xyz));
    float _4260 = isnan(0.0) ? _2193 : (isnan(_2193) ? 0.0 : max(_2193, 0.0));
    float _2196 = isnan(1.0) ? _4260 : (isnan(_4260) ? 1.0 : min(_4260, 1.0));
    float _4271 = isnan(0.0) ? _998 : (isnan(_998) ? 0.0 : max(_998, 0.0));
    float _2197 = isnan(1.0) ? _4271 : (isnan(_4271) ? 1.0 : min(_4271, 1.0));
    float _2198 = dot(vec3(_848, _849, _850), vec3(_2190, _2191, _2192));
    float _4282 = isnan(0.0) ? _2198 : (isnan(_2198) ? 0.0 : max(_2198, 0.0));
    float _2201 = isnan(1.0) ? _4282 : (isnan(_4282) ? 1.0 : min(_4282, 1.0));
    float _2202 = dot(vec3(cbLight._m0[_2032].xyz), vec3(_2190, _2191, _2192));
    float _4293 = isnan(0.0) ? _2202 : (isnan(_2202) ? 0.0 : max(_2202, 0.0));
    float _2206 = _2182 * _2182;
    float _2210 = ((_2201 * _2201) * (_2206 + (-1.0))) + 1.0;
    float _2221 = (exp2(log2(1.0 - (isnan(1.0) ? _4293 : (isnan(_4293) ? 1.0 : min(_4293, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2222 = 1.0 - _2182;
    float _2233 = (0.5 / (((_2197 * ((_2196 * _2222) + _2182)) + 9.9999999392252902907785028219223e-09) + (((_2197 * _2222) + _2182) * _2196))) * _2196;
    float _4304 = isnan(0.0) ? _2233 : (isnan(_2233) ? 0.0 : max(_2233, 0.0));
    float _2235 = (isnan(1.0) ? _4304 : (isnan(_4304) ? 1.0 : min(_4304, 1.0))) * (_2206 / ((_2210 * _2210) * 3.141590118408203125));
    uint _2246 = _2032 + 9u;
    float _2257 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2069].w)) * _851) * 0.949999988079071044921875);
    float _2258 = _2257 * _2257;
    float _2259 = cbLight._m0[_2069].x + _926;
    float _2260 = cbLight._m0[_2069].y + _927;
    float _2261 = cbLight._m0[_2069].z + _928;
    float _2265 = inversesqrt(dot(vec3(_2259, _2260, _2261), vec3(_2259, _2260, _2261)));
    float _2266 = _2265 * _2259;
    float _2267 = _2265 * _2260;
    float _2268 = _2265 * _2261;
    float _2269 = dot(vec3(_848, _849, _850), vec3(cbLight._m0[_2069].xyz));
    float _4315 = isnan(0.0) ? _2269 : (isnan(_2269) ? 0.0 : max(_2269, 0.0));
    float _2272 = isnan(1.0) ? _4315 : (isnan(_4315) ? 1.0 : min(_4315, 1.0));
    float _2273 = dot(vec3(_848, _849, _850), vec3(_2266, _2267, _2268));
    float _4326 = isnan(0.0) ? _2273 : (isnan(_2273) ? 0.0 : max(_2273, 0.0));
    float _2276 = isnan(1.0) ? _4326 : (isnan(_4326) ? 1.0 : min(_4326, 1.0));
    float _2277 = dot(vec3(cbLight._m0[_2069].xyz), vec3(_2266, _2267, _2268));
    float _4337 = isnan(0.0) ? _2277 : (isnan(_2277) ? 0.0 : max(_2277, 0.0));
    float _2281 = _2258 * _2258;
    float _2285 = ((_2276 * _2276) * (_2281 + (-1.0))) + 1.0;
    float _2294 = (exp2(log2(1.0 - (isnan(1.0) ? _4337 : (isnan(_4337) ? 1.0 : min(_4337, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2295 = 1.0 - _2258;
    float _2305 = (0.5 / (((_2197 * ((_2272 * _2295) + _2258)) + 9.9999999392252902907785028219223e-09) + (((_2197 * _2295) + _2258) * _2272))) * _2272;
    float _4348 = isnan(0.0) ? _2305 : (isnan(_2305) ? 0.0 : max(_2305, 0.0));
    float _2307 = (isnan(1.0) ? _4348 : (isnan(_4348) ? 1.0 : min(_4348, 1.0))) * (_2281 / ((_2285 * _2285) * 3.141590118408203125));
    float _2317 = (((_2294 * cbLight._m0[_2246].x) * _2307) * _2055) + (((_2221 * cbLight._m0[_2168].x) * _2235) * _2065);
    float _2318 = (((_2294 * cbLight._m0[_2246].y) * _2307) * _2055) + (((_2221 * cbLight._m0[_2168].y) * _2235) * _2065);
    float _2319 = (((_2294 * cbLight._m0[_2246].z) * _2307) * _2055) + (((_2221 * cbLight._m0[_2168].z) * _2235) * _2065);
    float _2381;
    float _2383;
    float _2385;
    if (_2105)
    {
        _2381 = _2317;
        _2383 = _2318;
        _2385 = _2319;
    }
    else
    {
        uint _2387 = _2032 + 2u;
        uint _2391 = _2032 + 10u;
        float _2405 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2387].w)) * _851) * 0.949999988079071044921875);
        float _2406 = _2405 * _2405;
        float _2407 = cbLight._m0[_2387].x + _926;
        float _2408 = cbLight._m0[_2387].y + _927;
        float _2409 = cbLight._m0[_2387].z + _928;
        float _2413 = inversesqrt(dot(vec3(_2407, _2408, _2409), vec3(_2407, _2408, _2409)));
        float _2414 = _2413 * _2407;
        float _2415 = _2413 * _2408;
        float _2416 = _2413 * _2409;
        float _2417 = dot(vec3(_848, _849, _850), vec3(cbLight._m0[_2387].xyz));
        float _4359 = isnan(0.0) ? _2417 : (isnan(_2417) ? 0.0 : max(_2417, 0.0));
        float _2420 = isnan(1.0) ? _4359 : (isnan(_4359) ? 1.0 : min(_4359, 1.0));
        float _2421 = dot(vec3(_848, _849, _850), vec3(_2414, _2415, _2416));
        float _4370 = isnan(0.0) ? _2421 : (isnan(_2421) ? 0.0 : max(_2421, 0.0));
        float _2424 = isnan(1.0) ? _4370 : (isnan(_4370) ? 1.0 : min(_4370, 1.0));
        float _2425 = dot(vec3(cbLight._m0[_2387].xyz), vec3(_2414, _2415, _2416));
        float _4381 = isnan(0.0) ? _2425 : (isnan(_2425) ? 0.0 : max(_2425, 0.0));
        float _2429 = _2406 * _2406;
        float _2433 = ((_2424 * _2424) * (_2429 + (-1.0))) + 1.0;
        float _2442 = (exp2(log2(1.0 - (isnan(1.0) ? _4381 : (isnan(_4381) ? 1.0 : min(_4381, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2443 = 1.0 - _2406;
        float _2453 = (0.5 / (((_2197 * ((_2420 * _2443) + _2406)) + 9.9999999392252902907785028219223e-09) + (((_2197 * _2443) + _2406) * _2420))) * _2420;
        float _4392 = isnan(0.0) ? _2453 : (isnan(_2453) ? 0.0 : max(_2453, 0.0));
        float _2455 = (isnan(1.0) ? _4392 : (isnan(_4392) ? 1.0 : min(_4392, 1.0))) * (_2429 / ((_2433 * _2433) * 3.141590118408203125));
        float _2456 = isnan(1.0) ? _2047 : (isnan(_2047) ? 1.0 : min(_2047, 1.0));
        _2381 = (((_2442 * cbLight._m0[_2391].x) * _2455) * _2456) + _2317;
        _2383 = (((_2442 * cbLight._m0[_2391].y) * _2455) * _2456) + _2318;
        _2385 = (((_2442 * cbLight._m0[_2391].z) * _2455) * _2456) + _2319;
    }
    float _2491;
    float _2493;
    float _2495;
    if (_2123)
    {
        _2491 = _2381;
        _2493 = _2383;
        _2495 = _2385;
    }
    else
    {
        uint _2502 = _2032 + 3u;
        uint _2506 = _2032 + 11u;
        float _2520 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2502].w)) * _851) * 0.949999988079071044921875);
        float _2521 = _2520 * _2520;
        float _2522 = cbLight._m0[_2502].x + _926;
        float _2523 = cbLight._m0[_2502].y + _927;
        float _2524 = cbLight._m0[_2502].z + _928;
        float _2528 = inversesqrt(dot(vec3(_2522, _2523, _2524), vec3(_2522, _2523, _2524)));
        float _2529 = _2528 * _2522;
        float _2530 = _2528 * _2523;
        float _2531 = _2528 * _2524;
        float _2532 = dot(vec3(_848, _849, _850), vec3(cbLight._m0[_2502].xyz));
        float _4408 = isnan(0.0) ? _2532 : (isnan(_2532) ? 0.0 : max(_2532, 0.0));
        float _2535 = isnan(1.0) ? _4408 : (isnan(_4408) ? 1.0 : min(_4408, 1.0));
        float _2536 = dot(vec3(_848, _849, _850), vec3(_2529, _2530, _2531));
        float _4419 = isnan(0.0) ? _2536 : (isnan(_2536) ? 0.0 : max(_2536, 0.0));
        float _2539 = isnan(1.0) ? _4419 : (isnan(_4419) ? 1.0 : min(_4419, 1.0));
        float _2540 = dot(vec3(cbLight._m0[_2502].xyz), vec3(_2529, _2530, _2531));
        float _4430 = isnan(0.0) ? _2540 : (isnan(_2540) ? 0.0 : max(_2540, 0.0));
        float _2544 = _2521 * _2521;
        float _2548 = ((_2539 * _2539) * (_2544 + (-1.0))) + 1.0;
        float _2557 = (exp2(log2(1.0 - (isnan(1.0) ? _4430 : (isnan(_4430) ? 1.0 : min(_4430, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2558 = 1.0 - _2521;
        float _2568 = (0.5 / (((_2197 * ((_2535 * _2558) + _2521)) + 9.9999999392252902907785028219223e-09) + (((_2197 * _2558) + _2521) * _2535))) * _2535;
        float _4441 = isnan(0.0) ? _2568 : (isnan(_2568) ? 0.0 : max(_2568, 0.0));
        float _2570 = (isnan(1.0) ? _4441 : (isnan(_4441) ? 1.0 : min(_4441, 1.0))) * (_2544 / ((_2548 * _2548) * 3.141590118408203125));
        float _2571 = isnan(1.0) ? _2048 : (isnan(_2048) ? 1.0 : min(_2048, 1.0));
        _2491 = (((_2557 * cbLight._m0[_2506].x) * _2570) * _2571) + _2381;
        _2493 = (((_2557 * cbLight._m0[_2506].y) * _2570) * _2571) + _2383;
        _2495 = (((_2557 * cbLight._m0[_2506].z) * _2570) * _2571) + _2385;
    }
    float _2706;
    float _2708;
    float _2710;
    float _2712;
    float _2714;
    float _2716;
    if (_2030.y == 0u)
    {
        float _2646 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2647 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2646;
        float _2648 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2646;
        float _2649 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2646;
        uvec4 _2661 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2662 = _2661.x;
        uint _2673 = uint((float(_2661.y) * floor(float(uint(cbSceneParam._m0[85u].y * _935) / _2662))) + floor(float(uint(cbSceneParam._m0[85u].x * _934) / _2662)));
        float _2683 = (log2(_2649 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2684 = isnan(0.0) ? _2683 : (isnan(_2683) ? 0.0 : max(_2683, 0.0));
        uint _2687 = uint(isnan(14.0) ? _2684 : (isnan(_2684) ? 14.0 : min(_2684, 14.0)));
        uvec4 _2692 = texelFetch(g_lightClusterGridBuffer, int(((_2687 << 2u) + (_2673 << 6u)) >> 2u));
        uint _2693 = _2692.x;
        uint _2694 = _2661.z;
        float _2794;
        float _2796;
        float _2798;
        float _2800;
        float _2802;
        float _2804;
        if (((((1u << ((_2694 >> 4u) & 15u)) + 4294967295u) & _2693) == 0u) || ((_2694 & 240u) == 0u))
        {
            _2794 = 0.0;
            _2796 = 0.0;
            _2798 = 0.0;
            _2800 = 0.0;
            _2802 = 0.0;
            _2804 = 0.0;
        }
        else
        {
            float _2795;
            float _2797;
            float _2799;
            float _2801;
            float _2803;
            float _2805;
            float _2939 = 0.0;
            float _2940 = 0.0;
            float _2941 = 0.0;
            float _2942 = 0.0;
            float _2943 = 0.0;
            float _2944 = 0.0;
            uint _2945 = 0u;
            uint _2954;
            bool _2955;
            for (;;)
            {
                _2954 = texelFetch(g_lightClassification, int((((_2687 << 5u) + (_2673 << 9u)) + (_2945 << 2u)) >> 2u)).x;
                _2955 = _2954 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2955)
                {
                    frontier_phi_61_pred = _2939;
                    frontier_phi_61_pred_1 = _2944;
                    frontier_phi_61_pred_2 = _2943;
                    frontier_phi_61_pred_3 = _2942;
                    frontier_phi_61_pred_4 = _2941;
                    frontier_phi_61_pred_5 = _2940;
                }
                else
                {
                    float _3063;
                    float _3064;
                    float _3065;
                    float _3066;
                    float _3067;
                    float _3068;
                    uint _3069;
                    _3063 = _2939;
                    _3064 = _2940;
                    _3065 = _2941;
                    _3066 = _2942;
                    _3067 = _2943;
                    _3068 = _2944;
                    _3069 = _2954;
                    float _2995;
                    float _2996;
                    float _2997;
                    float _2998;
                    float _2999;
                    float _3000;
                    for (;;)
                    {
                        uint _3073 = uint(findLSB(_3069)) + (_2945 << 5u);
                        uint _3070 = (_3069 + 4294967295u) & _3069;
                        uint _3075 = _3073 * 48u;
                        vec4 _3089 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3075)).x, texelFetch(g_PointLightRenderingBuffer, int(_3075 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3075 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3075 + 3u)).x));
                        uint _3095 = (_3073 * 48u) + 4u;
                        vec4 _3108 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3095)).x, texelFetch(g_PointLightRenderingBuffer, int(_3095 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3095 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3095 + 3u)).x));
                        uint _3114 = (_3073 * 48u) + 8u;
                        vec3 _3125 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3114)).x, texelFetch(g_PointLightRenderingBuffer, int(_3114 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3114 + 2u)).x));
                        float _3129 = _3089.x - _2647;
                        float _3130 = _3089.y - _2648;
                        float _3131 = _3089.z - _2649;
                        float _3132 = dot(vec3(_3129, _3130, _3131), vec3(_3129, _3130, _3131));
                        float _3135 = inversesqrt(_3132);
                        float _3136 = _3135 * _3129;
                        float _3137 = _3135 * _3130;
                        float _3138 = _3135 * _3131;
                        float _3139 = dot(vec3(_953, _956, _959), vec3(_3136, _3137, _3138));
                        float _3144 = 1.0 - (_3132 * _3089.w);
                        float _4467 = isnan(0.0) ? _3144 : (isnan(_3144) ? 0.0 : max(_3144, 0.0));
                        float _3145 = isnan(1.0) ? _4467 : (isnan(_4467) ? 1.0 : min(_4467, 1.0));
                        float _3146 = sqrt(_3132) * _3108.w;
                        float _3149 = 1.39999997615814208984375 / (_3146 + 1.39999997615814208984375);
                        float _3150 = _3149 * _3149;
                        float _3153 = ((1.0 - _3150) * _3139) + _3150;
                        float _3156 = _3146 * _3146;
                        float _3160 = ((isnan(0.0) ? _3153 : (isnan(_3153) ? 0.0 : max(_3153, 0.0))) * _3145) / ((_3156 * 0.699999988079071044921875) + 1.0);
                        float _3164 = (-0.0) - _2647;
                        float _3165 = (-0.0) - _2648;
                        float _3166 = (-0.0) - _2649;
                        float _3170 = inversesqrt(dot(vec3(_3164, _3165, _3166), vec3(_3164, _3165, _3166)));
                        float _3171 = _3170 * _3164;
                        float _3172 = _3170 * _3165;
                        float _3173 = _3170 * _3166;
                        float _3181 = exp2(log2(1.0 / ((_3156 * 3.5) + 5.0)) * 0.25);
                        float _3182 = 1.0 - _1013;
                        float _3189 = sqrt(1.0 - ((1.0 - (_3182 * _3182)) * (1.0 - (_3181 * _3181))));
                        float _3190 = _3189 * _3189;
                        float _3191 = _3190 * _3190;
                        float _3192 = _3171 + _3136;
                        float _3193 = _3172 + _3137;
                        float _3194 = _3173 + _3138;
                        float _3198 = inversesqrt(dot(vec3(_3192, _3193, _3194), vec3(_3192, _3193, _3194)));
                        float _3202 = dot(vec3(_953, _956, _959), vec3(_3171, _3172, _3173));
                        float _4483 = isnan(0.0) ? _3202 : (isnan(_3202) ? 0.0 : max(_3202, 0.0));
                        float _3205 = isnan(1.0) ? _4483 : (isnan(_4483) ? 1.0 : min(_4483, 1.0));
                        float _3206 = dot(vec3(_953, _956, _959), vec3(_3198 * _3192, _3198 * _3193, _3198 * _3194));
                        float _4494 = isnan(0.0) ? _3206 : (isnan(_3206) ? 0.0 : max(_3206, 0.0));
                        float _3209 = isnan(1.0) ? _4494 : (isnan(_4494) ? 1.0 : min(_4494, 1.0));
                        float _3213 = ((_3209 * _3209) * (_3191 + (-1.0))) + 1.0;
                        float _3214 = _3149 * _3190;
                        float _3215 = _3214 * _3214;
                        float _3218 = ((1.0 - _3215) * _3139) + _3215;
                        float _4505 = isnan(0.0) ? _3218 : (isnan(_3218) ? 0.0 : max(_3218, 0.0));
                        float _3219 = isnan(1.0) ? _4505 : (isnan(_4505) ? 1.0 : min(_4505, 1.0));
                        float _3220 = 1.0 - _3190;
                        float _3230 = (0.5 / (((_3219 * ((_3205 * _3220) + _3190)) + 9.9999999392252902907785028219223e-09) + (((_3219 * _3220) + _3190) * _3205))) * _3219;
                        float _4516 = isnan(0.0) ? _3230 : (isnan(_3230) ? 0.0 : max(_3230, 0.0));
                        float _3241 = (((_3191 * 3.1415927410125732421875) * (isnan(1.0) ? _4516 : (isnan(_4516) ? 1.0 : min(_4516, 1.0)))) / ((_3213 * _3213) * ((_3156 * 2.1991131305694580078125) + 3.141590118408203125))) * _3145;
                        _2998 = (_3160 * _3108.x) + _3066;
                        _2999 = (_3160 * _3108.y) + _3067;
                        _3000 = (_3160 * _3108.z) + _3068;
                        _2995 = (_3241 * _3125.x) + _3063;
                        _2996 = (_3241 * _3125.y) + _3064;
                        _2997 = (_3241 * _3125.z) + _3065;
                        if (_3070 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3063 = _2995;
                            _3064 = _2996;
                            _3065 = _2997;
                            _3066 = _2998;
                            _3067 = _2999;
                            _3068 = _3000;
                            _3069 = _3070;
                        }
                    }
                    frontier_phi_61_pred = _2995;
                    frontier_phi_61_pred_1 = _3000;
                    frontier_phi_61_pred_2 = _2999;
                    frontier_phi_61_pred_3 = _2998;
                    frontier_phi_61_pred_4 = _2997;
                    frontier_phi_61_pred_5 = _2996;
                }
                _2795 = frontier_phi_61_pred;
                _2805 = frontier_phi_61_pred_1;
                _2803 = frontier_phi_61_pred_2;
                _2801 = frontier_phi_61_pred_3;
                _2799 = frontier_phi_61_pred_4;
                _2797 = frontier_phi_61_pred_5;
                uint _2946 = _2945 + 1u;
                if (_2946 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2939 = _2795;
                    _2940 = _2797;
                    _2941 = _2799;
                    _2942 = _2801;
                    _2943 = _2803;
                    _2944 = _2805;
                    _2945 = _2946;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2794 = _2795;
            _2796 = _2797;
            _2798 = _2799;
            _2800 = _2801;
            _2802 = _2803;
            _2804 = _2805;
        }
        uvec4 _2808 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2809 = _2808.z;
        uint _2811 = (_2809 >> 8u) & 15u;
        float _2907;
        float _2909;
        float _2911;
        float _2913;
        float _2915;
        float _2917;
        if (((4294967295u << _2811) & _2693) == 0u)
        {
            _2907 = _2794;
            _2909 = _2796;
            _2911 = _2798;
            _2913 = _2800;
            _2915 = _2802;
            _2917 = _2804;
        }
        else
        {
            float _2932 = inversesqrt(dot(vec3(_2647, _2648, _2649), vec3(_2647, _2648, _2649)));
            float _2933 = _2932 * _2647;
            float _2934 = _2932 * _2648;
            float _2935 = _2932 * _2649;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2811 < ((_2809 >> 12u) & 15u))
            {
                float _2908;
                float _2910;
                float _2912;
                float _2914;
                float _2916;
                float _2918;
                float _3046 = _2794;
                float _3047 = _2796;
                float _3048 = _2798;
                float _3049 = _2800;
                float _3050 = _2802;
                float _3051 = _2804;
                uint _3052 = _2811;
                uint _3061;
                bool _3062;
                for (;;)
                {
                    _3061 = texelFetch(g_lightClassification, int((((_2687 << 5u) + (_2673 << 9u)) + (_3052 << 2u)) >> 2u)).x;
                    _3062 = _3061 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_3062)
                    {
                        frontier_phi_67_pred = _3049;
                        frontier_phi_67_pred_1 = _3050;
                        frontier_phi_67_pred_2 = _3051;
                        frontier_phi_67_pred_3 = _3048;
                        frontier_phi_67_pred_4 = _3047;
                        frontier_phi_67_pred_5 = _3046;
                    }
                    else
                    {
                        float _3246;
                        float _3247;
                        float _3248;
                        float _3249;
                        float _3250;
                        float _3251;
                        float _3539;
                        float _3540;
                        float _3541;
                        float _3542;
                        float _3543;
                        float _3544;
                        float _3259 = _3046;
                        float _3260 = _3047;
                        float _3261 = _3048;
                        float _3262 = _3049;
                        float _3263 = _3050;
                        float _3264 = _3051;
                        uint _3265 = _3061;
                        uint _3266;
                        vec4 _3291;
                        float _3292;
                        vec4 _3307;
                        vec3 _3319;
                        vec4 _3334;
                        vec4 _3349;
                        float _3395;
                        bool _3396;
                        for (;;)
                        {
                            uint _3276 = ((_3052 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3265));
                            _3266 = (_3265 + 4294967295u) & _3265;
                            uint _3278 = _3276 * 40u;
                            _3291 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3278)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3278 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3278 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3278 + 3u)).x));
                            _3292 = _3291.w;
                            uint _3294 = (_3276 * 40u) + 4u;
                            _3307 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3294)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3294 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3294 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3294 + 3u)).x));
                            uint _3309 = (_3276 * 40u) + 8u;
                            _3319 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3309)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3309 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3309 + 2u)).x));
                            uint _3321 = (_3276 * 40u) + 16u;
                            _3334 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3321)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3321 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3321 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3321 + 3u)).x));
                            uint _3336 = (_3276 * 40u) + 20u;
                            _3349 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3336)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3336 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3336 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3336 + 3u)).x));
                            uint _3351 = (_3276 * 40u) + 24u;
                            vec4 _3364 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3351)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3351 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3351 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3351 + 3u)).x));
                            uint _3370 = (_3276 * 40u) + 28u;
                            vec4 _3383 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3370)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3370 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3370 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3370 + 3u)).x));
                            _3395 = fma(_2649, _3383.z, fma(_2648, _3383.y, _3383.x * _2647)) + _3383.w;
                            _3396 = !((fma(_2649, _3364.z, fma(_2648, _3364.y, _3364.x * _2647)) + _3364.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3396)
                            {
                                float _3423 = _3291.x - _2647;
                                float _3424 = _3291.y - _2648;
                                float _3425 = _3291.z - _2649;
                                float _3426 = dot(vec3(_3423, _3424, _3425), vec3(_3423, _3424, _3425));
                                float _3429 = inversesqrt(_3426);
                                float _3430 = _3429 * _3423;
                                float _3431 = _3429 * _3424;
                                float _3432 = _3429 * _3425;
                                float _3436 = 1.0 - (_3426 / (_3292 * _3292));
                                float _4527 = isnan(0.0) ? _3436 : (isnan(_3436) ? 0.0 : max(_3436, 0.0));
                                float _3437 = isnan(1.0) ? _4527 : (isnan(_4527) ? 1.0 : min(_4527, 1.0));
                                float _3441 = sqrt(_3426) * _3307.w;
                                float _3443 = 1.39999997615814208984375 / (_3441 + 1.39999997615814208984375);
                                float _3444 = _3443 * _3443;
                                float _3447 = ((1.0 - _3444) * dot(vec3(_3430, _3431, _3432), vec3(_953, _956, _959))) + _3444;
                                float _3450 = _3441 * _3441;
                                float _3454 = (fma(_2649, _3334.z, fma(_2648, _3334.y, _3334.x * _2647)) + _3334.w) / _3395;
                                float _3455 = (fma(_2649, _3349.z, fma(_2648, _3349.y, _3349.x * _2647)) + _3349.w) / _3395;
                                float _3459 = 1.0 - dot(vec2(_3454, _3455), vec2(_3454, _3455));
                                float _4543 = isnan(0.0) ? _3459 : (isnan(_3459) ? 0.0 : max(_3459, 0.0));
                                float _3460 = isnan(1.0) ? _4543 : (isnan(_4543) ? 1.0 : min(_4543, 1.0));
                                float _3461 = _3460 * (((isnan(0.0) ? _3447 : (isnan(_3447) ? 0.0 : max(_3447, 0.0))) * _3437) / ((_3450 * 0.699999988079071044921875) + 1.0));
                                float _3473 = exp2(log2(1.0 / ((_3450 * 3.5) + 5.0)) * 0.25);
                                float _3474 = 1.0 - _1013;
                                float _3481 = sqrt(1.0 - ((1.0 - (_3474 * _3474)) * (1.0 - (_3473 * _3473))));
                                float _3482 = _3481 * _3481;
                                float _3483 = _3482 * _3482;
                                float _3484 = _3430 - _2933;
                                float _3485 = _3431 - _2934;
                                float _3486 = _3432 - _2935;
                                float _3490 = inversesqrt(dot(vec3(_3484, _3485, _3486), vec3(_3484, _3485, _3486)));
                                float _3494 = dot(vec3(_953, _956, _959), vec3((-0.0) - _2933, (-0.0) - _2934, (-0.0) - _2935));
                                float _4554 = isnan(0.0) ? _3494 : (isnan(_3494) ? 0.0 : max(_3494, 0.0));
                                float _3497 = isnan(1.0) ? _4554 : (isnan(_4554) ? 1.0 : min(_4554, 1.0));
                                float _3498 = dot(vec3(_953, _956, _959), vec3(_3490 * _3484, _3490 * _3485, _3490 * _3486));
                                float _4565 = isnan(0.0) ? _3498 : (isnan(_3498) ? 0.0 : max(_3498, 0.0));
                                float _3501 = isnan(1.0) ? _4565 : (isnan(_4565) ? 1.0 : min(_4565, 1.0));
                                float _3505 = ((_3501 * _3501) * (_3483 + (-1.0))) + 1.0;
                                float _3506 = _3443 * _3482;
                                float _3507 = _3506 * _3506;
                                float _3513 = ((1.0 - _3507) * dot(vec3(_953, _956, _959), vec3(_3430, _3431, _3432))) + _3507;
                                float _4576 = isnan(0.0) ? _3513 : (isnan(_3513) ? 0.0 : max(_3513, 0.0));
                                float _3514 = isnan(1.0) ? _4576 : (isnan(_4576) ? 1.0 : min(_4576, 1.0));
                                float _3515 = 1.0 - _3482;
                                float _3525 = (0.5 / (((_3514 * ((_3497 * _3515) + _3482)) + 9.9999999392252902907785028219223e-09) + (((_3514 * _3515) + _3482) * _3497))) * _3514;
                                float _4587 = isnan(0.0) ? _3525 : (isnan(_3525) ? 0.0 : max(_3525, 0.0));
                                float _3535 = (_3460 * _3437) * (((_3483 * 3.1415927410125732421875) * (isnan(1.0) ? _4587 : (isnan(_4587) ? 1.0 : min(_4587, 1.0)))) / ((_3505 * _3505) * ((_3450 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3535 * _3319.x;
                                frontier_phi_73_pred_1 = _3535 * _3319.y;
                                frontier_phi_73_pred_2 = _3461 * _3307.z;
                                frontier_phi_73_pred_3 = _3461 * _3307.y;
                                frontier_phi_73_pred_4 = _3461 * _3307.x;
                                frontier_phi_73_pred_5 = _3535 * _3319.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3539 = frontier_phi_73_pred;
                            _3540 = frontier_phi_73_pred_1;
                            _3544 = frontier_phi_73_pred_2;
                            _3543 = frontier_phi_73_pred_3;
                            _3542 = frontier_phi_73_pred_4;
                            _3541 = frontier_phi_73_pred_5;
                            _3249 = _3542 + _3262;
                            _3250 = _3543 + _3263;
                            _3251 = _3544 + _3264;
                            _3246 = _3539 + _3259;
                            _3247 = _3540 + _3260;
                            _3248 = _3541 + _3261;
                            if (_3266 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3259 = _3246;
                                _3260 = _3247;
                                _3261 = _3248;
                                _3262 = _3249;
                                _3263 = _3250;
                                _3264 = _3251;
                                _3265 = _3266;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3249;
                        frontier_phi_67_pred_1 = _3250;
                        frontier_phi_67_pred_2 = _3251;
                        frontier_phi_67_pred_3 = _3248;
                        frontier_phi_67_pred_4 = _3247;
                        frontier_phi_67_pred_5 = _3246;
                    }
                    _2914 = frontier_phi_67_pred;
                    _2916 = frontier_phi_67_pred_1;
                    _2918 = frontier_phi_67_pred_2;
                    _2912 = frontier_phi_67_pred_3;
                    _2910 = frontier_phi_67_pred_4;
                    _2908 = frontier_phi_67_pred_5;
                    uint _3053 = _3052 + 1u;
                    if (_3053 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3046 = _2908;
                        _3047 = _2910;
                        _3048 = _2912;
                        _3049 = _2914;
                        _3050 = _2916;
                        _3051 = _2918;
                        _3052 = _3053;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2916;
                frontier_phi_55_56_ladder_1 = _2918;
                frontier_phi_55_56_ladder_2 = _2914;
                frontier_phi_55_56_ladder_3 = _2912;
                frontier_phi_55_56_ladder_4 = _2910;
                frontier_phi_55_56_ladder_5 = _2908;
            }
            else
            {
                frontier_phi_55_56_ladder = _2802;
                frontier_phi_55_56_ladder_1 = _2804;
                frontier_phi_55_56_ladder_2 = _2800;
                frontier_phi_55_56_ladder_3 = _2798;
                frontier_phi_55_56_ladder_4 = _2796;
                frontier_phi_55_56_ladder_5 = _2794;
            }
            _2907 = frontier_phi_55_56_ladder_5;
            _2909 = frontier_phi_55_56_ladder_4;
            _2911 = frontier_phi_55_56_ladder_3;
            _2913 = frontier_phi_55_56_ladder_2;
            _2915 = frontier_phi_55_56_ladder;
            _2917 = frontier_phi_55_56_ladder_1;
        }
        float _2922 = isnan(1.0) ? _997 : (isnan(_997) ? 1.0 : min(_997, 1.0));
        _2706 = (_2922 * _2913) + _2161;
        _2708 = (_2922 * _2915) + _2163;
        _2710 = (_2922 * _2917) + _2165;
        _2712 = ((_2907 * 0.039999999105930328369140625) * _2922) + _2491;
        _2714 = ((_2909 * 0.039999999105930328369140625) * _2922) + _2493;
        _2716 = ((_2911 * 0.039999999105930328369140625) * _2922) + _2495;
    }
    else
    {
        _2706 = _2161;
        _2708 = _2163;
        _2710 = _2165;
        _2712 = _2491;
        _2714 = _2493;
        _2716 = _2495;
    }
    float _4603 = isnan(0.0) ? _982 : (isnan(_982) ? 0.0 : max(_982, 0.0));
    float _4614 = isnan(0.0) ? _983 : (isnan(_983) ? 0.0 : max(_983, 0.0));
    float _4625 = isnan(0.0) ? _984 : (isnan(_984) ? 0.0 : max(_984, 0.0));
    uint _2736 = _253 + 6u;
    float _2744 = _934 / cbSceneParam._m0[86u].x;
    float _2745 = _935 / cbSceneParam._m0[86u].y;
    vec4 _2759 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2744, _2745, (log2((isnan(cbSceneParam._m0[77u].w) ? _869 : (isnan(_869) ? cbSceneParam._m0[77u].w : min(_869, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2761 = _2759.x;
    float _2762 = _2759.y;
    float _2763 = _2759.z;
    float _2764 = _2759.w;
    float _2857;
    float _2859;
    float _2861;
    float _2863;
    if (_869 > cbSceneParam._m0[78u].w)
    {
        float _2819 = isnan(_869) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _869 : min(cbSceneParam._m0[80u].w, _869));
        float _2820 = _2819 / _869;
        float _2831 = _2820 * _919;
        float _2832 = _920 * _2820;
        float _2833 = (-0.0) - _2832;
        float _2835 = _2820 * _921;
        float _2837 = (cbSceneParam._m0[77u].w * _2833) / _2819;
        float _2838 = _2837 + cbSceneParam._m0[79u].w;
        float _2839 = cbSceneParam._m0[79u].w - _2832;
        float _2845 = sqrt(((_2831 * _2831) + (_2832 * _2832)) + (_2835 * _2835));
        float _2848 = (1.0 - (cbSceneParam._m0[77u].w / _2819)) * _2845;
        float _2853 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2855 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3008;
        if (abs((_2833 - _2837) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3008 = ((((_2838 > 0.0) ? exp2(_2853 * _2838) : (2.0 - exp2(_2855 * _2838))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2848;
        }
        else
        {
            float _2968 = 1.0 / cbSceneParam._m0[80u].x;
            float _2969 = isnan(_2839) ? _2838 : (isnan(_2838) ? _2839 : max(_2838, _2839));
            float _2970 = isnan(_2839) ? _2838 : (isnan(_2838) ? _2839 : min(_2838, _2839));
            float _2979 = isnan(0.0) ? _2969 : (isnan(_2969) ? 0.0 : min(_2969, 0.0));
            float _2980 = isnan(0.0) ? _2970 : (isnan(_2970) ? 0.0 : min(_2970, 0.0));
            _3008 = ((abs(_2845 / _2833) * cbSceneParam._m0[80u].y) * ((((_2979 - _2980) * 2.0) - ((exp2(_2853 * (isnan(0.0) ? _2969 : (isnan(_2969) ? 0.0 : max(_2969, 0.0)))) - exp2(_2853 * (isnan(0.0) ? _2970 : (isnan(_2970) ? 0.0 : max(_2970, 0.0))))) * _2968)) - ((exp2(_2855 * _2979) - exp2(_2855 * _2980)) * _2968))) + (_2848 * cbSceneParam._m0[80u].z);
        }
        vec4 _3010 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2744, _2745, 1.0), 0.0);
        float _3019 = exp2((_3008 * (-1.44269502162933349609375)) * (1.0 - _3010.w));
        float _3020 = log2(_3019);
        float _3036 = log2(_2764);
        _2857 = (exp2(_3036 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3020 * cbSceneParam._m0[78u].x)) * _3010.x) / cbSceneParam._m0[78u].x)) + _2761;
        _2859 = (exp2(_3036 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3020 * cbSceneParam._m0[78u].y)) * _3010.y) / cbSceneParam._m0[78u].y)) + _2762;
        _2861 = (exp2(_3036 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3020 * cbSceneParam._m0[78u].z)) * _3010.z) / cbSceneParam._m0[78u].z)) + _2763;
        _2863 = _3019 * _2764;
    }
    else
    {
        _2857 = _2761;
        _2859 = _2762;
        _2861 = _2763;
        _2863 = _2764;
    }
    float _2875 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2876 = _2875 == 3.0;
    float _2877 = log2(_2863);
    float _2884 = exp2(_2877 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4603 : (isnan(_4603) ? 1.0 : min(_4603, 1.0))) * (_2706 + ((isnan(0.0) ? _1721 : (isnan(_1721) ? 0.0 : max(_1721, 0.0))) * _997))) + ((_2712 + ((isnan(0.0) ? _2014 : (isnan(_2014) ? 0.0 : max(_2014, 0.0))) * _1800)) * cbPerFrame._m0[3u].x));
    float _2885 = exp2(_2877 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4614 : (isnan(_4614) ? 1.0 : min(_4614, 1.0))) * (_2708 + ((isnan(0.0) ? _1724 : (isnan(_1724) ? 0.0 : max(_1724, 0.0))) * _997))) + ((_2714 + ((isnan(0.0) ? _2017 : (isnan(_2017) ? 0.0 : max(_2017, 0.0))) * _1800)) * cbPerFrame._m0[3u].x));
    float _2886 = exp2(_2877 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4625 : (isnan(_4625) ? 1.0 : min(_4625, 1.0))) * (_2710 + ((isnan(0.0) ? _1727 : (isnan(_1727) ? 0.0 : max(_1727, 0.0))) * _997))) + ((_2716 + ((isnan(0.0) ? _2020 : (isnan(_2020) ? 0.0 : max(_2020, 0.0))) * _1800)) * cbPerFrame._m0[3u].x));
    float _2895 = (_2875 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2895 * (_2876 ? _2884 : (_2884 + (cbSceneParam._m0[72u].w * _2857)));
    SV_Target.y = _2895 * (_2876 ? _2885 : (_2885 + (cbSceneParam._m0[72u].w * _2859)));
    SV_Target.z = _2895 * (_2876 ? _2886 : (_2886 + (cbSceneParam._m0[72u].w * _2861)));
    SV_Target.w = cbInstanceData._m0[_2736].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2736].w;
}


