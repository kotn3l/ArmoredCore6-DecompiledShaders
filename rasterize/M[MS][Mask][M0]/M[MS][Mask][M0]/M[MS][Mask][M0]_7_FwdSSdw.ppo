#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_0;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_29;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_6;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1162;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _215 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _216 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _217 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _223 = inversesqrt(dot(vec3(_215, _216, _217), vec3(_215, _216, _217)));
    float _230 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _237 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _243 = uint(roundEven(NORMAL.w)) * 13u;
    uint _248 = _243 + 1u;
    uint _252 = _243 + 2u;
    float _261 = sqrt(((cbInstanceData._m0[_248].x * cbInstanceData._m0[_248].x) + (cbInstanceData._m0[_243].x * cbInstanceData._m0[_243].x)) + (cbInstanceData._m0[_252].x * cbInstanceData._m0[_252].x));
    float _262 = _261 * TEXCOORD.z;
    float _263 = _261 * TEXCOORD.w;
    vec4 _282 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _306 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _311 = _306.x * cbMtdParam._m0[11u].x;
    float _312 = _306.y * cbMtdParam._m0[11u].y;
    float _313 = _306.z * cbMtdParam._m0[11u].z;
    vec4 _332 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _262) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _263) + cbTextureTilingScale._m0[5u].w));
    vec4 _385 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _387 = _385.x;
    float _399 = dot(vec4(_387, _385.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _416 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w)).x) * 2.0) - ((((_387 - _399) * cbMtdParam._m0[24u].z) + _399) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3495 = isnan(0.0) ? _416 : (isnan(_416) ? 0.0 : max(_416, 0.0));
    float _417 = isnan(1.0) ? _3495 : (isnan(_3495) ? 1.0 : min(_3495, 1.0));
    float _430 = ((cbMtdParam._m0[9u].x * 4.55000019073486328125) * _282.x) * ((_417 * ((_332.x * cbMtdParam._m0[12u].x) - _311)) + _311);
    float _433 = ((cbMtdParam._m0[9u].y * 4.55000019073486328125) * _282.y) * ((_417 * ((_332.y * cbMtdParam._m0[12u].y) - _312)) + _312);
    float _436 = ((cbMtdParam._m0[9u].z * 4.55000019073486328125) * _282.z) * ((_417 * ((_332.z * cbMtdParam._m0[12u].z) - _313)) + _313);
    vec4 _449 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _262) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _263) + cbTextureTilingScale._m0[4u].w));
    vec4 _466 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _468 = _466.x;
    float _469 = _466.y;
    float _470 = _466.z;
    float _479 = ((_449.z - _470) * _417) + _470;
    float _482 = ((((_449.x - _468) * _417) + _468) * 2.0) + (-1.0);
    float _484 = ((((_449.y - _469) * _417) + _469) * 2.0) + (-1.0);
    float _485 = dot(vec2(_482, _484), vec2(_482, _484));
    float _3506 = isnan(0.0) ? _485 : (isnan(_485) ? 0.0 : max(_485, 0.0));
    float _490 = sqrt(1.0 - (isnan(1.0) ? _3506 : (isnan(_3506) ? 1.0 : min(_3506, 1.0))));
    vec4 _506 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _518 = (((_506.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _482;
    float _519 = (((_506.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _484;
    vec4 _531 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _262) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _263) + cbTextureTilingScale._m0[19u].w));
    float _533 = _531.x;
    float _534 = 1.0 - _533;
    float _562 = (TEXCOORD_8.x - ((cbMtdParam._m0[22u].w * (1.0 - TEXCOORD_8.x)) * ((((_533 - _534) * cbMtdParam._m0[24u].y) + _534) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3517 = isnan(0.0) ? _562 : (isnan(_562) ? 0.0 : max(_562, 0.0));
    float _563 = isnan(1.0) ? _3517 : (isnan(_3517) ? 1.0 : min(_3517, 1.0));
    float _571 = ((((cbMtdParam._m0[10u].x - _430) * TEXCOORD_8.x) * cbMtdParam._m0[23u].w) * _563) + _430;
    float _572 = ((((cbMtdParam._m0[10u].y - _433) * TEXCOORD_8.y) * cbMtdParam._m0[23u].w) * _563) + _433;
    float _573 = (((cbMtdParam._m0[23u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _436)) * _563) + _436;
    float _577 = (cbMtdParam._m0[19u].w * (_506.z - _479)) + _479;
    float _581 = ((cbMtdParam._m0[23u].y - _577) * _563) + _577;
    vec4 _600 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _262) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _263) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _606 = (_600.x * 2.0) + (-1.0);
    float _607 = (_600.y * 2.0) + (-1.0);
    float _608 = dot(vec2(_606, _607), vec2(_606, _607));
    float _3528 = isnan(0.0) ? _608 : (isnan(_608) ? 0.0 : max(_608, 0.0));
    float _624 = (_563 * (((cbMtdParam._m0[22u].z * _518) - _518) + _606)) + _518;
    float _625 = (_563 * (((cbMtdParam._m0[22u].z * _519) - _519) + _607)) + _519;
    float _626 = (_563 * (sqrt(1.0 - (isnan(1.0) ? _3528 : (isnan(_3528) ? 1.0 : min(_3528, 1.0)))) - _490)) + _490;
    float _628 = cbMtdParam._m0[22u].x + _506.w;
    float _631 = fma(_626, _230 * NORMAL.x, fma(_625, _237 * TANGENT.x, (_223 * _215) * _624));
    float _634 = fma(_626, _230 * NORMAL.y, fma(_625, _237 * TANGENT.y, (_223 * _216) * _624));
    float _637 = fma(_626, _230 * NORMAL.z, fma(_625, _237 * TANGENT.z, (_223 * _217) * _624));
    float _641 = inversesqrt(dot(vec3(_631, _634, _637), vec3(_631, _634, _637)));
    float _642 = _641 * _631;
    float _643 = _641 * _634;
    float _644 = _641 * _637;
    float _3539 = isnan(0.0) ? _581 : (isnan(_581) ? 0.0 : max(_581, 0.0));
    float _645 = isnan(1.0) ? _3539 : (isnan(_3539) ? 1.0 : min(_3539, 1.0));
    float _3550 = isnan(0.0) ? _628 : (isnan(_628) ? 0.0 : max(_628, 0.0));
    float _3561 = isnan(0.0) ? _571 : (isnan(_571) ? 0.0 : max(_571, 0.0));
    float _3572 = isnan(0.0) ? _572 : (isnan(_572) ? 0.0 : max(_572, 0.0));
    float _3583 = isnan(0.0) ? _573 : (isnan(_573) ? 0.0 : max(_573, 0.0));
    float _663 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _703 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _713 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _703);
    float _714 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _703);
    float _715 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _703);
    float _719 = inversesqrt(dot(vec3(_713, _714, _715), vec3(_713, _714, _715)));
    float _720 = _713 * _719;
    float _721 = _714 * _719;
    float _722 = _715 * _719;
    float _728 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _729 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _747 = fma(_644, cbSceneParam._m0[5u].z, fma(_643, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _642));
    float _750 = fma(_644, cbSceneParam._m0[6u].z, fma(_643, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _642));
    float _753 = fma(_644, cbSceneParam._m0[7u].z, fma(_643, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _642));
    uint _767 = (_243 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _773 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3561 : (isnan(_3561) ? 1.0 : min(_3561, 1.0)))) * cbInstanceData._m0[_767].x;
    float _774 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3572 : (isnan(_3572) ? 1.0 : min(_3572, 1.0)))) * cbInstanceData._m0[_767].y;
    float _775 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3583 : (isnan(_3583) ? 1.0 : min(_3583, 1.0)))) * cbInstanceData._m0[_767].z;
    float _3594 = isnan(0.0) ? _773 : (isnan(_773) ? 0.0 : max(_773, 0.0));
    float _776 = isnan(1.0) ? _3594 : (isnan(_3594) ? 1.0 : min(_3594, 1.0));
    float _3605 = isnan(0.0) ? _774 : (isnan(_774) ? 0.0 : max(_774, 0.0));
    float _777 = isnan(1.0) ? _3605 : (isnan(_3605) ? 1.0 : min(_3605, 1.0));
    float _3616 = isnan(0.0) ? _775 : (isnan(_775) ? 0.0 : max(_775, 0.0));
    float _778 = isnan(1.0) ? _3616 : (isnan(_3616) ? 1.0 : min(_3616, 1.0));
    vec4 _787 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _728, cbSceneParam._m0[86u].y * _729));
    float _791 = ((isnan(1.0) ? _3550 : (isnan(_3550) ? 1.0 : min(_3550, 1.0))) * TEXCOORD_5.w) * _787.x;
    float _792 = dot(vec3(_642, _643, _644), vec3(_720, _721, _722));
    float _795 = _792 * 2.0;
    float _799 = (_795 * _642) - _720;
    float _800 = (_795 * _643) - _721;
    float _801 = (_795 * _644) - _722;
    float _805 = abs(dot(vec3(_720, _721, _722), vec3(_642, _643, _644)));
    float _3627 = isnan(0.0) ? _805 : (isnan(_805) ? 0.0 : max(_805, 0.0));
    float _807 = sqrt(_645);
    float _820 = exp2((_807 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3627 : (isnan(_3627) ? 1.0 : min(_3627, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_807 * 3.0));
    float _852 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _856 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _860 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1161;
    float _1163;
    float _1164;
    float _1165;
    float _1166;
    float _1167;
    float _1168;
    float _1169;
    float _1170;
    float _1171;
    float _1172;
    float _1173;
    float _1174;
    float _1175;
    float _1176;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _886 = fma(_860, cbModelParam._m0[26u].z, fma(_856, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _852));
        float _890 = fma(_860, cbModelParam._m0[27u].z, fma(_856, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _852));
        float _894 = fma(_860, cbModelParam._m0[28u].z, fma(_856, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _852));
        float _919 = _852 + _642;
        float _920 = _856 + _643;
        float _921 = _860 + _644;
        float _931 = fma(_921, cbModelParam._m0[26u].z, fma(_920, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _919)) - _886;
        float _932 = fma(_921, cbModelParam._m0[27u].z, fma(_920, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _919)) - _890;
        float _933 = fma(_921, cbModelParam._m0[28u].z, fma(_920, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _919)) - _894;
        float _937 = inversesqrt(dot(vec3(_931, _932, _933), vec3(_931, _932, _933)));
        float _950 = ((_937 * _931) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_886 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _951 = ((_937 * _932) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_890 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _952 = ((_937 * _933) / cbModelParam._m0[34u].z) + ((((((_894 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _955 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_950, _951, _952), 0.0);
        vec4 _962 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_950, _951, _952), 0.0);
        vec4 _969 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_950, _951, _952), 0.0);
        vec4 _976 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_950, _951, _952), 0.0);
        float _989 = exp2((_955.w + (-0.5)) * 20.0) * 2.0;
        float _990 = _989 * (_955.x + (-0.5));
        float _991 = _989 * (_955.y + (-0.5));
        float _992 = _989 * (_955.z + (-0.5));
        float _999 = exp2((_962.w + (-0.5)) * 20.0) * 2.0;
        float _1000 = _999 * (_962.x + (-0.5));
        float _1001 = _999 * (_962.y + (-0.5));
        float _1002 = _999 * (_962.z + (-0.5));
        float _1009 = exp2((_969.w + (-0.5)) * 20.0) * 2.0;
        float _1010 = _1009 * (_969.x + (-0.5));
        float _1011 = _1009 * (_969.y + (-0.5));
        float _1012 = _1009 * (_969.z + (-0.5));
        float _1019 = exp2((_976.w + (-0.5)) * 20.0) * 2.0;
        float _1020 = _1019 * (_976.x + (-0.5));
        float _1021 = _1019 * (_976.y + (-0.5));
        float _1022 = _1019 * (_976.z + (-0.5));
        float _1023 = isnan(0.0) ? _1020 : (isnan(_1020) ? 0.0 : max(_1020, 0.0));
        float _1024 = isnan(0.0) ? _1021 : (isnan(_1021) ? 0.0 : max(_1021, 0.0));
        float _1025 = isnan(0.0) ? _1022 : (isnan(_1022) ? 0.0 : max(_1022, 0.0));
        float _1026 = _990 * 0.5;
        float _1027 = _1000 * 0.5;
        float _1028 = _1010 * 0.5;
        float _1029 = dot(vec3(_1026, _1027, _1028), vec3(_1026, _1027, _1028));
        float _1034 = (_1029 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1029);
        float _1043 = (dot(vec3(_642, _643, _644), vec3(_1034 * _1026, _1034 * _1027, _1034 * _1028)) + 1.0) * 0.5;
        float _3653 = isnan(0.0) ? _1043 : (isnan(_1043) ? 0.0 : max(_1043, 0.0));
        float _1053 = sqrt(((_1027 * _1027) + (_1026 * _1026)) + (_1028 * _1028)) / (_1023 + 9.9999997473787516355514526367188e-06);
        float _3664 = isnan(0.0) ? _1053 : (isnan(_1053) ? 0.0 : max(_1053, 0.0));
        float _1054 = isnan(1.0) ? _3664 : (isnan(_3664) ? 1.0 : min(_3664, 1.0));
        float _1055 = _1054 * 2.0;
        float _1059 = (1.0 - _1054) / (_1054 + 1.0);
        float _3675 = isnan(0.0) ? _1059 : (isnan(_1059) ? 0.0 : max(_1059, 0.0));
        float _1060 = isnan(1.0) ? _3675 : (isnan(_3675) ? 1.0 : min(_3675, 1.0));
        float _1069 = ((((1.0 - _1060) * (_1055 + 2.0)) * exp2(log2(isnan(1.0) ? _3653 : (isnan(_3653) ? 1.0 : min(_3653, 1.0))) * (_1055 + 1.0))) + _1060) * _1023;
        float _1070 = _991 * 0.5;
        float _1071 = _1001 * 0.5;
        float _1072 = _1011 * 0.5;
        float _1073 = dot(vec3(_1070, _1071, _1072), vec3(_1070, _1071, _1072));
        float _1078 = (_1073 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1073);
        float _1086 = (dot(vec3(_642, _643, _644), vec3(_1078 * _1070, _1078 * _1071, _1078 * _1072)) + 1.0) * 0.5;
        float _3686 = isnan(0.0) ? _1086 : (isnan(_1086) ? 0.0 : max(_1086, 0.0));
        float _1095 = sqrt(((_1071 * _1071) + (_1070 * _1070)) + (_1072 * _1072)) / (_1024 + 9.9999997473787516355514526367188e-06);
        float _3697 = isnan(0.0) ? _1095 : (isnan(_1095) ? 0.0 : max(_1095, 0.0));
        float _1096 = isnan(1.0) ? _3697 : (isnan(_3697) ? 1.0 : min(_3697, 1.0));
        float _1097 = _1096 * 2.0;
        float _1101 = (1.0 - _1096) / (_1096 + 1.0);
        float _3708 = isnan(0.0) ? _1101 : (isnan(_1101) ? 0.0 : max(_1101, 0.0));
        float _1102 = isnan(1.0) ? _3708 : (isnan(_3708) ? 1.0 : min(_3708, 1.0));
        float _1111 = ((((1.0 - _1102) * (_1097 + 2.0)) * exp2(log2(isnan(1.0) ? _3686 : (isnan(_3686) ? 1.0 : min(_3686, 1.0))) * (_1097 + 1.0))) + _1102) * _1024;
        float _1112 = _992 * 0.5;
        float _1113 = _1002 * 0.5;
        float _1114 = _1012 * 0.5;
        float _1115 = dot(vec3(_1112, _1113, _1114), vec3(_1112, _1113, _1114));
        float _1120 = (_1115 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1115);
        float _1128 = (dot(vec3(_642, _643, _644), vec3(_1120 * _1112, _1120 * _1113, _1120 * _1114)) + 1.0) * 0.5;
        float _3719 = isnan(0.0) ? _1128 : (isnan(_1128) ? 0.0 : max(_1128, 0.0));
        float _1137 = sqrt(((_1113 * _1113) + (_1112 * _1112)) + (_1114 * _1114)) / (_1025 + 9.9999997473787516355514526367188e-06);
        float _3730 = isnan(0.0) ? _1137 : (isnan(_1137) ? 0.0 : max(_1137, 0.0));
        float _1138 = isnan(1.0) ? _3730 : (isnan(_3730) ? 1.0 : min(_3730, 1.0));
        float _1139 = _1138 * 2.0;
        float _1143 = (1.0 - _1138) / (_1138 + 1.0);
        float _3741 = isnan(0.0) ? _1143 : (isnan(_1143) ? 0.0 : max(_1143, 0.0));
        float _1144 = isnan(1.0) ? _3741 : (isnan(_3741) ? 1.0 : min(_3741, 1.0));
        float _1153 = ((((1.0 - _1144) * (_1139 + 2.0)) * exp2(log2(isnan(1.0) ? _3719 : (isnan(_3719) ? 1.0 : min(_3719, 1.0))) * (_1139 + 1.0))) + _1144) * _1025;
        _1161 = _992;
        _1163 = _991;
        _1164 = _990;
        _1165 = _1002;
        _1166 = _1001;
        _1167 = _1000;
        _1168 = _1012;
        _1169 = _1011;
        _1170 = _1010;
        _1171 = _1025;
        _1172 = _1024;
        _1173 = _1023;
        _1174 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1069 : (isnan(_1069) ? 0.0 : max(_1069, 0.0)));
        _1175 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1111 : (isnan(_1111) ? 0.0 : max(_1111, 0.0)));
        _1176 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1153 : (isnan(_1153) ? 0.0 : max(_1153, 0.0)));
    }
    else
    {
        _1161 = _1162;
        _1163 = _1162;
        _1164 = _1162;
        _1165 = _1162;
        _1166 = _1162;
        _1167 = _1162;
        _1168 = _1162;
        _1169 = _1162;
        _1170 = _1162;
        _1171 = _1162;
        _1172 = _1162;
        _1173 = _1162;
        _1174 = 0.0;
        _1175 = 0.0;
        _1176 = 0.0;
    }
    float _1470;
    float _1471;
    float _1472;
    float _1473;
    float _1474;
    float _1475;
    float _1476;
    float _1477;
    float _1478;
    float _1479;
    float _1480;
    float _1481;
    float _1482;
    float _1483;
    float _1484;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1201 = fma(_860, cbModelParam._m0[30u].z, fma(_856, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _852));
        float _1205 = fma(_860, cbModelParam._m0[31u].z, fma(_856, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _852));
        float _1209 = fma(_860, cbModelParam._m0[32u].z, fma(_856, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _852));
        float _1232 = _852 + _642;
        float _1233 = _856 + _643;
        float _1234 = _860 + _644;
        float _1244 = fma(_1234, cbModelParam._m0[30u].z, fma(_1233, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1232)) - _1201;
        float _1245 = fma(_1234, cbModelParam._m0[31u].z, fma(_1233, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1232)) - _1205;
        float _1246 = fma(_1234, cbModelParam._m0[32u].z, fma(_1233, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1232)) - _1209;
        float _1250 = inversesqrt(dot(vec3(_1244, _1245, _1246), vec3(_1244, _1245, _1246)));
        float _1263 = ((_1250 * _1244) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1201 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1264 = ((_1250 * _1245) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1205 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1265 = ((_1250 * _1246) / cbModelParam._m0[35u].z) + ((((((_1209 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1267 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1263, _1264, _1265), 0.0);
        vec4 _1274 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1263, _1264, _1265), 0.0);
        vec4 _1281 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1263, _1264, _1265), 0.0);
        vec4 _1288 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1263, _1264, _1265), 0.0);
        float _1300 = exp2((_1267.w + (-0.5)) * 20.0) * 2.0;
        float _1301 = _1300 * (_1267.x + (-0.5));
        float _1302 = _1300 * (_1267.y + (-0.5));
        float _1303 = _1300 * (_1267.z + (-0.5));
        float _1310 = exp2((_1274.w + (-0.5)) * 20.0) * 2.0;
        float _1311 = _1310 * (_1274.x + (-0.5));
        float _1312 = _1310 * (_1274.y + (-0.5));
        float _1313 = _1310 * (_1274.z + (-0.5));
        float _1320 = exp2((_1281.w + (-0.5)) * 20.0) * 2.0;
        float _1321 = _1320 * (_1281.x + (-0.5));
        float _1322 = _1320 * (_1281.y + (-0.5));
        float _1323 = _1320 * (_1281.z + (-0.5));
        float _1330 = exp2((_1288.w + (-0.5)) * 20.0) * 2.0;
        float _1331 = _1330 * (_1288.x + (-0.5));
        float _1332 = _1330 * (_1288.y + (-0.5));
        float _1333 = _1330 * (_1288.z + (-0.5));
        float _1334 = isnan(0.0) ? _1331 : (isnan(_1331) ? 0.0 : max(_1331, 0.0));
        float _1335 = isnan(0.0) ? _1332 : (isnan(_1332) ? 0.0 : max(_1332, 0.0));
        float _1336 = isnan(0.0) ? _1333 : (isnan(_1333) ? 0.0 : max(_1333, 0.0));
        float _1337 = _1301 * 0.5;
        float _1338 = _1311 * 0.5;
        float _1339 = _1321 * 0.5;
        float _1340 = dot(vec3(_1337, _1338, _1339), vec3(_1337, _1338, _1339));
        float _1345 = (_1340 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1340);
        float _1353 = (dot(vec3(_642, _643, _644), vec3(_1345 * _1337, _1345 * _1338, _1345 * _1339)) + 1.0) * 0.5;
        float _3782 = isnan(0.0) ? _1353 : (isnan(_1353) ? 0.0 : max(_1353, 0.0));
        float _1362 = sqrt(((_1338 * _1338) + (_1337 * _1337)) + (_1339 * _1339)) / (_1334 + 9.9999997473787516355514526367188e-06);
        float _3793 = isnan(0.0) ? _1362 : (isnan(_1362) ? 0.0 : max(_1362, 0.0));
        float _1363 = isnan(1.0) ? _3793 : (isnan(_3793) ? 1.0 : min(_3793, 1.0));
        float _1364 = _1363 * 2.0;
        float _1368 = (1.0 - _1363) / (_1363 + 1.0);
        float _3804 = isnan(0.0) ? _1368 : (isnan(_1368) ? 0.0 : max(_1368, 0.0));
        float _1369 = isnan(1.0) ? _3804 : (isnan(_3804) ? 1.0 : min(_3804, 1.0));
        float _1378 = ((((1.0 - _1369) * (_1364 + 2.0)) * exp2(log2(isnan(1.0) ? _3782 : (isnan(_3782) ? 1.0 : min(_3782, 1.0))) * (_1364 + 1.0))) + _1369) * _1334;
        float _1379 = _1302 * 0.5;
        float _1380 = _1312 * 0.5;
        float _1381 = _1322 * 0.5;
        float _1382 = dot(vec3(_1379, _1380, _1381), vec3(_1379, _1380, _1381));
        float _1387 = (_1382 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1382);
        float _1395 = (dot(vec3(_642, _643, _644), vec3(_1387 * _1379, _1387 * _1380, _1387 * _1381)) + 1.0) * 0.5;
        float _3815 = isnan(0.0) ? _1395 : (isnan(_1395) ? 0.0 : max(_1395, 0.0));
        float _1404 = sqrt(((_1380 * _1380) + (_1379 * _1379)) + (_1381 * _1381)) / (_1335 + 9.9999997473787516355514526367188e-06);
        float _3826 = isnan(0.0) ? _1404 : (isnan(_1404) ? 0.0 : max(_1404, 0.0));
        float _1405 = isnan(1.0) ? _3826 : (isnan(_3826) ? 1.0 : min(_3826, 1.0));
        float _1406 = _1405 * 2.0;
        float _1410 = (1.0 - _1405) / (_1405 + 1.0);
        float _3837 = isnan(0.0) ? _1410 : (isnan(_1410) ? 0.0 : max(_1410, 0.0));
        float _1411 = isnan(1.0) ? _3837 : (isnan(_3837) ? 1.0 : min(_3837, 1.0));
        float _1420 = ((((1.0 - _1411) * (_1406 + 2.0)) * exp2(log2(isnan(1.0) ? _3815 : (isnan(_3815) ? 1.0 : min(_3815, 1.0))) * (_1406 + 1.0))) + _1411) * _1335;
        float _1421 = _1303 * 0.5;
        float _1422 = _1313 * 0.5;
        float _1423 = _1323 * 0.5;
        float _1424 = dot(vec3(_1421, _1422, _1423), vec3(_1421, _1422, _1423));
        float _1429 = (_1424 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1424);
        float _1437 = (dot(vec3(_642, _643, _644), vec3(_1429 * _1421, _1429 * _1422, _1429 * _1423)) + 1.0) * 0.5;
        float _3848 = isnan(0.0) ? _1437 : (isnan(_1437) ? 0.0 : max(_1437, 0.0));
        float _1446 = sqrt(((_1422 * _1422) + (_1421 * _1421)) + (_1423 * _1423)) / (_1336 + 9.9999997473787516355514526367188e-06);
        float _3859 = isnan(0.0) ? _1446 : (isnan(_1446) ? 0.0 : max(_1446, 0.0));
        float _1447 = isnan(1.0) ? _3859 : (isnan(_3859) ? 1.0 : min(_3859, 1.0));
        float _1448 = _1447 * 2.0;
        float _1452 = (1.0 - _1447) / (_1447 + 1.0);
        float _3870 = isnan(0.0) ? _1452 : (isnan(_1452) ? 0.0 : max(_1452, 0.0));
        float _1453 = isnan(1.0) ? _3870 : (isnan(_3870) ? 1.0 : min(_3870, 1.0));
        float _1462 = ((((1.0 - _1453) * (_1448 + 2.0)) * exp2(log2(isnan(1.0) ? _3848 : (isnan(_3848) ? 1.0 : min(_3848, 1.0))) * (_1448 + 1.0))) + _1453) * _1336;
        _1470 = _1303;
        _1471 = _1302;
        _1472 = _1301;
        _1473 = _1313;
        _1474 = _1312;
        _1475 = _1311;
        _1476 = _1323;
        _1477 = _1322;
        _1478 = _1321;
        _1479 = _1336;
        _1480 = _1335;
        _1481 = _1334;
        _1482 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1378 : (isnan(_1378) ? 0.0 : max(_1378, 0.0)));
        _1483 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1420 : (isnan(_1420) ? 0.0 : max(_1420, 0.0)));
        _1484 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1462 : (isnan(_1462) ? 0.0 : max(_1462, 0.0)));
    }
    else
    {
        _1470 = _1162;
        _1471 = _1162;
        _1472 = _1162;
        _1473 = _1162;
        _1474 = _1162;
        _1475 = _1162;
        _1476 = _1162;
        _1477 = _1162;
        _1478 = _1162;
        _1479 = _1162;
        _1480 = _1162;
        _1481 = _1162;
        _1482 = 0.0;
        _1483 = 0.0;
        _1484 = 0.0;
    }
    float _1494 = (cbModelParam._m0[1u].x * (_1482 - _1174)) + _1174;
    float _1495 = (cbModelParam._m0[1u].x * (_1483 - _1175)) + _1175;
    float _1496 = (cbModelParam._m0[1u].x * (_1484 - _1176)) + _1176;
    float _1517 = fma(_1496, cbSceneParam._m0[89u].z, fma(_1495, cbSceneParam._m0[89u].y, _1494 * cbSceneParam._m0[89u].x));
    float _1520 = fma(_1496, cbSceneParam._m0[90u].z, fma(_1495, cbSceneParam._m0[90u].y, _1494 * cbSceneParam._m0[90u].x));
    float _1523 = fma(_1496, cbSceneParam._m0[91u].z, fma(_1495, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1494));
    float _1538 = _799 * 0.5;
    float _1539 = _800 * 0.5;
    float _1540 = _801 * 0.5;
    float _1541 = dot(vec4(_1538, _1539, _1540, 1.0), vec4(_1472, _1475, _1478, _1481));
    float _1544 = dot(vec4(_1538, _1539, _1540, 1.0), vec4(_1471, _1474, _1477, _1480));
    float _1547 = dot(vec4(_1538, _1539, _1540, 1.0), vec4(_1470, _1473, _1476, _1479));
    float _1581;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1554 = dot(vec4(_1538, _1539, _1540, 1.0), vec4(_1161, _1165, _1168, _1171));
        float _1558 = dot(vec4(_1538, _1539, _1540, 1.0), vec4(_1163, _1166, _1169, _1172));
        float _1562 = dot(vec4(_1538, _1539, _1540, 1.0), vec4(_1164, _1167, _1170, _1173));
        float _1569 = dot(vec4(cbModelParam._m0[39u]), vec4(_1538, _1539, _1540, 1.0));
        _1581 = dot(vec3(isnan(0.0) ? _1562 : (isnan(_1562) ? 0.0 : max(_1562, 0.0)), isnan(0.0) ? _1558 : (isnan(_1558) ? 0.0 : max(_1558, 0.0)), isnan(0.0) ? _1554 : (isnan(_1554) ? 0.0 : max(_1554, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1569) ? 0.0 : (isnan(0.0) ? _1569 : max(0.0, _1569))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1581 = 1.0;
    }
    float _1592;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1583 = dot(vec4(cbModelParam._m0[40u]), vec4(_1538, _1539, _1540, 1.0));
        _1592 = dot(vec3(isnan(0.0) ? _1541 : (isnan(_1541) ? 0.0 : max(_1541, 0.0)), isnan(0.0) ? _1544 : (isnan(_1544) ? 0.0 : max(_1544, 0.0)), isnan(0.0) ? _1547 : (isnan(_1547) ? 0.0 : max(_1547, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1583) ? 0.0 : (isnan(0.0) ? _1583 : max(0.0, _1583))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1592 = 1.0;
    }
    float _1596 = (_1592 * cbModelParam._m0[1u].x) + (_1581 * (1.0 - cbModelParam._m0[1u].x));
    float _1606 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _645);
    float _1607 = isnan(_1606) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1606 : min(cbModelParam._m0[25u].z, _1606));
    float _1689;
    float _1691;
    float _1693;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1656 = fma(_860, cbModelParam._m0[13u].z, fma(_856, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _852)) + cbModelParam._m0[13u].w;
        float _1660 = fma(_860, cbModelParam._m0[14u].z, fma(_856, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _852)) + cbModelParam._m0[14u].w;
        float _1664 = fma(_860, cbModelParam._m0[15u].z, fma(_856, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _852)) + cbModelParam._m0[15u].w;
        float _1667 = fma(_801, cbModelParam._m0[13u].z, fma(_800, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _799));
        float _1670 = fma(_801, cbModelParam._m0[14u].z, fma(_800, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _799));
        float _1673 = fma(_801, cbModelParam._m0[15u].z, fma(_800, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _799));
        float _1701;
        if (_1667 > 0.0)
        {
            _1701 = abs((1.0 - _1656) / _1667);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1667 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1656 + 1.0) / _1667);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1701 = frontier_phi_14_12_ladder;
        }
        float _1924;
        if (_1670 > 0.0)
        {
            _1924 = abs((1.0 - _1660) / _1670);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1670 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1660 + 1.0) / _1670);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1924 = frontier_phi_23_19_ladder;
        }
        float _2170;
        if (_1673 > 0.0)
        {
            _2170 = abs((1.0 - _1664) / _1673);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1673 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1664 + 1.0) / _1673);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2170 = frontier_phi_35_30_ladder;
        }
        float _2172 = isnan(_1924) ? _1701 : (isnan(_1701) ? _1924 : min(_1701, _1924));
        float _2173 = isnan(_2170) ? _2172 : (isnan(_2172) ? _2170 : min(_2172, _2170));
        float _2177 = (_2173 * _1667) + _1656;
        float _2178 = (_2173 * _1670) + _1660;
        float _2179 = (_2173 * _1673) + _1664;
        float _2180 = _2173 * 9.9999997473787516355514526367188e-05;
        float _2182 = (-1.0) - _2180;
        float _2184 = _2180 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2179 > _2184) || ((_2179 < _2182) || ((_2178 > _2184) || ((_2178 < _2182) || ((_2177 < _2182) || (_2177 > _2184))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2303 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2179, cbModelParam._m0[9u].z, fma(_2178, cbModelParam._m0[9u].y, _2177 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2179, cbModelParam._m0[10u].z, fma(_2178, cbModelParam._m0[10u].y, _2177 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2179, cbModelParam._m0[11u].z, fma(_2178, cbModelParam._m0[11u].y, _2177 * cbModelParam._m0[11u].x))), _1607);
            frontier_phi_13_35_ladder = _2303.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2303.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2303.x * cbModelParam._m0[1u].y;
        }
        _1689 = frontier_phi_13_35_ladder_2;
        _1691 = frontier_phi_13_35_ladder_1;
        _1693 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1677 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_799, _800, _801), _1607);
        _1689 = _1677.x * cbModelParam._m0[1u].y;
        _1691 = _1677.y * cbModelParam._m0[1u].y;
        _1693 = _1677.z * cbModelParam._m0[1u].y;
    }
    float _1697 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _645);
    float _1698 = isnan(_1697) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1697 : min(cbModelParam._m0[25u].w, _1697));
    float _1789;
    float _1791;
    float _1793;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1753 = fma(_860, cbModelParam._m0[21u].z, fma(_856, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _852)) + cbModelParam._m0[21u].w;
        float _1757 = fma(_860, cbModelParam._m0[22u].z, fma(_856, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _852)) + cbModelParam._m0[22u].w;
        float _1761 = fma(_860, cbModelParam._m0[23u].z, fma(_856, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _852)) + cbModelParam._m0[23u].w;
        float _1764 = fma(_801, cbModelParam._m0[21u].z, fma(_800, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _799));
        float _1767 = fma(_801, cbModelParam._m0[22u].z, fma(_800, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _799));
        float _1770 = fma(_801, cbModelParam._m0[23u].z, fma(_800, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _799));
        float _1929;
        if (_1764 > 0.0)
        {
            _1929 = abs((1.0 - _1753) / _1764);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1764 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1753 + 1.0) / _1764);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1929 = frontier_phi_25_21_ladder;
        }
        float _2197;
        if (_1767 > 0.0)
        {
            _2197 = abs((1.0 - _1757) / _1767);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1767 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1757 + 1.0) / _1767);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2197 = frontier_phi_37_32_ladder;
        }
        float _2402;
        if (_1770 > 0.0)
        {
            _2402 = abs((1.0 - _1761) / _1770);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1770 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1761 + 1.0) / _1770);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2402 = frontier_phi_46_43_ladder;
        }
        float _2404 = isnan(_2197) ? _1929 : (isnan(_1929) ? _2197 : min(_1929, _2197));
        float _2405 = isnan(_2402) ? _2404 : (isnan(_2404) ? _2402 : min(_2404, _2402));
        float _2409 = (_2405 * _1764) + _1753;
        float _2410 = (_2405 * _1767) + _1757;
        float _2411 = (_2405 * _1770) + _1761;
        float _2412 = _2405 * 9.9999997473787516355514526367188e-05;
        float _2413 = (-1.0) - _2412;
        float _2415 = _2412 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2411 > _2415) || ((_2411 < _2413) || ((_2410 > _2415) || ((_2410 < _2413) || ((_2409 < _2413) || (_2409 > _2415))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2610 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2411, cbModelParam._m0[17u].z, fma(_2410, cbModelParam._m0[17u].y, _2409 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2411, cbModelParam._m0[18u].z, fma(_2410, cbModelParam._m0[18u].y, _2409 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2411, cbModelParam._m0[19u].z, fma(_2410, cbModelParam._m0[19u].y, _2409 * cbModelParam._m0[19u].x))), _1698);
            frontier_phi_22_46_ladder = _2610.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2610.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2610.x * cbModelParam._m0[1u].z;
        }
        _1789 = frontier_phi_22_46_ladder_2;
        _1791 = frontier_phi_22_46_ladder_1;
        _1793 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1773 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_799, _800, _801), _1698);
        _1789 = _1773.x * cbModelParam._m0[1u].z;
        _1791 = _1773.y * cbModelParam._m0[1u].z;
        _1793 = _1773.z * cbModelParam._m0[1u].z;
    }
    float _1805 = ((((1.0 - _820) * ((_807 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_820 * _807)) * _791;
    float _1806 = _1805 * ((cbModelParam._m0[1u].w * (_1789 - _1689)) + _1689);
    float _1807 = _1805 * ((cbModelParam._m0[1u].w * (_1791 - _1691)) + _1691);
    float _1808 = _1805 * ((cbModelParam._m0[1u].w * (_1793 - _1693)) + _1693);
    float _1811 = fma(_1808, cbSceneParam._m0[89u].z, fma(_1807, cbSceneParam._m0[89u].y, _1806 * cbSceneParam._m0[89u].x));
    float _1814 = fma(_1808, cbSceneParam._m0[90u].z, fma(_1807, cbSceneParam._m0[90u].y, _1806 * cbSceneParam._m0[90u].x));
    float _1817 = fma(_1808, cbSceneParam._m0[91u].z, fma(_1807, cbSceneParam._m0[91u].y, _1806 * cbSceneParam._m0[91u].x));
    vec4 _1825 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_728, _729));
    float _1827 = _1825.w;
    float _1839 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1827);
    float _1840 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1827);
    float _1841 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1827);
    uvec4 _1845 = floatBitsToUint(cbInstanceData._m0[_243 + 5u]);
    uint _1847 = _1845.x * 14u;
    uint _1848 = _1847 + 13u;
    float _1855 = _791 + (-1.0);
    float _1860 = (cbLight._m0[_1848].x * _1855) + 1.0;
    float _1861 = (cbLight._m0[_1848].y * _1855) + 1.0;
    float _1862 = (cbLight._m0[_1848].z * _1855) + 1.0;
    float _1863 = (cbLight._m0[_1848].w * _1855) + 1.0;
    uint _1864 = _1847 + 5u;
    float _1870 = isnan(1.0) ? _1861 : (isnan(_1861) ? 1.0 : min(_1861, 1.0));
    uint _1874 = _1847 + 4u;
    float _1883 = isnan(1.0) ? _1860 : (isnan(_1860) ? 1.0 : min(_1860, 1.0));
    uint _1887 = _1847 | 1u;
    float _1898 = dot(vec3(cbLight._m0[_1847].xyz), vec3(_642, _643, _644));
    float _1901 = dot(vec3(cbLight._m0[_1887].xyz), vec3(_642, _643, _644));
    float _4006 = isnan(0.0) ? _1898 : (isnan(_1898) ? 0.0 : max(_1898, 0.0));
    float _4017 = isnan(0.0) ? _1901 : (isnan(_1901) ? 0.0 : max(_1901, 0.0));
    float _1906 = (isnan(1.0) ? _4006 : (isnan(_4006) ? 1.0 : min(_4006, 1.0))) * 0.3183098733425140380859375;
    float _1908 = (isnan(1.0) ? _4017 : (isnan(_4017) ? 1.0 : min(_4017, 1.0))) * 0.3183098733425140380859375;
    float _1915 = ((cbLight._m0[_1864].x * _1870) * _1908) + (((cbLight._m0[_1874].x * _1839) * _1883) * _1906);
    float _1916 = ((_1870 * cbLight._m0[_1864].y) * _1908) + (((cbLight._m0[_1874].y * _1840) * _1883) * _1906);
    float _1917 = ((_1870 * cbLight._m0[_1864].z) * _1908) + (((cbLight._m0[_1874].z * _1841) * _1883) * _1906);
    uvec4 _1921 = floatBitsToUint(cbLight._m0[_1847 + 12u]);
    bool _1923 = _1921.x == 0u;
    float _1934;
    float _1936;
    float _1938;
    if (_1923)
    {
        _1934 = _1915;
        _1936 = _1916;
        _1938 = _1917;
    }
    else
    {
        uint _1942 = _1847 + 6u;
        float _1958 = (dot(vec3(cbLight._m0[_1847 + 2u].xyz), vec3(_642, _643, _644)) * 0.5) + 0.5;
        float _1959 = _1958 * _1958;
        float _4028 = isnan(0.0) ? _1959 : (isnan(_1959) ? 0.0 : max(_1959, 0.0));
        float _1960 = isnan(1.0) ? _4028 : (isnan(_4028) ? 1.0 : min(_4028, 1.0));
        float _1961 = isnan(1.0) ? _1862 : (isnan(_1862) ? 1.0 : min(_1862, 1.0));
        _1934 = (((cbLight._m0[_1942].x * 0.3183098733425140380859375) * _1960) * _1961) + _1915;
        _1936 = (((cbLight._m0[_1942].y * 0.3183098733425140380859375) * _1960) * _1961) + _1916;
        _1938 = (((cbLight._m0[_1942].z * 0.3183098733425140380859375) * _1960) * _1961) + _1917;
    }
    bool _1941 = _1921.y == 0u;
    float _1979;
    float _1981;
    float _1983;
    if (_1941)
    {
        _1979 = _1934;
        _1981 = _1936;
        _1983 = _1938;
    }
    else
    {
        uint _2141 = _1847 + 7u;
        float _2157 = (dot(vec3(cbLight._m0[_1847 + 3u].xyz), vec3(_642, _643, _644)) * 0.5) + 0.5;
        float _2158 = _2157 * _2157;
        float _4044 = isnan(0.0) ? _2158 : (isnan(_2158) ? 0.0 : max(_2158, 0.0));
        float _2159 = isnan(1.0) ? _4044 : (isnan(_4044) ? 1.0 : min(_4044, 1.0));
        float _2160 = isnan(1.0) ? _1863 : (isnan(_1863) ? 1.0 : min(_1863, 1.0));
        _1979 = (((cbLight._m0[_2141].x * 0.3183098733425140380859375) * _2159) * _2160) + _1934;
        _1981 = (((cbLight._m0[_2141].y * 0.3183098733425140380859375) * _2159) * _2160) + _1936;
        _1983 = (((cbLight._m0[_2141].z * 0.3183098733425140380859375) * _2159) * _2160) + _1938;
    }
    uint _1986 = _1847 + 8u;
    float _1999 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1847].w)) * _645) * 0.949999988079071044921875);
    float _2000 = _1999 * _1999;
    float _2001 = cbLight._m0[_1847].x + _720;
    float _2002 = cbLight._m0[_1847].y + _721;
    float _2003 = cbLight._m0[_1847].z + _722;
    float _2007 = inversesqrt(dot(vec3(_2001, _2002, _2003), vec3(_2001, _2002, _2003)));
    float _2008 = _2007 * _2001;
    float _2009 = _2007 * _2002;
    float _2010 = _2007 * _2003;
    float _2011 = dot(vec3(_642, _643, _644), vec3(cbLight._m0[_1847].xyz));
    float _4060 = isnan(0.0) ? _2011 : (isnan(_2011) ? 0.0 : max(_2011, 0.0));
    float _2014 = isnan(1.0) ? _4060 : (isnan(_4060) ? 1.0 : min(_4060, 1.0));
    float _4071 = isnan(0.0) ? _792 : (isnan(_792) ? 0.0 : max(_792, 0.0));
    float _2015 = isnan(1.0) ? _4071 : (isnan(_4071) ? 1.0 : min(_4071, 1.0));
    float _2016 = dot(vec3(_642, _643, _644), vec3(_2008, _2009, _2010));
    float _4082 = isnan(0.0) ? _2016 : (isnan(_2016) ? 0.0 : max(_2016, 0.0));
    float _2019 = isnan(1.0) ? _4082 : (isnan(_4082) ? 1.0 : min(_4082, 1.0));
    float _2020 = dot(vec3(cbLight._m0[_1847].xyz), vec3(_2008, _2009, _2010));
    float _4093 = isnan(0.0) ? _2020 : (isnan(_2020) ? 0.0 : max(_2020, 0.0));
    float _2024 = _2000 * _2000;
    float _2028 = ((_2019 * _2019) * (_2024 + (-1.0))) + 1.0;
    float _2039 = (exp2(log2(1.0 - (isnan(1.0) ? _4093 : (isnan(_4093) ? 1.0 : min(_4093, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2040 = 1.0 - _2000;
    float _2051 = (0.5 / (((_2015 * ((_2014 * _2040) + _2000)) + 9.9999999392252902907785028219223e-09) + (((_2015 * _2040) + _2000) * _2014))) * _2014;
    float _4104 = isnan(0.0) ? _2051 : (isnan(_2051) ? 0.0 : max(_2051, 0.0));
    float _2053 = (isnan(1.0) ? _4104 : (isnan(_4104) ? 1.0 : min(_4104, 1.0))) * (_2024 / ((_2028 * _2028) * 3.141590118408203125));
    uint _2067 = _1847 + 9u;
    float _2078 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1887].w)) * _645) * 0.949999988079071044921875);
    float _2079 = _2078 * _2078;
    float _2080 = cbLight._m0[_1887].x + _720;
    float _2081 = cbLight._m0[_1887].y + _721;
    float _2082 = cbLight._m0[_1887].z + _722;
    float _2086 = inversesqrt(dot(vec3(_2080, _2081, _2082), vec3(_2080, _2081, _2082)));
    float _2087 = _2086 * _2080;
    float _2088 = _2086 * _2081;
    float _2089 = _2086 * _2082;
    float _2090 = dot(vec3(_642, _643, _644), vec3(cbLight._m0[_1887].xyz));
    float _4115 = isnan(0.0) ? _2090 : (isnan(_2090) ? 0.0 : max(_2090, 0.0));
    float _2093 = isnan(1.0) ? _4115 : (isnan(_4115) ? 1.0 : min(_4115, 1.0));
    float _2094 = dot(vec3(_642, _643, _644), vec3(_2087, _2088, _2089));
    float _4126 = isnan(0.0) ? _2094 : (isnan(_2094) ? 0.0 : max(_2094, 0.0));
    float _2097 = isnan(1.0) ? _4126 : (isnan(_4126) ? 1.0 : min(_4126, 1.0));
    float _2098 = dot(vec3(cbLight._m0[_1887].xyz), vec3(_2087, _2088, _2089));
    float _4137 = isnan(0.0) ? _2098 : (isnan(_2098) ? 0.0 : max(_2098, 0.0));
    float _2102 = _2079 * _2079;
    float _2106 = ((_2097 * _2097) * (_2102 + (-1.0))) + 1.0;
    float _2115 = (exp2(log2(1.0 - (isnan(1.0) ? _4137 : (isnan(_4137) ? 1.0 : min(_4137, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2116 = 1.0 - _2079;
    float _2126 = (0.5 / (((_2015 * ((_2093 * _2116) + _2079)) + 9.9999999392252902907785028219223e-09) + (((_2015 * _2116) + _2079) * _2093))) * _2093;
    float _4148 = isnan(0.0) ? _2126 : (isnan(_2126) ? 0.0 : max(_2126, 0.0));
    float _2128 = (isnan(1.0) ? _4148 : (isnan(_4148) ? 1.0 : min(_4148, 1.0))) * (_2102 / ((_2106 * _2106) * 3.141590118408203125));
    float _2138 = (((_2115 * cbLight._m0[_2067].x) * _2128) * _1870) + ((((cbLight._m0[_1986].x * _1839) * _2039) * _2053) * _1883);
    float _2139 = (((_2115 * cbLight._m0[_2067].y) * _2128) * _1870) + ((((cbLight._m0[_1986].y * _1840) * _2039) * _2053) * _1883);
    float _2140 = (((_2115 * cbLight._m0[_2067].z) * _2128) * _1870) + ((((cbLight._m0[_1986].z * _1841) * _2039) * _2053) * _1883);
    float _2202;
    float _2204;
    float _2206;
    if (_1923)
    {
        _2202 = _2138;
        _2204 = _2139;
        _2206 = _2140;
    }
    else
    {
        uint _2208 = _1847 + 2u;
        uint _2212 = _1847 + 10u;
        float _2226 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2208].w)) * _645) * 0.949999988079071044921875);
        float _2227 = _2226 * _2226;
        float _2228 = cbLight._m0[_2208].x + _720;
        float _2229 = cbLight._m0[_2208].y + _721;
        float _2230 = cbLight._m0[_2208].z + _722;
        float _2234 = inversesqrt(dot(vec3(_2228, _2229, _2230), vec3(_2228, _2229, _2230)));
        float _2235 = _2234 * _2228;
        float _2236 = _2234 * _2229;
        float _2237 = _2234 * _2230;
        float _2238 = dot(vec3(_642, _643, _644), vec3(cbLight._m0[_2208].xyz));
        float _4159 = isnan(0.0) ? _2238 : (isnan(_2238) ? 0.0 : max(_2238, 0.0));
        float _2241 = isnan(1.0) ? _4159 : (isnan(_4159) ? 1.0 : min(_4159, 1.0));
        float _2242 = dot(vec3(_642, _643, _644), vec3(_2235, _2236, _2237));
        float _4170 = isnan(0.0) ? _2242 : (isnan(_2242) ? 0.0 : max(_2242, 0.0));
        float _2245 = isnan(1.0) ? _4170 : (isnan(_4170) ? 1.0 : min(_4170, 1.0));
        float _2246 = dot(vec3(cbLight._m0[_2208].xyz), vec3(_2235, _2236, _2237));
        float _4181 = isnan(0.0) ? _2246 : (isnan(_2246) ? 0.0 : max(_2246, 0.0));
        float _2250 = _2227 * _2227;
        float _2254 = ((_2245 * _2245) * (_2250 + (-1.0))) + 1.0;
        float _2263 = (exp2(log2(1.0 - (isnan(1.0) ? _4181 : (isnan(_4181) ? 1.0 : min(_4181, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2264 = 1.0 - _2227;
        float _2274 = (0.5 / (((_2015 * ((_2241 * _2264) + _2227)) + 9.9999999392252902907785028219223e-09) + (((_2015 * _2264) + _2227) * _2241))) * _2241;
        float _4192 = isnan(0.0) ? _2274 : (isnan(_2274) ? 0.0 : max(_2274, 0.0));
        float _2276 = (isnan(1.0) ? _4192 : (isnan(_4192) ? 1.0 : min(_4192, 1.0))) * (_2250 / ((_2254 * _2254) * 3.141590118408203125));
        float _2277 = isnan(1.0) ? _1862 : (isnan(_1862) ? 1.0 : min(_1862, 1.0));
        _2202 = (((_2263 * cbLight._m0[_2212].x) * _2276) * _2277) + _2138;
        _2204 = (((_2263 * cbLight._m0[_2212].y) * _2276) * _2277) + _2139;
        _2206 = (((_2263 * cbLight._m0[_2212].z) * _2276) * _2277) + _2140;
    }
    float _2312;
    float _2314;
    float _2316;
    if (_1941)
    {
        _2312 = _2202;
        _2314 = _2204;
        _2316 = _2206;
    }
    else
    {
        uint _2323 = _1847 + 3u;
        uint _2327 = _1847 + 11u;
        float _2341 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2323].w)) * _645) * 0.949999988079071044921875);
        float _2342 = _2341 * _2341;
        float _2343 = cbLight._m0[_2323].x + _720;
        float _2344 = cbLight._m0[_2323].y + _721;
        float _2345 = cbLight._m0[_2323].z + _722;
        float _2349 = inversesqrt(dot(vec3(_2343, _2344, _2345), vec3(_2343, _2344, _2345)));
        float _2350 = _2349 * _2343;
        float _2351 = _2349 * _2344;
        float _2352 = _2349 * _2345;
        float _2353 = dot(vec3(_642, _643, _644), vec3(cbLight._m0[_2323].xyz));
        float _4208 = isnan(0.0) ? _2353 : (isnan(_2353) ? 0.0 : max(_2353, 0.0));
        float _2356 = isnan(1.0) ? _4208 : (isnan(_4208) ? 1.0 : min(_4208, 1.0));
        float _2357 = dot(vec3(_642, _643, _644), vec3(_2350, _2351, _2352));
        float _4219 = isnan(0.0) ? _2357 : (isnan(_2357) ? 0.0 : max(_2357, 0.0));
        float _2360 = isnan(1.0) ? _4219 : (isnan(_4219) ? 1.0 : min(_4219, 1.0));
        float _2361 = dot(vec3(cbLight._m0[_2323].xyz), vec3(_2350, _2351, _2352));
        float _4230 = isnan(0.0) ? _2361 : (isnan(_2361) ? 0.0 : max(_2361, 0.0));
        float _2365 = _2342 * _2342;
        float _2369 = ((_2360 * _2360) * (_2365 + (-1.0))) + 1.0;
        float _2378 = (exp2(log2(1.0 - (isnan(1.0) ? _4230 : (isnan(_4230) ? 1.0 : min(_4230, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2379 = 1.0 - _2342;
        float _2389 = (0.5 / (((_2015 * ((_2356 * _2379) + _2342)) + 9.9999999392252902907785028219223e-09) + (((_2015 * _2379) + _2342) * _2356))) * _2356;
        float _4241 = isnan(0.0) ? _2389 : (isnan(_2389) ? 0.0 : max(_2389, 0.0));
        float _2391 = (isnan(1.0) ? _4241 : (isnan(_4241) ? 1.0 : min(_4241, 1.0))) * (_2365 / ((_2369 * _2369) * 3.141590118408203125));
        float _2392 = isnan(1.0) ? _1863 : (isnan(_1863) ? 1.0 : min(_1863, 1.0));
        _2312 = (((_2378 * cbLight._m0[_2327].x) * _2391) * _2392) + _2202;
        _2314 = (((_2378 * cbLight._m0[_2327].y) * _2391) * _2392) + _2204;
        _2316 = (((_2378 * cbLight._m0[_2327].z) * _2391) * _2392) + _2206;
    }
    float _2527;
    float _2529;
    float _2531;
    float _2533;
    float _2535;
    float _2537;
    if (_1845.y == 0u)
    {
        float _2467 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2468 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2467;
        float _2469 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2467;
        float _2470 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2467;
        uvec4 _2482 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2483 = _2482.x;
        uint _2494 = uint((float(_2482.y) * floor(float(uint(cbSceneParam._m0[85u].y * _729) / _2483))) + floor(float(uint(cbSceneParam._m0[85u].x * _728) / _2483)));
        float _2504 = (log2(_2470 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2505 = isnan(0.0) ? _2504 : (isnan(_2504) ? 0.0 : max(_2504, 0.0));
        uint _2508 = uint(isnan(14.0) ? _2505 : (isnan(_2505) ? 14.0 : min(_2505, 14.0)));
        uvec4 _2513 = texelFetch(g_lightClusterGridBuffer, int(((_2508 << 2u) + (_2494 << 6u)) >> 2u));
        uint _2514 = _2513.x;
        uint _2515 = _2482.z;
        float _2615;
        float _2617;
        float _2619;
        float _2621;
        float _2623;
        float _2625;
        if (((((1u << ((_2515 >> 4u) & 15u)) + 4294967295u) & _2514) == 0u) || ((_2515 & 240u) == 0u))
        {
            _2615 = 0.0;
            _2617 = 0.0;
            _2619 = 0.0;
            _2621 = 0.0;
            _2623 = 0.0;
            _2625 = 0.0;
        }
        else
        {
            float _2616;
            float _2618;
            float _2620;
            float _2622;
            float _2624;
            float _2626;
            float _2760 = 0.0;
            float _2761 = 0.0;
            float _2762 = 0.0;
            float _2763 = 0.0;
            float _2764 = 0.0;
            float _2765 = 0.0;
            uint _2766 = 0u;
            uint _2775;
            bool _2776;
            for (;;)
            {
                _2775 = texelFetch(g_lightClassification, int((((_2508 << 5u) + (_2494 << 9u)) + (_2766 << 2u)) >> 2u)).x;
                _2776 = _2775 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2776)
                {
                    frontier_phi_61_pred = _2760;
                    frontier_phi_61_pred_1 = _2765;
                    frontier_phi_61_pred_2 = _2764;
                    frontier_phi_61_pred_3 = _2763;
                    frontier_phi_61_pred_4 = _2762;
                    frontier_phi_61_pred_5 = _2761;
                }
                else
                {
                    float _2884;
                    float _2885;
                    float _2886;
                    float _2887;
                    float _2888;
                    float _2889;
                    uint _2890;
                    _2884 = _2760;
                    _2885 = _2761;
                    _2886 = _2762;
                    _2887 = _2763;
                    _2888 = _2764;
                    _2889 = _2765;
                    _2890 = _2775;
                    float _2816;
                    float _2817;
                    float _2818;
                    float _2819;
                    float _2820;
                    float _2821;
                    for (;;)
                    {
                        uint _2894 = uint(findLSB(_2890)) + (_2766 << 5u);
                        uint _2891 = (_2890 + 4294967295u) & _2890;
                        uint _2896 = _2894 * 48u;
                        vec4 _2910 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2896)).x, texelFetch(g_PointLightRenderingBuffer, int(_2896 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2896 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2896 + 3u)).x));
                        uint _2916 = (_2894 * 48u) + 4u;
                        vec4 _2929 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2916)).x, texelFetch(g_PointLightRenderingBuffer, int(_2916 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2916 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2916 + 3u)).x));
                        uint _2935 = (_2894 * 48u) + 8u;
                        vec3 _2946 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2935)).x, texelFetch(g_PointLightRenderingBuffer, int(_2935 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2935 + 2u)).x));
                        float _2950 = _2910.x - _2468;
                        float _2951 = _2910.y - _2469;
                        float _2952 = _2910.z - _2470;
                        float _2953 = dot(vec3(_2950, _2951, _2952), vec3(_2950, _2951, _2952));
                        float _2956 = inversesqrt(_2953);
                        float _2957 = _2956 * _2950;
                        float _2958 = _2956 * _2951;
                        float _2959 = _2956 * _2952;
                        float _2960 = dot(vec3(_747, _750, _753), vec3(_2957, _2958, _2959));
                        float _2965 = 1.0 - (_2953 * _2910.w);
                        float _4267 = isnan(0.0) ? _2965 : (isnan(_2965) ? 0.0 : max(_2965, 0.0));
                        float _2966 = isnan(1.0) ? _4267 : (isnan(_4267) ? 1.0 : min(_4267, 1.0));
                        float _2967 = sqrt(_2953) * _2929.w;
                        float _2970 = 1.39999997615814208984375 / (_2967 + 1.39999997615814208984375);
                        float _2971 = _2970 * _2970;
                        float _2974 = ((1.0 - _2971) * _2960) + _2971;
                        float _2977 = _2967 * _2967;
                        float _2981 = ((isnan(0.0) ? _2974 : (isnan(_2974) ? 0.0 : max(_2974, 0.0))) * _2966) / ((_2977 * 0.699999988079071044921875) + 1.0);
                        float _2985 = (-0.0) - _2468;
                        float _2986 = (-0.0) - _2469;
                        float _2987 = (-0.0) - _2470;
                        float _2991 = inversesqrt(dot(vec3(_2985, _2986, _2987), vec3(_2985, _2986, _2987)));
                        float _2992 = _2991 * _2985;
                        float _2993 = _2991 * _2986;
                        float _2994 = _2991 * _2987;
                        float _3002 = exp2(log2(1.0 / ((_2977 * 3.5) + 5.0)) * 0.25);
                        float _3003 = 1.0 - _807;
                        float _3010 = sqrt(1.0 - ((1.0 - (_3003 * _3003)) * (1.0 - (_3002 * _3002))));
                        float _3011 = _3010 * _3010;
                        float _3012 = _3011 * _3011;
                        float _3013 = _2992 + _2957;
                        float _3014 = _2993 + _2958;
                        float _3015 = _2994 + _2959;
                        float _3019 = inversesqrt(dot(vec3(_3013, _3014, _3015), vec3(_3013, _3014, _3015)));
                        float _3023 = dot(vec3(_747, _750, _753), vec3(_2992, _2993, _2994));
                        float _4283 = isnan(0.0) ? _3023 : (isnan(_3023) ? 0.0 : max(_3023, 0.0));
                        float _3026 = isnan(1.0) ? _4283 : (isnan(_4283) ? 1.0 : min(_4283, 1.0));
                        float _3027 = dot(vec3(_747, _750, _753), vec3(_3019 * _3013, _3019 * _3014, _3019 * _3015));
                        float _4294 = isnan(0.0) ? _3027 : (isnan(_3027) ? 0.0 : max(_3027, 0.0));
                        float _3030 = isnan(1.0) ? _4294 : (isnan(_4294) ? 1.0 : min(_4294, 1.0));
                        float _3034 = ((_3030 * _3030) * (_3012 + (-1.0))) + 1.0;
                        float _3035 = _2970 * _3011;
                        float _3036 = _3035 * _3035;
                        float _3039 = ((1.0 - _3036) * _2960) + _3036;
                        float _4305 = isnan(0.0) ? _3039 : (isnan(_3039) ? 0.0 : max(_3039, 0.0));
                        float _3040 = isnan(1.0) ? _4305 : (isnan(_4305) ? 1.0 : min(_4305, 1.0));
                        float _3041 = 1.0 - _3011;
                        float _3051 = (0.5 / (((_3040 * ((_3026 * _3041) + _3011)) + 9.9999999392252902907785028219223e-09) + (((_3040 * _3041) + _3011) * _3026))) * _3040;
                        float _4316 = isnan(0.0) ? _3051 : (isnan(_3051) ? 0.0 : max(_3051, 0.0));
                        float _3062 = (((_3012 * 3.1415927410125732421875) * (isnan(1.0) ? _4316 : (isnan(_4316) ? 1.0 : min(_4316, 1.0)))) / ((_3034 * _3034) * ((_2977 * 2.1991131305694580078125) + 3.141590118408203125))) * _2966;
                        _2819 = (_2981 * _2929.x) + _2887;
                        _2820 = (_2981 * _2929.y) + _2888;
                        _2821 = (_2981 * _2929.z) + _2889;
                        _2816 = (_3062 * _2946.x) + _2884;
                        _2817 = (_3062 * _2946.y) + _2885;
                        _2818 = (_3062 * _2946.z) + _2886;
                        if (_2891 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2884 = _2816;
                            _2885 = _2817;
                            _2886 = _2818;
                            _2887 = _2819;
                            _2888 = _2820;
                            _2889 = _2821;
                            _2890 = _2891;
                        }
                    }
                    frontier_phi_61_pred = _2816;
                    frontier_phi_61_pred_1 = _2821;
                    frontier_phi_61_pred_2 = _2820;
                    frontier_phi_61_pred_3 = _2819;
                    frontier_phi_61_pred_4 = _2818;
                    frontier_phi_61_pred_5 = _2817;
                }
                _2616 = frontier_phi_61_pred;
                _2626 = frontier_phi_61_pred_1;
                _2624 = frontier_phi_61_pred_2;
                _2622 = frontier_phi_61_pred_3;
                _2620 = frontier_phi_61_pred_4;
                _2618 = frontier_phi_61_pred_5;
                uint _2767 = _2766 + 1u;
                if (_2767 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2760 = _2616;
                    _2761 = _2618;
                    _2762 = _2620;
                    _2763 = _2622;
                    _2764 = _2624;
                    _2765 = _2626;
                    _2766 = _2767;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2615 = _2616;
            _2617 = _2618;
            _2619 = _2620;
            _2621 = _2622;
            _2623 = _2624;
            _2625 = _2626;
        }
        uvec4 _2629 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2630 = _2629.z;
        uint _2632 = (_2630 >> 8u) & 15u;
        float _2728;
        float _2730;
        float _2732;
        float _2734;
        float _2736;
        float _2738;
        if (((4294967295u << _2632) & _2514) == 0u)
        {
            _2728 = _2615;
            _2730 = _2617;
            _2732 = _2619;
            _2734 = _2621;
            _2736 = _2623;
            _2738 = _2625;
        }
        else
        {
            float _2753 = inversesqrt(dot(vec3(_2468, _2469, _2470), vec3(_2468, _2469, _2470)));
            float _2754 = _2753 * _2468;
            float _2755 = _2753 * _2469;
            float _2756 = _2753 * _2470;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2632 < ((_2630 >> 12u) & 15u))
            {
                float _2729;
                float _2731;
                float _2733;
                float _2735;
                float _2737;
                float _2739;
                float _2867 = _2615;
                float _2868 = _2617;
                float _2869 = _2619;
                float _2870 = _2621;
                float _2871 = _2623;
                float _2872 = _2625;
                uint _2873 = _2632;
                uint _2882;
                bool _2883;
                for (;;)
                {
                    _2882 = texelFetch(g_lightClassification, int((((_2508 << 5u) + (_2494 << 9u)) + (_2873 << 2u)) >> 2u)).x;
                    _2883 = _2882 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_2883)
                    {
                        frontier_phi_67_pred = _2870;
                        frontier_phi_67_pred_1 = _2871;
                        frontier_phi_67_pred_2 = _2872;
                        frontier_phi_67_pred_3 = _2869;
                        frontier_phi_67_pred_4 = _2868;
                        frontier_phi_67_pred_5 = _2867;
                    }
                    else
                    {
                        float _3067;
                        float _3068;
                        float _3069;
                        float _3070;
                        float _3071;
                        float _3072;
                        float _3361;
                        float _3362;
                        float _3363;
                        float _3364;
                        float _3365;
                        float _3366;
                        float _3080 = _2867;
                        float _3081 = _2868;
                        float _3082 = _2869;
                        float _3083 = _2870;
                        float _3084 = _2871;
                        float _3085 = _2872;
                        uint _3086 = _2882;
                        uint _3087;
                        vec4 _3112;
                        float _3113;
                        vec4 _3128;
                        vec3 _3140;
                        vec4 _3155;
                        vec4 _3171;
                        float _3217;
                        bool _3218;
                        for (;;)
                        {
                            uint _3097 = ((_2873 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3086));
                            _3087 = (_3086 + 4294967295u) & _3086;
                            uint _3099 = _3097 * 40u;
                            _3112 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3099)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3099 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3099 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3099 + 3u)).x));
                            _3113 = _3112.w;
                            uint _3115 = (_3097 * 40u) + 4u;
                            _3128 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3115)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3115 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3115 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3115 + 3u)).x));
                            uint _3130 = (_3097 * 40u) + 8u;
                            _3140 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3130)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3130 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3130 + 2u)).x));
                            uint _3142 = (_3097 * 40u) + 16u;
                            _3155 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3142)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3142 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3142 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3142 + 3u)).x));
                            uint _3158 = (_3097 * 40u) + 20u;
                            _3171 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3158)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3158 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3158 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3158 + 3u)).x));
                            uint _3173 = (_3097 * 40u) + 24u;
                            vec4 _3186 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3173)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3173 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3173 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3173 + 3u)).x));
                            uint _3192 = (_3097 * 40u) + 28u;
                            vec4 _3205 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3192)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3192 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3192 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3192 + 3u)).x));
                            _3217 = fma(_2470, _3205.z, fma(_2469, _3205.y, _3205.x * _2468)) + _3205.w;
                            _3218 = !((fma(_2470, _3186.z, fma(_2469, _3186.y, _3186.x * _2468)) + _3186.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3218)
                            {
                                float _3245 = _3112.x - _2468;
                                float _3246 = _3112.y - _2469;
                                float _3247 = _3112.z - _2470;
                                float _3248 = dot(vec3(_3245, _3246, _3247), vec3(_3245, _3246, _3247));
                                float _3251 = inversesqrt(_3248);
                                float _3252 = _3251 * _3245;
                                float _3253 = _3251 * _3246;
                                float _3254 = _3251 * _3247;
                                float _3258 = 1.0 - (_3248 / (_3113 * _3113));
                                float _4327 = isnan(0.0) ? _3258 : (isnan(_3258) ? 0.0 : max(_3258, 0.0));
                                float _3259 = isnan(1.0) ? _4327 : (isnan(_4327) ? 1.0 : min(_4327, 1.0));
                                float _3263 = sqrt(_3248) * _3128.w;
                                float _3265 = 1.39999997615814208984375 / (_3263 + 1.39999997615814208984375);
                                float _3266 = _3265 * _3265;
                                float _3269 = ((1.0 - _3266) * dot(vec3(_3252, _3253, _3254), vec3(_747, _750, _753))) + _3266;
                                float _3272 = _3263 * _3263;
                                float _3276 = (fma(_2470, _3155.z, fma(_2469, _3155.y, _3155.x * _2468)) + _3155.w) / _3217;
                                float _3277 = (fma(_2470, _3171.z, fma(_2469, _3171.y, _3171.x * _2468)) + _3171.w) / _3217;
                                float _3281 = 1.0 - dot(vec2(_3276, _3277), vec2(_3276, _3277));
                                float _4343 = isnan(0.0) ? _3281 : (isnan(_3281) ? 0.0 : max(_3281, 0.0));
                                float _3282 = isnan(1.0) ? _4343 : (isnan(_4343) ? 1.0 : min(_4343, 1.0));
                                float _3283 = _3282 * (((isnan(0.0) ? _3269 : (isnan(_3269) ? 0.0 : max(_3269, 0.0))) * _3259) / ((_3272 * 0.699999988079071044921875) + 1.0));
                                float _3295 = exp2(log2(1.0 / ((_3272 * 3.5) + 5.0)) * 0.25);
                                float _3296 = 1.0 - _807;
                                float _3303 = sqrt(1.0 - ((1.0 - (_3296 * _3296)) * (1.0 - (_3295 * _3295))));
                                float _3304 = _3303 * _3303;
                                float _3305 = _3304 * _3304;
                                float _3306 = _3252 - _2754;
                                float _3307 = _3253 - _2755;
                                float _3308 = _3254 - _2756;
                                float _3312 = inversesqrt(dot(vec3(_3306, _3307, _3308), vec3(_3306, _3307, _3308)));
                                float _3316 = dot(vec3(_747, _750, _753), vec3((-0.0) - _2754, (-0.0) - _2755, (-0.0) - _2756));
                                float _4354 = isnan(0.0) ? _3316 : (isnan(_3316) ? 0.0 : max(_3316, 0.0));
                                float _3319 = isnan(1.0) ? _4354 : (isnan(_4354) ? 1.0 : min(_4354, 1.0));
                                float _3320 = dot(vec3(_747, _750, _753), vec3(_3312 * _3306, _3312 * _3307, _3312 * _3308));
                                float _4365 = isnan(0.0) ? _3320 : (isnan(_3320) ? 0.0 : max(_3320, 0.0));
                                float _3323 = isnan(1.0) ? _4365 : (isnan(_4365) ? 1.0 : min(_4365, 1.0));
                                float _3327 = ((_3323 * _3323) * (_3305 + (-1.0))) + 1.0;
                                float _3328 = _3265 * _3304;
                                float _3329 = _3328 * _3328;
                                float _3335 = ((1.0 - _3329) * dot(vec3(_747, _750, _753), vec3(_3252, _3253, _3254))) + _3329;
                                float _4376 = isnan(0.0) ? _3335 : (isnan(_3335) ? 0.0 : max(_3335, 0.0));
                                float _3336 = isnan(1.0) ? _4376 : (isnan(_4376) ? 1.0 : min(_4376, 1.0));
                                float _3337 = 1.0 - _3304;
                                float _3347 = (0.5 / (((_3336 * ((_3319 * _3337) + _3304)) + 9.9999999392252902907785028219223e-09) + (((_3336 * _3337) + _3304) * _3319))) * _3336;
                                float _4387 = isnan(0.0) ? _3347 : (isnan(_3347) ? 0.0 : max(_3347, 0.0));
                                float _3357 = (_3282 * _3259) * (((_3305 * 3.1415927410125732421875) * (isnan(1.0) ? _4387 : (isnan(_4387) ? 1.0 : min(_4387, 1.0)))) / ((_3327 * _3327) * ((_3272 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3357 * _3140.x;
                                frontier_phi_73_pred_1 = _3357 * _3140.y;
                                frontier_phi_73_pred_2 = _3283 * _3128.z;
                                frontier_phi_73_pred_3 = _3283 * _3128.y;
                                frontier_phi_73_pred_4 = _3283 * _3128.x;
                                frontier_phi_73_pred_5 = _3357 * _3140.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3361 = frontier_phi_73_pred;
                            _3362 = frontier_phi_73_pred_1;
                            _3366 = frontier_phi_73_pred_2;
                            _3365 = frontier_phi_73_pred_3;
                            _3364 = frontier_phi_73_pred_4;
                            _3363 = frontier_phi_73_pred_5;
                            _3070 = _3364 + _3083;
                            _3071 = _3365 + _3084;
                            _3072 = _3366 + _3085;
                            _3067 = _3361 + _3080;
                            _3068 = _3362 + _3081;
                            _3069 = _3363 + _3082;
                            if (_3087 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3080 = _3067;
                                _3081 = _3068;
                                _3082 = _3069;
                                _3083 = _3070;
                                _3084 = _3071;
                                _3085 = _3072;
                                _3086 = _3087;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3070;
                        frontier_phi_67_pred_1 = _3071;
                        frontier_phi_67_pred_2 = _3072;
                        frontier_phi_67_pred_3 = _3069;
                        frontier_phi_67_pred_4 = _3068;
                        frontier_phi_67_pred_5 = _3067;
                    }
                    _2735 = frontier_phi_67_pred;
                    _2737 = frontier_phi_67_pred_1;
                    _2739 = frontier_phi_67_pred_2;
                    _2733 = frontier_phi_67_pred_3;
                    _2731 = frontier_phi_67_pred_4;
                    _2729 = frontier_phi_67_pred_5;
                    uint _2874 = _2873 + 1u;
                    if (_2874 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2867 = _2729;
                        _2868 = _2731;
                        _2869 = _2733;
                        _2870 = _2735;
                        _2871 = _2737;
                        _2872 = _2739;
                        _2873 = _2874;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2737;
                frontier_phi_55_56_ladder_1 = _2739;
                frontier_phi_55_56_ladder_2 = _2735;
                frontier_phi_55_56_ladder_3 = _2733;
                frontier_phi_55_56_ladder_4 = _2731;
                frontier_phi_55_56_ladder_5 = _2729;
            }
            else
            {
                frontier_phi_55_56_ladder = _2623;
                frontier_phi_55_56_ladder_1 = _2625;
                frontier_phi_55_56_ladder_2 = _2621;
                frontier_phi_55_56_ladder_3 = _2619;
                frontier_phi_55_56_ladder_4 = _2617;
                frontier_phi_55_56_ladder_5 = _2615;
            }
            _2728 = frontier_phi_55_56_ladder_5;
            _2730 = frontier_phi_55_56_ladder_4;
            _2732 = frontier_phi_55_56_ladder_3;
            _2734 = frontier_phi_55_56_ladder_2;
            _2736 = frontier_phi_55_56_ladder;
            _2738 = frontier_phi_55_56_ladder_1;
        }
        float _2743 = isnan(1.0) ? _791 : (isnan(_791) ? 1.0 : min(_791, 1.0));
        _2527 = (_2743 * _2734) + _1979;
        _2529 = (_2743 * _2736) + _1981;
        _2531 = (_2743 * _2738) + _1983;
        _2533 = ((_2728 * 0.039999999105930328369140625) * _2743) + _2312;
        _2535 = ((_2730 * 0.039999999105930328369140625) * _2743) + _2314;
        _2537 = ((_2732 * 0.039999999105930328369140625) * _2743) + _2316;
    }
    else
    {
        _2527 = _1979;
        _2529 = _1981;
        _2531 = _1983;
        _2533 = _2312;
        _2535 = _2314;
        _2537 = _2316;
    }
    float _4403 = isnan(0.0) ? _776 : (isnan(_776) ? 0.0 : max(_776, 0.0));
    float _4414 = isnan(0.0) ? _777 : (isnan(_777) ? 0.0 : max(_777, 0.0));
    float _4425 = isnan(0.0) ? _778 : (isnan(_778) ? 0.0 : max(_778, 0.0));
    uint _2557 = _243 + 6u;
    float _2565 = _728 / cbSceneParam._m0[86u].x;
    float _2566 = _729 / cbSceneParam._m0[86u].y;
    vec4 _2580 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2565, _2566, (log2((isnan(cbSceneParam._m0[77u].w) ? _663 : (isnan(_663) ? cbSceneParam._m0[77u].w : min(_663, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2582 = _2580.x;
    float _2583 = _2580.y;
    float _2584 = _2580.z;
    float _2585 = _2580.w;
    float _2678;
    float _2680;
    float _2682;
    float _2684;
    if (_663 > cbSceneParam._m0[78u].w)
    {
        float _2640 = isnan(_663) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _663 : min(cbSceneParam._m0[80u].w, _663));
        float _2641 = _2640 / _663;
        float _2652 = _2641 * _713;
        float _2653 = _714 * _2641;
        float _2654 = (-0.0) - _2653;
        float _2656 = _2641 * _715;
        float _2658 = (cbSceneParam._m0[77u].w * _2654) / _2640;
        float _2659 = _2658 + cbSceneParam._m0[79u].w;
        float _2660 = cbSceneParam._m0[79u].w - _2653;
        float _2666 = sqrt(((_2652 * _2652) + (_2653 * _2653)) + (_2656 * _2656));
        float _2669 = (1.0 - (cbSceneParam._m0[77u].w / _2640)) * _2666;
        float _2674 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2676 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2829;
        if (abs((_2654 - _2658) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2829 = ((((_2659 > 0.0) ? exp2(_2674 * _2659) : (2.0 - exp2(_2676 * _2659))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2669;
        }
        else
        {
            float _2789 = 1.0 / cbSceneParam._m0[80u].x;
            float _2790 = isnan(_2660) ? _2659 : (isnan(_2659) ? _2660 : max(_2659, _2660));
            float _2791 = isnan(_2660) ? _2659 : (isnan(_2659) ? _2660 : min(_2659, _2660));
            float _2800 = isnan(0.0) ? _2790 : (isnan(_2790) ? 0.0 : min(_2790, 0.0));
            float _2801 = isnan(0.0) ? _2791 : (isnan(_2791) ? 0.0 : min(_2791, 0.0));
            _2829 = ((abs(_2666 / _2654) * cbSceneParam._m0[80u].y) * ((((_2800 - _2801) * 2.0) - ((exp2(_2674 * (isnan(0.0) ? _2790 : (isnan(_2790) ? 0.0 : max(_2790, 0.0)))) - exp2(_2674 * (isnan(0.0) ? _2791 : (isnan(_2791) ? 0.0 : max(_2791, 0.0))))) * _2789)) - ((exp2(_2676 * _2800) - exp2(_2676 * _2801)) * _2789))) + (_2669 * cbSceneParam._m0[80u].z);
        }
        vec4 _2831 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2565, _2566, 1.0), 0.0);
        float _2840 = exp2((_2829 * (-1.44269502162933349609375)) * (1.0 - _2831.w));
        float _2841 = log2(_2840);
        float _2857 = log2(_2585);
        _2678 = (exp2(_2857 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2841 * cbSceneParam._m0[78u].x)) * _2831.x) / cbSceneParam._m0[78u].x)) + _2582;
        _2680 = (exp2(_2857 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2841 * cbSceneParam._m0[78u].y)) * _2831.y) / cbSceneParam._m0[78u].y)) + _2583;
        _2682 = (exp2(_2857 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2841 * cbSceneParam._m0[78u].z)) * _2831.z) / cbSceneParam._m0[78u].z)) + _2584;
        _2684 = _2840 * _2585;
    }
    else
    {
        _2678 = _2582;
        _2680 = _2583;
        _2682 = _2584;
        _2684 = _2585;
    }
    float _2696 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2697 = _2696 == 3.0;
    float _2698 = log2(_2684);
    float _2705 = exp2(_2698 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4403 : (isnan(_4403) ? 1.0 : min(_4403, 1.0))) * (_2527 + ((isnan(0.0) ? _1517 : (isnan(_1517) ? 0.0 : max(_1517, 0.0))) * _791))) + ((_2533 + ((isnan(0.0) ? _1811 : (isnan(_1811) ? 0.0 : max(_1811, 0.0))) * _1596)) * cbPerFrame._m0[3u].x));
    float _2706 = exp2(_2698 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4414 : (isnan(_4414) ? 1.0 : min(_4414, 1.0))) * (_2529 + ((isnan(0.0) ? _1520 : (isnan(_1520) ? 0.0 : max(_1520, 0.0))) * _791))) + ((_2535 + ((isnan(0.0) ? _1814 : (isnan(_1814) ? 0.0 : max(_1814, 0.0))) * _1596)) * cbPerFrame._m0[3u].x));
    float _2707 = exp2(_2698 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4425 : (isnan(_4425) ? 1.0 : min(_4425, 1.0))) * (_2531 + ((isnan(0.0) ? _1523 : (isnan(_1523) ? 0.0 : max(_1523, 0.0))) * _791))) + ((_2537 + ((isnan(0.0) ? _1817 : (isnan(_1817) ? 0.0 : max(_1817, 0.0))) * _1596)) * cbPerFrame._m0[3u].x));
    float _2716 = (_2696 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2716 * (_2697 ? _2705 : (_2705 + (cbSceneParam._m0[72u].w * _2678)));
    SV_Target.y = _2716 * (_2697 ? _2706 : (_2706 + (cbSceneParam._m0[72u].w * _2680)));
    SV_Target.z = _2716 * (_2697 ? _2707 : (_2707 + (cbSceneParam._m0[72u].w * _2682)));
    SV_Target.w = cbInstanceData._m0[_2557].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2557].w;
}


