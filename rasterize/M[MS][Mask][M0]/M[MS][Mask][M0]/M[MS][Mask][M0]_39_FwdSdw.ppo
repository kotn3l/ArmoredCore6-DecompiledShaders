#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_0;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 13) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_22;
layout(set = 0, binding = 14) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_29;
layout(set = 0, binding = 20) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_6;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1385;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _236 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _237 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _238 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _244 = inversesqrt(dot(vec3(_236, _237, _238), vec3(_236, _237, _238)));
    float _251 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _258 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _270 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _272 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _273 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3972 = isnan(0.0) ? _270 : (isnan(_270) ? 0.0 : max(_270, 0.0));
    float _3983 = isnan(0.0) ? _272 : (isnan(_272) ? 0.0 : max(_272, 0.0));
    float _3994 = isnan(0.0) ? _273 : (isnan(_273) ? 0.0 : max(_273, 0.0));
    uint _283 = uint(roundEven(NORMAL.w)) * 13u;
    uint _288 = _283 + 1u;
    uint _292 = _283 + 2u;
    float _301 = sqrt(((cbInstanceData._m0[_288].x * cbInstanceData._m0[_288].x) + (cbInstanceData._m0[_283].x * cbInstanceData._m0[_283].x)) + (cbInstanceData._m0[_292].x * cbInstanceData._m0[_292].x));
    float _302 = _301 * TEXCOORD.z;
    float _303 = _301 * TEXCOORD.w;
    vec4 _316 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _302) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _303) + cbTextureTilingScale._m0[13u].w));
    vec4 _339 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _365 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _370 = _365.x * cbMtdParam._m0[11u].x;
    float _371 = _365.y * cbMtdParam._m0[11u].y;
    float _372 = _365.z * cbMtdParam._m0[11u].z;
    vec4 _391 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _302) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _303) + cbTextureTilingScale._m0[5u].w));
    vec4 _442 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _444 = _442.x;
    float _456 = dot(vec4(_444, _442.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _473 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w)).x) * 2.0) - ((((_444 - _456) * cbMtdParam._m0[24u].z) + _456) * cbMtdParam._m0[23u].x))) + 1.0;
    float _4005 = isnan(0.0) ? _473 : (isnan(_473) ? 0.0 : max(_473, 0.0));
    float _474 = isnan(1.0) ? _4005 : (isnan(_4005) ? 1.0 : min(_4005, 1.0));
    float _484 = (_339.x * cbMtdParam._m0[9u].x) * ((_474 * ((_391.x * cbMtdParam._m0[12u].x) - _370)) + _370);
    float _485 = (_339.y * cbMtdParam._m0[9u].y) * ((_474 * ((_391.y * cbMtdParam._m0[12u].y) - _371)) + _371);
    float _486 = (_339.z * cbMtdParam._m0[9u].z) * ((_474 * ((_391.z * cbMtdParam._m0[12u].z) - _372)) + _372);
    float _490 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _316.x) * _484;
    float _493 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _316.y) * _485;
    float _496 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _316.z) * _486;
    float _504 = (((_484 - _490) * (isnan(1.0) ? _3972 : (isnan(_3972) ? 1.0 : min(_3972, 1.0)))) + _490) * 4.55000019073486328125;
    float _506 = (((_485 - _493) * (isnan(1.0) ? _3983 : (isnan(_3983) ? 1.0 : min(_3983, 1.0)))) + _493) * 4.55000019073486328125;
    float _508 = (((_486 - _496) * (isnan(1.0) ? _3994 : (isnan(_3994) ? 1.0 : min(_3994, 1.0)))) + _496) * 4.55000019073486328125;
    vec4 _527 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _302) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _303) + cbTextureTilingScale._m0[14u].w));
    vec4 _547 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _302) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _303) + cbTextureTilingScale._m0[20u].w));
    vec4 _572 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _302) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _303) + cbTextureTilingScale._m0[4u].w));
    vec4 _589 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _591 = _589.x;
    float _592 = _589.y;
    float _593 = _589.z;
    float _602 = ((_572.z - _593) * _474) + _593;
    float _605 = ((((_572.x - _591) * _474) + _591) * 2.0) + (-1.0);
    float _606 = ((((_572.y - _592) * _474) + _592) * 2.0) + (-1.0);
    float _607 = dot(vec2(_605, _606), vec2(_605, _606));
    float _4016 = isnan(0.0) ? _607 : (isnan(_607) ? 0.0 : max(_607, 0.0));
    float _612 = sqrt(1.0 - (isnan(1.0) ? _4016 : (isnan(_4016) ? 1.0 : min(_4016, 1.0))));
    vec4 _628 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _653 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _302) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _303) + cbTextureTilingScale._m0[11u].w));
    float _655 = _653.x;
    float _656 = 1.0 - _655;
    float _662 = isnan(-1.0) ? cbMtdParam._m0[24u].x : (isnan(cbMtdParam._m0[24u].x) ? (-1.0) : max(cbMtdParam._m0[24u].x, -1.0));
    float _665 = ((isnan(0.0) ? _662 : (isnan(_662) ? 0.0 : min(_662, 0.0))) * TEXCOORD_8.x) + TEXCOORD_8.w;
    float _674 = (_665 - ((((((_655 - _656) * cbMtdParam._m0[24u].w) + _656) + 0.00999999977648258209228515625) * cbMtdParam._m0[21u].z) * (1.0 - _665))) * (cbMtdParam._m0[21u].w + 1.0);
    float _4037 = isnan(0.0) ? _674 : (isnan(_674) ? 0.0 : max(_674, 0.0));
    float _675 = isnan(1.0) ? _4037 : (isnan(_4037) ? 1.0 : min(_4037, 1.0));
    float _682 = (_675 * ((_527.x * cbMtdParam._m0[18u].x) - _504)) + _504;
    float _683 = (_675 * ((_527.y * cbMtdParam._m0[18u].y) - _506)) + _506;
    float _684 = (_675 * ((_527.z * cbMtdParam._m0[18u].z) - _508)) + _508;
    vec4 _696 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _302) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _303) + cbTextureTilingScale._m0[19u].w));
    float _698 = _696.x;
    float _699 = 1.0 - _698;
    float _724 = (TEXCOORD_8.x - ((cbMtdParam._m0[22u].w * (1.0 - TEXCOORD_8.x)) * ((((_698 - _699) * cbMtdParam._m0[24u].y) + _699) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _4048 = isnan(0.0) ? _724 : (isnan(_724) ? 0.0 : max(_724, 0.0));
    float _725 = isnan(1.0) ? _4048 : (isnan(_4048) ? 1.0 : min(_4048, 1.0));
    float _733 = ((((cbMtdParam._m0[10u].x - _682) * TEXCOORD_8.x) * cbMtdParam._m0[23u].w) * _725) + _682;
    float _734 = ((((cbMtdParam._m0[10u].y - _683) * TEXCOORD_8.y) * cbMtdParam._m0[23u].w) * _725) + _683;
    float _735 = (((cbMtdParam._m0[23u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _684)) * _725) + _684;
    float _740 = (((_547.z - _602) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _602;
    float _744 = ((_628.z - _740) * cbMtdParam._m0[19u].w) + _740;
    vec4 _758 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _302) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _303) + cbTextureTilingScale._m0[15u].w));
    float _765 = (_758.x * 2.0) + (-1.0);
    float _766 = (_758.y * 2.0) + (-1.0);
    float _767 = dot(vec2(_765, _766), vec2(_765, _766));
    float _4059 = isnan(0.0) ? _767 : (isnan(_767) ? 0.0 : max(_767, 0.0));
    float _775 = (_675 * (_758.z - _744)) + _744;
    float _778 = ((cbMtdParam._m0[23u].y - _775) * _725) + _775;
    vec4 _797 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _302) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _303) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _803 = (_797.x * 2.0) + (-1.0);
    float _804 = (_797.y * 2.0) + (-1.0);
    float _805 = dot(vec2(_803, _804), vec2(_803, _804));
    float _4070 = isnan(0.0) ? _805 : (isnan(_805) ? 0.0 : max(_805, 0.0));
    float _819 = (_605 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_547.x * 2.0) + (-1.0)))) + (((_628.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _820 = (_606 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_547.y * 2.0) + (-1.0)))) + (((_628.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _832 = (((_765 - _819) + (cbMtdParam._m0[21u].x * _819)) * _675) + _819;
    float _833 = (((_766 - _820) + (cbMtdParam._m0[21u].x * _820)) * _675) + _820;
    float _834 = (_675 * (sqrt(1.0 - (isnan(1.0) ? _4059 : (isnan(_4059) ? 1.0 : min(_4059, 1.0)))) - _612)) + _612;
    float _845 = (((_803 - _832) + (_832 * cbMtdParam._m0[22u].z)) * _725) + _832;
    float _846 = (((_804 - _833) + (_833 * cbMtdParam._m0[22u].z)) * _725) + _833;
    float _847 = ((sqrt(1.0 - (isnan(1.0) ? _4070 : (isnan(_4070) ? 1.0 : min(_4070, 1.0)))) - _834) * _725) + _834;
    float _851 = cbMtdParam._m0[22u].x + _628.w;
    float _854 = fma(_847, _251 * NORMAL.x, fma(_846, _258 * TANGENT.x, (_244 * _236) * _845));
    float _857 = fma(_847, _251 * NORMAL.y, fma(_846, _258 * TANGENT.y, (_244 * _237) * _845));
    float _860 = fma(_847, _251 * NORMAL.z, fma(_846, _258 * TANGENT.z, (_244 * _238) * _845));
    float _864 = inversesqrt(dot(vec3(_854, _857, _860), vec3(_854, _857, _860)));
    float _865 = _864 * _854;
    float _866 = _864 * _857;
    float _867 = _864 * _860;
    float _4081 = isnan(0.0) ? _778 : (isnan(_778) ? 0.0 : max(_778, 0.0));
    float _868 = isnan(1.0) ? _4081 : (isnan(_4081) ? 1.0 : min(_4081, 1.0));
    float _4092 = isnan(0.0) ? _851 : (isnan(_851) ? 0.0 : max(_851, 0.0));
    float _4103 = isnan(0.0) ? _733 : (isnan(_733) ? 0.0 : max(_733, 0.0));
    float _4114 = isnan(0.0) ? _734 : (isnan(_734) ? 0.0 : max(_734, 0.0));
    float _4125 = isnan(0.0) ? _735 : (isnan(_735) ? 0.0 : max(_735, 0.0));
    float _886 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _926 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _936 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _926);
    float _937 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _926);
    float _938 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _926);
    float _942 = inversesqrt(dot(vec3(_936, _937, _938), vec3(_936, _937, _938)));
    float _943 = _936 * _942;
    float _944 = _937 * _942;
    float _945 = _938 * _942;
    float _951 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _952 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _970 = fma(_867, cbSceneParam._m0[5u].z, fma(_866, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _865));
    float _973 = fma(_867, cbSceneParam._m0[6u].z, fma(_866, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _865));
    float _976 = fma(_867, cbSceneParam._m0[7u].z, fma(_866, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _865));
    uint _990 = (_283 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _996 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4103 : (isnan(_4103) ? 1.0 : min(_4103, 1.0)))) * cbInstanceData._m0[_990].x;
    float _997 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4114 : (isnan(_4114) ? 1.0 : min(_4114, 1.0)))) * cbInstanceData._m0[_990].y;
    float _998 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4125 : (isnan(_4125) ? 1.0 : min(_4125, 1.0)))) * cbInstanceData._m0[_990].z;
    float _4136 = isnan(0.0) ? _996 : (isnan(_996) ? 0.0 : max(_996, 0.0));
    float _999 = isnan(1.0) ? _4136 : (isnan(_4136) ? 1.0 : min(_4136, 1.0));
    float _4147 = isnan(0.0) ? _997 : (isnan(_997) ? 0.0 : max(_997, 0.0));
    float _1000 = isnan(1.0) ? _4147 : (isnan(_4147) ? 1.0 : min(_4147, 1.0));
    float _4158 = isnan(0.0) ? _998 : (isnan(_998) ? 0.0 : max(_998, 0.0));
    float _1001 = isnan(1.0) ? _4158 : (isnan(_4158) ? 1.0 : min(_4158, 1.0));
    vec4 _1010 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _951, cbSceneParam._m0[86u].y * _952));
    float _1014 = ((isnan(1.0) ? _4092 : (isnan(_4092) ? 1.0 : min(_4092, 1.0))) * TEXCOORD_5.w) * _1010.x;
    float _1015 = dot(vec3(_865, _866, _867), vec3(_943, _944, _945));
    float _1018 = _1015 * 2.0;
    float _1022 = (_1018 * _865) - _943;
    float _1023 = (_1018 * _866) - _944;
    float _1024 = (_1018 * _867) - _945;
    float _1028 = abs(dot(vec3(_943, _944, _945), vec3(_865, _866, _867)));
    float _4169 = isnan(0.0) ? _1028 : (isnan(_1028) ? 0.0 : max(_1028, 0.0));
    float _1030 = sqrt(_868);
    float _1043 = exp2((_1030 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4169 : (isnan(_4169) ? 1.0 : min(_4169, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1030 * 3.0));
    float _1075 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1079 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1083 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1384;
    float _1386;
    float _1387;
    float _1388;
    float _1389;
    float _1390;
    float _1391;
    float _1392;
    float _1393;
    float _1394;
    float _1395;
    float _1396;
    float _1397;
    float _1398;
    float _1399;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1109 = fma(_1083, cbModelParam._m0[26u].z, fma(_1079, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1075));
        float _1113 = fma(_1083, cbModelParam._m0[27u].z, fma(_1079, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1075));
        float _1117 = fma(_1083, cbModelParam._m0[28u].z, fma(_1079, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1075));
        float _1142 = _1075 + _865;
        float _1143 = _1079 + _866;
        float _1144 = _1083 + _867;
        float _1154 = fma(_1144, cbModelParam._m0[26u].z, fma(_1143, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1142)) - _1109;
        float _1155 = fma(_1144, cbModelParam._m0[27u].z, fma(_1143, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1142)) - _1113;
        float _1156 = fma(_1144, cbModelParam._m0[28u].z, fma(_1143, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1142)) - _1117;
        float _1160 = inversesqrt(dot(vec3(_1154, _1155, _1156), vec3(_1154, _1155, _1156)));
        float _1173 = ((_1160 * _1154) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1109 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1174 = ((_1160 * _1155) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1113 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1175 = ((_1160 * _1156) / cbModelParam._m0[34u].z) + ((((((_1117 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1178 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1173, _1174, _1175), 0.0);
        vec4 _1185 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1173, _1174, _1175), 0.0);
        vec4 _1192 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1173, _1174, _1175), 0.0);
        vec4 _1199 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1173, _1174, _1175), 0.0);
        float _1212 = exp2((_1178.w + (-0.5)) * 20.0) * 2.0;
        float _1213 = _1212 * (_1178.x + (-0.5));
        float _1214 = _1212 * (_1178.y + (-0.5));
        float _1215 = _1212 * (_1178.z + (-0.5));
        float _1222 = exp2((_1185.w + (-0.5)) * 20.0) * 2.0;
        float _1223 = _1222 * (_1185.x + (-0.5));
        float _1224 = _1222 * (_1185.y + (-0.5));
        float _1225 = _1222 * (_1185.z + (-0.5));
        float _1232 = exp2((_1192.w + (-0.5)) * 20.0) * 2.0;
        float _1233 = _1232 * (_1192.x + (-0.5));
        float _1234 = _1232 * (_1192.y + (-0.5));
        float _1235 = _1232 * (_1192.z + (-0.5));
        float _1242 = exp2((_1199.w + (-0.5)) * 20.0) * 2.0;
        float _1243 = _1242 * (_1199.x + (-0.5));
        float _1244 = _1242 * (_1199.y + (-0.5));
        float _1245 = _1242 * (_1199.z + (-0.5));
        float _1246 = isnan(0.0) ? _1243 : (isnan(_1243) ? 0.0 : max(_1243, 0.0));
        float _1247 = isnan(0.0) ? _1244 : (isnan(_1244) ? 0.0 : max(_1244, 0.0));
        float _1248 = isnan(0.0) ? _1245 : (isnan(_1245) ? 0.0 : max(_1245, 0.0));
        float _1249 = _1213 * 0.5;
        float _1250 = _1223 * 0.5;
        float _1251 = _1233 * 0.5;
        float _1252 = dot(vec3(_1249, _1250, _1251), vec3(_1249, _1250, _1251));
        float _1257 = (_1252 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1252);
        float _1266 = (dot(vec3(_865, _866, _867), vec3(_1257 * _1249, _1257 * _1250, _1257 * _1251)) + 1.0) * 0.5;
        float _4195 = isnan(0.0) ? _1266 : (isnan(_1266) ? 0.0 : max(_1266, 0.0));
        float _1276 = sqrt(((_1250 * _1250) + (_1249 * _1249)) + (_1251 * _1251)) / (_1246 + 9.9999997473787516355514526367188e-06);
        float _4206 = isnan(0.0) ? _1276 : (isnan(_1276) ? 0.0 : max(_1276, 0.0));
        float _1277 = isnan(1.0) ? _4206 : (isnan(_4206) ? 1.0 : min(_4206, 1.0));
        float _1278 = _1277 * 2.0;
        float _1282 = (1.0 - _1277) / (_1277 + 1.0);
        float _4217 = isnan(0.0) ? _1282 : (isnan(_1282) ? 0.0 : max(_1282, 0.0));
        float _1283 = isnan(1.0) ? _4217 : (isnan(_4217) ? 1.0 : min(_4217, 1.0));
        float _1292 = ((((1.0 - _1283) * (_1278 + 2.0)) * exp2(log2(isnan(1.0) ? _4195 : (isnan(_4195) ? 1.0 : min(_4195, 1.0))) * (_1278 + 1.0))) + _1283) * _1246;
        float _1293 = _1214 * 0.5;
        float _1294 = _1224 * 0.5;
        float _1295 = _1234 * 0.5;
        float _1296 = dot(vec3(_1293, _1294, _1295), vec3(_1293, _1294, _1295));
        float _1301 = (_1296 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1296);
        float _1309 = (dot(vec3(_865, _866, _867), vec3(_1301 * _1293, _1301 * _1294, _1301 * _1295)) + 1.0) * 0.5;
        float _4228 = isnan(0.0) ? _1309 : (isnan(_1309) ? 0.0 : max(_1309, 0.0));
        float _1318 = sqrt(((_1294 * _1294) + (_1293 * _1293)) + (_1295 * _1295)) / (_1247 + 9.9999997473787516355514526367188e-06);
        float _4239 = isnan(0.0) ? _1318 : (isnan(_1318) ? 0.0 : max(_1318, 0.0));
        float _1319 = isnan(1.0) ? _4239 : (isnan(_4239) ? 1.0 : min(_4239, 1.0));
        float _1320 = _1319 * 2.0;
        float _1324 = (1.0 - _1319) / (_1319 + 1.0);
        float _4250 = isnan(0.0) ? _1324 : (isnan(_1324) ? 0.0 : max(_1324, 0.0));
        float _1325 = isnan(1.0) ? _4250 : (isnan(_4250) ? 1.0 : min(_4250, 1.0));
        float _1334 = ((((1.0 - _1325) * (_1320 + 2.0)) * exp2(log2(isnan(1.0) ? _4228 : (isnan(_4228) ? 1.0 : min(_4228, 1.0))) * (_1320 + 1.0))) + _1325) * _1247;
        float _1335 = _1215 * 0.5;
        float _1336 = _1225 * 0.5;
        float _1337 = _1235 * 0.5;
        float _1338 = dot(vec3(_1335, _1336, _1337), vec3(_1335, _1336, _1337));
        float _1343 = (_1338 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1338);
        float _1351 = (dot(vec3(_865, _866, _867), vec3(_1343 * _1335, _1343 * _1336, _1343 * _1337)) + 1.0) * 0.5;
        float _4261 = isnan(0.0) ? _1351 : (isnan(_1351) ? 0.0 : max(_1351, 0.0));
        float _1360 = sqrt(((_1336 * _1336) + (_1335 * _1335)) + (_1337 * _1337)) / (_1248 + 9.9999997473787516355514526367188e-06);
        float _4272 = isnan(0.0) ? _1360 : (isnan(_1360) ? 0.0 : max(_1360, 0.0));
        float _1361 = isnan(1.0) ? _4272 : (isnan(_4272) ? 1.0 : min(_4272, 1.0));
        float _1362 = _1361 * 2.0;
        float _1366 = (1.0 - _1361) / (_1361 + 1.0);
        float _4283 = isnan(0.0) ? _1366 : (isnan(_1366) ? 0.0 : max(_1366, 0.0));
        float _1367 = isnan(1.0) ? _4283 : (isnan(_4283) ? 1.0 : min(_4283, 1.0));
        float _1376 = ((((1.0 - _1367) * (_1362 + 2.0)) * exp2(log2(isnan(1.0) ? _4261 : (isnan(_4261) ? 1.0 : min(_4261, 1.0))) * (_1362 + 1.0))) + _1367) * _1248;
        _1384 = _1215;
        _1386 = _1214;
        _1387 = _1213;
        _1388 = _1225;
        _1389 = _1224;
        _1390 = _1223;
        _1391 = _1235;
        _1392 = _1234;
        _1393 = _1233;
        _1394 = _1248;
        _1395 = _1247;
        _1396 = _1246;
        _1397 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1292 : (isnan(_1292) ? 0.0 : max(_1292, 0.0)));
        _1398 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1334 : (isnan(_1334) ? 0.0 : max(_1334, 0.0)));
        _1399 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1376 : (isnan(_1376) ? 0.0 : max(_1376, 0.0)));
    }
    else
    {
        _1384 = _1385;
        _1386 = _1385;
        _1387 = _1385;
        _1388 = _1385;
        _1389 = _1385;
        _1390 = _1385;
        _1391 = _1385;
        _1392 = _1385;
        _1393 = _1385;
        _1394 = _1385;
        _1395 = _1385;
        _1396 = _1385;
        _1397 = 0.0;
        _1398 = 0.0;
        _1399 = 0.0;
    }
    float _1693;
    float _1694;
    float _1695;
    float _1696;
    float _1697;
    float _1698;
    float _1699;
    float _1700;
    float _1701;
    float _1702;
    float _1703;
    float _1704;
    float _1705;
    float _1706;
    float _1707;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1424 = fma(_1083, cbModelParam._m0[30u].z, fma(_1079, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1075));
        float _1428 = fma(_1083, cbModelParam._m0[31u].z, fma(_1079, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1075));
        float _1432 = fma(_1083, cbModelParam._m0[32u].z, fma(_1079, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1075));
        float _1455 = _1075 + _865;
        float _1456 = _1079 + _866;
        float _1457 = _1083 + _867;
        float _1467 = fma(_1457, cbModelParam._m0[30u].z, fma(_1456, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1455)) - _1424;
        float _1468 = fma(_1457, cbModelParam._m0[31u].z, fma(_1456, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1455)) - _1428;
        float _1469 = fma(_1457, cbModelParam._m0[32u].z, fma(_1456, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1455)) - _1432;
        float _1473 = inversesqrt(dot(vec3(_1467, _1468, _1469), vec3(_1467, _1468, _1469)));
        float _1486 = ((_1473 * _1467) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1424 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1487 = ((_1473 * _1468) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1428 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1488 = ((_1473 * _1469) / cbModelParam._m0[35u].z) + ((((((_1432 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1490 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1486, _1487, _1488), 0.0);
        vec4 _1497 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1486, _1487, _1488), 0.0);
        vec4 _1504 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1486, _1487, _1488), 0.0);
        vec4 _1511 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1486, _1487, _1488), 0.0);
        float _1523 = exp2((_1490.w + (-0.5)) * 20.0) * 2.0;
        float _1524 = _1523 * (_1490.x + (-0.5));
        float _1525 = _1523 * (_1490.y + (-0.5));
        float _1526 = _1523 * (_1490.z + (-0.5));
        float _1533 = exp2((_1497.w + (-0.5)) * 20.0) * 2.0;
        float _1534 = _1533 * (_1497.x + (-0.5));
        float _1535 = _1533 * (_1497.y + (-0.5));
        float _1536 = _1533 * (_1497.z + (-0.5));
        float _1543 = exp2((_1504.w + (-0.5)) * 20.0) * 2.0;
        float _1544 = _1543 * (_1504.x + (-0.5));
        float _1545 = _1543 * (_1504.y + (-0.5));
        float _1546 = _1543 * (_1504.z + (-0.5));
        float _1553 = exp2((_1511.w + (-0.5)) * 20.0) * 2.0;
        float _1554 = _1553 * (_1511.x + (-0.5));
        float _1555 = _1553 * (_1511.y + (-0.5));
        float _1556 = _1553 * (_1511.z + (-0.5));
        float _1557 = isnan(0.0) ? _1554 : (isnan(_1554) ? 0.0 : max(_1554, 0.0));
        float _1558 = isnan(0.0) ? _1555 : (isnan(_1555) ? 0.0 : max(_1555, 0.0));
        float _1559 = isnan(0.0) ? _1556 : (isnan(_1556) ? 0.0 : max(_1556, 0.0));
        float _1560 = _1524 * 0.5;
        float _1561 = _1534 * 0.5;
        float _1562 = _1544 * 0.5;
        float _1563 = dot(vec3(_1560, _1561, _1562), vec3(_1560, _1561, _1562));
        float _1568 = (_1563 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1563);
        float _1576 = (dot(vec3(_865, _866, _867), vec3(_1568 * _1560, _1568 * _1561, _1568 * _1562)) + 1.0) * 0.5;
        float _4324 = isnan(0.0) ? _1576 : (isnan(_1576) ? 0.0 : max(_1576, 0.0));
        float _1585 = sqrt(((_1561 * _1561) + (_1560 * _1560)) + (_1562 * _1562)) / (_1557 + 9.9999997473787516355514526367188e-06);
        float _4335 = isnan(0.0) ? _1585 : (isnan(_1585) ? 0.0 : max(_1585, 0.0));
        float _1586 = isnan(1.0) ? _4335 : (isnan(_4335) ? 1.0 : min(_4335, 1.0));
        float _1587 = _1586 * 2.0;
        float _1591 = (1.0 - _1586) / (_1586 + 1.0);
        float _4346 = isnan(0.0) ? _1591 : (isnan(_1591) ? 0.0 : max(_1591, 0.0));
        float _1592 = isnan(1.0) ? _4346 : (isnan(_4346) ? 1.0 : min(_4346, 1.0));
        float _1601 = ((((1.0 - _1592) * (_1587 + 2.0)) * exp2(log2(isnan(1.0) ? _4324 : (isnan(_4324) ? 1.0 : min(_4324, 1.0))) * (_1587 + 1.0))) + _1592) * _1557;
        float _1602 = _1525 * 0.5;
        float _1603 = _1535 * 0.5;
        float _1604 = _1545 * 0.5;
        float _1605 = dot(vec3(_1602, _1603, _1604), vec3(_1602, _1603, _1604));
        float _1610 = (_1605 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1605);
        float _1618 = (dot(vec3(_865, _866, _867), vec3(_1610 * _1602, _1610 * _1603, _1610 * _1604)) + 1.0) * 0.5;
        float _4357 = isnan(0.0) ? _1618 : (isnan(_1618) ? 0.0 : max(_1618, 0.0));
        float _1627 = sqrt(((_1603 * _1603) + (_1602 * _1602)) + (_1604 * _1604)) / (_1558 + 9.9999997473787516355514526367188e-06);
        float _4368 = isnan(0.0) ? _1627 : (isnan(_1627) ? 0.0 : max(_1627, 0.0));
        float _1628 = isnan(1.0) ? _4368 : (isnan(_4368) ? 1.0 : min(_4368, 1.0));
        float _1629 = _1628 * 2.0;
        float _1633 = (1.0 - _1628) / (_1628 + 1.0);
        float _4379 = isnan(0.0) ? _1633 : (isnan(_1633) ? 0.0 : max(_1633, 0.0));
        float _1634 = isnan(1.0) ? _4379 : (isnan(_4379) ? 1.0 : min(_4379, 1.0));
        float _1643 = ((((1.0 - _1634) * (_1629 + 2.0)) * exp2(log2(isnan(1.0) ? _4357 : (isnan(_4357) ? 1.0 : min(_4357, 1.0))) * (_1629 + 1.0))) + _1634) * _1558;
        float _1644 = _1526 * 0.5;
        float _1645 = _1536 * 0.5;
        float _1646 = _1546 * 0.5;
        float _1647 = dot(vec3(_1644, _1645, _1646), vec3(_1644, _1645, _1646));
        float _1652 = (_1647 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1647);
        float _1660 = (dot(vec3(_865, _866, _867), vec3(_1652 * _1644, _1652 * _1645, _1652 * _1646)) + 1.0) * 0.5;
        float _4390 = isnan(0.0) ? _1660 : (isnan(_1660) ? 0.0 : max(_1660, 0.0));
        float _1669 = sqrt(((_1645 * _1645) + (_1644 * _1644)) + (_1646 * _1646)) / (_1559 + 9.9999997473787516355514526367188e-06);
        float _4401 = isnan(0.0) ? _1669 : (isnan(_1669) ? 0.0 : max(_1669, 0.0));
        float _1670 = isnan(1.0) ? _4401 : (isnan(_4401) ? 1.0 : min(_4401, 1.0));
        float _1671 = _1670 * 2.0;
        float _1675 = (1.0 - _1670) / (_1670 + 1.0);
        float _4412 = isnan(0.0) ? _1675 : (isnan(_1675) ? 0.0 : max(_1675, 0.0));
        float _1676 = isnan(1.0) ? _4412 : (isnan(_4412) ? 1.0 : min(_4412, 1.0));
        float _1685 = ((((1.0 - _1676) * (_1671 + 2.0)) * exp2(log2(isnan(1.0) ? _4390 : (isnan(_4390) ? 1.0 : min(_4390, 1.0))) * (_1671 + 1.0))) + _1676) * _1559;
        _1693 = _1526;
        _1694 = _1525;
        _1695 = _1524;
        _1696 = _1536;
        _1697 = _1535;
        _1698 = _1534;
        _1699 = _1546;
        _1700 = _1545;
        _1701 = _1544;
        _1702 = _1559;
        _1703 = _1558;
        _1704 = _1557;
        _1705 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1601 : (isnan(_1601) ? 0.0 : max(_1601, 0.0)));
        _1706 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1643 : (isnan(_1643) ? 0.0 : max(_1643, 0.0)));
        _1707 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1685 : (isnan(_1685) ? 0.0 : max(_1685, 0.0)));
    }
    else
    {
        _1693 = _1385;
        _1694 = _1385;
        _1695 = _1385;
        _1696 = _1385;
        _1697 = _1385;
        _1698 = _1385;
        _1699 = _1385;
        _1700 = _1385;
        _1701 = _1385;
        _1702 = _1385;
        _1703 = _1385;
        _1704 = _1385;
        _1705 = 0.0;
        _1706 = 0.0;
        _1707 = 0.0;
    }
    float _1717 = (cbModelParam._m0[1u].x * (_1705 - _1397)) + _1397;
    float _1718 = (cbModelParam._m0[1u].x * (_1706 - _1398)) + _1398;
    float _1719 = (cbModelParam._m0[1u].x * (_1707 - _1399)) + _1399;
    float _1740 = fma(_1719, cbSceneParam._m0[89u].z, fma(_1718, cbSceneParam._m0[89u].y, _1717 * cbSceneParam._m0[89u].x));
    float _1743 = fma(_1719, cbSceneParam._m0[90u].z, fma(_1718, cbSceneParam._m0[90u].y, _1717 * cbSceneParam._m0[90u].x));
    float _1746 = fma(_1719, cbSceneParam._m0[91u].z, fma(_1718, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1717));
    float _1761 = _1022 * 0.5;
    float _1762 = _1023 * 0.5;
    float _1763 = _1024 * 0.5;
    float _1764 = dot(vec4(_1761, _1762, _1763, 1.0), vec4(_1695, _1698, _1701, _1704));
    float _1767 = dot(vec4(_1761, _1762, _1763, 1.0), vec4(_1694, _1697, _1700, _1703));
    float _1770 = dot(vec4(_1761, _1762, _1763, 1.0), vec4(_1693, _1696, _1699, _1702));
    float _1804;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1777 = dot(vec4(_1761, _1762, _1763, 1.0), vec4(_1384, _1388, _1391, _1394));
        float _1781 = dot(vec4(_1761, _1762, _1763, 1.0), vec4(_1386, _1389, _1392, _1395));
        float _1785 = dot(vec4(_1761, _1762, _1763, 1.0), vec4(_1387, _1390, _1393, _1396));
        float _1792 = dot(vec4(cbModelParam._m0[39u]), vec4(_1761, _1762, _1763, 1.0));
        _1804 = dot(vec3(isnan(0.0) ? _1785 : (isnan(_1785) ? 0.0 : max(_1785, 0.0)), isnan(0.0) ? _1781 : (isnan(_1781) ? 0.0 : max(_1781, 0.0)), isnan(0.0) ? _1777 : (isnan(_1777) ? 0.0 : max(_1777, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1792) ? 0.0 : (isnan(0.0) ? _1792 : max(0.0, _1792))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1804 = 1.0;
    }
    float _1815;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1806 = dot(vec4(cbModelParam._m0[40u]), vec4(_1761, _1762, _1763, 1.0));
        _1815 = dot(vec3(isnan(0.0) ? _1764 : (isnan(_1764) ? 0.0 : max(_1764, 0.0)), isnan(0.0) ? _1767 : (isnan(_1767) ? 0.0 : max(_1767, 0.0)), isnan(0.0) ? _1770 : (isnan(_1770) ? 0.0 : max(_1770, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1806) ? 0.0 : (isnan(0.0) ? _1806 : max(0.0, _1806))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1815 = 1.0;
    }
    float _1819 = (_1815 * cbModelParam._m0[1u].x) + (_1804 * (1.0 - cbModelParam._m0[1u].x));
    float _1829 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _868);
    float _1830 = isnan(_1829) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1829 : min(cbModelParam._m0[25u].z, _1829));
    float _1910;
    float _1912;
    float _1914;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1877 = fma(_1083, cbModelParam._m0[13u].z, fma(_1079, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1075)) + cbModelParam._m0[13u].w;
        float _1881 = fma(_1083, cbModelParam._m0[14u].z, fma(_1079, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1075)) + cbModelParam._m0[14u].w;
        float _1885 = fma(_1083, cbModelParam._m0[15u].z, fma(_1079, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1075)) + cbModelParam._m0[15u].w;
        float _1888 = fma(_1024, cbModelParam._m0[13u].z, fma(_1023, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1022));
        float _1891 = fma(_1024, cbModelParam._m0[14u].z, fma(_1023, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1022));
        float _1894 = fma(_1024, cbModelParam._m0[15u].z, fma(_1023, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1022));
        float _1922;
        if (_1888 > 0.0)
        {
            _1922 = abs((1.0 - _1877) / _1888);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1888 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1877 + 1.0) / _1888);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1922 = frontier_phi_14_12_ladder;
        }
        float _2091;
        if (_1891 > 0.0)
        {
            _2091 = abs((1.0 - _1881) / _1891);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1891 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1881 + 1.0) / _1891);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2091 = frontier_phi_23_19_ladder;
        }
        float _2386;
        if (_1894 > 0.0)
        {
            _2386 = abs((1.0 - _1885) / _1894);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1894 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1885 + 1.0) / _1894);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2386 = frontier_phi_35_30_ladder;
        }
        float _2388 = isnan(_2091) ? _1922 : (isnan(_1922) ? _2091 : min(_1922, _2091));
        float _2389 = isnan(_2386) ? _2388 : (isnan(_2388) ? _2386 : min(_2388, _2386));
        float _2393 = (_2389 * _1888) + _1877;
        float _2394 = (_2389 * _1891) + _1881;
        float _2395 = (_2389 * _1894) + _1885;
        float _2396 = _2389 * 9.9999997473787516355514526367188e-05;
        float _2398 = (-1.0) - _2396;
        float _2400 = _2396 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2395 > _2400) || ((_2395 < _2398) || ((_2394 > _2400) || ((_2394 < _2398) || ((_2393 < _2398) || (_2393 > _2400))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2540 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2395, cbModelParam._m0[9u].z, fma(_2394, cbModelParam._m0[9u].y, _2393 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2395, cbModelParam._m0[10u].z, fma(_2394, cbModelParam._m0[10u].y, _2393 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2395, cbModelParam._m0[11u].z, fma(_2394, cbModelParam._m0[11u].y, _2393 * cbModelParam._m0[11u].x))), _1830);
            frontier_phi_13_35_ladder = _2540.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2540.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2540.x * cbModelParam._m0[1u].y;
        }
        _1910 = frontier_phi_13_35_ladder_2;
        _1912 = frontier_phi_13_35_ladder_1;
        _1914 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1898 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1022, _1023, _1024), _1830);
        _1910 = _1898.x * cbModelParam._m0[1u].y;
        _1912 = _1898.y * cbModelParam._m0[1u].y;
        _1914 = _1898.z * cbModelParam._m0[1u].y;
    }
    float _1918 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _868);
    float _1919 = isnan(_1918) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1918 : min(cbModelParam._m0[25u].w, _1918));
    float _2008;
    float _2010;
    float _2012;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1972 = fma(_1083, cbModelParam._m0[21u].z, fma(_1079, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1075)) + cbModelParam._m0[21u].w;
        float _1976 = fma(_1083, cbModelParam._m0[22u].z, fma(_1079, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1075)) + cbModelParam._m0[22u].w;
        float _1980 = fma(_1083, cbModelParam._m0[23u].z, fma(_1079, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1075)) + cbModelParam._m0[23u].w;
        float _1983 = fma(_1024, cbModelParam._m0[21u].z, fma(_1023, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1022));
        float _1986 = fma(_1024, cbModelParam._m0[22u].z, fma(_1023, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1022));
        float _1989 = fma(_1024, cbModelParam._m0[23u].z, fma(_1023, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1022));
        float _2096;
        if (_1983 > 0.0)
        {
            _2096 = abs((1.0 - _1972) / _1983);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1983 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1972 + 1.0) / _1983);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2096 = frontier_phi_25_21_ladder;
        }
        float _2413;
        if (_1986 > 0.0)
        {
            _2413 = abs((1.0 - _1976) / _1986);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1986 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1976 + 1.0) / _1986);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2413 = frontier_phi_37_32_ladder;
        }
        float _2740;
        if (_1989 > 0.0)
        {
            _2740 = abs((1.0 - _1980) / _1989);
        }
        else
        {
            float frontier_phi_47_44_ladder;
            if (_1989 < 0.0)
            {
                frontier_phi_47_44_ladder = abs((_1980 + 1.0) / _1989);
            }
            else
            {
                frontier_phi_47_44_ladder = 5000.0;
            }
            _2740 = frontier_phi_47_44_ladder;
        }
        float _2742 = isnan(_2413) ? _2096 : (isnan(_2096) ? _2413 : min(_2096, _2413));
        float _2743 = isnan(_2740) ? _2742 : (isnan(_2742) ? _2740 : min(_2742, _2740));
        float _2747 = (_2743 * _1983) + _1972;
        float _2748 = (_2743 * _1986) + _1976;
        float _2749 = (_2743 * _1989) + _1980;
        float _2750 = _2743 * 9.9999997473787516355514526367188e-05;
        float _2751 = (-1.0) - _2750;
        float _2753 = _2750 + 1.0;
        float frontier_phi_22_47_ladder;
        float frontier_phi_22_47_ladder_1;
        float frontier_phi_22_47_ladder_2;
        if ((_2749 > _2753) || ((_2749 < _2751) || ((_2748 > _2753) || ((_2748 < _2751) || ((_2747 < _2751) || (_2747 > _2753))))))
        {
            frontier_phi_22_47_ladder = 0.0;
            frontier_phi_22_47_ladder_1 = 0.0;
            frontier_phi_22_47_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2867 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2749, cbModelParam._m0[17u].z, fma(_2748, cbModelParam._m0[17u].y, _2747 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2749, cbModelParam._m0[18u].z, fma(_2748, cbModelParam._m0[18u].y, _2747 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2749, cbModelParam._m0[19u].z, fma(_2748, cbModelParam._m0[19u].y, _2747 * cbModelParam._m0[19u].x))), _1919);
            frontier_phi_22_47_ladder = _2867.z * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_1 = _2867.y * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_2 = _2867.x * cbModelParam._m0[1u].z;
        }
        _2008 = frontier_phi_22_47_ladder_2;
        _2010 = frontier_phi_22_47_ladder_1;
        _2012 = frontier_phi_22_47_ladder;
    }
    else
    {
        vec4 _1992 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1022, _1023, _1024), _1919);
        _2008 = _1992.x * cbModelParam._m0[1u].z;
        _2010 = _1992.y * cbModelParam._m0[1u].z;
        _2012 = _1992.z * cbModelParam._m0[1u].z;
    }
    float _2024 = ((((1.0 - _1043) * ((_1030 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_1043 * _1030)) * _1014;
    float _2025 = _2024 * ((cbModelParam._m0[1u].w * (_2008 - _1910)) + _1910);
    float _2026 = _2024 * ((cbModelParam._m0[1u].w * (_2010 - _1912)) + _1912);
    float _2027 = _2024 * ((cbModelParam._m0[1u].w * (_2012 - _1914)) + _1914);
    float _2030 = fma(_2027, cbSceneParam._m0[89u].z, fma(_2026, cbSceneParam._m0[89u].y, _2025 * cbSceneParam._m0[89u].x));
    float _2033 = fma(_2027, cbSceneParam._m0[90u].z, fma(_2026, cbSceneParam._m0[90u].y, _2025 * cbSceneParam._m0[90u].x));
    float _2036 = fma(_2027, cbSceneParam._m0[91u].z, fma(_2026, cbSceneParam._m0[91u].y, _2025 * cbSceneParam._m0[91u].x));
    float _2070 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2074 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2078 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2082 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2083 = _2070 / _2082;
    float _2084 = _2074 / _2082;
    float _2085 = _2078 / _2082;
    float _2232;
    float _2233;
    float _2234;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2112 = ((uint(_2085 > cbSceneParam._m0[59u].y) + uint(_2085 > cbSceneParam._m0[59u].x)) + uint(_2085 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2113 = _2112 + 43u;
        uint _2121 = _2112 + 44u;
        uint _2129 = _2112 + 45u;
        uint _2137 = _2112 + 46u;
        float _2148 = fma(_2082, cbSceneParam._m0[_2113].w, fma(_2078, cbSceneParam._m0[_2113].z, fma(_2074, cbSceneParam._m0[_2113].y, _2070 * cbSceneParam._m0[_2113].x)));
        float _2152 = fma(_2082, cbSceneParam._m0[_2121].w, fma(_2078, cbSceneParam._m0[_2121].z, fma(_2074, cbSceneParam._m0[_2121].y, _2070 * cbSceneParam._m0[_2121].x)));
        float _2160 = fma(_2082, cbSceneParam._m0[_2137].w, fma(_2078, cbSceneParam._m0[_2137].z, fma(_2074, cbSceneParam._m0[_2137].y, _2070 * cbSceneParam._m0[_2137].x)));
        float _2165 = cbSceneParam._m0[33u].z * _2160;
        float _2167 = cbSceneParam._m0[33u].w * _2160;
        float _2170 = fma(_2082, cbSceneParam._m0[_2129].w, fma(_2078, cbSceneParam._m0[_2129].z, fma(_2074, cbSceneParam._m0[_2129].y, _2070 * cbSceneParam._m0[_2129].x))) / _2160;
        float _2218 = (cbSceneParam._m0[33u].x - sqrt(((_2084 * _2084) + (_2083 * _2083)) + (_2085 * _2085))) * cbSceneParam._m0[33u].y;
        float _4538 = isnan(0.0) ? _2218 : (isnan(_2218) ? 0.0 : max(_2218, 0.0));
        float _2225 = (isnan(1.0) ? _4538 : (isnan(_4538) ? 1.0 : min(_4538, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2165 + _2148) / _2160, (_2167 + _2152) / _2160), _2170), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2167 + _2148) / _2160, (_2152 - _2165) / _2160), _2170), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2148 - _2165) / _2160, (_2152 - _2167) / _2160), _2170), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2148 - _2167) / _2160, (_2165 + _2152) / _2160), _2170), 0.0)).x), vec4(0.25)));
        _2232 = 1.0 - (_2225 * cbSceneParam._m0[34u].x);
        _2233 = 1.0 - (_2225 * cbSceneParam._m0[34u].y);
        _2234 = 1.0 - (_2225 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2232 = 1.0;
        _2233 = 1.0;
        _2234 = 1.0;
    }
    float _2298;
    float _2300;
    float _2302;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2286 = fma(_2082, cbSceneParam._m0[63u].w, fma(_2078, cbSceneParam._m0[63u].z, fma(_2074, cbSceneParam._m0[63u].y, _2070 * cbSceneParam._m0[63u].x)));
        float _2287 = fma(_2082, cbSceneParam._m0[60u].w, fma(_2078, cbSceneParam._m0[60u].z, fma(_2074, cbSceneParam._m0[60u].y, _2070 * cbSceneParam._m0[60u].x))) / _2286;
        float _2288 = fma(_2082, cbSceneParam._m0[61u].w, fma(_2078, cbSceneParam._m0[61u].z, fma(_2074, cbSceneParam._m0[61u].y, _2070 * cbSceneParam._m0[61u].x))) / _2286;
        float frontier_phi_34_33_ladder;
        float frontier_phi_34_33_ladder_1;
        float frontier_phi_34_33_ladder_2;
        if ((((_2287 >= cbSceneParam._m0[64u].x) && (_2288 >= cbSceneParam._m0[64u].y)) && (_2287 <= cbSceneParam._m0[64u].z)) && (_2288 <= cbSceneParam._m0[64u].w))
        {
            float _2426 = fma(_2082, cbSceneParam._m0[62u].w, fma(_2078, cbSceneParam._m0[62u].z, fma(_2074, cbSceneParam._m0[62u].y, _2070 * cbSceneParam._m0[62u].x))) / _2286;
            float _2430 = isnan(cbSceneParam._m0[41u].w) ? _2426 : (isnan(_2426) ? cbSceneParam._m0[41u].w : max(_2426, cbSceneParam._m0[41u].w));
            float _2473 = (cbSceneParam._m0[33u].x - sqrt(((_2084 * _2084) + (_2083 * _2083)) + (_2085 * _2085))) * cbSceneParam._m0[33u].y;
            float _4554 = isnan(0.0) ? _2473 : (isnan(_2473) ? 0.0 : max(_2473, 0.0));
            float _2480 = (isnan(1.0) ? _4554 : (isnan(_4554) ? 1.0 : min(_4554, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2287, cbSceneParam._m0[33u].w + _2288), _2430), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2287, _2288 - cbSceneParam._m0[33u].z), _2430), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2287 - cbSceneParam._m0[33u].z, _2288 - cbSceneParam._m0[33u].w), _2430), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2287 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2288), _2430), 0.0)).x), vec4(0.25)));
            float _2484 = 1.0 - (_2480 * cbSceneParam._m0[34u].x);
            float _2485 = 1.0 - (_2480 * cbSceneParam._m0[34u].y);
            float _2486 = 1.0 - (_2480 * cbSceneParam._m0[34u].z);
            frontier_phi_34_33_ladder = isnan(_2486) ? _2234 : (isnan(_2234) ? _2486 : min(_2234, _2486));
            frontier_phi_34_33_ladder_1 = isnan(_2485) ? _2233 : (isnan(_2233) ? _2485 : min(_2233, _2485));
            frontier_phi_34_33_ladder_2 = isnan(_2484) ? _2232 : (isnan(_2232) ? _2484 : min(_2232, _2484));
        }
        else
        {
            frontier_phi_34_33_ladder = _2234;
            frontier_phi_34_33_ladder_1 = _2233;
            frontier_phi_34_33_ladder_2 = _2232;
        }
        _2298 = frontier_phi_34_33_ladder_2;
        _2300 = frontier_phi_34_33_ladder_1;
        _2302 = frontier_phi_34_33_ladder;
    }
    else
    {
        _2298 = _2232;
        _2300 = _2233;
        _2302 = _2234;
    }
    uvec4 _2307 = floatBitsToUint(cbInstanceData._m0[_283 + 5u]);
    uint _2309 = _2307.x * 14u;
    uint _2310 = _2309 + 13u;
    float _2317 = _1014 + (-1.0);
    float _2322 = (cbLight._m0[_2310].x * _2317) + 1.0;
    float _2323 = (cbLight._m0[_2310].y * _2317) + 1.0;
    float _2324 = (cbLight._m0[_2310].z * _2317) + 1.0;
    float _2325 = (cbLight._m0[_2310].w * _2317) + 1.0;
    uint _2326 = _2309 + 5u;
    float _2332 = isnan(1.0) ? _2323 : (isnan(_2323) ? 1.0 : min(_2323, 1.0));
    uint _2336 = _2309 + 4u;
    float _2345 = isnan(1.0) ? _2322 : (isnan(_2322) ? 1.0 : min(_2322, 1.0));
    uint _2349 = _2309 | 1u;
    float _2360 = dot(vec3(cbLight._m0[_2309].xyz), vec3(_865, _866, _867));
    float _2363 = dot(vec3(cbLight._m0[_2349].xyz), vec3(_865, _866, _867));
    float _4590 = isnan(0.0) ? _2360 : (isnan(_2360) ? 0.0 : max(_2360, 0.0));
    float _4601 = isnan(0.0) ? _2363 : (isnan(_2363) ? 0.0 : max(_2363, 0.0));
    float _2368 = (isnan(1.0) ? _4590 : (isnan(_4590) ? 1.0 : min(_4590, 1.0))) * 0.3183098733425140380859375;
    float _2370 = (isnan(1.0) ? _4601 : (isnan(_4601) ? 1.0 : min(_4601, 1.0))) * 0.3183098733425140380859375;
    float _2377 = ((cbLight._m0[_2326].x * _2332) * _2370) + (((cbLight._m0[_2336].x * _2298) * _2345) * _2368);
    float _2378 = ((_2332 * cbLight._m0[_2326].y) * _2370) + (((cbLight._m0[_2336].y * _2300) * _2345) * _2368);
    float _2379 = ((_2332 * cbLight._m0[_2326].z) * _2370) + (((cbLight._m0[_2336].z * _2302) * _2345) * _2368);
    uvec4 _2383 = floatBitsToUint(cbLight._m0[_2309 + 12u]);
    bool _2385 = _2383.x == 0u;
    float _2487;
    float _2489;
    float _2491;
    if (_2385)
    {
        _2487 = _2377;
        _2489 = _2378;
        _2491 = _2379;
    }
    else
    {
        uint _2495 = _2309 + 6u;
        float _2511 = (dot(vec3(cbLight._m0[_2309 + 2u].xyz), vec3(_865, _866, _867)) * 0.5) + 0.5;
        float _2512 = _2511 * _2511;
        float _4612 = isnan(0.0) ? _2512 : (isnan(_2512) ? 0.0 : max(_2512, 0.0));
        float _2513 = isnan(1.0) ? _4612 : (isnan(_4612) ? 1.0 : min(_4612, 1.0));
        float _2514 = isnan(1.0) ? _2324 : (isnan(_2324) ? 1.0 : min(_2324, 1.0));
        _2487 = (((cbLight._m0[_2495].x * 0.3183098733425140380859375) * _2513) * _2514) + _2377;
        _2489 = (((cbLight._m0[_2495].y * 0.3183098733425140380859375) * _2513) * _2514) + _2378;
        _2491 = (((cbLight._m0[_2495].z * 0.3183098733425140380859375) * _2513) * _2514) + _2379;
    }
    bool _2494 = _2383.y == 0u;
    float _2549;
    float _2551;
    float _2553;
    if (_2494)
    {
        _2549 = _2487;
        _2551 = _2489;
        _2553 = _2491;
    }
    else
    {
        uint _2711 = _2309 + 7u;
        float _2727 = (dot(vec3(cbLight._m0[_2309 + 3u].xyz), vec3(_865, _866, _867)) * 0.5) + 0.5;
        float _2728 = _2727 * _2727;
        float _4628 = isnan(0.0) ? _2728 : (isnan(_2728) ? 0.0 : max(_2728, 0.0));
        float _2729 = isnan(1.0) ? _4628 : (isnan(_4628) ? 1.0 : min(_4628, 1.0));
        float _2730 = isnan(1.0) ? _2325 : (isnan(_2325) ? 1.0 : min(_2325, 1.0));
        _2549 = (((cbLight._m0[_2711].x * 0.3183098733425140380859375) * _2729) * _2730) + _2487;
        _2551 = (((cbLight._m0[_2711].y * 0.3183098733425140380859375) * _2729) * _2730) + _2489;
        _2553 = (((cbLight._m0[_2711].z * 0.3183098733425140380859375) * _2729) * _2730) + _2491;
    }
    uint _2556 = _2309 + 8u;
    float _2569 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2309].w)) * _868) * 0.949999988079071044921875);
    float _2570 = _2569 * _2569;
    float _2571 = cbLight._m0[_2309].x + _943;
    float _2572 = cbLight._m0[_2309].y + _944;
    float _2573 = cbLight._m0[_2309].z + _945;
    float _2577 = inversesqrt(dot(vec3(_2571, _2572, _2573), vec3(_2571, _2572, _2573)));
    float _2578 = _2577 * _2571;
    float _2579 = _2577 * _2572;
    float _2580 = _2577 * _2573;
    float _2581 = dot(vec3(_865, _866, _867), vec3(cbLight._m0[_2309].xyz));
    float _4644 = isnan(0.0) ? _2581 : (isnan(_2581) ? 0.0 : max(_2581, 0.0));
    float _2584 = isnan(1.0) ? _4644 : (isnan(_4644) ? 1.0 : min(_4644, 1.0));
    float _4655 = isnan(0.0) ? _1015 : (isnan(_1015) ? 0.0 : max(_1015, 0.0));
    float _2585 = isnan(1.0) ? _4655 : (isnan(_4655) ? 1.0 : min(_4655, 1.0));
    float _2586 = dot(vec3(_865, _866, _867), vec3(_2578, _2579, _2580));
    float _4666 = isnan(0.0) ? _2586 : (isnan(_2586) ? 0.0 : max(_2586, 0.0));
    float _2589 = isnan(1.0) ? _4666 : (isnan(_4666) ? 1.0 : min(_4666, 1.0));
    float _2590 = dot(vec3(cbLight._m0[_2309].xyz), vec3(_2578, _2579, _2580));
    float _4677 = isnan(0.0) ? _2590 : (isnan(_2590) ? 0.0 : max(_2590, 0.0));
    float _2594 = _2570 * _2570;
    float _2598 = ((_2589 * _2589) * (_2594 + (-1.0))) + 1.0;
    float _2609 = (exp2(log2(1.0 - (isnan(1.0) ? _4677 : (isnan(_4677) ? 1.0 : min(_4677, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2610 = 1.0 - _2570;
    float _2621 = (0.5 / (((_2585 * ((_2584 * _2610) + _2570)) + 9.9999999392252902907785028219223e-09) + (((_2585 * _2610) + _2570) * _2584))) * _2584;
    float _4688 = isnan(0.0) ? _2621 : (isnan(_2621) ? 0.0 : max(_2621, 0.0));
    float _2623 = (isnan(1.0) ? _4688 : (isnan(_4688) ? 1.0 : min(_4688, 1.0))) * (_2594 / ((_2598 * _2598) * 3.141590118408203125));
    uint _2637 = _2309 + 9u;
    float _2648 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2349].w)) * _868) * 0.949999988079071044921875);
    float _2649 = _2648 * _2648;
    float _2650 = cbLight._m0[_2349].x + _943;
    float _2651 = cbLight._m0[_2349].y + _944;
    float _2652 = cbLight._m0[_2349].z + _945;
    float _2656 = inversesqrt(dot(vec3(_2650, _2651, _2652), vec3(_2650, _2651, _2652)));
    float _2657 = _2656 * _2650;
    float _2658 = _2656 * _2651;
    float _2659 = _2656 * _2652;
    float _2660 = dot(vec3(_865, _866, _867), vec3(cbLight._m0[_2349].xyz));
    float _4699 = isnan(0.0) ? _2660 : (isnan(_2660) ? 0.0 : max(_2660, 0.0));
    float _2663 = isnan(1.0) ? _4699 : (isnan(_4699) ? 1.0 : min(_4699, 1.0));
    float _2664 = dot(vec3(_865, _866, _867), vec3(_2657, _2658, _2659));
    float _4710 = isnan(0.0) ? _2664 : (isnan(_2664) ? 0.0 : max(_2664, 0.0));
    float _2667 = isnan(1.0) ? _4710 : (isnan(_4710) ? 1.0 : min(_4710, 1.0));
    float _2668 = dot(vec3(cbLight._m0[_2349].xyz), vec3(_2657, _2658, _2659));
    float _4721 = isnan(0.0) ? _2668 : (isnan(_2668) ? 0.0 : max(_2668, 0.0));
    float _2672 = _2649 * _2649;
    float _2676 = ((_2667 * _2667) * (_2672 + (-1.0))) + 1.0;
    float _2685 = (exp2(log2(1.0 - (isnan(1.0) ? _4721 : (isnan(_4721) ? 1.0 : min(_4721, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2686 = 1.0 - _2649;
    float _2696 = (0.5 / (((_2585 * ((_2663 * _2686) + _2649)) + 9.9999999392252902907785028219223e-09) + (((_2585 * _2686) + _2649) * _2663))) * _2663;
    float _4732 = isnan(0.0) ? _2696 : (isnan(_2696) ? 0.0 : max(_2696, 0.0));
    float _2698 = (isnan(1.0) ? _4732 : (isnan(_4732) ? 1.0 : min(_4732, 1.0))) * (_2672 / ((_2676 * _2676) * 3.141590118408203125));
    float _2708 = (((_2685 * cbLight._m0[_2637].x) * _2698) * _2332) + ((((cbLight._m0[_2556].x * _2298) * _2609) * _2623) * _2345);
    float _2709 = (((_2685 * cbLight._m0[_2637].y) * _2698) * _2332) + ((((cbLight._m0[_2556].y * _2300) * _2609) * _2623) * _2345);
    float _2710 = (((_2685 * cbLight._m0[_2637].z) * _2698) * _2332) + ((((cbLight._m0[_2556].z * _2302) * _2609) * _2623) * _2345);
    float _2766;
    float _2768;
    float _2770;
    if (_2385)
    {
        _2766 = _2708;
        _2768 = _2709;
        _2770 = _2710;
    }
    else
    {
        uint _2772 = _2309 + 2u;
        uint _2776 = _2309 + 10u;
        float _2790 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2772].w)) * _868) * 0.949999988079071044921875);
        float _2791 = _2790 * _2790;
        float _2792 = cbLight._m0[_2772].x + _943;
        float _2793 = cbLight._m0[_2772].y + _944;
        float _2794 = cbLight._m0[_2772].z + _945;
        float _2798 = inversesqrt(dot(vec3(_2792, _2793, _2794), vec3(_2792, _2793, _2794)));
        float _2799 = _2798 * _2792;
        float _2800 = _2798 * _2793;
        float _2801 = _2798 * _2794;
        float _2802 = dot(vec3(_865, _866, _867), vec3(cbLight._m0[_2772].xyz));
        float _4743 = isnan(0.0) ? _2802 : (isnan(_2802) ? 0.0 : max(_2802, 0.0));
        float _2805 = isnan(1.0) ? _4743 : (isnan(_4743) ? 1.0 : min(_4743, 1.0));
        float _2806 = dot(vec3(_865, _866, _867), vec3(_2799, _2800, _2801));
        float _4754 = isnan(0.0) ? _2806 : (isnan(_2806) ? 0.0 : max(_2806, 0.0));
        float _2809 = isnan(1.0) ? _4754 : (isnan(_4754) ? 1.0 : min(_4754, 1.0));
        float _2810 = dot(vec3(cbLight._m0[_2772].xyz), vec3(_2799, _2800, _2801));
        float _4765 = isnan(0.0) ? _2810 : (isnan(_2810) ? 0.0 : max(_2810, 0.0));
        float _2814 = _2791 * _2791;
        float _2818 = ((_2809 * _2809) * (_2814 + (-1.0))) + 1.0;
        float _2827 = (exp2(log2(1.0 - (isnan(1.0) ? _4765 : (isnan(_4765) ? 1.0 : min(_4765, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2828 = 1.0 - _2791;
        float _2838 = (0.5 / (((_2585 * ((_2805 * _2828) + _2791)) + 9.9999999392252902907785028219223e-09) + (((_2585 * _2828) + _2791) * _2805))) * _2805;
        float _4776 = isnan(0.0) ? _2838 : (isnan(_2838) ? 0.0 : max(_2838, 0.0));
        float _2840 = (isnan(1.0) ? _4776 : (isnan(_4776) ? 1.0 : min(_4776, 1.0))) * (_2814 / ((_2818 * _2818) * 3.141590118408203125));
        float _2841 = isnan(1.0) ? _2324 : (isnan(_2324) ? 1.0 : min(_2324, 1.0));
        _2766 = (((_2827 * cbLight._m0[_2776].x) * _2840) * _2841) + _2708;
        _2768 = (((_2827 * cbLight._m0[_2776].y) * _2840) * _2841) + _2709;
        _2770 = (((_2827 * cbLight._m0[_2776].z) * _2840) * _2841) + _2710;
    }
    float _2872;
    float _2874;
    float _2876;
    if (_2494)
    {
        _2872 = _2766;
        _2874 = _2768;
        _2876 = _2770;
    }
    else
    {
        uint _2883 = _2309 + 3u;
        uint _2887 = _2309 + 11u;
        float _2901 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2883].w)) * _868) * 0.949999988079071044921875);
        float _2902 = _2901 * _2901;
        float _2903 = cbLight._m0[_2883].x + _943;
        float _2904 = cbLight._m0[_2883].y + _944;
        float _2905 = cbLight._m0[_2883].z + _945;
        float _2909 = inversesqrt(dot(vec3(_2903, _2904, _2905), vec3(_2903, _2904, _2905)));
        float _2910 = _2909 * _2903;
        float _2911 = _2909 * _2904;
        float _2912 = _2909 * _2905;
        float _2913 = dot(vec3(_865, _866, _867), vec3(cbLight._m0[_2883].xyz));
        float _4792 = isnan(0.0) ? _2913 : (isnan(_2913) ? 0.0 : max(_2913, 0.0));
        float _2916 = isnan(1.0) ? _4792 : (isnan(_4792) ? 1.0 : min(_4792, 1.0));
        float _2917 = dot(vec3(_865, _866, _867), vec3(_2910, _2911, _2912));
        float _4803 = isnan(0.0) ? _2917 : (isnan(_2917) ? 0.0 : max(_2917, 0.0));
        float _2920 = isnan(1.0) ? _4803 : (isnan(_4803) ? 1.0 : min(_4803, 1.0));
        float _2921 = dot(vec3(cbLight._m0[_2883].xyz), vec3(_2910, _2911, _2912));
        float _4814 = isnan(0.0) ? _2921 : (isnan(_2921) ? 0.0 : max(_2921, 0.0));
        float _2925 = _2902 * _2902;
        float _2929 = ((_2920 * _2920) * (_2925 + (-1.0))) + 1.0;
        float _2938 = (exp2(log2(1.0 - (isnan(1.0) ? _4814 : (isnan(_4814) ? 1.0 : min(_4814, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2939 = 1.0 - _2902;
        float _2949 = (0.5 / (((_2585 * ((_2916 * _2939) + _2902)) + 9.9999999392252902907785028219223e-09) + (((_2585 * _2939) + _2902) * _2916))) * _2916;
        float _4825 = isnan(0.0) ? _2949 : (isnan(_2949) ? 0.0 : max(_2949, 0.0));
        float _2951 = (isnan(1.0) ? _4825 : (isnan(_4825) ? 1.0 : min(_4825, 1.0))) * (_2925 / ((_2929 * _2929) * 3.141590118408203125));
        float _2952 = isnan(1.0) ? _2325 : (isnan(_2325) ? 1.0 : min(_2325, 1.0));
        _2872 = (((_2938 * cbLight._m0[_2887].x) * _2951) * _2952) + _2766;
        _2874 = (((_2938 * cbLight._m0[_2887].y) * _2951) * _2952) + _2768;
        _2876 = (((_2938 * cbLight._m0[_2887].z) * _2951) * _2952) + _2770;
    }
    float _3018;
    float _3020;
    float _3022;
    float _3024;
    float _3026;
    float _3028;
    if (_2307.y == 0u)
    {
        uvec4 _2973 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2974 = _2973.x;
        uint _2985 = uint((float(_2973.y) * floor(float(uint(cbSceneParam._m0[85u].y * _952) / _2974))) + floor(float(uint(cbSceneParam._m0[85u].x * _951) / _2974)));
        float _2995 = (log2(_2085 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2996 = isnan(0.0) ? _2995 : (isnan(_2995) ? 0.0 : max(_2995, 0.0));
        uint _2999 = uint(isnan(14.0) ? _2996 : (isnan(_2996) ? 14.0 : min(_2996, 14.0)));
        uvec4 _3004 = texelFetch(g_lightClusterGridBuffer, int(((_2999 << 2u) + (_2985 << 6u)) >> 2u));
        uint _3005 = _3004.x;
        uint _3006 = _2973.z;
        float _3085;
        float _3087;
        float _3089;
        float _3091;
        float _3093;
        float _3095;
        if (((((1u << ((_3006 >> 4u) & 15u)) + 4294967295u) & _3005) == 0u) || ((_3006 & 240u) == 0u))
        {
            _3085 = 0.0;
            _3087 = 0.0;
            _3089 = 0.0;
            _3091 = 0.0;
            _3093 = 0.0;
            _3095 = 0.0;
        }
        else
        {
            float _3086;
            float _3088;
            float _3090;
            float _3092;
            float _3094;
            float _3096;
            float _3230 = 0.0;
            float _3231 = 0.0;
            float _3232 = 0.0;
            float _3233 = 0.0;
            float _3234 = 0.0;
            float _3235 = 0.0;
            uint _3236 = 0u;
            uint _3245;
            bool _3246;
            for (;;)
            {
                _3245 = texelFetch(g_lightClassification, int((((_2999 << 5u) + (_2985 << 9u)) + (_3236 << 2u)) >> 2u)).x;
                _3246 = _3245 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3246)
                {
                    frontier_phi_66_pred = _3235;
                    frontier_phi_66_pred_1 = _3234;
                    frontier_phi_66_pred_2 = _3233;
                    frontier_phi_66_pred_3 = _3232;
                    frontier_phi_66_pred_4 = _3231;
                    frontier_phi_66_pred_5 = _3230;
                }
                else
                {
                    float _3354;
                    float _3355;
                    float _3356;
                    float _3357;
                    float _3358;
                    float _3359;
                    uint _3360;
                    _3354 = _3230;
                    _3355 = _3231;
                    _3356 = _3232;
                    _3357 = _3233;
                    _3358 = _3234;
                    _3359 = _3235;
                    _3360 = _3245;
                    float _3286;
                    float _3287;
                    float _3288;
                    float _3289;
                    float _3290;
                    float _3291;
                    for (;;)
                    {
                        uint _3364 = uint(findLSB(_3360)) + (_3236 << 5u);
                        uint _3361 = (_3360 + 4294967295u) & _3360;
                        uint _3366 = _3364 * 48u;
                        vec4 _3380 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3366)).x, texelFetch(g_PointLightRenderingBuffer, int(_3366 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3366 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3366 + 3u)).x));
                        uint _3386 = (_3364 * 48u) + 4u;
                        vec4 _3399 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3386)).x, texelFetch(g_PointLightRenderingBuffer, int(_3386 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3386 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3386 + 3u)).x));
                        uint _3405 = (_3364 * 48u) + 8u;
                        vec3 _3416 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3405)).x, texelFetch(g_PointLightRenderingBuffer, int(_3405 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3405 + 2u)).x));
                        float _3420 = _3380.x - _2083;
                        float _3421 = _3380.y - _2084;
                        float _3422 = _3380.z - _2085;
                        float _3423 = dot(vec3(_3420, _3421, _3422), vec3(_3420, _3421, _3422));
                        float _3426 = inversesqrt(_3423);
                        float _3427 = _3426 * _3420;
                        float _3428 = _3426 * _3421;
                        float _3429 = _3426 * _3422;
                        float _3430 = dot(vec3(_970, _973, _976), vec3(_3427, _3428, _3429));
                        float _3435 = 1.0 - (_3423 * _3380.w);
                        float _4851 = isnan(0.0) ? _3435 : (isnan(_3435) ? 0.0 : max(_3435, 0.0));
                        float _3436 = isnan(1.0) ? _4851 : (isnan(_4851) ? 1.0 : min(_4851, 1.0));
                        float _3437 = sqrt(_3423) * _3399.w;
                        float _3440 = 1.39999997615814208984375 / (_3437 + 1.39999997615814208984375);
                        float _3441 = _3440 * _3440;
                        float _3444 = ((1.0 - _3441) * _3430) + _3441;
                        float _3447 = _3437 * _3437;
                        float _3451 = ((isnan(0.0) ? _3444 : (isnan(_3444) ? 0.0 : max(_3444, 0.0))) * _3436) / ((_3447 * 0.699999988079071044921875) + 1.0);
                        float _3455 = (-0.0) - _2083;
                        float _3456 = (-0.0) - _2084;
                        float _3457 = (-0.0) - _2085;
                        float _3461 = inversesqrt(dot(vec3(_3455, _3456, _3457), vec3(_3455, _3456, _3457)));
                        float _3462 = _3461 * _3455;
                        float _3463 = _3461 * _3456;
                        float _3464 = _3461 * _3457;
                        float _3471 = exp2(log2(1.0 / ((_3447 * 3.5) + 5.0)) * 0.25);
                        float _3472 = 1.0 - _1030;
                        float _3479 = sqrt(1.0 - ((1.0 - (_3472 * _3472)) * (1.0 - (_3471 * _3471))));
                        float _3480 = _3479 * _3479;
                        float _3481 = _3480 * _3480;
                        float _3482 = _3462 + _3427;
                        float _3483 = _3463 + _3428;
                        float _3484 = _3464 + _3429;
                        float _3488 = inversesqrt(dot(vec3(_3482, _3483, _3484), vec3(_3482, _3483, _3484)));
                        float _3492 = dot(vec3(_970, _973, _976), vec3(_3462, _3463, _3464));
                        float _4867 = isnan(0.0) ? _3492 : (isnan(_3492) ? 0.0 : max(_3492, 0.0));
                        float _3495 = isnan(1.0) ? _4867 : (isnan(_4867) ? 1.0 : min(_4867, 1.0));
                        float _3496 = dot(vec3(_970, _973, _976), vec3(_3488 * _3482, _3488 * _3483, _3488 * _3484));
                        float _4878 = isnan(0.0) ? _3496 : (isnan(_3496) ? 0.0 : max(_3496, 0.0));
                        float _3499 = isnan(1.0) ? _4878 : (isnan(_4878) ? 1.0 : min(_4878, 1.0));
                        float _3503 = ((_3499 * _3499) * (_3481 + (-1.0))) + 1.0;
                        float _3504 = _3440 * _3480;
                        float _3505 = _3504 * _3504;
                        float _3508 = ((1.0 - _3505) * _3430) + _3505;
                        float _4889 = isnan(0.0) ? _3508 : (isnan(_3508) ? 0.0 : max(_3508, 0.0));
                        float _3509 = isnan(1.0) ? _4889 : (isnan(_4889) ? 1.0 : min(_4889, 1.0));
                        float _3510 = 1.0 - _3480;
                        float _3520 = (0.5 / (((_3509 * ((_3495 * _3510) + _3480)) + 9.9999999392252902907785028219223e-09) + (((_3509 * _3510) + _3480) * _3495))) * _3509;
                        float _4900 = isnan(0.0) ? _3520 : (isnan(_3520) ? 0.0 : max(_3520, 0.0));
                        float _3531 = (((_3481 * 3.1415927410125732421875) * (isnan(1.0) ? _4900 : (isnan(_4900) ? 1.0 : min(_4900, 1.0)))) / ((_3503 * _3503) * ((_3447 * 2.1991131305694580078125) + 3.141590118408203125))) * _3436;
                        _3289 = (_3451 * _3399.x) + _3357;
                        _3290 = (_3451 * _3399.y) + _3358;
                        _3291 = (_3451 * _3399.z) + _3359;
                        _3286 = (_3531 * _3416.x) + _3354;
                        _3287 = (_3531 * _3416.y) + _3355;
                        _3288 = (_3531 * _3416.z) + _3356;
                        if (_3361 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3354 = _3286;
                            _3355 = _3287;
                            _3356 = _3288;
                            _3357 = _3289;
                            _3358 = _3290;
                            _3359 = _3291;
                            _3360 = _3361;
                        }
                    }
                    frontier_phi_66_pred = _3291;
                    frontier_phi_66_pred_1 = _3290;
                    frontier_phi_66_pred_2 = _3289;
                    frontier_phi_66_pred_3 = _3288;
                    frontier_phi_66_pred_4 = _3287;
                    frontier_phi_66_pred_5 = _3286;
                }
                _3096 = frontier_phi_66_pred;
                _3094 = frontier_phi_66_pred_1;
                _3092 = frontier_phi_66_pred_2;
                _3090 = frontier_phi_66_pred_3;
                _3088 = frontier_phi_66_pred_4;
                _3086 = frontier_phi_66_pred_5;
                uint _3237 = _3236 + 1u;
                if (_3237 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3230 = _3086;
                    _3231 = _3088;
                    _3232 = _3090;
                    _3233 = _3092;
                    _3234 = _3094;
                    _3235 = _3096;
                    _3236 = _3237;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3085 = _3086;
            _3087 = _3088;
            _3089 = _3090;
            _3091 = _3092;
            _3093 = _3094;
            _3095 = _3096;
        }
        uvec4 _3099 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3100 = _3099.z;
        uint _3102 = (_3100 >> 8u) & 15u;
        float _3198;
        float _3200;
        float _3202;
        float _3204;
        float _3206;
        float _3208;
        if (((4294967295u << _3102) & _3005) == 0u)
        {
            _3198 = _3085;
            _3200 = _3087;
            _3202 = _3089;
            _3204 = _3091;
            _3206 = _3093;
            _3208 = _3095;
        }
        else
        {
            float _3223 = inversesqrt(dot(vec3(_2083, _2084, _2085), vec3(_2083, _2084, _2085)));
            float _3224 = _3223 * _2083;
            float _3225 = _3223 * _2084;
            float _3226 = _3223 * _2085;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_3102 < ((_3100 >> 12u) & 15u))
            {
                float _3199;
                float _3201;
                float _3203;
                float _3205;
                float _3207;
                float _3209;
                float _3337 = _3085;
                float _3338 = _3087;
                float _3339 = _3089;
                float _3340 = _3091;
                float _3341 = _3093;
                float _3342 = _3095;
                uint _3343 = _3102;
                uint _3352;
                bool _3353;
                for (;;)
                {
                    _3352 = texelFetch(g_lightClassification, int((((_2999 << 5u) + (_2985 << 9u)) + (_3343 << 2u)) >> 2u)).x;
                    _3353 = _3352 == 0u;
                    float frontier_phi_72_pred;
                    float frontier_phi_72_pred_1;
                    float frontier_phi_72_pred_2;
                    float frontier_phi_72_pred_3;
                    float frontier_phi_72_pred_4;
                    float frontier_phi_72_pred_5;
                    if (_3353)
                    {
                        frontier_phi_72_pred = _3342;
                        frontier_phi_72_pred_1 = _3341;
                        frontier_phi_72_pred_2 = _3340;
                        frontier_phi_72_pred_3 = _3339;
                        frontier_phi_72_pred_4 = _3338;
                        frontier_phi_72_pred_5 = _3337;
                    }
                    else
                    {
                        float _3536;
                        float _3537;
                        float _3538;
                        float _3539;
                        float _3540;
                        float _3541;
                        float _3829;
                        float _3830;
                        float _3831;
                        float _3832;
                        float _3833;
                        float _3834;
                        float _3549 = _3337;
                        float _3550 = _3338;
                        float _3551 = _3339;
                        float _3552 = _3340;
                        float _3553 = _3341;
                        float _3554 = _3342;
                        uint _3555 = _3352;
                        uint _3556;
                        vec4 _3581;
                        float _3582;
                        vec4 _3597;
                        vec3 _3609;
                        vec4 _3624;
                        vec4 _3639;
                        float _3685;
                        bool _3686;
                        for (;;)
                        {
                            uint _3566 = ((_3343 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3555));
                            _3556 = (_3555 + 4294967295u) & _3555;
                            uint _3568 = _3566 * 40u;
                            _3581 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3568)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3568 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3568 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3568 + 3u)).x));
                            _3582 = _3581.w;
                            uint _3584 = (_3566 * 40u) + 4u;
                            _3597 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3584)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3584 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3584 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3584 + 3u)).x));
                            uint _3599 = (_3566 * 40u) + 8u;
                            _3609 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3599)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3599 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3599 + 2u)).x));
                            uint _3611 = (_3566 * 40u) + 16u;
                            _3624 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3611)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3611 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3611 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3611 + 3u)).x));
                            uint _3626 = (_3566 * 40u) + 20u;
                            _3639 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3626)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3626 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3626 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3626 + 3u)).x));
                            uint _3641 = (_3566 * 40u) + 24u;
                            vec4 _3654 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3641)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3641 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3641 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3641 + 3u)).x));
                            uint _3660 = (_3566 * 40u) + 28u;
                            vec4 _3673 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3660)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3660 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3660 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3660 + 3u)).x));
                            _3685 = fma(_2085, _3673.z, fma(_2084, _3673.y, _3673.x * _2083)) + _3673.w;
                            _3686 = !((fma(_2085, _3654.z, fma(_2084, _3654.y, _3654.x * _2083)) + _3654.w) <= 0.0);
                            float frontier_phi_78_pred;
                            float frontier_phi_78_pred_1;
                            float frontier_phi_78_pred_2;
                            float frontier_phi_78_pred_3;
                            float frontier_phi_78_pred_4;
                            float frontier_phi_78_pred_5;
                            if (_3686)
                            {
                                float _3713 = _3581.x - _2083;
                                float _3714 = _3581.y - _2084;
                                float _3715 = _3581.z - _2085;
                                float _3716 = dot(vec3(_3713, _3714, _3715), vec3(_3713, _3714, _3715));
                                float _3719 = inversesqrt(_3716);
                                float _3720 = _3719 * _3713;
                                float _3721 = _3719 * _3714;
                                float _3722 = _3719 * _3715;
                                float _3726 = 1.0 - (_3716 / (_3582 * _3582));
                                float _4911 = isnan(0.0) ? _3726 : (isnan(_3726) ? 0.0 : max(_3726, 0.0));
                                float _3727 = isnan(1.0) ? _4911 : (isnan(_4911) ? 1.0 : min(_4911, 1.0));
                                float _3731 = sqrt(_3716) * _3597.w;
                                float _3733 = 1.39999997615814208984375 / (_3731 + 1.39999997615814208984375);
                                float _3734 = _3733 * _3733;
                                float _3737 = ((1.0 - _3734) * dot(vec3(_3720, _3721, _3722), vec3(_970, _973, _976))) + _3734;
                                float _3740 = _3731 * _3731;
                                float _3744 = (fma(_2085, _3624.z, fma(_2084, _3624.y, _3624.x * _2083)) + _3624.w) / _3685;
                                float _3745 = (fma(_2085, _3639.z, fma(_2084, _3639.y, _3639.x * _2083)) + _3639.w) / _3685;
                                float _3749 = 1.0 - dot(vec2(_3744, _3745), vec2(_3744, _3745));
                                float _4927 = isnan(0.0) ? _3749 : (isnan(_3749) ? 0.0 : max(_3749, 0.0));
                                float _3750 = isnan(1.0) ? _4927 : (isnan(_4927) ? 1.0 : min(_4927, 1.0));
                                float _3751 = _3750 * (((isnan(0.0) ? _3737 : (isnan(_3737) ? 0.0 : max(_3737, 0.0))) * _3727) / ((_3740 * 0.699999988079071044921875) + 1.0));
                                float _3763 = exp2(log2(1.0 / ((_3740 * 3.5) + 5.0)) * 0.25);
                                float _3764 = 1.0 - _1030;
                                float _3771 = sqrt(1.0 - ((1.0 - (_3764 * _3764)) * (1.0 - (_3763 * _3763))));
                                float _3772 = _3771 * _3771;
                                float _3773 = _3772 * _3772;
                                float _3774 = _3720 - _3224;
                                float _3775 = _3721 - _3225;
                                float _3776 = _3722 - _3226;
                                float _3780 = inversesqrt(dot(vec3(_3774, _3775, _3776), vec3(_3774, _3775, _3776)));
                                float _3784 = dot(vec3(_970, _973, _976), vec3((-0.0) - _3224, (-0.0) - _3225, (-0.0) - _3226));
                                float _4938 = isnan(0.0) ? _3784 : (isnan(_3784) ? 0.0 : max(_3784, 0.0));
                                float _3787 = isnan(1.0) ? _4938 : (isnan(_4938) ? 1.0 : min(_4938, 1.0));
                                float _3788 = dot(vec3(_970, _973, _976), vec3(_3780 * _3774, _3780 * _3775, _3780 * _3776));
                                float _4949 = isnan(0.0) ? _3788 : (isnan(_3788) ? 0.0 : max(_3788, 0.0));
                                float _3791 = isnan(1.0) ? _4949 : (isnan(_4949) ? 1.0 : min(_4949, 1.0));
                                float _3795 = ((_3791 * _3791) * (_3773 + (-1.0))) + 1.0;
                                float _3796 = _3733 * _3772;
                                float _3797 = _3796 * _3796;
                                float _3803 = ((1.0 - _3797) * dot(vec3(_970, _973, _976), vec3(_3720, _3721, _3722))) + _3797;
                                float _4960 = isnan(0.0) ? _3803 : (isnan(_3803) ? 0.0 : max(_3803, 0.0));
                                float _3804 = isnan(1.0) ? _4960 : (isnan(_4960) ? 1.0 : min(_4960, 1.0));
                                float _3805 = 1.0 - _3772;
                                float _3815 = (0.5 / (((_3804 * ((_3787 * _3805) + _3772)) + 9.9999999392252902907785028219223e-09) + (((_3804 * _3805) + _3772) * _3787))) * _3804;
                                float _4971 = isnan(0.0) ? _3815 : (isnan(_3815) ? 0.0 : max(_3815, 0.0));
                                float _3825 = (_3750 * _3727) * (((_3773 * 3.1415927410125732421875) * (isnan(1.0) ? _4971 : (isnan(_4971) ? 1.0 : min(_4971, 1.0)))) / ((_3795 * _3795) * ((_3740 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_78_pred = _3751 * _3597.y;
                                frontier_phi_78_pred_1 = _3751 * _3597.x;
                                frontier_phi_78_pred_2 = _3825 * _3609.z;
                                frontier_phi_78_pred_3 = _3825 * _3609.y;
                                frontier_phi_78_pred_4 = _3825 * _3609.x;
                                frontier_phi_78_pred_5 = _3751 * _3597.z;
                            }
                            else
                            {
                                frontier_phi_78_pred = 0.0;
                                frontier_phi_78_pred_1 = 0.0;
                                frontier_phi_78_pred_2 = 0.0;
                                frontier_phi_78_pred_3 = 0.0;
                                frontier_phi_78_pred_4 = 0.0;
                                frontier_phi_78_pred_5 = 0.0;
                            }
                            _3833 = frontier_phi_78_pred;
                            _3832 = frontier_phi_78_pred_1;
                            _3831 = frontier_phi_78_pred_2;
                            _3830 = frontier_phi_78_pred_3;
                            _3829 = frontier_phi_78_pred_4;
                            _3834 = frontier_phi_78_pred_5;
                            _3539 = _3832 + _3552;
                            _3540 = _3833 + _3553;
                            _3541 = _3834 + _3554;
                            _3536 = _3829 + _3549;
                            _3537 = _3830 + _3550;
                            _3538 = _3831 + _3551;
                            if (_3556 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3549 = _3536;
                                _3550 = _3537;
                                _3551 = _3538;
                                _3552 = _3539;
                                _3553 = _3540;
                                _3554 = _3541;
                                _3555 = _3556;
                                continue;
                            }
                        }
                        frontier_phi_72_pred = _3541;
                        frontier_phi_72_pred_1 = _3540;
                        frontier_phi_72_pred_2 = _3539;
                        frontier_phi_72_pred_3 = _3538;
                        frontier_phi_72_pred_4 = _3537;
                        frontier_phi_72_pred_5 = _3536;
                    }
                    _3209 = frontier_phi_72_pred;
                    _3207 = frontier_phi_72_pred_1;
                    _3205 = frontier_phi_72_pred_2;
                    _3203 = frontier_phi_72_pred_3;
                    _3201 = frontier_phi_72_pred_4;
                    _3199 = frontier_phi_72_pred_5;
                    uint _3344 = _3343 + 1u;
                    if (_3344 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3337 = _3199;
                        _3338 = _3201;
                        _3339 = _3203;
                        _3340 = _3205;
                        _3341 = _3207;
                        _3342 = _3209;
                        _3343 = _3344;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _3209;
                frontier_phi_60_61_ladder_1 = _3207;
                frontier_phi_60_61_ladder_2 = _3203;
                frontier_phi_60_61_ladder_3 = _3201;
                frontier_phi_60_61_ladder_4 = _3199;
                frontier_phi_60_61_ladder_5 = _3205;
            }
            else
            {
                frontier_phi_60_61_ladder = _3095;
                frontier_phi_60_61_ladder_1 = _3093;
                frontier_phi_60_61_ladder_2 = _3089;
                frontier_phi_60_61_ladder_3 = _3087;
                frontier_phi_60_61_ladder_4 = _3085;
                frontier_phi_60_61_ladder_5 = _3091;
            }
            _3198 = frontier_phi_60_61_ladder_4;
            _3200 = frontier_phi_60_61_ladder_3;
            _3202 = frontier_phi_60_61_ladder_2;
            _3204 = frontier_phi_60_61_ladder_5;
            _3206 = frontier_phi_60_61_ladder_1;
            _3208 = frontier_phi_60_61_ladder;
        }
        float _3213 = isnan(1.0) ? _1014 : (isnan(_1014) ? 1.0 : min(_1014, 1.0));
        _3018 = (_3213 * _3204) + _2549;
        _3020 = (_3213 * _3206) + _2551;
        _3022 = (_3213 * _3208) + _2553;
        _3024 = ((_3198 * 0.039999999105930328369140625) * _3213) + _2872;
        _3026 = ((_3200 * 0.039999999105930328369140625) * _3213) + _2874;
        _3028 = ((_3202 * 0.039999999105930328369140625) * _3213) + _2876;
    }
    else
    {
        _3018 = _2549;
        _3020 = _2551;
        _3022 = _2553;
        _3024 = _2872;
        _3026 = _2874;
        _3028 = _2876;
    }
    float _4987 = isnan(0.0) ? _999 : (isnan(_999) ? 0.0 : max(_999, 0.0));
    float _4998 = isnan(0.0) ? _1000 : (isnan(_1000) ? 0.0 : max(_1000, 0.0));
    float _5009 = isnan(0.0) ? _1001 : (isnan(_1001) ? 0.0 : max(_1001, 0.0));
    uint _3048 = _283 + 6u;
    float _3056 = _951 / cbSceneParam._m0[86u].x;
    float _3057 = _952 / cbSceneParam._m0[86u].y;
    vec4 _3071 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3056, _3057, (log2((isnan(cbSceneParam._m0[77u].w) ? _886 : (isnan(_886) ? cbSceneParam._m0[77u].w : min(_886, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3073 = _3071.x;
    float _3074 = _3071.y;
    float _3075 = _3071.z;
    float _3076 = _3071.w;
    float _3148;
    float _3150;
    float _3152;
    float _3154;
    if (_886 > cbSceneParam._m0[78u].w)
    {
        float _3110 = isnan(_886) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _886 : min(cbSceneParam._m0[80u].w, _886));
        float _3111 = _3110 / _886;
        float _3122 = _3111 * _936;
        float _3123 = _937 * _3111;
        float _3124 = (-0.0) - _3123;
        float _3126 = _3111 * _938;
        float _3128 = (cbSceneParam._m0[77u].w * _3124) / _3110;
        float _3129 = _3128 + cbSceneParam._m0[79u].w;
        float _3130 = cbSceneParam._m0[79u].w - _3123;
        float _3136 = sqrt(((_3122 * _3122) + (_3123 * _3123)) + (_3126 * _3126));
        float _3139 = (1.0 - (cbSceneParam._m0[77u].w / _3110)) * _3136;
        float _3144 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3146 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3299;
        if (abs((_3124 - _3128) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3299 = ((((_3129 > 0.0) ? exp2(_3144 * _3129) : (2.0 - exp2(_3146 * _3129))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3139;
        }
        else
        {
            float _3259 = 1.0 / cbSceneParam._m0[80u].x;
            float _3260 = isnan(_3130) ? _3129 : (isnan(_3129) ? _3130 : max(_3129, _3130));
            float _3261 = isnan(_3130) ? _3129 : (isnan(_3129) ? _3130 : min(_3129, _3130));
            float _3270 = isnan(0.0) ? _3260 : (isnan(_3260) ? 0.0 : min(_3260, 0.0));
            float _3271 = isnan(0.0) ? _3261 : (isnan(_3261) ? 0.0 : min(_3261, 0.0));
            _3299 = ((abs(_3136 / _3124) * cbSceneParam._m0[80u].y) * ((((_3270 - _3271) * 2.0) - ((exp2(_3144 * (isnan(0.0) ? _3260 : (isnan(_3260) ? 0.0 : max(_3260, 0.0)))) - exp2(_3144 * (isnan(0.0) ? _3261 : (isnan(_3261) ? 0.0 : max(_3261, 0.0))))) * _3259)) - ((exp2(_3146 * _3270) - exp2(_3146 * _3271)) * _3259))) + (_3139 * cbSceneParam._m0[80u].z);
        }
        vec4 _3301 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3056, _3057, 1.0), 0.0);
        float _3310 = exp2((_3299 * (-1.44269502162933349609375)) * (1.0 - _3301.w));
        float _3311 = log2(_3310);
        float _3327 = log2(_3076);
        _3148 = (exp2(_3327 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3311 * cbSceneParam._m0[78u].x)) * _3301.x) / cbSceneParam._m0[78u].x)) + _3073;
        _3150 = (exp2(_3327 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3311 * cbSceneParam._m0[78u].y)) * _3301.y) / cbSceneParam._m0[78u].y)) + _3074;
        _3152 = (exp2(_3327 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3311 * cbSceneParam._m0[78u].z)) * _3301.z) / cbSceneParam._m0[78u].z)) + _3075;
        _3154 = _3310 * _3076;
    }
    else
    {
        _3148 = _3073;
        _3150 = _3074;
        _3152 = _3075;
        _3154 = _3076;
    }
    float _3166 = roundEven(cbMatDynParam._m0[0u].y);
    bool _3167 = _3166 == 3.0;
    float _3168 = log2(_3154);
    float _3175 = exp2(_3168 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4987 : (isnan(_4987) ? 1.0 : min(_4987, 1.0))) * (_3018 + ((isnan(0.0) ? _1740 : (isnan(_1740) ? 0.0 : max(_1740, 0.0))) * _1014))) + ((_3024 + ((isnan(0.0) ? _2030 : (isnan(_2030) ? 0.0 : max(_2030, 0.0))) * _1819)) * cbPerFrame._m0[3u].x));
    float _3176 = exp2(_3168 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4998 : (isnan(_4998) ? 1.0 : min(_4998, 1.0))) * (_3020 + ((isnan(0.0) ? _1743 : (isnan(_1743) ? 0.0 : max(_1743, 0.0))) * _1014))) + ((_3026 + ((isnan(0.0) ? _2033 : (isnan(_2033) ? 0.0 : max(_2033, 0.0))) * _1819)) * cbPerFrame._m0[3u].x));
    float _3177 = exp2(_3168 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _5009 : (isnan(_5009) ? 1.0 : min(_5009, 1.0))) * (_3022 + ((isnan(0.0) ? _1746 : (isnan(_1746) ? 0.0 : max(_1746, 0.0))) * _1014))) + ((_3028 + ((isnan(0.0) ? _2036 : (isnan(_2036) ? 0.0 : max(_2036, 0.0))) * _1819)) * cbPerFrame._m0[3u].x));
    float _3186 = (_3166 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _3186 * (_3167 ? _3175 : (_3175 + (cbSceneParam._m0[72u].w * _3148)));
    SV_Target.y = _3186 * (_3167 ? _3176 : (_3176 + (cbSceneParam._m0[72u].w * _3150)));
    SV_Target.z = _3186 * (_3167 ? _3177 : (_3177 + (cbSceneParam._m0[72u].w * _3152)));
    SV_Target.w = cbInstanceData._m0[_3048].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_3048].w;
}


