#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 13) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_22;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_10;
layout(set = 0, binding = 20) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_6;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1313;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _223 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _224 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _225 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _231 = inversesqrt(dot(vec3(_223, _224, _225), vec3(_223, _224, _225)));
    float _238 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _245 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _259 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _261 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _262 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3901 = isnan(0.0) ? _259 : (isnan(_259) ? 0.0 : max(_259, 0.0));
    float _3912 = isnan(0.0) ? _261 : (isnan(_261) ? 0.0 : max(_261, 0.0));
    float _3923 = isnan(0.0) ? _262 : (isnan(_262) ? 0.0 : max(_262, 0.0));
    uint _272 = uint(roundEven(NORMAL.w)) * 13u;
    uint _277 = _272 + 1u;
    uint _281 = _272 + 2u;
    float _290 = sqrt(((cbInstanceData._m0[_277].x * cbInstanceData._m0[_277].x) + (cbInstanceData._m0[_272].x * cbInstanceData._m0[_272].x)) + (cbInstanceData._m0[_281].x * cbInstanceData._m0[_281].x));
    float _291 = _290 * TEXCOORD.z;
    float _292 = _290 * TEXCOORD.w;
    vec4 _305 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _291) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _292) + cbTextureTilingScale._m0[13u].w));
    vec4 _329 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _334 = _329.x * cbMtdParam._m0[11u].x;
    float _335 = _329.y * cbMtdParam._m0[11u].y;
    float _336 = _329.z * cbMtdParam._m0[11u].z;
    vec4 _355 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _291) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _292) + cbTextureTilingScale._m0[5u].w));
    vec4 _374 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _409 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _411 = _409.x;
    float _423 = dot(vec4(_411, _409.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _440 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _374.x) * 2.0) - ((((_411 - _423) * cbMtdParam._m0[24u].z) + _423) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3934 = isnan(0.0) ? _440 : (isnan(_440) ? 0.0 : max(_440, 0.0));
    float _441 = isnan(1.0) ? _3934 : (isnan(_3934) ? 1.0 : min(_3934, 1.0));
    float _448 = (_441 * ((_355.x * cbMtdParam._m0[12u].x) - _334)) + _334;
    float _449 = (_441 * ((_355.y * cbMtdParam._m0[12u].y) - _335)) + _335;
    float _450 = (_441 * ((_355.z * cbMtdParam._m0[12u].z) - _336)) + _336;
    vec4 _467 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _291) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _292) + cbTextureTilingScale._m0[3u].w));
    vec4 _487 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _489 = _487.x;
    float _499 = dot(vec4(_489, _487.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _513 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _374.y) * 2.0) - ((((_489 - _499) * cbMtdParam._m0[24u].z) + _499) * cbMtdParam._m0[20u].w))) + 1.0;
    float _3945 = isnan(0.0) ? _513 : (isnan(_513) ? 0.0 : max(_513, 0.0));
    float _514 = isnan(1.0) ? _3945 : (isnan(_3945) ? 1.0 : min(_3945, 1.0));
    float _521 = (_514 * ((_467.x * cbMtdParam._m0[13u].x) - _448)) + _448;
    float _522 = (_514 * ((_467.y * cbMtdParam._m0[13u].y) - _449)) + _449;
    float _523 = (_514 * ((_467.z * cbMtdParam._m0[13u].z) - _450)) + _450;
    float _527 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _305.x) * _521;
    float _530 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _305.y) * _522;
    float _533 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _305.z) * _523;
    float _540 = ((_521 - _527) * (isnan(1.0) ? _3901 : (isnan(_3901) ? 1.0 : min(_3901, 1.0)))) + _527;
    float _541 = ((_522 - _530) * (isnan(1.0) ? _3912 : (isnan(_3912) ? 1.0 : min(_3912, 1.0)))) + _530;
    float _542 = ((_523 - _533) * (isnan(1.0) ? _3923 : (isnan(_3923) ? 1.0 : min(_3923, 1.0)))) + _533;
    vec4 _559 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _291) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _292) + cbTextureTilingScale._m0[20u].w));
    vec4 _582 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _291) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _292) + cbTextureTilingScale._m0[4u].w));
    vec4 _599 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _601 = _599.x;
    float _602 = _599.y;
    float _603 = _599.z;
    float _610 = ((_582.x - _601) * _441) + _601;
    float _611 = ((_582.y - _602) * _441) + _602;
    float _612 = ((_582.z - _603) * _441) + _603;
    vec4 _624 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _291) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _292) + cbTextureTilingScale._m0[2u].w));
    float _637 = ((_624.z - _612) * _514) + _612;
    float _640 = ((((_624.x - _610) * _514) + _610) * 2.0) + (-1.0);
    float _641 = ((((_624.y - _611) * _514) + _611) * 2.0) + (-1.0);
    float _642 = dot(vec2(_640, _641), vec2(_640, _641));
    float _3956 = isnan(0.0) ? _642 : (isnan(_642) ? 0.0 : max(_642, 0.0));
    float _647 = sqrt(1.0 - (isnan(1.0) ? _3956 : (isnan(_3956) ? 1.0 : min(_3956, 1.0))));
    vec4 _661 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _686 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _291) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _292) + cbTextureTilingScale._m0[11u].w));
    float _688 = _686.x;
    float _689 = 1.0 - _688;
    float _702 = (TEXCOORD_8.w - ((cbMtdParam._m0[21u].z * (1.0 - TEXCOORD_8.w)) * ((((_688 - _689) * cbMtdParam._m0[24u].w) + _689) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3967 = isnan(0.0) ? _702 : (isnan(_702) ? 0.0 : max(_702, 0.0));
    float _703 = isnan(1.0) ? _3967 : (isnan(_3967) ? 1.0 : min(_3967, 1.0));
    float _710 = (_703 * (cbMtdParam._m0[17u].x - _540)) + _540;
    float _711 = (_703 * (cbMtdParam._m0[17u].y - _541)) + _541;
    float _712 = (_703 * (cbMtdParam._m0[17u].z - _542)) + _542;
    float _717 = (((_559.z - _637) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _637;
    float _721 = ((_661.z - _717) * cbMtdParam._m0[19u].w) + _717;
    vec4 _734 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _291) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _292) + cbTextureTilingScale._m0[15u].w));
    float _741 = (_734.x * 2.0) + (-1.0);
    float _742 = (_734.y * 2.0) + (-1.0);
    float _743 = dot(vec2(_741, _742), vec2(_741, _742));
    float _3978 = isnan(0.0) ? _743 : (isnan(_743) ? 0.0 : max(_743, 0.0));
    float _751 = (_703 * (_734.z - _721)) + _721;
    float _760 = (_640 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_559.x * 2.0) + (-1.0)))) + (((_661.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _761 = (_641 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_559.y * 2.0) + (-1.0)))) + (((_661.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _773 = (((_741 - _760) + (cbMtdParam._m0[21u].x * _760)) * _703) + _760;
    float _774 = (((_742 - _761) + (cbMtdParam._m0[21u].x * _761)) * _703) + _761;
    float _775 = (_703 * (sqrt(1.0 - (isnan(1.0) ? _3978 : (isnan(_3978) ? 1.0 : min(_3978, 1.0)))) - _647)) + _647;
    float _777 = cbMtdParam._m0[22u].x + _661.w;
    float _780 = fma(_775, _238 * NORMAL.x, fma(_774, _245 * TANGENT.x, (_231 * _223) * _773));
    float _783 = fma(_775, _238 * NORMAL.y, fma(_774, _245 * TANGENT.y, (_231 * _224) * _773));
    float _786 = fma(_775, _238 * NORMAL.z, fma(_774, _245 * TANGENT.z, (_231 * _225) * _773));
    float _790 = inversesqrt(dot(vec3(_780, _783, _786), vec3(_780, _783, _786)));
    float _791 = _790 * _780;
    float _792 = _790 * _783;
    float _793 = _790 * _786;
    float _3989 = isnan(0.0) ? _751 : (isnan(_751) ? 0.0 : max(_751, 0.0));
    float _794 = isnan(1.0) ? _3989 : (isnan(_3989) ? 1.0 : min(_3989, 1.0));
    float _4000 = isnan(0.0) ? _777 : (isnan(_777) ? 0.0 : max(_777, 0.0));
    float _4011 = isnan(0.0) ? _710 : (isnan(_710) ? 0.0 : max(_710, 0.0));
    float _4022 = isnan(0.0) ? _711 : (isnan(_711) ? 0.0 : max(_711, 0.0));
    float _4033 = isnan(0.0) ? _712 : (isnan(_712) ? 0.0 : max(_712, 0.0));
    float _812 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _854 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _864 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _854);
    float _865 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _854);
    float _866 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _854);
    float _870 = inversesqrt(dot(vec3(_864, _865, _866), vec3(_864, _865, _866)));
    float _871 = _864 * _870;
    float _872 = _865 * _870;
    float _873 = _866 * _870;
    float _879 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _880 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _898 = fma(_793, cbSceneParam._m0[5u].z, fma(_792, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _791));
    float _901 = fma(_793, cbSceneParam._m0[6u].z, fma(_792, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _791));
    float _904 = fma(_793, cbSceneParam._m0[7u].z, fma(_792, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _791));
    uint _918 = (_272 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _924 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4011 : (isnan(_4011) ? 1.0 : min(_4011, 1.0)))) * cbInstanceData._m0[_918].x;
    float _925 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4022 : (isnan(_4022) ? 1.0 : min(_4022, 1.0)))) * cbInstanceData._m0[_918].y;
    float _926 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4033 : (isnan(_4033) ? 1.0 : min(_4033, 1.0)))) * cbInstanceData._m0[_918].z;
    float _4044 = isnan(0.0) ? _924 : (isnan(_924) ? 0.0 : max(_924, 0.0));
    float _927 = isnan(1.0) ? _4044 : (isnan(_4044) ? 1.0 : min(_4044, 1.0));
    float _4055 = isnan(0.0) ? _925 : (isnan(_925) ? 0.0 : max(_925, 0.0));
    float _928 = isnan(1.0) ? _4055 : (isnan(_4055) ? 1.0 : min(_4055, 1.0));
    float _4066 = isnan(0.0) ? _926 : (isnan(_926) ? 0.0 : max(_926, 0.0));
    float _929 = isnan(1.0) ? _4066 : (isnan(_4066) ? 1.0 : min(_4066, 1.0));
    vec4 _938 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _879, cbSceneParam._m0[86u].y * _880));
    float _942 = ((isnan(1.0) ? _4000 : (isnan(_4000) ? 1.0 : min(_4000, 1.0))) * TEXCOORD_5.w) * _938.x;
    float _943 = dot(vec3(_791, _792, _793), vec3(_871, _872, _873));
    float _946 = _943 * 2.0;
    float _950 = (_946 * _791) - _871;
    float _951 = (_946 * _792) - _872;
    float _952 = (_946 * _793) - _873;
    float _956 = abs(dot(vec3(_871, _872, _873), vec3(_791, _792, _793)));
    float _4077 = isnan(0.0) ? _956 : (isnan(_956) ? 0.0 : max(_956, 0.0));
    float _958 = sqrt(_794);
    float _971 = exp2((_958 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4077 : (isnan(_4077) ? 1.0 : min(_4077, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_958 * 3.0));
    float _1003 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1007 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1011 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1312;
    float _1314;
    float _1315;
    float _1316;
    float _1317;
    float _1318;
    float _1319;
    float _1320;
    float _1321;
    float _1322;
    float _1323;
    float _1324;
    float _1325;
    float _1326;
    float _1327;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1037 = fma(_1011, cbModelParam._m0[26u].z, fma(_1007, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1003));
        float _1041 = fma(_1011, cbModelParam._m0[27u].z, fma(_1007, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1003));
        float _1045 = fma(_1011, cbModelParam._m0[28u].z, fma(_1007, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1003));
        float _1070 = _1003 + _791;
        float _1071 = _1007 + _792;
        float _1072 = _1011 + _793;
        float _1082 = fma(_1072, cbModelParam._m0[26u].z, fma(_1071, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1070)) - _1037;
        float _1083 = fma(_1072, cbModelParam._m0[27u].z, fma(_1071, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1070)) - _1041;
        float _1084 = fma(_1072, cbModelParam._m0[28u].z, fma(_1071, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1070)) - _1045;
        float _1088 = inversesqrt(dot(vec3(_1082, _1083, _1084), vec3(_1082, _1083, _1084)));
        float _1101 = ((_1088 * _1082) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1037 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1102 = ((_1088 * _1083) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1041 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1103 = ((_1088 * _1084) / cbModelParam._m0[34u].z) + ((((((_1045 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1106 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1101, _1102, _1103), 0.0);
        vec4 _1113 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1101, _1102, _1103), 0.0);
        vec4 _1120 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1101, _1102, _1103), 0.0);
        vec4 _1127 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1101, _1102, _1103), 0.0);
        float _1140 = exp2((_1106.w + (-0.5)) * 20.0) * 2.0;
        float _1141 = _1140 * (_1106.x + (-0.5));
        float _1142 = _1140 * (_1106.y + (-0.5));
        float _1143 = _1140 * (_1106.z + (-0.5));
        float _1150 = exp2((_1113.w + (-0.5)) * 20.0) * 2.0;
        float _1151 = _1150 * (_1113.x + (-0.5));
        float _1152 = _1150 * (_1113.y + (-0.5));
        float _1153 = _1150 * (_1113.z + (-0.5));
        float _1160 = exp2((_1120.w + (-0.5)) * 20.0) * 2.0;
        float _1161 = _1160 * (_1120.x + (-0.5));
        float _1162 = _1160 * (_1120.y + (-0.5));
        float _1163 = _1160 * (_1120.z + (-0.5));
        float _1170 = exp2((_1127.w + (-0.5)) * 20.0) * 2.0;
        float _1171 = _1170 * (_1127.x + (-0.5));
        float _1172 = _1170 * (_1127.y + (-0.5));
        float _1173 = _1170 * (_1127.z + (-0.5));
        float _1174 = isnan(0.0) ? _1171 : (isnan(_1171) ? 0.0 : max(_1171, 0.0));
        float _1175 = isnan(0.0) ? _1172 : (isnan(_1172) ? 0.0 : max(_1172, 0.0));
        float _1176 = isnan(0.0) ? _1173 : (isnan(_1173) ? 0.0 : max(_1173, 0.0));
        float _1177 = _1141 * 0.5;
        float _1178 = _1151 * 0.5;
        float _1179 = _1161 * 0.5;
        float _1180 = dot(vec3(_1177, _1178, _1179), vec3(_1177, _1178, _1179));
        float _1185 = (_1180 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1180);
        float _1194 = (dot(vec3(_791, _792, _793), vec3(_1185 * _1177, _1185 * _1178, _1185 * _1179)) + 1.0) * 0.5;
        float _4103 = isnan(0.0) ? _1194 : (isnan(_1194) ? 0.0 : max(_1194, 0.0));
        float _1204 = sqrt(((_1178 * _1178) + (_1177 * _1177)) + (_1179 * _1179)) / (_1174 + 9.9999997473787516355514526367188e-06);
        float _4114 = isnan(0.0) ? _1204 : (isnan(_1204) ? 0.0 : max(_1204, 0.0));
        float _1205 = isnan(1.0) ? _4114 : (isnan(_4114) ? 1.0 : min(_4114, 1.0));
        float _1206 = _1205 * 2.0;
        float _1210 = (1.0 - _1205) / (_1205 + 1.0);
        float _4125 = isnan(0.0) ? _1210 : (isnan(_1210) ? 0.0 : max(_1210, 0.0));
        float _1211 = isnan(1.0) ? _4125 : (isnan(_4125) ? 1.0 : min(_4125, 1.0));
        float _1220 = ((((1.0 - _1211) * (_1206 + 2.0)) * exp2(log2(isnan(1.0) ? _4103 : (isnan(_4103) ? 1.0 : min(_4103, 1.0))) * (_1206 + 1.0))) + _1211) * _1174;
        float _1221 = _1142 * 0.5;
        float _1222 = _1152 * 0.5;
        float _1223 = _1162 * 0.5;
        float _1224 = dot(vec3(_1221, _1222, _1223), vec3(_1221, _1222, _1223));
        float _1229 = (_1224 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1224);
        float _1237 = (dot(vec3(_791, _792, _793), vec3(_1229 * _1221, _1229 * _1222, _1229 * _1223)) + 1.0) * 0.5;
        float _4136 = isnan(0.0) ? _1237 : (isnan(_1237) ? 0.0 : max(_1237, 0.0));
        float _1246 = sqrt(((_1222 * _1222) + (_1221 * _1221)) + (_1223 * _1223)) / (_1175 + 9.9999997473787516355514526367188e-06);
        float _4147 = isnan(0.0) ? _1246 : (isnan(_1246) ? 0.0 : max(_1246, 0.0));
        float _1247 = isnan(1.0) ? _4147 : (isnan(_4147) ? 1.0 : min(_4147, 1.0));
        float _1248 = _1247 * 2.0;
        float _1252 = (1.0 - _1247) / (_1247 + 1.0);
        float _4158 = isnan(0.0) ? _1252 : (isnan(_1252) ? 0.0 : max(_1252, 0.0));
        float _1253 = isnan(1.0) ? _4158 : (isnan(_4158) ? 1.0 : min(_4158, 1.0));
        float _1262 = ((((1.0 - _1253) * (_1248 + 2.0)) * exp2(log2(isnan(1.0) ? _4136 : (isnan(_4136) ? 1.0 : min(_4136, 1.0))) * (_1248 + 1.0))) + _1253) * _1175;
        float _1263 = _1143 * 0.5;
        float _1264 = _1153 * 0.5;
        float _1265 = _1163 * 0.5;
        float _1266 = dot(vec3(_1263, _1264, _1265), vec3(_1263, _1264, _1265));
        float _1271 = (_1266 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1266);
        float _1279 = (dot(vec3(_791, _792, _793), vec3(_1271 * _1263, _1271 * _1264, _1271 * _1265)) + 1.0) * 0.5;
        float _4169 = isnan(0.0) ? _1279 : (isnan(_1279) ? 0.0 : max(_1279, 0.0));
        float _1288 = sqrt(((_1264 * _1264) + (_1263 * _1263)) + (_1265 * _1265)) / (_1176 + 9.9999997473787516355514526367188e-06);
        float _4180 = isnan(0.0) ? _1288 : (isnan(_1288) ? 0.0 : max(_1288, 0.0));
        float _1289 = isnan(1.0) ? _4180 : (isnan(_4180) ? 1.0 : min(_4180, 1.0));
        float _1290 = _1289 * 2.0;
        float _1294 = (1.0 - _1289) / (_1289 + 1.0);
        float _4191 = isnan(0.0) ? _1294 : (isnan(_1294) ? 0.0 : max(_1294, 0.0));
        float _1295 = isnan(1.0) ? _4191 : (isnan(_4191) ? 1.0 : min(_4191, 1.0));
        float _1304 = ((((1.0 - _1295) * (_1290 + 2.0)) * exp2(log2(isnan(1.0) ? _4169 : (isnan(_4169) ? 1.0 : min(_4169, 1.0))) * (_1290 + 1.0))) + _1295) * _1176;
        _1312 = _1143;
        _1314 = _1142;
        _1315 = _1141;
        _1316 = _1153;
        _1317 = _1152;
        _1318 = _1151;
        _1319 = _1163;
        _1320 = _1162;
        _1321 = _1161;
        _1322 = _1176;
        _1323 = _1175;
        _1324 = _1174;
        _1325 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1220 : (isnan(_1220) ? 0.0 : max(_1220, 0.0)));
        _1326 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1262 : (isnan(_1262) ? 0.0 : max(_1262, 0.0)));
        _1327 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1304 : (isnan(_1304) ? 0.0 : max(_1304, 0.0)));
    }
    else
    {
        _1312 = _1313;
        _1314 = _1313;
        _1315 = _1313;
        _1316 = _1313;
        _1317 = _1313;
        _1318 = _1313;
        _1319 = _1313;
        _1320 = _1313;
        _1321 = _1313;
        _1322 = _1313;
        _1323 = _1313;
        _1324 = _1313;
        _1325 = 0.0;
        _1326 = 0.0;
        _1327 = 0.0;
    }
    float _1620;
    float _1621;
    float _1622;
    float _1623;
    float _1624;
    float _1625;
    float _1626;
    float _1627;
    float _1628;
    float _1629;
    float _1630;
    float _1631;
    float _1632;
    float _1633;
    float _1634;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1351 = fma(_1011, cbModelParam._m0[30u].z, fma(_1007, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1003));
        float _1355 = fma(_1011, cbModelParam._m0[31u].z, fma(_1007, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1003));
        float _1359 = fma(_1011, cbModelParam._m0[32u].z, fma(_1007, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1003));
        float _1382 = _1003 + _791;
        float _1383 = _1007 + _792;
        float _1384 = _1011 + _793;
        float _1394 = fma(_1384, cbModelParam._m0[30u].z, fma(_1383, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1382)) - _1351;
        float _1395 = fma(_1384, cbModelParam._m0[31u].z, fma(_1383, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1382)) - _1355;
        float _1396 = fma(_1384, cbModelParam._m0[32u].z, fma(_1383, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1382)) - _1359;
        float _1400 = inversesqrt(dot(vec3(_1394, _1395, _1396), vec3(_1394, _1395, _1396)));
        float _1413 = ((_1400 * _1394) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1351 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1414 = ((_1400 * _1395) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1355 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1415 = ((_1400 * _1396) / cbModelParam._m0[35u].z) + ((((((_1359 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1417 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1413, _1414, _1415), 0.0);
        vec4 _1424 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1413, _1414, _1415), 0.0);
        vec4 _1431 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1413, _1414, _1415), 0.0);
        vec4 _1438 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1413, _1414, _1415), 0.0);
        float _1450 = exp2((_1417.w + (-0.5)) * 20.0) * 2.0;
        float _1451 = _1450 * (_1417.x + (-0.5));
        float _1452 = _1450 * (_1417.y + (-0.5));
        float _1453 = _1450 * (_1417.z + (-0.5));
        float _1460 = exp2((_1424.w + (-0.5)) * 20.0) * 2.0;
        float _1461 = _1460 * (_1424.x + (-0.5));
        float _1462 = _1460 * (_1424.y + (-0.5));
        float _1463 = _1460 * (_1424.z + (-0.5));
        float _1470 = exp2((_1431.w + (-0.5)) * 20.0) * 2.0;
        float _1471 = _1470 * (_1431.x + (-0.5));
        float _1472 = _1470 * (_1431.y + (-0.5));
        float _1473 = _1470 * (_1431.z + (-0.5));
        float _1480 = exp2((_1438.w + (-0.5)) * 20.0) * 2.0;
        float _1481 = _1480 * (_1438.x + (-0.5));
        float _1482 = _1480 * (_1438.y + (-0.5));
        float _1483 = _1480 * (_1438.z + (-0.5));
        float _1484 = isnan(0.0) ? _1481 : (isnan(_1481) ? 0.0 : max(_1481, 0.0));
        float _1485 = isnan(0.0) ? _1482 : (isnan(_1482) ? 0.0 : max(_1482, 0.0));
        float _1486 = isnan(0.0) ? _1483 : (isnan(_1483) ? 0.0 : max(_1483, 0.0));
        float _1487 = _1451 * 0.5;
        float _1488 = _1461 * 0.5;
        float _1489 = _1471 * 0.5;
        float _1490 = dot(vec3(_1487, _1488, _1489), vec3(_1487, _1488, _1489));
        float _1495 = (_1490 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1490);
        float _1503 = (dot(vec3(_791, _792, _793), vec3(_1495 * _1487, _1495 * _1488, _1495 * _1489)) + 1.0) * 0.5;
        float _4232 = isnan(0.0) ? _1503 : (isnan(_1503) ? 0.0 : max(_1503, 0.0));
        float _1512 = sqrt(((_1488 * _1488) + (_1487 * _1487)) + (_1489 * _1489)) / (_1484 + 9.9999997473787516355514526367188e-06);
        float _4243 = isnan(0.0) ? _1512 : (isnan(_1512) ? 0.0 : max(_1512, 0.0));
        float _1513 = isnan(1.0) ? _4243 : (isnan(_4243) ? 1.0 : min(_4243, 1.0));
        float _1514 = _1513 * 2.0;
        float _1518 = (1.0 - _1513) / (_1513 + 1.0);
        float _4254 = isnan(0.0) ? _1518 : (isnan(_1518) ? 0.0 : max(_1518, 0.0));
        float _1519 = isnan(1.0) ? _4254 : (isnan(_4254) ? 1.0 : min(_4254, 1.0));
        float _1528 = ((((1.0 - _1519) * (_1514 + 2.0)) * exp2(log2(isnan(1.0) ? _4232 : (isnan(_4232) ? 1.0 : min(_4232, 1.0))) * (_1514 + 1.0))) + _1519) * _1484;
        float _1529 = _1452 * 0.5;
        float _1530 = _1462 * 0.5;
        float _1531 = _1472 * 0.5;
        float _1532 = dot(vec3(_1529, _1530, _1531), vec3(_1529, _1530, _1531));
        float _1537 = (_1532 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1532);
        float _1545 = (dot(vec3(_791, _792, _793), vec3(_1537 * _1529, _1537 * _1530, _1537 * _1531)) + 1.0) * 0.5;
        float _4265 = isnan(0.0) ? _1545 : (isnan(_1545) ? 0.0 : max(_1545, 0.0));
        float _1554 = sqrt(((_1530 * _1530) + (_1529 * _1529)) + (_1531 * _1531)) / (_1485 + 9.9999997473787516355514526367188e-06);
        float _4276 = isnan(0.0) ? _1554 : (isnan(_1554) ? 0.0 : max(_1554, 0.0));
        float _1555 = isnan(1.0) ? _4276 : (isnan(_4276) ? 1.0 : min(_4276, 1.0));
        float _1556 = _1555 * 2.0;
        float _1560 = (1.0 - _1555) / (_1555 + 1.0);
        float _4287 = isnan(0.0) ? _1560 : (isnan(_1560) ? 0.0 : max(_1560, 0.0));
        float _1561 = isnan(1.0) ? _4287 : (isnan(_4287) ? 1.0 : min(_4287, 1.0));
        float _1570 = ((((1.0 - _1561) * (_1556 + 2.0)) * exp2(log2(isnan(1.0) ? _4265 : (isnan(_4265) ? 1.0 : min(_4265, 1.0))) * (_1556 + 1.0))) + _1561) * _1485;
        float _1571 = _1453 * 0.5;
        float _1572 = _1463 * 0.5;
        float _1573 = _1473 * 0.5;
        float _1574 = dot(vec3(_1571, _1572, _1573), vec3(_1571, _1572, _1573));
        float _1579 = (_1574 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1574);
        float _1587 = (dot(vec3(_791, _792, _793), vec3(_1579 * _1571, _1579 * _1572, _1579 * _1573)) + 1.0) * 0.5;
        float _4298 = isnan(0.0) ? _1587 : (isnan(_1587) ? 0.0 : max(_1587, 0.0));
        float _1596 = sqrt(((_1572 * _1572) + (_1571 * _1571)) + (_1573 * _1573)) / (_1486 + 9.9999997473787516355514526367188e-06);
        float _4309 = isnan(0.0) ? _1596 : (isnan(_1596) ? 0.0 : max(_1596, 0.0));
        float _1597 = isnan(1.0) ? _4309 : (isnan(_4309) ? 1.0 : min(_4309, 1.0));
        float _1598 = _1597 * 2.0;
        float _1602 = (1.0 - _1597) / (_1597 + 1.0);
        float _4320 = isnan(0.0) ? _1602 : (isnan(_1602) ? 0.0 : max(_1602, 0.0));
        float _1603 = isnan(1.0) ? _4320 : (isnan(_4320) ? 1.0 : min(_4320, 1.0));
        float _1612 = ((((1.0 - _1603) * (_1598 + 2.0)) * exp2(log2(isnan(1.0) ? _4298 : (isnan(_4298) ? 1.0 : min(_4298, 1.0))) * (_1598 + 1.0))) + _1603) * _1486;
        _1620 = _1453;
        _1621 = _1452;
        _1622 = _1451;
        _1623 = _1463;
        _1624 = _1462;
        _1625 = _1461;
        _1626 = _1473;
        _1627 = _1472;
        _1628 = _1471;
        _1629 = _1486;
        _1630 = _1485;
        _1631 = _1484;
        _1632 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1528 : (isnan(_1528) ? 0.0 : max(_1528, 0.0)));
        _1633 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1570 : (isnan(_1570) ? 0.0 : max(_1570, 0.0)));
        _1634 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1612 : (isnan(_1612) ? 0.0 : max(_1612, 0.0)));
    }
    else
    {
        _1620 = _1313;
        _1621 = _1313;
        _1622 = _1313;
        _1623 = _1313;
        _1624 = _1313;
        _1625 = _1313;
        _1626 = _1313;
        _1627 = _1313;
        _1628 = _1313;
        _1629 = _1313;
        _1630 = _1313;
        _1631 = _1313;
        _1632 = 0.0;
        _1633 = 0.0;
        _1634 = 0.0;
    }
    float _1644 = (cbModelParam._m0[1u].x * (_1632 - _1325)) + _1325;
    float _1645 = (cbModelParam._m0[1u].x * (_1633 - _1326)) + _1326;
    float _1646 = (cbModelParam._m0[1u].x * (_1634 - _1327)) + _1327;
    float _1667 = fma(_1646, cbSceneParam._m0[89u].z, fma(_1645, cbSceneParam._m0[89u].y, _1644 * cbSceneParam._m0[89u].x));
    float _1670 = fma(_1646, cbSceneParam._m0[90u].z, fma(_1645, cbSceneParam._m0[90u].y, _1644 * cbSceneParam._m0[90u].x));
    float _1673 = fma(_1646, cbSceneParam._m0[91u].z, fma(_1645, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1644));
    float _1688 = _950 * 0.5;
    float _1689 = _951 * 0.5;
    float _1690 = _952 * 0.5;
    float _1691 = dot(vec4(_1688, _1689, _1690, 1.0), vec4(_1622, _1625, _1628, _1631));
    float _1694 = dot(vec4(_1688, _1689, _1690, 1.0), vec4(_1621, _1624, _1627, _1630));
    float _1697 = dot(vec4(_1688, _1689, _1690, 1.0), vec4(_1620, _1623, _1626, _1629));
    float _1731;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1704 = dot(vec4(_1688, _1689, _1690, 1.0), vec4(_1312, _1316, _1319, _1322));
        float _1708 = dot(vec4(_1688, _1689, _1690, 1.0), vec4(_1314, _1317, _1320, _1323));
        float _1712 = dot(vec4(_1688, _1689, _1690, 1.0), vec4(_1315, _1318, _1321, _1324));
        float _1719 = dot(vec4(cbModelParam._m0[39u]), vec4(_1688, _1689, _1690, 1.0));
        _1731 = dot(vec3(isnan(0.0) ? _1712 : (isnan(_1712) ? 0.0 : max(_1712, 0.0)), isnan(0.0) ? _1708 : (isnan(_1708) ? 0.0 : max(_1708, 0.0)), isnan(0.0) ? _1704 : (isnan(_1704) ? 0.0 : max(_1704, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1719) ? 0.0 : (isnan(0.0) ? _1719 : max(0.0, _1719))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1731 = 1.0;
    }
    float _1742;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1733 = dot(vec4(cbModelParam._m0[40u]), vec4(_1688, _1689, _1690, 1.0));
        _1742 = dot(vec3(isnan(0.0) ? _1691 : (isnan(_1691) ? 0.0 : max(_1691, 0.0)), isnan(0.0) ? _1694 : (isnan(_1694) ? 0.0 : max(_1694, 0.0)), isnan(0.0) ? _1697 : (isnan(_1697) ? 0.0 : max(_1697, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1733) ? 0.0 : (isnan(0.0) ? _1733 : max(0.0, _1733))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1742 = 1.0;
    }
    float _1746 = (_1742 * cbModelParam._m0[1u].x) + (_1731 * (1.0 - cbModelParam._m0[1u].x));
    float _1756 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _794);
    float _1757 = isnan(_1756) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1756 : min(cbModelParam._m0[25u].z, _1756));
    float _1838;
    float _1840;
    float _1842;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1805 = fma(_1011, cbModelParam._m0[13u].z, fma(_1007, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1003)) + cbModelParam._m0[13u].w;
        float _1809 = fma(_1011, cbModelParam._m0[14u].z, fma(_1007, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1003)) + cbModelParam._m0[14u].w;
        float _1813 = fma(_1011, cbModelParam._m0[15u].z, fma(_1007, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1003)) + cbModelParam._m0[15u].w;
        float _1816 = fma(_952, cbModelParam._m0[13u].z, fma(_951, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _950));
        float _1819 = fma(_952, cbModelParam._m0[14u].z, fma(_951, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _950));
        float _1822 = fma(_952, cbModelParam._m0[15u].z, fma(_951, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _950));
        float _1850;
        if (_1816 > 0.0)
        {
            _1850 = abs((1.0 - _1805) / _1816);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1816 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1805 + 1.0) / _1816);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1850 = frontier_phi_14_12_ladder;
        }
        float _2020;
        if (_1819 > 0.0)
        {
            _2020 = abs((1.0 - _1809) / _1819);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1819 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1809 + 1.0) / _1819);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2020 = frontier_phi_23_19_ladder;
        }
        float _2315;
        if (_1822 > 0.0)
        {
            _2315 = abs((1.0 - _1813) / _1822);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1822 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1813 + 1.0) / _1822);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2315 = frontier_phi_35_30_ladder;
        }
        float _2317 = isnan(_2020) ? _1850 : (isnan(_1850) ? _2020 : min(_1850, _2020));
        float _2318 = isnan(_2315) ? _2317 : (isnan(_2317) ? _2315 : min(_2317, _2315));
        float _2322 = (_2318 * _1816) + _1805;
        float _2323 = (_2318 * _1819) + _1809;
        float _2324 = (_2318 * _1822) + _1813;
        float _2325 = _2318 * 9.9999997473787516355514526367188e-05;
        float _2327 = (-1.0) - _2325;
        float _2329 = _2325 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2324 > _2329) || ((_2324 < _2327) || ((_2323 > _2329) || ((_2323 < _2327) || ((_2322 < _2327) || (_2322 > _2329))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2469 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2324, cbModelParam._m0[9u].z, fma(_2323, cbModelParam._m0[9u].y, _2322 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2324, cbModelParam._m0[10u].z, fma(_2323, cbModelParam._m0[10u].y, _2322 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2324, cbModelParam._m0[11u].z, fma(_2323, cbModelParam._m0[11u].y, _2322 * cbModelParam._m0[11u].x))), _1757);
            frontier_phi_13_35_ladder = _2469.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2469.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2469.x * cbModelParam._m0[1u].y;
        }
        _1838 = frontier_phi_13_35_ladder_2;
        _1840 = frontier_phi_13_35_ladder_1;
        _1842 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1826 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_950, _951, _952), _1757);
        _1838 = _1826.x * cbModelParam._m0[1u].y;
        _1840 = _1826.y * cbModelParam._m0[1u].y;
        _1842 = _1826.z * cbModelParam._m0[1u].y;
    }
    float _1846 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _794);
    float _1847 = isnan(_1846) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1846 : min(cbModelParam._m0[25u].w, _1846));
    float _1937;
    float _1939;
    float _1941;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1901 = fma(_1011, cbModelParam._m0[21u].z, fma(_1007, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1003)) + cbModelParam._m0[21u].w;
        float _1905 = fma(_1011, cbModelParam._m0[22u].z, fma(_1007, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1003)) + cbModelParam._m0[22u].w;
        float _1909 = fma(_1011, cbModelParam._m0[23u].z, fma(_1007, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1003)) + cbModelParam._m0[23u].w;
        float _1912 = fma(_952, cbModelParam._m0[21u].z, fma(_951, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _950));
        float _1915 = fma(_952, cbModelParam._m0[22u].z, fma(_951, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _950));
        float _1918 = fma(_952, cbModelParam._m0[23u].z, fma(_951, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _950));
        float _2025;
        if (_1912 > 0.0)
        {
            _2025 = abs((1.0 - _1901) / _1912);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1912 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1901 + 1.0) / _1912);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2025 = frontier_phi_25_21_ladder;
        }
        float _2342;
        if (_1915 > 0.0)
        {
            _2342 = abs((1.0 - _1905) / _1915);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1915 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1905 + 1.0) / _1915);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2342 = frontier_phi_37_32_ladder;
        }
        float _2669;
        if (_1918 > 0.0)
        {
            _2669 = abs((1.0 - _1909) / _1918);
        }
        else
        {
            float frontier_phi_47_44_ladder;
            if (_1918 < 0.0)
            {
                frontier_phi_47_44_ladder = abs((_1909 + 1.0) / _1918);
            }
            else
            {
                frontier_phi_47_44_ladder = 5000.0;
            }
            _2669 = frontier_phi_47_44_ladder;
        }
        float _2671 = isnan(_2342) ? _2025 : (isnan(_2025) ? _2342 : min(_2025, _2342));
        float _2672 = isnan(_2669) ? _2671 : (isnan(_2671) ? _2669 : min(_2671, _2669));
        float _2676 = (_2672 * _1912) + _1901;
        float _2677 = (_2672 * _1915) + _1905;
        float _2678 = (_2672 * _1918) + _1909;
        float _2679 = _2672 * 9.9999997473787516355514526367188e-05;
        float _2680 = (-1.0) - _2679;
        float _2682 = _2679 + 1.0;
        float frontier_phi_22_47_ladder;
        float frontier_phi_22_47_ladder_1;
        float frontier_phi_22_47_ladder_2;
        if ((_2678 > _2682) || ((_2678 < _2680) || ((_2677 > _2682) || ((_2677 < _2680) || ((_2676 < _2680) || (_2676 > _2682))))))
        {
            frontier_phi_22_47_ladder = 0.0;
            frontier_phi_22_47_ladder_1 = 0.0;
            frontier_phi_22_47_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2796 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2678, cbModelParam._m0[17u].z, fma(_2677, cbModelParam._m0[17u].y, _2676 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2678, cbModelParam._m0[18u].z, fma(_2677, cbModelParam._m0[18u].y, _2676 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2678, cbModelParam._m0[19u].z, fma(_2677, cbModelParam._m0[19u].y, _2676 * cbModelParam._m0[19u].x))), _1847);
            frontier_phi_22_47_ladder = _2796.z * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_1 = _2796.y * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_2 = _2796.x * cbModelParam._m0[1u].z;
        }
        _1937 = frontier_phi_22_47_ladder_2;
        _1939 = frontier_phi_22_47_ladder_1;
        _1941 = frontier_phi_22_47_ladder;
    }
    else
    {
        vec4 _1921 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_950, _951, _952), _1847);
        _1937 = _1921.x * cbModelParam._m0[1u].z;
        _1939 = _1921.y * cbModelParam._m0[1u].z;
        _1941 = _1921.z * cbModelParam._m0[1u].z;
    }
    float _1953 = ((((1.0 - _971) * ((_958 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_971 * _958)) * _942;
    float _1954 = _1953 * ((cbModelParam._m0[1u].w * (_1937 - _1838)) + _1838);
    float _1955 = _1953 * ((cbModelParam._m0[1u].w * (_1939 - _1840)) + _1840);
    float _1956 = _1953 * ((cbModelParam._m0[1u].w * (_1941 - _1842)) + _1842);
    float _1959 = fma(_1956, cbSceneParam._m0[89u].z, fma(_1955, cbSceneParam._m0[89u].y, _1954 * cbSceneParam._m0[89u].x));
    float _1962 = fma(_1956, cbSceneParam._m0[90u].z, fma(_1955, cbSceneParam._m0[90u].y, _1954 * cbSceneParam._m0[90u].x));
    float _1965 = fma(_1956, cbSceneParam._m0[91u].z, fma(_1955, cbSceneParam._m0[91u].y, _1954 * cbSceneParam._m0[91u].x));
    float _1999 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2003 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2007 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2011 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2012 = _1999 / _2011;
    float _2013 = _2003 / _2011;
    float _2014 = _2007 / _2011;
    float _2161;
    float _2162;
    float _2163;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2041 = ((uint(_2014 > cbSceneParam._m0[59u].y) + uint(_2014 > cbSceneParam._m0[59u].x)) + uint(_2014 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2042 = _2041 + 43u;
        uint _2050 = _2041 + 44u;
        uint _2058 = _2041 + 45u;
        uint _2066 = _2041 + 46u;
        float _2077 = fma(_2011, cbSceneParam._m0[_2042].w, fma(_2007, cbSceneParam._m0[_2042].z, fma(_2003, cbSceneParam._m0[_2042].y, _1999 * cbSceneParam._m0[_2042].x)));
        float _2081 = fma(_2011, cbSceneParam._m0[_2050].w, fma(_2007, cbSceneParam._m0[_2050].z, fma(_2003, cbSceneParam._m0[_2050].y, _1999 * cbSceneParam._m0[_2050].x)));
        float _2089 = fma(_2011, cbSceneParam._m0[_2066].w, fma(_2007, cbSceneParam._m0[_2066].z, fma(_2003, cbSceneParam._m0[_2066].y, _1999 * cbSceneParam._m0[_2066].x)));
        float _2094 = cbSceneParam._m0[33u].z * _2089;
        float _2096 = cbSceneParam._m0[33u].w * _2089;
        float _2099 = fma(_2011, cbSceneParam._m0[_2058].w, fma(_2007, cbSceneParam._m0[_2058].z, fma(_2003, cbSceneParam._m0[_2058].y, _1999 * cbSceneParam._m0[_2058].x))) / _2089;
        float _2147 = (cbSceneParam._m0[33u].x - sqrt(((_2013 * _2013) + (_2012 * _2012)) + (_2014 * _2014))) * cbSceneParam._m0[33u].y;
        float _4446 = isnan(0.0) ? _2147 : (isnan(_2147) ? 0.0 : max(_2147, 0.0));
        float _2154 = (isnan(1.0) ? _4446 : (isnan(_4446) ? 1.0 : min(_4446, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2094 + _2077) / _2089, (_2096 + _2081) / _2089), _2099), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2096 + _2077) / _2089, (_2081 - _2094) / _2089), _2099), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2077 - _2094) / _2089, (_2081 - _2096) / _2089), _2099), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2077 - _2096) / _2089, (_2094 + _2081) / _2089), _2099), 0.0)).x), vec4(0.25)));
        _2161 = 1.0 - (_2154 * cbSceneParam._m0[34u].x);
        _2162 = 1.0 - (_2154 * cbSceneParam._m0[34u].y);
        _2163 = 1.0 - (_2154 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2161 = 1.0;
        _2162 = 1.0;
        _2163 = 1.0;
    }
    float _2227;
    float _2229;
    float _2231;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2215 = fma(_2011, cbSceneParam._m0[63u].w, fma(_2007, cbSceneParam._m0[63u].z, fma(_2003, cbSceneParam._m0[63u].y, _1999 * cbSceneParam._m0[63u].x)));
        float _2216 = fma(_2011, cbSceneParam._m0[60u].w, fma(_2007, cbSceneParam._m0[60u].z, fma(_2003, cbSceneParam._m0[60u].y, _1999 * cbSceneParam._m0[60u].x))) / _2215;
        float _2217 = fma(_2011, cbSceneParam._m0[61u].w, fma(_2007, cbSceneParam._m0[61u].z, fma(_2003, cbSceneParam._m0[61u].y, _1999 * cbSceneParam._m0[61u].x))) / _2215;
        float frontier_phi_34_33_ladder;
        float frontier_phi_34_33_ladder_1;
        float frontier_phi_34_33_ladder_2;
        if ((((_2216 >= cbSceneParam._m0[64u].x) && (_2217 >= cbSceneParam._m0[64u].y)) && (_2216 <= cbSceneParam._m0[64u].z)) && (_2217 <= cbSceneParam._m0[64u].w))
        {
            float _2355 = fma(_2011, cbSceneParam._m0[62u].w, fma(_2007, cbSceneParam._m0[62u].z, fma(_2003, cbSceneParam._m0[62u].y, _1999 * cbSceneParam._m0[62u].x))) / _2215;
            float _2359 = isnan(cbSceneParam._m0[41u].w) ? _2355 : (isnan(_2355) ? cbSceneParam._m0[41u].w : max(_2355, cbSceneParam._m0[41u].w));
            float _2402 = (cbSceneParam._m0[33u].x - sqrt(((_2013 * _2013) + (_2012 * _2012)) + (_2014 * _2014))) * cbSceneParam._m0[33u].y;
            float _4462 = isnan(0.0) ? _2402 : (isnan(_2402) ? 0.0 : max(_2402, 0.0));
            float _2409 = (isnan(1.0) ? _4462 : (isnan(_4462) ? 1.0 : min(_4462, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2216, cbSceneParam._m0[33u].w + _2217), _2359), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2216, _2217 - cbSceneParam._m0[33u].z), _2359), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2216 - cbSceneParam._m0[33u].z, _2217 - cbSceneParam._m0[33u].w), _2359), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2216 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2217), _2359), 0.0)).x), vec4(0.25)));
            float _2413 = 1.0 - (_2409 * cbSceneParam._m0[34u].x);
            float _2414 = 1.0 - (_2409 * cbSceneParam._m0[34u].y);
            float _2415 = 1.0 - (_2409 * cbSceneParam._m0[34u].z);
            frontier_phi_34_33_ladder = isnan(_2415) ? _2163 : (isnan(_2163) ? _2415 : min(_2163, _2415));
            frontier_phi_34_33_ladder_1 = isnan(_2414) ? _2162 : (isnan(_2162) ? _2414 : min(_2162, _2414));
            frontier_phi_34_33_ladder_2 = isnan(_2413) ? _2161 : (isnan(_2161) ? _2413 : min(_2161, _2413));
        }
        else
        {
            frontier_phi_34_33_ladder = _2163;
            frontier_phi_34_33_ladder_1 = _2162;
            frontier_phi_34_33_ladder_2 = _2161;
        }
        _2227 = frontier_phi_34_33_ladder_2;
        _2229 = frontier_phi_34_33_ladder_1;
        _2231 = frontier_phi_34_33_ladder;
    }
    else
    {
        _2227 = _2161;
        _2229 = _2162;
        _2231 = _2163;
    }
    uvec4 _2236 = floatBitsToUint(cbInstanceData._m0[_272 + 5u]);
    uint _2238 = _2236.x * 14u;
    uint _2239 = _2238 + 13u;
    float _2246 = _942 + (-1.0);
    float _2251 = (cbLight._m0[_2239].x * _2246) + 1.0;
    float _2252 = (cbLight._m0[_2239].y * _2246) + 1.0;
    float _2253 = (cbLight._m0[_2239].z * _2246) + 1.0;
    float _2254 = (cbLight._m0[_2239].w * _2246) + 1.0;
    uint _2255 = _2238 + 5u;
    float _2261 = isnan(1.0) ? _2252 : (isnan(_2252) ? 1.0 : min(_2252, 1.0));
    uint _2265 = _2238 + 4u;
    float _2274 = isnan(1.0) ? _2251 : (isnan(_2251) ? 1.0 : min(_2251, 1.0));
    uint _2278 = _2238 | 1u;
    float _2289 = dot(vec3(cbLight._m0[_2238].xyz), vec3(_791, _792, _793));
    float _2292 = dot(vec3(cbLight._m0[_2278].xyz), vec3(_791, _792, _793));
    float _4498 = isnan(0.0) ? _2289 : (isnan(_2289) ? 0.0 : max(_2289, 0.0));
    float _4509 = isnan(0.0) ? _2292 : (isnan(_2292) ? 0.0 : max(_2292, 0.0));
    float _2297 = (isnan(1.0) ? _4498 : (isnan(_4498) ? 1.0 : min(_4498, 1.0))) * 0.3183098733425140380859375;
    float _2299 = (isnan(1.0) ? _4509 : (isnan(_4509) ? 1.0 : min(_4509, 1.0))) * 0.3183098733425140380859375;
    float _2306 = ((cbLight._m0[_2255].x * _2261) * _2299) + (((cbLight._m0[_2265].x * _2227) * _2274) * _2297);
    float _2307 = ((_2261 * cbLight._m0[_2255].y) * _2299) + (((cbLight._m0[_2265].y * _2229) * _2274) * _2297);
    float _2308 = ((_2261 * cbLight._m0[_2255].z) * _2299) + (((cbLight._m0[_2265].z * _2231) * _2274) * _2297);
    uvec4 _2312 = floatBitsToUint(cbLight._m0[_2238 + 12u]);
    bool _2314 = _2312.x == 0u;
    float _2416;
    float _2418;
    float _2420;
    if (_2314)
    {
        _2416 = _2306;
        _2418 = _2307;
        _2420 = _2308;
    }
    else
    {
        uint _2424 = _2238 + 6u;
        float _2440 = (dot(vec3(cbLight._m0[_2238 + 2u].xyz), vec3(_791, _792, _793)) * 0.5) + 0.5;
        float _2441 = _2440 * _2440;
        float _4520 = isnan(0.0) ? _2441 : (isnan(_2441) ? 0.0 : max(_2441, 0.0));
        float _2442 = isnan(1.0) ? _4520 : (isnan(_4520) ? 1.0 : min(_4520, 1.0));
        float _2443 = isnan(1.0) ? _2253 : (isnan(_2253) ? 1.0 : min(_2253, 1.0));
        _2416 = (((cbLight._m0[_2424].x * 0.3183098733425140380859375) * _2442) * _2443) + _2306;
        _2418 = (((cbLight._m0[_2424].y * 0.3183098733425140380859375) * _2442) * _2443) + _2307;
        _2420 = (((cbLight._m0[_2424].z * 0.3183098733425140380859375) * _2442) * _2443) + _2308;
    }
    bool _2423 = _2312.y == 0u;
    float _2478;
    float _2480;
    float _2482;
    if (_2423)
    {
        _2478 = _2416;
        _2480 = _2418;
        _2482 = _2420;
    }
    else
    {
        uint _2640 = _2238 + 7u;
        float _2656 = (dot(vec3(cbLight._m0[_2238 + 3u].xyz), vec3(_791, _792, _793)) * 0.5) + 0.5;
        float _2657 = _2656 * _2656;
        float _4536 = isnan(0.0) ? _2657 : (isnan(_2657) ? 0.0 : max(_2657, 0.0));
        float _2658 = isnan(1.0) ? _4536 : (isnan(_4536) ? 1.0 : min(_4536, 1.0));
        float _2659 = isnan(1.0) ? _2254 : (isnan(_2254) ? 1.0 : min(_2254, 1.0));
        _2478 = (((cbLight._m0[_2640].x * 0.3183098733425140380859375) * _2658) * _2659) + _2416;
        _2480 = (((cbLight._m0[_2640].y * 0.3183098733425140380859375) * _2658) * _2659) + _2418;
        _2482 = (((cbLight._m0[_2640].z * 0.3183098733425140380859375) * _2658) * _2659) + _2420;
    }
    uint _2485 = _2238 + 8u;
    float _2498 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2238].w)) * _794) * 0.949999988079071044921875);
    float _2499 = _2498 * _2498;
    float _2500 = cbLight._m0[_2238].x + _871;
    float _2501 = cbLight._m0[_2238].y + _872;
    float _2502 = cbLight._m0[_2238].z + _873;
    float _2506 = inversesqrt(dot(vec3(_2500, _2501, _2502), vec3(_2500, _2501, _2502)));
    float _2507 = _2506 * _2500;
    float _2508 = _2506 * _2501;
    float _2509 = _2506 * _2502;
    float _2510 = dot(vec3(_791, _792, _793), vec3(cbLight._m0[_2238].xyz));
    float _4552 = isnan(0.0) ? _2510 : (isnan(_2510) ? 0.0 : max(_2510, 0.0));
    float _2513 = isnan(1.0) ? _4552 : (isnan(_4552) ? 1.0 : min(_4552, 1.0));
    float _4563 = isnan(0.0) ? _943 : (isnan(_943) ? 0.0 : max(_943, 0.0));
    float _2514 = isnan(1.0) ? _4563 : (isnan(_4563) ? 1.0 : min(_4563, 1.0));
    float _2515 = dot(vec3(_791, _792, _793), vec3(_2507, _2508, _2509));
    float _4574 = isnan(0.0) ? _2515 : (isnan(_2515) ? 0.0 : max(_2515, 0.0));
    float _2518 = isnan(1.0) ? _4574 : (isnan(_4574) ? 1.0 : min(_4574, 1.0));
    float _2519 = dot(vec3(cbLight._m0[_2238].xyz), vec3(_2507, _2508, _2509));
    float _4585 = isnan(0.0) ? _2519 : (isnan(_2519) ? 0.0 : max(_2519, 0.0));
    float _2523 = _2499 * _2499;
    float _2527 = ((_2518 * _2518) * (_2523 + (-1.0))) + 1.0;
    float _2538 = (exp2(log2(1.0 - (isnan(1.0) ? _4585 : (isnan(_4585) ? 1.0 : min(_4585, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2539 = 1.0 - _2499;
    float _2550 = (0.5 / (((_2514 * ((_2513 * _2539) + _2499)) + 9.9999999392252902907785028219223e-09) + (((_2514 * _2539) + _2499) * _2513))) * _2513;
    float _4596 = isnan(0.0) ? _2550 : (isnan(_2550) ? 0.0 : max(_2550, 0.0));
    float _2552 = (isnan(1.0) ? _4596 : (isnan(_4596) ? 1.0 : min(_4596, 1.0))) * (_2523 / ((_2527 * _2527) * 3.141590118408203125));
    uint _2566 = _2238 + 9u;
    float _2577 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2278].w)) * _794) * 0.949999988079071044921875);
    float _2578 = _2577 * _2577;
    float _2579 = cbLight._m0[_2278].x + _871;
    float _2580 = cbLight._m0[_2278].y + _872;
    float _2581 = cbLight._m0[_2278].z + _873;
    float _2585 = inversesqrt(dot(vec3(_2579, _2580, _2581), vec3(_2579, _2580, _2581)));
    float _2586 = _2585 * _2579;
    float _2587 = _2585 * _2580;
    float _2588 = _2585 * _2581;
    float _2589 = dot(vec3(_791, _792, _793), vec3(cbLight._m0[_2278].xyz));
    float _4607 = isnan(0.0) ? _2589 : (isnan(_2589) ? 0.0 : max(_2589, 0.0));
    float _2592 = isnan(1.0) ? _4607 : (isnan(_4607) ? 1.0 : min(_4607, 1.0));
    float _2593 = dot(vec3(_791, _792, _793), vec3(_2586, _2587, _2588));
    float _4618 = isnan(0.0) ? _2593 : (isnan(_2593) ? 0.0 : max(_2593, 0.0));
    float _2596 = isnan(1.0) ? _4618 : (isnan(_4618) ? 1.0 : min(_4618, 1.0));
    float _2597 = dot(vec3(cbLight._m0[_2278].xyz), vec3(_2586, _2587, _2588));
    float _4629 = isnan(0.0) ? _2597 : (isnan(_2597) ? 0.0 : max(_2597, 0.0));
    float _2601 = _2578 * _2578;
    float _2605 = ((_2596 * _2596) * (_2601 + (-1.0))) + 1.0;
    float _2614 = (exp2(log2(1.0 - (isnan(1.0) ? _4629 : (isnan(_4629) ? 1.0 : min(_4629, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2615 = 1.0 - _2578;
    float _2625 = (0.5 / (((_2514 * ((_2592 * _2615) + _2578)) + 9.9999999392252902907785028219223e-09) + (((_2514 * _2615) + _2578) * _2592))) * _2592;
    float _4640 = isnan(0.0) ? _2625 : (isnan(_2625) ? 0.0 : max(_2625, 0.0));
    float _2627 = (isnan(1.0) ? _4640 : (isnan(_4640) ? 1.0 : min(_4640, 1.0))) * (_2601 / ((_2605 * _2605) * 3.141590118408203125));
    float _2637 = (((_2614 * cbLight._m0[_2566].x) * _2627) * _2261) + ((((cbLight._m0[_2485].x * _2227) * _2538) * _2552) * _2274);
    float _2638 = (((_2614 * cbLight._m0[_2566].y) * _2627) * _2261) + ((((cbLight._m0[_2485].y * _2229) * _2538) * _2552) * _2274);
    float _2639 = (((_2614 * cbLight._m0[_2566].z) * _2627) * _2261) + ((((cbLight._m0[_2485].z * _2231) * _2538) * _2552) * _2274);
    float _2695;
    float _2697;
    float _2699;
    if (_2314)
    {
        _2695 = _2637;
        _2697 = _2638;
        _2699 = _2639;
    }
    else
    {
        uint _2701 = _2238 + 2u;
        uint _2705 = _2238 + 10u;
        float _2719 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2701].w)) * _794) * 0.949999988079071044921875);
        float _2720 = _2719 * _2719;
        float _2721 = cbLight._m0[_2701].x + _871;
        float _2722 = cbLight._m0[_2701].y + _872;
        float _2723 = cbLight._m0[_2701].z + _873;
        float _2727 = inversesqrt(dot(vec3(_2721, _2722, _2723), vec3(_2721, _2722, _2723)));
        float _2728 = _2727 * _2721;
        float _2729 = _2727 * _2722;
        float _2730 = _2727 * _2723;
        float _2731 = dot(vec3(_791, _792, _793), vec3(cbLight._m0[_2701].xyz));
        float _4651 = isnan(0.0) ? _2731 : (isnan(_2731) ? 0.0 : max(_2731, 0.0));
        float _2734 = isnan(1.0) ? _4651 : (isnan(_4651) ? 1.0 : min(_4651, 1.0));
        float _2735 = dot(vec3(_791, _792, _793), vec3(_2728, _2729, _2730));
        float _4662 = isnan(0.0) ? _2735 : (isnan(_2735) ? 0.0 : max(_2735, 0.0));
        float _2738 = isnan(1.0) ? _4662 : (isnan(_4662) ? 1.0 : min(_4662, 1.0));
        float _2739 = dot(vec3(cbLight._m0[_2701].xyz), vec3(_2728, _2729, _2730));
        float _4673 = isnan(0.0) ? _2739 : (isnan(_2739) ? 0.0 : max(_2739, 0.0));
        float _2743 = _2720 * _2720;
        float _2747 = ((_2738 * _2738) * (_2743 + (-1.0))) + 1.0;
        float _2756 = (exp2(log2(1.0 - (isnan(1.0) ? _4673 : (isnan(_4673) ? 1.0 : min(_4673, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2757 = 1.0 - _2720;
        float _2767 = (0.5 / (((_2514 * ((_2734 * _2757) + _2720)) + 9.9999999392252902907785028219223e-09) + (((_2514 * _2757) + _2720) * _2734))) * _2734;
        float _4684 = isnan(0.0) ? _2767 : (isnan(_2767) ? 0.0 : max(_2767, 0.0));
        float _2769 = (isnan(1.0) ? _4684 : (isnan(_4684) ? 1.0 : min(_4684, 1.0))) * (_2743 / ((_2747 * _2747) * 3.141590118408203125));
        float _2770 = isnan(1.0) ? _2253 : (isnan(_2253) ? 1.0 : min(_2253, 1.0));
        _2695 = (((_2756 * cbLight._m0[_2705].x) * _2769) * _2770) + _2637;
        _2697 = (((_2756 * cbLight._m0[_2705].y) * _2769) * _2770) + _2638;
        _2699 = (((_2756 * cbLight._m0[_2705].z) * _2769) * _2770) + _2639;
    }
    float _2801;
    float _2803;
    float _2805;
    if (_2423)
    {
        _2801 = _2695;
        _2803 = _2697;
        _2805 = _2699;
    }
    else
    {
        uint _2812 = _2238 + 3u;
        uint _2816 = _2238 + 11u;
        float _2830 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2812].w)) * _794) * 0.949999988079071044921875);
        float _2831 = _2830 * _2830;
        float _2832 = cbLight._m0[_2812].x + _871;
        float _2833 = cbLight._m0[_2812].y + _872;
        float _2834 = cbLight._m0[_2812].z + _873;
        float _2838 = inversesqrt(dot(vec3(_2832, _2833, _2834), vec3(_2832, _2833, _2834)));
        float _2839 = _2838 * _2832;
        float _2840 = _2838 * _2833;
        float _2841 = _2838 * _2834;
        float _2842 = dot(vec3(_791, _792, _793), vec3(cbLight._m0[_2812].xyz));
        float _4700 = isnan(0.0) ? _2842 : (isnan(_2842) ? 0.0 : max(_2842, 0.0));
        float _2845 = isnan(1.0) ? _4700 : (isnan(_4700) ? 1.0 : min(_4700, 1.0));
        float _2846 = dot(vec3(_791, _792, _793), vec3(_2839, _2840, _2841));
        float _4711 = isnan(0.0) ? _2846 : (isnan(_2846) ? 0.0 : max(_2846, 0.0));
        float _2849 = isnan(1.0) ? _4711 : (isnan(_4711) ? 1.0 : min(_4711, 1.0));
        float _2850 = dot(vec3(cbLight._m0[_2812].xyz), vec3(_2839, _2840, _2841));
        float _4722 = isnan(0.0) ? _2850 : (isnan(_2850) ? 0.0 : max(_2850, 0.0));
        float _2854 = _2831 * _2831;
        float _2858 = ((_2849 * _2849) * (_2854 + (-1.0))) + 1.0;
        float _2867 = (exp2(log2(1.0 - (isnan(1.0) ? _4722 : (isnan(_4722) ? 1.0 : min(_4722, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2868 = 1.0 - _2831;
        float _2878 = (0.5 / (((_2514 * ((_2845 * _2868) + _2831)) + 9.9999999392252902907785028219223e-09) + (((_2514 * _2868) + _2831) * _2845))) * _2845;
        float _4733 = isnan(0.0) ? _2878 : (isnan(_2878) ? 0.0 : max(_2878, 0.0));
        float _2880 = (isnan(1.0) ? _4733 : (isnan(_4733) ? 1.0 : min(_4733, 1.0))) * (_2854 / ((_2858 * _2858) * 3.141590118408203125));
        float _2881 = isnan(1.0) ? _2254 : (isnan(_2254) ? 1.0 : min(_2254, 1.0));
        _2801 = (((_2867 * cbLight._m0[_2816].x) * _2880) * _2881) + _2695;
        _2803 = (((_2867 * cbLight._m0[_2816].y) * _2880) * _2881) + _2697;
        _2805 = (((_2867 * cbLight._m0[_2816].z) * _2880) * _2881) + _2699;
    }
    float _2947;
    float _2949;
    float _2951;
    float _2953;
    float _2955;
    float _2957;
    if (_2236.y == 0u)
    {
        uvec4 _2902 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2903 = _2902.x;
        uint _2914 = uint((float(_2902.y) * floor(float(uint(cbSceneParam._m0[85u].y * _880) / _2903))) + floor(float(uint(cbSceneParam._m0[85u].x * _879) / _2903)));
        float _2924 = (log2(_2014 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2925 = isnan(0.0) ? _2924 : (isnan(_2924) ? 0.0 : max(_2924, 0.0));
        uint _2928 = uint(isnan(14.0) ? _2925 : (isnan(_2925) ? 14.0 : min(_2925, 14.0)));
        uvec4 _2933 = texelFetch(g_lightClusterGridBuffer, int(((_2928 << 2u) + (_2914 << 6u)) >> 2u));
        uint _2934 = _2933.x;
        uint _2935 = _2902.z;
        float _3014;
        float _3016;
        float _3018;
        float _3020;
        float _3022;
        float _3024;
        if (((((1u << ((_2935 >> 4u) & 15u)) + 4294967295u) & _2934) == 0u) || ((_2935 & 240u) == 0u))
        {
            _3014 = 0.0;
            _3016 = 0.0;
            _3018 = 0.0;
            _3020 = 0.0;
            _3022 = 0.0;
            _3024 = 0.0;
        }
        else
        {
            float _3015;
            float _3017;
            float _3019;
            float _3021;
            float _3023;
            float _3025;
            float _3159 = 0.0;
            float _3160 = 0.0;
            float _3161 = 0.0;
            float _3162 = 0.0;
            float _3163 = 0.0;
            float _3164 = 0.0;
            uint _3165 = 0u;
            uint _3174;
            bool _3175;
            for (;;)
            {
                _3174 = texelFetch(g_lightClassification, int((((_2928 << 5u) + (_2914 << 9u)) + (_3165 << 2u)) >> 2u)).x;
                _3175 = _3174 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3175)
                {
                    frontier_phi_66_pred = _3164;
                    frontier_phi_66_pred_1 = _3163;
                    frontier_phi_66_pred_2 = _3162;
                    frontier_phi_66_pred_3 = _3161;
                    frontier_phi_66_pred_4 = _3160;
                    frontier_phi_66_pred_5 = _3159;
                }
                else
                {
                    float _3283;
                    float _3284;
                    float _3285;
                    float _3286;
                    float _3287;
                    float _3288;
                    uint _3289;
                    _3283 = _3159;
                    _3284 = _3160;
                    _3285 = _3161;
                    _3286 = _3162;
                    _3287 = _3163;
                    _3288 = _3164;
                    _3289 = _3174;
                    float _3215;
                    float _3216;
                    float _3217;
                    float _3218;
                    float _3219;
                    float _3220;
                    for (;;)
                    {
                        uint _3293 = uint(findLSB(_3289)) + (_3165 << 5u);
                        uint _3290 = (_3289 + 4294967295u) & _3289;
                        uint _3295 = _3293 * 48u;
                        vec4 _3309 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3295)).x, texelFetch(g_PointLightRenderingBuffer, int(_3295 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3295 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3295 + 3u)).x));
                        uint _3315 = (_3293 * 48u) + 4u;
                        vec4 _3328 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3315)).x, texelFetch(g_PointLightRenderingBuffer, int(_3315 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3315 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3315 + 3u)).x));
                        uint _3334 = (_3293 * 48u) + 8u;
                        vec3 _3345 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3334)).x, texelFetch(g_PointLightRenderingBuffer, int(_3334 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3334 + 2u)).x));
                        float _3349 = _3309.x - _2012;
                        float _3350 = _3309.y - _2013;
                        float _3351 = _3309.z - _2014;
                        float _3352 = dot(vec3(_3349, _3350, _3351), vec3(_3349, _3350, _3351));
                        float _3355 = inversesqrt(_3352);
                        float _3356 = _3355 * _3349;
                        float _3357 = _3355 * _3350;
                        float _3358 = _3355 * _3351;
                        float _3359 = dot(vec3(_898, _901, _904), vec3(_3356, _3357, _3358));
                        float _3364 = 1.0 - (_3352 * _3309.w);
                        float _4759 = isnan(0.0) ? _3364 : (isnan(_3364) ? 0.0 : max(_3364, 0.0));
                        float _3365 = isnan(1.0) ? _4759 : (isnan(_4759) ? 1.0 : min(_4759, 1.0));
                        float _3366 = sqrt(_3352) * _3328.w;
                        float _3369 = 1.39999997615814208984375 / (_3366 + 1.39999997615814208984375);
                        float _3370 = _3369 * _3369;
                        float _3373 = ((1.0 - _3370) * _3359) + _3370;
                        float _3376 = _3366 * _3366;
                        float _3380 = ((isnan(0.0) ? _3373 : (isnan(_3373) ? 0.0 : max(_3373, 0.0))) * _3365) / ((_3376 * 0.699999988079071044921875) + 1.0);
                        float _3384 = (-0.0) - _2012;
                        float _3385 = (-0.0) - _2013;
                        float _3386 = (-0.0) - _2014;
                        float _3390 = inversesqrt(dot(vec3(_3384, _3385, _3386), vec3(_3384, _3385, _3386)));
                        float _3391 = _3390 * _3384;
                        float _3392 = _3390 * _3385;
                        float _3393 = _3390 * _3386;
                        float _3400 = exp2(log2(1.0 / ((_3376 * 3.5) + 5.0)) * 0.25);
                        float _3401 = 1.0 - _958;
                        float _3408 = sqrt(1.0 - ((1.0 - (_3401 * _3401)) * (1.0 - (_3400 * _3400))));
                        float _3409 = _3408 * _3408;
                        float _3410 = _3409 * _3409;
                        float _3411 = _3391 + _3356;
                        float _3412 = _3392 + _3357;
                        float _3413 = _3393 + _3358;
                        float _3417 = inversesqrt(dot(vec3(_3411, _3412, _3413), vec3(_3411, _3412, _3413)));
                        float _3421 = dot(vec3(_898, _901, _904), vec3(_3391, _3392, _3393));
                        float _4775 = isnan(0.0) ? _3421 : (isnan(_3421) ? 0.0 : max(_3421, 0.0));
                        float _3424 = isnan(1.0) ? _4775 : (isnan(_4775) ? 1.0 : min(_4775, 1.0));
                        float _3425 = dot(vec3(_898, _901, _904), vec3(_3417 * _3411, _3417 * _3412, _3417 * _3413));
                        float _4786 = isnan(0.0) ? _3425 : (isnan(_3425) ? 0.0 : max(_3425, 0.0));
                        float _3428 = isnan(1.0) ? _4786 : (isnan(_4786) ? 1.0 : min(_4786, 1.0));
                        float _3432 = ((_3428 * _3428) * (_3410 + (-1.0))) + 1.0;
                        float _3433 = _3369 * _3409;
                        float _3434 = _3433 * _3433;
                        float _3437 = ((1.0 - _3434) * _3359) + _3434;
                        float _4797 = isnan(0.0) ? _3437 : (isnan(_3437) ? 0.0 : max(_3437, 0.0));
                        float _3438 = isnan(1.0) ? _4797 : (isnan(_4797) ? 1.0 : min(_4797, 1.0));
                        float _3439 = 1.0 - _3409;
                        float _3449 = (0.5 / (((_3438 * ((_3424 * _3439) + _3409)) + 9.9999999392252902907785028219223e-09) + (((_3438 * _3439) + _3409) * _3424))) * _3438;
                        float _4808 = isnan(0.0) ? _3449 : (isnan(_3449) ? 0.0 : max(_3449, 0.0));
                        float _3460 = (((_3410 * 3.1415927410125732421875) * (isnan(1.0) ? _4808 : (isnan(_4808) ? 1.0 : min(_4808, 1.0)))) / ((_3432 * _3432) * ((_3376 * 2.1991131305694580078125) + 3.141590118408203125))) * _3365;
                        _3218 = (_3380 * _3328.x) + _3286;
                        _3219 = (_3380 * _3328.y) + _3287;
                        _3220 = (_3380 * _3328.z) + _3288;
                        _3215 = (_3460 * _3345.x) + _3283;
                        _3216 = (_3460 * _3345.y) + _3284;
                        _3217 = (_3460 * _3345.z) + _3285;
                        if (_3290 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3283 = _3215;
                            _3284 = _3216;
                            _3285 = _3217;
                            _3286 = _3218;
                            _3287 = _3219;
                            _3288 = _3220;
                            _3289 = _3290;
                        }
                    }
                    frontier_phi_66_pred = _3220;
                    frontier_phi_66_pred_1 = _3219;
                    frontier_phi_66_pred_2 = _3218;
                    frontier_phi_66_pred_3 = _3217;
                    frontier_phi_66_pred_4 = _3216;
                    frontier_phi_66_pred_5 = _3215;
                }
                _3025 = frontier_phi_66_pred;
                _3023 = frontier_phi_66_pred_1;
                _3021 = frontier_phi_66_pred_2;
                _3019 = frontier_phi_66_pred_3;
                _3017 = frontier_phi_66_pred_4;
                _3015 = frontier_phi_66_pred_5;
                uint _3166 = _3165 + 1u;
                if (_3166 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3159 = _3015;
                    _3160 = _3017;
                    _3161 = _3019;
                    _3162 = _3021;
                    _3163 = _3023;
                    _3164 = _3025;
                    _3165 = _3166;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3014 = _3015;
            _3016 = _3017;
            _3018 = _3019;
            _3020 = _3021;
            _3022 = _3023;
            _3024 = _3025;
        }
        uvec4 _3028 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3029 = _3028.z;
        uint _3031 = (_3029 >> 8u) & 15u;
        float _3127;
        float _3129;
        float _3131;
        float _3133;
        float _3135;
        float _3137;
        if (((4294967295u << _3031) & _2934) == 0u)
        {
            _3127 = _3014;
            _3129 = _3016;
            _3131 = _3018;
            _3133 = _3020;
            _3135 = _3022;
            _3137 = _3024;
        }
        else
        {
            float _3152 = inversesqrt(dot(vec3(_2012, _2013, _2014), vec3(_2012, _2013, _2014)));
            float _3153 = _3152 * _2012;
            float _3154 = _3152 * _2013;
            float _3155 = _3152 * _2014;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_3031 < ((_3029 >> 12u) & 15u))
            {
                float _3128;
                float _3130;
                float _3132;
                float _3134;
                float _3136;
                float _3138;
                float _3266 = _3014;
                float _3267 = _3016;
                float _3268 = _3018;
                float _3269 = _3020;
                float _3270 = _3022;
                float _3271 = _3024;
                uint _3272 = _3031;
                uint _3281;
                bool _3282;
                for (;;)
                {
                    _3281 = texelFetch(g_lightClassification, int((((_2928 << 5u) + (_2914 << 9u)) + (_3272 << 2u)) >> 2u)).x;
                    _3282 = _3281 == 0u;
                    float frontier_phi_72_pred;
                    float frontier_phi_72_pred_1;
                    float frontier_phi_72_pred_2;
                    float frontier_phi_72_pred_3;
                    float frontier_phi_72_pred_4;
                    float frontier_phi_72_pred_5;
                    if (_3282)
                    {
                        frontier_phi_72_pred = _3271;
                        frontier_phi_72_pred_1 = _3270;
                        frontier_phi_72_pred_2 = _3269;
                        frontier_phi_72_pred_3 = _3268;
                        frontier_phi_72_pred_4 = _3267;
                        frontier_phi_72_pred_5 = _3266;
                    }
                    else
                    {
                        float _3465;
                        float _3466;
                        float _3467;
                        float _3468;
                        float _3469;
                        float _3470;
                        float _3758;
                        float _3759;
                        float _3760;
                        float _3761;
                        float _3762;
                        float _3763;
                        float _3478 = _3266;
                        float _3479 = _3267;
                        float _3480 = _3268;
                        float _3481 = _3269;
                        float _3482 = _3270;
                        float _3483 = _3271;
                        uint _3484 = _3281;
                        uint _3485;
                        vec4 _3510;
                        float _3511;
                        vec4 _3526;
                        vec3 _3538;
                        vec4 _3553;
                        vec4 _3568;
                        float _3614;
                        bool _3615;
                        for (;;)
                        {
                            uint _3495 = ((_3272 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3484));
                            _3485 = (_3484 + 4294967295u) & _3484;
                            uint _3497 = _3495 * 40u;
                            _3510 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3497)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3497 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3497 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3497 + 3u)).x));
                            _3511 = _3510.w;
                            uint _3513 = (_3495 * 40u) + 4u;
                            _3526 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3513)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3513 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3513 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3513 + 3u)).x));
                            uint _3528 = (_3495 * 40u) + 8u;
                            _3538 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3528)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3528 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3528 + 2u)).x));
                            uint _3540 = (_3495 * 40u) + 16u;
                            _3553 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3540)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3540 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3540 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3540 + 3u)).x));
                            uint _3555 = (_3495 * 40u) + 20u;
                            _3568 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3555)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3555 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3555 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3555 + 3u)).x));
                            uint _3570 = (_3495 * 40u) + 24u;
                            vec4 _3583 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3570)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3570 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3570 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3570 + 3u)).x));
                            uint _3589 = (_3495 * 40u) + 28u;
                            vec4 _3602 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3589)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3589 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3589 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3589 + 3u)).x));
                            _3614 = fma(_2014, _3602.z, fma(_2013, _3602.y, _3602.x * _2012)) + _3602.w;
                            _3615 = !((fma(_2014, _3583.z, fma(_2013, _3583.y, _3583.x * _2012)) + _3583.w) <= 0.0);
                            float frontier_phi_78_pred;
                            float frontier_phi_78_pred_1;
                            float frontier_phi_78_pred_2;
                            float frontier_phi_78_pred_3;
                            float frontier_phi_78_pred_4;
                            float frontier_phi_78_pred_5;
                            if (_3615)
                            {
                                float _3642 = _3510.x - _2012;
                                float _3643 = _3510.y - _2013;
                                float _3644 = _3510.z - _2014;
                                float _3645 = dot(vec3(_3642, _3643, _3644), vec3(_3642, _3643, _3644));
                                float _3648 = inversesqrt(_3645);
                                float _3649 = _3648 * _3642;
                                float _3650 = _3648 * _3643;
                                float _3651 = _3648 * _3644;
                                float _3655 = 1.0 - (_3645 / (_3511 * _3511));
                                float _4819 = isnan(0.0) ? _3655 : (isnan(_3655) ? 0.0 : max(_3655, 0.0));
                                float _3656 = isnan(1.0) ? _4819 : (isnan(_4819) ? 1.0 : min(_4819, 1.0));
                                float _3660 = sqrt(_3645) * _3526.w;
                                float _3662 = 1.39999997615814208984375 / (_3660 + 1.39999997615814208984375);
                                float _3663 = _3662 * _3662;
                                float _3666 = ((1.0 - _3663) * dot(vec3(_3649, _3650, _3651), vec3(_898, _901, _904))) + _3663;
                                float _3669 = _3660 * _3660;
                                float _3673 = (fma(_2014, _3553.z, fma(_2013, _3553.y, _3553.x * _2012)) + _3553.w) / _3614;
                                float _3674 = (fma(_2014, _3568.z, fma(_2013, _3568.y, _3568.x * _2012)) + _3568.w) / _3614;
                                float _3678 = 1.0 - dot(vec2(_3673, _3674), vec2(_3673, _3674));
                                float _4835 = isnan(0.0) ? _3678 : (isnan(_3678) ? 0.0 : max(_3678, 0.0));
                                float _3679 = isnan(1.0) ? _4835 : (isnan(_4835) ? 1.0 : min(_4835, 1.0));
                                float _3680 = _3679 * (((isnan(0.0) ? _3666 : (isnan(_3666) ? 0.0 : max(_3666, 0.0))) * _3656) / ((_3669 * 0.699999988079071044921875) + 1.0));
                                float _3692 = exp2(log2(1.0 / ((_3669 * 3.5) + 5.0)) * 0.25);
                                float _3693 = 1.0 - _958;
                                float _3700 = sqrt(1.0 - ((1.0 - (_3693 * _3693)) * (1.0 - (_3692 * _3692))));
                                float _3701 = _3700 * _3700;
                                float _3702 = _3701 * _3701;
                                float _3703 = _3649 - _3153;
                                float _3704 = _3650 - _3154;
                                float _3705 = _3651 - _3155;
                                float _3709 = inversesqrt(dot(vec3(_3703, _3704, _3705), vec3(_3703, _3704, _3705)));
                                float _3713 = dot(vec3(_898, _901, _904), vec3((-0.0) - _3153, (-0.0) - _3154, (-0.0) - _3155));
                                float _4846 = isnan(0.0) ? _3713 : (isnan(_3713) ? 0.0 : max(_3713, 0.0));
                                float _3716 = isnan(1.0) ? _4846 : (isnan(_4846) ? 1.0 : min(_4846, 1.0));
                                float _3717 = dot(vec3(_898, _901, _904), vec3(_3709 * _3703, _3709 * _3704, _3709 * _3705));
                                float _4857 = isnan(0.0) ? _3717 : (isnan(_3717) ? 0.0 : max(_3717, 0.0));
                                float _3720 = isnan(1.0) ? _4857 : (isnan(_4857) ? 1.0 : min(_4857, 1.0));
                                float _3724 = ((_3720 * _3720) * (_3702 + (-1.0))) + 1.0;
                                float _3725 = _3662 * _3701;
                                float _3726 = _3725 * _3725;
                                float _3732 = ((1.0 - _3726) * dot(vec3(_898, _901, _904), vec3(_3649, _3650, _3651))) + _3726;
                                float _4868 = isnan(0.0) ? _3732 : (isnan(_3732) ? 0.0 : max(_3732, 0.0));
                                float _3733 = isnan(1.0) ? _4868 : (isnan(_4868) ? 1.0 : min(_4868, 1.0));
                                float _3734 = 1.0 - _3701;
                                float _3744 = (0.5 / (((_3733 * ((_3716 * _3734) + _3701)) + 9.9999999392252902907785028219223e-09) + (((_3733 * _3734) + _3701) * _3716))) * _3733;
                                float _4879 = isnan(0.0) ? _3744 : (isnan(_3744) ? 0.0 : max(_3744, 0.0));
                                float _3754 = (_3679 * _3656) * (((_3702 * 3.1415927410125732421875) * (isnan(1.0) ? _4879 : (isnan(_4879) ? 1.0 : min(_4879, 1.0)))) / ((_3724 * _3724) * ((_3669 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_78_pred = _3680 * _3526.y;
                                frontier_phi_78_pred_1 = _3680 * _3526.x;
                                frontier_phi_78_pred_2 = _3754 * _3538.z;
                                frontier_phi_78_pred_3 = _3754 * _3538.y;
                                frontier_phi_78_pred_4 = _3754 * _3538.x;
                                frontier_phi_78_pred_5 = _3680 * _3526.z;
                            }
                            else
                            {
                                frontier_phi_78_pred = 0.0;
                                frontier_phi_78_pred_1 = 0.0;
                                frontier_phi_78_pred_2 = 0.0;
                                frontier_phi_78_pred_3 = 0.0;
                                frontier_phi_78_pred_4 = 0.0;
                                frontier_phi_78_pred_5 = 0.0;
                            }
                            _3762 = frontier_phi_78_pred;
                            _3761 = frontier_phi_78_pred_1;
                            _3760 = frontier_phi_78_pred_2;
                            _3759 = frontier_phi_78_pred_3;
                            _3758 = frontier_phi_78_pred_4;
                            _3763 = frontier_phi_78_pred_5;
                            _3468 = _3761 + _3481;
                            _3469 = _3762 + _3482;
                            _3470 = _3763 + _3483;
                            _3465 = _3758 + _3478;
                            _3466 = _3759 + _3479;
                            _3467 = _3760 + _3480;
                            if (_3485 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3478 = _3465;
                                _3479 = _3466;
                                _3480 = _3467;
                                _3481 = _3468;
                                _3482 = _3469;
                                _3483 = _3470;
                                _3484 = _3485;
                                continue;
                            }
                        }
                        frontier_phi_72_pred = _3470;
                        frontier_phi_72_pred_1 = _3469;
                        frontier_phi_72_pred_2 = _3468;
                        frontier_phi_72_pred_3 = _3467;
                        frontier_phi_72_pred_4 = _3466;
                        frontier_phi_72_pred_5 = _3465;
                    }
                    _3138 = frontier_phi_72_pred;
                    _3136 = frontier_phi_72_pred_1;
                    _3134 = frontier_phi_72_pred_2;
                    _3132 = frontier_phi_72_pred_3;
                    _3130 = frontier_phi_72_pred_4;
                    _3128 = frontier_phi_72_pred_5;
                    uint _3273 = _3272 + 1u;
                    if (_3273 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3266 = _3128;
                        _3267 = _3130;
                        _3268 = _3132;
                        _3269 = _3134;
                        _3270 = _3136;
                        _3271 = _3138;
                        _3272 = _3273;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _3138;
                frontier_phi_60_61_ladder_1 = _3136;
                frontier_phi_60_61_ladder_2 = _3132;
                frontier_phi_60_61_ladder_3 = _3130;
                frontier_phi_60_61_ladder_4 = _3128;
                frontier_phi_60_61_ladder_5 = _3134;
            }
            else
            {
                frontier_phi_60_61_ladder = _3024;
                frontier_phi_60_61_ladder_1 = _3022;
                frontier_phi_60_61_ladder_2 = _3018;
                frontier_phi_60_61_ladder_3 = _3016;
                frontier_phi_60_61_ladder_4 = _3014;
                frontier_phi_60_61_ladder_5 = _3020;
            }
            _3127 = frontier_phi_60_61_ladder_4;
            _3129 = frontier_phi_60_61_ladder_3;
            _3131 = frontier_phi_60_61_ladder_2;
            _3133 = frontier_phi_60_61_ladder_5;
            _3135 = frontier_phi_60_61_ladder_1;
            _3137 = frontier_phi_60_61_ladder;
        }
        float _3142 = isnan(1.0) ? _942 : (isnan(_942) ? 1.0 : min(_942, 1.0));
        _2947 = (_3142 * _3133) + _2478;
        _2949 = (_3142 * _3135) + _2480;
        _2951 = (_3142 * _3137) + _2482;
        _2953 = ((_3127 * 0.039999999105930328369140625) * _3142) + _2801;
        _2955 = ((_3129 * 0.039999999105930328369140625) * _3142) + _2803;
        _2957 = ((_3131 * 0.039999999105930328369140625) * _3142) + _2805;
    }
    else
    {
        _2947 = _2478;
        _2949 = _2480;
        _2951 = _2482;
        _2953 = _2801;
        _2955 = _2803;
        _2957 = _2805;
    }
    float _4895 = isnan(0.0) ? _927 : (isnan(_927) ? 0.0 : max(_927, 0.0));
    float _4906 = isnan(0.0) ? _928 : (isnan(_928) ? 0.0 : max(_928, 0.0));
    float _4917 = isnan(0.0) ? _929 : (isnan(_929) ? 0.0 : max(_929, 0.0));
    uint _2977 = _272 + 6u;
    float _2985 = _879 / cbSceneParam._m0[86u].x;
    float _2986 = _880 / cbSceneParam._m0[86u].y;
    vec4 _3000 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2985, _2986, (log2((isnan(cbSceneParam._m0[77u].w) ? _812 : (isnan(_812) ? cbSceneParam._m0[77u].w : min(_812, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3002 = _3000.x;
    float _3003 = _3000.y;
    float _3004 = _3000.z;
    float _3005 = _3000.w;
    float _3077;
    float _3079;
    float _3081;
    float _3083;
    if (_812 > cbSceneParam._m0[78u].w)
    {
        float _3039 = isnan(_812) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _812 : min(cbSceneParam._m0[80u].w, _812));
        float _3040 = _3039 / _812;
        float _3051 = _3040 * _864;
        float _3052 = _865 * _3040;
        float _3053 = (-0.0) - _3052;
        float _3055 = _3040 * _866;
        float _3057 = (cbSceneParam._m0[77u].w * _3053) / _3039;
        float _3058 = _3057 + cbSceneParam._m0[79u].w;
        float _3059 = cbSceneParam._m0[79u].w - _3052;
        float _3065 = sqrt(((_3051 * _3051) + (_3052 * _3052)) + (_3055 * _3055));
        float _3068 = (1.0 - (cbSceneParam._m0[77u].w / _3039)) * _3065;
        float _3073 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3075 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3228;
        if (abs((_3053 - _3057) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3228 = ((((_3058 > 0.0) ? exp2(_3073 * _3058) : (2.0 - exp2(_3075 * _3058))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3068;
        }
        else
        {
            float _3188 = 1.0 / cbSceneParam._m0[80u].x;
            float _3189 = isnan(_3059) ? _3058 : (isnan(_3058) ? _3059 : max(_3058, _3059));
            float _3190 = isnan(_3059) ? _3058 : (isnan(_3058) ? _3059 : min(_3058, _3059));
            float _3199 = isnan(0.0) ? _3189 : (isnan(_3189) ? 0.0 : min(_3189, 0.0));
            float _3200 = isnan(0.0) ? _3190 : (isnan(_3190) ? 0.0 : min(_3190, 0.0));
            _3228 = ((abs(_3065 / _3053) * cbSceneParam._m0[80u].y) * ((((_3199 - _3200) * 2.0) - ((exp2(_3073 * (isnan(0.0) ? _3189 : (isnan(_3189) ? 0.0 : max(_3189, 0.0)))) - exp2(_3073 * (isnan(0.0) ? _3190 : (isnan(_3190) ? 0.0 : max(_3190, 0.0))))) * _3188)) - ((exp2(_3075 * _3199) - exp2(_3075 * _3200)) * _3188))) + (_3068 * cbSceneParam._m0[80u].z);
        }
        vec4 _3230 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2985, _2986, 1.0), 0.0);
        float _3239 = exp2((_3228 * (-1.44269502162933349609375)) * (1.0 - _3230.w));
        float _3240 = log2(_3239);
        float _3256 = log2(_3005);
        _3077 = (exp2(_3256 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3240 * cbSceneParam._m0[78u].x)) * _3230.x) / cbSceneParam._m0[78u].x)) + _3002;
        _3079 = (exp2(_3256 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3240 * cbSceneParam._m0[78u].y)) * _3230.y) / cbSceneParam._m0[78u].y)) + _3003;
        _3081 = (exp2(_3256 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3240 * cbSceneParam._m0[78u].z)) * _3230.z) / cbSceneParam._m0[78u].z)) + _3004;
        _3083 = _3239 * _3005;
    }
    else
    {
        _3077 = _3002;
        _3079 = _3003;
        _3081 = _3004;
        _3083 = _3005;
    }
    float _3095 = roundEven(cbMatDynParam._m0[0u].y);
    bool _3096 = _3095 == 3.0;
    float _3097 = log2(_3083);
    float _3104 = exp2(_3097 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4895 : (isnan(_4895) ? 1.0 : min(_4895, 1.0))) * (_2947 + ((isnan(0.0) ? _1667 : (isnan(_1667) ? 0.0 : max(_1667, 0.0))) * _942))) + ((_2953 + ((isnan(0.0) ? _1959 : (isnan(_1959) ? 0.0 : max(_1959, 0.0))) * _1746)) * cbPerFrame._m0[3u].x));
    float _3105 = exp2(_3097 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4906 : (isnan(_4906) ? 1.0 : min(_4906, 1.0))) * (_2949 + ((isnan(0.0) ? _1670 : (isnan(_1670) ? 0.0 : max(_1670, 0.0))) * _942))) + ((_2955 + ((isnan(0.0) ? _1962 : (isnan(_1962) ? 0.0 : max(_1962, 0.0))) * _1746)) * cbPerFrame._m0[3u].x));
    float _3106 = exp2(_3097 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4917 : (isnan(_4917) ? 1.0 : min(_4917, 1.0))) * (_2951 + ((isnan(0.0) ? _1673 : (isnan(_1673) ? 0.0 : max(_1673, 0.0))) * _942))) + ((_2957 + ((isnan(0.0) ? _1965 : (isnan(_1965) ? 0.0 : max(_1965, 0.0))) * _1746)) * cbPerFrame._m0[3u].x));
    float _3115 = (_3095 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _3115 * (_3096 ? _3104 : (_3104 + (cbSceneParam._m0[72u].w * _3077)));
    SV_Target.y = _3115 * (_3096 ? _3105 : (_3105 + (cbSceneParam._m0[72u].w * _3079)));
    SV_Target.z = _3115 * (_3096 ? _3106 : (_3106 + (cbSceneParam._m0[72u].w * _3081)));
    SV_Target.w = cbInstanceData._m0[_2977].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2977].w;
}


