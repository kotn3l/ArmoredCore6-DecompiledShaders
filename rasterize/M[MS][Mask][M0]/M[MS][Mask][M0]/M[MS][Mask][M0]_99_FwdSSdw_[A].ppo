#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_0;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 13) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_22;
layout(set = 0, binding = 14) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_29;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_10;
layout(set = 0, binding = 20) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_6;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1554;
float _3934;
float _3935;
float _3936;
float _3937;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _242 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _243 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _244 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _250 = inversesqrt(dot(vec3(_242, _243, _244), vec3(_242, _243, _244)));
    float _251 = _250 * _242;
    float _252 = _250 * _243;
    float _253 = _250 * _244;
    float _257 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _258 = _257 * NORMAL.x;
    float _259 = _257 * NORMAL.y;
    float _260 = _257 * NORMAL.z;
    float _264 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _265 = _264 * TANGENT.x;
    float _266 = _264 * TANGENT.y;
    float _267 = _264 * TANGENT.z;
    float _276 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _278 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _279 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3946 = isnan(0.0) ? _276 : (isnan(_276) ? 0.0 : max(_276, 0.0));
    float _3957 = isnan(0.0) ? _278 : (isnan(_278) ? 0.0 : max(_278, 0.0));
    float _3968 = isnan(0.0) ? _279 : (isnan(_279) ? 0.0 : max(_279, 0.0));
    uint _289 = uint(roundEven(NORMAL.w)) * 13u;
    uint _294 = _289 + 1u;
    uint _298 = _289 + 2u;
    float _307 = sqrt(((cbInstanceData._m0[_294].x * cbInstanceData._m0[_294].x) + (cbInstanceData._m0[_289].x * cbInstanceData._m0[_289].x)) + (cbInstanceData._m0[_298].x * cbInstanceData._m0[_298].x));
    float _308 = _307 * TEXCOORD.z;
    float _309 = _307 * TEXCOORD.w;
    vec4 _322 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _308) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _309) + cbTextureTilingScale._m0[13u].w));
    vec4 _345 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _371 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _376 = _371.x * cbMtdParam._m0[11u].x;
    float _377 = _371.y * cbMtdParam._m0[11u].y;
    float _378 = _371.z * cbMtdParam._m0[11u].z;
    vec4 _397 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _308) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _309) + cbTextureTilingScale._m0[5u].w));
    vec4 _416 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _451 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _453 = _451.x;
    float _465 = dot(vec4(_453, _451.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _482 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _416.x) * 2.0) - ((((_453 - _465) * cbMtdParam._m0[24u].z) + _465) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3979 = isnan(0.0) ? _482 : (isnan(_482) ? 0.0 : max(_482, 0.0));
    float _483 = isnan(1.0) ? _3979 : (isnan(_3979) ? 1.0 : min(_3979, 1.0));
    float _490 = (_483 * ((_397.x * cbMtdParam._m0[12u].x) - _376)) + _376;
    float _491 = (_483 * ((_397.y * cbMtdParam._m0[12u].y) - _377)) + _377;
    float _492 = (_483 * ((_397.z * cbMtdParam._m0[12u].z) - _378)) + _378;
    vec4 _509 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _308) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _309) + cbTextureTilingScale._m0[3u].w));
    vec4 _529 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _531 = _529.x;
    float _541 = dot(vec4(_531, _529.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _555 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _416.y) * 2.0) - ((((_531 - _541) * cbMtdParam._m0[24u].z) + _541) * cbMtdParam._m0[20u].w))) + 1.0;
    float _3990 = isnan(0.0) ? _555 : (isnan(_555) ? 0.0 : max(_555, 0.0));
    float _556 = isnan(1.0) ? _3990 : (isnan(_3990) ? 1.0 : min(_3990, 1.0));
    float _566 = (_345.x * cbMtdParam._m0[9u].x) * ((_556 * ((_509.x * cbMtdParam._m0[13u].x) - _490)) + _490);
    float _567 = (_345.y * cbMtdParam._m0[9u].y) * ((_556 * ((_509.y * cbMtdParam._m0[13u].y) - _491)) + _491);
    float _568 = (_345.z * cbMtdParam._m0[9u].z) * ((_556 * ((_509.z * cbMtdParam._m0[13u].z) - _492)) + _492);
    float _572 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _322.x) * _566;
    float _575 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _322.y) * _567;
    float _578 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _322.z) * _568;
    float _586 = (((_566 - _572) * (isnan(1.0) ? _3946 : (isnan(_3946) ? 1.0 : min(_3946, 1.0)))) + _572) * 4.55000019073486328125;
    float _588 = (((_567 - _575) * (isnan(1.0) ? _3957 : (isnan(_3957) ? 1.0 : min(_3957, 1.0)))) + _575) * 4.55000019073486328125;
    float _590 = (((_568 - _578) * (isnan(1.0) ? _3968 : (isnan(_3968) ? 1.0 : min(_3968, 1.0)))) + _578) * 4.55000019073486328125;
    vec4 _609 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _308) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _309) + cbTextureTilingScale._m0[14u].w));
    vec4 _628 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _308) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _309) + cbTextureTilingScale._m0[20u].w));
    vec4 _653 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _308) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _309) + cbTextureTilingScale._m0[4u].w));
    vec4 _670 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _672 = _670.x;
    float _673 = _670.y;
    float _674 = _670.z;
    float _681 = ((_653.x - _672) * _483) + _672;
    float _682 = ((_653.y - _673) * _483) + _673;
    float _683 = ((_653.z - _674) * _483) + _674;
    vec4 _695 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _308) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _309) + cbTextureTilingScale._m0[2u].w));
    float _708 = ((_695.z - _683) * _556) + _683;
    float _711 = ((((_695.x - _681) * _556) + _681) * 2.0) + (-1.0);
    float _712 = ((((_695.y - _682) * _556) + _682) * 2.0) + (-1.0);
    float _713 = dot(vec2(_711, _712), vec2(_711, _712));
    float _4001 = isnan(0.0) ? _713 : (isnan(_713) ? 0.0 : max(_713, 0.0));
    float _718 = sqrt(1.0 - (isnan(1.0) ? _4001 : (isnan(_4001) ? 1.0 : min(_4001, 1.0))));
    vec4 _736 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _748 = (_711 + ((((_628.x * 2.0) + (-1.0)) * TEXCOORD_11.x) * cbMtdParam._m0[20u].x)) + (((_736.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _749 = (_712 + ((((_628.y * 2.0) + (-1.0)) * TEXCOORD_11.y) * cbMtdParam._m0[20u].x)) + (((_736.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _752 = fma(_718, _258, fma(_749, _265, _748 * _251));
    float _755 = fma(_718, _259, fma(_749, _266, _748 * _252));
    float _758 = fma(_718, _260, fma(_749, _267, _748 * _253));
    float _762 = inversesqrt(dot(vec3(_752, _755, _758), vec3(_752, _755, _758)));
    vec4 _789 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _308) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _309) + cbTextureTilingScale._m0[11u].w));
    float _791 = _789.x;
    float _792 = 1.0 - _791;
    float _798 = (cbMtdParam._m0[19u].x + dot(vec4(_762 * _752, _762 * _755, _762 * _758, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_791 - _792) * cbMtdParam._m0[24u].w) + _792) * cbMtdParam._m0[21u].z);
    float _4012 = isnan(0.0) ? _798 : (isnan(_798) ? 0.0 : max(_798, 0.0));
    float _799 = isnan(1.0) ? _4012 : (isnan(_4012) ? 1.0 : min(_4012, 1.0));
    float _801 = (-0.0) - cbMtdParam._m0[24u].x;
    float _803 = isnan(0.0) ? _801 : (isnan(_801) ? 0.0 : max(_801, 0.0));
    float _804 = isnan(1.0) ? _803 : (isnan(_803) ? 1.0 : min(_803, 1.0));
    float _811 = _799 - ((_799 * TEXCOORD_8.x) * _804);
    float _812 = _799 - ((_799 * TEXCOORD_8.y) * _804);
    float _813 = _799 - ((_799 * TEXCOORD_8.z) * _804);
    float _820 = (_811 * ((_609.x * cbMtdParam._m0[18u].x) - _586)) + _586;
    float _821 = (_812 * ((_609.y * cbMtdParam._m0[18u].y) - _588)) + _588;
    float _822 = (_813 * ((_609.z * cbMtdParam._m0[18u].z) - _590)) + _590;
    vec4 _834 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _308) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _309) + cbTextureTilingScale._m0[19u].w));
    float _836 = _834.x;
    float _837 = 1.0 - _836;
    float _865 = (TEXCOORD_8.x - ((cbMtdParam._m0[22u].w * (1.0 - TEXCOORD_8.x)) * ((((_836 - _837) * cbMtdParam._m0[24u].y) + _837) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _4033 = isnan(0.0) ? _865 : (isnan(_865) ? 0.0 : max(_865, 0.0));
    float _866 = isnan(1.0) ? _4033 : (isnan(_4033) ? 1.0 : min(_4033, 1.0));
    float _874 = ((((cbMtdParam._m0[10u].x - _820) * TEXCOORD_8.x) * cbMtdParam._m0[23u].w) * _866) + _820;
    float _875 = ((((cbMtdParam._m0[10u].y - _821) * TEXCOORD_8.y) * cbMtdParam._m0[23u].w) * _866) + _821;
    float _876 = (((cbMtdParam._m0[23u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _822)) * _866) + _822;
    float _881 = (((_628.z - _708) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _708;
    float _885 = ((_736.z - _881) * cbMtdParam._m0[19u].w) + _881;
    vec4 _899 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _308) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _309) + cbTextureTilingScale._m0[15u].w));
    float _906 = (_899.x * 2.0) + (-1.0);
    float _907 = (_899.y * 2.0) + (-1.0);
    float _908 = dot(vec2(_906, _907), vec2(_906, _907));
    float _4044 = isnan(0.0) ? _908 : (isnan(_908) ? 0.0 : max(_908, 0.0));
    float _916 = ((_899.z - _885) * _811) + _885;
    float _919 = ((cbMtdParam._m0[23u].y - _916) * _866) + _916;
    vec4 _938 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _308) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _309) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _944 = (_938.x * 2.0) + (-1.0);
    float _945 = (_938.y * 2.0) + (-1.0);
    float _946 = dot(vec2(_944, _945), vec2(_944, _945));
    float _4055 = isnan(0.0) ? _946 : (isnan(_946) ? 0.0 : max(_946, 0.0));
    float _961 = ((sqrt(1.0 - (isnan(1.0) ? _4044 : (isnan(_4044) ? 1.0 : min(_4044, 1.0)))) - _718) * _813) + _718;
    float _964 = (((_906 - _748) * _811) + _748) + (cbMtdParam._m0[21u].x * _748);
    float _965 = (((_907 - _749) * _812) + _749) + (cbMtdParam._m0[21u].x * _749);
    float _976 = (((_944 - _964) + (_964 * cbMtdParam._m0[22u].z)) * _866) + _964;
    float _977 = (((_945 - _965) + (_965 * cbMtdParam._m0[22u].z)) * _866) + _965;
    float _978 = (_866 * (sqrt(1.0 - (isnan(1.0) ? _4055 : (isnan(_4055) ? 1.0 : min(_4055, 1.0)))) - _961)) + _961;
    float _980 = cbMtdParam._m0[22u].x + _736.w;
    float _983 = fma(_978, _258, fma(_977, _265, _976 * _251));
    float _986 = fma(_978, _259, fma(_977, _266, _976 * _252));
    float _989 = fma(_978, _260, fma(_977, _267, _976 * _253));
    float _993 = inversesqrt(dot(vec3(_983, _986, _989), vec3(_983, _986, _989)));
    float _994 = _993 * _983;
    float _995 = _993 * _986;
    float _996 = _993 * _989;
    float _4066 = isnan(0.0) ? _919 : (isnan(_919) ? 0.0 : max(_919, 0.0));
    float _997 = isnan(1.0) ? _4066 : (isnan(_4066) ? 1.0 : min(_4066, 1.0));
    float _4077 = isnan(0.0) ? _980 : (isnan(_980) ? 0.0 : max(_980, 0.0));
    float _4088 = isnan(0.0) ? _874 : (isnan(_874) ? 0.0 : max(_874, 0.0));
    float _4099 = isnan(0.0) ? _875 : (isnan(_875) ? 0.0 : max(_875, 0.0));
    float _4110 = isnan(0.0) ? _876 : (isnan(_876) ? 0.0 : max(_876, 0.0));
    float _1015 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _1055 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _1065 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _1055);
    float _1066 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _1055);
    float _1067 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _1055);
    float _1071 = inversesqrt(dot(vec3(_1065, _1066, _1067), vec3(_1065, _1066, _1067)));
    float _1072 = _1065 * _1071;
    float _1073 = _1066 * _1071;
    float _1074 = _1067 * _1071;
    vec4 _1079 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _1081 = _1079.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1235 = sqrt(((_1065 * _1065) + (_1066 * _1066)) + (_1067 * _1067));
        float _1241 = (cbMatDynParam._m0[5u].x * _1235) + cbMatDynParam._m0[5u].y;
        float _4121 = isnan(0.0) ? _1241 : (isnan(_1241) ? 0.0 : max(_1241, 0.0));
        float _1242 = isnan(1.0) ? _4121 : (isnan(_4121) ? 1.0 : min(_4121, 1.0));
        float _1246 = (cbMatDynParam._m0[5u].z * _1235) + cbMatDynParam._m0[5u].w;
        float _4132 = isnan(0.0) ? _1246 : (isnan(_1246) ? 0.0 : max(_1246, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4132 : (isnan(_4132) ? 1.0 : min(_4132, 1.0))) - _1242)) + _1242) < ((_1081 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _1092 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1093 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1111 = fma(_996, cbSceneParam._m0[5u].z, fma(_995, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _994));
    float _1114 = fma(_996, cbSceneParam._m0[6u].z, fma(_995, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _994));
    float _1117 = fma(_996, cbSceneParam._m0[7u].z, fma(_995, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _994));
    uint _1130 = _289 + 9u;
    uint _1131 = _1130 + uint(cbMatDynParam._m0[0u].w);
    float _1137 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4088 : (isnan(_4088) ? 1.0 : min(_4088, 1.0)))) * cbInstanceData._m0[_1131].x;
    float _1138 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4099 : (isnan(_4099) ? 1.0 : min(_4099, 1.0)))) * cbInstanceData._m0[_1131].y;
    float _1139 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4110 : (isnan(_4110) ? 1.0 : min(_4110, 1.0)))) * cbInstanceData._m0[_1131].z;
    float _4143 = isnan(0.0) ? _1137 : (isnan(_1137) ? 0.0 : max(_1137, 0.0));
    float _1140 = isnan(1.0) ? _4143 : (isnan(_4143) ? 1.0 : min(_4143, 1.0));
    float _4154 = isnan(0.0) ? _1138 : (isnan(_1138) ? 0.0 : max(_1138, 0.0));
    float _1141 = isnan(1.0) ? _4154 : (isnan(_4154) ? 1.0 : min(_4154, 1.0));
    float _4165 = isnan(0.0) ? _1139 : (isnan(_1139) ? 0.0 : max(_1139, 0.0));
    float _1142 = isnan(1.0) ? _4165 : (isnan(_4165) ? 1.0 : min(_4165, 1.0));
    vec4 _1151 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1092, cbSceneParam._m0[86u].y * _1093));
    float _1155 = ((isnan(1.0) ? _4077 : (isnan(_4077) ? 1.0 : min(_4077, 1.0))) * TEXCOORD_5.w) * _1151.x;
    float _1156 = dot(vec3(_994, _995, _996), vec3(_1072, _1073, _1074));
    float _1159 = _1156 * 2.0;
    float _1163 = (_1159 * _994) - _1072;
    float _1164 = (_1159 * _995) - _1073;
    float _1165 = (_1159 * _996) - _1074;
    float _1169 = abs(dot(vec3(_1072, _1073, _1074), vec3(_994, _995, _996)));
    float _4176 = isnan(0.0) ? _1169 : (isnan(_1169) ? 0.0 : max(_1169, 0.0));
    float _1171 = sqrt(_997);
    float _1184 = exp2((_1171 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4176 : (isnan(_4176) ? 1.0 : min(_4176, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1171 * 3.0));
    float _1216 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1220 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1224 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1553;
    float _1555;
    float _1556;
    float _1557;
    float _1558;
    float _1559;
    float _1560;
    float _1561;
    float _1562;
    float _1563;
    float _1564;
    float _1565;
    float _1566;
    float _1567;
    float _1568;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1278 = fma(_1224, cbModelParam._m0[26u].z, fma(_1220, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1216));
        float _1282 = fma(_1224, cbModelParam._m0[27u].z, fma(_1220, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1216));
        float _1286 = fma(_1224, cbModelParam._m0[28u].z, fma(_1220, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1216));
        float _1311 = _1216 + _994;
        float _1312 = _1220 + _995;
        float _1313 = _1224 + _996;
        float _1323 = fma(_1313, cbModelParam._m0[26u].z, fma(_1312, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1311)) - _1278;
        float _1324 = fma(_1313, cbModelParam._m0[27u].z, fma(_1312, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1311)) - _1282;
        float _1325 = fma(_1313, cbModelParam._m0[28u].z, fma(_1312, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1311)) - _1286;
        float _1329 = inversesqrt(dot(vec3(_1323, _1324, _1325), vec3(_1323, _1324, _1325)));
        float _1342 = ((_1329 * _1323) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1278 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1343 = ((_1329 * _1324) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1282 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1344 = ((_1329 * _1325) / cbModelParam._m0[34u].z) + ((((((_1286 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1347 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1342, _1343, _1344), 0.0);
        vec4 _1354 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1342, _1343, _1344), 0.0);
        vec4 _1361 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1342, _1343, _1344), 0.0);
        vec4 _1368 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1342, _1343, _1344), 0.0);
        float _1381 = exp2((_1347.w + (-0.5)) * 20.0) * 2.0;
        float _1382 = _1381 * (_1347.x + (-0.5));
        float _1383 = _1381 * (_1347.y + (-0.5));
        float _1384 = _1381 * (_1347.z + (-0.5));
        float _1391 = exp2((_1354.w + (-0.5)) * 20.0) * 2.0;
        float _1392 = _1391 * (_1354.x + (-0.5));
        float _1393 = _1391 * (_1354.y + (-0.5));
        float _1394 = _1391 * (_1354.z + (-0.5));
        float _1401 = exp2((_1361.w + (-0.5)) * 20.0) * 2.0;
        float _1402 = _1401 * (_1361.x + (-0.5));
        float _1403 = _1401 * (_1361.y + (-0.5));
        float _1404 = _1401 * (_1361.z + (-0.5));
        float _1411 = exp2((_1368.w + (-0.5)) * 20.0) * 2.0;
        float _1412 = _1411 * (_1368.x + (-0.5));
        float _1413 = _1411 * (_1368.y + (-0.5));
        float _1414 = _1411 * (_1368.z + (-0.5));
        float _1415 = isnan(0.0) ? _1412 : (isnan(_1412) ? 0.0 : max(_1412, 0.0));
        float _1416 = isnan(0.0) ? _1413 : (isnan(_1413) ? 0.0 : max(_1413, 0.0));
        float _1417 = isnan(0.0) ? _1414 : (isnan(_1414) ? 0.0 : max(_1414, 0.0));
        float _1418 = _1382 * 0.5;
        float _1419 = _1392 * 0.5;
        float _1420 = _1402 * 0.5;
        float _1421 = dot(vec3(_1418, _1419, _1420), vec3(_1418, _1419, _1420));
        float _1426 = (_1421 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1421);
        float _1435 = (dot(vec3(_994, _995, _996), vec3(_1426 * _1418, _1426 * _1419, _1426 * _1420)) + 1.0) * 0.5;
        float _4202 = isnan(0.0) ? _1435 : (isnan(_1435) ? 0.0 : max(_1435, 0.0));
        float _1445 = sqrt(((_1419 * _1419) + (_1418 * _1418)) + (_1420 * _1420)) / (_1415 + 9.9999997473787516355514526367188e-06);
        float _4213 = isnan(0.0) ? _1445 : (isnan(_1445) ? 0.0 : max(_1445, 0.0));
        float _1446 = isnan(1.0) ? _4213 : (isnan(_4213) ? 1.0 : min(_4213, 1.0));
        float _1447 = _1446 * 2.0;
        float _1451 = (1.0 - _1446) / (_1446 + 1.0);
        float _4224 = isnan(0.0) ? _1451 : (isnan(_1451) ? 0.0 : max(_1451, 0.0));
        float _1452 = isnan(1.0) ? _4224 : (isnan(_4224) ? 1.0 : min(_4224, 1.0));
        float _1461 = ((((1.0 - _1452) * (_1447 + 2.0)) * exp2(log2(isnan(1.0) ? _4202 : (isnan(_4202) ? 1.0 : min(_4202, 1.0))) * (_1447 + 1.0))) + _1452) * _1415;
        float _1462 = _1383 * 0.5;
        float _1463 = _1393 * 0.5;
        float _1464 = _1403 * 0.5;
        float _1465 = dot(vec3(_1462, _1463, _1464), vec3(_1462, _1463, _1464));
        float _1470 = (_1465 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1465);
        float _1478 = (dot(vec3(_994, _995, _996), vec3(_1470 * _1462, _1470 * _1463, _1470 * _1464)) + 1.0) * 0.5;
        float _4235 = isnan(0.0) ? _1478 : (isnan(_1478) ? 0.0 : max(_1478, 0.0));
        float _1487 = sqrt(((_1463 * _1463) + (_1462 * _1462)) + (_1464 * _1464)) / (_1416 + 9.9999997473787516355514526367188e-06);
        float _4246 = isnan(0.0) ? _1487 : (isnan(_1487) ? 0.0 : max(_1487, 0.0));
        float _1488 = isnan(1.0) ? _4246 : (isnan(_4246) ? 1.0 : min(_4246, 1.0));
        float _1489 = _1488 * 2.0;
        float _1493 = (1.0 - _1488) / (_1488 + 1.0);
        float _4257 = isnan(0.0) ? _1493 : (isnan(_1493) ? 0.0 : max(_1493, 0.0));
        float _1494 = isnan(1.0) ? _4257 : (isnan(_4257) ? 1.0 : min(_4257, 1.0));
        float _1503 = ((((1.0 - _1494) * (_1489 + 2.0)) * exp2(log2(isnan(1.0) ? _4235 : (isnan(_4235) ? 1.0 : min(_4235, 1.0))) * (_1489 + 1.0))) + _1494) * _1416;
        float _1504 = _1384 * 0.5;
        float _1505 = _1394 * 0.5;
        float _1506 = _1404 * 0.5;
        float _1507 = dot(vec3(_1504, _1505, _1506), vec3(_1504, _1505, _1506));
        float _1512 = (_1507 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1507);
        float _1520 = (dot(vec3(_994, _995, _996), vec3(_1512 * _1504, _1512 * _1505, _1512 * _1506)) + 1.0) * 0.5;
        float _4268 = isnan(0.0) ? _1520 : (isnan(_1520) ? 0.0 : max(_1520, 0.0));
        float _1529 = sqrt(((_1505 * _1505) + (_1504 * _1504)) + (_1506 * _1506)) / (_1417 + 9.9999997473787516355514526367188e-06);
        float _4279 = isnan(0.0) ? _1529 : (isnan(_1529) ? 0.0 : max(_1529, 0.0));
        float _1530 = isnan(1.0) ? _4279 : (isnan(_4279) ? 1.0 : min(_4279, 1.0));
        float _1531 = _1530 * 2.0;
        float _1535 = (1.0 - _1530) / (_1530 + 1.0);
        float _4290 = isnan(0.0) ? _1535 : (isnan(_1535) ? 0.0 : max(_1535, 0.0));
        float _1536 = isnan(1.0) ? _4290 : (isnan(_4290) ? 1.0 : min(_4290, 1.0));
        float _1545 = ((((1.0 - _1536) * (_1531 + 2.0)) * exp2(log2(isnan(1.0) ? _4268 : (isnan(_4268) ? 1.0 : min(_4268, 1.0))) * (_1531 + 1.0))) + _1536) * _1417;
        _1553 = _1384;
        _1555 = _1383;
        _1556 = _1382;
        _1557 = _1394;
        _1558 = _1393;
        _1559 = _1392;
        _1560 = _1404;
        _1561 = _1403;
        _1562 = _1402;
        _1563 = _1417;
        _1564 = _1416;
        _1565 = _1415;
        _1566 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1461 : (isnan(_1461) ? 0.0 : max(_1461, 0.0)));
        _1567 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1503 : (isnan(_1503) ? 0.0 : max(_1503, 0.0)));
        _1568 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1545 : (isnan(_1545) ? 0.0 : max(_1545, 0.0)));
    }
    else
    {
        _1553 = _1554;
        _1555 = _1554;
        _1556 = _1554;
        _1557 = _1554;
        _1558 = _1554;
        _1559 = _1554;
        _1560 = _1554;
        _1561 = _1554;
        _1562 = _1554;
        _1563 = _1554;
        _1564 = _1554;
        _1565 = _1554;
        _1566 = 0.0;
        _1567 = 0.0;
        _1568 = 0.0;
    }
    float _1864;
    float _1865;
    float _1866;
    float _1867;
    float _1868;
    float _1869;
    float _1870;
    float _1871;
    float _1872;
    float _1873;
    float _1874;
    float _1875;
    float _1876;
    float _1877;
    float _1878;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1595 = fma(_1224, cbModelParam._m0[30u].z, fma(_1220, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1216));
        float _1599 = fma(_1224, cbModelParam._m0[31u].z, fma(_1220, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1216));
        float _1603 = fma(_1224, cbModelParam._m0[32u].z, fma(_1220, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1216));
        float _1626 = _1216 + _994;
        float _1627 = _1220 + _995;
        float _1628 = _1224 + _996;
        float _1638 = fma(_1628, cbModelParam._m0[30u].z, fma(_1627, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1626)) - _1595;
        float _1639 = fma(_1628, cbModelParam._m0[31u].z, fma(_1627, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1626)) - _1599;
        float _1640 = fma(_1628, cbModelParam._m0[32u].z, fma(_1627, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1626)) - _1603;
        float _1644 = inversesqrt(dot(vec3(_1638, _1639, _1640), vec3(_1638, _1639, _1640)));
        float _1657 = ((_1644 * _1638) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1595 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1658 = ((_1644 * _1639) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1599 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1659 = ((_1644 * _1640) / cbModelParam._m0[35u].z) + ((((((_1603 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1661 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1657, _1658, _1659), 0.0);
        vec4 _1668 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1657, _1658, _1659), 0.0);
        vec4 _1675 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1657, _1658, _1659), 0.0);
        vec4 _1682 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1657, _1658, _1659), 0.0);
        float _1694 = exp2((_1661.w + (-0.5)) * 20.0) * 2.0;
        float _1695 = _1694 * (_1661.x + (-0.5));
        float _1696 = _1694 * (_1661.y + (-0.5));
        float _1697 = _1694 * (_1661.z + (-0.5));
        float _1704 = exp2((_1668.w + (-0.5)) * 20.0) * 2.0;
        float _1705 = _1704 * (_1668.x + (-0.5));
        float _1706 = _1704 * (_1668.y + (-0.5));
        float _1707 = _1704 * (_1668.z + (-0.5));
        float _1714 = exp2((_1675.w + (-0.5)) * 20.0) * 2.0;
        float _1715 = _1714 * (_1675.x + (-0.5));
        float _1716 = _1714 * (_1675.y + (-0.5));
        float _1717 = _1714 * (_1675.z + (-0.5));
        float _1724 = exp2((_1682.w + (-0.5)) * 20.0) * 2.0;
        float _1725 = _1724 * (_1682.x + (-0.5));
        float _1726 = _1724 * (_1682.y + (-0.5));
        float _1727 = _1724 * (_1682.z + (-0.5));
        float _1728 = isnan(0.0) ? _1725 : (isnan(_1725) ? 0.0 : max(_1725, 0.0));
        float _1729 = isnan(0.0) ? _1726 : (isnan(_1726) ? 0.0 : max(_1726, 0.0));
        float _1730 = isnan(0.0) ? _1727 : (isnan(_1727) ? 0.0 : max(_1727, 0.0));
        float _1731 = _1695 * 0.5;
        float _1732 = _1705 * 0.5;
        float _1733 = _1715 * 0.5;
        float _1734 = dot(vec3(_1731, _1732, _1733), vec3(_1731, _1732, _1733));
        float _1739 = (_1734 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1734);
        float _1747 = (dot(vec3(_994, _995, _996), vec3(_1739 * _1731, _1739 * _1732, _1739 * _1733)) + 1.0) * 0.5;
        float _4331 = isnan(0.0) ? _1747 : (isnan(_1747) ? 0.0 : max(_1747, 0.0));
        float _1756 = sqrt(((_1732 * _1732) + (_1731 * _1731)) + (_1733 * _1733)) / (_1728 + 9.9999997473787516355514526367188e-06);
        float _4342 = isnan(0.0) ? _1756 : (isnan(_1756) ? 0.0 : max(_1756, 0.0));
        float _1757 = isnan(1.0) ? _4342 : (isnan(_4342) ? 1.0 : min(_4342, 1.0));
        float _1758 = _1757 * 2.0;
        float _1762 = (1.0 - _1757) / (_1757 + 1.0);
        float _4353 = isnan(0.0) ? _1762 : (isnan(_1762) ? 0.0 : max(_1762, 0.0));
        float _1763 = isnan(1.0) ? _4353 : (isnan(_4353) ? 1.0 : min(_4353, 1.0));
        float _1772 = ((((1.0 - _1763) * (_1758 + 2.0)) * exp2(log2(isnan(1.0) ? _4331 : (isnan(_4331) ? 1.0 : min(_4331, 1.0))) * (_1758 + 1.0))) + _1763) * _1728;
        float _1773 = _1696 * 0.5;
        float _1774 = _1706 * 0.5;
        float _1775 = _1716 * 0.5;
        float _1776 = dot(vec3(_1773, _1774, _1775), vec3(_1773, _1774, _1775));
        float _1781 = (_1776 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1776);
        float _1789 = (dot(vec3(_994, _995, _996), vec3(_1781 * _1773, _1781 * _1774, _1781 * _1775)) + 1.0) * 0.5;
        float _4364 = isnan(0.0) ? _1789 : (isnan(_1789) ? 0.0 : max(_1789, 0.0));
        float _1798 = sqrt(((_1774 * _1774) + (_1773 * _1773)) + (_1775 * _1775)) / (_1729 + 9.9999997473787516355514526367188e-06);
        float _4375 = isnan(0.0) ? _1798 : (isnan(_1798) ? 0.0 : max(_1798, 0.0));
        float _1799 = isnan(1.0) ? _4375 : (isnan(_4375) ? 1.0 : min(_4375, 1.0));
        float _1800 = _1799 * 2.0;
        float _1804 = (1.0 - _1799) / (_1799 + 1.0);
        float _4386 = isnan(0.0) ? _1804 : (isnan(_1804) ? 0.0 : max(_1804, 0.0));
        float _1805 = isnan(1.0) ? _4386 : (isnan(_4386) ? 1.0 : min(_4386, 1.0));
        float _1814 = ((((1.0 - _1805) * (_1800 + 2.0)) * exp2(log2(isnan(1.0) ? _4364 : (isnan(_4364) ? 1.0 : min(_4364, 1.0))) * (_1800 + 1.0))) + _1805) * _1729;
        float _1815 = _1697 * 0.5;
        float _1816 = _1707 * 0.5;
        float _1817 = _1717 * 0.5;
        float _1818 = dot(vec3(_1815, _1816, _1817), vec3(_1815, _1816, _1817));
        float _1823 = (_1818 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1818);
        float _1831 = (dot(vec3(_994, _995, _996), vec3(_1823 * _1815, _1823 * _1816, _1823 * _1817)) + 1.0) * 0.5;
        float _4397 = isnan(0.0) ? _1831 : (isnan(_1831) ? 0.0 : max(_1831, 0.0));
        float _1840 = sqrt(((_1816 * _1816) + (_1815 * _1815)) + (_1817 * _1817)) / (_1730 + 9.9999997473787516355514526367188e-06);
        float _4408 = isnan(0.0) ? _1840 : (isnan(_1840) ? 0.0 : max(_1840, 0.0));
        float _1841 = isnan(1.0) ? _4408 : (isnan(_4408) ? 1.0 : min(_4408, 1.0));
        float _1842 = _1841 * 2.0;
        float _1846 = (1.0 - _1841) / (_1841 + 1.0);
        float _4419 = isnan(0.0) ? _1846 : (isnan(_1846) ? 0.0 : max(_1846, 0.0));
        float _1847 = isnan(1.0) ? _4419 : (isnan(_4419) ? 1.0 : min(_4419, 1.0));
        float _1856 = ((((1.0 - _1847) * (_1842 + 2.0)) * exp2(log2(isnan(1.0) ? _4397 : (isnan(_4397) ? 1.0 : min(_4397, 1.0))) * (_1842 + 1.0))) + _1847) * _1730;
        _1864 = _1697;
        _1865 = _1696;
        _1866 = _1695;
        _1867 = _1707;
        _1868 = _1706;
        _1869 = _1705;
        _1870 = _1717;
        _1871 = _1716;
        _1872 = _1715;
        _1873 = _1730;
        _1874 = _1729;
        _1875 = _1728;
        _1876 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1772 : (isnan(_1772) ? 0.0 : max(_1772, 0.0)));
        _1877 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1814 : (isnan(_1814) ? 0.0 : max(_1814, 0.0)));
        _1878 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1856 : (isnan(_1856) ? 0.0 : max(_1856, 0.0)));
    }
    else
    {
        _1864 = _1554;
        _1865 = _1554;
        _1866 = _1554;
        _1867 = _1554;
        _1868 = _1554;
        _1869 = _1554;
        _1870 = _1554;
        _1871 = _1554;
        _1872 = _1554;
        _1873 = _1554;
        _1874 = _1554;
        _1875 = _1554;
        _1876 = 0.0;
        _1877 = 0.0;
        _1878 = 0.0;
    }
    float _1888 = (cbModelParam._m0[1u].x * (_1876 - _1566)) + _1566;
    float _1889 = (cbModelParam._m0[1u].x * (_1877 - _1567)) + _1567;
    float _1890 = (cbModelParam._m0[1u].x * (_1878 - _1568)) + _1568;
    float _1911 = fma(_1890, cbSceneParam._m0[89u].z, fma(_1889, cbSceneParam._m0[89u].y, _1888 * cbSceneParam._m0[89u].x));
    float _1914 = fma(_1890, cbSceneParam._m0[90u].z, fma(_1889, cbSceneParam._m0[90u].y, _1888 * cbSceneParam._m0[90u].x));
    float _1917 = fma(_1890, cbSceneParam._m0[91u].z, fma(_1889, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1888));
    float _1932 = _1163 * 0.5;
    float _1933 = _1164 * 0.5;
    float _1934 = _1165 * 0.5;
    float _1935 = dot(vec4(_1932, _1933, _1934, 1.0), vec4(_1866, _1869, _1872, _1875));
    float _1938 = dot(vec4(_1932, _1933, _1934, 1.0), vec4(_1865, _1868, _1871, _1874));
    float _1941 = dot(vec4(_1932, _1933, _1934, 1.0), vec4(_1864, _1867, _1870, _1873));
    float _1975;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1948 = dot(vec4(_1932, _1933, _1934, 1.0), vec4(_1553, _1557, _1560, _1563));
        float _1952 = dot(vec4(_1932, _1933, _1934, 1.0), vec4(_1555, _1558, _1561, _1564));
        float _1956 = dot(vec4(_1932, _1933, _1934, 1.0), vec4(_1556, _1559, _1562, _1565));
        float _1963 = dot(vec4(cbModelParam._m0[39u]), vec4(_1932, _1933, _1934, 1.0));
        _1975 = dot(vec3(isnan(0.0) ? _1956 : (isnan(_1956) ? 0.0 : max(_1956, 0.0)), isnan(0.0) ? _1952 : (isnan(_1952) ? 0.0 : max(_1952, 0.0)), isnan(0.0) ? _1948 : (isnan(_1948) ? 0.0 : max(_1948, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1963) ? 0.0 : (isnan(0.0) ? _1963 : max(0.0, _1963))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1975 = 1.0;
    }
    float _1986;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1977 = dot(vec4(cbModelParam._m0[40u]), vec4(_1932, _1933, _1934, 1.0));
        _1986 = dot(vec3(isnan(0.0) ? _1935 : (isnan(_1935) ? 0.0 : max(_1935, 0.0)), isnan(0.0) ? _1938 : (isnan(_1938) ? 0.0 : max(_1938, 0.0)), isnan(0.0) ? _1941 : (isnan(_1941) ? 0.0 : max(_1941, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1977) ? 0.0 : (isnan(0.0) ? _1977 : max(0.0, _1977))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1986 = 1.0;
    }
    float _1990 = (_1986 * cbModelParam._m0[1u].x) + (_1975 * (1.0 - cbModelParam._m0[1u].x));
    float _2000 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _997);
    float _2001 = isnan(_2000) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _2000 : min(cbModelParam._m0[25u].z, _2000));
    float _2081;
    float _2083;
    float _2085;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _2048 = fma(_1224, cbModelParam._m0[13u].z, fma(_1220, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1216)) + cbModelParam._m0[13u].w;
        float _2052 = fma(_1224, cbModelParam._m0[14u].z, fma(_1220, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1216)) + cbModelParam._m0[14u].w;
        float _2056 = fma(_1224, cbModelParam._m0[15u].z, fma(_1220, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1216)) + cbModelParam._m0[15u].w;
        float _2059 = fma(_1165, cbModelParam._m0[13u].z, fma(_1164, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1163));
        float _2062 = fma(_1165, cbModelParam._m0[14u].z, fma(_1164, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1163));
        float _2065 = fma(_1165, cbModelParam._m0[15u].z, fma(_1164, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1163));
        float _2093;
        if (_2059 > 0.0)
        {
            _2093 = abs((1.0 - _2048) / _2059);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_2059 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_2048 + 1.0) / _2059);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _2093 = frontier_phi_17_15_ladder;
        }
        float _2314;
        if (_2062 > 0.0)
        {
            _2314 = abs((1.0 - _2052) / _2062);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_2062 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_2052 + 1.0) / _2062);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2314 = frontier_phi_26_22_ladder;
        }
        float _2560;
        if (_2065 > 0.0)
        {
            _2560 = abs((1.0 - _2056) / _2065);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_2065 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_2056 + 1.0) / _2065);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2560 = frontier_phi_38_33_ladder;
        }
        float _2562 = isnan(_2314) ? _2093 : (isnan(_2093) ? _2314 : min(_2093, _2314));
        float _2563 = isnan(_2560) ? _2562 : (isnan(_2562) ? _2560 : min(_2562, _2560));
        float _2567 = (_2563 * _2059) + _2048;
        float _2568 = (_2563 * _2062) + _2052;
        float _2569 = (_2563 * _2065) + _2056;
        float _2570 = _2563 * 9.9999997473787516355514526367188e-05;
        float _2572 = (-1.0) - _2570;
        float _2574 = _2570 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2569 > _2574) || ((_2569 < _2572) || ((_2568 > _2574) || ((_2568 < _2572) || ((_2567 < _2572) || (_2567 > _2574))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2693 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2569, cbModelParam._m0[9u].z, fma(_2568, cbModelParam._m0[9u].y, _2567 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2569, cbModelParam._m0[10u].z, fma(_2568, cbModelParam._m0[10u].y, _2567 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2569, cbModelParam._m0[11u].z, fma(_2568, cbModelParam._m0[11u].y, _2567 * cbModelParam._m0[11u].x))), _2001);
            frontier_phi_16_38_ladder = _2693.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2693.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2693.x * cbModelParam._m0[1u].y;
        }
        _2081 = frontier_phi_16_38_ladder_2;
        _2083 = frontier_phi_16_38_ladder_1;
        _2085 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _2069 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1163, _1164, _1165), _2001);
        _2081 = _2069.x * cbModelParam._m0[1u].y;
        _2083 = _2069.y * cbModelParam._m0[1u].y;
        _2085 = _2069.z * cbModelParam._m0[1u].y;
    }
    float _2089 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _997);
    float _2090 = isnan(_2089) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2089 : min(cbModelParam._m0[25u].w, _2089));
    float _2179;
    float _2181;
    float _2183;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2143 = fma(_1224, cbModelParam._m0[21u].z, fma(_1220, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1216)) + cbModelParam._m0[21u].w;
        float _2147 = fma(_1224, cbModelParam._m0[22u].z, fma(_1220, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1216)) + cbModelParam._m0[22u].w;
        float _2151 = fma(_1224, cbModelParam._m0[23u].z, fma(_1220, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1216)) + cbModelParam._m0[23u].w;
        float _2154 = fma(_1165, cbModelParam._m0[21u].z, fma(_1164, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1163));
        float _2157 = fma(_1165, cbModelParam._m0[22u].z, fma(_1164, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1163));
        float _2160 = fma(_1165, cbModelParam._m0[23u].z, fma(_1164, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1163));
        float _2319;
        if (_2154 > 0.0)
        {
            _2319 = abs((1.0 - _2143) / _2154);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_2154 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_2143 + 1.0) / _2154);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2319 = frontier_phi_28_24_ladder;
        }
        float _2587;
        if (_2157 > 0.0)
        {
            _2587 = abs((1.0 - _2147) / _2157);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_2157 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_2147 + 1.0) / _2157);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2587 = frontier_phi_40_35_ladder;
        }
        float _2792;
        if (_2160 > 0.0)
        {
            _2792 = abs((1.0 - _2151) / _2160);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_2160 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_2151 + 1.0) / _2160);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2792 = frontier_phi_49_46_ladder;
        }
        float _2794 = isnan(_2587) ? _2319 : (isnan(_2319) ? _2587 : min(_2319, _2587));
        float _2795 = isnan(_2792) ? _2794 : (isnan(_2794) ? _2792 : min(_2794, _2792));
        float _2799 = (_2795 * _2154) + _2143;
        float _2800 = (_2795 * _2157) + _2147;
        float _2801 = (_2795 * _2160) + _2151;
        float _2802 = _2795 * 9.9999997473787516355514526367188e-05;
        float _2803 = (-1.0) - _2802;
        float _2805 = _2802 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2801 > _2805) || ((_2801 < _2803) || ((_2800 > _2805) || ((_2800 < _2803) || ((_2799 < _2803) || (_2799 > _2805))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _3000 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2801, cbModelParam._m0[17u].z, fma(_2800, cbModelParam._m0[17u].y, _2799 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2801, cbModelParam._m0[18u].z, fma(_2800, cbModelParam._m0[18u].y, _2799 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2801, cbModelParam._m0[19u].z, fma(_2800, cbModelParam._m0[19u].y, _2799 * cbModelParam._m0[19u].x))), _2090);
            frontier_phi_25_49_ladder = _3000.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _3000.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _3000.x * cbModelParam._m0[1u].z;
        }
        _2179 = frontier_phi_25_49_ladder_2;
        _2181 = frontier_phi_25_49_ladder_1;
        _2183 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _2163 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1163, _1164, _1165), _2090);
        _2179 = _2163.x * cbModelParam._m0[1u].z;
        _2181 = _2163.y * cbModelParam._m0[1u].z;
        _2183 = _2163.z * cbModelParam._m0[1u].z;
    }
    float _2195 = ((((1.0 - _1184) * ((_1171 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_1184 * _1171)) * _1155;
    float _2196 = _2195 * ((cbModelParam._m0[1u].w * (_2179 - _2081)) + _2081);
    float _2197 = _2195 * ((cbModelParam._m0[1u].w * (_2181 - _2083)) + _2083);
    float _2198 = _2195 * ((cbModelParam._m0[1u].w * (_2183 - _2085)) + _2085);
    float _2201 = fma(_2198, cbSceneParam._m0[89u].z, fma(_2197, cbSceneParam._m0[89u].y, _2196 * cbSceneParam._m0[89u].x));
    float _2204 = fma(_2198, cbSceneParam._m0[90u].z, fma(_2197, cbSceneParam._m0[90u].y, _2196 * cbSceneParam._m0[90u].x));
    float _2207 = fma(_2198, cbSceneParam._m0[91u].z, fma(_2197, cbSceneParam._m0[91u].y, _2196 * cbSceneParam._m0[91u].x));
    vec4 _2215 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_1092, _1093));
    float _2217 = _2215.w;
    float _2229 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _2217);
    float _2230 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _2217);
    float _2231 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _2217);
    uvec4 _2235 = floatBitsToUint(cbInstanceData._m0[_289 + 5u]);
    uint _2237 = _2235.x * 14u;
    uint _2238 = _2237 + 13u;
    float _2245 = _1155 + (-1.0);
    float _2250 = (cbLight._m0[_2238].x * _2245) + 1.0;
    float _2251 = (cbLight._m0[_2238].y * _2245) + 1.0;
    float _2252 = (cbLight._m0[_2238].z * _2245) + 1.0;
    float _2253 = (cbLight._m0[_2238].w * _2245) + 1.0;
    uint _2254 = _2237 + 5u;
    float _2260 = isnan(1.0) ? _2251 : (isnan(_2251) ? 1.0 : min(_2251, 1.0));
    uint _2264 = _2237 + 4u;
    float _2273 = isnan(1.0) ? _2250 : (isnan(_2250) ? 1.0 : min(_2250, 1.0));
    uint _2277 = _2237 | 1u;
    float _2288 = dot(vec3(cbLight._m0[_2237].xyz), vec3(_994, _995, _996));
    float _2291 = dot(vec3(cbLight._m0[_2277].xyz), vec3(_994, _995, _996));
    float _4555 = isnan(0.0) ? _2288 : (isnan(_2288) ? 0.0 : max(_2288, 0.0));
    float _4566 = isnan(0.0) ? _2291 : (isnan(_2291) ? 0.0 : max(_2291, 0.0));
    float _2296 = (isnan(1.0) ? _4555 : (isnan(_4555) ? 1.0 : min(_4555, 1.0))) * 0.3183098733425140380859375;
    float _2298 = (isnan(1.0) ? _4566 : (isnan(_4566) ? 1.0 : min(_4566, 1.0))) * 0.3183098733425140380859375;
    float _2305 = ((cbLight._m0[_2254].x * _2260) * _2298) + (((cbLight._m0[_2264].x * _2229) * _2273) * _2296);
    float _2306 = ((_2260 * cbLight._m0[_2254].y) * _2298) + (((cbLight._m0[_2264].y * _2230) * _2273) * _2296);
    float _2307 = ((_2260 * cbLight._m0[_2254].z) * _2298) + (((cbLight._m0[_2264].z * _2231) * _2273) * _2296);
    uvec4 _2311 = floatBitsToUint(cbLight._m0[_2237 + 12u]);
    bool _2313 = _2311.x == 0u;
    float _2324;
    float _2326;
    float _2328;
    if (_2313)
    {
        _2324 = _2305;
        _2326 = _2306;
        _2328 = _2307;
    }
    else
    {
        uint _2332 = _2237 + 6u;
        float _2348 = (dot(vec3(cbLight._m0[_2237 + 2u].xyz), vec3(_994, _995, _996)) * 0.5) + 0.5;
        float _2349 = _2348 * _2348;
        float _4577 = isnan(0.0) ? _2349 : (isnan(_2349) ? 0.0 : max(_2349, 0.0));
        float _2350 = isnan(1.0) ? _4577 : (isnan(_4577) ? 1.0 : min(_4577, 1.0));
        float _2351 = isnan(1.0) ? _2252 : (isnan(_2252) ? 1.0 : min(_2252, 1.0));
        _2324 = (((cbLight._m0[_2332].x * 0.3183098733425140380859375) * _2350) * _2351) + _2305;
        _2326 = (((cbLight._m0[_2332].y * 0.3183098733425140380859375) * _2350) * _2351) + _2306;
        _2328 = (((cbLight._m0[_2332].z * 0.3183098733425140380859375) * _2350) * _2351) + _2307;
    }
    bool _2331 = _2311.y == 0u;
    float _2369;
    float _2371;
    float _2373;
    if (_2331)
    {
        _2369 = _2324;
        _2371 = _2326;
        _2373 = _2328;
    }
    else
    {
        uint _2531 = _2237 + 7u;
        float _2547 = (dot(vec3(cbLight._m0[_2237 + 3u].xyz), vec3(_994, _995, _996)) * 0.5) + 0.5;
        float _2548 = _2547 * _2547;
        float _4593 = isnan(0.0) ? _2548 : (isnan(_2548) ? 0.0 : max(_2548, 0.0));
        float _2549 = isnan(1.0) ? _4593 : (isnan(_4593) ? 1.0 : min(_4593, 1.0));
        float _2550 = isnan(1.0) ? _2253 : (isnan(_2253) ? 1.0 : min(_2253, 1.0));
        _2369 = (((cbLight._m0[_2531].x * 0.3183098733425140380859375) * _2549) * _2550) + _2324;
        _2371 = (((cbLight._m0[_2531].y * 0.3183098733425140380859375) * _2549) * _2550) + _2326;
        _2373 = (((cbLight._m0[_2531].z * 0.3183098733425140380859375) * _2549) * _2550) + _2328;
    }
    uint _2376 = _2237 + 8u;
    float _2389 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2237].w)) * _997) * 0.949999988079071044921875);
    float _2390 = _2389 * _2389;
    float _2391 = cbLight._m0[_2237].x + _1072;
    float _2392 = cbLight._m0[_2237].y + _1073;
    float _2393 = cbLight._m0[_2237].z + _1074;
    float _2397 = inversesqrt(dot(vec3(_2391, _2392, _2393), vec3(_2391, _2392, _2393)));
    float _2398 = _2397 * _2391;
    float _2399 = _2397 * _2392;
    float _2400 = _2397 * _2393;
    float _2401 = dot(vec3(_994, _995, _996), vec3(cbLight._m0[_2237].xyz));
    float _4609 = isnan(0.0) ? _2401 : (isnan(_2401) ? 0.0 : max(_2401, 0.0));
    float _2404 = isnan(1.0) ? _4609 : (isnan(_4609) ? 1.0 : min(_4609, 1.0));
    float _4620 = isnan(0.0) ? _1156 : (isnan(_1156) ? 0.0 : max(_1156, 0.0));
    float _2405 = isnan(1.0) ? _4620 : (isnan(_4620) ? 1.0 : min(_4620, 1.0));
    float _2406 = dot(vec3(_994, _995, _996), vec3(_2398, _2399, _2400));
    float _4631 = isnan(0.0) ? _2406 : (isnan(_2406) ? 0.0 : max(_2406, 0.0));
    float _2409 = isnan(1.0) ? _4631 : (isnan(_4631) ? 1.0 : min(_4631, 1.0));
    float _2410 = dot(vec3(cbLight._m0[_2237].xyz), vec3(_2398, _2399, _2400));
    float _4642 = isnan(0.0) ? _2410 : (isnan(_2410) ? 0.0 : max(_2410, 0.0));
    float _2414 = _2390 * _2390;
    float _2418 = ((_2409 * _2409) * (_2414 + (-1.0))) + 1.0;
    float _2429 = (exp2(log2(1.0 - (isnan(1.0) ? _4642 : (isnan(_4642) ? 1.0 : min(_4642, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2430 = 1.0 - _2390;
    float _2441 = (0.5 / (((_2405 * ((_2404 * _2430) + _2390)) + 9.9999999392252902907785028219223e-09) + (((_2405 * _2430) + _2390) * _2404))) * _2404;
    float _4653 = isnan(0.0) ? _2441 : (isnan(_2441) ? 0.0 : max(_2441, 0.0));
    float _2443 = (isnan(1.0) ? _4653 : (isnan(_4653) ? 1.0 : min(_4653, 1.0))) * (_2414 / ((_2418 * _2418) * 3.141590118408203125));
    uint _2457 = _2237 + 9u;
    float _2468 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2277].w)) * _997) * 0.949999988079071044921875);
    float _2469 = _2468 * _2468;
    float _2470 = cbLight._m0[_2277].x + _1072;
    float _2471 = cbLight._m0[_2277].y + _1073;
    float _2472 = cbLight._m0[_2277].z + _1074;
    float _2476 = inversesqrt(dot(vec3(_2470, _2471, _2472), vec3(_2470, _2471, _2472)));
    float _2477 = _2476 * _2470;
    float _2478 = _2476 * _2471;
    float _2479 = _2476 * _2472;
    float _2480 = dot(vec3(_994, _995, _996), vec3(cbLight._m0[_2277].xyz));
    float _4664 = isnan(0.0) ? _2480 : (isnan(_2480) ? 0.0 : max(_2480, 0.0));
    float _2483 = isnan(1.0) ? _4664 : (isnan(_4664) ? 1.0 : min(_4664, 1.0));
    float _2484 = dot(vec3(_994, _995, _996), vec3(_2477, _2478, _2479));
    float _4675 = isnan(0.0) ? _2484 : (isnan(_2484) ? 0.0 : max(_2484, 0.0));
    float _2487 = isnan(1.0) ? _4675 : (isnan(_4675) ? 1.0 : min(_4675, 1.0));
    float _2488 = dot(vec3(cbLight._m0[_2277].xyz), vec3(_2477, _2478, _2479));
    float _4686 = isnan(0.0) ? _2488 : (isnan(_2488) ? 0.0 : max(_2488, 0.0));
    float _2492 = _2469 * _2469;
    float _2496 = ((_2487 * _2487) * (_2492 + (-1.0))) + 1.0;
    float _2505 = (exp2(log2(1.0 - (isnan(1.0) ? _4686 : (isnan(_4686) ? 1.0 : min(_4686, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2506 = 1.0 - _2469;
    float _2516 = (0.5 / (((_2405 * ((_2483 * _2506) + _2469)) + 9.9999999392252902907785028219223e-09) + (((_2405 * _2506) + _2469) * _2483))) * _2483;
    float _4697 = isnan(0.0) ? _2516 : (isnan(_2516) ? 0.0 : max(_2516, 0.0));
    float _2518 = (isnan(1.0) ? _4697 : (isnan(_4697) ? 1.0 : min(_4697, 1.0))) * (_2492 / ((_2496 * _2496) * 3.141590118408203125));
    float _2528 = (((_2505 * cbLight._m0[_2457].x) * _2518) * _2260) + ((((cbLight._m0[_2376].x * _2229) * _2429) * _2443) * _2273);
    float _2529 = (((_2505 * cbLight._m0[_2457].y) * _2518) * _2260) + ((((cbLight._m0[_2376].y * _2230) * _2429) * _2443) * _2273);
    float _2530 = (((_2505 * cbLight._m0[_2457].z) * _2518) * _2260) + ((((cbLight._m0[_2376].z * _2231) * _2429) * _2443) * _2273);
    float _2592;
    float _2594;
    float _2596;
    if (_2313)
    {
        _2592 = _2528;
        _2594 = _2529;
        _2596 = _2530;
    }
    else
    {
        uint _2598 = _2237 + 2u;
        uint _2602 = _2237 + 10u;
        float _2616 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2598].w)) * _997) * 0.949999988079071044921875);
        float _2617 = _2616 * _2616;
        float _2618 = cbLight._m0[_2598].x + _1072;
        float _2619 = cbLight._m0[_2598].y + _1073;
        float _2620 = cbLight._m0[_2598].z + _1074;
        float _2624 = inversesqrt(dot(vec3(_2618, _2619, _2620), vec3(_2618, _2619, _2620)));
        float _2625 = _2624 * _2618;
        float _2626 = _2624 * _2619;
        float _2627 = _2624 * _2620;
        float _2628 = dot(vec3(_994, _995, _996), vec3(cbLight._m0[_2598].xyz));
        float _4708 = isnan(0.0) ? _2628 : (isnan(_2628) ? 0.0 : max(_2628, 0.0));
        float _2631 = isnan(1.0) ? _4708 : (isnan(_4708) ? 1.0 : min(_4708, 1.0));
        float _2632 = dot(vec3(_994, _995, _996), vec3(_2625, _2626, _2627));
        float _4719 = isnan(0.0) ? _2632 : (isnan(_2632) ? 0.0 : max(_2632, 0.0));
        float _2635 = isnan(1.0) ? _4719 : (isnan(_4719) ? 1.0 : min(_4719, 1.0));
        float _2636 = dot(vec3(cbLight._m0[_2598].xyz), vec3(_2625, _2626, _2627));
        float _4730 = isnan(0.0) ? _2636 : (isnan(_2636) ? 0.0 : max(_2636, 0.0));
        float _2640 = _2617 * _2617;
        float _2644 = ((_2635 * _2635) * (_2640 + (-1.0))) + 1.0;
        float _2653 = (exp2(log2(1.0 - (isnan(1.0) ? _4730 : (isnan(_4730) ? 1.0 : min(_4730, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2654 = 1.0 - _2617;
        float _2664 = (0.5 / (((_2405 * ((_2631 * _2654) + _2617)) + 9.9999999392252902907785028219223e-09) + (((_2405 * _2654) + _2617) * _2631))) * _2631;
        float _4741 = isnan(0.0) ? _2664 : (isnan(_2664) ? 0.0 : max(_2664, 0.0));
        float _2666 = (isnan(1.0) ? _4741 : (isnan(_4741) ? 1.0 : min(_4741, 1.0))) * (_2640 / ((_2644 * _2644) * 3.141590118408203125));
        float _2667 = isnan(1.0) ? _2252 : (isnan(_2252) ? 1.0 : min(_2252, 1.0));
        _2592 = (((_2653 * cbLight._m0[_2602].x) * _2666) * _2667) + _2528;
        _2594 = (((_2653 * cbLight._m0[_2602].y) * _2666) * _2667) + _2529;
        _2596 = (((_2653 * cbLight._m0[_2602].z) * _2666) * _2667) + _2530;
    }
    float _2702;
    float _2704;
    float _2706;
    if (_2331)
    {
        _2702 = _2592;
        _2704 = _2594;
        _2706 = _2596;
    }
    else
    {
        uint _2713 = _2237 + 3u;
        uint _2717 = _2237 + 11u;
        float _2731 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2713].w)) * _997) * 0.949999988079071044921875);
        float _2732 = _2731 * _2731;
        float _2733 = cbLight._m0[_2713].x + _1072;
        float _2734 = cbLight._m0[_2713].y + _1073;
        float _2735 = cbLight._m0[_2713].z + _1074;
        float _2739 = inversesqrt(dot(vec3(_2733, _2734, _2735), vec3(_2733, _2734, _2735)));
        float _2740 = _2739 * _2733;
        float _2741 = _2739 * _2734;
        float _2742 = _2739 * _2735;
        float _2743 = dot(vec3(_994, _995, _996), vec3(cbLight._m0[_2713].xyz));
        float _4757 = isnan(0.0) ? _2743 : (isnan(_2743) ? 0.0 : max(_2743, 0.0));
        float _2746 = isnan(1.0) ? _4757 : (isnan(_4757) ? 1.0 : min(_4757, 1.0));
        float _2747 = dot(vec3(_994, _995, _996), vec3(_2740, _2741, _2742));
        float _4768 = isnan(0.0) ? _2747 : (isnan(_2747) ? 0.0 : max(_2747, 0.0));
        float _2750 = isnan(1.0) ? _4768 : (isnan(_4768) ? 1.0 : min(_4768, 1.0));
        float _2751 = dot(vec3(cbLight._m0[_2713].xyz), vec3(_2740, _2741, _2742));
        float _4779 = isnan(0.0) ? _2751 : (isnan(_2751) ? 0.0 : max(_2751, 0.0));
        float _2755 = _2732 * _2732;
        float _2759 = ((_2750 * _2750) * (_2755 + (-1.0))) + 1.0;
        float _2768 = (exp2(log2(1.0 - (isnan(1.0) ? _4779 : (isnan(_4779) ? 1.0 : min(_4779, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2769 = 1.0 - _2732;
        float _2779 = (0.5 / (((_2405 * ((_2746 * _2769) + _2732)) + 9.9999999392252902907785028219223e-09) + (((_2405 * _2769) + _2732) * _2746))) * _2746;
        float _4790 = isnan(0.0) ? _2779 : (isnan(_2779) ? 0.0 : max(_2779, 0.0));
        float _2781 = (isnan(1.0) ? _4790 : (isnan(_4790) ? 1.0 : min(_4790, 1.0))) * (_2755 / ((_2759 * _2759) * 3.141590118408203125));
        float _2782 = isnan(1.0) ? _2253 : (isnan(_2253) ? 1.0 : min(_2253, 1.0));
        _2702 = (((_2768 * cbLight._m0[_2717].x) * _2781) * _2782) + _2592;
        _2704 = (((_2768 * cbLight._m0[_2717].y) * _2781) * _2782) + _2594;
        _2706 = (((_2768 * cbLight._m0[_2717].z) * _2781) * _2782) + _2596;
    }
    float _2917;
    float _2919;
    float _2921;
    float _2923;
    float _2925;
    float _2927;
    if (_2235.y == 0u)
    {
        float _2857 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2858 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2857;
        float _2859 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2857;
        float _2860 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2857;
        uvec4 _2872 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2873 = _2872.x;
        uint _2884 = uint((float(_2872.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1093) / _2873))) + floor(float(uint(cbSceneParam._m0[85u].x * _1092) / _2873)));
        float _2894 = (log2(_2860 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2895 = isnan(0.0) ? _2894 : (isnan(_2894) ? 0.0 : max(_2894, 0.0));
        uint _2898 = uint(isnan(14.0) ? _2895 : (isnan(_2895) ? 14.0 : min(_2895, 14.0)));
        uvec4 _2903 = texelFetch(g_lightClusterGridBuffer, int(((_2898 << 2u) + (_2884 << 6u)) >> 2u));
        uint _2904 = _2903.x;
        uint _2905 = _2872.z;
        float _3005;
        float _3007;
        float _3009;
        float _3011;
        float _3013;
        float _3015;
        if (((((1u << ((_2905 >> 4u) & 15u)) + 4294967295u) & _2904) == 0u) || ((_2905 & 240u) == 0u))
        {
            _3005 = 0.0;
            _3007 = 0.0;
            _3009 = 0.0;
            _3011 = 0.0;
            _3013 = 0.0;
            _3015 = 0.0;
        }
        else
        {
            float _3006;
            float _3008;
            float _3010;
            float _3012;
            float _3014;
            float _3016;
            float _3157 = 0.0;
            float _3158 = 0.0;
            float _3159 = 0.0;
            float _3160 = 0.0;
            float _3161 = 0.0;
            float _3162 = 0.0;
            uint _3163 = 0u;
            uint _3172;
            bool _3173;
            for (;;)
            {
                _3172 = texelFetch(g_lightClassification, int((((_2898 << 5u) + (_2884 << 9u)) + (_3163 << 2u)) >> 2u)).x;
                _3173 = _3172 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3173)
                {
                    frontier_phi_66_pred = _3157;
                    frontier_phi_66_pred_1 = _3162;
                    frontier_phi_66_pred_2 = _3161;
                    frontier_phi_66_pred_3 = _3160;
                    frontier_phi_66_pred_4 = _3159;
                    frontier_phi_66_pred_5 = _3158;
                }
                else
                {
                    float _3302;
                    float _3303;
                    float _3304;
                    float _3305;
                    float _3306;
                    float _3307;
                    uint _3308;
                    _3302 = _3157;
                    _3303 = _3158;
                    _3304 = _3159;
                    _3305 = _3160;
                    _3306 = _3161;
                    _3307 = _3162;
                    _3308 = _3172;
                    float _3229;
                    float _3230;
                    float _3231;
                    float _3232;
                    float _3233;
                    float _3234;
                    for (;;)
                    {
                        uint _3312 = uint(findLSB(_3308)) + (_3163 << 5u);
                        uint _3309 = (_3308 + 4294967295u) & _3308;
                        uint _3314 = _3312 * 48u;
                        vec4 _3328 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3314)).x, texelFetch(g_PointLightRenderingBuffer, int(_3314 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3314 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3314 + 3u)).x));
                        uint _3334 = (_3312 * 48u) + 4u;
                        vec4 _3347 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3334)).x, texelFetch(g_PointLightRenderingBuffer, int(_3334 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3334 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3334 + 3u)).x));
                        uint _3353 = (_3312 * 48u) + 8u;
                        vec3 _3364 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3353)).x, texelFetch(g_PointLightRenderingBuffer, int(_3353 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3353 + 2u)).x));
                        float _3368 = _3328.x - _2858;
                        float _3369 = _3328.y - _2859;
                        float _3370 = _3328.z - _2860;
                        float _3371 = dot(vec3(_3368, _3369, _3370), vec3(_3368, _3369, _3370));
                        float _3374 = inversesqrt(_3371);
                        float _3375 = _3374 * _3368;
                        float _3376 = _3374 * _3369;
                        float _3377 = _3374 * _3370;
                        float _3378 = dot(vec3(_1111, _1114, _1117), vec3(_3375, _3376, _3377));
                        float _3383 = 1.0 - (_3371 * _3328.w);
                        float _4816 = isnan(0.0) ? _3383 : (isnan(_3383) ? 0.0 : max(_3383, 0.0));
                        float _3384 = isnan(1.0) ? _4816 : (isnan(_4816) ? 1.0 : min(_4816, 1.0));
                        float _3385 = sqrt(_3371) * _3347.w;
                        float _3388 = 1.39999997615814208984375 / (_3385 + 1.39999997615814208984375);
                        float _3389 = _3388 * _3388;
                        float _3392 = ((1.0 - _3389) * _3378) + _3389;
                        float _3395 = _3385 * _3385;
                        float _3399 = ((isnan(0.0) ? _3392 : (isnan(_3392) ? 0.0 : max(_3392, 0.0))) * _3384) / ((_3395 * 0.699999988079071044921875) + 1.0);
                        float _3403 = (-0.0) - _2858;
                        float _3404 = (-0.0) - _2859;
                        float _3405 = (-0.0) - _2860;
                        float _3409 = inversesqrt(dot(vec3(_3403, _3404, _3405), vec3(_3403, _3404, _3405)));
                        float _3410 = _3409 * _3403;
                        float _3411 = _3409 * _3404;
                        float _3412 = _3409 * _3405;
                        float _3420 = exp2(log2(1.0 / ((_3395 * 3.5) + 5.0)) * 0.25);
                        float _3421 = 1.0 - _1171;
                        float _3428 = sqrt(1.0 - ((1.0 - (_3421 * _3421)) * (1.0 - (_3420 * _3420))));
                        float _3429 = _3428 * _3428;
                        float _3430 = _3429 * _3429;
                        float _3431 = _3410 + _3375;
                        float _3432 = _3411 + _3376;
                        float _3433 = _3412 + _3377;
                        float _3437 = inversesqrt(dot(vec3(_3431, _3432, _3433), vec3(_3431, _3432, _3433)));
                        float _3441 = dot(vec3(_1111, _1114, _1117), vec3(_3410, _3411, _3412));
                        float _4832 = isnan(0.0) ? _3441 : (isnan(_3441) ? 0.0 : max(_3441, 0.0));
                        float _3444 = isnan(1.0) ? _4832 : (isnan(_4832) ? 1.0 : min(_4832, 1.0));
                        float _3445 = dot(vec3(_1111, _1114, _1117), vec3(_3437 * _3431, _3437 * _3432, _3437 * _3433));
                        float _4843 = isnan(0.0) ? _3445 : (isnan(_3445) ? 0.0 : max(_3445, 0.0));
                        float _3448 = isnan(1.0) ? _4843 : (isnan(_4843) ? 1.0 : min(_4843, 1.0));
                        float _3452 = ((_3448 * _3448) * (_3430 + (-1.0))) + 1.0;
                        float _3453 = _3388 * _3429;
                        float _3454 = _3453 * _3453;
                        float _3457 = ((1.0 - _3454) * _3378) + _3454;
                        float _4854 = isnan(0.0) ? _3457 : (isnan(_3457) ? 0.0 : max(_3457, 0.0));
                        float _3458 = isnan(1.0) ? _4854 : (isnan(_4854) ? 1.0 : min(_4854, 1.0));
                        float _3459 = 1.0 - _3429;
                        float _3469 = (0.5 / (((_3458 * ((_3444 * _3459) + _3429)) + 9.9999999392252902907785028219223e-09) + (((_3458 * _3459) + _3429) * _3444))) * _3458;
                        float _4865 = isnan(0.0) ? _3469 : (isnan(_3469) ? 0.0 : max(_3469, 0.0));
                        float _3480 = (((_3430 * 3.1415927410125732421875) * (isnan(1.0) ? _4865 : (isnan(_4865) ? 1.0 : min(_4865, 1.0)))) / ((_3452 * _3452) * ((_3395 * 2.1991131305694580078125) + 3.141590118408203125))) * _3384;
                        _3232 = (_3399 * _3347.x) + _3305;
                        _3233 = (_3399 * _3347.y) + _3306;
                        _3234 = (_3399 * _3347.z) + _3307;
                        _3229 = (_3480 * _3364.x) + _3302;
                        _3230 = (_3480 * _3364.y) + _3303;
                        _3231 = (_3480 * _3364.z) + _3304;
                        if (_3309 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3302 = _3229;
                            _3303 = _3230;
                            _3304 = _3231;
                            _3305 = _3232;
                            _3306 = _3233;
                            _3307 = _3234;
                            _3308 = _3309;
                        }
                    }
                    frontier_phi_66_pred = _3229;
                    frontier_phi_66_pred_1 = _3234;
                    frontier_phi_66_pred_2 = _3233;
                    frontier_phi_66_pred_3 = _3232;
                    frontier_phi_66_pred_4 = _3231;
                    frontier_phi_66_pred_5 = _3230;
                }
                _3006 = frontier_phi_66_pred;
                _3016 = frontier_phi_66_pred_1;
                _3014 = frontier_phi_66_pred_2;
                _3012 = frontier_phi_66_pred_3;
                _3010 = frontier_phi_66_pred_4;
                _3008 = frontier_phi_66_pred_5;
                uint _3164 = _3163 + 1u;
                if (_3164 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3157 = _3006;
                    _3158 = _3008;
                    _3159 = _3010;
                    _3160 = _3012;
                    _3161 = _3014;
                    _3162 = _3016;
                    _3163 = _3164;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3005 = _3006;
            _3007 = _3008;
            _3009 = _3010;
            _3011 = _3012;
            _3013 = _3014;
            _3015 = _3016;
        }
        uvec4 _3019 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3020 = _3019.z;
        uint _3022 = (_3020 >> 8u) & 15u;
        float _3125;
        float _3127;
        float _3129;
        float _3131;
        float _3133;
        float _3135;
        if (((4294967295u << _3022) & _2904) == 0u)
        {
            _3125 = _3005;
            _3127 = _3007;
            _3129 = _3009;
            _3131 = _3011;
            _3133 = _3013;
            _3135 = _3015;
        }
        else
        {
            float _3150 = inversesqrt(dot(vec3(_2858, _2859, _2860), vec3(_2858, _2859, _2860)));
            float _3151 = _3150 * _2858;
            float _3152 = _3150 * _2859;
            float _3153 = _3150 * _2860;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_3022 < ((_3020 >> 12u) & 15u))
            {
                float _3126;
                float _3128;
                float _3130;
                float _3132;
                float _3134;
                float _3136;
                float _3285 = _3005;
                float _3286 = _3007;
                float _3287 = _3009;
                float _3288 = _3011;
                float _3289 = _3013;
                float _3290 = _3015;
                uint _3291 = _3022;
                uint _3300;
                bool _3301;
                for (;;)
                {
                    _3300 = texelFetch(g_lightClassification, int((((_2898 << 5u) + (_2884 << 9u)) + (_3291 << 2u)) >> 2u)).x;
                    _3301 = _3300 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_3301)
                    {
                        frontier_phi_77_pred = _3290;
                        frontier_phi_77_pred_1 = _3289;
                        frontier_phi_77_pred_2 = _3288;
                        frontier_phi_77_pred_3 = _3287;
                        frontier_phi_77_pred_4 = _3286;
                        frontier_phi_77_pred_5 = _3285;
                    }
                    else
                    {
                        float _3494;
                        float _3495;
                        float _3496;
                        float _3497;
                        float _3498;
                        float _3499;
                        float _3787;
                        float _3788;
                        float _3789;
                        float _3790;
                        float _3791;
                        float _3792;
                        float _3507 = _3285;
                        float _3508 = _3286;
                        float _3509 = _3287;
                        float _3510 = _3288;
                        float _3511 = _3289;
                        float _3512 = _3290;
                        uint _3513 = _3300;
                        uint _3514;
                        vec4 _3539;
                        float _3540;
                        vec4 _3555;
                        vec3 _3567;
                        vec4 _3582;
                        vec4 _3597;
                        float _3643;
                        bool _3644;
                        for (;;)
                        {
                            uint _3524 = ((_3291 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3513));
                            _3514 = (_3513 + 4294967295u) & _3513;
                            uint _3526 = _3524 * 40u;
                            _3539 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3526)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3526 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3526 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3526 + 3u)).x));
                            _3540 = _3539.w;
                            uint _3542 = (_3524 * 40u) + 4u;
                            _3555 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3542)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3542 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3542 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3542 + 3u)).x));
                            uint _3557 = (_3524 * 40u) + 8u;
                            _3567 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3557)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3557 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3557 + 2u)).x));
                            uint _3569 = (_3524 * 40u) + 16u;
                            _3582 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3569)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3569 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3569 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3569 + 3u)).x));
                            uint _3584 = (_3524 * 40u) + 20u;
                            _3597 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3584)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3584 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3584 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3584 + 3u)).x));
                            uint _3599 = (_3524 * 40u) + 24u;
                            vec4 _3612 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3599)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3599 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3599 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3599 + 3u)).x));
                            uint _3618 = (_3524 * 40u) + 28u;
                            vec4 _3631 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3618)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3618 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3618 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3618 + 3u)).x));
                            _3643 = fma(_2860, _3631.z, fma(_2859, _3631.y, _3631.x * _2858)) + _3631.w;
                            _3644 = !((fma(_2860, _3612.z, fma(_2859, _3612.y, _3612.x * _2858)) + _3612.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3644)
                            {
                                float _3671 = _3539.x - _2858;
                                float _3672 = _3539.y - _2859;
                                float _3673 = _3539.z - _2860;
                                float _3674 = dot(vec3(_3671, _3672, _3673), vec3(_3671, _3672, _3673));
                                float _3677 = inversesqrt(_3674);
                                float _3678 = _3677 * _3671;
                                float _3679 = _3677 * _3672;
                                float _3680 = _3677 * _3673;
                                float _3684 = 1.0 - (_3674 / (_3540 * _3540));
                                float _4876 = isnan(0.0) ? _3684 : (isnan(_3684) ? 0.0 : max(_3684, 0.0));
                                float _3685 = isnan(1.0) ? _4876 : (isnan(_4876) ? 1.0 : min(_4876, 1.0));
                                float _3689 = sqrt(_3674) * _3555.w;
                                float _3691 = 1.39999997615814208984375 / (_3689 + 1.39999997615814208984375);
                                float _3692 = _3691 * _3691;
                                float _3695 = ((1.0 - _3692) * dot(vec3(_3678, _3679, _3680), vec3(_1111, _1114, _1117))) + _3692;
                                float _3698 = _3689 * _3689;
                                float _3702 = (fma(_2860, _3582.z, fma(_2859, _3582.y, _3582.x * _2858)) + _3582.w) / _3643;
                                float _3703 = (fma(_2860, _3597.z, fma(_2859, _3597.y, _3597.x * _2858)) + _3597.w) / _3643;
                                float _3707 = 1.0 - dot(vec2(_3702, _3703), vec2(_3702, _3703));
                                float _4892 = isnan(0.0) ? _3707 : (isnan(_3707) ? 0.0 : max(_3707, 0.0));
                                float _3708 = isnan(1.0) ? _4892 : (isnan(_4892) ? 1.0 : min(_4892, 1.0));
                                float _3709 = _3708 * (((isnan(0.0) ? _3695 : (isnan(_3695) ? 0.0 : max(_3695, 0.0))) * _3685) / ((_3698 * 0.699999988079071044921875) + 1.0));
                                float _3721 = exp2(log2(1.0 / ((_3698 * 3.5) + 5.0)) * 0.25);
                                float _3722 = 1.0 - _1171;
                                float _3729 = sqrt(1.0 - ((1.0 - (_3722 * _3722)) * (1.0 - (_3721 * _3721))));
                                float _3730 = _3729 * _3729;
                                float _3731 = _3730 * _3730;
                                float _3732 = _3678 - _3151;
                                float _3733 = _3679 - _3152;
                                float _3734 = _3680 - _3153;
                                float _3738 = inversesqrt(dot(vec3(_3732, _3733, _3734), vec3(_3732, _3733, _3734)));
                                float _3742 = dot(vec3(_1111, _1114, _1117), vec3((-0.0) - _3151, (-0.0) - _3152, (-0.0) - _3153));
                                float _4903 = isnan(0.0) ? _3742 : (isnan(_3742) ? 0.0 : max(_3742, 0.0));
                                float _3745 = isnan(1.0) ? _4903 : (isnan(_4903) ? 1.0 : min(_4903, 1.0));
                                float _3746 = dot(vec3(_1111, _1114, _1117), vec3(_3738 * _3732, _3738 * _3733, _3738 * _3734));
                                float _4914 = isnan(0.0) ? _3746 : (isnan(_3746) ? 0.0 : max(_3746, 0.0));
                                float _3749 = isnan(1.0) ? _4914 : (isnan(_4914) ? 1.0 : min(_4914, 1.0));
                                float _3753 = ((_3749 * _3749) * (_3731 + (-1.0))) + 1.0;
                                float _3754 = _3691 * _3730;
                                float _3755 = _3754 * _3754;
                                float _3761 = ((1.0 - _3755) * dot(vec3(_1111, _1114, _1117), vec3(_3678, _3679, _3680))) + _3755;
                                float _4925 = isnan(0.0) ? _3761 : (isnan(_3761) ? 0.0 : max(_3761, 0.0));
                                float _3762 = isnan(1.0) ? _4925 : (isnan(_4925) ? 1.0 : min(_4925, 1.0));
                                float _3763 = 1.0 - _3730;
                                float _3773 = (0.5 / (((_3762 * ((_3745 * _3763) + _3730)) + 9.9999999392252902907785028219223e-09) + (((_3762 * _3763) + _3730) * _3745))) * _3762;
                                float _4936 = isnan(0.0) ? _3773 : (isnan(_3773) ? 0.0 : max(_3773, 0.0));
                                float _3783 = (_3708 * _3685) * (((_3731 * 3.1415927410125732421875) * (isnan(1.0) ? _4936 : (isnan(_4936) ? 1.0 : min(_4936, 1.0)))) / ((_3753 * _3753) * ((_3698 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3709 * _3555.y;
                                frontier_phi_83_pred_1 = _3709 * _3555.x;
                                frontier_phi_83_pred_2 = _3783 * _3567.z;
                                frontier_phi_83_pred_3 = _3783 * _3567.y;
                                frontier_phi_83_pred_4 = _3783 * _3567.x;
                                frontier_phi_83_pred_5 = _3709 * _3555.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3791 = frontier_phi_83_pred;
                            _3790 = frontier_phi_83_pred_1;
                            _3789 = frontier_phi_83_pred_2;
                            _3788 = frontier_phi_83_pred_3;
                            _3787 = frontier_phi_83_pred_4;
                            _3792 = frontier_phi_83_pred_5;
                            _3497 = _3790 + _3510;
                            _3498 = _3791 + _3511;
                            _3499 = _3792 + _3512;
                            _3494 = _3787 + _3507;
                            _3495 = _3788 + _3508;
                            _3496 = _3789 + _3509;
                            if (_3514 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3507 = _3494;
                                _3508 = _3495;
                                _3509 = _3496;
                                _3510 = _3497;
                                _3511 = _3498;
                                _3512 = _3499;
                                _3513 = _3514;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3499;
                        frontier_phi_77_pred_1 = _3498;
                        frontier_phi_77_pred_2 = _3497;
                        frontier_phi_77_pred_3 = _3496;
                        frontier_phi_77_pred_4 = _3495;
                        frontier_phi_77_pred_5 = _3494;
                    }
                    _3136 = frontier_phi_77_pred;
                    _3134 = frontier_phi_77_pred_1;
                    _3132 = frontier_phi_77_pred_2;
                    _3130 = frontier_phi_77_pred_3;
                    _3128 = frontier_phi_77_pred_4;
                    _3126 = frontier_phi_77_pred_5;
                    uint _3292 = _3291 + 1u;
                    if (_3292 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3285 = _3126;
                        _3286 = _3128;
                        _3287 = _3130;
                        _3288 = _3132;
                        _3289 = _3134;
                        _3290 = _3136;
                        _3291 = _3292;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _3130;
                frontier_phi_58_59_ladder_1 = _3136;
                frontier_phi_58_59_ladder_2 = _3134;
                frontier_phi_58_59_ladder_3 = _3132;
                frontier_phi_58_59_ladder_4 = _3128;
                frontier_phi_58_59_ladder_5 = _3126;
            }
            else
            {
                frontier_phi_58_59_ladder = _3009;
                frontier_phi_58_59_ladder_1 = _3015;
                frontier_phi_58_59_ladder_2 = _3013;
                frontier_phi_58_59_ladder_3 = _3011;
                frontier_phi_58_59_ladder_4 = _3007;
                frontier_phi_58_59_ladder_5 = _3005;
            }
            _3125 = frontier_phi_58_59_ladder_5;
            _3127 = frontier_phi_58_59_ladder_4;
            _3129 = frontier_phi_58_59_ladder;
            _3131 = frontier_phi_58_59_ladder_3;
            _3133 = frontier_phi_58_59_ladder_2;
            _3135 = frontier_phi_58_59_ladder_1;
        }
        float _3140 = isnan(1.0) ? _1155 : (isnan(_1155) ? 1.0 : min(_1155, 1.0));
        _2917 = (_3140 * _3131) + _2369;
        _2919 = (_3140 * _3133) + _2371;
        _2921 = (_3140 * _3135) + _2373;
        _2923 = ((_3125 * 0.039999999105930328369140625) * _3140) + _2702;
        _2925 = ((_3127 * 0.039999999105930328369140625) * _3140) + _2704;
        _2927 = ((_3129 * 0.039999999105930328369140625) * _3140) + _2706;
    }
    else
    {
        _2917 = _2369;
        _2919 = _2371;
        _2921 = _2373;
        _2923 = _2702;
        _2925 = _2704;
        _2927 = _2706;
    }
    float _4952 = isnan(0.0) ? _1140 : (isnan(_1140) ? 0.0 : max(_1140, 0.0));
    float _4963 = isnan(0.0) ? _1141 : (isnan(_1141) ? 0.0 : max(_1141, 0.0));
    float _4974 = isnan(0.0) ? _1142 : (isnan(_1142) ? 0.0 : max(_1142, 0.0));
    float _2944 = ((isnan(1.0) ? _4952 : (isnan(_4952) ? 1.0 : min(_4952, 1.0))) * (_2917 + ((isnan(0.0) ? _1911 : (isnan(_1911) ? 0.0 : max(_1911, 0.0))) * _1155))) + ((_2923 + ((isnan(0.0) ? _2201 : (isnan(_2201) ? 0.0 : max(_2201, 0.0))) * _1990)) * cbPerFrame._m0[3u].x);
    float _2945 = ((isnan(1.0) ? _4963 : (isnan(_4963) ? 1.0 : min(_4963, 1.0))) * (_2919 + ((isnan(0.0) ? _1914 : (isnan(_1914) ? 0.0 : max(_1914, 0.0))) * _1155))) + ((_2925 + ((isnan(0.0) ? _2204 : (isnan(_2204) ? 0.0 : max(_2204, 0.0))) * _1990)) * cbPerFrame._m0[3u].x);
    float _2946 = ((isnan(1.0) ? _4974 : (isnan(_4974) ? 1.0 : min(_4974, 1.0))) * (_2921 + ((isnan(0.0) ? _1917 : (isnan(_1917) ? 0.0 : max(_1917, 0.0))) * _1155))) + ((_2927 + ((isnan(0.0) ? _2207 : (isnan(_2207) ? 0.0 : max(_2207, 0.0))) * _1990)) * cbPerFrame._m0[3u].x);
    uint _2947 = _289 + 6u;
    float _2955 = _1092 / cbSceneParam._m0[86u].x;
    float _2956 = _1093 / cbSceneParam._m0[86u].y;
    vec4 _2970 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2955, _2956, (log2((isnan(cbSceneParam._m0[77u].w) ? _1015 : (isnan(_1015) ? cbSceneParam._m0[77u].w : min(_1015, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2972 = _2970.x;
    float _2973 = _2970.y;
    float _2974 = _2970.z;
    float _2975 = _2970.w;
    float _3067;
    float _3069;
    float _3071;
    float _3073;
    if (_1015 > cbSceneParam._m0[78u].w)
    {
        float _3030 = isnan(_1015) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _1015 : min(cbSceneParam._m0[80u].w, _1015));
        float _3031 = _3030 / _1015;
        float _3042 = _3031 * _1065;
        float _3043 = _1066 * _3031;
        float _3044 = (-0.0) - _3043;
        float _3045 = _3031 * _1067;
        float _3047 = (cbSceneParam._m0[77u].w * _3044) / _3030;
        float _3048 = _3047 + cbSceneParam._m0[79u].w;
        float _3049 = cbSceneParam._m0[79u].w - _3043;
        float _3055 = sqrt(((_3042 * _3042) + (_3043 * _3043)) + (_3045 * _3045));
        float _3058 = (1.0 - (cbSceneParam._m0[77u].w / _3030)) * _3055;
        float _3063 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3065 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3242;
        if (abs((_3044 - _3047) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3242 = ((((_3048 > 0.0) ? exp2(_3063 * _3048) : (2.0 - exp2(_3065 * _3048))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3058;
        }
        else
        {
            float _3186 = 1.0 / cbSceneParam._m0[80u].x;
            float _3187 = isnan(_3049) ? _3048 : (isnan(_3048) ? _3049 : max(_3048, _3049));
            float _3188 = isnan(_3049) ? _3048 : (isnan(_3048) ? _3049 : min(_3048, _3049));
            float _3197 = isnan(0.0) ? _3187 : (isnan(_3187) ? 0.0 : min(_3187, 0.0));
            float _3198 = isnan(0.0) ? _3188 : (isnan(_3188) ? 0.0 : min(_3188, 0.0));
            _3242 = ((abs(_3055 / _3044) * cbSceneParam._m0[80u].y) * ((((_3197 - _3198) * 2.0) - ((exp2(_3063 * (isnan(0.0) ? _3187 : (isnan(_3187) ? 0.0 : max(_3187, 0.0)))) - exp2(_3063 * (isnan(0.0) ? _3188 : (isnan(_3188) ? 0.0 : max(_3188, 0.0))))) * _3186)) - ((exp2(_3065 * _3197) - exp2(_3065 * _3198)) * _3186))) + (_3058 * cbSceneParam._m0[80u].z);
        }
        vec4 _3244 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2955, _2956, 1.0), 0.0);
        float _3253 = exp2((_3242 * (-1.44269502162933349609375)) * (1.0 - _3244.w));
        float _3254 = log2(_3253);
        float _3270 = log2(_2975);
        _3067 = (exp2(_3270 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3254 * cbSceneParam._m0[78u].x)) * _3244.x) / cbSceneParam._m0[78u].x)) + _2972;
        _3069 = (exp2(_3270 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3254 * cbSceneParam._m0[78u].y)) * _3244.y) / cbSceneParam._m0[78u].y)) + _2973;
        _3071 = (exp2(_3270 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3254 * cbSceneParam._m0[78u].z)) * _3244.z) / cbSceneParam._m0[78u].z)) + _2974;
        _3073 = _3253 * _2975;
    }
    else
    {
        _3067 = _2972;
        _3069 = _2973;
        _3071 = _2974;
        _3073 = _2975;
    }
    bool _3280;
    vec4 _3083;
    vec4 _3105;
    float _3107;
    float _3111;
    float _3112;
    float _3113;
    float _3114;
    bool _3124;
    for (;;)
    {
        _3083 = cbMatDynParam._m0[0u];
        float _3085 = roundEven(_3083.y);
        bool _3086 = _3085 == 3.0;
        float _3087 = log2(_3073);
        float _3094 = exp2(_3087 * cbSceneParam._m0[78u].x) * _2944;
        float _3095 = exp2(_3087 * cbSceneParam._m0[78u].y) * _2945;
        float _3096 = exp2(_3087 * cbSceneParam._m0[78u].z) * _2946;
        float _3103 = _1081 + (-0.5);
        _3105 = cbMtdParam._m0[1u];
        _3107 = _3105.y * _3103;
        float _3110 = (_3085 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3111 = _3110 * (_3086 ? _3094 : (_3094 + (cbSceneParam._m0[72u].w * _3067)));
        _3112 = _3110 * (_3086 ? _3095 : (_3095 + (cbSceneParam._m0[72u].w * _3069)));
        _3113 = _3110 * (_3086 ? _3096 : (_3096 + (cbSceneParam._m0[72u].w * _3071)));
        _3114 = _3103 * 0.999000012874603271484375;
        _3124 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3124)
        {
            if ((cbInstanceData._m0[_289 + 7u].x + _3114) < 0.5)
            {
                _3280 = true;
                break;
            }
        }
        uint _3221 = _1130 + uint(_3083.w);
        if ((cbInstanceData._m0[_3221].w < 1.0) && ((cbInstanceData._m0[_3221].w + _3114) < 0.5))
        {
            _3280 = true;
            break;
        }
        if ((_3107 + 1.0) < _3105.x)
        {
            _3280 = true;
            break;
        }
        _3280 = false;
        break;
    }
    float _3485;
    if (_3280)
    {
        discard_state = true;
        _3485 = 0.0;
    }
    else
    {
        _3485 = cbInstanceData._m0[_2947].w;
    }
    SV_Target.x = _3111;
    SV_Target.y = _3112;
    SV_Target.z = _3113;
    SV_Target.w = _3485;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2947].w;
    discard_exit();
}


