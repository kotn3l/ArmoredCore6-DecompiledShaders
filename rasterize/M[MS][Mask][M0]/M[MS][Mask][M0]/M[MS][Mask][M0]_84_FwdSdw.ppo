#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_0;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 13) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_22;
layout(set = 0, binding = 14) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_10;
layout(set = 0, binding = 20) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_6;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1370;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _227 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _228 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _229 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _235 = inversesqrt(dot(vec3(_227, _228, _229), vec3(_227, _228, _229)));
    float _242 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _249 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _263 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _265 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _266 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3956 = isnan(0.0) ? _263 : (isnan(_263) ? 0.0 : max(_263, 0.0));
    float _3967 = isnan(0.0) ? _265 : (isnan(_265) ? 0.0 : max(_265, 0.0));
    float _3978 = isnan(0.0) ? _266 : (isnan(_266) ? 0.0 : max(_266, 0.0));
    uint _276 = uint(roundEven(NORMAL.w)) * 13u;
    uint _281 = _276 + 1u;
    uint _285 = _276 + 2u;
    float _294 = sqrt(((cbInstanceData._m0[_281].x * cbInstanceData._m0[_281].x) + (cbInstanceData._m0[_276].x * cbInstanceData._m0[_276].x)) + (cbInstanceData._m0[_285].x * cbInstanceData._m0[_285].x));
    float _295 = _294 * TEXCOORD.z;
    float _296 = _294 * TEXCOORD.w;
    vec4 _309 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _295) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _296) + cbTextureTilingScale._m0[13u].w));
    vec4 _332 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _358 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _363 = _358.x * cbMtdParam._m0[11u].x;
    float _364 = _358.y * cbMtdParam._m0[11u].y;
    float _365 = _358.z * cbMtdParam._m0[11u].z;
    vec4 _384 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _295) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _296) + cbTextureTilingScale._m0[5u].w));
    vec4 _403 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _438 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _440 = _438.x;
    float _452 = dot(vec4(_440, _438.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _469 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _403.x) * 2.0) - ((((_440 - _452) * cbMtdParam._m0[24u].z) + _452) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3989 = isnan(0.0) ? _469 : (isnan(_469) ? 0.0 : max(_469, 0.0));
    float _470 = isnan(1.0) ? _3989 : (isnan(_3989) ? 1.0 : min(_3989, 1.0));
    float _477 = (_470 * ((_384.x * cbMtdParam._m0[12u].x) - _363)) + _363;
    float _478 = (_470 * ((_384.y * cbMtdParam._m0[12u].y) - _364)) + _364;
    float _479 = (_470 * ((_384.z * cbMtdParam._m0[12u].z) - _365)) + _365;
    vec4 _496 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _295) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _296) + cbTextureTilingScale._m0[3u].w));
    vec4 _516 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _518 = _516.x;
    float _528 = dot(vec4(_518, _516.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _542 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _403.y) * 2.0) - ((((_518 - _528) * cbMtdParam._m0[24u].z) + _528) * cbMtdParam._m0[20u].w))) + 1.0;
    float _4000 = isnan(0.0) ? _542 : (isnan(_542) ? 0.0 : max(_542, 0.0));
    float _543 = isnan(1.0) ? _4000 : (isnan(_4000) ? 1.0 : min(_4000, 1.0));
    float _553 = (_332.x * cbMtdParam._m0[9u].x) * ((_543 * ((_496.x * cbMtdParam._m0[13u].x) - _477)) + _477);
    float _554 = (_332.y * cbMtdParam._m0[9u].y) * ((_543 * ((_496.y * cbMtdParam._m0[13u].y) - _478)) + _478);
    float _555 = (_332.z * cbMtdParam._m0[9u].z) * ((_543 * ((_496.z * cbMtdParam._m0[13u].z) - _479)) + _479);
    float _559 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _309.x) * _553;
    float _562 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _309.y) * _554;
    float _565 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _309.z) * _555;
    float _573 = (((_553 - _559) * (isnan(1.0) ? _3956 : (isnan(_3956) ? 1.0 : min(_3956, 1.0)))) + _559) * 4.55000019073486328125;
    float _575 = (((_554 - _562) * (isnan(1.0) ? _3967 : (isnan(_3967) ? 1.0 : min(_3967, 1.0)))) + _562) * 4.55000019073486328125;
    float _577 = (((_555 - _565) * (isnan(1.0) ? _3978 : (isnan(_3978) ? 1.0 : min(_3978, 1.0)))) + _565) * 4.55000019073486328125;
    vec4 _596 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _295) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _296) + cbTextureTilingScale._m0[14u].w));
    vec4 _615 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _295) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _296) + cbTextureTilingScale._m0[20u].w));
    vec4 _638 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _295) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _296) + cbTextureTilingScale._m0[4u].w));
    vec4 _655 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _657 = _655.x;
    float _658 = _655.y;
    float _659 = _655.z;
    float _666 = ((_638.x - _657) * _470) + _657;
    float _667 = ((_638.y - _658) * _470) + _658;
    float _668 = ((_638.z - _659) * _470) + _659;
    vec4 _680 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _295) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _296) + cbTextureTilingScale._m0[2u].w));
    float _693 = ((_680.z - _668) * _543) + _668;
    float _696 = ((((_680.x - _666) * _543) + _666) * 2.0) + (-1.0);
    float _697 = ((((_680.y - _667) * _543) + _667) * 2.0) + (-1.0);
    float _698 = dot(vec2(_696, _697), vec2(_696, _697));
    float _4011 = isnan(0.0) ? _698 : (isnan(_698) ? 0.0 : max(_698, 0.0));
    float _703 = sqrt(1.0 - (isnan(1.0) ? _4011 : (isnan(_4011) ? 1.0 : min(_4011, 1.0))));
    vec4 _717 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _742 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _295) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _296) + cbTextureTilingScale._m0[11u].w));
    float _744 = _742.x;
    float _745 = 1.0 - _744;
    float _758 = (TEXCOORD_8.w - ((cbMtdParam._m0[21u].z * (1.0 - TEXCOORD_8.w)) * ((((_744 - _745) * cbMtdParam._m0[24u].w) + _745) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[21u].w + 1.0);
    float _4022 = isnan(0.0) ? _758 : (isnan(_758) ? 0.0 : max(_758, 0.0));
    float _759 = isnan(1.0) ? _4022 : (isnan(_4022) ? 1.0 : min(_4022, 1.0));
    float _766 = (_759 * ((_596.x * cbMtdParam._m0[18u].x) - _573)) + _573;
    float _767 = (_759 * ((_596.y * cbMtdParam._m0[18u].y) - _575)) + _575;
    float _768 = (_759 * ((_596.z * cbMtdParam._m0[18u].z) - _577)) + _577;
    float _773 = (((_615.z - _693) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _693;
    float _777 = ((_717.z - _773) * cbMtdParam._m0[19u].w) + _773;
    vec4 _790 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _295) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _296) + cbTextureTilingScale._m0[15u].w));
    float _797 = (_790.x * 2.0) + (-1.0);
    float _798 = (_790.y * 2.0) + (-1.0);
    float _799 = dot(vec2(_797, _798), vec2(_797, _798));
    float _4033 = isnan(0.0) ? _799 : (isnan(_799) ? 0.0 : max(_799, 0.0));
    float _807 = (_759 * (_790.z - _777)) + _777;
    float _816 = (_696 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_615.x * 2.0) + (-1.0)))) + (((_717.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _817 = (_697 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_615.y * 2.0) + (-1.0)))) + (((_717.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _829 = (((_797 - _816) + (cbMtdParam._m0[21u].x * _816)) * _759) + _816;
    float _830 = (((_798 - _817) + (cbMtdParam._m0[21u].x * _817)) * _759) + _817;
    float _831 = (_759 * (sqrt(1.0 - (isnan(1.0) ? _4033 : (isnan(_4033) ? 1.0 : min(_4033, 1.0)))) - _703)) + _703;
    float _835 = cbMtdParam._m0[22u].x + _717.w;
    float _838 = fma(_831, _242 * NORMAL.x, fma(_830, _249 * TANGENT.x, (_235 * _227) * _829));
    float _841 = fma(_831, _242 * NORMAL.y, fma(_830, _249 * TANGENT.y, (_235 * _228) * _829));
    float _844 = fma(_831, _242 * NORMAL.z, fma(_830, _249 * TANGENT.z, (_235 * _229) * _829));
    float _848 = inversesqrt(dot(vec3(_838, _841, _844), vec3(_838, _841, _844)));
    float _849 = _848 * _838;
    float _850 = _848 * _841;
    float _851 = _848 * _844;
    float _4044 = isnan(0.0) ? _807 : (isnan(_807) ? 0.0 : max(_807, 0.0));
    float _852 = isnan(1.0) ? _4044 : (isnan(_4044) ? 1.0 : min(_4044, 1.0));
    float _4055 = isnan(0.0) ? _835 : (isnan(_835) ? 0.0 : max(_835, 0.0));
    float _4066 = isnan(0.0) ? _766 : (isnan(_766) ? 0.0 : max(_766, 0.0));
    float _4077 = isnan(0.0) ? _767 : (isnan(_767) ? 0.0 : max(_767, 0.0));
    float _4088 = isnan(0.0) ? _768 : (isnan(_768) ? 0.0 : max(_768, 0.0));
    float _870 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _911 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _921 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _911);
    float _922 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _911);
    float _923 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _911);
    float _927 = inversesqrt(dot(vec3(_921, _922, _923), vec3(_921, _922, _923)));
    float _928 = _921 * _927;
    float _929 = _922 * _927;
    float _930 = _923 * _927;
    float _936 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _937 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _955 = fma(_851, cbSceneParam._m0[5u].z, fma(_850, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _849));
    float _958 = fma(_851, cbSceneParam._m0[6u].z, fma(_850, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _849));
    float _961 = fma(_851, cbSceneParam._m0[7u].z, fma(_850, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _849));
    uint _975 = (_276 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _981 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4066 : (isnan(_4066) ? 1.0 : min(_4066, 1.0)))) * cbInstanceData._m0[_975].x;
    float _982 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4077 : (isnan(_4077) ? 1.0 : min(_4077, 1.0)))) * cbInstanceData._m0[_975].y;
    float _983 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4088 : (isnan(_4088) ? 1.0 : min(_4088, 1.0)))) * cbInstanceData._m0[_975].z;
    float _4099 = isnan(0.0) ? _981 : (isnan(_981) ? 0.0 : max(_981, 0.0));
    float _984 = isnan(1.0) ? _4099 : (isnan(_4099) ? 1.0 : min(_4099, 1.0));
    float _4110 = isnan(0.0) ? _982 : (isnan(_982) ? 0.0 : max(_982, 0.0));
    float _985 = isnan(1.0) ? _4110 : (isnan(_4110) ? 1.0 : min(_4110, 1.0));
    float _4121 = isnan(0.0) ? _983 : (isnan(_983) ? 0.0 : max(_983, 0.0));
    float _986 = isnan(1.0) ? _4121 : (isnan(_4121) ? 1.0 : min(_4121, 1.0));
    vec4 _995 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _936, cbSceneParam._m0[86u].y * _937));
    float _999 = ((isnan(1.0) ? _4055 : (isnan(_4055) ? 1.0 : min(_4055, 1.0))) * TEXCOORD_5.w) * _995.x;
    float _1000 = dot(vec3(_849, _850, _851), vec3(_928, _929, _930));
    float _1003 = _1000 * 2.0;
    float _1007 = (_1003 * _849) - _928;
    float _1008 = (_1003 * _850) - _929;
    float _1009 = (_1003 * _851) - _930;
    float _1013 = abs(dot(vec3(_928, _929, _930), vec3(_849, _850, _851)));
    float _4132 = isnan(0.0) ? _1013 : (isnan(_1013) ? 0.0 : max(_1013, 0.0));
    float _1015 = sqrt(_852);
    float _1028 = exp2((_1015 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4132 : (isnan(_4132) ? 1.0 : min(_4132, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1015 * 3.0));
    float _1060 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1064 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1068 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1369;
    float _1371;
    float _1372;
    float _1373;
    float _1374;
    float _1375;
    float _1376;
    float _1377;
    float _1378;
    float _1379;
    float _1380;
    float _1381;
    float _1382;
    float _1383;
    float _1384;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1094 = fma(_1068, cbModelParam._m0[26u].z, fma(_1064, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1060));
        float _1098 = fma(_1068, cbModelParam._m0[27u].z, fma(_1064, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1060));
        float _1102 = fma(_1068, cbModelParam._m0[28u].z, fma(_1064, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1060));
        float _1127 = _1060 + _849;
        float _1128 = _1064 + _850;
        float _1129 = _1068 + _851;
        float _1139 = fma(_1129, cbModelParam._m0[26u].z, fma(_1128, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1127)) - _1094;
        float _1140 = fma(_1129, cbModelParam._m0[27u].z, fma(_1128, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1127)) - _1098;
        float _1141 = fma(_1129, cbModelParam._m0[28u].z, fma(_1128, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1127)) - _1102;
        float _1145 = inversesqrt(dot(vec3(_1139, _1140, _1141), vec3(_1139, _1140, _1141)));
        float _1158 = ((_1145 * _1139) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1094 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1159 = ((_1145 * _1140) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1098 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1160 = ((_1145 * _1141) / cbModelParam._m0[34u].z) + ((((((_1102 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1163 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1158, _1159, _1160), 0.0);
        vec4 _1170 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1158, _1159, _1160), 0.0);
        vec4 _1177 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1158, _1159, _1160), 0.0);
        vec4 _1184 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1158, _1159, _1160), 0.0);
        float _1197 = exp2((_1163.w + (-0.5)) * 20.0) * 2.0;
        float _1198 = _1197 * (_1163.x + (-0.5));
        float _1199 = _1197 * (_1163.y + (-0.5));
        float _1200 = _1197 * (_1163.z + (-0.5));
        float _1207 = exp2((_1170.w + (-0.5)) * 20.0) * 2.0;
        float _1208 = _1207 * (_1170.x + (-0.5));
        float _1209 = _1207 * (_1170.y + (-0.5));
        float _1210 = _1207 * (_1170.z + (-0.5));
        float _1217 = exp2((_1177.w + (-0.5)) * 20.0) * 2.0;
        float _1218 = _1217 * (_1177.x + (-0.5));
        float _1219 = _1217 * (_1177.y + (-0.5));
        float _1220 = _1217 * (_1177.z + (-0.5));
        float _1227 = exp2((_1184.w + (-0.5)) * 20.0) * 2.0;
        float _1228 = _1227 * (_1184.x + (-0.5));
        float _1229 = _1227 * (_1184.y + (-0.5));
        float _1230 = _1227 * (_1184.z + (-0.5));
        float _1231 = isnan(0.0) ? _1228 : (isnan(_1228) ? 0.0 : max(_1228, 0.0));
        float _1232 = isnan(0.0) ? _1229 : (isnan(_1229) ? 0.0 : max(_1229, 0.0));
        float _1233 = isnan(0.0) ? _1230 : (isnan(_1230) ? 0.0 : max(_1230, 0.0));
        float _1234 = _1198 * 0.5;
        float _1235 = _1208 * 0.5;
        float _1236 = _1218 * 0.5;
        float _1237 = dot(vec3(_1234, _1235, _1236), vec3(_1234, _1235, _1236));
        float _1242 = (_1237 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1237);
        float _1251 = (dot(vec3(_849, _850, _851), vec3(_1242 * _1234, _1242 * _1235, _1242 * _1236)) + 1.0) * 0.5;
        float _4158 = isnan(0.0) ? _1251 : (isnan(_1251) ? 0.0 : max(_1251, 0.0));
        float _1261 = sqrt(((_1235 * _1235) + (_1234 * _1234)) + (_1236 * _1236)) / (_1231 + 9.9999997473787516355514526367188e-06);
        float _4169 = isnan(0.0) ? _1261 : (isnan(_1261) ? 0.0 : max(_1261, 0.0));
        float _1262 = isnan(1.0) ? _4169 : (isnan(_4169) ? 1.0 : min(_4169, 1.0));
        float _1263 = _1262 * 2.0;
        float _1267 = (1.0 - _1262) / (_1262 + 1.0);
        float _4180 = isnan(0.0) ? _1267 : (isnan(_1267) ? 0.0 : max(_1267, 0.0));
        float _1268 = isnan(1.0) ? _4180 : (isnan(_4180) ? 1.0 : min(_4180, 1.0));
        float _1277 = ((((1.0 - _1268) * (_1263 + 2.0)) * exp2(log2(isnan(1.0) ? _4158 : (isnan(_4158) ? 1.0 : min(_4158, 1.0))) * (_1263 + 1.0))) + _1268) * _1231;
        float _1278 = _1199 * 0.5;
        float _1279 = _1209 * 0.5;
        float _1280 = _1219 * 0.5;
        float _1281 = dot(vec3(_1278, _1279, _1280), vec3(_1278, _1279, _1280));
        float _1286 = (_1281 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1281);
        float _1294 = (dot(vec3(_849, _850, _851), vec3(_1286 * _1278, _1286 * _1279, _1286 * _1280)) + 1.0) * 0.5;
        float _4191 = isnan(0.0) ? _1294 : (isnan(_1294) ? 0.0 : max(_1294, 0.0));
        float _1303 = sqrt(((_1279 * _1279) + (_1278 * _1278)) + (_1280 * _1280)) / (_1232 + 9.9999997473787516355514526367188e-06);
        float _4202 = isnan(0.0) ? _1303 : (isnan(_1303) ? 0.0 : max(_1303, 0.0));
        float _1304 = isnan(1.0) ? _4202 : (isnan(_4202) ? 1.0 : min(_4202, 1.0));
        float _1305 = _1304 * 2.0;
        float _1309 = (1.0 - _1304) / (_1304 + 1.0);
        float _4213 = isnan(0.0) ? _1309 : (isnan(_1309) ? 0.0 : max(_1309, 0.0));
        float _1310 = isnan(1.0) ? _4213 : (isnan(_4213) ? 1.0 : min(_4213, 1.0));
        float _1319 = ((((1.0 - _1310) * (_1305 + 2.0)) * exp2(log2(isnan(1.0) ? _4191 : (isnan(_4191) ? 1.0 : min(_4191, 1.0))) * (_1305 + 1.0))) + _1310) * _1232;
        float _1320 = _1200 * 0.5;
        float _1321 = _1210 * 0.5;
        float _1322 = _1220 * 0.5;
        float _1323 = dot(vec3(_1320, _1321, _1322), vec3(_1320, _1321, _1322));
        float _1328 = (_1323 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1323);
        float _1336 = (dot(vec3(_849, _850, _851), vec3(_1328 * _1320, _1328 * _1321, _1328 * _1322)) + 1.0) * 0.5;
        float _4224 = isnan(0.0) ? _1336 : (isnan(_1336) ? 0.0 : max(_1336, 0.0));
        float _1345 = sqrt(((_1321 * _1321) + (_1320 * _1320)) + (_1322 * _1322)) / (_1233 + 9.9999997473787516355514526367188e-06);
        float _4235 = isnan(0.0) ? _1345 : (isnan(_1345) ? 0.0 : max(_1345, 0.0));
        float _1346 = isnan(1.0) ? _4235 : (isnan(_4235) ? 1.0 : min(_4235, 1.0));
        float _1347 = _1346 * 2.0;
        float _1351 = (1.0 - _1346) / (_1346 + 1.0);
        float _4246 = isnan(0.0) ? _1351 : (isnan(_1351) ? 0.0 : max(_1351, 0.0));
        float _1352 = isnan(1.0) ? _4246 : (isnan(_4246) ? 1.0 : min(_4246, 1.0));
        float _1361 = ((((1.0 - _1352) * (_1347 + 2.0)) * exp2(log2(isnan(1.0) ? _4224 : (isnan(_4224) ? 1.0 : min(_4224, 1.0))) * (_1347 + 1.0))) + _1352) * _1233;
        _1369 = _1200;
        _1371 = _1199;
        _1372 = _1198;
        _1373 = _1210;
        _1374 = _1209;
        _1375 = _1208;
        _1376 = _1220;
        _1377 = _1219;
        _1378 = _1218;
        _1379 = _1233;
        _1380 = _1232;
        _1381 = _1231;
        _1382 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1277 : (isnan(_1277) ? 0.0 : max(_1277, 0.0)));
        _1383 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1319 : (isnan(_1319) ? 0.0 : max(_1319, 0.0)));
        _1384 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1361 : (isnan(_1361) ? 0.0 : max(_1361, 0.0)));
    }
    else
    {
        _1369 = _1370;
        _1371 = _1370;
        _1372 = _1370;
        _1373 = _1370;
        _1374 = _1370;
        _1375 = _1370;
        _1376 = _1370;
        _1377 = _1370;
        _1378 = _1370;
        _1379 = _1370;
        _1380 = _1370;
        _1381 = _1370;
        _1382 = 0.0;
        _1383 = 0.0;
        _1384 = 0.0;
    }
    float _1677;
    float _1678;
    float _1679;
    float _1680;
    float _1681;
    float _1682;
    float _1683;
    float _1684;
    float _1685;
    float _1686;
    float _1687;
    float _1688;
    float _1689;
    float _1690;
    float _1691;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1408 = fma(_1068, cbModelParam._m0[30u].z, fma(_1064, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1060));
        float _1412 = fma(_1068, cbModelParam._m0[31u].z, fma(_1064, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1060));
        float _1416 = fma(_1068, cbModelParam._m0[32u].z, fma(_1064, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1060));
        float _1439 = _1060 + _849;
        float _1440 = _1064 + _850;
        float _1441 = _1068 + _851;
        float _1451 = fma(_1441, cbModelParam._m0[30u].z, fma(_1440, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1439)) - _1408;
        float _1452 = fma(_1441, cbModelParam._m0[31u].z, fma(_1440, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1439)) - _1412;
        float _1453 = fma(_1441, cbModelParam._m0[32u].z, fma(_1440, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1439)) - _1416;
        float _1457 = inversesqrt(dot(vec3(_1451, _1452, _1453), vec3(_1451, _1452, _1453)));
        float _1470 = ((_1457 * _1451) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1408 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1471 = ((_1457 * _1452) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1412 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1472 = ((_1457 * _1453) / cbModelParam._m0[35u].z) + ((((((_1416 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1474 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1470, _1471, _1472), 0.0);
        vec4 _1481 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1470, _1471, _1472), 0.0);
        vec4 _1488 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1470, _1471, _1472), 0.0);
        vec4 _1495 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1470, _1471, _1472), 0.0);
        float _1507 = exp2((_1474.w + (-0.5)) * 20.0) * 2.0;
        float _1508 = _1507 * (_1474.x + (-0.5));
        float _1509 = _1507 * (_1474.y + (-0.5));
        float _1510 = _1507 * (_1474.z + (-0.5));
        float _1517 = exp2((_1481.w + (-0.5)) * 20.0) * 2.0;
        float _1518 = _1517 * (_1481.x + (-0.5));
        float _1519 = _1517 * (_1481.y + (-0.5));
        float _1520 = _1517 * (_1481.z + (-0.5));
        float _1527 = exp2((_1488.w + (-0.5)) * 20.0) * 2.0;
        float _1528 = _1527 * (_1488.x + (-0.5));
        float _1529 = _1527 * (_1488.y + (-0.5));
        float _1530 = _1527 * (_1488.z + (-0.5));
        float _1537 = exp2((_1495.w + (-0.5)) * 20.0) * 2.0;
        float _1538 = _1537 * (_1495.x + (-0.5));
        float _1539 = _1537 * (_1495.y + (-0.5));
        float _1540 = _1537 * (_1495.z + (-0.5));
        float _1541 = isnan(0.0) ? _1538 : (isnan(_1538) ? 0.0 : max(_1538, 0.0));
        float _1542 = isnan(0.0) ? _1539 : (isnan(_1539) ? 0.0 : max(_1539, 0.0));
        float _1543 = isnan(0.0) ? _1540 : (isnan(_1540) ? 0.0 : max(_1540, 0.0));
        float _1544 = _1508 * 0.5;
        float _1545 = _1518 * 0.5;
        float _1546 = _1528 * 0.5;
        float _1547 = dot(vec3(_1544, _1545, _1546), vec3(_1544, _1545, _1546));
        float _1552 = (_1547 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1547);
        float _1560 = (dot(vec3(_849, _850, _851), vec3(_1552 * _1544, _1552 * _1545, _1552 * _1546)) + 1.0) * 0.5;
        float _4287 = isnan(0.0) ? _1560 : (isnan(_1560) ? 0.0 : max(_1560, 0.0));
        float _1569 = sqrt(((_1545 * _1545) + (_1544 * _1544)) + (_1546 * _1546)) / (_1541 + 9.9999997473787516355514526367188e-06);
        float _4298 = isnan(0.0) ? _1569 : (isnan(_1569) ? 0.0 : max(_1569, 0.0));
        float _1570 = isnan(1.0) ? _4298 : (isnan(_4298) ? 1.0 : min(_4298, 1.0));
        float _1571 = _1570 * 2.0;
        float _1575 = (1.0 - _1570) / (_1570 + 1.0);
        float _4309 = isnan(0.0) ? _1575 : (isnan(_1575) ? 0.0 : max(_1575, 0.0));
        float _1576 = isnan(1.0) ? _4309 : (isnan(_4309) ? 1.0 : min(_4309, 1.0));
        float _1585 = ((((1.0 - _1576) * (_1571 + 2.0)) * exp2(log2(isnan(1.0) ? _4287 : (isnan(_4287) ? 1.0 : min(_4287, 1.0))) * (_1571 + 1.0))) + _1576) * _1541;
        float _1586 = _1509 * 0.5;
        float _1587 = _1519 * 0.5;
        float _1588 = _1529 * 0.5;
        float _1589 = dot(vec3(_1586, _1587, _1588), vec3(_1586, _1587, _1588));
        float _1594 = (_1589 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1589);
        float _1602 = (dot(vec3(_849, _850, _851), vec3(_1594 * _1586, _1594 * _1587, _1594 * _1588)) + 1.0) * 0.5;
        float _4320 = isnan(0.0) ? _1602 : (isnan(_1602) ? 0.0 : max(_1602, 0.0));
        float _1611 = sqrt(((_1587 * _1587) + (_1586 * _1586)) + (_1588 * _1588)) / (_1542 + 9.9999997473787516355514526367188e-06);
        float _4331 = isnan(0.0) ? _1611 : (isnan(_1611) ? 0.0 : max(_1611, 0.0));
        float _1612 = isnan(1.0) ? _4331 : (isnan(_4331) ? 1.0 : min(_4331, 1.0));
        float _1613 = _1612 * 2.0;
        float _1617 = (1.0 - _1612) / (_1612 + 1.0);
        float _4342 = isnan(0.0) ? _1617 : (isnan(_1617) ? 0.0 : max(_1617, 0.0));
        float _1618 = isnan(1.0) ? _4342 : (isnan(_4342) ? 1.0 : min(_4342, 1.0));
        float _1627 = ((((1.0 - _1618) * (_1613 + 2.0)) * exp2(log2(isnan(1.0) ? _4320 : (isnan(_4320) ? 1.0 : min(_4320, 1.0))) * (_1613 + 1.0))) + _1618) * _1542;
        float _1628 = _1510 * 0.5;
        float _1629 = _1520 * 0.5;
        float _1630 = _1530 * 0.5;
        float _1631 = dot(vec3(_1628, _1629, _1630), vec3(_1628, _1629, _1630));
        float _1636 = (_1631 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1631);
        float _1644 = (dot(vec3(_849, _850, _851), vec3(_1636 * _1628, _1636 * _1629, _1636 * _1630)) + 1.0) * 0.5;
        float _4353 = isnan(0.0) ? _1644 : (isnan(_1644) ? 0.0 : max(_1644, 0.0));
        float _1653 = sqrt(((_1629 * _1629) + (_1628 * _1628)) + (_1630 * _1630)) / (_1543 + 9.9999997473787516355514526367188e-06);
        float _4364 = isnan(0.0) ? _1653 : (isnan(_1653) ? 0.0 : max(_1653, 0.0));
        float _1654 = isnan(1.0) ? _4364 : (isnan(_4364) ? 1.0 : min(_4364, 1.0));
        float _1655 = _1654 * 2.0;
        float _1659 = (1.0 - _1654) / (_1654 + 1.0);
        float _4375 = isnan(0.0) ? _1659 : (isnan(_1659) ? 0.0 : max(_1659, 0.0));
        float _1660 = isnan(1.0) ? _4375 : (isnan(_4375) ? 1.0 : min(_4375, 1.0));
        float _1669 = ((((1.0 - _1660) * (_1655 + 2.0)) * exp2(log2(isnan(1.0) ? _4353 : (isnan(_4353) ? 1.0 : min(_4353, 1.0))) * (_1655 + 1.0))) + _1660) * _1543;
        _1677 = _1510;
        _1678 = _1509;
        _1679 = _1508;
        _1680 = _1520;
        _1681 = _1519;
        _1682 = _1518;
        _1683 = _1530;
        _1684 = _1529;
        _1685 = _1528;
        _1686 = _1543;
        _1687 = _1542;
        _1688 = _1541;
        _1689 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1585 : (isnan(_1585) ? 0.0 : max(_1585, 0.0)));
        _1690 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1627 : (isnan(_1627) ? 0.0 : max(_1627, 0.0)));
        _1691 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1669 : (isnan(_1669) ? 0.0 : max(_1669, 0.0)));
    }
    else
    {
        _1677 = _1370;
        _1678 = _1370;
        _1679 = _1370;
        _1680 = _1370;
        _1681 = _1370;
        _1682 = _1370;
        _1683 = _1370;
        _1684 = _1370;
        _1685 = _1370;
        _1686 = _1370;
        _1687 = _1370;
        _1688 = _1370;
        _1689 = 0.0;
        _1690 = 0.0;
        _1691 = 0.0;
    }
    float _1701 = (cbModelParam._m0[1u].x * (_1689 - _1382)) + _1382;
    float _1702 = (cbModelParam._m0[1u].x * (_1690 - _1383)) + _1383;
    float _1703 = (cbModelParam._m0[1u].x * (_1691 - _1384)) + _1384;
    float _1724 = fma(_1703, cbSceneParam._m0[89u].z, fma(_1702, cbSceneParam._m0[89u].y, _1701 * cbSceneParam._m0[89u].x));
    float _1727 = fma(_1703, cbSceneParam._m0[90u].z, fma(_1702, cbSceneParam._m0[90u].y, _1701 * cbSceneParam._m0[90u].x));
    float _1730 = fma(_1703, cbSceneParam._m0[91u].z, fma(_1702, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1701));
    float _1745 = _1007 * 0.5;
    float _1746 = _1008 * 0.5;
    float _1747 = _1009 * 0.5;
    float _1748 = dot(vec4(_1745, _1746, _1747, 1.0), vec4(_1679, _1682, _1685, _1688));
    float _1751 = dot(vec4(_1745, _1746, _1747, 1.0), vec4(_1678, _1681, _1684, _1687));
    float _1754 = dot(vec4(_1745, _1746, _1747, 1.0), vec4(_1677, _1680, _1683, _1686));
    float _1788;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1761 = dot(vec4(_1745, _1746, _1747, 1.0), vec4(_1369, _1373, _1376, _1379));
        float _1765 = dot(vec4(_1745, _1746, _1747, 1.0), vec4(_1371, _1374, _1377, _1380));
        float _1769 = dot(vec4(_1745, _1746, _1747, 1.0), vec4(_1372, _1375, _1378, _1381));
        float _1776 = dot(vec4(cbModelParam._m0[39u]), vec4(_1745, _1746, _1747, 1.0));
        _1788 = dot(vec3(isnan(0.0) ? _1769 : (isnan(_1769) ? 0.0 : max(_1769, 0.0)), isnan(0.0) ? _1765 : (isnan(_1765) ? 0.0 : max(_1765, 0.0)), isnan(0.0) ? _1761 : (isnan(_1761) ? 0.0 : max(_1761, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1776) ? 0.0 : (isnan(0.0) ? _1776 : max(0.0, _1776))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1788 = 1.0;
    }
    float _1799;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1790 = dot(vec4(cbModelParam._m0[40u]), vec4(_1745, _1746, _1747, 1.0));
        _1799 = dot(vec3(isnan(0.0) ? _1748 : (isnan(_1748) ? 0.0 : max(_1748, 0.0)), isnan(0.0) ? _1751 : (isnan(_1751) ? 0.0 : max(_1751, 0.0)), isnan(0.0) ? _1754 : (isnan(_1754) ? 0.0 : max(_1754, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1790) ? 0.0 : (isnan(0.0) ? _1790 : max(0.0, _1790))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1799 = 1.0;
    }
    float _1803 = (_1799 * cbModelParam._m0[1u].x) + (_1788 * (1.0 - cbModelParam._m0[1u].x));
    float _1813 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _852);
    float _1814 = isnan(_1813) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1813 : min(cbModelParam._m0[25u].z, _1813));
    float _1894;
    float _1896;
    float _1898;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1861 = fma(_1068, cbModelParam._m0[13u].z, fma(_1064, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1060)) + cbModelParam._m0[13u].w;
        float _1865 = fma(_1068, cbModelParam._m0[14u].z, fma(_1064, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1060)) + cbModelParam._m0[14u].w;
        float _1869 = fma(_1068, cbModelParam._m0[15u].z, fma(_1064, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1060)) + cbModelParam._m0[15u].w;
        float _1872 = fma(_1009, cbModelParam._m0[13u].z, fma(_1008, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1007));
        float _1875 = fma(_1009, cbModelParam._m0[14u].z, fma(_1008, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1007));
        float _1878 = fma(_1009, cbModelParam._m0[15u].z, fma(_1008, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1007));
        float _1906;
        if (_1872 > 0.0)
        {
            _1906 = abs((1.0 - _1861) / _1872);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1872 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1861 + 1.0) / _1872);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1906 = frontier_phi_14_12_ladder;
        }
        float _2075;
        if (_1875 > 0.0)
        {
            _2075 = abs((1.0 - _1865) / _1875);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1875 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1865 + 1.0) / _1875);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2075 = frontier_phi_23_19_ladder;
        }
        float _2370;
        if (_1878 > 0.0)
        {
            _2370 = abs((1.0 - _1869) / _1878);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1878 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1869 + 1.0) / _1878);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2370 = frontier_phi_35_30_ladder;
        }
        float _2372 = isnan(_2075) ? _1906 : (isnan(_1906) ? _2075 : min(_1906, _2075));
        float _2373 = isnan(_2370) ? _2372 : (isnan(_2372) ? _2370 : min(_2372, _2370));
        float _2377 = (_2373 * _1872) + _1861;
        float _2378 = (_2373 * _1875) + _1865;
        float _2379 = (_2373 * _1878) + _1869;
        float _2380 = _2373 * 9.9999997473787516355514526367188e-05;
        float _2382 = (-1.0) - _2380;
        float _2384 = _2380 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2379 > _2384) || ((_2379 < _2382) || ((_2378 > _2384) || ((_2378 < _2382) || ((_2377 < _2382) || (_2377 > _2384))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2524 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2379, cbModelParam._m0[9u].z, fma(_2378, cbModelParam._m0[9u].y, _2377 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2379, cbModelParam._m0[10u].z, fma(_2378, cbModelParam._m0[10u].y, _2377 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2379, cbModelParam._m0[11u].z, fma(_2378, cbModelParam._m0[11u].y, _2377 * cbModelParam._m0[11u].x))), _1814);
            frontier_phi_13_35_ladder = _2524.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2524.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2524.x * cbModelParam._m0[1u].y;
        }
        _1894 = frontier_phi_13_35_ladder_2;
        _1896 = frontier_phi_13_35_ladder_1;
        _1898 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1882 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1007, _1008, _1009), _1814);
        _1894 = _1882.x * cbModelParam._m0[1u].y;
        _1896 = _1882.y * cbModelParam._m0[1u].y;
        _1898 = _1882.z * cbModelParam._m0[1u].y;
    }
    float _1902 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _852);
    float _1903 = isnan(_1902) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1902 : min(cbModelParam._m0[25u].w, _1902));
    float _1992;
    float _1994;
    float _1996;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1956 = fma(_1068, cbModelParam._m0[21u].z, fma(_1064, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1060)) + cbModelParam._m0[21u].w;
        float _1960 = fma(_1068, cbModelParam._m0[22u].z, fma(_1064, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1060)) + cbModelParam._m0[22u].w;
        float _1964 = fma(_1068, cbModelParam._m0[23u].z, fma(_1064, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1060)) + cbModelParam._m0[23u].w;
        float _1967 = fma(_1009, cbModelParam._m0[21u].z, fma(_1008, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1007));
        float _1970 = fma(_1009, cbModelParam._m0[22u].z, fma(_1008, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1007));
        float _1973 = fma(_1009, cbModelParam._m0[23u].z, fma(_1008, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1007));
        float _2080;
        if (_1967 > 0.0)
        {
            _2080 = abs((1.0 - _1956) / _1967);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1967 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1956 + 1.0) / _1967);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2080 = frontier_phi_25_21_ladder;
        }
        float _2397;
        if (_1970 > 0.0)
        {
            _2397 = abs((1.0 - _1960) / _1970);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1970 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1960 + 1.0) / _1970);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2397 = frontier_phi_37_32_ladder;
        }
        float _2724;
        if (_1973 > 0.0)
        {
            _2724 = abs((1.0 - _1964) / _1973);
        }
        else
        {
            float frontier_phi_47_44_ladder;
            if (_1973 < 0.0)
            {
                frontier_phi_47_44_ladder = abs((_1964 + 1.0) / _1973);
            }
            else
            {
                frontier_phi_47_44_ladder = 5000.0;
            }
            _2724 = frontier_phi_47_44_ladder;
        }
        float _2726 = isnan(_2397) ? _2080 : (isnan(_2080) ? _2397 : min(_2080, _2397));
        float _2727 = isnan(_2724) ? _2726 : (isnan(_2726) ? _2724 : min(_2726, _2724));
        float _2731 = (_2727 * _1967) + _1956;
        float _2732 = (_2727 * _1970) + _1960;
        float _2733 = (_2727 * _1973) + _1964;
        float _2734 = _2727 * 9.9999997473787516355514526367188e-05;
        float _2735 = (-1.0) - _2734;
        float _2737 = _2734 + 1.0;
        float frontier_phi_22_47_ladder;
        float frontier_phi_22_47_ladder_1;
        float frontier_phi_22_47_ladder_2;
        if ((_2733 > _2737) || ((_2733 < _2735) || ((_2732 > _2737) || ((_2732 < _2735) || ((_2731 < _2735) || (_2731 > _2737))))))
        {
            frontier_phi_22_47_ladder = 0.0;
            frontier_phi_22_47_ladder_1 = 0.0;
            frontier_phi_22_47_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2851 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2733, cbModelParam._m0[17u].z, fma(_2732, cbModelParam._m0[17u].y, _2731 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2733, cbModelParam._m0[18u].z, fma(_2732, cbModelParam._m0[18u].y, _2731 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2733, cbModelParam._m0[19u].z, fma(_2732, cbModelParam._m0[19u].y, _2731 * cbModelParam._m0[19u].x))), _1903);
            frontier_phi_22_47_ladder = _2851.z * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_1 = _2851.y * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_2 = _2851.x * cbModelParam._m0[1u].z;
        }
        _1992 = frontier_phi_22_47_ladder_2;
        _1994 = frontier_phi_22_47_ladder_1;
        _1996 = frontier_phi_22_47_ladder;
    }
    else
    {
        vec4 _1976 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1007, _1008, _1009), _1903);
        _1992 = _1976.x * cbModelParam._m0[1u].z;
        _1994 = _1976.y * cbModelParam._m0[1u].z;
        _1996 = _1976.z * cbModelParam._m0[1u].z;
    }
    float _2008 = ((((1.0 - _1028) * ((_1015 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_1028 * _1015)) * _999;
    float _2009 = _2008 * ((cbModelParam._m0[1u].w * (_1992 - _1894)) + _1894);
    float _2010 = _2008 * ((cbModelParam._m0[1u].w * (_1994 - _1896)) + _1896);
    float _2011 = _2008 * ((cbModelParam._m0[1u].w * (_1996 - _1898)) + _1898);
    float _2014 = fma(_2011, cbSceneParam._m0[89u].z, fma(_2010, cbSceneParam._m0[89u].y, _2009 * cbSceneParam._m0[89u].x));
    float _2017 = fma(_2011, cbSceneParam._m0[90u].z, fma(_2010, cbSceneParam._m0[90u].y, _2009 * cbSceneParam._m0[90u].x));
    float _2020 = fma(_2011, cbSceneParam._m0[91u].z, fma(_2010, cbSceneParam._m0[91u].y, _2009 * cbSceneParam._m0[91u].x));
    float _2054 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2058 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2062 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2066 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2067 = _2054 / _2066;
    float _2068 = _2058 / _2066;
    float _2069 = _2062 / _2066;
    float _2216;
    float _2217;
    float _2218;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2096 = ((uint(_2069 > cbSceneParam._m0[59u].y) + uint(_2069 > cbSceneParam._m0[59u].x)) + uint(_2069 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2097 = _2096 + 43u;
        uint _2105 = _2096 + 44u;
        uint _2113 = _2096 + 45u;
        uint _2121 = _2096 + 46u;
        float _2132 = fma(_2066, cbSceneParam._m0[_2097].w, fma(_2062, cbSceneParam._m0[_2097].z, fma(_2058, cbSceneParam._m0[_2097].y, _2054 * cbSceneParam._m0[_2097].x)));
        float _2136 = fma(_2066, cbSceneParam._m0[_2105].w, fma(_2062, cbSceneParam._m0[_2105].z, fma(_2058, cbSceneParam._m0[_2105].y, _2054 * cbSceneParam._m0[_2105].x)));
        float _2144 = fma(_2066, cbSceneParam._m0[_2121].w, fma(_2062, cbSceneParam._m0[_2121].z, fma(_2058, cbSceneParam._m0[_2121].y, _2054 * cbSceneParam._m0[_2121].x)));
        float _2149 = cbSceneParam._m0[33u].z * _2144;
        float _2151 = cbSceneParam._m0[33u].w * _2144;
        float _2154 = fma(_2066, cbSceneParam._m0[_2113].w, fma(_2062, cbSceneParam._m0[_2113].z, fma(_2058, cbSceneParam._m0[_2113].y, _2054 * cbSceneParam._m0[_2113].x))) / _2144;
        float _2202 = (cbSceneParam._m0[33u].x - sqrt(((_2068 * _2068) + (_2067 * _2067)) + (_2069 * _2069))) * cbSceneParam._m0[33u].y;
        float _4501 = isnan(0.0) ? _2202 : (isnan(_2202) ? 0.0 : max(_2202, 0.0));
        float _2209 = (isnan(1.0) ? _4501 : (isnan(_4501) ? 1.0 : min(_4501, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2149 + _2132) / _2144, (_2151 + _2136) / _2144), _2154), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2151 + _2132) / _2144, (_2136 - _2149) / _2144), _2154), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2132 - _2149) / _2144, (_2136 - _2151) / _2144), _2154), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2132 - _2151) / _2144, (_2149 + _2136) / _2144), _2154), 0.0)).x), vec4(0.25)));
        _2216 = 1.0 - (_2209 * cbSceneParam._m0[34u].x);
        _2217 = 1.0 - (_2209 * cbSceneParam._m0[34u].y);
        _2218 = 1.0 - (_2209 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2216 = 1.0;
        _2217 = 1.0;
        _2218 = 1.0;
    }
    float _2282;
    float _2284;
    float _2286;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2270 = fma(_2066, cbSceneParam._m0[63u].w, fma(_2062, cbSceneParam._m0[63u].z, fma(_2058, cbSceneParam._m0[63u].y, _2054 * cbSceneParam._m0[63u].x)));
        float _2271 = fma(_2066, cbSceneParam._m0[60u].w, fma(_2062, cbSceneParam._m0[60u].z, fma(_2058, cbSceneParam._m0[60u].y, _2054 * cbSceneParam._m0[60u].x))) / _2270;
        float _2272 = fma(_2066, cbSceneParam._m0[61u].w, fma(_2062, cbSceneParam._m0[61u].z, fma(_2058, cbSceneParam._m0[61u].y, _2054 * cbSceneParam._m0[61u].x))) / _2270;
        float frontier_phi_34_33_ladder;
        float frontier_phi_34_33_ladder_1;
        float frontier_phi_34_33_ladder_2;
        if ((((_2271 >= cbSceneParam._m0[64u].x) && (_2272 >= cbSceneParam._m0[64u].y)) && (_2271 <= cbSceneParam._m0[64u].z)) && (_2272 <= cbSceneParam._m0[64u].w))
        {
            float _2410 = fma(_2066, cbSceneParam._m0[62u].w, fma(_2062, cbSceneParam._m0[62u].z, fma(_2058, cbSceneParam._m0[62u].y, _2054 * cbSceneParam._m0[62u].x))) / _2270;
            float _2414 = isnan(cbSceneParam._m0[41u].w) ? _2410 : (isnan(_2410) ? cbSceneParam._m0[41u].w : max(_2410, cbSceneParam._m0[41u].w));
            float _2457 = (cbSceneParam._m0[33u].x - sqrt(((_2068 * _2068) + (_2067 * _2067)) + (_2069 * _2069))) * cbSceneParam._m0[33u].y;
            float _4517 = isnan(0.0) ? _2457 : (isnan(_2457) ? 0.0 : max(_2457, 0.0));
            float _2464 = (isnan(1.0) ? _4517 : (isnan(_4517) ? 1.0 : min(_4517, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2271, cbSceneParam._m0[33u].w + _2272), _2414), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2271, _2272 - cbSceneParam._m0[33u].z), _2414), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2271 - cbSceneParam._m0[33u].z, _2272 - cbSceneParam._m0[33u].w), _2414), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2271 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2272), _2414), 0.0)).x), vec4(0.25)));
            float _2468 = 1.0 - (_2464 * cbSceneParam._m0[34u].x);
            float _2469 = 1.0 - (_2464 * cbSceneParam._m0[34u].y);
            float _2470 = 1.0 - (_2464 * cbSceneParam._m0[34u].z);
            frontier_phi_34_33_ladder = isnan(_2470) ? _2218 : (isnan(_2218) ? _2470 : min(_2218, _2470));
            frontier_phi_34_33_ladder_1 = isnan(_2469) ? _2217 : (isnan(_2217) ? _2469 : min(_2217, _2469));
            frontier_phi_34_33_ladder_2 = isnan(_2468) ? _2216 : (isnan(_2216) ? _2468 : min(_2216, _2468));
        }
        else
        {
            frontier_phi_34_33_ladder = _2218;
            frontier_phi_34_33_ladder_1 = _2217;
            frontier_phi_34_33_ladder_2 = _2216;
        }
        _2282 = frontier_phi_34_33_ladder_2;
        _2284 = frontier_phi_34_33_ladder_1;
        _2286 = frontier_phi_34_33_ladder;
    }
    else
    {
        _2282 = _2216;
        _2284 = _2217;
        _2286 = _2218;
    }
    uvec4 _2291 = floatBitsToUint(cbInstanceData._m0[_276 + 5u]);
    uint _2293 = _2291.x * 14u;
    uint _2294 = _2293 + 13u;
    float _2301 = _999 + (-1.0);
    float _2306 = (cbLight._m0[_2294].x * _2301) + 1.0;
    float _2307 = (cbLight._m0[_2294].y * _2301) + 1.0;
    float _2308 = (cbLight._m0[_2294].z * _2301) + 1.0;
    float _2309 = (cbLight._m0[_2294].w * _2301) + 1.0;
    uint _2310 = _2293 + 5u;
    float _2316 = isnan(1.0) ? _2307 : (isnan(_2307) ? 1.0 : min(_2307, 1.0));
    uint _2320 = _2293 + 4u;
    float _2329 = isnan(1.0) ? _2306 : (isnan(_2306) ? 1.0 : min(_2306, 1.0));
    uint _2333 = _2293 | 1u;
    float _2344 = dot(vec3(cbLight._m0[_2293].xyz), vec3(_849, _850, _851));
    float _2347 = dot(vec3(cbLight._m0[_2333].xyz), vec3(_849, _850, _851));
    float _4553 = isnan(0.0) ? _2344 : (isnan(_2344) ? 0.0 : max(_2344, 0.0));
    float _4564 = isnan(0.0) ? _2347 : (isnan(_2347) ? 0.0 : max(_2347, 0.0));
    float _2352 = (isnan(1.0) ? _4553 : (isnan(_4553) ? 1.0 : min(_4553, 1.0))) * 0.3183098733425140380859375;
    float _2354 = (isnan(1.0) ? _4564 : (isnan(_4564) ? 1.0 : min(_4564, 1.0))) * 0.3183098733425140380859375;
    float _2361 = ((cbLight._m0[_2310].x * _2316) * _2354) + (((cbLight._m0[_2320].x * _2282) * _2329) * _2352);
    float _2362 = ((_2316 * cbLight._m0[_2310].y) * _2354) + (((cbLight._m0[_2320].y * _2284) * _2329) * _2352);
    float _2363 = ((_2316 * cbLight._m0[_2310].z) * _2354) + (((cbLight._m0[_2320].z * _2286) * _2329) * _2352);
    uvec4 _2367 = floatBitsToUint(cbLight._m0[_2293 + 12u]);
    bool _2369 = _2367.x == 0u;
    float _2471;
    float _2473;
    float _2475;
    if (_2369)
    {
        _2471 = _2361;
        _2473 = _2362;
        _2475 = _2363;
    }
    else
    {
        uint _2479 = _2293 + 6u;
        float _2495 = (dot(vec3(cbLight._m0[_2293 + 2u].xyz), vec3(_849, _850, _851)) * 0.5) + 0.5;
        float _2496 = _2495 * _2495;
        float _4575 = isnan(0.0) ? _2496 : (isnan(_2496) ? 0.0 : max(_2496, 0.0));
        float _2497 = isnan(1.0) ? _4575 : (isnan(_4575) ? 1.0 : min(_4575, 1.0));
        float _2498 = isnan(1.0) ? _2308 : (isnan(_2308) ? 1.0 : min(_2308, 1.0));
        _2471 = (((cbLight._m0[_2479].x * 0.3183098733425140380859375) * _2497) * _2498) + _2361;
        _2473 = (((cbLight._m0[_2479].y * 0.3183098733425140380859375) * _2497) * _2498) + _2362;
        _2475 = (((cbLight._m0[_2479].z * 0.3183098733425140380859375) * _2497) * _2498) + _2363;
    }
    bool _2478 = _2367.y == 0u;
    float _2533;
    float _2535;
    float _2537;
    if (_2478)
    {
        _2533 = _2471;
        _2535 = _2473;
        _2537 = _2475;
    }
    else
    {
        uint _2695 = _2293 + 7u;
        float _2711 = (dot(vec3(cbLight._m0[_2293 + 3u].xyz), vec3(_849, _850, _851)) * 0.5) + 0.5;
        float _2712 = _2711 * _2711;
        float _4591 = isnan(0.0) ? _2712 : (isnan(_2712) ? 0.0 : max(_2712, 0.0));
        float _2713 = isnan(1.0) ? _4591 : (isnan(_4591) ? 1.0 : min(_4591, 1.0));
        float _2714 = isnan(1.0) ? _2309 : (isnan(_2309) ? 1.0 : min(_2309, 1.0));
        _2533 = (((cbLight._m0[_2695].x * 0.3183098733425140380859375) * _2713) * _2714) + _2471;
        _2535 = (((cbLight._m0[_2695].y * 0.3183098733425140380859375) * _2713) * _2714) + _2473;
        _2537 = (((cbLight._m0[_2695].z * 0.3183098733425140380859375) * _2713) * _2714) + _2475;
    }
    uint _2540 = _2293 + 8u;
    float _2553 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2293].w)) * _852) * 0.949999988079071044921875);
    float _2554 = _2553 * _2553;
    float _2555 = cbLight._m0[_2293].x + _928;
    float _2556 = cbLight._m0[_2293].y + _929;
    float _2557 = cbLight._m0[_2293].z + _930;
    float _2561 = inversesqrt(dot(vec3(_2555, _2556, _2557), vec3(_2555, _2556, _2557)));
    float _2562 = _2561 * _2555;
    float _2563 = _2561 * _2556;
    float _2564 = _2561 * _2557;
    float _2565 = dot(vec3(_849, _850, _851), vec3(cbLight._m0[_2293].xyz));
    float _4607 = isnan(0.0) ? _2565 : (isnan(_2565) ? 0.0 : max(_2565, 0.0));
    float _2568 = isnan(1.0) ? _4607 : (isnan(_4607) ? 1.0 : min(_4607, 1.0));
    float _4618 = isnan(0.0) ? _1000 : (isnan(_1000) ? 0.0 : max(_1000, 0.0));
    float _2569 = isnan(1.0) ? _4618 : (isnan(_4618) ? 1.0 : min(_4618, 1.0));
    float _2570 = dot(vec3(_849, _850, _851), vec3(_2562, _2563, _2564));
    float _4629 = isnan(0.0) ? _2570 : (isnan(_2570) ? 0.0 : max(_2570, 0.0));
    float _2573 = isnan(1.0) ? _4629 : (isnan(_4629) ? 1.0 : min(_4629, 1.0));
    float _2574 = dot(vec3(cbLight._m0[_2293].xyz), vec3(_2562, _2563, _2564));
    float _4640 = isnan(0.0) ? _2574 : (isnan(_2574) ? 0.0 : max(_2574, 0.0));
    float _2578 = _2554 * _2554;
    float _2582 = ((_2573 * _2573) * (_2578 + (-1.0))) + 1.0;
    float _2593 = (exp2(log2(1.0 - (isnan(1.0) ? _4640 : (isnan(_4640) ? 1.0 : min(_4640, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2594 = 1.0 - _2554;
    float _2605 = (0.5 / (((_2569 * ((_2568 * _2594) + _2554)) + 9.9999999392252902907785028219223e-09) + (((_2569 * _2594) + _2554) * _2568))) * _2568;
    float _4651 = isnan(0.0) ? _2605 : (isnan(_2605) ? 0.0 : max(_2605, 0.0));
    float _2607 = (isnan(1.0) ? _4651 : (isnan(_4651) ? 1.0 : min(_4651, 1.0))) * (_2578 / ((_2582 * _2582) * 3.141590118408203125));
    uint _2621 = _2293 + 9u;
    float _2632 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2333].w)) * _852) * 0.949999988079071044921875);
    float _2633 = _2632 * _2632;
    float _2634 = cbLight._m0[_2333].x + _928;
    float _2635 = cbLight._m0[_2333].y + _929;
    float _2636 = cbLight._m0[_2333].z + _930;
    float _2640 = inversesqrt(dot(vec3(_2634, _2635, _2636), vec3(_2634, _2635, _2636)));
    float _2641 = _2640 * _2634;
    float _2642 = _2640 * _2635;
    float _2643 = _2640 * _2636;
    float _2644 = dot(vec3(_849, _850, _851), vec3(cbLight._m0[_2333].xyz));
    float _4662 = isnan(0.0) ? _2644 : (isnan(_2644) ? 0.0 : max(_2644, 0.0));
    float _2647 = isnan(1.0) ? _4662 : (isnan(_4662) ? 1.0 : min(_4662, 1.0));
    float _2648 = dot(vec3(_849, _850, _851), vec3(_2641, _2642, _2643));
    float _4673 = isnan(0.0) ? _2648 : (isnan(_2648) ? 0.0 : max(_2648, 0.0));
    float _2651 = isnan(1.0) ? _4673 : (isnan(_4673) ? 1.0 : min(_4673, 1.0));
    float _2652 = dot(vec3(cbLight._m0[_2333].xyz), vec3(_2641, _2642, _2643));
    float _4684 = isnan(0.0) ? _2652 : (isnan(_2652) ? 0.0 : max(_2652, 0.0));
    float _2656 = _2633 * _2633;
    float _2660 = ((_2651 * _2651) * (_2656 + (-1.0))) + 1.0;
    float _2669 = (exp2(log2(1.0 - (isnan(1.0) ? _4684 : (isnan(_4684) ? 1.0 : min(_4684, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2670 = 1.0 - _2633;
    float _2680 = (0.5 / (((_2569 * ((_2647 * _2670) + _2633)) + 9.9999999392252902907785028219223e-09) + (((_2569 * _2670) + _2633) * _2647))) * _2647;
    float _4695 = isnan(0.0) ? _2680 : (isnan(_2680) ? 0.0 : max(_2680, 0.0));
    float _2682 = (isnan(1.0) ? _4695 : (isnan(_4695) ? 1.0 : min(_4695, 1.0))) * (_2656 / ((_2660 * _2660) * 3.141590118408203125));
    float _2692 = (((_2669 * cbLight._m0[_2621].x) * _2682) * _2316) + ((((cbLight._m0[_2540].x * _2282) * _2593) * _2607) * _2329);
    float _2693 = (((_2669 * cbLight._m0[_2621].y) * _2682) * _2316) + ((((cbLight._m0[_2540].y * _2284) * _2593) * _2607) * _2329);
    float _2694 = (((_2669 * cbLight._m0[_2621].z) * _2682) * _2316) + ((((cbLight._m0[_2540].z * _2286) * _2593) * _2607) * _2329);
    float _2750;
    float _2752;
    float _2754;
    if (_2369)
    {
        _2750 = _2692;
        _2752 = _2693;
        _2754 = _2694;
    }
    else
    {
        uint _2756 = _2293 + 2u;
        uint _2760 = _2293 + 10u;
        float _2774 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2756].w)) * _852) * 0.949999988079071044921875);
        float _2775 = _2774 * _2774;
        float _2776 = cbLight._m0[_2756].x + _928;
        float _2777 = cbLight._m0[_2756].y + _929;
        float _2778 = cbLight._m0[_2756].z + _930;
        float _2782 = inversesqrt(dot(vec3(_2776, _2777, _2778), vec3(_2776, _2777, _2778)));
        float _2783 = _2782 * _2776;
        float _2784 = _2782 * _2777;
        float _2785 = _2782 * _2778;
        float _2786 = dot(vec3(_849, _850, _851), vec3(cbLight._m0[_2756].xyz));
        float _4706 = isnan(0.0) ? _2786 : (isnan(_2786) ? 0.0 : max(_2786, 0.0));
        float _2789 = isnan(1.0) ? _4706 : (isnan(_4706) ? 1.0 : min(_4706, 1.0));
        float _2790 = dot(vec3(_849, _850, _851), vec3(_2783, _2784, _2785));
        float _4717 = isnan(0.0) ? _2790 : (isnan(_2790) ? 0.0 : max(_2790, 0.0));
        float _2793 = isnan(1.0) ? _4717 : (isnan(_4717) ? 1.0 : min(_4717, 1.0));
        float _2794 = dot(vec3(cbLight._m0[_2756].xyz), vec3(_2783, _2784, _2785));
        float _4728 = isnan(0.0) ? _2794 : (isnan(_2794) ? 0.0 : max(_2794, 0.0));
        float _2798 = _2775 * _2775;
        float _2802 = ((_2793 * _2793) * (_2798 + (-1.0))) + 1.0;
        float _2811 = (exp2(log2(1.0 - (isnan(1.0) ? _4728 : (isnan(_4728) ? 1.0 : min(_4728, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2812 = 1.0 - _2775;
        float _2822 = (0.5 / (((_2569 * ((_2789 * _2812) + _2775)) + 9.9999999392252902907785028219223e-09) + (((_2569 * _2812) + _2775) * _2789))) * _2789;
        float _4739 = isnan(0.0) ? _2822 : (isnan(_2822) ? 0.0 : max(_2822, 0.0));
        float _2824 = (isnan(1.0) ? _4739 : (isnan(_4739) ? 1.0 : min(_4739, 1.0))) * (_2798 / ((_2802 * _2802) * 3.141590118408203125));
        float _2825 = isnan(1.0) ? _2308 : (isnan(_2308) ? 1.0 : min(_2308, 1.0));
        _2750 = (((_2811 * cbLight._m0[_2760].x) * _2824) * _2825) + _2692;
        _2752 = (((_2811 * cbLight._m0[_2760].y) * _2824) * _2825) + _2693;
        _2754 = (((_2811 * cbLight._m0[_2760].z) * _2824) * _2825) + _2694;
    }
    float _2856;
    float _2858;
    float _2860;
    if (_2478)
    {
        _2856 = _2750;
        _2858 = _2752;
        _2860 = _2754;
    }
    else
    {
        uint _2867 = _2293 + 3u;
        uint _2871 = _2293 + 11u;
        float _2885 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2867].w)) * _852) * 0.949999988079071044921875);
        float _2886 = _2885 * _2885;
        float _2887 = cbLight._m0[_2867].x + _928;
        float _2888 = cbLight._m0[_2867].y + _929;
        float _2889 = cbLight._m0[_2867].z + _930;
        float _2893 = inversesqrt(dot(vec3(_2887, _2888, _2889), vec3(_2887, _2888, _2889)));
        float _2894 = _2893 * _2887;
        float _2895 = _2893 * _2888;
        float _2896 = _2893 * _2889;
        float _2897 = dot(vec3(_849, _850, _851), vec3(cbLight._m0[_2867].xyz));
        float _4755 = isnan(0.0) ? _2897 : (isnan(_2897) ? 0.0 : max(_2897, 0.0));
        float _2900 = isnan(1.0) ? _4755 : (isnan(_4755) ? 1.0 : min(_4755, 1.0));
        float _2901 = dot(vec3(_849, _850, _851), vec3(_2894, _2895, _2896));
        float _4766 = isnan(0.0) ? _2901 : (isnan(_2901) ? 0.0 : max(_2901, 0.0));
        float _2904 = isnan(1.0) ? _4766 : (isnan(_4766) ? 1.0 : min(_4766, 1.0));
        float _2905 = dot(vec3(cbLight._m0[_2867].xyz), vec3(_2894, _2895, _2896));
        float _4777 = isnan(0.0) ? _2905 : (isnan(_2905) ? 0.0 : max(_2905, 0.0));
        float _2909 = _2886 * _2886;
        float _2913 = ((_2904 * _2904) * (_2909 + (-1.0))) + 1.0;
        float _2922 = (exp2(log2(1.0 - (isnan(1.0) ? _4777 : (isnan(_4777) ? 1.0 : min(_4777, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2923 = 1.0 - _2886;
        float _2933 = (0.5 / (((_2569 * ((_2900 * _2923) + _2886)) + 9.9999999392252902907785028219223e-09) + (((_2569 * _2923) + _2886) * _2900))) * _2900;
        float _4788 = isnan(0.0) ? _2933 : (isnan(_2933) ? 0.0 : max(_2933, 0.0));
        float _2935 = (isnan(1.0) ? _4788 : (isnan(_4788) ? 1.0 : min(_4788, 1.0))) * (_2909 / ((_2913 * _2913) * 3.141590118408203125));
        float _2936 = isnan(1.0) ? _2309 : (isnan(_2309) ? 1.0 : min(_2309, 1.0));
        _2856 = (((_2922 * cbLight._m0[_2871].x) * _2935) * _2936) + _2750;
        _2858 = (((_2922 * cbLight._m0[_2871].y) * _2935) * _2936) + _2752;
        _2860 = (((_2922 * cbLight._m0[_2871].z) * _2935) * _2936) + _2754;
    }
    float _3002;
    float _3004;
    float _3006;
    float _3008;
    float _3010;
    float _3012;
    if (_2291.y == 0u)
    {
        uvec4 _2957 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2958 = _2957.x;
        uint _2969 = uint((float(_2957.y) * floor(float(uint(cbSceneParam._m0[85u].y * _937) / _2958))) + floor(float(uint(cbSceneParam._m0[85u].x * _936) / _2958)));
        float _2979 = (log2(_2069 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2980 = isnan(0.0) ? _2979 : (isnan(_2979) ? 0.0 : max(_2979, 0.0));
        uint _2983 = uint(isnan(14.0) ? _2980 : (isnan(_2980) ? 14.0 : min(_2980, 14.0)));
        uvec4 _2988 = texelFetch(g_lightClusterGridBuffer, int(((_2983 << 2u) + (_2969 << 6u)) >> 2u));
        uint _2989 = _2988.x;
        uint _2990 = _2957.z;
        float _3069;
        float _3071;
        float _3073;
        float _3075;
        float _3077;
        float _3079;
        if (((((1u << ((_2990 >> 4u) & 15u)) + 4294967295u) & _2989) == 0u) || ((_2990 & 240u) == 0u))
        {
            _3069 = 0.0;
            _3071 = 0.0;
            _3073 = 0.0;
            _3075 = 0.0;
            _3077 = 0.0;
            _3079 = 0.0;
        }
        else
        {
            float _3070;
            float _3072;
            float _3074;
            float _3076;
            float _3078;
            float _3080;
            float _3214 = 0.0;
            float _3215 = 0.0;
            float _3216 = 0.0;
            float _3217 = 0.0;
            float _3218 = 0.0;
            float _3219 = 0.0;
            uint _3220 = 0u;
            uint _3229;
            bool _3230;
            for (;;)
            {
                _3229 = texelFetch(g_lightClassification, int((((_2983 << 5u) + (_2969 << 9u)) + (_3220 << 2u)) >> 2u)).x;
                _3230 = _3229 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3230)
                {
                    frontier_phi_66_pred = _3219;
                    frontier_phi_66_pred_1 = _3218;
                    frontier_phi_66_pred_2 = _3217;
                    frontier_phi_66_pred_3 = _3216;
                    frontier_phi_66_pred_4 = _3215;
                    frontier_phi_66_pred_5 = _3214;
                }
                else
                {
                    float _3338;
                    float _3339;
                    float _3340;
                    float _3341;
                    float _3342;
                    float _3343;
                    uint _3344;
                    _3338 = _3214;
                    _3339 = _3215;
                    _3340 = _3216;
                    _3341 = _3217;
                    _3342 = _3218;
                    _3343 = _3219;
                    _3344 = _3229;
                    float _3270;
                    float _3271;
                    float _3272;
                    float _3273;
                    float _3274;
                    float _3275;
                    for (;;)
                    {
                        uint _3348 = uint(findLSB(_3344)) + (_3220 << 5u);
                        uint _3345 = (_3344 + 4294967295u) & _3344;
                        uint _3350 = _3348 * 48u;
                        vec4 _3364 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3350)).x, texelFetch(g_PointLightRenderingBuffer, int(_3350 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3350 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3350 + 3u)).x));
                        uint _3370 = (_3348 * 48u) + 4u;
                        vec4 _3383 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3370)).x, texelFetch(g_PointLightRenderingBuffer, int(_3370 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3370 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3370 + 3u)).x));
                        uint _3389 = (_3348 * 48u) + 8u;
                        vec3 _3400 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3389)).x, texelFetch(g_PointLightRenderingBuffer, int(_3389 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3389 + 2u)).x));
                        float _3404 = _3364.x - _2067;
                        float _3405 = _3364.y - _2068;
                        float _3406 = _3364.z - _2069;
                        float _3407 = dot(vec3(_3404, _3405, _3406), vec3(_3404, _3405, _3406));
                        float _3410 = inversesqrt(_3407);
                        float _3411 = _3410 * _3404;
                        float _3412 = _3410 * _3405;
                        float _3413 = _3410 * _3406;
                        float _3414 = dot(vec3(_955, _958, _961), vec3(_3411, _3412, _3413));
                        float _3419 = 1.0 - (_3407 * _3364.w);
                        float _4814 = isnan(0.0) ? _3419 : (isnan(_3419) ? 0.0 : max(_3419, 0.0));
                        float _3420 = isnan(1.0) ? _4814 : (isnan(_4814) ? 1.0 : min(_4814, 1.0));
                        float _3421 = sqrt(_3407) * _3383.w;
                        float _3424 = 1.39999997615814208984375 / (_3421 + 1.39999997615814208984375);
                        float _3425 = _3424 * _3424;
                        float _3428 = ((1.0 - _3425) * _3414) + _3425;
                        float _3431 = _3421 * _3421;
                        float _3435 = ((isnan(0.0) ? _3428 : (isnan(_3428) ? 0.0 : max(_3428, 0.0))) * _3420) / ((_3431 * 0.699999988079071044921875) + 1.0);
                        float _3439 = (-0.0) - _2067;
                        float _3440 = (-0.0) - _2068;
                        float _3441 = (-0.0) - _2069;
                        float _3445 = inversesqrt(dot(vec3(_3439, _3440, _3441), vec3(_3439, _3440, _3441)));
                        float _3446 = _3445 * _3439;
                        float _3447 = _3445 * _3440;
                        float _3448 = _3445 * _3441;
                        float _3455 = exp2(log2(1.0 / ((_3431 * 3.5) + 5.0)) * 0.25);
                        float _3456 = 1.0 - _1015;
                        float _3463 = sqrt(1.0 - ((1.0 - (_3456 * _3456)) * (1.0 - (_3455 * _3455))));
                        float _3464 = _3463 * _3463;
                        float _3465 = _3464 * _3464;
                        float _3466 = _3446 + _3411;
                        float _3467 = _3447 + _3412;
                        float _3468 = _3448 + _3413;
                        float _3472 = inversesqrt(dot(vec3(_3466, _3467, _3468), vec3(_3466, _3467, _3468)));
                        float _3476 = dot(vec3(_955, _958, _961), vec3(_3446, _3447, _3448));
                        float _4830 = isnan(0.0) ? _3476 : (isnan(_3476) ? 0.0 : max(_3476, 0.0));
                        float _3479 = isnan(1.0) ? _4830 : (isnan(_4830) ? 1.0 : min(_4830, 1.0));
                        float _3480 = dot(vec3(_955, _958, _961), vec3(_3472 * _3466, _3472 * _3467, _3472 * _3468));
                        float _4841 = isnan(0.0) ? _3480 : (isnan(_3480) ? 0.0 : max(_3480, 0.0));
                        float _3483 = isnan(1.0) ? _4841 : (isnan(_4841) ? 1.0 : min(_4841, 1.0));
                        float _3487 = ((_3483 * _3483) * (_3465 + (-1.0))) + 1.0;
                        float _3488 = _3424 * _3464;
                        float _3489 = _3488 * _3488;
                        float _3492 = ((1.0 - _3489) * _3414) + _3489;
                        float _4852 = isnan(0.0) ? _3492 : (isnan(_3492) ? 0.0 : max(_3492, 0.0));
                        float _3493 = isnan(1.0) ? _4852 : (isnan(_4852) ? 1.0 : min(_4852, 1.0));
                        float _3494 = 1.0 - _3464;
                        float _3504 = (0.5 / (((_3493 * ((_3479 * _3494) + _3464)) + 9.9999999392252902907785028219223e-09) + (((_3493 * _3494) + _3464) * _3479))) * _3493;
                        float _4863 = isnan(0.0) ? _3504 : (isnan(_3504) ? 0.0 : max(_3504, 0.0));
                        float _3515 = (((_3465 * 3.1415927410125732421875) * (isnan(1.0) ? _4863 : (isnan(_4863) ? 1.0 : min(_4863, 1.0)))) / ((_3487 * _3487) * ((_3431 * 2.1991131305694580078125) + 3.141590118408203125))) * _3420;
                        _3273 = (_3435 * _3383.x) + _3341;
                        _3274 = (_3435 * _3383.y) + _3342;
                        _3275 = (_3435 * _3383.z) + _3343;
                        _3270 = (_3515 * _3400.x) + _3338;
                        _3271 = (_3515 * _3400.y) + _3339;
                        _3272 = (_3515 * _3400.z) + _3340;
                        if (_3345 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3338 = _3270;
                            _3339 = _3271;
                            _3340 = _3272;
                            _3341 = _3273;
                            _3342 = _3274;
                            _3343 = _3275;
                            _3344 = _3345;
                        }
                    }
                    frontier_phi_66_pred = _3275;
                    frontier_phi_66_pred_1 = _3274;
                    frontier_phi_66_pred_2 = _3273;
                    frontier_phi_66_pred_3 = _3272;
                    frontier_phi_66_pred_4 = _3271;
                    frontier_phi_66_pred_5 = _3270;
                }
                _3080 = frontier_phi_66_pred;
                _3078 = frontier_phi_66_pred_1;
                _3076 = frontier_phi_66_pred_2;
                _3074 = frontier_phi_66_pred_3;
                _3072 = frontier_phi_66_pred_4;
                _3070 = frontier_phi_66_pred_5;
                uint _3221 = _3220 + 1u;
                if (_3221 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3214 = _3070;
                    _3215 = _3072;
                    _3216 = _3074;
                    _3217 = _3076;
                    _3218 = _3078;
                    _3219 = _3080;
                    _3220 = _3221;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3069 = _3070;
            _3071 = _3072;
            _3073 = _3074;
            _3075 = _3076;
            _3077 = _3078;
            _3079 = _3080;
        }
        uvec4 _3083 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3084 = _3083.z;
        uint _3086 = (_3084 >> 8u) & 15u;
        float _3182;
        float _3184;
        float _3186;
        float _3188;
        float _3190;
        float _3192;
        if (((4294967295u << _3086) & _2989) == 0u)
        {
            _3182 = _3069;
            _3184 = _3071;
            _3186 = _3073;
            _3188 = _3075;
            _3190 = _3077;
            _3192 = _3079;
        }
        else
        {
            float _3207 = inversesqrt(dot(vec3(_2067, _2068, _2069), vec3(_2067, _2068, _2069)));
            float _3208 = _3207 * _2067;
            float _3209 = _3207 * _2068;
            float _3210 = _3207 * _2069;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_3086 < ((_3084 >> 12u) & 15u))
            {
                float _3183;
                float _3185;
                float _3187;
                float _3189;
                float _3191;
                float _3193;
                float _3321 = _3069;
                float _3322 = _3071;
                float _3323 = _3073;
                float _3324 = _3075;
                float _3325 = _3077;
                float _3326 = _3079;
                uint _3327 = _3086;
                uint _3336;
                bool _3337;
                for (;;)
                {
                    _3336 = texelFetch(g_lightClassification, int((((_2983 << 5u) + (_2969 << 9u)) + (_3327 << 2u)) >> 2u)).x;
                    _3337 = _3336 == 0u;
                    float frontier_phi_72_pred;
                    float frontier_phi_72_pred_1;
                    float frontier_phi_72_pred_2;
                    float frontier_phi_72_pred_3;
                    float frontier_phi_72_pred_4;
                    float frontier_phi_72_pred_5;
                    if (_3337)
                    {
                        frontier_phi_72_pred = _3326;
                        frontier_phi_72_pred_1 = _3325;
                        frontier_phi_72_pred_2 = _3324;
                        frontier_phi_72_pred_3 = _3323;
                        frontier_phi_72_pred_4 = _3322;
                        frontier_phi_72_pred_5 = _3321;
                    }
                    else
                    {
                        float _3520;
                        float _3521;
                        float _3522;
                        float _3523;
                        float _3524;
                        float _3525;
                        float _3813;
                        float _3814;
                        float _3815;
                        float _3816;
                        float _3817;
                        float _3818;
                        float _3533 = _3321;
                        float _3534 = _3322;
                        float _3535 = _3323;
                        float _3536 = _3324;
                        float _3537 = _3325;
                        float _3538 = _3326;
                        uint _3539 = _3336;
                        uint _3540;
                        vec4 _3565;
                        float _3566;
                        vec4 _3581;
                        vec3 _3593;
                        vec4 _3608;
                        vec4 _3623;
                        float _3669;
                        bool _3670;
                        for (;;)
                        {
                            uint _3550 = ((_3327 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3539));
                            _3540 = (_3539 + 4294967295u) & _3539;
                            uint _3552 = _3550 * 40u;
                            _3565 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3552)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3552 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3552 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3552 + 3u)).x));
                            _3566 = _3565.w;
                            uint _3568 = (_3550 * 40u) + 4u;
                            _3581 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3568)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3568 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3568 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3568 + 3u)).x));
                            uint _3583 = (_3550 * 40u) + 8u;
                            _3593 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3583)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3583 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3583 + 2u)).x));
                            uint _3595 = (_3550 * 40u) + 16u;
                            _3608 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3595)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3595 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3595 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3595 + 3u)).x));
                            uint _3610 = (_3550 * 40u) + 20u;
                            _3623 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3610)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3610 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3610 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3610 + 3u)).x));
                            uint _3625 = (_3550 * 40u) + 24u;
                            vec4 _3638 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3625)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3625 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3625 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3625 + 3u)).x));
                            uint _3644 = (_3550 * 40u) + 28u;
                            vec4 _3657 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3644)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3644 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3644 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3644 + 3u)).x));
                            _3669 = fma(_2069, _3657.z, fma(_2068, _3657.y, _3657.x * _2067)) + _3657.w;
                            _3670 = !((fma(_2069, _3638.z, fma(_2068, _3638.y, _3638.x * _2067)) + _3638.w) <= 0.0);
                            float frontier_phi_78_pred;
                            float frontier_phi_78_pred_1;
                            float frontier_phi_78_pred_2;
                            float frontier_phi_78_pred_3;
                            float frontier_phi_78_pred_4;
                            float frontier_phi_78_pred_5;
                            if (_3670)
                            {
                                float _3697 = _3565.x - _2067;
                                float _3698 = _3565.y - _2068;
                                float _3699 = _3565.z - _2069;
                                float _3700 = dot(vec3(_3697, _3698, _3699), vec3(_3697, _3698, _3699));
                                float _3703 = inversesqrt(_3700);
                                float _3704 = _3703 * _3697;
                                float _3705 = _3703 * _3698;
                                float _3706 = _3703 * _3699;
                                float _3710 = 1.0 - (_3700 / (_3566 * _3566));
                                float _4874 = isnan(0.0) ? _3710 : (isnan(_3710) ? 0.0 : max(_3710, 0.0));
                                float _3711 = isnan(1.0) ? _4874 : (isnan(_4874) ? 1.0 : min(_4874, 1.0));
                                float _3715 = sqrt(_3700) * _3581.w;
                                float _3717 = 1.39999997615814208984375 / (_3715 + 1.39999997615814208984375);
                                float _3718 = _3717 * _3717;
                                float _3721 = ((1.0 - _3718) * dot(vec3(_3704, _3705, _3706), vec3(_955, _958, _961))) + _3718;
                                float _3724 = _3715 * _3715;
                                float _3728 = (fma(_2069, _3608.z, fma(_2068, _3608.y, _3608.x * _2067)) + _3608.w) / _3669;
                                float _3729 = (fma(_2069, _3623.z, fma(_2068, _3623.y, _3623.x * _2067)) + _3623.w) / _3669;
                                float _3733 = 1.0 - dot(vec2(_3728, _3729), vec2(_3728, _3729));
                                float _4890 = isnan(0.0) ? _3733 : (isnan(_3733) ? 0.0 : max(_3733, 0.0));
                                float _3734 = isnan(1.0) ? _4890 : (isnan(_4890) ? 1.0 : min(_4890, 1.0));
                                float _3735 = _3734 * (((isnan(0.0) ? _3721 : (isnan(_3721) ? 0.0 : max(_3721, 0.0))) * _3711) / ((_3724 * 0.699999988079071044921875) + 1.0));
                                float _3747 = exp2(log2(1.0 / ((_3724 * 3.5) + 5.0)) * 0.25);
                                float _3748 = 1.0 - _1015;
                                float _3755 = sqrt(1.0 - ((1.0 - (_3748 * _3748)) * (1.0 - (_3747 * _3747))));
                                float _3756 = _3755 * _3755;
                                float _3757 = _3756 * _3756;
                                float _3758 = _3704 - _3208;
                                float _3759 = _3705 - _3209;
                                float _3760 = _3706 - _3210;
                                float _3764 = inversesqrt(dot(vec3(_3758, _3759, _3760), vec3(_3758, _3759, _3760)));
                                float _3768 = dot(vec3(_955, _958, _961), vec3((-0.0) - _3208, (-0.0) - _3209, (-0.0) - _3210));
                                float _4901 = isnan(0.0) ? _3768 : (isnan(_3768) ? 0.0 : max(_3768, 0.0));
                                float _3771 = isnan(1.0) ? _4901 : (isnan(_4901) ? 1.0 : min(_4901, 1.0));
                                float _3772 = dot(vec3(_955, _958, _961), vec3(_3764 * _3758, _3764 * _3759, _3764 * _3760));
                                float _4912 = isnan(0.0) ? _3772 : (isnan(_3772) ? 0.0 : max(_3772, 0.0));
                                float _3775 = isnan(1.0) ? _4912 : (isnan(_4912) ? 1.0 : min(_4912, 1.0));
                                float _3779 = ((_3775 * _3775) * (_3757 + (-1.0))) + 1.0;
                                float _3780 = _3717 * _3756;
                                float _3781 = _3780 * _3780;
                                float _3787 = ((1.0 - _3781) * dot(vec3(_955, _958, _961), vec3(_3704, _3705, _3706))) + _3781;
                                float _4923 = isnan(0.0) ? _3787 : (isnan(_3787) ? 0.0 : max(_3787, 0.0));
                                float _3788 = isnan(1.0) ? _4923 : (isnan(_4923) ? 1.0 : min(_4923, 1.0));
                                float _3789 = 1.0 - _3756;
                                float _3799 = (0.5 / (((_3788 * ((_3771 * _3789) + _3756)) + 9.9999999392252902907785028219223e-09) + (((_3788 * _3789) + _3756) * _3771))) * _3788;
                                float _4934 = isnan(0.0) ? _3799 : (isnan(_3799) ? 0.0 : max(_3799, 0.0));
                                float _3809 = (_3734 * _3711) * (((_3757 * 3.1415927410125732421875) * (isnan(1.0) ? _4934 : (isnan(_4934) ? 1.0 : min(_4934, 1.0)))) / ((_3779 * _3779) * ((_3724 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_78_pred = _3735 * _3581.y;
                                frontier_phi_78_pred_1 = _3735 * _3581.x;
                                frontier_phi_78_pred_2 = _3809 * _3593.z;
                                frontier_phi_78_pred_3 = _3809 * _3593.y;
                                frontier_phi_78_pred_4 = _3809 * _3593.x;
                                frontier_phi_78_pred_5 = _3735 * _3581.z;
                            }
                            else
                            {
                                frontier_phi_78_pred = 0.0;
                                frontier_phi_78_pred_1 = 0.0;
                                frontier_phi_78_pred_2 = 0.0;
                                frontier_phi_78_pred_3 = 0.0;
                                frontier_phi_78_pred_4 = 0.0;
                                frontier_phi_78_pred_5 = 0.0;
                            }
                            _3817 = frontier_phi_78_pred;
                            _3816 = frontier_phi_78_pred_1;
                            _3815 = frontier_phi_78_pred_2;
                            _3814 = frontier_phi_78_pred_3;
                            _3813 = frontier_phi_78_pred_4;
                            _3818 = frontier_phi_78_pred_5;
                            _3523 = _3816 + _3536;
                            _3524 = _3817 + _3537;
                            _3525 = _3818 + _3538;
                            _3520 = _3813 + _3533;
                            _3521 = _3814 + _3534;
                            _3522 = _3815 + _3535;
                            if (_3540 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3533 = _3520;
                                _3534 = _3521;
                                _3535 = _3522;
                                _3536 = _3523;
                                _3537 = _3524;
                                _3538 = _3525;
                                _3539 = _3540;
                                continue;
                            }
                        }
                        frontier_phi_72_pred = _3525;
                        frontier_phi_72_pred_1 = _3524;
                        frontier_phi_72_pred_2 = _3523;
                        frontier_phi_72_pred_3 = _3522;
                        frontier_phi_72_pred_4 = _3521;
                        frontier_phi_72_pred_5 = _3520;
                    }
                    _3193 = frontier_phi_72_pred;
                    _3191 = frontier_phi_72_pred_1;
                    _3189 = frontier_phi_72_pred_2;
                    _3187 = frontier_phi_72_pred_3;
                    _3185 = frontier_phi_72_pred_4;
                    _3183 = frontier_phi_72_pred_5;
                    uint _3328 = _3327 + 1u;
                    if (_3328 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3321 = _3183;
                        _3322 = _3185;
                        _3323 = _3187;
                        _3324 = _3189;
                        _3325 = _3191;
                        _3326 = _3193;
                        _3327 = _3328;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _3193;
                frontier_phi_60_61_ladder_1 = _3191;
                frontier_phi_60_61_ladder_2 = _3187;
                frontier_phi_60_61_ladder_3 = _3185;
                frontier_phi_60_61_ladder_4 = _3183;
                frontier_phi_60_61_ladder_5 = _3189;
            }
            else
            {
                frontier_phi_60_61_ladder = _3079;
                frontier_phi_60_61_ladder_1 = _3077;
                frontier_phi_60_61_ladder_2 = _3073;
                frontier_phi_60_61_ladder_3 = _3071;
                frontier_phi_60_61_ladder_4 = _3069;
                frontier_phi_60_61_ladder_5 = _3075;
            }
            _3182 = frontier_phi_60_61_ladder_4;
            _3184 = frontier_phi_60_61_ladder_3;
            _3186 = frontier_phi_60_61_ladder_2;
            _3188 = frontier_phi_60_61_ladder_5;
            _3190 = frontier_phi_60_61_ladder_1;
            _3192 = frontier_phi_60_61_ladder;
        }
        float _3197 = isnan(1.0) ? _999 : (isnan(_999) ? 1.0 : min(_999, 1.0));
        _3002 = (_3197 * _3188) + _2533;
        _3004 = (_3197 * _3190) + _2535;
        _3006 = (_3197 * _3192) + _2537;
        _3008 = ((_3182 * 0.039999999105930328369140625) * _3197) + _2856;
        _3010 = ((_3184 * 0.039999999105930328369140625) * _3197) + _2858;
        _3012 = ((_3186 * 0.039999999105930328369140625) * _3197) + _2860;
    }
    else
    {
        _3002 = _2533;
        _3004 = _2535;
        _3006 = _2537;
        _3008 = _2856;
        _3010 = _2858;
        _3012 = _2860;
    }
    float _4950 = isnan(0.0) ? _984 : (isnan(_984) ? 0.0 : max(_984, 0.0));
    float _4961 = isnan(0.0) ? _985 : (isnan(_985) ? 0.0 : max(_985, 0.0));
    float _4972 = isnan(0.0) ? _986 : (isnan(_986) ? 0.0 : max(_986, 0.0));
    uint _3032 = _276 + 6u;
    float _3040 = _936 / cbSceneParam._m0[86u].x;
    float _3041 = _937 / cbSceneParam._m0[86u].y;
    vec4 _3055 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3040, _3041, (log2((isnan(cbSceneParam._m0[77u].w) ? _870 : (isnan(_870) ? cbSceneParam._m0[77u].w : min(_870, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3057 = _3055.x;
    float _3058 = _3055.y;
    float _3059 = _3055.z;
    float _3060 = _3055.w;
    float _3132;
    float _3134;
    float _3136;
    float _3138;
    if (_870 > cbSceneParam._m0[78u].w)
    {
        float _3094 = isnan(_870) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _870 : min(cbSceneParam._m0[80u].w, _870));
        float _3095 = _3094 / _870;
        float _3106 = _3095 * _921;
        float _3107 = _922 * _3095;
        float _3108 = (-0.0) - _3107;
        float _3110 = _3095 * _923;
        float _3112 = (cbSceneParam._m0[77u].w * _3108) / _3094;
        float _3113 = _3112 + cbSceneParam._m0[79u].w;
        float _3114 = cbSceneParam._m0[79u].w - _3107;
        float _3120 = sqrt(((_3106 * _3106) + (_3107 * _3107)) + (_3110 * _3110));
        float _3123 = (1.0 - (cbSceneParam._m0[77u].w / _3094)) * _3120;
        float _3128 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3130 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3283;
        if (abs((_3108 - _3112) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3283 = ((((_3113 > 0.0) ? exp2(_3128 * _3113) : (2.0 - exp2(_3130 * _3113))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3123;
        }
        else
        {
            float _3243 = 1.0 / cbSceneParam._m0[80u].x;
            float _3244 = isnan(_3114) ? _3113 : (isnan(_3113) ? _3114 : max(_3113, _3114));
            float _3245 = isnan(_3114) ? _3113 : (isnan(_3113) ? _3114 : min(_3113, _3114));
            float _3254 = isnan(0.0) ? _3244 : (isnan(_3244) ? 0.0 : min(_3244, 0.0));
            float _3255 = isnan(0.0) ? _3245 : (isnan(_3245) ? 0.0 : min(_3245, 0.0));
            _3283 = ((abs(_3120 / _3108) * cbSceneParam._m0[80u].y) * ((((_3254 - _3255) * 2.0) - ((exp2(_3128 * (isnan(0.0) ? _3244 : (isnan(_3244) ? 0.0 : max(_3244, 0.0)))) - exp2(_3128 * (isnan(0.0) ? _3245 : (isnan(_3245) ? 0.0 : max(_3245, 0.0))))) * _3243)) - ((exp2(_3130 * _3254) - exp2(_3130 * _3255)) * _3243))) + (_3123 * cbSceneParam._m0[80u].z);
        }
        vec4 _3285 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3040, _3041, 1.0), 0.0);
        float _3294 = exp2((_3283 * (-1.44269502162933349609375)) * (1.0 - _3285.w));
        float _3295 = log2(_3294);
        float _3311 = log2(_3060);
        _3132 = (exp2(_3311 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3295 * cbSceneParam._m0[78u].x)) * _3285.x) / cbSceneParam._m0[78u].x)) + _3057;
        _3134 = (exp2(_3311 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3295 * cbSceneParam._m0[78u].y)) * _3285.y) / cbSceneParam._m0[78u].y)) + _3058;
        _3136 = (exp2(_3311 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3295 * cbSceneParam._m0[78u].z)) * _3285.z) / cbSceneParam._m0[78u].z)) + _3059;
        _3138 = _3294 * _3060;
    }
    else
    {
        _3132 = _3057;
        _3134 = _3058;
        _3136 = _3059;
        _3138 = _3060;
    }
    float _3150 = roundEven(cbMatDynParam._m0[0u].y);
    bool _3151 = _3150 == 3.0;
    float _3152 = log2(_3138);
    float _3159 = exp2(_3152 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4950 : (isnan(_4950) ? 1.0 : min(_4950, 1.0))) * (_3002 + ((isnan(0.0) ? _1724 : (isnan(_1724) ? 0.0 : max(_1724, 0.0))) * _999))) + ((_3008 + ((isnan(0.0) ? _2014 : (isnan(_2014) ? 0.0 : max(_2014, 0.0))) * _1803)) * cbPerFrame._m0[3u].x));
    float _3160 = exp2(_3152 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4961 : (isnan(_4961) ? 1.0 : min(_4961, 1.0))) * (_3004 + ((isnan(0.0) ? _1727 : (isnan(_1727) ? 0.0 : max(_1727, 0.0))) * _999))) + ((_3010 + ((isnan(0.0) ? _2017 : (isnan(_2017) ? 0.0 : max(_2017, 0.0))) * _1803)) * cbPerFrame._m0[3u].x));
    float _3161 = exp2(_3152 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4972 : (isnan(_4972) ? 1.0 : min(_4972, 1.0))) * (_3006 + ((isnan(0.0) ? _1730 : (isnan(_1730) ? 0.0 : max(_1730, 0.0))) * _999))) + ((_3012 + ((isnan(0.0) ? _2020 : (isnan(_2020) ? 0.0 : max(_2020, 0.0))) * _1803)) * cbPerFrame._m0[3u].x));
    float _3170 = (_3150 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _3170 * (_3151 ? _3159 : (_3159 + (cbSceneParam._m0[72u].w * _3132)));
    SV_Target.y = _3170 * (_3151 ? _3160 : (_3160 + (cbSceneParam._m0[72u].w * _3134)));
    SV_Target.z = _3170 * (_3151 ? _3161 : (_3161 + (cbSceneParam._m0[72u].w * _3136)));
    SV_Target.w = cbInstanceData._m0[_3032].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_3032].w;
}


