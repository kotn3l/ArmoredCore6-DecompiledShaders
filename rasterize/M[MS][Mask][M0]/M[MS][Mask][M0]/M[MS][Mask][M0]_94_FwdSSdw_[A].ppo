#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_0;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 13) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_22;
layout(set = 0, binding = 14) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_10;
layout(set = 0, binding = 20) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_6;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1428;
float _3809;
float _3810;
float _3811;
float _3812;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _227 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _228 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _229 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _235 = inversesqrt(dot(vec3(_227, _228, _229), vec3(_227, _228, _229)));
    float _236 = _235 * _227;
    float _237 = _235 * _228;
    float _238 = _235 * _229;
    float _242 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _243 = _242 * NORMAL.x;
    float _244 = _242 * NORMAL.y;
    float _245 = _242 * NORMAL.z;
    float _249 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _250 = _249 * TANGENT.x;
    float _251 = _249 * TANGENT.y;
    float _252 = _249 * TANGENT.z;
    float _263 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _265 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _266 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3821 = isnan(0.0) ? _263 : (isnan(_263) ? 0.0 : max(_263, 0.0));
    float _3832 = isnan(0.0) ? _265 : (isnan(_265) ? 0.0 : max(_265, 0.0));
    float _3843 = isnan(0.0) ? _266 : (isnan(_266) ? 0.0 : max(_266, 0.0));
    uint _276 = uint(roundEven(NORMAL.w)) * 13u;
    uint _281 = _276 + 1u;
    uint _285 = _276 + 2u;
    float _294 = sqrt(((cbInstanceData._m0[_281].x * cbInstanceData._m0[_281].x) + (cbInstanceData._m0[_276].x * cbInstanceData._m0[_276].x)) + (cbInstanceData._m0[_285].x * cbInstanceData._m0[_285].x));
    float _295 = _294 * TEXCOORD.z;
    float _296 = _294 * TEXCOORD.w;
    vec4 _309 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _295) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _296) + cbTextureTilingScale._m0[13u].w));
    vec4 _332 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _358 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _363 = _358.x * cbMtdParam._m0[11u].x;
    float _364 = _358.y * cbMtdParam._m0[11u].y;
    float _365 = _358.z * cbMtdParam._m0[11u].z;
    vec4 _384 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _295) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _296) + cbTextureTilingScale._m0[5u].w));
    vec4 _403 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _438 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _440 = _438.x;
    float _452 = dot(vec4(_440, _438.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _469 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _403.x) * 2.0) - ((((_440 - _452) * cbMtdParam._m0[24u].z) + _452) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3854 = isnan(0.0) ? _469 : (isnan(_469) ? 0.0 : max(_469, 0.0));
    float _470 = isnan(1.0) ? _3854 : (isnan(_3854) ? 1.0 : min(_3854, 1.0));
    float _477 = (_470 * ((_384.x * cbMtdParam._m0[12u].x) - _363)) + _363;
    float _478 = (_470 * ((_384.y * cbMtdParam._m0[12u].y) - _364)) + _364;
    float _479 = (_470 * ((_384.z * cbMtdParam._m0[12u].z) - _365)) + _365;
    vec4 _496 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _295) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _296) + cbTextureTilingScale._m0[3u].w));
    vec4 _516 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _518 = _516.x;
    float _528 = dot(vec4(_518, _516.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _542 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _403.y) * 2.0) - ((((_518 - _528) * cbMtdParam._m0[24u].z) + _528) * cbMtdParam._m0[20u].w))) + 1.0;
    float _3865 = isnan(0.0) ? _542 : (isnan(_542) ? 0.0 : max(_542, 0.0));
    float _543 = isnan(1.0) ? _3865 : (isnan(_3865) ? 1.0 : min(_3865, 1.0));
    float _553 = (_332.x * cbMtdParam._m0[9u].x) * ((_543 * ((_496.x * cbMtdParam._m0[13u].x) - _477)) + _477);
    float _554 = (_332.y * cbMtdParam._m0[9u].y) * ((_543 * ((_496.y * cbMtdParam._m0[13u].y) - _478)) + _478);
    float _555 = (_332.z * cbMtdParam._m0[9u].z) * ((_543 * ((_496.z * cbMtdParam._m0[13u].z) - _479)) + _479);
    float _559 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _309.x) * _553;
    float _562 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _309.y) * _554;
    float _565 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _309.z) * _555;
    float _573 = (((_553 - _559) * (isnan(1.0) ? _3821 : (isnan(_3821) ? 1.0 : min(_3821, 1.0)))) + _559) * 4.55000019073486328125;
    float _575 = (((_554 - _562) * (isnan(1.0) ? _3832 : (isnan(_3832) ? 1.0 : min(_3832, 1.0)))) + _562) * 4.55000019073486328125;
    float _577 = (((_555 - _565) * (isnan(1.0) ? _3843 : (isnan(_3843) ? 1.0 : min(_3843, 1.0)))) + _565) * 4.55000019073486328125;
    vec4 _596 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _295) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _296) + cbTextureTilingScale._m0[14u].w));
    vec4 _615 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _295) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _296) + cbTextureTilingScale._m0[20u].w));
    vec4 _640 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _295) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _296) + cbTextureTilingScale._m0[4u].w));
    vec4 _657 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _659 = _657.x;
    float _660 = _657.y;
    float _661 = _657.z;
    float _668 = ((_640.x - _659) * _470) + _659;
    float _669 = ((_640.y - _660) * _470) + _660;
    float _670 = ((_640.z - _661) * _470) + _661;
    vec4 _682 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _295) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _296) + cbTextureTilingScale._m0[2u].w));
    float _695 = ((_682.z - _670) * _543) + _670;
    float _698 = ((((_682.x - _668) * _543) + _668) * 2.0) + (-1.0);
    float _699 = ((((_682.y - _669) * _543) + _669) * 2.0) + (-1.0);
    float _700 = dot(vec2(_698, _699), vec2(_698, _699));
    float _3876 = isnan(0.0) ? _700 : (isnan(_700) ? 0.0 : max(_700, 0.0));
    float _705 = sqrt(1.0 - (isnan(1.0) ? _3876 : (isnan(_3876) ? 1.0 : min(_3876, 1.0))));
    vec4 _723 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _735 = (_698 + ((((_615.x * 2.0) + (-1.0)) * TEXCOORD_11.x) * cbMtdParam._m0[20u].x)) + (((_723.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _736 = (_699 + ((((_615.y * 2.0) + (-1.0)) * TEXCOORD_11.y) * cbMtdParam._m0[20u].x)) + (((_723.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _739 = fma(_705, _243, fma(_736, _250, _735 * _236));
    float _742 = fma(_705, _244, fma(_736, _251, _735 * _237));
    float _745 = fma(_705, _245, fma(_736, _252, _735 * _238));
    float _749 = inversesqrt(dot(vec3(_739, _742, _745), vec3(_739, _742, _745)));
    vec4 _776 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _295) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _296) + cbTextureTilingScale._m0[11u].w));
    float _778 = _776.x;
    float _779 = 1.0 - _778;
    float _785 = (cbMtdParam._m0[19u].x + dot(vec4(_749 * _739, _749 * _742, _749 * _745, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_778 - _779) * cbMtdParam._m0[24u].w) + _779) * cbMtdParam._m0[21u].z);
    float _3887 = isnan(0.0) ? _785 : (isnan(_785) ? 0.0 : max(_785, 0.0));
    float _786 = isnan(1.0) ? _3887 : (isnan(_3887) ? 1.0 : min(_3887, 1.0));
    float _793 = (_786 * ((_596.x * cbMtdParam._m0[18u].x) - _573)) + _573;
    float _794 = (_786 * ((_596.y * cbMtdParam._m0[18u].y) - _575)) + _575;
    float _795 = (_786 * ((_596.z * cbMtdParam._m0[18u].z) - _577)) + _577;
    float _800 = (((_615.z - _695) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _695;
    float _804 = ((_723.z - _800) * cbMtdParam._m0[19u].w) + _800;
    vec4 _817 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _295) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _296) + cbTextureTilingScale._m0[15u].w));
    float _824 = (_817.x * 2.0) + (-1.0);
    float _825 = (_817.y * 2.0) + (-1.0);
    float _826 = dot(vec2(_824, _825), vec2(_824, _825));
    float _3898 = isnan(0.0) ? _826 : (isnan(_826) ? 0.0 : max(_826, 0.0));
    float _834 = ((_817.z - _804) * _786) + _804;
    float _844 = ((sqrt(1.0 - (isnan(1.0) ? _3898 : (isnan(_3898) ? 1.0 : min(_3898, 1.0)))) - _705) * _786) + _705;
    float _847 = (((_824 - _735) * _786) + _735) + (cbMtdParam._m0[21u].x * _735);
    float _848 = (((_825 - _736) * _786) + _736) + (cbMtdParam._m0[21u].x * _736);
    float _852 = cbMtdParam._m0[22u].x + _723.w;
    float _855 = fma(_844, _243, fma(_848, _250, _847 * _236));
    float _858 = fma(_844, _244, fma(_848, _251, _847 * _237));
    float _861 = fma(_844, _245, fma(_848, _252, _847 * _238));
    float _865 = inversesqrt(dot(vec3(_855, _858, _861), vec3(_855, _858, _861)));
    float _866 = _865 * _855;
    float _867 = _865 * _858;
    float _868 = _865 * _861;
    float _3909 = isnan(0.0) ? _834 : (isnan(_834) ? 0.0 : max(_834, 0.0));
    float _869 = isnan(1.0) ? _3909 : (isnan(_3909) ? 1.0 : min(_3909, 1.0));
    float _3920 = isnan(0.0) ? _852 : (isnan(_852) ? 0.0 : max(_852, 0.0));
    float _3931 = isnan(0.0) ? _793 : (isnan(_793) ? 0.0 : max(_793, 0.0));
    float _3942 = isnan(0.0) ? _794 : (isnan(_794) ? 0.0 : max(_794, 0.0));
    float _3953 = isnan(0.0) ? _795 : (isnan(_795) ? 0.0 : max(_795, 0.0));
    float _887 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _928 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _938 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _928);
    float _939 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _928);
    float _940 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _928);
    float _944 = inversesqrt(dot(vec3(_938, _939, _940), vec3(_938, _939, _940)));
    float _945 = _938 * _944;
    float _946 = _939 * _944;
    float _947 = _940 * _944;
    vec4 _952 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _954 = _952.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1108 = sqrt(((_938 * _938) + (_939 * _939)) + (_940 * _940));
        float _1114 = (cbMatDynParam._m0[5u].x * _1108) + cbMatDynParam._m0[5u].y;
        float _3964 = isnan(0.0) ? _1114 : (isnan(_1114) ? 0.0 : max(_1114, 0.0));
        float _1115 = isnan(1.0) ? _3964 : (isnan(_3964) ? 1.0 : min(_3964, 1.0));
        float _1119 = (cbMatDynParam._m0[5u].z * _1108) + cbMatDynParam._m0[5u].w;
        float _3975 = isnan(0.0) ? _1119 : (isnan(_1119) ? 0.0 : max(_1119, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3975 : (isnan(_3975) ? 1.0 : min(_3975, 1.0))) - _1115)) + _1115) < ((_954 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _965 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _966 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _984 = fma(_868, cbSceneParam._m0[5u].z, fma(_867, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _866));
    float _987 = fma(_868, cbSceneParam._m0[6u].z, fma(_867, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _866));
    float _990 = fma(_868, cbSceneParam._m0[7u].z, fma(_867, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _866));
    uint _1003 = _276 + 9u;
    uint _1004 = _1003 + uint(cbMatDynParam._m0[0u].w);
    float _1010 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3931 : (isnan(_3931) ? 1.0 : min(_3931, 1.0)))) * cbInstanceData._m0[_1004].x;
    float _1011 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3942 : (isnan(_3942) ? 1.0 : min(_3942, 1.0)))) * cbInstanceData._m0[_1004].y;
    float _1012 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3953 : (isnan(_3953) ? 1.0 : min(_3953, 1.0)))) * cbInstanceData._m0[_1004].z;
    float _3986 = isnan(0.0) ? _1010 : (isnan(_1010) ? 0.0 : max(_1010, 0.0));
    float _1013 = isnan(1.0) ? _3986 : (isnan(_3986) ? 1.0 : min(_3986, 1.0));
    float _3997 = isnan(0.0) ? _1011 : (isnan(_1011) ? 0.0 : max(_1011, 0.0));
    float _1014 = isnan(1.0) ? _3997 : (isnan(_3997) ? 1.0 : min(_3997, 1.0));
    float _4008 = isnan(0.0) ? _1012 : (isnan(_1012) ? 0.0 : max(_1012, 0.0));
    float _1015 = isnan(1.0) ? _4008 : (isnan(_4008) ? 1.0 : min(_4008, 1.0));
    vec4 _1024 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _965, cbSceneParam._m0[86u].y * _966));
    float _1028 = ((isnan(1.0) ? _3920 : (isnan(_3920) ? 1.0 : min(_3920, 1.0))) * TEXCOORD_5.w) * _1024.x;
    float _1029 = dot(vec3(_866, _867, _868), vec3(_945, _946, _947));
    float _1032 = _1029 * 2.0;
    float _1036 = (_1032 * _866) - _945;
    float _1037 = (_1032 * _867) - _946;
    float _1038 = (_1032 * _868) - _947;
    float _1042 = abs(dot(vec3(_945, _946, _947), vec3(_866, _867, _868)));
    float _4019 = isnan(0.0) ? _1042 : (isnan(_1042) ? 0.0 : max(_1042, 0.0));
    float _1044 = sqrt(_869);
    float _1057 = exp2((_1044 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4019 : (isnan(_4019) ? 1.0 : min(_4019, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1044 * 3.0));
    float _1089 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1093 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1097 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1427;
    float _1429;
    float _1430;
    float _1431;
    float _1432;
    float _1433;
    float _1434;
    float _1435;
    float _1436;
    float _1437;
    float _1438;
    float _1439;
    float _1440;
    float _1441;
    float _1442;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1152 = fma(_1097, cbModelParam._m0[26u].z, fma(_1093, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1089));
        float _1156 = fma(_1097, cbModelParam._m0[27u].z, fma(_1093, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1089));
        float _1160 = fma(_1097, cbModelParam._m0[28u].z, fma(_1093, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1089));
        float _1185 = _1089 + _866;
        float _1186 = _1093 + _867;
        float _1187 = _1097 + _868;
        float _1197 = fma(_1187, cbModelParam._m0[26u].z, fma(_1186, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1185)) - _1152;
        float _1198 = fma(_1187, cbModelParam._m0[27u].z, fma(_1186, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1185)) - _1156;
        float _1199 = fma(_1187, cbModelParam._m0[28u].z, fma(_1186, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1185)) - _1160;
        float _1203 = inversesqrt(dot(vec3(_1197, _1198, _1199), vec3(_1197, _1198, _1199)));
        float _1216 = ((_1203 * _1197) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1152 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1217 = ((_1203 * _1198) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1156 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1218 = ((_1203 * _1199) / cbModelParam._m0[34u].z) + ((((((_1160 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1221 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1216, _1217, _1218), 0.0);
        vec4 _1228 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1216, _1217, _1218), 0.0);
        vec4 _1235 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1216, _1217, _1218), 0.0);
        vec4 _1242 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1216, _1217, _1218), 0.0);
        float _1255 = exp2((_1221.w + (-0.5)) * 20.0) * 2.0;
        float _1256 = _1255 * (_1221.x + (-0.5));
        float _1257 = _1255 * (_1221.y + (-0.5));
        float _1258 = _1255 * (_1221.z + (-0.5));
        float _1265 = exp2((_1228.w + (-0.5)) * 20.0) * 2.0;
        float _1266 = _1265 * (_1228.x + (-0.5));
        float _1267 = _1265 * (_1228.y + (-0.5));
        float _1268 = _1265 * (_1228.z + (-0.5));
        float _1275 = exp2((_1235.w + (-0.5)) * 20.0) * 2.0;
        float _1276 = _1275 * (_1235.x + (-0.5));
        float _1277 = _1275 * (_1235.y + (-0.5));
        float _1278 = _1275 * (_1235.z + (-0.5));
        float _1285 = exp2((_1242.w + (-0.5)) * 20.0) * 2.0;
        float _1286 = _1285 * (_1242.x + (-0.5));
        float _1287 = _1285 * (_1242.y + (-0.5));
        float _1288 = _1285 * (_1242.z + (-0.5));
        float _1289 = isnan(0.0) ? _1286 : (isnan(_1286) ? 0.0 : max(_1286, 0.0));
        float _1290 = isnan(0.0) ? _1287 : (isnan(_1287) ? 0.0 : max(_1287, 0.0));
        float _1291 = isnan(0.0) ? _1288 : (isnan(_1288) ? 0.0 : max(_1288, 0.0));
        float _1292 = _1256 * 0.5;
        float _1293 = _1266 * 0.5;
        float _1294 = _1276 * 0.5;
        float _1295 = dot(vec3(_1292, _1293, _1294), vec3(_1292, _1293, _1294));
        float _1300 = (_1295 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1295);
        float _1309 = (dot(vec3(_866, _867, _868), vec3(_1300 * _1292, _1300 * _1293, _1300 * _1294)) + 1.0) * 0.5;
        float _4045 = isnan(0.0) ? _1309 : (isnan(_1309) ? 0.0 : max(_1309, 0.0));
        float _1319 = sqrt(((_1293 * _1293) + (_1292 * _1292)) + (_1294 * _1294)) / (_1289 + 9.9999997473787516355514526367188e-06);
        float _4056 = isnan(0.0) ? _1319 : (isnan(_1319) ? 0.0 : max(_1319, 0.0));
        float _1320 = isnan(1.0) ? _4056 : (isnan(_4056) ? 1.0 : min(_4056, 1.0));
        float _1321 = _1320 * 2.0;
        float _1325 = (1.0 - _1320) / (_1320 + 1.0);
        float _4067 = isnan(0.0) ? _1325 : (isnan(_1325) ? 0.0 : max(_1325, 0.0));
        float _1326 = isnan(1.0) ? _4067 : (isnan(_4067) ? 1.0 : min(_4067, 1.0));
        float _1335 = ((((1.0 - _1326) * (_1321 + 2.0)) * exp2(log2(isnan(1.0) ? _4045 : (isnan(_4045) ? 1.0 : min(_4045, 1.0))) * (_1321 + 1.0))) + _1326) * _1289;
        float _1336 = _1257 * 0.5;
        float _1337 = _1267 * 0.5;
        float _1338 = _1277 * 0.5;
        float _1339 = dot(vec3(_1336, _1337, _1338), vec3(_1336, _1337, _1338));
        float _1344 = (_1339 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1339);
        float _1352 = (dot(vec3(_866, _867, _868), vec3(_1344 * _1336, _1344 * _1337, _1344 * _1338)) + 1.0) * 0.5;
        float _4078 = isnan(0.0) ? _1352 : (isnan(_1352) ? 0.0 : max(_1352, 0.0));
        float _1361 = sqrt(((_1337 * _1337) + (_1336 * _1336)) + (_1338 * _1338)) / (_1290 + 9.9999997473787516355514526367188e-06);
        float _4089 = isnan(0.0) ? _1361 : (isnan(_1361) ? 0.0 : max(_1361, 0.0));
        float _1362 = isnan(1.0) ? _4089 : (isnan(_4089) ? 1.0 : min(_4089, 1.0));
        float _1363 = _1362 * 2.0;
        float _1367 = (1.0 - _1362) / (_1362 + 1.0);
        float _4100 = isnan(0.0) ? _1367 : (isnan(_1367) ? 0.0 : max(_1367, 0.0));
        float _1368 = isnan(1.0) ? _4100 : (isnan(_4100) ? 1.0 : min(_4100, 1.0));
        float _1377 = ((((1.0 - _1368) * (_1363 + 2.0)) * exp2(log2(isnan(1.0) ? _4078 : (isnan(_4078) ? 1.0 : min(_4078, 1.0))) * (_1363 + 1.0))) + _1368) * _1290;
        float _1378 = _1258 * 0.5;
        float _1379 = _1268 * 0.5;
        float _1380 = _1278 * 0.5;
        float _1381 = dot(vec3(_1378, _1379, _1380), vec3(_1378, _1379, _1380));
        float _1386 = (_1381 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1381);
        float _1394 = (dot(vec3(_866, _867, _868), vec3(_1386 * _1378, _1386 * _1379, _1386 * _1380)) + 1.0) * 0.5;
        float _4111 = isnan(0.0) ? _1394 : (isnan(_1394) ? 0.0 : max(_1394, 0.0));
        float _1403 = sqrt(((_1379 * _1379) + (_1378 * _1378)) + (_1380 * _1380)) / (_1291 + 9.9999997473787516355514526367188e-06);
        float _4122 = isnan(0.0) ? _1403 : (isnan(_1403) ? 0.0 : max(_1403, 0.0));
        float _1404 = isnan(1.0) ? _4122 : (isnan(_4122) ? 1.0 : min(_4122, 1.0));
        float _1405 = _1404 * 2.0;
        float _1409 = (1.0 - _1404) / (_1404 + 1.0);
        float _4133 = isnan(0.0) ? _1409 : (isnan(_1409) ? 0.0 : max(_1409, 0.0));
        float _1410 = isnan(1.0) ? _4133 : (isnan(_4133) ? 1.0 : min(_4133, 1.0));
        float _1419 = ((((1.0 - _1410) * (_1405 + 2.0)) * exp2(log2(isnan(1.0) ? _4111 : (isnan(_4111) ? 1.0 : min(_4111, 1.0))) * (_1405 + 1.0))) + _1410) * _1291;
        _1427 = _1258;
        _1429 = _1257;
        _1430 = _1256;
        _1431 = _1268;
        _1432 = _1267;
        _1433 = _1266;
        _1434 = _1278;
        _1435 = _1277;
        _1436 = _1276;
        _1437 = _1291;
        _1438 = _1290;
        _1439 = _1289;
        _1440 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1335 : (isnan(_1335) ? 0.0 : max(_1335, 0.0)));
        _1441 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1377 : (isnan(_1377) ? 0.0 : max(_1377, 0.0)));
        _1442 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1419 : (isnan(_1419) ? 0.0 : max(_1419, 0.0)));
    }
    else
    {
        _1427 = _1428;
        _1429 = _1428;
        _1430 = _1428;
        _1431 = _1428;
        _1432 = _1428;
        _1433 = _1428;
        _1434 = _1428;
        _1435 = _1428;
        _1436 = _1428;
        _1437 = _1428;
        _1438 = _1428;
        _1439 = _1428;
        _1440 = 0.0;
        _1441 = 0.0;
        _1442 = 0.0;
    }
    float _1738;
    float _1739;
    float _1740;
    float _1741;
    float _1742;
    float _1743;
    float _1744;
    float _1745;
    float _1746;
    float _1747;
    float _1748;
    float _1749;
    float _1750;
    float _1751;
    float _1752;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1469 = fma(_1097, cbModelParam._m0[30u].z, fma(_1093, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1089));
        float _1473 = fma(_1097, cbModelParam._m0[31u].z, fma(_1093, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1089));
        float _1477 = fma(_1097, cbModelParam._m0[32u].z, fma(_1093, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1089));
        float _1500 = _1089 + _866;
        float _1501 = _1093 + _867;
        float _1502 = _1097 + _868;
        float _1512 = fma(_1502, cbModelParam._m0[30u].z, fma(_1501, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1500)) - _1469;
        float _1513 = fma(_1502, cbModelParam._m0[31u].z, fma(_1501, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1500)) - _1473;
        float _1514 = fma(_1502, cbModelParam._m0[32u].z, fma(_1501, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1500)) - _1477;
        float _1518 = inversesqrt(dot(vec3(_1512, _1513, _1514), vec3(_1512, _1513, _1514)));
        float _1531 = ((_1518 * _1512) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1469 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1532 = ((_1518 * _1513) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1473 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1533 = ((_1518 * _1514) / cbModelParam._m0[35u].z) + ((((((_1477 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1535 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1531, _1532, _1533), 0.0);
        vec4 _1542 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1531, _1532, _1533), 0.0);
        vec4 _1549 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1531, _1532, _1533), 0.0);
        vec4 _1556 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1531, _1532, _1533), 0.0);
        float _1568 = exp2((_1535.w + (-0.5)) * 20.0) * 2.0;
        float _1569 = _1568 * (_1535.x + (-0.5));
        float _1570 = _1568 * (_1535.y + (-0.5));
        float _1571 = _1568 * (_1535.z + (-0.5));
        float _1578 = exp2((_1542.w + (-0.5)) * 20.0) * 2.0;
        float _1579 = _1578 * (_1542.x + (-0.5));
        float _1580 = _1578 * (_1542.y + (-0.5));
        float _1581 = _1578 * (_1542.z + (-0.5));
        float _1588 = exp2((_1549.w + (-0.5)) * 20.0) * 2.0;
        float _1589 = _1588 * (_1549.x + (-0.5));
        float _1590 = _1588 * (_1549.y + (-0.5));
        float _1591 = _1588 * (_1549.z + (-0.5));
        float _1598 = exp2((_1556.w + (-0.5)) * 20.0) * 2.0;
        float _1599 = _1598 * (_1556.x + (-0.5));
        float _1600 = _1598 * (_1556.y + (-0.5));
        float _1601 = _1598 * (_1556.z + (-0.5));
        float _1602 = isnan(0.0) ? _1599 : (isnan(_1599) ? 0.0 : max(_1599, 0.0));
        float _1603 = isnan(0.0) ? _1600 : (isnan(_1600) ? 0.0 : max(_1600, 0.0));
        float _1604 = isnan(0.0) ? _1601 : (isnan(_1601) ? 0.0 : max(_1601, 0.0));
        float _1605 = _1569 * 0.5;
        float _1606 = _1579 * 0.5;
        float _1607 = _1589 * 0.5;
        float _1608 = dot(vec3(_1605, _1606, _1607), vec3(_1605, _1606, _1607));
        float _1613 = (_1608 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1608);
        float _1621 = (dot(vec3(_866, _867, _868), vec3(_1613 * _1605, _1613 * _1606, _1613 * _1607)) + 1.0) * 0.5;
        float _4174 = isnan(0.0) ? _1621 : (isnan(_1621) ? 0.0 : max(_1621, 0.0));
        float _1630 = sqrt(((_1606 * _1606) + (_1605 * _1605)) + (_1607 * _1607)) / (_1602 + 9.9999997473787516355514526367188e-06);
        float _4185 = isnan(0.0) ? _1630 : (isnan(_1630) ? 0.0 : max(_1630, 0.0));
        float _1631 = isnan(1.0) ? _4185 : (isnan(_4185) ? 1.0 : min(_4185, 1.0));
        float _1632 = _1631 * 2.0;
        float _1636 = (1.0 - _1631) / (_1631 + 1.0);
        float _4196 = isnan(0.0) ? _1636 : (isnan(_1636) ? 0.0 : max(_1636, 0.0));
        float _1637 = isnan(1.0) ? _4196 : (isnan(_4196) ? 1.0 : min(_4196, 1.0));
        float _1646 = ((((1.0 - _1637) * (_1632 + 2.0)) * exp2(log2(isnan(1.0) ? _4174 : (isnan(_4174) ? 1.0 : min(_4174, 1.0))) * (_1632 + 1.0))) + _1637) * _1602;
        float _1647 = _1570 * 0.5;
        float _1648 = _1580 * 0.5;
        float _1649 = _1590 * 0.5;
        float _1650 = dot(vec3(_1647, _1648, _1649), vec3(_1647, _1648, _1649));
        float _1655 = (_1650 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1650);
        float _1663 = (dot(vec3(_866, _867, _868), vec3(_1655 * _1647, _1655 * _1648, _1655 * _1649)) + 1.0) * 0.5;
        float _4207 = isnan(0.0) ? _1663 : (isnan(_1663) ? 0.0 : max(_1663, 0.0));
        float _1672 = sqrt(((_1648 * _1648) + (_1647 * _1647)) + (_1649 * _1649)) / (_1603 + 9.9999997473787516355514526367188e-06);
        float _4218 = isnan(0.0) ? _1672 : (isnan(_1672) ? 0.0 : max(_1672, 0.0));
        float _1673 = isnan(1.0) ? _4218 : (isnan(_4218) ? 1.0 : min(_4218, 1.0));
        float _1674 = _1673 * 2.0;
        float _1678 = (1.0 - _1673) / (_1673 + 1.0);
        float _4229 = isnan(0.0) ? _1678 : (isnan(_1678) ? 0.0 : max(_1678, 0.0));
        float _1679 = isnan(1.0) ? _4229 : (isnan(_4229) ? 1.0 : min(_4229, 1.0));
        float _1688 = ((((1.0 - _1679) * (_1674 + 2.0)) * exp2(log2(isnan(1.0) ? _4207 : (isnan(_4207) ? 1.0 : min(_4207, 1.0))) * (_1674 + 1.0))) + _1679) * _1603;
        float _1689 = _1571 * 0.5;
        float _1690 = _1581 * 0.5;
        float _1691 = _1591 * 0.5;
        float _1692 = dot(vec3(_1689, _1690, _1691), vec3(_1689, _1690, _1691));
        float _1697 = (_1692 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1692);
        float _1705 = (dot(vec3(_866, _867, _868), vec3(_1697 * _1689, _1697 * _1690, _1697 * _1691)) + 1.0) * 0.5;
        float _4240 = isnan(0.0) ? _1705 : (isnan(_1705) ? 0.0 : max(_1705, 0.0));
        float _1714 = sqrt(((_1690 * _1690) + (_1689 * _1689)) + (_1691 * _1691)) / (_1604 + 9.9999997473787516355514526367188e-06);
        float _4251 = isnan(0.0) ? _1714 : (isnan(_1714) ? 0.0 : max(_1714, 0.0));
        float _1715 = isnan(1.0) ? _4251 : (isnan(_4251) ? 1.0 : min(_4251, 1.0));
        float _1716 = _1715 * 2.0;
        float _1720 = (1.0 - _1715) / (_1715 + 1.0);
        float _4262 = isnan(0.0) ? _1720 : (isnan(_1720) ? 0.0 : max(_1720, 0.0));
        float _1721 = isnan(1.0) ? _4262 : (isnan(_4262) ? 1.0 : min(_4262, 1.0));
        float _1730 = ((((1.0 - _1721) * (_1716 + 2.0)) * exp2(log2(isnan(1.0) ? _4240 : (isnan(_4240) ? 1.0 : min(_4240, 1.0))) * (_1716 + 1.0))) + _1721) * _1604;
        _1738 = _1571;
        _1739 = _1570;
        _1740 = _1569;
        _1741 = _1581;
        _1742 = _1580;
        _1743 = _1579;
        _1744 = _1591;
        _1745 = _1590;
        _1746 = _1589;
        _1747 = _1604;
        _1748 = _1603;
        _1749 = _1602;
        _1750 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1646 : (isnan(_1646) ? 0.0 : max(_1646, 0.0)));
        _1751 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1688 : (isnan(_1688) ? 0.0 : max(_1688, 0.0)));
        _1752 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1730 : (isnan(_1730) ? 0.0 : max(_1730, 0.0)));
    }
    else
    {
        _1738 = _1428;
        _1739 = _1428;
        _1740 = _1428;
        _1741 = _1428;
        _1742 = _1428;
        _1743 = _1428;
        _1744 = _1428;
        _1745 = _1428;
        _1746 = _1428;
        _1747 = _1428;
        _1748 = _1428;
        _1749 = _1428;
        _1750 = 0.0;
        _1751 = 0.0;
        _1752 = 0.0;
    }
    float _1762 = (cbModelParam._m0[1u].x * (_1750 - _1440)) + _1440;
    float _1763 = (cbModelParam._m0[1u].x * (_1751 - _1441)) + _1441;
    float _1764 = (cbModelParam._m0[1u].x * (_1752 - _1442)) + _1442;
    float _1785 = fma(_1764, cbSceneParam._m0[89u].z, fma(_1763, cbSceneParam._m0[89u].y, _1762 * cbSceneParam._m0[89u].x));
    float _1788 = fma(_1764, cbSceneParam._m0[90u].z, fma(_1763, cbSceneParam._m0[90u].y, _1762 * cbSceneParam._m0[90u].x));
    float _1791 = fma(_1764, cbSceneParam._m0[91u].z, fma(_1763, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1762));
    float _1806 = _1036 * 0.5;
    float _1807 = _1037 * 0.5;
    float _1808 = _1038 * 0.5;
    float _1809 = dot(vec4(_1806, _1807, _1808, 1.0), vec4(_1740, _1743, _1746, _1749));
    float _1812 = dot(vec4(_1806, _1807, _1808, 1.0), vec4(_1739, _1742, _1745, _1748));
    float _1815 = dot(vec4(_1806, _1807, _1808, 1.0), vec4(_1738, _1741, _1744, _1747));
    float _1849;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1822 = dot(vec4(_1806, _1807, _1808, 1.0), vec4(_1427, _1431, _1434, _1437));
        float _1826 = dot(vec4(_1806, _1807, _1808, 1.0), vec4(_1429, _1432, _1435, _1438));
        float _1830 = dot(vec4(_1806, _1807, _1808, 1.0), vec4(_1430, _1433, _1436, _1439));
        float _1837 = dot(vec4(cbModelParam._m0[39u]), vec4(_1806, _1807, _1808, 1.0));
        _1849 = dot(vec3(isnan(0.0) ? _1830 : (isnan(_1830) ? 0.0 : max(_1830, 0.0)), isnan(0.0) ? _1826 : (isnan(_1826) ? 0.0 : max(_1826, 0.0)), isnan(0.0) ? _1822 : (isnan(_1822) ? 0.0 : max(_1822, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1837) ? 0.0 : (isnan(0.0) ? _1837 : max(0.0, _1837))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1849 = 1.0;
    }
    float _1860;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1851 = dot(vec4(cbModelParam._m0[40u]), vec4(_1806, _1807, _1808, 1.0));
        _1860 = dot(vec3(isnan(0.0) ? _1809 : (isnan(_1809) ? 0.0 : max(_1809, 0.0)), isnan(0.0) ? _1812 : (isnan(_1812) ? 0.0 : max(_1812, 0.0)), isnan(0.0) ? _1815 : (isnan(_1815) ? 0.0 : max(_1815, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1851) ? 0.0 : (isnan(0.0) ? _1851 : max(0.0, _1851))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1860 = 1.0;
    }
    float _1864 = (_1860 * cbModelParam._m0[1u].x) + (_1849 * (1.0 - cbModelParam._m0[1u].x));
    float _1874 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _869);
    float _1875 = isnan(_1874) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1874 : min(cbModelParam._m0[25u].z, _1874));
    float _1955;
    float _1957;
    float _1959;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1922 = fma(_1097, cbModelParam._m0[13u].z, fma(_1093, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1089)) + cbModelParam._m0[13u].w;
        float _1926 = fma(_1097, cbModelParam._m0[14u].z, fma(_1093, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1089)) + cbModelParam._m0[14u].w;
        float _1930 = fma(_1097, cbModelParam._m0[15u].z, fma(_1093, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1089)) + cbModelParam._m0[15u].w;
        float _1933 = fma(_1038, cbModelParam._m0[13u].z, fma(_1037, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1036));
        float _1936 = fma(_1038, cbModelParam._m0[14u].z, fma(_1037, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1036));
        float _1939 = fma(_1038, cbModelParam._m0[15u].z, fma(_1037, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1036));
        float _1967;
        if (_1933 > 0.0)
        {
            _1967 = abs((1.0 - _1922) / _1933);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1933 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1922 + 1.0) / _1933);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1967 = frontier_phi_17_15_ladder;
        }
        float _2188;
        if (_1936 > 0.0)
        {
            _2188 = abs((1.0 - _1926) / _1936);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1936 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1926 + 1.0) / _1936);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2188 = frontier_phi_26_22_ladder;
        }
        float _2434;
        if (_1939 > 0.0)
        {
            _2434 = abs((1.0 - _1930) / _1939);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1939 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1930 + 1.0) / _1939);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2434 = frontier_phi_38_33_ladder;
        }
        float _2436 = isnan(_2188) ? _1967 : (isnan(_1967) ? _2188 : min(_1967, _2188));
        float _2437 = isnan(_2434) ? _2436 : (isnan(_2436) ? _2434 : min(_2436, _2434));
        float _2441 = (_2437 * _1933) + _1922;
        float _2442 = (_2437 * _1936) + _1926;
        float _2443 = (_2437 * _1939) + _1930;
        float _2444 = _2437 * 9.9999997473787516355514526367188e-05;
        float _2446 = (-1.0) - _2444;
        float _2448 = _2444 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2443 > _2448) || ((_2443 < _2446) || ((_2442 > _2448) || ((_2442 < _2446) || ((_2441 < _2446) || (_2441 > _2448))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2567 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2443, cbModelParam._m0[9u].z, fma(_2442, cbModelParam._m0[9u].y, _2441 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2443, cbModelParam._m0[10u].z, fma(_2442, cbModelParam._m0[10u].y, _2441 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2443, cbModelParam._m0[11u].z, fma(_2442, cbModelParam._m0[11u].y, _2441 * cbModelParam._m0[11u].x))), _1875);
            frontier_phi_16_38_ladder = _2567.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2567.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2567.x * cbModelParam._m0[1u].y;
        }
        _1955 = frontier_phi_16_38_ladder_2;
        _1957 = frontier_phi_16_38_ladder_1;
        _1959 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1943 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1036, _1037, _1038), _1875);
        _1955 = _1943.x * cbModelParam._m0[1u].y;
        _1957 = _1943.y * cbModelParam._m0[1u].y;
        _1959 = _1943.z * cbModelParam._m0[1u].y;
    }
    float _1963 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _869);
    float _1964 = isnan(_1963) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1963 : min(cbModelParam._m0[25u].w, _1963));
    float _2053;
    float _2055;
    float _2057;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2017 = fma(_1097, cbModelParam._m0[21u].z, fma(_1093, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1089)) + cbModelParam._m0[21u].w;
        float _2021 = fma(_1097, cbModelParam._m0[22u].z, fma(_1093, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1089)) + cbModelParam._m0[22u].w;
        float _2025 = fma(_1097, cbModelParam._m0[23u].z, fma(_1093, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1089)) + cbModelParam._m0[23u].w;
        float _2028 = fma(_1038, cbModelParam._m0[21u].z, fma(_1037, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1036));
        float _2031 = fma(_1038, cbModelParam._m0[22u].z, fma(_1037, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1036));
        float _2034 = fma(_1038, cbModelParam._m0[23u].z, fma(_1037, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1036));
        float _2193;
        if (_2028 > 0.0)
        {
            _2193 = abs((1.0 - _2017) / _2028);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_2028 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_2017 + 1.0) / _2028);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2193 = frontier_phi_28_24_ladder;
        }
        float _2461;
        if (_2031 > 0.0)
        {
            _2461 = abs((1.0 - _2021) / _2031);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_2031 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_2021 + 1.0) / _2031);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2461 = frontier_phi_40_35_ladder;
        }
        float _2666;
        if (_2034 > 0.0)
        {
            _2666 = abs((1.0 - _2025) / _2034);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_2034 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_2025 + 1.0) / _2034);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2666 = frontier_phi_49_46_ladder;
        }
        float _2668 = isnan(_2461) ? _2193 : (isnan(_2193) ? _2461 : min(_2193, _2461));
        float _2669 = isnan(_2666) ? _2668 : (isnan(_2668) ? _2666 : min(_2668, _2666));
        float _2673 = (_2669 * _2028) + _2017;
        float _2674 = (_2669 * _2031) + _2021;
        float _2675 = (_2669 * _2034) + _2025;
        float _2676 = _2669 * 9.9999997473787516355514526367188e-05;
        float _2677 = (-1.0) - _2676;
        float _2679 = _2676 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2675 > _2679) || ((_2675 < _2677) || ((_2674 > _2679) || ((_2674 < _2677) || ((_2673 < _2677) || (_2673 > _2679))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2874 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2675, cbModelParam._m0[17u].z, fma(_2674, cbModelParam._m0[17u].y, _2673 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2675, cbModelParam._m0[18u].z, fma(_2674, cbModelParam._m0[18u].y, _2673 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2675, cbModelParam._m0[19u].z, fma(_2674, cbModelParam._m0[19u].y, _2673 * cbModelParam._m0[19u].x))), _1964);
            frontier_phi_25_49_ladder = _2874.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2874.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2874.x * cbModelParam._m0[1u].z;
        }
        _2053 = frontier_phi_25_49_ladder_2;
        _2055 = frontier_phi_25_49_ladder_1;
        _2057 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _2037 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1036, _1037, _1038), _1964);
        _2053 = _2037.x * cbModelParam._m0[1u].z;
        _2055 = _2037.y * cbModelParam._m0[1u].z;
        _2057 = _2037.z * cbModelParam._m0[1u].z;
    }
    float _2069 = ((((1.0 - _1057) * ((_1044 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_1057 * _1044)) * _1028;
    float _2070 = _2069 * ((cbModelParam._m0[1u].w * (_2053 - _1955)) + _1955);
    float _2071 = _2069 * ((cbModelParam._m0[1u].w * (_2055 - _1957)) + _1957);
    float _2072 = _2069 * ((cbModelParam._m0[1u].w * (_2057 - _1959)) + _1959);
    float _2075 = fma(_2072, cbSceneParam._m0[89u].z, fma(_2071, cbSceneParam._m0[89u].y, _2070 * cbSceneParam._m0[89u].x));
    float _2078 = fma(_2072, cbSceneParam._m0[90u].z, fma(_2071, cbSceneParam._m0[90u].y, _2070 * cbSceneParam._m0[90u].x));
    float _2081 = fma(_2072, cbSceneParam._m0[91u].z, fma(_2071, cbSceneParam._m0[91u].y, _2070 * cbSceneParam._m0[91u].x));
    vec4 _2089 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_965, _966));
    float _2091 = _2089.w;
    float _2103 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _2091);
    float _2104 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _2091);
    float _2105 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _2091);
    uvec4 _2109 = floatBitsToUint(cbInstanceData._m0[_276 + 5u]);
    uint _2111 = _2109.x * 14u;
    uint _2112 = _2111 + 13u;
    float _2119 = _1028 + (-1.0);
    float _2124 = (cbLight._m0[_2112].x * _2119) + 1.0;
    float _2125 = (cbLight._m0[_2112].y * _2119) + 1.0;
    float _2126 = (cbLight._m0[_2112].z * _2119) + 1.0;
    float _2127 = (cbLight._m0[_2112].w * _2119) + 1.0;
    uint _2128 = _2111 + 5u;
    float _2134 = isnan(1.0) ? _2125 : (isnan(_2125) ? 1.0 : min(_2125, 1.0));
    uint _2138 = _2111 + 4u;
    float _2147 = isnan(1.0) ? _2124 : (isnan(_2124) ? 1.0 : min(_2124, 1.0));
    uint _2151 = _2111 | 1u;
    float _2162 = dot(vec3(cbLight._m0[_2111].xyz), vec3(_866, _867, _868));
    float _2165 = dot(vec3(cbLight._m0[_2151].xyz), vec3(_866, _867, _868));
    float _4398 = isnan(0.0) ? _2162 : (isnan(_2162) ? 0.0 : max(_2162, 0.0));
    float _4409 = isnan(0.0) ? _2165 : (isnan(_2165) ? 0.0 : max(_2165, 0.0));
    float _2170 = (isnan(1.0) ? _4398 : (isnan(_4398) ? 1.0 : min(_4398, 1.0))) * 0.3183098733425140380859375;
    float _2172 = (isnan(1.0) ? _4409 : (isnan(_4409) ? 1.0 : min(_4409, 1.0))) * 0.3183098733425140380859375;
    float _2179 = ((cbLight._m0[_2128].x * _2134) * _2172) + (((cbLight._m0[_2138].x * _2103) * _2147) * _2170);
    float _2180 = ((_2134 * cbLight._m0[_2128].y) * _2172) + (((cbLight._m0[_2138].y * _2104) * _2147) * _2170);
    float _2181 = ((_2134 * cbLight._m0[_2128].z) * _2172) + (((cbLight._m0[_2138].z * _2105) * _2147) * _2170);
    uvec4 _2185 = floatBitsToUint(cbLight._m0[_2111 + 12u]);
    bool _2187 = _2185.x == 0u;
    float _2198;
    float _2200;
    float _2202;
    if (_2187)
    {
        _2198 = _2179;
        _2200 = _2180;
        _2202 = _2181;
    }
    else
    {
        uint _2206 = _2111 + 6u;
        float _2222 = (dot(vec3(cbLight._m0[_2111 + 2u].xyz), vec3(_866, _867, _868)) * 0.5) + 0.5;
        float _2223 = _2222 * _2222;
        float _4420 = isnan(0.0) ? _2223 : (isnan(_2223) ? 0.0 : max(_2223, 0.0));
        float _2224 = isnan(1.0) ? _4420 : (isnan(_4420) ? 1.0 : min(_4420, 1.0));
        float _2225 = isnan(1.0) ? _2126 : (isnan(_2126) ? 1.0 : min(_2126, 1.0));
        _2198 = (((cbLight._m0[_2206].x * 0.3183098733425140380859375) * _2224) * _2225) + _2179;
        _2200 = (((cbLight._m0[_2206].y * 0.3183098733425140380859375) * _2224) * _2225) + _2180;
        _2202 = (((cbLight._m0[_2206].z * 0.3183098733425140380859375) * _2224) * _2225) + _2181;
    }
    bool _2205 = _2185.y == 0u;
    float _2243;
    float _2245;
    float _2247;
    if (_2205)
    {
        _2243 = _2198;
        _2245 = _2200;
        _2247 = _2202;
    }
    else
    {
        uint _2405 = _2111 + 7u;
        float _2421 = (dot(vec3(cbLight._m0[_2111 + 3u].xyz), vec3(_866, _867, _868)) * 0.5) + 0.5;
        float _2422 = _2421 * _2421;
        float _4436 = isnan(0.0) ? _2422 : (isnan(_2422) ? 0.0 : max(_2422, 0.0));
        float _2423 = isnan(1.0) ? _4436 : (isnan(_4436) ? 1.0 : min(_4436, 1.0));
        float _2424 = isnan(1.0) ? _2127 : (isnan(_2127) ? 1.0 : min(_2127, 1.0));
        _2243 = (((cbLight._m0[_2405].x * 0.3183098733425140380859375) * _2423) * _2424) + _2198;
        _2245 = (((cbLight._m0[_2405].y * 0.3183098733425140380859375) * _2423) * _2424) + _2200;
        _2247 = (((cbLight._m0[_2405].z * 0.3183098733425140380859375) * _2423) * _2424) + _2202;
    }
    uint _2250 = _2111 + 8u;
    float _2263 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2111].w)) * _869) * 0.949999988079071044921875);
    float _2264 = _2263 * _2263;
    float _2265 = cbLight._m0[_2111].x + _945;
    float _2266 = cbLight._m0[_2111].y + _946;
    float _2267 = cbLight._m0[_2111].z + _947;
    float _2271 = inversesqrt(dot(vec3(_2265, _2266, _2267), vec3(_2265, _2266, _2267)));
    float _2272 = _2271 * _2265;
    float _2273 = _2271 * _2266;
    float _2274 = _2271 * _2267;
    float _2275 = dot(vec3(_866, _867, _868), vec3(cbLight._m0[_2111].xyz));
    float _4452 = isnan(0.0) ? _2275 : (isnan(_2275) ? 0.0 : max(_2275, 0.0));
    float _2278 = isnan(1.0) ? _4452 : (isnan(_4452) ? 1.0 : min(_4452, 1.0));
    float _4463 = isnan(0.0) ? _1029 : (isnan(_1029) ? 0.0 : max(_1029, 0.0));
    float _2279 = isnan(1.0) ? _4463 : (isnan(_4463) ? 1.0 : min(_4463, 1.0));
    float _2280 = dot(vec3(_866, _867, _868), vec3(_2272, _2273, _2274));
    float _4474 = isnan(0.0) ? _2280 : (isnan(_2280) ? 0.0 : max(_2280, 0.0));
    float _2283 = isnan(1.0) ? _4474 : (isnan(_4474) ? 1.0 : min(_4474, 1.0));
    float _2284 = dot(vec3(cbLight._m0[_2111].xyz), vec3(_2272, _2273, _2274));
    float _4485 = isnan(0.0) ? _2284 : (isnan(_2284) ? 0.0 : max(_2284, 0.0));
    float _2288 = _2264 * _2264;
    float _2292 = ((_2283 * _2283) * (_2288 + (-1.0))) + 1.0;
    float _2303 = (exp2(log2(1.0 - (isnan(1.0) ? _4485 : (isnan(_4485) ? 1.0 : min(_4485, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2304 = 1.0 - _2264;
    float _2315 = (0.5 / (((_2279 * ((_2278 * _2304) + _2264)) + 9.9999999392252902907785028219223e-09) + (((_2279 * _2304) + _2264) * _2278))) * _2278;
    float _4496 = isnan(0.0) ? _2315 : (isnan(_2315) ? 0.0 : max(_2315, 0.0));
    float _2317 = (isnan(1.0) ? _4496 : (isnan(_4496) ? 1.0 : min(_4496, 1.0))) * (_2288 / ((_2292 * _2292) * 3.141590118408203125));
    uint _2331 = _2111 + 9u;
    float _2342 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2151].w)) * _869) * 0.949999988079071044921875);
    float _2343 = _2342 * _2342;
    float _2344 = cbLight._m0[_2151].x + _945;
    float _2345 = cbLight._m0[_2151].y + _946;
    float _2346 = cbLight._m0[_2151].z + _947;
    float _2350 = inversesqrt(dot(vec3(_2344, _2345, _2346), vec3(_2344, _2345, _2346)));
    float _2351 = _2350 * _2344;
    float _2352 = _2350 * _2345;
    float _2353 = _2350 * _2346;
    float _2354 = dot(vec3(_866, _867, _868), vec3(cbLight._m0[_2151].xyz));
    float _4507 = isnan(0.0) ? _2354 : (isnan(_2354) ? 0.0 : max(_2354, 0.0));
    float _2357 = isnan(1.0) ? _4507 : (isnan(_4507) ? 1.0 : min(_4507, 1.0));
    float _2358 = dot(vec3(_866, _867, _868), vec3(_2351, _2352, _2353));
    float _4518 = isnan(0.0) ? _2358 : (isnan(_2358) ? 0.0 : max(_2358, 0.0));
    float _2361 = isnan(1.0) ? _4518 : (isnan(_4518) ? 1.0 : min(_4518, 1.0));
    float _2362 = dot(vec3(cbLight._m0[_2151].xyz), vec3(_2351, _2352, _2353));
    float _4529 = isnan(0.0) ? _2362 : (isnan(_2362) ? 0.0 : max(_2362, 0.0));
    float _2366 = _2343 * _2343;
    float _2370 = ((_2361 * _2361) * (_2366 + (-1.0))) + 1.0;
    float _2379 = (exp2(log2(1.0 - (isnan(1.0) ? _4529 : (isnan(_4529) ? 1.0 : min(_4529, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2380 = 1.0 - _2343;
    float _2390 = (0.5 / (((_2279 * ((_2357 * _2380) + _2343)) + 9.9999999392252902907785028219223e-09) + (((_2279 * _2380) + _2343) * _2357))) * _2357;
    float _4540 = isnan(0.0) ? _2390 : (isnan(_2390) ? 0.0 : max(_2390, 0.0));
    float _2392 = (isnan(1.0) ? _4540 : (isnan(_4540) ? 1.0 : min(_4540, 1.0))) * (_2366 / ((_2370 * _2370) * 3.141590118408203125));
    float _2402 = (((_2379 * cbLight._m0[_2331].x) * _2392) * _2134) + ((((cbLight._m0[_2250].x * _2103) * _2303) * _2317) * _2147);
    float _2403 = (((_2379 * cbLight._m0[_2331].y) * _2392) * _2134) + ((((cbLight._m0[_2250].y * _2104) * _2303) * _2317) * _2147);
    float _2404 = (((_2379 * cbLight._m0[_2331].z) * _2392) * _2134) + ((((cbLight._m0[_2250].z * _2105) * _2303) * _2317) * _2147);
    float _2466;
    float _2468;
    float _2470;
    if (_2187)
    {
        _2466 = _2402;
        _2468 = _2403;
        _2470 = _2404;
    }
    else
    {
        uint _2472 = _2111 + 2u;
        uint _2476 = _2111 + 10u;
        float _2490 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2472].w)) * _869) * 0.949999988079071044921875);
        float _2491 = _2490 * _2490;
        float _2492 = cbLight._m0[_2472].x + _945;
        float _2493 = cbLight._m0[_2472].y + _946;
        float _2494 = cbLight._m0[_2472].z + _947;
        float _2498 = inversesqrt(dot(vec3(_2492, _2493, _2494), vec3(_2492, _2493, _2494)));
        float _2499 = _2498 * _2492;
        float _2500 = _2498 * _2493;
        float _2501 = _2498 * _2494;
        float _2502 = dot(vec3(_866, _867, _868), vec3(cbLight._m0[_2472].xyz));
        float _4551 = isnan(0.0) ? _2502 : (isnan(_2502) ? 0.0 : max(_2502, 0.0));
        float _2505 = isnan(1.0) ? _4551 : (isnan(_4551) ? 1.0 : min(_4551, 1.0));
        float _2506 = dot(vec3(_866, _867, _868), vec3(_2499, _2500, _2501));
        float _4562 = isnan(0.0) ? _2506 : (isnan(_2506) ? 0.0 : max(_2506, 0.0));
        float _2509 = isnan(1.0) ? _4562 : (isnan(_4562) ? 1.0 : min(_4562, 1.0));
        float _2510 = dot(vec3(cbLight._m0[_2472].xyz), vec3(_2499, _2500, _2501));
        float _4573 = isnan(0.0) ? _2510 : (isnan(_2510) ? 0.0 : max(_2510, 0.0));
        float _2514 = _2491 * _2491;
        float _2518 = ((_2509 * _2509) * (_2514 + (-1.0))) + 1.0;
        float _2527 = (exp2(log2(1.0 - (isnan(1.0) ? _4573 : (isnan(_4573) ? 1.0 : min(_4573, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2528 = 1.0 - _2491;
        float _2538 = (0.5 / (((_2279 * ((_2505 * _2528) + _2491)) + 9.9999999392252902907785028219223e-09) + (((_2279 * _2528) + _2491) * _2505))) * _2505;
        float _4584 = isnan(0.0) ? _2538 : (isnan(_2538) ? 0.0 : max(_2538, 0.0));
        float _2540 = (isnan(1.0) ? _4584 : (isnan(_4584) ? 1.0 : min(_4584, 1.0))) * (_2514 / ((_2518 * _2518) * 3.141590118408203125));
        float _2541 = isnan(1.0) ? _2126 : (isnan(_2126) ? 1.0 : min(_2126, 1.0));
        _2466 = (((_2527 * cbLight._m0[_2476].x) * _2540) * _2541) + _2402;
        _2468 = (((_2527 * cbLight._m0[_2476].y) * _2540) * _2541) + _2403;
        _2470 = (((_2527 * cbLight._m0[_2476].z) * _2540) * _2541) + _2404;
    }
    float _2576;
    float _2578;
    float _2580;
    if (_2205)
    {
        _2576 = _2466;
        _2578 = _2468;
        _2580 = _2470;
    }
    else
    {
        uint _2587 = _2111 + 3u;
        uint _2591 = _2111 + 11u;
        float _2605 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2587].w)) * _869) * 0.949999988079071044921875);
        float _2606 = _2605 * _2605;
        float _2607 = cbLight._m0[_2587].x + _945;
        float _2608 = cbLight._m0[_2587].y + _946;
        float _2609 = cbLight._m0[_2587].z + _947;
        float _2613 = inversesqrt(dot(vec3(_2607, _2608, _2609), vec3(_2607, _2608, _2609)));
        float _2614 = _2613 * _2607;
        float _2615 = _2613 * _2608;
        float _2616 = _2613 * _2609;
        float _2617 = dot(vec3(_866, _867, _868), vec3(cbLight._m0[_2587].xyz));
        float _4600 = isnan(0.0) ? _2617 : (isnan(_2617) ? 0.0 : max(_2617, 0.0));
        float _2620 = isnan(1.0) ? _4600 : (isnan(_4600) ? 1.0 : min(_4600, 1.0));
        float _2621 = dot(vec3(_866, _867, _868), vec3(_2614, _2615, _2616));
        float _4611 = isnan(0.0) ? _2621 : (isnan(_2621) ? 0.0 : max(_2621, 0.0));
        float _2624 = isnan(1.0) ? _4611 : (isnan(_4611) ? 1.0 : min(_4611, 1.0));
        float _2625 = dot(vec3(cbLight._m0[_2587].xyz), vec3(_2614, _2615, _2616));
        float _4622 = isnan(0.0) ? _2625 : (isnan(_2625) ? 0.0 : max(_2625, 0.0));
        float _2629 = _2606 * _2606;
        float _2633 = ((_2624 * _2624) * (_2629 + (-1.0))) + 1.0;
        float _2642 = (exp2(log2(1.0 - (isnan(1.0) ? _4622 : (isnan(_4622) ? 1.0 : min(_4622, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2643 = 1.0 - _2606;
        float _2653 = (0.5 / (((_2279 * ((_2620 * _2643) + _2606)) + 9.9999999392252902907785028219223e-09) + (((_2279 * _2643) + _2606) * _2620))) * _2620;
        float _4633 = isnan(0.0) ? _2653 : (isnan(_2653) ? 0.0 : max(_2653, 0.0));
        float _2655 = (isnan(1.0) ? _4633 : (isnan(_4633) ? 1.0 : min(_4633, 1.0))) * (_2629 / ((_2633 * _2633) * 3.141590118408203125));
        float _2656 = isnan(1.0) ? _2127 : (isnan(_2127) ? 1.0 : min(_2127, 1.0));
        _2576 = (((_2642 * cbLight._m0[_2591].x) * _2655) * _2656) + _2466;
        _2578 = (((_2642 * cbLight._m0[_2591].y) * _2655) * _2656) + _2468;
        _2580 = (((_2642 * cbLight._m0[_2591].z) * _2655) * _2656) + _2470;
    }
    float _2791;
    float _2793;
    float _2795;
    float _2797;
    float _2799;
    float _2801;
    if (_2109.y == 0u)
    {
        float _2731 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2732 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2731;
        float _2733 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2731;
        float _2734 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2731;
        uvec4 _2746 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2747 = _2746.x;
        uint _2758 = uint((float(_2746.y) * floor(float(uint(cbSceneParam._m0[85u].y * _966) / _2747))) + floor(float(uint(cbSceneParam._m0[85u].x * _965) / _2747)));
        float _2768 = (log2(_2734 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2769 = isnan(0.0) ? _2768 : (isnan(_2768) ? 0.0 : max(_2768, 0.0));
        uint _2772 = uint(isnan(14.0) ? _2769 : (isnan(_2769) ? 14.0 : min(_2769, 14.0)));
        uvec4 _2777 = texelFetch(g_lightClusterGridBuffer, int(((_2772 << 2u) + (_2758 << 6u)) >> 2u));
        uint _2778 = _2777.x;
        uint _2779 = _2746.z;
        float _2879;
        float _2881;
        float _2883;
        float _2885;
        float _2887;
        float _2889;
        if (((((1u << ((_2779 >> 4u) & 15u)) + 4294967295u) & _2778) == 0u) || ((_2779 & 240u) == 0u))
        {
            _2879 = 0.0;
            _2881 = 0.0;
            _2883 = 0.0;
            _2885 = 0.0;
            _2887 = 0.0;
            _2889 = 0.0;
        }
        else
        {
            float _2880;
            float _2882;
            float _2884;
            float _2886;
            float _2888;
            float _2890;
            float _3032 = 0.0;
            float _3033 = 0.0;
            float _3034 = 0.0;
            float _3035 = 0.0;
            float _3036 = 0.0;
            float _3037 = 0.0;
            uint _3038 = 0u;
            uint _3047;
            bool _3048;
            for (;;)
            {
                _3047 = texelFetch(g_lightClassification, int((((_2772 << 5u) + (_2758 << 9u)) + (_3038 << 2u)) >> 2u)).x;
                _3048 = _3047 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3048)
                {
                    frontier_phi_66_pred = _3032;
                    frontier_phi_66_pred_1 = _3037;
                    frontier_phi_66_pred_2 = _3036;
                    frontier_phi_66_pred_3 = _3035;
                    frontier_phi_66_pred_4 = _3034;
                    frontier_phi_66_pred_5 = _3033;
                }
                else
                {
                    float _3177;
                    float _3178;
                    float _3179;
                    float _3180;
                    float _3181;
                    float _3182;
                    uint _3183;
                    _3177 = _3032;
                    _3178 = _3033;
                    _3179 = _3034;
                    _3180 = _3035;
                    _3181 = _3036;
                    _3182 = _3037;
                    _3183 = _3047;
                    float _3104;
                    float _3105;
                    float _3106;
                    float _3107;
                    float _3108;
                    float _3109;
                    for (;;)
                    {
                        uint _3187 = uint(findLSB(_3183)) + (_3038 << 5u);
                        uint _3184 = (_3183 + 4294967295u) & _3183;
                        uint _3189 = _3187 * 48u;
                        vec4 _3203 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3189)).x, texelFetch(g_PointLightRenderingBuffer, int(_3189 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3189 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3189 + 3u)).x));
                        uint _3209 = (_3187 * 48u) + 4u;
                        vec4 _3222 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3209)).x, texelFetch(g_PointLightRenderingBuffer, int(_3209 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3209 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3209 + 3u)).x));
                        uint _3228 = (_3187 * 48u) + 8u;
                        vec3 _3239 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3228)).x, texelFetch(g_PointLightRenderingBuffer, int(_3228 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3228 + 2u)).x));
                        float _3243 = _3203.x - _2732;
                        float _3244 = _3203.y - _2733;
                        float _3245 = _3203.z - _2734;
                        float _3246 = dot(vec3(_3243, _3244, _3245), vec3(_3243, _3244, _3245));
                        float _3249 = inversesqrt(_3246);
                        float _3250 = _3249 * _3243;
                        float _3251 = _3249 * _3244;
                        float _3252 = _3249 * _3245;
                        float _3253 = dot(vec3(_984, _987, _990), vec3(_3250, _3251, _3252));
                        float _3258 = 1.0 - (_3246 * _3203.w);
                        float _4659 = isnan(0.0) ? _3258 : (isnan(_3258) ? 0.0 : max(_3258, 0.0));
                        float _3259 = isnan(1.0) ? _4659 : (isnan(_4659) ? 1.0 : min(_4659, 1.0));
                        float _3260 = sqrt(_3246) * _3222.w;
                        float _3263 = 1.39999997615814208984375 / (_3260 + 1.39999997615814208984375);
                        float _3264 = _3263 * _3263;
                        float _3267 = ((1.0 - _3264) * _3253) + _3264;
                        float _3270 = _3260 * _3260;
                        float _3274 = ((isnan(0.0) ? _3267 : (isnan(_3267) ? 0.0 : max(_3267, 0.0))) * _3259) / ((_3270 * 0.699999988079071044921875) + 1.0);
                        float _3278 = (-0.0) - _2732;
                        float _3279 = (-0.0) - _2733;
                        float _3280 = (-0.0) - _2734;
                        float _3284 = inversesqrt(dot(vec3(_3278, _3279, _3280), vec3(_3278, _3279, _3280)));
                        float _3285 = _3284 * _3278;
                        float _3286 = _3284 * _3279;
                        float _3287 = _3284 * _3280;
                        float _3295 = exp2(log2(1.0 / ((_3270 * 3.5) + 5.0)) * 0.25);
                        float _3296 = 1.0 - _1044;
                        float _3303 = sqrt(1.0 - ((1.0 - (_3296 * _3296)) * (1.0 - (_3295 * _3295))));
                        float _3304 = _3303 * _3303;
                        float _3305 = _3304 * _3304;
                        float _3306 = _3285 + _3250;
                        float _3307 = _3286 + _3251;
                        float _3308 = _3287 + _3252;
                        float _3312 = inversesqrt(dot(vec3(_3306, _3307, _3308), vec3(_3306, _3307, _3308)));
                        float _3316 = dot(vec3(_984, _987, _990), vec3(_3285, _3286, _3287));
                        float _4675 = isnan(0.0) ? _3316 : (isnan(_3316) ? 0.0 : max(_3316, 0.0));
                        float _3319 = isnan(1.0) ? _4675 : (isnan(_4675) ? 1.0 : min(_4675, 1.0));
                        float _3320 = dot(vec3(_984, _987, _990), vec3(_3312 * _3306, _3312 * _3307, _3312 * _3308));
                        float _4686 = isnan(0.0) ? _3320 : (isnan(_3320) ? 0.0 : max(_3320, 0.0));
                        float _3323 = isnan(1.0) ? _4686 : (isnan(_4686) ? 1.0 : min(_4686, 1.0));
                        float _3327 = ((_3323 * _3323) * (_3305 + (-1.0))) + 1.0;
                        float _3328 = _3263 * _3304;
                        float _3329 = _3328 * _3328;
                        float _3332 = ((1.0 - _3329) * _3253) + _3329;
                        float _4697 = isnan(0.0) ? _3332 : (isnan(_3332) ? 0.0 : max(_3332, 0.0));
                        float _3333 = isnan(1.0) ? _4697 : (isnan(_4697) ? 1.0 : min(_4697, 1.0));
                        float _3334 = 1.0 - _3304;
                        float _3344 = (0.5 / (((_3333 * ((_3319 * _3334) + _3304)) + 9.9999999392252902907785028219223e-09) + (((_3333 * _3334) + _3304) * _3319))) * _3333;
                        float _4708 = isnan(0.0) ? _3344 : (isnan(_3344) ? 0.0 : max(_3344, 0.0));
                        float _3355 = (((_3305 * 3.1415927410125732421875) * (isnan(1.0) ? _4708 : (isnan(_4708) ? 1.0 : min(_4708, 1.0)))) / ((_3327 * _3327) * ((_3270 * 2.1991131305694580078125) + 3.141590118408203125))) * _3259;
                        _3107 = (_3274 * _3222.x) + _3180;
                        _3108 = (_3274 * _3222.y) + _3181;
                        _3109 = (_3274 * _3222.z) + _3182;
                        _3104 = (_3355 * _3239.x) + _3177;
                        _3105 = (_3355 * _3239.y) + _3178;
                        _3106 = (_3355 * _3239.z) + _3179;
                        if (_3184 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3177 = _3104;
                            _3178 = _3105;
                            _3179 = _3106;
                            _3180 = _3107;
                            _3181 = _3108;
                            _3182 = _3109;
                            _3183 = _3184;
                        }
                    }
                    frontier_phi_66_pred = _3104;
                    frontier_phi_66_pred_1 = _3109;
                    frontier_phi_66_pred_2 = _3108;
                    frontier_phi_66_pred_3 = _3107;
                    frontier_phi_66_pred_4 = _3106;
                    frontier_phi_66_pred_5 = _3105;
                }
                _2880 = frontier_phi_66_pred;
                _2890 = frontier_phi_66_pred_1;
                _2888 = frontier_phi_66_pred_2;
                _2886 = frontier_phi_66_pred_3;
                _2884 = frontier_phi_66_pred_4;
                _2882 = frontier_phi_66_pred_5;
                uint _3039 = _3038 + 1u;
                if (_3039 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3032 = _2880;
                    _3033 = _2882;
                    _3034 = _2884;
                    _3035 = _2886;
                    _3036 = _2888;
                    _3037 = _2890;
                    _3038 = _3039;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2879 = _2880;
            _2881 = _2882;
            _2883 = _2884;
            _2885 = _2886;
            _2887 = _2888;
            _2889 = _2890;
        }
        uvec4 _2893 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2894 = _2893.z;
        uint _2896 = (_2894 >> 8u) & 15u;
        float _3000;
        float _3002;
        float _3004;
        float _3006;
        float _3008;
        float _3010;
        if (((4294967295u << _2896) & _2778) == 0u)
        {
            _3000 = _2879;
            _3002 = _2881;
            _3004 = _2883;
            _3006 = _2885;
            _3008 = _2887;
            _3010 = _2889;
        }
        else
        {
            float _3025 = inversesqrt(dot(vec3(_2732, _2733, _2734), vec3(_2732, _2733, _2734)));
            float _3026 = _3025 * _2732;
            float _3027 = _3025 * _2733;
            float _3028 = _3025 * _2734;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2896 < ((_2894 >> 12u) & 15u))
            {
                float _3001;
                float _3003;
                float _3005;
                float _3007;
                float _3009;
                float _3011;
                float _3160 = _2879;
                float _3161 = _2881;
                float _3162 = _2883;
                float _3163 = _2885;
                float _3164 = _2887;
                float _3165 = _2889;
                uint _3166 = _2896;
                uint _3175;
                bool _3176;
                for (;;)
                {
                    _3175 = texelFetch(g_lightClassification, int((((_2772 << 5u) + (_2758 << 9u)) + (_3166 << 2u)) >> 2u)).x;
                    _3176 = _3175 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_3176)
                    {
                        frontier_phi_77_pred = _3165;
                        frontier_phi_77_pred_1 = _3164;
                        frontier_phi_77_pred_2 = _3163;
                        frontier_phi_77_pred_3 = _3162;
                        frontier_phi_77_pred_4 = _3161;
                        frontier_phi_77_pred_5 = _3160;
                    }
                    else
                    {
                        float _3369;
                        float _3370;
                        float _3371;
                        float _3372;
                        float _3373;
                        float _3374;
                        float _3662;
                        float _3663;
                        float _3664;
                        float _3665;
                        float _3666;
                        float _3667;
                        float _3382 = _3160;
                        float _3383 = _3161;
                        float _3384 = _3162;
                        float _3385 = _3163;
                        float _3386 = _3164;
                        float _3387 = _3165;
                        uint _3388 = _3175;
                        uint _3389;
                        vec4 _3414;
                        float _3415;
                        vec4 _3430;
                        vec3 _3442;
                        vec4 _3457;
                        vec4 _3472;
                        float _3518;
                        bool _3519;
                        for (;;)
                        {
                            uint _3399 = ((_3166 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3388));
                            _3389 = (_3388 + 4294967295u) & _3388;
                            uint _3401 = _3399 * 40u;
                            _3414 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3401)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3401 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3401 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3401 + 3u)).x));
                            _3415 = _3414.w;
                            uint _3417 = (_3399 * 40u) + 4u;
                            _3430 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3417)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3417 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3417 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3417 + 3u)).x));
                            uint _3432 = (_3399 * 40u) + 8u;
                            _3442 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3432)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3432 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3432 + 2u)).x));
                            uint _3444 = (_3399 * 40u) + 16u;
                            _3457 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3444)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3444 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3444 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3444 + 3u)).x));
                            uint _3459 = (_3399 * 40u) + 20u;
                            _3472 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3459)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3459 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3459 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3459 + 3u)).x));
                            uint _3474 = (_3399 * 40u) + 24u;
                            vec4 _3487 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3474)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3474 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3474 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3474 + 3u)).x));
                            uint _3493 = (_3399 * 40u) + 28u;
                            vec4 _3506 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3493)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3493 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3493 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3493 + 3u)).x));
                            _3518 = fma(_2734, _3506.z, fma(_2733, _3506.y, _3506.x * _2732)) + _3506.w;
                            _3519 = !((fma(_2734, _3487.z, fma(_2733, _3487.y, _3487.x * _2732)) + _3487.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3519)
                            {
                                float _3546 = _3414.x - _2732;
                                float _3547 = _3414.y - _2733;
                                float _3548 = _3414.z - _2734;
                                float _3549 = dot(vec3(_3546, _3547, _3548), vec3(_3546, _3547, _3548));
                                float _3552 = inversesqrt(_3549);
                                float _3553 = _3552 * _3546;
                                float _3554 = _3552 * _3547;
                                float _3555 = _3552 * _3548;
                                float _3559 = 1.0 - (_3549 / (_3415 * _3415));
                                float _4719 = isnan(0.0) ? _3559 : (isnan(_3559) ? 0.0 : max(_3559, 0.0));
                                float _3560 = isnan(1.0) ? _4719 : (isnan(_4719) ? 1.0 : min(_4719, 1.0));
                                float _3564 = sqrt(_3549) * _3430.w;
                                float _3566 = 1.39999997615814208984375 / (_3564 + 1.39999997615814208984375);
                                float _3567 = _3566 * _3566;
                                float _3570 = ((1.0 - _3567) * dot(vec3(_3553, _3554, _3555), vec3(_984, _987, _990))) + _3567;
                                float _3573 = _3564 * _3564;
                                float _3577 = (fma(_2734, _3457.z, fma(_2733, _3457.y, _3457.x * _2732)) + _3457.w) / _3518;
                                float _3578 = (fma(_2734, _3472.z, fma(_2733, _3472.y, _3472.x * _2732)) + _3472.w) / _3518;
                                float _3582 = 1.0 - dot(vec2(_3577, _3578), vec2(_3577, _3578));
                                float _4735 = isnan(0.0) ? _3582 : (isnan(_3582) ? 0.0 : max(_3582, 0.0));
                                float _3583 = isnan(1.0) ? _4735 : (isnan(_4735) ? 1.0 : min(_4735, 1.0));
                                float _3584 = _3583 * (((isnan(0.0) ? _3570 : (isnan(_3570) ? 0.0 : max(_3570, 0.0))) * _3560) / ((_3573 * 0.699999988079071044921875) + 1.0));
                                float _3596 = exp2(log2(1.0 / ((_3573 * 3.5) + 5.0)) * 0.25);
                                float _3597 = 1.0 - _1044;
                                float _3604 = sqrt(1.0 - ((1.0 - (_3597 * _3597)) * (1.0 - (_3596 * _3596))));
                                float _3605 = _3604 * _3604;
                                float _3606 = _3605 * _3605;
                                float _3607 = _3553 - _3026;
                                float _3608 = _3554 - _3027;
                                float _3609 = _3555 - _3028;
                                float _3613 = inversesqrt(dot(vec3(_3607, _3608, _3609), vec3(_3607, _3608, _3609)));
                                float _3617 = dot(vec3(_984, _987, _990), vec3((-0.0) - _3026, (-0.0) - _3027, (-0.0) - _3028));
                                float _4746 = isnan(0.0) ? _3617 : (isnan(_3617) ? 0.0 : max(_3617, 0.0));
                                float _3620 = isnan(1.0) ? _4746 : (isnan(_4746) ? 1.0 : min(_4746, 1.0));
                                float _3621 = dot(vec3(_984, _987, _990), vec3(_3613 * _3607, _3613 * _3608, _3613 * _3609));
                                float _4757 = isnan(0.0) ? _3621 : (isnan(_3621) ? 0.0 : max(_3621, 0.0));
                                float _3624 = isnan(1.0) ? _4757 : (isnan(_4757) ? 1.0 : min(_4757, 1.0));
                                float _3628 = ((_3624 * _3624) * (_3606 + (-1.0))) + 1.0;
                                float _3629 = _3566 * _3605;
                                float _3630 = _3629 * _3629;
                                float _3636 = ((1.0 - _3630) * dot(vec3(_984, _987, _990), vec3(_3553, _3554, _3555))) + _3630;
                                float _4768 = isnan(0.0) ? _3636 : (isnan(_3636) ? 0.0 : max(_3636, 0.0));
                                float _3637 = isnan(1.0) ? _4768 : (isnan(_4768) ? 1.0 : min(_4768, 1.0));
                                float _3638 = 1.0 - _3605;
                                float _3648 = (0.5 / (((_3637 * ((_3620 * _3638) + _3605)) + 9.9999999392252902907785028219223e-09) + (((_3637 * _3638) + _3605) * _3620))) * _3637;
                                float _4779 = isnan(0.0) ? _3648 : (isnan(_3648) ? 0.0 : max(_3648, 0.0));
                                float _3658 = (_3583 * _3560) * (((_3606 * 3.1415927410125732421875) * (isnan(1.0) ? _4779 : (isnan(_4779) ? 1.0 : min(_4779, 1.0)))) / ((_3628 * _3628) * ((_3573 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3584 * _3430.y;
                                frontier_phi_83_pred_1 = _3584 * _3430.x;
                                frontier_phi_83_pred_2 = _3658 * _3442.z;
                                frontier_phi_83_pred_3 = _3658 * _3442.y;
                                frontier_phi_83_pred_4 = _3658 * _3442.x;
                                frontier_phi_83_pred_5 = _3584 * _3430.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3666 = frontier_phi_83_pred;
                            _3665 = frontier_phi_83_pred_1;
                            _3664 = frontier_phi_83_pred_2;
                            _3663 = frontier_phi_83_pred_3;
                            _3662 = frontier_phi_83_pred_4;
                            _3667 = frontier_phi_83_pred_5;
                            _3372 = _3665 + _3385;
                            _3373 = _3666 + _3386;
                            _3374 = _3667 + _3387;
                            _3369 = _3662 + _3382;
                            _3370 = _3663 + _3383;
                            _3371 = _3664 + _3384;
                            if (_3389 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3382 = _3369;
                                _3383 = _3370;
                                _3384 = _3371;
                                _3385 = _3372;
                                _3386 = _3373;
                                _3387 = _3374;
                                _3388 = _3389;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3374;
                        frontier_phi_77_pred_1 = _3373;
                        frontier_phi_77_pred_2 = _3372;
                        frontier_phi_77_pred_3 = _3371;
                        frontier_phi_77_pred_4 = _3370;
                        frontier_phi_77_pred_5 = _3369;
                    }
                    _3011 = frontier_phi_77_pred;
                    _3009 = frontier_phi_77_pred_1;
                    _3007 = frontier_phi_77_pred_2;
                    _3005 = frontier_phi_77_pred_3;
                    _3003 = frontier_phi_77_pred_4;
                    _3001 = frontier_phi_77_pred_5;
                    uint _3167 = _3166 + 1u;
                    if (_3167 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3160 = _3001;
                        _3161 = _3003;
                        _3162 = _3005;
                        _3163 = _3007;
                        _3164 = _3009;
                        _3165 = _3011;
                        _3166 = _3167;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _3005;
                frontier_phi_58_59_ladder_1 = _3011;
                frontier_phi_58_59_ladder_2 = _3009;
                frontier_phi_58_59_ladder_3 = _3007;
                frontier_phi_58_59_ladder_4 = _3003;
                frontier_phi_58_59_ladder_5 = _3001;
            }
            else
            {
                frontier_phi_58_59_ladder = _2883;
                frontier_phi_58_59_ladder_1 = _2889;
                frontier_phi_58_59_ladder_2 = _2887;
                frontier_phi_58_59_ladder_3 = _2885;
                frontier_phi_58_59_ladder_4 = _2881;
                frontier_phi_58_59_ladder_5 = _2879;
            }
            _3000 = frontier_phi_58_59_ladder_5;
            _3002 = frontier_phi_58_59_ladder_4;
            _3004 = frontier_phi_58_59_ladder;
            _3006 = frontier_phi_58_59_ladder_3;
            _3008 = frontier_phi_58_59_ladder_2;
            _3010 = frontier_phi_58_59_ladder_1;
        }
        float _3015 = isnan(1.0) ? _1028 : (isnan(_1028) ? 1.0 : min(_1028, 1.0));
        _2791 = (_3015 * _3006) + _2243;
        _2793 = (_3015 * _3008) + _2245;
        _2795 = (_3015 * _3010) + _2247;
        _2797 = ((_3000 * 0.039999999105930328369140625) * _3015) + _2576;
        _2799 = ((_3002 * 0.039999999105930328369140625) * _3015) + _2578;
        _2801 = ((_3004 * 0.039999999105930328369140625) * _3015) + _2580;
    }
    else
    {
        _2791 = _2243;
        _2793 = _2245;
        _2795 = _2247;
        _2797 = _2576;
        _2799 = _2578;
        _2801 = _2580;
    }
    float _4795 = isnan(0.0) ? _1013 : (isnan(_1013) ? 0.0 : max(_1013, 0.0));
    float _4806 = isnan(0.0) ? _1014 : (isnan(_1014) ? 0.0 : max(_1014, 0.0));
    float _4817 = isnan(0.0) ? _1015 : (isnan(_1015) ? 0.0 : max(_1015, 0.0));
    float _2818 = ((isnan(1.0) ? _4795 : (isnan(_4795) ? 1.0 : min(_4795, 1.0))) * (_2791 + ((isnan(0.0) ? _1785 : (isnan(_1785) ? 0.0 : max(_1785, 0.0))) * _1028))) + ((_2797 + ((isnan(0.0) ? _2075 : (isnan(_2075) ? 0.0 : max(_2075, 0.0))) * _1864)) * cbPerFrame._m0[3u].x);
    float _2819 = ((isnan(1.0) ? _4806 : (isnan(_4806) ? 1.0 : min(_4806, 1.0))) * (_2793 + ((isnan(0.0) ? _1788 : (isnan(_1788) ? 0.0 : max(_1788, 0.0))) * _1028))) + ((_2799 + ((isnan(0.0) ? _2078 : (isnan(_2078) ? 0.0 : max(_2078, 0.0))) * _1864)) * cbPerFrame._m0[3u].x);
    float _2820 = ((isnan(1.0) ? _4817 : (isnan(_4817) ? 1.0 : min(_4817, 1.0))) * (_2795 + ((isnan(0.0) ? _1791 : (isnan(_1791) ? 0.0 : max(_1791, 0.0))) * _1028))) + ((_2801 + ((isnan(0.0) ? _2081 : (isnan(_2081) ? 0.0 : max(_2081, 0.0))) * _1864)) * cbPerFrame._m0[3u].x);
    uint _2821 = _276 + 6u;
    float _2829 = _965 / cbSceneParam._m0[86u].x;
    float _2830 = _966 / cbSceneParam._m0[86u].y;
    vec4 _2844 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2829, _2830, (log2((isnan(cbSceneParam._m0[77u].w) ? _887 : (isnan(_887) ? cbSceneParam._m0[77u].w : min(_887, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2846 = _2844.x;
    float _2847 = _2844.y;
    float _2848 = _2844.z;
    float _2849 = _2844.w;
    float _2942;
    float _2944;
    float _2946;
    float _2948;
    if (_887 > cbSceneParam._m0[78u].w)
    {
        float _2904 = isnan(_887) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _887 : min(cbSceneParam._m0[80u].w, _887));
        float _2905 = _2904 / _887;
        float _2916 = _2905 * _938;
        float _2917 = _939 * _2905;
        float _2918 = (-0.0) - _2917;
        float _2920 = _2905 * _940;
        float _2922 = (cbSceneParam._m0[77u].w * _2918) / _2904;
        float _2923 = _2922 + cbSceneParam._m0[79u].w;
        float _2924 = cbSceneParam._m0[79u].w - _2917;
        float _2930 = sqrt(((_2916 * _2916) + (_2917 * _2917)) + (_2920 * _2920));
        float _2933 = (1.0 - (cbSceneParam._m0[77u].w / _2904)) * _2930;
        float _2938 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2940 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3117;
        if (abs((_2918 - _2922) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3117 = ((((_2923 > 0.0) ? exp2(_2938 * _2923) : (2.0 - exp2(_2940 * _2923))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2933;
        }
        else
        {
            float _3061 = 1.0 / cbSceneParam._m0[80u].x;
            float _3062 = isnan(_2924) ? _2923 : (isnan(_2923) ? _2924 : max(_2923, _2924));
            float _3063 = isnan(_2924) ? _2923 : (isnan(_2923) ? _2924 : min(_2923, _2924));
            float _3072 = isnan(0.0) ? _3062 : (isnan(_3062) ? 0.0 : min(_3062, 0.0));
            float _3073 = isnan(0.0) ? _3063 : (isnan(_3063) ? 0.0 : min(_3063, 0.0));
            _3117 = ((abs(_2930 / _2918) * cbSceneParam._m0[80u].y) * ((((_3072 - _3073) * 2.0) - ((exp2(_2938 * (isnan(0.0) ? _3062 : (isnan(_3062) ? 0.0 : max(_3062, 0.0)))) - exp2(_2938 * (isnan(0.0) ? _3063 : (isnan(_3063) ? 0.0 : max(_3063, 0.0))))) * _3061)) - ((exp2(_2940 * _3072) - exp2(_2940 * _3073)) * _3061))) + (_2933 * cbSceneParam._m0[80u].z);
        }
        vec4 _3119 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2829, _2830, 1.0), 0.0);
        float _3128 = exp2((_3117 * (-1.44269502162933349609375)) * (1.0 - _3119.w));
        float _3129 = log2(_3128);
        float _3145 = log2(_2849);
        _2942 = (exp2(_3145 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3129 * cbSceneParam._m0[78u].x)) * _3119.x) / cbSceneParam._m0[78u].x)) + _2846;
        _2944 = (exp2(_3145 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3129 * cbSceneParam._m0[78u].y)) * _3119.y) / cbSceneParam._m0[78u].y)) + _2847;
        _2946 = (exp2(_3145 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3129 * cbSceneParam._m0[78u].z)) * _3119.z) / cbSceneParam._m0[78u].z)) + _2848;
        _2948 = _3128 * _2849;
    }
    else
    {
        _2942 = _2846;
        _2944 = _2847;
        _2946 = _2848;
        _2948 = _2849;
    }
    bool _3155;
    vec4 _2958;
    vec4 _2980;
    float _2982;
    float _2986;
    float _2987;
    float _2988;
    float _2989;
    bool _2999;
    for (;;)
    {
        _2958 = cbMatDynParam._m0[0u];
        float _2960 = roundEven(_2958.y);
        bool _2961 = _2960 == 3.0;
        float _2962 = log2(_2948);
        float _2969 = exp2(_2962 * cbSceneParam._m0[78u].x) * _2818;
        float _2970 = exp2(_2962 * cbSceneParam._m0[78u].y) * _2819;
        float _2971 = exp2(_2962 * cbSceneParam._m0[78u].z) * _2820;
        float _2978 = _954 + (-0.5);
        _2980 = cbMtdParam._m0[1u];
        _2982 = _2980.y * _2978;
        float _2985 = (_2960 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2986 = _2985 * (_2961 ? _2969 : (_2969 + (cbSceneParam._m0[72u].w * _2942)));
        _2987 = _2985 * (_2961 ? _2970 : (_2970 + (cbSceneParam._m0[72u].w * _2944)));
        _2988 = _2985 * (_2961 ? _2971 : (_2971 + (cbSceneParam._m0[72u].w * _2946)));
        _2989 = _2978 * 0.999000012874603271484375;
        _2999 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2999)
        {
            if ((cbInstanceData._m0[_276 + 7u].x + _2989) < 0.5)
            {
                _3155 = true;
                break;
            }
        }
        uint _3096 = _1003 + uint(_2958.w);
        if ((cbInstanceData._m0[_3096].w < 1.0) && ((cbInstanceData._m0[_3096].w + _2989) < 0.5))
        {
            _3155 = true;
            break;
        }
        if ((_2982 + 1.0) < _2980.x)
        {
            _3155 = true;
            break;
        }
        _3155 = false;
        break;
    }
    float _3360;
    if (_3155)
    {
        discard_state = true;
        _3360 = 0.0;
    }
    else
    {
        _3360 = cbInstanceData._m0[_2821].w;
    }
    SV_Target.x = _2986;
    SV_Target.y = _2987;
    SV_Target.z = _2988;
    SV_Target.w = _3360;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2821].w;
    discard_exit();
}


