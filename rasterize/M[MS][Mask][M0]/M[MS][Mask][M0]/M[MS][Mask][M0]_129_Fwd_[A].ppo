#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_0;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 13) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_22;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_29;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_10;
layout(set = 0, binding = 20) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_6;
layout(set = 0, binding = 23) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_8;
layout(set = 0, binding = 24) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_9;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1651;
float _4007;
float _4008;
float _4009;
float _4010;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _244 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _245 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _246 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _252 = inversesqrt(dot(vec3(_244, _245, _246), vec3(_244, _245, _246)));
    float _253 = _252 * _244;
    float _254 = _252 * _245;
    float _255 = _252 * _246;
    float _259 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _260 = _259 * NORMAL.x;
    float _261 = _259 * NORMAL.y;
    float _262 = _259 * NORMAL.z;
    float _266 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _267 = _266 * TANGENT.x;
    float _268 = _266 * TANGENT.y;
    float _269 = _266 * TANGENT.z;
    float _278 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _280 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _281 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _4019 = isnan(0.0) ? _278 : (isnan(_278) ? 0.0 : max(_278, 0.0));
    float _4030 = isnan(0.0) ? _280 : (isnan(_280) ? 0.0 : max(_280, 0.0));
    float _4041 = isnan(0.0) ? _281 : (isnan(_281) ? 0.0 : max(_281, 0.0));
    uint _291 = uint(roundEven(NORMAL.w)) * 13u;
    uint _296 = _291 + 1u;
    uint _300 = _291 + 2u;
    float _309 = sqrt(((cbInstanceData._m0[_296].x * cbInstanceData._m0[_296].x) + (cbInstanceData._m0[_291].x * cbInstanceData._m0[_291].x)) + (cbInstanceData._m0[_300].x * cbInstanceData._m0[_300].x));
    float _310 = _309 * TEXCOORD.z;
    float _311 = _309 * TEXCOORD.w;
    vec4 _324 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _310) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _311) + cbTextureTilingScale._m0[13u].w));
    vec4 _347 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _373 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _378 = _373.x * cbMtdParam._m0[11u].x;
    float _379 = _373.y * cbMtdParam._m0[11u].y;
    float _380 = _373.z * cbMtdParam._m0[11u].z;
    vec4 _399 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _310) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _311) + cbTextureTilingScale._m0[5u].w));
    vec4 _418 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _456 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _458 = _456.x;
    float _470 = dot(vec4(_458, _456.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _487 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _418.x) * 2.0) - ((((_458 - _470) * cbMtdParam._m0[24u].z) + _470) * cbMtdParam._m0[23u].x))) + 1.0;
    float _4052 = isnan(0.0) ? _487 : (isnan(_487) ? 0.0 : max(_487, 0.0));
    float _488 = isnan(1.0) ? _4052 : (isnan(_4052) ? 1.0 : min(_4052, 1.0));
    float _495 = (_488 * ((_399.x * cbMtdParam._m0[12u].x) - _378)) + _378;
    float _496 = (_488 * ((_399.y * cbMtdParam._m0[12u].y) - _379)) + _379;
    float _497 = (_488 * ((_399.z * cbMtdParam._m0[12u].z) - _380)) + _380;
    vec4 _514 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _310) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _311) + cbTextureTilingScale._m0[3u].w));
    vec4 _534 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _536 = _534.x;
    float _546 = dot(vec4(_536, _534.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _560 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _418.y) * 2.0) - ((((_536 - _546) * cbMtdParam._m0[24u].z) + _546) * cbMtdParam._m0[20u].w))) + 1.0;
    float _4063 = isnan(0.0) ? _560 : (isnan(_560) ? 0.0 : max(_560, 0.0));
    float _561 = isnan(1.0) ? _4063 : (isnan(_4063) ? 1.0 : min(_4063, 1.0));
    float _568 = (_561 * ((_514.x * cbMtdParam._m0[13u].x) - _495)) + _495;
    float _569 = (_561 * ((_514.y * cbMtdParam._m0[13u].y) - _496)) + _496;
    float _570 = (_561 * ((_514.z * cbMtdParam._m0[13u].z) - _497)) + _497;
    vec4 _588 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_9, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[24u].x * _310) + cbTextureTilingScale._m0[24u].z, (cbTextureTilingScale._m0[24u].y * _311) + cbTextureTilingScale._m0[24u].w));
    vec4 _605 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[25u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _607 = _605.x;
    float _617 = dot(vec4(_607, _605.yzw), vec4(cbMtdParam._m0[30u].w, cbMtdParam._m0[31u].xy, 0.0));
    float _629 = ((cbMtdParam._m0[25u].x * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.z) - _418.z) * 2.0) - ((((_607 - _617) * cbMtdParam._m0[24u].z) + _617) * cbMtdParam._m0[20u].z))) + 1.0;
    float _4074 = isnan(0.0) ? _629 : (isnan(_629) ? 0.0 : max(_629, 0.0));
    float _630 = isnan(1.0) ? _4074 : (isnan(_4074) ? 1.0 : min(_4074, 1.0));
    float _640 = (_347.x * cbMtdParam._m0[9u].x) * ((_630 * ((_588.x * cbMtdParam._m0[14u].x) - _568)) + _568);
    float _641 = (_347.y * cbMtdParam._m0[9u].y) * ((_630 * ((_588.y * cbMtdParam._m0[14u].y) - _569)) + _569);
    float _642 = (_347.z * cbMtdParam._m0[9u].z) * ((_630 * ((_588.z * cbMtdParam._m0[14u].z) - _570)) + _570);
    float _646 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _324.x) * _640;
    float _649 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _324.y) * _641;
    float _652 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _324.z) * _642;
    float _660 = (((_640 - _646) * (isnan(1.0) ? _4019 : (isnan(_4019) ? 1.0 : min(_4019, 1.0)))) + _646) * 4.55000019073486328125;
    float _662 = (((_641 - _649) * (isnan(1.0) ? _4030 : (isnan(_4030) ? 1.0 : min(_4030, 1.0)))) + _649) * 4.55000019073486328125;
    float _664 = (((_642 - _652) * (isnan(1.0) ? _4041 : (isnan(_4041) ? 1.0 : min(_4041, 1.0)))) + _652) * 4.55000019073486328125;
    vec4 _681 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _310) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _311) + cbTextureTilingScale._m0[20u].w));
    vec4 _706 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _310) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _311) + cbTextureTilingScale._m0[4u].w));
    vec4 _723 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _725 = _723.x;
    float _726 = _723.y;
    float _727 = _723.z;
    float _734 = ((_706.x - _725) * _488) + _725;
    float _735 = ((_706.y - _726) * _488) + _726;
    float _736 = ((_706.z - _727) * _488) + _727;
    vec4 _748 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _310) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _311) + cbTextureTilingScale._m0[2u].w));
    float _759 = ((_748.x - _734) * _561) + _734;
    float _760 = ((_748.y - _735) * _561) + _735;
    float _761 = ((_748.z - _736) * _561) + _736;
    vec4 _773 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[23u].x * _310) + cbTextureTilingScale._m0[23u].z, (cbTextureTilingScale._m0[23u].y * _311) + cbTextureTilingScale._m0[23u].w));
    float _786 = ((_773.z - _761) * _630) + _761;
    float _789 = ((((_773.x - _759) * _630) + _759) * 2.0) + (-1.0);
    float _790 = ((((_773.y - _760) * _630) + _760) * 2.0) + (-1.0);
    float _791 = dot(vec2(_789, _790), vec2(_789, _790));
    float _4085 = isnan(0.0) ? _791 : (isnan(_791) ? 0.0 : max(_791, 0.0));
    float _796 = sqrt(1.0 - (isnan(1.0) ? _4085 : (isnan(_4085) ? 1.0 : min(_4085, 1.0))));
    vec4 _814 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _826 = (_789 + ((((_681.x * 2.0) + (-1.0)) * TEXCOORD_11.x) * cbMtdParam._m0[20u].x)) + (((_814.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _827 = (_790 + ((((_681.y * 2.0) + (-1.0)) * TEXCOORD_11.y) * cbMtdParam._m0[20u].x)) + (((_814.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _830 = fma(_796, _260, fma(_827, _267, _826 * _253));
    float _833 = fma(_796, _261, fma(_827, _268, _826 * _254));
    float _836 = fma(_796, _262, fma(_827, _269, _826 * _255));
    float _840 = inversesqrt(dot(vec3(_830, _833, _836), vec3(_830, _833, _836)));
    vec4 _867 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _310) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _311) + cbTextureTilingScale._m0[11u].w));
    float _869 = _867.x;
    float _870 = 1.0 - _869;
    float _876 = (cbMtdParam._m0[19u].x + dot(vec4(_840 * _830, _840 * _833, _840 * _836, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_869 - _870) * cbMtdParam._m0[24u].w) + _870) * cbMtdParam._m0[21u].z);
    float _4096 = isnan(0.0) ? _876 : (isnan(_876) ? 0.0 : max(_876, 0.0));
    float _877 = isnan(1.0) ? _4096 : (isnan(_4096) ? 1.0 : min(_4096, 1.0));
    float _879 = (-0.0) - cbMtdParam._m0[24u].x;
    float _881 = isnan(0.0) ? _879 : (isnan(_879) ? 0.0 : max(_879, 0.0));
    float _882 = isnan(1.0) ? _881 : (isnan(_881) ? 1.0 : min(_881, 1.0));
    float _889 = _877 - ((_877 * TEXCOORD_8.x) * _882);
    float _890 = _877 - ((_877 * TEXCOORD_8.y) * _882);
    float _891 = _877 - ((_877 * TEXCOORD_8.z) * _882);
    float _898 = (_889 * (cbMtdParam._m0[17u].x - _660)) + _660;
    float _899 = (_890 * (cbMtdParam._m0[17u].y - _662)) + _662;
    float _900 = (_891 * (cbMtdParam._m0[17u].z - _664)) + _664;
    float _915 = sqrt(((cbInstanceData._m0[_296].x * cbInstanceData._m0[_296].x) + (cbInstanceData._m0[_291].x * cbInstanceData._m0[_291].x)) + (cbInstanceData._m0[_300].x * cbInstanceData._m0[_300].x));
    float _916 = _915 * TEXCOORD.z;
    float _917 = _915 * TEXCOORD.w;
    vec4 _929 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _916) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _917) + cbTextureTilingScale._m0[19u].w));
    float _931 = _929.x;
    float _932 = 1.0 - _931;
    float _960 = (TEXCOORD_8.x - ((cbMtdParam._m0[22u].w * (1.0 - TEXCOORD_8.x)) * ((((_931 - _932) * cbMtdParam._m0[24u].y) + _932) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _4117 = isnan(0.0) ? _960 : (isnan(_960) ? 0.0 : max(_960, 0.0));
    float _961 = isnan(1.0) ? _4117 : (isnan(_4117) ? 1.0 : min(_4117, 1.0));
    float _969 = ((((cbMtdParam._m0[10u].x - _898) * TEXCOORD_8.x) * cbMtdParam._m0[23u].w) * _961) + _898;
    float _970 = ((((cbMtdParam._m0[10u].y - _899) * TEXCOORD_8.y) * cbMtdParam._m0[23u].w) * _961) + _899;
    float _971 = (((cbMtdParam._m0[23u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _900)) * _961) + _900;
    float _976 = (((_681.z - _786) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _786;
    float _980 = ((_814.z - _976) * cbMtdParam._m0[19u].w) + _976;
    vec4 _994 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _310) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _311) + cbTextureTilingScale._m0[15u].w));
    float _1001 = (_994.x * 2.0) + (-1.0);
    float _1002 = (_994.y * 2.0) + (-1.0);
    float _1003 = dot(vec2(_1001, _1002), vec2(_1001, _1002));
    float _4128 = isnan(0.0) ? _1003 : (isnan(_1003) ? 0.0 : max(_1003, 0.0));
    float _1011 = ((_994.z - _980) * _889) + _980;
    float _1014 = ((cbMtdParam._m0[23u].y - _1011) * _961) + _1011;
    vec4 _1035 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _916) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _917) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _1041 = (_1035.x * 2.0) + (-1.0);
    float _1042 = (_1035.y * 2.0) + (-1.0);
    float _1043 = dot(vec2(_1041, _1042), vec2(_1041, _1042));
    float _4139 = isnan(0.0) ? _1043 : (isnan(_1043) ? 0.0 : max(_1043, 0.0));
    float _1058 = ((sqrt(1.0 - (isnan(1.0) ? _4128 : (isnan(_4128) ? 1.0 : min(_4128, 1.0)))) - _796) * _891) + _796;
    float _1061 = (((_1001 - _826) * _889) + _826) + (cbMtdParam._m0[21u].x * _826);
    float _1062 = (((_1002 - _827) * _890) + _827) + (cbMtdParam._m0[21u].x * _827);
    float _1073 = (((_1041 - _1061) + (_1061 * cbMtdParam._m0[22u].z)) * _961) + _1061;
    float _1074 = (((_1042 - _1062) + (_1062 * cbMtdParam._m0[22u].z)) * _961) + _1062;
    float _1075 = (_961 * (sqrt(1.0 - (isnan(1.0) ? _4139 : (isnan(_4139) ? 1.0 : min(_4139, 1.0)))) - _1058)) + _1058;
    float _1077 = cbMtdParam._m0[22u].x + _814.w;
    float _1080 = fma(_1075, _260, fma(_1074, _267, _1073 * _253));
    float _1083 = fma(_1075, _261, fma(_1074, _268, _1073 * _254));
    float _1086 = fma(_1075, _262, fma(_1074, _269, _1073 * _255));
    float _1090 = inversesqrt(dot(vec3(_1080, _1083, _1086), vec3(_1080, _1083, _1086)));
    float _1091 = _1090 * _1080;
    float _1092 = _1090 * _1083;
    float _1093 = _1090 * _1086;
    float _4150 = isnan(0.0) ? _1014 : (isnan(_1014) ? 0.0 : max(_1014, 0.0));
    float _1094 = isnan(1.0) ? _4150 : (isnan(_4150) ? 1.0 : min(_4150, 1.0));
    float _4161 = isnan(0.0) ? _1077 : (isnan(_1077) ? 0.0 : max(_1077, 0.0));
    float _4172 = isnan(0.0) ? _969 : (isnan(_969) ? 0.0 : max(_969, 0.0));
    float _4183 = isnan(0.0) ? _970 : (isnan(_970) ? 0.0 : max(_970, 0.0));
    float _4194 = isnan(0.0) ? _971 : (isnan(_971) ? 0.0 : max(_971, 0.0));
    float _1112 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _1152 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _1162 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _1152);
    float _1163 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _1152);
    float _1164 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _1152);
    float _1168 = inversesqrt(dot(vec3(_1162, _1163, _1164), vec3(_1162, _1163, _1164)));
    float _1169 = _1162 * _1168;
    float _1170 = _1163 * _1168;
    float _1171 = _1164 * _1168;
    vec4 _1176 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _1178 = _1176.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1332 = sqrt(((_1162 * _1162) + (_1163 * _1163)) + (_1164 * _1164));
        float _1338 = (cbMatDynParam._m0[5u].x * _1332) + cbMatDynParam._m0[5u].y;
        float _4205 = isnan(0.0) ? _1338 : (isnan(_1338) ? 0.0 : max(_1338, 0.0));
        float _1339 = isnan(1.0) ? _4205 : (isnan(_4205) ? 1.0 : min(_4205, 1.0));
        float _1343 = (cbMatDynParam._m0[5u].z * _1332) + cbMatDynParam._m0[5u].w;
        float _4216 = isnan(0.0) ? _1343 : (isnan(_1343) ? 0.0 : max(_1343, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4216 : (isnan(_4216) ? 1.0 : min(_4216, 1.0))) - _1339)) + _1339) < ((_1178 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _1189 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1190 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1208 = fma(_1093, cbSceneParam._m0[5u].z, fma(_1092, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _1091));
    float _1211 = fma(_1093, cbSceneParam._m0[6u].z, fma(_1092, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _1091));
    float _1214 = fma(_1093, cbSceneParam._m0[7u].z, fma(_1092, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _1091));
    uint _1227 = _291 + 9u;
    uint _1228 = _1227 + uint(cbMatDynParam._m0[0u].w);
    float _1234 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4172 : (isnan(_4172) ? 1.0 : min(_4172, 1.0)))) * cbInstanceData._m0[_1228].x;
    float _1235 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4183 : (isnan(_4183) ? 1.0 : min(_4183, 1.0)))) * cbInstanceData._m0[_1228].y;
    float _1236 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4194 : (isnan(_4194) ? 1.0 : min(_4194, 1.0)))) * cbInstanceData._m0[_1228].z;
    float _4227 = isnan(0.0) ? _1234 : (isnan(_1234) ? 0.0 : max(_1234, 0.0));
    float _1237 = isnan(1.0) ? _4227 : (isnan(_4227) ? 1.0 : min(_4227, 1.0));
    float _4238 = isnan(0.0) ? _1235 : (isnan(_1235) ? 0.0 : max(_1235, 0.0));
    float _1238 = isnan(1.0) ? _4238 : (isnan(_4238) ? 1.0 : min(_4238, 1.0));
    float _4249 = isnan(0.0) ? _1236 : (isnan(_1236) ? 0.0 : max(_1236, 0.0));
    float _1239 = isnan(1.0) ? _4249 : (isnan(_4249) ? 1.0 : min(_4249, 1.0));
    vec4 _1248 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1189, cbSceneParam._m0[86u].y * _1190));
    float _1252 = ((isnan(1.0) ? _4161 : (isnan(_4161) ? 1.0 : min(_4161, 1.0))) * TEXCOORD_5.w) * _1248.x;
    float _1253 = dot(vec3(_1091, _1092, _1093), vec3(_1169, _1170, _1171));
    float _1256 = _1253 * 2.0;
    float _1260 = (_1256 * _1091) - _1169;
    float _1261 = (_1256 * _1092) - _1170;
    float _1262 = (_1256 * _1093) - _1171;
    float _1266 = abs(dot(vec3(_1169, _1170, _1171), vec3(_1091, _1092, _1093)));
    float _4260 = isnan(0.0) ? _1266 : (isnan(_1266) ? 0.0 : max(_1266, 0.0));
    float _1268 = sqrt(_1094);
    float _1281 = exp2((_1268 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4260 : (isnan(_4260) ? 1.0 : min(_4260, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1268 * 3.0));
    float _1313 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1317 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1321 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1650;
    float _1652;
    float _1653;
    float _1654;
    float _1655;
    float _1656;
    float _1657;
    float _1658;
    float _1659;
    float _1660;
    float _1661;
    float _1662;
    float _1663;
    float _1664;
    float _1665;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1375 = fma(_1321, cbModelParam._m0[26u].z, fma(_1317, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1313));
        float _1379 = fma(_1321, cbModelParam._m0[27u].z, fma(_1317, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1313));
        float _1383 = fma(_1321, cbModelParam._m0[28u].z, fma(_1317, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1313));
        float _1408 = _1313 + _1091;
        float _1409 = _1317 + _1092;
        float _1410 = _1321 + _1093;
        float _1420 = fma(_1410, cbModelParam._m0[26u].z, fma(_1409, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1408)) - _1375;
        float _1421 = fma(_1410, cbModelParam._m0[27u].z, fma(_1409, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1408)) - _1379;
        float _1422 = fma(_1410, cbModelParam._m0[28u].z, fma(_1409, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1408)) - _1383;
        float _1426 = inversesqrt(dot(vec3(_1420, _1421, _1422), vec3(_1420, _1421, _1422)));
        float _1439 = ((_1426 * _1420) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1375 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1440 = ((_1426 * _1421) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1379 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1441 = ((_1426 * _1422) / cbModelParam._m0[34u].z) + ((((((_1383 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1444 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1439, _1440, _1441), 0.0);
        vec4 _1451 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1439, _1440, _1441), 0.0);
        vec4 _1458 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1439, _1440, _1441), 0.0);
        vec4 _1465 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1439, _1440, _1441), 0.0);
        float _1478 = exp2((_1444.w + (-0.5)) * 20.0) * 2.0;
        float _1479 = _1478 * (_1444.x + (-0.5));
        float _1480 = _1478 * (_1444.y + (-0.5));
        float _1481 = _1478 * (_1444.z + (-0.5));
        float _1488 = exp2((_1451.w + (-0.5)) * 20.0) * 2.0;
        float _1489 = _1488 * (_1451.x + (-0.5));
        float _1490 = _1488 * (_1451.y + (-0.5));
        float _1491 = _1488 * (_1451.z + (-0.5));
        float _1498 = exp2((_1458.w + (-0.5)) * 20.0) * 2.0;
        float _1499 = _1498 * (_1458.x + (-0.5));
        float _1500 = _1498 * (_1458.y + (-0.5));
        float _1501 = _1498 * (_1458.z + (-0.5));
        float _1508 = exp2((_1465.w + (-0.5)) * 20.0) * 2.0;
        float _1509 = _1508 * (_1465.x + (-0.5));
        float _1510 = _1508 * (_1465.y + (-0.5));
        float _1511 = _1508 * (_1465.z + (-0.5));
        float _1512 = isnan(0.0) ? _1509 : (isnan(_1509) ? 0.0 : max(_1509, 0.0));
        float _1513 = isnan(0.0) ? _1510 : (isnan(_1510) ? 0.0 : max(_1510, 0.0));
        float _1514 = isnan(0.0) ? _1511 : (isnan(_1511) ? 0.0 : max(_1511, 0.0));
        float _1515 = _1479 * 0.5;
        float _1516 = _1489 * 0.5;
        float _1517 = _1499 * 0.5;
        float _1518 = dot(vec3(_1515, _1516, _1517), vec3(_1515, _1516, _1517));
        float _1523 = (_1518 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1518);
        float _1532 = (dot(vec3(_1091, _1092, _1093), vec3(_1523 * _1515, _1523 * _1516, _1523 * _1517)) + 1.0) * 0.5;
        float _4286 = isnan(0.0) ? _1532 : (isnan(_1532) ? 0.0 : max(_1532, 0.0));
        float _1542 = sqrt(((_1516 * _1516) + (_1515 * _1515)) + (_1517 * _1517)) / (_1512 + 9.9999997473787516355514526367188e-06);
        float _4297 = isnan(0.0) ? _1542 : (isnan(_1542) ? 0.0 : max(_1542, 0.0));
        float _1543 = isnan(1.0) ? _4297 : (isnan(_4297) ? 1.0 : min(_4297, 1.0));
        float _1544 = _1543 * 2.0;
        float _1548 = (1.0 - _1543) / (_1543 + 1.0);
        float _4308 = isnan(0.0) ? _1548 : (isnan(_1548) ? 0.0 : max(_1548, 0.0));
        float _1549 = isnan(1.0) ? _4308 : (isnan(_4308) ? 1.0 : min(_4308, 1.0));
        float _1558 = ((((1.0 - _1549) * (_1544 + 2.0)) * exp2(log2(isnan(1.0) ? _4286 : (isnan(_4286) ? 1.0 : min(_4286, 1.0))) * (_1544 + 1.0))) + _1549) * _1512;
        float _1559 = _1480 * 0.5;
        float _1560 = _1490 * 0.5;
        float _1561 = _1500 * 0.5;
        float _1562 = dot(vec3(_1559, _1560, _1561), vec3(_1559, _1560, _1561));
        float _1567 = (_1562 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1562);
        float _1575 = (dot(vec3(_1091, _1092, _1093), vec3(_1567 * _1559, _1567 * _1560, _1567 * _1561)) + 1.0) * 0.5;
        float _4319 = isnan(0.0) ? _1575 : (isnan(_1575) ? 0.0 : max(_1575, 0.0));
        float _1584 = sqrt(((_1560 * _1560) + (_1559 * _1559)) + (_1561 * _1561)) / (_1513 + 9.9999997473787516355514526367188e-06);
        float _4330 = isnan(0.0) ? _1584 : (isnan(_1584) ? 0.0 : max(_1584, 0.0));
        float _1585 = isnan(1.0) ? _4330 : (isnan(_4330) ? 1.0 : min(_4330, 1.0));
        float _1586 = _1585 * 2.0;
        float _1590 = (1.0 - _1585) / (_1585 + 1.0);
        float _4341 = isnan(0.0) ? _1590 : (isnan(_1590) ? 0.0 : max(_1590, 0.0));
        float _1591 = isnan(1.0) ? _4341 : (isnan(_4341) ? 1.0 : min(_4341, 1.0));
        float _1600 = ((((1.0 - _1591) * (_1586 + 2.0)) * exp2(log2(isnan(1.0) ? _4319 : (isnan(_4319) ? 1.0 : min(_4319, 1.0))) * (_1586 + 1.0))) + _1591) * _1513;
        float _1601 = _1481 * 0.5;
        float _1602 = _1491 * 0.5;
        float _1603 = _1501 * 0.5;
        float _1604 = dot(vec3(_1601, _1602, _1603), vec3(_1601, _1602, _1603));
        float _1609 = (_1604 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1604);
        float _1617 = (dot(vec3(_1091, _1092, _1093), vec3(_1609 * _1601, _1609 * _1602, _1609 * _1603)) + 1.0) * 0.5;
        float _4352 = isnan(0.0) ? _1617 : (isnan(_1617) ? 0.0 : max(_1617, 0.0));
        float _1626 = sqrt(((_1602 * _1602) + (_1601 * _1601)) + (_1603 * _1603)) / (_1514 + 9.9999997473787516355514526367188e-06);
        float _4363 = isnan(0.0) ? _1626 : (isnan(_1626) ? 0.0 : max(_1626, 0.0));
        float _1627 = isnan(1.0) ? _4363 : (isnan(_4363) ? 1.0 : min(_4363, 1.0));
        float _1628 = _1627 * 2.0;
        float _1632 = (1.0 - _1627) / (_1627 + 1.0);
        float _4374 = isnan(0.0) ? _1632 : (isnan(_1632) ? 0.0 : max(_1632, 0.0));
        float _1633 = isnan(1.0) ? _4374 : (isnan(_4374) ? 1.0 : min(_4374, 1.0));
        float _1642 = ((((1.0 - _1633) * (_1628 + 2.0)) * exp2(log2(isnan(1.0) ? _4352 : (isnan(_4352) ? 1.0 : min(_4352, 1.0))) * (_1628 + 1.0))) + _1633) * _1514;
        _1650 = _1481;
        _1652 = _1480;
        _1653 = _1479;
        _1654 = _1491;
        _1655 = _1490;
        _1656 = _1489;
        _1657 = _1501;
        _1658 = _1500;
        _1659 = _1499;
        _1660 = _1514;
        _1661 = _1513;
        _1662 = _1512;
        _1663 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1558 : (isnan(_1558) ? 0.0 : max(_1558, 0.0)));
        _1664 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1600 : (isnan(_1600) ? 0.0 : max(_1600, 0.0)));
        _1665 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1642 : (isnan(_1642) ? 0.0 : max(_1642, 0.0)));
    }
    else
    {
        _1650 = _1651;
        _1652 = _1651;
        _1653 = _1651;
        _1654 = _1651;
        _1655 = _1651;
        _1656 = _1651;
        _1657 = _1651;
        _1658 = _1651;
        _1659 = _1651;
        _1660 = _1651;
        _1661 = _1651;
        _1662 = _1651;
        _1663 = 0.0;
        _1664 = 0.0;
        _1665 = 0.0;
    }
    float _1960;
    float _1961;
    float _1962;
    float _1963;
    float _1964;
    float _1965;
    float _1966;
    float _1967;
    float _1968;
    float _1969;
    float _1970;
    float _1971;
    float _1972;
    float _1973;
    float _1974;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1691 = fma(_1321, cbModelParam._m0[30u].z, fma(_1317, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1313));
        float _1695 = fma(_1321, cbModelParam._m0[31u].z, fma(_1317, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1313));
        float _1699 = fma(_1321, cbModelParam._m0[32u].z, fma(_1317, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1313));
        float _1722 = _1313 + _1091;
        float _1723 = _1317 + _1092;
        float _1724 = _1321 + _1093;
        float _1734 = fma(_1724, cbModelParam._m0[30u].z, fma(_1723, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1722)) - _1691;
        float _1735 = fma(_1724, cbModelParam._m0[31u].z, fma(_1723, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1722)) - _1695;
        float _1736 = fma(_1724, cbModelParam._m0[32u].z, fma(_1723, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1722)) - _1699;
        float _1740 = inversesqrt(dot(vec3(_1734, _1735, _1736), vec3(_1734, _1735, _1736)));
        float _1753 = ((_1740 * _1734) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1691 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1754 = ((_1740 * _1735) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1695 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1755 = ((_1740 * _1736) / cbModelParam._m0[35u].z) + ((((((_1699 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1757 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1753, _1754, _1755), 0.0);
        vec4 _1764 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1753, _1754, _1755), 0.0);
        vec4 _1771 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1753, _1754, _1755), 0.0);
        vec4 _1778 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1753, _1754, _1755), 0.0);
        float _1790 = exp2((_1757.w + (-0.5)) * 20.0) * 2.0;
        float _1791 = _1790 * (_1757.x + (-0.5));
        float _1792 = _1790 * (_1757.y + (-0.5));
        float _1793 = _1790 * (_1757.z + (-0.5));
        float _1800 = exp2((_1764.w + (-0.5)) * 20.0) * 2.0;
        float _1801 = _1800 * (_1764.x + (-0.5));
        float _1802 = _1800 * (_1764.y + (-0.5));
        float _1803 = _1800 * (_1764.z + (-0.5));
        float _1810 = exp2((_1771.w + (-0.5)) * 20.0) * 2.0;
        float _1811 = _1810 * (_1771.x + (-0.5));
        float _1812 = _1810 * (_1771.y + (-0.5));
        float _1813 = _1810 * (_1771.z + (-0.5));
        float _1820 = exp2((_1778.w + (-0.5)) * 20.0) * 2.0;
        float _1821 = _1820 * (_1778.x + (-0.5));
        float _1822 = _1820 * (_1778.y + (-0.5));
        float _1823 = _1820 * (_1778.z + (-0.5));
        float _1824 = isnan(0.0) ? _1821 : (isnan(_1821) ? 0.0 : max(_1821, 0.0));
        float _1825 = isnan(0.0) ? _1822 : (isnan(_1822) ? 0.0 : max(_1822, 0.0));
        float _1826 = isnan(0.0) ? _1823 : (isnan(_1823) ? 0.0 : max(_1823, 0.0));
        float _1827 = _1791 * 0.5;
        float _1828 = _1801 * 0.5;
        float _1829 = _1811 * 0.5;
        float _1830 = dot(vec3(_1827, _1828, _1829), vec3(_1827, _1828, _1829));
        float _1835 = (_1830 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1830);
        float _1843 = (dot(vec3(_1091, _1092, _1093), vec3(_1835 * _1827, _1835 * _1828, _1835 * _1829)) + 1.0) * 0.5;
        float _4415 = isnan(0.0) ? _1843 : (isnan(_1843) ? 0.0 : max(_1843, 0.0));
        float _1852 = sqrt(((_1828 * _1828) + (_1827 * _1827)) + (_1829 * _1829)) / (_1824 + 9.9999997473787516355514526367188e-06);
        float _4426 = isnan(0.0) ? _1852 : (isnan(_1852) ? 0.0 : max(_1852, 0.0));
        float _1853 = isnan(1.0) ? _4426 : (isnan(_4426) ? 1.0 : min(_4426, 1.0));
        float _1854 = _1853 * 2.0;
        float _1858 = (1.0 - _1853) / (_1853 + 1.0);
        float _4437 = isnan(0.0) ? _1858 : (isnan(_1858) ? 0.0 : max(_1858, 0.0));
        float _1859 = isnan(1.0) ? _4437 : (isnan(_4437) ? 1.0 : min(_4437, 1.0));
        float _1868 = ((((1.0 - _1859) * (_1854 + 2.0)) * exp2(log2(isnan(1.0) ? _4415 : (isnan(_4415) ? 1.0 : min(_4415, 1.0))) * (_1854 + 1.0))) + _1859) * _1824;
        float _1869 = _1792 * 0.5;
        float _1870 = _1802 * 0.5;
        float _1871 = _1812 * 0.5;
        float _1872 = dot(vec3(_1869, _1870, _1871), vec3(_1869, _1870, _1871));
        float _1877 = (_1872 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1872);
        float _1885 = (dot(vec3(_1091, _1092, _1093), vec3(_1877 * _1869, _1877 * _1870, _1877 * _1871)) + 1.0) * 0.5;
        float _4448 = isnan(0.0) ? _1885 : (isnan(_1885) ? 0.0 : max(_1885, 0.0));
        float _1894 = sqrt(((_1870 * _1870) + (_1869 * _1869)) + (_1871 * _1871)) / (_1825 + 9.9999997473787516355514526367188e-06);
        float _4459 = isnan(0.0) ? _1894 : (isnan(_1894) ? 0.0 : max(_1894, 0.0));
        float _1895 = isnan(1.0) ? _4459 : (isnan(_4459) ? 1.0 : min(_4459, 1.0));
        float _1896 = _1895 * 2.0;
        float _1900 = (1.0 - _1895) / (_1895 + 1.0);
        float _4470 = isnan(0.0) ? _1900 : (isnan(_1900) ? 0.0 : max(_1900, 0.0));
        float _1901 = isnan(1.0) ? _4470 : (isnan(_4470) ? 1.0 : min(_4470, 1.0));
        float _1910 = ((((1.0 - _1901) * (_1896 + 2.0)) * exp2(log2(isnan(1.0) ? _4448 : (isnan(_4448) ? 1.0 : min(_4448, 1.0))) * (_1896 + 1.0))) + _1901) * _1825;
        float _1911 = _1793 * 0.5;
        float _1912 = _1803 * 0.5;
        float _1913 = _1813 * 0.5;
        float _1914 = dot(vec3(_1911, _1912, _1913), vec3(_1911, _1912, _1913));
        float _1919 = (_1914 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1914);
        float _1927 = (dot(vec3(_1091, _1092, _1093), vec3(_1919 * _1911, _1919 * _1912, _1919 * _1913)) + 1.0) * 0.5;
        float _4481 = isnan(0.0) ? _1927 : (isnan(_1927) ? 0.0 : max(_1927, 0.0));
        float _1936 = sqrt(((_1912 * _1912) + (_1911 * _1911)) + (_1913 * _1913)) / (_1826 + 9.9999997473787516355514526367188e-06);
        float _4492 = isnan(0.0) ? _1936 : (isnan(_1936) ? 0.0 : max(_1936, 0.0));
        float _1937 = isnan(1.0) ? _4492 : (isnan(_4492) ? 1.0 : min(_4492, 1.0));
        float _1938 = _1937 * 2.0;
        float _1942 = (1.0 - _1937) / (_1937 + 1.0);
        float _4503 = isnan(0.0) ? _1942 : (isnan(_1942) ? 0.0 : max(_1942, 0.0));
        float _1943 = isnan(1.0) ? _4503 : (isnan(_4503) ? 1.0 : min(_4503, 1.0));
        float _1952 = ((((1.0 - _1943) * (_1938 + 2.0)) * exp2(log2(isnan(1.0) ? _4481 : (isnan(_4481) ? 1.0 : min(_4481, 1.0))) * (_1938 + 1.0))) + _1943) * _1826;
        _1960 = _1793;
        _1961 = _1792;
        _1962 = _1791;
        _1963 = _1803;
        _1964 = _1802;
        _1965 = _1801;
        _1966 = _1813;
        _1967 = _1812;
        _1968 = _1811;
        _1969 = _1826;
        _1970 = _1825;
        _1971 = _1824;
        _1972 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1868 : (isnan(_1868) ? 0.0 : max(_1868, 0.0)));
        _1973 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1910 : (isnan(_1910) ? 0.0 : max(_1910, 0.0)));
        _1974 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1952 : (isnan(_1952) ? 0.0 : max(_1952, 0.0)));
    }
    else
    {
        _1960 = _1651;
        _1961 = _1651;
        _1962 = _1651;
        _1963 = _1651;
        _1964 = _1651;
        _1965 = _1651;
        _1966 = _1651;
        _1967 = _1651;
        _1968 = _1651;
        _1969 = _1651;
        _1970 = _1651;
        _1971 = _1651;
        _1972 = 0.0;
        _1973 = 0.0;
        _1974 = 0.0;
    }
    float _1984 = (cbModelParam._m0[1u].x * (_1972 - _1663)) + _1663;
    float _1985 = (cbModelParam._m0[1u].x * (_1973 - _1664)) + _1664;
    float _1986 = (cbModelParam._m0[1u].x * (_1974 - _1665)) + _1665;
    float _2007 = fma(_1986, cbSceneParam._m0[89u].z, fma(_1985, cbSceneParam._m0[89u].y, _1984 * cbSceneParam._m0[89u].x));
    float _2010 = fma(_1986, cbSceneParam._m0[90u].z, fma(_1985, cbSceneParam._m0[90u].y, _1984 * cbSceneParam._m0[90u].x));
    float _2013 = fma(_1986, cbSceneParam._m0[91u].z, fma(_1985, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1984));
    float _2028 = _1260 * 0.5;
    float _2029 = _1261 * 0.5;
    float _2030 = _1262 * 0.5;
    float _2031 = dot(vec4(_2028, _2029, _2030, 1.0), vec4(_1962, _1965, _1968, _1971));
    float _2034 = dot(vec4(_2028, _2029, _2030, 1.0), vec4(_1961, _1964, _1967, _1970));
    float _2037 = dot(vec4(_2028, _2029, _2030, 1.0), vec4(_1960, _1963, _1966, _1969));
    float _2071;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _2044 = dot(vec4(_2028, _2029, _2030, 1.0), vec4(_1650, _1654, _1657, _1660));
        float _2048 = dot(vec4(_2028, _2029, _2030, 1.0), vec4(_1652, _1655, _1658, _1661));
        float _2052 = dot(vec4(_2028, _2029, _2030, 1.0), vec4(_1653, _1656, _1659, _1662));
        float _2059 = dot(vec4(cbModelParam._m0[39u]), vec4(_2028, _2029, _2030, 1.0));
        _2071 = dot(vec3(isnan(0.0) ? _2052 : (isnan(_2052) ? 0.0 : max(_2052, 0.0)), isnan(0.0) ? _2048 : (isnan(_2048) ? 0.0 : max(_2048, 0.0)), isnan(0.0) ? _2044 : (isnan(_2044) ? 0.0 : max(_2044, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_2059) ? 0.0 : (isnan(0.0) ? _2059 : max(0.0, _2059))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _2071 = 1.0;
    }
    float _2082;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _2073 = dot(vec4(cbModelParam._m0[40u]), vec4(_2028, _2029, _2030, 1.0));
        _2082 = dot(vec3(isnan(0.0) ? _2031 : (isnan(_2031) ? 0.0 : max(_2031, 0.0)), isnan(0.0) ? _2034 : (isnan(_2034) ? 0.0 : max(_2034, 0.0)), isnan(0.0) ? _2037 : (isnan(_2037) ? 0.0 : max(_2037, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_2073) ? 0.0 : (isnan(0.0) ? _2073 : max(0.0, _2073))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _2082 = 1.0;
    }
    float _2086 = (_2082 * cbModelParam._m0[1u].x) + (_2071 * (1.0 - cbModelParam._m0[1u].x));
    float _2096 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _1094);
    float _2097 = isnan(_2096) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _2096 : min(cbModelParam._m0[25u].z, _2096));
    float _2177;
    float _2179;
    float _2181;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _2144 = fma(_1321, cbModelParam._m0[13u].z, fma(_1317, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1313)) + cbModelParam._m0[13u].w;
        float _2148 = fma(_1321, cbModelParam._m0[14u].z, fma(_1317, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1313)) + cbModelParam._m0[14u].w;
        float _2152 = fma(_1321, cbModelParam._m0[15u].z, fma(_1317, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1313)) + cbModelParam._m0[15u].w;
        float _2155 = fma(_1262, cbModelParam._m0[13u].z, fma(_1261, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1260));
        float _2158 = fma(_1262, cbModelParam._m0[14u].z, fma(_1261, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1260));
        float _2161 = fma(_1262, cbModelParam._m0[15u].z, fma(_1261, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1260));
        float _2189;
        if (_2155 > 0.0)
        {
            _2189 = abs((1.0 - _2144) / _2155);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_2155 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_2144 + 1.0) / _2155);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _2189 = frontier_phi_17_15_ladder;
        }
        float _2390;
        if (_2158 > 0.0)
        {
            _2390 = abs((1.0 - _2148) / _2158);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_2158 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_2148 + 1.0) / _2158);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2390 = frontier_phi_26_22_ladder;
        }
        float _2633;
        if (_2161 > 0.0)
        {
            _2633 = abs((1.0 - _2152) / _2161);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_2161 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_2152 + 1.0) / _2161);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2633 = frontier_phi_38_33_ladder;
        }
        float _2635 = isnan(_2390) ? _2189 : (isnan(_2189) ? _2390 : min(_2189, _2390));
        float _2636 = isnan(_2633) ? _2635 : (isnan(_2635) ? _2633 : min(_2635, _2633));
        float _2640 = (_2636 * _2155) + _2144;
        float _2641 = (_2636 * _2158) + _2148;
        float _2642 = (_2636 * _2161) + _2152;
        float _2643 = _2636 * 9.9999997473787516355514526367188e-05;
        float _2645 = (-1.0) - _2643;
        float _2647 = _2643 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2642 > _2647) || ((_2642 < _2645) || ((_2641 > _2647) || ((_2641 < _2645) || ((_2640 < _2645) || (_2640 > _2647))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2766 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2642, cbModelParam._m0[9u].z, fma(_2641, cbModelParam._m0[9u].y, _2640 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2642, cbModelParam._m0[10u].z, fma(_2641, cbModelParam._m0[10u].y, _2640 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2642, cbModelParam._m0[11u].z, fma(_2641, cbModelParam._m0[11u].y, _2640 * cbModelParam._m0[11u].x))), _2097);
            frontier_phi_16_38_ladder = _2766.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2766.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2766.x * cbModelParam._m0[1u].y;
        }
        _2177 = frontier_phi_16_38_ladder_2;
        _2179 = frontier_phi_16_38_ladder_1;
        _2181 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _2165 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1260, _1261, _1262), _2097);
        _2177 = _2165.x * cbModelParam._m0[1u].y;
        _2179 = _2165.y * cbModelParam._m0[1u].y;
        _2181 = _2165.z * cbModelParam._m0[1u].y;
    }
    float _2185 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _1094);
    float _2186 = isnan(_2185) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2185 : min(cbModelParam._m0[25u].w, _2185));
    float _2276;
    float _2278;
    float _2280;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2240 = fma(_1321, cbModelParam._m0[21u].z, fma(_1317, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1313)) + cbModelParam._m0[21u].w;
        float _2244 = fma(_1321, cbModelParam._m0[22u].z, fma(_1317, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1313)) + cbModelParam._m0[22u].w;
        float _2248 = fma(_1321, cbModelParam._m0[23u].z, fma(_1317, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1313)) + cbModelParam._m0[23u].w;
        float _2251 = fma(_1262, cbModelParam._m0[21u].z, fma(_1261, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1260));
        float _2254 = fma(_1262, cbModelParam._m0[22u].z, fma(_1261, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1260));
        float _2257 = fma(_1262, cbModelParam._m0[23u].z, fma(_1261, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1260));
        float _2395;
        if (_2251 > 0.0)
        {
            _2395 = abs((1.0 - _2240) / _2251);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_2251 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_2240 + 1.0) / _2251);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2395 = frontier_phi_28_24_ladder;
        }
        float _2660;
        if (_2254 > 0.0)
        {
            _2660 = abs((1.0 - _2244) / _2254);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_2254 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_2244 + 1.0) / _2254);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2660 = frontier_phi_40_35_ladder;
        }
        float _2865;
        if (_2257 > 0.0)
        {
            _2865 = abs((1.0 - _2248) / _2257);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_2257 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_2248 + 1.0) / _2257);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2865 = frontier_phi_49_46_ladder;
        }
        float _2867 = isnan(_2660) ? _2395 : (isnan(_2395) ? _2660 : min(_2395, _2660));
        float _2868 = isnan(_2865) ? _2867 : (isnan(_2867) ? _2865 : min(_2867, _2865));
        float _2872 = (_2868 * _2251) + _2240;
        float _2873 = (_2868 * _2254) + _2244;
        float _2874 = (_2868 * _2257) + _2248;
        float _2875 = _2868 * 9.9999997473787516355514526367188e-05;
        float _2876 = (-1.0) - _2875;
        float _2878 = _2875 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2874 > _2878) || ((_2874 < _2876) || ((_2873 > _2878) || ((_2873 < _2876) || ((_2872 < _2876) || (_2872 > _2878))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _3073 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2874, cbModelParam._m0[17u].z, fma(_2873, cbModelParam._m0[17u].y, _2872 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2874, cbModelParam._m0[18u].z, fma(_2873, cbModelParam._m0[18u].y, _2872 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2874, cbModelParam._m0[19u].z, fma(_2873, cbModelParam._m0[19u].y, _2872 * cbModelParam._m0[19u].x))), _2186);
            frontier_phi_25_49_ladder = _3073.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _3073.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _3073.x * cbModelParam._m0[1u].z;
        }
        _2276 = frontier_phi_25_49_ladder_2;
        _2278 = frontier_phi_25_49_ladder_1;
        _2280 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _2260 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1260, _1261, _1262), _2186);
        _2276 = _2260.x * cbModelParam._m0[1u].z;
        _2278 = _2260.y * cbModelParam._m0[1u].z;
        _2280 = _2260.z * cbModelParam._m0[1u].z;
    }
    float _2292 = ((((1.0 - _1281) * ((_1268 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_1281 * _1268)) * _1252;
    float _2293 = _2292 * ((cbModelParam._m0[1u].w * (_2276 - _2177)) + _2177);
    float _2294 = _2292 * ((cbModelParam._m0[1u].w * (_2278 - _2179)) + _2179);
    float _2295 = _2292 * ((cbModelParam._m0[1u].w * (_2280 - _2181)) + _2181);
    float _2298 = fma(_2295, cbSceneParam._m0[89u].z, fma(_2294, cbSceneParam._m0[89u].y, _2293 * cbSceneParam._m0[89u].x));
    float _2301 = fma(_2295, cbSceneParam._m0[90u].z, fma(_2294, cbSceneParam._m0[90u].y, _2293 * cbSceneParam._m0[90u].x));
    float _2304 = fma(_2295, cbSceneParam._m0[91u].z, fma(_2294, cbSceneParam._m0[91u].y, _2293 * cbSceneParam._m0[91u].x));
    uvec4 _2314 = floatBitsToUint(cbInstanceData._m0[_291 + 5u]);
    uint _2316 = _2314.x * 14u;
    uint _2317 = _2316 + 13u;
    float _2324 = _1252 + (-1.0);
    float _2329 = (cbLight._m0[_2317].x * _2324) + 1.0;
    float _2330 = (cbLight._m0[_2317].y * _2324) + 1.0;
    float _2331 = (cbLight._m0[_2317].z * _2324) + 1.0;
    float _2332 = (cbLight._m0[_2317].w * _2324) + 1.0;
    uint _2333 = _2316 + 5u;
    float _2339 = isnan(1.0) ? _2330 : (isnan(_2330) ? 1.0 : min(_2330, 1.0));
    uint _2343 = _2316 + 4u;
    float _2349 = isnan(1.0) ? _2329 : (isnan(_2329) ? 1.0 : min(_2329, 1.0));
    uint _2353 = _2316 | 1u;
    float _2364 = dot(vec3(cbLight._m0[_2316].xyz), vec3(_1091, _1092, _1093));
    float _2367 = dot(vec3(cbLight._m0[_2353].xyz), vec3(_1091, _1092, _1093));
    float _4639 = isnan(0.0) ? _2364 : (isnan(_2364) ? 0.0 : max(_2364, 0.0));
    float _4650 = isnan(0.0) ? _2367 : (isnan(_2367) ? 0.0 : max(_2367, 0.0));
    float _2372 = (isnan(1.0) ? _4639 : (isnan(_4639) ? 1.0 : min(_4639, 1.0))) * 0.3183098733425140380859375;
    float _2374 = (isnan(1.0) ? _4650 : (isnan(_4650) ? 1.0 : min(_4650, 1.0))) * 0.3183098733425140380859375;
    float _2381 = ((cbLight._m0[_2333].x * _2339) * _2374) + ((cbLight._m0[_2343].x * _2349) * _2372);
    float _2382 = ((_2339 * cbLight._m0[_2333].y) * _2374) + ((_2349 * cbLight._m0[_2343].y) * _2372);
    float _2383 = ((_2339 * cbLight._m0[_2333].z) * _2374) + ((_2349 * cbLight._m0[_2343].z) * _2372);
    uvec4 _2387 = floatBitsToUint(cbLight._m0[_2316 + 12u]);
    bool _2389 = _2387.x == 0u;
    float _2400;
    float _2402;
    float _2404;
    if (_2389)
    {
        _2400 = _2381;
        _2402 = _2382;
        _2404 = _2383;
    }
    else
    {
        uint _2408 = _2316 + 6u;
        float _2424 = (dot(vec3(cbLight._m0[_2316 + 2u].xyz), vec3(_1091, _1092, _1093)) * 0.5) + 0.5;
        float _2425 = _2424 * _2424;
        float _4661 = isnan(0.0) ? _2425 : (isnan(_2425) ? 0.0 : max(_2425, 0.0));
        float _2426 = isnan(1.0) ? _4661 : (isnan(_4661) ? 1.0 : min(_4661, 1.0));
        float _2427 = isnan(1.0) ? _2331 : (isnan(_2331) ? 1.0 : min(_2331, 1.0));
        _2400 = (((cbLight._m0[_2408].x * 0.3183098733425140380859375) * _2426) * _2427) + _2381;
        _2402 = (((cbLight._m0[_2408].y * 0.3183098733425140380859375) * _2426) * _2427) + _2382;
        _2404 = (((cbLight._m0[_2408].z * 0.3183098733425140380859375) * _2426) * _2427) + _2383;
    }
    bool _2407 = _2387.y == 0u;
    float _2445;
    float _2447;
    float _2449;
    if (_2407)
    {
        _2445 = _2400;
        _2447 = _2402;
        _2449 = _2404;
    }
    else
    {
        uint _2604 = _2316 + 7u;
        float _2620 = (dot(vec3(cbLight._m0[_2316 + 3u].xyz), vec3(_1091, _1092, _1093)) * 0.5) + 0.5;
        float _2621 = _2620 * _2620;
        float _4677 = isnan(0.0) ? _2621 : (isnan(_2621) ? 0.0 : max(_2621, 0.0));
        float _2622 = isnan(1.0) ? _4677 : (isnan(_4677) ? 1.0 : min(_4677, 1.0));
        float _2623 = isnan(1.0) ? _2332 : (isnan(_2332) ? 1.0 : min(_2332, 1.0));
        _2445 = (((cbLight._m0[_2604].x * 0.3183098733425140380859375) * _2622) * _2623) + _2400;
        _2447 = (((cbLight._m0[_2604].y * 0.3183098733425140380859375) * _2622) * _2623) + _2402;
        _2449 = (((cbLight._m0[_2604].z * 0.3183098733425140380859375) * _2622) * _2623) + _2404;
    }
    uint _2452 = _2316 + 8u;
    float _2465 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2316].w)) * _1094) * 0.949999988079071044921875);
    float _2466 = _2465 * _2465;
    float _2467 = cbLight._m0[_2316].x + _1169;
    float _2468 = cbLight._m0[_2316].y + _1170;
    float _2469 = cbLight._m0[_2316].z + _1171;
    float _2473 = inversesqrt(dot(vec3(_2467, _2468, _2469), vec3(_2467, _2468, _2469)));
    float _2474 = _2473 * _2467;
    float _2475 = _2473 * _2468;
    float _2476 = _2473 * _2469;
    float _2477 = dot(vec3(_1091, _1092, _1093), vec3(cbLight._m0[_2316].xyz));
    float _4693 = isnan(0.0) ? _2477 : (isnan(_2477) ? 0.0 : max(_2477, 0.0));
    float _2480 = isnan(1.0) ? _4693 : (isnan(_4693) ? 1.0 : min(_4693, 1.0));
    float _4704 = isnan(0.0) ? _1253 : (isnan(_1253) ? 0.0 : max(_1253, 0.0));
    float _2481 = isnan(1.0) ? _4704 : (isnan(_4704) ? 1.0 : min(_4704, 1.0));
    float _2482 = dot(vec3(_1091, _1092, _1093), vec3(_2474, _2475, _2476));
    float _4715 = isnan(0.0) ? _2482 : (isnan(_2482) ? 0.0 : max(_2482, 0.0));
    float _2485 = isnan(1.0) ? _4715 : (isnan(_4715) ? 1.0 : min(_4715, 1.0));
    float _2486 = dot(vec3(cbLight._m0[_2316].xyz), vec3(_2474, _2475, _2476));
    float _4726 = isnan(0.0) ? _2486 : (isnan(_2486) ? 0.0 : max(_2486, 0.0));
    float _2490 = _2466 * _2466;
    float _2494 = ((_2485 * _2485) * (_2490 + (-1.0))) + 1.0;
    float _2505 = (exp2(log2(1.0 - (isnan(1.0) ? _4726 : (isnan(_4726) ? 1.0 : min(_4726, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2506 = 1.0 - _2466;
    float _2517 = (0.5 / (((_2481 * ((_2480 * _2506) + _2466)) + 9.9999999392252902907785028219223e-09) + (((_2481 * _2506) + _2466) * _2480))) * _2480;
    float _4737 = isnan(0.0) ? _2517 : (isnan(_2517) ? 0.0 : max(_2517, 0.0));
    float _2519 = (isnan(1.0) ? _4737 : (isnan(_4737) ? 1.0 : min(_4737, 1.0))) * (_2490 / ((_2494 * _2494) * 3.141590118408203125));
    uint _2530 = _2316 + 9u;
    float _2541 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2353].w)) * _1094) * 0.949999988079071044921875);
    float _2542 = _2541 * _2541;
    float _2543 = cbLight._m0[_2353].x + _1169;
    float _2544 = cbLight._m0[_2353].y + _1170;
    float _2545 = cbLight._m0[_2353].z + _1171;
    float _2549 = inversesqrt(dot(vec3(_2543, _2544, _2545), vec3(_2543, _2544, _2545)));
    float _2550 = _2549 * _2543;
    float _2551 = _2549 * _2544;
    float _2552 = _2549 * _2545;
    float _2553 = dot(vec3(_1091, _1092, _1093), vec3(cbLight._m0[_2353].xyz));
    float _4748 = isnan(0.0) ? _2553 : (isnan(_2553) ? 0.0 : max(_2553, 0.0));
    float _2556 = isnan(1.0) ? _4748 : (isnan(_4748) ? 1.0 : min(_4748, 1.0));
    float _2557 = dot(vec3(_1091, _1092, _1093), vec3(_2550, _2551, _2552));
    float _4759 = isnan(0.0) ? _2557 : (isnan(_2557) ? 0.0 : max(_2557, 0.0));
    float _2560 = isnan(1.0) ? _4759 : (isnan(_4759) ? 1.0 : min(_4759, 1.0));
    float _2561 = dot(vec3(cbLight._m0[_2353].xyz), vec3(_2550, _2551, _2552));
    float _4770 = isnan(0.0) ? _2561 : (isnan(_2561) ? 0.0 : max(_2561, 0.0));
    float _2565 = _2542 * _2542;
    float _2569 = ((_2560 * _2560) * (_2565 + (-1.0))) + 1.0;
    float _2578 = (exp2(log2(1.0 - (isnan(1.0) ? _4770 : (isnan(_4770) ? 1.0 : min(_4770, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2579 = 1.0 - _2542;
    float _2589 = (0.5 / (((_2481 * ((_2556 * _2579) + _2542)) + 9.9999999392252902907785028219223e-09) + (((_2481 * _2579) + _2542) * _2556))) * _2556;
    float _4781 = isnan(0.0) ? _2589 : (isnan(_2589) ? 0.0 : max(_2589, 0.0));
    float _2591 = (isnan(1.0) ? _4781 : (isnan(_4781) ? 1.0 : min(_4781, 1.0))) * (_2565 / ((_2569 * _2569) * 3.141590118408203125));
    float _2601 = (((_2578 * cbLight._m0[_2530].x) * _2591) * _2339) + (((_2505 * cbLight._m0[_2452].x) * _2519) * _2349);
    float _2602 = (((_2578 * cbLight._m0[_2530].y) * _2591) * _2339) + (((_2505 * cbLight._m0[_2452].y) * _2519) * _2349);
    float _2603 = (((_2578 * cbLight._m0[_2530].z) * _2591) * _2339) + (((_2505 * cbLight._m0[_2452].z) * _2519) * _2349);
    float _2665;
    float _2667;
    float _2669;
    if (_2389)
    {
        _2665 = _2601;
        _2667 = _2602;
        _2669 = _2603;
    }
    else
    {
        uint _2671 = _2316 + 2u;
        uint _2675 = _2316 + 10u;
        float _2689 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2671].w)) * _1094) * 0.949999988079071044921875);
        float _2690 = _2689 * _2689;
        float _2691 = cbLight._m0[_2671].x + _1169;
        float _2692 = cbLight._m0[_2671].y + _1170;
        float _2693 = cbLight._m0[_2671].z + _1171;
        float _2697 = inversesqrt(dot(vec3(_2691, _2692, _2693), vec3(_2691, _2692, _2693)));
        float _2698 = _2697 * _2691;
        float _2699 = _2697 * _2692;
        float _2700 = _2697 * _2693;
        float _2701 = dot(vec3(_1091, _1092, _1093), vec3(cbLight._m0[_2671].xyz));
        float _4792 = isnan(0.0) ? _2701 : (isnan(_2701) ? 0.0 : max(_2701, 0.0));
        float _2704 = isnan(1.0) ? _4792 : (isnan(_4792) ? 1.0 : min(_4792, 1.0));
        float _2705 = dot(vec3(_1091, _1092, _1093), vec3(_2698, _2699, _2700));
        float _4803 = isnan(0.0) ? _2705 : (isnan(_2705) ? 0.0 : max(_2705, 0.0));
        float _2708 = isnan(1.0) ? _4803 : (isnan(_4803) ? 1.0 : min(_4803, 1.0));
        float _2709 = dot(vec3(cbLight._m0[_2671].xyz), vec3(_2698, _2699, _2700));
        float _4814 = isnan(0.0) ? _2709 : (isnan(_2709) ? 0.0 : max(_2709, 0.0));
        float _2713 = _2690 * _2690;
        float _2717 = ((_2708 * _2708) * (_2713 + (-1.0))) + 1.0;
        float _2726 = (exp2(log2(1.0 - (isnan(1.0) ? _4814 : (isnan(_4814) ? 1.0 : min(_4814, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2727 = 1.0 - _2690;
        float _2737 = (0.5 / (((_2481 * ((_2704 * _2727) + _2690)) + 9.9999999392252902907785028219223e-09) + (((_2481 * _2727) + _2690) * _2704))) * _2704;
        float _4825 = isnan(0.0) ? _2737 : (isnan(_2737) ? 0.0 : max(_2737, 0.0));
        float _2739 = (isnan(1.0) ? _4825 : (isnan(_4825) ? 1.0 : min(_4825, 1.0))) * (_2713 / ((_2717 * _2717) * 3.141590118408203125));
        float _2740 = isnan(1.0) ? _2331 : (isnan(_2331) ? 1.0 : min(_2331, 1.0));
        _2665 = (((_2726 * cbLight._m0[_2675].x) * _2739) * _2740) + _2601;
        _2667 = (((_2726 * cbLight._m0[_2675].y) * _2739) * _2740) + _2602;
        _2669 = (((_2726 * cbLight._m0[_2675].z) * _2739) * _2740) + _2603;
    }
    float _2775;
    float _2777;
    float _2779;
    if (_2407)
    {
        _2775 = _2665;
        _2777 = _2667;
        _2779 = _2669;
    }
    else
    {
        uint _2786 = _2316 + 3u;
        uint _2790 = _2316 + 11u;
        float _2804 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2786].w)) * _1094) * 0.949999988079071044921875);
        float _2805 = _2804 * _2804;
        float _2806 = cbLight._m0[_2786].x + _1169;
        float _2807 = cbLight._m0[_2786].y + _1170;
        float _2808 = cbLight._m0[_2786].z + _1171;
        float _2812 = inversesqrt(dot(vec3(_2806, _2807, _2808), vec3(_2806, _2807, _2808)));
        float _2813 = _2812 * _2806;
        float _2814 = _2812 * _2807;
        float _2815 = _2812 * _2808;
        float _2816 = dot(vec3(_1091, _1092, _1093), vec3(cbLight._m0[_2786].xyz));
        float _4841 = isnan(0.0) ? _2816 : (isnan(_2816) ? 0.0 : max(_2816, 0.0));
        float _2819 = isnan(1.0) ? _4841 : (isnan(_4841) ? 1.0 : min(_4841, 1.0));
        float _2820 = dot(vec3(_1091, _1092, _1093), vec3(_2813, _2814, _2815));
        float _4852 = isnan(0.0) ? _2820 : (isnan(_2820) ? 0.0 : max(_2820, 0.0));
        float _2823 = isnan(1.0) ? _4852 : (isnan(_4852) ? 1.0 : min(_4852, 1.0));
        float _2824 = dot(vec3(cbLight._m0[_2786].xyz), vec3(_2813, _2814, _2815));
        float _4863 = isnan(0.0) ? _2824 : (isnan(_2824) ? 0.0 : max(_2824, 0.0));
        float _2828 = _2805 * _2805;
        float _2832 = ((_2823 * _2823) * (_2828 + (-1.0))) + 1.0;
        float _2841 = (exp2(log2(1.0 - (isnan(1.0) ? _4863 : (isnan(_4863) ? 1.0 : min(_4863, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2842 = 1.0 - _2805;
        float _2852 = (0.5 / (((_2481 * ((_2819 * _2842) + _2805)) + 9.9999999392252902907785028219223e-09) + (((_2481 * _2842) + _2805) * _2819))) * _2819;
        float _4874 = isnan(0.0) ? _2852 : (isnan(_2852) ? 0.0 : max(_2852, 0.0));
        float _2854 = (isnan(1.0) ? _4874 : (isnan(_4874) ? 1.0 : min(_4874, 1.0))) * (_2828 / ((_2832 * _2832) * 3.141590118408203125));
        float _2855 = isnan(1.0) ? _2332 : (isnan(_2332) ? 1.0 : min(_2332, 1.0));
        _2775 = (((_2841 * cbLight._m0[_2790].x) * _2854) * _2855) + _2665;
        _2777 = (((_2841 * cbLight._m0[_2790].y) * _2854) * _2855) + _2667;
        _2779 = (((_2841 * cbLight._m0[_2790].z) * _2854) * _2855) + _2669;
    }
    float _2990;
    float _2992;
    float _2994;
    float _2996;
    float _2998;
    float _3000;
    if (_2314.y == 0u)
    {
        float _2930 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2931 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2930;
        float _2932 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2930;
        float _2933 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2930;
        uvec4 _2945 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2946 = _2945.x;
        uint _2957 = uint((float(_2945.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1190) / _2946))) + floor(float(uint(cbSceneParam._m0[85u].x * _1189) / _2946)));
        float _2967 = (log2(_2933 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2968 = isnan(0.0) ? _2967 : (isnan(_2967) ? 0.0 : max(_2967, 0.0));
        uint _2971 = uint(isnan(14.0) ? _2968 : (isnan(_2968) ? 14.0 : min(_2968, 14.0)));
        uvec4 _2976 = texelFetch(g_lightClusterGridBuffer, int(((_2971 << 2u) + (_2957 << 6u)) >> 2u));
        uint _2977 = _2976.x;
        uint _2978 = _2945.z;
        float _3078;
        float _3080;
        float _3082;
        float _3084;
        float _3086;
        float _3088;
        if (((((1u << ((_2978 >> 4u) & 15u)) + 4294967295u) & _2977) == 0u) || ((_2978 & 240u) == 0u))
        {
            _3078 = 0.0;
            _3080 = 0.0;
            _3082 = 0.0;
            _3084 = 0.0;
            _3086 = 0.0;
            _3088 = 0.0;
        }
        else
        {
            float _3079;
            float _3081;
            float _3083;
            float _3085;
            float _3087;
            float _3089;
            float _3230 = 0.0;
            float _3231 = 0.0;
            float _3232 = 0.0;
            float _3233 = 0.0;
            float _3234 = 0.0;
            float _3235 = 0.0;
            uint _3236 = 0u;
            uint _3245;
            bool _3246;
            for (;;)
            {
                _3245 = texelFetch(g_lightClassification, int((((_2971 << 5u) + (_2957 << 9u)) + (_3236 << 2u)) >> 2u)).x;
                _3246 = _3245 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3246)
                {
                    frontier_phi_66_pred = _3230;
                    frontier_phi_66_pred_1 = _3235;
                    frontier_phi_66_pred_2 = _3234;
                    frontier_phi_66_pred_3 = _3233;
                    frontier_phi_66_pred_4 = _3232;
                    frontier_phi_66_pred_5 = _3231;
                }
                else
                {
                    float _3375;
                    float _3376;
                    float _3377;
                    float _3378;
                    float _3379;
                    float _3380;
                    uint _3381;
                    _3375 = _3230;
                    _3376 = _3231;
                    _3377 = _3232;
                    _3378 = _3233;
                    _3379 = _3234;
                    _3380 = _3235;
                    _3381 = _3245;
                    float _3302;
                    float _3303;
                    float _3304;
                    float _3305;
                    float _3306;
                    float _3307;
                    for (;;)
                    {
                        uint _3385 = uint(findLSB(_3381)) + (_3236 << 5u);
                        uint _3382 = (_3381 + 4294967295u) & _3381;
                        uint _3387 = _3385 * 48u;
                        vec4 _3401 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3387)).x, texelFetch(g_PointLightRenderingBuffer, int(_3387 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3387 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3387 + 3u)).x));
                        uint _3407 = (_3385 * 48u) + 4u;
                        vec4 _3420 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3407)).x, texelFetch(g_PointLightRenderingBuffer, int(_3407 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3407 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3407 + 3u)).x));
                        uint _3426 = (_3385 * 48u) + 8u;
                        vec3 _3437 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3426)).x, texelFetch(g_PointLightRenderingBuffer, int(_3426 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3426 + 2u)).x));
                        float _3441 = _3401.x - _2931;
                        float _3442 = _3401.y - _2932;
                        float _3443 = _3401.z - _2933;
                        float _3444 = dot(vec3(_3441, _3442, _3443), vec3(_3441, _3442, _3443));
                        float _3447 = inversesqrt(_3444);
                        float _3448 = _3447 * _3441;
                        float _3449 = _3447 * _3442;
                        float _3450 = _3447 * _3443;
                        float _3451 = dot(vec3(_1208, _1211, _1214), vec3(_3448, _3449, _3450));
                        float _3456 = 1.0 - (_3444 * _3401.w);
                        float _4900 = isnan(0.0) ? _3456 : (isnan(_3456) ? 0.0 : max(_3456, 0.0));
                        float _3457 = isnan(1.0) ? _4900 : (isnan(_4900) ? 1.0 : min(_4900, 1.0));
                        float _3458 = sqrt(_3444) * _3420.w;
                        float _3461 = 1.39999997615814208984375 / (_3458 + 1.39999997615814208984375);
                        float _3462 = _3461 * _3461;
                        float _3465 = ((1.0 - _3462) * _3451) + _3462;
                        float _3468 = _3458 * _3458;
                        float _3472 = ((isnan(0.0) ? _3465 : (isnan(_3465) ? 0.0 : max(_3465, 0.0))) * _3457) / ((_3468 * 0.699999988079071044921875) + 1.0);
                        float _3476 = (-0.0) - _2931;
                        float _3477 = (-0.0) - _2932;
                        float _3478 = (-0.0) - _2933;
                        float _3482 = inversesqrt(dot(vec3(_3476, _3477, _3478), vec3(_3476, _3477, _3478)));
                        float _3483 = _3482 * _3476;
                        float _3484 = _3482 * _3477;
                        float _3485 = _3482 * _3478;
                        float _3493 = exp2(log2(1.0 / ((_3468 * 3.5) + 5.0)) * 0.25);
                        float _3494 = 1.0 - _1268;
                        float _3501 = sqrt(1.0 - ((1.0 - (_3494 * _3494)) * (1.0 - (_3493 * _3493))));
                        float _3502 = _3501 * _3501;
                        float _3503 = _3502 * _3502;
                        float _3504 = _3483 + _3448;
                        float _3505 = _3484 + _3449;
                        float _3506 = _3485 + _3450;
                        float _3510 = inversesqrt(dot(vec3(_3504, _3505, _3506), vec3(_3504, _3505, _3506)));
                        float _3514 = dot(vec3(_1208, _1211, _1214), vec3(_3483, _3484, _3485));
                        float _4916 = isnan(0.0) ? _3514 : (isnan(_3514) ? 0.0 : max(_3514, 0.0));
                        float _3517 = isnan(1.0) ? _4916 : (isnan(_4916) ? 1.0 : min(_4916, 1.0));
                        float _3518 = dot(vec3(_1208, _1211, _1214), vec3(_3510 * _3504, _3510 * _3505, _3510 * _3506));
                        float _4927 = isnan(0.0) ? _3518 : (isnan(_3518) ? 0.0 : max(_3518, 0.0));
                        float _3521 = isnan(1.0) ? _4927 : (isnan(_4927) ? 1.0 : min(_4927, 1.0));
                        float _3525 = ((_3521 * _3521) * (_3503 + (-1.0))) + 1.0;
                        float _3526 = _3461 * _3502;
                        float _3527 = _3526 * _3526;
                        float _3530 = ((1.0 - _3527) * _3451) + _3527;
                        float _4938 = isnan(0.0) ? _3530 : (isnan(_3530) ? 0.0 : max(_3530, 0.0));
                        float _3531 = isnan(1.0) ? _4938 : (isnan(_4938) ? 1.0 : min(_4938, 1.0));
                        float _3532 = 1.0 - _3502;
                        float _3542 = (0.5 / (((_3531 * ((_3517 * _3532) + _3502)) + 9.9999999392252902907785028219223e-09) + (((_3531 * _3532) + _3502) * _3517))) * _3531;
                        float _4949 = isnan(0.0) ? _3542 : (isnan(_3542) ? 0.0 : max(_3542, 0.0));
                        float _3553 = (((_3503 * 3.1415927410125732421875) * (isnan(1.0) ? _4949 : (isnan(_4949) ? 1.0 : min(_4949, 1.0)))) / ((_3525 * _3525) * ((_3468 * 2.1991131305694580078125) + 3.141590118408203125))) * _3457;
                        _3305 = (_3472 * _3420.x) + _3378;
                        _3306 = (_3472 * _3420.y) + _3379;
                        _3307 = (_3472 * _3420.z) + _3380;
                        _3302 = (_3553 * _3437.x) + _3375;
                        _3303 = (_3553 * _3437.y) + _3376;
                        _3304 = (_3553 * _3437.z) + _3377;
                        if (_3382 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3375 = _3302;
                            _3376 = _3303;
                            _3377 = _3304;
                            _3378 = _3305;
                            _3379 = _3306;
                            _3380 = _3307;
                            _3381 = _3382;
                        }
                    }
                    frontier_phi_66_pred = _3302;
                    frontier_phi_66_pred_1 = _3307;
                    frontier_phi_66_pred_2 = _3306;
                    frontier_phi_66_pred_3 = _3305;
                    frontier_phi_66_pred_4 = _3304;
                    frontier_phi_66_pred_5 = _3303;
                }
                _3079 = frontier_phi_66_pred;
                _3089 = frontier_phi_66_pred_1;
                _3087 = frontier_phi_66_pred_2;
                _3085 = frontier_phi_66_pred_3;
                _3083 = frontier_phi_66_pred_4;
                _3081 = frontier_phi_66_pred_5;
                uint _3237 = _3236 + 1u;
                if (_3237 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3230 = _3079;
                    _3231 = _3081;
                    _3232 = _3083;
                    _3233 = _3085;
                    _3234 = _3087;
                    _3235 = _3089;
                    _3236 = _3237;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3078 = _3079;
            _3080 = _3081;
            _3082 = _3083;
            _3084 = _3085;
            _3086 = _3087;
            _3088 = _3089;
        }
        uvec4 _3092 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3093 = _3092.z;
        uint _3095 = (_3093 >> 8u) & 15u;
        float _3198;
        float _3200;
        float _3202;
        float _3204;
        float _3206;
        float _3208;
        if (((4294967295u << _3095) & _2977) == 0u)
        {
            _3198 = _3078;
            _3200 = _3080;
            _3202 = _3082;
            _3204 = _3084;
            _3206 = _3086;
            _3208 = _3088;
        }
        else
        {
            float _3223 = inversesqrt(dot(vec3(_2931, _2932, _2933), vec3(_2931, _2932, _2933)));
            float _3224 = _3223 * _2931;
            float _3225 = _3223 * _2932;
            float _3226 = _3223 * _2933;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_3095 < ((_3093 >> 12u) & 15u))
            {
                float _3199;
                float _3201;
                float _3203;
                float _3205;
                float _3207;
                float _3209;
                float _3358 = _3078;
                float _3359 = _3080;
                float _3360 = _3082;
                float _3361 = _3084;
                float _3362 = _3086;
                float _3363 = _3088;
                uint _3364 = _3095;
                uint _3373;
                bool _3374;
                for (;;)
                {
                    _3373 = texelFetch(g_lightClassification, int((((_2971 << 5u) + (_2957 << 9u)) + (_3364 << 2u)) >> 2u)).x;
                    _3374 = _3373 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_3374)
                    {
                        frontier_phi_77_pred = _3363;
                        frontier_phi_77_pred_1 = _3362;
                        frontier_phi_77_pred_2 = _3361;
                        frontier_phi_77_pred_3 = _3360;
                        frontier_phi_77_pred_4 = _3359;
                        frontier_phi_77_pred_5 = _3358;
                    }
                    else
                    {
                        float _3567;
                        float _3568;
                        float _3569;
                        float _3570;
                        float _3571;
                        float _3572;
                        float _3860;
                        float _3861;
                        float _3862;
                        float _3863;
                        float _3864;
                        float _3865;
                        float _3580 = _3358;
                        float _3581 = _3359;
                        float _3582 = _3360;
                        float _3583 = _3361;
                        float _3584 = _3362;
                        float _3585 = _3363;
                        uint _3586 = _3373;
                        uint _3587;
                        vec4 _3612;
                        float _3613;
                        vec4 _3628;
                        vec3 _3640;
                        vec4 _3655;
                        vec4 _3670;
                        float _3716;
                        bool _3717;
                        for (;;)
                        {
                            uint _3597 = ((_3364 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3586));
                            _3587 = (_3586 + 4294967295u) & _3586;
                            uint _3599 = _3597 * 40u;
                            _3612 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3599)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3599 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3599 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3599 + 3u)).x));
                            _3613 = _3612.w;
                            uint _3615 = (_3597 * 40u) + 4u;
                            _3628 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3615)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3615 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3615 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3615 + 3u)).x));
                            uint _3630 = (_3597 * 40u) + 8u;
                            _3640 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3630)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3630 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3630 + 2u)).x));
                            uint _3642 = (_3597 * 40u) + 16u;
                            _3655 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3642)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3642 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3642 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3642 + 3u)).x));
                            uint _3657 = (_3597 * 40u) + 20u;
                            _3670 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3657)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3657 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3657 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3657 + 3u)).x));
                            uint _3672 = (_3597 * 40u) + 24u;
                            vec4 _3685 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3672)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3672 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3672 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3672 + 3u)).x));
                            uint _3691 = (_3597 * 40u) + 28u;
                            vec4 _3704 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3691)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3691 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3691 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3691 + 3u)).x));
                            _3716 = fma(_2933, _3704.z, fma(_2932, _3704.y, _3704.x * _2931)) + _3704.w;
                            _3717 = !((fma(_2933, _3685.z, fma(_2932, _3685.y, _3685.x * _2931)) + _3685.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3717)
                            {
                                float _3744 = _3612.x - _2931;
                                float _3745 = _3612.y - _2932;
                                float _3746 = _3612.z - _2933;
                                float _3747 = dot(vec3(_3744, _3745, _3746), vec3(_3744, _3745, _3746));
                                float _3750 = inversesqrt(_3747);
                                float _3751 = _3750 * _3744;
                                float _3752 = _3750 * _3745;
                                float _3753 = _3750 * _3746;
                                float _3757 = 1.0 - (_3747 / (_3613 * _3613));
                                float _4960 = isnan(0.0) ? _3757 : (isnan(_3757) ? 0.0 : max(_3757, 0.0));
                                float _3758 = isnan(1.0) ? _4960 : (isnan(_4960) ? 1.0 : min(_4960, 1.0));
                                float _3762 = sqrt(_3747) * _3628.w;
                                float _3764 = 1.39999997615814208984375 / (_3762 + 1.39999997615814208984375);
                                float _3765 = _3764 * _3764;
                                float _3768 = ((1.0 - _3765) * dot(vec3(_3751, _3752, _3753), vec3(_1208, _1211, _1214))) + _3765;
                                float _3771 = _3762 * _3762;
                                float _3775 = (fma(_2933, _3655.z, fma(_2932, _3655.y, _3655.x * _2931)) + _3655.w) / _3716;
                                float _3776 = (fma(_2933, _3670.z, fma(_2932, _3670.y, _3670.x * _2931)) + _3670.w) / _3716;
                                float _3780 = 1.0 - dot(vec2(_3775, _3776), vec2(_3775, _3776));
                                float _4976 = isnan(0.0) ? _3780 : (isnan(_3780) ? 0.0 : max(_3780, 0.0));
                                float _3781 = isnan(1.0) ? _4976 : (isnan(_4976) ? 1.0 : min(_4976, 1.0));
                                float _3782 = _3781 * (((isnan(0.0) ? _3768 : (isnan(_3768) ? 0.0 : max(_3768, 0.0))) * _3758) / ((_3771 * 0.699999988079071044921875) + 1.0));
                                float _3794 = exp2(log2(1.0 / ((_3771 * 3.5) + 5.0)) * 0.25);
                                float _3795 = 1.0 - _1268;
                                float _3802 = sqrt(1.0 - ((1.0 - (_3795 * _3795)) * (1.0 - (_3794 * _3794))));
                                float _3803 = _3802 * _3802;
                                float _3804 = _3803 * _3803;
                                float _3805 = _3751 - _3224;
                                float _3806 = _3752 - _3225;
                                float _3807 = _3753 - _3226;
                                float _3811 = inversesqrt(dot(vec3(_3805, _3806, _3807), vec3(_3805, _3806, _3807)));
                                float _3815 = dot(vec3(_1208, _1211, _1214), vec3((-0.0) - _3224, (-0.0) - _3225, (-0.0) - _3226));
                                float _4987 = isnan(0.0) ? _3815 : (isnan(_3815) ? 0.0 : max(_3815, 0.0));
                                float _3818 = isnan(1.0) ? _4987 : (isnan(_4987) ? 1.0 : min(_4987, 1.0));
                                float _3819 = dot(vec3(_1208, _1211, _1214), vec3(_3811 * _3805, _3811 * _3806, _3811 * _3807));
                                float _4998 = isnan(0.0) ? _3819 : (isnan(_3819) ? 0.0 : max(_3819, 0.0));
                                float _3822 = isnan(1.0) ? _4998 : (isnan(_4998) ? 1.0 : min(_4998, 1.0));
                                float _3826 = ((_3822 * _3822) * (_3804 + (-1.0))) + 1.0;
                                float _3827 = _3764 * _3803;
                                float _3828 = _3827 * _3827;
                                float _3834 = ((1.0 - _3828) * dot(vec3(_1208, _1211, _1214), vec3(_3751, _3752, _3753))) + _3828;
                                float _5009 = isnan(0.0) ? _3834 : (isnan(_3834) ? 0.0 : max(_3834, 0.0));
                                float _3835 = isnan(1.0) ? _5009 : (isnan(_5009) ? 1.0 : min(_5009, 1.0));
                                float _3836 = 1.0 - _3803;
                                float _3846 = (0.5 / (((_3835 * ((_3818 * _3836) + _3803)) + 9.9999999392252902907785028219223e-09) + (((_3835 * _3836) + _3803) * _3818))) * _3835;
                                float _5020 = isnan(0.0) ? _3846 : (isnan(_3846) ? 0.0 : max(_3846, 0.0));
                                float _3856 = (_3781 * _3758) * (((_3804 * 3.1415927410125732421875) * (isnan(1.0) ? _5020 : (isnan(_5020) ? 1.0 : min(_5020, 1.0)))) / ((_3826 * _3826) * ((_3771 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3782 * _3628.y;
                                frontier_phi_83_pred_1 = _3782 * _3628.x;
                                frontier_phi_83_pred_2 = _3856 * _3640.z;
                                frontier_phi_83_pred_3 = _3856 * _3640.y;
                                frontier_phi_83_pred_4 = _3856 * _3640.x;
                                frontier_phi_83_pred_5 = _3782 * _3628.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3864 = frontier_phi_83_pred;
                            _3863 = frontier_phi_83_pred_1;
                            _3862 = frontier_phi_83_pred_2;
                            _3861 = frontier_phi_83_pred_3;
                            _3860 = frontier_phi_83_pred_4;
                            _3865 = frontier_phi_83_pred_5;
                            _3570 = _3863 + _3583;
                            _3571 = _3864 + _3584;
                            _3572 = _3865 + _3585;
                            _3567 = _3860 + _3580;
                            _3568 = _3861 + _3581;
                            _3569 = _3862 + _3582;
                            if (_3587 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3580 = _3567;
                                _3581 = _3568;
                                _3582 = _3569;
                                _3583 = _3570;
                                _3584 = _3571;
                                _3585 = _3572;
                                _3586 = _3587;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3572;
                        frontier_phi_77_pred_1 = _3571;
                        frontier_phi_77_pred_2 = _3570;
                        frontier_phi_77_pred_3 = _3569;
                        frontier_phi_77_pred_4 = _3568;
                        frontier_phi_77_pred_5 = _3567;
                    }
                    _3209 = frontier_phi_77_pred;
                    _3207 = frontier_phi_77_pred_1;
                    _3205 = frontier_phi_77_pred_2;
                    _3203 = frontier_phi_77_pred_3;
                    _3201 = frontier_phi_77_pred_4;
                    _3199 = frontier_phi_77_pred_5;
                    uint _3365 = _3364 + 1u;
                    if (_3365 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3358 = _3199;
                        _3359 = _3201;
                        _3360 = _3203;
                        _3361 = _3205;
                        _3362 = _3207;
                        _3363 = _3209;
                        _3364 = _3365;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _3203;
                frontier_phi_58_59_ladder_1 = _3209;
                frontier_phi_58_59_ladder_2 = _3207;
                frontier_phi_58_59_ladder_3 = _3205;
                frontier_phi_58_59_ladder_4 = _3201;
                frontier_phi_58_59_ladder_5 = _3199;
            }
            else
            {
                frontier_phi_58_59_ladder = _3082;
                frontier_phi_58_59_ladder_1 = _3088;
                frontier_phi_58_59_ladder_2 = _3086;
                frontier_phi_58_59_ladder_3 = _3084;
                frontier_phi_58_59_ladder_4 = _3080;
                frontier_phi_58_59_ladder_5 = _3078;
            }
            _3198 = frontier_phi_58_59_ladder_5;
            _3200 = frontier_phi_58_59_ladder_4;
            _3202 = frontier_phi_58_59_ladder;
            _3204 = frontier_phi_58_59_ladder_3;
            _3206 = frontier_phi_58_59_ladder_2;
            _3208 = frontier_phi_58_59_ladder_1;
        }
        float _3213 = isnan(1.0) ? _1252 : (isnan(_1252) ? 1.0 : min(_1252, 1.0));
        _2990 = (_3213 * _3204) + _2445;
        _2992 = (_3213 * _3206) + _2447;
        _2994 = (_3213 * _3208) + _2449;
        _2996 = ((_3198 * 0.039999999105930328369140625) * _3213) + _2775;
        _2998 = ((_3200 * 0.039999999105930328369140625) * _3213) + _2777;
        _3000 = ((_3202 * 0.039999999105930328369140625) * _3213) + _2779;
    }
    else
    {
        _2990 = _2445;
        _2992 = _2447;
        _2994 = _2449;
        _2996 = _2775;
        _2998 = _2777;
        _3000 = _2779;
    }
    float _5036 = isnan(0.0) ? _1237 : (isnan(_1237) ? 0.0 : max(_1237, 0.0));
    float _5047 = isnan(0.0) ? _1238 : (isnan(_1238) ? 0.0 : max(_1238, 0.0));
    float _5058 = isnan(0.0) ? _1239 : (isnan(_1239) ? 0.0 : max(_1239, 0.0));
    float _3017 = ((isnan(1.0) ? _5036 : (isnan(_5036) ? 1.0 : min(_5036, 1.0))) * (_2990 + ((isnan(0.0) ? _2007 : (isnan(_2007) ? 0.0 : max(_2007, 0.0))) * _1252))) + ((_2996 + ((isnan(0.0) ? _2298 : (isnan(_2298) ? 0.0 : max(_2298, 0.0))) * _2086)) * cbPerFrame._m0[3u].x);
    float _3018 = ((isnan(1.0) ? _5047 : (isnan(_5047) ? 1.0 : min(_5047, 1.0))) * (_2992 + ((isnan(0.0) ? _2010 : (isnan(_2010) ? 0.0 : max(_2010, 0.0))) * _1252))) + ((_2998 + ((isnan(0.0) ? _2301 : (isnan(_2301) ? 0.0 : max(_2301, 0.0))) * _2086)) * cbPerFrame._m0[3u].x);
    float _3019 = ((isnan(1.0) ? _5058 : (isnan(_5058) ? 1.0 : min(_5058, 1.0))) * (_2994 + ((isnan(0.0) ? _2013 : (isnan(_2013) ? 0.0 : max(_2013, 0.0))) * _1252))) + ((_3000 + ((isnan(0.0) ? _2304 : (isnan(_2304) ? 0.0 : max(_2304, 0.0))) * _2086)) * cbPerFrame._m0[3u].x);
    uint _3020 = _291 + 6u;
    float _3028 = _1189 / cbSceneParam._m0[86u].x;
    float _3029 = _1190 / cbSceneParam._m0[86u].y;
    vec4 _3043 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3028, _3029, (log2((isnan(cbSceneParam._m0[77u].w) ? _1112 : (isnan(_1112) ? cbSceneParam._m0[77u].w : min(_1112, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3045 = _3043.x;
    float _3046 = _3043.y;
    float _3047 = _3043.z;
    float _3048 = _3043.w;
    float _3140;
    float _3142;
    float _3144;
    float _3146;
    if (_1112 > cbSceneParam._m0[78u].w)
    {
        float _3103 = isnan(_1112) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _1112 : min(cbSceneParam._m0[80u].w, _1112));
        float _3104 = _3103 / _1112;
        float _3115 = _3104 * _1162;
        float _3116 = _1163 * _3104;
        float _3117 = (-0.0) - _3116;
        float _3118 = _3104 * _1164;
        float _3120 = (cbSceneParam._m0[77u].w * _3117) / _3103;
        float _3121 = _3120 + cbSceneParam._m0[79u].w;
        float _3122 = cbSceneParam._m0[79u].w - _3116;
        float _3128 = sqrt(((_3115 * _3115) + (_3116 * _3116)) + (_3118 * _3118));
        float _3131 = (1.0 - (cbSceneParam._m0[77u].w / _3103)) * _3128;
        float _3136 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3138 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3315;
        if (abs((_3117 - _3120) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3315 = ((((_3121 > 0.0) ? exp2(_3136 * _3121) : (2.0 - exp2(_3138 * _3121))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3131;
        }
        else
        {
            float _3259 = 1.0 / cbSceneParam._m0[80u].x;
            float _3260 = isnan(_3122) ? _3121 : (isnan(_3121) ? _3122 : max(_3121, _3122));
            float _3261 = isnan(_3122) ? _3121 : (isnan(_3121) ? _3122 : min(_3121, _3122));
            float _3270 = isnan(0.0) ? _3260 : (isnan(_3260) ? 0.0 : min(_3260, 0.0));
            float _3271 = isnan(0.0) ? _3261 : (isnan(_3261) ? 0.0 : min(_3261, 0.0));
            _3315 = ((abs(_3128 / _3117) * cbSceneParam._m0[80u].y) * ((((_3270 - _3271) * 2.0) - ((exp2(_3136 * (isnan(0.0) ? _3260 : (isnan(_3260) ? 0.0 : max(_3260, 0.0)))) - exp2(_3136 * (isnan(0.0) ? _3261 : (isnan(_3261) ? 0.0 : max(_3261, 0.0))))) * _3259)) - ((exp2(_3138 * _3270) - exp2(_3138 * _3271)) * _3259))) + (_3131 * cbSceneParam._m0[80u].z);
        }
        vec4 _3317 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3028, _3029, 1.0), 0.0);
        float _3326 = exp2((_3315 * (-1.44269502162933349609375)) * (1.0 - _3317.w));
        float _3327 = log2(_3326);
        float _3343 = log2(_3048);
        _3140 = (exp2(_3343 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3327 * cbSceneParam._m0[78u].x)) * _3317.x) / cbSceneParam._m0[78u].x)) + _3045;
        _3142 = (exp2(_3343 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3327 * cbSceneParam._m0[78u].y)) * _3317.y) / cbSceneParam._m0[78u].y)) + _3046;
        _3144 = (exp2(_3343 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3327 * cbSceneParam._m0[78u].z)) * _3317.z) / cbSceneParam._m0[78u].z)) + _3047;
        _3146 = _3326 * _3048;
    }
    else
    {
        _3140 = _3045;
        _3142 = _3046;
        _3144 = _3047;
        _3146 = _3048;
    }
    bool _3353;
    vec4 _3156;
    vec4 _3178;
    float _3180;
    float _3184;
    float _3185;
    float _3186;
    float _3187;
    bool _3197;
    for (;;)
    {
        _3156 = cbMatDynParam._m0[0u];
        float _3158 = roundEven(_3156.y);
        bool _3159 = _3158 == 3.0;
        float _3160 = log2(_3146);
        float _3167 = exp2(_3160 * cbSceneParam._m0[78u].x) * _3017;
        float _3168 = exp2(_3160 * cbSceneParam._m0[78u].y) * _3018;
        float _3169 = exp2(_3160 * cbSceneParam._m0[78u].z) * _3019;
        float _3176 = _1178 + (-0.5);
        _3178 = cbMtdParam._m0[1u];
        _3180 = _3178.y * _3176;
        float _3183 = (_3158 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3184 = _3183 * (_3159 ? _3167 : (_3167 + (cbSceneParam._m0[72u].w * _3140)));
        _3185 = _3183 * (_3159 ? _3168 : (_3168 + (cbSceneParam._m0[72u].w * _3142)));
        _3186 = _3183 * (_3159 ? _3169 : (_3169 + (cbSceneParam._m0[72u].w * _3144)));
        _3187 = _3176 * 0.999000012874603271484375;
        _3197 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3197)
        {
            if ((cbInstanceData._m0[_291 + 7u].x + _3187) < 0.5)
            {
                _3353 = true;
                break;
            }
        }
        uint _3294 = _1227 + uint(_3156.w);
        if ((cbInstanceData._m0[_3294].w < 1.0) && ((cbInstanceData._m0[_3294].w + _3187) < 0.5))
        {
            _3353 = true;
            break;
        }
        if ((_3180 + 1.0) < _3178.x)
        {
            _3353 = true;
            break;
        }
        _3353 = false;
        break;
    }
    float _3558;
    if (_3353)
    {
        discard_state = true;
        _3558 = 0.0;
    }
    else
    {
        _3558 = cbInstanceData._m0[_3020].w;
    }
    SV_Target.x = _3184;
    SV_Target.y = _3185;
    SV_Target.z = _3186;
    SV_Target.w = _3558;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_3020].w;
    discard_exit();
}


