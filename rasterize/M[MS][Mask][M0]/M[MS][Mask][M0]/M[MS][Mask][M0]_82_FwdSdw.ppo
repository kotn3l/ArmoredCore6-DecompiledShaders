#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_0;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 14) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_10;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_6;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1276;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _216 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _217 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _218 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _224 = inversesqrt(dot(vec3(_216, _217, _218), vec3(_216, _217, _218)));
    float _231 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _238 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _244 = uint(roundEven(NORMAL.w)) * 13u;
    uint _250 = _244 + 1u;
    uint _254 = _244 + 2u;
    float _263 = sqrt(((cbInstanceData._m0[_250].x * cbInstanceData._m0[_250].x) + (cbInstanceData._m0[_244].x * cbInstanceData._m0[_244].x)) + (cbInstanceData._m0[_254].x * cbInstanceData._m0[_254].x));
    float _264 = _263 * TEXCOORD.z;
    float _265 = _263 * TEXCOORD.w;
    vec4 _284 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _308 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _313 = _308.x * cbMtdParam._m0[11u].x;
    float _314 = _308.y * cbMtdParam._m0[11u].y;
    float _315 = _308.z * cbMtdParam._m0[11u].z;
    vec4 _334 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _264) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _265) + cbTextureTilingScale._m0[5u].w));
    vec4 _354 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _391 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _393 = _391.x;
    float _405 = dot(vec4(_393, _391.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _422 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _354.x) * 2.0) - ((((_393 - _405) * cbMtdParam._m0[24u].z) + _405) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3862 = isnan(0.0) ? _422 : (isnan(_422) ? 0.0 : max(_422, 0.0));
    float _423 = isnan(1.0) ? _3862 : (isnan(_3862) ? 1.0 : min(_3862, 1.0));
    float _430 = (_423 * ((_334.x * cbMtdParam._m0[12u].x) - _313)) + _313;
    float _431 = (_423 * ((_334.y * cbMtdParam._m0[12u].y) - _314)) + _314;
    float _432 = (_423 * ((_334.z * cbMtdParam._m0[12u].z) - _315)) + _315;
    vec4 _449 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _264) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _265) + cbTextureTilingScale._m0[3u].w));
    vec4 _469 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _471 = _469.x;
    float _481 = dot(vec4(_471, _469.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _495 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _354.y) * 2.0) - ((((_471 - _481) * cbMtdParam._m0[24u].z) + _481) * cbMtdParam._m0[20u].w))) + 1.0;
    float _3873 = isnan(0.0) ? _495 : (isnan(_495) ? 0.0 : max(_495, 0.0));
    float _496 = isnan(1.0) ? _3873 : (isnan(_3873) ? 1.0 : min(_3873, 1.0));
    float _509 = ((cbMtdParam._m0[9u].x * 4.55000019073486328125) * _284.x) * ((_496 * ((_449.x * cbMtdParam._m0[13u].x) - _430)) + _430);
    float _512 = ((cbMtdParam._m0[9u].y * 4.55000019073486328125) * _284.y) * ((_496 * ((_449.y * cbMtdParam._m0[13u].y) - _431)) + _431);
    float _515 = ((cbMtdParam._m0[9u].z * 4.55000019073486328125) * _284.z) * ((_496 * ((_449.z * cbMtdParam._m0[13u].z) - _432)) + _432);
    vec4 _534 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _264) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _265) + cbTextureTilingScale._m0[14u].w));
    vec4 _554 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _264) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _265) + cbTextureTilingScale._m0[4u].w));
    vec4 _571 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _573 = _571.x;
    float _574 = _571.y;
    float _575 = _571.z;
    float _582 = ((_554.x - _573) * _423) + _573;
    float _583 = ((_554.y - _574) * _423) + _574;
    float _584 = ((_554.z - _575) * _423) + _575;
    vec4 _596 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _264) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _265) + cbTextureTilingScale._m0[2u].w));
    float _609 = ((_596.z - _584) * _496) + _584;
    float _612 = ((((_596.x - _582) * _496) + _582) * 2.0) + (-1.0);
    float _614 = ((((_596.y - _583) * _496) + _583) * 2.0) + (-1.0);
    float _615 = dot(vec2(_612, _614), vec2(_612, _614));
    float _3884 = isnan(0.0) ? _615 : (isnan(_615) ? 0.0 : max(_615, 0.0));
    float _620 = sqrt(1.0 - (isnan(1.0) ? _3884 : (isnan(_3884) ? 1.0 : min(_3884, 1.0))));
    vec4 _634 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _659 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _264) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _265) + cbTextureTilingScale._m0[11u].w));
    float _661 = _659.x;
    float _662 = 1.0 - _661;
    float _675 = (TEXCOORD_8.w - ((cbMtdParam._m0[21u].z * (1.0 - TEXCOORD_8.w)) * ((((_661 - _662) * cbMtdParam._m0[24u].w) + _662) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3895 = isnan(0.0) ? _675 : (isnan(_675) ? 0.0 : max(_675, 0.0));
    float _676 = isnan(1.0) ? _3895 : (isnan(_3895) ? 1.0 : min(_3895, 1.0));
    float _683 = (_676 * ((_534.x * cbMtdParam._m0[18u].x) - _509)) + _509;
    float _684 = (_676 * ((_534.y * cbMtdParam._m0[18u].y) - _512)) + _512;
    float _685 = (_676 * ((_534.z * cbMtdParam._m0[18u].z) - _515)) + _515;
    float _689 = (cbMtdParam._m0[19u].w * (_634.z - _609)) + _609;
    vec4 _702 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _264) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _265) + cbTextureTilingScale._m0[15u].w));
    float _709 = (_702.x * 2.0) + (-1.0);
    float _710 = (_702.y * 2.0) + (-1.0);
    float _711 = dot(vec2(_709, _710), vec2(_709, _710));
    float _3906 = isnan(0.0) ? _711 : (isnan(_711) ? 0.0 : max(_711, 0.0));
    float _719 = (_676 * (_702.z - _689)) + _689;
    float _722 = (((_634.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _612;
    float _723 = (((_634.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _614;
    float _735 = (((_709 - _722) + (cbMtdParam._m0[21u].x * _722)) * _676) + _722;
    float _736 = (((_710 - _723) + (cbMtdParam._m0[21u].x * _723)) * _676) + _723;
    float _737 = (_676 * (sqrt(1.0 - (isnan(1.0) ? _3906 : (isnan(_3906) ? 1.0 : min(_3906, 1.0)))) - _620)) + _620;
    float _741 = cbMtdParam._m0[22u].x + _634.w;
    float _744 = fma(_737, _231 * NORMAL.x, fma(_736, _238 * TANGENT.x, (_224 * _216) * _735));
    float _747 = fma(_737, _231 * NORMAL.y, fma(_736, _238 * TANGENT.y, (_224 * _217) * _735));
    float _750 = fma(_737, _231 * NORMAL.z, fma(_736, _238 * TANGENT.z, (_224 * _218) * _735));
    float _754 = inversesqrt(dot(vec3(_744, _747, _750), vec3(_744, _747, _750)));
    float _755 = _754 * _744;
    float _756 = _754 * _747;
    float _757 = _754 * _750;
    float _3917 = isnan(0.0) ? _719 : (isnan(_719) ? 0.0 : max(_719, 0.0));
    float _758 = isnan(1.0) ? _3917 : (isnan(_3917) ? 1.0 : min(_3917, 1.0));
    float _3928 = isnan(0.0) ? _741 : (isnan(_741) ? 0.0 : max(_741, 0.0));
    float _3939 = isnan(0.0) ? _683 : (isnan(_683) ? 0.0 : max(_683, 0.0));
    float _3950 = isnan(0.0) ? _684 : (isnan(_684) ? 0.0 : max(_684, 0.0));
    float _3961 = isnan(0.0) ? _685 : (isnan(_685) ? 0.0 : max(_685, 0.0));
    float _776 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _817 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _827 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _817);
    float _828 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _817);
    float _829 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _817);
    float _833 = inversesqrt(dot(vec3(_827, _828, _829), vec3(_827, _828, _829)));
    float _834 = _827 * _833;
    float _835 = _828 * _833;
    float _836 = _829 * _833;
    float _842 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _843 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _861 = fma(_757, cbSceneParam._m0[5u].z, fma(_756, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _755));
    float _864 = fma(_757, cbSceneParam._m0[6u].z, fma(_756, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _755));
    float _867 = fma(_757, cbSceneParam._m0[7u].z, fma(_756, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _755));
    uint _881 = (_244 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _887 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3939 : (isnan(_3939) ? 1.0 : min(_3939, 1.0)))) * cbInstanceData._m0[_881].x;
    float _888 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3950 : (isnan(_3950) ? 1.0 : min(_3950, 1.0)))) * cbInstanceData._m0[_881].y;
    float _889 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3961 : (isnan(_3961) ? 1.0 : min(_3961, 1.0)))) * cbInstanceData._m0[_881].z;
    float _3972 = isnan(0.0) ? _887 : (isnan(_887) ? 0.0 : max(_887, 0.0));
    float _890 = isnan(1.0) ? _3972 : (isnan(_3972) ? 1.0 : min(_3972, 1.0));
    float _3983 = isnan(0.0) ? _888 : (isnan(_888) ? 0.0 : max(_888, 0.0));
    float _891 = isnan(1.0) ? _3983 : (isnan(_3983) ? 1.0 : min(_3983, 1.0));
    float _3994 = isnan(0.0) ? _889 : (isnan(_889) ? 0.0 : max(_889, 0.0));
    float _892 = isnan(1.0) ? _3994 : (isnan(_3994) ? 1.0 : min(_3994, 1.0));
    vec4 _901 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _842, cbSceneParam._m0[86u].y * _843));
    float _905 = ((isnan(1.0) ? _3928 : (isnan(_3928) ? 1.0 : min(_3928, 1.0))) * TEXCOORD_5.w) * _901.x;
    float _906 = dot(vec3(_755, _756, _757), vec3(_834, _835, _836));
    float _909 = _906 * 2.0;
    float _913 = (_909 * _755) - _834;
    float _914 = (_909 * _756) - _835;
    float _915 = (_909 * _757) - _836;
    float _919 = abs(dot(vec3(_834, _835, _836), vec3(_755, _756, _757)));
    float _4005 = isnan(0.0) ? _919 : (isnan(_919) ? 0.0 : max(_919, 0.0));
    float _921 = sqrt(_758);
    float _934 = exp2((_921 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4005 : (isnan(_4005) ? 1.0 : min(_4005, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_921 * 3.0));
    float _966 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _970 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _974 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1275;
    float _1277;
    float _1278;
    float _1279;
    float _1280;
    float _1281;
    float _1282;
    float _1283;
    float _1284;
    float _1285;
    float _1286;
    float _1287;
    float _1288;
    float _1289;
    float _1290;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1000 = fma(_974, cbModelParam._m0[26u].z, fma(_970, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _966));
        float _1004 = fma(_974, cbModelParam._m0[27u].z, fma(_970, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _966));
        float _1008 = fma(_974, cbModelParam._m0[28u].z, fma(_970, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _966));
        float _1033 = _966 + _755;
        float _1034 = _970 + _756;
        float _1035 = _974 + _757;
        float _1045 = fma(_1035, cbModelParam._m0[26u].z, fma(_1034, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1033)) - _1000;
        float _1046 = fma(_1035, cbModelParam._m0[27u].z, fma(_1034, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1033)) - _1004;
        float _1047 = fma(_1035, cbModelParam._m0[28u].z, fma(_1034, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1033)) - _1008;
        float _1051 = inversesqrt(dot(vec3(_1045, _1046, _1047), vec3(_1045, _1046, _1047)));
        float _1064 = ((_1051 * _1045) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1000 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1065 = ((_1051 * _1046) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1004 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1066 = ((_1051 * _1047) / cbModelParam._m0[34u].z) + ((((((_1008 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1069 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1064, _1065, _1066), 0.0);
        vec4 _1076 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1064, _1065, _1066), 0.0);
        vec4 _1083 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1064, _1065, _1066), 0.0);
        vec4 _1090 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1064, _1065, _1066), 0.0);
        float _1103 = exp2((_1069.w + (-0.5)) * 20.0) * 2.0;
        float _1104 = _1103 * (_1069.x + (-0.5));
        float _1105 = _1103 * (_1069.y + (-0.5));
        float _1106 = _1103 * (_1069.z + (-0.5));
        float _1113 = exp2((_1076.w + (-0.5)) * 20.0) * 2.0;
        float _1114 = _1113 * (_1076.x + (-0.5));
        float _1115 = _1113 * (_1076.y + (-0.5));
        float _1116 = _1113 * (_1076.z + (-0.5));
        float _1123 = exp2((_1083.w + (-0.5)) * 20.0) * 2.0;
        float _1124 = _1123 * (_1083.x + (-0.5));
        float _1125 = _1123 * (_1083.y + (-0.5));
        float _1126 = _1123 * (_1083.z + (-0.5));
        float _1133 = exp2((_1090.w + (-0.5)) * 20.0) * 2.0;
        float _1134 = _1133 * (_1090.x + (-0.5));
        float _1135 = _1133 * (_1090.y + (-0.5));
        float _1136 = _1133 * (_1090.z + (-0.5));
        float _1137 = isnan(0.0) ? _1134 : (isnan(_1134) ? 0.0 : max(_1134, 0.0));
        float _1138 = isnan(0.0) ? _1135 : (isnan(_1135) ? 0.0 : max(_1135, 0.0));
        float _1139 = isnan(0.0) ? _1136 : (isnan(_1136) ? 0.0 : max(_1136, 0.0));
        float _1140 = _1104 * 0.5;
        float _1141 = _1114 * 0.5;
        float _1142 = _1124 * 0.5;
        float _1143 = dot(vec3(_1140, _1141, _1142), vec3(_1140, _1141, _1142));
        float _1148 = (_1143 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1143);
        float _1157 = (dot(vec3(_755, _756, _757), vec3(_1148 * _1140, _1148 * _1141, _1148 * _1142)) + 1.0) * 0.5;
        float _4031 = isnan(0.0) ? _1157 : (isnan(_1157) ? 0.0 : max(_1157, 0.0));
        float _1167 = sqrt(((_1141 * _1141) + (_1140 * _1140)) + (_1142 * _1142)) / (_1137 + 9.9999997473787516355514526367188e-06);
        float _4042 = isnan(0.0) ? _1167 : (isnan(_1167) ? 0.0 : max(_1167, 0.0));
        float _1168 = isnan(1.0) ? _4042 : (isnan(_4042) ? 1.0 : min(_4042, 1.0));
        float _1169 = _1168 * 2.0;
        float _1173 = (1.0 - _1168) / (_1168 + 1.0);
        float _4053 = isnan(0.0) ? _1173 : (isnan(_1173) ? 0.0 : max(_1173, 0.0));
        float _1174 = isnan(1.0) ? _4053 : (isnan(_4053) ? 1.0 : min(_4053, 1.0));
        float _1183 = ((((1.0 - _1174) * (_1169 + 2.0)) * exp2(log2(isnan(1.0) ? _4031 : (isnan(_4031) ? 1.0 : min(_4031, 1.0))) * (_1169 + 1.0))) + _1174) * _1137;
        float _1184 = _1105 * 0.5;
        float _1185 = _1115 * 0.5;
        float _1186 = _1125 * 0.5;
        float _1187 = dot(vec3(_1184, _1185, _1186), vec3(_1184, _1185, _1186));
        float _1192 = (_1187 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1187);
        float _1200 = (dot(vec3(_755, _756, _757), vec3(_1192 * _1184, _1192 * _1185, _1192 * _1186)) + 1.0) * 0.5;
        float _4064 = isnan(0.0) ? _1200 : (isnan(_1200) ? 0.0 : max(_1200, 0.0));
        float _1209 = sqrt(((_1185 * _1185) + (_1184 * _1184)) + (_1186 * _1186)) / (_1138 + 9.9999997473787516355514526367188e-06);
        float _4075 = isnan(0.0) ? _1209 : (isnan(_1209) ? 0.0 : max(_1209, 0.0));
        float _1210 = isnan(1.0) ? _4075 : (isnan(_4075) ? 1.0 : min(_4075, 1.0));
        float _1211 = _1210 * 2.0;
        float _1215 = (1.0 - _1210) / (_1210 + 1.0);
        float _4086 = isnan(0.0) ? _1215 : (isnan(_1215) ? 0.0 : max(_1215, 0.0));
        float _1216 = isnan(1.0) ? _4086 : (isnan(_4086) ? 1.0 : min(_4086, 1.0));
        float _1225 = ((((1.0 - _1216) * (_1211 + 2.0)) * exp2(log2(isnan(1.0) ? _4064 : (isnan(_4064) ? 1.0 : min(_4064, 1.0))) * (_1211 + 1.0))) + _1216) * _1138;
        float _1226 = _1106 * 0.5;
        float _1227 = _1116 * 0.5;
        float _1228 = _1126 * 0.5;
        float _1229 = dot(vec3(_1226, _1227, _1228), vec3(_1226, _1227, _1228));
        float _1234 = (_1229 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1229);
        float _1242 = (dot(vec3(_755, _756, _757), vec3(_1234 * _1226, _1234 * _1227, _1234 * _1228)) + 1.0) * 0.5;
        float _4097 = isnan(0.0) ? _1242 : (isnan(_1242) ? 0.0 : max(_1242, 0.0));
        float _1251 = sqrt(((_1227 * _1227) + (_1226 * _1226)) + (_1228 * _1228)) / (_1139 + 9.9999997473787516355514526367188e-06);
        float _4108 = isnan(0.0) ? _1251 : (isnan(_1251) ? 0.0 : max(_1251, 0.0));
        float _1252 = isnan(1.0) ? _4108 : (isnan(_4108) ? 1.0 : min(_4108, 1.0));
        float _1253 = _1252 * 2.0;
        float _1257 = (1.0 - _1252) / (_1252 + 1.0);
        float _4119 = isnan(0.0) ? _1257 : (isnan(_1257) ? 0.0 : max(_1257, 0.0));
        float _1258 = isnan(1.0) ? _4119 : (isnan(_4119) ? 1.0 : min(_4119, 1.0));
        float _1267 = ((((1.0 - _1258) * (_1253 + 2.0)) * exp2(log2(isnan(1.0) ? _4097 : (isnan(_4097) ? 1.0 : min(_4097, 1.0))) * (_1253 + 1.0))) + _1258) * _1139;
        _1275 = _1106;
        _1277 = _1105;
        _1278 = _1104;
        _1279 = _1116;
        _1280 = _1115;
        _1281 = _1114;
        _1282 = _1126;
        _1283 = _1125;
        _1284 = _1124;
        _1285 = _1139;
        _1286 = _1138;
        _1287 = _1137;
        _1288 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1183 : (isnan(_1183) ? 0.0 : max(_1183, 0.0)));
        _1289 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1225 : (isnan(_1225) ? 0.0 : max(_1225, 0.0)));
        _1290 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1267 : (isnan(_1267) ? 0.0 : max(_1267, 0.0)));
    }
    else
    {
        _1275 = _1276;
        _1277 = _1276;
        _1278 = _1276;
        _1279 = _1276;
        _1280 = _1276;
        _1281 = _1276;
        _1282 = _1276;
        _1283 = _1276;
        _1284 = _1276;
        _1285 = _1276;
        _1286 = _1276;
        _1287 = _1276;
        _1288 = 0.0;
        _1289 = 0.0;
        _1290 = 0.0;
    }
    float _1583;
    float _1584;
    float _1585;
    float _1586;
    float _1587;
    float _1588;
    float _1589;
    float _1590;
    float _1591;
    float _1592;
    float _1593;
    float _1594;
    float _1595;
    float _1596;
    float _1597;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1314 = fma(_974, cbModelParam._m0[30u].z, fma(_970, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _966));
        float _1318 = fma(_974, cbModelParam._m0[31u].z, fma(_970, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _966));
        float _1322 = fma(_974, cbModelParam._m0[32u].z, fma(_970, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _966));
        float _1345 = _966 + _755;
        float _1346 = _970 + _756;
        float _1347 = _974 + _757;
        float _1357 = fma(_1347, cbModelParam._m0[30u].z, fma(_1346, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1345)) - _1314;
        float _1358 = fma(_1347, cbModelParam._m0[31u].z, fma(_1346, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1345)) - _1318;
        float _1359 = fma(_1347, cbModelParam._m0[32u].z, fma(_1346, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1345)) - _1322;
        float _1363 = inversesqrt(dot(vec3(_1357, _1358, _1359), vec3(_1357, _1358, _1359)));
        float _1376 = ((_1363 * _1357) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1314 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1377 = ((_1363 * _1358) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1318 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1378 = ((_1363 * _1359) / cbModelParam._m0[35u].z) + ((((((_1322 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1380 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1376, _1377, _1378), 0.0);
        vec4 _1387 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1376, _1377, _1378), 0.0);
        vec4 _1394 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1376, _1377, _1378), 0.0);
        vec4 _1401 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1376, _1377, _1378), 0.0);
        float _1413 = exp2((_1380.w + (-0.5)) * 20.0) * 2.0;
        float _1414 = _1413 * (_1380.x + (-0.5));
        float _1415 = _1413 * (_1380.y + (-0.5));
        float _1416 = _1413 * (_1380.z + (-0.5));
        float _1423 = exp2((_1387.w + (-0.5)) * 20.0) * 2.0;
        float _1424 = _1423 * (_1387.x + (-0.5));
        float _1425 = _1423 * (_1387.y + (-0.5));
        float _1426 = _1423 * (_1387.z + (-0.5));
        float _1433 = exp2((_1394.w + (-0.5)) * 20.0) * 2.0;
        float _1434 = _1433 * (_1394.x + (-0.5));
        float _1435 = _1433 * (_1394.y + (-0.5));
        float _1436 = _1433 * (_1394.z + (-0.5));
        float _1443 = exp2((_1401.w + (-0.5)) * 20.0) * 2.0;
        float _1444 = _1443 * (_1401.x + (-0.5));
        float _1445 = _1443 * (_1401.y + (-0.5));
        float _1446 = _1443 * (_1401.z + (-0.5));
        float _1447 = isnan(0.0) ? _1444 : (isnan(_1444) ? 0.0 : max(_1444, 0.0));
        float _1448 = isnan(0.0) ? _1445 : (isnan(_1445) ? 0.0 : max(_1445, 0.0));
        float _1449 = isnan(0.0) ? _1446 : (isnan(_1446) ? 0.0 : max(_1446, 0.0));
        float _1450 = _1414 * 0.5;
        float _1451 = _1424 * 0.5;
        float _1452 = _1434 * 0.5;
        float _1453 = dot(vec3(_1450, _1451, _1452), vec3(_1450, _1451, _1452));
        float _1458 = (_1453 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1453);
        float _1466 = (dot(vec3(_755, _756, _757), vec3(_1458 * _1450, _1458 * _1451, _1458 * _1452)) + 1.0) * 0.5;
        float _4160 = isnan(0.0) ? _1466 : (isnan(_1466) ? 0.0 : max(_1466, 0.0));
        float _1475 = sqrt(((_1451 * _1451) + (_1450 * _1450)) + (_1452 * _1452)) / (_1447 + 9.9999997473787516355514526367188e-06);
        float _4171 = isnan(0.0) ? _1475 : (isnan(_1475) ? 0.0 : max(_1475, 0.0));
        float _1476 = isnan(1.0) ? _4171 : (isnan(_4171) ? 1.0 : min(_4171, 1.0));
        float _1477 = _1476 * 2.0;
        float _1481 = (1.0 - _1476) / (_1476 + 1.0);
        float _4182 = isnan(0.0) ? _1481 : (isnan(_1481) ? 0.0 : max(_1481, 0.0));
        float _1482 = isnan(1.0) ? _4182 : (isnan(_4182) ? 1.0 : min(_4182, 1.0));
        float _1491 = ((((1.0 - _1482) * (_1477 + 2.0)) * exp2(log2(isnan(1.0) ? _4160 : (isnan(_4160) ? 1.0 : min(_4160, 1.0))) * (_1477 + 1.0))) + _1482) * _1447;
        float _1492 = _1415 * 0.5;
        float _1493 = _1425 * 0.5;
        float _1494 = _1435 * 0.5;
        float _1495 = dot(vec3(_1492, _1493, _1494), vec3(_1492, _1493, _1494));
        float _1500 = (_1495 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1495);
        float _1508 = (dot(vec3(_755, _756, _757), vec3(_1500 * _1492, _1500 * _1493, _1500 * _1494)) + 1.0) * 0.5;
        float _4193 = isnan(0.0) ? _1508 : (isnan(_1508) ? 0.0 : max(_1508, 0.0));
        float _1517 = sqrt(((_1493 * _1493) + (_1492 * _1492)) + (_1494 * _1494)) / (_1448 + 9.9999997473787516355514526367188e-06);
        float _4204 = isnan(0.0) ? _1517 : (isnan(_1517) ? 0.0 : max(_1517, 0.0));
        float _1518 = isnan(1.0) ? _4204 : (isnan(_4204) ? 1.0 : min(_4204, 1.0));
        float _1519 = _1518 * 2.0;
        float _1523 = (1.0 - _1518) / (_1518 + 1.0);
        float _4215 = isnan(0.0) ? _1523 : (isnan(_1523) ? 0.0 : max(_1523, 0.0));
        float _1524 = isnan(1.0) ? _4215 : (isnan(_4215) ? 1.0 : min(_4215, 1.0));
        float _1533 = ((((1.0 - _1524) * (_1519 + 2.0)) * exp2(log2(isnan(1.0) ? _4193 : (isnan(_4193) ? 1.0 : min(_4193, 1.0))) * (_1519 + 1.0))) + _1524) * _1448;
        float _1534 = _1416 * 0.5;
        float _1535 = _1426 * 0.5;
        float _1536 = _1436 * 0.5;
        float _1537 = dot(vec3(_1534, _1535, _1536), vec3(_1534, _1535, _1536));
        float _1542 = (_1537 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1537);
        float _1550 = (dot(vec3(_755, _756, _757), vec3(_1542 * _1534, _1542 * _1535, _1542 * _1536)) + 1.0) * 0.5;
        float _4226 = isnan(0.0) ? _1550 : (isnan(_1550) ? 0.0 : max(_1550, 0.0));
        float _1559 = sqrt(((_1535 * _1535) + (_1534 * _1534)) + (_1536 * _1536)) / (_1449 + 9.9999997473787516355514526367188e-06);
        float _4237 = isnan(0.0) ? _1559 : (isnan(_1559) ? 0.0 : max(_1559, 0.0));
        float _1560 = isnan(1.0) ? _4237 : (isnan(_4237) ? 1.0 : min(_4237, 1.0));
        float _1561 = _1560 * 2.0;
        float _1565 = (1.0 - _1560) / (_1560 + 1.0);
        float _4248 = isnan(0.0) ? _1565 : (isnan(_1565) ? 0.0 : max(_1565, 0.0));
        float _1566 = isnan(1.0) ? _4248 : (isnan(_4248) ? 1.0 : min(_4248, 1.0));
        float _1575 = ((((1.0 - _1566) * (_1561 + 2.0)) * exp2(log2(isnan(1.0) ? _4226 : (isnan(_4226) ? 1.0 : min(_4226, 1.0))) * (_1561 + 1.0))) + _1566) * _1449;
        _1583 = _1416;
        _1584 = _1415;
        _1585 = _1414;
        _1586 = _1426;
        _1587 = _1425;
        _1588 = _1424;
        _1589 = _1436;
        _1590 = _1435;
        _1591 = _1434;
        _1592 = _1449;
        _1593 = _1448;
        _1594 = _1447;
        _1595 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1491 : (isnan(_1491) ? 0.0 : max(_1491, 0.0)));
        _1596 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1533 : (isnan(_1533) ? 0.0 : max(_1533, 0.0)));
        _1597 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1575 : (isnan(_1575) ? 0.0 : max(_1575, 0.0)));
    }
    else
    {
        _1583 = _1276;
        _1584 = _1276;
        _1585 = _1276;
        _1586 = _1276;
        _1587 = _1276;
        _1588 = _1276;
        _1589 = _1276;
        _1590 = _1276;
        _1591 = _1276;
        _1592 = _1276;
        _1593 = _1276;
        _1594 = _1276;
        _1595 = 0.0;
        _1596 = 0.0;
        _1597 = 0.0;
    }
    float _1607 = (cbModelParam._m0[1u].x * (_1595 - _1288)) + _1288;
    float _1608 = (cbModelParam._m0[1u].x * (_1596 - _1289)) + _1289;
    float _1609 = (cbModelParam._m0[1u].x * (_1597 - _1290)) + _1290;
    float _1630 = fma(_1609, cbSceneParam._m0[89u].z, fma(_1608, cbSceneParam._m0[89u].y, _1607 * cbSceneParam._m0[89u].x));
    float _1633 = fma(_1609, cbSceneParam._m0[90u].z, fma(_1608, cbSceneParam._m0[90u].y, _1607 * cbSceneParam._m0[90u].x));
    float _1636 = fma(_1609, cbSceneParam._m0[91u].z, fma(_1608, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1607));
    float _1651 = _913 * 0.5;
    float _1652 = _914 * 0.5;
    float _1653 = _915 * 0.5;
    float _1654 = dot(vec4(_1651, _1652, _1653, 1.0), vec4(_1585, _1588, _1591, _1594));
    float _1657 = dot(vec4(_1651, _1652, _1653, 1.0), vec4(_1584, _1587, _1590, _1593));
    float _1660 = dot(vec4(_1651, _1652, _1653, 1.0), vec4(_1583, _1586, _1589, _1592));
    float _1694;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1667 = dot(vec4(_1651, _1652, _1653, 1.0), vec4(_1275, _1279, _1282, _1285));
        float _1671 = dot(vec4(_1651, _1652, _1653, 1.0), vec4(_1277, _1280, _1283, _1286));
        float _1675 = dot(vec4(_1651, _1652, _1653, 1.0), vec4(_1278, _1281, _1284, _1287));
        float _1682 = dot(vec4(cbModelParam._m0[39u]), vec4(_1651, _1652, _1653, 1.0));
        _1694 = dot(vec3(isnan(0.0) ? _1675 : (isnan(_1675) ? 0.0 : max(_1675, 0.0)), isnan(0.0) ? _1671 : (isnan(_1671) ? 0.0 : max(_1671, 0.0)), isnan(0.0) ? _1667 : (isnan(_1667) ? 0.0 : max(_1667, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1682) ? 0.0 : (isnan(0.0) ? _1682 : max(0.0, _1682))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1694 = 1.0;
    }
    float _1705;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1696 = dot(vec4(cbModelParam._m0[40u]), vec4(_1651, _1652, _1653, 1.0));
        _1705 = dot(vec3(isnan(0.0) ? _1654 : (isnan(_1654) ? 0.0 : max(_1654, 0.0)), isnan(0.0) ? _1657 : (isnan(_1657) ? 0.0 : max(_1657, 0.0)), isnan(0.0) ? _1660 : (isnan(_1660) ? 0.0 : max(_1660, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1696) ? 0.0 : (isnan(0.0) ? _1696 : max(0.0, _1696))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1705 = 1.0;
    }
    float _1709 = (_1705 * cbModelParam._m0[1u].x) + (_1694 * (1.0 - cbModelParam._m0[1u].x));
    float _1719 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _758);
    float _1720 = isnan(_1719) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1719 : min(cbModelParam._m0[25u].z, _1719));
    float _1800;
    float _1802;
    float _1804;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1767 = fma(_974, cbModelParam._m0[13u].z, fma(_970, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _966)) + cbModelParam._m0[13u].w;
        float _1771 = fma(_974, cbModelParam._m0[14u].z, fma(_970, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _966)) + cbModelParam._m0[14u].w;
        float _1775 = fma(_974, cbModelParam._m0[15u].z, fma(_970, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _966)) + cbModelParam._m0[15u].w;
        float _1778 = fma(_915, cbModelParam._m0[13u].z, fma(_914, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _913));
        float _1781 = fma(_915, cbModelParam._m0[14u].z, fma(_914, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _913));
        float _1784 = fma(_915, cbModelParam._m0[15u].z, fma(_914, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _913));
        float _1812;
        if (_1778 > 0.0)
        {
            _1812 = abs((1.0 - _1767) / _1778);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1778 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1767 + 1.0) / _1778);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1812 = frontier_phi_14_12_ladder;
        }
        float _1981;
        if (_1781 > 0.0)
        {
            _1981 = abs((1.0 - _1771) / _1781);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1781 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1771 + 1.0) / _1781);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1981 = frontier_phi_23_19_ladder;
        }
        float _2276;
        if (_1784 > 0.0)
        {
            _2276 = abs((1.0 - _1775) / _1784);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1784 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1775 + 1.0) / _1784);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2276 = frontier_phi_35_30_ladder;
        }
        float _2278 = isnan(_1981) ? _1812 : (isnan(_1812) ? _1981 : min(_1812, _1981));
        float _2279 = isnan(_2276) ? _2278 : (isnan(_2278) ? _2276 : min(_2278, _2276));
        float _2283 = (_2279 * _1778) + _1767;
        float _2284 = (_2279 * _1781) + _1771;
        float _2285 = (_2279 * _1784) + _1775;
        float _2286 = _2279 * 9.9999997473787516355514526367188e-05;
        float _2288 = (-1.0) - _2286;
        float _2290 = _2286 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2285 > _2290) || ((_2285 < _2288) || ((_2284 > _2290) || ((_2284 < _2288) || ((_2283 < _2288) || (_2283 > _2290))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2430 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2285, cbModelParam._m0[9u].z, fma(_2284, cbModelParam._m0[9u].y, _2283 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2285, cbModelParam._m0[10u].z, fma(_2284, cbModelParam._m0[10u].y, _2283 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2285, cbModelParam._m0[11u].z, fma(_2284, cbModelParam._m0[11u].y, _2283 * cbModelParam._m0[11u].x))), _1720);
            frontier_phi_13_35_ladder = _2430.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2430.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2430.x * cbModelParam._m0[1u].y;
        }
        _1800 = frontier_phi_13_35_ladder_2;
        _1802 = frontier_phi_13_35_ladder_1;
        _1804 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1788 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_913, _914, _915), _1720);
        _1800 = _1788.x * cbModelParam._m0[1u].y;
        _1802 = _1788.y * cbModelParam._m0[1u].y;
        _1804 = _1788.z * cbModelParam._m0[1u].y;
    }
    float _1808 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _758);
    float _1809 = isnan(_1808) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1808 : min(cbModelParam._m0[25u].w, _1808));
    float _1898;
    float _1900;
    float _1902;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1862 = fma(_974, cbModelParam._m0[21u].z, fma(_970, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _966)) + cbModelParam._m0[21u].w;
        float _1866 = fma(_974, cbModelParam._m0[22u].z, fma(_970, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _966)) + cbModelParam._m0[22u].w;
        float _1870 = fma(_974, cbModelParam._m0[23u].z, fma(_970, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _966)) + cbModelParam._m0[23u].w;
        float _1873 = fma(_915, cbModelParam._m0[21u].z, fma(_914, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _913));
        float _1876 = fma(_915, cbModelParam._m0[22u].z, fma(_914, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _913));
        float _1879 = fma(_915, cbModelParam._m0[23u].z, fma(_914, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _913));
        float _1986;
        if (_1873 > 0.0)
        {
            _1986 = abs((1.0 - _1862) / _1873);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1873 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1862 + 1.0) / _1873);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1986 = frontier_phi_25_21_ladder;
        }
        float _2303;
        if (_1876 > 0.0)
        {
            _2303 = abs((1.0 - _1866) / _1876);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1876 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1866 + 1.0) / _1876);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2303 = frontier_phi_37_32_ladder;
        }
        float _2630;
        if (_1879 > 0.0)
        {
            _2630 = abs((1.0 - _1870) / _1879);
        }
        else
        {
            float frontier_phi_47_44_ladder;
            if (_1879 < 0.0)
            {
                frontier_phi_47_44_ladder = abs((_1870 + 1.0) / _1879);
            }
            else
            {
                frontier_phi_47_44_ladder = 5000.0;
            }
            _2630 = frontier_phi_47_44_ladder;
        }
        float _2632 = isnan(_2303) ? _1986 : (isnan(_1986) ? _2303 : min(_1986, _2303));
        float _2633 = isnan(_2630) ? _2632 : (isnan(_2632) ? _2630 : min(_2632, _2630));
        float _2637 = (_2633 * _1873) + _1862;
        float _2638 = (_2633 * _1876) + _1866;
        float _2639 = (_2633 * _1879) + _1870;
        float _2640 = _2633 * 9.9999997473787516355514526367188e-05;
        float _2641 = (-1.0) - _2640;
        float _2643 = _2640 + 1.0;
        float frontier_phi_22_47_ladder;
        float frontier_phi_22_47_ladder_1;
        float frontier_phi_22_47_ladder_2;
        if ((_2639 > _2643) || ((_2639 < _2641) || ((_2638 > _2643) || ((_2638 < _2641) || ((_2637 < _2641) || (_2637 > _2643))))))
        {
            frontier_phi_22_47_ladder = 0.0;
            frontier_phi_22_47_ladder_1 = 0.0;
            frontier_phi_22_47_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2757 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2639, cbModelParam._m0[17u].z, fma(_2638, cbModelParam._m0[17u].y, _2637 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2639, cbModelParam._m0[18u].z, fma(_2638, cbModelParam._m0[18u].y, _2637 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2639, cbModelParam._m0[19u].z, fma(_2638, cbModelParam._m0[19u].y, _2637 * cbModelParam._m0[19u].x))), _1809);
            frontier_phi_22_47_ladder = _2757.z * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_1 = _2757.y * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_2 = _2757.x * cbModelParam._m0[1u].z;
        }
        _1898 = frontier_phi_22_47_ladder_2;
        _1900 = frontier_phi_22_47_ladder_1;
        _1902 = frontier_phi_22_47_ladder;
    }
    else
    {
        vec4 _1882 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_913, _914, _915), _1809);
        _1898 = _1882.x * cbModelParam._m0[1u].z;
        _1900 = _1882.y * cbModelParam._m0[1u].z;
        _1902 = _1882.z * cbModelParam._m0[1u].z;
    }
    float _1914 = ((((1.0 - _934) * ((_921 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_934 * _921)) * _905;
    float _1915 = _1914 * ((cbModelParam._m0[1u].w * (_1898 - _1800)) + _1800);
    float _1916 = _1914 * ((cbModelParam._m0[1u].w * (_1900 - _1802)) + _1802);
    float _1917 = _1914 * ((cbModelParam._m0[1u].w * (_1902 - _1804)) + _1804);
    float _1920 = fma(_1917, cbSceneParam._m0[89u].z, fma(_1916, cbSceneParam._m0[89u].y, _1915 * cbSceneParam._m0[89u].x));
    float _1923 = fma(_1917, cbSceneParam._m0[90u].z, fma(_1916, cbSceneParam._m0[90u].y, _1915 * cbSceneParam._m0[90u].x));
    float _1926 = fma(_1917, cbSceneParam._m0[91u].z, fma(_1916, cbSceneParam._m0[91u].y, _1915 * cbSceneParam._m0[91u].x));
    float _1960 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1964 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1968 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1972 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1973 = _1960 / _1972;
    float _1974 = _1964 / _1972;
    float _1975 = _1968 / _1972;
    float _2122;
    float _2123;
    float _2124;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2002 = ((uint(_1975 > cbSceneParam._m0[59u].y) + uint(_1975 > cbSceneParam._m0[59u].x)) + uint(_1975 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2003 = _2002 + 43u;
        uint _2011 = _2002 + 44u;
        uint _2019 = _2002 + 45u;
        uint _2027 = _2002 + 46u;
        float _2038 = fma(_1972, cbSceneParam._m0[_2003].w, fma(_1968, cbSceneParam._m0[_2003].z, fma(_1964, cbSceneParam._m0[_2003].y, _1960 * cbSceneParam._m0[_2003].x)));
        float _2042 = fma(_1972, cbSceneParam._m0[_2011].w, fma(_1968, cbSceneParam._m0[_2011].z, fma(_1964, cbSceneParam._m0[_2011].y, _1960 * cbSceneParam._m0[_2011].x)));
        float _2050 = fma(_1972, cbSceneParam._m0[_2027].w, fma(_1968, cbSceneParam._m0[_2027].z, fma(_1964, cbSceneParam._m0[_2027].y, _1960 * cbSceneParam._m0[_2027].x)));
        float _2055 = cbSceneParam._m0[33u].z * _2050;
        float _2057 = cbSceneParam._m0[33u].w * _2050;
        float _2060 = fma(_1972, cbSceneParam._m0[_2019].w, fma(_1968, cbSceneParam._m0[_2019].z, fma(_1964, cbSceneParam._m0[_2019].y, _1960 * cbSceneParam._m0[_2019].x))) / _2050;
        float _2108 = (cbSceneParam._m0[33u].x - sqrt(((_1974 * _1974) + (_1973 * _1973)) + (_1975 * _1975))) * cbSceneParam._m0[33u].y;
        float _4374 = isnan(0.0) ? _2108 : (isnan(_2108) ? 0.0 : max(_2108, 0.0));
        float _2115 = (isnan(1.0) ? _4374 : (isnan(_4374) ? 1.0 : min(_4374, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2055 + _2038) / _2050, (_2057 + _2042) / _2050), _2060), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2057 + _2038) / _2050, (_2042 - _2055) / _2050), _2060), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2038 - _2055) / _2050, (_2042 - _2057) / _2050), _2060), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2038 - _2057) / _2050, (_2055 + _2042) / _2050), _2060), 0.0)).x), vec4(0.25)));
        _2122 = 1.0 - (_2115 * cbSceneParam._m0[34u].x);
        _2123 = 1.0 - (_2115 * cbSceneParam._m0[34u].y);
        _2124 = 1.0 - (_2115 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2122 = 1.0;
        _2123 = 1.0;
        _2124 = 1.0;
    }
    float _2188;
    float _2190;
    float _2192;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2176 = fma(_1972, cbSceneParam._m0[63u].w, fma(_1968, cbSceneParam._m0[63u].z, fma(_1964, cbSceneParam._m0[63u].y, _1960 * cbSceneParam._m0[63u].x)));
        float _2177 = fma(_1972, cbSceneParam._m0[60u].w, fma(_1968, cbSceneParam._m0[60u].z, fma(_1964, cbSceneParam._m0[60u].y, _1960 * cbSceneParam._m0[60u].x))) / _2176;
        float _2178 = fma(_1972, cbSceneParam._m0[61u].w, fma(_1968, cbSceneParam._m0[61u].z, fma(_1964, cbSceneParam._m0[61u].y, _1960 * cbSceneParam._m0[61u].x))) / _2176;
        float frontier_phi_34_33_ladder;
        float frontier_phi_34_33_ladder_1;
        float frontier_phi_34_33_ladder_2;
        if ((((_2177 >= cbSceneParam._m0[64u].x) && (_2178 >= cbSceneParam._m0[64u].y)) && (_2177 <= cbSceneParam._m0[64u].z)) && (_2178 <= cbSceneParam._m0[64u].w))
        {
            float _2316 = fma(_1972, cbSceneParam._m0[62u].w, fma(_1968, cbSceneParam._m0[62u].z, fma(_1964, cbSceneParam._m0[62u].y, _1960 * cbSceneParam._m0[62u].x))) / _2176;
            float _2320 = isnan(cbSceneParam._m0[41u].w) ? _2316 : (isnan(_2316) ? cbSceneParam._m0[41u].w : max(_2316, cbSceneParam._m0[41u].w));
            float _2363 = (cbSceneParam._m0[33u].x - sqrt(((_1974 * _1974) + (_1973 * _1973)) + (_1975 * _1975))) * cbSceneParam._m0[33u].y;
            float _4390 = isnan(0.0) ? _2363 : (isnan(_2363) ? 0.0 : max(_2363, 0.0));
            float _2370 = (isnan(1.0) ? _4390 : (isnan(_4390) ? 1.0 : min(_4390, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2177, cbSceneParam._m0[33u].w + _2178), _2320), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2177, _2178 - cbSceneParam._m0[33u].z), _2320), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2177 - cbSceneParam._m0[33u].z, _2178 - cbSceneParam._m0[33u].w), _2320), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2177 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2178), _2320), 0.0)).x), vec4(0.25)));
            float _2374 = 1.0 - (_2370 * cbSceneParam._m0[34u].x);
            float _2375 = 1.0 - (_2370 * cbSceneParam._m0[34u].y);
            float _2376 = 1.0 - (_2370 * cbSceneParam._m0[34u].z);
            frontier_phi_34_33_ladder = isnan(_2376) ? _2124 : (isnan(_2124) ? _2376 : min(_2124, _2376));
            frontier_phi_34_33_ladder_1 = isnan(_2375) ? _2123 : (isnan(_2123) ? _2375 : min(_2123, _2375));
            frontier_phi_34_33_ladder_2 = isnan(_2374) ? _2122 : (isnan(_2122) ? _2374 : min(_2122, _2374));
        }
        else
        {
            frontier_phi_34_33_ladder = _2124;
            frontier_phi_34_33_ladder_1 = _2123;
            frontier_phi_34_33_ladder_2 = _2122;
        }
        _2188 = frontier_phi_34_33_ladder_2;
        _2190 = frontier_phi_34_33_ladder_1;
        _2192 = frontier_phi_34_33_ladder;
    }
    else
    {
        _2188 = _2122;
        _2190 = _2123;
        _2192 = _2124;
    }
    uvec4 _2197 = floatBitsToUint(cbInstanceData._m0[_244 + 5u]);
    uint _2199 = _2197.x * 14u;
    uint _2200 = _2199 + 13u;
    float _2207 = _905 + (-1.0);
    float _2212 = (cbLight._m0[_2200].x * _2207) + 1.0;
    float _2213 = (cbLight._m0[_2200].y * _2207) + 1.0;
    float _2214 = (cbLight._m0[_2200].z * _2207) + 1.0;
    float _2215 = (cbLight._m0[_2200].w * _2207) + 1.0;
    uint _2216 = _2199 + 5u;
    float _2222 = isnan(1.0) ? _2213 : (isnan(_2213) ? 1.0 : min(_2213, 1.0));
    uint _2226 = _2199 + 4u;
    float _2235 = isnan(1.0) ? _2212 : (isnan(_2212) ? 1.0 : min(_2212, 1.0));
    uint _2239 = _2199 | 1u;
    float _2250 = dot(vec3(cbLight._m0[_2199].xyz), vec3(_755, _756, _757));
    float _2253 = dot(vec3(cbLight._m0[_2239].xyz), vec3(_755, _756, _757));
    float _4426 = isnan(0.0) ? _2250 : (isnan(_2250) ? 0.0 : max(_2250, 0.0));
    float _4437 = isnan(0.0) ? _2253 : (isnan(_2253) ? 0.0 : max(_2253, 0.0));
    float _2258 = (isnan(1.0) ? _4426 : (isnan(_4426) ? 1.0 : min(_4426, 1.0))) * 0.3183098733425140380859375;
    float _2260 = (isnan(1.0) ? _4437 : (isnan(_4437) ? 1.0 : min(_4437, 1.0))) * 0.3183098733425140380859375;
    float _2267 = ((cbLight._m0[_2216].x * _2222) * _2260) + (((cbLight._m0[_2226].x * _2188) * _2235) * _2258);
    float _2268 = ((_2222 * cbLight._m0[_2216].y) * _2260) + (((cbLight._m0[_2226].y * _2190) * _2235) * _2258);
    float _2269 = ((_2222 * cbLight._m0[_2216].z) * _2260) + (((cbLight._m0[_2226].z * _2192) * _2235) * _2258);
    uvec4 _2273 = floatBitsToUint(cbLight._m0[_2199 + 12u]);
    bool _2275 = _2273.x == 0u;
    float _2377;
    float _2379;
    float _2381;
    if (_2275)
    {
        _2377 = _2267;
        _2379 = _2268;
        _2381 = _2269;
    }
    else
    {
        uint _2385 = _2199 + 6u;
        float _2401 = (dot(vec3(cbLight._m0[_2199 + 2u].xyz), vec3(_755, _756, _757)) * 0.5) + 0.5;
        float _2402 = _2401 * _2401;
        float _4448 = isnan(0.0) ? _2402 : (isnan(_2402) ? 0.0 : max(_2402, 0.0));
        float _2403 = isnan(1.0) ? _4448 : (isnan(_4448) ? 1.0 : min(_4448, 1.0));
        float _2404 = isnan(1.0) ? _2214 : (isnan(_2214) ? 1.0 : min(_2214, 1.0));
        _2377 = (((cbLight._m0[_2385].x * 0.3183098733425140380859375) * _2403) * _2404) + _2267;
        _2379 = (((cbLight._m0[_2385].y * 0.3183098733425140380859375) * _2403) * _2404) + _2268;
        _2381 = (((cbLight._m0[_2385].z * 0.3183098733425140380859375) * _2403) * _2404) + _2269;
    }
    bool _2384 = _2273.y == 0u;
    float _2439;
    float _2441;
    float _2443;
    if (_2384)
    {
        _2439 = _2377;
        _2441 = _2379;
        _2443 = _2381;
    }
    else
    {
        uint _2601 = _2199 + 7u;
        float _2617 = (dot(vec3(cbLight._m0[_2199 + 3u].xyz), vec3(_755, _756, _757)) * 0.5) + 0.5;
        float _2618 = _2617 * _2617;
        float _4464 = isnan(0.0) ? _2618 : (isnan(_2618) ? 0.0 : max(_2618, 0.0));
        float _2619 = isnan(1.0) ? _4464 : (isnan(_4464) ? 1.0 : min(_4464, 1.0));
        float _2620 = isnan(1.0) ? _2215 : (isnan(_2215) ? 1.0 : min(_2215, 1.0));
        _2439 = (((cbLight._m0[_2601].x * 0.3183098733425140380859375) * _2619) * _2620) + _2377;
        _2441 = (((cbLight._m0[_2601].y * 0.3183098733425140380859375) * _2619) * _2620) + _2379;
        _2443 = (((cbLight._m0[_2601].z * 0.3183098733425140380859375) * _2619) * _2620) + _2381;
    }
    uint _2446 = _2199 + 8u;
    float _2459 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2199].w)) * _758) * 0.949999988079071044921875);
    float _2460 = _2459 * _2459;
    float _2461 = cbLight._m0[_2199].x + _834;
    float _2462 = cbLight._m0[_2199].y + _835;
    float _2463 = cbLight._m0[_2199].z + _836;
    float _2467 = inversesqrt(dot(vec3(_2461, _2462, _2463), vec3(_2461, _2462, _2463)));
    float _2468 = _2467 * _2461;
    float _2469 = _2467 * _2462;
    float _2470 = _2467 * _2463;
    float _2471 = dot(vec3(_755, _756, _757), vec3(cbLight._m0[_2199].xyz));
    float _4480 = isnan(0.0) ? _2471 : (isnan(_2471) ? 0.0 : max(_2471, 0.0));
    float _2474 = isnan(1.0) ? _4480 : (isnan(_4480) ? 1.0 : min(_4480, 1.0));
    float _4491 = isnan(0.0) ? _906 : (isnan(_906) ? 0.0 : max(_906, 0.0));
    float _2475 = isnan(1.0) ? _4491 : (isnan(_4491) ? 1.0 : min(_4491, 1.0));
    float _2476 = dot(vec3(_755, _756, _757), vec3(_2468, _2469, _2470));
    float _4502 = isnan(0.0) ? _2476 : (isnan(_2476) ? 0.0 : max(_2476, 0.0));
    float _2479 = isnan(1.0) ? _4502 : (isnan(_4502) ? 1.0 : min(_4502, 1.0));
    float _2480 = dot(vec3(cbLight._m0[_2199].xyz), vec3(_2468, _2469, _2470));
    float _4513 = isnan(0.0) ? _2480 : (isnan(_2480) ? 0.0 : max(_2480, 0.0));
    float _2484 = _2460 * _2460;
    float _2488 = ((_2479 * _2479) * (_2484 + (-1.0))) + 1.0;
    float _2499 = (exp2(log2(1.0 - (isnan(1.0) ? _4513 : (isnan(_4513) ? 1.0 : min(_4513, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2500 = 1.0 - _2460;
    float _2511 = (0.5 / (((_2475 * ((_2474 * _2500) + _2460)) + 9.9999999392252902907785028219223e-09) + (((_2475 * _2500) + _2460) * _2474))) * _2474;
    float _4524 = isnan(0.0) ? _2511 : (isnan(_2511) ? 0.0 : max(_2511, 0.0));
    float _2513 = (isnan(1.0) ? _4524 : (isnan(_4524) ? 1.0 : min(_4524, 1.0))) * (_2484 / ((_2488 * _2488) * 3.141590118408203125));
    uint _2527 = _2199 + 9u;
    float _2538 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2239].w)) * _758) * 0.949999988079071044921875);
    float _2539 = _2538 * _2538;
    float _2540 = cbLight._m0[_2239].x + _834;
    float _2541 = cbLight._m0[_2239].y + _835;
    float _2542 = cbLight._m0[_2239].z + _836;
    float _2546 = inversesqrt(dot(vec3(_2540, _2541, _2542), vec3(_2540, _2541, _2542)));
    float _2547 = _2546 * _2540;
    float _2548 = _2546 * _2541;
    float _2549 = _2546 * _2542;
    float _2550 = dot(vec3(_755, _756, _757), vec3(cbLight._m0[_2239].xyz));
    float _4535 = isnan(0.0) ? _2550 : (isnan(_2550) ? 0.0 : max(_2550, 0.0));
    float _2553 = isnan(1.0) ? _4535 : (isnan(_4535) ? 1.0 : min(_4535, 1.0));
    float _2554 = dot(vec3(_755, _756, _757), vec3(_2547, _2548, _2549));
    float _4546 = isnan(0.0) ? _2554 : (isnan(_2554) ? 0.0 : max(_2554, 0.0));
    float _2557 = isnan(1.0) ? _4546 : (isnan(_4546) ? 1.0 : min(_4546, 1.0));
    float _2558 = dot(vec3(cbLight._m0[_2239].xyz), vec3(_2547, _2548, _2549));
    float _4557 = isnan(0.0) ? _2558 : (isnan(_2558) ? 0.0 : max(_2558, 0.0));
    float _2562 = _2539 * _2539;
    float _2566 = ((_2557 * _2557) * (_2562 + (-1.0))) + 1.0;
    float _2575 = (exp2(log2(1.0 - (isnan(1.0) ? _4557 : (isnan(_4557) ? 1.0 : min(_4557, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2576 = 1.0 - _2539;
    float _2586 = (0.5 / (((_2475 * ((_2553 * _2576) + _2539)) + 9.9999999392252902907785028219223e-09) + (((_2475 * _2576) + _2539) * _2553))) * _2553;
    float _4568 = isnan(0.0) ? _2586 : (isnan(_2586) ? 0.0 : max(_2586, 0.0));
    float _2588 = (isnan(1.0) ? _4568 : (isnan(_4568) ? 1.0 : min(_4568, 1.0))) * (_2562 / ((_2566 * _2566) * 3.141590118408203125));
    float _2598 = (((_2575 * cbLight._m0[_2527].x) * _2588) * _2222) + ((((cbLight._m0[_2446].x * _2188) * _2499) * _2513) * _2235);
    float _2599 = (((_2575 * cbLight._m0[_2527].y) * _2588) * _2222) + ((((cbLight._m0[_2446].y * _2190) * _2499) * _2513) * _2235);
    float _2600 = (((_2575 * cbLight._m0[_2527].z) * _2588) * _2222) + ((((cbLight._m0[_2446].z * _2192) * _2499) * _2513) * _2235);
    float _2656;
    float _2658;
    float _2660;
    if (_2275)
    {
        _2656 = _2598;
        _2658 = _2599;
        _2660 = _2600;
    }
    else
    {
        uint _2662 = _2199 + 2u;
        uint _2666 = _2199 + 10u;
        float _2680 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2662].w)) * _758) * 0.949999988079071044921875);
        float _2681 = _2680 * _2680;
        float _2682 = cbLight._m0[_2662].x + _834;
        float _2683 = cbLight._m0[_2662].y + _835;
        float _2684 = cbLight._m0[_2662].z + _836;
        float _2688 = inversesqrt(dot(vec3(_2682, _2683, _2684), vec3(_2682, _2683, _2684)));
        float _2689 = _2688 * _2682;
        float _2690 = _2688 * _2683;
        float _2691 = _2688 * _2684;
        float _2692 = dot(vec3(_755, _756, _757), vec3(cbLight._m0[_2662].xyz));
        float _4579 = isnan(0.0) ? _2692 : (isnan(_2692) ? 0.0 : max(_2692, 0.0));
        float _2695 = isnan(1.0) ? _4579 : (isnan(_4579) ? 1.0 : min(_4579, 1.0));
        float _2696 = dot(vec3(_755, _756, _757), vec3(_2689, _2690, _2691));
        float _4590 = isnan(0.0) ? _2696 : (isnan(_2696) ? 0.0 : max(_2696, 0.0));
        float _2699 = isnan(1.0) ? _4590 : (isnan(_4590) ? 1.0 : min(_4590, 1.0));
        float _2700 = dot(vec3(cbLight._m0[_2662].xyz), vec3(_2689, _2690, _2691));
        float _4601 = isnan(0.0) ? _2700 : (isnan(_2700) ? 0.0 : max(_2700, 0.0));
        float _2704 = _2681 * _2681;
        float _2708 = ((_2699 * _2699) * (_2704 + (-1.0))) + 1.0;
        float _2717 = (exp2(log2(1.0 - (isnan(1.0) ? _4601 : (isnan(_4601) ? 1.0 : min(_4601, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2718 = 1.0 - _2681;
        float _2728 = (0.5 / (((_2475 * ((_2695 * _2718) + _2681)) + 9.9999999392252902907785028219223e-09) + (((_2475 * _2718) + _2681) * _2695))) * _2695;
        float _4612 = isnan(0.0) ? _2728 : (isnan(_2728) ? 0.0 : max(_2728, 0.0));
        float _2730 = (isnan(1.0) ? _4612 : (isnan(_4612) ? 1.0 : min(_4612, 1.0))) * (_2704 / ((_2708 * _2708) * 3.141590118408203125));
        float _2731 = isnan(1.0) ? _2214 : (isnan(_2214) ? 1.0 : min(_2214, 1.0));
        _2656 = (((_2717 * cbLight._m0[_2666].x) * _2730) * _2731) + _2598;
        _2658 = (((_2717 * cbLight._m0[_2666].y) * _2730) * _2731) + _2599;
        _2660 = (((_2717 * cbLight._m0[_2666].z) * _2730) * _2731) + _2600;
    }
    float _2762;
    float _2764;
    float _2766;
    if (_2384)
    {
        _2762 = _2656;
        _2764 = _2658;
        _2766 = _2660;
    }
    else
    {
        uint _2773 = _2199 + 3u;
        uint _2777 = _2199 + 11u;
        float _2791 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2773].w)) * _758) * 0.949999988079071044921875);
        float _2792 = _2791 * _2791;
        float _2793 = cbLight._m0[_2773].x + _834;
        float _2794 = cbLight._m0[_2773].y + _835;
        float _2795 = cbLight._m0[_2773].z + _836;
        float _2799 = inversesqrt(dot(vec3(_2793, _2794, _2795), vec3(_2793, _2794, _2795)));
        float _2800 = _2799 * _2793;
        float _2801 = _2799 * _2794;
        float _2802 = _2799 * _2795;
        float _2803 = dot(vec3(_755, _756, _757), vec3(cbLight._m0[_2773].xyz));
        float _4628 = isnan(0.0) ? _2803 : (isnan(_2803) ? 0.0 : max(_2803, 0.0));
        float _2806 = isnan(1.0) ? _4628 : (isnan(_4628) ? 1.0 : min(_4628, 1.0));
        float _2807 = dot(vec3(_755, _756, _757), vec3(_2800, _2801, _2802));
        float _4639 = isnan(0.0) ? _2807 : (isnan(_2807) ? 0.0 : max(_2807, 0.0));
        float _2810 = isnan(1.0) ? _4639 : (isnan(_4639) ? 1.0 : min(_4639, 1.0));
        float _2811 = dot(vec3(cbLight._m0[_2773].xyz), vec3(_2800, _2801, _2802));
        float _4650 = isnan(0.0) ? _2811 : (isnan(_2811) ? 0.0 : max(_2811, 0.0));
        float _2815 = _2792 * _2792;
        float _2819 = ((_2810 * _2810) * (_2815 + (-1.0))) + 1.0;
        float _2828 = (exp2(log2(1.0 - (isnan(1.0) ? _4650 : (isnan(_4650) ? 1.0 : min(_4650, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2829 = 1.0 - _2792;
        float _2839 = (0.5 / (((_2475 * ((_2806 * _2829) + _2792)) + 9.9999999392252902907785028219223e-09) + (((_2475 * _2829) + _2792) * _2806))) * _2806;
        float _4661 = isnan(0.0) ? _2839 : (isnan(_2839) ? 0.0 : max(_2839, 0.0));
        float _2841 = (isnan(1.0) ? _4661 : (isnan(_4661) ? 1.0 : min(_4661, 1.0))) * (_2815 / ((_2819 * _2819) * 3.141590118408203125));
        float _2842 = isnan(1.0) ? _2215 : (isnan(_2215) ? 1.0 : min(_2215, 1.0));
        _2762 = (((_2828 * cbLight._m0[_2777].x) * _2841) * _2842) + _2656;
        _2764 = (((_2828 * cbLight._m0[_2777].y) * _2841) * _2842) + _2658;
        _2766 = (((_2828 * cbLight._m0[_2777].z) * _2841) * _2842) + _2660;
    }
    float _2908;
    float _2910;
    float _2912;
    float _2914;
    float _2916;
    float _2918;
    if (_2197.y == 0u)
    {
        uvec4 _2863 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2864 = _2863.x;
        uint _2875 = uint((float(_2863.y) * floor(float(uint(cbSceneParam._m0[85u].y * _843) / _2864))) + floor(float(uint(cbSceneParam._m0[85u].x * _842) / _2864)));
        float _2885 = (log2(_1975 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2886 = isnan(0.0) ? _2885 : (isnan(_2885) ? 0.0 : max(_2885, 0.0));
        uint _2889 = uint(isnan(14.0) ? _2886 : (isnan(_2886) ? 14.0 : min(_2886, 14.0)));
        uvec4 _2894 = texelFetch(g_lightClusterGridBuffer, int(((_2889 << 2u) + (_2875 << 6u)) >> 2u));
        uint _2895 = _2894.x;
        uint _2896 = _2863.z;
        float _2975;
        float _2977;
        float _2979;
        float _2981;
        float _2983;
        float _2985;
        if (((((1u << ((_2896 >> 4u) & 15u)) + 4294967295u) & _2895) == 0u) || ((_2896 & 240u) == 0u))
        {
            _2975 = 0.0;
            _2977 = 0.0;
            _2979 = 0.0;
            _2981 = 0.0;
            _2983 = 0.0;
            _2985 = 0.0;
        }
        else
        {
            float _2976;
            float _2978;
            float _2980;
            float _2982;
            float _2984;
            float _2986;
            float _3120 = 0.0;
            float _3121 = 0.0;
            float _3122 = 0.0;
            float _3123 = 0.0;
            float _3124 = 0.0;
            float _3125 = 0.0;
            uint _3126 = 0u;
            uint _3135;
            bool _3136;
            for (;;)
            {
                _3135 = texelFetch(g_lightClassification, int((((_2889 << 5u) + (_2875 << 9u)) + (_3126 << 2u)) >> 2u)).x;
                _3136 = _3135 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3136)
                {
                    frontier_phi_66_pred = _3125;
                    frontier_phi_66_pred_1 = _3124;
                    frontier_phi_66_pred_2 = _3123;
                    frontier_phi_66_pred_3 = _3122;
                    frontier_phi_66_pred_4 = _3121;
                    frontier_phi_66_pred_5 = _3120;
                }
                else
                {
                    float _3244;
                    float _3245;
                    float _3246;
                    float _3247;
                    float _3248;
                    float _3249;
                    uint _3250;
                    _3244 = _3120;
                    _3245 = _3121;
                    _3246 = _3122;
                    _3247 = _3123;
                    _3248 = _3124;
                    _3249 = _3125;
                    _3250 = _3135;
                    float _3176;
                    float _3177;
                    float _3178;
                    float _3179;
                    float _3180;
                    float _3181;
                    for (;;)
                    {
                        uint _3254 = uint(findLSB(_3250)) + (_3126 << 5u);
                        uint _3251 = (_3250 + 4294967295u) & _3250;
                        uint _3256 = _3254 * 48u;
                        vec4 _3270 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3256)).x, texelFetch(g_PointLightRenderingBuffer, int(_3256 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3256 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3256 + 3u)).x));
                        uint _3276 = (_3254 * 48u) + 4u;
                        vec4 _3289 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3276)).x, texelFetch(g_PointLightRenderingBuffer, int(_3276 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3276 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3276 + 3u)).x));
                        uint _3295 = (_3254 * 48u) + 8u;
                        vec3 _3306 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3295)).x, texelFetch(g_PointLightRenderingBuffer, int(_3295 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3295 + 2u)).x));
                        float _3310 = _3270.x - _1973;
                        float _3311 = _3270.y - _1974;
                        float _3312 = _3270.z - _1975;
                        float _3313 = dot(vec3(_3310, _3311, _3312), vec3(_3310, _3311, _3312));
                        float _3316 = inversesqrt(_3313);
                        float _3317 = _3316 * _3310;
                        float _3318 = _3316 * _3311;
                        float _3319 = _3316 * _3312;
                        float _3320 = dot(vec3(_861, _864, _867), vec3(_3317, _3318, _3319));
                        float _3325 = 1.0 - (_3313 * _3270.w);
                        float _4687 = isnan(0.0) ? _3325 : (isnan(_3325) ? 0.0 : max(_3325, 0.0));
                        float _3326 = isnan(1.0) ? _4687 : (isnan(_4687) ? 1.0 : min(_4687, 1.0));
                        float _3327 = sqrt(_3313) * _3289.w;
                        float _3330 = 1.39999997615814208984375 / (_3327 + 1.39999997615814208984375);
                        float _3331 = _3330 * _3330;
                        float _3334 = ((1.0 - _3331) * _3320) + _3331;
                        float _3337 = _3327 * _3327;
                        float _3341 = ((isnan(0.0) ? _3334 : (isnan(_3334) ? 0.0 : max(_3334, 0.0))) * _3326) / ((_3337 * 0.699999988079071044921875) + 1.0);
                        float _3345 = (-0.0) - _1973;
                        float _3346 = (-0.0) - _1974;
                        float _3347 = (-0.0) - _1975;
                        float _3351 = inversesqrt(dot(vec3(_3345, _3346, _3347), vec3(_3345, _3346, _3347)));
                        float _3352 = _3351 * _3345;
                        float _3353 = _3351 * _3346;
                        float _3354 = _3351 * _3347;
                        float _3361 = exp2(log2(1.0 / ((_3337 * 3.5) + 5.0)) * 0.25);
                        float _3362 = 1.0 - _921;
                        float _3369 = sqrt(1.0 - ((1.0 - (_3362 * _3362)) * (1.0 - (_3361 * _3361))));
                        float _3370 = _3369 * _3369;
                        float _3371 = _3370 * _3370;
                        float _3372 = _3352 + _3317;
                        float _3373 = _3353 + _3318;
                        float _3374 = _3354 + _3319;
                        float _3378 = inversesqrt(dot(vec3(_3372, _3373, _3374), vec3(_3372, _3373, _3374)));
                        float _3382 = dot(vec3(_861, _864, _867), vec3(_3352, _3353, _3354));
                        float _4703 = isnan(0.0) ? _3382 : (isnan(_3382) ? 0.0 : max(_3382, 0.0));
                        float _3385 = isnan(1.0) ? _4703 : (isnan(_4703) ? 1.0 : min(_4703, 1.0));
                        float _3386 = dot(vec3(_861, _864, _867), vec3(_3378 * _3372, _3378 * _3373, _3378 * _3374));
                        float _4714 = isnan(0.0) ? _3386 : (isnan(_3386) ? 0.0 : max(_3386, 0.0));
                        float _3389 = isnan(1.0) ? _4714 : (isnan(_4714) ? 1.0 : min(_4714, 1.0));
                        float _3393 = ((_3389 * _3389) * (_3371 + (-1.0))) + 1.0;
                        float _3394 = _3330 * _3370;
                        float _3395 = _3394 * _3394;
                        float _3398 = ((1.0 - _3395) * _3320) + _3395;
                        float _4725 = isnan(0.0) ? _3398 : (isnan(_3398) ? 0.0 : max(_3398, 0.0));
                        float _3399 = isnan(1.0) ? _4725 : (isnan(_4725) ? 1.0 : min(_4725, 1.0));
                        float _3400 = 1.0 - _3370;
                        float _3410 = (0.5 / (((_3399 * ((_3385 * _3400) + _3370)) + 9.9999999392252902907785028219223e-09) + (((_3399 * _3400) + _3370) * _3385))) * _3399;
                        float _4736 = isnan(0.0) ? _3410 : (isnan(_3410) ? 0.0 : max(_3410, 0.0));
                        float _3421 = (((_3371 * 3.1415927410125732421875) * (isnan(1.0) ? _4736 : (isnan(_4736) ? 1.0 : min(_4736, 1.0)))) / ((_3393 * _3393) * ((_3337 * 2.1991131305694580078125) + 3.141590118408203125))) * _3326;
                        _3179 = (_3341 * _3289.x) + _3247;
                        _3180 = (_3341 * _3289.y) + _3248;
                        _3181 = (_3341 * _3289.z) + _3249;
                        _3176 = (_3421 * _3306.x) + _3244;
                        _3177 = (_3421 * _3306.y) + _3245;
                        _3178 = (_3421 * _3306.z) + _3246;
                        if (_3251 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3244 = _3176;
                            _3245 = _3177;
                            _3246 = _3178;
                            _3247 = _3179;
                            _3248 = _3180;
                            _3249 = _3181;
                            _3250 = _3251;
                        }
                    }
                    frontier_phi_66_pred = _3181;
                    frontier_phi_66_pred_1 = _3180;
                    frontier_phi_66_pred_2 = _3179;
                    frontier_phi_66_pred_3 = _3178;
                    frontier_phi_66_pred_4 = _3177;
                    frontier_phi_66_pred_5 = _3176;
                }
                _2986 = frontier_phi_66_pred;
                _2984 = frontier_phi_66_pred_1;
                _2982 = frontier_phi_66_pred_2;
                _2980 = frontier_phi_66_pred_3;
                _2978 = frontier_phi_66_pred_4;
                _2976 = frontier_phi_66_pred_5;
                uint _3127 = _3126 + 1u;
                if (_3127 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3120 = _2976;
                    _3121 = _2978;
                    _3122 = _2980;
                    _3123 = _2982;
                    _3124 = _2984;
                    _3125 = _2986;
                    _3126 = _3127;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2975 = _2976;
            _2977 = _2978;
            _2979 = _2980;
            _2981 = _2982;
            _2983 = _2984;
            _2985 = _2986;
        }
        uvec4 _2989 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2990 = _2989.z;
        uint _2992 = (_2990 >> 8u) & 15u;
        float _3088;
        float _3090;
        float _3092;
        float _3094;
        float _3096;
        float _3098;
        if (((4294967295u << _2992) & _2895) == 0u)
        {
            _3088 = _2975;
            _3090 = _2977;
            _3092 = _2979;
            _3094 = _2981;
            _3096 = _2983;
            _3098 = _2985;
        }
        else
        {
            float _3113 = inversesqrt(dot(vec3(_1973, _1974, _1975), vec3(_1973, _1974, _1975)));
            float _3114 = _3113 * _1973;
            float _3115 = _3113 * _1974;
            float _3116 = _3113 * _1975;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2992 < ((_2990 >> 12u) & 15u))
            {
                float _3089;
                float _3091;
                float _3093;
                float _3095;
                float _3097;
                float _3099;
                float _3227 = _2975;
                float _3228 = _2977;
                float _3229 = _2979;
                float _3230 = _2981;
                float _3231 = _2983;
                float _3232 = _2985;
                uint _3233 = _2992;
                uint _3242;
                bool _3243;
                for (;;)
                {
                    _3242 = texelFetch(g_lightClassification, int((((_2889 << 5u) + (_2875 << 9u)) + (_3233 << 2u)) >> 2u)).x;
                    _3243 = _3242 == 0u;
                    float frontier_phi_72_pred;
                    float frontier_phi_72_pred_1;
                    float frontier_phi_72_pred_2;
                    float frontier_phi_72_pred_3;
                    float frontier_phi_72_pred_4;
                    float frontier_phi_72_pred_5;
                    if (_3243)
                    {
                        frontier_phi_72_pred = _3232;
                        frontier_phi_72_pred_1 = _3231;
                        frontier_phi_72_pred_2 = _3230;
                        frontier_phi_72_pred_3 = _3229;
                        frontier_phi_72_pred_4 = _3228;
                        frontier_phi_72_pred_5 = _3227;
                    }
                    else
                    {
                        float _3426;
                        float _3427;
                        float _3428;
                        float _3429;
                        float _3430;
                        float _3431;
                        float _3719;
                        float _3720;
                        float _3721;
                        float _3722;
                        float _3723;
                        float _3724;
                        float _3439 = _3227;
                        float _3440 = _3228;
                        float _3441 = _3229;
                        float _3442 = _3230;
                        float _3443 = _3231;
                        float _3444 = _3232;
                        uint _3445 = _3242;
                        uint _3446;
                        vec4 _3471;
                        float _3472;
                        vec4 _3487;
                        vec3 _3499;
                        vec4 _3514;
                        vec4 _3529;
                        float _3575;
                        bool _3576;
                        for (;;)
                        {
                            uint _3456 = ((_3233 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3445));
                            _3446 = (_3445 + 4294967295u) & _3445;
                            uint _3458 = _3456 * 40u;
                            _3471 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3458)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3458 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3458 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3458 + 3u)).x));
                            _3472 = _3471.w;
                            uint _3474 = (_3456 * 40u) + 4u;
                            _3487 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3474)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3474 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3474 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3474 + 3u)).x));
                            uint _3489 = (_3456 * 40u) + 8u;
                            _3499 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3489)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3489 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3489 + 2u)).x));
                            uint _3501 = (_3456 * 40u) + 16u;
                            _3514 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3501)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3501 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3501 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3501 + 3u)).x));
                            uint _3516 = (_3456 * 40u) + 20u;
                            _3529 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3516)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3516 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3516 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3516 + 3u)).x));
                            uint _3531 = (_3456 * 40u) + 24u;
                            vec4 _3544 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3531)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3531 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3531 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3531 + 3u)).x));
                            uint _3550 = (_3456 * 40u) + 28u;
                            vec4 _3563 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3550)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3550 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3550 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3550 + 3u)).x));
                            _3575 = fma(_1975, _3563.z, fma(_1974, _3563.y, _3563.x * _1973)) + _3563.w;
                            _3576 = !((fma(_1975, _3544.z, fma(_1974, _3544.y, _3544.x * _1973)) + _3544.w) <= 0.0);
                            float frontier_phi_78_pred;
                            float frontier_phi_78_pred_1;
                            float frontier_phi_78_pred_2;
                            float frontier_phi_78_pred_3;
                            float frontier_phi_78_pred_4;
                            float frontier_phi_78_pred_5;
                            if (_3576)
                            {
                                float _3603 = _3471.x - _1973;
                                float _3604 = _3471.y - _1974;
                                float _3605 = _3471.z - _1975;
                                float _3606 = dot(vec3(_3603, _3604, _3605), vec3(_3603, _3604, _3605));
                                float _3609 = inversesqrt(_3606);
                                float _3610 = _3609 * _3603;
                                float _3611 = _3609 * _3604;
                                float _3612 = _3609 * _3605;
                                float _3616 = 1.0 - (_3606 / (_3472 * _3472));
                                float _4747 = isnan(0.0) ? _3616 : (isnan(_3616) ? 0.0 : max(_3616, 0.0));
                                float _3617 = isnan(1.0) ? _4747 : (isnan(_4747) ? 1.0 : min(_4747, 1.0));
                                float _3621 = sqrt(_3606) * _3487.w;
                                float _3623 = 1.39999997615814208984375 / (_3621 + 1.39999997615814208984375);
                                float _3624 = _3623 * _3623;
                                float _3627 = ((1.0 - _3624) * dot(vec3(_3610, _3611, _3612), vec3(_861, _864, _867))) + _3624;
                                float _3630 = _3621 * _3621;
                                float _3634 = (fma(_1975, _3514.z, fma(_1974, _3514.y, _3514.x * _1973)) + _3514.w) / _3575;
                                float _3635 = (fma(_1975, _3529.z, fma(_1974, _3529.y, _3529.x * _1973)) + _3529.w) / _3575;
                                float _3639 = 1.0 - dot(vec2(_3634, _3635), vec2(_3634, _3635));
                                float _4763 = isnan(0.0) ? _3639 : (isnan(_3639) ? 0.0 : max(_3639, 0.0));
                                float _3640 = isnan(1.0) ? _4763 : (isnan(_4763) ? 1.0 : min(_4763, 1.0));
                                float _3641 = _3640 * (((isnan(0.0) ? _3627 : (isnan(_3627) ? 0.0 : max(_3627, 0.0))) * _3617) / ((_3630 * 0.699999988079071044921875) + 1.0));
                                float _3653 = exp2(log2(1.0 / ((_3630 * 3.5) + 5.0)) * 0.25);
                                float _3654 = 1.0 - _921;
                                float _3661 = sqrt(1.0 - ((1.0 - (_3654 * _3654)) * (1.0 - (_3653 * _3653))));
                                float _3662 = _3661 * _3661;
                                float _3663 = _3662 * _3662;
                                float _3664 = _3610 - _3114;
                                float _3665 = _3611 - _3115;
                                float _3666 = _3612 - _3116;
                                float _3670 = inversesqrt(dot(vec3(_3664, _3665, _3666), vec3(_3664, _3665, _3666)));
                                float _3674 = dot(vec3(_861, _864, _867), vec3((-0.0) - _3114, (-0.0) - _3115, (-0.0) - _3116));
                                float _4774 = isnan(0.0) ? _3674 : (isnan(_3674) ? 0.0 : max(_3674, 0.0));
                                float _3677 = isnan(1.0) ? _4774 : (isnan(_4774) ? 1.0 : min(_4774, 1.0));
                                float _3678 = dot(vec3(_861, _864, _867), vec3(_3670 * _3664, _3670 * _3665, _3670 * _3666));
                                float _4785 = isnan(0.0) ? _3678 : (isnan(_3678) ? 0.0 : max(_3678, 0.0));
                                float _3681 = isnan(1.0) ? _4785 : (isnan(_4785) ? 1.0 : min(_4785, 1.0));
                                float _3685 = ((_3681 * _3681) * (_3663 + (-1.0))) + 1.0;
                                float _3686 = _3623 * _3662;
                                float _3687 = _3686 * _3686;
                                float _3693 = ((1.0 - _3687) * dot(vec3(_861, _864, _867), vec3(_3610, _3611, _3612))) + _3687;
                                float _4796 = isnan(0.0) ? _3693 : (isnan(_3693) ? 0.0 : max(_3693, 0.0));
                                float _3694 = isnan(1.0) ? _4796 : (isnan(_4796) ? 1.0 : min(_4796, 1.0));
                                float _3695 = 1.0 - _3662;
                                float _3705 = (0.5 / (((_3694 * ((_3677 * _3695) + _3662)) + 9.9999999392252902907785028219223e-09) + (((_3694 * _3695) + _3662) * _3677))) * _3694;
                                float _4807 = isnan(0.0) ? _3705 : (isnan(_3705) ? 0.0 : max(_3705, 0.0));
                                float _3715 = (_3640 * _3617) * (((_3663 * 3.1415927410125732421875) * (isnan(1.0) ? _4807 : (isnan(_4807) ? 1.0 : min(_4807, 1.0)))) / ((_3685 * _3685) * ((_3630 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_78_pred = _3641 * _3487.y;
                                frontier_phi_78_pred_1 = _3641 * _3487.x;
                                frontier_phi_78_pred_2 = _3715 * _3499.z;
                                frontier_phi_78_pred_3 = _3715 * _3499.y;
                                frontier_phi_78_pred_4 = _3715 * _3499.x;
                                frontier_phi_78_pred_5 = _3641 * _3487.z;
                            }
                            else
                            {
                                frontier_phi_78_pred = 0.0;
                                frontier_phi_78_pred_1 = 0.0;
                                frontier_phi_78_pred_2 = 0.0;
                                frontier_phi_78_pred_3 = 0.0;
                                frontier_phi_78_pred_4 = 0.0;
                                frontier_phi_78_pred_5 = 0.0;
                            }
                            _3723 = frontier_phi_78_pred;
                            _3722 = frontier_phi_78_pred_1;
                            _3721 = frontier_phi_78_pred_2;
                            _3720 = frontier_phi_78_pred_3;
                            _3719 = frontier_phi_78_pred_4;
                            _3724 = frontier_phi_78_pred_5;
                            _3429 = _3722 + _3442;
                            _3430 = _3723 + _3443;
                            _3431 = _3724 + _3444;
                            _3426 = _3719 + _3439;
                            _3427 = _3720 + _3440;
                            _3428 = _3721 + _3441;
                            if (_3446 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3439 = _3426;
                                _3440 = _3427;
                                _3441 = _3428;
                                _3442 = _3429;
                                _3443 = _3430;
                                _3444 = _3431;
                                _3445 = _3446;
                                continue;
                            }
                        }
                        frontier_phi_72_pred = _3431;
                        frontier_phi_72_pred_1 = _3430;
                        frontier_phi_72_pred_2 = _3429;
                        frontier_phi_72_pred_3 = _3428;
                        frontier_phi_72_pred_4 = _3427;
                        frontier_phi_72_pred_5 = _3426;
                    }
                    _3099 = frontier_phi_72_pred;
                    _3097 = frontier_phi_72_pred_1;
                    _3095 = frontier_phi_72_pred_2;
                    _3093 = frontier_phi_72_pred_3;
                    _3091 = frontier_phi_72_pred_4;
                    _3089 = frontier_phi_72_pred_5;
                    uint _3234 = _3233 + 1u;
                    if (_3234 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3227 = _3089;
                        _3228 = _3091;
                        _3229 = _3093;
                        _3230 = _3095;
                        _3231 = _3097;
                        _3232 = _3099;
                        _3233 = _3234;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _3099;
                frontier_phi_60_61_ladder_1 = _3097;
                frontier_phi_60_61_ladder_2 = _3093;
                frontier_phi_60_61_ladder_3 = _3091;
                frontier_phi_60_61_ladder_4 = _3089;
                frontier_phi_60_61_ladder_5 = _3095;
            }
            else
            {
                frontier_phi_60_61_ladder = _2985;
                frontier_phi_60_61_ladder_1 = _2983;
                frontier_phi_60_61_ladder_2 = _2979;
                frontier_phi_60_61_ladder_3 = _2977;
                frontier_phi_60_61_ladder_4 = _2975;
                frontier_phi_60_61_ladder_5 = _2981;
            }
            _3088 = frontier_phi_60_61_ladder_4;
            _3090 = frontier_phi_60_61_ladder_3;
            _3092 = frontier_phi_60_61_ladder_2;
            _3094 = frontier_phi_60_61_ladder_5;
            _3096 = frontier_phi_60_61_ladder_1;
            _3098 = frontier_phi_60_61_ladder;
        }
        float _3103 = isnan(1.0) ? _905 : (isnan(_905) ? 1.0 : min(_905, 1.0));
        _2908 = (_3103 * _3094) + _2439;
        _2910 = (_3103 * _3096) + _2441;
        _2912 = (_3103 * _3098) + _2443;
        _2914 = ((_3088 * 0.039999999105930328369140625) * _3103) + _2762;
        _2916 = ((_3090 * 0.039999999105930328369140625) * _3103) + _2764;
        _2918 = ((_3092 * 0.039999999105930328369140625) * _3103) + _2766;
    }
    else
    {
        _2908 = _2439;
        _2910 = _2441;
        _2912 = _2443;
        _2914 = _2762;
        _2916 = _2764;
        _2918 = _2766;
    }
    float _4823 = isnan(0.0) ? _890 : (isnan(_890) ? 0.0 : max(_890, 0.0));
    float _4834 = isnan(0.0) ? _891 : (isnan(_891) ? 0.0 : max(_891, 0.0));
    float _4845 = isnan(0.0) ? _892 : (isnan(_892) ? 0.0 : max(_892, 0.0));
    uint _2938 = _244 + 6u;
    float _2946 = _842 / cbSceneParam._m0[86u].x;
    float _2947 = _843 / cbSceneParam._m0[86u].y;
    vec4 _2961 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2946, _2947, (log2((isnan(cbSceneParam._m0[77u].w) ? _776 : (isnan(_776) ? cbSceneParam._m0[77u].w : min(_776, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2963 = _2961.x;
    float _2964 = _2961.y;
    float _2965 = _2961.z;
    float _2966 = _2961.w;
    float _3038;
    float _3040;
    float _3042;
    float _3044;
    if (_776 > cbSceneParam._m0[78u].w)
    {
        float _3000 = isnan(_776) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _776 : min(cbSceneParam._m0[80u].w, _776));
        float _3001 = _3000 / _776;
        float _3012 = _3001 * _827;
        float _3013 = _828 * _3001;
        float _3014 = (-0.0) - _3013;
        float _3016 = _3001 * _829;
        float _3018 = (cbSceneParam._m0[77u].w * _3014) / _3000;
        float _3019 = _3018 + cbSceneParam._m0[79u].w;
        float _3020 = cbSceneParam._m0[79u].w - _3013;
        float _3026 = sqrt(((_3012 * _3012) + (_3013 * _3013)) + (_3016 * _3016));
        float _3029 = (1.0 - (cbSceneParam._m0[77u].w / _3000)) * _3026;
        float _3034 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3036 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3189;
        if (abs((_3014 - _3018) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3189 = ((((_3019 > 0.0) ? exp2(_3034 * _3019) : (2.0 - exp2(_3036 * _3019))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3029;
        }
        else
        {
            float _3149 = 1.0 / cbSceneParam._m0[80u].x;
            float _3150 = isnan(_3020) ? _3019 : (isnan(_3019) ? _3020 : max(_3019, _3020));
            float _3151 = isnan(_3020) ? _3019 : (isnan(_3019) ? _3020 : min(_3019, _3020));
            float _3160 = isnan(0.0) ? _3150 : (isnan(_3150) ? 0.0 : min(_3150, 0.0));
            float _3161 = isnan(0.0) ? _3151 : (isnan(_3151) ? 0.0 : min(_3151, 0.0));
            _3189 = ((abs(_3026 / _3014) * cbSceneParam._m0[80u].y) * ((((_3160 - _3161) * 2.0) - ((exp2(_3034 * (isnan(0.0) ? _3150 : (isnan(_3150) ? 0.0 : max(_3150, 0.0)))) - exp2(_3034 * (isnan(0.0) ? _3151 : (isnan(_3151) ? 0.0 : max(_3151, 0.0))))) * _3149)) - ((exp2(_3036 * _3160) - exp2(_3036 * _3161)) * _3149))) + (_3029 * cbSceneParam._m0[80u].z);
        }
        vec4 _3191 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2946, _2947, 1.0), 0.0);
        float _3200 = exp2((_3189 * (-1.44269502162933349609375)) * (1.0 - _3191.w));
        float _3201 = log2(_3200);
        float _3217 = log2(_2966);
        _3038 = (exp2(_3217 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3201 * cbSceneParam._m0[78u].x)) * _3191.x) / cbSceneParam._m0[78u].x)) + _2963;
        _3040 = (exp2(_3217 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3201 * cbSceneParam._m0[78u].y)) * _3191.y) / cbSceneParam._m0[78u].y)) + _2964;
        _3042 = (exp2(_3217 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3201 * cbSceneParam._m0[78u].z)) * _3191.z) / cbSceneParam._m0[78u].z)) + _2965;
        _3044 = _3200 * _2966;
    }
    else
    {
        _3038 = _2963;
        _3040 = _2964;
        _3042 = _2965;
        _3044 = _2966;
    }
    float _3056 = roundEven(cbMatDynParam._m0[0u].y);
    bool _3057 = _3056 == 3.0;
    float _3058 = log2(_3044);
    float _3065 = exp2(_3058 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4823 : (isnan(_4823) ? 1.0 : min(_4823, 1.0))) * (_2908 + ((isnan(0.0) ? _1630 : (isnan(_1630) ? 0.0 : max(_1630, 0.0))) * _905))) + ((_2914 + ((isnan(0.0) ? _1920 : (isnan(_1920) ? 0.0 : max(_1920, 0.0))) * _1709)) * cbPerFrame._m0[3u].x));
    float _3066 = exp2(_3058 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4834 : (isnan(_4834) ? 1.0 : min(_4834, 1.0))) * (_2910 + ((isnan(0.0) ? _1633 : (isnan(_1633) ? 0.0 : max(_1633, 0.0))) * _905))) + ((_2916 + ((isnan(0.0) ? _1923 : (isnan(_1923) ? 0.0 : max(_1923, 0.0))) * _1709)) * cbPerFrame._m0[3u].x));
    float _3067 = exp2(_3058 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4845 : (isnan(_4845) ? 1.0 : min(_4845, 1.0))) * (_2912 + ((isnan(0.0) ? _1636 : (isnan(_1636) ? 0.0 : max(_1636, 0.0))) * _905))) + ((_2918 + ((isnan(0.0) ? _1926 : (isnan(_1926) ? 0.0 : max(_1926, 0.0))) * _1709)) * cbPerFrame._m0[3u].x));
    float _3076 = (_3056 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _3076 * (_3057 ? _3065 : (_3065 + (cbSceneParam._m0[72u].w * _3038)));
    SV_Target.y = _3076 * (_3057 ? _3066 : (_3066 + (cbSceneParam._m0[72u].w * _3040)));
    SV_Target.z = _3076 * (_3057 ? _3067 : (_3067 + (cbSceneParam._m0[72u].w * _3042)));
    SV_Target.w = cbInstanceData._m0[_2938].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2938].w;
}


