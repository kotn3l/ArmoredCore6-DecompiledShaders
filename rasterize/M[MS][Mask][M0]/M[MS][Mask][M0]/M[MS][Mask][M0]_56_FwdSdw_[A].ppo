#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_29;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_10;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_6;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1280;
float _3924;
float _3925;
float _3926;
float _3927;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _225 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _226 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _227 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _233 = inversesqrt(dot(vec3(_225, _226, _227), vec3(_225, _226, _227)));
    float _240 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _247 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _253 = uint(roundEven(NORMAL.w)) * 13u;
    uint _258 = _253 + 1u;
    uint _262 = _253 + 2u;
    float _271 = sqrt(((cbInstanceData._m0[_258].x * cbInstanceData._m0[_258].x) + (cbInstanceData._m0[_253].x * cbInstanceData._m0[_253].x)) + (cbInstanceData._m0[_262].x * cbInstanceData._m0[_262].x));
    float _272 = _271 * TEXCOORD.z;
    float _273 = _271 * TEXCOORD.w;
    vec4 _293 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _299 = _293.x * cbMtdParam._m0[11u].x;
    float _300 = _293.y * cbMtdParam._m0[11u].y;
    float _301 = _293.z * cbMtdParam._m0[11u].z;
    vec4 _320 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _272) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _273) + cbTextureTilingScale._m0[5u].w));
    vec4 _339 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _376 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _378 = _376.x;
    float _390 = dot(vec4(_378, _376.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _407 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _339.x) * 2.0) - ((((_378 - _390) * cbMtdParam._m0[24u].z) + _390) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3936 = isnan(0.0) ? _407 : (isnan(_407) ? 0.0 : max(_407, 0.0));
    float _408 = isnan(1.0) ? _3936 : (isnan(_3936) ? 1.0 : min(_3936, 1.0));
    float _415 = (_408 * ((_320.x * cbMtdParam._m0[12u].x) - _299)) + _299;
    float _416 = (_408 * ((_320.y * cbMtdParam._m0[12u].y) - _300)) + _300;
    float _417 = (_408 * ((_320.z * cbMtdParam._m0[12u].z) - _301)) + _301;
    vec4 _434 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _272) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _273) + cbTextureTilingScale._m0[3u].w));
    vec4 _454 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _456 = _454.x;
    float _466 = dot(vec4(_456, _454.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _480 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _339.y) * 2.0) - ((((_456 - _466) * cbMtdParam._m0[24u].z) + _466) * cbMtdParam._m0[20u].w))) + 1.0;
    float _3947 = isnan(0.0) ? _480 : (isnan(_480) ? 0.0 : max(_480, 0.0));
    float _481 = isnan(1.0) ? _3947 : (isnan(_3947) ? 1.0 : min(_3947, 1.0));
    float _488 = (_481 * ((_434.x * cbMtdParam._m0[13u].x) - _415)) + _415;
    float _489 = (_481 * ((_434.y * cbMtdParam._m0[13u].y) - _416)) + _416;
    float _490 = (_481 * ((_434.z * cbMtdParam._m0[13u].z) - _417)) + _417;
    vec4 _503 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _272) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _273) + cbTextureTilingScale._m0[4u].w));
    vec4 _520 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _522 = _520.x;
    float _523 = _520.y;
    float _524 = _520.z;
    float _531 = ((_503.x - _522) * _408) + _522;
    float _532 = ((_503.y - _523) * _408) + _523;
    float _533 = ((_503.z - _524) * _408) + _524;
    vec4 _545 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _272) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _273) + cbTextureTilingScale._m0[2u].w));
    float _558 = ((_545.z - _533) * _481) + _533;
    float _561 = ((((_545.x - _531) * _481) + _531) * 2.0) + (-1.0);
    float _563 = ((((_545.y - _532) * _481) + _532) * 2.0) + (-1.0);
    float _564 = dot(vec2(_561, _563), vec2(_561, _563));
    float _3958 = isnan(0.0) ? _564 : (isnan(_564) ? 0.0 : max(_564, 0.0));
    float _569 = sqrt(1.0 - (isnan(1.0) ? _3958 : (isnan(_3958) ? 1.0 : min(_3958, 1.0))));
    vec4 _583 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _595 = (((_583.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _561;
    float _596 = (((_583.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _563;
    vec4 _608 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _272) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _273) + cbTextureTilingScale._m0[19u].w));
    float _610 = _608.x;
    float _611 = 1.0 - _610;
    float _639 = (TEXCOORD_8.x - ((cbMtdParam._m0[22u].w * (1.0 - TEXCOORD_8.x)) * ((((_610 - _611) * cbMtdParam._m0[24u].y) + _611) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3969 = isnan(0.0) ? _639 : (isnan(_639) ? 0.0 : max(_639, 0.0));
    float _640 = isnan(1.0) ? _3969 : (isnan(_3969) ? 1.0 : min(_3969, 1.0));
    float _648 = ((((cbMtdParam._m0[10u].x - _488) * TEXCOORD_8.x) * cbMtdParam._m0[23u].w) * _640) + _488;
    float _649 = ((((cbMtdParam._m0[10u].y - _489) * TEXCOORD_8.y) * cbMtdParam._m0[23u].w) * _640) + _489;
    float _650 = (((cbMtdParam._m0[23u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _490)) * _640) + _490;
    float _654 = (cbMtdParam._m0[19u].w * (_583.z - _558)) + _558;
    float _658 = ((cbMtdParam._m0[23u].y - _654) * _640) + _654;
    vec4 _677 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _272) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _273) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _683 = (_677.x * 2.0) + (-1.0);
    float _684 = (_677.y * 2.0) + (-1.0);
    float _685 = dot(vec2(_683, _684), vec2(_683, _684));
    float _3980 = isnan(0.0) ? _685 : (isnan(_685) ? 0.0 : max(_685, 0.0));
    float _701 = (_640 * (((cbMtdParam._m0[22u].z * _595) - _595) + _683)) + _595;
    float _702 = (_640 * (((cbMtdParam._m0[22u].z * _596) - _596) + _684)) + _596;
    float _703 = (_640 * (sqrt(1.0 - (isnan(1.0) ? _3980 : (isnan(_3980) ? 1.0 : min(_3980, 1.0)))) - _569)) + _569;
    float _705 = cbMtdParam._m0[22u].x + _583.w;
    float _708 = fma(_703, _240 * NORMAL.x, fma(_702, _247 * TANGENT.x, (_233 * _225) * _701));
    float _711 = fma(_703, _240 * NORMAL.y, fma(_702, _247 * TANGENT.y, (_233 * _226) * _701));
    float _714 = fma(_703, _240 * NORMAL.z, fma(_702, _247 * TANGENT.z, (_233 * _227) * _701));
    float _718 = inversesqrt(dot(vec3(_708, _711, _714), vec3(_708, _711, _714)));
    float _719 = _718 * _708;
    float _720 = _718 * _711;
    float _721 = _718 * _714;
    float _3991 = isnan(0.0) ? _658 : (isnan(_658) ? 0.0 : max(_658, 0.0));
    float _722 = isnan(1.0) ? _3991 : (isnan(_3991) ? 1.0 : min(_3991, 1.0));
    float _4002 = isnan(0.0) ? _705 : (isnan(_705) ? 0.0 : max(_705, 0.0));
    float _4013 = isnan(0.0) ? _648 : (isnan(_648) ? 0.0 : max(_648, 0.0));
    float _4024 = isnan(0.0) ? _649 : (isnan(_649) ? 0.0 : max(_649, 0.0));
    float _4035 = isnan(0.0) ? _650 : (isnan(_650) ? 0.0 : max(_650, 0.0));
    float _740 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _781 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _791 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _781);
    float _792 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _781);
    float _793 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _781);
    float _797 = inversesqrt(dot(vec3(_791, _792, _793), vec3(_791, _792, _793)));
    float _798 = _791 * _797;
    float _799 = _792 * _797;
    float _800 = _793 * _797;
    vec4 _805 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _807 = _805.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _961 = sqrt(((_791 * _791) + (_792 * _792)) + (_793 * _793));
        float _967 = (cbMatDynParam._m0[5u].x * _961) + cbMatDynParam._m0[5u].y;
        float _4046 = isnan(0.0) ? _967 : (isnan(_967) ? 0.0 : max(_967, 0.0));
        float _968 = isnan(1.0) ? _4046 : (isnan(_4046) ? 1.0 : min(_4046, 1.0));
        float _972 = (cbMatDynParam._m0[5u].z * _961) + cbMatDynParam._m0[5u].w;
        float _4057 = isnan(0.0) ? _972 : (isnan(_972) ? 0.0 : max(_972, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4057 : (isnan(_4057) ? 1.0 : min(_4057, 1.0))) - _968)) + _968) < ((_807 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _818 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _819 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _837 = fma(_721, cbSceneParam._m0[5u].z, fma(_720, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _719));
    float _840 = fma(_721, cbSceneParam._m0[6u].z, fma(_720, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _719));
    float _843 = fma(_721, cbSceneParam._m0[7u].z, fma(_720, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _719));
    uint _856 = _253 + 9u;
    uint _857 = _856 + uint(cbMatDynParam._m0[0u].w);
    float _863 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4013 : (isnan(_4013) ? 1.0 : min(_4013, 1.0)))) * cbInstanceData._m0[_857].x;
    float _864 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4024 : (isnan(_4024) ? 1.0 : min(_4024, 1.0)))) * cbInstanceData._m0[_857].y;
    float _865 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4035 : (isnan(_4035) ? 1.0 : min(_4035, 1.0)))) * cbInstanceData._m0[_857].z;
    float _4068 = isnan(0.0) ? _863 : (isnan(_863) ? 0.0 : max(_863, 0.0));
    float _866 = isnan(1.0) ? _4068 : (isnan(_4068) ? 1.0 : min(_4068, 1.0));
    float _4079 = isnan(0.0) ? _864 : (isnan(_864) ? 0.0 : max(_864, 0.0));
    float _867 = isnan(1.0) ? _4079 : (isnan(_4079) ? 1.0 : min(_4079, 1.0));
    float _4090 = isnan(0.0) ? _865 : (isnan(_865) ? 0.0 : max(_865, 0.0));
    float _868 = isnan(1.0) ? _4090 : (isnan(_4090) ? 1.0 : min(_4090, 1.0));
    vec4 _877 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _818, cbSceneParam._m0[86u].y * _819));
    float _881 = ((isnan(1.0) ? _4002 : (isnan(_4002) ? 1.0 : min(_4002, 1.0))) * TEXCOORD_5.w) * _877.x;
    float _882 = dot(vec3(_719, _720, _721), vec3(_798, _799, _800));
    float _885 = _882 * 2.0;
    float _889 = (_885 * _719) - _798;
    float _890 = (_885 * _720) - _799;
    float _891 = (_885 * _721) - _800;
    float _895 = abs(dot(vec3(_798, _799, _800), vec3(_719, _720, _721)));
    float _4101 = isnan(0.0) ? _895 : (isnan(_895) ? 0.0 : max(_895, 0.0));
    float _897 = sqrt(_722);
    float _910 = exp2((_897 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4101 : (isnan(_4101) ? 1.0 : min(_4101, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_897 * 3.0));
    float _942 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _946 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _950 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1279;
    float _1281;
    float _1282;
    float _1283;
    float _1284;
    float _1285;
    float _1286;
    float _1287;
    float _1288;
    float _1289;
    float _1290;
    float _1291;
    float _1292;
    float _1293;
    float _1294;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1004 = fma(_950, cbModelParam._m0[26u].z, fma(_946, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _942));
        float _1008 = fma(_950, cbModelParam._m0[27u].z, fma(_946, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _942));
        float _1012 = fma(_950, cbModelParam._m0[28u].z, fma(_946, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _942));
        float _1037 = _942 + _719;
        float _1038 = _946 + _720;
        float _1039 = _950 + _721;
        float _1049 = fma(_1039, cbModelParam._m0[26u].z, fma(_1038, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1037)) - _1004;
        float _1050 = fma(_1039, cbModelParam._m0[27u].z, fma(_1038, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1037)) - _1008;
        float _1051 = fma(_1039, cbModelParam._m0[28u].z, fma(_1038, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1037)) - _1012;
        float _1055 = inversesqrt(dot(vec3(_1049, _1050, _1051), vec3(_1049, _1050, _1051)));
        float _1068 = ((_1055 * _1049) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1004 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1069 = ((_1055 * _1050) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1008 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1070 = ((_1055 * _1051) / cbModelParam._m0[34u].z) + ((((((_1012 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1073 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1068, _1069, _1070), 0.0);
        vec4 _1080 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1068, _1069, _1070), 0.0);
        vec4 _1087 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1068, _1069, _1070), 0.0);
        vec4 _1094 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1068, _1069, _1070), 0.0);
        float _1107 = exp2((_1073.w + (-0.5)) * 20.0) * 2.0;
        float _1108 = _1107 * (_1073.x + (-0.5));
        float _1109 = _1107 * (_1073.y + (-0.5));
        float _1110 = _1107 * (_1073.z + (-0.5));
        float _1117 = exp2((_1080.w + (-0.5)) * 20.0) * 2.0;
        float _1118 = _1117 * (_1080.x + (-0.5));
        float _1119 = _1117 * (_1080.y + (-0.5));
        float _1120 = _1117 * (_1080.z + (-0.5));
        float _1127 = exp2((_1087.w + (-0.5)) * 20.0) * 2.0;
        float _1128 = _1127 * (_1087.x + (-0.5));
        float _1129 = _1127 * (_1087.y + (-0.5));
        float _1130 = _1127 * (_1087.z + (-0.5));
        float _1137 = exp2((_1094.w + (-0.5)) * 20.0) * 2.0;
        float _1138 = _1137 * (_1094.x + (-0.5));
        float _1139 = _1137 * (_1094.y + (-0.5));
        float _1140 = _1137 * (_1094.z + (-0.5));
        float _1141 = isnan(0.0) ? _1138 : (isnan(_1138) ? 0.0 : max(_1138, 0.0));
        float _1142 = isnan(0.0) ? _1139 : (isnan(_1139) ? 0.0 : max(_1139, 0.0));
        float _1143 = isnan(0.0) ? _1140 : (isnan(_1140) ? 0.0 : max(_1140, 0.0));
        float _1144 = _1108 * 0.5;
        float _1145 = _1118 * 0.5;
        float _1146 = _1128 * 0.5;
        float _1147 = dot(vec3(_1144, _1145, _1146), vec3(_1144, _1145, _1146));
        float _1152 = (_1147 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1147);
        float _1161 = (dot(vec3(_719, _720, _721), vec3(_1152 * _1144, _1152 * _1145, _1152 * _1146)) + 1.0) * 0.5;
        float _4127 = isnan(0.0) ? _1161 : (isnan(_1161) ? 0.0 : max(_1161, 0.0));
        float _1171 = sqrt(((_1145 * _1145) + (_1144 * _1144)) + (_1146 * _1146)) / (_1141 + 9.9999997473787516355514526367188e-06);
        float _4138 = isnan(0.0) ? _1171 : (isnan(_1171) ? 0.0 : max(_1171, 0.0));
        float _1172 = isnan(1.0) ? _4138 : (isnan(_4138) ? 1.0 : min(_4138, 1.0));
        float _1173 = _1172 * 2.0;
        float _1177 = (1.0 - _1172) / (_1172 + 1.0);
        float _4149 = isnan(0.0) ? _1177 : (isnan(_1177) ? 0.0 : max(_1177, 0.0));
        float _1178 = isnan(1.0) ? _4149 : (isnan(_4149) ? 1.0 : min(_4149, 1.0));
        float _1187 = ((((1.0 - _1178) * (_1173 + 2.0)) * exp2(log2(isnan(1.0) ? _4127 : (isnan(_4127) ? 1.0 : min(_4127, 1.0))) * (_1173 + 1.0))) + _1178) * _1141;
        float _1188 = _1109 * 0.5;
        float _1189 = _1119 * 0.5;
        float _1190 = _1129 * 0.5;
        float _1191 = dot(vec3(_1188, _1189, _1190), vec3(_1188, _1189, _1190));
        float _1196 = (_1191 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1191);
        float _1204 = (dot(vec3(_719, _720, _721), vec3(_1196 * _1188, _1196 * _1189, _1196 * _1190)) + 1.0) * 0.5;
        float _4160 = isnan(0.0) ? _1204 : (isnan(_1204) ? 0.0 : max(_1204, 0.0));
        float _1213 = sqrt(((_1189 * _1189) + (_1188 * _1188)) + (_1190 * _1190)) / (_1142 + 9.9999997473787516355514526367188e-06);
        float _4171 = isnan(0.0) ? _1213 : (isnan(_1213) ? 0.0 : max(_1213, 0.0));
        float _1214 = isnan(1.0) ? _4171 : (isnan(_4171) ? 1.0 : min(_4171, 1.0));
        float _1215 = _1214 * 2.0;
        float _1219 = (1.0 - _1214) / (_1214 + 1.0);
        float _4182 = isnan(0.0) ? _1219 : (isnan(_1219) ? 0.0 : max(_1219, 0.0));
        float _1220 = isnan(1.0) ? _4182 : (isnan(_4182) ? 1.0 : min(_4182, 1.0));
        float _1229 = ((((1.0 - _1220) * (_1215 + 2.0)) * exp2(log2(isnan(1.0) ? _4160 : (isnan(_4160) ? 1.0 : min(_4160, 1.0))) * (_1215 + 1.0))) + _1220) * _1142;
        float _1230 = _1110 * 0.5;
        float _1231 = _1120 * 0.5;
        float _1232 = _1130 * 0.5;
        float _1233 = dot(vec3(_1230, _1231, _1232), vec3(_1230, _1231, _1232));
        float _1238 = (_1233 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1233);
        float _1246 = (dot(vec3(_719, _720, _721), vec3(_1238 * _1230, _1238 * _1231, _1238 * _1232)) + 1.0) * 0.5;
        float _4193 = isnan(0.0) ? _1246 : (isnan(_1246) ? 0.0 : max(_1246, 0.0));
        float _1255 = sqrt(((_1231 * _1231) + (_1230 * _1230)) + (_1232 * _1232)) / (_1143 + 9.9999997473787516355514526367188e-06);
        float _4204 = isnan(0.0) ? _1255 : (isnan(_1255) ? 0.0 : max(_1255, 0.0));
        float _1256 = isnan(1.0) ? _4204 : (isnan(_4204) ? 1.0 : min(_4204, 1.0));
        float _1257 = _1256 * 2.0;
        float _1261 = (1.0 - _1256) / (_1256 + 1.0);
        float _4215 = isnan(0.0) ? _1261 : (isnan(_1261) ? 0.0 : max(_1261, 0.0));
        float _1262 = isnan(1.0) ? _4215 : (isnan(_4215) ? 1.0 : min(_4215, 1.0));
        float _1271 = ((((1.0 - _1262) * (_1257 + 2.0)) * exp2(log2(isnan(1.0) ? _4193 : (isnan(_4193) ? 1.0 : min(_4193, 1.0))) * (_1257 + 1.0))) + _1262) * _1143;
        _1279 = _1110;
        _1281 = _1109;
        _1282 = _1108;
        _1283 = _1120;
        _1284 = _1119;
        _1285 = _1118;
        _1286 = _1130;
        _1287 = _1129;
        _1288 = _1128;
        _1289 = _1143;
        _1290 = _1142;
        _1291 = _1141;
        _1292 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1187 : (isnan(_1187) ? 0.0 : max(_1187, 0.0)));
        _1293 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1229 : (isnan(_1229) ? 0.0 : max(_1229, 0.0)));
        _1294 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1271 : (isnan(_1271) ? 0.0 : max(_1271, 0.0)));
    }
    else
    {
        _1279 = _1280;
        _1281 = _1280;
        _1282 = _1280;
        _1283 = _1280;
        _1284 = _1280;
        _1285 = _1280;
        _1286 = _1280;
        _1287 = _1280;
        _1288 = _1280;
        _1289 = _1280;
        _1290 = _1280;
        _1291 = _1280;
        _1292 = 0.0;
        _1293 = 0.0;
        _1294 = 0.0;
    }
    float _1590;
    float _1591;
    float _1592;
    float _1593;
    float _1594;
    float _1595;
    float _1596;
    float _1597;
    float _1598;
    float _1599;
    float _1600;
    float _1601;
    float _1602;
    float _1603;
    float _1604;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1321 = fma(_950, cbModelParam._m0[30u].z, fma(_946, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _942));
        float _1325 = fma(_950, cbModelParam._m0[31u].z, fma(_946, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _942));
        float _1329 = fma(_950, cbModelParam._m0[32u].z, fma(_946, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _942));
        float _1352 = _942 + _719;
        float _1353 = _946 + _720;
        float _1354 = _950 + _721;
        float _1364 = fma(_1354, cbModelParam._m0[30u].z, fma(_1353, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1352)) - _1321;
        float _1365 = fma(_1354, cbModelParam._m0[31u].z, fma(_1353, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1352)) - _1325;
        float _1366 = fma(_1354, cbModelParam._m0[32u].z, fma(_1353, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1352)) - _1329;
        float _1370 = inversesqrt(dot(vec3(_1364, _1365, _1366), vec3(_1364, _1365, _1366)));
        float _1383 = ((_1370 * _1364) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1321 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1384 = ((_1370 * _1365) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1325 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1385 = ((_1370 * _1366) / cbModelParam._m0[35u].z) + ((((((_1329 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1387 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1383, _1384, _1385), 0.0);
        vec4 _1394 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1383, _1384, _1385), 0.0);
        vec4 _1401 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1383, _1384, _1385), 0.0);
        vec4 _1408 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1383, _1384, _1385), 0.0);
        float _1420 = exp2((_1387.w + (-0.5)) * 20.0) * 2.0;
        float _1421 = _1420 * (_1387.x + (-0.5));
        float _1422 = _1420 * (_1387.y + (-0.5));
        float _1423 = _1420 * (_1387.z + (-0.5));
        float _1430 = exp2((_1394.w + (-0.5)) * 20.0) * 2.0;
        float _1431 = _1430 * (_1394.x + (-0.5));
        float _1432 = _1430 * (_1394.y + (-0.5));
        float _1433 = _1430 * (_1394.z + (-0.5));
        float _1440 = exp2((_1401.w + (-0.5)) * 20.0) * 2.0;
        float _1441 = _1440 * (_1401.x + (-0.5));
        float _1442 = _1440 * (_1401.y + (-0.5));
        float _1443 = _1440 * (_1401.z + (-0.5));
        float _1450 = exp2((_1408.w + (-0.5)) * 20.0) * 2.0;
        float _1451 = _1450 * (_1408.x + (-0.5));
        float _1452 = _1450 * (_1408.y + (-0.5));
        float _1453 = _1450 * (_1408.z + (-0.5));
        float _1454 = isnan(0.0) ? _1451 : (isnan(_1451) ? 0.0 : max(_1451, 0.0));
        float _1455 = isnan(0.0) ? _1452 : (isnan(_1452) ? 0.0 : max(_1452, 0.0));
        float _1456 = isnan(0.0) ? _1453 : (isnan(_1453) ? 0.0 : max(_1453, 0.0));
        float _1457 = _1421 * 0.5;
        float _1458 = _1431 * 0.5;
        float _1459 = _1441 * 0.5;
        float _1460 = dot(vec3(_1457, _1458, _1459), vec3(_1457, _1458, _1459));
        float _1465 = (_1460 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1460);
        float _1473 = (dot(vec3(_719, _720, _721), vec3(_1465 * _1457, _1465 * _1458, _1465 * _1459)) + 1.0) * 0.5;
        float _4256 = isnan(0.0) ? _1473 : (isnan(_1473) ? 0.0 : max(_1473, 0.0));
        float _1482 = sqrt(((_1458 * _1458) + (_1457 * _1457)) + (_1459 * _1459)) / (_1454 + 9.9999997473787516355514526367188e-06);
        float _4267 = isnan(0.0) ? _1482 : (isnan(_1482) ? 0.0 : max(_1482, 0.0));
        float _1483 = isnan(1.0) ? _4267 : (isnan(_4267) ? 1.0 : min(_4267, 1.0));
        float _1484 = _1483 * 2.0;
        float _1488 = (1.0 - _1483) / (_1483 + 1.0);
        float _4278 = isnan(0.0) ? _1488 : (isnan(_1488) ? 0.0 : max(_1488, 0.0));
        float _1489 = isnan(1.0) ? _4278 : (isnan(_4278) ? 1.0 : min(_4278, 1.0));
        float _1498 = ((((1.0 - _1489) * (_1484 + 2.0)) * exp2(log2(isnan(1.0) ? _4256 : (isnan(_4256) ? 1.0 : min(_4256, 1.0))) * (_1484 + 1.0))) + _1489) * _1454;
        float _1499 = _1422 * 0.5;
        float _1500 = _1432 * 0.5;
        float _1501 = _1442 * 0.5;
        float _1502 = dot(vec3(_1499, _1500, _1501), vec3(_1499, _1500, _1501));
        float _1507 = (_1502 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1502);
        float _1515 = (dot(vec3(_719, _720, _721), vec3(_1507 * _1499, _1507 * _1500, _1507 * _1501)) + 1.0) * 0.5;
        float _4289 = isnan(0.0) ? _1515 : (isnan(_1515) ? 0.0 : max(_1515, 0.0));
        float _1524 = sqrt(((_1500 * _1500) + (_1499 * _1499)) + (_1501 * _1501)) / (_1455 + 9.9999997473787516355514526367188e-06);
        float _4300 = isnan(0.0) ? _1524 : (isnan(_1524) ? 0.0 : max(_1524, 0.0));
        float _1525 = isnan(1.0) ? _4300 : (isnan(_4300) ? 1.0 : min(_4300, 1.0));
        float _1526 = _1525 * 2.0;
        float _1530 = (1.0 - _1525) / (_1525 + 1.0);
        float _4311 = isnan(0.0) ? _1530 : (isnan(_1530) ? 0.0 : max(_1530, 0.0));
        float _1531 = isnan(1.0) ? _4311 : (isnan(_4311) ? 1.0 : min(_4311, 1.0));
        float _1540 = ((((1.0 - _1531) * (_1526 + 2.0)) * exp2(log2(isnan(1.0) ? _4289 : (isnan(_4289) ? 1.0 : min(_4289, 1.0))) * (_1526 + 1.0))) + _1531) * _1455;
        float _1541 = _1423 * 0.5;
        float _1542 = _1433 * 0.5;
        float _1543 = _1443 * 0.5;
        float _1544 = dot(vec3(_1541, _1542, _1543), vec3(_1541, _1542, _1543));
        float _1549 = (_1544 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1544);
        float _1557 = (dot(vec3(_719, _720, _721), vec3(_1549 * _1541, _1549 * _1542, _1549 * _1543)) + 1.0) * 0.5;
        float _4322 = isnan(0.0) ? _1557 : (isnan(_1557) ? 0.0 : max(_1557, 0.0));
        float _1566 = sqrt(((_1542 * _1542) + (_1541 * _1541)) + (_1543 * _1543)) / (_1456 + 9.9999997473787516355514526367188e-06);
        float _4333 = isnan(0.0) ? _1566 : (isnan(_1566) ? 0.0 : max(_1566, 0.0));
        float _1567 = isnan(1.0) ? _4333 : (isnan(_4333) ? 1.0 : min(_4333, 1.0));
        float _1568 = _1567 * 2.0;
        float _1572 = (1.0 - _1567) / (_1567 + 1.0);
        float _4344 = isnan(0.0) ? _1572 : (isnan(_1572) ? 0.0 : max(_1572, 0.0));
        float _1573 = isnan(1.0) ? _4344 : (isnan(_4344) ? 1.0 : min(_4344, 1.0));
        float _1582 = ((((1.0 - _1573) * (_1568 + 2.0)) * exp2(log2(isnan(1.0) ? _4322 : (isnan(_4322) ? 1.0 : min(_4322, 1.0))) * (_1568 + 1.0))) + _1573) * _1456;
        _1590 = _1423;
        _1591 = _1422;
        _1592 = _1421;
        _1593 = _1433;
        _1594 = _1432;
        _1595 = _1431;
        _1596 = _1443;
        _1597 = _1442;
        _1598 = _1441;
        _1599 = _1456;
        _1600 = _1455;
        _1601 = _1454;
        _1602 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1498 : (isnan(_1498) ? 0.0 : max(_1498, 0.0)));
        _1603 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1540 : (isnan(_1540) ? 0.0 : max(_1540, 0.0)));
        _1604 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1582 : (isnan(_1582) ? 0.0 : max(_1582, 0.0)));
    }
    else
    {
        _1590 = _1280;
        _1591 = _1280;
        _1592 = _1280;
        _1593 = _1280;
        _1594 = _1280;
        _1595 = _1280;
        _1596 = _1280;
        _1597 = _1280;
        _1598 = _1280;
        _1599 = _1280;
        _1600 = _1280;
        _1601 = _1280;
        _1602 = 0.0;
        _1603 = 0.0;
        _1604 = 0.0;
    }
    float _1614 = (cbModelParam._m0[1u].x * (_1602 - _1292)) + _1292;
    float _1615 = (cbModelParam._m0[1u].x * (_1603 - _1293)) + _1293;
    float _1616 = (cbModelParam._m0[1u].x * (_1604 - _1294)) + _1294;
    float _1637 = fma(_1616, cbSceneParam._m0[89u].z, fma(_1615, cbSceneParam._m0[89u].y, _1614 * cbSceneParam._m0[89u].x));
    float _1640 = fma(_1616, cbSceneParam._m0[90u].z, fma(_1615, cbSceneParam._m0[90u].y, _1614 * cbSceneParam._m0[90u].x));
    float _1643 = fma(_1616, cbSceneParam._m0[91u].z, fma(_1615, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1614));
    float _1658 = _889 * 0.5;
    float _1659 = _890 * 0.5;
    float _1660 = _891 * 0.5;
    float _1661 = dot(vec4(_1658, _1659, _1660, 1.0), vec4(_1592, _1595, _1598, _1601));
    float _1664 = dot(vec4(_1658, _1659, _1660, 1.0), vec4(_1591, _1594, _1597, _1600));
    float _1667 = dot(vec4(_1658, _1659, _1660, 1.0), vec4(_1590, _1593, _1596, _1599));
    float _1701;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1674 = dot(vec4(_1658, _1659, _1660, 1.0), vec4(_1279, _1283, _1286, _1289));
        float _1678 = dot(vec4(_1658, _1659, _1660, 1.0), vec4(_1281, _1284, _1287, _1290));
        float _1682 = dot(vec4(_1658, _1659, _1660, 1.0), vec4(_1282, _1285, _1288, _1291));
        float _1689 = dot(vec4(cbModelParam._m0[39u]), vec4(_1658, _1659, _1660, 1.0));
        _1701 = dot(vec3(isnan(0.0) ? _1682 : (isnan(_1682) ? 0.0 : max(_1682, 0.0)), isnan(0.0) ? _1678 : (isnan(_1678) ? 0.0 : max(_1678, 0.0)), isnan(0.0) ? _1674 : (isnan(_1674) ? 0.0 : max(_1674, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1689) ? 0.0 : (isnan(0.0) ? _1689 : max(0.0, _1689))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1701 = 1.0;
    }
    float _1712;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1703 = dot(vec4(cbModelParam._m0[40u]), vec4(_1658, _1659, _1660, 1.0));
        _1712 = dot(vec3(isnan(0.0) ? _1661 : (isnan(_1661) ? 0.0 : max(_1661, 0.0)), isnan(0.0) ? _1664 : (isnan(_1664) ? 0.0 : max(_1664, 0.0)), isnan(0.0) ? _1667 : (isnan(_1667) ? 0.0 : max(_1667, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1703) ? 0.0 : (isnan(0.0) ? _1703 : max(0.0, _1703))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1712 = 1.0;
    }
    float _1716 = (_1712 * cbModelParam._m0[1u].x) + (_1701 * (1.0 - cbModelParam._m0[1u].x));
    float _1726 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _722);
    float _1727 = isnan(_1726) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1726 : min(cbModelParam._m0[25u].z, _1726));
    float _1809;
    float _1811;
    float _1813;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1776 = fma(_950, cbModelParam._m0[13u].z, fma(_946, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _942)) + cbModelParam._m0[13u].w;
        float _1780 = fma(_950, cbModelParam._m0[14u].z, fma(_946, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _942)) + cbModelParam._m0[14u].w;
        float _1784 = fma(_950, cbModelParam._m0[15u].z, fma(_946, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _942)) + cbModelParam._m0[15u].w;
        float _1787 = fma(_891, cbModelParam._m0[13u].z, fma(_890, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _889));
        float _1790 = fma(_891, cbModelParam._m0[14u].z, fma(_890, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _889));
        float _1793 = fma(_891, cbModelParam._m0[15u].z, fma(_890, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _889));
        float _1821;
        if (_1787 > 0.0)
        {
            _1821 = abs((1.0 - _1776) / _1787);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1787 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1776 + 1.0) / _1787);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1821 = frontier_phi_17_15_ladder;
        }
        float _1992;
        if (_1790 > 0.0)
        {
            _1992 = abs((1.0 - _1780) / _1790);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1790 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1780 + 1.0) / _1790);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1992 = frontier_phi_26_22_ladder;
        }
        float _2287;
        if (_1793 > 0.0)
        {
            _2287 = abs((1.0 - _1784) / _1793);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1793 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1784 + 1.0) / _1793);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2287 = frontier_phi_38_33_ladder;
        }
        float _2289 = isnan(_1992) ? _1821 : (isnan(_1821) ? _1992 : min(_1821, _1992));
        float _2290 = isnan(_2287) ? _2289 : (isnan(_2289) ? _2287 : min(_2289, _2287));
        float _2294 = (_2290 * _1787) + _1776;
        float _2295 = (_2290 * _1790) + _1780;
        float _2296 = (_2290 * _1793) + _1784;
        float _2297 = _2290 * 9.9999997473787516355514526367188e-05;
        float _2299 = (-1.0) - _2297;
        float _2301 = _2297 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2296 > _2301) || ((_2296 < _2299) || ((_2295 > _2301) || ((_2295 < _2299) || ((_2294 < _2299) || (_2294 > _2301))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2441 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2296, cbModelParam._m0[9u].z, fma(_2295, cbModelParam._m0[9u].y, _2294 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2296, cbModelParam._m0[10u].z, fma(_2295, cbModelParam._m0[10u].y, _2294 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2296, cbModelParam._m0[11u].z, fma(_2295, cbModelParam._m0[11u].y, _2294 * cbModelParam._m0[11u].x))), _1727);
            frontier_phi_16_38_ladder = _2441.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2441.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2441.x * cbModelParam._m0[1u].y;
        }
        _1809 = frontier_phi_16_38_ladder_2;
        _1811 = frontier_phi_16_38_ladder_1;
        _1813 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1797 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_889, _890, _891), _1727);
        _1809 = _1797.x * cbModelParam._m0[1u].y;
        _1811 = _1797.y * cbModelParam._m0[1u].y;
        _1813 = _1797.z * cbModelParam._m0[1u].y;
    }
    float _1817 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _722);
    float _1818 = isnan(_1817) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1817 : min(cbModelParam._m0[25u].w, _1817));
    float _1909;
    float _1911;
    float _1913;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1873 = fma(_950, cbModelParam._m0[21u].z, fma(_946, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _942)) + cbModelParam._m0[21u].w;
        float _1877 = fma(_950, cbModelParam._m0[22u].z, fma(_946, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _942)) + cbModelParam._m0[22u].w;
        float _1881 = fma(_950, cbModelParam._m0[23u].z, fma(_946, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _942)) + cbModelParam._m0[23u].w;
        float _1884 = fma(_891, cbModelParam._m0[21u].z, fma(_890, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _889));
        float _1887 = fma(_891, cbModelParam._m0[22u].z, fma(_890, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _889));
        float _1890 = fma(_891, cbModelParam._m0[23u].z, fma(_890, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _889));
        float _1997;
        if (_1884 > 0.0)
        {
            _1997 = abs((1.0 - _1873) / _1884);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1884 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1873 + 1.0) / _1884);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1997 = frontier_phi_28_24_ladder;
        }
        float _2314;
        if (_1887 > 0.0)
        {
            _2314 = abs((1.0 - _1877) / _1887);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1887 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1877 + 1.0) / _1887);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2314 = frontier_phi_40_35_ladder;
        }
        float _2641;
        if (_1890 > 0.0)
        {
            _2641 = abs((1.0 - _1881) / _1890);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_1890 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_1881 + 1.0) / _1890);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _2641 = frontier_phi_50_47_ladder;
        }
        float _2643 = isnan(_2314) ? _1997 : (isnan(_1997) ? _2314 : min(_1997, _2314));
        float _2644 = isnan(_2641) ? _2643 : (isnan(_2643) ? _2641 : min(_2643, _2641));
        float _2648 = (_2644 * _1884) + _1873;
        float _2649 = (_2644 * _1887) + _1877;
        float _2650 = (_2644 * _1890) + _1881;
        float _2651 = _2644 * 9.9999997473787516355514526367188e-05;
        float _2652 = (-1.0) - _2651;
        float _2654 = _2651 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_2650 > _2654) || ((_2650 < _2652) || ((_2649 > _2654) || ((_2649 < _2652) || ((_2648 < _2652) || (_2648 > _2654))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2768 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2650, cbModelParam._m0[17u].z, fma(_2649, cbModelParam._m0[17u].y, _2648 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2650, cbModelParam._m0[18u].z, fma(_2649, cbModelParam._m0[18u].y, _2648 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2650, cbModelParam._m0[19u].z, fma(_2649, cbModelParam._m0[19u].y, _2648 * cbModelParam._m0[19u].x))), _1818);
            frontier_phi_25_50_ladder = _2768.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _2768.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _2768.x * cbModelParam._m0[1u].z;
        }
        _1909 = frontier_phi_25_50_ladder_2;
        _1911 = frontier_phi_25_50_ladder_1;
        _1913 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _1893 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_889, _890, _891), _1818);
        _1909 = _1893.x * cbModelParam._m0[1u].z;
        _1911 = _1893.y * cbModelParam._m0[1u].z;
        _1913 = _1893.z * cbModelParam._m0[1u].z;
    }
    float _1925 = ((((1.0 - _910) * ((_897 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_910 * _897)) * _881;
    float _1926 = _1925 * ((cbModelParam._m0[1u].w * (_1909 - _1809)) + _1809);
    float _1927 = _1925 * ((cbModelParam._m0[1u].w * (_1911 - _1811)) + _1811);
    float _1928 = _1925 * ((cbModelParam._m0[1u].w * (_1913 - _1813)) + _1813);
    float _1931 = fma(_1928, cbSceneParam._m0[89u].z, fma(_1927, cbSceneParam._m0[89u].y, _1926 * cbSceneParam._m0[89u].x));
    float _1934 = fma(_1928, cbSceneParam._m0[90u].z, fma(_1927, cbSceneParam._m0[90u].y, _1926 * cbSceneParam._m0[90u].x));
    float _1937 = fma(_1928, cbSceneParam._m0[91u].z, fma(_1927, cbSceneParam._m0[91u].y, _1926 * cbSceneParam._m0[91u].x));
    float _1971 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1975 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1979 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1983 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1984 = _1971 / _1983;
    float _1985 = _1975 / _1983;
    float _1986 = _1979 / _1983;
    float _2133;
    float _2134;
    float _2135;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2013 = ((uint(_1986 > cbSceneParam._m0[59u].y) + uint(_1986 > cbSceneParam._m0[59u].x)) + uint(_1986 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2014 = _2013 + 43u;
        uint _2022 = _2013 + 44u;
        uint _2030 = _2013 + 45u;
        uint _2038 = _2013 + 46u;
        float _2049 = fma(_1983, cbSceneParam._m0[_2014].w, fma(_1979, cbSceneParam._m0[_2014].z, fma(_1975, cbSceneParam._m0[_2014].y, _1971 * cbSceneParam._m0[_2014].x)));
        float _2053 = fma(_1983, cbSceneParam._m0[_2022].w, fma(_1979, cbSceneParam._m0[_2022].z, fma(_1975, cbSceneParam._m0[_2022].y, _1971 * cbSceneParam._m0[_2022].x)));
        float _2061 = fma(_1983, cbSceneParam._m0[_2038].w, fma(_1979, cbSceneParam._m0[_2038].z, fma(_1975, cbSceneParam._m0[_2038].y, _1971 * cbSceneParam._m0[_2038].x)));
        float _2066 = cbSceneParam._m0[33u].z * _2061;
        float _2068 = cbSceneParam._m0[33u].w * _2061;
        float _2071 = fma(_1983, cbSceneParam._m0[_2030].w, fma(_1979, cbSceneParam._m0[_2030].z, fma(_1975, cbSceneParam._m0[_2030].y, _1971 * cbSceneParam._m0[_2030].x))) / _2061;
        float _2119 = (cbSceneParam._m0[33u].x - sqrt(((_1985 * _1985) + (_1984 * _1984)) + (_1986 * _1986))) * cbSceneParam._m0[33u].y;
        float _4470 = isnan(0.0) ? _2119 : (isnan(_2119) ? 0.0 : max(_2119, 0.0));
        float _2126 = (isnan(1.0) ? _4470 : (isnan(_4470) ? 1.0 : min(_4470, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2066 + _2049) / _2061, (_2068 + _2053) / _2061), _2071), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2068 + _2049) / _2061, (_2053 - _2066) / _2061), _2071), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2049 - _2066) / _2061, (_2053 - _2068) / _2061), _2071), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2049 - _2068) / _2061, (_2066 + _2053) / _2061), _2071), 0.0)).x), vec4(0.25)));
        _2133 = 1.0 - (_2126 * cbSceneParam._m0[34u].x);
        _2134 = 1.0 - (_2126 * cbSceneParam._m0[34u].y);
        _2135 = 1.0 - (_2126 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2133 = 1.0;
        _2134 = 1.0;
        _2135 = 1.0;
    }
    float _2199;
    float _2201;
    float _2203;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2187 = fma(_1983, cbSceneParam._m0[63u].w, fma(_1979, cbSceneParam._m0[63u].z, fma(_1975, cbSceneParam._m0[63u].y, _1971 * cbSceneParam._m0[63u].x)));
        float _2188 = fma(_1983, cbSceneParam._m0[60u].w, fma(_1979, cbSceneParam._m0[60u].z, fma(_1975, cbSceneParam._m0[60u].y, _1971 * cbSceneParam._m0[60u].x))) / _2187;
        float _2189 = fma(_1983, cbSceneParam._m0[61u].w, fma(_1979, cbSceneParam._m0[61u].z, fma(_1975, cbSceneParam._m0[61u].y, _1971 * cbSceneParam._m0[61u].x))) / _2187;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_2188 >= cbSceneParam._m0[64u].x) && (_2189 >= cbSceneParam._m0[64u].y)) && (_2188 <= cbSceneParam._m0[64u].z)) && (_2189 <= cbSceneParam._m0[64u].w))
        {
            float _2327 = fma(_1983, cbSceneParam._m0[62u].w, fma(_1979, cbSceneParam._m0[62u].z, fma(_1975, cbSceneParam._m0[62u].y, _1971 * cbSceneParam._m0[62u].x))) / _2187;
            float _2331 = isnan(cbSceneParam._m0[41u].w) ? _2327 : (isnan(_2327) ? cbSceneParam._m0[41u].w : max(_2327, cbSceneParam._m0[41u].w));
            float _2374 = (cbSceneParam._m0[33u].x - sqrt(((_1985 * _1985) + (_1984 * _1984)) + (_1986 * _1986))) * cbSceneParam._m0[33u].y;
            float _4486 = isnan(0.0) ? _2374 : (isnan(_2374) ? 0.0 : max(_2374, 0.0));
            float _2381 = (isnan(1.0) ? _4486 : (isnan(_4486) ? 1.0 : min(_4486, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2188, cbSceneParam._m0[33u].w + _2189), _2331), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2188, _2189 - cbSceneParam._m0[33u].z), _2331), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2188 - cbSceneParam._m0[33u].z, _2189 - cbSceneParam._m0[33u].w), _2331), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2188 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2189), _2331), 0.0)).x), vec4(0.25)));
            float _2385 = 1.0 - (_2381 * cbSceneParam._m0[34u].x);
            float _2386 = 1.0 - (_2381 * cbSceneParam._m0[34u].y);
            float _2387 = 1.0 - (_2381 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_2387) ? _2135 : (isnan(_2135) ? _2387 : min(_2135, _2387));
            frontier_phi_37_36_ladder_1 = isnan(_2386) ? _2134 : (isnan(_2134) ? _2386 : min(_2134, _2386));
            frontier_phi_37_36_ladder_2 = isnan(_2385) ? _2133 : (isnan(_2133) ? _2385 : min(_2133, _2385));
        }
        else
        {
            frontier_phi_37_36_ladder = _2135;
            frontier_phi_37_36_ladder_1 = _2134;
            frontier_phi_37_36_ladder_2 = _2133;
        }
        _2199 = frontier_phi_37_36_ladder_2;
        _2201 = frontier_phi_37_36_ladder_1;
        _2203 = frontier_phi_37_36_ladder;
    }
    else
    {
        _2199 = _2133;
        _2201 = _2134;
        _2203 = _2135;
    }
    uvec4 _2208 = floatBitsToUint(cbInstanceData._m0[_253 + 5u]);
    uint _2210 = _2208.x * 14u;
    uint _2211 = _2210 + 13u;
    float _2218 = _881 + (-1.0);
    float _2223 = (cbLight._m0[_2211].x * _2218) + 1.0;
    float _2224 = (cbLight._m0[_2211].y * _2218) + 1.0;
    float _2225 = (cbLight._m0[_2211].z * _2218) + 1.0;
    float _2226 = (cbLight._m0[_2211].w * _2218) + 1.0;
    uint _2227 = _2210 + 5u;
    float _2233 = isnan(1.0) ? _2224 : (isnan(_2224) ? 1.0 : min(_2224, 1.0));
    uint _2237 = _2210 + 4u;
    float _2246 = isnan(1.0) ? _2223 : (isnan(_2223) ? 1.0 : min(_2223, 1.0));
    uint _2250 = _2210 | 1u;
    float _2261 = dot(vec3(cbLight._m0[_2210].xyz), vec3(_719, _720, _721));
    float _2264 = dot(vec3(cbLight._m0[_2250].xyz), vec3(_719, _720, _721));
    float _4522 = isnan(0.0) ? _2261 : (isnan(_2261) ? 0.0 : max(_2261, 0.0));
    float _4533 = isnan(0.0) ? _2264 : (isnan(_2264) ? 0.0 : max(_2264, 0.0));
    float _2269 = (isnan(1.0) ? _4522 : (isnan(_4522) ? 1.0 : min(_4522, 1.0))) * 0.3183098733425140380859375;
    float _2271 = (isnan(1.0) ? _4533 : (isnan(_4533) ? 1.0 : min(_4533, 1.0))) * 0.3183098733425140380859375;
    float _2278 = ((cbLight._m0[_2227].x * _2233) * _2271) + (((cbLight._m0[_2237].x * _2199) * _2246) * _2269);
    float _2279 = ((_2233 * cbLight._m0[_2227].y) * _2271) + (((cbLight._m0[_2237].y * _2201) * _2246) * _2269);
    float _2280 = ((_2233 * cbLight._m0[_2227].z) * _2271) + (((cbLight._m0[_2237].z * _2203) * _2246) * _2269);
    uvec4 _2284 = floatBitsToUint(cbLight._m0[_2210 + 12u]);
    bool _2286 = _2284.x == 0u;
    float _2388;
    float _2390;
    float _2392;
    if (_2286)
    {
        _2388 = _2278;
        _2390 = _2279;
        _2392 = _2280;
    }
    else
    {
        uint _2396 = _2210 + 6u;
        float _2412 = (dot(vec3(cbLight._m0[_2210 + 2u].xyz), vec3(_719, _720, _721)) * 0.5) + 0.5;
        float _2413 = _2412 * _2412;
        float _4544 = isnan(0.0) ? _2413 : (isnan(_2413) ? 0.0 : max(_2413, 0.0));
        float _2414 = isnan(1.0) ? _4544 : (isnan(_4544) ? 1.0 : min(_4544, 1.0));
        float _2415 = isnan(1.0) ? _2225 : (isnan(_2225) ? 1.0 : min(_2225, 1.0));
        _2388 = (((cbLight._m0[_2396].x * 0.3183098733425140380859375) * _2414) * _2415) + _2278;
        _2390 = (((cbLight._m0[_2396].y * 0.3183098733425140380859375) * _2414) * _2415) + _2279;
        _2392 = (((cbLight._m0[_2396].z * 0.3183098733425140380859375) * _2414) * _2415) + _2280;
    }
    bool _2395 = _2284.y == 0u;
    float _2450;
    float _2452;
    float _2454;
    if (_2395)
    {
        _2450 = _2388;
        _2452 = _2390;
        _2454 = _2392;
    }
    else
    {
        uint _2612 = _2210 + 7u;
        float _2628 = (dot(vec3(cbLight._m0[_2210 + 3u].xyz), vec3(_719, _720, _721)) * 0.5) + 0.5;
        float _2629 = _2628 * _2628;
        float _4560 = isnan(0.0) ? _2629 : (isnan(_2629) ? 0.0 : max(_2629, 0.0));
        float _2630 = isnan(1.0) ? _4560 : (isnan(_4560) ? 1.0 : min(_4560, 1.0));
        float _2631 = isnan(1.0) ? _2226 : (isnan(_2226) ? 1.0 : min(_2226, 1.0));
        _2450 = (((cbLight._m0[_2612].x * 0.3183098733425140380859375) * _2630) * _2631) + _2388;
        _2452 = (((cbLight._m0[_2612].y * 0.3183098733425140380859375) * _2630) * _2631) + _2390;
        _2454 = (((cbLight._m0[_2612].z * 0.3183098733425140380859375) * _2630) * _2631) + _2392;
    }
    uint _2457 = _2210 + 8u;
    float _2470 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2210].w)) * _722) * 0.949999988079071044921875);
    float _2471 = _2470 * _2470;
    float _2472 = cbLight._m0[_2210].x + _798;
    float _2473 = cbLight._m0[_2210].y + _799;
    float _2474 = cbLight._m0[_2210].z + _800;
    float _2478 = inversesqrt(dot(vec3(_2472, _2473, _2474), vec3(_2472, _2473, _2474)));
    float _2479 = _2478 * _2472;
    float _2480 = _2478 * _2473;
    float _2481 = _2478 * _2474;
    float _2482 = dot(vec3(_719, _720, _721), vec3(cbLight._m0[_2210].xyz));
    float _4576 = isnan(0.0) ? _2482 : (isnan(_2482) ? 0.0 : max(_2482, 0.0));
    float _2485 = isnan(1.0) ? _4576 : (isnan(_4576) ? 1.0 : min(_4576, 1.0));
    float _4587 = isnan(0.0) ? _882 : (isnan(_882) ? 0.0 : max(_882, 0.0));
    float _2486 = isnan(1.0) ? _4587 : (isnan(_4587) ? 1.0 : min(_4587, 1.0));
    float _2487 = dot(vec3(_719, _720, _721), vec3(_2479, _2480, _2481));
    float _4598 = isnan(0.0) ? _2487 : (isnan(_2487) ? 0.0 : max(_2487, 0.0));
    float _2490 = isnan(1.0) ? _4598 : (isnan(_4598) ? 1.0 : min(_4598, 1.0));
    float _2491 = dot(vec3(cbLight._m0[_2210].xyz), vec3(_2479, _2480, _2481));
    float _4609 = isnan(0.0) ? _2491 : (isnan(_2491) ? 0.0 : max(_2491, 0.0));
    float _2495 = _2471 * _2471;
    float _2499 = ((_2490 * _2490) * (_2495 + (-1.0))) + 1.0;
    float _2510 = (exp2(log2(1.0 - (isnan(1.0) ? _4609 : (isnan(_4609) ? 1.0 : min(_4609, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2511 = 1.0 - _2471;
    float _2522 = (0.5 / (((_2486 * ((_2485 * _2511) + _2471)) + 9.9999999392252902907785028219223e-09) + (((_2486 * _2511) + _2471) * _2485))) * _2485;
    float _4620 = isnan(0.0) ? _2522 : (isnan(_2522) ? 0.0 : max(_2522, 0.0));
    float _2524 = (isnan(1.0) ? _4620 : (isnan(_4620) ? 1.0 : min(_4620, 1.0))) * (_2495 / ((_2499 * _2499) * 3.141590118408203125));
    uint _2538 = _2210 + 9u;
    float _2549 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2250].w)) * _722) * 0.949999988079071044921875);
    float _2550 = _2549 * _2549;
    float _2551 = cbLight._m0[_2250].x + _798;
    float _2552 = cbLight._m0[_2250].y + _799;
    float _2553 = cbLight._m0[_2250].z + _800;
    float _2557 = inversesqrt(dot(vec3(_2551, _2552, _2553), vec3(_2551, _2552, _2553)));
    float _2558 = _2557 * _2551;
    float _2559 = _2557 * _2552;
    float _2560 = _2557 * _2553;
    float _2561 = dot(vec3(_719, _720, _721), vec3(cbLight._m0[_2250].xyz));
    float _4631 = isnan(0.0) ? _2561 : (isnan(_2561) ? 0.0 : max(_2561, 0.0));
    float _2564 = isnan(1.0) ? _4631 : (isnan(_4631) ? 1.0 : min(_4631, 1.0));
    float _2565 = dot(vec3(_719, _720, _721), vec3(_2558, _2559, _2560));
    float _4642 = isnan(0.0) ? _2565 : (isnan(_2565) ? 0.0 : max(_2565, 0.0));
    float _2568 = isnan(1.0) ? _4642 : (isnan(_4642) ? 1.0 : min(_4642, 1.0));
    float _2569 = dot(vec3(cbLight._m0[_2250].xyz), vec3(_2558, _2559, _2560));
    float _4653 = isnan(0.0) ? _2569 : (isnan(_2569) ? 0.0 : max(_2569, 0.0));
    float _2573 = _2550 * _2550;
    float _2577 = ((_2568 * _2568) * (_2573 + (-1.0))) + 1.0;
    float _2586 = (exp2(log2(1.0 - (isnan(1.0) ? _4653 : (isnan(_4653) ? 1.0 : min(_4653, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2587 = 1.0 - _2550;
    float _2597 = (0.5 / (((_2486 * ((_2564 * _2587) + _2550)) + 9.9999999392252902907785028219223e-09) + (((_2486 * _2587) + _2550) * _2564))) * _2564;
    float _4664 = isnan(0.0) ? _2597 : (isnan(_2597) ? 0.0 : max(_2597, 0.0));
    float _2599 = (isnan(1.0) ? _4664 : (isnan(_4664) ? 1.0 : min(_4664, 1.0))) * (_2573 / ((_2577 * _2577) * 3.141590118408203125));
    float _2609 = (((_2586 * cbLight._m0[_2538].x) * _2599) * _2233) + ((((cbLight._m0[_2457].x * _2199) * _2510) * _2524) * _2246);
    float _2610 = (((_2586 * cbLight._m0[_2538].y) * _2599) * _2233) + ((((cbLight._m0[_2457].y * _2201) * _2510) * _2524) * _2246);
    float _2611 = (((_2586 * cbLight._m0[_2538].z) * _2599) * _2233) + ((((cbLight._m0[_2457].z * _2203) * _2510) * _2524) * _2246);
    float _2667;
    float _2669;
    float _2671;
    if (_2286)
    {
        _2667 = _2609;
        _2669 = _2610;
        _2671 = _2611;
    }
    else
    {
        uint _2673 = _2210 + 2u;
        uint _2677 = _2210 + 10u;
        float _2691 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2673].w)) * _722) * 0.949999988079071044921875);
        float _2692 = _2691 * _2691;
        float _2693 = cbLight._m0[_2673].x + _798;
        float _2694 = cbLight._m0[_2673].y + _799;
        float _2695 = cbLight._m0[_2673].z + _800;
        float _2699 = inversesqrt(dot(vec3(_2693, _2694, _2695), vec3(_2693, _2694, _2695)));
        float _2700 = _2699 * _2693;
        float _2701 = _2699 * _2694;
        float _2702 = _2699 * _2695;
        float _2703 = dot(vec3(_719, _720, _721), vec3(cbLight._m0[_2673].xyz));
        float _4675 = isnan(0.0) ? _2703 : (isnan(_2703) ? 0.0 : max(_2703, 0.0));
        float _2706 = isnan(1.0) ? _4675 : (isnan(_4675) ? 1.0 : min(_4675, 1.0));
        float _2707 = dot(vec3(_719, _720, _721), vec3(_2700, _2701, _2702));
        float _4686 = isnan(0.0) ? _2707 : (isnan(_2707) ? 0.0 : max(_2707, 0.0));
        float _2710 = isnan(1.0) ? _4686 : (isnan(_4686) ? 1.0 : min(_4686, 1.0));
        float _2711 = dot(vec3(cbLight._m0[_2673].xyz), vec3(_2700, _2701, _2702));
        float _4697 = isnan(0.0) ? _2711 : (isnan(_2711) ? 0.0 : max(_2711, 0.0));
        float _2715 = _2692 * _2692;
        float _2719 = ((_2710 * _2710) * (_2715 + (-1.0))) + 1.0;
        float _2728 = (exp2(log2(1.0 - (isnan(1.0) ? _4697 : (isnan(_4697) ? 1.0 : min(_4697, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2729 = 1.0 - _2692;
        float _2739 = (0.5 / (((_2486 * ((_2706 * _2729) + _2692)) + 9.9999999392252902907785028219223e-09) + (((_2486 * _2729) + _2692) * _2706))) * _2706;
        float _4708 = isnan(0.0) ? _2739 : (isnan(_2739) ? 0.0 : max(_2739, 0.0));
        float _2741 = (isnan(1.0) ? _4708 : (isnan(_4708) ? 1.0 : min(_4708, 1.0))) * (_2715 / ((_2719 * _2719) * 3.141590118408203125));
        float _2742 = isnan(1.0) ? _2225 : (isnan(_2225) ? 1.0 : min(_2225, 1.0));
        _2667 = (((_2728 * cbLight._m0[_2677].x) * _2741) * _2742) + _2609;
        _2669 = (((_2728 * cbLight._m0[_2677].y) * _2741) * _2742) + _2610;
        _2671 = (((_2728 * cbLight._m0[_2677].z) * _2741) * _2742) + _2611;
    }
    float _2773;
    float _2775;
    float _2777;
    if (_2395)
    {
        _2773 = _2667;
        _2775 = _2669;
        _2777 = _2671;
    }
    else
    {
        uint _2784 = _2210 + 3u;
        uint _2788 = _2210 + 11u;
        float _2802 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2784].w)) * _722) * 0.949999988079071044921875);
        float _2803 = _2802 * _2802;
        float _2804 = cbLight._m0[_2784].x + _798;
        float _2805 = cbLight._m0[_2784].y + _799;
        float _2806 = cbLight._m0[_2784].z + _800;
        float _2810 = inversesqrt(dot(vec3(_2804, _2805, _2806), vec3(_2804, _2805, _2806)));
        float _2811 = _2810 * _2804;
        float _2812 = _2810 * _2805;
        float _2813 = _2810 * _2806;
        float _2814 = dot(vec3(_719, _720, _721), vec3(cbLight._m0[_2784].xyz));
        float _4724 = isnan(0.0) ? _2814 : (isnan(_2814) ? 0.0 : max(_2814, 0.0));
        float _2817 = isnan(1.0) ? _4724 : (isnan(_4724) ? 1.0 : min(_4724, 1.0));
        float _2818 = dot(vec3(_719, _720, _721), vec3(_2811, _2812, _2813));
        float _4735 = isnan(0.0) ? _2818 : (isnan(_2818) ? 0.0 : max(_2818, 0.0));
        float _2821 = isnan(1.0) ? _4735 : (isnan(_4735) ? 1.0 : min(_4735, 1.0));
        float _2822 = dot(vec3(cbLight._m0[_2784].xyz), vec3(_2811, _2812, _2813));
        float _4746 = isnan(0.0) ? _2822 : (isnan(_2822) ? 0.0 : max(_2822, 0.0));
        float _2826 = _2803 * _2803;
        float _2830 = ((_2821 * _2821) * (_2826 + (-1.0))) + 1.0;
        float _2839 = (exp2(log2(1.0 - (isnan(1.0) ? _4746 : (isnan(_4746) ? 1.0 : min(_4746, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2840 = 1.0 - _2803;
        float _2850 = (0.5 / (((_2486 * ((_2817 * _2840) + _2803)) + 9.9999999392252902907785028219223e-09) + (((_2486 * _2840) + _2803) * _2817))) * _2817;
        float _4757 = isnan(0.0) ? _2850 : (isnan(_2850) ? 0.0 : max(_2850, 0.0));
        float _2852 = (isnan(1.0) ? _4757 : (isnan(_4757) ? 1.0 : min(_4757, 1.0))) * (_2826 / ((_2830 * _2830) * 3.141590118408203125));
        float _2853 = isnan(1.0) ? _2226 : (isnan(_2226) ? 1.0 : min(_2226, 1.0));
        _2773 = (((_2839 * cbLight._m0[_2788].x) * _2852) * _2853) + _2667;
        _2775 = (((_2839 * cbLight._m0[_2788].y) * _2852) * _2853) + _2669;
        _2777 = (((_2839 * cbLight._m0[_2788].z) * _2852) * _2853) + _2671;
    }
    float _2919;
    float _2921;
    float _2923;
    float _2925;
    float _2927;
    float _2929;
    if (_2208.y == 0u)
    {
        uvec4 _2874 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2875 = _2874.x;
        uint _2886 = uint((float(_2874.y) * floor(float(uint(cbSceneParam._m0[85u].y * _819) / _2875))) + floor(float(uint(cbSceneParam._m0[85u].x * _818) / _2875)));
        float _2896 = (log2(_1986 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2897 = isnan(0.0) ? _2896 : (isnan(_2896) ? 0.0 : max(_2896, 0.0));
        uint _2900 = uint(isnan(14.0) ? _2897 : (isnan(_2897) ? 14.0 : min(_2897, 14.0)));
        uvec4 _2905 = texelFetch(g_lightClusterGridBuffer, int(((_2900 << 2u) + (_2886 << 6u)) >> 2u));
        uint _2906 = _2905.x;
        uint _2907 = _2874.z;
        float _2986;
        float _2988;
        float _2990;
        float _2992;
        float _2994;
        float _2996;
        if (((((1u << ((_2907 >> 4u) & 15u)) + 4294967295u) & _2906) == 0u) || ((_2907 & 240u) == 0u))
        {
            _2986 = 0.0;
            _2988 = 0.0;
            _2990 = 0.0;
            _2992 = 0.0;
            _2994 = 0.0;
            _2996 = 0.0;
        }
        else
        {
            float _2987;
            float _2989;
            float _2991;
            float _2993;
            float _2995;
            float _2997;
            float _3139 = 0.0;
            float _3140 = 0.0;
            float _3141 = 0.0;
            float _3142 = 0.0;
            float _3143 = 0.0;
            float _3144 = 0.0;
            uint _3145 = 0u;
            uint _3154;
            bool _3155;
            for (;;)
            {
                _3154 = texelFetch(g_lightClassification, int((((_2900 << 5u) + (_2886 << 9u)) + (_3145 << 2u)) >> 2u)).x;
                _3155 = _3154 == 0u;
                float frontier_phi_71_pred;
                float frontier_phi_71_pred_1;
                float frontier_phi_71_pred_2;
                float frontier_phi_71_pred_3;
                float frontier_phi_71_pred_4;
                float frontier_phi_71_pred_5;
                if (_3155)
                {
                    frontier_phi_71_pred = _3144;
                    frontier_phi_71_pred_1 = _3143;
                    frontier_phi_71_pred_2 = _3142;
                    frontier_phi_71_pred_3 = _3141;
                    frontier_phi_71_pred_4 = _3140;
                    frontier_phi_71_pred_5 = _3139;
                }
                else
                {
                    float _3284;
                    float _3285;
                    float _3286;
                    float _3287;
                    float _3288;
                    float _3289;
                    uint _3290;
                    _3284 = _3139;
                    _3285 = _3140;
                    _3286 = _3141;
                    _3287 = _3142;
                    _3288 = _3143;
                    _3289 = _3144;
                    _3290 = _3154;
                    float _3211;
                    float _3212;
                    float _3213;
                    float _3214;
                    float _3215;
                    float _3216;
                    for (;;)
                    {
                        uint _3294 = uint(findLSB(_3290)) + (_3145 << 5u);
                        uint _3291 = (_3290 + 4294967295u) & _3290;
                        uint _3296 = _3294 * 48u;
                        vec4 _3310 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3296)).x, texelFetch(g_PointLightRenderingBuffer, int(_3296 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3296 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3296 + 3u)).x));
                        uint _3316 = (_3294 * 48u) + 4u;
                        vec4 _3329 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3316)).x, texelFetch(g_PointLightRenderingBuffer, int(_3316 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3316 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3316 + 3u)).x));
                        uint _3335 = (_3294 * 48u) + 8u;
                        vec3 _3346 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3335)).x, texelFetch(g_PointLightRenderingBuffer, int(_3335 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3335 + 2u)).x));
                        float _3350 = _3310.x - _1984;
                        float _3351 = _3310.y - _1985;
                        float _3352 = _3310.z - _1986;
                        float _3353 = dot(vec3(_3350, _3351, _3352), vec3(_3350, _3351, _3352));
                        float _3356 = inversesqrt(_3353);
                        float _3357 = _3356 * _3350;
                        float _3358 = _3356 * _3351;
                        float _3359 = _3356 * _3352;
                        float _3360 = dot(vec3(_837, _840, _843), vec3(_3357, _3358, _3359));
                        float _3365 = 1.0 - (_3353 * _3310.w);
                        float _4783 = isnan(0.0) ? _3365 : (isnan(_3365) ? 0.0 : max(_3365, 0.0));
                        float _3366 = isnan(1.0) ? _4783 : (isnan(_4783) ? 1.0 : min(_4783, 1.0));
                        float _3367 = sqrt(_3353) * _3329.w;
                        float _3370 = 1.39999997615814208984375 / (_3367 + 1.39999997615814208984375);
                        float _3371 = _3370 * _3370;
                        float _3374 = ((1.0 - _3371) * _3360) + _3371;
                        float _3377 = _3367 * _3367;
                        float _3381 = ((isnan(0.0) ? _3374 : (isnan(_3374) ? 0.0 : max(_3374, 0.0))) * _3366) / ((_3377 * 0.699999988079071044921875) + 1.0);
                        float _3385 = (-0.0) - _1984;
                        float _3386 = (-0.0) - _1985;
                        float _3387 = (-0.0) - _1986;
                        float _3391 = inversesqrt(dot(vec3(_3385, _3386, _3387), vec3(_3385, _3386, _3387)));
                        float _3392 = _3391 * _3385;
                        float _3393 = _3391 * _3386;
                        float _3394 = _3391 * _3387;
                        float _3401 = exp2(log2(1.0 / ((_3377 * 3.5) + 5.0)) * 0.25);
                        float _3402 = 1.0 - _897;
                        float _3409 = sqrt(1.0 - ((1.0 - (_3402 * _3402)) * (1.0 - (_3401 * _3401))));
                        float _3410 = _3409 * _3409;
                        float _3411 = _3410 * _3410;
                        float _3412 = _3392 + _3357;
                        float _3413 = _3393 + _3358;
                        float _3414 = _3394 + _3359;
                        float _3418 = inversesqrt(dot(vec3(_3412, _3413, _3414), vec3(_3412, _3413, _3414)));
                        float _3422 = dot(vec3(_837, _840, _843), vec3(_3392, _3393, _3394));
                        float _4799 = isnan(0.0) ? _3422 : (isnan(_3422) ? 0.0 : max(_3422, 0.0));
                        float _3425 = isnan(1.0) ? _4799 : (isnan(_4799) ? 1.0 : min(_4799, 1.0));
                        float _3426 = dot(vec3(_837, _840, _843), vec3(_3418 * _3412, _3418 * _3413, _3418 * _3414));
                        float _4810 = isnan(0.0) ? _3426 : (isnan(_3426) ? 0.0 : max(_3426, 0.0));
                        float _3429 = isnan(1.0) ? _4810 : (isnan(_4810) ? 1.0 : min(_4810, 1.0));
                        float _3433 = ((_3429 * _3429) * (_3411 + (-1.0))) + 1.0;
                        float _3434 = _3370 * _3410;
                        float _3435 = _3434 * _3434;
                        float _3438 = ((1.0 - _3435) * _3360) + _3435;
                        float _4821 = isnan(0.0) ? _3438 : (isnan(_3438) ? 0.0 : max(_3438, 0.0));
                        float _3439 = isnan(1.0) ? _4821 : (isnan(_4821) ? 1.0 : min(_4821, 1.0));
                        float _3440 = 1.0 - _3410;
                        float _3450 = (0.5 / (((_3439 * ((_3425 * _3440) + _3410)) + 9.9999999392252902907785028219223e-09) + (((_3439 * _3440) + _3410) * _3425))) * _3439;
                        float _4832 = isnan(0.0) ? _3450 : (isnan(_3450) ? 0.0 : max(_3450, 0.0));
                        float _3461 = (((_3411 * 3.1415927410125732421875) * (isnan(1.0) ? _4832 : (isnan(_4832) ? 1.0 : min(_4832, 1.0)))) / ((_3433 * _3433) * ((_3377 * 2.1991131305694580078125) + 3.141590118408203125))) * _3366;
                        _3214 = (_3381 * _3329.x) + _3287;
                        _3215 = (_3381 * _3329.y) + _3288;
                        _3216 = (_3381 * _3329.z) + _3289;
                        _3211 = (_3461 * _3346.x) + _3284;
                        _3212 = (_3461 * _3346.y) + _3285;
                        _3213 = (_3461 * _3346.z) + _3286;
                        if (_3291 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3284 = _3211;
                            _3285 = _3212;
                            _3286 = _3213;
                            _3287 = _3214;
                            _3288 = _3215;
                            _3289 = _3216;
                            _3290 = _3291;
                        }
                    }
                    frontier_phi_71_pred = _3216;
                    frontier_phi_71_pred_1 = _3215;
                    frontier_phi_71_pred_2 = _3214;
                    frontier_phi_71_pred_3 = _3213;
                    frontier_phi_71_pred_4 = _3212;
                    frontier_phi_71_pred_5 = _3211;
                }
                _2997 = frontier_phi_71_pred;
                _2995 = frontier_phi_71_pred_1;
                _2993 = frontier_phi_71_pred_2;
                _2991 = frontier_phi_71_pred_3;
                _2989 = frontier_phi_71_pred_4;
                _2987 = frontier_phi_71_pred_5;
                uint _3146 = _3145 + 1u;
                if (_3146 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3139 = _2987;
                    _3140 = _2989;
                    _3141 = _2991;
                    _3142 = _2993;
                    _3143 = _2995;
                    _3144 = _2997;
                    _3145 = _3146;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2986 = _2987;
            _2988 = _2989;
            _2990 = _2991;
            _2992 = _2993;
            _2994 = _2995;
            _2996 = _2997;
        }
        uvec4 _3000 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3001 = _3000.z;
        uint _3003 = (_3001 >> 8u) & 15u;
        float _3107;
        float _3109;
        float _3111;
        float _3113;
        float _3115;
        float _3117;
        if (((4294967295u << _3003) & _2906) == 0u)
        {
            _3107 = _2986;
            _3109 = _2988;
            _3111 = _2990;
            _3113 = _2992;
            _3115 = _2994;
            _3117 = _2996;
        }
        else
        {
            float _3132 = inversesqrt(dot(vec3(_1984, _1985, _1986), vec3(_1984, _1985, _1986)));
            float _3133 = _3132 * _1984;
            float _3134 = _3132 * _1985;
            float _3135 = _3132 * _1986;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_3003 < ((_3001 >> 12u) & 15u))
            {
                float _3108;
                float _3110;
                float _3112;
                float _3114;
                float _3116;
                float _3118;
                float _3267 = _2986;
                float _3268 = _2988;
                float _3269 = _2990;
                float _3270 = _2992;
                float _3271 = _2994;
                float _3272 = _2996;
                uint _3273 = _3003;
                uint _3282;
                bool _3283;
                for (;;)
                {
                    _3282 = texelFetch(g_lightClassification, int((((_2900 << 5u) + (_2886 << 9u)) + (_3273 << 2u)) >> 2u)).x;
                    _3283 = _3282 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    float frontier_phi_82_pred_3;
                    float frontier_phi_82_pred_4;
                    float frontier_phi_82_pred_5;
                    if (_3283)
                    {
                        frontier_phi_82_pred = _3272;
                        frontier_phi_82_pred_1 = _3271;
                        frontier_phi_82_pred_2 = _3270;
                        frontier_phi_82_pred_3 = _3269;
                        frontier_phi_82_pred_4 = _3268;
                        frontier_phi_82_pred_5 = _3267;
                    }
                    else
                    {
                        float _3475;
                        float _3476;
                        float _3477;
                        float _3478;
                        float _3479;
                        float _3480;
                        float _3768;
                        float _3769;
                        float _3770;
                        float _3771;
                        float _3772;
                        float _3773;
                        float _3488 = _3267;
                        float _3489 = _3268;
                        float _3490 = _3269;
                        float _3491 = _3270;
                        float _3492 = _3271;
                        float _3493 = _3272;
                        uint _3494 = _3282;
                        uint _3495;
                        vec4 _3520;
                        float _3521;
                        vec4 _3536;
                        vec3 _3548;
                        vec4 _3563;
                        vec4 _3578;
                        float _3624;
                        bool _3625;
                        for (;;)
                        {
                            uint _3505 = ((_3273 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3494));
                            _3495 = (_3494 + 4294967295u) & _3494;
                            uint _3507 = _3505 * 40u;
                            _3520 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3507)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3507 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3507 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3507 + 3u)).x));
                            _3521 = _3520.w;
                            uint _3523 = (_3505 * 40u) + 4u;
                            _3536 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3523)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3523 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3523 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3523 + 3u)).x));
                            uint _3538 = (_3505 * 40u) + 8u;
                            _3548 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3538)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3538 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3538 + 2u)).x));
                            uint _3550 = (_3505 * 40u) + 16u;
                            _3563 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3550)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3550 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3550 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3550 + 3u)).x));
                            uint _3565 = (_3505 * 40u) + 20u;
                            _3578 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3565)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3565 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3565 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3565 + 3u)).x));
                            uint _3580 = (_3505 * 40u) + 24u;
                            vec4 _3593 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3580)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3580 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3580 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3580 + 3u)).x));
                            uint _3599 = (_3505 * 40u) + 28u;
                            vec4 _3612 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3599)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3599 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3599 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3599 + 3u)).x));
                            _3624 = fma(_1986, _3612.z, fma(_1985, _3612.y, _3612.x * _1984)) + _3612.w;
                            _3625 = !((fma(_1986, _3593.z, fma(_1985, _3593.y, _3593.x * _1984)) + _3593.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_3625)
                            {
                                float _3652 = _3520.x - _1984;
                                float _3653 = _3520.y - _1985;
                                float _3654 = _3520.z - _1986;
                                float _3655 = dot(vec3(_3652, _3653, _3654), vec3(_3652, _3653, _3654));
                                float _3658 = inversesqrt(_3655);
                                float _3659 = _3658 * _3652;
                                float _3660 = _3658 * _3653;
                                float _3661 = _3658 * _3654;
                                float _3665 = 1.0 - (_3655 / (_3521 * _3521));
                                float _4843 = isnan(0.0) ? _3665 : (isnan(_3665) ? 0.0 : max(_3665, 0.0));
                                float _3666 = isnan(1.0) ? _4843 : (isnan(_4843) ? 1.0 : min(_4843, 1.0));
                                float _3670 = sqrt(_3655) * _3536.w;
                                float _3672 = 1.39999997615814208984375 / (_3670 + 1.39999997615814208984375);
                                float _3673 = _3672 * _3672;
                                float _3676 = ((1.0 - _3673) * dot(vec3(_3659, _3660, _3661), vec3(_837, _840, _843))) + _3673;
                                float _3679 = _3670 * _3670;
                                float _3683 = (fma(_1986, _3563.z, fma(_1985, _3563.y, _3563.x * _1984)) + _3563.w) / _3624;
                                float _3684 = (fma(_1986, _3578.z, fma(_1985, _3578.y, _3578.x * _1984)) + _3578.w) / _3624;
                                float _3688 = 1.0 - dot(vec2(_3683, _3684), vec2(_3683, _3684));
                                float _4859 = isnan(0.0) ? _3688 : (isnan(_3688) ? 0.0 : max(_3688, 0.0));
                                float _3689 = isnan(1.0) ? _4859 : (isnan(_4859) ? 1.0 : min(_4859, 1.0));
                                float _3690 = _3689 * (((isnan(0.0) ? _3676 : (isnan(_3676) ? 0.0 : max(_3676, 0.0))) * _3666) / ((_3679 * 0.699999988079071044921875) + 1.0));
                                float _3702 = exp2(log2(1.0 / ((_3679 * 3.5) + 5.0)) * 0.25);
                                float _3703 = 1.0 - _897;
                                float _3710 = sqrt(1.0 - ((1.0 - (_3703 * _3703)) * (1.0 - (_3702 * _3702))));
                                float _3711 = _3710 * _3710;
                                float _3712 = _3711 * _3711;
                                float _3713 = _3659 - _3133;
                                float _3714 = _3660 - _3134;
                                float _3715 = _3661 - _3135;
                                float _3719 = inversesqrt(dot(vec3(_3713, _3714, _3715), vec3(_3713, _3714, _3715)));
                                float _3723 = dot(vec3(_837, _840, _843), vec3((-0.0) - _3133, (-0.0) - _3134, (-0.0) - _3135));
                                float _4870 = isnan(0.0) ? _3723 : (isnan(_3723) ? 0.0 : max(_3723, 0.0));
                                float _3726 = isnan(1.0) ? _4870 : (isnan(_4870) ? 1.0 : min(_4870, 1.0));
                                float _3727 = dot(vec3(_837, _840, _843), vec3(_3719 * _3713, _3719 * _3714, _3719 * _3715));
                                float _4881 = isnan(0.0) ? _3727 : (isnan(_3727) ? 0.0 : max(_3727, 0.0));
                                float _3730 = isnan(1.0) ? _4881 : (isnan(_4881) ? 1.0 : min(_4881, 1.0));
                                float _3734 = ((_3730 * _3730) * (_3712 + (-1.0))) + 1.0;
                                float _3735 = _3672 * _3711;
                                float _3736 = _3735 * _3735;
                                float _3742 = ((1.0 - _3736) * dot(vec3(_837, _840, _843), vec3(_3659, _3660, _3661))) + _3736;
                                float _4892 = isnan(0.0) ? _3742 : (isnan(_3742) ? 0.0 : max(_3742, 0.0));
                                float _3743 = isnan(1.0) ? _4892 : (isnan(_4892) ? 1.0 : min(_4892, 1.0));
                                float _3744 = 1.0 - _3711;
                                float _3754 = (0.5 / (((_3743 * ((_3726 * _3744) + _3711)) + 9.9999999392252902907785028219223e-09) + (((_3743 * _3744) + _3711) * _3726))) * _3743;
                                float _4903 = isnan(0.0) ? _3754 : (isnan(_3754) ? 0.0 : max(_3754, 0.0));
                                float _3764 = (_3689 * _3666) * (((_3712 * 3.1415927410125732421875) * (isnan(1.0) ? _4903 : (isnan(_4903) ? 1.0 : min(_4903, 1.0)))) / ((_3734 * _3734) * ((_3679 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_88_pred = _3690 * _3536.z;
                                frontier_phi_88_pred_1 = _3690 * _3536.y;
                                frontier_phi_88_pred_2 = _3690 * _3536.x;
                                frontier_phi_88_pred_3 = _3764 * _3548.z;
                                frontier_phi_88_pred_4 = _3764 * _3548.y;
                                frontier_phi_88_pred_5 = _3764 * _3548.x;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _3773 = frontier_phi_88_pred;
                            _3772 = frontier_phi_88_pred_1;
                            _3771 = frontier_phi_88_pred_2;
                            _3770 = frontier_phi_88_pred_3;
                            _3769 = frontier_phi_88_pred_4;
                            _3768 = frontier_phi_88_pred_5;
                            _3478 = _3771 + _3491;
                            _3479 = _3772 + _3492;
                            _3480 = _3773 + _3493;
                            _3475 = _3768 + _3488;
                            _3476 = _3769 + _3489;
                            _3477 = _3770 + _3490;
                            if (_3495 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3488 = _3475;
                                _3489 = _3476;
                                _3490 = _3477;
                                _3491 = _3478;
                                _3492 = _3479;
                                _3493 = _3480;
                                _3494 = _3495;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _3480;
                        frontier_phi_82_pred_1 = _3479;
                        frontier_phi_82_pred_2 = _3478;
                        frontier_phi_82_pred_3 = _3477;
                        frontier_phi_82_pred_4 = _3476;
                        frontier_phi_82_pred_5 = _3475;
                    }
                    _3118 = frontier_phi_82_pred;
                    _3116 = frontier_phi_82_pred_1;
                    _3114 = frontier_phi_82_pred_2;
                    _3112 = frontier_phi_82_pred_3;
                    _3110 = frontier_phi_82_pred_4;
                    _3108 = frontier_phi_82_pred_5;
                    uint _3274 = _3273 + 1u;
                    if (_3274 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3267 = _3108;
                        _3268 = _3110;
                        _3269 = _3112;
                        _3270 = _3114;
                        _3271 = _3116;
                        _3272 = _3118;
                        _3273 = _3274;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _3114;
                frontier_phi_63_64_ladder_1 = _3118;
                frontier_phi_63_64_ladder_2 = _3116;
                frontier_phi_63_64_ladder_3 = _3112;
                frontier_phi_63_64_ladder_4 = _3110;
                frontier_phi_63_64_ladder_5 = _3108;
            }
            else
            {
                frontier_phi_63_64_ladder = _2992;
                frontier_phi_63_64_ladder_1 = _2996;
                frontier_phi_63_64_ladder_2 = _2994;
                frontier_phi_63_64_ladder_3 = _2990;
                frontier_phi_63_64_ladder_4 = _2988;
                frontier_phi_63_64_ladder_5 = _2986;
            }
            _3107 = frontier_phi_63_64_ladder_5;
            _3109 = frontier_phi_63_64_ladder_4;
            _3111 = frontier_phi_63_64_ladder_3;
            _3113 = frontier_phi_63_64_ladder;
            _3115 = frontier_phi_63_64_ladder_2;
            _3117 = frontier_phi_63_64_ladder_1;
        }
        float _3122 = isnan(1.0) ? _881 : (isnan(_881) ? 1.0 : min(_881, 1.0));
        _2919 = (_3122 * _3113) + _2450;
        _2921 = (_3122 * _3115) + _2452;
        _2923 = (_3122 * _3117) + _2454;
        _2925 = ((_3107 * 0.039999999105930328369140625) * _3122) + _2773;
        _2927 = ((_3109 * 0.039999999105930328369140625) * _3122) + _2775;
        _2929 = ((_3111 * 0.039999999105930328369140625) * _3122) + _2777;
    }
    else
    {
        _2919 = _2450;
        _2921 = _2452;
        _2923 = _2454;
        _2925 = _2773;
        _2927 = _2775;
        _2929 = _2777;
    }
    float _4919 = isnan(0.0) ? _866 : (isnan(_866) ? 0.0 : max(_866, 0.0));
    float _4930 = isnan(0.0) ? _867 : (isnan(_867) ? 0.0 : max(_867, 0.0));
    float _4941 = isnan(0.0) ? _868 : (isnan(_868) ? 0.0 : max(_868, 0.0));
    float _2946 = ((isnan(1.0) ? _4919 : (isnan(_4919) ? 1.0 : min(_4919, 1.0))) * (_2919 + ((isnan(0.0) ? _1637 : (isnan(_1637) ? 0.0 : max(_1637, 0.0))) * _881))) + ((_2925 + ((isnan(0.0) ? _1931 : (isnan(_1931) ? 0.0 : max(_1931, 0.0))) * _1716)) * cbPerFrame._m0[3u].x);
    float _2947 = ((isnan(1.0) ? _4930 : (isnan(_4930) ? 1.0 : min(_4930, 1.0))) * (_2921 + ((isnan(0.0) ? _1640 : (isnan(_1640) ? 0.0 : max(_1640, 0.0))) * _881))) + ((_2927 + ((isnan(0.0) ? _1934 : (isnan(_1934) ? 0.0 : max(_1934, 0.0))) * _1716)) * cbPerFrame._m0[3u].x);
    float _2948 = ((isnan(1.0) ? _4941 : (isnan(_4941) ? 1.0 : min(_4941, 1.0))) * (_2923 + ((isnan(0.0) ? _1643 : (isnan(_1643) ? 0.0 : max(_1643, 0.0))) * _881))) + ((_2929 + ((isnan(0.0) ? _1937 : (isnan(_1937) ? 0.0 : max(_1937, 0.0))) * _1716)) * cbPerFrame._m0[3u].x);
    uint _2949 = _253 + 6u;
    float _2957 = _818 / cbSceneParam._m0[86u].x;
    float _2958 = _819 / cbSceneParam._m0[86u].y;
    vec4 _2972 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2957, _2958, (log2((isnan(cbSceneParam._m0[77u].w) ? _740 : (isnan(_740) ? cbSceneParam._m0[77u].w : min(_740, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2974 = _2972.x;
    float _2975 = _2972.y;
    float _2976 = _2972.z;
    float _2977 = _2972.w;
    float _3049;
    float _3051;
    float _3053;
    float _3055;
    if (_740 > cbSceneParam._m0[78u].w)
    {
        float _3011 = isnan(_740) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _740 : min(cbSceneParam._m0[80u].w, _740));
        float _3012 = _3011 / _740;
        float _3023 = _3012 * _791;
        float _3024 = _792 * _3012;
        float _3025 = (-0.0) - _3024;
        float _3027 = _3012 * _793;
        float _3029 = (cbSceneParam._m0[77u].w * _3025) / _3011;
        float _3030 = _3029 + cbSceneParam._m0[79u].w;
        float _3031 = cbSceneParam._m0[79u].w - _3024;
        float _3037 = sqrt(((_3023 * _3023) + (_3024 * _3024)) + (_3027 * _3027));
        float _3040 = (1.0 - (cbSceneParam._m0[77u].w / _3011)) * _3037;
        float _3045 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3047 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3224;
        if (abs((_3025 - _3029) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3224 = ((((_3030 > 0.0) ? exp2(_3045 * _3030) : (2.0 - exp2(_3047 * _3030))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3040;
        }
        else
        {
            float _3168 = 1.0 / cbSceneParam._m0[80u].x;
            float _3169 = isnan(_3031) ? _3030 : (isnan(_3030) ? _3031 : max(_3030, _3031));
            float _3170 = isnan(_3031) ? _3030 : (isnan(_3030) ? _3031 : min(_3030, _3031));
            float _3179 = isnan(0.0) ? _3169 : (isnan(_3169) ? 0.0 : min(_3169, 0.0));
            float _3180 = isnan(0.0) ? _3170 : (isnan(_3170) ? 0.0 : min(_3170, 0.0));
            _3224 = ((abs(_3037 / _3025) * cbSceneParam._m0[80u].y) * ((((_3179 - _3180) * 2.0) - ((exp2(_3045 * (isnan(0.0) ? _3169 : (isnan(_3169) ? 0.0 : max(_3169, 0.0)))) - exp2(_3045 * (isnan(0.0) ? _3170 : (isnan(_3170) ? 0.0 : max(_3170, 0.0))))) * _3168)) - ((exp2(_3047 * _3179) - exp2(_3047 * _3180)) * _3168))) + (_3040 * cbSceneParam._m0[80u].z);
        }
        vec4 _3226 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2957, _2958, 1.0), 0.0);
        float _3235 = exp2((_3224 * (-1.44269502162933349609375)) * (1.0 - _3226.w));
        float _3236 = log2(_3235);
        float _3252 = log2(_2977);
        _3049 = (exp2(_3252 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3236 * cbSceneParam._m0[78u].x)) * _3226.x) / cbSceneParam._m0[78u].x)) + _2974;
        _3051 = (exp2(_3252 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3236 * cbSceneParam._m0[78u].y)) * _3226.y) / cbSceneParam._m0[78u].y)) + _2975;
        _3053 = (exp2(_3252 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3236 * cbSceneParam._m0[78u].z)) * _3226.z) / cbSceneParam._m0[78u].z)) + _2976;
        _3055 = _3235 * _2977;
    }
    else
    {
        _3049 = _2974;
        _3051 = _2975;
        _3053 = _2976;
        _3055 = _2977;
    }
    bool _3262;
    vec4 _3065;
    vec4 _3087;
    float _3089;
    float _3093;
    float _3094;
    float _3095;
    float _3096;
    bool _3106;
    for (;;)
    {
        _3065 = cbMatDynParam._m0[0u];
        float _3067 = roundEven(_3065.y);
        bool _3068 = _3067 == 3.0;
        float _3069 = log2(_3055);
        float _3076 = exp2(_3069 * cbSceneParam._m0[78u].x) * _2946;
        float _3077 = exp2(_3069 * cbSceneParam._m0[78u].y) * _2947;
        float _3078 = exp2(_3069 * cbSceneParam._m0[78u].z) * _2948;
        float _3085 = _807 + (-0.5);
        _3087 = cbMtdParam._m0[1u];
        _3089 = _3087.y * _3085;
        float _3092 = (_3067 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3093 = _3092 * (_3068 ? _3076 : (_3076 + (cbSceneParam._m0[72u].w * _3049)));
        _3094 = _3092 * (_3068 ? _3077 : (_3077 + (cbSceneParam._m0[72u].w * _3051)));
        _3095 = _3092 * (_3068 ? _3078 : (_3078 + (cbSceneParam._m0[72u].w * _3053)));
        _3096 = _3085 * 0.999000012874603271484375;
        _3106 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3106)
        {
            if ((cbInstanceData._m0[_253 + 7u].x + _3096) < 0.5)
            {
                _3262 = true;
                break;
            }
        }
        uint _3203 = _856 + uint(_3065.w);
        if ((cbInstanceData._m0[_3203].w < 1.0) && ((cbInstanceData._m0[_3203].w + _3096) < 0.5))
        {
            _3262 = true;
            break;
        }
        if ((_3089 + 1.0) < _3087.x)
        {
            _3262 = true;
            break;
        }
        _3262 = false;
        break;
    }
    float _3466;
    if (_3262)
    {
        discard_state = true;
        _3466 = 0.0;
    }
    else
    {
        _3466 = cbInstanceData._m0[_2949].w;
    }
    SV_Target.x = _3093;
    SV_Target.y = _3094;
    SV_Target.z = _3095;
    SV_Target.w = _3466;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2949].w;
    discard_exit();
}


