#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_6;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1128;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _202 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _203 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _204 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _210 = inversesqrt(dot(vec3(_202, _203, _204), vec3(_202, _203, _204)));
    float _211 = _210 * _202;
    float _212 = _210 * _203;
    float _213 = _210 * _204;
    float _217 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _218 = _217 * NORMAL.x;
    float _219 = _217 * NORMAL.y;
    float _220 = _217 * NORMAL.z;
    float _224 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _225 = _224 * TANGENT.x;
    float _226 = _224 * TANGENT.y;
    float _227 = _224 * TANGENT.z;
    uint _230 = uint(roundEven(NORMAL.w)) * 13u;
    uint _236 = _230 + 1u;
    uint _240 = _230 + 2u;
    float _249 = sqrt(((cbInstanceData._m0[_236].x * cbInstanceData._m0[_236].x) + (cbInstanceData._m0[_230].x * cbInstanceData._m0[_230].x)) + (cbInstanceData._m0[_240].x * cbInstanceData._m0[_240].x));
    float _250 = _249 * TEXCOORD.z;
    float _251 = _249 * TEXCOORD.w;
    vec4 _271 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _277 = _271.x * cbMtdParam._m0[11u].x;
    float _278 = _271.y * cbMtdParam._m0[11u].y;
    float _279 = _271.z * cbMtdParam._m0[11u].z;
    vec4 _298 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _250) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _251) + cbTextureTilingScale._m0[5u].w));
    vec4 _352 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _354 = _352.x;
    float _366 = dot(vec4(_354, _352.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _383 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w)).x) * 2.0) - ((((_354 - _366) * cbMtdParam._m0[24u].z) + _366) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3459 = isnan(0.0) ? _383 : (isnan(_383) ? 0.0 : max(_383, 0.0));
    float _384 = isnan(1.0) ? _3459 : (isnan(_3459) ? 1.0 : min(_3459, 1.0));
    float _391 = (_384 * ((_298.x * cbMtdParam._m0[12u].x) - _277)) + _277;
    float _392 = (_384 * ((_298.y * cbMtdParam._m0[12u].y) - _278)) + _278;
    float _393 = (_384 * ((_298.z * cbMtdParam._m0[12u].z) - _279)) + _279;
    vec4 _411 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _250) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _251) + cbTextureTilingScale._m0[4u].w));
    vec4 _428 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _430 = _428.x;
    float _431 = _428.y;
    float _432 = _428.z;
    float _441 = ((_411.z - _432) * _384) + _432;
    float _444 = ((((_411.x - _430) * _384) + _430) * 2.0) + (-1.0);
    float _446 = ((((_411.y - _431) * _384) + _431) * 2.0) + (-1.0);
    float _447 = dot(vec2(_444, _446), vec2(_444, _446));
    float _3470 = isnan(0.0) ? _447 : (isnan(_447) ? 0.0 : max(_447, 0.0));
    float _452 = sqrt(1.0 - (isnan(1.0) ? _3470 : (isnan(_3470) ? 1.0 : min(_3470, 1.0))));
    vec4 _468 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _480 = (((_468.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _444;
    float _481 = (((_468.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _446;
    float _484 = fma(_452, _218, fma(_481, _225, _480 * _211));
    float _487 = fma(_452, _219, fma(_481, _226, _480 * _212));
    float _490 = fma(_452, _220, fma(_481, _227, _480 * _213));
    float _494 = inversesqrt(dot(vec3(_484, _487, _490), vec3(_484, _487, _490)));
    vec4 _521 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _250) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _251) + cbTextureTilingScale._m0[11u].w));
    float _523 = _521.x;
    float _524 = 1.0 - _523;
    float _530 = (cbMtdParam._m0[19u].x + dot(vec4(_494 * _484, _494 * _487, _494 * _490, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_523 - _524) * cbMtdParam._m0[24u].w) + _524) * cbMtdParam._m0[21u].z);
    float _3481 = isnan(0.0) ? _530 : (isnan(_530) ? 0.0 : max(_530, 0.0));
    float _531 = isnan(1.0) ? _3481 : (isnan(_3481) ? 1.0 : min(_3481, 1.0));
    float _538 = (_531 * (cbMtdParam._m0[17u].x - _391)) + _391;
    float _539 = (_531 * (cbMtdParam._m0[17u].y - _392)) + _392;
    float _540 = (_531 * (cbMtdParam._m0[17u].z - _393)) + _393;
    float _544 = (cbMtdParam._m0[19u].w * (_468.z - _441)) + _441;
    vec4 _557 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _250) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _251) + cbTextureTilingScale._m0[15u].w));
    float _564 = (_557.x * 2.0) + (-1.0);
    float _565 = (_557.y * 2.0) + (-1.0);
    float _566 = dot(vec2(_564, _565), vec2(_564, _565));
    float _3492 = isnan(0.0) ? _566 : (isnan(_566) ? 0.0 : max(_566, 0.0));
    float _574 = ((_557.z - _544) * _531) + _544;
    float _584 = ((sqrt(1.0 - (isnan(1.0) ? _3492 : (isnan(_3492) ? 1.0 : min(_3492, 1.0)))) - _452) * _531) + _452;
    float _587 = (((_564 - _480) * _531) + _480) + (cbMtdParam._m0[21u].x * _480);
    float _588 = (((_565 - _481) * _531) + _481) + (cbMtdParam._m0[21u].x * _481);
    float _592 = cbMtdParam._m0[22u].x + _468.w;
    float _595 = fma(_584, _218, fma(_588, _225, _587 * _211));
    float _598 = fma(_584, _219, fma(_588, _226, _587 * _212));
    float _601 = fma(_584, _220, fma(_588, _227, _587 * _213));
    float _605 = inversesqrt(dot(vec3(_595, _598, _601), vec3(_595, _598, _601)));
    float _606 = _605 * _595;
    float _607 = _605 * _598;
    float _608 = _605 * _601;
    float _3503 = isnan(0.0) ? _574 : (isnan(_574) ? 0.0 : max(_574, 0.0));
    float _609 = isnan(1.0) ? _3503 : (isnan(_3503) ? 1.0 : min(_3503, 1.0));
    float _3514 = isnan(0.0) ? _592 : (isnan(_592) ? 0.0 : max(_592, 0.0));
    float _3525 = isnan(0.0) ? _538 : (isnan(_538) ? 0.0 : max(_538, 0.0));
    float _3536 = isnan(0.0) ? _539 : (isnan(_539) ? 0.0 : max(_539, 0.0));
    float _3547 = isnan(0.0) ? _540 : (isnan(_540) ? 0.0 : max(_540, 0.0));
    float _627 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _669 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _679 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _669);
    float _680 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _669);
    float _681 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _669);
    float _685 = inversesqrt(dot(vec3(_679, _680, _681), vec3(_679, _680, _681)));
    float _686 = _679 * _685;
    float _687 = _680 * _685;
    float _688 = _681 * _685;
    float _694 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _695 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _713 = fma(_608, cbSceneParam._m0[5u].z, fma(_607, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _606));
    float _716 = fma(_608, cbSceneParam._m0[6u].z, fma(_607, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _606));
    float _719 = fma(_608, cbSceneParam._m0[7u].z, fma(_607, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _606));
    uint _733 = (_230 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _739 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3525 : (isnan(_3525) ? 1.0 : min(_3525, 1.0)))) * cbInstanceData._m0[_733].x;
    float _740 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3536 : (isnan(_3536) ? 1.0 : min(_3536, 1.0)))) * cbInstanceData._m0[_733].y;
    float _741 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3547 : (isnan(_3547) ? 1.0 : min(_3547, 1.0)))) * cbInstanceData._m0[_733].z;
    float _3558 = isnan(0.0) ? _739 : (isnan(_739) ? 0.0 : max(_739, 0.0));
    float _742 = isnan(1.0) ? _3558 : (isnan(_3558) ? 1.0 : min(_3558, 1.0));
    float _3569 = isnan(0.0) ? _740 : (isnan(_740) ? 0.0 : max(_740, 0.0));
    float _743 = isnan(1.0) ? _3569 : (isnan(_3569) ? 1.0 : min(_3569, 1.0));
    float _3580 = isnan(0.0) ? _741 : (isnan(_741) ? 0.0 : max(_741, 0.0));
    float _744 = isnan(1.0) ? _3580 : (isnan(_3580) ? 1.0 : min(_3580, 1.0));
    vec4 _753 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _694, cbSceneParam._m0[86u].y * _695));
    float _757 = ((isnan(1.0) ? _3514 : (isnan(_3514) ? 1.0 : min(_3514, 1.0))) * TEXCOORD_5.w) * _753.x;
    float _758 = dot(vec3(_606, _607, _608), vec3(_686, _687, _688));
    float _761 = _758 * 2.0;
    float _765 = (_761 * _606) - _686;
    float _766 = (_761 * _607) - _687;
    float _767 = (_761 * _608) - _688;
    float _771 = abs(dot(vec3(_686, _687, _688), vec3(_606, _607, _608)));
    float _3591 = isnan(0.0) ? _771 : (isnan(_771) ? 0.0 : max(_771, 0.0));
    float _773 = sqrt(_609);
    float _786 = exp2((_773 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3591 : (isnan(_3591) ? 1.0 : min(_3591, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_773 * 3.0));
    float _818 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _822 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _826 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1127;
    float _1129;
    float _1130;
    float _1131;
    float _1132;
    float _1133;
    float _1134;
    float _1135;
    float _1136;
    float _1137;
    float _1138;
    float _1139;
    float _1140;
    float _1141;
    float _1142;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _852 = fma(_826, cbModelParam._m0[26u].z, fma(_822, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _818));
        float _856 = fma(_826, cbModelParam._m0[27u].z, fma(_822, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _818));
        float _860 = fma(_826, cbModelParam._m0[28u].z, fma(_822, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _818));
        float _885 = _818 + _606;
        float _886 = _822 + _607;
        float _887 = _826 + _608;
        float _897 = fma(_887, cbModelParam._m0[26u].z, fma(_886, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _885)) - _852;
        float _898 = fma(_887, cbModelParam._m0[27u].z, fma(_886, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _885)) - _856;
        float _899 = fma(_887, cbModelParam._m0[28u].z, fma(_886, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _885)) - _860;
        float _903 = inversesqrt(dot(vec3(_897, _898, _899), vec3(_897, _898, _899)));
        float _916 = ((_903 * _897) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_852 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _917 = ((_903 * _898) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_856 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _918 = ((_903 * _899) / cbModelParam._m0[34u].z) + ((((((_860 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _921 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_916, _917, _918), 0.0);
        vec4 _928 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_916, _917, _918), 0.0);
        vec4 _935 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_916, _917, _918), 0.0);
        vec4 _942 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_916, _917, _918), 0.0);
        float _955 = exp2((_921.w + (-0.5)) * 20.0) * 2.0;
        float _956 = _955 * (_921.x + (-0.5));
        float _957 = _955 * (_921.y + (-0.5));
        float _958 = _955 * (_921.z + (-0.5));
        float _965 = exp2((_928.w + (-0.5)) * 20.0) * 2.0;
        float _966 = _965 * (_928.x + (-0.5));
        float _967 = _965 * (_928.y + (-0.5));
        float _968 = _965 * (_928.z + (-0.5));
        float _975 = exp2((_935.w + (-0.5)) * 20.0) * 2.0;
        float _976 = _975 * (_935.x + (-0.5));
        float _977 = _975 * (_935.y + (-0.5));
        float _978 = _975 * (_935.z + (-0.5));
        float _985 = exp2((_942.w + (-0.5)) * 20.0) * 2.0;
        float _986 = _985 * (_942.x + (-0.5));
        float _987 = _985 * (_942.y + (-0.5));
        float _988 = _985 * (_942.z + (-0.5));
        float _989 = isnan(0.0) ? _986 : (isnan(_986) ? 0.0 : max(_986, 0.0));
        float _990 = isnan(0.0) ? _987 : (isnan(_987) ? 0.0 : max(_987, 0.0));
        float _991 = isnan(0.0) ? _988 : (isnan(_988) ? 0.0 : max(_988, 0.0));
        float _992 = _956 * 0.5;
        float _993 = _966 * 0.5;
        float _994 = _976 * 0.5;
        float _995 = dot(vec3(_992, _993, _994), vec3(_992, _993, _994));
        float _1000 = (_995 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_995);
        float _1009 = (dot(vec3(_606, _607, _608), vec3(_1000 * _992, _1000 * _993, _1000 * _994)) + 1.0) * 0.5;
        float _3617 = isnan(0.0) ? _1009 : (isnan(_1009) ? 0.0 : max(_1009, 0.0));
        float _1019 = sqrt(((_993 * _993) + (_992 * _992)) + (_994 * _994)) / (_989 + 9.9999997473787516355514526367188e-06);
        float _3628 = isnan(0.0) ? _1019 : (isnan(_1019) ? 0.0 : max(_1019, 0.0));
        float _1020 = isnan(1.0) ? _3628 : (isnan(_3628) ? 1.0 : min(_3628, 1.0));
        float _1021 = _1020 * 2.0;
        float _1025 = (1.0 - _1020) / (_1020 + 1.0);
        float _3639 = isnan(0.0) ? _1025 : (isnan(_1025) ? 0.0 : max(_1025, 0.0));
        float _1026 = isnan(1.0) ? _3639 : (isnan(_3639) ? 1.0 : min(_3639, 1.0));
        float _1035 = ((((1.0 - _1026) * (_1021 + 2.0)) * exp2(log2(isnan(1.0) ? _3617 : (isnan(_3617) ? 1.0 : min(_3617, 1.0))) * (_1021 + 1.0))) + _1026) * _989;
        float _1036 = _957 * 0.5;
        float _1037 = _967 * 0.5;
        float _1038 = _977 * 0.5;
        float _1039 = dot(vec3(_1036, _1037, _1038), vec3(_1036, _1037, _1038));
        float _1044 = (_1039 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1039);
        float _1052 = (dot(vec3(_606, _607, _608), vec3(_1044 * _1036, _1044 * _1037, _1044 * _1038)) + 1.0) * 0.5;
        float _3650 = isnan(0.0) ? _1052 : (isnan(_1052) ? 0.0 : max(_1052, 0.0));
        float _1061 = sqrt(((_1037 * _1037) + (_1036 * _1036)) + (_1038 * _1038)) / (_990 + 9.9999997473787516355514526367188e-06);
        float _3661 = isnan(0.0) ? _1061 : (isnan(_1061) ? 0.0 : max(_1061, 0.0));
        float _1062 = isnan(1.0) ? _3661 : (isnan(_3661) ? 1.0 : min(_3661, 1.0));
        float _1063 = _1062 * 2.0;
        float _1067 = (1.0 - _1062) / (_1062 + 1.0);
        float _3672 = isnan(0.0) ? _1067 : (isnan(_1067) ? 0.0 : max(_1067, 0.0));
        float _1068 = isnan(1.0) ? _3672 : (isnan(_3672) ? 1.0 : min(_3672, 1.0));
        float _1077 = ((((1.0 - _1068) * (_1063 + 2.0)) * exp2(log2(isnan(1.0) ? _3650 : (isnan(_3650) ? 1.0 : min(_3650, 1.0))) * (_1063 + 1.0))) + _1068) * _990;
        float _1078 = _958 * 0.5;
        float _1079 = _968 * 0.5;
        float _1080 = _978 * 0.5;
        float _1081 = dot(vec3(_1078, _1079, _1080), vec3(_1078, _1079, _1080));
        float _1086 = (_1081 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1081);
        float _1094 = (dot(vec3(_606, _607, _608), vec3(_1086 * _1078, _1086 * _1079, _1086 * _1080)) + 1.0) * 0.5;
        float _3683 = isnan(0.0) ? _1094 : (isnan(_1094) ? 0.0 : max(_1094, 0.0));
        float _1103 = sqrt(((_1079 * _1079) + (_1078 * _1078)) + (_1080 * _1080)) / (_991 + 9.9999997473787516355514526367188e-06);
        float _3694 = isnan(0.0) ? _1103 : (isnan(_1103) ? 0.0 : max(_1103, 0.0));
        float _1104 = isnan(1.0) ? _3694 : (isnan(_3694) ? 1.0 : min(_3694, 1.0));
        float _1105 = _1104 * 2.0;
        float _1109 = (1.0 - _1104) / (_1104 + 1.0);
        float _3705 = isnan(0.0) ? _1109 : (isnan(_1109) ? 0.0 : max(_1109, 0.0));
        float _1110 = isnan(1.0) ? _3705 : (isnan(_3705) ? 1.0 : min(_3705, 1.0));
        float _1119 = ((((1.0 - _1110) * (_1105 + 2.0)) * exp2(log2(isnan(1.0) ? _3683 : (isnan(_3683) ? 1.0 : min(_3683, 1.0))) * (_1105 + 1.0))) + _1110) * _991;
        _1127 = _958;
        _1129 = _957;
        _1130 = _956;
        _1131 = _968;
        _1132 = _967;
        _1133 = _966;
        _1134 = _978;
        _1135 = _977;
        _1136 = _976;
        _1137 = _991;
        _1138 = _990;
        _1139 = _989;
        _1140 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1035 : (isnan(_1035) ? 0.0 : max(_1035, 0.0)));
        _1141 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1077 : (isnan(_1077) ? 0.0 : max(_1077, 0.0)));
        _1142 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1119 : (isnan(_1119) ? 0.0 : max(_1119, 0.0)));
    }
    else
    {
        _1127 = _1128;
        _1129 = _1128;
        _1130 = _1128;
        _1131 = _1128;
        _1132 = _1128;
        _1133 = _1128;
        _1134 = _1128;
        _1135 = _1128;
        _1136 = _1128;
        _1137 = _1128;
        _1138 = _1128;
        _1139 = _1128;
        _1140 = 0.0;
        _1141 = 0.0;
        _1142 = 0.0;
    }
    float _1436;
    float _1437;
    float _1438;
    float _1439;
    float _1440;
    float _1441;
    float _1442;
    float _1443;
    float _1444;
    float _1445;
    float _1446;
    float _1447;
    float _1448;
    float _1449;
    float _1450;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1167 = fma(_826, cbModelParam._m0[30u].z, fma(_822, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _818));
        float _1171 = fma(_826, cbModelParam._m0[31u].z, fma(_822, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _818));
        float _1175 = fma(_826, cbModelParam._m0[32u].z, fma(_822, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _818));
        float _1198 = _818 + _606;
        float _1199 = _822 + _607;
        float _1200 = _826 + _608;
        float _1210 = fma(_1200, cbModelParam._m0[30u].z, fma(_1199, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1198)) - _1167;
        float _1211 = fma(_1200, cbModelParam._m0[31u].z, fma(_1199, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1198)) - _1171;
        float _1212 = fma(_1200, cbModelParam._m0[32u].z, fma(_1199, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1198)) - _1175;
        float _1216 = inversesqrt(dot(vec3(_1210, _1211, _1212), vec3(_1210, _1211, _1212)));
        float _1229 = ((_1216 * _1210) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1167 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1230 = ((_1216 * _1211) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1171 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1231 = ((_1216 * _1212) / cbModelParam._m0[35u].z) + ((((((_1175 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1233 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1229, _1230, _1231), 0.0);
        vec4 _1240 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1229, _1230, _1231), 0.0);
        vec4 _1247 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1229, _1230, _1231), 0.0);
        vec4 _1254 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1229, _1230, _1231), 0.0);
        float _1266 = exp2((_1233.w + (-0.5)) * 20.0) * 2.0;
        float _1267 = _1266 * (_1233.x + (-0.5));
        float _1268 = _1266 * (_1233.y + (-0.5));
        float _1269 = _1266 * (_1233.z + (-0.5));
        float _1276 = exp2((_1240.w + (-0.5)) * 20.0) * 2.0;
        float _1277 = _1276 * (_1240.x + (-0.5));
        float _1278 = _1276 * (_1240.y + (-0.5));
        float _1279 = _1276 * (_1240.z + (-0.5));
        float _1286 = exp2((_1247.w + (-0.5)) * 20.0) * 2.0;
        float _1287 = _1286 * (_1247.x + (-0.5));
        float _1288 = _1286 * (_1247.y + (-0.5));
        float _1289 = _1286 * (_1247.z + (-0.5));
        float _1296 = exp2((_1254.w + (-0.5)) * 20.0) * 2.0;
        float _1297 = _1296 * (_1254.x + (-0.5));
        float _1298 = _1296 * (_1254.y + (-0.5));
        float _1299 = _1296 * (_1254.z + (-0.5));
        float _1300 = isnan(0.0) ? _1297 : (isnan(_1297) ? 0.0 : max(_1297, 0.0));
        float _1301 = isnan(0.0) ? _1298 : (isnan(_1298) ? 0.0 : max(_1298, 0.0));
        float _1302 = isnan(0.0) ? _1299 : (isnan(_1299) ? 0.0 : max(_1299, 0.0));
        float _1303 = _1267 * 0.5;
        float _1304 = _1277 * 0.5;
        float _1305 = _1287 * 0.5;
        float _1306 = dot(vec3(_1303, _1304, _1305), vec3(_1303, _1304, _1305));
        float _1311 = (_1306 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1306);
        float _1319 = (dot(vec3(_606, _607, _608), vec3(_1311 * _1303, _1311 * _1304, _1311 * _1305)) + 1.0) * 0.5;
        float _3746 = isnan(0.0) ? _1319 : (isnan(_1319) ? 0.0 : max(_1319, 0.0));
        float _1328 = sqrt(((_1304 * _1304) + (_1303 * _1303)) + (_1305 * _1305)) / (_1300 + 9.9999997473787516355514526367188e-06);
        float _3757 = isnan(0.0) ? _1328 : (isnan(_1328) ? 0.0 : max(_1328, 0.0));
        float _1329 = isnan(1.0) ? _3757 : (isnan(_3757) ? 1.0 : min(_3757, 1.0));
        float _1330 = _1329 * 2.0;
        float _1334 = (1.0 - _1329) / (_1329 + 1.0);
        float _3768 = isnan(0.0) ? _1334 : (isnan(_1334) ? 0.0 : max(_1334, 0.0));
        float _1335 = isnan(1.0) ? _3768 : (isnan(_3768) ? 1.0 : min(_3768, 1.0));
        float _1344 = ((((1.0 - _1335) * (_1330 + 2.0)) * exp2(log2(isnan(1.0) ? _3746 : (isnan(_3746) ? 1.0 : min(_3746, 1.0))) * (_1330 + 1.0))) + _1335) * _1300;
        float _1345 = _1268 * 0.5;
        float _1346 = _1278 * 0.5;
        float _1347 = _1288 * 0.5;
        float _1348 = dot(vec3(_1345, _1346, _1347), vec3(_1345, _1346, _1347));
        float _1353 = (_1348 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1348);
        float _1361 = (dot(vec3(_606, _607, _608), vec3(_1353 * _1345, _1353 * _1346, _1353 * _1347)) + 1.0) * 0.5;
        float _3779 = isnan(0.0) ? _1361 : (isnan(_1361) ? 0.0 : max(_1361, 0.0));
        float _1370 = sqrt(((_1346 * _1346) + (_1345 * _1345)) + (_1347 * _1347)) / (_1301 + 9.9999997473787516355514526367188e-06);
        float _3790 = isnan(0.0) ? _1370 : (isnan(_1370) ? 0.0 : max(_1370, 0.0));
        float _1371 = isnan(1.0) ? _3790 : (isnan(_3790) ? 1.0 : min(_3790, 1.0));
        float _1372 = _1371 * 2.0;
        float _1376 = (1.0 - _1371) / (_1371 + 1.0);
        float _3801 = isnan(0.0) ? _1376 : (isnan(_1376) ? 0.0 : max(_1376, 0.0));
        float _1377 = isnan(1.0) ? _3801 : (isnan(_3801) ? 1.0 : min(_3801, 1.0));
        float _1386 = ((((1.0 - _1377) * (_1372 + 2.0)) * exp2(log2(isnan(1.0) ? _3779 : (isnan(_3779) ? 1.0 : min(_3779, 1.0))) * (_1372 + 1.0))) + _1377) * _1301;
        float _1387 = _1269 * 0.5;
        float _1388 = _1279 * 0.5;
        float _1389 = _1289 * 0.5;
        float _1390 = dot(vec3(_1387, _1388, _1389), vec3(_1387, _1388, _1389));
        float _1395 = (_1390 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1390);
        float _1403 = (dot(vec3(_606, _607, _608), vec3(_1395 * _1387, _1395 * _1388, _1395 * _1389)) + 1.0) * 0.5;
        float _3812 = isnan(0.0) ? _1403 : (isnan(_1403) ? 0.0 : max(_1403, 0.0));
        float _1412 = sqrt(((_1388 * _1388) + (_1387 * _1387)) + (_1389 * _1389)) / (_1302 + 9.9999997473787516355514526367188e-06);
        float _3823 = isnan(0.0) ? _1412 : (isnan(_1412) ? 0.0 : max(_1412, 0.0));
        float _1413 = isnan(1.0) ? _3823 : (isnan(_3823) ? 1.0 : min(_3823, 1.0));
        float _1414 = _1413 * 2.0;
        float _1418 = (1.0 - _1413) / (_1413 + 1.0);
        float _3834 = isnan(0.0) ? _1418 : (isnan(_1418) ? 0.0 : max(_1418, 0.0));
        float _1419 = isnan(1.0) ? _3834 : (isnan(_3834) ? 1.0 : min(_3834, 1.0));
        float _1428 = ((((1.0 - _1419) * (_1414 + 2.0)) * exp2(log2(isnan(1.0) ? _3812 : (isnan(_3812) ? 1.0 : min(_3812, 1.0))) * (_1414 + 1.0))) + _1419) * _1302;
        _1436 = _1269;
        _1437 = _1268;
        _1438 = _1267;
        _1439 = _1279;
        _1440 = _1278;
        _1441 = _1277;
        _1442 = _1289;
        _1443 = _1288;
        _1444 = _1287;
        _1445 = _1302;
        _1446 = _1301;
        _1447 = _1300;
        _1448 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1344 : (isnan(_1344) ? 0.0 : max(_1344, 0.0)));
        _1449 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1386 : (isnan(_1386) ? 0.0 : max(_1386, 0.0)));
        _1450 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1428 : (isnan(_1428) ? 0.0 : max(_1428, 0.0)));
    }
    else
    {
        _1436 = _1128;
        _1437 = _1128;
        _1438 = _1128;
        _1439 = _1128;
        _1440 = _1128;
        _1441 = _1128;
        _1442 = _1128;
        _1443 = _1128;
        _1444 = _1128;
        _1445 = _1128;
        _1446 = _1128;
        _1447 = _1128;
        _1448 = 0.0;
        _1449 = 0.0;
        _1450 = 0.0;
    }
    float _1460 = (cbModelParam._m0[1u].x * (_1448 - _1140)) + _1140;
    float _1461 = (cbModelParam._m0[1u].x * (_1449 - _1141)) + _1141;
    float _1462 = (cbModelParam._m0[1u].x * (_1450 - _1142)) + _1142;
    float _1483 = fma(_1462, cbSceneParam._m0[89u].z, fma(_1461, cbSceneParam._m0[89u].y, _1460 * cbSceneParam._m0[89u].x));
    float _1486 = fma(_1462, cbSceneParam._m0[90u].z, fma(_1461, cbSceneParam._m0[90u].y, _1460 * cbSceneParam._m0[90u].x));
    float _1489 = fma(_1462, cbSceneParam._m0[91u].z, fma(_1461, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1460));
    float _1504 = _765 * 0.5;
    float _1505 = _766 * 0.5;
    float _1506 = _767 * 0.5;
    float _1507 = dot(vec4(_1504, _1505, _1506, 1.0), vec4(_1438, _1441, _1444, _1447));
    float _1510 = dot(vec4(_1504, _1505, _1506, 1.0), vec4(_1437, _1440, _1443, _1446));
    float _1513 = dot(vec4(_1504, _1505, _1506, 1.0), vec4(_1436, _1439, _1442, _1445));
    float _1547;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1520 = dot(vec4(_1504, _1505, _1506, 1.0), vec4(_1127, _1131, _1134, _1137));
        float _1524 = dot(vec4(_1504, _1505, _1506, 1.0), vec4(_1129, _1132, _1135, _1138));
        float _1528 = dot(vec4(_1504, _1505, _1506, 1.0), vec4(_1130, _1133, _1136, _1139));
        float _1535 = dot(vec4(cbModelParam._m0[39u]), vec4(_1504, _1505, _1506, 1.0));
        _1547 = dot(vec3(isnan(0.0) ? _1528 : (isnan(_1528) ? 0.0 : max(_1528, 0.0)), isnan(0.0) ? _1524 : (isnan(_1524) ? 0.0 : max(_1524, 0.0)), isnan(0.0) ? _1520 : (isnan(_1520) ? 0.0 : max(_1520, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1535) ? 0.0 : (isnan(0.0) ? _1535 : max(0.0, _1535))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1547 = 1.0;
    }
    float _1558;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1549 = dot(vec4(cbModelParam._m0[40u]), vec4(_1504, _1505, _1506, 1.0));
        _1558 = dot(vec3(isnan(0.0) ? _1507 : (isnan(_1507) ? 0.0 : max(_1507, 0.0)), isnan(0.0) ? _1510 : (isnan(_1510) ? 0.0 : max(_1510, 0.0)), isnan(0.0) ? _1513 : (isnan(_1513) ? 0.0 : max(_1513, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1549) ? 0.0 : (isnan(0.0) ? _1549 : max(0.0, _1549))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1558 = 1.0;
    }
    float _1562 = (_1558 * cbModelParam._m0[1u].x) + (_1547 * (1.0 - cbModelParam._m0[1u].x));
    float _1572 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _609);
    float _1573 = isnan(_1572) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1572 : min(cbModelParam._m0[25u].z, _1572));
    float _1654;
    float _1656;
    float _1658;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1621 = fma(_826, cbModelParam._m0[13u].z, fma(_822, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _818)) + cbModelParam._m0[13u].w;
        float _1625 = fma(_826, cbModelParam._m0[14u].z, fma(_822, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _818)) + cbModelParam._m0[14u].w;
        float _1629 = fma(_826, cbModelParam._m0[15u].z, fma(_822, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _818)) + cbModelParam._m0[15u].w;
        float _1632 = fma(_767, cbModelParam._m0[13u].z, fma(_766, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _765));
        float _1635 = fma(_767, cbModelParam._m0[14u].z, fma(_766, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _765));
        float _1638 = fma(_767, cbModelParam._m0[15u].z, fma(_766, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _765));
        float _1666;
        if (_1632 > 0.0)
        {
            _1666 = abs((1.0 - _1621) / _1632);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1632 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1621 + 1.0) / _1632);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1666 = frontier_phi_14_12_ladder;
        }
        float _1888;
        if (_1635 > 0.0)
        {
            _1888 = abs((1.0 - _1625) / _1635);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1635 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1625 + 1.0) / _1635);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1888 = frontier_phi_23_19_ladder;
        }
        float _2134;
        if (_1638 > 0.0)
        {
            _2134 = abs((1.0 - _1629) / _1638);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1638 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1629 + 1.0) / _1638);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2134 = frontier_phi_35_30_ladder;
        }
        float _2136 = isnan(_1888) ? _1666 : (isnan(_1666) ? _1888 : min(_1666, _1888));
        float _2137 = isnan(_2134) ? _2136 : (isnan(_2136) ? _2134 : min(_2136, _2134));
        float _2141 = (_2137 * _1632) + _1621;
        float _2142 = (_2137 * _1635) + _1625;
        float _2143 = (_2137 * _1638) + _1629;
        float _2144 = _2137 * 9.9999997473787516355514526367188e-05;
        float _2146 = (-1.0) - _2144;
        float _2148 = _2144 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2143 > _2148) || ((_2143 < _2146) || ((_2142 > _2148) || ((_2142 < _2146) || ((_2141 < _2146) || (_2141 > _2148))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2267 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2143, cbModelParam._m0[9u].z, fma(_2142, cbModelParam._m0[9u].y, _2141 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2143, cbModelParam._m0[10u].z, fma(_2142, cbModelParam._m0[10u].y, _2141 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2143, cbModelParam._m0[11u].z, fma(_2142, cbModelParam._m0[11u].y, _2141 * cbModelParam._m0[11u].x))), _1573);
            frontier_phi_13_35_ladder = _2267.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2267.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2267.x * cbModelParam._m0[1u].y;
        }
        _1654 = frontier_phi_13_35_ladder_2;
        _1656 = frontier_phi_13_35_ladder_1;
        _1658 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1642 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_765, _766, _767), _1573);
        _1654 = _1642.x * cbModelParam._m0[1u].y;
        _1656 = _1642.y * cbModelParam._m0[1u].y;
        _1658 = _1642.z * cbModelParam._m0[1u].y;
    }
    float _1662 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _609);
    float _1663 = isnan(_1662) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1662 : min(cbModelParam._m0[25u].w, _1662));
    float _1753;
    float _1755;
    float _1757;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1717 = fma(_826, cbModelParam._m0[21u].z, fma(_822, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _818)) + cbModelParam._m0[21u].w;
        float _1721 = fma(_826, cbModelParam._m0[22u].z, fma(_822, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _818)) + cbModelParam._m0[22u].w;
        float _1725 = fma(_826, cbModelParam._m0[23u].z, fma(_822, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _818)) + cbModelParam._m0[23u].w;
        float _1728 = fma(_767, cbModelParam._m0[21u].z, fma(_766, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _765));
        float _1731 = fma(_767, cbModelParam._m0[22u].z, fma(_766, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _765));
        float _1734 = fma(_767, cbModelParam._m0[23u].z, fma(_766, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _765));
        float _1893;
        if (_1728 > 0.0)
        {
            _1893 = abs((1.0 - _1717) / _1728);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1728 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1717 + 1.0) / _1728);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1893 = frontier_phi_25_21_ladder;
        }
        float _2161;
        if (_1731 > 0.0)
        {
            _2161 = abs((1.0 - _1721) / _1731);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1731 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1721 + 1.0) / _1731);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2161 = frontier_phi_37_32_ladder;
        }
        float _2366;
        if (_1734 > 0.0)
        {
            _2366 = abs((1.0 - _1725) / _1734);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1734 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1725 + 1.0) / _1734);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2366 = frontier_phi_46_43_ladder;
        }
        float _2368 = isnan(_2161) ? _1893 : (isnan(_1893) ? _2161 : min(_1893, _2161));
        float _2369 = isnan(_2366) ? _2368 : (isnan(_2368) ? _2366 : min(_2368, _2366));
        float _2373 = (_2369 * _1728) + _1717;
        float _2374 = (_2369 * _1731) + _1721;
        float _2375 = (_2369 * _1734) + _1725;
        float _2376 = _2369 * 9.9999997473787516355514526367188e-05;
        float _2377 = (-1.0) - _2376;
        float _2379 = _2376 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2375 > _2379) || ((_2375 < _2377) || ((_2374 > _2379) || ((_2374 < _2377) || ((_2373 < _2377) || (_2373 > _2379))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2574 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2375, cbModelParam._m0[17u].z, fma(_2374, cbModelParam._m0[17u].y, _2373 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2375, cbModelParam._m0[18u].z, fma(_2374, cbModelParam._m0[18u].y, _2373 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2375, cbModelParam._m0[19u].z, fma(_2374, cbModelParam._m0[19u].y, _2373 * cbModelParam._m0[19u].x))), _1663);
            frontier_phi_22_46_ladder = _2574.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2574.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2574.x * cbModelParam._m0[1u].z;
        }
        _1753 = frontier_phi_22_46_ladder_2;
        _1755 = frontier_phi_22_46_ladder_1;
        _1757 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1737 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_765, _766, _767), _1663);
        _1753 = _1737.x * cbModelParam._m0[1u].z;
        _1755 = _1737.y * cbModelParam._m0[1u].z;
        _1757 = _1737.z * cbModelParam._m0[1u].z;
    }
    float _1769 = ((((1.0 - _786) * ((_773 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_786 * _773)) * _757;
    float _1770 = _1769 * ((cbModelParam._m0[1u].w * (_1753 - _1654)) + _1654);
    float _1771 = _1769 * ((cbModelParam._m0[1u].w * (_1755 - _1656)) + _1656);
    float _1772 = _1769 * ((cbModelParam._m0[1u].w * (_1757 - _1658)) + _1658);
    float _1775 = fma(_1772, cbSceneParam._m0[89u].z, fma(_1771, cbSceneParam._m0[89u].y, _1770 * cbSceneParam._m0[89u].x));
    float _1778 = fma(_1772, cbSceneParam._m0[90u].z, fma(_1771, cbSceneParam._m0[90u].y, _1770 * cbSceneParam._m0[90u].x));
    float _1781 = fma(_1772, cbSceneParam._m0[91u].z, fma(_1771, cbSceneParam._m0[91u].y, _1770 * cbSceneParam._m0[91u].x));
    vec4 _1789 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_694, _695));
    float _1791 = _1789.w;
    float _1803 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1791);
    float _1804 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1791);
    float _1805 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1791);
    uvec4 _1809 = floatBitsToUint(cbInstanceData._m0[_230 + 5u]);
    uint _1811 = _1809.x * 14u;
    uint _1812 = _1811 + 13u;
    float _1819 = _757 + (-1.0);
    float _1824 = (cbLight._m0[_1812].x * _1819) + 1.0;
    float _1825 = (cbLight._m0[_1812].y * _1819) + 1.0;
    float _1826 = (cbLight._m0[_1812].z * _1819) + 1.0;
    float _1827 = (cbLight._m0[_1812].w * _1819) + 1.0;
    uint _1828 = _1811 + 5u;
    float _1834 = isnan(1.0) ? _1825 : (isnan(_1825) ? 1.0 : min(_1825, 1.0));
    uint _1838 = _1811 + 4u;
    float _1847 = isnan(1.0) ? _1824 : (isnan(_1824) ? 1.0 : min(_1824, 1.0));
    uint _1851 = _1811 | 1u;
    float _1862 = dot(vec3(cbLight._m0[_1811].xyz), vec3(_606, _607, _608));
    float _1865 = dot(vec3(cbLight._m0[_1851].xyz), vec3(_606, _607, _608));
    float _3970 = isnan(0.0) ? _1862 : (isnan(_1862) ? 0.0 : max(_1862, 0.0));
    float _3981 = isnan(0.0) ? _1865 : (isnan(_1865) ? 0.0 : max(_1865, 0.0));
    float _1870 = (isnan(1.0) ? _3970 : (isnan(_3970) ? 1.0 : min(_3970, 1.0))) * 0.3183098733425140380859375;
    float _1872 = (isnan(1.0) ? _3981 : (isnan(_3981) ? 1.0 : min(_3981, 1.0))) * 0.3183098733425140380859375;
    float _1879 = ((cbLight._m0[_1828].x * _1834) * _1872) + (((cbLight._m0[_1838].x * _1803) * _1847) * _1870);
    float _1880 = ((_1834 * cbLight._m0[_1828].y) * _1872) + (((cbLight._m0[_1838].y * _1804) * _1847) * _1870);
    float _1881 = ((_1834 * cbLight._m0[_1828].z) * _1872) + (((cbLight._m0[_1838].z * _1805) * _1847) * _1870);
    uvec4 _1885 = floatBitsToUint(cbLight._m0[_1811 + 12u]);
    bool _1887 = _1885.x == 0u;
    float _1898;
    float _1900;
    float _1902;
    if (_1887)
    {
        _1898 = _1879;
        _1900 = _1880;
        _1902 = _1881;
    }
    else
    {
        uint _1906 = _1811 + 6u;
        float _1922 = (dot(vec3(cbLight._m0[_1811 + 2u].xyz), vec3(_606, _607, _608)) * 0.5) + 0.5;
        float _1923 = _1922 * _1922;
        float _3992 = isnan(0.0) ? _1923 : (isnan(_1923) ? 0.0 : max(_1923, 0.0));
        float _1924 = isnan(1.0) ? _3992 : (isnan(_3992) ? 1.0 : min(_3992, 1.0));
        float _1925 = isnan(1.0) ? _1826 : (isnan(_1826) ? 1.0 : min(_1826, 1.0));
        _1898 = (((cbLight._m0[_1906].x * 0.3183098733425140380859375) * _1924) * _1925) + _1879;
        _1900 = (((cbLight._m0[_1906].y * 0.3183098733425140380859375) * _1924) * _1925) + _1880;
        _1902 = (((cbLight._m0[_1906].z * 0.3183098733425140380859375) * _1924) * _1925) + _1881;
    }
    bool _1905 = _1885.y == 0u;
    float _1943;
    float _1945;
    float _1947;
    if (_1905)
    {
        _1943 = _1898;
        _1945 = _1900;
        _1947 = _1902;
    }
    else
    {
        uint _2105 = _1811 + 7u;
        float _2121 = (dot(vec3(cbLight._m0[_1811 + 3u].xyz), vec3(_606, _607, _608)) * 0.5) + 0.5;
        float _2122 = _2121 * _2121;
        float _4008 = isnan(0.0) ? _2122 : (isnan(_2122) ? 0.0 : max(_2122, 0.0));
        float _2123 = isnan(1.0) ? _4008 : (isnan(_4008) ? 1.0 : min(_4008, 1.0));
        float _2124 = isnan(1.0) ? _1827 : (isnan(_1827) ? 1.0 : min(_1827, 1.0));
        _1943 = (((cbLight._m0[_2105].x * 0.3183098733425140380859375) * _2123) * _2124) + _1898;
        _1945 = (((cbLight._m0[_2105].y * 0.3183098733425140380859375) * _2123) * _2124) + _1900;
        _1947 = (((cbLight._m0[_2105].z * 0.3183098733425140380859375) * _2123) * _2124) + _1902;
    }
    uint _1950 = _1811 + 8u;
    float _1963 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1811].w)) * _609) * 0.949999988079071044921875);
    float _1964 = _1963 * _1963;
    float _1965 = cbLight._m0[_1811].x + _686;
    float _1966 = cbLight._m0[_1811].y + _687;
    float _1967 = cbLight._m0[_1811].z + _688;
    float _1971 = inversesqrt(dot(vec3(_1965, _1966, _1967), vec3(_1965, _1966, _1967)));
    float _1972 = _1971 * _1965;
    float _1973 = _1971 * _1966;
    float _1974 = _1971 * _1967;
    float _1975 = dot(vec3(_606, _607, _608), vec3(cbLight._m0[_1811].xyz));
    float _4024 = isnan(0.0) ? _1975 : (isnan(_1975) ? 0.0 : max(_1975, 0.0));
    float _1978 = isnan(1.0) ? _4024 : (isnan(_4024) ? 1.0 : min(_4024, 1.0));
    float _4035 = isnan(0.0) ? _758 : (isnan(_758) ? 0.0 : max(_758, 0.0));
    float _1979 = isnan(1.0) ? _4035 : (isnan(_4035) ? 1.0 : min(_4035, 1.0));
    float _1980 = dot(vec3(_606, _607, _608), vec3(_1972, _1973, _1974));
    float _4046 = isnan(0.0) ? _1980 : (isnan(_1980) ? 0.0 : max(_1980, 0.0));
    float _1983 = isnan(1.0) ? _4046 : (isnan(_4046) ? 1.0 : min(_4046, 1.0));
    float _1984 = dot(vec3(cbLight._m0[_1811].xyz), vec3(_1972, _1973, _1974));
    float _4057 = isnan(0.0) ? _1984 : (isnan(_1984) ? 0.0 : max(_1984, 0.0));
    float _1988 = _1964 * _1964;
    float _1992 = ((_1983 * _1983) * (_1988 + (-1.0))) + 1.0;
    float _2003 = (exp2(log2(1.0 - (isnan(1.0) ? _4057 : (isnan(_4057) ? 1.0 : min(_4057, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2004 = 1.0 - _1964;
    float _2015 = (0.5 / (((_1979 * ((_1978 * _2004) + _1964)) + 9.9999999392252902907785028219223e-09) + (((_1979 * _2004) + _1964) * _1978))) * _1978;
    float _4068 = isnan(0.0) ? _2015 : (isnan(_2015) ? 0.0 : max(_2015, 0.0));
    float _2017 = (isnan(1.0) ? _4068 : (isnan(_4068) ? 1.0 : min(_4068, 1.0))) * (_1988 / ((_1992 * _1992) * 3.141590118408203125));
    uint _2031 = _1811 + 9u;
    float _2042 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1851].w)) * _609) * 0.949999988079071044921875);
    float _2043 = _2042 * _2042;
    float _2044 = cbLight._m0[_1851].x + _686;
    float _2045 = cbLight._m0[_1851].y + _687;
    float _2046 = cbLight._m0[_1851].z + _688;
    float _2050 = inversesqrt(dot(vec3(_2044, _2045, _2046), vec3(_2044, _2045, _2046)));
    float _2051 = _2050 * _2044;
    float _2052 = _2050 * _2045;
    float _2053 = _2050 * _2046;
    float _2054 = dot(vec3(_606, _607, _608), vec3(cbLight._m0[_1851].xyz));
    float _4079 = isnan(0.0) ? _2054 : (isnan(_2054) ? 0.0 : max(_2054, 0.0));
    float _2057 = isnan(1.0) ? _4079 : (isnan(_4079) ? 1.0 : min(_4079, 1.0));
    float _2058 = dot(vec3(_606, _607, _608), vec3(_2051, _2052, _2053));
    float _4090 = isnan(0.0) ? _2058 : (isnan(_2058) ? 0.0 : max(_2058, 0.0));
    float _2061 = isnan(1.0) ? _4090 : (isnan(_4090) ? 1.0 : min(_4090, 1.0));
    float _2062 = dot(vec3(cbLight._m0[_1851].xyz), vec3(_2051, _2052, _2053));
    float _4101 = isnan(0.0) ? _2062 : (isnan(_2062) ? 0.0 : max(_2062, 0.0));
    float _2066 = _2043 * _2043;
    float _2070 = ((_2061 * _2061) * (_2066 + (-1.0))) + 1.0;
    float _2079 = (exp2(log2(1.0 - (isnan(1.0) ? _4101 : (isnan(_4101) ? 1.0 : min(_4101, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2080 = 1.0 - _2043;
    float _2090 = (0.5 / (((_1979 * ((_2057 * _2080) + _2043)) + 9.9999999392252902907785028219223e-09) + (((_1979 * _2080) + _2043) * _2057))) * _2057;
    float _4112 = isnan(0.0) ? _2090 : (isnan(_2090) ? 0.0 : max(_2090, 0.0));
    float _2092 = (isnan(1.0) ? _4112 : (isnan(_4112) ? 1.0 : min(_4112, 1.0))) * (_2066 / ((_2070 * _2070) * 3.141590118408203125));
    float _2102 = (((_2079 * cbLight._m0[_2031].x) * _2092) * _1834) + ((((cbLight._m0[_1950].x * _1803) * _2003) * _2017) * _1847);
    float _2103 = (((_2079 * cbLight._m0[_2031].y) * _2092) * _1834) + ((((cbLight._m0[_1950].y * _1804) * _2003) * _2017) * _1847);
    float _2104 = (((_2079 * cbLight._m0[_2031].z) * _2092) * _1834) + ((((cbLight._m0[_1950].z * _1805) * _2003) * _2017) * _1847);
    float _2166;
    float _2168;
    float _2170;
    if (_1887)
    {
        _2166 = _2102;
        _2168 = _2103;
        _2170 = _2104;
    }
    else
    {
        uint _2172 = _1811 + 2u;
        uint _2176 = _1811 + 10u;
        float _2190 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2172].w)) * _609) * 0.949999988079071044921875);
        float _2191 = _2190 * _2190;
        float _2192 = cbLight._m0[_2172].x + _686;
        float _2193 = cbLight._m0[_2172].y + _687;
        float _2194 = cbLight._m0[_2172].z + _688;
        float _2198 = inversesqrt(dot(vec3(_2192, _2193, _2194), vec3(_2192, _2193, _2194)));
        float _2199 = _2198 * _2192;
        float _2200 = _2198 * _2193;
        float _2201 = _2198 * _2194;
        float _2202 = dot(vec3(_606, _607, _608), vec3(cbLight._m0[_2172].xyz));
        float _4123 = isnan(0.0) ? _2202 : (isnan(_2202) ? 0.0 : max(_2202, 0.0));
        float _2205 = isnan(1.0) ? _4123 : (isnan(_4123) ? 1.0 : min(_4123, 1.0));
        float _2206 = dot(vec3(_606, _607, _608), vec3(_2199, _2200, _2201));
        float _4134 = isnan(0.0) ? _2206 : (isnan(_2206) ? 0.0 : max(_2206, 0.0));
        float _2209 = isnan(1.0) ? _4134 : (isnan(_4134) ? 1.0 : min(_4134, 1.0));
        float _2210 = dot(vec3(cbLight._m0[_2172].xyz), vec3(_2199, _2200, _2201));
        float _4145 = isnan(0.0) ? _2210 : (isnan(_2210) ? 0.0 : max(_2210, 0.0));
        float _2214 = _2191 * _2191;
        float _2218 = ((_2209 * _2209) * (_2214 + (-1.0))) + 1.0;
        float _2227 = (exp2(log2(1.0 - (isnan(1.0) ? _4145 : (isnan(_4145) ? 1.0 : min(_4145, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2228 = 1.0 - _2191;
        float _2238 = (0.5 / (((_1979 * ((_2205 * _2228) + _2191)) + 9.9999999392252902907785028219223e-09) + (((_1979 * _2228) + _2191) * _2205))) * _2205;
        float _4156 = isnan(0.0) ? _2238 : (isnan(_2238) ? 0.0 : max(_2238, 0.0));
        float _2240 = (isnan(1.0) ? _4156 : (isnan(_4156) ? 1.0 : min(_4156, 1.0))) * (_2214 / ((_2218 * _2218) * 3.141590118408203125));
        float _2241 = isnan(1.0) ? _1826 : (isnan(_1826) ? 1.0 : min(_1826, 1.0));
        _2166 = (((_2227 * cbLight._m0[_2176].x) * _2240) * _2241) + _2102;
        _2168 = (((_2227 * cbLight._m0[_2176].y) * _2240) * _2241) + _2103;
        _2170 = (((_2227 * cbLight._m0[_2176].z) * _2240) * _2241) + _2104;
    }
    float _2276;
    float _2278;
    float _2280;
    if (_1905)
    {
        _2276 = _2166;
        _2278 = _2168;
        _2280 = _2170;
    }
    else
    {
        uint _2287 = _1811 + 3u;
        uint _2291 = _1811 + 11u;
        float _2305 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2287].w)) * _609) * 0.949999988079071044921875);
        float _2306 = _2305 * _2305;
        float _2307 = cbLight._m0[_2287].x + _686;
        float _2308 = cbLight._m0[_2287].y + _687;
        float _2309 = cbLight._m0[_2287].z + _688;
        float _2313 = inversesqrt(dot(vec3(_2307, _2308, _2309), vec3(_2307, _2308, _2309)));
        float _2314 = _2313 * _2307;
        float _2315 = _2313 * _2308;
        float _2316 = _2313 * _2309;
        float _2317 = dot(vec3(_606, _607, _608), vec3(cbLight._m0[_2287].xyz));
        float _4172 = isnan(0.0) ? _2317 : (isnan(_2317) ? 0.0 : max(_2317, 0.0));
        float _2320 = isnan(1.0) ? _4172 : (isnan(_4172) ? 1.0 : min(_4172, 1.0));
        float _2321 = dot(vec3(_606, _607, _608), vec3(_2314, _2315, _2316));
        float _4183 = isnan(0.0) ? _2321 : (isnan(_2321) ? 0.0 : max(_2321, 0.0));
        float _2324 = isnan(1.0) ? _4183 : (isnan(_4183) ? 1.0 : min(_4183, 1.0));
        float _2325 = dot(vec3(cbLight._m0[_2287].xyz), vec3(_2314, _2315, _2316));
        float _4194 = isnan(0.0) ? _2325 : (isnan(_2325) ? 0.0 : max(_2325, 0.0));
        float _2329 = _2306 * _2306;
        float _2333 = ((_2324 * _2324) * (_2329 + (-1.0))) + 1.0;
        float _2342 = (exp2(log2(1.0 - (isnan(1.0) ? _4194 : (isnan(_4194) ? 1.0 : min(_4194, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2343 = 1.0 - _2306;
        float _2353 = (0.5 / (((_1979 * ((_2320 * _2343) + _2306)) + 9.9999999392252902907785028219223e-09) + (((_1979 * _2343) + _2306) * _2320))) * _2320;
        float _4205 = isnan(0.0) ? _2353 : (isnan(_2353) ? 0.0 : max(_2353, 0.0));
        float _2355 = (isnan(1.0) ? _4205 : (isnan(_4205) ? 1.0 : min(_4205, 1.0))) * (_2329 / ((_2333 * _2333) * 3.141590118408203125));
        float _2356 = isnan(1.0) ? _1827 : (isnan(_1827) ? 1.0 : min(_1827, 1.0));
        _2276 = (((_2342 * cbLight._m0[_2291].x) * _2355) * _2356) + _2166;
        _2278 = (((_2342 * cbLight._m0[_2291].y) * _2355) * _2356) + _2168;
        _2280 = (((_2342 * cbLight._m0[_2291].z) * _2355) * _2356) + _2170;
    }
    float _2491;
    float _2493;
    float _2495;
    float _2497;
    float _2499;
    float _2501;
    if (_1809.y == 0u)
    {
        float _2431 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2432 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2431;
        float _2433 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2431;
        float _2434 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2431;
        uvec4 _2446 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2447 = _2446.x;
        uint _2458 = uint((float(_2446.y) * floor(float(uint(cbSceneParam._m0[85u].y * _695) / _2447))) + floor(float(uint(cbSceneParam._m0[85u].x * _694) / _2447)));
        float _2468 = (log2(_2434 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2469 = isnan(0.0) ? _2468 : (isnan(_2468) ? 0.0 : max(_2468, 0.0));
        uint _2472 = uint(isnan(14.0) ? _2469 : (isnan(_2469) ? 14.0 : min(_2469, 14.0)));
        uvec4 _2477 = texelFetch(g_lightClusterGridBuffer, int(((_2472 << 2u) + (_2458 << 6u)) >> 2u));
        uint _2478 = _2477.x;
        uint _2479 = _2446.z;
        float _2579;
        float _2581;
        float _2583;
        float _2585;
        float _2587;
        float _2589;
        if (((((1u << ((_2479 >> 4u) & 15u)) + 4294967295u) & _2478) == 0u) || ((_2479 & 240u) == 0u))
        {
            _2579 = 0.0;
            _2581 = 0.0;
            _2583 = 0.0;
            _2585 = 0.0;
            _2587 = 0.0;
            _2589 = 0.0;
        }
        else
        {
            float _2580;
            float _2582;
            float _2584;
            float _2586;
            float _2588;
            float _2590;
            float _2724 = 0.0;
            float _2725 = 0.0;
            float _2726 = 0.0;
            float _2727 = 0.0;
            float _2728 = 0.0;
            float _2729 = 0.0;
            uint _2730 = 0u;
            uint _2739;
            bool _2740;
            for (;;)
            {
                _2739 = texelFetch(g_lightClassification, int((((_2472 << 5u) + (_2458 << 9u)) + (_2730 << 2u)) >> 2u)).x;
                _2740 = _2739 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2740)
                {
                    frontier_phi_61_pred = _2724;
                    frontier_phi_61_pred_1 = _2729;
                    frontier_phi_61_pred_2 = _2728;
                    frontier_phi_61_pred_3 = _2727;
                    frontier_phi_61_pred_4 = _2726;
                    frontier_phi_61_pred_5 = _2725;
                }
                else
                {
                    float _2848;
                    float _2849;
                    float _2850;
                    float _2851;
                    float _2852;
                    float _2853;
                    uint _2854;
                    _2848 = _2724;
                    _2849 = _2725;
                    _2850 = _2726;
                    _2851 = _2727;
                    _2852 = _2728;
                    _2853 = _2729;
                    _2854 = _2739;
                    float _2780;
                    float _2781;
                    float _2782;
                    float _2783;
                    float _2784;
                    float _2785;
                    for (;;)
                    {
                        uint _2858 = uint(findLSB(_2854)) + (_2730 << 5u);
                        uint _2855 = (_2854 + 4294967295u) & _2854;
                        uint _2860 = _2858 * 48u;
                        vec4 _2874 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2860)).x, texelFetch(g_PointLightRenderingBuffer, int(_2860 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2860 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2860 + 3u)).x));
                        uint _2880 = (_2858 * 48u) + 4u;
                        vec4 _2893 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2880)).x, texelFetch(g_PointLightRenderingBuffer, int(_2880 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2880 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2880 + 3u)).x));
                        uint _2899 = (_2858 * 48u) + 8u;
                        vec3 _2910 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2899)).x, texelFetch(g_PointLightRenderingBuffer, int(_2899 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2899 + 2u)).x));
                        float _2914 = _2874.x - _2432;
                        float _2915 = _2874.y - _2433;
                        float _2916 = _2874.z - _2434;
                        float _2917 = dot(vec3(_2914, _2915, _2916), vec3(_2914, _2915, _2916));
                        float _2920 = inversesqrt(_2917);
                        float _2921 = _2920 * _2914;
                        float _2922 = _2920 * _2915;
                        float _2923 = _2920 * _2916;
                        float _2924 = dot(vec3(_713, _716, _719), vec3(_2921, _2922, _2923));
                        float _2929 = 1.0 - (_2917 * _2874.w);
                        float _4231 = isnan(0.0) ? _2929 : (isnan(_2929) ? 0.0 : max(_2929, 0.0));
                        float _2930 = isnan(1.0) ? _4231 : (isnan(_4231) ? 1.0 : min(_4231, 1.0));
                        float _2931 = sqrt(_2917) * _2893.w;
                        float _2934 = 1.39999997615814208984375 / (_2931 + 1.39999997615814208984375);
                        float _2935 = _2934 * _2934;
                        float _2938 = ((1.0 - _2935) * _2924) + _2935;
                        float _2941 = _2931 * _2931;
                        float _2945 = ((isnan(0.0) ? _2938 : (isnan(_2938) ? 0.0 : max(_2938, 0.0))) * _2930) / ((_2941 * 0.699999988079071044921875) + 1.0);
                        float _2949 = (-0.0) - _2432;
                        float _2950 = (-0.0) - _2433;
                        float _2951 = (-0.0) - _2434;
                        float _2955 = inversesqrt(dot(vec3(_2949, _2950, _2951), vec3(_2949, _2950, _2951)));
                        float _2956 = _2955 * _2949;
                        float _2957 = _2955 * _2950;
                        float _2958 = _2955 * _2951;
                        float _2966 = exp2(log2(1.0 / ((_2941 * 3.5) + 5.0)) * 0.25);
                        float _2967 = 1.0 - _773;
                        float _2974 = sqrt(1.0 - ((1.0 - (_2967 * _2967)) * (1.0 - (_2966 * _2966))));
                        float _2975 = _2974 * _2974;
                        float _2976 = _2975 * _2975;
                        float _2977 = _2956 + _2921;
                        float _2978 = _2957 + _2922;
                        float _2979 = _2958 + _2923;
                        float _2983 = inversesqrt(dot(vec3(_2977, _2978, _2979), vec3(_2977, _2978, _2979)));
                        float _2987 = dot(vec3(_713, _716, _719), vec3(_2956, _2957, _2958));
                        float _4247 = isnan(0.0) ? _2987 : (isnan(_2987) ? 0.0 : max(_2987, 0.0));
                        float _2990 = isnan(1.0) ? _4247 : (isnan(_4247) ? 1.0 : min(_4247, 1.0));
                        float _2991 = dot(vec3(_713, _716, _719), vec3(_2983 * _2977, _2983 * _2978, _2983 * _2979));
                        float _4258 = isnan(0.0) ? _2991 : (isnan(_2991) ? 0.0 : max(_2991, 0.0));
                        float _2994 = isnan(1.0) ? _4258 : (isnan(_4258) ? 1.0 : min(_4258, 1.0));
                        float _2998 = ((_2994 * _2994) * (_2976 + (-1.0))) + 1.0;
                        float _2999 = _2934 * _2975;
                        float _3000 = _2999 * _2999;
                        float _3003 = ((1.0 - _3000) * _2924) + _3000;
                        float _4269 = isnan(0.0) ? _3003 : (isnan(_3003) ? 0.0 : max(_3003, 0.0));
                        float _3004 = isnan(1.0) ? _4269 : (isnan(_4269) ? 1.0 : min(_4269, 1.0));
                        float _3005 = 1.0 - _2975;
                        float _3015 = (0.5 / (((_3004 * ((_2990 * _3005) + _2975)) + 9.9999999392252902907785028219223e-09) + (((_3004 * _3005) + _2975) * _2990))) * _3004;
                        float _4280 = isnan(0.0) ? _3015 : (isnan(_3015) ? 0.0 : max(_3015, 0.0));
                        float _3026 = (((_2976 * 3.1415927410125732421875) * (isnan(1.0) ? _4280 : (isnan(_4280) ? 1.0 : min(_4280, 1.0)))) / ((_2998 * _2998) * ((_2941 * 2.1991131305694580078125) + 3.141590118408203125))) * _2930;
                        _2783 = (_2945 * _2893.x) + _2851;
                        _2784 = (_2945 * _2893.y) + _2852;
                        _2785 = (_2945 * _2893.z) + _2853;
                        _2780 = (_3026 * _2910.x) + _2848;
                        _2781 = (_3026 * _2910.y) + _2849;
                        _2782 = (_3026 * _2910.z) + _2850;
                        if (_2855 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2848 = _2780;
                            _2849 = _2781;
                            _2850 = _2782;
                            _2851 = _2783;
                            _2852 = _2784;
                            _2853 = _2785;
                            _2854 = _2855;
                        }
                    }
                    frontier_phi_61_pred = _2780;
                    frontier_phi_61_pred_1 = _2785;
                    frontier_phi_61_pred_2 = _2784;
                    frontier_phi_61_pred_3 = _2783;
                    frontier_phi_61_pred_4 = _2782;
                    frontier_phi_61_pred_5 = _2781;
                }
                _2580 = frontier_phi_61_pred;
                _2590 = frontier_phi_61_pred_1;
                _2588 = frontier_phi_61_pred_2;
                _2586 = frontier_phi_61_pred_3;
                _2584 = frontier_phi_61_pred_4;
                _2582 = frontier_phi_61_pred_5;
                uint _2731 = _2730 + 1u;
                if (_2731 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2724 = _2580;
                    _2725 = _2582;
                    _2726 = _2584;
                    _2727 = _2586;
                    _2728 = _2588;
                    _2729 = _2590;
                    _2730 = _2731;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2579 = _2580;
            _2581 = _2582;
            _2583 = _2584;
            _2585 = _2586;
            _2587 = _2588;
            _2589 = _2590;
        }
        uvec4 _2593 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2594 = _2593.z;
        uint _2596 = (_2594 >> 8u) & 15u;
        float _2692;
        float _2694;
        float _2696;
        float _2698;
        float _2700;
        float _2702;
        if (((4294967295u << _2596) & _2478) == 0u)
        {
            _2692 = _2579;
            _2694 = _2581;
            _2696 = _2583;
            _2698 = _2585;
            _2700 = _2587;
            _2702 = _2589;
        }
        else
        {
            float _2717 = inversesqrt(dot(vec3(_2432, _2433, _2434), vec3(_2432, _2433, _2434)));
            float _2718 = _2717 * _2432;
            float _2719 = _2717 * _2433;
            float _2720 = _2717 * _2434;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2596 < ((_2594 >> 12u) & 15u))
            {
                float _2693;
                float _2695;
                float _2697;
                float _2699;
                float _2701;
                float _2703;
                float _2831 = _2579;
                float _2832 = _2581;
                float _2833 = _2583;
                float _2834 = _2585;
                float _2835 = _2587;
                float _2836 = _2589;
                uint _2837 = _2596;
                uint _2846;
                bool _2847;
                for (;;)
                {
                    _2846 = texelFetch(g_lightClassification, int((((_2472 << 5u) + (_2458 << 9u)) + (_2837 << 2u)) >> 2u)).x;
                    _2847 = _2846 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_2847)
                    {
                        frontier_phi_67_pred = _2834;
                        frontier_phi_67_pred_1 = _2835;
                        frontier_phi_67_pred_2 = _2836;
                        frontier_phi_67_pred_3 = _2833;
                        frontier_phi_67_pred_4 = _2832;
                        frontier_phi_67_pred_5 = _2831;
                    }
                    else
                    {
                        float _3031;
                        float _3032;
                        float _3033;
                        float _3034;
                        float _3035;
                        float _3036;
                        float _3325;
                        float _3326;
                        float _3327;
                        float _3328;
                        float _3329;
                        float _3330;
                        float _3044 = _2831;
                        float _3045 = _2832;
                        float _3046 = _2833;
                        float _3047 = _2834;
                        float _3048 = _2835;
                        float _3049 = _2836;
                        uint _3050 = _2846;
                        uint _3051;
                        vec4 _3076;
                        float _3077;
                        vec4 _3092;
                        vec3 _3104;
                        vec4 _3119;
                        vec4 _3135;
                        float _3181;
                        bool _3182;
                        for (;;)
                        {
                            uint _3061 = ((_2837 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3050));
                            _3051 = (_3050 + 4294967295u) & _3050;
                            uint _3063 = _3061 * 40u;
                            _3076 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3063)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3063 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3063 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3063 + 3u)).x));
                            _3077 = _3076.w;
                            uint _3079 = (_3061 * 40u) + 4u;
                            _3092 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3079)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3079 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3079 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3079 + 3u)).x));
                            uint _3094 = (_3061 * 40u) + 8u;
                            _3104 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3094)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3094 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3094 + 2u)).x));
                            uint _3106 = (_3061 * 40u) + 16u;
                            _3119 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3106)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3106 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3106 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3106 + 3u)).x));
                            uint _3122 = (_3061 * 40u) + 20u;
                            _3135 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3122)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3122 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3122 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3122 + 3u)).x));
                            uint _3137 = (_3061 * 40u) + 24u;
                            vec4 _3150 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3137)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3137 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3137 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3137 + 3u)).x));
                            uint _3156 = (_3061 * 40u) + 28u;
                            vec4 _3169 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3156)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3156 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3156 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3156 + 3u)).x));
                            _3181 = fma(_2434, _3169.z, fma(_2433, _3169.y, _3169.x * _2432)) + _3169.w;
                            _3182 = !((fma(_2434, _3150.z, fma(_2433, _3150.y, _3150.x * _2432)) + _3150.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3182)
                            {
                                float _3209 = _3076.x - _2432;
                                float _3210 = _3076.y - _2433;
                                float _3211 = _3076.z - _2434;
                                float _3212 = dot(vec3(_3209, _3210, _3211), vec3(_3209, _3210, _3211));
                                float _3215 = inversesqrt(_3212);
                                float _3216 = _3215 * _3209;
                                float _3217 = _3215 * _3210;
                                float _3218 = _3215 * _3211;
                                float _3222 = 1.0 - (_3212 / (_3077 * _3077));
                                float _4291 = isnan(0.0) ? _3222 : (isnan(_3222) ? 0.0 : max(_3222, 0.0));
                                float _3223 = isnan(1.0) ? _4291 : (isnan(_4291) ? 1.0 : min(_4291, 1.0));
                                float _3227 = sqrt(_3212) * _3092.w;
                                float _3229 = 1.39999997615814208984375 / (_3227 + 1.39999997615814208984375);
                                float _3230 = _3229 * _3229;
                                float _3233 = ((1.0 - _3230) * dot(vec3(_3216, _3217, _3218), vec3(_713, _716, _719))) + _3230;
                                float _3236 = _3227 * _3227;
                                float _3240 = (fma(_2434, _3119.z, fma(_2433, _3119.y, _3119.x * _2432)) + _3119.w) / _3181;
                                float _3241 = (fma(_2434, _3135.z, fma(_2433, _3135.y, _3135.x * _2432)) + _3135.w) / _3181;
                                float _3245 = 1.0 - dot(vec2(_3240, _3241), vec2(_3240, _3241));
                                float _4307 = isnan(0.0) ? _3245 : (isnan(_3245) ? 0.0 : max(_3245, 0.0));
                                float _3246 = isnan(1.0) ? _4307 : (isnan(_4307) ? 1.0 : min(_4307, 1.0));
                                float _3247 = _3246 * (((isnan(0.0) ? _3233 : (isnan(_3233) ? 0.0 : max(_3233, 0.0))) * _3223) / ((_3236 * 0.699999988079071044921875) + 1.0));
                                float _3259 = exp2(log2(1.0 / ((_3236 * 3.5) + 5.0)) * 0.25);
                                float _3260 = 1.0 - _773;
                                float _3267 = sqrt(1.0 - ((1.0 - (_3260 * _3260)) * (1.0 - (_3259 * _3259))));
                                float _3268 = _3267 * _3267;
                                float _3269 = _3268 * _3268;
                                float _3270 = _3216 - _2718;
                                float _3271 = _3217 - _2719;
                                float _3272 = _3218 - _2720;
                                float _3276 = inversesqrt(dot(vec3(_3270, _3271, _3272), vec3(_3270, _3271, _3272)));
                                float _3280 = dot(vec3(_713, _716, _719), vec3((-0.0) - _2718, (-0.0) - _2719, (-0.0) - _2720));
                                float _4318 = isnan(0.0) ? _3280 : (isnan(_3280) ? 0.0 : max(_3280, 0.0));
                                float _3283 = isnan(1.0) ? _4318 : (isnan(_4318) ? 1.0 : min(_4318, 1.0));
                                float _3284 = dot(vec3(_713, _716, _719), vec3(_3276 * _3270, _3276 * _3271, _3276 * _3272));
                                float _4329 = isnan(0.0) ? _3284 : (isnan(_3284) ? 0.0 : max(_3284, 0.0));
                                float _3287 = isnan(1.0) ? _4329 : (isnan(_4329) ? 1.0 : min(_4329, 1.0));
                                float _3291 = ((_3287 * _3287) * (_3269 + (-1.0))) + 1.0;
                                float _3292 = _3229 * _3268;
                                float _3293 = _3292 * _3292;
                                float _3299 = ((1.0 - _3293) * dot(vec3(_713, _716, _719), vec3(_3216, _3217, _3218))) + _3293;
                                float _4340 = isnan(0.0) ? _3299 : (isnan(_3299) ? 0.0 : max(_3299, 0.0));
                                float _3300 = isnan(1.0) ? _4340 : (isnan(_4340) ? 1.0 : min(_4340, 1.0));
                                float _3301 = 1.0 - _3268;
                                float _3311 = (0.5 / (((_3300 * ((_3283 * _3301) + _3268)) + 9.9999999392252902907785028219223e-09) + (((_3300 * _3301) + _3268) * _3283))) * _3300;
                                float _4351 = isnan(0.0) ? _3311 : (isnan(_3311) ? 0.0 : max(_3311, 0.0));
                                float _3321 = (_3246 * _3223) * (((_3269 * 3.1415927410125732421875) * (isnan(1.0) ? _4351 : (isnan(_4351) ? 1.0 : min(_4351, 1.0)))) / ((_3291 * _3291) * ((_3236 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3321 * _3104.x;
                                frontier_phi_73_pred_1 = _3321 * _3104.y;
                                frontier_phi_73_pred_2 = _3247 * _3092.z;
                                frontier_phi_73_pred_3 = _3247 * _3092.y;
                                frontier_phi_73_pred_4 = _3247 * _3092.x;
                                frontier_phi_73_pred_5 = _3321 * _3104.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3325 = frontier_phi_73_pred;
                            _3326 = frontier_phi_73_pred_1;
                            _3330 = frontier_phi_73_pred_2;
                            _3329 = frontier_phi_73_pred_3;
                            _3328 = frontier_phi_73_pred_4;
                            _3327 = frontier_phi_73_pred_5;
                            _3034 = _3328 + _3047;
                            _3035 = _3329 + _3048;
                            _3036 = _3330 + _3049;
                            _3031 = _3325 + _3044;
                            _3032 = _3326 + _3045;
                            _3033 = _3327 + _3046;
                            if (_3051 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3044 = _3031;
                                _3045 = _3032;
                                _3046 = _3033;
                                _3047 = _3034;
                                _3048 = _3035;
                                _3049 = _3036;
                                _3050 = _3051;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3034;
                        frontier_phi_67_pred_1 = _3035;
                        frontier_phi_67_pred_2 = _3036;
                        frontier_phi_67_pred_3 = _3033;
                        frontier_phi_67_pred_4 = _3032;
                        frontier_phi_67_pred_5 = _3031;
                    }
                    _2699 = frontier_phi_67_pred;
                    _2701 = frontier_phi_67_pred_1;
                    _2703 = frontier_phi_67_pred_2;
                    _2697 = frontier_phi_67_pred_3;
                    _2695 = frontier_phi_67_pred_4;
                    _2693 = frontier_phi_67_pred_5;
                    uint _2838 = _2837 + 1u;
                    if (_2838 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2831 = _2693;
                        _2832 = _2695;
                        _2833 = _2697;
                        _2834 = _2699;
                        _2835 = _2701;
                        _2836 = _2703;
                        _2837 = _2838;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2701;
                frontier_phi_55_56_ladder_1 = _2703;
                frontier_phi_55_56_ladder_2 = _2699;
                frontier_phi_55_56_ladder_3 = _2697;
                frontier_phi_55_56_ladder_4 = _2695;
                frontier_phi_55_56_ladder_5 = _2693;
            }
            else
            {
                frontier_phi_55_56_ladder = _2587;
                frontier_phi_55_56_ladder_1 = _2589;
                frontier_phi_55_56_ladder_2 = _2585;
                frontier_phi_55_56_ladder_3 = _2583;
                frontier_phi_55_56_ladder_4 = _2581;
                frontier_phi_55_56_ladder_5 = _2579;
            }
            _2692 = frontier_phi_55_56_ladder_5;
            _2694 = frontier_phi_55_56_ladder_4;
            _2696 = frontier_phi_55_56_ladder_3;
            _2698 = frontier_phi_55_56_ladder_2;
            _2700 = frontier_phi_55_56_ladder;
            _2702 = frontier_phi_55_56_ladder_1;
        }
        float _2707 = isnan(1.0) ? _757 : (isnan(_757) ? 1.0 : min(_757, 1.0));
        _2491 = (_2707 * _2698) + _1943;
        _2493 = (_2707 * _2700) + _1945;
        _2495 = (_2707 * _2702) + _1947;
        _2497 = ((_2692 * 0.039999999105930328369140625) * _2707) + _2276;
        _2499 = ((_2694 * 0.039999999105930328369140625) * _2707) + _2278;
        _2501 = ((_2696 * 0.039999999105930328369140625) * _2707) + _2280;
    }
    else
    {
        _2491 = _1943;
        _2493 = _1945;
        _2495 = _1947;
        _2497 = _2276;
        _2499 = _2278;
        _2501 = _2280;
    }
    float _4367 = isnan(0.0) ? _742 : (isnan(_742) ? 0.0 : max(_742, 0.0));
    float _4378 = isnan(0.0) ? _743 : (isnan(_743) ? 0.0 : max(_743, 0.0));
    float _4389 = isnan(0.0) ? _744 : (isnan(_744) ? 0.0 : max(_744, 0.0));
    uint _2521 = _230 + 6u;
    float _2529 = _694 / cbSceneParam._m0[86u].x;
    float _2530 = _695 / cbSceneParam._m0[86u].y;
    vec4 _2544 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2529, _2530, (log2((isnan(cbSceneParam._m0[77u].w) ? _627 : (isnan(_627) ? cbSceneParam._m0[77u].w : min(_627, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2546 = _2544.x;
    float _2547 = _2544.y;
    float _2548 = _2544.z;
    float _2549 = _2544.w;
    float _2642;
    float _2644;
    float _2646;
    float _2648;
    if (_627 > cbSceneParam._m0[78u].w)
    {
        float _2604 = isnan(_627) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _627 : min(cbSceneParam._m0[80u].w, _627));
        float _2605 = _2604 / _627;
        float _2616 = _2605 * _679;
        float _2617 = _680 * _2605;
        float _2618 = (-0.0) - _2617;
        float _2620 = _2605 * _681;
        float _2622 = (cbSceneParam._m0[77u].w * _2618) / _2604;
        float _2623 = _2622 + cbSceneParam._m0[79u].w;
        float _2624 = cbSceneParam._m0[79u].w - _2617;
        float _2630 = sqrt(((_2616 * _2616) + (_2617 * _2617)) + (_2620 * _2620));
        float _2633 = (1.0 - (cbSceneParam._m0[77u].w / _2604)) * _2630;
        float _2638 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2640 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2793;
        if (abs((_2618 - _2622) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2793 = ((((_2623 > 0.0) ? exp2(_2638 * _2623) : (2.0 - exp2(_2640 * _2623))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2633;
        }
        else
        {
            float _2753 = 1.0 / cbSceneParam._m0[80u].x;
            float _2754 = isnan(_2624) ? _2623 : (isnan(_2623) ? _2624 : max(_2623, _2624));
            float _2755 = isnan(_2624) ? _2623 : (isnan(_2623) ? _2624 : min(_2623, _2624));
            float _2764 = isnan(0.0) ? _2754 : (isnan(_2754) ? 0.0 : min(_2754, 0.0));
            float _2765 = isnan(0.0) ? _2755 : (isnan(_2755) ? 0.0 : min(_2755, 0.0));
            _2793 = ((abs(_2630 / _2618) * cbSceneParam._m0[80u].y) * ((((_2764 - _2765) * 2.0) - ((exp2(_2638 * (isnan(0.0) ? _2754 : (isnan(_2754) ? 0.0 : max(_2754, 0.0)))) - exp2(_2638 * (isnan(0.0) ? _2755 : (isnan(_2755) ? 0.0 : max(_2755, 0.0))))) * _2753)) - ((exp2(_2640 * _2764) - exp2(_2640 * _2765)) * _2753))) + (_2633 * cbSceneParam._m0[80u].z);
        }
        vec4 _2795 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2529, _2530, 1.0), 0.0);
        float _2804 = exp2((_2793 * (-1.44269502162933349609375)) * (1.0 - _2795.w));
        float _2805 = log2(_2804);
        float _2821 = log2(_2549);
        _2642 = (exp2(_2821 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2805 * cbSceneParam._m0[78u].x)) * _2795.x) / cbSceneParam._m0[78u].x)) + _2546;
        _2644 = (exp2(_2821 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2805 * cbSceneParam._m0[78u].y)) * _2795.y) / cbSceneParam._m0[78u].y)) + _2547;
        _2646 = (exp2(_2821 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2805 * cbSceneParam._m0[78u].z)) * _2795.z) / cbSceneParam._m0[78u].z)) + _2548;
        _2648 = _2804 * _2549;
    }
    else
    {
        _2642 = _2546;
        _2644 = _2547;
        _2646 = _2548;
        _2648 = _2549;
    }
    float _2660 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2661 = _2660 == 3.0;
    float _2662 = log2(_2648);
    float _2669 = exp2(_2662 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4367 : (isnan(_4367) ? 1.0 : min(_4367, 1.0))) * (_2491 + ((isnan(0.0) ? _1483 : (isnan(_1483) ? 0.0 : max(_1483, 0.0))) * _757))) + ((_2497 + ((isnan(0.0) ? _1775 : (isnan(_1775) ? 0.0 : max(_1775, 0.0))) * _1562)) * cbPerFrame._m0[3u].x));
    float _2670 = exp2(_2662 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4378 : (isnan(_4378) ? 1.0 : min(_4378, 1.0))) * (_2493 + ((isnan(0.0) ? _1486 : (isnan(_1486) ? 0.0 : max(_1486, 0.0))) * _757))) + ((_2499 + ((isnan(0.0) ? _1778 : (isnan(_1778) ? 0.0 : max(_1778, 0.0))) * _1562)) * cbPerFrame._m0[3u].x));
    float _2671 = exp2(_2662 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4389 : (isnan(_4389) ? 1.0 : min(_4389, 1.0))) * (_2495 + ((isnan(0.0) ? _1489 : (isnan(_1489) ? 0.0 : max(_1489, 0.0))) * _757))) + ((_2501 + ((isnan(0.0) ? _1781 : (isnan(_1781) ? 0.0 : max(_1781, 0.0))) * _1562)) * cbPerFrame._m0[3u].x));
    float _2680 = (_2660 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2680 * (_2661 ? _2669 : (_2669 + (cbSceneParam._m0[72u].w * _2642)));
    SV_Target.y = _2680 * (_2661 ? _2670 : (_2670 + (cbSceneParam._m0[72u].w * _2644)));
    SV_Target.z = _2680 * (_2661 ? _2671 : (_2671 + (cbSceneParam._m0[72u].w * _2646)));
    SV_Target.w = cbInstanceData._m0[_2521].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2521].w;
}


