#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 13) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_22;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_29;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_10;
layout(set = 0, binding = 20) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_6;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1430;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _236 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _237 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _238 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _244 = inversesqrt(dot(vec3(_236, _237, _238), vec3(_236, _237, _238)));
    float _251 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _258 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _270 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _272 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _273 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3759 = isnan(0.0) ? _270 : (isnan(_270) ? 0.0 : max(_270, 0.0));
    float _3770 = isnan(0.0) ? _272 : (isnan(_272) ? 0.0 : max(_272, 0.0));
    float _3781 = isnan(0.0) ? _273 : (isnan(_273) ? 0.0 : max(_273, 0.0));
    uint _283 = uint(roundEven(NORMAL.w)) * 13u;
    uint _288 = _283 + 1u;
    uint _292 = _283 + 2u;
    float _301 = sqrt(((cbInstanceData._m0[_288].x * cbInstanceData._m0[_288].x) + (cbInstanceData._m0[_283].x * cbInstanceData._m0[_283].x)) + (cbInstanceData._m0[_292].x * cbInstanceData._m0[_292].x));
    float _302 = _301 * TEXCOORD.z;
    float _303 = _301 * TEXCOORD.w;
    vec4 _316 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _302) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _303) + cbTextureTilingScale._m0[13u].w));
    vec4 _340 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _345 = _340.x * cbMtdParam._m0[11u].x;
    float _346 = _340.y * cbMtdParam._m0[11u].y;
    float _347 = _340.z * cbMtdParam._m0[11u].z;
    vec4 _366 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _302) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _303) + cbTextureTilingScale._m0[5u].w));
    vec4 _385 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _420 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _422 = _420.x;
    float _434 = dot(vec4(_422, _420.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _451 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _385.x) * 2.0) - ((((_422 - _434) * cbMtdParam._m0[24u].z) + _434) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3792 = isnan(0.0) ? _451 : (isnan(_451) ? 0.0 : max(_451, 0.0));
    float _452 = isnan(1.0) ? _3792 : (isnan(_3792) ? 1.0 : min(_3792, 1.0));
    float _459 = (_452 * ((_366.x * cbMtdParam._m0[12u].x) - _345)) + _345;
    float _460 = (_452 * ((_366.y * cbMtdParam._m0[12u].y) - _346)) + _346;
    float _461 = (_452 * ((_366.z * cbMtdParam._m0[12u].z) - _347)) + _347;
    vec4 _478 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _302) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _303) + cbTextureTilingScale._m0[3u].w));
    vec4 _498 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _500 = _498.x;
    float _510 = dot(vec4(_500, _498.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _524 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _385.y) * 2.0) - ((((_500 - _510) * cbMtdParam._m0[24u].z) + _510) * cbMtdParam._m0[20u].w))) + 1.0;
    float _3803 = isnan(0.0) ? _524 : (isnan(_524) ? 0.0 : max(_524, 0.0));
    float _525 = isnan(1.0) ? _3803 : (isnan(_3803) ? 1.0 : min(_3803, 1.0));
    float _532 = (_525 * ((_478.x * cbMtdParam._m0[13u].x) - _459)) + _459;
    float _533 = (_525 * ((_478.y * cbMtdParam._m0[13u].y) - _460)) + _460;
    float _534 = (_525 * ((_478.z * cbMtdParam._m0[13u].z) - _461)) + _461;
    float _538 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _316.x) * _532;
    float _541 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _316.y) * _533;
    float _544 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _316.z) * _534;
    float _551 = ((_532 - _538) * (isnan(1.0) ? _3759 : (isnan(_3759) ? 1.0 : min(_3759, 1.0)))) + _538;
    float _552 = ((_533 - _541) * (isnan(1.0) ? _3770 : (isnan(_3770) ? 1.0 : min(_3770, 1.0)))) + _541;
    float _553 = ((_534 - _544) * (isnan(1.0) ? _3781 : (isnan(_3781) ? 1.0 : min(_3781, 1.0)))) + _544;
    vec4 _570 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _302) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _303) + cbTextureTilingScale._m0[20u].w));
    vec4 _593 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _302) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _303) + cbTextureTilingScale._m0[4u].w));
    vec4 _610 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _612 = _610.x;
    float _613 = _610.y;
    float _614 = _610.z;
    float _621 = ((_593.x - _612) * _452) + _612;
    float _622 = ((_593.y - _613) * _452) + _613;
    float _623 = ((_593.z - _614) * _452) + _614;
    vec4 _635 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _302) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _303) + cbTextureTilingScale._m0[2u].w));
    float _648 = ((_635.z - _623) * _525) + _623;
    float _651 = ((((_635.x - _621) * _525) + _621) * 2.0) + (-1.0);
    float _652 = ((((_635.y - _622) * _525) + _622) * 2.0) + (-1.0);
    float _653 = dot(vec2(_651, _652), vec2(_651, _652));
    float _3814 = isnan(0.0) ? _653 : (isnan(_653) ? 0.0 : max(_653, 0.0));
    float _658 = sqrt(1.0 - (isnan(1.0) ? _3814 : (isnan(_3814) ? 1.0 : min(_3814, 1.0))));
    vec4 _672 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _697 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _302) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _303) + cbTextureTilingScale._m0[11u].w));
    float _699 = _697.x;
    float _700 = 1.0 - _699;
    float _706 = isnan(-1.0) ? cbMtdParam._m0[24u].x : (isnan(cbMtdParam._m0[24u].x) ? (-1.0) : max(cbMtdParam._m0[24u].x, -1.0));
    float _709 = ((isnan(0.0) ? _706 : (isnan(_706) ? 0.0 : min(_706, 0.0))) * TEXCOORD_8.x) + TEXCOORD_8.w;
    float _718 = (_709 - ((((((_699 - _700) * cbMtdParam._m0[24u].w) + _700) + 0.00999999977648258209228515625) * cbMtdParam._m0[21u].z) * (1.0 - _709))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3835 = isnan(0.0) ? _718 : (isnan(_718) ? 0.0 : max(_718, 0.0));
    float _719 = isnan(1.0) ? _3835 : (isnan(_3835) ? 1.0 : min(_3835, 1.0));
    float _726 = (_719 * (cbMtdParam._m0[17u].x - _551)) + _551;
    float _727 = (_719 * (cbMtdParam._m0[17u].y - _552)) + _552;
    float _728 = (_719 * (cbMtdParam._m0[17u].z - _553)) + _553;
    vec4 _740 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _302) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _303) + cbTextureTilingScale._m0[19u].w));
    float _742 = _740.x;
    float _743 = 1.0 - _742;
    float _768 = (TEXCOORD_8.x - ((cbMtdParam._m0[22u].w * (1.0 - TEXCOORD_8.x)) * ((((_742 - _743) * cbMtdParam._m0[24u].y) + _743) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3846 = isnan(0.0) ? _768 : (isnan(_768) ? 0.0 : max(_768, 0.0));
    float _769 = isnan(1.0) ? _3846 : (isnan(_3846) ? 1.0 : min(_3846, 1.0));
    float _777 = ((((cbMtdParam._m0[10u].x - _726) * TEXCOORD_8.x) * cbMtdParam._m0[23u].w) * _769) + _726;
    float _778 = ((((cbMtdParam._m0[10u].y - _727) * TEXCOORD_8.y) * cbMtdParam._m0[23u].w) * _769) + _727;
    float _779 = (((cbMtdParam._m0[23u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _728)) * _769) + _728;
    float _784 = (((_570.z - _648) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _648;
    float _788 = ((_672.z - _784) * cbMtdParam._m0[19u].w) + _784;
    vec4 _802 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _302) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _303) + cbTextureTilingScale._m0[15u].w));
    float _809 = (_802.x * 2.0) + (-1.0);
    float _810 = (_802.y * 2.0) + (-1.0);
    float _811 = dot(vec2(_809, _810), vec2(_809, _810));
    float _3857 = isnan(0.0) ? _811 : (isnan(_811) ? 0.0 : max(_811, 0.0));
    float _819 = (_719 * (_802.z - _788)) + _788;
    float _822 = ((cbMtdParam._m0[23u].y - _819) * _769) + _819;
    vec4 _841 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _302) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _303) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _847 = (_841.x * 2.0) + (-1.0);
    float _848 = (_841.y * 2.0) + (-1.0);
    float _849 = dot(vec2(_847, _848), vec2(_847, _848));
    float _3868 = isnan(0.0) ? _849 : (isnan(_849) ? 0.0 : max(_849, 0.0));
    float _863 = (_651 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_570.x * 2.0) + (-1.0)))) + (((_672.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _864 = (_652 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_570.y * 2.0) + (-1.0)))) + (((_672.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _876 = (((_809 - _863) + (cbMtdParam._m0[21u].x * _863)) * _719) + _863;
    float _877 = (((_810 - _864) + (cbMtdParam._m0[21u].x * _864)) * _719) + _864;
    float _878 = (_719 * (sqrt(1.0 - (isnan(1.0) ? _3857 : (isnan(_3857) ? 1.0 : min(_3857, 1.0)))) - _658)) + _658;
    float _889 = (((_847 - _876) + (_876 * cbMtdParam._m0[22u].z)) * _769) + _876;
    float _890 = (((_848 - _877) + (_877 * cbMtdParam._m0[22u].z)) * _769) + _877;
    float _891 = ((sqrt(1.0 - (isnan(1.0) ? _3868 : (isnan(_3868) ? 1.0 : min(_3868, 1.0)))) - _878) * _769) + _878;
    float _895 = cbMtdParam._m0[22u].x + _672.w;
    float _898 = fma(_891, _251 * NORMAL.x, fma(_890, _258 * TANGENT.x, (_244 * _236) * _889));
    float _901 = fma(_891, _251 * NORMAL.y, fma(_890, _258 * TANGENT.y, (_244 * _237) * _889));
    float _904 = fma(_891, _251 * NORMAL.z, fma(_890, _258 * TANGENT.z, (_244 * _238) * _889));
    float _908 = inversesqrt(dot(vec3(_898, _901, _904), vec3(_898, _901, _904)));
    float _909 = _908 * _898;
    float _910 = _908 * _901;
    float _911 = _908 * _904;
    float _3879 = isnan(0.0) ? _822 : (isnan(_822) ? 0.0 : max(_822, 0.0));
    float _912 = isnan(1.0) ? _3879 : (isnan(_3879) ? 1.0 : min(_3879, 1.0));
    float _3890 = isnan(0.0) ? _895 : (isnan(_895) ? 0.0 : max(_895, 0.0));
    float _3901 = isnan(0.0) ? _777 : (isnan(_777) ? 0.0 : max(_777, 0.0));
    float _3912 = isnan(0.0) ? _778 : (isnan(_778) ? 0.0 : max(_778, 0.0));
    float _3923 = isnan(0.0) ? _779 : (isnan(_779) ? 0.0 : max(_779, 0.0));
    float _930 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _971 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _981 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _971);
    float _982 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _971);
    float _983 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _971);
    float _987 = inversesqrt(dot(vec3(_981, _982, _983), vec3(_981, _982, _983)));
    float _988 = _981 * _987;
    float _989 = _982 * _987;
    float _990 = _983 * _987;
    float _996 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _997 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1015 = fma(_911, cbSceneParam._m0[5u].z, fma(_910, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _909));
    float _1018 = fma(_911, cbSceneParam._m0[6u].z, fma(_910, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _909));
    float _1021 = fma(_911, cbSceneParam._m0[7u].z, fma(_910, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _909));
    uint _1035 = (_283 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _1041 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3901 : (isnan(_3901) ? 1.0 : min(_3901, 1.0)))) * cbInstanceData._m0[_1035].x;
    float _1042 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3912 : (isnan(_3912) ? 1.0 : min(_3912, 1.0)))) * cbInstanceData._m0[_1035].y;
    float _1043 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3923 : (isnan(_3923) ? 1.0 : min(_3923, 1.0)))) * cbInstanceData._m0[_1035].z;
    float _3934 = isnan(0.0) ? _1041 : (isnan(_1041) ? 0.0 : max(_1041, 0.0));
    float _1044 = isnan(1.0) ? _3934 : (isnan(_3934) ? 1.0 : min(_3934, 1.0));
    float _3945 = isnan(0.0) ? _1042 : (isnan(_1042) ? 0.0 : max(_1042, 0.0));
    float _1045 = isnan(1.0) ? _3945 : (isnan(_3945) ? 1.0 : min(_3945, 1.0));
    float _3956 = isnan(0.0) ? _1043 : (isnan(_1043) ? 0.0 : max(_1043, 0.0));
    float _1046 = isnan(1.0) ? _3956 : (isnan(_3956) ? 1.0 : min(_3956, 1.0));
    vec4 _1055 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _996, cbSceneParam._m0[86u].y * _997));
    float _1059 = ((isnan(1.0) ? _3890 : (isnan(_3890) ? 1.0 : min(_3890, 1.0))) * TEXCOORD_5.w) * _1055.x;
    float _1060 = dot(vec3(_909, _910, _911), vec3(_988, _989, _990));
    float _1063 = _1060 * 2.0;
    float _1067 = (_1063 * _909) - _988;
    float _1068 = (_1063 * _910) - _989;
    float _1069 = (_1063 * _911) - _990;
    float _1073 = abs(dot(vec3(_988, _989, _990), vec3(_909, _910, _911)));
    float _3967 = isnan(0.0) ? _1073 : (isnan(_1073) ? 0.0 : max(_1073, 0.0));
    float _1075 = sqrt(_912);
    float _1088 = exp2((_1075 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3967 : (isnan(_3967) ? 1.0 : min(_3967, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1075 * 3.0));
    float _1120 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1124 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1128 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1429;
    float _1431;
    float _1432;
    float _1433;
    float _1434;
    float _1435;
    float _1436;
    float _1437;
    float _1438;
    float _1439;
    float _1440;
    float _1441;
    float _1442;
    float _1443;
    float _1444;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1154 = fma(_1128, cbModelParam._m0[26u].z, fma(_1124, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1120));
        float _1158 = fma(_1128, cbModelParam._m0[27u].z, fma(_1124, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1120));
        float _1162 = fma(_1128, cbModelParam._m0[28u].z, fma(_1124, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1120));
        float _1187 = _1120 + _909;
        float _1188 = _1124 + _910;
        float _1189 = _1128 + _911;
        float _1199 = fma(_1189, cbModelParam._m0[26u].z, fma(_1188, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1187)) - _1154;
        float _1200 = fma(_1189, cbModelParam._m0[27u].z, fma(_1188, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1187)) - _1158;
        float _1201 = fma(_1189, cbModelParam._m0[28u].z, fma(_1188, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1187)) - _1162;
        float _1205 = inversesqrt(dot(vec3(_1199, _1200, _1201), vec3(_1199, _1200, _1201)));
        float _1218 = ((_1205 * _1199) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1154 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1219 = ((_1205 * _1200) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1158 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1220 = ((_1205 * _1201) / cbModelParam._m0[34u].z) + ((((((_1162 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1223 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1218, _1219, _1220), 0.0);
        vec4 _1230 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1218, _1219, _1220), 0.0);
        vec4 _1237 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1218, _1219, _1220), 0.0);
        vec4 _1244 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1218, _1219, _1220), 0.0);
        float _1257 = exp2((_1223.w + (-0.5)) * 20.0) * 2.0;
        float _1258 = _1257 * (_1223.x + (-0.5));
        float _1259 = _1257 * (_1223.y + (-0.5));
        float _1260 = _1257 * (_1223.z + (-0.5));
        float _1267 = exp2((_1230.w + (-0.5)) * 20.0) * 2.0;
        float _1268 = _1267 * (_1230.x + (-0.5));
        float _1269 = _1267 * (_1230.y + (-0.5));
        float _1270 = _1267 * (_1230.z + (-0.5));
        float _1277 = exp2((_1237.w + (-0.5)) * 20.0) * 2.0;
        float _1278 = _1277 * (_1237.x + (-0.5));
        float _1279 = _1277 * (_1237.y + (-0.5));
        float _1280 = _1277 * (_1237.z + (-0.5));
        float _1287 = exp2((_1244.w + (-0.5)) * 20.0) * 2.0;
        float _1288 = _1287 * (_1244.x + (-0.5));
        float _1289 = _1287 * (_1244.y + (-0.5));
        float _1290 = _1287 * (_1244.z + (-0.5));
        float _1291 = isnan(0.0) ? _1288 : (isnan(_1288) ? 0.0 : max(_1288, 0.0));
        float _1292 = isnan(0.0) ? _1289 : (isnan(_1289) ? 0.0 : max(_1289, 0.0));
        float _1293 = isnan(0.0) ? _1290 : (isnan(_1290) ? 0.0 : max(_1290, 0.0));
        float _1294 = _1258 * 0.5;
        float _1295 = _1268 * 0.5;
        float _1296 = _1278 * 0.5;
        float _1297 = dot(vec3(_1294, _1295, _1296), vec3(_1294, _1295, _1296));
        float _1302 = (_1297 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1297);
        float _1311 = (dot(vec3(_909, _910, _911), vec3(_1302 * _1294, _1302 * _1295, _1302 * _1296)) + 1.0) * 0.5;
        float _3993 = isnan(0.0) ? _1311 : (isnan(_1311) ? 0.0 : max(_1311, 0.0));
        float _1321 = sqrt(((_1295 * _1295) + (_1294 * _1294)) + (_1296 * _1296)) / (_1291 + 9.9999997473787516355514526367188e-06);
        float _4004 = isnan(0.0) ? _1321 : (isnan(_1321) ? 0.0 : max(_1321, 0.0));
        float _1322 = isnan(1.0) ? _4004 : (isnan(_4004) ? 1.0 : min(_4004, 1.0));
        float _1323 = _1322 * 2.0;
        float _1327 = (1.0 - _1322) / (_1322 + 1.0);
        float _4015 = isnan(0.0) ? _1327 : (isnan(_1327) ? 0.0 : max(_1327, 0.0));
        float _1328 = isnan(1.0) ? _4015 : (isnan(_4015) ? 1.0 : min(_4015, 1.0));
        float _1337 = ((((1.0 - _1328) * (_1323 + 2.0)) * exp2(log2(isnan(1.0) ? _3993 : (isnan(_3993) ? 1.0 : min(_3993, 1.0))) * (_1323 + 1.0))) + _1328) * _1291;
        float _1338 = _1259 * 0.5;
        float _1339 = _1269 * 0.5;
        float _1340 = _1279 * 0.5;
        float _1341 = dot(vec3(_1338, _1339, _1340), vec3(_1338, _1339, _1340));
        float _1346 = (_1341 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1341);
        float _1354 = (dot(vec3(_909, _910, _911), vec3(_1346 * _1338, _1346 * _1339, _1346 * _1340)) + 1.0) * 0.5;
        float _4026 = isnan(0.0) ? _1354 : (isnan(_1354) ? 0.0 : max(_1354, 0.0));
        float _1363 = sqrt(((_1339 * _1339) + (_1338 * _1338)) + (_1340 * _1340)) / (_1292 + 9.9999997473787516355514526367188e-06);
        float _4037 = isnan(0.0) ? _1363 : (isnan(_1363) ? 0.0 : max(_1363, 0.0));
        float _1364 = isnan(1.0) ? _4037 : (isnan(_4037) ? 1.0 : min(_4037, 1.0));
        float _1365 = _1364 * 2.0;
        float _1369 = (1.0 - _1364) / (_1364 + 1.0);
        float _4048 = isnan(0.0) ? _1369 : (isnan(_1369) ? 0.0 : max(_1369, 0.0));
        float _1370 = isnan(1.0) ? _4048 : (isnan(_4048) ? 1.0 : min(_4048, 1.0));
        float _1379 = ((((1.0 - _1370) * (_1365 + 2.0)) * exp2(log2(isnan(1.0) ? _4026 : (isnan(_4026) ? 1.0 : min(_4026, 1.0))) * (_1365 + 1.0))) + _1370) * _1292;
        float _1380 = _1260 * 0.5;
        float _1381 = _1270 * 0.5;
        float _1382 = _1280 * 0.5;
        float _1383 = dot(vec3(_1380, _1381, _1382), vec3(_1380, _1381, _1382));
        float _1388 = (_1383 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1383);
        float _1396 = (dot(vec3(_909, _910, _911), vec3(_1388 * _1380, _1388 * _1381, _1388 * _1382)) + 1.0) * 0.5;
        float _4059 = isnan(0.0) ? _1396 : (isnan(_1396) ? 0.0 : max(_1396, 0.0));
        float _1405 = sqrt(((_1381 * _1381) + (_1380 * _1380)) + (_1382 * _1382)) / (_1293 + 9.9999997473787516355514526367188e-06);
        float _4070 = isnan(0.0) ? _1405 : (isnan(_1405) ? 0.0 : max(_1405, 0.0));
        float _1406 = isnan(1.0) ? _4070 : (isnan(_4070) ? 1.0 : min(_4070, 1.0));
        float _1407 = _1406 * 2.0;
        float _1411 = (1.0 - _1406) / (_1406 + 1.0);
        float _4081 = isnan(0.0) ? _1411 : (isnan(_1411) ? 0.0 : max(_1411, 0.0));
        float _1412 = isnan(1.0) ? _4081 : (isnan(_4081) ? 1.0 : min(_4081, 1.0));
        float _1421 = ((((1.0 - _1412) * (_1407 + 2.0)) * exp2(log2(isnan(1.0) ? _4059 : (isnan(_4059) ? 1.0 : min(_4059, 1.0))) * (_1407 + 1.0))) + _1412) * _1293;
        _1429 = _1260;
        _1431 = _1259;
        _1432 = _1258;
        _1433 = _1270;
        _1434 = _1269;
        _1435 = _1268;
        _1436 = _1280;
        _1437 = _1279;
        _1438 = _1278;
        _1439 = _1293;
        _1440 = _1292;
        _1441 = _1291;
        _1442 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1337 : (isnan(_1337) ? 0.0 : max(_1337, 0.0)));
        _1443 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1379 : (isnan(_1379) ? 0.0 : max(_1379, 0.0)));
        _1444 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1421 : (isnan(_1421) ? 0.0 : max(_1421, 0.0)));
    }
    else
    {
        _1429 = _1430;
        _1431 = _1430;
        _1432 = _1430;
        _1433 = _1430;
        _1434 = _1430;
        _1435 = _1430;
        _1436 = _1430;
        _1437 = _1430;
        _1438 = _1430;
        _1439 = _1430;
        _1440 = _1430;
        _1441 = _1430;
        _1442 = 0.0;
        _1443 = 0.0;
        _1444 = 0.0;
    }
    float _1737;
    float _1738;
    float _1739;
    float _1740;
    float _1741;
    float _1742;
    float _1743;
    float _1744;
    float _1745;
    float _1746;
    float _1747;
    float _1748;
    float _1749;
    float _1750;
    float _1751;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1468 = fma(_1128, cbModelParam._m0[30u].z, fma(_1124, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1120));
        float _1472 = fma(_1128, cbModelParam._m0[31u].z, fma(_1124, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1120));
        float _1476 = fma(_1128, cbModelParam._m0[32u].z, fma(_1124, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1120));
        float _1499 = _1120 + _909;
        float _1500 = _1124 + _910;
        float _1501 = _1128 + _911;
        float _1511 = fma(_1501, cbModelParam._m0[30u].z, fma(_1500, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1499)) - _1468;
        float _1512 = fma(_1501, cbModelParam._m0[31u].z, fma(_1500, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1499)) - _1472;
        float _1513 = fma(_1501, cbModelParam._m0[32u].z, fma(_1500, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1499)) - _1476;
        float _1517 = inversesqrt(dot(vec3(_1511, _1512, _1513), vec3(_1511, _1512, _1513)));
        float _1530 = ((_1517 * _1511) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1468 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1531 = ((_1517 * _1512) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1472 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1532 = ((_1517 * _1513) / cbModelParam._m0[35u].z) + ((((((_1476 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1534 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1530, _1531, _1532), 0.0);
        vec4 _1541 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1530, _1531, _1532), 0.0);
        vec4 _1548 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1530, _1531, _1532), 0.0);
        vec4 _1555 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1530, _1531, _1532), 0.0);
        float _1567 = exp2((_1534.w + (-0.5)) * 20.0) * 2.0;
        float _1568 = _1567 * (_1534.x + (-0.5));
        float _1569 = _1567 * (_1534.y + (-0.5));
        float _1570 = _1567 * (_1534.z + (-0.5));
        float _1577 = exp2((_1541.w + (-0.5)) * 20.0) * 2.0;
        float _1578 = _1577 * (_1541.x + (-0.5));
        float _1579 = _1577 * (_1541.y + (-0.5));
        float _1580 = _1577 * (_1541.z + (-0.5));
        float _1587 = exp2((_1548.w + (-0.5)) * 20.0) * 2.0;
        float _1588 = _1587 * (_1548.x + (-0.5));
        float _1589 = _1587 * (_1548.y + (-0.5));
        float _1590 = _1587 * (_1548.z + (-0.5));
        float _1597 = exp2((_1555.w + (-0.5)) * 20.0) * 2.0;
        float _1598 = _1597 * (_1555.x + (-0.5));
        float _1599 = _1597 * (_1555.y + (-0.5));
        float _1600 = _1597 * (_1555.z + (-0.5));
        float _1601 = isnan(0.0) ? _1598 : (isnan(_1598) ? 0.0 : max(_1598, 0.0));
        float _1602 = isnan(0.0) ? _1599 : (isnan(_1599) ? 0.0 : max(_1599, 0.0));
        float _1603 = isnan(0.0) ? _1600 : (isnan(_1600) ? 0.0 : max(_1600, 0.0));
        float _1604 = _1568 * 0.5;
        float _1605 = _1578 * 0.5;
        float _1606 = _1588 * 0.5;
        float _1607 = dot(vec3(_1604, _1605, _1606), vec3(_1604, _1605, _1606));
        float _1612 = (_1607 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1607);
        float _1620 = (dot(vec3(_909, _910, _911), vec3(_1612 * _1604, _1612 * _1605, _1612 * _1606)) + 1.0) * 0.5;
        float _4122 = isnan(0.0) ? _1620 : (isnan(_1620) ? 0.0 : max(_1620, 0.0));
        float _1629 = sqrt(((_1605 * _1605) + (_1604 * _1604)) + (_1606 * _1606)) / (_1601 + 9.9999997473787516355514526367188e-06);
        float _4133 = isnan(0.0) ? _1629 : (isnan(_1629) ? 0.0 : max(_1629, 0.0));
        float _1630 = isnan(1.0) ? _4133 : (isnan(_4133) ? 1.0 : min(_4133, 1.0));
        float _1631 = _1630 * 2.0;
        float _1635 = (1.0 - _1630) / (_1630 + 1.0);
        float _4144 = isnan(0.0) ? _1635 : (isnan(_1635) ? 0.0 : max(_1635, 0.0));
        float _1636 = isnan(1.0) ? _4144 : (isnan(_4144) ? 1.0 : min(_4144, 1.0));
        float _1645 = ((((1.0 - _1636) * (_1631 + 2.0)) * exp2(log2(isnan(1.0) ? _4122 : (isnan(_4122) ? 1.0 : min(_4122, 1.0))) * (_1631 + 1.0))) + _1636) * _1601;
        float _1646 = _1569 * 0.5;
        float _1647 = _1579 * 0.5;
        float _1648 = _1589 * 0.5;
        float _1649 = dot(vec3(_1646, _1647, _1648), vec3(_1646, _1647, _1648));
        float _1654 = (_1649 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1649);
        float _1662 = (dot(vec3(_909, _910, _911), vec3(_1654 * _1646, _1654 * _1647, _1654 * _1648)) + 1.0) * 0.5;
        float _4155 = isnan(0.0) ? _1662 : (isnan(_1662) ? 0.0 : max(_1662, 0.0));
        float _1671 = sqrt(((_1647 * _1647) + (_1646 * _1646)) + (_1648 * _1648)) / (_1602 + 9.9999997473787516355514526367188e-06);
        float _4166 = isnan(0.0) ? _1671 : (isnan(_1671) ? 0.0 : max(_1671, 0.0));
        float _1672 = isnan(1.0) ? _4166 : (isnan(_4166) ? 1.0 : min(_4166, 1.0));
        float _1673 = _1672 * 2.0;
        float _1677 = (1.0 - _1672) / (_1672 + 1.0);
        float _4177 = isnan(0.0) ? _1677 : (isnan(_1677) ? 0.0 : max(_1677, 0.0));
        float _1678 = isnan(1.0) ? _4177 : (isnan(_4177) ? 1.0 : min(_4177, 1.0));
        float _1687 = ((((1.0 - _1678) * (_1673 + 2.0)) * exp2(log2(isnan(1.0) ? _4155 : (isnan(_4155) ? 1.0 : min(_4155, 1.0))) * (_1673 + 1.0))) + _1678) * _1602;
        float _1688 = _1570 * 0.5;
        float _1689 = _1580 * 0.5;
        float _1690 = _1590 * 0.5;
        float _1691 = dot(vec3(_1688, _1689, _1690), vec3(_1688, _1689, _1690));
        float _1696 = (_1691 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1691);
        float _1704 = (dot(vec3(_909, _910, _911), vec3(_1696 * _1688, _1696 * _1689, _1696 * _1690)) + 1.0) * 0.5;
        float _4188 = isnan(0.0) ? _1704 : (isnan(_1704) ? 0.0 : max(_1704, 0.0));
        float _1713 = sqrt(((_1689 * _1689) + (_1688 * _1688)) + (_1690 * _1690)) / (_1603 + 9.9999997473787516355514526367188e-06);
        float _4199 = isnan(0.0) ? _1713 : (isnan(_1713) ? 0.0 : max(_1713, 0.0));
        float _1714 = isnan(1.0) ? _4199 : (isnan(_4199) ? 1.0 : min(_4199, 1.0));
        float _1715 = _1714 * 2.0;
        float _1719 = (1.0 - _1714) / (_1714 + 1.0);
        float _4210 = isnan(0.0) ? _1719 : (isnan(_1719) ? 0.0 : max(_1719, 0.0));
        float _1720 = isnan(1.0) ? _4210 : (isnan(_4210) ? 1.0 : min(_4210, 1.0));
        float _1729 = ((((1.0 - _1720) * (_1715 + 2.0)) * exp2(log2(isnan(1.0) ? _4188 : (isnan(_4188) ? 1.0 : min(_4188, 1.0))) * (_1715 + 1.0))) + _1720) * _1603;
        _1737 = _1570;
        _1738 = _1569;
        _1739 = _1568;
        _1740 = _1580;
        _1741 = _1579;
        _1742 = _1578;
        _1743 = _1590;
        _1744 = _1589;
        _1745 = _1588;
        _1746 = _1603;
        _1747 = _1602;
        _1748 = _1601;
        _1749 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1645 : (isnan(_1645) ? 0.0 : max(_1645, 0.0)));
        _1750 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1687 : (isnan(_1687) ? 0.0 : max(_1687, 0.0)));
        _1751 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1729 : (isnan(_1729) ? 0.0 : max(_1729, 0.0)));
    }
    else
    {
        _1737 = _1430;
        _1738 = _1430;
        _1739 = _1430;
        _1740 = _1430;
        _1741 = _1430;
        _1742 = _1430;
        _1743 = _1430;
        _1744 = _1430;
        _1745 = _1430;
        _1746 = _1430;
        _1747 = _1430;
        _1748 = _1430;
        _1749 = 0.0;
        _1750 = 0.0;
        _1751 = 0.0;
    }
    float _1761 = (cbModelParam._m0[1u].x * (_1749 - _1442)) + _1442;
    float _1762 = (cbModelParam._m0[1u].x * (_1750 - _1443)) + _1443;
    float _1763 = (cbModelParam._m0[1u].x * (_1751 - _1444)) + _1444;
    float _1784 = fma(_1763, cbSceneParam._m0[89u].z, fma(_1762, cbSceneParam._m0[89u].y, _1761 * cbSceneParam._m0[89u].x));
    float _1787 = fma(_1763, cbSceneParam._m0[90u].z, fma(_1762, cbSceneParam._m0[90u].y, _1761 * cbSceneParam._m0[90u].x));
    float _1790 = fma(_1763, cbSceneParam._m0[91u].z, fma(_1762, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1761));
    float _1805 = _1067 * 0.5;
    float _1806 = _1068 * 0.5;
    float _1807 = _1069 * 0.5;
    float _1808 = dot(vec4(_1805, _1806, _1807, 1.0), vec4(_1739, _1742, _1745, _1748));
    float _1811 = dot(vec4(_1805, _1806, _1807, 1.0), vec4(_1738, _1741, _1744, _1747));
    float _1814 = dot(vec4(_1805, _1806, _1807, 1.0), vec4(_1737, _1740, _1743, _1746));
    float _1848;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1821 = dot(vec4(_1805, _1806, _1807, 1.0), vec4(_1429, _1433, _1436, _1439));
        float _1825 = dot(vec4(_1805, _1806, _1807, 1.0), vec4(_1431, _1434, _1437, _1440));
        float _1829 = dot(vec4(_1805, _1806, _1807, 1.0), vec4(_1432, _1435, _1438, _1441));
        float _1836 = dot(vec4(cbModelParam._m0[39u]), vec4(_1805, _1806, _1807, 1.0));
        _1848 = dot(vec3(isnan(0.0) ? _1829 : (isnan(_1829) ? 0.0 : max(_1829, 0.0)), isnan(0.0) ? _1825 : (isnan(_1825) ? 0.0 : max(_1825, 0.0)), isnan(0.0) ? _1821 : (isnan(_1821) ? 0.0 : max(_1821, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1836) ? 0.0 : (isnan(0.0) ? _1836 : max(0.0, _1836))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1848 = 1.0;
    }
    float _1859;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1850 = dot(vec4(cbModelParam._m0[40u]), vec4(_1805, _1806, _1807, 1.0));
        _1859 = dot(vec3(isnan(0.0) ? _1808 : (isnan(_1808) ? 0.0 : max(_1808, 0.0)), isnan(0.0) ? _1811 : (isnan(_1811) ? 0.0 : max(_1811, 0.0)), isnan(0.0) ? _1814 : (isnan(_1814) ? 0.0 : max(_1814, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1850) ? 0.0 : (isnan(0.0) ? _1850 : max(0.0, _1850))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1859 = 1.0;
    }
    float _1863 = (_1859 * cbModelParam._m0[1u].x) + (_1848 * (1.0 - cbModelParam._m0[1u].x));
    float _1873 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _912);
    float _1874 = isnan(_1873) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1873 : min(cbModelParam._m0[25u].z, _1873));
    float _1955;
    float _1957;
    float _1959;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1922 = fma(_1128, cbModelParam._m0[13u].z, fma(_1124, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1120)) + cbModelParam._m0[13u].w;
        float _1926 = fma(_1128, cbModelParam._m0[14u].z, fma(_1124, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1120)) + cbModelParam._m0[14u].w;
        float _1930 = fma(_1128, cbModelParam._m0[15u].z, fma(_1124, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1120)) + cbModelParam._m0[15u].w;
        float _1933 = fma(_1069, cbModelParam._m0[13u].z, fma(_1068, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1067));
        float _1936 = fma(_1069, cbModelParam._m0[14u].z, fma(_1068, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1067));
        float _1939 = fma(_1069, cbModelParam._m0[15u].z, fma(_1068, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1067));
        float _1967;
        if (_1933 > 0.0)
        {
            _1967 = abs((1.0 - _1922) / _1933);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1933 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1922 + 1.0) / _1933);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1967 = frontier_phi_14_12_ladder;
        }
        float _2189;
        if (_1936 > 0.0)
        {
            _2189 = abs((1.0 - _1926) / _1936);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1936 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1926 + 1.0) / _1936);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2189 = frontier_phi_23_19_ladder;
        }
        float _2435;
        if (_1939 > 0.0)
        {
            _2435 = abs((1.0 - _1930) / _1939);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1939 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1930 + 1.0) / _1939);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2435 = frontier_phi_35_30_ladder;
        }
        float _2437 = isnan(_2189) ? _1967 : (isnan(_1967) ? _2189 : min(_1967, _2189));
        float _2438 = isnan(_2435) ? _2437 : (isnan(_2437) ? _2435 : min(_2437, _2435));
        float _2442 = (_2438 * _1933) + _1922;
        float _2443 = (_2438 * _1936) + _1926;
        float _2444 = (_2438 * _1939) + _1930;
        float _2445 = _2438 * 9.9999997473787516355514526367188e-05;
        float _2447 = (-1.0) - _2445;
        float _2449 = _2445 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2444 > _2449) || ((_2444 < _2447) || ((_2443 > _2449) || ((_2443 < _2447) || ((_2442 < _2447) || (_2442 > _2449))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2568 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2444, cbModelParam._m0[9u].z, fma(_2443, cbModelParam._m0[9u].y, _2442 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2444, cbModelParam._m0[10u].z, fma(_2443, cbModelParam._m0[10u].y, _2442 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2444, cbModelParam._m0[11u].z, fma(_2443, cbModelParam._m0[11u].y, _2442 * cbModelParam._m0[11u].x))), _1874);
            frontier_phi_13_35_ladder = _2568.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2568.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2568.x * cbModelParam._m0[1u].y;
        }
        _1955 = frontier_phi_13_35_ladder_2;
        _1957 = frontier_phi_13_35_ladder_1;
        _1959 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1943 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1067, _1068, _1069), _1874);
        _1955 = _1943.x * cbModelParam._m0[1u].y;
        _1957 = _1943.y * cbModelParam._m0[1u].y;
        _1959 = _1943.z * cbModelParam._m0[1u].y;
    }
    float _1963 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _912);
    float _1964 = isnan(_1963) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1963 : min(cbModelParam._m0[25u].w, _1963));
    float _2054;
    float _2056;
    float _2058;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2018 = fma(_1128, cbModelParam._m0[21u].z, fma(_1124, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1120)) + cbModelParam._m0[21u].w;
        float _2022 = fma(_1128, cbModelParam._m0[22u].z, fma(_1124, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1120)) + cbModelParam._m0[22u].w;
        float _2026 = fma(_1128, cbModelParam._m0[23u].z, fma(_1124, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1120)) + cbModelParam._m0[23u].w;
        float _2029 = fma(_1069, cbModelParam._m0[21u].z, fma(_1068, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1067));
        float _2032 = fma(_1069, cbModelParam._m0[22u].z, fma(_1068, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1067));
        float _2035 = fma(_1069, cbModelParam._m0[23u].z, fma(_1068, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1067));
        float _2194;
        if (_2029 > 0.0)
        {
            _2194 = abs((1.0 - _2018) / _2029);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_2029 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_2018 + 1.0) / _2029);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2194 = frontier_phi_25_21_ladder;
        }
        float _2462;
        if (_2032 > 0.0)
        {
            _2462 = abs((1.0 - _2022) / _2032);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_2032 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_2022 + 1.0) / _2032);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2462 = frontier_phi_37_32_ladder;
        }
        float _2667;
        if (_2035 > 0.0)
        {
            _2667 = abs((1.0 - _2026) / _2035);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_2035 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_2026 + 1.0) / _2035);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2667 = frontier_phi_46_43_ladder;
        }
        float _2669 = isnan(_2462) ? _2194 : (isnan(_2194) ? _2462 : min(_2194, _2462));
        float _2670 = isnan(_2667) ? _2669 : (isnan(_2669) ? _2667 : min(_2669, _2667));
        float _2674 = (_2670 * _2029) + _2018;
        float _2675 = (_2670 * _2032) + _2022;
        float _2676 = (_2670 * _2035) + _2026;
        float _2677 = _2670 * 9.9999997473787516355514526367188e-05;
        float _2678 = (-1.0) - _2677;
        float _2680 = _2677 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2676 > _2680) || ((_2676 < _2678) || ((_2675 > _2680) || ((_2675 < _2678) || ((_2674 < _2678) || (_2674 > _2680))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2875 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2676, cbModelParam._m0[17u].z, fma(_2675, cbModelParam._m0[17u].y, _2674 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2676, cbModelParam._m0[18u].z, fma(_2675, cbModelParam._m0[18u].y, _2674 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2676, cbModelParam._m0[19u].z, fma(_2675, cbModelParam._m0[19u].y, _2674 * cbModelParam._m0[19u].x))), _1964);
            frontier_phi_22_46_ladder = _2875.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2875.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2875.x * cbModelParam._m0[1u].z;
        }
        _2054 = frontier_phi_22_46_ladder_2;
        _2056 = frontier_phi_22_46_ladder_1;
        _2058 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _2038 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1067, _1068, _1069), _1964);
        _2054 = _2038.x * cbModelParam._m0[1u].z;
        _2056 = _2038.y * cbModelParam._m0[1u].z;
        _2058 = _2038.z * cbModelParam._m0[1u].z;
    }
    float _2070 = ((((1.0 - _1088) * ((_1075 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_1088 * _1075)) * _1059;
    float _2071 = _2070 * ((cbModelParam._m0[1u].w * (_2054 - _1955)) + _1955);
    float _2072 = _2070 * ((cbModelParam._m0[1u].w * (_2056 - _1957)) + _1957);
    float _2073 = _2070 * ((cbModelParam._m0[1u].w * (_2058 - _1959)) + _1959);
    float _2076 = fma(_2073, cbSceneParam._m0[89u].z, fma(_2072, cbSceneParam._m0[89u].y, _2071 * cbSceneParam._m0[89u].x));
    float _2079 = fma(_2073, cbSceneParam._m0[90u].z, fma(_2072, cbSceneParam._m0[90u].y, _2071 * cbSceneParam._m0[90u].x));
    float _2082 = fma(_2073, cbSceneParam._m0[91u].z, fma(_2072, cbSceneParam._m0[91u].y, _2071 * cbSceneParam._m0[91u].x));
    vec4 _2090 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_996, _997));
    float _2092 = _2090.w;
    float _2104 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _2092);
    float _2105 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _2092);
    float _2106 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _2092);
    uvec4 _2110 = floatBitsToUint(cbInstanceData._m0[_283 + 5u]);
    uint _2112 = _2110.x * 14u;
    uint _2113 = _2112 + 13u;
    float _2120 = _1059 + (-1.0);
    float _2125 = (cbLight._m0[_2113].x * _2120) + 1.0;
    float _2126 = (cbLight._m0[_2113].y * _2120) + 1.0;
    float _2127 = (cbLight._m0[_2113].z * _2120) + 1.0;
    float _2128 = (cbLight._m0[_2113].w * _2120) + 1.0;
    uint _2129 = _2112 + 5u;
    float _2135 = isnan(1.0) ? _2126 : (isnan(_2126) ? 1.0 : min(_2126, 1.0));
    uint _2139 = _2112 + 4u;
    float _2148 = isnan(1.0) ? _2125 : (isnan(_2125) ? 1.0 : min(_2125, 1.0));
    uint _2152 = _2112 | 1u;
    float _2163 = dot(vec3(cbLight._m0[_2112].xyz), vec3(_909, _910, _911));
    float _2166 = dot(vec3(cbLight._m0[_2152].xyz), vec3(_909, _910, _911));
    float _4346 = isnan(0.0) ? _2163 : (isnan(_2163) ? 0.0 : max(_2163, 0.0));
    float _4357 = isnan(0.0) ? _2166 : (isnan(_2166) ? 0.0 : max(_2166, 0.0));
    float _2171 = (isnan(1.0) ? _4346 : (isnan(_4346) ? 1.0 : min(_4346, 1.0))) * 0.3183098733425140380859375;
    float _2173 = (isnan(1.0) ? _4357 : (isnan(_4357) ? 1.0 : min(_4357, 1.0))) * 0.3183098733425140380859375;
    float _2180 = ((cbLight._m0[_2129].x * _2135) * _2173) + (((cbLight._m0[_2139].x * _2104) * _2148) * _2171);
    float _2181 = ((_2135 * cbLight._m0[_2129].y) * _2173) + (((cbLight._m0[_2139].y * _2105) * _2148) * _2171);
    float _2182 = ((_2135 * cbLight._m0[_2129].z) * _2173) + (((cbLight._m0[_2139].z * _2106) * _2148) * _2171);
    uvec4 _2186 = floatBitsToUint(cbLight._m0[_2112 + 12u]);
    bool _2188 = _2186.x == 0u;
    float _2199;
    float _2201;
    float _2203;
    if (_2188)
    {
        _2199 = _2180;
        _2201 = _2181;
        _2203 = _2182;
    }
    else
    {
        uint _2207 = _2112 + 6u;
        float _2223 = (dot(vec3(cbLight._m0[_2112 + 2u].xyz), vec3(_909, _910, _911)) * 0.5) + 0.5;
        float _2224 = _2223 * _2223;
        float _4368 = isnan(0.0) ? _2224 : (isnan(_2224) ? 0.0 : max(_2224, 0.0));
        float _2225 = isnan(1.0) ? _4368 : (isnan(_4368) ? 1.0 : min(_4368, 1.0));
        float _2226 = isnan(1.0) ? _2127 : (isnan(_2127) ? 1.0 : min(_2127, 1.0));
        _2199 = (((cbLight._m0[_2207].x * 0.3183098733425140380859375) * _2225) * _2226) + _2180;
        _2201 = (((cbLight._m0[_2207].y * 0.3183098733425140380859375) * _2225) * _2226) + _2181;
        _2203 = (((cbLight._m0[_2207].z * 0.3183098733425140380859375) * _2225) * _2226) + _2182;
    }
    bool _2206 = _2186.y == 0u;
    float _2244;
    float _2246;
    float _2248;
    if (_2206)
    {
        _2244 = _2199;
        _2246 = _2201;
        _2248 = _2203;
    }
    else
    {
        uint _2406 = _2112 + 7u;
        float _2422 = (dot(vec3(cbLight._m0[_2112 + 3u].xyz), vec3(_909, _910, _911)) * 0.5) + 0.5;
        float _2423 = _2422 * _2422;
        float _4384 = isnan(0.0) ? _2423 : (isnan(_2423) ? 0.0 : max(_2423, 0.0));
        float _2424 = isnan(1.0) ? _4384 : (isnan(_4384) ? 1.0 : min(_4384, 1.0));
        float _2425 = isnan(1.0) ? _2128 : (isnan(_2128) ? 1.0 : min(_2128, 1.0));
        _2244 = (((cbLight._m0[_2406].x * 0.3183098733425140380859375) * _2424) * _2425) + _2199;
        _2246 = (((cbLight._m0[_2406].y * 0.3183098733425140380859375) * _2424) * _2425) + _2201;
        _2248 = (((cbLight._m0[_2406].z * 0.3183098733425140380859375) * _2424) * _2425) + _2203;
    }
    uint _2251 = _2112 + 8u;
    float _2264 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2112].w)) * _912) * 0.949999988079071044921875);
    float _2265 = _2264 * _2264;
    float _2266 = cbLight._m0[_2112].x + _988;
    float _2267 = cbLight._m0[_2112].y + _989;
    float _2268 = cbLight._m0[_2112].z + _990;
    float _2272 = inversesqrt(dot(vec3(_2266, _2267, _2268), vec3(_2266, _2267, _2268)));
    float _2273 = _2272 * _2266;
    float _2274 = _2272 * _2267;
    float _2275 = _2272 * _2268;
    float _2276 = dot(vec3(_909, _910, _911), vec3(cbLight._m0[_2112].xyz));
    float _4400 = isnan(0.0) ? _2276 : (isnan(_2276) ? 0.0 : max(_2276, 0.0));
    float _2279 = isnan(1.0) ? _4400 : (isnan(_4400) ? 1.0 : min(_4400, 1.0));
    float _4411 = isnan(0.0) ? _1060 : (isnan(_1060) ? 0.0 : max(_1060, 0.0));
    float _2280 = isnan(1.0) ? _4411 : (isnan(_4411) ? 1.0 : min(_4411, 1.0));
    float _2281 = dot(vec3(_909, _910, _911), vec3(_2273, _2274, _2275));
    float _4422 = isnan(0.0) ? _2281 : (isnan(_2281) ? 0.0 : max(_2281, 0.0));
    float _2284 = isnan(1.0) ? _4422 : (isnan(_4422) ? 1.0 : min(_4422, 1.0));
    float _2285 = dot(vec3(cbLight._m0[_2112].xyz), vec3(_2273, _2274, _2275));
    float _4433 = isnan(0.0) ? _2285 : (isnan(_2285) ? 0.0 : max(_2285, 0.0));
    float _2289 = _2265 * _2265;
    float _2293 = ((_2284 * _2284) * (_2289 + (-1.0))) + 1.0;
    float _2304 = (exp2(log2(1.0 - (isnan(1.0) ? _4433 : (isnan(_4433) ? 1.0 : min(_4433, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2305 = 1.0 - _2265;
    float _2316 = (0.5 / (((_2280 * ((_2279 * _2305) + _2265)) + 9.9999999392252902907785028219223e-09) + (((_2280 * _2305) + _2265) * _2279))) * _2279;
    float _4444 = isnan(0.0) ? _2316 : (isnan(_2316) ? 0.0 : max(_2316, 0.0));
    float _2318 = (isnan(1.0) ? _4444 : (isnan(_4444) ? 1.0 : min(_4444, 1.0))) * (_2289 / ((_2293 * _2293) * 3.141590118408203125));
    uint _2332 = _2112 + 9u;
    float _2343 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2152].w)) * _912) * 0.949999988079071044921875);
    float _2344 = _2343 * _2343;
    float _2345 = cbLight._m0[_2152].x + _988;
    float _2346 = cbLight._m0[_2152].y + _989;
    float _2347 = cbLight._m0[_2152].z + _990;
    float _2351 = inversesqrt(dot(vec3(_2345, _2346, _2347), vec3(_2345, _2346, _2347)));
    float _2352 = _2351 * _2345;
    float _2353 = _2351 * _2346;
    float _2354 = _2351 * _2347;
    float _2355 = dot(vec3(_909, _910, _911), vec3(cbLight._m0[_2152].xyz));
    float _4455 = isnan(0.0) ? _2355 : (isnan(_2355) ? 0.0 : max(_2355, 0.0));
    float _2358 = isnan(1.0) ? _4455 : (isnan(_4455) ? 1.0 : min(_4455, 1.0));
    float _2359 = dot(vec3(_909, _910, _911), vec3(_2352, _2353, _2354));
    float _4466 = isnan(0.0) ? _2359 : (isnan(_2359) ? 0.0 : max(_2359, 0.0));
    float _2362 = isnan(1.0) ? _4466 : (isnan(_4466) ? 1.0 : min(_4466, 1.0));
    float _2363 = dot(vec3(cbLight._m0[_2152].xyz), vec3(_2352, _2353, _2354));
    float _4477 = isnan(0.0) ? _2363 : (isnan(_2363) ? 0.0 : max(_2363, 0.0));
    float _2367 = _2344 * _2344;
    float _2371 = ((_2362 * _2362) * (_2367 + (-1.0))) + 1.0;
    float _2380 = (exp2(log2(1.0 - (isnan(1.0) ? _4477 : (isnan(_4477) ? 1.0 : min(_4477, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2381 = 1.0 - _2344;
    float _2391 = (0.5 / (((_2280 * ((_2358 * _2381) + _2344)) + 9.9999999392252902907785028219223e-09) + (((_2280 * _2381) + _2344) * _2358))) * _2358;
    float _4488 = isnan(0.0) ? _2391 : (isnan(_2391) ? 0.0 : max(_2391, 0.0));
    float _2393 = (isnan(1.0) ? _4488 : (isnan(_4488) ? 1.0 : min(_4488, 1.0))) * (_2367 / ((_2371 * _2371) * 3.141590118408203125));
    float _2403 = (((_2380 * cbLight._m0[_2332].x) * _2393) * _2135) + ((((cbLight._m0[_2251].x * _2104) * _2304) * _2318) * _2148);
    float _2404 = (((_2380 * cbLight._m0[_2332].y) * _2393) * _2135) + ((((cbLight._m0[_2251].y * _2105) * _2304) * _2318) * _2148);
    float _2405 = (((_2380 * cbLight._m0[_2332].z) * _2393) * _2135) + ((((cbLight._m0[_2251].z * _2106) * _2304) * _2318) * _2148);
    float _2467;
    float _2469;
    float _2471;
    if (_2188)
    {
        _2467 = _2403;
        _2469 = _2404;
        _2471 = _2405;
    }
    else
    {
        uint _2473 = _2112 + 2u;
        uint _2477 = _2112 + 10u;
        float _2491 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2473].w)) * _912) * 0.949999988079071044921875);
        float _2492 = _2491 * _2491;
        float _2493 = cbLight._m0[_2473].x + _988;
        float _2494 = cbLight._m0[_2473].y + _989;
        float _2495 = cbLight._m0[_2473].z + _990;
        float _2499 = inversesqrt(dot(vec3(_2493, _2494, _2495), vec3(_2493, _2494, _2495)));
        float _2500 = _2499 * _2493;
        float _2501 = _2499 * _2494;
        float _2502 = _2499 * _2495;
        float _2503 = dot(vec3(_909, _910, _911), vec3(cbLight._m0[_2473].xyz));
        float _4499 = isnan(0.0) ? _2503 : (isnan(_2503) ? 0.0 : max(_2503, 0.0));
        float _2506 = isnan(1.0) ? _4499 : (isnan(_4499) ? 1.0 : min(_4499, 1.0));
        float _2507 = dot(vec3(_909, _910, _911), vec3(_2500, _2501, _2502));
        float _4510 = isnan(0.0) ? _2507 : (isnan(_2507) ? 0.0 : max(_2507, 0.0));
        float _2510 = isnan(1.0) ? _4510 : (isnan(_4510) ? 1.0 : min(_4510, 1.0));
        float _2511 = dot(vec3(cbLight._m0[_2473].xyz), vec3(_2500, _2501, _2502));
        float _4521 = isnan(0.0) ? _2511 : (isnan(_2511) ? 0.0 : max(_2511, 0.0));
        float _2515 = _2492 * _2492;
        float _2519 = ((_2510 * _2510) * (_2515 + (-1.0))) + 1.0;
        float _2528 = (exp2(log2(1.0 - (isnan(1.0) ? _4521 : (isnan(_4521) ? 1.0 : min(_4521, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2529 = 1.0 - _2492;
        float _2539 = (0.5 / (((_2280 * ((_2506 * _2529) + _2492)) + 9.9999999392252902907785028219223e-09) + (((_2280 * _2529) + _2492) * _2506))) * _2506;
        float _4532 = isnan(0.0) ? _2539 : (isnan(_2539) ? 0.0 : max(_2539, 0.0));
        float _2541 = (isnan(1.0) ? _4532 : (isnan(_4532) ? 1.0 : min(_4532, 1.0))) * (_2515 / ((_2519 * _2519) * 3.141590118408203125));
        float _2542 = isnan(1.0) ? _2127 : (isnan(_2127) ? 1.0 : min(_2127, 1.0));
        _2467 = (((_2528 * cbLight._m0[_2477].x) * _2541) * _2542) + _2403;
        _2469 = (((_2528 * cbLight._m0[_2477].y) * _2541) * _2542) + _2404;
        _2471 = (((_2528 * cbLight._m0[_2477].z) * _2541) * _2542) + _2405;
    }
    float _2577;
    float _2579;
    float _2581;
    if (_2206)
    {
        _2577 = _2467;
        _2579 = _2469;
        _2581 = _2471;
    }
    else
    {
        uint _2588 = _2112 + 3u;
        uint _2592 = _2112 + 11u;
        float _2606 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2588].w)) * _912) * 0.949999988079071044921875);
        float _2607 = _2606 * _2606;
        float _2608 = cbLight._m0[_2588].x + _988;
        float _2609 = cbLight._m0[_2588].y + _989;
        float _2610 = cbLight._m0[_2588].z + _990;
        float _2614 = inversesqrt(dot(vec3(_2608, _2609, _2610), vec3(_2608, _2609, _2610)));
        float _2615 = _2614 * _2608;
        float _2616 = _2614 * _2609;
        float _2617 = _2614 * _2610;
        float _2618 = dot(vec3(_909, _910, _911), vec3(cbLight._m0[_2588].xyz));
        float _4548 = isnan(0.0) ? _2618 : (isnan(_2618) ? 0.0 : max(_2618, 0.0));
        float _2621 = isnan(1.0) ? _4548 : (isnan(_4548) ? 1.0 : min(_4548, 1.0));
        float _2622 = dot(vec3(_909, _910, _911), vec3(_2615, _2616, _2617));
        float _4559 = isnan(0.0) ? _2622 : (isnan(_2622) ? 0.0 : max(_2622, 0.0));
        float _2625 = isnan(1.0) ? _4559 : (isnan(_4559) ? 1.0 : min(_4559, 1.0));
        float _2626 = dot(vec3(cbLight._m0[_2588].xyz), vec3(_2615, _2616, _2617));
        float _4570 = isnan(0.0) ? _2626 : (isnan(_2626) ? 0.0 : max(_2626, 0.0));
        float _2630 = _2607 * _2607;
        float _2634 = ((_2625 * _2625) * (_2630 + (-1.0))) + 1.0;
        float _2643 = (exp2(log2(1.0 - (isnan(1.0) ? _4570 : (isnan(_4570) ? 1.0 : min(_4570, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2644 = 1.0 - _2607;
        float _2654 = (0.5 / (((_2280 * ((_2621 * _2644) + _2607)) + 9.9999999392252902907785028219223e-09) + (((_2280 * _2644) + _2607) * _2621))) * _2621;
        float _4581 = isnan(0.0) ? _2654 : (isnan(_2654) ? 0.0 : max(_2654, 0.0));
        float _2656 = (isnan(1.0) ? _4581 : (isnan(_4581) ? 1.0 : min(_4581, 1.0))) * (_2630 / ((_2634 * _2634) * 3.141590118408203125));
        float _2657 = isnan(1.0) ? _2128 : (isnan(_2128) ? 1.0 : min(_2128, 1.0));
        _2577 = (((_2643 * cbLight._m0[_2592].x) * _2656) * _2657) + _2467;
        _2579 = (((_2643 * cbLight._m0[_2592].y) * _2656) * _2657) + _2469;
        _2581 = (((_2643 * cbLight._m0[_2592].z) * _2656) * _2657) + _2471;
    }
    float _2792;
    float _2794;
    float _2796;
    float _2798;
    float _2800;
    float _2802;
    if (_2110.y == 0u)
    {
        float _2732 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2733 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2732;
        float _2734 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2732;
        float _2735 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2732;
        uvec4 _2747 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2748 = _2747.x;
        uint _2759 = uint((float(_2747.y) * floor(float(uint(cbSceneParam._m0[85u].y * _997) / _2748))) + floor(float(uint(cbSceneParam._m0[85u].x * _996) / _2748)));
        float _2769 = (log2(_2735 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2770 = isnan(0.0) ? _2769 : (isnan(_2769) ? 0.0 : max(_2769, 0.0));
        uint _2773 = uint(isnan(14.0) ? _2770 : (isnan(_2770) ? 14.0 : min(_2770, 14.0)));
        uvec4 _2778 = texelFetch(g_lightClusterGridBuffer, int(((_2773 << 2u) + (_2759 << 6u)) >> 2u));
        uint _2779 = _2778.x;
        uint _2780 = _2747.z;
        float _2880;
        float _2882;
        float _2884;
        float _2886;
        float _2888;
        float _2890;
        if (((((1u << ((_2780 >> 4u) & 15u)) + 4294967295u) & _2779) == 0u) || ((_2780 & 240u) == 0u))
        {
            _2880 = 0.0;
            _2882 = 0.0;
            _2884 = 0.0;
            _2886 = 0.0;
            _2888 = 0.0;
            _2890 = 0.0;
        }
        else
        {
            float _2881;
            float _2883;
            float _2885;
            float _2887;
            float _2889;
            float _2891;
            float _3025 = 0.0;
            float _3026 = 0.0;
            float _3027 = 0.0;
            float _3028 = 0.0;
            float _3029 = 0.0;
            float _3030 = 0.0;
            uint _3031 = 0u;
            uint _3040;
            bool _3041;
            for (;;)
            {
                _3040 = texelFetch(g_lightClassification, int((((_2773 << 5u) + (_2759 << 9u)) + (_3031 << 2u)) >> 2u)).x;
                _3041 = _3040 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_3041)
                {
                    frontier_phi_61_pred = _3025;
                    frontier_phi_61_pred_1 = _3030;
                    frontier_phi_61_pred_2 = _3029;
                    frontier_phi_61_pred_3 = _3028;
                    frontier_phi_61_pred_4 = _3027;
                    frontier_phi_61_pred_5 = _3026;
                }
                else
                {
                    float _3149;
                    float _3150;
                    float _3151;
                    float _3152;
                    float _3153;
                    float _3154;
                    uint _3155;
                    _3149 = _3025;
                    _3150 = _3026;
                    _3151 = _3027;
                    _3152 = _3028;
                    _3153 = _3029;
                    _3154 = _3030;
                    _3155 = _3040;
                    float _3081;
                    float _3082;
                    float _3083;
                    float _3084;
                    float _3085;
                    float _3086;
                    for (;;)
                    {
                        uint _3159 = uint(findLSB(_3155)) + (_3031 << 5u);
                        uint _3156 = (_3155 + 4294967295u) & _3155;
                        uint _3161 = _3159 * 48u;
                        vec4 _3175 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3161)).x, texelFetch(g_PointLightRenderingBuffer, int(_3161 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3161 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3161 + 3u)).x));
                        uint _3181 = (_3159 * 48u) + 4u;
                        vec4 _3194 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3181)).x, texelFetch(g_PointLightRenderingBuffer, int(_3181 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3181 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3181 + 3u)).x));
                        uint _3200 = (_3159 * 48u) + 8u;
                        vec3 _3211 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3200)).x, texelFetch(g_PointLightRenderingBuffer, int(_3200 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3200 + 2u)).x));
                        float _3215 = _3175.x - _2733;
                        float _3216 = _3175.y - _2734;
                        float _3217 = _3175.z - _2735;
                        float _3218 = dot(vec3(_3215, _3216, _3217), vec3(_3215, _3216, _3217));
                        float _3221 = inversesqrt(_3218);
                        float _3222 = _3221 * _3215;
                        float _3223 = _3221 * _3216;
                        float _3224 = _3221 * _3217;
                        float _3225 = dot(vec3(_1015, _1018, _1021), vec3(_3222, _3223, _3224));
                        float _3230 = 1.0 - (_3218 * _3175.w);
                        float _4607 = isnan(0.0) ? _3230 : (isnan(_3230) ? 0.0 : max(_3230, 0.0));
                        float _3231 = isnan(1.0) ? _4607 : (isnan(_4607) ? 1.0 : min(_4607, 1.0));
                        float _3232 = sqrt(_3218) * _3194.w;
                        float _3235 = 1.39999997615814208984375 / (_3232 + 1.39999997615814208984375);
                        float _3236 = _3235 * _3235;
                        float _3239 = ((1.0 - _3236) * _3225) + _3236;
                        float _3242 = _3232 * _3232;
                        float _3246 = ((isnan(0.0) ? _3239 : (isnan(_3239) ? 0.0 : max(_3239, 0.0))) * _3231) / ((_3242 * 0.699999988079071044921875) + 1.0);
                        float _3250 = (-0.0) - _2733;
                        float _3251 = (-0.0) - _2734;
                        float _3252 = (-0.0) - _2735;
                        float _3256 = inversesqrt(dot(vec3(_3250, _3251, _3252), vec3(_3250, _3251, _3252)));
                        float _3257 = _3256 * _3250;
                        float _3258 = _3256 * _3251;
                        float _3259 = _3256 * _3252;
                        float _3267 = exp2(log2(1.0 / ((_3242 * 3.5) + 5.0)) * 0.25);
                        float _3268 = 1.0 - _1075;
                        float _3275 = sqrt(1.0 - ((1.0 - (_3268 * _3268)) * (1.0 - (_3267 * _3267))));
                        float _3276 = _3275 * _3275;
                        float _3277 = _3276 * _3276;
                        float _3278 = _3257 + _3222;
                        float _3279 = _3258 + _3223;
                        float _3280 = _3259 + _3224;
                        float _3284 = inversesqrt(dot(vec3(_3278, _3279, _3280), vec3(_3278, _3279, _3280)));
                        float _3288 = dot(vec3(_1015, _1018, _1021), vec3(_3257, _3258, _3259));
                        float _4623 = isnan(0.0) ? _3288 : (isnan(_3288) ? 0.0 : max(_3288, 0.0));
                        float _3291 = isnan(1.0) ? _4623 : (isnan(_4623) ? 1.0 : min(_4623, 1.0));
                        float _3292 = dot(vec3(_1015, _1018, _1021), vec3(_3284 * _3278, _3284 * _3279, _3284 * _3280));
                        float _4634 = isnan(0.0) ? _3292 : (isnan(_3292) ? 0.0 : max(_3292, 0.0));
                        float _3295 = isnan(1.0) ? _4634 : (isnan(_4634) ? 1.0 : min(_4634, 1.0));
                        float _3299 = ((_3295 * _3295) * (_3277 + (-1.0))) + 1.0;
                        float _3300 = _3235 * _3276;
                        float _3301 = _3300 * _3300;
                        float _3304 = ((1.0 - _3301) * _3225) + _3301;
                        float _4645 = isnan(0.0) ? _3304 : (isnan(_3304) ? 0.0 : max(_3304, 0.0));
                        float _3305 = isnan(1.0) ? _4645 : (isnan(_4645) ? 1.0 : min(_4645, 1.0));
                        float _3306 = 1.0 - _3276;
                        float _3316 = (0.5 / (((_3305 * ((_3291 * _3306) + _3276)) + 9.9999999392252902907785028219223e-09) + (((_3305 * _3306) + _3276) * _3291))) * _3305;
                        float _4656 = isnan(0.0) ? _3316 : (isnan(_3316) ? 0.0 : max(_3316, 0.0));
                        float _3327 = (((_3277 * 3.1415927410125732421875) * (isnan(1.0) ? _4656 : (isnan(_4656) ? 1.0 : min(_4656, 1.0)))) / ((_3299 * _3299) * ((_3242 * 2.1991131305694580078125) + 3.141590118408203125))) * _3231;
                        _3084 = (_3246 * _3194.x) + _3152;
                        _3085 = (_3246 * _3194.y) + _3153;
                        _3086 = (_3246 * _3194.z) + _3154;
                        _3081 = (_3327 * _3211.x) + _3149;
                        _3082 = (_3327 * _3211.y) + _3150;
                        _3083 = (_3327 * _3211.z) + _3151;
                        if (_3156 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3149 = _3081;
                            _3150 = _3082;
                            _3151 = _3083;
                            _3152 = _3084;
                            _3153 = _3085;
                            _3154 = _3086;
                            _3155 = _3156;
                        }
                    }
                    frontier_phi_61_pred = _3081;
                    frontier_phi_61_pred_1 = _3086;
                    frontier_phi_61_pred_2 = _3085;
                    frontier_phi_61_pred_3 = _3084;
                    frontier_phi_61_pred_4 = _3083;
                    frontier_phi_61_pred_5 = _3082;
                }
                _2881 = frontier_phi_61_pred;
                _2891 = frontier_phi_61_pred_1;
                _2889 = frontier_phi_61_pred_2;
                _2887 = frontier_phi_61_pred_3;
                _2885 = frontier_phi_61_pred_4;
                _2883 = frontier_phi_61_pred_5;
                uint _3032 = _3031 + 1u;
                if (_3032 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3025 = _2881;
                    _3026 = _2883;
                    _3027 = _2885;
                    _3028 = _2887;
                    _3029 = _2889;
                    _3030 = _2891;
                    _3031 = _3032;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2880 = _2881;
            _2882 = _2883;
            _2884 = _2885;
            _2886 = _2887;
            _2888 = _2889;
            _2890 = _2891;
        }
        uvec4 _2894 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2895 = _2894.z;
        uint _2897 = (_2895 >> 8u) & 15u;
        float _2993;
        float _2995;
        float _2997;
        float _2999;
        float _3001;
        float _3003;
        if (((4294967295u << _2897) & _2779) == 0u)
        {
            _2993 = _2880;
            _2995 = _2882;
            _2997 = _2884;
            _2999 = _2886;
            _3001 = _2888;
            _3003 = _2890;
        }
        else
        {
            float _3018 = inversesqrt(dot(vec3(_2733, _2734, _2735), vec3(_2733, _2734, _2735)));
            float _3019 = _3018 * _2733;
            float _3020 = _3018 * _2734;
            float _3021 = _3018 * _2735;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2897 < ((_2895 >> 12u) & 15u))
            {
                float _2994;
                float _2996;
                float _2998;
                float _3000;
                float _3002;
                float _3004;
                float _3132 = _2880;
                float _3133 = _2882;
                float _3134 = _2884;
                float _3135 = _2886;
                float _3136 = _2888;
                float _3137 = _2890;
                uint _3138 = _2897;
                uint _3147;
                bool _3148;
                for (;;)
                {
                    _3147 = texelFetch(g_lightClassification, int((((_2773 << 5u) + (_2759 << 9u)) + (_3138 << 2u)) >> 2u)).x;
                    _3148 = _3147 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_3148)
                    {
                        frontier_phi_67_pred = _3135;
                        frontier_phi_67_pred_1 = _3136;
                        frontier_phi_67_pred_2 = _3137;
                        frontier_phi_67_pred_3 = _3134;
                        frontier_phi_67_pred_4 = _3133;
                        frontier_phi_67_pred_5 = _3132;
                    }
                    else
                    {
                        float _3332;
                        float _3333;
                        float _3334;
                        float _3335;
                        float _3336;
                        float _3337;
                        float _3625;
                        float _3626;
                        float _3627;
                        float _3628;
                        float _3629;
                        float _3630;
                        float _3345 = _3132;
                        float _3346 = _3133;
                        float _3347 = _3134;
                        float _3348 = _3135;
                        float _3349 = _3136;
                        float _3350 = _3137;
                        uint _3351 = _3147;
                        uint _3352;
                        vec4 _3377;
                        float _3378;
                        vec4 _3393;
                        vec3 _3405;
                        vec4 _3420;
                        vec4 _3435;
                        float _3481;
                        bool _3482;
                        for (;;)
                        {
                            uint _3362 = ((_3138 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3351));
                            _3352 = (_3351 + 4294967295u) & _3351;
                            uint _3364 = _3362 * 40u;
                            _3377 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3364)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3364 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3364 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3364 + 3u)).x));
                            _3378 = _3377.w;
                            uint _3380 = (_3362 * 40u) + 4u;
                            _3393 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3380)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3380 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3380 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3380 + 3u)).x));
                            uint _3395 = (_3362 * 40u) + 8u;
                            _3405 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3395)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3395 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3395 + 2u)).x));
                            uint _3407 = (_3362 * 40u) + 16u;
                            _3420 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3407)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3407 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3407 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3407 + 3u)).x));
                            uint _3422 = (_3362 * 40u) + 20u;
                            _3435 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3422)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3422 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3422 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3422 + 3u)).x));
                            uint _3437 = (_3362 * 40u) + 24u;
                            vec4 _3450 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3437)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3437 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3437 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3437 + 3u)).x));
                            uint _3456 = (_3362 * 40u) + 28u;
                            vec4 _3469 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3456)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3456 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3456 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3456 + 3u)).x));
                            _3481 = fma(_2735, _3469.z, fma(_2734, _3469.y, _3469.x * _2733)) + _3469.w;
                            _3482 = !((fma(_2735, _3450.z, fma(_2734, _3450.y, _3450.x * _2733)) + _3450.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3482)
                            {
                                float _3509 = _3377.x - _2733;
                                float _3510 = _3377.y - _2734;
                                float _3511 = _3377.z - _2735;
                                float _3512 = dot(vec3(_3509, _3510, _3511), vec3(_3509, _3510, _3511));
                                float _3515 = inversesqrt(_3512);
                                float _3516 = _3515 * _3509;
                                float _3517 = _3515 * _3510;
                                float _3518 = _3515 * _3511;
                                float _3522 = 1.0 - (_3512 / (_3378 * _3378));
                                float _4667 = isnan(0.0) ? _3522 : (isnan(_3522) ? 0.0 : max(_3522, 0.0));
                                float _3523 = isnan(1.0) ? _4667 : (isnan(_4667) ? 1.0 : min(_4667, 1.0));
                                float _3527 = sqrt(_3512) * _3393.w;
                                float _3529 = 1.39999997615814208984375 / (_3527 + 1.39999997615814208984375);
                                float _3530 = _3529 * _3529;
                                float _3533 = ((1.0 - _3530) * dot(vec3(_3516, _3517, _3518), vec3(_1015, _1018, _1021))) + _3530;
                                float _3536 = _3527 * _3527;
                                float _3540 = (fma(_2735, _3420.z, fma(_2734, _3420.y, _3420.x * _2733)) + _3420.w) / _3481;
                                float _3541 = (fma(_2735, _3435.z, fma(_2734, _3435.y, _3435.x * _2733)) + _3435.w) / _3481;
                                float _3545 = 1.0 - dot(vec2(_3540, _3541), vec2(_3540, _3541));
                                float _4683 = isnan(0.0) ? _3545 : (isnan(_3545) ? 0.0 : max(_3545, 0.0));
                                float _3546 = isnan(1.0) ? _4683 : (isnan(_4683) ? 1.0 : min(_4683, 1.0));
                                float _3547 = _3546 * (((isnan(0.0) ? _3533 : (isnan(_3533) ? 0.0 : max(_3533, 0.0))) * _3523) / ((_3536 * 0.699999988079071044921875) + 1.0));
                                float _3559 = exp2(log2(1.0 / ((_3536 * 3.5) + 5.0)) * 0.25);
                                float _3560 = 1.0 - _1075;
                                float _3567 = sqrt(1.0 - ((1.0 - (_3560 * _3560)) * (1.0 - (_3559 * _3559))));
                                float _3568 = _3567 * _3567;
                                float _3569 = _3568 * _3568;
                                float _3570 = _3516 - _3019;
                                float _3571 = _3517 - _3020;
                                float _3572 = _3518 - _3021;
                                float _3576 = inversesqrt(dot(vec3(_3570, _3571, _3572), vec3(_3570, _3571, _3572)));
                                float _3580 = dot(vec3(_1015, _1018, _1021), vec3((-0.0) - _3019, (-0.0) - _3020, (-0.0) - _3021));
                                float _4694 = isnan(0.0) ? _3580 : (isnan(_3580) ? 0.0 : max(_3580, 0.0));
                                float _3583 = isnan(1.0) ? _4694 : (isnan(_4694) ? 1.0 : min(_4694, 1.0));
                                float _3584 = dot(vec3(_1015, _1018, _1021), vec3(_3576 * _3570, _3576 * _3571, _3576 * _3572));
                                float _4705 = isnan(0.0) ? _3584 : (isnan(_3584) ? 0.0 : max(_3584, 0.0));
                                float _3587 = isnan(1.0) ? _4705 : (isnan(_4705) ? 1.0 : min(_4705, 1.0));
                                float _3591 = ((_3587 * _3587) * (_3569 + (-1.0))) + 1.0;
                                float _3592 = _3529 * _3568;
                                float _3593 = _3592 * _3592;
                                float _3599 = ((1.0 - _3593) * dot(vec3(_1015, _1018, _1021), vec3(_3516, _3517, _3518))) + _3593;
                                float _4716 = isnan(0.0) ? _3599 : (isnan(_3599) ? 0.0 : max(_3599, 0.0));
                                float _3600 = isnan(1.0) ? _4716 : (isnan(_4716) ? 1.0 : min(_4716, 1.0));
                                float _3601 = 1.0 - _3568;
                                float _3611 = (0.5 / (((_3600 * ((_3583 * _3601) + _3568)) + 9.9999999392252902907785028219223e-09) + (((_3600 * _3601) + _3568) * _3583))) * _3600;
                                float _4727 = isnan(0.0) ? _3611 : (isnan(_3611) ? 0.0 : max(_3611, 0.0));
                                float _3621 = (_3546 * _3523) * (((_3569 * 3.1415927410125732421875) * (isnan(1.0) ? _4727 : (isnan(_4727) ? 1.0 : min(_4727, 1.0)))) / ((_3591 * _3591) * ((_3536 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3621 * _3405.x;
                                frontier_phi_73_pred_1 = _3621 * _3405.y;
                                frontier_phi_73_pred_2 = _3547 * _3393.z;
                                frontier_phi_73_pred_3 = _3547 * _3393.y;
                                frontier_phi_73_pred_4 = _3547 * _3393.x;
                                frontier_phi_73_pred_5 = _3621 * _3405.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3625 = frontier_phi_73_pred;
                            _3626 = frontier_phi_73_pred_1;
                            _3630 = frontier_phi_73_pred_2;
                            _3629 = frontier_phi_73_pred_3;
                            _3628 = frontier_phi_73_pred_4;
                            _3627 = frontier_phi_73_pred_5;
                            _3335 = _3628 + _3348;
                            _3336 = _3629 + _3349;
                            _3337 = _3630 + _3350;
                            _3332 = _3625 + _3345;
                            _3333 = _3626 + _3346;
                            _3334 = _3627 + _3347;
                            if (_3352 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3345 = _3332;
                                _3346 = _3333;
                                _3347 = _3334;
                                _3348 = _3335;
                                _3349 = _3336;
                                _3350 = _3337;
                                _3351 = _3352;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3335;
                        frontier_phi_67_pred_1 = _3336;
                        frontier_phi_67_pred_2 = _3337;
                        frontier_phi_67_pred_3 = _3334;
                        frontier_phi_67_pred_4 = _3333;
                        frontier_phi_67_pred_5 = _3332;
                    }
                    _3000 = frontier_phi_67_pred;
                    _3002 = frontier_phi_67_pred_1;
                    _3004 = frontier_phi_67_pred_2;
                    _2998 = frontier_phi_67_pred_3;
                    _2996 = frontier_phi_67_pred_4;
                    _2994 = frontier_phi_67_pred_5;
                    uint _3139 = _3138 + 1u;
                    if (_3139 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3132 = _2994;
                        _3133 = _2996;
                        _3134 = _2998;
                        _3135 = _3000;
                        _3136 = _3002;
                        _3137 = _3004;
                        _3138 = _3139;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _3002;
                frontier_phi_55_56_ladder_1 = _3004;
                frontier_phi_55_56_ladder_2 = _3000;
                frontier_phi_55_56_ladder_3 = _2998;
                frontier_phi_55_56_ladder_4 = _2996;
                frontier_phi_55_56_ladder_5 = _2994;
            }
            else
            {
                frontier_phi_55_56_ladder = _2888;
                frontier_phi_55_56_ladder_1 = _2890;
                frontier_phi_55_56_ladder_2 = _2886;
                frontier_phi_55_56_ladder_3 = _2884;
                frontier_phi_55_56_ladder_4 = _2882;
                frontier_phi_55_56_ladder_5 = _2880;
            }
            _2993 = frontier_phi_55_56_ladder_5;
            _2995 = frontier_phi_55_56_ladder_4;
            _2997 = frontier_phi_55_56_ladder_3;
            _2999 = frontier_phi_55_56_ladder_2;
            _3001 = frontier_phi_55_56_ladder;
            _3003 = frontier_phi_55_56_ladder_1;
        }
        float _3008 = isnan(1.0) ? _1059 : (isnan(_1059) ? 1.0 : min(_1059, 1.0));
        _2792 = (_3008 * _2999) + _2244;
        _2794 = (_3008 * _3001) + _2246;
        _2796 = (_3008 * _3003) + _2248;
        _2798 = ((_2993 * 0.039999999105930328369140625) * _3008) + _2577;
        _2800 = ((_2995 * 0.039999999105930328369140625) * _3008) + _2579;
        _2802 = ((_2997 * 0.039999999105930328369140625) * _3008) + _2581;
    }
    else
    {
        _2792 = _2244;
        _2794 = _2246;
        _2796 = _2248;
        _2798 = _2577;
        _2800 = _2579;
        _2802 = _2581;
    }
    float _4743 = isnan(0.0) ? _1044 : (isnan(_1044) ? 0.0 : max(_1044, 0.0));
    float _4754 = isnan(0.0) ? _1045 : (isnan(_1045) ? 0.0 : max(_1045, 0.0));
    float _4765 = isnan(0.0) ? _1046 : (isnan(_1046) ? 0.0 : max(_1046, 0.0));
    uint _2822 = _283 + 6u;
    float _2830 = _996 / cbSceneParam._m0[86u].x;
    float _2831 = _997 / cbSceneParam._m0[86u].y;
    vec4 _2845 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2830, _2831, (log2((isnan(cbSceneParam._m0[77u].w) ? _930 : (isnan(_930) ? cbSceneParam._m0[77u].w : min(_930, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2847 = _2845.x;
    float _2848 = _2845.y;
    float _2849 = _2845.z;
    float _2850 = _2845.w;
    float _2943;
    float _2945;
    float _2947;
    float _2949;
    if (_930 > cbSceneParam._m0[78u].w)
    {
        float _2905 = isnan(_930) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _930 : min(cbSceneParam._m0[80u].w, _930));
        float _2906 = _2905 / _930;
        float _2917 = _2906 * _981;
        float _2918 = _982 * _2906;
        float _2919 = (-0.0) - _2918;
        float _2921 = _2906 * _983;
        float _2923 = (cbSceneParam._m0[77u].w * _2919) / _2905;
        float _2924 = _2923 + cbSceneParam._m0[79u].w;
        float _2925 = cbSceneParam._m0[79u].w - _2918;
        float _2931 = sqrt(((_2917 * _2917) + (_2918 * _2918)) + (_2921 * _2921));
        float _2934 = (1.0 - (cbSceneParam._m0[77u].w / _2905)) * _2931;
        float _2939 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2941 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3094;
        if (abs((_2919 - _2923) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3094 = ((((_2924 > 0.0) ? exp2(_2939 * _2924) : (2.0 - exp2(_2941 * _2924))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2934;
        }
        else
        {
            float _3054 = 1.0 / cbSceneParam._m0[80u].x;
            float _3055 = isnan(_2925) ? _2924 : (isnan(_2924) ? _2925 : max(_2924, _2925));
            float _3056 = isnan(_2925) ? _2924 : (isnan(_2924) ? _2925 : min(_2924, _2925));
            float _3065 = isnan(0.0) ? _3055 : (isnan(_3055) ? 0.0 : min(_3055, 0.0));
            float _3066 = isnan(0.0) ? _3056 : (isnan(_3056) ? 0.0 : min(_3056, 0.0));
            _3094 = ((abs(_2931 / _2919) * cbSceneParam._m0[80u].y) * ((((_3065 - _3066) * 2.0) - ((exp2(_2939 * (isnan(0.0) ? _3055 : (isnan(_3055) ? 0.0 : max(_3055, 0.0)))) - exp2(_2939 * (isnan(0.0) ? _3056 : (isnan(_3056) ? 0.0 : max(_3056, 0.0))))) * _3054)) - ((exp2(_2941 * _3065) - exp2(_2941 * _3066)) * _3054))) + (_2934 * cbSceneParam._m0[80u].z);
        }
        vec4 _3096 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2830, _2831, 1.0), 0.0);
        float _3105 = exp2((_3094 * (-1.44269502162933349609375)) * (1.0 - _3096.w));
        float _3106 = log2(_3105);
        float _3122 = log2(_2850);
        _2943 = (exp2(_3122 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3106 * cbSceneParam._m0[78u].x)) * _3096.x) / cbSceneParam._m0[78u].x)) + _2847;
        _2945 = (exp2(_3122 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3106 * cbSceneParam._m0[78u].y)) * _3096.y) / cbSceneParam._m0[78u].y)) + _2848;
        _2947 = (exp2(_3122 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3106 * cbSceneParam._m0[78u].z)) * _3096.z) / cbSceneParam._m0[78u].z)) + _2849;
        _2949 = _3105 * _2850;
    }
    else
    {
        _2943 = _2847;
        _2945 = _2848;
        _2947 = _2849;
        _2949 = _2850;
    }
    float _2961 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2962 = _2961 == 3.0;
    float _2963 = log2(_2949);
    float _2970 = exp2(_2963 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4743 : (isnan(_4743) ? 1.0 : min(_4743, 1.0))) * (_2792 + ((isnan(0.0) ? _1784 : (isnan(_1784) ? 0.0 : max(_1784, 0.0))) * _1059))) + ((_2798 + ((isnan(0.0) ? _2076 : (isnan(_2076) ? 0.0 : max(_2076, 0.0))) * _1863)) * cbPerFrame._m0[3u].x));
    float _2971 = exp2(_2963 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4754 : (isnan(_4754) ? 1.0 : min(_4754, 1.0))) * (_2794 + ((isnan(0.0) ? _1787 : (isnan(_1787) ? 0.0 : max(_1787, 0.0))) * _1059))) + ((_2800 + ((isnan(0.0) ? _2079 : (isnan(_2079) ? 0.0 : max(_2079, 0.0))) * _1863)) * cbPerFrame._m0[3u].x));
    float _2972 = exp2(_2963 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4765 : (isnan(_4765) ? 1.0 : min(_4765, 1.0))) * (_2796 + ((isnan(0.0) ? _1790 : (isnan(_1790) ? 0.0 : max(_1790, 0.0))) * _1059))) + ((_2802 + ((isnan(0.0) ? _2082 : (isnan(_2082) ? 0.0 : max(_2082, 0.0))) * _1863)) * cbPerFrame._m0[3u].x));
    float _2981 = (_2961 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2981 * (_2962 ? _2970 : (_2970 + (cbSceneParam._m0[72u].w * _2943)));
    SV_Target.y = _2981 * (_2962 ? _2971 : (_2971 + (cbSceneParam._m0[72u].w * _2945)));
    SV_Target.z = _2981 * (_2962 ? _2972 : (_2972 + (cbSceneParam._m0[72u].w * _2947)));
    SV_Target.w = cbInstanceData._m0[_2822].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2822].w;
}


