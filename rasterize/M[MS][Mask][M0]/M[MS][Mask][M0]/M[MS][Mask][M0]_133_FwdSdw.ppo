#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 13) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_22;
layout(set = 0, binding = 14) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_10;
layout(set = 0, binding = 20) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_6;
layout(set = 0, binding = 23) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_8;
layout(set = 0, binding = 24) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_9;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1440;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _231 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _232 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _233 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _239 = inversesqrt(dot(vec3(_231, _232, _233), vec3(_231, _232, _233)));
    float _246 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _253 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _267 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _269 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _270 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _4025 = isnan(0.0) ? _267 : (isnan(_267) ? 0.0 : max(_267, 0.0));
    float _4036 = isnan(0.0) ? _269 : (isnan(_269) ? 0.0 : max(_269, 0.0));
    float _4047 = isnan(0.0) ? _270 : (isnan(_270) ? 0.0 : max(_270, 0.0));
    uint _280 = uint(roundEven(NORMAL.w)) * 13u;
    uint _285 = _280 + 1u;
    uint _289 = _280 + 2u;
    float _298 = sqrt(((cbInstanceData._m0[_285].x * cbInstanceData._m0[_285].x) + (cbInstanceData._m0[_280].x * cbInstanceData._m0[_280].x)) + (cbInstanceData._m0[_289].x * cbInstanceData._m0[_289].x));
    float _299 = _298 * TEXCOORD.z;
    float _300 = _298 * TEXCOORD.w;
    vec4 _313 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _299) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _300) + cbTextureTilingScale._m0[13u].w));
    vec4 _337 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _342 = _337.x * cbMtdParam._m0[11u].x;
    float _343 = _337.y * cbMtdParam._m0[11u].y;
    float _344 = _337.z * cbMtdParam._m0[11u].z;
    vec4 _363 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _299) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _300) + cbTextureTilingScale._m0[5u].w));
    vec4 _382 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _420 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _422 = _420.x;
    float _434 = dot(vec4(_422, _420.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _451 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _382.x) * 2.0) - ((((_422 - _434) * cbMtdParam._m0[24u].z) + _434) * cbMtdParam._m0[23u].x))) + 1.0;
    float _4058 = isnan(0.0) ? _451 : (isnan(_451) ? 0.0 : max(_451, 0.0));
    float _452 = isnan(1.0) ? _4058 : (isnan(_4058) ? 1.0 : min(_4058, 1.0));
    float _459 = (_452 * ((_363.x * cbMtdParam._m0[12u].x) - _342)) + _342;
    float _460 = (_452 * ((_363.y * cbMtdParam._m0[12u].y) - _343)) + _343;
    float _461 = (_452 * ((_363.z * cbMtdParam._m0[12u].z) - _344)) + _344;
    vec4 _478 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _299) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _300) + cbTextureTilingScale._m0[3u].w));
    vec4 _498 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _500 = _498.x;
    float _510 = dot(vec4(_500, _498.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _524 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _382.y) * 2.0) - ((((_500 - _510) * cbMtdParam._m0[24u].z) + _510) * cbMtdParam._m0[20u].w))) + 1.0;
    float _4069 = isnan(0.0) ? _524 : (isnan(_524) ? 0.0 : max(_524, 0.0));
    float _525 = isnan(1.0) ? _4069 : (isnan(_4069) ? 1.0 : min(_4069, 1.0));
    float _532 = (_525 * ((_478.x * cbMtdParam._m0[13u].x) - _459)) + _459;
    float _533 = (_525 * ((_478.y * cbMtdParam._m0[13u].y) - _460)) + _460;
    float _534 = (_525 * ((_478.z * cbMtdParam._m0[13u].z) - _461)) + _461;
    vec4 _552 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_9, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[24u].x * _299) + cbTextureTilingScale._m0[24u].z, (cbTextureTilingScale._m0[24u].y * _300) + cbTextureTilingScale._m0[24u].w));
    vec4 _569 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[25u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _571 = _569.x;
    float _581 = dot(vec4(_571, _569.yzw), vec4(cbMtdParam._m0[30u].w, cbMtdParam._m0[31u].xy, 0.0));
    float _593 = ((cbMtdParam._m0[25u].x * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.z) - _382.z) * 2.0) - ((((_571 - _581) * cbMtdParam._m0[24u].z) + _581) * cbMtdParam._m0[20u].z))) + 1.0;
    float _4080 = isnan(0.0) ? _593 : (isnan(_593) ? 0.0 : max(_593, 0.0));
    float _594 = isnan(1.0) ? _4080 : (isnan(_4080) ? 1.0 : min(_4080, 1.0));
    float _601 = (_594 * ((_552.x * cbMtdParam._m0[14u].x) - _532)) + _532;
    float _602 = (_594 * ((_552.y * cbMtdParam._m0[14u].y) - _533)) + _533;
    float _603 = (_594 * ((_552.z * cbMtdParam._m0[14u].z) - _534)) + _534;
    float _607 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _313.x) * _601;
    float _610 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _313.y) * _602;
    float _613 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _313.z) * _603;
    float _620 = ((_601 - _607) * (isnan(1.0) ? _4025 : (isnan(_4025) ? 1.0 : min(_4025, 1.0)))) + _607;
    float _621 = ((_602 - _610) * (isnan(1.0) ? _4036 : (isnan(_4036) ? 1.0 : min(_4036, 1.0)))) + _610;
    float _622 = ((_603 - _613) * (isnan(1.0) ? _4047 : (isnan(_4047) ? 1.0 : min(_4047, 1.0)))) + _613;
    vec4 _640 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _299) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _300) + cbTextureTilingScale._m0[14u].w));
    vec4 _659 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _299) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _300) + cbTextureTilingScale._m0[20u].w));
    vec4 _682 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _299) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _300) + cbTextureTilingScale._m0[4u].w));
    vec4 _699 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _701 = _699.x;
    float _702 = _699.y;
    float _703 = _699.z;
    float _710 = ((_682.x - _701) * _452) + _701;
    float _711 = ((_682.y - _702) * _452) + _702;
    float _712 = ((_682.z - _703) * _452) + _703;
    vec4 _724 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _299) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _300) + cbTextureTilingScale._m0[2u].w));
    float _735 = ((_724.x - _710) * _525) + _710;
    float _736 = ((_724.y - _711) * _525) + _711;
    float _737 = ((_724.z - _712) * _525) + _712;
    vec4 _749 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[23u].x * _299) + cbTextureTilingScale._m0[23u].z, (cbTextureTilingScale._m0[23u].y * _300) + cbTextureTilingScale._m0[23u].w));
    float _762 = ((_749.z - _737) * _594) + _737;
    float _765 = ((((_749.x - _735) * _594) + _735) * 2.0) + (-1.0);
    float _766 = ((((_749.y - _736) * _594) + _736) * 2.0) + (-1.0);
    float _767 = dot(vec2(_765, _766), vec2(_765, _766));
    float _4091 = isnan(0.0) ? _767 : (isnan(_767) ? 0.0 : max(_767, 0.0));
    float _772 = sqrt(1.0 - (isnan(1.0) ? _4091 : (isnan(_4091) ? 1.0 : min(_4091, 1.0))));
    vec4 _786 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _811 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _299) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _300) + cbTextureTilingScale._m0[11u].w));
    float _813 = _811.x;
    float _814 = 1.0 - _813;
    float _827 = (TEXCOORD_8.w - ((cbMtdParam._m0[21u].z * (1.0 - TEXCOORD_8.w)) * ((((_813 - _814) * cbMtdParam._m0[24u].w) + _814) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[21u].w + 1.0);
    float _4102 = isnan(0.0) ? _827 : (isnan(_827) ? 0.0 : max(_827, 0.0));
    float _828 = isnan(1.0) ? _4102 : (isnan(_4102) ? 1.0 : min(_4102, 1.0));
    float _835 = (_828 * ((_640.x * cbMtdParam._m0[18u].x) - _620)) + _620;
    float _836 = (_828 * ((_640.y * cbMtdParam._m0[18u].y) - _621)) + _621;
    float _837 = (_828 * ((_640.z * cbMtdParam._m0[18u].z) - _622)) + _622;
    float _842 = (((_659.z - _762) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _762;
    float _846 = ((_786.z - _842) * cbMtdParam._m0[19u].w) + _842;
    vec4 _859 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _299) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _300) + cbTextureTilingScale._m0[15u].w));
    float _866 = (_859.x * 2.0) + (-1.0);
    float _867 = (_859.y * 2.0) + (-1.0);
    float _868 = dot(vec2(_866, _867), vec2(_866, _867));
    float _4113 = isnan(0.0) ? _868 : (isnan(_868) ? 0.0 : max(_868, 0.0));
    float _876 = (_828 * (_859.z - _846)) + _846;
    float _885 = (_765 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_659.x * 2.0) + (-1.0)))) + (((_786.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _886 = (_766 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_659.y * 2.0) + (-1.0)))) + (((_786.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _898 = (((_866 - _885) + (cbMtdParam._m0[21u].x * _885)) * _828) + _885;
    float _899 = (((_867 - _886) + (cbMtdParam._m0[21u].x * _886)) * _828) + _886;
    float _900 = (_828 * (sqrt(1.0 - (isnan(1.0) ? _4113 : (isnan(_4113) ? 1.0 : min(_4113, 1.0)))) - _772)) + _772;
    float _904 = cbMtdParam._m0[22u].x + _786.w;
    float _907 = fma(_900, _246 * NORMAL.x, fma(_899, _253 * TANGENT.x, (_239 * _231) * _898));
    float _910 = fma(_900, _246 * NORMAL.y, fma(_899, _253 * TANGENT.y, (_239 * _232) * _898));
    float _913 = fma(_900, _246 * NORMAL.z, fma(_899, _253 * TANGENT.z, (_239 * _233) * _898));
    float _917 = inversesqrt(dot(vec3(_907, _910, _913), vec3(_907, _910, _913)));
    float _918 = _917 * _907;
    float _919 = _917 * _910;
    float _920 = _917 * _913;
    float _4124 = isnan(0.0) ? _876 : (isnan(_876) ? 0.0 : max(_876, 0.0));
    float _921 = isnan(1.0) ? _4124 : (isnan(_4124) ? 1.0 : min(_4124, 1.0));
    float _4135 = isnan(0.0) ? _904 : (isnan(_904) ? 0.0 : max(_904, 0.0));
    float _4146 = isnan(0.0) ? _835 : (isnan(_835) ? 0.0 : max(_835, 0.0));
    float _4157 = isnan(0.0) ? _836 : (isnan(_836) ? 0.0 : max(_836, 0.0));
    float _4168 = isnan(0.0) ? _837 : (isnan(_837) ? 0.0 : max(_837, 0.0));
    float _939 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _981 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _991 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _981);
    float _992 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _981);
    float _993 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _981);
    float _997 = inversesqrt(dot(vec3(_991, _992, _993), vec3(_991, _992, _993)));
    float _998 = _991 * _997;
    float _999 = _992 * _997;
    float _1000 = _993 * _997;
    float _1006 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1007 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1025 = fma(_920, cbSceneParam._m0[5u].z, fma(_919, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _918));
    float _1028 = fma(_920, cbSceneParam._m0[6u].z, fma(_919, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _918));
    float _1031 = fma(_920, cbSceneParam._m0[7u].z, fma(_919, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _918));
    uint _1045 = (_280 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _1051 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4146 : (isnan(_4146) ? 1.0 : min(_4146, 1.0)))) * cbInstanceData._m0[_1045].x;
    float _1052 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4157 : (isnan(_4157) ? 1.0 : min(_4157, 1.0)))) * cbInstanceData._m0[_1045].y;
    float _1053 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4168 : (isnan(_4168) ? 1.0 : min(_4168, 1.0)))) * cbInstanceData._m0[_1045].z;
    float _4179 = isnan(0.0) ? _1051 : (isnan(_1051) ? 0.0 : max(_1051, 0.0));
    float _1054 = isnan(1.0) ? _4179 : (isnan(_4179) ? 1.0 : min(_4179, 1.0));
    float _4190 = isnan(0.0) ? _1052 : (isnan(_1052) ? 0.0 : max(_1052, 0.0));
    float _1055 = isnan(1.0) ? _4190 : (isnan(_4190) ? 1.0 : min(_4190, 1.0));
    float _4201 = isnan(0.0) ? _1053 : (isnan(_1053) ? 0.0 : max(_1053, 0.0));
    float _1056 = isnan(1.0) ? _4201 : (isnan(_4201) ? 1.0 : min(_4201, 1.0));
    vec4 _1065 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1006, cbSceneParam._m0[86u].y * _1007));
    float _1069 = ((isnan(1.0) ? _4135 : (isnan(_4135) ? 1.0 : min(_4135, 1.0))) * TEXCOORD_5.w) * _1065.x;
    float _1070 = dot(vec3(_918, _919, _920), vec3(_998, _999, _1000));
    float _1073 = _1070 * 2.0;
    float _1077 = (_1073 * _918) - _998;
    float _1078 = (_1073 * _919) - _999;
    float _1079 = (_1073 * _920) - _1000;
    float _1083 = abs(dot(vec3(_998, _999, _1000), vec3(_918, _919, _920)));
    float _4212 = isnan(0.0) ? _1083 : (isnan(_1083) ? 0.0 : max(_1083, 0.0));
    float _1085 = sqrt(_921);
    float _1098 = exp2((_1085 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4212 : (isnan(_4212) ? 1.0 : min(_4212, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1085 * 3.0));
    float _1130 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1134 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1138 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1439;
    float _1441;
    float _1442;
    float _1443;
    float _1444;
    float _1445;
    float _1446;
    float _1447;
    float _1448;
    float _1449;
    float _1450;
    float _1451;
    float _1452;
    float _1453;
    float _1454;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1164 = fma(_1138, cbModelParam._m0[26u].z, fma(_1134, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1130));
        float _1168 = fma(_1138, cbModelParam._m0[27u].z, fma(_1134, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1130));
        float _1172 = fma(_1138, cbModelParam._m0[28u].z, fma(_1134, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1130));
        float _1197 = _1130 + _918;
        float _1198 = _1134 + _919;
        float _1199 = _1138 + _920;
        float _1209 = fma(_1199, cbModelParam._m0[26u].z, fma(_1198, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1197)) - _1164;
        float _1210 = fma(_1199, cbModelParam._m0[27u].z, fma(_1198, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1197)) - _1168;
        float _1211 = fma(_1199, cbModelParam._m0[28u].z, fma(_1198, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1197)) - _1172;
        float _1215 = inversesqrt(dot(vec3(_1209, _1210, _1211), vec3(_1209, _1210, _1211)));
        float _1228 = ((_1215 * _1209) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1164 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1229 = ((_1215 * _1210) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1168 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1230 = ((_1215 * _1211) / cbModelParam._m0[34u].z) + ((((((_1172 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1233 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1228, _1229, _1230), 0.0);
        vec4 _1240 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1228, _1229, _1230), 0.0);
        vec4 _1247 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1228, _1229, _1230), 0.0);
        vec4 _1254 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1228, _1229, _1230), 0.0);
        float _1267 = exp2((_1233.w + (-0.5)) * 20.0) * 2.0;
        float _1268 = _1267 * (_1233.x + (-0.5));
        float _1269 = _1267 * (_1233.y + (-0.5));
        float _1270 = _1267 * (_1233.z + (-0.5));
        float _1277 = exp2((_1240.w + (-0.5)) * 20.0) * 2.0;
        float _1278 = _1277 * (_1240.x + (-0.5));
        float _1279 = _1277 * (_1240.y + (-0.5));
        float _1280 = _1277 * (_1240.z + (-0.5));
        float _1287 = exp2((_1247.w + (-0.5)) * 20.0) * 2.0;
        float _1288 = _1287 * (_1247.x + (-0.5));
        float _1289 = _1287 * (_1247.y + (-0.5));
        float _1290 = _1287 * (_1247.z + (-0.5));
        float _1297 = exp2((_1254.w + (-0.5)) * 20.0) * 2.0;
        float _1298 = _1297 * (_1254.x + (-0.5));
        float _1299 = _1297 * (_1254.y + (-0.5));
        float _1300 = _1297 * (_1254.z + (-0.5));
        float _1301 = isnan(0.0) ? _1298 : (isnan(_1298) ? 0.0 : max(_1298, 0.0));
        float _1302 = isnan(0.0) ? _1299 : (isnan(_1299) ? 0.0 : max(_1299, 0.0));
        float _1303 = isnan(0.0) ? _1300 : (isnan(_1300) ? 0.0 : max(_1300, 0.0));
        float _1304 = _1268 * 0.5;
        float _1305 = _1278 * 0.5;
        float _1306 = _1288 * 0.5;
        float _1307 = dot(vec3(_1304, _1305, _1306), vec3(_1304, _1305, _1306));
        float _1312 = (_1307 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1307);
        float _1321 = (dot(vec3(_918, _919, _920), vec3(_1312 * _1304, _1312 * _1305, _1312 * _1306)) + 1.0) * 0.5;
        float _4238 = isnan(0.0) ? _1321 : (isnan(_1321) ? 0.0 : max(_1321, 0.0));
        float _1331 = sqrt(((_1305 * _1305) + (_1304 * _1304)) + (_1306 * _1306)) / (_1301 + 9.9999997473787516355514526367188e-06);
        float _4249 = isnan(0.0) ? _1331 : (isnan(_1331) ? 0.0 : max(_1331, 0.0));
        float _1332 = isnan(1.0) ? _4249 : (isnan(_4249) ? 1.0 : min(_4249, 1.0));
        float _1333 = _1332 * 2.0;
        float _1337 = (1.0 - _1332) / (_1332 + 1.0);
        float _4260 = isnan(0.0) ? _1337 : (isnan(_1337) ? 0.0 : max(_1337, 0.0));
        float _1338 = isnan(1.0) ? _4260 : (isnan(_4260) ? 1.0 : min(_4260, 1.0));
        float _1347 = ((((1.0 - _1338) * (_1333 + 2.0)) * exp2(log2(isnan(1.0) ? _4238 : (isnan(_4238) ? 1.0 : min(_4238, 1.0))) * (_1333 + 1.0))) + _1338) * _1301;
        float _1348 = _1269 * 0.5;
        float _1349 = _1279 * 0.5;
        float _1350 = _1289 * 0.5;
        float _1351 = dot(vec3(_1348, _1349, _1350), vec3(_1348, _1349, _1350));
        float _1356 = (_1351 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1351);
        float _1364 = (dot(vec3(_918, _919, _920), vec3(_1356 * _1348, _1356 * _1349, _1356 * _1350)) + 1.0) * 0.5;
        float _4271 = isnan(0.0) ? _1364 : (isnan(_1364) ? 0.0 : max(_1364, 0.0));
        float _1373 = sqrt(((_1349 * _1349) + (_1348 * _1348)) + (_1350 * _1350)) / (_1302 + 9.9999997473787516355514526367188e-06);
        float _4282 = isnan(0.0) ? _1373 : (isnan(_1373) ? 0.0 : max(_1373, 0.0));
        float _1374 = isnan(1.0) ? _4282 : (isnan(_4282) ? 1.0 : min(_4282, 1.0));
        float _1375 = _1374 * 2.0;
        float _1379 = (1.0 - _1374) / (_1374 + 1.0);
        float _4293 = isnan(0.0) ? _1379 : (isnan(_1379) ? 0.0 : max(_1379, 0.0));
        float _1380 = isnan(1.0) ? _4293 : (isnan(_4293) ? 1.0 : min(_4293, 1.0));
        float _1389 = ((((1.0 - _1380) * (_1375 + 2.0)) * exp2(log2(isnan(1.0) ? _4271 : (isnan(_4271) ? 1.0 : min(_4271, 1.0))) * (_1375 + 1.0))) + _1380) * _1302;
        float _1390 = _1270 * 0.5;
        float _1391 = _1280 * 0.5;
        float _1392 = _1290 * 0.5;
        float _1393 = dot(vec3(_1390, _1391, _1392), vec3(_1390, _1391, _1392));
        float _1398 = (_1393 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1393);
        float _1406 = (dot(vec3(_918, _919, _920), vec3(_1398 * _1390, _1398 * _1391, _1398 * _1392)) + 1.0) * 0.5;
        float _4304 = isnan(0.0) ? _1406 : (isnan(_1406) ? 0.0 : max(_1406, 0.0));
        float _1415 = sqrt(((_1391 * _1391) + (_1390 * _1390)) + (_1392 * _1392)) / (_1303 + 9.9999997473787516355514526367188e-06);
        float _4315 = isnan(0.0) ? _1415 : (isnan(_1415) ? 0.0 : max(_1415, 0.0));
        float _1416 = isnan(1.0) ? _4315 : (isnan(_4315) ? 1.0 : min(_4315, 1.0));
        float _1417 = _1416 * 2.0;
        float _1421 = (1.0 - _1416) / (_1416 + 1.0);
        float _4326 = isnan(0.0) ? _1421 : (isnan(_1421) ? 0.0 : max(_1421, 0.0));
        float _1422 = isnan(1.0) ? _4326 : (isnan(_4326) ? 1.0 : min(_4326, 1.0));
        float _1431 = ((((1.0 - _1422) * (_1417 + 2.0)) * exp2(log2(isnan(1.0) ? _4304 : (isnan(_4304) ? 1.0 : min(_4304, 1.0))) * (_1417 + 1.0))) + _1422) * _1303;
        _1439 = _1270;
        _1441 = _1269;
        _1442 = _1268;
        _1443 = _1280;
        _1444 = _1279;
        _1445 = _1278;
        _1446 = _1290;
        _1447 = _1289;
        _1448 = _1288;
        _1449 = _1303;
        _1450 = _1302;
        _1451 = _1301;
        _1452 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1347 : (isnan(_1347) ? 0.0 : max(_1347, 0.0)));
        _1453 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1389 : (isnan(_1389) ? 0.0 : max(_1389, 0.0)));
        _1454 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1431 : (isnan(_1431) ? 0.0 : max(_1431, 0.0)));
    }
    else
    {
        _1439 = _1440;
        _1441 = _1440;
        _1442 = _1440;
        _1443 = _1440;
        _1444 = _1440;
        _1445 = _1440;
        _1446 = _1440;
        _1447 = _1440;
        _1448 = _1440;
        _1449 = _1440;
        _1450 = _1440;
        _1451 = _1440;
        _1452 = 0.0;
        _1453 = 0.0;
        _1454 = 0.0;
    }
    float _1746;
    float _1747;
    float _1748;
    float _1749;
    float _1750;
    float _1751;
    float _1752;
    float _1753;
    float _1754;
    float _1755;
    float _1756;
    float _1757;
    float _1758;
    float _1759;
    float _1760;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1477 = fma(_1138, cbModelParam._m0[30u].z, fma(_1134, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1130));
        float _1481 = fma(_1138, cbModelParam._m0[31u].z, fma(_1134, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1130));
        float _1485 = fma(_1138, cbModelParam._m0[32u].z, fma(_1134, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1130));
        float _1508 = _1130 + _918;
        float _1509 = _1134 + _919;
        float _1510 = _1138 + _920;
        float _1520 = fma(_1510, cbModelParam._m0[30u].z, fma(_1509, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1508)) - _1477;
        float _1521 = fma(_1510, cbModelParam._m0[31u].z, fma(_1509, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1508)) - _1481;
        float _1522 = fma(_1510, cbModelParam._m0[32u].z, fma(_1509, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1508)) - _1485;
        float _1526 = inversesqrt(dot(vec3(_1520, _1521, _1522), vec3(_1520, _1521, _1522)));
        float _1539 = ((_1526 * _1520) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1477 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1540 = ((_1526 * _1521) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1481 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1541 = ((_1526 * _1522) / cbModelParam._m0[35u].z) + ((((((_1485 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1543 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1539, _1540, _1541), 0.0);
        vec4 _1550 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1539, _1540, _1541), 0.0);
        vec4 _1557 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1539, _1540, _1541), 0.0);
        vec4 _1564 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1539, _1540, _1541), 0.0);
        float _1576 = exp2((_1543.w + (-0.5)) * 20.0) * 2.0;
        float _1577 = _1576 * (_1543.x + (-0.5));
        float _1578 = _1576 * (_1543.y + (-0.5));
        float _1579 = _1576 * (_1543.z + (-0.5));
        float _1586 = exp2((_1550.w + (-0.5)) * 20.0) * 2.0;
        float _1587 = _1586 * (_1550.x + (-0.5));
        float _1588 = _1586 * (_1550.y + (-0.5));
        float _1589 = _1586 * (_1550.z + (-0.5));
        float _1596 = exp2((_1557.w + (-0.5)) * 20.0) * 2.0;
        float _1597 = _1596 * (_1557.x + (-0.5));
        float _1598 = _1596 * (_1557.y + (-0.5));
        float _1599 = _1596 * (_1557.z + (-0.5));
        float _1606 = exp2((_1564.w + (-0.5)) * 20.0) * 2.0;
        float _1607 = _1606 * (_1564.x + (-0.5));
        float _1608 = _1606 * (_1564.y + (-0.5));
        float _1609 = _1606 * (_1564.z + (-0.5));
        float _1610 = isnan(0.0) ? _1607 : (isnan(_1607) ? 0.0 : max(_1607, 0.0));
        float _1611 = isnan(0.0) ? _1608 : (isnan(_1608) ? 0.0 : max(_1608, 0.0));
        float _1612 = isnan(0.0) ? _1609 : (isnan(_1609) ? 0.0 : max(_1609, 0.0));
        float _1613 = _1577 * 0.5;
        float _1614 = _1587 * 0.5;
        float _1615 = _1597 * 0.5;
        float _1616 = dot(vec3(_1613, _1614, _1615), vec3(_1613, _1614, _1615));
        float _1621 = (_1616 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1616);
        float _1629 = (dot(vec3(_918, _919, _920), vec3(_1621 * _1613, _1621 * _1614, _1621 * _1615)) + 1.0) * 0.5;
        float _4367 = isnan(0.0) ? _1629 : (isnan(_1629) ? 0.0 : max(_1629, 0.0));
        float _1638 = sqrt(((_1614 * _1614) + (_1613 * _1613)) + (_1615 * _1615)) / (_1610 + 9.9999997473787516355514526367188e-06);
        float _4378 = isnan(0.0) ? _1638 : (isnan(_1638) ? 0.0 : max(_1638, 0.0));
        float _1639 = isnan(1.0) ? _4378 : (isnan(_4378) ? 1.0 : min(_4378, 1.0));
        float _1640 = _1639 * 2.0;
        float _1644 = (1.0 - _1639) / (_1639 + 1.0);
        float _4389 = isnan(0.0) ? _1644 : (isnan(_1644) ? 0.0 : max(_1644, 0.0));
        float _1645 = isnan(1.0) ? _4389 : (isnan(_4389) ? 1.0 : min(_4389, 1.0));
        float _1654 = ((((1.0 - _1645) * (_1640 + 2.0)) * exp2(log2(isnan(1.0) ? _4367 : (isnan(_4367) ? 1.0 : min(_4367, 1.0))) * (_1640 + 1.0))) + _1645) * _1610;
        float _1655 = _1578 * 0.5;
        float _1656 = _1588 * 0.5;
        float _1657 = _1598 * 0.5;
        float _1658 = dot(vec3(_1655, _1656, _1657), vec3(_1655, _1656, _1657));
        float _1663 = (_1658 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1658);
        float _1671 = (dot(vec3(_918, _919, _920), vec3(_1663 * _1655, _1663 * _1656, _1663 * _1657)) + 1.0) * 0.5;
        float _4400 = isnan(0.0) ? _1671 : (isnan(_1671) ? 0.0 : max(_1671, 0.0));
        float _1680 = sqrt(((_1656 * _1656) + (_1655 * _1655)) + (_1657 * _1657)) / (_1611 + 9.9999997473787516355514526367188e-06);
        float _4411 = isnan(0.0) ? _1680 : (isnan(_1680) ? 0.0 : max(_1680, 0.0));
        float _1681 = isnan(1.0) ? _4411 : (isnan(_4411) ? 1.0 : min(_4411, 1.0));
        float _1682 = _1681 * 2.0;
        float _1686 = (1.0 - _1681) / (_1681 + 1.0);
        float _4422 = isnan(0.0) ? _1686 : (isnan(_1686) ? 0.0 : max(_1686, 0.0));
        float _1687 = isnan(1.0) ? _4422 : (isnan(_4422) ? 1.0 : min(_4422, 1.0));
        float _1696 = ((((1.0 - _1687) * (_1682 + 2.0)) * exp2(log2(isnan(1.0) ? _4400 : (isnan(_4400) ? 1.0 : min(_4400, 1.0))) * (_1682 + 1.0))) + _1687) * _1611;
        float _1697 = _1579 * 0.5;
        float _1698 = _1589 * 0.5;
        float _1699 = _1599 * 0.5;
        float _1700 = dot(vec3(_1697, _1698, _1699), vec3(_1697, _1698, _1699));
        float _1705 = (_1700 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1700);
        float _1713 = (dot(vec3(_918, _919, _920), vec3(_1705 * _1697, _1705 * _1698, _1705 * _1699)) + 1.0) * 0.5;
        float _4433 = isnan(0.0) ? _1713 : (isnan(_1713) ? 0.0 : max(_1713, 0.0));
        float _1722 = sqrt(((_1698 * _1698) + (_1697 * _1697)) + (_1699 * _1699)) / (_1612 + 9.9999997473787516355514526367188e-06);
        float _4444 = isnan(0.0) ? _1722 : (isnan(_1722) ? 0.0 : max(_1722, 0.0));
        float _1723 = isnan(1.0) ? _4444 : (isnan(_4444) ? 1.0 : min(_4444, 1.0));
        float _1724 = _1723 * 2.0;
        float _1728 = (1.0 - _1723) / (_1723 + 1.0);
        float _4455 = isnan(0.0) ? _1728 : (isnan(_1728) ? 0.0 : max(_1728, 0.0));
        float _1729 = isnan(1.0) ? _4455 : (isnan(_4455) ? 1.0 : min(_4455, 1.0));
        float _1738 = ((((1.0 - _1729) * (_1724 + 2.0)) * exp2(log2(isnan(1.0) ? _4433 : (isnan(_4433) ? 1.0 : min(_4433, 1.0))) * (_1724 + 1.0))) + _1729) * _1612;
        _1746 = _1579;
        _1747 = _1578;
        _1748 = _1577;
        _1749 = _1589;
        _1750 = _1588;
        _1751 = _1587;
        _1752 = _1599;
        _1753 = _1598;
        _1754 = _1597;
        _1755 = _1612;
        _1756 = _1611;
        _1757 = _1610;
        _1758 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1654 : (isnan(_1654) ? 0.0 : max(_1654, 0.0)));
        _1759 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1696 : (isnan(_1696) ? 0.0 : max(_1696, 0.0)));
        _1760 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1738 : (isnan(_1738) ? 0.0 : max(_1738, 0.0)));
    }
    else
    {
        _1746 = _1440;
        _1747 = _1440;
        _1748 = _1440;
        _1749 = _1440;
        _1750 = _1440;
        _1751 = _1440;
        _1752 = _1440;
        _1753 = _1440;
        _1754 = _1440;
        _1755 = _1440;
        _1756 = _1440;
        _1757 = _1440;
        _1758 = 0.0;
        _1759 = 0.0;
        _1760 = 0.0;
    }
    float _1770 = (cbModelParam._m0[1u].x * (_1758 - _1452)) + _1452;
    float _1771 = (cbModelParam._m0[1u].x * (_1759 - _1453)) + _1453;
    float _1772 = (cbModelParam._m0[1u].x * (_1760 - _1454)) + _1454;
    float _1793 = fma(_1772, cbSceneParam._m0[89u].z, fma(_1771, cbSceneParam._m0[89u].y, _1770 * cbSceneParam._m0[89u].x));
    float _1796 = fma(_1772, cbSceneParam._m0[90u].z, fma(_1771, cbSceneParam._m0[90u].y, _1770 * cbSceneParam._m0[90u].x));
    float _1799 = fma(_1772, cbSceneParam._m0[91u].z, fma(_1771, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1770));
    float _1814 = _1077 * 0.5;
    float _1815 = _1078 * 0.5;
    float _1816 = _1079 * 0.5;
    float _1817 = dot(vec4(_1814, _1815, _1816, 1.0), vec4(_1748, _1751, _1754, _1757));
    float _1820 = dot(vec4(_1814, _1815, _1816, 1.0), vec4(_1747, _1750, _1753, _1756));
    float _1823 = dot(vec4(_1814, _1815, _1816, 1.0), vec4(_1746, _1749, _1752, _1755));
    float _1857;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1830 = dot(vec4(_1814, _1815, _1816, 1.0), vec4(_1439, _1443, _1446, _1449));
        float _1834 = dot(vec4(_1814, _1815, _1816, 1.0), vec4(_1441, _1444, _1447, _1450));
        float _1838 = dot(vec4(_1814, _1815, _1816, 1.0), vec4(_1442, _1445, _1448, _1451));
        float _1845 = dot(vec4(cbModelParam._m0[39u]), vec4(_1814, _1815, _1816, 1.0));
        _1857 = dot(vec3(isnan(0.0) ? _1838 : (isnan(_1838) ? 0.0 : max(_1838, 0.0)), isnan(0.0) ? _1834 : (isnan(_1834) ? 0.0 : max(_1834, 0.0)), isnan(0.0) ? _1830 : (isnan(_1830) ? 0.0 : max(_1830, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1845) ? 0.0 : (isnan(0.0) ? _1845 : max(0.0, _1845))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1857 = 1.0;
    }
    float _1868;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1859 = dot(vec4(cbModelParam._m0[40u]), vec4(_1814, _1815, _1816, 1.0));
        _1868 = dot(vec3(isnan(0.0) ? _1817 : (isnan(_1817) ? 0.0 : max(_1817, 0.0)), isnan(0.0) ? _1820 : (isnan(_1820) ? 0.0 : max(_1820, 0.0)), isnan(0.0) ? _1823 : (isnan(_1823) ? 0.0 : max(_1823, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1859) ? 0.0 : (isnan(0.0) ? _1859 : max(0.0, _1859))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1868 = 1.0;
    }
    float _1872 = (_1868 * cbModelParam._m0[1u].x) + (_1857 * (1.0 - cbModelParam._m0[1u].x));
    float _1882 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _921);
    float _1883 = isnan(_1882) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1882 : min(cbModelParam._m0[25u].z, _1882));
    float _1963;
    float _1965;
    float _1967;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1930 = fma(_1138, cbModelParam._m0[13u].z, fma(_1134, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1130)) + cbModelParam._m0[13u].w;
        float _1934 = fma(_1138, cbModelParam._m0[14u].z, fma(_1134, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1130)) + cbModelParam._m0[14u].w;
        float _1938 = fma(_1138, cbModelParam._m0[15u].z, fma(_1134, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1130)) + cbModelParam._m0[15u].w;
        float _1941 = fma(_1079, cbModelParam._m0[13u].z, fma(_1078, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1077));
        float _1944 = fma(_1079, cbModelParam._m0[14u].z, fma(_1078, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1077));
        float _1947 = fma(_1079, cbModelParam._m0[15u].z, fma(_1078, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1077));
        float _1975;
        if (_1941 > 0.0)
        {
            _1975 = abs((1.0 - _1930) / _1941);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1941 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1930 + 1.0) / _1941);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1975 = frontier_phi_14_12_ladder;
        }
        float _2144;
        if (_1944 > 0.0)
        {
            _2144 = abs((1.0 - _1934) / _1944);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1944 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1934 + 1.0) / _1944);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2144 = frontier_phi_23_19_ladder;
        }
        float _2439;
        if (_1947 > 0.0)
        {
            _2439 = abs((1.0 - _1938) / _1947);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1947 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1938 + 1.0) / _1947);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2439 = frontier_phi_35_30_ladder;
        }
        float _2441 = isnan(_2144) ? _1975 : (isnan(_1975) ? _2144 : min(_1975, _2144));
        float _2442 = isnan(_2439) ? _2441 : (isnan(_2441) ? _2439 : min(_2441, _2439));
        float _2446 = (_2442 * _1941) + _1930;
        float _2447 = (_2442 * _1944) + _1934;
        float _2448 = (_2442 * _1947) + _1938;
        float _2449 = _2442 * 9.9999997473787516355514526367188e-05;
        float _2451 = (-1.0) - _2449;
        float _2453 = _2449 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2448 > _2453) || ((_2448 < _2451) || ((_2447 > _2453) || ((_2447 < _2451) || ((_2446 < _2451) || (_2446 > _2453))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2593 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2448, cbModelParam._m0[9u].z, fma(_2447, cbModelParam._m0[9u].y, _2446 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2448, cbModelParam._m0[10u].z, fma(_2447, cbModelParam._m0[10u].y, _2446 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2448, cbModelParam._m0[11u].z, fma(_2447, cbModelParam._m0[11u].y, _2446 * cbModelParam._m0[11u].x))), _1883);
            frontier_phi_13_35_ladder = _2593.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2593.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2593.x * cbModelParam._m0[1u].y;
        }
        _1963 = frontier_phi_13_35_ladder_2;
        _1965 = frontier_phi_13_35_ladder_1;
        _1967 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1951 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1077, _1078, _1079), _1883);
        _1963 = _1951.x * cbModelParam._m0[1u].y;
        _1965 = _1951.y * cbModelParam._m0[1u].y;
        _1967 = _1951.z * cbModelParam._m0[1u].y;
    }
    float _1971 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _921);
    float _1972 = isnan(_1971) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1971 : min(cbModelParam._m0[25u].w, _1971));
    float _2061;
    float _2063;
    float _2065;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2025 = fma(_1138, cbModelParam._m0[21u].z, fma(_1134, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1130)) + cbModelParam._m0[21u].w;
        float _2029 = fma(_1138, cbModelParam._m0[22u].z, fma(_1134, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1130)) + cbModelParam._m0[22u].w;
        float _2033 = fma(_1138, cbModelParam._m0[23u].z, fma(_1134, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1130)) + cbModelParam._m0[23u].w;
        float _2036 = fma(_1079, cbModelParam._m0[21u].z, fma(_1078, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1077));
        float _2039 = fma(_1079, cbModelParam._m0[22u].z, fma(_1078, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1077));
        float _2042 = fma(_1079, cbModelParam._m0[23u].z, fma(_1078, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1077));
        float _2149;
        if (_2036 > 0.0)
        {
            _2149 = abs((1.0 - _2025) / _2036);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_2036 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_2025 + 1.0) / _2036);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2149 = frontier_phi_25_21_ladder;
        }
        float _2466;
        if (_2039 > 0.0)
        {
            _2466 = abs((1.0 - _2029) / _2039);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_2039 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_2029 + 1.0) / _2039);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2466 = frontier_phi_37_32_ladder;
        }
        float _2793;
        if (_2042 > 0.0)
        {
            _2793 = abs((1.0 - _2033) / _2042);
        }
        else
        {
            float frontier_phi_47_44_ladder;
            if (_2042 < 0.0)
            {
                frontier_phi_47_44_ladder = abs((_2033 + 1.0) / _2042);
            }
            else
            {
                frontier_phi_47_44_ladder = 5000.0;
            }
            _2793 = frontier_phi_47_44_ladder;
        }
        float _2795 = isnan(_2466) ? _2149 : (isnan(_2149) ? _2466 : min(_2149, _2466));
        float _2796 = isnan(_2793) ? _2795 : (isnan(_2795) ? _2793 : min(_2795, _2793));
        float _2800 = (_2796 * _2036) + _2025;
        float _2801 = (_2796 * _2039) + _2029;
        float _2802 = (_2796 * _2042) + _2033;
        float _2803 = _2796 * 9.9999997473787516355514526367188e-05;
        float _2804 = (-1.0) - _2803;
        float _2806 = _2803 + 1.0;
        float frontier_phi_22_47_ladder;
        float frontier_phi_22_47_ladder_1;
        float frontier_phi_22_47_ladder_2;
        if ((_2802 > _2806) || ((_2802 < _2804) || ((_2801 > _2806) || ((_2801 < _2804) || ((_2800 < _2804) || (_2800 > _2806))))))
        {
            frontier_phi_22_47_ladder = 0.0;
            frontier_phi_22_47_ladder_1 = 0.0;
            frontier_phi_22_47_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2920 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2802, cbModelParam._m0[17u].z, fma(_2801, cbModelParam._m0[17u].y, _2800 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2802, cbModelParam._m0[18u].z, fma(_2801, cbModelParam._m0[18u].y, _2800 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2802, cbModelParam._m0[19u].z, fma(_2801, cbModelParam._m0[19u].y, _2800 * cbModelParam._m0[19u].x))), _1972);
            frontier_phi_22_47_ladder = _2920.z * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_1 = _2920.y * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_2 = _2920.x * cbModelParam._m0[1u].z;
        }
        _2061 = frontier_phi_22_47_ladder_2;
        _2063 = frontier_phi_22_47_ladder_1;
        _2065 = frontier_phi_22_47_ladder;
    }
    else
    {
        vec4 _2045 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1077, _1078, _1079), _1972);
        _2061 = _2045.x * cbModelParam._m0[1u].z;
        _2063 = _2045.y * cbModelParam._m0[1u].z;
        _2065 = _2045.z * cbModelParam._m0[1u].z;
    }
    float _2077 = ((((1.0 - _1098) * ((_1085 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_1098 * _1085)) * _1069;
    float _2078 = _2077 * ((cbModelParam._m0[1u].w * (_2061 - _1963)) + _1963);
    float _2079 = _2077 * ((cbModelParam._m0[1u].w * (_2063 - _1965)) + _1965);
    float _2080 = _2077 * ((cbModelParam._m0[1u].w * (_2065 - _1967)) + _1967);
    float _2083 = fma(_2080, cbSceneParam._m0[89u].z, fma(_2079, cbSceneParam._m0[89u].y, _2078 * cbSceneParam._m0[89u].x));
    float _2086 = fma(_2080, cbSceneParam._m0[90u].z, fma(_2079, cbSceneParam._m0[90u].y, _2078 * cbSceneParam._m0[90u].x));
    float _2089 = fma(_2080, cbSceneParam._m0[91u].z, fma(_2079, cbSceneParam._m0[91u].y, _2078 * cbSceneParam._m0[91u].x));
    float _2123 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2127 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2131 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2135 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2136 = _2123 / _2135;
    float _2137 = _2127 / _2135;
    float _2138 = _2131 / _2135;
    float _2285;
    float _2286;
    float _2287;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2165 = ((uint(_2138 > cbSceneParam._m0[59u].y) + uint(_2138 > cbSceneParam._m0[59u].x)) + uint(_2138 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2166 = _2165 + 43u;
        uint _2174 = _2165 + 44u;
        uint _2182 = _2165 + 45u;
        uint _2190 = _2165 + 46u;
        float _2201 = fma(_2135, cbSceneParam._m0[_2166].w, fma(_2131, cbSceneParam._m0[_2166].z, fma(_2127, cbSceneParam._m0[_2166].y, _2123 * cbSceneParam._m0[_2166].x)));
        float _2205 = fma(_2135, cbSceneParam._m0[_2174].w, fma(_2131, cbSceneParam._m0[_2174].z, fma(_2127, cbSceneParam._m0[_2174].y, _2123 * cbSceneParam._m0[_2174].x)));
        float _2213 = fma(_2135, cbSceneParam._m0[_2190].w, fma(_2131, cbSceneParam._m0[_2190].z, fma(_2127, cbSceneParam._m0[_2190].y, _2123 * cbSceneParam._m0[_2190].x)));
        float _2218 = cbSceneParam._m0[33u].z * _2213;
        float _2220 = cbSceneParam._m0[33u].w * _2213;
        float _2223 = fma(_2135, cbSceneParam._m0[_2182].w, fma(_2131, cbSceneParam._m0[_2182].z, fma(_2127, cbSceneParam._m0[_2182].y, _2123 * cbSceneParam._m0[_2182].x))) / _2213;
        float _2271 = (cbSceneParam._m0[33u].x - sqrt(((_2137 * _2137) + (_2136 * _2136)) + (_2138 * _2138))) * cbSceneParam._m0[33u].y;
        float _4581 = isnan(0.0) ? _2271 : (isnan(_2271) ? 0.0 : max(_2271, 0.0));
        float _2278 = (isnan(1.0) ? _4581 : (isnan(_4581) ? 1.0 : min(_4581, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2218 + _2201) / _2213, (_2220 + _2205) / _2213), _2223), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2220 + _2201) / _2213, (_2205 - _2218) / _2213), _2223), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2201 - _2218) / _2213, (_2205 - _2220) / _2213), _2223), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2201 - _2220) / _2213, (_2218 + _2205) / _2213), _2223), 0.0)).x), vec4(0.25)));
        _2285 = 1.0 - (_2278 * cbSceneParam._m0[34u].x);
        _2286 = 1.0 - (_2278 * cbSceneParam._m0[34u].y);
        _2287 = 1.0 - (_2278 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2285 = 1.0;
        _2286 = 1.0;
        _2287 = 1.0;
    }
    float _2351;
    float _2353;
    float _2355;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2339 = fma(_2135, cbSceneParam._m0[63u].w, fma(_2131, cbSceneParam._m0[63u].z, fma(_2127, cbSceneParam._m0[63u].y, _2123 * cbSceneParam._m0[63u].x)));
        float _2340 = fma(_2135, cbSceneParam._m0[60u].w, fma(_2131, cbSceneParam._m0[60u].z, fma(_2127, cbSceneParam._m0[60u].y, _2123 * cbSceneParam._m0[60u].x))) / _2339;
        float _2341 = fma(_2135, cbSceneParam._m0[61u].w, fma(_2131, cbSceneParam._m0[61u].z, fma(_2127, cbSceneParam._m0[61u].y, _2123 * cbSceneParam._m0[61u].x))) / _2339;
        float frontier_phi_34_33_ladder;
        float frontier_phi_34_33_ladder_1;
        float frontier_phi_34_33_ladder_2;
        if ((((_2340 >= cbSceneParam._m0[64u].x) && (_2341 >= cbSceneParam._m0[64u].y)) && (_2340 <= cbSceneParam._m0[64u].z)) && (_2341 <= cbSceneParam._m0[64u].w))
        {
            float _2479 = fma(_2135, cbSceneParam._m0[62u].w, fma(_2131, cbSceneParam._m0[62u].z, fma(_2127, cbSceneParam._m0[62u].y, _2123 * cbSceneParam._m0[62u].x))) / _2339;
            float _2483 = isnan(cbSceneParam._m0[41u].w) ? _2479 : (isnan(_2479) ? cbSceneParam._m0[41u].w : max(_2479, cbSceneParam._m0[41u].w));
            float _2526 = (cbSceneParam._m0[33u].x - sqrt(((_2137 * _2137) + (_2136 * _2136)) + (_2138 * _2138))) * cbSceneParam._m0[33u].y;
            float _4597 = isnan(0.0) ? _2526 : (isnan(_2526) ? 0.0 : max(_2526, 0.0));
            float _2533 = (isnan(1.0) ? _4597 : (isnan(_4597) ? 1.0 : min(_4597, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2340, cbSceneParam._m0[33u].w + _2341), _2483), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2340, _2341 - cbSceneParam._m0[33u].z), _2483), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2340 - cbSceneParam._m0[33u].z, _2341 - cbSceneParam._m0[33u].w), _2483), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2340 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2341), _2483), 0.0)).x), vec4(0.25)));
            float _2537 = 1.0 - (_2533 * cbSceneParam._m0[34u].x);
            float _2538 = 1.0 - (_2533 * cbSceneParam._m0[34u].y);
            float _2539 = 1.0 - (_2533 * cbSceneParam._m0[34u].z);
            frontier_phi_34_33_ladder = isnan(_2539) ? _2287 : (isnan(_2287) ? _2539 : min(_2287, _2539));
            frontier_phi_34_33_ladder_1 = isnan(_2538) ? _2286 : (isnan(_2286) ? _2538 : min(_2286, _2538));
            frontier_phi_34_33_ladder_2 = isnan(_2537) ? _2285 : (isnan(_2285) ? _2537 : min(_2285, _2537));
        }
        else
        {
            frontier_phi_34_33_ladder = _2287;
            frontier_phi_34_33_ladder_1 = _2286;
            frontier_phi_34_33_ladder_2 = _2285;
        }
        _2351 = frontier_phi_34_33_ladder_2;
        _2353 = frontier_phi_34_33_ladder_1;
        _2355 = frontier_phi_34_33_ladder;
    }
    else
    {
        _2351 = _2285;
        _2353 = _2286;
        _2355 = _2287;
    }
    uvec4 _2360 = floatBitsToUint(cbInstanceData._m0[_280 + 5u]);
    uint _2362 = _2360.x * 14u;
    uint _2363 = _2362 + 13u;
    float _2370 = _1069 + (-1.0);
    float _2375 = (cbLight._m0[_2363].x * _2370) + 1.0;
    float _2376 = (cbLight._m0[_2363].y * _2370) + 1.0;
    float _2377 = (cbLight._m0[_2363].z * _2370) + 1.0;
    float _2378 = (cbLight._m0[_2363].w * _2370) + 1.0;
    uint _2379 = _2362 + 5u;
    float _2385 = isnan(1.0) ? _2376 : (isnan(_2376) ? 1.0 : min(_2376, 1.0));
    uint _2389 = _2362 + 4u;
    float _2398 = isnan(1.0) ? _2375 : (isnan(_2375) ? 1.0 : min(_2375, 1.0));
    uint _2402 = _2362 | 1u;
    float _2413 = dot(vec3(cbLight._m0[_2362].xyz), vec3(_918, _919, _920));
    float _2416 = dot(vec3(cbLight._m0[_2402].xyz), vec3(_918, _919, _920));
    float _4633 = isnan(0.0) ? _2413 : (isnan(_2413) ? 0.0 : max(_2413, 0.0));
    float _4644 = isnan(0.0) ? _2416 : (isnan(_2416) ? 0.0 : max(_2416, 0.0));
    float _2421 = (isnan(1.0) ? _4633 : (isnan(_4633) ? 1.0 : min(_4633, 1.0))) * 0.3183098733425140380859375;
    float _2423 = (isnan(1.0) ? _4644 : (isnan(_4644) ? 1.0 : min(_4644, 1.0))) * 0.3183098733425140380859375;
    float _2430 = ((cbLight._m0[_2379].x * _2385) * _2423) + (((cbLight._m0[_2389].x * _2351) * _2398) * _2421);
    float _2431 = ((_2385 * cbLight._m0[_2379].y) * _2423) + (((cbLight._m0[_2389].y * _2353) * _2398) * _2421);
    float _2432 = ((_2385 * cbLight._m0[_2379].z) * _2423) + (((cbLight._m0[_2389].z * _2355) * _2398) * _2421);
    uvec4 _2436 = floatBitsToUint(cbLight._m0[_2362 + 12u]);
    bool _2438 = _2436.x == 0u;
    float _2540;
    float _2542;
    float _2544;
    if (_2438)
    {
        _2540 = _2430;
        _2542 = _2431;
        _2544 = _2432;
    }
    else
    {
        uint _2548 = _2362 + 6u;
        float _2564 = (dot(vec3(cbLight._m0[_2362 + 2u].xyz), vec3(_918, _919, _920)) * 0.5) + 0.5;
        float _2565 = _2564 * _2564;
        float _4655 = isnan(0.0) ? _2565 : (isnan(_2565) ? 0.0 : max(_2565, 0.0));
        float _2566 = isnan(1.0) ? _4655 : (isnan(_4655) ? 1.0 : min(_4655, 1.0));
        float _2567 = isnan(1.0) ? _2377 : (isnan(_2377) ? 1.0 : min(_2377, 1.0));
        _2540 = (((cbLight._m0[_2548].x * 0.3183098733425140380859375) * _2566) * _2567) + _2430;
        _2542 = (((cbLight._m0[_2548].y * 0.3183098733425140380859375) * _2566) * _2567) + _2431;
        _2544 = (((cbLight._m0[_2548].z * 0.3183098733425140380859375) * _2566) * _2567) + _2432;
    }
    bool _2547 = _2436.y == 0u;
    float _2602;
    float _2604;
    float _2606;
    if (_2547)
    {
        _2602 = _2540;
        _2604 = _2542;
        _2606 = _2544;
    }
    else
    {
        uint _2764 = _2362 + 7u;
        float _2780 = (dot(vec3(cbLight._m0[_2362 + 3u].xyz), vec3(_918, _919, _920)) * 0.5) + 0.5;
        float _2781 = _2780 * _2780;
        float _4671 = isnan(0.0) ? _2781 : (isnan(_2781) ? 0.0 : max(_2781, 0.0));
        float _2782 = isnan(1.0) ? _4671 : (isnan(_4671) ? 1.0 : min(_4671, 1.0));
        float _2783 = isnan(1.0) ? _2378 : (isnan(_2378) ? 1.0 : min(_2378, 1.0));
        _2602 = (((cbLight._m0[_2764].x * 0.3183098733425140380859375) * _2782) * _2783) + _2540;
        _2604 = (((cbLight._m0[_2764].y * 0.3183098733425140380859375) * _2782) * _2783) + _2542;
        _2606 = (((cbLight._m0[_2764].z * 0.3183098733425140380859375) * _2782) * _2783) + _2544;
    }
    uint _2609 = _2362 + 8u;
    float _2622 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2362].w)) * _921) * 0.949999988079071044921875);
    float _2623 = _2622 * _2622;
    float _2624 = cbLight._m0[_2362].x + _998;
    float _2625 = cbLight._m0[_2362].y + _999;
    float _2626 = cbLight._m0[_2362].z + _1000;
    float _2630 = inversesqrt(dot(vec3(_2624, _2625, _2626), vec3(_2624, _2625, _2626)));
    float _2631 = _2630 * _2624;
    float _2632 = _2630 * _2625;
    float _2633 = _2630 * _2626;
    float _2634 = dot(vec3(_918, _919, _920), vec3(cbLight._m0[_2362].xyz));
    float _4687 = isnan(0.0) ? _2634 : (isnan(_2634) ? 0.0 : max(_2634, 0.0));
    float _2637 = isnan(1.0) ? _4687 : (isnan(_4687) ? 1.0 : min(_4687, 1.0));
    float _4698 = isnan(0.0) ? _1070 : (isnan(_1070) ? 0.0 : max(_1070, 0.0));
    float _2638 = isnan(1.0) ? _4698 : (isnan(_4698) ? 1.0 : min(_4698, 1.0));
    float _2639 = dot(vec3(_918, _919, _920), vec3(_2631, _2632, _2633));
    float _4709 = isnan(0.0) ? _2639 : (isnan(_2639) ? 0.0 : max(_2639, 0.0));
    float _2642 = isnan(1.0) ? _4709 : (isnan(_4709) ? 1.0 : min(_4709, 1.0));
    float _2643 = dot(vec3(cbLight._m0[_2362].xyz), vec3(_2631, _2632, _2633));
    float _4720 = isnan(0.0) ? _2643 : (isnan(_2643) ? 0.0 : max(_2643, 0.0));
    float _2647 = _2623 * _2623;
    float _2651 = ((_2642 * _2642) * (_2647 + (-1.0))) + 1.0;
    float _2662 = (exp2(log2(1.0 - (isnan(1.0) ? _4720 : (isnan(_4720) ? 1.0 : min(_4720, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2663 = 1.0 - _2623;
    float _2674 = (0.5 / (((_2638 * ((_2637 * _2663) + _2623)) + 9.9999999392252902907785028219223e-09) + (((_2638 * _2663) + _2623) * _2637))) * _2637;
    float _4731 = isnan(0.0) ? _2674 : (isnan(_2674) ? 0.0 : max(_2674, 0.0));
    float _2676 = (isnan(1.0) ? _4731 : (isnan(_4731) ? 1.0 : min(_4731, 1.0))) * (_2647 / ((_2651 * _2651) * 3.141590118408203125));
    uint _2690 = _2362 + 9u;
    float _2701 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2402].w)) * _921) * 0.949999988079071044921875);
    float _2702 = _2701 * _2701;
    float _2703 = cbLight._m0[_2402].x + _998;
    float _2704 = cbLight._m0[_2402].y + _999;
    float _2705 = cbLight._m0[_2402].z + _1000;
    float _2709 = inversesqrt(dot(vec3(_2703, _2704, _2705), vec3(_2703, _2704, _2705)));
    float _2710 = _2709 * _2703;
    float _2711 = _2709 * _2704;
    float _2712 = _2709 * _2705;
    float _2713 = dot(vec3(_918, _919, _920), vec3(cbLight._m0[_2402].xyz));
    float _4742 = isnan(0.0) ? _2713 : (isnan(_2713) ? 0.0 : max(_2713, 0.0));
    float _2716 = isnan(1.0) ? _4742 : (isnan(_4742) ? 1.0 : min(_4742, 1.0));
    float _2717 = dot(vec3(_918, _919, _920), vec3(_2710, _2711, _2712));
    float _4753 = isnan(0.0) ? _2717 : (isnan(_2717) ? 0.0 : max(_2717, 0.0));
    float _2720 = isnan(1.0) ? _4753 : (isnan(_4753) ? 1.0 : min(_4753, 1.0));
    float _2721 = dot(vec3(cbLight._m0[_2402].xyz), vec3(_2710, _2711, _2712));
    float _4764 = isnan(0.0) ? _2721 : (isnan(_2721) ? 0.0 : max(_2721, 0.0));
    float _2725 = _2702 * _2702;
    float _2729 = ((_2720 * _2720) * (_2725 + (-1.0))) + 1.0;
    float _2738 = (exp2(log2(1.0 - (isnan(1.0) ? _4764 : (isnan(_4764) ? 1.0 : min(_4764, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2739 = 1.0 - _2702;
    float _2749 = (0.5 / (((_2638 * ((_2716 * _2739) + _2702)) + 9.9999999392252902907785028219223e-09) + (((_2638 * _2739) + _2702) * _2716))) * _2716;
    float _4775 = isnan(0.0) ? _2749 : (isnan(_2749) ? 0.0 : max(_2749, 0.0));
    float _2751 = (isnan(1.0) ? _4775 : (isnan(_4775) ? 1.0 : min(_4775, 1.0))) * (_2725 / ((_2729 * _2729) * 3.141590118408203125));
    float _2761 = (((_2738 * cbLight._m0[_2690].x) * _2751) * _2385) + ((((cbLight._m0[_2609].x * _2351) * _2662) * _2676) * _2398);
    float _2762 = (((_2738 * cbLight._m0[_2690].y) * _2751) * _2385) + ((((cbLight._m0[_2609].y * _2353) * _2662) * _2676) * _2398);
    float _2763 = (((_2738 * cbLight._m0[_2690].z) * _2751) * _2385) + ((((cbLight._m0[_2609].z * _2355) * _2662) * _2676) * _2398);
    float _2819;
    float _2821;
    float _2823;
    if (_2438)
    {
        _2819 = _2761;
        _2821 = _2762;
        _2823 = _2763;
    }
    else
    {
        uint _2825 = _2362 + 2u;
        uint _2829 = _2362 + 10u;
        float _2843 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2825].w)) * _921) * 0.949999988079071044921875);
        float _2844 = _2843 * _2843;
        float _2845 = cbLight._m0[_2825].x + _998;
        float _2846 = cbLight._m0[_2825].y + _999;
        float _2847 = cbLight._m0[_2825].z + _1000;
        float _2851 = inversesqrt(dot(vec3(_2845, _2846, _2847), vec3(_2845, _2846, _2847)));
        float _2852 = _2851 * _2845;
        float _2853 = _2851 * _2846;
        float _2854 = _2851 * _2847;
        float _2855 = dot(vec3(_918, _919, _920), vec3(cbLight._m0[_2825].xyz));
        float _4786 = isnan(0.0) ? _2855 : (isnan(_2855) ? 0.0 : max(_2855, 0.0));
        float _2858 = isnan(1.0) ? _4786 : (isnan(_4786) ? 1.0 : min(_4786, 1.0));
        float _2859 = dot(vec3(_918, _919, _920), vec3(_2852, _2853, _2854));
        float _4797 = isnan(0.0) ? _2859 : (isnan(_2859) ? 0.0 : max(_2859, 0.0));
        float _2862 = isnan(1.0) ? _4797 : (isnan(_4797) ? 1.0 : min(_4797, 1.0));
        float _2863 = dot(vec3(cbLight._m0[_2825].xyz), vec3(_2852, _2853, _2854));
        float _4808 = isnan(0.0) ? _2863 : (isnan(_2863) ? 0.0 : max(_2863, 0.0));
        float _2867 = _2844 * _2844;
        float _2871 = ((_2862 * _2862) * (_2867 + (-1.0))) + 1.0;
        float _2880 = (exp2(log2(1.0 - (isnan(1.0) ? _4808 : (isnan(_4808) ? 1.0 : min(_4808, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2881 = 1.0 - _2844;
        float _2891 = (0.5 / (((_2638 * ((_2858 * _2881) + _2844)) + 9.9999999392252902907785028219223e-09) + (((_2638 * _2881) + _2844) * _2858))) * _2858;
        float _4819 = isnan(0.0) ? _2891 : (isnan(_2891) ? 0.0 : max(_2891, 0.0));
        float _2893 = (isnan(1.0) ? _4819 : (isnan(_4819) ? 1.0 : min(_4819, 1.0))) * (_2867 / ((_2871 * _2871) * 3.141590118408203125));
        float _2894 = isnan(1.0) ? _2377 : (isnan(_2377) ? 1.0 : min(_2377, 1.0));
        _2819 = (((_2880 * cbLight._m0[_2829].x) * _2893) * _2894) + _2761;
        _2821 = (((_2880 * cbLight._m0[_2829].y) * _2893) * _2894) + _2762;
        _2823 = (((_2880 * cbLight._m0[_2829].z) * _2893) * _2894) + _2763;
    }
    float _2925;
    float _2927;
    float _2929;
    if (_2547)
    {
        _2925 = _2819;
        _2927 = _2821;
        _2929 = _2823;
    }
    else
    {
        uint _2936 = _2362 + 3u;
        uint _2940 = _2362 + 11u;
        float _2954 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2936].w)) * _921) * 0.949999988079071044921875);
        float _2955 = _2954 * _2954;
        float _2956 = cbLight._m0[_2936].x + _998;
        float _2957 = cbLight._m0[_2936].y + _999;
        float _2958 = cbLight._m0[_2936].z + _1000;
        float _2962 = inversesqrt(dot(vec3(_2956, _2957, _2958), vec3(_2956, _2957, _2958)));
        float _2963 = _2962 * _2956;
        float _2964 = _2962 * _2957;
        float _2965 = _2962 * _2958;
        float _2966 = dot(vec3(_918, _919, _920), vec3(cbLight._m0[_2936].xyz));
        float _4835 = isnan(0.0) ? _2966 : (isnan(_2966) ? 0.0 : max(_2966, 0.0));
        float _2969 = isnan(1.0) ? _4835 : (isnan(_4835) ? 1.0 : min(_4835, 1.0));
        float _2970 = dot(vec3(_918, _919, _920), vec3(_2963, _2964, _2965));
        float _4846 = isnan(0.0) ? _2970 : (isnan(_2970) ? 0.0 : max(_2970, 0.0));
        float _2973 = isnan(1.0) ? _4846 : (isnan(_4846) ? 1.0 : min(_4846, 1.0));
        float _2974 = dot(vec3(cbLight._m0[_2936].xyz), vec3(_2963, _2964, _2965));
        float _4857 = isnan(0.0) ? _2974 : (isnan(_2974) ? 0.0 : max(_2974, 0.0));
        float _2978 = _2955 * _2955;
        float _2982 = ((_2973 * _2973) * (_2978 + (-1.0))) + 1.0;
        float _2991 = (exp2(log2(1.0 - (isnan(1.0) ? _4857 : (isnan(_4857) ? 1.0 : min(_4857, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2992 = 1.0 - _2955;
        float _3002 = (0.5 / (((_2638 * ((_2969 * _2992) + _2955)) + 9.9999999392252902907785028219223e-09) + (((_2638 * _2992) + _2955) * _2969))) * _2969;
        float _4868 = isnan(0.0) ? _3002 : (isnan(_3002) ? 0.0 : max(_3002, 0.0));
        float _3004 = (isnan(1.0) ? _4868 : (isnan(_4868) ? 1.0 : min(_4868, 1.0))) * (_2978 / ((_2982 * _2982) * 3.141590118408203125));
        float _3005 = isnan(1.0) ? _2378 : (isnan(_2378) ? 1.0 : min(_2378, 1.0));
        _2925 = (((_2991 * cbLight._m0[_2940].x) * _3004) * _3005) + _2819;
        _2927 = (((_2991 * cbLight._m0[_2940].y) * _3004) * _3005) + _2821;
        _2929 = (((_2991 * cbLight._m0[_2940].z) * _3004) * _3005) + _2823;
    }
    float _3071;
    float _3073;
    float _3075;
    float _3077;
    float _3079;
    float _3081;
    if (_2360.y == 0u)
    {
        uvec4 _3026 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3027 = _3026.x;
        uint _3038 = uint((float(_3026.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1007) / _3027))) + floor(float(uint(cbSceneParam._m0[85u].x * _1006) / _3027)));
        float _3048 = (log2(_2138 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _3049 = isnan(0.0) ? _3048 : (isnan(_3048) ? 0.0 : max(_3048, 0.0));
        uint _3052 = uint(isnan(14.0) ? _3049 : (isnan(_3049) ? 14.0 : min(_3049, 14.0)));
        uvec4 _3057 = texelFetch(g_lightClusterGridBuffer, int(((_3052 << 2u) + (_3038 << 6u)) >> 2u));
        uint _3058 = _3057.x;
        uint _3059 = _3026.z;
        float _3138;
        float _3140;
        float _3142;
        float _3144;
        float _3146;
        float _3148;
        if (((((1u << ((_3059 >> 4u) & 15u)) + 4294967295u) & _3058) == 0u) || ((_3059 & 240u) == 0u))
        {
            _3138 = 0.0;
            _3140 = 0.0;
            _3142 = 0.0;
            _3144 = 0.0;
            _3146 = 0.0;
            _3148 = 0.0;
        }
        else
        {
            float _3139;
            float _3141;
            float _3143;
            float _3145;
            float _3147;
            float _3149;
            float _3283 = 0.0;
            float _3284 = 0.0;
            float _3285 = 0.0;
            float _3286 = 0.0;
            float _3287 = 0.0;
            float _3288 = 0.0;
            uint _3289 = 0u;
            uint _3298;
            bool _3299;
            for (;;)
            {
                _3298 = texelFetch(g_lightClassification, int((((_3052 << 5u) + (_3038 << 9u)) + (_3289 << 2u)) >> 2u)).x;
                _3299 = _3298 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3299)
                {
                    frontier_phi_66_pred = _3288;
                    frontier_phi_66_pred_1 = _3287;
                    frontier_phi_66_pred_2 = _3286;
                    frontier_phi_66_pred_3 = _3285;
                    frontier_phi_66_pred_4 = _3284;
                    frontier_phi_66_pred_5 = _3283;
                }
                else
                {
                    float _3407;
                    float _3408;
                    float _3409;
                    float _3410;
                    float _3411;
                    float _3412;
                    uint _3413;
                    _3407 = _3283;
                    _3408 = _3284;
                    _3409 = _3285;
                    _3410 = _3286;
                    _3411 = _3287;
                    _3412 = _3288;
                    _3413 = _3298;
                    float _3339;
                    float _3340;
                    float _3341;
                    float _3342;
                    float _3343;
                    float _3344;
                    for (;;)
                    {
                        uint _3417 = uint(findLSB(_3413)) + (_3289 << 5u);
                        uint _3414 = (_3413 + 4294967295u) & _3413;
                        uint _3419 = _3417 * 48u;
                        vec4 _3433 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3419)).x, texelFetch(g_PointLightRenderingBuffer, int(_3419 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3419 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3419 + 3u)).x));
                        uint _3439 = (_3417 * 48u) + 4u;
                        vec4 _3452 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3439)).x, texelFetch(g_PointLightRenderingBuffer, int(_3439 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3439 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3439 + 3u)).x));
                        uint _3458 = (_3417 * 48u) + 8u;
                        vec3 _3469 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3458)).x, texelFetch(g_PointLightRenderingBuffer, int(_3458 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3458 + 2u)).x));
                        float _3473 = _3433.x - _2136;
                        float _3474 = _3433.y - _2137;
                        float _3475 = _3433.z - _2138;
                        float _3476 = dot(vec3(_3473, _3474, _3475), vec3(_3473, _3474, _3475));
                        float _3479 = inversesqrt(_3476);
                        float _3480 = _3479 * _3473;
                        float _3481 = _3479 * _3474;
                        float _3482 = _3479 * _3475;
                        float _3483 = dot(vec3(_1025, _1028, _1031), vec3(_3480, _3481, _3482));
                        float _3488 = 1.0 - (_3476 * _3433.w);
                        float _4894 = isnan(0.0) ? _3488 : (isnan(_3488) ? 0.0 : max(_3488, 0.0));
                        float _3489 = isnan(1.0) ? _4894 : (isnan(_4894) ? 1.0 : min(_4894, 1.0));
                        float _3490 = sqrt(_3476) * _3452.w;
                        float _3493 = 1.39999997615814208984375 / (_3490 + 1.39999997615814208984375);
                        float _3494 = _3493 * _3493;
                        float _3497 = ((1.0 - _3494) * _3483) + _3494;
                        float _3500 = _3490 * _3490;
                        float _3504 = ((isnan(0.0) ? _3497 : (isnan(_3497) ? 0.0 : max(_3497, 0.0))) * _3489) / ((_3500 * 0.699999988079071044921875) + 1.0);
                        float _3508 = (-0.0) - _2136;
                        float _3509 = (-0.0) - _2137;
                        float _3510 = (-0.0) - _2138;
                        float _3514 = inversesqrt(dot(vec3(_3508, _3509, _3510), vec3(_3508, _3509, _3510)));
                        float _3515 = _3514 * _3508;
                        float _3516 = _3514 * _3509;
                        float _3517 = _3514 * _3510;
                        float _3524 = exp2(log2(1.0 / ((_3500 * 3.5) + 5.0)) * 0.25);
                        float _3525 = 1.0 - _1085;
                        float _3532 = sqrt(1.0 - ((1.0 - (_3525 * _3525)) * (1.0 - (_3524 * _3524))));
                        float _3533 = _3532 * _3532;
                        float _3534 = _3533 * _3533;
                        float _3535 = _3515 + _3480;
                        float _3536 = _3516 + _3481;
                        float _3537 = _3517 + _3482;
                        float _3541 = inversesqrt(dot(vec3(_3535, _3536, _3537), vec3(_3535, _3536, _3537)));
                        float _3545 = dot(vec3(_1025, _1028, _1031), vec3(_3515, _3516, _3517));
                        float _4910 = isnan(0.0) ? _3545 : (isnan(_3545) ? 0.0 : max(_3545, 0.0));
                        float _3548 = isnan(1.0) ? _4910 : (isnan(_4910) ? 1.0 : min(_4910, 1.0));
                        float _3549 = dot(vec3(_1025, _1028, _1031), vec3(_3541 * _3535, _3541 * _3536, _3541 * _3537));
                        float _4921 = isnan(0.0) ? _3549 : (isnan(_3549) ? 0.0 : max(_3549, 0.0));
                        float _3552 = isnan(1.0) ? _4921 : (isnan(_4921) ? 1.0 : min(_4921, 1.0));
                        float _3556 = ((_3552 * _3552) * (_3534 + (-1.0))) + 1.0;
                        float _3557 = _3493 * _3533;
                        float _3558 = _3557 * _3557;
                        float _3561 = ((1.0 - _3558) * _3483) + _3558;
                        float _4932 = isnan(0.0) ? _3561 : (isnan(_3561) ? 0.0 : max(_3561, 0.0));
                        float _3562 = isnan(1.0) ? _4932 : (isnan(_4932) ? 1.0 : min(_4932, 1.0));
                        float _3563 = 1.0 - _3533;
                        float _3573 = (0.5 / (((_3562 * ((_3548 * _3563) + _3533)) + 9.9999999392252902907785028219223e-09) + (((_3562 * _3563) + _3533) * _3548))) * _3562;
                        float _4943 = isnan(0.0) ? _3573 : (isnan(_3573) ? 0.0 : max(_3573, 0.0));
                        float _3584 = (((_3534 * 3.1415927410125732421875) * (isnan(1.0) ? _4943 : (isnan(_4943) ? 1.0 : min(_4943, 1.0)))) / ((_3556 * _3556) * ((_3500 * 2.1991131305694580078125) + 3.141590118408203125))) * _3489;
                        _3342 = (_3504 * _3452.x) + _3410;
                        _3343 = (_3504 * _3452.y) + _3411;
                        _3344 = (_3504 * _3452.z) + _3412;
                        _3339 = (_3584 * _3469.x) + _3407;
                        _3340 = (_3584 * _3469.y) + _3408;
                        _3341 = (_3584 * _3469.z) + _3409;
                        if (_3414 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3407 = _3339;
                            _3408 = _3340;
                            _3409 = _3341;
                            _3410 = _3342;
                            _3411 = _3343;
                            _3412 = _3344;
                            _3413 = _3414;
                        }
                    }
                    frontier_phi_66_pred = _3344;
                    frontier_phi_66_pred_1 = _3343;
                    frontier_phi_66_pred_2 = _3342;
                    frontier_phi_66_pred_3 = _3341;
                    frontier_phi_66_pred_4 = _3340;
                    frontier_phi_66_pred_5 = _3339;
                }
                _3149 = frontier_phi_66_pred;
                _3147 = frontier_phi_66_pred_1;
                _3145 = frontier_phi_66_pred_2;
                _3143 = frontier_phi_66_pred_3;
                _3141 = frontier_phi_66_pred_4;
                _3139 = frontier_phi_66_pred_5;
                uint _3290 = _3289 + 1u;
                if (_3290 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3283 = _3139;
                    _3284 = _3141;
                    _3285 = _3143;
                    _3286 = _3145;
                    _3287 = _3147;
                    _3288 = _3149;
                    _3289 = _3290;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3138 = _3139;
            _3140 = _3141;
            _3142 = _3143;
            _3144 = _3145;
            _3146 = _3147;
            _3148 = _3149;
        }
        uvec4 _3152 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3153 = _3152.z;
        uint _3155 = (_3153 >> 8u) & 15u;
        float _3251;
        float _3253;
        float _3255;
        float _3257;
        float _3259;
        float _3261;
        if (((4294967295u << _3155) & _3058) == 0u)
        {
            _3251 = _3138;
            _3253 = _3140;
            _3255 = _3142;
            _3257 = _3144;
            _3259 = _3146;
            _3261 = _3148;
        }
        else
        {
            float _3276 = inversesqrt(dot(vec3(_2136, _2137, _2138), vec3(_2136, _2137, _2138)));
            float _3277 = _3276 * _2136;
            float _3278 = _3276 * _2137;
            float _3279 = _3276 * _2138;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_3155 < ((_3153 >> 12u) & 15u))
            {
                float _3252;
                float _3254;
                float _3256;
                float _3258;
                float _3260;
                float _3262;
                float _3390 = _3138;
                float _3391 = _3140;
                float _3392 = _3142;
                float _3393 = _3144;
                float _3394 = _3146;
                float _3395 = _3148;
                uint _3396 = _3155;
                uint _3405;
                bool _3406;
                for (;;)
                {
                    _3405 = texelFetch(g_lightClassification, int((((_3052 << 5u) + (_3038 << 9u)) + (_3396 << 2u)) >> 2u)).x;
                    _3406 = _3405 == 0u;
                    float frontier_phi_72_pred;
                    float frontier_phi_72_pred_1;
                    float frontier_phi_72_pred_2;
                    float frontier_phi_72_pred_3;
                    float frontier_phi_72_pred_4;
                    float frontier_phi_72_pred_5;
                    if (_3406)
                    {
                        frontier_phi_72_pred = _3395;
                        frontier_phi_72_pred_1 = _3394;
                        frontier_phi_72_pred_2 = _3393;
                        frontier_phi_72_pred_3 = _3392;
                        frontier_phi_72_pred_4 = _3391;
                        frontier_phi_72_pred_5 = _3390;
                    }
                    else
                    {
                        float _3589;
                        float _3590;
                        float _3591;
                        float _3592;
                        float _3593;
                        float _3594;
                        float _3882;
                        float _3883;
                        float _3884;
                        float _3885;
                        float _3886;
                        float _3887;
                        float _3602 = _3390;
                        float _3603 = _3391;
                        float _3604 = _3392;
                        float _3605 = _3393;
                        float _3606 = _3394;
                        float _3607 = _3395;
                        uint _3608 = _3405;
                        uint _3609;
                        vec4 _3634;
                        float _3635;
                        vec4 _3650;
                        vec3 _3662;
                        vec4 _3677;
                        vec4 _3692;
                        float _3738;
                        bool _3739;
                        for (;;)
                        {
                            uint _3619 = ((_3396 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3608));
                            _3609 = (_3608 + 4294967295u) & _3608;
                            uint _3621 = _3619 * 40u;
                            _3634 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3621)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3621 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3621 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3621 + 3u)).x));
                            _3635 = _3634.w;
                            uint _3637 = (_3619 * 40u) + 4u;
                            _3650 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3637)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3637 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3637 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3637 + 3u)).x));
                            uint _3652 = (_3619 * 40u) + 8u;
                            _3662 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3652)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3652 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3652 + 2u)).x));
                            uint _3664 = (_3619 * 40u) + 16u;
                            _3677 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3664)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3664 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3664 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3664 + 3u)).x));
                            uint _3679 = (_3619 * 40u) + 20u;
                            _3692 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3679)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3679 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3679 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3679 + 3u)).x));
                            uint _3694 = (_3619 * 40u) + 24u;
                            vec4 _3707 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3694)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3694 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3694 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3694 + 3u)).x));
                            uint _3713 = (_3619 * 40u) + 28u;
                            vec4 _3726 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3713)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3713 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3713 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3713 + 3u)).x));
                            _3738 = fma(_2138, _3726.z, fma(_2137, _3726.y, _3726.x * _2136)) + _3726.w;
                            _3739 = !((fma(_2138, _3707.z, fma(_2137, _3707.y, _3707.x * _2136)) + _3707.w) <= 0.0);
                            float frontier_phi_78_pred;
                            float frontier_phi_78_pred_1;
                            float frontier_phi_78_pred_2;
                            float frontier_phi_78_pred_3;
                            float frontier_phi_78_pred_4;
                            float frontier_phi_78_pred_5;
                            if (_3739)
                            {
                                float _3766 = _3634.x - _2136;
                                float _3767 = _3634.y - _2137;
                                float _3768 = _3634.z - _2138;
                                float _3769 = dot(vec3(_3766, _3767, _3768), vec3(_3766, _3767, _3768));
                                float _3772 = inversesqrt(_3769);
                                float _3773 = _3772 * _3766;
                                float _3774 = _3772 * _3767;
                                float _3775 = _3772 * _3768;
                                float _3779 = 1.0 - (_3769 / (_3635 * _3635));
                                float _4954 = isnan(0.0) ? _3779 : (isnan(_3779) ? 0.0 : max(_3779, 0.0));
                                float _3780 = isnan(1.0) ? _4954 : (isnan(_4954) ? 1.0 : min(_4954, 1.0));
                                float _3784 = sqrt(_3769) * _3650.w;
                                float _3786 = 1.39999997615814208984375 / (_3784 + 1.39999997615814208984375);
                                float _3787 = _3786 * _3786;
                                float _3790 = ((1.0 - _3787) * dot(vec3(_3773, _3774, _3775), vec3(_1025, _1028, _1031))) + _3787;
                                float _3793 = _3784 * _3784;
                                float _3797 = (fma(_2138, _3677.z, fma(_2137, _3677.y, _3677.x * _2136)) + _3677.w) / _3738;
                                float _3798 = (fma(_2138, _3692.z, fma(_2137, _3692.y, _3692.x * _2136)) + _3692.w) / _3738;
                                float _3802 = 1.0 - dot(vec2(_3797, _3798), vec2(_3797, _3798));
                                float _4970 = isnan(0.0) ? _3802 : (isnan(_3802) ? 0.0 : max(_3802, 0.0));
                                float _3803 = isnan(1.0) ? _4970 : (isnan(_4970) ? 1.0 : min(_4970, 1.0));
                                float _3804 = _3803 * (((isnan(0.0) ? _3790 : (isnan(_3790) ? 0.0 : max(_3790, 0.0))) * _3780) / ((_3793 * 0.699999988079071044921875) + 1.0));
                                float _3816 = exp2(log2(1.0 / ((_3793 * 3.5) + 5.0)) * 0.25);
                                float _3817 = 1.0 - _1085;
                                float _3824 = sqrt(1.0 - ((1.0 - (_3817 * _3817)) * (1.0 - (_3816 * _3816))));
                                float _3825 = _3824 * _3824;
                                float _3826 = _3825 * _3825;
                                float _3827 = _3773 - _3277;
                                float _3828 = _3774 - _3278;
                                float _3829 = _3775 - _3279;
                                float _3833 = inversesqrt(dot(vec3(_3827, _3828, _3829), vec3(_3827, _3828, _3829)));
                                float _3837 = dot(vec3(_1025, _1028, _1031), vec3((-0.0) - _3277, (-0.0) - _3278, (-0.0) - _3279));
                                float _4981 = isnan(0.0) ? _3837 : (isnan(_3837) ? 0.0 : max(_3837, 0.0));
                                float _3840 = isnan(1.0) ? _4981 : (isnan(_4981) ? 1.0 : min(_4981, 1.0));
                                float _3841 = dot(vec3(_1025, _1028, _1031), vec3(_3833 * _3827, _3833 * _3828, _3833 * _3829));
                                float _4992 = isnan(0.0) ? _3841 : (isnan(_3841) ? 0.0 : max(_3841, 0.0));
                                float _3844 = isnan(1.0) ? _4992 : (isnan(_4992) ? 1.0 : min(_4992, 1.0));
                                float _3848 = ((_3844 * _3844) * (_3826 + (-1.0))) + 1.0;
                                float _3849 = _3786 * _3825;
                                float _3850 = _3849 * _3849;
                                float _3856 = ((1.0 - _3850) * dot(vec3(_1025, _1028, _1031), vec3(_3773, _3774, _3775))) + _3850;
                                float _5003 = isnan(0.0) ? _3856 : (isnan(_3856) ? 0.0 : max(_3856, 0.0));
                                float _3857 = isnan(1.0) ? _5003 : (isnan(_5003) ? 1.0 : min(_5003, 1.0));
                                float _3858 = 1.0 - _3825;
                                float _3868 = (0.5 / (((_3857 * ((_3840 * _3858) + _3825)) + 9.9999999392252902907785028219223e-09) + (((_3857 * _3858) + _3825) * _3840))) * _3857;
                                float _5014 = isnan(0.0) ? _3868 : (isnan(_3868) ? 0.0 : max(_3868, 0.0));
                                float _3878 = (_3803 * _3780) * (((_3826 * 3.1415927410125732421875) * (isnan(1.0) ? _5014 : (isnan(_5014) ? 1.0 : min(_5014, 1.0)))) / ((_3848 * _3848) * ((_3793 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_78_pred = _3804 * _3650.y;
                                frontier_phi_78_pred_1 = _3804 * _3650.x;
                                frontier_phi_78_pred_2 = _3878 * _3662.z;
                                frontier_phi_78_pred_3 = _3878 * _3662.y;
                                frontier_phi_78_pred_4 = _3878 * _3662.x;
                                frontier_phi_78_pred_5 = _3804 * _3650.z;
                            }
                            else
                            {
                                frontier_phi_78_pred = 0.0;
                                frontier_phi_78_pred_1 = 0.0;
                                frontier_phi_78_pred_2 = 0.0;
                                frontier_phi_78_pred_3 = 0.0;
                                frontier_phi_78_pred_4 = 0.0;
                                frontier_phi_78_pred_5 = 0.0;
                            }
                            _3886 = frontier_phi_78_pred;
                            _3885 = frontier_phi_78_pred_1;
                            _3884 = frontier_phi_78_pred_2;
                            _3883 = frontier_phi_78_pred_3;
                            _3882 = frontier_phi_78_pred_4;
                            _3887 = frontier_phi_78_pred_5;
                            _3592 = _3885 + _3605;
                            _3593 = _3886 + _3606;
                            _3594 = _3887 + _3607;
                            _3589 = _3882 + _3602;
                            _3590 = _3883 + _3603;
                            _3591 = _3884 + _3604;
                            if (_3609 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3602 = _3589;
                                _3603 = _3590;
                                _3604 = _3591;
                                _3605 = _3592;
                                _3606 = _3593;
                                _3607 = _3594;
                                _3608 = _3609;
                                continue;
                            }
                        }
                        frontier_phi_72_pred = _3594;
                        frontier_phi_72_pred_1 = _3593;
                        frontier_phi_72_pred_2 = _3592;
                        frontier_phi_72_pred_3 = _3591;
                        frontier_phi_72_pred_4 = _3590;
                        frontier_phi_72_pred_5 = _3589;
                    }
                    _3262 = frontier_phi_72_pred;
                    _3260 = frontier_phi_72_pred_1;
                    _3258 = frontier_phi_72_pred_2;
                    _3256 = frontier_phi_72_pred_3;
                    _3254 = frontier_phi_72_pred_4;
                    _3252 = frontier_phi_72_pred_5;
                    uint _3397 = _3396 + 1u;
                    if (_3397 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3390 = _3252;
                        _3391 = _3254;
                        _3392 = _3256;
                        _3393 = _3258;
                        _3394 = _3260;
                        _3395 = _3262;
                        _3396 = _3397;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _3262;
                frontier_phi_60_61_ladder_1 = _3260;
                frontier_phi_60_61_ladder_2 = _3256;
                frontier_phi_60_61_ladder_3 = _3254;
                frontier_phi_60_61_ladder_4 = _3252;
                frontier_phi_60_61_ladder_5 = _3258;
            }
            else
            {
                frontier_phi_60_61_ladder = _3148;
                frontier_phi_60_61_ladder_1 = _3146;
                frontier_phi_60_61_ladder_2 = _3142;
                frontier_phi_60_61_ladder_3 = _3140;
                frontier_phi_60_61_ladder_4 = _3138;
                frontier_phi_60_61_ladder_5 = _3144;
            }
            _3251 = frontier_phi_60_61_ladder_4;
            _3253 = frontier_phi_60_61_ladder_3;
            _3255 = frontier_phi_60_61_ladder_2;
            _3257 = frontier_phi_60_61_ladder_5;
            _3259 = frontier_phi_60_61_ladder_1;
            _3261 = frontier_phi_60_61_ladder;
        }
        float _3266 = isnan(1.0) ? _1069 : (isnan(_1069) ? 1.0 : min(_1069, 1.0));
        _3071 = (_3266 * _3257) + _2602;
        _3073 = (_3266 * _3259) + _2604;
        _3075 = (_3266 * _3261) + _2606;
        _3077 = ((_3251 * 0.039999999105930328369140625) * _3266) + _2925;
        _3079 = ((_3253 * 0.039999999105930328369140625) * _3266) + _2927;
        _3081 = ((_3255 * 0.039999999105930328369140625) * _3266) + _2929;
    }
    else
    {
        _3071 = _2602;
        _3073 = _2604;
        _3075 = _2606;
        _3077 = _2925;
        _3079 = _2927;
        _3081 = _2929;
    }
    float _5030 = isnan(0.0) ? _1054 : (isnan(_1054) ? 0.0 : max(_1054, 0.0));
    float _5041 = isnan(0.0) ? _1055 : (isnan(_1055) ? 0.0 : max(_1055, 0.0));
    float _5052 = isnan(0.0) ? _1056 : (isnan(_1056) ? 0.0 : max(_1056, 0.0));
    uint _3101 = _280 + 6u;
    float _3109 = _1006 / cbSceneParam._m0[86u].x;
    float _3110 = _1007 / cbSceneParam._m0[86u].y;
    vec4 _3124 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3109, _3110, (log2((isnan(cbSceneParam._m0[77u].w) ? _939 : (isnan(_939) ? cbSceneParam._m0[77u].w : min(_939, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3126 = _3124.x;
    float _3127 = _3124.y;
    float _3128 = _3124.z;
    float _3129 = _3124.w;
    float _3201;
    float _3203;
    float _3205;
    float _3207;
    if (_939 > cbSceneParam._m0[78u].w)
    {
        float _3163 = isnan(_939) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _939 : min(cbSceneParam._m0[80u].w, _939));
        float _3164 = _3163 / _939;
        float _3175 = _3164 * _991;
        float _3176 = _992 * _3164;
        float _3177 = (-0.0) - _3176;
        float _3179 = _3164 * _993;
        float _3181 = (cbSceneParam._m0[77u].w * _3177) / _3163;
        float _3182 = _3181 + cbSceneParam._m0[79u].w;
        float _3183 = cbSceneParam._m0[79u].w - _3176;
        float _3189 = sqrt(((_3175 * _3175) + (_3176 * _3176)) + (_3179 * _3179));
        float _3192 = (1.0 - (cbSceneParam._m0[77u].w / _3163)) * _3189;
        float _3197 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3199 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3352;
        if (abs((_3177 - _3181) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3352 = ((((_3182 > 0.0) ? exp2(_3197 * _3182) : (2.0 - exp2(_3199 * _3182))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3192;
        }
        else
        {
            float _3312 = 1.0 / cbSceneParam._m0[80u].x;
            float _3313 = isnan(_3183) ? _3182 : (isnan(_3182) ? _3183 : max(_3182, _3183));
            float _3314 = isnan(_3183) ? _3182 : (isnan(_3182) ? _3183 : min(_3182, _3183));
            float _3323 = isnan(0.0) ? _3313 : (isnan(_3313) ? 0.0 : min(_3313, 0.0));
            float _3324 = isnan(0.0) ? _3314 : (isnan(_3314) ? 0.0 : min(_3314, 0.0));
            _3352 = ((abs(_3189 / _3177) * cbSceneParam._m0[80u].y) * ((((_3323 - _3324) * 2.0) - ((exp2(_3197 * (isnan(0.0) ? _3313 : (isnan(_3313) ? 0.0 : max(_3313, 0.0)))) - exp2(_3197 * (isnan(0.0) ? _3314 : (isnan(_3314) ? 0.0 : max(_3314, 0.0))))) * _3312)) - ((exp2(_3199 * _3323) - exp2(_3199 * _3324)) * _3312))) + (_3192 * cbSceneParam._m0[80u].z);
        }
        vec4 _3354 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3109, _3110, 1.0), 0.0);
        float _3363 = exp2((_3352 * (-1.44269502162933349609375)) * (1.0 - _3354.w));
        float _3364 = log2(_3363);
        float _3380 = log2(_3129);
        _3201 = (exp2(_3380 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3364 * cbSceneParam._m0[78u].x)) * _3354.x) / cbSceneParam._m0[78u].x)) + _3126;
        _3203 = (exp2(_3380 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3364 * cbSceneParam._m0[78u].y)) * _3354.y) / cbSceneParam._m0[78u].y)) + _3127;
        _3205 = (exp2(_3380 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3364 * cbSceneParam._m0[78u].z)) * _3354.z) / cbSceneParam._m0[78u].z)) + _3128;
        _3207 = _3363 * _3129;
    }
    else
    {
        _3201 = _3126;
        _3203 = _3127;
        _3205 = _3128;
        _3207 = _3129;
    }
    float _3219 = roundEven(cbMatDynParam._m0[0u].y);
    bool _3220 = _3219 == 3.0;
    float _3221 = log2(_3207);
    float _3228 = exp2(_3221 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _5030 : (isnan(_5030) ? 1.0 : min(_5030, 1.0))) * (_3071 + ((isnan(0.0) ? _1793 : (isnan(_1793) ? 0.0 : max(_1793, 0.0))) * _1069))) + ((_3077 + ((isnan(0.0) ? _2083 : (isnan(_2083) ? 0.0 : max(_2083, 0.0))) * _1872)) * cbPerFrame._m0[3u].x));
    float _3229 = exp2(_3221 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _5041 : (isnan(_5041) ? 1.0 : min(_5041, 1.0))) * (_3073 + ((isnan(0.0) ? _1796 : (isnan(_1796) ? 0.0 : max(_1796, 0.0))) * _1069))) + ((_3079 + ((isnan(0.0) ? _2086 : (isnan(_2086) ? 0.0 : max(_2086, 0.0))) * _1872)) * cbPerFrame._m0[3u].x));
    float _3230 = exp2(_3221 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _5052 : (isnan(_5052) ? 1.0 : min(_5052, 1.0))) * (_3075 + ((isnan(0.0) ? _1799 : (isnan(_1799) ? 0.0 : max(_1799, 0.0))) * _1069))) + ((_3081 + ((isnan(0.0) ? _2089 : (isnan(_2089) ? 0.0 : max(_2089, 0.0))) * _1872)) * cbPerFrame._m0[3u].x));
    float _3239 = (_3219 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _3239 * (_3220 ? _3228 : (_3228 + (cbSceneParam._m0[72u].w * _3201)));
    SV_Target.y = _3239 * (_3220 ? _3229 : (_3229 + (cbSceneParam._m0[72u].w * _3203)));
    SV_Target.z = _3239 * (_3220 ? _3230 : (_3230 + (cbSceneParam._m0[72u].w * _3205)));
    SV_Target.w = cbInstanceData._m0[_3101].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_3101].w;
}


