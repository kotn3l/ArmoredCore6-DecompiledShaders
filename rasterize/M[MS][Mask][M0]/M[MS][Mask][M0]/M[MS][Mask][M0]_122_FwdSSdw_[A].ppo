#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_0;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_10;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_6;
layout(set = 0, binding = 23) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_8;
layout(set = 0, binding = 24) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_9;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1414;
float _3795;
float _3796;
float _3797;
float _3798;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _220 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _221 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _222 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _228 = inversesqrt(dot(vec3(_220, _221, _222), vec3(_220, _221, _222)));
    float _229 = _228 * _220;
    float _230 = _228 * _221;
    float _231 = _228 * _222;
    float _235 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _236 = _235 * NORMAL.x;
    float _237 = _235 * NORMAL.y;
    float _238 = _235 * NORMAL.z;
    float _242 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _243 = _242 * TANGENT.x;
    float _244 = _242 * TANGENT.y;
    float _245 = _242 * TANGENT.z;
    uint _248 = uint(roundEven(NORMAL.w)) * 13u;
    uint _254 = _248 + 1u;
    uint _258 = _248 + 2u;
    float _267 = sqrt(((cbInstanceData._m0[_254].x * cbInstanceData._m0[_254].x) + (cbInstanceData._m0[_248].x * cbInstanceData._m0[_248].x)) + (cbInstanceData._m0[_258].x * cbInstanceData._m0[_258].x));
    float _268 = _267 * TEXCOORD.z;
    float _269 = _267 * TEXCOORD.w;
    vec4 _288 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _312 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _317 = _312.x * cbMtdParam._m0[11u].x;
    float _318 = _312.y * cbMtdParam._m0[11u].y;
    float _319 = _312.z * cbMtdParam._m0[11u].z;
    vec4 _338 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _268) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _269) + cbTextureTilingScale._m0[5u].w));
    vec4 _358 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _398 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _400 = _398.x;
    float _412 = dot(vec4(_400, _398.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _429 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _358.x) * 2.0) - ((((_400 - _412) * cbMtdParam._m0[24u].z) + _412) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3807 = isnan(0.0) ? _429 : (isnan(_429) ? 0.0 : max(_429, 0.0));
    float _430 = isnan(1.0) ? _3807 : (isnan(_3807) ? 1.0 : min(_3807, 1.0));
    float _437 = (_430 * ((_338.x * cbMtdParam._m0[12u].x) - _317)) + _317;
    float _438 = (_430 * ((_338.y * cbMtdParam._m0[12u].y) - _318)) + _318;
    float _439 = (_430 * ((_338.z * cbMtdParam._m0[12u].z) - _319)) + _319;
    vec4 _456 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _268) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _269) + cbTextureTilingScale._m0[3u].w));
    vec4 _476 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _478 = _476.x;
    float _488 = dot(vec4(_478, _476.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _502 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _358.y) * 2.0) - ((((_478 - _488) * cbMtdParam._m0[24u].z) + _488) * cbMtdParam._m0[20u].w))) + 1.0;
    float _3818 = isnan(0.0) ? _502 : (isnan(_502) ? 0.0 : max(_502, 0.0));
    float _503 = isnan(1.0) ? _3818 : (isnan(_3818) ? 1.0 : min(_3818, 1.0));
    float _510 = (_503 * ((_456.x * cbMtdParam._m0[13u].x) - _437)) + _437;
    float _511 = (_503 * ((_456.y * cbMtdParam._m0[13u].y) - _438)) + _438;
    float _512 = (_503 * ((_456.z * cbMtdParam._m0[13u].z) - _439)) + _439;
    vec4 _530 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_9, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[24u].x * _268) + cbTextureTilingScale._m0[24u].z, (cbTextureTilingScale._m0[24u].y * _269) + cbTextureTilingScale._m0[24u].w));
    vec4 _547 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[25u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _549 = _547.x;
    float _559 = dot(vec4(_549, _547.yzw), vec4(cbMtdParam._m0[30u].w, cbMtdParam._m0[31u].xy, 0.0));
    float _571 = ((cbMtdParam._m0[25u].x * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.z) - _358.z) * 2.0) - ((((_549 - _559) * cbMtdParam._m0[24u].z) + _559) * cbMtdParam._m0[20u].z))) + 1.0;
    float _3829 = isnan(0.0) ? _571 : (isnan(_571) ? 0.0 : max(_571, 0.0));
    float _572 = isnan(1.0) ? _3829 : (isnan(_3829) ? 1.0 : min(_3829, 1.0));
    float _585 = ((cbMtdParam._m0[9u].x * 4.55000019073486328125) * _288.x) * ((_572 * ((_530.x * cbMtdParam._m0[14u].x) - _510)) + _510);
    float _588 = ((cbMtdParam._m0[9u].y * 4.55000019073486328125) * _288.y) * ((_572 * ((_530.y * cbMtdParam._m0[14u].y) - _511)) + _511);
    float _591 = ((cbMtdParam._m0[9u].z * 4.55000019073486328125) * _288.z) * ((_572 * ((_530.z * cbMtdParam._m0[14u].z) - _512)) + _512);
    vec4 _609 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _268) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _269) + cbTextureTilingScale._m0[4u].w));
    vec4 _626 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _628 = _626.x;
    float _629 = _626.y;
    float _630 = _626.z;
    float _637 = ((_609.x - _628) * _430) + _628;
    float _638 = ((_609.y - _629) * _430) + _629;
    float _639 = ((_609.z - _630) * _430) + _630;
    vec4 _651 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _268) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _269) + cbTextureTilingScale._m0[2u].w));
    float _662 = ((_651.x - _637) * _503) + _637;
    float _663 = ((_651.y - _638) * _503) + _638;
    float _664 = ((_651.z - _639) * _503) + _639;
    vec4 _676 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[23u].x * _268) + cbTextureTilingScale._m0[23u].z, (cbTextureTilingScale._m0[23u].y * _269) + cbTextureTilingScale._m0[23u].w));
    float _689 = ((_676.z - _664) * _572) + _664;
    float _692 = ((((_676.x - _662) * _572) + _662) * 2.0) + (-1.0);
    float _694 = ((((_676.y - _663) * _572) + _663) * 2.0) + (-1.0);
    float _695 = dot(vec2(_692, _694), vec2(_692, _694));
    float _3840 = isnan(0.0) ? _695 : (isnan(_695) ? 0.0 : max(_695, 0.0));
    float _700 = sqrt(1.0 - (isnan(1.0) ? _3840 : (isnan(_3840) ? 1.0 : min(_3840, 1.0))));
    vec4 _714 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _726 = (((_714.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _692;
    float _727 = (((_714.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _694;
    float _730 = fma(_700, _236, fma(_727, _243, _726 * _229));
    float _733 = fma(_700, _237, fma(_727, _244, _726 * _230));
    float _736 = fma(_700, _238, fma(_727, _245, _726 * _231));
    float _740 = inversesqrt(dot(vec3(_730, _733, _736), vec3(_730, _733, _736)));
    vec4 _767 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _268) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _269) + cbTextureTilingScale._m0[11u].w));
    float _769 = _767.x;
    float _770 = 1.0 - _769;
    float _776 = (cbMtdParam._m0[19u].x + dot(vec4(_740 * _730, _740 * _733, _740 * _736, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_769 - _770) * cbMtdParam._m0[24u].w) + _770) * cbMtdParam._m0[21u].z);
    float _3851 = isnan(0.0) ? _776 : (isnan(_776) ? 0.0 : max(_776, 0.0));
    float _777 = isnan(1.0) ? _3851 : (isnan(_3851) ? 1.0 : min(_3851, 1.0));
    float _784 = (_777 * (cbMtdParam._m0[17u].x - _585)) + _585;
    float _785 = (_777 * (cbMtdParam._m0[17u].y - _588)) + _588;
    float _786 = (_777 * (cbMtdParam._m0[17u].z - _591)) + _591;
    float _790 = (cbMtdParam._m0[19u].w * (_714.z - _689)) + _689;
    vec4 _803 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _268) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _269) + cbTextureTilingScale._m0[15u].w));
    float _810 = (_803.x * 2.0) + (-1.0);
    float _811 = (_803.y * 2.0) + (-1.0);
    float _812 = dot(vec2(_810, _811), vec2(_810, _811));
    float _3862 = isnan(0.0) ? _812 : (isnan(_812) ? 0.0 : max(_812, 0.0));
    float _820 = ((_803.z - _790) * _777) + _790;
    float _830 = ((sqrt(1.0 - (isnan(1.0) ? _3862 : (isnan(_3862) ? 1.0 : min(_3862, 1.0)))) - _700) * _777) + _700;
    float _833 = (((_810 - _726) * _777) + _726) + (cbMtdParam._m0[21u].x * _726);
    float _834 = (((_811 - _727) * _777) + _727) + (cbMtdParam._m0[21u].x * _727);
    float _838 = cbMtdParam._m0[22u].x + _714.w;
    float _841 = fma(_830, _236, fma(_834, _243, _833 * _229));
    float _844 = fma(_830, _237, fma(_834, _244, _833 * _230));
    float _847 = fma(_830, _238, fma(_834, _245, _833 * _231));
    float _851 = inversesqrt(dot(vec3(_841, _844, _847), vec3(_841, _844, _847)));
    float _852 = _851 * _841;
    float _853 = _851 * _844;
    float _854 = _851 * _847;
    float _3873 = isnan(0.0) ? _820 : (isnan(_820) ? 0.0 : max(_820, 0.0));
    float _855 = isnan(1.0) ? _3873 : (isnan(_3873) ? 1.0 : min(_3873, 1.0));
    float _3884 = isnan(0.0) ? _838 : (isnan(_838) ? 0.0 : max(_838, 0.0));
    float _3895 = isnan(0.0) ? _784 : (isnan(_784) ? 0.0 : max(_784, 0.0));
    float _3906 = isnan(0.0) ? _785 : (isnan(_785) ? 0.0 : max(_785, 0.0));
    float _3917 = isnan(0.0) ? _786 : (isnan(_786) ? 0.0 : max(_786, 0.0));
    float _873 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _914 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _924 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _914);
    float _925 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _914);
    float _926 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _914);
    float _930 = inversesqrt(dot(vec3(_924, _925, _926), vec3(_924, _925, _926)));
    float _931 = _924 * _930;
    float _932 = _925 * _930;
    float _933 = _926 * _930;
    vec4 _938 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _940 = _938.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1094 = sqrt(((_924 * _924) + (_925 * _925)) + (_926 * _926));
        float _1100 = (cbMatDynParam._m0[5u].x * _1094) + cbMatDynParam._m0[5u].y;
        float _3928 = isnan(0.0) ? _1100 : (isnan(_1100) ? 0.0 : max(_1100, 0.0));
        float _1101 = isnan(1.0) ? _3928 : (isnan(_3928) ? 1.0 : min(_3928, 1.0));
        float _1105 = (cbMatDynParam._m0[5u].z * _1094) + cbMatDynParam._m0[5u].w;
        float _3939 = isnan(0.0) ? _1105 : (isnan(_1105) ? 0.0 : max(_1105, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3939 : (isnan(_3939) ? 1.0 : min(_3939, 1.0))) - _1101)) + _1101) < ((_940 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _951 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _952 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _970 = fma(_854, cbSceneParam._m0[5u].z, fma(_853, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _852));
    float _973 = fma(_854, cbSceneParam._m0[6u].z, fma(_853, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _852));
    float _976 = fma(_854, cbSceneParam._m0[7u].z, fma(_853, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _852));
    uint _989 = _248 + 9u;
    uint _990 = _989 + uint(cbMatDynParam._m0[0u].w);
    float _996 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3895 : (isnan(_3895) ? 1.0 : min(_3895, 1.0)))) * cbInstanceData._m0[_990].x;
    float _997 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3906 : (isnan(_3906) ? 1.0 : min(_3906, 1.0)))) * cbInstanceData._m0[_990].y;
    float _998 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3917 : (isnan(_3917) ? 1.0 : min(_3917, 1.0)))) * cbInstanceData._m0[_990].z;
    float _3950 = isnan(0.0) ? _996 : (isnan(_996) ? 0.0 : max(_996, 0.0));
    float _999 = isnan(1.0) ? _3950 : (isnan(_3950) ? 1.0 : min(_3950, 1.0));
    float _3961 = isnan(0.0) ? _997 : (isnan(_997) ? 0.0 : max(_997, 0.0));
    float _1000 = isnan(1.0) ? _3961 : (isnan(_3961) ? 1.0 : min(_3961, 1.0));
    float _3972 = isnan(0.0) ? _998 : (isnan(_998) ? 0.0 : max(_998, 0.0));
    float _1001 = isnan(1.0) ? _3972 : (isnan(_3972) ? 1.0 : min(_3972, 1.0));
    vec4 _1010 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _951, cbSceneParam._m0[86u].y * _952));
    float _1014 = ((isnan(1.0) ? _3884 : (isnan(_3884) ? 1.0 : min(_3884, 1.0))) * TEXCOORD_5.w) * _1010.x;
    float _1015 = dot(vec3(_852, _853, _854), vec3(_931, _932, _933));
    float _1018 = _1015 * 2.0;
    float _1022 = (_1018 * _852) - _931;
    float _1023 = (_1018 * _853) - _932;
    float _1024 = (_1018 * _854) - _933;
    float _1028 = abs(dot(vec3(_931, _932, _933), vec3(_852, _853, _854)));
    float _3983 = isnan(0.0) ? _1028 : (isnan(_1028) ? 0.0 : max(_1028, 0.0));
    float _1030 = sqrt(_855);
    float _1043 = exp2((_1030 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3983 : (isnan(_3983) ? 1.0 : min(_3983, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1030 * 3.0));
    float _1075 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1079 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1083 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1413;
    float _1415;
    float _1416;
    float _1417;
    float _1418;
    float _1419;
    float _1420;
    float _1421;
    float _1422;
    float _1423;
    float _1424;
    float _1425;
    float _1426;
    float _1427;
    float _1428;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1138 = fma(_1083, cbModelParam._m0[26u].z, fma(_1079, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1075));
        float _1142 = fma(_1083, cbModelParam._m0[27u].z, fma(_1079, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1075));
        float _1146 = fma(_1083, cbModelParam._m0[28u].z, fma(_1079, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1075));
        float _1171 = _1075 + _852;
        float _1172 = _1079 + _853;
        float _1173 = _1083 + _854;
        float _1183 = fma(_1173, cbModelParam._m0[26u].z, fma(_1172, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1171)) - _1138;
        float _1184 = fma(_1173, cbModelParam._m0[27u].z, fma(_1172, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1171)) - _1142;
        float _1185 = fma(_1173, cbModelParam._m0[28u].z, fma(_1172, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1171)) - _1146;
        float _1189 = inversesqrt(dot(vec3(_1183, _1184, _1185), vec3(_1183, _1184, _1185)));
        float _1202 = ((_1189 * _1183) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1138 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1203 = ((_1189 * _1184) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1142 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1204 = ((_1189 * _1185) / cbModelParam._m0[34u].z) + ((((((_1146 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1207 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1202, _1203, _1204), 0.0);
        vec4 _1214 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1202, _1203, _1204), 0.0);
        vec4 _1221 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1202, _1203, _1204), 0.0);
        vec4 _1228 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1202, _1203, _1204), 0.0);
        float _1241 = exp2((_1207.w + (-0.5)) * 20.0) * 2.0;
        float _1242 = _1241 * (_1207.x + (-0.5));
        float _1243 = _1241 * (_1207.y + (-0.5));
        float _1244 = _1241 * (_1207.z + (-0.5));
        float _1251 = exp2((_1214.w + (-0.5)) * 20.0) * 2.0;
        float _1252 = _1251 * (_1214.x + (-0.5));
        float _1253 = _1251 * (_1214.y + (-0.5));
        float _1254 = _1251 * (_1214.z + (-0.5));
        float _1261 = exp2((_1221.w + (-0.5)) * 20.0) * 2.0;
        float _1262 = _1261 * (_1221.x + (-0.5));
        float _1263 = _1261 * (_1221.y + (-0.5));
        float _1264 = _1261 * (_1221.z + (-0.5));
        float _1271 = exp2((_1228.w + (-0.5)) * 20.0) * 2.0;
        float _1272 = _1271 * (_1228.x + (-0.5));
        float _1273 = _1271 * (_1228.y + (-0.5));
        float _1274 = _1271 * (_1228.z + (-0.5));
        float _1275 = isnan(0.0) ? _1272 : (isnan(_1272) ? 0.0 : max(_1272, 0.0));
        float _1276 = isnan(0.0) ? _1273 : (isnan(_1273) ? 0.0 : max(_1273, 0.0));
        float _1277 = isnan(0.0) ? _1274 : (isnan(_1274) ? 0.0 : max(_1274, 0.0));
        float _1278 = _1242 * 0.5;
        float _1279 = _1252 * 0.5;
        float _1280 = _1262 * 0.5;
        float _1281 = dot(vec3(_1278, _1279, _1280), vec3(_1278, _1279, _1280));
        float _1286 = (_1281 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1281);
        float _1295 = (dot(vec3(_852, _853, _854), vec3(_1286 * _1278, _1286 * _1279, _1286 * _1280)) + 1.0) * 0.5;
        float _4009 = isnan(0.0) ? _1295 : (isnan(_1295) ? 0.0 : max(_1295, 0.0));
        float _1305 = sqrt(((_1279 * _1279) + (_1278 * _1278)) + (_1280 * _1280)) / (_1275 + 9.9999997473787516355514526367188e-06);
        float _4020 = isnan(0.0) ? _1305 : (isnan(_1305) ? 0.0 : max(_1305, 0.0));
        float _1306 = isnan(1.0) ? _4020 : (isnan(_4020) ? 1.0 : min(_4020, 1.0));
        float _1307 = _1306 * 2.0;
        float _1311 = (1.0 - _1306) / (_1306 + 1.0);
        float _4031 = isnan(0.0) ? _1311 : (isnan(_1311) ? 0.0 : max(_1311, 0.0));
        float _1312 = isnan(1.0) ? _4031 : (isnan(_4031) ? 1.0 : min(_4031, 1.0));
        float _1321 = ((((1.0 - _1312) * (_1307 + 2.0)) * exp2(log2(isnan(1.0) ? _4009 : (isnan(_4009) ? 1.0 : min(_4009, 1.0))) * (_1307 + 1.0))) + _1312) * _1275;
        float _1322 = _1243 * 0.5;
        float _1323 = _1253 * 0.5;
        float _1324 = _1263 * 0.5;
        float _1325 = dot(vec3(_1322, _1323, _1324), vec3(_1322, _1323, _1324));
        float _1330 = (_1325 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1325);
        float _1338 = (dot(vec3(_852, _853, _854), vec3(_1330 * _1322, _1330 * _1323, _1330 * _1324)) + 1.0) * 0.5;
        float _4042 = isnan(0.0) ? _1338 : (isnan(_1338) ? 0.0 : max(_1338, 0.0));
        float _1347 = sqrt(((_1323 * _1323) + (_1322 * _1322)) + (_1324 * _1324)) / (_1276 + 9.9999997473787516355514526367188e-06);
        float _4053 = isnan(0.0) ? _1347 : (isnan(_1347) ? 0.0 : max(_1347, 0.0));
        float _1348 = isnan(1.0) ? _4053 : (isnan(_4053) ? 1.0 : min(_4053, 1.0));
        float _1349 = _1348 * 2.0;
        float _1353 = (1.0 - _1348) / (_1348 + 1.0);
        float _4064 = isnan(0.0) ? _1353 : (isnan(_1353) ? 0.0 : max(_1353, 0.0));
        float _1354 = isnan(1.0) ? _4064 : (isnan(_4064) ? 1.0 : min(_4064, 1.0));
        float _1363 = ((((1.0 - _1354) * (_1349 + 2.0)) * exp2(log2(isnan(1.0) ? _4042 : (isnan(_4042) ? 1.0 : min(_4042, 1.0))) * (_1349 + 1.0))) + _1354) * _1276;
        float _1364 = _1244 * 0.5;
        float _1365 = _1254 * 0.5;
        float _1366 = _1264 * 0.5;
        float _1367 = dot(vec3(_1364, _1365, _1366), vec3(_1364, _1365, _1366));
        float _1372 = (_1367 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1367);
        float _1380 = (dot(vec3(_852, _853, _854), vec3(_1372 * _1364, _1372 * _1365, _1372 * _1366)) + 1.0) * 0.5;
        float _4075 = isnan(0.0) ? _1380 : (isnan(_1380) ? 0.0 : max(_1380, 0.0));
        float _1389 = sqrt(((_1365 * _1365) + (_1364 * _1364)) + (_1366 * _1366)) / (_1277 + 9.9999997473787516355514526367188e-06);
        float _4086 = isnan(0.0) ? _1389 : (isnan(_1389) ? 0.0 : max(_1389, 0.0));
        float _1390 = isnan(1.0) ? _4086 : (isnan(_4086) ? 1.0 : min(_4086, 1.0));
        float _1391 = _1390 * 2.0;
        float _1395 = (1.0 - _1390) / (_1390 + 1.0);
        float _4097 = isnan(0.0) ? _1395 : (isnan(_1395) ? 0.0 : max(_1395, 0.0));
        float _1396 = isnan(1.0) ? _4097 : (isnan(_4097) ? 1.0 : min(_4097, 1.0));
        float _1405 = ((((1.0 - _1396) * (_1391 + 2.0)) * exp2(log2(isnan(1.0) ? _4075 : (isnan(_4075) ? 1.0 : min(_4075, 1.0))) * (_1391 + 1.0))) + _1396) * _1277;
        _1413 = _1244;
        _1415 = _1243;
        _1416 = _1242;
        _1417 = _1254;
        _1418 = _1253;
        _1419 = _1252;
        _1420 = _1264;
        _1421 = _1263;
        _1422 = _1262;
        _1423 = _1277;
        _1424 = _1276;
        _1425 = _1275;
        _1426 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1321 : (isnan(_1321) ? 0.0 : max(_1321, 0.0)));
        _1427 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1363 : (isnan(_1363) ? 0.0 : max(_1363, 0.0)));
        _1428 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1405 : (isnan(_1405) ? 0.0 : max(_1405, 0.0)));
    }
    else
    {
        _1413 = _1414;
        _1415 = _1414;
        _1416 = _1414;
        _1417 = _1414;
        _1418 = _1414;
        _1419 = _1414;
        _1420 = _1414;
        _1421 = _1414;
        _1422 = _1414;
        _1423 = _1414;
        _1424 = _1414;
        _1425 = _1414;
        _1426 = 0.0;
        _1427 = 0.0;
        _1428 = 0.0;
    }
    float _1723;
    float _1724;
    float _1725;
    float _1726;
    float _1727;
    float _1728;
    float _1729;
    float _1730;
    float _1731;
    float _1732;
    float _1733;
    float _1734;
    float _1735;
    float _1736;
    float _1737;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1454 = fma(_1083, cbModelParam._m0[30u].z, fma(_1079, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1075));
        float _1458 = fma(_1083, cbModelParam._m0[31u].z, fma(_1079, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1075));
        float _1462 = fma(_1083, cbModelParam._m0[32u].z, fma(_1079, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1075));
        float _1485 = _1075 + _852;
        float _1486 = _1079 + _853;
        float _1487 = _1083 + _854;
        float _1497 = fma(_1487, cbModelParam._m0[30u].z, fma(_1486, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1485)) - _1454;
        float _1498 = fma(_1487, cbModelParam._m0[31u].z, fma(_1486, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1485)) - _1458;
        float _1499 = fma(_1487, cbModelParam._m0[32u].z, fma(_1486, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1485)) - _1462;
        float _1503 = inversesqrt(dot(vec3(_1497, _1498, _1499), vec3(_1497, _1498, _1499)));
        float _1516 = ((_1503 * _1497) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1454 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1517 = ((_1503 * _1498) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1458 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1518 = ((_1503 * _1499) / cbModelParam._m0[35u].z) + ((((((_1462 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1520 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1516, _1517, _1518), 0.0);
        vec4 _1527 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1516, _1517, _1518), 0.0);
        vec4 _1534 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1516, _1517, _1518), 0.0);
        vec4 _1541 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1516, _1517, _1518), 0.0);
        float _1553 = exp2((_1520.w + (-0.5)) * 20.0) * 2.0;
        float _1554 = _1553 * (_1520.x + (-0.5));
        float _1555 = _1553 * (_1520.y + (-0.5));
        float _1556 = _1553 * (_1520.z + (-0.5));
        float _1563 = exp2((_1527.w + (-0.5)) * 20.0) * 2.0;
        float _1564 = _1563 * (_1527.x + (-0.5));
        float _1565 = _1563 * (_1527.y + (-0.5));
        float _1566 = _1563 * (_1527.z + (-0.5));
        float _1573 = exp2((_1534.w + (-0.5)) * 20.0) * 2.0;
        float _1574 = _1573 * (_1534.x + (-0.5));
        float _1575 = _1573 * (_1534.y + (-0.5));
        float _1576 = _1573 * (_1534.z + (-0.5));
        float _1583 = exp2((_1541.w + (-0.5)) * 20.0) * 2.0;
        float _1584 = _1583 * (_1541.x + (-0.5));
        float _1585 = _1583 * (_1541.y + (-0.5));
        float _1586 = _1583 * (_1541.z + (-0.5));
        float _1587 = isnan(0.0) ? _1584 : (isnan(_1584) ? 0.0 : max(_1584, 0.0));
        float _1588 = isnan(0.0) ? _1585 : (isnan(_1585) ? 0.0 : max(_1585, 0.0));
        float _1589 = isnan(0.0) ? _1586 : (isnan(_1586) ? 0.0 : max(_1586, 0.0));
        float _1590 = _1554 * 0.5;
        float _1591 = _1564 * 0.5;
        float _1592 = _1574 * 0.5;
        float _1593 = dot(vec3(_1590, _1591, _1592), vec3(_1590, _1591, _1592));
        float _1598 = (_1593 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1593);
        float _1606 = (dot(vec3(_852, _853, _854), vec3(_1598 * _1590, _1598 * _1591, _1598 * _1592)) + 1.0) * 0.5;
        float _4138 = isnan(0.0) ? _1606 : (isnan(_1606) ? 0.0 : max(_1606, 0.0));
        float _1615 = sqrt(((_1591 * _1591) + (_1590 * _1590)) + (_1592 * _1592)) / (_1587 + 9.9999997473787516355514526367188e-06);
        float _4149 = isnan(0.0) ? _1615 : (isnan(_1615) ? 0.0 : max(_1615, 0.0));
        float _1616 = isnan(1.0) ? _4149 : (isnan(_4149) ? 1.0 : min(_4149, 1.0));
        float _1617 = _1616 * 2.0;
        float _1621 = (1.0 - _1616) / (_1616 + 1.0);
        float _4160 = isnan(0.0) ? _1621 : (isnan(_1621) ? 0.0 : max(_1621, 0.0));
        float _1622 = isnan(1.0) ? _4160 : (isnan(_4160) ? 1.0 : min(_4160, 1.0));
        float _1631 = ((((1.0 - _1622) * (_1617 + 2.0)) * exp2(log2(isnan(1.0) ? _4138 : (isnan(_4138) ? 1.0 : min(_4138, 1.0))) * (_1617 + 1.0))) + _1622) * _1587;
        float _1632 = _1555 * 0.5;
        float _1633 = _1565 * 0.5;
        float _1634 = _1575 * 0.5;
        float _1635 = dot(vec3(_1632, _1633, _1634), vec3(_1632, _1633, _1634));
        float _1640 = (_1635 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1635);
        float _1648 = (dot(vec3(_852, _853, _854), vec3(_1640 * _1632, _1640 * _1633, _1640 * _1634)) + 1.0) * 0.5;
        float _4171 = isnan(0.0) ? _1648 : (isnan(_1648) ? 0.0 : max(_1648, 0.0));
        float _1657 = sqrt(((_1633 * _1633) + (_1632 * _1632)) + (_1634 * _1634)) / (_1588 + 9.9999997473787516355514526367188e-06);
        float _4182 = isnan(0.0) ? _1657 : (isnan(_1657) ? 0.0 : max(_1657, 0.0));
        float _1658 = isnan(1.0) ? _4182 : (isnan(_4182) ? 1.0 : min(_4182, 1.0));
        float _1659 = _1658 * 2.0;
        float _1663 = (1.0 - _1658) / (_1658 + 1.0);
        float _4193 = isnan(0.0) ? _1663 : (isnan(_1663) ? 0.0 : max(_1663, 0.0));
        float _1664 = isnan(1.0) ? _4193 : (isnan(_4193) ? 1.0 : min(_4193, 1.0));
        float _1673 = ((((1.0 - _1664) * (_1659 + 2.0)) * exp2(log2(isnan(1.0) ? _4171 : (isnan(_4171) ? 1.0 : min(_4171, 1.0))) * (_1659 + 1.0))) + _1664) * _1588;
        float _1674 = _1556 * 0.5;
        float _1675 = _1566 * 0.5;
        float _1676 = _1576 * 0.5;
        float _1677 = dot(vec3(_1674, _1675, _1676), vec3(_1674, _1675, _1676));
        float _1682 = (_1677 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1677);
        float _1690 = (dot(vec3(_852, _853, _854), vec3(_1682 * _1674, _1682 * _1675, _1682 * _1676)) + 1.0) * 0.5;
        float _4204 = isnan(0.0) ? _1690 : (isnan(_1690) ? 0.0 : max(_1690, 0.0));
        float _1699 = sqrt(((_1675 * _1675) + (_1674 * _1674)) + (_1676 * _1676)) / (_1589 + 9.9999997473787516355514526367188e-06);
        float _4215 = isnan(0.0) ? _1699 : (isnan(_1699) ? 0.0 : max(_1699, 0.0));
        float _1700 = isnan(1.0) ? _4215 : (isnan(_4215) ? 1.0 : min(_4215, 1.0));
        float _1701 = _1700 * 2.0;
        float _1705 = (1.0 - _1700) / (_1700 + 1.0);
        float _4226 = isnan(0.0) ? _1705 : (isnan(_1705) ? 0.0 : max(_1705, 0.0));
        float _1706 = isnan(1.0) ? _4226 : (isnan(_4226) ? 1.0 : min(_4226, 1.0));
        float _1715 = ((((1.0 - _1706) * (_1701 + 2.0)) * exp2(log2(isnan(1.0) ? _4204 : (isnan(_4204) ? 1.0 : min(_4204, 1.0))) * (_1701 + 1.0))) + _1706) * _1589;
        _1723 = _1556;
        _1724 = _1555;
        _1725 = _1554;
        _1726 = _1566;
        _1727 = _1565;
        _1728 = _1564;
        _1729 = _1576;
        _1730 = _1575;
        _1731 = _1574;
        _1732 = _1589;
        _1733 = _1588;
        _1734 = _1587;
        _1735 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1631 : (isnan(_1631) ? 0.0 : max(_1631, 0.0)));
        _1736 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1673 : (isnan(_1673) ? 0.0 : max(_1673, 0.0)));
        _1737 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1715 : (isnan(_1715) ? 0.0 : max(_1715, 0.0)));
    }
    else
    {
        _1723 = _1414;
        _1724 = _1414;
        _1725 = _1414;
        _1726 = _1414;
        _1727 = _1414;
        _1728 = _1414;
        _1729 = _1414;
        _1730 = _1414;
        _1731 = _1414;
        _1732 = _1414;
        _1733 = _1414;
        _1734 = _1414;
        _1735 = 0.0;
        _1736 = 0.0;
        _1737 = 0.0;
    }
    float _1747 = (cbModelParam._m0[1u].x * (_1735 - _1426)) + _1426;
    float _1748 = (cbModelParam._m0[1u].x * (_1736 - _1427)) + _1427;
    float _1749 = (cbModelParam._m0[1u].x * (_1737 - _1428)) + _1428;
    float _1770 = fma(_1749, cbSceneParam._m0[89u].z, fma(_1748, cbSceneParam._m0[89u].y, _1747 * cbSceneParam._m0[89u].x));
    float _1773 = fma(_1749, cbSceneParam._m0[90u].z, fma(_1748, cbSceneParam._m0[90u].y, _1747 * cbSceneParam._m0[90u].x));
    float _1776 = fma(_1749, cbSceneParam._m0[91u].z, fma(_1748, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1747));
    float _1791 = _1022 * 0.5;
    float _1792 = _1023 * 0.5;
    float _1793 = _1024 * 0.5;
    float _1794 = dot(vec4(_1791, _1792, _1793, 1.0), vec4(_1725, _1728, _1731, _1734));
    float _1797 = dot(vec4(_1791, _1792, _1793, 1.0), vec4(_1724, _1727, _1730, _1733));
    float _1800 = dot(vec4(_1791, _1792, _1793, 1.0), vec4(_1723, _1726, _1729, _1732));
    float _1834;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1807 = dot(vec4(_1791, _1792, _1793, 1.0), vec4(_1413, _1417, _1420, _1423));
        float _1811 = dot(vec4(_1791, _1792, _1793, 1.0), vec4(_1415, _1418, _1421, _1424));
        float _1815 = dot(vec4(_1791, _1792, _1793, 1.0), vec4(_1416, _1419, _1422, _1425));
        float _1822 = dot(vec4(cbModelParam._m0[39u]), vec4(_1791, _1792, _1793, 1.0));
        _1834 = dot(vec3(isnan(0.0) ? _1815 : (isnan(_1815) ? 0.0 : max(_1815, 0.0)), isnan(0.0) ? _1811 : (isnan(_1811) ? 0.0 : max(_1811, 0.0)), isnan(0.0) ? _1807 : (isnan(_1807) ? 0.0 : max(_1807, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1822) ? 0.0 : (isnan(0.0) ? _1822 : max(0.0, _1822))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1834 = 1.0;
    }
    float _1845;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1836 = dot(vec4(cbModelParam._m0[40u]), vec4(_1791, _1792, _1793, 1.0));
        _1845 = dot(vec3(isnan(0.0) ? _1794 : (isnan(_1794) ? 0.0 : max(_1794, 0.0)), isnan(0.0) ? _1797 : (isnan(_1797) ? 0.0 : max(_1797, 0.0)), isnan(0.0) ? _1800 : (isnan(_1800) ? 0.0 : max(_1800, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1836) ? 0.0 : (isnan(0.0) ? _1836 : max(0.0, _1836))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1845 = 1.0;
    }
    float _1849 = (_1845 * cbModelParam._m0[1u].x) + (_1834 * (1.0 - cbModelParam._m0[1u].x));
    float _1859 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _855);
    float _1860 = isnan(_1859) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1859 : min(cbModelParam._m0[25u].z, _1859));
    float _1940;
    float _1942;
    float _1944;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1907 = fma(_1083, cbModelParam._m0[13u].z, fma(_1079, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1075)) + cbModelParam._m0[13u].w;
        float _1911 = fma(_1083, cbModelParam._m0[14u].z, fma(_1079, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1075)) + cbModelParam._m0[14u].w;
        float _1915 = fma(_1083, cbModelParam._m0[15u].z, fma(_1079, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1075)) + cbModelParam._m0[15u].w;
        float _1918 = fma(_1024, cbModelParam._m0[13u].z, fma(_1023, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1022));
        float _1921 = fma(_1024, cbModelParam._m0[14u].z, fma(_1023, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1022));
        float _1924 = fma(_1024, cbModelParam._m0[15u].z, fma(_1023, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1022));
        float _1952;
        if (_1918 > 0.0)
        {
            _1952 = abs((1.0 - _1907) / _1918);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1918 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1907 + 1.0) / _1918);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1952 = frontier_phi_17_15_ladder;
        }
        float _2174;
        if (_1921 > 0.0)
        {
            _2174 = abs((1.0 - _1911) / _1921);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1921 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1911 + 1.0) / _1921);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2174 = frontier_phi_26_22_ladder;
        }
        float _2420;
        if (_1924 > 0.0)
        {
            _2420 = abs((1.0 - _1915) / _1924);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1924 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1915 + 1.0) / _1924);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2420 = frontier_phi_38_33_ladder;
        }
        float _2422 = isnan(_2174) ? _1952 : (isnan(_1952) ? _2174 : min(_1952, _2174));
        float _2423 = isnan(_2420) ? _2422 : (isnan(_2422) ? _2420 : min(_2422, _2420));
        float _2427 = (_2423 * _1918) + _1907;
        float _2428 = (_2423 * _1921) + _1911;
        float _2429 = (_2423 * _1924) + _1915;
        float _2430 = _2423 * 9.9999997473787516355514526367188e-05;
        float _2432 = (-1.0) - _2430;
        float _2434 = _2430 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2429 > _2434) || ((_2429 < _2432) || ((_2428 > _2434) || ((_2428 < _2432) || ((_2427 < _2432) || (_2427 > _2434))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2553 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2429, cbModelParam._m0[9u].z, fma(_2428, cbModelParam._m0[9u].y, _2427 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2429, cbModelParam._m0[10u].z, fma(_2428, cbModelParam._m0[10u].y, _2427 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2429, cbModelParam._m0[11u].z, fma(_2428, cbModelParam._m0[11u].y, _2427 * cbModelParam._m0[11u].x))), _1860);
            frontier_phi_16_38_ladder = _2553.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2553.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2553.x * cbModelParam._m0[1u].y;
        }
        _1940 = frontier_phi_16_38_ladder_2;
        _1942 = frontier_phi_16_38_ladder_1;
        _1944 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1928 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1022, _1023, _1024), _1860);
        _1940 = _1928.x * cbModelParam._m0[1u].y;
        _1942 = _1928.y * cbModelParam._m0[1u].y;
        _1944 = _1928.z * cbModelParam._m0[1u].y;
    }
    float _1948 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _855);
    float _1949 = isnan(_1948) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1948 : min(cbModelParam._m0[25u].w, _1948));
    float _2039;
    float _2041;
    float _2043;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2003 = fma(_1083, cbModelParam._m0[21u].z, fma(_1079, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1075)) + cbModelParam._m0[21u].w;
        float _2007 = fma(_1083, cbModelParam._m0[22u].z, fma(_1079, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1075)) + cbModelParam._m0[22u].w;
        float _2011 = fma(_1083, cbModelParam._m0[23u].z, fma(_1079, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1075)) + cbModelParam._m0[23u].w;
        float _2014 = fma(_1024, cbModelParam._m0[21u].z, fma(_1023, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1022));
        float _2017 = fma(_1024, cbModelParam._m0[22u].z, fma(_1023, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1022));
        float _2020 = fma(_1024, cbModelParam._m0[23u].z, fma(_1023, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1022));
        float _2179;
        if (_2014 > 0.0)
        {
            _2179 = abs((1.0 - _2003) / _2014);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_2014 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_2003 + 1.0) / _2014);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2179 = frontier_phi_28_24_ladder;
        }
        float _2447;
        if (_2017 > 0.0)
        {
            _2447 = abs((1.0 - _2007) / _2017);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_2017 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_2007 + 1.0) / _2017);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2447 = frontier_phi_40_35_ladder;
        }
        float _2652;
        if (_2020 > 0.0)
        {
            _2652 = abs((1.0 - _2011) / _2020);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_2020 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_2011 + 1.0) / _2020);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2652 = frontier_phi_49_46_ladder;
        }
        float _2654 = isnan(_2447) ? _2179 : (isnan(_2179) ? _2447 : min(_2179, _2447));
        float _2655 = isnan(_2652) ? _2654 : (isnan(_2654) ? _2652 : min(_2654, _2652));
        float _2659 = (_2655 * _2014) + _2003;
        float _2660 = (_2655 * _2017) + _2007;
        float _2661 = (_2655 * _2020) + _2011;
        float _2662 = _2655 * 9.9999997473787516355514526367188e-05;
        float _2663 = (-1.0) - _2662;
        float _2665 = _2662 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2661 > _2665) || ((_2661 < _2663) || ((_2660 > _2665) || ((_2660 < _2663) || ((_2659 < _2663) || (_2659 > _2665))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2860 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2661, cbModelParam._m0[17u].z, fma(_2660, cbModelParam._m0[17u].y, _2659 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2661, cbModelParam._m0[18u].z, fma(_2660, cbModelParam._m0[18u].y, _2659 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2661, cbModelParam._m0[19u].z, fma(_2660, cbModelParam._m0[19u].y, _2659 * cbModelParam._m0[19u].x))), _1949);
            frontier_phi_25_49_ladder = _2860.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2860.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2860.x * cbModelParam._m0[1u].z;
        }
        _2039 = frontier_phi_25_49_ladder_2;
        _2041 = frontier_phi_25_49_ladder_1;
        _2043 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _2023 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1022, _1023, _1024), _1949);
        _2039 = _2023.x * cbModelParam._m0[1u].z;
        _2041 = _2023.y * cbModelParam._m0[1u].z;
        _2043 = _2023.z * cbModelParam._m0[1u].z;
    }
    float _2055 = ((((1.0 - _1043) * ((_1030 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_1043 * _1030)) * _1014;
    float _2056 = _2055 * ((cbModelParam._m0[1u].w * (_2039 - _1940)) + _1940);
    float _2057 = _2055 * ((cbModelParam._m0[1u].w * (_2041 - _1942)) + _1942);
    float _2058 = _2055 * ((cbModelParam._m0[1u].w * (_2043 - _1944)) + _1944);
    float _2061 = fma(_2058, cbSceneParam._m0[89u].z, fma(_2057, cbSceneParam._m0[89u].y, _2056 * cbSceneParam._m0[89u].x));
    float _2064 = fma(_2058, cbSceneParam._m0[90u].z, fma(_2057, cbSceneParam._m0[90u].y, _2056 * cbSceneParam._m0[90u].x));
    float _2067 = fma(_2058, cbSceneParam._m0[91u].z, fma(_2057, cbSceneParam._m0[91u].y, _2056 * cbSceneParam._m0[91u].x));
    vec4 _2075 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_951, _952));
    float _2077 = _2075.w;
    float _2089 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _2077);
    float _2090 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _2077);
    float _2091 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _2077);
    uvec4 _2095 = floatBitsToUint(cbInstanceData._m0[_248 + 5u]);
    uint _2097 = _2095.x * 14u;
    uint _2098 = _2097 + 13u;
    float _2105 = _1014 + (-1.0);
    float _2110 = (cbLight._m0[_2098].x * _2105) + 1.0;
    float _2111 = (cbLight._m0[_2098].y * _2105) + 1.0;
    float _2112 = (cbLight._m0[_2098].z * _2105) + 1.0;
    float _2113 = (cbLight._m0[_2098].w * _2105) + 1.0;
    uint _2114 = _2097 + 5u;
    float _2120 = isnan(1.0) ? _2111 : (isnan(_2111) ? 1.0 : min(_2111, 1.0));
    uint _2124 = _2097 + 4u;
    float _2133 = isnan(1.0) ? _2110 : (isnan(_2110) ? 1.0 : min(_2110, 1.0));
    uint _2137 = _2097 | 1u;
    float _2148 = dot(vec3(cbLight._m0[_2097].xyz), vec3(_852, _853, _854));
    float _2151 = dot(vec3(cbLight._m0[_2137].xyz), vec3(_852, _853, _854));
    float _4362 = isnan(0.0) ? _2148 : (isnan(_2148) ? 0.0 : max(_2148, 0.0));
    float _4373 = isnan(0.0) ? _2151 : (isnan(_2151) ? 0.0 : max(_2151, 0.0));
    float _2156 = (isnan(1.0) ? _4362 : (isnan(_4362) ? 1.0 : min(_4362, 1.0))) * 0.3183098733425140380859375;
    float _2158 = (isnan(1.0) ? _4373 : (isnan(_4373) ? 1.0 : min(_4373, 1.0))) * 0.3183098733425140380859375;
    float _2165 = ((cbLight._m0[_2114].x * _2120) * _2158) + (((cbLight._m0[_2124].x * _2089) * _2133) * _2156);
    float _2166 = ((_2120 * cbLight._m0[_2114].y) * _2158) + (((cbLight._m0[_2124].y * _2090) * _2133) * _2156);
    float _2167 = ((_2120 * cbLight._m0[_2114].z) * _2158) + (((cbLight._m0[_2124].z * _2091) * _2133) * _2156);
    uvec4 _2171 = floatBitsToUint(cbLight._m0[_2097 + 12u]);
    bool _2173 = _2171.x == 0u;
    float _2184;
    float _2186;
    float _2188;
    if (_2173)
    {
        _2184 = _2165;
        _2186 = _2166;
        _2188 = _2167;
    }
    else
    {
        uint _2192 = _2097 + 6u;
        float _2208 = (dot(vec3(cbLight._m0[_2097 + 2u].xyz), vec3(_852, _853, _854)) * 0.5) + 0.5;
        float _2209 = _2208 * _2208;
        float _4384 = isnan(0.0) ? _2209 : (isnan(_2209) ? 0.0 : max(_2209, 0.0));
        float _2210 = isnan(1.0) ? _4384 : (isnan(_4384) ? 1.0 : min(_4384, 1.0));
        float _2211 = isnan(1.0) ? _2112 : (isnan(_2112) ? 1.0 : min(_2112, 1.0));
        _2184 = (((cbLight._m0[_2192].x * 0.3183098733425140380859375) * _2210) * _2211) + _2165;
        _2186 = (((cbLight._m0[_2192].y * 0.3183098733425140380859375) * _2210) * _2211) + _2166;
        _2188 = (((cbLight._m0[_2192].z * 0.3183098733425140380859375) * _2210) * _2211) + _2167;
    }
    bool _2191 = _2171.y == 0u;
    float _2229;
    float _2231;
    float _2233;
    if (_2191)
    {
        _2229 = _2184;
        _2231 = _2186;
        _2233 = _2188;
    }
    else
    {
        uint _2391 = _2097 + 7u;
        float _2407 = (dot(vec3(cbLight._m0[_2097 + 3u].xyz), vec3(_852, _853, _854)) * 0.5) + 0.5;
        float _2408 = _2407 * _2407;
        float _4400 = isnan(0.0) ? _2408 : (isnan(_2408) ? 0.0 : max(_2408, 0.0));
        float _2409 = isnan(1.0) ? _4400 : (isnan(_4400) ? 1.0 : min(_4400, 1.0));
        float _2410 = isnan(1.0) ? _2113 : (isnan(_2113) ? 1.0 : min(_2113, 1.0));
        _2229 = (((cbLight._m0[_2391].x * 0.3183098733425140380859375) * _2409) * _2410) + _2184;
        _2231 = (((cbLight._m0[_2391].y * 0.3183098733425140380859375) * _2409) * _2410) + _2186;
        _2233 = (((cbLight._m0[_2391].z * 0.3183098733425140380859375) * _2409) * _2410) + _2188;
    }
    uint _2236 = _2097 + 8u;
    float _2249 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2097].w)) * _855) * 0.949999988079071044921875);
    float _2250 = _2249 * _2249;
    float _2251 = cbLight._m0[_2097].x + _931;
    float _2252 = cbLight._m0[_2097].y + _932;
    float _2253 = cbLight._m0[_2097].z + _933;
    float _2257 = inversesqrt(dot(vec3(_2251, _2252, _2253), vec3(_2251, _2252, _2253)));
    float _2258 = _2257 * _2251;
    float _2259 = _2257 * _2252;
    float _2260 = _2257 * _2253;
    float _2261 = dot(vec3(_852, _853, _854), vec3(cbLight._m0[_2097].xyz));
    float _4416 = isnan(0.0) ? _2261 : (isnan(_2261) ? 0.0 : max(_2261, 0.0));
    float _2264 = isnan(1.0) ? _4416 : (isnan(_4416) ? 1.0 : min(_4416, 1.0));
    float _4427 = isnan(0.0) ? _1015 : (isnan(_1015) ? 0.0 : max(_1015, 0.0));
    float _2265 = isnan(1.0) ? _4427 : (isnan(_4427) ? 1.0 : min(_4427, 1.0));
    float _2266 = dot(vec3(_852, _853, _854), vec3(_2258, _2259, _2260));
    float _4438 = isnan(0.0) ? _2266 : (isnan(_2266) ? 0.0 : max(_2266, 0.0));
    float _2269 = isnan(1.0) ? _4438 : (isnan(_4438) ? 1.0 : min(_4438, 1.0));
    float _2270 = dot(vec3(cbLight._m0[_2097].xyz), vec3(_2258, _2259, _2260));
    float _4449 = isnan(0.0) ? _2270 : (isnan(_2270) ? 0.0 : max(_2270, 0.0));
    float _2274 = _2250 * _2250;
    float _2278 = ((_2269 * _2269) * (_2274 + (-1.0))) + 1.0;
    float _2289 = (exp2(log2(1.0 - (isnan(1.0) ? _4449 : (isnan(_4449) ? 1.0 : min(_4449, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2290 = 1.0 - _2250;
    float _2301 = (0.5 / (((_2265 * ((_2264 * _2290) + _2250)) + 9.9999999392252902907785028219223e-09) + (((_2265 * _2290) + _2250) * _2264))) * _2264;
    float _4460 = isnan(0.0) ? _2301 : (isnan(_2301) ? 0.0 : max(_2301, 0.0));
    float _2303 = (isnan(1.0) ? _4460 : (isnan(_4460) ? 1.0 : min(_4460, 1.0))) * (_2274 / ((_2278 * _2278) * 3.141590118408203125));
    uint _2317 = _2097 + 9u;
    float _2328 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2137].w)) * _855) * 0.949999988079071044921875);
    float _2329 = _2328 * _2328;
    float _2330 = cbLight._m0[_2137].x + _931;
    float _2331 = cbLight._m0[_2137].y + _932;
    float _2332 = cbLight._m0[_2137].z + _933;
    float _2336 = inversesqrt(dot(vec3(_2330, _2331, _2332), vec3(_2330, _2331, _2332)));
    float _2337 = _2336 * _2330;
    float _2338 = _2336 * _2331;
    float _2339 = _2336 * _2332;
    float _2340 = dot(vec3(_852, _853, _854), vec3(cbLight._m0[_2137].xyz));
    float _4471 = isnan(0.0) ? _2340 : (isnan(_2340) ? 0.0 : max(_2340, 0.0));
    float _2343 = isnan(1.0) ? _4471 : (isnan(_4471) ? 1.0 : min(_4471, 1.0));
    float _2344 = dot(vec3(_852, _853, _854), vec3(_2337, _2338, _2339));
    float _4482 = isnan(0.0) ? _2344 : (isnan(_2344) ? 0.0 : max(_2344, 0.0));
    float _2347 = isnan(1.0) ? _4482 : (isnan(_4482) ? 1.0 : min(_4482, 1.0));
    float _2348 = dot(vec3(cbLight._m0[_2137].xyz), vec3(_2337, _2338, _2339));
    float _4493 = isnan(0.0) ? _2348 : (isnan(_2348) ? 0.0 : max(_2348, 0.0));
    float _2352 = _2329 * _2329;
    float _2356 = ((_2347 * _2347) * (_2352 + (-1.0))) + 1.0;
    float _2365 = (exp2(log2(1.0 - (isnan(1.0) ? _4493 : (isnan(_4493) ? 1.0 : min(_4493, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2366 = 1.0 - _2329;
    float _2376 = (0.5 / (((_2265 * ((_2343 * _2366) + _2329)) + 9.9999999392252902907785028219223e-09) + (((_2265 * _2366) + _2329) * _2343))) * _2343;
    float _4504 = isnan(0.0) ? _2376 : (isnan(_2376) ? 0.0 : max(_2376, 0.0));
    float _2378 = (isnan(1.0) ? _4504 : (isnan(_4504) ? 1.0 : min(_4504, 1.0))) * (_2352 / ((_2356 * _2356) * 3.141590118408203125));
    float _2388 = (((_2365 * cbLight._m0[_2317].x) * _2378) * _2120) + ((((cbLight._m0[_2236].x * _2089) * _2289) * _2303) * _2133);
    float _2389 = (((_2365 * cbLight._m0[_2317].y) * _2378) * _2120) + ((((cbLight._m0[_2236].y * _2090) * _2289) * _2303) * _2133);
    float _2390 = (((_2365 * cbLight._m0[_2317].z) * _2378) * _2120) + ((((cbLight._m0[_2236].z * _2091) * _2289) * _2303) * _2133);
    float _2452;
    float _2454;
    float _2456;
    if (_2173)
    {
        _2452 = _2388;
        _2454 = _2389;
        _2456 = _2390;
    }
    else
    {
        uint _2458 = _2097 + 2u;
        uint _2462 = _2097 + 10u;
        float _2476 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2458].w)) * _855) * 0.949999988079071044921875);
        float _2477 = _2476 * _2476;
        float _2478 = cbLight._m0[_2458].x + _931;
        float _2479 = cbLight._m0[_2458].y + _932;
        float _2480 = cbLight._m0[_2458].z + _933;
        float _2484 = inversesqrt(dot(vec3(_2478, _2479, _2480), vec3(_2478, _2479, _2480)));
        float _2485 = _2484 * _2478;
        float _2486 = _2484 * _2479;
        float _2487 = _2484 * _2480;
        float _2488 = dot(vec3(_852, _853, _854), vec3(cbLight._m0[_2458].xyz));
        float _4515 = isnan(0.0) ? _2488 : (isnan(_2488) ? 0.0 : max(_2488, 0.0));
        float _2491 = isnan(1.0) ? _4515 : (isnan(_4515) ? 1.0 : min(_4515, 1.0));
        float _2492 = dot(vec3(_852, _853, _854), vec3(_2485, _2486, _2487));
        float _4526 = isnan(0.0) ? _2492 : (isnan(_2492) ? 0.0 : max(_2492, 0.0));
        float _2495 = isnan(1.0) ? _4526 : (isnan(_4526) ? 1.0 : min(_4526, 1.0));
        float _2496 = dot(vec3(cbLight._m0[_2458].xyz), vec3(_2485, _2486, _2487));
        float _4537 = isnan(0.0) ? _2496 : (isnan(_2496) ? 0.0 : max(_2496, 0.0));
        float _2500 = _2477 * _2477;
        float _2504 = ((_2495 * _2495) * (_2500 + (-1.0))) + 1.0;
        float _2513 = (exp2(log2(1.0 - (isnan(1.0) ? _4537 : (isnan(_4537) ? 1.0 : min(_4537, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2514 = 1.0 - _2477;
        float _2524 = (0.5 / (((_2265 * ((_2491 * _2514) + _2477)) + 9.9999999392252902907785028219223e-09) + (((_2265 * _2514) + _2477) * _2491))) * _2491;
        float _4548 = isnan(0.0) ? _2524 : (isnan(_2524) ? 0.0 : max(_2524, 0.0));
        float _2526 = (isnan(1.0) ? _4548 : (isnan(_4548) ? 1.0 : min(_4548, 1.0))) * (_2500 / ((_2504 * _2504) * 3.141590118408203125));
        float _2527 = isnan(1.0) ? _2112 : (isnan(_2112) ? 1.0 : min(_2112, 1.0));
        _2452 = (((_2513 * cbLight._m0[_2462].x) * _2526) * _2527) + _2388;
        _2454 = (((_2513 * cbLight._m0[_2462].y) * _2526) * _2527) + _2389;
        _2456 = (((_2513 * cbLight._m0[_2462].z) * _2526) * _2527) + _2390;
    }
    float _2562;
    float _2564;
    float _2566;
    if (_2191)
    {
        _2562 = _2452;
        _2564 = _2454;
        _2566 = _2456;
    }
    else
    {
        uint _2573 = _2097 + 3u;
        uint _2577 = _2097 + 11u;
        float _2591 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2573].w)) * _855) * 0.949999988079071044921875);
        float _2592 = _2591 * _2591;
        float _2593 = cbLight._m0[_2573].x + _931;
        float _2594 = cbLight._m0[_2573].y + _932;
        float _2595 = cbLight._m0[_2573].z + _933;
        float _2599 = inversesqrt(dot(vec3(_2593, _2594, _2595), vec3(_2593, _2594, _2595)));
        float _2600 = _2599 * _2593;
        float _2601 = _2599 * _2594;
        float _2602 = _2599 * _2595;
        float _2603 = dot(vec3(_852, _853, _854), vec3(cbLight._m0[_2573].xyz));
        float _4564 = isnan(0.0) ? _2603 : (isnan(_2603) ? 0.0 : max(_2603, 0.0));
        float _2606 = isnan(1.0) ? _4564 : (isnan(_4564) ? 1.0 : min(_4564, 1.0));
        float _2607 = dot(vec3(_852, _853, _854), vec3(_2600, _2601, _2602));
        float _4575 = isnan(0.0) ? _2607 : (isnan(_2607) ? 0.0 : max(_2607, 0.0));
        float _2610 = isnan(1.0) ? _4575 : (isnan(_4575) ? 1.0 : min(_4575, 1.0));
        float _2611 = dot(vec3(cbLight._m0[_2573].xyz), vec3(_2600, _2601, _2602));
        float _4586 = isnan(0.0) ? _2611 : (isnan(_2611) ? 0.0 : max(_2611, 0.0));
        float _2615 = _2592 * _2592;
        float _2619 = ((_2610 * _2610) * (_2615 + (-1.0))) + 1.0;
        float _2628 = (exp2(log2(1.0 - (isnan(1.0) ? _4586 : (isnan(_4586) ? 1.0 : min(_4586, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2629 = 1.0 - _2592;
        float _2639 = (0.5 / (((_2265 * ((_2606 * _2629) + _2592)) + 9.9999999392252902907785028219223e-09) + (((_2265 * _2629) + _2592) * _2606))) * _2606;
        float _4597 = isnan(0.0) ? _2639 : (isnan(_2639) ? 0.0 : max(_2639, 0.0));
        float _2641 = (isnan(1.0) ? _4597 : (isnan(_4597) ? 1.0 : min(_4597, 1.0))) * (_2615 / ((_2619 * _2619) * 3.141590118408203125));
        float _2642 = isnan(1.0) ? _2113 : (isnan(_2113) ? 1.0 : min(_2113, 1.0));
        _2562 = (((_2628 * cbLight._m0[_2577].x) * _2641) * _2642) + _2452;
        _2564 = (((_2628 * cbLight._m0[_2577].y) * _2641) * _2642) + _2454;
        _2566 = (((_2628 * cbLight._m0[_2577].z) * _2641) * _2642) + _2456;
    }
    float _2777;
    float _2779;
    float _2781;
    float _2783;
    float _2785;
    float _2787;
    if (_2095.y == 0u)
    {
        float _2717 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2718 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2717;
        float _2719 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2717;
        float _2720 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2717;
        uvec4 _2732 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2733 = _2732.x;
        uint _2744 = uint((float(_2732.y) * floor(float(uint(cbSceneParam._m0[85u].y * _952) / _2733))) + floor(float(uint(cbSceneParam._m0[85u].x * _951) / _2733)));
        float _2754 = (log2(_2720 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2755 = isnan(0.0) ? _2754 : (isnan(_2754) ? 0.0 : max(_2754, 0.0));
        uint _2758 = uint(isnan(14.0) ? _2755 : (isnan(_2755) ? 14.0 : min(_2755, 14.0)));
        uvec4 _2763 = texelFetch(g_lightClusterGridBuffer, int(((_2758 << 2u) + (_2744 << 6u)) >> 2u));
        uint _2764 = _2763.x;
        uint _2765 = _2732.z;
        float _2865;
        float _2867;
        float _2869;
        float _2871;
        float _2873;
        float _2875;
        if (((((1u << ((_2765 >> 4u) & 15u)) + 4294967295u) & _2764) == 0u) || ((_2765 & 240u) == 0u))
        {
            _2865 = 0.0;
            _2867 = 0.0;
            _2869 = 0.0;
            _2871 = 0.0;
            _2873 = 0.0;
            _2875 = 0.0;
        }
        else
        {
            float _2866;
            float _2868;
            float _2870;
            float _2872;
            float _2874;
            float _2876;
            float _3018 = 0.0;
            float _3019 = 0.0;
            float _3020 = 0.0;
            float _3021 = 0.0;
            float _3022 = 0.0;
            float _3023 = 0.0;
            uint _3024 = 0u;
            uint _3033;
            bool _3034;
            for (;;)
            {
                _3033 = texelFetch(g_lightClassification, int((((_2758 << 5u) + (_2744 << 9u)) + (_3024 << 2u)) >> 2u)).x;
                _3034 = _3033 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3034)
                {
                    frontier_phi_66_pred = _3018;
                    frontier_phi_66_pred_1 = _3023;
                    frontier_phi_66_pred_2 = _3022;
                    frontier_phi_66_pred_3 = _3021;
                    frontier_phi_66_pred_4 = _3020;
                    frontier_phi_66_pred_5 = _3019;
                }
                else
                {
                    float _3163;
                    float _3164;
                    float _3165;
                    float _3166;
                    float _3167;
                    float _3168;
                    uint _3169;
                    _3163 = _3018;
                    _3164 = _3019;
                    _3165 = _3020;
                    _3166 = _3021;
                    _3167 = _3022;
                    _3168 = _3023;
                    _3169 = _3033;
                    float _3090;
                    float _3091;
                    float _3092;
                    float _3093;
                    float _3094;
                    float _3095;
                    for (;;)
                    {
                        uint _3173 = uint(findLSB(_3169)) + (_3024 << 5u);
                        uint _3170 = (_3169 + 4294967295u) & _3169;
                        uint _3175 = _3173 * 48u;
                        vec4 _3189 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3175)).x, texelFetch(g_PointLightRenderingBuffer, int(_3175 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3175 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3175 + 3u)).x));
                        uint _3195 = (_3173 * 48u) + 4u;
                        vec4 _3208 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3195)).x, texelFetch(g_PointLightRenderingBuffer, int(_3195 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3195 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3195 + 3u)).x));
                        uint _3214 = (_3173 * 48u) + 8u;
                        vec3 _3225 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3214)).x, texelFetch(g_PointLightRenderingBuffer, int(_3214 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3214 + 2u)).x));
                        float _3229 = _3189.x - _2718;
                        float _3230 = _3189.y - _2719;
                        float _3231 = _3189.z - _2720;
                        float _3232 = dot(vec3(_3229, _3230, _3231), vec3(_3229, _3230, _3231));
                        float _3235 = inversesqrt(_3232);
                        float _3236 = _3235 * _3229;
                        float _3237 = _3235 * _3230;
                        float _3238 = _3235 * _3231;
                        float _3239 = dot(vec3(_970, _973, _976), vec3(_3236, _3237, _3238));
                        float _3244 = 1.0 - (_3232 * _3189.w);
                        float _4623 = isnan(0.0) ? _3244 : (isnan(_3244) ? 0.0 : max(_3244, 0.0));
                        float _3245 = isnan(1.0) ? _4623 : (isnan(_4623) ? 1.0 : min(_4623, 1.0));
                        float _3246 = sqrt(_3232) * _3208.w;
                        float _3249 = 1.39999997615814208984375 / (_3246 + 1.39999997615814208984375);
                        float _3250 = _3249 * _3249;
                        float _3253 = ((1.0 - _3250) * _3239) + _3250;
                        float _3256 = _3246 * _3246;
                        float _3260 = ((isnan(0.0) ? _3253 : (isnan(_3253) ? 0.0 : max(_3253, 0.0))) * _3245) / ((_3256 * 0.699999988079071044921875) + 1.0);
                        float _3264 = (-0.0) - _2718;
                        float _3265 = (-0.0) - _2719;
                        float _3266 = (-0.0) - _2720;
                        float _3270 = inversesqrt(dot(vec3(_3264, _3265, _3266), vec3(_3264, _3265, _3266)));
                        float _3271 = _3270 * _3264;
                        float _3272 = _3270 * _3265;
                        float _3273 = _3270 * _3266;
                        float _3281 = exp2(log2(1.0 / ((_3256 * 3.5) + 5.0)) * 0.25);
                        float _3282 = 1.0 - _1030;
                        float _3289 = sqrt(1.0 - ((1.0 - (_3282 * _3282)) * (1.0 - (_3281 * _3281))));
                        float _3290 = _3289 * _3289;
                        float _3291 = _3290 * _3290;
                        float _3292 = _3271 + _3236;
                        float _3293 = _3272 + _3237;
                        float _3294 = _3273 + _3238;
                        float _3298 = inversesqrt(dot(vec3(_3292, _3293, _3294), vec3(_3292, _3293, _3294)));
                        float _3302 = dot(vec3(_970, _973, _976), vec3(_3271, _3272, _3273));
                        float _4639 = isnan(0.0) ? _3302 : (isnan(_3302) ? 0.0 : max(_3302, 0.0));
                        float _3305 = isnan(1.0) ? _4639 : (isnan(_4639) ? 1.0 : min(_4639, 1.0));
                        float _3306 = dot(vec3(_970, _973, _976), vec3(_3298 * _3292, _3298 * _3293, _3298 * _3294));
                        float _4650 = isnan(0.0) ? _3306 : (isnan(_3306) ? 0.0 : max(_3306, 0.0));
                        float _3309 = isnan(1.0) ? _4650 : (isnan(_4650) ? 1.0 : min(_4650, 1.0));
                        float _3313 = ((_3309 * _3309) * (_3291 + (-1.0))) + 1.0;
                        float _3314 = _3249 * _3290;
                        float _3315 = _3314 * _3314;
                        float _3318 = ((1.0 - _3315) * _3239) + _3315;
                        float _4661 = isnan(0.0) ? _3318 : (isnan(_3318) ? 0.0 : max(_3318, 0.0));
                        float _3319 = isnan(1.0) ? _4661 : (isnan(_4661) ? 1.0 : min(_4661, 1.0));
                        float _3320 = 1.0 - _3290;
                        float _3330 = (0.5 / (((_3319 * ((_3305 * _3320) + _3290)) + 9.9999999392252902907785028219223e-09) + (((_3319 * _3320) + _3290) * _3305))) * _3319;
                        float _4672 = isnan(0.0) ? _3330 : (isnan(_3330) ? 0.0 : max(_3330, 0.0));
                        float _3341 = (((_3291 * 3.1415927410125732421875) * (isnan(1.0) ? _4672 : (isnan(_4672) ? 1.0 : min(_4672, 1.0)))) / ((_3313 * _3313) * ((_3256 * 2.1991131305694580078125) + 3.141590118408203125))) * _3245;
                        _3093 = (_3260 * _3208.x) + _3166;
                        _3094 = (_3260 * _3208.y) + _3167;
                        _3095 = (_3260 * _3208.z) + _3168;
                        _3090 = (_3341 * _3225.x) + _3163;
                        _3091 = (_3341 * _3225.y) + _3164;
                        _3092 = (_3341 * _3225.z) + _3165;
                        if (_3170 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3163 = _3090;
                            _3164 = _3091;
                            _3165 = _3092;
                            _3166 = _3093;
                            _3167 = _3094;
                            _3168 = _3095;
                            _3169 = _3170;
                        }
                    }
                    frontier_phi_66_pred = _3090;
                    frontier_phi_66_pred_1 = _3095;
                    frontier_phi_66_pred_2 = _3094;
                    frontier_phi_66_pred_3 = _3093;
                    frontier_phi_66_pred_4 = _3092;
                    frontier_phi_66_pred_5 = _3091;
                }
                _2866 = frontier_phi_66_pred;
                _2876 = frontier_phi_66_pred_1;
                _2874 = frontier_phi_66_pred_2;
                _2872 = frontier_phi_66_pred_3;
                _2870 = frontier_phi_66_pred_4;
                _2868 = frontier_phi_66_pred_5;
                uint _3025 = _3024 + 1u;
                if (_3025 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3018 = _2866;
                    _3019 = _2868;
                    _3020 = _2870;
                    _3021 = _2872;
                    _3022 = _2874;
                    _3023 = _2876;
                    _3024 = _3025;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2865 = _2866;
            _2867 = _2868;
            _2869 = _2870;
            _2871 = _2872;
            _2873 = _2874;
            _2875 = _2876;
        }
        uvec4 _2879 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2880 = _2879.z;
        uint _2882 = (_2880 >> 8u) & 15u;
        float _2986;
        float _2988;
        float _2990;
        float _2992;
        float _2994;
        float _2996;
        if (((4294967295u << _2882) & _2764) == 0u)
        {
            _2986 = _2865;
            _2988 = _2867;
            _2990 = _2869;
            _2992 = _2871;
            _2994 = _2873;
            _2996 = _2875;
        }
        else
        {
            float _3011 = inversesqrt(dot(vec3(_2718, _2719, _2720), vec3(_2718, _2719, _2720)));
            float _3012 = _3011 * _2718;
            float _3013 = _3011 * _2719;
            float _3014 = _3011 * _2720;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2882 < ((_2880 >> 12u) & 15u))
            {
                float _2987;
                float _2989;
                float _2991;
                float _2993;
                float _2995;
                float _2997;
                float _3146 = _2865;
                float _3147 = _2867;
                float _3148 = _2869;
                float _3149 = _2871;
                float _3150 = _2873;
                float _3151 = _2875;
                uint _3152 = _2882;
                uint _3161;
                bool _3162;
                for (;;)
                {
                    _3161 = texelFetch(g_lightClassification, int((((_2758 << 5u) + (_2744 << 9u)) + (_3152 << 2u)) >> 2u)).x;
                    _3162 = _3161 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_3162)
                    {
                        frontier_phi_77_pred = _3151;
                        frontier_phi_77_pred_1 = _3150;
                        frontier_phi_77_pred_2 = _3149;
                        frontier_phi_77_pred_3 = _3148;
                        frontier_phi_77_pred_4 = _3147;
                        frontier_phi_77_pred_5 = _3146;
                    }
                    else
                    {
                        float _3355;
                        float _3356;
                        float _3357;
                        float _3358;
                        float _3359;
                        float _3360;
                        float _3648;
                        float _3649;
                        float _3650;
                        float _3651;
                        float _3652;
                        float _3653;
                        float _3368 = _3146;
                        float _3369 = _3147;
                        float _3370 = _3148;
                        float _3371 = _3149;
                        float _3372 = _3150;
                        float _3373 = _3151;
                        uint _3374 = _3161;
                        uint _3375;
                        vec4 _3400;
                        float _3401;
                        vec4 _3416;
                        vec3 _3428;
                        vec4 _3443;
                        vec4 _3458;
                        float _3504;
                        bool _3505;
                        for (;;)
                        {
                            uint _3385 = ((_3152 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3374));
                            _3375 = (_3374 + 4294967295u) & _3374;
                            uint _3387 = _3385 * 40u;
                            _3400 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3387)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3387 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3387 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3387 + 3u)).x));
                            _3401 = _3400.w;
                            uint _3403 = (_3385 * 40u) + 4u;
                            _3416 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3403)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3403 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3403 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3403 + 3u)).x));
                            uint _3418 = (_3385 * 40u) + 8u;
                            _3428 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3418)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3418 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3418 + 2u)).x));
                            uint _3430 = (_3385 * 40u) + 16u;
                            _3443 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3430)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3430 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3430 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3430 + 3u)).x));
                            uint _3445 = (_3385 * 40u) + 20u;
                            _3458 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3445)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3445 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3445 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3445 + 3u)).x));
                            uint _3460 = (_3385 * 40u) + 24u;
                            vec4 _3473 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3460)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3460 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3460 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3460 + 3u)).x));
                            uint _3479 = (_3385 * 40u) + 28u;
                            vec4 _3492 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3479)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3479 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3479 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3479 + 3u)).x));
                            _3504 = fma(_2720, _3492.z, fma(_2719, _3492.y, _3492.x * _2718)) + _3492.w;
                            _3505 = !((fma(_2720, _3473.z, fma(_2719, _3473.y, _3473.x * _2718)) + _3473.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3505)
                            {
                                float _3532 = _3400.x - _2718;
                                float _3533 = _3400.y - _2719;
                                float _3534 = _3400.z - _2720;
                                float _3535 = dot(vec3(_3532, _3533, _3534), vec3(_3532, _3533, _3534));
                                float _3538 = inversesqrt(_3535);
                                float _3539 = _3538 * _3532;
                                float _3540 = _3538 * _3533;
                                float _3541 = _3538 * _3534;
                                float _3545 = 1.0 - (_3535 / (_3401 * _3401));
                                float _4683 = isnan(0.0) ? _3545 : (isnan(_3545) ? 0.0 : max(_3545, 0.0));
                                float _3546 = isnan(1.0) ? _4683 : (isnan(_4683) ? 1.0 : min(_4683, 1.0));
                                float _3550 = sqrt(_3535) * _3416.w;
                                float _3552 = 1.39999997615814208984375 / (_3550 + 1.39999997615814208984375);
                                float _3553 = _3552 * _3552;
                                float _3556 = ((1.0 - _3553) * dot(vec3(_3539, _3540, _3541), vec3(_970, _973, _976))) + _3553;
                                float _3559 = _3550 * _3550;
                                float _3563 = (fma(_2720, _3443.z, fma(_2719, _3443.y, _3443.x * _2718)) + _3443.w) / _3504;
                                float _3564 = (fma(_2720, _3458.z, fma(_2719, _3458.y, _3458.x * _2718)) + _3458.w) / _3504;
                                float _3568 = 1.0 - dot(vec2(_3563, _3564), vec2(_3563, _3564));
                                float _4699 = isnan(0.0) ? _3568 : (isnan(_3568) ? 0.0 : max(_3568, 0.0));
                                float _3569 = isnan(1.0) ? _4699 : (isnan(_4699) ? 1.0 : min(_4699, 1.0));
                                float _3570 = _3569 * (((isnan(0.0) ? _3556 : (isnan(_3556) ? 0.0 : max(_3556, 0.0))) * _3546) / ((_3559 * 0.699999988079071044921875) + 1.0));
                                float _3582 = exp2(log2(1.0 / ((_3559 * 3.5) + 5.0)) * 0.25);
                                float _3583 = 1.0 - _1030;
                                float _3590 = sqrt(1.0 - ((1.0 - (_3583 * _3583)) * (1.0 - (_3582 * _3582))));
                                float _3591 = _3590 * _3590;
                                float _3592 = _3591 * _3591;
                                float _3593 = _3539 - _3012;
                                float _3594 = _3540 - _3013;
                                float _3595 = _3541 - _3014;
                                float _3599 = inversesqrt(dot(vec3(_3593, _3594, _3595), vec3(_3593, _3594, _3595)));
                                float _3603 = dot(vec3(_970, _973, _976), vec3((-0.0) - _3012, (-0.0) - _3013, (-0.0) - _3014));
                                float _4710 = isnan(0.0) ? _3603 : (isnan(_3603) ? 0.0 : max(_3603, 0.0));
                                float _3606 = isnan(1.0) ? _4710 : (isnan(_4710) ? 1.0 : min(_4710, 1.0));
                                float _3607 = dot(vec3(_970, _973, _976), vec3(_3599 * _3593, _3599 * _3594, _3599 * _3595));
                                float _4721 = isnan(0.0) ? _3607 : (isnan(_3607) ? 0.0 : max(_3607, 0.0));
                                float _3610 = isnan(1.0) ? _4721 : (isnan(_4721) ? 1.0 : min(_4721, 1.0));
                                float _3614 = ((_3610 * _3610) * (_3592 + (-1.0))) + 1.0;
                                float _3615 = _3552 * _3591;
                                float _3616 = _3615 * _3615;
                                float _3622 = ((1.0 - _3616) * dot(vec3(_970, _973, _976), vec3(_3539, _3540, _3541))) + _3616;
                                float _4732 = isnan(0.0) ? _3622 : (isnan(_3622) ? 0.0 : max(_3622, 0.0));
                                float _3623 = isnan(1.0) ? _4732 : (isnan(_4732) ? 1.0 : min(_4732, 1.0));
                                float _3624 = 1.0 - _3591;
                                float _3634 = (0.5 / (((_3623 * ((_3606 * _3624) + _3591)) + 9.9999999392252902907785028219223e-09) + (((_3623 * _3624) + _3591) * _3606))) * _3623;
                                float _4743 = isnan(0.0) ? _3634 : (isnan(_3634) ? 0.0 : max(_3634, 0.0));
                                float _3644 = (_3569 * _3546) * (((_3592 * 3.1415927410125732421875) * (isnan(1.0) ? _4743 : (isnan(_4743) ? 1.0 : min(_4743, 1.0)))) / ((_3614 * _3614) * ((_3559 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3570 * _3416.y;
                                frontier_phi_83_pred_1 = _3570 * _3416.x;
                                frontier_phi_83_pred_2 = _3644 * _3428.z;
                                frontier_phi_83_pred_3 = _3644 * _3428.y;
                                frontier_phi_83_pred_4 = _3644 * _3428.x;
                                frontier_phi_83_pred_5 = _3570 * _3416.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3652 = frontier_phi_83_pred;
                            _3651 = frontier_phi_83_pred_1;
                            _3650 = frontier_phi_83_pred_2;
                            _3649 = frontier_phi_83_pred_3;
                            _3648 = frontier_phi_83_pred_4;
                            _3653 = frontier_phi_83_pred_5;
                            _3358 = _3651 + _3371;
                            _3359 = _3652 + _3372;
                            _3360 = _3653 + _3373;
                            _3355 = _3648 + _3368;
                            _3356 = _3649 + _3369;
                            _3357 = _3650 + _3370;
                            if (_3375 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3368 = _3355;
                                _3369 = _3356;
                                _3370 = _3357;
                                _3371 = _3358;
                                _3372 = _3359;
                                _3373 = _3360;
                                _3374 = _3375;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3360;
                        frontier_phi_77_pred_1 = _3359;
                        frontier_phi_77_pred_2 = _3358;
                        frontier_phi_77_pred_3 = _3357;
                        frontier_phi_77_pred_4 = _3356;
                        frontier_phi_77_pred_5 = _3355;
                    }
                    _2997 = frontier_phi_77_pred;
                    _2995 = frontier_phi_77_pred_1;
                    _2993 = frontier_phi_77_pred_2;
                    _2991 = frontier_phi_77_pred_3;
                    _2989 = frontier_phi_77_pred_4;
                    _2987 = frontier_phi_77_pred_5;
                    uint _3153 = _3152 + 1u;
                    if (_3153 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3146 = _2987;
                        _3147 = _2989;
                        _3148 = _2991;
                        _3149 = _2993;
                        _3150 = _2995;
                        _3151 = _2997;
                        _3152 = _3153;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2991;
                frontier_phi_58_59_ladder_1 = _2997;
                frontier_phi_58_59_ladder_2 = _2995;
                frontier_phi_58_59_ladder_3 = _2993;
                frontier_phi_58_59_ladder_4 = _2989;
                frontier_phi_58_59_ladder_5 = _2987;
            }
            else
            {
                frontier_phi_58_59_ladder = _2869;
                frontier_phi_58_59_ladder_1 = _2875;
                frontier_phi_58_59_ladder_2 = _2873;
                frontier_phi_58_59_ladder_3 = _2871;
                frontier_phi_58_59_ladder_4 = _2867;
                frontier_phi_58_59_ladder_5 = _2865;
            }
            _2986 = frontier_phi_58_59_ladder_5;
            _2988 = frontier_phi_58_59_ladder_4;
            _2990 = frontier_phi_58_59_ladder;
            _2992 = frontier_phi_58_59_ladder_3;
            _2994 = frontier_phi_58_59_ladder_2;
            _2996 = frontier_phi_58_59_ladder_1;
        }
        float _3001 = isnan(1.0) ? _1014 : (isnan(_1014) ? 1.0 : min(_1014, 1.0));
        _2777 = (_3001 * _2992) + _2229;
        _2779 = (_3001 * _2994) + _2231;
        _2781 = (_3001 * _2996) + _2233;
        _2783 = ((_2986 * 0.039999999105930328369140625) * _3001) + _2562;
        _2785 = ((_2988 * 0.039999999105930328369140625) * _3001) + _2564;
        _2787 = ((_2990 * 0.039999999105930328369140625) * _3001) + _2566;
    }
    else
    {
        _2777 = _2229;
        _2779 = _2231;
        _2781 = _2233;
        _2783 = _2562;
        _2785 = _2564;
        _2787 = _2566;
    }
    float _4759 = isnan(0.0) ? _999 : (isnan(_999) ? 0.0 : max(_999, 0.0));
    float _4770 = isnan(0.0) ? _1000 : (isnan(_1000) ? 0.0 : max(_1000, 0.0));
    float _4781 = isnan(0.0) ? _1001 : (isnan(_1001) ? 0.0 : max(_1001, 0.0));
    float _2804 = ((isnan(1.0) ? _4759 : (isnan(_4759) ? 1.0 : min(_4759, 1.0))) * (_2777 + ((isnan(0.0) ? _1770 : (isnan(_1770) ? 0.0 : max(_1770, 0.0))) * _1014))) + ((_2783 + ((isnan(0.0) ? _2061 : (isnan(_2061) ? 0.0 : max(_2061, 0.0))) * _1849)) * cbPerFrame._m0[3u].x);
    float _2805 = ((isnan(1.0) ? _4770 : (isnan(_4770) ? 1.0 : min(_4770, 1.0))) * (_2779 + ((isnan(0.0) ? _1773 : (isnan(_1773) ? 0.0 : max(_1773, 0.0))) * _1014))) + ((_2785 + ((isnan(0.0) ? _2064 : (isnan(_2064) ? 0.0 : max(_2064, 0.0))) * _1849)) * cbPerFrame._m0[3u].x);
    float _2806 = ((isnan(1.0) ? _4781 : (isnan(_4781) ? 1.0 : min(_4781, 1.0))) * (_2781 + ((isnan(0.0) ? _1776 : (isnan(_1776) ? 0.0 : max(_1776, 0.0))) * _1014))) + ((_2787 + ((isnan(0.0) ? _2067 : (isnan(_2067) ? 0.0 : max(_2067, 0.0))) * _1849)) * cbPerFrame._m0[3u].x);
    uint _2807 = _248 + 6u;
    float _2815 = _951 / cbSceneParam._m0[86u].x;
    float _2816 = _952 / cbSceneParam._m0[86u].y;
    vec4 _2830 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2815, _2816, (log2((isnan(cbSceneParam._m0[77u].w) ? _873 : (isnan(_873) ? cbSceneParam._m0[77u].w : min(_873, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2832 = _2830.x;
    float _2833 = _2830.y;
    float _2834 = _2830.z;
    float _2835 = _2830.w;
    float _2928;
    float _2930;
    float _2932;
    float _2934;
    if (_873 > cbSceneParam._m0[78u].w)
    {
        float _2890 = isnan(_873) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _873 : min(cbSceneParam._m0[80u].w, _873));
        float _2891 = _2890 / _873;
        float _2902 = _2891 * _924;
        float _2903 = _925 * _2891;
        float _2904 = (-0.0) - _2903;
        float _2906 = _2891 * _926;
        float _2908 = (cbSceneParam._m0[77u].w * _2904) / _2890;
        float _2909 = _2908 + cbSceneParam._m0[79u].w;
        float _2910 = cbSceneParam._m0[79u].w - _2903;
        float _2916 = sqrt(((_2902 * _2902) + (_2903 * _2903)) + (_2906 * _2906));
        float _2919 = (1.0 - (cbSceneParam._m0[77u].w / _2890)) * _2916;
        float _2924 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2926 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3103;
        if (abs((_2904 - _2908) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3103 = ((((_2909 > 0.0) ? exp2(_2924 * _2909) : (2.0 - exp2(_2926 * _2909))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2919;
        }
        else
        {
            float _3047 = 1.0 / cbSceneParam._m0[80u].x;
            float _3048 = isnan(_2910) ? _2909 : (isnan(_2909) ? _2910 : max(_2909, _2910));
            float _3049 = isnan(_2910) ? _2909 : (isnan(_2909) ? _2910 : min(_2909, _2910));
            float _3058 = isnan(0.0) ? _3048 : (isnan(_3048) ? 0.0 : min(_3048, 0.0));
            float _3059 = isnan(0.0) ? _3049 : (isnan(_3049) ? 0.0 : min(_3049, 0.0));
            _3103 = ((abs(_2916 / _2904) * cbSceneParam._m0[80u].y) * ((((_3058 - _3059) * 2.0) - ((exp2(_2924 * (isnan(0.0) ? _3048 : (isnan(_3048) ? 0.0 : max(_3048, 0.0)))) - exp2(_2924 * (isnan(0.0) ? _3049 : (isnan(_3049) ? 0.0 : max(_3049, 0.0))))) * _3047)) - ((exp2(_2926 * _3058) - exp2(_2926 * _3059)) * _3047))) + (_2919 * cbSceneParam._m0[80u].z);
        }
        vec4 _3105 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2815, _2816, 1.0), 0.0);
        float _3114 = exp2((_3103 * (-1.44269502162933349609375)) * (1.0 - _3105.w));
        float _3115 = log2(_3114);
        float _3131 = log2(_2835);
        _2928 = (exp2(_3131 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3115 * cbSceneParam._m0[78u].x)) * _3105.x) / cbSceneParam._m0[78u].x)) + _2832;
        _2930 = (exp2(_3131 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3115 * cbSceneParam._m0[78u].y)) * _3105.y) / cbSceneParam._m0[78u].y)) + _2833;
        _2932 = (exp2(_3131 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3115 * cbSceneParam._m0[78u].z)) * _3105.z) / cbSceneParam._m0[78u].z)) + _2834;
        _2934 = _3114 * _2835;
    }
    else
    {
        _2928 = _2832;
        _2930 = _2833;
        _2932 = _2834;
        _2934 = _2835;
    }
    bool _3141;
    vec4 _2944;
    vec4 _2966;
    float _2968;
    float _2972;
    float _2973;
    float _2974;
    float _2975;
    bool _2985;
    for (;;)
    {
        _2944 = cbMatDynParam._m0[0u];
        float _2946 = roundEven(_2944.y);
        bool _2947 = _2946 == 3.0;
        float _2948 = log2(_2934);
        float _2955 = exp2(_2948 * cbSceneParam._m0[78u].x) * _2804;
        float _2956 = exp2(_2948 * cbSceneParam._m0[78u].y) * _2805;
        float _2957 = exp2(_2948 * cbSceneParam._m0[78u].z) * _2806;
        float _2964 = _940 + (-0.5);
        _2966 = cbMtdParam._m0[1u];
        _2968 = _2966.y * _2964;
        float _2971 = (_2946 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2972 = _2971 * (_2947 ? _2955 : (_2955 + (cbSceneParam._m0[72u].w * _2928)));
        _2973 = _2971 * (_2947 ? _2956 : (_2956 + (cbSceneParam._m0[72u].w * _2930)));
        _2974 = _2971 * (_2947 ? _2957 : (_2957 + (cbSceneParam._m0[72u].w * _2932)));
        _2975 = _2964 * 0.999000012874603271484375;
        _2985 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2985)
        {
            if ((cbInstanceData._m0[_248 + 7u].x + _2975) < 0.5)
            {
                _3141 = true;
                break;
            }
        }
        uint _3082 = _989 + uint(_2944.w);
        if ((cbInstanceData._m0[_3082].w < 1.0) && ((cbInstanceData._m0[_3082].w + _2975) < 0.5))
        {
            _3141 = true;
            break;
        }
        if ((_2968 + 1.0) < _2966.x)
        {
            _3141 = true;
            break;
        }
        _3141 = false;
        break;
    }
    float _3346;
    if (_3141)
    {
        discard_state = true;
        _3346 = 0.0;
    }
    else
    {
        _3346 = cbInstanceData._m0[_2807].w;
    }
    SV_Target.x = _2972;
    SV_Target.y = _2973;
    SV_Target.z = _2974;
    SV_Target.w = _3346;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2807].w;
    discard_exit();
}


