#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 14) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_29;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_10;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_6;
layout(set = 0, binding = 23) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_8;
layout(set = 0, binding = 24) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_9;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1531;
float _4169;
float _4170;
float _4171;
float _4172;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _237 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _238 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _239 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _245 = inversesqrt(dot(vec3(_237, _238, _239), vec3(_237, _238, _239)));
    float _246 = _245 * _237;
    float _247 = _245 * _238;
    float _248 = _245 * _239;
    float _252 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _253 = _252 * NORMAL.x;
    float _254 = _252 * NORMAL.y;
    float _255 = _252 * NORMAL.z;
    float _259 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _260 = _259 * TANGENT.x;
    float _261 = _259 * TANGENT.y;
    float _262 = _259 * TANGENT.z;
    uint _265 = uint(roundEven(NORMAL.w)) * 13u;
    uint _270 = _265 + 1u;
    uint _274 = _265 + 2u;
    float _283 = sqrt(((cbInstanceData._m0[_270].x * cbInstanceData._m0[_270].x) + (cbInstanceData._m0[_265].x * cbInstanceData._m0[_265].x)) + (cbInstanceData._m0[_274].x * cbInstanceData._m0[_274].x));
    float _284 = _283 * TEXCOORD.z;
    float _285 = _283 * TEXCOORD.w;
    vec4 _305 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _311 = _305.x * cbMtdParam._m0[11u].x;
    float _312 = _305.y * cbMtdParam._m0[11u].y;
    float _313 = _305.z * cbMtdParam._m0[11u].z;
    vec4 _332 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _284) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _285) + cbTextureTilingScale._m0[5u].w));
    vec4 _351 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _391 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _393 = _391.x;
    float _405 = dot(vec4(_393, _391.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _422 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _351.x) * 2.0) - ((((_393 - _405) * cbMtdParam._m0[24u].z) + _405) * cbMtdParam._m0[23u].x))) + 1.0;
    float _4181 = isnan(0.0) ? _422 : (isnan(_422) ? 0.0 : max(_422, 0.0));
    float _423 = isnan(1.0) ? _4181 : (isnan(_4181) ? 1.0 : min(_4181, 1.0));
    float _430 = (_423 * ((_332.x * cbMtdParam._m0[12u].x) - _311)) + _311;
    float _431 = (_423 * ((_332.y * cbMtdParam._m0[12u].y) - _312)) + _312;
    float _432 = (_423 * ((_332.z * cbMtdParam._m0[12u].z) - _313)) + _313;
    vec4 _449 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _284) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _285) + cbTextureTilingScale._m0[3u].w));
    vec4 _469 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _471 = _469.x;
    float _481 = dot(vec4(_471, _469.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _495 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _351.y) * 2.0) - ((((_471 - _481) * cbMtdParam._m0[24u].z) + _481) * cbMtdParam._m0[20u].w))) + 1.0;
    float _4192 = isnan(0.0) ? _495 : (isnan(_495) ? 0.0 : max(_495, 0.0));
    float _496 = isnan(1.0) ? _4192 : (isnan(_4192) ? 1.0 : min(_4192, 1.0));
    float _503 = (_496 * ((_449.x * cbMtdParam._m0[13u].x) - _430)) + _430;
    float _504 = (_496 * ((_449.y * cbMtdParam._m0[13u].y) - _431)) + _431;
    float _505 = (_496 * ((_449.z * cbMtdParam._m0[13u].z) - _432)) + _432;
    vec4 _523 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_9, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[24u].x * _284) + cbTextureTilingScale._m0[24u].z, (cbTextureTilingScale._m0[24u].y * _285) + cbTextureTilingScale._m0[24u].w));
    vec4 _540 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[25u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _542 = _540.x;
    float _552 = dot(vec4(_542, _540.yzw), vec4(cbMtdParam._m0[30u].w, cbMtdParam._m0[31u].xy, 0.0));
    float _564 = ((cbMtdParam._m0[25u].x * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.z) - _351.z) * 2.0) - ((((_542 - _552) * cbMtdParam._m0[24u].z) + _552) * cbMtdParam._m0[20u].z))) + 1.0;
    float _4203 = isnan(0.0) ? _564 : (isnan(_564) ? 0.0 : max(_564, 0.0));
    float _565 = isnan(1.0) ? _4203 : (isnan(_4203) ? 1.0 : min(_4203, 1.0));
    float _572 = (_565 * ((_523.x * cbMtdParam._m0[14u].x) - _503)) + _503;
    float _573 = (_565 * ((_523.y * cbMtdParam._m0[14u].y) - _504)) + _504;
    float _574 = (_565 * ((_523.z * cbMtdParam._m0[14u].z) - _505)) + _505;
    vec4 _592 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _284) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _285) + cbTextureTilingScale._m0[14u].w));
    vec4 _612 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _284) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _285) + cbTextureTilingScale._m0[4u].w));
    vec4 _629 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _631 = _629.x;
    float _632 = _629.y;
    float _633 = _629.z;
    float _640 = ((_612.x - _631) * _423) + _631;
    float _641 = ((_612.y - _632) * _423) + _632;
    float _642 = ((_612.z - _633) * _423) + _633;
    vec4 _654 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _284) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _285) + cbTextureTilingScale._m0[2u].w));
    float _665 = ((_654.x - _640) * _496) + _640;
    float _666 = ((_654.y - _641) * _496) + _641;
    float _667 = ((_654.z - _642) * _496) + _642;
    vec4 _679 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[23u].x * _284) + cbTextureTilingScale._m0[23u].z, (cbTextureTilingScale._m0[23u].y * _285) + cbTextureTilingScale._m0[23u].w));
    float _692 = ((_679.z - _667) * _565) + _667;
    float _695 = ((((_679.x - _665) * _565) + _665) * 2.0) + (-1.0);
    float _697 = ((((_679.y - _666) * _565) + _666) * 2.0) + (-1.0);
    float _698 = dot(vec2(_695, _697), vec2(_695, _697));
    float _4214 = isnan(0.0) ? _698 : (isnan(_698) ? 0.0 : max(_698, 0.0));
    float _703 = sqrt(1.0 - (isnan(1.0) ? _4214 : (isnan(_4214) ? 1.0 : min(_4214, 1.0))));
    vec4 _717 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _729 = (((_717.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _695;
    float _730 = (((_717.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _697;
    float _733 = fma(_703, _253, fma(_730, _260, _729 * _246));
    float _736 = fma(_703, _254, fma(_730, _261, _729 * _247));
    float _739 = fma(_703, _255, fma(_730, _262, _729 * _248));
    float _743 = inversesqrt(dot(vec3(_733, _736, _739), vec3(_733, _736, _739)));
    vec4 _770 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _284) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _285) + cbTextureTilingScale._m0[11u].w));
    float _772 = _770.x;
    float _773 = 1.0 - _772;
    float _779 = (cbMtdParam._m0[19u].x + dot(vec4(_743 * _733, _743 * _736, _743 * _739, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_772 - _773) * cbMtdParam._m0[24u].w) + _773) * cbMtdParam._m0[21u].z);
    float _4225 = isnan(0.0) ? _779 : (isnan(_779) ? 0.0 : max(_779, 0.0));
    float _780 = isnan(1.0) ? _4225 : (isnan(_4225) ? 1.0 : min(_4225, 1.0));
    float _782 = (-0.0) - cbMtdParam._m0[24u].x;
    float _784 = isnan(0.0) ? _782 : (isnan(_782) ? 0.0 : max(_782, 0.0));
    float _785 = isnan(1.0) ? _784 : (isnan(_784) ? 1.0 : min(_784, 1.0));
    float _792 = _780 - ((_780 * TEXCOORD_8.x) * _785);
    float _793 = _780 - ((_780 * TEXCOORD_8.y) * _785);
    float _794 = _780 - ((_780 * TEXCOORD_8.z) * _785);
    float _801 = (_792 * ((_592.x * cbMtdParam._m0[18u].x) - _572)) + _572;
    float _802 = (_793 * ((_592.y * cbMtdParam._m0[18u].y) - _573)) + _573;
    float _803 = (_794 * ((_592.z * cbMtdParam._m0[18u].z) - _574)) + _574;
    vec4 _815 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _284) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _285) + cbTextureTilingScale._m0[19u].w));
    float _817 = _815.x;
    float _818 = 1.0 - _817;
    float _846 = (TEXCOORD_8.x - ((cbMtdParam._m0[22u].w * (1.0 - TEXCOORD_8.x)) * ((((_817 - _818) * cbMtdParam._m0[24u].y) + _818) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _4246 = isnan(0.0) ? _846 : (isnan(_846) ? 0.0 : max(_846, 0.0));
    float _847 = isnan(1.0) ? _4246 : (isnan(_4246) ? 1.0 : min(_4246, 1.0));
    float _855 = ((((cbMtdParam._m0[10u].x - _801) * TEXCOORD_8.x) * cbMtdParam._m0[23u].w) * _847) + _801;
    float _856 = ((((cbMtdParam._m0[10u].y - _802) * TEXCOORD_8.y) * cbMtdParam._m0[23u].w) * _847) + _802;
    float _857 = (((cbMtdParam._m0[23u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _803)) * _847) + _803;
    float _861 = (cbMtdParam._m0[19u].w * (_717.z - _692)) + _692;
    vec4 _875 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _284) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _285) + cbTextureTilingScale._m0[15u].w));
    float _882 = (_875.x * 2.0) + (-1.0);
    float _883 = (_875.y * 2.0) + (-1.0);
    float _884 = dot(vec2(_882, _883), vec2(_882, _883));
    float _4257 = isnan(0.0) ? _884 : (isnan(_884) ? 0.0 : max(_884, 0.0));
    float _892 = ((_875.z - _861) * _792) + _861;
    float _895 = ((cbMtdParam._m0[23u].y - _892) * _847) + _892;
    vec4 _914 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _284) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _285) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _920 = (_914.x * 2.0) + (-1.0);
    float _921 = (_914.y * 2.0) + (-1.0);
    float _922 = dot(vec2(_920, _921), vec2(_920, _921));
    float _4268 = isnan(0.0) ? _922 : (isnan(_922) ? 0.0 : max(_922, 0.0));
    float _937 = ((sqrt(1.0 - (isnan(1.0) ? _4257 : (isnan(_4257) ? 1.0 : min(_4257, 1.0)))) - _703) * _794) + _703;
    float _940 = (((_882 - _729) * _792) + _729) + (cbMtdParam._m0[21u].x * _729);
    float _941 = (((_883 - _730) * _793) + _730) + (cbMtdParam._m0[21u].x * _730);
    float _952 = (((_920 - _940) + (_940 * cbMtdParam._m0[22u].z)) * _847) + _940;
    float _953 = (((_921 - _941) + (_941 * cbMtdParam._m0[22u].z)) * _847) + _941;
    float _954 = (_847 * (sqrt(1.0 - (isnan(1.0) ? _4268 : (isnan(_4268) ? 1.0 : min(_4268, 1.0)))) - _937)) + _937;
    float _956 = cbMtdParam._m0[22u].x + _717.w;
    float _959 = fma(_954, _253, fma(_953, _260, _952 * _246));
    float _962 = fma(_954, _254, fma(_953, _261, _952 * _247));
    float _965 = fma(_954, _255, fma(_953, _262, _952 * _248));
    float _969 = inversesqrt(dot(vec3(_959, _962, _965), vec3(_959, _962, _965)));
    float _970 = _969 * _959;
    float _971 = _969 * _962;
    float _972 = _969 * _965;
    float _4279 = isnan(0.0) ? _895 : (isnan(_895) ? 0.0 : max(_895, 0.0));
    float _973 = isnan(1.0) ? _4279 : (isnan(_4279) ? 1.0 : min(_4279, 1.0));
    float _4290 = isnan(0.0) ? _956 : (isnan(_956) ? 0.0 : max(_956, 0.0));
    float _4301 = isnan(0.0) ? _855 : (isnan(_855) ? 0.0 : max(_855, 0.0));
    float _4312 = isnan(0.0) ? _856 : (isnan(_856) ? 0.0 : max(_856, 0.0));
    float _4323 = isnan(0.0) ? _857 : (isnan(_857) ? 0.0 : max(_857, 0.0));
    float _991 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _1032 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _1042 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _1032);
    float _1043 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _1032);
    float _1044 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _1032);
    float _1048 = inversesqrt(dot(vec3(_1042, _1043, _1044), vec3(_1042, _1043, _1044)));
    float _1049 = _1042 * _1048;
    float _1050 = _1043 * _1048;
    float _1051 = _1044 * _1048;
    vec4 _1056 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _1058 = _1056.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1212 = sqrt(((_1042 * _1042) + (_1043 * _1043)) + (_1044 * _1044));
        float _1218 = (cbMatDynParam._m0[5u].x * _1212) + cbMatDynParam._m0[5u].y;
        float _4334 = isnan(0.0) ? _1218 : (isnan(_1218) ? 0.0 : max(_1218, 0.0));
        float _1219 = isnan(1.0) ? _4334 : (isnan(_4334) ? 1.0 : min(_4334, 1.0));
        float _1223 = (cbMatDynParam._m0[5u].z * _1212) + cbMatDynParam._m0[5u].w;
        float _4345 = isnan(0.0) ? _1223 : (isnan(_1223) ? 0.0 : max(_1223, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4345 : (isnan(_4345) ? 1.0 : min(_4345, 1.0))) - _1219)) + _1219) < ((_1058 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _1069 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1070 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1088 = fma(_972, cbSceneParam._m0[5u].z, fma(_971, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _970));
    float _1091 = fma(_972, cbSceneParam._m0[6u].z, fma(_971, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _970));
    float _1094 = fma(_972, cbSceneParam._m0[7u].z, fma(_971, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _970));
    uint _1107 = _265 + 9u;
    uint _1108 = _1107 + uint(cbMatDynParam._m0[0u].w);
    float _1114 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4301 : (isnan(_4301) ? 1.0 : min(_4301, 1.0)))) * cbInstanceData._m0[_1108].x;
    float _1115 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4312 : (isnan(_4312) ? 1.0 : min(_4312, 1.0)))) * cbInstanceData._m0[_1108].y;
    float _1116 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4323 : (isnan(_4323) ? 1.0 : min(_4323, 1.0)))) * cbInstanceData._m0[_1108].z;
    float _4356 = isnan(0.0) ? _1114 : (isnan(_1114) ? 0.0 : max(_1114, 0.0));
    float _1117 = isnan(1.0) ? _4356 : (isnan(_4356) ? 1.0 : min(_4356, 1.0));
    float _4367 = isnan(0.0) ? _1115 : (isnan(_1115) ? 0.0 : max(_1115, 0.0));
    float _1118 = isnan(1.0) ? _4367 : (isnan(_4367) ? 1.0 : min(_4367, 1.0));
    float _4378 = isnan(0.0) ? _1116 : (isnan(_1116) ? 0.0 : max(_1116, 0.0));
    float _1119 = isnan(1.0) ? _4378 : (isnan(_4378) ? 1.0 : min(_4378, 1.0));
    vec4 _1128 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1069, cbSceneParam._m0[86u].y * _1070));
    float _1132 = ((isnan(1.0) ? _4290 : (isnan(_4290) ? 1.0 : min(_4290, 1.0))) * TEXCOORD_5.w) * _1128.x;
    float _1133 = dot(vec3(_970, _971, _972), vec3(_1049, _1050, _1051));
    float _1136 = _1133 * 2.0;
    float _1140 = (_1136 * _970) - _1049;
    float _1141 = (_1136 * _971) - _1050;
    float _1142 = (_1136 * _972) - _1051;
    float _1146 = abs(dot(vec3(_1049, _1050, _1051), vec3(_970, _971, _972)));
    float _4389 = isnan(0.0) ? _1146 : (isnan(_1146) ? 0.0 : max(_1146, 0.0));
    float _1148 = sqrt(_973);
    float _1161 = exp2((_1148 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4389 : (isnan(_4389) ? 1.0 : min(_4389, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1148 * 3.0));
    float _1193 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1197 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1201 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1530;
    float _1532;
    float _1533;
    float _1534;
    float _1535;
    float _1536;
    float _1537;
    float _1538;
    float _1539;
    float _1540;
    float _1541;
    float _1542;
    float _1543;
    float _1544;
    float _1545;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1255 = fma(_1201, cbModelParam._m0[26u].z, fma(_1197, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1193));
        float _1259 = fma(_1201, cbModelParam._m0[27u].z, fma(_1197, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1193));
        float _1263 = fma(_1201, cbModelParam._m0[28u].z, fma(_1197, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1193));
        float _1288 = _1193 + _970;
        float _1289 = _1197 + _971;
        float _1290 = _1201 + _972;
        float _1300 = fma(_1290, cbModelParam._m0[26u].z, fma(_1289, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1288)) - _1255;
        float _1301 = fma(_1290, cbModelParam._m0[27u].z, fma(_1289, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1288)) - _1259;
        float _1302 = fma(_1290, cbModelParam._m0[28u].z, fma(_1289, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1288)) - _1263;
        float _1306 = inversesqrt(dot(vec3(_1300, _1301, _1302), vec3(_1300, _1301, _1302)));
        float _1319 = ((_1306 * _1300) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1255 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1320 = ((_1306 * _1301) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1259 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1321 = ((_1306 * _1302) / cbModelParam._m0[34u].z) + ((((((_1263 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1324 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1319, _1320, _1321), 0.0);
        vec4 _1331 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1319, _1320, _1321), 0.0);
        vec4 _1338 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1319, _1320, _1321), 0.0);
        vec4 _1345 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1319, _1320, _1321), 0.0);
        float _1358 = exp2((_1324.w + (-0.5)) * 20.0) * 2.0;
        float _1359 = _1358 * (_1324.x + (-0.5));
        float _1360 = _1358 * (_1324.y + (-0.5));
        float _1361 = _1358 * (_1324.z + (-0.5));
        float _1368 = exp2((_1331.w + (-0.5)) * 20.0) * 2.0;
        float _1369 = _1368 * (_1331.x + (-0.5));
        float _1370 = _1368 * (_1331.y + (-0.5));
        float _1371 = _1368 * (_1331.z + (-0.5));
        float _1378 = exp2((_1338.w + (-0.5)) * 20.0) * 2.0;
        float _1379 = _1378 * (_1338.x + (-0.5));
        float _1380 = _1378 * (_1338.y + (-0.5));
        float _1381 = _1378 * (_1338.z + (-0.5));
        float _1388 = exp2((_1345.w + (-0.5)) * 20.0) * 2.0;
        float _1389 = _1388 * (_1345.x + (-0.5));
        float _1390 = _1388 * (_1345.y + (-0.5));
        float _1391 = _1388 * (_1345.z + (-0.5));
        float _1392 = isnan(0.0) ? _1389 : (isnan(_1389) ? 0.0 : max(_1389, 0.0));
        float _1393 = isnan(0.0) ? _1390 : (isnan(_1390) ? 0.0 : max(_1390, 0.0));
        float _1394 = isnan(0.0) ? _1391 : (isnan(_1391) ? 0.0 : max(_1391, 0.0));
        float _1395 = _1359 * 0.5;
        float _1396 = _1369 * 0.5;
        float _1397 = _1379 * 0.5;
        float _1398 = dot(vec3(_1395, _1396, _1397), vec3(_1395, _1396, _1397));
        float _1403 = (_1398 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1398);
        float _1412 = (dot(vec3(_970, _971, _972), vec3(_1403 * _1395, _1403 * _1396, _1403 * _1397)) + 1.0) * 0.5;
        float _4415 = isnan(0.0) ? _1412 : (isnan(_1412) ? 0.0 : max(_1412, 0.0));
        float _1422 = sqrt(((_1396 * _1396) + (_1395 * _1395)) + (_1397 * _1397)) / (_1392 + 9.9999997473787516355514526367188e-06);
        float _4426 = isnan(0.0) ? _1422 : (isnan(_1422) ? 0.0 : max(_1422, 0.0));
        float _1423 = isnan(1.0) ? _4426 : (isnan(_4426) ? 1.0 : min(_4426, 1.0));
        float _1424 = _1423 * 2.0;
        float _1428 = (1.0 - _1423) / (_1423 + 1.0);
        float _4437 = isnan(0.0) ? _1428 : (isnan(_1428) ? 0.0 : max(_1428, 0.0));
        float _1429 = isnan(1.0) ? _4437 : (isnan(_4437) ? 1.0 : min(_4437, 1.0));
        float _1438 = ((((1.0 - _1429) * (_1424 + 2.0)) * exp2(log2(isnan(1.0) ? _4415 : (isnan(_4415) ? 1.0 : min(_4415, 1.0))) * (_1424 + 1.0))) + _1429) * _1392;
        float _1439 = _1360 * 0.5;
        float _1440 = _1370 * 0.5;
        float _1441 = _1380 * 0.5;
        float _1442 = dot(vec3(_1439, _1440, _1441), vec3(_1439, _1440, _1441));
        float _1447 = (_1442 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1442);
        float _1455 = (dot(vec3(_970, _971, _972), vec3(_1447 * _1439, _1447 * _1440, _1447 * _1441)) + 1.0) * 0.5;
        float _4448 = isnan(0.0) ? _1455 : (isnan(_1455) ? 0.0 : max(_1455, 0.0));
        float _1464 = sqrt(((_1440 * _1440) + (_1439 * _1439)) + (_1441 * _1441)) / (_1393 + 9.9999997473787516355514526367188e-06);
        float _4459 = isnan(0.0) ? _1464 : (isnan(_1464) ? 0.0 : max(_1464, 0.0));
        float _1465 = isnan(1.0) ? _4459 : (isnan(_4459) ? 1.0 : min(_4459, 1.0));
        float _1466 = _1465 * 2.0;
        float _1470 = (1.0 - _1465) / (_1465 + 1.0);
        float _4470 = isnan(0.0) ? _1470 : (isnan(_1470) ? 0.0 : max(_1470, 0.0));
        float _1471 = isnan(1.0) ? _4470 : (isnan(_4470) ? 1.0 : min(_4470, 1.0));
        float _1480 = ((((1.0 - _1471) * (_1466 + 2.0)) * exp2(log2(isnan(1.0) ? _4448 : (isnan(_4448) ? 1.0 : min(_4448, 1.0))) * (_1466 + 1.0))) + _1471) * _1393;
        float _1481 = _1361 * 0.5;
        float _1482 = _1371 * 0.5;
        float _1483 = _1381 * 0.5;
        float _1484 = dot(vec3(_1481, _1482, _1483), vec3(_1481, _1482, _1483));
        float _1489 = (_1484 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1484);
        float _1497 = (dot(vec3(_970, _971, _972), vec3(_1489 * _1481, _1489 * _1482, _1489 * _1483)) + 1.0) * 0.5;
        float _4481 = isnan(0.0) ? _1497 : (isnan(_1497) ? 0.0 : max(_1497, 0.0));
        float _1506 = sqrt(((_1482 * _1482) + (_1481 * _1481)) + (_1483 * _1483)) / (_1394 + 9.9999997473787516355514526367188e-06);
        float _4492 = isnan(0.0) ? _1506 : (isnan(_1506) ? 0.0 : max(_1506, 0.0));
        float _1507 = isnan(1.0) ? _4492 : (isnan(_4492) ? 1.0 : min(_4492, 1.0));
        float _1508 = _1507 * 2.0;
        float _1512 = (1.0 - _1507) / (_1507 + 1.0);
        float _4503 = isnan(0.0) ? _1512 : (isnan(_1512) ? 0.0 : max(_1512, 0.0));
        float _1513 = isnan(1.0) ? _4503 : (isnan(_4503) ? 1.0 : min(_4503, 1.0));
        float _1522 = ((((1.0 - _1513) * (_1508 + 2.0)) * exp2(log2(isnan(1.0) ? _4481 : (isnan(_4481) ? 1.0 : min(_4481, 1.0))) * (_1508 + 1.0))) + _1513) * _1394;
        _1530 = _1361;
        _1532 = _1360;
        _1533 = _1359;
        _1534 = _1371;
        _1535 = _1370;
        _1536 = _1369;
        _1537 = _1381;
        _1538 = _1380;
        _1539 = _1379;
        _1540 = _1394;
        _1541 = _1393;
        _1542 = _1392;
        _1543 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1438 : (isnan(_1438) ? 0.0 : max(_1438, 0.0)));
        _1544 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1480 : (isnan(_1480) ? 0.0 : max(_1480, 0.0)));
        _1545 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1522 : (isnan(_1522) ? 0.0 : max(_1522, 0.0)));
    }
    else
    {
        _1530 = _1531;
        _1532 = _1531;
        _1533 = _1531;
        _1534 = _1531;
        _1535 = _1531;
        _1536 = _1531;
        _1537 = _1531;
        _1538 = _1531;
        _1539 = _1531;
        _1540 = _1531;
        _1541 = _1531;
        _1542 = _1531;
        _1543 = 0.0;
        _1544 = 0.0;
        _1545 = 0.0;
    }
    float _1840;
    float _1841;
    float _1842;
    float _1843;
    float _1844;
    float _1845;
    float _1846;
    float _1847;
    float _1848;
    float _1849;
    float _1850;
    float _1851;
    float _1852;
    float _1853;
    float _1854;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1571 = fma(_1201, cbModelParam._m0[30u].z, fma(_1197, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1193));
        float _1575 = fma(_1201, cbModelParam._m0[31u].z, fma(_1197, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1193));
        float _1579 = fma(_1201, cbModelParam._m0[32u].z, fma(_1197, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1193));
        float _1602 = _1193 + _970;
        float _1603 = _1197 + _971;
        float _1604 = _1201 + _972;
        float _1614 = fma(_1604, cbModelParam._m0[30u].z, fma(_1603, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1602)) - _1571;
        float _1615 = fma(_1604, cbModelParam._m0[31u].z, fma(_1603, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1602)) - _1575;
        float _1616 = fma(_1604, cbModelParam._m0[32u].z, fma(_1603, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1602)) - _1579;
        float _1620 = inversesqrt(dot(vec3(_1614, _1615, _1616), vec3(_1614, _1615, _1616)));
        float _1633 = ((_1620 * _1614) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1571 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1634 = ((_1620 * _1615) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1575 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1635 = ((_1620 * _1616) / cbModelParam._m0[35u].z) + ((((((_1579 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1637 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1633, _1634, _1635), 0.0);
        vec4 _1644 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1633, _1634, _1635), 0.0);
        vec4 _1651 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1633, _1634, _1635), 0.0);
        vec4 _1658 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1633, _1634, _1635), 0.0);
        float _1670 = exp2((_1637.w + (-0.5)) * 20.0) * 2.0;
        float _1671 = _1670 * (_1637.x + (-0.5));
        float _1672 = _1670 * (_1637.y + (-0.5));
        float _1673 = _1670 * (_1637.z + (-0.5));
        float _1680 = exp2((_1644.w + (-0.5)) * 20.0) * 2.0;
        float _1681 = _1680 * (_1644.x + (-0.5));
        float _1682 = _1680 * (_1644.y + (-0.5));
        float _1683 = _1680 * (_1644.z + (-0.5));
        float _1690 = exp2((_1651.w + (-0.5)) * 20.0) * 2.0;
        float _1691 = _1690 * (_1651.x + (-0.5));
        float _1692 = _1690 * (_1651.y + (-0.5));
        float _1693 = _1690 * (_1651.z + (-0.5));
        float _1700 = exp2((_1658.w + (-0.5)) * 20.0) * 2.0;
        float _1701 = _1700 * (_1658.x + (-0.5));
        float _1702 = _1700 * (_1658.y + (-0.5));
        float _1703 = _1700 * (_1658.z + (-0.5));
        float _1704 = isnan(0.0) ? _1701 : (isnan(_1701) ? 0.0 : max(_1701, 0.0));
        float _1705 = isnan(0.0) ? _1702 : (isnan(_1702) ? 0.0 : max(_1702, 0.0));
        float _1706 = isnan(0.0) ? _1703 : (isnan(_1703) ? 0.0 : max(_1703, 0.0));
        float _1707 = _1671 * 0.5;
        float _1708 = _1681 * 0.5;
        float _1709 = _1691 * 0.5;
        float _1710 = dot(vec3(_1707, _1708, _1709), vec3(_1707, _1708, _1709));
        float _1715 = (_1710 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1710);
        float _1723 = (dot(vec3(_970, _971, _972), vec3(_1715 * _1707, _1715 * _1708, _1715 * _1709)) + 1.0) * 0.5;
        float _4544 = isnan(0.0) ? _1723 : (isnan(_1723) ? 0.0 : max(_1723, 0.0));
        float _1732 = sqrt(((_1708 * _1708) + (_1707 * _1707)) + (_1709 * _1709)) / (_1704 + 9.9999997473787516355514526367188e-06);
        float _4555 = isnan(0.0) ? _1732 : (isnan(_1732) ? 0.0 : max(_1732, 0.0));
        float _1733 = isnan(1.0) ? _4555 : (isnan(_4555) ? 1.0 : min(_4555, 1.0));
        float _1734 = _1733 * 2.0;
        float _1738 = (1.0 - _1733) / (_1733 + 1.0);
        float _4566 = isnan(0.0) ? _1738 : (isnan(_1738) ? 0.0 : max(_1738, 0.0));
        float _1739 = isnan(1.0) ? _4566 : (isnan(_4566) ? 1.0 : min(_4566, 1.0));
        float _1748 = ((((1.0 - _1739) * (_1734 + 2.0)) * exp2(log2(isnan(1.0) ? _4544 : (isnan(_4544) ? 1.0 : min(_4544, 1.0))) * (_1734 + 1.0))) + _1739) * _1704;
        float _1749 = _1672 * 0.5;
        float _1750 = _1682 * 0.5;
        float _1751 = _1692 * 0.5;
        float _1752 = dot(vec3(_1749, _1750, _1751), vec3(_1749, _1750, _1751));
        float _1757 = (_1752 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1752);
        float _1765 = (dot(vec3(_970, _971, _972), vec3(_1757 * _1749, _1757 * _1750, _1757 * _1751)) + 1.0) * 0.5;
        float _4577 = isnan(0.0) ? _1765 : (isnan(_1765) ? 0.0 : max(_1765, 0.0));
        float _1774 = sqrt(((_1750 * _1750) + (_1749 * _1749)) + (_1751 * _1751)) / (_1705 + 9.9999997473787516355514526367188e-06);
        float _4588 = isnan(0.0) ? _1774 : (isnan(_1774) ? 0.0 : max(_1774, 0.0));
        float _1775 = isnan(1.0) ? _4588 : (isnan(_4588) ? 1.0 : min(_4588, 1.0));
        float _1776 = _1775 * 2.0;
        float _1780 = (1.0 - _1775) / (_1775 + 1.0);
        float _4599 = isnan(0.0) ? _1780 : (isnan(_1780) ? 0.0 : max(_1780, 0.0));
        float _1781 = isnan(1.0) ? _4599 : (isnan(_4599) ? 1.0 : min(_4599, 1.0));
        float _1790 = ((((1.0 - _1781) * (_1776 + 2.0)) * exp2(log2(isnan(1.0) ? _4577 : (isnan(_4577) ? 1.0 : min(_4577, 1.0))) * (_1776 + 1.0))) + _1781) * _1705;
        float _1791 = _1673 * 0.5;
        float _1792 = _1683 * 0.5;
        float _1793 = _1693 * 0.5;
        float _1794 = dot(vec3(_1791, _1792, _1793), vec3(_1791, _1792, _1793));
        float _1799 = (_1794 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1794);
        float _1807 = (dot(vec3(_970, _971, _972), vec3(_1799 * _1791, _1799 * _1792, _1799 * _1793)) + 1.0) * 0.5;
        float _4610 = isnan(0.0) ? _1807 : (isnan(_1807) ? 0.0 : max(_1807, 0.0));
        float _1816 = sqrt(((_1792 * _1792) + (_1791 * _1791)) + (_1793 * _1793)) / (_1706 + 9.9999997473787516355514526367188e-06);
        float _4621 = isnan(0.0) ? _1816 : (isnan(_1816) ? 0.0 : max(_1816, 0.0));
        float _1817 = isnan(1.0) ? _4621 : (isnan(_4621) ? 1.0 : min(_4621, 1.0));
        float _1818 = _1817 * 2.0;
        float _1822 = (1.0 - _1817) / (_1817 + 1.0);
        float _4632 = isnan(0.0) ? _1822 : (isnan(_1822) ? 0.0 : max(_1822, 0.0));
        float _1823 = isnan(1.0) ? _4632 : (isnan(_4632) ? 1.0 : min(_4632, 1.0));
        float _1832 = ((((1.0 - _1823) * (_1818 + 2.0)) * exp2(log2(isnan(1.0) ? _4610 : (isnan(_4610) ? 1.0 : min(_4610, 1.0))) * (_1818 + 1.0))) + _1823) * _1706;
        _1840 = _1673;
        _1841 = _1672;
        _1842 = _1671;
        _1843 = _1683;
        _1844 = _1682;
        _1845 = _1681;
        _1846 = _1693;
        _1847 = _1692;
        _1848 = _1691;
        _1849 = _1706;
        _1850 = _1705;
        _1851 = _1704;
        _1852 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1748 : (isnan(_1748) ? 0.0 : max(_1748, 0.0)));
        _1853 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1790 : (isnan(_1790) ? 0.0 : max(_1790, 0.0)));
        _1854 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1832 : (isnan(_1832) ? 0.0 : max(_1832, 0.0)));
    }
    else
    {
        _1840 = _1531;
        _1841 = _1531;
        _1842 = _1531;
        _1843 = _1531;
        _1844 = _1531;
        _1845 = _1531;
        _1846 = _1531;
        _1847 = _1531;
        _1848 = _1531;
        _1849 = _1531;
        _1850 = _1531;
        _1851 = _1531;
        _1852 = 0.0;
        _1853 = 0.0;
        _1854 = 0.0;
    }
    float _1864 = (cbModelParam._m0[1u].x * (_1852 - _1543)) + _1543;
    float _1865 = (cbModelParam._m0[1u].x * (_1853 - _1544)) + _1544;
    float _1866 = (cbModelParam._m0[1u].x * (_1854 - _1545)) + _1545;
    float _1887 = fma(_1866, cbSceneParam._m0[89u].z, fma(_1865, cbSceneParam._m0[89u].y, _1864 * cbSceneParam._m0[89u].x));
    float _1890 = fma(_1866, cbSceneParam._m0[90u].z, fma(_1865, cbSceneParam._m0[90u].y, _1864 * cbSceneParam._m0[90u].x));
    float _1893 = fma(_1866, cbSceneParam._m0[91u].z, fma(_1865, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1864));
    float _1908 = _1140 * 0.5;
    float _1909 = _1141 * 0.5;
    float _1910 = _1142 * 0.5;
    float _1911 = dot(vec4(_1908, _1909, _1910, 1.0), vec4(_1842, _1845, _1848, _1851));
    float _1914 = dot(vec4(_1908, _1909, _1910, 1.0), vec4(_1841, _1844, _1847, _1850));
    float _1917 = dot(vec4(_1908, _1909, _1910, 1.0), vec4(_1840, _1843, _1846, _1849));
    float _1951;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1924 = dot(vec4(_1908, _1909, _1910, 1.0), vec4(_1530, _1534, _1537, _1540));
        float _1928 = dot(vec4(_1908, _1909, _1910, 1.0), vec4(_1532, _1535, _1538, _1541));
        float _1932 = dot(vec4(_1908, _1909, _1910, 1.0), vec4(_1533, _1536, _1539, _1542));
        float _1939 = dot(vec4(cbModelParam._m0[39u]), vec4(_1908, _1909, _1910, 1.0));
        _1951 = dot(vec3(isnan(0.0) ? _1932 : (isnan(_1932) ? 0.0 : max(_1932, 0.0)), isnan(0.0) ? _1928 : (isnan(_1928) ? 0.0 : max(_1928, 0.0)), isnan(0.0) ? _1924 : (isnan(_1924) ? 0.0 : max(_1924, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1939) ? 0.0 : (isnan(0.0) ? _1939 : max(0.0, _1939))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1951 = 1.0;
    }
    float _1962;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1953 = dot(vec4(cbModelParam._m0[40u]), vec4(_1908, _1909, _1910, 1.0));
        _1962 = dot(vec3(isnan(0.0) ? _1911 : (isnan(_1911) ? 0.0 : max(_1911, 0.0)), isnan(0.0) ? _1914 : (isnan(_1914) ? 0.0 : max(_1914, 0.0)), isnan(0.0) ? _1917 : (isnan(_1917) ? 0.0 : max(_1917, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1953) ? 0.0 : (isnan(0.0) ? _1953 : max(0.0, _1953))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1962 = 1.0;
    }
    float _1966 = (_1962 * cbModelParam._m0[1u].x) + (_1951 * (1.0 - cbModelParam._m0[1u].x));
    float _1976 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _973);
    float _1977 = isnan(_1976) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1976 : min(cbModelParam._m0[25u].z, _1976));
    float _2057;
    float _2059;
    float _2061;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _2024 = fma(_1201, cbModelParam._m0[13u].z, fma(_1197, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1193)) + cbModelParam._m0[13u].w;
        float _2028 = fma(_1201, cbModelParam._m0[14u].z, fma(_1197, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1193)) + cbModelParam._m0[14u].w;
        float _2032 = fma(_1201, cbModelParam._m0[15u].z, fma(_1197, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1193)) + cbModelParam._m0[15u].w;
        float _2035 = fma(_1142, cbModelParam._m0[13u].z, fma(_1141, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1140));
        float _2038 = fma(_1142, cbModelParam._m0[14u].z, fma(_1141, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1140));
        float _2041 = fma(_1142, cbModelParam._m0[15u].z, fma(_1141, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1140));
        float _2069;
        if (_2035 > 0.0)
        {
            _2069 = abs((1.0 - _2024) / _2035);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_2035 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_2024 + 1.0) / _2035);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _2069 = frontier_phi_17_15_ladder;
        }
        float _2238;
        if (_2038 > 0.0)
        {
            _2238 = abs((1.0 - _2028) / _2038);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_2038 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_2028 + 1.0) / _2038);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2238 = frontier_phi_26_22_ladder;
        }
        float _2533;
        if (_2041 > 0.0)
        {
            _2533 = abs((1.0 - _2032) / _2041);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_2041 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_2032 + 1.0) / _2041);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2533 = frontier_phi_38_33_ladder;
        }
        float _2535 = isnan(_2238) ? _2069 : (isnan(_2069) ? _2238 : min(_2069, _2238));
        float _2536 = isnan(_2533) ? _2535 : (isnan(_2535) ? _2533 : min(_2535, _2533));
        float _2540 = (_2536 * _2035) + _2024;
        float _2541 = (_2536 * _2038) + _2028;
        float _2542 = (_2536 * _2041) + _2032;
        float _2543 = _2536 * 9.9999997473787516355514526367188e-05;
        float _2545 = (-1.0) - _2543;
        float _2547 = _2543 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2542 > _2547) || ((_2542 < _2545) || ((_2541 > _2547) || ((_2541 < _2545) || ((_2540 < _2545) || (_2540 > _2547))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2687 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2542, cbModelParam._m0[9u].z, fma(_2541, cbModelParam._m0[9u].y, _2540 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2542, cbModelParam._m0[10u].z, fma(_2541, cbModelParam._m0[10u].y, _2540 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2542, cbModelParam._m0[11u].z, fma(_2541, cbModelParam._m0[11u].y, _2540 * cbModelParam._m0[11u].x))), _1977);
            frontier_phi_16_38_ladder = _2687.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2687.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2687.x * cbModelParam._m0[1u].y;
        }
        _2057 = frontier_phi_16_38_ladder_2;
        _2059 = frontier_phi_16_38_ladder_1;
        _2061 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _2045 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1140, _1141, _1142), _1977);
        _2057 = _2045.x * cbModelParam._m0[1u].y;
        _2059 = _2045.y * cbModelParam._m0[1u].y;
        _2061 = _2045.z * cbModelParam._m0[1u].y;
    }
    float _2065 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _973);
    float _2066 = isnan(_2065) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2065 : min(cbModelParam._m0[25u].w, _2065));
    float _2155;
    float _2157;
    float _2159;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2119 = fma(_1201, cbModelParam._m0[21u].z, fma(_1197, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1193)) + cbModelParam._m0[21u].w;
        float _2123 = fma(_1201, cbModelParam._m0[22u].z, fma(_1197, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1193)) + cbModelParam._m0[22u].w;
        float _2127 = fma(_1201, cbModelParam._m0[23u].z, fma(_1197, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1193)) + cbModelParam._m0[23u].w;
        float _2130 = fma(_1142, cbModelParam._m0[21u].z, fma(_1141, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1140));
        float _2133 = fma(_1142, cbModelParam._m0[22u].z, fma(_1141, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1140));
        float _2136 = fma(_1142, cbModelParam._m0[23u].z, fma(_1141, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1140));
        float _2243;
        if (_2130 > 0.0)
        {
            _2243 = abs((1.0 - _2119) / _2130);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_2130 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_2119 + 1.0) / _2130);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2243 = frontier_phi_28_24_ladder;
        }
        float _2560;
        if (_2133 > 0.0)
        {
            _2560 = abs((1.0 - _2123) / _2133);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_2133 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_2123 + 1.0) / _2133);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2560 = frontier_phi_40_35_ladder;
        }
        float _2887;
        if (_2136 > 0.0)
        {
            _2887 = abs((1.0 - _2127) / _2136);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_2136 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_2127 + 1.0) / _2136);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _2887 = frontier_phi_50_47_ladder;
        }
        float _2889 = isnan(_2560) ? _2243 : (isnan(_2243) ? _2560 : min(_2243, _2560));
        float _2890 = isnan(_2887) ? _2889 : (isnan(_2889) ? _2887 : min(_2889, _2887));
        float _2894 = (_2890 * _2130) + _2119;
        float _2895 = (_2890 * _2133) + _2123;
        float _2896 = (_2890 * _2136) + _2127;
        float _2897 = _2890 * 9.9999997473787516355514526367188e-05;
        float _2898 = (-1.0) - _2897;
        float _2900 = _2897 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_2896 > _2900) || ((_2896 < _2898) || ((_2895 > _2900) || ((_2895 < _2898) || ((_2894 < _2898) || (_2894 > _2900))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _3014 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2896, cbModelParam._m0[17u].z, fma(_2895, cbModelParam._m0[17u].y, _2894 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2896, cbModelParam._m0[18u].z, fma(_2895, cbModelParam._m0[18u].y, _2894 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2896, cbModelParam._m0[19u].z, fma(_2895, cbModelParam._m0[19u].y, _2894 * cbModelParam._m0[19u].x))), _2066);
            frontier_phi_25_50_ladder = _3014.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _3014.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _3014.x * cbModelParam._m0[1u].z;
        }
        _2155 = frontier_phi_25_50_ladder_2;
        _2157 = frontier_phi_25_50_ladder_1;
        _2159 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _2139 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1140, _1141, _1142), _2066);
        _2155 = _2139.x * cbModelParam._m0[1u].z;
        _2157 = _2139.y * cbModelParam._m0[1u].z;
        _2159 = _2139.z * cbModelParam._m0[1u].z;
    }
    float _2171 = ((((1.0 - _1161) * ((_1148 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_1161 * _1148)) * _1132;
    float _2172 = _2171 * ((cbModelParam._m0[1u].w * (_2155 - _2057)) + _2057);
    float _2173 = _2171 * ((cbModelParam._m0[1u].w * (_2157 - _2059)) + _2059);
    float _2174 = _2171 * ((cbModelParam._m0[1u].w * (_2159 - _2061)) + _2061);
    float _2177 = fma(_2174, cbSceneParam._m0[89u].z, fma(_2173, cbSceneParam._m0[89u].y, _2172 * cbSceneParam._m0[89u].x));
    float _2180 = fma(_2174, cbSceneParam._m0[90u].z, fma(_2173, cbSceneParam._m0[90u].y, _2172 * cbSceneParam._m0[90u].x));
    float _2183 = fma(_2174, cbSceneParam._m0[91u].z, fma(_2173, cbSceneParam._m0[91u].y, _2172 * cbSceneParam._m0[91u].x));
    float _2217 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2221 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2225 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2229 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2230 = _2217 / _2229;
    float _2231 = _2221 / _2229;
    float _2232 = _2225 / _2229;
    float _2379;
    float _2380;
    float _2381;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2259 = ((uint(_2232 > cbSceneParam._m0[59u].y) + uint(_2232 > cbSceneParam._m0[59u].x)) + uint(_2232 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2260 = _2259 + 43u;
        uint _2268 = _2259 + 44u;
        uint _2276 = _2259 + 45u;
        uint _2284 = _2259 + 46u;
        float _2295 = fma(_2229, cbSceneParam._m0[_2260].w, fma(_2225, cbSceneParam._m0[_2260].z, fma(_2221, cbSceneParam._m0[_2260].y, _2217 * cbSceneParam._m0[_2260].x)));
        float _2299 = fma(_2229, cbSceneParam._m0[_2268].w, fma(_2225, cbSceneParam._m0[_2268].z, fma(_2221, cbSceneParam._m0[_2268].y, _2217 * cbSceneParam._m0[_2268].x)));
        float _2307 = fma(_2229, cbSceneParam._m0[_2284].w, fma(_2225, cbSceneParam._m0[_2284].z, fma(_2221, cbSceneParam._m0[_2284].y, _2217 * cbSceneParam._m0[_2284].x)));
        float _2312 = cbSceneParam._m0[33u].z * _2307;
        float _2314 = cbSceneParam._m0[33u].w * _2307;
        float _2317 = fma(_2229, cbSceneParam._m0[_2276].w, fma(_2225, cbSceneParam._m0[_2276].z, fma(_2221, cbSceneParam._m0[_2276].y, _2217 * cbSceneParam._m0[_2276].x))) / _2307;
        float _2365 = (cbSceneParam._m0[33u].x - sqrt(((_2231 * _2231) + (_2230 * _2230)) + (_2232 * _2232))) * cbSceneParam._m0[33u].y;
        float _4758 = isnan(0.0) ? _2365 : (isnan(_2365) ? 0.0 : max(_2365, 0.0));
        float _2372 = (isnan(1.0) ? _4758 : (isnan(_4758) ? 1.0 : min(_4758, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2312 + _2295) / _2307, (_2314 + _2299) / _2307), _2317), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2314 + _2295) / _2307, (_2299 - _2312) / _2307), _2317), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2295 - _2312) / _2307, (_2299 - _2314) / _2307), _2317), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2295 - _2314) / _2307, (_2312 + _2299) / _2307), _2317), 0.0)).x), vec4(0.25)));
        _2379 = 1.0 - (_2372 * cbSceneParam._m0[34u].x);
        _2380 = 1.0 - (_2372 * cbSceneParam._m0[34u].y);
        _2381 = 1.0 - (_2372 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2379 = 1.0;
        _2380 = 1.0;
        _2381 = 1.0;
    }
    float _2445;
    float _2447;
    float _2449;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2433 = fma(_2229, cbSceneParam._m0[63u].w, fma(_2225, cbSceneParam._m0[63u].z, fma(_2221, cbSceneParam._m0[63u].y, _2217 * cbSceneParam._m0[63u].x)));
        float _2434 = fma(_2229, cbSceneParam._m0[60u].w, fma(_2225, cbSceneParam._m0[60u].z, fma(_2221, cbSceneParam._m0[60u].y, _2217 * cbSceneParam._m0[60u].x))) / _2433;
        float _2435 = fma(_2229, cbSceneParam._m0[61u].w, fma(_2225, cbSceneParam._m0[61u].z, fma(_2221, cbSceneParam._m0[61u].y, _2217 * cbSceneParam._m0[61u].x))) / _2433;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_2434 >= cbSceneParam._m0[64u].x) && (_2435 >= cbSceneParam._m0[64u].y)) && (_2434 <= cbSceneParam._m0[64u].z)) && (_2435 <= cbSceneParam._m0[64u].w))
        {
            float _2573 = fma(_2229, cbSceneParam._m0[62u].w, fma(_2225, cbSceneParam._m0[62u].z, fma(_2221, cbSceneParam._m0[62u].y, _2217 * cbSceneParam._m0[62u].x))) / _2433;
            float _2577 = isnan(cbSceneParam._m0[41u].w) ? _2573 : (isnan(_2573) ? cbSceneParam._m0[41u].w : max(_2573, cbSceneParam._m0[41u].w));
            float _2620 = (cbSceneParam._m0[33u].x - sqrt(((_2231 * _2231) + (_2230 * _2230)) + (_2232 * _2232))) * cbSceneParam._m0[33u].y;
            float _4774 = isnan(0.0) ? _2620 : (isnan(_2620) ? 0.0 : max(_2620, 0.0));
            float _2627 = (isnan(1.0) ? _4774 : (isnan(_4774) ? 1.0 : min(_4774, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2434, cbSceneParam._m0[33u].w + _2435), _2577), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2434, _2435 - cbSceneParam._m0[33u].z), _2577), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2434 - cbSceneParam._m0[33u].z, _2435 - cbSceneParam._m0[33u].w), _2577), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2434 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2435), _2577), 0.0)).x), vec4(0.25)));
            float _2631 = 1.0 - (_2627 * cbSceneParam._m0[34u].x);
            float _2632 = 1.0 - (_2627 * cbSceneParam._m0[34u].y);
            float _2633 = 1.0 - (_2627 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_2633) ? _2381 : (isnan(_2381) ? _2633 : min(_2381, _2633));
            frontier_phi_37_36_ladder_1 = isnan(_2632) ? _2380 : (isnan(_2380) ? _2632 : min(_2380, _2632));
            frontier_phi_37_36_ladder_2 = isnan(_2631) ? _2379 : (isnan(_2379) ? _2631 : min(_2379, _2631));
        }
        else
        {
            frontier_phi_37_36_ladder = _2381;
            frontier_phi_37_36_ladder_1 = _2380;
            frontier_phi_37_36_ladder_2 = _2379;
        }
        _2445 = frontier_phi_37_36_ladder_2;
        _2447 = frontier_phi_37_36_ladder_1;
        _2449 = frontier_phi_37_36_ladder;
    }
    else
    {
        _2445 = _2379;
        _2447 = _2380;
        _2449 = _2381;
    }
    uvec4 _2454 = floatBitsToUint(cbInstanceData._m0[_265 + 5u]);
    uint _2456 = _2454.x * 14u;
    uint _2457 = _2456 + 13u;
    float _2464 = _1132 + (-1.0);
    float _2469 = (cbLight._m0[_2457].x * _2464) + 1.0;
    float _2470 = (cbLight._m0[_2457].y * _2464) + 1.0;
    float _2471 = (cbLight._m0[_2457].z * _2464) + 1.0;
    float _2472 = (cbLight._m0[_2457].w * _2464) + 1.0;
    uint _2473 = _2456 + 5u;
    float _2479 = isnan(1.0) ? _2470 : (isnan(_2470) ? 1.0 : min(_2470, 1.0));
    uint _2483 = _2456 + 4u;
    float _2492 = isnan(1.0) ? _2469 : (isnan(_2469) ? 1.0 : min(_2469, 1.0));
    uint _2496 = _2456 | 1u;
    float _2507 = dot(vec3(cbLight._m0[_2456].xyz), vec3(_970, _971, _972));
    float _2510 = dot(vec3(cbLight._m0[_2496].xyz), vec3(_970, _971, _972));
    float _4810 = isnan(0.0) ? _2507 : (isnan(_2507) ? 0.0 : max(_2507, 0.0));
    float _4821 = isnan(0.0) ? _2510 : (isnan(_2510) ? 0.0 : max(_2510, 0.0));
    float _2515 = (isnan(1.0) ? _4810 : (isnan(_4810) ? 1.0 : min(_4810, 1.0))) * 0.3183098733425140380859375;
    float _2517 = (isnan(1.0) ? _4821 : (isnan(_4821) ? 1.0 : min(_4821, 1.0))) * 0.3183098733425140380859375;
    float _2524 = ((cbLight._m0[_2473].x * _2479) * _2517) + (((cbLight._m0[_2483].x * _2445) * _2492) * _2515);
    float _2525 = ((_2479 * cbLight._m0[_2473].y) * _2517) + (((cbLight._m0[_2483].y * _2447) * _2492) * _2515);
    float _2526 = ((_2479 * cbLight._m0[_2473].z) * _2517) + (((cbLight._m0[_2483].z * _2449) * _2492) * _2515);
    uvec4 _2530 = floatBitsToUint(cbLight._m0[_2456 + 12u]);
    bool _2532 = _2530.x == 0u;
    float _2634;
    float _2636;
    float _2638;
    if (_2532)
    {
        _2634 = _2524;
        _2636 = _2525;
        _2638 = _2526;
    }
    else
    {
        uint _2642 = _2456 + 6u;
        float _2658 = (dot(vec3(cbLight._m0[_2456 + 2u].xyz), vec3(_970, _971, _972)) * 0.5) + 0.5;
        float _2659 = _2658 * _2658;
        float _4832 = isnan(0.0) ? _2659 : (isnan(_2659) ? 0.0 : max(_2659, 0.0));
        float _2660 = isnan(1.0) ? _4832 : (isnan(_4832) ? 1.0 : min(_4832, 1.0));
        float _2661 = isnan(1.0) ? _2471 : (isnan(_2471) ? 1.0 : min(_2471, 1.0));
        _2634 = (((cbLight._m0[_2642].x * 0.3183098733425140380859375) * _2660) * _2661) + _2524;
        _2636 = (((cbLight._m0[_2642].y * 0.3183098733425140380859375) * _2660) * _2661) + _2525;
        _2638 = (((cbLight._m0[_2642].z * 0.3183098733425140380859375) * _2660) * _2661) + _2526;
    }
    bool _2641 = _2530.y == 0u;
    float _2696;
    float _2698;
    float _2700;
    if (_2641)
    {
        _2696 = _2634;
        _2698 = _2636;
        _2700 = _2638;
    }
    else
    {
        uint _2858 = _2456 + 7u;
        float _2874 = (dot(vec3(cbLight._m0[_2456 + 3u].xyz), vec3(_970, _971, _972)) * 0.5) + 0.5;
        float _2875 = _2874 * _2874;
        float _4848 = isnan(0.0) ? _2875 : (isnan(_2875) ? 0.0 : max(_2875, 0.0));
        float _2876 = isnan(1.0) ? _4848 : (isnan(_4848) ? 1.0 : min(_4848, 1.0));
        float _2877 = isnan(1.0) ? _2472 : (isnan(_2472) ? 1.0 : min(_2472, 1.0));
        _2696 = (((cbLight._m0[_2858].x * 0.3183098733425140380859375) * _2876) * _2877) + _2634;
        _2698 = (((cbLight._m0[_2858].y * 0.3183098733425140380859375) * _2876) * _2877) + _2636;
        _2700 = (((cbLight._m0[_2858].z * 0.3183098733425140380859375) * _2876) * _2877) + _2638;
    }
    uint _2703 = _2456 + 8u;
    float _2716 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2456].w)) * _973) * 0.949999988079071044921875);
    float _2717 = _2716 * _2716;
    float _2718 = cbLight._m0[_2456].x + _1049;
    float _2719 = cbLight._m0[_2456].y + _1050;
    float _2720 = cbLight._m0[_2456].z + _1051;
    float _2724 = inversesqrt(dot(vec3(_2718, _2719, _2720), vec3(_2718, _2719, _2720)));
    float _2725 = _2724 * _2718;
    float _2726 = _2724 * _2719;
    float _2727 = _2724 * _2720;
    float _2728 = dot(vec3(_970, _971, _972), vec3(cbLight._m0[_2456].xyz));
    float _4864 = isnan(0.0) ? _2728 : (isnan(_2728) ? 0.0 : max(_2728, 0.0));
    float _2731 = isnan(1.0) ? _4864 : (isnan(_4864) ? 1.0 : min(_4864, 1.0));
    float _4875 = isnan(0.0) ? _1133 : (isnan(_1133) ? 0.0 : max(_1133, 0.0));
    float _2732 = isnan(1.0) ? _4875 : (isnan(_4875) ? 1.0 : min(_4875, 1.0));
    float _2733 = dot(vec3(_970, _971, _972), vec3(_2725, _2726, _2727));
    float _4886 = isnan(0.0) ? _2733 : (isnan(_2733) ? 0.0 : max(_2733, 0.0));
    float _2736 = isnan(1.0) ? _4886 : (isnan(_4886) ? 1.0 : min(_4886, 1.0));
    float _2737 = dot(vec3(cbLight._m0[_2456].xyz), vec3(_2725, _2726, _2727));
    float _4897 = isnan(0.0) ? _2737 : (isnan(_2737) ? 0.0 : max(_2737, 0.0));
    float _2741 = _2717 * _2717;
    float _2745 = ((_2736 * _2736) * (_2741 + (-1.0))) + 1.0;
    float _2756 = (exp2(log2(1.0 - (isnan(1.0) ? _4897 : (isnan(_4897) ? 1.0 : min(_4897, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2757 = 1.0 - _2717;
    float _2768 = (0.5 / (((_2732 * ((_2731 * _2757) + _2717)) + 9.9999999392252902907785028219223e-09) + (((_2732 * _2757) + _2717) * _2731))) * _2731;
    float _4908 = isnan(0.0) ? _2768 : (isnan(_2768) ? 0.0 : max(_2768, 0.0));
    float _2770 = (isnan(1.0) ? _4908 : (isnan(_4908) ? 1.0 : min(_4908, 1.0))) * (_2741 / ((_2745 * _2745) * 3.141590118408203125));
    uint _2784 = _2456 + 9u;
    float _2795 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2496].w)) * _973) * 0.949999988079071044921875);
    float _2796 = _2795 * _2795;
    float _2797 = cbLight._m0[_2496].x + _1049;
    float _2798 = cbLight._m0[_2496].y + _1050;
    float _2799 = cbLight._m0[_2496].z + _1051;
    float _2803 = inversesqrt(dot(vec3(_2797, _2798, _2799), vec3(_2797, _2798, _2799)));
    float _2804 = _2803 * _2797;
    float _2805 = _2803 * _2798;
    float _2806 = _2803 * _2799;
    float _2807 = dot(vec3(_970, _971, _972), vec3(cbLight._m0[_2496].xyz));
    float _4919 = isnan(0.0) ? _2807 : (isnan(_2807) ? 0.0 : max(_2807, 0.0));
    float _2810 = isnan(1.0) ? _4919 : (isnan(_4919) ? 1.0 : min(_4919, 1.0));
    float _2811 = dot(vec3(_970, _971, _972), vec3(_2804, _2805, _2806));
    float _4930 = isnan(0.0) ? _2811 : (isnan(_2811) ? 0.0 : max(_2811, 0.0));
    float _2814 = isnan(1.0) ? _4930 : (isnan(_4930) ? 1.0 : min(_4930, 1.0));
    float _2815 = dot(vec3(cbLight._m0[_2496].xyz), vec3(_2804, _2805, _2806));
    float _4941 = isnan(0.0) ? _2815 : (isnan(_2815) ? 0.0 : max(_2815, 0.0));
    float _2819 = _2796 * _2796;
    float _2823 = ((_2814 * _2814) * (_2819 + (-1.0))) + 1.0;
    float _2832 = (exp2(log2(1.0 - (isnan(1.0) ? _4941 : (isnan(_4941) ? 1.0 : min(_4941, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2833 = 1.0 - _2796;
    float _2843 = (0.5 / (((_2732 * ((_2810 * _2833) + _2796)) + 9.9999999392252902907785028219223e-09) + (((_2732 * _2833) + _2796) * _2810))) * _2810;
    float _4952 = isnan(0.0) ? _2843 : (isnan(_2843) ? 0.0 : max(_2843, 0.0));
    float _2845 = (isnan(1.0) ? _4952 : (isnan(_4952) ? 1.0 : min(_4952, 1.0))) * (_2819 / ((_2823 * _2823) * 3.141590118408203125));
    float _2855 = (((_2832 * cbLight._m0[_2784].x) * _2845) * _2479) + ((((cbLight._m0[_2703].x * _2445) * _2756) * _2770) * _2492);
    float _2856 = (((_2832 * cbLight._m0[_2784].y) * _2845) * _2479) + ((((cbLight._m0[_2703].y * _2447) * _2756) * _2770) * _2492);
    float _2857 = (((_2832 * cbLight._m0[_2784].z) * _2845) * _2479) + ((((cbLight._m0[_2703].z * _2449) * _2756) * _2770) * _2492);
    float _2913;
    float _2915;
    float _2917;
    if (_2532)
    {
        _2913 = _2855;
        _2915 = _2856;
        _2917 = _2857;
    }
    else
    {
        uint _2919 = _2456 + 2u;
        uint _2923 = _2456 + 10u;
        float _2937 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2919].w)) * _973) * 0.949999988079071044921875);
        float _2938 = _2937 * _2937;
        float _2939 = cbLight._m0[_2919].x + _1049;
        float _2940 = cbLight._m0[_2919].y + _1050;
        float _2941 = cbLight._m0[_2919].z + _1051;
        float _2945 = inversesqrt(dot(vec3(_2939, _2940, _2941), vec3(_2939, _2940, _2941)));
        float _2946 = _2945 * _2939;
        float _2947 = _2945 * _2940;
        float _2948 = _2945 * _2941;
        float _2949 = dot(vec3(_970, _971, _972), vec3(cbLight._m0[_2919].xyz));
        float _4963 = isnan(0.0) ? _2949 : (isnan(_2949) ? 0.0 : max(_2949, 0.0));
        float _2952 = isnan(1.0) ? _4963 : (isnan(_4963) ? 1.0 : min(_4963, 1.0));
        float _2953 = dot(vec3(_970, _971, _972), vec3(_2946, _2947, _2948));
        float _4974 = isnan(0.0) ? _2953 : (isnan(_2953) ? 0.0 : max(_2953, 0.0));
        float _2956 = isnan(1.0) ? _4974 : (isnan(_4974) ? 1.0 : min(_4974, 1.0));
        float _2957 = dot(vec3(cbLight._m0[_2919].xyz), vec3(_2946, _2947, _2948));
        float _4985 = isnan(0.0) ? _2957 : (isnan(_2957) ? 0.0 : max(_2957, 0.0));
        float _2961 = _2938 * _2938;
        float _2965 = ((_2956 * _2956) * (_2961 + (-1.0))) + 1.0;
        float _2974 = (exp2(log2(1.0 - (isnan(1.0) ? _4985 : (isnan(_4985) ? 1.0 : min(_4985, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2975 = 1.0 - _2938;
        float _2985 = (0.5 / (((_2732 * ((_2952 * _2975) + _2938)) + 9.9999999392252902907785028219223e-09) + (((_2732 * _2975) + _2938) * _2952))) * _2952;
        float _4996 = isnan(0.0) ? _2985 : (isnan(_2985) ? 0.0 : max(_2985, 0.0));
        float _2987 = (isnan(1.0) ? _4996 : (isnan(_4996) ? 1.0 : min(_4996, 1.0))) * (_2961 / ((_2965 * _2965) * 3.141590118408203125));
        float _2988 = isnan(1.0) ? _2471 : (isnan(_2471) ? 1.0 : min(_2471, 1.0));
        _2913 = (((_2974 * cbLight._m0[_2923].x) * _2987) * _2988) + _2855;
        _2915 = (((_2974 * cbLight._m0[_2923].y) * _2987) * _2988) + _2856;
        _2917 = (((_2974 * cbLight._m0[_2923].z) * _2987) * _2988) + _2857;
    }
    float _3019;
    float _3021;
    float _3023;
    if (_2641)
    {
        _3019 = _2913;
        _3021 = _2915;
        _3023 = _2917;
    }
    else
    {
        uint _3030 = _2456 + 3u;
        uint _3034 = _2456 + 11u;
        float _3048 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_3030].w)) * _973) * 0.949999988079071044921875);
        float _3049 = _3048 * _3048;
        float _3050 = cbLight._m0[_3030].x + _1049;
        float _3051 = cbLight._m0[_3030].y + _1050;
        float _3052 = cbLight._m0[_3030].z + _1051;
        float _3056 = inversesqrt(dot(vec3(_3050, _3051, _3052), vec3(_3050, _3051, _3052)));
        float _3057 = _3056 * _3050;
        float _3058 = _3056 * _3051;
        float _3059 = _3056 * _3052;
        float _3060 = dot(vec3(_970, _971, _972), vec3(cbLight._m0[_3030].xyz));
        float _5012 = isnan(0.0) ? _3060 : (isnan(_3060) ? 0.0 : max(_3060, 0.0));
        float _3063 = isnan(1.0) ? _5012 : (isnan(_5012) ? 1.0 : min(_5012, 1.0));
        float _3064 = dot(vec3(_970, _971, _972), vec3(_3057, _3058, _3059));
        float _5023 = isnan(0.0) ? _3064 : (isnan(_3064) ? 0.0 : max(_3064, 0.0));
        float _3067 = isnan(1.0) ? _5023 : (isnan(_5023) ? 1.0 : min(_5023, 1.0));
        float _3068 = dot(vec3(cbLight._m0[_3030].xyz), vec3(_3057, _3058, _3059));
        float _5034 = isnan(0.0) ? _3068 : (isnan(_3068) ? 0.0 : max(_3068, 0.0));
        float _3072 = _3049 * _3049;
        float _3076 = ((_3067 * _3067) * (_3072 + (-1.0))) + 1.0;
        float _3085 = (exp2(log2(1.0 - (isnan(1.0) ? _5034 : (isnan(_5034) ? 1.0 : min(_5034, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _3086 = 1.0 - _3049;
        float _3096 = (0.5 / (((_2732 * ((_3063 * _3086) + _3049)) + 9.9999999392252902907785028219223e-09) + (((_2732 * _3086) + _3049) * _3063))) * _3063;
        float _5045 = isnan(0.0) ? _3096 : (isnan(_3096) ? 0.0 : max(_3096, 0.0));
        float _3098 = (isnan(1.0) ? _5045 : (isnan(_5045) ? 1.0 : min(_5045, 1.0))) * (_3072 / ((_3076 * _3076) * 3.141590118408203125));
        float _3099 = isnan(1.0) ? _2472 : (isnan(_2472) ? 1.0 : min(_2472, 1.0));
        _3019 = (((_3085 * cbLight._m0[_3034].x) * _3098) * _3099) + _2913;
        _3021 = (((_3085 * cbLight._m0[_3034].y) * _3098) * _3099) + _2915;
        _3023 = (((_3085 * cbLight._m0[_3034].z) * _3098) * _3099) + _2917;
    }
    float _3165;
    float _3167;
    float _3169;
    float _3171;
    float _3173;
    float _3175;
    if (_2454.y == 0u)
    {
        uvec4 _3120 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3121 = _3120.x;
        uint _3132 = uint((float(_3120.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1070) / _3121))) + floor(float(uint(cbSceneParam._m0[85u].x * _1069) / _3121)));
        float _3142 = (log2(_2232 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _3143 = isnan(0.0) ? _3142 : (isnan(_3142) ? 0.0 : max(_3142, 0.0));
        uint _3146 = uint(isnan(14.0) ? _3143 : (isnan(_3143) ? 14.0 : min(_3143, 14.0)));
        uvec4 _3151 = texelFetch(g_lightClusterGridBuffer, int(((_3146 << 2u) + (_3132 << 6u)) >> 2u));
        uint _3152 = _3151.x;
        uint _3153 = _3120.z;
        float _3232;
        float _3234;
        float _3236;
        float _3238;
        float _3240;
        float _3242;
        if (((((1u << ((_3153 >> 4u) & 15u)) + 4294967295u) & _3152) == 0u) || ((_3153 & 240u) == 0u))
        {
            _3232 = 0.0;
            _3234 = 0.0;
            _3236 = 0.0;
            _3238 = 0.0;
            _3240 = 0.0;
            _3242 = 0.0;
        }
        else
        {
            float _3233;
            float _3235;
            float _3237;
            float _3239;
            float _3241;
            float _3243;
            float _3384 = 0.0;
            float _3385 = 0.0;
            float _3386 = 0.0;
            float _3387 = 0.0;
            float _3388 = 0.0;
            float _3389 = 0.0;
            uint _3390 = 0u;
            uint _3399;
            bool _3400;
            for (;;)
            {
                _3399 = texelFetch(g_lightClassification, int((((_3146 << 5u) + (_3132 << 9u)) + (_3390 << 2u)) >> 2u)).x;
                _3400 = _3399 == 0u;
                float frontier_phi_71_pred;
                float frontier_phi_71_pred_1;
                float frontier_phi_71_pred_2;
                float frontier_phi_71_pred_3;
                float frontier_phi_71_pred_4;
                float frontier_phi_71_pred_5;
                if (_3400)
                {
                    frontier_phi_71_pred = _3389;
                    frontier_phi_71_pred_1 = _3388;
                    frontier_phi_71_pred_2 = _3387;
                    frontier_phi_71_pred_3 = _3386;
                    frontier_phi_71_pred_4 = _3385;
                    frontier_phi_71_pred_5 = _3384;
                }
                else
                {
                    float _3529;
                    float _3530;
                    float _3531;
                    float _3532;
                    float _3533;
                    float _3534;
                    uint _3535;
                    _3529 = _3384;
                    _3530 = _3385;
                    _3531 = _3386;
                    _3532 = _3387;
                    _3533 = _3388;
                    _3534 = _3389;
                    _3535 = _3399;
                    float _3456;
                    float _3457;
                    float _3458;
                    float _3459;
                    float _3460;
                    float _3461;
                    for (;;)
                    {
                        uint _3539 = uint(findLSB(_3535)) + (_3390 << 5u);
                        uint _3536 = (_3535 + 4294967295u) & _3535;
                        uint _3541 = _3539 * 48u;
                        vec4 _3555 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3541)).x, texelFetch(g_PointLightRenderingBuffer, int(_3541 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3541 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3541 + 3u)).x));
                        uint _3561 = (_3539 * 48u) + 4u;
                        vec4 _3574 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3561)).x, texelFetch(g_PointLightRenderingBuffer, int(_3561 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3561 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3561 + 3u)).x));
                        uint _3580 = (_3539 * 48u) + 8u;
                        vec3 _3591 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3580)).x, texelFetch(g_PointLightRenderingBuffer, int(_3580 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3580 + 2u)).x));
                        float _3595 = _3555.x - _2230;
                        float _3596 = _3555.y - _2231;
                        float _3597 = _3555.z - _2232;
                        float _3598 = dot(vec3(_3595, _3596, _3597), vec3(_3595, _3596, _3597));
                        float _3601 = inversesqrt(_3598);
                        float _3602 = _3601 * _3595;
                        float _3603 = _3601 * _3596;
                        float _3604 = _3601 * _3597;
                        float _3605 = dot(vec3(_1088, _1091, _1094), vec3(_3602, _3603, _3604));
                        float _3610 = 1.0 - (_3598 * _3555.w);
                        float _5071 = isnan(0.0) ? _3610 : (isnan(_3610) ? 0.0 : max(_3610, 0.0));
                        float _3611 = isnan(1.0) ? _5071 : (isnan(_5071) ? 1.0 : min(_5071, 1.0));
                        float _3612 = sqrt(_3598) * _3574.w;
                        float _3615 = 1.39999997615814208984375 / (_3612 + 1.39999997615814208984375);
                        float _3616 = _3615 * _3615;
                        float _3619 = ((1.0 - _3616) * _3605) + _3616;
                        float _3622 = _3612 * _3612;
                        float _3626 = ((isnan(0.0) ? _3619 : (isnan(_3619) ? 0.0 : max(_3619, 0.0))) * _3611) / ((_3622 * 0.699999988079071044921875) + 1.0);
                        float _3630 = (-0.0) - _2230;
                        float _3631 = (-0.0) - _2231;
                        float _3632 = (-0.0) - _2232;
                        float _3636 = inversesqrt(dot(vec3(_3630, _3631, _3632), vec3(_3630, _3631, _3632)));
                        float _3637 = _3636 * _3630;
                        float _3638 = _3636 * _3631;
                        float _3639 = _3636 * _3632;
                        float _3646 = exp2(log2(1.0 / ((_3622 * 3.5) + 5.0)) * 0.25);
                        float _3647 = 1.0 - _1148;
                        float _3654 = sqrt(1.0 - ((1.0 - (_3647 * _3647)) * (1.0 - (_3646 * _3646))));
                        float _3655 = _3654 * _3654;
                        float _3656 = _3655 * _3655;
                        float _3657 = _3637 + _3602;
                        float _3658 = _3638 + _3603;
                        float _3659 = _3639 + _3604;
                        float _3663 = inversesqrt(dot(vec3(_3657, _3658, _3659), vec3(_3657, _3658, _3659)));
                        float _3667 = dot(vec3(_1088, _1091, _1094), vec3(_3637, _3638, _3639));
                        float _5087 = isnan(0.0) ? _3667 : (isnan(_3667) ? 0.0 : max(_3667, 0.0));
                        float _3670 = isnan(1.0) ? _5087 : (isnan(_5087) ? 1.0 : min(_5087, 1.0));
                        float _3671 = dot(vec3(_1088, _1091, _1094), vec3(_3663 * _3657, _3663 * _3658, _3663 * _3659));
                        float _5098 = isnan(0.0) ? _3671 : (isnan(_3671) ? 0.0 : max(_3671, 0.0));
                        float _3674 = isnan(1.0) ? _5098 : (isnan(_5098) ? 1.0 : min(_5098, 1.0));
                        float _3678 = ((_3674 * _3674) * (_3656 + (-1.0))) + 1.0;
                        float _3679 = _3615 * _3655;
                        float _3680 = _3679 * _3679;
                        float _3683 = ((1.0 - _3680) * _3605) + _3680;
                        float _5109 = isnan(0.0) ? _3683 : (isnan(_3683) ? 0.0 : max(_3683, 0.0));
                        float _3684 = isnan(1.0) ? _5109 : (isnan(_5109) ? 1.0 : min(_5109, 1.0));
                        float _3685 = 1.0 - _3655;
                        float _3695 = (0.5 / (((_3684 * ((_3670 * _3685) + _3655)) + 9.9999999392252902907785028219223e-09) + (((_3684 * _3685) + _3655) * _3670))) * _3684;
                        float _5120 = isnan(0.0) ? _3695 : (isnan(_3695) ? 0.0 : max(_3695, 0.0));
                        float _3706 = (((_3656 * 3.1415927410125732421875) * (isnan(1.0) ? _5120 : (isnan(_5120) ? 1.0 : min(_5120, 1.0)))) / ((_3678 * _3678) * ((_3622 * 2.1991131305694580078125) + 3.141590118408203125))) * _3611;
                        _3459 = (_3626 * _3574.x) + _3532;
                        _3460 = (_3626 * _3574.y) + _3533;
                        _3461 = (_3626 * _3574.z) + _3534;
                        _3456 = (_3706 * _3591.x) + _3529;
                        _3457 = (_3706 * _3591.y) + _3530;
                        _3458 = (_3706 * _3591.z) + _3531;
                        if (_3536 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3529 = _3456;
                            _3530 = _3457;
                            _3531 = _3458;
                            _3532 = _3459;
                            _3533 = _3460;
                            _3534 = _3461;
                            _3535 = _3536;
                        }
                    }
                    frontier_phi_71_pred = _3461;
                    frontier_phi_71_pred_1 = _3460;
                    frontier_phi_71_pred_2 = _3459;
                    frontier_phi_71_pred_3 = _3458;
                    frontier_phi_71_pred_4 = _3457;
                    frontier_phi_71_pred_5 = _3456;
                }
                _3243 = frontier_phi_71_pred;
                _3241 = frontier_phi_71_pred_1;
                _3239 = frontier_phi_71_pred_2;
                _3237 = frontier_phi_71_pred_3;
                _3235 = frontier_phi_71_pred_4;
                _3233 = frontier_phi_71_pred_5;
                uint _3391 = _3390 + 1u;
                if (_3391 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3384 = _3233;
                    _3385 = _3235;
                    _3386 = _3237;
                    _3387 = _3239;
                    _3388 = _3241;
                    _3389 = _3243;
                    _3390 = _3391;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3232 = _3233;
            _3234 = _3235;
            _3236 = _3237;
            _3238 = _3239;
            _3240 = _3241;
            _3242 = _3243;
        }
        uvec4 _3246 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3247 = _3246.z;
        uint _3249 = (_3247 >> 8u) & 15u;
        float _3352;
        float _3354;
        float _3356;
        float _3358;
        float _3360;
        float _3362;
        if (((4294967295u << _3249) & _3152) == 0u)
        {
            _3352 = _3232;
            _3354 = _3234;
            _3356 = _3236;
            _3358 = _3238;
            _3360 = _3240;
            _3362 = _3242;
        }
        else
        {
            float _3377 = inversesqrt(dot(vec3(_2230, _2231, _2232), vec3(_2230, _2231, _2232)));
            float _3378 = _3377 * _2230;
            float _3379 = _3377 * _2231;
            float _3380 = _3377 * _2232;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_3249 < ((_3247 >> 12u) & 15u))
            {
                float _3353;
                float _3355;
                float _3357;
                float _3359;
                float _3361;
                float _3363;
                float _3512 = _3232;
                float _3513 = _3234;
                float _3514 = _3236;
                float _3515 = _3238;
                float _3516 = _3240;
                float _3517 = _3242;
                uint _3518 = _3249;
                uint _3527;
                bool _3528;
                for (;;)
                {
                    _3527 = texelFetch(g_lightClassification, int((((_3146 << 5u) + (_3132 << 9u)) + (_3518 << 2u)) >> 2u)).x;
                    _3528 = _3527 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    float frontier_phi_82_pred_3;
                    float frontier_phi_82_pred_4;
                    float frontier_phi_82_pred_5;
                    if (_3528)
                    {
                        frontier_phi_82_pred = _3517;
                        frontier_phi_82_pred_1 = _3516;
                        frontier_phi_82_pred_2 = _3515;
                        frontier_phi_82_pred_3 = _3514;
                        frontier_phi_82_pred_4 = _3513;
                        frontier_phi_82_pred_5 = _3512;
                    }
                    else
                    {
                        float _3720;
                        float _3721;
                        float _3722;
                        float _3723;
                        float _3724;
                        float _3725;
                        float _4013;
                        float _4014;
                        float _4015;
                        float _4016;
                        float _4017;
                        float _4018;
                        float _3733 = _3512;
                        float _3734 = _3513;
                        float _3735 = _3514;
                        float _3736 = _3515;
                        float _3737 = _3516;
                        float _3738 = _3517;
                        uint _3739 = _3527;
                        uint _3740;
                        vec4 _3765;
                        float _3766;
                        vec4 _3781;
                        vec3 _3793;
                        vec4 _3808;
                        vec4 _3823;
                        float _3869;
                        bool _3870;
                        for (;;)
                        {
                            uint _3750 = ((_3518 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3739));
                            _3740 = (_3739 + 4294967295u) & _3739;
                            uint _3752 = _3750 * 40u;
                            _3765 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3752)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3752 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3752 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3752 + 3u)).x));
                            _3766 = _3765.w;
                            uint _3768 = (_3750 * 40u) + 4u;
                            _3781 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3768)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3768 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3768 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3768 + 3u)).x));
                            uint _3783 = (_3750 * 40u) + 8u;
                            _3793 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3783)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3783 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3783 + 2u)).x));
                            uint _3795 = (_3750 * 40u) + 16u;
                            _3808 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3795)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3795 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3795 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3795 + 3u)).x));
                            uint _3810 = (_3750 * 40u) + 20u;
                            _3823 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3810)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3810 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3810 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3810 + 3u)).x));
                            uint _3825 = (_3750 * 40u) + 24u;
                            vec4 _3838 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3825)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3825 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3825 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3825 + 3u)).x));
                            uint _3844 = (_3750 * 40u) + 28u;
                            vec4 _3857 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3844)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3844 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3844 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3844 + 3u)).x));
                            _3869 = fma(_2232, _3857.z, fma(_2231, _3857.y, _3857.x * _2230)) + _3857.w;
                            _3870 = !((fma(_2232, _3838.z, fma(_2231, _3838.y, _3838.x * _2230)) + _3838.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_3870)
                            {
                                float _3897 = _3765.x - _2230;
                                float _3898 = _3765.y - _2231;
                                float _3899 = _3765.z - _2232;
                                float _3900 = dot(vec3(_3897, _3898, _3899), vec3(_3897, _3898, _3899));
                                float _3903 = inversesqrt(_3900);
                                float _3904 = _3903 * _3897;
                                float _3905 = _3903 * _3898;
                                float _3906 = _3903 * _3899;
                                float _3910 = 1.0 - (_3900 / (_3766 * _3766));
                                float _5131 = isnan(0.0) ? _3910 : (isnan(_3910) ? 0.0 : max(_3910, 0.0));
                                float _3911 = isnan(1.0) ? _5131 : (isnan(_5131) ? 1.0 : min(_5131, 1.0));
                                float _3915 = sqrt(_3900) * _3781.w;
                                float _3917 = 1.39999997615814208984375 / (_3915 + 1.39999997615814208984375);
                                float _3918 = _3917 * _3917;
                                float _3921 = ((1.0 - _3918) * dot(vec3(_3904, _3905, _3906), vec3(_1088, _1091, _1094))) + _3918;
                                float _3924 = _3915 * _3915;
                                float _3928 = (fma(_2232, _3808.z, fma(_2231, _3808.y, _3808.x * _2230)) + _3808.w) / _3869;
                                float _3929 = (fma(_2232, _3823.z, fma(_2231, _3823.y, _3823.x * _2230)) + _3823.w) / _3869;
                                float _3933 = 1.0 - dot(vec2(_3928, _3929), vec2(_3928, _3929));
                                float _5147 = isnan(0.0) ? _3933 : (isnan(_3933) ? 0.0 : max(_3933, 0.0));
                                float _3934 = isnan(1.0) ? _5147 : (isnan(_5147) ? 1.0 : min(_5147, 1.0));
                                float _3935 = _3934 * (((isnan(0.0) ? _3921 : (isnan(_3921) ? 0.0 : max(_3921, 0.0))) * _3911) / ((_3924 * 0.699999988079071044921875) + 1.0));
                                float _3947 = exp2(log2(1.0 / ((_3924 * 3.5) + 5.0)) * 0.25);
                                float _3948 = 1.0 - _1148;
                                float _3955 = sqrt(1.0 - ((1.0 - (_3948 * _3948)) * (1.0 - (_3947 * _3947))));
                                float _3956 = _3955 * _3955;
                                float _3957 = _3956 * _3956;
                                float _3958 = _3904 - _3378;
                                float _3959 = _3905 - _3379;
                                float _3960 = _3906 - _3380;
                                float _3964 = inversesqrt(dot(vec3(_3958, _3959, _3960), vec3(_3958, _3959, _3960)));
                                float _3968 = dot(vec3(_1088, _1091, _1094), vec3((-0.0) - _3378, (-0.0) - _3379, (-0.0) - _3380));
                                float _5158 = isnan(0.0) ? _3968 : (isnan(_3968) ? 0.0 : max(_3968, 0.0));
                                float _3971 = isnan(1.0) ? _5158 : (isnan(_5158) ? 1.0 : min(_5158, 1.0));
                                float _3972 = dot(vec3(_1088, _1091, _1094), vec3(_3964 * _3958, _3964 * _3959, _3964 * _3960));
                                float _5169 = isnan(0.0) ? _3972 : (isnan(_3972) ? 0.0 : max(_3972, 0.0));
                                float _3975 = isnan(1.0) ? _5169 : (isnan(_5169) ? 1.0 : min(_5169, 1.0));
                                float _3979 = ((_3975 * _3975) * (_3957 + (-1.0))) + 1.0;
                                float _3980 = _3917 * _3956;
                                float _3981 = _3980 * _3980;
                                float _3987 = ((1.0 - _3981) * dot(vec3(_1088, _1091, _1094), vec3(_3904, _3905, _3906))) + _3981;
                                float _5180 = isnan(0.0) ? _3987 : (isnan(_3987) ? 0.0 : max(_3987, 0.0));
                                float _3988 = isnan(1.0) ? _5180 : (isnan(_5180) ? 1.0 : min(_5180, 1.0));
                                float _3989 = 1.0 - _3956;
                                float _3999 = (0.5 / (((_3988 * ((_3971 * _3989) + _3956)) + 9.9999999392252902907785028219223e-09) + (((_3988 * _3989) + _3956) * _3971))) * _3988;
                                float _5191 = isnan(0.0) ? _3999 : (isnan(_3999) ? 0.0 : max(_3999, 0.0));
                                float _4009 = (_3934 * _3911) * (((_3957 * 3.1415927410125732421875) * (isnan(1.0) ? _5191 : (isnan(_5191) ? 1.0 : min(_5191, 1.0)))) / ((_3979 * _3979) * ((_3924 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_88_pred = _3935 * _3781.z;
                                frontier_phi_88_pred_1 = _3935 * _3781.y;
                                frontier_phi_88_pred_2 = _3935 * _3781.x;
                                frontier_phi_88_pred_3 = _4009 * _3793.z;
                                frontier_phi_88_pred_4 = _4009 * _3793.y;
                                frontier_phi_88_pred_5 = _4009 * _3793.x;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _4018 = frontier_phi_88_pred;
                            _4017 = frontier_phi_88_pred_1;
                            _4016 = frontier_phi_88_pred_2;
                            _4015 = frontier_phi_88_pred_3;
                            _4014 = frontier_phi_88_pred_4;
                            _4013 = frontier_phi_88_pred_5;
                            _3723 = _4016 + _3736;
                            _3724 = _4017 + _3737;
                            _3725 = _4018 + _3738;
                            _3720 = _4013 + _3733;
                            _3721 = _4014 + _3734;
                            _3722 = _4015 + _3735;
                            if (_3740 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3733 = _3720;
                                _3734 = _3721;
                                _3735 = _3722;
                                _3736 = _3723;
                                _3737 = _3724;
                                _3738 = _3725;
                                _3739 = _3740;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _3725;
                        frontier_phi_82_pred_1 = _3724;
                        frontier_phi_82_pred_2 = _3723;
                        frontier_phi_82_pred_3 = _3722;
                        frontier_phi_82_pred_4 = _3721;
                        frontier_phi_82_pred_5 = _3720;
                    }
                    _3363 = frontier_phi_82_pred;
                    _3361 = frontier_phi_82_pred_1;
                    _3359 = frontier_phi_82_pred_2;
                    _3357 = frontier_phi_82_pred_3;
                    _3355 = frontier_phi_82_pred_4;
                    _3353 = frontier_phi_82_pred_5;
                    uint _3519 = _3518 + 1u;
                    if (_3519 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3512 = _3353;
                        _3513 = _3355;
                        _3514 = _3357;
                        _3515 = _3359;
                        _3516 = _3361;
                        _3517 = _3363;
                        _3518 = _3519;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _3359;
                frontier_phi_63_64_ladder_1 = _3363;
                frontier_phi_63_64_ladder_2 = _3361;
                frontier_phi_63_64_ladder_3 = _3357;
                frontier_phi_63_64_ladder_4 = _3355;
                frontier_phi_63_64_ladder_5 = _3353;
            }
            else
            {
                frontier_phi_63_64_ladder = _3238;
                frontier_phi_63_64_ladder_1 = _3242;
                frontier_phi_63_64_ladder_2 = _3240;
                frontier_phi_63_64_ladder_3 = _3236;
                frontier_phi_63_64_ladder_4 = _3234;
                frontier_phi_63_64_ladder_5 = _3232;
            }
            _3352 = frontier_phi_63_64_ladder_5;
            _3354 = frontier_phi_63_64_ladder_4;
            _3356 = frontier_phi_63_64_ladder_3;
            _3358 = frontier_phi_63_64_ladder;
            _3360 = frontier_phi_63_64_ladder_2;
            _3362 = frontier_phi_63_64_ladder_1;
        }
        float _3367 = isnan(1.0) ? _1132 : (isnan(_1132) ? 1.0 : min(_1132, 1.0));
        _3165 = (_3367 * _3358) + _2696;
        _3167 = (_3367 * _3360) + _2698;
        _3169 = (_3367 * _3362) + _2700;
        _3171 = ((_3352 * 0.039999999105930328369140625) * _3367) + _3019;
        _3173 = ((_3354 * 0.039999999105930328369140625) * _3367) + _3021;
        _3175 = ((_3356 * 0.039999999105930328369140625) * _3367) + _3023;
    }
    else
    {
        _3165 = _2696;
        _3167 = _2698;
        _3169 = _2700;
        _3171 = _3019;
        _3173 = _3021;
        _3175 = _3023;
    }
    float _5207 = isnan(0.0) ? _1117 : (isnan(_1117) ? 0.0 : max(_1117, 0.0));
    float _5218 = isnan(0.0) ? _1118 : (isnan(_1118) ? 0.0 : max(_1118, 0.0));
    float _5229 = isnan(0.0) ? _1119 : (isnan(_1119) ? 0.0 : max(_1119, 0.0));
    float _3192 = ((isnan(1.0) ? _5207 : (isnan(_5207) ? 1.0 : min(_5207, 1.0))) * (_3165 + ((isnan(0.0) ? _1887 : (isnan(_1887) ? 0.0 : max(_1887, 0.0))) * _1132))) + ((_3171 + ((isnan(0.0) ? _2177 : (isnan(_2177) ? 0.0 : max(_2177, 0.0))) * _1966)) * cbPerFrame._m0[3u].x);
    float _3193 = ((isnan(1.0) ? _5218 : (isnan(_5218) ? 1.0 : min(_5218, 1.0))) * (_3167 + ((isnan(0.0) ? _1890 : (isnan(_1890) ? 0.0 : max(_1890, 0.0))) * _1132))) + ((_3173 + ((isnan(0.0) ? _2180 : (isnan(_2180) ? 0.0 : max(_2180, 0.0))) * _1966)) * cbPerFrame._m0[3u].x);
    float _3194 = ((isnan(1.0) ? _5229 : (isnan(_5229) ? 1.0 : min(_5229, 1.0))) * (_3169 + ((isnan(0.0) ? _1893 : (isnan(_1893) ? 0.0 : max(_1893, 0.0))) * _1132))) + ((_3175 + ((isnan(0.0) ? _2183 : (isnan(_2183) ? 0.0 : max(_2183, 0.0))) * _1966)) * cbPerFrame._m0[3u].x);
    uint _3195 = _265 + 6u;
    float _3203 = _1069 / cbSceneParam._m0[86u].x;
    float _3204 = _1070 / cbSceneParam._m0[86u].y;
    vec4 _3218 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3203, _3204, (log2((isnan(cbSceneParam._m0[77u].w) ? _991 : (isnan(_991) ? cbSceneParam._m0[77u].w : min(_991, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3220 = _3218.x;
    float _3221 = _3218.y;
    float _3222 = _3218.z;
    float _3223 = _3218.w;
    float _3294;
    float _3296;
    float _3298;
    float _3300;
    if (_991 > cbSceneParam._m0[78u].w)
    {
        float _3257 = isnan(_991) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _991 : min(cbSceneParam._m0[80u].w, _991));
        float _3258 = _3257 / _991;
        float _3269 = _3258 * _1042;
        float _3270 = _1043 * _3258;
        float _3271 = (-0.0) - _3270;
        float _3272 = _3258 * _1044;
        float _3274 = (cbSceneParam._m0[77u].w * _3271) / _3257;
        float _3275 = _3274 + cbSceneParam._m0[79u].w;
        float _3276 = cbSceneParam._m0[79u].w - _3270;
        float _3282 = sqrt(((_3269 * _3269) + (_3270 * _3270)) + (_3272 * _3272));
        float _3285 = (1.0 - (cbSceneParam._m0[77u].w / _3257)) * _3282;
        float _3290 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3292 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3469;
        if (abs((_3271 - _3274) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3469 = ((((_3275 > 0.0) ? exp2(_3290 * _3275) : (2.0 - exp2(_3292 * _3275))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3285;
        }
        else
        {
            float _3413 = 1.0 / cbSceneParam._m0[80u].x;
            float _3414 = isnan(_3276) ? _3275 : (isnan(_3275) ? _3276 : max(_3275, _3276));
            float _3415 = isnan(_3276) ? _3275 : (isnan(_3275) ? _3276 : min(_3275, _3276));
            float _3424 = isnan(0.0) ? _3414 : (isnan(_3414) ? 0.0 : min(_3414, 0.0));
            float _3425 = isnan(0.0) ? _3415 : (isnan(_3415) ? 0.0 : min(_3415, 0.0));
            _3469 = ((abs(_3282 / _3271) * cbSceneParam._m0[80u].y) * ((((_3424 - _3425) * 2.0) - ((exp2(_3290 * (isnan(0.0) ? _3414 : (isnan(_3414) ? 0.0 : max(_3414, 0.0)))) - exp2(_3290 * (isnan(0.0) ? _3415 : (isnan(_3415) ? 0.0 : max(_3415, 0.0))))) * _3413)) - ((exp2(_3292 * _3424) - exp2(_3292 * _3425)) * _3413))) + (_3285 * cbSceneParam._m0[80u].z);
        }
        vec4 _3471 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3203, _3204, 1.0), 0.0);
        float _3480 = exp2((_3469 * (-1.44269502162933349609375)) * (1.0 - _3471.w));
        float _3481 = log2(_3480);
        float _3497 = log2(_3223);
        _3294 = (exp2(_3497 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3481 * cbSceneParam._m0[78u].x)) * _3471.x) / cbSceneParam._m0[78u].x)) + _3220;
        _3296 = (exp2(_3497 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3481 * cbSceneParam._m0[78u].y)) * _3471.y) / cbSceneParam._m0[78u].y)) + _3221;
        _3298 = (exp2(_3497 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3481 * cbSceneParam._m0[78u].z)) * _3471.z) / cbSceneParam._m0[78u].z)) + _3222;
        _3300 = _3480 * _3223;
    }
    else
    {
        _3294 = _3220;
        _3296 = _3221;
        _3298 = _3222;
        _3300 = _3223;
    }
    bool _3507;
    vec4 _3310;
    vec4 _3332;
    float _3334;
    float _3338;
    float _3339;
    float _3340;
    float _3341;
    bool _3351;
    for (;;)
    {
        _3310 = cbMatDynParam._m0[0u];
        float _3312 = roundEven(_3310.y);
        bool _3313 = _3312 == 3.0;
        float _3314 = log2(_3300);
        float _3321 = exp2(_3314 * cbSceneParam._m0[78u].x) * _3192;
        float _3322 = exp2(_3314 * cbSceneParam._m0[78u].y) * _3193;
        float _3323 = exp2(_3314 * cbSceneParam._m0[78u].z) * _3194;
        float _3330 = _1058 + (-0.5);
        _3332 = cbMtdParam._m0[1u];
        _3334 = _3332.y * _3330;
        float _3337 = (_3312 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3338 = _3337 * (_3313 ? _3321 : (_3321 + (cbSceneParam._m0[72u].w * _3294)));
        _3339 = _3337 * (_3313 ? _3322 : (_3322 + (cbSceneParam._m0[72u].w * _3296)));
        _3340 = _3337 * (_3313 ? _3323 : (_3323 + (cbSceneParam._m0[72u].w * _3298)));
        _3341 = _3330 * 0.999000012874603271484375;
        _3351 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3351)
        {
            if ((cbInstanceData._m0[_265 + 7u].x + _3341) < 0.5)
            {
                _3507 = true;
                break;
            }
        }
        uint _3448 = _1107 + uint(_3310.w);
        if ((cbInstanceData._m0[_3448].w < 1.0) && ((cbInstanceData._m0[_3448].w + _3341) < 0.5))
        {
            _3507 = true;
            break;
        }
        if ((_3334 + 1.0) < _3332.x)
        {
            _3507 = true;
            break;
        }
        _3507 = false;
        break;
    }
    float _3711;
    if (_3507)
    {
        discard_state = true;
        _3711 = 0.0;
    }
    else
    {
        _3711 = cbInstanceData._m0[_3195].w;
    }
    SV_Target.x = _3338;
    SV_Target.y = _3339;
    SV_Target.z = _3340;
    SV_Target.w = _3711;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_3195].w;
    discard_exit();
}


