#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 13) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_22;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_29;
layout(set = 0, binding = 20) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_6;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1223;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _222 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _223 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _224 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _230 = inversesqrt(dot(vec3(_222, _223, _224), vec3(_222, _223, _224)));
    float _237 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _244 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _256 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _258 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _259 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3531 = isnan(0.0) ? _256 : (isnan(_256) ? 0.0 : max(_256, 0.0));
    float _3542 = isnan(0.0) ? _258 : (isnan(_258) ? 0.0 : max(_258, 0.0));
    float _3553 = isnan(0.0) ? _259 : (isnan(_259) ? 0.0 : max(_259, 0.0));
    uint _269 = uint(roundEven(NORMAL.w)) * 13u;
    uint _274 = _269 + 1u;
    uint _278 = _269 + 2u;
    float _287 = sqrt(((cbInstanceData._m0[_274].x * cbInstanceData._m0[_274].x) + (cbInstanceData._m0[_269].x * cbInstanceData._m0[_269].x)) + (cbInstanceData._m0[_278].x * cbInstanceData._m0[_278].x));
    float _288 = _287 * TEXCOORD.z;
    float _289 = _287 * TEXCOORD.w;
    vec4 _302 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _288) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _289) + cbTextureTilingScale._m0[13u].w));
    vec4 _326 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _331 = _326.x * cbMtdParam._m0[11u].x;
    float _332 = _326.y * cbMtdParam._m0[11u].y;
    float _333 = _326.z * cbMtdParam._m0[11u].z;
    vec4 _352 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _288) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _289) + cbTextureTilingScale._m0[5u].w));
    vec4 _403 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _405 = _403.x;
    float _417 = dot(vec4(_405, _403.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _434 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w)).x) * 2.0) - ((((_405 - _417) * cbMtdParam._m0[24u].z) + _417) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3564 = isnan(0.0) ? _434 : (isnan(_434) ? 0.0 : max(_434, 0.0));
    float _435 = isnan(1.0) ? _3564 : (isnan(_3564) ? 1.0 : min(_3564, 1.0));
    float _442 = (_435 * ((_352.x * cbMtdParam._m0[12u].x) - _331)) + _331;
    float _443 = (_435 * ((_352.y * cbMtdParam._m0[12u].y) - _332)) + _332;
    float _444 = (_435 * ((_352.z * cbMtdParam._m0[12u].z) - _333)) + _333;
    float _448 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _302.x) * _442;
    float _451 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _302.y) * _443;
    float _454 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _302.z) * _444;
    float _461 = ((_442 - _448) * (isnan(1.0) ? _3531 : (isnan(_3531) ? 1.0 : min(_3531, 1.0)))) + _448;
    float _462 = ((_443 - _451) * (isnan(1.0) ? _3542 : (isnan(_3542) ? 1.0 : min(_3542, 1.0)))) + _451;
    float _463 = ((_444 - _454) * (isnan(1.0) ? _3553 : (isnan(_3553) ? 1.0 : min(_3553, 1.0)))) + _454;
    vec4 _476 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _288) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _289) + cbTextureTilingScale._m0[20u].w));
    vec4 _501 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _288) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _289) + cbTextureTilingScale._m0[4u].w));
    vec4 _518 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _520 = _518.x;
    float _521 = _518.y;
    float _522 = _518.z;
    float _531 = ((_501.z - _522) * _435) + _522;
    float _534 = ((((_501.x - _520) * _435) + _520) * 2.0) + (-1.0);
    float _535 = ((((_501.y - _521) * _435) + _521) * 2.0) + (-1.0);
    float _536 = dot(vec2(_534, _535), vec2(_534, _535));
    float _3575 = isnan(0.0) ? _536 : (isnan(_536) ? 0.0 : max(_536, 0.0));
    float _541 = sqrt(1.0 - (isnan(1.0) ? _3575 : (isnan(_3575) ? 1.0 : min(_3575, 1.0))));
    vec4 _563 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _575 = (_534 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_476.x * 2.0) + (-1.0)))) + (((_563.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _576 = (_535 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_476.y * 2.0) + (-1.0)))) + (((_563.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    vec4 _588 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _288) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _289) + cbTextureTilingScale._m0[19u].w));
    float _590 = _588.x;
    float _591 = 1.0 - _590;
    float _617 = (TEXCOORD_8.x - ((cbMtdParam._m0[22u].w * (1.0 - TEXCOORD_8.x)) * ((((_590 - _591) * cbMtdParam._m0[24u].y) + _591) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3586 = isnan(0.0) ? _617 : (isnan(_617) ? 0.0 : max(_617, 0.0));
    float _618 = isnan(1.0) ? _3586 : (isnan(_3586) ? 1.0 : min(_3586, 1.0));
    float _626 = ((((cbMtdParam._m0[10u].x - _461) * TEXCOORD_8.x) * cbMtdParam._m0[23u].w) * _618) + _461;
    float _627 = ((((cbMtdParam._m0[10u].y - _462) * TEXCOORD_8.y) * cbMtdParam._m0[23u].w) * _618) + _462;
    float _628 = (((cbMtdParam._m0[23u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _463)) * _618) + _463;
    float _633 = (((_476.z - _531) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _531;
    float _637 = ((_563.z - _633) * cbMtdParam._m0[19u].w) + _633;
    float _641 = ((cbMtdParam._m0[23u].y - _637) * _618) + _637;
    vec4 _660 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _288) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _289) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _666 = (_660.x * 2.0) + (-1.0);
    float _667 = (_660.y * 2.0) + (-1.0);
    float _668 = dot(vec2(_666, _667), vec2(_666, _667));
    float _3597 = isnan(0.0) ? _668 : (isnan(_668) ? 0.0 : max(_668, 0.0));
    float _684 = (_618 * (((cbMtdParam._m0[22u].z * _575) - _575) + _666)) + _575;
    float _685 = (_618 * (((cbMtdParam._m0[22u].z * _576) - _576) + _667)) + _576;
    float _686 = (_618 * (sqrt(1.0 - (isnan(1.0) ? _3597 : (isnan(_3597) ? 1.0 : min(_3597, 1.0)))) - _541)) + _541;
    float _688 = cbMtdParam._m0[22u].x + _563.w;
    float _691 = fma(_686, _237 * NORMAL.x, fma(_685, _244 * TANGENT.x, (_230 * _222) * _684));
    float _694 = fma(_686, _237 * NORMAL.y, fma(_685, _244 * TANGENT.y, (_230 * _223) * _684));
    float _697 = fma(_686, _237 * NORMAL.z, fma(_685, _244 * TANGENT.z, (_230 * _224) * _684));
    float _701 = inversesqrt(dot(vec3(_691, _694, _697), vec3(_691, _694, _697)));
    float _702 = _701 * _691;
    float _703 = _701 * _694;
    float _704 = _701 * _697;
    float _3608 = isnan(0.0) ? _641 : (isnan(_641) ? 0.0 : max(_641, 0.0));
    float _705 = isnan(1.0) ? _3608 : (isnan(_3608) ? 1.0 : min(_3608, 1.0));
    float _3619 = isnan(0.0) ? _688 : (isnan(_688) ? 0.0 : max(_688, 0.0));
    float _3630 = isnan(0.0) ? _626 : (isnan(_626) ? 0.0 : max(_626, 0.0));
    float _3641 = isnan(0.0) ? _627 : (isnan(_627) ? 0.0 : max(_627, 0.0));
    float _3652 = isnan(0.0) ? _628 : (isnan(_628) ? 0.0 : max(_628, 0.0));
    float _723 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _764 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _774 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _764);
    float _775 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _764);
    float _776 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _764);
    float _780 = inversesqrt(dot(vec3(_774, _775, _776), vec3(_774, _775, _776)));
    float _781 = _774 * _780;
    float _782 = _775 * _780;
    float _783 = _776 * _780;
    float _789 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _790 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _808 = fma(_704, cbSceneParam._m0[5u].z, fma(_703, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _702));
    float _811 = fma(_704, cbSceneParam._m0[6u].z, fma(_703, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _702));
    float _814 = fma(_704, cbSceneParam._m0[7u].z, fma(_703, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _702));
    uint _828 = (_269 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _834 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3630 : (isnan(_3630) ? 1.0 : min(_3630, 1.0)))) * cbInstanceData._m0[_828].x;
    float _835 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3641 : (isnan(_3641) ? 1.0 : min(_3641, 1.0)))) * cbInstanceData._m0[_828].y;
    float _836 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3652 : (isnan(_3652) ? 1.0 : min(_3652, 1.0)))) * cbInstanceData._m0[_828].z;
    float _3663 = isnan(0.0) ? _834 : (isnan(_834) ? 0.0 : max(_834, 0.0));
    float _837 = isnan(1.0) ? _3663 : (isnan(_3663) ? 1.0 : min(_3663, 1.0));
    float _3674 = isnan(0.0) ? _835 : (isnan(_835) ? 0.0 : max(_835, 0.0));
    float _838 = isnan(1.0) ? _3674 : (isnan(_3674) ? 1.0 : min(_3674, 1.0));
    float _3685 = isnan(0.0) ? _836 : (isnan(_836) ? 0.0 : max(_836, 0.0));
    float _839 = isnan(1.0) ? _3685 : (isnan(_3685) ? 1.0 : min(_3685, 1.0));
    vec4 _848 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _789, cbSceneParam._m0[86u].y * _790));
    float _852 = ((isnan(1.0) ? _3619 : (isnan(_3619) ? 1.0 : min(_3619, 1.0))) * TEXCOORD_5.w) * _848.x;
    float _853 = dot(vec3(_702, _703, _704), vec3(_781, _782, _783));
    float _856 = _853 * 2.0;
    float _860 = (_856 * _702) - _781;
    float _861 = (_856 * _703) - _782;
    float _862 = (_856 * _704) - _783;
    float _866 = abs(dot(vec3(_781, _782, _783), vec3(_702, _703, _704)));
    float _3696 = isnan(0.0) ? _866 : (isnan(_866) ? 0.0 : max(_866, 0.0));
    float _868 = sqrt(_705);
    float _881 = exp2((_868 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3696 : (isnan(_3696) ? 1.0 : min(_3696, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_868 * 3.0));
    float _913 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _917 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _921 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1222;
    float _1224;
    float _1225;
    float _1226;
    float _1227;
    float _1228;
    float _1229;
    float _1230;
    float _1231;
    float _1232;
    float _1233;
    float _1234;
    float _1235;
    float _1236;
    float _1237;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _947 = fma(_921, cbModelParam._m0[26u].z, fma(_917, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _913));
        float _951 = fma(_921, cbModelParam._m0[27u].z, fma(_917, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _913));
        float _955 = fma(_921, cbModelParam._m0[28u].z, fma(_917, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _913));
        float _980 = _913 + _702;
        float _981 = _917 + _703;
        float _982 = _921 + _704;
        float _992 = fma(_982, cbModelParam._m0[26u].z, fma(_981, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _980)) - _947;
        float _993 = fma(_982, cbModelParam._m0[27u].z, fma(_981, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _980)) - _951;
        float _994 = fma(_982, cbModelParam._m0[28u].z, fma(_981, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _980)) - _955;
        float _998 = inversesqrt(dot(vec3(_992, _993, _994), vec3(_992, _993, _994)));
        float _1011 = ((_998 * _992) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_947 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1012 = ((_998 * _993) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_951 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1013 = ((_998 * _994) / cbModelParam._m0[34u].z) + ((((((_955 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1016 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1011, _1012, _1013), 0.0);
        vec4 _1023 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1011, _1012, _1013), 0.0);
        vec4 _1030 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1011, _1012, _1013), 0.0);
        vec4 _1037 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1011, _1012, _1013), 0.0);
        float _1050 = exp2((_1016.w + (-0.5)) * 20.0) * 2.0;
        float _1051 = _1050 * (_1016.x + (-0.5));
        float _1052 = _1050 * (_1016.y + (-0.5));
        float _1053 = _1050 * (_1016.z + (-0.5));
        float _1060 = exp2((_1023.w + (-0.5)) * 20.0) * 2.0;
        float _1061 = _1060 * (_1023.x + (-0.5));
        float _1062 = _1060 * (_1023.y + (-0.5));
        float _1063 = _1060 * (_1023.z + (-0.5));
        float _1070 = exp2((_1030.w + (-0.5)) * 20.0) * 2.0;
        float _1071 = _1070 * (_1030.x + (-0.5));
        float _1072 = _1070 * (_1030.y + (-0.5));
        float _1073 = _1070 * (_1030.z + (-0.5));
        float _1080 = exp2((_1037.w + (-0.5)) * 20.0) * 2.0;
        float _1081 = _1080 * (_1037.x + (-0.5));
        float _1082 = _1080 * (_1037.y + (-0.5));
        float _1083 = _1080 * (_1037.z + (-0.5));
        float _1084 = isnan(0.0) ? _1081 : (isnan(_1081) ? 0.0 : max(_1081, 0.0));
        float _1085 = isnan(0.0) ? _1082 : (isnan(_1082) ? 0.0 : max(_1082, 0.0));
        float _1086 = isnan(0.0) ? _1083 : (isnan(_1083) ? 0.0 : max(_1083, 0.0));
        float _1087 = _1051 * 0.5;
        float _1088 = _1061 * 0.5;
        float _1089 = _1071 * 0.5;
        float _1090 = dot(vec3(_1087, _1088, _1089), vec3(_1087, _1088, _1089));
        float _1095 = (_1090 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1090);
        float _1104 = (dot(vec3(_702, _703, _704), vec3(_1095 * _1087, _1095 * _1088, _1095 * _1089)) + 1.0) * 0.5;
        float _3722 = isnan(0.0) ? _1104 : (isnan(_1104) ? 0.0 : max(_1104, 0.0));
        float _1114 = sqrt(((_1088 * _1088) + (_1087 * _1087)) + (_1089 * _1089)) / (_1084 + 9.9999997473787516355514526367188e-06);
        float _3733 = isnan(0.0) ? _1114 : (isnan(_1114) ? 0.0 : max(_1114, 0.0));
        float _1115 = isnan(1.0) ? _3733 : (isnan(_3733) ? 1.0 : min(_3733, 1.0));
        float _1116 = _1115 * 2.0;
        float _1120 = (1.0 - _1115) / (_1115 + 1.0);
        float _3744 = isnan(0.0) ? _1120 : (isnan(_1120) ? 0.0 : max(_1120, 0.0));
        float _1121 = isnan(1.0) ? _3744 : (isnan(_3744) ? 1.0 : min(_3744, 1.0));
        float _1130 = ((((1.0 - _1121) * (_1116 + 2.0)) * exp2(log2(isnan(1.0) ? _3722 : (isnan(_3722) ? 1.0 : min(_3722, 1.0))) * (_1116 + 1.0))) + _1121) * _1084;
        float _1131 = _1052 * 0.5;
        float _1132 = _1062 * 0.5;
        float _1133 = _1072 * 0.5;
        float _1134 = dot(vec3(_1131, _1132, _1133), vec3(_1131, _1132, _1133));
        float _1139 = (_1134 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1134);
        float _1147 = (dot(vec3(_702, _703, _704), vec3(_1139 * _1131, _1139 * _1132, _1139 * _1133)) + 1.0) * 0.5;
        float _3755 = isnan(0.0) ? _1147 : (isnan(_1147) ? 0.0 : max(_1147, 0.0));
        float _1156 = sqrt(((_1132 * _1132) + (_1131 * _1131)) + (_1133 * _1133)) / (_1085 + 9.9999997473787516355514526367188e-06);
        float _3766 = isnan(0.0) ? _1156 : (isnan(_1156) ? 0.0 : max(_1156, 0.0));
        float _1157 = isnan(1.0) ? _3766 : (isnan(_3766) ? 1.0 : min(_3766, 1.0));
        float _1158 = _1157 * 2.0;
        float _1162 = (1.0 - _1157) / (_1157 + 1.0);
        float _3777 = isnan(0.0) ? _1162 : (isnan(_1162) ? 0.0 : max(_1162, 0.0));
        float _1163 = isnan(1.0) ? _3777 : (isnan(_3777) ? 1.0 : min(_3777, 1.0));
        float _1172 = ((((1.0 - _1163) * (_1158 + 2.0)) * exp2(log2(isnan(1.0) ? _3755 : (isnan(_3755) ? 1.0 : min(_3755, 1.0))) * (_1158 + 1.0))) + _1163) * _1085;
        float _1173 = _1053 * 0.5;
        float _1174 = _1063 * 0.5;
        float _1175 = _1073 * 0.5;
        float _1176 = dot(vec3(_1173, _1174, _1175), vec3(_1173, _1174, _1175));
        float _1181 = (_1176 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1176);
        float _1189 = (dot(vec3(_702, _703, _704), vec3(_1181 * _1173, _1181 * _1174, _1181 * _1175)) + 1.0) * 0.5;
        float _3788 = isnan(0.0) ? _1189 : (isnan(_1189) ? 0.0 : max(_1189, 0.0));
        float _1198 = sqrt(((_1174 * _1174) + (_1173 * _1173)) + (_1175 * _1175)) / (_1086 + 9.9999997473787516355514526367188e-06);
        float _3799 = isnan(0.0) ? _1198 : (isnan(_1198) ? 0.0 : max(_1198, 0.0));
        float _1199 = isnan(1.0) ? _3799 : (isnan(_3799) ? 1.0 : min(_3799, 1.0));
        float _1200 = _1199 * 2.0;
        float _1204 = (1.0 - _1199) / (_1199 + 1.0);
        float _3810 = isnan(0.0) ? _1204 : (isnan(_1204) ? 0.0 : max(_1204, 0.0));
        float _1205 = isnan(1.0) ? _3810 : (isnan(_3810) ? 1.0 : min(_3810, 1.0));
        float _1214 = ((((1.0 - _1205) * (_1200 + 2.0)) * exp2(log2(isnan(1.0) ? _3788 : (isnan(_3788) ? 1.0 : min(_3788, 1.0))) * (_1200 + 1.0))) + _1205) * _1086;
        _1222 = _1053;
        _1224 = _1052;
        _1225 = _1051;
        _1226 = _1063;
        _1227 = _1062;
        _1228 = _1061;
        _1229 = _1073;
        _1230 = _1072;
        _1231 = _1071;
        _1232 = _1086;
        _1233 = _1085;
        _1234 = _1084;
        _1235 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1130 : (isnan(_1130) ? 0.0 : max(_1130, 0.0)));
        _1236 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1172 : (isnan(_1172) ? 0.0 : max(_1172, 0.0)));
        _1237 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1214 : (isnan(_1214) ? 0.0 : max(_1214, 0.0)));
    }
    else
    {
        _1222 = _1223;
        _1224 = _1223;
        _1225 = _1223;
        _1226 = _1223;
        _1227 = _1223;
        _1228 = _1223;
        _1229 = _1223;
        _1230 = _1223;
        _1231 = _1223;
        _1232 = _1223;
        _1233 = _1223;
        _1234 = _1223;
        _1235 = 0.0;
        _1236 = 0.0;
        _1237 = 0.0;
    }
    float _1531;
    float _1532;
    float _1533;
    float _1534;
    float _1535;
    float _1536;
    float _1537;
    float _1538;
    float _1539;
    float _1540;
    float _1541;
    float _1542;
    float _1543;
    float _1544;
    float _1545;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1262 = fma(_921, cbModelParam._m0[30u].z, fma(_917, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _913));
        float _1266 = fma(_921, cbModelParam._m0[31u].z, fma(_917, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _913));
        float _1270 = fma(_921, cbModelParam._m0[32u].z, fma(_917, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _913));
        float _1293 = _913 + _702;
        float _1294 = _917 + _703;
        float _1295 = _921 + _704;
        float _1305 = fma(_1295, cbModelParam._m0[30u].z, fma(_1294, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1293)) - _1262;
        float _1306 = fma(_1295, cbModelParam._m0[31u].z, fma(_1294, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1293)) - _1266;
        float _1307 = fma(_1295, cbModelParam._m0[32u].z, fma(_1294, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1293)) - _1270;
        float _1311 = inversesqrt(dot(vec3(_1305, _1306, _1307), vec3(_1305, _1306, _1307)));
        float _1324 = ((_1311 * _1305) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1262 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1325 = ((_1311 * _1306) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1266 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1326 = ((_1311 * _1307) / cbModelParam._m0[35u].z) + ((((((_1270 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1328 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1324, _1325, _1326), 0.0);
        vec4 _1335 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1324, _1325, _1326), 0.0);
        vec4 _1342 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1324, _1325, _1326), 0.0);
        vec4 _1349 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1324, _1325, _1326), 0.0);
        float _1361 = exp2((_1328.w + (-0.5)) * 20.0) * 2.0;
        float _1362 = _1361 * (_1328.x + (-0.5));
        float _1363 = _1361 * (_1328.y + (-0.5));
        float _1364 = _1361 * (_1328.z + (-0.5));
        float _1371 = exp2((_1335.w + (-0.5)) * 20.0) * 2.0;
        float _1372 = _1371 * (_1335.x + (-0.5));
        float _1373 = _1371 * (_1335.y + (-0.5));
        float _1374 = _1371 * (_1335.z + (-0.5));
        float _1381 = exp2((_1342.w + (-0.5)) * 20.0) * 2.0;
        float _1382 = _1381 * (_1342.x + (-0.5));
        float _1383 = _1381 * (_1342.y + (-0.5));
        float _1384 = _1381 * (_1342.z + (-0.5));
        float _1391 = exp2((_1349.w + (-0.5)) * 20.0) * 2.0;
        float _1392 = _1391 * (_1349.x + (-0.5));
        float _1393 = _1391 * (_1349.y + (-0.5));
        float _1394 = _1391 * (_1349.z + (-0.5));
        float _1395 = isnan(0.0) ? _1392 : (isnan(_1392) ? 0.0 : max(_1392, 0.0));
        float _1396 = isnan(0.0) ? _1393 : (isnan(_1393) ? 0.0 : max(_1393, 0.0));
        float _1397 = isnan(0.0) ? _1394 : (isnan(_1394) ? 0.0 : max(_1394, 0.0));
        float _1398 = _1362 * 0.5;
        float _1399 = _1372 * 0.5;
        float _1400 = _1382 * 0.5;
        float _1401 = dot(vec3(_1398, _1399, _1400), vec3(_1398, _1399, _1400));
        float _1406 = (_1401 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1401);
        float _1414 = (dot(vec3(_702, _703, _704), vec3(_1406 * _1398, _1406 * _1399, _1406 * _1400)) + 1.0) * 0.5;
        float _3851 = isnan(0.0) ? _1414 : (isnan(_1414) ? 0.0 : max(_1414, 0.0));
        float _1423 = sqrt(((_1399 * _1399) + (_1398 * _1398)) + (_1400 * _1400)) / (_1395 + 9.9999997473787516355514526367188e-06);
        float _3862 = isnan(0.0) ? _1423 : (isnan(_1423) ? 0.0 : max(_1423, 0.0));
        float _1424 = isnan(1.0) ? _3862 : (isnan(_3862) ? 1.0 : min(_3862, 1.0));
        float _1425 = _1424 * 2.0;
        float _1429 = (1.0 - _1424) / (_1424 + 1.0);
        float _3873 = isnan(0.0) ? _1429 : (isnan(_1429) ? 0.0 : max(_1429, 0.0));
        float _1430 = isnan(1.0) ? _3873 : (isnan(_3873) ? 1.0 : min(_3873, 1.0));
        float _1439 = ((((1.0 - _1430) * (_1425 + 2.0)) * exp2(log2(isnan(1.0) ? _3851 : (isnan(_3851) ? 1.0 : min(_3851, 1.0))) * (_1425 + 1.0))) + _1430) * _1395;
        float _1440 = _1363 * 0.5;
        float _1441 = _1373 * 0.5;
        float _1442 = _1383 * 0.5;
        float _1443 = dot(vec3(_1440, _1441, _1442), vec3(_1440, _1441, _1442));
        float _1448 = (_1443 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1443);
        float _1456 = (dot(vec3(_702, _703, _704), vec3(_1448 * _1440, _1448 * _1441, _1448 * _1442)) + 1.0) * 0.5;
        float _3884 = isnan(0.0) ? _1456 : (isnan(_1456) ? 0.0 : max(_1456, 0.0));
        float _1465 = sqrt(((_1441 * _1441) + (_1440 * _1440)) + (_1442 * _1442)) / (_1396 + 9.9999997473787516355514526367188e-06);
        float _3895 = isnan(0.0) ? _1465 : (isnan(_1465) ? 0.0 : max(_1465, 0.0));
        float _1466 = isnan(1.0) ? _3895 : (isnan(_3895) ? 1.0 : min(_3895, 1.0));
        float _1467 = _1466 * 2.0;
        float _1471 = (1.0 - _1466) / (_1466 + 1.0);
        float _3906 = isnan(0.0) ? _1471 : (isnan(_1471) ? 0.0 : max(_1471, 0.0));
        float _1472 = isnan(1.0) ? _3906 : (isnan(_3906) ? 1.0 : min(_3906, 1.0));
        float _1481 = ((((1.0 - _1472) * (_1467 + 2.0)) * exp2(log2(isnan(1.0) ? _3884 : (isnan(_3884) ? 1.0 : min(_3884, 1.0))) * (_1467 + 1.0))) + _1472) * _1396;
        float _1482 = _1364 * 0.5;
        float _1483 = _1374 * 0.5;
        float _1484 = _1384 * 0.5;
        float _1485 = dot(vec3(_1482, _1483, _1484), vec3(_1482, _1483, _1484));
        float _1490 = (_1485 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1485);
        float _1498 = (dot(vec3(_702, _703, _704), vec3(_1490 * _1482, _1490 * _1483, _1490 * _1484)) + 1.0) * 0.5;
        float _3917 = isnan(0.0) ? _1498 : (isnan(_1498) ? 0.0 : max(_1498, 0.0));
        float _1507 = sqrt(((_1483 * _1483) + (_1482 * _1482)) + (_1484 * _1484)) / (_1397 + 9.9999997473787516355514526367188e-06);
        float _3928 = isnan(0.0) ? _1507 : (isnan(_1507) ? 0.0 : max(_1507, 0.0));
        float _1508 = isnan(1.0) ? _3928 : (isnan(_3928) ? 1.0 : min(_3928, 1.0));
        float _1509 = _1508 * 2.0;
        float _1513 = (1.0 - _1508) / (_1508 + 1.0);
        float _3939 = isnan(0.0) ? _1513 : (isnan(_1513) ? 0.0 : max(_1513, 0.0));
        float _1514 = isnan(1.0) ? _3939 : (isnan(_3939) ? 1.0 : min(_3939, 1.0));
        float _1523 = ((((1.0 - _1514) * (_1509 + 2.0)) * exp2(log2(isnan(1.0) ? _3917 : (isnan(_3917) ? 1.0 : min(_3917, 1.0))) * (_1509 + 1.0))) + _1514) * _1397;
        _1531 = _1364;
        _1532 = _1363;
        _1533 = _1362;
        _1534 = _1374;
        _1535 = _1373;
        _1536 = _1372;
        _1537 = _1384;
        _1538 = _1383;
        _1539 = _1382;
        _1540 = _1397;
        _1541 = _1396;
        _1542 = _1395;
        _1543 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1439 : (isnan(_1439) ? 0.0 : max(_1439, 0.0)));
        _1544 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1481 : (isnan(_1481) ? 0.0 : max(_1481, 0.0)));
        _1545 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1523 : (isnan(_1523) ? 0.0 : max(_1523, 0.0)));
    }
    else
    {
        _1531 = _1223;
        _1532 = _1223;
        _1533 = _1223;
        _1534 = _1223;
        _1535 = _1223;
        _1536 = _1223;
        _1537 = _1223;
        _1538 = _1223;
        _1539 = _1223;
        _1540 = _1223;
        _1541 = _1223;
        _1542 = _1223;
        _1543 = 0.0;
        _1544 = 0.0;
        _1545 = 0.0;
    }
    float _1555 = (cbModelParam._m0[1u].x * (_1543 - _1235)) + _1235;
    float _1556 = (cbModelParam._m0[1u].x * (_1544 - _1236)) + _1236;
    float _1557 = (cbModelParam._m0[1u].x * (_1545 - _1237)) + _1237;
    float _1578 = fma(_1557, cbSceneParam._m0[89u].z, fma(_1556, cbSceneParam._m0[89u].y, _1555 * cbSceneParam._m0[89u].x));
    float _1581 = fma(_1557, cbSceneParam._m0[90u].z, fma(_1556, cbSceneParam._m0[90u].y, _1555 * cbSceneParam._m0[90u].x));
    float _1584 = fma(_1557, cbSceneParam._m0[91u].z, fma(_1556, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1555));
    float _1599 = _860 * 0.5;
    float _1600 = _861 * 0.5;
    float _1601 = _862 * 0.5;
    float _1602 = dot(vec4(_1599, _1600, _1601, 1.0), vec4(_1533, _1536, _1539, _1542));
    float _1605 = dot(vec4(_1599, _1600, _1601, 1.0), vec4(_1532, _1535, _1538, _1541));
    float _1608 = dot(vec4(_1599, _1600, _1601, 1.0), vec4(_1531, _1534, _1537, _1540));
    float _1642;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1615 = dot(vec4(_1599, _1600, _1601, 1.0), vec4(_1222, _1226, _1229, _1232));
        float _1619 = dot(vec4(_1599, _1600, _1601, 1.0), vec4(_1224, _1227, _1230, _1233));
        float _1623 = dot(vec4(_1599, _1600, _1601, 1.0), vec4(_1225, _1228, _1231, _1234));
        float _1630 = dot(vec4(cbModelParam._m0[39u]), vec4(_1599, _1600, _1601, 1.0));
        _1642 = dot(vec3(isnan(0.0) ? _1623 : (isnan(_1623) ? 0.0 : max(_1623, 0.0)), isnan(0.0) ? _1619 : (isnan(_1619) ? 0.0 : max(_1619, 0.0)), isnan(0.0) ? _1615 : (isnan(_1615) ? 0.0 : max(_1615, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1630) ? 0.0 : (isnan(0.0) ? _1630 : max(0.0, _1630))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1642 = 1.0;
    }
    float _1653;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1644 = dot(vec4(cbModelParam._m0[40u]), vec4(_1599, _1600, _1601, 1.0));
        _1653 = dot(vec3(isnan(0.0) ? _1602 : (isnan(_1602) ? 0.0 : max(_1602, 0.0)), isnan(0.0) ? _1605 : (isnan(_1605) ? 0.0 : max(_1605, 0.0)), isnan(0.0) ? _1608 : (isnan(_1608) ? 0.0 : max(_1608, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1644) ? 0.0 : (isnan(0.0) ? _1644 : max(0.0, _1644))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1653 = 1.0;
    }
    float _1657 = (_1653 * cbModelParam._m0[1u].x) + (_1642 * (1.0 - cbModelParam._m0[1u].x));
    float _1667 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _705);
    float _1668 = isnan(_1667) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1667 : min(cbModelParam._m0[25u].z, _1667));
    float _1750;
    float _1752;
    float _1754;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1717 = fma(_921, cbModelParam._m0[13u].z, fma(_917, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _913)) + cbModelParam._m0[13u].w;
        float _1721 = fma(_921, cbModelParam._m0[14u].z, fma(_917, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _913)) + cbModelParam._m0[14u].w;
        float _1725 = fma(_921, cbModelParam._m0[15u].z, fma(_917, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _913)) + cbModelParam._m0[15u].w;
        float _1728 = fma(_862, cbModelParam._m0[13u].z, fma(_861, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _860));
        float _1731 = fma(_862, cbModelParam._m0[14u].z, fma(_861, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _860));
        float _1734 = fma(_862, cbModelParam._m0[15u].z, fma(_861, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _860));
        float _1762;
        if (_1728 > 0.0)
        {
            _1762 = abs((1.0 - _1717) / _1728);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1728 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1717 + 1.0) / _1728);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1762 = frontier_phi_14_12_ladder;
        }
        float _1964;
        if (_1731 > 0.0)
        {
            _1964 = abs((1.0 - _1721) / _1731);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1731 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1721 + 1.0) / _1731);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1964 = frontier_phi_23_19_ladder;
        }
        float _2207;
        if (_1734 > 0.0)
        {
            _2207 = abs((1.0 - _1725) / _1734);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1734 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1725 + 1.0) / _1734);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2207 = frontier_phi_35_30_ladder;
        }
        float _2209 = isnan(_1964) ? _1762 : (isnan(_1762) ? _1964 : min(_1762, _1964));
        float _2210 = isnan(_2207) ? _2209 : (isnan(_2209) ? _2207 : min(_2209, _2207));
        float _2214 = (_2210 * _1728) + _1717;
        float _2215 = (_2210 * _1731) + _1721;
        float _2216 = (_2210 * _1734) + _1725;
        float _2217 = _2210 * 9.9999997473787516355514526367188e-05;
        float _2219 = (-1.0) - _2217;
        float _2221 = _2217 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2216 > _2221) || ((_2216 < _2219) || ((_2215 > _2221) || ((_2215 < _2219) || ((_2214 < _2219) || (_2214 > _2221))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2340 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2216, cbModelParam._m0[9u].z, fma(_2215, cbModelParam._m0[9u].y, _2214 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2216, cbModelParam._m0[10u].z, fma(_2215, cbModelParam._m0[10u].y, _2214 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2216, cbModelParam._m0[11u].z, fma(_2215, cbModelParam._m0[11u].y, _2214 * cbModelParam._m0[11u].x))), _1668);
            frontier_phi_13_35_ladder = _2340.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2340.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2340.x * cbModelParam._m0[1u].y;
        }
        _1750 = frontier_phi_13_35_ladder_2;
        _1752 = frontier_phi_13_35_ladder_1;
        _1754 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1738 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_860, _861, _862), _1668);
        _1750 = _1738.x * cbModelParam._m0[1u].y;
        _1752 = _1738.y * cbModelParam._m0[1u].y;
        _1754 = _1738.z * cbModelParam._m0[1u].y;
    }
    float _1758 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _705);
    float _1759 = isnan(_1758) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1758 : min(cbModelParam._m0[25u].w, _1758));
    float _1850;
    float _1852;
    float _1854;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1814 = fma(_921, cbModelParam._m0[21u].z, fma(_917, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _913)) + cbModelParam._m0[21u].w;
        float _1818 = fma(_921, cbModelParam._m0[22u].z, fma(_917, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _913)) + cbModelParam._m0[22u].w;
        float _1822 = fma(_921, cbModelParam._m0[23u].z, fma(_917, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _913)) + cbModelParam._m0[23u].w;
        float _1825 = fma(_862, cbModelParam._m0[21u].z, fma(_861, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _860));
        float _1828 = fma(_862, cbModelParam._m0[22u].z, fma(_861, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _860));
        float _1831 = fma(_862, cbModelParam._m0[23u].z, fma(_861, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _860));
        float _1969;
        if (_1825 > 0.0)
        {
            _1969 = abs((1.0 - _1814) / _1825);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1825 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1814 + 1.0) / _1825);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1969 = frontier_phi_25_21_ladder;
        }
        float _2234;
        if (_1828 > 0.0)
        {
            _2234 = abs((1.0 - _1818) / _1828);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1828 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1818 + 1.0) / _1828);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2234 = frontier_phi_37_32_ladder;
        }
        float _2439;
        if (_1831 > 0.0)
        {
            _2439 = abs((1.0 - _1822) / _1831);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1831 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1822 + 1.0) / _1831);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2439 = frontier_phi_46_43_ladder;
        }
        float _2441 = isnan(_2234) ? _1969 : (isnan(_1969) ? _2234 : min(_1969, _2234));
        float _2442 = isnan(_2439) ? _2441 : (isnan(_2441) ? _2439 : min(_2441, _2439));
        float _2446 = (_2442 * _1825) + _1814;
        float _2447 = (_2442 * _1828) + _1818;
        float _2448 = (_2442 * _1831) + _1822;
        float _2449 = _2442 * 9.9999997473787516355514526367188e-05;
        float _2450 = (-1.0) - _2449;
        float _2452 = _2449 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2448 > _2452) || ((_2448 < _2450) || ((_2447 > _2452) || ((_2447 < _2450) || ((_2446 < _2450) || (_2446 > _2452))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2647 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2448, cbModelParam._m0[17u].z, fma(_2447, cbModelParam._m0[17u].y, _2446 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2448, cbModelParam._m0[18u].z, fma(_2447, cbModelParam._m0[18u].y, _2446 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2448, cbModelParam._m0[19u].z, fma(_2447, cbModelParam._m0[19u].y, _2446 * cbModelParam._m0[19u].x))), _1759);
            frontier_phi_22_46_ladder = _2647.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2647.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2647.x * cbModelParam._m0[1u].z;
        }
        _1850 = frontier_phi_22_46_ladder_2;
        _1852 = frontier_phi_22_46_ladder_1;
        _1854 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1834 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_860, _861, _862), _1759);
        _1850 = _1834.x * cbModelParam._m0[1u].z;
        _1852 = _1834.y * cbModelParam._m0[1u].z;
        _1854 = _1834.z * cbModelParam._m0[1u].z;
    }
    float _1866 = ((((1.0 - _881) * ((_868 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_881 * _868)) * _852;
    float _1867 = _1866 * ((cbModelParam._m0[1u].w * (_1850 - _1750)) + _1750);
    float _1868 = _1866 * ((cbModelParam._m0[1u].w * (_1852 - _1752)) + _1752);
    float _1869 = _1866 * ((cbModelParam._m0[1u].w * (_1854 - _1754)) + _1754);
    float _1872 = fma(_1869, cbSceneParam._m0[89u].z, fma(_1868, cbSceneParam._m0[89u].y, _1867 * cbSceneParam._m0[89u].x));
    float _1875 = fma(_1869, cbSceneParam._m0[90u].z, fma(_1868, cbSceneParam._m0[90u].y, _1867 * cbSceneParam._m0[90u].x));
    float _1878 = fma(_1869, cbSceneParam._m0[91u].z, fma(_1868, cbSceneParam._m0[91u].y, _1867 * cbSceneParam._m0[91u].x));
    uvec4 _1888 = floatBitsToUint(cbInstanceData._m0[_269 + 5u]);
    uint _1890 = _1888.x * 14u;
    uint _1891 = _1890 + 13u;
    float _1898 = _852 + (-1.0);
    float _1903 = (cbLight._m0[_1891].x * _1898) + 1.0;
    float _1904 = (cbLight._m0[_1891].y * _1898) + 1.0;
    float _1905 = (cbLight._m0[_1891].z * _1898) + 1.0;
    float _1906 = (cbLight._m0[_1891].w * _1898) + 1.0;
    uint _1907 = _1890 + 5u;
    float _1913 = isnan(1.0) ? _1904 : (isnan(_1904) ? 1.0 : min(_1904, 1.0));
    uint _1917 = _1890 + 4u;
    float _1923 = isnan(1.0) ? _1903 : (isnan(_1903) ? 1.0 : min(_1903, 1.0));
    uint _1927 = _1890 | 1u;
    float _1938 = dot(vec3(cbLight._m0[_1890].xyz), vec3(_702, _703, _704));
    float _1941 = dot(vec3(cbLight._m0[_1927].xyz), vec3(_702, _703, _704));
    float _4075 = isnan(0.0) ? _1938 : (isnan(_1938) ? 0.0 : max(_1938, 0.0));
    float _4086 = isnan(0.0) ? _1941 : (isnan(_1941) ? 0.0 : max(_1941, 0.0));
    float _1946 = (isnan(1.0) ? _4075 : (isnan(_4075) ? 1.0 : min(_4075, 1.0))) * 0.3183098733425140380859375;
    float _1948 = (isnan(1.0) ? _4086 : (isnan(_4086) ? 1.0 : min(_4086, 1.0))) * 0.3183098733425140380859375;
    float _1955 = ((cbLight._m0[_1907].x * _1913) * _1948) + ((cbLight._m0[_1917].x * _1923) * _1946);
    float _1956 = ((_1913 * cbLight._m0[_1907].y) * _1948) + ((_1923 * cbLight._m0[_1917].y) * _1946);
    float _1957 = ((_1913 * cbLight._m0[_1907].z) * _1948) + ((_1923 * cbLight._m0[_1917].z) * _1946);
    uvec4 _1961 = floatBitsToUint(cbLight._m0[_1890 + 12u]);
    bool _1963 = _1961.x == 0u;
    float _1974;
    float _1976;
    float _1978;
    if (_1963)
    {
        _1974 = _1955;
        _1976 = _1956;
        _1978 = _1957;
    }
    else
    {
        uint _1982 = _1890 + 6u;
        float _1998 = (dot(vec3(cbLight._m0[_1890 + 2u].xyz), vec3(_702, _703, _704)) * 0.5) + 0.5;
        float _1999 = _1998 * _1998;
        float _4097 = isnan(0.0) ? _1999 : (isnan(_1999) ? 0.0 : max(_1999, 0.0));
        float _2000 = isnan(1.0) ? _4097 : (isnan(_4097) ? 1.0 : min(_4097, 1.0));
        float _2001 = isnan(1.0) ? _1905 : (isnan(_1905) ? 1.0 : min(_1905, 1.0));
        _1974 = (((cbLight._m0[_1982].x * 0.3183098733425140380859375) * _2000) * _2001) + _1955;
        _1976 = (((cbLight._m0[_1982].y * 0.3183098733425140380859375) * _2000) * _2001) + _1956;
        _1978 = (((cbLight._m0[_1982].z * 0.3183098733425140380859375) * _2000) * _2001) + _1957;
    }
    bool _1981 = _1961.y == 0u;
    float _2019;
    float _2021;
    float _2023;
    if (_1981)
    {
        _2019 = _1974;
        _2021 = _1976;
        _2023 = _1978;
    }
    else
    {
        uint _2178 = _1890 + 7u;
        float _2194 = (dot(vec3(cbLight._m0[_1890 + 3u].xyz), vec3(_702, _703, _704)) * 0.5) + 0.5;
        float _2195 = _2194 * _2194;
        float _4113 = isnan(0.0) ? _2195 : (isnan(_2195) ? 0.0 : max(_2195, 0.0));
        float _2196 = isnan(1.0) ? _4113 : (isnan(_4113) ? 1.0 : min(_4113, 1.0));
        float _2197 = isnan(1.0) ? _1906 : (isnan(_1906) ? 1.0 : min(_1906, 1.0));
        _2019 = (((cbLight._m0[_2178].x * 0.3183098733425140380859375) * _2196) * _2197) + _1974;
        _2021 = (((cbLight._m0[_2178].y * 0.3183098733425140380859375) * _2196) * _2197) + _1976;
        _2023 = (((cbLight._m0[_2178].z * 0.3183098733425140380859375) * _2196) * _2197) + _1978;
    }
    uint _2026 = _1890 + 8u;
    float _2039 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1890].w)) * _705) * 0.949999988079071044921875);
    float _2040 = _2039 * _2039;
    float _2041 = cbLight._m0[_1890].x + _781;
    float _2042 = cbLight._m0[_1890].y + _782;
    float _2043 = cbLight._m0[_1890].z + _783;
    float _2047 = inversesqrt(dot(vec3(_2041, _2042, _2043), vec3(_2041, _2042, _2043)));
    float _2048 = _2047 * _2041;
    float _2049 = _2047 * _2042;
    float _2050 = _2047 * _2043;
    float _2051 = dot(vec3(_702, _703, _704), vec3(cbLight._m0[_1890].xyz));
    float _4129 = isnan(0.0) ? _2051 : (isnan(_2051) ? 0.0 : max(_2051, 0.0));
    float _2054 = isnan(1.0) ? _4129 : (isnan(_4129) ? 1.0 : min(_4129, 1.0));
    float _4140 = isnan(0.0) ? _853 : (isnan(_853) ? 0.0 : max(_853, 0.0));
    float _2055 = isnan(1.0) ? _4140 : (isnan(_4140) ? 1.0 : min(_4140, 1.0));
    float _2056 = dot(vec3(_702, _703, _704), vec3(_2048, _2049, _2050));
    float _4151 = isnan(0.0) ? _2056 : (isnan(_2056) ? 0.0 : max(_2056, 0.0));
    float _2059 = isnan(1.0) ? _4151 : (isnan(_4151) ? 1.0 : min(_4151, 1.0));
    float _2060 = dot(vec3(cbLight._m0[_1890].xyz), vec3(_2048, _2049, _2050));
    float _4162 = isnan(0.0) ? _2060 : (isnan(_2060) ? 0.0 : max(_2060, 0.0));
    float _2064 = _2040 * _2040;
    float _2068 = ((_2059 * _2059) * (_2064 + (-1.0))) + 1.0;
    float _2079 = (exp2(log2(1.0 - (isnan(1.0) ? _4162 : (isnan(_4162) ? 1.0 : min(_4162, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2080 = 1.0 - _2040;
    float _2091 = (0.5 / (((_2055 * ((_2054 * _2080) + _2040)) + 9.9999999392252902907785028219223e-09) + (((_2055 * _2080) + _2040) * _2054))) * _2054;
    float _4173 = isnan(0.0) ? _2091 : (isnan(_2091) ? 0.0 : max(_2091, 0.0));
    float _2093 = (isnan(1.0) ? _4173 : (isnan(_4173) ? 1.0 : min(_4173, 1.0))) * (_2064 / ((_2068 * _2068) * 3.141590118408203125));
    uint _2104 = _1890 + 9u;
    float _2115 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1927].w)) * _705) * 0.949999988079071044921875);
    float _2116 = _2115 * _2115;
    float _2117 = cbLight._m0[_1927].x + _781;
    float _2118 = cbLight._m0[_1927].y + _782;
    float _2119 = cbLight._m0[_1927].z + _783;
    float _2123 = inversesqrt(dot(vec3(_2117, _2118, _2119), vec3(_2117, _2118, _2119)));
    float _2124 = _2123 * _2117;
    float _2125 = _2123 * _2118;
    float _2126 = _2123 * _2119;
    float _2127 = dot(vec3(_702, _703, _704), vec3(cbLight._m0[_1927].xyz));
    float _4184 = isnan(0.0) ? _2127 : (isnan(_2127) ? 0.0 : max(_2127, 0.0));
    float _2130 = isnan(1.0) ? _4184 : (isnan(_4184) ? 1.0 : min(_4184, 1.0));
    float _2131 = dot(vec3(_702, _703, _704), vec3(_2124, _2125, _2126));
    float _4195 = isnan(0.0) ? _2131 : (isnan(_2131) ? 0.0 : max(_2131, 0.0));
    float _2134 = isnan(1.0) ? _4195 : (isnan(_4195) ? 1.0 : min(_4195, 1.0));
    float _2135 = dot(vec3(cbLight._m0[_1927].xyz), vec3(_2124, _2125, _2126));
    float _4206 = isnan(0.0) ? _2135 : (isnan(_2135) ? 0.0 : max(_2135, 0.0));
    float _2139 = _2116 * _2116;
    float _2143 = ((_2134 * _2134) * (_2139 + (-1.0))) + 1.0;
    float _2152 = (exp2(log2(1.0 - (isnan(1.0) ? _4206 : (isnan(_4206) ? 1.0 : min(_4206, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2153 = 1.0 - _2116;
    float _2163 = (0.5 / (((_2055 * ((_2130 * _2153) + _2116)) + 9.9999999392252902907785028219223e-09) + (((_2055 * _2153) + _2116) * _2130))) * _2130;
    float _4217 = isnan(0.0) ? _2163 : (isnan(_2163) ? 0.0 : max(_2163, 0.0));
    float _2165 = (isnan(1.0) ? _4217 : (isnan(_4217) ? 1.0 : min(_4217, 1.0))) * (_2139 / ((_2143 * _2143) * 3.141590118408203125));
    float _2175 = (((_2152 * cbLight._m0[_2104].x) * _2165) * _1913) + (((_2079 * cbLight._m0[_2026].x) * _2093) * _1923);
    float _2176 = (((_2152 * cbLight._m0[_2104].y) * _2165) * _1913) + (((_2079 * cbLight._m0[_2026].y) * _2093) * _1923);
    float _2177 = (((_2152 * cbLight._m0[_2104].z) * _2165) * _1913) + (((_2079 * cbLight._m0[_2026].z) * _2093) * _1923);
    float _2239;
    float _2241;
    float _2243;
    if (_1963)
    {
        _2239 = _2175;
        _2241 = _2176;
        _2243 = _2177;
    }
    else
    {
        uint _2245 = _1890 + 2u;
        uint _2249 = _1890 + 10u;
        float _2263 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2245].w)) * _705) * 0.949999988079071044921875);
        float _2264 = _2263 * _2263;
        float _2265 = cbLight._m0[_2245].x + _781;
        float _2266 = cbLight._m0[_2245].y + _782;
        float _2267 = cbLight._m0[_2245].z + _783;
        float _2271 = inversesqrt(dot(vec3(_2265, _2266, _2267), vec3(_2265, _2266, _2267)));
        float _2272 = _2271 * _2265;
        float _2273 = _2271 * _2266;
        float _2274 = _2271 * _2267;
        float _2275 = dot(vec3(_702, _703, _704), vec3(cbLight._m0[_2245].xyz));
        float _4228 = isnan(0.0) ? _2275 : (isnan(_2275) ? 0.0 : max(_2275, 0.0));
        float _2278 = isnan(1.0) ? _4228 : (isnan(_4228) ? 1.0 : min(_4228, 1.0));
        float _2279 = dot(vec3(_702, _703, _704), vec3(_2272, _2273, _2274));
        float _4239 = isnan(0.0) ? _2279 : (isnan(_2279) ? 0.0 : max(_2279, 0.0));
        float _2282 = isnan(1.0) ? _4239 : (isnan(_4239) ? 1.0 : min(_4239, 1.0));
        float _2283 = dot(vec3(cbLight._m0[_2245].xyz), vec3(_2272, _2273, _2274));
        float _4250 = isnan(0.0) ? _2283 : (isnan(_2283) ? 0.0 : max(_2283, 0.0));
        float _2287 = _2264 * _2264;
        float _2291 = ((_2282 * _2282) * (_2287 + (-1.0))) + 1.0;
        float _2300 = (exp2(log2(1.0 - (isnan(1.0) ? _4250 : (isnan(_4250) ? 1.0 : min(_4250, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2301 = 1.0 - _2264;
        float _2311 = (0.5 / (((_2055 * ((_2278 * _2301) + _2264)) + 9.9999999392252902907785028219223e-09) + (((_2055 * _2301) + _2264) * _2278))) * _2278;
        float _4261 = isnan(0.0) ? _2311 : (isnan(_2311) ? 0.0 : max(_2311, 0.0));
        float _2313 = (isnan(1.0) ? _4261 : (isnan(_4261) ? 1.0 : min(_4261, 1.0))) * (_2287 / ((_2291 * _2291) * 3.141590118408203125));
        float _2314 = isnan(1.0) ? _1905 : (isnan(_1905) ? 1.0 : min(_1905, 1.0));
        _2239 = (((_2300 * cbLight._m0[_2249].x) * _2313) * _2314) + _2175;
        _2241 = (((_2300 * cbLight._m0[_2249].y) * _2313) * _2314) + _2176;
        _2243 = (((_2300 * cbLight._m0[_2249].z) * _2313) * _2314) + _2177;
    }
    float _2349;
    float _2351;
    float _2353;
    if (_1981)
    {
        _2349 = _2239;
        _2351 = _2241;
        _2353 = _2243;
    }
    else
    {
        uint _2360 = _1890 + 3u;
        uint _2364 = _1890 + 11u;
        float _2378 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2360].w)) * _705) * 0.949999988079071044921875);
        float _2379 = _2378 * _2378;
        float _2380 = cbLight._m0[_2360].x + _781;
        float _2381 = cbLight._m0[_2360].y + _782;
        float _2382 = cbLight._m0[_2360].z + _783;
        float _2386 = inversesqrt(dot(vec3(_2380, _2381, _2382), vec3(_2380, _2381, _2382)));
        float _2387 = _2386 * _2380;
        float _2388 = _2386 * _2381;
        float _2389 = _2386 * _2382;
        float _2390 = dot(vec3(_702, _703, _704), vec3(cbLight._m0[_2360].xyz));
        float _4277 = isnan(0.0) ? _2390 : (isnan(_2390) ? 0.0 : max(_2390, 0.0));
        float _2393 = isnan(1.0) ? _4277 : (isnan(_4277) ? 1.0 : min(_4277, 1.0));
        float _2394 = dot(vec3(_702, _703, _704), vec3(_2387, _2388, _2389));
        float _4288 = isnan(0.0) ? _2394 : (isnan(_2394) ? 0.0 : max(_2394, 0.0));
        float _2397 = isnan(1.0) ? _4288 : (isnan(_4288) ? 1.0 : min(_4288, 1.0));
        float _2398 = dot(vec3(cbLight._m0[_2360].xyz), vec3(_2387, _2388, _2389));
        float _4299 = isnan(0.0) ? _2398 : (isnan(_2398) ? 0.0 : max(_2398, 0.0));
        float _2402 = _2379 * _2379;
        float _2406 = ((_2397 * _2397) * (_2402 + (-1.0))) + 1.0;
        float _2415 = (exp2(log2(1.0 - (isnan(1.0) ? _4299 : (isnan(_4299) ? 1.0 : min(_4299, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2416 = 1.0 - _2379;
        float _2426 = (0.5 / (((_2055 * ((_2393 * _2416) + _2379)) + 9.9999999392252902907785028219223e-09) + (((_2055 * _2416) + _2379) * _2393))) * _2393;
        float _4310 = isnan(0.0) ? _2426 : (isnan(_2426) ? 0.0 : max(_2426, 0.0));
        float _2428 = (isnan(1.0) ? _4310 : (isnan(_4310) ? 1.0 : min(_4310, 1.0))) * (_2402 / ((_2406 * _2406) * 3.141590118408203125));
        float _2429 = isnan(1.0) ? _1906 : (isnan(_1906) ? 1.0 : min(_1906, 1.0));
        _2349 = (((_2415 * cbLight._m0[_2364].x) * _2428) * _2429) + _2239;
        _2351 = (((_2415 * cbLight._m0[_2364].y) * _2428) * _2429) + _2241;
        _2353 = (((_2415 * cbLight._m0[_2364].z) * _2428) * _2429) + _2243;
    }
    float _2564;
    float _2566;
    float _2568;
    float _2570;
    float _2572;
    float _2574;
    if (_1888.y == 0u)
    {
        float _2504 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2505 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2504;
        float _2506 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2504;
        float _2507 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2504;
        uvec4 _2519 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2520 = _2519.x;
        uint _2531 = uint((float(_2519.y) * floor(float(uint(cbSceneParam._m0[85u].y * _790) / _2520))) + floor(float(uint(cbSceneParam._m0[85u].x * _789) / _2520)));
        float _2541 = (log2(_2507 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2542 = isnan(0.0) ? _2541 : (isnan(_2541) ? 0.0 : max(_2541, 0.0));
        uint _2545 = uint(isnan(14.0) ? _2542 : (isnan(_2542) ? 14.0 : min(_2542, 14.0)));
        uvec4 _2550 = texelFetch(g_lightClusterGridBuffer, int(((_2545 << 2u) + (_2531 << 6u)) >> 2u));
        uint _2551 = _2550.x;
        uint _2552 = _2519.z;
        float _2652;
        float _2654;
        float _2656;
        float _2658;
        float _2660;
        float _2662;
        if (((((1u << ((_2552 >> 4u) & 15u)) + 4294967295u) & _2551) == 0u) || ((_2552 & 240u) == 0u))
        {
            _2652 = 0.0;
            _2654 = 0.0;
            _2656 = 0.0;
            _2658 = 0.0;
            _2660 = 0.0;
            _2662 = 0.0;
        }
        else
        {
            float _2653;
            float _2655;
            float _2657;
            float _2659;
            float _2661;
            float _2663;
            float _2797 = 0.0;
            float _2798 = 0.0;
            float _2799 = 0.0;
            float _2800 = 0.0;
            float _2801 = 0.0;
            float _2802 = 0.0;
            uint _2803 = 0u;
            uint _2812;
            bool _2813;
            for (;;)
            {
                _2812 = texelFetch(g_lightClassification, int((((_2545 << 5u) + (_2531 << 9u)) + (_2803 << 2u)) >> 2u)).x;
                _2813 = _2812 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2813)
                {
                    frontier_phi_61_pred = _2797;
                    frontier_phi_61_pred_1 = _2802;
                    frontier_phi_61_pred_2 = _2801;
                    frontier_phi_61_pred_3 = _2800;
                    frontier_phi_61_pred_4 = _2799;
                    frontier_phi_61_pred_5 = _2798;
                }
                else
                {
                    float _2921;
                    float _2922;
                    float _2923;
                    float _2924;
                    float _2925;
                    float _2926;
                    uint _2927;
                    _2921 = _2797;
                    _2922 = _2798;
                    _2923 = _2799;
                    _2924 = _2800;
                    _2925 = _2801;
                    _2926 = _2802;
                    _2927 = _2812;
                    float _2853;
                    float _2854;
                    float _2855;
                    float _2856;
                    float _2857;
                    float _2858;
                    for (;;)
                    {
                        uint _2931 = uint(findLSB(_2927)) + (_2803 << 5u);
                        uint _2928 = (_2927 + 4294967295u) & _2927;
                        uint _2933 = _2931 * 48u;
                        vec4 _2947 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2933)).x, texelFetch(g_PointLightRenderingBuffer, int(_2933 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2933 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2933 + 3u)).x));
                        uint _2953 = (_2931 * 48u) + 4u;
                        vec4 _2966 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2953)).x, texelFetch(g_PointLightRenderingBuffer, int(_2953 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2953 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2953 + 3u)).x));
                        uint _2972 = (_2931 * 48u) + 8u;
                        vec3 _2983 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2972)).x, texelFetch(g_PointLightRenderingBuffer, int(_2972 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2972 + 2u)).x));
                        float _2987 = _2947.x - _2505;
                        float _2988 = _2947.y - _2506;
                        float _2989 = _2947.z - _2507;
                        float _2990 = dot(vec3(_2987, _2988, _2989), vec3(_2987, _2988, _2989));
                        float _2993 = inversesqrt(_2990);
                        float _2994 = _2993 * _2987;
                        float _2995 = _2993 * _2988;
                        float _2996 = _2993 * _2989;
                        float _2997 = dot(vec3(_808, _811, _814), vec3(_2994, _2995, _2996));
                        float _3002 = 1.0 - (_2990 * _2947.w);
                        float _4336 = isnan(0.0) ? _3002 : (isnan(_3002) ? 0.0 : max(_3002, 0.0));
                        float _3003 = isnan(1.0) ? _4336 : (isnan(_4336) ? 1.0 : min(_4336, 1.0));
                        float _3004 = sqrt(_2990) * _2966.w;
                        float _3007 = 1.39999997615814208984375 / (_3004 + 1.39999997615814208984375);
                        float _3008 = _3007 * _3007;
                        float _3011 = ((1.0 - _3008) * _2997) + _3008;
                        float _3014 = _3004 * _3004;
                        float _3018 = ((isnan(0.0) ? _3011 : (isnan(_3011) ? 0.0 : max(_3011, 0.0))) * _3003) / ((_3014 * 0.699999988079071044921875) + 1.0);
                        float _3022 = (-0.0) - _2505;
                        float _3023 = (-0.0) - _2506;
                        float _3024 = (-0.0) - _2507;
                        float _3028 = inversesqrt(dot(vec3(_3022, _3023, _3024), vec3(_3022, _3023, _3024)));
                        float _3029 = _3028 * _3022;
                        float _3030 = _3028 * _3023;
                        float _3031 = _3028 * _3024;
                        float _3039 = exp2(log2(1.0 / ((_3014 * 3.5) + 5.0)) * 0.25);
                        float _3040 = 1.0 - _868;
                        float _3047 = sqrt(1.0 - ((1.0 - (_3040 * _3040)) * (1.0 - (_3039 * _3039))));
                        float _3048 = _3047 * _3047;
                        float _3049 = _3048 * _3048;
                        float _3050 = _3029 + _2994;
                        float _3051 = _3030 + _2995;
                        float _3052 = _3031 + _2996;
                        float _3056 = inversesqrt(dot(vec3(_3050, _3051, _3052), vec3(_3050, _3051, _3052)));
                        float _3060 = dot(vec3(_808, _811, _814), vec3(_3029, _3030, _3031));
                        float _4352 = isnan(0.0) ? _3060 : (isnan(_3060) ? 0.0 : max(_3060, 0.0));
                        float _3063 = isnan(1.0) ? _4352 : (isnan(_4352) ? 1.0 : min(_4352, 1.0));
                        float _3064 = dot(vec3(_808, _811, _814), vec3(_3056 * _3050, _3056 * _3051, _3056 * _3052));
                        float _4363 = isnan(0.0) ? _3064 : (isnan(_3064) ? 0.0 : max(_3064, 0.0));
                        float _3067 = isnan(1.0) ? _4363 : (isnan(_4363) ? 1.0 : min(_4363, 1.0));
                        float _3071 = ((_3067 * _3067) * (_3049 + (-1.0))) + 1.0;
                        float _3072 = _3007 * _3048;
                        float _3073 = _3072 * _3072;
                        float _3076 = ((1.0 - _3073) * _2997) + _3073;
                        float _4374 = isnan(0.0) ? _3076 : (isnan(_3076) ? 0.0 : max(_3076, 0.0));
                        float _3077 = isnan(1.0) ? _4374 : (isnan(_4374) ? 1.0 : min(_4374, 1.0));
                        float _3078 = 1.0 - _3048;
                        float _3088 = (0.5 / (((_3077 * ((_3063 * _3078) + _3048)) + 9.9999999392252902907785028219223e-09) + (((_3077 * _3078) + _3048) * _3063))) * _3077;
                        float _4385 = isnan(0.0) ? _3088 : (isnan(_3088) ? 0.0 : max(_3088, 0.0));
                        float _3099 = (((_3049 * 3.1415927410125732421875) * (isnan(1.0) ? _4385 : (isnan(_4385) ? 1.0 : min(_4385, 1.0)))) / ((_3071 * _3071) * ((_3014 * 2.1991131305694580078125) + 3.141590118408203125))) * _3003;
                        _2856 = (_3018 * _2966.x) + _2924;
                        _2857 = (_3018 * _2966.y) + _2925;
                        _2858 = (_3018 * _2966.z) + _2926;
                        _2853 = (_3099 * _2983.x) + _2921;
                        _2854 = (_3099 * _2983.y) + _2922;
                        _2855 = (_3099 * _2983.z) + _2923;
                        if (_2928 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2921 = _2853;
                            _2922 = _2854;
                            _2923 = _2855;
                            _2924 = _2856;
                            _2925 = _2857;
                            _2926 = _2858;
                            _2927 = _2928;
                        }
                    }
                    frontier_phi_61_pred = _2853;
                    frontier_phi_61_pred_1 = _2858;
                    frontier_phi_61_pred_2 = _2857;
                    frontier_phi_61_pred_3 = _2856;
                    frontier_phi_61_pred_4 = _2855;
                    frontier_phi_61_pred_5 = _2854;
                }
                _2653 = frontier_phi_61_pred;
                _2663 = frontier_phi_61_pred_1;
                _2661 = frontier_phi_61_pred_2;
                _2659 = frontier_phi_61_pred_3;
                _2657 = frontier_phi_61_pred_4;
                _2655 = frontier_phi_61_pred_5;
                uint _2804 = _2803 + 1u;
                if (_2804 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2797 = _2653;
                    _2798 = _2655;
                    _2799 = _2657;
                    _2800 = _2659;
                    _2801 = _2661;
                    _2802 = _2663;
                    _2803 = _2804;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2652 = _2653;
            _2654 = _2655;
            _2656 = _2657;
            _2658 = _2659;
            _2660 = _2661;
            _2662 = _2663;
        }
        uvec4 _2666 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2667 = _2666.z;
        uint _2669 = (_2667 >> 8u) & 15u;
        float _2765;
        float _2767;
        float _2769;
        float _2771;
        float _2773;
        float _2775;
        if (((4294967295u << _2669) & _2551) == 0u)
        {
            _2765 = _2652;
            _2767 = _2654;
            _2769 = _2656;
            _2771 = _2658;
            _2773 = _2660;
            _2775 = _2662;
        }
        else
        {
            float _2790 = inversesqrt(dot(vec3(_2505, _2506, _2507), vec3(_2505, _2506, _2507)));
            float _2791 = _2790 * _2505;
            float _2792 = _2790 * _2506;
            float _2793 = _2790 * _2507;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2669 < ((_2667 >> 12u) & 15u))
            {
                float _2766;
                float _2768;
                float _2770;
                float _2772;
                float _2774;
                float _2776;
                float _2904 = _2652;
                float _2905 = _2654;
                float _2906 = _2656;
                float _2907 = _2658;
                float _2908 = _2660;
                float _2909 = _2662;
                uint _2910 = _2669;
                uint _2919;
                bool _2920;
                for (;;)
                {
                    _2919 = texelFetch(g_lightClassification, int((((_2545 << 5u) + (_2531 << 9u)) + (_2910 << 2u)) >> 2u)).x;
                    _2920 = _2919 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_2920)
                    {
                        frontier_phi_67_pred = _2907;
                        frontier_phi_67_pred_1 = _2908;
                        frontier_phi_67_pred_2 = _2909;
                        frontier_phi_67_pred_3 = _2906;
                        frontier_phi_67_pred_4 = _2905;
                        frontier_phi_67_pred_5 = _2904;
                    }
                    else
                    {
                        float _3104;
                        float _3105;
                        float _3106;
                        float _3107;
                        float _3108;
                        float _3109;
                        float _3397;
                        float _3398;
                        float _3399;
                        float _3400;
                        float _3401;
                        float _3402;
                        float _3117 = _2904;
                        float _3118 = _2905;
                        float _3119 = _2906;
                        float _3120 = _2907;
                        float _3121 = _2908;
                        float _3122 = _2909;
                        uint _3123 = _2919;
                        uint _3124;
                        vec4 _3149;
                        float _3150;
                        vec4 _3165;
                        vec3 _3177;
                        vec4 _3192;
                        vec4 _3207;
                        float _3253;
                        bool _3254;
                        for (;;)
                        {
                            uint _3134 = ((_2910 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3123));
                            _3124 = (_3123 + 4294967295u) & _3123;
                            uint _3136 = _3134 * 40u;
                            _3149 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3136)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3136 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3136 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3136 + 3u)).x));
                            _3150 = _3149.w;
                            uint _3152 = (_3134 * 40u) + 4u;
                            _3165 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3152)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3152 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3152 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3152 + 3u)).x));
                            uint _3167 = (_3134 * 40u) + 8u;
                            _3177 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3167)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3167 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3167 + 2u)).x));
                            uint _3179 = (_3134 * 40u) + 16u;
                            _3192 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3179)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3179 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3179 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3179 + 3u)).x));
                            uint _3194 = (_3134 * 40u) + 20u;
                            _3207 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3194)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3194 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3194 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3194 + 3u)).x));
                            uint _3209 = (_3134 * 40u) + 24u;
                            vec4 _3222 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3209)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3209 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3209 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3209 + 3u)).x));
                            uint _3228 = (_3134 * 40u) + 28u;
                            vec4 _3241 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3228)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3228 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3228 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3228 + 3u)).x));
                            _3253 = fma(_2507, _3241.z, fma(_2506, _3241.y, _3241.x * _2505)) + _3241.w;
                            _3254 = !((fma(_2507, _3222.z, fma(_2506, _3222.y, _3222.x * _2505)) + _3222.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3254)
                            {
                                float _3281 = _3149.x - _2505;
                                float _3282 = _3149.y - _2506;
                                float _3283 = _3149.z - _2507;
                                float _3284 = dot(vec3(_3281, _3282, _3283), vec3(_3281, _3282, _3283));
                                float _3287 = inversesqrt(_3284);
                                float _3288 = _3287 * _3281;
                                float _3289 = _3287 * _3282;
                                float _3290 = _3287 * _3283;
                                float _3294 = 1.0 - (_3284 / (_3150 * _3150));
                                float _4396 = isnan(0.0) ? _3294 : (isnan(_3294) ? 0.0 : max(_3294, 0.0));
                                float _3295 = isnan(1.0) ? _4396 : (isnan(_4396) ? 1.0 : min(_4396, 1.0));
                                float _3299 = sqrt(_3284) * _3165.w;
                                float _3301 = 1.39999997615814208984375 / (_3299 + 1.39999997615814208984375);
                                float _3302 = _3301 * _3301;
                                float _3305 = ((1.0 - _3302) * dot(vec3(_3288, _3289, _3290), vec3(_808, _811, _814))) + _3302;
                                float _3308 = _3299 * _3299;
                                float _3312 = (fma(_2507, _3192.z, fma(_2506, _3192.y, _3192.x * _2505)) + _3192.w) / _3253;
                                float _3313 = (fma(_2507, _3207.z, fma(_2506, _3207.y, _3207.x * _2505)) + _3207.w) / _3253;
                                float _3317 = 1.0 - dot(vec2(_3312, _3313), vec2(_3312, _3313));
                                float _4412 = isnan(0.0) ? _3317 : (isnan(_3317) ? 0.0 : max(_3317, 0.0));
                                float _3318 = isnan(1.0) ? _4412 : (isnan(_4412) ? 1.0 : min(_4412, 1.0));
                                float _3319 = _3318 * (((isnan(0.0) ? _3305 : (isnan(_3305) ? 0.0 : max(_3305, 0.0))) * _3295) / ((_3308 * 0.699999988079071044921875) + 1.0));
                                float _3331 = exp2(log2(1.0 / ((_3308 * 3.5) + 5.0)) * 0.25);
                                float _3332 = 1.0 - _868;
                                float _3339 = sqrt(1.0 - ((1.0 - (_3332 * _3332)) * (1.0 - (_3331 * _3331))));
                                float _3340 = _3339 * _3339;
                                float _3341 = _3340 * _3340;
                                float _3342 = _3288 - _2791;
                                float _3343 = _3289 - _2792;
                                float _3344 = _3290 - _2793;
                                float _3348 = inversesqrt(dot(vec3(_3342, _3343, _3344), vec3(_3342, _3343, _3344)));
                                float _3352 = dot(vec3(_808, _811, _814), vec3((-0.0) - _2791, (-0.0) - _2792, (-0.0) - _2793));
                                float _4423 = isnan(0.0) ? _3352 : (isnan(_3352) ? 0.0 : max(_3352, 0.0));
                                float _3355 = isnan(1.0) ? _4423 : (isnan(_4423) ? 1.0 : min(_4423, 1.0));
                                float _3356 = dot(vec3(_808, _811, _814), vec3(_3348 * _3342, _3348 * _3343, _3348 * _3344));
                                float _4434 = isnan(0.0) ? _3356 : (isnan(_3356) ? 0.0 : max(_3356, 0.0));
                                float _3359 = isnan(1.0) ? _4434 : (isnan(_4434) ? 1.0 : min(_4434, 1.0));
                                float _3363 = ((_3359 * _3359) * (_3341 + (-1.0))) + 1.0;
                                float _3364 = _3301 * _3340;
                                float _3365 = _3364 * _3364;
                                float _3371 = ((1.0 - _3365) * dot(vec3(_808, _811, _814), vec3(_3288, _3289, _3290))) + _3365;
                                float _4445 = isnan(0.0) ? _3371 : (isnan(_3371) ? 0.0 : max(_3371, 0.0));
                                float _3372 = isnan(1.0) ? _4445 : (isnan(_4445) ? 1.0 : min(_4445, 1.0));
                                float _3373 = 1.0 - _3340;
                                float _3383 = (0.5 / (((_3372 * ((_3355 * _3373) + _3340)) + 9.9999999392252902907785028219223e-09) + (((_3372 * _3373) + _3340) * _3355))) * _3372;
                                float _4456 = isnan(0.0) ? _3383 : (isnan(_3383) ? 0.0 : max(_3383, 0.0));
                                float _3393 = (_3318 * _3295) * (((_3341 * 3.1415927410125732421875) * (isnan(1.0) ? _4456 : (isnan(_4456) ? 1.0 : min(_4456, 1.0)))) / ((_3363 * _3363) * ((_3308 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3393 * _3177.x;
                                frontier_phi_73_pred_1 = _3393 * _3177.y;
                                frontier_phi_73_pred_2 = _3319 * _3165.z;
                                frontier_phi_73_pred_3 = _3319 * _3165.y;
                                frontier_phi_73_pred_4 = _3319 * _3165.x;
                                frontier_phi_73_pred_5 = _3393 * _3177.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3397 = frontier_phi_73_pred;
                            _3398 = frontier_phi_73_pred_1;
                            _3402 = frontier_phi_73_pred_2;
                            _3401 = frontier_phi_73_pred_3;
                            _3400 = frontier_phi_73_pred_4;
                            _3399 = frontier_phi_73_pred_5;
                            _3107 = _3400 + _3120;
                            _3108 = _3401 + _3121;
                            _3109 = _3402 + _3122;
                            _3104 = _3397 + _3117;
                            _3105 = _3398 + _3118;
                            _3106 = _3399 + _3119;
                            if (_3124 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3117 = _3104;
                                _3118 = _3105;
                                _3119 = _3106;
                                _3120 = _3107;
                                _3121 = _3108;
                                _3122 = _3109;
                                _3123 = _3124;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3107;
                        frontier_phi_67_pred_1 = _3108;
                        frontier_phi_67_pred_2 = _3109;
                        frontier_phi_67_pred_3 = _3106;
                        frontier_phi_67_pred_4 = _3105;
                        frontier_phi_67_pred_5 = _3104;
                    }
                    _2772 = frontier_phi_67_pred;
                    _2774 = frontier_phi_67_pred_1;
                    _2776 = frontier_phi_67_pred_2;
                    _2770 = frontier_phi_67_pred_3;
                    _2768 = frontier_phi_67_pred_4;
                    _2766 = frontier_phi_67_pred_5;
                    uint _2911 = _2910 + 1u;
                    if (_2911 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2904 = _2766;
                        _2905 = _2768;
                        _2906 = _2770;
                        _2907 = _2772;
                        _2908 = _2774;
                        _2909 = _2776;
                        _2910 = _2911;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2774;
                frontier_phi_55_56_ladder_1 = _2776;
                frontier_phi_55_56_ladder_2 = _2772;
                frontier_phi_55_56_ladder_3 = _2770;
                frontier_phi_55_56_ladder_4 = _2768;
                frontier_phi_55_56_ladder_5 = _2766;
            }
            else
            {
                frontier_phi_55_56_ladder = _2660;
                frontier_phi_55_56_ladder_1 = _2662;
                frontier_phi_55_56_ladder_2 = _2658;
                frontier_phi_55_56_ladder_3 = _2656;
                frontier_phi_55_56_ladder_4 = _2654;
                frontier_phi_55_56_ladder_5 = _2652;
            }
            _2765 = frontier_phi_55_56_ladder_5;
            _2767 = frontier_phi_55_56_ladder_4;
            _2769 = frontier_phi_55_56_ladder_3;
            _2771 = frontier_phi_55_56_ladder_2;
            _2773 = frontier_phi_55_56_ladder;
            _2775 = frontier_phi_55_56_ladder_1;
        }
        float _2780 = isnan(1.0) ? _852 : (isnan(_852) ? 1.0 : min(_852, 1.0));
        _2564 = (_2780 * _2771) + _2019;
        _2566 = (_2780 * _2773) + _2021;
        _2568 = (_2780 * _2775) + _2023;
        _2570 = ((_2765 * 0.039999999105930328369140625) * _2780) + _2349;
        _2572 = ((_2767 * 0.039999999105930328369140625) * _2780) + _2351;
        _2574 = ((_2769 * 0.039999999105930328369140625) * _2780) + _2353;
    }
    else
    {
        _2564 = _2019;
        _2566 = _2021;
        _2568 = _2023;
        _2570 = _2349;
        _2572 = _2351;
        _2574 = _2353;
    }
    float _4472 = isnan(0.0) ? _837 : (isnan(_837) ? 0.0 : max(_837, 0.0));
    float _4483 = isnan(0.0) ? _838 : (isnan(_838) ? 0.0 : max(_838, 0.0));
    float _4494 = isnan(0.0) ? _839 : (isnan(_839) ? 0.0 : max(_839, 0.0));
    uint _2594 = _269 + 6u;
    float _2602 = _789 / cbSceneParam._m0[86u].x;
    float _2603 = _790 / cbSceneParam._m0[86u].y;
    vec4 _2617 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2602, _2603, (log2((isnan(cbSceneParam._m0[77u].w) ? _723 : (isnan(_723) ? cbSceneParam._m0[77u].w : min(_723, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2619 = _2617.x;
    float _2620 = _2617.y;
    float _2621 = _2617.z;
    float _2622 = _2617.w;
    float _2715;
    float _2717;
    float _2719;
    float _2721;
    if (_723 > cbSceneParam._m0[78u].w)
    {
        float _2677 = isnan(_723) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _723 : min(cbSceneParam._m0[80u].w, _723));
        float _2678 = _2677 / _723;
        float _2689 = _2678 * _774;
        float _2690 = _775 * _2678;
        float _2691 = (-0.0) - _2690;
        float _2693 = _2678 * _776;
        float _2695 = (cbSceneParam._m0[77u].w * _2691) / _2677;
        float _2696 = _2695 + cbSceneParam._m0[79u].w;
        float _2697 = cbSceneParam._m0[79u].w - _2690;
        float _2703 = sqrt(((_2689 * _2689) + (_2690 * _2690)) + (_2693 * _2693));
        float _2706 = (1.0 - (cbSceneParam._m0[77u].w / _2677)) * _2703;
        float _2711 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2713 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2866;
        if (abs((_2691 - _2695) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2866 = ((((_2696 > 0.0) ? exp2(_2711 * _2696) : (2.0 - exp2(_2713 * _2696))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2706;
        }
        else
        {
            float _2826 = 1.0 / cbSceneParam._m0[80u].x;
            float _2827 = isnan(_2697) ? _2696 : (isnan(_2696) ? _2697 : max(_2696, _2697));
            float _2828 = isnan(_2697) ? _2696 : (isnan(_2696) ? _2697 : min(_2696, _2697));
            float _2837 = isnan(0.0) ? _2827 : (isnan(_2827) ? 0.0 : min(_2827, 0.0));
            float _2838 = isnan(0.0) ? _2828 : (isnan(_2828) ? 0.0 : min(_2828, 0.0));
            _2866 = ((abs(_2703 / _2691) * cbSceneParam._m0[80u].y) * ((((_2837 - _2838) * 2.0) - ((exp2(_2711 * (isnan(0.0) ? _2827 : (isnan(_2827) ? 0.0 : max(_2827, 0.0)))) - exp2(_2711 * (isnan(0.0) ? _2828 : (isnan(_2828) ? 0.0 : max(_2828, 0.0))))) * _2826)) - ((exp2(_2713 * _2837) - exp2(_2713 * _2838)) * _2826))) + (_2706 * cbSceneParam._m0[80u].z);
        }
        vec4 _2868 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2602, _2603, 1.0), 0.0);
        float _2877 = exp2((_2866 * (-1.44269502162933349609375)) * (1.0 - _2868.w));
        float _2878 = log2(_2877);
        float _2894 = log2(_2622);
        _2715 = (exp2(_2894 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2878 * cbSceneParam._m0[78u].x)) * _2868.x) / cbSceneParam._m0[78u].x)) + _2619;
        _2717 = (exp2(_2894 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2878 * cbSceneParam._m0[78u].y)) * _2868.y) / cbSceneParam._m0[78u].y)) + _2620;
        _2719 = (exp2(_2894 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2878 * cbSceneParam._m0[78u].z)) * _2868.z) / cbSceneParam._m0[78u].z)) + _2621;
        _2721 = _2877 * _2622;
    }
    else
    {
        _2715 = _2619;
        _2717 = _2620;
        _2719 = _2621;
        _2721 = _2622;
    }
    float _2733 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2734 = _2733 == 3.0;
    float _2735 = log2(_2721);
    float _2742 = exp2(_2735 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4472 : (isnan(_4472) ? 1.0 : min(_4472, 1.0))) * (_2564 + ((isnan(0.0) ? _1578 : (isnan(_1578) ? 0.0 : max(_1578, 0.0))) * _852))) + ((_2570 + ((isnan(0.0) ? _1872 : (isnan(_1872) ? 0.0 : max(_1872, 0.0))) * _1657)) * cbPerFrame._m0[3u].x));
    float _2743 = exp2(_2735 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4483 : (isnan(_4483) ? 1.0 : min(_4483, 1.0))) * (_2566 + ((isnan(0.0) ? _1581 : (isnan(_1581) ? 0.0 : max(_1581, 0.0))) * _852))) + ((_2572 + ((isnan(0.0) ? _1875 : (isnan(_1875) ? 0.0 : max(_1875, 0.0))) * _1657)) * cbPerFrame._m0[3u].x));
    float _2744 = exp2(_2735 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4494 : (isnan(_4494) ? 1.0 : min(_4494, 1.0))) * (_2568 + ((isnan(0.0) ? _1584 : (isnan(_1584) ? 0.0 : max(_1584, 0.0))) * _852))) + ((_2574 + ((isnan(0.0) ? _1878 : (isnan(_1878) ? 0.0 : max(_1878, 0.0))) * _1657)) * cbPerFrame._m0[3u].x));
    float _2753 = (_2733 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2753 * (_2734 ? _2742 : (_2742 + (cbSceneParam._m0[72u].w * _2715)));
    SV_Target.y = _2753 * (_2734 ? _2743 : (_2743 + (cbSceneParam._m0[72u].w * _2717)));
    SV_Target.z = _2753 * (_2734 ? _2744 : (_2744 + (cbSceneParam._m0[72u].w * _2719)));
    SV_Target.w = cbInstanceData._m0[_2594].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2594].w;
}


