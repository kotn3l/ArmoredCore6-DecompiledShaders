#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_10;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_6;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1168;
float _3812;
float _3813;
float _3814;
float _3815;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _210 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _211 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _212 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _218 = inversesqrt(dot(vec3(_210, _211, _212), vec3(_210, _211, _212)));
    float _225 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _232 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _238 = uint(roundEven(NORMAL.w)) * 13u;
    uint _244 = _238 + 1u;
    uint _248 = _238 + 2u;
    float _257 = sqrt(((cbInstanceData._m0[_244].x * cbInstanceData._m0[_244].x) + (cbInstanceData._m0[_238].x * cbInstanceData._m0[_238].x)) + (cbInstanceData._m0[_248].x * cbInstanceData._m0[_248].x));
    float _258 = _257 * TEXCOORD.z;
    float _259 = _257 * TEXCOORD.w;
    vec4 _279 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _285 = _279.x * cbMtdParam._m0[11u].x;
    float _286 = _279.y * cbMtdParam._m0[11u].y;
    float _287 = _279.z * cbMtdParam._m0[11u].z;
    vec4 _306 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _258) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _259) + cbTextureTilingScale._m0[5u].w));
    vec4 _326 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _363 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _365 = _363.x;
    float _377 = dot(vec4(_365, _363.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _394 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _326.x) * 2.0) - ((((_365 - _377) * cbMtdParam._m0[24u].z) + _377) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3824 = isnan(0.0) ? _394 : (isnan(_394) ? 0.0 : max(_394, 0.0));
    float _395 = isnan(1.0) ? _3824 : (isnan(_3824) ? 1.0 : min(_3824, 1.0));
    float _402 = (_395 * ((_306.x * cbMtdParam._m0[12u].x) - _285)) + _285;
    float _403 = (_395 * ((_306.y * cbMtdParam._m0[12u].y) - _286)) + _286;
    float _404 = (_395 * ((_306.z * cbMtdParam._m0[12u].z) - _287)) + _287;
    vec4 _421 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _258) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _259) + cbTextureTilingScale._m0[3u].w));
    vec4 _441 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _443 = _441.x;
    float _453 = dot(vec4(_443, _441.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _467 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _326.y) * 2.0) - ((((_443 - _453) * cbMtdParam._m0[24u].z) + _453) * cbMtdParam._m0[20u].w))) + 1.0;
    float _3835 = isnan(0.0) ? _467 : (isnan(_467) ? 0.0 : max(_467, 0.0));
    float _468 = isnan(1.0) ? _3835 : (isnan(_3835) ? 1.0 : min(_3835, 1.0));
    float _475 = (_468 * ((_421.x * cbMtdParam._m0[13u].x) - _402)) + _402;
    float _476 = (_468 * ((_421.y * cbMtdParam._m0[13u].y) - _403)) + _403;
    float _477 = (_468 * ((_421.z * cbMtdParam._m0[13u].z) - _404)) + _404;
    vec4 _490 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _258) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _259) + cbTextureTilingScale._m0[4u].w));
    vec4 _507 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _509 = _507.x;
    float _510 = _507.y;
    float _511 = _507.z;
    float _518 = ((_490.x - _509) * _395) + _509;
    float _519 = ((_490.y - _510) * _395) + _510;
    float _520 = ((_490.z - _511) * _395) + _511;
    vec4 _532 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _258) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _259) + cbTextureTilingScale._m0[2u].w));
    float _545 = ((_532.z - _520) * _468) + _520;
    float _548 = ((((_532.x - _518) * _468) + _518) * 2.0) + (-1.0);
    float _550 = ((((_532.y - _519) * _468) + _519) * 2.0) + (-1.0);
    float _551 = dot(vec2(_548, _550), vec2(_548, _550));
    float _3846 = isnan(0.0) ? _551 : (isnan(_551) ? 0.0 : max(_551, 0.0));
    float _556 = sqrt(1.0 - (isnan(1.0) ? _3846 : (isnan(_3846) ? 1.0 : min(_3846, 1.0))));
    vec4 _570 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _582 = (((_570.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _548;
    float _583 = (((_570.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _550;
    float _587 = (cbMtdParam._m0[19u].w * (_570.z - _545)) + _545;
    float _591 = cbMtdParam._m0[22u].x + _570.w;
    float _594 = fma(_556, _225 * NORMAL.x, fma(_583, _232 * TANGENT.x, (_218 * _210) * _582));
    float _597 = fma(_556, _225 * NORMAL.y, fma(_583, _232 * TANGENT.y, (_218 * _211) * _582));
    float _600 = fma(_556, _225 * NORMAL.z, fma(_583, _232 * TANGENT.z, (_218 * _212) * _582));
    float _604 = inversesqrt(dot(vec3(_594, _597, _600), vec3(_594, _597, _600)));
    float _605 = _604 * _594;
    float _606 = _604 * _597;
    float _607 = _604 * _600;
    float _3857 = isnan(0.0) ? _587 : (isnan(_587) ? 0.0 : max(_587, 0.0));
    float _608 = isnan(1.0) ? _3857 : (isnan(_3857) ? 1.0 : min(_3857, 1.0));
    float _3868 = isnan(0.0) ? _591 : (isnan(_591) ? 0.0 : max(_591, 0.0));
    float _3879 = isnan(0.0) ? _475 : (isnan(_475) ? 0.0 : max(_475, 0.0));
    float _3890 = isnan(0.0) ? _476 : (isnan(_476) ? 0.0 : max(_476, 0.0));
    float _3901 = isnan(0.0) ? _477 : (isnan(_477) ? 0.0 : max(_477, 0.0));
    float _626 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _668 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _678 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _668);
    float _679 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _668);
    float _680 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _668);
    float _684 = inversesqrt(dot(vec3(_678, _679, _680), vec3(_678, _679, _680)));
    float _685 = _678 * _684;
    float _686 = _679 * _684;
    float _687 = _680 * _684;
    vec4 _692 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _694 = _692.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _848 = sqrt(((_678 * _678) + (_679 * _679)) + (_680 * _680));
        float _854 = (cbMatDynParam._m0[5u].x * _848) + cbMatDynParam._m0[5u].y;
        float _3912 = isnan(0.0) ? _854 : (isnan(_854) ? 0.0 : max(_854, 0.0));
        float _855 = isnan(1.0) ? _3912 : (isnan(_3912) ? 1.0 : min(_3912, 1.0));
        float _859 = (cbMatDynParam._m0[5u].z * _848) + cbMatDynParam._m0[5u].w;
        float _3923 = isnan(0.0) ? _859 : (isnan(_859) ? 0.0 : max(_859, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3923 : (isnan(_3923) ? 1.0 : min(_3923, 1.0))) - _855)) + _855) < ((_694 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _705 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _706 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _724 = fma(_607, cbSceneParam._m0[5u].z, fma(_606, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _605));
    float _727 = fma(_607, cbSceneParam._m0[6u].z, fma(_606, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _605));
    float _730 = fma(_607, cbSceneParam._m0[7u].z, fma(_606, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _605));
    uint _743 = _238 + 9u;
    uint _744 = _743 + uint(cbMatDynParam._m0[0u].w);
    float _750 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3879 : (isnan(_3879) ? 1.0 : min(_3879, 1.0)))) * cbInstanceData._m0[_744].x;
    float _751 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3890 : (isnan(_3890) ? 1.0 : min(_3890, 1.0)))) * cbInstanceData._m0[_744].y;
    float _752 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3901 : (isnan(_3901) ? 1.0 : min(_3901, 1.0)))) * cbInstanceData._m0[_744].z;
    float _3934 = isnan(0.0) ? _750 : (isnan(_750) ? 0.0 : max(_750, 0.0));
    float _753 = isnan(1.0) ? _3934 : (isnan(_3934) ? 1.0 : min(_3934, 1.0));
    float _3945 = isnan(0.0) ? _751 : (isnan(_751) ? 0.0 : max(_751, 0.0));
    float _754 = isnan(1.0) ? _3945 : (isnan(_3945) ? 1.0 : min(_3945, 1.0));
    float _3956 = isnan(0.0) ? _752 : (isnan(_752) ? 0.0 : max(_752, 0.0));
    float _755 = isnan(1.0) ? _3956 : (isnan(_3956) ? 1.0 : min(_3956, 1.0));
    vec4 _764 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _705, cbSceneParam._m0[86u].y * _706));
    float _768 = ((isnan(1.0) ? _3868 : (isnan(_3868) ? 1.0 : min(_3868, 1.0))) * TEXCOORD_5.w) * _764.x;
    float _769 = dot(vec3(_605, _606, _607), vec3(_685, _686, _687));
    float _772 = _769 * 2.0;
    float _776 = (_772 * _605) - _685;
    float _777 = (_772 * _606) - _686;
    float _778 = (_772 * _607) - _687;
    float _782 = abs(dot(vec3(_685, _686, _687), vec3(_605, _606, _607)));
    float _3967 = isnan(0.0) ? _782 : (isnan(_782) ? 0.0 : max(_782, 0.0));
    float _784 = sqrt(_608);
    float _797 = exp2((_784 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3967 : (isnan(_3967) ? 1.0 : min(_3967, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_784 * 3.0));
    float _829 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _833 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _837 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1167;
    float _1169;
    float _1170;
    float _1171;
    float _1172;
    float _1173;
    float _1174;
    float _1175;
    float _1176;
    float _1177;
    float _1178;
    float _1179;
    float _1180;
    float _1181;
    float _1182;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _892 = fma(_837, cbModelParam._m0[26u].z, fma(_833, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _829));
        float _896 = fma(_837, cbModelParam._m0[27u].z, fma(_833, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _829));
        float _900 = fma(_837, cbModelParam._m0[28u].z, fma(_833, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _829));
        float _925 = _829 + _605;
        float _926 = _833 + _606;
        float _927 = _837 + _607;
        float _937 = fma(_927, cbModelParam._m0[26u].z, fma(_926, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _925)) - _892;
        float _938 = fma(_927, cbModelParam._m0[27u].z, fma(_926, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _925)) - _896;
        float _939 = fma(_927, cbModelParam._m0[28u].z, fma(_926, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _925)) - _900;
        float _943 = inversesqrt(dot(vec3(_937, _938, _939), vec3(_937, _938, _939)));
        float _956 = ((_943 * _937) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_892 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _957 = ((_943 * _938) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_896 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _958 = ((_943 * _939) / cbModelParam._m0[34u].z) + ((((((_900 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _961 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_956, _957, _958), 0.0);
        vec4 _968 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_956, _957, _958), 0.0);
        vec4 _975 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_956, _957, _958), 0.0);
        vec4 _982 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_956, _957, _958), 0.0);
        float _995 = exp2((_961.w + (-0.5)) * 20.0) * 2.0;
        float _996 = _995 * (_961.x + (-0.5));
        float _997 = _995 * (_961.y + (-0.5));
        float _998 = _995 * (_961.z + (-0.5));
        float _1005 = exp2((_968.w + (-0.5)) * 20.0) * 2.0;
        float _1006 = _1005 * (_968.x + (-0.5));
        float _1007 = _1005 * (_968.y + (-0.5));
        float _1008 = _1005 * (_968.z + (-0.5));
        float _1015 = exp2((_975.w + (-0.5)) * 20.0) * 2.0;
        float _1016 = _1015 * (_975.x + (-0.5));
        float _1017 = _1015 * (_975.y + (-0.5));
        float _1018 = _1015 * (_975.z + (-0.5));
        float _1025 = exp2((_982.w + (-0.5)) * 20.0) * 2.0;
        float _1026 = _1025 * (_982.x + (-0.5));
        float _1027 = _1025 * (_982.y + (-0.5));
        float _1028 = _1025 * (_982.z + (-0.5));
        float _1029 = isnan(0.0) ? _1026 : (isnan(_1026) ? 0.0 : max(_1026, 0.0));
        float _1030 = isnan(0.0) ? _1027 : (isnan(_1027) ? 0.0 : max(_1027, 0.0));
        float _1031 = isnan(0.0) ? _1028 : (isnan(_1028) ? 0.0 : max(_1028, 0.0));
        float _1032 = _996 * 0.5;
        float _1033 = _1006 * 0.5;
        float _1034 = _1016 * 0.5;
        float _1035 = dot(vec3(_1032, _1033, _1034), vec3(_1032, _1033, _1034));
        float _1040 = (_1035 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1035);
        float _1049 = (dot(vec3(_605, _606, _607), vec3(_1040 * _1032, _1040 * _1033, _1040 * _1034)) + 1.0) * 0.5;
        float _3993 = isnan(0.0) ? _1049 : (isnan(_1049) ? 0.0 : max(_1049, 0.0));
        float _1059 = sqrt(((_1033 * _1033) + (_1032 * _1032)) + (_1034 * _1034)) / (_1029 + 9.9999997473787516355514526367188e-06);
        float _4004 = isnan(0.0) ? _1059 : (isnan(_1059) ? 0.0 : max(_1059, 0.0));
        float _1060 = isnan(1.0) ? _4004 : (isnan(_4004) ? 1.0 : min(_4004, 1.0));
        float _1061 = _1060 * 2.0;
        float _1065 = (1.0 - _1060) / (_1060 + 1.0);
        float _4015 = isnan(0.0) ? _1065 : (isnan(_1065) ? 0.0 : max(_1065, 0.0));
        float _1066 = isnan(1.0) ? _4015 : (isnan(_4015) ? 1.0 : min(_4015, 1.0));
        float _1075 = ((((1.0 - _1066) * (_1061 + 2.0)) * exp2(log2(isnan(1.0) ? _3993 : (isnan(_3993) ? 1.0 : min(_3993, 1.0))) * (_1061 + 1.0))) + _1066) * _1029;
        float _1076 = _997 * 0.5;
        float _1077 = _1007 * 0.5;
        float _1078 = _1017 * 0.5;
        float _1079 = dot(vec3(_1076, _1077, _1078), vec3(_1076, _1077, _1078));
        float _1084 = (_1079 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1079);
        float _1092 = (dot(vec3(_605, _606, _607), vec3(_1084 * _1076, _1084 * _1077, _1084 * _1078)) + 1.0) * 0.5;
        float _4026 = isnan(0.0) ? _1092 : (isnan(_1092) ? 0.0 : max(_1092, 0.0));
        float _1101 = sqrt(((_1077 * _1077) + (_1076 * _1076)) + (_1078 * _1078)) / (_1030 + 9.9999997473787516355514526367188e-06);
        float _4037 = isnan(0.0) ? _1101 : (isnan(_1101) ? 0.0 : max(_1101, 0.0));
        float _1102 = isnan(1.0) ? _4037 : (isnan(_4037) ? 1.0 : min(_4037, 1.0));
        float _1103 = _1102 * 2.0;
        float _1107 = (1.0 - _1102) / (_1102 + 1.0);
        float _4048 = isnan(0.0) ? _1107 : (isnan(_1107) ? 0.0 : max(_1107, 0.0));
        float _1108 = isnan(1.0) ? _4048 : (isnan(_4048) ? 1.0 : min(_4048, 1.0));
        float _1117 = ((((1.0 - _1108) * (_1103 + 2.0)) * exp2(log2(isnan(1.0) ? _4026 : (isnan(_4026) ? 1.0 : min(_4026, 1.0))) * (_1103 + 1.0))) + _1108) * _1030;
        float _1118 = _998 * 0.5;
        float _1119 = _1008 * 0.5;
        float _1120 = _1018 * 0.5;
        float _1121 = dot(vec3(_1118, _1119, _1120), vec3(_1118, _1119, _1120));
        float _1126 = (_1121 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1121);
        float _1134 = (dot(vec3(_605, _606, _607), vec3(_1126 * _1118, _1126 * _1119, _1126 * _1120)) + 1.0) * 0.5;
        float _4059 = isnan(0.0) ? _1134 : (isnan(_1134) ? 0.0 : max(_1134, 0.0));
        float _1143 = sqrt(((_1119 * _1119) + (_1118 * _1118)) + (_1120 * _1120)) / (_1031 + 9.9999997473787516355514526367188e-06);
        float _4070 = isnan(0.0) ? _1143 : (isnan(_1143) ? 0.0 : max(_1143, 0.0));
        float _1144 = isnan(1.0) ? _4070 : (isnan(_4070) ? 1.0 : min(_4070, 1.0));
        float _1145 = _1144 * 2.0;
        float _1149 = (1.0 - _1144) / (_1144 + 1.0);
        float _4081 = isnan(0.0) ? _1149 : (isnan(_1149) ? 0.0 : max(_1149, 0.0));
        float _1150 = isnan(1.0) ? _4081 : (isnan(_4081) ? 1.0 : min(_4081, 1.0));
        float _1159 = ((((1.0 - _1150) * (_1145 + 2.0)) * exp2(log2(isnan(1.0) ? _4059 : (isnan(_4059) ? 1.0 : min(_4059, 1.0))) * (_1145 + 1.0))) + _1150) * _1031;
        _1167 = _998;
        _1169 = _997;
        _1170 = _996;
        _1171 = _1008;
        _1172 = _1007;
        _1173 = _1006;
        _1174 = _1018;
        _1175 = _1017;
        _1176 = _1016;
        _1177 = _1031;
        _1178 = _1030;
        _1179 = _1029;
        _1180 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1075 : (isnan(_1075) ? 0.0 : max(_1075, 0.0)));
        _1181 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1117 : (isnan(_1117) ? 0.0 : max(_1117, 0.0)));
        _1182 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1159 : (isnan(_1159) ? 0.0 : max(_1159, 0.0)));
    }
    else
    {
        _1167 = _1168;
        _1169 = _1168;
        _1170 = _1168;
        _1171 = _1168;
        _1172 = _1168;
        _1173 = _1168;
        _1174 = _1168;
        _1175 = _1168;
        _1176 = _1168;
        _1177 = _1168;
        _1178 = _1168;
        _1179 = _1168;
        _1180 = 0.0;
        _1181 = 0.0;
        _1182 = 0.0;
    }
    float _1478;
    float _1479;
    float _1480;
    float _1481;
    float _1482;
    float _1483;
    float _1484;
    float _1485;
    float _1486;
    float _1487;
    float _1488;
    float _1489;
    float _1490;
    float _1491;
    float _1492;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1209 = fma(_837, cbModelParam._m0[30u].z, fma(_833, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _829));
        float _1213 = fma(_837, cbModelParam._m0[31u].z, fma(_833, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _829));
        float _1217 = fma(_837, cbModelParam._m0[32u].z, fma(_833, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _829));
        float _1240 = _829 + _605;
        float _1241 = _833 + _606;
        float _1242 = _837 + _607;
        float _1252 = fma(_1242, cbModelParam._m0[30u].z, fma(_1241, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1240)) - _1209;
        float _1253 = fma(_1242, cbModelParam._m0[31u].z, fma(_1241, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1240)) - _1213;
        float _1254 = fma(_1242, cbModelParam._m0[32u].z, fma(_1241, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1240)) - _1217;
        float _1258 = inversesqrt(dot(vec3(_1252, _1253, _1254), vec3(_1252, _1253, _1254)));
        float _1271 = ((_1258 * _1252) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1209 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1272 = ((_1258 * _1253) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1213 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1273 = ((_1258 * _1254) / cbModelParam._m0[35u].z) + ((((((_1217 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1275 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1271, _1272, _1273), 0.0);
        vec4 _1282 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1271, _1272, _1273), 0.0);
        vec4 _1289 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1271, _1272, _1273), 0.0);
        vec4 _1296 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1271, _1272, _1273), 0.0);
        float _1308 = exp2((_1275.w + (-0.5)) * 20.0) * 2.0;
        float _1309 = _1308 * (_1275.x + (-0.5));
        float _1310 = _1308 * (_1275.y + (-0.5));
        float _1311 = _1308 * (_1275.z + (-0.5));
        float _1318 = exp2((_1282.w + (-0.5)) * 20.0) * 2.0;
        float _1319 = _1318 * (_1282.x + (-0.5));
        float _1320 = _1318 * (_1282.y + (-0.5));
        float _1321 = _1318 * (_1282.z + (-0.5));
        float _1328 = exp2((_1289.w + (-0.5)) * 20.0) * 2.0;
        float _1329 = _1328 * (_1289.x + (-0.5));
        float _1330 = _1328 * (_1289.y + (-0.5));
        float _1331 = _1328 * (_1289.z + (-0.5));
        float _1338 = exp2((_1296.w + (-0.5)) * 20.0) * 2.0;
        float _1339 = _1338 * (_1296.x + (-0.5));
        float _1340 = _1338 * (_1296.y + (-0.5));
        float _1341 = _1338 * (_1296.z + (-0.5));
        float _1342 = isnan(0.0) ? _1339 : (isnan(_1339) ? 0.0 : max(_1339, 0.0));
        float _1343 = isnan(0.0) ? _1340 : (isnan(_1340) ? 0.0 : max(_1340, 0.0));
        float _1344 = isnan(0.0) ? _1341 : (isnan(_1341) ? 0.0 : max(_1341, 0.0));
        float _1345 = _1309 * 0.5;
        float _1346 = _1319 * 0.5;
        float _1347 = _1329 * 0.5;
        float _1348 = dot(vec3(_1345, _1346, _1347), vec3(_1345, _1346, _1347));
        float _1353 = (_1348 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1348);
        float _1361 = (dot(vec3(_605, _606, _607), vec3(_1353 * _1345, _1353 * _1346, _1353 * _1347)) + 1.0) * 0.5;
        float _4122 = isnan(0.0) ? _1361 : (isnan(_1361) ? 0.0 : max(_1361, 0.0));
        float _1370 = sqrt(((_1346 * _1346) + (_1345 * _1345)) + (_1347 * _1347)) / (_1342 + 9.9999997473787516355514526367188e-06);
        float _4133 = isnan(0.0) ? _1370 : (isnan(_1370) ? 0.0 : max(_1370, 0.0));
        float _1371 = isnan(1.0) ? _4133 : (isnan(_4133) ? 1.0 : min(_4133, 1.0));
        float _1372 = _1371 * 2.0;
        float _1376 = (1.0 - _1371) / (_1371 + 1.0);
        float _4144 = isnan(0.0) ? _1376 : (isnan(_1376) ? 0.0 : max(_1376, 0.0));
        float _1377 = isnan(1.0) ? _4144 : (isnan(_4144) ? 1.0 : min(_4144, 1.0));
        float _1386 = ((((1.0 - _1377) * (_1372 + 2.0)) * exp2(log2(isnan(1.0) ? _4122 : (isnan(_4122) ? 1.0 : min(_4122, 1.0))) * (_1372 + 1.0))) + _1377) * _1342;
        float _1387 = _1310 * 0.5;
        float _1388 = _1320 * 0.5;
        float _1389 = _1330 * 0.5;
        float _1390 = dot(vec3(_1387, _1388, _1389), vec3(_1387, _1388, _1389));
        float _1395 = (_1390 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1390);
        float _1403 = (dot(vec3(_605, _606, _607), vec3(_1395 * _1387, _1395 * _1388, _1395 * _1389)) + 1.0) * 0.5;
        float _4155 = isnan(0.0) ? _1403 : (isnan(_1403) ? 0.0 : max(_1403, 0.0));
        float _1412 = sqrt(((_1388 * _1388) + (_1387 * _1387)) + (_1389 * _1389)) / (_1343 + 9.9999997473787516355514526367188e-06);
        float _4166 = isnan(0.0) ? _1412 : (isnan(_1412) ? 0.0 : max(_1412, 0.0));
        float _1413 = isnan(1.0) ? _4166 : (isnan(_4166) ? 1.0 : min(_4166, 1.0));
        float _1414 = _1413 * 2.0;
        float _1418 = (1.0 - _1413) / (_1413 + 1.0);
        float _4177 = isnan(0.0) ? _1418 : (isnan(_1418) ? 0.0 : max(_1418, 0.0));
        float _1419 = isnan(1.0) ? _4177 : (isnan(_4177) ? 1.0 : min(_4177, 1.0));
        float _1428 = ((((1.0 - _1419) * (_1414 + 2.0)) * exp2(log2(isnan(1.0) ? _4155 : (isnan(_4155) ? 1.0 : min(_4155, 1.0))) * (_1414 + 1.0))) + _1419) * _1343;
        float _1429 = _1311 * 0.5;
        float _1430 = _1321 * 0.5;
        float _1431 = _1331 * 0.5;
        float _1432 = dot(vec3(_1429, _1430, _1431), vec3(_1429, _1430, _1431));
        float _1437 = (_1432 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1432);
        float _1445 = (dot(vec3(_605, _606, _607), vec3(_1437 * _1429, _1437 * _1430, _1437 * _1431)) + 1.0) * 0.5;
        float _4188 = isnan(0.0) ? _1445 : (isnan(_1445) ? 0.0 : max(_1445, 0.0));
        float _1454 = sqrt(((_1430 * _1430) + (_1429 * _1429)) + (_1431 * _1431)) / (_1344 + 9.9999997473787516355514526367188e-06);
        float _4199 = isnan(0.0) ? _1454 : (isnan(_1454) ? 0.0 : max(_1454, 0.0));
        float _1455 = isnan(1.0) ? _4199 : (isnan(_4199) ? 1.0 : min(_4199, 1.0));
        float _1456 = _1455 * 2.0;
        float _1460 = (1.0 - _1455) / (_1455 + 1.0);
        float _4210 = isnan(0.0) ? _1460 : (isnan(_1460) ? 0.0 : max(_1460, 0.0));
        float _1461 = isnan(1.0) ? _4210 : (isnan(_4210) ? 1.0 : min(_4210, 1.0));
        float _1470 = ((((1.0 - _1461) * (_1456 + 2.0)) * exp2(log2(isnan(1.0) ? _4188 : (isnan(_4188) ? 1.0 : min(_4188, 1.0))) * (_1456 + 1.0))) + _1461) * _1344;
        _1478 = _1311;
        _1479 = _1310;
        _1480 = _1309;
        _1481 = _1321;
        _1482 = _1320;
        _1483 = _1319;
        _1484 = _1331;
        _1485 = _1330;
        _1486 = _1329;
        _1487 = _1344;
        _1488 = _1343;
        _1489 = _1342;
        _1490 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1386 : (isnan(_1386) ? 0.0 : max(_1386, 0.0)));
        _1491 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1428 : (isnan(_1428) ? 0.0 : max(_1428, 0.0)));
        _1492 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1470 : (isnan(_1470) ? 0.0 : max(_1470, 0.0)));
    }
    else
    {
        _1478 = _1168;
        _1479 = _1168;
        _1480 = _1168;
        _1481 = _1168;
        _1482 = _1168;
        _1483 = _1168;
        _1484 = _1168;
        _1485 = _1168;
        _1486 = _1168;
        _1487 = _1168;
        _1488 = _1168;
        _1489 = _1168;
        _1490 = 0.0;
        _1491 = 0.0;
        _1492 = 0.0;
    }
    float _1502 = (cbModelParam._m0[1u].x * (_1490 - _1180)) + _1180;
    float _1503 = (cbModelParam._m0[1u].x * (_1491 - _1181)) + _1181;
    float _1504 = (cbModelParam._m0[1u].x * (_1492 - _1182)) + _1182;
    float _1525 = fma(_1504, cbSceneParam._m0[89u].z, fma(_1503, cbSceneParam._m0[89u].y, _1502 * cbSceneParam._m0[89u].x));
    float _1528 = fma(_1504, cbSceneParam._m0[90u].z, fma(_1503, cbSceneParam._m0[90u].y, _1502 * cbSceneParam._m0[90u].x));
    float _1531 = fma(_1504, cbSceneParam._m0[91u].z, fma(_1503, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1502));
    float _1546 = _776 * 0.5;
    float _1547 = _777 * 0.5;
    float _1548 = _778 * 0.5;
    float _1549 = dot(vec4(_1546, _1547, _1548, 1.0), vec4(_1480, _1483, _1486, _1489));
    float _1552 = dot(vec4(_1546, _1547, _1548, 1.0), vec4(_1479, _1482, _1485, _1488));
    float _1555 = dot(vec4(_1546, _1547, _1548, 1.0), vec4(_1478, _1481, _1484, _1487));
    float _1589;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1562 = dot(vec4(_1546, _1547, _1548, 1.0), vec4(_1167, _1171, _1174, _1177));
        float _1566 = dot(vec4(_1546, _1547, _1548, 1.0), vec4(_1169, _1172, _1175, _1178));
        float _1570 = dot(vec4(_1546, _1547, _1548, 1.0), vec4(_1170, _1173, _1176, _1179));
        float _1577 = dot(vec4(cbModelParam._m0[39u]), vec4(_1546, _1547, _1548, 1.0));
        _1589 = dot(vec3(isnan(0.0) ? _1570 : (isnan(_1570) ? 0.0 : max(_1570, 0.0)), isnan(0.0) ? _1566 : (isnan(_1566) ? 0.0 : max(_1566, 0.0)), isnan(0.0) ? _1562 : (isnan(_1562) ? 0.0 : max(_1562, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1577) ? 0.0 : (isnan(0.0) ? _1577 : max(0.0, _1577))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1589 = 1.0;
    }
    float _1600;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1591 = dot(vec4(cbModelParam._m0[40u]), vec4(_1546, _1547, _1548, 1.0));
        _1600 = dot(vec3(isnan(0.0) ? _1549 : (isnan(_1549) ? 0.0 : max(_1549, 0.0)), isnan(0.0) ? _1552 : (isnan(_1552) ? 0.0 : max(_1552, 0.0)), isnan(0.0) ? _1555 : (isnan(_1555) ? 0.0 : max(_1555, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1591) ? 0.0 : (isnan(0.0) ? _1591 : max(0.0, _1591))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1600 = 1.0;
    }
    float _1604 = (_1600 * cbModelParam._m0[1u].x) + (_1589 * (1.0 - cbModelParam._m0[1u].x));
    float _1614 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _608);
    float _1615 = isnan(_1614) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1614 : min(cbModelParam._m0[25u].z, _1614));
    float _1697;
    float _1699;
    float _1701;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1664 = fma(_837, cbModelParam._m0[13u].z, fma(_833, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _829)) + cbModelParam._m0[13u].w;
        float _1668 = fma(_837, cbModelParam._m0[14u].z, fma(_833, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _829)) + cbModelParam._m0[14u].w;
        float _1672 = fma(_837, cbModelParam._m0[15u].z, fma(_833, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _829)) + cbModelParam._m0[15u].w;
        float _1675 = fma(_778, cbModelParam._m0[13u].z, fma(_777, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _776));
        float _1678 = fma(_778, cbModelParam._m0[14u].z, fma(_777, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _776));
        float _1681 = fma(_778, cbModelParam._m0[15u].z, fma(_777, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _776));
        float _1709;
        if (_1675 > 0.0)
        {
            _1709 = abs((1.0 - _1664) / _1675);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1675 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1664 + 1.0) / _1675);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1709 = frontier_phi_17_15_ladder;
        }
        float _1880;
        if (_1678 > 0.0)
        {
            _1880 = abs((1.0 - _1668) / _1678);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1678 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1668 + 1.0) / _1678);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1880 = frontier_phi_26_22_ladder;
        }
        float _2175;
        if (_1681 > 0.0)
        {
            _2175 = abs((1.0 - _1672) / _1681);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1681 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1672 + 1.0) / _1681);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2175 = frontier_phi_38_33_ladder;
        }
        float _2177 = isnan(_1880) ? _1709 : (isnan(_1709) ? _1880 : min(_1709, _1880));
        float _2178 = isnan(_2175) ? _2177 : (isnan(_2177) ? _2175 : min(_2177, _2175));
        float _2182 = (_2178 * _1675) + _1664;
        float _2183 = (_2178 * _1678) + _1668;
        float _2184 = (_2178 * _1681) + _1672;
        float _2185 = _2178 * 9.9999997473787516355514526367188e-05;
        float _2187 = (-1.0) - _2185;
        float _2189 = _2185 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2184 > _2189) || ((_2184 < _2187) || ((_2183 > _2189) || ((_2183 < _2187) || ((_2182 < _2187) || (_2182 > _2189))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2329 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2184, cbModelParam._m0[9u].z, fma(_2183, cbModelParam._m0[9u].y, _2182 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2184, cbModelParam._m0[10u].z, fma(_2183, cbModelParam._m0[10u].y, _2182 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2184, cbModelParam._m0[11u].z, fma(_2183, cbModelParam._m0[11u].y, _2182 * cbModelParam._m0[11u].x))), _1615);
            frontier_phi_16_38_ladder = _2329.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2329.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2329.x * cbModelParam._m0[1u].y;
        }
        _1697 = frontier_phi_16_38_ladder_2;
        _1699 = frontier_phi_16_38_ladder_1;
        _1701 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1685 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_776, _777, _778), _1615);
        _1697 = _1685.x * cbModelParam._m0[1u].y;
        _1699 = _1685.y * cbModelParam._m0[1u].y;
        _1701 = _1685.z * cbModelParam._m0[1u].y;
    }
    float _1705 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _608);
    float _1706 = isnan(_1705) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1705 : min(cbModelParam._m0[25u].w, _1705));
    float _1797;
    float _1799;
    float _1801;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1761 = fma(_837, cbModelParam._m0[21u].z, fma(_833, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _829)) + cbModelParam._m0[21u].w;
        float _1765 = fma(_837, cbModelParam._m0[22u].z, fma(_833, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _829)) + cbModelParam._m0[22u].w;
        float _1769 = fma(_837, cbModelParam._m0[23u].z, fma(_833, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _829)) + cbModelParam._m0[23u].w;
        float _1772 = fma(_778, cbModelParam._m0[21u].z, fma(_777, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _776));
        float _1775 = fma(_778, cbModelParam._m0[22u].z, fma(_777, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _776));
        float _1778 = fma(_778, cbModelParam._m0[23u].z, fma(_777, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _776));
        float _1885;
        if (_1772 > 0.0)
        {
            _1885 = abs((1.0 - _1761) / _1772);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1772 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1761 + 1.0) / _1772);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1885 = frontier_phi_28_24_ladder;
        }
        float _2202;
        if (_1775 > 0.0)
        {
            _2202 = abs((1.0 - _1765) / _1775);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1775 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1765 + 1.0) / _1775);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2202 = frontier_phi_40_35_ladder;
        }
        float _2529;
        if (_1778 > 0.0)
        {
            _2529 = abs((1.0 - _1769) / _1778);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_1778 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_1769 + 1.0) / _1778);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _2529 = frontier_phi_50_47_ladder;
        }
        float _2531 = isnan(_2202) ? _1885 : (isnan(_1885) ? _2202 : min(_1885, _2202));
        float _2532 = isnan(_2529) ? _2531 : (isnan(_2531) ? _2529 : min(_2531, _2529));
        float _2536 = (_2532 * _1772) + _1761;
        float _2537 = (_2532 * _1775) + _1765;
        float _2538 = (_2532 * _1778) + _1769;
        float _2539 = _2532 * 9.9999997473787516355514526367188e-05;
        float _2540 = (-1.0) - _2539;
        float _2542 = _2539 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_2538 > _2542) || ((_2538 < _2540) || ((_2537 > _2542) || ((_2537 < _2540) || ((_2536 < _2540) || (_2536 > _2542))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2656 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2538, cbModelParam._m0[17u].z, fma(_2537, cbModelParam._m0[17u].y, _2536 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2538, cbModelParam._m0[18u].z, fma(_2537, cbModelParam._m0[18u].y, _2536 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2538, cbModelParam._m0[19u].z, fma(_2537, cbModelParam._m0[19u].y, _2536 * cbModelParam._m0[19u].x))), _1706);
            frontier_phi_25_50_ladder = _2656.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _2656.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _2656.x * cbModelParam._m0[1u].z;
        }
        _1797 = frontier_phi_25_50_ladder_2;
        _1799 = frontier_phi_25_50_ladder_1;
        _1801 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _1781 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_776, _777, _778), _1706);
        _1797 = _1781.x * cbModelParam._m0[1u].z;
        _1799 = _1781.y * cbModelParam._m0[1u].z;
        _1801 = _1781.z * cbModelParam._m0[1u].z;
    }
    float _1813 = ((((1.0 - _797) * ((_784 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_797 * _784)) * _768;
    float _1814 = _1813 * ((cbModelParam._m0[1u].w * (_1797 - _1697)) + _1697);
    float _1815 = _1813 * ((cbModelParam._m0[1u].w * (_1799 - _1699)) + _1699);
    float _1816 = _1813 * ((cbModelParam._m0[1u].w * (_1801 - _1701)) + _1701);
    float _1819 = fma(_1816, cbSceneParam._m0[89u].z, fma(_1815, cbSceneParam._m0[89u].y, _1814 * cbSceneParam._m0[89u].x));
    float _1822 = fma(_1816, cbSceneParam._m0[90u].z, fma(_1815, cbSceneParam._m0[90u].y, _1814 * cbSceneParam._m0[90u].x));
    float _1825 = fma(_1816, cbSceneParam._m0[91u].z, fma(_1815, cbSceneParam._m0[91u].y, _1814 * cbSceneParam._m0[91u].x));
    float _1859 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1863 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1867 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1871 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1872 = _1859 / _1871;
    float _1873 = _1863 / _1871;
    float _1874 = _1867 / _1871;
    float _2021;
    float _2022;
    float _2023;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1901 = ((uint(_1874 > cbSceneParam._m0[59u].y) + uint(_1874 > cbSceneParam._m0[59u].x)) + uint(_1874 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1902 = _1901 + 43u;
        uint _1910 = _1901 + 44u;
        uint _1918 = _1901 + 45u;
        uint _1926 = _1901 + 46u;
        float _1937 = fma(_1871, cbSceneParam._m0[_1902].w, fma(_1867, cbSceneParam._m0[_1902].z, fma(_1863, cbSceneParam._m0[_1902].y, _1859 * cbSceneParam._m0[_1902].x)));
        float _1941 = fma(_1871, cbSceneParam._m0[_1910].w, fma(_1867, cbSceneParam._m0[_1910].z, fma(_1863, cbSceneParam._m0[_1910].y, _1859 * cbSceneParam._m0[_1910].x)));
        float _1949 = fma(_1871, cbSceneParam._m0[_1926].w, fma(_1867, cbSceneParam._m0[_1926].z, fma(_1863, cbSceneParam._m0[_1926].y, _1859 * cbSceneParam._m0[_1926].x)));
        float _1954 = cbSceneParam._m0[33u].z * _1949;
        float _1956 = cbSceneParam._m0[33u].w * _1949;
        float _1959 = fma(_1871, cbSceneParam._m0[_1918].w, fma(_1867, cbSceneParam._m0[_1918].z, fma(_1863, cbSceneParam._m0[_1918].y, _1859 * cbSceneParam._m0[_1918].x))) / _1949;
        float _2007 = (cbSceneParam._m0[33u].x - sqrt(((_1873 * _1873) + (_1872 * _1872)) + (_1874 * _1874))) * cbSceneParam._m0[33u].y;
        float _4336 = isnan(0.0) ? _2007 : (isnan(_2007) ? 0.0 : max(_2007, 0.0));
        float _2014 = (isnan(1.0) ? _4336 : (isnan(_4336) ? 1.0 : min(_4336, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1954 + _1937) / _1949, (_1956 + _1941) / _1949), _1959), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1956 + _1937) / _1949, (_1941 - _1954) / _1949), _1959), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1937 - _1954) / _1949, (_1941 - _1956) / _1949), _1959), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1937 - _1956) / _1949, (_1954 + _1941) / _1949), _1959), 0.0)).x), vec4(0.25)));
        _2021 = 1.0 - (_2014 * cbSceneParam._m0[34u].x);
        _2022 = 1.0 - (_2014 * cbSceneParam._m0[34u].y);
        _2023 = 1.0 - (_2014 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2021 = 1.0;
        _2022 = 1.0;
        _2023 = 1.0;
    }
    float _2087;
    float _2089;
    float _2091;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2075 = fma(_1871, cbSceneParam._m0[63u].w, fma(_1867, cbSceneParam._m0[63u].z, fma(_1863, cbSceneParam._m0[63u].y, _1859 * cbSceneParam._m0[63u].x)));
        float _2076 = fma(_1871, cbSceneParam._m0[60u].w, fma(_1867, cbSceneParam._m0[60u].z, fma(_1863, cbSceneParam._m0[60u].y, _1859 * cbSceneParam._m0[60u].x))) / _2075;
        float _2077 = fma(_1871, cbSceneParam._m0[61u].w, fma(_1867, cbSceneParam._m0[61u].z, fma(_1863, cbSceneParam._m0[61u].y, _1859 * cbSceneParam._m0[61u].x))) / _2075;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_2076 >= cbSceneParam._m0[64u].x) && (_2077 >= cbSceneParam._m0[64u].y)) && (_2076 <= cbSceneParam._m0[64u].z)) && (_2077 <= cbSceneParam._m0[64u].w))
        {
            float _2215 = fma(_1871, cbSceneParam._m0[62u].w, fma(_1867, cbSceneParam._m0[62u].z, fma(_1863, cbSceneParam._m0[62u].y, _1859 * cbSceneParam._m0[62u].x))) / _2075;
            float _2219 = isnan(cbSceneParam._m0[41u].w) ? _2215 : (isnan(_2215) ? cbSceneParam._m0[41u].w : max(_2215, cbSceneParam._m0[41u].w));
            float _2262 = (cbSceneParam._m0[33u].x - sqrt(((_1873 * _1873) + (_1872 * _1872)) + (_1874 * _1874))) * cbSceneParam._m0[33u].y;
            float _4352 = isnan(0.0) ? _2262 : (isnan(_2262) ? 0.0 : max(_2262, 0.0));
            float _2269 = (isnan(1.0) ? _4352 : (isnan(_4352) ? 1.0 : min(_4352, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2076, cbSceneParam._m0[33u].w + _2077), _2219), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2076, _2077 - cbSceneParam._m0[33u].z), _2219), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2076 - cbSceneParam._m0[33u].z, _2077 - cbSceneParam._m0[33u].w), _2219), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2076 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2077), _2219), 0.0)).x), vec4(0.25)));
            float _2273 = 1.0 - (_2269 * cbSceneParam._m0[34u].x);
            float _2274 = 1.0 - (_2269 * cbSceneParam._m0[34u].y);
            float _2275 = 1.0 - (_2269 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_2275) ? _2023 : (isnan(_2023) ? _2275 : min(_2023, _2275));
            frontier_phi_37_36_ladder_1 = isnan(_2274) ? _2022 : (isnan(_2022) ? _2274 : min(_2022, _2274));
            frontier_phi_37_36_ladder_2 = isnan(_2273) ? _2021 : (isnan(_2021) ? _2273 : min(_2021, _2273));
        }
        else
        {
            frontier_phi_37_36_ladder = _2023;
            frontier_phi_37_36_ladder_1 = _2022;
            frontier_phi_37_36_ladder_2 = _2021;
        }
        _2087 = frontier_phi_37_36_ladder_2;
        _2089 = frontier_phi_37_36_ladder_1;
        _2091 = frontier_phi_37_36_ladder;
    }
    else
    {
        _2087 = _2021;
        _2089 = _2022;
        _2091 = _2023;
    }
    uvec4 _2096 = floatBitsToUint(cbInstanceData._m0[_238 + 5u]);
    uint _2098 = _2096.x * 14u;
    uint _2099 = _2098 + 13u;
    float _2106 = _768 + (-1.0);
    float _2111 = (cbLight._m0[_2099].x * _2106) + 1.0;
    float _2112 = (cbLight._m0[_2099].y * _2106) + 1.0;
    float _2113 = (cbLight._m0[_2099].z * _2106) + 1.0;
    float _2114 = (cbLight._m0[_2099].w * _2106) + 1.0;
    uint _2115 = _2098 + 5u;
    float _2121 = isnan(1.0) ? _2112 : (isnan(_2112) ? 1.0 : min(_2112, 1.0));
    uint _2125 = _2098 + 4u;
    float _2134 = isnan(1.0) ? _2111 : (isnan(_2111) ? 1.0 : min(_2111, 1.0));
    uint _2138 = _2098 | 1u;
    float _2149 = dot(vec3(cbLight._m0[_2098].xyz), vec3(_605, _606, _607));
    float _2152 = dot(vec3(cbLight._m0[_2138].xyz), vec3(_605, _606, _607));
    float _4388 = isnan(0.0) ? _2149 : (isnan(_2149) ? 0.0 : max(_2149, 0.0));
    float _4399 = isnan(0.0) ? _2152 : (isnan(_2152) ? 0.0 : max(_2152, 0.0));
    float _2157 = (isnan(1.0) ? _4388 : (isnan(_4388) ? 1.0 : min(_4388, 1.0))) * 0.3183098733425140380859375;
    float _2159 = (isnan(1.0) ? _4399 : (isnan(_4399) ? 1.0 : min(_4399, 1.0))) * 0.3183098733425140380859375;
    float _2166 = ((cbLight._m0[_2115].x * _2121) * _2159) + (((cbLight._m0[_2125].x * _2087) * _2134) * _2157);
    float _2167 = ((_2121 * cbLight._m0[_2115].y) * _2159) + (((cbLight._m0[_2125].y * _2089) * _2134) * _2157);
    float _2168 = ((_2121 * cbLight._m0[_2115].z) * _2159) + (((cbLight._m0[_2125].z * _2091) * _2134) * _2157);
    uvec4 _2172 = floatBitsToUint(cbLight._m0[_2098 + 12u]);
    bool _2174 = _2172.x == 0u;
    float _2276;
    float _2278;
    float _2280;
    if (_2174)
    {
        _2276 = _2166;
        _2278 = _2167;
        _2280 = _2168;
    }
    else
    {
        uint _2284 = _2098 + 6u;
        float _2300 = (dot(vec3(cbLight._m0[_2098 + 2u].xyz), vec3(_605, _606, _607)) * 0.5) + 0.5;
        float _2301 = _2300 * _2300;
        float _4410 = isnan(0.0) ? _2301 : (isnan(_2301) ? 0.0 : max(_2301, 0.0));
        float _2302 = isnan(1.0) ? _4410 : (isnan(_4410) ? 1.0 : min(_4410, 1.0));
        float _2303 = isnan(1.0) ? _2113 : (isnan(_2113) ? 1.0 : min(_2113, 1.0));
        _2276 = (((cbLight._m0[_2284].x * 0.3183098733425140380859375) * _2302) * _2303) + _2166;
        _2278 = (((cbLight._m0[_2284].y * 0.3183098733425140380859375) * _2302) * _2303) + _2167;
        _2280 = (((cbLight._m0[_2284].z * 0.3183098733425140380859375) * _2302) * _2303) + _2168;
    }
    bool _2283 = _2172.y == 0u;
    float _2338;
    float _2340;
    float _2342;
    if (_2283)
    {
        _2338 = _2276;
        _2340 = _2278;
        _2342 = _2280;
    }
    else
    {
        uint _2500 = _2098 + 7u;
        float _2516 = (dot(vec3(cbLight._m0[_2098 + 3u].xyz), vec3(_605, _606, _607)) * 0.5) + 0.5;
        float _2517 = _2516 * _2516;
        float _4426 = isnan(0.0) ? _2517 : (isnan(_2517) ? 0.0 : max(_2517, 0.0));
        float _2518 = isnan(1.0) ? _4426 : (isnan(_4426) ? 1.0 : min(_4426, 1.0));
        float _2519 = isnan(1.0) ? _2114 : (isnan(_2114) ? 1.0 : min(_2114, 1.0));
        _2338 = (((cbLight._m0[_2500].x * 0.3183098733425140380859375) * _2518) * _2519) + _2276;
        _2340 = (((cbLight._m0[_2500].y * 0.3183098733425140380859375) * _2518) * _2519) + _2278;
        _2342 = (((cbLight._m0[_2500].z * 0.3183098733425140380859375) * _2518) * _2519) + _2280;
    }
    uint _2345 = _2098 + 8u;
    float _2358 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2098].w)) * _608) * 0.949999988079071044921875);
    float _2359 = _2358 * _2358;
    float _2360 = cbLight._m0[_2098].x + _685;
    float _2361 = cbLight._m0[_2098].y + _686;
    float _2362 = cbLight._m0[_2098].z + _687;
    float _2366 = inversesqrt(dot(vec3(_2360, _2361, _2362), vec3(_2360, _2361, _2362)));
    float _2367 = _2366 * _2360;
    float _2368 = _2366 * _2361;
    float _2369 = _2366 * _2362;
    float _2370 = dot(vec3(_605, _606, _607), vec3(cbLight._m0[_2098].xyz));
    float _4442 = isnan(0.0) ? _2370 : (isnan(_2370) ? 0.0 : max(_2370, 0.0));
    float _2373 = isnan(1.0) ? _4442 : (isnan(_4442) ? 1.0 : min(_4442, 1.0));
    float _4453 = isnan(0.0) ? _769 : (isnan(_769) ? 0.0 : max(_769, 0.0));
    float _2374 = isnan(1.0) ? _4453 : (isnan(_4453) ? 1.0 : min(_4453, 1.0));
    float _2375 = dot(vec3(_605, _606, _607), vec3(_2367, _2368, _2369));
    float _4464 = isnan(0.0) ? _2375 : (isnan(_2375) ? 0.0 : max(_2375, 0.0));
    float _2378 = isnan(1.0) ? _4464 : (isnan(_4464) ? 1.0 : min(_4464, 1.0));
    float _2379 = dot(vec3(cbLight._m0[_2098].xyz), vec3(_2367, _2368, _2369));
    float _4475 = isnan(0.0) ? _2379 : (isnan(_2379) ? 0.0 : max(_2379, 0.0));
    float _2383 = _2359 * _2359;
    float _2387 = ((_2378 * _2378) * (_2383 + (-1.0))) + 1.0;
    float _2398 = (exp2(log2(1.0 - (isnan(1.0) ? _4475 : (isnan(_4475) ? 1.0 : min(_4475, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2399 = 1.0 - _2359;
    float _2410 = (0.5 / (((_2374 * ((_2373 * _2399) + _2359)) + 9.9999999392252902907785028219223e-09) + (((_2374 * _2399) + _2359) * _2373))) * _2373;
    float _4486 = isnan(0.0) ? _2410 : (isnan(_2410) ? 0.0 : max(_2410, 0.0));
    float _2412 = (isnan(1.0) ? _4486 : (isnan(_4486) ? 1.0 : min(_4486, 1.0))) * (_2383 / ((_2387 * _2387) * 3.141590118408203125));
    uint _2426 = _2098 + 9u;
    float _2437 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2138].w)) * _608) * 0.949999988079071044921875);
    float _2438 = _2437 * _2437;
    float _2439 = cbLight._m0[_2138].x + _685;
    float _2440 = cbLight._m0[_2138].y + _686;
    float _2441 = cbLight._m0[_2138].z + _687;
    float _2445 = inversesqrt(dot(vec3(_2439, _2440, _2441), vec3(_2439, _2440, _2441)));
    float _2446 = _2445 * _2439;
    float _2447 = _2445 * _2440;
    float _2448 = _2445 * _2441;
    float _2449 = dot(vec3(_605, _606, _607), vec3(cbLight._m0[_2138].xyz));
    float _4497 = isnan(0.0) ? _2449 : (isnan(_2449) ? 0.0 : max(_2449, 0.0));
    float _2452 = isnan(1.0) ? _4497 : (isnan(_4497) ? 1.0 : min(_4497, 1.0));
    float _2453 = dot(vec3(_605, _606, _607), vec3(_2446, _2447, _2448));
    float _4508 = isnan(0.0) ? _2453 : (isnan(_2453) ? 0.0 : max(_2453, 0.0));
    float _2456 = isnan(1.0) ? _4508 : (isnan(_4508) ? 1.0 : min(_4508, 1.0));
    float _2457 = dot(vec3(cbLight._m0[_2138].xyz), vec3(_2446, _2447, _2448));
    float _4519 = isnan(0.0) ? _2457 : (isnan(_2457) ? 0.0 : max(_2457, 0.0));
    float _2461 = _2438 * _2438;
    float _2465 = ((_2456 * _2456) * (_2461 + (-1.0))) + 1.0;
    float _2474 = (exp2(log2(1.0 - (isnan(1.0) ? _4519 : (isnan(_4519) ? 1.0 : min(_4519, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2475 = 1.0 - _2438;
    float _2485 = (0.5 / (((_2374 * ((_2452 * _2475) + _2438)) + 9.9999999392252902907785028219223e-09) + (((_2374 * _2475) + _2438) * _2452))) * _2452;
    float _4530 = isnan(0.0) ? _2485 : (isnan(_2485) ? 0.0 : max(_2485, 0.0));
    float _2487 = (isnan(1.0) ? _4530 : (isnan(_4530) ? 1.0 : min(_4530, 1.0))) * (_2461 / ((_2465 * _2465) * 3.141590118408203125));
    float _2497 = (((_2474 * cbLight._m0[_2426].x) * _2487) * _2121) + ((((cbLight._m0[_2345].x * _2087) * _2398) * _2412) * _2134);
    float _2498 = (((_2474 * cbLight._m0[_2426].y) * _2487) * _2121) + ((((cbLight._m0[_2345].y * _2089) * _2398) * _2412) * _2134);
    float _2499 = (((_2474 * cbLight._m0[_2426].z) * _2487) * _2121) + ((((cbLight._m0[_2345].z * _2091) * _2398) * _2412) * _2134);
    float _2555;
    float _2557;
    float _2559;
    if (_2174)
    {
        _2555 = _2497;
        _2557 = _2498;
        _2559 = _2499;
    }
    else
    {
        uint _2561 = _2098 + 2u;
        uint _2565 = _2098 + 10u;
        float _2579 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2561].w)) * _608) * 0.949999988079071044921875);
        float _2580 = _2579 * _2579;
        float _2581 = cbLight._m0[_2561].x + _685;
        float _2582 = cbLight._m0[_2561].y + _686;
        float _2583 = cbLight._m0[_2561].z + _687;
        float _2587 = inversesqrt(dot(vec3(_2581, _2582, _2583), vec3(_2581, _2582, _2583)));
        float _2588 = _2587 * _2581;
        float _2589 = _2587 * _2582;
        float _2590 = _2587 * _2583;
        float _2591 = dot(vec3(_605, _606, _607), vec3(cbLight._m0[_2561].xyz));
        float _4541 = isnan(0.0) ? _2591 : (isnan(_2591) ? 0.0 : max(_2591, 0.0));
        float _2594 = isnan(1.0) ? _4541 : (isnan(_4541) ? 1.0 : min(_4541, 1.0));
        float _2595 = dot(vec3(_605, _606, _607), vec3(_2588, _2589, _2590));
        float _4552 = isnan(0.0) ? _2595 : (isnan(_2595) ? 0.0 : max(_2595, 0.0));
        float _2598 = isnan(1.0) ? _4552 : (isnan(_4552) ? 1.0 : min(_4552, 1.0));
        float _2599 = dot(vec3(cbLight._m0[_2561].xyz), vec3(_2588, _2589, _2590));
        float _4563 = isnan(0.0) ? _2599 : (isnan(_2599) ? 0.0 : max(_2599, 0.0));
        float _2603 = _2580 * _2580;
        float _2607 = ((_2598 * _2598) * (_2603 + (-1.0))) + 1.0;
        float _2616 = (exp2(log2(1.0 - (isnan(1.0) ? _4563 : (isnan(_4563) ? 1.0 : min(_4563, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2617 = 1.0 - _2580;
        float _2627 = (0.5 / (((_2374 * ((_2594 * _2617) + _2580)) + 9.9999999392252902907785028219223e-09) + (((_2374 * _2617) + _2580) * _2594))) * _2594;
        float _4574 = isnan(0.0) ? _2627 : (isnan(_2627) ? 0.0 : max(_2627, 0.0));
        float _2629 = (isnan(1.0) ? _4574 : (isnan(_4574) ? 1.0 : min(_4574, 1.0))) * (_2603 / ((_2607 * _2607) * 3.141590118408203125));
        float _2630 = isnan(1.0) ? _2113 : (isnan(_2113) ? 1.0 : min(_2113, 1.0));
        _2555 = (((_2616 * cbLight._m0[_2565].x) * _2629) * _2630) + _2497;
        _2557 = (((_2616 * cbLight._m0[_2565].y) * _2629) * _2630) + _2498;
        _2559 = (((_2616 * cbLight._m0[_2565].z) * _2629) * _2630) + _2499;
    }
    float _2661;
    float _2663;
    float _2665;
    if (_2283)
    {
        _2661 = _2555;
        _2663 = _2557;
        _2665 = _2559;
    }
    else
    {
        uint _2672 = _2098 + 3u;
        uint _2676 = _2098 + 11u;
        float _2690 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2672].w)) * _608) * 0.949999988079071044921875);
        float _2691 = _2690 * _2690;
        float _2692 = cbLight._m0[_2672].x + _685;
        float _2693 = cbLight._m0[_2672].y + _686;
        float _2694 = cbLight._m0[_2672].z + _687;
        float _2698 = inversesqrt(dot(vec3(_2692, _2693, _2694), vec3(_2692, _2693, _2694)));
        float _2699 = _2698 * _2692;
        float _2700 = _2698 * _2693;
        float _2701 = _2698 * _2694;
        float _2702 = dot(vec3(_605, _606, _607), vec3(cbLight._m0[_2672].xyz));
        float _4590 = isnan(0.0) ? _2702 : (isnan(_2702) ? 0.0 : max(_2702, 0.0));
        float _2705 = isnan(1.0) ? _4590 : (isnan(_4590) ? 1.0 : min(_4590, 1.0));
        float _2706 = dot(vec3(_605, _606, _607), vec3(_2699, _2700, _2701));
        float _4601 = isnan(0.0) ? _2706 : (isnan(_2706) ? 0.0 : max(_2706, 0.0));
        float _2709 = isnan(1.0) ? _4601 : (isnan(_4601) ? 1.0 : min(_4601, 1.0));
        float _2710 = dot(vec3(cbLight._m0[_2672].xyz), vec3(_2699, _2700, _2701));
        float _4612 = isnan(0.0) ? _2710 : (isnan(_2710) ? 0.0 : max(_2710, 0.0));
        float _2714 = _2691 * _2691;
        float _2718 = ((_2709 * _2709) * (_2714 + (-1.0))) + 1.0;
        float _2727 = (exp2(log2(1.0 - (isnan(1.0) ? _4612 : (isnan(_4612) ? 1.0 : min(_4612, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2728 = 1.0 - _2691;
        float _2738 = (0.5 / (((_2374 * ((_2705 * _2728) + _2691)) + 9.9999999392252902907785028219223e-09) + (((_2374 * _2728) + _2691) * _2705))) * _2705;
        float _4623 = isnan(0.0) ? _2738 : (isnan(_2738) ? 0.0 : max(_2738, 0.0));
        float _2740 = (isnan(1.0) ? _4623 : (isnan(_4623) ? 1.0 : min(_4623, 1.0))) * (_2714 / ((_2718 * _2718) * 3.141590118408203125));
        float _2741 = isnan(1.0) ? _2114 : (isnan(_2114) ? 1.0 : min(_2114, 1.0));
        _2661 = (((_2727 * cbLight._m0[_2676].x) * _2740) * _2741) + _2555;
        _2663 = (((_2727 * cbLight._m0[_2676].y) * _2740) * _2741) + _2557;
        _2665 = (((_2727 * cbLight._m0[_2676].z) * _2740) * _2741) + _2559;
    }
    float _2807;
    float _2809;
    float _2811;
    float _2813;
    float _2815;
    float _2817;
    if (_2096.y == 0u)
    {
        uvec4 _2762 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2763 = _2762.x;
        uint _2774 = uint((float(_2762.y) * floor(float(uint(cbSceneParam._m0[85u].y * _706) / _2763))) + floor(float(uint(cbSceneParam._m0[85u].x * _705) / _2763)));
        float _2784 = (log2(_1874 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2785 = isnan(0.0) ? _2784 : (isnan(_2784) ? 0.0 : max(_2784, 0.0));
        uint _2788 = uint(isnan(14.0) ? _2785 : (isnan(_2785) ? 14.0 : min(_2785, 14.0)));
        uvec4 _2793 = texelFetch(g_lightClusterGridBuffer, int(((_2788 << 2u) + (_2774 << 6u)) >> 2u));
        uint _2794 = _2793.x;
        uint _2795 = _2762.z;
        float _2874;
        float _2876;
        float _2878;
        float _2880;
        float _2882;
        float _2884;
        if (((((1u << ((_2795 >> 4u) & 15u)) + 4294967295u) & _2794) == 0u) || ((_2795 & 240u) == 0u))
        {
            _2874 = 0.0;
            _2876 = 0.0;
            _2878 = 0.0;
            _2880 = 0.0;
            _2882 = 0.0;
            _2884 = 0.0;
        }
        else
        {
            float _2875;
            float _2877;
            float _2879;
            float _2881;
            float _2883;
            float _2885;
            float _3027 = 0.0;
            float _3028 = 0.0;
            float _3029 = 0.0;
            float _3030 = 0.0;
            float _3031 = 0.0;
            float _3032 = 0.0;
            uint _3033 = 0u;
            uint _3042;
            bool _3043;
            for (;;)
            {
                _3042 = texelFetch(g_lightClassification, int((((_2788 << 5u) + (_2774 << 9u)) + (_3033 << 2u)) >> 2u)).x;
                _3043 = _3042 == 0u;
                float frontier_phi_71_pred;
                float frontier_phi_71_pred_1;
                float frontier_phi_71_pred_2;
                float frontier_phi_71_pred_3;
                float frontier_phi_71_pred_4;
                float frontier_phi_71_pred_5;
                if (_3043)
                {
                    frontier_phi_71_pred = _3032;
                    frontier_phi_71_pred_1 = _3031;
                    frontier_phi_71_pred_2 = _3030;
                    frontier_phi_71_pred_3 = _3029;
                    frontier_phi_71_pred_4 = _3028;
                    frontier_phi_71_pred_5 = _3027;
                }
                else
                {
                    float _3172;
                    float _3173;
                    float _3174;
                    float _3175;
                    float _3176;
                    float _3177;
                    uint _3178;
                    _3172 = _3027;
                    _3173 = _3028;
                    _3174 = _3029;
                    _3175 = _3030;
                    _3176 = _3031;
                    _3177 = _3032;
                    _3178 = _3042;
                    float _3099;
                    float _3100;
                    float _3101;
                    float _3102;
                    float _3103;
                    float _3104;
                    for (;;)
                    {
                        uint _3182 = uint(findLSB(_3178)) + (_3033 << 5u);
                        uint _3179 = (_3178 + 4294967295u) & _3178;
                        uint _3184 = _3182 * 48u;
                        vec4 _3198 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3184)).x, texelFetch(g_PointLightRenderingBuffer, int(_3184 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3184 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3184 + 3u)).x));
                        uint _3204 = (_3182 * 48u) + 4u;
                        vec4 _3217 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3204)).x, texelFetch(g_PointLightRenderingBuffer, int(_3204 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3204 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3204 + 3u)).x));
                        uint _3223 = (_3182 * 48u) + 8u;
                        vec3 _3234 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3223)).x, texelFetch(g_PointLightRenderingBuffer, int(_3223 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3223 + 2u)).x));
                        float _3238 = _3198.x - _1872;
                        float _3239 = _3198.y - _1873;
                        float _3240 = _3198.z - _1874;
                        float _3241 = dot(vec3(_3238, _3239, _3240), vec3(_3238, _3239, _3240));
                        float _3244 = inversesqrt(_3241);
                        float _3245 = _3244 * _3238;
                        float _3246 = _3244 * _3239;
                        float _3247 = _3244 * _3240;
                        float _3248 = dot(vec3(_724, _727, _730), vec3(_3245, _3246, _3247));
                        float _3253 = 1.0 - (_3241 * _3198.w);
                        float _4649 = isnan(0.0) ? _3253 : (isnan(_3253) ? 0.0 : max(_3253, 0.0));
                        float _3254 = isnan(1.0) ? _4649 : (isnan(_4649) ? 1.0 : min(_4649, 1.0));
                        float _3255 = sqrt(_3241) * _3217.w;
                        float _3258 = 1.39999997615814208984375 / (_3255 + 1.39999997615814208984375);
                        float _3259 = _3258 * _3258;
                        float _3262 = ((1.0 - _3259) * _3248) + _3259;
                        float _3265 = _3255 * _3255;
                        float _3269 = ((isnan(0.0) ? _3262 : (isnan(_3262) ? 0.0 : max(_3262, 0.0))) * _3254) / ((_3265 * 0.699999988079071044921875) + 1.0);
                        float _3273 = (-0.0) - _1872;
                        float _3274 = (-0.0) - _1873;
                        float _3275 = (-0.0) - _1874;
                        float _3279 = inversesqrt(dot(vec3(_3273, _3274, _3275), vec3(_3273, _3274, _3275)));
                        float _3280 = _3279 * _3273;
                        float _3281 = _3279 * _3274;
                        float _3282 = _3279 * _3275;
                        float _3289 = exp2(log2(1.0 / ((_3265 * 3.5) + 5.0)) * 0.25);
                        float _3290 = 1.0 - _784;
                        float _3297 = sqrt(1.0 - ((1.0 - (_3290 * _3290)) * (1.0 - (_3289 * _3289))));
                        float _3298 = _3297 * _3297;
                        float _3299 = _3298 * _3298;
                        float _3300 = _3280 + _3245;
                        float _3301 = _3281 + _3246;
                        float _3302 = _3282 + _3247;
                        float _3306 = inversesqrt(dot(vec3(_3300, _3301, _3302), vec3(_3300, _3301, _3302)));
                        float _3310 = dot(vec3(_724, _727, _730), vec3(_3280, _3281, _3282));
                        float _4665 = isnan(0.0) ? _3310 : (isnan(_3310) ? 0.0 : max(_3310, 0.0));
                        float _3313 = isnan(1.0) ? _4665 : (isnan(_4665) ? 1.0 : min(_4665, 1.0));
                        float _3314 = dot(vec3(_724, _727, _730), vec3(_3306 * _3300, _3306 * _3301, _3306 * _3302));
                        float _4676 = isnan(0.0) ? _3314 : (isnan(_3314) ? 0.0 : max(_3314, 0.0));
                        float _3317 = isnan(1.0) ? _4676 : (isnan(_4676) ? 1.0 : min(_4676, 1.0));
                        float _3321 = ((_3317 * _3317) * (_3299 + (-1.0))) + 1.0;
                        float _3322 = _3258 * _3298;
                        float _3323 = _3322 * _3322;
                        float _3326 = ((1.0 - _3323) * _3248) + _3323;
                        float _4687 = isnan(0.0) ? _3326 : (isnan(_3326) ? 0.0 : max(_3326, 0.0));
                        float _3327 = isnan(1.0) ? _4687 : (isnan(_4687) ? 1.0 : min(_4687, 1.0));
                        float _3328 = 1.0 - _3298;
                        float _3338 = (0.5 / (((_3327 * ((_3313 * _3328) + _3298)) + 9.9999999392252902907785028219223e-09) + (((_3327 * _3328) + _3298) * _3313))) * _3327;
                        float _4698 = isnan(0.0) ? _3338 : (isnan(_3338) ? 0.0 : max(_3338, 0.0));
                        float _3349 = (((_3299 * 3.1415927410125732421875) * (isnan(1.0) ? _4698 : (isnan(_4698) ? 1.0 : min(_4698, 1.0)))) / ((_3321 * _3321) * ((_3265 * 2.1991131305694580078125) + 3.141590118408203125))) * _3254;
                        _3102 = (_3269 * _3217.x) + _3175;
                        _3103 = (_3269 * _3217.y) + _3176;
                        _3104 = (_3269 * _3217.z) + _3177;
                        _3099 = (_3349 * _3234.x) + _3172;
                        _3100 = (_3349 * _3234.y) + _3173;
                        _3101 = (_3349 * _3234.z) + _3174;
                        if (_3179 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3172 = _3099;
                            _3173 = _3100;
                            _3174 = _3101;
                            _3175 = _3102;
                            _3176 = _3103;
                            _3177 = _3104;
                            _3178 = _3179;
                        }
                    }
                    frontier_phi_71_pred = _3104;
                    frontier_phi_71_pred_1 = _3103;
                    frontier_phi_71_pred_2 = _3102;
                    frontier_phi_71_pred_3 = _3101;
                    frontier_phi_71_pred_4 = _3100;
                    frontier_phi_71_pred_5 = _3099;
                }
                _2885 = frontier_phi_71_pred;
                _2883 = frontier_phi_71_pred_1;
                _2881 = frontier_phi_71_pred_2;
                _2879 = frontier_phi_71_pred_3;
                _2877 = frontier_phi_71_pred_4;
                _2875 = frontier_phi_71_pred_5;
                uint _3034 = _3033 + 1u;
                if (_3034 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3027 = _2875;
                    _3028 = _2877;
                    _3029 = _2879;
                    _3030 = _2881;
                    _3031 = _2883;
                    _3032 = _2885;
                    _3033 = _3034;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2874 = _2875;
            _2876 = _2877;
            _2878 = _2879;
            _2880 = _2881;
            _2882 = _2883;
            _2884 = _2885;
        }
        uvec4 _2888 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2889 = _2888.z;
        uint _2891 = (_2889 >> 8u) & 15u;
        float _2995;
        float _2997;
        float _2999;
        float _3001;
        float _3003;
        float _3005;
        if (((4294967295u << _2891) & _2794) == 0u)
        {
            _2995 = _2874;
            _2997 = _2876;
            _2999 = _2878;
            _3001 = _2880;
            _3003 = _2882;
            _3005 = _2884;
        }
        else
        {
            float _3020 = inversesqrt(dot(vec3(_1872, _1873, _1874), vec3(_1872, _1873, _1874)));
            float _3021 = _3020 * _1872;
            float _3022 = _3020 * _1873;
            float _3023 = _3020 * _1874;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_2891 < ((_2889 >> 12u) & 15u))
            {
                float _2996;
                float _2998;
                float _3000;
                float _3002;
                float _3004;
                float _3006;
                float _3155 = _2874;
                float _3156 = _2876;
                float _3157 = _2878;
                float _3158 = _2880;
                float _3159 = _2882;
                float _3160 = _2884;
                uint _3161 = _2891;
                uint _3170;
                bool _3171;
                for (;;)
                {
                    _3170 = texelFetch(g_lightClassification, int((((_2788 << 5u) + (_2774 << 9u)) + (_3161 << 2u)) >> 2u)).x;
                    _3171 = _3170 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    float frontier_phi_82_pred_3;
                    float frontier_phi_82_pred_4;
                    float frontier_phi_82_pred_5;
                    if (_3171)
                    {
                        frontier_phi_82_pred = _3160;
                        frontier_phi_82_pred_1 = _3159;
                        frontier_phi_82_pred_2 = _3158;
                        frontier_phi_82_pred_3 = _3157;
                        frontier_phi_82_pred_4 = _3156;
                        frontier_phi_82_pred_5 = _3155;
                    }
                    else
                    {
                        float _3363;
                        float _3364;
                        float _3365;
                        float _3366;
                        float _3367;
                        float _3368;
                        float _3656;
                        float _3657;
                        float _3658;
                        float _3659;
                        float _3660;
                        float _3661;
                        float _3376 = _3155;
                        float _3377 = _3156;
                        float _3378 = _3157;
                        float _3379 = _3158;
                        float _3380 = _3159;
                        float _3381 = _3160;
                        uint _3382 = _3170;
                        uint _3383;
                        vec4 _3408;
                        float _3409;
                        vec4 _3424;
                        vec3 _3436;
                        vec4 _3451;
                        vec4 _3466;
                        float _3512;
                        bool _3513;
                        for (;;)
                        {
                            uint _3393 = ((_3161 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3382));
                            _3383 = (_3382 + 4294967295u) & _3382;
                            uint _3395 = _3393 * 40u;
                            _3408 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3395)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3395 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3395 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3395 + 3u)).x));
                            _3409 = _3408.w;
                            uint _3411 = (_3393 * 40u) + 4u;
                            _3424 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3411)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3411 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3411 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3411 + 3u)).x));
                            uint _3426 = (_3393 * 40u) + 8u;
                            _3436 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3426)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3426 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3426 + 2u)).x));
                            uint _3438 = (_3393 * 40u) + 16u;
                            _3451 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3438)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3438 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3438 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3438 + 3u)).x));
                            uint _3453 = (_3393 * 40u) + 20u;
                            _3466 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3453)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3453 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3453 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3453 + 3u)).x));
                            uint _3468 = (_3393 * 40u) + 24u;
                            vec4 _3481 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3468)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3468 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3468 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3468 + 3u)).x));
                            uint _3487 = (_3393 * 40u) + 28u;
                            vec4 _3500 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3487)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3487 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3487 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3487 + 3u)).x));
                            _3512 = fma(_1874, _3500.z, fma(_1873, _3500.y, _3500.x * _1872)) + _3500.w;
                            _3513 = !((fma(_1874, _3481.z, fma(_1873, _3481.y, _3481.x * _1872)) + _3481.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_3513)
                            {
                                float _3540 = _3408.x - _1872;
                                float _3541 = _3408.y - _1873;
                                float _3542 = _3408.z - _1874;
                                float _3543 = dot(vec3(_3540, _3541, _3542), vec3(_3540, _3541, _3542));
                                float _3546 = inversesqrt(_3543);
                                float _3547 = _3546 * _3540;
                                float _3548 = _3546 * _3541;
                                float _3549 = _3546 * _3542;
                                float _3553 = 1.0 - (_3543 / (_3409 * _3409));
                                float _4709 = isnan(0.0) ? _3553 : (isnan(_3553) ? 0.0 : max(_3553, 0.0));
                                float _3554 = isnan(1.0) ? _4709 : (isnan(_4709) ? 1.0 : min(_4709, 1.0));
                                float _3558 = sqrt(_3543) * _3424.w;
                                float _3560 = 1.39999997615814208984375 / (_3558 + 1.39999997615814208984375);
                                float _3561 = _3560 * _3560;
                                float _3564 = ((1.0 - _3561) * dot(vec3(_3547, _3548, _3549), vec3(_724, _727, _730))) + _3561;
                                float _3567 = _3558 * _3558;
                                float _3571 = (fma(_1874, _3451.z, fma(_1873, _3451.y, _3451.x * _1872)) + _3451.w) / _3512;
                                float _3572 = (fma(_1874, _3466.z, fma(_1873, _3466.y, _3466.x * _1872)) + _3466.w) / _3512;
                                float _3576 = 1.0 - dot(vec2(_3571, _3572), vec2(_3571, _3572));
                                float _4725 = isnan(0.0) ? _3576 : (isnan(_3576) ? 0.0 : max(_3576, 0.0));
                                float _3577 = isnan(1.0) ? _4725 : (isnan(_4725) ? 1.0 : min(_4725, 1.0));
                                float _3578 = _3577 * (((isnan(0.0) ? _3564 : (isnan(_3564) ? 0.0 : max(_3564, 0.0))) * _3554) / ((_3567 * 0.699999988079071044921875) + 1.0));
                                float _3590 = exp2(log2(1.0 / ((_3567 * 3.5) + 5.0)) * 0.25);
                                float _3591 = 1.0 - _784;
                                float _3598 = sqrt(1.0 - ((1.0 - (_3591 * _3591)) * (1.0 - (_3590 * _3590))));
                                float _3599 = _3598 * _3598;
                                float _3600 = _3599 * _3599;
                                float _3601 = _3547 - _3021;
                                float _3602 = _3548 - _3022;
                                float _3603 = _3549 - _3023;
                                float _3607 = inversesqrt(dot(vec3(_3601, _3602, _3603), vec3(_3601, _3602, _3603)));
                                float _3611 = dot(vec3(_724, _727, _730), vec3((-0.0) - _3021, (-0.0) - _3022, (-0.0) - _3023));
                                float _4736 = isnan(0.0) ? _3611 : (isnan(_3611) ? 0.0 : max(_3611, 0.0));
                                float _3614 = isnan(1.0) ? _4736 : (isnan(_4736) ? 1.0 : min(_4736, 1.0));
                                float _3615 = dot(vec3(_724, _727, _730), vec3(_3607 * _3601, _3607 * _3602, _3607 * _3603));
                                float _4747 = isnan(0.0) ? _3615 : (isnan(_3615) ? 0.0 : max(_3615, 0.0));
                                float _3618 = isnan(1.0) ? _4747 : (isnan(_4747) ? 1.0 : min(_4747, 1.0));
                                float _3622 = ((_3618 * _3618) * (_3600 + (-1.0))) + 1.0;
                                float _3623 = _3560 * _3599;
                                float _3624 = _3623 * _3623;
                                float _3630 = ((1.0 - _3624) * dot(vec3(_724, _727, _730), vec3(_3547, _3548, _3549))) + _3624;
                                float _4758 = isnan(0.0) ? _3630 : (isnan(_3630) ? 0.0 : max(_3630, 0.0));
                                float _3631 = isnan(1.0) ? _4758 : (isnan(_4758) ? 1.0 : min(_4758, 1.0));
                                float _3632 = 1.0 - _3599;
                                float _3642 = (0.5 / (((_3631 * ((_3614 * _3632) + _3599)) + 9.9999999392252902907785028219223e-09) + (((_3631 * _3632) + _3599) * _3614))) * _3631;
                                float _4769 = isnan(0.0) ? _3642 : (isnan(_3642) ? 0.0 : max(_3642, 0.0));
                                float _3652 = (_3577 * _3554) * (((_3600 * 3.1415927410125732421875) * (isnan(1.0) ? _4769 : (isnan(_4769) ? 1.0 : min(_4769, 1.0)))) / ((_3622 * _3622) * ((_3567 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_88_pred = _3578 * _3424.z;
                                frontier_phi_88_pred_1 = _3578 * _3424.y;
                                frontier_phi_88_pred_2 = _3578 * _3424.x;
                                frontier_phi_88_pred_3 = _3652 * _3436.z;
                                frontier_phi_88_pred_4 = _3652 * _3436.y;
                                frontier_phi_88_pred_5 = _3652 * _3436.x;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _3661 = frontier_phi_88_pred;
                            _3660 = frontier_phi_88_pred_1;
                            _3659 = frontier_phi_88_pred_2;
                            _3658 = frontier_phi_88_pred_3;
                            _3657 = frontier_phi_88_pred_4;
                            _3656 = frontier_phi_88_pred_5;
                            _3366 = _3659 + _3379;
                            _3367 = _3660 + _3380;
                            _3368 = _3661 + _3381;
                            _3363 = _3656 + _3376;
                            _3364 = _3657 + _3377;
                            _3365 = _3658 + _3378;
                            if (_3383 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3376 = _3363;
                                _3377 = _3364;
                                _3378 = _3365;
                                _3379 = _3366;
                                _3380 = _3367;
                                _3381 = _3368;
                                _3382 = _3383;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _3368;
                        frontier_phi_82_pred_1 = _3367;
                        frontier_phi_82_pred_2 = _3366;
                        frontier_phi_82_pred_3 = _3365;
                        frontier_phi_82_pred_4 = _3364;
                        frontier_phi_82_pred_5 = _3363;
                    }
                    _3006 = frontier_phi_82_pred;
                    _3004 = frontier_phi_82_pred_1;
                    _3002 = frontier_phi_82_pred_2;
                    _3000 = frontier_phi_82_pred_3;
                    _2998 = frontier_phi_82_pred_4;
                    _2996 = frontier_phi_82_pred_5;
                    uint _3162 = _3161 + 1u;
                    if (_3162 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3155 = _2996;
                        _3156 = _2998;
                        _3157 = _3000;
                        _3158 = _3002;
                        _3159 = _3004;
                        _3160 = _3006;
                        _3161 = _3162;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _3002;
                frontier_phi_63_64_ladder_1 = _3006;
                frontier_phi_63_64_ladder_2 = _3004;
                frontier_phi_63_64_ladder_3 = _3000;
                frontier_phi_63_64_ladder_4 = _2998;
                frontier_phi_63_64_ladder_5 = _2996;
            }
            else
            {
                frontier_phi_63_64_ladder = _2880;
                frontier_phi_63_64_ladder_1 = _2884;
                frontier_phi_63_64_ladder_2 = _2882;
                frontier_phi_63_64_ladder_3 = _2878;
                frontier_phi_63_64_ladder_4 = _2876;
                frontier_phi_63_64_ladder_5 = _2874;
            }
            _2995 = frontier_phi_63_64_ladder_5;
            _2997 = frontier_phi_63_64_ladder_4;
            _2999 = frontier_phi_63_64_ladder_3;
            _3001 = frontier_phi_63_64_ladder;
            _3003 = frontier_phi_63_64_ladder_2;
            _3005 = frontier_phi_63_64_ladder_1;
        }
        float _3010 = isnan(1.0) ? _768 : (isnan(_768) ? 1.0 : min(_768, 1.0));
        _2807 = (_3010 * _3001) + _2338;
        _2809 = (_3010 * _3003) + _2340;
        _2811 = (_3010 * _3005) + _2342;
        _2813 = ((_2995 * 0.039999999105930328369140625) * _3010) + _2661;
        _2815 = ((_2997 * 0.039999999105930328369140625) * _3010) + _2663;
        _2817 = ((_2999 * 0.039999999105930328369140625) * _3010) + _2665;
    }
    else
    {
        _2807 = _2338;
        _2809 = _2340;
        _2811 = _2342;
        _2813 = _2661;
        _2815 = _2663;
        _2817 = _2665;
    }
    float _4785 = isnan(0.0) ? _753 : (isnan(_753) ? 0.0 : max(_753, 0.0));
    float _4796 = isnan(0.0) ? _754 : (isnan(_754) ? 0.0 : max(_754, 0.0));
    float _4807 = isnan(0.0) ? _755 : (isnan(_755) ? 0.0 : max(_755, 0.0));
    float _2834 = ((isnan(1.0) ? _4785 : (isnan(_4785) ? 1.0 : min(_4785, 1.0))) * (_2807 + ((isnan(0.0) ? _1525 : (isnan(_1525) ? 0.0 : max(_1525, 0.0))) * _768))) + ((_2813 + ((isnan(0.0) ? _1819 : (isnan(_1819) ? 0.0 : max(_1819, 0.0))) * _1604)) * cbPerFrame._m0[3u].x);
    float _2835 = ((isnan(1.0) ? _4796 : (isnan(_4796) ? 1.0 : min(_4796, 1.0))) * (_2809 + ((isnan(0.0) ? _1528 : (isnan(_1528) ? 0.0 : max(_1528, 0.0))) * _768))) + ((_2815 + ((isnan(0.0) ? _1822 : (isnan(_1822) ? 0.0 : max(_1822, 0.0))) * _1604)) * cbPerFrame._m0[3u].x);
    float _2836 = ((isnan(1.0) ? _4807 : (isnan(_4807) ? 1.0 : min(_4807, 1.0))) * (_2811 + ((isnan(0.0) ? _1531 : (isnan(_1531) ? 0.0 : max(_1531, 0.0))) * _768))) + ((_2817 + ((isnan(0.0) ? _1825 : (isnan(_1825) ? 0.0 : max(_1825, 0.0))) * _1604)) * cbPerFrame._m0[3u].x);
    uint _2837 = _238 + 6u;
    float _2845 = _705 / cbSceneParam._m0[86u].x;
    float _2846 = _706 / cbSceneParam._m0[86u].y;
    vec4 _2860 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2845, _2846, (log2((isnan(cbSceneParam._m0[77u].w) ? _626 : (isnan(_626) ? cbSceneParam._m0[77u].w : min(_626, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2862 = _2860.x;
    float _2863 = _2860.y;
    float _2864 = _2860.z;
    float _2865 = _2860.w;
    float _2937;
    float _2939;
    float _2941;
    float _2943;
    if (_626 > cbSceneParam._m0[78u].w)
    {
        float _2899 = isnan(_626) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _626 : min(cbSceneParam._m0[80u].w, _626));
        float _2900 = _2899 / _626;
        float _2911 = _2900 * _678;
        float _2912 = _679 * _2900;
        float _2913 = (-0.0) - _2912;
        float _2915 = _2900 * _680;
        float _2917 = (cbSceneParam._m0[77u].w * _2913) / _2899;
        float _2918 = _2917 + cbSceneParam._m0[79u].w;
        float _2919 = cbSceneParam._m0[79u].w - _2912;
        float _2925 = sqrt(((_2911 * _2911) + (_2912 * _2912)) + (_2915 * _2915));
        float _2928 = (1.0 - (cbSceneParam._m0[77u].w / _2899)) * _2925;
        float _2933 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2935 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3112;
        if (abs((_2913 - _2917) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3112 = ((((_2918 > 0.0) ? exp2(_2933 * _2918) : (2.0 - exp2(_2935 * _2918))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2928;
        }
        else
        {
            float _3056 = 1.0 / cbSceneParam._m0[80u].x;
            float _3057 = isnan(_2919) ? _2918 : (isnan(_2918) ? _2919 : max(_2918, _2919));
            float _3058 = isnan(_2919) ? _2918 : (isnan(_2918) ? _2919 : min(_2918, _2919));
            float _3067 = isnan(0.0) ? _3057 : (isnan(_3057) ? 0.0 : min(_3057, 0.0));
            float _3068 = isnan(0.0) ? _3058 : (isnan(_3058) ? 0.0 : min(_3058, 0.0));
            _3112 = ((abs(_2925 / _2913) * cbSceneParam._m0[80u].y) * ((((_3067 - _3068) * 2.0) - ((exp2(_2933 * (isnan(0.0) ? _3057 : (isnan(_3057) ? 0.0 : max(_3057, 0.0)))) - exp2(_2933 * (isnan(0.0) ? _3058 : (isnan(_3058) ? 0.0 : max(_3058, 0.0))))) * _3056)) - ((exp2(_2935 * _3067) - exp2(_2935 * _3068)) * _3056))) + (_2928 * cbSceneParam._m0[80u].z);
        }
        vec4 _3114 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2845, _2846, 1.0), 0.0);
        float _3123 = exp2((_3112 * (-1.44269502162933349609375)) * (1.0 - _3114.w));
        float _3124 = log2(_3123);
        float _3140 = log2(_2865);
        _2937 = (exp2(_3140 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3124 * cbSceneParam._m0[78u].x)) * _3114.x) / cbSceneParam._m0[78u].x)) + _2862;
        _2939 = (exp2(_3140 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3124 * cbSceneParam._m0[78u].y)) * _3114.y) / cbSceneParam._m0[78u].y)) + _2863;
        _2941 = (exp2(_3140 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3124 * cbSceneParam._m0[78u].z)) * _3114.z) / cbSceneParam._m0[78u].z)) + _2864;
        _2943 = _3123 * _2865;
    }
    else
    {
        _2937 = _2862;
        _2939 = _2863;
        _2941 = _2864;
        _2943 = _2865;
    }
    bool _3150;
    vec4 _2953;
    vec4 _2975;
    float _2977;
    float _2981;
    float _2982;
    float _2983;
    float _2984;
    bool _2994;
    for (;;)
    {
        _2953 = cbMatDynParam._m0[0u];
        float _2955 = roundEven(_2953.y);
        bool _2956 = _2955 == 3.0;
        float _2957 = log2(_2943);
        float _2964 = exp2(_2957 * cbSceneParam._m0[78u].x) * _2834;
        float _2965 = exp2(_2957 * cbSceneParam._m0[78u].y) * _2835;
        float _2966 = exp2(_2957 * cbSceneParam._m0[78u].z) * _2836;
        float _2973 = _694 + (-0.5);
        _2975 = cbMtdParam._m0[1u];
        _2977 = _2975.y * _2973;
        float _2980 = (_2955 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2981 = _2980 * (_2956 ? _2964 : (_2964 + (cbSceneParam._m0[72u].w * _2937)));
        _2982 = _2980 * (_2956 ? _2965 : (_2965 + (cbSceneParam._m0[72u].w * _2939)));
        _2983 = _2980 * (_2956 ? _2966 : (_2966 + (cbSceneParam._m0[72u].w * _2941)));
        _2984 = _2973 * 0.999000012874603271484375;
        _2994 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2994)
        {
            if ((cbInstanceData._m0[_238 + 7u].x + _2984) < 0.5)
            {
                _3150 = true;
                break;
            }
        }
        uint _3091 = _743 + uint(_2953.w);
        if ((cbInstanceData._m0[_3091].w < 1.0) && ((cbInstanceData._m0[_3091].w + _2984) < 0.5))
        {
            _3150 = true;
            break;
        }
        if ((_2977 + 1.0) < _2975.x)
        {
            _3150 = true;
            break;
        }
        _3150 = false;
        break;
    }
    float _3354;
    if (_3150)
    {
        discard_state = true;
        _3354 = 0.0;
    }
    else
    {
        _3354 = cbInstanceData._m0[_2837].w;
    }
    SV_Target.x = _2981;
    SV_Target.y = _2982;
    SV_Target.z = _2983;
    SV_Target.w = _3354;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2837].w;
    discard_exit();
}


