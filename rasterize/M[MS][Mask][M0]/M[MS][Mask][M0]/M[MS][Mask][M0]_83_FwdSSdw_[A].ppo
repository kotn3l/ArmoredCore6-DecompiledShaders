#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 13) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_22;
layout(set = 0, binding = 14) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_10;
layout(set = 0, binding = 20) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_6;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1378;
float _3759;
float _3760;
float _3761;
float _3762;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _227 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _228 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _229 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _235 = inversesqrt(dot(vec3(_227, _228, _229), vec3(_227, _228, _229)));
    float _242 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _249 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _263 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _265 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _266 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3771 = isnan(0.0) ? _263 : (isnan(_263) ? 0.0 : max(_263, 0.0));
    float _3782 = isnan(0.0) ? _265 : (isnan(_265) ? 0.0 : max(_265, 0.0));
    float _3793 = isnan(0.0) ? _266 : (isnan(_266) ? 0.0 : max(_266, 0.0));
    uint _276 = uint(roundEven(NORMAL.w)) * 13u;
    uint _281 = _276 + 1u;
    uint _285 = _276 + 2u;
    float _294 = sqrt(((cbInstanceData._m0[_281].x * cbInstanceData._m0[_281].x) + (cbInstanceData._m0[_276].x * cbInstanceData._m0[_276].x)) + (cbInstanceData._m0[_285].x * cbInstanceData._m0[_285].x));
    float _295 = _294 * TEXCOORD.z;
    float _296 = _294 * TEXCOORD.w;
    vec4 _309 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _295) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _296) + cbTextureTilingScale._m0[13u].w));
    vec4 _333 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _338 = _333.x * cbMtdParam._m0[11u].x;
    float _339 = _333.y * cbMtdParam._m0[11u].y;
    float _340 = _333.z * cbMtdParam._m0[11u].z;
    vec4 _359 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _295) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _296) + cbTextureTilingScale._m0[5u].w));
    vec4 _378 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _413 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _415 = _413.x;
    float _427 = dot(vec4(_415, _413.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _444 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _378.x) * 2.0) - ((((_415 - _427) * cbMtdParam._m0[24u].z) + _427) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3804 = isnan(0.0) ? _444 : (isnan(_444) ? 0.0 : max(_444, 0.0));
    float _445 = isnan(1.0) ? _3804 : (isnan(_3804) ? 1.0 : min(_3804, 1.0));
    float _452 = (_445 * ((_359.x * cbMtdParam._m0[12u].x) - _338)) + _338;
    float _453 = (_445 * ((_359.y * cbMtdParam._m0[12u].y) - _339)) + _339;
    float _454 = (_445 * ((_359.z * cbMtdParam._m0[12u].z) - _340)) + _340;
    vec4 _471 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _295) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _296) + cbTextureTilingScale._m0[3u].w));
    vec4 _491 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _493 = _491.x;
    float _503 = dot(vec4(_493, _491.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _517 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _378.y) * 2.0) - ((((_493 - _503) * cbMtdParam._m0[24u].z) + _503) * cbMtdParam._m0[20u].w))) + 1.0;
    float _3815 = isnan(0.0) ? _517 : (isnan(_517) ? 0.0 : max(_517, 0.0));
    float _518 = isnan(1.0) ? _3815 : (isnan(_3815) ? 1.0 : min(_3815, 1.0));
    float _525 = (_518 * ((_471.x * cbMtdParam._m0[13u].x) - _452)) + _452;
    float _526 = (_518 * ((_471.y * cbMtdParam._m0[13u].y) - _453)) + _453;
    float _527 = (_518 * ((_471.z * cbMtdParam._m0[13u].z) - _454)) + _454;
    float _531 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _309.x) * _525;
    float _534 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _309.y) * _526;
    float _537 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _309.z) * _527;
    float _544 = ((_525 - _531) * (isnan(1.0) ? _3771 : (isnan(_3771) ? 1.0 : min(_3771, 1.0)))) + _531;
    float _545 = ((_526 - _534) * (isnan(1.0) ? _3782 : (isnan(_3782) ? 1.0 : min(_3782, 1.0)))) + _534;
    float _546 = ((_527 - _537) * (isnan(1.0) ? _3793 : (isnan(_3793) ? 1.0 : min(_3793, 1.0)))) + _537;
    vec4 _565 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _295) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _296) + cbTextureTilingScale._m0[14u].w));
    vec4 _584 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _295) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _296) + cbTextureTilingScale._m0[20u].w));
    vec4 _607 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _295) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _296) + cbTextureTilingScale._m0[4u].w));
    vec4 _624 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _626 = _624.x;
    float _627 = _624.y;
    float _628 = _624.z;
    float _635 = ((_607.x - _626) * _445) + _626;
    float _636 = ((_607.y - _627) * _445) + _627;
    float _637 = ((_607.z - _628) * _445) + _628;
    vec4 _649 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _295) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _296) + cbTextureTilingScale._m0[2u].w));
    float _662 = ((_649.z - _637) * _518) + _637;
    float _665 = ((((_649.x - _635) * _518) + _635) * 2.0) + (-1.0);
    float _666 = ((((_649.y - _636) * _518) + _636) * 2.0) + (-1.0);
    float _667 = dot(vec2(_665, _666), vec2(_665, _666));
    float _3826 = isnan(0.0) ? _667 : (isnan(_667) ? 0.0 : max(_667, 0.0));
    float _672 = sqrt(1.0 - (isnan(1.0) ? _3826 : (isnan(_3826) ? 1.0 : min(_3826, 1.0))));
    vec4 _686 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _711 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _295) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _296) + cbTextureTilingScale._m0[11u].w));
    float _713 = _711.x;
    float _714 = 1.0 - _713;
    float _727 = (TEXCOORD_8.w - ((cbMtdParam._m0[21u].z * (1.0 - TEXCOORD_8.w)) * ((((_713 - _714) * cbMtdParam._m0[24u].w) + _714) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3837 = isnan(0.0) ? _727 : (isnan(_727) ? 0.0 : max(_727, 0.0));
    float _728 = isnan(1.0) ? _3837 : (isnan(_3837) ? 1.0 : min(_3837, 1.0));
    float _735 = (_728 * ((_565.x * cbMtdParam._m0[18u].x) - _544)) + _544;
    float _736 = (_728 * ((_565.y * cbMtdParam._m0[18u].y) - _545)) + _545;
    float _737 = (_728 * ((_565.z * cbMtdParam._m0[18u].z) - _546)) + _546;
    float _742 = (((_584.z - _662) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _662;
    float _746 = ((_686.z - _742) * cbMtdParam._m0[19u].w) + _742;
    vec4 _759 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _295) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _296) + cbTextureTilingScale._m0[15u].w));
    float _766 = (_759.x * 2.0) + (-1.0);
    float _767 = (_759.y * 2.0) + (-1.0);
    float _768 = dot(vec2(_766, _767), vec2(_766, _767));
    float _3848 = isnan(0.0) ? _768 : (isnan(_768) ? 0.0 : max(_768, 0.0));
    float _776 = (_728 * (_759.z - _746)) + _746;
    float _785 = (_665 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_584.x * 2.0) + (-1.0)))) + (((_686.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _786 = (_666 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_584.y * 2.0) + (-1.0)))) + (((_686.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _798 = (((_766 - _785) + (cbMtdParam._m0[21u].x * _785)) * _728) + _785;
    float _799 = (((_767 - _786) + (cbMtdParam._m0[21u].x * _786)) * _728) + _786;
    float _800 = (_728 * (sqrt(1.0 - (isnan(1.0) ? _3848 : (isnan(_3848) ? 1.0 : min(_3848, 1.0)))) - _672)) + _672;
    float _802 = cbMtdParam._m0[22u].x + _686.w;
    float _805 = fma(_800, _242 * NORMAL.x, fma(_799, _249 * TANGENT.x, (_235 * _227) * _798));
    float _808 = fma(_800, _242 * NORMAL.y, fma(_799, _249 * TANGENT.y, (_235 * _228) * _798));
    float _811 = fma(_800, _242 * NORMAL.z, fma(_799, _249 * TANGENT.z, (_235 * _229) * _798));
    float _815 = inversesqrt(dot(vec3(_805, _808, _811), vec3(_805, _808, _811)));
    float _816 = _815 * _805;
    float _817 = _815 * _808;
    float _818 = _815 * _811;
    float _3859 = isnan(0.0) ? _776 : (isnan(_776) ? 0.0 : max(_776, 0.0));
    float _819 = isnan(1.0) ? _3859 : (isnan(_3859) ? 1.0 : min(_3859, 1.0));
    float _3870 = isnan(0.0) ? _802 : (isnan(_802) ? 0.0 : max(_802, 0.0));
    float _3881 = isnan(0.0) ? _735 : (isnan(_735) ? 0.0 : max(_735, 0.0));
    float _3892 = isnan(0.0) ? _736 : (isnan(_736) ? 0.0 : max(_736, 0.0));
    float _3903 = isnan(0.0) ? _737 : (isnan(_737) ? 0.0 : max(_737, 0.0));
    float _837 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _879 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _889 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _879);
    float _890 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _879);
    float _891 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _879);
    float _895 = inversesqrt(dot(vec3(_889, _890, _891), vec3(_889, _890, _891)));
    float _896 = _889 * _895;
    float _897 = _890 * _895;
    float _898 = _891 * _895;
    vec4 _903 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _905 = _903.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1059 = sqrt(((_889 * _889) + (_890 * _890)) + (_891 * _891));
        float _1065 = (cbMatDynParam._m0[5u].x * _1059) + cbMatDynParam._m0[5u].y;
        float _3914 = isnan(0.0) ? _1065 : (isnan(_1065) ? 0.0 : max(_1065, 0.0));
        float _1066 = isnan(1.0) ? _3914 : (isnan(_3914) ? 1.0 : min(_3914, 1.0));
        float _1070 = (cbMatDynParam._m0[5u].z * _1059) + cbMatDynParam._m0[5u].w;
        float _3925 = isnan(0.0) ? _1070 : (isnan(_1070) ? 0.0 : max(_1070, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3925 : (isnan(_3925) ? 1.0 : min(_3925, 1.0))) - _1066)) + _1066) < ((_905 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _916 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _917 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _935 = fma(_818, cbSceneParam._m0[5u].z, fma(_817, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _816));
    float _938 = fma(_818, cbSceneParam._m0[6u].z, fma(_817, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _816));
    float _941 = fma(_818, cbSceneParam._m0[7u].z, fma(_817, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _816));
    uint _954 = _276 + 9u;
    uint _955 = _954 + uint(cbMatDynParam._m0[0u].w);
    float _961 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3881 : (isnan(_3881) ? 1.0 : min(_3881, 1.0)))) * cbInstanceData._m0[_955].x;
    float _962 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3892 : (isnan(_3892) ? 1.0 : min(_3892, 1.0)))) * cbInstanceData._m0[_955].y;
    float _963 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3903 : (isnan(_3903) ? 1.0 : min(_3903, 1.0)))) * cbInstanceData._m0[_955].z;
    float _3936 = isnan(0.0) ? _961 : (isnan(_961) ? 0.0 : max(_961, 0.0));
    float _964 = isnan(1.0) ? _3936 : (isnan(_3936) ? 1.0 : min(_3936, 1.0));
    float _3947 = isnan(0.0) ? _962 : (isnan(_962) ? 0.0 : max(_962, 0.0));
    float _965 = isnan(1.0) ? _3947 : (isnan(_3947) ? 1.0 : min(_3947, 1.0));
    float _3958 = isnan(0.0) ? _963 : (isnan(_963) ? 0.0 : max(_963, 0.0));
    float _966 = isnan(1.0) ? _3958 : (isnan(_3958) ? 1.0 : min(_3958, 1.0));
    vec4 _975 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _916, cbSceneParam._m0[86u].y * _917));
    float _979 = ((isnan(1.0) ? _3870 : (isnan(_3870) ? 1.0 : min(_3870, 1.0))) * TEXCOORD_5.w) * _975.x;
    float _980 = dot(vec3(_816, _817, _818), vec3(_896, _897, _898));
    float _983 = _980 * 2.0;
    float _987 = (_983 * _816) - _896;
    float _988 = (_983 * _817) - _897;
    float _989 = (_983 * _818) - _898;
    float _993 = abs(dot(vec3(_896, _897, _898), vec3(_816, _817, _818)));
    float _3969 = isnan(0.0) ? _993 : (isnan(_993) ? 0.0 : max(_993, 0.0));
    float _995 = sqrt(_819);
    float _1008 = exp2((_995 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3969 : (isnan(_3969) ? 1.0 : min(_3969, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_995 * 3.0));
    float _1040 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1044 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1048 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1377;
    float _1379;
    float _1380;
    float _1381;
    float _1382;
    float _1383;
    float _1384;
    float _1385;
    float _1386;
    float _1387;
    float _1388;
    float _1389;
    float _1390;
    float _1391;
    float _1392;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1102 = fma(_1048, cbModelParam._m0[26u].z, fma(_1044, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1040));
        float _1106 = fma(_1048, cbModelParam._m0[27u].z, fma(_1044, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1040));
        float _1110 = fma(_1048, cbModelParam._m0[28u].z, fma(_1044, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1040));
        float _1135 = _1040 + _816;
        float _1136 = _1044 + _817;
        float _1137 = _1048 + _818;
        float _1147 = fma(_1137, cbModelParam._m0[26u].z, fma(_1136, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1135)) - _1102;
        float _1148 = fma(_1137, cbModelParam._m0[27u].z, fma(_1136, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1135)) - _1106;
        float _1149 = fma(_1137, cbModelParam._m0[28u].z, fma(_1136, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1135)) - _1110;
        float _1153 = inversesqrt(dot(vec3(_1147, _1148, _1149), vec3(_1147, _1148, _1149)));
        float _1166 = ((_1153 * _1147) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1102 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1167 = ((_1153 * _1148) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1106 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1168 = ((_1153 * _1149) / cbModelParam._m0[34u].z) + ((((((_1110 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1171 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1166, _1167, _1168), 0.0);
        vec4 _1178 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1166, _1167, _1168), 0.0);
        vec4 _1185 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1166, _1167, _1168), 0.0);
        vec4 _1192 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1166, _1167, _1168), 0.0);
        float _1205 = exp2((_1171.w + (-0.5)) * 20.0) * 2.0;
        float _1206 = _1205 * (_1171.x + (-0.5));
        float _1207 = _1205 * (_1171.y + (-0.5));
        float _1208 = _1205 * (_1171.z + (-0.5));
        float _1215 = exp2((_1178.w + (-0.5)) * 20.0) * 2.0;
        float _1216 = _1215 * (_1178.x + (-0.5));
        float _1217 = _1215 * (_1178.y + (-0.5));
        float _1218 = _1215 * (_1178.z + (-0.5));
        float _1225 = exp2((_1185.w + (-0.5)) * 20.0) * 2.0;
        float _1226 = _1225 * (_1185.x + (-0.5));
        float _1227 = _1225 * (_1185.y + (-0.5));
        float _1228 = _1225 * (_1185.z + (-0.5));
        float _1235 = exp2((_1192.w + (-0.5)) * 20.0) * 2.0;
        float _1236 = _1235 * (_1192.x + (-0.5));
        float _1237 = _1235 * (_1192.y + (-0.5));
        float _1238 = _1235 * (_1192.z + (-0.5));
        float _1239 = isnan(0.0) ? _1236 : (isnan(_1236) ? 0.0 : max(_1236, 0.0));
        float _1240 = isnan(0.0) ? _1237 : (isnan(_1237) ? 0.0 : max(_1237, 0.0));
        float _1241 = isnan(0.0) ? _1238 : (isnan(_1238) ? 0.0 : max(_1238, 0.0));
        float _1242 = _1206 * 0.5;
        float _1243 = _1216 * 0.5;
        float _1244 = _1226 * 0.5;
        float _1245 = dot(vec3(_1242, _1243, _1244), vec3(_1242, _1243, _1244));
        float _1250 = (_1245 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1245);
        float _1259 = (dot(vec3(_816, _817, _818), vec3(_1250 * _1242, _1250 * _1243, _1250 * _1244)) + 1.0) * 0.5;
        float _3995 = isnan(0.0) ? _1259 : (isnan(_1259) ? 0.0 : max(_1259, 0.0));
        float _1269 = sqrt(((_1243 * _1243) + (_1242 * _1242)) + (_1244 * _1244)) / (_1239 + 9.9999997473787516355514526367188e-06);
        float _4006 = isnan(0.0) ? _1269 : (isnan(_1269) ? 0.0 : max(_1269, 0.0));
        float _1270 = isnan(1.0) ? _4006 : (isnan(_4006) ? 1.0 : min(_4006, 1.0));
        float _1271 = _1270 * 2.0;
        float _1275 = (1.0 - _1270) / (_1270 + 1.0);
        float _4017 = isnan(0.0) ? _1275 : (isnan(_1275) ? 0.0 : max(_1275, 0.0));
        float _1276 = isnan(1.0) ? _4017 : (isnan(_4017) ? 1.0 : min(_4017, 1.0));
        float _1285 = ((((1.0 - _1276) * (_1271 + 2.0)) * exp2(log2(isnan(1.0) ? _3995 : (isnan(_3995) ? 1.0 : min(_3995, 1.0))) * (_1271 + 1.0))) + _1276) * _1239;
        float _1286 = _1207 * 0.5;
        float _1287 = _1217 * 0.5;
        float _1288 = _1227 * 0.5;
        float _1289 = dot(vec3(_1286, _1287, _1288), vec3(_1286, _1287, _1288));
        float _1294 = (_1289 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1289);
        float _1302 = (dot(vec3(_816, _817, _818), vec3(_1294 * _1286, _1294 * _1287, _1294 * _1288)) + 1.0) * 0.5;
        float _4028 = isnan(0.0) ? _1302 : (isnan(_1302) ? 0.0 : max(_1302, 0.0));
        float _1311 = sqrt(((_1287 * _1287) + (_1286 * _1286)) + (_1288 * _1288)) / (_1240 + 9.9999997473787516355514526367188e-06);
        float _4039 = isnan(0.0) ? _1311 : (isnan(_1311) ? 0.0 : max(_1311, 0.0));
        float _1312 = isnan(1.0) ? _4039 : (isnan(_4039) ? 1.0 : min(_4039, 1.0));
        float _1313 = _1312 * 2.0;
        float _1317 = (1.0 - _1312) / (_1312 + 1.0);
        float _4050 = isnan(0.0) ? _1317 : (isnan(_1317) ? 0.0 : max(_1317, 0.0));
        float _1318 = isnan(1.0) ? _4050 : (isnan(_4050) ? 1.0 : min(_4050, 1.0));
        float _1327 = ((((1.0 - _1318) * (_1313 + 2.0)) * exp2(log2(isnan(1.0) ? _4028 : (isnan(_4028) ? 1.0 : min(_4028, 1.0))) * (_1313 + 1.0))) + _1318) * _1240;
        float _1328 = _1208 * 0.5;
        float _1329 = _1218 * 0.5;
        float _1330 = _1228 * 0.5;
        float _1331 = dot(vec3(_1328, _1329, _1330), vec3(_1328, _1329, _1330));
        float _1336 = (_1331 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1331);
        float _1344 = (dot(vec3(_816, _817, _818), vec3(_1336 * _1328, _1336 * _1329, _1336 * _1330)) + 1.0) * 0.5;
        float _4061 = isnan(0.0) ? _1344 : (isnan(_1344) ? 0.0 : max(_1344, 0.0));
        float _1353 = sqrt(((_1329 * _1329) + (_1328 * _1328)) + (_1330 * _1330)) / (_1241 + 9.9999997473787516355514526367188e-06);
        float _4072 = isnan(0.0) ? _1353 : (isnan(_1353) ? 0.0 : max(_1353, 0.0));
        float _1354 = isnan(1.0) ? _4072 : (isnan(_4072) ? 1.0 : min(_4072, 1.0));
        float _1355 = _1354 * 2.0;
        float _1359 = (1.0 - _1354) / (_1354 + 1.0);
        float _4083 = isnan(0.0) ? _1359 : (isnan(_1359) ? 0.0 : max(_1359, 0.0));
        float _1360 = isnan(1.0) ? _4083 : (isnan(_4083) ? 1.0 : min(_4083, 1.0));
        float _1369 = ((((1.0 - _1360) * (_1355 + 2.0)) * exp2(log2(isnan(1.0) ? _4061 : (isnan(_4061) ? 1.0 : min(_4061, 1.0))) * (_1355 + 1.0))) + _1360) * _1241;
        _1377 = _1208;
        _1379 = _1207;
        _1380 = _1206;
        _1381 = _1218;
        _1382 = _1217;
        _1383 = _1216;
        _1384 = _1228;
        _1385 = _1227;
        _1386 = _1226;
        _1387 = _1241;
        _1388 = _1240;
        _1389 = _1239;
        _1390 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1285 : (isnan(_1285) ? 0.0 : max(_1285, 0.0)));
        _1391 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1327 : (isnan(_1327) ? 0.0 : max(_1327, 0.0)));
        _1392 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1369 : (isnan(_1369) ? 0.0 : max(_1369, 0.0)));
    }
    else
    {
        _1377 = _1378;
        _1379 = _1378;
        _1380 = _1378;
        _1381 = _1378;
        _1382 = _1378;
        _1383 = _1378;
        _1384 = _1378;
        _1385 = _1378;
        _1386 = _1378;
        _1387 = _1378;
        _1388 = _1378;
        _1389 = _1378;
        _1390 = 0.0;
        _1391 = 0.0;
        _1392 = 0.0;
    }
    float _1688;
    float _1689;
    float _1690;
    float _1691;
    float _1692;
    float _1693;
    float _1694;
    float _1695;
    float _1696;
    float _1697;
    float _1698;
    float _1699;
    float _1700;
    float _1701;
    float _1702;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1419 = fma(_1048, cbModelParam._m0[30u].z, fma(_1044, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1040));
        float _1423 = fma(_1048, cbModelParam._m0[31u].z, fma(_1044, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1040));
        float _1427 = fma(_1048, cbModelParam._m0[32u].z, fma(_1044, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1040));
        float _1450 = _1040 + _816;
        float _1451 = _1044 + _817;
        float _1452 = _1048 + _818;
        float _1462 = fma(_1452, cbModelParam._m0[30u].z, fma(_1451, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1450)) - _1419;
        float _1463 = fma(_1452, cbModelParam._m0[31u].z, fma(_1451, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1450)) - _1423;
        float _1464 = fma(_1452, cbModelParam._m0[32u].z, fma(_1451, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1450)) - _1427;
        float _1468 = inversesqrt(dot(vec3(_1462, _1463, _1464), vec3(_1462, _1463, _1464)));
        float _1481 = ((_1468 * _1462) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1419 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1482 = ((_1468 * _1463) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1423 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1483 = ((_1468 * _1464) / cbModelParam._m0[35u].z) + ((((((_1427 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1485 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1481, _1482, _1483), 0.0);
        vec4 _1492 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1481, _1482, _1483), 0.0);
        vec4 _1499 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1481, _1482, _1483), 0.0);
        vec4 _1506 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1481, _1482, _1483), 0.0);
        float _1518 = exp2((_1485.w + (-0.5)) * 20.0) * 2.0;
        float _1519 = _1518 * (_1485.x + (-0.5));
        float _1520 = _1518 * (_1485.y + (-0.5));
        float _1521 = _1518 * (_1485.z + (-0.5));
        float _1528 = exp2((_1492.w + (-0.5)) * 20.0) * 2.0;
        float _1529 = _1528 * (_1492.x + (-0.5));
        float _1530 = _1528 * (_1492.y + (-0.5));
        float _1531 = _1528 * (_1492.z + (-0.5));
        float _1538 = exp2((_1499.w + (-0.5)) * 20.0) * 2.0;
        float _1539 = _1538 * (_1499.x + (-0.5));
        float _1540 = _1538 * (_1499.y + (-0.5));
        float _1541 = _1538 * (_1499.z + (-0.5));
        float _1548 = exp2((_1506.w + (-0.5)) * 20.0) * 2.0;
        float _1549 = _1548 * (_1506.x + (-0.5));
        float _1550 = _1548 * (_1506.y + (-0.5));
        float _1551 = _1548 * (_1506.z + (-0.5));
        float _1552 = isnan(0.0) ? _1549 : (isnan(_1549) ? 0.0 : max(_1549, 0.0));
        float _1553 = isnan(0.0) ? _1550 : (isnan(_1550) ? 0.0 : max(_1550, 0.0));
        float _1554 = isnan(0.0) ? _1551 : (isnan(_1551) ? 0.0 : max(_1551, 0.0));
        float _1555 = _1519 * 0.5;
        float _1556 = _1529 * 0.5;
        float _1557 = _1539 * 0.5;
        float _1558 = dot(vec3(_1555, _1556, _1557), vec3(_1555, _1556, _1557));
        float _1563 = (_1558 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1558);
        float _1571 = (dot(vec3(_816, _817, _818), vec3(_1563 * _1555, _1563 * _1556, _1563 * _1557)) + 1.0) * 0.5;
        float _4124 = isnan(0.0) ? _1571 : (isnan(_1571) ? 0.0 : max(_1571, 0.0));
        float _1580 = sqrt(((_1556 * _1556) + (_1555 * _1555)) + (_1557 * _1557)) / (_1552 + 9.9999997473787516355514526367188e-06);
        float _4135 = isnan(0.0) ? _1580 : (isnan(_1580) ? 0.0 : max(_1580, 0.0));
        float _1581 = isnan(1.0) ? _4135 : (isnan(_4135) ? 1.0 : min(_4135, 1.0));
        float _1582 = _1581 * 2.0;
        float _1586 = (1.0 - _1581) / (_1581 + 1.0);
        float _4146 = isnan(0.0) ? _1586 : (isnan(_1586) ? 0.0 : max(_1586, 0.0));
        float _1587 = isnan(1.0) ? _4146 : (isnan(_4146) ? 1.0 : min(_4146, 1.0));
        float _1596 = ((((1.0 - _1587) * (_1582 + 2.0)) * exp2(log2(isnan(1.0) ? _4124 : (isnan(_4124) ? 1.0 : min(_4124, 1.0))) * (_1582 + 1.0))) + _1587) * _1552;
        float _1597 = _1520 * 0.5;
        float _1598 = _1530 * 0.5;
        float _1599 = _1540 * 0.5;
        float _1600 = dot(vec3(_1597, _1598, _1599), vec3(_1597, _1598, _1599));
        float _1605 = (_1600 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1600);
        float _1613 = (dot(vec3(_816, _817, _818), vec3(_1605 * _1597, _1605 * _1598, _1605 * _1599)) + 1.0) * 0.5;
        float _4157 = isnan(0.0) ? _1613 : (isnan(_1613) ? 0.0 : max(_1613, 0.0));
        float _1622 = sqrt(((_1598 * _1598) + (_1597 * _1597)) + (_1599 * _1599)) / (_1553 + 9.9999997473787516355514526367188e-06);
        float _4168 = isnan(0.0) ? _1622 : (isnan(_1622) ? 0.0 : max(_1622, 0.0));
        float _1623 = isnan(1.0) ? _4168 : (isnan(_4168) ? 1.0 : min(_4168, 1.0));
        float _1624 = _1623 * 2.0;
        float _1628 = (1.0 - _1623) / (_1623 + 1.0);
        float _4179 = isnan(0.0) ? _1628 : (isnan(_1628) ? 0.0 : max(_1628, 0.0));
        float _1629 = isnan(1.0) ? _4179 : (isnan(_4179) ? 1.0 : min(_4179, 1.0));
        float _1638 = ((((1.0 - _1629) * (_1624 + 2.0)) * exp2(log2(isnan(1.0) ? _4157 : (isnan(_4157) ? 1.0 : min(_4157, 1.0))) * (_1624 + 1.0))) + _1629) * _1553;
        float _1639 = _1521 * 0.5;
        float _1640 = _1531 * 0.5;
        float _1641 = _1541 * 0.5;
        float _1642 = dot(vec3(_1639, _1640, _1641), vec3(_1639, _1640, _1641));
        float _1647 = (_1642 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1642);
        float _1655 = (dot(vec3(_816, _817, _818), vec3(_1647 * _1639, _1647 * _1640, _1647 * _1641)) + 1.0) * 0.5;
        float _4190 = isnan(0.0) ? _1655 : (isnan(_1655) ? 0.0 : max(_1655, 0.0));
        float _1664 = sqrt(((_1640 * _1640) + (_1639 * _1639)) + (_1641 * _1641)) / (_1554 + 9.9999997473787516355514526367188e-06);
        float _4201 = isnan(0.0) ? _1664 : (isnan(_1664) ? 0.0 : max(_1664, 0.0));
        float _1665 = isnan(1.0) ? _4201 : (isnan(_4201) ? 1.0 : min(_4201, 1.0));
        float _1666 = _1665 * 2.0;
        float _1670 = (1.0 - _1665) / (_1665 + 1.0);
        float _4212 = isnan(0.0) ? _1670 : (isnan(_1670) ? 0.0 : max(_1670, 0.0));
        float _1671 = isnan(1.0) ? _4212 : (isnan(_4212) ? 1.0 : min(_4212, 1.0));
        float _1680 = ((((1.0 - _1671) * (_1666 + 2.0)) * exp2(log2(isnan(1.0) ? _4190 : (isnan(_4190) ? 1.0 : min(_4190, 1.0))) * (_1666 + 1.0))) + _1671) * _1554;
        _1688 = _1521;
        _1689 = _1520;
        _1690 = _1519;
        _1691 = _1531;
        _1692 = _1530;
        _1693 = _1529;
        _1694 = _1541;
        _1695 = _1540;
        _1696 = _1539;
        _1697 = _1554;
        _1698 = _1553;
        _1699 = _1552;
        _1700 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1596 : (isnan(_1596) ? 0.0 : max(_1596, 0.0)));
        _1701 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1638 : (isnan(_1638) ? 0.0 : max(_1638, 0.0)));
        _1702 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1680 : (isnan(_1680) ? 0.0 : max(_1680, 0.0)));
    }
    else
    {
        _1688 = _1378;
        _1689 = _1378;
        _1690 = _1378;
        _1691 = _1378;
        _1692 = _1378;
        _1693 = _1378;
        _1694 = _1378;
        _1695 = _1378;
        _1696 = _1378;
        _1697 = _1378;
        _1698 = _1378;
        _1699 = _1378;
        _1700 = 0.0;
        _1701 = 0.0;
        _1702 = 0.0;
    }
    float _1712 = (cbModelParam._m0[1u].x * (_1700 - _1390)) + _1390;
    float _1713 = (cbModelParam._m0[1u].x * (_1701 - _1391)) + _1391;
    float _1714 = (cbModelParam._m0[1u].x * (_1702 - _1392)) + _1392;
    float _1735 = fma(_1714, cbSceneParam._m0[89u].z, fma(_1713, cbSceneParam._m0[89u].y, _1712 * cbSceneParam._m0[89u].x));
    float _1738 = fma(_1714, cbSceneParam._m0[90u].z, fma(_1713, cbSceneParam._m0[90u].y, _1712 * cbSceneParam._m0[90u].x));
    float _1741 = fma(_1714, cbSceneParam._m0[91u].z, fma(_1713, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1712));
    float _1756 = _987 * 0.5;
    float _1757 = _988 * 0.5;
    float _1758 = _989 * 0.5;
    float _1759 = dot(vec4(_1756, _1757, _1758, 1.0), vec4(_1690, _1693, _1696, _1699));
    float _1762 = dot(vec4(_1756, _1757, _1758, 1.0), vec4(_1689, _1692, _1695, _1698));
    float _1765 = dot(vec4(_1756, _1757, _1758, 1.0), vec4(_1688, _1691, _1694, _1697));
    float _1799;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1772 = dot(vec4(_1756, _1757, _1758, 1.0), vec4(_1377, _1381, _1384, _1387));
        float _1776 = dot(vec4(_1756, _1757, _1758, 1.0), vec4(_1379, _1382, _1385, _1388));
        float _1780 = dot(vec4(_1756, _1757, _1758, 1.0), vec4(_1380, _1383, _1386, _1389));
        float _1787 = dot(vec4(cbModelParam._m0[39u]), vec4(_1756, _1757, _1758, 1.0));
        _1799 = dot(vec3(isnan(0.0) ? _1780 : (isnan(_1780) ? 0.0 : max(_1780, 0.0)), isnan(0.0) ? _1776 : (isnan(_1776) ? 0.0 : max(_1776, 0.0)), isnan(0.0) ? _1772 : (isnan(_1772) ? 0.0 : max(_1772, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1787) ? 0.0 : (isnan(0.0) ? _1787 : max(0.0, _1787))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1799 = 1.0;
    }
    float _1810;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1801 = dot(vec4(cbModelParam._m0[40u]), vec4(_1756, _1757, _1758, 1.0));
        _1810 = dot(vec3(isnan(0.0) ? _1759 : (isnan(_1759) ? 0.0 : max(_1759, 0.0)), isnan(0.0) ? _1762 : (isnan(_1762) ? 0.0 : max(_1762, 0.0)), isnan(0.0) ? _1765 : (isnan(_1765) ? 0.0 : max(_1765, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1801) ? 0.0 : (isnan(0.0) ? _1801 : max(0.0, _1801))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1810 = 1.0;
    }
    float _1814 = (_1810 * cbModelParam._m0[1u].x) + (_1799 * (1.0 - cbModelParam._m0[1u].x));
    float _1824 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _819);
    float _1825 = isnan(_1824) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1824 : min(cbModelParam._m0[25u].z, _1824));
    float _1905;
    float _1907;
    float _1909;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1872 = fma(_1048, cbModelParam._m0[13u].z, fma(_1044, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1040)) + cbModelParam._m0[13u].w;
        float _1876 = fma(_1048, cbModelParam._m0[14u].z, fma(_1044, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1040)) + cbModelParam._m0[14u].w;
        float _1880 = fma(_1048, cbModelParam._m0[15u].z, fma(_1044, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1040)) + cbModelParam._m0[15u].w;
        float _1883 = fma(_989, cbModelParam._m0[13u].z, fma(_988, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _987));
        float _1886 = fma(_989, cbModelParam._m0[14u].z, fma(_988, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _987));
        float _1889 = fma(_989, cbModelParam._m0[15u].z, fma(_988, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _987));
        float _1917;
        if (_1883 > 0.0)
        {
            _1917 = abs((1.0 - _1872) / _1883);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1883 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1872 + 1.0) / _1883);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1917 = frontier_phi_17_15_ladder;
        }
        float _2138;
        if (_1886 > 0.0)
        {
            _2138 = abs((1.0 - _1876) / _1886);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1886 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1876 + 1.0) / _1886);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2138 = frontier_phi_26_22_ladder;
        }
        float _2384;
        if (_1889 > 0.0)
        {
            _2384 = abs((1.0 - _1880) / _1889);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1889 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1880 + 1.0) / _1889);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2384 = frontier_phi_38_33_ladder;
        }
        float _2386 = isnan(_2138) ? _1917 : (isnan(_1917) ? _2138 : min(_1917, _2138));
        float _2387 = isnan(_2384) ? _2386 : (isnan(_2386) ? _2384 : min(_2386, _2384));
        float _2391 = (_2387 * _1883) + _1872;
        float _2392 = (_2387 * _1886) + _1876;
        float _2393 = (_2387 * _1889) + _1880;
        float _2394 = _2387 * 9.9999997473787516355514526367188e-05;
        float _2396 = (-1.0) - _2394;
        float _2398 = _2394 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2393 > _2398) || ((_2393 < _2396) || ((_2392 > _2398) || ((_2392 < _2396) || ((_2391 < _2396) || (_2391 > _2398))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2517 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2393, cbModelParam._m0[9u].z, fma(_2392, cbModelParam._m0[9u].y, _2391 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2393, cbModelParam._m0[10u].z, fma(_2392, cbModelParam._m0[10u].y, _2391 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2393, cbModelParam._m0[11u].z, fma(_2392, cbModelParam._m0[11u].y, _2391 * cbModelParam._m0[11u].x))), _1825);
            frontier_phi_16_38_ladder = _2517.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2517.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2517.x * cbModelParam._m0[1u].y;
        }
        _1905 = frontier_phi_16_38_ladder_2;
        _1907 = frontier_phi_16_38_ladder_1;
        _1909 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1893 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_987, _988, _989), _1825);
        _1905 = _1893.x * cbModelParam._m0[1u].y;
        _1907 = _1893.y * cbModelParam._m0[1u].y;
        _1909 = _1893.z * cbModelParam._m0[1u].y;
    }
    float _1913 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _819);
    float _1914 = isnan(_1913) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1913 : min(cbModelParam._m0[25u].w, _1913));
    float _2003;
    float _2005;
    float _2007;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1967 = fma(_1048, cbModelParam._m0[21u].z, fma(_1044, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1040)) + cbModelParam._m0[21u].w;
        float _1971 = fma(_1048, cbModelParam._m0[22u].z, fma(_1044, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1040)) + cbModelParam._m0[22u].w;
        float _1975 = fma(_1048, cbModelParam._m0[23u].z, fma(_1044, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1040)) + cbModelParam._m0[23u].w;
        float _1978 = fma(_989, cbModelParam._m0[21u].z, fma(_988, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _987));
        float _1981 = fma(_989, cbModelParam._m0[22u].z, fma(_988, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _987));
        float _1984 = fma(_989, cbModelParam._m0[23u].z, fma(_988, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _987));
        float _2143;
        if (_1978 > 0.0)
        {
            _2143 = abs((1.0 - _1967) / _1978);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1978 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1967 + 1.0) / _1978);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2143 = frontier_phi_28_24_ladder;
        }
        float _2411;
        if (_1981 > 0.0)
        {
            _2411 = abs((1.0 - _1971) / _1981);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1981 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1971 + 1.0) / _1981);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2411 = frontier_phi_40_35_ladder;
        }
        float _2616;
        if (_1984 > 0.0)
        {
            _2616 = abs((1.0 - _1975) / _1984);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1984 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1975 + 1.0) / _1984);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2616 = frontier_phi_49_46_ladder;
        }
        float _2618 = isnan(_2411) ? _2143 : (isnan(_2143) ? _2411 : min(_2143, _2411));
        float _2619 = isnan(_2616) ? _2618 : (isnan(_2618) ? _2616 : min(_2618, _2616));
        float _2623 = (_2619 * _1978) + _1967;
        float _2624 = (_2619 * _1981) + _1971;
        float _2625 = (_2619 * _1984) + _1975;
        float _2626 = _2619 * 9.9999997473787516355514526367188e-05;
        float _2627 = (-1.0) - _2626;
        float _2629 = _2626 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2625 > _2629) || ((_2625 < _2627) || ((_2624 > _2629) || ((_2624 < _2627) || ((_2623 < _2627) || (_2623 > _2629))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2824 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2625, cbModelParam._m0[17u].z, fma(_2624, cbModelParam._m0[17u].y, _2623 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2625, cbModelParam._m0[18u].z, fma(_2624, cbModelParam._m0[18u].y, _2623 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2625, cbModelParam._m0[19u].z, fma(_2624, cbModelParam._m0[19u].y, _2623 * cbModelParam._m0[19u].x))), _1914);
            frontier_phi_25_49_ladder = _2824.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2824.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2824.x * cbModelParam._m0[1u].z;
        }
        _2003 = frontier_phi_25_49_ladder_2;
        _2005 = frontier_phi_25_49_ladder_1;
        _2007 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1987 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_987, _988, _989), _1914);
        _2003 = _1987.x * cbModelParam._m0[1u].z;
        _2005 = _1987.y * cbModelParam._m0[1u].z;
        _2007 = _1987.z * cbModelParam._m0[1u].z;
    }
    float _2019 = ((((1.0 - _1008) * ((_995 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_1008 * _995)) * _979;
    float _2020 = _2019 * ((cbModelParam._m0[1u].w * (_2003 - _1905)) + _1905);
    float _2021 = _2019 * ((cbModelParam._m0[1u].w * (_2005 - _1907)) + _1907);
    float _2022 = _2019 * ((cbModelParam._m0[1u].w * (_2007 - _1909)) + _1909);
    float _2025 = fma(_2022, cbSceneParam._m0[89u].z, fma(_2021, cbSceneParam._m0[89u].y, _2020 * cbSceneParam._m0[89u].x));
    float _2028 = fma(_2022, cbSceneParam._m0[90u].z, fma(_2021, cbSceneParam._m0[90u].y, _2020 * cbSceneParam._m0[90u].x));
    float _2031 = fma(_2022, cbSceneParam._m0[91u].z, fma(_2021, cbSceneParam._m0[91u].y, _2020 * cbSceneParam._m0[91u].x));
    vec4 _2039 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_916, _917));
    float _2041 = _2039.w;
    float _2053 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _2041);
    float _2054 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _2041);
    float _2055 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _2041);
    uvec4 _2059 = floatBitsToUint(cbInstanceData._m0[_276 + 5u]);
    uint _2061 = _2059.x * 14u;
    uint _2062 = _2061 + 13u;
    float _2069 = _979 + (-1.0);
    float _2074 = (cbLight._m0[_2062].x * _2069) + 1.0;
    float _2075 = (cbLight._m0[_2062].y * _2069) + 1.0;
    float _2076 = (cbLight._m0[_2062].z * _2069) + 1.0;
    float _2077 = (cbLight._m0[_2062].w * _2069) + 1.0;
    uint _2078 = _2061 + 5u;
    float _2084 = isnan(1.0) ? _2075 : (isnan(_2075) ? 1.0 : min(_2075, 1.0));
    uint _2088 = _2061 + 4u;
    float _2097 = isnan(1.0) ? _2074 : (isnan(_2074) ? 1.0 : min(_2074, 1.0));
    uint _2101 = _2061 | 1u;
    float _2112 = dot(vec3(cbLight._m0[_2061].xyz), vec3(_816, _817, _818));
    float _2115 = dot(vec3(cbLight._m0[_2101].xyz), vec3(_816, _817, _818));
    float _4348 = isnan(0.0) ? _2112 : (isnan(_2112) ? 0.0 : max(_2112, 0.0));
    float _4359 = isnan(0.0) ? _2115 : (isnan(_2115) ? 0.0 : max(_2115, 0.0));
    float _2120 = (isnan(1.0) ? _4348 : (isnan(_4348) ? 1.0 : min(_4348, 1.0))) * 0.3183098733425140380859375;
    float _2122 = (isnan(1.0) ? _4359 : (isnan(_4359) ? 1.0 : min(_4359, 1.0))) * 0.3183098733425140380859375;
    float _2129 = ((cbLight._m0[_2078].x * _2084) * _2122) + (((cbLight._m0[_2088].x * _2053) * _2097) * _2120);
    float _2130 = ((_2084 * cbLight._m0[_2078].y) * _2122) + (((cbLight._m0[_2088].y * _2054) * _2097) * _2120);
    float _2131 = ((_2084 * cbLight._m0[_2078].z) * _2122) + (((cbLight._m0[_2088].z * _2055) * _2097) * _2120);
    uvec4 _2135 = floatBitsToUint(cbLight._m0[_2061 + 12u]);
    bool _2137 = _2135.x == 0u;
    float _2148;
    float _2150;
    float _2152;
    if (_2137)
    {
        _2148 = _2129;
        _2150 = _2130;
        _2152 = _2131;
    }
    else
    {
        uint _2156 = _2061 + 6u;
        float _2172 = (dot(vec3(cbLight._m0[_2061 + 2u].xyz), vec3(_816, _817, _818)) * 0.5) + 0.5;
        float _2173 = _2172 * _2172;
        float _4370 = isnan(0.0) ? _2173 : (isnan(_2173) ? 0.0 : max(_2173, 0.0));
        float _2174 = isnan(1.0) ? _4370 : (isnan(_4370) ? 1.0 : min(_4370, 1.0));
        float _2175 = isnan(1.0) ? _2076 : (isnan(_2076) ? 1.0 : min(_2076, 1.0));
        _2148 = (((cbLight._m0[_2156].x * 0.3183098733425140380859375) * _2174) * _2175) + _2129;
        _2150 = (((cbLight._m0[_2156].y * 0.3183098733425140380859375) * _2174) * _2175) + _2130;
        _2152 = (((cbLight._m0[_2156].z * 0.3183098733425140380859375) * _2174) * _2175) + _2131;
    }
    bool _2155 = _2135.y == 0u;
    float _2193;
    float _2195;
    float _2197;
    if (_2155)
    {
        _2193 = _2148;
        _2195 = _2150;
        _2197 = _2152;
    }
    else
    {
        uint _2355 = _2061 + 7u;
        float _2371 = (dot(vec3(cbLight._m0[_2061 + 3u].xyz), vec3(_816, _817, _818)) * 0.5) + 0.5;
        float _2372 = _2371 * _2371;
        float _4386 = isnan(0.0) ? _2372 : (isnan(_2372) ? 0.0 : max(_2372, 0.0));
        float _2373 = isnan(1.0) ? _4386 : (isnan(_4386) ? 1.0 : min(_4386, 1.0));
        float _2374 = isnan(1.0) ? _2077 : (isnan(_2077) ? 1.0 : min(_2077, 1.0));
        _2193 = (((cbLight._m0[_2355].x * 0.3183098733425140380859375) * _2373) * _2374) + _2148;
        _2195 = (((cbLight._m0[_2355].y * 0.3183098733425140380859375) * _2373) * _2374) + _2150;
        _2197 = (((cbLight._m0[_2355].z * 0.3183098733425140380859375) * _2373) * _2374) + _2152;
    }
    uint _2200 = _2061 + 8u;
    float _2213 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2061].w)) * _819) * 0.949999988079071044921875);
    float _2214 = _2213 * _2213;
    float _2215 = cbLight._m0[_2061].x + _896;
    float _2216 = cbLight._m0[_2061].y + _897;
    float _2217 = cbLight._m0[_2061].z + _898;
    float _2221 = inversesqrt(dot(vec3(_2215, _2216, _2217), vec3(_2215, _2216, _2217)));
    float _2222 = _2221 * _2215;
    float _2223 = _2221 * _2216;
    float _2224 = _2221 * _2217;
    float _2225 = dot(vec3(_816, _817, _818), vec3(cbLight._m0[_2061].xyz));
    float _4402 = isnan(0.0) ? _2225 : (isnan(_2225) ? 0.0 : max(_2225, 0.0));
    float _2228 = isnan(1.0) ? _4402 : (isnan(_4402) ? 1.0 : min(_4402, 1.0));
    float _4413 = isnan(0.0) ? _980 : (isnan(_980) ? 0.0 : max(_980, 0.0));
    float _2229 = isnan(1.0) ? _4413 : (isnan(_4413) ? 1.0 : min(_4413, 1.0));
    float _2230 = dot(vec3(_816, _817, _818), vec3(_2222, _2223, _2224));
    float _4424 = isnan(0.0) ? _2230 : (isnan(_2230) ? 0.0 : max(_2230, 0.0));
    float _2233 = isnan(1.0) ? _4424 : (isnan(_4424) ? 1.0 : min(_4424, 1.0));
    float _2234 = dot(vec3(cbLight._m0[_2061].xyz), vec3(_2222, _2223, _2224));
    float _4435 = isnan(0.0) ? _2234 : (isnan(_2234) ? 0.0 : max(_2234, 0.0));
    float _2238 = _2214 * _2214;
    float _2242 = ((_2233 * _2233) * (_2238 + (-1.0))) + 1.0;
    float _2253 = (exp2(log2(1.0 - (isnan(1.0) ? _4435 : (isnan(_4435) ? 1.0 : min(_4435, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2254 = 1.0 - _2214;
    float _2265 = (0.5 / (((_2229 * ((_2228 * _2254) + _2214)) + 9.9999999392252902907785028219223e-09) + (((_2229 * _2254) + _2214) * _2228))) * _2228;
    float _4446 = isnan(0.0) ? _2265 : (isnan(_2265) ? 0.0 : max(_2265, 0.0));
    float _2267 = (isnan(1.0) ? _4446 : (isnan(_4446) ? 1.0 : min(_4446, 1.0))) * (_2238 / ((_2242 * _2242) * 3.141590118408203125));
    uint _2281 = _2061 + 9u;
    float _2292 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2101].w)) * _819) * 0.949999988079071044921875);
    float _2293 = _2292 * _2292;
    float _2294 = cbLight._m0[_2101].x + _896;
    float _2295 = cbLight._m0[_2101].y + _897;
    float _2296 = cbLight._m0[_2101].z + _898;
    float _2300 = inversesqrt(dot(vec3(_2294, _2295, _2296), vec3(_2294, _2295, _2296)));
    float _2301 = _2300 * _2294;
    float _2302 = _2300 * _2295;
    float _2303 = _2300 * _2296;
    float _2304 = dot(vec3(_816, _817, _818), vec3(cbLight._m0[_2101].xyz));
    float _4457 = isnan(0.0) ? _2304 : (isnan(_2304) ? 0.0 : max(_2304, 0.0));
    float _2307 = isnan(1.0) ? _4457 : (isnan(_4457) ? 1.0 : min(_4457, 1.0));
    float _2308 = dot(vec3(_816, _817, _818), vec3(_2301, _2302, _2303));
    float _4468 = isnan(0.0) ? _2308 : (isnan(_2308) ? 0.0 : max(_2308, 0.0));
    float _2311 = isnan(1.0) ? _4468 : (isnan(_4468) ? 1.0 : min(_4468, 1.0));
    float _2312 = dot(vec3(cbLight._m0[_2101].xyz), vec3(_2301, _2302, _2303));
    float _4479 = isnan(0.0) ? _2312 : (isnan(_2312) ? 0.0 : max(_2312, 0.0));
    float _2316 = _2293 * _2293;
    float _2320 = ((_2311 * _2311) * (_2316 + (-1.0))) + 1.0;
    float _2329 = (exp2(log2(1.0 - (isnan(1.0) ? _4479 : (isnan(_4479) ? 1.0 : min(_4479, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2330 = 1.0 - _2293;
    float _2340 = (0.5 / (((_2229 * ((_2307 * _2330) + _2293)) + 9.9999999392252902907785028219223e-09) + (((_2229 * _2330) + _2293) * _2307))) * _2307;
    float _4490 = isnan(0.0) ? _2340 : (isnan(_2340) ? 0.0 : max(_2340, 0.0));
    float _2342 = (isnan(1.0) ? _4490 : (isnan(_4490) ? 1.0 : min(_4490, 1.0))) * (_2316 / ((_2320 * _2320) * 3.141590118408203125));
    float _2352 = (((_2329 * cbLight._m0[_2281].x) * _2342) * _2084) + ((((cbLight._m0[_2200].x * _2053) * _2253) * _2267) * _2097);
    float _2353 = (((_2329 * cbLight._m0[_2281].y) * _2342) * _2084) + ((((cbLight._m0[_2200].y * _2054) * _2253) * _2267) * _2097);
    float _2354 = (((_2329 * cbLight._m0[_2281].z) * _2342) * _2084) + ((((cbLight._m0[_2200].z * _2055) * _2253) * _2267) * _2097);
    float _2416;
    float _2418;
    float _2420;
    if (_2137)
    {
        _2416 = _2352;
        _2418 = _2353;
        _2420 = _2354;
    }
    else
    {
        uint _2422 = _2061 + 2u;
        uint _2426 = _2061 + 10u;
        float _2440 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2422].w)) * _819) * 0.949999988079071044921875);
        float _2441 = _2440 * _2440;
        float _2442 = cbLight._m0[_2422].x + _896;
        float _2443 = cbLight._m0[_2422].y + _897;
        float _2444 = cbLight._m0[_2422].z + _898;
        float _2448 = inversesqrt(dot(vec3(_2442, _2443, _2444), vec3(_2442, _2443, _2444)));
        float _2449 = _2448 * _2442;
        float _2450 = _2448 * _2443;
        float _2451 = _2448 * _2444;
        float _2452 = dot(vec3(_816, _817, _818), vec3(cbLight._m0[_2422].xyz));
        float _4501 = isnan(0.0) ? _2452 : (isnan(_2452) ? 0.0 : max(_2452, 0.0));
        float _2455 = isnan(1.0) ? _4501 : (isnan(_4501) ? 1.0 : min(_4501, 1.0));
        float _2456 = dot(vec3(_816, _817, _818), vec3(_2449, _2450, _2451));
        float _4512 = isnan(0.0) ? _2456 : (isnan(_2456) ? 0.0 : max(_2456, 0.0));
        float _2459 = isnan(1.0) ? _4512 : (isnan(_4512) ? 1.0 : min(_4512, 1.0));
        float _2460 = dot(vec3(cbLight._m0[_2422].xyz), vec3(_2449, _2450, _2451));
        float _4523 = isnan(0.0) ? _2460 : (isnan(_2460) ? 0.0 : max(_2460, 0.0));
        float _2464 = _2441 * _2441;
        float _2468 = ((_2459 * _2459) * (_2464 + (-1.0))) + 1.0;
        float _2477 = (exp2(log2(1.0 - (isnan(1.0) ? _4523 : (isnan(_4523) ? 1.0 : min(_4523, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2478 = 1.0 - _2441;
        float _2488 = (0.5 / (((_2229 * ((_2455 * _2478) + _2441)) + 9.9999999392252902907785028219223e-09) + (((_2229 * _2478) + _2441) * _2455))) * _2455;
        float _4534 = isnan(0.0) ? _2488 : (isnan(_2488) ? 0.0 : max(_2488, 0.0));
        float _2490 = (isnan(1.0) ? _4534 : (isnan(_4534) ? 1.0 : min(_4534, 1.0))) * (_2464 / ((_2468 * _2468) * 3.141590118408203125));
        float _2491 = isnan(1.0) ? _2076 : (isnan(_2076) ? 1.0 : min(_2076, 1.0));
        _2416 = (((_2477 * cbLight._m0[_2426].x) * _2490) * _2491) + _2352;
        _2418 = (((_2477 * cbLight._m0[_2426].y) * _2490) * _2491) + _2353;
        _2420 = (((_2477 * cbLight._m0[_2426].z) * _2490) * _2491) + _2354;
    }
    float _2526;
    float _2528;
    float _2530;
    if (_2155)
    {
        _2526 = _2416;
        _2528 = _2418;
        _2530 = _2420;
    }
    else
    {
        uint _2537 = _2061 + 3u;
        uint _2541 = _2061 + 11u;
        float _2555 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2537].w)) * _819) * 0.949999988079071044921875);
        float _2556 = _2555 * _2555;
        float _2557 = cbLight._m0[_2537].x + _896;
        float _2558 = cbLight._m0[_2537].y + _897;
        float _2559 = cbLight._m0[_2537].z + _898;
        float _2563 = inversesqrt(dot(vec3(_2557, _2558, _2559), vec3(_2557, _2558, _2559)));
        float _2564 = _2563 * _2557;
        float _2565 = _2563 * _2558;
        float _2566 = _2563 * _2559;
        float _2567 = dot(vec3(_816, _817, _818), vec3(cbLight._m0[_2537].xyz));
        float _4550 = isnan(0.0) ? _2567 : (isnan(_2567) ? 0.0 : max(_2567, 0.0));
        float _2570 = isnan(1.0) ? _4550 : (isnan(_4550) ? 1.0 : min(_4550, 1.0));
        float _2571 = dot(vec3(_816, _817, _818), vec3(_2564, _2565, _2566));
        float _4561 = isnan(0.0) ? _2571 : (isnan(_2571) ? 0.0 : max(_2571, 0.0));
        float _2574 = isnan(1.0) ? _4561 : (isnan(_4561) ? 1.0 : min(_4561, 1.0));
        float _2575 = dot(vec3(cbLight._m0[_2537].xyz), vec3(_2564, _2565, _2566));
        float _4572 = isnan(0.0) ? _2575 : (isnan(_2575) ? 0.0 : max(_2575, 0.0));
        float _2579 = _2556 * _2556;
        float _2583 = ((_2574 * _2574) * (_2579 + (-1.0))) + 1.0;
        float _2592 = (exp2(log2(1.0 - (isnan(1.0) ? _4572 : (isnan(_4572) ? 1.0 : min(_4572, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2593 = 1.0 - _2556;
        float _2603 = (0.5 / (((_2229 * ((_2570 * _2593) + _2556)) + 9.9999999392252902907785028219223e-09) + (((_2229 * _2593) + _2556) * _2570))) * _2570;
        float _4583 = isnan(0.0) ? _2603 : (isnan(_2603) ? 0.0 : max(_2603, 0.0));
        float _2605 = (isnan(1.0) ? _4583 : (isnan(_4583) ? 1.0 : min(_4583, 1.0))) * (_2579 / ((_2583 * _2583) * 3.141590118408203125));
        float _2606 = isnan(1.0) ? _2077 : (isnan(_2077) ? 1.0 : min(_2077, 1.0));
        _2526 = (((_2592 * cbLight._m0[_2541].x) * _2605) * _2606) + _2416;
        _2528 = (((_2592 * cbLight._m0[_2541].y) * _2605) * _2606) + _2418;
        _2530 = (((_2592 * cbLight._m0[_2541].z) * _2605) * _2606) + _2420;
    }
    float _2741;
    float _2743;
    float _2745;
    float _2747;
    float _2749;
    float _2751;
    if (_2059.y == 0u)
    {
        float _2681 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2682 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2681;
        float _2683 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2681;
        float _2684 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2681;
        uvec4 _2696 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2697 = _2696.x;
        uint _2708 = uint((float(_2696.y) * floor(float(uint(cbSceneParam._m0[85u].y * _917) / _2697))) + floor(float(uint(cbSceneParam._m0[85u].x * _916) / _2697)));
        float _2718 = (log2(_2684 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2719 = isnan(0.0) ? _2718 : (isnan(_2718) ? 0.0 : max(_2718, 0.0));
        uint _2722 = uint(isnan(14.0) ? _2719 : (isnan(_2719) ? 14.0 : min(_2719, 14.0)));
        uvec4 _2727 = texelFetch(g_lightClusterGridBuffer, int(((_2722 << 2u) + (_2708 << 6u)) >> 2u));
        uint _2728 = _2727.x;
        uint _2729 = _2696.z;
        float _2829;
        float _2831;
        float _2833;
        float _2835;
        float _2837;
        float _2839;
        if (((((1u << ((_2729 >> 4u) & 15u)) + 4294967295u) & _2728) == 0u) || ((_2729 & 240u) == 0u))
        {
            _2829 = 0.0;
            _2831 = 0.0;
            _2833 = 0.0;
            _2835 = 0.0;
            _2837 = 0.0;
            _2839 = 0.0;
        }
        else
        {
            float _2830;
            float _2832;
            float _2834;
            float _2836;
            float _2838;
            float _2840;
            float _2982 = 0.0;
            float _2983 = 0.0;
            float _2984 = 0.0;
            float _2985 = 0.0;
            float _2986 = 0.0;
            float _2987 = 0.0;
            uint _2988 = 0u;
            uint _2997;
            bool _2998;
            for (;;)
            {
                _2997 = texelFetch(g_lightClassification, int((((_2722 << 5u) + (_2708 << 9u)) + (_2988 << 2u)) >> 2u)).x;
                _2998 = _2997 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2998)
                {
                    frontier_phi_66_pred = _2982;
                    frontier_phi_66_pred_1 = _2987;
                    frontier_phi_66_pred_2 = _2986;
                    frontier_phi_66_pred_3 = _2985;
                    frontier_phi_66_pred_4 = _2984;
                    frontier_phi_66_pred_5 = _2983;
                }
                else
                {
                    float _3127;
                    float _3128;
                    float _3129;
                    float _3130;
                    float _3131;
                    float _3132;
                    uint _3133;
                    _3127 = _2982;
                    _3128 = _2983;
                    _3129 = _2984;
                    _3130 = _2985;
                    _3131 = _2986;
                    _3132 = _2987;
                    _3133 = _2997;
                    float _3054;
                    float _3055;
                    float _3056;
                    float _3057;
                    float _3058;
                    float _3059;
                    for (;;)
                    {
                        uint _3137 = uint(findLSB(_3133)) + (_2988 << 5u);
                        uint _3134 = (_3133 + 4294967295u) & _3133;
                        uint _3139 = _3137 * 48u;
                        vec4 _3153 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3139)).x, texelFetch(g_PointLightRenderingBuffer, int(_3139 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3139 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3139 + 3u)).x));
                        uint _3159 = (_3137 * 48u) + 4u;
                        vec4 _3172 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3159)).x, texelFetch(g_PointLightRenderingBuffer, int(_3159 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3159 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3159 + 3u)).x));
                        uint _3178 = (_3137 * 48u) + 8u;
                        vec3 _3189 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3178)).x, texelFetch(g_PointLightRenderingBuffer, int(_3178 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3178 + 2u)).x));
                        float _3193 = _3153.x - _2682;
                        float _3194 = _3153.y - _2683;
                        float _3195 = _3153.z - _2684;
                        float _3196 = dot(vec3(_3193, _3194, _3195), vec3(_3193, _3194, _3195));
                        float _3199 = inversesqrt(_3196);
                        float _3200 = _3199 * _3193;
                        float _3201 = _3199 * _3194;
                        float _3202 = _3199 * _3195;
                        float _3203 = dot(vec3(_935, _938, _941), vec3(_3200, _3201, _3202));
                        float _3208 = 1.0 - (_3196 * _3153.w);
                        float _4609 = isnan(0.0) ? _3208 : (isnan(_3208) ? 0.0 : max(_3208, 0.0));
                        float _3209 = isnan(1.0) ? _4609 : (isnan(_4609) ? 1.0 : min(_4609, 1.0));
                        float _3210 = sqrt(_3196) * _3172.w;
                        float _3213 = 1.39999997615814208984375 / (_3210 + 1.39999997615814208984375);
                        float _3214 = _3213 * _3213;
                        float _3217 = ((1.0 - _3214) * _3203) + _3214;
                        float _3220 = _3210 * _3210;
                        float _3224 = ((isnan(0.0) ? _3217 : (isnan(_3217) ? 0.0 : max(_3217, 0.0))) * _3209) / ((_3220 * 0.699999988079071044921875) + 1.0);
                        float _3228 = (-0.0) - _2682;
                        float _3229 = (-0.0) - _2683;
                        float _3230 = (-0.0) - _2684;
                        float _3234 = inversesqrt(dot(vec3(_3228, _3229, _3230), vec3(_3228, _3229, _3230)));
                        float _3235 = _3234 * _3228;
                        float _3236 = _3234 * _3229;
                        float _3237 = _3234 * _3230;
                        float _3245 = exp2(log2(1.0 / ((_3220 * 3.5) + 5.0)) * 0.25);
                        float _3246 = 1.0 - _995;
                        float _3253 = sqrt(1.0 - ((1.0 - (_3246 * _3246)) * (1.0 - (_3245 * _3245))));
                        float _3254 = _3253 * _3253;
                        float _3255 = _3254 * _3254;
                        float _3256 = _3235 + _3200;
                        float _3257 = _3236 + _3201;
                        float _3258 = _3237 + _3202;
                        float _3262 = inversesqrt(dot(vec3(_3256, _3257, _3258), vec3(_3256, _3257, _3258)));
                        float _3266 = dot(vec3(_935, _938, _941), vec3(_3235, _3236, _3237));
                        float _4625 = isnan(0.0) ? _3266 : (isnan(_3266) ? 0.0 : max(_3266, 0.0));
                        float _3269 = isnan(1.0) ? _4625 : (isnan(_4625) ? 1.0 : min(_4625, 1.0));
                        float _3270 = dot(vec3(_935, _938, _941), vec3(_3262 * _3256, _3262 * _3257, _3262 * _3258));
                        float _4636 = isnan(0.0) ? _3270 : (isnan(_3270) ? 0.0 : max(_3270, 0.0));
                        float _3273 = isnan(1.0) ? _4636 : (isnan(_4636) ? 1.0 : min(_4636, 1.0));
                        float _3277 = ((_3273 * _3273) * (_3255 + (-1.0))) + 1.0;
                        float _3278 = _3213 * _3254;
                        float _3279 = _3278 * _3278;
                        float _3282 = ((1.0 - _3279) * _3203) + _3279;
                        float _4647 = isnan(0.0) ? _3282 : (isnan(_3282) ? 0.0 : max(_3282, 0.0));
                        float _3283 = isnan(1.0) ? _4647 : (isnan(_4647) ? 1.0 : min(_4647, 1.0));
                        float _3284 = 1.0 - _3254;
                        float _3294 = (0.5 / (((_3283 * ((_3269 * _3284) + _3254)) + 9.9999999392252902907785028219223e-09) + (((_3283 * _3284) + _3254) * _3269))) * _3283;
                        float _4658 = isnan(0.0) ? _3294 : (isnan(_3294) ? 0.0 : max(_3294, 0.0));
                        float _3305 = (((_3255 * 3.1415927410125732421875) * (isnan(1.0) ? _4658 : (isnan(_4658) ? 1.0 : min(_4658, 1.0)))) / ((_3277 * _3277) * ((_3220 * 2.1991131305694580078125) + 3.141590118408203125))) * _3209;
                        _3057 = (_3224 * _3172.x) + _3130;
                        _3058 = (_3224 * _3172.y) + _3131;
                        _3059 = (_3224 * _3172.z) + _3132;
                        _3054 = (_3305 * _3189.x) + _3127;
                        _3055 = (_3305 * _3189.y) + _3128;
                        _3056 = (_3305 * _3189.z) + _3129;
                        if (_3134 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3127 = _3054;
                            _3128 = _3055;
                            _3129 = _3056;
                            _3130 = _3057;
                            _3131 = _3058;
                            _3132 = _3059;
                            _3133 = _3134;
                        }
                    }
                    frontier_phi_66_pred = _3054;
                    frontier_phi_66_pred_1 = _3059;
                    frontier_phi_66_pred_2 = _3058;
                    frontier_phi_66_pred_3 = _3057;
                    frontier_phi_66_pred_4 = _3056;
                    frontier_phi_66_pred_5 = _3055;
                }
                _2830 = frontier_phi_66_pred;
                _2840 = frontier_phi_66_pred_1;
                _2838 = frontier_phi_66_pred_2;
                _2836 = frontier_phi_66_pred_3;
                _2834 = frontier_phi_66_pred_4;
                _2832 = frontier_phi_66_pred_5;
                uint _2989 = _2988 + 1u;
                if (_2989 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2982 = _2830;
                    _2983 = _2832;
                    _2984 = _2834;
                    _2985 = _2836;
                    _2986 = _2838;
                    _2987 = _2840;
                    _2988 = _2989;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2829 = _2830;
            _2831 = _2832;
            _2833 = _2834;
            _2835 = _2836;
            _2837 = _2838;
            _2839 = _2840;
        }
        uvec4 _2843 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2844 = _2843.z;
        uint _2846 = (_2844 >> 8u) & 15u;
        float _2950;
        float _2952;
        float _2954;
        float _2956;
        float _2958;
        float _2960;
        if (((4294967295u << _2846) & _2728) == 0u)
        {
            _2950 = _2829;
            _2952 = _2831;
            _2954 = _2833;
            _2956 = _2835;
            _2958 = _2837;
            _2960 = _2839;
        }
        else
        {
            float _2975 = inversesqrt(dot(vec3(_2682, _2683, _2684), vec3(_2682, _2683, _2684)));
            float _2976 = _2975 * _2682;
            float _2977 = _2975 * _2683;
            float _2978 = _2975 * _2684;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2846 < ((_2844 >> 12u) & 15u))
            {
                float _2951;
                float _2953;
                float _2955;
                float _2957;
                float _2959;
                float _2961;
                float _3110 = _2829;
                float _3111 = _2831;
                float _3112 = _2833;
                float _3113 = _2835;
                float _3114 = _2837;
                float _3115 = _2839;
                uint _3116 = _2846;
                uint _3125;
                bool _3126;
                for (;;)
                {
                    _3125 = texelFetch(g_lightClassification, int((((_2722 << 5u) + (_2708 << 9u)) + (_3116 << 2u)) >> 2u)).x;
                    _3126 = _3125 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_3126)
                    {
                        frontier_phi_77_pred = _3115;
                        frontier_phi_77_pred_1 = _3114;
                        frontier_phi_77_pred_2 = _3113;
                        frontier_phi_77_pred_3 = _3112;
                        frontier_phi_77_pred_4 = _3111;
                        frontier_phi_77_pred_5 = _3110;
                    }
                    else
                    {
                        float _3319;
                        float _3320;
                        float _3321;
                        float _3322;
                        float _3323;
                        float _3324;
                        float _3612;
                        float _3613;
                        float _3614;
                        float _3615;
                        float _3616;
                        float _3617;
                        float _3332 = _3110;
                        float _3333 = _3111;
                        float _3334 = _3112;
                        float _3335 = _3113;
                        float _3336 = _3114;
                        float _3337 = _3115;
                        uint _3338 = _3125;
                        uint _3339;
                        vec4 _3364;
                        float _3365;
                        vec4 _3380;
                        vec3 _3392;
                        vec4 _3407;
                        vec4 _3422;
                        float _3468;
                        bool _3469;
                        for (;;)
                        {
                            uint _3349 = ((_3116 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3338));
                            _3339 = (_3338 + 4294967295u) & _3338;
                            uint _3351 = _3349 * 40u;
                            _3364 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3351)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3351 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3351 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3351 + 3u)).x));
                            _3365 = _3364.w;
                            uint _3367 = (_3349 * 40u) + 4u;
                            _3380 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3367)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3367 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3367 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3367 + 3u)).x));
                            uint _3382 = (_3349 * 40u) + 8u;
                            _3392 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3382)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3382 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3382 + 2u)).x));
                            uint _3394 = (_3349 * 40u) + 16u;
                            _3407 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3394)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3394 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3394 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3394 + 3u)).x));
                            uint _3409 = (_3349 * 40u) + 20u;
                            _3422 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3409)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3409 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3409 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3409 + 3u)).x));
                            uint _3424 = (_3349 * 40u) + 24u;
                            vec4 _3437 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3424)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3424 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3424 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3424 + 3u)).x));
                            uint _3443 = (_3349 * 40u) + 28u;
                            vec4 _3456 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3443)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3443 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3443 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3443 + 3u)).x));
                            _3468 = fma(_2684, _3456.z, fma(_2683, _3456.y, _3456.x * _2682)) + _3456.w;
                            _3469 = !((fma(_2684, _3437.z, fma(_2683, _3437.y, _3437.x * _2682)) + _3437.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3469)
                            {
                                float _3496 = _3364.x - _2682;
                                float _3497 = _3364.y - _2683;
                                float _3498 = _3364.z - _2684;
                                float _3499 = dot(vec3(_3496, _3497, _3498), vec3(_3496, _3497, _3498));
                                float _3502 = inversesqrt(_3499);
                                float _3503 = _3502 * _3496;
                                float _3504 = _3502 * _3497;
                                float _3505 = _3502 * _3498;
                                float _3509 = 1.0 - (_3499 / (_3365 * _3365));
                                float _4669 = isnan(0.0) ? _3509 : (isnan(_3509) ? 0.0 : max(_3509, 0.0));
                                float _3510 = isnan(1.0) ? _4669 : (isnan(_4669) ? 1.0 : min(_4669, 1.0));
                                float _3514 = sqrt(_3499) * _3380.w;
                                float _3516 = 1.39999997615814208984375 / (_3514 + 1.39999997615814208984375);
                                float _3517 = _3516 * _3516;
                                float _3520 = ((1.0 - _3517) * dot(vec3(_3503, _3504, _3505), vec3(_935, _938, _941))) + _3517;
                                float _3523 = _3514 * _3514;
                                float _3527 = (fma(_2684, _3407.z, fma(_2683, _3407.y, _3407.x * _2682)) + _3407.w) / _3468;
                                float _3528 = (fma(_2684, _3422.z, fma(_2683, _3422.y, _3422.x * _2682)) + _3422.w) / _3468;
                                float _3532 = 1.0 - dot(vec2(_3527, _3528), vec2(_3527, _3528));
                                float _4685 = isnan(0.0) ? _3532 : (isnan(_3532) ? 0.0 : max(_3532, 0.0));
                                float _3533 = isnan(1.0) ? _4685 : (isnan(_4685) ? 1.0 : min(_4685, 1.0));
                                float _3534 = _3533 * (((isnan(0.0) ? _3520 : (isnan(_3520) ? 0.0 : max(_3520, 0.0))) * _3510) / ((_3523 * 0.699999988079071044921875) + 1.0));
                                float _3546 = exp2(log2(1.0 / ((_3523 * 3.5) + 5.0)) * 0.25);
                                float _3547 = 1.0 - _995;
                                float _3554 = sqrt(1.0 - ((1.0 - (_3547 * _3547)) * (1.0 - (_3546 * _3546))));
                                float _3555 = _3554 * _3554;
                                float _3556 = _3555 * _3555;
                                float _3557 = _3503 - _2976;
                                float _3558 = _3504 - _2977;
                                float _3559 = _3505 - _2978;
                                float _3563 = inversesqrt(dot(vec3(_3557, _3558, _3559), vec3(_3557, _3558, _3559)));
                                float _3567 = dot(vec3(_935, _938, _941), vec3((-0.0) - _2976, (-0.0) - _2977, (-0.0) - _2978));
                                float _4696 = isnan(0.0) ? _3567 : (isnan(_3567) ? 0.0 : max(_3567, 0.0));
                                float _3570 = isnan(1.0) ? _4696 : (isnan(_4696) ? 1.0 : min(_4696, 1.0));
                                float _3571 = dot(vec3(_935, _938, _941), vec3(_3563 * _3557, _3563 * _3558, _3563 * _3559));
                                float _4707 = isnan(0.0) ? _3571 : (isnan(_3571) ? 0.0 : max(_3571, 0.0));
                                float _3574 = isnan(1.0) ? _4707 : (isnan(_4707) ? 1.0 : min(_4707, 1.0));
                                float _3578 = ((_3574 * _3574) * (_3556 + (-1.0))) + 1.0;
                                float _3579 = _3516 * _3555;
                                float _3580 = _3579 * _3579;
                                float _3586 = ((1.0 - _3580) * dot(vec3(_935, _938, _941), vec3(_3503, _3504, _3505))) + _3580;
                                float _4718 = isnan(0.0) ? _3586 : (isnan(_3586) ? 0.0 : max(_3586, 0.0));
                                float _3587 = isnan(1.0) ? _4718 : (isnan(_4718) ? 1.0 : min(_4718, 1.0));
                                float _3588 = 1.0 - _3555;
                                float _3598 = (0.5 / (((_3587 * ((_3570 * _3588) + _3555)) + 9.9999999392252902907785028219223e-09) + (((_3587 * _3588) + _3555) * _3570))) * _3587;
                                float _4729 = isnan(0.0) ? _3598 : (isnan(_3598) ? 0.0 : max(_3598, 0.0));
                                float _3608 = (_3533 * _3510) * (((_3556 * 3.1415927410125732421875) * (isnan(1.0) ? _4729 : (isnan(_4729) ? 1.0 : min(_4729, 1.0)))) / ((_3578 * _3578) * ((_3523 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3534 * _3380.y;
                                frontier_phi_83_pred_1 = _3534 * _3380.x;
                                frontier_phi_83_pred_2 = _3608 * _3392.z;
                                frontier_phi_83_pred_3 = _3608 * _3392.y;
                                frontier_phi_83_pred_4 = _3608 * _3392.x;
                                frontier_phi_83_pred_5 = _3534 * _3380.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3616 = frontier_phi_83_pred;
                            _3615 = frontier_phi_83_pred_1;
                            _3614 = frontier_phi_83_pred_2;
                            _3613 = frontier_phi_83_pred_3;
                            _3612 = frontier_phi_83_pred_4;
                            _3617 = frontier_phi_83_pred_5;
                            _3322 = _3615 + _3335;
                            _3323 = _3616 + _3336;
                            _3324 = _3617 + _3337;
                            _3319 = _3612 + _3332;
                            _3320 = _3613 + _3333;
                            _3321 = _3614 + _3334;
                            if (_3339 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3332 = _3319;
                                _3333 = _3320;
                                _3334 = _3321;
                                _3335 = _3322;
                                _3336 = _3323;
                                _3337 = _3324;
                                _3338 = _3339;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3324;
                        frontier_phi_77_pred_1 = _3323;
                        frontier_phi_77_pred_2 = _3322;
                        frontier_phi_77_pred_3 = _3321;
                        frontier_phi_77_pred_4 = _3320;
                        frontier_phi_77_pred_5 = _3319;
                    }
                    _2961 = frontier_phi_77_pred;
                    _2959 = frontier_phi_77_pred_1;
                    _2957 = frontier_phi_77_pred_2;
                    _2955 = frontier_phi_77_pred_3;
                    _2953 = frontier_phi_77_pred_4;
                    _2951 = frontier_phi_77_pred_5;
                    uint _3117 = _3116 + 1u;
                    if (_3117 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3110 = _2951;
                        _3111 = _2953;
                        _3112 = _2955;
                        _3113 = _2957;
                        _3114 = _2959;
                        _3115 = _2961;
                        _3116 = _3117;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2955;
                frontier_phi_58_59_ladder_1 = _2961;
                frontier_phi_58_59_ladder_2 = _2959;
                frontier_phi_58_59_ladder_3 = _2957;
                frontier_phi_58_59_ladder_4 = _2953;
                frontier_phi_58_59_ladder_5 = _2951;
            }
            else
            {
                frontier_phi_58_59_ladder = _2833;
                frontier_phi_58_59_ladder_1 = _2839;
                frontier_phi_58_59_ladder_2 = _2837;
                frontier_phi_58_59_ladder_3 = _2835;
                frontier_phi_58_59_ladder_4 = _2831;
                frontier_phi_58_59_ladder_5 = _2829;
            }
            _2950 = frontier_phi_58_59_ladder_5;
            _2952 = frontier_phi_58_59_ladder_4;
            _2954 = frontier_phi_58_59_ladder;
            _2956 = frontier_phi_58_59_ladder_3;
            _2958 = frontier_phi_58_59_ladder_2;
            _2960 = frontier_phi_58_59_ladder_1;
        }
        float _2965 = isnan(1.0) ? _979 : (isnan(_979) ? 1.0 : min(_979, 1.0));
        _2741 = (_2965 * _2956) + _2193;
        _2743 = (_2965 * _2958) + _2195;
        _2745 = (_2965 * _2960) + _2197;
        _2747 = ((_2950 * 0.039999999105930328369140625) * _2965) + _2526;
        _2749 = ((_2952 * 0.039999999105930328369140625) * _2965) + _2528;
        _2751 = ((_2954 * 0.039999999105930328369140625) * _2965) + _2530;
    }
    else
    {
        _2741 = _2193;
        _2743 = _2195;
        _2745 = _2197;
        _2747 = _2526;
        _2749 = _2528;
        _2751 = _2530;
    }
    float _4745 = isnan(0.0) ? _964 : (isnan(_964) ? 0.0 : max(_964, 0.0));
    float _4756 = isnan(0.0) ? _965 : (isnan(_965) ? 0.0 : max(_965, 0.0));
    float _4767 = isnan(0.0) ? _966 : (isnan(_966) ? 0.0 : max(_966, 0.0));
    float _2768 = ((isnan(1.0) ? _4745 : (isnan(_4745) ? 1.0 : min(_4745, 1.0))) * (_2741 + ((isnan(0.0) ? _1735 : (isnan(_1735) ? 0.0 : max(_1735, 0.0))) * _979))) + ((_2747 + ((isnan(0.0) ? _2025 : (isnan(_2025) ? 0.0 : max(_2025, 0.0))) * _1814)) * cbPerFrame._m0[3u].x);
    float _2769 = ((isnan(1.0) ? _4756 : (isnan(_4756) ? 1.0 : min(_4756, 1.0))) * (_2743 + ((isnan(0.0) ? _1738 : (isnan(_1738) ? 0.0 : max(_1738, 0.0))) * _979))) + ((_2749 + ((isnan(0.0) ? _2028 : (isnan(_2028) ? 0.0 : max(_2028, 0.0))) * _1814)) * cbPerFrame._m0[3u].x);
    float _2770 = ((isnan(1.0) ? _4767 : (isnan(_4767) ? 1.0 : min(_4767, 1.0))) * (_2745 + ((isnan(0.0) ? _1741 : (isnan(_1741) ? 0.0 : max(_1741, 0.0))) * _979))) + ((_2751 + ((isnan(0.0) ? _2031 : (isnan(_2031) ? 0.0 : max(_2031, 0.0))) * _1814)) * cbPerFrame._m0[3u].x);
    uint _2771 = _276 + 6u;
    float _2779 = _916 / cbSceneParam._m0[86u].x;
    float _2780 = _917 / cbSceneParam._m0[86u].y;
    vec4 _2794 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2779, _2780, (log2((isnan(cbSceneParam._m0[77u].w) ? _837 : (isnan(_837) ? cbSceneParam._m0[77u].w : min(_837, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2796 = _2794.x;
    float _2797 = _2794.y;
    float _2798 = _2794.z;
    float _2799 = _2794.w;
    float _2892;
    float _2894;
    float _2896;
    float _2898;
    if (_837 > cbSceneParam._m0[78u].w)
    {
        float _2854 = isnan(_837) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _837 : min(cbSceneParam._m0[80u].w, _837));
        float _2855 = _2854 / _837;
        float _2866 = _2855 * _889;
        float _2867 = _890 * _2855;
        float _2868 = (-0.0) - _2867;
        float _2870 = _2855 * _891;
        float _2872 = (cbSceneParam._m0[77u].w * _2868) / _2854;
        float _2873 = _2872 + cbSceneParam._m0[79u].w;
        float _2874 = cbSceneParam._m0[79u].w - _2867;
        float _2880 = sqrt(((_2866 * _2866) + (_2867 * _2867)) + (_2870 * _2870));
        float _2883 = (1.0 - (cbSceneParam._m0[77u].w / _2854)) * _2880;
        float _2888 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2890 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3067;
        if (abs((_2868 - _2872) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3067 = ((((_2873 > 0.0) ? exp2(_2888 * _2873) : (2.0 - exp2(_2890 * _2873))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2883;
        }
        else
        {
            float _3011 = 1.0 / cbSceneParam._m0[80u].x;
            float _3012 = isnan(_2874) ? _2873 : (isnan(_2873) ? _2874 : max(_2873, _2874));
            float _3013 = isnan(_2874) ? _2873 : (isnan(_2873) ? _2874 : min(_2873, _2874));
            float _3022 = isnan(0.0) ? _3012 : (isnan(_3012) ? 0.0 : min(_3012, 0.0));
            float _3023 = isnan(0.0) ? _3013 : (isnan(_3013) ? 0.0 : min(_3013, 0.0));
            _3067 = ((abs(_2880 / _2868) * cbSceneParam._m0[80u].y) * ((((_3022 - _3023) * 2.0) - ((exp2(_2888 * (isnan(0.0) ? _3012 : (isnan(_3012) ? 0.0 : max(_3012, 0.0)))) - exp2(_2888 * (isnan(0.0) ? _3013 : (isnan(_3013) ? 0.0 : max(_3013, 0.0))))) * _3011)) - ((exp2(_2890 * _3022) - exp2(_2890 * _3023)) * _3011))) + (_2883 * cbSceneParam._m0[80u].z);
        }
        vec4 _3069 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2779, _2780, 1.0), 0.0);
        float _3078 = exp2((_3067 * (-1.44269502162933349609375)) * (1.0 - _3069.w));
        float _3079 = log2(_3078);
        float _3095 = log2(_2799);
        _2892 = (exp2(_3095 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3079 * cbSceneParam._m0[78u].x)) * _3069.x) / cbSceneParam._m0[78u].x)) + _2796;
        _2894 = (exp2(_3095 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3079 * cbSceneParam._m0[78u].y)) * _3069.y) / cbSceneParam._m0[78u].y)) + _2797;
        _2896 = (exp2(_3095 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3079 * cbSceneParam._m0[78u].z)) * _3069.z) / cbSceneParam._m0[78u].z)) + _2798;
        _2898 = _3078 * _2799;
    }
    else
    {
        _2892 = _2796;
        _2894 = _2797;
        _2896 = _2798;
        _2898 = _2799;
    }
    bool _3105;
    vec4 _2908;
    vec4 _2930;
    float _2932;
    float _2936;
    float _2937;
    float _2938;
    float _2939;
    bool _2949;
    for (;;)
    {
        _2908 = cbMatDynParam._m0[0u];
        float _2910 = roundEven(_2908.y);
        bool _2911 = _2910 == 3.0;
        float _2912 = log2(_2898);
        float _2919 = exp2(_2912 * cbSceneParam._m0[78u].x) * _2768;
        float _2920 = exp2(_2912 * cbSceneParam._m0[78u].y) * _2769;
        float _2921 = exp2(_2912 * cbSceneParam._m0[78u].z) * _2770;
        float _2928 = _905 + (-0.5);
        _2930 = cbMtdParam._m0[1u];
        _2932 = _2930.y * _2928;
        float _2935 = (_2910 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2936 = _2935 * (_2911 ? _2919 : (_2919 + (cbSceneParam._m0[72u].w * _2892)));
        _2937 = _2935 * (_2911 ? _2920 : (_2920 + (cbSceneParam._m0[72u].w * _2894)));
        _2938 = _2935 * (_2911 ? _2921 : (_2921 + (cbSceneParam._m0[72u].w * _2896)));
        _2939 = _2928 * 0.999000012874603271484375;
        _2949 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2949)
        {
            if ((cbInstanceData._m0[_276 + 7u].x + _2939) < 0.5)
            {
                _3105 = true;
                break;
            }
        }
        uint _3046 = _954 + uint(_2908.w);
        if ((cbInstanceData._m0[_3046].w < 1.0) && ((cbInstanceData._m0[_3046].w + _2939) < 0.5))
        {
            _3105 = true;
            break;
        }
        if ((_2932 + 1.0) < _2930.x)
        {
            _3105 = true;
            break;
        }
        _3105 = false;
        break;
    }
    float _3310;
    if (_3105)
    {
        discard_state = true;
        _3310 = 0.0;
    }
    else
    {
        _3310 = cbInstanceData._m0[_2771].w;
    }
    SV_Target.x = _2936;
    SV_Target.y = _2937;
    SV_Target.z = _2938;
    SV_Target.w = _3310;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2771].w;
    discard_exit();
}


