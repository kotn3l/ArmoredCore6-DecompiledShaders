#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_0;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 14) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_10;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_6;
layout(set = 0, binding = 23) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_8;
layout(set = 0, binding = 24) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_9;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1374;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _218 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _219 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _220 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _226 = inversesqrt(dot(vec3(_218, _219, _220), vec3(_218, _219, _220)));
    float _233 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _240 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _246 = uint(roundEven(NORMAL.w)) * 13u;
    uint _252 = _246 + 1u;
    uint _256 = _246 + 2u;
    float _265 = sqrt(((cbInstanceData._m0[_252].x * cbInstanceData._m0[_252].x) + (cbInstanceData._m0[_246].x * cbInstanceData._m0[_246].x)) + (cbInstanceData._m0[_256].x * cbInstanceData._m0[_256].x));
    float _266 = _265 * TEXCOORD.z;
    float _267 = _265 * TEXCOORD.w;
    vec4 _286 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _310 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _315 = _310.x * cbMtdParam._m0[11u].x;
    float _316 = _310.y * cbMtdParam._m0[11u].y;
    float _317 = _310.z * cbMtdParam._m0[11u].z;
    vec4 _336 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _266) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _267) + cbTextureTilingScale._m0[5u].w));
    vec4 _356 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _396 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _398 = _396.x;
    float _410 = dot(vec4(_398, _396.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _427 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _356.x) * 2.0) - ((((_398 - _410) * cbMtdParam._m0[24u].z) + _410) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3676 = isnan(0.0) ? _427 : (isnan(_427) ? 0.0 : max(_427, 0.0));
    float _428 = isnan(1.0) ? _3676 : (isnan(_3676) ? 1.0 : min(_3676, 1.0));
    float _435 = (_428 * ((_336.x * cbMtdParam._m0[12u].x) - _315)) + _315;
    float _436 = (_428 * ((_336.y * cbMtdParam._m0[12u].y) - _316)) + _316;
    float _437 = (_428 * ((_336.z * cbMtdParam._m0[12u].z) - _317)) + _317;
    vec4 _454 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _266) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _267) + cbTextureTilingScale._m0[3u].w));
    vec4 _474 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _476 = _474.x;
    float _486 = dot(vec4(_476, _474.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _500 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _356.y) * 2.0) - ((((_476 - _486) * cbMtdParam._m0[24u].z) + _486) * cbMtdParam._m0[20u].w))) + 1.0;
    float _3687 = isnan(0.0) ? _500 : (isnan(_500) ? 0.0 : max(_500, 0.0));
    float _501 = isnan(1.0) ? _3687 : (isnan(_3687) ? 1.0 : min(_3687, 1.0));
    float _508 = (_501 * ((_454.x * cbMtdParam._m0[13u].x) - _435)) + _435;
    float _509 = (_501 * ((_454.y * cbMtdParam._m0[13u].y) - _436)) + _436;
    float _510 = (_501 * ((_454.z * cbMtdParam._m0[13u].z) - _437)) + _437;
    vec4 _528 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_9, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[24u].x * _266) + cbTextureTilingScale._m0[24u].z, (cbTextureTilingScale._m0[24u].y * _267) + cbTextureTilingScale._m0[24u].w));
    vec4 _545 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[25u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _547 = _545.x;
    float _557 = dot(vec4(_547, _545.yzw), vec4(cbMtdParam._m0[30u].w, cbMtdParam._m0[31u].xy, 0.0));
    float _569 = ((cbMtdParam._m0[25u].x * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.z) - _356.z) * 2.0) - ((((_547 - _557) * cbMtdParam._m0[24u].z) + _557) * cbMtdParam._m0[20u].z))) + 1.0;
    float _3698 = isnan(0.0) ? _569 : (isnan(_569) ? 0.0 : max(_569, 0.0));
    float _570 = isnan(1.0) ? _3698 : (isnan(_3698) ? 1.0 : min(_3698, 1.0));
    float _583 = ((cbMtdParam._m0[9u].x * 4.55000019073486328125) * _286.x) * ((_570 * ((_528.x * cbMtdParam._m0[14u].x) - _508)) + _508);
    float _586 = ((cbMtdParam._m0[9u].y * 4.55000019073486328125) * _286.y) * ((_570 * ((_528.y * cbMtdParam._m0[14u].y) - _509)) + _509);
    float _589 = ((cbMtdParam._m0[9u].z * 4.55000019073486328125) * _286.z) * ((_570 * ((_528.z * cbMtdParam._m0[14u].z) - _510)) + _510);
    vec4 _607 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _266) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _267) + cbTextureTilingScale._m0[14u].w));
    vec4 _627 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _266) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _267) + cbTextureTilingScale._m0[4u].w));
    vec4 _644 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _646 = _644.x;
    float _647 = _644.y;
    float _648 = _644.z;
    float _655 = ((_627.x - _646) * _428) + _646;
    float _656 = ((_627.y - _647) * _428) + _647;
    float _657 = ((_627.z - _648) * _428) + _648;
    vec4 _669 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _266) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _267) + cbTextureTilingScale._m0[2u].w));
    float _680 = ((_669.x - _655) * _501) + _655;
    float _681 = ((_669.y - _656) * _501) + _656;
    float _682 = ((_669.z - _657) * _501) + _657;
    vec4 _694 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[23u].x * _266) + cbTextureTilingScale._m0[23u].z, (cbTextureTilingScale._m0[23u].y * _267) + cbTextureTilingScale._m0[23u].w));
    float _707 = ((_694.z - _682) * _570) + _682;
    float _710 = ((((_694.x - _680) * _570) + _680) * 2.0) + (-1.0);
    float _712 = ((((_694.y - _681) * _570) + _681) * 2.0) + (-1.0);
    float _713 = dot(vec2(_710, _712), vec2(_710, _712));
    float _3709 = isnan(0.0) ? _713 : (isnan(_713) ? 0.0 : max(_713, 0.0));
    float _718 = sqrt(1.0 - (isnan(1.0) ? _3709 : (isnan(_3709) ? 1.0 : min(_3709, 1.0))));
    vec4 _732 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _757 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _266) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _267) + cbTextureTilingScale._m0[11u].w));
    float _759 = _757.x;
    float _760 = 1.0 - _759;
    float _773 = (TEXCOORD_8.w - ((cbMtdParam._m0[21u].z * (1.0 - TEXCOORD_8.w)) * ((((_759 - _760) * cbMtdParam._m0[24u].w) + _760) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3720 = isnan(0.0) ? _773 : (isnan(_773) ? 0.0 : max(_773, 0.0));
    float _774 = isnan(1.0) ? _3720 : (isnan(_3720) ? 1.0 : min(_3720, 1.0));
    float _781 = (_774 * ((_607.x * cbMtdParam._m0[18u].x) - _583)) + _583;
    float _782 = (_774 * ((_607.y * cbMtdParam._m0[18u].y) - _586)) + _586;
    float _783 = (_774 * ((_607.z * cbMtdParam._m0[18u].z) - _589)) + _589;
    float _787 = (cbMtdParam._m0[19u].w * (_732.z - _707)) + _707;
    vec4 _800 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _266) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _267) + cbTextureTilingScale._m0[15u].w));
    float _807 = (_800.x * 2.0) + (-1.0);
    float _808 = (_800.y * 2.0) + (-1.0);
    float _809 = dot(vec2(_807, _808), vec2(_807, _808));
    float _3731 = isnan(0.0) ? _809 : (isnan(_809) ? 0.0 : max(_809, 0.0));
    float _817 = (_774 * (_800.z - _787)) + _787;
    float _820 = (((_732.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _710;
    float _821 = (((_732.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _712;
    float _833 = (((_807 - _820) + (cbMtdParam._m0[21u].x * _820)) * _774) + _820;
    float _834 = (((_808 - _821) + (cbMtdParam._m0[21u].x * _821)) * _774) + _821;
    float _835 = (_774 * (sqrt(1.0 - (isnan(1.0) ? _3731 : (isnan(_3731) ? 1.0 : min(_3731, 1.0)))) - _718)) + _718;
    float _839 = cbMtdParam._m0[22u].x + _732.w;
    float _842 = fma(_835, _233 * NORMAL.x, fma(_834, _240 * TANGENT.x, (_226 * _218) * _833));
    float _845 = fma(_835, _233 * NORMAL.y, fma(_834, _240 * TANGENT.y, (_226 * _219) * _833));
    float _848 = fma(_835, _233 * NORMAL.z, fma(_834, _240 * TANGENT.z, (_226 * _220) * _833));
    float _852 = inversesqrt(dot(vec3(_842, _845, _848), vec3(_842, _845, _848)));
    float _853 = _852 * _842;
    float _854 = _852 * _845;
    float _855 = _852 * _848;
    float _3742 = isnan(0.0) ? _817 : (isnan(_817) ? 0.0 : max(_817, 0.0));
    float _856 = isnan(1.0) ? _3742 : (isnan(_3742) ? 1.0 : min(_3742, 1.0));
    float _3753 = isnan(0.0) ? _839 : (isnan(_839) ? 0.0 : max(_839, 0.0));
    float _3764 = isnan(0.0) ? _781 : (isnan(_781) ? 0.0 : max(_781, 0.0));
    float _3775 = isnan(0.0) ? _782 : (isnan(_782) ? 0.0 : max(_782, 0.0));
    float _3786 = isnan(0.0) ? _783 : (isnan(_783) ? 0.0 : max(_783, 0.0));
    float _874 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _915 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _925 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _915);
    float _926 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _915);
    float _927 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _915);
    float _931 = inversesqrt(dot(vec3(_925, _926, _927), vec3(_925, _926, _927)));
    float _932 = _925 * _931;
    float _933 = _926 * _931;
    float _934 = _927 * _931;
    float _940 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _941 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _959 = fma(_855, cbSceneParam._m0[5u].z, fma(_854, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _853));
    float _962 = fma(_855, cbSceneParam._m0[6u].z, fma(_854, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _853));
    float _965 = fma(_855, cbSceneParam._m0[7u].z, fma(_854, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _853));
    uint _979 = (_246 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _985 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3764 : (isnan(_3764) ? 1.0 : min(_3764, 1.0)))) * cbInstanceData._m0[_979].x;
    float _986 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3775 : (isnan(_3775) ? 1.0 : min(_3775, 1.0)))) * cbInstanceData._m0[_979].y;
    float _987 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3786 : (isnan(_3786) ? 1.0 : min(_3786, 1.0)))) * cbInstanceData._m0[_979].z;
    float _3797 = isnan(0.0) ? _985 : (isnan(_985) ? 0.0 : max(_985, 0.0));
    float _988 = isnan(1.0) ? _3797 : (isnan(_3797) ? 1.0 : min(_3797, 1.0));
    float _3808 = isnan(0.0) ? _986 : (isnan(_986) ? 0.0 : max(_986, 0.0));
    float _989 = isnan(1.0) ? _3808 : (isnan(_3808) ? 1.0 : min(_3808, 1.0));
    float _3819 = isnan(0.0) ? _987 : (isnan(_987) ? 0.0 : max(_987, 0.0));
    float _990 = isnan(1.0) ? _3819 : (isnan(_3819) ? 1.0 : min(_3819, 1.0));
    vec4 _999 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _940, cbSceneParam._m0[86u].y * _941));
    float _1003 = ((isnan(1.0) ? _3753 : (isnan(_3753) ? 1.0 : min(_3753, 1.0))) * TEXCOORD_5.w) * _999.x;
    float _1004 = dot(vec3(_853, _854, _855), vec3(_932, _933, _934));
    float _1007 = _1004 * 2.0;
    float _1011 = (_1007 * _853) - _932;
    float _1012 = (_1007 * _854) - _933;
    float _1013 = (_1007 * _855) - _934;
    float _1017 = abs(dot(vec3(_932, _933, _934), vec3(_853, _854, _855)));
    float _3830 = isnan(0.0) ? _1017 : (isnan(_1017) ? 0.0 : max(_1017, 0.0));
    float _1019 = sqrt(_856);
    float _1032 = exp2((_1019 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3830 : (isnan(_3830) ? 1.0 : min(_3830, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1019 * 3.0));
    float _1064 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1068 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1072 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1373;
    float _1375;
    float _1376;
    float _1377;
    float _1378;
    float _1379;
    float _1380;
    float _1381;
    float _1382;
    float _1383;
    float _1384;
    float _1385;
    float _1386;
    float _1387;
    float _1388;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1098 = fma(_1072, cbModelParam._m0[26u].z, fma(_1068, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1064));
        float _1102 = fma(_1072, cbModelParam._m0[27u].z, fma(_1068, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1064));
        float _1106 = fma(_1072, cbModelParam._m0[28u].z, fma(_1068, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1064));
        float _1131 = _1064 + _853;
        float _1132 = _1068 + _854;
        float _1133 = _1072 + _855;
        float _1143 = fma(_1133, cbModelParam._m0[26u].z, fma(_1132, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1131)) - _1098;
        float _1144 = fma(_1133, cbModelParam._m0[27u].z, fma(_1132, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1131)) - _1102;
        float _1145 = fma(_1133, cbModelParam._m0[28u].z, fma(_1132, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1131)) - _1106;
        float _1149 = inversesqrt(dot(vec3(_1143, _1144, _1145), vec3(_1143, _1144, _1145)));
        float _1162 = ((_1149 * _1143) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1098 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1163 = ((_1149 * _1144) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1102 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1164 = ((_1149 * _1145) / cbModelParam._m0[34u].z) + ((((((_1106 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1167 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1162, _1163, _1164), 0.0);
        vec4 _1174 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1162, _1163, _1164), 0.0);
        vec4 _1181 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1162, _1163, _1164), 0.0);
        vec4 _1188 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1162, _1163, _1164), 0.0);
        float _1201 = exp2((_1167.w + (-0.5)) * 20.0) * 2.0;
        float _1202 = _1201 * (_1167.x + (-0.5));
        float _1203 = _1201 * (_1167.y + (-0.5));
        float _1204 = _1201 * (_1167.z + (-0.5));
        float _1211 = exp2((_1174.w + (-0.5)) * 20.0) * 2.0;
        float _1212 = _1211 * (_1174.x + (-0.5));
        float _1213 = _1211 * (_1174.y + (-0.5));
        float _1214 = _1211 * (_1174.z + (-0.5));
        float _1221 = exp2((_1181.w + (-0.5)) * 20.0) * 2.0;
        float _1222 = _1221 * (_1181.x + (-0.5));
        float _1223 = _1221 * (_1181.y + (-0.5));
        float _1224 = _1221 * (_1181.z + (-0.5));
        float _1231 = exp2((_1188.w + (-0.5)) * 20.0) * 2.0;
        float _1232 = _1231 * (_1188.x + (-0.5));
        float _1233 = _1231 * (_1188.y + (-0.5));
        float _1234 = _1231 * (_1188.z + (-0.5));
        float _1235 = isnan(0.0) ? _1232 : (isnan(_1232) ? 0.0 : max(_1232, 0.0));
        float _1236 = isnan(0.0) ? _1233 : (isnan(_1233) ? 0.0 : max(_1233, 0.0));
        float _1237 = isnan(0.0) ? _1234 : (isnan(_1234) ? 0.0 : max(_1234, 0.0));
        float _1238 = _1202 * 0.5;
        float _1239 = _1212 * 0.5;
        float _1240 = _1222 * 0.5;
        float _1241 = dot(vec3(_1238, _1239, _1240), vec3(_1238, _1239, _1240));
        float _1246 = (_1241 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1241);
        float _1255 = (dot(vec3(_853, _854, _855), vec3(_1246 * _1238, _1246 * _1239, _1246 * _1240)) + 1.0) * 0.5;
        float _3856 = isnan(0.0) ? _1255 : (isnan(_1255) ? 0.0 : max(_1255, 0.0));
        float _1265 = sqrt(((_1239 * _1239) + (_1238 * _1238)) + (_1240 * _1240)) / (_1235 + 9.9999997473787516355514526367188e-06);
        float _3867 = isnan(0.0) ? _1265 : (isnan(_1265) ? 0.0 : max(_1265, 0.0));
        float _1266 = isnan(1.0) ? _3867 : (isnan(_3867) ? 1.0 : min(_3867, 1.0));
        float _1267 = _1266 * 2.0;
        float _1271 = (1.0 - _1266) / (_1266 + 1.0);
        float _3878 = isnan(0.0) ? _1271 : (isnan(_1271) ? 0.0 : max(_1271, 0.0));
        float _1272 = isnan(1.0) ? _3878 : (isnan(_3878) ? 1.0 : min(_3878, 1.0));
        float _1281 = ((((1.0 - _1272) * (_1267 + 2.0)) * exp2(log2(isnan(1.0) ? _3856 : (isnan(_3856) ? 1.0 : min(_3856, 1.0))) * (_1267 + 1.0))) + _1272) * _1235;
        float _1282 = _1203 * 0.5;
        float _1283 = _1213 * 0.5;
        float _1284 = _1223 * 0.5;
        float _1285 = dot(vec3(_1282, _1283, _1284), vec3(_1282, _1283, _1284));
        float _1290 = (_1285 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1285);
        float _1298 = (dot(vec3(_853, _854, _855), vec3(_1290 * _1282, _1290 * _1283, _1290 * _1284)) + 1.0) * 0.5;
        float _3889 = isnan(0.0) ? _1298 : (isnan(_1298) ? 0.0 : max(_1298, 0.0));
        float _1307 = sqrt(((_1283 * _1283) + (_1282 * _1282)) + (_1284 * _1284)) / (_1236 + 9.9999997473787516355514526367188e-06);
        float _3900 = isnan(0.0) ? _1307 : (isnan(_1307) ? 0.0 : max(_1307, 0.0));
        float _1308 = isnan(1.0) ? _3900 : (isnan(_3900) ? 1.0 : min(_3900, 1.0));
        float _1309 = _1308 * 2.0;
        float _1313 = (1.0 - _1308) / (_1308 + 1.0);
        float _3911 = isnan(0.0) ? _1313 : (isnan(_1313) ? 0.0 : max(_1313, 0.0));
        float _1314 = isnan(1.0) ? _3911 : (isnan(_3911) ? 1.0 : min(_3911, 1.0));
        float _1323 = ((((1.0 - _1314) * (_1309 + 2.0)) * exp2(log2(isnan(1.0) ? _3889 : (isnan(_3889) ? 1.0 : min(_3889, 1.0))) * (_1309 + 1.0))) + _1314) * _1236;
        float _1324 = _1204 * 0.5;
        float _1325 = _1214 * 0.5;
        float _1326 = _1224 * 0.5;
        float _1327 = dot(vec3(_1324, _1325, _1326), vec3(_1324, _1325, _1326));
        float _1332 = (_1327 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1327);
        float _1340 = (dot(vec3(_853, _854, _855), vec3(_1332 * _1324, _1332 * _1325, _1332 * _1326)) + 1.0) * 0.5;
        float _3922 = isnan(0.0) ? _1340 : (isnan(_1340) ? 0.0 : max(_1340, 0.0));
        float _1349 = sqrt(((_1325 * _1325) + (_1324 * _1324)) + (_1326 * _1326)) / (_1237 + 9.9999997473787516355514526367188e-06);
        float _3933 = isnan(0.0) ? _1349 : (isnan(_1349) ? 0.0 : max(_1349, 0.0));
        float _1350 = isnan(1.0) ? _3933 : (isnan(_3933) ? 1.0 : min(_3933, 1.0));
        float _1351 = _1350 * 2.0;
        float _1355 = (1.0 - _1350) / (_1350 + 1.0);
        float _3944 = isnan(0.0) ? _1355 : (isnan(_1355) ? 0.0 : max(_1355, 0.0));
        float _1356 = isnan(1.0) ? _3944 : (isnan(_3944) ? 1.0 : min(_3944, 1.0));
        float _1365 = ((((1.0 - _1356) * (_1351 + 2.0)) * exp2(log2(isnan(1.0) ? _3922 : (isnan(_3922) ? 1.0 : min(_3922, 1.0))) * (_1351 + 1.0))) + _1356) * _1237;
        _1373 = _1204;
        _1375 = _1203;
        _1376 = _1202;
        _1377 = _1214;
        _1378 = _1213;
        _1379 = _1212;
        _1380 = _1224;
        _1381 = _1223;
        _1382 = _1222;
        _1383 = _1237;
        _1384 = _1236;
        _1385 = _1235;
        _1386 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1281 : (isnan(_1281) ? 0.0 : max(_1281, 0.0)));
        _1387 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1323 : (isnan(_1323) ? 0.0 : max(_1323, 0.0)));
        _1388 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1365 : (isnan(_1365) ? 0.0 : max(_1365, 0.0)));
    }
    else
    {
        _1373 = _1374;
        _1375 = _1374;
        _1376 = _1374;
        _1377 = _1374;
        _1378 = _1374;
        _1379 = _1374;
        _1380 = _1374;
        _1381 = _1374;
        _1382 = _1374;
        _1383 = _1374;
        _1384 = _1374;
        _1385 = _1374;
        _1386 = 0.0;
        _1387 = 0.0;
        _1388 = 0.0;
    }
    float _1680;
    float _1681;
    float _1682;
    float _1683;
    float _1684;
    float _1685;
    float _1686;
    float _1687;
    float _1688;
    float _1689;
    float _1690;
    float _1691;
    float _1692;
    float _1693;
    float _1694;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1411 = fma(_1072, cbModelParam._m0[30u].z, fma(_1068, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1064));
        float _1415 = fma(_1072, cbModelParam._m0[31u].z, fma(_1068, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1064));
        float _1419 = fma(_1072, cbModelParam._m0[32u].z, fma(_1068, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1064));
        float _1442 = _1064 + _853;
        float _1443 = _1068 + _854;
        float _1444 = _1072 + _855;
        float _1454 = fma(_1444, cbModelParam._m0[30u].z, fma(_1443, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1442)) - _1411;
        float _1455 = fma(_1444, cbModelParam._m0[31u].z, fma(_1443, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1442)) - _1415;
        float _1456 = fma(_1444, cbModelParam._m0[32u].z, fma(_1443, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1442)) - _1419;
        float _1460 = inversesqrt(dot(vec3(_1454, _1455, _1456), vec3(_1454, _1455, _1456)));
        float _1473 = ((_1460 * _1454) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1411 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1474 = ((_1460 * _1455) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1415 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1475 = ((_1460 * _1456) / cbModelParam._m0[35u].z) + ((((((_1419 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1477 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1473, _1474, _1475), 0.0);
        vec4 _1484 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1473, _1474, _1475), 0.0);
        vec4 _1491 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1473, _1474, _1475), 0.0);
        vec4 _1498 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1473, _1474, _1475), 0.0);
        float _1510 = exp2((_1477.w + (-0.5)) * 20.0) * 2.0;
        float _1511 = _1510 * (_1477.x + (-0.5));
        float _1512 = _1510 * (_1477.y + (-0.5));
        float _1513 = _1510 * (_1477.z + (-0.5));
        float _1520 = exp2((_1484.w + (-0.5)) * 20.0) * 2.0;
        float _1521 = _1520 * (_1484.x + (-0.5));
        float _1522 = _1520 * (_1484.y + (-0.5));
        float _1523 = _1520 * (_1484.z + (-0.5));
        float _1530 = exp2((_1491.w + (-0.5)) * 20.0) * 2.0;
        float _1531 = _1530 * (_1491.x + (-0.5));
        float _1532 = _1530 * (_1491.y + (-0.5));
        float _1533 = _1530 * (_1491.z + (-0.5));
        float _1540 = exp2((_1498.w + (-0.5)) * 20.0) * 2.0;
        float _1541 = _1540 * (_1498.x + (-0.5));
        float _1542 = _1540 * (_1498.y + (-0.5));
        float _1543 = _1540 * (_1498.z + (-0.5));
        float _1544 = isnan(0.0) ? _1541 : (isnan(_1541) ? 0.0 : max(_1541, 0.0));
        float _1545 = isnan(0.0) ? _1542 : (isnan(_1542) ? 0.0 : max(_1542, 0.0));
        float _1546 = isnan(0.0) ? _1543 : (isnan(_1543) ? 0.0 : max(_1543, 0.0));
        float _1547 = _1511 * 0.5;
        float _1548 = _1521 * 0.5;
        float _1549 = _1531 * 0.5;
        float _1550 = dot(vec3(_1547, _1548, _1549), vec3(_1547, _1548, _1549));
        float _1555 = (_1550 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1550);
        float _1563 = (dot(vec3(_853, _854, _855), vec3(_1555 * _1547, _1555 * _1548, _1555 * _1549)) + 1.0) * 0.5;
        float _3985 = isnan(0.0) ? _1563 : (isnan(_1563) ? 0.0 : max(_1563, 0.0));
        float _1572 = sqrt(((_1548 * _1548) + (_1547 * _1547)) + (_1549 * _1549)) / (_1544 + 9.9999997473787516355514526367188e-06);
        float _3996 = isnan(0.0) ? _1572 : (isnan(_1572) ? 0.0 : max(_1572, 0.0));
        float _1573 = isnan(1.0) ? _3996 : (isnan(_3996) ? 1.0 : min(_3996, 1.0));
        float _1574 = _1573 * 2.0;
        float _1578 = (1.0 - _1573) / (_1573 + 1.0);
        float _4007 = isnan(0.0) ? _1578 : (isnan(_1578) ? 0.0 : max(_1578, 0.0));
        float _1579 = isnan(1.0) ? _4007 : (isnan(_4007) ? 1.0 : min(_4007, 1.0));
        float _1588 = ((((1.0 - _1579) * (_1574 + 2.0)) * exp2(log2(isnan(1.0) ? _3985 : (isnan(_3985) ? 1.0 : min(_3985, 1.0))) * (_1574 + 1.0))) + _1579) * _1544;
        float _1589 = _1512 * 0.5;
        float _1590 = _1522 * 0.5;
        float _1591 = _1532 * 0.5;
        float _1592 = dot(vec3(_1589, _1590, _1591), vec3(_1589, _1590, _1591));
        float _1597 = (_1592 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1592);
        float _1605 = (dot(vec3(_853, _854, _855), vec3(_1597 * _1589, _1597 * _1590, _1597 * _1591)) + 1.0) * 0.5;
        float _4018 = isnan(0.0) ? _1605 : (isnan(_1605) ? 0.0 : max(_1605, 0.0));
        float _1614 = sqrt(((_1590 * _1590) + (_1589 * _1589)) + (_1591 * _1591)) / (_1545 + 9.9999997473787516355514526367188e-06);
        float _4029 = isnan(0.0) ? _1614 : (isnan(_1614) ? 0.0 : max(_1614, 0.0));
        float _1615 = isnan(1.0) ? _4029 : (isnan(_4029) ? 1.0 : min(_4029, 1.0));
        float _1616 = _1615 * 2.0;
        float _1620 = (1.0 - _1615) / (_1615 + 1.0);
        float _4040 = isnan(0.0) ? _1620 : (isnan(_1620) ? 0.0 : max(_1620, 0.0));
        float _1621 = isnan(1.0) ? _4040 : (isnan(_4040) ? 1.0 : min(_4040, 1.0));
        float _1630 = ((((1.0 - _1621) * (_1616 + 2.0)) * exp2(log2(isnan(1.0) ? _4018 : (isnan(_4018) ? 1.0 : min(_4018, 1.0))) * (_1616 + 1.0))) + _1621) * _1545;
        float _1631 = _1513 * 0.5;
        float _1632 = _1523 * 0.5;
        float _1633 = _1533 * 0.5;
        float _1634 = dot(vec3(_1631, _1632, _1633), vec3(_1631, _1632, _1633));
        float _1639 = (_1634 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1634);
        float _1647 = (dot(vec3(_853, _854, _855), vec3(_1639 * _1631, _1639 * _1632, _1639 * _1633)) + 1.0) * 0.5;
        float _4051 = isnan(0.0) ? _1647 : (isnan(_1647) ? 0.0 : max(_1647, 0.0));
        float _1656 = sqrt(((_1632 * _1632) + (_1631 * _1631)) + (_1633 * _1633)) / (_1546 + 9.9999997473787516355514526367188e-06);
        float _4062 = isnan(0.0) ? _1656 : (isnan(_1656) ? 0.0 : max(_1656, 0.0));
        float _1657 = isnan(1.0) ? _4062 : (isnan(_4062) ? 1.0 : min(_4062, 1.0));
        float _1658 = _1657 * 2.0;
        float _1662 = (1.0 - _1657) / (_1657 + 1.0);
        float _4073 = isnan(0.0) ? _1662 : (isnan(_1662) ? 0.0 : max(_1662, 0.0));
        float _1663 = isnan(1.0) ? _4073 : (isnan(_4073) ? 1.0 : min(_4073, 1.0));
        float _1672 = ((((1.0 - _1663) * (_1658 + 2.0)) * exp2(log2(isnan(1.0) ? _4051 : (isnan(_4051) ? 1.0 : min(_4051, 1.0))) * (_1658 + 1.0))) + _1663) * _1546;
        _1680 = _1513;
        _1681 = _1512;
        _1682 = _1511;
        _1683 = _1523;
        _1684 = _1522;
        _1685 = _1521;
        _1686 = _1533;
        _1687 = _1532;
        _1688 = _1531;
        _1689 = _1546;
        _1690 = _1545;
        _1691 = _1544;
        _1692 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1588 : (isnan(_1588) ? 0.0 : max(_1588, 0.0)));
        _1693 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1630 : (isnan(_1630) ? 0.0 : max(_1630, 0.0)));
        _1694 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1672 : (isnan(_1672) ? 0.0 : max(_1672, 0.0)));
    }
    else
    {
        _1680 = _1374;
        _1681 = _1374;
        _1682 = _1374;
        _1683 = _1374;
        _1684 = _1374;
        _1685 = _1374;
        _1686 = _1374;
        _1687 = _1374;
        _1688 = _1374;
        _1689 = _1374;
        _1690 = _1374;
        _1691 = _1374;
        _1692 = 0.0;
        _1693 = 0.0;
        _1694 = 0.0;
    }
    float _1704 = (cbModelParam._m0[1u].x * (_1692 - _1386)) + _1386;
    float _1705 = (cbModelParam._m0[1u].x * (_1693 - _1387)) + _1387;
    float _1706 = (cbModelParam._m0[1u].x * (_1694 - _1388)) + _1388;
    float _1727 = fma(_1706, cbSceneParam._m0[89u].z, fma(_1705, cbSceneParam._m0[89u].y, _1704 * cbSceneParam._m0[89u].x));
    float _1730 = fma(_1706, cbSceneParam._m0[90u].z, fma(_1705, cbSceneParam._m0[90u].y, _1704 * cbSceneParam._m0[90u].x));
    float _1733 = fma(_1706, cbSceneParam._m0[91u].z, fma(_1705, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1704));
    float _1748 = _1011 * 0.5;
    float _1749 = _1012 * 0.5;
    float _1750 = _1013 * 0.5;
    float _1751 = dot(vec4(_1748, _1749, _1750, 1.0), vec4(_1682, _1685, _1688, _1691));
    float _1754 = dot(vec4(_1748, _1749, _1750, 1.0), vec4(_1681, _1684, _1687, _1690));
    float _1757 = dot(vec4(_1748, _1749, _1750, 1.0), vec4(_1680, _1683, _1686, _1689));
    float _1791;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1764 = dot(vec4(_1748, _1749, _1750, 1.0), vec4(_1373, _1377, _1380, _1383));
        float _1768 = dot(vec4(_1748, _1749, _1750, 1.0), vec4(_1375, _1378, _1381, _1384));
        float _1772 = dot(vec4(_1748, _1749, _1750, 1.0), vec4(_1376, _1379, _1382, _1385));
        float _1779 = dot(vec4(cbModelParam._m0[39u]), vec4(_1748, _1749, _1750, 1.0));
        _1791 = dot(vec3(isnan(0.0) ? _1772 : (isnan(_1772) ? 0.0 : max(_1772, 0.0)), isnan(0.0) ? _1768 : (isnan(_1768) ? 0.0 : max(_1768, 0.0)), isnan(0.0) ? _1764 : (isnan(_1764) ? 0.0 : max(_1764, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1779) ? 0.0 : (isnan(0.0) ? _1779 : max(0.0, _1779))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1791 = 1.0;
    }
    float _1802;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1793 = dot(vec4(cbModelParam._m0[40u]), vec4(_1748, _1749, _1750, 1.0));
        _1802 = dot(vec3(isnan(0.0) ? _1751 : (isnan(_1751) ? 0.0 : max(_1751, 0.0)), isnan(0.0) ? _1754 : (isnan(_1754) ? 0.0 : max(_1754, 0.0)), isnan(0.0) ? _1757 : (isnan(_1757) ? 0.0 : max(_1757, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1793) ? 0.0 : (isnan(0.0) ? _1793 : max(0.0, _1793))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1802 = 1.0;
    }
    float _1806 = (_1802 * cbModelParam._m0[1u].x) + (_1791 * (1.0 - cbModelParam._m0[1u].x));
    float _1816 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _856);
    float _1817 = isnan(_1816) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1816 : min(cbModelParam._m0[25u].z, _1816));
    float _1897;
    float _1899;
    float _1901;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1864 = fma(_1072, cbModelParam._m0[13u].z, fma(_1068, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1064)) + cbModelParam._m0[13u].w;
        float _1868 = fma(_1072, cbModelParam._m0[14u].z, fma(_1068, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1064)) + cbModelParam._m0[14u].w;
        float _1872 = fma(_1072, cbModelParam._m0[15u].z, fma(_1068, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1064)) + cbModelParam._m0[15u].w;
        float _1875 = fma(_1013, cbModelParam._m0[13u].z, fma(_1012, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1011));
        float _1878 = fma(_1013, cbModelParam._m0[14u].z, fma(_1012, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1011));
        float _1881 = fma(_1013, cbModelParam._m0[15u].z, fma(_1012, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1011));
        float _1909;
        if (_1875 > 0.0)
        {
            _1909 = abs((1.0 - _1864) / _1875);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1875 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1864 + 1.0) / _1875);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1909 = frontier_phi_14_12_ladder;
        }
        float _2109;
        if (_1878 > 0.0)
        {
            _2109 = abs((1.0 - _1868) / _1878);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1878 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1868 + 1.0) / _1878);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2109 = frontier_phi_23_19_ladder;
        }
        float _2352;
        if (_1881 > 0.0)
        {
            _2352 = abs((1.0 - _1872) / _1881);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1881 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1872 + 1.0) / _1881);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2352 = frontier_phi_35_30_ladder;
        }
        float _2354 = isnan(_2109) ? _1909 : (isnan(_1909) ? _2109 : min(_1909, _2109));
        float _2355 = isnan(_2352) ? _2354 : (isnan(_2354) ? _2352 : min(_2354, _2352));
        float _2359 = (_2355 * _1875) + _1864;
        float _2360 = (_2355 * _1878) + _1868;
        float _2361 = (_2355 * _1881) + _1872;
        float _2362 = _2355 * 9.9999997473787516355514526367188e-05;
        float _2364 = (-1.0) - _2362;
        float _2366 = _2362 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2361 > _2366) || ((_2361 < _2364) || ((_2360 > _2366) || ((_2360 < _2364) || ((_2359 < _2364) || (_2359 > _2366))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2485 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2361, cbModelParam._m0[9u].z, fma(_2360, cbModelParam._m0[9u].y, _2359 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2361, cbModelParam._m0[10u].z, fma(_2360, cbModelParam._m0[10u].y, _2359 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2361, cbModelParam._m0[11u].z, fma(_2360, cbModelParam._m0[11u].y, _2359 * cbModelParam._m0[11u].x))), _1817);
            frontier_phi_13_35_ladder = _2485.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2485.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2485.x * cbModelParam._m0[1u].y;
        }
        _1897 = frontier_phi_13_35_ladder_2;
        _1899 = frontier_phi_13_35_ladder_1;
        _1901 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1885 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1011, _1012, _1013), _1817);
        _1897 = _1885.x * cbModelParam._m0[1u].y;
        _1899 = _1885.y * cbModelParam._m0[1u].y;
        _1901 = _1885.z * cbModelParam._m0[1u].y;
    }
    float _1905 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _856);
    float _1906 = isnan(_1905) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1905 : min(cbModelParam._m0[25u].w, _1905));
    float _1995;
    float _1997;
    float _1999;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1959 = fma(_1072, cbModelParam._m0[21u].z, fma(_1068, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1064)) + cbModelParam._m0[21u].w;
        float _1963 = fma(_1072, cbModelParam._m0[22u].z, fma(_1068, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1064)) + cbModelParam._m0[22u].w;
        float _1967 = fma(_1072, cbModelParam._m0[23u].z, fma(_1068, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1064)) + cbModelParam._m0[23u].w;
        float _1970 = fma(_1013, cbModelParam._m0[21u].z, fma(_1012, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1011));
        float _1973 = fma(_1013, cbModelParam._m0[22u].z, fma(_1012, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1011));
        float _1976 = fma(_1013, cbModelParam._m0[23u].z, fma(_1012, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1011));
        float _2114;
        if (_1970 > 0.0)
        {
            _2114 = abs((1.0 - _1959) / _1970);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1970 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1959 + 1.0) / _1970);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2114 = frontier_phi_25_21_ladder;
        }
        float _2379;
        if (_1973 > 0.0)
        {
            _2379 = abs((1.0 - _1963) / _1973);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1973 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1963 + 1.0) / _1973);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2379 = frontier_phi_37_32_ladder;
        }
        float _2584;
        if (_1976 > 0.0)
        {
            _2584 = abs((1.0 - _1967) / _1976);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1976 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1967 + 1.0) / _1976);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2584 = frontier_phi_46_43_ladder;
        }
        float _2586 = isnan(_2379) ? _2114 : (isnan(_2114) ? _2379 : min(_2114, _2379));
        float _2587 = isnan(_2584) ? _2586 : (isnan(_2586) ? _2584 : min(_2586, _2584));
        float _2591 = (_2587 * _1970) + _1959;
        float _2592 = (_2587 * _1973) + _1963;
        float _2593 = (_2587 * _1976) + _1967;
        float _2594 = _2587 * 9.9999997473787516355514526367188e-05;
        float _2595 = (-1.0) - _2594;
        float _2597 = _2594 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2593 > _2597) || ((_2593 < _2595) || ((_2592 > _2597) || ((_2592 < _2595) || ((_2591 < _2595) || (_2591 > _2597))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2792 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2593, cbModelParam._m0[17u].z, fma(_2592, cbModelParam._m0[17u].y, _2591 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2593, cbModelParam._m0[18u].z, fma(_2592, cbModelParam._m0[18u].y, _2591 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2593, cbModelParam._m0[19u].z, fma(_2592, cbModelParam._m0[19u].y, _2591 * cbModelParam._m0[19u].x))), _1906);
            frontier_phi_22_46_ladder = _2792.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2792.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2792.x * cbModelParam._m0[1u].z;
        }
        _1995 = frontier_phi_22_46_ladder_2;
        _1997 = frontier_phi_22_46_ladder_1;
        _1999 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1979 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1011, _1012, _1013), _1906);
        _1995 = _1979.x * cbModelParam._m0[1u].z;
        _1997 = _1979.y * cbModelParam._m0[1u].z;
        _1999 = _1979.z * cbModelParam._m0[1u].z;
    }
    float _2011 = ((((1.0 - _1032) * ((_1019 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_1032 * _1019)) * _1003;
    float _2012 = _2011 * ((cbModelParam._m0[1u].w * (_1995 - _1897)) + _1897);
    float _2013 = _2011 * ((cbModelParam._m0[1u].w * (_1997 - _1899)) + _1899);
    float _2014 = _2011 * ((cbModelParam._m0[1u].w * (_1999 - _1901)) + _1901);
    float _2017 = fma(_2014, cbSceneParam._m0[89u].z, fma(_2013, cbSceneParam._m0[89u].y, _2012 * cbSceneParam._m0[89u].x));
    float _2020 = fma(_2014, cbSceneParam._m0[90u].z, fma(_2013, cbSceneParam._m0[90u].y, _2012 * cbSceneParam._m0[90u].x));
    float _2023 = fma(_2014, cbSceneParam._m0[91u].z, fma(_2013, cbSceneParam._m0[91u].y, _2012 * cbSceneParam._m0[91u].x));
    uvec4 _2033 = floatBitsToUint(cbInstanceData._m0[_246 + 5u]);
    uint _2035 = _2033.x * 14u;
    uint _2036 = _2035 + 13u;
    float _2043 = _1003 + (-1.0);
    float _2048 = (cbLight._m0[_2036].x * _2043) + 1.0;
    float _2049 = (cbLight._m0[_2036].y * _2043) + 1.0;
    float _2050 = (cbLight._m0[_2036].z * _2043) + 1.0;
    float _2051 = (cbLight._m0[_2036].w * _2043) + 1.0;
    uint _2052 = _2035 + 5u;
    float _2058 = isnan(1.0) ? _2049 : (isnan(_2049) ? 1.0 : min(_2049, 1.0));
    uint _2062 = _2035 + 4u;
    float _2068 = isnan(1.0) ? _2048 : (isnan(_2048) ? 1.0 : min(_2048, 1.0));
    uint _2072 = _2035 | 1u;
    float _2083 = dot(vec3(cbLight._m0[_2035].xyz), vec3(_853, _854, _855));
    float _2086 = dot(vec3(cbLight._m0[_2072].xyz), vec3(_853, _854, _855));
    float _4209 = isnan(0.0) ? _2083 : (isnan(_2083) ? 0.0 : max(_2083, 0.0));
    float _4220 = isnan(0.0) ? _2086 : (isnan(_2086) ? 0.0 : max(_2086, 0.0));
    float _2091 = (isnan(1.0) ? _4209 : (isnan(_4209) ? 1.0 : min(_4209, 1.0))) * 0.3183098733425140380859375;
    float _2093 = (isnan(1.0) ? _4220 : (isnan(_4220) ? 1.0 : min(_4220, 1.0))) * 0.3183098733425140380859375;
    float _2100 = ((cbLight._m0[_2052].x * _2058) * _2093) + ((cbLight._m0[_2062].x * _2068) * _2091);
    float _2101 = ((_2058 * cbLight._m0[_2052].y) * _2093) + ((_2068 * cbLight._m0[_2062].y) * _2091);
    float _2102 = ((_2058 * cbLight._m0[_2052].z) * _2093) + ((_2068 * cbLight._m0[_2062].z) * _2091);
    uvec4 _2106 = floatBitsToUint(cbLight._m0[_2035 + 12u]);
    bool _2108 = _2106.x == 0u;
    float _2119;
    float _2121;
    float _2123;
    if (_2108)
    {
        _2119 = _2100;
        _2121 = _2101;
        _2123 = _2102;
    }
    else
    {
        uint _2127 = _2035 + 6u;
        float _2143 = (dot(vec3(cbLight._m0[_2035 + 2u].xyz), vec3(_853, _854, _855)) * 0.5) + 0.5;
        float _2144 = _2143 * _2143;
        float _4231 = isnan(0.0) ? _2144 : (isnan(_2144) ? 0.0 : max(_2144, 0.0));
        float _2145 = isnan(1.0) ? _4231 : (isnan(_4231) ? 1.0 : min(_4231, 1.0));
        float _2146 = isnan(1.0) ? _2050 : (isnan(_2050) ? 1.0 : min(_2050, 1.0));
        _2119 = (((cbLight._m0[_2127].x * 0.3183098733425140380859375) * _2145) * _2146) + _2100;
        _2121 = (((cbLight._m0[_2127].y * 0.3183098733425140380859375) * _2145) * _2146) + _2101;
        _2123 = (((cbLight._m0[_2127].z * 0.3183098733425140380859375) * _2145) * _2146) + _2102;
    }
    bool _2126 = _2106.y == 0u;
    float _2164;
    float _2166;
    float _2168;
    if (_2126)
    {
        _2164 = _2119;
        _2166 = _2121;
        _2168 = _2123;
    }
    else
    {
        uint _2323 = _2035 + 7u;
        float _2339 = (dot(vec3(cbLight._m0[_2035 + 3u].xyz), vec3(_853, _854, _855)) * 0.5) + 0.5;
        float _2340 = _2339 * _2339;
        float _4247 = isnan(0.0) ? _2340 : (isnan(_2340) ? 0.0 : max(_2340, 0.0));
        float _2341 = isnan(1.0) ? _4247 : (isnan(_4247) ? 1.0 : min(_4247, 1.0));
        float _2342 = isnan(1.0) ? _2051 : (isnan(_2051) ? 1.0 : min(_2051, 1.0));
        _2164 = (((cbLight._m0[_2323].x * 0.3183098733425140380859375) * _2341) * _2342) + _2119;
        _2166 = (((cbLight._m0[_2323].y * 0.3183098733425140380859375) * _2341) * _2342) + _2121;
        _2168 = (((cbLight._m0[_2323].z * 0.3183098733425140380859375) * _2341) * _2342) + _2123;
    }
    uint _2171 = _2035 + 8u;
    float _2184 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2035].w)) * _856) * 0.949999988079071044921875);
    float _2185 = _2184 * _2184;
    float _2186 = cbLight._m0[_2035].x + _932;
    float _2187 = cbLight._m0[_2035].y + _933;
    float _2188 = cbLight._m0[_2035].z + _934;
    float _2192 = inversesqrt(dot(vec3(_2186, _2187, _2188), vec3(_2186, _2187, _2188)));
    float _2193 = _2192 * _2186;
    float _2194 = _2192 * _2187;
    float _2195 = _2192 * _2188;
    float _2196 = dot(vec3(_853, _854, _855), vec3(cbLight._m0[_2035].xyz));
    float _4263 = isnan(0.0) ? _2196 : (isnan(_2196) ? 0.0 : max(_2196, 0.0));
    float _2199 = isnan(1.0) ? _4263 : (isnan(_4263) ? 1.0 : min(_4263, 1.0));
    float _4274 = isnan(0.0) ? _1004 : (isnan(_1004) ? 0.0 : max(_1004, 0.0));
    float _2200 = isnan(1.0) ? _4274 : (isnan(_4274) ? 1.0 : min(_4274, 1.0));
    float _2201 = dot(vec3(_853, _854, _855), vec3(_2193, _2194, _2195));
    float _4285 = isnan(0.0) ? _2201 : (isnan(_2201) ? 0.0 : max(_2201, 0.0));
    float _2204 = isnan(1.0) ? _4285 : (isnan(_4285) ? 1.0 : min(_4285, 1.0));
    float _2205 = dot(vec3(cbLight._m0[_2035].xyz), vec3(_2193, _2194, _2195));
    float _4296 = isnan(0.0) ? _2205 : (isnan(_2205) ? 0.0 : max(_2205, 0.0));
    float _2209 = _2185 * _2185;
    float _2213 = ((_2204 * _2204) * (_2209 + (-1.0))) + 1.0;
    float _2224 = (exp2(log2(1.0 - (isnan(1.0) ? _4296 : (isnan(_4296) ? 1.0 : min(_4296, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2225 = 1.0 - _2185;
    float _2236 = (0.5 / (((_2200 * ((_2199 * _2225) + _2185)) + 9.9999999392252902907785028219223e-09) + (((_2200 * _2225) + _2185) * _2199))) * _2199;
    float _4307 = isnan(0.0) ? _2236 : (isnan(_2236) ? 0.0 : max(_2236, 0.0));
    float _2238 = (isnan(1.0) ? _4307 : (isnan(_4307) ? 1.0 : min(_4307, 1.0))) * (_2209 / ((_2213 * _2213) * 3.141590118408203125));
    uint _2249 = _2035 + 9u;
    float _2260 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2072].w)) * _856) * 0.949999988079071044921875);
    float _2261 = _2260 * _2260;
    float _2262 = cbLight._m0[_2072].x + _932;
    float _2263 = cbLight._m0[_2072].y + _933;
    float _2264 = cbLight._m0[_2072].z + _934;
    float _2268 = inversesqrt(dot(vec3(_2262, _2263, _2264), vec3(_2262, _2263, _2264)));
    float _2269 = _2268 * _2262;
    float _2270 = _2268 * _2263;
    float _2271 = _2268 * _2264;
    float _2272 = dot(vec3(_853, _854, _855), vec3(cbLight._m0[_2072].xyz));
    float _4318 = isnan(0.0) ? _2272 : (isnan(_2272) ? 0.0 : max(_2272, 0.0));
    float _2275 = isnan(1.0) ? _4318 : (isnan(_4318) ? 1.0 : min(_4318, 1.0));
    float _2276 = dot(vec3(_853, _854, _855), vec3(_2269, _2270, _2271));
    float _4329 = isnan(0.0) ? _2276 : (isnan(_2276) ? 0.0 : max(_2276, 0.0));
    float _2279 = isnan(1.0) ? _4329 : (isnan(_4329) ? 1.0 : min(_4329, 1.0));
    float _2280 = dot(vec3(cbLight._m0[_2072].xyz), vec3(_2269, _2270, _2271));
    float _4340 = isnan(0.0) ? _2280 : (isnan(_2280) ? 0.0 : max(_2280, 0.0));
    float _2284 = _2261 * _2261;
    float _2288 = ((_2279 * _2279) * (_2284 + (-1.0))) + 1.0;
    float _2297 = (exp2(log2(1.0 - (isnan(1.0) ? _4340 : (isnan(_4340) ? 1.0 : min(_4340, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2298 = 1.0 - _2261;
    float _2308 = (0.5 / (((_2200 * ((_2275 * _2298) + _2261)) + 9.9999999392252902907785028219223e-09) + (((_2200 * _2298) + _2261) * _2275))) * _2275;
    float _4351 = isnan(0.0) ? _2308 : (isnan(_2308) ? 0.0 : max(_2308, 0.0));
    float _2310 = (isnan(1.0) ? _4351 : (isnan(_4351) ? 1.0 : min(_4351, 1.0))) * (_2284 / ((_2288 * _2288) * 3.141590118408203125));
    float _2320 = (((_2297 * cbLight._m0[_2249].x) * _2310) * _2058) + (((_2224 * cbLight._m0[_2171].x) * _2238) * _2068);
    float _2321 = (((_2297 * cbLight._m0[_2249].y) * _2310) * _2058) + (((_2224 * cbLight._m0[_2171].y) * _2238) * _2068);
    float _2322 = (((_2297 * cbLight._m0[_2249].z) * _2310) * _2058) + (((_2224 * cbLight._m0[_2171].z) * _2238) * _2068);
    float _2384;
    float _2386;
    float _2388;
    if (_2108)
    {
        _2384 = _2320;
        _2386 = _2321;
        _2388 = _2322;
    }
    else
    {
        uint _2390 = _2035 + 2u;
        uint _2394 = _2035 + 10u;
        float _2408 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2390].w)) * _856) * 0.949999988079071044921875);
        float _2409 = _2408 * _2408;
        float _2410 = cbLight._m0[_2390].x + _932;
        float _2411 = cbLight._m0[_2390].y + _933;
        float _2412 = cbLight._m0[_2390].z + _934;
        float _2416 = inversesqrt(dot(vec3(_2410, _2411, _2412), vec3(_2410, _2411, _2412)));
        float _2417 = _2416 * _2410;
        float _2418 = _2416 * _2411;
        float _2419 = _2416 * _2412;
        float _2420 = dot(vec3(_853, _854, _855), vec3(cbLight._m0[_2390].xyz));
        float _4362 = isnan(0.0) ? _2420 : (isnan(_2420) ? 0.0 : max(_2420, 0.0));
        float _2423 = isnan(1.0) ? _4362 : (isnan(_4362) ? 1.0 : min(_4362, 1.0));
        float _2424 = dot(vec3(_853, _854, _855), vec3(_2417, _2418, _2419));
        float _4373 = isnan(0.0) ? _2424 : (isnan(_2424) ? 0.0 : max(_2424, 0.0));
        float _2427 = isnan(1.0) ? _4373 : (isnan(_4373) ? 1.0 : min(_4373, 1.0));
        float _2428 = dot(vec3(cbLight._m0[_2390].xyz), vec3(_2417, _2418, _2419));
        float _4384 = isnan(0.0) ? _2428 : (isnan(_2428) ? 0.0 : max(_2428, 0.0));
        float _2432 = _2409 * _2409;
        float _2436 = ((_2427 * _2427) * (_2432 + (-1.0))) + 1.0;
        float _2445 = (exp2(log2(1.0 - (isnan(1.0) ? _4384 : (isnan(_4384) ? 1.0 : min(_4384, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2446 = 1.0 - _2409;
        float _2456 = (0.5 / (((_2200 * ((_2423 * _2446) + _2409)) + 9.9999999392252902907785028219223e-09) + (((_2200 * _2446) + _2409) * _2423))) * _2423;
        float _4395 = isnan(0.0) ? _2456 : (isnan(_2456) ? 0.0 : max(_2456, 0.0));
        float _2458 = (isnan(1.0) ? _4395 : (isnan(_4395) ? 1.0 : min(_4395, 1.0))) * (_2432 / ((_2436 * _2436) * 3.141590118408203125));
        float _2459 = isnan(1.0) ? _2050 : (isnan(_2050) ? 1.0 : min(_2050, 1.0));
        _2384 = (((_2445 * cbLight._m0[_2394].x) * _2458) * _2459) + _2320;
        _2386 = (((_2445 * cbLight._m0[_2394].y) * _2458) * _2459) + _2321;
        _2388 = (((_2445 * cbLight._m0[_2394].z) * _2458) * _2459) + _2322;
    }
    float _2494;
    float _2496;
    float _2498;
    if (_2126)
    {
        _2494 = _2384;
        _2496 = _2386;
        _2498 = _2388;
    }
    else
    {
        uint _2505 = _2035 + 3u;
        uint _2509 = _2035 + 11u;
        float _2523 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2505].w)) * _856) * 0.949999988079071044921875);
        float _2524 = _2523 * _2523;
        float _2525 = cbLight._m0[_2505].x + _932;
        float _2526 = cbLight._m0[_2505].y + _933;
        float _2527 = cbLight._m0[_2505].z + _934;
        float _2531 = inversesqrt(dot(vec3(_2525, _2526, _2527), vec3(_2525, _2526, _2527)));
        float _2532 = _2531 * _2525;
        float _2533 = _2531 * _2526;
        float _2534 = _2531 * _2527;
        float _2535 = dot(vec3(_853, _854, _855), vec3(cbLight._m0[_2505].xyz));
        float _4411 = isnan(0.0) ? _2535 : (isnan(_2535) ? 0.0 : max(_2535, 0.0));
        float _2538 = isnan(1.0) ? _4411 : (isnan(_4411) ? 1.0 : min(_4411, 1.0));
        float _2539 = dot(vec3(_853, _854, _855), vec3(_2532, _2533, _2534));
        float _4422 = isnan(0.0) ? _2539 : (isnan(_2539) ? 0.0 : max(_2539, 0.0));
        float _2542 = isnan(1.0) ? _4422 : (isnan(_4422) ? 1.0 : min(_4422, 1.0));
        float _2543 = dot(vec3(cbLight._m0[_2505].xyz), vec3(_2532, _2533, _2534));
        float _4433 = isnan(0.0) ? _2543 : (isnan(_2543) ? 0.0 : max(_2543, 0.0));
        float _2547 = _2524 * _2524;
        float _2551 = ((_2542 * _2542) * (_2547 + (-1.0))) + 1.0;
        float _2560 = (exp2(log2(1.0 - (isnan(1.0) ? _4433 : (isnan(_4433) ? 1.0 : min(_4433, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2561 = 1.0 - _2524;
        float _2571 = (0.5 / (((_2200 * ((_2538 * _2561) + _2524)) + 9.9999999392252902907785028219223e-09) + (((_2200 * _2561) + _2524) * _2538))) * _2538;
        float _4444 = isnan(0.0) ? _2571 : (isnan(_2571) ? 0.0 : max(_2571, 0.0));
        float _2573 = (isnan(1.0) ? _4444 : (isnan(_4444) ? 1.0 : min(_4444, 1.0))) * (_2547 / ((_2551 * _2551) * 3.141590118408203125));
        float _2574 = isnan(1.0) ? _2051 : (isnan(_2051) ? 1.0 : min(_2051, 1.0));
        _2494 = (((_2560 * cbLight._m0[_2509].x) * _2573) * _2574) + _2384;
        _2496 = (((_2560 * cbLight._m0[_2509].y) * _2573) * _2574) + _2386;
        _2498 = (((_2560 * cbLight._m0[_2509].z) * _2573) * _2574) + _2388;
    }
    float _2709;
    float _2711;
    float _2713;
    float _2715;
    float _2717;
    float _2719;
    if (_2033.y == 0u)
    {
        float _2649 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2650 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2649;
        float _2651 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2649;
        float _2652 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2649;
        uvec4 _2664 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2665 = _2664.x;
        uint _2676 = uint((float(_2664.y) * floor(float(uint(cbSceneParam._m0[85u].y * _941) / _2665))) + floor(float(uint(cbSceneParam._m0[85u].x * _940) / _2665)));
        float _2686 = (log2(_2652 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2687 = isnan(0.0) ? _2686 : (isnan(_2686) ? 0.0 : max(_2686, 0.0));
        uint _2690 = uint(isnan(14.0) ? _2687 : (isnan(_2687) ? 14.0 : min(_2687, 14.0)));
        uvec4 _2695 = texelFetch(g_lightClusterGridBuffer, int(((_2690 << 2u) + (_2676 << 6u)) >> 2u));
        uint _2696 = _2695.x;
        uint _2697 = _2664.z;
        float _2797;
        float _2799;
        float _2801;
        float _2803;
        float _2805;
        float _2807;
        if (((((1u << ((_2697 >> 4u) & 15u)) + 4294967295u) & _2696) == 0u) || ((_2697 & 240u) == 0u))
        {
            _2797 = 0.0;
            _2799 = 0.0;
            _2801 = 0.0;
            _2803 = 0.0;
            _2805 = 0.0;
            _2807 = 0.0;
        }
        else
        {
            float _2798;
            float _2800;
            float _2802;
            float _2804;
            float _2806;
            float _2808;
            float _2942 = 0.0;
            float _2943 = 0.0;
            float _2944 = 0.0;
            float _2945 = 0.0;
            float _2946 = 0.0;
            float _2947 = 0.0;
            uint _2948 = 0u;
            uint _2957;
            bool _2958;
            for (;;)
            {
                _2957 = texelFetch(g_lightClassification, int((((_2690 << 5u) + (_2676 << 9u)) + (_2948 << 2u)) >> 2u)).x;
                _2958 = _2957 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2958)
                {
                    frontier_phi_61_pred = _2942;
                    frontier_phi_61_pred_1 = _2947;
                    frontier_phi_61_pred_2 = _2946;
                    frontier_phi_61_pred_3 = _2945;
                    frontier_phi_61_pred_4 = _2944;
                    frontier_phi_61_pred_5 = _2943;
                }
                else
                {
                    float _3066;
                    float _3067;
                    float _3068;
                    float _3069;
                    float _3070;
                    float _3071;
                    uint _3072;
                    _3066 = _2942;
                    _3067 = _2943;
                    _3068 = _2944;
                    _3069 = _2945;
                    _3070 = _2946;
                    _3071 = _2947;
                    _3072 = _2957;
                    float _2998;
                    float _2999;
                    float _3000;
                    float _3001;
                    float _3002;
                    float _3003;
                    for (;;)
                    {
                        uint _3076 = uint(findLSB(_3072)) + (_2948 << 5u);
                        uint _3073 = (_3072 + 4294967295u) & _3072;
                        uint _3078 = _3076 * 48u;
                        vec4 _3092 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3078)).x, texelFetch(g_PointLightRenderingBuffer, int(_3078 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3078 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3078 + 3u)).x));
                        uint _3098 = (_3076 * 48u) + 4u;
                        vec4 _3111 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3098)).x, texelFetch(g_PointLightRenderingBuffer, int(_3098 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3098 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3098 + 3u)).x));
                        uint _3117 = (_3076 * 48u) + 8u;
                        vec3 _3128 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3117)).x, texelFetch(g_PointLightRenderingBuffer, int(_3117 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3117 + 2u)).x));
                        float _3132 = _3092.x - _2650;
                        float _3133 = _3092.y - _2651;
                        float _3134 = _3092.z - _2652;
                        float _3135 = dot(vec3(_3132, _3133, _3134), vec3(_3132, _3133, _3134));
                        float _3138 = inversesqrt(_3135);
                        float _3139 = _3138 * _3132;
                        float _3140 = _3138 * _3133;
                        float _3141 = _3138 * _3134;
                        float _3142 = dot(vec3(_959, _962, _965), vec3(_3139, _3140, _3141));
                        float _3147 = 1.0 - (_3135 * _3092.w);
                        float _4470 = isnan(0.0) ? _3147 : (isnan(_3147) ? 0.0 : max(_3147, 0.0));
                        float _3148 = isnan(1.0) ? _4470 : (isnan(_4470) ? 1.0 : min(_4470, 1.0));
                        float _3149 = sqrt(_3135) * _3111.w;
                        float _3152 = 1.39999997615814208984375 / (_3149 + 1.39999997615814208984375);
                        float _3153 = _3152 * _3152;
                        float _3156 = ((1.0 - _3153) * _3142) + _3153;
                        float _3159 = _3149 * _3149;
                        float _3163 = ((isnan(0.0) ? _3156 : (isnan(_3156) ? 0.0 : max(_3156, 0.0))) * _3148) / ((_3159 * 0.699999988079071044921875) + 1.0);
                        float _3167 = (-0.0) - _2650;
                        float _3168 = (-0.0) - _2651;
                        float _3169 = (-0.0) - _2652;
                        float _3173 = inversesqrt(dot(vec3(_3167, _3168, _3169), vec3(_3167, _3168, _3169)));
                        float _3174 = _3173 * _3167;
                        float _3175 = _3173 * _3168;
                        float _3176 = _3173 * _3169;
                        float _3184 = exp2(log2(1.0 / ((_3159 * 3.5) + 5.0)) * 0.25);
                        float _3185 = 1.0 - _1019;
                        float _3192 = sqrt(1.0 - ((1.0 - (_3185 * _3185)) * (1.0 - (_3184 * _3184))));
                        float _3193 = _3192 * _3192;
                        float _3194 = _3193 * _3193;
                        float _3195 = _3174 + _3139;
                        float _3196 = _3175 + _3140;
                        float _3197 = _3176 + _3141;
                        float _3201 = inversesqrt(dot(vec3(_3195, _3196, _3197), vec3(_3195, _3196, _3197)));
                        float _3205 = dot(vec3(_959, _962, _965), vec3(_3174, _3175, _3176));
                        float _4486 = isnan(0.0) ? _3205 : (isnan(_3205) ? 0.0 : max(_3205, 0.0));
                        float _3208 = isnan(1.0) ? _4486 : (isnan(_4486) ? 1.0 : min(_4486, 1.0));
                        float _3209 = dot(vec3(_959, _962, _965), vec3(_3201 * _3195, _3201 * _3196, _3201 * _3197));
                        float _4497 = isnan(0.0) ? _3209 : (isnan(_3209) ? 0.0 : max(_3209, 0.0));
                        float _3212 = isnan(1.0) ? _4497 : (isnan(_4497) ? 1.0 : min(_4497, 1.0));
                        float _3216 = ((_3212 * _3212) * (_3194 + (-1.0))) + 1.0;
                        float _3217 = _3152 * _3193;
                        float _3218 = _3217 * _3217;
                        float _3221 = ((1.0 - _3218) * _3142) + _3218;
                        float _4508 = isnan(0.0) ? _3221 : (isnan(_3221) ? 0.0 : max(_3221, 0.0));
                        float _3222 = isnan(1.0) ? _4508 : (isnan(_4508) ? 1.0 : min(_4508, 1.0));
                        float _3223 = 1.0 - _3193;
                        float _3233 = (0.5 / (((_3222 * ((_3208 * _3223) + _3193)) + 9.9999999392252902907785028219223e-09) + (((_3222 * _3223) + _3193) * _3208))) * _3222;
                        float _4519 = isnan(0.0) ? _3233 : (isnan(_3233) ? 0.0 : max(_3233, 0.0));
                        float _3244 = (((_3194 * 3.1415927410125732421875) * (isnan(1.0) ? _4519 : (isnan(_4519) ? 1.0 : min(_4519, 1.0)))) / ((_3216 * _3216) * ((_3159 * 2.1991131305694580078125) + 3.141590118408203125))) * _3148;
                        _3001 = (_3163 * _3111.x) + _3069;
                        _3002 = (_3163 * _3111.y) + _3070;
                        _3003 = (_3163 * _3111.z) + _3071;
                        _2998 = (_3244 * _3128.x) + _3066;
                        _2999 = (_3244 * _3128.y) + _3067;
                        _3000 = (_3244 * _3128.z) + _3068;
                        if (_3073 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3066 = _2998;
                            _3067 = _2999;
                            _3068 = _3000;
                            _3069 = _3001;
                            _3070 = _3002;
                            _3071 = _3003;
                            _3072 = _3073;
                        }
                    }
                    frontier_phi_61_pred = _2998;
                    frontier_phi_61_pred_1 = _3003;
                    frontier_phi_61_pred_2 = _3002;
                    frontier_phi_61_pred_3 = _3001;
                    frontier_phi_61_pred_4 = _3000;
                    frontier_phi_61_pred_5 = _2999;
                }
                _2798 = frontier_phi_61_pred;
                _2808 = frontier_phi_61_pred_1;
                _2806 = frontier_phi_61_pred_2;
                _2804 = frontier_phi_61_pred_3;
                _2802 = frontier_phi_61_pred_4;
                _2800 = frontier_phi_61_pred_5;
                uint _2949 = _2948 + 1u;
                if (_2949 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2942 = _2798;
                    _2943 = _2800;
                    _2944 = _2802;
                    _2945 = _2804;
                    _2946 = _2806;
                    _2947 = _2808;
                    _2948 = _2949;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2797 = _2798;
            _2799 = _2800;
            _2801 = _2802;
            _2803 = _2804;
            _2805 = _2806;
            _2807 = _2808;
        }
        uvec4 _2811 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2812 = _2811.z;
        uint _2814 = (_2812 >> 8u) & 15u;
        float _2910;
        float _2912;
        float _2914;
        float _2916;
        float _2918;
        float _2920;
        if (((4294967295u << _2814) & _2696) == 0u)
        {
            _2910 = _2797;
            _2912 = _2799;
            _2914 = _2801;
            _2916 = _2803;
            _2918 = _2805;
            _2920 = _2807;
        }
        else
        {
            float _2935 = inversesqrt(dot(vec3(_2650, _2651, _2652), vec3(_2650, _2651, _2652)));
            float _2936 = _2935 * _2650;
            float _2937 = _2935 * _2651;
            float _2938 = _2935 * _2652;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2814 < ((_2812 >> 12u) & 15u))
            {
                float _2911;
                float _2913;
                float _2915;
                float _2917;
                float _2919;
                float _2921;
                float _3049 = _2797;
                float _3050 = _2799;
                float _3051 = _2801;
                float _3052 = _2803;
                float _3053 = _2805;
                float _3054 = _2807;
                uint _3055 = _2814;
                uint _3064;
                bool _3065;
                for (;;)
                {
                    _3064 = texelFetch(g_lightClassification, int((((_2690 << 5u) + (_2676 << 9u)) + (_3055 << 2u)) >> 2u)).x;
                    _3065 = _3064 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_3065)
                    {
                        frontier_phi_67_pred = _3052;
                        frontier_phi_67_pred_1 = _3053;
                        frontier_phi_67_pred_2 = _3054;
                        frontier_phi_67_pred_3 = _3051;
                        frontier_phi_67_pred_4 = _3050;
                        frontier_phi_67_pred_5 = _3049;
                    }
                    else
                    {
                        float _3249;
                        float _3250;
                        float _3251;
                        float _3252;
                        float _3253;
                        float _3254;
                        float _3542;
                        float _3543;
                        float _3544;
                        float _3545;
                        float _3546;
                        float _3547;
                        float _3262 = _3049;
                        float _3263 = _3050;
                        float _3264 = _3051;
                        float _3265 = _3052;
                        float _3266 = _3053;
                        float _3267 = _3054;
                        uint _3268 = _3064;
                        uint _3269;
                        vec4 _3294;
                        float _3295;
                        vec4 _3310;
                        vec3 _3322;
                        vec4 _3337;
                        vec4 _3352;
                        float _3398;
                        bool _3399;
                        for (;;)
                        {
                            uint _3279 = ((_3055 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3268));
                            _3269 = (_3268 + 4294967295u) & _3268;
                            uint _3281 = _3279 * 40u;
                            _3294 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3281)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3281 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3281 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3281 + 3u)).x));
                            _3295 = _3294.w;
                            uint _3297 = (_3279 * 40u) + 4u;
                            _3310 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3297)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3297 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3297 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3297 + 3u)).x));
                            uint _3312 = (_3279 * 40u) + 8u;
                            _3322 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3312)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3312 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3312 + 2u)).x));
                            uint _3324 = (_3279 * 40u) + 16u;
                            _3337 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3324)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3324 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3324 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3324 + 3u)).x));
                            uint _3339 = (_3279 * 40u) + 20u;
                            _3352 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3339)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3339 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3339 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3339 + 3u)).x));
                            uint _3354 = (_3279 * 40u) + 24u;
                            vec4 _3367 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3354)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3354 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3354 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3354 + 3u)).x));
                            uint _3373 = (_3279 * 40u) + 28u;
                            vec4 _3386 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3373)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3373 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3373 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3373 + 3u)).x));
                            _3398 = fma(_2652, _3386.z, fma(_2651, _3386.y, _3386.x * _2650)) + _3386.w;
                            _3399 = !((fma(_2652, _3367.z, fma(_2651, _3367.y, _3367.x * _2650)) + _3367.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3399)
                            {
                                float _3426 = _3294.x - _2650;
                                float _3427 = _3294.y - _2651;
                                float _3428 = _3294.z - _2652;
                                float _3429 = dot(vec3(_3426, _3427, _3428), vec3(_3426, _3427, _3428));
                                float _3432 = inversesqrt(_3429);
                                float _3433 = _3432 * _3426;
                                float _3434 = _3432 * _3427;
                                float _3435 = _3432 * _3428;
                                float _3439 = 1.0 - (_3429 / (_3295 * _3295));
                                float _4530 = isnan(0.0) ? _3439 : (isnan(_3439) ? 0.0 : max(_3439, 0.0));
                                float _3440 = isnan(1.0) ? _4530 : (isnan(_4530) ? 1.0 : min(_4530, 1.0));
                                float _3444 = sqrt(_3429) * _3310.w;
                                float _3446 = 1.39999997615814208984375 / (_3444 + 1.39999997615814208984375);
                                float _3447 = _3446 * _3446;
                                float _3450 = ((1.0 - _3447) * dot(vec3(_3433, _3434, _3435), vec3(_959, _962, _965))) + _3447;
                                float _3453 = _3444 * _3444;
                                float _3457 = (fma(_2652, _3337.z, fma(_2651, _3337.y, _3337.x * _2650)) + _3337.w) / _3398;
                                float _3458 = (fma(_2652, _3352.z, fma(_2651, _3352.y, _3352.x * _2650)) + _3352.w) / _3398;
                                float _3462 = 1.0 - dot(vec2(_3457, _3458), vec2(_3457, _3458));
                                float _4546 = isnan(0.0) ? _3462 : (isnan(_3462) ? 0.0 : max(_3462, 0.0));
                                float _3463 = isnan(1.0) ? _4546 : (isnan(_4546) ? 1.0 : min(_4546, 1.0));
                                float _3464 = _3463 * (((isnan(0.0) ? _3450 : (isnan(_3450) ? 0.0 : max(_3450, 0.0))) * _3440) / ((_3453 * 0.699999988079071044921875) + 1.0));
                                float _3476 = exp2(log2(1.0 / ((_3453 * 3.5) + 5.0)) * 0.25);
                                float _3477 = 1.0 - _1019;
                                float _3484 = sqrt(1.0 - ((1.0 - (_3477 * _3477)) * (1.0 - (_3476 * _3476))));
                                float _3485 = _3484 * _3484;
                                float _3486 = _3485 * _3485;
                                float _3487 = _3433 - _2936;
                                float _3488 = _3434 - _2937;
                                float _3489 = _3435 - _2938;
                                float _3493 = inversesqrt(dot(vec3(_3487, _3488, _3489), vec3(_3487, _3488, _3489)));
                                float _3497 = dot(vec3(_959, _962, _965), vec3((-0.0) - _2936, (-0.0) - _2937, (-0.0) - _2938));
                                float _4557 = isnan(0.0) ? _3497 : (isnan(_3497) ? 0.0 : max(_3497, 0.0));
                                float _3500 = isnan(1.0) ? _4557 : (isnan(_4557) ? 1.0 : min(_4557, 1.0));
                                float _3501 = dot(vec3(_959, _962, _965), vec3(_3493 * _3487, _3493 * _3488, _3493 * _3489));
                                float _4568 = isnan(0.0) ? _3501 : (isnan(_3501) ? 0.0 : max(_3501, 0.0));
                                float _3504 = isnan(1.0) ? _4568 : (isnan(_4568) ? 1.0 : min(_4568, 1.0));
                                float _3508 = ((_3504 * _3504) * (_3486 + (-1.0))) + 1.0;
                                float _3509 = _3446 * _3485;
                                float _3510 = _3509 * _3509;
                                float _3516 = ((1.0 - _3510) * dot(vec3(_959, _962, _965), vec3(_3433, _3434, _3435))) + _3510;
                                float _4579 = isnan(0.0) ? _3516 : (isnan(_3516) ? 0.0 : max(_3516, 0.0));
                                float _3517 = isnan(1.0) ? _4579 : (isnan(_4579) ? 1.0 : min(_4579, 1.0));
                                float _3518 = 1.0 - _3485;
                                float _3528 = (0.5 / (((_3517 * ((_3500 * _3518) + _3485)) + 9.9999999392252902907785028219223e-09) + (((_3517 * _3518) + _3485) * _3500))) * _3517;
                                float _4590 = isnan(0.0) ? _3528 : (isnan(_3528) ? 0.0 : max(_3528, 0.0));
                                float _3538 = (_3463 * _3440) * (((_3486 * 3.1415927410125732421875) * (isnan(1.0) ? _4590 : (isnan(_4590) ? 1.0 : min(_4590, 1.0)))) / ((_3508 * _3508) * ((_3453 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3538 * _3322.x;
                                frontier_phi_73_pred_1 = _3538 * _3322.y;
                                frontier_phi_73_pred_2 = _3464 * _3310.z;
                                frontier_phi_73_pred_3 = _3464 * _3310.y;
                                frontier_phi_73_pred_4 = _3464 * _3310.x;
                                frontier_phi_73_pred_5 = _3538 * _3322.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3542 = frontier_phi_73_pred;
                            _3543 = frontier_phi_73_pred_1;
                            _3547 = frontier_phi_73_pred_2;
                            _3546 = frontier_phi_73_pred_3;
                            _3545 = frontier_phi_73_pred_4;
                            _3544 = frontier_phi_73_pred_5;
                            _3252 = _3545 + _3265;
                            _3253 = _3546 + _3266;
                            _3254 = _3547 + _3267;
                            _3249 = _3542 + _3262;
                            _3250 = _3543 + _3263;
                            _3251 = _3544 + _3264;
                            if (_3269 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3262 = _3249;
                                _3263 = _3250;
                                _3264 = _3251;
                                _3265 = _3252;
                                _3266 = _3253;
                                _3267 = _3254;
                                _3268 = _3269;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3252;
                        frontier_phi_67_pred_1 = _3253;
                        frontier_phi_67_pred_2 = _3254;
                        frontier_phi_67_pred_3 = _3251;
                        frontier_phi_67_pred_4 = _3250;
                        frontier_phi_67_pred_5 = _3249;
                    }
                    _2917 = frontier_phi_67_pred;
                    _2919 = frontier_phi_67_pred_1;
                    _2921 = frontier_phi_67_pred_2;
                    _2915 = frontier_phi_67_pred_3;
                    _2913 = frontier_phi_67_pred_4;
                    _2911 = frontier_phi_67_pred_5;
                    uint _3056 = _3055 + 1u;
                    if (_3056 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3049 = _2911;
                        _3050 = _2913;
                        _3051 = _2915;
                        _3052 = _2917;
                        _3053 = _2919;
                        _3054 = _2921;
                        _3055 = _3056;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2919;
                frontier_phi_55_56_ladder_1 = _2921;
                frontier_phi_55_56_ladder_2 = _2917;
                frontier_phi_55_56_ladder_3 = _2915;
                frontier_phi_55_56_ladder_4 = _2913;
                frontier_phi_55_56_ladder_5 = _2911;
            }
            else
            {
                frontier_phi_55_56_ladder = _2805;
                frontier_phi_55_56_ladder_1 = _2807;
                frontier_phi_55_56_ladder_2 = _2803;
                frontier_phi_55_56_ladder_3 = _2801;
                frontier_phi_55_56_ladder_4 = _2799;
                frontier_phi_55_56_ladder_5 = _2797;
            }
            _2910 = frontier_phi_55_56_ladder_5;
            _2912 = frontier_phi_55_56_ladder_4;
            _2914 = frontier_phi_55_56_ladder_3;
            _2916 = frontier_phi_55_56_ladder_2;
            _2918 = frontier_phi_55_56_ladder;
            _2920 = frontier_phi_55_56_ladder_1;
        }
        float _2925 = isnan(1.0) ? _1003 : (isnan(_1003) ? 1.0 : min(_1003, 1.0));
        _2709 = (_2925 * _2916) + _2164;
        _2711 = (_2925 * _2918) + _2166;
        _2713 = (_2925 * _2920) + _2168;
        _2715 = ((_2910 * 0.039999999105930328369140625) * _2925) + _2494;
        _2717 = ((_2912 * 0.039999999105930328369140625) * _2925) + _2496;
        _2719 = ((_2914 * 0.039999999105930328369140625) * _2925) + _2498;
    }
    else
    {
        _2709 = _2164;
        _2711 = _2166;
        _2713 = _2168;
        _2715 = _2494;
        _2717 = _2496;
        _2719 = _2498;
    }
    float _4606 = isnan(0.0) ? _988 : (isnan(_988) ? 0.0 : max(_988, 0.0));
    float _4617 = isnan(0.0) ? _989 : (isnan(_989) ? 0.0 : max(_989, 0.0));
    float _4628 = isnan(0.0) ? _990 : (isnan(_990) ? 0.0 : max(_990, 0.0));
    uint _2739 = _246 + 6u;
    float _2747 = _940 / cbSceneParam._m0[86u].x;
    float _2748 = _941 / cbSceneParam._m0[86u].y;
    vec4 _2762 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2747, _2748, (log2((isnan(cbSceneParam._m0[77u].w) ? _874 : (isnan(_874) ? cbSceneParam._m0[77u].w : min(_874, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2764 = _2762.x;
    float _2765 = _2762.y;
    float _2766 = _2762.z;
    float _2767 = _2762.w;
    float _2860;
    float _2862;
    float _2864;
    float _2866;
    if (_874 > cbSceneParam._m0[78u].w)
    {
        float _2822 = isnan(_874) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _874 : min(cbSceneParam._m0[80u].w, _874));
        float _2823 = _2822 / _874;
        float _2834 = _2823 * _925;
        float _2835 = _926 * _2823;
        float _2836 = (-0.0) - _2835;
        float _2838 = _2823 * _927;
        float _2840 = (cbSceneParam._m0[77u].w * _2836) / _2822;
        float _2841 = _2840 + cbSceneParam._m0[79u].w;
        float _2842 = cbSceneParam._m0[79u].w - _2835;
        float _2848 = sqrt(((_2834 * _2834) + (_2835 * _2835)) + (_2838 * _2838));
        float _2851 = (1.0 - (cbSceneParam._m0[77u].w / _2822)) * _2848;
        float _2856 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2858 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3011;
        if (abs((_2836 - _2840) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3011 = ((((_2841 > 0.0) ? exp2(_2856 * _2841) : (2.0 - exp2(_2858 * _2841))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2851;
        }
        else
        {
            float _2971 = 1.0 / cbSceneParam._m0[80u].x;
            float _2972 = isnan(_2842) ? _2841 : (isnan(_2841) ? _2842 : max(_2841, _2842));
            float _2973 = isnan(_2842) ? _2841 : (isnan(_2841) ? _2842 : min(_2841, _2842));
            float _2982 = isnan(0.0) ? _2972 : (isnan(_2972) ? 0.0 : min(_2972, 0.0));
            float _2983 = isnan(0.0) ? _2973 : (isnan(_2973) ? 0.0 : min(_2973, 0.0));
            _3011 = ((abs(_2848 / _2836) * cbSceneParam._m0[80u].y) * ((((_2982 - _2983) * 2.0) - ((exp2(_2856 * (isnan(0.0) ? _2972 : (isnan(_2972) ? 0.0 : max(_2972, 0.0)))) - exp2(_2856 * (isnan(0.0) ? _2973 : (isnan(_2973) ? 0.0 : max(_2973, 0.0))))) * _2971)) - ((exp2(_2858 * _2982) - exp2(_2858 * _2983)) * _2971))) + (_2851 * cbSceneParam._m0[80u].z);
        }
        vec4 _3013 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2747, _2748, 1.0), 0.0);
        float _3022 = exp2((_3011 * (-1.44269502162933349609375)) * (1.0 - _3013.w));
        float _3023 = log2(_3022);
        float _3039 = log2(_2767);
        _2860 = (exp2(_3039 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3023 * cbSceneParam._m0[78u].x)) * _3013.x) / cbSceneParam._m0[78u].x)) + _2764;
        _2862 = (exp2(_3039 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3023 * cbSceneParam._m0[78u].y)) * _3013.y) / cbSceneParam._m0[78u].y)) + _2765;
        _2864 = (exp2(_3039 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3023 * cbSceneParam._m0[78u].z)) * _3013.z) / cbSceneParam._m0[78u].z)) + _2766;
        _2866 = _3022 * _2767;
    }
    else
    {
        _2860 = _2764;
        _2862 = _2765;
        _2864 = _2766;
        _2866 = _2767;
    }
    float _2878 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2879 = _2878 == 3.0;
    float _2880 = log2(_2866);
    float _2887 = exp2(_2880 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4606 : (isnan(_4606) ? 1.0 : min(_4606, 1.0))) * (_2709 + ((isnan(0.0) ? _1727 : (isnan(_1727) ? 0.0 : max(_1727, 0.0))) * _1003))) + ((_2715 + ((isnan(0.0) ? _2017 : (isnan(_2017) ? 0.0 : max(_2017, 0.0))) * _1806)) * cbPerFrame._m0[3u].x));
    float _2888 = exp2(_2880 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4617 : (isnan(_4617) ? 1.0 : min(_4617, 1.0))) * (_2711 + ((isnan(0.0) ? _1730 : (isnan(_1730) ? 0.0 : max(_1730, 0.0))) * _1003))) + ((_2717 + ((isnan(0.0) ? _2020 : (isnan(_2020) ? 0.0 : max(_2020, 0.0))) * _1806)) * cbPerFrame._m0[3u].x));
    float _2889 = exp2(_2880 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4628 : (isnan(_4628) ? 1.0 : min(_4628, 1.0))) * (_2713 + ((isnan(0.0) ? _1733 : (isnan(_1733) ? 0.0 : max(_1733, 0.0))) * _1003))) + ((_2719 + ((isnan(0.0) ? _2023 : (isnan(_2023) ? 0.0 : max(_2023, 0.0))) * _1806)) * cbPerFrame._m0[3u].x));
    float _2898 = (_2878 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2898 * (_2879 ? _2887 : (_2887 + (cbSceneParam._m0[72u].w * _2860)));
    SV_Target.y = _2898 * (_2879 ? _2888 : (_2888 + (cbSceneParam._m0[72u].w * _2862)));
    SV_Target.z = _2898 * (_2879 ? _2889 : (_2889 + (cbSceneParam._m0[72u].w * _2864)));
    SV_Target.w = cbInstanceData._m0[_2739].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2739].w;
}


