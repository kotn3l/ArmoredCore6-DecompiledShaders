#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_29;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_6;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1175;
float _3821;
float _3822;
float _3823;
float _3824;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _219 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _220 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _221 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _227 = inversesqrt(dot(vec3(_219, _220, _221), vec3(_219, _220, _221)));
    float _234 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _241 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _247 = uint(roundEven(NORMAL.w)) * 13u;
    uint _252 = _247 + 1u;
    uint _256 = _247 + 2u;
    float _265 = sqrt(((cbInstanceData._m0[_252].x * cbInstanceData._m0[_252].x) + (cbInstanceData._m0[_247].x * cbInstanceData._m0[_247].x)) + (cbInstanceData._m0[_256].x * cbInstanceData._m0[_256].x));
    float _266 = _265 * TEXCOORD.z;
    float _267 = _265 * TEXCOORD.w;
    vec4 _287 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _293 = _287.x * cbMtdParam._m0[11u].x;
    float _294 = _287.y * cbMtdParam._m0[11u].y;
    float _295 = _287.z * cbMtdParam._m0[11u].z;
    vec4 _314 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _266) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _267) + cbTextureTilingScale._m0[5u].w));
    vec4 _367 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _369 = _367.x;
    float _381 = dot(vec4(_369, _367.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _398 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w)).x) * 2.0) - ((((_369 - _381) * cbMtdParam._m0[24u].z) + _381) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3833 = isnan(0.0) ? _398 : (isnan(_398) ? 0.0 : max(_398, 0.0));
    float _399 = isnan(1.0) ? _3833 : (isnan(_3833) ? 1.0 : min(_3833, 1.0));
    float _406 = (_399 * ((_314.x * cbMtdParam._m0[12u].x) - _293)) + _293;
    float _407 = (_399 * ((_314.y * cbMtdParam._m0[12u].y) - _294)) + _294;
    float _408 = (_399 * ((_314.z * cbMtdParam._m0[12u].z) - _295)) + _295;
    vec4 _421 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _266) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _267) + cbTextureTilingScale._m0[4u].w));
    vec4 _438 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _440 = _438.x;
    float _441 = _438.y;
    float _442 = _438.z;
    float _451 = ((_421.z - _442) * _399) + _442;
    float _454 = ((((_421.x - _440) * _399) + _440) * 2.0) + (-1.0);
    float _456 = ((((_421.y - _441) * _399) + _441) * 2.0) + (-1.0);
    float _457 = dot(vec2(_454, _456), vec2(_454, _456));
    float _3844 = isnan(0.0) ? _457 : (isnan(_457) ? 0.0 : max(_457, 0.0));
    float _462 = sqrt(1.0 - (isnan(1.0) ? _3844 : (isnan(_3844) ? 1.0 : min(_3844, 1.0))));
    vec4 _478 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _490 = (((_478.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _454;
    float _491 = (((_478.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _456;
    vec4 _503 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _266) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _267) + cbTextureTilingScale._m0[19u].w));
    float _505 = _503.x;
    float _506 = 1.0 - _505;
    float _534 = (TEXCOORD_8.x - ((cbMtdParam._m0[22u].w * (1.0 - TEXCOORD_8.x)) * ((((_505 - _506) * cbMtdParam._m0[24u].y) + _506) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3855 = isnan(0.0) ? _534 : (isnan(_534) ? 0.0 : max(_534, 0.0));
    float _535 = isnan(1.0) ? _3855 : (isnan(_3855) ? 1.0 : min(_3855, 1.0));
    float _543 = ((((cbMtdParam._m0[10u].x - _406) * TEXCOORD_8.x) * cbMtdParam._m0[23u].w) * _535) + _406;
    float _544 = ((((cbMtdParam._m0[10u].y - _407) * TEXCOORD_8.y) * cbMtdParam._m0[23u].w) * _535) + _407;
    float _545 = (((cbMtdParam._m0[23u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _408)) * _535) + _408;
    float _549 = (cbMtdParam._m0[19u].w * (_478.z - _451)) + _451;
    float _553 = ((cbMtdParam._m0[23u].y - _549) * _535) + _549;
    vec4 _572 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _266) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _267) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _578 = (_572.x * 2.0) + (-1.0);
    float _579 = (_572.y * 2.0) + (-1.0);
    float _580 = dot(vec2(_578, _579), vec2(_578, _579));
    float _3866 = isnan(0.0) ? _580 : (isnan(_580) ? 0.0 : max(_580, 0.0));
    float _596 = (_535 * (((cbMtdParam._m0[22u].z * _490) - _490) + _578)) + _490;
    float _597 = (_535 * (((cbMtdParam._m0[22u].z * _491) - _491) + _579)) + _491;
    float _598 = (_535 * (sqrt(1.0 - (isnan(1.0) ? _3866 : (isnan(_3866) ? 1.0 : min(_3866, 1.0)))) - _462)) + _462;
    float _600 = cbMtdParam._m0[22u].x + _478.w;
    float _603 = fma(_598, _234 * NORMAL.x, fma(_597, _241 * TANGENT.x, (_227 * _219) * _596));
    float _606 = fma(_598, _234 * NORMAL.y, fma(_597, _241 * TANGENT.y, (_227 * _220) * _596));
    float _609 = fma(_598, _234 * NORMAL.z, fma(_597, _241 * TANGENT.z, (_227 * _221) * _596));
    float _613 = inversesqrt(dot(vec3(_603, _606, _609), vec3(_603, _606, _609)));
    float _614 = _613 * _603;
    float _615 = _613 * _606;
    float _616 = _613 * _609;
    float _3877 = isnan(0.0) ? _553 : (isnan(_553) ? 0.0 : max(_553, 0.0));
    float _617 = isnan(1.0) ? _3877 : (isnan(_3877) ? 1.0 : min(_3877, 1.0));
    float _3888 = isnan(0.0) ? _600 : (isnan(_600) ? 0.0 : max(_600, 0.0));
    float _3899 = isnan(0.0) ? _543 : (isnan(_543) ? 0.0 : max(_543, 0.0));
    float _3910 = isnan(0.0) ? _544 : (isnan(_544) ? 0.0 : max(_544, 0.0));
    float _3921 = isnan(0.0) ? _545 : (isnan(_545) ? 0.0 : max(_545, 0.0));
    float _635 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _676 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _686 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _676);
    float _687 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _676);
    float _688 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _676);
    float _692 = inversesqrt(dot(vec3(_686, _687, _688), vec3(_686, _687, _688)));
    float _693 = _686 * _692;
    float _694 = _687 * _692;
    float _695 = _688 * _692;
    vec4 _700 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _702 = _700.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _856 = sqrt(((_686 * _686) + (_687 * _687)) + (_688 * _688));
        float _862 = (cbMatDynParam._m0[5u].x * _856) + cbMatDynParam._m0[5u].y;
        float _3932 = isnan(0.0) ? _862 : (isnan(_862) ? 0.0 : max(_862, 0.0));
        float _863 = isnan(1.0) ? _3932 : (isnan(_3932) ? 1.0 : min(_3932, 1.0));
        float _867 = (cbMatDynParam._m0[5u].z * _856) + cbMatDynParam._m0[5u].w;
        float _3943 = isnan(0.0) ? _867 : (isnan(_867) ? 0.0 : max(_867, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3943 : (isnan(_3943) ? 1.0 : min(_3943, 1.0))) - _863)) + _863) < ((_702 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _713 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _714 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _732 = fma(_616, cbSceneParam._m0[5u].z, fma(_615, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _614));
    float _735 = fma(_616, cbSceneParam._m0[6u].z, fma(_615, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _614));
    float _738 = fma(_616, cbSceneParam._m0[7u].z, fma(_615, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _614));
    uint _751 = _247 + 9u;
    uint _752 = _751 + uint(cbMatDynParam._m0[0u].w);
    float _758 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3899 : (isnan(_3899) ? 1.0 : min(_3899, 1.0)))) * cbInstanceData._m0[_752].x;
    float _759 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3910 : (isnan(_3910) ? 1.0 : min(_3910, 1.0)))) * cbInstanceData._m0[_752].y;
    float _760 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3921 : (isnan(_3921) ? 1.0 : min(_3921, 1.0)))) * cbInstanceData._m0[_752].z;
    float _3954 = isnan(0.0) ? _758 : (isnan(_758) ? 0.0 : max(_758, 0.0));
    float _761 = isnan(1.0) ? _3954 : (isnan(_3954) ? 1.0 : min(_3954, 1.0));
    float _3965 = isnan(0.0) ? _759 : (isnan(_759) ? 0.0 : max(_759, 0.0));
    float _762 = isnan(1.0) ? _3965 : (isnan(_3965) ? 1.0 : min(_3965, 1.0));
    float _3976 = isnan(0.0) ? _760 : (isnan(_760) ? 0.0 : max(_760, 0.0));
    float _763 = isnan(1.0) ? _3976 : (isnan(_3976) ? 1.0 : min(_3976, 1.0));
    vec4 _772 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _713, cbSceneParam._m0[86u].y * _714));
    float _776 = ((isnan(1.0) ? _3888 : (isnan(_3888) ? 1.0 : min(_3888, 1.0))) * TEXCOORD_5.w) * _772.x;
    float _777 = dot(vec3(_614, _615, _616), vec3(_693, _694, _695));
    float _780 = _777 * 2.0;
    float _784 = (_780 * _614) - _693;
    float _785 = (_780 * _615) - _694;
    float _786 = (_780 * _616) - _695;
    float _790 = abs(dot(vec3(_693, _694, _695), vec3(_614, _615, _616)));
    float _3987 = isnan(0.0) ? _790 : (isnan(_790) ? 0.0 : max(_790, 0.0));
    float _792 = sqrt(_617);
    float _805 = exp2((_792 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3987 : (isnan(_3987) ? 1.0 : min(_3987, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_792 * 3.0));
    float _837 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _841 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _845 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1174;
    float _1176;
    float _1177;
    float _1178;
    float _1179;
    float _1180;
    float _1181;
    float _1182;
    float _1183;
    float _1184;
    float _1185;
    float _1186;
    float _1187;
    float _1188;
    float _1189;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _899 = fma(_845, cbModelParam._m0[26u].z, fma(_841, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _837));
        float _903 = fma(_845, cbModelParam._m0[27u].z, fma(_841, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _837));
        float _907 = fma(_845, cbModelParam._m0[28u].z, fma(_841, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _837));
        float _932 = _837 + _614;
        float _933 = _841 + _615;
        float _934 = _845 + _616;
        float _944 = fma(_934, cbModelParam._m0[26u].z, fma(_933, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _932)) - _899;
        float _945 = fma(_934, cbModelParam._m0[27u].z, fma(_933, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _932)) - _903;
        float _946 = fma(_934, cbModelParam._m0[28u].z, fma(_933, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _932)) - _907;
        float _950 = inversesqrt(dot(vec3(_944, _945, _946), vec3(_944, _945, _946)));
        float _963 = ((_950 * _944) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_899 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _964 = ((_950 * _945) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_903 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _965 = ((_950 * _946) / cbModelParam._m0[34u].z) + ((((((_907 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _968 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_963, _964, _965), 0.0);
        vec4 _975 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_963, _964, _965), 0.0);
        vec4 _982 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_963, _964, _965), 0.0);
        vec4 _989 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_963, _964, _965), 0.0);
        float _1002 = exp2((_968.w + (-0.5)) * 20.0) * 2.0;
        float _1003 = _1002 * (_968.x + (-0.5));
        float _1004 = _1002 * (_968.y + (-0.5));
        float _1005 = _1002 * (_968.z + (-0.5));
        float _1012 = exp2((_975.w + (-0.5)) * 20.0) * 2.0;
        float _1013 = _1012 * (_975.x + (-0.5));
        float _1014 = _1012 * (_975.y + (-0.5));
        float _1015 = _1012 * (_975.z + (-0.5));
        float _1022 = exp2((_982.w + (-0.5)) * 20.0) * 2.0;
        float _1023 = _1022 * (_982.x + (-0.5));
        float _1024 = _1022 * (_982.y + (-0.5));
        float _1025 = _1022 * (_982.z + (-0.5));
        float _1032 = exp2((_989.w + (-0.5)) * 20.0) * 2.0;
        float _1033 = _1032 * (_989.x + (-0.5));
        float _1034 = _1032 * (_989.y + (-0.5));
        float _1035 = _1032 * (_989.z + (-0.5));
        float _1036 = isnan(0.0) ? _1033 : (isnan(_1033) ? 0.0 : max(_1033, 0.0));
        float _1037 = isnan(0.0) ? _1034 : (isnan(_1034) ? 0.0 : max(_1034, 0.0));
        float _1038 = isnan(0.0) ? _1035 : (isnan(_1035) ? 0.0 : max(_1035, 0.0));
        float _1039 = _1003 * 0.5;
        float _1040 = _1013 * 0.5;
        float _1041 = _1023 * 0.5;
        float _1042 = dot(vec3(_1039, _1040, _1041), vec3(_1039, _1040, _1041));
        float _1047 = (_1042 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1042);
        float _1056 = (dot(vec3(_614, _615, _616), vec3(_1047 * _1039, _1047 * _1040, _1047 * _1041)) + 1.0) * 0.5;
        float _4013 = isnan(0.0) ? _1056 : (isnan(_1056) ? 0.0 : max(_1056, 0.0));
        float _1066 = sqrt(((_1040 * _1040) + (_1039 * _1039)) + (_1041 * _1041)) / (_1036 + 9.9999997473787516355514526367188e-06);
        float _4024 = isnan(0.0) ? _1066 : (isnan(_1066) ? 0.0 : max(_1066, 0.0));
        float _1067 = isnan(1.0) ? _4024 : (isnan(_4024) ? 1.0 : min(_4024, 1.0));
        float _1068 = _1067 * 2.0;
        float _1072 = (1.0 - _1067) / (_1067 + 1.0);
        float _4035 = isnan(0.0) ? _1072 : (isnan(_1072) ? 0.0 : max(_1072, 0.0));
        float _1073 = isnan(1.0) ? _4035 : (isnan(_4035) ? 1.0 : min(_4035, 1.0));
        float _1082 = ((((1.0 - _1073) * (_1068 + 2.0)) * exp2(log2(isnan(1.0) ? _4013 : (isnan(_4013) ? 1.0 : min(_4013, 1.0))) * (_1068 + 1.0))) + _1073) * _1036;
        float _1083 = _1004 * 0.5;
        float _1084 = _1014 * 0.5;
        float _1085 = _1024 * 0.5;
        float _1086 = dot(vec3(_1083, _1084, _1085), vec3(_1083, _1084, _1085));
        float _1091 = (_1086 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1086);
        float _1099 = (dot(vec3(_614, _615, _616), vec3(_1091 * _1083, _1091 * _1084, _1091 * _1085)) + 1.0) * 0.5;
        float _4046 = isnan(0.0) ? _1099 : (isnan(_1099) ? 0.0 : max(_1099, 0.0));
        float _1108 = sqrt(((_1084 * _1084) + (_1083 * _1083)) + (_1085 * _1085)) / (_1037 + 9.9999997473787516355514526367188e-06);
        float _4057 = isnan(0.0) ? _1108 : (isnan(_1108) ? 0.0 : max(_1108, 0.0));
        float _1109 = isnan(1.0) ? _4057 : (isnan(_4057) ? 1.0 : min(_4057, 1.0));
        float _1110 = _1109 * 2.0;
        float _1114 = (1.0 - _1109) / (_1109 + 1.0);
        float _4068 = isnan(0.0) ? _1114 : (isnan(_1114) ? 0.0 : max(_1114, 0.0));
        float _1115 = isnan(1.0) ? _4068 : (isnan(_4068) ? 1.0 : min(_4068, 1.0));
        float _1124 = ((((1.0 - _1115) * (_1110 + 2.0)) * exp2(log2(isnan(1.0) ? _4046 : (isnan(_4046) ? 1.0 : min(_4046, 1.0))) * (_1110 + 1.0))) + _1115) * _1037;
        float _1125 = _1005 * 0.5;
        float _1126 = _1015 * 0.5;
        float _1127 = _1025 * 0.5;
        float _1128 = dot(vec3(_1125, _1126, _1127), vec3(_1125, _1126, _1127));
        float _1133 = (_1128 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1128);
        float _1141 = (dot(vec3(_614, _615, _616), vec3(_1133 * _1125, _1133 * _1126, _1133 * _1127)) + 1.0) * 0.5;
        float _4079 = isnan(0.0) ? _1141 : (isnan(_1141) ? 0.0 : max(_1141, 0.0));
        float _1150 = sqrt(((_1126 * _1126) + (_1125 * _1125)) + (_1127 * _1127)) / (_1038 + 9.9999997473787516355514526367188e-06);
        float _4090 = isnan(0.0) ? _1150 : (isnan(_1150) ? 0.0 : max(_1150, 0.0));
        float _1151 = isnan(1.0) ? _4090 : (isnan(_4090) ? 1.0 : min(_4090, 1.0));
        float _1152 = _1151 * 2.0;
        float _1156 = (1.0 - _1151) / (_1151 + 1.0);
        float _4101 = isnan(0.0) ? _1156 : (isnan(_1156) ? 0.0 : max(_1156, 0.0));
        float _1157 = isnan(1.0) ? _4101 : (isnan(_4101) ? 1.0 : min(_4101, 1.0));
        float _1166 = ((((1.0 - _1157) * (_1152 + 2.0)) * exp2(log2(isnan(1.0) ? _4079 : (isnan(_4079) ? 1.0 : min(_4079, 1.0))) * (_1152 + 1.0))) + _1157) * _1038;
        _1174 = _1005;
        _1176 = _1004;
        _1177 = _1003;
        _1178 = _1015;
        _1179 = _1014;
        _1180 = _1013;
        _1181 = _1025;
        _1182 = _1024;
        _1183 = _1023;
        _1184 = _1038;
        _1185 = _1037;
        _1186 = _1036;
        _1187 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1082 : (isnan(_1082) ? 0.0 : max(_1082, 0.0)));
        _1188 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1124 : (isnan(_1124) ? 0.0 : max(_1124, 0.0)));
        _1189 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1166 : (isnan(_1166) ? 0.0 : max(_1166, 0.0)));
    }
    else
    {
        _1174 = _1175;
        _1176 = _1175;
        _1177 = _1175;
        _1178 = _1175;
        _1179 = _1175;
        _1180 = _1175;
        _1181 = _1175;
        _1182 = _1175;
        _1183 = _1175;
        _1184 = _1175;
        _1185 = _1175;
        _1186 = _1175;
        _1187 = 0.0;
        _1188 = 0.0;
        _1189 = 0.0;
    }
    float _1486;
    float _1487;
    float _1488;
    float _1489;
    float _1490;
    float _1491;
    float _1492;
    float _1493;
    float _1494;
    float _1495;
    float _1496;
    float _1497;
    float _1498;
    float _1499;
    float _1500;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1217 = fma(_845, cbModelParam._m0[30u].z, fma(_841, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _837));
        float _1221 = fma(_845, cbModelParam._m0[31u].z, fma(_841, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _837));
        float _1225 = fma(_845, cbModelParam._m0[32u].z, fma(_841, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _837));
        float _1248 = _837 + _614;
        float _1249 = _841 + _615;
        float _1250 = _845 + _616;
        float _1260 = fma(_1250, cbModelParam._m0[30u].z, fma(_1249, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1248)) - _1217;
        float _1261 = fma(_1250, cbModelParam._m0[31u].z, fma(_1249, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1248)) - _1221;
        float _1262 = fma(_1250, cbModelParam._m0[32u].z, fma(_1249, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1248)) - _1225;
        float _1266 = inversesqrt(dot(vec3(_1260, _1261, _1262), vec3(_1260, _1261, _1262)));
        float _1279 = ((_1266 * _1260) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1217 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1280 = ((_1266 * _1261) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1221 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1281 = ((_1266 * _1262) / cbModelParam._m0[35u].z) + ((((((_1225 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1283 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1279, _1280, _1281), 0.0);
        vec4 _1290 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1279, _1280, _1281), 0.0);
        vec4 _1297 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1279, _1280, _1281), 0.0);
        vec4 _1304 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1279, _1280, _1281), 0.0);
        float _1316 = exp2((_1283.w + (-0.5)) * 20.0) * 2.0;
        float _1317 = _1316 * (_1283.x + (-0.5));
        float _1318 = _1316 * (_1283.y + (-0.5));
        float _1319 = _1316 * (_1283.z + (-0.5));
        float _1326 = exp2((_1290.w + (-0.5)) * 20.0) * 2.0;
        float _1327 = _1326 * (_1290.x + (-0.5));
        float _1328 = _1326 * (_1290.y + (-0.5));
        float _1329 = _1326 * (_1290.z + (-0.5));
        float _1336 = exp2((_1297.w + (-0.5)) * 20.0) * 2.0;
        float _1337 = _1336 * (_1297.x + (-0.5));
        float _1338 = _1336 * (_1297.y + (-0.5));
        float _1339 = _1336 * (_1297.z + (-0.5));
        float _1346 = exp2((_1304.w + (-0.5)) * 20.0) * 2.0;
        float _1347 = _1346 * (_1304.x + (-0.5));
        float _1348 = _1346 * (_1304.y + (-0.5));
        float _1349 = _1346 * (_1304.z + (-0.5));
        float _1350 = isnan(0.0) ? _1347 : (isnan(_1347) ? 0.0 : max(_1347, 0.0));
        float _1351 = isnan(0.0) ? _1348 : (isnan(_1348) ? 0.0 : max(_1348, 0.0));
        float _1352 = isnan(0.0) ? _1349 : (isnan(_1349) ? 0.0 : max(_1349, 0.0));
        float _1353 = _1317 * 0.5;
        float _1354 = _1327 * 0.5;
        float _1355 = _1337 * 0.5;
        float _1356 = dot(vec3(_1353, _1354, _1355), vec3(_1353, _1354, _1355));
        float _1361 = (_1356 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1356);
        float _1369 = (dot(vec3(_614, _615, _616), vec3(_1361 * _1353, _1361 * _1354, _1361 * _1355)) + 1.0) * 0.5;
        float _4142 = isnan(0.0) ? _1369 : (isnan(_1369) ? 0.0 : max(_1369, 0.0));
        float _1378 = sqrt(((_1354 * _1354) + (_1353 * _1353)) + (_1355 * _1355)) / (_1350 + 9.9999997473787516355514526367188e-06);
        float _4153 = isnan(0.0) ? _1378 : (isnan(_1378) ? 0.0 : max(_1378, 0.0));
        float _1379 = isnan(1.0) ? _4153 : (isnan(_4153) ? 1.0 : min(_4153, 1.0));
        float _1380 = _1379 * 2.0;
        float _1384 = (1.0 - _1379) / (_1379 + 1.0);
        float _4164 = isnan(0.0) ? _1384 : (isnan(_1384) ? 0.0 : max(_1384, 0.0));
        float _1385 = isnan(1.0) ? _4164 : (isnan(_4164) ? 1.0 : min(_4164, 1.0));
        float _1394 = ((((1.0 - _1385) * (_1380 + 2.0)) * exp2(log2(isnan(1.0) ? _4142 : (isnan(_4142) ? 1.0 : min(_4142, 1.0))) * (_1380 + 1.0))) + _1385) * _1350;
        float _1395 = _1318 * 0.5;
        float _1396 = _1328 * 0.5;
        float _1397 = _1338 * 0.5;
        float _1398 = dot(vec3(_1395, _1396, _1397), vec3(_1395, _1396, _1397));
        float _1403 = (_1398 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1398);
        float _1411 = (dot(vec3(_614, _615, _616), vec3(_1403 * _1395, _1403 * _1396, _1403 * _1397)) + 1.0) * 0.5;
        float _4175 = isnan(0.0) ? _1411 : (isnan(_1411) ? 0.0 : max(_1411, 0.0));
        float _1420 = sqrt(((_1396 * _1396) + (_1395 * _1395)) + (_1397 * _1397)) / (_1351 + 9.9999997473787516355514526367188e-06);
        float _4186 = isnan(0.0) ? _1420 : (isnan(_1420) ? 0.0 : max(_1420, 0.0));
        float _1421 = isnan(1.0) ? _4186 : (isnan(_4186) ? 1.0 : min(_4186, 1.0));
        float _1422 = _1421 * 2.0;
        float _1426 = (1.0 - _1421) / (_1421 + 1.0);
        float _4197 = isnan(0.0) ? _1426 : (isnan(_1426) ? 0.0 : max(_1426, 0.0));
        float _1427 = isnan(1.0) ? _4197 : (isnan(_4197) ? 1.0 : min(_4197, 1.0));
        float _1436 = ((((1.0 - _1427) * (_1422 + 2.0)) * exp2(log2(isnan(1.0) ? _4175 : (isnan(_4175) ? 1.0 : min(_4175, 1.0))) * (_1422 + 1.0))) + _1427) * _1351;
        float _1437 = _1319 * 0.5;
        float _1438 = _1329 * 0.5;
        float _1439 = _1339 * 0.5;
        float _1440 = dot(vec3(_1437, _1438, _1439), vec3(_1437, _1438, _1439));
        float _1445 = (_1440 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1440);
        float _1453 = (dot(vec3(_614, _615, _616), vec3(_1445 * _1437, _1445 * _1438, _1445 * _1439)) + 1.0) * 0.5;
        float _4208 = isnan(0.0) ? _1453 : (isnan(_1453) ? 0.0 : max(_1453, 0.0));
        float _1462 = sqrt(((_1438 * _1438) + (_1437 * _1437)) + (_1439 * _1439)) / (_1352 + 9.9999997473787516355514526367188e-06);
        float _4219 = isnan(0.0) ? _1462 : (isnan(_1462) ? 0.0 : max(_1462, 0.0));
        float _1463 = isnan(1.0) ? _4219 : (isnan(_4219) ? 1.0 : min(_4219, 1.0));
        float _1464 = _1463 * 2.0;
        float _1468 = (1.0 - _1463) / (_1463 + 1.0);
        float _4230 = isnan(0.0) ? _1468 : (isnan(_1468) ? 0.0 : max(_1468, 0.0));
        float _1469 = isnan(1.0) ? _4230 : (isnan(_4230) ? 1.0 : min(_4230, 1.0));
        float _1478 = ((((1.0 - _1469) * (_1464 + 2.0)) * exp2(log2(isnan(1.0) ? _4208 : (isnan(_4208) ? 1.0 : min(_4208, 1.0))) * (_1464 + 1.0))) + _1469) * _1352;
        _1486 = _1319;
        _1487 = _1318;
        _1488 = _1317;
        _1489 = _1329;
        _1490 = _1328;
        _1491 = _1327;
        _1492 = _1339;
        _1493 = _1338;
        _1494 = _1337;
        _1495 = _1352;
        _1496 = _1351;
        _1497 = _1350;
        _1498 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1394 : (isnan(_1394) ? 0.0 : max(_1394, 0.0)));
        _1499 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1436 : (isnan(_1436) ? 0.0 : max(_1436, 0.0)));
        _1500 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1478 : (isnan(_1478) ? 0.0 : max(_1478, 0.0)));
    }
    else
    {
        _1486 = _1175;
        _1487 = _1175;
        _1488 = _1175;
        _1489 = _1175;
        _1490 = _1175;
        _1491 = _1175;
        _1492 = _1175;
        _1493 = _1175;
        _1494 = _1175;
        _1495 = _1175;
        _1496 = _1175;
        _1497 = _1175;
        _1498 = 0.0;
        _1499 = 0.0;
        _1500 = 0.0;
    }
    float _1510 = (cbModelParam._m0[1u].x * (_1498 - _1187)) + _1187;
    float _1511 = (cbModelParam._m0[1u].x * (_1499 - _1188)) + _1188;
    float _1512 = (cbModelParam._m0[1u].x * (_1500 - _1189)) + _1189;
    float _1533 = fma(_1512, cbSceneParam._m0[89u].z, fma(_1511, cbSceneParam._m0[89u].y, _1510 * cbSceneParam._m0[89u].x));
    float _1536 = fma(_1512, cbSceneParam._m0[90u].z, fma(_1511, cbSceneParam._m0[90u].y, _1510 * cbSceneParam._m0[90u].x));
    float _1539 = fma(_1512, cbSceneParam._m0[91u].z, fma(_1511, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1510));
    float _1554 = _784 * 0.5;
    float _1555 = _785 * 0.5;
    float _1556 = _786 * 0.5;
    float _1557 = dot(vec4(_1554, _1555, _1556, 1.0), vec4(_1488, _1491, _1494, _1497));
    float _1560 = dot(vec4(_1554, _1555, _1556, 1.0), vec4(_1487, _1490, _1493, _1496));
    float _1563 = dot(vec4(_1554, _1555, _1556, 1.0), vec4(_1486, _1489, _1492, _1495));
    float _1597;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1570 = dot(vec4(_1554, _1555, _1556, 1.0), vec4(_1174, _1178, _1181, _1184));
        float _1574 = dot(vec4(_1554, _1555, _1556, 1.0), vec4(_1176, _1179, _1182, _1185));
        float _1578 = dot(vec4(_1554, _1555, _1556, 1.0), vec4(_1177, _1180, _1183, _1186));
        float _1585 = dot(vec4(cbModelParam._m0[39u]), vec4(_1554, _1555, _1556, 1.0));
        _1597 = dot(vec3(isnan(0.0) ? _1578 : (isnan(_1578) ? 0.0 : max(_1578, 0.0)), isnan(0.0) ? _1574 : (isnan(_1574) ? 0.0 : max(_1574, 0.0)), isnan(0.0) ? _1570 : (isnan(_1570) ? 0.0 : max(_1570, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1585) ? 0.0 : (isnan(0.0) ? _1585 : max(0.0, _1585))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1597 = 1.0;
    }
    float _1608;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1599 = dot(vec4(cbModelParam._m0[40u]), vec4(_1554, _1555, _1556, 1.0));
        _1608 = dot(vec3(isnan(0.0) ? _1557 : (isnan(_1557) ? 0.0 : max(_1557, 0.0)), isnan(0.0) ? _1560 : (isnan(_1560) ? 0.0 : max(_1560, 0.0)), isnan(0.0) ? _1563 : (isnan(_1563) ? 0.0 : max(_1563, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1599) ? 0.0 : (isnan(0.0) ? _1599 : max(0.0, _1599))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1608 = 1.0;
    }
    float _1612 = (_1608 * cbModelParam._m0[1u].x) + (_1597 * (1.0 - cbModelParam._m0[1u].x));
    float _1622 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _617);
    float _1623 = isnan(_1622) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1622 : min(cbModelParam._m0[25u].z, _1622));
    float _1705;
    float _1707;
    float _1709;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1672 = fma(_845, cbModelParam._m0[13u].z, fma(_841, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _837)) + cbModelParam._m0[13u].w;
        float _1676 = fma(_845, cbModelParam._m0[14u].z, fma(_841, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _837)) + cbModelParam._m0[14u].w;
        float _1680 = fma(_845, cbModelParam._m0[15u].z, fma(_841, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _837)) + cbModelParam._m0[15u].w;
        float _1683 = fma(_786, cbModelParam._m0[13u].z, fma(_785, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _784));
        float _1686 = fma(_786, cbModelParam._m0[14u].z, fma(_785, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _784));
        float _1689 = fma(_786, cbModelParam._m0[15u].z, fma(_785, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _784));
        float _1717;
        if (_1683 > 0.0)
        {
            _1717 = abs((1.0 - _1672) / _1683);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1683 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1672 + 1.0) / _1683);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1717 = frontier_phi_17_15_ladder;
        }
        float _1888;
        if (_1686 > 0.0)
        {
            _1888 = abs((1.0 - _1676) / _1686);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1686 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1676 + 1.0) / _1686);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1888 = frontier_phi_26_22_ladder;
        }
        float _2183;
        if (_1689 > 0.0)
        {
            _2183 = abs((1.0 - _1680) / _1689);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1689 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1680 + 1.0) / _1689);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2183 = frontier_phi_38_33_ladder;
        }
        float _2185 = isnan(_1888) ? _1717 : (isnan(_1717) ? _1888 : min(_1717, _1888));
        float _2186 = isnan(_2183) ? _2185 : (isnan(_2185) ? _2183 : min(_2185, _2183));
        float _2190 = (_2186 * _1683) + _1672;
        float _2191 = (_2186 * _1686) + _1676;
        float _2192 = (_2186 * _1689) + _1680;
        float _2193 = _2186 * 9.9999997473787516355514526367188e-05;
        float _2195 = (-1.0) - _2193;
        float _2197 = _2193 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2192 > _2197) || ((_2192 < _2195) || ((_2191 > _2197) || ((_2191 < _2195) || ((_2190 < _2195) || (_2190 > _2197))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2337 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2192, cbModelParam._m0[9u].z, fma(_2191, cbModelParam._m0[9u].y, _2190 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2192, cbModelParam._m0[10u].z, fma(_2191, cbModelParam._m0[10u].y, _2190 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2192, cbModelParam._m0[11u].z, fma(_2191, cbModelParam._m0[11u].y, _2190 * cbModelParam._m0[11u].x))), _1623);
            frontier_phi_16_38_ladder = _2337.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2337.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2337.x * cbModelParam._m0[1u].y;
        }
        _1705 = frontier_phi_16_38_ladder_2;
        _1707 = frontier_phi_16_38_ladder_1;
        _1709 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1693 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_784, _785, _786), _1623);
        _1705 = _1693.x * cbModelParam._m0[1u].y;
        _1707 = _1693.y * cbModelParam._m0[1u].y;
        _1709 = _1693.z * cbModelParam._m0[1u].y;
    }
    float _1713 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _617);
    float _1714 = isnan(_1713) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1713 : min(cbModelParam._m0[25u].w, _1713));
    float _1805;
    float _1807;
    float _1809;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1769 = fma(_845, cbModelParam._m0[21u].z, fma(_841, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _837)) + cbModelParam._m0[21u].w;
        float _1773 = fma(_845, cbModelParam._m0[22u].z, fma(_841, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _837)) + cbModelParam._m0[22u].w;
        float _1777 = fma(_845, cbModelParam._m0[23u].z, fma(_841, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _837)) + cbModelParam._m0[23u].w;
        float _1780 = fma(_786, cbModelParam._m0[21u].z, fma(_785, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _784));
        float _1783 = fma(_786, cbModelParam._m0[22u].z, fma(_785, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _784));
        float _1786 = fma(_786, cbModelParam._m0[23u].z, fma(_785, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _784));
        float _1893;
        if (_1780 > 0.0)
        {
            _1893 = abs((1.0 - _1769) / _1780);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1780 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1769 + 1.0) / _1780);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1893 = frontier_phi_28_24_ladder;
        }
        float _2210;
        if (_1783 > 0.0)
        {
            _2210 = abs((1.0 - _1773) / _1783);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1783 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1773 + 1.0) / _1783);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2210 = frontier_phi_40_35_ladder;
        }
        float _2537;
        if (_1786 > 0.0)
        {
            _2537 = abs((1.0 - _1777) / _1786);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_1786 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_1777 + 1.0) / _1786);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _2537 = frontier_phi_50_47_ladder;
        }
        float _2539 = isnan(_2210) ? _1893 : (isnan(_1893) ? _2210 : min(_1893, _2210));
        float _2540 = isnan(_2537) ? _2539 : (isnan(_2539) ? _2537 : min(_2539, _2537));
        float _2544 = (_2540 * _1780) + _1769;
        float _2545 = (_2540 * _1783) + _1773;
        float _2546 = (_2540 * _1786) + _1777;
        float _2547 = _2540 * 9.9999997473787516355514526367188e-05;
        float _2548 = (-1.0) - _2547;
        float _2550 = _2547 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_2546 > _2550) || ((_2546 < _2548) || ((_2545 > _2550) || ((_2545 < _2548) || ((_2544 < _2548) || (_2544 > _2550))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2664 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2546, cbModelParam._m0[17u].z, fma(_2545, cbModelParam._m0[17u].y, _2544 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2546, cbModelParam._m0[18u].z, fma(_2545, cbModelParam._m0[18u].y, _2544 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2546, cbModelParam._m0[19u].z, fma(_2545, cbModelParam._m0[19u].y, _2544 * cbModelParam._m0[19u].x))), _1714);
            frontier_phi_25_50_ladder = _2664.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _2664.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _2664.x * cbModelParam._m0[1u].z;
        }
        _1805 = frontier_phi_25_50_ladder_2;
        _1807 = frontier_phi_25_50_ladder_1;
        _1809 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _1789 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_784, _785, _786), _1714);
        _1805 = _1789.x * cbModelParam._m0[1u].z;
        _1807 = _1789.y * cbModelParam._m0[1u].z;
        _1809 = _1789.z * cbModelParam._m0[1u].z;
    }
    float _1821 = ((((1.0 - _805) * ((_792 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_805 * _792)) * _776;
    float _1822 = _1821 * ((cbModelParam._m0[1u].w * (_1805 - _1705)) + _1705);
    float _1823 = _1821 * ((cbModelParam._m0[1u].w * (_1807 - _1707)) + _1707);
    float _1824 = _1821 * ((cbModelParam._m0[1u].w * (_1809 - _1709)) + _1709);
    float _1827 = fma(_1824, cbSceneParam._m0[89u].z, fma(_1823, cbSceneParam._m0[89u].y, _1822 * cbSceneParam._m0[89u].x));
    float _1830 = fma(_1824, cbSceneParam._m0[90u].z, fma(_1823, cbSceneParam._m0[90u].y, _1822 * cbSceneParam._m0[90u].x));
    float _1833 = fma(_1824, cbSceneParam._m0[91u].z, fma(_1823, cbSceneParam._m0[91u].y, _1822 * cbSceneParam._m0[91u].x));
    float _1867 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1871 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1875 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1879 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1880 = _1867 / _1879;
    float _1881 = _1871 / _1879;
    float _1882 = _1875 / _1879;
    float _2029;
    float _2030;
    float _2031;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1909 = ((uint(_1882 > cbSceneParam._m0[59u].y) + uint(_1882 > cbSceneParam._m0[59u].x)) + uint(_1882 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1910 = _1909 + 43u;
        uint _1918 = _1909 + 44u;
        uint _1926 = _1909 + 45u;
        uint _1934 = _1909 + 46u;
        float _1945 = fma(_1879, cbSceneParam._m0[_1910].w, fma(_1875, cbSceneParam._m0[_1910].z, fma(_1871, cbSceneParam._m0[_1910].y, _1867 * cbSceneParam._m0[_1910].x)));
        float _1949 = fma(_1879, cbSceneParam._m0[_1918].w, fma(_1875, cbSceneParam._m0[_1918].z, fma(_1871, cbSceneParam._m0[_1918].y, _1867 * cbSceneParam._m0[_1918].x)));
        float _1957 = fma(_1879, cbSceneParam._m0[_1934].w, fma(_1875, cbSceneParam._m0[_1934].z, fma(_1871, cbSceneParam._m0[_1934].y, _1867 * cbSceneParam._m0[_1934].x)));
        float _1962 = cbSceneParam._m0[33u].z * _1957;
        float _1964 = cbSceneParam._m0[33u].w * _1957;
        float _1967 = fma(_1879, cbSceneParam._m0[_1926].w, fma(_1875, cbSceneParam._m0[_1926].z, fma(_1871, cbSceneParam._m0[_1926].y, _1867 * cbSceneParam._m0[_1926].x))) / _1957;
        float _2015 = (cbSceneParam._m0[33u].x - sqrt(((_1881 * _1881) + (_1880 * _1880)) + (_1882 * _1882))) * cbSceneParam._m0[33u].y;
        float _4356 = isnan(0.0) ? _2015 : (isnan(_2015) ? 0.0 : max(_2015, 0.0));
        float _2022 = (isnan(1.0) ? _4356 : (isnan(_4356) ? 1.0 : min(_4356, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1962 + _1945) / _1957, (_1964 + _1949) / _1957), _1967), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1964 + _1945) / _1957, (_1949 - _1962) / _1957), _1967), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1945 - _1962) / _1957, (_1949 - _1964) / _1957), _1967), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1945 - _1964) / _1957, (_1962 + _1949) / _1957), _1967), 0.0)).x), vec4(0.25)));
        _2029 = 1.0 - (_2022 * cbSceneParam._m0[34u].x);
        _2030 = 1.0 - (_2022 * cbSceneParam._m0[34u].y);
        _2031 = 1.0 - (_2022 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2029 = 1.0;
        _2030 = 1.0;
        _2031 = 1.0;
    }
    float _2095;
    float _2097;
    float _2099;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2083 = fma(_1879, cbSceneParam._m0[63u].w, fma(_1875, cbSceneParam._m0[63u].z, fma(_1871, cbSceneParam._m0[63u].y, _1867 * cbSceneParam._m0[63u].x)));
        float _2084 = fma(_1879, cbSceneParam._m0[60u].w, fma(_1875, cbSceneParam._m0[60u].z, fma(_1871, cbSceneParam._m0[60u].y, _1867 * cbSceneParam._m0[60u].x))) / _2083;
        float _2085 = fma(_1879, cbSceneParam._m0[61u].w, fma(_1875, cbSceneParam._m0[61u].z, fma(_1871, cbSceneParam._m0[61u].y, _1867 * cbSceneParam._m0[61u].x))) / _2083;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_2084 >= cbSceneParam._m0[64u].x) && (_2085 >= cbSceneParam._m0[64u].y)) && (_2084 <= cbSceneParam._m0[64u].z)) && (_2085 <= cbSceneParam._m0[64u].w))
        {
            float _2223 = fma(_1879, cbSceneParam._m0[62u].w, fma(_1875, cbSceneParam._m0[62u].z, fma(_1871, cbSceneParam._m0[62u].y, _1867 * cbSceneParam._m0[62u].x))) / _2083;
            float _2227 = isnan(cbSceneParam._m0[41u].w) ? _2223 : (isnan(_2223) ? cbSceneParam._m0[41u].w : max(_2223, cbSceneParam._m0[41u].w));
            float _2270 = (cbSceneParam._m0[33u].x - sqrt(((_1881 * _1881) + (_1880 * _1880)) + (_1882 * _1882))) * cbSceneParam._m0[33u].y;
            float _4372 = isnan(0.0) ? _2270 : (isnan(_2270) ? 0.0 : max(_2270, 0.0));
            float _2277 = (isnan(1.0) ? _4372 : (isnan(_4372) ? 1.0 : min(_4372, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2084, cbSceneParam._m0[33u].w + _2085), _2227), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2084, _2085 - cbSceneParam._m0[33u].z), _2227), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2084 - cbSceneParam._m0[33u].z, _2085 - cbSceneParam._m0[33u].w), _2227), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2084 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2085), _2227), 0.0)).x), vec4(0.25)));
            float _2281 = 1.0 - (_2277 * cbSceneParam._m0[34u].x);
            float _2282 = 1.0 - (_2277 * cbSceneParam._m0[34u].y);
            float _2283 = 1.0 - (_2277 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_2283) ? _2031 : (isnan(_2031) ? _2283 : min(_2031, _2283));
            frontier_phi_37_36_ladder_1 = isnan(_2282) ? _2030 : (isnan(_2030) ? _2282 : min(_2030, _2282));
            frontier_phi_37_36_ladder_2 = isnan(_2281) ? _2029 : (isnan(_2029) ? _2281 : min(_2029, _2281));
        }
        else
        {
            frontier_phi_37_36_ladder = _2031;
            frontier_phi_37_36_ladder_1 = _2030;
            frontier_phi_37_36_ladder_2 = _2029;
        }
        _2095 = frontier_phi_37_36_ladder_2;
        _2097 = frontier_phi_37_36_ladder_1;
        _2099 = frontier_phi_37_36_ladder;
    }
    else
    {
        _2095 = _2029;
        _2097 = _2030;
        _2099 = _2031;
    }
    uvec4 _2104 = floatBitsToUint(cbInstanceData._m0[_247 + 5u]);
    uint _2106 = _2104.x * 14u;
    uint _2107 = _2106 + 13u;
    float _2114 = _776 + (-1.0);
    float _2119 = (cbLight._m0[_2107].x * _2114) + 1.0;
    float _2120 = (cbLight._m0[_2107].y * _2114) + 1.0;
    float _2121 = (cbLight._m0[_2107].z * _2114) + 1.0;
    float _2122 = (cbLight._m0[_2107].w * _2114) + 1.0;
    uint _2123 = _2106 + 5u;
    float _2129 = isnan(1.0) ? _2120 : (isnan(_2120) ? 1.0 : min(_2120, 1.0));
    uint _2133 = _2106 + 4u;
    float _2142 = isnan(1.0) ? _2119 : (isnan(_2119) ? 1.0 : min(_2119, 1.0));
    uint _2146 = _2106 | 1u;
    float _2157 = dot(vec3(cbLight._m0[_2106].xyz), vec3(_614, _615, _616));
    float _2160 = dot(vec3(cbLight._m0[_2146].xyz), vec3(_614, _615, _616));
    float _4408 = isnan(0.0) ? _2157 : (isnan(_2157) ? 0.0 : max(_2157, 0.0));
    float _4419 = isnan(0.0) ? _2160 : (isnan(_2160) ? 0.0 : max(_2160, 0.0));
    float _2165 = (isnan(1.0) ? _4408 : (isnan(_4408) ? 1.0 : min(_4408, 1.0))) * 0.3183098733425140380859375;
    float _2167 = (isnan(1.0) ? _4419 : (isnan(_4419) ? 1.0 : min(_4419, 1.0))) * 0.3183098733425140380859375;
    float _2174 = ((cbLight._m0[_2123].x * _2129) * _2167) + (((cbLight._m0[_2133].x * _2095) * _2142) * _2165);
    float _2175 = ((_2129 * cbLight._m0[_2123].y) * _2167) + (((cbLight._m0[_2133].y * _2097) * _2142) * _2165);
    float _2176 = ((_2129 * cbLight._m0[_2123].z) * _2167) + (((cbLight._m0[_2133].z * _2099) * _2142) * _2165);
    uvec4 _2180 = floatBitsToUint(cbLight._m0[_2106 + 12u]);
    bool _2182 = _2180.x == 0u;
    float _2284;
    float _2286;
    float _2288;
    if (_2182)
    {
        _2284 = _2174;
        _2286 = _2175;
        _2288 = _2176;
    }
    else
    {
        uint _2292 = _2106 + 6u;
        float _2308 = (dot(vec3(cbLight._m0[_2106 + 2u].xyz), vec3(_614, _615, _616)) * 0.5) + 0.5;
        float _2309 = _2308 * _2308;
        float _4430 = isnan(0.0) ? _2309 : (isnan(_2309) ? 0.0 : max(_2309, 0.0));
        float _2310 = isnan(1.0) ? _4430 : (isnan(_4430) ? 1.0 : min(_4430, 1.0));
        float _2311 = isnan(1.0) ? _2121 : (isnan(_2121) ? 1.0 : min(_2121, 1.0));
        _2284 = (((cbLight._m0[_2292].x * 0.3183098733425140380859375) * _2310) * _2311) + _2174;
        _2286 = (((cbLight._m0[_2292].y * 0.3183098733425140380859375) * _2310) * _2311) + _2175;
        _2288 = (((cbLight._m0[_2292].z * 0.3183098733425140380859375) * _2310) * _2311) + _2176;
    }
    bool _2291 = _2180.y == 0u;
    float _2346;
    float _2348;
    float _2350;
    if (_2291)
    {
        _2346 = _2284;
        _2348 = _2286;
        _2350 = _2288;
    }
    else
    {
        uint _2508 = _2106 + 7u;
        float _2524 = (dot(vec3(cbLight._m0[_2106 + 3u].xyz), vec3(_614, _615, _616)) * 0.5) + 0.5;
        float _2525 = _2524 * _2524;
        float _4446 = isnan(0.0) ? _2525 : (isnan(_2525) ? 0.0 : max(_2525, 0.0));
        float _2526 = isnan(1.0) ? _4446 : (isnan(_4446) ? 1.0 : min(_4446, 1.0));
        float _2527 = isnan(1.0) ? _2122 : (isnan(_2122) ? 1.0 : min(_2122, 1.0));
        _2346 = (((cbLight._m0[_2508].x * 0.3183098733425140380859375) * _2526) * _2527) + _2284;
        _2348 = (((cbLight._m0[_2508].y * 0.3183098733425140380859375) * _2526) * _2527) + _2286;
        _2350 = (((cbLight._m0[_2508].z * 0.3183098733425140380859375) * _2526) * _2527) + _2288;
    }
    uint _2353 = _2106 + 8u;
    float _2366 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2106].w)) * _617) * 0.949999988079071044921875);
    float _2367 = _2366 * _2366;
    float _2368 = cbLight._m0[_2106].x + _693;
    float _2369 = cbLight._m0[_2106].y + _694;
    float _2370 = cbLight._m0[_2106].z + _695;
    float _2374 = inversesqrt(dot(vec3(_2368, _2369, _2370), vec3(_2368, _2369, _2370)));
    float _2375 = _2374 * _2368;
    float _2376 = _2374 * _2369;
    float _2377 = _2374 * _2370;
    float _2378 = dot(vec3(_614, _615, _616), vec3(cbLight._m0[_2106].xyz));
    float _4462 = isnan(0.0) ? _2378 : (isnan(_2378) ? 0.0 : max(_2378, 0.0));
    float _2381 = isnan(1.0) ? _4462 : (isnan(_4462) ? 1.0 : min(_4462, 1.0));
    float _4473 = isnan(0.0) ? _777 : (isnan(_777) ? 0.0 : max(_777, 0.0));
    float _2382 = isnan(1.0) ? _4473 : (isnan(_4473) ? 1.0 : min(_4473, 1.0));
    float _2383 = dot(vec3(_614, _615, _616), vec3(_2375, _2376, _2377));
    float _4484 = isnan(0.0) ? _2383 : (isnan(_2383) ? 0.0 : max(_2383, 0.0));
    float _2386 = isnan(1.0) ? _4484 : (isnan(_4484) ? 1.0 : min(_4484, 1.0));
    float _2387 = dot(vec3(cbLight._m0[_2106].xyz), vec3(_2375, _2376, _2377));
    float _4495 = isnan(0.0) ? _2387 : (isnan(_2387) ? 0.0 : max(_2387, 0.0));
    float _2391 = _2367 * _2367;
    float _2395 = ((_2386 * _2386) * (_2391 + (-1.0))) + 1.0;
    float _2406 = (exp2(log2(1.0 - (isnan(1.0) ? _4495 : (isnan(_4495) ? 1.0 : min(_4495, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2407 = 1.0 - _2367;
    float _2418 = (0.5 / (((_2382 * ((_2381 * _2407) + _2367)) + 9.9999999392252902907785028219223e-09) + (((_2382 * _2407) + _2367) * _2381))) * _2381;
    float _4506 = isnan(0.0) ? _2418 : (isnan(_2418) ? 0.0 : max(_2418, 0.0));
    float _2420 = (isnan(1.0) ? _4506 : (isnan(_4506) ? 1.0 : min(_4506, 1.0))) * (_2391 / ((_2395 * _2395) * 3.141590118408203125));
    uint _2434 = _2106 + 9u;
    float _2445 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2146].w)) * _617) * 0.949999988079071044921875);
    float _2446 = _2445 * _2445;
    float _2447 = cbLight._m0[_2146].x + _693;
    float _2448 = cbLight._m0[_2146].y + _694;
    float _2449 = cbLight._m0[_2146].z + _695;
    float _2453 = inversesqrt(dot(vec3(_2447, _2448, _2449), vec3(_2447, _2448, _2449)));
    float _2454 = _2453 * _2447;
    float _2455 = _2453 * _2448;
    float _2456 = _2453 * _2449;
    float _2457 = dot(vec3(_614, _615, _616), vec3(cbLight._m0[_2146].xyz));
    float _4517 = isnan(0.0) ? _2457 : (isnan(_2457) ? 0.0 : max(_2457, 0.0));
    float _2460 = isnan(1.0) ? _4517 : (isnan(_4517) ? 1.0 : min(_4517, 1.0));
    float _2461 = dot(vec3(_614, _615, _616), vec3(_2454, _2455, _2456));
    float _4528 = isnan(0.0) ? _2461 : (isnan(_2461) ? 0.0 : max(_2461, 0.0));
    float _2464 = isnan(1.0) ? _4528 : (isnan(_4528) ? 1.0 : min(_4528, 1.0));
    float _2465 = dot(vec3(cbLight._m0[_2146].xyz), vec3(_2454, _2455, _2456));
    float _4539 = isnan(0.0) ? _2465 : (isnan(_2465) ? 0.0 : max(_2465, 0.0));
    float _2469 = _2446 * _2446;
    float _2473 = ((_2464 * _2464) * (_2469 + (-1.0))) + 1.0;
    float _2482 = (exp2(log2(1.0 - (isnan(1.0) ? _4539 : (isnan(_4539) ? 1.0 : min(_4539, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2483 = 1.0 - _2446;
    float _2493 = (0.5 / (((_2382 * ((_2460 * _2483) + _2446)) + 9.9999999392252902907785028219223e-09) + (((_2382 * _2483) + _2446) * _2460))) * _2460;
    float _4550 = isnan(0.0) ? _2493 : (isnan(_2493) ? 0.0 : max(_2493, 0.0));
    float _2495 = (isnan(1.0) ? _4550 : (isnan(_4550) ? 1.0 : min(_4550, 1.0))) * (_2469 / ((_2473 * _2473) * 3.141590118408203125));
    float _2505 = (((_2482 * cbLight._m0[_2434].x) * _2495) * _2129) + ((((cbLight._m0[_2353].x * _2095) * _2406) * _2420) * _2142);
    float _2506 = (((_2482 * cbLight._m0[_2434].y) * _2495) * _2129) + ((((cbLight._m0[_2353].y * _2097) * _2406) * _2420) * _2142);
    float _2507 = (((_2482 * cbLight._m0[_2434].z) * _2495) * _2129) + ((((cbLight._m0[_2353].z * _2099) * _2406) * _2420) * _2142);
    float _2563;
    float _2565;
    float _2567;
    if (_2182)
    {
        _2563 = _2505;
        _2565 = _2506;
        _2567 = _2507;
    }
    else
    {
        uint _2569 = _2106 + 2u;
        uint _2573 = _2106 + 10u;
        float _2587 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2569].w)) * _617) * 0.949999988079071044921875);
        float _2588 = _2587 * _2587;
        float _2589 = cbLight._m0[_2569].x + _693;
        float _2590 = cbLight._m0[_2569].y + _694;
        float _2591 = cbLight._m0[_2569].z + _695;
        float _2595 = inversesqrt(dot(vec3(_2589, _2590, _2591), vec3(_2589, _2590, _2591)));
        float _2596 = _2595 * _2589;
        float _2597 = _2595 * _2590;
        float _2598 = _2595 * _2591;
        float _2599 = dot(vec3(_614, _615, _616), vec3(cbLight._m0[_2569].xyz));
        float _4561 = isnan(0.0) ? _2599 : (isnan(_2599) ? 0.0 : max(_2599, 0.0));
        float _2602 = isnan(1.0) ? _4561 : (isnan(_4561) ? 1.0 : min(_4561, 1.0));
        float _2603 = dot(vec3(_614, _615, _616), vec3(_2596, _2597, _2598));
        float _4572 = isnan(0.0) ? _2603 : (isnan(_2603) ? 0.0 : max(_2603, 0.0));
        float _2606 = isnan(1.0) ? _4572 : (isnan(_4572) ? 1.0 : min(_4572, 1.0));
        float _2607 = dot(vec3(cbLight._m0[_2569].xyz), vec3(_2596, _2597, _2598));
        float _4583 = isnan(0.0) ? _2607 : (isnan(_2607) ? 0.0 : max(_2607, 0.0));
        float _2611 = _2588 * _2588;
        float _2615 = ((_2606 * _2606) * (_2611 + (-1.0))) + 1.0;
        float _2624 = (exp2(log2(1.0 - (isnan(1.0) ? _4583 : (isnan(_4583) ? 1.0 : min(_4583, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2625 = 1.0 - _2588;
        float _2635 = (0.5 / (((_2382 * ((_2602 * _2625) + _2588)) + 9.9999999392252902907785028219223e-09) + (((_2382 * _2625) + _2588) * _2602))) * _2602;
        float _4594 = isnan(0.0) ? _2635 : (isnan(_2635) ? 0.0 : max(_2635, 0.0));
        float _2637 = (isnan(1.0) ? _4594 : (isnan(_4594) ? 1.0 : min(_4594, 1.0))) * (_2611 / ((_2615 * _2615) * 3.141590118408203125));
        float _2638 = isnan(1.0) ? _2121 : (isnan(_2121) ? 1.0 : min(_2121, 1.0));
        _2563 = (((_2624 * cbLight._m0[_2573].x) * _2637) * _2638) + _2505;
        _2565 = (((_2624 * cbLight._m0[_2573].y) * _2637) * _2638) + _2506;
        _2567 = (((_2624 * cbLight._m0[_2573].z) * _2637) * _2638) + _2507;
    }
    float _2669;
    float _2671;
    float _2673;
    if (_2291)
    {
        _2669 = _2563;
        _2671 = _2565;
        _2673 = _2567;
    }
    else
    {
        uint _2680 = _2106 + 3u;
        uint _2684 = _2106 + 11u;
        float _2698 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2680].w)) * _617) * 0.949999988079071044921875);
        float _2699 = _2698 * _2698;
        float _2700 = cbLight._m0[_2680].x + _693;
        float _2701 = cbLight._m0[_2680].y + _694;
        float _2702 = cbLight._m0[_2680].z + _695;
        float _2706 = inversesqrt(dot(vec3(_2700, _2701, _2702), vec3(_2700, _2701, _2702)));
        float _2707 = _2706 * _2700;
        float _2708 = _2706 * _2701;
        float _2709 = _2706 * _2702;
        float _2710 = dot(vec3(_614, _615, _616), vec3(cbLight._m0[_2680].xyz));
        float _4610 = isnan(0.0) ? _2710 : (isnan(_2710) ? 0.0 : max(_2710, 0.0));
        float _2713 = isnan(1.0) ? _4610 : (isnan(_4610) ? 1.0 : min(_4610, 1.0));
        float _2714 = dot(vec3(_614, _615, _616), vec3(_2707, _2708, _2709));
        float _4621 = isnan(0.0) ? _2714 : (isnan(_2714) ? 0.0 : max(_2714, 0.0));
        float _2717 = isnan(1.0) ? _4621 : (isnan(_4621) ? 1.0 : min(_4621, 1.0));
        float _2718 = dot(vec3(cbLight._m0[_2680].xyz), vec3(_2707, _2708, _2709));
        float _4632 = isnan(0.0) ? _2718 : (isnan(_2718) ? 0.0 : max(_2718, 0.0));
        float _2722 = _2699 * _2699;
        float _2726 = ((_2717 * _2717) * (_2722 + (-1.0))) + 1.0;
        float _2735 = (exp2(log2(1.0 - (isnan(1.0) ? _4632 : (isnan(_4632) ? 1.0 : min(_4632, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2736 = 1.0 - _2699;
        float _2746 = (0.5 / (((_2382 * ((_2713 * _2736) + _2699)) + 9.9999999392252902907785028219223e-09) + (((_2382 * _2736) + _2699) * _2713))) * _2713;
        float _4643 = isnan(0.0) ? _2746 : (isnan(_2746) ? 0.0 : max(_2746, 0.0));
        float _2748 = (isnan(1.0) ? _4643 : (isnan(_4643) ? 1.0 : min(_4643, 1.0))) * (_2722 / ((_2726 * _2726) * 3.141590118408203125));
        float _2749 = isnan(1.0) ? _2122 : (isnan(_2122) ? 1.0 : min(_2122, 1.0));
        _2669 = (((_2735 * cbLight._m0[_2684].x) * _2748) * _2749) + _2563;
        _2671 = (((_2735 * cbLight._m0[_2684].y) * _2748) * _2749) + _2565;
        _2673 = (((_2735 * cbLight._m0[_2684].z) * _2748) * _2749) + _2567;
    }
    float _2815;
    float _2817;
    float _2819;
    float _2821;
    float _2823;
    float _2825;
    if (_2104.y == 0u)
    {
        uvec4 _2770 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2771 = _2770.x;
        uint _2782 = uint((float(_2770.y) * floor(float(uint(cbSceneParam._m0[85u].y * _714) / _2771))) + floor(float(uint(cbSceneParam._m0[85u].x * _713) / _2771)));
        float _2792 = (log2(_1882 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2793 = isnan(0.0) ? _2792 : (isnan(_2792) ? 0.0 : max(_2792, 0.0));
        uint _2796 = uint(isnan(14.0) ? _2793 : (isnan(_2793) ? 14.0 : min(_2793, 14.0)));
        uvec4 _2801 = texelFetch(g_lightClusterGridBuffer, int(((_2796 << 2u) + (_2782 << 6u)) >> 2u));
        uint _2802 = _2801.x;
        uint _2803 = _2770.z;
        float _2882;
        float _2884;
        float _2886;
        float _2888;
        float _2890;
        float _2892;
        if (((((1u << ((_2803 >> 4u) & 15u)) + 4294967295u) & _2802) == 0u) || ((_2803 & 240u) == 0u))
        {
            _2882 = 0.0;
            _2884 = 0.0;
            _2886 = 0.0;
            _2888 = 0.0;
            _2890 = 0.0;
            _2892 = 0.0;
        }
        else
        {
            float _2883;
            float _2885;
            float _2887;
            float _2889;
            float _2891;
            float _2893;
            float _3035 = 0.0;
            float _3036 = 0.0;
            float _3037 = 0.0;
            float _3038 = 0.0;
            float _3039 = 0.0;
            float _3040 = 0.0;
            uint _3041 = 0u;
            uint _3050;
            bool _3051;
            for (;;)
            {
                _3050 = texelFetch(g_lightClassification, int((((_2796 << 5u) + (_2782 << 9u)) + (_3041 << 2u)) >> 2u)).x;
                _3051 = _3050 == 0u;
                float frontier_phi_71_pred;
                float frontier_phi_71_pred_1;
                float frontier_phi_71_pred_2;
                float frontier_phi_71_pred_3;
                float frontier_phi_71_pred_4;
                float frontier_phi_71_pred_5;
                if (_3051)
                {
                    frontier_phi_71_pred = _3040;
                    frontier_phi_71_pred_1 = _3039;
                    frontier_phi_71_pred_2 = _3038;
                    frontier_phi_71_pred_3 = _3037;
                    frontier_phi_71_pred_4 = _3036;
                    frontier_phi_71_pred_5 = _3035;
                }
                else
                {
                    float _3180;
                    float _3181;
                    float _3182;
                    float _3183;
                    float _3184;
                    float _3185;
                    uint _3186;
                    _3180 = _3035;
                    _3181 = _3036;
                    _3182 = _3037;
                    _3183 = _3038;
                    _3184 = _3039;
                    _3185 = _3040;
                    _3186 = _3050;
                    float _3107;
                    float _3108;
                    float _3109;
                    float _3110;
                    float _3111;
                    float _3112;
                    for (;;)
                    {
                        uint _3190 = uint(findLSB(_3186)) + (_3041 << 5u);
                        uint _3187 = (_3186 + 4294967295u) & _3186;
                        uint _3192 = _3190 * 48u;
                        vec4 _3206 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3192)).x, texelFetch(g_PointLightRenderingBuffer, int(_3192 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3192 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3192 + 3u)).x));
                        uint _3212 = (_3190 * 48u) + 4u;
                        vec4 _3225 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3212)).x, texelFetch(g_PointLightRenderingBuffer, int(_3212 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3212 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3212 + 3u)).x));
                        uint _3231 = (_3190 * 48u) + 8u;
                        vec3 _3242 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3231)).x, texelFetch(g_PointLightRenderingBuffer, int(_3231 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3231 + 2u)).x));
                        float _3246 = _3206.x - _1880;
                        float _3247 = _3206.y - _1881;
                        float _3248 = _3206.z - _1882;
                        float _3249 = dot(vec3(_3246, _3247, _3248), vec3(_3246, _3247, _3248));
                        float _3252 = inversesqrt(_3249);
                        float _3253 = _3252 * _3246;
                        float _3254 = _3252 * _3247;
                        float _3255 = _3252 * _3248;
                        float _3256 = dot(vec3(_732, _735, _738), vec3(_3253, _3254, _3255));
                        float _3261 = 1.0 - (_3249 * _3206.w);
                        float _4669 = isnan(0.0) ? _3261 : (isnan(_3261) ? 0.0 : max(_3261, 0.0));
                        float _3262 = isnan(1.0) ? _4669 : (isnan(_4669) ? 1.0 : min(_4669, 1.0));
                        float _3263 = sqrt(_3249) * _3225.w;
                        float _3266 = 1.39999997615814208984375 / (_3263 + 1.39999997615814208984375);
                        float _3267 = _3266 * _3266;
                        float _3270 = ((1.0 - _3267) * _3256) + _3267;
                        float _3273 = _3263 * _3263;
                        float _3277 = ((isnan(0.0) ? _3270 : (isnan(_3270) ? 0.0 : max(_3270, 0.0))) * _3262) / ((_3273 * 0.699999988079071044921875) + 1.0);
                        float _3281 = (-0.0) - _1880;
                        float _3282 = (-0.0) - _1881;
                        float _3283 = (-0.0) - _1882;
                        float _3287 = inversesqrt(dot(vec3(_3281, _3282, _3283), vec3(_3281, _3282, _3283)));
                        float _3288 = _3287 * _3281;
                        float _3289 = _3287 * _3282;
                        float _3290 = _3287 * _3283;
                        float _3297 = exp2(log2(1.0 / ((_3273 * 3.5) + 5.0)) * 0.25);
                        float _3298 = 1.0 - _792;
                        float _3305 = sqrt(1.0 - ((1.0 - (_3298 * _3298)) * (1.0 - (_3297 * _3297))));
                        float _3306 = _3305 * _3305;
                        float _3307 = _3306 * _3306;
                        float _3308 = _3288 + _3253;
                        float _3309 = _3289 + _3254;
                        float _3310 = _3290 + _3255;
                        float _3314 = inversesqrt(dot(vec3(_3308, _3309, _3310), vec3(_3308, _3309, _3310)));
                        float _3318 = dot(vec3(_732, _735, _738), vec3(_3288, _3289, _3290));
                        float _4685 = isnan(0.0) ? _3318 : (isnan(_3318) ? 0.0 : max(_3318, 0.0));
                        float _3321 = isnan(1.0) ? _4685 : (isnan(_4685) ? 1.0 : min(_4685, 1.0));
                        float _3322 = dot(vec3(_732, _735, _738), vec3(_3314 * _3308, _3314 * _3309, _3314 * _3310));
                        float _4696 = isnan(0.0) ? _3322 : (isnan(_3322) ? 0.0 : max(_3322, 0.0));
                        float _3325 = isnan(1.0) ? _4696 : (isnan(_4696) ? 1.0 : min(_4696, 1.0));
                        float _3329 = ((_3325 * _3325) * (_3307 + (-1.0))) + 1.0;
                        float _3330 = _3266 * _3306;
                        float _3331 = _3330 * _3330;
                        float _3334 = ((1.0 - _3331) * _3256) + _3331;
                        float _4707 = isnan(0.0) ? _3334 : (isnan(_3334) ? 0.0 : max(_3334, 0.0));
                        float _3335 = isnan(1.0) ? _4707 : (isnan(_4707) ? 1.0 : min(_4707, 1.0));
                        float _3336 = 1.0 - _3306;
                        float _3346 = (0.5 / (((_3335 * ((_3321 * _3336) + _3306)) + 9.9999999392252902907785028219223e-09) + (((_3335 * _3336) + _3306) * _3321))) * _3335;
                        float _4718 = isnan(0.0) ? _3346 : (isnan(_3346) ? 0.0 : max(_3346, 0.0));
                        float _3357 = (((_3307 * 3.1415927410125732421875) * (isnan(1.0) ? _4718 : (isnan(_4718) ? 1.0 : min(_4718, 1.0)))) / ((_3329 * _3329) * ((_3273 * 2.1991131305694580078125) + 3.141590118408203125))) * _3262;
                        _3110 = (_3277 * _3225.x) + _3183;
                        _3111 = (_3277 * _3225.y) + _3184;
                        _3112 = (_3277 * _3225.z) + _3185;
                        _3107 = (_3357 * _3242.x) + _3180;
                        _3108 = (_3357 * _3242.y) + _3181;
                        _3109 = (_3357 * _3242.z) + _3182;
                        if (_3187 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3180 = _3107;
                            _3181 = _3108;
                            _3182 = _3109;
                            _3183 = _3110;
                            _3184 = _3111;
                            _3185 = _3112;
                            _3186 = _3187;
                        }
                    }
                    frontier_phi_71_pred = _3112;
                    frontier_phi_71_pred_1 = _3111;
                    frontier_phi_71_pred_2 = _3110;
                    frontier_phi_71_pred_3 = _3109;
                    frontier_phi_71_pred_4 = _3108;
                    frontier_phi_71_pred_5 = _3107;
                }
                _2893 = frontier_phi_71_pred;
                _2891 = frontier_phi_71_pred_1;
                _2889 = frontier_phi_71_pred_2;
                _2887 = frontier_phi_71_pred_3;
                _2885 = frontier_phi_71_pred_4;
                _2883 = frontier_phi_71_pred_5;
                uint _3042 = _3041 + 1u;
                if (_3042 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3035 = _2883;
                    _3036 = _2885;
                    _3037 = _2887;
                    _3038 = _2889;
                    _3039 = _2891;
                    _3040 = _2893;
                    _3041 = _3042;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2882 = _2883;
            _2884 = _2885;
            _2886 = _2887;
            _2888 = _2889;
            _2890 = _2891;
            _2892 = _2893;
        }
        uvec4 _2896 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2897 = _2896.z;
        uint _2899 = (_2897 >> 8u) & 15u;
        float _3003;
        float _3005;
        float _3007;
        float _3009;
        float _3011;
        float _3013;
        if (((4294967295u << _2899) & _2802) == 0u)
        {
            _3003 = _2882;
            _3005 = _2884;
            _3007 = _2886;
            _3009 = _2888;
            _3011 = _2890;
            _3013 = _2892;
        }
        else
        {
            float _3028 = inversesqrt(dot(vec3(_1880, _1881, _1882), vec3(_1880, _1881, _1882)));
            float _3029 = _3028 * _1880;
            float _3030 = _3028 * _1881;
            float _3031 = _3028 * _1882;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_2899 < ((_2897 >> 12u) & 15u))
            {
                float _3004;
                float _3006;
                float _3008;
                float _3010;
                float _3012;
                float _3014;
                float _3163 = _2882;
                float _3164 = _2884;
                float _3165 = _2886;
                float _3166 = _2888;
                float _3167 = _2890;
                float _3168 = _2892;
                uint _3169 = _2899;
                uint _3178;
                bool _3179;
                for (;;)
                {
                    _3178 = texelFetch(g_lightClassification, int((((_2796 << 5u) + (_2782 << 9u)) + (_3169 << 2u)) >> 2u)).x;
                    _3179 = _3178 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    float frontier_phi_82_pred_3;
                    float frontier_phi_82_pred_4;
                    float frontier_phi_82_pred_5;
                    if (_3179)
                    {
                        frontier_phi_82_pred = _3168;
                        frontier_phi_82_pred_1 = _3167;
                        frontier_phi_82_pred_2 = _3166;
                        frontier_phi_82_pred_3 = _3165;
                        frontier_phi_82_pred_4 = _3164;
                        frontier_phi_82_pred_5 = _3163;
                    }
                    else
                    {
                        float _3371;
                        float _3372;
                        float _3373;
                        float _3374;
                        float _3375;
                        float _3376;
                        float _3665;
                        float _3666;
                        float _3667;
                        float _3668;
                        float _3669;
                        float _3670;
                        float _3384 = _3163;
                        float _3385 = _3164;
                        float _3386 = _3165;
                        float _3387 = _3166;
                        float _3388 = _3167;
                        float _3389 = _3168;
                        uint _3390 = _3178;
                        uint _3391;
                        vec4 _3416;
                        float _3417;
                        vec4 _3432;
                        vec3 _3444;
                        vec4 _3459;
                        vec4 _3475;
                        float _3521;
                        bool _3522;
                        for (;;)
                        {
                            uint _3401 = ((_3169 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3390));
                            _3391 = (_3390 + 4294967295u) & _3390;
                            uint _3403 = _3401 * 40u;
                            _3416 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3403)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3403 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3403 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3403 + 3u)).x));
                            _3417 = _3416.w;
                            uint _3419 = (_3401 * 40u) + 4u;
                            _3432 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3419)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3419 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3419 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3419 + 3u)).x));
                            uint _3434 = (_3401 * 40u) + 8u;
                            _3444 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3434)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3434 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3434 + 2u)).x));
                            uint _3446 = (_3401 * 40u) + 16u;
                            _3459 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3446)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3446 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3446 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3446 + 3u)).x));
                            uint _3462 = (_3401 * 40u) + 20u;
                            _3475 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3462)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3462 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3462 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3462 + 3u)).x));
                            uint _3477 = (_3401 * 40u) + 24u;
                            vec4 _3490 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3477)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3477 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3477 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3477 + 3u)).x));
                            uint _3496 = (_3401 * 40u) + 28u;
                            vec4 _3509 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3496)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3496 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3496 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3496 + 3u)).x));
                            _3521 = fma(_1882, _3509.z, fma(_1881, _3509.y, _3509.x * _1880)) + _3509.w;
                            _3522 = !((fma(_1882, _3490.z, fma(_1881, _3490.y, _3490.x * _1880)) + _3490.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_3522)
                            {
                                float _3549 = _3416.x - _1880;
                                float _3550 = _3416.y - _1881;
                                float _3551 = _3416.z - _1882;
                                float _3552 = dot(vec3(_3549, _3550, _3551), vec3(_3549, _3550, _3551));
                                float _3555 = inversesqrt(_3552);
                                float _3556 = _3555 * _3549;
                                float _3557 = _3555 * _3550;
                                float _3558 = _3555 * _3551;
                                float _3562 = 1.0 - (_3552 / (_3417 * _3417));
                                float _4729 = isnan(0.0) ? _3562 : (isnan(_3562) ? 0.0 : max(_3562, 0.0));
                                float _3563 = isnan(1.0) ? _4729 : (isnan(_4729) ? 1.0 : min(_4729, 1.0));
                                float _3567 = sqrt(_3552) * _3432.w;
                                float _3569 = 1.39999997615814208984375 / (_3567 + 1.39999997615814208984375);
                                float _3570 = _3569 * _3569;
                                float _3573 = ((1.0 - _3570) * dot(vec3(_3556, _3557, _3558), vec3(_732, _735, _738))) + _3570;
                                float _3576 = _3567 * _3567;
                                float _3580 = (fma(_1882, _3459.z, fma(_1881, _3459.y, _3459.x * _1880)) + _3459.w) / _3521;
                                float _3581 = (fma(_1882, _3475.z, fma(_1881, _3475.y, _3475.x * _1880)) + _3475.w) / _3521;
                                float _3585 = 1.0 - dot(vec2(_3580, _3581), vec2(_3580, _3581));
                                float _4745 = isnan(0.0) ? _3585 : (isnan(_3585) ? 0.0 : max(_3585, 0.0));
                                float _3586 = isnan(1.0) ? _4745 : (isnan(_4745) ? 1.0 : min(_4745, 1.0));
                                float _3587 = _3586 * (((isnan(0.0) ? _3573 : (isnan(_3573) ? 0.0 : max(_3573, 0.0))) * _3563) / ((_3576 * 0.699999988079071044921875) + 1.0));
                                float _3599 = exp2(log2(1.0 / ((_3576 * 3.5) + 5.0)) * 0.25);
                                float _3600 = 1.0 - _792;
                                float _3607 = sqrt(1.0 - ((1.0 - (_3600 * _3600)) * (1.0 - (_3599 * _3599))));
                                float _3608 = _3607 * _3607;
                                float _3609 = _3608 * _3608;
                                float _3610 = _3556 - _3029;
                                float _3611 = _3557 - _3030;
                                float _3612 = _3558 - _3031;
                                float _3616 = inversesqrt(dot(vec3(_3610, _3611, _3612), vec3(_3610, _3611, _3612)));
                                float _3620 = dot(vec3(_732, _735, _738), vec3((-0.0) - _3029, (-0.0) - _3030, (-0.0) - _3031));
                                float _4756 = isnan(0.0) ? _3620 : (isnan(_3620) ? 0.0 : max(_3620, 0.0));
                                float _3623 = isnan(1.0) ? _4756 : (isnan(_4756) ? 1.0 : min(_4756, 1.0));
                                float _3624 = dot(vec3(_732, _735, _738), vec3(_3616 * _3610, _3616 * _3611, _3616 * _3612));
                                float _4767 = isnan(0.0) ? _3624 : (isnan(_3624) ? 0.0 : max(_3624, 0.0));
                                float _3627 = isnan(1.0) ? _4767 : (isnan(_4767) ? 1.0 : min(_4767, 1.0));
                                float _3631 = ((_3627 * _3627) * (_3609 + (-1.0))) + 1.0;
                                float _3632 = _3569 * _3608;
                                float _3633 = _3632 * _3632;
                                float _3639 = ((1.0 - _3633) * dot(vec3(_732, _735, _738), vec3(_3556, _3557, _3558))) + _3633;
                                float _4778 = isnan(0.0) ? _3639 : (isnan(_3639) ? 0.0 : max(_3639, 0.0));
                                float _3640 = isnan(1.0) ? _4778 : (isnan(_4778) ? 1.0 : min(_4778, 1.0));
                                float _3641 = 1.0 - _3608;
                                float _3651 = (0.5 / (((_3640 * ((_3623 * _3641) + _3608)) + 9.9999999392252902907785028219223e-09) + (((_3640 * _3641) + _3608) * _3623))) * _3640;
                                float _4789 = isnan(0.0) ? _3651 : (isnan(_3651) ? 0.0 : max(_3651, 0.0));
                                float _3661 = (_3586 * _3563) * (((_3609 * 3.1415927410125732421875) * (isnan(1.0) ? _4789 : (isnan(_4789) ? 1.0 : min(_4789, 1.0)))) / ((_3631 * _3631) * ((_3576 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_88_pred = _3587 * _3432.z;
                                frontier_phi_88_pred_1 = _3587 * _3432.y;
                                frontier_phi_88_pred_2 = _3587 * _3432.x;
                                frontier_phi_88_pred_3 = _3661 * _3444.z;
                                frontier_phi_88_pred_4 = _3661 * _3444.y;
                                frontier_phi_88_pred_5 = _3661 * _3444.x;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _3670 = frontier_phi_88_pred;
                            _3669 = frontier_phi_88_pred_1;
                            _3668 = frontier_phi_88_pred_2;
                            _3667 = frontier_phi_88_pred_3;
                            _3666 = frontier_phi_88_pred_4;
                            _3665 = frontier_phi_88_pred_5;
                            _3374 = _3668 + _3387;
                            _3375 = _3669 + _3388;
                            _3376 = _3670 + _3389;
                            _3371 = _3665 + _3384;
                            _3372 = _3666 + _3385;
                            _3373 = _3667 + _3386;
                            if (_3391 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3384 = _3371;
                                _3385 = _3372;
                                _3386 = _3373;
                                _3387 = _3374;
                                _3388 = _3375;
                                _3389 = _3376;
                                _3390 = _3391;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _3376;
                        frontier_phi_82_pred_1 = _3375;
                        frontier_phi_82_pred_2 = _3374;
                        frontier_phi_82_pred_3 = _3373;
                        frontier_phi_82_pred_4 = _3372;
                        frontier_phi_82_pred_5 = _3371;
                    }
                    _3014 = frontier_phi_82_pred;
                    _3012 = frontier_phi_82_pred_1;
                    _3010 = frontier_phi_82_pred_2;
                    _3008 = frontier_phi_82_pred_3;
                    _3006 = frontier_phi_82_pred_4;
                    _3004 = frontier_phi_82_pred_5;
                    uint _3170 = _3169 + 1u;
                    if (_3170 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3163 = _3004;
                        _3164 = _3006;
                        _3165 = _3008;
                        _3166 = _3010;
                        _3167 = _3012;
                        _3168 = _3014;
                        _3169 = _3170;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _3010;
                frontier_phi_63_64_ladder_1 = _3014;
                frontier_phi_63_64_ladder_2 = _3012;
                frontier_phi_63_64_ladder_3 = _3008;
                frontier_phi_63_64_ladder_4 = _3006;
                frontier_phi_63_64_ladder_5 = _3004;
            }
            else
            {
                frontier_phi_63_64_ladder = _2888;
                frontier_phi_63_64_ladder_1 = _2892;
                frontier_phi_63_64_ladder_2 = _2890;
                frontier_phi_63_64_ladder_3 = _2886;
                frontier_phi_63_64_ladder_4 = _2884;
                frontier_phi_63_64_ladder_5 = _2882;
            }
            _3003 = frontier_phi_63_64_ladder_5;
            _3005 = frontier_phi_63_64_ladder_4;
            _3007 = frontier_phi_63_64_ladder_3;
            _3009 = frontier_phi_63_64_ladder;
            _3011 = frontier_phi_63_64_ladder_2;
            _3013 = frontier_phi_63_64_ladder_1;
        }
        float _3018 = isnan(1.0) ? _776 : (isnan(_776) ? 1.0 : min(_776, 1.0));
        _2815 = (_3018 * _3009) + _2346;
        _2817 = (_3018 * _3011) + _2348;
        _2819 = (_3018 * _3013) + _2350;
        _2821 = ((_3003 * 0.039999999105930328369140625) * _3018) + _2669;
        _2823 = ((_3005 * 0.039999999105930328369140625) * _3018) + _2671;
        _2825 = ((_3007 * 0.039999999105930328369140625) * _3018) + _2673;
    }
    else
    {
        _2815 = _2346;
        _2817 = _2348;
        _2819 = _2350;
        _2821 = _2669;
        _2823 = _2671;
        _2825 = _2673;
    }
    float _4805 = isnan(0.0) ? _761 : (isnan(_761) ? 0.0 : max(_761, 0.0));
    float _4816 = isnan(0.0) ? _762 : (isnan(_762) ? 0.0 : max(_762, 0.0));
    float _4827 = isnan(0.0) ? _763 : (isnan(_763) ? 0.0 : max(_763, 0.0));
    float _2842 = ((isnan(1.0) ? _4805 : (isnan(_4805) ? 1.0 : min(_4805, 1.0))) * (_2815 + ((isnan(0.0) ? _1533 : (isnan(_1533) ? 0.0 : max(_1533, 0.0))) * _776))) + ((_2821 + ((isnan(0.0) ? _1827 : (isnan(_1827) ? 0.0 : max(_1827, 0.0))) * _1612)) * cbPerFrame._m0[3u].x);
    float _2843 = ((isnan(1.0) ? _4816 : (isnan(_4816) ? 1.0 : min(_4816, 1.0))) * (_2817 + ((isnan(0.0) ? _1536 : (isnan(_1536) ? 0.0 : max(_1536, 0.0))) * _776))) + ((_2823 + ((isnan(0.0) ? _1830 : (isnan(_1830) ? 0.0 : max(_1830, 0.0))) * _1612)) * cbPerFrame._m0[3u].x);
    float _2844 = ((isnan(1.0) ? _4827 : (isnan(_4827) ? 1.0 : min(_4827, 1.0))) * (_2819 + ((isnan(0.0) ? _1539 : (isnan(_1539) ? 0.0 : max(_1539, 0.0))) * _776))) + ((_2825 + ((isnan(0.0) ? _1833 : (isnan(_1833) ? 0.0 : max(_1833, 0.0))) * _1612)) * cbPerFrame._m0[3u].x);
    uint _2845 = _247 + 6u;
    float _2853 = _713 / cbSceneParam._m0[86u].x;
    float _2854 = _714 / cbSceneParam._m0[86u].y;
    vec4 _2868 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2853, _2854, (log2((isnan(cbSceneParam._m0[77u].w) ? _635 : (isnan(_635) ? cbSceneParam._m0[77u].w : min(_635, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2870 = _2868.x;
    float _2871 = _2868.y;
    float _2872 = _2868.z;
    float _2873 = _2868.w;
    float _2945;
    float _2947;
    float _2949;
    float _2951;
    if (_635 > cbSceneParam._m0[78u].w)
    {
        float _2907 = isnan(_635) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _635 : min(cbSceneParam._m0[80u].w, _635));
        float _2908 = _2907 / _635;
        float _2919 = _2908 * _686;
        float _2920 = _687 * _2908;
        float _2921 = (-0.0) - _2920;
        float _2923 = _2908 * _688;
        float _2925 = (cbSceneParam._m0[77u].w * _2921) / _2907;
        float _2926 = _2925 + cbSceneParam._m0[79u].w;
        float _2927 = cbSceneParam._m0[79u].w - _2920;
        float _2933 = sqrt(((_2919 * _2919) + (_2920 * _2920)) + (_2923 * _2923));
        float _2936 = (1.0 - (cbSceneParam._m0[77u].w / _2907)) * _2933;
        float _2941 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2943 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3120;
        if (abs((_2921 - _2925) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3120 = ((((_2926 > 0.0) ? exp2(_2941 * _2926) : (2.0 - exp2(_2943 * _2926))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2936;
        }
        else
        {
            float _3064 = 1.0 / cbSceneParam._m0[80u].x;
            float _3065 = isnan(_2927) ? _2926 : (isnan(_2926) ? _2927 : max(_2926, _2927));
            float _3066 = isnan(_2927) ? _2926 : (isnan(_2926) ? _2927 : min(_2926, _2927));
            float _3075 = isnan(0.0) ? _3065 : (isnan(_3065) ? 0.0 : min(_3065, 0.0));
            float _3076 = isnan(0.0) ? _3066 : (isnan(_3066) ? 0.0 : min(_3066, 0.0));
            _3120 = ((abs(_2933 / _2921) * cbSceneParam._m0[80u].y) * ((((_3075 - _3076) * 2.0) - ((exp2(_2941 * (isnan(0.0) ? _3065 : (isnan(_3065) ? 0.0 : max(_3065, 0.0)))) - exp2(_2941 * (isnan(0.0) ? _3066 : (isnan(_3066) ? 0.0 : max(_3066, 0.0))))) * _3064)) - ((exp2(_2943 * _3075) - exp2(_2943 * _3076)) * _3064))) + (_2936 * cbSceneParam._m0[80u].z);
        }
        vec4 _3122 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2853, _2854, 1.0), 0.0);
        float _3131 = exp2((_3120 * (-1.44269502162933349609375)) * (1.0 - _3122.w));
        float _3132 = log2(_3131);
        float _3148 = log2(_2873);
        _2945 = (exp2(_3148 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3132 * cbSceneParam._m0[78u].x)) * _3122.x) / cbSceneParam._m0[78u].x)) + _2870;
        _2947 = (exp2(_3148 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3132 * cbSceneParam._m0[78u].y)) * _3122.y) / cbSceneParam._m0[78u].y)) + _2871;
        _2949 = (exp2(_3148 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3132 * cbSceneParam._m0[78u].z)) * _3122.z) / cbSceneParam._m0[78u].z)) + _2872;
        _2951 = _3131 * _2873;
    }
    else
    {
        _2945 = _2870;
        _2947 = _2871;
        _2949 = _2872;
        _2951 = _2873;
    }
    bool _3158;
    vec4 _2961;
    vec4 _2983;
    float _2985;
    float _2989;
    float _2990;
    float _2991;
    float _2992;
    bool _3002;
    for (;;)
    {
        _2961 = cbMatDynParam._m0[0u];
        float _2963 = roundEven(_2961.y);
        bool _2964 = _2963 == 3.0;
        float _2965 = log2(_2951);
        float _2972 = exp2(_2965 * cbSceneParam._m0[78u].x) * _2842;
        float _2973 = exp2(_2965 * cbSceneParam._m0[78u].y) * _2843;
        float _2974 = exp2(_2965 * cbSceneParam._m0[78u].z) * _2844;
        float _2981 = _702 + (-0.5);
        _2983 = cbMtdParam._m0[1u];
        _2985 = _2983.y * _2981;
        float _2988 = (_2963 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2989 = _2988 * (_2964 ? _2972 : (_2972 + (cbSceneParam._m0[72u].w * _2945)));
        _2990 = _2988 * (_2964 ? _2973 : (_2973 + (cbSceneParam._m0[72u].w * _2947)));
        _2991 = _2988 * (_2964 ? _2974 : (_2974 + (cbSceneParam._m0[72u].w * _2949)));
        _2992 = _2981 * 0.999000012874603271484375;
        _3002 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3002)
        {
            if ((cbInstanceData._m0[_247 + 7u].x + _2992) < 0.5)
            {
                _3158 = true;
                break;
            }
        }
        uint _3099 = _751 + uint(_2961.w);
        if ((cbInstanceData._m0[_3099].w < 1.0) && ((cbInstanceData._m0[_3099].w + _2992) < 0.5))
        {
            _3158 = true;
            break;
        }
        if ((_2985 + 1.0) < _2983.x)
        {
            _3158 = true;
            break;
        }
        _3158 = false;
        break;
    }
    float _3362;
    if (_3158)
    {
        discard_state = true;
        _3362 = 0.0;
    }
    else
    {
        _3362 = cbInstanceData._m0[_2845].w;
    }
    SV_Target.x = _2989;
    SV_Target.y = _2990;
    SV_Target.z = _2991;
    SV_Target.w = _3362;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2845].w;
    discard_exit();
}


