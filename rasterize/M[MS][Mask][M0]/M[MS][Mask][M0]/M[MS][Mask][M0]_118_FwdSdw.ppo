#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 13) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_22;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_29;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_10;
layout(set = 0, binding = 20) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_6;
layout(set = 0, binding = 23) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_8;
layout(set = 0, binding = 24) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_9;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1535;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _244 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _245 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _246 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _252 = inversesqrt(dot(vec3(_244, _245, _246), vec3(_244, _245, _246)));
    float _259 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _266 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _278 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _280 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _281 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _4121 = isnan(0.0) ? _278 : (isnan(_278) ? 0.0 : max(_278, 0.0));
    float _4132 = isnan(0.0) ? _280 : (isnan(_280) ? 0.0 : max(_280, 0.0));
    float _4143 = isnan(0.0) ? _281 : (isnan(_281) ? 0.0 : max(_281, 0.0));
    uint _291 = uint(roundEven(NORMAL.w)) * 13u;
    uint _296 = _291 + 1u;
    uint _300 = _291 + 2u;
    float _309 = sqrt(((cbInstanceData._m0[_296].x * cbInstanceData._m0[_296].x) + (cbInstanceData._m0[_291].x * cbInstanceData._m0[_291].x)) + (cbInstanceData._m0[_300].x * cbInstanceData._m0[_300].x));
    float _310 = _309 * TEXCOORD.z;
    float _311 = _309 * TEXCOORD.w;
    vec4 _324 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _310) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _311) + cbTextureTilingScale._m0[13u].w));
    vec4 _348 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _353 = _348.x * cbMtdParam._m0[11u].x;
    float _354 = _348.y * cbMtdParam._m0[11u].y;
    float _355 = _348.z * cbMtdParam._m0[11u].z;
    vec4 _374 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _310) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _311) + cbTextureTilingScale._m0[5u].w));
    vec4 _393 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _431 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _433 = _431.x;
    float _445 = dot(vec4(_433, _431.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _462 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _393.x) * 2.0) - ((((_433 - _445) * cbMtdParam._m0[24u].z) + _445) * cbMtdParam._m0[23u].x))) + 1.0;
    float _4154 = isnan(0.0) ? _462 : (isnan(_462) ? 0.0 : max(_462, 0.0));
    float _463 = isnan(1.0) ? _4154 : (isnan(_4154) ? 1.0 : min(_4154, 1.0));
    float _470 = (_463 * ((_374.x * cbMtdParam._m0[12u].x) - _353)) + _353;
    float _471 = (_463 * ((_374.y * cbMtdParam._m0[12u].y) - _354)) + _354;
    float _472 = (_463 * ((_374.z * cbMtdParam._m0[12u].z) - _355)) + _355;
    vec4 _489 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _310) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _311) + cbTextureTilingScale._m0[3u].w));
    vec4 _509 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _511 = _509.x;
    float _521 = dot(vec4(_511, _509.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _535 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _393.y) * 2.0) - ((((_511 - _521) * cbMtdParam._m0[24u].z) + _521) * cbMtdParam._m0[20u].w))) + 1.0;
    float _4165 = isnan(0.0) ? _535 : (isnan(_535) ? 0.0 : max(_535, 0.0));
    float _536 = isnan(1.0) ? _4165 : (isnan(_4165) ? 1.0 : min(_4165, 1.0));
    float _543 = (_536 * ((_489.x * cbMtdParam._m0[13u].x) - _470)) + _470;
    float _544 = (_536 * ((_489.y * cbMtdParam._m0[13u].y) - _471)) + _471;
    float _545 = (_536 * ((_489.z * cbMtdParam._m0[13u].z) - _472)) + _472;
    vec4 _563 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_9, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[24u].x * _310) + cbTextureTilingScale._m0[24u].z, (cbTextureTilingScale._m0[24u].y * _311) + cbTextureTilingScale._m0[24u].w));
    vec4 _580 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[25u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _582 = _580.x;
    float _592 = dot(vec4(_582, _580.yzw), vec4(cbMtdParam._m0[30u].w, cbMtdParam._m0[31u].xy, 0.0));
    float _604 = ((cbMtdParam._m0[25u].x * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.z) - _393.z) * 2.0) - ((((_582 - _592) * cbMtdParam._m0[24u].z) + _592) * cbMtdParam._m0[20u].z))) + 1.0;
    float _4176 = isnan(0.0) ? _604 : (isnan(_604) ? 0.0 : max(_604, 0.0));
    float _605 = isnan(1.0) ? _4176 : (isnan(_4176) ? 1.0 : min(_4176, 1.0));
    float _612 = (_605 * ((_563.x * cbMtdParam._m0[14u].x) - _543)) + _543;
    float _613 = (_605 * ((_563.y * cbMtdParam._m0[14u].y) - _544)) + _544;
    float _614 = (_605 * ((_563.z * cbMtdParam._m0[14u].z) - _545)) + _545;
    float _618 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _324.x) * _612;
    float _621 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _324.y) * _613;
    float _624 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _324.z) * _614;
    float _631 = ((_612 - _618) * (isnan(1.0) ? _4121 : (isnan(_4121) ? 1.0 : min(_4121, 1.0)))) + _618;
    float _632 = ((_613 - _621) * (isnan(1.0) ? _4132 : (isnan(_4132) ? 1.0 : min(_4132, 1.0)))) + _621;
    float _633 = ((_614 - _624) * (isnan(1.0) ? _4143 : (isnan(_4143) ? 1.0 : min(_4143, 1.0)))) + _624;
    vec4 _650 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _310) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _311) + cbTextureTilingScale._m0[20u].w));
    vec4 _673 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _310) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _311) + cbTextureTilingScale._m0[4u].w));
    vec4 _690 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _692 = _690.x;
    float _693 = _690.y;
    float _694 = _690.z;
    float _701 = ((_673.x - _692) * _463) + _692;
    float _702 = ((_673.y - _693) * _463) + _693;
    float _703 = ((_673.z - _694) * _463) + _694;
    vec4 _715 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _310) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _311) + cbTextureTilingScale._m0[2u].w));
    float _726 = ((_715.x - _701) * _536) + _701;
    float _727 = ((_715.y - _702) * _536) + _702;
    float _728 = ((_715.z - _703) * _536) + _703;
    vec4 _740 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[23u].x * _310) + cbTextureTilingScale._m0[23u].z, (cbTextureTilingScale._m0[23u].y * _311) + cbTextureTilingScale._m0[23u].w));
    float _753 = ((_740.z - _728) * _605) + _728;
    float _756 = ((((_740.x - _726) * _605) + _726) * 2.0) + (-1.0);
    float _757 = ((((_740.y - _727) * _605) + _727) * 2.0) + (-1.0);
    float _758 = dot(vec2(_756, _757), vec2(_756, _757));
    float _4187 = isnan(0.0) ? _758 : (isnan(_758) ? 0.0 : max(_758, 0.0));
    float _763 = sqrt(1.0 - (isnan(1.0) ? _4187 : (isnan(_4187) ? 1.0 : min(_4187, 1.0))));
    vec4 _777 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _802 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _310) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _311) + cbTextureTilingScale._m0[11u].w));
    float _804 = _802.x;
    float _805 = 1.0 - _804;
    float _811 = isnan(-1.0) ? cbMtdParam._m0[24u].x : (isnan(cbMtdParam._m0[24u].x) ? (-1.0) : max(cbMtdParam._m0[24u].x, -1.0));
    float _814 = ((isnan(0.0) ? _811 : (isnan(_811) ? 0.0 : min(_811, 0.0))) * TEXCOORD_8.x) + TEXCOORD_8.w;
    float _823 = (_814 - ((((((_804 - _805) * cbMtdParam._m0[24u].w) + _805) + 0.00999999977648258209228515625) * cbMtdParam._m0[21u].z) * (1.0 - _814))) * (cbMtdParam._m0[21u].w + 1.0);
    float _4208 = isnan(0.0) ? _823 : (isnan(_823) ? 0.0 : max(_823, 0.0));
    float _824 = isnan(1.0) ? _4208 : (isnan(_4208) ? 1.0 : min(_4208, 1.0));
    float _831 = (_824 * (cbMtdParam._m0[17u].x - _631)) + _631;
    float _832 = (_824 * (cbMtdParam._m0[17u].y - _632)) + _632;
    float _833 = (_824 * (cbMtdParam._m0[17u].z - _633)) + _633;
    vec4 _845 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _310) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _311) + cbTextureTilingScale._m0[19u].w));
    float _847 = _845.x;
    float _848 = 1.0 - _847;
    float _875 = (TEXCOORD_8.x - ((cbMtdParam._m0[22u].w * (1.0 - TEXCOORD_8.x)) * ((((_847 - _848) * cbMtdParam._m0[24u].y) + _848) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _4219 = isnan(0.0) ? _875 : (isnan(_875) ? 0.0 : max(_875, 0.0));
    float _876 = isnan(1.0) ? _4219 : (isnan(_4219) ? 1.0 : min(_4219, 1.0));
    float _884 = ((((cbMtdParam._m0[10u].x - _831) * TEXCOORD_8.x) * cbMtdParam._m0[23u].w) * _876) + _831;
    float _885 = ((((cbMtdParam._m0[10u].y - _832) * TEXCOORD_8.y) * cbMtdParam._m0[23u].w) * _876) + _832;
    float _886 = (((cbMtdParam._m0[23u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _833)) * _876) + _833;
    float _891 = (((_650.z - _753) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _753;
    float _895 = ((_777.z - _891) * cbMtdParam._m0[19u].w) + _891;
    vec4 _909 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _310) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _311) + cbTextureTilingScale._m0[15u].w));
    float _916 = (_909.x * 2.0) + (-1.0);
    float _917 = (_909.y * 2.0) + (-1.0);
    float _918 = dot(vec2(_916, _917), vec2(_916, _917));
    float _4230 = isnan(0.0) ? _918 : (isnan(_918) ? 0.0 : max(_918, 0.0));
    float _926 = (_824 * (_909.z - _895)) + _895;
    float _929 = ((cbMtdParam._m0[23u].y - _926) * _876) + _926;
    vec4 _948 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _310) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _311) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _954 = (_948.x * 2.0) + (-1.0);
    float _955 = (_948.y * 2.0) + (-1.0);
    float _956 = dot(vec2(_954, _955), vec2(_954, _955));
    float _4241 = isnan(0.0) ? _956 : (isnan(_956) ? 0.0 : max(_956, 0.0));
    float _970 = (_756 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_650.x * 2.0) + (-1.0)))) + (((_777.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _971 = (_757 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_650.y * 2.0) + (-1.0)))) + (((_777.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _983 = (((_916 - _970) + (cbMtdParam._m0[21u].x * _970)) * _824) + _970;
    float _984 = (((_917 - _971) + (cbMtdParam._m0[21u].x * _971)) * _824) + _971;
    float _985 = (_824 * (sqrt(1.0 - (isnan(1.0) ? _4230 : (isnan(_4230) ? 1.0 : min(_4230, 1.0)))) - _763)) + _763;
    float _996 = (((_954 - _983) + (_983 * cbMtdParam._m0[22u].z)) * _876) + _983;
    float _997 = (((_955 - _984) + (_984 * cbMtdParam._m0[22u].z)) * _876) + _984;
    float _998 = ((sqrt(1.0 - (isnan(1.0) ? _4241 : (isnan(_4241) ? 1.0 : min(_4241, 1.0)))) - _985) * _876) + _985;
    float _1000 = cbMtdParam._m0[22u].x + _777.w;
    float _1003 = fma(_998, _259 * NORMAL.x, fma(_997, _266 * TANGENT.x, (_252 * _244) * _996));
    float _1006 = fma(_998, _259 * NORMAL.y, fma(_997, _266 * TANGENT.y, (_252 * _245) * _996));
    float _1009 = fma(_998, _259 * NORMAL.z, fma(_997, _266 * TANGENT.z, (_252 * _246) * _996));
    float _1013 = inversesqrt(dot(vec3(_1003, _1006, _1009), vec3(_1003, _1006, _1009)));
    float _1014 = _1013 * _1003;
    float _1015 = _1013 * _1006;
    float _1016 = _1013 * _1009;
    float _4252 = isnan(0.0) ? _929 : (isnan(_929) ? 0.0 : max(_929, 0.0));
    float _1017 = isnan(1.0) ? _4252 : (isnan(_4252) ? 1.0 : min(_4252, 1.0));
    float _4263 = isnan(0.0) ? _1000 : (isnan(_1000) ? 0.0 : max(_1000, 0.0));
    float _4274 = isnan(0.0) ? _884 : (isnan(_884) ? 0.0 : max(_884, 0.0));
    float _4285 = isnan(0.0) ? _885 : (isnan(_885) ? 0.0 : max(_885, 0.0));
    float _4296 = isnan(0.0) ? _886 : (isnan(_886) ? 0.0 : max(_886, 0.0));
    float _1035 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _1076 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _1086 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _1076);
    float _1087 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _1076);
    float _1088 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _1076);
    float _1092 = inversesqrt(dot(vec3(_1086, _1087, _1088), vec3(_1086, _1087, _1088)));
    float _1093 = _1086 * _1092;
    float _1094 = _1087 * _1092;
    float _1095 = _1088 * _1092;
    float _1101 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1102 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1120 = fma(_1016, cbSceneParam._m0[5u].z, fma(_1015, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _1014));
    float _1123 = fma(_1016, cbSceneParam._m0[6u].z, fma(_1015, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _1014));
    float _1126 = fma(_1016, cbSceneParam._m0[7u].z, fma(_1015, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _1014));
    uint _1140 = (_291 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _1146 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4274 : (isnan(_4274) ? 1.0 : min(_4274, 1.0)))) * cbInstanceData._m0[_1140].x;
    float _1147 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4285 : (isnan(_4285) ? 1.0 : min(_4285, 1.0)))) * cbInstanceData._m0[_1140].y;
    float _1148 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4296 : (isnan(_4296) ? 1.0 : min(_4296, 1.0)))) * cbInstanceData._m0[_1140].z;
    float _4307 = isnan(0.0) ? _1146 : (isnan(_1146) ? 0.0 : max(_1146, 0.0));
    float _1149 = isnan(1.0) ? _4307 : (isnan(_4307) ? 1.0 : min(_4307, 1.0));
    float _4318 = isnan(0.0) ? _1147 : (isnan(_1147) ? 0.0 : max(_1147, 0.0));
    float _1150 = isnan(1.0) ? _4318 : (isnan(_4318) ? 1.0 : min(_4318, 1.0));
    float _4329 = isnan(0.0) ? _1148 : (isnan(_1148) ? 0.0 : max(_1148, 0.0));
    float _1151 = isnan(1.0) ? _4329 : (isnan(_4329) ? 1.0 : min(_4329, 1.0));
    vec4 _1160 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1101, cbSceneParam._m0[86u].y * _1102));
    float _1164 = ((isnan(1.0) ? _4263 : (isnan(_4263) ? 1.0 : min(_4263, 1.0))) * TEXCOORD_5.w) * _1160.x;
    float _1165 = dot(vec3(_1014, _1015, _1016), vec3(_1093, _1094, _1095));
    float _1168 = _1165 * 2.0;
    float _1172 = (_1168 * _1014) - _1093;
    float _1173 = (_1168 * _1015) - _1094;
    float _1174 = (_1168 * _1016) - _1095;
    float _1178 = abs(dot(vec3(_1093, _1094, _1095), vec3(_1014, _1015, _1016)));
    float _4340 = isnan(0.0) ? _1178 : (isnan(_1178) ? 0.0 : max(_1178, 0.0));
    float _1180 = sqrt(_1017);
    float _1193 = exp2((_1180 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4340 : (isnan(_4340) ? 1.0 : min(_4340, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1180 * 3.0));
    float _1225 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1229 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1233 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1534;
    float _1536;
    float _1537;
    float _1538;
    float _1539;
    float _1540;
    float _1541;
    float _1542;
    float _1543;
    float _1544;
    float _1545;
    float _1546;
    float _1547;
    float _1548;
    float _1549;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1259 = fma(_1233, cbModelParam._m0[26u].z, fma(_1229, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1225));
        float _1263 = fma(_1233, cbModelParam._m0[27u].z, fma(_1229, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1225));
        float _1267 = fma(_1233, cbModelParam._m0[28u].z, fma(_1229, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1225));
        float _1292 = _1225 + _1014;
        float _1293 = _1229 + _1015;
        float _1294 = _1233 + _1016;
        float _1304 = fma(_1294, cbModelParam._m0[26u].z, fma(_1293, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1292)) - _1259;
        float _1305 = fma(_1294, cbModelParam._m0[27u].z, fma(_1293, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1292)) - _1263;
        float _1306 = fma(_1294, cbModelParam._m0[28u].z, fma(_1293, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1292)) - _1267;
        float _1310 = inversesqrt(dot(vec3(_1304, _1305, _1306), vec3(_1304, _1305, _1306)));
        float _1323 = ((_1310 * _1304) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1259 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1324 = ((_1310 * _1305) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1263 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1325 = ((_1310 * _1306) / cbModelParam._m0[34u].z) + ((((((_1267 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1328 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1323, _1324, _1325), 0.0);
        vec4 _1335 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1323, _1324, _1325), 0.0);
        vec4 _1342 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1323, _1324, _1325), 0.0);
        vec4 _1349 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1323, _1324, _1325), 0.0);
        float _1362 = exp2((_1328.w + (-0.5)) * 20.0) * 2.0;
        float _1363 = _1362 * (_1328.x + (-0.5));
        float _1364 = _1362 * (_1328.y + (-0.5));
        float _1365 = _1362 * (_1328.z + (-0.5));
        float _1372 = exp2((_1335.w + (-0.5)) * 20.0) * 2.0;
        float _1373 = _1372 * (_1335.x + (-0.5));
        float _1374 = _1372 * (_1335.y + (-0.5));
        float _1375 = _1372 * (_1335.z + (-0.5));
        float _1382 = exp2((_1342.w + (-0.5)) * 20.0) * 2.0;
        float _1383 = _1382 * (_1342.x + (-0.5));
        float _1384 = _1382 * (_1342.y + (-0.5));
        float _1385 = _1382 * (_1342.z + (-0.5));
        float _1392 = exp2((_1349.w + (-0.5)) * 20.0) * 2.0;
        float _1393 = _1392 * (_1349.x + (-0.5));
        float _1394 = _1392 * (_1349.y + (-0.5));
        float _1395 = _1392 * (_1349.z + (-0.5));
        float _1396 = isnan(0.0) ? _1393 : (isnan(_1393) ? 0.0 : max(_1393, 0.0));
        float _1397 = isnan(0.0) ? _1394 : (isnan(_1394) ? 0.0 : max(_1394, 0.0));
        float _1398 = isnan(0.0) ? _1395 : (isnan(_1395) ? 0.0 : max(_1395, 0.0));
        float _1399 = _1363 * 0.5;
        float _1400 = _1373 * 0.5;
        float _1401 = _1383 * 0.5;
        float _1402 = dot(vec3(_1399, _1400, _1401), vec3(_1399, _1400, _1401));
        float _1407 = (_1402 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1402);
        float _1416 = (dot(vec3(_1014, _1015, _1016), vec3(_1407 * _1399, _1407 * _1400, _1407 * _1401)) + 1.0) * 0.5;
        float _4366 = isnan(0.0) ? _1416 : (isnan(_1416) ? 0.0 : max(_1416, 0.0));
        float _1426 = sqrt(((_1400 * _1400) + (_1399 * _1399)) + (_1401 * _1401)) / (_1396 + 9.9999997473787516355514526367188e-06);
        float _4377 = isnan(0.0) ? _1426 : (isnan(_1426) ? 0.0 : max(_1426, 0.0));
        float _1427 = isnan(1.0) ? _4377 : (isnan(_4377) ? 1.0 : min(_4377, 1.0));
        float _1428 = _1427 * 2.0;
        float _1432 = (1.0 - _1427) / (_1427 + 1.0);
        float _4388 = isnan(0.0) ? _1432 : (isnan(_1432) ? 0.0 : max(_1432, 0.0));
        float _1433 = isnan(1.0) ? _4388 : (isnan(_4388) ? 1.0 : min(_4388, 1.0));
        float _1442 = ((((1.0 - _1433) * (_1428 + 2.0)) * exp2(log2(isnan(1.0) ? _4366 : (isnan(_4366) ? 1.0 : min(_4366, 1.0))) * (_1428 + 1.0))) + _1433) * _1396;
        float _1443 = _1364 * 0.5;
        float _1444 = _1374 * 0.5;
        float _1445 = _1384 * 0.5;
        float _1446 = dot(vec3(_1443, _1444, _1445), vec3(_1443, _1444, _1445));
        float _1451 = (_1446 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1446);
        float _1459 = (dot(vec3(_1014, _1015, _1016), vec3(_1451 * _1443, _1451 * _1444, _1451 * _1445)) + 1.0) * 0.5;
        float _4399 = isnan(0.0) ? _1459 : (isnan(_1459) ? 0.0 : max(_1459, 0.0));
        float _1468 = sqrt(((_1444 * _1444) + (_1443 * _1443)) + (_1445 * _1445)) / (_1397 + 9.9999997473787516355514526367188e-06);
        float _4410 = isnan(0.0) ? _1468 : (isnan(_1468) ? 0.0 : max(_1468, 0.0));
        float _1469 = isnan(1.0) ? _4410 : (isnan(_4410) ? 1.0 : min(_4410, 1.0));
        float _1470 = _1469 * 2.0;
        float _1474 = (1.0 - _1469) / (_1469 + 1.0);
        float _4421 = isnan(0.0) ? _1474 : (isnan(_1474) ? 0.0 : max(_1474, 0.0));
        float _1475 = isnan(1.0) ? _4421 : (isnan(_4421) ? 1.0 : min(_4421, 1.0));
        float _1484 = ((((1.0 - _1475) * (_1470 + 2.0)) * exp2(log2(isnan(1.0) ? _4399 : (isnan(_4399) ? 1.0 : min(_4399, 1.0))) * (_1470 + 1.0))) + _1475) * _1397;
        float _1485 = _1365 * 0.5;
        float _1486 = _1375 * 0.5;
        float _1487 = _1385 * 0.5;
        float _1488 = dot(vec3(_1485, _1486, _1487), vec3(_1485, _1486, _1487));
        float _1493 = (_1488 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1488);
        float _1501 = (dot(vec3(_1014, _1015, _1016), vec3(_1493 * _1485, _1493 * _1486, _1493 * _1487)) + 1.0) * 0.5;
        float _4432 = isnan(0.0) ? _1501 : (isnan(_1501) ? 0.0 : max(_1501, 0.0));
        float _1510 = sqrt(((_1486 * _1486) + (_1485 * _1485)) + (_1487 * _1487)) / (_1398 + 9.9999997473787516355514526367188e-06);
        float _4443 = isnan(0.0) ? _1510 : (isnan(_1510) ? 0.0 : max(_1510, 0.0));
        float _1511 = isnan(1.0) ? _4443 : (isnan(_4443) ? 1.0 : min(_4443, 1.0));
        float _1512 = _1511 * 2.0;
        float _1516 = (1.0 - _1511) / (_1511 + 1.0);
        float _4454 = isnan(0.0) ? _1516 : (isnan(_1516) ? 0.0 : max(_1516, 0.0));
        float _1517 = isnan(1.0) ? _4454 : (isnan(_4454) ? 1.0 : min(_4454, 1.0));
        float _1526 = ((((1.0 - _1517) * (_1512 + 2.0)) * exp2(log2(isnan(1.0) ? _4432 : (isnan(_4432) ? 1.0 : min(_4432, 1.0))) * (_1512 + 1.0))) + _1517) * _1398;
        _1534 = _1365;
        _1536 = _1364;
        _1537 = _1363;
        _1538 = _1375;
        _1539 = _1374;
        _1540 = _1373;
        _1541 = _1385;
        _1542 = _1384;
        _1543 = _1383;
        _1544 = _1398;
        _1545 = _1397;
        _1546 = _1396;
        _1547 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1442 : (isnan(_1442) ? 0.0 : max(_1442, 0.0)));
        _1548 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1484 : (isnan(_1484) ? 0.0 : max(_1484, 0.0)));
        _1549 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1526 : (isnan(_1526) ? 0.0 : max(_1526, 0.0)));
    }
    else
    {
        _1534 = _1535;
        _1536 = _1535;
        _1537 = _1535;
        _1538 = _1535;
        _1539 = _1535;
        _1540 = _1535;
        _1541 = _1535;
        _1542 = _1535;
        _1543 = _1535;
        _1544 = _1535;
        _1545 = _1535;
        _1546 = _1535;
        _1547 = 0.0;
        _1548 = 0.0;
        _1549 = 0.0;
    }
    float _1841;
    float _1842;
    float _1843;
    float _1844;
    float _1845;
    float _1846;
    float _1847;
    float _1848;
    float _1849;
    float _1850;
    float _1851;
    float _1852;
    float _1853;
    float _1854;
    float _1855;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1572 = fma(_1233, cbModelParam._m0[30u].z, fma(_1229, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1225));
        float _1576 = fma(_1233, cbModelParam._m0[31u].z, fma(_1229, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1225));
        float _1580 = fma(_1233, cbModelParam._m0[32u].z, fma(_1229, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1225));
        float _1603 = _1225 + _1014;
        float _1604 = _1229 + _1015;
        float _1605 = _1233 + _1016;
        float _1615 = fma(_1605, cbModelParam._m0[30u].z, fma(_1604, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1603)) - _1572;
        float _1616 = fma(_1605, cbModelParam._m0[31u].z, fma(_1604, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1603)) - _1576;
        float _1617 = fma(_1605, cbModelParam._m0[32u].z, fma(_1604, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1603)) - _1580;
        float _1621 = inversesqrt(dot(vec3(_1615, _1616, _1617), vec3(_1615, _1616, _1617)));
        float _1634 = ((_1621 * _1615) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1572 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1635 = ((_1621 * _1616) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1576 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1636 = ((_1621 * _1617) / cbModelParam._m0[35u].z) + ((((((_1580 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1638 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1634, _1635, _1636), 0.0);
        vec4 _1645 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1634, _1635, _1636), 0.0);
        vec4 _1652 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1634, _1635, _1636), 0.0);
        vec4 _1659 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1634, _1635, _1636), 0.0);
        float _1671 = exp2((_1638.w + (-0.5)) * 20.0) * 2.0;
        float _1672 = _1671 * (_1638.x + (-0.5));
        float _1673 = _1671 * (_1638.y + (-0.5));
        float _1674 = _1671 * (_1638.z + (-0.5));
        float _1681 = exp2((_1645.w + (-0.5)) * 20.0) * 2.0;
        float _1682 = _1681 * (_1645.x + (-0.5));
        float _1683 = _1681 * (_1645.y + (-0.5));
        float _1684 = _1681 * (_1645.z + (-0.5));
        float _1691 = exp2((_1652.w + (-0.5)) * 20.0) * 2.0;
        float _1692 = _1691 * (_1652.x + (-0.5));
        float _1693 = _1691 * (_1652.y + (-0.5));
        float _1694 = _1691 * (_1652.z + (-0.5));
        float _1701 = exp2((_1659.w + (-0.5)) * 20.0) * 2.0;
        float _1702 = _1701 * (_1659.x + (-0.5));
        float _1703 = _1701 * (_1659.y + (-0.5));
        float _1704 = _1701 * (_1659.z + (-0.5));
        float _1705 = isnan(0.0) ? _1702 : (isnan(_1702) ? 0.0 : max(_1702, 0.0));
        float _1706 = isnan(0.0) ? _1703 : (isnan(_1703) ? 0.0 : max(_1703, 0.0));
        float _1707 = isnan(0.0) ? _1704 : (isnan(_1704) ? 0.0 : max(_1704, 0.0));
        float _1708 = _1672 * 0.5;
        float _1709 = _1682 * 0.5;
        float _1710 = _1692 * 0.5;
        float _1711 = dot(vec3(_1708, _1709, _1710), vec3(_1708, _1709, _1710));
        float _1716 = (_1711 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1711);
        float _1724 = (dot(vec3(_1014, _1015, _1016), vec3(_1716 * _1708, _1716 * _1709, _1716 * _1710)) + 1.0) * 0.5;
        float _4495 = isnan(0.0) ? _1724 : (isnan(_1724) ? 0.0 : max(_1724, 0.0));
        float _1733 = sqrt(((_1709 * _1709) + (_1708 * _1708)) + (_1710 * _1710)) / (_1705 + 9.9999997473787516355514526367188e-06);
        float _4506 = isnan(0.0) ? _1733 : (isnan(_1733) ? 0.0 : max(_1733, 0.0));
        float _1734 = isnan(1.0) ? _4506 : (isnan(_4506) ? 1.0 : min(_4506, 1.0));
        float _1735 = _1734 * 2.0;
        float _1739 = (1.0 - _1734) / (_1734 + 1.0);
        float _4517 = isnan(0.0) ? _1739 : (isnan(_1739) ? 0.0 : max(_1739, 0.0));
        float _1740 = isnan(1.0) ? _4517 : (isnan(_4517) ? 1.0 : min(_4517, 1.0));
        float _1749 = ((((1.0 - _1740) * (_1735 + 2.0)) * exp2(log2(isnan(1.0) ? _4495 : (isnan(_4495) ? 1.0 : min(_4495, 1.0))) * (_1735 + 1.0))) + _1740) * _1705;
        float _1750 = _1673 * 0.5;
        float _1751 = _1683 * 0.5;
        float _1752 = _1693 * 0.5;
        float _1753 = dot(vec3(_1750, _1751, _1752), vec3(_1750, _1751, _1752));
        float _1758 = (_1753 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1753);
        float _1766 = (dot(vec3(_1014, _1015, _1016), vec3(_1758 * _1750, _1758 * _1751, _1758 * _1752)) + 1.0) * 0.5;
        float _4528 = isnan(0.0) ? _1766 : (isnan(_1766) ? 0.0 : max(_1766, 0.0));
        float _1775 = sqrt(((_1751 * _1751) + (_1750 * _1750)) + (_1752 * _1752)) / (_1706 + 9.9999997473787516355514526367188e-06);
        float _4539 = isnan(0.0) ? _1775 : (isnan(_1775) ? 0.0 : max(_1775, 0.0));
        float _1776 = isnan(1.0) ? _4539 : (isnan(_4539) ? 1.0 : min(_4539, 1.0));
        float _1777 = _1776 * 2.0;
        float _1781 = (1.0 - _1776) / (_1776 + 1.0);
        float _4550 = isnan(0.0) ? _1781 : (isnan(_1781) ? 0.0 : max(_1781, 0.0));
        float _1782 = isnan(1.0) ? _4550 : (isnan(_4550) ? 1.0 : min(_4550, 1.0));
        float _1791 = ((((1.0 - _1782) * (_1777 + 2.0)) * exp2(log2(isnan(1.0) ? _4528 : (isnan(_4528) ? 1.0 : min(_4528, 1.0))) * (_1777 + 1.0))) + _1782) * _1706;
        float _1792 = _1674 * 0.5;
        float _1793 = _1684 * 0.5;
        float _1794 = _1694 * 0.5;
        float _1795 = dot(vec3(_1792, _1793, _1794), vec3(_1792, _1793, _1794));
        float _1800 = (_1795 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1795);
        float _1808 = (dot(vec3(_1014, _1015, _1016), vec3(_1800 * _1792, _1800 * _1793, _1800 * _1794)) + 1.0) * 0.5;
        float _4561 = isnan(0.0) ? _1808 : (isnan(_1808) ? 0.0 : max(_1808, 0.0));
        float _1817 = sqrt(((_1793 * _1793) + (_1792 * _1792)) + (_1794 * _1794)) / (_1707 + 9.9999997473787516355514526367188e-06);
        float _4572 = isnan(0.0) ? _1817 : (isnan(_1817) ? 0.0 : max(_1817, 0.0));
        float _1818 = isnan(1.0) ? _4572 : (isnan(_4572) ? 1.0 : min(_4572, 1.0));
        float _1819 = _1818 * 2.0;
        float _1823 = (1.0 - _1818) / (_1818 + 1.0);
        float _4583 = isnan(0.0) ? _1823 : (isnan(_1823) ? 0.0 : max(_1823, 0.0));
        float _1824 = isnan(1.0) ? _4583 : (isnan(_4583) ? 1.0 : min(_4583, 1.0));
        float _1833 = ((((1.0 - _1824) * (_1819 + 2.0)) * exp2(log2(isnan(1.0) ? _4561 : (isnan(_4561) ? 1.0 : min(_4561, 1.0))) * (_1819 + 1.0))) + _1824) * _1707;
        _1841 = _1674;
        _1842 = _1673;
        _1843 = _1672;
        _1844 = _1684;
        _1845 = _1683;
        _1846 = _1682;
        _1847 = _1694;
        _1848 = _1693;
        _1849 = _1692;
        _1850 = _1707;
        _1851 = _1706;
        _1852 = _1705;
        _1853 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1749 : (isnan(_1749) ? 0.0 : max(_1749, 0.0)));
        _1854 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1791 : (isnan(_1791) ? 0.0 : max(_1791, 0.0)));
        _1855 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1833 : (isnan(_1833) ? 0.0 : max(_1833, 0.0)));
    }
    else
    {
        _1841 = _1535;
        _1842 = _1535;
        _1843 = _1535;
        _1844 = _1535;
        _1845 = _1535;
        _1846 = _1535;
        _1847 = _1535;
        _1848 = _1535;
        _1849 = _1535;
        _1850 = _1535;
        _1851 = _1535;
        _1852 = _1535;
        _1853 = 0.0;
        _1854 = 0.0;
        _1855 = 0.0;
    }
    float _1865 = (cbModelParam._m0[1u].x * (_1853 - _1547)) + _1547;
    float _1866 = (cbModelParam._m0[1u].x * (_1854 - _1548)) + _1548;
    float _1867 = (cbModelParam._m0[1u].x * (_1855 - _1549)) + _1549;
    float _1888 = fma(_1867, cbSceneParam._m0[89u].z, fma(_1866, cbSceneParam._m0[89u].y, _1865 * cbSceneParam._m0[89u].x));
    float _1891 = fma(_1867, cbSceneParam._m0[90u].z, fma(_1866, cbSceneParam._m0[90u].y, _1865 * cbSceneParam._m0[90u].x));
    float _1894 = fma(_1867, cbSceneParam._m0[91u].z, fma(_1866, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1865));
    float _1909 = _1172 * 0.5;
    float _1910 = _1173 * 0.5;
    float _1911 = _1174 * 0.5;
    float _1912 = dot(vec4(_1909, _1910, _1911, 1.0), vec4(_1843, _1846, _1849, _1852));
    float _1915 = dot(vec4(_1909, _1910, _1911, 1.0), vec4(_1842, _1845, _1848, _1851));
    float _1918 = dot(vec4(_1909, _1910, _1911, 1.0), vec4(_1841, _1844, _1847, _1850));
    float _1952;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1925 = dot(vec4(_1909, _1910, _1911, 1.0), vec4(_1534, _1538, _1541, _1544));
        float _1929 = dot(vec4(_1909, _1910, _1911, 1.0), vec4(_1536, _1539, _1542, _1545));
        float _1933 = dot(vec4(_1909, _1910, _1911, 1.0), vec4(_1537, _1540, _1543, _1546));
        float _1940 = dot(vec4(cbModelParam._m0[39u]), vec4(_1909, _1910, _1911, 1.0));
        _1952 = dot(vec3(isnan(0.0) ? _1933 : (isnan(_1933) ? 0.0 : max(_1933, 0.0)), isnan(0.0) ? _1929 : (isnan(_1929) ? 0.0 : max(_1929, 0.0)), isnan(0.0) ? _1925 : (isnan(_1925) ? 0.0 : max(_1925, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1940) ? 0.0 : (isnan(0.0) ? _1940 : max(0.0, _1940))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1952 = 1.0;
    }
    float _1963;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1954 = dot(vec4(cbModelParam._m0[40u]), vec4(_1909, _1910, _1911, 1.0));
        _1963 = dot(vec3(isnan(0.0) ? _1912 : (isnan(_1912) ? 0.0 : max(_1912, 0.0)), isnan(0.0) ? _1915 : (isnan(_1915) ? 0.0 : max(_1915, 0.0)), isnan(0.0) ? _1918 : (isnan(_1918) ? 0.0 : max(_1918, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1954) ? 0.0 : (isnan(0.0) ? _1954 : max(0.0, _1954))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1963 = 1.0;
    }
    float _1967 = (_1963 * cbModelParam._m0[1u].x) + (_1952 * (1.0 - cbModelParam._m0[1u].x));
    float _1977 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _1017);
    float _1978 = isnan(_1977) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1977 : min(cbModelParam._m0[25u].z, _1977));
    float _2058;
    float _2060;
    float _2062;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _2025 = fma(_1233, cbModelParam._m0[13u].z, fma(_1229, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1225)) + cbModelParam._m0[13u].w;
        float _2029 = fma(_1233, cbModelParam._m0[14u].z, fma(_1229, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1225)) + cbModelParam._m0[14u].w;
        float _2033 = fma(_1233, cbModelParam._m0[15u].z, fma(_1229, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1225)) + cbModelParam._m0[15u].w;
        float _2036 = fma(_1174, cbModelParam._m0[13u].z, fma(_1173, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1172));
        float _2039 = fma(_1174, cbModelParam._m0[14u].z, fma(_1173, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1172));
        float _2042 = fma(_1174, cbModelParam._m0[15u].z, fma(_1173, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1172));
        float _2070;
        if (_2036 > 0.0)
        {
            _2070 = abs((1.0 - _2025) / _2036);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_2036 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_2025 + 1.0) / _2036);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _2070 = frontier_phi_14_12_ladder;
        }
        float _2240;
        if (_2039 > 0.0)
        {
            _2240 = abs((1.0 - _2029) / _2039);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_2039 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_2029 + 1.0) / _2039);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2240 = frontier_phi_23_19_ladder;
        }
        float _2535;
        if (_2042 > 0.0)
        {
            _2535 = abs((1.0 - _2033) / _2042);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_2042 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_2033 + 1.0) / _2042);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2535 = frontier_phi_35_30_ladder;
        }
        float _2537 = isnan(_2240) ? _2070 : (isnan(_2070) ? _2240 : min(_2070, _2240));
        float _2538 = isnan(_2535) ? _2537 : (isnan(_2537) ? _2535 : min(_2537, _2535));
        float _2542 = (_2538 * _2036) + _2025;
        float _2543 = (_2538 * _2039) + _2029;
        float _2544 = (_2538 * _2042) + _2033;
        float _2545 = _2538 * 9.9999997473787516355514526367188e-05;
        float _2547 = (-1.0) - _2545;
        float _2549 = _2545 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2544 > _2549) || ((_2544 < _2547) || ((_2543 > _2549) || ((_2543 < _2547) || ((_2542 < _2547) || (_2542 > _2549))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2689 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2544, cbModelParam._m0[9u].z, fma(_2543, cbModelParam._m0[9u].y, _2542 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2544, cbModelParam._m0[10u].z, fma(_2543, cbModelParam._m0[10u].y, _2542 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2544, cbModelParam._m0[11u].z, fma(_2543, cbModelParam._m0[11u].y, _2542 * cbModelParam._m0[11u].x))), _1978);
            frontier_phi_13_35_ladder = _2689.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2689.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2689.x * cbModelParam._m0[1u].y;
        }
        _2058 = frontier_phi_13_35_ladder_2;
        _2060 = frontier_phi_13_35_ladder_1;
        _2062 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _2046 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1172, _1173, _1174), _1978);
        _2058 = _2046.x * cbModelParam._m0[1u].y;
        _2060 = _2046.y * cbModelParam._m0[1u].y;
        _2062 = _2046.z * cbModelParam._m0[1u].y;
    }
    float _2066 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _1017);
    float _2067 = isnan(_2066) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2066 : min(cbModelParam._m0[25u].w, _2066));
    float _2157;
    float _2159;
    float _2161;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2121 = fma(_1233, cbModelParam._m0[21u].z, fma(_1229, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1225)) + cbModelParam._m0[21u].w;
        float _2125 = fma(_1233, cbModelParam._m0[22u].z, fma(_1229, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1225)) + cbModelParam._m0[22u].w;
        float _2129 = fma(_1233, cbModelParam._m0[23u].z, fma(_1229, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1225)) + cbModelParam._m0[23u].w;
        float _2132 = fma(_1174, cbModelParam._m0[21u].z, fma(_1173, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1172));
        float _2135 = fma(_1174, cbModelParam._m0[22u].z, fma(_1173, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1172));
        float _2138 = fma(_1174, cbModelParam._m0[23u].z, fma(_1173, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1172));
        float _2245;
        if (_2132 > 0.0)
        {
            _2245 = abs((1.0 - _2121) / _2132);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_2132 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_2121 + 1.0) / _2132);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2245 = frontier_phi_25_21_ladder;
        }
        float _2562;
        if (_2135 > 0.0)
        {
            _2562 = abs((1.0 - _2125) / _2135);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_2135 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_2125 + 1.0) / _2135);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2562 = frontier_phi_37_32_ladder;
        }
        float _2889;
        if (_2138 > 0.0)
        {
            _2889 = abs((1.0 - _2129) / _2138);
        }
        else
        {
            float frontier_phi_47_44_ladder;
            if (_2138 < 0.0)
            {
                frontier_phi_47_44_ladder = abs((_2129 + 1.0) / _2138);
            }
            else
            {
                frontier_phi_47_44_ladder = 5000.0;
            }
            _2889 = frontier_phi_47_44_ladder;
        }
        float _2891 = isnan(_2562) ? _2245 : (isnan(_2245) ? _2562 : min(_2245, _2562));
        float _2892 = isnan(_2889) ? _2891 : (isnan(_2891) ? _2889 : min(_2891, _2889));
        float _2896 = (_2892 * _2132) + _2121;
        float _2897 = (_2892 * _2135) + _2125;
        float _2898 = (_2892 * _2138) + _2129;
        float _2899 = _2892 * 9.9999997473787516355514526367188e-05;
        float _2900 = (-1.0) - _2899;
        float _2902 = _2899 + 1.0;
        float frontier_phi_22_47_ladder;
        float frontier_phi_22_47_ladder_1;
        float frontier_phi_22_47_ladder_2;
        if ((_2898 > _2902) || ((_2898 < _2900) || ((_2897 > _2902) || ((_2897 < _2900) || ((_2896 < _2900) || (_2896 > _2902))))))
        {
            frontier_phi_22_47_ladder = 0.0;
            frontier_phi_22_47_ladder_1 = 0.0;
            frontier_phi_22_47_ladder_2 = 0.0;
        }
        else
        {
            vec4 _3016 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2898, cbModelParam._m0[17u].z, fma(_2897, cbModelParam._m0[17u].y, _2896 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2898, cbModelParam._m0[18u].z, fma(_2897, cbModelParam._m0[18u].y, _2896 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2898, cbModelParam._m0[19u].z, fma(_2897, cbModelParam._m0[19u].y, _2896 * cbModelParam._m0[19u].x))), _2067);
            frontier_phi_22_47_ladder = _3016.z * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_1 = _3016.y * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_2 = _3016.x * cbModelParam._m0[1u].z;
        }
        _2157 = frontier_phi_22_47_ladder_2;
        _2159 = frontier_phi_22_47_ladder_1;
        _2161 = frontier_phi_22_47_ladder;
    }
    else
    {
        vec4 _2141 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1172, _1173, _1174), _2067);
        _2157 = _2141.x * cbModelParam._m0[1u].z;
        _2159 = _2141.y * cbModelParam._m0[1u].z;
        _2161 = _2141.z * cbModelParam._m0[1u].z;
    }
    float _2173 = ((((1.0 - _1193) * ((_1180 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_1193 * _1180)) * _1164;
    float _2174 = _2173 * ((cbModelParam._m0[1u].w * (_2157 - _2058)) + _2058);
    float _2175 = _2173 * ((cbModelParam._m0[1u].w * (_2159 - _2060)) + _2060);
    float _2176 = _2173 * ((cbModelParam._m0[1u].w * (_2161 - _2062)) + _2062);
    float _2179 = fma(_2176, cbSceneParam._m0[89u].z, fma(_2175, cbSceneParam._m0[89u].y, _2174 * cbSceneParam._m0[89u].x));
    float _2182 = fma(_2176, cbSceneParam._m0[90u].z, fma(_2175, cbSceneParam._m0[90u].y, _2174 * cbSceneParam._m0[90u].x));
    float _2185 = fma(_2176, cbSceneParam._m0[91u].z, fma(_2175, cbSceneParam._m0[91u].y, _2174 * cbSceneParam._m0[91u].x));
    float _2219 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2223 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2227 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2231 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2232 = _2219 / _2231;
    float _2233 = _2223 / _2231;
    float _2234 = _2227 / _2231;
    float _2381;
    float _2382;
    float _2383;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2261 = ((uint(_2234 > cbSceneParam._m0[59u].y) + uint(_2234 > cbSceneParam._m0[59u].x)) + uint(_2234 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2262 = _2261 + 43u;
        uint _2270 = _2261 + 44u;
        uint _2278 = _2261 + 45u;
        uint _2286 = _2261 + 46u;
        float _2297 = fma(_2231, cbSceneParam._m0[_2262].w, fma(_2227, cbSceneParam._m0[_2262].z, fma(_2223, cbSceneParam._m0[_2262].y, _2219 * cbSceneParam._m0[_2262].x)));
        float _2301 = fma(_2231, cbSceneParam._m0[_2270].w, fma(_2227, cbSceneParam._m0[_2270].z, fma(_2223, cbSceneParam._m0[_2270].y, _2219 * cbSceneParam._m0[_2270].x)));
        float _2309 = fma(_2231, cbSceneParam._m0[_2286].w, fma(_2227, cbSceneParam._m0[_2286].z, fma(_2223, cbSceneParam._m0[_2286].y, _2219 * cbSceneParam._m0[_2286].x)));
        float _2314 = cbSceneParam._m0[33u].z * _2309;
        float _2316 = cbSceneParam._m0[33u].w * _2309;
        float _2319 = fma(_2231, cbSceneParam._m0[_2278].w, fma(_2227, cbSceneParam._m0[_2278].z, fma(_2223, cbSceneParam._m0[_2278].y, _2219 * cbSceneParam._m0[_2278].x))) / _2309;
        float _2367 = (cbSceneParam._m0[33u].x - sqrt(((_2233 * _2233) + (_2232 * _2232)) + (_2234 * _2234))) * cbSceneParam._m0[33u].y;
        float _4709 = isnan(0.0) ? _2367 : (isnan(_2367) ? 0.0 : max(_2367, 0.0));
        float _2374 = (isnan(1.0) ? _4709 : (isnan(_4709) ? 1.0 : min(_4709, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2314 + _2297) / _2309, (_2316 + _2301) / _2309), _2319), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2316 + _2297) / _2309, (_2301 - _2314) / _2309), _2319), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2297 - _2314) / _2309, (_2301 - _2316) / _2309), _2319), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2297 - _2316) / _2309, (_2314 + _2301) / _2309), _2319), 0.0)).x), vec4(0.25)));
        _2381 = 1.0 - (_2374 * cbSceneParam._m0[34u].x);
        _2382 = 1.0 - (_2374 * cbSceneParam._m0[34u].y);
        _2383 = 1.0 - (_2374 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2381 = 1.0;
        _2382 = 1.0;
        _2383 = 1.0;
    }
    float _2447;
    float _2449;
    float _2451;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2435 = fma(_2231, cbSceneParam._m0[63u].w, fma(_2227, cbSceneParam._m0[63u].z, fma(_2223, cbSceneParam._m0[63u].y, _2219 * cbSceneParam._m0[63u].x)));
        float _2436 = fma(_2231, cbSceneParam._m0[60u].w, fma(_2227, cbSceneParam._m0[60u].z, fma(_2223, cbSceneParam._m0[60u].y, _2219 * cbSceneParam._m0[60u].x))) / _2435;
        float _2437 = fma(_2231, cbSceneParam._m0[61u].w, fma(_2227, cbSceneParam._m0[61u].z, fma(_2223, cbSceneParam._m0[61u].y, _2219 * cbSceneParam._m0[61u].x))) / _2435;
        float frontier_phi_34_33_ladder;
        float frontier_phi_34_33_ladder_1;
        float frontier_phi_34_33_ladder_2;
        if ((((_2436 >= cbSceneParam._m0[64u].x) && (_2437 >= cbSceneParam._m0[64u].y)) && (_2436 <= cbSceneParam._m0[64u].z)) && (_2437 <= cbSceneParam._m0[64u].w))
        {
            float _2575 = fma(_2231, cbSceneParam._m0[62u].w, fma(_2227, cbSceneParam._m0[62u].z, fma(_2223, cbSceneParam._m0[62u].y, _2219 * cbSceneParam._m0[62u].x))) / _2435;
            float _2579 = isnan(cbSceneParam._m0[41u].w) ? _2575 : (isnan(_2575) ? cbSceneParam._m0[41u].w : max(_2575, cbSceneParam._m0[41u].w));
            float _2622 = (cbSceneParam._m0[33u].x - sqrt(((_2233 * _2233) + (_2232 * _2232)) + (_2234 * _2234))) * cbSceneParam._m0[33u].y;
            float _4725 = isnan(0.0) ? _2622 : (isnan(_2622) ? 0.0 : max(_2622, 0.0));
            float _2629 = (isnan(1.0) ? _4725 : (isnan(_4725) ? 1.0 : min(_4725, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2436, cbSceneParam._m0[33u].w + _2437), _2579), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2436, _2437 - cbSceneParam._m0[33u].z), _2579), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2436 - cbSceneParam._m0[33u].z, _2437 - cbSceneParam._m0[33u].w), _2579), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2436 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2437), _2579), 0.0)).x), vec4(0.25)));
            float _2633 = 1.0 - (_2629 * cbSceneParam._m0[34u].x);
            float _2634 = 1.0 - (_2629 * cbSceneParam._m0[34u].y);
            float _2635 = 1.0 - (_2629 * cbSceneParam._m0[34u].z);
            frontier_phi_34_33_ladder = isnan(_2635) ? _2383 : (isnan(_2383) ? _2635 : min(_2383, _2635));
            frontier_phi_34_33_ladder_1 = isnan(_2634) ? _2382 : (isnan(_2382) ? _2634 : min(_2382, _2634));
            frontier_phi_34_33_ladder_2 = isnan(_2633) ? _2381 : (isnan(_2381) ? _2633 : min(_2381, _2633));
        }
        else
        {
            frontier_phi_34_33_ladder = _2383;
            frontier_phi_34_33_ladder_1 = _2382;
            frontier_phi_34_33_ladder_2 = _2381;
        }
        _2447 = frontier_phi_34_33_ladder_2;
        _2449 = frontier_phi_34_33_ladder_1;
        _2451 = frontier_phi_34_33_ladder;
    }
    else
    {
        _2447 = _2381;
        _2449 = _2382;
        _2451 = _2383;
    }
    uvec4 _2456 = floatBitsToUint(cbInstanceData._m0[_291 + 5u]);
    uint _2458 = _2456.x * 14u;
    uint _2459 = _2458 + 13u;
    float _2466 = _1164 + (-1.0);
    float _2471 = (cbLight._m0[_2459].x * _2466) + 1.0;
    float _2472 = (cbLight._m0[_2459].y * _2466) + 1.0;
    float _2473 = (cbLight._m0[_2459].z * _2466) + 1.0;
    float _2474 = (cbLight._m0[_2459].w * _2466) + 1.0;
    uint _2475 = _2458 + 5u;
    float _2481 = isnan(1.0) ? _2472 : (isnan(_2472) ? 1.0 : min(_2472, 1.0));
    uint _2485 = _2458 + 4u;
    float _2494 = isnan(1.0) ? _2471 : (isnan(_2471) ? 1.0 : min(_2471, 1.0));
    uint _2498 = _2458 | 1u;
    float _2509 = dot(vec3(cbLight._m0[_2458].xyz), vec3(_1014, _1015, _1016));
    float _2512 = dot(vec3(cbLight._m0[_2498].xyz), vec3(_1014, _1015, _1016));
    float _4761 = isnan(0.0) ? _2509 : (isnan(_2509) ? 0.0 : max(_2509, 0.0));
    float _4772 = isnan(0.0) ? _2512 : (isnan(_2512) ? 0.0 : max(_2512, 0.0));
    float _2517 = (isnan(1.0) ? _4761 : (isnan(_4761) ? 1.0 : min(_4761, 1.0))) * 0.3183098733425140380859375;
    float _2519 = (isnan(1.0) ? _4772 : (isnan(_4772) ? 1.0 : min(_4772, 1.0))) * 0.3183098733425140380859375;
    float _2526 = ((cbLight._m0[_2475].x * _2481) * _2519) + (((cbLight._m0[_2485].x * _2447) * _2494) * _2517);
    float _2527 = ((_2481 * cbLight._m0[_2475].y) * _2519) + (((cbLight._m0[_2485].y * _2449) * _2494) * _2517);
    float _2528 = ((_2481 * cbLight._m0[_2475].z) * _2519) + (((cbLight._m0[_2485].z * _2451) * _2494) * _2517);
    uvec4 _2532 = floatBitsToUint(cbLight._m0[_2458 + 12u]);
    bool _2534 = _2532.x == 0u;
    float _2636;
    float _2638;
    float _2640;
    if (_2534)
    {
        _2636 = _2526;
        _2638 = _2527;
        _2640 = _2528;
    }
    else
    {
        uint _2644 = _2458 + 6u;
        float _2660 = (dot(vec3(cbLight._m0[_2458 + 2u].xyz), vec3(_1014, _1015, _1016)) * 0.5) + 0.5;
        float _2661 = _2660 * _2660;
        float _4783 = isnan(0.0) ? _2661 : (isnan(_2661) ? 0.0 : max(_2661, 0.0));
        float _2662 = isnan(1.0) ? _4783 : (isnan(_4783) ? 1.0 : min(_4783, 1.0));
        float _2663 = isnan(1.0) ? _2473 : (isnan(_2473) ? 1.0 : min(_2473, 1.0));
        _2636 = (((cbLight._m0[_2644].x * 0.3183098733425140380859375) * _2662) * _2663) + _2526;
        _2638 = (((cbLight._m0[_2644].y * 0.3183098733425140380859375) * _2662) * _2663) + _2527;
        _2640 = (((cbLight._m0[_2644].z * 0.3183098733425140380859375) * _2662) * _2663) + _2528;
    }
    bool _2643 = _2532.y == 0u;
    float _2698;
    float _2700;
    float _2702;
    if (_2643)
    {
        _2698 = _2636;
        _2700 = _2638;
        _2702 = _2640;
    }
    else
    {
        uint _2860 = _2458 + 7u;
        float _2876 = (dot(vec3(cbLight._m0[_2458 + 3u].xyz), vec3(_1014, _1015, _1016)) * 0.5) + 0.5;
        float _2877 = _2876 * _2876;
        float _4799 = isnan(0.0) ? _2877 : (isnan(_2877) ? 0.0 : max(_2877, 0.0));
        float _2878 = isnan(1.0) ? _4799 : (isnan(_4799) ? 1.0 : min(_4799, 1.0));
        float _2879 = isnan(1.0) ? _2474 : (isnan(_2474) ? 1.0 : min(_2474, 1.0));
        _2698 = (((cbLight._m0[_2860].x * 0.3183098733425140380859375) * _2878) * _2879) + _2636;
        _2700 = (((cbLight._m0[_2860].y * 0.3183098733425140380859375) * _2878) * _2879) + _2638;
        _2702 = (((cbLight._m0[_2860].z * 0.3183098733425140380859375) * _2878) * _2879) + _2640;
    }
    uint _2705 = _2458 + 8u;
    float _2718 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2458].w)) * _1017) * 0.949999988079071044921875);
    float _2719 = _2718 * _2718;
    float _2720 = cbLight._m0[_2458].x + _1093;
    float _2721 = cbLight._m0[_2458].y + _1094;
    float _2722 = cbLight._m0[_2458].z + _1095;
    float _2726 = inversesqrt(dot(vec3(_2720, _2721, _2722), vec3(_2720, _2721, _2722)));
    float _2727 = _2726 * _2720;
    float _2728 = _2726 * _2721;
    float _2729 = _2726 * _2722;
    float _2730 = dot(vec3(_1014, _1015, _1016), vec3(cbLight._m0[_2458].xyz));
    float _4815 = isnan(0.0) ? _2730 : (isnan(_2730) ? 0.0 : max(_2730, 0.0));
    float _2733 = isnan(1.0) ? _4815 : (isnan(_4815) ? 1.0 : min(_4815, 1.0));
    float _4826 = isnan(0.0) ? _1165 : (isnan(_1165) ? 0.0 : max(_1165, 0.0));
    float _2734 = isnan(1.0) ? _4826 : (isnan(_4826) ? 1.0 : min(_4826, 1.0));
    float _2735 = dot(vec3(_1014, _1015, _1016), vec3(_2727, _2728, _2729));
    float _4837 = isnan(0.0) ? _2735 : (isnan(_2735) ? 0.0 : max(_2735, 0.0));
    float _2738 = isnan(1.0) ? _4837 : (isnan(_4837) ? 1.0 : min(_4837, 1.0));
    float _2739 = dot(vec3(cbLight._m0[_2458].xyz), vec3(_2727, _2728, _2729));
    float _4848 = isnan(0.0) ? _2739 : (isnan(_2739) ? 0.0 : max(_2739, 0.0));
    float _2743 = _2719 * _2719;
    float _2747 = ((_2738 * _2738) * (_2743 + (-1.0))) + 1.0;
    float _2758 = (exp2(log2(1.0 - (isnan(1.0) ? _4848 : (isnan(_4848) ? 1.0 : min(_4848, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2759 = 1.0 - _2719;
    float _2770 = (0.5 / (((_2734 * ((_2733 * _2759) + _2719)) + 9.9999999392252902907785028219223e-09) + (((_2734 * _2759) + _2719) * _2733))) * _2733;
    float _4859 = isnan(0.0) ? _2770 : (isnan(_2770) ? 0.0 : max(_2770, 0.0));
    float _2772 = (isnan(1.0) ? _4859 : (isnan(_4859) ? 1.0 : min(_4859, 1.0))) * (_2743 / ((_2747 * _2747) * 3.141590118408203125));
    uint _2786 = _2458 + 9u;
    float _2797 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2498].w)) * _1017) * 0.949999988079071044921875);
    float _2798 = _2797 * _2797;
    float _2799 = cbLight._m0[_2498].x + _1093;
    float _2800 = cbLight._m0[_2498].y + _1094;
    float _2801 = cbLight._m0[_2498].z + _1095;
    float _2805 = inversesqrt(dot(vec3(_2799, _2800, _2801), vec3(_2799, _2800, _2801)));
    float _2806 = _2805 * _2799;
    float _2807 = _2805 * _2800;
    float _2808 = _2805 * _2801;
    float _2809 = dot(vec3(_1014, _1015, _1016), vec3(cbLight._m0[_2498].xyz));
    float _4870 = isnan(0.0) ? _2809 : (isnan(_2809) ? 0.0 : max(_2809, 0.0));
    float _2812 = isnan(1.0) ? _4870 : (isnan(_4870) ? 1.0 : min(_4870, 1.0));
    float _2813 = dot(vec3(_1014, _1015, _1016), vec3(_2806, _2807, _2808));
    float _4881 = isnan(0.0) ? _2813 : (isnan(_2813) ? 0.0 : max(_2813, 0.0));
    float _2816 = isnan(1.0) ? _4881 : (isnan(_4881) ? 1.0 : min(_4881, 1.0));
    float _2817 = dot(vec3(cbLight._m0[_2498].xyz), vec3(_2806, _2807, _2808));
    float _4892 = isnan(0.0) ? _2817 : (isnan(_2817) ? 0.0 : max(_2817, 0.0));
    float _2821 = _2798 * _2798;
    float _2825 = ((_2816 * _2816) * (_2821 + (-1.0))) + 1.0;
    float _2834 = (exp2(log2(1.0 - (isnan(1.0) ? _4892 : (isnan(_4892) ? 1.0 : min(_4892, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2835 = 1.0 - _2798;
    float _2845 = (0.5 / (((_2734 * ((_2812 * _2835) + _2798)) + 9.9999999392252902907785028219223e-09) + (((_2734 * _2835) + _2798) * _2812))) * _2812;
    float _4903 = isnan(0.0) ? _2845 : (isnan(_2845) ? 0.0 : max(_2845, 0.0));
    float _2847 = (isnan(1.0) ? _4903 : (isnan(_4903) ? 1.0 : min(_4903, 1.0))) * (_2821 / ((_2825 * _2825) * 3.141590118408203125));
    float _2857 = (((_2834 * cbLight._m0[_2786].x) * _2847) * _2481) + ((((cbLight._m0[_2705].x * _2447) * _2758) * _2772) * _2494);
    float _2858 = (((_2834 * cbLight._m0[_2786].y) * _2847) * _2481) + ((((cbLight._m0[_2705].y * _2449) * _2758) * _2772) * _2494);
    float _2859 = (((_2834 * cbLight._m0[_2786].z) * _2847) * _2481) + ((((cbLight._m0[_2705].z * _2451) * _2758) * _2772) * _2494);
    float _2915;
    float _2917;
    float _2919;
    if (_2534)
    {
        _2915 = _2857;
        _2917 = _2858;
        _2919 = _2859;
    }
    else
    {
        uint _2921 = _2458 + 2u;
        uint _2925 = _2458 + 10u;
        float _2939 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2921].w)) * _1017) * 0.949999988079071044921875);
        float _2940 = _2939 * _2939;
        float _2941 = cbLight._m0[_2921].x + _1093;
        float _2942 = cbLight._m0[_2921].y + _1094;
        float _2943 = cbLight._m0[_2921].z + _1095;
        float _2947 = inversesqrt(dot(vec3(_2941, _2942, _2943), vec3(_2941, _2942, _2943)));
        float _2948 = _2947 * _2941;
        float _2949 = _2947 * _2942;
        float _2950 = _2947 * _2943;
        float _2951 = dot(vec3(_1014, _1015, _1016), vec3(cbLight._m0[_2921].xyz));
        float _4914 = isnan(0.0) ? _2951 : (isnan(_2951) ? 0.0 : max(_2951, 0.0));
        float _2954 = isnan(1.0) ? _4914 : (isnan(_4914) ? 1.0 : min(_4914, 1.0));
        float _2955 = dot(vec3(_1014, _1015, _1016), vec3(_2948, _2949, _2950));
        float _4925 = isnan(0.0) ? _2955 : (isnan(_2955) ? 0.0 : max(_2955, 0.0));
        float _2958 = isnan(1.0) ? _4925 : (isnan(_4925) ? 1.0 : min(_4925, 1.0));
        float _2959 = dot(vec3(cbLight._m0[_2921].xyz), vec3(_2948, _2949, _2950));
        float _4936 = isnan(0.0) ? _2959 : (isnan(_2959) ? 0.0 : max(_2959, 0.0));
        float _2963 = _2940 * _2940;
        float _2967 = ((_2958 * _2958) * (_2963 + (-1.0))) + 1.0;
        float _2976 = (exp2(log2(1.0 - (isnan(1.0) ? _4936 : (isnan(_4936) ? 1.0 : min(_4936, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2977 = 1.0 - _2940;
        float _2987 = (0.5 / (((_2734 * ((_2954 * _2977) + _2940)) + 9.9999999392252902907785028219223e-09) + (((_2734 * _2977) + _2940) * _2954))) * _2954;
        float _4947 = isnan(0.0) ? _2987 : (isnan(_2987) ? 0.0 : max(_2987, 0.0));
        float _2989 = (isnan(1.0) ? _4947 : (isnan(_4947) ? 1.0 : min(_4947, 1.0))) * (_2963 / ((_2967 * _2967) * 3.141590118408203125));
        float _2990 = isnan(1.0) ? _2473 : (isnan(_2473) ? 1.0 : min(_2473, 1.0));
        _2915 = (((_2976 * cbLight._m0[_2925].x) * _2989) * _2990) + _2857;
        _2917 = (((_2976 * cbLight._m0[_2925].y) * _2989) * _2990) + _2858;
        _2919 = (((_2976 * cbLight._m0[_2925].z) * _2989) * _2990) + _2859;
    }
    float _3021;
    float _3023;
    float _3025;
    if (_2643)
    {
        _3021 = _2915;
        _3023 = _2917;
        _3025 = _2919;
    }
    else
    {
        uint _3032 = _2458 + 3u;
        uint _3036 = _2458 + 11u;
        float _3050 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_3032].w)) * _1017) * 0.949999988079071044921875);
        float _3051 = _3050 * _3050;
        float _3052 = cbLight._m0[_3032].x + _1093;
        float _3053 = cbLight._m0[_3032].y + _1094;
        float _3054 = cbLight._m0[_3032].z + _1095;
        float _3058 = inversesqrt(dot(vec3(_3052, _3053, _3054), vec3(_3052, _3053, _3054)));
        float _3059 = _3058 * _3052;
        float _3060 = _3058 * _3053;
        float _3061 = _3058 * _3054;
        float _3062 = dot(vec3(_1014, _1015, _1016), vec3(cbLight._m0[_3032].xyz));
        float _4963 = isnan(0.0) ? _3062 : (isnan(_3062) ? 0.0 : max(_3062, 0.0));
        float _3065 = isnan(1.0) ? _4963 : (isnan(_4963) ? 1.0 : min(_4963, 1.0));
        float _3066 = dot(vec3(_1014, _1015, _1016), vec3(_3059, _3060, _3061));
        float _4974 = isnan(0.0) ? _3066 : (isnan(_3066) ? 0.0 : max(_3066, 0.0));
        float _3069 = isnan(1.0) ? _4974 : (isnan(_4974) ? 1.0 : min(_4974, 1.0));
        float _3070 = dot(vec3(cbLight._m0[_3032].xyz), vec3(_3059, _3060, _3061));
        float _4985 = isnan(0.0) ? _3070 : (isnan(_3070) ? 0.0 : max(_3070, 0.0));
        float _3074 = _3051 * _3051;
        float _3078 = ((_3069 * _3069) * (_3074 + (-1.0))) + 1.0;
        float _3087 = (exp2(log2(1.0 - (isnan(1.0) ? _4985 : (isnan(_4985) ? 1.0 : min(_4985, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _3088 = 1.0 - _3051;
        float _3098 = (0.5 / (((_2734 * ((_3065 * _3088) + _3051)) + 9.9999999392252902907785028219223e-09) + (((_2734 * _3088) + _3051) * _3065))) * _3065;
        float _4996 = isnan(0.0) ? _3098 : (isnan(_3098) ? 0.0 : max(_3098, 0.0));
        float _3100 = (isnan(1.0) ? _4996 : (isnan(_4996) ? 1.0 : min(_4996, 1.0))) * (_3074 / ((_3078 * _3078) * 3.141590118408203125));
        float _3101 = isnan(1.0) ? _2474 : (isnan(_2474) ? 1.0 : min(_2474, 1.0));
        _3021 = (((_3087 * cbLight._m0[_3036].x) * _3100) * _3101) + _2915;
        _3023 = (((_3087 * cbLight._m0[_3036].y) * _3100) * _3101) + _2917;
        _3025 = (((_3087 * cbLight._m0[_3036].z) * _3100) * _3101) + _2919;
    }
    float _3167;
    float _3169;
    float _3171;
    float _3173;
    float _3175;
    float _3177;
    if (_2456.y == 0u)
    {
        uvec4 _3122 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3123 = _3122.x;
        uint _3134 = uint((float(_3122.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1102) / _3123))) + floor(float(uint(cbSceneParam._m0[85u].x * _1101) / _3123)));
        float _3144 = (log2(_2234 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _3145 = isnan(0.0) ? _3144 : (isnan(_3144) ? 0.0 : max(_3144, 0.0));
        uint _3148 = uint(isnan(14.0) ? _3145 : (isnan(_3145) ? 14.0 : min(_3145, 14.0)));
        uvec4 _3153 = texelFetch(g_lightClusterGridBuffer, int(((_3148 << 2u) + (_3134 << 6u)) >> 2u));
        uint _3154 = _3153.x;
        uint _3155 = _3122.z;
        float _3234;
        float _3236;
        float _3238;
        float _3240;
        float _3242;
        float _3244;
        if (((((1u << ((_3155 >> 4u) & 15u)) + 4294967295u) & _3154) == 0u) || ((_3155 & 240u) == 0u))
        {
            _3234 = 0.0;
            _3236 = 0.0;
            _3238 = 0.0;
            _3240 = 0.0;
            _3242 = 0.0;
            _3244 = 0.0;
        }
        else
        {
            float _3235;
            float _3237;
            float _3239;
            float _3241;
            float _3243;
            float _3245;
            float _3379 = 0.0;
            float _3380 = 0.0;
            float _3381 = 0.0;
            float _3382 = 0.0;
            float _3383 = 0.0;
            float _3384 = 0.0;
            uint _3385 = 0u;
            uint _3394;
            bool _3395;
            for (;;)
            {
                _3394 = texelFetch(g_lightClassification, int((((_3148 << 5u) + (_3134 << 9u)) + (_3385 << 2u)) >> 2u)).x;
                _3395 = _3394 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3395)
                {
                    frontier_phi_66_pred = _3384;
                    frontier_phi_66_pred_1 = _3383;
                    frontier_phi_66_pred_2 = _3382;
                    frontier_phi_66_pred_3 = _3381;
                    frontier_phi_66_pred_4 = _3380;
                    frontier_phi_66_pred_5 = _3379;
                }
                else
                {
                    float _3503;
                    float _3504;
                    float _3505;
                    float _3506;
                    float _3507;
                    float _3508;
                    uint _3509;
                    _3503 = _3379;
                    _3504 = _3380;
                    _3505 = _3381;
                    _3506 = _3382;
                    _3507 = _3383;
                    _3508 = _3384;
                    _3509 = _3394;
                    float _3435;
                    float _3436;
                    float _3437;
                    float _3438;
                    float _3439;
                    float _3440;
                    for (;;)
                    {
                        uint _3513 = uint(findLSB(_3509)) + (_3385 << 5u);
                        uint _3510 = (_3509 + 4294967295u) & _3509;
                        uint _3515 = _3513 * 48u;
                        vec4 _3529 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3515)).x, texelFetch(g_PointLightRenderingBuffer, int(_3515 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3515 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3515 + 3u)).x));
                        uint _3535 = (_3513 * 48u) + 4u;
                        vec4 _3548 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3535)).x, texelFetch(g_PointLightRenderingBuffer, int(_3535 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3535 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3535 + 3u)).x));
                        uint _3554 = (_3513 * 48u) + 8u;
                        vec3 _3565 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3554)).x, texelFetch(g_PointLightRenderingBuffer, int(_3554 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3554 + 2u)).x));
                        float _3569 = _3529.x - _2232;
                        float _3570 = _3529.y - _2233;
                        float _3571 = _3529.z - _2234;
                        float _3572 = dot(vec3(_3569, _3570, _3571), vec3(_3569, _3570, _3571));
                        float _3575 = inversesqrt(_3572);
                        float _3576 = _3575 * _3569;
                        float _3577 = _3575 * _3570;
                        float _3578 = _3575 * _3571;
                        float _3579 = dot(vec3(_1120, _1123, _1126), vec3(_3576, _3577, _3578));
                        float _3584 = 1.0 - (_3572 * _3529.w);
                        float _5022 = isnan(0.0) ? _3584 : (isnan(_3584) ? 0.0 : max(_3584, 0.0));
                        float _3585 = isnan(1.0) ? _5022 : (isnan(_5022) ? 1.0 : min(_5022, 1.0));
                        float _3586 = sqrt(_3572) * _3548.w;
                        float _3589 = 1.39999997615814208984375 / (_3586 + 1.39999997615814208984375);
                        float _3590 = _3589 * _3589;
                        float _3593 = ((1.0 - _3590) * _3579) + _3590;
                        float _3596 = _3586 * _3586;
                        float _3600 = ((isnan(0.0) ? _3593 : (isnan(_3593) ? 0.0 : max(_3593, 0.0))) * _3585) / ((_3596 * 0.699999988079071044921875) + 1.0);
                        float _3604 = (-0.0) - _2232;
                        float _3605 = (-0.0) - _2233;
                        float _3606 = (-0.0) - _2234;
                        float _3610 = inversesqrt(dot(vec3(_3604, _3605, _3606), vec3(_3604, _3605, _3606)));
                        float _3611 = _3610 * _3604;
                        float _3612 = _3610 * _3605;
                        float _3613 = _3610 * _3606;
                        float _3620 = exp2(log2(1.0 / ((_3596 * 3.5) + 5.0)) * 0.25);
                        float _3621 = 1.0 - _1180;
                        float _3628 = sqrt(1.0 - ((1.0 - (_3621 * _3621)) * (1.0 - (_3620 * _3620))));
                        float _3629 = _3628 * _3628;
                        float _3630 = _3629 * _3629;
                        float _3631 = _3611 + _3576;
                        float _3632 = _3612 + _3577;
                        float _3633 = _3613 + _3578;
                        float _3637 = inversesqrt(dot(vec3(_3631, _3632, _3633), vec3(_3631, _3632, _3633)));
                        float _3641 = dot(vec3(_1120, _1123, _1126), vec3(_3611, _3612, _3613));
                        float _5038 = isnan(0.0) ? _3641 : (isnan(_3641) ? 0.0 : max(_3641, 0.0));
                        float _3644 = isnan(1.0) ? _5038 : (isnan(_5038) ? 1.0 : min(_5038, 1.0));
                        float _3645 = dot(vec3(_1120, _1123, _1126), vec3(_3637 * _3631, _3637 * _3632, _3637 * _3633));
                        float _5049 = isnan(0.0) ? _3645 : (isnan(_3645) ? 0.0 : max(_3645, 0.0));
                        float _3648 = isnan(1.0) ? _5049 : (isnan(_5049) ? 1.0 : min(_5049, 1.0));
                        float _3652 = ((_3648 * _3648) * (_3630 + (-1.0))) + 1.0;
                        float _3653 = _3589 * _3629;
                        float _3654 = _3653 * _3653;
                        float _3657 = ((1.0 - _3654) * _3579) + _3654;
                        float _5060 = isnan(0.0) ? _3657 : (isnan(_3657) ? 0.0 : max(_3657, 0.0));
                        float _3658 = isnan(1.0) ? _5060 : (isnan(_5060) ? 1.0 : min(_5060, 1.0));
                        float _3659 = 1.0 - _3629;
                        float _3669 = (0.5 / (((_3658 * ((_3644 * _3659) + _3629)) + 9.9999999392252902907785028219223e-09) + (((_3658 * _3659) + _3629) * _3644))) * _3658;
                        float _5071 = isnan(0.0) ? _3669 : (isnan(_3669) ? 0.0 : max(_3669, 0.0));
                        float _3680 = (((_3630 * 3.1415927410125732421875) * (isnan(1.0) ? _5071 : (isnan(_5071) ? 1.0 : min(_5071, 1.0)))) / ((_3652 * _3652) * ((_3596 * 2.1991131305694580078125) + 3.141590118408203125))) * _3585;
                        _3438 = (_3600 * _3548.x) + _3506;
                        _3439 = (_3600 * _3548.y) + _3507;
                        _3440 = (_3600 * _3548.z) + _3508;
                        _3435 = (_3680 * _3565.x) + _3503;
                        _3436 = (_3680 * _3565.y) + _3504;
                        _3437 = (_3680 * _3565.z) + _3505;
                        if (_3510 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3503 = _3435;
                            _3504 = _3436;
                            _3505 = _3437;
                            _3506 = _3438;
                            _3507 = _3439;
                            _3508 = _3440;
                            _3509 = _3510;
                        }
                    }
                    frontier_phi_66_pred = _3440;
                    frontier_phi_66_pred_1 = _3439;
                    frontier_phi_66_pred_2 = _3438;
                    frontier_phi_66_pred_3 = _3437;
                    frontier_phi_66_pred_4 = _3436;
                    frontier_phi_66_pred_5 = _3435;
                }
                _3245 = frontier_phi_66_pred;
                _3243 = frontier_phi_66_pred_1;
                _3241 = frontier_phi_66_pred_2;
                _3239 = frontier_phi_66_pred_3;
                _3237 = frontier_phi_66_pred_4;
                _3235 = frontier_phi_66_pred_5;
                uint _3386 = _3385 + 1u;
                if (_3386 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3379 = _3235;
                    _3380 = _3237;
                    _3381 = _3239;
                    _3382 = _3241;
                    _3383 = _3243;
                    _3384 = _3245;
                    _3385 = _3386;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3234 = _3235;
            _3236 = _3237;
            _3238 = _3239;
            _3240 = _3241;
            _3242 = _3243;
            _3244 = _3245;
        }
        uvec4 _3248 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3249 = _3248.z;
        uint _3251 = (_3249 >> 8u) & 15u;
        float _3347;
        float _3349;
        float _3351;
        float _3353;
        float _3355;
        float _3357;
        if (((4294967295u << _3251) & _3154) == 0u)
        {
            _3347 = _3234;
            _3349 = _3236;
            _3351 = _3238;
            _3353 = _3240;
            _3355 = _3242;
            _3357 = _3244;
        }
        else
        {
            float _3372 = inversesqrt(dot(vec3(_2232, _2233, _2234), vec3(_2232, _2233, _2234)));
            float _3373 = _3372 * _2232;
            float _3374 = _3372 * _2233;
            float _3375 = _3372 * _2234;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_3251 < ((_3249 >> 12u) & 15u))
            {
                float _3348;
                float _3350;
                float _3352;
                float _3354;
                float _3356;
                float _3358;
                float _3486 = _3234;
                float _3487 = _3236;
                float _3488 = _3238;
                float _3489 = _3240;
                float _3490 = _3242;
                float _3491 = _3244;
                uint _3492 = _3251;
                uint _3501;
                bool _3502;
                for (;;)
                {
                    _3501 = texelFetch(g_lightClassification, int((((_3148 << 5u) + (_3134 << 9u)) + (_3492 << 2u)) >> 2u)).x;
                    _3502 = _3501 == 0u;
                    float frontier_phi_72_pred;
                    float frontier_phi_72_pred_1;
                    float frontier_phi_72_pred_2;
                    float frontier_phi_72_pred_3;
                    float frontier_phi_72_pred_4;
                    float frontier_phi_72_pred_5;
                    if (_3502)
                    {
                        frontier_phi_72_pred = _3491;
                        frontier_phi_72_pred_1 = _3490;
                        frontier_phi_72_pred_2 = _3489;
                        frontier_phi_72_pred_3 = _3488;
                        frontier_phi_72_pred_4 = _3487;
                        frontier_phi_72_pred_5 = _3486;
                    }
                    else
                    {
                        float _3685;
                        float _3686;
                        float _3687;
                        float _3688;
                        float _3689;
                        float _3690;
                        float _3978;
                        float _3979;
                        float _3980;
                        float _3981;
                        float _3982;
                        float _3983;
                        float _3698 = _3486;
                        float _3699 = _3487;
                        float _3700 = _3488;
                        float _3701 = _3489;
                        float _3702 = _3490;
                        float _3703 = _3491;
                        uint _3704 = _3501;
                        uint _3705;
                        vec4 _3730;
                        float _3731;
                        vec4 _3746;
                        vec3 _3758;
                        vec4 _3773;
                        vec4 _3788;
                        float _3834;
                        bool _3835;
                        for (;;)
                        {
                            uint _3715 = ((_3492 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3704));
                            _3705 = (_3704 + 4294967295u) & _3704;
                            uint _3717 = _3715 * 40u;
                            _3730 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3717)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3717 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3717 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3717 + 3u)).x));
                            _3731 = _3730.w;
                            uint _3733 = (_3715 * 40u) + 4u;
                            _3746 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3733)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3733 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3733 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3733 + 3u)).x));
                            uint _3748 = (_3715 * 40u) + 8u;
                            _3758 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3748)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3748 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3748 + 2u)).x));
                            uint _3760 = (_3715 * 40u) + 16u;
                            _3773 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3760)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3760 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3760 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3760 + 3u)).x));
                            uint _3775 = (_3715 * 40u) + 20u;
                            _3788 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3775)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3775 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3775 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3775 + 3u)).x));
                            uint _3790 = (_3715 * 40u) + 24u;
                            vec4 _3803 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3790)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3790 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3790 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3790 + 3u)).x));
                            uint _3809 = (_3715 * 40u) + 28u;
                            vec4 _3822 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3809)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3809 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3809 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3809 + 3u)).x));
                            _3834 = fma(_2234, _3822.z, fma(_2233, _3822.y, _3822.x * _2232)) + _3822.w;
                            _3835 = !((fma(_2234, _3803.z, fma(_2233, _3803.y, _3803.x * _2232)) + _3803.w) <= 0.0);
                            float frontier_phi_78_pred;
                            float frontier_phi_78_pred_1;
                            float frontier_phi_78_pred_2;
                            float frontier_phi_78_pred_3;
                            float frontier_phi_78_pred_4;
                            float frontier_phi_78_pred_5;
                            if (_3835)
                            {
                                float _3862 = _3730.x - _2232;
                                float _3863 = _3730.y - _2233;
                                float _3864 = _3730.z - _2234;
                                float _3865 = dot(vec3(_3862, _3863, _3864), vec3(_3862, _3863, _3864));
                                float _3868 = inversesqrt(_3865);
                                float _3869 = _3868 * _3862;
                                float _3870 = _3868 * _3863;
                                float _3871 = _3868 * _3864;
                                float _3875 = 1.0 - (_3865 / (_3731 * _3731));
                                float _5082 = isnan(0.0) ? _3875 : (isnan(_3875) ? 0.0 : max(_3875, 0.0));
                                float _3876 = isnan(1.0) ? _5082 : (isnan(_5082) ? 1.0 : min(_5082, 1.0));
                                float _3880 = sqrt(_3865) * _3746.w;
                                float _3882 = 1.39999997615814208984375 / (_3880 + 1.39999997615814208984375);
                                float _3883 = _3882 * _3882;
                                float _3886 = ((1.0 - _3883) * dot(vec3(_3869, _3870, _3871), vec3(_1120, _1123, _1126))) + _3883;
                                float _3889 = _3880 * _3880;
                                float _3893 = (fma(_2234, _3773.z, fma(_2233, _3773.y, _3773.x * _2232)) + _3773.w) / _3834;
                                float _3894 = (fma(_2234, _3788.z, fma(_2233, _3788.y, _3788.x * _2232)) + _3788.w) / _3834;
                                float _3898 = 1.0 - dot(vec2(_3893, _3894), vec2(_3893, _3894));
                                float _5098 = isnan(0.0) ? _3898 : (isnan(_3898) ? 0.0 : max(_3898, 0.0));
                                float _3899 = isnan(1.0) ? _5098 : (isnan(_5098) ? 1.0 : min(_5098, 1.0));
                                float _3900 = _3899 * (((isnan(0.0) ? _3886 : (isnan(_3886) ? 0.0 : max(_3886, 0.0))) * _3876) / ((_3889 * 0.699999988079071044921875) + 1.0));
                                float _3912 = exp2(log2(1.0 / ((_3889 * 3.5) + 5.0)) * 0.25);
                                float _3913 = 1.0 - _1180;
                                float _3920 = sqrt(1.0 - ((1.0 - (_3913 * _3913)) * (1.0 - (_3912 * _3912))));
                                float _3921 = _3920 * _3920;
                                float _3922 = _3921 * _3921;
                                float _3923 = _3869 - _3373;
                                float _3924 = _3870 - _3374;
                                float _3925 = _3871 - _3375;
                                float _3929 = inversesqrt(dot(vec3(_3923, _3924, _3925), vec3(_3923, _3924, _3925)));
                                float _3933 = dot(vec3(_1120, _1123, _1126), vec3((-0.0) - _3373, (-0.0) - _3374, (-0.0) - _3375));
                                float _5109 = isnan(0.0) ? _3933 : (isnan(_3933) ? 0.0 : max(_3933, 0.0));
                                float _3936 = isnan(1.0) ? _5109 : (isnan(_5109) ? 1.0 : min(_5109, 1.0));
                                float _3937 = dot(vec3(_1120, _1123, _1126), vec3(_3929 * _3923, _3929 * _3924, _3929 * _3925));
                                float _5120 = isnan(0.0) ? _3937 : (isnan(_3937) ? 0.0 : max(_3937, 0.0));
                                float _3940 = isnan(1.0) ? _5120 : (isnan(_5120) ? 1.0 : min(_5120, 1.0));
                                float _3944 = ((_3940 * _3940) * (_3922 + (-1.0))) + 1.0;
                                float _3945 = _3882 * _3921;
                                float _3946 = _3945 * _3945;
                                float _3952 = ((1.0 - _3946) * dot(vec3(_1120, _1123, _1126), vec3(_3869, _3870, _3871))) + _3946;
                                float _5131 = isnan(0.0) ? _3952 : (isnan(_3952) ? 0.0 : max(_3952, 0.0));
                                float _3953 = isnan(1.0) ? _5131 : (isnan(_5131) ? 1.0 : min(_5131, 1.0));
                                float _3954 = 1.0 - _3921;
                                float _3964 = (0.5 / (((_3953 * ((_3936 * _3954) + _3921)) + 9.9999999392252902907785028219223e-09) + (((_3953 * _3954) + _3921) * _3936))) * _3953;
                                float _5142 = isnan(0.0) ? _3964 : (isnan(_3964) ? 0.0 : max(_3964, 0.0));
                                float _3974 = (_3899 * _3876) * (((_3922 * 3.1415927410125732421875) * (isnan(1.0) ? _5142 : (isnan(_5142) ? 1.0 : min(_5142, 1.0)))) / ((_3944 * _3944) * ((_3889 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_78_pred = _3900 * _3746.y;
                                frontier_phi_78_pred_1 = _3900 * _3746.x;
                                frontier_phi_78_pred_2 = _3974 * _3758.z;
                                frontier_phi_78_pred_3 = _3974 * _3758.y;
                                frontier_phi_78_pred_4 = _3974 * _3758.x;
                                frontier_phi_78_pred_5 = _3900 * _3746.z;
                            }
                            else
                            {
                                frontier_phi_78_pred = 0.0;
                                frontier_phi_78_pred_1 = 0.0;
                                frontier_phi_78_pred_2 = 0.0;
                                frontier_phi_78_pred_3 = 0.0;
                                frontier_phi_78_pred_4 = 0.0;
                                frontier_phi_78_pred_5 = 0.0;
                            }
                            _3982 = frontier_phi_78_pred;
                            _3981 = frontier_phi_78_pred_1;
                            _3980 = frontier_phi_78_pred_2;
                            _3979 = frontier_phi_78_pred_3;
                            _3978 = frontier_phi_78_pred_4;
                            _3983 = frontier_phi_78_pred_5;
                            _3688 = _3981 + _3701;
                            _3689 = _3982 + _3702;
                            _3690 = _3983 + _3703;
                            _3685 = _3978 + _3698;
                            _3686 = _3979 + _3699;
                            _3687 = _3980 + _3700;
                            if (_3705 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3698 = _3685;
                                _3699 = _3686;
                                _3700 = _3687;
                                _3701 = _3688;
                                _3702 = _3689;
                                _3703 = _3690;
                                _3704 = _3705;
                                continue;
                            }
                        }
                        frontier_phi_72_pred = _3690;
                        frontier_phi_72_pred_1 = _3689;
                        frontier_phi_72_pred_2 = _3688;
                        frontier_phi_72_pred_3 = _3687;
                        frontier_phi_72_pred_4 = _3686;
                        frontier_phi_72_pred_5 = _3685;
                    }
                    _3358 = frontier_phi_72_pred;
                    _3356 = frontier_phi_72_pred_1;
                    _3354 = frontier_phi_72_pred_2;
                    _3352 = frontier_phi_72_pred_3;
                    _3350 = frontier_phi_72_pred_4;
                    _3348 = frontier_phi_72_pred_5;
                    uint _3493 = _3492 + 1u;
                    if (_3493 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3486 = _3348;
                        _3487 = _3350;
                        _3488 = _3352;
                        _3489 = _3354;
                        _3490 = _3356;
                        _3491 = _3358;
                        _3492 = _3493;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _3358;
                frontier_phi_60_61_ladder_1 = _3356;
                frontier_phi_60_61_ladder_2 = _3352;
                frontier_phi_60_61_ladder_3 = _3350;
                frontier_phi_60_61_ladder_4 = _3348;
                frontier_phi_60_61_ladder_5 = _3354;
            }
            else
            {
                frontier_phi_60_61_ladder = _3244;
                frontier_phi_60_61_ladder_1 = _3242;
                frontier_phi_60_61_ladder_2 = _3238;
                frontier_phi_60_61_ladder_3 = _3236;
                frontier_phi_60_61_ladder_4 = _3234;
                frontier_phi_60_61_ladder_5 = _3240;
            }
            _3347 = frontier_phi_60_61_ladder_4;
            _3349 = frontier_phi_60_61_ladder_3;
            _3351 = frontier_phi_60_61_ladder_2;
            _3353 = frontier_phi_60_61_ladder_5;
            _3355 = frontier_phi_60_61_ladder_1;
            _3357 = frontier_phi_60_61_ladder;
        }
        float _3362 = isnan(1.0) ? _1164 : (isnan(_1164) ? 1.0 : min(_1164, 1.0));
        _3167 = (_3362 * _3353) + _2698;
        _3169 = (_3362 * _3355) + _2700;
        _3171 = (_3362 * _3357) + _2702;
        _3173 = ((_3347 * 0.039999999105930328369140625) * _3362) + _3021;
        _3175 = ((_3349 * 0.039999999105930328369140625) * _3362) + _3023;
        _3177 = ((_3351 * 0.039999999105930328369140625) * _3362) + _3025;
    }
    else
    {
        _3167 = _2698;
        _3169 = _2700;
        _3171 = _2702;
        _3173 = _3021;
        _3175 = _3023;
        _3177 = _3025;
    }
    float _5158 = isnan(0.0) ? _1149 : (isnan(_1149) ? 0.0 : max(_1149, 0.0));
    float _5169 = isnan(0.0) ? _1150 : (isnan(_1150) ? 0.0 : max(_1150, 0.0));
    float _5180 = isnan(0.0) ? _1151 : (isnan(_1151) ? 0.0 : max(_1151, 0.0));
    uint _3197 = _291 + 6u;
    float _3205 = _1101 / cbSceneParam._m0[86u].x;
    float _3206 = _1102 / cbSceneParam._m0[86u].y;
    vec4 _3220 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3205, _3206, (log2((isnan(cbSceneParam._m0[77u].w) ? _1035 : (isnan(_1035) ? cbSceneParam._m0[77u].w : min(_1035, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3222 = _3220.x;
    float _3223 = _3220.y;
    float _3224 = _3220.z;
    float _3225 = _3220.w;
    float _3297;
    float _3299;
    float _3301;
    float _3303;
    if (_1035 > cbSceneParam._m0[78u].w)
    {
        float _3259 = isnan(_1035) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _1035 : min(cbSceneParam._m0[80u].w, _1035));
        float _3260 = _3259 / _1035;
        float _3271 = _3260 * _1086;
        float _3272 = _1087 * _3260;
        float _3273 = (-0.0) - _3272;
        float _3275 = _3260 * _1088;
        float _3277 = (cbSceneParam._m0[77u].w * _3273) / _3259;
        float _3278 = _3277 + cbSceneParam._m0[79u].w;
        float _3279 = cbSceneParam._m0[79u].w - _3272;
        float _3285 = sqrt(((_3271 * _3271) + (_3272 * _3272)) + (_3275 * _3275));
        float _3288 = (1.0 - (cbSceneParam._m0[77u].w / _3259)) * _3285;
        float _3293 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3295 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3448;
        if (abs((_3273 - _3277) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3448 = ((((_3278 > 0.0) ? exp2(_3293 * _3278) : (2.0 - exp2(_3295 * _3278))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3288;
        }
        else
        {
            float _3408 = 1.0 / cbSceneParam._m0[80u].x;
            float _3409 = isnan(_3279) ? _3278 : (isnan(_3278) ? _3279 : max(_3278, _3279));
            float _3410 = isnan(_3279) ? _3278 : (isnan(_3278) ? _3279 : min(_3278, _3279));
            float _3419 = isnan(0.0) ? _3409 : (isnan(_3409) ? 0.0 : min(_3409, 0.0));
            float _3420 = isnan(0.0) ? _3410 : (isnan(_3410) ? 0.0 : min(_3410, 0.0));
            _3448 = ((abs(_3285 / _3273) * cbSceneParam._m0[80u].y) * ((((_3419 - _3420) * 2.0) - ((exp2(_3293 * (isnan(0.0) ? _3409 : (isnan(_3409) ? 0.0 : max(_3409, 0.0)))) - exp2(_3293 * (isnan(0.0) ? _3410 : (isnan(_3410) ? 0.0 : max(_3410, 0.0))))) * _3408)) - ((exp2(_3295 * _3419) - exp2(_3295 * _3420)) * _3408))) + (_3288 * cbSceneParam._m0[80u].z);
        }
        vec4 _3450 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3205, _3206, 1.0), 0.0);
        float _3459 = exp2((_3448 * (-1.44269502162933349609375)) * (1.0 - _3450.w));
        float _3460 = log2(_3459);
        float _3476 = log2(_3225);
        _3297 = (exp2(_3476 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3460 * cbSceneParam._m0[78u].x)) * _3450.x) / cbSceneParam._m0[78u].x)) + _3222;
        _3299 = (exp2(_3476 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3460 * cbSceneParam._m0[78u].y)) * _3450.y) / cbSceneParam._m0[78u].y)) + _3223;
        _3301 = (exp2(_3476 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3460 * cbSceneParam._m0[78u].z)) * _3450.z) / cbSceneParam._m0[78u].z)) + _3224;
        _3303 = _3459 * _3225;
    }
    else
    {
        _3297 = _3222;
        _3299 = _3223;
        _3301 = _3224;
        _3303 = _3225;
    }
    float _3315 = roundEven(cbMatDynParam._m0[0u].y);
    bool _3316 = _3315 == 3.0;
    float _3317 = log2(_3303);
    float _3324 = exp2(_3317 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _5158 : (isnan(_5158) ? 1.0 : min(_5158, 1.0))) * (_3167 + ((isnan(0.0) ? _1888 : (isnan(_1888) ? 0.0 : max(_1888, 0.0))) * _1164))) + ((_3173 + ((isnan(0.0) ? _2179 : (isnan(_2179) ? 0.0 : max(_2179, 0.0))) * _1967)) * cbPerFrame._m0[3u].x));
    float _3325 = exp2(_3317 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _5169 : (isnan(_5169) ? 1.0 : min(_5169, 1.0))) * (_3169 + ((isnan(0.0) ? _1891 : (isnan(_1891) ? 0.0 : max(_1891, 0.0))) * _1164))) + ((_3175 + ((isnan(0.0) ? _2182 : (isnan(_2182) ? 0.0 : max(_2182, 0.0))) * _1967)) * cbPerFrame._m0[3u].x));
    float _3326 = exp2(_3317 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _5180 : (isnan(_5180) ? 1.0 : min(_5180, 1.0))) * (_3171 + ((isnan(0.0) ? _1894 : (isnan(_1894) ? 0.0 : max(_1894, 0.0))) * _1164))) + ((_3177 + ((isnan(0.0) ? _2185 : (isnan(_2185) ? 0.0 : max(_2185, 0.0))) * _1967)) * cbPerFrame._m0[3u].x));
    float _3335 = (_3315 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _3335 * (_3316 ? _3324 : (_3324 + (cbSceneParam._m0[72u].w * _3297)));
    SV_Target.y = _3335 * (_3316 ? _3325 : (_3325 + (cbSceneParam._m0[72u].w * _3299)));
    SV_Target.z = _3335 * (_3316 ? _3326 : (_3326 + (cbSceneParam._m0[72u].w * _3301)));
    SV_Target.w = cbInstanceData._m0[_3197].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_3197].w;
}


