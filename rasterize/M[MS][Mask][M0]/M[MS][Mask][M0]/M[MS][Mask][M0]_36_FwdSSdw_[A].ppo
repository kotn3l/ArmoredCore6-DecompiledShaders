#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 14) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_29;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_6;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1297;
float _3680;
float _3681;
float _3682;
float _3683;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _225 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _226 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _227 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _233 = inversesqrt(dot(vec3(_225, _226, _227), vec3(_225, _226, _227)));
    float _240 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _247 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _253 = uint(roundEven(NORMAL.w)) * 13u;
    uint _258 = _253 + 1u;
    uint _262 = _253 + 2u;
    float _271 = sqrt(((cbInstanceData._m0[_258].x * cbInstanceData._m0[_258].x) + (cbInstanceData._m0[_253].x * cbInstanceData._m0[_253].x)) + (cbInstanceData._m0[_262].x * cbInstanceData._m0[_262].x));
    float _272 = _271 * TEXCOORD.z;
    float _273 = _271 * TEXCOORD.w;
    vec4 _293 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _299 = _293.x * cbMtdParam._m0[11u].x;
    float _300 = _293.y * cbMtdParam._m0[11u].y;
    float _301 = _293.z * cbMtdParam._m0[11u].z;
    vec4 _320 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _272) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _273) + cbTextureTilingScale._m0[5u].w));
    vec4 _373 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _375 = _373.x;
    float _387 = dot(vec4(_375, _373.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _404 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w)).x) * 2.0) - ((((_375 - _387) * cbMtdParam._m0[24u].z) + _387) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3692 = isnan(0.0) ? _404 : (isnan(_404) ? 0.0 : max(_404, 0.0));
    float _405 = isnan(1.0) ? _3692 : (isnan(_3692) ? 1.0 : min(_3692, 1.0));
    float _412 = (_405 * ((_320.x * cbMtdParam._m0[12u].x) - _299)) + _299;
    float _413 = (_405 * ((_320.y * cbMtdParam._m0[12u].y) - _300)) + _300;
    float _414 = (_405 * ((_320.z * cbMtdParam._m0[12u].z) - _301)) + _301;
    vec4 _433 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _272) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _273) + cbTextureTilingScale._m0[14u].w));
    vec4 _453 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _272) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _273) + cbTextureTilingScale._m0[4u].w));
    vec4 _470 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _472 = _470.x;
    float _473 = _470.y;
    float _474 = _470.z;
    float _483 = ((_453.z - _474) * _405) + _474;
    float _486 = ((((_453.x - _472) * _405) + _472) * 2.0) + (-1.0);
    float _488 = ((((_453.y - _473) * _405) + _473) * 2.0) + (-1.0);
    float _489 = dot(vec2(_486, _488), vec2(_486, _488));
    float _3703 = isnan(0.0) ? _489 : (isnan(_489) ? 0.0 : max(_489, 0.0));
    float _494 = sqrt(1.0 - (isnan(1.0) ? _3703 : (isnan(_3703) ? 1.0 : min(_3703, 1.0))));
    vec4 _510 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _535 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _272) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _273) + cbTextureTilingScale._m0[11u].w));
    float _537 = _535.x;
    float _538 = 1.0 - _537;
    float _544 = isnan(-1.0) ? cbMtdParam._m0[24u].x : (isnan(cbMtdParam._m0[24u].x) ? (-1.0) : max(cbMtdParam._m0[24u].x, -1.0));
    float _547 = ((isnan(0.0) ? _544 : (isnan(_544) ? 0.0 : min(_544, 0.0))) * TEXCOORD_8.x) + TEXCOORD_8.w;
    float _556 = (_547 - ((((((_537 - _538) * cbMtdParam._m0[24u].w) + _538) + 0.00999999977648258209228515625) * cbMtdParam._m0[21u].z) * (1.0 - _547))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3724 = isnan(0.0) ? _556 : (isnan(_556) ? 0.0 : max(_556, 0.0));
    float _557 = isnan(1.0) ? _3724 : (isnan(_3724) ? 1.0 : min(_3724, 1.0));
    float _564 = (_557 * ((_433.x * cbMtdParam._m0[18u].x) - _412)) + _412;
    float _565 = (_557 * ((_433.y * cbMtdParam._m0[18u].y) - _413)) + _413;
    float _566 = (_557 * ((_433.z * cbMtdParam._m0[18u].z) - _414)) + _414;
    vec4 _578 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _272) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _273) + cbTextureTilingScale._m0[19u].w));
    float _580 = _578.x;
    float _581 = 1.0 - _580;
    float _608 = (TEXCOORD_8.x - ((cbMtdParam._m0[22u].w * (1.0 - TEXCOORD_8.x)) * ((((_580 - _581) * cbMtdParam._m0[24u].y) + _581) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3735 = isnan(0.0) ? _608 : (isnan(_608) ? 0.0 : max(_608, 0.0));
    float _609 = isnan(1.0) ? _3735 : (isnan(_3735) ? 1.0 : min(_3735, 1.0));
    float _617 = ((((cbMtdParam._m0[10u].x - _564) * TEXCOORD_8.x) * cbMtdParam._m0[23u].w) * _609) + _564;
    float _618 = ((((cbMtdParam._m0[10u].y - _565) * TEXCOORD_8.y) * cbMtdParam._m0[23u].w) * _609) + _565;
    float _619 = (((cbMtdParam._m0[23u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _566)) * _609) + _566;
    float _623 = (cbMtdParam._m0[19u].w * (_510.z - _483)) + _483;
    vec4 _637 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _272) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _273) + cbTextureTilingScale._m0[15u].w));
    float _644 = (_637.x * 2.0) + (-1.0);
    float _645 = (_637.y * 2.0) + (-1.0);
    float _646 = dot(vec2(_644, _645), vec2(_644, _645));
    float _3746 = isnan(0.0) ? _646 : (isnan(_646) ? 0.0 : max(_646, 0.0));
    float _654 = (_557 * (_637.z - _623)) + _623;
    float _657 = ((cbMtdParam._m0[23u].y - _654) * _609) + _654;
    vec4 _676 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _272) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _273) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _682 = (_676.x * 2.0) + (-1.0);
    float _683 = (_676.y * 2.0) + (-1.0);
    float _684 = dot(vec2(_682, _683), vec2(_682, _683));
    float _3757 = isnan(0.0) ? _684 : (isnan(_684) ? 0.0 : max(_684, 0.0));
    float _692 = (((_510.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _486;
    float _693 = (((_510.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _488;
    float _705 = (((_644 - _692) + (cbMtdParam._m0[21u].x * _692)) * _557) + _692;
    float _706 = (((_645 - _693) + (cbMtdParam._m0[21u].x * _693)) * _557) + _693;
    float _707 = (_557 * (sqrt(1.0 - (isnan(1.0) ? _3746 : (isnan(_3746) ? 1.0 : min(_3746, 1.0)))) - _494)) + _494;
    float _718 = (((_682 - _705) + (_705 * cbMtdParam._m0[22u].z)) * _609) + _705;
    float _719 = (((_683 - _706) + (_706 * cbMtdParam._m0[22u].z)) * _609) + _706;
    float _720 = ((sqrt(1.0 - (isnan(1.0) ? _3757 : (isnan(_3757) ? 1.0 : min(_3757, 1.0)))) - _707) * _609) + _707;
    float _722 = cbMtdParam._m0[22u].x + _510.w;
    float _725 = fma(_720, _240 * NORMAL.x, fma(_719, _247 * TANGENT.x, (_233 * _225) * _718));
    float _728 = fma(_720, _240 * NORMAL.y, fma(_719, _247 * TANGENT.y, (_233 * _226) * _718));
    float _731 = fma(_720, _240 * NORMAL.z, fma(_719, _247 * TANGENT.z, (_233 * _227) * _718));
    float _735 = inversesqrt(dot(vec3(_725, _728, _731), vec3(_725, _728, _731)));
    float _736 = _735 * _725;
    float _737 = _735 * _728;
    float _738 = _735 * _731;
    float _3768 = isnan(0.0) ? _657 : (isnan(_657) ? 0.0 : max(_657, 0.0));
    float _739 = isnan(1.0) ? _3768 : (isnan(_3768) ? 1.0 : min(_3768, 1.0));
    float _3779 = isnan(0.0) ? _722 : (isnan(_722) ? 0.0 : max(_722, 0.0));
    float _3790 = isnan(0.0) ? _617 : (isnan(_617) ? 0.0 : max(_617, 0.0));
    float _3801 = isnan(0.0) ? _618 : (isnan(_618) ? 0.0 : max(_618, 0.0));
    float _3812 = isnan(0.0) ? _619 : (isnan(_619) ? 0.0 : max(_619, 0.0));
    float _757 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _798 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _808 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _798);
    float _809 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _798);
    float _810 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _798);
    float _814 = inversesqrt(dot(vec3(_808, _809, _810), vec3(_808, _809, _810)));
    float _815 = _808 * _814;
    float _816 = _809 * _814;
    float _817 = _810 * _814;
    vec4 _822 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _824 = _822.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _978 = sqrt(((_808 * _808) + (_809 * _809)) + (_810 * _810));
        float _984 = (cbMatDynParam._m0[5u].x * _978) + cbMatDynParam._m0[5u].y;
        float _3823 = isnan(0.0) ? _984 : (isnan(_984) ? 0.0 : max(_984, 0.0));
        float _985 = isnan(1.0) ? _3823 : (isnan(_3823) ? 1.0 : min(_3823, 1.0));
        float _989 = (cbMatDynParam._m0[5u].z * _978) + cbMatDynParam._m0[5u].w;
        float _3834 = isnan(0.0) ? _989 : (isnan(_989) ? 0.0 : max(_989, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3834 : (isnan(_3834) ? 1.0 : min(_3834, 1.0))) - _985)) + _985) < ((_824 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _835 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _836 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _854 = fma(_738, cbSceneParam._m0[5u].z, fma(_737, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _736));
    float _857 = fma(_738, cbSceneParam._m0[6u].z, fma(_737, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _736));
    float _860 = fma(_738, cbSceneParam._m0[7u].z, fma(_737, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _736));
    uint _873 = _253 + 9u;
    uint _874 = _873 + uint(cbMatDynParam._m0[0u].w);
    float _880 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3790 : (isnan(_3790) ? 1.0 : min(_3790, 1.0)))) * cbInstanceData._m0[_874].x;
    float _881 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3801 : (isnan(_3801) ? 1.0 : min(_3801, 1.0)))) * cbInstanceData._m0[_874].y;
    float _882 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3812 : (isnan(_3812) ? 1.0 : min(_3812, 1.0)))) * cbInstanceData._m0[_874].z;
    float _3845 = isnan(0.0) ? _880 : (isnan(_880) ? 0.0 : max(_880, 0.0));
    float _883 = isnan(1.0) ? _3845 : (isnan(_3845) ? 1.0 : min(_3845, 1.0));
    float _3856 = isnan(0.0) ? _881 : (isnan(_881) ? 0.0 : max(_881, 0.0));
    float _884 = isnan(1.0) ? _3856 : (isnan(_3856) ? 1.0 : min(_3856, 1.0));
    float _3867 = isnan(0.0) ? _882 : (isnan(_882) ? 0.0 : max(_882, 0.0));
    float _885 = isnan(1.0) ? _3867 : (isnan(_3867) ? 1.0 : min(_3867, 1.0));
    vec4 _894 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _835, cbSceneParam._m0[86u].y * _836));
    float _898 = ((isnan(1.0) ? _3779 : (isnan(_3779) ? 1.0 : min(_3779, 1.0))) * TEXCOORD_5.w) * _894.x;
    float _899 = dot(vec3(_736, _737, _738), vec3(_815, _816, _817));
    float _902 = _899 * 2.0;
    float _906 = (_902 * _736) - _815;
    float _907 = (_902 * _737) - _816;
    float _908 = (_902 * _738) - _817;
    float _912 = abs(dot(vec3(_815, _816, _817), vec3(_736, _737, _738)));
    float _3878 = isnan(0.0) ? _912 : (isnan(_912) ? 0.0 : max(_912, 0.0));
    float _914 = sqrt(_739);
    float _927 = exp2((_914 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3878 : (isnan(_3878) ? 1.0 : min(_3878, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_914 * 3.0));
    float _959 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _963 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _967 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1296;
    float _1298;
    float _1299;
    float _1300;
    float _1301;
    float _1302;
    float _1303;
    float _1304;
    float _1305;
    float _1306;
    float _1307;
    float _1308;
    float _1309;
    float _1310;
    float _1311;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1021 = fma(_967, cbModelParam._m0[26u].z, fma(_963, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _959));
        float _1025 = fma(_967, cbModelParam._m0[27u].z, fma(_963, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _959));
        float _1029 = fma(_967, cbModelParam._m0[28u].z, fma(_963, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _959));
        float _1054 = _959 + _736;
        float _1055 = _963 + _737;
        float _1056 = _967 + _738;
        float _1066 = fma(_1056, cbModelParam._m0[26u].z, fma(_1055, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1054)) - _1021;
        float _1067 = fma(_1056, cbModelParam._m0[27u].z, fma(_1055, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1054)) - _1025;
        float _1068 = fma(_1056, cbModelParam._m0[28u].z, fma(_1055, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1054)) - _1029;
        float _1072 = inversesqrt(dot(vec3(_1066, _1067, _1068), vec3(_1066, _1067, _1068)));
        float _1085 = ((_1072 * _1066) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1021 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1086 = ((_1072 * _1067) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1025 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1087 = ((_1072 * _1068) / cbModelParam._m0[34u].z) + ((((((_1029 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1090 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1085, _1086, _1087), 0.0);
        vec4 _1097 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1085, _1086, _1087), 0.0);
        vec4 _1104 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1085, _1086, _1087), 0.0);
        vec4 _1111 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1085, _1086, _1087), 0.0);
        float _1124 = exp2((_1090.w + (-0.5)) * 20.0) * 2.0;
        float _1125 = _1124 * (_1090.x + (-0.5));
        float _1126 = _1124 * (_1090.y + (-0.5));
        float _1127 = _1124 * (_1090.z + (-0.5));
        float _1134 = exp2((_1097.w + (-0.5)) * 20.0) * 2.0;
        float _1135 = _1134 * (_1097.x + (-0.5));
        float _1136 = _1134 * (_1097.y + (-0.5));
        float _1137 = _1134 * (_1097.z + (-0.5));
        float _1144 = exp2((_1104.w + (-0.5)) * 20.0) * 2.0;
        float _1145 = _1144 * (_1104.x + (-0.5));
        float _1146 = _1144 * (_1104.y + (-0.5));
        float _1147 = _1144 * (_1104.z + (-0.5));
        float _1154 = exp2((_1111.w + (-0.5)) * 20.0) * 2.0;
        float _1155 = _1154 * (_1111.x + (-0.5));
        float _1156 = _1154 * (_1111.y + (-0.5));
        float _1157 = _1154 * (_1111.z + (-0.5));
        float _1158 = isnan(0.0) ? _1155 : (isnan(_1155) ? 0.0 : max(_1155, 0.0));
        float _1159 = isnan(0.0) ? _1156 : (isnan(_1156) ? 0.0 : max(_1156, 0.0));
        float _1160 = isnan(0.0) ? _1157 : (isnan(_1157) ? 0.0 : max(_1157, 0.0));
        float _1161 = _1125 * 0.5;
        float _1162 = _1135 * 0.5;
        float _1163 = _1145 * 0.5;
        float _1164 = dot(vec3(_1161, _1162, _1163), vec3(_1161, _1162, _1163));
        float _1169 = (_1164 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1164);
        float _1178 = (dot(vec3(_736, _737, _738), vec3(_1169 * _1161, _1169 * _1162, _1169 * _1163)) + 1.0) * 0.5;
        float _3904 = isnan(0.0) ? _1178 : (isnan(_1178) ? 0.0 : max(_1178, 0.0));
        float _1188 = sqrt(((_1162 * _1162) + (_1161 * _1161)) + (_1163 * _1163)) / (_1158 + 9.9999997473787516355514526367188e-06);
        float _3915 = isnan(0.0) ? _1188 : (isnan(_1188) ? 0.0 : max(_1188, 0.0));
        float _1189 = isnan(1.0) ? _3915 : (isnan(_3915) ? 1.0 : min(_3915, 1.0));
        float _1190 = _1189 * 2.0;
        float _1194 = (1.0 - _1189) / (_1189 + 1.0);
        float _3926 = isnan(0.0) ? _1194 : (isnan(_1194) ? 0.0 : max(_1194, 0.0));
        float _1195 = isnan(1.0) ? _3926 : (isnan(_3926) ? 1.0 : min(_3926, 1.0));
        float _1204 = ((((1.0 - _1195) * (_1190 + 2.0)) * exp2(log2(isnan(1.0) ? _3904 : (isnan(_3904) ? 1.0 : min(_3904, 1.0))) * (_1190 + 1.0))) + _1195) * _1158;
        float _1205 = _1126 * 0.5;
        float _1206 = _1136 * 0.5;
        float _1207 = _1146 * 0.5;
        float _1208 = dot(vec3(_1205, _1206, _1207), vec3(_1205, _1206, _1207));
        float _1213 = (_1208 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1208);
        float _1221 = (dot(vec3(_736, _737, _738), vec3(_1213 * _1205, _1213 * _1206, _1213 * _1207)) + 1.0) * 0.5;
        float _3937 = isnan(0.0) ? _1221 : (isnan(_1221) ? 0.0 : max(_1221, 0.0));
        float _1230 = sqrt(((_1206 * _1206) + (_1205 * _1205)) + (_1207 * _1207)) / (_1159 + 9.9999997473787516355514526367188e-06);
        float _3948 = isnan(0.0) ? _1230 : (isnan(_1230) ? 0.0 : max(_1230, 0.0));
        float _1231 = isnan(1.0) ? _3948 : (isnan(_3948) ? 1.0 : min(_3948, 1.0));
        float _1232 = _1231 * 2.0;
        float _1236 = (1.0 - _1231) / (_1231 + 1.0);
        float _3959 = isnan(0.0) ? _1236 : (isnan(_1236) ? 0.0 : max(_1236, 0.0));
        float _1237 = isnan(1.0) ? _3959 : (isnan(_3959) ? 1.0 : min(_3959, 1.0));
        float _1246 = ((((1.0 - _1237) * (_1232 + 2.0)) * exp2(log2(isnan(1.0) ? _3937 : (isnan(_3937) ? 1.0 : min(_3937, 1.0))) * (_1232 + 1.0))) + _1237) * _1159;
        float _1247 = _1127 * 0.5;
        float _1248 = _1137 * 0.5;
        float _1249 = _1147 * 0.5;
        float _1250 = dot(vec3(_1247, _1248, _1249), vec3(_1247, _1248, _1249));
        float _1255 = (_1250 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1250);
        float _1263 = (dot(vec3(_736, _737, _738), vec3(_1255 * _1247, _1255 * _1248, _1255 * _1249)) + 1.0) * 0.5;
        float _3970 = isnan(0.0) ? _1263 : (isnan(_1263) ? 0.0 : max(_1263, 0.0));
        float _1272 = sqrt(((_1248 * _1248) + (_1247 * _1247)) + (_1249 * _1249)) / (_1160 + 9.9999997473787516355514526367188e-06);
        float _3981 = isnan(0.0) ? _1272 : (isnan(_1272) ? 0.0 : max(_1272, 0.0));
        float _1273 = isnan(1.0) ? _3981 : (isnan(_3981) ? 1.0 : min(_3981, 1.0));
        float _1274 = _1273 * 2.0;
        float _1278 = (1.0 - _1273) / (_1273 + 1.0);
        float _3992 = isnan(0.0) ? _1278 : (isnan(_1278) ? 0.0 : max(_1278, 0.0));
        float _1279 = isnan(1.0) ? _3992 : (isnan(_3992) ? 1.0 : min(_3992, 1.0));
        float _1288 = ((((1.0 - _1279) * (_1274 + 2.0)) * exp2(log2(isnan(1.0) ? _3970 : (isnan(_3970) ? 1.0 : min(_3970, 1.0))) * (_1274 + 1.0))) + _1279) * _1160;
        _1296 = _1127;
        _1298 = _1126;
        _1299 = _1125;
        _1300 = _1137;
        _1301 = _1136;
        _1302 = _1135;
        _1303 = _1147;
        _1304 = _1146;
        _1305 = _1145;
        _1306 = _1160;
        _1307 = _1159;
        _1308 = _1158;
        _1309 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1204 : (isnan(_1204) ? 0.0 : max(_1204, 0.0)));
        _1310 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1246 : (isnan(_1246) ? 0.0 : max(_1246, 0.0)));
        _1311 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1288 : (isnan(_1288) ? 0.0 : max(_1288, 0.0)));
    }
    else
    {
        _1296 = _1297;
        _1298 = _1297;
        _1299 = _1297;
        _1300 = _1297;
        _1301 = _1297;
        _1302 = _1297;
        _1303 = _1297;
        _1304 = _1297;
        _1305 = _1297;
        _1306 = _1297;
        _1307 = _1297;
        _1308 = _1297;
        _1309 = 0.0;
        _1310 = 0.0;
        _1311 = 0.0;
    }
    float _1608;
    float _1609;
    float _1610;
    float _1611;
    float _1612;
    float _1613;
    float _1614;
    float _1615;
    float _1616;
    float _1617;
    float _1618;
    float _1619;
    float _1620;
    float _1621;
    float _1622;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1339 = fma(_967, cbModelParam._m0[30u].z, fma(_963, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _959));
        float _1343 = fma(_967, cbModelParam._m0[31u].z, fma(_963, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _959));
        float _1347 = fma(_967, cbModelParam._m0[32u].z, fma(_963, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _959));
        float _1370 = _959 + _736;
        float _1371 = _963 + _737;
        float _1372 = _967 + _738;
        float _1382 = fma(_1372, cbModelParam._m0[30u].z, fma(_1371, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1370)) - _1339;
        float _1383 = fma(_1372, cbModelParam._m0[31u].z, fma(_1371, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1370)) - _1343;
        float _1384 = fma(_1372, cbModelParam._m0[32u].z, fma(_1371, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1370)) - _1347;
        float _1388 = inversesqrt(dot(vec3(_1382, _1383, _1384), vec3(_1382, _1383, _1384)));
        float _1401 = ((_1388 * _1382) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1339 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1402 = ((_1388 * _1383) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1343 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1403 = ((_1388 * _1384) / cbModelParam._m0[35u].z) + ((((((_1347 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1405 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1401, _1402, _1403), 0.0);
        vec4 _1412 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1401, _1402, _1403), 0.0);
        vec4 _1419 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1401, _1402, _1403), 0.0);
        vec4 _1426 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1401, _1402, _1403), 0.0);
        float _1438 = exp2((_1405.w + (-0.5)) * 20.0) * 2.0;
        float _1439 = _1438 * (_1405.x + (-0.5));
        float _1440 = _1438 * (_1405.y + (-0.5));
        float _1441 = _1438 * (_1405.z + (-0.5));
        float _1448 = exp2((_1412.w + (-0.5)) * 20.0) * 2.0;
        float _1449 = _1448 * (_1412.x + (-0.5));
        float _1450 = _1448 * (_1412.y + (-0.5));
        float _1451 = _1448 * (_1412.z + (-0.5));
        float _1458 = exp2((_1419.w + (-0.5)) * 20.0) * 2.0;
        float _1459 = _1458 * (_1419.x + (-0.5));
        float _1460 = _1458 * (_1419.y + (-0.5));
        float _1461 = _1458 * (_1419.z + (-0.5));
        float _1468 = exp2((_1426.w + (-0.5)) * 20.0) * 2.0;
        float _1469 = _1468 * (_1426.x + (-0.5));
        float _1470 = _1468 * (_1426.y + (-0.5));
        float _1471 = _1468 * (_1426.z + (-0.5));
        float _1472 = isnan(0.0) ? _1469 : (isnan(_1469) ? 0.0 : max(_1469, 0.0));
        float _1473 = isnan(0.0) ? _1470 : (isnan(_1470) ? 0.0 : max(_1470, 0.0));
        float _1474 = isnan(0.0) ? _1471 : (isnan(_1471) ? 0.0 : max(_1471, 0.0));
        float _1475 = _1439 * 0.5;
        float _1476 = _1449 * 0.5;
        float _1477 = _1459 * 0.5;
        float _1478 = dot(vec3(_1475, _1476, _1477), vec3(_1475, _1476, _1477));
        float _1483 = (_1478 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1478);
        float _1491 = (dot(vec3(_736, _737, _738), vec3(_1483 * _1475, _1483 * _1476, _1483 * _1477)) + 1.0) * 0.5;
        float _4033 = isnan(0.0) ? _1491 : (isnan(_1491) ? 0.0 : max(_1491, 0.0));
        float _1500 = sqrt(((_1476 * _1476) + (_1475 * _1475)) + (_1477 * _1477)) / (_1472 + 9.9999997473787516355514526367188e-06);
        float _4044 = isnan(0.0) ? _1500 : (isnan(_1500) ? 0.0 : max(_1500, 0.0));
        float _1501 = isnan(1.0) ? _4044 : (isnan(_4044) ? 1.0 : min(_4044, 1.0));
        float _1502 = _1501 * 2.0;
        float _1506 = (1.0 - _1501) / (_1501 + 1.0);
        float _4055 = isnan(0.0) ? _1506 : (isnan(_1506) ? 0.0 : max(_1506, 0.0));
        float _1507 = isnan(1.0) ? _4055 : (isnan(_4055) ? 1.0 : min(_4055, 1.0));
        float _1516 = ((((1.0 - _1507) * (_1502 + 2.0)) * exp2(log2(isnan(1.0) ? _4033 : (isnan(_4033) ? 1.0 : min(_4033, 1.0))) * (_1502 + 1.0))) + _1507) * _1472;
        float _1517 = _1440 * 0.5;
        float _1518 = _1450 * 0.5;
        float _1519 = _1460 * 0.5;
        float _1520 = dot(vec3(_1517, _1518, _1519), vec3(_1517, _1518, _1519));
        float _1525 = (_1520 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1520);
        float _1533 = (dot(vec3(_736, _737, _738), vec3(_1525 * _1517, _1525 * _1518, _1525 * _1519)) + 1.0) * 0.5;
        float _4066 = isnan(0.0) ? _1533 : (isnan(_1533) ? 0.0 : max(_1533, 0.0));
        float _1542 = sqrt(((_1518 * _1518) + (_1517 * _1517)) + (_1519 * _1519)) / (_1473 + 9.9999997473787516355514526367188e-06);
        float _4077 = isnan(0.0) ? _1542 : (isnan(_1542) ? 0.0 : max(_1542, 0.0));
        float _1543 = isnan(1.0) ? _4077 : (isnan(_4077) ? 1.0 : min(_4077, 1.0));
        float _1544 = _1543 * 2.0;
        float _1548 = (1.0 - _1543) / (_1543 + 1.0);
        float _4088 = isnan(0.0) ? _1548 : (isnan(_1548) ? 0.0 : max(_1548, 0.0));
        float _1549 = isnan(1.0) ? _4088 : (isnan(_4088) ? 1.0 : min(_4088, 1.0));
        float _1558 = ((((1.0 - _1549) * (_1544 + 2.0)) * exp2(log2(isnan(1.0) ? _4066 : (isnan(_4066) ? 1.0 : min(_4066, 1.0))) * (_1544 + 1.0))) + _1549) * _1473;
        float _1559 = _1441 * 0.5;
        float _1560 = _1451 * 0.5;
        float _1561 = _1461 * 0.5;
        float _1562 = dot(vec3(_1559, _1560, _1561), vec3(_1559, _1560, _1561));
        float _1567 = (_1562 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1562);
        float _1575 = (dot(vec3(_736, _737, _738), vec3(_1567 * _1559, _1567 * _1560, _1567 * _1561)) + 1.0) * 0.5;
        float _4099 = isnan(0.0) ? _1575 : (isnan(_1575) ? 0.0 : max(_1575, 0.0));
        float _1584 = sqrt(((_1560 * _1560) + (_1559 * _1559)) + (_1561 * _1561)) / (_1474 + 9.9999997473787516355514526367188e-06);
        float _4110 = isnan(0.0) ? _1584 : (isnan(_1584) ? 0.0 : max(_1584, 0.0));
        float _1585 = isnan(1.0) ? _4110 : (isnan(_4110) ? 1.0 : min(_4110, 1.0));
        float _1586 = _1585 * 2.0;
        float _1590 = (1.0 - _1585) / (_1585 + 1.0);
        float _4121 = isnan(0.0) ? _1590 : (isnan(_1590) ? 0.0 : max(_1590, 0.0));
        float _1591 = isnan(1.0) ? _4121 : (isnan(_4121) ? 1.0 : min(_4121, 1.0));
        float _1600 = ((((1.0 - _1591) * (_1586 + 2.0)) * exp2(log2(isnan(1.0) ? _4099 : (isnan(_4099) ? 1.0 : min(_4099, 1.0))) * (_1586 + 1.0))) + _1591) * _1474;
        _1608 = _1441;
        _1609 = _1440;
        _1610 = _1439;
        _1611 = _1451;
        _1612 = _1450;
        _1613 = _1449;
        _1614 = _1461;
        _1615 = _1460;
        _1616 = _1459;
        _1617 = _1474;
        _1618 = _1473;
        _1619 = _1472;
        _1620 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1516 : (isnan(_1516) ? 0.0 : max(_1516, 0.0)));
        _1621 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1558 : (isnan(_1558) ? 0.0 : max(_1558, 0.0)));
        _1622 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1600 : (isnan(_1600) ? 0.0 : max(_1600, 0.0)));
    }
    else
    {
        _1608 = _1297;
        _1609 = _1297;
        _1610 = _1297;
        _1611 = _1297;
        _1612 = _1297;
        _1613 = _1297;
        _1614 = _1297;
        _1615 = _1297;
        _1616 = _1297;
        _1617 = _1297;
        _1618 = _1297;
        _1619 = _1297;
        _1620 = 0.0;
        _1621 = 0.0;
        _1622 = 0.0;
    }
    float _1632 = (cbModelParam._m0[1u].x * (_1620 - _1309)) + _1309;
    float _1633 = (cbModelParam._m0[1u].x * (_1621 - _1310)) + _1310;
    float _1634 = (cbModelParam._m0[1u].x * (_1622 - _1311)) + _1311;
    float _1655 = fma(_1634, cbSceneParam._m0[89u].z, fma(_1633, cbSceneParam._m0[89u].y, _1632 * cbSceneParam._m0[89u].x));
    float _1658 = fma(_1634, cbSceneParam._m0[90u].z, fma(_1633, cbSceneParam._m0[90u].y, _1632 * cbSceneParam._m0[90u].x));
    float _1661 = fma(_1634, cbSceneParam._m0[91u].z, fma(_1633, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1632));
    float _1676 = _906 * 0.5;
    float _1677 = _907 * 0.5;
    float _1678 = _908 * 0.5;
    float _1679 = dot(vec4(_1676, _1677, _1678, 1.0), vec4(_1610, _1613, _1616, _1619));
    float _1682 = dot(vec4(_1676, _1677, _1678, 1.0), vec4(_1609, _1612, _1615, _1618));
    float _1685 = dot(vec4(_1676, _1677, _1678, 1.0), vec4(_1608, _1611, _1614, _1617));
    float _1719;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1692 = dot(vec4(_1676, _1677, _1678, 1.0), vec4(_1296, _1300, _1303, _1306));
        float _1696 = dot(vec4(_1676, _1677, _1678, 1.0), vec4(_1298, _1301, _1304, _1307));
        float _1700 = dot(vec4(_1676, _1677, _1678, 1.0), vec4(_1299, _1302, _1305, _1308));
        float _1707 = dot(vec4(cbModelParam._m0[39u]), vec4(_1676, _1677, _1678, 1.0));
        _1719 = dot(vec3(isnan(0.0) ? _1700 : (isnan(_1700) ? 0.0 : max(_1700, 0.0)), isnan(0.0) ? _1696 : (isnan(_1696) ? 0.0 : max(_1696, 0.0)), isnan(0.0) ? _1692 : (isnan(_1692) ? 0.0 : max(_1692, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1707) ? 0.0 : (isnan(0.0) ? _1707 : max(0.0, _1707))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1719 = 1.0;
    }
    float _1730;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1721 = dot(vec4(cbModelParam._m0[40u]), vec4(_1676, _1677, _1678, 1.0));
        _1730 = dot(vec3(isnan(0.0) ? _1679 : (isnan(_1679) ? 0.0 : max(_1679, 0.0)), isnan(0.0) ? _1682 : (isnan(_1682) ? 0.0 : max(_1682, 0.0)), isnan(0.0) ? _1685 : (isnan(_1685) ? 0.0 : max(_1685, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1721) ? 0.0 : (isnan(0.0) ? _1721 : max(0.0, _1721))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1730 = 1.0;
    }
    float _1734 = (_1730 * cbModelParam._m0[1u].x) + (_1719 * (1.0 - cbModelParam._m0[1u].x));
    float _1744 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _739);
    float _1745 = isnan(_1744) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1744 : min(cbModelParam._m0[25u].z, _1744));
    float _1825;
    float _1827;
    float _1829;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1792 = fma(_967, cbModelParam._m0[13u].z, fma(_963, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _959)) + cbModelParam._m0[13u].w;
        float _1796 = fma(_967, cbModelParam._m0[14u].z, fma(_963, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _959)) + cbModelParam._m0[14u].w;
        float _1800 = fma(_967, cbModelParam._m0[15u].z, fma(_963, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _959)) + cbModelParam._m0[15u].w;
        float _1803 = fma(_908, cbModelParam._m0[13u].z, fma(_907, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _906));
        float _1806 = fma(_908, cbModelParam._m0[14u].z, fma(_907, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _906));
        float _1809 = fma(_908, cbModelParam._m0[15u].z, fma(_907, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _906));
        float _1837;
        if (_1803 > 0.0)
        {
            _1837 = abs((1.0 - _1792) / _1803);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1803 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1792 + 1.0) / _1803);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1837 = frontier_phi_17_15_ladder;
        }
        float _2058;
        if (_1806 > 0.0)
        {
            _2058 = abs((1.0 - _1796) / _1806);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1806 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1796 + 1.0) / _1806);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2058 = frontier_phi_26_22_ladder;
        }
        float _2304;
        if (_1809 > 0.0)
        {
            _2304 = abs((1.0 - _1800) / _1809);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1809 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1800 + 1.0) / _1809);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2304 = frontier_phi_38_33_ladder;
        }
        float _2306 = isnan(_2058) ? _1837 : (isnan(_1837) ? _2058 : min(_1837, _2058));
        float _2307 = isnan(_2304) ? _2306 : (isnan(_2306) ? _2304 : min(_2306, _2304));
        float _2311 = (_2307 * _1803) + _1792;
        float _2312 = (_2307 * _1806) + _1796;
        float _2313 = (_2307 * _1809) + _1800;
        float _2314 = _2307 * 9.9999997473787516355514526367188e-05;
        float _2316 = (-1.0) - _2314;
        float _2318 = _2314 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2313 > _2318) || ((_2313 < _2316) || ((_2312 > _2318) || ((_2312 < _2316) || ((_2311 < _2316) || (_2311 > _2318))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2437 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2313, cbModelParam._m0[9u].z, fma(_2312, cbModelParam._m0[9u].y, _2311 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2313, cbModelParam._m0[10u].z, fma(_2312, cbModelParam._m0[10u].y, _2311 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2313, cbModelParam._m0[11u].z, fma(_2312, cbModelParam._m0[11u].y, _2311 * cbModelParam._m0[11u].x))), _1745);
            frontier_phi_16_38_ladder = _2437.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2437.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2437.x * cbModelParam._m0[1u].y;
        }
        _1825 = frontier_phi_16_38_ladder_2;
        _1827 = frontier_phi_16_38_ladder_1;
        _1829 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1813 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_906, _907, _908), _1745);
        _1825 = _1813.x * cbModelParam._m0[1u].y;
        _1827 = _1813.y * cbModelParam._m0[1u].y;
        _1829 = _1813.z * cbModelParam._m0[1u].y;
    }
    float _1833 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _739);
    float _1834 = isnan(_1833) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1833 : min(cbModelParam._m0[25u].w, _1833));
    float _1923;
    float _1925;
    float _1927;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1887 = fma(_967, cbModelParam._m0[21u].z, fma(_963, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _959)) + cbModelParam._m0[21u].w;
        float _1891 = fma(_967, cbModelParam._m0[22u].z, fma(_963, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _959)) + cbModelParam._m0[22u].w;
        float _1895 = fma(_967, cbModelParam._m0[23u].z, fma(_963, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _959)) + cbModelParam._m0[23u].w;
        float _1898 = fma(_908, cbModelParam._m0[21u].z, fma(_907, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _906));
        float _1901 = fma(_908, cbModelParam._m0[22u].z, fma(_907, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _906));
        float _1904 = fma(_908, cbModelParam._m0[23u].z, fma(_907, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _906));
        float _2063;
        if (_1898 > 0.0)
        {
            _2063 = abs((1.0 - _1887) / _1898);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1898 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1887 + 1.0) / _1898);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2063 = frontier_phi_28_24_ladder;
        }
        float _2331;
        if (_1901 > 0.0)
        {
            _2331 = abs((1.0 - _1891) / _1901);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1901 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1891 + 1.0) / _1901);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2331 = frontier_phi_40_35_ladder;
        }
        float _2536;
        if (_1904 > 0.0)
        {
            _2536 = abs((1.0 - _1895) / _1904);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1904 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1895 + 1.0) / _1904);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2536 = frontier_phi_49_46_ladder;
        }
        float _2538 = isnan(_2331) ? _2063 : (isnan(_2063) ? _2331 : min(_2063, _2331));
        float _2539 = isnan(_2536) ? _2538 : (isnan(_2538) ? _2536 : min(_2538, _2536));
        float _2543 = (_2539 * _1898) + _1887;
        float _2544 = (_2539 * _1901) + _1891;
        float _2545 = (_2539 * _1904) + _1895;
        float _2546 = _2539 * 9.9999997473787516355514526367188e-05;
        float _2547 = (-1.0) - _2546;
        float _2549 = _2546 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2545 > _2549) || ((_2545 < _2547) || ((_2544 > _2549) || ((_2544 < _2547) || ((_2543 < _2547) || (_2543 > _2549))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2744 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2545, cbModelParam._m0[17u].z, fma(_2544, cbModelParam._m0[17u].y, _2543 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2545, cbModelParam._m0[18u].z, fma(_2544, cbModelParam._m0[18u].y, _2543 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2545, cbModelParam._m0[19u].z, fma(_2544, cbModelParam._m0[19u].y, _2543 * cbModelParam._m0[19u].x))), _1834);
            frontier_phi_25_49_ladder = _2744.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2744.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2744.x * cbModelParam._m0[1u].z;
        }
        _1923 = frontier_phi_25_49_ladder_2;
        _1925 = frontier_phi_25_49_ladder_1;
        _1927 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1907 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_906, _907, _908), _1834);
        _1923 = _1907.x * cbModelParam._m0[1u].z;
        _1925 = _1907.y * cbModelParam._m0[1u].z;
        _1927 = _1907.z * cbModelParam._m0[1u].z;
    }
    float _1939 = ((((1.0 - _927) * ((_914 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_927 * _914)) * _898;
    float _1940 = _1939 * ((cbModelParam._m0[1u].w * (_1923 - _1825)) + _1825);
    float _1941 = _1939 * ((cbModelParam._m0[1u].w * (_1925 - _1827)) + _1827);
    float _1942 = _1939 * ((cbModelParam._m0[1u].w * (_1927 - _1829)) + _1829);
    float _1945 = fma(_1942, cbSceneParam._m0[89u].z, fma(_1941, cbSceneParam._m0[89u].y, _1940 * cbSceneParam._m0[89u].x));
    float _1948 = fma(_1942, cbSceneParam._m0[90u].z, fma(_1941, cbSceneParam._m0[90u].y, _1940 * cbSceneParam._m0[90u].x));
    float _1951 = fma(_1942, cbSceneParam._m0[91u].z, fma(_1941, cbSceneParam._m0[91u].y, _1940 * cbSceneParam._m0[91u].x));
    vec4 _1959 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_835, _836));
    float _1961 = _1959.w;
    float _1973 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1961);
    float _1974 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1961);
    float _1975 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1961);
    uvec4 _1979 = floatBitsToUint(cbInstanceData._m0[_253 + 5u]);
    uint _1981 = _1979.x * 14u;
    uint _1982 = _1981 + 13u;
    float _1989 = _898 + (-1.0);
    float _1994 = (cbLight._m0[_1982].x * _1989) + 1.0;
    float _1995 = (cbLight._m0[_1982].y * _1989) + 1.0;
    float _1996 = (cbLight._m0[_1982].z * _1989) + 1.0;
    float _1997 = (cbLight._m0[_1982].w * _1989) + 1.0;
    uint _1998 = _1981 + 5u;
    float _2004 = isnan(1.0) ? _1995 : (isnan(_1995) ? 1.0 : min(_1995, 1.0));
    uint _2008 = _1981 + 4u;
    float _2017 = isnan(1.0) ? _1994 : (isnan(_1994) ? 1.0 : min(_1994, 1.0));
    uint _2021 = _1981 | 1u;
    float _2032 = dot(vec3(cbLight._m0[_1981].xyz), vec3(_736, _737, _738));
    float _2035 = dot(vec3(cbLight._m0[_2021].xyz), vec3(_736, _737, _738));
    float _4257 = isnan(0.0) ? _2032 : (isnan(_2032) ? 0.0 : max(_2032, 0.0));
    float _4268 = isnan(0.0) ? _2035 : (isnan(_2035) ? 0.0 : max(_2035, 0.0));
    float _2040 = (isnan(1.0) ? _4257 : (isnan(_4257) ? 1.0 : min(_4257, 1.0))) * 0.3183098733425140380859375;
    float _2042 = (isnan(1.0) ? _4268 : (isnan(_4268) ? 1.0 : min(_4268, 1.0))) * 0.3183098733425140380859375;
    float _2049 = ((cbLight._m0[_1998].x * _2004) * _2042) + (((cbLight._m0[_2008].x * _1973) * _2017) * _2040);
    float _2050 = ((_2004 * cbLight._m0[_1998].y) * _2042) + (((cbLight._m0[_2008].y * _1974) * _2017) * _2040);
    float _2051 = ((_2004 * cbLight._m0[_1998].z) * _2042) + (((cbLight._m0[_2008].z * _1975) * _2017) * _2040);
    uvec4 _2055 = floatBitsToUint(cbLight._m0[_1981 + 12u]);
    bool _2057 = _2055.x == 0u;
    float _2068;
    float _2070;
    float _2072;
    if (_2057)
    {
        _2068 = _2049;
        _2070 = _2050;
        _2072 = _2051;
    }
    else
    {
        uint _2076 = _1981 + 6u;
        float _2092 = (dot(vec3(cbLight._m0[_1981 + 2u].xyz), vec3(_736, _737, _738)) * 0.5) + 0.5;
        float _2093 = _2092 * _2092;
        float _4279 = isnan(0.0) ? _2093 : (isnan(_2093) ? 0.0 : max(_2093, 0.0));
        float _2094 = isnan(1.0) ? _4279 : (isnan(_4279) ? 1.0 : min(_4279, 1.0));
        float _2095 = isnan(1.0) ? _1996 : (isnan(_1996) ? 1.0 : min(_1996, 1.0));
        _2068 = (((cbLight._m0[_2076].x * 0.3183098733425140380859375) * _2094) * _2095) + _2049;
        _2070 = (((cbLight._m0[_2076].y * 0.3183098733425140380859375) * _2094) * _2095) + _2050;
        _2072 = (((cbLight._m0[_2076].z * 0.3183098733425140380859375) * _2094) * _2095) + _2051;
    }
    bool _2075 = _2055.y == 0u;
    float _2113;
    float _2115;
    float _2117;
    if (_2075)
    {
        _2113 = _2068;
        _2115 = _2070;
        _2117 = _2072;
    }
    else
    {
        uint _2275 = _1981 + 7u;
        float _2291 = (dot(vec3(cbLight._m0[_1981 + 3u].xyz), vec3(_736, _737, _738)) * 0.5) + 0.5;
        float _2292 = _2291 * _2291;
        float _4295 = isnan(0.0) ? _2292 : (isnan(_2292) ? 0.0 : max(_2292, 0.0));
        float _2293 = isnan(1.0) ? _4295 : (isnan(_4295) ? 1.0 : min(_4295, 1.0));
        float _2294 = isnan(1.0) ? _1997 : (isnan(_1997) ? 1.0 : min(_1997, 1.0));
        _2113 = (((cbLight._m0[_2275].x * 0.3183098733425140380859375) * _2293) * _2294) + _2068;
        _2115 = (((cbLight._m0[_2275].y * 0.3183098733425140380859375) * _2293) * _2294) + _2070;
        _2117 = (((cbLight._m0[_2275].z * 0.3183098733425140380859375) * _2293) * _2294) + _2072;
    }
    uint _2120 = _1981 + 8u;
    float _2133 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1981].w)) * _739) * 0.949999988079071044921875);
    float _2134 = _2133 * _2133;
    float _2135 = cbLight._m0[_1981].x + _815;
    float _2136 = cbLight._m0[_1981].y + _816;
    float _2137 = cbLight._m0[_1981].z + _817;
    float _2141 = inversesqrt(dot(vec3(_2135, _2136, _2137), vec3(_2135, _2136, _2137)));
    float _2142 = _2141 * _2135;
    float _2143 = _2141 * _2136;
    float _2144 = _2141 * _2137;
    float _2145 = dot(vec3(_736, _737, _738), vec3(cbLight._m0[_1981].xyz));
    float _4311 = isnan(0.0) ? _2145 : (isnan(_2145) ? 0.0 : max(_2145, 0.0));
    float _2148 = isnan(1.0) ? _4311 : (isnan(_4311) ? 1.0 : min(_4311, 1.0));
    float _4322 = isnan(0.0) ? _899 : (isnan(_899) ? 0.0 : max(_899, 0.0));
    float _2149 = isnan(1.0) ? _4322 : (isnan(_4322) ? 1.0 : min(_4322, 1.0));
    float _2150 = dot(vec3(_736, _737, _738), vec3(_2142, _2143, _2144));
    float _4333 = isnan(0.0) ? _2150 : (isnan(_2150) ? 0.0 : max(_2150, 0.0));
    float _2153 = isnan(1.0) ? _4333 : (isnan(_4333) ? 1.0 : min(_4333, 1.0));
    float _2154 = dot(vec3(cbLight._m0[_1981].xyz), vec3(_2142, _2143, _2144));
    float _4344 = isnan(0.0) ? _2154 : (isnan(_2154) ? 0.0 : max(_2154, 0.0));
    float _2158 = _2134 * _2134;
    float _2162 = ((_2153 * _2153) * (_2158 + (-1.0))) + 1.0;
    float _2173 = (exp2(log2(1.0 - (isnan(1.0) ? _4344 : (isnan(_4344) ? 1.0 : min(_4344, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2174 = 1.0 - _2134;
    float _2185 = (0.5 / (((_2149 * ((_2148 * _2174) + _2134)) + 9.9999999392252902907785028219223e-09) + (((_2149 * _2174) + _2134) * _2148))) * _2148;
    float _4355 = isnan(0.0) ? _2185 : (isnan(_2185) ? 0.0 : max(_2185, 0.0));
    float _2187 = (isnan(1.0) ? _4355 : (isnan(_4355) ? 1.0 : min(_4355, 1.0))) * (_2158 / ((_2162 * _2162) * 3.141590118408203125));
    uint _2201 = _1981 + 9u;
    float _2212 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2021].w)) * _739) * 0.949999988079071044921875);
    float _2213 = _2212 * _2212;
    float _2214 = cbLight._m0[_2021].x + _815;
    float _2215 = cbLight._m0[_2021].y + _816;
    float _2216 = cbLight._m0[_2021].z + _817;
    float _2220 = inversesqrt(dot(vec3(_2214, _2215, _2216), vec3(_2214, _2215, _2216)));
    float _2221 = _2220 * _2214;
    float _2222 = _2220 * _2215;
    float _2223 = _2220 * _2216;
    float _2224 = dot(vec3(_736, _737, _738), vec3(cbLight._m0[_2021].xyz));
    float _4366 = isnan(0.0) ? _2224 : (isnan(_2224) ? 0.0 : max(_2224, 0.0));
    float _2227 = isnan(1.0) ? _4366 : (isnan(_4366) ? 1.0 : min(_4366, 1.0));
    float _2228 = dot(vec3(_736, _737, _738), vec3(_2221, _2222, _2223));
    float _4377 = isnan(0.0) ? _2228 : (isnan(_2228) ? 0.0 : max(_2228, 0.0));
    float _2231 = isnan(1.0) ? _4377 : (isnan(_4377) ? 1.0 : min(_4377, 1.0));
    float _2232 = dot(vec3(cbLight._m0[_2021].xyz), vec3(_2221, _2222, _2223));
    float _4388 = isnan(0.0) ? _2232 : (isnan(_2232) ? 0.0 : max(_2232, 0.0));
    float _2236 = _2213 * _2213;
    float _2240 = ((_2231 * _2231) * (_2236 + (-1.0))) + 1.0;
    float _2249 = (exp2(log2(1.0 - (isnan(1.0) ? _4388 : (isnan(_4388) ? 1.0 : min(_4388, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2250 = 1.0 - _2213;
    float _2260 = (0.5 / (((_2149 * ((_2227 * _2250) + _2213)) + 9.9999999392252902907785028219223e-09) + (((_2149 * _2250) + _2213) * _2227))) * _2227;
    float _4399 = isnan(0.0) ? _2260 : (isnan(_2260) ? 0.0 : max(_2260, 0.0));
    float _2262 = (isnan(1.0) ? _4399 : (isnan(_4399) ? 1.0 : min(_4399, 1.0))) * (_2236 / ((_2240 * _2240) * 3.141590118408203125));
    float _2272 = (((_2249 * cbLight._m0[_2201].x) * _2262) * _2004) + ((((cbLight._m0[_2120].x * _1973) * _2173) * _2187) * _2017);
    float _2273 = (((_2249 * cbLight._m0[_2201].y) * _2262) * _2004) + ((((cbLight._m0[_2120].y * _1974) * _2173) * _2187) * _2017);
    float _2274 = (((_2249 * cbLight._m0[_2201].z) * _2262) * _2004) + ((((cbLight._m0[_2120].z * _1975) * _2173) * _2187) * _2017);
    float _2336;
    float _2338;
    float _2340;
    if (_2057)
    {
        _2336 = _2272;
        _2338 = _2273;
        _2340 = _2274;
    }
    else
    {
        uint _2342 = _1981 + 2u;
        uint _2346 = _1981 + 10u;
        float _2360 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2342].w)) * _739) * 0.949999988079071044921875);
        float _2361 = _2360 * _2360;
        float _2362 = cbLight._m0[_2342].x + _815;
        float _2363 = cbLight._m0[_2342].y + _816;
        float _2364 = cbLight._m0[_2342].z + _817;
        float _2368 = inversesqrt(dot(vec3(_2362, _2363, _2364), vec3(_2362, _2363, _2364)));
        float _2369 = _2368 * _2362;
        float _2370 = _2368 * _2363;
        float _2371 = _2368 * _2364;
        float _2372 = dot(vec3(_736, _737, _738), vec3(cbLight._m0[_2342].xyz));
        float _4410 = isnan(0.0) ? _2372 : (isnan(_2372) ? 0.0 : max(_2372, 0.0));
        float _2375 = isnan(1.0) ? _4410 : (isnan(_4410) ? 1.0 : min(_4410, 1.0));
        float _2376 = dot(vec3(_736, _737, _738), vec3(_2369, _2370, _2371));
        float _4421 = isnan(0.0) ? _2376 : (isnan(_2376) ? 0.0 : max(_2376, 0.0));
        float _2379 = isnan(1.0) ? _4421 : (isnan(_4421) ? 1.0 : min(_4421, 1.0));
        float _2380 = dot(vec3(cbLight._m0[_2342].xyz), vec3(_2369, _2370, _2371));
        float _4432 = isnan(0.0) ? _2380 : (isnan(_2380) ? 0.0 : max(_2380, 0.0));
        float _2384 = _2361 * _2361;
        float _2388 = ((_2379 * _2379) * (_2384 + (-1.0))) + 1.0;
        float _2397 = (exp2(log2(1.0 - (isnan(1.0) ? _4432 : (isnan(_4432) ? 1.0 : min(_4432, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2398 = 1.0 - _2361;
        float _2408 = (0.5 / (((_2149 * ((_2375 * _2398) + _2361)) + 9.9999999392252902907785028219223e-09) + (((_2149 * _2398) + _2361) * _2375))) * _2375;
        float _4443 = isnan(0.0) ? _2408 : (isnan(_2408) ? 0.0 : max(_2408, 0.0));
        float _2410 = (isnan(1.0) ? _4443 : (isnan(_4443) ? 1.0 : min(_4443, 1.0))) * (_2384 / ((_2388 * _2388) * 3.141590118408203125));
        float _2411 = isnan(1.0) ? _1996 : (isnan(_1996) ? 1.0 : min(_1996, 1.0));
        _2336 = (((_2397 * cbLight._m0[_2346].x) * _2410) * _2411) + _2272;
        _2338 = (((_2397 * cbLight._m0[_2346].y) * _2410) * _2411) + _2273;
        _2340 = (((_2397 * cbLight._m0[_2346].z) * _2410) * _2411) + _2274;
    }
    float _2446;
    float _2448;
    float _2450;
    if (_2075)
    {
        _2446 = _2336;
        _2448 = _2338;
        _2450 = _2340;
    }
    else
    {
        uint _2457 = _1981 + 3u;
        uint _2461 = _1981 + 11u;
        float _2475 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2457].w)) * _739) * 0.949999988079071044921875);
        float _2476 = _2475 * _2475;
        float _2477 = cbLight._m0[_2457].x + _815;
        float _2478 = cbLight._m0[_2457].y + _816;
        float _2479 = cbLight._m0[_2457].z + _817;
        float _2483 = inversesqrt(dot(vec3(_2477, _2478, _2479), vec3(_2477, _2478, _2479)));
        float _2484 = _2483 * _2477;
        float _2485 = _2483 * _2478;
        float _2486 = _2483 * _2479;
        float _2487 = dot(vec3(_736, _737, _738), vec3(cbLight._m0[_2457].xyz));
        float _4459 = isnan(0.0) ? _2487 : (isnan(_2487) ? 0.0 : max(_2487, 0.0));
        float _2490 = isnan(1.0) ? _4459 : (isnan(_4459) ? 1.0 : min(_4459, 1.0));
        float _2491 = dot(vec3(_736, _737, _738), vec3(_2484, _2485, _2486));
        float _4470 = isnan(0.0) ? _2491 : (isnan(_2491) ? 0.0 : max(_2491, 0.0));
        float _2494 = isnan(1.0) ? _4470 : (isnan(_4470) ? 1.0 : min(_4470, 1.0));
        float _2495 = dot(vec3(cbLight._m0[_2457].xyz), vec3(_2484, _2485, _2486));
        float _4481 = isnan(0.0) ? _2495 : (isnan(_2495) ? 0.0 : max(_2495, 0.0));
        float _2499 = _2476 * _2476;
        float _2503 = ((_2494 * _2494) * (_2499 + (-1.0))) + 1.0;
        float _2512 = (exp2(log2(1.0 - (isnan(1.0) ? _4481 : (isnan(_4481) ? 1.0 : min(_4481, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2513 = 1.0 - _2476;
        float _2523 = (0.5 / (((_2149 * ((_2490 * _2513) + _2476)) + 9.9999999392252902907785028219223e-09) + (((_2149 * _2513) + _2476) * _2490))) * _2490;
        float _4492 = isnan(0.0) ? _2523 : (isnan(_2523) ? 0.0 : max(_2523, 0.0));
        float _2525 = (isnan(1.0) ? _4492 : (isnan(_4492) ? 1.0 : min(_4492, 1.0))) * (_2499 / ((_2503 * _2503) * 3.141590118408203125));
        float _2526 = isnan(1.0) ? _1997 : (isnan(_1997) ? 1.0 : min(_1997, 1.0));
        _2446 = (((_2512 * cbLight._m0[_2461].x) * _2525) * _2526) + _2336;
        _2448 = (((_2512 * cbLight._m0[_2461].y) * _2525) * _2526) + _2338;
        _2450 = (((_2512 * cbLight._m0[_2461].z) * _2525) * _2526) + _2340;
    }
    float _2661;
    float _2663;
    float _2665;
    float _2667;
    float _2669;
    float _2671;
    if (_1979.y == 0u)
    {
        float _2601 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2602 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2601;
        float _2603 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2601;
        float _2604 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2601;
        uvec4 _2616 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2617 = _2616.x;
        uint _2628 = uint((float(_2616.y) * floor(float(uint(cbSceneParam._m0[85u].y * _836) / _2617))) + floor(float(uint(cbSceneParam._m0[85u].x * _835) / _2617)));
        float _2638 = (log2(_2604 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2639 = isnan(0.0) ? _2638 : (isnan(_2638) ? 0.0 : max(_2638, 0.0));
        uint _2642 = uint(isnan(14.0) ? _2639 : (isnan(_2639) ? 14.0 : min(_2639, 14.0)));
        uvec4 _2647 = texelFetch(g_lightClusterGridBuffer, int(((_2642 << 2u) + (_2628 << 6u)) >> 2u));
        uint _2648 = _2647.x;
        uint _2649 = _2616.z;
        float _2749;
        float _2751;
        float _2753;
        float _2755;
        float _2757;
        float _2759;
        if (((((1u << ((_2649 >> 4u) & 15u)) + 4294967295u) & _2648) == 0u) || ((_2649 & 240u) == 0u))
        {
            _2749 = 0.0;
            _2751 = 0.0;
            _2753 = 0.0;
            _2755 = 0.0;
            _2757 = 0.0;
            _2759 = 0.0;
        }
        else
        {
            float _2750;
            float _2752;
            float _2754;
            float _2756;
            float _2758;
            float _2760;
            float _2902 = 0.0;
            float _2903 = 0.0;
            float _2904 = 0.0;
            float _2905 = 0.0;
            float _2906 = 0.0;
            float _2907 = 0.0;
            uint _2908 = 0u;
            uint _2917;
            bool _2918;
            for (;;)
            {
                _2917 = texelFetch(g_lightClassification, int((((_2642 << 5u) + (_2628 << 9u)) + (_2908 << 2u)) >> 2u)).x;
                _2918 = _2917 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2918)
                {
                    frontier_phi_66_pred = _2902;
                    frontier_phi_66_pred_1 = _2907;
                    frontier_phi_66_pred_2 = _2906;
                    frontier_phi_66_pred_3 = _2905;
                    frontier_phi_66_pred_4 = _2904;
                    frontier_phi_66_pred_5 = _2903;
                }
                else
                {
                    float _3047;
                    float _3048;
                    float _3049;
                    float _3050;
                    float _3051;
                    float _3052;
                    uint _3053;
                    _3047 = _2902;
                    _3048 = _2903;
                    _3049 = _2904;
                    _3050 = _2905;
                    _3051 = _2906;
                    _3052 = _2907;
                    _3053 = _2917;
                    float _2974;
                    float _2975;
                    float _2976;
                    float _2977;
                    float _2978;
                    float _2979;
                    for (;;)
                    {
                        uint _3057 = uint(findLSB(_3053)) + (_2908 << 5u);
                        uint _3054 = (_3053 + 4294967295u) & _3053;
                        uint _3059 = _3057 * 48u;
                        vec4 _3073 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3059)).x, texelFetch(g_PointLightRenderingBuffer, int(_3059 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3059 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3059 + 3u)).x));
                        uint _3079 = (_3057 * 48u) + 4u;
                        vec4 _3092 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3079)).x, texelFetch(g_PointLightRenderingBuffer, int(_3079 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3079 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3079 + 3u)).x));
                        uint _3098 = (_3057 * 48u) + 8u;
                        vec3 _3109 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3098)).x, texelFetch(g_PointLightRenderingBuffer, int(_3098 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3098 + 2u)).x));
                        float _3113 = _3073.x - _2602;
                        float _3114 = _3073.y - _2603;
                        float _3115 = _3073.z - _2604;
                        float _3116 = dot(vec3(_3113, _3114, _3115), vec3(_3113, _3114, _3115));
                        float _3119 = inversesqrt(_3116);
                        float _3120 = _3119 * _3113;
                        float _3121 = _3119 * _3114;
                        float _3122 = _3119 * _3115;
                        float _3123 = dot(vec3(_854, _857, _860), vec3(_3120, _3121, _3122));
                        float _3128 = 1.0 - (_3116 * _3073.w);
                        float _4518 = isnan(0.0) ? _3128 : (isnan(_3128) ? 0.0 : max(_3128, 0.0));
                        float _3129 = isnan(1.0) ? _4518 : (isnan(_4518) ? 1.0 : min(_4518, 1.0));
                        float _3130 = sqrt(_3116) * _3092.w;
                        float _3133 = 1.39999997615814208984375 / (_3130 + 1.39999997615814208984375);
                        float _3134 = _3133 * _3133;
                        float _3137 = ((1.0 - _3134) * _3123) + _3134;
                        float _3140 = _3130 * _3130;
                        float _3144 = ((isnan(0.0) ? _3137 : (isnan(_3137) ? 0.0 : max(_3137, 0.0))) * _3129) / ((_3140 * 0.699999988079071044921875) + 1.0);
                        float _3148 = (-0.0) - _2602;
                        float _3149 = (-0.0) - _2603;
                        float _3150 = (-0.0) - _2604;
                        float _3154 = inversesqrt(dot(vec3(_3148, _3149, _3150), vec3(_3148, _3149, _3150)));
                        float _3155 = _3154 * _3148;
                        float _3156 = _3154 * _3149;
                        float _3157 = _3154 * _3150;
                        float _3165 = exp2(log2(1.0 / ((_3140 * 3.5) + 5.0)) * 0.25);
                        float _3166 = 1.0 - _914;
                        float _3173 = sqrt(1.0 - ((1.0 - (_3166 * _3166)) * (1.0 - (_3165 * _3165))));
                        float _3174 = _3173 * _3173;
                        float _3175 = _3174 * _3174;
                        float _3176 = _3155 + _3120;
                        float _3177 = _3156 + _3121;
                        float _3178 = _3157 + _3122;
                        float _3182 = inversesqrt(dot(vec3(_3176, _3177, _3178), vec3(_3176, _3177, _3178)));
                        float _3186 = dot(vec3(_854, _857, _860), vec3(_3155, _3156, _3157));
                        float _4534 = isnan(0.0) ? _3186 : (isnan(_3186) ? 0.0 : max(_3186, 0.0));
                        float _3189 = isnan(1.0) ? _4534 : (isnan(_4534) ? 1.0 : min(_4534, 1.0));
                        float _3190 = dot(vec3(_854, _857, _860), vec3(_3182 * _3176, _3182 * _3177, _3182 * _3178));
                        float _4545 = isnan(0.0) ? _3190 : (isnan(_3190) ? 0.0 : max(_3190, 0.0));
                        float _3193 = isnan(1.0) ? _4545 : (isnan(_4545) ? 1.0 : min(_4545, 1.0));
                        float _3197 = ((_3193 * _3193) * (_3175 + (-1.0))) + 1.0;
                        float _3198 = _3133 * _3174;
                        float _3199 = _3198 * _3198;
                        float _3202 = ((1.0 - _3199) * _3123) + _3199;
                        float _4556 = isnan(0.0) ? _3202 : (isnan(_3202) ? 0.0 : max(_3202, 0.0));
                        float _3203 = isnan(1.0) ? _4556 : (isnan(_4556) ? 1.0 : min(_4556, 1.0));
                        float _3204 = 1.0 - _3174;
                        float _3214 = (0.5 / (((_3203 * ((_3189 * _3204) + _3174)) + 9.9999999392252902907785028219223e-09) + (((_3203 * _3204) + _3174) * _3189))) * _3203;
                        float _4567 = isnan(0.0) ? _3214 : (isnan(_3214) ? 0.0 : max(_3214, 0.0));
                        float _3225 = (((_3175 * 3.1415927410125732421875) * (isnan(1.0) ? _4567 : (isnan(_4567) ? 1.0 : min(_4567, 1.0)))) / ((_3197 * _3197) * ((_3140 * 2.1991131305694580078125) + 3.141590118408203125))) * _3129;
                        _2977 = (_3144 * _3092.x) + _3050;
                        _2978 = (_3144 * _3092.y) + _3051;
                        _2979 = (_3144 * _3092.z) + _3052;
                        _2974 = (_3225 * _3109.x) + _3047;
                        _2975 = (_3225 * _3109.y) + _3048;
                        _2976 = (_3225 * _3109.z) + _3049;
                        if (_3054 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3047 = _2974;
                            _3048 = _2975;
                            _3049 = _2976;
                            _3050 = _2977;
                            _3051 = _2978;
                            _3052 = _2979;
                            _3053 = _3054;
                        }
                    }
                    frontier_phi_66_pred = _2974;
                    frontier_phi_66_pred_1 = _2979;
                    frontier_phi_66_pred_2 = _2978;
                    frontier_phi_66_pred_3 = _2977;
                    frontier_phi_66_pred_4 = _2976;
                    frontier_phi_66_pred_5 = _2975;
                }
                _2750 = frontier_phi_66_pred;
                _2760 = frontier_phi_66_pred_1;
                _2758 = frontier_phi_66_pred_2;
                _2756 = frontier_phi_66_pred_3;
                _2754 = frontier_phi_66_pred_4;
                _2752 = frontier_phi_66_pred_5;
                uint _2909 = _2908 + 1u;
                if (_2909 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2902 = _2750;
                    _2903 = _2752;
                    _2904 = _2754;
                    _2905 = _2756;
                    _2906 = _2758;
                    _2907 = _2760;
                    _2908 = _2909;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2749 = _2750;
            _2751 = _2752;
            _2753 = _2754;
            _2755 = _2756;
            _2757 = _2758;
            _2759 = _2760;
        }
        uvec4 _2763 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2764 = _2763.z;
        uint _2766 = (_2764 >> 8u) & 15u;
        float _2870;
        float _2872;
        float _2874;
        float _2876;
        float _2878;
        float _2880;
        if (((4294967295u << _2766) & _2648) == 0u)
        {
            _2870 = _2749;
            _2872 = _2751;
            _2874 = _2753;
            _2876 = _2755;
            _2878 = _2757;
            _2880 = _2759;
        }
        else
        {
            float _2895 = inversesqrt(dot(vec3(_2602, _2603, _2604), vec3(_2602, _2603, _2604)));
            float _2896 = _2895 * _2602;
            float _2897 = _2895 * _2603;
            float _2898 = _2895 * _2604;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2766 < ((_2764 >> 12u) & 15u))
            {
                float _2871;
                float _2873;
                float _2875;
                float _2877;
                float _2879;
                float _2881;
                float _3030 = _2749;
                float _3031 = _2751;
                float _3032 = _2753;
                float _3033 = _2755;
                float _3034 = _2757;
                float _3035 = _2759;
                uint _3036 = _2766;
                uint _3045;
                bool _3046;
                for (;;)
                {
                    _3045 = texelFetch(g_lightClassification, int((((_2642 << 5u) + (_2628 << 9u)) + (_3036 << 2u)) >> 2u)).x;
                    _3046 = _3045 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_3046)
                    {
                        frontier_phi_77_pred = _3035;
                        frontier_phi_77_pred_1 = _3034;
                        frontier_phi_77_pred_2 = _3033;
                        frontier_phi_77_pred_3 = _3032;
                        frontier_phi_77_pred_4 = _3031;
                        frontier_phi_77_pred_5 = _3030;
                    }
                    else
                    {
                        float _3239;
                        float _3240;
                        float _3241;
                        float _3242;
                        float _3243;
                        float _3244;
                        float _3533;
                        float _3534;
                        float _3535;
                        float _3536;
                        float _3537;
                        float _3538;
                        float _3252 = _3030;
                        float _3253 = _3031;
                        float _3254 = _3032;
                        float _3255 = _3033;
                        float _3256 = _3034;
                        float _3257 = _3035;
                        uint _3258 = _3045;
                        uint _3259;
                        vec4 _3284;
                        float _3285;
                        vec4 _3300;
                        vec3 _3312;
                        vec4 _3327;
                        vec4 _3343;
                        float _3389;
                        bool _3390;
                        for (;;)
                        {
                            uint _3269 = ((_3036 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3258));
                            _3259 = (_3258 + 4294967295u) & _3258;
                            uint _3271 = _3269 * 40u;
                            _3284 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3271)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3271 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3271 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3271 + 3u)).x));
                            _3285 = _3284.w;
                            uint _3287 = (_3269 * 40u) + 4u;
                            _3300 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3287)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3287 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3287 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3287 + 3u)).x));
                            uint _3302 = (_3269 * 40u) + 8u;
                            _3312 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3302)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3302 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3302 + 2u)).x));
                            uint _3314 = (_3269 * 40u) + 16u;
                            _3327 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3314)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3314 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3314 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3314 + 3u)).x));
                            uint _3330 = (_3269 * 40u) + 20u;
                            _3343 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3330)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3330 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3330 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3330 + 3u)).x));
                            uint _3345 = (_3269 * 40u) + 24u;
                            vec4 _3358 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3345)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3345 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3345 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3345 + 3u)).x));
                            uint _3364 = (_3269 * 40u) + 28u;
                            vec4 _3377 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3364)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3364 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3364 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3364 + 3u)).x));
                            _3389 = fma(_2604, _3377.z, fma(_2603, _3377.y, _3377.x * _2602)) + _3377.w;
                            _3390 = !((fma(_2604, _3358.z, fma(_2603, _3358.y, _3358.x * _2602)) + _3358.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3390)
                            {
                                float _3417 = _3284.x - _2602;
                                float _3418 = _3284.y - _2603;
                                float _3419 = _3284.z - _2604;
                                float _3420 = dot(vec3(_3417, _3418, _3419), vec3(_3417, _3418, _3419));
                                float _3423 = inversesqrt(_3420);
                                float _3424 = _3423 * _3417;
                                float _3425 = _3423 * _3418;
                                float _3426 = _3423 * _3419;
                                float _3430 = 1.0 - (_3420 / (_3285 * _3285));
                                float _4578 = isnan(0.0) ? _3430 : (isnan(_3430) ? 0.0 : max(_3430, 0.0));
                                float _3431 = isnan(1.0) ? _4578 : (isnan(_4578) ? 1.0 : min(_4578, 1.0));
                                float _3435 = sqrt(_3420) * _3300.w;
                                float _3437 = 1.39999997615814208984375 / (_3435 + 1.39999997615814208984375);
                                float _3438 = _3437 * _3437;
                                float _3441 = ((1.0 - _3438) * dot(vec3(_3424, _3425, _3426), vec3(_854, _857, _860))) + _3438;
                                float _3444 = _3435 * _3435;
                                float _3448 = (fma(_2604, _3327.z, fma(_2603, _3327.y, _3327.x * _2602)) + _3327.w) / _3389;
                                float _3449 = (fma(_2604, _3343.z, fma(_2603, _3343.y, _3343.x * _2602)) + _3343.w) / _3389;
                                float _3453 = 1.0 - dot(vec2(_3448, _3449), vec2(_3448, _3449));
                                float _4594 = isnan(0.0) ? _3453 : (isnan(_3453) ? 0.0 : max(_3453, 0.0));
                                float _3454 = isnan(1.0) ? _4594 : (isnan(_4594) ? 1.0 : min(_4594, 1.0));
                                float _3455 = _3454 * (((isnan(0.0) ? _3441 : (isnan(_3441) ? 0.0 : max(_3441, 0.0))) * _3431) / ((_3444 * 0.699999988079071044921875) + 1.0));
                                float _3467 = exp2(log2(1.0 / ((_3444 * 3.5) + 5.0)) * 0.25);
                                float _3468 = 1.0 - _914;
                                float _3475 = sqrt(1.0 - ((1.0 - (_3468 * _3468)) * (1.0 - (_3467 * _3467))));
                                float _3476 = _3475 * _3475;
                                float _3477 = _3476 * _3476;
                                float _3478 = _3424 - _2896;
                                float _3479 = _3425 - _2897;
                                float _3480 = _3426 - _2898;
                                float _3484 = inversesqrt(dot(vec3(_3478, _3479, _3480), vec3(_3478, _3479, _3480)));
                                float _3488 = dot(vec3(_854, _857, _860), vec3((-0.0) - _2896, (-0.0) - _2897, (-0.0) - _2898));
                                float _4605 = isnan(0.0) ? _3488 : (isnan(_3488) ? 0.0 : max(_3488, 0.0));
                                float _3491 = isnan(1.0) ? _4605 : (isnan(_4605) ? 1.0 : min(_4605, 1.0));
                                float _3492 = dot(vec3(_854, _857, _860), vec3(_3484 * _3478, _3484 * _3479, _3484 * _3480));
                                float _4616 = isnan(0.0) ? _3492 : (isnan(_3492) ? 0.0 : max(_3492, 0.0));
                                float _3495 = isnan(1.0) ? _4616 : (isnan(_4616) ? 1.0 : min(_4616, 1.0));
                                float _3499 = ((_3495 * _3495) * (_3477 + (-1.0))) + 1.0;
                                float _3500 = _3437 * _3476;
                                float _3501 = _3500 * _3500;
                                float _3507 = ((1.0 - _3501) * dot(vec3(_854, _857, _860), vec3(_3424, _3425, _3426))) + _3501;
                                float _4627 = isnan(0.0) ? _3507 : (isnan(_3507) ? 0.0 : max(_3507, 0.0));
                                float _3508 = isnan(1.0) ? _4627 : (isnan(_4627) ? 1.0 : min(_4627, 1.0));
                                float _3509 = 1.0 - _3476;
                                float _3519 = (0.5 / (((_3508 * ((_3491 * _3509) + _3476)) + 9.9999999392252902907785028219223e-09) + (((_3508 * _3509) + _3476) * _3491))) * _3508;
                                float _4638 = isnan(0.0) ? _3519 : (isnan(_3519) ? 0.0 : max(_3519, 0.0));
                                float _3529 = (_3454 * _3431) * (((_3477 * 3.1415927410125732421875) * (isnan(1.0) ? _4638 : (isnan(_4638) ? 1.0 : min(_4638, 1.0)))) / ((_3499 * _3499) * ((_3444 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3455 * _3300.y;
                                frontier_phi_83_pred_1 = _3455 * _3300.x;
                                frontier_phi_83_pred_2 = _3529 * _3312.z;
                                frontier_phi_83_pred_3 = _3529 * _3312.y;
                                frontier_phi_83_pred_4 = _3529 * _3312.x;
                                frontier_phi_83_pred_5 = _3455 * _3300.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3537 = frontier_phi_83_pred;
                            _3536 = frontier_phi_83_pred_1;
                            _3535 = frontier_phi_83_pred_2;
                            _3534 = frontier_phi_83_pred_3;
                            _3533 = frontier_phi_83_pred_4;
                            _3538 = frontier_phi_83_pred_5;
                            _3242 = _3536 + _3255;
                            _3243 = _3537 + _3256;
                            _3244 = _3538 + _3257;
                            _3239 = _3533 + _3252;
                            _3240 = _3534 + _3253;
                            _3241 = _3535 + _3254;
                            if (_3259 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3252 = _3239;
                                _3253 = _3240;
                                _3254 = _3241;
                                _3255 = _3242;
                                _3256 = _3243;
                                _3257 = _3244;
                                _3258 = _3259;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3244;
                        frontier_phi_77_pred_1 = _3243;
                        frontier_phi_77_pred_2 = _3242;
                        frontier_phi_77_pred_3 = _3241;
                        frontier_phi_77_pred_4 = _3240;
                        frontier_phi_77_pred_5 = _3239;
                    }
                    _2881 = frontier_phi_77_pred;
                    _2879 = frontier_phi_77_pred_1;
                    _2877 = frontier_phi_77_pred_2;
                    _2875 = frontier_phi_77_pred_3;
                    _2873 = frontier_phi_77_pred_4;
                    _2871 = frontier_phi_77_pred_5;
                    uint _3037 = _3036 + 1u;
                    if (_3037 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3030 = _2871;
                        _3031 = _2873;
                        _3032 = _2875;
                        _3033 = _2877;
                        _3034 = _2879;
                        _3035 = _2881;
                        _3036 = _3037;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2875;
                frontier_phi_58_59_ladder_1 = _2881;
                frontier_phi_58_59_ladder_2 = _2879;
                frontier_phi_58_59_ladder_3 = _2877;
                frontier_phi_58_59_ladder_4 = _2873;
                frontier_phi_58_59_ladder_5 = _2871;
            }
            else
            {
                frontier_phi_58_59_ladder = _2753;
                frontier_phi_58_59_ladder_1 = _2759;
                frontier_phi_58_59_ladder_2 = _2757;
                frontier_phi_58_59_ladder_3 = _2755;
                frontier_phi_58_59_ladder_4 = _2751;
                frontier_phi_58_59_ladder_5 = _2749;
            }
            _2870 = frontier_phi_58_59_ladder_5;
            _2872 = frontier_phi_58_59_ladder_4;
            _2874 = frontier_phi_58_59_ladder;
            _2876 = frontier_phi_58_59_ladder_3;
            _2878 = frontier_phi_58_59_ladder_2;
            _2880 = frontier_phi_58_59_ladder_1;
        }
        float _2885 = isnan(1.0) ? _898 : (isnan(_898) ? 1.0 : min(_898, 1.0));
        _2661 = (_2885 * _2876) + _2113;
        _2663 = (_2885 * _2878) + _2115;
        _2665 = (_2885 * _2880) + _2117;
        _2667 = ((_2870 * 0.039999999105930328369140625) * _2885) + _2446;
        _2669 = ((_2872 * 0.039999999105930328369140625) * _2885) + _2448;
        _2671 = ((_2874 * 0.039999999105930328369140625) * _2885) + _2450;
    }
    else
    {
        _2661 = _2113;
        _2663 = _2115;
        _2665 = _2117;
        _2667 = _2446;
        _2669 = _2448;
        _2671 = _2450;
    }
    float _4654 = isnan(0.0) ? _883 : (isnan(_883) ? 0.0 : max(_883, 0.0));
    float _4665 = isnan(0.0) ? _884 : (isnan(_884) ? 0.0 : max(_884, 0.0));
    float _4676 = isnan(0.0) ? _885 : (isnan(_885) ? 0.0 : max(_885, 0.0));
    float _2688 = ((isnan(1.0) ? _4654 : (isnan(_4654) ? 1.0 : min(_4654, 1.0))) * (_2661 + ((isnan(0.0) ? _1655 : (isnan(_1655) ? 0.0 : max(_1655, 0.0))) * _898))) + ((_2667 + ((isnan(0.0) ? _1945 : (isnan(_1945) ? 0.0 : max(_1945, 0.0))) * _1734)) * cbPerFrame._m0[3u].x);
    float _2689 = ((isnan(1.0) ? _4665 : (isnan(_4665) ? 1.0 : min(_4665, 1.0))) * (_2663 + ((isnan(0.0) ? _1658 : (isnan(_1658) ? 0.0 : max(_1658, 0.0))) * _898))) + ((_2669 + ((isnan(0.0) ? _1948 : (isnan(_1948) ? 0.0 : max(_1948, 0.0))) * _1734)) * cbPerFrame._m0[3u].x);
    float _2690 = ((isnan(1.0) ? _4676 : (isnan(_4676) ? 1.0 : min(_4676, 1.0))) * (_2665 + ((isnan(0.0) ? _1661 : (isnan(_1661) ? 0.0 : max(_1661, 0.0))) * _898))) + ((_2671 + ((isnan(0.0) ? _1951 : (isnan(_1951) ? 0.0 : max(_1951, 0.0))) * _1734)) * cbPerFrame._m0[3u].x);
    uint _2691 = _253 + 6u;
    float _2699 = _835 / cbSceneParam._m0[86u].x;
    float _2700 = _836 / cbSceneParam._m0[86u].y;
    vec4 _2714 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2699, _2700, (log2((isnan(cbSceneParam._m0[77u].w) ? _757 : (isnan(_757) ? cbSceneParam._m0[77u].w : min(_757, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2716 = _2714.x;
    float _2717 = _2714.y;
    float _2718 = _2714.z;
    float _2719 = _2714.w;
    float _2812;
    float _2814;
    float _2816;
    float _2818;
    if (_757 > cbSceneParam._m0[78u].w)
    {
        float _2774 = isnan(_757) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _757 : min(cbSceneParam._m0[80u].w, _757));
        float _2775 = _2774 / _757;
        float _2786 = _2775 * _808;
        float _2787 = _809 * _2775;
        float _2788 = (-0.0) - _2787;
        float _2790 = _2775 * _810;
        float _2792 = (cbSceneParam._m0[77u].w * _2788) / _2774;
        float _2793 = _2792 + cbSceneParam._m0[79u].w;
        float _2794 = cbSceneParam._m0[79u].w - _2787;
        float _2800 = sqrt(((_2786 * _2786) + (_2787 * _2787)) + (_2790 * _2790));
        float _2803 = (1.0 - (cbSceneParam._m0[77u].w / _2774)) * _2800;
        float _2808 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2810 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2987;
        if (abs((_2788 - _2792) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2987 = ((((_2793 > 0.0) ? exp2(_2808 * _2793) : (2.0 - exp2(_2810 * _2793))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2803;
        }
        else
        {
            float _2931 = 1.0 / cbSceneParam._m0[80u].x;
            float _2932 = isnan(_2794) ? _2793 : (isnan(_2793) ? _2794 : max(_2793, _2794));
            float _2933 = isnan(_2794) ? _2793 : (isnan(_2793) ? _2794 : min(_2793, _2794));
            float _2942 = isnan(0.0) ? _2932 : (isnan(_2932) ? 0.0 : min(_2932, 0.0));
            float _2943 = isnan(0.0) ? _2933 : (isnan(_2933) ? 0.0 : min(_2933, 0.0));
            _2987 = ((abs(_2800 / _2788) * cbSceneParam._m0[80u].y) * ((((_2942 - _2943) * 2.0) - ((exp2(_2808 * (isnan(0.0) ? _2932 : (isnan(_2932) ? 0.0 : max(_2932, 0.0)))) - exp2(_2808 * (isnan(0.0) ? _2933 : (isnan(_2933) ? 0.0 : max(_2933, 0.0))))) * _2931)) - ((exp2(_2810 * _2942) - exp2(_2810 * _2943)) * _2931))) + (_2803 * cbSceneParam._m0[80u].z);
        }
        vec4 _2989 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2699, _2700, 1.0), 0.0);
        float _2998 = exp2((_2987 * (-1.44269502162933349609375)) * (1.0 - _2989.w));
        float _2999 = log2(_2998);
        float _3015 = log2(_2719);
        _2812 = (exp2(_3015 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2999 * cbSceneParam._m0[78u].x)) * _2989.x) / cbSceneParam._m0[78u].x)) + _2716;
        _2814 = (exp2(_3015 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2999 * cbSceneParam._m0[78u].y)) * _2989.y) / cbSceneParam._m0[78u].y)) + _2717;
        _2816 = (exp2(_3015 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2999 * cbSceneParam._m0[78u].z)) * _2989.z) / cbSceneParam._m0[78u].z)) + _2718;
        _2818 = _2998 * _2719;
    }
    else
    {
        _2812 = _2716;
        _2814 = _2717;
        _2816 = _2718;
        _2818 = _2719;
    }
    bool _3025;
    vec4 _2828;
    vec4 _2850;
    float _2852;
    float _2856;
    float _2857;
    float _2858;
    float _2859;
    bool _2869;
    for (;;)
    {
        _2828 = cbMatDynParam._m0[0u];
        float _2830 = roundEven(_2828.y);
        bool _2831 = _2830 == 3.0;
        float _2832 = log2(_2818);
        float _2839 = exp2(_2832 * cbSceneParam._m0[78u].x) * _2688;
        float _2840 = exp2(_2832 * cbSceneParam._m0[78u].y) * _2689;
        float _2841 = exp2(_2832 * cbSceneParam._m0[78u].z) * _2690;
        float _2848 = _824 + (-0.5);
        _2850 = cbMtdParam._m0[1u];
        _2852 = _2850.y * _2848;
        float _2855 = (_2830 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2856 = _2855 * (_2831 ? _2839 : (_2839 + (cbSceneParam._m0[72u].w * _2812)));
        _2857 = _2855 * (_2831 ? _2840 : (_2840 + (cbSceneParam._m0[72u].w * _2814)));
        _2858 = _2855 * (_2831 ? _2841 : (_2841 + (cbSceneParam._m0[72u].w * _2816)));
        _2859 = _2848 * 0.999000012874603271484375;
        _2869 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2869)
        {
            if ((cbInstanceData._m0[_253 + 7u].x + _2859) < 0.5)
            {
                _3025 = true;
                break;
            }
        }
        uint _2966 = _873 + uint(_2828.w);
        if ((cbInstanceData._m0[_2966].w < 1.0) && ((cbInstanceData._m0[_2966].w + _2859) < 0.5))
        {
            _3025 = true;
            break;
        }
        if ((_2852 + 1.0) < _2850.x)
        {
            _3025 = true;
            break;
        }
        _3025 = false;
        break;
    }
    float _3230;
    if (_3025)
    {
        discard_state = true;
        _3230 = 0.0;
    }
    else
    {
        _3230 = cbInstanceData._m0[_2691].w;
    }
    SV_Target.x = _2856;
    SV_Target.y = _2857;
    SV_Target.z = _2858;
    SV_Target.w = _3230;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2691].w;
    discard_exit();
}


