#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_0;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_6;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1204;
float _3565;
float _3566;
float _3567;
float _3568;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _206 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _207 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _208 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _214 = inversesqrt(dot(vec3(_206, _207, _208), vec3(_206, _207, _208)));
    float _215 = _214 * _206;
    float _216 = _214 * _207;
    float _217 = _214 * _208;
    float _221 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _222 = _221 * NORMAL.x;
    float _223 = _221 * NORMAL.y;
    float _224 = _221 * NORMAL.z;
    float _228 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _229 = _228 * TANGENT.x;
    float _230 = _228 * TANGENT.y;
    float _231 = _228 * TANGENT.z;
    uint _234 = uint(roundEven(NORMAL.w)) * 13u;
    uint _240 = _234 + 1u;
    uint _244 = _234 + 2u;
    float _253 = sqrt(((cbInstanceData._m0[_240].x * cbInstanceData._m0[_240].x) + (cbInstanceData._m0[_234].x * cbInstanceData._m0[_234].x)) + (cbInstanceData._m0[_244].x * cbInstanceData._m0[_244].x));
    float _254 = _253 * TEXCOORD.z;
    float _255 = _253 * TEXCOORD.w;
    vec4 _274 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _298 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _303 = _298.x * cbMtdParam._m0[11u].x;
    float _304 = _298.y * cbMtdParam._m0[11u].y;
    float _305 = _298.z * cbMtdParam._m0[11u].z;
    vec4 _324 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _254) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _255) + cbTextureTilingScale._m0[5u].w));
    vec4 _378 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _380 = _378.x;
    float _392 = dot(vec4(_380, _378.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _409 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w)).x) * 2.0) - ((((_380 - _392) * cbMtdParam._m0[24u].z) + _392) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3577 = isnan(0.0) ? _409 : (isnan(_409) ? 0.0 : max(_409, 0.0));
    float _410 = isnan(1.0) ? _3577 : (isnan(_3577) ? 1.0 : min(_3577, 1.0));
    float _423 = ((cbMtdParam._m0[9u].x * 4.55000019073486328125) * _274.x) * ((_410 * ((_324.x * cbMtdParam._m0[12u].x) - _303)) + _303);
    float _426 = ((cbMtdParam._m0[9u].y * 4.55000019073486328125) * _274.y) * ((_410 * ((_324.y * cbMtdParam._m0[12u].y) - _304)) + _304);
    float _429 = ((cbMtdParam._m0[9u].z * 4.55000019073486328125) * _274.z) * ((_410 * ((_324.z * cbMtdParam._m0[12u].z) - _305)) + _305);
    vec4 _447 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _254) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _255) + cbTextureTilingScale._m0[4u].w));
    vec4 _464 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _466 = _464.x;
    float _467 = _464.y;
    float _468 = _464.z;
    float _477 = ((_447.z - _468) * _410) + _468;
    float _480 = ((((_447.x - _466) * _410) + _466) * 2.0) + (-1.0);
    float _482 = ((((_447.y - _467) * _410) + _467) * 2.0) + (-1.0);
    float _483 = dot(vec2(_480, _482), vec2(_480, _482));
    float _3588 = isnan(0.0) ? _483 : (isnan(_483) ? 0.0 : max(_483, 0.0));
    float _488 = sqrt(1.0 - (isnan(1.0) ? _3588 : (isnan(_3588) ? 1.0 : min(_3588, 1.0))));
    vec4 _504 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _516 = (((_504.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _480;
    float _517 = (((_504.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _482;
    float _520 = fma(_488, _222, fma(_517, _229, _516 * _215));
    float _523 = fma(_488, _223, fma(_517, _230, _516 * _216));
    float _526 = fma(_488, _224, fma(_517, _231, _516 * _217));
    float _530 = inversesqrt(dot(vec3(_520, _523, _526), vec3(_520, _523, _526)));
    vec4 _557 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _254) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _255) + cbTextureTilingScale._m0[11u].w));
    float _559 = _557.x;
    float _560 = 1.0 - _559;
    float _566 = (cbMtdParam._m0[19u].x + dot(vec4(_530 * _520, _530 * _523, _530 * _526, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_559 - _560) * cbMtdParam._m0[24u].w) + _560) * cbMtdParam._m0[21u].z);
    float _3599 = isnan(0.0) ? _566 : (isnan(_566) ? 0.0 : max(_566, 0.0));
    float _567 = isnan(1.0) ? _3599 : (isnan(_3599) ? 1.0 : min(_3599, 1.0));
    float _574 = (_567 * (cbMtdParam._m0[17u].x - _423)) + _423;
    float _575 = (_567 * (cbMtdParam._m0[17u].y - _426)) + _426;
    float _576 = (_567 * (cbMtdParam._m0[17u].z - _429)) + _429;
    float _580 = (cbMtdParam._m0[19u].w * (_504.z - _477)) + _477;
    vec4 _593 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _254) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _255) + cbTextureTilingScale._m0[15u].w));
    float _600 = (_593.x * 2.0) + (-1.0);
    float _601 = (_593.y * 2.0) + (-1.0);
    float _602 = dot(vec2(_600, _601), vec2(_600, _601));
    float _3610 = isnan(0.0) ? _602 : (isnan(_602) ? 0.0 : max(_602, 0.0));
    float _610 = ((_593.z - _580) * _567) + _580;
    float _620 = ((sqrt(1.0 - (isnan(1.0) ? _3610 : (isnan(_3610) ? 1.0 : min(_3610, 1.0)))) - _488) * _567) + _488;
    float _623 = (((_600 - _516) * _567) + _516) + (cbMtdParam._m0[21u].x * _516);
    float _624 = (((_601 - _517) * _567) + _517) + (cbMtdParam._m0[21u].x * _517);
    float _628 = cbMtdParam._m0[22u].x + _504.w;
    float _631 = fma(_620, _222, fma(_624, _229, _623 * _215));
    float _634 = fma(_620, _223, fma(_624, _230, _623 * _216));
    float _637 = fma(_620, _224, fma(_624, _231, _623 * _217));
    float _641 = inversesqrt(dot(vec3(_631, _634, _637), vec3(_631, _634, _637)));
    float _642 = _641 * _631;
    float _643 = _641 * _634;
    float _644 = _641 * _637;
    float _3621 = isnan(0.0) ? _610 : (isnan(_610) ? 0.0 : max(_610, 0.0));
    float _645 = isnan(1.0) ? _3621 : (isnan(_3621) ? 1.0 : min(_3621, 1.0));
    float _3632 = isnan(0.0) ? _628 : (isnan(_628) ? 0.0 : max(_628, 0.0));
    float _3643 = isnan(0.0) ? _574 : (isnan(_574) ? 0.0 : max(_574, 0.0));
    float _3654 = isnan(0.0) ? _575 : (isnan(_575) ? 0.0 : max(_575, 0.0));
    float _3665 = isnan(0.0) ? _576 : (isnan(_576) ? 0.0 : max(_576, 0.0));
    float _663 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _704 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _714 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _704);
    float _715 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _704);
    float _716 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _704);
    float _720 = inversesqrt(dot(vec3(_714, _715, _716), vec3(_714, _715, _716)));
    float _721 = _714 * _720;
    float _722 = _715 * _720;
    float _723 = _716 * _720;
    vec4 _728 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _730 = _728.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _884 = sqrt(((_714 * _714) + (_715 * _715)) + (_716 * _716));
        float _890 = (cbMatDynParam._m0[5u].x * _884) + cbMatDynParam._m0[5u].y;
        float _3676 = isnan(0.0) ? _890 : (isnan(_890) ? 0.0 : max(_890, 0.0));
        float _891 = isnan(1.0) ? _3676 : (isnan(_3676) ? 1.0 : min(_3676, 1.0));
        float _895 = (cbMatDynParam._m0[5u].z * _884) + cbMatDynParam._m0[5u].w;
        float _3687 = isnan(0.0) ? _895 : (isnan(_895) ? 0.0 : max(_895, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3687 : (isnan(_3687) ? 1.0 : min(_3687, 1.0))) - _891)) + _891) < ((_730 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _741 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _742 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _760 = fma(_644, cbSceneParam._m0[5u].z, fma(_643, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _642));
    float _763 = fma(_644, cbSceneParam._m0[6u].z, fma(_643, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _642));
    float _766 = fma(_644, cbSceneParam._m0[7u].z, fma(_643, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _642));
    uint _779 = _234 + 9u;
    uint _780 = _779 + uint(cbMatDynParam._m0[0u].w);
    float _786 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3643 : (isnan(_3643) ? 1.0 : min(_3643, 1.0)))) * cbInstanceData._m0[_780].x;
    float _787 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3654 : (isnan(_3654) ? 1.0 : min(_3654, 1.0)))) * cbInstanceData._m0[_780].y;
    float _788 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3665 : (isnan(_3665) ? 1.0 : min(_3665, 1.0)))) * cbInstanceData._m0[_780].z;
    float _3698 = isnan(0.0) ? _786 : (isnan(_786) ? 0.0 : max(_786, 0.0));
    float _789 = isnan(1.0) ? _3698 : (isnan(_3698) ? 1.0 : min(_3698, 1.0));
    float _3709 = isnan(0.0) ? _787 : (isnan(_787) ? 0.0 : max(_787, 0.0));
    float _790 = isnan(1.0) ? _3709 : (isnan(_3709) ? 1.0 : min(_3709, 1.0));
    float _3720 = isnan(0.0) ? _788 : (isnan(_788) ? 0.0 : max(_788, 0.0));
    float _791 = isnan(1.0) ? _3720 : (isnan(_3720) ? 1.0 : min(_3720, 1.0));
    vec4 _800 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _741, cbSceneParam._m0[86u].y * _742));
    float _804 = ((isnan(1.0) ? _3632 : (isnan(_3632) ? 1.0 : min(_3632, 1.0))) * TEXCOORD_5.w) * _800.x;
    float _805 = dot(vec3(_642, _643, _644), vec3(_721, _722, _723));
    float _808 = _805 * 2.0;
    float _812 = (_808 * _642) - _721;
    float _813 = (_808 * _643) - _722;
    float _814 = (_808 * _644) - _723;
    float _818 = abs(dot(vec3(_721, _722, _723), vec3(_642, _643, _644)));
    float _3731 = isnan(0.0) ? _818 : (isnan(_818) ? 0.0 : max(_818, 0.0));
    float _820 = sqrt(_645);
    float _833 = exp2((_820 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3731 : (isnan(_3731) ? 1.0 : min(_3731, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_820 * 3.0));
    float _865 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _869 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _873 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1203;
    float _1205;
    float _1206;
    float _1207;
    float _1208;
    float _1209;
    float _1210;
    float _1211;
    float _1212;
    float _1213;
    float _1214;
    float _1215;
    float _1216;
    float _1217;
    float _1218;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _928 = fma(_873, cbModelParam._m0[26u].z, fma(_869, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _865));
        float _932 = fma(_873, cbModelParam._m0[27u].z, fma(_869, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _865));
        float _936 = fma(_873, cbModelParam._m0[28u].z, fma(_869, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _865));
        float _961 = _865 + _642;
        float _962 = _869 + _643;
        float _963 = _873 + _644;
        float _973 = fma(_963, cbModelParam._m0[26u].z, fma(_962, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _961)) - _928;
        float _974 = fma(_963, cbModelParam._m0[27u].z, fma(_962, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _961)) - _932;
        float _975 = fma(_963, cbModelParam._m0[28u].z, fma(_962, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _961)) - _936;
        float _979 = inversesqrt(dot(vec3(_973, _974, _975), vec3(_973, _974, _975)));
        float _992 = ((_979 * _973) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_928 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _993 = ((_979 * _974) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_932 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _994 = ((_979 * _975) / cbModelParam._m0[34u].z) + ((((((_936 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _997 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_992, _993, _994), 0.0);
        vec4 _1004 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_992, _993, _994), 0.0);
        vec4 _1011 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_992, _993, _994), 0.0);
        vec4 _1018 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_992, _993, _994), 0.0);
        float _1031 = exp2((_997.w + (-0.5)) * 20.0) * 2.0;
        float _1032 = _1031 * (_997.x + (-0.5));
        float _1033 = _1031 * (_997.y + (-0.5));
        float _1034 = _1031 * (_997.z + (-0.5));
        float _1041 = exp2((_1004.w + (-0.5)) * 20.0) * 2.0;
        float _1042 = _1041 * (_1004.x + (-0.5));
        float _1043 = _1041 * (_1004.y + (-0.5));
        float _1044 = _1041 * (_1004.z + (-0.5));
        float _1051 = exp2((_1011.w + (-0.5)) * 20.0) * 2.0;
        float _1052 = _1051 * (_1011.x + (-0.5));
        float _1053 = _1051 * (_1011.y + (-0.5));
        float _1054 = _1051 * (_1011.z + (-0.5));
        float _1061 = exp2((_1018.w + (-0.5)) * 20.0) * 2.0;
        float _1062 = _1061 * (_1018.x + (-0.5));
        float _1063 = _1061 * (_1018.y + (-0.5));
        float _1064 = _1061 * (_1018.z + (-0.5));
        float _1065 = isnan(0.0) ? _1062 : (isnan(_1062) ? 0.0 : max(_1062, 0.0));
        float _1066 = isnan(0.0) ? _1063 : (isnan(_1063) ? 0.0 : max(_1063, 0.0));
        float _1067 = isnan(0.0) ? _1064 : (isnan(_1064) ? 0.0 : max(_1064, 0.0));
        float _1068 = _1032 * 0.5;
        float _1069 = _1042 * 0.5;
        float _1070 = _1052 * 0.5;
        float _1071 = dot(vec3(_1068, _1069, _1070), vec3(_1068, _1069, _1070));
        float _1076 = (_1071 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1071);
        float _1085 = (dot(vec3(_642, _643, _644), vec3(_1076 * _1068, _1076 * _1069, _1076 * _1070)) + 1.0) * 0.5;
        float _3757 = isnan(0.0) ? _1085 : (isnan(_1085) ? 0.0 : max(_1085, 0.0));
        float _1095 = sqrt(((_1069 * _1069) + (_1068 * _1068)) + (_1070 * _1070)) / (_1065 + 9.9999997473787516355514526367188e-06);
        float _3768 = isnan(0.0) ? _1095 : (isnan(_1095) ? 0.0 : max(_1095, 0.0));
        float _1096 = isnan(1.0) ? _3768 : (isnan(_3768) ? 1.0 : min(_3768, 1.0));
        float _1097 = _1096 * 2.0;
        float _1101 = (1.0 - _1096) / (_1096 + 1.0);
        float _3779 = isnan(0.0) ? _1101 : (isnan(_1101) ? 0.0 : max(_1101, 0.0));
        float _1102 = isnan(1.0) ? _3779 : (isnan(_3779) ? 1.0 : min(_3779, 1.0));
        float _1111 = ((((1.0 - _1102) * (_1097 + 2.0)) * exp2(log2(isnan(1.0) ? _3757 : (isnan(_3757) ? 1.0 : min(_3757, 1.0))) * (_1097 + 1.0))) + _1102) * _1065;
        float _1112 = _1033 * 0.5;
        float _1113 = _1043 * 0.5;
        float _1114 = _1053 * 0.5;
        float _1115 = dot(vec3(_1112, _1113, _1114), vec3(_1112, _1113, _1114));
        float _1120 = (_1115 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1115);
        float _1128 = (dot(vec3(_642, _643, _644), vec3(_1120 * _1112, _1120 * _1113, _1120 * _1114)) + 1.0) * 0.5;
        float _3790 = isnan(0.0) ? _1128 : (isnan(_1128) ? 0.0 : max(_1128, 0.0));
        float _1137 = sqrt(((_1113 * _1113) + (_1112 * _1112)) + (_1114 * _1114)) / (_1066 + 9.9999997473787516355514526367188e-06);
        float _3801 = isnan(0.0) ? _1137 : (isnan(_1137) ? 0.0 : max(_1137, 0.0));
        float _1138 = isnan(1.0) ? _3801 : (isnan(_3801) ? 1.0 : min(_3801, 1.0));
        float _1139 = _1138 * 2.0;
        float _1143 = (1.0 - _1138) / (_1138 + 1.0);
        float _3812 = isnan(0.0) ? _1143 : (isnan(_1143) ? 0.0 : max(_1143, 0.0));
        float _1144 = isnan(1.0) ? _3812 : (isnan(_3812) ? 1.0 : min(_3812, 1.0));
        float _1153 = ((((1.0 - _1144) * (_1139 + 2.0)) * exp2(log2(isnan(1.0) ? _3790 : (isnan(_3790) ? 1.0 : min(_3790, 1.0))) * (_1139 + 1.0))) + _1144) * _1066;
        float _1154 = _1034 * 0.5;
        float _1155 = _1044 * 0.5;
        float _1156 = _1054 * 0.5;
        float _1157 = dot(vec3(_1154, _1155, _1156), vec3(_1154, _1155, _1156));
        float _1162 = (_1157 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1157);
        float _1170 = (dot(vec3(_642, _643, _644), vec3(_1162 * _1154, _1162 * _1155, _1162 * _1156)) + 1.0) * 0.5;
        float _3823 = isnan(0.0) ? _1170 : (isnan(_1170) ? 0.0 : max(_1170, 0.0));
        float _1179 = sqrt(((_1155 * _1155) + (_1154 * _1154)) + (_1156 * _1156)) / (_1067 + 9.9999997473787516355514526367188e-06);
        float _3834 = isnan(0.0) ? _1179 : (isnan(_1179) ? 0.0 : max(_1179, 0.0));
        float _1180 = isnan(1.0) ? _3834 : (isnan(_3834) ? 1.0 : min(_3834, 1.0));
        float _1181 = _1180 * 2.0;
        float _1185 = (1.0 - _1180) / (_1180 + 1.0);
        float _3845 = isnan(0.0) ? _1185 : (isnan(_1185) ? 0.0 : max(_1185, 0.0));
        float _1186 = isnan(1.0) ? _3845 : (isnan(_3845) ? 1.0 : min(_3845, 1.0));
        float _1195 = ((((1.0 - _1186) * (_1181 + 2.0)) * exp2(log2(isnan(1.0) ? _3823 : (isnan(_3823) ? 1.0 : min(_3823, 1.0))) * (_1181 + 1.0))) + _1186) * _1067;
        _1203 = _1034;
        _1205 = _1033;
        _1206 = _1032;
        _1207 = _1044;
        _1208 = _1043;
        _1209 = _1042;
        _1210 = _1054;
        _1211 = _1053;
        _1212 = _1052;
        _1213 = _1067;
        _1214 = _1066;
        _1215 = _1065;
        _1216 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1111 : (isnan(_1111) ? 0.0 : max(_1111, 0.0)));
        _1217 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1153 : (isnan(_1153) ? 0.0 : max(_1153, 0.0)));
        _1218 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1195 : (isnan(_1195) ? 0.0 : max(_1195, 0.0)));
    }
    else
    {
        _1203 = _1204;
        _1205 = _1204;
        _1206 = _1204;
        _1207 = _1204;
        _1208 = _1204;
        _1209 = _1204;
        _1210 = _1204;
        _1211 = _1204;
        _1212 = _1204;
        _1213 = _1204;
        _1214 = _1204;
        _1215 = _1204;
        _1216 = 0.0;
        _1217 = 0.0;
        _1218 = 0.0;
    }
    float _1515;
    float _1516;
    float _1517;
    float _1518;
    float _1519;
    float _1520;
    float _1521;
    float _1522;
    float _1523;
    float _1524;
    float _1525;
    float _1526;
    float _1527;
    float _1528;
    float _1529;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1246 = fma(_873, cbModelParam._m0[30u].z, fma(_869, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _865));
        float _1250 = fma(_873, cbModelParam._m0[31u].z, fma(_869, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _865));
        float _1254 = fma(_873, cbModelParam._m0[32u].z, fma(_869, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _865));
        float _1277 = _865 + _642;
        float _1278 = _869 + _643;
        float _1279 = _873 + _644;
        float _1289 = fma(_1279, cbModelParam._m0[30u].z, fma(_1278, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1277)) - _1246;
        float _1290 = fma(_1279, cbModelParam._m0[31u].z, fma(_1278, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1277)) - _1250;
        float _1291 = fma(_1279, cbModelParam._m0[32u].z, fma(_1278, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1277)) - _1254;
        float _1295 = inversesqrt(dot(vec3(_1289, _1290, _1291), vec3(_1289, _1290, _1291)));
        float _1308 = ((_1295 * _1289) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1246 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1309 = ((_1295 * _1290) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1250 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1310 = ((_1295 * _1291) / cbModelParam._m0[35u].z) + ((((((_1254 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1312 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1308, _1309, _1310), 0.0);
        vec4 _1319 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1308, _1309, _1310), 0.0);
        vec4 _1326 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1308, _1309, _1310), 0.0);
        vec4 _1333 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1308, _1309, _1310), 0.0);
        float _1345 = exp2((_1312.w + (-0.5)) * 20.0) * 2.0;
        float _1346 = _1345 * (_1312.x + (-0.5));
        float _1347 = _1345 * (_1312.y + (-0.5));
        float _1348 = _1345 * (_1312.z + (-0.5));
        float _1355 = exp2((_1319.w + (-0.5)) * 20.0) * 2.0;
        float _1356 = _1355 * (_1319.x + (-0.5));
        float _1357 = _1355 * (_1319.y + (-0.5));
        float _1358 = _1355 * (_1319.z + (-0.5));
        float _1365 = exp2((_1326.w + (-0.5)) * 20.0) * 2.0;
        float _1366 = _1365 * (_1326.x + (-0.5));
        float _1367 = _1365 * (_1326.y + (-0.5));
        float _1368 = _1365 * (_1326.z + (-0.5));
        float _1375 = exp2((_1333.w + (-0.5)) * 20.0) * 2.0;
        float _1376 = _1375 * (_1333.x + (-0.5));
        float _1377 = _1375 * (_1333.y + (-0.5));
        float _1378 = _1375 * (_1333.z + (-0.5));
        float _1379 = isnan(0.0) ? _1376 : (isnan(_1376) ? 0.0 : max(_1376, 0.0));
        float _1380 = isnan(0.0) ? _1377 : (isnan(_1377) ? 0.0 : max(_1377, 0.0));
        float _1381 = isnan(0.0) ? _1378 : (isnan(_1378) ? 0.0 : max(_1378, 0.0));
        float _1382 = _1346 * 0.5;
        float _1383 = _1356 * 0.5;
        float _1384 = _1366 * 0.5;
        float _1385 = dot(vec3(_1382, _1383, _1384), vec3(_1382, _1383, _1384));
        float _1390 = (_1385 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1385);
        float _1398 = (dot(vec3(_642, _643, _644), vec3(_1390 * _1382, _1390 * _1383, _1390 * _1384)) + 1.0) * 0.5;
        float _3886 = isnan(0.0) ? _1398 : (isnan(_1398) ? 0.0 : max(_1398, 0.0));
        float _1407 = sqrt(((_1383 * _1383) + (_1382 * _1382)) + (_1384 * _1384)) / (_1379 + 9.9999997473787516355514526367188e-06);
        float _3897 = isnan(0.0) ? _1407 : (isnan(_1407) ? 0.0 : max(_1407, 0.0));
        float _1408 = isnan(1.0) ? _3897 : (isnan(_3897) ? 1.0 : min(_3897, 1.0));
        float _1409 = _1408 * 2.0;
        float _1413 = (1.0 - _1408) / (_1408 + 1.0);
        float _3908 = isnan(0.0) ? _1413 : (isnan(_1413) ? 0.0 : max(_1413, 0.0));
        float _1414 = isnan(1.0) ? _3908 : (isnan(_3908) ? 1.0 : min(_3908, 1.0));
        float _1423 = ((((1.0 - _1414) * (_1409 + 2.0)) * exp2(log2(isnan(1.0) ? _3886 : (isnan(_3886) ? 1.0 : min(_3886, 1.0))) * (_1409 + 1.0))) + _1414) * _1379;
        float _1424 = _1347 * 0.5;
        float _1425 = _1357 * 0.5;
        float _1426 = _1367 * 0.5;
        float _1427 = dot(vec3(_1424, _1425, _1426), vec3(_1424, _1425, _1426));
        float _1432 = (_1427 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1427);
        float _1440 = (dot(vec3(_642, _643, _644), vec3(_1432 * _1424, _1432 * _1425, _1432 * _1426)) + 1.0) * 0.5;
        float _3919 = isnan(0.0) ? _1440 : (isnan(_1440) ? 0.0 : max(_1440, 0.0));
        float _1449 = sqrt(((_1425 * _1425) + (_1424 * _1424)) + (_1426 * _1426)) / (_1380 + 9.9999997473787516355514526367188e-06);
        float _3930 = isnan(0.0) ? _1449 : (isnan(_1449) ? 0.0 : max(_1449, 0.0));
        float _1450 = isnan(1.0) ? _3930 : (isnan(_3930) ? 1.0 : min(_3930, 1.0));
        float _1451 = _1450 * 2.0;
        float _1455 = (1.0 - _1450) / (_1450 + 1.0);
        float _3941 = isnan(0.0) ? _1455 : (isnan(_1455) ? 0.0 : max(_1455, 0.0));
        float _1456 = isnan(1.0) ? _3941 : (isnan(_3941) ? 1.0 : min(_3941, 1.0));
        float _1465 = ((((1.0 - _1456) * (_1451 + 2.0)) * exp2(log2(isnan(1.0) ? _3919 : (isnan(_3919) ? 1.0 : min(_3919, 1.0))) * (_1451 + 1.0))) + _1456) * _1380;
        float _1466 = _1348 * 0.5;
        float _1467 = _1358 * 0.5;
        float _1468 = _1368 * 0.5;
        float _1469 = dot(vec3(_1466, _1467, _1468), vec3(_1466, _1467, _1468));
        float _1474 = (_1469 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1469);
        float _1482 = (dot(vec3(_642, _643, _644), vec3(_1474 * _1466, _1474 * _1467, _1474 * _1468)) + 1.0) * 0.5;
        float _3952 = isnan(0.0) ? _1482 : (isnan(_1482) ? 0.0 : max(_1482, 0.0));
        float _1491 = sqrt(((_1467 * _1467) + (_1466 * _1466)) + (_1468 * _1468)) / (_1381 + 9.9999997473787516355514526367188e-06);
        float _3963 = isnan(0.0) ? _1491 : (isnan(_1491) ? 0.0 : max(_1491, 0.0));
        float _1492 = isnan(1.0) ? _3963 : (isnan(_3963) ? 1.0 : min(_3963, 1.0));
        float _1493 = _1492 * 2.0;
        float _1497 = (1.0 - _1492) / (_1492 + 1.0);
        float _3974 = isnan(0.0) ? _1497 : (isnan(_1497) ? 0.0 : max(_1497, 0.0));
        float _1498 = isnan(1.0) ? _3974 : (isnan(_3974) ? 1.0 : min(_3974, 1.0));
        float _1507 = ((((1.0 - _1498) * (_1493 + 2.0)) * exp2(log2(isnan(1.0) ? _3952 : (isnan(_3952) ? 1.0 : min(_3952, 1.0))) * (_1493 + 1.0))) + _1498) * _1381;
        _1515 = _1348;
        _1516 = _1347;
        _1517 = _1346;
        _1518 = _1358;
        _1519 = _1357;
        _1520 = _1356;
        _1521 = _1368;
        _1522 = _1367;
        _1523 = _1366;
        _1524 = _1381;
        _1525 = _1380;
        _1526 = _1379;
        _1527 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1423 : (isnan(_1423) ? 0.0 : max(_1423, 0.0)));
        _1528 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1465 : (isnan(_1465) ? 0.0 : max(_1465, 0.0)));
        _1529 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1507 : (isnan(_1507) ? 0.0 : max(_1507, 0.0)));
    }
    else
    {
        _1515 = _1204;
        _1516 = _1204;
        _1517 = _1204;
        _1518 = _1204;
        _1519 = _1204;
        _1520 = _1204;
        _1521 = _1204;
        _1522 = _1204;
        _1523 = _1204;
        _1524 = _1204;
        _1525 = _1204;
        _1526 = _1204;
        _1527 = 0.0;
        _1528 = 0.0;
        _1529 = 0.0;
    }
    float _1539 = (cbModelParam._m0[1u].x * (_1527 - _1216)) + _1216;
    float _1540 = (cbModelParam._m0[1u].x * (_1528 - _1217)) + _1217;
    float _1541 = (cbModelParam._m0[1u].x * (_1529 - _1218)) + _1218;
    float _1562 = fma(_1541, cbSceneParam._m0[89u].z, fma(_1540, cbSceneParam._m0[89u].y, _1539 * cbSceneParam._m0[89u].x));
    float _1565 = fma(_1541, cbSceneParam._m0[90u].z, fma(_1540, cbSceneParam._m0[90u].y, _1539 * cbSceneParam._m0[90u].x));
    float _1568 = fma(_1541, cbSceneParam._m0[91u].z, fma(_1540, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1539));
    float _1583 = _812 * 0.5;
    float _1584 = _813 * 0.5;
    float _1585 = _814 * 0.5;
    float _1586 = dot(vec4(_1583, _1584, _1585, 1.0), vec4(_1517, _1520, _1523, _1526));
    float _1589 = dot(vec4(_1583, _1584, _1585, 1.0), vec4(_1516, _1519, _1522, _1525));
    float _1592 = dot(vec4(_1583, _1584, _1585, 1.0), vec4(_1515, _1518, _1521, _1524));
    float _1626;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1599 = dot(vec4(_1583, _1584, _1585, 1.0), vec4(_1203, _1207, _1210, _1213));
        float _1603 = dot(vec4(_1583, _1584, _1585, 1.0), vec4(_1205, _1208, _1211, _1214));
        float _1607 = dot(vec4(_1583, _1584, _1585, 1.0), vec4(_1206, _1209, _1212, _1215));
        float _1614 = dot(vec4(cbModelParam._m0[39u]), vec4(_1583, _1584, _1585, 1.0));
        _1626 = dot(vec3(isnan(0.0) ? _1607 : (isnan(_1607) ? 0.0 : max(_1607, 0.0)), isnan(0.0) ? _1603 : (isnan(_1603) ? 0.0 : max(_1603, 0.0)), isnan(0.0) ? _1599 : (isnan(_1599) ? 0.0 : max(_1599, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1614) ? 0.0 : (isnan(0.0) ? _1614 : max(0.0, _1614))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1626 = 1.0;
    }
    float _1637;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1628 = dot(vec4(cbModelParam._m0[40u]), vec4(_1583, _1584, _1585, 1.0));
        _1637 = dot(vec3(isnan(0.0) ? _1586 : (isnan(_1586) ? 0.0 : max(_1586, 0.0)), isnan(0.0) ? _1589 : (isnan(_1589) ? 0.0 : max(_1589, 0.0)), isnan(0.0) ? _1592 : (isnan(_1592) ? 0.0 : max(_1592, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1628) ? 0.0 : (isnan(0.0) ? _1628 : max(0.0, _1628))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1637 = 1.0;
    }
    float _1641 = (_1637 * cbModelParam._m0[1u].x) + (_1626 * (1.0 - cbModelParam._m0[1u].x));
    float _1651 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _645);
    float _1652 = isnan(_1651) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1651 : min(cbModelParam._m0[25u].z, _1651));
    float _1733;
    float _1735;
    float _1737;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1700 = fma(_873, cbModelParam._m0[13u].z, fma(_869, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _865)) + cbModelParam._m0[13u].w;
        float _1704 = fma(_873, cbModelParam._m0[14u].z, fma(_869, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _865)) + cbModelParam._m0[14u].w;
        float _1708 = fma(_873, cbModelParam._m0[15u].z, fma(_869, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _865)) + cbModelParam._m0[15u].w;
        float _1711 = fma(_814, cbModelParam._m0[13u].z, fma(_813, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _812));
        float _1714 = fma(_814, cbModelParam._m0[14u].z, fma(_813, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _812));
        float _1717 = fma(_814, cbModelParam._m0[15u].z, fma(_813, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _812));
        float _1745;
        if (_1711 > 0.0)
        {
            _1745 = abs((1.0 - _1700) / _1711);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1711 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1700 + 1.0) / _1711);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1745 = frontier_phi_17_15_ladder;
        }
        float _1946;
        if (_1714 > 0.0)
        {
            _1946 = abs((1.0 - _1704) / _1714);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1714 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1704 + 1.0) / _1714);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1946 = frontier_phi_26_22_ladder;
        }
        float _2189;
        if (_1717 > 0.0)
        {
            _2189 = abs((1.0 - _1708) / _1717);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1717 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1708 + 1.0) / _1717);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2189 = frontier_phi_38_33_ladder;
        }
        float _2191 = isnan(_1946) ? _1745 : (isnan(_1745) ? _1946 : min(_1745, _1946));
        float _2192 = isnan(_2189) ? _2191 : (isnan(_2191) ? _2189 : min(_2191, _2189));
        float _2196 = (_2192 * _1711) + _1700;
        float _2197 = (_2192 * _1714) + _1704;
        float _2198 = (_2192 * _1717) + _1708;
        float _2199 = _2192 * 9.9999997473787516355514526367188e-05;
        float _2201 = (-1.0) - _2199;
        float _2203 = _2199 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2198 > _2203) || ((_2198 < _2201) || ((_2197 > _2203) || ((_2197 < _2201) || ((_2196 < _2201) || (_2196 > _2203))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2322 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2198, cbModelParam._m0[9u].z, fma(_2197, cbModelParam._m0[9u].y, _2196 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2198, cbModelParam._m0[10u].z, fma(_2197, cbModelParam._m0[10u].y, _2196 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2198, cbModelParam._m0[11u].z, fma(_2197, cbModelParam._m0[11u].y, _2196 * cbModelParam._m0[11u].x))), _1652);
            frontier_phi_16_38_ladder = _2322.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2322.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2322.x * cbModelParam._m0[1u].y;
        }
        _1733 = frontier_phi_16_38_ladder_2;
        _1735 = frontier_phi_16_38_ladder_1;
        _1737 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1721 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_812, _813, _814), _1652);
        _1733 = _1721.x * cbModelParam._m0[1u].y;
        _1735 = _1721.y * cbModelParam._m0[1u].y;
        _1737 = _1721.z * cbModelParam._m0[1u].y;
    }
    float _1741 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _645);
    float _1742 = isnan(_1741) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1741 : min(cbModelParam._m0[25u].w, _1741));
    float _1832;
    float _1834;
    float _1836;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1796 = fma(_873, cbModelParam._m0[21u].z, fma(_869, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _865)) + cbModelParam._m0[21u].w;
        float _1800 = fma(_873, cbModelParam._m0[22u].z, fma(_869, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _865)) + cbModelParam._m0[22u].w;
        float _1804 = fma(_873, cbModelParam._m0[23u].z, fma(_869, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _865)) + cbModelParam._m0[23u].w;
        float _1807 = fma(_814, cbModelParam._m0[21u].z, fma(_813, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _812));
        float _1810 = fma(_814, cbModelParam._m0[22u].z, fma(_813, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _812));
        float _1813 = fma(_814, cbModelParam._m0[23u].z, fma(_813, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _812));
        float _1951;
        if (_1807 > 0.0)
        {
            _1951 = abs((1.0 - _1796) / _1807);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1807 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1796 + 1.0) / _1807);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1951 = frontier_phi_28_24_ladder;
        }
        float _2216;
        if (_1810 > 0.0)
        {
            _2216 = abs((1.0 - _1800) / _1810);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1810 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1800 + 1.0) / _1810);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2216 = frontier_phi_40_35_ladder;
        }
        float _2421;
        if (_1813 > 0.0)
        {
            _2421 = abs((1.0 - _1804) / _1813);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1813 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1804 + 1.0) / _1813);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2421 = frontier_phi_49_46_ladder;
        }
        float _2423 = isnan(_2216) ? _1951 : (isnan(_1951) ? _2216 : min(_1951, _2216));
        float _2424 = isnan(_2421) ? _2423 : (isnan(_2423) ? _2421 : min(_2423, _2421));
        float _2428 = (_2424 * _1807) + _1796;
        float _2429 = (_2424 * _1810) + _1800;
        float _2430 = (_2424 * _1813) + _1804;
        float _2431 = _2424 * 9.9999997473787516355514526367188e-05;
        float _2432 = (-1.0) - _2431;
        float _2434 = _2431 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2430 > _2434) || ((_2430 < _2432) || ((_2429 > _2434) || ((_2429 < _2432) || ((_2428 < _2432) || (_2428 > _2434))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2629 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2430, cbModelParam._m0[17u].z, fma(_2429, cbModelParam._m0[17u].y, _2428 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2430, cbModelParam._m0[18u].z, fma(_2429, cbModelParam._m0[18u].y, _2428 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2430, cbModelParam._m0[19u].z, fma(_2429, cbModelParam._m0[19u].y, _2428 * cbModelParam._m0[19u].x))), _1742);
            frontier_phi_25_49_ladder = _2629.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2629.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2629.x * cbModelParam._m0[1u].z;
        }
        _1832 = frontier_phi_25_49_ladder_2;
        _1834 = frontier_phi_25_49_ladder_1;
        _1836 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1816 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_812, _813, _814), _1742);
        _1832 = _1816.x * cbModelParam._m0[1u].z;
        _1834 = _1816.y * cbModelParam._m0[1u].z;
        _1836 = _1816.z * cbModelParam._m0[1u].z;
    }
    float _1848 = ((((1.0 - _833) * ((_820 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_833 * _820)) * _804;
    float _1849 = _1848 * ((cbModelParam._m0[1u].w * (_1832 - _1733)) + _1733);
    float _1850 = _1848 * ((cbModelParam._m0[1u].w * (_1834 - _1735)) + _1735);
    float _1851 = _1848 * ((cbModelParam._m0[1u].w * (_1836 - _1737)) + _1737);
    float _1854 = fma(_1851, cbSceneParam._m0[89u].z, fma(_1850, cbSceneParam._m0[89u].y, _1849 * cbSceneParam._m0[89u].x));
    float _1857 = fma(_1851, cbSceneParam._m0[90u].z, fma(_1850, cbSceneParam._m0[90u].y, _1849 * cbSceneParam._m0[90u].x));
    float _1860 = fma(_1851, cbSceneParam._m0[91u].z, fma(_1850, cbSceneParam._m0[91u].y, _1849 * cbSceneParam._m0[91u].x));
    uvec4 _1870 = floatBitsToUint(cbInstanceData._m0[_234 + 5u]);
    uint _1872 = _1870.x * 14u;
    uint _1873 = _1872 + 13u;
    float _1880 = _804 + (-1.0);
    float _1885 = (cbLight._m0[_1873].x * _1880) + 1.0;
    float _1886 = (cbLight._m0[_1873].y * _1880) + 1.0;
    float _1887 = (cbLight._m0[_1873].z * _1880) + 1.0;
    float _1888 = (cbLight._m0[_1873].w * _1880) + 1.0;
    uint _1889 = _1872 + 5u;
    float _1895 = isnan(1.0) ? _1886 : (isnan(_1886) ? 1.0 : min(_1886, 1.0));
    uint _1899 = _1872 + 4u;
    float _1905 = isnan(1.0) ? _1885 : (isnan(_1885) ? 1.0 : min(_1885, 1.0));
    uint _1909 = _1872 | 1u;
    float _1920 = dot(vec3(cbLight._m0[_1872].xyz), vec3(_642, _643, _644));
    float _1923 = dot(vec3(cbLight._m0[_1909].xyz), vec3(_642, _643, _644));
    float _4110 = isnan(0.0) ? _1920 : (isnan(_1920) ? 0.0 : max(_1920, 0.0));
    float _4121 = isnan(0.0) ? _1923 : (isnan(_1923) ? 0.0 : max(_1923, 0.0));
    float _1928 = (isnan(1.0) ? _4110 : (isnan(_4110) ? 1.0 : min(_4110, 1.0))) * 0.3183098733425140380859375;
    float _1930 = (isnan(1.0) ? _4121 : (isnan(_4121) ? 1.0 : min(_4121, 1.0))) * 0.3183098733425140380859375;
    float _1937 = ((cbLight._m0[_1889].x * _1895) * _1930) + ((cbLight._m0[_1899].x * _1905) * _1928);
    float _1938 = ((_1895 * cbLight._m0[_1889].y) * _1930) + ((_1905 * cbLight._m0[_1899].y) * _1928);
    float _1939 = ((_1895 * cbLight._m0[_1889].z) * _1930) + ((_1905 * cbLight._m0[_1899].z) * _1928);
    uvec4 _1943 = floatBitsToUint(cbLight._m0[_1872 + 12u]);
    bool _1945 = _1943.x == 0u;
    float _1956;
    float _1958;
    float _1960;
    if (_1945)
    {
        _1956 = _1937;
        _1958 = _1938;
        _1960 = _1939;
    }
    else
    {
        uint _1964 = _1872 + 6u;
        float _1980 = (dot(vec3(cbLight._m0[_1872 + 2u].xyz), vec3(_642, _643, _644)) * 0.5) + 0.5;
        float _1981 = _1980 * _1980;
        float _4132 = isnan(0.0) ? _1981 : (isnan(_1981) ? 0.0 : max(_1981, 0.0));
        float _1982 = isnan(1.0) ? _4132 : (isnan(_4132) ? 1.0 : min(_4132, 1.0));
        float _1983 = isnan(1.0) ? _1887 : (isnan(_1887) ? 1.0 : min(_1887, 1.0));
        _1956 = (((cbLight._m0[_1964].x * 0.3183098733425140380859375) * _1982) * _1983) + _1937;
        _1958 = (((cbLight._m0[_1964].y * 0.3183098733425140380859375) * _1982) * _1983) + _1938;
        _1960 = (((cbLight._m0[_1964].z * 0.3183098733425140380859375) * _1982) * _1983) + _1939;
    }
    bool _1963 = _1943.y == 0u;
    float _2001;
    float _2003;
    float _2005;
    if (_1963)
    {
        _2001 = _1956;
        _2003 = _1958;
        _2005 = _1960;
    }
    else
    {
        uint _2160 = _1872 + 7u;
        float _2176 = (dot(vec3(cbLight._m0[_1872 + 3u].xyz), vec3(_642, _643, _644)) * 0.5) + 0.5;
        float _2177 = _2176 * _2176;
        float _4148 = isnan(0.0) ? _2177 : (isnan(_2177) ? 0.0 : max(_2177, 0.0));
        float _2178 = isnan(1.0) ? _4148 : (isnan(_4148) ? 1.0 : min(_4148, 1.0));
        float _2179 = isnan(1.0) ? _1888 : (isnan(_1888) ? 1.0 : min(_1888, 1.0));
        _2001 = (((cbLight._m0[_2160].x * 0.3183098733425140380859375) * _2178) * _2179) + _1956;
        _2003 = (((cbLight._m0[_2160].y * 0.3183098733425140380859375) * _2178) * _2179) + _1958;
        _2005 = (((cbLight._m0[_2160].z * 0.3183098733425140380859375) * _2178) * _2179) + _1960;
    }
    uint _2008 = _1872 + 8u;
    float _2021 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1872].w)) * _645) * 0.949999988079071044921875);
    float _2022 = _2021 * _2021;
    float _2023 = cbLight._m0[_1872].x + _721;
    float _2024 = cbLight._m0[_1872].y + _722;
    float _2025 = cbLight._m0[_1872].z + _723;
    float _2029 = inversesqrt(dot(vec3(_2023, _2024, _2025), vec3(_2023, _2024, _2025)));
    float _2030 = _2029 * _2023;
    float _2031 = _2029 * _2024;
    float _2032 = _2029 * _2025;
    float _2033 = dot(vec3(_642, _643, _644), vec3(cbLight._m0[_1872].xyz));
    float _4164 = isnan(0.0) ? _2033 : (isnan(_2033) ? 0.0 : max(_2033, 0.0));
    float _2036 = isnan(1.0) ? _4164 : (isnan(_4164) ? 1.0 : min(_4164, 1.0));
    float _4175 = isnan(0.0) ? _805 : (isnan(_805) ? 0.0 : max(_805, 0.0));
    float _2037 = isnan(1.0) ? _4175 : (isnan(_4175) ? 1.0 : min(_4175, 1.0));
    float _2038 = dot(vec3(_642, _643, _644), vec3(_2030, _2031, _2032));
    float _4186 = isnan(0.0) ? _2038 : (isnan(_2038) ? 0.0 : max(_2038, 0.0));
    float _2041 = isnan(1.0) ? _4186 : (isnan(_4186) ? 1.0 : min(_4186, 1.0));
    float _2042 = dot(vec3(cbLight._m0[_1872].xyz), vec3(_2030, _2031, _2032));
    float _4197 = isnan(0.0) ? _2042 : (isnan(_2042) ? 0.0 : max(_2042, 0.0));
    float _2046 = _2022 * _2022;
    float _2050 = ((_2041 * _2041) * (_2046 + (-1.0))) + 1.0;
    float _2061 = (exp2(log2(1.0 - (isnan(1.0) ? _4197 : (isnan(_4197) ? 1.0 : min(_4197, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2062 = 1.0 - _2022;
    float _2073 = (0.5 / (((_2037 * ((_2036 * _2062) + _2022)) + 9.9999999392252902907785028219223e-09) + (((_2037 * _2062) + _2022) * _2036))) * _2036;
    float _4208 = isnan(0.0) ? _2073 : (isnan(_2073) ? 0.0 : max(_2073, 0.0));
    float _2075 = (isnan(1.0) ? _4208 : (isnan(_4208) ? 1.0 : min(_4208, 1.0))) * (_2046 / ((_2050 * _2050) * 3.141590118408203125));
    uint _2086 = _1872 + 9u;
    float _2097 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1909].w)) * _645) * 0.949999988079071044921875);
    float _2098 = _2097 * _2097;
    float _2099 = cbLight._m0[_1909].x + _721;
    float _2100 = cbLight._m0[_1909].y + _722;
    float _2101 = cbLight._m0[_1909].z + _723;
    float _2105 = inversesqrt(dot(vec3(_2099, _2100, _2101), vec3(_2099, _2100, _2101)));
    float _2106 = _2105 * _2099;
    float _2107 = _2105 * _2100;
    float _2108 = _2105 * _2101;
    float _2109 = dot(vec3(_642, _643, _644), vec3(cbLight._m0[_1909].xyz));
    float _4219 = isnan(0.0) ? _2109 : (isnan(_2109) ? 0.0 : max(_2109, 0.0));
    float _2112 = isnan(1.0) ? _4219 : (isnan(_4219) ? 1.0 : min(_4219, 1.0));
    float _2113 = dot(vec3(_642, _643, _644), vec3(_2106, _2107, _2108));
    float _4230 = isnan(0.0) ? _2113 : (isnan(_2113) ? 0.0 : max(_2113, 0.0));
    float _2116 = isnan(1.0) ? _4230 : (isnan(_4230) ? 1.0 : min(_4230, 1.0));
    float _2117 = dot(vec3(cbLight._m0[_1909].xyz), vec3(_2106, _2107, _2108));
    float _4241 = isnan(0.0) ? _2117 : (isnan(_2117) ? 0.0 : max(_2117, 0.0));
    float _2121 = _2098 * _2098;
    float _2125 = ((_2116 * _2116) * (_2121 + (-1.0))) + 1.0;
    float _2134 = (exp2(log2(1.0 - (isnan(1.0) ? _4241 : (isnan(_4241) ? 1.0 : min(_4241, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2135 = 1.0 - _2098;
    float _2145 = (0.5 / (((_2037 * ((_2112 * _2135) + _2098)) + 9.9999999392252902907785028219223e-09) + (((_2037 * _2135) + _2098) * _2112))) * _2112;
    float _4252 = isnan(0.0) ? _2145 : (isnan(_2145) ? 0.0 : max(_2145, 0.0));
    float _2147 = (isnan(1.0) ? _4252 : (isnan(_4252) ? 1.0 : min(_4252, 1.0))) * (_2121 / ((_2125 * _2125) * 3.141590118408203125));
    float _2157 = (((_2134 * cbLight._m0[_2086].x) * _2147) * _1895) + (((_2061 * cbLight._m0[_2008].x) * _2075) * _1905);
    float _2158 = (((_2134 * cbLight._m0[_2086].y) * _2147) * _1895) + (((_2061 * cbLight._m0[_2008].y) * _2075) * _1905);
    float _2159 = (((_2134 * cbLight._m0[_2086].z) * _2147) * _1895) + (((_2061 * cbLight._m0[_2008].z) * _2075) * _1905);
    float _2221;
    float _2223;
    float _2225;
    if (_1945)
    {
        _2221 = _2157;
        _2223 = _2158;
        _2225 = _2159;
    }
    else
    {
        uint _2227 = _1872 + 2u;
        uint _2231 = _1872 + 10u;
        float _2245 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2227].w)) * _645) * 0.949999988079071044921875);
        float _2246 = _2245 * _2245;
        float _2247 = cbLight._m0[_2227].x + _721;
        float _2248 = cbLight._m0[_2227].y + _722;
        float _2249 = cbLight._m0[_2227].z + _723;
        float _2253 = inversesqrt(dot(vec3(_2247, _2248, _2249), vec3(_2247, _2248, _2249)));
        float _2254 = _2253 * _2247;
        float _2255 = _2253 * _2248;
        float _2256 = _2253 * _2249;
        float _2257 = dot(vec3(_642, _643, _644), vec3(cbLight._m0[_2227].xyz));
        float _4263 = isnan(0.0) ? _2257 : (isnan(_2257) ? 0.0 : max(_2257, 0.0));
        float _2260 = isnan(1.0) ? _4263 : (isnan(_4263) ? 1.0 : min(_4263, 1.0));
        float _2261 = dot(vec3(_642, _643, _644), vec3(_2254, _2255, _2256));
        float _4274 = isnan(0.0) ? _2261 : (isnan(_2261) ? 0.0 : max(_2261, 0.0));
        float _2264 = isnan(1.0) ? _4274 : (isnan(_4274) ? 1.0 : min(_4274, 1.0));
        float _2265 = dot(vec3(cbLight._m0[_2227].xyz), vec3(_2254, _2255, _2256));
        float _4285 = isnan(0.0) ? _2265 : (isnan(_2265) ? 0.0 : max(_2265, 0.0));
        float _2269 = _2246 * _2246;
        float _2273 = ((_2264 * _2264) * (_2269 + (-1.0))) + 1.0;
        float _2282 = (exp2(log2(1.0 - (isnan(1.0) ? _4285 : (isnan(_4285) ? 1.0 : min(_4285, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2283 = 1.0 - _2246;
        float _2293 = (0.5 / (((_2037 * ((_2260 * _2283) + _2246)) + 9.9999999392252902907785028219223e-09) + (((_2037 * _2283) + _2246) * _2260))) * _2260;
        float _4296 = isnan(0.0) ? _2293 : (isnan(_2293) ? 0.0 : max(_2293, 0.0));
        float _2295 = (isnan(1.0) ? _4296 : (isnan(_4296) ? 1.0 : min(_4296, 1.0))) * (_2269 / ((_2273 * _2273) * 3.141590118408203125));
        float _2296 = isnan(1.0) ? _1887 : (isnan(_1887) ? 1.0 : min(_1887, 1.0));
        _2221 = (((_2282 * cbLight._m0[_2231].x) * _2295) * _2296) + _2157;
        _2223 = (((_2282 * cbLight._m0[_2231].y) * _2295) * _2296) + _2158;
        _2225 = (((_2282 * cbLight._m0[_2231].z) * _2295) * _2296) + _2159;
    }
    float _2331;
    float _2333;
    float _2335;
    if (_1963)
    {
        _2331 = _2221;
        _2333 = _2223;
        _2335 = _2225;
    }
    else
    {
        uint _2342 = _1872 + 3u;
        uint _2346 = _1872 + 11u;
        float _2360 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2342].w)) * _645) * 0.949999988079071044921875);
        float _2361 = _2360 * _2360;
        float _2362 = cbLight._m0[_2342].x + _721;
        float _2363 = cbLight._m0[_2342].y + _722;
        float _2364 = cbLight._m0[_2342].z + _723;
        float _2368 = inversesqrt(dot(vec3(_2362, _2363, _2364), vec3(_2362, _2363, _2364)));
        float _2369 = _2368 * _2362;
        float _2370 = _2368 * _2363;
        float _2371 = _2368 * _2364;
        float _2372 = dot(vec3(_642, _643, _644), vec3(cbLight._m0[_2342].xyz));
        float _4312 = isnan(0.0) ? _2372 : (isnan(_2372) ? 0.0 : max(_2372, 0.0));
        float _2375 = isnan(1.0) ? _4312 : (isnan(_4312) ? 1.0 : min(_4312, 1.0));
        float _2376 = dot(vec3(_642, _643, _644), vec3(_2369, _2370, _2371));
        float _4323 = isnan(0.0) ? _2376 : (isnan(_2376) ? 0.0 : max(_2376, 0.0));
        float _2379 = isnan(1.0) ? _4323 : (isnan(_4323) ? 1.0 : min(_4323, 1.0));
        float _2380 = dot(vec3(cbLight._m0[_2342].xyz), vec3(_2369, _2370, _2371));
        float _4334 = isnan(0.0) ? _2380 : (isnan(_2380) ? 0.0 : max(_2380, 0.0));
        float _2384 = _2361 * _2361;
        float _2388 = ((_2379 * _2379) * (_2384 + (-1.0))) + 1.0;
        float _2397 = (exp2(log2(1.0 - (isnan(1.0) ? _4334 : (isnan(_4334) ? 1.0 : min(_4334, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2398 = 1.0 - _2361;
        float _2408 = (0.5 / (((_2037 * ((_2375 * _2398) + _2361)) + 9.9999999392252902907785028219223e-09) + (((_2037 * _2398) + _2361) * _2375))) * _2375;
        float _4345 = isnan(0.0) ? _2408 : (isnan(_2408) ? 0.0 : max(_2408, 0.0));
        float _2410 = (isnan(1.0) ? _4345 : (isnan(_4345) ? 1.0 : min(_4345, 1.0))) * (_2384 / ((_2388 * _2388) * 3.141590118408203125));
        float _2411 = isnan(1.0) ? _1888 : (isnan(_1888) ? 1.0 : min(_1888, 1.0));
        _2331 = (((_2397 * cbLight._m0[_2346].x) * _2410) * _2411) + _2221;
        _2333 = (((_2397 * cbLight._m0[_2346].y) * _2410) * _2411) + _2223;
        _2335 = (((_2397 * cbLight._m0[_2346].z) * _2410) * _2411) + _2225;
    }
    float _2546;
    float _2548;
    float _2550;
    float _2552;
    float _2554;
    float _2556;
    if (_1870.y == 0u)
    {
        float _2486 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2487 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2486;
        float _2488 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2486;
        float _2489 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2486;
        uvec4 _2501 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2502 = _2501.x;
        uint _2513 = uint((float(_2501.y) * floor(float(uint(cbSceneParam._m0[85u].y * _742) / _2502))) + floor(float(uint(cbSceneParam._m0[85u].x * _741) / _2502)));
        float _2523 = (log2(_2489 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2524 = isnan(0.0) ? _2523 : (isnan(_2523) ? 0.0 : max(_2523, 0.0));
        uint _2527 = uint(isnan(14.0) ? _2524 : (isnan(_2524) ? 14.0 : min(_2524, 14.0)));
        uvec4 _2532 = texelFetch(g_lightClusterGridBuffer, int(((_2527 << 2u) + (_2513 << 6u)) >> 2u));
        uint _2533 = _2532.x;
        uint _2534 = _2501.z;
        float _2634;
        float _2636;
        float _2638;
        float _2640;
        float _2642;
        float _2644;
        if (((((1u << ((_2534 >> 4u) & 15u)) + 4294967295u) & _2533) == 0u) || ((_2534 & 240u) == 0u))
        {
            _2634 = 0.0;
            _2636 = 0.0;
            _2638 = 0.0;
            _2640 = 0.0;
            _2642 = 0.0;
            _2644 = 0.0;
        }
        else
        {
            float _2635;
            float _2637;
            float _2639;
            float _2641;
            float _2643;
            float _2645;
            float _2787 = 0.0;
            float _2788 = 0.0;
            float _2789 = 0.0;
            float _2790 = 0.0;
            float _2791 = 0.0;
            float _2792 = 0.0;
            uint _2793 = 0u;
            uint _2802;
            bool _2803;
            for (;;)
            {
                _2802 = texelFetch(g_lightClassification, int((((_2527 << 5u) + (_2513 << 9u)) + (_2793 << 2u)) >> 2u)).x;
                _2803 = _2802 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2803)
                {
                    frontier_phi_66_pred = _2787;
                    frontier_phi_66_pred_1 = _2792;
                    frontier_phi_66_pred_2 = _2791;
                    frontier_phi_66_pred_3 = _2790;
                    frontier_phi_66_pred_4 = _2789;
                    frontier_phi_66_pred_5 = _2788;
                }
                else
                {
                    float _2932;
                    float _2933;
                    float _2934;
                    float _2935;
                    float _2936;
                    float _2937;
                    uint _2938;
                    _2932 = _2787;
                    _2933 = _2788;
                    _2934 = _2789;
                    _2935 = _2790;
                    _2936 = _2791;
                    _2937 = _2792;
                    _2938 = _2802;
                    float _2859;
                    float _2860;
                    float _2861;
                    float _2862;
                    float _2863;
                    float _2864;
                    for (;;)
                    {
                        uint _2942 = uint(findLSB(_2938)) + (_2793 << 5u);
                        uint _2939 = (_2938 + 4294967295u) & _2938;
                        uint _2944 = _2942 * 48u;
                        vec4 _2958 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2944)).x, texelFetch(g_PointLightRenderingBuffer, int(_2944 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2944 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2944 + 3u)).x));
                        uint _2964 = (_2942 * 48u) + 4u;
                        vec4 _2977 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2964)).x, texelFetch(g_PointLightRenderingBuffer, int(_2964 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2964 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2964 + 3u)).x));
                        uint _2983 = (_2942 * 48u) + 8u;
                        vec3 _2994 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2983)).x, texelFetch(g_PointLightRenderingBuffer, int(_2983 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2983 + 2u)).x));
                        float _2998 = _2958.x - _2487;
                        float _2999 = _2958.y - _2488;
                        float _3000 = _2958.z - _2489;
                        float _3001 = dot(vec3(_2998, _2999, _3000), vec3(_2998, _2999, _3000));
                        float _3004 = inversesqrt(_3001);
                        float _3005 = _3004 * _2998;
                        float _3006 = _3004 * _2999;
                        float _3007 = _3004 * _3000;
                        float _3008 = dot(vec3(_760, _763, _766), vec3(_3005, _3006, _3007));
                        float _3013 = 1.0 - (_3001 * _2958.w);
                        float _4371 = isnan(0.0) ? _3013 : (isnan(_3013) ? 0.0 : max(_3013, 0.0));
                        float _3014 = isnan(1.0) ? _4371 : (isnan(_4371) ? 1.0 : min(_4371, 1.0));
                        float _3015 = sqrt(_3001) * _2977.w;
                        float _3018 = 1.39999997615814208984375 / (_3015 + 1.39999997615814208984375);
                        float _3019 = _3018 * _3018;
                        float _3022 = ((1.0 - _3019) * _3008) + _3019;
                        float _3025 = _3015 * _3015;
                        float _3029 = ((isnan(0.0) ? _3022 : (isnan(_3022) ? 0.0 : max(_3022, 0.0))) * _3014) / ((_3025 * 0.699999988079071044921875) + 1.0);
                        float _3033 = (-0.0) - _2487;
                        float _3034 = (-0.0) - _2488;
                        float _3035 = (-0.0) - _2489;
                        float _3039 = inversesqrt(dot(vec3(_3033, _3034, _3035), vec3(_3033, _3034, _3035)));
                        float _3040 = _3039 * _3033;
                        float _3041 = _3039 * _3034;
                        float _3042 = _3039 * _3035;
                        float _3050 = exp2(log2(1.0 / ((_3025 * 3.5) + 5.0)) * 0.25);
                        float _3051 = 1.0 - _820;
                        float _3058 = sqrt(1.0 - ((1.0 - (_3051 * _3051)) * (1.0 - (_3050 * _3050))));
                        float _3059 = _3058 * _3058;
                        float _3060 = _3059 * _3059;
                        float _3061 = _3040 + _3005;
                        float _3062 = _3041 + _3006;
                        float _3063 = _3042 + _3007;
                        float _3067 = inversesqrt(dot(vec3(_3061, _3062, _3063), vec3(_3061, _3062, _3063)));
                        float _3071 = dot(vec3(_760, _763, _766), vec3(_3040, _3041, _3042));
                        float _4387 = isnan(0.0) ? _3071 : (isnan(_3071) ? 0.0 : max(_3071, 0.0));
                        float _3074 = isnan(1.0) ? _4387 : (isnan(_4387) ? 1.0 : min(_4387, 1.0));
                        float _3075 = dot(vec3(_760, _763, _766), vec3(_3067 * _3061, _3067 * _3062, _3067 * _3063));
                        float _4398 = isnan(0.0) ? _3075 : (isnan(_3075) ? 0.0 : max(_3075, 0.0));
                        float _3078 = isnan(1.0) ? _4398 : (isnan(_4398) ? 1.0 : min(_4398, 1.0));
                        float _3082 = ((_3078 * _3078) * (_3060 + (-1.0))) + 1.0;
                        float _3083 = _3018 * _3059;
                        float _3084 = _3083 * _3083;
                        float _3087 = ((1.0 - _3084) * _3008) + _3084;
                        float _4409 = isnan(0.0) ? _3087 : (isnan(_3087) ? 0.0 : max(_3087, 0.0));
                        float _3088 = isnan(1.0) ? _4409 : (isnan(_4409) ? 1.0 : min(_4409, 1.0));
                        float _3089 = 1.0 - _3059;
                        float _3099 = (0.5 / (((_3088 * ((_3074 * _3089) + _3059)) + 9.9999999392252902907785028219223e-09) + (((_3088 * _3089) + _3059) * _3074))) * _3088;
                        float _4420 = isnan(0.0) ? _3099 : (isnan(_3099) ? 0.0 : max(_3099, 0.0));
                        float _3110 = (((_3060 * 3.1415927410125732421875) * (isnan(1.0) ? _4420 : (isnan(_4420) ? 1.0 : min(_4420, 1.0)))) / ((_3082 * _3082) * ((_3025 * 2.1991131305694580078125) + 3.141590118408203125))) * _3014;
                        _2862 = (_3029 * _2977.x) + _2935;
                        _2863 = (_3029 * _2977.y) + _2936;
                        _2864 = (_3029 * _2977.z) + _2937;
                        _2859 = (_3110 * _2994.x) + _2932;
                        _2860 = (_3110 * _2994.y) + _2933;
                        _2861 = (_3110 * _2994.z) + _2934;
                        if (_2939 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2932 = _2859;
                            _2933 = _2860;
                            _2934 = _2861;
                            _2935 = _2862;
                            _2936 = _2863;
                            _2937 = _2864;
                            _2938 = _2939;
                        }
                    }
                    frontier_phi_66_pred = _2859;
                    frontier_phi_66_pred_1 = _2864;
                    frontier_phi_66_pred_2 = _2863;
                    frontier_phi_66_pred_3 = _2862;
                    frontier_phi_66_pred_4 = _2861;
                    frontier_phi_66_pred_5 = _2860;
                }
                _2635 = frontier_phi_66_pred;
                _2645 = frontier_phi_66_pred_1;
                _2643 = frontier_phi_66_pred_2;
                _2641 = frontier_phi_66_pred_3;
                _2639 = frontier_phi_66_pred_4;
                _2637 = frontier_phi_66_pred_5;
                uint _2794 = _2793 + 1u;
                if (_2794 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2787 = _2635;
                    _2788 = _2637;
                    _2789 = _2639;
                    _2790 = _2641;
                    _2791 = _2643;
                    _2792 = _2645;
                    _2793 = _2794;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2634 = _2635;
            _2636 = _2637;
            _2638 = _2639;
            _2640 = _2641;
            _2642 = _2643;
            _2644 = _2645;
        }
        uvec4 _2648 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2649 = _2648.z;
        uint _2651 = (_2649 >> 8u) & 15u;
        float _2755;
        float _2757;
        float _2759;
        float _2761;
        float _2763;
        float _2765;
        if (((4294967295u << _2651) & _2533) == 0u)
        {
            _2755 = _2634;
            _2757 = _2636;
            _2759 = _2638;
            _2761 = _2640;
            _2763 = _2642;
            _2765 = _2644;
        }
        else
        {
            float _2780 = inversesqrt(dot(vec3(_2487, _2488, _2489), vec3(_2487, _2488, _2489)));
            float _2781 = _2780 * _2487;
            float _2782 = _2780 * _2488;
            float _2783 = _2780 * _2489;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2651 < ((_2649 >> 12u) & 15u))
            {
                float _2756;
                float _2758;
                float _2760;
                float _2762;
                float _2764;
                float _2766;
                float _2915 = _2634;
                float _2916 = _2636;
                float _2917 = _2638;
                float _2918 = _2640;
                float _2919 = _2642;
                float _2920 = _2644;
                uint _2921 = _2651;
                uint _2930;
                bool _2931;
                for (;;)
                {
                    _2930 = texelFetch(g_lightClassification, int((((_2527 << 5u) + (_2513 << 9u)) + (_2921 << 2u)) >> 2u)).x;
                    _2931 = _2930 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_2931)
                    {
                        frontier_phi_77_pred = _2920;
                        frontier_phi_77_pred_1 = _2919;
                        frontier_phi_77_pred_2 = _2918;
                        frontier_phi_77_pred_3 = _2917;
                        frontier_phi_77_pred_4 = _2916;
                        frontier_phi_77_pred_5 = _2915;
                    }
                    else
                    {
                        float _3124;
                        float _3125;
                        float _3126;
                        float _3127;
                        float _3128;
                        float _3129;
                        float _3418;
                        float _3419;
                        float _3420;
                        float _3421;
                        float _3422;
                        float _3423;
                        float _3137 = _2915;
                        float _3138 = _2916;
                        float _3139 = _2917;
                        float _3140 = _2918;
                        float _3141 = _2919;
                        float _3142 = _2920;
                        uint _3143 = _2930;
                        uint _3144;
                        vec4 _3169;
                        float _3170;
                        vec4 _3185;
                        vec3 _3197;
                        vec4 _3212;
                        vec4 _3228;
                        float _3274;
                        bool _3275;
                        for (;;)
                        {
                            uint _3154 = ((_2921 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3143));
                            _3144 = (_3143 + 4294967295u) & _3143;
                            uint _3156 = _3154 * 40u;
                            _3169 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3156)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3156 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3156 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3156 + 3u)).x));
                            _3170 = _3169.w;
                            uint _3172 = (_3154 * 40u) + 4u;
                            _3185 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3172)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3172 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3172 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3172 + 3u)).x));
                            uint _3187 = (_3154 * 40u) + 8u;
                            _3197 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3187)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3187 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3187 + 2u)).x));
                            uint _3199 = (_3154 * 40u) + 16u;
                            _3212 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3199)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3199 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3199 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3199 + 3u)).x));
                            uint _3215 = (_3154 * 40u) + 20u;
                            _3228 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3215)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3215 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3215 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3215 + 3u)).x));
                            uint _3230 = (_3154 * 40u) + 24u;
                            vec4 _3243 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3230)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3230 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3230 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3230 + 3u)).x));
                            uint _3249 = (_3154 * 40u) + 28u;
                            vec4 _3262 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3249)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3249 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3249 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3249 + 3u)).x));
                            _3274 = fma(_2489, _3262.z, fma(_2488, _3262.y, _3262.x * _2487)) + _3262.w;
                            _3275 = !((fma(_2489, _3243.z, fma(_2488, _3243.y, _3243.x * _2487)) + _3243.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3275)
                            {
                                float _3302 = _3169.x - _2487;
                                float _3303 = _3169.y - _2488;
                                float _3304 = _3169.z - _2489;
                                float _3305 = dot(vec3(_3302, _3303, _3304), vec3(_3302, _3303, _3304));
                                float _3308 = inversesqrt(_3305);
                                float _3309 = _3308 * _3302;
                                float _3310 = _3308 * _3303;
                                float _3311 = _3308 * _3304;
                                float _3315 = 1.0 - (_3305 / (_3170 * _3170));
                                float _4431 = isnan(0.0) ? _3315 : (isnan(_3315) ? 0.0 : max(_3315, 0.0));
                                float _3316 = isnan(1.0) ? _4431 : (isnan(_4431) ? 1.0 : min(_4431, 1.0));
                                float _3320 = sqrt(_3305) * _3185.w;
                                float _3322 = 1.39999997615814208984375 / (_3320 + 1.39999997615814208984375);
                                float _3323 = _3322 * _3322;
                                float _3326 = ((1.0 - _3323) * dot(vec3(_3309, _3310, _3311), vec3(_760, _763, _766))) + _3323;
                                float _3329 = _3320 * _3320;
                                float _3333 = (fma(_2489, _3212.z, fma(_2488, _3212.y, _3212.x * _2487)) + _3212.w) / _3274;
                                float _3334 = (fma(_2489, _3228.z, fma(_2488, _3228.y, _3228.x * _2487)) + _3228.w) / _3274;
                                float _3338 = 1.0 - dot(vec2(_3333, _3334), vec2(_3333, _3334));
                                float _4447 = isnan(0.0) ? _3338 : (isnan(_3338) ? 0.0 : max(_3338, 0.0));
                                float _3339 = isnan(1.0) ? _4447 : (isnan(_4447) ? 1.0 : min(_4447, 1.0));
                                float _3340 = _3339 * (((isnan(0.0) ? _3326 : (isnan(_3326) ? 0.0 : max(_3326, 0.0))) * _3316) / ((_3329 * 0.699999988079071044921875) + 1.0));
                                float _3352 = exp2(log2(1.0 / ((_3329 * 3.5) + 5.0)) * 0.25);
                                float _3353 = 1.0 - _820;
                                float _3360 = sqrt(1.0 - ((1.0 - (_3353 * _3353)) * (1.0 - (_3352 * _3352))));
                                float _3361 = _3360 * _3360;
                                float _3362 = _3361 * _3361;
                                float _3363 = _3309 - _2781;
                                float _3364 = _3310 - _2782;
                                float _3365 = _3311 - _2783;
                                float _3369 = inversesqrt(dot(vec3(_3363, _3364, _3365), vec3(_3363, _3364, _3365)));
                                float _3373 = dot(vec3(_760, _763, _766), vec3((-0.0) - _2781, (-0.0) - _2782, (-0.0) - _2783));
                                float _4458 = isnan(0.0) ? _3373 : (isnan(_3373) ? 0.0 : max(_3373, 0.0));
                                float _3376 = isnan(1.0) ? _4458 : (isnan(_4458) ? 1.0 : min(_4458, 1.0));
                                float _3377 = dot(vec3(_760, _763, _766), vec3(_3369 * _3363, _3369 * _3364, _3369 * _3365));
                                float _4469 = isnan(0.0) ? _3377 : (isnan(_3377) ? 0.0 : max(_3377, 0.0));
                                float _3380 = isnan(1.0) ? _4469 : (isnan(_4469) ? 1.0 : min(_4469, 1.0));
                                float _3384 = ((_3380 * _3380) * (_3362 + (-1.0))) + 1.0;
                                float _3385 = _3322 * _3361;
                                float _3386 = _3385 * _3385;
                                float _3392 = ((1.0 - _3386) * dot(vec3(_760, _763, _766), vec3(_3309, _3310, _3311))) + _3386;
                                float _4480 = isnan(0.0) ? _3392 : (isnan(_3392) ? 0.0 : max(_3392, 0.0));
                                float _3393 = isnan(1.0) ? _4480 : (isnan(_4480) ? 1.0 : min(_4480, 1.0));
                                float _3394 = 1.0 - _3361;
                                float _3404 = (0.5 / (((_3393 * ((_3376 * _3394) + _3361)) + 9.9999999392252902907785028219223e-09) + (((_3393 * _3394) + _3361) * _3376))) * _3393;
                                float _4491 = isnan(0.0) ? _3404 : (isnan(_3404) ? 0.0 : max(_3404, 0.0));
                                float _3414 = (_3339 * _3316) * (((_3362 * 3.1415927410125732421875) * (isnan(1.0) ? _4491 : (isnan(_4491) ? 1.0 : min(_4491, 1.0)))) / ((_3384 * _3384) * ((_3329 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3340 * _3185.y;
                                frontier_phi_83_pred_1 = _3340 * _3185.x;
                                frontier_phi_83_pred_2 = _3414 * _3197.z;
                                frontier_phi_83_pred_3 = _3414 * _3197.y;
                                frontier_phi_83_pred_4 = _3414 * _3197.x;
                                frontier_phi_83_pred_5 = _3340 * _3185.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3422 = frontier_phi_83_pred;
                            _3421 = frontier_phi_83_pred_1;
                            _3420 = frontier_phi_83_pred_2;
                            _3419 = frontier_phi_83_pred_3;
                            _3418 = frontier_phi_83_pred_4;
                            _3423 = frontier_phi_83_pred_5;
                            _3127 = _3421 + _3140;
                            _3128 = _3422 + _3141;
                            _3129 = _3423 + _3142;
                            _3124 = _3418 + _3137;
                            _3125 = _3419 + _3138;
                            _3126 = _3420 + _3139;
                            if (_3144 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3137 = _3124;
                                _3138 = _3125;
                                _3139 = _3126;
                                _3140 = _3127;
                                _3141 = _3128;
                                _3142 = _3129;
                                _3143 = _3144;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3129;
                        frontier_phi_77_pred_1 = _3128;
                        frontier_phi_77_pred_2 = _3127;
                        frontier_phi_77_pred_3 = _3126;
                        frontier_phi_77_pred_4 = _3125;
                        frontier_phi_77_pred_5 = _3124;
                    }
                    _2766 = frontier_phi_77_pred;
                    _2764 = frontier_phi_77_pred_1;
                    _2762 = frontier_phi_77_pred_2;
                    _2760 = frontier_phi_77_pred_3;
                    _2758 = frontier_phi_77_pred_4;
                    _2756 = frontier_phi_77_pred_5;
                    uint _2922 = _2921 + 1u;
                    if (_2922 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2915 = _2756;
                        _2916 = _2758;
                        _2917 = _2760;
                        _2918 = _2762;
                        _2919 = _2764;
                        _2920 = _2766;
                        _2921 = _2922;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2760;
                frontier_phi_58_59_ladder_1 = _2766;
                frontier_phi_58_59_ladder_2 = _2764;
                frontier_phi_58_59_ladder_3 = _2762;
                frontier_phi_58_59_ladder_4 = _2758;
                frontier_phi_58_59_ladder_5 = _2756;
            }
            else
            {
                frontier_phi_58_59_ladder = _2638;
                frontier_phi_58_59_ladder_1 = _2644;
                frontier_phi_58_59_ladder_2 = _2642;
                frontier_phi_58_59_ladder_3 = _2640;
                frontier_phi_58_59_ladder_4 = _2636;
                frontier_phi_58_59_ladder_5 = _2634;
            }
            _2755 = frontier_phi_58_59_ladder_5;
            _2757 = frontier_phi_58_59_ladder_4;
            _2759 = frontier_phi_58_59_ladder;
            _2761 = frontier_phi_58_59_ladder_3;
            _2763 = frontier_phi_58_59_ladder_2;
            _2765 = frontier_phi_58_59_ladder_1;
        }
        float _2770 = isnan(1.0) ? _804 : (isnan(_804) ? 1.0 : min(_804, 1.0));
        _2546 = (_2770 * _2761) + _2001;
        _2548 = (_2770 * _2763) + _2003;
        _2550 = (_2770 * _2765) + _2005;
        _2552 = ((_2755 * 0.039999999105930328369140625) * _2770) + _2331;
        _2554 = ((_2757 * 0.039999999105930328369140625) * _2770) + _2333;
        _2556 = ((_2759 * 0.039999999105930328369140625) * _2770) + _2335;
    }
    else
    {
        _2546 = _2001;
        _2548 = _2003;
        _2550 = _2005;
        _2552 = _2331;
        _2554 = _2333;
        _2556 = _2335;
    }
    float _4507 = isnan(0.0) ? _789 : (isnan(_789) ? 0.0 : max(_789, 0.0));
    float _4518 = isnan(0.0) ? _790 : (isnan(_790) ? 0.0 : max(_790, 0.0));
    float _4529 = isnan(0.0) ? _791 : (isnan(_791) ? 0.0 : max(_791, 0.0));
    float _2573 = ((isnan(1.0) ? _4507 : (isnan(_4507) ? 1.0 : min(_4507, 1.0))) * (_2546 + ((isnan(0.0) ? _1562 : (isnan(_1562) ? 0.0 : max(_1562, 0.0))) * _804))) + ((_2552 + ((isnan(0.0) ? _1854 : (isnan(_1854) ? 0.0 : max(_1854, 0.0))) * _1641)) * cbPerFrame._m0[3u].x);
    float _2574 = ((isnan(1.0) ? _4518 : (isnan(_4518) ? 1.0 : min(_4518, 1.0))) * (_2548 + ((isnan(0.0) ? _1565 : (isnan(_1565) ? 0.0 : max(_1565, 0.0))) * _804))) + ((_2554 + ((isnan(0.0) ? _1857 : (isnan(_1857) ? 0.0 : max(_1857, 0.0))) * _1641)) * cbPerFrame._m0[3u].x);
    float _2575 = ((isnan(1.0) ? _4529 : (isnan(_4529) ? 1.0 : min(_4529, 1.0))) * (_2550 + ((isnan(0.0) ? _1568 : (isnan(_1568) ? 0.0 : max(_1568, 0.0))) * _804))) + ((_2556 + ((isnan(0.0) ? _1860 : (isnan(_1860) ? 0.0 : max(_1860, 0.0))) * _1641)) * cbPerFrame._m0[3u].x);
    uint _2576 = _234 + 6u;
    float _2584 = _741 / cbSceneParam._m0[86u].x;
    float _2585 = _742 / cbSceneParam._m0[86u].y;
    vec4 _2599 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2584, _2585, (log2((isnan(cbSceneParam._m0[77u].w) ? _663 : (isnan(_663) ? cbSceneParam._m0[77u].w : min(_663, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2601 = _2599.x;
    float _2602 = _2599.y;
    float _2603 = _2599.z;
    float _2604 = _2599.w;
    float _2697;
    float _2699;
    float _2701;
    float _2703;
    if (_663 > cbSceneParam._m0[78u].w)
    {
        float _2659 = isnan(_663) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _663 : min(cbSceneParam._m0[80u].w, _663));
        float _2660 = _2659 / _663;
        float _2671 = _2660 * _714;
        float _2672 = _715 * _2660;
        float _2673 = (-0.0) - _2672;
        float _2675 = _2660 * _716;
        float _2677 = (cbSceneParam._m0[77u].w * _2673) / _2659;
        float _2678 = _2677 + cbSceneParam._m0[79u].w;
        float _2679 = cbSceneParam._m0[79u].w - _2672;
        float _2685 = sqrt(((_2671 * _2671) + (_2672 * _2672)) + (_2675 * _2675));
        float _2688 = (1.0 - (cbSceneParam._m0[77u].w / _2659)) * _2685;
        float _2693 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2695 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2872;
        if (abs((_2673 - _2677) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2872 = ((((_2678 > 0.0) ? exp2(_2693 * _2678) : (2.0 - exp2(_2695 * _2678))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2688;
        }
        else
        {
            float _2816 = 1.0 / cbSceneParam._m0[80u].x;
            float _2817 = isnan(_2679) ? _2678 : (isnan(_2678) ? _2679 : max(_2678, _2679));
            float _2818 = isnan(_2679) ? _2678 : (isnan(_2678) ? _2679 : min(_2678, _2679));
            float _2827 = isnan(0.0) ? _2817 : (isnan(_2817) ? 0.0 : min(_2817, 0.0));
            float _2828 = isnan(0.0) ? _2818 : (isnan(_2818) ? 0.0 : min(_2818, 0.0));
            _2872 = ((abs(_2685 / _2673) * cbSceneParam._m0[80u].y) * ((((_2827 - _2828) * 2.0) - ((exp2(_2693 * (isnan(0.0) ? _2817 : (isnan(_2817) ? 0.0 : max(_2817, 0.0)))) - exp2(_2693 * (isnan(0.0) ? _2818 : (isnan(_2818) ? 0.0 : max(_2818, 0.0))))) * _2816)) - ((exp2(_2695 * _2827) - exp2(_2695 * _2828)) * _2816))) + (_2688 * cbSceneParam._m0[80u].z);
        }
        vec4 _2874 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2584, _2585, 1.0), 0.0);
        float _2883 = exp2((_2872 * (-1.44269502162933349609375)) * (1.0 - _2874.w));
        float _2884 = log2(_2883);
        float _2900 = log2(_2604);
        _2697 = (exp2(_2900 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2884 * cbSceneParam._m0[78u].x)) * _2874.x) / cbSceneParam._m0[78u].x)) + _2601;
        _2699 = (exp2(_2900 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2884 * cbSceneParam._m0[78u].y)) * _2874.y) / cbSceneParam._m0[78u].y)) + _2602;
        _2701 = (exp2(_2900 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2884 * cbSceneParam._m0[78u].z)) * _2874.z) / cbSceneParam._m0[78u].z)) + _2603;
        _2703 = _2883 * _2604;
    }
    else
    {
        _2697 = _2601;
        _2699 = _2602;
        _2701 = _2603;
        _2703 = _2604;
    }
    bool _2910;
    vec4 _2713;
    vec4 _2735;
    float _2737;
    float _2741;
    float _2742;
    float _2743;
    float _2744;
    bool _2754;
    for (;;)
    {
        _2713 = cbMatDynParam._m0[0u];
        float _2715 = roundEven(_2713.y);
        bool _2716 = _2715 == 3.0;
        float _2717 = log2(_2703);
        float _2724 = exp2(_2717 * cbSceneParam._m0[78u].x) * _2573;
        float _2725 = exp2(_2717 * cbSceneParam._m0[78u].y) * _2574;
        float _2726 = exp2(_2717 * cbSceneParam._m0[78u].z) * _2575;
        float _2733 = _730 + (-0.5);
        _2735 = cbMtdParam._m0[1u];
        _2737 = _2735.y * _2733;
        float _2740 = (_2715 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2741 = _2740 * (_2716 ? _2724 : (_2724 + (cbSceneParam._m0[72u].w * _2697)));
        _2742 = _2740 * (_2716 ? _2725 : (_2725 + (cbSceneParam._m0[72u].w * _2699)));
        _2743 = _2740 * (_2716 ? _2726 : (_2726 + (cbSceneParam._m0[72u].w * _2701)));
        _2744 = _2733 * 0.999000012874603271484375;
        _2754 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2754)
        {
            if ((cbInstanceData._m0[_234 + 7u].x + _2744) < 0.5)
            {
                _2910 = true;
                break;
            }
        }
        uint _2851 = _779 + uint(_2713.w);
        if ((cbInstanceData._m0[_2851].w < 1.0) && ((cbInstanceData._m0[_2851].w + _2744) < 0.5))
        {
            _2910 = true;
            break;
        }
        if ((_2737 + 1.0) < _2735.x)
        {
            _2910 = true;
            break;
        }
        _2910 = false;
        break;
    }
    float _3115;
    if (_2910)
    {
        discard_state = true;
        _3115 = 0.0;
    }
    else
    {
        _3115 = cbInstanceData._m0[_2576].w;
    }
    SV_Target.x = _2741;
    SV_Target.y = _2742;
    SV_Target.z = _2743;
    SV_Target.w = _3115;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2576].w;
    discard_exit();
}


