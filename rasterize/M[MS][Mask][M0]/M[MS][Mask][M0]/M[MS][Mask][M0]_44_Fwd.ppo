#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_0;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 13) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_22;
layout(set = 0, binding = 14) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 20) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_6;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1277;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _215 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _216 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _217 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _223 = inversesqrt(dot(vec3(_215, _216, _217), vec3(_215, _216, _217)));
    float _224 = _223 * _215;
    float _225 = _223 * _216;
    float _226 = _223 * _217;
    float _230 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _231 = _230 * NORMAL.x;
    float _232 = _230 * NORMAL.y;
    float _233 = _230 * NORMAL.z;
    float _237 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _238 = _237 * TANGENT.x;
    float _239 = _237 * TANGENT.y;
    float _240 = _237 * TANGENT.z;
    float _251 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _253 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _254 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3581 = isnan(0.0) ? _251 : (isnan(_251) ? 0.0 : max(_251, 0.0));
    float _3592 = isnan(0.0) ? _253 : (isnan(_253) ? 0.0 : max(_253, 0.0));
    float _3603 = isnan(0.0) ? _254 : (isnan(_254) ? 0.0 : max(_254, 0.0));
    uint _264 = uint(roundEven(NORMAL.w)) * 13u;
    uint _269 = _264 + 1u;
    uint _273 = _264 + 2u;
    float _282 = sqrt(((cbInstanceData._m0[_269].x * cbInstanceData._m0[_269].x) + (cbInstanceData._m0[_264].x * cbInstanceData._m0[_264].x)) + (cbInstanceData._m0[_273].x * cbInstanceData._m0[_273].x));
    float _283 = _282 * TEXCOORD.z;
    float _284 = _282 * TEXCOORD.w;
    vec4 _297 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _283) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _284) + cbTextureTilingScale._m0[13u].w));
    vec4 _320 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _346 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _351 = _346.x * cbMtdParam._m0[11u].x;
    float _352 = _346.y * cbMtdParam._m0[11u].y;
    float _353 = _346.z * cbMtdParam._m0[11u].z;
    vec4 _372 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _283) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _284) + cbTextureTilingScale._m0[5u].w));
    vec4 _423 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _425 = _423.x;
    float _437 = dot(vec4(_425, _423.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _454 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w)).x) * 2.0) - ((((_425 - _437) * cbMtdParam._m0[24u].z) + _437) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3614 = isnan(0.0) ? _454 : (isnan(_454) ? 0.0 : max(_454, 0.0));
    float _455 = isnan(1.0) ? _3614 : (isnan(_3614) ? 1.0 : min(_3614, 1.0));
    float _465 = (_320.x * cbMtdParam._m0[9u].x) * ((_455 * ((_372.x * cbMtdParam._m0[12u].x) - _351)) + _351);
    float _466 = (_320.y * cbMtdParam._m0[9u].y) * ((_455 * ((_372.y * cbMtdParam._m0[12u].y) - _352)) + _352);
    float _467 = (_320.z * cbMtdParam._m0[9u].z) * ((_455 * ((_372.z * cbMtdParam._m0[12u].z) - _353)) + _353);
    float _471 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _297.x) * _465;
    float _474 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _297.y) * _466;
    float _477 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _297.z) * _467;
    float _485 = (((_465 - _471) * (isnan(1.0) ? _3581 : (isnan(_3581) ? 1.0 : min(_3581, 1.0)))) + _471) * 4.55000019073486328125;
    float _487 = (((_466 - _474) * (isnan(1.0) ? _3592 : (isnan(_3592) ? 1.0 : min(_3592, 1.0)))) + _474) * 4.55000019073486328125;
    float _489 = (((_467 - _477) * (isnan(1.0) ? _3603 : (isnan(_3603) ? 1.0 : min(_3603, 1.0)))) + _477) * 4.55000019073486328125;
    vec4 _508 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _283) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _284) + cbTextureTilingScale._m0[14u].w));
    vec4 _528 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _283) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _284) + cbTextureTilingScale._m0[20u].w));
    vec4 _555 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _283) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _284) + cbTextureTilingScale._m0[4u].w));
    vec4 _572 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _574 = _572.x;
    float _575 = _572.y;
    float _576 = _572.z;
    float _585 = ((_555.z - _576) * _455) + _576;
    float _588 = ((((_555.x - _574) * _455) + _574) * 2.0) + (-1.0);
    float _589 = ((((_555.y - _575) * _455) + _575) * 2.0) + (-1.0);
    float _590 = dot(vec2(_588, _589), vec2(_588, _589));
    float _3625 = isnan(0.0) ? _590 : (isnan(_590) ? 0.0 : max(_590, 0.0));
    float _595 = sqrt(1.0 - (isnan(1.0) ? _3625 : (isnan(_3625) ? 1.0 : min(_3625, 1.0))));
    vec4 _615 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _627 = (_588 + ((((_528.x * 2.0) + (-1.0)) * TEXCOORD_11.x) * cbMtdParam._m0[20u].x)) + (((_615.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _628 = (_589 + ((((_528.y * 2.0) + (-1.0)) * TEXCOORD_11.y) * cbMtdParam._m0[20u].x)) + (((_615.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _631 = fma(_595, _231, fma(_628, _238, _627 * _224));
    float _634 = fma(_595, _232, fma(_628, _239, _627 * _225));
    float _637 = fma(_595, _233, fma(_628, _240, _627 * _226));
    float _641 = inversesqrt(dot(vec3(_631, _634, _637), vec3(_631, _634, _637)));
    vec4 _668 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _283) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _284) + cbTextureTilingScale._m0[11u].w));
    float _670 = _668.x;
    float _671 = 1.0 - _670;
    float _677 = (cbMtdParam._m0[19u].x + dot(vec4(_641 * _631, _641 * _634, _641 * _637, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_670 - _671) * cbMtdParam._m0[24u].w) + _671) * cbMtdParam._m0[21u].z);
    float _3636 = isnan(0.0) ? _677 : (isnan(_677) ? 0.0 : max(_677, 0.0));
    float _678 = isnan(1.0) ? _3636 : (isnan(_3636) ? 1.0 : min(_3636, 1.0));
    float _685 = (_678 * ((_508.x * cbMtdParam._m0[18u].x) - _485)) + _485;
    float _686 = (_678 * ((_508.y * cbMtdParam._m0[18u].y) - _487)) + _487;
    float _687 = (_678 * ((_508.z * cbMtdParam._m0[18u].z) - _489)) + _489;
    float _692 = (((_528.z - _585) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _585;
    float _696 = ((_615.z - _692) * cbMtdParam._m0[19u].w) + _692;
    vec4 _709 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _283) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _284) + cbTextureTilingScale._m0[15u].w));
    float _716 = (_709.x * 2.0) + (-1.0);
    float _717 = (_709.y * 2.0) + (-1.0);
    float _718 = dot(vec2(_716, _717), vec2(_716, _717));
    float _3647 = isnan(0.0) ? _718 : (isnan(_718) ? 0.0 : max(_718, 0.0));
    float _726 = ((_709.z - _696) * _678) + _696;
    float _736 = ((sqrt(1.0 - (isnan(1.0) ? _3647 : (isnan(_3647) ? 1.0 : min(_3647, 1.0)))) - _595) * _678) + _595;
    float _739 = (((_716 - _627) * _678) + _627) + (cbMtdParam._m0[21u].x * _627);
    float _740 = (((_717 - _628) * _678) + _628) + (cbMtdParam._m0[21u].x * _628);
    float _742 = cbMtdParam._m0[22u].x + _615.w;
    float _745 = fma(_736, _231, fma(_740, _238, _739 * _224));
    float _748 = fma(_736, _232, fma(_740, _239, _739 * _225));
    float _751 = fma(_736, _233, fma(_740, _240, _739 * _226));
    float _755 = inversesqrt(dot(vec3(_745, _748, _751), vec3(_745, _748, _751)));
    float _756 = _755 * _745;
    float _757 = _755 * _748;
    float _758 = _755 * _751;
    float _3658 = isnan(0.0) ? _726 : (isnan(_726) ? 0.0 : max(_726, 0.0));
    float _759 = isnan(1.0) ? _3658 : (isnan(_3658) ? 1.0 : min(_3658, 1.0));
    float _3669 = isnan(0.0) ? _742 : (isnan(_742) ? 0.0 : max(_742, 0.0));
    float _3680 = isnan(0.0) ? _685 : (isnan(_685) ? 0.0 : max(_685, 0.0));
    float _3691 = isnan(0.0) ? _686 : (isnan(_686) ? 0.0 : max(_686, 0.0));
    float _3702 = isnan(0.0) ? _687 : (isnan(_687) ? 0.0 : max(_687, 0.0));
    float _777 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _818 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _828 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _818);
    float _829 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _818);
    float _830 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _818);
    float _834 = inversesqrt(dot(vec3(_828, _829, _830), vec3(_828, _829, _830)));
    float _835 = _828 * _834;
    float _836 = _829 * _834;
    float _837 = _830 * _834;
    float _843 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _844 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _862 = fma(_758, cbSceneParam._m0[5u].z, fma(_757, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _756));
    float _865 = fma(_758, cbSceneParam._m0[6u].z, fma(_757, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _756));
    float _868 = fma(_758, cbSceneParam._m0[7u].z, fma(_757, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _756));
    uint _882 = (_264 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _888 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3680 : (isnan(_3680) ? 1.0 : min(_3680, 1.0)))) * cbInstanceData._m0[_882].x;
    float _889 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3691 : (isnan(_3691) ? 1.0 : min(_3691, 1.0)))) * cbInstanceData._m0[_882].y;
    float _890 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3702 : (isnan(_3702) ? 1.0 : min(_3702, 1.0)))) * cbInstanceData._m0[_882].z;
    float _3713 = isnan(0.0) ? _888 : (isnan(_888) ? 0.0 : max(_888, 0.0));
    float _891 = isnan(1.0) ? _3713 : (isnan(_3713) ? 1.0 : min(_3713, 1.0));
    float _3724 = isnan(0.0) ? _889 : (isnan(_889) ? 0.0 : max(_889, 0.0));
    float _892 = isnan(1.0) ? _3724 : (isnan(_3724) ? 1.0 : min(_3724, 1.0));
    float _3735 = isnan(0.0) ? _890 : (isnan(_890) ? 0.0 : max(_890, 0.0));
    float _893 = isnan(1.0) ? _3735 : (isnan(_3735) ? 1.0 : min(_3735, 1.0));
    vec4 _902 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _843, cbSceneParam._m0[86u].y * _844));
    float _906 = ((isnan(1.0) ? _3669 : (isnan(_3669) ? 1.0 : min(_3669, 1.0))) * TEXCOORD_5.w) * _902.x;
    float _907 = dot(vec3(_756, _757, _758), vec3(_835, _836, _837));
    float _910 = _907 * 2.0;
    float _914 = (_910 * _756) - _835;
    float _915 = (_910 * _757) - _836;
    float _916 = (_910 * _758) - _837;
    float _920 = abs(dot(vec3(_835, _836, _837), vec3(_756, _757, _758)));
    float _3746 = isnan(0.0) ? _920 : (isnan(_920) ? 0.0 : max(_920, 0.0));
    float _922 = sqrt(_759);
    float _935 = exp2((_922 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3746 : (isnan(_3746) ? 1.0 : min(_3746, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_922 * 3.0));
    float _967 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _971 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _975 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1276;
    float _1278;
    float _1279;
    float _1280;
    float _1281;
    float _1282;
    float _1283;
    float _1284;
    float _1285;
    float _1286;
    float _1287;
    float _1288;
    float _1289;
    float _1290;
    float _1291;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1001 = fma(_975, cbModelParam._m0[26u].z, fma(_971, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _967));
        float _1005 = fma(_975, cbModelParam._m0[27u].z, fma(_971, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _967));
        float _1009 = fma(_975, cbModelParam._m0[28u].z, fma(_971, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _967));
        float _1034 = _967 + _756;
        float _1035 = _971 + _757;
        float _1036 = _975 + _758;
        float _1046 = fma(_1036, cbModelParam._m0[26u].z, fma(_1035, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1034)) - _1001;
        float _1047 = fma(_1036, cbModelParam._m0[27u].z, fma(_1035, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1034)) - _1005;
        float _1048 = fma(_1036, cbModelParam._m0[28u].z, fma(_1035, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1034)) - _1009;
        float _1052 = inversesqrt(dot(vec3(_1046, _1047, _1048), vec3(_1046, _1047, _1048)));
        float _1065 = ((_1052 * _1046) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1001 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1066 = ((_1052 * _1047) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1005 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1067 = ((_1052 * _1048) / cbModelParam._m0[34u].z) + ((((((_1009 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1070 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1065, _1066, _1067), 0.0);
        vec4 _1077 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1065, _1066, _1067), 0.0);
        vec4 _1084 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1065, _1066, _1067), 0.0);
        vec4 _1091 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1065, _1066, _1067), 0.0);
        float _1104 = exp2((_1070.w + (-0.5)) * 20.0) * 2.0;
        float _1105 = _1104 * (_1070.x + (-0.5));
        float _1106 = _1104 * (_1070.y + (-0.5));
        float _1107 = _1104 * (_1070.z + (-0.5));
        float _1114 = exp2((_1077.w + (-0.5)) * 20.0) * 2.0;
        float _1115 = _1114 * (_1077.x + (-0.5));
        float _1116 = _1114 * (_1077.y + (-0.5));
        float _1117 = _1114 * (_1077.z + (-0.5));
        float _1124 = exp2((_1084.w + (-0.5)) * 20.0) * 2.0;
        float _1125 = _1124 * (_1084.x + (-0.5));
        float _1126 = _1124 * (_1084.y + (-0.5));
        float _1127 = _1124 * (_1084.z + (-0.5));
        float _1134 = exp2((_1091.w + (-0.5)) * 20.0) * 2.0;
        float _1135 = _1134 * (_1091.x + (-0.5));
        float _1136 = _1134 * (_1091.y + (-0.5));
        float _1137 = _1134 * (_1091.z + (-0.5));
        float _1138 = isnan(0.0) ? _1135 : (isnan(_1135) ? 0.0 : max(_1135, 0.0));
        float _1139 = isnan(0.0) ? _1136 : (isnan(_1136) ? 0.0 : max(_1136, 0.0));
        float _1140 = isnan(0.0) ? _1137 : (isnan(_1137) ? 0.0 : max(_1137, 0.0));
        float _1141 = _1105 * 0.5;
        float _1142 = _1115 * 0.5;
        float _1143 = _1125 * 0.5;
        float _1144 = dot(vec3(_1141, _1142, _1143), vec3(_1141, _1142, _1143));
        float _1149 = (_1144 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1144);
        float _1158 = (dot(vec3(_756, _757, _758), vec3(_1149 * _1141, _1149 * _1142, _1149 * _1143)) + 1.0) * 0.5;
        float _3772 = isnan(0.0) ? _1158 : (isnan(_1158) ? 0.0 : max(_1158, 0.0));
        float _1168 = sqrt(((_1142 * _1142) + (_1141 * _1141)) + (_1143 * _1143)) / (_1138 + 9.9999997473787516355514526367188e-06);
        float _3783 = isnan(0.0) ? _1168 : (isnan(_1168) ? 0.0 : max(_1168, 0.0));
        float _1169 = isnan(1.0) ? _3783 : (isnan(_3783) ? 1.0 : min(_3783, 1.0));
        float _1170 = _1169 * 2.0;
        float _1174 = (1.0 - _1169) / (_1169 + 1.0);
        float _3794 = isnan(0.0) ? _1174 : (isnan(_1174) ? 0.0 : max(_1174, 0.0));
        float _1175 = isnan(1.0) ? _3794 : (isnan(_3794) ? 1.0 : min(_3794, 1.0));
        float _1184 = ((((1.0 - _1175) * (_1170 + 2.0)) * exp2(log2(isnan(1.0) ? _3772 : (isnan(_3772) ? 1.0 : min(_3772, 1.0))) * (_1170 + 1.0))) + _1175) * _1138;
        float _1185 = _1106 * 0.5;
        float _1186 = _1116 * 0.5;
        float _1187 = _1126 * 0.5;
        float _1188 = dot(vec3(_1185, _1186, _1187), vec3(_1185, _1186, _1187));
        float _1193 = (_1188 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1188);
        float _1201 = (dot(vec3(_756, _757, _758), vec3(_1193 * _1185, _1193 * _1186, _1193 * _1187)) + 1.0) * 0.5;
        float _3805 = isnan(0.0) ? _1201 : (isnan(_1201) ? 0.0 : max(_1201, 0.0));
        float _1210 = sqrt(((_1186 * _1186) + (_1185 * _1185)) + (_1187 * _1187)) / (_1139 + 9.9999997473787516355514526367188e-06);
        float _3816 = isnan(0.0) ? _1210 : (isnan(_1210) ? 0.0 : max(_1210, 0.0));
        float _1211 = isnan(1.0) ? _3816 : (isnan(_3816) ? 1.0 : min(_3816, 1.0));
        float _1212 = _1211 * 2.0;
        float _1216 = (1.0 - _1211) / (_1211 + 1.0);
        float _3827 = isnan(0.0) ? _1216 : (isnan(_1216) ? 0.0 : max(_1216, 0.0));
        float _1217 = isnan(1.0) ? _3827 : (isnan(_3827) ? 1.0 : min(_3827, 1.0));
        float _1226 = ((((1.0 - _1217) * (_1212 + 2.0)) * exp2(log2(isnan(1.0) ? _3805 : (isnan(_3805) ? 1.0 : min(_3805, 1.0))) * (_1212 + 1.0))) + _1217) * _1139;
        float _1227 = _1107 * 0.5;
        float _1228 = _1117 * 0.5;
        float _1229 = _1127 * 0.5;
        float _1230 = dot(vec3(_1227, _1228, _1229), vec3(_1227, _1228, _1229));
        float _1235 = (_1230 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1230);
        float _1243 = (dot(vec3(_756, _757, _758), vec3(_1235 * _1227, _1235 * _1228, _1235 * _1229)) + 1.0) * 0.5;
        float _3838 = isnan(0.0) ? _1243 : (isnan(_1243) ? 0.0 : max(_1243, 0.0));
        float _1252 = sqrt(((_1228 * _1228) + (_1227 * _1227)) + (_1229 * _1229)) / (_1140 + 9.9999997473787516355514526367188e-06);
        float _3849 = isnan(0.0) ? _1252 : (isnan(_1252) ? 0.0 : max(_1252, 0.0));
        float _1253 = isnan(1.0) ? _3849 : (isnan(_3849) ? 1.0 : min(_3849, 1.0));
        float _1254 = _1253 * 2.0;
        float _1258 = (1.0 - _1253) / (_1253 + 1.0);
        float _3860 = isnan(0.0) ? _1258 : (isnan(_1258) ? 0.0 : max(_1258, 0.0));
        float _1259 = isnan(1.0) ? _3860 : (isnan(_3860) ? 1.0 : min(_3860, 1.0));
        float _1268 = ((((1.0 - _1259) * (_1254 + 2.0)) * exp2(log2(isnan(1.0) ? _3838 : (isnan(_3838) ? 1.0 : min(_3838, 1.0))) * (_1254 + 1.0))) + _1259) * _1140;
        _1276 = _1107;
        _1278 = _1106;
        _1279 = _1105;
        _1280 = _1117;
        _1281 = _1116;
        _1282 = _1115;
        _1283 = _1127;
        _1284 = _1126;
        _1285 = _1125;
        _1286 = _1140;
        _1287 = _1139;
        _1288 = _1138;
        _1289 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1184 : (isnan(_1184) ? 0.0 : max(_1184, 0.0)));
        _1290 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1226 : (isnan(_1226) ? 0.0 : max(_1226, 0.0)));
        _1291 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1268 : (isnan(_1268) ? 0.0 : max(_1268, 0.0)));
    }
    else
    {
        _1276 = _1277;
        _1278 = _1277;
        _1279 = _1277;
        _1280 = _1277;
        _1281 = _1277;
        _1282 = _1277;
        _1283 = _1277;
        _1284 = _1277;
        _1285 = _1277;
        _1286 = _1277;
        _1287 = _1277;
        _1288 = _1277;
        _1289 = 0.0;
        _1290 = 0.0;
        _1291 = 0.0;
    }
    float _1585;
    float _1586;
    float _1587;
    float _1588;
    float _1589;
    float _1590;
    float _1591;
    float _1592;
    float _1593;
    float _1594;
    float _1595;
    float _1596;
    float _1597;
    float _1598;
    float _1599;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1316 = fma(_975, cbModelParam._m0[30u].z, fma(_971, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _967));
        float _1320 = fma(_975, cbModelParam._m0[31u].z, fma(_971, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _967));
        float _1324 = fma(_975, cbModelParam._m0[32u].z, fma(_971, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _967));
        float _1347 = _967 + _756;
        float _1348 = _971 + _757;
        float _1349 = _975 + _758;
        float _1359 = fma(_1349, cbModelParam._m0[30u].z, fma(_1348, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1347)) - _1316;
        float _1360 = fma(_1349, cbModelParam._m0[31u].z, fma(_1348, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1347)) - _1320;
        float _1361 = fma(_1349, cbModelParam._m0[32u].z, fma(_1348, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1347)) - _1324;
        float _1365 = inversesqrt(dot(vec3(_1359, _1360, _1361), vec3(_1359, _1360, _1361)));
        float _1378 = ((_1365 * _1359) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1316 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1379 = ((_1365 * _1360) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1320 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1380 = ((_1365 * _1361) / cbModelParam._m0[35u].z) + ((((((_1324 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1382 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1378, _1379, _1380), 0.0);
        vec4 _1389 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1378, _1379, _1380), 0.0);
        vec4 _1396 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1378, _1379, _1380), 0.0);
        vec4 _1403 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1378, _1379, _1380), 0.0);
        float _1415 = exp2((_1382.w + (-0.5)) * 20.0) * 2.0;
        float _1416 = _1415 * (_1382.x + (-0.5));
        float _1417 = _1415 * (_1382.y + (-0.5));
        float _1418 = _1415 * (_1382.z + (-0.5));
        float _1425 = exp2((_1389.w + (-0.5)) * 20.0) * 2.0;
        float _1426 = _1425 * (_1389.x + (-0.5));
        float _1427 = _1425 * (_1389.y + (-0.5));
        float _1428 = _1425 * (_1389.z + (-0.5));
        float _1435 = exp2((_1396.w + (-0.5)) * 20.0) * 2.0;
        float _1436 = _1435 * (_1396.x + (-0.5));
        float _1437 = _1435 * (_1396.y + (-0.5));
        float _1438 = _1435 * (_1396.z + (-0.5));
        float _1445 = exp2((_1403.w + (-0.5)) * 20.0) * 2.0;
        float _1446 = _1445 * (_1403.x + (-0.5));
        float _1447 = _1445 * (_1403.y + (-0.5));
        float _1448 = _1445 * (_1403.z + (-0.5));
        float _1449 = isnan(0.0) ? _1446 : (isnan(_1446) ? 0.0 : max(_1446, 0.0));
        float _1450 = isnan(0.0) ? _1447 : (isnan(_1447) ? 0.0 : max(_1447, 0.0));
        float _1451 = isnan(0.0) ? _1448 : (isnan(_1448) ? 0.0 : max(_1448, 0.0));
        float _1452 = _1416 * 0.5;
        float _1453 = _1426 * 0.5;
        float _1454 = _1436 * 0.5;
        float _1455 = dot(vec3(_1452, _1453, _1454), vec3(_1452, _1453, _1454));
        float _1460 = (_1455 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1455);
        float _1468 = (dot(vec3(_756, _757, _758), vec3(_1460 * _1452, _1460 * _1453, _1460 * _1454)) + 1.0) * 0.5;
        float _3901 = isnan(0.0) ? _1468 : (isnan(_1468) ? 0.0 : max(_1468, 0.0));
        float _1477 = sqrt(((_1453 * _1453) + (_1452 * _1452)) + (_1454 * _1454)) / (_1449 + 9.9999997473787516355514526367188e-06);
        float _3912 = isnan(0.0) ? _1477 : (isnan(_1477) ? 0.0 : max(_1477, 0.0));
        float _1478 = isnan(1.0) ? _3912 : (isnan(_3912) ? 1.0 : min(_3912, 1.0));
        float _1479 = _1478 * 2.0;
        float _1483 = (1.0 - _1478) / (_1478 + 1.0);
        float _3923 = isnan(0.0) ? _1483 : (isnan(_1483) ? 0.0 : max(_1483, 0.0));
        float _1484 = isnan(1.0) ? _3923 : (isnan(_3923) ? 1.0 : min(_3923, 1.0));
        float _1493 = ((((1.0 - _1484) * (_1479 + 2.0)) * exp2(log2(isnan(1.0) ? _3901 : (isnan(_3901) ? 1.0 : min(_3901, 1.0))) * (_1479 + 1.0))) + _1484) * _1449;
        float _1494 = _1417 * 0.5;
        float _1495 = _1427 * 0.5;
        float _1496 = _1437 * 0.5;
        float _1497 = dot(vec3(_1494, _1495, _1496), vec3(_1494, _1495, _1496));
        float _1502 = (_1497 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1497);
        float _1510 = (dot(vec3(_756, _757, _758), vec3(_1502 * _1494, _1502 * _1495, _1502 * _1496)) + 1.0) * 0.5;
        float _3934 = isnan(0.0) ? _1510 : (isnan(_1510) ? 0.0 : max(_1510, 0.0));
        float _1519 = sqrt(((_1495 * _1495) + (_1494 * _1494)) + (_1496 * _1496)) / (_1450 + 9.9999997473787516355514526367188e-06);
        float _3945 = isnan(0.0) ? _1519 : (isnan(_1519) ? 0.0 : max(_1519, 0.0));
        float _1520 = isnan(1.0) ? _3945 : (isnan(_3945) ? 1.0 : min(_3945, 1.0));
        float _1521 = _1520 * 2.0;
        float _1525 = (1.0 - _1520) / (_1520 + 1.0);
        float _3956 = isnan(0.0) ? _1525 : (isnan(_1525) ? 0.0 : max(_1525, 0.0));
        float _1526 = isnan(1.0) ? _3956 : (isnan(_3956) ? 1.0 : min(_3956, 1.0));
        float _1535 = ((((1.0 - _1526) * (_1521 + 2.0)) * exp2(log2(isnan(1.0) ? _3934 : (isnan(_3934) ? 1.0 : min(_3934, 1.0))) * (_1521 + 1.0))) + _1526) * _1450;
        float _1536 = _1418 * 0.5;
        float _1537 = _1428 * 0.5;
        float _1538 = _1438 * 0.5;
        float _1539 = dot(vec3(_1536, _1537, _1538), vec3(_1536, _1537, _1538));
        float _1544 = (_1539 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1539);
        float _1552 = (dot(vec3(_756, _757, _758), vec3(_1544 * _1536, _1544 * _1537, _1544 * _1538)) + 1.0) * 0.5;
        float _3967 = isnan(0.0) ? _1552 : (isnan(_1552) ? 0.0 : max(_1552, 0.0));
        float _1561 = sqrt(((_1537 * _1537) + (_1536 * _1536)) + (_1538 * _1538)) / (_1451 + 9.9999997473787516355514526367188e-06);
        float _3978 = isnan(0.0) ? _1561 : (isnan(_1561) ? 0.0 : max(_1561, 0.0));
        float _1562 = isnan(1.0) ? _3978 : (isnan(_3978) ? 1.0 : min(_3978, 1.0));
        float _1563 = _1562 * 2.0;
        float _1567 = (1.0 - _1562) / (_1562 + 1.0);
        float _3989 = isnan(0.0) ? _1567 : (isnan(_1567) ? 0.0 : max(_1567, 0.0));
        float _1568 = isnan(1.0) ? _3989 : (isnan(_3989) ? 1.0 : min(_3989, 1.0));
        float _1577 = ((((1.0 - _1568) * (_1563 + 2.0)) * exp2(log2(isnan(1.0) ? _3967 : (isnan(_3967) ? 1.0 : min(_3967, 1.0))) * (_1563 + 1.0))) + _1568) * _1451;
        _1585 = _1418;
        _1586 = _1417;
        _1587 = _1416;
        _1588 = _1428;
        _1589 = _1427;
        _1590 = _1426;
        _1591 = _1438;
        _1592 = _1437;
        _1593 = _1436;
        _1594 = _1451;
        _1595 = _1450;
        _1596 = _1449;
        _1597 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1493 : (isnan(_1493) ? 0.0 : max(_1493, 0.0)));
        _1598 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1535 : (isnan(_1535) ? 0.0 : max(_1535, 0.0)));
        _1599 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1577 : (isnan(_1577) ? 0.0 : max(_1577, 0.0)));
    }
    else
    {
        _1585 = _1277;
        _1586 = _1277;
        _1587 = _1277;
        _1588 = _1277;
        _1589 = _1277;
        _1590 = _1277;
        _1591 = _1277;
        _1592 = _1277;
        _1593 = _1277;
        _1594 = _1277;
        _1595 = _1277;
        _1596 = _1277;
        _1597 = 0.0;
        _1598 = 0.0;
        _1599 = 0.0;
    }
    float _1609 = (cbModelParam._m0[1u].x * (_1597 - _1289)) + _1289;
    float _1610 = (cbModelParam._m0[1u].x * (_1598 - _1290)) + _1290;
    float _1611 = (cbModelParam._m0[1u].x * (_1599 - _1291)) + _1291;
    float _1632 = fma(_1611, cbSceneParam._m0[89u].z, fma(_1610, cbSceneParam._m0[89u].y, _1609 * cbSceneParam._m0[89u].x));
    float _1635 = fma(_1611, cbSceneParam._m0[90u].z, fma(_1610, cbSceneParam._m0[90u].y, _1609 * cbSceneParam._m0[90u].x));
    float _1638 = fma(_1611, cbSceneParam._m0[91u].z, fma(_1610, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1609));
    float _1653 = _914 * 0.5;
    float _1654 = _915 * 0.5;
    float _1655 = _916 * 0.5;
    float _1656 = dot(vec4(_1653, _1654, _1655, 1.0), vec4(_1587, _1590, _1593, _1596));
    float _1659 = dot(vec4(_1653, _1654, _1655, 1.0), vec4(_1586, _1589, _1592, _1595));
    float _1662 = dot(vec4(_1653, _1654, _1655, 1.0), vec4(_1585, _1588, _1591, _1594));
    float _1696;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1669 = dot(vec4(_1653, _1654, _1655, 1.0), vec4(_1276, _1280, _1283, _1286));
        float _1673 = dot(vec4(_1653, _1654, _1655, 1.0), vec4(_1278, _1281, _1284, _1287));
        float _1677 = dot(vec4(_1653, _1654, _1655, 1.0), vec4(_1279, _1282, _1285, _1288));
        float _1684 = dot(vec4(cbModelParam._m0[39u]), vec4(_1653, _1654, _1655, 1.0));
        _1696 = dot(vec3(isnan(0.0) ? _1677 : (isnan(_1677) ? 0.0 : max(_1677, 0.0)), isnan(0.0) ? _1673 : (isnan(_1673) ? 0.0 : max(_1673, 0.0)), isnan(0.0) ? _1669 : (isnan(_1669) ? 0.0 : max(_1669, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1684) ? 0.0 : (isnan(0.0) ? _1684 : max(0.0, _1684))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1696 = 1.0;
    }
    float _1707;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1698 = dot(vec4(cbModelParam._m0[40u]), vec4(_1653, _1654, _1655, 1.0));
        _1707 = dot(vec3(isnan(0.0) ? _1656 : (isnan(_1656) ? 0.0 : max(_1656, 0.0)), isnan(0.0) ? _1659 : (isnan(_1659) ? 0.0 : max(_1659, 0.0)), isnan(0.0) ? _1662 : (isnan(_1662) ? 0.0 : max(_1662, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1698) ? 0.0 : (isnan(0.0) ? _1698 : max(0.0, _1698))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1707 = 1.0;
    }
    float _1711 = (_1707 * cbModelParam._m0[1u].x) + (_1696 * (1.0 - cbModelParam._m0[1u].x));
    float _1721 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _759);
    float _1722 = isnan(_1721) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1721 : min(cbModelParam._m0[25u].z, _1721));
    float _1802;
    float _1804;
    float _1806;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1769 = fma(_975, cbModelParam._m0[13u].z, fma(_971, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _967)) + cbModelParam._m0[13u].w;
        float _1773 = fma(_975, cbModelParam._m0[14u].z, fma(_971, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _967)) + cbModelParam._m0[14u].w;
        float _1777 = fma(_975, cbModelParam._m0[15u].z, fma(_971, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _967)) + cbModelParam._m0[15u].w;
        float _1780 = fma(_916, cbModelParam._m0[13u].z, fma(_915, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _914));
        float _1783 = fma(_916, cbModelParam._m0[14u].z, fma(_915, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _914));
        float _1786 = fma(_916, cbModelParam._m0[15u].z, fma(_915, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _914));
        float _1814;
        if (_1780 > 0.0)
        {
            _1814 = abs((1.0 - _1769) / _1780);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1780 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1769 + 1.0) / _1780);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1814 = frontier_phi_14_12_ladder;
        }
        float _2014;
        if (_1783 > 0.0)
        {
            _2014 = abs((1.0 - _1773) / _1783);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1783 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1773 + 1.0) / _1783);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2014 = frontier_phi_23_19_ladder;
        }
        float _2257;
        if (_1786 > 0.0)
        {
            _2257 = abs((1.0 - _1777) / _1786);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1786 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1777 + 1.0) / _1786);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2257 = frontier_phi_35_30_ladder;
        }
        float _2259 = isnan(_2014) ? _1814 : (isnan(_1814) ? _2014 : min(_1814, _2014));
        float _2260 = isnan(_2257) ? _2259 : (isnan(_2259) ? _2257 : min(_2259, _2257));
        float _2264 = (_2260 * _1780) + _1769;
        float _2265 = (_2260 * _1783) + _1773;
        float _2266 = (_2260 * _1786) + _1777;
        float _2267 = _2260 * 9.9999997473787516355514526367188e-05;
        float _2269 = (-1.0) - _2267;
        float _2271 = _2267 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2266 > _2271) || ((_2266 < _2269) || ((_2265 > _2271) || ((_2265 < _2269) || ((_2264 < _2269) || (_2264 > _2271))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2390 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2266, cbModelParam._m0[9u].z, fma(_2265, cbModelParam._m0[9u].y, _2264 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2266, cbModelParam._m0[10u].z, fma(_2265, cbModelParam._m0[10u].y, _2264 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2266, cbModelParam._m0[11u].z, fma(_2265, cbModelParam._m0[11u].y, _2264 * cbModelParam._m0[11u].x))), _1722);
            frontier_phi_13_35_ladder = _2390.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2390.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2390.x * cbModelParam._m0[1u].y;
        }
        _1802 = frontier_phi_13_35_ladder_2;
        _1804 = frontier_phi_13_35_ladder_1;
        _1806 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1790 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_914, _915, _916), _1722);
        _1802 = _1790.x * cbModelParam._m0[1u].y;
        _1804 = _1790.y * cbModelParam._m0[1u].y;
        _1806 = _1790.z * cbModelParam._m0[1u].y;
    }
    float _1810 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _759);
    float _1811 = isnan(_1810) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1810 : min(cbModelParam._m0[25u].w, _1810));
    float _1900;
    float _1902;
    float _1904;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1864 = fma(_975, cbModelParam._m0[21u].z, fma(_971, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _967)) + cbModelParam._m0[21u].w;
        float _1868 = fma(_975, cbModelParam._m0[22u].z, fma(_971, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _967)) + cbModelParam._m0[22u].w;
        float _1872 = fma(_975, cbModelParam._m0[23u].z, fma(_971, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _967)) + cbModelParam._m0[23u].w;
        float _1875 = fma(_916, cbModelParam._m0[21u].z, fma(_915, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _914));
        float _1878 = fma(_916, cbModelParam._m0[22u].z, fma(_915, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _914));
        float _1881 = fma(_916, cbModelParam._m0[23u].z, fma(_915, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _914));
        float _2019;
        if (_1875 > 0.0)
        {
            _2019 = abs((1.0 - _1864) / _1875);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1875 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1864 + 1.0) / _1875);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2019 = frontier_phi_25_21_ladder;
        }
        float _2284;
        if (_1878 > 0.0)
        {
            _2284 = abs((1.0 - _1868) / _1878);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1878 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1868 + 1.0) / _1878);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2284 = frontier_phi_37_32_ladder;
        }
        float _2489;
        if (_1881 > 0.0)
        {
            _2489 = abs((1.0 - _1872) / _1881);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1881 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1872 + 1.0) / _1881);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2489 = frontier_phi_46_43_ladder;
        }
        float _2491 = isnan(_2284) ? _2019 : (isnan(_2019) ? _2284 : min(_2019, _2284));
        float _2492 = isnan(_2489) ? _2491 : (isnan(_2491) ? _2489 : min(_2491, _2489));
        float _2496 = (_2492 * _1875) + _1864;
        float _2497 = (_2492 * _1878) + _1868;
        float _2498 = (_2492 * _1881) + _1872;
        float _2499 = _2492 * 9.9999997473787516355514526367188e-05;
        float _2500 = (-1.0) - _2499;
        float _2502 = _2499 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2498 > _2502) || ((_2498 < _2500) || ((_2497 > _2502) || ((_2497 < _2500) || ((_2496 < _2500) || (_2496 > _2502))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2697 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2498, cbModelParam._m0[17u].z, fma(_2497, cbModelParam._m0[17u].y, _2496 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2498, cbModelParam._m0[18u].z, fma(_2497, cbModelParam._m0[18u].y, _2496 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2498, cbModelParam._m0[19u].z, fma(_2497, cbModelParam._m0[19u].y, _2496 * cbModelParam._m0[19u].x))), _1811);
            frontier_phi_22_46_ladder = _2697.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2697.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2697.x * cbModelParam._m0[1u].z;
        }
        _1900 = frontier_phi_22_46_ladder_2;
        _1902 = frontier_phi_22_46_ladder_1;
        _1904 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1884 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_914, _915, _916), _1811);
        _1900 = _1884.x * cbModelParam._m0[1u].z;
        _1902 = _1884.y * cbModelParam._m0[1u].z;
        _1904 = _1884.z * cbModelParam._m0[1u].z;
    }
    float _1916 = ((((1.0 - _935) * ((_922 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_935 * _922)) * _906;
    float _1917 = _1916 * ((cbModelParam._m0[1u].w * (_1900 - _1802)) + _1802);
    float _1918 = _1916 * ((cbModelParam._m0[1u].w * (_1902 - _1804)) + _1804);
    float _1919 = _1916 * ((cbModelParam._m0[1u].w * (_1904 - _1806)) + _1806);
    float _1922 = fma(_1919, cbSceneParam._m0[89u].z, fma(_1918, cbSceneParam._m0[89u].y, _1917 * cbSceneParam._m0[89u].x));
    float _1925 = fma(_1919, cbSceneParam._m0[90u].z, fma(_1918, cbSceneParam._m0[90u].y, _1917 * cbSceneParam._m0[90u].x));
    float _1928 = fma(_1919, cbSceneParam._m0[91u].z, fma(_1918, cbSceneParam._m0[91u].y, _1917 * cbSceneParam._m0[91u].x));
    uvec4 _1938 = floatBitsToUint(cbInstanceData._m0[_264 + 5u]);
    uint _1940 = _1938.x * 14u;
    uint _1941 = _1940 + 13u;
    float _1948 = _906 + (-1.0);
    float _1953 = (cbLight._m0[_1941].x * _1948) + 1.0;
    float _1954 = (cbLight._m0[_1941].y * _1948) + 1.0;
    float _1955 = (cbLight._m0[_1941].z * _1948) + 1.0;
    float _1956 = (cbLight._m0[_1941].w * _1948) + 1.0;
    uint _1957 = _1940 + 5u;
    float _1963 = isnan(1.0) ? _1954 : (isnan(_1954) ? 1.0 : min(_1954, 1.0));
    uint _1967 = _1940 + 4u;
    float _1973 = isnan(1.0) ? _1953 : (isnan(_1953) ? 1.0 : min(_1953, 1.0));
    uint _1977 = _1940 | 1u;
    float _1988 = dot(vec3(cbLight._m0[_1940].xyz), vec3(_756, _757, _758));
    float _1991 = dot(vec3(cbLight._m0[_1977].xyz), vec3(_756, _757, _758));
    float _4125 = isnan(0.0) ? _1988 : (isnan(_1988) ? 0.0 : max(_1988, 0.0));
    float _4136 = isnan(0.0) ? _1991 : (isnan(_1991) ? 0.0 : max(_1991, 0.0));
    float _1996 = (isnan(1.0) ? _4125 : (isnan(_4125) ? 1.0 : min(_4125, 1.0))) * 0.3183098733425140380859375;
    float _1998 = (isnan(1.0) ? _4136 : (isnan(_4136) ? 1.0 : min(_4136, 1.0))) * 0.3183098733425140380859375;
    float _2005 = ((cbLight._m0[_1957].x * _1963) * _1998) + ((cbLight._m0[_1967].x * _1973) * _1996);
    float _2006 = ((_1963 * cbLight._m0[_1957].y) * _1998) + ((_1973 * cbLight._m0[_1967].y) * _1996);
    float _2007 = ((_1963 * cbLight._m0[_1957].z) * _1998) + ((_1973 * cbLight._m0[_1967].z) * _1996);
    uvec4 _2011 = floatBitsToUint(cbLight._m0[_1940 + 12u]);
    bool _2013 = _2011.x == 0u;
    float _2024;
    float _2026;
    float _2028;
    if (_2013)
    {
        _2024 = _2005;
        _2026 = _2006;
        _2028 = _2007;
    }
    else
    {
        uint _2032 = _1940 + 6u;
        float _2048 = (dot(vec3(cbLight._m0[_1940 + 2u].xyz), vec3(_756, _757, _758)) * 0.5) + 0.5;
        float _2049 = _2048 * _2048;
        float _4147 = isnan(0.0) ? _2049 : (isnan(_2049) ? 0.0 : max(_2049, 0.0));
        float _2050 = isnan(1.0) ? _4147 : (isnan(_4147) ? 1.0 : min(_4147, 1.0));
        float _2051 = isnan(1.0) ? _1955 : (isnan(_1955) ? 1.0 : min(_1955, 1.0));
        _2024 = (((cbLight._m0[_2032].x * 0.3183098733425140380859375) * _2050) * _2051) + _2005;
        _2026 = (((cbLight._m0[_2032].y * 0.3183098733425140380859375) * _2050) * _2051) + _2006;
        _2028 = (((cbLight._m0[_2032].z * 0.3183098733425140380859375) * _2050) * _2051) + _2007;
    }
    bool _2031 = _2011.y == 0u;
    float _2069;
    float _2071;
    float _2073;
    if (_2031)
    {
        _2069 = _2024;
        _2071 = _2026;
        _2073 = _2028;
    }
    else
    {
        uint _2228 = _1940 + 7u;
        float _2244 = (dot(vec3(cbLight._m0[_1940 + 3u].xyz), vec3(_756, _757, _758)) * 0.5) + 0.5;
        float _2245 = _2244 * _2244;
        float _4163 = isnan(0.0) ? _2245 : (isnan(_2245) ? 0.0 : max(_2245, 0.0));
        float _2246 = isnan(1.0) ? _4163 : (isnan(_4163) ? 1.0 : min(_4163, 1.0));
        float _2247 = isnan(1.0) ? _1956 : (isnan(_1956) ? 1.0 : min(_1956, 1.0));
        _2069 = (((cbLight._m0[_2228].x * 0.3183098733425140380859375) * _2246) * _2247) + _2024;
        _2071 = (((cbLight._m0[_2228].y * 0.3183098733425140380859375) * _2246) * _2247) + _2026;
        _2073 = (((cbLight._m0[_2228].z * 0.3183098733425140380859375) * _2246) * _2247) + _2028;
    }
    uint _2076 = _1940 + 8u;
    float _2089 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1940].w)) * _759) * 0.949999988079071044921875);
    float _2090 = _2089 * _2089;
    float _2091 = cbLight._m0[_1940].x + _835;
    float _2092 = cbLight._m0[_1940].y + _836;
    float _2093 = cbLight._m0[_1940].z + _837;
    float _2097 = inversesqrt(dot(vec3(_2091, _2092, _2093), vec3(_2091, _2092, _2093)));
    float _2098 = _2097 * _2091;
    float _2099 = _2097 * _2092;
    float _2100 = _2097 * _2093;
    float _2101 = dot(vec3(_756, _757, _758), vec3(cbLight._m0[_1940].xyz));
    float _4179 = isnan(0.0) ? _2101 : (isnan(_2101) ? 0.0 : max(_2101, 0.0));
    float _2104 = isnan(1.0) ? _4179 : (isnan(_4179) ? 1.0 : min(_4179, 1.0));
    float _4190 = isnan(0.0) ? _907 : (isnan(_907) ? 0.0 : max(_907, 0.0));
    float _2105 = isnan(1.0) ? _4190 : (isnan(_4190) ? 1.0 : min(_4190, 1.0));
    float _2106 = dot(vec3(_756, _757, _758), vec3(_2098, _2099, _2100));
    float _4201 = isnan(0.0) ? _2106 : (isnan(_2106) ? 0.0 : max(_2106, 0.0));
    float _2109 = isnan(1.0) ? _4201 : (isnan(_4201) ? 1.0 : min(_4201, 1.0));
    float _2110 = dot(vec3(cbLight._m0[_1940].xyz), vec3(_2098, _2099, _2100));
    float _4212 = isnan(0.0) ? _2110 : (isnan(_2110) ? 0.0 : max(_2110, 0.0));
    float _2114 = _2090 * _2090;
    float _2118 = ((_2109 * _2109) * (_2114 + (-1.0))) + 1.0;
    float _2129 = (exp2(log2(1.0 - (isnan(1.0) ? _4212 : (isnan(_4212) ? 1.0 : min(_4212, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2130 = 1.0 - _2090;
    float _2141 = (0.5 / (((_2105 * ((_2104 * _2130) + _2090)) + 9.9999999392252902907785028219223e-09) + (((_2105 * _2130) + _2090) * _2104))) * _2104;
    float _4223 = isnan(0.0) ? _2141 : (isnan(_2141) ? 0.0 : max(_2141, 0.0));
    float _2143 = (isnan(1.0) ? _4223 : (isnan(_4223) ? 1.0 : min(_4223, 1.0))) * (_2114 / ((_2118 * _2118) * 3.141590118408203125));
    uint _2154 = _1940 + 9u;
    float _2165 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1977].w)) * _759) * 0.949999988079071044921875);
    float _2166 = _2165 * _2165;
    float _2167 = cbLight._m0[_1977].x + _835;
    float _2168 = cbLight._m0[_1977].y + _836;
    float _2169 = cbLight._m0[_1977].z + _837;
    float _2173 = inversesqrt(dot(vec3(_2167, _2168, _2169), vec3(_2167, _2168, _2169)));
    float _2174 = _2173 * _2167;
    float _2175 = _2173 * _2168;
    float _2176 = _2173 * _2169;
    float _2177 = dot(vec3(_756, _757, _758), vec3(cbLight._m0[_1977].xyz));
    float _4234 = isnan(0.0) ? _2177 : (isnan(_2177) ? 0.0 : max(_2177, 0.0));
    float _2180 = isnan(1.0) ? _4234 : (isnan(_4234) ? 1.0 : min(_4234, 1.0));
    float _2181 = dot(vec3(_756, _757, _758), vec3(_2174, _2175, _2176));
    float _4245 = isnan(0.0) ? _2181 : (isnan(_2181) ? 0.0 : max(_2181, 0.0));
    float _2184 = isnan(1.0) ? _4245 : (isnan(_4245) ? 1.0 : min(_4245, 1.0));
    float _2185 = dot(vec3(cbLight._m0[_1977].xyz), vec3(_2174, _2175, _2176));
    float _4256 = isnan(0.0) ? _2185 : (isnan(_2185) ? 0.0 : max(_2185, 0.0));
    float _2189 = _2166 * _2166;
    float _2193 = ((_2184 * _2184) * (_2189 + (-1.0))) + 1.0;
    float _2202 = (exp2(log2(1.0 - (isnan(1.0) ? _4256 : (isnan(_4256) ? 1.0 : min(_4256, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2203 = 1.0 - _2166;
    float _2213 = (0.5 / (((_2105 * ((_2180 * _2203) + _2166)) + 9.9999999392252902907785028219223e-09) + (((_2105 * _2203) + _2166) * _2180))) * _2180;
    float _4267 = isnan(0.0) ? _2213 : (isnan(_2213) ? 0.0 : max(_2213, 0.0));
    float _2215 = (isnan(1.0) ? _4267 : (isnan(_4267) ? 1.0 : min(_4267, 1.0))) * (_2189 / ((_2193 * _2193) * 3.141590118408203125));
    float _2225 = (((_2202 * cbLight._m0[_2154].x) * _2215) * _1963) + (((_2129 * cbLight._m0[_2076].x) * _2143) * _1973);
    float _2226 = (((_2202 * cbLight._m0[_2154].y) * _2215) * _1963) + (((_2129 * cbLight._m0[_2076].y) * _2143) * _1973);
    float _2227 = (((_2202 * cbLight._m0[_2154].z) * _2215) * _1963) + (((_2129 * cbLight._m0[_2076].z) * _2143) * _1973);
    float _2289;
    float _2291;
    float _2293;
    if (_2013)
    {
        _2289 = _2225;
        _2291 = _2226;
        _2293 = _2227;
    }
    else
    {
        uint _2295 = _1940 + 2u;
        uint _2299 = _1940 + 10u;
        float _2313 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2295].w)) * _759) * 0.949999988079071044921875);
        float _2314 = _2313 * _2313;
        float _2315 = cbLight._m0[_2295].x + _835;
        float _2316 = cbLight._m0[_2295].y + _836;
        float _2317 = cbLight._m0[_2295].z + _837;
        float _2321 = inversesqrt(dot(vec3(_2315, _2316, _2317), vec3(_2315, _2316, _2317)));
        float _2322 = _2321 * _2315;
        float _2323 = _2321 * _2316;
        float _2324 = _2321 * _2317;
        float _2325 = dot(vec3(_756, _757, _758), vec3(cbLight._m0[_2295].xyz));
        float _4278 = isnan(0.0) ? _2325 : (isnan(_2325) ? 0.0 : max(_2325, 0.0));
        float _2328 = isnan(1.0) ? _4278 : (isnan(_4278) ? 1.0 : min(_4278, 1.0));
        float _2329 = dot(vec3(_756, _757, _758), vec3(_2322, _2323, _2324));
        float _4289 = isnan(0.0) ? _2329 : (isnan(_2329) ? 0.0 : max(_2329, 0.0));
        float _2332 = isnan(1.0) ? _4289 : (isnan(_4289) ? 1.0 : min(_4289, 1.0));
        float _2333 = dot(vec3(cbLight._m0[_2295].xyz), vec3(_2322, _2323, _2324));
        float _4300 = isnan(0.0) ? _2333 : (isnan(_2333) ? 0.0 : max(_2333, 0.0));
        float _2337 = _2314 * _2314;
        float _2341 = ((_2332 * _2332) * (_2337 + (-1.0))) + 1.0;
        float _2350 = (exp2(log2(1.0 - (isnan(1.0) ? _4300 : (isnan(_4300) ? 1.0 : min(_4300, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2351 = 1.0 - _2314;
        float _2361 = (0.5 / (((_2105 * ((_2328 * _2351) + _2314)) + 9.9999999392252902907785028219223e-09) + (((_2105 * _2351) + _2314) * _2328))) * _2328;
        float _4311 = isnan(0.0) ? _2361 : (isnan(_2361) ? 0.0 : max(_2361, 0.0));
        float _2363 = (isnan(1.0) ? _4311 : (isnan(_4311) ? 1.0 : min(_4311, 1.0))) * (_2337 / ((_2341 * _2341) * 3.141590118408203125));
        float _2364 = isnan(1.0) ? _1955 : (isnan(_1955) ? 1.0 : min(_1955, 1.0));
        _2289 = (((_2350 * cbLight._m0[_2299].x) * _2363) * _2364) + _2225;
        _2291 = (((_2350 * cbLight._m0[_2299].y) * _2363) * _2364) + _2226;
        _2293 = (((_2350 * cbLight._m0[_2299].z) * _2363) * _2364) + _2227;
    }
    float _2399;
    float _2401;
    float _2403;
    if (_2031)
    {
        _2399 = _2289;
        _2401 = _2291;
        _2403 = _2293;
    }
    else
    {
        uint _2410 = _1940 + 3u;
        uint _2414 = _1940 + 11u;
        float _2428 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2410].w)) * _759) * 0.949999988079071044921875);
        float _2429 = _2428 * _2428;
        float _2430 = cbLight._m0[_2410].x + _835;
        float _2431 = cbLight._m0[_2410].y + _836;
        float _2432 = cbLight._m0[_2410].z + _837;
        float _2436 = inversesqrt(dot(vec3(_2430, _2431, _2432), vec3(_2430, _2431, _2432)));
        float _2437 = _2436 * _2430;
        float _2438 = _2436 * _2431;
        float _2439 = _2436 * _2432;
        float _2440 = dot(vec3(_756, _757, _758), vec3(cbLight._m0[_2410].xyz));
        float _4327 = isnan(0.0) ? _2440 : (isnan(_2440) ? 0.0 : max(_2440, 0.0));
        float _2443 = isnan(1.0) ? _4327 : (isnan(_4327) ? 1.0 : min(_4327, 1.0));
        float _2444 = dot(vec3(_756, _757, _758), vec3(_2437, _2438, _2439));
        float _4338 = isnan(0.0) ? _2444 : (isnan(_2444) ? 0.0 : max(_2444, 0.0));
        float _2447 = isnan(1.0) ? _4338 : (isnan(_4338) ? 1.0 : min(_4338, 1.0));
        float _2448 = dot(vec3(cbLight._m0[_2410].xyz), vec3(_2437, _2438, _2439));
        float _4349 = isnan(0.0) ? _2448 : (isnan(_2448) ? 0.0 : max(_2448, 0.0));
        float _2452 = _2429 * _2429;
        float _2456 = ((_2447 * _2447) * (_2452 + (-1.0))) + 1.0;
        float _2465 = (exp2(log2(1.0 - (isnan(1.0) ? _4349 : (isnan(_4349) ? 1.0 : min(_4349, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2466 = 1.0 - _2429;
        float _2476 = (0.5 / (((_2105 * ((_2443 * _2466) + _2429)) + 9.9999999392252902907785028219223e-09) + (((_2105 * _2466) + _2429) * _2443))) * _2443;
        float _4360 = isnan(0.0) ? _2476 : (isnan(_2476) ? 0.0 : max(_2476, 0.0));
        float _2478 = (isnan(1.0) ? _4360 : (isnan(_4360) ? 1.0 : min(_4360, 1.0))) * (_2452 / ((_2456 * _2456) * 3.141590118408203125));
        float _2479 = isnan(1.0) ? _1956 : (isnan(_1956) ? 1.0 : min(_1956, 1.0));
        _2399 = (((_2465 * cbLight._m0[_2414].x) * _2478) * _2479) + _2289;
        _2401 = (((_2465 * cbLight._m0[_2414].y) * _2478) * _2479) + _2291;
        _2403 = (((_2465 * cbLight._m0[_2414].z) * _2478) * _2479) + _2293;
    }
    float _2614;
    float _2616;
    float _2618;
    float _2620;
    float _2622;
    float _2624;
    if (_1938.y == 0u)
    {
        float _2554 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2555 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2554;
        float _2556 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2554;
        float _2557 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2554;
        uvec4 _2569 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2570 = _2569.x;
        uint _2581 = uint((float(_2569.y) * floor(float(uint(cbSceneParam._m0[85u].y * _844) / _2570))) + floor(float(uint(cbSceneParam._m0[85u].x * _843) / _2570)));
        float _2591 = (log2(_2557 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2592 = isnan(0.0) ? _2591 : (isnan(_2591) ? 0.0 : max(_2591, 0.0));
        uint _2595 = uint(isnan(14.0) ? _2592 : (isnan(_2592) ? 14.0 : min(_2592, 14.0)));
        uvec4 _2600 = texelFetch(g_lightClusterGridBuffer, int(((_2595 << 2u) + (_2581 << 6u)) >> 2u));
        uint _2601 = _2600.x;
        uint _2602 = _2569.z;
        float _2702;
        float _2704;
        float _2706;
        float _2708;
        float _2710;
        float _2712;
        if (((((1u << ((_2602 >> 4u) & 15u)) + 4294967295u) & _2601) == 0u) || ((_2602 & 240u) == 0u))
        {
            _2702 = 0.0;
            _2704 = 0.0;
            _2706 = 0.0;
            _2708 = 0.0;
            _2710 = 0.0;
            _2712 = 0.0;
        }
        else
        {
            float _2703;
            float _2705;
            float _2707;
            float _2709;
            float _2711;
            float _2713;
            float _2847 = 0.0;
            float _2848 = 0.0;
            float _2849 = 0.0;
            float _2850 = 0.0;
            float _2851 = 0.0;
            float _2852 = 0.0;
            uint _2853 = 0u;
            uint _2862;
            bool _2863;
            for (;;)
            {
                _2862 = texelFetch(g_lightClassification, int((((_2595 << 5u) + (_2581 << 9u)) + (_2853 << 2u)) >> 2u)).x;
                _2863 = _2862 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2863)
                {
                    frontier_phi_61_pred = _2847;
                    frontier_phi_61_pred_1 = _2852;
                    frontier_phi_61_pred_2 = _2851;
                    frontier_phi_61_pred_3 = _2850;
                    frontier_phi_61_pred_4 = _2849;
                    frontier_phi_61_pred_5 = _2848;
                }
                else
                {
                    float _2971;
                    float _2972;
                    float _2973;
                    float _2974;
                    float _2975;
                    float _2976;
                    uint _2977;
                    _2971 = _2847;
                    _2972 = _2848;
                    _2973 = _2849;
                    _2974 = _2850;
                    _2975 = _2851;
                    _2976 = _2852;
                    _2977 = _2862;
                    float _2903;
                    float _2904;
                    float _2905;
                    float _2906;
                    float _2907;
                    float _2908;
                    for (;;)
                    {
                        uint _2981 = uint(findLSB(_2977)) + (_2853 << 5u);
                        uint _2978 = (_2977 + 4294967295u) & _2977;
                        uint _2983 = _2981 * 48u;
                        vec4 _2997 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2983)).x, texelFetch(g_PointLightRenderingBuffer, int(_2983 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2983 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2983 + 3u)).x));
                        uint _3003 = (_2981 * 48u) + 4u;
                        vec4 _3016 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3003)).x, texelFetch(g_PointLightRenderingBuffer, int(_3003 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3003 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3003 + 3u)).x));
                        uint _3022 = (_2981 * 48u) + 8u;
                        vec3 _3033 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3022)).x, texelFetch(g_PointLightRenderingBuffer, int(_3022 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3022 + 2u)).x));
                        float _3037 = _2997.x - _2555;
                        float _3038 = _2997.y - _2556;
                        float _3039 = _2997.z - _2557;
                        float _3040 = dot(vec3(_3037, _3038, _3039), vec3(_3037, _3038, _3039));
                        float _3043 = inversesqrt(_3040);
                        float _3044 = _3043 * _3037;
                        float _3045 = _3043 * _3038;
                        float _3046 = _3043 * _3039;
                        float _3047 = dot(vec3(_862, _865, _868), vec3(_3044, _3045, _3046));
                        float _3052 = 1.0 - (_3040 * _2997.w);
                        float _4386 = isnan(0.0) ? _3052 : (isnan(_3052) ? 0.0 : max(_3052, 0.0));
                        float _3053 = isnan(1.0) ? _4386 : (isnan(_4386) ? 1.0 : min(_4386, 1.0));
                        float _3054 = sqrt(_3040) * _3016.w;
                        float _3057 = 1.39999997615814208984375 / (_3054 + 1.39999997615814208984375);
                        float _3058 = _3057 * _3057;
                        float _3061 = ((1.0 - _3058) * _3047) + _3058;
                        float _3064 = _3054 * _3054;
                        float _3068 = ((isnan(0.0) ? _3061 : (isnan(_3061) ? 0.0 : max(_3061, 0.0))) * _3053) / ((_3064 * 0.699999988079071044921875) + 1.0);
                        float _3072 = (-0.0) - _2555;
                        float _3073 = (-0.0) - _2556;
                        float _3074 = (-0.0) - _2557;
                        float _3078 = inversesqrt(dot(vec3(_3072, _3073, _3074), vec3(_3072, _3073, _3074)));
                        float _3079 = _3078 * _3072;
                        float _3080 = _3078 * _3073;
                        float _3081 = _3078 * _3074;
                        float _3089 = exp2(log2(1.0 / ((_3064 * 3.5) + 5.0)) * 0.25);
                        float _3090 = 1.0 - _922;
                        float _3097 = sqrt(1.0 - ((1.0 - (_3090 * _3090)) * (1.0 - (_3089 * _3089))));
                        float _3098 = _3097 * _3097;
                        float _3099 = _3098 * _3098;
                        float _3100 = _3079 + _3044;
                        float _3101 = _3080 + _3045;
                        float _3102 = _3081 + _3046;
                        float _3106 = inversesqrt(dot(vec3(_3100, _3101, _3102), vec3(_3100, _3101, _3102)));
                        float _3110 = dot(vec3(_862, _865, _868), vec3(_3079, _3080, _3081));
                        float _4402 = isnan(0.0) ? _3110 : (isnan(_3110) ? 0.0 : max(_3110, 0.0));
                        float _3113 = isnan(1.0) ? _4402 : (isnan(_4402) ? 1.0 : min(_4402, 1.0));
                        float _3114 = dot(vec3(_862, _865, _868), vec3(_3106 * _3100, _3106 * _3101, _3106 * _3102));
                        float _4413 = isnan(0.0) ? _3114 : (isnan(_3114) ? 0.0 : max(_3114, 0.0));
                        float _3117 = isnan(1.0) ? _4413 : (isnan(_4413) ? 1.0 : min(_4413, 1.0));
                        float _3121 = ((_3117 * _3117) * (_3099 + (-1.0))) + 1.0;
                        float _3122 = _3057 * _3098;
                        float _3123 = _3122 * _3122;
                        float _3126 = ((1.0 - _3123) * _3047) + _3123;
                        float _4424 = isnan(0.0) ? _3126 : (isnan(_3126) ? 0.0 : max(_3126, 0.0));
                        float _3127 = isnan(1.0) ? _4424 : (isnan(_4424) ? 1.0 : min(_4424, 1.0));
                        float _3128 = 1.0 - _3098;
                        float _3138 = (0.5 / (((_3127 * ((_3113 * _3128) + _3098)) + 9.9999999392252902907785028219223e-09) + (((_3127 * _3128) + _3098) * _3113))) * _3127;
                        float _4435 = isnan(0.0) ? _3138 : (isnan(_3138) ? 0.0 : max(_3138, 0.0));
                        float _3149 = (((_3099 * 3.1415927410125732421875) * (isnan(1.0) ? _4435 : (isnan(_4435) ? 1.0 : min(_4435, 1.0)))) / ((_3121 * _3121) * ((_3064 * 2.1991131305694580078125) + 3.141590118408203125))) * _3053;
                        _2906 = (_3068 * _3016.x) + _2974;
                        _2907 = (_3068 * _3016.y) + _2975;
                        _2908 = (_3068 * _3016.z) + _2976;
                        _2903 = (_3149 * _3033.x) + _2971;
                        _2904 = (_3149 * _3033.y) + _2972;
                        _2905 = (_3149 * _3033.z) + _2973;
                        if (_2978 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2971 = _2903;
                            _2972 = _2904;
                            _2973 = _2905;
                            _2974 = _2906;
                            _2975 = _2907;
                            _2976 = _2908;
                            _2977 = _2978;
                        }
                    }
                    frontier_phi_61_pred = _2903;
                    frontier_phi_61_pred_1 = _2908;
                    frontier_phi_61_pred_2 = _2907;
                    frontier_phi_61_pred_3 = _2906;
                    frontier_phi_61_pred_4 = _2905;
                    frontier_phi_61_pred_5 = _2904;
                }
                _2703 = frontier_phi_61_pred;
                _2713 = frontier_phi_61_pred_1;
                _2711 = frontier_phi_61_pred_2;
                _2709 = frontier_phi_61_pred_3;
                _2707 = frontier_phi_61_pred_4;
                _2705 = frontier_phi_61_pred_5;
                uint _2854 = _2853 + 1u;
                if (_2854 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2847 = _2703;
                    _2848 = _2705;
                    _2849 = _2707;
                    _2850 = _2709;
                    _2851 = _2711;
                    _2852 = _2713;
                    _2853 = _2854;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2702 = _2703;
            _2704 = _2705;
            _2706 = _2707;
            _2708 = _2709;
            _2710 = _2711;
            _2712 = _2713;
        }
        uvec4 _2716 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2717 = _2716.z;
        uint _2719 = (_2717 >> 8u) & 15u;
        float _2815;
        float _2817;
        float _2819;
        float _2821;
        float _2823;
        float _2825;
        if (((4294967295u << _2719) & _2601) == 0u)
        {
            _2815 = _2702;
            _2817 = _2704;
            _2819 = _2706;
            _2821 = _2708;
            _2823 = _2710;
            _2825 = _2712;
        }
        else
        {
            float _2840 = inversesqrt(dot(vec3(_2555, _2556, _2557), vec3(_2555, _2556, _2557)));
            float _2841 = _2840 * _2555;
            float _2842 = _2840 * _2556;
            float _2843 = _2840 * _2557;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2719 < ((_2717 >> 12u) & 15u))
            {
                float _2816;
                float _2818;
                float _2820;
                float _2822;
                float _2824;
                float _2826;
                float _2954 = _2702;
                float _2955 = _2704;
                float _2956 = _2706;
                float _2957 = _2708;
                float _2958 = _2710;
                float _2959 = _2712;
                uint _2960 = _2719;
                uint _2969;
                bool _2970;
                for (;;)
                {
                    _2969 = texelFetch(g_lightClassification, int((((_2595 << 5u) + (_2581 << 9u)) + (_2960 << 2u)) >> 2u)).x;
                    _2970 = _2969 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_2970)
                    {
                        frontier_phi_67_pred = _2957;
                        frontier_phi_67_pred_1 = _2958;
                        frontier_phi_67_pred_2 = _2959;
                        frontier_phi_67_pred_3 = _2956;
                        frontier_phi_67_pred_4 = _2955;
                        frontier_phi_67_pred_5 = _2954;
                    }
                    else
                    {
                        float _3154;
                        float _3155;
                        float _3156;
                        float _3157;
                        float _3158;
                        float _3159;
                        float _3447;
                        float _3448;
                        float _3449;
                        float _3450;
                        float _3451;
                        float _3452;
                        float _3167 = _2954;
                        float _3168 = _2955;
                        float _3169 = _2956;
                        float _3170 = _2957;
                        float _3171 = _2958;
                        float _3172 = _2959;
                        uint _3173 = _2969;
                        uint _3174;
                        vec4 _3199;
                        float _3200;
                        vec4 _3215;
                        vec3 _3227;
                        vec4 _3242;
                        vec4 _3257;
                        float _3303;
                        bool _3304;
                        for (;;)
                        {
                            uint _3184 = ((_2960 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3173));
                            _3174 = (_3173 + 4294967295u) & _3173;
                            uint _3186 = _3184 * 40u;
                            _3199 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3186)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3186 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3186 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3186 + 3u)).x));
                            _3200 = _3199.w;
                            uint _3202 = (_3184 * 40u) + 4u;
                            _3215 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3202)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3202 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3202 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3202 + 3u)).x));
                            uint _3217 = (_3184 * 40u) + 8u;
                            _3227 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3217)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3217 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3217 + 2u)).x));
                            uint _3229 = (_3184 * 40u) + 16u;
                            _3242 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3229)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3229 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3229 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3229 + 3u)).x));
                            uint _3244 = (_3184 * 40u) + 20u;
                            _3257 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3244)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3244 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3244 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3244 + 3u)).x));
                            uint _3259 = (_3184 * 40u) + 24u;
                            vec4 _3272 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3259)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3259 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3259 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3259 + 3u)).x));
                            uint _3278 = (_3184 * 40u) + 28u;
                            vec4 _3291 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3278)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3278 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3278 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3278 + 3u)).x));
                            _3303 = fma(_2557, _3291.z, fma(_2556, _3291.y, _3291.x * _2555)) + _3291.w;
                            _3304 = !((fma(_2557, _3272.z, fma(_2556, _3272.y, _3272.x * _2555)) + _3272.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3304)
                            {
                                float _3331 = _3199.x - _2555;
                                float _3332 = _3199.y - _2556;
                                float _3333 = _3199.z - _2557;
                                float _3334 = dot(vec3(_3331, _3332, _3333), vec3(_3331, _3332, _3333));
                                float _3337 = inversesqrt(_3334);
                                float _3338 = _3337 * _3331;
                                float _3339 = _3337 * _3332;
                                float _3340 = _3337 * _3333;
                                float _3344 = 1.0 - (_3334 / (_3200 * _3200));
                                float _4446 = isnan(0.0) ? _3344 : (isnan(_3344) ? 0.0 : max(_3344, 0.0));
                                float _3345 = isnan(1.0) ? _4446 : (isnan(_4446) ? 1.0 : min(_4446, 1.0));
                                float _3349 = sqrt(_3334) * _3215.w;
                                float _3351 = 1.39999997615814208984375 / (_3349 + 1.39999997615814208984375);
                                float _3352 = _3351 * _3351;
                                float _3355 = ((1.0 - _3352) * dot(vec3(_3338, _3339, _3340), vec3(_862, _865, _868))) + _3352;
                                float _3358 = _3349 * _3349;
                                float _3362 = (fma(_2557, _3242.z, fma(_2556, _3242.y, _3242.x * _2555)) + _3242.w) / _3303;
                                float _3363 = (fma(_2557, _3257.z, fma(_2556, _3257.y, _3257.x * _2555)) + _3257.w) / _3303;
                                float _3367 = 1.0 - dot(vec2(_3362, _3363), vec2(_3362, _3363));
                                float _4462 = isnan(0.0) ? _3367 : (isnan(_3367) ? 0.0 : max(_3367, 0.0));
                                float _3368 = isnan(1.0) ? _4462 : (isnan(_4462) ? 1.0 : min(_4462, 1.0));
                                float _3369 = _3368 * (((isnan(0.0) ? _3355 : (isnan(_3355) ? 0.0 : max(_3355, 0.0))) * _3345) / ((_3358 * 0.699999988079071044921875) + 1.0));
                                float _3381 = exp2(log2(1.0 / ((_3358 * 3.5) + 5.0)) * 0.25);
                                float _3382 = 1.0 - _922;
                                float _3389 = sqrt(1.0 - ((1.0 - (_3382 * _3382)) * (1.0 - (_3381 * _3381))));
                                float _3390 = _3389 * _3389;
                                float _3391 = _3390 * _3390;
                                float _3392 = _3338 - _2841;
                                float _3393 = _3339 - _2842;
                                float _3394 = _3340 - _2843;
                                float _3398 = inversesqrt(dot(vec3(_3392, _3393, _3394), vec3(_3392, _3393, _3394)));
                                float _3402 = dot(vec3(_862, _865, _868), vec3((-0.0) - _2841, (-0.0) - _2842, (-0.0) - _2843));
                                float _4473 = isnan(0.0) ? _3402 : (isnan(_3402) ? 0.0 : max(_3402, 0.0));
                                float _3405 = isnan(1.0) ? _4473 : (isnan(_4473) ? 1.0 : min(_4473, 1.0));
                                float _3406 = dot(vec3(_862, _865, _868), vec3(_3398 * _3392, _3398 * _3393, _3398 * _3394));
                                float _4484 = isnan(0.0) ? _3406 : (isnan(_3406) ? 0.0 : max(_3406, 0.0));
                                float _3409 = isnan(1.0) ? _4484 : (isnan(_4484) ? 1.0 : min(_4484, 1.0));
                                float _3413 = ((_3409 * _3409) * (_3391 + (-1.0))) + 1.0;
                                float _3414 = _3351 * _3390;
                                float _3415 = _3414 * _3414;
                                float _3421 = ((1.0 - _3415) * dot(vec3(_862, _865, _868), vec3(_3338, _3339, _3340))) + _3415;
                                float _4495 = isnan(0.0) ? _3421 : (isnan(_3421) ? 0.0 : max(_3421, 0.0));
                                float _3422 = isnan(1.0) ? _4495 : (isnan(_4495) ? 1.0 : min(_4495, 1.0));
                                float _3423 = 1.0 - _3390;
                                float _3433 = (0.5 / (((_3422 * ((_3405 * _3423) + _3390)) + 9.9999999392252902907785028219223e-09) + (((_3422 * _3423) + _3390) * _3405))) * _3422;
                                float _4506 = isnan(0.0) ? _3433 : (isnan(_3433) ? 0.0 : max(_3433, 0.0));
                                float _3443 = (_3368 * _3345) * (((_3391 * 3.1415927410125732421875) * (isnan(1.0) ? _4506 : (isnan(_4506) ? 1.0 : min(_4506, 1.0)))) / ((_3413 * _3413) * ((_3358 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3443 * _3227.x;
                                frontier_phi_73_pred_1 = _3443 * _3227.y;
                                frontier_phi_73_pred_2 = _3369 * _3215.z;
                                frontier_phi_73_pred_3 = _3369 * _3215.y;
                                frontier_phi_73_pred_4 = _3369 * _3215.x;
                                frontier_phi_73_pred_5 = _3443 * _3227.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3447 = frontier_phi_73_pred;
                            _3448 = frontier_phi_73_pred_1;
                            _3452 = frontier_phi_73_pred_2;
                            _3451 = frontier_phi_73_pred_3;
                            _3450 = frontier_phi_73_pred_4;
                            _3449 = frontier_phi_73_pred_5;
                            _3157 = _3450 + _3170;
                            _3158 = _3451 + _3171;
                            _3159 = _3452 + _3172;
                            _3154 = _3447 + _3167;
                            _3155 = _3448 + _3168;
                            _3156 = _3449 + _3169;
                            if (_3174 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3167 = _3154;
                                _3168 = _3155;
                                _3169 = _3156;
                                _3170 = _3157;
                                _3171 = _3158;
                                _3172 = _3159;
                                _3173 = _3174;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3157;
                        frontier_phi_67_pred_1 = _3158;
                        frontier_phi_67_pred_2 = _3159;
                        frontier_phi_67_pred_3 = _3156;
                        frontier_phi_67_pred_4 = _3155;
                        frontier_phi_67_pred_5 = _3154;
                    }
                    _2822 = frontier_phi_67_pred;
                    _2824 = frontier_phi_67_pred_1;
                    _2826 = frontier_phi_67_pred_2;
                    _2820 = frontier_phi_67_pred_3;
                    _2818 = frontier_phi_67_pred_4;
                    _2816 = frontier_phi_67_pred_5;
                    uint _2961 = _2960 + 1u;
                    if (_2961 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2954 = _2816;
                        _2955 = _2818;
                        _2956 = _2820;
                        _2957 = _2822;
                        _2958 = _2824;
                        _2959 = _2826;
                        _2960 = _2961;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2824;
                frontier_phi_55_56_ladder_1 = _2826;
                frontier_phi_55_56_ladder_2 = _2822;
                frontier_phi_55_56_ladder_3 = _2820;
                frontier_phi_55_56_ladder_4 = _2818;
                frontier_phi_55_56_ladder_5 = _2816;
            }
            else
            {
                frontier_phi_55_56_ladder = _2710;
                frontier_phi_55_56_ladder_1 = _2712;
                frontier_phi_55_56_ladder_2 = _2708;
                frontier_phi_55_56_ladder_3 = _2706;
                frontier_phi_55_56_ladder_4 = _2704;
                frontier_phi_55_56_ladder_5 = _2702;
            }
            _2815 = frontier_phi_55_56_ladder_5;
            _2817 = frontier_phi_55_56_ladder_4;
            _2819 = frontier_phi_55_56_ladder_3;
            _2821 = frontier_phi_55_56_ladder_2;
            _2823 = frontier_phi_55_56_ladder;
            _2825 = frontier_phi_55_56_ladder_1;
        }
        float _2830 = isnan(1.0) ? _906 : (isnan(_906) ? 1.0 : min(_906, 1.0));
        _2614 = (_2830 * _2821) + _2069;
        _2616 = (_2830 * _2823) + _2071;
        _2618 = (_2830 * _2825) + _2073;
        _2620 = ((_2815 * 0.039999999105930328369140625) * _2830) + _2399;
        _2622 = ((_2817 * 0.039999999105930328369140625) * _2830) + _2401;
        _2624 = ((_2819 * 0.039999999105930328369140625) * _2830) + _2403;
    }
    else
    {
        _2614 = _2069;
        _2616 = _2071;
        _2618 = _2073;
        _2620 = _2399;
        _2622 = _2401;
        _2624 = _2403;
    }
    float _4522 = isnan(0.0) ? _891 : (isnan(_891) ? 0.0 : max(_891, 0.0));
    float _4533 = isnan(0.0) ? _892 : (isnan(_892) ? 0.0 : max(_892, 0.0));
    float _4544 = isnan(0.0) ? _893 : (isnan(_893) ? 0.0 : max(_893, 0.0));
    uint _2644 = _264 + 6u;
    float _2652 = _843 / cbSceneParam._m0[86u].x;
    float _2653 = _844 / cbSceneParam._m0[86u].y;
    vec4 _2667 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2652, _2653, (log2((isnan(cbSceneParam._m0[77u].w) ? _777 : (isnan(_777) ? cbSceneParam._m0[77u].w : min(_777, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2669 = _2667.x;
    float _2670 = _2667.y;
    float _2671 = _2667.z;
    float _2672 = _2667.w;
    float _2765;
    float _2767;
    float _2769;
    float _2771;
    if (_777 > cbSceneParam._m0[78u].w)
    {
        float _2727 = isnan(_777) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _777 : min(cbSceneParam._m0[80u].w, _777));
        float _2728 = _2727 / _777;
        float _2739 = _2728 * _828;
        float _2740 = _829 * _2728;
        float _2741 = (-0.0) - _2740;
        float _2743 = _2728 * _830;
        float _2745 = (cbSceneParam._m0[77u].w * _2741) / _2727;
        float _2746 = _2745 + cbSceneParam._m0[79u].w;
        float _2747 = cbSceneParam._m0[79u].w - _2740;
        float _2753 = sqrt(((_2739 * _2739) + (_2740 * _2740)) + (_2743 * _2743));
        float _2756 = (1.0 - (cbSceneParam._m0[77u].w / _2727)) * _2753;
        float _2761 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2763 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2916;
        if (abs((_2741 - _2745) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2916 = ((((_2746 > 0.0) ? exp2(_2761 * _2746) : (2.0 - exp2(_2763 * _2746))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2756;
        }
        else
        {
            float _2876 = 1.0 / cbSceneParam._m0[80u].x;
            float _2877 = isnan(_2747) ? _2746 : (isnan(_2746) ? _2747 : max(_2746, _2747));
            float _2878 = isnan(_2747) ? _2746 : (isnan(_2746) ? _2747 : min(_2746, _2747));
            float _2887 = isnan(0.0) ? _2877 : (isnan(_2877) ? 0.0 : min(_2877, 0.0));
            float _2888 = isnan(0.0) ? _2878 : (isnan(_2878) ? 0.0 : min(_2878, 0.0));
            _2916 = ((abs(_2753 / _2741) * cbSceneParam._m0[80u].y) * ((((_2887 - _2888) * 2.0) - ((exp2(_2761 * (isnan(0.0) ? _2877 : (isnan(_2877) ? 0.0 : max(_2877, 0.0)))) - exp2(_2761 * (isnan(0.0) ? _2878 : (isnan(_2878) ? 0.0 : max(_2878, 0.0))))) * _2876)) - ((exp2(_2763 * _2887) - exp2(_2763 * _2888)) * _2876))) + (_2756 * cbSceneParam._m0[80u].z);
        }
        vec4 _2918 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2652, _2653, 1.0), 0.0);
        float _2927 = exp2((_2916 * (-1.44269502162933349609375)) * (1.0 - _2918.w));
        float _2928 = log2(_2927);
        float _2944 = log2(_2672);
        _2765 = (exp2(_2944 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2928 * cbSceneParam._m0[78u].x)) * _2918.x) / cbSceneParam._m0[78u].x)) + _2669;
        _2767 = (exp2(_2944 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2928 * cbSceneParam._m0[78u].y)) * _2918.y) / cbSceneParam._m0[78u].y)) + _2670;
        _2769 = (exp2(_2944 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2928 * cbSceneParam._m0[78u].z)) * _2918.z) / cbSceneParam._m0[78u].z)) + _2671;
        _2771 = _2927 * _2672;
    }
    else
    {
        _2765 = _2669;
        _2767 = _2670;
        _2769 = _2671;
        _2771 = _2672;
    }
    float _2783 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2784 = _2783 == 3.0;
    float _2785 = log2(_2771);
    float _2792 = exp2(_2785 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4522 : (isnan(_4522) ? 1.0 : min(_4522, 1.0))) * (_2614 + ((isnan(0.0) ? _1632 : (isnan(_1632) ? 0.0 : max(_1632, 0.0))) * _906))) + ((_2620 + ((isnan(0.0) ? _1922 : (isnan(_1922) ? 0.0 : max(_1922, 0.0))) * _1711)) * cbPerFrame._m0[3u].x));
    float _2793 = exp2(_2785 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4533 : (isnan(_4533) ? 1.0 : min(_4533, 1.0))) * (_2616 + ((isnan(0.0) ? _1635 : (isnan(_1635) ? 0.0 : max(_1635, 0.0))) * _906))) + ((_2622 + ((isnan(0.0) ? _1925 : (isnan(_1925) ? 0.0 : max(_1925, 0.0))) * _1711)) * cbPerFrame._m0[3u].x));
    float _2794 = exp2(_2785 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4544 : (isnan(_4544) ? 1.0 : min(_4544, 1.0))) * (_2618 + ((isnan(0.0) ? _1638 : (isnan(_1638) ? 0.0 : max(_1638, 0.0))) * _906))) + ((_2624 + ((isnan(0.0) ? _1928 : (isnan(_1928) ? 0.0 : max(_1928, 0.0))) * _1711)) * cbPerFrame._m0[3u].x));
    float _2803 = (_2783 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2803 * (_2784 ? _2792 : (_2792 + (cbSceneParam._m0[72u].w * _2765)));
    SV_Target.y = _2803 * (_2784 ? _2793 : (_2793 + (cbSceneParam._m0[72u].w * _2767)));
    SV_Target.z = _2803 * (_2784 ? _2794 : (_2794 + (cbSceneParam._m0[72u].w * _2769)));
    SV_Target.w = cbInstanceData._m0[_2644].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2644].w;
}


