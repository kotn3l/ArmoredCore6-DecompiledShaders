#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_0;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_29;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_10;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_6;
layout(set = 0, binding = 23) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_8;
layout(set = 0, binding = 24) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_9;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1372;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _229 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _230 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _231 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _237 = inversesqrt(dot(vec3(_229, _230, _231), vec3(_229, _230, _231)));
    float _244 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _251 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _257 = uint(roundEven(NORMAL.w)) * 13u;
    uint _262 = _257 + 1u;
    uint _266 = _257 + 2u;
    float _275 = sqrt(((cbInstanceData._m0[_262].x * cbInstanceData._m0[_262].x) + (cbInstanceData._m0[_257].x * cbInstanceData._m0[_257].x)) + (cbInstanceData._m0[_266].x * cbInstanceData._m0[_266].x));
    float _276 = _275 * TEXCOORD.z;
    float _277 = _275 * TEXCOORD.w;
    vec4 _296 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _320 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _325 = _320.x * cbMtdParam._m0[11u].x;
    float _326 = _320.y * cbMtdParam._m0[11u].y;
    float _327 = _320.z * cbMtdParam._m0[11u].z;
    vec4 _346 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _276) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _277) + cbTextureTilingScale._m0[5u].w));
    vec4 _365 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _405 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _407 = _405.x;
    float _419 = dot(vec4(_407, _405.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _436 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _365.x) * 2.0) - ((((_407 - _419) * cbMtdParam._m0[24u].z) + _419) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3960 = isnan(0.0) ? _436 : (isnan(_436) ? 0.0 : max(_436, 0.0));
    float _437 = isnan(1.0) ? _3960 : (isnan(_3960) ? 1.0 : min(_3960, 1.0));
    float _444 = (_437 * ((_346.x * cbMtdParam._m0[12u].x) - _325)) + _325;
    float _445 = (_437 * ((_346.y * cbMtdParam._m0[12u].y) - _326)) + _326;
    float _446 = (_437 * ((_346.z * cbMtdParam._m0[12u].z) - _327)) + _327;
    vec4 _463 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _276) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _277) + cbTextureTilingScale._m0[3u].w));
    vec4 _483 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _485 = _483.x;
    float _495 = dot(vec4(_485, _483.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _509 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _365.y) * 2.0) - ((((_485 - _495) * cbMtdParam._m0[24u].z) + _495) * cbMtdParam._m0[20u].w))) + 1.0;
    float _3971 = isnan(0.0) ? _509 : (isnan(_509) ? 0.0 : max(_509, 0.0));
    float _510 = isnan(1.0) ? _3971 : (isnan(_3971) ? 1.0 : min(_3971, 1.0));
    float _517 = (_510 * ((_463.x * cbMtdParam._m0[13u].x) - _444)) + _444;
    float _518 = (_510 * ((_463.y * cbMtdParam._m0[13u].y) - _445)) + _445;
    float _519 = (_510 * ((_463.z * cbMtdParam._m0[13u].z) - _446)) + _446;
    vec4 _537 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_9, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[24u].x * _276) + cbTextureTilingScale._m0[24u].z, (cbTextureTilingScale._m0[24u].y * _277) + cbTextureTilingScale._m0[24u].w));
    vec4 _554 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[25u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _556 = _554.x;
    float _566 = dot(vec4(_556, _554.yzw), vec4(cbMtdParam._m0[30u].w, cbMtdParam._m0[31u].xy, 0.0));
    float _578 = ((cbMtdParam._m0[25u].x * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.z) - _365.z) * 2.0) - ((((_556 - _566) * cbMtdParam._m0[24u].z) + _566) * cbMtdParam._m0[20u].z))) + 1.0;
    float _3982 = isnan(0.0) ? _578 : (isnan(_578) ? 0.0 : max(_578, 0.0));
    float _579 = isnan(1.0) ? _3982 : (isnan(_3982) ? 1.0 : min(_3982, 1.0));
    float _592 = ((cbMtdParam._m0[9u].x * 4.55000019073486328125) * _296.x) * ((_579 * ((_537.x * cbMtdParam._m0[14u].x) - _517)) + _517);
    float _595 = ((cbMtdParam._m0[9u].y * 4.55000019073486328125) * _296.y) * ((_579 * ((_537.y * cbMtdParam._m0[14u].y) - _518)) + _518);
    float _598 = ((cbMtdParam._m0[9u].z * 4.55000019073486328125) * _296.z) * ((_579 * ((_537.z * cbMtdParam._m0[14u].z) - _519)) + _519);
    vec4 _611 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _276) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _277) + cbTextureTilingScale._m0[4u].w));
    vec4 _628 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _630 = _628.x;
    float _631 = _628.y;
    float _632 = _628.z;
    float _639 = ((_611.x - _630) * _437) + _630;
    float _640 = ((_611.y - _631) * _437) + _631;
    float _641 = ((_611.z - _632) * _437) + _632;
    vec4 _653 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _276) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _277) + cbTextureTilingScale._m0[2u].w));
    float _664 = ((_653.x - _639) * _510) + _639;
    float _665 = ((_653.y - _640) * _510) + _640;
    float _666 = ((_653.z - _641) * _510) + _641;
    vec4 _678 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[23u].x * _276) + cbTextureTilingScale._m0[23u].z, (cbTextureTilingScale._m0[23u].y * _277) + cbTextureTilingScale._m0[23u].w));
    float _691 = ((_678.z - _666) * _579) + _666;
    float _694 = ((((_678.x - _664) * _579) + _664) * 2.0) + (-1.0);
    float _696 = ((((_678.y - _665) * _579) + _665) * 2.0) + (-1.0);
    float _697 = dot(vec2(_694, _696), vec2(_694, _696));
    float _3993 = isnan(0.0) ? _697 : (isnan(_697) ? 0.0 : max(_697, 0.0));
    float _702 = sqrt(1.0 - (isnan(1.0) ? _3993 : (isnan(_3993) ? 1.0 : min(_3993, 1.0))));
    vec4 _716 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _728 = (((_716.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _694;
    float _729 = (((_716.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _696;
    vec4 _741 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _276) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _277) + cbTextureTilingScale._m0[19u].w));
    float _743 = _741.x;
    float _744 = 1.0 - _743;
    float _772 = (TEXCOORD_8.x - ((cbMtdParam._m0[22u].w * (1.0 - TEXCOORD_8.x)) * ((((_743 - _744) * cbMtdParam._m0[24u].y) + _744) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _4004 = isnan(0.0) ? _772 : (isnan(_772) ? 0.0 : max(_772, 0.0));
    float _773 = isnan(1.0) ? _4004 : (isnan(_4004) ? 1.0 : min(_4004, 1.0));
    float _781 = ((((cbMtdParam._m0[10u].x - _592) * TEXCOORD_8.x) * cbMtdParam._m0[23u].w) * _773) + _592;
    float _782 = ((((cbMtdParam._m0[10u].y - _595) * TEXCOORD_8.y) * cbMtdParam._m0[23u].w) * _773) + _595;
    float _783 = (((cbMtdParam._m0[23u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _598)) * _773) + _598;
    float _787 = (cbMtdParam._m0[19u].w * (_716.z - _691)) + _691;
    float _791 = ((cbMtdParam._m0[23u].y - _787) * _773) + _787;
    vec4 _810 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _276) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _277) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _816 = (_810.x * 2.0) + (-1.0);
    float _817 = (_810.y * 2.0) + (-1.0);
    float _818 = dot(vec2(_816, _817), vec2(_816, _817));
    float _4015 = isnan(0.0) ? _818 : (isnan(_818) ? 0.0 : max(_818, 0.0));
    float _834 = (_773 * (((cbMtdParam._m0[22u].z * _728) - _728) + _816)) + _728;
    float _835 = (_773 * (((cbMtdParam._m0[22u].z * _729) - _729) + _817)) + _729;
    float _836 = (_773 * (sqrt(1.0 - (isnan(1.0) ? _4015 : (isnan(_4015) ? 1.0 : min(_4015, 1.0)))) - _702)) + _702;
    float _838 = cbMtdParam._m0[22u].x + _716.w;
    float _841 = fma(_836, _244 * NORMAL.x, fma(_835, _251 * TANGENT.x, (_237 * _229) * _834));
    float _844 = fma(_836, _244 * NORMAL.y, fma(_835, _251 * TANGENT.y, (_237 * _230) * _834));
    float _847 = fma(_836, _244 * NORMAL.z, fma(_835, _251 * TANGENT.z, (_237 * _231) * _834));
    float _851 = inversesqrt(dot(vec3(_841, _844, _847), vec3(_841, _844, _847)));
    float _852 = _851 * _841;
    float _853 = _851 * _844;
    float _854 = _851 * _847;
    float _4026 = isnan(0.0) ? _791 : (isnan(_791) ? 0.0 : max(_791, 0.0));
    float _855 = isnan(1.0) ? _4026 : (isnan(_4026) ? 1.0 : min(_4026, 1.0));
    float _4037 = isnan(0.0) ? _838 : (isnan(_838) ? 0.0 : max(_838, 0.0));
    float _4048 = isnan(0.0) ? _781 : (isnan(_781) ? 0.0 : max(_781, 0.0));
    float _4059 = isnan(0.0) ? _782 : (isnan(_782) ? 0.0 : max(_782, 0.0));
    float _4070 = isnan(0.0) ? _783 : (isnan(_783) ? 0.0 : max(_783, 0.0));
    float _873 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _913 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _923 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _913);
    float _924 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _913);
    float _925 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _913);
    float _929 = inversesqrt(dot(vec3(_923, _924, _925), vec3(_923, _924, _925)));
    float _930 = _923 * _929;
    float _931 = _924 * _929;
    float _932 = _925 * _929;
    float _938 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _939 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _957 = fma(_854, cbSceneParam._m0[5u].z, fma(_853, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _852));
    float _960 = fma(_854, cbSceneParam._m0[6u].z, fma(_853, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _852));
    float _963 = fma(_854, cbSceneParam._m0[7u].z, fma(_853, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _852));
    uint _977 = (_257 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _983 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4048 : (isnan(_4048) ? 1.0 : min(_4048, 1.0)))) * cbInstanceData._m0[_977].x;
    float _984 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4059 : (isnan(_4059) ? 1.0 : min(_4059, 1.0)))) * cbInstanceData._m0[_977].y;
    float _985 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4070 : (isnan(_4070) ? 1.0 : min(_4070, 1.0)))) * cbInstanceData._m0[_977].z;
    float _4081 = isnan(0.0) ? _983 : (isnan(_983) ? 0.0 : max(_983, 0.0));
    float _986 = isnan(1.0) ? _4081 : (isnan(_4081) ? 1.0 : min(_4081, 1.0));
    float _4092 = isnan(0.0) ? _984 : (isnan(_984) ? 0.0 : max(_984, 0.0));
    float _987 = isnan(1.0) ? _4092 : (isnan(_4092) ? 1.0 : min(_4092, 1.0));
    float _4103 = isnan(0.0) ? _985 : (isnan(_985) ? 0.0 : max(_985, 0.0));
    float _988 = isnan(1.0) ? _4103 : (isnan(_4103) ? 1.0 : min(_4103, 1.0));
    vec4 _997 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _938, cbSceneParam._m0[86u].y * _939));
    float _1001 = ((isnan(1.0) ? _4037 : (isnan(_4037) ? 1.0 : min(_4037, 1.0))) * TEXCOORD_5.w) * _997.x;
    float _1002 = dot(vec3(_852, _853, _854), vec3(_930, _931, _932));
    float _1005 = _1002 * 2.0;
    float _1009 = (_1005 * _852) - _930;
    float _1010 = (_1005 * _853) - _931;
    float _1011 = (_1005 * _854) - _932;
    float _1015 = abs(dot(vec3(_930, _931, _932), vec3(_852, _853, _854)));
    float _4114 = isnan(0.0) ? _1015 : (isnan(_1015) ? 0.0 : max(_1015, 0.0));
    float _1017 = sqrt(_855);
    float _1030 = exp2((_1017 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4114 : (isnan(_4114) ? 1.0 : min(_4114, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1017 * 3.0));
    float _1062 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1066 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1070 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1371;
    float _1373;
    float _1374;
    float _1375;
    float _1376;
    float _1377;
    float _1378;
    float _1379;
    float _1380;
    float _1381;
    float _1382;
    float _1383;
    float _1384;
    float _1385;
    float _1386;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1096 = fma(_1070, cbModelParam._m0[26u].z, fma(_1066, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1062));
        float _1100 = fma(_1070, cbModelParam._m0[27u].z, fma(_1066, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1062));
        float _1104 = fma(_1070, cbModelParam._m0[28u].z, fma(_1066, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1062));
        float _1129 = _1062 + _852;
        float _1130 = _1066 + _853;
        float _1131 = _1070 + _854;
        float _1141 = fma(_1131, cbModelParam._m0[26u].z, fma(_1130, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1129)) - _1096;
        float _1142 = fma(_1131, cbModelParam._m0[27u].z, fma(_1130, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1129)) - _1100;
        float _1143 = fma(_1131, cbModelParam._m0[28u].z, fma(_1130, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1129)) - _1104;
        float _1147 = inversesqrt(dot(vec3(_1141, _1142, _1143), vec3(_1141, _1142, _1143)));
        float _1160 = ((_1147 * _1141) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1096 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1161 = ((_1147 * _1142) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1100 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1162 = ((_1147 * _1143) / cbModelParam._m0[34u].z) + ((((((_1104 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1165 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1160, _1161, _1162), 0.0);
        vec4 _1172 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1160, _1161, _1162), 0.0);
        vec4 _1179 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1160, _1161, _1162), 0.0);
        vec4 _1186 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1160, _1161, _1162), 0.0);
        float _1199 = exp2((_1165.w + (-0.5)) * 20.0) * 2.0;
        float _1200 = _1199 * (_1165.x + (-0.5));
        float _1201 = _1199 * (_1165.y + (-0.5));
        float _1202 = _1199 * (_1165.z + (-0.5));
        float _1209 = exp2((_1172.w + (-0.5)) * 20.0) * 2.0;
        float _1210 = _1209 * (_1172.x + (-0.5));
        float _1211 = _1209 * (_1172.y + (-0.5));
        float _1212 = _1209 * (_1172.z + (-0.5));
        float _1219 = exp2((_1179.w + (-0.5)) * 20.0) * 2.0;
        float _1220 = _1219 * (_1179.x + (-0.5));
        float _1221 = _1219 * (_1179.y + (-0.5));
        float _1222 = _1219 * (_1179.z + (-0.5));
        float _1229 = exp2((_1186.w + (-0.5)) * 20.0) * 2.0;
        float _1230 = _1229 * (_1186.x + (-0.5));
        float _1231 = _1229 * (_1186.y + (-0.5));
        float _1232 = _1229 * (_1186.z + (-0.5));
        float _1233 = isnan(0.0) ? _1230 : (isnan(_1230) ? 0.0 : max(_1230, 0.0));
        float _1234 = isnan(0.0) ? _1231 : (isnan(_1231) ? 0.0 : max(_1231, 0.0));
        float _1235 = isnan(0.0) ? _1232 : (isnan(_1232) ? 0.0 : max(_1232, 0.0));
        float _1236 = _1200 * 0.5;
        float _1237 = _1210 * 0.5;
        float _1238 = _1220 * 0.5;
        float _1239 = dot(vec3(_1236, _1237, _1238), vec3(_1236, _1237, _1238));
        float _1244 = (_1239 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1239);
        float _1253 = (dot(vec3(_852, _853, _854), vec3(_1244 * _1236, _1244 * _1237, _1244 * _1238)) + 1.0) * 0.5;
        float _4140 = isnan(0.0) ? _1253 : (isnan(_1253) ? 0.0 : max(_1253, 0.0));
        float _1263 = sqrt(((_1237 * _1237) + (_1236 * _1236)) + (_1238 * _1238)) / (_1233 + 9.9999997473787516355514526367188e-06);
        float _4151 = isnan(0.0) ? _1263 : (isnan(_1263) ? 0.0 : max(_1263, 0.0));
        float _1264 = isnan(1.0) ? _4151 : (isnan(_4151) ? 1.0 : min(_4151, 1.0));
        float _1265 = _1264 * 2.0;
        float _1269 = (1.0 - _1264) / (_1264 + 1.0);
        float _4162 = isnan(0.0) ? _1269 : (isnan(_1269) ? 0.0 : max(_1269, 0.0));
        float _1270 = isnan(1.0) ? _4162 : (isnan(_4162) ? 1.0 : min(_4162, 1.0));
        float _1279 = ((((1.0 - _1270) * (_1265 + 2.0)) * exp2(log2(isnan(1.0) ? _4140 : (isnan(_4140) ? 1.0 : min(_4140, 1.0))) * (_1265 + 1.0))) + _1270) * _1233;
        float _1280 = _1201 * 0.5;
        float _1281 = _1211 * 0.5;
        float _1282 = _1221 * 0.5;
        float _1283 = dot(vec3(_1280, _1281, _1282), vec3(_1280, _1281, _1282));
        float _1288 = (_1283 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1283);
        float _1296 = (dot(vec3(_852, _853, _854), vec3(_1288 * _1280, _1288 * _1281, _1288 * _1282)) + 1.0) * 0.5;
        float _4173 = isnan(0.0) ? _1296 : (isnan(_1296) ? 0.0 : max(_1296, 0.0));
        float _1305 = sqrt(((_1281 * _1281) + (_1280 * _1280)) + (_1282 * _1282)) / (_1234 + 9.9999997473787516355514526367188e-06);
        float _4184 = isnan(0.0) ? _1305 : (isnan(_1305) ? 0.0 : max(_1305, 0.0));
        float _1306 = isnan(1.0) ? _4184 : (isnan(_4184) ? 1.0 : min(_4184, 1.0));
        float _1307 = _1306 * 2.0;
        float _1311 = (1.0 - _1306) / (_1306 + 1.0);
        float _4195 = isnan(0.0) ? _1311 : (isnan(_1311) ? 0.0 : max(_1311, 0.0));
        float _1312 = isnan(1.0) ? _4195 : (isnan(_4195) ? 1.0 : min(_4195, 1.0));
        float _1321 = ((((1.0 - _1312) * (_1307 + 2.0)) * exp2(log2(isnan(1.0) ? _4173 : (isnan(_4173) ? 1.0 : min(_4173, 1.0))) * (_1307 + 1.0))) + _1312) * _1234;
        float _1322 = _1202 * 0.5;
        float _1323 = _1212 * 0.5;
        float _1324 = _1222 * 0.5;
        float _1325 = dot(vec3(_1322, _1323, _1324), vec3(_1322, _1323, _1324));
        float _1330 = (_1325 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1325);
        float _1338 = (dot(vec3(_852, _853, _854), vec3(_1330 * _1322, _1330 * _1323, _1330 * _1324)) + 1.0) * 0.5;
        float _4206 = isnan(0.0) ? _1338 : (isnan(_1338) ? 0.0 : max(_1338, 0.0));
        float _1347 = sqrt(((_1323 * _1323) + (_1322 * _1322)) + (_1324 * _1324)) / (_1235 + 9.9999997473787516355514526367188e-06);
        float _4217 = isnan(0.0) ? _1347 : (isnan(_1347) ? 0.0 : max(_1347, 0.0));
        float _1348 = isnan(1.0) ? _4217 : (isnan(_4217) ? 1.0 : min(_4217, 1.0));
        float _1349 = _1348 * 2.0;
        float _1353 = (1.0 - _1348) / (_1348 + 1.0);
        float _4228 = isnan(0.0) ? _1353 : (isnan(_1353) ? 0.0 : max(_1353, 0.0));
        float _1354 = isnan(1.0) ? _4228 : (isnan(_4228) ? 1.0 : min(_4228, 1.0));
        float _1363 = ((((1.0 - _1354) * (_1349 + 2.0)) * exp2(log2(isnan(1.0) ? _4206 : (isnan(_4206) ? 1.0 : min(_4206, 1.0))) * (_1349 + 1.0))) + _1354) * _1235;
        _1371 = _1202;
        _1373 = _1201;
        _1374 = _1200;
        _1375 = _1212;
        _1376 = _1211;
        _1377 = _1210;
        _1378 = _1222;
        _1379 = _1221;
        _1380 = _1220;
        _1381 = _1235;
        _1382 = _1234;
        _1383 = _1233;
        _1384 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1279 : (isnan(_1279) ? 0.0 : max(_1279, 0.0)));
        _1385 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1321 : (isnan(_1321) ? 0.0 : max(_1321, 0.0)));
        _1386 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1363 : (isnan(_1363) ? 0.0 : max(_1363, 0.0)));
    }
    else
    {
        _1371 = _1372;
        _1373 = _1372;
        _1374 = _1372;
        _1375 = _1372;
        _1376 = _1372;
        _1377 = _1372;
        _1378 = _1372;
        _1379 = _1372;
        _1380 = _1372;
        _1381 = _1372;
        _1382 = _1372;
        _1383 = _1372;
        _1384 = 0.0;
        _1385 = 0.0;
        _1386 = 0.0;
    }
    float _1678;
    float _1679;
    float _1680;
    float _1681;
    float _1682;
    float _1683;
    float _1684;
    float _1685;
    float _1686;
    float _1687;
    float _1688;
    float _1689;
    float _1690;
    float _1691;
    float _1692;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1409 = fma(_1070, cbModelParam._m0[30u].z, fma(_1066, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1062));
        float _1413 = fma(_1070, cbModelParam._m0[31u].z, fma(_1066, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1062));
        float _1417 = fma(_1070, cbModelParam._m0[32u].z, fma(_1066, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1062));
        float _1440 = _1062 + _852;
        float _1441 = _1066 + _853;
        float _1442 = _1070 + _854;
        float _1452 = fma(_1442, cbModelParam._m0[30u].z, fma(_1441, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1440)) - _1409;
        float _1453 = fma(_1442, cbModelParam._m0[31u].z, fma(_1441, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1440)) - _1413;
        float _1454 = fma(_1442, cbModelParam._m0[32u].z, fma(_1441, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1440)) - _1417;
        float _1458 = inversesqrt(dot(vec3(_1452, _1453, _1454), vec3(_1452, _1453, _1454)));
        float _1471 = ((_1458 * _1452) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1409 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1472 = ((_1458 * _1453) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1413 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1473 = ((_1458 * _1454) / cbModelParam._m0[35u].z) + ((((((_1417 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1475 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1471, _1472, _1473), 0.0);
        vec4 _1482 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1471, _1472, _1473), 0.0);
        vec4 _1489 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1471, _1472, _1473), 0.0);
        vec4 _1496 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1471, _1472, _1473), 0.0);
        float _1508 = exp2((_1475.w + (-0.5)) * 20.0) * 2.0;
        float _1509 = _1508 * (_1475.x + (-0.5));
        float _1510 = _1508 * (_1475.y + (-0.5));
        float _1511 = _1508 * (_1475.z + (-0.5));
        float _1518 = exp2((_1482.w + (-0.5)) * 20.0) * 2.0;
        float _1519 = _1518 * (_1482.x + (-0.5));
        float _1520 = _1518 * (_1482.y + (-0.5));
        float _1521 = _1518 * (_1482.z + (-0.5));
        float _1528 = exp2((_1489.w + (-0.5)) * 20.0) * 2.0;
        float _1529 = _1528 * (_1489.x + (-0.5));
        float _1530 = _1528 * (_1489.y + (-0.5));
        float _1531 = _1528 * (_1489.z + (-0.5));
        float _1538 = exp2((_1496.w + (-0.5)) * 20.0) * 2.0;
        float _1539 = _1538 * (_1496.x + (-0.5));
        float _1540 = _1538 * (_1496.y + (-0.5));
        float _1541 = _1538 * (_1496.z + (-0.5));
        float _1542 = isnan(0.0) ? _1539 : (isnan(_1539) ? 0.0 : max(_1539, 0.0));
        float _1543 = isnan(0.0) ? _1540 : (isnan(_1540) ? 0.0 : max(_1540, 0.0));
        float _1544 = isnan(0.0) ? _1541 : (isnan(_1541) ? 0.0 : max(_1541, 0.0));
        float _1545 = _1509 * 0.5;
        float _1546 = _1519 * 0.5;
        float _1547 = _1529 * 0.5;
        float _1548 = dot(vec3(_1545, _1546, _1547), vec3(_1545, _1546, _1547));
        float _1553 = (_1548 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1548);
        float _1561 = (dot(vec3(_852, _853, _854), vec3(_1553 * _1545, _1553 * _1546, _1553 * _1547)) + 1.0) * 0.5;
        float _4269 = isnan(0.0) ? _1561 : (isnan(_1561) ? 0.0 : max(_1561, 0.0));
        float _1570 = sqrt(((_1546 * _1546) + (_1545 * _1545)) + (_1547 * _1547)) / (_1542 + 9.9999997473787516355514526367188e-06);
        float _4280 = isnan(0.0) ? _1570 : (isnan(_1570) ? 0.0 : max(_1570, 0.0));
        float _1571 = isnan(1.0) ? _4280 : (isnan(_4280) ? 1.0 : min(_4280, 1.0));
        float _1572 = _1571 * 2.0;
        float _1576 = (1.0 - _1571) / (_1571 + 1.0);
        float _4291 = isnan(0.0) ? _1576 : (isnan(_1576) ? 0.0 : max(_1576, 0.0));
        float _1577 = isnan(1.0) ? _4291 : (isnan(_4291) ? 1.0 : min(_4291, 1.0));
        float _1586 = ((((1.0 - _1577) * (_1572 + 2.0)) * exp2(log2(isnan(1.0) ? _4269 : (isnan(_4269) ? 1.0 : min(_4269, 1.0))) * (_1572 + 1.0))) + _1577) * _1542;
        float _1587 = _1510 * 0.5;
        float _1588 = _1520 * 0.5;
        float _1589 = _1530 * 0.5;
        float _1590 = dot(vec3(_1587, _1588, _1589), vec3(_1587, _1588, _1589));
        float _1595 = (_1590 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1590);
        float _1603 = (dot(vec3(_852, _853, _854), vec3(_1595 * _1587, _1595 * _1588, _1595 * _1589)) + 1.0) * 0.5;
        float _4302 = isnan(0.0) ? _1603 : (isnan(_1603) ? 0.0 : max(_1603, 0.0));
        float _1612 = sqrt(((_1588 * _1588) + (_1587 * _1587)) + (_1589 * _1589)) / (_1543 + 9.9999997473787516355514526367188e-06);
        float _4313 = isnan(0.0) ? _1612 : (isnan(_1612) ? 0.0 : max(_1612, 0.0));
        float _1613 = isnan(1.0) ? _4313 : (isnan(_4313) ? 1.0 : min(_4313, 1.0));
        float _1614 = _1613 * 2.0;
        float _1618 = (1.0 - _1613) / (_1613 + 1.0);
        float _4324 = isnan(0.0) ? _1618 : (isnan(_1618) ? 0.0 : max(_1618, 0.0));
        float _1619 = isnan(1.0) ? _4324 : (isnan(_4324) ? 1.0 : min(_4324, 1.0));
        float _1628 = ((((1.0 - _1619) * (_1614 + 2.0)) * exp2(log2(isnan(1.0) ? _4302 : (isnan(_4302) ? 1.0 : min(_4302, 1.0))) * (_1614 + 1.0))) + _1619) * _1543;
        float _1629 = _1511 * 0.5;
        float _1630 = _1521 * 0.5;
        float _1631 = _1531 * 0.5;
        float _1632 = dot(vec3(_1629, _1630, _1631), vec3(_1629, _1630, _1631));
        float _1637 = (_1632 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1632);
        float _1645 = (dot(vec3(_852, _853, _854), vec3(_1637 * _1629, _1637 * _1630, _1637 * _1631)) + 1.0) * 0.5;
        float _4335 = isnan(0.0) ? _1645 : (isnan(_1645) ? 0.0 : max(_1645, 0.0));
        float _1654 = sqrt(((_1630 * _1630) + (_1629 * _1629)) + (_1631 * _1631)) / (_1544 + 9.9999997473787516355514526367188e-06);
        float _4346 = isnan(0.0) ? _1654 : (isnan(_1654) ? 0.0 : max(_1654, 0.0));
        float _1655 = isnan(1.0) ? _4346 : (isnan(_4346) ? 1.0 : min(_4346, 1.0));
        float _1656 = _1655 * 2.0;
        float _1660 = (1.0 - _1655) / (_1655 + 1.0);
        float _4357 = isnan(0.0) ? _1660 : (isnan(_1660) ? 0.0 : max(_1660, 0.0));
        float _1661 = isnan(1.0) ? _4357 : (isnan(_4357) ? 1.0 : min(_4357, 1.0));
        float _1670 = ((((1.0 - _1661) * (_1656 + 2.0)) * exp2(log2(isnan(1.0) ? _4335 : (isnan(_4335) ? 1.0 : min(_4335, 1.0))) * (_1656 + 1.0))) + _1661) * _1544;
        _1678 = _1511;
        _1679 = _1510;
        _1680 = _1509;
        _1681 = _1521;
        _1682 = _1520;
        _1683 = _1519;
        _1684 = _1531;
        _1685 = _1530;
        _1686 = _1529;
        _1687 = _1544;
        _1688 = _1543;
        _1689 = _1542;
        _1690 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1586 : (isnan(_1586) ? 0.0 : max(_1586, 0.0)));
        _1691 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1628 : (isnan(_1628) ? 0.0 : max(_1628, 0.0)));
        _1692 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1670 : (isnan(_1670) ? 0.0 : max(_1670, 0.0)));
    }
    else
    {
        _1678 = _1372;
        _1679 = _1372;
        _1680 = _1372;
        _1681 = _1372;
        _1682 = _1372;
        _1683 = _1372;
        _1684 = _1372;
        _1685 = _1372;
        _1686 = _1372;
        _1687 = _1372;
        _1688 = _1372;
        _1689 = _1372;
        _1690 = 0.0;
        _1691 = 0.0;
        _1692 = 0.0;
    }
    float _1702 = (cbModelParam._m0[1u].x * (_1690 - _1384)) + _1384;
    float _1703 = (cbModelParam._m0[1u].x * (_1691 - _1385)) + _1385;
    float _1704 = (cbModelParam._m0[1u].x * (_1692 - _1386)) + _1386;
    float _1725 = fma(_1704, cbSceneParam._m0[89u].z, fma(_1703, cbSceneParam._m0[89u].y, _1702 * cbSceneParam._m0[89u].x));
    float _1728 = fma(_1704, cbSceneParam._m0[90u].z, fma(_1703, cbSceneParam._m0[90u].y, _1702 * cbSceneParam._m0[90u].x));
    float _1731 = fma(_1704, cbSceneParam._m0[91u].z, fma(_1703, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1702));
    float _1746 = _1009 * 0.5;
    float _1747 = _1010 * 0.5;
    float _1748 = _1011 * 0.5;
    float _1749 = dot(vec4(_1746, _1747, _1748, 1.0), vec4(_1680, _1683, _1686, _1689));
    float _1752 = dot(vec4(_1746, _1747, _1748, 1.0), vec4(_1679, _1682, _1685, _1688));
    float _1755 = dot(vec4(_1746, _1747, _1748, 1.0), vec4(_1678, _1681, _1684, _1687));
    float _1789;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1762 = dot(vec4(_1746, _1747, _1748, 1.0), vec4(_1371, _1375, _1378, _1381));
        float _1766 = dot(vec4(_1746, _1747, _1748, 1.0), vec4(_1373, _1376, _1379, _1382));
        float _1770 = dot(vec4(_1746, _1747, _1748, 1.0), vec4(_1374, _1377, _1380, _1383));
        float _1777 = dot(vec4(cbModelParam._m0[39u]), vec4(_1746, _1747, _1748, 1.0));
        _1789 = dot(vec3(isnan(0.0) ? _1770 : (isnan(_1770) ? 0.0 : max(_1770, 0.0)), isnan(0.0) ? _1766 : (isnan(_1766) ? 0.0 : max(_1766, 0.0)), isnan(0.0) ? _1762 : (isnan(_1762) ? 0.0 : max(_1762, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1777) ? 0.0 : (isnan(0.0) ? _1777 : max(0.0, _1777))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1789 = 1.0;
    }
    float _1800;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1791 = dot(vec4(cbModelParam._m0[40u]), vec4(_1746, _1747, _1748, 1.0));
        _1800 = dot(vec3(isnan(0.0) ? _1749 : (isnan(_1749) ? 0.0 : max(_1749, 0.0)), isnan(0.0) ? _1752 : (isnan(_1752) ? 0.0 : max(_1752, 0.0)), isnan(0.0) ? _1755 : (isnan(_1755) ? 0.0 : max(_1755, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1791) ? 0.0 : (isnan(0.0) ? _1791 : max(0.0, _1791))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1800 = 1.0;
    }
    float _1804 = (_1800 * cbModelParam._m0[1u].x) + (_1789 * (1.0 - cbModelParam._m0[1u].x));
    float _1814 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _855);
    float _1815 = isnan(_1814) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1814 : min(cbModelParam._m0[25u].z, _1814));
    float _1896;
    float _1898;
    float _1900;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1863 = fma(_1070, cbModelParam._m0[13u].z, fma(_1066, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1062)) + cbModelParam._m0[13u].w;
        float _1867 = fma(_1070, cbModelParam._m0[14u].z, fma(_1066, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1062)) + cbModelParam._m0[14u].w;
        float _1871 = fma(_1070, cbModelParam._m0[15u].z, fma(_1066, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1062)) + cbModelParam._m0[15u].w;
        float _1874 = fma(_1011, cbModelParam._m0[13u].z, fma(_1010, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1009));
        float _1877 = fma(_1011, cbModelParam._m0[14u].z, fma(_1010, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1009));
        float _1880 = fma(_1011, cbModelParam._m0[15u].z, fma(_1010, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1009));
        float _1908;
        if (_1874 > 0.0)
        {
            _1908 = abs((1.0 - _1863) / _1874);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1874 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1863 + 1.0) / _1874);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1908 = frontier_phi_14_12_ladder;
        }
        float _2079;
        if (_1877 > 0.0)
        {
            _2079 = abs((1.0 - _1867) / _1877);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1877 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1867 + 1.0) / _1877);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2079 = frontier_phi_23_19_ladder;
        }
        float _2374;
        if (_1880 > 0.0)
        {
            _2374 = abs((1.0 - _1871) / _1880);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1880 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1871 + 1.0) / _1880);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2374 = frontier_phi_35_30_ladder;
        }
        float _2376 = isnan(_2079) ? _1908 : (isnan(_1908) ? _2079 : min(_1908, _2079));
        float _2377 = isnan(_2374) ? _2376 : (isnan(_2376) ? _2374 : min(_2376, _2374));
        float _2381 = (_2377 * _1874) + _1863;
        float _2382 = (_2377 * _1877) + _1867;
        float _2383 = (_2377 * _1880) + _1871;
        float _2384 = _2377 * 9.9999997473787516355514526367188e-05;
        float _2386 = (-1.0) - _2384;
        float _2388 = _2384 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2383 > _2388) || ((_2383 < _2386) || ((_2382 > _2388) || ((_2382 < _2386) || ((_2381 < _2386) || (_2381 > _2388))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2528 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2383, cbModelParam._m0[9u].z, fma(_2382, cbModelParam._m0[9u].y, _2381 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2383, cbModelParam._m0[10u].z, fma(_2382, cbModelParam._m0[10u].y, _2381 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2383, cbModelParam._m0[11u].z, fma(_2382, cbModelParam._m0[11u].y, _2381 * cbModelParam._m0[11u].x))), _1815);
            frontier_phi_13_35_ladder = _2528.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2528.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2528.x * cbModelParam._m0[1u].y;
        }
        _1896 = frontier_phi_13_35_ladder_2;
        _1898 = frontier_phi_13_35_ladder_1;
        _1900 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1884 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1009, _1010, _1011), _1815);
        _1896 = _1884.x * cbModelParam._m0[1u].y;
        _1898 = _1884.y * cbModelParam._m0[1u].y;
        _1900 = _1884.z * cbModelParam._m0[1u].y;
    }
    float _1904 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _855);
    float _1905 = isnan(_1904) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1904 : min(cbModelParam._m0[25u].w, _1904));
    float _1996;
    float _1998;
    float _2000;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1960 = fma(_1070, cbModelParam._m0[21u].z, fma(_1066, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1062)) + cbModelParam._m0[21u].w;
        float _1964 = fma(_1070, cbModelParam._m0[22u].z, fma(_1066, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1062)) + cbModelParam._m0[22u].w;
        float _1968 = fma(_1070, cbModelParam._m0[23u].z, fma(_1066, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1062)) + cbModelParam._m0[23u].w;
        float _1971 = fma(_1011, cbModelParam._m0[21u].z, fma(_1010, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1009));
        float _1974 = fma(_1011, cbModelParam._m0[22u].z, fma(_1010, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1009));
        float _1977 = fma(_1011, cbModelParam._m0[23u].z, fma(_1010, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1009));
        float _2084;
        if (_1971 > 0.0)
        {
            _2084 = abs((1.0 - _1960) / _1971);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1971 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1960 + 1.0) / _1971);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2084 = frontier_phi_25_21_ladder;
        }
        float _2401;
        if (_1974 > 0.0)
        {
            _2401 = abs((1.0 - _1964) / _1974);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1974 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1964 + 1.0) / _1974);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2401 = frontier_phi_37_32_ladder;
        }
        float _2728;
        if (_1977 > 0.0)
        {
            _2728 = abs((1.0 - _1968) / _1977);
        }
        else
        {
            float frontier_phi_47_44_ladder;
            if (_1977 < 0.0)
            {
                frontier_phi_47_44_ladder = abs((_1968 + 1.0) / _1977);
            }
            else
            {
                frontier_phi_47_44_ladder = 5000.0;
            }
            _2728 = frontier_phi_47_44_ladder;
        }
        float _2730 = isnan(_2401) ? _2084 : (isnan(_2084) ? _2401 : min(_2084, _2401));
        float _2731 = isnan(_2728) ? _2730 : (isnan(_2730) ? _2728 : min(_2730, _2728));
        float _2735 = (_2731 * _1971) + _1960;
        float _2736 = (_2731 * _1974) + _1964;
        float _2737 = (_2731 * _1977) + _1968;
        float _2738 = _2731 * 9.9999997473787516355514526367188e-05;
        float _2739 = (-1.0) - _2738;
        float _2741 = _2738 + 1.0;
        float frontier_phi_22_47_ladder;
        float frontier_phi_22_47_ladder_1;
        float frontier_phi_22_47_ladder_2;
        if ((_2737 > _2741) || ((_2737 < _2739) || ((_2736 > _2741) || ((_2736 < _2739) || ((_2735 < _2739) || (_2735 > _2741))))))
        {
            frontier_phi_22_47_ladder = 0.0;
            frontier_phi_22_47_ladder_1 = 0.0;
            frontier_phi_22_47_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2855 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2737, cbModelParam._m0[17u].z, fma(_2736, cbModelParam._m0[17u].y, _2735 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2737, cbModelParam._m0[18u].z, fma(_2736, cbModelParam._m0[18u].y, _2735 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2737, cbModelParam._m0[19u].z, fma(_2736, cbModelParam._m0[19u].y, _2735 * cbModelParam._m0[19u].x))), _1905);
            frontier_phi_22_47_ladder = _2855.z * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_1 = _2855.y * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_2 = _2855.x * cbModelParam._m0[1u].z;
        }
        _1996 = frontier_phi_22_47_ladder_2;
        _1998 = frontier_phi_22_47_ladder_1;
        _2000 = frontier_phi_22_47_ladder;
    }
    else
    {
        vec4 _1980 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1009, _1010, _1011), _1905);
        _1996 = _1980.x * cbModelParam._m0[1u].z;
        _1998 = _1980.y * cbModelParam._m0[1u].z;
        _2000 = _1980.z * cbModelParam._m0[1u].z;
    }
    float _2012 = ((((1.0 - _1030) * ((_1017 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_1030 * _1017)) * _1001;
    float _2013 = _2012 * ((cbModelParam._m0[1u].w * (_1996 - _1896)) + _1896);
    float _2014 = _2012 * ((cbModelParam._m0[1u].w * (_1998 - _1898)) + _1898);
    float _2015 = _2012 * ((cbModelParam._m0[1u].w * (_2000 - _1900)) + _1900);
    float _2018 = fma(_2015, cbSceneParam._m0[89u].z, fma(_2014, cbSceneParam._m0[89u].y, _2013 * cbSceneParam._m0[89u].x));
    float _2021 = fma(_2015, cbSceneParam._m0[90u].z, fma(_2014, cbSceneParam._m0[90u].y, _2013 * cbSceneParam._m0[90u].x));
    float _2024 = fma(_2015, cbSceneParam._m0[91u].z, fma(_2014, cbSceneParam._m0[91u].y, _2013 * cbSceneParam._m0[91u].x));
    float _2058 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2062 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2066 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2070 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2071 = _2058 / _2070;
    float _2072 = _2062 / _2070;
    float _2073 = _2066 / _2070;
    float _2220;
    float _2221;
    float _2222;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2100 = ((uint(_2073 > cbSceneParam._m0[59u].y) + uint(_2073 > cbSceneParam._m0[59u].x)) + uint(_2073 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2101 = _2100 + 43u;
        uint _2109 = _2100 + 44u;
        uint _2117 = _2100 + 45u;
        uint _2125 = _2100 + 46u;
        float _2136 = fma(_2070, cbSceneParam._m0[_2101].w, fma(_2066, cbSceneParam._m0[_2101].z, fma(_2062, cbSceneParam._m0[_2101].y, _2058 * cbSceneParam._m0[_2101].x)));
        float _2140 = fma(_2070, cbSceneParam._m0[_2109].w, fma(_2066, cbSceneParam._m0[_2109].z, fma(_2062, cbSceneParam._m0[_2109].y, _2058 * cbSceneParam._m0[_2109].x)));
        float _2148 = fma(_2070, cbSceneParam._m0[_2125].w, fma(_2066, cbSceneParam._m0[_2125].z, fma(_2062, cbSceneParam._m0[_2125].y, _2058 * cbSceneParam._m0[_2125].x)));
        float _2153 = cbSceneParam._m0[33u].z * _2148;
        float _2155 = cbSceneParam._m0[33u].w * _2148;
        float _2158 = fma(_2070, cbSceneParam._m0[_2117].w, fma(_2066, cbSceneParam._m0[_2117].z, fma(_2062, cbSceneParam._m0[_2117].y, _2058 * cbSceneParam._m0[_2117].x))) / _2148;
        float _2206 = (cbSceneParam._m0[33u].x - sqrt(((_2072 * _2072) + (_2071 * _2071)) + (_2073 * _2073))) * cbSceneParam._m0[33u].y;
        float _4483 = isnan(0.0) ? _2206 : (isnan(_2206) ? 0.0 : max(_2206, 0.0));
        float _2213 = (isnan(1.0) ? _4483 : (isnan(_4483) ? 1.0 : min(_4483, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2153 + _2136) / _2148, (_2155 + _2140) / _2148), _2158), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2155 + _2136) / _2148, (_2140 - _2153) / _2148), _2158), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2136 - _2153) / _2148, (_2140 - _2155) / _2148), _2158), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2136 - _2155) / _2148, (_2153 + _2140) / _2148), _2158), 0.0)).x), vec4(0.25)));
        _2220 = 1.0 - (_2213 * cbSceneParam._m0[34u].x);
        _2221 = 1.0 - (_2213 * cbSceneParam._m0[34u].y);
        _2222 = 1.0 - (_2213 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2220 = 1.0;
        _2221 = 1.0;
        _2222 = 1.0;
    }
    float _2286;
    float _2288;
    float _2290;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2274 = fma(_2070, cbSceneParam._m0[63u].w, fma(_2066, cbSceneParam._m0[63u].z, fma(_2062, cbSceneParam._m0[63u].y, _2058 * cbSceneParam._m0[63u].x)));
        float _2275 = fma(_2070, cbSceneParam._m0[60u].w, fma(_2066, cbSceneParam._m0[60u].z, fma(_2062, cbSceneParam._m0[60u].y, _2058 * cbSceneParam._m0[60u].x))) / _2274;
        float _2276 = fma(_2070, cbSceneParam._m0[61u].w, fma(_2066, cbSceneParam._m0[61u].z, fma(_2062, cbSceneParam._m0[61u].y, _2058 * cbSceneParam._m0[61u].x))) / _2274;
        float frontier_phi_34_33_ladder;
        float frontier_phi_34_33_ladder_1;
        float frontier_phi_34_33_ladder_2;
        if ((((_2275 >= cbSceneParam._m0[64u].x) && (_2276 >= cbSceneParam._m0[64u].y)) && (_2275 <= cbSceneParam._m0[64u].z)) && (_2276 <= cbSceneParam._m0[64u].w))
        {
            float _2414 = fma(_2070, cbSceneParam._m0[62u].w, fma(_2066, cbSceneParam._m0[62u].z, fma(_2062, cbSceneParam._m0[62u].y, _2058 * cbSceneParam._m0[62u].x))) / _2274;
            float _2418 = isnan(cbSceneParam._m0[41u].w) ? _2414 : (isnan(_2414) ? cbSceneParam._m0[41u].w : max(_2414, cbSceneParam._m0[41u].w));
            float _2461 = (cbSceneParam._m0[33u].x - sqrt(((_2072 * _2072) + (_2071 * _2071)) + (_2073 * _2073))) * cbSceneParam._m0[33u].y;
            float _4499 = isnan(0.0) ? _2461 : (isnan(_2461) ? 0.0 : max(_2461, 0.0));
            float _2468 = (isnan(1.0) ? _4499 : (isnan(_4499) ? 1.0 : min(_4499, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2275, cbSceneParam._m0[33u].w + _2276), _2418), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2275, _2276 - cbSceneParam._m0[33u].z), _2418), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2275 - cbSceneParam._m0[33u].z, _2276 - cbSceneParam._m0[33u].w), _2418), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2275 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2276), _2418), 0.0)).x), vec4(0.25)));
            float _2472 = 1.0 - (_2468 * cbSceneParam._m0[34u].x);
            float _2473 = 1.0 - (_2468 * cbSceneParam._m0[34u].y);
            float _2474 = 1.0 - (_2468 * cbSceneParam._m0[34u].z);
            frontier_phi_34_33_ladder = isnan(_2474) ? _2222 : (isnan(_2222) ? _2474 : min(_2222, _2474));
            frontier_phi_34_33_ladder_1 = isnan(_2473) ? _2221 : (isnan(_2221) ? _2473 : min(_2221, _2473));
            frontier_phi_34_33_ladder_2 = isnan(_2472) ? _2220 : (isnan(_2220) ? _2472 : min(_2220, _2472));
        }
        else
        {
            frontier_phi_34_33_ladder = _2222;
            frontier_phi_34_33_ladder_1 = _2221;
            frontier_phi_34_33_ladder_2 = _2220;
        }
        _2286 = frontier_phi_34_33_ladder_2;
        _2288 = frontier_phi_34_33_ladder_1;
        _2290 = frontier_phi_34_33_ladder;
    }
    else
    {
        _2286 = _2220;
        _2288 = _2221;
        _2290 = _2222;
    }
    uvec4 _2295 = floatBitsToUint(cbInstanceData._m0[_257 + 5u]);
    uint _2297 = _2295.x * 14u;
    uint _2298 = _2297 + 13u;
    float _2305 = _1001 + (-1.0);
    float _2310 = (cbLight._m0[_2298].x * _2305) + 1.0;
    float _2311 = (cbLight._m0[_2298].y * _2305) + 1.0;
    float _2312 = (cbLight._m0[_2298].z * _2305) + 1.0;
    float _2313 = (cbLight._m0[_2298].w * _2305) + 1.0;
    uint _2314 = _2297 + 5u;
    float _2320 = isnan(1.0) ? _2311 : (isnan(_2311) ? 1.0 : min(_2311, 1.0));
    uint _2324 = _2297 + 4u;
    float _2333 = isnan(1.0) ? _2310 : (isnan(_2310) ? 1.0 : min(_2310, 1.0));
    uint _2337 = _2297 | 1u;
    float _2348 = dot(vec3(cbLight._m0[_2297].xyz), vec3(_852, _853, _854));
    float _2351 = dot(vec3(cbLight._m0[_2337].xyz), vec3(_852, _853, _854));
    float _4535 = isnan(0.0) ? _2348 : (isnan(_2348) ? 0.0 : max(_2348, 0.0));
    float _4546 = isnan(0.0) ? _2351 : (isnan(_2351) ? 0.0 : max(_2351, 0.0));
    float _2356 = (isnan(1.0) ? _4535 : (isnan(_4535) ? 1.0 : min(_4535, 1.0))) * 0.3183098733425140380859375;
    float _2358 = (isnan(1.0) ? _4546 : (isnan(_4546) ? 1.0 : min(_4546, 1.0))) * 0.3183098733425140380859375;
    float _2365 = ((cbLight._m0[_2314].x * _2320) * _2358) + (((cbLight._m0[_2324].x * _2286) * _2333) * _2356);
    float _2366 = ((_2320 * cbLight._m0[_2314].y) * _2358) + (((cbLight._m0[_2324].y * _2288) * _2333) * _2356);
    float _2367 = ((_2320 * cbLight._m0[_2314].z) * _2358) + (((cbLight._m0[_2324].z * _2290) * _2333) * _2356);
    uvec4 _2371 = floatBitsToUint(cbLight._m0[_2297 + 12u]);
    bool _2373 = _2371.x == 0u;
    float _2475;
    float _2477;
    float _2479;
    if (_2373)
    {
        _2475 = _2365;
        _2477 = _2366;
        _2479 = _2367;
    }
    else
    {
        uint _2483 = _2297 + 6u;
        float _2499 = (dot(vec3(cbLight._m0[_2297 + 2u].xyz), vec3(_852, _853, _854)) * 0.5) + 0.5;
        float _2500 = _2499 * _2499;
        float _4557 = isnan(0.0) ? _2500 : (isnan(_2500) ? 0.0 : max(_2500, 0.0));
        float _2501 = isnan(1.0) ? _4557 : (isnan(_4557) ? 1.0 : min(_4557, 1.0));
        float _2502 = isnan(1.0) ? _2312 : (isnan(_2312) ? 1.0 : min(_2312, 1.0));
        _2475 = (((cbLight._m0[_2483].x * 0.3183098733425140380859375) * _2501) * _2502) + _2365;
        _2477 = (((cbLight._m0[_2483].y * 0.3183098733425140380859375) * _2501) * _2502) + _2366;
        _2479 = (((cbLight._m0[_2483].z * 0.3183098733425140380859375) * _2501) * _2502) + _2367;
    }
    bool _2482 = _2371.y == 0u;
    float _2537;
    float _2539;
    float _2541;
    if (_2482)
    {
        _2537 = _2475;
        _2539 = _2477;
        _2541 = _2479;
    }
    else
    {
        uint _2699 = _2297 + 7u;
        float _2715 = (dot(vec3(cbLight._m0[_2297 + 3u].xyz), vec3(_852, _853, _854)) * 0.5) + 0.5;
        float _2716 = _2715 * _2715;
        float _4573 = isnan(0.0) ? _2716 : (isnan(_2716) ? 0.0 : max(_2716, 0.0));
        float _2717 = isnan(1.0) ? _4573 : (isnan(_4573) ? 1.0 : min(_4573, 1.0));
        float _2718 = isnan(1.0) ? _2313 : (isnan(_2313) ? 1.0 : min(_2313, 1.0));
        _2537 = (((cbLight._m0[_2699].x * 0.3183098733425140380859375) * _2717) * _2718) + _2475;
        _2539 = (((cbLight._m0[_2699].y * 0.3183098733425140380859375) * _2717) * _2718) + _2477;
        _2541 = (((cbLight._m0[_2699].z * 0.3183098733425140380859375) * _2717) * _2718) + _2479;
    }
    uint _2544 = _2297 + 8u;
    float _2557 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2297].w)) * _855) * 0.949999988079071044921875);
    float _2558 = _2557 * _2557;
    float _2559 = cbLight._m0[_2297].x + _930;
    float _2560 = cbLight._m0[_2297].y + _931;
    float _2561 = cbLight._m0[_2297].z + _932;
    float _2565 = inversesqrt(dot(vec3(_2559, _2560, _2561), vec3(_2559, _2560, _2561)));
    float _2566 = _2565 * _2559;
    float _2567 = _2565 * _2560;
    float _2568 = _2565 * _2561;
    float _2569 = dot(vec3(_852, _853, _854), vec3(cbLight._m0[_2297].xyz));
    float _4589 = isnan(0.0) ? _2569 : (isnan(_2569) ? 0.0 : max(_2569, 0.0));
    float _2572 = isnan(1.0) ? _4589 : (isnan(_4589) ? 1.0 : min(_4589, 1.0));
    float _4600 = isnan(0.0) ? _1002 : (isnan(_1002) ? 0.0 : max(_1002, 0.0));
    float _2573 = isnan(1.0) ? _4600 : (isnan(_4600) ? 1.0 : min(_4600, 1.0));
    float _2574 = dot(vec3(_852, _853, _854), vec3(_2566, _2567, _2568));
    float _4611 = isnan(0.0) ? _2574 : (isnan(_2574) ? 0.0 : max(_2574, 0.0));
    float _2577 = isnan(1.0) ? _4611 : (isnan(_4611) ? 1.0 : min(_4611, 1.0));
    float _2578 = dot(vec3(cbLight._m0[_2297].xyz), vec3(_2566, _2567, _2568));
    float _4622 = isnan(0.0) ? _2578 : (isnan(_2578) ? 0.0 : max(_2578, 0.0));
    float _2582 = _2558 * _2558;
    float _2586 = ((_2577 * _2577) * (_2582 + (-1.0))) + 1.0;
    float _2597 = (exp2(log2(1.0 - (isnan(1.0) ? _4622 : (isnan(_4622) ? 1.0 : min(_4622, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2598 = 1.0 - _2558;
    float _2609 = (0.5 / (((_2573 * ((_2572 * _2598) + _2558)) + 9.9999999392252902907785028219223e-09) + (((_2573 * _2598) + _2558) * _2572))) * _2572;
    float _4633 = isnan(0.0) ? _2609 : (isnan(_2609) ? 0.0 : max(_2609, 0.0));
    float _2611 = (isnan(1.0) ? _4633 : (isnan(_4633) ? 1.0 : min(_4633, 1.0))) * (_2582 / ((_2586 * _2586) * 3.141590118408203125));
    uint _2625 = _2297 + 9u;
    float _2636 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2337].w)) * _855) * 0.949999988079071044921875);
    float _2637 = _2636 * _2636;
    float _2638 = cbLight._m0[_2337].x + _930;
    float _2639 = cbLight._m0[_2337].y + _931;
    float _2640 = cbLight._m0[_2337].z + _932;
    float _2644 = inversesqrt(dot(vec3(_2638, _2639, _2640), vec3(_2638, _2639, _2640)));
    float _2645 = _2644 * _2638;
    float _2646 = _2644 * _2639;
    float _2647 = _2644 * _2640;
    float _2648 = dot(vec3(_852, _853, _854), vec3(cbLight._m0[_2337].xyz));
    float _4644 = isnan(0.0) ? _2648 : (isnan(_2648) ? 0.0 : max(_2648, 0.0));
    float _2651 = isnan(1.0) ? _4644 : (isnan(_4644) ? 1.0 : min(_4644, 1.0));
    float _2652 = dot(vec3(_852, _853, _854), vec3(_2645, _2646, _2647));
    float _4655 = isnan(0.0) ? _2652 : (isnan(_2652) ? 0.0 : max(_2652, 0.0));
    float _2655 = isnan(1.0) ? _4655 : (isnan(_4655) ? 1.0 : min(_4655, 1.0));
    float _2656 = dot(vec3(cbLight._m0[_2337].xyz), vec3(_2645, _2646, _2647));
    float _4666 = isnan(0.0) ? _2656 : (isnan(_2656) ? 0.0 : max(_2656, 0.0));
    float _2660 = _2637 * _2637;
    float _2664 = ((_2655 * _2655) * (_2660 + (-1.0))) + 1.0;
    float _2673 = (exp2(log2(1.0 - (isnan(1.0) ? _4666 : (isnan(_4666) ? 1.0 : min(_4666, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2674 = 1.0 - _2637;
    float _2684 = (0.5 / (((_2573 * ((_2651 * _2674) + _2637)) + 9.9999999392252902907785028219223e-09) + (((_2573 * _2674) + _2637) * _2651))) * _2651;
    float _4677 = isnan(0.0) ? _2684 : (isnan(_2684) ? 0.0 : max(_2684, 0.0));
    float _2686 = (isnan(1.0) ? _4677 : (isnan(_4677) ? 1.0 : min(_4677, 1.0))) * (_2660 / ((_2664 * _2664) * 3.141590118408203125));
    float _2696 = (((_2673 * cbLight._m0[_2625].x) * _2686) * _2320) + ((((cbLight._m0[_2544].x * _2286) * _2597) * _2611) * _2333);
    float _2697 = (((_2673 * cbLight._m0[_2625].y) * _2686) * _2320) + ((((cbLight._m0[_2544].y * _2288) * _2597) * _2611) * _2333);
    float _2698 = (((_2673 * cbLight._m0[_2625].z) * _2686) * _2320) + ((((cbLight._m0[_2544].z * _2290) * _2597) * _2611) * _2333);
    float _2754;
    float _2756;
    float _2758;
    if (_2373)
    {
        _2754 = _2696;
        _2756 = _2697;
        _2758 = _2698;
    }
    else
    {
        uint _2760 = _2297 + 2u;
        uint _2764 = _2297 + 10u;
        float _2778 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2760].w)) * _855) * 0.949999988079071044921875);
        float _2779 = _2778 * _2778;
        float _2780 = cbLight._m0[_2760].x + _930;
        float _2781 = cbLight._m0[_2760].y + _931;
        float _2782 = cbLight._m0[_2760].z + _932;
        float _2786 = inversesqrt(dot(vec3(_2780, _2781, _2782), vec3(_2780, _2781, _2782)));
        float _2787 = _2786 * _2780;
        float _2788 = _2786 * _2781;
        float _2789 = _2786 * _2782;
        float _2790 = dot(vec3(_852, _853, _854), vec3(cbLight._m0[_2760].xyz));
        float _4688 = isnan(0.0) ? _2790 : (isnan(_2790) ? 0.0 : max(_2790, 0.0));
        float _2793 = isnan(1.0) ? _4688 : (isnan(_4688) ? 1.0 : min(_4688, 1.0));
        float _2794 = dot(vec3(_852, _853, _854), vec3(_2787, _2788, _2789));
        float _4699 = isnan(0.0) ? _2794 : (isnan(_2794) ? 0.0 : max(_2794, 0.0));
        float _2797 = isnan(1.0) ? _4699 : (isnan(_4699) ? 1.0 : min(_4699, 1.0));
        float _2798 = dot(vec3(cbLight._m0[_2760].xyz), vec3(_2787, _2788, _2789));
        float _4710 = isnan(0.0) ? _2798 : (isnan(_2798) ? 0.0 : max(_2798, 0.0));
        float _2802 = _2779 * _2779;
        float _2806 = ((_2797 * _2797) * (_2802 + (-1.0))) + 1.0;
        float _2815 = (exp2(log2(1.0 - (isnan(1.0) ? _4710 : (isnan(_4710) ? 1.0 : min(_4710, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2816 = 1.0 - _2779;
        float _2826 = (0.5 / (((_2573 * ((_2793 * _2816) + _2779)) + 9.9999999392252902907785028219223e-09) + (((_2573 * _2816) + _2779) * _2793))) * _2793;
        float _4721 = isnan(0.0) ? _2826 : (isnan(_2826) ? 0.0 : max(_2826, 0.0));
        float _2828 = (isnan(1.0) ? _4721 : (isnan(_4721) ? 1.0 : min(_4721, 1.0))) * (_2802 / ((_2806 * _2806) * 3.141590118408203125));
        float _2829 = isnan(1.0) ? _2312 : (isnan(_2312) ? 1.0 : min(_2312, 1.0));
        _2754 = (((_2815 * cbLight._m0[_2764].x) * _2828) * _2829) + _2696;
        _2756 = (((_2815 * cbLight._m0[_2764].y) * _2828) * _2829) + _2697;
        _2758 = (((_2815 * cbLight._m0[_2764].z) * _2828) * _2829) + _2698;
    }
    float _2860;
    float _2862;
    float _2864;
    if (_2482)
    {
        _2860 = _2754;
        _2862 = _2756;
        _2864 = _2758;
    }
    else
    {
        uint _2871 = _2297 + 3u;
        uint _2875 = _2297 + 11u;
        float _2889 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2871].w)) * _855) * 0.949999988079071044921875);
        float _2890 = _2889 * _2889;
        float _2891 = cbLight._m0[_2871].x + _930;
        float _2892 = cbLight._m0[_2871].y + _931;
        float _2893 = cbLight._m0[_2871].z + _932;
        float _2897 = inversesqrt(dot(vec3(_2891, _2892, _2893), vec3(_2891, _2892, _2893)));
        float _2898 = _2897 * _2891;
        float _2899 = _2897 * _2892;
        float _2900 = _2897 * _2893;
        float _2901 = dot(vec3(_852, _853, _854), vec3(cbLight._m0[_2871].xyz));
        float _4737 = isnan(0.0) ? _2901 : (isnan(_2901) ? 0.0 : max(_2901, 0.0));
        float _2904 = isnan(1.0) ? _4737 : (isnan(_4737) ? 1.0 : min(_4737, 1.0));
        float _2905 = dot(vec3(_852, _853, _854), vec3(_2898, _2899, _2900));
        float _4748 = isnan(0.0) ? _2905 : (isnan(_2905) ? 0.0 : max(_2905, 0.0));
        float _2908 = isnan(1.0) ? _4748 : (isnan(_4748) ? 1.0 : min(_4748, 1.0));
        float _2909 = dot(vec3(cbLight._m0[_2871].xyz), vec3(_2898, _2899, _2900));
        float _4759 = isnan(0.0) ? _2909 : (isnan(_2909) ? 0.0 : max(_2909, 0.0));
        float _2913 = _2890 * _2890;
        float _2917 = ((_2908 * _2908) * (_2913 + (-1.0))) + 1.0;
        float _2926 = (exp2(log2(1.0 - (isnan(1.0) ? _4759 : (isnan(_4759) ? 1.0 : min(_4759, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2927 = 1.0 - _2890;
        float _2937 = (0.5 / (((_2573 * ((_2904 * _2927) + _2890)) + 9.9999999392252902907785028219223e-09) + (((_2573 * _2927) + _2890) * _2904))) * _2904;
        float _4770 = isnan(0.0) ? _2937 : (isnan(_2937) ? 0.0 : max(_2937, 0.0));
        float _2939 = (isnan(1.0) ? _4770 : (isnan(_4770) ? 1.0 : min(_4770, 1.0))) * (_2913 / ((_2917 * _2917) * 3.141590118408203125));
        float _2940 = isnan(1.0) ? _2313 : (isnan(_2313) ? 1.0 : min(_2313, 1.0));
        _2860 = (((_2926 * cbLight._m0[_2875].x) * _2939) * _2940) + _2754;
        _2862 = (((_2926 * cbLight._m0[_2875].y) * _2939) * _2940) + _2756;
        _2864 = (((_2926 * cbLight._m0[_2875].z) * _2939) * _2940) + _2758;
    }
    float _3006;
    float _3008;
    float _3010;
    float _3012;
    float _3014;
    float _3016;
    if (_2295.y == 0u)
    {
        uvec4 _2961 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2962 = _2961.x;
        uint _2973 = uint((float(_2961.y) * floor(float(uint(cbSceneParam._m0[85u].y * _939) / _2962))) + floor(float(uint(cbSceneParam._m0[85u].x * _938) / _2962)));
        float _2983 = (log2(_2073 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2984 = isnan(0.0) ? _2983 : (isnan(_2983) ? 0.0 : max(_2983, 0.0));
        uint _2987 = uint(isnan(14.0) ? _2984 : (isnan(_2984) ? 14.0 : min(_2984, 14.0)));
        uvec4 _2992 = texelFetch(g_lightClusterGridBuffer, int(((_2987 << 2u) + (_2973 << 6u)) >> 2u));
        uint _2993 = _2992.x;
        uint _2994 = _2961.z;
        float _3073;
        float _3075;
        float _3077;
        float _3079;
        float _3081;
        float _3083;
        if (((((1u << ((_2994 >> 4u) & 15u)) + 4294967295u) & _2993) == 0u) || ((_2994 & 240u) == 0u))
        {
            _3073 = 0.0;
            _3075 = 0.0;
            _3077 = 0.0;
            _3079 = 0.0;
            _3081 = 0.0;
            _3083 = 0.0;
        }
        else
        {
            float _3074;
            float _3076;
            float _3078;
            float _3080;
            float _3082;
            float _3084;
            float _3218 = 0.0;
            float _3219 = 0.0;
            float _3220 = 0.0;
            float _3221 = 0.0;
            float _3222 = 0.0;
            float _3223 = 0.0;
            uint _3224 = 0u;
            uint _3233;
            bool _3234;
            for (;;)
            {
                _3233 = texelFetch(g_lightClassification, int((((_2987 << 5u) + (_2973 << 9u)) + (_3224 << 2u)) >> 2u)).x;
                _3234 = _3233 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3234)
                {
                    frontier_phi_66_pred = _3223;
                    frontier_phi_66_pred_1 = _3222;
                    frontier_phi_66_pred_2 = _3221;
                    frontier_phi_66_pred_3 = _3220;
                    frontier_phi_66_pred_4 = _3219;
                    frontier_phi_66_pred_5 = _3218;
                }
                else
                {
                    float _3342;
                    float _3343;
                    float _3344;
                    float _3345;
                    float _3346;
                    float _3347;
                    uint _3348;
                    _3342 = _3218;
                    _3343 = _3219;
                    _3344 = _3220;
                    _3345 = _3221;
                    _3346 = _3222;
                    _3347 = _3223;
                    _3348 = _3233;
                    float _3274;
                    float _3275;
                    float _3276;
                    float _3277;
                    float _3278;
                    float _3279;
                    for (;;)
                    {
                        uint _3352 = uint(findLSB(_3348)) + (_3224 << 5u);
                        uint _3349 = (_3348 + 4294967295u) & _3348;
                        uint _3354 = _3352 * 48u;
                        vec4 _3368 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3354)).x, texelFetch(g_PointLightRenderingBuffer, int(_3354 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3354 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3354 + 3u)).x));
                        uint _3374 = (_3352 * 48u) + 4u;
                        vec4 _3387 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3374)).x, texelFetch(g_PointLightRenderingBuffer, int(_3374 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3374 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3374 + 3u)).x));
                        uint _3393 = (_3352 * 48u) + 8u;
                        vec3 _3404 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3393)).x, texelFetch(g_PointLightRenderingBuffer, int(_3393 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3393 + 2u)).x));
                        float _3408 = _3368.x - _2071;
                        float _3409 = _3368.y - _2072;
                        float _3410 = _3368.z - _2073;
                        float _3411 = dot(vec3(_3408, _3409, _3410), vec3(_3408, _3409, _3410));
                        float _3414 = inversesqrt(_3411);
                        float _3415 = _3414 * _3408;
                        float _3416 = _3414 * _3409;
                        float _3417 = _3414 * _3410;
                        float _3418 = dot(vec3(_957, _960, _963), vec3(_3415, _3416, _3417));
                        float _3423 = 1.0 - (_3411 * _3368.w);
                        float _4796 = isnan(0.0) ? _3423 : (isnan(_3423) ? 0.0 : max(_3423, 0.0));
                        float _3424 = isnan(1.0) ? _4796 : (isnan(_4796) ? 1.0 : min(_4796, 1.0));
                        float _3425 = sqrt(_3411) * _3387.w;
                        float _3428 = 1.39999997615814208984375 / (_3425 + 1.39999997615814208984375);
                        float _3429 = _3428 * _3428;
                        float _3432 = ((1.0 - _3429) * _3418) + _3429;
                        float _3435 = _3425 * _3425;
                        float _3439 = ((isnan(0.0) ? _3432 : (isnan(_3432) ? 0.0 : max(_3432, 0.0))) * _3424) / ((_3435 * 0.699999988079071044921875) + 1.0);
                        float _3443 = (-0.0) - _2071;
                        float _3444 = (-0.0) - _2072;
                        float _3445 = (-0.0) - _2073;
                        float _3449 = inversesqrt(dot(vec3(_3443, _3444, _3445), vec3(_3443, _3444, _3445)));
                        float _3450 = _3449 * _3443;
                        float _3451 = _3449 * _3444;
                        float _3452 = _3449 * _3445;
                        float _3459 = exp2(log2(1.0 / ((_3435 * 3.5) + 5.0)) * 0.25);
                        float _3460 = 1.0 - _1017;
                        float _3467 = sqrt(1.0 - ((1.0 - (_3460 * _3460)) * (1.0 - (_3459 * _3459))));
                        float _3468 = _3467 * _3467;
                        float _3469 = _3468 * _3468;
                        float _3470 = _3450 + _3415;
                        float _3471 = _3451 + _3416;
                        float _3472 = _3452 + _3417;
                        float _3476 = inversesqrt(dot(vec3(_3470, _3471, _3472), vec3(_3470, _3471, _3472)));
                        float _3480 = dot(vec3(_957, _960, _963), vec3(_3450, _3451, _3452));
                        float _4812 = isnan(0.0) ? _3480 : (isnan(_3480) ? 0.0 : max(_3480, 0.0));
                        float _3483 = isnan(1.0) ? _4812 : (isnan(_4812) ? 1.0 : min(_4812, 1.0));
                        float _3484 = dot(vec3(_957, _960, _963), vec3(_3476 * _3470, _3476 * _3471, _3476 * _3472));
                        float _4823 = isnan(0.0) ? _3484 : (isnan(_3484) ? 0.0 : max(_3484, 0.0));
                        float _3487 = isnan(1.0) ? _4823 : (isnan(_4823) ? 1.0 : min(_4823, 1.0));
                        float _3491 = ((_3487 * _3487) * (_3469 + (-1.0))) + 1.0;
                        float _3492 = _3428 * _3468;
                        float _3493 = _3492 * _3492;
                        float _3496 = ((1.0 - _3493) * _3418) + _3493;
                        float _4834 = isnan(0.0) ? _3496 : (isnan(_3496) ? 0.0 : max(_3496, 0.0));
                        float _3497 = isnan(1.0) ? _4834 : (isnan(_4834) ? 1.0 : min(_4834, 1.0));
                        float _3498 = 1.0 - _3468;
                        float _3508 = (0.5 / (((_3497 * ((_3483 * _3498) + _3468)) + 9.9999999392252902907785028219223e-09) + (((_3497 * _3498) + _3468) * _3483))) * _3497;
                        float _4845 = isnan(0.0) ? _3508 : (isnan(_3508) ? 0.0 : max(_3508, 0.0));
                        float _3519 = (((_3469 * 3.1415927410125732421875) * (isnan(1.0) ? _4845 : (isnan(_4845) ? 1.0 : min(_4845, 1.0)))) / ((_3491 * _3491) * ((_3435 * 2.1991131305694580078125) + 3.141590118408203125))) * _3424;
                        _3277 = (_3439 * _3387.x) + _3345;
                        _3278 = (_3439 * _3387.y) + _3346;
                        _3279 = (_3439 * _3387.z) + _3347;
                        _3274 = (_3519 * _3404.x) + _3342;
                        _3275 = (_3519 * _3404.y) + _3343;
                        _3276 = (_3519 * _3404.z) + _3344;
                        if (_3349 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3342 = _3274;
                            _3343 = _3275;
                            _3344 = _3276;
                            _3345 = _3277;
                            _3346 = _3278;
                            _3347 = _3279;
                            _3348 = _3349;
                        }
                    }
                    frontier_phi_66_pred = _3279;
                    frontier_phi_66_pred_1 = _3278;
                    frontier_phi_66_pred_2 = _3277;
                    frontier_phi_66_pred_3 = _3276;
                    frontier_phi_66_pred_4 = _3275;
                    frontier_phi_66_pred_5 = _3274;
                }
                _3084 = frontier_phi_66_pred;
                _3082 = frontier_phi_66_pred_1;
                _3080 = frontier_phi_66_pred_2;
                _3078 = frontier_phi_66_pred_3;
                _3076 = frontier_phi_66_pred_4;
                _3074 = frontier_phi_66_pred_5;
                uint _3225 = _3224 + 1u;
                if (_3225 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3218 = _3074;
                    _3219 = _3076;
                    _3220 = _3078;
                    _3221 = _3080;
                    _3222 = _3082;
                    _3223 = _3084;
                    _3224 = _3225;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3073 = _3074;
            _3075 = _3076;
            _3077 = _3078;
            _3079 = _3080;
            _3081 = _3082;
            _3083 = _3084;
        }
        uvec4 _3087 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3088 = _3087.z;
        uint _3090 = (_3088 >> 8u) & 15u;
        float _3186;
        float _3188;
        float _3190;
        float _3192;
        float _3194;
        float _3196;
        if (((4294967295u << _3090) & _2993) == 0u)
        {
            _3186 = _3073;
            _3188 = _3075;
            _3190 = _3077;
            _3192 = _3079;
            _3194 = _3081;
            _3196 = _3083;
        }
        else
        {
            float _3211 = inversesqrt(dot(vec3(_2071, _2072, _2073), vec3(_2071, _2072, _2073)));
            float _3212 = _3211 * _2071;
            float _3213 = _3211 * _2072;
            float _3214 = _3211 * _2073;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_3090 < ((_3088 >> 12u) & 15u))
            {
                float _3187;
                float _3189;
                float _3191;
                float _3193;
                float _3195;
                float _3197;
                float _3325 = _3073;
                float _3326 = _3075;
                float _3327 = _3077;
                float _3328 = _3079;
                float _3329 = _3081;
                float _3330 = _3083;
                uint _3331 = _3090;
                uint _3340;
                bool _3341;
                for (;;)
                {
                    _3340 = texelFetch(g_lightClassification, int((((_2987 << 5u) + (_2973 << 9u)) + (_3331 << 2u)) >> 2u)).x;
                    _3341 = _3340 == 0u;
                    float frontier_phi_72_pred;
                    float frontier_phi_72_pred_1;
                    float frontier_phi_72_pred_2;
                    float frontier_phi_72_pred_3;
                    float frontier_phi_72_pred_4;
                    float frontier_phi_72_pred_5;
                    if (_3341)
                    {
                        frontier_phi_72_pred = _3330;
                        frontier_phi_72_pred_1 = _3329;
                        frontier_phi_72_pred_2 = _3328;
                        frontier_phi_72_pred_3 = _3327;
                        frontier_phi_72_pred_4 = _3326;
                        frontier_phi_72_pred_5 = _3325;
                    }
                    else
                    {
                        float _3524;
                        float _3525;
                        float _3526;
                        float _3527;
                        float _3528;
                        float _3529;
                        float _3817;
                        float _3818;
                        float _3819;
                        float _3820;
                        float _3821;
                        float _3822;
                        float _3537 = _3325;
                        float _3538 = _3326;
                        float _3539 = _3327;
                        float _3540 = _3328;
                        float _3541 = _3329;
                        float _3542 = _3330;
                        uint _3543 = _3340;
                        uint _3544;
                        vec4 _3569;
                        float _3570;
                        vec4 _3585;
                        vec3 _3597;
                        vec4 _3612;
                        vec4 _3627;
                        float _3673;
                        bool _3674;
                        for (;;)
                        {
                            uint _3554 = ((_3331 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3543));
                            _3544 = (_3543 + 4294967295u) & _3543;
                            uint _3556 = _3554 * 40u;
                            _3569 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3556)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3556 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3556 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3556 + 3u)).x));
                            _3570 = _3569.w;
                            uint _3572 = (_3554 * 40u) + 4u;
                            _3585 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3572)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3572 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3572 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3572 + 3u)).x));
                            uint _3587 = (_3554 * 40u) + 8u;
                            _3597 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3587)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3587 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3587 + 2u)).x));
                            uint _3599 = (_3554 * 40u) + 16u;
                            _3612 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3599)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3599 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3599 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3599 + 3u)).x));
                            uint _3614 = (_3554 * 40u) + 20u;
                            _3627 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3614)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3614 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3614 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3614 + 3u)).x));
                            uint _3629 = (_3554 * 40u) + 24u;
                            vec4 _3642 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3629)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3629 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3629 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3629 + 3u)).x));
                            uint _3648 = (_3554 * 40u) + 28u;
                            vec4 _3661 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3648)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3648 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3648 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3648 + 3u)).x));
                            _3673 = fma(_2073, _3661.z, fma(_2072, _3661.y, _3661.x * _2071)) + _3661.w;
                            _3674 = !((fma(_2073, _3642.z, fma(_2072, _3642.y, _3642.x * _2071)) + _3642.w) <= 0.0);
                            float frontier_phi_78_pred;
                            float frontier_phi_78_pred_1;
                            float frontier_phi_78_pred_2;
                            float frontier_phi_78_pred_3;
                            float frontier_phi_78_pred_4;
                            float frontier_phi_78_pred_5;
                            if (_3674)
                            {
                                float _3701 = _3569.x - _2071;
                                float _3702 = _3569.y - _2072;
                                float _3703 = _3569.z - _2073;
                                float _3704 = dot(vec3(_3701, _3702, _3703), vec3(_3701, _3702, _3703));
                                float _3707 = inversesqrt(_3704);
                                float _3708 = _3707 * _3701;
                                float _3709 = _3707 * _3702;
                                float _3710 = _3707 * _3703;
                                float _3714 = 1.0 - (_3704 / (_3570 * _3570));
                                float _4856 = isnan(0.0) ? _3714 : (isnan(_3714) ? 0.0 : max(_3714, 0.0));
                                float _3715 = isnan(1.0) ? _4856 : (isnan(_4856) ? 1.0 : min(_4856, 1.0));
                                float _3719 = sqrt(_3704) * _3585.w;
                                float _3721 = 1.39999997615814208984375 / (_3719 + 1.39999997615814208984375);
                                float _3722 = _3721 * _3721;
                                float _3725 = ((1.0 - _3722) * dot(vec3(_3708, _3709, _3710), vec3(_957, _960, _963))) + _3722;
                                float _3728 = _3719 * _3719;
                                float _3732 = (fma(_2073, _3612.z, fma(_2072, _3612.y, _3612.x * _2071)) + _3612.w) / _3673;
                                float _3733 = (fma(_2073, _3627.z, fma(_2072, _3627.y, _3627.x * _2071)) + _3627.w) / _3673;
                                float _3737 = 1.0 - dot(vec2(_3732, _3733), vec2(_3732, _3733));
                                float _4872 = isnan(0.0) ? _3737 : (isnan(_3737) ? 0.0 : max(_3737, 0.0));
                                float _3738 = isnan(1.0) ? _4872 : (isnan(_4872) ? 1.0 : min(_4872, 1.0));
                                float _3739 = _3738 * (((isnan(0.0) ? _3725 : (isnan(_3725) ? 0.0 : max(_3725, 0.0))) * _3715) / ((_3728 * 0.699999988079071044921875) + 1.0));
                                float _3751 = exp2(log2(1.0 / ((_3728 * 3.5) + 5.0)) * 0.25);
                                float _3752 = 1.0 - _1017;
                                float _3759 = sqrt(1.0 - ((1.0 - (_3752 * _3752)) * (1.0 - (_3751 * _3751))));
                                float _3760 = _3759 * _3759;
                                float _3761 = _3760 * _3760;
                                float _3762 = _3708 - _3212;
                                float _3763 = _3709 - _3213;
                                float _3764 = _3710 - _3214;
                                float _3768 = inversesqrt(dot(vec3(_3762, _3763, _3764), vec3(_3762, _3763, _3764)));
                                float _3772 = dot(vec3(_957, _960, _963), vec3((-0.0) - _3212, (-0.0) - _3213, (-0.0) - _3214));
                                float _4883 = isnan(0.0) ? _3772 : (isnan(_3772) ? 0.0 : max(_3772, 0.0));
                                float _3775 = isnan(1.0) ? _4883 : (isnan(_4883) ? 1.0 : min(_4883, 1.0));
                                float _3776 = dot(vec3(_957, _960, _963), vec3(_3768 * _3762, _3768 * _3763, _3768 * _3764));
                                float _4894 = isnan(0.0) ? _3776 : (isnan(_3776) ? 0.0 : max(_3776, 0.0));
                                float _3779 = isnan(1.0) ? _4894 : (isnan(_4894) ? 1.0 : min(_4894, 1.0));
                                float _3783 = ((_3779 * _3779) * (_3761 + (-1.0))) + 1.0;
                                float _3784 = _3721 * _3760;
                                float _3785 = _3784 * _3784;
                                float _3791 = ((1.0 - _3785) * dot(vec3(_957, _960, _963), vec3(_3708, _3709, _3710))) + _3785;
                                float _4905 = isnan(0.0) ? _3791 : (isnan(_3791) ? 0.0 : max(_3791, 0.0));
                                float _3792 = isnan(1.0) ? _4905 : (isnan(_4905) ? 1.0 : min(_4905, 1.0));
                                float _3793 = 1.0 - _3760;
                                float _3803 = (0.5 / (((_3792 * ((_3775 * _3793) + _3760)) + 9.9999999392252902907785028219223e-09) + (((_3792 * _3793) + _3760) * _3775))) * _3792;
                                float _4916 = isnan(0.0) ? _3803 : (isnan(_3803) ? 0.0 : max(_3803, 0.0));
                                float _3813 = (_3738 * _3715) * (((_3761 * 3.1415927410125732421875) * (isnan(1.0) ? _4916 : (isnan(_4916) ? 1.0 : min(_4916, 1.0)))) / ((_3783 * _3783) * ((_3728 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_78_pred = _3739 * _3585.y;
                                frontier_phi_78_pred_1 = _3739 * _3585.x;
                                frontier_phi_78_pred_2 = _3813 * _3597.z;
                                frontier_phi_78_pred_3 = _3813 * _3597.y;
                                frontier_phi_78_pred_4 = _3813 * _3597.x;
                                frontier_phi_78_pred_5 = _3739 * _3585.z;
                            }
                            else
                            {
                                frontier_phi_78_pred = 0.0;
                                frontier_phi_78_pred_1 = 0.0;
                                frontier_phi_78_pred_2 = 0.0;
                                frontier_phi_78_pred_3 = 0.0;
                                frontier_phi_78_pred_4 = 0.0;
                                frontier_phi_78_pred_5 = 0.0;
                            }
                            _3821 = frontier_phi_78_pred;
                            _3820 = frontier_phi_78_pred_1;
                            _3819 = frontier_phi_78_pred_2;
                            _3818 = frontier_phi_78_pred_3;
                            _3817 = frontier_phi_78_pred_4;
                            _3822 = frontier_phi_78_pred_5;
                            _3527 = _3820 + _3540;
                            _3528 = _3821 + _3541;
                            _3529 = _3822 + _3542;
                            _3524 = _3817 + _3537;
                            _3525 = _3818 + _3538;
                            _3526 = _3819 + _3539;
                            if (_3544 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3537 = _3524;
                                _3538 = _3525;
                                _3539 = _3526;
                                _3540 = _3527;
                                _3541 = _3528;
                                _3542 = _3529;
                                _3543 = _3544;
                                continue;
                            }
                        }
                        frontier_phi_72_pred = _3529;
                        frontier_phi_72_pred_1 = _3528;
                        frontier_phi_72_pred_2 = _3527;
                        frontier_phi_72_pred_3 = _3526;
                        frontier_phi_72_pred_4 = _3525;
                        frontier_phi_72_pred_5 = _3524;
                    }
                    _3197 = frontier_phi_72_pred;
                    _3195 = frontier_phi_72_pred_1;
                    _3193 = frontier_phi_72_pred_2;
                    _3191 = frontier_phi_72_pred_3;
                    _3189 = frontier_phi_72_pred_4;
                    _3187 = frontier_phi_72_pred_5;
                    uint _3332 = _3331 + 1u;
                    if (_3332 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3325 = _3187;
                        _3326 = _3189;
                        _3327 = _3191;
                        _3328 = _3193;
                        _3329 = _3195;
                        _3330 = _3197;
                        _3331 = _3332;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _3197;
                frontier_phi_60_61_ladder_1 = _3195;
                frontier_phi_60_61_ladder_2 = _3191;
                frontier_phi_60_61_ladder_3 = _3189;
                frontier_phi_60_61_ladder_4 = _3187;
                frontier_phi_60_61_ladder_5 = _3193;
            }
            else
            {
                frontier_phi_60_61_ladder = _3083;
                frontier_phi_60_61_ladder_1 = _3081;
                frontier_phi_60_61_ladder_2 = _3077;
                frontier_phi_60_61_ladder_3 = _3075;
                frontier_phi_60_61_ladder_4 = _3073;
                frontier_phi_60_61_ladder_5 = _3079;
            }
            _3186 = frontier_phi_60_61_ladder_4;
            _3188 = frontier_phi_60_61_ladder_3;
            _3190 = frontier_phi_60_61_ladder_2;
            _3192 = frontier_phi_60_61_ladder_5;
            _3194 = frontier_phi_60_61_ladder_1;
            _3196 = frontier_phi_60_61_ladder;
        }
        float _3201 = isnan(1.0) ? _1001 : (isnan(_1001) ? 1.0 : min(_1001, 1.0));
        _3006 = (_3201 * _3192) + _2537;
        _3008 = (_3201 * _3194) + _2539;
        _3010 = (_3201 * _3196) + _2541;
        _3012 = ((_3186 * 0.039999999105930328369140625) * _3201) + _2860;
        _3014 = ((_3188 * 0.039999999105930328369140625) * _3201) + _2862;
        _3016 = ((_3190 * 0.039999999105930328369140625) * _3201) + _2864;
    }
    else
    {
        _3006 = _2537;
        _3008 = _2539;
        _3010 = _2541;
        _3012 = _2860;
        _3014 = _2862;
        _3016 = _2864;
    }
    float _4932 = isnan(0.0) ? _986 : (isnan(_986) ? 0.0 : max(_986, 0.0));
    float _4943 = isnan(0.0) ? _987 : (isnan(_987) ? 0.0 : max(_987, 0.0));
    float _4954 = isnan(0.0) ? _988 : (isnan(_988) ? 0.0 : max(_988, 0.0));
    uint _3036 = _257 + 6u;
    float _3044 = _938 / cbSceneParam._m0[86u].x;
    float _3045 = _939 / cbSceneParam._m0[86u].y;
    vec4 _3059 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3044, _3045, (log2((isnan(cbSceneParam._m0[77u].w) ? _873 : (isnan(_873) ? cbSceneParam._m0[77u].w : min(_873, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3061 = _3059.x;
    float _3062 = _3059.y;
    float _3063 = _3059.z;
    float _3064 = _3059.w;
    float _3136;
    float _3138;
    float _3140;
    float _3142;
    if (_873 > cbSceneParam._m0[78u].w)
    {
        float _3098 = isnan(_873) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _873 : min(cbSceneParam._m0[80u].w, _873));
        float _3099 = _3098 / _873;
        float _3110 = _3099 * _923;
        float _3111 = _924 * _3099;
        float _3112 = (-0.0) - _3111;
        float _3114 = _3099 * _925;
        float _3116 = (cbSceneParam._m0[77u].w * _3112) / _3098;
        float _3117 = _3116 + cbSceneParam._m0[79u].w;
        float _3118 = cbSceneParam._m0[79u].w - _3111;
        float _3124 = sqrt(((_3110 * _3110) + (_3111 * _3111)) + (_3114 * _3114));
        float _3127 = (1.0 - (cbSceneParam._m0[77u].w / _3098)) * _3124;
        float _3132 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3134 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3287;
        if (abs((_3112 - _3116) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3287 = ((((_3117 > 0.0) ? exp2(_3132 * _3117) : (2.0 - exp2(_3134 * _3117))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3127;
        }
        else
        {
            float _3247 = 1.0 / cbSceneParam._m0[80u].x;
            float _3248 = isnan(_3118) ? _3117 : (isnan(_3117) ? _3118 : max(_3117, _3118));
            float _3249 = isnan(_3118) ? _3117 : (isnan(_3117) ? _3118 : min(_3117, _3118));
            float _3258 = isnan(0.0) ? _3248 : (isnan(_3248) ? 0.0 : min(_3248, 0.0));
            float _3259 = isnan(0.0) ? _3249 : (isnan(_3249) ? 0.0 : min(_3249, 0.0));
            _3287 = ((abs(_3124 / _3112) * cbSceneParam._m0[80u].y) * ((((_3258 - _3259) * 2.0) - ((exp2(_3132 * (isnan(0.0) ? _3248 : (isnan(_3248) ? 0.0 : max(_3248, 0.0)))) - exp2(_3132 * (isnan(0.0) ? _3249 : (isnan(_3249) ? 0.0 : max(_3249, 0.0))))) * _3247)) - ((exp2(_3134 * _3258) - exp2(_3134 * _3259)) * _3247))) + (_3127 * cbSceneParam._m0[80u].z);
        }
        vec4 _3289 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3044, _3045, 1.0), 0.0);
        float _3298 = exp2((_3287 * (-1.44269502162933349609375)) * (1.0 - _3289.w));
        float _3299 = log2(_3298);
        float _3315 = log2(_3064);
        _3136 = (exp2(_3315 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3299 * cbSceneParam._m0[78u].x)) * _3289.x) / cbSceneParam._m0[78u].x)) + _3061;
        _3138 = (exp2(_3315 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3299 * cbSceneParam._m0[78u].y)) * _3289.y) / cbSceneParam._m0[78u].y)) + _3062;
        _3140 = (exp2(_3315 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3299 * cbSceneParam._m0[78u].z)) * _3289.z) / cbSceneParam._m0[78u].z)) + _3063;
        _3142 = _3298 * _3064;
    }
    else
    {
        _3136 = _3061;
        _3138 = _3062;
        _3140 = _3063;
        _3142 = _3064;
    }
    float _3154 = roundEven(cbMatDynParam._m0[0u].y);
    bool _3155 = _3154 == 3.0;
    float _3156 = log2(_3142);
    float _3163 = exp2(_3156 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4932 : (isnan(_4932) ? 1.0 : min(_4932, 1.0))) * (_3006 + ((isnan(0.0) ? _1725 : (isnan(_1725) ? 0.0 : max(_1725, 0.0))) * _1001))) + ((_3012 + ((isnan(0.0) ? _2018 : (isnan(_2018) ? 0.0 : max(_2018, 0.0))) * _1804)) * cbPerFrame._m0[3u].x));
    float _3164 = exp2(_3156 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4943 : (isnan(_4943) ? 1.0 : min(_4943, 1.0))) * (_3008 + ((isnan(0.0) ? _1728 : (isnan(_1728) ? 0.0 : max(_1728, 0.0))) * _1001))) + ((_3014 + ((isnan(0.0) ? _2021 : (isnan(_2021) ? 0.0 : max(_2021, 0.0))) * _1804)) * cbPerFrame._m0[3u].x));
    float _3165 = exp2(_3156 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4954 : (isnan(_4954) ? 1.0 : min(_4954, 1.0))) * (_3010 + ((isnan(0.0) ? _1731 : (isnan(_1731) ? 0.0 : max(_1731, 0.0))) * _1001))) + ((_3016 + ((isnan(0.0) ? _2024 : (isnan(_2024) ? 0.0 : max(_2024, 0.0))) * _1804)) * cbPerFrame._m0[3u].x));
    float _3174 = (_3154 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _3174 * (_3155 ? _3163 : (_3163 + (cbSceneParam._m0[72u].w * _3136)));
    SV_Target.y = _3174 * (_3155 ? _3164 : (_3164 + (cbSceneParam._m0[72u].w * _3138)));
    SV_Target.z = _3174 * (_3155 ? _3165 : (_3165 + (cbSceneParam._m0[72u].w * _3140)));
    SV_Target.w = cbInstanceData._m0[_3036].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_3036].w;
}


