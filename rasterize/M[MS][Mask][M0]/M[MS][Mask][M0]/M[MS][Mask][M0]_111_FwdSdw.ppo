#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_10;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_6;
layout(set = 0, binding = 23) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_8;
layout(set = 0, binding = 24) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_9;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1323;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _218 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _219 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _220 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _226 = inversesqrt(dot(vec3(_218, _219, _220), vec3(_218, _219, _220)));
    float _233 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _240 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _246 = uint(roundEven(NORMAL.w)) * 13u;
    uint _252 = _246 + 1u;
    uint _256 = _246 + 2u;
    float _265 = sqrt(((cbInstanceData._m0[_252].x * cbInstanceData._m0[_252].x) + (cbInstanceData._m0[_246].x * cbInstanceData._m0[_246].x)) + (cbInstanceData._m0[_256].x * cbInstanceData._m0[_256].x));
    float _266 = _265 * TEXCOORD.z;
    float _267 = _265 * TEXCOORD.w;
    vec4 _287 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _293 = _287.x * cbMtdParam._m0[11u].x;
    float _294 = _287.y * cbMtdParam._m0[11u].y;
    float _295 = _287.z * cbMtdParam._m0[11u].z;
    vec4 _314 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _266) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _267) + cbTextureTilingScale._m0[5u].w));
    vec4 _334 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _374 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _376 = _374.x;
    float _388 = dot(vec4(_376, _374.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _405 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _334.x) * 2.0) - ((((_376 - _388) * cbMtdParam._m0[24u].z) + _388) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3909 = isnan(0.0) ? _405 : (isnan(_405) ? 0.0 : max(_405, 0.0));
    float _406 = isnan(1.0) ? _3909 : (isnan(_3909) ? 1.0 : min(_3909, 1.0));
    float _413 = (_406 * ((_314.x * cbMtdParam._m0[12u].x) - _293)) + _293;
    float _414 = (_406 * ((_314.y * cbMtdParam._m0[12u].y) - _294)) + _294;
    float _415 = (_406 * ((_314.z * cbMtdParam._m0[12u].z) - _295)) + _295;
    vec4 _432 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _266) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _267) + cbTextureTilingScale._m0[3u].w));
    vec4 _452 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _454 = _452.x;
    float _464 = dot(vec4(_454, _452.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _478 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _334.y) * 2.0) - ((((_454 - _464) * cbMtdParam._m0[24u].z) + _464) * cbMtdParam._m0[20u].w))) + 1.0;
    float _3920 = isnan(0.0) ? _478 : (isnan(_478) ? 0.0 : max(_478, 0.0));
    float _479 = isnan(1.0) ? _3920 : (isnan(_3920) ? 1.0 : min(_3920, 1.0));
    float _486 = (_479 * ((_432.x * cbMtdParam._m0[13u].x) - _413)) + _413;
    float _487 = (_479 * ((_432.y * cbMtdParam._m0[13u].y) - _414)) + _414;
    float _488 = (_479 * ((_432.z * cbMtdParam._m0[13u].z) - _415)) + _415;
    vec4 _506 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_9, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[24u].x * _266) + cbTextureTilingScale._m0[24u].z, (cbTextureTilingScale._m0[24u].y * _267) + cbTextureTilingScale._m0[24u].w));
    vec4 _523 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[25u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _525 = _523.x;
    float _535 = dot(vec4(_525, _523.yzw), vec4(cbMtdParam._m0[30u].w, cbMtdParam._m0[31u].xy, 0.0));
    float _547 = ((cbMtdParam._m0[25u].x * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.z) - _334.z) * 2.0) - ((((_525 - _535) * cbMtdParam._m0[24u].z) + _535) * cbMtdParam._m0[20u].z))) + 1.0;
    float _3931 = isnan(0.0) ? _547 : (isnan(_547) ? 0.0 : max(_547, 0.0));
    float _548 = isnan(1.0) ? _3931 : (isnan(_3931) ? 1.0 : min(_3931, 1.0));
    float _555 = (_548 * ((_506.x * cbMtdParam._m0[14u].x) - _486)) + _486;
    float _556 = (_548 * ((_506.y * cbMtdParam._m0[14u].y) - _487)) + _487;
    float _557 = (_548 * ((_506.z * cbMtdParam._m0[14u].z) - _488)) + _488;
    vec4 _575 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _266) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _267) + cbTextureTilingScale._m0[4u].w));
    vec4 _592 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _594 = _592.x;
    float _595 = _592.y;
    float _596 = _592.z;
    float _603 = ((_575.x - _594) * _406) + _594;
    float _604 = ((_575.y - _595) * _406) + _595;
    float _605 = ((_575.z - _596) * _406) + _596;
    vec4 _617 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _266) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _267) + cbTextureTilingScale._m0[2u].w));
    float _628 = ((_617.x - _603) * _479) + _603;
    float _629 = ((_617.y - _604) * _479) + _604;
    float _630 = ((_617.z - _605) * _479) + _605;
    vec4 _642 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[23u].x * _266) + cbTextureTilingScale._m0[23u].z, (cbTextureTilingScale._m0[23u].y * _267) + cbTextureTilingScale._m0[23u].w));
    float _655 = ((_642.z - _630) * _548) + _630;
    float _658 = ((((_642.x - _628) * _548) + _628) * 2.0) + (-1.0);
    float _660 = ((((_642.y - _629) * _548) + _629) * 2.0) + (-1.0);
    float _661 = dot(vec2(_658, _660), vec2(_658, _660));
    float _3942 = isnan(0.0) ? _661 : (isnan(_661) ? 0.0 : max(_661, 0.0));
    float _666 = sqrt(1.0 - (isnan(1.0) ? _3942 : (isnan(_3942) ? 1.0 : min(_3942, 1.0))));
    vec4 _680 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _705 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _266) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _267) + cbTextureTilingScale._m0[11u].w));
    float _707 = _705.x;
    float _708 = 1.0 - _707;
    float _721 = (TEXCOORD_8.w - ((cbMtdParam._m0[21u].z * (1.0 - TEXCOORD_8.w)) * ((((_707 - _708) * cbMtdParam._m0[24u].w) + _708) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3953 = isnan(0.0) ? _721 : (isnan(_721) ? 0.0 : max(_721, 0.0));
    float _722 = isnan(1.0) ? _3953 : (isnan(_3953) ? 1.0 : min(_3953, 1.0));
    float _729 = (_722 * (cbMtdParam._m0[17u].x - _555)) + _555;
    float _730 = (_722 * (cbMtdParam._m0[17u].y - _556)) + _556;
    float _731 = (_722 * (cbMtdParam._m0[17u].z - _557)) + _557;
    float _735 = (cbMtdParam._m0[19u].w * (_680.z - _655)) + _655;
    vec4 _748 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _266) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _267) + cbTextureTilingScale._m0[15u].w));
    float _755 = (_748.x * 2.0) + (-1.0);
    float _756 = (_748.y * 2.0) + (-1.0);
    float _757 = dot(vec2(_755, _756), vec2(_755, _756));
    float _3964 = isnan(0.0) ? _757 : (isnan(_757) ? 0.0 : max(_757, 0.0));
    float _765 = (_722 * (_748.z - _735)) + _735;
    float _768 = (((_680.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _658;
    float _769 = (((_680.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _660;
    float _781 = (((_755 - _768) + (cbMtdParam._m0[21u].x * _768)) * _722) + _768;
    float _782 = (((_756 - _769) + (cbMtdParam._m0[21u].x * _769)) * _722) + _769;
    float _783 = (_722 * (sqrt(1.0 - (isnan(1.0) ? _3964 : (isnan(_3964) ? 1.0 : min(_3964, 1.0)))) - _666)) + _666;
    float _787 = cbMtdParam._m0[22u].x + _680.w;
    float _790 = fma(_783, _233 * NORMAL.x, fma(_782, _240 * TANGENT.x, (_226 * _218) * _781));
    float _793 = fma(_783, _233 * NORMAL.y, fma(_782, _240 * TANGENT.y, (_226 * _219) * _781));
    float _796 = fma(_783, _233 * NORMAL.z, fma(_782, _240 * TANGENT.z, (_226 * _220) * _781));
    float _800 = inversesqrt(dot(vec3(_790, _793, _796), vec3(_790, _793, _796)));
    float _801 = _800 * _790;
    float _802 = _800 * _793;
    float _803 = _800 * _796;
    float _3975 = isnan(0.0) ? _765 : (isnan(_765) ? 0.0 : max(_765, 0.0));
    float _804 = isnan(1.0) ? _3975 : (isnan(_3975) ? 1.0 : min(_3975, 1.0));
    float _3986 = isnan(0.0) ? _787 : (isnan(_787) ? 0.0 : max(_787, 0.0));
    float _3997 = isnan(0.0) ? _729 : (isnan(_729) ? 0.0 : max(_729, 0.0));
    float _4008 = isnan(0.0) ? _730 : (isnan(_730) ? 0.0 : max(_730, 0.0));
    float _4019 = isnan(0.0) ? _731 : (isnan(_731) ? 0.0 : max(_731, 0.0));
    float _822 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _864 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _874 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _864);
    float _875 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _864);
    float _876 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _864);
    float _880 = inversesqrt(dot(vec3(_874, _875, _876), vec3(_874, _875, _876)));
    float _881 = _874 * _880;
    float _882 = _875 * _880;
    float _883 = _876 * _880;
    float _889 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _890 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _908 = fma(_803, cbSceneParam._m0[5u].z, fma(_802, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _801));
    float _911 = fma(_803, cbSceneParam._m0[6u].z, fma(_802, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _801));
    float _914 = fma(_803, cbSceneParam._m0[7u].z, fma(_802, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _801));
    uint _928 = (_246 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _934 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3997 : (isnan(_3997) ? 1.0 : min(_3997, 1.0)))) * cbInstanceData._m0[_928].x;
    float _935 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4008 : (isnan(_4008) ? 1.0 : min(_4008, 1.0)))) * cbInstanceData._m0[_928].y;
    float _936 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4019 : (isnan(_4019) ? 1.0 : min(_4019, 1.0)))) * cbInstanceData._m0[_928].z;
    float _4030 = isnan(0.0) ? _934 : (isnan(_934) ? 0.0 : max(_934, 0.0));
    float _937 = isnan(1.0) ? _4030 : (isnan(_4030) ? 1.0 : min(_4030, 1.0));
    float _4041 = isnan(0.0) ? _935 : (isnan(_935) ? 0.0 : max(_935, 0.0));
    float _938 = isnan(1.0) ? _4041 : (isnan(_4041) ? 1.0 : min(_4041, 1.0));
    float _4052 = isnan(0.0) ? _936 : (isnan(_936) ? 0.0 : max(_936, 0.0));
    float _939 = isnan(1.0) ? _4052 : (isnan(_4052) ? 1.0 : min(_4052, 1.0));
    vec4 _948 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _889, cbSceneParam._m0[86u].y * _890));
    float _952 = ((isnan(1.0) ? _3986 : (isnan(_3986) ? 1.0 : min(_3986, 1.0))) * TEXCOORD_5.w) * _948.x;
    float _953 = dot(vec3(_801, _802, _803), vec3(_881, _882, _883));
    float _956 = _953 * 2.0;
    float _960 = (_956 * _801) - _881;
    float _961 = (_956 * _802) - _882;
    float _962 = (_956 * _803) - _883;
    float _966 = abs(dot(vec3(_881, _882, _883), vec3(_801, _802, _803)));
    float _4063 = isnan(0.0) ? _966 : (isnan(_966) ? 0.0 : max(_966, 0.0));
    float _968 = sqrt(_804);
    float _981 = exp2((_968 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4063 : (isnan(_4063) ? 1.0 : min(_4063, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_968 * 3.0));
    float _1013 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1017 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1021 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1322;
    float _1324;
    float _1325;
    float _1326;
    float _1327;
    float _1328;
    float _1329;
    float _1330;
    float _1331;
    float _1332;
    float _1333;
    float _1334;
    float _1335;
    float _1336;
    float _1337;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1047 = fma(_1021, cbModelParam._m0[26u].z, fma(_1017, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1013));
        float _1051 = fma(_1021, cbModelParam._m0[27u].z, fma(_1017, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1013));
        float _1055 = fma(_1021, cbModelParam._m0[28u].z, fma(_1017, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1013));
        float _1080 = _1013 + _801;
        float _1081 = _1017 + _802;
        float _1082 = _1021 + _803;
        float _1092 = fma(_1082, cbModelParam._m0[26u].z, fma(_1081, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1080)) - _1047;
        float _1093 = fma(_1082, cbModelParam._m0[27u].z, fma(_1081, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1080)) - _1051;
        float _1094 = fma(_1082, cbModelParam._m0[28u].z, fma(_1081, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1080)) - _1055;
        float _1098 = inversesqrt(dot(vec3(_1092, _1093, _1094), vec3(_1092, _1093, _1094)));
        float _1111 = ((_1098 * _1092) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1047 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1112 = ((_1098 * _1093) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1051 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1113 = ((_1098 * _1094) / cbModelParam._m0[34u].z) + ((((((_1055 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1116 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1111, _1112, _1113), 0.0);
        vec4 _1123 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1111, _1112, _1113), 0.0);
        vec4 _1130 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1111, _1112, _1113), 0.0);
        vec4 _1137 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1111, _1112, _1113), 0.0);
        float _1150 = exp2((_1116.w + (-0.5)) * 20.0) * 2.0;
        float _1151 = _1150 * (_1116.x + (-0.5));
        float _1152 = _1150 * (_1116.y + (-0.5));
        float _1153 = _1150 * (_1116.z + (-0.5));
        float _1160 = exp2((_1123.w + (-0.5)) * 20.0) * 2.0;
        float _1161 = _1160 * (_1123.x + (-0.5));
        float _1162 = _1160 * (_1123.y + (-0.5));
        float _1163 = _1160 * (_1123.z + (-0.5));
        float _1170 = exp2((_1130.w + (-0.5)) * 20.0) * 2.0;
        float _1171 = _1170 * (_1130.x + (-0.5));
        float _1172 = _1170 * (_1130.y + (-0.5));
        float _1173 = _1170 * (_1130.z + (-0.5));
        float _1180 = exp2((_1137.w + (-0.5)) * 20.0) * 2.0;
        float _1181 = _1180 * (_1137.x + (-0.5));
        float _1182 = _1180 * (_1137.y + (-0.5));
        float _1183 = _1180 * (_1137.z + (-0.5));
        float _1184 = isnan(0.0) ? _1181 : (isnan(_1181) ? 0.0 : max(_1181, 0.0));
        float _1185 = isnan(0.0) ? _1182 : (isnan(_1182) ? 0.0 : max(_1182, 0.0));
        float _1186 = isnan(0.0) ? _1183 : (isnan(_1183) ? 0.0 : max(_1183, 0.0));
        float _1187 = _1151 * 0.5;
        float _1188 = _1161 * 0.5;
        float _1189 = _1171 * 0.5;
        float _1190 = dot(vec3(_1187, _1188, _1189), vec3(_1187, _1188, _1189));
        float _1195 = (_1190 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1190);
        float _1204 = (dot(vec3(_801, _802, _803), vec3(_1195 * _1187, _1195 * _1188, _1195 * _1189)) + 1.0) * 0.5;
        float _4089 = isnan(0.0) ? _1204 : (isnan(_1204) ? 0.0 : max(_1204, 0.0));
        float _1214 = sqrt(((_1188 * _1188) + (_1187 * _1187)) + (_1189 * _1189)) / (_1184 + 9.9999997473787516355514526367188e-06);
        float _4100 = isnan(0.0) ? _1214 : (isnan(_1214) ? 0.0 : max(_1214, 0.0));
        float _1215 = isnan(1.0) ? _4100 : (isnan(_4100) ? 1.0 : min(_4100, 1.0));
        float _1216 = _1215 * 2.0;
        float _1220 = (1.0 - _1215) / (_1215 + 1.0);
        float _4111 = isnan(0.0) ? _1220 : (isnan(_1220) ? 0.0 : max(_1220, 0.0));
        float _1221 = isnan(1.0) ? _4111 : (isnan(_4111) ? 1.0 : min(_4111, 1.0));
        float _1230 = ((((1.0 - _1221) * (_1216 + 2.0)) * exp2(log2(isnan(1.0) ? _4089 : (isnan(_4089) ? 1.0 : min(_4089, 1.0))) * (_1216 + 1.0))) + _1221) * _1184;
        float _1231 = _1152 * 0.5;
        float _1232 = _1162 * 0.5;
        float _1233 = _1172 * 0.5;
        float _1234 = dot(vec3(_1231, _1232, _1233), vec3(_1231, _1232, _1233));
        float _1239 = (_1234 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1234);
        float _1247 = (dot(vec3(_801, _802, _803), vec3(_1239 * _1231, _1239 * _1232, _1239 * _1233)) + 1.0) * 0.5;
        float _4122 = isnan(0.0) ? _1247 : (isnan(_1247) ? 0.0 : max(_1247, 0.0));
        float _1256 = sqrt(((_1232 * _1232) + (_1231 * _1231)) + (_1233 * _1233)) / (_1185 + 9.9999997473787516355514526367188e-06);
        float _4133 = isnan(0.0) ? _1256 : (isnan(_1256) ? 0.0 : max(_1256, 0.0));
        float _1257 = isnan(1.0) ? _4133 : (isnan(_4133) ? 1.0 : min(_4133, 1.0));
        float _1258 = _1257 * 2.0;
        float _1262 = (1.0 - _1257) / (_1257 + 1.0);
        float _4144 = isnan(0.0) ? _1262 : (isnan(_1262) ? 0.0 : max(_1262, 0.0));
        float _1263 = isnan(1.0) ? _4144 : (isnan(_4144) ? 1.0 : min(_4144, 1.0));
        float _1272 = ((((1.0 - _1263) * (_1258 + 2.0)) * exp2(log2(isnan(1.0) ? _4122 : (isnan(_4122) ? 1.0 : min(_4122, 1.0))) * (_1258 + 1.0))) + _1263) * _1185;
        float _1273 = _1153 * 0.5;
        float _1274 = _1163 * 0.5;
        float _1275 = _1173 * 0.5;
        float _1276 = dot(vec3(_1273, _1274, _1275), vec3(_1273, _1274, _1275));
        float _1281 = (_1276 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1276);
        float _1289 = (dot(vec3(_801, _802, _803), vec3(_1281 * _1273, _1281 * _1274, _1281 * _1275)) + 1.0) * 0.5;
        float _4155 = isnan(0.0) ? _1289 : (isnan(_1289) ? 0.0 : max(_1289, 0.0));
        float _1298 = sqrt(((_1274 * _1274) + (_1273 * _1273)) + (_1275 * _1275)) / (_1186 + 9.9999997473787516355514526367188e-06);
        float _4166 = isnan(0.0) ? _1298 : (isnan(_1298) ? 0.0 : max(_1298, 0.0));
        float _1299 = isnan(1.0) ? _4166 : (isnan(_4166) ? 1.0 : min(_4166, 1.0));
        float _1300 = _1299 * 2.0;
        float _1304 = (1.0 - _1299) / (_1299 + 1.0);
        float _4177 = isnan(0.0) ? _1304 : (isnan(_1304) ? 0.0 : max(_1304, 0.0));
        float _1305 = isnan(1.0) ? _4177 : (isnan(_4177) ? 1.0 : min(_4177, 1.0));
        float _1314 = ((((1.0 - _1305) * (_1300 + 2.0)) * exp2(log2(isnan(1.0) ? _4155 : (isnan(_4155) ? 1.0 : min(_4155, 1.0))) * (_1300 + 1.0))) + _1305) * _1186;
        _1322 = _1153;
        _1324 = _1152;
        _1325 = _1151;
        _1326 = _1163;
        _1327 = _1162;
        _1328 = _1161;
        _1329 = _1173;
        _1330 = _1172;
        _1331 = _1171;
        _1332 = _1186;
        _1333 = _1185;
        _1334 = _1184;
        _1335 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1230 : (isnan(_1230) ? 0.0 : max(_1230, 0.0)));
        _1336 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1272 : (isnan(_1272) ? 0.0 : max(_1272, 0.0)));
        _1337 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1314 : (isnan(_1314) ? 0.0 : max(_1314, 0.0)));
    }
    else
    {
        _1322 = _1323;
        _1324 = _1323;
        _1325 = _1323;
        _1326 = _1323;
        _1327 = _1323;
        _1328 = _1323;
        _1329 = _1323;
        _1330 = _1323;
        _1331 = _1323;
        _1332 = _1323;
        _1333 = _1323;
        _1334 = _1323;
        _1335 = 0.0;
        _1336 = 0.0;
        _1337 = 0.0;
    }
    float _1629;
    float _1630;
    float _1631;
    float _1632;
    float _1633;
    float _1634;
    float _1635;
    float _1636;
    float _1637;
    float _1638;
    float _1639;
    float _1640;
    float _1641;
    float _1642;
    float _1643;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1360 = fma(_1021, cbModelParam._m0[30u].z, fma(_1017, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1013));
        float _1364 = fma(_1021, cbModelParam._m0[31u].z, fma(_1017, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1013));
        float _1368 = fma(_1021, cbModelParam._m0[32u].z, fma(_1017, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1013));
        float _1391 = _1013 + _801;
        float _1392 = _1017 + _802;
        float _1393 = _1021 + _803;
        float _1403 = fma(_1393, cbModelParam._m0[30u].z, fma(_1392, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1391)) - _1360;
        float _1404 = fma(_1393, cbModelParam._m0[31u].z, fma(_1392, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1391)) - _1364;
        float _1405 = fma(_1393, cbModelParam._m0[32u].z, fma(_1392, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1391)) - _1368;
        float _1409 = inversesqrt(dot(vec3(_1403, _1404, _1405), vec3(_1403, _1404, _1405)));
        float _1422 = ((_1409 * _1403) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1360 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1423 = ((_1409 * _1404) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1364 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1424 = ((_1409 * _1405) / cbModelParam._m0[35u].z) + ((((((_1368 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1426 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1422, _1423, _1424), 0.0);
        vec4 _1433 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1422, _1423, _1424), 0.0);
        vec4 _1440 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1422, _1423, _1424), 0.0);
        vec4 _1447 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1422, _1423, _1424), 0.0);
        float _1459 = exp2((_1426.w + (-0.5)) * 20.0) * 2.0;
        float _1460 = _1459 * (_1426.x + (-0.5));
        float _1461 = _1459 * (_1426.y + (-0.5));
        float _1462 = _1459 * (_1426.z + (-0.5));
        float _1469 = exp2((_1433.w + (-0.5)) * 20.0) * 2.0;
        float _1470 = _1469 * (_1433.x + (-0.5));
        float _1471 = _1469 * (_1433.y + (-0.5));
        float _1472 = _1469 * (_1433.z + (-0.5));
        float _1479 = exp2((_1440.w + (-0.5)) * 20.0) * 2.0;
        float _1480 = _1479 * (_1440.x + (-0.5));
        float _1481 = _1479 * (_1440.y + (-0.5));
        float _1482 = _1479 * (_1440.z + (-0.5));
        float _1489 = exp2((_1447.w + (-0.5)) * 20.0) * 2.0;
        float _1490 = _1489 * (_1447.x + (-0.5));
        float _1491 = _1489 * (_1447.y + (-0.5));
        float _1492 = _1489 * (_1447.z + (-0.5));
        float _1493 = isnan(0.0) ? _1490 : (isnan(_1490) ? 0.0 : max(_1490, 0.0));
        float _1494 = isnan(0.0) ? _1491 : (isnan(_1491) ? 0.0 : max(_1491, 0.0));
        float _1495 = isnan(0.0) ? _1492 : (isnan(_1492) ? 0.0 : max(_1492, 0.0));
        float _1496 = _1460 * 0.5;
        float _1497 = _1470 * 0.5;
        float _1498 = _1480 * 0.5;
        float _1499 = dot(vec3(_1496, _1497, _1498), vec3(_1496, _1497, _1498));
        float _1504 = (_1499 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1499);
        float _1512 = (dot(vec3(_801, _802, _803), vec3(_1504 * _1496, _1504 * _1497, _1504 * _1498)) + 1.0) * 0.5;
        float _4218 = isnan(0.0) ? _1512 : (isnan(_1512) ? 0.0 : max(_1512, 0.0));
        float _1521 = sqrt(((_1497 * _1497) + (_1496 * _1496)) + (_1498 * _1498)) / (_1493 + 9.9999997473787516355514526367188e-06);
        float _4229 = isnan(0.0) ? _1521 : (isnan(_1521) ? 0.0 : max(_1521, 0.0));
        float _1522 = isnan(1.0) ? _4229 : (isnan(_4229) ? 1.0 : min(_4229, 1.0));
        float _1523 = _1522 * 2.0;
        float _1527 = (1.0 - _1522) / (_1522 + 1.0);
        float _4240 = isnan(0.0) ? _1527 : (isnan(_1527) ? 0.0 : max(_1527, 0.0));
        float _1528 = isnan(1.0) ? _4240 : (isnan(_4240) ? 1.0 : min(_4240, 1.0));
        float _1537 = ((((1.0 - _1528) * (_1523 + 2.0)) * exp2(log2(isnan(1.0) ? _4218 : (isnan(_4218) ? 1.0 : min(_4218, 1.0))) * (_1523 + 1.0))) + _1528) * _1493;
        float _1538 = _1461 * 0.5;
        float _1539 = _1471 * 0.5;
        float _1540 = _1481 * 0.5;
        float _1541 = dot(vec3(_1538, _1539, _1540), vec3(_1538, _1539, _1540));
        float _1546 = (_1541 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1541);
        float _1554 = (dot(vec3(_801, _802, _803), vec3(_1546 * _1538, _1546 * _1539, _1546 * _1540)) + 1.0) * 0.5;
        float _4251 = isnan(0.0) ? _1554 : (isnan(_1554) ? 0.0 : max(_1554, 0.0));
        float _1563 = sqrt(((_1539 * _1539) + (_1538 * _1538)) + (_1540 * _1540)) / (_1494 + 9.9999997473787516355514526367188e-06);
        float _4262 = isnan(0.0) ? _1563 : (isnan(_1563) ? 0.0 : max(_1563, 0.0));
        float _1564 = isnan(1.0) ? _4262 : (isnan(_4262) ? 1.0 : min(_4262, 1.0));
        float _1565 = _1564 * 2.0;
        float _1569 = (1.0 - _1564) / (_1564 + 1.0);
        float _4273 = isnan(0.0) ? _1569 : (isnan(_1569) ? 0.0 : max(_1569, 0.0));
        float _1570 = isnan(1.0) ? _4273 : (isnan(_4273) ? 1.0 : min(_4273, 1.0));
        float _1579 = ((((1.0 - _1570) * (_1565 + 2.0)) * exp2(log2(isnan(1.0) ? _4251 : (isnan(_4251) ? 1.0 : min(_4251, 1.0))) * (_1565 + 1.0))) + _1570) * _1494;
        float _1580 = _1462 * 0.5;
        float _1581 = _1472 * 0.5;
        float _1582 = _1482 * 0.5;
        float _1583 = dot(vec3(_1580, _1581, _1582), vec3(_1580, _1581, _1582));
        float _1588 = (_1583 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1583);
        float _1596 = (dot(vec3(_801, _802, _803), vec3(_1588 * _1580, _1588 * _1581, _1588 * _1582)) + 1.0) * 0.5;
        float _4284 = isnan(0.0) ? _1596 : (isnan(_1596) ? 0.0 : max(_1596, 0.0));
        float _1605 = sqrt(((_1581 * _1581) + (_1580 * _1580)) + (_1582 * _1582)) / (_1495 + 9.9999997473787516355514526367188e-06);
        float _4295 = isnan(0.0) ? _1605 : (isnan(_1605) ? 0.0 : max(_1605, 0.0));
        float _1606 = isnan(1.0) ? _4295 : (isnan(_4295) ? 1.0 : min(_4295, 1.0));
        float _1607 = _1606 * 2.0;
        float _1611 = (1.0 - _1606) / (_1606 + 1.0);
        float _4306 = isnan(0.0) ? _1611 : (isnan(_1611) ? 0.0 : max(_1611, 0.0));
        float _1612 = isnan(1.0) ? _4306 : (isnan(_4306) ? 1.0 : min(_4306, 1.0));
        float _1621 = ((((1.0 - _1612) * (_1607 + 2.0)) * exp2(log2(isnan(1.0) ? _4284 : (isnan(_4284) ? 1.0 : min(_4284, 1.0))) * (_1607 + 1.0))) + _1612) * _1495;
        _1629 = _1462;
        _1630 = _1461;
        _1631 = _1460;
        _1632 = _1472;
        _1633 = _1471;
        _1634 = _1470;
        _1635 = _1482;
        _1636 = _1481;
        _1637 = _1480;
        _1638 = _1495;
        _1639 = _1494;
        _1640 = _1493;
        _1641 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1537 : (isnan(_1537) ? 0.0 : max(_1537, 0.0)));
        _1642 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1579 : (isnan(_1579) ? 0.0 : max(_1579, 0.0)));
        _1643 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1621 : (isnan(_1621) ? 0.0 : max(_1621, 0.0)));
    }
    else
    {
        _1629 = _1323;
        _1630 = _1323;
        _1631 = _1323;
        _1632 = _1323;
        _1633 = _1323;
        _1634 = _1323;
        _1635 = _1323;
        _1636 = _1323;
        _1637 = _1323;
        _1638 = _1323;
        _1639 = _1323;
        _1640 = _1323;
        _1641 = 0.0;
        _1642 = 0.0;
        _1643 = 0.0;
    }
    float _1653 = (cbModelParam._m0[1u].x * (_1641 - _1335)) + _1335;
    float _1654 = (cbModelParam._m0[1u].x * (_1642 - _1336)) + _1336;
    float _1655 = (cbModelParam._m0[1u].x * (_1643 - _1337)) + _1337;
    float _1676 = fma(_1655, cbSceneParam._m0[89u].z, fma(_1654, cbSceneParam._m0[89u].y, _1653 * cbSceneParam._m0[89u].x));
    float _1679 = fma(_1655, cbSceneParam._m0[90u].z, fma(_1654, cbSceneParam._m0[90u].y, _1653 * cbSceneParam._m0[90u].x));
    float _1682 = fma(_1655, cbSceneParam._m0[91u].z, fma(_1654, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1653));
    float _1697 = _960 * 0.5;
    float _1698 = _961 * 0.5;
    float _1699 = _962 * 0.5;
    float _1700 = dot(vec4(_1697, _1698, _1699, 1.0), vec4(_1631, _1634, _1637, _1640));
    float _1703 = dot(vec4(_1697, _1698, _1699, 1.0), vec4(_1630, _1633, _1636, _1639));
    float _1706 = dot(vec4(_1697, _1698, _1699, 1.0), vec4(_1629, _1632, _1635, _1638));
    float _1740;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1713 = dot(vec4(_1697, _1698, _1699, 1.0), vec4(_1322, _1326, _1329, _1332));
        float _1717 = dot(vec4(_1697, _1698, _1699, 1.0), vec4(_1324, _1327, _1330, _1333));
        float _1721 = dot(vec4(_1697, _1698, _1699, 1.0), vec4(_1325, _1328, _1331, _1334));
        float _1728 = dot(vec4(cbModelParam._m0[39u]), vec4(_1697, _1698, _1699, 1.0));
        _1740 = dot(vec3(isnan(0.0) ? _1721 : (isnan(_1721) ? 0.0 : max(_1721, 0.0)), isnan(0.0) ? _1717 : (isnan(_1717) ? 0.0 : max(_1717, 0.0)), isnan(0.0) ? _1713 : (isnan(_1713) ? 0.0 : max(_1713, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1728) ? 0.0 : (isnan(0.0) ? _1728 : max(0.0, _1728))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1740 = 1.0;
    }
    float _1751;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1742 = dot(vec4(cbModelParam._m0[40u]), vec4(_1697, _1698, _1699, 1.0));
        _1751 = dot(vec3(isnan(0.0) ? _1700 : (isnan(_1700) ? 0.0 : max(_1700, 0.0)), isnan(0.0) ? _1703 : (isnan(_1703) ? 0.0 : max(_1703, 0.0)), isnan(0.0) ? _1706 : (isnan(_1706) ? 0.0 : max(_1706, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1742) ? 0.0 : (isnan(0.0) ? _1742 : max(0.0, _1742))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1751 = 1.0;
    }
    float _1755 = (_1751 * cbModelParam._m0[1u].x) + (_1740 * (1.0 - cbModelParam._m0[1u].x));
    float _1765 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _804);
    float _1766 = isnan(_1765) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1765 : min(cbModelParam._m0[25u].z, _1765));
    float _1846;
    float _1848;
    float _1850;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1813 = fma(_1021, cbModelParam._m0[13u].z, fma(_1017, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1013)) + cbModelParam._m0[13u].w;
        float _1817 = fma(_1021, cbModelParam._m0[14u].z, fma(_1017, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1013)) + cbModelParam._m0[14u].w;
        float _1821 = fma(_1021, cbModelParam._m0[15u].z, fma(_1017, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1013)) + cbModelParam._m0[15u].w;
        float _1824 = fma(_962, cbModelParam._m0[13u].z, fma(_961, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _960));
        float _1827 = fma(_962, cbModelParam._m0[14u].z, fma(_961, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _960));
        float _1830 = fma(_962, cbModelParam._m0[15u].z, fma(_961, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _960));
        float _1858;
        if (_1824 > 0.0)
        {
            _1858 = abs((1.0 - _1813) / _1824);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1824 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1813 + 1.0) / _1824);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1858 = frontier_phi_14_12_ladder;
        }
        float _2028;
        if (_1827 > 0.0)
        {
            _2028 = abs((1.0 - _1817) / _1827);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1827 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1817 + 1.0) / _1827);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2028 = frontier_phi_23_19_ladder;
        }
        float _2323;
        if (_1830 > 0.0)
        {
            _2323 = abs((1.0 - _1821) / _1830);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1830 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1821 + 1.0) / _1830);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2323 = frontier_phi_35_30_ladder;
        }
        float _2325 = isnan(_2028) ? _1858 : (isnan(_1858) ? _2028 : min(_1858, _2028));
        float _2326 = isnan(_2323) ? _2325 : (isnan(_2325) ? _2323 : min(_2325, _2323));
        float _2330 = (_2326 * _1824) + _1813;
        float _2331 = (_2326 * _1827) + _1817;
        float _2332 = (_2326 * _1830) + _1821;
        float _2333 = _2326 * 9.9999997473787516355514526367188e-05;
        float _2335 = (-1.0) - _2333;
        float _2337 = _2333 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2332 > _2337) || ((_2332 < _2335) || ((_2331 > _2337) || ((_2331 < _2335) || ((_2330 < _2335) || (_2330 > _2337))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2477 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2332, cbModelParam._m0[9u].z, fma(_2331, cbModelParam._m0[9u].y, _2330 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2332, cbModelParam._m0[10u].z, fma(_2331, cbModelParam._m0[10u].y, _2330 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2332, cbModelParam._m0[11u].z, fma(_2331, cbModelParam._m0[11u].y, _2330 * cbModelParam._m0[11u].x))), _1766);
            frontier_phi_13_35_ladder = _2477.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2477.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2477.x * cbModelParam._m0[1u].y;
        }
        _1846 = frontier_phi_13_35_ladder_2;
        _1848 = frontier_phi_13_35_ladder_1;
        _1850 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1834 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_960, _961, _962), _1766);
        _1846 = _1834.x * cbModelParam._m0[1u].y;
        _1848 = _1834.y * cbModelParam._m0[1u].y;
        _1850 = _1834.z * cbModelParam._m0[1u].y;
    }
    float _1854 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _804);
    float _1855 = isnan(_1854) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1854 : min(cbModelParam._m0[25u].w, _1854));
    float _1945;
    float _1947;
    float _1949;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1909 = fma(_1021, cbModelParam._m0[21u].z, fma(_1017, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1013)) + cbModelParam._m0[21u].w;
        float _1913 = fma(_1021, cbModelParam._m0[22u].z, fma(_1017, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1013)) + cbModelParam._m0[22u].w;
        float _1917 = fma(_1021, cbModelParam._m0[23u].z, fma(_1017, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1013)) + cbModelParam._m0[23u].w;
        float _1920 = fma(_962, cbModelParam._m0[21u].z, fma(_961, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _960));
        float _1923 = fma(_962, cbModelParam._m0[22u].z, fma(_961, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _960));
        float _1926 = fma(_962, cbModelParam._m0[23u].z, fma(_961, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _960));
        float _2033;
        if (_1920 > 0.0)
        {
            _2033 = abs((1.0 - _1909) / _1920);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1920 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1909 + 1.0) / _1920);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2033 = frontier_phi_25_21_ladder;
        }
        float _2350;
        if (_1923 > 0.0)
        {
            _2350 = abs((1.0 - _1913) / _1923);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1923 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1913 + 1.0) / _1923);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2350 = frontier_phi_37_32_ladder;
        }
        float _2677;
        if (_1926 > 0.0)
        {
            _2677 = abs((1.0 - _1917) / _1926);
        }
        else
        {
            float frontier_phi_47_44_ladder;
            if (_1926 < 0.0)
            {
                frontier_phi_47_44_ladder = abs((_1917 + 1.0) / _1926);
            }
            else
            {
                frontier_phi_47_44_ladder = 5000.0;
            }
            _2677 = frontier_phi_47_44_ladder;
        }
        float _2679 = isnan(_2350) ? _2033 : (isnan(_2033) ? _2350 : min(_2033, _2350));
        float _2680 = isnan(_2677) ? _2679 : (isnan(_2679) ? _2677 : min(_2679, _2677));
        float _2684 = (_2680 * _1920) + _1909;
        float _2685 = (_2680 * _1923) + _1913;
        float _2686 = (_2680 * _1926) + _1917;
        float _2687 = _2680 * 9.9999997473787516355514526367188e-05;
        float _2688 = (-1.0) - _2687;
        float _2690 = _2687 + 1.0;
        float frontier_phi_22_47_ladder;
        float frontier_phi_22_47_ladder_1;
        float frontier_phi_22_47_ladder_2;
        if ((_2686 > _2690) || ((_2686 < _2688) || ((_2685 > _2690) || ((_2685 < _2688) || ((_2684 < _2688) || (_2684 > _2690))))))
        {
            frontier_phi_22_47_ladder = 0.0;
            frontier_phi_22_47_ladder_1 = 0.0;
            frontier_phi_22_47_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2804 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2686, cbModelParam._m0[17u].z, fma(_2685, cbModelParam._m0[17u].y, _2684 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2686, cbModelParam._m0[18u].z, fma(_2685, cbModelParam._m0[18u].y, _2684 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2686, cbModelParam._m0[19u].z, fma(_2685, cbModelParam._m0[19u].y, _2684 * cbModelParam._m0[19u].x))), _1855);
            frontier_phi_22_47_ladder = _2804.z * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_1 = _2804.y * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_2 = _2804.x * cbModelParam._m0[1u].z;
        }
        _1945 = frontier_phi_22_47_ladder_2;
        _1947 = frontier_phi_22_47_ladder_1;
        _1949 = frontier_phi_22_47_ladder;
    }
    else
    {
        vec4 _1929 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_960, _961, _962), _1855);
        _1945 = _1929.x * cbModelParam._m0[1u].z;
        _1947 = _1929.y * cbModelParam._m0[1u].z;
        _1949 = _1929.z * cbModelParam._m0[1u].z;
    }
    float _1961 = ((((1.0 - _981) * ((_968 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_981 * _968)) * _952;
    float _1962 = _1961 * ((cbModelParam._m0[1u].w * (_1945 - _1846)) + _1846);
    float _1963 = _1961 * ((cbModelParam._m0[1u].w * (_1947 - _1848)) + _1848);
    float _1964 = _1961 * ((cbModelParam._m0[1u].w * (_1949 - _1850)) + _1850);
    float _1967 = fma(_1964, cbSceneParam._m0[89u].z, fma(_1963, cbSceneParam._m0[89u].y, _1962 * cbSceneParam._m0[89u].x));
    float _1970 = fma(_1964, cbSceneParam._m0[90u].z, fma(_1963, cbSceneParam._m0[90u].y, _1962 * cbSceneParam._m0[90u].x));
    float _1973 = fma(_1964, cbSceneParam._m0[91u].z, fma(_1963, cbSceneParam._m0[91u].y, _1962 * cbSceneParam._m0[91u].x));
    float _2007 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2011 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2015 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2019 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2020 = _2007 / _2019;
    float _2021 = _2011 / _2019;
    float _2022 = _2015 / _2019;
    float _2169;
    float _2170;
    float _2171;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2049 = ((uint(_2022 > cbSceneParam._m0[59u].y) + uint(_2022 > cbSceneParam._m0[59u].x)) + uint(_2022 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2050 = _2049 + 43u;
        uint _2058 = _2049 + 44u;
        uint _2066 = _2049 + 45u;
        uint _2074 = _2049 + 46u;
        float _2085 = fma(_2019, cbSceneParam._m0[_2050].w, fma(_2015, cbSceneParam._m0[_2050].z, fma(_2011, cbSceneParam._m0[_2050].y, _2007 * cbSceneParam._m0[_2050].x)));
        float _2089 = fma(_2019, cbSceneParam._m0[_2058].w, fma(_2015, cbSceneParam._m0[_2058].z, fma(_2011, cbSceneParam._m0[_2058].y, _2007 * cbSceneParam._m0[_2058].x)));
        float _2097 = fma(_2019, cbSceneParam._m0[_2074].w, fma(_2015, cbSceneParam._m0[_2074].z, fma(_2011, cbSceneParam._m0[_2074].y, _2007 * cbSceneParam._m0[_2074].x)));
        float _2102 = cbSceneParam._m0[33u].z * _2097;
        float _2104 = cbSceneParam._m0[33u].w * _2097;
        float _2107 = fma(_2019, cbSceneParam._m0[_2066].w, fma(_2015, cbSceneParam._m0[_2066].z, fma(_2011, cbSceneParam._m0[_2066].y, _2007 * cbSceneParam._m0[_2066].x))) / _2097;
        float _2155 = (cbSceneParam._m0[33u].x - sqrt(((_2021 * _2021) + (_2020 * _2020)) + (_2022 * _2022))) * cbSceneParam._m0[33u].y;
        float _4432 = isnan(0.0) ? _2155 : (isnan(_2155) ? 0.0 : max(_2155, 0.0));
        float _2162 = (isnan(1.0) ? _4432 : (isnan(_4432) ? 1.0 : min(_4432, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2102 + _2085) / _2097, (_2104 + _2089) / _2097), _2107), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2104 + _2085) / _2097, (_2089 - _2102) / _2097), _2107), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2085 - _2102) / _2097, (_2089 - _2104) / _2097), _2107), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2085 - _2104) / _2097, (_2102 + _2089) / _2097), _2107), 0.0)).x), vec4(0.25)));
        _2169 = 1.0 - (_2162 * cbSceneParam._m0[34u].x);
        _2170 = 1.0 - (_2162 * cbSceneParam._m0[34u].y);
        _2171 = 1.0 - (_2162 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2169 = 1.0;
        _2170 = 1.0;
        _2171 = 1.0;
    }
    float _2235;
    float _2237;
    float _2239;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2223 = fma(_2019, cbSceneParam._m0[63u].w, fma(_2015, cbSceneParam._m0[63u].z, fma(_2011, cbSceneParam._m0[63u].y, _2007 * cbSceneParam._m0[63u].x)));
        float _2224 = fma(_2019, cbSceneParam._m0[60u].w, fma(_2015, cbSceneParam._m0[60u].z, fma(_2011, cbSceneParam._m0[60u].y, _2007 * cbSceneParam._m0[60u].x))) / _2223;
        float _2225 = fma(_2019, cbSceneParam._m0[61u].w, fma(_2015, cbSceneParam._m0[61u].z, fma(_2011, cbSceneParam._m0[61u].y, _2007 * cbSceneParam._m0[61u].x))) / _2223;
        float frontier_phi_34_33_ladder;
        float frontier_phi_34_33_ladder_1;
        float frontier_phi_34_33_ladder_2;
        if ((((_2224 >= cbSceneParam._m0[64u].x) && (_2225 >= cbSceneParam._m0[64u].y)) && (_2224 <= cbSceneParam._m0[64u].z)) && (_2225 <= cbSceneParam._m0[64u].w))
        {
            float _2363 = fma(_2019, cbSceneParam._m0[62u].w, fma(_2015, cbSceneParam._m0[62u].z, fma(_2011, cbSceneParam._m0[62u].y, _2007 * cbSceneParam._m0[62u].x))) / _2223;
            float _2367 = isnan(cbSceneParam._m0[41u].w) ? _2363 : (isnan(_2363) ? cbSceneParam._m0[41u].w : max(_2363, cbSceneParam._m0[41u].w));
            float _2410 = (cbSceneParam._m0[33u].x - sqrt(((_2021 * _2021) + (_2020 * _2020)) + (_2022 * _2022))) * cbSceneParam._m0[33u].y;
            float _4448 = isnan(0.0) ? _2410 : (isnan(_2410) ? 0.0 : max(_2410, 0.0));
            float _2417 = (isnan(1.0) ? _4448 : (isnan(_4448) ? 1.0 : min(_4448, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2224, cbSceneParam._m0[33u].w + _2225), _2367), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2224, _2225 - cbSceneParam._m0[33u].z), _2367), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2224 - cbSceneParam._m0[33u].z, _2225 - cbSceneParam._m0[33u].w), _2367), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2224 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2225), _2367), 0.0)).x), vec4(0.25)));
            float _2421 = 1.0 - (_2417 * cbSceneParam._m0[34u].x);
            float _2422 = 1.0 - (_2417 * cbSceneParam._m0[34u].y);
            float _2423 = 1.0 - (_2417 * cbSceneParam._m0[34u].z);
            frontier_phi_34_33_ladder = isnan(_2423) ? _2171 : (isnan(_2171) ? _2423 : min(_2171, _2423));
            frontier_phi_34_33_ladder_1 = isnan(_2422) ? _2170 : (isnan(_2170) ? _2422 : min(_2170, _2422));
            frontier_phi_34_33_ladder_2 = isnan(_2421) ? _2169 : (isnan(_2169) ? _2421 : min(_2169, _2421));
        }
        else
        {
            frontier_phi_34_33_ladder = _2171;
            frontier_phi_34_33_ladder_1 = _2170;
            frontier_phi_34_33_ladder_2 = _2169;
        }
        _2235 = frontier_phi_34_33_ladder_2;
        _2237 = frontier_phi_34_33_ladder_1;
        _2239 = frontier_phi_34_33_ladder;
    }
    else
    {
        _2235 = _2169;
        _2237 = _2170;
        _2239 = _2171;
    }
    uvec4 _2244 = floatBitsToUint(cbInstanceData._m0[_246 + 5u]);
    uint _2246 = _2244.x * 14u;
    uint _2247 = _2246 + 13u;
    float _2254 = _952 + (-1.0);
    float _2259 = (cbLight._m0[_2247].x * _2254) + 1.0;
    float _2260 = (cbLight._m0[_2247].y * _2254) + 1.0;
    float _2261 = (cbLight._m0[_2247].z * _2254) + 1.0;
    float _2262 = (cbLight._m0[_2247].w * _2254) + 1.0;
    uint _2263 = _2246 + 5u;
    float _2269 = isnan(1.0) ? _2260 : (isnan(_2260) ? 1.0 : min(_2260, 1.0));
    uint _2273 = _2246 + 4u;
    float _2282 = isnan(1.0) ? _2259 : (isnan(_2259) ? 1.0 : min(_2259, 1.0));
    uint _2286 = _2246 | 1u;
    float _2297 = dot(vec3(cbLight._m0[_2246].xyz), vec3(_801, _802, _803));
    float _2300 = dot(vec3(cbLight._m0[_2286].xyz), vec3(_801, _802, _803));
    float _4484 = isnan(0.0) ? _2297 : (isnan(_2297) ? 0.0 : max(_2297, 0.0));
    float _4495 = isnan(0.0) ? _2300 : (isnan(_2300) ? 0.0 : max(_2300, 0.0));
    float _2305 = (isnan(1.0) ? _4484 : (isnan(_4484) ? 1.0 : min(_4484, 1.0))) * 0.3183098733425140380859375;
    float _2307 = (isnan(1.0) ? _4495 : (isnan(_4495) ? 1.0 : min(_4495, 1.0))) * 0.3183098733425140380859375;
    float _2314 = ((cbLight._m0[_2263].x * _2269) * _2307) + (((cbLight._m0[_2273].x * _2235) * _2282) * _2305);
    float _2315 = ((_2269 * cbLight._m0[_2263].y) * _2307) + (((cbLight._m0[_2273].y * _2237) * _2282) * _2305);
    float _2316 = ((_2269 * cbLight._m0[_2263].z) * _2307) + (((cbLight._m0[_2273].z * _2239) * _2282) * _2305);
    uvec4 _2320 = floatBitsToUint(cbLight._m0[_2246 + 12u]);
    bool _2322 = _2320.x == 0u;
    float _2424;
    float _2426;
    float _2428;
    if (_2322)
    {
        _2424 = _2314;
        _2426 = _2315;
        _2428 = _2316;
    }
    else
    {
        uint _2432 = _2246 + 6u;
        float _2448 = (dot(vec3(cbLight._m0[_2246 + 2u].xyz), vec3(_801, _802, _803)) * 0.5) + 0.5;
        float _2449 = _2448 * _2448;
        float _4506 = isnan(0.0) ? _2449 : (isnan(_2449) ? 0.0 : max(_2449, 0.0));
        float _2450 = isnan(1.0) ? _4506 : (isnan(_4506) ? 1.0 : min(_4506, 1.0));
        float _2451 = isnan(1.0) ? _2261 : (isnan(_2261) ? 1.0 : min(_2261, 1.0));
        _2424 = (((cbLight._m0[_2432].x * 0.3183098733425140380859375) * _2450) * _2451) + _2314;
        _2426 = (((cbLight._m0[_2432].y * 0.3183098733425140380859375) * _2450) * _2451) + _2315;
        _2428 = (((cbLight._m0[_2432].z * 0.3183098733425140380859375) * _2450) * _2451) + _2316;
    }
    bool _2431 = _2320.y == 0u;
    float _2486;
    float _2488;
    float _2490;
    if (_2431)
    {
        _2486 = _2424;
        _2488 = _2426;
        _2490 = _2428;
    }
    else
    {
        uint _2648 = _2246 + 7u;
        float _2664 = (dot(vec3(cbLight._m0[_2246 + 3u].xyz), vec3(_801, _802, _803)) * 0.5) + 0.5;
        float _2665 = _2664 * _2664;
        float _4522 = isnan(0.0) ? _2665 : (isnan(_2665) ? 0.0 : max(_2665, 0.0));
        float _2666 = isnan(1.0) ? _4522 : (isnan(_4522) ? 1.0 : min(_4522, 1.0));
        float _2667 = isnan(1.0) ? _2262 : (isnan(_2262) ? 1.0 : min(_2262, 1.0));
        _2486 = (((cbLight._m0[_2648].x * 0.3183098733425140380859375) * _2666) * _2667) + _2424;
        _2488 = (((cbLight._m0[_2648].y * 0.3183098733425140380859375) * _2666) * _2667) + _2426;
        _2490 = (((cbLight._m0[_2648].z * 0.3183098733425140380859375) * _2666) * _2667) + _2428;
    }
    uint _2493 = _2246 + 8u;
    float _2506 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2246].w)) * _804) * 0.949999988079071044921875);
    float _2507 = _2506 * _2506;
    float _2508 = cbLight._m0[_2246].x + _881;
    float _2509 = cbLight._m0[_2246].y + _882;
    float _2510 = cbLight._m0[_2246].z + _883;
    float _2514 = inversesqrt(dot(vec3(_2508, _2509, _2510), vec3(_2508, _2509, _2510)));
    float _2515 = _2514 * _2508;
    float _2516 = _2514 * _2509;
    float _2517 = _2514 * _2510;
    float _2518 = dot(vec3(_801, _802, _803), vec3(cbLight._m0[_2246].xyz));
    float _4538 = isnan(0.0) ? _2518 : (isnan(_2518) ? 0.0 : max(_2518, 0.0));
    float _2521 = isnan(1.0) ? _4538 : (isnan(_4538) ? 1.0 : min(_4538, 1.0));
    float _4549 = isnan(0.0) ? _953 : (isnan(_953) ? 0.0 : max(_953, 0.0));
    float _2522 = isnan(1.0) ? _4549 : (isnan(_4549) ? 1.0 : min(_4549, 1.0));
    float _2523 = dot(vec3(_801, _802, _803), vec3(_2515, _2516, _2517));
    float _4560 = isnan(0.0) ? _2523 : (isnan(_2523) ? 0.0 : max(_2523, 0.0));
    float _2526 = isnan(1.0) ? _4560 : (isnan(_4560) ? 1.0 : min(_4560, 1.0));
    float _2527 = dot(vec3(cbLight._m0[_2246].xyz), vec3(_2515, _2516, _2517));
    float _4571 = isnan(0.0) ? _2527 : (isnan(_2527) ? 0.0 : max(_2527, 0.0));
    float _2531 = _2507 * _2507;
    float _2535 = ((_2526 * _2526) * (_2531 + (-1.0))) + 1.0;
    float _2546 = (exp2(log2(1.0 - (isnan(1.0) ? _4571 : (isnan(_4571) ? 1.0 : min(_4571, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2547 = 1.0 - _2507;
    float _2558 = (0.5 / (((_2522 * ((_2521 * _2547) + _2507)) + 9.9999999392252902907785028219223e-09) + (((_2522 * _2547) + _2507) * _2521))) * _2521;
    float _4582 = isnan(0.0) ? _2558 : (isnan(_2558) ? 0.0 : max(_2558, 0.0));
    float _2560 = (isnan(1.0) ? _4582 : (isnan(_4582) ? 1.0 : min(_4582, 1.0))) * (_2531 / ((_2535 * _2535) * 3.141590118408203125));
    uint _2574 = _2246 + 9u;
    float _2585 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2286].w)) * _804) * 0.949999988079071044921875);
    float _2586 = _2585 * _2585;
    float _2587 = cbLight._m0[_2286].x + _881;
    float _2588 = cbLight._m0[_2286].y + _882;
    float _2589 = cbLight._m0[_2286].z + _883;
    float _2593 = inversesqrt(dot(vec3(_2587, _2588, _2589), vec3(_2587, _2588, _2589)));
    float _2594 = _2593 * _2587;
    float _2595 = _2593 * _2588;
    float _2596 = _2593 * _2589;
    float _2597 = dot(vec3(_801, _802, _803), vec3(cbLight._m0[_2286].xyz));
    float _4593 = isnan(0.0) ? _2597 : (isnan(_2597) ? 0.0 : max(_2597, 0.0));
    float _2600 = isnan(1.0) ? _4593 : (isnan(_4593) ? 1.0 : min(_4593, 1.0));
    float _2601 = dot(vec3(_801, _802, _803), vec3(_2594, _2595, _2596));
    float _4604 = isnan(0.0) ? _2601 : (isnan(_2601) ? 0.0 : max(_2601, 0.0));
    float _2604 = isnan(1.0) ? _4604 : (isnan(_4604) ? 1.0 : min(_4604, 1.0));
    float _2605 = dot(vec3(cbLight._m0[_2286].xyz), vec3(_2594, _2595, _2596));
    float _4615 = isnan(0.0) ? _2605 : (isnan(_2605) ? 0.0 : max(_2605, 0.0));
    float _2609 = _2586 * _2586;
    float _2613 = ((_2604 * _2604) * (_2609 + (-1.0))) + 1.0;
    float _2622 = (exp2(log2(1.0 - (isnan(1.0) ? _4615 : (isnan(_4615) ? 1.0 : min(_4615, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2623 = 1.0 - _2586;
    float _2633 = (0.5 / (((_2522 * ((_2600 * _2623) + _2586)) + 9.9999999392252902907785028219223e-09) + (((_2522 * _2623) + _2586) * _2600))) * _2600;
    float _4626 = isnan(0.0) ? _2633 : (isnan(_2633) ? 0.0 : max(_2633, 0.0));
    float _2635 = (isnan(1.0) ? _4626 : (isnan(_4626) ? 1.0 : min(_4626, 1.0))) * (_2609 / ((_2613 * _2613) * 3.141590118408203125));
    float _2645 = (((_2622 * cbLight._m0[_2574].x) * _2635) * _2269) + ((((cbLight._m0[_2493].x * _2235) * _2546) * _2560) * _2282);
    float _2646 = (((_2622 * cbLight._m0[_2574].y) * _2635) * _2269) + ((((cbLight._m0[_2493].y * _2237) * _2546) * _2560) * _2282);
    float _2647 = (((_2622 * cbLight._m0[_2574].z) * _2635) * _2269) + ((((cbLight._m0[_2493].z * _2239) * _2546) * _2560) * _2282);
    float _2703;
    float _2705;
    float _2707;
    if (_2322)
    {
        _2703 = _2645;
        _2705 = _2646;
        _2707 = _2647;
    }
    else
    {
        uint _2709 = _2246 + 2u;
        uint _2713 = _2246 + 10u;
        float _2727 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2709].w)) * _804) * 0.949999988079071044921875);
        float _2728 = _2727 * _2727;
        float _2729 = cbLight._m0[_2709].x + _881;
        float _2730 = cbLight._m0[_2709].y + _882;
        float _2731 = cbLight._m0[_2709].z + _883;
        float _2735 = inversesqrt(dot(vec3(_2729, _2730, _2731), vec3(_2729, _2730, _2731)));
        float _2736 = _2735 * _2729;
        float _2737 = _2735 * _2730;
        float _2738 = _2735 * _2731;
        float _2739 = dot(vec3(_801, _802, _803), vec3(cbLight._m0[_2709].xyz));
        float _4637 = isnan(0.0) ? _2739 : (isnan(_2739) ? 0.0 : max(_2739, 0.0));
        float _2742 = isnan(1.0) ? _4637 : (isnan(_4637) ? 1.0 : min(_4637, 1.0));
        float _2743 = dot(vec3(_801, _802, _803), vec3(_2736, _2737, _2738));
        float _4648 = isnan(0.0) ? _2743 : (isnan(_2743) ? 0.0 : max(_2743, 0.0));
        float _2746 = isnan(1.0) ? _4648 : (isnan(_4648) ? 1.0 : min(_4648, 1.0));
        float _2747 = dot(vec3(cbLight._m0[_2709].xyz), vec3(_2736, _2737, _2738));
        float _4659 = isnan(0.0) ? _2747 : (isnan(_2747) ? 0.0 : max(_2747, 0.0));
        float _2751 = _2728 * _2728;
        float _2755 = ((_2746 * _2746) * (_2751 + (-1.0))) + 1.0;
        float _2764 = (exp2(log2(1.0 - (isnan(1.0) ? _4659 : (isnan(_4659) ? 1.0 : min(_4659, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2765 = 1.0 - _2728;
        float _2775 = (0.5 / (((_2522 * ((_2742 * _2765) + _2728)) + 9.9999999392252902907785028219223e-09) + (((_2522 * _2765) + _2728) * _2742))) * _2742;
        float _4670 = isnan(0.0) ? _2775 : (isnan(_2775) ? 0.0 : max(_2775, 0.0));
        float _2777 = (isnan(1.0) ? _4670 : (isnan(_4670) ? 1.0 : min(_4670, 1.0))) * (_2751 / ((_2755 * _2755) * 3.141590118408203125));
        float _2778 = isnan(1.0) ? _2261 : (isnan(_2261) ? 1.0 : min(_2261, 1.0));
        _2703 = (((_2764 * cbLight._m0[_2713].x) * _2777) * _2778) + _2645;
        _2705 = (((_2764 * cbLight._m0[_2713].y) * _2777) * _2778) + _2646;
        _2707 = (((_2764 * cbLight._m0[_2713].z) * _2777) * _2778) + _2647;
    }
    float _2809;
    float _2811;
    float _2813;
    if (_2431)
    {
        _2809 = _2703;
        _2811 = _2705;
        _2813 = _2707;
    }
    else
    {
        uint _2820 = _2246 + 3u;
        uint _2824 = _2246 + 11u;
        float _2838 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2820].w)) * _804) * 0.949999988079071044921875);
        float _2839 = _2838 * _2838;
        float _2840 = cbLight._m0[_2820].x + _881;
        float _2841 = cbLight._m0[_2820].y + _882;
        float _2842 = cbLight._m0[_2820].z + _883;
        float _2846 = inversesqrt(dot(vec3(_2840, _2841, _2842), vec3(_2840, _2841, _2842)));
        float _2847 = _2846 * _2840;
        float _2848 = _2846 * _2841;
        float _2849 = _2846 * _2842;
        float _2850 = dot(vec3(_801, _802, _803), vec3(cbLight._m0[_2820].xyz));
        float _4686 = isnan(0.0) ? _2850 : (isnan(_2850) ? 0.0 : max(_2850, 0.0));
        float _2853 = isnan(1.0) ? _4686 : (isnan(_4686) ? 1.0 : min(_4686, 1.0));
        float _2854 = dot(vec3(_801, _802, _803), vec3(_2847, _2848, _2849));
        float _4697 = isnan(0.0) ? _2854 : (isnan(_2854) ? 0.0 : max(_2854, 0.0));
        float _2857 = isnan(1.0) ? _4697 : (isnan(_4697) ? 1.0 : min(_4697, 1.0));
        float _2858 = dot(vec3(cbLight._m0[_2820].xyz), vec3(_2847, _2848, _2849));
        float _4708 = isnan(0.0) ? _2858 : (isnan(_2858) ? 0.0 : max(_2858, 0.0));
        float _2862 = _2839 * _2839;
        float _2866 = ((_2857 * _2857) * (_2862 + (-1.0))) + 1.0;
        float _2875 = (exp2(log2(1.0 - (isnan(1.0) ? _4708 : (isnan(_4708) ? 1.0 : min(_4708, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2876 = 1.0 - _2839;
        float _2886 = (0.5 / (((_2522 * ((_2853 * _2876) + _2839)) + 9.9999999392252902907785028219223e-09) + (((_2522 * _2876) + _2839) * _2853))) * _2853;
        float _4719 = isnan(0.0) ? _2886 : (isnan(_2886) ? 0.0 : max(_2886, 0.0));
        float _2888 = (isnan(1.0) ? _4719 : (isnan(_4719) ? 1.0 : min(_4719, 1.0))) * (_2862 / ((_2866 * _2866) * 3.141590118408203125));
        float _2889 = isnan(1.0) ? _2262 : (isnan(_2262) ? 1.0 : min(_2262, 1.0));
        _2809 = (((_2875 * cbLight._m0[_2824].x) * _2888) * _2889) + _2703;
        _2811 = (((_2875 * cbLight._m0[_2824].y) * _2888) * _2889) + _2705;
        _2813 = (((_2875 * cbLight._m0[_2824].z) * _2888) * _2889) + _2707;
    }
    float _2955;
    float _2957;
    float _2959;
    float _2961;
    float _2963;
    float _2965;
    if (_2244.y == 0u)
    {
        uvec4 _2910 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2911 = _2910.x;
        uint _2922 = uint((float(_2910.y) * floor(float(uint(cbSceneParam._m0[85u].y * _890) / _2911))) + floor(float(uint(cbSceneParam._m0[85u].x * _889) / _2911)));
        float _2932 = (log2(_2022 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2933 = isnan(0.0) ? _2932 : (isnan(_2932) ? 0.0 : max(_2932, 0.0));
        uint _2936 = uint(isnan(14.0) ? _2933 : (isnan(_2933) ? 14.0 : min(_2933, 14.0)));
        uvec4 _2941 = texelFetch(g_lightClusterGridBuffer, int(((_2936 << 2u) + (_2922 << 6u)) >> 2u));
        uint _2942 = _2941.x;
        uint _2943 = _2910.z;
        float _3022;
        float _3024;
        float _3026;
        float _3028;
        float _3030;
        float _3032;
        if (((((1u << ((_2943 >> 4u) & 15u)) + 4294967295u) & _2942) == 0u) || ((_2943 & 240u) == 0u))
        {
            _3022 = 0.0;
            _3024 = 0.0;
            _3026 = 0.0;
            _3028 = 0.0;
            _3030 = 0.0;
            _3032 = 0.0;
        }
        else
        {
            float _3023;
            float _3025;
            float _3027;
            float _3029;
            float _3031;
            float _3033;
            float _3167 = 0.0;
            float _3168 = 0.0;
            float _3169 = 0.0;
            float _3170 = 0.0;
            float _3171 = 0.0;
            float _3172 = 0.0;
            uint _3173 = 0u;
            uint _3182;
            bool _3183;
            for (;;)
            {
                _3182 = texelFetch(g_lightClassification, int((((_2936 << 5u) + (_2922 << 9u)) + (_3173 << 2u)) >> 2u)).x;
                _3183 = _3182 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3183)
                {
                    frontier_phi_66_pred = _3172;
                    frontier_phi_66_pred_1 = _3171;
                    frontier_phi_66_pred_2 = _3170;
                    frontier_phi_66_pred_3 = _3169;
                    frontier_phi_66_pred_4 = _3168;
                    frontier_phi_66_pred_5 = _3167;
                }
                else
                {
                    float _3291;
                    float _3292;
                    float _3293;
                    float _3294;
                    float _3295;
                    float _3296;
                    uint _3297;
                    _3291 = _3167;
                    _3292 = _3168;
                    _3293 = _3169;
                    _3294 = _3170;
                    _3295 = _3171;
                    _3296 = _3172;
                    _3297 = _3182;
                    float _3223;
                    float _3224;
                    float _3225;
                    float _3226;
                    float _3227;
                    float _3228;
                    for (;;)
                    {
                        uint _3301 = uint(findLSB(_3297)) + (_3173 << 5u);
                        uint _3298 = (_3297 + 4294967295u) & _3297;
                        uint _3303 = _3301 * 48u;
                        vec4 _3317 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3303)).x, texelFetch(g_PointLightRenderingBuffer, int(_3303 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3303 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3303 + 3u)).x));
                        uint _3323 = (_3301 * 48u) + 4u;
                        vec4 _3336 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3323)).x, texelFetch(g_PointLightRenderingBuffer, int(_3323 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3323 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3323 + 3u)).x));
                        uint _3342 = (_3301 * 48u) + 8u;
                        vec3 _3353 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3342)).x, texelFetch(g_PointLightRenderingBuffer, int(_3342 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3342 + 2u)).x));
                        float _3357 = _3317.x - _2020;
                        float _3358 = _3317.y - _2021;
                        float _3359 = _3317.z - _2022;
                        float _3360 = dot(vec3(_3357, _3358, _3359), vec3(_3357, _3358, _3359));
                        float _3363 = inversesqrt(_3360);
                        float _3364 = _3363 * _3357;
                        float _3365 = _3363 * _3358;
                        float _3366 = _3363 * _3359;
                        float _3367 = dot(vec3(_908, _911, _914), vec3(_3364, _3365, _3366));
                        float _3372 = 1.0 - (_3360 * _3317.w);
                        float _4745 = isnan(0.0) ? _3372 : (isnan(_3372) ? 0.0 : max(_3372, 0.0));
                        float _3373 = isnan(1.0) ? _4745 : (isnan(_4745) ? 1.0 : min(_4745, 1.0));
                        float _3374 = sqrt(_3360) * _3336.w;
                        float _3377 = 1.39999997615814208984375 / (_3374 + 1.39999997615814208984375);
                        float _3378 = _3377 * _3377;
                        float _3381 = ((1.0 - _3378) * _3367) + _3378;
                        float _3384 = _3374 * _3374;
                        float _3388 = ((isnan(0.0) ? _3381 : (isnan(_3381) ? 0.0 : max(_3381, 0.0))) * _3373) / ((_3384 * 0.699999988079071044921875) + 1.0);
                        float _3392 = (-0.0) - _2020;
                        float _3393 = (-0.0) - _2021;
                        float _3394 = (-0.0) - _2022;
                        float _3398 = inversesqrt(dot(vec3(_3392, _3393, _3394), vec3(_3392, _3393, _3394)));
                        float _3399 = _3398 * _3392;
                        float _3400 = _3398 * _3393;
                        float _3401 = _3398 * _3394;
                        float _3408 = exp2(log2(1.0 / ((_3384 * 3.5) + 5.0)) * 0.25);
                        float _3409 = 1.0 - _968;
                        float _3416 = sqrt(1.0 - ((1.0 - (_3409 * _3409)) * (1.0 - (_3408 * _3408))));
                        float _3417 = _3416 * _3416;
                        float _3418 = _3417 * _3417;
                        float _3419 = _3399 + _3364;
                        float _3420 = _3400 + _3365;
                        float _3421 = _3401 + _3366;
                        float _3425 = inversesqrt(dot(vec3(_3419, _3420, _3421), vec3(_3419, _3420, _3421)));
                        float _3429 = dot(vec3(_908, _911, _914), vec3(_3399, _3400, _3401));
                        float _4761 = isnan(0.0) ? _3429 : (isnan(_3429) ? 0.0 : max(_3429, 0.0));
                        float _3432 = isnan(1.0) ? _4761 : (isnan(_4761) ? 1.0 : min(_4761, 1.0));
                        float _3433 = dot(vec3(_908, _911, _914), vec3(_3425 * _3419, _3425 * _3420, _3425 * _3421));
                        float _4772 = isnan(0.0) ? _3433 : (isnan(_3433) ? 0.0 : max(_3433, 0.0));
                        float _3436 = isnan(1.0) ? _4772 : (isnan(_4772) ? 1.0 : min(_4772, 1.0));
                        float _3440 = ((_3436 * _3436) * (_3418 + (-1.0))) + 1.0;
                        float _3441 = _3377 * _3417;
                        float _3442 = _3441 * _3441;
                        float _3445 = ((1.0 - _3442) * _3367) + _3442;
                        float _4783 = isnan(0.0) ? _3445 : (isnan(_3445) ? 0.0 : max(_3445, 0.0));
                        float _3446 = isnan(1.0) ? _4783 : (isnan(_4783) ? 1.0 : min(_4783, 1.0));
                        float _3447 = 1.0 - _3417;
                        float _3457 = (0.5 / (((_3446 * ((_3432 * _3447) + _3417)) + 9.9999999392252902907785028219223e-09) + (((_3446 * _3447) + _3417) * _3432))) * _3446;
                        float _4794 = isnan(0.0) ? _3457 : (isnan(_3457) ? 0.0 : max(_3457, 0.0));
                        float _3468 = (((_3418 * 3.1415927410125732421875) * (isnan(1.0) ? _4794 : (isnan(_4794) ? 1.0 : min(_4794, 1.0)))) / ((_3440 * _3440) * ((_3384 * 2.1991131305694580078125) + 3.141590118408203125))) * _3373;
                        _3226 = (_3388 * _3336.x) + _3294;
                        _3227 = (_3388 * _3336.y) + _3295;
                        _3228 = (_3388 * _3336.z) + _3296;
                        _3223 = (_3468 * _3353.x) + _3291;
                        _3224 = (_3468 * _3353.y) + _3292;
                        _3225 = (_3468 * _3353.z) + _3293;
                        if (_3298 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3291 = _3223;
                            _3292 = _3224;
                            _3293 = _3225;
                            _3294 = _3226;
                            _3295 = _3227;
                            _3296 = _3228;
                            _3297 = _3298;
                        }
                    }
                    frontier_phi_66_pred = _3228;
                    frontier_phi_66_pred_1 = _3227;
                    frontier_phi_66_pred_2 = _3226;
                    frontier_phi_66_pred_3 = _3225;
                    frontier_phi_66_pred_4 = _3224;
                    frontier_phi_66_pred_5 = _3223;
                }
                _3033 = frontier_phi_66_pred;
                _3031 = frontier_phi_66_pred_1;
                _3029 = frontier_phi_66_pred_2;
                _3027 = frontier_phi_66_pred_3;
                _3025 = frontier_phi_66_pred_4;
                _3023 = frontier_phi_66_pred_5;
                uint _3174 = _3173 + 1u;
                if (_3174 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3167 = _3023;
                    _3168 = _3025;
                    _3169 = _3027;
                    _3170 = _3029;
                    _3171 = _3031;
                    _3172 = _3033;
                    _3173 = _3174;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3022 = _3023;
            _3024 = _3025;
            _3026 = _3027;
            _3028 = _3029;
            _3030 = _3031;
            _3032 = _3033;
        }
        uvec4 _3036 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3037 = _3036.z;
        uint _3039 = (_3037 >> 8u) & 15u;
        float _3135;
        float _3137;
        float _3139;
        float _3141;
        float _3143;
        float _3145;
        if (((4294967295u << _3039) & _2942) == 0u)
        {
            _3135 = _3022;
            _3137 = _3024;
            _3139 = _3026;
            _3141 = _3028;
            _3143 = _3030;
            _3145 = _3032;
        }
        else
        {
            float _3160 = inversesqrt(dot(vec3(_2020, _2021, _2022), vec3(_2020, _2021, _2022)));
            float _3161 = _3160 * _2020;
            float _3162 = _3160 * _2021;
            float _3163 = _3160 * _2022;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_3039 < ((_3037 >> 12u) & 15u))
            {
                float _3136;
                float _3138;
                float _3140;
                float _3142;
                float _3144;
                float _3146;
                float _3274 = _3022;
                float _3275 = _3024;
                float _3276 = _3026;
                float _3277 = _3028;
                float _3278 = _3030;
                float _3279 = _3032;
                uint _3280 = _3039;
                uint _3289;
                bool _3290;
                for (;;)
                {
                    _3289 = texelFetch(g_lightClassification, int((((_2936 << 5u) + (_2922 << 9u)) + (_3280 << 2u)) >> 2u)).x;
                    _3290 = _3289 == 0u;
                    float frontier_phi_72_pred;
                    float frontier_phi_72_pred_1;
                    float frontier_phi_72_pred_2;
                    float frontier_phi_72_pred_3;
                    float frontier_phi_72_pred_4;
                    float frontier_phi_72_pred_5;
                    if (_3290)
                    {
                        frontier_phi_72_pred = _3279;
                        frontier_phi_72_pred_1 = _3278;
                        frontier_phi_72_pred_2 = _3277;
                        frontier_phi_72_pred_3 = _3276;
                        frontier_phi_72_pred_4 = _3275;
                        frontier_phi_72_pred_5 = _3274;
                    }
                    else
                    {
                        float _3473;
                        float _3474;
                        float _3475;
                        float _3476;
                        float _3477;
                        float _3478;
                        float _3766;
                        float _3767;
                        float _3768;
                        float _3769;
                        float _3770;
                        float _3771;
                        float _3486 = _3274;
                        float _3487 = _3275;
                        float _3488 = _3276;
                        float _3489 = _3277;
                        float _3490 = _3278;
                        float _3491 = _3279;
                        uint _3492 = _3289;
                        uint _3493;
                        vec4 _3518;
                        float _3519;
                        vec4 _3534;
                        vec3 _3546;
                        vec4 _3561;
                        vec4 _3576;
                        float _3622;
                        bool _3623;
                        for (;;)
                        {
                            uint _3503 = ((_3280 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3492));
                            _3493 = (_3492 + 4294967295u) & _3492;
                            uint _3505 = _3503 * 40u;
                            _3518 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3505)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3505 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3505 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3505 + 3u)).x));
                            _3519 = _3518.w;
                            uint _3521 = (_3503 * 40u) + 4u;
                            _3534 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3521)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3521 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3521 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3521 + 3u)).x));
                            uint _3536 = (_3503 * 40u) + 8u;
                            _3546 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3536)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3536 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3536 + 2u)).x));
                            uint _3548 = (_3503 * 40u) + 16u;
                            _3561 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3548)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3548 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3548 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3548 + 3u)).x));
                            uint _3563 = (_3503 * 40u) + 20u;
                            _3576 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3563)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3563 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3563 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3563 + 3u)).x));
                            uint _3578 = (_3503 * 40u) + 24u;
                            vec4 _3591 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3578)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3578 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3578 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3578 + 3u)).x));
                            uint _3597 = (_3503 * 40u) + 28u;
                            vec4 _3610 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3597)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3597 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3597 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3597 + 3u)).x));
                            _3622 = fma(_2022, _3610.z, fma(_2021, _3610.y, _3610.x * _2020)) + _3610.w;
                            _3623 = !((fma(_2022, _3591.z, fma(_2021, _3591.y, _3591.x * _2020)) + _3591.w) <= 0.0);
                            float frontier_phi_78_pred;
                            float frontier_phi_78_pred_1;
                            float frontier_phi_78_pred_2;
                            float frontier_phi_78_pred_3;
                            float frontier_phi_78_pred_4;
                            float frontier_phi_78_pred_5;
                            if (_3623)
                            {
                                float _3650 = _3518.x - _2020;
                                float _3651 = _3518.y - _2021;
                                float _3652 = _3518.z - _2022;
                                float _3653 = dot(vec3(_3650, _3651, _3652), vec3(_3650, _3651, _3652));
                                float _3656 = inversesqrt(_3653);
                                float _3657 = _3656 * _3650;
                                float _3658 = _3656 * _3651;
                                float _3659 = _3656 * _3652;
                                float _3663 = 1.0 - (_3653 / (_3519 * _3519));
                                float _4805 = isnan(0.0) ? _3663 : (isnan(_3663) ? 0.0 : max(_3663, 0.0));
                                float _3664 = isnan(1.0) ? _4805 : (isnan(_4805) ? 1.0 : min(_4805, 1.0));
                                float _3668 = sqrt(_3653) * _3534.w;
                                float _3670 = 1.39999997615814208984375 / (_3668 + 1.39999997615814208984375);
                                float _3671 = _3670 * _3670;
                                float _3674 = ((1.0 - _3671) * dot(vec3(_3657, _3658, _3659), vec3(_908, _911, _914))) + _3671;
                                float _3677 = _3668 * _3668;
                                float _3681 = (fma(_2022, _3561.z, fma(_2021, _3561.y, _3561.x * _2020)) + _3561.w) / _3622;
                                float _3682 = (fma(_2022, _3576.z, fma(_2021, _3576.y, _3576.x * _2020)) + _3576.w) / _3622;
                                float _3686 = 1.0 - dot(vec2(_3681, _3682), vec2(_3681, _3682));
                                float _4821 = isnan(0.0) ? _3686 : (isnan(_3686) ? 0.0 : max(_3686, 0.0));
                                float _3687 = isnan(1.0) ? _4821 : (isnan(_4821) ? 1.0 : min(_4821, 1.0));
                                float _3688 = _3687 * (((isnan(0.0) ? _3674 : (isnan(_3674) ? 0.0 : max(_3674, 0.0))) * _3664) / ((_3677 * 0.699999988079071044921875) + 1.0));
                                float _3700 = exp2(log2(1.0 / ((_3677 * 3.5) + 5.0)) * 0.25);
                                float _3701 = 1.0 - _968;
                                float _3708 = sqrt(1.0 - ((1.0 - (_3701 * _3701)) * (1.0 - (_3700 * _3700))));
                                float _3709 = _3708 * _3708;
                                float _3710 = _3709 * _3709;
                                float _3711 = _3657 - _3161;
                                float _3712 = _3658 - _3162;
                                float _3713 = _3659 - _3163;
                                float _3717 = inversesqrt(dot(vec3(_3711, _3712, _3713), vec3(_3711, _3712, _3713)));
                                float _3721 = dot(vec3(_908, _911, _914), vec3((-0.0) - _3161, (-0.0) - _3162, (-0.0) - _3163));
                                float _4832 = isnan(0.0) ? _3721 : (isnan(_3721) ? 0.0 : max(_3721, 0.0));
                                float _3724 = isnan(1.0) ? _4832 : (isnan(_4832) ? 1.0 : min(_4832, 1.0));
                                float _3725 = dot(vec3(_908, _911, _914), vec3(_3717 * _3711, _3717 * _3712, _3717 * _3713));
                                float _4843 = isnan(0.0) ? _3725 : (isnan(_3725) ? 0.0 : max(_3725, 0.0));
                                float _3728 = isnan(1.0) ? _4843 : (isnan(_4843) ? 1.0 : min(_4843, 1.0));
                                float _3732 = ((_3728 * _3728) * (_3710 + (-1.0))) + 1.0;
                                float _3733 = _3670 * _3709;
                                float _3734 = _3733 * _3733;
                                float _3740 = ((1.0 - _3734) * dot(vec3(_908, _911, _914), vec3(_3657, _3658, _3659))) + _3734;
                                float _4854 = isnan(0.0) ? _3740 : (isnan(_3740) ? 0.0 : max(_3740, 0.0));
                                float _3741 = isnan(1.0) ? _4854 : (isnan(_4854) ? 1.0 : min(_4854, 1.0));
                                float _3742 = 1.0 - _3709;
                                float _3752 = (0.5 / (((_3741 * ((_3724 * _3742) + _3709)) + 9.9999999392252902907785028219223e-09) + (((_3741 * _3742) + _3709) * _3724))) * _3741;
                                float _4865 = isnan(0.0) ? _3752 : (isnan(_3752) ? 0.0 : max(_3752, 0.0));
                                float _3762 = (_3687 * _3664) * (((_3710 * 3.1415927410125732421875) * (isnan(1.0) ? _4865 : (isnan(_4865) ? 1.0 : min(_4865, 1.0)))) / ((_3732 * _3732) * ((_3677 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_78_pred = _3688 * _3534.y;
                                frontier_phi_78_pred_1 = _3688 * _3534.x;
                                frontier_phi_78_pred_2 = _3762 * _3546.z;
                                frontier_phi_78_pred_3 = _3762 * _3546.y;
                                frontier_phi_78_pred_4 = _3762 * _3546.x;
                                frontier_phi_78_pred_5 = _3688 * _3534.z;
                            }
                            else
                            {
                                frontier_phi_78_pred = 0.0;
                                frontier_phi_78_pred_1 = 0.0;
                                frontier_phi_78_pred_2 = 0.0;
                                frontier_phi_78_pred_3 = 0.0;
                                frontier_phi_78_pred_4 = 0.0;
                                frontier_phi_78_pred_5 = 0.0;
                            }
                            _3770 = frontier_phi_78_pred;
                            _3769 = frontier_phi_78_pred_1;
                            _3768 = frontier_phi_78_pred_2;
                            _3767 = frontier_phi_78_pred_3;
                            _3766 = frontier_phi_78_pred_4;
                            _3771 = frontier_phi_78_pred_5;
                            _3476 = _3769 + _3489;
                            _3477 = _3770 + _3490;
                            _3478 = _3771 + _3491;
                            _3473 = _3766 + _3486;
                            _3474 = _3767 + _3487;
                            _3475 = _3768 + _3488;
                            if (_3493 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3486 = _3473;
                                _3487 = _3474;
                                _3488 = _3475;
                                _3489 = _3476;
                                _3490 = _3477;
                                _3491 = _3478;
                                _3492 = _3493;
                                continue;
                            }
                        }
                        frontier_phi_72_pred = _3478;
                        frontier_phi_72_pred_1 = _3477;
                        frontier_phi_72_pred_2 = _3476;
                        frontier_phi_72_pred_3 = _3475;
                        frontier_phi_72_pred_4 = _3474;
                        frontier_phi_72_pred_5 = _3473;
                    }
                    _3146 = frontier_phi_72_pred;
                    _3144 = frontier_phi_72_pred_1;
                    _3142 = frontier_phi_72_pred_2;
                    _3140 = frontier_phi_72_pred_3;
                    _3138 = frontier_phi_72_pred_4;
                    _3136 = frontier_phi_72_pred_5;
                    uint _3281 = _3280 + 1u;
                    if (_3281 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3274 = _3136;
                        _3275 = _3138;
                        _3276 = _3140;
                        _3277 = _3142;
                        _3278 = _3144;
                        _3279 = _3146;
                        _3280 = _3281;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _3146;
                frontier_phi_60_61_ladder_1 = _3144;
                frontier_phi_60_61_ladder_2 = _3140;
                frontier_phi_60_61_ladder_3 = _3138;
                frontier_phi_60_61_ladder_4 = _3136;
                frontier_phi_60_61_ladder_5 = _3142;
            }
            else
            {
                frontier_phi_60_61_ladder = _3032;
                frontier_phi_60_61_ladder_1 = _3030;
                frontier_phi_60_61_ladder_2 = _3026;
                frontier_phi_60_61_ladder_3 = _3024;
                frontier_phi_60_61_ladder_4 = _3022;
                frontier_phi_60_61_ladder_5 = _3028;
            }
            _3135 = frontier_phi_60_61_ladder_4;
            _3137 = frontier_phi_60_61_ladder_3;
            _3139 = frontier_phi_60_61_ladder_2;
            _3141 = frontier_phi_60_61_ladder_5;
            _3143 = frontier_phi_60_61_ladder_1;
            _3145 = frontier_phi_60_61_ladder;
        }
        float _3150 = isnan(1.0) ? _952 : (isnan(_952) ? 1.0 : min(_952, 1.0));
        _2955 = (_3150 * _3141) + _2486;
        _2957 = (_3150 * _3143) + _2488;
        _2959 = (_3150 * _3145) + _2490;
        _2961 = ((_3135 * 0.039999999105930328369140625) * _3150) + _2809;
        _2963 = ((_3137 * 0.039999999105930328369140625) * _3150) + _2811;
        _2965 = ((_3139 * 0.039999999105930328369140625) * _3150) + _2813;
    }
    else
    {
        _2955 = _2486;
        _2957 = _2488;
        _2959 = _2490;
        _2961 = _2809;
        _2963 = _2811;
        _2965 = _2813;
    }
    float _4881 = isnan(0.0) ? _937 : (isnan(_937) ? 0.0 : max(_937, 0.0));
    float _4892 = isnan(0.0) ? _938 : (isnan(_938) ? 0.0 : max(_938, 0.0));
    float _4903 = isnan(0.0) ? _939 : (isnan(_939) ? 0.0 : max(_939, 0.0));
    uint _2985 = _246 + 6u;
    float _2993 = _889 / cbSceneParam._m0[86u].x;
    float _2994 = _890 / cbSceneParam._m0[86u].y;
    vec4 _3008 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2993, _2994, (log2((isnan(cbSceneParam._m0[77u].w) ? _822 : (isnan(_822) ? cbSceneParam._m0[77u].w : min(_822, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3010 = _3008.x;
    float _3011 = _3008.y;
    float _3012 = _3008.z;
    float _3013 = _3008.w;
    float _3085;
    float _3087;
    float _3089;
    float _3091;
    if (_822 > cbSceneParam._m0[78u].w)
    {
        float _3047 = isnan(_822) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _822 : min(cbSceneParam._m0[80u].w, _822));
        float _3048 = _3047 / _822;
        float _3059 = _3048 * _874;
        float _3060 = _875 * _3048;
        float _3061 = (-0.0) - _3060;
        float _3063 = _3048 * _876;
        float _3065 = (cbSceneParam._m0[77u].w * _3061) / _3047;
        float _3066 = _3065 + cbSceneParam._m0[79u].w;
        float _3067 = cbSceneParam._m0[79u].w - _3060;
        float _3073 = sqrt(((_3059 * _3059) + (_3060 * _3060)) + (_3063 * _3063));
        float _3076 = (1.0 - (cbSceneParam._m0[77u].w / _3047)) * _3073;
        float _3081 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3083 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3236;
        if (abs((_3061 - _3065) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3236 = ((((_3066 > 0.0) ? exp2(_3081 * _3066) : (2.0 - exp2(_3083 * _3066))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3076;
        }
        else
        {
            float _3196 = 1.0 / cbSceneParam._m0[80u].x;
            float _3197 = isnan(_3067) ? _3066 : (isnan(_3066) ? _3067 : max(_3066, _3067));
            float _3198 = isnan(_3067) ? _3066 : (isnan(_3066) ? _3067 : min(_3066, _3067));
            float _3207 = isnan(0.0) ? _3197 : (isnan(_3197) ? 0.0 : min(_3197, 0.0));
            float _3208 = isnan(0.0) ? _3198 : (isnan(_3198) ? 0.0 : min(_3198, 0.0));
            _3236 = ((abs(_3073 / _3061) * cbSceneParam._m0[80u].y) * ((((_3207 - _3208) * 2.0) - ((exp2(_3081 * (isnan(0.0) ? _3197 : (isnan(_3197) ? 0.0 : max(_3197, 0.0)))) - exp2(_3081 * (isnan(0.0) ? _3198 : (isnan(_3198) ? 0.0 : max(_3198, 0.0))))) * _3196)) - ((exp2(_3083 * _3207) - exp2(_3083 * _3208)) * _3196))) + (_3076 * cbSceneParam._m0[80u].z);
        }
        vec4 _3238 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2993, _2994, 1.0), 0.0);
        float _3247 = exp2((_3236 * (-1.44269502162933349609375)) * (1.0 - _3238.w));
        float _3248 = log2(_3247);
        float _3264 = log2(_3013);
        _3085 = (exp2(_3264 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3248 * cbSceneParam._m0[78u].x)) * _3238.x) / cbSceneParam._m0[78u].x)) + _3010;
        _3087 = (exp2(_3264 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3248 * cbSceneParam._m0[78u].y)) * _3238.y) / cbSceneParam._m0[78u].y)) + _3011;
        _3089 = (exp2(_3264 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3248 * cbSceneParam._m0[78u].z)) * _3238.z) / cbSceneParam._m0[78u].z)) + _3012;
        _3091 = _3247 * _3013;
    }
    else
    {
        _3085 = _3010;
        _3087 = _3011;
        _3089 = _3012;
        _3091 = _3013;
    }
    float _3103 = roundEven(cbMatDynParam._m0[0u].y);
    bool _3104 = _3103 == 3.0;
    float _3105 = log2(_3091);
    float _3112 = exp2(_3105 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4881 : (isnan(_4881) ? 1.0 : min(_4881, 1.0))) * (_2955 + ((isnan(0.0) ? _1676 : (isnan(_1676) ? 0.0 : max(_1676, 0.0))) * _952))) + ((_2961 + ((isnan(0.0) ? _1967 : (isnan(_1967) ? 0.0 : max(_1967, 0.0))) * _1755)) * cbPerFrame._m0[3u].x));
    float _3113 = exp2(_3105 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4892 : (isnan(_4892) ? 1.0 : min(_4892, 1.0))) * (_2957 + ((isnan(0.0) ? _1679 : (isnan(_1679) ? 0.0 : max(_1679, 0.0))) * _952))) + ((_2963 + ((isnan(0.0) ? _1970 : (isnan(_1970) ? 0.0 : max(_1970, 0.0))) * _1755)) * cbPerFrame._m0[3u].x));
    float _3114 = exp2(_3105 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4903 : (isnan(_4903) ? 1.0 : min(_4903, 1.0))) * (_2959 + ((isnan(0.0) ? _1682 : (isnan(_1682) ? 0.0 : max(_1682, 0.0))) * _952))) + ((_2965 + ((isnan(0.0) ? _1973 : (isnan(_1973) ? 0.0 : max(_1973, 0.0))) * _1755)) * cbPerFrame._m0[3u].x));
    float _3123 = (_3103 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _3123 * (_3104 ? _3112 : (_3112 + (cbSceneParam._m0[72u].w * _3085)));
    SV_Target.y = _3123 * (_3104 ? _3113 : (_3113 + (cbSceneParam._m0[72u].w * _3087)));
    SV_Target.z = _3123 * (_3104 ? _3114 : (_3114 + (cbSceneParam._m0[72u].w * _3089)));
    SV_Target.w = cbInstanceData._m0[_2985].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2985].w;
}


