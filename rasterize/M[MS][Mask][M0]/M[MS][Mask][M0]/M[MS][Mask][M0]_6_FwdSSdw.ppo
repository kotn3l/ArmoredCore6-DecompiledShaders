#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_29;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_6;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1129;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _213 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _214 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _215 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _221 = inversesqrt(dot(vec3(_213, _214, _215), vec3(_213, _214, _215)));
    float _228 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _235 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _241 = uint(roundEven(NORMAL.w)) * 13u;
    uint _246 = _241 + 1u;
    uint _250 = _241 + 2u;
    float _259 = sqrt(((cbInstanceData._m0[_246].x * cbInstanceData._m0[_246].x) + (cbInstanceData._m0[_241].x * cbInstanceData._m0[_241].x)) + (cbInstanceData._m0[_250].x * cbInstanceData._m0[_250].x));
    float _260 = _259 * TEXCOORD.z;
    float _261 = _259 * TEXCOORD.w;
    vec4 _281 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _287 = _281.x * cbMtdParam._m0[11u].x;
    float _288 = _281.y * cbMtdParam._m0[11u].y;
    float _289 = _281.z * cbMtdParam._m0[11u].z;
    vec4 _308 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _260) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _261) + cbTextureTilingScale._m0[5u].w));
    vec4 _361 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _363 = _361.x;
    float _375 = dot(vec4(_363, _361.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _392 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w)).x) * 2.0) - ((((_363 - _375) * cbMtdParam._m0[24u].z) + _375) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3462 = isnan(0.0) ? _392 : (isnan(_392) ? 0.0 : max(_392, 0.0));
    float _393 = isnan(1.0) ? _3462 : (isnan(_3462) ? 1.0 : min(_3462, 1.0));
    float _400 = (_393 * ((_308.x * cbMtdParam._m0[12u].x) - _287)) + _287;
    float _401 = (_393 * ((_308.y * cbMtdParam._m0[12u].y) - _288)) + _288;
    float _402 = (_393 * ((_308.z * cbMtdParam._m0[12u].z) - _289)) + _289;
    vec4 _415 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _260) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _261) + cbTextureTilingScale._m0[4u].w));
    vec4 _432 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _434 = _432.x;
    float _435 = _432.y;
    float _436 = _432.z;
    float _445 = ((_415.z - _436) * _393) + _436;
    float _448 = ((((_415.x - _434) * _393) + _434) * 2.0) + (-1.0);
    float _450 = ((((_415.y - _435) * _393) + _435) * 2.0) + (-1.0);
    float _451 = dot(vec2(_448, _450), vec2(_448, _450));
    float _3473 = isnan(0.0) ? _451 : (isnan(_451) ? 0.0 : max(_451, 0.0));
    float _456 = sqrt(1.0 - (isnan(1.0) ? _3473 : (isnan(_3473) ? 1.0 : min(_3473, 1.0))));
    vec4 _472 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _484 = (((_472.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _448;
    float _485 = (((_472.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _450;
    vec4 _497 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _260) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _261) + cbTextureTilingScale._m0[19u].w));
    float _499 = _497.x;
    float _500 = 1.0 - _499;
    float _528 = (TEXCOORD_8.x - ((cbMtdParam._m0[22u].w * (1.0 - TEXCOORD_8.x)) * ((((_499 - _500) * cbMtdParam._m0[24u].y) + _500) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3484 = isnan(0.0) ? _528 : (isnan(_528) ? 0.0 : max(_528, 0.0));
    float _529 = isnan(1.0) ? _3484 : (isnan(_3484) ? 1.0 : min(_3484, 1.0));
    float _537 = ((((cbMtdParam._m0[10u].x - _400) * TEXCOORD_8.x) * cbMtdParam._m0[23u].w) * _529) + _400;
    float _538 = ((((cbMtdParam._m0[10u].y - _401) * TEXCOORD_8.y) * cbMtdParam._m0[23u].w) * _529) + _401;
    float _539 = (((cbMtdParam._m0[23u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _402)) * _529) + _402;
    float _543 = (cbMtdParam._m0[19u].w * (_472.z - _445)) + _445;
    float _547 = ((cbMtdParam._m0[23u].y - _543) * _529) + _543;
    vec4 _566 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _260) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _261) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _572 = (_566.x * 2.0) + (-1.0);
    float _573 = (_566.y * 2.0) + (-1.0);
    float _574 = dot(vec2(_572, _573), vec2(_572, _573));
    float _3495 = isnan(0.0) ? _574 : (isnan(_574) ? 0.0 : max(_574, 0.0));
    float _590 = (_529 * (((cbMtdParam._m0[22u].z * _484) - _484) + _572)) + _484;
    float _591 = (_529 * (((cbMtdParam._m0[22u].z * _485) - _485) + _573)) + _485;
    float _592 = (_529 * (sqrt(1.0 - (isnan(1.0) ? _3495 : (isnan(_3495) ? 1.0 : min(_3495, 1.0)))) - _456)) + _456;
    float _594 = cbMtdParam._m0[22u].x + _472.w;
    float _597 = fma(_592, _228 * NORMAL.x, fma(_591, _235 * TANGENT.x, (_221 * _213) * _590));
    float _600 = fma(_592, _228 * NORMAL.y, fma(_591, _235 * TANGENT.y, (_221 * _214) * _590));
    float _603 = fma(_592, _228 * NORMAL.z, fma(_591, _235 * TANGENT.z, (_221 * _215) * _590));
    float _607 = inversesqrt(dot(vec3(_597, _600, _603), vec3(_597, _600, _603)));
    float _608 = _607 * _597;
    float _609 = _607 * _600;
    float _610 = _607 * _603;
    float _3506 = isnan(0.0) ? _547 : (isnan(_547) ? 0.0 : max(_547, 0.0));
    float _611 = isnan(1.0) ? _3506 : (isnan(_3506) ? 1.0 : min(_3506, 1.0));
    float _3517 = isnan(0.0) ? _594 : (isnan(_594) ? 0.0 : max(_594, 0.0));
    float _3528 = isnan(0.0) ? _537 : (isnan(_537) ? 0.0 : max(_537, 0.0));
    float _3539 = isnan(0.0) ? _538 : (isnan(_538) ? 0.0 : max(_538, 0.0));
    float _3550 = isnan(0.0) ? _539 : (isnan(_539) ? 0.0 : max(_539, 0.0));
    float _629 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _670 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _680 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _670);
    float _681 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _670);
    float _682 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _670);
    float _686 = inversesqrt(dot(vec3(_680, _681, _682), vec3(_680, _681, _682)));
    float _687 = _680 * _686;
    float _688 = _681 * _686;
    float _689 = _682 * _686;
    float _695 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _696 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _714 = fma(_610, cbSceneParam._m0[5u].z, fma(_609, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _608));
    float _717 = fma(_610, cbSceneParam._m0[6u].z, fma(_609, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _608));
    float _720 = fma(_610, cbSceneParam._m0[7u].z, fma(_609, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _608));
    uint _734 = (_241 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _740 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3528 : (isnan(_3528) ? 1.0 : min(_3528, 1.0)))) * cbInstanceData._m0[_734].x;
    float _741 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3539 : (isnan(_3539) ? 1.0 : min(_3539, 1.0)))) * cbInstanceData._m0[_734].y;
    float _742 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3550 : (isnan(_3550) ? 1.0 : min(_3550, 1.0)))) * cbInstanceData._m0[_734].z;
    float _3561 = isnan(0.0) ? _740 : (isnan(_740) ? 0.0 : max(_740, 0.0));
    float _743 = isnan(1.0) ? _3561 : (isnan(_3561) ? 1.0 : min(_3561, 1.0));
    float _3572 = isnan(0.0) ? _741 : (isnan(_741) ? 0.0 : max(_741, 0.0));
    float _744 = isnan(1.0) ? _3572 : (isnan(_3572) ? 1.0 : min(_3572, 1.0));
    float _3583 = isnan(0.0) ? _742 : (isnan(_742) ? 0.0 : max(_742, 0.0));
    float _745 = isnan(1.0) ? _3583 : (isnan(_3583) ? 1.0 : min(_3583, 1.0));
    vec4 _754 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _695, cbSceneParam._m0[86u].y * _696));
    float _758 = ((isnan(1.0) ? _3517 : (isnan(_3517) ? 1.0 : min(_3517, 1.0))) * TEXCOORD_5.w) * _754.x;
    float _759 = dot(vec3(_608, _609, _610), vec3(_687, _688, _689));
    float _762 = _759 * 2.0;
    float _766 = (_762 * _608) - _687;
    float _767 = (_762 * _609) - _688;
    float _768 = (_762 * _610) - _689;
    float _772 = abs(dot(vec3(_687, _688, _689), vec3(_608, _609, _610)));
    float _3594 = isnan(0.0) ? _772 : (isnan(_772) ? 0.0 : max(_772, 0.0));
    float _774 = sqrt(_611);
    float _787 = exp2((_774 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3594 : (isnan(_3594) ? 1.0 : min(_3594, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_774 * 3.0));
    float _819 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _823 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _827 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1128;
    float _1130;
    float _1131;
    float _1132;
    float _1133;
    float _1134;
    float _1135;
    float _1136;
    float _1137;
    float _1138;
    float _1139;
    float _1140;
    float _1141;
    float _1142;
    float _1143;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _853 = fma(_827, cbModelParam._m0[26u].z, fma(_823, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _819));
        float _857 = fma(_827, cbModelParam._m0[27u].z, fma(_823, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _819));
        float _861 = fma(_827, cbModelParam._m0[28u].z, fma(_823, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _819));
        float _886 = _819 + _608;
        float _887 = _823 + _609;
        float _888 = _827 + _610;
        float _898 = fma(_888, cbModelParam._m0[26u].z, fma(_887, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _886)) - _853;
        float _899 = fma(_888, cbModelParam._m0[27u].z, fma(_887, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _886)) - _857;
        float _900 = fma(_888, cbModelParam._m0[28u].z, fma(_887, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _886)) - _861;
        float _904 = inversesqrt(dot(vec3(_898, _899, _900), vec3(_898, _899, _900)));
        float _917 = ((_904 * _898) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_853 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _918 = ((_904 * _899) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_857 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _919 = ((_904 * _900) / cbModelParam._m0[34u].z) + ((((((_861 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _922 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_917, _918, _919), 0.0);
        vec4 _929 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_917, _918, _919), 0.0);
        vec4 _936 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_917, _918, _919), 0.0);
        vec4 _943 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_917, _918, _919), 0.0);
        float _956 = exp2((_922.w + (-0.5)) * 20.0) * 2.0;
        float _957 = _956 * (_922.x + (-0.5));
        float _958 = _956 * (_922.y + (-0.5));
        float _959 = _956 * (_922.z + (-0.5));
        float _966 = exp2((_929.w + (-0.5)) * 20.0) * 2.0;
        float _967 = _966 * (_929.x + (-0.5));
        float _968 = _966 * (_929.y + (-0.5));
        float _969 = _966 * (_929.z + (-0.5));
        float _976 = exp2((_936.w + (-0.5)) * 20.0) * 2.0;
        float _977 = _976 * (_936.x + (-0.5));
        float _978 = _976 * (_936.y + (-0.5));
        float _979 = _976 * (_936.z + (-0.5));
        float _986 = exp2((_943.w + (-0.5)) * 20.0) * 2.0;
        float _987 = _986 * (_943.x + (-0.5));
        float _988 = _986 * (_943.y + (-0.5));
        float _989 = _986 * (_943.z + (-0.5));
        float _990 = isnan(0.0) ? _987 : (isnan(_987) ? 0.0 : max(_987, 0.0));
        float _991 = isnan(0.0) ? _988 : (isnan(_988) ? 0.0 : max(_988, 0.0));
        float _992 = isnan(0.0) ? _989 : (isnan(_989) ? 0.0 : max(_989, 0.0));
        float _993 = _957 * 0.5;
        float _994 = _967 * 0.5;
        float _995 = _977 * 0.5;
        float _996 = dot(vec3(_993, _994, _995), vec3(_993, _994, _995));
        float _1001 = (_996 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_996);
        float _1010 = (dot(vec3(_608, _609, _610), vec3(_1001 * _993, _1001 * _994, _1001 * _995)) + 1.0) * 0.5;
        float _3620 = isnan(0.0) ? _1010 : (isnan(_1010) ? 0.0 : max(_1010, 0.0));
        float _1020 = sqrt(((_994 * _994) + (_993 * _993)) + (_995 * _995)) / (_990 + 9.9999997473787516355514526367188e-06);
        float _3631 = isnan(0.0) ? _1020 : (isnan(_1020) ? 0.0 : max(_1020, 0.0));
        float _1021 = isnan(1.0) ? _3631 : (isnan(_3631) ? 1.0 : min(_3631, 1.0));
        float _1022 = _1021 * 2.0;
        float _1026 = (1.0 - _1021) / (_1021 + 1.0);
        float _3642 = isnan(0.0) ? _1026 : (isnan(_1026) ? 0.0 : max(_1026, 0.0));
        float _1027 = isnan(1.0) ? _3642 : (isnan(_3642) ? 1.0 : min(_3642, 1.0));
        float _1036 = ((((1.0 - _1027) * (_1022 + 2.0)) * exp2(log2(isnan(1.0) ? _3620 : (isnan(_3620) ? 1.0 : min(_3620, 1.0))) * (_1022 + 1.0))) + _1027) * _990;
        float _1037 = _958 * 0.5;
        float _1038 = _968 * 0.5;
        float _1039 = _978 * 0.5;
        float _1040 = dot(vec3(_1037, _1038, _1039), vec3(_1037, _1038, _1039));
        float _1045 = (_1040 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1040);
        float _1053 = (dot(vec3(_608, _609, _610), vec3(_1045 * _1037, _1045 * _1038, _1045 * _1039)) + 1.0) * 0.5;
        float _3653 = isnan(0.0) ? _1053 : (isnan(_1053) ? 0.0 : max(_1053, 0.0));
        float _1062 = sqrt(((_1038 * _1038) + (_1037 * _1037)) + (_1039 * _1039)) / (_991 + 9.9999997473787516355514526367188e-06);
        float _3664 = isnan(0.0) ? _1062 : (isnan(_1062) ? 0.0 : max(_1062, 0.0));
        float _1063 = isnan(1.0) ? _3664 : (isnan(_3664) ? 1.0 : min(_3664, 1.0));
        float _1064 = _1063 * 2.0;
        float _1068 = (1.0 - _1063) / (_1063 + 1.0);
        float _3675 = isnan(0.0) ? _1068 : (isnan(_1068) ? 0.0 : max(_1068, 0.0));
        float _1069 = isnan(1.0) ? _3675 : (isnan(_3675) ? 1.0 : min(_3675, 1.0));
        float _1078 = ((((1.0 - _1069) * (_1064 + 2.0)) * exp2(log2(isnan(1.0) ? _3653 : (isnan(_3653) ? 1.0 : min(_3653, 1.0))) * (_1064 + 1.0))) + _1069) * _991;
        float _1079 = _959 * 0.5;
        float _1080 = _969 * 0.5;
        float _1081 = _979 * 0.5;
        float _1082 = dot(vec3(_1079, _1080, _1081), vec3(_1079, _1080, _1081));
        float _1087 = (_1082 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1082);
        float _1095 = (dot(vec3(_608, _609, _610), vec3(_1087 * _1079, _1087 * _1080, _1087 * _1081)) + 1.0) * 0.5;
        float _3686 = isnan(0.0) ? _1095 : (isnan(_1095) ? 0.0 : max(_1095, 0.0));
        float _1104 = sqrt(((_1080 * _1080) + (_1079 * _1079)) + (_1081 * _1081)) / (_992 + 9.9999997473787516355514526367188e-06);
        float _3697 = isnan(0.0) ? _1104 : (isnan(_1104) ? 0.0 : max(_1104, 0.0));
        float _1105 = isnan(1.0) ? _3697 : (isnan(_3697) ? 1.0 : min(_3697, 1.0));
        float _1106 = _1105 * 2.0;
        float _1110 = (1.0 - _1105) / (_1105 + 1.0);
        float _3708 = isnan(0.0) ? _1110 : (isnan(_1110) ? 0.0 : max(_1110, 0.0));
        float _1111 = isnan(1.0) ? _3708 : (isnan(_3708) ? 1.0 : min(_3708, 1.0));
        float _1120 = ((((1.0 - _1111) * (_1106 + 2.0)) * exp2(log2(isnan(1.0) ? _3686 : (isnan(_3686) ? 1.0 : min(_3686, 1.0))) * (_1106 + 1.0))) + _1111) * _992;
        _1128 = _959;
        _1130 = _958;
        _1131 = _957;
        _1132 = _969;
        _1133 = _968;
        _1134 = _967;
        _1135 = _979;
        _1136 = _978;
        _1137 = _977;
        _1138 = _992;
        _1139 = _991;
        _1140 = _990;
        _1141 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1036 : (isnan(_1036) ? 0.0 : max(_1036, 0.0)));
        _1142 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1078 : (isnan(_1078) ? 0.0 : max(_1078, 0.0)));
        _1143 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1120 : (isnan(_1120) ? 0.0 : max(_1120, 0.0)));
    }
    else
    {
        _1128 = _1129;
        _1130 = _1129;
        _1131 = _1129;
        _1132 = _1129;
        _1133 = _1129;
        _1134 = _1129;
        _1135 = _1129;
        _1136 = _1129;
        _1137 = _1129;
        _1138 = _1129;
        _1139 = _1129;
        _1140 = _1129;
        _1141 = 0.0;
        _1142 = 0.0;
        _1143 = 0.0;
    }
    float _1437;
    float _1438;
    float _1439;
    float _1440;
    float _1441;
    float _1442;
    float _1443;
    float _1444;
    float _1445;
    float _1446;
    float _1447;
    float _1448;
    float _1449;
    float _1450;
    float _1451;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1168 = fma(_827, cbModelParam._m0[30u].z, fma(_823, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _819));
        float _1172 = fma(_827, cbModelParam._m0[31u].z, fma(_823, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _819));
        float _1176 = fma(_827, cbModelParam._m0[32u].z, fma(_823, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _819));
        float _1199 = _819 + _608;
        float _1200 = _823 + _609;
        float _1201 = _827 + _610;
        float _1211 = fma(_1201, cbModelParam._m0[30u].z, fma(_1200, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1199)) - _1168;
        float _1212 = fma(_1201, cbModelParam._m0[31u].z, fma(_1200, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1199)) - _1172;
        float _1213 = fma(_1201, cbModelParam._m0[32u].z, fma(_1200, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1199)) - _1176;
        float _1217 = inversesqrt(dot(vec3(_1211, _1212, _1213), vec3(_1211, _1212, _1213)));
        float _1230 = ((_1217 * _1211) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1168 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1231 = ((_1217 * _1212) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1172 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1232 = ((_1217 * _1213) / cbModelParam._m0[35u].z) + ((((((_1176 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1234 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1230, _1231, _1232), 0.0);
        vec4 _1241 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1230, _1231, _1232), 0.0);
        vec4 _1248 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1230, _1231, _1232), 0.0);
        vec4 _1255 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1230, _1231, _1232), 0.0);
        float _1267 = exp2((_1234.w + (-0.5)) * 20.0) * 2.0;
        float _1268 = _1267 * (_1234.x + (-0.5));
        float _1269 = _1267 * (_1234.y + (-0.5));
        float _1270 = _1267 * (_1234.z + (-0.5));
        float _1277 = exp2((_1241.w + (-0.5)) * 20.0) * 2.0;
        float _1278 = _1277 * (_1241.x + (-0.5));
        float _1279 = _1277 * (_1241.y + (-0.5));
        float _1280 = _1277 * (_1241.z + (-0.5));
        float _1287 = exp2((_1248.w + (-0.5)) * 20.0) * 2.0;
        float _1288 = _1287 * (_1248.x + (-0.5));
        float _1289 = _1287 * (_1248.y + (-0.5));
        float _1290 = _1287 * (_1248.z + (-0.5));
        float _1297 = exp2((_1255.w + (-0.5)) * 20.0) * 2.0;
        float _1298 = _1297 * (_1255.x + (-0.5));
        float _1299 = _1297 * (_1255.y + (-0.5));
        float _1300 = _1297 * (_1255.z + (-0.5));
        float _1301 = isnan(0.0) ? _1298 : (isnan(_1298) ? 0.0 : max(_1298, 0.0));
        float _1302 = isnan(0.0) ? _1299 : (isnan(_1299) ? 0.0 : max(_1299, 0.0));
        float _1303 = isnan(0.0) ? _1300 : (isnan(_1300) ? 0.0 : max(_1300, 0.0));
        float _1304 = _1268 * 0.5;
        float _1305 = _1278 * 0.5;
        float _1306 = _1288 * 0.5;
        float _1307 = dot(vec3(_1304, _1305, _1306), vec3(_1304, _1305, _1306));
        float _1312 = (_1307 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1307);
        float _1320 = (dot(vec3(_608, _609, _610), vec3(_1312 * _1304, _1312 * _1305, _1312 * _1306)) + 1.0) * 0.5;
        float _3749 = isnan(0.0) ? _1320 : (isnan(_1320) ? 0.0 : max(_1320, 0.0));
        float _1329 = sqrt(((_1305 * _1305) + (_1304 * _1304)) + (_1306 * _1306)) / (_1301 + 9.9999997473787516355514526367188e-06);
        float _3760 = isnan(0.0) ? _1329 : (isnan(_1329) ? 0.0 : max(_1329, 0.0));
        float _1330 = isnan(1.0) ? _3760 : (isnan(_3760) ? 1.0 : min(_3760, 1.0));
        float _1331 = _1330 * 2.0;
        float _1335 = (1.0 - _1330) / (_1330 + 1.0);
        float _3771 = isnan(0.0) ? _1335 : (isnan(_1335) ? 0.0 : max(_1335, 0.0));
        float _1336 = isnan(1.0) ? _3771 : (isnan(_3771) ? 1.0 : min(_3771, 1.0));
        float _1345 = ((((1.0 - _1336) * (_1331 + 2.0)) * exp2(log2(isnan(1.0) ? _3749 : (isnan(_3749) ? 1.0 : min(_3749, 1.0))) * (_1331 + 1.0))) + _1336) * _1301;
        float _1346 = _1269 * 0.5;
        float _1347 = _1279 * 0.5;
        float _1348 = _1289 * 0.5;
        float _1349 = dot(vec3(_1346, _1347, _1348), vec3(_1346, _1347, _1348));
        float _1354 = (_1349 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1349);
        float _1362 = (dot(vec3(_608, _609, _610), vec3(_1354 * _1346, _1354 * _1347, _1354 * _1348)) + 1.0) * 0.5;
        float _3782 = isnan(0.0) ? _1362 : (isnan(_1362) ? 0.0 : max(_1362, 0.0));
        float _1371 = sqrt(((_1347 * _1347) + (_1346 * _1346)) + (_1348 * _1348)) / (_1302 + 9.9999997473787516355514526367188e-06);
        float _3793 = isnan(0.0) ? _1371 : (isnan(_1371) ? 0.0 : max(_1371, 0.0));
        float _1372 = isnan(1.0) ? _3793 : (isnan(_3793) ? 1.0 : min(_3793, 1.0));
        float _1373 = _1372 * 2.0;
        float _1377 = (1.0 - _1372) / (_1372 + 1.0);
        float _3804 = isnan(0.0) ? _1377 : (isnan(_1377) ? 0.0 : max(_1377, 0.0));
        float _1378 = isnan(1.0) ? _3804 : (isnan(_3804) ? 1.0 : min(_3804, 1.0));
        float _1387 = ((((1.0 - _1378) * (_1373 + 2.0)) * exp2(log2(isnan(1.0) ? _3782 : (isnan(_3782) ? 1.0 : min(_3782, 1.0))) * (_1373 + 1.0))) + _1378) * _1302;
        float _1388 = _1270 * 0.5;
        float _1389 = _1280 * 0.5;
        float _1390 = _1290 * 0.5;
        float _1391 = dot(vec3(_1388, _1389, _1390), vec3(_1388, _1389, _1390));
        float _1396 = (_1391 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1391);
        float _1404 = (dot(vec3(_608, _609, _610), vec3(_1396 * _1388, _1396 * _1389, _1396 * _1390)) + 1.0) * 0.5;
        float _3815 = isnan(0.0) ? _1404 : (isnan(_1404) ? 0.0 : max(_1404, 0.0));
        float _1413 = sqrt(((_1389 * _1389) + (_1388 * _1388)) + (_1390 * _1390)) / (_1303 + 9.9999997473787516355514526367188e-06);
        float _3826 = isnan(0.0) ? _1413 : (isnan(_1413) ? 0.0 : max(_1413, 0.0));
        float _1414 = isnan(1.0) ? _3826 : (isnan(_3826) ? 1.0 : min(_3826, 1.0));
        float _1415 = _1414 * 2.0;
        float _1419 = (1.0 - _1414) / (_1414 + 1.0);
        float _3837 = isnan(0.0) ? _1419 : (isnan(_1419) ? 0.0 : max(_1419, 0.0));
        float _1420 = isnan(1.0) ? _3837 : (isnan(_3837) ? 1.0 : min(_3837, 1.0));
        float _1429 = ((((1.0 - _1420) * (_1415 + 2.0)) * exp2(log2(isnan(1.0) ? _3815 : (isnan(_3815) ? 1.0 : min(_3815, 1.0))) * (_1415 + 1.0))) + _1420) * _1303;
        _1437 = _1270;
        _1438 = _1269;
        _1439 = _1268;
        _1440 = _1280;
        _1441 = _1279;
        _1442 = _1278;
        _1443 = _1290;
        _1444 = _1289;
        _1445 = _1288;
        _1446 = _1303;
        _1447 = _1302;
        _1448 = _1301;
        _1449 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1345 : (isnan(_1345) ? 0.0 : max(_1345, 0.0)));
        _1450 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1387 : (isnan(_1387) ? 0.0 : max(_1387, 0.0)));
        _1451 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1429 : (isnan(_1429) ? 0.0 : max(_1429, 0.0)));
    }
    else
    {
        _1437 = _1129;
        _1438 = _1129;
        _1439 = _1129;
        _1440 = _1129;
        _1441 = _1129;
        _1442 = _1129;
        _1443 = _1129;
        _1444 = _1129;
        _1445 = _1129;
        _1446 = _1129;
        _1447 = _1129;
        _1448 = _1129;
        _1449 = 0.0;
        _1450 = 0.0;
        _1451 = 0.0;
    }
    float _1461 = (cbModelParam._m0[1u].x * (_1449 - _1141)) + _1141;
    float _1462 = (cbModelParam._m0[1u].x * (_1450 - _1142)) + _1142;
    float _1463 = (cbModelParam._m0[1u].x * (_1451 - _1143)) + _1143;
    float _1484 = fma(_1463, cbSceneParam._m0[89u].z, fma(_1462, cbSceneParam._m0[89u].y, _1461 * cbSceneParam._m0[89u].x));
    float _1487 = fma(_1463, cbSceneParam._m0[90u].z, fma(_1462, cbSceneParam._m0[90u].y, _1461 * cbSceneParam._m0[90u].x));
    float _1490 = fma(_1463, cbSceneParam._m0[91u].z, fma(_1462, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1461));
    float _1505 = _766 * 0.5;
    float _1506 = _767 * 0.5;
    float _1507 = _768 * 0.5;
    float _1508 = dot(vec4(_1505, _1506, _1507, 1.0), vec4(_1439, _1442, _1445, _1448));
    float _1511 = dot(vec4(_1505, _1506, _1507, 1.0), vec4(_1438, _1441, _1444, _1447));
    float _1514 = dot(vec4(_1505, _1506, _1507, 1.0), vec4(_1437, _1440, _1443, _1446));
    float _1548;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1521 = dot(vec4(_1505, _1506, _1507, 1.0), vec4(_1128, _1132, _1135, _1138));
        float _1525 = dot(vec4(_1505, _1506, _1507, 1.0), vec4(_1130, _1133, _1136, _1139));
        float _1529 = dot(vec4(_1505, _1506, _1507, 1.0), vec4(_1131, _1134, _1137, _1140));
        float _1536 = dot(vec4(cbModelParam._m0[39u]), vec4(_1505, _1506, _1507, 1.0));
        _1548 = dot(vec3(isnan(0.0) ? _1529 : (isnan(_1529) ? 0.0 : max(_1529, 0.0)), isnan(0.0) ? _1525 : (isnan(_1525) ? 0.0 : max(_1525, 0.0)), isnan(0.0) ? _1521 : (isnan(_1521) ? 0.0 : max(_1521, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1536) ? 0.0 : (isnan(0.0) ? _1536 : max(0.0, _1536))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1548 = 1.0;
    }
    float _1559;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1550 = dot(vec4(cbModelParam._m0[40u]), vec4(_1505, _1506, _1507, 1.0));
        _1559 = dot(vec3(isnan(0.0) ? _1508 : (isnan(_1508) ? 0.0 : max(_1508, 0.0)), isnan(0.0) ? _1511 : (isnan(_1511) ? 0.0 : max(_1511, 0.0)), isnan(0.0) ? _1514 : (isnan(_1514) ? 0.0 : max(_1514, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1550) ? 0.0 : (isnan(0.0) ? _1550 : max(0.0, _1550))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1559 = 1.0;
    }
    float _1563 = (_1559 * cbModelParam._m0[1u].x) + (_1548 * (1.0 - cbModelParam._m0[1u].x));
    float _1573 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _611);
    float _1574 = isnan(_1573) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1573 : min(cbModelParam._m0[25u].z, _1573));
    float _1656;
    float _1658;
    float _1660;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1623 = fma(_827, cbModelParam._m0[13u].z, fma(_823, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _819)) + cbModelParam._m0[13u].w;
        float _1627 = fma(_827, cbModelParam._m0[14u].z, fma(_823, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _819)) + cbModelParam._m0[14u].w;
        float _1631 = fma(_827, cbModelParam._m0[15u].z, fma(_823, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _819)) + cbModelParam._m0[15u].w;
        float _1634 = fma(_768, cbModelParam._m0[13u].z, fma(_767, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _766));
        float _1637 = fma(_768, cbModelParam._m0[14u].z, fma(_767, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _766));
        float _1640 = fma(_768, cbModelParam._m0[15u].z, fma(_767, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _766));
        float _1668;
        if (_1634 > 0.0)
        {
            _1668 = abs((1.0 - _1623) / _1634);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1634 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1623 + 1.0) / _1634);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1668 = frontier_phi_14_12_ladder;
        }
        float _1891;
        if (_1637 > 0.0)
        {
            _1891 = abs((1.0 - _1627) / _1637);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1637 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1627 + 1.0) / _1637);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1891 = frontier_phi_23_19_ladder;
        }
        float _2137;
        if (_1640 > 0.0)
        {
            _2137 = abs((1.0 - _1631) / _1640);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1640 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1631 + 1.0) / _1640);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2137 = frontier_phi_35_30_ladder;
        }
        float _2139 = isnan(_1891) ? _1668 : (isnan(_1668) ? _1891 : min(_1668, _1891));
        float _2140 = isnan(_2137) ? _2139 : (isnan(_2139) ? _2137 : min(_2139, _2137));
        float _2144 = (_2140 * _1634) + _1623;
        float _2145 = (_2140 * _1637) + _1627;
        float _2146 = (_2140 * _1640) + _1631;
        float _2147 = _2140 * 9.9999997473787516355514526367188e-05;
        float _2149 = (-1.0) - _2147;
        float _2151 = _2147 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2146 > _2151) || ((_2146 < _2149) || ((_2145 > _2151) || ((_2145 < _2149) || ((_2144 < _2149) || (_2144 > _2151))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2270 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2146, cbModelParam._m0[9u].z, fma(_2145, cbModelParam._m0[9u].y, _2144 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2146, cbModelParam._m0[10u].z, fma(_2145, cbModelParam._m0[10u].y, _2144 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2146, cbModelParam._m0[11u].z, fma(_2145, cbModelParam._m0[11u].y, _2144 * cbModelParam._m0[11u].x))), _1574);
            frontier_phi_13_35_ladder = _2270.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2270.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2270.x * cbModelParam._m0[1u].y;
        }
        _1656 = frontier_phi_13_35_ladder_2;
        _1658 = frontier_phi_13_35_ladder_1;
        _1660 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1644 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_766, _767, _768), _1574);
        _1656 = _1644.x * cbModelParam._m0[1u].y;
        _1658 = _1644.y * cbModelParam._m0[1u].y;
        _1660 = _1644.z * cbModelParam._m0[1u].y;
    }
    float _1664 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _611);
    float _1665 = isnan(_1664) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1664 : min(cbModelParam._m0[25u].w, _1664));
    float _1756;
    float _1758;
    float _1760;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1720 = fma(_827, cbModelParam._m0[21u].z, fma(_823, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _819)) + cbModelParam._m0[21u].w;
        float _1724 = fma(_827, cbModelParam._m0[22u].z, fma(_823, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _819)) + cbModelParam._m0[22u].w;
        float _1728 = fma(_827, cbModelParam._m0[23u].z, fma(_823, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _819)) + cbModelParam._m0[23u].w;
        float _1731 = fma(_768, cbModelParam._m0[21u].z, fma(_767, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _766));
        float _1734 = fma(_768, cbModelParam._m0[22u].z, fma(_767, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _766));
        float _1737 = fma(_768, cbModelParam._m0[23u].z, fma(_767, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _766));
        float _1896;
        if (_1731 > 0.0)
        {
            _1896 = abs((1.0 - _1720) / _1731);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1731 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1720 + 1.0) / _1731);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1896 = frontier_phi_25_21_ladder;
        }
        float _2164;
        if (_1734 > 0.0)
        {
            _2164 = abs((1.0 - _1724) / _1734);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1734 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1724 + 1.0) / _1734);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2164 = frontier_phi_37_32_ladder;
        }
        float _2369;
        if (_1737 > 0.0)
        {
            _2369 = abs((1.0 - _1728) / _1737);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1737 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1728 + 1.0) / _1737);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2369 = frontier_phi_46_43_ladder;
        }
        float _2371 = isnan(_2164) ? _1896 : (isnan(_1896) ? _2164 : min(_1896, _2164));
        float _2372 = isnan(_2369) ? _2371 : (isnan(_2371) ? _2369 : min(_2371, _2369));
        float _2376 = (_2372 * _1731) + _1720;
        float _2377 = (_2372 * _1734) + _1724;
        float _2378 = (_2372 * _1737) + _1728;
        float _2379 = _2372 * 9.9999997473787516355514526367188e-05;
        float _2380 = (-1.0) - _2379;
        float _2382 = _2379 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2378 > _2382) || ((_2378 < _2380) || ((_2377 > _2382) || ((_2377 < _2380) || ((_2376 < _2380) || (_2376 > _2382))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2577 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2378, cbModelParam._m0[17u].z, fma(_2377, cbModelParam._m0[17u].y, _2376 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2378, cbModelParam._m0[18u].z, fma(_2377, cbModelParam._m0[18u].y, _2376 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2378, cbModelParam._m0[19u].z, fma(_2377, cbModelParam._m0[19u].y, _2376 * cbModelParam._m0[19u].x))), _1665);
            frontier_phi_22_46_ladder = _2577.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2577.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2577.x * cbModelParam._m0[1u].z;
        }
        _1756 = frontier_phi_22_46_ladder_2;
        _1758 = frontier_phi_22_46_ladder_1;
        _1760 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1740 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_766, _767, _768), _1665);
        _1756 = _1740.x * cbModelParam._m0[1u].z;
        _1758 = _1740.y * cbModelParam._m0[1u].z;
        _1760 = _1740.z * cbModelParam._m0[1u].z;
    }
    float _1772 = ((((1.0 - _787) * ((_774 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_787 * _774)) * _758;
    float _1773 = _1772 * ((cbModelParam._m0[1u].w * (_1756 - _1656)) + _1656);
    float _1774 = _1772 * ((cbModelParam._m0[1u].w * (_1758 - _1658)) + _1658);
    float _1775 = _1772 * ((cbModelParam._m0[1u].w * (_1760 - _1660)) + _1660);
    float _1778 = fma(_1775, cbSceneParam._m0[89u].z, fma(_1774, cbSceneParam._m0[89u].y, _1773 * cbSceneParam._m0[89u].x));
    float _1781 = fma(_1775, cbSceneParam._m0[90u].z, fma(_1774, cbSceneParam._m0[90u].y, _1773 * cbSceneParam._m0[90u].x));
    float _1784 = fma(_1775, cbSceneParam._m0[91u].z, fma(_1774, cbSceneParam._m0[91u].y, _1773 * cbSceneParam._m0[91u].x));
    vec4 _1792 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_695, _696));
    float _1794 = _1792.w;
    float _1806 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1794);
    float _1807 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1794);
    float _1808 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1794);
    uvec4 _1812 = floatBitsToUint(cbInstanceData._m0[_241 + 5u]);
    uint _1814 = _1812.x * 14u;
    uint _1815 = _1814 + 13u;
    float _1822 = _758 + (-1.0);
    float _1827 = (cbLight._m0[_1815].x * _1822) + 1.0;
    float _1828 = (cbLight._m0[_1815].y * _1822) + 1.0;
    float _1829 = (cbLight._m0[_1815].z * _1822) + 1.0;
    float _1830 = (cbLight._m0[_1815].w * _1822) + 1.0;
    uint _1831 = _1814 + 5u;
    float _1837 = isnan(1.0) ? _1828 : (isnan(_1828) ? 1.0 : min(_1828, 1.0));
    uint _1841 = _1814 + 4u;
    float _1850 = isnan(1.0) ? _1827 : (isnan(_1827) ? 1.0 : min(_1827, 1.0));
    uint _1854 = _1814 | 1u;
    float _1865 = dot(vec3(cbLight._m0[_1814].xyz), vec3(_608, _609, _610));
    float _1868 = dot(vec3(cbLight._m0[_1854].xyz), vec3(_608, _609, _610));
    float _3973 = isnan(0.0) ? _1865 : (isnan(_1865) ? 0.0 : max(_1865, 0.0));
    float _3984 = isnan(0.0) ? _1868 : (isnan(_1868) ? 0.0 : max(_1868, 0.0));
    float _1873 = (isnan(1.0) ? _3973 : (isnan(_3973) ? 1.0 : min(_3973, 1.0))) * 0.3183098733425140380859375;
    float _1875 = (isnan(1.0) ? _3984 : (isnan(_3984) ? 1.0 : min(_3984, 1.0))) * 0.3183098733425140380859375;
    float _1882 = ((cbLight._m0[_1831].x * _1837) * _1875) + (((cbLight._m0[_1841].x * _1806) * _1850) * _1873);
    float _1883 = ((_1837 * cbLight._m0[_1831].y) * _1875) + (((cbLight._m0[_1841].y * _1807) * _1850) * _1873);
    float _1884 = ((_1837 * cbLight._m0[_1831].z) * _1875) + (((cbLight._m0[_1841].z * _1808) * _1850) * _1873);
    uvec4 _1888 = floatBitsToUint(cbLight._m0[_1814 + 12u]);
    bool _1890 = _1888.x == 0u;
    float _1901;
    float _1903;
    float _1905;
    if (_1890)
    {
        _1901 = _1882;
        _1903 = _1883;
        _1905 = _1884;
    }
    else
    {
        uint _1909 = _1814 + 6u;
        float _1925 = (dot(vec3(cbLight._m0[_1814 + 2u].xyz), vec3(_608, _609, _610)) * 0.5) + 0.5;
        float _1926 = _1925 * _1925;
        float _3995 = isnan(0.0) ? _1926 : (isnan(_1926) ? 0.0 : max(_1926, 0.0));
        float _1927 = isnan(1.0) ? _3995 : (isnan(_3995) ? 1.0 : min(_3995, 1.0));
        float _1928 = isnan(1.0) ? _1829 : (isnan(_1829) ? 1.0 : min(_1829, 1.0));
        _1901 = (((cbLight._m0[_1909].x * 0.3183098733425140380859375) * _1927) * _1928) + _1882;
        _1903 = (((cbLight._m0[_1909].y * 0.3183098733425140380859375) * _1927) * _1928) + _1883;
        _1905 = (((cbLight._m0[_1909].z * 0.3183098733425140380859375) * _1927) * _1928) + _1884;
    }
    bool _1908 = _1888.y == 0u;
    float _1946;
    float _1948;
    float _1950;
    if (_1908)
    {
        _1946 = _1901;
        _1948 = _1903;
        _1950 = _1905;
    }
    else
    {
        uint _2108 = _1814 + 7u;
        float _2124 = (dot(vec3(cbLight._m0[_1814 + 3u].xyz), vec3(_608, _609, _610)) * 0.5) + 0.5;
        float _2125 = _2124 * _2124;
        float _4011 = isnan(0.0) ? _2125 : (isnan(_2125) ? 0.0 : max(_2125, 0.0));
        float _2126 = isnan(1.0) ? _4011 : (isnan(_4011) ? 1.0 : min(_4011, 1.0));
        float _2127 = isnan(1.0) ? _1830 : (isnan(_1830) ? 1.0 : min(_1830, 1.0));
        _1946 = (((cbLight._m0[_2108].x * 0.3183098733425140380859375) * _2126) * _2127) + _1901;
        _1948 = (((cbLight._m0[_2108].y * 0.3183098733425140380859375) * _2126) * _2127) + _1903;
        _1950 = (((cbLight._m0[_2108].z * 0.3183098733425140380859375) * _2126) * _2127) + _1905;
    }
    uint _1953 = _1814 + 8u;
    float _1966 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1814].w)) * _611) * 0.949999988079071044921875);
    float _1967 = _1966 * _1966;
    float _1968 = cbLight._m0[_1814].x + _687;
    float _1969 = cbLight._m0[_1814].y + _688;
    float _1970 = cbLight._m0[_1814].z + _689;
    float _1974 = inversesqrt(dot(vec3(_1968, _1969, _1970), vec3(_1968, _1969, _1970)));
    float _1975 = _1974 * _1968;
    float _1976 = _1974 * _1969;
    float _1977 = _1974 * _1970;
    float _1978 = dot(vec3(_608, _609, _610), vec3(cbLight._m0[_1814].xyz));
    float _4027 = isnan(0.0) ? _1978 : (isnan(_1978) ? 0.0 : max(_1978, 0.0));
    float _1981 = isnan(1.0) ? _4027 : (isnan(_4027) ? 1.0 : min(_4027, 1.0));
    float _4038 = isnan(0.0) ? _759 : (isnan(_759) ? 0.0 : max(_759, 0.0));
    float _1982 = isnan(1.0) ? _4038 : (isnan(_4038) ? 1.0 : min(_4038, 1.0));
    float _1983 = dot(vec3(_608, _609, _610), vec3(_1975, _1976, _1977));
    float _4049 = isnan(0.0) ? _1983 : (isnan(_1983) ? 0.0 : max(_1983, 0.0));
    float _1986 = isnan(1.0) ? _4049 : (isnan(_4049) ? 1.0 : min(_4049, 1.0));
    float _1987 = dot(vec3(cbLight._m0[_1814].xyz), vec3(_1975, _1976, _1977));
    float _4060 = isnan(0.0) ? _1987 : (isnan(_1987) ? 0.0 : max(_1987, 0.0));
    float _1991 = _1967 * _1967;
    float _1995 = ((_1986 * _1986) * (_1991 + (-1.0))) + 1.0;
    float _2006 = (exp2(log2(1.0 - (isnan(1.0) ? _4060 : (isnan(_4060) ? 1.0 : min(_4060, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2007 = 1.0 - _1967;
    float _2018 = (0.5 / (((_1982 * ((_1981 * _2007) + _1967)) + 9.9999999392252902907785028219223e-09) + (((_1982 * _2007) + _1967) * _1981))) * _1981;
    float _4071 = isnan(0.0) ? _2018 : (isnan(_2018) ? 0.0 : max(_2018, 0.0));
    float _2020 = (isnan(1.0) ? _4071 : (isnan(_4071) ? 1.0 : min(_4071, 1.0))) * (_1991 / ((_1995 * _1995) * 3.141590118408203125));
    uint _2034 = _1814 + 9u;
    float _2045 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1854].w)) * _611) * 0.949999988079071044921875);
    float _2046 = _2045 * _2045;
    float _2047 = cbLight._m0[_1854].x + _687;
    float _2048 = cbLight._m0[_1854].y + _688;
    float _2049 = cbLight._m0[_1854].z + _689;
    float _2053 = inversesqrt(dot(vec3(_2047, _2048, _2049), vec3(_2047, _2048, _2049)));
    float _2054 = _2053 * _2047;
    float _2055 = _2053 * _2048;
    float _2056 = _2053 * _2049;
    float _2057 = dot(vec3(_608, _609, _610), vec3(cbLight._m0[_1854].xyz));
    float _4082 = isnan(0.0) ? _2057 : (isnan(_2057) ? 0.0 : max(_2057, 0.0));
    float _2060 = isnan(1.0) ? _4082 : (isnan(_4082) ? 1.0 : min(_4082, 1.0));
    float _2061 = dot(vec3(_608, _609, _610), vec3(_2054, _2055, _2056));
    float _4093 = isnan(0.0) ? _2061 : (isnan(_2061) ? 0.0 : max(_2061, 0.0));
    float _2064 = isnan(1.0) ? _4093 : (isnan(_4093) ? 1.0 : min(_4093, 1.0));
    float _2065 = dot(vec3(cbLight._m0[_1854].xyz), vec3(_2054, _2055, _2056));
    float _4104 = isnan(0.0) ? _2065 : (isnan(_2065) ? 0.0 : max(_2065, 0.0));
    float _2069 = _2046 * _2046;
    float _2073 = ((_2064 * _2064) * (_2069 + (-1.0))) + 1.0;
    float _2082 = (exp2(log2(1.0 - (isnan(1.0) ? _4104 : (isnan(_4104) ? 1.0 : min(_4104, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2083 = 1.0 - _2046;
    float _2093 = (0.5 / (((_1982 * ((_2060 * _2083) + _2046)) + 9.9999999392252902907785028219223e-09) + (((_1982 * _2083) + _2046) * _2060))) * _2060;
    float _4115 = isnan(0.0) ? _2093 : (isnan(_2093) ? 0.0 : max(_2093, 0.0));
    float _2095 = (isnan(1.0) ? _4115 : (isnan(_4115) ? 1.0 : min(_4115, 1.0))) * (_2069 / ((_2073 * _2073) * 3.141590118408203125));
    float _2105 = (((_2082 * cbLight._m0[_2034].x) * _2095) * _1837) + ((((cbLight._m0[_1953].x * _1806) * _2006) * _2020) * _1850);
    float _2106 = (((_2082 * cbLight._m0[_2034].y) * _2095) * _1837) + ((((cbLight._m0[_1953].y * _1807) * _2006) * _2020) * _1850);
    float _2107 = (((_2082 * cbLight._m0[_2034].z) * _2095) * _1837) + ((((cbLight._m0[_1953].z * _1808) * _2006) * _2020) * _1850);
    float _2169;
    float _2171;
    float _2173;
    if (_1890)
    {
        _2169 = _2105;
        _2171 = _2106;
        _2173 = _2107;
    }
    else
    {
        uint _2175 = _1814 + 2u;
        uint _2179 = _1814 + 10u;
        float _2193 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2175].w)) * _611) * 0.949999988079071044921875);
        float _2194 = _2193 * _2193;
        float _2195 = cbLight._m0[_2175].x + _687;
        float _2196 = cbLight._m0[_2175].y + _688;
        float _2197 = cbLight._m0[_2175].z + _689;
        float _2201 = inversesqrt(dot(vec3(_2195, _2196, _2197), vec3(_2195, _2196, _2197)));
        float _2202 = _2201 * _2195;
        float _2203 = _2201 * _2196;
        float _2204 = _2201 * _2197;
        float _2205 = dot(vec3(_608, _609, _610), vec3(cbLight._m0[_2175].xyz));
        float _4126 = isnan(0.0) ? _2205 : (isnan(_2205) ? 0.0 : max(_2205, 0.0));
        float _2208 = isnan(1.0) ? _4126 : (isnan(_4126) ? 1.0 : min(_4126, 1.0));
        float _2209 = dot(vec3(_608, _609, _610), vec3(_2202, _2203, _2204));
        float _4137 = isnan(0.0) ? _2209 : (isnan(_2209) ? 0.0 : max(_2209, 0.0));
        float _2212 = isnan(1.0) ? _4137 : (isnan(_4137) ? 1.0 : min(_4137, 1.0));
        float _2213 = dot(vec3(cbLight._m0[_2175].xyz), vec3(_2202, _2203, _2204));
        float _4148 = isnan(0.0) ? _2213 : (isnan(_2213) ? 0.0 : max(_2213, 0.0));
        float _2217 = _2194 * _2194;
        float _2221 = ((_2212 * _2212) * (_2217 + (-1.0))) + 1.0;
        float _2230 = (exp2(log2(1.0 - (isnan(1.0) ? _4148 : (isnan(_4148) ? 1.0 : min(_4148, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2231 = 1.0 - _2194;
        float _2241 = (0.5 / (((_1982 * ((_2208 * _2231) + _2194)) + 9.9999999392252902907785028219223e-09) + (((_1982 * _2231) + _2194) * _2208))) * _2208;
        float _4159 = isnan(0.0) ? _2241 : (isnan(_2241) ? 0.0 : max(_2241, 0.0));
        float _2243 = (isnan(1.0) ? _4159 : (isnan(_4159) ? 1.0 : min(_4159, 1.0))) * (_2217 / ((_2221 * _2221) * 3.141590118408203125));
        float _2244 = isnan(1.0) ? _1829 : (isnan(_1829) ? 1.0 : min(_1829, 1.0));
        _2169 = (((_2230 * cbLight._m0[_2179].x) * _2243) * _2244) + _2105;
        _2171 = (((_2230 * cbLight._m0[_2179].y) * _2243) * _2244) + _2106;
        _2173 = (((_2230 * cbLight._m0[_2179].z) * _2243) * _2244) + _2107;
    }
    float _2279;
    float _2281;
    float _2283;
    if (_1908)
    {
        _2279 = _2169;
        _2281 = _2171;
        _2283 = _2173;
    }
    else
    {
        uint _2290 = _1814 + 3u;
        uint _2294 = _1814 + 11u;
        float _2308 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2290].w)) * _611) * 0.949999988079071044921875);
        float _2309 = _2308 * _2308;
        float _2310 = cbLight._m0[_2290].x + _687;
        float _2311 = cbLight._m0[_2290].y + _688;
        float _2312 = cbLight._m0[_2290].z + _689;
        float _2316 = inversesqrt(dot(vec3(_2310, _2311, _2312), vec3(_2310, _2311, _2312)));
        float _2317 = _2316 * _2310;
        float _2318 = _2316 * _2311;
        float _2319 = _2316 * _2312;
        float _2320 = dot(vec3(_608, _609, _610), vec3(cbLight._m0[_2290].xyz));
        float _4175 = isnan(0.0) ? _2320 : (isnan(_2320) ? 0.0 : max(_2320, 0.0));
        float _2323 = isnan(1.0) ? _4175 : (isnan(_4175) ? 1.0 : min(_4175, 1.0));
        float _2324 = dot(vec3(_608, _609, _610), vec3(_2317, _2318, _2319));
        float _4186 = isnan(0.0) ? _2324 : (isnan(_2324) ? 0.0 : max(_2324, 0.0));
        float _2327 = isnan(1.0) ? _4186 : (isnan(_4186) ? 1.0 : min(_4186, 1.0));
        float _2328 = dot(vec3(cbLight._m0[_2290].xyz), vec3(_2317, _2318, _2319));
        float _4197 = isnan(0.0) ? _2328 : (isnan(_2328) ? 0.0 : max(_2328, 0.0));
        float _2332 = _2309 * _2309;
        float _2336 = ((_2327 * _2327) * (_2332 + (-1.0))) + 1.0;
        float _2345 = (exp2(log2(1.0 - (isnan(1.0) ? _4197 : (isnan(_4197) ? 1.0 : min(_4197, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2346 = 1.0 - _2309;
        float _2356 = (0.5 / (((_1982 * ((_2323 * _2346) + _2309)) + 9.9999999392252902907785028219223e-09) + (((_1982 * _2346) + _2309) * _2323))) * _2323;
        float _4208 = isnan(0.0) ? _2356 : (isnan(_2356) ? 0.0 : max(_2356, 0.0));
        float _2358 = (isnan(1.0) ? _4208 : (isnan(_4208) ? 1.0 : min(_4208, 1.0))) * (_2332 / ((_2336 * _2336) * 3.141590118408203125));
        float _2359 = isnan(1.0) ? _1830 : (isnan(_1830) ? 1.0 : min(_1830, 1.0));
        _2279 = (((_2345 * cbLight._m0[_2294].x) * _2358) * _2359) + _2169;
        _2281 = (((_2345 * cbLight._m0[_2294].y) * _2358) * _2359) + _2171;
        _2283 = (((_2345 * cbLight._m0[_2294].z) * _2358) * _2359) + _2173;
    }
    float _2494;
    float _2496;
    float _2498;
    float _2500;
    float _2502;
    float _2504;
    if (_1812.y == 0u)
    {
        float _2434 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2435 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2434;
        float _2436 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2434;
        float _2437 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2434;
        uvec4 _2449 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2450 = _2449.x;
        uint _2461 = uint((float(_2449.y) * floor(float(uint(cbSceneParam._m0[85u].y * _696) / _2450))) + floor(float(uint(cbSceneParam._m0[85u].x * _695) / _2450)));
        float _2471 = (log2(_2437 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2472 = isnan(0.0) ? _2471 : (isnan(_2471) ? 0.0 : max(_2471, 0.0));
        uint _2475 = uint(isnan(14.0) ? _2472 : (isnan(_2472) ? 14.0 : min(_2472, 14.0)));
        uvec4 _2480 = texelFetch(g_lightClusterGridBuffer, int(((_2475 << 2u) + (_2461 << 6u)) >> 2u));
        uint _2481 = _2480.x;
        uint _2482 = _2449.z;
        float _2582;
        float _2584;
        float _2586;
        float _2588;
        float _2590;
        float _2592;
        if (((((1u << ((_2482 >> 4u) & 15u)) + 4294967295u) & _2481) == 0u) || ((_2482 & 240u) == 0u))
        {
            _2582 = 0.0;
            _2584 = 0.0;
            _2586 = 0.0;
            _2588 = 0.0;
            _2590 = 0.0;
            _2592 = 0.0;
        }
        else
        {
            float _2583;
            float _2585;
            float _2587;
            float _2589;
            float _2591;
            float _2593;
            float _2727 = 0.0;
            float _2728 = 0.0;
            float _2729 = 0.0;
            float _2730 = 0.0;
            float _2731 = 0.0;
            float _2732 = 0.0;
            uint _2733 = 0u;
            uint _2742;
            bool _2743;
            for (;;)
            {
                _2742 = texelFetch(g_lightClassification, int((((_2475 << 5u) + (_2461 << 9u)) + (_2733 << 2u)) >> 2u)).x;
                _2743 = _2742 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2743)
                {
                    frontier_phi_61_pred = _2727;
                    frontier_phi_61_pred_1 = _2732;
                    frontier_phi_61_pred_2 = _2731;
                    frontier_phi_61_pred_3 = _2730;
                    frontier_phi_61_pred_4 = _2729;
                    frontier_phi_61_pred_5 = _2728;
                }
                else
                {
                    float _2851;
                    float _2852;
                    float _2853;
                    float _2854;
                    float _2855;
                    float _2856;
                    uint _2857;
                    _2851 = _2727;
                    _2852 = _2728;
                    _2853 = _2729;
                    _2854 = _2730;
                    _2855 = _2731;
                    _2856 = _2732;
                    _2857 = _2742;
                    float _2783;
                    float _2784;
                    float _2785;
                    float _2786;
                    float _2787;
                    float _2788;
                    for (;;)
                    {
                        uint _2861 = uint(findLSB(_2857)) + (_2733 << 5u);
                        uint _2858 = (_2857 + 4294967295u) & _2857;
                        uint _2863 = _2861 * 48u;
                        vec4 _2877 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2863)).x, texelFetch(g_PointLightRenderingBuffer, int(_2863 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2863 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2863 + 3u)).x));
                        uint _2883 = (_2861 * 48u) + 4u;
                        vec4 _2896 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2883)).x, texelFetch(g_PointLightRenderingBuffer, int(_2883 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2883 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2883 + 3u)).x));
                        uint _2902 = (_2861 * 48u) + 8u;
                        vec3 _2913 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2902)).x, texelFetch(g_PointLightRenderingBuffer, int(_2902 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2902 + 2u)).x));
                        float _2917 = _2877.x - _2435;
                        float _2918 = _2877.y - _2436;
                        float _2919 = _2877.z - _2437;
                        float _2920 = dot(vec3(_2917, _2918, _2919), vec3(_2917, _2918, _2919));
                        float _2923 = inversesqrt(_2920);
                        float _2924 = _2923 * _2917;
                        float _2925 = _2923 * _2918;
                        float _2926 = _2923 * _2919;
                        float _2927 = dot(vec3(_714, _717, _720), vec3(_2924, _2925, _2926));
                        float _2932 = 1.0 - (_2920 * _2877.w);
                        float _4234 = isnan(0.0) ? _2932 : (isnan(_2932) ? 0.0 : max(_2932, 0.0));
                        float _2933 = isnan(1.0) ? _4234 : (isnan(_4234) ? 1.0 : min(_4234, 1.0));
                        float _2934 = sqrt(_2920) * _2896.w;
                        float _2937 = 1.39999997615814208984375 / (_2934 + 1.39999997615814208984375);
                        float _2938 = _2937 * _2937;
                        float _2941 = ((1.0 - _2938) * _2927) + _2938;
                        float _2944 = _2934 * _2934;
                        float _2948 = ((isnan(0.0) ? _2941 : (isnan(_2941) ? 0.0 : max(_2941, 0.0))) * _2933) / ((_2944 * 0.699999988079071044921875) + 1.0);
                        float _2952 = (-0.0) - _2435;
                        float _2953 = (-0.0) - _2436;
                        float _2954 = (-0.0) - _2437;
                        float _2958 = inversesqrt(dot(vec3(_2952, _2953, _2954), vec3(_2952, _2953, _2954)));
                        float _2959 = _2958 * _2952;
                        float _2960 = _2958 * _2953;
                        float _2961 = _2958 * _2954;
                        float _2969 = exp2(log2(1.0 / ((_2944 * 3.5) + 5.0)) * 0.25);
                        float _2970 = 1.0 - _774;
                        float _2977 = sqrt(1.0 - ((1.0 - (_2970 * _2970)) * (1.0 - (_2969 * _2969))));
                        float _2978 = _2977 * _2977;
                        float _2979 = _2978 * _2978;
                        float _2980 = _2959 + _2924;
                        float _2981 = _2960 + _2925;
                        float _2982 = _2961 + _2926;
                        float _2986 = inversesqrt(dot(vec3(_2980, _2981, _2982), vec3(_2980, _2981, _2982)));
                        float _2990 = dot(vec3(_714, _717, _720), vec3(_2959, _2960, _2961));
                        float _4250 = isnan(0.0) ? _2990 : (isnan(_2990) ? 0.0 : max(_2990, 0.0));
                        float _2993 = isnan(1.0) ? _4250 : (isnan(_4250) ? 1.0 : min(_4250, 1.0));
                        float _2994 = dot(vec3(_714, _717, _720), vec3(_2986 * _2980, _2986 * _2981, _2986 * _2982));
                        float _4261 = isnan(0.0) ? _2994 : (isnan(_2994) ? 0.0 : max(_2994, 0.0));
                        float _2997 = isnan(1.0) ? _4261 : (isnan(_4261) ? 1.0 : min(_4261, 1.0));
                        float _3001 = ((_2997 * _2997) * (_2979 + (-1.0))) + 1.0;
                        float _3002 = _2937 * _2978;
                        float _3003 = _3002 * _3002;
                        float _3006 = ((1.0 - _3003) * _2927) + _3003;
                        float _4272 = isnan(0.0) ? _3006 : (isnan(_3006) ? 0.0 : max(_3006, 0.0));
                        float _3007 = isnan(1.0) ? _4272 : (isnan(_4272) ? 1.0 : min(_4272, 1.0));
                        float _3008 = 1.0 - _2978;
                        float _3018 = (0.5 / (((_3007 * ((_2993 * _3008) + _2978)) + 9.9999999392252902907785028219223e-09) + (((_3007 * _3008) + _2978) * _2993))) * _3007;
                        float _4283 = isnan(0.0) ? _3018 : (isnan(_3018) ? 0.0 : max(_3018, 0.0));
                        float _3029 = (((_2979 * 3.1415927410125732421875) * (isnan(1.0) ? _4283 : (isnan(_4283) ? 1.0 : min(_4283, 1.0)))) / ((_3001 * _3001) * ((_2944 * 2.1991131305694580078125) + 3.141590118408203125))) * _2933;
                        _2786 = (_2948 * _2896.x) + _2854;
                        _2787 = (_2948 * _2896.y) + _2855;
                        _2788 = (_2948 * _2896.z) + _2856;
                        _2783 = (_3029 * _2913.x) + _2851;
                        _2784 = (_3029 * _2913.y) + _2852;
                        _2785 = (_3029 * _2913.z) + _2853;
                        if (_2858 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2851 = _2783;
                            _2852 = _2784;
                            _2853 = _2785;
                            _2854 = _2786;
                            _2855 = _2787;
                            _2856 = _2788;
                            _2857 = _2858;
                        }
                    }
                    frontier_phi_61_pred = _2783;
                    frontier_phi_61_pred_1 = _2788;
                    frontier_phi_61_pred_2 = _2787;
                    frontier_phi_61_pred_3 = _2786;
                    frontier_phi_61_pred_4 = _2785;
                    frontier_phi_61_pred_5 = _2784;
                }
                _2583 = frontier_phi_61_pred;
                _2593 = frontier_phi_61_pred_1;
                _2591 = frontier_phi_61_pred_2;
                _2589 = frontier_phi_61_pred_3;
                _2587 = frontier_phi_61_pred_4;
                _2585 = frontier_phi_61_pred_5;
                uint _2734 = _2733 + 1u;
                if (_2734 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2727 = _2583;
                    _2728 = _2585;
                    _2729 = _2587;
                    _2730 = _2589;
                    _2731 = _2591;
                    _2732 = _2593;
                    _2733 = _2734;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2582 = _2583;
            _2584 = _2585;
            _2586 = _2587;
            _2588 = _2589;
            _2590 = _2591;
            _2592 = _2593;
        }
        uvec4 _2596 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2597 = _2596.z;
        uint _2599 = (_2597 >> 8u) & 15u;
        float _2695;
        float _2697;
        float _2699;
        float _2701;
        float _2703;
        float _2705;
        if (((4294967295u << _2599) & _2481) == 0u)
        {
            _2695 = _2582;
            _2697 = _2584;
            _2699 = _2586;
            _2701 = _2588;
            _2703 = _2590;
            _2705 = _2592;
        }
        else
        {
            float _2720 = inversesqrt(dot(vec3(_2435, _2436, _2437), vec3(_2435, _2436, _2437)));
            float _2721 = _2720 * _2435;
            float _2722 = _2720 * _2436;
            float _2723 = _2720 * _2437;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2599 < ((_2597 >> 12u) & 15u))
            {
                float _2696;
                float _2698;
                float _2700;
                float _2702;
                float _2704;
                float _2706;
                float _2834 = _2582;
                float _2835 = _2584;
                float _2836 = _2586;
                float _2837 = _2588;
                float _2838 = _2590;
                float _2839 = _2592;
                uint _2840 = _2599;
                uint _2849;
                bool _2850;
                for (;;)
                {
                    _2849 = texelFetch(g_lightClassification, int((((_2475 << 5u) + (_2461 << 9u)) + (_2840 << 2u)) >> 2u)).x;
                    _2850 = _2849 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_2850)
                    {
                        frontier_phi_67_pred = _2837;
                        frontier_phi_67_pred_1 = _2838;
                        frontier_phi_67_pred_2 = _2839;
                        frontier_phi_67_pred_3 = _2836;
                        frontier_phi_67_pred_4 = _2835;
                        frontier_phi_67_pred_5 = _2834;
                    }
                    else
                    {
                        float _3034;
                        float _3035;
                        float _3036;
                        float _3037;
                        float _3038;
                        float _3039;
                        float _3328;
                        float _3329;
                        float _3330;
                        float _3331;
                        float _3332;
                        float _3333;
                        float _3047 = _2834;
                        float _3048 = _2835;
                        float _3049 = _2836;
                        float _3050 = _2837;
                        float _3051 = _2838;
                        float _3052 = _2839;
                        uint _3053 = _2849;
                        uint _3054;
                        vec4 _3079;
                        float _3080;
                        vec4 _3095;
                        vec3 _3107;
                        vec4 _3122;
                        vec4 _3138;
                        float _3184;
                        bool _3185;
                        for (;;)
                        {
                            uint _3064 = ((_2840 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3053));
                            _3054 = (_3053 + 4294967295u) & _3053;
                            uint _3066 = _3064 * 40u;
                            _3079 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3066)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3066 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3066 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3066 + 3u)).x));
                            _3080 = _3079.w;
                            uint _3082 = (_3064 * 40u) + 4u;
                            _3095 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3082)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3082 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3082 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3082 + 3u)).x));
                            uint _3097 = (_3064 * 40u) + 8u;
                            _3107 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3097)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3097 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3097 + 2u)).x));
                            uint _3109 = (_3064 * 40u) + 16u;
                            _3122 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3109)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3109 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3109 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3109 + 3u)).x));
                            uint _3125 = (_3064 * 40u) + 20u;
                            _3138 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3125)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3125 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3125 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3125 + 3u)).x));
                            uint _3140 = (_3064 * 40u) + 24u;
                            vec4 _3153 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3140)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3140 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3140 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3140 + 3u)).x));
                            uint _3159 = (_3064 * 40u) + 28u;
                            vec4 _3172 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3159)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3159 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3159 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3159 + 3u)).x));
                            _3184 = fma(_2437, _3172.z, fma(_2436, _3172.y, _3172.x * _2435)) + _3172.w;
                            _3185 = !((fma(_2437, _3153.z, fma(_2436, _3153.y, _3153.x * _2435)) + _3153.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3185)
                            {
                                float _3212 = _3079.x - _2435;
                                float _3213 = _3079.y - _2436;
                                float _3214 = _3079.z - _2437;
                                float _3215 = dot(vec3(_3212, _3213, _3214), vec3(_3212, _3213, _3214));
                                float _3218 = inversesqrt(_3215);
                                float _3219 = _3218 * _3212;
                                float _3220 = _3218 * _3213;
                                float _3221 = _3218 * _3214;
                                float _3225 = 1.0 - (_3215 / (_3080 * _3080));
                                float _4294 = isnan(0.0) ? _3225 : (isnan(_3225) ? 0.0 : max(_3225, 0.0));
                                float _3226 = isnan(1.0) ? _4294 : (isnan(_4294) ? 1.0 : min(_4294, 1.0));
                                float _3230 = sqrt(_3215) * _3095.w;
                                float _3232 = 1.39999997615814208984375 / (_3230 + 1.39999997615814208984375);
                                float _3233 = _3232 * _3232;
                                float _3236 = ((1.0 - _3233) * dot(vec3(_3219, _3220, _3221), vec3(_714, _717, _720))) + _3233;
                                float _3239 = _3230 * _3230;
                                float _3243 = (fma(_2437, _3122.z, fma(_2436, _3122.y, _3122.x * _2435)) + _3122.w) / _3184;
                                float _3244 = (fma(_2437, _3138.z, fma(_2436, _3138.y, _3138.x * _2435)) + _3138.w) / _3184;
                                float _3248 = 1.0 - dot(vec2(_3243, _3244), vec2(_3243, _3244));
                                float _4310 = isnan(0.0) ? _3248 : (isnan(_3248) ? 0.0 : max(_3248, 0.0));
                                float _3249 = isnan(1.0) ? _4310 : (isnan(_4310) ? 1.0 : min(_4310, 1.0));
                                float _3250 = _3249 * (((isnan(0.0) ? _3236 : (isnan(_3236) ? 0.0 : max(_3236, 0.0))) * _3226) / ((_3239 * 0.699999988079071044921875) + 1.0));
                                float _3262 = exp2(log2(1.0 / ((_3239 * 3.5) + 5.0)) * 0.25);
                                float _3263 = 1.0 - _774;
                                float _3270 = sqrt(1.0 - ((1.0 - (_3263 * _3263)) * (1.0 - (_3262 * _3262))));
                                float _3271 = _3270 * _3270;
                                float _3272 = _3271 * _3271;
                                float _3273 = _3219 - _2721;
                                float _3274 = _3220 - _2722;
                                float _3275 = _3221 - _2723;
                                float _3279 = inversesqrt(dot(vec3(_3273, _3274, _3275), vec3(_3273, _3274, _3275)));
                                float _3283 = dot(vec3(_714, _717, _720), vec3((-0.0) - _2721, (-0.0) - _2722, (-0.0) - _2723));
                                float _4321 = isnan(0.0) ? _3283 : (isnan(_3283) ? 0.0 : max(_3283, 0.0));
                                float _3286 = isnan(1.0) ? _4321 : (isnan(_4321) ? 1.0 : min(_4321, 1.0));
                                float _3287 = dot(vec3(_714, _717, _720), vec3(_3279 * _3273, _3279 * _3274, _3279 * _3275));
                                float _4332 = isnan(0.0) ? _3287 : (isnan(_3287) ? 0.0 : max(_3287, 0.0));
                                float _3290 = isnan(1.0) ? _4332 : (isnan(_4332) ? 1.0 : min(_4332, 1.0));
                                float _3294 = ((_3290 * _3290) * (_3272 + (-1.0))) + 1.0;
                                float _3295 = _3232 * _3271;
                                float _3296 = _3295 * _3295;
                                float _3302 = ((1.0 - _3296) * dot(vec3(_714, _717, _720), vec3(_3219, _3220, _3221))) + _3296;
                                float _4343 = isnan(0.0) ? _3302 : (isnan(_3302) ? 0.0 : max(_3302, 0.0));
                                float _3303 = isnan(1.0) ? _4343 : (isnan(_4343) ? 1.0 : min(_4343, 1.0));
                                float _3304 = 1.0 - _3271;
                                float _3314 = (0.5 / (((_3303 * ((_3286 * _3304) + _3271)) + 9.9999999392252902907785028219223e-09) + (((_3303 * _3304) + _3271) * _3286))) * _3303;
                                float _4354 = isnan(0.0) ? _3314 : (isnan(_3314) ? 0.0 : max(_3314, 0.0));
                                float _3324 = (_3249 * _3226) * (((_3272 * 3.1415927410125732421875) * (isnan(1.0) ? _4354 : (isnan(_4354) ? 1.0 : min(_4354, 1.0)))) / ((_3294 * _3294) * ((_3239 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3324 * _3107.x;
                                frontier_phi_73_pred_1 = _3324 * _3107.y;
                                frontier_phi_73_pred_2 = _3250 * _3095.z;
                                frontier_phi_73_pred_3 = _3250 * _3095.y;
                                frontier_phi_73_pred_4 = _3250 * _3095.x;
                                frontier_phi_73_pred_5 = _3324 * _3107.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3328 = frontier_phi_73_pred;
                            _3329 = frontier_phi_73_pred_1;
                            _3333 = frontier_phi_73_pred_2;
                            _3332 = frontier_phi_73_pred_3;
                            _3331 = frontier_phi_73_pred_4;
                            _3330 = frontier_phi_73_pred_5;
                            _3037 = _3331 + _3050;
                            _3038 = _3332 + _3051;
                            _3039 = _3333 + _3052;
                            _3034 = _3328 + _3047;
                            _3035 = _3329 + _3048;
                            _3036 = _3330 + _3049;
                            if (_3054 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3047 = _3034;
                                _3048 = _3035;
                                _3049 = _3036;
                                _3050 = _3037;
                                _3051 = _3038;
                                _3052 = _3039;
                                _3053 = _3054;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3037;
                        frontier_phi_67_pred_1 = _3038;
                        frontier_phi_67_pred_2 = _3039;
                        frontier_phi_67_pred_3 = _3036;
                        frontier_phi_67_pred_4 = _3035;
                        frontier_phi_67_pred_5 = _3034;
                    }
                    _2702 = frontier_phi_67_pred;
                    _2704 = frontier_phi_67_pred_1;
                    _2706 = frontier_phi_67_pred_2;
                    _2700 = frontier_phi_67_pred_3;
                    _2698 = frontier_phi_67_pred_4;
                    _2696 = frontier_phi_67_pred_5;
                    uint _2841 = _2840 + 1u;
                    if (_2841 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2834 = _2696;
                        _2835 = _2698;
                        _2836 = _2700;
                        _2837 = _2702;
                        _2838 = _2704;
                        _2839 = _2706;
                        _2840 = _2841;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2704;
                frontier_phi_55_56_ladder_1 = _2706;
                frontier_phi_55_56_ladder_2 = _2702;
                frontier_phi_55_56_ladder_3 = _2700;
                frontier_phi_55_56_ladder_4 = _2698;
                frontier_phi_55_56_ladder_5 = _2696;
            }
            else
            {
                frontier_phi_55_56_ladder = _2590;
                frontier_phi_55_56_ladder_1 = _2592;
                frontier_phi_55_56_ladder_2 = _2588;
                frontier_phi_55_56_ladder_3 = _2586;
                frontier_phi_55_56_ladder_4 = _2584;
                frontier_phi_55_56_ladder_5 = _2582;
            }
            _2695 = frontier_phi_55_56_ladder_5;
            _2697 = frontier_phi_55_56_ladder_4;
            _2699 = frontier_phi_55_56_ladder_3;
            _2701 = frontier_phi_55_56_ladder_2;
            _2703 = frontier_phi_55_56_ladder;
            _2705 = frontier_phi_55_56_ladder_1;
        }
        float _2710 = isnan(1.0) ? _758 : (isnan(_758) ? 1.0 : min(_758, 1.0));
        _2494 = (_2710 * _2701) + _1946;
        _2496 = (_2710 * _2703) + _1948;
        _2498 = (_2710 * _2705) + _1950;
        _2500 = ((_2695 * 0.039999999105930328369140625) * _2710) + _2279;
        _2502 = ((_2697 * 0.039999999105930328369140625) * _2710) + _2281;
        _2504 = ((_2699 * 0.039999999105930328369140625) * _2710) + _2283;
    }
    else
    {
        _2494 = _1946;
        _2496 = _1948;
        _2498 = _1950;
        _2500 = _2279;
        _2502 = _2281;
        _2504 = _2283;
    }
    float _4370 = isnan(0.0) ? _743 : (isnan(_743) ? 0.0 : max(_743, 0.0));
    float _4381 = isnan(0.0) ? _744 : (isnan(_744) ? 0.0 : max(_744, 0.0));
    float _4392 = isnan(0.0) ? _745 : (isnan(_745) ? 0.0 : max(_745, 0.0));
    uint _2524 = _241 + 6u;
    float _2532 = _695 / cbSceneParam._m0[86u].x;
    float _2533 = _696 / cbSceneParam._m0[86u].y;
    vec4 _2547 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2532, _2533, (log2((isnan(cbSceneParam._m0[77u].w) ? _629 : (isnan(_629) ? cbSceneParam._m0[77u].w : min(_629, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2549 = _2547.x;
    float _2550 = _2547.y;
    float _2551 = _2547.z;
    float _2552 = _2547.w;
    float _2645;
    float _2647;
    float _2649;
    float _2651;
    if (_629 > cbSceneParam._m0[78u].w)
    {
        float _2607 = isnan(_629) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _629 : min(cbSceneParam._m0[80u].w, _629));
        float _2608 = _2607 / _629;
        float _2619 = _2608 * _680;
        float _2620 = _681 * _2608;
        float _2621 = (-0.0) - _2620;
        float _2623 = _2608 * _682;
        float _2625 = (cbSceneParam._m0[77u].w * _2621) / _2607;
        float _2626 = _2625 + cbSceneParam._m0[79u].w;
        float _2627 = cbSceneParam._m0[79u].w - _2620;
        float _2633 = sqrt(((_2619 * _2619) + (_2620 * _2620)) + (_2623 * _2623));
        float _2636 = (1.0 - (cbSceneParam._m0[77u].w / _2607)) * _2633;
        float _2641 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2643 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2796;
        if (abs((_2621 - _2625) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2796 = ((((_2626 > 0.0) ? exp2(_2641 * _2626) : (2.0 - exp2(_2643 * _2626))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2636;
        }
        else
        {
            float _2756 = 1.0 / cbSceneParam._m0[80u].x;
            float _2757 = isnan(_2627) ? _2626 : (isnan(_2626) ? _2627 : max(_2626, _2627));
            float _2758 = isnan(_2627) ? _2626 : (isnan(_2626) ? _2627 : min(_2626, _2627));
            float _2767 = isnan(0.0) ? _2757 : (isnan(_2757) ? 0.0 : min(_2757, 0.0));
            float _2768 = isnan(0.0) ? _2758 : (isnan(_2758) ? 0.0 : min(_2758, 0.0));
            _2796 = ((abs(_2633 / _2621) * cbSceneParam._m0[80u].y) * ((((_2767 - _2768) * 2.0) - ((exp2(_2641 * (isnan(0.0) ? _2757 : (isnan(_2757) ? 0.0 : max(_2757, 0.0)))) - exp2(_2641 * (isnan(0.0) ? _2758 : (isnan(_2758) ? 0.0 : max(_2758, 0.0))))) * _2756)) - ((exp2(_2643 * _2767) - exp2(_2643 * _2768)) * _2756))) + (_2636 * cbSceneParam._m0[80u].z);
        }
        vec4 _2798 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2532, _2533, 1.0), 0.0);
        float _2807 = exp2((_2796 * (-1.44269502162933349609375)) * (1.0 - _2798.w));
        float _2808 = log2(_2807);
        float _2824 = log2(_2552);
        _2645 = (exp2(_2824 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2808 * cbSceneParam._m0[78u].x)) * _2798.x) / cbSceneParam._m0[78u].x)) + _2549;
        _2647 = (exp2(_2824 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2808 * cbSceneParam._m0[78u].y)) * _2798.y) / cbSceneParam._m0[78u].y)) + _2550;
        _2649 = (exp2(_2824 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2808 * cbSceneParam._m0[78u].z)) * _2798.z) / cbSceneParam._m0[78u].z)) + _2551;
        _2651 = _2807 * _2552;
    }
    else
    {
        _2645 = _2549;
        _2647 = _2550;
        _2649 = _2551;
        _2651 = _2552;
    }
    float _2663 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2664 = _2663 == 3.0;
    float _2665 = log2(_2651);
    float _2672 = exp2(_2665 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4370 : (isnan(_4370) ? 1.0 : min(_4370, 1.0))) * (_2494 + ((isnan(0.0) ? _1484 : (isnan(_1484) ? 0.0 : max(_1484, 0.0))) * _758))) + ((_2500 + ((isnan(0.0) ? _1778 : (isnan(_1778) ? 0.0 : max(_1778, 0.0))) * _1563)) * cbPerFrame._m0[3u].x));
    float _2673 = exp2(_2665 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4381 : (isnan(_4381) ? 1.0 : min(_4381, 1.0))) * (_2496 + ((isnan(0.0) ? _1487 : (isnan(_1487) ? 0.0 : max(_1487, 0.0))) * _758))) + ((_2502 + ((isnan(0.0) ? _1781 : (isnan(_1781) ? 0.0 : max(_1781, 0.0))) * _1563)) * cbPerFrame._m0[3u].x));
    float _2674 = exp2(_2665 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4392 : (isnan(_4392) ? 1.0 : min(_4392, 1.0))) * (_2498 + ((isnan(0.0) ? _1490 : (isnan(_1490) ? 0.0 : max(_1490, 0.0))) * _758))) + ((_2504 + ((isnan(0.0) ? _1784 : (isnan(_1784) ? 0.0 : max(_1784, 0.0))) * _1563)) * cbPerFrame._m0[3u].x));
    float _2683 = (_2663 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2683 * (_2664 ? _2672 : (_2672 + (cbSceneParam._m0[72u].w * _2645)));
    SV_Target.y = _2683 * (_2664 ? _2673 : (_2673 + (cbSceneParam._m0[72u].w * _2647)));
    SV_Target.z = _2683 * (_2664 ? _2674 : (_2674 + (cbSceneParam._m0[72u].w * _2649)));
    SV_Target.w = cbInstanceData._m0[_2524].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2524].w;
}


