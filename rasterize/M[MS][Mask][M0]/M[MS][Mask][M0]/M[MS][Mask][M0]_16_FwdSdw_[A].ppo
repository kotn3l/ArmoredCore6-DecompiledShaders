#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_29;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_6;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1276;
float _3920;
float _3921;
float _3922;
float _3923;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _225 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _226 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _227 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _233 = inversesqrt(dot(vec3(_225, _226, _227), vec3(_225, _226, _227)));
    float _240 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _247 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _253 = uint(roundEven(NORMAL.w)) * 13u;
    uint _258 = _253 + 1u;
    uint _262 = _253 + 2u;
    float _271 = sqrt(((cbInstanceData._m0[_258].x * cbInstanceData._m0[_258].x) + (cbInstanceData._m0[_253].x * cbInstanceData._m0[_253].x)) + (cbInstanceData._m0[_262].x * cbInstanceData._m0[_262].x));
    float _272 = _271 * TEXCOORD.z;
    float _273 = _271 * TEXCOORD.w;
    vec4 _293 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _299 = _293.x * cbMtdParam._m0[11u].x;
    float _300 = _293.y * cbMtdParam._m0[11u].y;
    float _301 = _293.z * cbMtdParam._m0[11u].z;
    vec4 _320 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _272) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _273) + cbTextureTilingScale._m0[5u].w));
    vec4 _373 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _375 = _373.x;
    float _387 = dot(vec4(_375, _373.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _404 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w)).x) * 2.0) - ((((_375 - _387) * cbMtdParam._m0[24u].z) + _387) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3932 = isnan(0.0) ? _404 : (isnan(_404) ? 0.0 : max(_404, 0.0));
    float _405 = isnan(1.0) ? _3932 : (isnan(_3932) ? 1.0 : min(_3932, 1.0));
    float _412 = (_405 * ((_320.x * cbMtdParam._m0[12u].x) - _299)) + _299;
    float _413 = (_405 * ((_320.y * cbMtdParam._m0[12u].y) - _300)) + _300;
    float _414 = (_405 * ((_320.z * cbMtdParam._m0[12u].z) - _301)) + _301;
    vec4 _432 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _272) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _273) + cbTextureTilingScale._m0[4u].w));
    vec4 _449 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _451 = _449.x;
    float _452 = _449.y;
    float _453 = _449.z;
    float _462 = ((_432.z - _453) * _405) + _453;
    float _465 = ((((_432.x - _451) * _405) + _451) * 2.0) + (-1.0);
    float _467 = ((((_432.y - _452) * _405) + _452) * 2.0) + (-1.0);
    float _468 = dot(vec2(_465, _467), vec2(_465, _467));
    float _3943 = isnan(0.0) ? _468 : (isnan(_468) ? 0.0 : max(_468, 0.0));
    float _473 = sqrt(1.0 - (isnan(1.0) ? _3943 : (isnan(_3943) ? 1.0 : min(_3943, 1.0))));
    vec4 _489 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _514 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _272) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _273) + cbTextureTilingScale._m0[11u].w));
    float _516 = _514.x;
    float _517 = 1.0 - _516;
    float _523 = isnan(-1.0) ? cbMtdParam._m0[24u].x : (isnan(cbMtdParam._m0[24u].x) ? (-1.0) : max(cbMtdParam._m0[24u].x, -1.0));
    float _526 = ((isnan(0.0) ? _523 : (isnan(_523) ? 0.0 : min(_523, 0.0))) * TEXCOORD_8.x) + TEXCOORD_8.w;
    float _535 = (_526 - ((((((_516 - _517) * cbMtdParam._m0[24u].w) + _517) + 0.00999999977648258209228515625) * cbMtdParam._m0[21u].z) * (1.0 - _526))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3964 = isnan(0.0) ? _535 : (isnan(_535) ? 0.0 : max(_535, 0.0));
    float _536 = isnan(1.0) ? _3964 : (isnan(_3964) ? 1.0 : min(_3964, 1.0));
    float _543 = (_536 * (cbMtdParam._m0[17u].x - _412)) + _412;
    float _544 = (_536 * (cbMtdParam._m0[17u].y - _413)) + _413;
    float _545 = (_536 * (cbMtdParam._m0[17u].z - _414)) + _414;
    vec4 _557 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _272) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _273) + cbTextureTilingScale._m0[19u].w));
    float _559 = _557.x;
    float _560 = 1.0 - _559;
    float _587 = (TEXCOORD_8.x - ((cbMtdParam._m0[22u].w * (1.0 - TEXCOORD_8.x)) * ((((_559 - _560) * cbMtdParam._m0[24u].y) + _560) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3975 = isnan(0.0) ? _587 : (isnan(_587) ? 0.0 : max(_587, 0.0));
    float _588 = isnan(1.0) ? _3975 : (isnan(_3975) ? 1.0 : min(_3975, 1.0));
    float _596 = ((((cbMtdParam._m0[10u].x - _543) * TEXCOORD_8.x) * cbMtdParam._m0[23u].w) * _588) + _543;
    float _597 = ((((cbMtdParam._m0[10u].y - _544) * TEXCOORD_8.y) * cbMtdParam._m0[23u].w) * _588) + _544;
    float _598 = (((cbMtdParam._m0[23u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _545)) * _588) + _545;
    float _602 = (cbMtdParam._m0[19u].w * (_489.z - _462)) + _462;
    vec4 _616 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _272) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _273) + cbTextureTilingScale._m0[15u].w));
    float _623 = (_616.x * 2.0) + (-1.0);
    float _624 = (_616.y * 2.0) + (-1.0);
    float _625 = dot(vec2(_623, _624), vec2(_623, _624));
    float _3986 = isnan(0.0) ? _625 : (isnan(_625) ? 0.0 : max(_625, 0.0));
    float _633 = (_536 * (_616.z - _602)) + _602;
    float _636 = ((cbMtdParam._m0[23u].y - _633) * _588) + _633;
    vec4 _655 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _272) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _273) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _661 = (_655.x * 2.0) + (-1.0);
    float _662 = (_655.y * 2.0) + (-1.0);
    float _663 = dot(vec2(_661, _662), vec2(_661, _662));
    float _3997 = isnan(0.0) ? _663 : (isnan(_663) ? 0.0 : max(_663, 0.0));
    float _671 = (((_489.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _465;
    float _672 = (((_489.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _467;
    float _684 = (((_623 - _671) + (cbMtdParam._m0[21u].x * _671)) * _536) + _671;
    float _685 = (((_624 - _672) + (cbMtdParam._m0[21u].x * _672)) * _536) + _672;
    float _686 = (_536 * (sqrt(1.0 - (isnan(1.0) ? _3986 : (isnan(_3986) ? 1.0 : min(_3986, 1.0)))) - _473)) + _473;
    float _697 = (((_661 - _684) + (_684 * cbMtdParam._m0[22u].z)) * _588) + _684;
    float _698 = (((_662 - _685) + (_685 * cbMtdParam._m0[22u].z)) * _588) + _685;
    float _699 = ((sqrt(1.0 - (isnan(1.0) ? _3997 : (isnan(_3997) ? 1.0 : min(_3997, 1.0)))) - _686) * _588) + _686;
    float _701 = cbMtdParam._m0[22u].x + _489.w;
    float _704 = fma(_699, _240 * NORMAL.x, fma(_698, _247 * TANGENT.x, (_233 * _225) * _697));
    float _707 = fma(_699, _240 * NORMAL.y, fma(_698, _247 * TANGENT.y, (_233 * _226) * _697));
    float _710 = fma(_699, _240 * NORMAL.z, fma(_698, _247 * TANGENT.z, (_233 * _227) * _697));
    float _714 = inversesqrt(dot(vec3(_704, _707, _710), vec3(_704, _707, _710)));
    float _715 = _714 * _704;
    float _716 = _714 * _707;
    float _717 = _714 * _710;
    float _4008 = isnan(0.0) ? _636 : (isnan(_636) ? 0.0 : max(_636, 0.0));
    float _718 = isnan(1.0) ? _4008 : (isnan(_4008) ? 1.0 : min(_4008, 1.0));
    float _4019 = isnan(0.0) ? _701 : (isnan(_701) ? 0.0 : max(_701, 0.0));
    float _4030 = isnan(0.0) ? _596 : (isnan(_596) ? 0.0 : max(_596, 0.0));
    float _4041 = isnan(0.0) ? _597 : (isnan(_597) ? 0.0 : max(_597, 0.0));
    float _4052 = isnan(0.0) ? _598 : (isnan(_598) ? 0.0 : max(_598, 0.0));
    float _736 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _777 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _787 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _777);
    float _788 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _777);
    float _789 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _777);
    float _793 = inversesqrt(dot(vec3(_787, _788, _789), vec3(_787, _788, _789)));
    float _794 = _787 * _793;
    float _795 = _788 * _793;
    float _796 = _789 * _793;
    vec4 _801 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _803 = _801.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _957 = sqrt(((_787 * _787) + (_788 * _788)) + (_789 * _789));
        float _963 = (cbMatDynParam._m0[5u].x * _957) + cbMatDynParam._m0[5u].y;
        float _4063 = isnan(0.0) ? _963 : (isnan(_963) ? 0.0 : max(_963, 0.0));
        float _964 = isnan(1.0) ? _4063 : (isnan(_4063) ? 1.0 : min(_4063, 1.0));
        float _968 = (cbMatDynParam._m0[5u].z * _957) + cbMatDynParam._m0[5u].w;
        float _4074 = isnan(0.0) ? _968 : (isnan(_968) ? 0.0 : max(_968, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4074 : (isnan(_4074) ? 1.0 : min(_4074, 1.0))) - _964)) + _964) < ((_803 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _814 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _815 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _833 = fma(_717, cbSceneParam._m0[5u].z, fma(_716, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _715));
    float _836 = fma(_717, cbSceneParam._m0[6u].z, fma(_716, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _715));
    float _839 = fma(_717, cbSceneParam._m0[7u].z, fma(_716, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _715));
    uint _852 = _253 + 9u;
    uint _853 = _852 + uint(cbMatDynParam._m0[0u].w);
    float _859 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4030 : (isnan(_4030) ? 1.0 : min(_4030, 1.0)))) * cbInstanceData._m0[_853].x;
    float _860 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4041 : (isnan(_4041) ? 1.0 : min(_4041, 1.0)))) * cbInstanceData._m0[_853].y;
    float _861 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4052 : (isnan(_4052) ? 1.0 : min(_4052, 1.0)))) * cbInstanceData._m0[_853].z;
    float _4085 = isnan(0.0) ? _859 : (isnan(_859) ? 0.0 : max(_859, 0.0));
    float _862 = isnan(1.0) ? _4085 : (isnan(_4085) ? 1.0 : min(_4085, 1.0));
    float _4096 = isnan(0.0) ? _860 : (isnan(_860) ? 0.0 : max(_860, 0.0));
    float _863 = isnan(1.0) ? _4096 : (isnan(_4096) ? 1.0 : min(_4096, 1.0));
    float _4107 = isnan(0.0) ? _861 : (isnan(_861) ? 0.0 : max(_861, 0.0));
    float _864 = isnan(1.0) ? _4107 : (isnan(_4107) ? 1.0 : min(_4107, 1.0));
    vec4 _873 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _814, cbSceneParam._m0[86u].y * _815));
    float _877 = ((isnan(1.0) ? _4019 : (isnan(_4019) ? 1.0 : min(_4019, 1.0))) * TEXCOORD_5.w) * _873.x;
    float _878 = dot(vec3(_715, _716, _717), vec3(_794, _795, _796));
    float _881 = _878 * 2.0;
    float _885 = (_881 * _715) - _794;
    float _886 = (_881 * _716) - _795;
    float _887 = (_881 * _717) - _796;
    float _891 = abs(dot(vec3(_794, _795, _796), vec3(_715, _716, _717)));
    float _4118 = isnan(0.0) ? _891 : (isnan(_891) ? 0.0 : max(_891, 0.0));
    float _893 = sqrt(_718);
    float _906 = exp2((_893 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4118 : (isnan(_4118) ? 1.0 : min(_4118, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_893 * 3.0));
    float _938 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _942 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _946 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1275;
    float _1277;
    float _1278;
    float _1279;
    float _1280;
    float _1281;
    float _1282;
    float _1283;
    float _1284;
    float _1285;
    float _1286;
    float _1287;
    float _1288;
    float _1289;
    float _1290;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1000 = fma(_946, cbModelParam._m0[26u].z, fma(_942, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _938));
        float _1004 = fma(_946, cbModelParam._m0[27u].z, fma(_942, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _938));
        float _1008 = fma(_946, cbModelParam._m0[28u].z, fma(_942, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _938));
        float _1033 = _938 + _715;
        float _1034 = _942 + _716;
        float _1035 = _946 + _717;
        float _1045 = fma(_1035, cbModelParam._m0[26u].z, fma(_1034, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1033)) - _1000;
        float _1046 = fma(_1035, cbModelParam._m0[27u].z, fma(_1034, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1033)) - _1004;
        float _1047 = fma(_1035, cbModelParam._m0[28u].z, fma(_1034, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1033)) - _1008;
        float _1051 = inversesqrt(dot(vec3(_1045, _1046, _1047), vec3(_1045, _1046, _1047)));
        float _1064 = ((_1051 * _1045) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1000 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1065 = ((_1051 * _1046) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1004 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1066 = ((_1051 * _1047) / cbModelParam._m0[34u].z) + ((((((_1008 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1069 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1064, _1065, _1066), 0.0);
        vec4 _1076 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1064, _1065, _1066), 0.0);
        vec4 _1083 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1064, _1065, _1066), 0.0);
        vec4 _1090 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1064, _1065, _1066), 0.0);
        float _1103 = exp2((_1069.w + (-0.5)) * 20.0) * 2.0;
        float _1104 = _1103 * (_1069.x + (-0.5));
        float _1105 = _1103 * (_1069.y + (-0.5));
        float _1106 = _1103 * (_1069.z + (-0.5));
        float _1113 = exp2((_1076.w + (-0.5)) * 20.0) * 2.0;
        float _1114 = _1113 * (_1076.x + (-0.5));
        float _1115 = _1113 * (_1076.y + (-0.5));
        float _1116 = _1113 * (_1076.z + (-0.5));
        float _1123 = exp2((_1083.w + (-0.5)) * 20.0) * 2.0;
        float _1124 = _1123 * (_1083.x + (-0.5));
        float _1125 = _1123 * (_1083.y + (-0.5));
        float _1126 = _1123 * (_1083.z + (-0.5));
        float _1133 = exp2((_1090.w + (-0.5)) * 20.0) * 2.0;
        float _1134 = _1133 * (_1090.x + (-0.5));
        float _1135 = _1133 * (_1090.y + (-0.5));
        float _1136 = _1133 * (_1090.z + (-0.5));
        float _1137 = isnan(0.0) ? _1134 : (isnan(_1134) ? 0.0 : max(_1134, 0.0));
        float _1138 = isnan(0.0) ? _1135 : (isnan(_1135) ? 0.0 : max(_1135, 0.0));
        float _1139 = isnan(0.0) ? _1136 : (isnan(_1136) ? 0.0 : max(_1136, 0.0));
        float _1140 = _1104 * 0.5;
        float _1141 = _1114 * 0.5;
        float _1142 = _1124 * 0.5;
        float _1143 = dot(vec3(_1140, _1141, _1142), vec3(_1140, _1141, _1142));
        float _1148 = (_1143 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1143);
        float _1157 = (dot(vec3(_715, _716, _717), vec3(_1148 * _1140, _1148 * _1141, _1148 * _1142)) + 1.0) * 0.5;
        float _4144 = isnan(0.0) ? _1157 : (isnan(_1157) ? 0.0 : max(_1157, 0.0));
        float _1167 = sqrt(((_1141 * _1141) + (_1140 * _1140)) + (_1142 * _1142)) / (_1137 + 9.9999997473787516355514526367188e-06);
        float _4155 = isnan(0.0) ? _1167 : (isnan(_1167) ? 0.0 : max(_1167, 0.0));
        float _1168 = isnan(1.0) ? _4155 : (isnan(_4155) ? 1.0 : min(_4155, 1.0));
        float _1169 = _1168 * 2.0;
        float _1173 = (1.0 - _1168) / (_1168 + 1.0);
        float _4166 = isnan(0.0) ? _1173 : (isnan(_1173) ? 0.0 : max(_1173, 0.0));
        float _1174 = isnan(1.0) ? _4166 : (isnan(_4166) ? 1.0 : min(_4166, 1.0));
        float _1183 = ((((1.0 - _1174) * (_1169 + 2.0)) * exp2(log2(isnan(1.0) ? _4144 : (isnan(_4144) ? 1.0 : min(_4144, 1.0))) * (_1169 + 1.0))) + _1174) * _1137;
        float _1184 = _1105 * 0.5;
        float _1185 = _1115 * 0.5;
        float _1186 = _1125 * 0.5;
        float _1187 = dot(vec3(_1184, _1185, _1186), vec3(_1184, _1185, _1186));
        float _1192 = (_1187 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1187);
        float _1200 = (dot(vec3(_715, _716, _717), vec3(_1192 * _1184, _1192 * _1185, _1192 * _1186)) + 1.0) * 0.5;
        float _4177 = isnan(0.0) ? _1200 : (isnan(_1200) ? 0.0 : max(_1200, 0.0));
        float _1209 = sqrt(((_1185 * _1185) + (_1184 * _1184)) + (_1186 * _1186)) / (_1138 + 9.9999997473787516355514526367188e-06);
        float _4188 = isnan(0.0) ? _1209 : (isnan(_1209) ? 0.0 : max(_1209, 0.0));
        float _1210 = isnan(1.0) ? _4188 : (isnan(_4188) ? 1.0 : min(_4188, 1.0));
        float _1211 = _1210 * 2.0;
        float _1215 = (1.0 - _1210) / (_1210 + 1.0);
        float _4199 = isnan(0.0) ? _1215 : (isnan(_1215) ? 0.0 : max(_1215, 0.0));
        float _1216 = isnan(1.0) ? _4199 : (isnan(_4199) ? 1.0 : min(_4199, 1.0));
        float _1225 = ((((1.0 - _1216) * (_1211 + 2.0)) * exp2(log2(isnan(1.0) ? _4177 : (isnan(_4177) ? 1.0 : min(_4177, 1.0))) * (_1211 + 1.0))) + _1216) * _1138;
        float _1226 = _1106 * 0.5;
        float _1227 = _1116 * 0.5;
        float _1228 = _1126 * 0.5;
        float _1229 = dot(vec3(_1226, _1227, _1228), vec3(_1226, _1227, _1228));
        float _1234 = (_1229 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1229);
        float _1242 = (dot(vec3(_715, _716, _717), vec3(_1234 * _1226, _1234 * _1227, _1234 * _1228)) + 1.0) * 0.5;
        float _4210 = isnan(0.0) ? _1242 : (isnan(_1242) ? 0.0 : max(_1242, 0.0));
        float _1251 = sqrt(((_1227 * _1227) + (_1226 * _1226)) + (_1228 * _1228)) / (_1139 + 9.9999997473787516355514526367188e-06);
        float _4221 = isnan(0.0) ? _1251 : (isnan(_1251) ? 0.0 : max(_1251, 0.0));
        float _1252 = isnan(1.0) ? _4221 : (isnan(_4221) ? 1.0 : min(_4221, 1.0));
        float _1253 = _1252 * 2.0;
        float _1257 = (1.0 - _1252) / (_1252 + 1.0);
        float _4232 = isnan(0.0) ? _1257 : (isnan(_1257) ? 0.0 : max(_1257, 0.0));
        float _1258 = isnan(1.0) ? _4232 : (isnan(_4232) ? 1.0 : min(_4232, 1.0));
        float _1267 = ((((1.0 - _1258) * (_1253 + 2.0)) * exp2(log2(isnan(1.0) ? _4210 : (isnan(_4210) ? 1.0 : min(_4210, 1.0))) * (_1253 + 1.0))) + _1258) * _1139;
        _1275 = _1106;
        _1277 = _1105;
        _1278 = _1104;
        _1279 = _1116;
        _1280 = _1115;
        _1281 = _1114;
        _1282 = _1126;
        _1283 = _1125;
        _1284 = _1124;
        _1285 = _1139;
        _1286 = _1138;
        _1287 = _1137;
        _1288 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1183 : (isnan(_1183) ? 0.0 : max(_1183, 0.0)));
        _1289 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1225 : (isnan(_1225) ? 0.0 : max(_1225, 0.0)));
        _1290 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1267 : (isnan(_1267) ? 0.0 : max(_1267, 0.0)));
    }
    else
    {
        _1275 = _1276;
        _1277 = _1276;
        _1278 = _1276;
        _1279 = _1276;
        _1280 = _1276;
        _1281 = _1276;
        _1282 = _1276;
        _1283 = _1276;
        _1284 = _1276;
        _1285 = _1276;
        _1286 = _1276;
        _1287 = _1276;
        _1288 = 0.0;
        _1289 = 0.0;
        _1290 = 0.0;
    }
    float _1587;
    float _1588;
    float _1589;
    float _1590;
    float _1591;
    float _1592;
    float _1593;
    float _1594;
    float _1595;
    float _1596;
    float _1597;
    float _1598;
    float _1599;
    float _1600;
    float _1601;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1318 = fma(_946, cbModelParam._m0[30u].z, fma(_942, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _938));
        float _1322 = fma(_946, cbModelParam._m0[31u].z, fma(_942, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _938));
        float _1326 = fma(_946, cbModelParam._m0[32u].z, fma(_942, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _938));
        float _1349 = _938 + _715;
        float _1350 = _942 + _716;
        float _1351 = _946 + _717;
        float _1361 = fma(_1351, cbModelParam._m0[30u].z, fma(_1350, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1349)) - _1318;
        float _1362 = fma(_1351, cbModelParam._m0[31u].z, fma(_1350, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1349)) - _1322;
        float _1363 = fma(_1351, cbModelParam._m0[32u].z, fma(_1350, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1349)) - _1326;
        float _1367 = inversesqrt(dot(vec3(_1361, _1362, _1363), vec3(_1361, _1362, _1363)));
        float _1380 = ((_1367 * _1361) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1318 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1381 = ((_1367 * _1362) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1322 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1382 = ((_1367 * _1363) / cbModelParam._m0[35u].z) + ((((((_1326 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1384 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1380, _1381, _1382), 0.0);
        vec4 _1391 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1380, _1381, _1382), 0.0);
        vec4 _1398 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1380, _1381, _1382), 0.0);
        vec4 _1405 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1380, _1381, _1382), 0.0);
        float _1417 = exp2((_1384.w + (-0.5)) * 20.0) * 2.0;
        float _1418 = _1417 * (_1384.x + (-0.5));
        float _1419 = _1417 * (_1384.y + (-0.5));
        float _1420 = _1417 * (_1384.z + (-0.5));
        float _1427 = exp2((_1391.w + (-0.5)) * 20.0) * 2.0;
        float _1428 = _1427 * (_1391.x + (-0.5));
        float _1429 = _1427 * (_1391.y + (-0.5));
        float _1430 = _1427 * (_1391.z + (-0.5));
        float _1437 = exp2((_1398.w + (-0.5)) * 20.0) * 2.0;
        float _1438 = _1437 * (_1398.x + (-0.5));
        float _1439 = _1437 * (_1398.y + (-0.5));
        float _1440 = _1437 * (_1398.z + (-0.5));
        float _1447 = exp2((_1405.w + (-0.5)) * 20.0) * 2.0;
        float _1448 = _1447 * (_1405.x + (-0.5));
        float _1449 = _1447 * (_1405.y + (-0.5));
        float _1450 = _1447 * (_1405.z + (-0.5));
        float _1451 = isnan(0.0) ? _1448 : (isnan(_1448) ? 0.0 : max(_1448, 0.0));
        float _1452 = isnan(0.0) ? _1449 : (isnan(_1449) ? 0.0 : max(_1449, 0.0));
        float _1453 = isnan(0.0) ? _1450 : (isnan(_1450) ? 0.0 : max(_1450, 0.0));
        float _1454 = _1418 * 0.5;
        float _1455 = _1428 * 0.5;
        float _1456 = _1438 * 0.5;
        float _1457 = dot(vec3(_1454, _1455, _1456), vec3(_1454, _1455, _1456));
        float _1462 = (_1457 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1457);
        float _1470 = (dot(vec3(_715, _716, _717), vec3(_1462 * _1454, _1462 * _1455, _1462 * _1456)) + 1.0) * 0.5;
        float _4273 = isnan(0.0) ? _1470 : (isnan(_1470) ? 0.0 : max(_1470, 0.0));
        float _1479 = sqrt(((_1455 * _1455) + (_1454 * _1454)) + (_1456 * _1456)) / (_1451 + 9.9999997473787516355514526367188e-06);
        float _4284 = isnan(0.0) ? _1479 : (isnan(_1479) ? 0.0 : max(_1479, 0.0));
        float _1480 = isnan(1.0) ? _4284 : (isnan(_4284) ? 1.0 : min(_4284, 1.0));
        float _1481 = _1480 * 2.0;
        float _1485 = (1.0 - _1480) / (_1480 + 1.0);
        float _4295 = isnan(0.0) ? _1485 : (isnan(_1485) ? 0.0 : max(_1485, 0.0));
        float _1486 = isnan(1.0) ? _4295 : (isnan(_4295) ? 1.0 : min(_4295, 1.0));
        float _1495 = ((((1.0 - _1486) * (_1481 + 2.0)) * exp2(log2(isnan(1.0) ? _4273 : (isnan(_4273) ? 1.0 : min(_4273, 1.0))) * (_1481 + 1.0))) + _1486) * _1451;
        float _1496 = _1419 * 0.5;
        float _1497 = _1429 * 0.5;
        float _1498 = _1439 * 0.5;
        float _1499 = dot(vec3(_1496, _1497, _1498), vec3(_1496, _1497, _1498));
        float _1504 = (_1499 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1499);
        float _1512 = (dot(vec3(_715, _716, _717), vec3(_1504 * _1496, _1504 * _1497, _1504 * _1498)) + 1.0) * 0.5;
        float _4306 = isnan(0.0) ? _1512 : (isnan(_1512) ? 0.0 : max(_1512, 0.0));
        float _1521 = sqrt(((_1497 * _1497) + (_1496 * _1496)) + (_1498 * _1498)) / (_1452 + 9.9999997473787516355514526367188e-06);
        float _4317 = isnan(0.0) ? _1521 : (isnan(_1521) ? 0.0 : max(_1521, 0.0));
        float _1522 = isnan(1.0) ? _4317 : (isnan(_4317) ? 1.0 : min(_4317, 1.0));
        float _1523 = _1522 * 2.0;
        float _1527 = (1.0 - _1522) / (_1522 + 1.0);
        float _4328 = isnan(0.0) ? _1527 : (isnan(_1527) ? 0.0 : max(_1527, 0.0));
        float _1528 = isnan(1.0) ? _4328 : (isnan(_4328) ? 1.0 : min(_4328, 1.0));
        float _1537 = ((((1.0 - _1528) * (_1523 + 2.0)) * exp2(log2(isnan(1.0) ? _4306 : (isnan(_4306) ? 1.0 : min(_4306, 1.0))) * (_1523 + 1.0))) + _1528) * _1452;
        float _1538 = _1420 * 0.5;
        float _1539 = _1430 * 0.5;
        float _1540 = _1440 * 0.5;
        float _1541 = dot(vec3(_1538, _1539, _1540), vec3(_1538, _1539, _1540));
        float _1546 = (_1541 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1541);
        float _1554 = (dot(vec3(_715, _716, _717), vec3(_1546 * _1538, _1546 * _1539, _1546 * _1540)) + 1.0) * 0.5;
        float _4339 = isnan(0.0) ? _1554 : (isnan(_1554) ? 0.0 : max(_1554, 0.0));
        float _1563 = sqrt(((_1539 * _1539) + (_1538 * _1538)) + (_1540 * _1540)) / (_1453 + 9.9999997473787516355514526367188e-06);
        float _4350 = isnan(0.0) ? _1563 : (isnan(_1563) ? 0.0 : max(_1563, 0.0));
        float _1564 = isnan(1.0) ? _4350 : (isnan(_4350) ? 1.0 : min(_4350, 1.0));
        float _1565 = _1564 * 2.0;
        float _1569 = (1.0 - _1564) / (_1564 + 1.0);
        float _4361 = isnan(0.0) ? _1569 : (isnan(_1569) ? 0.0 : max(_1569, 0.0));
        float _1570 = isnan(1.0) ? _4361 : (isnan(_4361) ? 1.0 : min(_4361, 1.0));
        float _1579 = ((((1.0 - _1570) * (_1565 + 2.0)) * exp2(log2(isnan(1.0) ? _4339 : (isnan(_4339) ? 1.0 : min(_4339, 1.0))) * (_1565 + 1.0))) + _1570) * _1453;
        _1587 = _1420;
        _1588 = _1419;
        _1589 = _1418;
        _1590 = _1430;
        _1591 = _1429;
        _1592 = _1428;
        _1593 = _1440;
        _1594 = _1439;
        _1595 = _1438;
        _1596 = _1453;
        _1597 = _1452;
        _1598 = _1451;
        _1599 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1495 : (isnan(_1495) ? 0.0 : max(_1495, 0.0)));
        _1600 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1537 : (isnan(_1537) ? 0.0 : max(_1537, 0.0)));
        _1601 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1579 : (isnan(_1579) ? 0.0 : max(_1579, 0.0)));
    }
    else
    {
        _1587 = _1276;
        _1588 = _1276;
        _1589 = _1276;
        _1590 = _1276;
        _1591 = _1276;
        _1592 = _1276;
        _1593 = _1276;
        _1594 = _1276;
        _1595 = _1276;
        _1596 = _1276;
        _1597 = _1276;
        _1598 = _1276;
        _1599 = 0.0;
        _1600 = 0.0;
        _1601 = 0.0;
    }
    float _1611 = (cbModelParam._m0[1u].x * (_1599 - _1288)) + _1288;
    float _1612 = (cbModelParam._m0[1u].x * (_1600 - _1289)) + _1289;
    float _1613 = (cbModelParam._m0[1u].x * (_1601 - _1290)) + _1290;
    float _1634 = fma(_1613, cbSceneParam._m0[89u].z, fma(_1612, cbSceneParam._m0[89u].y, _1611 * cbSceneParam._m0[89u].x));
    float _1637 = fma(_1613, cbSceneParam._m0[90u].z, fma(_1612, cbSceneParam._m0[90u].y, _1611 * cbSceneParam._m0[90u].x));
    float _1640 = fma(_1613, cbSceneParam._m0[91u].z, fma(_1612, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1611));
    float _1655 = _885 * 0.5;
    float _1656 = _886 * 0.5;
    float _1657 = _887 * 0.5;
    float _1658 = dot(vec4(_1655, _1656, _1657, 1.0), vec4(_1589, _1592, _1595, _1598));
    float _1661 = dot(vec4(_1655, _1656, _1657, 1.0), vec4(_1588, _1591, _1594, _1597));
    float _1664 = dot(vec4(_1655, _1656, _1657, 1.0), vec4(_1587, _1590, _1593, _1596));
    float _1698;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1671 = dot(vec4(_1655, _1656, _1657, 1.0), vec4(_1275, _1279, _1282, _1285));
        float _1675 = dot(vec4(_1655, _1656, _1657, 1.0), vec4(_1277, _1280, _1283, _1286));
        float _1679 = dot(vec4(_1655, _1656, _1657, 1.0), vec4(_1278, _1281, _1284, _1287));
        float _1686 = dot(vec4(cbModelParam._m0[39u]), vec4(_1655, _1656, _1657, 1.0));
        _1698 = dot(vec3(isnan(0.0) ? _1679 : (isnan(_1679) ? 0.0 : max(_1679, 0.0)), isnan(0.0) ? _1675 : (isnan(_1675) ? 0.0 : max(_1675, 0.0)), isnan(0.0) ? _1671 : (isnan(_1671) ? 0.0 : max(_1671, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1686) ? 0.0 : (isnan(0.0) ? _1686 : max(0.0, _1686))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1698 = 1.0;
    }
    float _1709;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1700 = dot(vec4(cbModelParam._m0[40u]), vec4(_1655, _1656, _1657, 1.0));
        _1709 = dot(vec3(isnan(0.0) ? _1658 : (isnan(_1658) ? 0.0 : max(_1658, 0.0)), isnan(0.0) ? _1661 : (isnan(_1661) ? 0.0 : max(_1661, 0.0)), isnan(0.0) ? _1664 : (isnan(_1664) ? 0.0 : max(_1664, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1700) ? 0.0 : (isnan(0.0) ? _1700 : max(0.0, _1700))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1709 = 1.0;
    }
    float _1713 = (_1709 * cbModelParam._m0[1u].x) + (_1698 * (1.0 - cbModelParam._m0[1u].x));
    float _1723 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _718);
    float _1724 = isnan(_1723) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1723 : min(cbModelParam._m0[25u].z, _1723));
    float _1805;
    float _1807;
    float _1809;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1772 = fma(_946, cbModelParam._m0[13u].z, fma(_942, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _938)) + cbModelParam._m0[13u].w;
        float _1776 = fma(_946, cbModelParam._m0[14u].z, fma(_942, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _938)) + cbModelParam._m0[14u].w;
        float _1780 = fma(_946, cbModelParam._m0[15u].z, fma(_942, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _938)) + cbModelParam._m0[15u].w;
        float _1783 = fma(_887, cbModelParam._m0[13u].z, fma(_886, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _885));
        float _1786 = fma(_887, cbModelParam._m0[14u].z, fma(_886, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _885));
        float _1789 = fma(_887, cbModelParam._m0[15u].z, fma(_886, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _885));
        float _1817;
        if (_1783 > 0.0)
        {
            _1817 = abs((1.0 - _1772) / _1783);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1783 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1772 + 1.0) / _1783);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1817 = frontier_phi_17_15_ladder;
        }
        float _1987;
        if (_1786 > 0.0)
        {
            _1987 = abs((1.0 - _1776) / _1786);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1786 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1776 + 1.0) / _1786);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1987 = frontier_phi_26_22_ladder;
        }
        float _2282;
        if (_1789 > 0.0)
        {
            _2282 = abs((1.0 - _1780) / _1789);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1789 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1780 + 1.0) / _1789);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2282 = frontier_phi_38_33_ladder;
        }
        float _2284 = isnan(_1987) ? _1817 : (isnan(_1817) ? _1987 : min(_1817, _1987));
        float _2285 = isnan(_2282) ? _2284 : (isnan(_2284) ? _2282 : min(_2284, _2282));
        float _2289 = (_2285 * _1783) + _1772;
        float _2290 = (_2285 * _1786) + _1776;
        float _2291 = (_2285 * _1789) + _1780;
        float _2292 = _2285 * 9.9999997473787516355514526367188e-05;
        float _2294 = (-1.0) - _2292;
        float _2296 = _2292 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2291 > _2296) || ((_2291 < _2294) || ((_2290 > _2296) || ((_2290 < _2294) || ((_2289 < _2294) || (_2289 > _2296))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2436 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2291, cbModelParam._m0[9u].z, fma(_2290, cbModelParam._m0[9u].y, _2289 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2291, cbModelParam._m0[10u].z, fma(_2290, cbModelParam._m0[10u].y, _2289 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2291, cbModelParam._m0[11u].z, fma(_2290, cbModelParam._m0[11u].y, _2289 * cbModelParam._m0[11u].x))), _1724);
            frontier_phi_16_38_ladder = _2436.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2436.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2436.x * cbModelParam._m0[1u].y;
        }
        _1805 = frontier_phi_16_38_ladder_2;
        _1807 = frontier_phi_16_38_ladder_1;
        _1809 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1793 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_885, _886, _887), _1724);
        _1805 = _1793.x * cbModelParam._m0[1u].y;
        _1807 = _1793.y * cbModelParam._m0[1u].y;
        _1809 = _1793.z * cbModelParam._m0[1u].y;
    }
    float _1813 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _718);
    float _1814 = isnan(_1813) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1813 : min(cbModelParam._m0[25u].w, _1813));
    float _1904;
    float _1906;
    float _1908;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1868 = fma(_946, cbModelParam._m0[21u].z, fma(_942, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _938)) + cbModelParam._m0[21u].w;
        float _1872 = fma(_946, cbModelParam._m0[22u].z, fma(_942, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _938)) + cbModelParam._m0[22u].w;
        float _1876 = fma(_946, cbModelParam._m0[23u].z, fma(_942, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _938)) + cbModelParam._m0[23u].w;
        float _1879 = fma(_887, cbModelParam._m0[21u].z, fma(_886, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _885));
        float _1882 = fma(_887, cbModelParam._m0[22u].z, fma(_886, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _885));
        float _1885 = fma(_887, cbModelParam._m0[23u].z, fma(_886, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _885));
        float _1992;
        if (_1879 > 0.0)
        {
            _1992 = abs((1.0 - _1868) / _1879);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1879 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1868 + 1.0) / _1879);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1992 = frontier_phi_28_24_ladder;
        }
        float _2309;
        if (_1882 > 0.0)
        {
            _2309 = abs((1.0 - _1872) / _1882);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1882 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1872 + 1.0) / _1882);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2309 = frontier_phi_40_35_ladder;
        }
        float _2636;
        if (_1885 > 0.0)
        {
            _2636 = abs((1.0 - _1876) / _1885);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_1885 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_1876 + 1.0) / _1885);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _2636 = frontier_phi_50_47_ladder;
        }
        float _2638 = isnan(_2309) ? _1992 : (isnan(_1992) ? _2309 : min(_1992, _2309));
        float _2639 = isnan(_2636) ? _2638 : (isnan(_2638) ? _2636 : min(_2638, _2636));
        float _2643 = (_2639 * _1879) + _1868;
        float _2644 = (_2639 * _1882) + _1872;
        float _2645 = (_2639 * _1885) + _1876;
        float _2646 = _2639 * 9.9999997473787516355514526367188e-05;
        float _2647 = (-1.0) - _2646;
        float _2649 = _2646 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_2645 > _2649) || ((_2645 < _2647) || ((_2644 > _2649) || ((_2644 < _2647) || ((_2643 < _2647) || (_2643 > _2649))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2763 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2645, cbModelParam._m0[17u].z, fma(_2644, cbModelParam._m0[17u].y, _2643 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2645, cbModelParam._m0[18u].z, fma(_2644, cbModelParam._m0[18u].y, _2643 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2645, cbModelParam._m0[19u].z, fma(_2644, cbModelParam._m0[19u].y, _2643 * cbModelParam._m0[19u].x))), _1814);
            frontier_phi_25_50_ladder = _2763.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _2763.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _2763.x * cbModelParam._m0[1u].z;
        }
        _1904 = frontier_phi_25_50_ladder_2;
        _1906 = frontier_phi_25_50_ladder_1;
        _1908 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _1888 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_885, _886, _887), _1814);
        _1904 = _1888.x * cbModelParam._m0[1u].z;
        _1906 = _1888.y * cbModelParam._m0[1u].z;
        _1908 = _1888.z * cbModelParam._m0[1u].z;
    }
    float _1920 = ((((1.0 - _906) * ((_893 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_906 * _893)) * _877;
    float _1921 = _1920 * ((cbModelParam._m0[1u].w * (_1904 - _1805)) + _1805);
    float _1922 = _1920 * ((cbModelParam._m0[1u].w * (_1906 - _1807)) + _1807);
    float _1923 = _1920 * ((cbModelParam._m0[1u].w * (_1908 - _1809)) + _1809);
    float _1926 = fma(_1923, cbSceneParam._m0[89u].z, fma(_1922, cbSceneParam._m0[89u].y, _1921 * cbSceneParam._m0[89u].x));
    float _1929 = fma(_1923, cbSceneParam._m0[90u].z, fma(_1922, cbSceneParam._m0[90u].y, _1921 * cbSceneParam._m0[90u].x));
    float _1932 = fma(_1923, cbSceneParam._m0[91u].z, fma(_1922, cbSceneParam._m0[91u].y, _1921 * cbSceneParam._m0[91u].x));
    float _1966 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1970 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1974 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1978 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1979 = _1966 / _1978;
    float _1980 = _1970 / _1978;
    float _1981 = _1974 / _1978;
    float _2128;
    float _2129;
    float _2130;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2008 = ((uint(_1981 > cbSceneParam._m0[59u].y) + uint(_1981 > cbSceneParam._m0[59u].x)) + uint(_1981 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2009 = _2008 + 43u;
        uint _2017 = _2008 + 44u;
        uint _2025 = _2008 + 45u;
        uint _2033 = _2008 + 46u;
        float _2044 = fma(_1978, cbSceneParam._m0[_2009].w, fma(_1974, cbSceneParam._m0[_2009].z, fma(_1970, cbSceneParam._m0[_2009].y, _1966 * cbSceneParam._m0[_2009].x)));
        float _2048 = fma(_1978, cbSceneParam._m0[_2017].w, fma(_1974, cbSceneParam._m0[_2017].z, fma(_1970, cbSceneParam._m0[_2017].y, _1966 * cbSceneParam._m0[_2017].x)));
        float _2056 = fma(_1978, cbSceneParam._m0[_2033].w, fma(_1974, cbSceneParam._m0[_2033].z, fma(_1970, cbSceneParam._m0[_2033].y, _1966 * cbSceneParam._m0[_2033].x)));
        float _2061 = cbSceneParam._m0[33u].z * _2056;
        float _2063 = cbSceneParam._m0[33u].w * _2056;
        float _2066 = fma(_1978, cbSceneParam._m0[_2025].w, fma(_1974, cbSceneParam._m0[_2025].z, fma(_1970, cbSceneParam._m0[_2025].y, _1966 * cbSceneParam._m0[_2025].x))) / _2056;
        float _2114 = (cbSceneParam._m0[33u].x - sqrt(((_1980 * _1980) + (_1979 * _1979)) + (_1981 * _1981))) * cbSceneParam._m0[33u].y;
        float _4487 = isnan(0.0) ? _2114 : (isnan(_2114) ? 0.0 : max(_2114, 0.0));
        float _2121 = (isnan(1.0) ? _4487 : (isnan(_4487) ? 1.0 : min(_4487, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2061 + _2044) / _2056, (_2063 + _2048) / _2056), _2066), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2063 + _2044) / _2056, (_2048 - _2061) / _2056), _2066), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2044 - _2061) / _2056, (_2048 - _2063) / _2056), _2066), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2044 - _2063) / _2056, (_2061 + _2048) / _2056), _2066), 0.0)).x), vec4(0.25)));
        _2128 = 1.0 - (_2121 * cbSceneParam._m0[34u].x);
        _2129 = 1.0 - (_2121 * cbSceneParam._m0[34u].y);
        _2130 = 1.0 - (_2121 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2128 = 1.0;
        _2129 = 1.0;
        _2130 = 1.0;
    }
    float _2194;
    float _2196;
    float _2198;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2182 = fma(_1978, cbSceneParam._m0[63u].w, fma(_1974, cbSceneParam._m0[63u].z, fma(_1970, cbSceneParam._m0[63u].y, _1966 * cbSceneParam._m0[63u].x)));
        float _2183 = fma(_1978, cbSceneParam._m0[60u].w, fma(_1974, cbSceneParam._m0[60u].z, fma(_1970, cbSceneParam._m0[60u].y, _1966 * cbSceneParam._m0[60u].x))) / _2182;
        float _2184 = fma(_1978, cbSceneParam._m0[61u].w, fma(_1974, cbSceneParam._m0[61u].z, fma(_1970, cbSceneParam._m0[61u].y, _1966 * cbSceneParam._m0[61u].x))) / _2182;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_2183 >= cbSceneParam._m0[64u].x) && (_2184 >= cbSceneParam._m0[64u].y)) && (_2183 <= cbSceneParam._m0[64u].z)) && (_2184 <= cbSceneParam._m0[64u].w))
        {
            float _2322 = fma(_1978, cbSceneParam._m0[62u].w, fma(_1974, cbSceneParam._m0[62u].z, fma(_1970, cbSceneParam._m0[62u].y, _1966 * cbSceneParam._m0[62u].x))) / _2182;
            float _2326 = isnan(cbSceneParam._m0[41u].w) ? _2322 : (isnan(_2322) ? cbSceneParam._m0[41u].w : max(_2322, cbSceneParam._m0[41u].w));
            float _2369 = (cbSceneParam._m0[33u].x - sqrt(((_1980 * _1980) + (_1979 * _1979)) + (_1981 * _1981))) * cbSceneParam._m0[33u].y;
            float _4503 = isnan(0.0) ? _2369 : (isnan(_2369) ? 0.0 : max(_2369, 0.0));
            float _2376 = (isnan(1.0) ? _4503 : (isnan(_4503) ? 1.0 : min(_4503, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2183, cbSceneParam._m0[33u].w + _2184), _2326), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2183, _2184 - cbSceneParam._m0[33u].z), _2326), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2183 - cbSceneParam._m0[33u].z, _2184 - cbSceneParam._m0[33u].w), _2326), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2183 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2184), _2326), 0.0)).x), vec4(0.25)));
            float _2380 = 1.0 - (_2376 * cbSceneParam._m0[34u].x);
            float _2381 = 1.0 - (_2376 * cbSceneParam._m0[34u].y);
            float _2382 = 1.0 - (_2376 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_2382) ? _2130 : (isnan(_2130) ? _2382 : min(_2130, _2382));
            frontier_phi_37_36_ladder_1 = isnan(_2381) ? _2129 : (isnan(_2129) ? _2381 : min(_2129, _2381));
            frontier_phi_37_36_ladder_2 = isnan(_2380) ? _2128 : (isnan(_2128) ? _2380 : min(_2128, _2380));
        }
        else
        {
            frontier_phi_37_36_ladder = _2130;
            frontier_phi_37_36_ladder_1 = _2129;
            frontier_phi_37_36_ladder_2 = _2128;
        }
        _2194 = frontier_phi_37_36_ladder_2;
        _2196 = frontier_phi_37_36_ladder_1;
        _2198 = frontier_phi_37_36_ladder;
    }
    else
    {
        _2194 = _2128;
        _2196 = _2129;
        _2198 = _2130;
    }
    uvec4 _2203 = floatBitsToUint(cbInstanceData._m0[_253 + 5u]);
    uint _2205 = _2203.x * 14u;
    uint _2206 = _2205 + 13u;
    float _2213 = _877 + (-1.0);
    float _2218 = (cbLight._m0[_2206].x * _2213) + 1.0;
    float _2219 = (cbLight._m0[_2206].y * _2213) + 1.0;
    float _2220 = (cbLight._m0[_2206].z * _2213) + 1.0;
    float _2221 = (cbLight._m0[_2206].w * _2213) + 1.0;
    uint _2222 = _2205 + 5u;
    float _2228 = isnan(1.0) ? _2219 : (isnan(_2219) ? 1.0 : min(_2219, 1.0));
    uint _2232 = _2205 + 4u;
    float _2241 = isnan(1.0) ? _2218 : (isnan(_2218) ? 1.0 : min(_2218, 1.0));
    uint _2245 = _2205 | 1u;
    float _2256 = dot(vec3(cbLight._m0[_2205].xyz), vec3(_715, _716, _717));
    float _2259 = dot(vec3(cbLight._m0[_2245].xyz), vec3(_715, _716, _717));
    float _4539 = isnan(0.0) ? _2256 : (isnan(_2256) ? 0.0 : max(_2256, 0.0));
    float _4550 = isnan(0.0) ? _2259 : (isnan(_2259) ? 0.0 : max(_2259, 0.0));
    float _2264 = (isnan(1.0) ? _4539 : (isnan(_4539) ? 1.0 : min(_4539, 1.0))) * 0.3183098733425140380859375;
    float _2266 = (isnan(1.0) ? _4550 : (isnan(_4550) ? 1.0 : min(_4550, 1.0))) * 0.3183098733425140380859375;
    float _2273 = ((cbLight._m0[_2222].x * _2228) * _2266) + (((cbLight._m0[_2232].x * _2194) * _2241) * _2264);
    float _2274 = ((_2228 * cbLight._m0[_2222].y) * _2266) + (((cbLight._m0[_2232].y * _2196) * _2241) * _2264);
    float _2275 = ((_2228 * cbLight._m0[_2222].z) * _2266) + (((cbLight._m0[_2232].z * _2198) * _2241) * _2264);
    uvec4 _2279 = floatBitsToUint(cbLight._m0[_2205 + 12u]);
    bool _2281 = _2279.x == 0u;
    float _2383;
    float _2385;
    float _2387;
    if (_2281)
    {
        _2383 = _2273;
        _2385 = _2274;
        _2387 = _2275;
    }
    else
    {
        uint _2391 = _2205 + 6u;
        float _2407 = (dot(vec3(cbLight._m0[_2205 + 2u].xyz), vec3(_715, _716, _717)) * 0.5) + 0.5;
        float _2408 = _2407 * _2407;
        float _4561 = isnan(0.0) ? _2408 : (isnan(_2408) ? 0.0 : max(_2408, 0.0));
        float _2409 = isnan(1.0) ? _4561 : (isnan(_4561) ? 1.0 : min(_4561, 1.0));
        float _2410 = isnan(1.0) ? _2220 : (isnan(_2220) ? 1.0 : min(_2220, 1.0));
        _2383 = (((cbLight._m0[_2391].x * 0.3183098733425140380859375) * _2409) * _2410) + _2273;
        _2385 = (((cbLight._m0[_2391].y * 0.3183098733425140380859375) * _2409) * _2410) + _2274;
        _2387 = (((cbLight._m0[_2391].z * 0.3183098733425140380859375) * _2409) * _2410) + _2275;
    }
    bool _2390 = _2279.y == 0u;
    float _2445;
    float _2447;
    float _2449;
    if (_2390)
    {
        _2445 = _2383;
        _2447 = _2385;
        _2449 = _2387;
    }
    else
    {
        uint _2607 = _2205 + 7u;
        float _2623 = (dot(vec3(cbLight._m0[_2205 + 3u].xyz), vec3(_715, _716, _717)) * 0.5) + 0.5;
        float _2624 = _2623 * _2623;
        float _4577 = isnan(0.0) ? _2624 : (isnan(_2624) ? 0.0 : max(_2624, 0.0));
        float _2625 = isnan(1.0) ? _4577 : (isnan(_4577) ? 1.0 : min(_4577, 1.0));
        float _2626 = isnan(1.0) ? _2221 : (isnan(_2221) ? 1.0 : min(_2221, 1.0));
        _2445 = (((cbLight._m0[_2607].x * 0.3183098733425140380859375) * _2625) * _2626) + _2383;
        _2447 = (((cbLight._m0[_2607].y * 0.3183098733425140380859375) * _2625) * _2626) + _2385;
        _2449 = (((cbLight._m0[_2607].z * 0.3183098733425140380859375) * _2625) * _2626) + _2387;
    }
    uint _2452 = _2205 + 8u;
    float _2465 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2205].w)) * _718) * 0.949999988079071044921875);
    float _2466 = _2465 * _2465;
    float _2467 = cbLight._m0[_2205].x + _794;
    float _2468 = cbLight._m0[_2205].y + _795;
    float _2469 = cbLight._m0[_2205].z + _796;
    float _2473 = inversesqrt(dot(vec3(_2467, _2468, _2469), vec3(_2467, _2468, _2469)));
    float _2474 = _2473 * _2467;
    float _2475 = _2473 * _2468;
    float _2476 = _2473 * _2469;
    float _2477 = dot(vec3(_715, _716, _717), vec3(cbLight._m0[_2205].xyz));
    float _4593 = isnan(0.0) ? _2477 : (isnan(_2477) ? 0.0 : max(_2477, 0.0));
    float _2480 = isnan(1.0) ? _4593 : (isnan(_4593) ? 1.0 : min(_4593, 1.0));
    float _4604 = isnan(0.0) ? _878 : (isnan(_878) ? 0.0 : max(_878, 0.0));
    float _2481 = isnan(1.0) ? _4604 : (isnan(_4604) ? 1.0 : min(_4604, 1.0));
    float _2482 = dot(vec3(_715, _716, _717), vec3(_2474, _2475, _2476));
    float _4615 = isnan(0.0) ? _2482 : (isnan(_2482) ? 0.0 : max(_2482, 0.0));
    float _2485 = isnan(1.0) ? _4615 : (isnan(_4615) ? 1.0 : min(_4615, 1.0));
    float _2486 = dot(vec3(cbLight._m0[_2205].xyz), vec3(_2474, _2475, _2476));
    float _4626 = isnan(0.0) ? _2486 : (isnan(_2486) ? 0.0 : max(_2486, 0.0));
    float _2490 = _2466 * _2466;
    float _2494 = ((_2485 * _2485) * (_2490 + (-1.0))) + 1.0;
    float _2505 = (exp2(log2(1.0 - (isnan(1.0) ? _4626 : (isnan(_4626) ? 1.0 : min(_4626, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2506 = 1.0 - _2466;
    float _2517 = (0.5 / (((_2481 * ((_2480 * _2506) + _2466)) + 9.9999999392252902907785028219223e-09) + (((_2481 * _2506) + _2466) * _2480))) * _2480;
    float _4637 = isnan(0.0) ? _2517 : (isnan(_2517) ? 0.0 : max(_2517, 0.0));
    float _2519 = (isnan(1.0) ? _4637 : (isnan(_4637) ? 1.0 : min(_4637, 1.0))) * (_2490 / ((_2494 * _2494) * 3.141590118408203125));
    uint _2533 = _2205 + 9u;
    float _2544 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2245].w)) * _718) * 0.949999988079071044921875);
    float _2545 = _2544 * _2544;
    float _2546 = cbLight._m0[_2245].x + _794;
    float _2547 = cbLight._m0[_2245].y + _795;
    float _2548 = cbLight._m0[_2245].z + _796;
    float _2552 = inversesqrt(dot(vec3(_2546, _2547, _2548), vec3(_2546, _2547, _2548)));
    float _2553 = _2552 * _2546;
    float _2554 = _2552 * _2547;
    float _2555 = _2552 * _2548;
    float _2556 = dot(vec3(_715, _716, _717), vec3(cbLight._m0[_2245].xyz));
    float _4648 = isnan(0.0) ? _2556 : (isnan(_2556) ? 0.0 : max(_2556, 0.0));
    float _2559 = isnan(1.0) ? _4648 : (isnan(_4648) ? 1.0 : min(_4648, 1.0));
    float _2560 = dot(vec3(_715, _716, _717), vec3(_2553, _2554, _2555));
    float _4659 = isnan(0.0) ? _2560 : (isnan(_2560) ? 0.0 : max(_2560, 0.0));
    float _2563 = isnan(1.0) ? _4659 : (isnan(_4659) ? 1.0 : min(_4659, 1.0));
    float _2564 = dot(vec3(cbLight._m0[_2245].xyz), vec3(_2553, _2554, _2555));
    float _4670 = isnan(0.0) ? _2564 : (isnan(_2564) ? 0.0 : max(_2564, 0.0));
    float _2568 = _2545 * _2545;
    float _2572 = ((_2563 * _2563) * (_2568 + (-1.0))) + 1.0;
    float _2581 = (exp2(log2(1.0 - (isnan(1.0) ? _4670 : (isnan(_4670) ? 1.0 : min(_4670, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2582 = 1.0 - _2545;
    float _2592 = (0.5 / (((_2481 * ((_2559 * _2582) + _2545)) + 9.9999999392252902907785028219223e-09) + (((_2481 * _2582) + _2545) * _2559))) * _2559;
    float _4681 = isnan(0.0) ? _2592 : (isnan(_2592) ? 0.0 : max(_2592, 0.0));
    float _2594 = (isnan(1.0) ? _4681 : (isnan(_4681) ? 1.0 : min(_4681, 1.0))) * (_2568 / ((_2572 * _2572) * 3.141590118408203125));
    float _2604 = (((_2581 * cbLight._m0[_2533].x) * _2594) * _2228) + ((((cbLight._m0[_2452].x * _2194) * _2505) * _2519) * _2241);
    float _2605 = (((_2581 * cbLight._m0[_2533].y) * _2594) * _2228) + ((((cbLight._m0[_2452].y * _2196) * _2505) * _2519) * _2241);
    float _2606 = (((_2581 * cbLight._m0[_2533].z) * _2594) * _2228) + ((((cbLight._m0[_2452].z * _2198) * _2505) * _2519) * _2241);
    float _2662;
    float _2664;
    float _2666;
    if (_2281)
    {
        _2662 = _2604;
        _2664 = _2605;
        _2666 = _2606;
    }
    else
    {
        uint _2668 = _2205 + 2u;
        uint _2672 = _2205 + 10u;
        float _2686 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2668].w)) * _718) * 0.949999988079071044921875);
        float _2687 = _2686 * _2686;
        float _2688 = cbLight._m0[_2668].x + _794;
        float _2689 = cbLight._m0[_2668].y + _795;
        float _2690 = cbLight._m0[_2668].z + _796;
        float _2694 = inversesqrt(dot(vec3(_2688, _2689, _2690), vec3(_2688, _2689, _2690)));
        float _2695 = _2694 * _2688;
        float _2696 = _2694 * _2689;
        float _2697 = _2694 * _2690;
        float _2698 = dot(vec3(_715, _716, _717), vec3(cbLight._m0[_2668].xyz));
        float _4692 = isnan(0.0) ? _2698 : (isnan(_2698) ? 0.0 : max(_2698, 0.0));
        float _2701 = isnan(1.0) ? _4692 : (isnan(_4692) ? 1.0 : min(_4692, 1.0));
        float _2702 = dot(vec3(_715, _716, _717), vec3(_2695, _2696, _2697));
        float _4703 = isnan(0.0) ? _2702 : (isnan(_2702) ? 0.0 : max(_2702, 0.0));
        float _2705 = isnan(1.0) ? _4703 : (isnan(_4703) ? 1.0 : min(_4703, 1.0));
        float _2706 = dot(vec3(cbLight._m0[_2668].xyz), vec3(_2695, _2696, _2697));
        float _4714 = isnan(0.0) ? _2706 : (isnan(_2706) ? 0.0 : max(_2706, 0.0));
        float _2710 = _2687 * _2687;
        float _2714 = ((_2705 * _2705) * (_2710 + (-1.0))) + 1.0;
        float _2723 = (exp2(log2(1.0 - (isnan(1.0) ? _4714 : (isnan(_4714) ? 1.0 : min(_4714, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2724 = 1.0 - _2687;
        float _2734 = (0.5 / (((_2481 * ((_2701 * _2724) + _2687)) + 9.9999999392252902907785028219223e-09) + (((_2481 * _2724) + _2687) * _2701))) * _2701;
        float _4725 = isnan(0.0) ? _2734 : (isnan(_2734) ? 0.0 : max(_2734, 0.0));
        float _2736 = (isnan(1.0) ? _4725 : (isnan(_4725) ? 1.0 : min(_4725, 1.0))) * (_2710 / ((_2714 * _2714) * 3.141590118408203125));
        float _2737 = isnan(1.0) ? _2220 : (isnan(_2220) ? 1.0 : min(_2220, 1.0));
        _2662 = (((_2723 * cbLight._m0[_2672].x) * _2736) * _2737) + _2604;
        _2664 = (((_2723 * cbLight._m0[_2672].y) * _2736) * _2737) + _2605;
        _2666 = (((_2723 * cbLight._m0[_2672].z) * _2736) * _2737) + _2606;
    }
    float _2768;
    float _2770;
    float _2772;
    if (_2390)
    {
        _2768 = _2662;
        _2770 = _2664;
        _2772 = _2666;
    }
    else
    {
        uint _2779 = _2205 + 3u;
        uint _2783 = _2205 + 11u;
        float _2797 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2779].w)) * _718) * 0.949999988079071044921875);
        float _2798 = _2797 * _2797;
        float _2799 = cbLight._m0[_2779].x + _794;
        float _2800 = cbLight._m0[_2779].y + _795;
        float _2801 = cbLight._m0[_2779].z + _796;
        float _2805 = inversesqrt(dot(vec3(_2799, _2800, _2801), vec3(_2799, _2800, _2801)));
        float _2806 = _2805 * _2799;
        float _2807 = _2805 * _2800;
        float _2808 = _2805 * _2801;
        float _2809 = dot(vec3(_715, _716, _717), vec3(cbLight._m0[_2779].xyz));
        float _4741 = isnan(0.0) ? _2809 : (isnan(_2809) ? 0.0 : max(_2809, 0.0));
        float _2812 = isnan(1.0) ? _4741 : (isnan(_4741) ? 1.0 : min(_4741, 1.0));
        float _2813 = dot(vec3(_715, _716, _717), vec3(_2806, _2807, _2808));
        float _4752 = isnan(0.0) ? _2813 : (isnan(_2813) ? 0.0 : max(_2813, 0.0));
        float _2816 = isnan(1.0) ? _4752 : (isnan(_4752) ? 1.0 : min(_4752, 1.0));
        float _2817 = dot(vec3(cbLight._m0[_2779].xyz), vec3(_2806, _2807, _2808));
        float _4763 = isnan(0.0) ? _2817 : (isnan(_2817) ? 0.0 : max(_2817, 0.0));
        float _2821 = _2798 * _2798;
        float _2825 = ((_2816 * _2816) * (_2821 + (-1.0))) + 1.0;
        float _2834 = (exp2(log2(1.0 - (isnan(1.0) ? _4763 : (isnan(_4763) ? 1.0 : min(_4763, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2835 = 1.0 - _2798;
        float _2845 = (0.5 / (((_2481 * ((_2812 * _2835) + _2798)) + 9.9999999392252902907785028219223e-09) + (((_2481 * _2835) + _2798) * _2812))) * _2812;
        float _4774 = isnan(0.0) ? _2845 : (isnan(_2845) ? 0.0 : max(_2845, 0.0));
        float _2847 = (isnan(1.0) ? _4774 : (isnan(_4774) ? 1.0 : min(_4774, 1.0))) * (_2821 / ((_2825 * _2825) * 3.141590118408203125));
        float _2848 = isnan(1.0) ? _2221 : (isnan(_2221) ? 1.0 : min(_2221, 1.0));
        _2768 = (((_2834 * cbLight._m0[_2783].x) * _2847) * _2848) + _2662;
        _2770 = (((_2834 * cbLight._m0[_2783].y) * _2847) * _2848) + _2664;
        _2772 = (((_2834 * cbLight._m0[_2783].z) * _2847) * _2848) + _2666;
    }
    float _2914;
    float _2916;
    float _2918;
    float _2920;
    float _2922;
    float _2924;
    if (_2203.y == 0u)
    {
        uvec4 _2869 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2870 = _2869.x;
        uint _2881 = uint((float(_2869.y) * floor(float(uint(cbSceneParam._m0[85u].y * _815) / _2870))) + floor(float(uint(cbSceneParam._m0[85u].x * _814) / _2870)));
        float _2891 = (log2(_1981 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2892 = isnan(0.0) ? _2891 : (isnan(_2891) ? 0.0 : max(_2891, 0.0));
        uint _2895 = uint(isnan(14.0) ? _2892 : (isnan(_2892) ? 14.0 : min(_2892, 14.0)));
        uvec4 _2900 = texelFetch(g_lightClusterGridBuffer, int(((_2895 << 2u) + (_2881 << 6u)) >> 2u));
        uint _2901 = _2900.x;
        uint _2902 = _2869.z;
        float _2981;
        float _2983;
        float _2985;
        float _2987;
        float _2989;
        float _2991;
        if (((((1u << ((_2902 >> 4u) & 15u)) + 4294967295u) & _2901) == 0u) || ((_2902 & 240u) == 0u))
        {
            _2981 = 0.0;
            _2983 = 0.0;
            _2985 = 0.0;
            _2987 = 0.0;
            _2989 = 0.0;
            _2991 = 0.0;
        }
        else
        {
            float _2982;
            float _2984;
            float _2986;
            float _2988;
            float _2990;
            float _2992;
            float _3134 = 0.0;
            float _3135 = 0.0;
            float _3136 = 0.0;
            float _3137 = 0.0;
            float _3138 = 0.0;
            float _3139 = 0.0;
            uint _3140 = 0u;
            uint _3149;
            bool _3150;
            for (;;)
            {
                _3149 = texelFetch(g_lightClassification, int((((_2895 << 5u) + (_2881 << 9u)) + (_3140 << 2u)) >> 2u)).x;
                _3150 = _3149 == 0u;
                float frontier_phi_71_pred;
                float frontier_phi_71_pred_1;
                float frontier_phi_71_pred_2;
                float frontier_phi_71_pred_3;
                float frontier_phi_71_pred_4;
                float frontier_phi_71_pred_5;
                if (_3150)
                {
                    frontier_phi_71_pred = _3139;
                    frontier_phi_71_pred_1 = _3138;
                    frontier_phi_71_pred_2 = _3137;
                    frontier_phi_71_pred_3 = _3136;
                    frontier_phi_71_pred_4 = _3135;
                    frontier_phi_71_pred_5 = _3134;
                }
                else
                {
                    float _3279;
                    float _3280;
                    float _3281;
                    float _3282;
                    float _3283;
                    float _3284;
                    uint _3285;
                    _3279 = _3134;
                    _3280 = _3135;
                    _3281 = _3136;
                    _3282 = _3137;
                    _3283 = _3138;
                    _3284 = _3139;
                    _3285 = _3149;
                    float _3206;
                    float _3207;
                    float _3208;
                    float _3209;
                    float _3210;
                    float _3211;
                    for (;;)
                    {
                        uint _3289 = uint(findLSB(_3285)) + (_3140 << 5u);
                        uint _3286 = (_3285 + 4294967295u) & _3285;
                        uint _3291 = _3289 * 48u;
                        vec4 _3305 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3291)).x, texelFetch(g_PointLightRenderingBuffer, int(_3291 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3291 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3291 + 3u)).x));
                        uint _3311 = (_3289 * 48u) + 4u;
                        vec4 _3324 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3311)).x, texelFetch(g_PointLightRenderingBuffer, int(_3311 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3311 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3311 + 3u)).x));
                        uint _3330 = (_3289 * 48u) + 8u;
                        vec3 _3341 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3330)).x, texelFetch(g_PointLightRenderingBuffer, int(_3330 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3330 + 2u)).x));
                        float _3345 = _3305.x - _1979;
                        float _3346 = _3305.y - _1980;
                        float _3347 = _3305.z - _1981;
                        float _3348 = dot(vec3(_3345, _3346, _3347), vec3(_3345, _3346, _3347));
                        float _3351 = inversesqrt(_3348);
                        float _3352 = _3351 * _3345;
                        float _3353 = _3351 * _3346;
                        float _3354 = _3351 * _3347;
                        float _3355 = dot(vec3(_833, _836, _839), vec3(_3352, _3353, _3354));
                        float _3360 = 1.0 - (_3348 * _3305.w);
                        float _4800 = isnan(0.0) ? _3360 : (isnan(_3360) ? 0.0 : max(_3360, 0.0));
                        float _3361 = isnan(1.0) ? _4800 : (isnan(_4800) ? 1.0 : min(_4800, 1.0));
                        float _3362 = sqrt(_3348) * _3324.w;
                        float _3365 = 1.39999997615814208984375 / (_3362 + 1.39999997615814208984375);
                        float _3366 = _3365 * _3365;
                        float _3369 = ((1.0 - _3366) * _3355) + _3366;
                        float _3372 = _3362 * _3362;
                        float _3376 = ((isnan(0.0) ? _3369 : (isnan(_3369) ? 0.0 : max(_3369, 0.0))) * _3361) / ((_3372 * 0.699999988079071044921875) + 1.0);
                        float _3380 = (-0.0) - _1979;
                        float _3381 = (-0.0) - _1980;
                        float _3382 = (-0.0) - _1981;
                        float _3386 = inversesqrt(dot(vec3(_3380, _3381, _3382), vec3(_3380, _3381, _3382)));
                        float _3387 = _3386 * _3380;
                        float _3388 = _3386 * _3381;
                        float _3389 = _3386 * _3382;
                        float _3396 = exp2(log2(1.0 / ((_3372 * 3.5) + 5.0)) * 0.25);
                        float _3397 = 1.0 - _893;
                        float _3404 = sqrt(1.0 - ((1.0 - (_3397 * _3397)) * (1.0 - (_3396 * _3396))));
                        float _3405 = _3404 * _3404;
                        float _3406 = _3405 * _3405;
                        float _3407 = _3387 + _3352;
                        float _3408 = _3388 + _3353;
                        float _3409 = _3389 + _3354;
                        float _3413 = inversesqrt(dot(vec3(_3407, _3408, _3409), vec3(_3407, _3408, _3409)));
                        float _3417 = dot(vec3(_833, _836, _839), vec3(_3387, _3388, _3389));
                        float _4816 = isnan(0.0) ? _3417 : (isnan(_3417) ? 0.0 : max(_3417, 0.0));
                        float _3420 = isnan(1.0) ? _4816 : (isnan(_4816) ? 1.0 : min(_4816, 1.0));
                        float _3421 = dot(vec3(_833, _836, _839), vec3(_3413 * _3407, _3413 * _3408, _3413 * _3409));
                        float _4827 = isnan(0.0) ? _3421 : (isnan(_3421) ? 0.0 : max(_3421, 0.0));
                        float _3424 = isnan(1.0) ? _4827 : (isnan(_4827) ? 1.0 : min(_4827, 1.0));
                        float _3428 = ((_3424 * _3424) * (_3406 + (-1.0))) + 1.0;
                        float _3429 = _3365 * _3405;
                        float _3430 = _3429 * _3429;
                        float _3433 = ((1.0 - _3430) * _3355) + _3430;
                        float _4838 = isnan(0.0) ? _3433 : (isnan(_3433) ? 0.0 : max(_3433, 0.0));
                        float _3434 = isnan(1.0) ? _4838 : (isnan(_4838) ? 1.0 : min(_4838, 1.0));
                        float _3435 = 1.0 - _3405;
                        float _3445 = (0.5 / (((_3434 * ((_3420 * _3435) + _3405)) + 9.9999999392252902907785028219223e-09) + (((_3434 * _3435) + _3405) * _3420))) * _3434;
                        float _4849 = isnan(0.0) ? _3445 : (isnan(_3445) ? 0.0 : max(_3445, 0.0));
                        float _3456 = (((_3406 * 3.1415927410125732421875) * (isnan(1.0) ? _4849 : (isnan(_4849) ? 1.0 : min(_4849, 1.0)))) / ((_3428 * _3428) * ((_3372 * 2.1991131305694580078125) + 3.141590118408203125))) * _3361;
                        _3209 = (_3376 * _3324.x) + _3282;
                        _3210 = (_3376 * _3324.y) + _3283;
                        _3211 = (_3376 * _3324.z) + _3284;
                        _3206 = (_3456 * _3341.x) + _3279;
                        _3207 = (_3456 * _3341.y) + _3280;
                        _3208 = (_3456 * _3341.z) + _3281;
                        if (_3286 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3279 = _3206;
                            _3280 = _3207;
                            _3281 = _3208;
                            _3282 = _3209;
                            _3283 = _3210;
                            _3284 = _3211;
                            _3285 = _3286;
                        }
                    }
                    frontier_phi_71_pred = _3211;
                    frontier_phi_71_pred_1 = _3210;
                    frontier_phi_71_pred_2 = _3209;
                    frontier_phi_71_pred_3 = _3208;
                    frontier_phi_71_pred_4 = _3207;
                    frontier_phi_71_pred_5 = _3206;
                }
                _2992 = frontier_phi_71_pred;
                _2990 = frontier_phi_71_pred_1;
                _2988 = frontier_phi_71_pred_2;
                _2986 = frontier_phi_71_pred_3;
                _2984 = frontier_phi_71_pred_4;
                _2982 = frontier_phi_71_pred_5;
                uint _3141 = _3140 + 1u;
                if (_3141 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3134 = _2982;
                    _3135 = _2984;
                    _3136 = _2986;
                    _3137 = _2988;
                    _3138 = _2990;
                    _3139 = _2992;
                    _3140 = _3141;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2981 = _2982;
            _2983 = _2984;
            _2985 = _2986;
            _2987 = _2988;
            _2989 = _2990;
            _2991 = _2992;
        }
        uvec4 _2995 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2996 = _2995.z;
        uint _2998 = (_2996 >> 8u) & 15u;
        float _3102;
        float _3104;
        float _3106;
        float _3108;
        float _3110;
        float _3112;
        if (((4294967295u << _2998) & _2901) == 0u)
        {
            _3102 = _2981;
            _3104 = _2983;
            _3106 = _2985;
            _3108 = _2987;
            _3110 = _2989;
            _3112 = _2991;
        }
        else
        {
            float _3127 = inversesqrt(dot(vec3(_1979, _1980, _1981), vec3(_1979, _1980, _1981)));
            float _3128 = _3127 * _1979;
            float _3129 = _3127 * _1980;
            float _3130 = _3127 * _1981;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_2998 < ((_2996 >> 12u) & 15u))
            {
                float _3103;
                float _3105;
                float _3107;
                float _3109;
                float _3111;
                float _3113;
                float _3262 = _2981;
                float _3263 = _2983;
                float _3264 = _2985;
                float _3265 = _2987;
                float _3266 = _2989;
                float _3267 = _2991;
                uint _3268 = _2998;
                uint _3277;
                bool _3278;
                for (;;)
                {
                    _3277 = texelFetch(g_lightClassification, int((((_2895 << 5u) + (_2881 << 9u)) + (_3268 << 2u)) >> 2u)).x;
                    _3278 = _3277 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    float frontier_phi_82_pred_3;
                    float frontier_phi_82_pred_4;
                    float frontier_phi_82_pred_5;
                    if (_3278)
                    {
                        frontier_phi_82_pred = _3267;
                        frontier_phi_82_pred_1 = _3266;
                        frontier_phi_82_pred_2 = _3265;
                        frontier_phi_82_pred_3 = _3264;
                        frontier_phi_82_pred_4 = _3263;
                        frontier_phi_82_pred_5 = _3262;
                    }
                    else
                    {
                        float _3470;
                        float _3471;
                        float _3472;
                        float _3473;
                        float _3474;
                        float _3475;
                        float _3764;
                        float _3765;
                        float _3766;
                        float _3767;
                        float _3768;
                        float _3769;
                        float _3483 = _3262;
                        float _3484 = _3263;
                        float _3485 = _3264;
                        float _3486 = _3265;
                        float _3487 = _3266;
                        float _3488 = _3267;
                        uint _3489 = _3277;
                        uint _3490;
                        vec4 _3515;
                        float _3516;
                        vec4 _3531;
                        vec3 _3543;
                        vec4 _3558;
                        vec4 _3574;
                        float _3620;
                        bool _3621;
                        for (;;)
                        {
                            uint _3500 = ((_3268 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3489));
                            _3490 = (_3489 + 4294967295u) & _3489;
                            uint _3502 = _3500 * 40u;
                            _3515 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3502)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3502 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3502 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3502 + 3u)).x));
                            _3516 = _3515.w;
                            uint _3518 = (_3500 * 40u) + 4u;
                            _3531 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3518)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3518 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3518 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3518 + 3u)).x));
                            uint _3533 = (_3500 * 40u) + 8u;
                            _3543 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3533)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3533 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3533 + 2u)).x));
                            uint _3545 = (_3500 * 40u) + 16u;
                            _3558 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3545)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3545 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3545 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3545 + 3u)).x));
                            uint _3561 = (_3500 * 40u) + 20u;
                            _3574 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3561)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3561 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3561 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3561 + 3u)).x));
                            uint _3576 = (_3500 * 40u) + 24u;
                            vec4 _3589 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3576)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3576 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3576 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3576 + 3u)).x));
                            uint _3595 = (_3500 * 40u) + 28u;
                            vec4 _3608 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3595)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3595 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3595 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3595 + 3u)).x));
                            _3620 = fma(_1981, _3608.z, fma(_1980, _3608.y, _3608.x * _1979)) + _3608.w;
                            _3621 = !((fma(_1981, _3589.z, fma(_1980, _3589.y, _3589.x * _1979)) + _3589.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_3621)
                            {
                                float _3648 = _3515.x - _1979;
                                float _3649 = _3515.y - _1980;
                                float _3650 = _3515.z - _1981;
                                float _3651 = dot(vec3(_3648, _3649, _3650), vec3(_3648, _3649, _3650));
                                float _3654 = inversesqrt(_3651);
                                float _3655 = _3654 * _3648;
                                float _3656 = _3654 * _3649;
                                float _3657 = _3654 * _3650;
                                float _3661 = 1.0 - (_3651 / (_3516 * _3516));
                                float _4860 = isnan(0.0) ? _3661 : (isnan(_3661) ? 0.0 : max(_3661, 0.0));
                                float _3662 = isnan(1.0) ? _4860 : (isnan(_4860) ? 1.0 : min(_4860, 1.0));
                                float _3666 = sqrt(_3651) * _3531.w;
                                float _3668 = 1.39999997615814208984375 / (_3666 + 1.39999997615814208984375);
                                float _3669 = _3668 * _3668;
                                float _3672 = ((1.0 - _3669) * dot(vec3(_3655, _3656, _3657), vec3(_833, _836, _839))) + _3669;
                                float _3675 = _3666 * _3666;
                                float _3679 = (fma(_1981, _3558.z, fma(_1980, _3558.y, _3558.x * _1979)) + _3558.w) / _3620;
                                float _3680 = (fma(_1981, _3574.z, fma(_1980, _3574.y, _3574.x * _1979)) + _3574.w) / _3620;
                                float _3684 = 1.0 - dot(vec2(_3679, _3680), vec2(_3679, _3680));
                                float _4876 = isnan(0.0) ? _3684 : (isnan(_3684) ? 0.0 : max(_3684, 0.0));
                                float _3685 = isnan(1.0) ? _4876 : (isnan(_4876) ? 1.0 : min(_4876, 1.0));
                                float _3686 = _3685 * (((isnan(0.0) ? _3672 : (isnan(_3672) ? 0.0 : max(_3672, 0.0))) * _3662) / ((_3675 * 0.699999988079071044921875) + 1.0));
                                float _3698 = exp2(log2(1.0 / ((_3675 * 3.5) + 5.0)) * 0.25);
                                float _3699 = 1.0 - _893;
                                float _3706 = sqrt(1.0 - ((1.0 - (_3699 * _3699)) * (1.0 - (_3698 * _3698))));
                                float _3707 = _3706 * _3706;
                                float _3708 = _3707 * _3707;
                                float _3709 = _3655 - _3128;
                                float _3710 = _3656 - _3129;
                                float _3711 = _3657 - _3130;
                                float _3715 = inversesqrt(dot(vec3(_3709, _3710, _3711), vec3(_3709, _3710, _3711)));
                                float _3719 = dot(vec3(_833, _836, _839), vec3((-0.0) - _3128, (-0.0) - _3129, (-0.0) - _3130));
                                float _4887 = isnan(0.0) ? _3719 : (isnan(_3719) ? 0.0 : max(_3719, 0.0));
                                float _3722 = isnan(1.0) ? _4887 : (isnan(_4887) ? 1.0 : min(_4887, 1.0));
                                float _3723 = dot(vec3(_833, _836, _839), vec3(_3715 * _3709, _3715 * _3710, _3715 * _3711));
                                float _4898 = isnan(0.0) ? _3723 : (isnan(_3723) ? 0.0 : max(_3723, 0.0));
                                float _3726 = isnan(1.0) ? _4898 : (isnan(_4898) ? 1.0 : min(_4898, 1.0));
                                float _3730 = ((_3726 * _3726) * (_3708 + (-1.0))) + 1.0;
                                float _3731 = _3668 * _3707;
                                float _3732 = _3731 * _3731;
                                float _3738 = ((1.0 - _3732) * dot(vec3(_833, _836, _839), vec3(_3655, _3656, _3657))) + _3732;
                                float _4909 = isnan(0.0) ? _3738 : (isnan(_3738) ? 0.0 : max(_3738, 0.0));
                                float _3739 = isnan(1.0) ? _4909 : (isnan(_4909) ? 1.0 : min(_4909, 1.0));
                                float _3740 = 1.0 - _3707;
                                float _3750 = (0.5 / (((_3739 * ((_3722 * _3740) + _3707)) + 9.9999999392252902907785028219223e-09) + (((_3739 * _3740) + _3707) * _3722))) * _3739;
                                float _4920 = isnan(0.0) ? _3750 : (isnan(_3750) ? 0.0 : max(_3750, 0.0));
                                float _3760 = (_3685 * _3662) * (((_3708 * 3.1415927410125732421875) * (isnan(1.0) ? _4920 : (isnan(_4920) ? 1.0 : min(_4920, 1.0)))) / ((_3730 * _3730) * ((_3675 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_88_pred = _3686 * _3531.z;
                                frontier_phi_88_pred_1 = _3686 * _3531.y;
                                frontier_phi_88_pred_2 = _3686 * _3531.x;
                                frontier_phi_88_pred_3 = _3760 * _3543.z;
                                frontier_phi_88_pred_4 = _3760 * _3543.y;
                                frontier_phi_88_pred_5 = _3760 * _3543.x;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _3769 = frontier_phi_88_pred;
                            _3768 = frontier_phi_88_pred_1;
                            _3767 = frontier_phi_88_pred_2;
                            _3766 = frontier_phi_88_pred_3;
                            _3765 = frontier_phi_88_pred_4;
                            _3764 = frontier_phi_88_pred_5;
                            _3473 = _3767 + _3486;
                            _3474 = _3768 + _3487;
                            _3475 = _3769 + _3488;
                            _3470 = _3764 + _3483;
                            _3471 = _3765 + _3484;
                            _3472 = _3766 + _3485;
                            if (_3490 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3483 = _3470;
                                _3484 = _3471;
                                _3485 = _3472;
                                _3486 = _3473;
                                _3487 = _3474;
                                _3488 = _3475;
                                _3489 = _3490;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _3475;
                        frontier_phi_82_pred_1 = _3474;
                        frontier_phi_82_pred_2 = _3473;
                        frontier_phi_82_pred_3 = _3472;
                        frontier_phi_82_pred_4 = _3471;
                        frontier_phi_82_pred_5 = _3470;
                    }
                    _3113 = frontier_phi_82_pred;
                    _3111 = frontier_phi_82_pred_1;
                    _3109 = frontier_phi_82_pred_2;
                    _3107 = frontier_phi_82_pred_3;
                    _3105 = frontier_phi_82_pred_4;
                    _3103 = frontier_phi_82_pred_5;
                    uint _3269 = _3268 + 1u;
                    if (_3269 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3262 = _3103;
                        _3263 = _3105;
                        _3264 = _3107;
                        _3265 = _3109;
                        _3266 = _3111;
                        _3267 = _3113;
                        _3268 = _3269;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _3109;
                frontier_phi_63_64_ladder_1 = _3113;
                frontier_phi_63_64_ladder_2 = _3111;
                frontier_phi_63_64_ladder_3 = _3107;
                frontier_phi_63_64_ladder_4 = _3105;
                frontier_phi_63_64_ladder_5 = _3103;
            }
            else
            {
                frontier_phi_63_64_ladder = _2987;
                frontier_phi_63_64_ladder_1 = _2991;
                frontier_phi_63_64_ladder_2 = _2989;
                frontier_phi_63_64_ladder_3 = _2985;
                frontier_phi_63_64_ladder_4 = _2983;
                frontier_phi_63_64_ladder_5 = _2981;
            }
            _3102 = frontier_phi_63_64_ladder_5;
            _3104 = frontier_phi_63_64_ladder_4;
            _3106 = frontier_phi_63_64_ladder_3;
            _3108 = frontier_phi_63_64_ladder;
            _3110 = frontier_phi_63_64_ladder_2;
            _3112 = frontier_phi_63_64_ladder_1;
        }
        float _3117 = isnan(1.0) ? _877 : (isnan(_877) ? 1.0 : min(_877, 1.0));
        _2914 = (_3117 * _3108) + _2445;
        _2916 = (_3117 * _3110) + _2447;
        _2918 = (_3117 * _3112) + _2449;
        _2920 = ((_3102 * 0.039999999105930328369140625) * _3117) + _2768;
        _2922 = ((_3104 * 0.039999999105930328369140625) * _3117) + _2770;
        _2924 = ((_3106 * 0.039999999105930328369140625) * _3117) + _2772;
    }
    else
    {
        _2914 = _2445;
        _2916 = _2447;
        _2918 = _2449;
        _2920 = _2768;
        _2922 = _2770;
        _2924 = _2772;
    }
    float _4936 = isnan(0.0) ? _862 : (isnan(_862) ? 0.0 : max(_862, 0.0));
    float _4947 = isnan(0.0) ? _863 : (isnan(_863) ? 0.0 : max(_863, 0.0));
    float _4958 = isnan(0.0) ? _864 : (isnan(_864) ? 0.0 : max(_864, 0.0));
    float _2941 = ((isnan(1.0) ? _4936 : (isnan(_4936) ? 1.0 : min(_4936, 1.0))) * (_2914 + ((isnan(0.0) ? _1634 : (isnan(_1634) ? 0.0 : max(_1634, 0.0))) * _877))) + ((_2920 + ((isnan(0.0) ? _1926 : (isnan(_1926) ? 0.0 : max(_1926, 0.0))) * _1713)) * cbPerFrame._m0[3u].x);
    float _2942 = ((isnan(1.0) ? _4947 : (isnan(_4947) ? 1.0 : min(_4947, 1.0))) * (_2916 + ((isnan(0.0) ? _1637 : (isnan(_1637) ? 0.0 : max(_1637, 0.0))) * _877))) + ((_2922 + ((isnan(0.0) ? _1929 : (isnan(_1929) ? 0.0 : max(_1929, 0.0))) * _1713)) * cbPerFrame._m0[3u].x);
    float _2943 = ((isnan(1.0) ? _4958 : (isnan(_4958) ? 1.0 : min(_4958, 1.0))) * (_2918 + ((isnan(0.0) ? _1640 : (isnan(_1640) ? 0.0 : max(_1640, 0.0))) * _877))) + ((_2924 + ((isnan(0.0) ? _1932 : (isnan(_1932) ? 0.0 : max(_1932, 0.0))) * _1713)) * cbPerFrame._m0[3u].x);
    uint _2944 = _253 + 6u;
    float _2952 = _814 / cbSceneParam._m0[86u].x;
    float _2953 = _815 / cbSceneParam._m0[86u].y;
    vec4 _2967 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2952, _2953, (log2((isnan(cbSceneParam._m0[77u].w) ? _736 : (isnan(_736) ? cbSceneParam._m0[77u].w : min(_736, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2969 = _2967.x;
    float _2970 = _2967.y;
    float _2971 = _2967.z;
    float _2972 = _2967.w;
    float _3044;
    float _3046;
    float _3048;
    float _3050;
    if (_736 > cbSceneParam._m0[78u].w)
    {
        float _3006 = isnan(_736) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _736 : min(cbSceneParam._m0[80u].w, _736));
        float _3007 = _3006 / _736;
        float _3018 = _3007 * _787;
        float _3019 = _788 * _3007;
        float _3020 = (-0.0) - _3019;
        float _3022 = _3007 * _789;
        float _3024 = (cbSceneParam._m0[77u].w * _3020) / _3006;
        float _3025 = _3024 + cbSceneParam._m0[79u].w;
        float _3026 = cbSceneParam._m0[79u].w - _3019;
        float _3032 = sqrt(((_3018 * _3018) + (_3019 * _3019)) + (_3022 * _3022));
        float _3035 = (1.0 - (cbSceneParam._m0[77u].w / _3006)) * _3032;
        float _3040 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3042 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3219;
        if (abs((_3020 - _3024) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3219 = ((((_3025 > 0.0) ? exp2(_3040 * _3025) : (2.0 - exp2(_3042 * _3025))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3035;
        }
        else
        {
            float _3163 = 1.0 / cbSceneParam._m0[80u].x;
            float _3164 = isnan(_3026) ? _3025 : (isnan(_3025) ? _3026 : max(_3025, _3026));
            float _3165 = isnan(_3026) ? _3025 : (isnan(_3025) ? _3026 : min(_3025, _3026));
            float _3174 = isnan(0.0) ? _3164 : (isnan(_3164) ? 0.0 : min(_3164, 0.0));
            float _3175 = isnan(0.0) ? _3165 : (isnan(_3165) ? 0.0 : min(_3165, 0.0));
            _3219 = ((abs(_3032 / _3020) * cbSceneParam._m0[80u].y) * ((((_3174 - _3175) * 2.0) - ((exp2(_3040 * (isnan(0.0) ? _3164 : (isnan(_3164) ? 0.0 : max(_3164, 0.0)))) - exp2(_3040 * (isnan(0.0) ? _3165 : (isnan(_3165) ? 0.0 : max(_3165, 0.0))))) * _3163)) - ((exp2(_3042 * _3174) - exp2(_3042 * _3175)) * _3163))) + (_3035 * cbSceneParam._m0[80u].z);
        }
        vec4 _3221 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2952, _2953, 1.0), 0.0);
        float _3230 = exp2((_3219 * (-1.44269502162933349609375)) * (1.0 - _3221.w));
        float _3231 = log2(_3230);
        float _3247 = log2(_2972);
        _3044 = (exp2(_3247 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3231 * cbSceneParam._m0[78u].x)) * _3221.x) / cbSceneParam._m0[78u].x)) + _2969;
        _3046 = (exp2(_3247 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3231 * cbSceneParam._m0[78u].y)) * _3221.y) / cbSceneParam._m0[78u].y)) + _2970;
        _3048 = (exp2(_3247 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3231 * cbSceneParam._m0[78u].z)) * _3221.z) / cbSceneParam._m0[78u].z)) + _2971;
        _3050 = _3230 * _2972;
    }
    else
    {
        _3044 = _2969;
        _3046 = _2970;
        _3048 = _2971;
        _3050 = _2972;
    }
    bool _3257;
    vec4 _3060;
    vec4 _3082;
    float _3084;
    float _3088;
    float _3089;
    float _3090;
    float _3091;
    bool _3101;
    for (;;)
    {
        _3060 = cbMatDynParam._m0[0u];
        float _3062 = roundEven(_3060.y);
        bool _3063 = _3062 == 3.0;
        float _3064 = log2(_3050);
        float _3071 = exp2(_3064 * cbSceneParam._m0[78u].x) * _2941;
        float _3072 = exp2(_3064 * cbSceneParam._m0[78u].y) * _2942;
        float _3073 = exp2(_3064 * cbSceneParam._m0[78u].z) * _2943;
        float _3080 = _803 + (-0.5);
        _3082 = cbMtdParam._m0[1u];
        _3084 = _3082.y * _3080;
        float _3087 = (_3062 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3088 = _3087 * (_3063 ? _3071 : (_3071 + (cbSceneParam._m0[72u].w * _3044)));
        _3089 = _3087 * (_3063 ? _3072 : (_3072 + (cbSceneParam._m0[72u].w * _3046)));
        _3090 = _3087 * (_3063 ? _3073 : (_3073 + (cbSceneParam._m0[72u].w * _3048)));
        _3091 = _3080 * 0.999000012874603271484375;
        _3101 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3101)
        {
            if ((cbInstanceData._m0[_253 + 7u].x + _3091) < 0.5)
            {
                _3257 = true;
                break;
            }
        }
        uint _3198 = _852 + uint(_3060.w);
        if ((cbInstanceData._m0[_3198].w < 1.0) && ((cbInstanceData._m0[_3198].w + _3091) < 0.5))
        {
            _3257 = true;
            break;
        }
        if ((_3084 + 1.0) < _3082.x)
        {
            _3257 = true;
            break;
        }
        _3257 = false;
        break;
    }
    float _3461;
    if (_3257)
    {
        discard_state = true;
        _3461 = 0.0;
    }
    else
    {
        _3461 = cbInstanceData._m0[_2944].w;
    }
    SV_Target.x = _3088;
    SV_Target.y = _3089;
    SV_Target.z = _3090;
    SV_Target.w = _3461;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2944].w;
    discard_exit();
}


