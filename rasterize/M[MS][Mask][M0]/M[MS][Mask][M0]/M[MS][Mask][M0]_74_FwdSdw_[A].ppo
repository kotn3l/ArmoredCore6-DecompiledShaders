#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_0;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 13) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_22;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_10;
layout(set = 0, binding = 20) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_6;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1407;
float _4049;
float _4050;
float _4051;
float _4052;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _227 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _228 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _229 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _235 = inversesqrt(dot(vec3(_227, _228, _229), vec3(_227, _228, _229)));
    float _236 = _235 * _227;
    float _237 = _235 * _228;
    float _238 = _235 * _229;
    float _242 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _243 = _242 * NORMAL.x;
    float _244 = _242 * NORMAL.y;
    float _245 = _242 * NORMAL.z;
    float _249 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _250 = _249 * TANGENT.x;
    float _251 = _249 * TANGENT.y;
    float _252 = _249 * TANGENT.z;
    float _263 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _265 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _266 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _4061 = isnan(0.0) ? _263 : (isnan(_263) ? 0.0 : max(_263, 0.0));
    float _4072 = isnan(0.0) ? _265 : (isnan(_265) ? 0.0 : max(_265, 0.0));
    float _4083 = isnan(0.0) ? _266 : (isnan(_266) ? 0.0 : max(_266, 0.0));
    uint _276 = uint(roundEven(NORMAL.w)) * 13u;
    uint _281 = _276 + 1u;
    uint _285 = _276 + 2u;
    float _294 = sqrt(((cbInstanceData._m0[_281].x * cbInstanceData._m0[_281].x) + (cbInstanceData._m0[_276].x * cbInstanceData._m0[_276].x)) + (cbInstanceData._m0[_285].x * cbInstanceData._m0[_285].x));
    float _295 = _294 * TEXCOORD.z;
    float _296 = _294 * TEXCOORD.w;
    vec4 _309 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _295) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _296) + cbTextureTilingScale._m0[13u].w));
    vec4 _332 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _358 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _363 = _358.x * cbMtdParam._m0[11u].x;
    float _364 = _358.y * cbMtdParam._m0[11u].y;
    float _365 = _358.z * cbMtdParam._m0[11u].z;
    vec4 _384 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _295) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _296) + cbTextureTilingScale._m0[5u].w));
    vec4 _403 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _438 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _440 = _438.x;
    float _452 = dot(vec4(_440, _438.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _469 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _403.x) * 2.0) - ((((_440 - _452) * cbMtdParam._m0[24u].z) + _452) * cbMtdParam._m0[23u].x))) + 1.0;
    float _4094 = isnan(0.0) ? _469 : (isnan(_469) ? 0.0 : max(_469, 0.0));
    float _470 = isnan(1.0) ? _4094 : (isnan(_4094) ? 1.0 : min(_4094, 1.0));
    float _477 = (_470 * ((_384.x * cbMtdParam._m0[12u].x) - _363)) + _363;
    float _478 = (_470 * ((_384.y * cbMtdParam._m0[12u].y) - _364)) + _364;
    float _479 = (_470 * ((_384.z * cbMtdParam._m0[12u].z) - _365)) + _365;
    vec4 _496 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _295) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _296) + cbTextureTilingScale._m0[3u].w));
    vec4 _516 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _518 = _516.x;
    float _528 = dot(vec4(_518, _516.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _542 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _403.y) * 2.0) - ((((_518 - _528) * cbMtdParam._m0[24u].z) + _528) * cbMtdParam._m0[20u].w))) + 1.0;
    float _4105 = isnan(0.0) ? _542 : (isnan(_542) ? 0.0 : max(_542, 0.0));
    float _543 = isnan(1.0) ? _4105 : (isnan(_4105) ? 1.0 : min(_4105, 1.0));
    float _553 = (_332.x * cbMtdParam._m0[9u].x) * ((_543 * ((_496.x * cbMtdParam._m0[13u].x) - _477)) + _477);
    float _554 = (_332.y * cbMtdParam._m0[9u].y) * ((_543 * ((_496.y * cbMtdParam._m0[13u].y) - _478)) + _478);
    float _555 = (_332.z * cbMtdParam._m0[9u].z) * ((_543 * ((_496.z * cbMtdParam._m0[13u].z) - _479)) + _479);
    float _559 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _309.x) * _553;
    float _562 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _309.y) * _554;
    float _565 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _309.z) * _555;
    float _573 = (((_553 - _559) * (isnan(1.0) ? _4061 : (isnan(_4061) ? 1.0 : min(_4061, 1.0)))) + _559) * 4.55000019073486328125;
    float _575 = (((_554 - _562) * (isnan(1.0) ? _4072 : (isnan(_4072) ? 1.0 : min(_4072, 1.0)))) + _562) * 4.55000019073486328125;
    float _577 = (((_555 - _565) * (isnan(1.0) ? _4083 : (isnan(_4083) ? 1.0 : min(_4083, 1.0)))) + _565) * 4.55000019073486328125;
    vec4 _594 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _295) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _296) + cbTextureTilingScale._m0[20u].w));
    vec4 _619 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _295) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _296) + cbTextureTilingScale._m0[4u].w));
    vec4 _636 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _638 = _636.x;
    float _639 = _636.y;
    float _640 = _636.z;
    float _647 = ((_619.x - _638) * _470) + _638;
    float _648 = ((_619.y - _639) * _470) + _639;
    float _649 = ((_619.z - _640) * _470) + _640;
    vec4 _661 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _295) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _296) + cbTextureTilingScale._m0[2u].w));
    float _674 = ((_661.z - _649) * _543) + _649;
    float _677 = ((((_661.x - _647) * _543) + _647) * 2.0) + (-1.0);
    float _678 = ((((_661.y - _648) * _543) + _648) * 2.0) + (-1.0);
    float _679 = dot(vec2(_677, _678), vec2(_677, _678));
    float _4116 = isnan(0.0) ? _679 : (isnan(_679) ? 0.0 : max(_679, 0.0));
    float _684 = sqrt(1.0 - (isnan(1.0) ? _4116 : (isnan(_4116) ? 1.0 : min(_4116, 1.0))));
    vec4 _702 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _714 = (_677 + ((((_594.x * 2.0) + (-1.0)) * TEXCOORD_11.x) * cbMtdParam._m0[20u].x)) + (((_702.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _715 = (_678 + ((((_594.y * 2.0) + (-1.0)) * TEXCOORD_11.y) * cbMtdParam._m0[20u].x)) + (((_702.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _718 = fma(_684, _243, fma(_715, _250, _714 * _236));
    float _721 = fma(_684, _244, fma(_715, _251, _714 * _237));
    float _724 = fma(_684, _245, fma(_715, _252, _714 * _238));
    float _728 = inversesqrt(dot(vec3(_718, _721, _724), vec3(_718, _721, _724)));
    vec4 _755 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _295) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _296) + cbTextureTilingScale._m0[11u].w));
    float _757 = _755.x;
    float _758 = 1.0 - _757;
    float _764 = (cbMtdParam._m0[19u].x + dot(vec4(_728 * _718, _728 * _721, _728 * _724, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_757 - _758) * cbMtdParam._m0[24u].w) + _758) * cbMtdParam._m0[21u].z);
    float _4127 = isnan(0.0) ? _764 : (isnan(_764) ? 0.0 : max(_764, 0.0));
    float _765 = isnan(1.0) ? _4127 : (isnan(_4127) ? 1.0 : min(_4127, 1.0));
    float _772 = (_765 * (cbMtdParam._m0[17u].x - _573)) + _573;
    float _773 = (_765 * (cbMtdParam._m0[17u].y - _575)) + _575;
    float _774 = (_765 * (cbMtdParam._m0[17u].z - _577)) + _577;
    float _779 = (((_594.z - _674) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _674;
    float _783 = ((_702.z - _779) * cbMtdParam._m0[19u].w) + _779;
    vec4 _796 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _295) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _296) + cbTextureTilingScale._m0[15u].w));
    float _803 = (_796.x * 2.0) + (-1.0);
    float _804 = (_796.y * 2.0) + (-1.0);
    float _805 = dot(vec2(_803, _804), vec2(_803, _804));
    float _4138 = isnan(0.0) ? _805 : (isnan(_805) ? 0.0 : max(_805, 0.0));
    float _813 = ((_796.z - _783) * _765) + _783;
    float _823 = ((sqrt(1.0 - (isnan(1.0) ? _4138 : (isnan(_4138) ? 1.0 : min(_4138, 1.0)))) - _684) * _765) + _684;
    float _826 = (((_803 - _714) * _765) + _714) + (cbMtdParam._m0[21u].x * _714);
    float _827 = (((_804 - _715) * _765) + _715) + (cbMtdParam._m0[21u].x * _715);
    float _831 = cbMtdParam._m0[22u].x + _702.w;
    float _834 = fma(_823, _243, fma(_827, _250, _826 * _236));
    float _837 = fma(_823, _244, fma(_827, _251, _826 * _237));
    float _840 = fma(_823, _245, fma(_827, _252, _826 * _238));
    float _844 = inversesqrt(dot(vec3(_834, _837, _840), vec3(_834, _837, _840)));
    float _845 = _844 * _834;
    float _846 = _844 * _837;
    float _847 = _844 * _840;
    float _4149 = isnan(0.0) ? _813 : (isnan(_813) ? 0.0 : max(_813, 0.0));
    float _848 = isnan(1.0) ? _4149 : (isnan(_4149) ? 1.0 : min(_4149, 1.0));
    float _4160 = isnan(0.0) ? _831 : (isnan(_831) ? 0.0 : max(_831, 0.0));
    float _4171 = isnan(0.0) ? _772 : (isnan(_772) ? 0.0 : max(_772, 0.0));
    float _4182 = isnan(0.0) ? _773 : (isnan(_773) ? 0.0 : max(_773, 0.0));
    float _4193 = isnan(0.0) ? _774 : (isnan(_774) ? 0.0 : max(_774, 0.0));
    float _866 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _907 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _917 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _907);
    float _918 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _907);
    float _919 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _907);
    float _923 = inversesqrt(dot(vec3(_917, _918, _919), vec3(_917, _918, _919)));
    float _924 = _917 * _923;
    float _925 = _918 * _923;
    float _926 = _919 * _923;
    vec4 _931 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _933 = _931.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1087 = sqrt(((_917 * _917) + (_918 * _918)) + (_919 * _919));
        float _1093 = (cbMatDynParam._m0[5u].x * _1087) + cbMatDynParam._m0[5u].y;
        float _4204 = isnan(0.0) ? _1093 : (isnan(_1093) ? 0.0 : max(_1093, 0.0));
        float _1094 = isnan(1.0) ? _4204 : (isnan(_4204) ? 1.0 : min(_4204, 1.0));
        float _1098 = (cbMatDynParam._m0[5u].z * _1087) + cbMatDynParam._m0[5u].w;
        float _4215 = isnan(0.0) ? _1098 : (isnan(_1098) ? 0.0 : max(_1098, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4215 : (isnan(_4215) ? 1.0 : min(_4215, 1.0))) - _1094)) + _1094) < ((_933 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _944 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _945 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _963 = fma(_847, cbSceneParam._m0[5u].z, fma(_846, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _845));
    float _966 = fma(_847, cbSceneParam._m0[6u].z, fma(_846, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _845));
    float _969 = fma(_847, cbSceneParam._m0[7u].z, fma(_846, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _845));
    uint _982 = _276 + 9u;
    uint _983 = _982 + uint(cbMatDynParam._m0[0u].w);
    float _989 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4171 : (isnan(_4171) ? 1.0 : min(_4171, 1.0)))) * cbInstanceData._m0[_983].x;
    float _990 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4182 : (isnan(_4182) ? 1.0 : min(_4182, 1.0)))) * cbInstanceData._m0[_983].y;
    float _991 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4193 : (isnan(_4193) ? 1.0 : min(_4193, 1.0)))) * cbInstanceData._m0[_983].z;
    float _4226 = isnan(0.0) ? _989 : (isnan(_989) ? 0.0 : max(_989, 0.0));
    float _992 = isnan(1.0) ? _4226 : (isnan(_4226) ? 1.0 : min(_4226, 1.0));
    float _4237 = isnan(0.0) ? _990 : (isnan(_990) ? 0.0 : max(_990, 0.0));
    float _993 = isnan(1.0) ? _4237 : (isnan(_4237) ? 1.0 : min(_4237, 1.0));
    float _4248 = isnan(0.0) ? _991 : (isnan(_991) ? 0.0 : max(_991, 0.0));
    float _994 = isnan(1.0) ? _4248 : (isnan(_4248) ? 1.0 : min(_4248, 1.0));
    vec4 _1003 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _944, cbSceneParam._m0[86u].y * _945));
    float _1007 = ((isnan(1.0) ? _4160 : (isnan(_4160) ? 1.0 : min(_4160, 1.0))) * TEXCOORD_5.w) * _1003.x;
    float _1008 = dot(vec3(_845, _846, _847), vec3(_924, _925, _926));
    float _1011 = _1008 * 2.0;
    float _1015 = (_1011 * _845) - _924;
    float _1016 = (_1011 * _846) - _925;
    float _1017 = (_1011 * _847) - _926;
    float _1021 = abs(dot(vec3(_924, _925, _926), vec3(_845, _846, _847)));
    float _4259 = isnan(0.0) ? _1021 : (isnan(_1021) ? 0.0 : max(_1021, 0.0));
    float _1023 = sqrt(_848);
    float _1036 = exp2((_1023 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4259 : (isnan(_4259) ? 1.0 : min(_4259, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1023 * 3.0));
    float _1068 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1072 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1076 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1406;
    float _1408;
    float _1409;
    float _1410;
    float _1411;
    float _1412;
    float _1413;
    float _1414;
    float _1415;
    float _1416;
    float _1417;
    float _1418;
    float _1419;
    float _1420;
    float _1421;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1131 = fma(_1076, cbModelParam._m0[26u].z, fma(_1072, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1068));
        float _1135 = fma(_1076, cbModelParam._m0[27u].z, fma(_1072, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1068));
        float _1139 = fma(_1076, cbModelParam._m0[28u].z, fma(_1072, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1068));
        float _1164 = _1068 + _845;
        float _1165 = _1072 + _846;
        float _1166 = _1076 + _847;
        float _1176 = fma(_1166, cbModelParam._m0[26u].z, fma(_1165, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1164)) - _1131;
        float _1177 = fma(_1166, cbModelParam._m0[27u].z, fma(_1165, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1164)) - _1135;
        float _1178 = fma(_1166, cbModelParam._m0[28u].z, fma(_1165, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1164)) - _1139;
        float _1182 = inversesqrt(dot(vec3(_1176, _1177, _1178), vec3(_1176, _1177, _1178)));
        float _1195 = ((_1182 * _1176) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1131 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1196 = ((_1182 * _1177) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1135 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1197 = ((_1182 * _1178) / cbModelParam._m0[34u].z) + ((((((_1139 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1200 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1195, _1196, _1197), 0.0);
        vec4 _1207 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1195, _1196, _1197), 0.0);
        vec4 _1214 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1195, _1196, _1197), 0.0);
        vec4 _1221 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1195, _1196, _1197), 0.0);
        float _1234 = exp2((_1200.w + (-0.5)) * 20.0) * 2.0;
        float _1235 = _1234 * (_1200.x + (-0.5));
        float _1236 = _1234 * (_1200.y + (-0.5));
        float _1237 = _1234 * (_1200.z + (-0.5));
        float _1244 = exp2((_1207.w + (-0.5)) * 20.0) * 2.0;
        float _1245 = _1244 * (_1207.x + (-0.5));
        float _1246 = _1244 * (_1207.y + (-0.5));
        float _1247 = _1244 * (_1207.z + (-0.5));
        float _1254 = exp2((_1214.w + (-0.5)) * 20.0) * 2.0;
        float _1255 = _1254 * (_1214.x + (-0.5));
        float _1256 = _1254 * (_1214.y + (-0.5));
        float _1257 = _1254 * (_1214.z + (-0.5));
        float _1264 = exp2((_1221.w + (-0.5)) * 20.0) * 2.0;
        float _1265 = _1264 * (_1221.x + (-0.5));
        float _1266 = _1264 * (_1221.y + (-0.5));
        float _1267 = _1264 * (_1221.z + (-0.5));
        float _1268 = isnan(0.0) ? _1265 : (isnan(_1265) ? 0.0 : max(_1265, 0.0));
        float _1269 = isnan(0.0) ? _1266 : (isnan(_1266) ? 0.0 : max(_1266, 0.0));
        float _1270 = isnan(0.0) ? _1267 : (isnan(_1267) ? 0.0 : max(_1267, 0.0));
        float _1271 = _1235 * 0.5;
        float _1272 = _1245 * 0.5;
        float _1273 = _1255 * 0.5;
        float _1274 = dot(vec3(_1271, _1272, _1273), vec3(_1271, _1272, _1273));
        float _1279 = (_1274 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1274);
        float _1288 = (dot(vec3(_845, _846, _847), vec3(_1279 * _1271, _1279 * _1272, _1279 * _1273)) + 1.0) * 0.5;
        float _4285 = isnan(0.0) ? _1288 : (isnan(_1288) ? 0.0 : max(_1288, 0.0));
        float _1298 = sqrt(((_1272 * _1272) + (_1271 * _1271)) + (_1273 * _1273)) / (_1268 + 9.9999997473787516355514526367188e-06);
        float _4296 = isnan(0.0) ? _1298 : (isnan(_1298) ? 0.0 : max(_1298, 0.0));
        float _1299 = isnan(1.0) ? _4296 : (isnan(_4296) ? 1.0 : min(_4296, 1.0));
        float _1300 = _1299 * 2.0;
        float _1304 = (1.0 - _1299) / (_1299 + 1.0);
        float _4307 = isnan(0.0) ? _1304 : (isnan(_1304) ? 0.0 : max(_1304, 0.0));
        float _1305 = isnan(1.0) ? _4307 : (isnan(_4307) ? 1.0 : min(_4307, 1.0));
        float _1314 = ((((1.0 - _1305) * (_1300 + 2.0)) * exp2(log2(isnan(1.0) ? _4285 : (isnan(_4285) ? 1.0 : min(_4285, 1.0))) * (_1300 + 1.0))) + _1305) * _1268;
        float _1315 = _1236 * 0.5;
        float _1316 = _1246 * 0.5;
        float _1317 = _1256 * 0.5;
        float _1318 = dot(vec3(_1315, _1316, _1317), vec3(_1315, _1316, _1317));
        float _1323 = (_1318 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1318);
        float _1331 = (dot(vec3(_845, _846, _847), vec3(_1323 * _1315, _1323 * _1316, _1323 * _1317)) + 1.0) * 0.5;
        float _4318 = isnan(0.0) ? _1331 : (isnan(_1331) ? 0.0 : max(_1331, 0.0));
        float _1340 = sqrt(((_1316 * _1316) + (_1315 * _1315)) + (_1317 * _1317)) / (_1269 + 9.9999997473787516355514526367188e-06);
        float _4329 = isnan(0.0) ? _1340 : (isnan(_1340) ? 0.0 : max(_1340, 0.0));
        float _1341 = isnan(1.0) ? _4329 : (isnan(_4329) ? 1.0 : min(_4329, 1.0));
        float _1342 = _1341 * 2.0;
        float _1346 = (1.0 - _1341) / (_1341 + 1.0);
        float _4340 = isnan(0.0) ? _1346 : (isnan(_1346) ? 0.0 : max(_1346, 0.0));
        float _1347 = isnan(1.0) ? _4340 : (isnan(_4340) ? 1.0 : min(_4340, 1.0));
        float _1356 = ((((1.0 - _1347) * (_1342 + 2.0)) * exp2(log2(isnan(1.0) ? _4318 : (isnan(_4318) ? 1.0 : min(_4318, 1.0))) * (_1342 + 1.0))) + _1347) * _1269;
        float _1357 = _1237 * 0.5;
        float _1358 = _1247 * 0.5;
        float _1359 = _1257 * 0.5;
        float _1360 = dot(vec3(_1357, _1358, _1359), vec3(_1357, _1358, _1359));
        float _1365 = (_1360 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1360);
        float _1373 = (dot(vec3(_845, _846, _847), vec3(_1365 * _1357, _1365 * _1358, _1365 * _1359)) + 1.0) * 0.5;
        float _4351 = isnan(0.0) ? _1373 : (isnan(_1373) ? 0.0 : max(_1373, 0.0));
        float _1382 = sqrt(((_1358 * _1358) + (_1357 * _1357)) + (_1359 * _1359)) / (_1270 + 9.9999997473787516355514526367188e-06);
        float _4362 = isnan(0.0) ? _1382 : (isnan(_1382) ? 0.0 : max(_1382, 0.0));
        float _1383 = isnan(1.0) ? _4362 : (isnan(_4362) ? 1.0 : min(_4362, 1.0));
        float _1384 = _1383 * 2.0;
        float _1388 = (1.0 - _1383) / (_1383 + 1.0);
        float _4373 = isnan(0.0) ? _1388 : (isnan(_1388) ? 0.0 : max(_1388, 0.0));
        float _1389 = isnan(1.0) ? _4373 : (isnan(_4373) ? 1.0 : min(_4373, 1.0));
        float _1398 = ((((1.0 - _1389) * (_1384 + 2.0)) * exp2(log2(isnan(1.0) ? _4351 : (isnan(_4351) ? 1.0 : min(_4351, 1.0))) * (_1384 + 1.0))) + _1389) * _1270;
        _1406 = _1237;
        _1408 = _1236;
        _1409 = _1235;
        _1410 = _1247;
        _1411 = _1246;
        _1412 = _1245;
        _1413 = _1257;
        _1414 = _1256;
        _1415 = _1255;
        _1416 = _1270;
        _1417 = _1269;
        _1418 = _1268;
        _1419 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1314 : (isnan(_1314) ? 0.0 : max(_1314, 0.0)));
        _1420 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1356 : (isnan(_1356) ? 0.0 : max(_1356, 0.0)));
        _1421 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1398 : (isnan(_1398) ? 0.0 : max(_1398, 0.0)));
    }
    else
    {
        _1406 = _1407;
        _1408 = _1407;
        _1409 = _1407;
        _1410 = _1407;
        _1411 = _1407;
        _1412 = _1407;
        _1413 = _1407;
        _1414 = _1407;
        _1415 = _1407;
        _1416 = _1407;
        _1417 = _1407;
        _1418 = _1407;
        _1419 = 0.0;
        _1420 = 0.0;
        _1421 = 0.0;
    }
    float _1717;
    float _1718;
    float _1719;
    float _1720;
    float _1721;
    float _1722;
    float _1723;
    float _1724;
    float _1725;
    float _1726;
    float _1727;
    float _1728;
    float _1729;
    float _1730;
    float _1731;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1448 = fma(_1076, cbModelParam._m0[30u].z, fma(_1072, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1068));
        float _1452 = fma(_1076, cbModelParam._m0[31u].z, fma(_1072, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1068));
        float _1456 = fma(_1076, cbModelParam._m0[32u].z, fma(_1072, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1068));
        float _1479 = _1068 + _845;
        float _1480 = _1072 + _846;
        float _1481 = _1076 + _847;
        float _1491 = fma(_1481, cbModelParam._m0[30u].z, fma(_1480, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1479)) - _1448;
        float _1492 = fma(_1481, cbModelParam._m0[31u].z, fma(_1480, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1479)) - _1452;
        float _1493 = fma(_1481, cbModelParam._m0[32u].z, fma(_1480, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1479)) - _1456;
        float _1497 = inversesqrt(dot(vec3(_1491, _1492, _1493), vec3(_1491, _1492, _1493)));
        float _1510 = ((_1497 * _1491) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1448 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1511 = ((_1497 * _1492) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1452 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1512 = ((_1497 * _1493) / cbModelParam._m0[35u].z) + ((((((_1456 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1514 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1510, _1511, _1512), 0.0);
        vec4 _1521 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1510, _1511, _1512), 0.0);
        vec4 _1528 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1510, _1511, _1512), 0.0);
        vec4 _1535 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1510, _1511, _1512), 0.0);
        float _1547 = exp2((_1514.w + (-0.5)) * 20.0) * 2.0;
        float _1548 = _1547 * (_1514.x + (-0.5));
        float _1549 = _1547 * (_1514.y + (-0.5));
        float _1550 = _1547 * (_1514.z + (-0.5));
        float _1557 = exp2((_1521.w + (-0.5)) * 20.0) * 2.0;
        float _1558 = _1557 * (_1521.x + (-0.5));
        float _1559 = _1557 * (_1521.y + (-0.5));
        float _1560 = _1557 * (_1521.z + (-0.5));
        float _1567 = exp2((_1528.w + (-0.5)) * 20.0) * 2.0;
        float _1568 = _1567 * (_1528.x + (-0.5));
        float _1569 = _1567 * (_1528.y + (-0.5));
        float _1570 = _1567 * (_1528.z + (-0.5));
        float _1577 = exp2((_1535.w + (-0.5)) * 20.0) * 2.0;
        float _1578 = _1577 * (_1535.x + (-0.5));
        float _1579 = _1577 * (_1535.y + (-0.5));
        float _1580 = _1577 * (_1535.z + (-0.5));
        float _1581 = isnan(0.0) ? _1578 : (isnan(_1578) ? 0.0 : max(_1578, 0.0));
        float _1582 = isnan(0.0) ? _1579 : (isnan(_1579) ? 0.0 : max(_1579, 0.0));
        float _1583 = isnan(0.0) ? _1580 : (isnan(_1580) ? 0.0 : max(_1580, 0.0));
        float _1584 = _1548 * 0.5;
        float _1585 = _1558 * 0.5;
        float _1586 = _1568 * 0.5;
        float _1587 = dot(vec3(_1584, _1585, _1586), vec3(_1584, _1585, _1586));
        float _1592 = (_1587 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1587);
        float _1600 = (dot(vec3(_845, _846, _847), vec3(_1592 * _1584, _1592 * _1585, _1592 * _1586)) + 1.0) * 0.5;
        float _4414 = isnan(0.0) ? _1600 : (isnan(_1600) ? 0.0 : max(_1600, 0.0));
        float _1609 = sqrt(((_1585 * _1585) + (_1584 * _1584)) + (_1586 * _1586)) / (_1581 + 9.9999997473787516355514526367188e-06);
        float _4425 = isnan(0.0) ? _1609 : (isnan(_1609) ? 0.0 : max(_1609, 0.0));
        float _1610 = isnan(1.0) ? _4425 : (isnan(_4425) ? 1.0 : min(_4425, 1.0));
        float _1611 = _1610 * 2.0;
        float _1615 = (1.0 - _1610) / (_1610 + 1.0);
        float _4436 = isnan(0.0) ? _1615 : (isnan(_1615) ? 0.0 : max(_1615, 0.0));
        float _1616 = isnan(1.0) ? _4436 : (isnan(_4436) ? 1.0 : min(_4436, 1.0));
        float _1625 = ((((1.0 - _1616) * (_1611 + 2.0)) * exp2(log2(isnan(1.0) ? _4414 : (isnan(_4414) ? 1.0 : min(_4414, 1.0))) * (_1611 + 1.0))) + _1616) * _1581;
        float _1626 = _1549 * 0.5;
        float _1627 = _1559 * 0.5;
        float _1628 = _1569 * 0.5;
        float _1629 = dot(vec3(_1626, _1627, _1628), vec3(_1626, _1627, _1628));
        float _1634 = (_1629 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1629);
        float _1642 = (dot(vec3(_845, _846, _847), vec3(_1634 * _1626, _1634 * _1627, _1634 * _1628)) + 1.0) * 0.5;
        float _4447 = isnan(0.0) ? _1642 : (isnan(_1642) ? 0.0 : max(_1642, 0.0));
        float _1651 = sqrt(((_1627 * _1627) + (_1626 * _1626)) + (_1628 * _1628)) / (_1582 + 9.9999997473787516355514526367188e-06);
        float _4458 = isnan(0.0) ? _1651 : (isnan(_1651) ? 0.0 : max(_1651, 0.0));
        float _1652 = isnan(1.0) ? _4458 : (isnan(_4458) ? 1.0 : min(_4458, 1.0));
        float _1653 = _1652 * 2.0;
        float _1657 = (1.0 - _1652) / (_1652 + 1.0);
        float _4469 = isnan(0.0) ? _1657 : (isnan(_1657) ? 0.0 : max(_1657, 0.0));
        float _1658 = isnan(1.0) ? _4469 : (isnan(_4469) ? 1.0 : min(_4469, 1.0));
        float _1667 = ((((1.0 - _1658) * (_1653 + 2.0)) * exp2(log2(isnan(1.0) ? _4447 : (isnan(_4447) ? 1.0 : min(_4447, 1.0))) * (_1653 + 1.0))) + _1658) * _1582;
        float _1668 = _1550 * 0.5;
        float _1669 = _1560 * 0.5;
        float _1670 = _1570 * 0.5;
        float _1671 = dot(vec3(_1668, _1669, _1670), vec3(_1668, _1669, _1670));
        float _1676 = (_1671 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1671);
        float _1684 = (dot(vec3(_845, _846, _847), vec3(_1676 * _1668, _1676 * _1669, _1676 * _1670)) + 1.0) * 0.5;
        float _4480 = isnan(0.0) ? _1684 : (isnan(_1684) ? 0.0 : max(_1684, 0.0));
        float _1693 = sqrt(((_1669 * _1669) + (_1668 * _1668)) + (_1670 * _1670)) / (_1583 + 9.9999997473787516355514526367188e-06);
        float _4491 = isnan(0.0) ? _1693 : (isnan(_1693) ? 0.0 : max(_1693, 0.0));
        float _1694 = isnan(1.0) ? _4491 : (isnan(_4491) ? 1.0 : min(_4491, 1.0));
        float _1695 = _1694 * 2.0;
        float _1699 = (1.0 - _1694) / (_1694 + 1.0);
        float _4502 = isnan(0.0) ? _1699 : (isnan(_1699) ? 0.0 : max(_1699, 0.0));
        float _1700 = isnan(1.0) ? _4502 : (isnan(_4502) ? 1.0 : min(_4502, 1.0));
        float _1709 = ((((1.0 - _1700) * (_1695 + 2.0)) * exp2(log2(isnan(1.0) ? _4480 : (isnan(_4480) ? 1.0 : min(_4480, 1.0))) * (_1695 + 1.0))) + _1700) * _1583;
        _1717 = _1550;
        _1718 = _1549;
        _1719 = _1548;
        _1720 = _1560;
        _1721 = _1559;
        _1722 = _1558;
        _1723 = _1570;
        _1724 = _1569;
        _1725 = _1568;
        _1726 = _1583;
        _1727 = _1582;
        _1728 = _1581;
        _1729 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1625 : (isnan(_1625) ? 0.0 : max(_1625, 0.0)));
        _1730 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1667 : (isnan(_1667) ? 0.0 : max(_1667, 0.0)));
        _1731 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1709 : (isnan(_1709) ? 0.0 : max(_1709, 0.0)));
    }
    else
    {
        _1717 = _1407;
        _1718 = _1407;
        _1719 = _1407;
        _1720 = _1407;
        _1721 = _1407;
        _1722 = _1407;
        _1723 = _1407;
        _1724 = _1407;
        _1725 = _1407;
        _1726 = _1407;
        _1727 = _1407;
        _1728 = _1407;
        _1729 = 0.0;
        _1730 = 0.0;
        _1731 = 0.0;
    }
    float _1741 = (cbModelParam._m0[1u].x * (_1729 - _1419)) + _1419;
    float _1742 = (cbModelParam._m0[1u].x * (_1730 - _1420)) + _1420;
    float _1743 = (cbModelParam._m0[1u].x * (_1731 - _1421)) + _1421;
    float _1764 = fma(_1743, cbSceneParam._m0[89u].z, fma(_1742, cbSceneParam._m0[89u].y, _1741 * cbSceneParam._m0[89u].x));
    float _1767 = fma(_1743, cbSceneParam._m0[90u].z, fma(_1742, cbSceneParam._m0[90u].y, _1741 * cbSceneParam._m0[90u].x));
    float _1770 = fma(_1743, cbSceneParam._m0[91u].z, fma(_1742, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1741));
    float _1785 = _1015 * 0.5;
    float _1786 = _1016 * 0.5;
    float _1787 = _1017 * 0.5;
    float _1788 = dot(vec4(_1785, _1786, _1787, 1.0), vec4(_1719, _1722, _1725, _1728));
    float _1791 = dot(vec4(_1785, _1786, _1787, 1.0), vec4(_1718, _1721, _1724, _1727));
    float _1794 = dot(vec4(_1785, _1786, _1787, 1.0), vec4(_1717, _1720, _1723, _1726));
    float _1828;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1801 = dot(vec4(_1785, _1786, _1787, 1.0), vec4(_1406, _1410, _1413, _1416));
        float _1805 = dot(vec4(_1785, _1786, _1787, 1.0), vec4(_1408, _1411, _1414, _1417));
        float _1809 = dot(vec4(_1785, _1786, _1787, 1.0), vec4(_1409, _1412, _1415, _1418));
        float _1816 = dot(vec4(cbModelParam._m0[39u]), vec4(_1785, _1786, _1787, 1.0));
        _1828 = dot(vec3(isnan(0.0) ? _1809 : (isnan(_1809) ? 0.0 : max(_1809, 0.0)), isnan(0.0) ? _1805 : (isnan(_1805) ? 0.0 : max(_1805, 0.0)), isnan(0.0) ? _1801 : (isnan(_1801) ? 0.0 : max(_1801, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1816) ? 0.0 : (isnan(0.0) ? _1816 : max(0.0, _1816))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1828 = 1.0;
    }
    float _1839;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1830 = dot(vec4(cbModelParam._m0[40u]), vec4(_1785, _1786, _1787, 1.0));
        _1839 = dot(vec3(isnan(0.0) ? _1788 : (isnan(_1788) ? 0.0 : max(_1788, 0.0)), isnan(0.0) ? _1791 : (isnan(_1791) ? 0.0 : max(_1791, 0.0)), isnan(0.0) ? _1794 : (isnan(_1794) ? 0.0 : max(_1794, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1830) ? 0.0 : (isnan(0.0) ? _1830 : max(0.0, _1830))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1839 = 1.0;
    }
    float _1843 = (_1839 * cbModelParam._m0[1u].x) + (_1828 * (1.0 - cbModelParam._m0[1u].x));
    float _1853 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _848);
    float _1854 = isnan(_1853) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1853 : min(cbModelParam._m0[25u].z, _1853));
    float _1935;
    float _1937;
    float _1939;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1902 = fma(_1076, cbModelParam._m0[13u].z, fma(_1072, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1068)) + cbModelParam._m0[13u].w;
        float _1906 = fma(_1076, cbModelParam._m0[14u].z, fma(_1072, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1068)) + cbModelParam._m0[14u].w;
        float _1910 = fma(_1076, cbModelParam._m0[15u].z, fma(_1072, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1068)) + cbModelParam._m0[15u].w;
        float _1913 = fma(_1017, cbModelParam._m0[13u].z, fma(_1016, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1015));
        float _1916 = fma(_1017, cbModelParam._m0[14u].z, fma(_1016, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1015));
        float _1919 = fma(_1017, cbModelParam._m0[15u].z, fma(_1016, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1015));
        float _1947;
        if (_1913 > 0.0)
        {
            _1947 = abs((1.0 - _1902) / _1913);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1913 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1902 + 1.0) / _1913);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1947 = frontier_phi_17_15_ladder;
        }
        float _2117;
        if (_1916 > 0.0)
        {
            _2117 = abs((1.0 - _1906) / _1916);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1916 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1906 + 1.0) / _1916);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2117 = frontier_phi_26_22_ladder;
        }
        float _2412;
        if (_1919 > 0.0)
        {
            _2412 = abs((1.0 - _1910) / _1919);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1919 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1910 + 1.0) / _1919);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2412 = frontier_phi_38_33_ladder;
        }
        float _2414 = isnan(_2117) ? _1947 : (isnan(_1947) ? _2117 : min(_1947, _2117));
        float _2415 = isnan(_2412) ? _2414 : (isnan(_2414) ? _2412 : min(_2414, _2412));
        float _2419 = (_2415 * _1913) + _1902;
        float _2420 = (_2415 * _1916) + _1906;
        float _2421 = (_2415 * _1919) + _1910;
        float _2422 = _2415 * 9.9999997473787516355514526367188e-05;
        float _2424 = (-1.0) - _2422;
        float _2426 = _2422 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2421 > _2426) || ((_2421 < _2424) || ((_2420 > _2426) || ((_2420 < _2424) || ((_2419 < _2424) || (_2419 > _2426))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2566 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2421, cbModelParam._m0[9u].z, fma(_2420, cbModelParam._m0[9u].y, _2419 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2421, cbModelParam._m0[10u].z, fma(_2420, cbModelParam._m0[10u].y, _2419 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2421, cbModelParam._m0[11u].z, fma(_2420, cbModelParam._m0[11u].y, _2419 * cbModelParam._m0[11u].x))), _1854);
            frontier_phi_16_38_ladder = _2566.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2566.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2566.x * cbModelParam._m0[1u].y;
        }
        _1935 = frontier_phi_16_38_ladder_2;
        _1937 = frontier_phi_16_38_ladder_1;
        _1939 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1923 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1015, _1016, _1017), _1854);
        _1935 = _1923.x * cbModelParam._m0[1u].y;
        _1937 = _1923.y * cbModelParam._m0[1u].y;
        _1939 = _1923.z * cbModelParam._m0[1u].y;
    }
    float _1943 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _848);
    float _1944 = isnan(_1943) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1943 : min(cbModelParam._m0[25u].w, _1943));
    float _2034;
    float _2036;
    float _2038;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1998 = fma(_1076, cbModelParam._m0[21u].z, fma(_1072, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1068)) + cbModelParam._m0[21u].w;
        float _2002 = fma(_1076, cbModelParam._m0[22u].z, fma(_1072, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1068)) + cbModelParam._m0[22u].w;
        float _2006 = fma(_1076, cbModelParam._m0[23u].z, fma(_1072, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1068)) + cbModelParam._m0[23u].w;
        float _2009 = fma(_1017, cbModelParam._m0[21u].z, fma(_1016, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1015));
        float _2012 = fma(_1017, cbModelParam._m0[22u].z, fma(_1016, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1015));
        float _2015 = fma(_1017, cbModelParam._m0[23u].z, fma(_1016, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1015));
        float _2122;
        if (_2009 > 0.0)
        {
            _2122 = abs((1.0 - _1998) / _2009);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_2009 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1998 + 1.0) / _2009);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2122 = frontier_phi_28_24_ladder;
        }
        float _2439;
        if (_2012 > 0.0)
        {
            _2439 = abs((1.0 - _2002) / _2012);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_2012 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_2002 + 1.0) / _2012);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2439 = frontier_phi_40_35_ladder;
        }
        float _2766;
        if (_2015 > 0.0)
        {
            _2766 = abs((1.0 - _2006) / _2015);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_2015 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_2006 + 1.0) / _2015);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _2766 = frontier_phi_50_47_ladder;
        }
        float _2768 = isnan(_2439) ? _2122 : (isnan(_2122) ? _2439 : min(_2122, _2439));
        float _2769 = isnan(_2766) ? _2768 : (isnan(_2768) ? _2766 : min(_2768, _2766));
        float _2773 = (_2769 * _2009) + _1998;
        float _2774 = (_2769 * _2012) + _2002;
        float _2775 = (_2769 * _2015) + _2006;
        float _2776 = _2769 * 9.9999997473787516355514526367188e-05;
        float _2777 = (-1.0) - _2776;
        float _2779 = _2776 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_2775 > _2779) || ((_2775 < _2777) || ((_2774 > _2779) || ((_2774 < _2777) || ((_2773 < _2777) || (_2773 > _2779))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2893 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2775, cbModelParam._m0[17u].z, fma(_2774, cbModelParam._m0[17u].y, _2773 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2775, cbModelParam._m0[18u].z, fma(_2774, cbModelParam._m0[18u].y, _2773 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2775, cbModelParam._m0[19u].z, fma(_2774, cbModelParam._m0[19u].y, _2773 * cbModelParam._m0[19u].x))), _1944);
            frontier_phi_25_50_ladder = _2893.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _2893.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _2893.x * cbModelParam._m0[1u].z;
        }
        _2034 = frontier_phi_25_50_ladder_2;
        _2036 = frontier_phi_25_50_ladder_1;
        _2038 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _2018 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1015, _1016, _1017), _1944);
        _2034 = _2018.x * cbModelParam._m0[1u].z;
        _2036 = _2018.y * cbModelParam._m0[1u].z;
        _2038 = _2018.z * cbModelParam._m0[1u].z;
    }
    float _2050 = ((((1.0 - _1036) * ((_1023 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_1036 * _1023)) * _1007;
    float _2051 = _2050 * ((cbModelParam._m0[1u].w * (_2034 - _1935)) + _1935);
    float _2052 = _2050 * ((cbModelParam._m0[1u].w * (_2036 - _1937)) + _1937);
    float _2053 = _2050 * ((cbModelParam._m0[1u].w * (_2038 - _1939)) + _1939);
    float _2056 = fma(_2053, cbSceneParam._m0[89u].z, fma(_2052, cbSceneParam._m0[89u].y, _2051 * cbSceneParam._m0[89u].x));
    float _2059 = fma(_2053, cbSceneParam._m0[90u].z, fma(_2052, cbSceneParam._m0[90u].y, _2051 * cbSceneParam._m0[90u].x));
    float _2062 = fma(_2053, cbSceneParam._m0[91u].z, fma(_2052, cbSceneParam._m0[91u].y, _2051 * cbSceneParam._m0[91u].x));
    float _2096 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2100 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2104 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2108 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2109 = _2096 / _2108;
    float _2110 = _2100 / _2108;
    float _2111 = _2104 / _2108;
    float _2258;
    float _2259;
    float _2260;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2138 = ((uint(_2111 > cbSceneParam._m0[59u].y) + uint(_2111 > cbSceneParam._m0[59u].x)) + uint(_2111 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2139 = _2138 + 43u;
        uint _2147 = _2138 + 44u;
        uint _2155 = _2138 + 45u;
        uint _2163 = _2138 + 46u;
        float _2174 = fma(_2108, cbSceneParam._m0[_2139].w, fma(_2104, cbSceneParam._m0[_2139].z, fma(_2100, cbSceneParam._m0[_2139].y, _2096 * cbSceneParam._m0[_2139].x)));
        float _2178 = fma(_2108, cbSceneParam._m0[_2147].w, fma(_2104, cbSceneParam._m0[_2147].z, fma(_2100, cbSceneParam._m0[_2147].y, _2096 * cbSceneParam._m0[_2147].x)));
        float _2186 = fma(_2108, cbSceneParam._m0[_2163].w, fma(_2104, cbSceneParam._m0[_2163].z, fma(_2100, cbSceneParam._m0[_2163].y, _2096 * cbSceneParam._m0[_2163].x)));
        float _2191 = cbSceneParam._m0[33u].z * _2186;
        float _2193 = cbSceneParam._m0[33u].w * _2186;
        float _2196 = fma(_2108, cbSceneParam._m0[_2155].w, fma(_2104, cbSceneParam._m0[_2155].z, fma(_2100, cbSceneParam._m0[_2155].y, _2096 * cbSceneParam._m0[_2155].x))) / _2186;
        float _2244 = (cbSceneParam._m0[33u].x - sqrt(((_2110 * _2110) + (_2109 * _2109)) + (_2111 * _2111))) * cbSceneParam._m0[33u].y;
        float _4628 = isnan(0.0) ? _2244 : (isnan(_2244) ? 0.0 : max(_2244, 0.0));
        float _2251 = (isnan(1.0) ? _4628 : (isnan(_4628) ? 1.0 : min(_4628, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2191 + _2174) / _2186, (_2193 + _2178) / _2186), _2196), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2193 + _2174) / _2186, (_2178 - _2191) / _2186), _2196), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2174 - _2191) / _2186, (_2178 - _2193) / _2186), _2196), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2174 - _2193) / _2186, (_2191 + _2178) / _2186), _2196), 0.0)).x), vec4(0.25)));
        _2258 = 1.0 - (_2251 * cbSceneParam._m0[34u].x);
        _2259 = 1.0 - (_2251 * cbSceneParam._m0[34u].y);
        _2260 = 1.0 - (_2251 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2258 = 1.0;
        _2259 = 1.0;
        _2260 = 1.0;
    }
    float _2324;
    float _2326;
    float _2328;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2312 = fma(_2108, cbSceneParam._m0[63u].w, fma(_2104, cbSceneParam._m0[63u].z, fma(_2100, cbSceneParam._m0[63u].y, _2096 * cbSceneParam._m0[63u].x)));
        float _2313 = fma(_2108, cbSceneParam._m0[60u].w, fma(_2104, cbSceneParam._m0[60u].z, fma(_2100, cbSceneParam._m0[60u].y, _2096 * cbSceneParam._m0[60u].x))) / _2312;
        float _2314 = fma(_2108, cbSceneParam._m0[61u].w, fma(_2104, cbSceneParam._m0[61u].z, fma(_2100, cbSceneParam._m0[61u].y, _2096 * cbSceneParam._m0[61u].x))) / _2312;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_2313 >= cbSceneParam._m0[64u].x) && (_2314 >= cbSceneParam._m0[64u].y)) && (_2313 <= cbSceneParam._m0[64u].z)) && (_2314 <= cbSceneParam._m0[64u].w))
        {
            float _2452 = fma(_2108, cbSceneParam._m0[62u].w, fma(_2104, cbSceneParam._m0[62u].z, fma(_2100, cbSceneParam._m0[62u].y, _2096 * cbSceneParam._m0[62u].x))) / _2312;
            float _2456 = isnan(cbSceneParam._m0[41u].w) ? _2452 : (isnan(_2452) ? cbSceneParam._m0[41u].w : max(_2452, cbSceneParam._m0[41u].w));
            float _2499 = (cbSceneParam._m0[33u].x - sqrt(((_2110 * _2110) + (_2109 * _2109)) + (_2111 * _2111))) * cbSceneParam._m0[33u].y;
            float _4644 = isnan(0.0) ? _2499 : (isnan(_2499) ? 0.0 : max(_2499, 0.0));
            float _2506 = (isnan(1.0) ? _4644 : (isnan(_4644) ? 1.0 : min(_4644, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2313, cbSceneParam._m0[33u].w + _2314), _2456), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2313, _2314 - cbSceneParam._m0[33u].z), _2456), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2313 - cbSceneParam._m0[33u].z, _2314 - cbSceneParam._m0[33u].w), _2456), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2313 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2314), _2456), 0.0)).x), vec4(0.25)));
            float _2510 = 1.0 - (_2506 * cbSceneParam._m0[34u].x);
            float _2511 = 1.0 - (_2506 * cbSceneParam._m0[34u].y);
            float _2512 = 1.0 - (_2506 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_2512) ? _2260 : (isnan(_2260) ? _2512 : min(_2260, _2512));
            frontier_phi_37_36_ladder_1 = isnan(_2511) ? _2259 : (isnan(_2259) ? _2511 : min(_2259, _2511));
            frontier_phi_37_36_ladder_2 = isnan(_2510) ? _2258 : (isnan(_2258) ? _2510 : min(_2258, _2510));
        }
        else
        {
            frontier_phi_37_36_ladder = _2260;
            frontier_phi_37_36_ladder_1 = _2259;
            frontier_phi_37_36_ladder_2 = _2258;
        }
        _2324 = frontier_phi_37_36_ladder_2;
        _2326 = frontier_phi_37_36_ladder_1;
        _2328 = frontier_phi_37_36_ladder;
    }
    else
    {
        _2324 = _2258;
        _2326 = _2259;
        _2328 = _2260;
    }
    uvec4 _2333 = floatBitsToUint(cbInstanceData._m0[_276 + 5u]);
    uint _2335 = _2333.x * 14u;
    uint _2336 = _2335 + 13u;
    float _2343 = _1007 + (-1.0);
    float _2348 = (cbLight._m0[_2336].x * _2343) + 1.0;
    float _2349 = (cbLight._m0[_2336].y * _2343) + 1.0;
    float _2350 = (cbLight._m0[_2336].z * _2343) + 1.0;
    float _2351 = (cbLight._m0[_2336].w * _2343) + 1.0;
    uint _2352 = _2335 + 5u;
    float _2358 = isnan(1.0) ? _2349 : (isnan(_2349) ? 1.0 : min(_2349, 1.0));
    uint _2362 = _2335 + 4u;
    float _2371 = isnan(1.0) ? _2348 : (isnan(_2348) ? 1.0 : min(_2348, 1.0));
    uint _2375 = _2335 | 1u;
    float _2386 = dot(vec3(cbLight._m0[_2335].xyz), vec3(_845, _846, _847));
    float _2389 = dot(vec3(cbLight._m0[_2375].xyz), vec3(_845, _846, _847));
    float _4680 = isnan(0.0) ? _2386 : (isnan(_2386) ? 0.0 : max(_2386, 0.0));
    float _4691 = isnan(0.0) ? _2389 : (isnan(_2389) ? 0.0 : max(_2389, 0.0));
    float _2394 = (isnan(1.0) ? _4680 : (isnan(_4680) ? 1.0 : min(_4680, 1.0))) * 0.3183098733425140380859375;
    float _2396 = (isnan(1.0) ? _4691 : (isnan(_4691) ? 1.0 : min(_4691, 1.0))) * 0.3183098733425140380859375;
    float _2403 = ((cbLight._m0[_2352].x * _2358) * _2396) + (((cbLight._m0[_2362].x * _2324) * _2371) * _2394);
    float _2404 = ((_2358 * cbLight._m0[_2352].y) * _2396) + (((cbLight._m0[_2362].y * _2326) * _2371) * _2394);
    float _2405 = ((_2358 * cbLight._m0[_2352].z) * _2396) + (((cbLight._m0[_2362].z * _2328) * _2371) * _2394);
    uvec4 _2409 = floatBitsToUint(cbLight._m0[_2335 + 12u]);
    bool _2411 = _2409.x == 0u;
    float _2513;
    float _2515;
    float _2517;
    if (_2411)
    {
        _2513 = _2403;
        _2515 = _2404;
        _2517 = _2405;
    }
    else
    {
        uint _2521 = _2335 + 6u;
        float _2537 = (dot(vec3(cbLight._m0[_2335 + 2u].xyz), vec3(_845, _846, _847)) * 0.5) + 0.5;
        float _2538 = _2537 * _2537;
        float _4702 = isnan(0.0) ? _2538 : (isnan(_2538) ? 0.0 : max(_2538, 0.0));
        float _2539 = isnan(1.0) ? _4702 : (isnan(_4702) ? 1.0 : min(_4702, 1.0));
        float _2540 = isnan(1.0) ? _2350 : (isnan(_2350) ? 1.0 : min(_2350, 1.0));
        _2513 = (((cbLight._m0[_2521].x * 0.3183098733425140380859375) * _2539) * _2540) + _2403;
        _2515 = (((cbLight._m0[_2521].y * 0.3183098733425140380859375) * _2539) * _2540) + _2404;
        _2517 = (((cbLight._m0[_2521].z * 0.3183098733425140380859375) * _2539) * _2540) + _2405;
    }
    bool _2520 = _2409.y == 0u;
    float _2575;
    float _2577;
    float _2579;
    if (_2520)
    {
        _2575 = _2513;
        _2577 = _2515;
        _2579 = _2517;
    }
    else
    {
        uint _2737 = _2335 + 7u;
        float _2753 = (dot(vec3(cbLight._m0[_2335 + 3u].xyz), vec3(_845, _846, _847)) * 0.5) + 0.5;
        float _2754 = _2753 * _2753;
        float _4718 = isnan(0.0) ? _2754 : (isnan(_2754) ? 0.0 : max(_2754, 0.0));
        float _2755 = isnan(1.0) ? _4718 : (isnan(_4718) ? 1.0 : min(_4718, 1.0));
        float _2756 = isnan(1.0) ? _2351 : (isnan(_2351) ? 1.0 : min(_2351, 1.0));
        _2575 = (((cbLight._m0[_2737].x * 0.3183098733425140380859375) * _2755) * _2756) + _2513;
        _2577 = (((cbLight._m0[_2737].y * 0.3183098733425140380859375) * _2755) * _2756) + _2515;
        _2579 = (((cbLight._m0[_2737].z * 0.3183098733425140380859375) * _2755) * _2756) + _2517;
    }
    uint _2582 = _2335 + 8u;
    float _2595 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2335].w)) * _848) * 0.949999988079071044921875);
    float _2596 = _2595 * _2595;
    float _2597 = cbLight._m0[_2335].x + _924;
    float _2598 = cbLight._m0[_2335].y + _925;
    float _2599 = cbLight._m0[_2335].z + _926;
    float _2603 = inversesqrt(dot(vec3(_2597, _2598, _2599), vec3(_2597, _2598, _2599)));
    float _2604 = _2603 * _2597;
    float _2605 = _2603 * _2598;
    float _2606 = _2603 * _2599;
    float _2607 = dot(vec3(_845, _846, _847), vec3(cbLight._m0[_2335].xyz));
    float _4734 = isnan(0.0) ? _2607 : (isnan(_2607) ? 0.0 : max(_2607, 0.0));
    float _2610 = isnan(1.0) ? _4734 : (isnan(_4734) ? 1.0 : min(_4734, 1.0));
    float _4745 = isnan(0.0) ? _1008 : (isnan(_1008) ? 0.0 : max(_1008, 0.0));
    float _2611 = isnan(1.0) ? _4745 : (isnan(_4745) ? 1.0 : min(_4745, 1.0));
    float _2612 = dot(vec3(_845, _846, _847), vec3(_2604, _2605, _2606));
    float _4756 = isnan(0.0) ? _2612 : (isnan(_2612) ? 0.0 : max(_2612, 0.0));
    float _2615 = isnan(1.0) ? _4756 : (isnan(_4756) ? 1.0 : min(_4756, 1.0));
    float _2616 = dot(vec3(cbLight._m0[_2335].xyz), vec3(_2604, _2605, _2606));
    float _4767 = isnan(0.0) ? _2616 : (isnan(_2616) ? 0.0 : max(_2616, 0.0));
    float _2620 = _2596 * _2596;
    float _2624 = ((_2615 * _2615) * (_2620 + (-1.0))) + 1.0;
    float _2635 = (exp2(log2(1.0 - (isnan(1.0) ? _4767 : (isnan(_4767) ? 1.0 : min(_4767, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2636 = 1.0 - _2596;
    float _2647 = (0.5 / (((_2611 * ((_2610 * _2636) + _2596)) + 9.9999999392252902907785028219223e-09) + (((_2611 * _2636) + _2596) * _2610))) * _2610;
    float _4778 = isnan(0.0) ? _2647 : (isnan(_2647) ? 0.0 : max(_2647, 0.0));
    float _2649 = (isnan(1.0) ? _4778 : (isnan(_4778) ? 1.0 : min(_4778, 1.0))) * (_2620 / ((_2624 * _2624) * 3.141590118408203125));
    uint _2663 = _2335 + 9u;
    float _2674 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2375].w)) * _848) * 0.949999988079071044921875);
    float _2675 = _2674 * _2674;
    float _2676 = cbLight._m0[_2375].x + _924;
    float _2677 = cbLight._m0[_2375].y + _925;
    float _2678 = cbLight._m0[_2375].z + _926;
    float _2682 = inversesqrt(dot(vec3(_2676, _2677, _2678), vec3(_2676, _2677, _2678)));
    float _2683 = _2682 * _2676;
    float _2684 = _2682 * _2677;
    float _2685 = _2682 * _2678;
    float _2686 = dot(vec3(_845, _846, _847), vec3(cbLight._m0[_2375].xyz));
    float _4789 = isnan(0.0) ? _2686 : (isnan(_2686) ? 0.0 : max(_2686, 0.0));
    float _2689 = isnan(1.0) ? _4789 : (isnan(_4789) ? 1.0 : min(_4789, 1.0));
    float _2690 = dot(vec3(_845, _846, _847), vec3(_2683, _2684, _2685));
    float _4800 = isnan(0.0) ? _2690 : (isnan(_2690) ? 0.0 : max(_2690, 0.0));
    float _2693 = isnan(1.0) ? _4800 : (isnan(_4800) ? 1.0 : min(_4800, 1.0));
    float _2694 = dot(vec3(cbLight._m0[_2375].xyz), vec3(_2683, _2684, _2685));
    float _4811 = isnan(0.0) ? _2694 : (isnan(_2694) ? 0.0 : max(_2694, 0.0));
    float _2698 = _2675 * _2675;
    float _2702 = ((_2693 * _2693) * (_2698 + (-1.0))) + 1.0;
    float _2711 = (exp2(log2(1.0 - (isnan(1.0) ? _4811 : (isnan(_4811) ? 1.0 : min(_4811, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2712 = 1.0 - _2675;
    float _2722 = (0.5 / (((_2611 * ((_2689 * _2712) + _2675)) + 9.9999999392252902907785028219223e-09) + (((_2611 * _2712) + _2675) * _2689))) * _2689;
    float _4822 = isnan(0.0) ? _2722 : (isnan(_2722) ? 0.0 : max(_2722, 0.0));
    float _2724 = (isnan(1.0) ? _4822 : (isnan(_4822) ? 1.0 : min(_4822, 1.0))) * (_2698 / ((_2702 * _2702) * 3.141590118408203125));
    float _2734 = (((_2711 * cbLight._m0[_2663].x) * _2724) * _2358) + ((((cbLight._m0[_2582].x * _2324) * _2635) * _2649) * _2371);
    float _2735 = (((_2711 * cbLight._m0[_2663].y) * _2724) * _2358) + ((((cbLight._m0[_2582].y * _2326) * _2635) * _2649) * _2371);
    float _2736 = (((_2711 * cbLight._m0[_2663].z) * _2724) * _2358) + ((((cbLight._m0[_2582].z * _2328) * _2635) * _2649) * _2371);
    float _2792;
    float _2794;
    float _2796;
    if (_2411)
    {
        _2792 = _2734;
        _2794 = _2735;
        _2796 = _2736;
    }
    else
    {
        uint _2798 = _2335 + 2u;
        uint _2802 = _2335 + 10u;
        float _2816 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2798].w)) * _848) * 0.949999988079071044921875);
        float _2817 = _2816 * _2816;
        float _2818 = cbLight._m0[_2798].x + _924;
        float _2819 = cbLight._m0[_2798].y + _925;
        float _2820 = cbLight._m0[_2798].z + _926;
        float _2824 = inversesqrt(dot(vec3(_2818, _2819, _2820), vec3(_2818, _2819, _2820)));
        float _2825 = _2824 * _2818;
        float _2826 = _2824 * _2819;
        float _2827 = _2824 * _2820;
        float _2828 = dot(vec3(_845, _846, _847), vec3(cbLight._m0[_2798].xyz));
        float _4833 = isnan(0.0) ? _2828 : (isnan(_2828) ? 0.0 : max(_2828, 0.0));
        float _2831 = isnan(1.0) ? _4833 : (isnan(_4833) ? 1.0 : min(_4833, 1.0));
        float _2832 = dot(vec3(_845, _846, _847), vec3(_2825, _2826, _2827));
        float _4844 = isnan(0.0) ? _2832 : (isnan(_2832) ? 0.0 : max(_2832, 0.0));
        float _2835 = isnan(1.0) ? _4844 : (isnan(_4844) ? 1.0 : min(_4844, 1.0));
        float _2836 = dot(vec3(cbLight._m0[_2798].xyz), vec3(_2825, _2826, _2827));
        float _4855 = isnan(0.0) ? _2836 : (isnan(_2836) ? 0.0 : max(_2836, 0.0));
        float _2840 = _2817 * _2817;
        float _2844 = ((_2835 * _2835) * (_2840 + (-1.0))) + 1.0;
        float _2853 = (exp2(log2(1.0 - (isnan(1.0) ? _4855 : (isnan(_4855) ? 1.0 : min(_4855, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2854 = 1.0 - _2817;
        float _2864 = (0.5 / (((_2611 * ((_2831 * _2854) + _2817)) + 9.9999999392252902907785028219223e-09) + (((_2611 * _2854) + _2817) * _2831))) * _2831;
        float _4866 = isnan(0.0) ? _2864 : (isnan(_2864) ? 0.0 : max(_2864, 0.0));
        float _2866 = (isnan(1.0) ? _4866 : (isnan(_4866) ? 1.0 : min(_4866, 1.0))) * (_2840 / ((_2844 * _2844) * 3.141590118408203125));
        float _2867 = isnan(1.0) ? _2350 : (isnan(_2350) ? 1.0 : min(_2350, 1.0));
        _2792 = (((_2853 * cbLight._m0[_2802].x) * _2866) * _2867) + _2734;
        _2794 = (((_2853 * cbLight._m0[_2802].y) * _2866) * _2867) + _2735;
        _2796 = (((_2853 * cbLight._m0[_2802].z) * _2866) * _2867) + _2736;
    }
    float _2898;
    float _2900;
    float _2902;
    if (_2520)
    {
        _2898 = _2792;
        _2900 = _2794;
        _2902 = _2796;
    }
    else
    {
        uint _2909 = _2335 + 3u;
        uint _2913 = _2335 + 11u;
        float _2927 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2909].w)) * _848) * 0.949999988079071044921875);
        float _2928 = _2927 * _2927;
        float _2929 = cbLight._m0[_2909].x + _924;
        float _2930 = cbLight._m0[_2909].y + _925;
        float _2931 = cbLight._m0[_2909].z + _926;
        float _2935 = inversesqrt(dot(vec3(_2929, _2930, _2931), vec3(_2929, _2930, _2931)));
        float _2936 = _2935 * _2929;
        float _2937 = _2935 * _2930;
        float _2938 = _2935 * _2931;
        float _2939 = dot(vec3(_845, _846, _847), vec3(cbLight._m0[_2909].xyz));
        float _4882 = isnan(0.0) ? _2939 : (isnan(_2939) ? 0.0 : max(_2939, 0.0));
        float _2942 = isnan(1.0) ? _4882 : (isnan(_4882) ? 1.0 : min(_4882, 1.0));
        float _2943 = dot(vec3(_845, _846, _847), vec3(_2936, _2937, _2938));
        float _4893 = isnan(0.0) ? _2943 : (isnan(_2943) ? 0.0 : max(_2943, 0.0));
        float _2946 = isnan(1.0) ? _4893 : (isnan(_4893) ? 1.0 : min(_4893, 1.0));
        float _2947 = dot(vec3(cbLight._m0[_2909].xyz), vec3(_2936, _2937, _2938));
        float _4904 = isnan(0.0) ? _2947 : (isnan(_2947) ? 0.0 : max(_2947, 0.0));
        float _2951 = _2928 * _2928;
        float _2955 = ((_2946 * _2946) * (_2951 + (-1.0))) + 1.0;
        float _2964 = (exp2(log2(1.0 - (isnan(1.0) ? _4904 : (isnan(_4904) ? 1.0 : min(_4904, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2965 = 1.0 - _2928;
        float _2975 = (0.5 / (((_2611 * ((_2942 * _2965) + _2928)) + 9.9999999392252902907785028219223e-09) + (((_2611 * _2965) + _2928) * _2942))) * _2942;
        float _4915 = isnan(0.0) ? _2975 : (isnan(_2975) ? 0.0 : max(_2975, 0.0));
        float _2977 = (isnan(1.0) ? _4915 : (isnan(_4915) ? 1.0 : min(_4915, 1.0))) * (_2951 / ((_2955 * _2955) * 3.141590118408203125));
        float _2978 = isnan(1.0) ? _2351 : (isnan(_2351) ? 1.0 : min(_2351, 1.0));
        _2898 = (((_2964 * cbLight._m0[_2913].x) * _2977) * _2978) + _2792;
        _2900 = (((_2964 * cbLight._m0[_2913].y) * _2977) * _2978) + _2794;
        _2902 = (((_2964 * cbLight._m0[_2913].z) * _2977) * _2978) + _2796;
    }
    float _3044;
    float _3046;
    float _3048;
    float _3050;
    float _3052;
    float _3054;
    if (_2333.y == 0u)
    {
        uvec4 _2999 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3000 = _2999.x;
        uint _3011 = uint((float(_2999.y) * floor(float(uint(cbSceneParam._m0[85u].y * _945) / _3000))) + floor(float(uint(cbSceneParam._m0[85u].x * _944) / _3000)));
        float _3021 = (log2(_2111 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _3022 = isnan(0.0) ? _3021 : (isnan(_3021) ? 0.0 : max(_3021, 0.0));
        uint _3025 = uint(isnan(14.0) ? _3022 : (isnan(_3022) ? 14.0 : min(_3022, 14.0)));
        uvec4 _3030 = texelFetch(g_lightClusterGridBuffer, int(((_3025 << 2u) + (_3011 << 6u)) >> 2u));
        uint _3031 = _3030.x;
        uint _3032 = _2999.z;
        float _3111;
        float _3113;
        float _3115;
        float _3117;
        float _3119;
        float _3121;
        if (((((1u << ((_3032 >> 4u) & 15u)) + 4294967295u) & _3031) == 0u) || ((_3032 & 240u) == 0u))
        {
            _3111 = 0.0;
            _3113 = 0.0;
            _3115 = 0.0;
            _3117 = 0.0;
            _3119 = 0.0;
            _3121 = 0.0;
        }
        else
        {
            float _3112;
            float _3114;
            float _3116;
            float _3118;
            float _3120;
            float _3122;
            float _3264 = 0.0;
            float _3265 = 0.0;
            float _3266 = 0.0;
            float _3267 = 0.0;
            float _3268 = 0.0;
            float _3269 = 0.0;
            uint _3270 = 0u;
            uint _3279;
            bool _3280;
            for (;;)
            {
                _3279 = texelFetch(g_lightClassification, int((((_3025 << 5u) + (_3011 << 9u)) + (_3270 << 2u)) >> 2u)).x;
                _3280 = _3279 == 0u;
                float frontier_phi_71_pred;
                float frontier_phi_71_pred_1;
                float frontier_phi_71_pred_2;
                float frontier_phi_71_pred_3;
                float frontier_phi_71_pred_4;
                float frontier_phi_71_pred_5;
                if (_3280)
                {
                    frontier_phi_71_pred = _3269;
                    frontier_phi_71_pred_1 = _3268;
                    frontier_phi_71_pred_2 = _3267;
                    frontier_phi_71_pred_3 = _3266;
                    frontier_phi_71_pred_4 = _3265;
                    frontier_phi_71_pred_5 = _3264;
                }
                else
                {
                    float _3409;
                    float _3410;
                    float _3411;
                    float _3412;
                    float _3413;
                    float _3414;
                    uint _3415;
                    _3409 = _3264;
                    _3410 = _3265;
                    _3411 = _3266;
                    _3412 = _3267;
                    _3413 = _3268;
                    _3414 = _3269;
                    _3415 = _3279;
                    float _3336;
                    float _3337;
                    float _3338;
                    float _3339;
                    float _3340;
                    float _3341;
                    for (;;)
                    {
                        uint _3419 = uint(findLSB(_3415)) + (_3270 << 5u);
                        uint _3416 = (_3415 + 4294967295u) & _3415;
                        uint _3421 = _3419 * 48u;
                        vec4 _3435 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3421)).x, texelFetch(g_PointLightRenderingBuffer, int(_3421 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3421 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3421 + 3u)).x));
                        uint _3441 = (_3419 * 48u) + 4u;
                        vec4 _3454 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3441)).x, texelFetch(g_PointLightRenderingBuffer, int(_3441 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3441 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3441 + 3u)).x));
                        uint _3460 = (_3419 * 48u) + 8u;
                        vec3 _3471 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3460)).x, texelFetch(g_PointLightRenderingBuffer, int(_3460 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3460 + 2u)).x));
                        float _3475 = _3435.x - _2109;
                        float _3476 = _3435.y - _2110;
                        float _3477 = _3435.z - _2111;
                        float _3478 = dot(vec3(_3475, _3476, _3477), vec3(_3475, _3476, _3477));
                        float _3481 = inversesqrt(_3478);
                        float _3482 = _3481 * _3475;
                        float _3483 = _3481 * _3476;
                        float _3484 = _3481 * _3477;
                        float _3485 = dot(vec3(_963, _966, _969), vec3(_3482, _3483, _3484));
                        float _3490 = 1.0 - (_3478 * _3435.w);
                        float _4941 = isnan(0.0) ? _3490 : (isnan(_3490) ? 0.0 : max(_3490, 0.0));
                        float _3491 = isnan(1.0) ? _4941 : (isnan(_4941) ? 1.0 : min(_4941, 1.0));
                        float _3492 = sqrt(_3478) * _3454.w;
                        float _3495 = 1.39999997615814208984375 / (_3492 + 1.39999997615814208984375);
                        float _3496 = _3495 * _3495;
                        float _3499 = ((1.0 - _3496) * _3485) + _3496;
                        float _3502 = _3492 * _3492;
                        float _3506 = ((isnan(0.0) ? _3499 : (isnan(_3499) ? 0.0 : max(_3499, 0.0))) * _3491) / ((_3502 * 0.699999988079071044921875) + 1.0);
                        float _3510 = (-0.0) - _2109;
                        float _3511 = (-0.0) - _2110;
                        float _3512 = (-0.0) - _2111;
                        float _3516 = inversesqrt(dot(vec3(_3510, _3511, _3512), vec3(_3510, _3511, _3512)));
                        float _3517 = _3516 * _3510;
                        float _3518 = _3516 * _3511;
                        float _3519 = _3516 * _3512;
                        float _3526 = exp2(log2(1.0 / ((_3502 * 3.5) + 5.0)) * 0.25);
                        float _3527 = 1.0 - _1023;
                        float _3534 = sqrt(1.0 - ((1.0 - (_3527 * _3527)) * (1.0 - (_3526 * _3526))));
                        float _3535 = _3534 * _3534;
                        float _3536 = _3535 * _3535;
                        float _3537 = _3517 + _3482;
                        float _3538 = _3518 + _3483;
                        float _3539 = _3519 + _3484;
                        float _3543 = inversesqrt(dot(vec3(_3537, _3538, _3539), vec3(_3537, _3538, _3539)));
                        float _3547 = dot(vec3(_963, _966, _969), vec3(_3517, _3518, _3519));
                        float _4957 = isnan(0.0) ? _3547 : (isnan(_3547) ? 0.0 : max(_3547, 0.0));
                        float _3550 = isnan(1.0) ? _4957 : (isnan(_4957) ? 1.0 : min(_4957, 1.0));
                        float _3551 = dot(vec3(_963, _966, _969), vec3(_3543 * _3537, _3543 * _3538, _3543 * _3539));
                        float _4968 = isnan(0.0) ? _3551 : (isnan(_3551) ? 0.0 : max(_3551, 0.0));
                        float _3554 = isnan(1.0) ? _4968 : (isnan(_4968) ? 1.0 : min(_4968, 1.0));
                        float _3558 = ((_3554 * _3554) * (_3536 + (-1.0))) + 1.0;
                        float _3559 = _3495 * _3535;
                        float _3560 = _3559 * _3559;
                        float _3563 = ((1.0 - _3560) * _3485) + _3560;
                        float _4979 = isnan(0.0) ? _3563 : (isnan(_3563) ? 0.0 : max(_3563, 0.0));
                        float _3564 = isnan(1.0) ? _4979 : (isnan(_4979) ? 1.0 : min(_4979, 1.0));
                        float _3565 = 1.0 - _3535;
                        float _3575 = (0.5 / (((_3564 * ((_3550 * _3565) + _3535)) + 9.9999999392252902907785028219223e-09) + (((_3564 * _3565) + _3535) * _3550))) * _3564;
                        float _4990 = isnan(0.0) ? _3575 : (isnan(_3575) ? 0.0 : max(_3575, 0.0));
                        float _3586 = (((_3536 * 3.1415927410125732421875) * (isnan(1.0) ? _4990 : (isnan(_4990) ? 1.0 : min(_4990, 1.0)))) / ((_3558 * _3558) * ((_3502 * 2.1991131305694580078125) + 3.141590118408203125))) * _3491;
                        _3339 = (_3506 * _3454.x) + _3412;
                        _3340 = (_3506 * _3454.y) + _3413;
                        _3341 = (_3506 * _3454.z) + _3414;
                        _3336 = (_3586 * _3471.x) + _3409;
                        _3337 = (_3586 * _3471.y) + _3410;
                        _3338 = (_3586 * _3471.z) + _3411;
                        if (_3416 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3409 = _3336;
                            _3410 = _3337;
                            _3411 = _3338;
                            _3412 = _3339;
                            _3413 = _3340;
                            _3414 = _3341;
                            _3415 = _3416;
                        }
                    }
                    frontier_phi_71_pred = _3341;
                    frontier_phi_71_pred_1 = _3340;
                    frontier_phi_71_pred_2 = _3339;
                    frontier_phi_71_pred_3 = _3338;
                    frontier_phi_71_pred_4 = _3337;
                    frontier_phi_71_pred_5 = _3336;
                }
                _3122 = frontier_phi_71_pred;
                _3120 = frontier_phi_71_pred_1;
                _3118 = frontier_phi_71_pred_2;
                _3116 = frontier_phi_71_pred_3;
                _3114 = frontier_phi_71_pred_4;
                _3112 = frontier_phi_71_pred_5;
                uint _3271 = _3270 + 1u;
                if (_3271 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3264 = _3112;
                    _3265 = _3114;
                    _3266 = _3116;
                    _3267 = _3118;
                    _3268 = _3120;
                    _3269 = _3122;
                    _3270 = _3271;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3111 = _3112;
            _3113 = _3114;
            _3115 = _3116;
            _3117 = _3118;
            _3119 = _3120;
            _3121 = _3122;
        }
        uvec4 _3125 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3126 = _3125.z;
        uint _3128 = (_3126 >> 8u) & 15u;
        float _3232;
        float _3234;
        float _3236;
        float _3238;
        float _3240;
        float _3242;
        if (((4294967295u << _3128) & _3031) == 0u)
        {
            _3232 = _3111;
            _3234 = _3113;
            _3236 = _3115;
            _3238 = _3117;
            _3240 = _3119;
            _3242 = _3121;
        }
        else
        {
            float _3257 = inversesqrt(dot(vec3(_2109, _2110, _2111), vec3(_2109, _2110, _2111)));
            float _3258 = _3257 * _2109;
            float _3259 = _3257 * _2110;
            float _3260 = _3257 * _2111;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_3128 < ((_3126 >> 12u) & 15u))
            {
                float _3233;
                float _3235;
                float _3237;
                float _3239;
                float _3241;
                float _3243;
                float _3392 = _3111;
                float _3393 = _3113;
                float _3394 = _3115;
                float _3395 = _3117;
                float _3396 = _3119;
                float _3397 = _3121;
                uint _3398 = _3128;
                uint _3407;
                bool _3408;
                for (;;)
                {
                    _3407 = texelFetch(g_lightClassification, int((((_3025 << 5u) + (_3011 << 9u)) + (_3398 << 2u)) >> 2u)).x;
                    _3408 = _3407 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    float frontier_phi_82_pred_3;
                    float frontier_phi_82_pred_4;
                    float frontier_phi_82_pred_5;
                    if (_3408)
                    {
                        frontier_phi_82_pred = _3397;
                        frontier_phi_82_pred_1 = _3396;
                        frontier_phi_82_pred_2 = _3395;
                        frontier_phi_82_pred_3 = _3394;
                        frontier_phi_82_pred_4 = _3393;
                        frontier_phi_82_pred_5 = _3392;
                    }
                    else
                    {
                        float _3600;
                        float _3601;
                        float _3602;
                        float _3603;
                        float _3604;
                        float _3605;
                        float _3893;
                        float _3894;
                        float _3895;
                        float _3896;
                        float _3897;
                        float _3898;
                        float _3613 = _3392;
                        float _3614 = _3393;
                        float _3615 = _3394;
                        float _3616 = _3395;
                        float _3617 = _3396;
                        float _3618 = _3397;
                        uint _3619 = _3407;
                        uint _3620;
                        vec4 _3645;
                        float _3646;
                        vec4 _3661;
                        vec3 _3673;
                        vec4 _3688;
                        vec4 _3703;
                        float _3749;
                        bool _3750;
                        for (;;)
                        {
                            uint _3630 = ((_3398 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3619));
                            _3620 = (_3619 + 4294967295u) & _3619;
                            uint _3632 = _3630 * 40u;
                            _3645 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3632)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3632 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3632 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3632 + 3u)).x));
                            _3646 = _3645.w;
                            uint _3648 = (_3630 * 40u) + 4u;
                            _3661 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3648)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3648 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3648 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3648 + 3u)).x));
                            uint _3663 = (_3630 * 40u) + 8u;
                            _3673 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3663)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3663 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3663 + 2u)).x));
                            uint _3675 = (_3630 * 40u) + 16u;
                            _3688 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3675)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3675 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3675 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3675 + 3u)).x));
                            uint _3690 = (_3630 * 40u) + 20u;
                            _3703 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3690)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3690 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3690 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3690 + 3u)).x));
                            uint _3705 = (_3630 * 40u) + 24u;
                            vec4 _3718 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3705)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3705 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3705 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3705 + 3u)).x));
                            uint _3724 = (_3630 * 40u) + 28u;
                            vec4 _3737 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3724)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3724 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3724 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3724 + 3u)).x));
                            _3749 = fma(_2111, _3737.z, fma(_2110, _3737.y, _3737.x * _2109)) + _3737.w;
                            _3750 = !((fma(_2111, _3718.z, fma(_2110, _3718.y, _3718.x * _2109)) + _3718.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_3750)
                            {
                                float _3777 = _3645.x - _2109;
                                float _3778 = _3645.y - _2110;
                                float _3779 = _3645.z - _2111;
                                float _3780 = dot(vec3(_3777, _3778, _3779), vec3(_3777, _3778, _3779));
                                float _3783 = inversesqrt(_3780);
                                float _3784 = _3783 * _3777;
                                float _3785 = _3783 * _3778;
                                float _3786 = _3783 * _3779;
                                float _3790 = 1.0 - (_3780 / (_3646 * _3646));
                                float _5001 = isnan(0.0) ? _3790 : (isnan(_3790) ? 0.0 : max(_3790, 0.0));
                                float _3791 = isnan(1.0) ? _5001 : (isnan(_5001) ? 1.0 : min(_5001, 1.0));
                                float _3795 = sqrt(_3780) * _3661.w;
                                float _3797 = 1.39999997615814208984375 / (_3795 + 1.39999997615814208984375);
                                float _3798 = _3797 * _3797;
                                float _3801 = ((1.0 - _3798) * dot(vec3(_3784, _3785, _3786), vec3(_963, _966, _969))) + _3798;
                                float _3804 = _3795 * _3795;
                                float _3808 = (fma(_2111, _3688.z, fma(_2110, _3688.y, _3688.x * _2109)) + _3688.w) / _3749;
                                float _3809 = (fma(_2111, _3703.z, fma(_2110, _3703.y, _3703.x * _2109)) + _3703.w) / _3749;
                                float _3813 = 1.0 - dot(vec2(_3808, _3809), vec2(_3808, _3809));
                                float _5017 = isnan(0.0) ? _3813 : (isnan(_3813) ? 0.0 : max(_3813, 0.0));
                                float _3814 = isnan(1.0) ? _5017 : (isnan(_5017) ? 1.0 : min(_5017, 1.0));
                                float _3815 = _3814 * (((isnan(0.0) ? _3801 : (isnan(_3801) ? 0.0 : max(_3801, 0.0))) * _3791) / ((_3804 * 0.699999988079071044921875) + 1.0));
                                float _3827 = exp2(log2(1.0 / ((_3804 * 3.5) + 5.0)) * 0.25);
                                float _3828 = 1.0 - _1023;
                                float _3835 = sqrt(1.0 - ((1.0 - (_3828 * _3828)) * (1.0 - (_3827 * _3827))));
                                float _3836 = _3835 * _3835;
                                float _3837 = _3836 * _3836;
                                float _3838 = _3784 - _3258;
                                float _3839 = _3785 - _3259;
                                float _3840 = _3786 - _3260;
                                float _3844 = inversesqrt(dot(vec3(_3838, _3839, _3840), vec3(_3838, _3839, _3840)));
                                float _3848 = dot(vec3(_963, _966, _969), vec3((-0.0) - _3258, (-0.0) - _3259, (-0.0) - _3260));
                                float _5028 = isnan(0.0) ? _3848 : (isnan(_3848) ? 0.0 : max(_3848, 0.0));
                                float _3851 = isnan(1.0) ? _5028 : (isnan(_5028) ? 1.0 : min(_5028, 1.0));
                                float _3852 = dot(vec3(_963, _966, _969), vec3(_3844 * _3838, _3844 * _3839, _3844 * _3840));
                                float _5039 = isnan(0.0) ? _3852 : (isnan(_3852) ? 0.0 : max(_3852, 0.0));
                                float _3855 = isnan(1.0) ? _5039 : (isnan(_5039) ? 1.0 : min(_5039, 1.0));
                                float _3859 = ((_3855 * _3855) * (_3837 + (-1.0))) + 1.0;
                                float _3860 = _3797 * _3836;
                                float _3861 = _3860 * _3860;
                                float _3867 = ((1.0 - _3861) * dot(vec3(_963, _966, _969), vec3(_3784, _3785, _3786))) + _3861;
                                float _5050 = isnan(0.0) ? _3867 : (isnan(_3867) ? 0.0 : max(_3867, 0.0));
                                float _3868 = isnan(1.0) ? _5050 : (isnan(_5050) ? 1.0 : min(_5050, 1.0));
                                float _3869 = 1.0 - _3836;
                                float _3879 = (0.5 / (((_3868 * ((_3851 * _3869) + _3836)) + 9.9999999392252902907785028219223e-09) + (((_3868 * _3869) + _3836) * _3851))) * _3868;
                                float _5061 = isnan(0.0) ? _3879 : (isnan(_3879) ? 0.0 : max(_3879, 0.0));
                                float _3889 = (_3814 * _3791) * (((_3837 * 3.1415927410125732421875) * (isnan(1.0) ? _5061 : (isnan(_5061) ? 1.0 : min(_5061, 1.0)))) / ((_3859 * _3859) * ((_3804 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_88_pred = _3815 * _3661.z;
                                frontier_phi_88_pred_1 = _3815 * _3661.y;
                                frontier_phi_88_pred_2 = _3815 * _3661.x;
                                frontier_phi_88_pred_3 = _3889 * _3673.z;
                                frontier_phi_88_pred_4 = _3889 * _3673.y;
                                frontier_phi_88_pred_5 = _3889 * _3673.x;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _3898 = frontier_phi_88_pred;
                            _3897 = frontier_phi_88_pred_1;
                            _3896 = frontier_phi_88_pred_2;
                            _3895 = frontier_phi_88_pred_3;
                            _3894 = frontier_phi_88_pred_4;
                            _3893 = frontier_phi_88_pred_5;
                            _3603 = _3896 + _3616;
                            _3604 = _3897 + _3617;
                            _3605 = _3898 + _3618;
                            _3600 = _3893 + _3613;
                            _3601 = _3894 + _3614;
                            _3602 = _3895 + _3615;
                            if (_3620 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3613 = _3600;
                                _3614 = _3601;
                                _3615 = _3602;
                                _3616 = _3603;
                                _3617 = _3604;
                                _3618 = _3605;
                                _3619 = _3620;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _3605;
                        frontier_phi_82_pred_1 = _3604;
                        frontier_phi_82_pred_2 = _3603;
                        frontier_phi_82_pred_3 = _3602;
                        frontier_phi_82_pred_4 = _3601;
                        frontier_phi_82_pred_5 = _3600;
                    }
                    _3243 = frontier_phi_82_pred;
                    _3241 = frontier_phi_82_pred_1;
                    _3239 = frontier_phi_82_pred_2;
                    _3237 = frontier_phi_82_pred_3;
                    _3235 = frontier_phi_82_pred_4;
                    _3233 = frontier_phi_82_pred_5;
                    uint _3399 = _3398 + 1u;
                    if (_3399 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3392 = _3233;
                        _3393 = _3235;
                        _3394 = _3237;
                        _3395 = _3239;
                        _3396 = _3241;
                        _3397 = _3243;
                        _3398 = _3399;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _3239;
                frontier_phi_63_64_ladder_1 = _3243;
                frontier_phi_63_64_ladder_2 = _3241;
                frontier_phi_63_64_ladder_3 = _3237;
                frontier_phi_63_64_ladder_4 = _3235;
                frontier_phi_63_64_ladder_5 = _3233;
            }
            else
            {
                frontier_phi_63_64_ladder = _3117;
                frontier_phi_63_64_ladder_1 = _3121;
                frontier_phi_63_64_ladder_2 = _3119;
                frontier_phi_63_64_ladder_3 = _3115;
                frontier_phi_63_64_ladder_4 = _3113;
                frontier_phi_63_64_ladder_5 = _3111;
            }
            _3232 = frontier_phi_63_64_ladder_5;
            _3234 = frontier_phi_63_64_ladder_4;
            _3236 = frontier_phi_63_64_ladder_3;
            _3238 = frontier_phi_63_64_ladder;
            _3240 = frontier_phi_63_64_ladder_2;
            _3242 = frontier_phi_63_64_ladder_1;
        }
        float _3247 = isnan(1.0) ? _1007 : (isnan(_1007) ? 1.0 : min(_1007, 1.0));
        _3044 = (_3247 * _3238) + _2575;
        _3046 = (_3247 * _3240) + _2577;
        _3048 = (_3247 * _3242) + _2579;
        _3050 = ((_3232 * 0.039999999105930328369140625) * _3247) + _2898;
        _3052 = ((_3234 * 0.039999999105930328369140625) * _3247) + _2900;
        _3054 = ((_3236 * 0.039999999105930328369140625) * _3247) + _2902;
    }
    else
    {
        _3044 = _2575;
        _3046 = _2577;
        _3048 = _2579;
        _3050 = _2898;
        _3052 = _2900;
        _3054 = _2902;
    }
    float _5077 = isnan(0.0) ? _992 : (isnan(_992) ? 0.0 : max(_992, 0.0));
    float _5088 = isnan(0.0) ? _993 : (isnan(_993) ? 0.0 : max(_993, 0.0));
    float _5099 = isnan(0.0) ? _994 : (isnan(_994) ? 0.0 : max(_994, 0.0));
    float _3071 = ((isnan(1.0) ? _5077 : (isnan(_5077) ? 1.0 : min(_5077, 1.0))) * (_3044 + ((isnan(0.0) ? _1764 : (isnan(_1764) ? 0.0 : max(_1764, 0.0))) * _1007))) + ((_3050 + ((isnan(0.0) ? _2056 : (isnan(_2056) ? 0.0 : max(_2056, 0.0))) * _1843)) * cbPerFrame._m0[3u].x);
    float _3072 = ((isnan(1.0) ? _5088 : (isnan(_5088) ? 1.0 : min(_5088, 1.0))) * (_3046 + ((isnan(0.0) ? _1767 : (isnan(_1767) ? 0.0 : max(_1767, 0.0))) * _1007))) + ((_3052 + ((isnan(0.0) ? _2059 : (isnan(_2059) ? 0.0 : max(_2059, 0.0))) * _1843)) * cbPerFrame._m0[3u].x);
    float _3073 = ((isnan(1.0) ? _5099 : (isnan(_5099) ? 1.0 : min(_5099, 1.0))) * (_3048 + ((isnan(0.0) ? _1770 : (isnan(_1770) ? 0.0 : max(_1770, 0.0))) * _1007))) + ((_3054 + ((isnan(0.0) ? _2062 : (isnan(_2062) ? 0.0 : max(_2062, 0.0))) * _1843)) * cbPerFrame._m0[3u].x);
    uint _3074 = _276 + 6u;
    float _3082 = _944 / cbSceneParam._m0[86u].x;
    float _3083 = _945 / cbSceneParam._m0[86u].y;
    vec4 _3097 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3082, _3083, (log2((isnan(cbSceneParam._m0[77u].w) ? _866 : (isnan(_866) ? cbSceneParam._m0[77u].w : min(_866, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3099 = _3097.x;
    float _3100 = _3097.y;
    float _3101 = _3097.z;
    float _3102 = _3097.w;
    float _3174;
    float _3176;
    float _3178;
    float _3180;
    if (_866 > cbSceneParam._m0[78u].w)
    {
        float _3136 = isnan(_866) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _866 : min(cbSceneParam._m0[80u].w, _866));
        float _3137 = _3136 / _866;
        float _3148 = _3137 * _917;
        float _3149 = _918 * _3137;
        float _3150 = (-0.0) - _3149;
        float _3152 = _3137 * _919;
        float _3154 = (cbSceneParam._m0[77u].w * _3150) / _3136;
        float _3155 = _3154 + cbSceneParam._m0[79u].w;
        float _3156 = cbSceneParam._m0[79u].w - _3149;
        float _3162 = sqrt(((_3148 * _3148) + (_3149 * _3149)) + (_3152 * _3152));
        float _3165 = (1.0 - (cbSceneParam._m0[77u].w / _3136)) * _3162;
        float _3170 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3172 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3349;
        if (abs((_3150 - _3154) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3349 = ((((_3155 > 0.0) ? exp2(_3170 * _3155) : (2.0 - exp2(_3172 * _3155))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3165;
        }
        else
        {
            float _3293 = 1.0 / cbSceneParam._m0[80u].x;
            float _3294 = isnan(_3156) ? _3155 : (isnan(_3155) ? _3156 : max(_3155, _3156));
            float _3295 = isnan(_3156) ? _3155 : (isnan(_3155) ? _3156 : min(_3155, _3156));
            float _3304 = isnan(0.0) ? _3294 : (isnan(_3294) ? 0.0 : min(_3294, 0.0));
            float _3305 = isnan(0.0) ? _3295 : (isnan(_3295) ? 0.0 : min(_3295, 0.0));
            _3349 = ((abs(_3162 / _3150) * cbSceneParam._m0[80u].y) * ((((_3304 - _3305) * 2.0) - ((exp2(_3170 * (isnan(0.0) ? _3294 : (isnan(_3294) ? 0.0 : max(_3294, 0.0)))) - exp2(_3170 * (isnan(0.0) ? _3295 : (isnan(_3295) ? 0.0 : max(_3295, 0.0))))) * _3293)) - ((exp2(_3172 * _3304) - exp2(_3172 * _3305)) * _3293))) + (_3165 * cbSceneParam._m0[80u].z);
        }
        vec4 _3351 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3082, _3083, 1.0), 0.0);
        float _3360 = exp2((_3349 * (-1.44269502162933349609375)) * (1.0 - _3351.w));
        float _3361 = log2(_3360);
        float _3377 = log2(_3102);
        _3174 = (exp2(_3377 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3361 * cbSceneParam._m0[78u].x)) * _3351.x) / cbSceneParam._m0[78u].x)) + _3099;
        _3176 = (exp2(_3377 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3361 * cbSceneParam._m0[78u].y)) * _3351.y) / cbSceneParam._m0[78u].y)) + _3100;
        _3178 = (exp2(_3377 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3361 * cbSceneParam._m0[78u].z)) * _3351.z) / cbSceneParam._m0[78u].z)) + _3101;
        _3180 = _3360 * _3102;
    }
    else
    {
        _3174 = _3099;
        _3176 = _3100;
        _3178 = _3101;
        _3180 = _3102;
    }
    bool _3387;
    vec4 _3190;
    vec4 _3212;
    float _3214;
    float _3218;
    float _3219;
    float _3220;
    float _3221;
    bool _3231;
    for (;;)
    {
        _3190 = cbMatDynParam._m0[0u];
        float _3192 = roundEven(_3190.y);
        bool _3193 = _3192 == 3.0;
        float _3194 = log2(_3180);
        float _3201 = exp2(_3194 * cbSceneParam._m0[78u].x) * _3071;
        float _3202 = exp2(_3194 * cbSceneParam._m0[78u].y) * _3072;
        float _3203 = exp2(_3194 * cbSceneParam._m0[78u].z) * _3073;
        float _3210 = _933 + (-0.5);
        _3212 = cbMtdParam._m0[1u];
        _3214 = _3212.y * _3210;
        float _3217 = (_3192 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3218 = _3217 * (_3193 ? _3201 : (_3201 + (cbSceneParam._m0[72u].w * _3174)));
        _3219 = _3217 * (_3193 ? _3202 : (_3202 + (cbSceneParam._m0[72u].w * _3176)));
        _3220 = _3217 * (_3193 ? _3203 : (_3203 + (cbSceneParam._m0[72u].w * _3178)));
        _3221 = _3210 * 0.999000012874603271484375;
        _3231 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3231)
        {
            if ((cbInstanceData._m0[_276 + 7u].x + _3221) < 0.5)
            {
                _3387 = true;
                break;
            }
        }
        uint _3328 = _982 + uint(_3190.w);
        if ((cbInstanceData._m0[_3328].w < 1.0) && ((cbInstanceData._m0[_3328].w + _3221) < 0.5))
        {
            _3387 = true;
            break;
        }
        if ((_3214 + 1.0) < _3212.x)
        {
            _3387 = true;
            break;
        }
        _3387 = false;
        break;
    }
    float _3591;
    if (_3387)
    {
        discard_state = true;
        _3591 = 0.0;
    }
    else
    {
        _3591 = cbInstanceData._m0[_3074].w;
    }
    SV_Target.x = _3218;
    SV_Target.y = _3219;
    SV_Target.z = _3220;
    SV_Target.w = _3591;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_3074].w;
    discard_exit();
}


