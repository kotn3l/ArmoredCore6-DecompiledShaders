#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_0;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_29;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_6;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1160;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _213 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _214 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _215 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _221 = inversesqrt(dot(vec3(_213, _214, _215), vec3(_213, _214, _215)));
    float _228 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _235 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _241 = uint(roundEven(NORMAL.w)) * 13u;
    uint _246 = _241 + 1u;
    uint _250 = _241 + 2u;
    float _259 = sqrt(((cbInstanceData._m0[_246].x * cbInstanceData._m0[_246].x) + (cbInstanceData._m0[_241].x * cbInstanceData._m0[_241].x)) + (cbInstanceData._m0[_250].x * cbInstanceData._m0[_250].x));
    float _260 = _259 * TEXCOORD.z;
    float _261 = _259 * TEXCOORD.w;
    vec4 _280 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _304 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _309 = _304.x * cbMtdParam._m0[11u].x;
    float _310 = _304.y * cbMtdParam._m0[11u].y;
    float _311 = _304.z * cbMtdParam._m0[11u].z;
    vec4 _330 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _260) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _261) + cbTextureTilingScale._m0[5u].w));
    vec4 _383 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _385 = _383.x;
    float _397 = dot(vec4(_385, _383.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _414 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w)).x) * 2.0) - ((((_385 - _397) * cbMtdParam._m0[24u].z) + _397) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3469 = isnan(0.0) ? _414 : (isnan(_414) ? 0.0 : max(_414, 0.0));
    float _415 = isnan(1.0) ? _3469 : (isnan(_3469) ? 1.0 : min(_3469, 1.0));
    float _428 = ((cbMtdParam._m0[9u].x * 4.55000019073486328125) * _280.x) * ((_415 * ((_330.x * cbMtdParam._m0[12u].x) - _309)) + _309);
    float _431 = ((cbMtdParam._m0[9u].y * 4.55000019073486328125) * _280.y) * ((_415 * ((_330.y * cbMtdParam._m0[12u].y) - _310)) + _310);
    float _434 = ((cbMtdParam._m0[9u].z * 4.55000019073486328125) * _280.z) * ((_415 * ((_330.z * cbMtdParam._m0[12u].z) - _311)) + _311);
    vec4 _447 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _260) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _261) + cbTextureTilingScale._m0[4u].w));
    vec4 _464 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _466 = _464.x;
    float _467 = _464.y;
    float _468 = _464.z;
    float _477 = ((_447.z - _468) * _415) + _468;
    float _480 = ((((_447.x - _466) * _415) + _466) * 2.0) + (-1.0);
    float _482 = ((((_447.y - _467) * _415) + _467) * 2.0) + (-1.0);
    float _483 = dot(vec2(_480, _482), vec2(_480, _482));
    float _3480 = isnan(0.0) ? _483 : (isnan(_483) ? 0.0 : max(_483, 0.0));
    float _488 = sqrt(1.0 - (isnan(1.0) ? _3480 : (isnan(_3480) ? 1.0 : min(_3480, 1.0))));
    vec4 _504 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _516 = (((_504.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _480;
    float _517 = (((_504.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _482;
    vec4 _529 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _260) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _261) + cbTextureTilingScale._m0[19u].w));
    float _531 = _529.x;
    float _532 = 1.0 - _531;
    float _560 = (TEXCOORD_8.x - ((cbMtdParam._m0[22u].w * (1.0 - TEXCOORD_8.x)) * ((((_531 - _532) * cbMtdParam._m0[24u].y) + _532) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3491 = isnan(0.0) ? _560 : (isnan(_560) ? 0.0 : max(_560, 0.0));
    float _561 = isnan(1.0) ? _3491 : (isnan(_3491) ? 1.0 : min(_3491, 1.0));
    float _569 = ((((cbMtdParam._m0[10u].x - _428) * TEXCOORD_8.x) * cbMtdParam._m0[23u].w) * _561) + _428;
    float _570 = ((((cbMtdParam._m0[10u].y - _431) * TEXCOORD_8.y) * cbMtdParam._m0[23u].w) * _561) + _431;
    float _571 = (((cbMtdParam._m0[23u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _434)) * _561) + _434;
    float _575 = (cbMtdParam._m0[19u].w * (_504.z - _477)) + _477;
    float _579 = ((cbMtdParam._m0[23u].y - _575) * _561) + _575;
    vec4 _598 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _260) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _261) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _604 = (_598.x * 2.0) + (-1.0);
    float _605 = (_598.y * 2.0) + (-1.0);
    float _606 = dot(vec2(_604, _605), vec2(_604, _605));
    float _3502 = isnan(0.0) ? _606 : (isnan(_606) ? 0.0 : max(_606, 0.0));
    float _622 = (_561 * (((cbMtdParam._m0[22u].z * _516) - _516) + _604)) + _516;
    float _623 = (_561 * (((cbMtdParam._m0[22u].z * _517) - _517) + _605)) + _517;
    float _624 = (_561 * (sqrt(1.0 - (isnan(1.0) ? _3502 : (isnan(_3502) ? 1.0 : min(_3502, 1.0)))) - _488)) + _488;
    float _626 = cbMtdParam._m0[22u].x + _504.w;
    float _629 = fma(_624, _228 * NORMAL.x, fma(_623, _235 * TANGENT.x, (_221 * _213) * _622));
    float _632 = fma(_624, _228 * NORMAL.y, fma(_623, _235 * TANGENT.y, (_221 * _214) * _622));
    float _635 = fma(_624, _228 * NORMAL.z, fma(_623, _235 * TANGENT.z, (_221 * _215) * _622));
    float _639 = inversesqrt(dot(vec3(_629, _632, _635), vec3(_629, _632, _635)));
    float _640 = _639 * _629;
    float _641 = _639 * _632;
    float _642 = _639 * _635;
    float _3513 = isnan(0.0) ? _579 : (isnan(_579) ? 0.0 : max(_579, 0.0));
    float _643 = isnan(1.0) ? _3513 : (isnan(_3513) ? 1.0 : min(_3513, 1.0));
    float _3524 = isnan(0.0) ? _626 : (isnan(_626) ? 0.0 : max(_626, 0.0));
    float _3535 = isnan(0.0) ? _569 : (isnan(_569) ? 0.0 : max(_569, 0.0));
    float _3546 = isnan(0.0) ? _570 : (isnan(_570) ? 0.0 : max(_570, 0.0));
    float _3557 = isnan(0.0) ? _571 : (isnan(_571) ? 0.0 : max(_571, 0.0));
    float _661 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _701 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _711 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _701);
    float _712 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _701);
    float _713 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _701);
    float _717 = inversesqrt(dot(vec3(_711, _712, _713), vec3(_711, _712, _713)));
    float _718 = _711 * _717;
    float _719 = _712 * _717;
    float _720 = _713 * _717;
    float _726 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _727 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _745 = fma(_642, cbSceneParam._m0[5u].z, fma(_641, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _640));
    float _748 = fma(_642, cbSceneParam._m0[6u].z, fma(_641, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _640));
    float _751 = fma(_642, cbSceneParam._m0[7u].z, fma(_641, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _640));
    uint _765 = (_241 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _771 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3535 : (isnan(_3535) ? 1.0 : min(_3535, 1.0)))) * cbInstanceData._m0[_765].x;
    float _772 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3546 : (isnan(_3546) ? 1.0 : min(_3546, 1.0)))) * cbInstanceData._m0[_765].y;
    float _773 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3557 : (isnan(_3557) ? 1.0 : min(_3557, 1.0)))) * cbInstanceData._m0[_765].z;
    float _3568 = isnan(0.0) ? _771 : (isnan(_771) ? 0.0 : max(_771, 0.0));
    float _774 = isnan(1.0) ? _3568 : (isnan(_3568) ? 1.0 : min(_3568, 1.0));
    float _3579 = isnan(0.0) ? _772 : (isnan(_772) ? 0.0 : max(_772, 0.0));
    float _775 = isnan(1.0) ? _3579 : (isnan(_3579) ? 1.0 : min(_3579, 1.0));
    float _3590 = isnan(0.0) ? _773 : (isnan(_773) ? 0.0 : max(_773, 0.0));
    float _776 = isnan(1.0) ? _3590 : (isnan(_3590) ? 1.0 : min(_3590, 1.0));
    vec4 _785 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _726, cbSceneParam._m0[86u].y * _727));
    float _789 = ((isnan(1.0) ? _3524 : (isnan(_3524) ? 1.0 : min(_3524, 1.0))) * TEXCOORD_5.w) * _785.x;
    float _790 = dot(vec3(_640, _641, _642), vec3(_718, _719, _720));
    float _793 = _790 * 2.0;
    float _797 = (_793 * _640) - _718;
    float _798 = (_793 * _641) - _719;
    float _799 = (_793 * _642) - _720;
    float _803 = abs(dot(vec3(_718, _719, _720), vec3(_640, _641, _642)));
    float _3601 = isnan(0.0) ? _803 : (isnan(_803) ? 0.0 : max(_803, 0.0));
    float _805 = sqrt(_643);
    float _818 = exp2((_805 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3601 : (isnan(_3601) ? 1.0 : min(_3601, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_805 * 3.0));
    float _850 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _854 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _858 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1159;
    float _1161;
    float _1162;
    float _1163;
    float _1164;
    float _1165;
    float _1166;
    float _1167;
    float _1168;
    float _1169;
    float _1170;
    float _1171;
    float _1172;
    float _1173;
    float _1174;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _884 = fma(_858, cbModelParam._m0[26u].z, fma(_854, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _850));
        float _888 = fma(_858, cbModelParam._m0[27u].z, fma(_854, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _850));
        float _892 = fma(_858, cbModelParam._m0[28u].z, fma(_854, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _850));
        float _917 = _850 + _640;
        float _918 = _854 + _641;
        float _919 = _858 + _642;
        float _929 = fma(_919, cbModelParam._m0[26u].z, fma(_918, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _917)) - _884;
        float _930 = fma(_919, cbModelParam._m0[27u].z, fma(_918, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _917)) - _888;
        float _931 = fma(_919, cbModelParam._m0[28u].z, fma(_918, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _917)) - _892;
        float _935 = inversesqrt(dot(vec3(_929, _930, _931), vec3(_929, _930, _931)));
        float _948 = ((_935 * _929) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_884 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _949 = ((_935 * _930) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_888 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _950 = ((_935 * _931) / cbModelParam._m0[34u].z) + ((((((_892 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _953 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_948, _949, _950), 0.0);
        vec4 _960 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_948, _949, _950), 0.0);
        vec4 _967 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_948, _949, _950), 0.0);
        vec4 _974 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_948, _949, _950), 0.0);
        float _987 = exp2((_953.w + (-0.5)) * 20.0) * 2.0;
        float _988 = _987 * (_953.x + (-0.5));
        float _989 = _987 * (_953.y + (-0.5));
        float _990 = _987 * (_953.z + (-0.5));
        float _997 = exp2((_960.w + (-0.5)) * 20.0) * 2.0;
        float _998 = _997 * (_960.x + (-0.5));
        float _999 = _997 * (_960.y + (-0.5));
        float _1000 = _997 * (_960.z + (-0.5));
        float _1007 = exp2((_967.w + (-0.5)) * 20.0) * 2.0;
        float _1008 = _1007 * (_967.x + (-0.5));
        float _1009 = _1007 * (_967.y + (-0.5));
        float _1010 = _1007 * (_967.z + (-0.5));
        float _1017 = exp2((_974.w + (-0.5)) * 20.0) * 2.0;
        float _1018 = _1017 * (_974.x + (-0.5));
        float _1019 = _1017 * (_974.y + (-0.5));
        float _1020 = _1017 * (_974.z + (-0.5));
        float _1021 = isnan(0.0) ? _1018 : (isnan(_1018) ? 0.0 : max(_1018, 0.0));
        float _1022 = isnan(0.0) ? _1019 : (isnan(_1019) ? 0.0 : max(_1019, 0.0));
        float _1023 = isnan(0.0) ? _1020 : (isnan(_1020) ? 0.0 : max(_1020, 0.0));
        float _1024 = _988 * 0.5;
        float _1025 = _998 * 0.5;
        float _1026 = _1008 * 0.5;
        float _1027 = dot(vec3(_1024, _1025, _1026), vec3(_1024, _1025, _1026));
        float _1032 = (_1027 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1027);
        float _1041 = (dot(vec3(_640, _641, _642), vec3(_1032 * _1024, _1032 * _1025, _1032 * _1026)) + 1.0) * 0.5;
        float _3627 = isnan(0.0) ? _1041 : (isnan(_1041) ? 0.0 : max(_1041, 0.0));
        float _1051 = sqrt(((_1025 * _1025) + (_1024 * _1024)) + (_1026 * _1026)) / (_1021 + 9.9999997473787516355514526367188e-06);
        float _3638 = isnan(0.0) ? _1051 : (isnan(_1051) ? 0.0 : max(_1051, 0.0));
        float _1052 = isnan(1.0) ? _3638 : (isnan(_3638) ? 1.0 : min(_3638, 1.0));
        float _1053 = _1052 * 2.0;
        float _1057 = (1.0 - _1052) / (_1052 + 1.0);
        float _3649 = isnan(0.0) ? _1057 : (isnan(_1057) ? 0.0 : max(_1057, 0.0));
        float _1058 = isnan(1.0) ? _3649 : (isnan(_3649) ? 1.0 : min(_3649, 1.0));
        float _1067 = ((((1.0 - _1058) * (_1053 + 2.0)) * exp2(log2(isnan(1.0) ? _3627 : (isnan(_3627) ? 1.0 : min(_3627, 1.0))) * (_1053 + 1.0))) + _1058) * _1021;
        float _1068 = _989 * 0.5;
        float _1069 = _999 * 0.5;
        float _1070 = _1009 * 0.5;
        float _1071 = dot(vec3(_1068, _1069, _1070), vec3(_1068, _1069, _1070));
        float _1076 = (_1071 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1071);
        float _1084 = (dot(vec3(_640, _641, _642), vec3(_1076 * _1068, _1076 * _1069, _1076 * _1070)) + 1.0) * 0.5;
        float _3660 = isnan(0.0) ? _1084 : (isnan(_1084) ? 0.0 : max(_1084, 0.0));
        float _1093 = sqrt(((_1069 * _1069) + (_1068 * _1068)) + (_1070 * _1070)) / (_1022 + 9.9999997473787516355514526367188e-06);
        float _3671 = isnan(0.0) ? _1093 : (isnan(_1093) ? 0.0 : max(_1093, 0.0));
        float _1094 = isnan(1.0) ? _3671 : (isnan(_3671) ? 1.0 : min(_3671, 1.0));
        float _1095 = _1094 * 2.0;
        float _1099 = (1.0 - _1094) / (_1094 + 1.0);
        float _3682 = isnan(0.0) ? _1099 : (isnan(_1099) ? 0.0 : max(_1099, 0.0));
        float _1100 = isnan(1.0) ? _3682 : (isnan(_3682) ? 1.0 : min(_3682, 1.0));
        float _1109 = ((((1.0 - _1100) * (_1095 + 2.0)) * exp2(log2(isnan(1.0) ? _3660 : (isnan(_3660) ? 1.0 : min(_3660, 1.0))) * (_1095 + 1.0))) + _1100) * _1022;
        float _1110 = _990 * 0.5;
        float _1111 = _1000 * 0.5;
        float _1112 = _1010 * 0.5;
        float _1113 = dot(vec3(_1110, _1111, _1112), vec3(_1110, _1111, _1112));
        float _1118 = (_1113 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1113);
        float _1126 = (dot(vec3(_640, _641, _642), vec3(_1118 * _1110, _1118 * _1111, _1118 * _1112)) + 1.0) * 0.5;
        float _3693 = isnan(0.0) ? _1126 : (isnan(_1126) ? 0.0 : max(_1126, 0.0));
        float _1135 = sqrt(((_1111 * _1111) + (_1110 * _1110)) + (_1112 * _1112)) / (_1023 + 9.9999997473787516355514526367188e-06);
        float _3704 = isnan(0.0) ? _1135 : (isnan(_1135) ? 0.0 : max(_1135, 0.0));
        float _1136 = isnan(1.0) ? _3704 : (isnan(_3704) ? 1.0 : min(_3704, 1.0));
        float _1137 = _1136 * 2.0;
        float _1141 = (1.0 - _1136) / (_1136 + 1.0);
        float _3715 = isnan(0.0) ? _1141 : (isnan(_1141) ? 0.0 : max(_1141, 0.0));
        float _1142 = isnan(1.0) ? _3715 : (isnan(_3715) ? 1.0 : min(_3715, 1.0));
        float _1151 = ((((1.0 - _1142) * (_1137 + 2.0)) * exp2(log2(isnan(1.0) ? _3693 : (isnan(_3693) ? 1.0 : min(_3693, 1.0))) * (_1137 + 1.0))) + _1142) * _1023;
        _1159 = _990;
        _1161 = _989;
        _1162 = _988;
        _1163 = _1000;
        _1164 = _999;
        _1165 = _998;
        _1166 = _1010;
        _1167 = _1009;
        _1168 = _1008;
        _1169 = _1023;
        _1170 = _1022;
        _1171 = _1021;
        _1172 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1067 : (isnan(_1067) ? 0.0 : max(_1067, 0.0)));
        _1173 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1109 : (isnan(_1109) ? 0.0 : max(_1109, 0.0)));
        _1174 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1151 : (isnan(_1151) ? 0.0 : max(_1151, 0.0)));
    }
    else
    {
        _1159 = _1160;
        _1161 = _1160;
        _1162 = _1160;
        _1163 = _1160;
        _1164 = _1160;
        _1165 = _1160;
        _1166 = _1160;
        _1167 = _1160;
        _1168 = _1160;
        _1169 = _1160;
        _1170 = _1160;
        _1171 = _1160;
        _1172 = 0.0;
        _1173 = 0.0;
        _1174 = 0.0;
    }
    float _1468;
    float _1469;
    float _1470;
    float _1471;
    float _1472;
    float _1473;
    float _1474;
    float _1475;
    float _1476;
    float _1477;
    float _1478;
    float _1479;
    float _1480;
    float _1481;
    float _1482;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1199 = fma(_858, cbModelParam._m0[30u].z, fma(_854, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _850));
        float _1203 = fma(_858, cbModelParam._m0[31u].z, fma(_854, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _850));
        float _1207 = fma(_858, cbModelParam._m0[32u].z, fma(_854, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _850));
        float _1230 = _850 + _640;
        float _1231 = _854 + _641;
        float _1232 = _858 + _642;
        float _1242 = fma(_1232, cbModelParam._m0[30u].z, fma(_1231, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1230)) - _1199;
        float _1243 = fma(_1232, cbModelParam._m0[31u].z, fma(_1231, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1230)) - _1203;
        float _1244 = fma(_1232, cbModelParam._m0[32u].z, fma(_1231, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1230)) - _1207;
        float _1248 = inversesqrt(dot(vec3(_1242, _1243, _1244), vec3(_1242, _1243, _1244)));
        float _1261 = ((_1248 * _1242) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1199 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1262 = ((_1248 * _1243) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1203 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1263 = ((_1248 * _1244) / cbModelParam._m0[35u].z) + ((((((_1207 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1265 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1261, _1262, _1263), 0.0);
        vec4 _1272 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1261, _1262, _1263), 0.0);
        vec4 _1279 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1261, _1262, _1263), 0.0);
        vec4 _1286 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1261, _1262, _1263), 0.0);
        float _1298 = exp2((_1265.w + (-0.5)) * 20.0) * 2.0;
        float _1299 = _1298 * (_1265.x + (-0.5));
        float _1300 = _1298 * (_1265.y + (-0.5));
        float _1301 = _1298 * (_1265.z + (-0.5));
        float _1308 = exp2((_1272.w + (-0.5)) * 20.0) * 2.0;
        float _1309 = _1308 * (_1272.x + (-0.5));
        float _1310 = _1308 * (_1272.y + (-0.5));
        float _1311 = _1308 * (_1272.z + (-0.5));
        float _1318 = exp2((_1279.w + (-0.5)) * 20.0) * 2.0;
        float _1319 = _1318 * (_1279.x + (-0.5));
        float _1320 = _1318 * (_1279.y + (-0.5));
        float _1321 = _1318 * (_1279.z + (-0.5));
        float _1328 = exp2((_1286.w + (-0.5)) * 20.0) * 2.0;
        float _1329 = _1328 * (_1286.x + (-0.5));
        float _1330 = _1328 * (_1286.y + (-0.5));
        float _1331 = _1328 * (_1286.z + (-0.5));
        float _1332 = isnan(0.0) ? _1329 : (isnan(_1329) ? 0.0 : max(_1329, 0.0));
        float _1333 = isnan(0.0) ? _1330 : (isnan(_1330) ? 0.0 : max(_1330, 0.0));
        float _1334 = isnan(0.0) ? _1331 : (isnan(_1331) ? 0.0 : max(_1331, 0.0));
        float _1335 = _1299 * 0.5;
        float _1336 = _1309 * 0.5;
        float _1337 = _1319 * 0.5;
        float _1338 = dot(vec3(_1335, _1336, _1337), vec3(_1335, _1336, _1337));
        float _1343 = (_1338 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1338);
        float _1351 = (dot(vec3(_640, _641, _642), vec3(_1343 * _1335, _1343 * _1336, _1343 * _1337)) + 1.0) * 0.5;
        float _3756 = isnan(0.0) ? _1351 : (isnan(_1351) ? 0.0 : max(_1351, 0.0));
        float _1360 = sqrt(((_1336 * _1336) + (_1335 * _1335)) + (_1337 * _1337)) / (_1332 + 9.9999997473787516355514526367188e-06);
        float _3767 = isnan(0.0) ? _1360 : (isnan(_1360) ? 0.0 : max(_1360, 0.0));
        float _1361 = isnan(1.0) ? _3767 : (isnan(_3767) ? 1.0 : min(_3767, 1.0));
        float _1362 = _1361 * 2.0;
        float _1366 = (1.0 - _1361) / (_1361 + 1.0);
        float _3778 = isnan(0.0) ? _1366 : (isnan(_1366) ? 0.0 : max(_1366, 0.0));
        float _1367 = isnan(1.0) ? _3778 : (isnan(_3778) ? 1.0 : min(_3778, 1.0));
        float _1376 = ((((1.0 - _1367) * (_1362 + 2.0)) * exp2(log2(isnan(1.0) ? _3756 : (isnan(_3756) ? 1.0 : min(_3756, 1.0))) * (_1362 + 1.0))) + _1367) * _1332;
        float _1377 = _1300 * 0.5;
        float _1378 = _1310 * 0.5;
        float _1379 = _1320 * 0.5;
        float _1380 = dot(vec3(_1377, _1378, _1379), vec3(_1377, _1378, _1379));
        float _1385 = (_1380 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1380);
        float _1393 = (dot(vec3(_640, _641, _642), vec3(_1385 * _1377, _1385 * _1378, _1385 * _1379)) + 1.0) * 0.5;
        float _3789 = isnan(0.0) ? _1393 : (isnan(_1393) ? 0.0 : max(_1393, 0.0));
        float _1402 = sqrt(((_1378 * _1378) + (_1377 * _1377)) + (_1379 * _1379)) / (_1333 + 9.9999997473787516355514526367188e-06);
        float _3800 = isnan(0.0) ? _1402 : (isnan(_1402) ? 0.0 : max(_1402, 0.0));
        float _1403 = isnan(1.0) ? _3800 : (isnan(_3800) ? 1.0 : min(_3800, 1.0));
        float _1404 = _1403 * 2.0;
        float _1408 = (1.0 - _1403) / (_1403 + 1.0);
        float _3811 = isnan(0.0) ? _1408 : (isnan(_1408) ? 0.0 : max(_1408, 0.0));
        float _1409 = isnan(1.0) ? _3811 : (isnan(_3811) ? 1.0 : min(_3811, 1.0));
        float _1418 = ((((1.0 - _1409) * (_1404 + 2.0)) * exp2(log2(isnan(1.0) ? _3789 : (isnan(_3789) ? 1.0 : min(_3789, 1.0))) * (_1404 + 1.0))) + _1409) * _1333;
        float _1419 = _1301 * 0.5;
        float _1420 = _1311 * 0.5;
        float _1421 = _1321 * 0.5;
        float _1422 = dot(vec3(_1419, _1420, _1421), vec3(_1419, _1420, _1421));
        float _1427 = (_1422 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1422);
        float _1435 = (dot(vec3(_640, _641, _642), vec3(_1427 * _1419, _1427 * _1420, _1427 * _1421)) + 1.0) * 0.5;
        float _3822 = isnan(0.0) ? _1435 : (isnan(_1435) ? 0.0 : max(_1435, 0.0));
        float _1444 = sqrt(((_1420 * _1420) + (_1419 * _1419)) + (_1421 * _1421)) / (_1334 + 9.9999997473787516355514526367188e-06);
        float _3833 = isnan(0.0) ? _1444 : (isnan(_1444) ? 0.0 : max(_1444, 0.0));
        float _1445 = isnan(1.0) ? _3833 : (isnan(_3833) ? 1.0 : min(_3833, 1.0));
        float _1446 = _1445 * 2.0;
        float _1450 = (1.0 - _1445) / (_1445 + 1.0);
        float _3844 = isnan(0.0) ? _1450 : (isnan(_1450) ? 0.0 : max(_1450, 0.0));
        float _1451 = isnan(1.0) ? _3844 : (isnan(_3844) ? 1.0 : min(_3844, 1.0));
        float _1460 = ((((1.0 - _1451) * (_1446 + 2.0)) * exp2(log2(isnan(1.0) ? _3822 : (isnan(_3822) ? 1.0 : min(_3822, 1.0))) * (_1446 + 1.0))) + _1451) * _1334;
        _1468 = _1301;
        _1469 = _1300;
        _1470 = _1299;
        _1471 = _1311;
        _1472 = _1310;
        _1473 = _1309;
        _1474 = _1321;
        _1475 = _1320;
        _1476 = _1319;
        _1477 = _1334;
        _1478 = _1333;
        _1479 = _1332;
        _1480 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1376 : (isnan(_1376) ? 0.0 : max(_1376, 0.0)));
        _1481 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1418 : (isnan(_1418) ? 0.0 : max(_1418, 0.0)));
        _1482 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1460 : (isnan(_1460) ? 0.0 : max(_1460, 0.0)));
    }
    else
    {
        _1468 = _1160;
        _1469 = _1160;
        _1470 = _1160;
        _1471 = _1160;
        _1472 = _1160;
        _1473 = _1160;
        _1474 = _1160;
        _1475 = _1160;
        _1476 = _1160;
        _1477 = _1160;
        _1478 = _1160;
        _1479 = _1160;
        _1480 = 0.0;
        _1481 = 0.0;
        _1482 = 0.0;
    }
    float _1492 = (cbModelParam._m0[1u].x * (_1480 - _1172)) + _1172;
    float _1493 = (cbModelParam._m0[1u].x * (_1481 - _1173)) + _1173;
    float _1494 = (cbModelParam._m0[1u].x * (_1482 - _1174)) + _1174;
    float _1515 = fma(_1494, cbSceneParam._m0[89u].z, fma(_1493, cbSceneParam._m0[89u].y, _1492 * cbSceneParam._m0[89u].x));
    float _1518 = fma(_1494, cbSceneParam._m0[90u].z, fma(_1493, cbSceneParam._m0[90u].y, _1492 * cbSceneParam._m0[90u].x));
    float _1521 = fma(_1494, cbSceneParam._m0[91u].z, fma(_1493, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1492));
    float _1536 = _797 * 0.5;
    float _1537 = _798 * 0.5;
    float _1538 = _799 * 0.5;
    float _1539 = dot(vec4(_1536, _1537, _1538, 1.0), vec4(_1470, _1473, _1476, _1479));
    float _1542 = dot(vec4(_1536, _1537, _1538, 1.0), vec4(_1469, _1472, _1475, _1478));
    float _1545 = dot(vec4(_1536, _1537, _1538, 1.0), vec4(_1468, _1471, _1474, _1477));
    float _1579;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1552 = dot(vec4(_1536, _1537, _1538, 1.0), vec4(_1159, _1163, _1166, _1169));
        float _1556 = dot(vec4(_1536, _1537, _1538, 1.0), vec4(_1161, _1164, _1167, _1170));
        float _1560 = dot(vec4(_1536, _1537, _1538, 1.0), vec4(_1162, _1165, _1168, _1171));
        float _1567 = dot(vec4(cbModelParam._m0[39u]), vec4(_1536, _1537, _1538, 1.0));
        _1579 = dot(vec3(isnan(0.0) ? _1560 : (isnan(_1560) ? 0.0 : max(_1560, 0.0)), isnan(0.0) ? _1556 : (isnan(_1556) ? 0.0 : max(_1556, 0.0)), isnan(0.0) ? _1552 : (isnan(_1552) ? 0.0 : max(_1552, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1567) ? 0.0 : (isnan(0.0) ? _1567 : max(0.0, _1567))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1579 = 1.0;
    }
    float _1590;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1581 = dot(vec4(cbModelParam._m0[40u]), vec4(_1536, _1537, _1538, 1.0));
        _1590 = dot(vec3(isnan(0.0) ? _1539 : (isnan(_1539) ? 0.0 : max(_1539, 0.0)), isnan(0.0) ? _1542 : (isnan(_1542) ? 0.0 : max(_1542, 0.0)), isnan(0.0) ? _1545 : (isnan(_1545) ? 0.0 : max(_1545, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1581) ? 0.0 : (isnan(0.0) ? _1581 : max(0.0, _1581))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1590 = 1.0;
    }
    float _1594 = (_1590 * cbModelParam._m0[1u].x) + (_1579 * (1.0 - cbModelParam._m0[1u].x));
    float _1604 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _643);
    float _1605 = isnan(_1604) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1604 : min(cbModelParam._m0[25u].z, _1604));
    float _1687;
    float _1689;
    float _1691;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1654 = fma(_858, cbModelParam._m0[13u].z, fma(_854, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _850)) + cbModelParam._m0[13u].w;
        float _1658 = fma(_858, cbModelParam._m0[14u].z, fma(_854, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _850)) + cbModelParam._m0[14u].w;
        float _1662 = fma(_858, cbModelParam._m0[15u].z, fma(_854, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _850)) + cbModelParam._m0[15u].w;
        float _1665 = fma(_799, cbModelParam._m0[13u].z, fma(_798, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _797));
        float _1668 = fma(_799, cbModelParam._m0[14u].z, fma(_798, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _797));
        float _1671 = fma(_799, cbModelParam._m0[15u].z, fma(_798, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _797));
        float _1699;
        if (_1665 > 0.0)
        {
            _1699 = abs((1.0 - _1654) / _1665);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1665 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1654 + 1.0) / _1665);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1699 = frontier_phi_14_12_ladder;
        }
        float _1901;
        if (_1668 > 0.0)
        {
            _1901 = abs((1.0 - _1658) / _1668);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1668 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1658 + 1.0) / _1668);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1901 = frontier_phi_23_19_ladder;
        }
        float _2144;
        if (_1671 > 0.0)
        {
            _2144 = abs((1.0 - _1662) / _1671);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1671 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1662 + 1.0) / _1671);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2144 = frontier_phi_35_30_ladder;
        }
        float _2146 = isnan(_1901) ? _1699 : (isnan(_1699) ? _1901 : min(_1699, _1901));
        float _2147 = isnan(_2144) ? _2146 : (isnan(_2146) ? _2144 : min(_2146, _2144));
        float _2151 = (_2147 * _1665) + _1654;
        float _2152 = (_2147 * _1668) + _1658;
        float _2153 = (_2147 * _1671) + _1662;
        float _2154 = _2147 * 9.9999997473787516355514526367188e-05;
        float _2156 = (-1.0) - _2154;
        float _2158 = _2154 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2153 > _2158) || ((_2153 < _2156) || ((_2152 > _2158) || ((_2152 < _2156) || ((_2151 < _2156) || (_2151 > _2158))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2277 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2153, cbModelParam._m0[9u].z, fma(_2152, cbModelParam._m0[9u].y, _2151 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2153, cbModelParam._m0[10u].z, fma(_2152, cbModelParam._m0[10u].y, _2151 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2153, cbModelParam._m0[11u].z, fma(_2152, cbModelParam._m0[11u].y, _2151 * cbModelParam._m0[11u].x))), _1605);
            frontier_phi_13_35_ladder = _2277.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2277.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2277.x * cbModelParam._m0[1u].y;
        }
        _1687 = frontier_phi_13_35_ladder_2;
        _1689 = frontier_phi_13_35_ladder_1;
        _1691 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1675 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_797, _798, _799), _1605);
        _1687 = _1675.x * cbModelParam._m0[1u].y;
        _1689 = _1675.y * cbModelParam._m0[1u].y;
        _1691 = _1675.z * cbModelParam._m0[1u].y;
    }
    float _1695 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _643);
    float _1696 = isnan(_1695) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1695 : min(cbModelParam._m0[25u].w, _1695));
    float _1787;
    float _1789;
    float _1791;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1751 = fma(_858, cbModelParam._m0[21u].z, fma(_854, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _850)) + cbModelParam._m0[21u].w;
        float _1755 = fma(_858, cbModelParam._m0[22u].z, fma(_854, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _850)) + cbModelParam._m0[22u].w;
        float _1759 = fma(_858, cbModelParam._m0[23u].z, fma(_854, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _850)) + cbModelParam._m0[23u].w;
        float _1762 = fma(_799, cbModelParam._m0[21u].z, fma(_798, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _797));
        float _1765 = fma(_799, cbModelParam._m0[22u].z, fma(_798, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _797));
        float _1768 = fma(_799, cbModelParam._m0[23u].z, fma(_798, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _797));
        float _1906;
        if (_1762 > 0.0)
        {
            _1906 = abs((1.0 - _1751) / _1762);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1762 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1751 + 1.0) / _1762);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1906 = frontier_phi_25_21_ladder;
        }
        float _2171;
        if (_1765 > 0.0)
        {
            _2171 = abs((1.0 - _1755) / _1765);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1765 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1755 + 1.0) / _1765);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2171 = frontier_phi_37_32_ladder;
        }
        float _2376;
        if (_1768 > 0.0)
        {
            _2376 = abs((1.0 - _1759) / _1768);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1768 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1759 + 1.0) / _1768);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2376 = frontier_phi_46_43_ladder;
        }
        float _2378 = isnan(_2171) ? _1906 : (isnan(_1906) ? _2171 : min(_1906, _2171));
        float _2379 = isnan(_2376) ? _2378 : (isnan(_2378) ? _2376 : min(_2378, _2376));
        float _2383 = (_2379 * _1762) + _1751;
        float _2384 = (_2379 * _1765) + _1755;
        float _2385 = (_2379 * _1768) + _1759;
        float _2386 = _2379 * 9.9999997473787516355514526367188e-05;
        float _2387 = (-1.0) - _2386;
        float _2389 = _2386 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2385 > _2389) || ((_2385 < _2387) || ((_2384 > _2389) || ((_2384 < _2387) || ((_2383 < _2387) || (_2383 > _2389))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2584 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2385, cbModelParam._m0[17u].z, fma(_2384, cbModelParam._m0[17u].y, _2383 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2385, cbModelParam._m0[18u].z, fma(_2384, cbModelParam._m0[18u].y, _2383 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2385, cbModelParam._m0[19u].z, fma(_2384, cbModelParam._m0[19u].y, _2383 * cbModelParam._m0[19u].x))), _1696);
            frontier_phi_22_46_ladder = _2584.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2584.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2584.x * cbModelParam._m0[1u].z;
        }
        _1787 = frontier_phi_22_46_ladder_2;
        _1789 = frontier_phi_22_46_ladder_1;
        _1791 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1771 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_797, _798, _799), _1696);
        _1787 = _1771.x * cbModelParam._m0[1u].z;
        _1789 = _1771.y * cbModelParam._m0[1u].z;
        _1791 = _1771.z * cbModelParam._m0[1u].z;
    }
    float _1803 = ((((1.0 - _818) * ((_805 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_818 * _805)) * _789;
    float _1804 = _1803 * ((cbModelParam._m0[1u].w * (_1787 - _1687)) + _1687);
    float _1805 = _1803 * ((cbModelParam._m0[1u].w * (_1789 - _1689)) + _1689);
    float _1806 = _1803 * ((cbModelParam._m0[1u].w * (_1791 - _1691)) + _1691);
    float _1809 = fma(_1806, cbSceneParam._m0[89u].z, fma(_1805, cbSceneParam._m0[89u].y, _1804 * cbSceneParam._m0[89u].x));
    float _1812 = fma(_1806, cbSceneParam._m0[90u].z, fma(_1805, cbSceneParam._m0[90u].y, _1804 * cbSceneParam._m0[90u].x));
    float _1815 = fma(_1806, cbSceneParam._m0[91u].z, fma(_1805, cbSceneParam._m0[91u].y, _1804 * cbSceneParam._m0[91u].x));
    uvec4 _1825 = floatBitsToUint(cbInstanceData._m0[_241 + 5u]);
    uint _1827 = _1825.x * 14u;
    uint _1828 = _1827 + 13u;
    float _1835 = _789 + (-1.0);
    float _1840 = (cbLight._m0[_1828].x * _1835) + 1.0;
    float _1841 = (cbLight._m0[_1828].y * _1835) + 1.0;
    float _1842 = (cbLight._m0[_1828].z * _1835) + 1.0;
    float _1843 = (cbLight._m0[_1828].w * _1835) + 1.0;
    uint _1844 = _1827 + 5u;
    float _1850 = isnan(1.0) ? _1841 : (isnan(_1841) ? 1.0 : min(_1841, 1.0));
    uint _1854 = _1827 + 4u;
    float _1860 = isnan(1.0) ? _1840 : (isnan(_1840) ? 1.0 : min(_1840, 1.0));
    uint _1864 = _1827 | 1u;
    float _1875 = dot(vec3(cbLight._m0[_1827].xyz), vec3(_640, _641, _642));
    float _1878 = dot(vec3(cbLight._m0[_1864].xyz), vec3(_640, _641, _642));
    float _3980 = isnan(0.0) ? _1875 : (isnan(_1875) ? 0.0 : max(_1875, 0.0));
    float _3991 = isnan(0.0) ? _1878 : (isnan(_1878) ? 0.0 : max(_1878, 0.0));
    float _1883 = (isnan(1.0) ? _3980 : (isnan(_3980) ? 1.0 : min(_3980, 1.0))) * 0.3183098733425140380859375;
    float _1885 = (isnan(1.0) ? _3991 : (isnan(_3991) ? 1.0 : min(_3991, 1.0))) * 0.3183098733425140380859375;
    float _1892 = ((cbLight._m0[_1844].x * _1850) * _1885) + ((cbLight._m0[_1854].x * _1860) * _1883);
    float _1893 = ((_1850 * cbLight._m0[_1844].y) * _1885) + ((_1860 * cbLight._m0[_1854].y) * _1883);
    float _1894 = ((_1850 * cbLight._m0[_1844].z) * _1885) + ((_1860 * cbLight._m0[_1854].z) * _1883);
    uvec4 _1898 = floatBitsToUint(cbLight._m0[_1827 + 12u]);
    bool _1900 = _1898.x == 0u;
    float _1911;
    float _1913;
    float _1915;
    if (_1900)
    {
        _1911 = _1892;
        _1913 = _1893;
        _1915 = _1894;
    }
    else
    {
        uint _1919 = _1827 + 6u;
        float _1935 = (dot(vec3(cbLight._m0[_1827 + 2u].xyz), vec3(_640, _641, _642)) * 0.5) + 0.5;
        float _1936 = _1935 * _1935;
        float _4002 = isnan(0.0) ? _1936 : (isnan(_1936) ? 0.0 : max(_1936, 0.0));
        float _1937 = isnan(1.0) ? _4002 : (isnan(_4002) ? 1.0 : min(_4002, 1.0));
        float _1938 = isnan(1.0) ? _1842 : (isnan(_1842) ? 1.0 : min(_1842, 1.0));
        _1911 = (((cbLight._m0[_1919].x * 0.3183098733425140380859375) * _1937) * _1938) + _1892;
        _1913 = (((cbLight._m0[_1919].y * 0.3183098733425140380859375) * _1937) * _1938) + _1893;
        _1915 = (((cbLight._m0[_1919].z * 0.3183098733425140380859375) * _1937) * _1938) + _1894;
    }
    bool _1918 = _1898.y == 0u;
    float _1956;
    float _1958;
    float _1960;
    if (_1918)
    {
        _1956 = _1911;
        _1958 = _1913;
        _1960 = _1915;
    }
    else
    {
        uint _2115 = _1827 + 7u;
        float _2131 = (dot(vec3(cbLight._m0[_1827 + 3u].xyz), vec3(_640, _641, _642)) * 0.5) + 0.5;
        float _2132 = _2131 * _2131;
        float _4018 = isnan(0.0) ? _2132 : (isnan(_2132) ? 0.0 : max(_2132, 0.0));
        float _2133 = isnan(1.0) ? _4018 : (isnan(_4018) ? 1.0 : min(_4018, 1.0));
        float _2134 = isnan(1.0) ? _1843 : (isnan(_1843) ? 1.0 : min(_1843, 1.0));
        _1956 = (((cbLight._m0[_2115].x * 0.3183098733425140380859375) * _2133) * _2134) + _1911;
        _1958 = (((cbLight._m0[_2115].y * 0.3183098733425140380859375) * _2133) * _2134) + _1913;
        _1960 = (((cbLight._m0[_2115].z * 0.3183098733425140380859375) * _2133) * _2134) + _1915;
    }
    uint _1963 = _1827 + 8u;
    float _1976 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1827].w)) * _643) * 0.949999988079071044921875);
    float _1977 = _1976 * _1976;
    float _1978 = cbLight._m0[_1827].x + _718;
    float _1979 = cbLight._m0[_1827].y + _719;
    float _1980 = cbLight._m0[_1827].z + _720;
    float _1984 = inversesqrt(dot(vec3(_1978, _1979, _1980), vec3(_1978, _1979, _1980)));
    float _1985 = _1984 * _1978;
    float _1986 = _1984 * _1979;
    float _1987 = _1984 * _1980;
    float _1988 = dot(vec3(_640, _641, _642), vec3(cbLight._m0[_1827].xyz));
    float _4034 = isnan(0.0) ? _1988 : (isnan(_1988) ? 0.0 : max(_1988, 0.0));
    float _1991 = isnan(1.0) ? _4034 : (isnan(_4034) ? 1.0 : min(_4034, 1.0));
    float _4045 = isnan(0.0) ? _790 : (isnan(_790) ? 0.0 : max(_790, 0.0));
    float _1992 = isnan(1.0) ? _4045 : (isnan(_4045) ? 1.0 : min(_4045, 1.0));
    float _1993 = dot(vec3(_640, _641, _642), vec3(_1985, _1986, _1987));
    float _4056 = isnan(0.0) ? _1993 : (isnan(_1993) ? 0.0 : max(_1993, 0.0));
    float _1996 = isnan(1.0) ? _4056 : (isnan(_4056) ? 1.0 : min(_4056, 1.0));
    float _1997 = dot(vec3(cbLight._m0[_1827].xyz), vec3(_1985, _1986, _1987));
    float _4067 = isnan(0.0) ? _1997 : (isnan(_1997) ? 0.0 : max(_1997, 0.0));
    float _2001 = _1977 * _1977;
    float _2005 = ((_1996 * _1996) * (_2001 + (-1.0))) + 1.0;
    float _2016 = (exp2(log2(1.0 - (isnan(1.0) ? _4067 : (isnan(_4067) ? 1.0 : min(_4067, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2017 = 1.0 - _1977;
    float _2028 = (0.5 / (((_1992 * ((_1991 * _2017) + _1977)) + 9.9999999392252902907785028219223e-09) + (((_1992 * _2017) + _1977) * _1991))) * _1991;
    float _4078 = isnan(0.0) ? _2028 : (isnan(_2028) ? 0.0 : max(_2028, 0.0));
    float _2030 = (isnan(1.0) ? _4078 : (isnan(_4078) ? 1.0 : min(_4078, 1.0))) * (_2001 / ((_2005 * _2005) * 3.141590118408203125));
    uint _2041 = _1827 + 9u;
    float _2052 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1864].w)) * _643) * 0.949999988079071044921875);
    float _2053 = _2052 * _2052;
    float _2054 = cbLight._m0[_1864].x + _718;
    float _2055 = cbLight._m0[_1864].y + _719;
    float _2056 = cbLight._m0[_1864].z + _720;
    float _2060 = inversesqrt(dot(vec3(_2054, _2055, _2056), vec3(_2054, _2055, _2056)));
    float _2061 = _2060 * _2054;
    float _2062 = _2060 * _2055;
    float _2063 = _2060 * _2056;
    float _2064 = dot(vec3(_640, _641, _642), vec3(cbLight._m0[_1864].xyz));
    float _4089 = isnan(0.0) ? _2064 : (isnan(_2064) ? 0.0 : max(_2064, 0.0));
    float _2067 = isnan(1.0) ? _4089 : (isnan(_4089) ? 1.0 : min(_4089, 1.0));
    float _2068 = dot(vec3(_640, _641, _642), vec3(_2061, _2062, _2063));
    float _4100 = isnan(0.0) ? _2068 : (isnan(_2068) ? 0.0 : max(_2068, 0.0));
    float _2071 = isnan(1.0) ? _4100 : (isnan(_4100) ? 1.0 : min(_4100, 1.0));
    float _2072 = dot(vec3(cbLight._m0[_1864].xyz), vec3(_2061, _2062, _2063));
    float _4111 = isnan(0.0) ? _2072 : (isnan(_2072) ? 0.0 : max(_2072, 0.0));
    float _2076 = _2053 * _2053;
    float _2080 = ((_2071 * _2071) * (_2076 + (-1.0))) + 1.0;
    float _2089 = (exp2(log2(1.0 - (isnan(1.0) ? _4111 : (isnan(_4111) ? 1.0 : min(_4111, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2090 = 1.0 - _2053;
    float _2100 = (0.5 / (((_1992 * ((_2067 * _2090) + _2053)) + 9.9999999392252902907785028219223e-09) + (((_1992 * _2090) + _2053) * _2067))) * _2067;
    float _4122 = isnan(0.0) ? _2100 : (isnan(_2100) ? 0.0 : max(_2100, 0.0));
    float _2102 = (isnan(1.0) ? _4122 : (isnan(_4122) ? 1.0 : min(_4122, 1.0))) * (_2076 / ((_2080 * _2080) * 3.141590118408203125));
    float _2112 = (((_2089 * cbLight._m0[_2041].x) * _2102) * _1850) + (((_2016 * cbLight._m0[_1963].x) * _2030) * _1860);
    float _2113 = (((_2089 * cbLight._m0[_2041].y) * _2102) * _1850) + (((_2016 * cbLight._m0[_1963].y) * _2030) * _1860);
    float _2114 = (((_2089 * cbLight._m0[_2041].z) * _2102) * _1850) + (((_2016 * cbLight._m0[_1963].z) * _2030) * _1860);
    float _2176;
    float _2178;
    float _2180;
    if (_1900)
    {
        _2176 = _2112;
        _2178 = _2113;
        _2180 = _2114;
    }
    else
    {
        uint _2182 = _1827 + 2u;
        uint _2186 = _1827 + 10u;
        float _2200 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2182].w)) * _643) * 0.949999988079071044921875);
        float _2201 = _2200 * _2200;
        float _2202 = cbLight._m0[_2182].x + _718;
        float _2203 = cbLight._m0[_2182].y + _719;
        float _2204 = cbLight._m0[_2182].z + _720;
        float _2208 = inversesqrt(dot(vec3(_2202, _2203, _2204), vec3(_2202, _2203, _2204)));
        float _2209 = _2208 * _2202;
        float _2210 = _2208 * _2203;
        float _2211 = _2208 * _2204;
        float _2212 = dot(vec3(_640, _641, _642), vec3(cbLight._m0[_2182].xyz));
        float _4133 = isnan(0.0) ? _2212 : (isnan(_2212) ? 0.0 : max(_2212, 0.0));
        float _2215 = isnan(1.0) ? _4133 : (isnan(_4133) ? 1.0 : min(_4133, 1.0));
        float _2216 = dot(vec3(_640, _641, _642), vec3(_2209, _2210, _2211));
        float _4144 = isnan(0.0) ? _2216 : (isnan(_2216) ? 0.0 : max(_2216, 0.0));
        float _2219 = isnan(1.0) ? _4144 : (isnan(_4144) ? 1.0 : min(_4144, 1.0));
        float _2220 = dot(vec3(cbLight._m0[_2182].xyz), vec3(_2209, _2210, _2211));
        float _4155 = isnan(0.0) ? _2220 : (isnan(_2220) ? 0.0 : max(_2220, 0.0));
        float _2224 = _2201 * _2201;
        float _2228 = ((_2219 * _2219) * (_2224 + (-1.0))) + 1.0;
        float _2237 = (exp2(log2(1.0 - (isnan(1.0) ? _4155 : (isnan(_4155) ? 1.0 : min(_4155, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2238 = 1.0 - _2201;
        float _2248 = (0.5 / (((_1992 * ((_2215 * _2238) + _2201)) + 9.9999999392252902907785028219223e-09) + (((_1992 * _2238) + _2201) * _2215))) * _2215;
        float _4166 = isnan(0.0) ? _2248 : (isnan(_2248) ? 0.0 : max(_2248, 0.0));
        float _2250 = (isnan(1.0) ? _4166 : (isnan(_4166) ? 1.0 : min(_4166, 1.0))) * (_2224 / ((_2228 * _2228) * 3.141590118408203125));
        float _2251 = isnan(1.0) ? _1842 : (isnan(_1842) ? 1.0 : min(_1842, 1.0));
        _2176 = (((_2237 * cbLight._m0[_2186].x) * _2250) * _2251) + _2112;
        _2178 = (((_2237 * cbLight._m0[_2186].y) * _2250) * _2251) + _2113;
        _2180 = (((_2237 * cbLight._m0[_2186].z) * _2250) * _2251) + _2114;
    }
    float _2286;
    float _2288;
    float _2290;
    if (_1918)
    {
        _2286 = _2176;
        _2288 = _2178;
        _2290 = _2180;
    }
    else
    {
        uint _2297 = _1827 + 3u;
        uint _2301 = _1827 + 11u;
        float _2315 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2297].w)) * _643) * 0.949999988079071044921875);
        float _2316 = _2315 * _2315;
        float _2317 = cbLight._m0[_2297].x + _718;
        float _2318 = cbLight._m0[_2297].y + _719;
        float _2319 = cbLight._m0[_2297].z + _720;
        float _2323 = inversesqrt(dot(vec3(_2317, _2318, _2319), vec3(_2317, _2318, _2319)));
        float _2324 = _2323 * _2317;
        float _2325 = _2323 * _2318;
        float _2326 = _2323 * _2319;
        float _2327 = dot(vec3(_640, _641, _642), vec3(cbLight._m0[_2297].xyz));
        float _4182 = isnan(0.0) ? _2327 : (isnan(_2327) ? 0.0 : max(_2327, 0.0));
        float _2330 = isnan(1.0) ? _4182 : (isnan(_4182) ? 1.0 : min(_4182, 1.0));
        float _2331 = dot(vec3(_640, _641, _642), vec3(_2324, _2325, _2326));
        float _4193 = isnan(0.0) ? _2331 : (isnan(_2331) ? 0.0 : max(_2331, 0.0));
        float _2334 = isnan(1.0) ? _4193 : (isnan(_4193) ? 1.0 : min(_4193, 1.0));
        float _2335 = dot(vec3(cbLight._m0[_2297].xyz), vec3(_2324, _2325, _2326));
        float _4204 = isnan(0.0) ? _2335 : (isnan(_2335) ? 0.0 : max(_2335, 0.0));
        float _2339 = _2316 * _2316;
        float _2343 = ((_2334 * _2334) * (_2339 + (-1.0))) + 1.0;
        float _2352 = (exp2(log2(1.0 - (isnan(1.0) ? _4204 : (isnan(_4204) ? 1.0 : min(_4204, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2353 = 1.0 - _2316;
        float _2363 = (0.5 / (((_1992 * ((_2330 * _2353) + _2316)) + 9.9999999392252902907785028219223e-09) + (((_1992 * _2353) + _2316) * _2330))) * _2330;
        float _4215 = isnan(0.0) ? _2363 : (isnan(_2363) ? 0.0 : max(_2363, 0.0));
        float _2365 = (isnan(1.0) ? _4215 : (isnan(_4215) ? 1.0 : min(_4215, 1.0))) * (_2339 / ((_2343 * _2343) * 3.141590118408203125));
        float _2366 = isnan(1.0) ? _1843 : (isnan(_1843) ? 1.0 : min(_1843, 1.0));
        _2286 = (((_2352 * cbLight._m0[_2301].x) * _2365) * _2366) + _2176;
        _2288 = (((_2352 * cbLight._m0[_2301].y) * _2365) * _2366) + _2178;
        _2290 = (((_2352 * cbLight._m0[_2301].z) * _2365) * _2366) + _2180;
    }
    float _2501;
    float _2503;
    float _2505;
    float _2507;
    float _2509;
    float _2511;
    if (_1825.y == 0u)
    {
        float _2441 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2442 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2441;
        float _2443 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2441;
        float _2444 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2441;
        uvec4 _2456 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2457 = _2456.x;
        uint _2468 = uint((float(_2456.y) * floor(float(uint(cbSceneParam._m0[85u].y * _727) / _2457))) + floor(float(uint(cbSceneParam._m0[85u].x * _726) / _2457)));
        float _2478 = (log2(_2444 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2479 = isnan(0.0) ? _2478 : (isnan(_2478) ? 0.0 : max(_2478, 0.0));
        uint _2482 = uint(isnan(14.0) ? _2479 : (isnan(_2479) ? 14.0 : min(_2479, 14.0)));
        uvec4 _2487 = texelFetch(g_lightClusterGridBuffer, int(((_2482 << 2u) + (_2468 << 6u)) >> 2u));
        uint _2488 = _2487.x;
        uint _2489 = _2456.z;
        float _2589;
        float _2591;
        float _2593;
        float _2595;
        float _2597;
        float _2599;
        if (((((1u << ((_2489 >> 4u) & 15u)) + 4294967295u) & _2488) == 0u) || ((_2489 & 240u) == 0u))
        {
            _2589 = 0.0;
            _2591 = 0.0;
            _2593 = 0.0;
            _2595 = 0.0;
            _2597 = 0.0;
            _2599 = 0.0;
        }
        else
        {
            float _2590;
            float _2592;
            float _2594;
            float _2596;
            float _2598;
            float _2600;
            float _2734 = 0.0;
            float _2735 = 0.0;
            float _2736 = 0.0;
            float _2737 = 0.0;
            float _2738 = 0.0;
            float _2739 = 0.0;
            uint _2740 = 0u;
            uint _2749;
            bool _2750;
            for (;;)
            {
                _2749 = texelFetch(g_lightClassification, int((((_2482 << 5u) + (_2468 << 9u)) + (_2740 << 2u)) >> 2u)).x;
                _2750 = _2749 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2750)
                {
                    frontier_phi_61_pred = _2734;
                    frontier_phi_61_pred_1 = _2739;
                    frontier_phi_61_pred_2 = _2738;
                    frontier_phi_61_pred_3 = _2737;
                    frontier_phi_61_pred_4 = _2736;
                    frontier_phi_61_pred_5 = _2735;
                }
                else
                {
                    float _2858;
                    float _2859;
                    float _2860;
                    float _2861;
                    float _2862;
                    float _2863;
                    uint _2864;
                    _2858 = _2734;
                    _2859 = _2735;
                    _2860 = _2736;
                    _2861 = _2737;
                    _2862 = _2738;
                    _2863 = _2739;
                    _2864 = _2749;
                    float _2790;
                    float _2791;
                    float _2792;
                    float _2793;
                    float _2794;
                    float _2795;
                    for (;;)
                    {
                        uint _2868 = uint(findLSB(_2864)) + (_2740 << 5u);
                        uint _2865 = (_2864 + 4294967295u) & _2864;
                        uint _2870 = _2868 * 48u;
                        vec4 _2884 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2870)).x, texelFetch(g_PointLightRenderingBuffer, int(_2870 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2870 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2870 + 3u)).x));
                        uint _2890 = (_2868 * 48u) + 4u;
                        vec4 _2903 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2890)).x, texelFetch(g_PointLightRenderingBuffer, int(_2890 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2890 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2890 + 3u)).x));
                        uint _2909 = (_2868 * 48u) + 8u;
                        vec3 _2920 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2909)).x, texelFetch(g_PointLightRenderingBuffer, int(_2909 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2909 + 2u)).x));
                        float _2924 = _2884.x - _2442;
                        float _2925 = _2884.y - _2443;
                        float _2926 = _2884.z - _2444;
                        float _2927 = dot(vec3(_2924, _2925, _2926), vec3(_2924, _2925, _2926));
                        float _2930 = inversesqrt(_2927);
                        float _2931 = _2930 * _2924;
                        float _2932 = _2930 * _2925;
                        float _2933 = _2930 * _2926;
                        float _2934 = dot(vec3(_745, _748, _751), vec3(_2931, _2932, _2933));
                        float _2939 = 1.0 - (_2927 * _2884.w);
                        float _4241 = isnan(0.0) ? _2939 : (isnan(_2939) ? 0.0 : max(_2939, 0.0));
                        float _2940 = isnan(1.0) ? _4241 : (isnan(_4241) ? 1.0 : min(_4241, 1.0));
                        float _2941 = sqrt(_2927) * _2903.w;
                        float _2944 = 1.39999997615814208984375 / (_2941 + 1.39999997615814208984375);
                        float _2945 = _2944 * _2944;
                        float _2948 = ((1.0 - _2945) * _2934) + _2945;
                        float _2951 = _2941 * _2941;
                        float _2955 = ((isnan(0.0) ? _2948 : (isnan(_2948) ? 0.0 : max(_2948, 0.0))) * _2940) / ((_2951 * 0.699999988079071044921875) + 1.0);
                        float _2959 = (-0.0) - _2442;
                        float _2960 = (-0.0) - _2443;
                        float _2961 = (-0.0) - _2444;
                        float _2965 = inversesqrt(dot(vec3(_2959, _2960, _2961), vec3(_2959, _2960, _2961)));
                        float _2966 = _2965 * _2959;
                        float _2967 = _2965 * _2960;
                        float _2968 = _2965 * _2961;
                        float _2976 = exp2(log2(1.0 / ((_2951 * 3.5) + 5.0)) * 0.25);
                        float _2977 = 1.0 - _805;
                        float _2984 = sqrt(1.0 - ((1.0 - (_2977 * _2977)) * (1.0 - (_2976 * _2976))));
                        float _2985 = _2984 * _2984;
                        float _2986 = _2985 * _2985;
                        float _2987 = _2966 + _2931;
                        float _2988 = _2967 + _2932;
                        float _2989 = _2968 + _2933;
                        float _2993 = inversesqrt(dot(vec3(_2987, _2988, _2989), vec3(_2987, _2988, _2989)));
                        float _2997 = dot(vec3(_745, _748, _751), vec3(_2966, _2967, _2968));
                        float _4257 = isnan(0.0) ? _2997 : (isnan(_2997) ? 0.0 : max(_2997, 0.0));
                        float _3000 = isnan(1.0) ? _4257 : (isnan(_4257) ? 1.0 : min(_4257, 1.0));
                        float _3001 = dot(vec3(_745, _748, _751), vec3(_2993 * _2987, _2993 * _2988, _2993 * _2989));
                        float _4268 = isnan(0.0) ? _3001 : (isnan(_3001) ? 0.0 : max(_3001, 0.0));
                        float _3004 = isnan(1.0) ? _4268 : (isnan(_4268) ? 1.0 : min(_4268, 1.0));
                        float _3008 = ((_3004 * _3004) * (_2986 + (-1.0))) + 1.0;
                        float _3009 = _2944 * _2985;
                        float _3010 = _3009 * _3009;
                        float _3013 = ((1.0 - _3010) * _2934) + _3010;
                        float _4279 = isnan(0.0) ? _3013 : (isnan(_3013) ? 0.0 : max(_3013, 0.0));
                        float _3014 = isnan(1.0) ? _4279 : (isnan(_4279) ? 1.0 : min(_4279, 1.0));
                        float _3015 = 1.0 - _2985;
                        float _3025 = (0.5 / (((_3014 * ((_3000 * _3015) + _2985)) + 9.9999999392252902907785028219223e-09) + (((_3014 * _3015) + _2985) * _3000))) * _3014;
                        float _4290 = isnan(0.0) ? _3025 : (isnan(_3025) ? 0.0 : max(_3025, 0.0));
                        float _3036 = (((_2986 * 3.1415927410125732421875) * (isnan(1.0) ? _4290 : (isnan(_4290) ? 1.0 : min(_4290, 1.0)))) / ((_3008 * _3008) * ((_2951 * 2.1991131305694580078125) + 3.141590118408203125))) * _2940;
                        _2793 = (_2955 * _2903.x) + _2861;
                        _2794 = (_2955 * _2903.y) + _2862;
                        _2795 = (_2955 * _2903.z) + _2863;
                        _2790 = (_3036 * _2920.x) + _2858;
                        _2791 = (_3036 * _2920.y) + _2859;
                        _2792 = (_3036 * _2920.z) + _2860;
                        if (_2865 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2858 = _2790;
                            _2859 = _2791;
                            _2860 = _2792;
                            _2861 = _2793;
                            _2862 = _2794;
                            _2863 = _2795;
                            _2864 = _2865;
                        }
                    }
                    frontier_phi_61_pred = _2790;
                    frontier_phi_61_pred_1 = _2795;
                    frontier_phi_61_pred_2 = _2794;
                    frontier_phi_61_pred_3 = _2793;
                    frontier_phi_61_pred_4 = _2792;
                    frontier_phi_61_pred_5 = _2791;
                }
                _2590 = frontier_phi_61_pred;
                _2600 = frontier_phi_61_pred_1;
                _2598 = frontier_phi_61_pred_2;
                _2596 = frontier_phi_61_pred_3;
                _2594 = frontier_phi_61_pred_4;
                _2592 = frontier_phi_61_pred_5;
                uint _2741 = _2740 + 1u;
                if (_2741 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2734 = _2590;
                    _2735 = _2592;
                    _2736 = _2594;
                    _2737 = _2596;
                    _2738 = _2598;
                    _2739 = _2600;
                    _2740 = _2741;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2589 = _2590;
            _2591 = _2592;
            _2593 = _2594;
            _2595 = _2596;
            _2597 = _2598;
            _2599 = _2600;
        }
        uvec4 _2603 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2604 = _2603.z;
        uint _2606 = (_2604 >> 8u) & 15u;
        float _2702;
        float _2704;
        float _2706;
        float _2708;
        float _2710;
        float _2712;
        if (((4294967295u << _2606) & _2488) == 0u)
        {
            _2702 = _2589;
            _2704 = _2591;
            _2706 = _2593;
            _2708 = _2595;
            _2710 = _2597;
            _2712 = _2599;
        }
        else
        {
            float _2727 = inversesqrt(dot(vec3(_2442, _2443, _2444), vec3(_2442, _2443, _2444)));
            float _2728 = _2727 * _2442;
            float _2729 = _2727 * _2443;
            float _2730 = _2727 * _2444;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2606 < ((_2604 >> 12u) & 15u))
            {
                float _2703;
                float _2705;
                float _2707;
                float _2709;
                float _2711;
                float _2713;
                float _2841 = _2589;
                float _2842 = _2591;
                float _2843 = _2593;
                float _2844 = _2595;
                float _2845 = _2597;
                float _2846 = _2599;
                uint _2847 = _2606;
                uint _2856;
                bool _2857;
                for (;;)
                {
                    _2856 = texelFetch(g_lightClassification, int((((_2482 << 5u) + (_2468 << 9u)) + (_2847 << 2u)) >> 2u)).x;
                    _2857 = _2856 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_2857)
                    {
                        frontier_phi_67_pred = _2844;
                        frontier_phi_67_pred_1 = _2845;
                        frontier_phi_67_pred_2 = _2846;
                        frontier_phi_67_pred_3 = _2843;
                        frontier_phi_67_pred_4 = _2842;
                        frontier_phi_67_pred_5 = _2841;
                    }
                    else
                    {
                        float _3041;
                        float _3042;
                        float _3043;
                        float _3044;
                        float _3045;
                        float _3046;
                        float _3335;
                        float _3336;
                        float _3337;
                        float _3338;
                        float _3339;
                        float _3340;
                        float _3054 = _2841;
                        float _3055 = _2842;
                        float _3056 = _2843;
                        float _3057 = _2844;
                        float _3058 = _2845;
                        float _3059 = _2846;
                        uint _3060 = _2856;
                        uint _3061;
                        vec4 _3086;
                        float _3087;
                        vec4 _3102;
                        vec3 _3114;
                        vec4 _3129;
                        vec4 _3145;
                        float _3191;
                        bool _3192;
                        for (;;)
                        {
                            uint _3071 = ((_2847 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3060));
                            _3061 = (_3060 + 4294967295u) & _3060;
                            uint _3073 = _3071 * 40u;
                            _3086 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3073)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3073 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3073 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3073 + 3u)).x));
                            _3087 = _3086.w;
                            uint _3089 = (_3071 * 40u) + 4u;
                            _3102 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3089)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3089 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3089 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3089 + 3u)).x));
                            uint _3104 = (_3071 * 40u) + 8u;
                            _3114 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3104)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3104 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3104 + 2u)).x));
                            uint _3116 = (_3071 * 40u) + 16u;
                            _3129 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3116)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3116 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3116 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3116 + 3u)).x));
                            uint _3132 = (_3071 * 40u) + 20u;
                            _3145 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3132)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3132 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3132 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3132 + 3u)).x));
                            uint _3147 = (_3071 * 40u) + 24u;
                            vec4 _3160 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3147)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3147 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3147 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3147 + 3u)).x));
                            uint _3166 = (_3071 * 40u) + 28u;
                            vec4 _3179 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3166)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3166 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3166 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3166 + 3u)).x));
                            _3191 = fma(_2444, _3179.z, fma(_2443, _3179.y, _3179.x * _2442)) + _3179.w;
                            _3192 = !((fma(_2444, _3160.z, fma(_2443, _3160.y, _3160.x * _2442)) + _3160.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3192)
                            {
                                float _3219 = _3086.x - _2442;
                                float _3220 = _3086.y - _2443;
                                float _3221 = _3086.z - _2444;
                                float _3222 = dot(vec3(_3219, _3220, _3221), vec3(_3219, _3220, _3221));
                                float _3225 = inversesqrt(_3222);
                                float _3226 = _3225 * _3219;
                                float _3227 = _3225 * _3220;
                                float _3228 = _3225 * _3221;
                                float _3232 = 1.0 - (_3222 / (_3087 * _3087));
                                float _4301 = isnan(0.0) ? _3232 : (isnan(_3232) ? 0.0 : max(_3232, 0.0));
                                float _3233 = isnan(1.0) ? _4301 : (isnan(_4301) ? 1.0 : min(_4301, 1.0));
                                float _3237 = sqrt(_3222) * _3102.w;
                                float _3239 = 1.39999997615814208984375 / (_3237 + 1.39999997615814208984375);
                                float _3240 = _3239 * _3239;
                                float _3243 = ((1.0 - _3240) * dot(vec3(_3226, _3227, _3228), vec3(_745, _748, _751))) + _3240;
                                float _3246 = _3237 * _3237;
                                float _3250 = (fma(_2444, _3129.z, fma(_2443, _3129.y, _3129.x * _2442)) + _3129.w) / _3191;
                                float _3251 = (fma(_2444, _3145.z, fma(_2443, _3145.y, _3145.x * _2442)) + _3145.w) / _3191;
                                float _3255 = 1.0 - dot(vec2(_3250, _3251), vec2(_3250, _3251));
                                float _4317 = isnan(0.0) ? _3255 : (isnan(_3255) ? 0.0 : max(_3255, 0.0));
                                float _3256 = isnan(1.0) ? _4317 : (isnan(_4317) ? 1.0 : min(_4317, 1.0));
                                float _3257 = _3256 * (((isnan(0.0) ? _3243 : (isnan(_3243) ? 0.0 : max(_3243, 0.0))) * _3233) / ((_3246 * 0.699999988079071044921875) + 1.0));
                                float _3269 = exp2(log2(1.0 / ((_3246 * 3.5) + 5.0)) * 0.25);
                                float _3270 = 1.0 - _805;
                                float _3277 = sqrt(1.0 - ((1.0 - (_3270 * _3270)) * (1.0 - (_3269 * _3269))));
                                float _3278 = _3277 * _3277;
                                float _3279 = _3278 * _3278;
                                float _3280 = _3226 - _2728;
                                float _3281 = _3227 - _2729;
                                float _3282 = _3228 - _2730;
                                float _3286 = inversesqrt(dot(vec3(_3280, _3281, _3282), vec3(_3280, _3281, _3282)));
                                float _3290 = dot(vec3(_745, _748, _751), vec3((-0.0) - _2728, (-0.0) - _2729, (-0.0) - _2730));
                                float _4328 = isnan(0.0) ? _3290 : (isnan(_3290) ? 0.0 : max(_3290, 0.0));
                                float _3293 = isnan(1.0) ? _4328 : (isnan(_4328) ? 1.0 : min(_4328, 1.0));
                                float _3294 = dot(vec3(_745, _748, _751), vec3(_3286 * _3280, _3286 * _3281, _3286 * _3282));
                                float _4339 = isnan(0.0) ? _3294 : (isnan(_3294) ? 0.0 : max(_3294, 0.0));
                                float _3297 = isnan(1.0) ? _4339 : (isnan(_4339) ? 1.0 : min(_4339, 1.0));
                                float _3301 = ((_3297 * _3297) * (_3279 + (-1.0))) + 1.0;
                                float _3302 = _3239 * _3278;
                                float _3303 = _3302 * _3302;
                                float _3309 = ((1.0 - _3303) * dot(vec3(_745, _748, _751), vec3(_3226, _3227, _3228))) + _3303;
                                float _4350 = isnan(0.0) ? _3309 : (isnan(_3309) ? 0.0 : max(_3309, 0.0));
                                float _3310 = isnan(1.0) ? _4350 : (isnan(_4350) ? 1.0 : min(_4350, 1.0));
                                float _3311 = 1.0 - _3278;
                                float _3321 = (0.5 / (((_3310 * ((_3293 * _3311) + _3278)) + 9.9999999392252902907785028219223e-09) + (((_3310 * _3311) + _3278) * _3293))) * _3310;
                                float _4361 = isnan(0.0) ? _3321 : (isnan(_3321) ? 0.0 : max(_3321, 0.0));
                                float _3331 = (_3256 * _3233) * (((_3279 * 3.1415927410125732421875) * (isnan(1.0) ? _4361 : (isnan(_4361) ? 1.0 : min(_4361, 1.0)))) / ((_3301 * _3301) * ((_3246 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3331 * _3114.x;
                                frontier_phi_73_pred_1 = _3331 * _3114.y;
                                frontier_phi_73_pred_2 = _3257 * _3102.z;
                                frontier_phi_73_pred_3 = _3257 * _3102.y;
                                frontier_phi_73_pred_4 = _3257 * _3102.x;
                                frontier_phi_73_pred_5 = _3331 * _3114.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3335 = frontier_phi_73_pred;
                            _3336 = frontier_phi_73_pred_1;
                            _3340 = frontier_phi_73_pred_2;
                            _3339 = frontier_phi_73_pred_3;
                            _3338 = frontier_phi_73_pred_4;
                            _3337 = frontier_phi_73_pred_5;
                            _3044 = _3338 + _3057;
                            _3045 = _3339 + _3058;
                            _3046 = _3340 + _3059;
                            _3041 = _3335 + _3054;
                            _3042 = _3336 + _3055;
                            _3043 = _3337 + _3056;
                            if (_3061 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3054 = _3041;
                                _3055 = _3042;
                                _3056 = _3043;
                                _3057 = _3044;
                                _3058 = _3045;
                                _3059 = _3046;
                                _3060 = _3061;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3044;
                        frontier_phi_67_pred_1 = _3045;
                        frontier_phi_67_pred_2 = _3046;
                        frontier_phi_67_pred_3 = _3043;
                        frontier_phi_67_pred_4 = _3042;
                        frontier_phi_67_pred_5 = _3041;
                    }
                    _2709 = frontier_phi_67_pred;
                    _2711 = frontier_phi_67_pred_1;
                    _2713 = frontier_phi_67_pred_2;
                    _2707 = frontier_phi_67_pred_3;
                    _2705 = frontier_phi_67_pred_4;
                    _2703 = frontier_phi_67_pred_5;
                    uint _2848 = _2847 + 1u;
                    if (_2848 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2841 = _2703;
                        _2842 = _2705;
                        _2843 = _2707;
                        _2844 = _2709;
                        _2845 = _2711;
                        _2846 = _2713;
                        _2847 = _2848;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2711;
                frontier_phi_55_56_ladder_1 = _2713;
                frontier_phi_55_56_ladder_2 = _2709;
                frontier_phi_55_56_ladder_3 = _2707;
                frontier_phi_55_56_ladder_4 = _2705;
                frontier_phi_55_56_ladder_5 = _2703;
            }
            else
            {
                frontier_phi_55_56_ladder = _2597;
                frontier_phi_55_56_ladder_1 = _2599;
                frontier_phi_55_56_ladder_2 = _2595;
                frontier_phi_55_56_ladder_3 = _2593;
                frontier_phi_55_56_ladder_4 = _2591;
                frontier_phi_55_56_ladder_5 = _2589;
            }
            _2702 = frontier_phi_55_56_ladder_5;
            _2704 = frontier_phi_55_56_ladder_4;
            _2706 = frontier_phi_55_56_ladder_3;
            _2708 = frontier_phi_55_56_ladder_2;
            _2710 = frontier_phi_55_56_ladder;
            _2712 = frontier_phi_55_56_ladder_1;
        }
        float _2717 = isnan(1.0) ? _789 : (isnan(_789) ? 1.0 : min(_789, 1.0));
        _2501 = (_2717 * _2708) + _1956;
        _2503 = (_2717 * _2710) + _1958;
        _2505 = (_2717 * _2712) + _1960;
        _2507 = ((_2702 * 0.039999999105930328369140625) * _2717) + _2286;
        _2509 = ((_2704 * 0.039999999105930328369140625) * _2717) + _2288;
        _2511 = ((_2706 * 0.039999999105930328369140625) * _2717) + _2290;
    }
    else
    {
        _2501 = _1956;
        _2503 = _1958;
        _2505 = _1960;
        _2507 = _2286;
        _2509 = _2288;
        _2511 = _2290;
    }
    float _4377 = isnan(0.0) ? _774 : (isnan(_774) ? 0.0 : max(_774, 0.0));
    float _4388 = isnan(0.0) ? _775 : (isnan(_775) ? 0.0 : max(_775, 0.0));
    float _4399 = isnan(0.0) ? _776 : (isnan(_776) ? 0.0 : max(_776, 0.0));
    uint _2531 = _241 + 6u;
    float _2539 = _726 / cbSceneParam._m0[86u].x;
    float _2540 = _727 / cbSceneParam._m0[86u].y;
    vec4 _2554 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2539, _2540, (log2((isnan(cbSceneParam._m0[77u].w) ? _661 : (isnan(_661) ? cbSceneParam._m0[77u].w : min(_661, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2556 = _2554.x;
    float _2557 = _2554.y;
    float _2558 = _2554.z;
    float _2559 = _2554.w;
    float _2652;
    float _2654;
    float _2656;
    float _2658;
    if (_661 > cbSceneParam._m0[78u].w)
    {
        float _2614 = isnan(_661) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _661 : min(cbSceneParam._m0[80u].w, _661));
        float _2615 = _2614 / _661;
        float _2626 = _2615 * _711;
        float _2627 = _712 * _2615;
        float _2628 = (-0.0) - _2627;
        float _2630 = _2615 * _713;
        float _2632 = (cbSceneParam._m0[77u].w * _2628) / _2614;
        float _2633 = _2632 + cbSceneParam._m0[79u].w;
        float _2634 = cbSceneParam._m0[79u].w - _2627;
        float _2640 = sqrt(((_2626 * _2626) + (_2627 * _2627)) + (_2630 * _2630));
        float _2643 = (1.0 - (cbSceneParam._m0[77u].w / _2614)) * _2640;
        float _2648 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2650 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2803;
        if (abs((_2628 - _2632) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2803 = ((((_2633 > 0.0) ? exp2(_2648 * _2633) : (2.0 - exp2(_2650 * _2633))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2643;
        }
        else
        {
            float _2763 = 1.0 / cbSceneParam._m0[80u].x;
            float _2764 = isnan(_2634) ? _2633 : (isnan(_2633) ? _2634 : max(_2633, _2634));
            float _2765 = isnan(_2634) ? _2633 : (isnan(_2633) ? _2634 : min(_2633, _2634));
            float _2774 = isnan(0.0) ? _2764 : (isnan(_2764) ? 0.0 : min(_2764, 0.0));
            float _2775 = isnan(0.0) ? _2765 : (isnan(_2765) ? 0.0 : min(_2765, 0.0));
            _2803 = ((abs(_2640 / _2628) * cbSceneParam._m0[80u].y) * ((((_2774 - _2775) * 2.0) - ((exp2(_2648 * (isnan(0.0) ? _2764 : (isnan(_2764) ? 0.0 : max(_2764, 0.0)))) - exp2(_2648 * (isnan(0.0) ? _2765 : (isnan(_2765) ? 0.0 : max(_2765, 0.0))))) * _2763)) - ((exp2(_2650 * _2774) - exp2(_2650 * _2775)) * _2763))) + (_2643 * cbSceneParam._m0[80u].z);
        }
        vec4 _2805 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2539, _2540, 1.0), 0.0);
        float _2814 = exp2((_2803 * (-1.44269502162933349609375)) * (1.0 - _2805.w));
        float _2815 = log2(_2814);
        float _2831 = log2(_2559);
        _2652 = (exp2(_2831 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2815 * cbSceneParam._m0[78u].x)) * _2805.x) / cbSceneParam._m0[78u].x)) + _2556;
        _2654 = (exp2(_2831 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2815 * cbSceneParam._m0[78u].y)) * _2805.y) / cbSceneParam._m0[78u].y)) + _2557;
        _2656 = (exp2(_2831 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2815 * cbSceneParam._m0[78u].z)) * _2805.z) / cbSceneParam._m0[78u].z)) + _2558;
        _2658 = _2814 * _2559;
    }
    else
    {
        _2652 = _2556;
        _2654 = _2557;
        _2656 = _2558;
        _2658 = _2559;
    }
    float _2670 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2671 = _2670 == 3.0;
    float _2672 = log2(_2658);
    float _2679 = exp2(_2672 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4377 : (isnan(_4377) ? 1.0 : min(_4377, 1.0))) * (_2501 + ((isnan(0.0) ? _1515 : (isnan(_1515) ? 0.0 : max(_1515, 0.0))) * _789))) + ((_2507 + ((isnan(0.0) ? _1809 : (isnan(_1809) ? 0.0 : max(_1809, 0.0))) * _1594)) * cbPerFrame._m0[3u].x));
    float _2680 = exp2(_2672 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4388 : (isnan(_4388) ? 1.0 : min(_4388, 1.0))) * (_2503 + ((isnan(0.0) ? _1518 : (isnan(_1518) ? 0.0 : max(_1518, 0.0))) * _789))) + ((_2509 + ((isnan(0.0) ? _1812 : (isnan(_1812) ? 0.0 : max(_1812, 0.0))) * _1594)) * cbPerFrame._m0[3u].x));
    float _2681 = exp2(_2672 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4399 : (isnan(_4399) ? 1.0 : min(_4399, 1.0))) * (_2505 + ((isnan(0.0) ? _1521 : (isnan(_1521) ? 0.0 : max(_1521, 0.0))) * _789))) + ((_2511 + ((isnan(0.0) ? _1815 : (isnan(_1815) ? 0.0 : max(_1815, 0.0))) * _1594)) * cbPerFrame._m0[3u].x));
    float _2690 = (_2670 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2690 * (_2671 ? _2679 : (_2679 + (cbSceneParam._m0[72u].w * _2652)));
    SV_Target.y = _2690 * (_2671 ? _2680 : (_2680 + (cbSceneParam._m0[72u].w * _2654)));
    SV_Target.z = _2690 * (_2671 ? _2681 : (_2681 + (cbSceneParam._m0[72u].w * _2656)));
    SV_Target.w = cbInstanceData._m0[_2531].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2531].w;
}


