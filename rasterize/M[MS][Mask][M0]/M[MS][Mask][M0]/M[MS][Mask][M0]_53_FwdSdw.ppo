#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 13) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_22;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_10;
layout(set = 0, binding = 20) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_6;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1216;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _217 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _218 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _219 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _225 = inversesqrt(dot(vec3(_217, _218, _219), vec3(_217, _218, _219)));
    float _232 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _239 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _253 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _255 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _256 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3806 = isnan(0.0) ? _253 : (isnan(_253) ? 0.0 : max(_253, 0.0));
    float _3817 = isnan(0.0) ? _255 : (isnan(_255) ? 0.0 : max(_255, 0.0));
    float _3828 = isnan(0.0) ? _256 : (isnan(_256) ? 0.0 : max(_256, 0.0));
    uint _266 = uint(roundEven(NORMAL.w)) * 13u;
    uint _271 = _266 + 1u;
    uint _275 = _266 + 2u;
    float _284 = sqrt(((cbInstanceData._m0[_271].x * cbInstanceData._m0[_271].x) + (cbInstanceData._m0[_266].x * cbInstanceData._m0[_266].x)) + (cbInstanceData._m0[_275].x * cbInstanceData._m0[_275].x));
    float _285 = _284 * TEXCOORD.z;
    float _286 = _284 * TEXCOORD.w;
    vec4 _299 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _285) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _286) + cbTextureTilingScale._m0[13u].w));
    vec4 _323 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _328 = _323.x * cbMtdParam._m0[11u].x;
    float _329 = _323.y * cbMtdParam._m0[11u].y;
    float _330 = _323.z * cbMtdParam._m0[11u].z;
    vec4 _349 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _285) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _286) + cbTextureTilingScale._m0[5u].w));
    vec4 _368 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _403 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _405 = _403.x;
    float _417 = dot(vec4(_405, _403.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _434 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _368.x) * 2.0) - ((((_405 - _417) * cbMtdParam._m0[24u].z) + _417) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3839 = isnan(0.0) ? _434 : (isnan(_434) ? 0.0 : max(_434, 0.0));
    float _435 = isnan(1.0) ? _3839 : (isnan(_3839) ? 1.0 : min(_3839, 1.0));
    float _442 = (_435 * ((_349.x * cbMtdParam._m0[12u].x) - _328)) + _328;
    float _443 = (_435 * ((_349.y * cbMtdParam._m0[12u].y) - _329)) + _329;
    float _444 = (_435 * ((_349.z * cbMtdParam._m0[12u].z) - _330)) + _330;
    vec4 _461 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _285) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _286) + cbTextureTilingScale._m0[3u].w));
    vec4 _481 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _483 = _481.x;
    float _493 = dot(vec4(_483, _481.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _507 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _368.y) * 2.0) - ((((_483 - _493) * cbMtdParam._m0[24u].z) + _493) * cbMtdParam._m0[20u].w))) + 1.0;
    float _3850 = isnan(0.0) ? _507 : (isnan(_507) ? 0.0 : max(_507, 0.0));
    float _508 = isnan(1.0) ? _3850 : (isnan(_3850) ? 1.0 : min(_3850, 1.0));
    float _515 = (_508 * ((_461.x * cbMtdParam._m0[13u].x) - _442)) + _442;
    float _516 = (_508 * ((_461.y * cbMtdParam._m0[13u].y) - _443)) + _443;
    float _517 = (_508 * ((_461.z * cbMtdParam._m0[13u].z) - _444)) + _444;
    float _521 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _299.x) * _515;
    float _524 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _299.y) * _516;
    float _527 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _299.z) * _517;
    float _534 = ((_515 - _521) * (isnan(1.0) ? _3806 : (isnan(_3806) ? 1.0 : min(_3806, 1.0)))) + _521;
    float _535 = ((_516 - _524) * (isnan(1.0) ? _3817 : (isnan(_3817) ? 1.0 : min(_3817, 1.0)))) + _524;
    float _536 = ((_517 - _527) * (isnan(1.0) ? _3828 : (isnan(_3828) ? 1.0 : min(_3828, 1.0)))) + _527;
    vec4 _548 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _285) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _286) + cbTextureTilingScale._m0[20u].w));
    vec4 _571 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _285) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _286) + cbTextureTilingScale._m0[4u].w));
    vec4 _588 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _590 = _588.x;
    float _591 = _588.y;
    float _592 = _588.z;
    float _599 = ((_571.x - _590) * _435) + _590;
    float _600 = ((_571.y - _591) * _435) + _591;
    float _601 = ((_571.z - _592) * _435) + _592;
    vec4 _613 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _285) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _286) + cbTextureTilingScale._m0[2u].w));
    float _626 = ((_613.z - _601) * _508) + _601;
    float _629 = ((((_613.x - _599) * _508) + _599) * 2.0) + (-1.0);
    float _630 = ((((_613.y - _600) * _508) + _600) * 2.0) + (-1.0);
    float _631 = dot(vec2(_629, _630), vec2(_629, _630));
    float _3861 = isnan(0.0) ? _631 : (isnan(_631) ? 0.0 : max(_631, 0.0));
    float _636 = sqrt(1.0 - (isnan(1.0) ? _3861 : (isnan(_3861) ? 1.0 : min(_3861, 1.0))));
    vec4 _656 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _668 = (_629 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_548.x * 2.0) + (-1.0)))) + (((_656.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _669 = (_630 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_548.y * 2.0) + (-1.0)))) + (((_656.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _674 = (((_548.z - _626) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _626;
    float _678 = ((_656.z - _674) * cbMtdParam._m0[19u].w) + _674;
    float _680 = cbMtdParam._m0[22u].x + _656.w;
    float _683 = fma(_636, _232 * NORMAL.x, fma(_669, _239 * TANGENT.x, (_225 * _217) * _668));
    float _686 = fma(_636, _232 * NORMAL.y, fma(_669, _239 * TANGENT.y, (_225 * _218) * _668));
    float _689 = fma(_636, _232 * NORMAL.z, fma(_669, _239 * TANGENT.z, (_225 * _219) * _668));
    float _693 = inversesqrt(dot(vec3(_683, _686, _689), vec3(_683, _686, _689)));
    float _694 = _693 * _683;
    float _695 = _693 * _686;
    float _696 = _693 * _689;
    float _3872 = isnan(0.0) ? _678 : (isnan(_678) ? 0.0 : max(_678, 0.0));
    float _697 = isnan(1.0) ? _3872 : (isnan(_3872) ? 1.0 : min(_3872, 1.0));
    float _3883 = isnan(0.0) ? _680 : (isnan(_680) ? 0.0 : max(_680, 0.0));
    float _3894 = isnan(0.0) ? _534 : (isnan(_534) ? 0.0 : max(_534, 0.0));
    float _3905 = isnan(0.0) ? _535 : (isnan(_535) ? 0.0 : max(_535, 0.0));
    float _3916 = isnan(0.0) ? _536 : (isnan(_536) ? 0.0 : max(_536, 0.0));
    float _715 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _757 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _767 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _757);
    float _768 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _757);
    float _769 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _757);
    float _773 = inversesqrt(dot(vec3(_767, _768, _769), vec3(_767, _768, _769)));
    float _774 = _767 * _773;
    float _775 = _768 * _773;
    float _776 = _769 * _773;
    float _782 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _783 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _801 = fma(_696, cbSceneParam._m0[5u].z, fma(_695, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _694));
    float _804 = fma(_696, cbSceneParam._m0[6u].z, fma(_695, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _694));
    float _807 = fma(_696, cbSceneParam._m0[7u].z, fma(_695, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _694));
    uint _821 = (_266 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _827 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3894 : (isnan(_3894) ? 1.0 : min(_3894, 1.0)))) * cbInstanceData._m0[_821].x;
    float _828 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3905 : (isnan(_3905) ? 1.0 : min(_3905, 1.0)))) * cbInstanceData._m0[_821].y;
    float _829 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3916 : (isnan(_3916) ? 1.0 : min(_3916, 1.0)))) * cbInstanceData._m0[_821].z;
    float _3927 = isnan(0.0) ? _827 : (isnan(_827) ? 0.0 : max(_827, 0.0));
    float _830 = isnan(1.0) ? _3927 : (isnan(_3927) ? 1.0 : min(_3927, 1.0));
    float _3938 = isnan(0.0) ? _828 : (isnan(_828) ? 0.0 : max(_828, 0.0));
    float _831 = isnan(1.0) ? _3938 : (isnan(_3938) ? 1.0 : min(_3938, 1.0));
    float _3949 = isnan(0.0) ? _829 : (isnan(_829) ? 0.0 : max(_829, 0.0));
    float _832 = isnan(1.0) ? _3949 : (isnan(_3949) ? 1.0 : min(_3949, 1.0));
    vec4 _841 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _782, cbSceneParam._m0[86u].y * _783));
    float _845 = ((isnan(1.0) ? _3883 : (isnan(_3883) ? 1.0 : min(_3883, 1.0))) * TEXCOORD_5.w) * _841.x;
    float _846 = dot(vec3(_694, _695, _696), vec3(_774, _775, _776));
    float _849 = _846 * 2.0;
    float _853 = (_849 * _694) - _774;
    float _854 = (_849 * _695) - _775;
    float _855 = (_849 * _696) - _776;
    float _859 = abs(dot(vec3(_774, _775, _776), vec3(_694, _695, _696)));
    float _3960 = isnan(0.0) ? _859 : (isnan(_859) ? 0.0 : max(_859, 0.0));
    float _861 = sqrt(_697);
    float _874 = exp2((_861 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3960 : (isnan(_3960) ? 1.0 : min(_3960, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_861 * 3.0));
    float _906 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _910 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _914 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1215;
    float _1217;
    float _1218;
    float _1219;
    float _1220;
    float _1221;
    float _1222;
    float _1223;
    float _1224;
    float _1225;
    float _1226;
    float _1227;
    float _1228;
    float _1229;
    float _1230;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _940 = fma(_914, cbModelParam._m0[26u].z, fma(_910, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _906));
        float _944 = fma(_914, cbModelParam._m0[27u].z, fma(_910, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _906));
        float _948 = fma(_914, cbModelParam._m0[28u].z, fma(_910, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _906));
        float _973 = _906 + _694;
        float _974 = _910 + _695;
        float _975 = _914 + _696;
        float _985 = fma(_975, cbModelParam._m0[26u].z, fma(_974, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _973)) - _940;
        float _986 = fma(_975, cbModelParam._m0[27u].z, fma(_974, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _973)) - _944;
        float _987 = fma(_975, cbModelParam._m0[28u].z, fma(_974, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _973)) - _948;
        float _991 = inversesqrt(dot(vec3(_985, _986, _987), vec3(_985, _986, _987)));
        float _1004 = ((_991 * _985) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_940 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1005 = ((_991 * _986) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_944 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1006 = ((_991 * _987) / cbModelParam._m0[34u].z) + ((((((_948 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1009 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1004, _1005, _1006), 0.0);
        vec4 _1016 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1004, _1005, _1006), 0.0);
        vec4 _1023 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1004, _1005, _1006), 0.0);
        vec4 _1030 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1004, _1005, _1006), 0.0);
        float _1043 = exp2((_1009.w + (-0.5)) * 20.0) * 2.0;
        float _1044 = _1043 * (_1009.x + (-0.5));
        float _1045 = _1043 * (_1009.y + (-0.5));
        float _1046 = _1043 * (_1009.z + (-0.5));
        float _1053 = exp2((_1016.w + (-0.5)) * 20.0) * 2.0;
        float _1054 = _1053 * (_1016.x + (-0.5));
        float _1055 = _1053 * (_1016.y + (-0.5));
        float _1056 = _1053 * (_1016.z + (-0.5));
        float _1063 = exp2((_1023.w + (-0.5)) * 20.0) * 2.0;
        float _1064 = _1063 * (_1023.x + (-0.5));
        float _1065 = _1063 * (_1023.y + (-0.5));
        float _1066 = _1063 * (_1023.z + (-0.5));
        float _1073 = exp2((_1030.w + (-0.5)) * 20.0) * 2.0;
        float _1074 = _1073 * (_1030.x + (-0.5));
        float _1075 = _1073 * (_1030.y + (-0.5));
        float _1076 = _1073 * (_1030.z + (-0.5));
        float _1077 = isnan(0.0) ? _1074 : (isnan(_1074) ? 0.0 : max(_1074, 0.0));
        float _1078 = isnan(0.0) ? _1075 : (isnan(_1075) ? 0.0 : max(_1075, 0.0));
        float _1079 = isnan(0.0) ? _1076 : (isnan(_1076) ? 0.0 : max(_1076, 0.0));
        float _1080 = _1044 * 0.5;
        float _1081 = _1054 * 0.5;
        float _1082 = _1064 * 0.5;
        float _1083 = dot(vec3(_1080, _1081, _1082), vec3(_1080, _1081, _1082));
        float _1088 = (_1083 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1083);
        float _1097 = (dot(vec3(_694, _695, _696), vec3(_1088 * _1080, _1088 * _1081, _1088 * _1082)) + 1.0) * 0.5;
        float _3986 = isnan(0.0) ? _1097 : (isnan(_1097) ? 0.0 : max(_1097, 0.0));
        float _1107 = sqrt(((_1081 * _1081) + (_1080 * _1080)) + (_1082 * _1082)) / (_1077 + 9.9999997473787516355514526367188e-06);
        float _3997 = isnan(0.0) ? _1107 : (isnan(_1107) ? 0.0 : max(_1107, 0.0));
        float _1108 = isnan(1.0) ? _3997 : (isnan(_3997) ? 1.0 : min(_3997, 1.0));
        float _1109 = _1108 * 2.0;
        float _1113 = (1.0 - _1108) / (_1108 + 1.0);
        float _4008 = isnan(0.0) ? _1113 : (isnan(_1113) ? 0.0 : max(_1113, 0.0));
        float _1114 = isnan(1.0) ? _4008 : (isnan(_4008) ? 1.0 : min(_4008, 1.0));
        float _1123 = ((((1.0 - _1114) * (_1109 + 2.0)) * exp2(log2(isnan(1.0) ? _3986 : (isnan(_3986) ? 1.0 : min(_3986, 1.0))) * (_1109 + 1.0))) + _1114) * _1077;
        float _1124 = _1045 * 0.5;
        float _1125 = _1055 * 0.5;
        float _1126 = _1065 * 0.5;
        float _1127 = dot(vec3(_1124, _1125, _1126), vec3(_1124, _1125, _1126));
        float _1132 = (_1127 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1127);
        float _1140 = (dot(vec3(_694, _695, _696), vec3(_1132 * _1124, _1132 * _1125, _1132 * _1126)) + 1.0) * 0.5;
        float _4019 = isnan(0.0) ? _1140 : (isnan(_1140) ? 0.0 : max(_1140, 0.0));
        float _1149 = sqrt(((_1125 * _1125) + (_1124 * _1124)) + (_1126 * _1126)) / (_1078 + 9.9999997473787516355514526367188e-06);
        float _4030 = isnan(0.0) ? _1149 : (isnan(_1149) ? 0.0 : max(_1149, 0.0));
        float _1150 = isnan(1.0) ? _4030 : (isnan(_4030) ? 1.0 : min(_4030, 1.0));
        float _1151 = _1150 * 2.0;
        float _1155 = (1.0 - _1150) / (_1150 + 1.0);
        float _4041 = isnan(0.0) ? _1155 : (isnan(_1155) ? 0.0 : max(_1155, 0.0));
        float _1156 = isnan(1.0) ? _4041 : (isnan(_4041) ? 1.0 : min(_4041, 1.0));
        float _1165 = ((((1.0 - _1156) * (_1151 + 2.0)) * exp2(log2(isnan(1.0) ? _4019 : (isnan(_4019) ? 1.0 : min(_4019, 1.0))) * (_1151 + 1.0))) + _1156) * _1078;
        float _1166 = _1046 * 0.5;
        float _1167 = _1056 * 0.5;
        float _1168 = _1066 * 0.5;
        float _1169 = dot(vec3(_1166, _1167, _1168), vec3(_1166, _1167, _1168));
        float _1174 = (_1169 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1169);
        float _1182 = (dot(vec3(_694, _695, _696), vec3(_1174 * _1166, _1174 * _1167, _1174 * _1168)) + 1.0) * 0.5;
        float _4052 = isnan(0.0) ? _1182 : (isnan(_1182) ? 0.0 : max(_1182, 0.0));
        float _1191 = sqrt(((_1167 * _1167) + (_1166 * _1166)) + (_1168 * _1168)) / (_1079 + 9.9999997473787516355514526367188e-06);
        float _4063 = isnan(0.0) ? _1191 : (isnan(_1191) ? 0.0 : max(_1191, 0.0));
        float _1192 = isnan(1.0) ? _4063 : (isnan(_4063) ? 1.0 : min(_4063, 1.0));
        float _1193 = _1192 * 2.0;
        float _1197 = (1.0 - _1192) / (_1192 + 1.0);
        float _4074 = isnan(0.0) ? _1197 : (isnan(_1197) ? 0.0 : max(_1197, 0.0));
        float _1198 = isnan(1.0) ? _4074 : (isnan(_4074) ? 1.0 : min(_4074, 1.0));
        float _1207 = ((((1.0 - _1198) * (_1193 + 2.0)) * exp2(log2(isnan(1.0) ? _4052 : (isnan(_4052) ? 1.0 : min(_4052, 1.0))) * (_1193 + 1.0))) + _1198) * _1079;
        _1215 = _1046;
        _1217 = _1045;
        _1218 = _1044;
        _1219 = _1056;
        _1220 = _1055;
        _1221 = _1054;
        _1222 = _1066;
        _1223 = _1065;
        _1224 = _1064;
        _1225 = _1079;
        _1226 = _1078;
        _1227 = _1077;
        _1228 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1123 : (isnan(_1123) ? 0.0 : max(_1123, 0.0)));
        _1229 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1165 : (isnan(_1165) ? 0.0 : max(_1165, 0.0)));
        _1230 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1207 : (isnan(_1207) ? 0.0 : max(_1207, 0.0)));
    }
    else
    {
        _1215 = _1216;
        _1217 = _1216;
        _1218 = _1216;
        _1219 = _1216;
        _1220 = _1216;
        _1221 = _1216;
        _1222 = _1216;
        _1223 = _1216;
        _1224 = _1216;
        _1225 = _1216;
        _1226 = _1216;
        _1227 = _1216;
        _1228 = 0.0;
        _1229 = 0.0;
        _1230 = 0.0;
    }
    float _1523;
    float _1524;
    float _1525;
    float _1526;
    float _1527;
    float _1528;
    float _1529;
    float _1530;
    float _1531;
    float _1532;
    float _1533;
    float _1534;
    float _1535;
    float _1536;
    float _1537;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1254 = fma(_914, cbModelParam._m0[30u].z, fma(_910, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _906));
        float _1258 = fma(_914, cbModelParam._m0[31u].z, fma(_910, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _906));
        float _1262 = fma(_914, cbModelParam._m0[32u].z, fma(_910, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _906));
        float _1285 = _906 + _694;
        float _1286 = _910 + _695;
        float _1287 = _914 + _696;
        float _1297 = fma(_1287, cbModelParam._m0[30u].z, fma(_1286, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1285)) - _1254;
        float _1298 = fma(_1287, cbModelParam._m0[31u].z, fma(_1286, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1285)) - _1258;
        float _1299 = fma(_1287, cbModelParam._m0[32u].z, fma(_1286, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1285)) - _1262;
        float _1303 = inversesqrt(dot(vec3(_1297, _1298, _1299), vec3(_1297, _1298, _1299)));
        float _1316 = ((_1303 * _1297) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1254 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1317 = ((_1303 * _1298) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1258 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1318 = ((_1303 * _1299) / cbModelParam._m0[35u].z) + ((((((_1262 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1320 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1316, _1317, _1318), 0.0);
        vec4 _1327 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1316, _1317, _1318), 0.0);
        vec4 _1334 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1316, _1317, _1318), 0.0);
        vec4 _1341 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1316, _1317, _1318), 0.0);
        float _1353 = exp2((_1320.w + (-0.5)) * 20.0) * 2.0;
        float _1354 = _1353 * (_1320.x + (-0.5));
        float _1355 = _1353 * (_1320.y + (-0.5));
        float _1356 = _1353 * (_1320.z + (-0.5));
        float _1363 = exp2((_1327.w + (-0.5)) * 20.0) * 2.0;
        float _1364 = _1363 * (_1327.x + (-0.5));
        float _1365 = _1363 * (_1327.y + (-0.5));
        float _1366 = _1363 * (_1327.z + (-0.5));
        float _1373 = exp2((_1334.w + (-0.5)) * 20.0) * 2.0;
        float _1374 = _1373 * (_1334.x + (-0.5));
        float _1375 = _1373 * (_1334.y + (-0.5));
        float _1376 = _1373 * (_1334.z + (-0.5));
        float _1383 = exp2((_1341.w + (-0.5)) * 20.0) * 2.0;
        float _1384 = _1383 * (_1341.x + (-0.5));
        float _1385 = _1383 * (_1341.y + (-0.5));
        float _1386 = _1383 * (_1341.z + (-0.5));
        float _1387 = isnan(0.0) ? _1384 : (isnan(_1384) ? 0.0 : max(_1384, 0.0));
        float _1388 = isnan(0.0) ? _1385 : (isnan(_1385) ? 0.0 : max(_1385, 0.0));
        float _1389 = isnan(0.0) ? _1386 : (isnan(_1386) ? 0.0 : max(_1386, 0.0));
        float _1390 = _1354 * 0.5;
        float _1391 = _1364 * 0.5;
        float _1392 = _1374 * 0.5;
        float _1393 = dot(vec3(_1390, _1391, _1392), vec3(_1390, _1391, _1392));
        float _1398 = (_1393 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1393);
        float _1406 = (dot(vec3(_694, _695, _696), vec3(_1398 * _1390, _1398 * _1391, _1398 * _1392)) + 1.0) * 0.5;
        float _4115 = isnan(0.0) ? _1406 : (isnan(_1406) ? 0.0 : max(_1406, 0.0));
        float _1415 = sqrt(((_1391 * _1391) + (_1390 * _1390)) + (_1392 * _1392)) / (_1387 + 9.9999997473787516355514526367188e-06);
        float _4126 = isnan(0.0) ? _1415 : (isnan(_1415) ? 0.0 : max(_1415, 0.0));
        float _1416 = isnan(1.0) ? _4126 : (isnan(_4126) ? 1.0 : min(_4126, 1.0));
        float _1417 = _1416 * 2.0;
        float _1421 = (1.0 - _1416) / (_1416 + 1.0);
        float _4137 = isnan(0.0) ? _1421 : (isnan(_1421) ? 0.0 : max(_1421, 0.0));
        float _1422 = isnan(1.0) ? _4137 : (isnan(_4137) ? 1.0 : min(_4137, 1.0));
        float _1431 = ((((1.0 - _1422) * (_1417 + 2.0)) * exp2(log2(isnan(1.0) ? _4115 : (isnan(_4115) ? 1.0 : min(_4115, 1.0))) * (_1417 + 1.0))) + _1422) * _1387;
        float _1432 = _1355 * 0.5;
        float _1433 = _1365 * 0.5;
        float _1434 = _1375 * 0.5;
        float _1435 = dot(vec3(_1432, _1433, _1434), vec3(_1432, _1433, _1434));
        float _1440 = (_1435 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1435);
        float _1448 = (dot(vec3(_694, _695, _696), vec3(_1440 * _1432, _1440 * _1433, _1440 * _1434)) + 1.0) * 0.5;
        float _4148 = isnan(0.0) ? _1448 : (isnan(_1448) ? 0.0 : max(_1448, 0.0));
        float _1457 = sqrt(((_1433 * _1433) + (_1432 * _1432)) + (_1434 * _1434)) / (_1388 + 9.9999997473787516355514526367188e-06);
        float _4159 = isnan(0.0) ? _1457 : (isnan(_1457) ? 0.0 : max(_1457, 0.0));
        float _1458 = isnan(1.0) ? _4159 : (isnan(_4159) ? 1.0 : min(_4159, 1.0));
        float _1459 = _1458 * 2.0;
        float _1463 = (1.0 - _1458) / (_1458 + 1.0);
        float _4170 = isnan(0.0) ? _1463 : (isnan(_1463) ? 0.0 : max(_1463, 0.0));
        float _1464 = isnan(1.0) ? _4170 : (isnan(_4170) ? 1.0 : min(_4170, 1.0));
        float _1473 = ((((1.0 - _1464) * (_1459 + 2.0)) * exp2(log2(isnan(1.0) ? _4148 : (isnan(_4148) ? 1.0 : min(_4148, 1.0))) * (_1459 + 1.0))) + _1464) * _1388;
        float _1474 = _1356 * 0.5;
        float _1475 = _1366 * 0.5;
        float _1476 = _1376 * 0.5;
        float _1477 = dot(vec3(_1474, _1475, _1476), vec3(_1474, _1475, _1476));
        float _1482 = (_1477 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1477);
        float _1490 = (dot(vec3(_694, _695, _696), vec3(_1482 * _1474, _1482 * _1475, _1482 * _1476)) + 1.0) * 0.5;
        float _4181 = isnan(0.0) ? _1490 : (isnan(_1490) ? 0.0 : max(_1490, 0.0));
        float _1499 = sqrt(((_1475 * _1475) + (_1474 * _1474)) + (_1476 * _1476)) / (_1389 + 9.9999997473787516355514526367188e-06);
        float _4192 = isnan(0.0) ? _1499 : (isnan(_1499) ? 0.0 : max(_1499, 0.0));
        float _1500 = isnan(1.0) ? _4192 : (isnan(_4192) ? 1.0 : min(_4192, 1.0));
        float _1501 = _1500 * 2.0;
        float _1505 = (1.0 - _1500) / (_1500 + 1.0);
        float _4203 = isnan(0.0) ? _1505 : (isnan(_1505) ? 0.0 : max(_1505, 0.0));
        float _1506 = isnan(1.0) ? _4203 : (isnan(_4203) ? 1.0 : min(_4203, 1.0));
        float _1515 = ((((1.0 - _1506) * (_1501 + 2.0)) * exp2(log2(isnan(1.0) ? _4181 : (isnan(_4181) ? 1.0 : min(_4181, 1.0))) * (_1501 + 1.0))) + _1506) * _1389;
        _1523 = _1356;
        _1524 = _1355;
        _1525 = _1354;
        _1526 = _1366;
        _1527 = _1365;
        _1528 = _1364;
        _1529 = _1376;
        _1530 = _1375;
        _1531 = _1374;
        _1532 = _1389;
        _1533 = _1388;
        _1534 = _1387;
        _1535 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1431 : (isnan(_1431) ? 0.0 : max(_1431, 0.0)));
        _1536 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1473 : (isnan(_1473) ? 0.0 : max(_1473, 0.0)));
        _1537 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1515 : (isnan(_1515) ? 0.0 : max(_1515, 0.0)));
    }
    else
    {
        _1523 = _1216;
        _1524 = _1216;
        _1525 = _1216;
        _1526 = _1216;
        _1527 = _1216;
        _1528 = _1216;
        _1529 = _1216;
        _1530 = _1216;
        _1531 = _1216;
        _1532 = _1216;
        _1533 = _1216;
        _1534 = _1216;
        _1535 = 0.0;
        _1536 = 0.0;
        _1537 = 0.0;
    }
    float _1547 = (cbModelParam._m0[1u].x * (_1535 - _1228)) + _1228;
    float _1548 = (cbModelParam._m0[1u].x * (_1536 - _1229)) + _1229;
    float _1549 = (cbModelParam._m0[1u].x * (_1537 - _1230)) + _1230;
    float _1570 = fma(_1549, cbSceneParam._m0[89u].z, fma(_1548, cbSceneParam._m0[89u].y, _1547 * cbSceneParam._m0[89u].x));
    float _1573 = fma(_1549, cbSceneParam._m0[90u].z, fma(_1548, cbSceneParam._m0[90u].y, _1547 * cbSceneParam._m0[90u].x));
    float _1576 = fma(_1549, cbSceneParam._m0[91u].z, fma(_1548, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1547));
    float _1591 = _853 * 0.5;
    float _1592 = _854 * 0.5;
    float _1593 = _855 * 0.5;
    float _1594 = dot(vec4(_1591, _1592, _1593, 1.0), vec4(_1525, _1528, _1531, _1534));
    float _1597 = dot(vec4(_1591, _1592, _1593, 1.0), vec4(_1524, _1527, _1530, _1533));
    float _1600 = dot(vec4(_1591, _1592, _1593, 1.0), vec4(_1523, _1526, _1529, _1532));
    float _1634;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1607 = dot(vec4(_1591, _1592, _1593, 1.0), vec4(_1215, _1219, _1222, _1225));
        float _1611 = dot(vec4(_1591, _1592, _1593, 1.0), vec4(_1217, _1220, _1223, _1226));
        float _1615 = dot(vec4(_1591, _1592, _1593, 1.0), vec4(_1218, _1221, _1224, _1227));
        float _1622 = dot(vec4(cbModelParam._m0[39u]), vec4(_1591, _1592, _1593, 1.0));
        _1634 = dot(vec3(isnan(0.0) ? _1615 : (isnan(_1615) ? 0.0 : max(_1615, 0.0)), isnan(0.0) ? _1611 : (isnan(_1611) ? 0.0 : max(_1611, 0.0)), isnan(0.0) ? _1607 : (isnan(_1607) ? 0.0 : max(_1607, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1622) ? 0.0 : (isnan(0.0) ? _1622 : max(0.0, _1622))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1634 = 1.0;
    }
    float _1645;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1636 = dot(vec4(cbModelParam._m0[40u]), vec4(_1591, _1592, _1593, 1.0));
        _1645 = dot(vec3(isnan(0.0) ? _1594 : (isnan(_1594) ? 0.0 : max(_1594, 0.0)), isnan(0.0) ? _1597 : (isnan(_1597) ? 0.0 : max(_1597, 0.0)), isnan(0.0) ? _1600 : (isnan(_1600) ? 0.0 : max(_1600, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1636) ? 0.0 : (isnan(0.0) ? _1636 : max(0.0, _1636))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1645 = 1.0;
    }
    float _1649 = (_1645 * cbModelParam._m0[1u].x) + (_1634 * (1.0 - cbModelParam._m0[1u].x));
    float _1659 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _697);
    float _1660 = isnan(_1659) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1659 : min(cbModelParam._m0[25u].z, _1659));
    float _1742;
    float _1744;
    float _1746;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1709 = fma(_914, cbModelParam._m0[13u].z, fma(_910, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _906)) + cbModelParam._m0[13u].w;
        float _1713 = fma(_914, cbModelParam._m0[14u].z, fma(_910, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _906)) + cbModelParam._m0[14u].w;
        float _1717 = fma(_914, cbModelParam._m0[15u].z, fma(_910, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _906)) + cbModelParam._m0[15u].w;
        float _1720 = fma(_855, cbModelParam._m0[13u].z, fma(_854, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _853));
        float _1723 = fma(_855, cbModelParam._m0[14u].z, fma(_854, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _853));
        float _1726 = fma(_855, cbModelParam._m0[15u].z, fma(_854, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _853));
        float _1754;
        if (_1720 > 0.0)
        {
            _1754 = abs((1.0 - _1709) / _1720);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1720 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1709 + 1.0) / _1720);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1754 = frontier_phi_14_12_ladder;
        }
        float _1925;
        if (_1723 > 0.0)
        {
            _1925 = abs((1.0 - _1713) / _1723);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1723 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1713 + 1.0) / _1723);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1925 = frontier_phi_23_19_ladder;
        }
        float _2220;
        if (_1726 > 0.0)
        {
            _2220 = abs((1.0 - _1717) / _1726);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1726 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1717 + 1.0) / _1726);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2220 = frontier_phi_35_30_ladder;
        }
        float _2222 = isnan(_1925) ? _1754 : (isnan(_1754) ? _1925 : min(_1754, _1925));
        float _2223 = isnan(_2220) ? _2222 : (isnan(_2222) ? _2220 : min(_2222, _2220));
        float _2227 = (_2223 * _1720) + _1709;
        float _2228 = (_2223 * _1723) + _1713;
        float _2229 = (_2223 * _1726) + _1717;
        float _2230 = _2223 * 9.9999997473787516355514526367188e-05;
        float _2232 = (-1.0) - _2230;
        float _2234 = _2230 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2229 > _2234) || ((_2229 < _2232) || ((_2228 > _2234) || ((_2228 < _2232) || ((_2227 < _2232) || (_2227 > _2234))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2374 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2229, cbModelParam._m0[9u].z, fma(_2228, cbModelParam._m0[9u].y, _2227 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2229, cbModelParam._m0[10u].z, fma(_2228, cbModelParam._m0[10u].y, _2227 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2229, cbModelParam._m0[11u].z, fma(_2228, cbModelParam._m0[11u].y, _2227 * cbModelParam._m0[11u].x))), _1660);
            frontier_phi_13_35_ladder = _2374.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2374.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2374.x * cbModelParam._m0[1u].y;
        }
        _1742 = frontier_phi_13_35_ladder_2;
        _1744 = frontier_phi_13_35_ladder_1;
        _1746 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1730 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_853, _854, _855), _1660);
        _1742 = _1730.x * cbModelParam._m0[1u].y;
        _1744 = _1730.y * cbModelParam._m0[1u].y;
        _1746 = _1730.z * cbModelParam._m0[1u].y;
    }
    float _1750 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _697);
    float _1751 = isnan(_1750) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1750 : min(cbModelParam._m0[25u].w, _1750));
    float _1842;
    float _1844;
    float _1846;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1806 = fma(_914, cbModelParam._m0[21u].z, fma(_910, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _906)) + cbModelParam._m0[21u].w;
        float _1810 = fma(_914, cbModelParam._m0[22u].z, fma(_910, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _906)) + cbModelParam._m0[22u].w;
        float _1814 = fma(_914, cbModelParam._m0[23u].z, fma(_910, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _906)) + cbModelParam._m0[23u].w;
        float _1817 = fma(_855, cbModelParam._m0[21u].z, fma(_854, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _853));
        float _1820 = fma(_855, cbModelParam._m0[22u].z, fma(_854, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _853));
        float _1823 = fma(_855, cbModelParam._m0[23u].z, fma(_854, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _853));
        float _1930;
        if (_1817 > 0.0)
        {
            _1930 = abs((1.0 - _1806) / _1817);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1817 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1806 + 1.0) / _1817);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1930 = frontier_phi_25_21_ladder;
        }
        float _2247;
        if (_1820 > 0.0)
        {
            _2247 = abs((1.0 - _1810) / _1820);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1820 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1810 + 1.0) / _1820);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2247 = frontier_phi_37_32_ladder;
        }
        float _2574;
        if (_1823 > 0.0)
        {
            _2574 = abs((1.0 - _1814) / _1823);
        }
        else
        {
            float frontier_phi_47_44_ladder;
            if (_1823 < 0.0)
            {
                frontier_phi_47_44_ladder = abs((_1814 + 1.0) / _1823);
            }
            else
            {
                frontier_phi_47_44_ladder = 5000.0;
            }
            _2574 = frontier_phi_47_44_ladder;
        }
        float _2576 = isnan(_2247) ? _1930 : (isnan(_1930) ? _2247 : min(_1930, _2247));
        float _2577 = isnan(_2574) ? _2576 : (isnan(_2576) ? _2574 : min(_2576, _2574));
        float _2581 = (_2577 * _1817) + _1806;
        float _2582 = (_2577 * _1820) + _1810;
        float _2583 = (_2577 * _1823) + _1814;
        float _2584 = _2577 * 9.9999997473787516355514526367188e-05;
        float _2585 = (-1.0) - _2584;
        float _2587 = _2584 + 1.0;
        float frontier_phi_22_47_ladder;
        float frontier_phi_22_47_ladder_1;
        float frontier_phi_22_47_ladder_2;
        if ((_2583 > _2587) || ((_2583 < _2585) || ((_2582 > _2587) || ((_2582 < _2585) || ((_2581 < _2585) || (_2581 > _2587))))))
        {
            frontier_phi_22_47_ladder = 0.0;
            frontier_phi_22_47_ladder_1 = 0.0;
            frontier_phi_22_47_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2701 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2583, cbModelParam._m0[17u].z, fma(_2582, cbModelParam._m0[17u].y, _2581 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2583, cbModelParam._m0[18u].z, fma(_2582, cbModelParam._m0[18u].y, _2581 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2583, cbModelParam._m0[19u].z, fma(_2582, cbModelParam._m0[19u].y, _2581 * cbModelParam._m0[19u].x))), _1751);
            frontier_phi_22_47_ladder = _2701.z * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_1 = _2701.y * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_2 = _2701.x * cbModelParam._m0[1u].z;
        }
        _1842 = frontier_phi_22_47_ladder_2;
        _1844 = frontier_phi_22_47_ladder_1;
        _1846 = frontier_phi_22_47_ladder;
    }
    else
    {
        vec4 _1826 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_853, _854, _855), _1751);
        _1842 = _1826.x * cbModelParam._m0[1u].z;
        _1844 = _1826.y * cbModelParam._m0[1u].z;
        _1846 = _1826.z * cbModelParam._m0[1u].z;
    }
    float _1858 = ((((1.0 - _874) * ((_861 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_874 * _861)) * _845;
    float _1859 = _1858 * ((cbModelParam._m0[1u].w * (_1842 - _1742)) + _1742);
    float _1860 = _1858 * ((cbModelParam._m0[1u].w * (_1844 - _1744)) + _1744);
    float _1861 = _1858 * ((cbModelParam._m0[1u].w * (_1846 - _1746)) + _1746);
    float _1864 = fma(_1861, cbSceneParam._m0[89u].z, fma(_1860, cbSceneParam._m0[89u].y, _1859 * cbSceneParam._m0[89u].x));
    float _1867 = fma(_1861, cbSceneParam._m0[90u].z, fma(_1860, cbSceneParam._m0[90u].y, _1859 * cbSceneParam._m0[90u].x));
    float _1870 = fma(_1861, cbSceneParam._m0[91u].z, fma(_1860, cbSceneParam._m0[91u].y, _1859 * cbSceneParam._m0[91u].x));
    float _1904 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1908 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1912 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1916 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1917 = _1904 / _1916;
    float _1918 = _1908 / _1916;
    float _1919 = _1912 / _1916;
    float _2066;
    float _2067;
    float _2068;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1946 = ((uint(_1919 > cbSceneParam._m0[59u].y) + uint(_1919 > cbSceneParam._m0[59u].x)) + uint(_1919 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1947 = _1946 + 43u;
        uint _1955 = _1946 + 44u;
        uint _1963 = _1946 + 45u;
        uint _1971 = _1946 + 46u;
        float _1982 = fma(_1916, cbSceneParam._m0[_1947].w, fma(_1912, cbSceneParam._m0[_1947].z, fma(_1908, cbSceneParam._m0[_1947].y, _1904 * cbSceneParam._m0[_1947].x)));
        float _1986 = fma(_1916, cbSceneParam._m0[_1955].w, fma(_1912, cbSceneParam._m0[_1955].z, fma(_1908, cbSceneParam._m0[_1955].y, _1904 * cbSceneParam._m0[_1955].x)));
        float _1994 = fma(_1916, cbSceneParam._m0[_1971].w, fma(_1912, cbSceneParam._m0[_1971].z, fma(_1908, cbSceneParam._m0[_1971].y, _1904 * cbSceneParam._m0[_1971].x)));
        float _1999 = cbSceneParam._m0[33u].z * _1994;
        float _2001 = cbSceneParam._m0[33u].w * _1994;
        float _2004 = fma(_1916, cbSceneParam._m0[_1963].w, fma(_1912, cbSceneParam._m0[_1963].z, fma(_1908, cbSceneParam._m0[_1963].y, _1904 * cbSceneParam._m0[_1963].x))) / _1994;
        float _2052 = (cbSceneParam._m0[33u].x - sqrt(((_1918 * _1918) + (_1917 * _1917)) + (_1919 * _1919))) * cbSceneParam._m0[33u].y;
        float _4329 = isnan(0.0) ? _2052 : (isnan(_2052) ? 0.0 : max(_2052, 0.0));
        float _2059 = (isnan(1.0) ? _4329 : (isnan(_4329) ? 1.0 : min(_4329, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1999 + _1982) / _1994, (_2001 + _1986) / _1994), _2004), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2001 + _1982) / _1994, (_1986 - _1999) / _1994), _2004), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1982 - _1999) / _1994, (_1986 - _2001) / _1994), _2004), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1982 - _2001) / _1994, (_1999 + _1986) / _1994), _2004), 0.0)).x), vec4(0.25)));
        _2066 = 1.0 - (_2059 * cbSceneParam._m0[34u].x);
        _2067 = 1.0 - (_2059 * cbSceneParam._m0[34u].y);
        _2068 = 1.0 - (_2059 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2066 = 1.0;
        _2067 = 1.0;
        _2068 = 1.0;
    }
    float _2132;
    float _2134;
    float _2136;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2120 = fma(_1916, cbSceneParam._m0[63u].w, fma(_1912, cbSceneParam._m0[63u].z, fma(_1908, cbSceneParam._m0[63u].y, _1904 * cbSceneParam._m0[63u].x)));
        float _2121 = fma(_1916, cbSceneParam._m0[60u].w, fma(_1912, cbSceneParam._m0[60u].z, fma(_1908, cbSceneParam._m0[60u].y, _1904 * cbSceneParam._m0[60u].x))) / _2120;
        float _2122 = fma(_1916, cbSceneParam._m0[61u].w, fma(_1912, cbSceneParam._m0[61u].z, fma(_1908, cbSceneParam._m0[61u].y, _1904 * cbSceneParam._m0[61u].x))) / _2120;
        float frontier_phi_34_33_ladder;
        float frontier_phi_34_33_ladder_1;
        float frontier_phi_34_33_ladder_2;
        if ((((_2121 >= cbSceneParam._m0[64u].x) && (_2122 >= cbSceneParam._m0[64u].y)) && (_2121 <= cbSceneParam._m0[64u].z)) && (_2122 <= cbSceneParam._m0[64u].w))
        {
            float _2260 = fma(_1916, cbSceneParam._m0[62u].w, fma(_1912, cbSceneParam._m0[62u].z, fma(_1908, cbSceneParam._m0[62u].y, _1904 * cbSceneParam._m0[62u].x))) / _2120;
            float _2264 = isnan(cbSceneParam._m0[41u].w) ? _2260 : (isnan(_2260) ? cbSceneParam._m0[41u].w : max(_2260, cbSceneParam._m0[41u].w));
            float _2307 = (cbSceneParam._m0[33u].x - sqrt(((_1918 * _1918) + (_1917 * _1917)) + (_1919 * _1919))) * cbSceneParam._m0[33u].y;
            float _4345 = isnan(0.0) ? _2307 : (isnan(_2307) ? 0.0 : max(_2307, 0.0));
            float _2314 = (isnan(1.0) ? _4345 : (isnan(_4345) ? 1.0 : min(_4345, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2121, cbSceneParam._m0[33u].w + _2122), _2264), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2121, _2122 - cbSceneParam._m0[33u].z), _2264), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2121 - cbSceneParam._m0[33u].z, _2122 - cbSceneParam._m0[33u].w), _2264), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2121 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2122), _2264), 0.0)).x), vec4(0.25)));
            float _2318 = 1.0 - (_2314 * cbSceneParam._m0[34u].x);
            float _2319 = 1.0 - (_2314 * cbSceneParam._m0[34u].y);
            float _2320 = 1.0 - (_2314 * cbSceneParam._m0[34u].z);
            frontier_phi_34_33_ladder = isnan(_2320) ? _2068 : (isnan(_2068) ? _2320 : min(_2068, _2320));
            frontier_phi_34_33_ladder_1 = isnan(_2319) ? _2067 : (isnan(_2067) ? _2319 : min(_2067, _2319));
            frontier_phi_34_33_ladder_2 = isnan(_2318) ? _2066 : (isnan(_2066) ? _2318 : min(_2066, _2318));
        }
        else
        {
            frontier_phi_34_33_ladder = _2068;
            frontier_phi_34_33_ladder_1 = _2067;
            frontier_phi_34_33_ladder_2 = _2066;
        }
        _2132 = frontier_phi_34_33_ladder_2;
        _2134 = frontier_phi_34_33_ladder_1;
        _2136 = frontier_phi_34_33_ladder;
    }
    else
    {
        _2132 = _2066;
        _2134 = _2067;
        _2136 = _2068;
    }
    uvec4 _2141 = floatBitsToUint(cbInstanceData._m0[_266 + 5u]);
    uint _2143 = _2141.x * 14u;
    uint _2144 = _2143 + 13u;
    float _2151 = _845 + (-1.0);
    float _2156 = (cbLight._m0[_2144].x * _2151) + 1.0;
    float _2157 = (cbLight._m0[_2144].y * _2151) + 1.0;
    float _2158 = (cbLight._m0[_2144].z * _2151) + 1.0;
    float _2159 = (cbLight._m0[_2144].w * _2151) + 1.0;
    uint _2160 = _2143 + 5u;
    float _2166 = isnan(1.0) ? _2157 : (isnan(_2157) ? 1.0 : min(_2157, 1.0));
    uint _2170 = _2143 + 4u;
    float _2179 = isnan(1.0) ? _2156 : (isnan(_2156) ? 1.0 : min(_2156, 1.0));
    uint _2183 = _2143 | 1u;
    float _2194 = dot(vec3(cbLight._m0[_2143].xyz), vec3(_694, _695, _696));
    float _2197 = dot(vec3(cbLight._m0[_2183].xyz), vec3(_694, _695, _696));
    float _4381 = isnan(0.0) ? _2194 : (isnan(_2194) ? 0.0 : max(_2194, 0.0));
    float _4392 = isnan(0.0) ? _2197 : (isnan(_2197) ? 0.0 : max(_2197, 0.0));
    float _2202 = (isnan(1.0) ? _4381 : (isnan(_4381) ? 1.0 : min(_4381, 1.0))) * 0.3183098733425140380859375;
    float _2204 = (isnan(1.0) ? _4392 : (isnan(_4392) ? 1.0 : min(_4392, 1.0))) * 0.3183098733425140380859375;
    float _2211 = ((cbLight._m0[_2160].x * _2166) * _2204) + (((cbLight._m0[_2170].x * _2132) * _2179) * _2202);
    float _2212 = ((_2166 * cbLight._m0[_2160].y) * _2204) + (((cbLight._m0[_2170].y * _2134) * _2179) * _2202);
    float _2213 = ((_2166 * cbLight._m0[_2160].z) * _2204) + (((cbLight._m0[_2170].z * _2136) * _2179) * _2202);
    uvec4 _2217 = floatBitsToUint(cbLight._m0[_2143 + 12u]);
    bool _2219 = _2217.x == 0u;
    float _2321;
    float _2323;
    float _2325;
    if (_2219)
    {
        _2321 = _2211;
        _2323 = _2212;
        _2325 = _2213;
    }
    else
    {
        uint _2329 = _2143 + 6u;
        float _2345 = (dot(vec3(cbLight._m0[_2143 + 2u].xyz), vec3(_694, _695, _696)) * 0.5) + 0.5;
        float _2346 = _2345 * _2345;
        float _4403 = isnan(0.0) ? _2346 : (isnan(_2346) ? 0.0 : max(_2346, 0.0));
        float _2347 = isnan(1.0) ? _4403 : (isnan(_4403) ? 1.0 : min(_4403, 1.0));
        float _2348 = isnan(1.0) ? _2158 : (isnan(_2158) ? 1.0 : min(_2158, 1.0));
        _2321 = (((cbLight._m0[_2329].x * 0.3183098733425140380859375) * _2347) * _2348) + _2211;
        _2323 = (((cbLight._m0[_2329].y * 0.3183098733425140380859375) * _2347) * _2348) + _2212;
        _2325 = (((cbLight._m0[_2329].z * 0.3183098733425140380859375) * _2347) * _2348) + _2213;
    }
    bool _2328 = _2217.y == 0u;
    float _2383;
    float _2385;
    float _2387;
    if (_2328)
    {
        _2383 = _2321;
        _2385 = _2323;
        _2387 = _2325;
    }
    else
    {
        uint _2545 = _2143 + 7u;
        float _2561 = (dot(vec3(cbLight._m0[_2143 + 3u].xyz), vec3(_694, _695, _696)) * 0.5) + 0.5;
        float _2562 = _2561 * _2561;
        float _4419 = isnan(0.0) ? _2562 : (isnan(_2562) ? 0.0 : max(_2562, 0.0));
        float _2563 = isnan(1.0) ? _4419 : (isnan(_4419) ? 1.0 : min(_4419, 1.0));
        float _2564 = isnan(1.0) ? _2159 : (isnan(_2159) ? 1.0 : min(_2159, 1.0));
        _2383 = (((cbLight._m0[_2545].x * 0.3183098733425140380859375) * _2563) * _2564) + _2321;
        _2385 = (((cbLight._m0[_2545].y * 0.3183098733425140380859375) * _2563) * _2564) + _2323;
        _2387 = (((cbLight._m0[_2545].z * 0.3183098733425140380859375) * _2563) * _2564) + _2325;
    }
    uint _2390 = _2143 + 8u;
    float _2403 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2143].w)) * _697) * 0.949999988079071044921875);
    float _2404 = _2403 * _2403;
    float _2405 = cbLight._m0[_2143].x + _774;
    float _2406 = cbLight._m0[_2143].y + _775;
    float _2407 = cbLight._m0[_2143].z + _776;
    float _2411 = inversesqrt(dot(vec3(_2405, _2406, _2407), vec3(_2405, _2406, _2407)));
    float _2412 = _2411 * _2405;
    float _2413 = _2411 * _2406;
    float _2414 = _2411 * _2407;
    float _2415 = dot(vec3(_694, _695, _696), vec3(cbLight._m0[_2143].xyz));
    float _4435 = isnan(0.0) ? _2415 : (isnan(_2415) ? 0.0 : max(_2415, 0.0));
    float _2418 = isnan(1.0) ? _4435 : (isnan(_4435) ? 1.0 : min(_4435, 1.0));
    float _4446 = isnan(0.0) ? _846 : (isnan(_846) ? 0.0 : max(_846, 0.0));
    float _2419 = isnan(1.0) ? _4446 : (isnan(_4446) ? 1.0 : min(_4446, 1.0));
    float _2420 = dot(vec3(_694, _695, _696), vec3(_2412, _2413, _2414));
    float _4457 = isnan(0.0) ? _2420 : (isnan(_2420) ? 0.0 : max(_2420, 0.0));
    float _2423 = isnan(1.0) ? _4457 : (isnan(_4457) ? 1.0 : min(_4457, 1.0));
    float _2424 = dot(vec3(cbLight._m0[_2143].xyz), vec3(_2412, _2413, _2414));
    float _4468 = isnan(0.0) ? _2424 : (isnan(_2424) ? 0.0 : max(_2424, 0.0));
    float _2428 = _2404 * _2404;
    float _2432 = ((_2423 * _2423) * (_2428 + (-1.0))) + 1.0;
    float _2443 = (exp2(log2(1.0 - (isnan(1.0) ? _4468 : (isnan(_4468) ? 1.0 : min(_4468, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2444 = 1.0 - _2404;
    float _2455 = (0.5 / (((_2419 * ((_2418 * _2444) + _2404)) + 9.9999999392252902907785028219223e-09) + (((_2419 * _2444) + _2404) * _2418))) * _2418;
    float _4479 = isnan(0.0) ? _2455 : (isnan(_2455) ? 0.0 : max(_2455, 0.0));
    float _2457 = (isnan(1.0) ? _4479 : (isnan(_4479) ? 1.0 : min(_4479, 1.0))) * (_2428 / ((_2432 * _2432) * 3.141590118408203125));
    uint _2471 = _2143 + 9u;
    float _2482 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2183].w)) * _697) * 0.949999988079071044921875);
    float _2483 = _2482 * _2482;
    float _2484 = cbLight._m0[_2183].x + _774;
    float _2485 = cbLight._m0[_2183].y + _775;
    float _2486 = cbLight._m0[_2183].z + _776;
    float _2490 = inversesqrt(dot(vec3(_2484, _2485, _2486), vec3(_2484, _2485, _2486)));
    float _2491 = _2490 * _2484;
    float _2492 = _2490 * _2485;
    float _2493 = _2490 * _2486;
    float _2494 = dot(vec3(_694, _695, _696), vec3(cbLight._m0[_2183].xyz));
    float _4490 = isnan(0.0) ? _2494 : (isnan(_2494) ? 0.0 : max(_2494, 0.0));
    float _2497 = isnan(1.0) ? _4490 : (isnan(_4490) ? 1.0 : min(_4490, 1.0));
    float _2498 = dot(vec3(_694, _695, _696), vec3(_2491, _2492, _2493));
    float _4501 = isnan(0.0) ? _2498 : (isnan(_2498) ? 0.0 : max(_2498, 0.0));
    float _2501 = isnan(1.0) ? _4501 : (isnan(_4501) ? 1.0 : min(_4501, 1.0));
    float _2502 = dot(vec3(cbLight._m0[_2183].xyz), vec3(_2491, _2492, _2493));
    float _4512 = isnan(0.0) ? _2502 : (isnan(_2502) ? 0.0 : max(_2502, 0.0));
    float _2506 = _2483 * _2483;
    float _2510 = ((_2501 * _2501) * (_2506 + (-1.0))) + 1.0;
    float _2519 = (exp2(log2(1.0 - (isnan(1.0) ? _4512 : (isnan(_4512) ? 1.0 : min(_4512, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2520 = 1.0 - _2483;
    float _2530 = (0.5 / (((_2419 * ((_2497 * _2520) + _2483)) + 9.9999999392252902907785028219223e-09) + (((_2419 * _2520) + _2483) * _2497))) * _2497;
    float _4523 = isnan(0.0) ? _2530 : (isnan(_2530) ? 0.0 : max(_2530, 0.0));
    float _2532 = (isnan(1.0) ? _4523 : (isnan(_4523) ? 1.0 : min(_4523, 1.0))) * (_2506 / ((_2510 * _2510) * 3.141590118408203125));
    float _2542 = (((_2519 * cbLight._m0[_2471].x) * _2532) * _2166) + ((((cbLight._m0[_2390].x * _2132) * _2443) * _2457) * _2179);
    float _2543 = (((_2519 * cbLight._m0[_2471].y) * _2532) * _2166) + ((((cbLight._m0[_2390].y * _2134) * _2443) * _2457) * _2179);
    float _2544 = (((_2519 * cbLight._m0[_2471].z) * _2532) * _2166) + ((((cbLight._m0[_2390].z * _2136) * _2443) * _2457) * _2179);
    float _2600;
    float _2602;
    float _2604;
    if (_2219)
    {
        _2600 = _2542;
        _2602 = _2543;
        _2604 = _2544;
    }
    else
    {
        uint _2606 = _2143 + 2u;
        uint _2610 = _2143 + 10u;
        float _2624 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2606].w)) * _697) * 0.949999988079071044921875);
        float _2625 = _2624 * _2624;
        float _2626 = cbLight._m0[_2606].x + _774;
        float _2627 = cbLight._m0[_2606].y + _775;
        float _2628 = cbLight._m0[_2606].z + _776;
        float _2632 = inversesqrt(dot(vec3(_2626, _2627, _2628), vec3(_2626, _2627, _2628)));
        float _2633 = _2632 * _2626;
        float _2634 = _2632 * _2627;
        float _2635 = _2632 * _2628;
        float _2636 = dot(vec3(_694, _695, _696), vec3(cbLight._m0[_2606].xyz));
        float _4534 = isnan(0.0) ? _2636 : (isnan(_2636) ? 0.0 : max(_2636, 0.0));
        float _2639 = isnan(1.0) ? _4534 : (isnan(_4534) ? 1.0 : min(_4534, 1.0));
        float _2640 = dot(vec3(_694, _695, _696), vec3(_2633, _2634, _2635));
        float _4545 = isnan(0.0) ? _2640 : (isnan(_2640) ? 0.0 : max(_2640, 0.0));
        float _2643 = isnan(1.0) ? _4545 : (isnan(_4545) ? 1.0 : min(_4545, 1.0));
        float _2644 = dot(vec3(cbLight._m0[_2606].xyz), vec3(_2633, _2634, _2635));
        float _4556 = isnan(0.0) ? _2644 : (isnan(_2644) ? 0.0 : max(_2644, 0.0));
        float _2648 = _2625 * _2625;
        float _2652 = ((_2643 * _2643) * (_2648 + (-1.0))) + 1.0;
        float _2661 = (exp2(log2(1.0 - (isnan(1.0) ? _4556 : (isnan(_4556) ? 1.0 : min(_4556, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2662 = 1.0 - _2625;
        float _2672 = (0.5 / (((_2419 * ((_2639 * _2662) + _2625)) + 9.9999999392252902907785028219223e-09) + (((_2419 * _2662) + _2625) * _2639))) * _2639;
        float _4567 = isnan(0.0) ? _2672 : (isnan(_2672) ? 0.0 : max(_2672, 0.0));
        float _2674 = (isnan(1.0) ? _4567 : (isnan(_4567) ? 1.0 : min(_4567, 1.0))) * (_2648 / ((_2652 * _2652) * 3.141590118408203125));
        float _2675 = isnan(1.0) ? _2158 : (isnan(_2158) ? 1.0 : min(_2158, 1.0));
        _2600 = (((_2661 * cbLight._m0[_2610].x) * _2674) * _2675) + _2542;
        _2602 = (((_2661 * cbLight._m0[_2610].y) * _2674) * _2675) + _2543;
        _2604 = (((_2661 * cbLight._m0[_2610].z) * _2674) * _2675) + _2544;
    }
    float _2706;
    float _2708;
    float _2710;
    if (_2328)
    {
        _2706 = _2600;
        _2708 = _2602;
        _2710 = _2604;
    }
    else
    {
        uint _2717 = _2143 + 3u;
        uint _2721 = _2143 + 11u;
        float _2735 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2717].w)) * _697) * 0.949999988079071044921875);
        float _2736 = _2735 * _2735;
        float _2737 = cbLight._m0[_2717].x + _774;
        float _2738 = cbLight._m0[_2717].y + _775;
        float _2739 = cbLight._m0[_2717].z + _776;
        float _2743 = inversesqrt(dot(vec3(_2737, _2738, _2739), vec3(_2737, _2738, _2739)));
        float _2744 = _2743 * _2737;
        float _2745 = _2743 * _2738;
        float _2746 = _2743 * _2739;
        float _2747 = dot(vec3(_694, _695, _696), vec3(cbLight._m0[_2717].xyz));
        float _4583 = isnan(0.0) ? _2747 : (isnan(_2747) ? 0.0 : max(_2747, 0.0));
        float _2750 = isnan(1.0) ? _4583 : (isnan(_4583) ? 1.0 : min(_4583, 1.0));
        float _2751 = dot(vec3(_694, _695, _696), vec3(_2744, _2745, _2746));
        float _4594 = isnan(0.0) ? _2751 : (isnan(_2751) ? 0.0 : max(_2751, 0.0));
        float _2754 = isnan(1.0) ? _4594 : (isnan(_4594) ? 1.0 : min(_4594, 1.0));
        float _2755 = dot(vec3(cbLight._m0[_2717].xyz), vec3(_2744, _2745, _2746));
        float _4605 = isnan(0.0) ? _2755 : (isnan(_2755) ? 0.0 : max(_2755, 0.0));
        float _2759 = _2736 * _2736;
        float _2763 = ((_2754 * _2754) * (_2759 + (-1.0))) + 1.0;
        float _2772 = (exp2(log2(1.0 - (isnan(1.0) ? _4605 : (isnan(_4605) ? 1.0 : min(_4605, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2773 = 1.0 - _2736;
        float _2783 = (0.5 / (((_2419 * ((_2750 * _2773) + _2736)) + 9.9999999392252902907785028219223e-09) + (((_2419 * _2773) + _2736) * _2750))) * _2750;
        float _4616 = isnan(0.0) ? _2783 : (isnan(_2783) ? 0.0 : max(_2783, 0.0));
        float _2785 = (isnan(1.0) ? _4616 : (isnan(_4616) ? 1.0 : min(_4616, 1.0))) * (_2759 / ((_2763 * _2763) * 3.141590118408203125));
        float _2786 = isnan(1.0) ? _2159 : (isnan(_2159) ? 1.0 : min(_2159, 1.0));
        _2706 = (((_2772 * cbLight._m0[_2721].x) * _2785) * _2786) + _2600;
        _2708 = (((_2772 * cbLight._m0[_2721].y) * _2785) * _2786) + _2602;
        _2710 = (((_2772 * cbLight._m0[_2721].z) * _2785) * _2786) + _2604;
    }
    float _2852;
    float _2854;
    float _2856;
    float _2858;
    float _2860;
    float _2862;
    if (_2141.y == 0u)
    {
        uvec4 _2807 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2808 = _2807.x;
        uint _2819 = uint((float(_2807.y) * floor(float(uint(cbSceneParam._m0[85u].y * _783) / _2808))) + floor(float(uint(cbSceneParam._m0[85u].x * _782) / _2808)));
        float _2829 = (log2(_1919 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2830 = isnan(0.0) ? _2829 : (isnan(_2829) ? 0.0 : max(_2829, 0.0));
        uint _2833 = uint(isnan(14.0) ? _2830 : (isnan(_2830) ? 14.0 : min(_2830, 14.0)));
        uvec4 _2838 = texelFetch(g_lightClusterGridBuffer, int(((_2833 << 2u) + (_2819 << 6u)) >> 2u));
        uint _2839 = _2838.x;
        uint _2840 = _2807.z;
        float _2919;
        float _2921;
        float _2923;
        float _2925;
        float _2927;
        float _2929;
        if (((((1u << ((_2840 >> 4u) & 15u)) + 4294967295u) & _2839) == 0u) || ((_2840 & 240u) == 0u))
        {
            _2919 = 0.0;
            _2921 = 0.0;
            _2923 = 0.0;
            _2925 = 0.0;
            _2927 = 0.0;
            _2929 = 0.0;
        }
        else
        {
            float _2920;
            float _2922;
            float _2924;
            float _2926;
            float _2928;
            float _2930;
            float _3064 = 0.0;
            float _3065 = 0.0;
            float _3066 = 0.0;
            float _3067 = 0.0;
            float _3068 = 0.0;
            float _3069 = 0.0;
            uint _3070 = 0u;
            uint _3079;
            bool _3080;
            for (;;)
            {
                _3079 = texelFetch(g_lightClassification, int((((_2833 << 5u) + (_2819 << 9u)) + (_3070 << 2u)) >> 2u)).x;
                _3080 = _3079 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3080)
                {
                    frontier_phi_66_pred = _3069;
                    frontier_phi_66_pred_1 = _3068;
                    frontier_phi_66_pred_2 = _3067;
                    frontier_phi_66_pred_3 = _3066;
                    frontier_phi_66_pred_4 = _3065;
                    frontier_phi_66_pred_5 = _3064;
                }
                else
                {
                    float _3188;
                    float _3189;
                    float _3190;
                    float _3191;
                    float _3192;
                    float _3193;
                    uint _3194;
                    _3188 = _3064;
                    _3189 = _3065;
                    _3190 = _3066;
                    _3191 = _3067;
                    _3192 = _3068;
                    _3193 = _3069;
                    _3194 = _3079;
                    float _3120;
                    float _3121;
                    float _3122;
                    float _3123;
                    float _3124;
                    float _3125;
                    for (;;)
                    {
                        uint _3198 = uint(findLSB(_3194)) + (_3070 << 5u);
                        uint _3195 = (_3194 + 4294967295u) & _3194;
                        uint _3200 = _3198 * 48u;
                        vec4 _3214 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3200)).x, texelFetch(g_PointLightRenderingBuffer, int(_3200 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3200 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3200 + 3u)).x));
                        uint _3220 = (_3198 * 48u) + 4u;
                        vec4 _3233 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3220)).x, texelFetch(g_PointLightRenderingBuffer, int(_3220 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3220 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3220 + 3u)).x));
                        uint _3239 = (_3198 * 48u) + 8u;
                        vec3 _3250 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3239)).x, texelFetch(g_PointLightRenderingBuffer, int(_3239 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3239 + 2u)).x));
                        float _3254 = _3214.x - _1917;
                        float _3255 = _3214.y - _1918;
                        float _3256 = _3214.z - _1919;
                        float _3257 = dot(vec3(_3254, _3255, _3256), vec3(_3254, _3255, _3256));
                        float _3260 = inversesqrt(_3257);
                        float _3261 = _3260 * _3254;
                        float _3262 = _3260 * _3255;
                        float _3263 = _3260 * _3256;
                        float _3264 = dot(vec3(_801, _804, _807), vec3(_3261, _3262, _3263));
                        float _3269 = 1.0 - (_3257 * _3214.w);
                        float _4642 = isnan(0.0) ? _3269 : (isnan(_3269) ? 0.0 : max(_3269, 0.0));
                        float _3270 = isnan(1.0) ? _4642 : (isnan(_4642) ? 1.0 : min(_4642, 1.0));
                        float _3271 = sqrt(_3257) * _3233.w;
                        float _3274 = 1.39999997615814208984375 / (_3271 + 1.39999997615814208984375);
                        float _3275 = _3274 * _3274;
                        float _3278 = ((1.0 - _3275) * _3264) + _3275;
                        float _3281 = _3271 * _3271;
                        float _3285 = ((isnan(0.0) ? _3278 : (isnan(_3278) ? 0.0 : max(_3278, 0.0))) * _3270) / ((_3281 * 0.699999988079071044921875) + 1.0);
                        float _3289 = (-0.0) - _1917;
                        float _3290 = (-0.0) - _1918;
                        float _3291 = (-0.0) - _1919;
                        float _3295 = inversesqrt(dot(vec3(_3289, _3290, _3291), vec3(_3289, _3290, _3291)));
                        float _3296 = _3295 * _3289;
                        float _3297 = _3295 * _3290;
                        float _3298 = _3295 * _3291;
                        float _3305 = exp2(log2(1.0 / ((_3281 * 3.5) + 5.0)) * 0.25);
                        float _3306 = 1.0 - _861;
                        float _3313 = sqrt(1.0 - ((1.0 - (_3306 * _3306)) * (1.0 - (_3305 * _3305))));
                        float _3314 = _3313 * _3313;
                        float _3315 = _3314 * _3314;
                        float _3316 = _3296 + _3261;
                        float _3317 = _3297 + _3262;
                        float _3318 = _3298 + _3263;
                        float _3322 = inversesqrt(dot(vec3(_3316, _3317, _3318), vec3(_3316, _3317, _3318)));
                        float _3326 = dot(vec3(_801, _804, _807), vec3(_3296, _3297, _3298));
                        float _4658 = isnan(0.0) ? _3326 : (isnan(_3326) ? 0.0 : max(_3326, 0.0));
                        float _3329 = isnan(1.0) ? _4658 : (isnan(_4658) ? 1.0 : min(_4658, 1.0));
                        float _3330 = dot(vec3(_801, _804, _807), vec3(_3322 * _3316, _3322 * _3317, _3322 * _3318));
                        float _4669 = isnan(0.0) ? _3330 : (isnan(_3330) ? 0.0 : max(_3330, 0.0));
                        float _3333 = isnan(1.0) ? _4669 : (isnan(_4669) ? 1.0 : min(_4669, 1.0));
                        float _3337 = ((_3333 * _3333) * (_3315 + (-1.0))) + 1.0;
                        float _3338 = _3274 * _3314;
                        float _3339 = _3338 * _3338;
                        float _3342 = ((1.0 - _3339) * _3264) + _3339;
                        float _4680 = isnan(0.0) ? _3342 : (isnan(_3342) ? 0.0 : max(_3342, 0.0));
                        float _3343 = isnan(1.0) ? _4680 : (isnan(_4680) ? 1.0 : min(_4680, 1.0));
                        float _3344 = 1.0 - _3314;
                        float _3354 = (0.5 / (((_3343 * ((_3329 * _3344) + _3314)) + 9.9999999392252902907785028219223e-09) + (((_3343 * _3344) + _3314) * _3329))) * _3343;
                        float _4691 = isnan(0.0) ? _3354 : (isnan(_3354) ? 0.0 : max(_3354, 0.0));
                        float _3365 = (((_3315 * 3.1415927410125732421875) * (isnan(1.0) ? _4691 : (isnan(_4691) ? 1.0 : min(_4691, 1.0)))) / ((_3337 * _3337) * ((_3281 * 2.1991131305694580078125) + 3.141590118408203125))) * _3270;
                        _3123 = (_3285 * _3233.x) + _3191;
                        _3124 = (_3285 * _3233.y) + _3192;
                        _3125 = (_3285 * _3233.z) + _3193;
                        _3120 = (_3365 * _3250.x) + _3188;
                        _3121 = (_3365 * _3250.y) + _3189;
                        _3122 = (_3365 * _3250.z) + _3190;
                        if (_3195 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3188 = _3120;
                            _3189 = _3121;
                            _3190 = _3122;
                            _3191 = _3123;
                            _3192 = _3124;
                            _3193 = _3125;
                            _3194 = _3195;
                        }
                    }
                    frontier_phi_66_pred = _3125;
                    frontier_phi_66_pred_1 = _3124;
                    frontier_phi_66_pred_2 = _3123;
                    frontier_phi_66_pred_3 = _3122;
                    frontier_phi_66_pred_4 = _3121;
                    frontier_phi_66_pred_5 = _3120;
                }
                _2930 = frontier_phi_66_pred;
                _2928 = frontier_phi_66_pred_1;
                _2926 = frontier_phi_66_pred_2;
                _2924 = frontier_phi_66_pred_3;
                _2922 = frontier_phi_66_pred_4;
                _2920 = frontier_phi_66_pred_5;
                uint _3071 = _3070 + 1u;
                if (_3071 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3064 = _2920;
                    _3065 = _2922;
                    _3066 = _2924;
                    _3067 = _2926;
                    _3068 = _2928;
                    _3069 = _2930;
                    _3070 = _3071;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2919 = _2920;
            _2921 = _2922;
            _2923 = _2924;
            _2925 = _2926;
            _2927 = _2928;
            _2929 = _2930;
        }
        uvec4 _2933 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2934 = _2933.z;
        uint _2936 = (_2934 >> 8u) & 15u;
        float _3032;
        float _3034;
        float _3036;
        float _3038;
        float _3040;
        float _3042;
        if (((4294967295u << _2936) & _2839) == 0u)
        {
            _3032 = _2919;
            _3034 = _2921;
            _3036 = _2923;
            _3038 = _2925;
            _3040 = _2927;
            _3042 = _2929;
        }
        else
        {
            float _3057 = inversesqrt(dot(vec3(_1917, _1918, _1919), vec3(_1917, _1918, _1919)));
            float _3058 = _3057 * _1917;
            float _3059 = _3057 * _1918;
            float _3060 = _3057 * _1919;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2936 < ((_2934 >> 12u) & 15u))
            {
                float _3033;
                float _3035;
                float _3037;
                float _3039;
                float _3041;
                float _3043;
                float _3171 = _2919;
                float _3172 = _2921;
                float _3173 = _2923;
                float _3174 = _2925;
                float _3175 = _2927;
                float _3176 = _2929;
                uint _3177 = _2936;
                uint _3186;
                bool _3187;
                for (;;)
                {
                    _3186 = texelFetch(g_lightClassification, int((((_2833 << 5u) + (_2819 << 9u)) + (_3177 << 2u)) >> 2u)).x;
                    _3187 = _3186 == 0u;
                    float frontier_phi_72_pred;
                    float frontier_phi_72_pred_1;
                    float frontier_phi_72_pred_2;
                    float frontier_phi_72_pred_3;
                    float frontier_phi_72_pred_4;
                    float frontier_phi_72_pred_5;
                    if (_3187)
                    {
                        frontier_phi_72_pred = _3176;
                        frontier_phi_72_pred_1 = _3175;
                        frontier_phi_72_pred_2 = _3174;
                        frontier_phi_72_pred_3 = _3173;
                        frontier_phi_72_pred_4 = _3172;
                        frontier_phi_72_pred_5 = _3171;
                    }
                    else
                    {
                        float _3370;
                        float _3371;
                        float _3372;
                        float _3373;
                        float _3374;
                        float _3375;
                        float _3663;
                        float _3664;
                        float _3665;
                        float _3666;
                        float _3667;
                        float _3668;
                        float _3383 = _3171;
                        float _3384 = _3172;
                        float _3385 = _3173;
                        float _3386 = _3174;
                        float _3387 = _3175;
                        float _3388 = _3176;
                        uint _3389 = _3186;
                        uint _3390;
                        vec4 _3415;
                        float _3416;
                        vec4 _3431;
                        vec3 _3443;
                        vec4 _3458;
                        vec4 _3473;
                        float _3519;
                        bool _3520;
                        for (;;)
                        {
                            uint _3400 = ((_3177 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3389));
                            _3390 = (_3389 + 4294967295u) & _3389;
                            uint _3402 = _3400 * 40u;
                            _3415 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3402)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3402 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3402 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3402 + 3u)).x));
                            _3416 = _3415.w;
                            uint _3418 = (_3400 * 40u) + 4u;
                            _3431 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3418)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3418 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3418 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3418 + 3u)).x));
                            uint _3433 = (_3400 * 40u) + 8u;
                            _3443 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3433)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3433 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3433 + 2u)).x));
                            uint _3445 = (_3400 * 40u) + 16u;
                            _3458 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3445)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3445 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3445 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3445 + 3u)).x));
                            uint _3460 = (_3400 * 40u) + 20u;
                            _3473 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3460)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3460 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3460 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3460 + 3u)).x));
                            uint _3475 = (_3400 * 40u) + 24u;
                            vec4 _3488 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3475)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3475 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3475 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3475 + 3u)).x));
                            uint _3494 = (_3400 * 40u) + 28u;
                            vec4 _3507 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3494)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3494 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3494 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3494 + 3u)).x));
                            _3519 = fma(_1919, _3507.z, fma(_1918, _3507.y, _3507.x * _1917)) + _3507.w;
                            _3520 = !((fma(_1919, _3488.z, fma(_1918, _3488.y, _3488.x * _1917)) + _3488.w) <= 0.0);
                            float frontier_phi_78_pred;
                            float frontier_phi_78_pred_1;
                            float frontier_phi_78_pred_2;
                            float frontier_phi_78_pred_3;
                            float frontier_phi_78_pred_4;
                            float frontier_phi_78_pred_5;
                            if (_3520)
                            {
                                float _3547 = _3415.x - _1917;
                                float _3548 = _3415.y - _1918;
                                float _3549 = _3415.z - _1919;
                                float _3550 = dot(vec3(_3547, _3548, _3549), vec3(_3547, _3548, _3549));
                                float _3553 = inversesqrt(_3550);
                                float _3554 = _3553 * _3547;
                                float _3555 = _3553 * _3548;
                                float _3556 = _3553 * _3549;
                                float _3560 = 1.0 - (_3550 / (_3416 * _3416));
                                float _4702 = isnan(0.0) ? _3560 : (isnan(_3560) ? 0.0 : max(_3560, 0.0));
                                float _3561 = isnan(1.0) ? _4702 : (isnan(_4702) ? 1.0 : min(_4702, 1.0));
                                float _3565 = sqrt(_3550) * _3431.w;
                                float _3567 = 1.39999997615814208984375 / (_3565 + 1.39999997615814208984375);
                                float _3568 = _3567 * _3567;
                                float _3571 = ((1.0 - _3568) * dot(vec3(_3554, _3555, _3556), vec3(_801, _804, _807))) + _3568;
                                float _3574 = _3565 * _3565;
                                float _3578 = (fma(_1919, _3458.z, fma(_1918, _3458.y, _3458.x * _1917)) + _3458.w) / _3519;
                                float _3579 = (fma(_1919, _3473.z, fma(_1918, _3473.y, _3473.x * _1917)) + _3473.w) / _3519;
                                float _3583 = 1.0 - dot(vec2(_3578, _3579), vec2(_3578, _3579));
                                float _4718 = isnan(0.0) ? _3583 : (isnan(_3583) ? 0.0 : max(_3583, 0.0));
                                float _3584 = isnan(1.0) ? _4718 : (isnan(_4718) ? 1.0 : min(_4718, 1.0));
                                float _3585 = _3584 * (((isnan(0.0) ? _3571 : (isnan(_3571) ? 0.0 : max(_3571, 0.0))) * _3561) / ((_3574 * 0.699999988079071044921875) + 1.0));
                                float _3597 = exp2(log2(1.0 / ((_3574 * 3.5) + 5.0)) * 0.25);
                                float _3598 = 1.0 - _861;
                                float _3605 = sqrt(1.0 - ((1.0 - (_3598 * _3598)) * (1.0 - (_3597 * _3597))));
                                float _3606 = _3605 * _3605;
                                float _3607 = _3606 * _3606;
                                float _3608 = _3554 - _3058;
                                float _3609 = _3555 - _3059;
                                float _3610 = _3556 - _3060;
                                float _3614 = inversesqrt(dot(vec3(_3608, _3609, _3610), vec3(_3608, _3609, _3610)));
                                float _3618 = dot(vec3(_801, _804, _807), vec3((-0.0) - _3058, (-0.0) - _3059, (-0.0) - _3060));
                                float _4729 = isnan(0.0) ? _3618 : (isnan(_3618) ? 0.0 : max(_3618, 0.0));
                                float _3621 = isnan(1.0) ? _4729 : (isnan(_4729) ? 1.0 : min(_4729, 1.0));
                                float _3622 = dot(vec3(_801, _804, _807), vec3(_3614 * _3608, _3614 * _3609, _3614 * _3610));
                                float _4740 = isnan(0.0) ? _3622 : (isnan(_3622) ? 0.0 : max(_3622, 0.0));
                                float _3625 = isnan(1.0) ? _4740 : (isnan(_4740) ? 1.0 : min(_4740, 1.0));
                                float _3629 = ((_3625 * _3625) * (_3607 + (-1.0))) + 1.0;
                                float _3630 = _3567 * _3606;
                                float _3631 = _3630 * _3630;
                                float _3637 = ((1.0 - _3631) * dot(vec3(_801, _804, _807), vec3(_3554, _3555, _3556))) + _3631;
                                float _4751 = isnan(0.0) ? _3637 : (isnan(_3637) ? 0.0 : max(_3637, 0.0));
                                float _3638 = isnan(1.0) ? _4751 : (isnan(_4751) ? 1.0 : min(_4751, 1.0));
                                float _3639 = 1.0 - _3606;
                                float _3649 = (0.5 / (((_3638 * ((_3621 * _3639) + _3606)) + 9.9999999392252902907785028219223e-09) + (((_3638 * _3639) + _3606) * _3621))) * _3638;
                                float _4762 = isnan(0.0) ? _3649 : (isnan(_3649) ? 0.0 : max(_3649, 0.0));
                                float _3659 = (_3584 * _3561) * (((_3607 * 3.1415927410125732421875) * (isnan(1.0) ? _4762 : (isnan(_4762) ? 1.0 : min(_4762, 1.0)))) / ((_3629 * _3629) * ((_3574 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_78_pred = _3585 * _3431.y;
                                frontier_phi_78_pred_1 = _3585 * _3431.x;
                                frontier_phi_78_pred_2 = _3659 * _3443.z;
                                frontier_phi_78_pred_3 = _3659 * _3443.y;
                                frontier_phi_78_pred_4 = _3659 * _3443.x;
                                frontier_phi_78_pred_5 = _3585 * _3431.z;
                            }
                            else
                            {
                                frontier_phi_78_pred = 0.0;
                                frontier_phi_78_pred_1 = 0.0;
                                frontier_phi_78_pred_2 = 0.0;
                                frontier_phi_78_pred_3 = 0.0;
                                frontier_phi_78_pred_4 = 0.0;
                                frontier_phi_78_pred_5 = 0.0;
                            }
                            _3667 = frontier_phi_78_pred;
                            _3666 = frontier_phi_78_pred_1;
                            _3665 = frontier_phi_78_pred_2;
                            _3664 = frontier_phi_78_pred_3;
                            _3663 = frontier_phi_78_pred_4;
                            _3668 = frontier_phi_78_pred_5;
                            _3373 = _3666 + _3386;
                            _3374 = _3667 + _3387;
                            _3375 = _3668 + _3388;
                            _3370 = _3663 + _3383;
                            _3371 = _3664 + _3384;
                            _3372 = _3665 + _3385;
                            if (_3390 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3383 = _3370;
                                _3384 = _3371;
                                _3385 = _3372;
                                _3386 = _3373;
                                _3387 = _3374;
                                _3388 = _3375;
                                _3389 = _3390;
                                continue;
                            }
                        }
                        frontier_phi_72_pred = _3375;
                        frontier_phi_72_pred_1 = _3374;
                        frontier_phi_72_pred_2 = _3373;
                        frontier_phi_72_pred_3 = _3372;
                        frontier_phi_72_pred_4 = _3371;
                        frontier_phi_72_pred_5 = _3370;
                    }
                    _3043 = frontier_phi_72_pred;
                    _3041 = frontier_phi_72_pred_1;
                    _3039 = frontier_phi_72_pred_2;
                    _3037 = frontier_phi_72_pred_3;
                    _3035 = frontier_phi_72_pred_4;
                    _3033 = frontier_phi_72_pred_5;
                    uint _3178 = _3177 + 1u;
                    if (_3178 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3171 = _3033;
                        _3172 = _3035;
                        _3173 = _3037;
                        _3174 = _3039;
                        _3175 = _3041;
                        _3176 = _3043;
                        _3177 = _3178;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _3043;
                frontier_phi_60_61_ladder_1 = _3041;
                frontier_phi_60_61_ladder_2 = _3037;
                frontier_phi_60_61_ladder_3 = _3035;
                frontier_phi_60_61_ladder_4 = _3033;
                frontier_phi_60_61_ladder_5 = _3039;
            }
            else
            {
                frontier_phi_60_61_ladder = _2929;
                frontier_phi_60_61_ladder_1 = _2927;
                frontier_phi_60_61_ladder_2 = _2923;
                frontier_phi_60_61_ladder_3 = _2921;
                frontier_phi_60_61_ladder_4 = _2919;
                frontier_phi_60_61_ladder_5 = _2925;
            }
            _3032 = frontier_phi_60_61_ladder_4;
            _3034 = frontier_phi_60_61_ladder_3;
            _3036 = frontier_phi_60_61_ladder_2;
            _3038 = frontier_phi_60_61_ladder_5;
            _3040 = frontier_phi_60_61_ladder_1;
            _3042 = frontier_phi_60_61_ladder;
        }
        float _3047 = isnan(1.0) ? _845 : (isnan(_845) ? 1.0 : min(_845, 1.0));
        _2852 = (_3047 * _3038) + _2383;
        _2854 = (_3047 * _3040) + _2385;
        _2856 = (_3047 * _3042) + _2387;
        _2858 = ((_3032 * 0.039999999105930328369140625) * _3047) + _2706;
        _2860 = ((_3034 * 0.039999999105930328369140625) * _3047) + _2708;
        _2862 = ((_3036 * 0.039999999105930328369140625) * _3047) + _2710;
    }
    else
    {
        _2852 = _2383;
        _2854 = _2385;
        _2856 = _2387;
        _2858 = _2706;
        _2860 = _2708;
        _2862 = _2710;
    }
    float _4778 = isnan(0.0) ? _830 : (isnan(_830) ? 0.0 : max(_830, 0.0));
    float _4789 = isnan(0.0) ? _831 : (isnan(_831) ? 0.0 : max(_831, 0.0));
    float _4800 = isnan(0.0) ? _832 : (isnan(_832) ? 0.0 : max(_832, 0.0));
    uint _2882 = _266 + 6u;
    float _2890 = _782 / cbSceneParam._m0[86u].x;
    float _2891 = _783 / cbSceneParam._m0[86u].y;
    vec4 _2905 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2890, _2891, (log2((isnan(cbSceneParam._m0[77u].w) ? _715 : (isnan(_715) ? cbSceneParam._m0[77u].w : min(_715, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2907 = _2905.x;
    float _2908 = _2905.y;
    float _2909 = _2905.z;
    float _2910 = _2905.w;
    float _2982;
    float _2984;
    float _2986;
    float _2988;
    if (_715 > cbSceneParam._m0[78u].w)
    {
        float _2944 = isnan(_715) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _715 : min(cbSceneParam._m0[80u].w, _715));
        float _2945 = _2944 / _715;
        float _2956 = _2945 * _767;
        float _2957 = _768 * _2945;
        float _2958 = (-0.0) - _2957;
        float _2960 = _2945 * _769;
        float _2962 = (cbSceneParam._m0[77u].w * _2958) / _2944;
        float _2963 = _2962 + cbSceneParam._m0[79u].w;
        float _2964 = cbSceneParam._m0[79u].w - _2957;
        float _2970 = sqrt(((_2956 * _2956) + (_2957 * _2957)) + (_2960 * _2960));
        float _2973 = (1.0 - (cbSceneParam._m0[77u].w / _2944)) * _2970;
        float _2978 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2980 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3133;
        if (abs((_2958 - _2962) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3133 = ((((_2963 > 0.0) ? exp2(_2978 * _2963) : (2.0 - exp2(_2980 * _2963))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2973;
        }
        else
        {
            float _3093 = 1.0 / cbSceneParam._m0[80u].x;
            float _3094 = isnan(_2964) ? _2963 : (isnan(_2963) ? _2964 : max(_2963, _2964));
            float _3095 = isnan(_2964) ? _2963 : (isnan(_2963) ? _2964 : min(_2963, _2964));
            float _3104 = isnan(0.0) ? _3094 : (isnan(_3094) ? 0.0 : min(_3094, 0.0));
            float _3105 = isnan(0.0) ? _3095 : (isnan(_3095) ? 0.0 : min(_3095, 0.0));
            _3133 = ((abs(_2970 / _2958) * cbSceneParam._m0[80u].y) * ((((_3104 - _3105) * 2.0) - ((exp2(_2978 * (isnan(0.0) ? _3094 : (isnan(_3094) ? 0.0 : max(_3094, 0.0)))) - exp2(_2978 * (isnan(0.0) ? _3095 : (isnan(_3095) ? 0.0 : max(_3095, 0.0))))) * _3093)) - ((exp2(_2980 * _3104) - exp2(_2980 * _3105)) * _3093))) + (_2973 * cbSceneParam._m0[80u].z);
        }
        vec4 _3135 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2890, _2891, 1.0), 0.0);
        float _3144 = exp2((_3133 * (-1.44269502162933349609375)) * (1.0 - _3135.w));
        float _3145 = log2(_3144);
        float _3161 = log2(_2910);
        _2982 = (exp2(_3161 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3145 * cbSceneParam._m0[78u].x)) * _3135.x) / cbSceneParam._m0[78u].x)) + _2907;
        _2984 = (exp2(_3161 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3145 * cbSceneParam._m0[78u].y)) * _3135.y) / cbSceneParam._m0[78u].y)) + _2908;
        _2986 = (exp2(_3161 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3145 * cbSceneParam._m0[78u].z)) * _3135.z) / cbSceneParam._m0[78u].z)) + _2909;
        _2988 = _3144 * _2910;
    }
    else
    {
        _2982 = _2907;
        _2984 = _2908;
        _2986 = _2909;
        _2988 = _2910;
    }
    float _3000 = roundEven(cbMatDynParam._m0[0u].y);
    bool _3001 = _3000 == 3.0;
    float _3002 = log2(_2988);
    float _3009 = exp2(_3002 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4778 : (isnan(_4778) ? 1.0 : min(_4778, 1.0))) * (_2852 + ((isnan(0.0) ? _1570 : (isnan(_1570) ? 0.0 : max(_1570, 0.0))) * _845))) + ((_2858 + ((isnan(0.0) ? _1864 : (isnan(_1864) ? 0.0 : max(_1864, 0.0))) * _1649)) * cbPerFrame._m0[3u].x));
    float _3010 = exp2(_3002 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4789 : (isnan(_4789) ? 1.0 : min(_4789, 1.0))) * (_2854 + ((isnan(0.0) ? _1573 : (isnan(_1573) ? 0.0 : max(_1573, 0.0))) * _845))) + ((_2860 + ((isnan(0.0) ? _1867 : (isnan(_1867) ? 0.0 : max(_1867, 0.0))) * _1649)) * cbPerFrame._m0[3u].x));
    float _3011 = exp2(_3002 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4800 : (isnan(_4800) ? 1.0 : min(_4800, 1.0))) * (_2856 + ((isnan(0.0) ? _1576 : (isnan(_1576) ? 0.0 : max(_1576, 0.0))) * _845))) + ((_2862 + ((isnan(0.0) ? _1870 : (isnan(_1870) ? 0.0 : max(_1870, 0.0))) * _1649)) * cbPerFrame._m0[3u].x));
    float _3020 = (_3000 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _3020 * (_3001 ? _3009 : (_3009 + (cbSceneParam._m0[72u].w * _2982)));
    SV_Target.y = _3020 * (_3001 ? _3010 : (_3010 + (cbSceneParam._m0[72u].w * _2984)));
    SV_Target.z = _3020 * (_3001 ? _3011 : (_3011 + (cbSceneParam._m0[72u].w * _2986)));
    SV_Target.w = cbInstanceData._m0[_2882].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2882].w;
}


