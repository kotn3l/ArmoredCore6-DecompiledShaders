#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 14) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_29;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_10;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_6;
layout(set = 0, binding = 23) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_8;
layout(set = 0, binding = 24) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_9;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1483;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _229 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _230 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _231 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _237 = inversesqrt(dot(vec3(_229, _230, _231), vec3(_229, _230, _231)));
    float _238 = _237 * _229;
    float _239 = _237 * _230;
    float _240 = _237 * _231;
    float _244 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _245 = _244 * NORMAL.x;
    float _246 = _244 * NORMAL.y;
    float _247 = _244 * NORMAL.z;
    float _251 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _252 = _251 * TANGENT.x;
    float _253 = _251 * TANGENT.y;
    float _254 = _251 * TANGENT.z;
    uint _257 = uint(roundEven(NORMAL.w)) * 13u;
    uint _262 = _257 + 1u;
    uint _266 = _257 + 2u;
    float _275 = sqrt(((cbInstanceData._m0[_262].x * cbInstanceData._m0[_262].x) + (cbInstanceData._m0[_257].x * cbInstanceData._m0[_257].x)) + (cbInstanceData._m0[_266].x * cbInstanceData._m0[_266].x));
    float _276 = _275 * TEXCOORD.z;
    float _277 = _275 * TEXCOORD.w;
    vec4 _297 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _303 = _297.x * cbMtdParam._m0[11u].x;
    float _304 = _297.y * cbMtdParam._m0[11u].y;
    float _305 = _297.z * cbMtdParam._m0[11u].z;
    vec4 _324 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _276) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _277) + cbTextureTilingScale._m0[5u].w));
    vec4 _343 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _383 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _385 = _383.x;
    float _397 = dot(vec4(_385, _383.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _414 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _343.x) * 2.0) - ((((_385 - _397) * cbMtdParam._m0[24u].z) + _397) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3784 = isnan(0.0) ? _414 : (isnan(_414) ? 0.0 : max(_414, 0.0));
    float _415 = isnan(1.0) ? _3784 : (isnan(_3784) ? 1.0 : min(_3784, 1.0));
    float _422 = (_415 * ((_324.x * cbMtdParam._m0[12u].x) - _303)) + _303;
    float _423 = (_415 * ((_324.y * cbMtdParam._m0[12u].y) - _304)) + _304;
    float _424 = (_415 * ((_324.z * cbMtdParam._m0[12u].z) - _305)) + _305;
    vec4 _441 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _276) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _277) + cbTextureTilingScale._m0[3u].w));
    vec4 _461 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _463 = _461.x;
    float _473 = dot(vec4(_463, _461.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _487 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _343.y) * 2.0) - ((((_463 - _473) * cbMtdParam._m0[24u].z) + _473) * cbMtdParam._m0[20u].w))) + 1.0;
    float _3795 = isnan(0.0) ? _487 : (isnan(_487) ? 0.0 : max(_487, 0.0));
    float _488 = isnan(1.0) ? _3795 : (isnan(_3795) ? 1.0 : min(_3795, 1.0));
    float _495 = (_488 * ((_441.x * cbMtdParam._m0[13u].x) - _422)) + _422;
    float _496 = (_488 * ((_441.y * cbMtdParam._m0[13u].y) - _423)) + _423;
    float _497 = (_488 * ((_441.z * cbMtdParam._m0[13u].z) - _424)) + _424;
    vec4 _515 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_9, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[24u].x * _276) + cbTextureTilingScale._m0[24u].z, (cbTextureTilingScale._m0[24u].y * _277) + cbTextureTilingScale._m0[24u].w));
    vec4 _532 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[25u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _534 = _532.x;
    float _544 = dot(vec4(_534, _532.yzw), vec4(cbMtdParam._m0[30u].w, cbMtdParam._m0[31u].xy, 0.0));
    float _556 = ((cbMtdParam._m0[25u].x * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.z) - _343.z) * 2.0) - ((((_534 - _544) * cbMtdParam._m0[24u].z) + _544) * cbMtdParam._m0[20u].z))) + 1.0;
    float _3806 = isnan(0.0) ? _556 : (isnan(_556) ? 0.0 : max(_556, 0.0));
    float _557 = isnan(1.0) ? _3806 : (isnan(_3806) ? 1.0 : min(_3806, 1.0));
    float _564 = (_557 * ((_515.x * cbMtdParam._m0[14u].x) - _495)) + _495;
    float _565 = (_557 * ((_515.y * cbMtdParam._m0[14u].y) - _496)) + _496;
    float _566 = (_557 * ((_515.z * cbMtdParam._m0[14u].z) - _497)) + _497;
    vec4 _584 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _276) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _277) + cbTextureTilingScale._m0[14u].w));
    vec4 _604 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _276) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _277) + cbTextureTilingScale._m0[4u].w));
    vec4 _621 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _623 = _621.x;
    float _624 = _621.y;
    float _625 = _621.z;
    float _632 = ((_604.x - _623) * _415) + _623;
    float _633 = ((_604.y - _624) * _415) + _624;
    float _634 = ((_604.z - _625) * _415) + _625;
    vec4 _646 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _276) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _277) + cbTextureTilingScale._m0[2u].w));
    float _657 = ((_646.x - _632) * _488) + _632;
    float _658 = ((_646.y - _633) * _488) + _633;
    float _659 = ((_646.z - _634) * _488) + _634;
    vec4 _671 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[23u].x * _276) + cbTextureTilingScale._m0[23u].z, (cbTextureTilingScale._m0[23u].y * _277) + cbTextureTilingScale._m0[23u].w));
    float _684 = ((_671.z - _659) * _557) + _659;
    float _687 = ((((_671.x - _657) * _557) + _657) * 2.0) + (-1.0);
    float _689 = ((((_671.y - _658) * _557) + _658) * 2.0) + (-1.0);
    float _690 = dot(vec2(_687, _689), vec2(_687, _689));
    float _3817 = isnan(0.0) ? _690 : (isnan(_690) ? 0.0 : max(_690, 0.0));
    float _695 = sqrt(1.0 - (isnan(1.0) ? _3817 : (isnan(_3817) ? 1.0 : min(_3817, 1.0))));
    vec4 _709 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _721 = (((_709.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _687;
    float _722 = (((_709.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _689;
    float _725 = fma(_695, _245, fma(_722, _252, _721 * _238));
    float _728 = fma(_695, _246, fma(_722, _253, _721 * _239));
    float _731 = fma(_695, _247, fma(_722, _254, _721 * _240));
    float _735 = inversesqrt(dot(vec3(_725, _728, _731), vec3(_725, _728, _731)));
    vec4 _762 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _276) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _277) + cbTextureTilingScale._m0[11u].w));
    float _764 = _762.x;
    float _765 = 1.0 - _764;
    float _771 = (cbMtdParam._m0[19u].x + dot(vec4(_735 * _725, _735 * _728, _735 * _731, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_764 - _765) * cbMtdParam._m0[24u].w) + _765) * cbMtdParam._m0[21u].z);
    float _3828 = isnan(0.0) ? _771 : (isnan(_771) ? 0.0 : max(_771, 0.0));
    float _772 = isnan(1.0) ? _3828 : (isnan(_3828) ? 1.0 : min(_3828, 1.0));
    float _774 = (-0.0) - cbMtdParam._m0[24u].x;
    float _776 = isnan(0.0) ? _774 : (isnan(_774) ? 0.0 : max(_774, 0.0));
    float _777 = isnan(1.0) ? _776 : (isnan(_776) ? 1.0 : min(_776, 1.0));
    float _784 = _772 - ((_772 * TEXCOORD_8.x) * _777);
    float _785 = _772 - ((_772 * TEXCOORD_8.y) * _777);
    float _786 = _772 - ((_772 * TEXCOORD_8.z) * _777);
    float _793 = (_784 * ((_584.x * cbMtdParam._m0[18u].x) - _564)) + _564;
    float _794 = (_785 * ((_584.y * cbMtdParam._m0[18u].y) - _565)) + _565;
    float _795 = (_786 * ((_584.z * cbMtdParam._m0[18u].z) - _566)) + _566;
    vec4 _807 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _276) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _277) + cbTextureTilingScale._m0[19u].w));
    float _809 = _807.x;
    float _810 = 1.0 - _809;
    float _838 = (TEXCOORD_8.x - ((cbMtdParam._m0[22u].w * (1.0 - TEXCOORD_8.x)) * ((((_809 - _810) * cbMtdParam._m0[24u].y) + _810) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3849 = isnan(0.0) ? _838 : (isnan(_838) ? 0.0 : max(_838, 0.0));
    float _839 = isnan(1.0) ? _3849 : (isnan(_3849) ? 1.0 : min(_3849, 1.0));
    float _847 = ((((cbMtdParam._m0[10u].x - _793) * TEXCOORD_8.x) * cbMtdParam._m0[23u].w) * _839) + _793;
    float _848 = ((((cbMtdParam._m0[10u].y - _794) * TEXCOORD_8.y) * cbMtdParam._m0[23u].w) * _839) + _794;
    float _849 = (((cbMtdParam._m0[23u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _795)) * _839) + _795;
    float _853 = (cbMtdParam._m0[19u].w * (_709.z - _684)) + _684;
    vec4 _867 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _276) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _277) + cbTextureTilingScale._m0[15u].w));
    float _874 = (_867.x * 2.0) + (-1.0);
    float _875 = (_867.y * 2.0) + (-1.0);
    float _876 = dot(vec2(_874, _875), vec2(_874, _875));
    float _3860 = isnan(0.0) ? _876 : (isnan(_876) ? 0.0 : max(_876, 0.0));
    float _884 = ((_867.z - _853) * _784) + _853;
    float _887 = ((cbMtdParam._m0[23u].y - _884) * _839) + _884;
    vec4 _906 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _276) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _277) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _912 = (_906.x * 2.0) + (-1.0);
    float _913 = (_906.y * 2.0) + (-1.0);
    float _914 = dot(vec2(_912, _913), vec2(_912, _913));
    float _3871 = isnan(0.0) ? _914 : (isnan(_914) ? 0.0 : max(_914, 0.0));
    float _929 = ((sqrt(1.0 - (isnan(1.0) ? _3860 : (isnan(_3860) ? 1.0 : min(_3860, 1.0)))) - _695) * _786) + _695;
    float _932 = (((_874 - _721) * _784) + _721) + (cbMtdParam._m0[21u].x * _721);
    float _933 = (((_875 - _722) * _785) + _722) + (cbMtdParam._m0[21u].x * _722);
    float _944 = (((_912 - _932) + (_932 * cbMtdParam._m0[22u].z)) * _839) + _932;
    float _945 = (((_913 - _933) + (_933 * cbMtdParam._m0[22u].z)) * _839) + _933;
    float _946 = (_839 * (sqrt(1.0 - (isnan(1.0) ? _3871 : (isnan(_3871) ? 1.0 : min(_3871, 1.0)))) - _929)) + _929;
    float _948 = cbMtdParam._m0[22u].x + _709.w;
    float _951 = fma(_946, _245, fma(_945, _252, _944 * _238));
    float _954 = fma(_946, _246, fma(_945, _253, _944 * _239));
    float _957 = fma(_946, _247, fma(_945, _254, _944 * _240));
    float _961 = inversesqrt(dot(vec3(_951, _954, _957), vec3(_951, _954, _957)));
    float _962 = _961 * _951;
    float _963 = _961 * _954;
    float _964 = _961 * _957;
    float _3882 = isnan(0.0) ? _887 : (isnan(_887) ? 0.0 : max(_887, 0.0));
    float _965 = isnan(1.0) ? _3882 : (isnan(_3882) ? 1.0 : min(_3882, 1.0));
    float _3893 = isnan(0.0) ? _948 : (isnan(_948) ? 0.0 : max(_948, 0.0));
    float _3904 = isnan(0.0) ? _847 : (isnan(_847) ? 0.0 : max(_847, 0.0));
    float _3915 = isnan(0.0) ? _848 : (isnan(_848) ? 0.0 : max(_848, 0.0));
    float _3926 = isnan(0.0) ? _849 : (isnan(_849) ? 0.0 : max(_849, 0.0));
    float _983 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _1024 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _1034 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _1024);
    float _1035 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _1024);
    float _1036 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _1024);
    float _1040 = inversesqrt(dot(vec3(_1034, _1035, _1036), vec3(_1034, _1035, _1036)));
    float _1041 = _1034 * _1040;
    float _1042 = _1035 * _1040;
    float _1043 = _1036 * _1040;
    float _1049 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1050 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1068 = fma(_964, cbSceneParam._m0[5u].z, fma(_963, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _962));
    float _1071 = fma(_964, cbSceneParam._m0[6u].z, fma(_963, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _962));
    float _1074 = fma(_964, cbSceneParam._m0[7u].z, fma(_963, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _962));
    uint _1088 = (_257 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _1094 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3904 : (isnan(_3904) ? 1.0 : min(_3904, 1.0)))) * cbInstanceData._m0[_1088].x;
    float _1095 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3915 : (isnan(_3915) ? 1.0 : min(_3915, 1.0)))) * cbInstanceData._m0[_1088].y;
    float _1096 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3926 : (isnan(_3926) ? 1.0 : min(_3926, 1.0)))) * cbInstanceData._m0[_1088].z;
    float _3937 = isnan(0.0) ? _1094 : (isnan(_1094) ? 0.0 : max(_1094, 0.0));
    float _1097 = isnan(1.0) ? _3937 : (isnan(_3937) ? 1.0 : min(_3937, 1.0));
    float _3948 = isnan(0.0) ? _1095 : (isnan(_1095) ? 0.0 : max(_1095, 0.0));
    float _1098 = isnan(1.0) ? _3948 : (isnan(_3948) ? 1.0 : min(_3948, 1.0));
    float _3959 = isnan(0.0) ? _1096 : (isnan(_1096) ? 0.0 : max(_1096, 0.0));
    float _1099 = isnan(1.0) ? _3959 : (isnan(_3959) ? 1.0 : min(_3959, 1.0));
    vec4 _1108 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1049, cbSceneParam._m0[86u].y * _1050));
    float _1112 = ((isnan(1.0) ? _3893 : (isnan(_3893) ? 1.0 : min(_3893, 1.0))) * TEXCOORD_5.w) * _1108.x;
    float _1113 = dot(vec3(_962, _963, _964), vec3(_1041, _1042, _1043));
    float _1116 = _1113 * 2.0;
    float _1120 = (_1116 * _962) - _1041;
    float _1121 = (_1116 * _963) - _1042;
    float _1122 = (_1116 * _964) - _1043;
    float _1126 = abs(dot(vec3(_1041, _1042, _1043), vec3(_962, _963, _964)));
    float _3970 = isnan(0.0) ? _1126 : (isnan(_1126) ? 0.0 : max(_1126, 0.0));
    float _1128 = sqrt(_965);
    float _1141 = exp2((_1128 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3970 : (isnan(_3970) ? 1.0 : min(_3970, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1128 * 3.0));
    float _1173 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1177 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1181 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1482;
    float _1484;
    float _1485;
    float _1486;
    float _1487;
    float _1488;
    float _1489;
    float _1490;
    float _1491;
    float _1492;
    float _1493;
    float _1494;
    float _1495;
    float _1496;
    float _1497;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1207 = fma(_1181, cbModelParam._m0[26u].z, fma(_1177, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1173));
        float _1211 = fma(_1181, cbModelParam._m0[27u].z, fma(_1177, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1173));
        float _1215 = fma(_1181, cbModelParam._m0[28u].z, fma(_1177, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1173));
        float _1240 = _1173 + _962;
        float _1241 = _1177 + _963;
        float _1242 = _1181 + _964;
        float _1252 = fma(_1242, cbModelParam._m0[26u].z, fma(_1241, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1240)) - _1207;
        float _1253 = fma(_1242, cbModelParam._m0[27u].z, fma(_1241, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1240)) - _1211;
        float _1254 = fma(_1242, cbModelParam._m0[28u].z, fma(_1241, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1240)) - _1215;
        float _1258 = inversesqrt(dot(vec3(_1252, _1253, _1254), vec3(_1252, _1253, _1254)));
        float _1271 = ((_1258 * _1252) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1207 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1272 = ((_1258 * _1253) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1211 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1273 = ((_1258 * _1254) / cbModelParam._m0[34u].z) + ((((((_1215 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1276 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1271, _1272, _1273), 0.0);
        vec4 _1283 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1271, _1272, _1273), 0.0);
        vec4 _1290 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1271, _1272, _1273), 0.0);
        vec4 _1297 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1271, _1272, _1273), 0.0);
        float _1310 = exp2((_1276.w + (-0.5)) * 20.0) * 2.0;
        float _1311 = _1310 * (_1276.x + (-0.5));
        float _1312 = _1310 * (_1276.y + (-0.5));
        float _1313 = _1310 * (_1276.z + (-0.5));
        float _1320 = exp2((_1283.w + (-0.5)) * 20.0) * 2.0;
        float _1321 = _1320 * (_1283.x + (-0.5));
        float _1322 = _1320 * (_1283.y + (-0.5));
        float _1323 = _1320 * (_1283.z + (-0.5));
        float _1330 = exp2((_1290.w + (-0.5)) * 20.0) * 2.0;
        float _1331 = _1330 * (_1290.x + (-0.5));
        float _1332 = _1330 * (_1290.y + (-0.5));
        float _1333 = _1330 * (_1290.z + (-0.5));
        float _1340 = exp2((_1297.w + (-0.5)) * 20.0) * 2.0;
        float _1341 = _1340 * (_1297.x + (-0.5));
        float _1342 = _1340 * (_1297.y + (-0.5));
        float _1343 = _1340 * (_1297.z + (-0.5));
        float _1344 = isnan(0.0) ? _1341 : (isnan(_1341) ? 0.0 : max(_1341, 0.0));
        float _1345 = isnan(0.0) ? _1342 : (isnan(_1342) ? 0.0 : max(_1342, 0.0));
        float _1346 = isnan(0.0) ? _1343 : (isnan(_1343) ? 0.0 : max(_1343, 0.0));
        float _1347 = _1311 * 0.5;
        float _1348 = _1321 * 0.5;
        float _1349 = _1331 * 0.5;
        float _1350 = dot(vec3(_1347, _1348, _1349), vec3(_1347, _1348, _1349));
        float _1355 = (_1350 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1350);
        float _1364 = (dot(vec3(_962, _963, _964), vec3(_1355 * _1347, _1355 * _1348, _1355 * _1349)) + 1.0) * 0.5;
        float _3996 = isnan(0.0) ? _1364 : (isnan(_1364) ? 0.0 : max(_1364, 0.0));
        float _1374 = sqrt(((_1348 * _1348) + (_1347 * _1347)) + (_1349 * _1349)) / (_1344 + 9.9999997473787516355514526367188e-06);
        float _4007 = isnan(0.0) ? _1374 : (isnan(_1374) ? 0.0 : max(_1374, 0.0));
        float _1375 = isnan(1.0) ? _4007 : (isnan(_4007) ? 1.0 : min(_4007, 1.0));
        float _1376 = _1375 * 2.0;
        float _1380 = (1.0 - _1375) / (_1375 + 1.0);
        float _4018 = isnan(0.0) ? _1380 : (isnan(_1380) ? 0.0 : max(_1380, 0.0));
        float _1381 = isnan(1.0) ? _4018 : (isnan(_4018) ? 1.0 : min(_4018, 1.0));
        float _1390 = ((((1.0 - _1381) * (_1376 + 2.0)) * exp2(log2(isnan(1.0) ? _3996 : (isnan(_3996) ? 1.0 : min(_3996, 1.0))) * (_1376 + 1.0))) + _1381) * _1344;
        float _1391 = _1312 * 0.5;
        float _1392 = _1322 * 0.5;
        float _1393 = _1332 * 0.5;
        float _1394 = dot(vec3(_1391, _1392, _1393), vec3(_1391, _1392, _1393));
        float _1399 = (_1394 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1394);
        float _1407 = (dot(vec3(_962, _963, _964), vec3(_1399 * _1391, _1399 * _1392, _1399 * _1393)) + 1.0) * 0.5;
        float _4029 = isnan(0.0) ? _1407 : (isnan(_1407) ? 0.0 : max(_1407, 0.0));
        float _1416 = sqrt(((_1392 * _1392) + (_1391 * _1391)) + (_1393 * _1393)) / (_1345 + 9.9999997473787516355514526367188e-06);
        float _4040 = isnan(0.0) ? _1416 : (isnan(_1416) ? 0.0 : max(_1416, 0.0));
        float _1417 = isnan(1.0) ? _4040 : (isnan(_4040) ? 1.0 : min(_4040, 1.0));
        float _1418 = _1417 * 2.0;
        float _1422 = (1.0 - _1417) / (_1417 + 1.0);
        float _4051 = isnan(0.0) ? _1422 : (isnan(_1422) ? 0.0 : max(_1422, 0.0));
        float _1423 = isnan(1.0) ? _4051 : (isnan(_4051) ? 1.0 : min(_4051, 1.0));
        float _1432 = ((((1.0 - _1423) * (_1418 + 2.0)) * exp2(log2(isnan(1.0) ? _4029 : (isnan(_4029) ? 1.0 : min(_4029, 1.0))) * (_1418 + 1.0))) + _1423) * _1345;
        float _1433 = _1313 * 0.5;
        float _1434 = _1323 * 0.5;
        float _1435 = _1333 * 0.5;
        float _1436 = dot(vec3(_1433, _1434, _1435), vec3(_1433, _1434, _1435));
        float _1441 = (_1436 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1436);
        float _1449 = (dot(vec3(_962, _963, _964), vec3(_1441 * _1433, _1441 * _1434, _1441 * _1435)) + 1.0) * 0.5;
        float _4062 = isnan(0.0) ? _1449 : (isnan(_1449) ? 0.0 : max(_1449, 0.0));
        float _1458 = sqrt(((_1434 * _1434) + (_1433 * _1433)) + (_1435 * _1435)) / (_1346 + 9.9999997473787516355514526367188e-06);
        float _4073 = isnan(0.0) ? _1458 : (isnan(_1458) ? 0.0 : max(_1458, 0.0));
        float _1459 = isnan(1.0) ? _4073 : (isnan(_4073) ? 1.0 : min(_4073, 1.0));
        float _1460 = _1459 * 2.0;
        float _1464 = (1.0 - _1459) / (_1459 + 1.0);
        float _4084 = isnan(0.0) ? _1464 : (isnan(_1464) ? 0.0 : max(_1464, 0.0));
        float _1465 = isnan(1.0) ? _4084 : (isnan(_4084) ? 1.0 : min(_4084, 1.0));
        float _1474 = ((((1.0 - _1465) * (_1460 + 2.0)) * exp2(log2(isnan(1.0) ? _4062 : (isnan(_4062) ? 1.0 : min(_4062, 1.0))) * (_1460 + 1.0))) + _1465) * _1346;
        _1482 = _1313;
        _1484 = _1312;
        _1485 = _1311;
        _1486 = _1323;
        _1487 = _1322;
        _1488 = _1321;
        _1489 = _1333;
        _1490 = _1332;
        _1491 = _1331;
        _1492 = _1346;
        _1493 = _1345;
        _1494 = _1344;
        _1495 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1390 : (isnan(_1390) ? 0.0 : max(_1390, 0.0)));
        _1496 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1432 : (isnan(_1432) ? 0.0 : max(_1432, 0.0)));
        _1497 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1474 : (isnan(_1474) ? 0.0 : max(_1474, 0.0)));
    }
    else
    {
        _1482 = _1483;
        _1484 = _1483;
        _1485 = _1483;
        _1486 = _1483;
        _1487 = _1483;
        _1488 = _1483;
        _1489 = _1483;
        _1490 = _1483;
        _1491 = _1483;
        _1492 = _1483;
        _1493 = _1483;
        _1494 = _1483;
        _1495 = 0.0;
        _1496 = 0.0;
        _1497 = 0.0;
    }
    float _1789;
    float _1790;
    float _1791;
    float _1792;
    float _1793;
    float _1794;
    float _1795;
    float _1796;
    float _1797;
    float _1798;
    float _1799;
    float _1800;
    float _1801;
    float _1802;
    float _1803;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1520 = fma(_1181, cbModelParam._m0[30u].z, fma(_1177, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1173));
        float _1524 = fma(_1181, cbModelParam._m0[31u].z, fma(_1177, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1173));
        float _1528 = fma(_1181, cbModelParam._m0[32u].z, fma(_1177, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1173));
        float _1551 = _1173 + _962;
        float _1552 = _1177 + _963;
        float _1553 = _1181 + _964;
        float _1563 = fma(_1553, cbModelParam._m0[30u].z, fma(_1552, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1551)) - _1520;
        float _1564 = fma(_1553, cbModelParam._m0[31u].z, fma(_1552, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1551)) - _1524;
        float _1565 = fma(_1553, cbModelParam._m0[32u].z, fma(_1552, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1551)) - _1528;
        float _1569 = inversesqrt(dot(vec3(_1563, _1564, _1565), vec3(_1563, _1564, _1565)));
        float _1582 = ((_1569 * _1563) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1520 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1583 = ((_1569 * _1564) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1524 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1584 = ((_1569 * _1565) / cbModelParam._m0[35u].z) + ((((((_1528 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1586 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1582, _1583, _1584), 0.0);
        vec4 _1593 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1582, _1583, _1584), 0.0);
        vec4 _1600 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1582, _1583, _1584), 0.0);
        vec4 _1607 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1582, _1583, _1584), 0.0);
        float _1619 = exp2((_1586.w + (-0.5)) * 20.0) * 2.0;
        float _1620 = _1619 * (_1586.x + (-0.5));
        float _1621 = _1619 * (_1586.y + (-0.5));
        float _1622 = _1619 * (_1586.z + (-0.5));
        float _1629 = exp2((_1593.w + (-0.5)) * 20.0) * 2.0;
        float _1630 = _1629 * (_1593.x + (-0.5));
        float _1631 = _1629 * (_1593.y + (-0.5));
        float _1632 = _1629 * (_1593.z + (-0.5));
        float _1639 = exp2((_1600.w + (-0.5)) * 20.0) * 2.0;
        float _1640 = _1639 * (_1600.x + (-0.5));
        float _1641 = _1639 * (_1600.y + (-0.5));
        float _1642 = _1639 * (_1600.z + (-0.5));
        float _1649 = exp2((_1607.w + (-0.5)) * 20.0) * 2.0;
        float _1650 = _1649 * (_1607.x + (-0.5));
        float _1651 = _1649 * (_1607.y + (-0.5));
        float _1652 = _1649 * (_1607.z + (-0.5));
        float _1653 = isnan(0.0) ? _1650 : (isnan(_1650) ? 0.0 : max(_1650, 0.0));
        float _1654 = isnan(0.0) ? _1651 : (isnan(_1651) ? 0.0 : max(_1651, 0.0));
        float _1655 = isnan(0.0) ? _1652 : (isnan(_1652) ? 0.0 : max(_1652, 0.0));
        float _1656 = _1620 * 0.5;
        float _1657 = _1630 * 0.5;
        float _1658 = _1640 * 0.5;
        float _1659 = dot(vec3(_1656, _1657, _1658), vec3(_1656, _1657, _1658));
        float _1664 = (_1659 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1659);
        float _1672 = (dot(vec3(_962, _963, _964), vec3(_1664 * _1656, _1664 * _1657, _1664 * _1658)) + 1.0) * 0.5;
        float _4125 = isnan(0.0) ? _1672 : (isnan(_1672) ? 0.0 : max(_1672, 0.0));
        float _1681 = sqrt(((_1657 * _1657) + (_1656 * _1656)) + (_1658 * _1658)) / (_1653 + 9.9999997473787516355514526367188e-06);
        float _4136 = isnan(0.0) ? _1681 : (isnan(_1681) ? 0.0 : max(_1681, 0.0));
        float _1682 = isnan(1.0) ? _4136 : (isnan(_4136) ? 1.0 : min(_4136, 1.0));
        float _1683 = _1682 * 2.0;
        float _1687 = (1.0 - _1682) / (_1682 + 1.0);
        float _4147 = isnan(0.0) ? _1687 : (isnan(_1687) ? 0.0 : max(_1687, 0.0));
        float _1688 = isnan(1.0) ? _4147 : (isnan(_4147) ? 1.0 : min(_4147, 1.0));
        float _1697 = ((((1.0 - _1688) * (_1683 + 2.0)) * exp2(log2(isnan(1.0) ? _4125 : (isnan(_4125) ? 1.0 : min(_4125, 1.0))) * (_1683 + 1.0))) + _1688) * _1653;
        float _1698 = _1621 * 0.5;
        float _1699 = _1631 * 0.5;
        float _1700 = _1641 * 0.5;
        float _1701 = dot(vec3(_1698, _1699, _1700), vec3(_1698, _1699, _1700));
        float _1706 = (_1701 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1701);
        float _1714 = (dot(vec3(_962, _963, _964), vec3(_1706 * _1698, _1706 * _1699, _1706 * _1700)) + 1.0) * 0.5;
        float _4158 = isnan(0.0) ? _1714 : (isnan(_1714) ? 0.0 : max(_1714, 0.0));
        float _1723 = sqrt(((_1699 * _1699) + (_1698 * _1698)) + (_1700 * _1700)) / (_1654 + 9.9999997473787516355514526367188e-06);
        float _4169 = isnan(0.0) ? _1723 : (isnan(_1723) ? 0.0 : max(_1723, 0.0));
        float _1724 = isnan(1.0) ? _4169 : (isnan(_4169) ? 1.0 : min(_4169, 1.0));
        float _1725 = _1724 * 2.0;
        float _1729 = (1.0 - _1724) / (_1724 + 1.0);
        float _4180 = isnan(0.0) ? _1729 : (isnan(_1729) ? 0.0 : max(_1729, 0.0));
        float _1730 = isnan(1.0) ? _4180 : (isnan(_4180) ? 1.0 : min(_4180, 1.0));
        float _1739 = ((((1.0 - _1730) * (_1725 + 2.0)) * exp2(log2(isnan(1.0) ? _4158 : (isnan(_4158) ? 1.0 : min(_4158, 1.0))) * (_1725 + 1.0))) + _1730) * _1654;
        float _1740 = _1622 * 0.5;
        float _1741 = _1632 * 0.5;
        float _1742 = _1642 * 0.5;
        float _1743 = dot(vec3(_1740, _1741, _1742), vec3(_1740, _1741, _1742));
        float _1748 = (_1743 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1743);
        float _1756 = (dot(vec3(_962, _963, _964), vec3(_1748 * _1740, _1748 * _1741, _1748 * _1742)) + 1.0) * 0.5;
        float _4191 = isnan(0.0) ? _1756 : (isnan(_1756) ? 0.0 : max(_1756, 0.0));
        float _1765 = sqrt(((_1741 * _1741) + (_1740 * _1740)) + (_1742 * _1742)) / (_1655 + 9.9999997473787516355514526367188e-06);
        float _4202 = isnan(0.0) ? _1765 : (isnan(_1765) ? 0.0 : max(_1765, 0.0));
        float _1766 = isnan(1.0) ? _4202 : (isnan(_4202) ? 1.0 : min(_4202, 1.0));
        float _1767 = _1766 * 2.0;
        float _1771 = (1.0 - _1766) / (_1766 + 1.0);
        float _4213 = isnan(0.0) ? _1771 : (isnan(_1771) ? 0.0 : max(_1771, 0.0));
        float _1772 = isnan(1.0) ? _4213 : (isnan(_4213) ? 1.0 : min(_4213, 1.0));
        float _1781 = ((((1.0 - _1772) * (_1767 + 2.0)) * exp2(log2(isnan(1.0) ? _4191 : (isnan(_4191) ? 1.0 : min(_4191, 1.0))) * (_1767 + 1.0))) + _1772) * _1655;
        _1789 = _1622;
        _1790 = _1621;
        _1791 = _1620;
        _1792 = _1632;
        _1793 = _1631;
        _1794 = _1630;
        _1795 = _1642;
        _1796 = _1641;
        _1797 = _1640;
        _1798 = _1655;
        _1799 = _1654;
        _1800 = _1653;
        _1801 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1697 : (isnan(_1697) ? 0.0 : max(_1697, 0.0)));
        _1802 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1739 : (isnan(_1739) ? 0.0 : max(_1739, 0.0)));
        _1803 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1781 : (isnan(_1781) ? 0.0 : max(_1781, 0.0)));
    }
    else
    {
        _1789 = _1483;
        _1790 = _1483;
        _1791 = _1483;
        _1792 = _1483;
        _1793 = _1483;
        _1794 = _1483;
        _1795 = _1483;
        _1796 = _1483;
        _1797 = _1483;
        _1798 = _1483;
        _1799 = _1483;
        _1800 = _1483;
        _1801 = 0.0;
        _1802 = 0.0;
        _1803 = 0.0;
    }
    float _1813 = (cbModelParam._m0[1u].x * (_1801 - _1495)) + _1495;
    float _1814 = (cbModelParam._m0[1u].x * (_1802 - _1496)) + _1496;
    float _1815 = (cbModelParam._m0[1u].x * (_1803 - _1497)) + _1497;
    float _1836 = fma(_1815, cbSceneParam._m0[89u].z, fma(_1814, cbSceneParam._m0[89u].y, _1813 * cbSceneParam._m0[89u].x));
    float _1839 = fma(_1815, cbSceneParam._m0[90u].z, fma(_1814, cbSceneParam._m0[90u].y, _1813 * cbSceneParam._m0[90u].x));
    float _1842 = fma(_1815, cbSceneParam._m0[91u].z, fma(_1814, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1813));
    float _1857 = _1120 * 0.5;
    float _1858 = _1121 * 0.5;
    float _1859 = _1122 * 0.5;
    float _1860 = dot(vec4(_1857, _1858, _1859, 1.0), vec4(_1791, _1794, _1797, _1800));
    float _1863 = dot(vec4(_1857, _1858, _1859, 1.0), vec4(_1790, _1793, _1796, _1799));
    float _1866 = dot(vec4(_1857, _1858, _1859, 1.0), vec4(_1789, _1792, _1795, _1798));
    float _1900;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1873 = dot(vec4(_1857, _1858, _1859, 1.0), vec4(_1482, _1486, _1489, _1492));
        float _1877 = dot(vec4(_1857, _1858, _1859, 1.0), vec4(_1484, _1487, _1490, _1493));
        float _1881 = dot(vec4(_1857, _1858, _1859, 1.0), vec4(_1485, _1488, _1491, _1494));
        float _1888 = dot(vec4(cbModelParam._m0[39u]), vec4(_1857, _1858, _1859, 1.0));
        _1900 = dot(vec3(isnan(0.0) ? _1881 : (isnan(_1881) ? 0.0 : max(_1881, 0.0)), isnan(0.0) ? _1877 : (isnan(_1877) ? 0.0 : max(_1877, 0.0)), isnan(0.0) ? _1873 : (isnan(_1873) ? 0.0 : max(_1873, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1888) ? 0.0 : (isnan(0.0) ? _1888 : max(0.0, _1888))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1900 = 1.0;
    }
    float _1911;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1902 = dot(vec4(cbModelParam._m0[40u]), vec4(_1857, _1858, _1859, 1.0));
        _1911 = dot(vec3(isnan(0.0) ? _1860 : (isnan(_1860) ? 0.0 : max(_1860, 0.0)), isnan(0.0) ? _1863 : (isnan(_1863) ? 0.0 : max(_1863, 0.0)), isnan(0.0) ? _1866 : (isnan(_1866) ? 0.0 : max(_1866, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1902) ? 0.0 : (isnan(0.0) ? _1902 : max(0.0, _1902))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1911 = 1.0;
    }
    float _1915 = (_1911 * cbModelParam._m0[1u].x) + (_1900 * (1.0 - cbModelParam._m0[1u].x));
    float _1925 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _965);
    float _1926 = isnan(_1925) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1925 : min(cbModelParam._m0[25u].z, _1925));
    float _2006;
    float _2008;
    float _2010;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1973 = fma(_1181, cbModelParam._m0[13u].z, fma(_1177, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1173)) + cbModelParam._m0[13u].w;
        float _1977 = fma(_1181, cbModelParam._m0[14u].z, fma(_1177, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1173)) + cbModelParam._m0[14u].w;
        float _1981 = fma(_1181, cbModelParam._m0[15u].z, fma(_1177, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1173)) + cbModelParam._m0[15u].w;
        float _1984 = fma(_1122, cbModelParam._m0[13u].z, fma(_1121, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1120));
        float _1987 = fma(_1122, cbModelParam._m0[14u].z, fma(_1121, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1120));
        float _1990 = fma(_1122, cbModelParam._m0[15u].z, fma(_1121, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1120));
        float _2018;
        if (_1984 > 0.0)
        {
            _2018 = abs((1.0 - _1973) / _1984);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1984 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1973 + 1.0) / _1984);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _2018 = frontier_phi_14_12_ladder;
        }
        float _2218;
        if (_1987 > 0.0)
        {
            _2218 = abs((1.0 - _1977) / _1987);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1987 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1977 + 1.0) / _1987);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2218 = frontier_phi_23_19_ladder;
        }
        float _2461;
        if (_1990 > 0.0)
        {
            _2461 = abs((1.0 - _1981) / _1990);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1990 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1981 + 1.0) / _1990);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2461 = frontier_phi_35_30_ladder;
        }
        float _2463 = isnan(_2218) ? _2018 : (isnan(_2018) ? _2218 : min(_2018, _2218));
        float _2464 = isnan(_2461) ? _2463 : (isnan(_2463) ? _2461 : min(_2463, _2461));
        float _2468 = (_2464 * _1984) + _1973;
        float _2469 = (_2464 * _1987) + _1977;
        float _2470 = (_2464 * _1990) + _1981;
        float _2471 = _2464 * 9.9999997473787516355514526367188e-05;
        float _2473 = (-1.0) - _2471;
        float _2475 = _2471 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2470 > _2475) || ((_2470 < _2473) || ((_2469 > _2475) || ((_2469 < _2473) || ((_2468 < _2473) || (_2468 > _2475))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2594 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2470, cbModelParam._m0[9u].z, fma(_2469, cbModelParam._m0[9u].y, _2468 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2470, cbModelParam._m0[10u].z, fma(_2469, cbModelParam._m0[10u].y, _2468 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2470, cbModelParam._m0[11u].z, fma(_2469, cbModelParam._m0[11u].y, _2468 * cbModelParam._m0[11u].x))), _1926);
            frontier_phi_13_35_ladder = _2594.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2594.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2594.x * cbModelParam._m0[1u].y;
        }
        _2006 = frontier_phi_13_35_ladder_2;
        _2008 = frontier_phi_13_35_ladder_1;
        _2010 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1994 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1120, _1121, _1122), _1926);
        _2006 = _1994.x * cbModelParam._m0[1u].y;
        _2008 = _1994.y * cbModelParam._m0[1u].y;
        _2010 = _1994.z * cbModelParam._m0[1u].y;
    }
    float _2014 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _965);
    float _2015 = isnan(_2014) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2014 : min(cbModelParam._m0[25u].w, _2014));
    float _2104;
    float _2106;
    float _2108;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2068 = fma(_1181, cbModelParam._m0[21u].z, fma(_1177, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1173)) + cbModelParam._m0[21u].w;
        float _2072 = fma(_1181, cbModelParam._m0[22u].z, fma(_1177, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1173)) + cbModelParam._m0[22u].w;
        float _2076 = fma(_1181, cbModelParam._m0[23u].z, fma(_1177, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1173)) + cbModelParam._m0[23u].w;
        float _2079 = fma(_1122, cbModelParam._m0[21u].z, fma(_1121, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1120));
        float _2082 = fma(_1122, cbModelParam._m0[22u].z, fma(_1121, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1120));
        float _2085 = fma(_1122, cbModelParam._m0[23u].z, fma(_1121, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1120));
        float _2223;
        if (_2079 > 0.0)
        {
            _2223 = abs((1.0 - _2068) / _2079);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_2079 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_2068 + 1.0) / _2079);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2223 = frontier_phi_25_21_ladder;
        }
        float _2488;
        if (_2082 > 0.0)
        {
            _2488 = abs((1.0 - _2072) / _2082);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_2082 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_2072 + 1.0) / _2082);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2488 = frontier_phi_37_32_ladder;
        }
        float _2693;
        if (_2085 > 0.0)
        {
            _2693 = abs((1.0 - _2076) / _2085);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_2085 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_2076 + 1.0) / _2085);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2693 = frontier_phi_46_43_ladder;
        }
        float _2695 = isnan(_2488) ? _2223 : (isnan(_2223) ? _2488 : min(_2223, _2488));
        float _2696 = isnan(_2693) ? _2695 : (isnan(_2695) ? _2693 : min(_2695, _2693));
        float _2700 = (_2696 * _2079) + _2068;
        float _2701 = (_2696 * _2082) + _2072;
        float _2702 = (_2696 * _2085) + _2076;
        float _2703 = _2696 * 9.9999997473787516355514526367188e-05;
        float _2704 = (-1.0) - _2703;
        float _2706 = _2703 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2702 > _2706) || ((_2702 < _2704) || ((_2701 > _2706) || ((_2701 < _2704) || ((_2700 < _2704) || (_2700 > _2706))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2901 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2702, cbModelParam._m0[17u].z, fma(_2701, cbModelParam._m0[17u].y, _2700 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2702, cbModelParam._m0[18u].z, fma(_2701, cbModelParam._m0[18u].y, _2700 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2702, cbModelParam._m0[19u].z, fma(_2701, cbModelParam._m0[19u].y, _2700 * cbModelParam._m0[19u].x))), _2015);
            frontier_phi_22_46_ladder = _2901.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2901.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2901.x * cbModelParam._m0[1u].z;
        }
        _2104 = frontier_phi_22_46_ladder_2;
        _2106 = frontier_phi_22_46_ladder_1;
        _2108 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _2088 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1120, _1121, _1122), _2015);
        _2104 = _2088.x * cbModelParam._m0[1u].z;
        _2106 = _2088.y * cbModelParam._m0[1u].z;
        _2108 = _2088.z * cbModelParam._m0[1u].z;
    }
    float _2120 = ((((1.0 - _1141) * ((_1128 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_1141 * _1128)) * _1112;
    float _2121 = _2120 * ((cbModelParam._m0[1u].w * (_2104 - _2006)) + _2006);
    float _2122 = _2120 * ((cbModelParam._m0[1u].w * (_2106 - _2008)) + _2008);
    float _2123 = _2120 * ((cbModelParam._m0[1u].w * (_2108 - _2010)) + _2010);
    float _2126 = fma(_2123, cbSceneParam._m0[89u].z, fma(_2122, cbSceneParam._m0[89u].y, _2121 * cbSceneParam._m0[89u].x));
    float _2129 = fma(_2123, cbSceneParam._m0[90u].z, fma(_2122, cbSceneParam._m0[90u].y, _2121 * cbSceneParam._m0[90u].x));
    float _2132 = fma(_2123, cbSceneParam._m0[91u].z, fma(_2122, cbSceneParam._m0[91u].y, _2121 * cbSceneParam._m0[91u].x));
    uvec4 _2142 = floatBitsToUint(cbInstanceData._m0[_257 + 5u]);
    uint _2144 = _2142.x * 14u;
    uint _2145 = _2144 + 13u;
    float _2152 = _1112 + (-1.0);
    float _2157 = (cbLight._m0[_2145].x * _2152) + 1.0;
    float _2158 = (cbLight._m0[_2145].y * _2152) + 1.0;
    float _2159 = (cbLight._m0[_2145].z * _2152) + 1.0;
    float _2160 = (cbLight._m0[_2145].w * _2152) + 1.0;
    uint _2161 = _2144 + 5u;
    float _2167 = isnan(1.0) ? _2158 : (isnan(_2158) ? 1.0 : min(_2158, 1.0));
    uint _2171 = _2144 + 4u;
    float _2177 = isnan(1.0) ? _2157 : (isnan(_2157) ? 1.0 : min(_2157, 1.0));
    uint _2181 = _2144 | 1u;
    float _2192 = dot(vec3(cbLight._m0[_2144].xyz), vec3(_962, _963, _964));
    float _2195 = dot(vec3(cbLight._m0[_2181].xyz), vec3(_962, _963, _964));
    float _4349 = isnan(0.0) ? _2192 : (isnan(_2192) ? 0.0 : max(_2192, 0.0));
    float _4360 = isnan(0.0) ? _2195 : (isnan(_2195) ? 0.0 : max(_2195, 0.0));
    float _2200 = (isnan(1.0) ? _4349 : (isnan(_4349) ? 1.0 : min(_4349, 1.0))) * 0.3183098733425140380859375;
    float _2202 = (isnan(1.0) ? _4360 : (isnan(_4360) ? 1.0 : min(_4360, 1.0))) * 0.3183098733425140380859375;
    float _2209 = ((cbLight._m0[_2161].x * _2167) * _2202) + ((cbLight._m0[_2171].x * _2177) * _2200);
    float _2210 = ((_2167 * cbLight._m0[_2161].y) * _2202) + ((_2177 * cbLight._m0[_2171].y) * _2200);
    float _2211 = ((_2167 * cbLight._m0[_2161].z) * _2202) + ((_2177 * cbLight._m0[_2171].z) * _2200);
    uvec4 _2215 = floatBitsToUint(cbLight._m0[_2144 + 12u]);
    bool _2217 = _2215.x == 0u;
    float _2228;
    float _2230;
    float _2232;
    if (_2217)
    {
        _2228 = _2209;
        _2230 = _2210;
        _2232 = _2211;
    }
    else
    {
        uint _2236 = _2144 + 6u;
        float _2252 = (dot(vec3(cbLight._m0[_2144 + 2u].xyz), vec3(_962, _963, _964)) * 0.5) + 0.5;
        float _2253 = _2252 * _2252;
        float _4371 = isnan(0.0) ? _2253 : (isnan(_2253) ? 0.0 : max(_2253, 0.0));
        float _2254 = isnan(1.0) ? _4371 : (isnan(_4371) ? 1.0 : min(_4371, 1.0));
        float _2255 = isnan(1.0) ? _2159 : (isnan(_2159) ? 1.0 : min(_2159, 1.0));
        _2228 = (((cbLight._m0[_2236].x * 0.3183098733425140380859375) * _2254) * _2255) + _2209;
        _2230 = (((cbLight._m0[_2236].y * 0.3183098733425140380859375) * _2254) * _2255) + _2210;
        _2232 = (((cbLight._m0[_2236].z * 0.3183098733425140380859375) * _2254) * _2255) + _2211;
    }
    bool _2235 = _2215.y == 0u;
    float _2273;
    float _2275;
    float _2277;
    if (_2235)
    {
        _2273 = _2228;
        _2275 = _2230;
        _2277 = _2232;
    }
    else
    {
        uint _2432 = _2144 + 7u;
        float _2448 = (dot(vec3(cbLight._m0[_2144 + 3u].xyz), vec3(_962, _963, _964)) * 0.5) + 0.5;
        float _2449 = _2448 * _2448;
        float _4387 = isnan(0.0) ? _2449 : (isnan(_2449) ? 0.0 : max(_2449, 0.0));
        float _2450 = isnan(1.0) ? _4387 : (isnan(_4387) ? 1.0 : min(_4387, 1.0));
        float _2451 = isnan(1.0) ? _2160 : (isnan(_2160) ? 1.0 : min(_2160, 1.0));
        _2273 = (((cbLight._m0[_2432].x * 0.3183098733425140380859375) * _2450) * _2451) + _2228;
        _2275 = (((cbLight._m0[_2432].y * 0.3183098733425140380859375) * _2450) * _2451) + _2230;
        _2277 = (((cbLight._m0[_2432].z * 0.3183098733425140380859375) * _2450) * _2451) + _2232;
    }
    uint _2280 = _2144 + 8u;
    float _2293 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2144].w)) * _965) * 0.949999988079071044921875);
    float _2294 = _2293 * _2293;
    float _2295 = cbLight._m0[_2144].x + _1041;
    float _2296 = cbLight._m0[_2144].y + _1042;
    float _2297 = cbLight._m0[_2144].z + _1043;
    float _2301 = inversesqrt(dot(vec3(_2295, _2296, _2297), vec3(_2295, _2296, _2297)));
    float _2302 = _2301 * _2295;
    float _2303 = _2301 * _2296;
    float _2304 = _2301 * _2297;
    float _2305 = dot(vec3(_962, _963, _964), vec3(cbLight._m0[_2144].xyz));
    float _4403 = isnan(0.0) ? _2305 : (isnan(_2305) ? 0.0 : max(_2305, 0.0));
    float _2308 = isnan(1.0) ? _4403 : (isnan(_4403) ? 1.0 : min(_4403, 1.0));
    float _4414 = isnan(0.0) ? _1113 : (isnan(_1113) ? 0.0 : max(_1113, 0.0));
    float _2309 = isnan(1.0) ? _4414 : (isnan(_4414) ? 1.0 : min(_4414, 1.0));
    float _2310 = dot(vec3(_962, _963, _964), vec3(_2302, _2303, _2304));
    float _4425 = isnan(0.0) ? _2310 : (isnan(_2310) ? 0.0 : max(_2310, 0.0));
    float _2313 = isnan(1.0) ? _4425 : (isnan(_4425) ? 1.0 : min(_4425, 1.0));
    float _2314 = dot(vec3(cbLight._m0[_2144].xyz), vec3(_2302, _2303, _2304));
    float _4436 = isnan(0.0) ? _2314 : (isnan(_2314) ? 0.0 : max(_2314, 0.0));
    float _2318 = _2294 * _2294;
    float _2322 = ((_2313 * _2313) * (_2318 + (-1.0))) + 1.0;
    float _2333 = (exp2(log2(1.0 - (isnan(1.0) ? _4436 : (isnan(_4436) ? 1.0 : min(_4436, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2334 = 1.0 - _2294;
    float _2345 = (0.5 / (((_2309 * ((_2308 * _2334) + _2294)) + 9.9999999392252902907785028219223e-09) + (((_2309 * _2334) + _2294) * _2308))) * _2308;
    float _4447 = isnan(0.0) ? _2345 : (isnan(_2345) ? 0.0 : max(_2345, 0.0));
    float _2347 = (isnan(1.0) ? _4447 : (isnan(_4447) ? 1.0 : min(_4447, 1.0))) * (_2318 / ((_2322 * _2322) * 3.141590118408203125));
    uint _2358 = _2144 + 9u;
    float _2369 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2181].w)) * _965) * 0.949999988079071044921875);
    float _2370 = _2369 * _2369;
    float _2371 = cbLight._m0[_2181].x + _1041;
    float _2372 = cbLight._m0[_2181].y + _1042;
    float _2373 = cbLight._m0[_2181].z + _1043;
    float _2377 = inversesqrt(dot(vec3(_2371, _2372, _2373), vec3(_2371, _2372, _2373)));
    float _2378 = _2377 * _2371;
    float _2379 = _2377 * _2372;
    float _2380 = _2377 * _2373;
    float _2381 = dot(vec3(_962, _963, _964), vec3(cbLight._m0[_2181].xyz));
    float _4458 = isnan(0.0) ? _2381 : (isnan(_2381) ? 0.0 : max(_2381, 0.0));
    float _2384 = isnan(1.0) ? _4458 : (isnan(_4458) ? 1.0 : min(_4458, 1.0));
    float _2385 = dot(vec3(_962, _963, _964), vec3(_2378, _2379, _2380));
    float _4469 = isnan(0.0) ? _2385 : (isnan(_2385) ? 0.0 : max(_2385, 0.0));
    float _2388 = isnan(1.0) ? _4469 : (isnan(_4469) ? 1.0 : min(_4469, 1.0));
    float _2389 = dot(vec3(cbLight._m0[_2181].xyz), vec3(_2378, _2379, _2380));
    float _4480 = isnan(0.0) ? _2389 : (isnan(_2389) ? 0.0 : max(_2389, 0.0));
    float _2393 = _2370 * _2370;
    float _2397 = ((_2388 * _2388) * (_2393 + (-1.0))) + 1.0;
    float _2406 = (exp2(log2(1.0 - (isnan(1.0) ? _4480 : (isnan(_4480) ? 1.0 : min(_4480, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2407 = 1.0 - _2370;
    float _2417 = (0.5 / (((_2309 * ((_2384 * _2407) + _2370)) + 9.9999999392252902907785028219223e-09) + (((_2309 * _2407) + _2370) * _2384))) * _2384;
    float _4491 = isnan(0.0) ? _2417 : (isnan(_2417) ? 0.0 : max(_2417, 0.0));
    float _2419 = (isnan(1.0) ? _4491 : (isnan(_4491) ? 1.0 : min(_4491, 1.0))) * (_2393 / ((_2397 * _2397) * 3.141590118408203125));
    float _2429 = (((_2406 * cbLight._m0[_2358].x) * _2419) * _2167) + (((_2333 * cbLight._m0[_2280].x) * _2347) * _2177);
    float _2430 = (((_2406 * cbLight._m0[_2358].y) * _2419) * _2167) + (((_2333 * cbLight._m0[_2280].y) * _2347) * _2177);
    float _2431 = (((_2406 * cbLight._m0[_2358].z) * _2419) * _2167) + (((_2333 * cbLight._m0[_2280].z) * _2347) * _2177);
    float _2493;
    float _2495;
    float _2497;
    if (_2217)
    {
        _2493 = _2429;
        _2495 = _2430;
        _2497 = _2431;
    }
    else
    {
        uint _2499 = _2144 + 2u;
        uint _2503 = _2144 + 10u;
        float _2517 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2499].w)) * _965) * 0.949999988079071044921875);
        float _2518 = _2517 * _2517;
        float _2519 = cbLight._m0[_2499].x + _1041;
        float _2520 = cbLight._m0[_2499].y + _1042;
        float _2521 = cbLight._m0[_2499].z + _1043;
        float _2525 = inversesqrt(dot(vec3(_2519, _2520, _2521), vec3(_2519, _2520, _2521)));
        float _2526 = _2525 * _2519;
        float _2527 = _2525 * _2520;
        float _2528 = _2525 * _2521;
        float _2529 = dot(vec3(_962, _963, _964), vec3(cbLight._m0[_2499].xyz));
        float _4502 = isnan(0.0) ? _2529 : (isnan(_2529) ? 0.0 : max(_2529, 0.0));
        float _2532 = isnan(1.0) ? _4502 : (isnan(_4502) ? 1.0 : min(_4502, 1.0));
        float _2533 = dot(vec3(_962, _963, _964), vec3(_2526, _2527, _2528));
        float _4513 = isnan(0.0) ? _2533 : (isnan(_2533) ? 0.0 : max(_2533, 0.0));
        float _2536 = isnan(1.0) ? _4513 : (isnan(_4513) ? 1.0 : min(_4513, 1.0));
        float _2537 = dot(vec3(cbLight._m0[_2499].xyz), vec3(_2526, _2527, _2528));
        float _4524 = isnan(0.0) ? _2537 : (isnan(_2537) ? 0.0 : max(_2537, 0.0));
        float _2541 = _2518 * _2518;
        float _2545 = ((_2536 * _2536) * (_2541 + (-1.0))) + 1.0;
        float _2554 = (exp2(log2(1.0 - (isnan(1.0) ? _4524 : (isnan(_4524) ? 1.0 : min(_4524, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2555 = 1.0 - _2518;
        float _2565 = (0.5 / (((_2309 * ((_2532 * _2555) + _2518)) + 9.9999999392252902907785028219223e-09) + (((_2309 * _2555) + _2518) * _2532))) * _2532;
        float _4535 = isnan(0.0) ? _2565 : (isnan(_2565) ? 0.0 : max(_2565, 0.0));
        float _2567 = (isnan(1.0) ? _4535 : (isnan(_4535) ? 1.0 : min(_4535, 1.0))) * (_2541 / ((_2545 * _2545) * 3.141590118408203125));
        float _2568 = isnan(1.0) ? _2159 : (isnan(_2159) ? 1.0 : min(_2159, 1.0));
        _2493 = (((_2554 * cbLight._m0[_2503].x) * _2567) * _2568) + _2429;
        _2495 = (((_2554 * cbLight._m0[_2503].y) * _2567) * _2568) + _2430;
        _2497 = (((_2554 * cbLight._m0[_2503].z) * _2567) * _2568) + _2431;
    }
    float _2603;
    float _2605;
    float _2607;
    if (_2235)
    {
        _2603 = _2493;
        _2605 = _2495;
        _2607 = _2497;
    }
    else
    {
        uint _2614 = _2144 + 3u;
        uint _2618 = _2144 + 11u;
        float _2632 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2614].w)) * _965) * 0.949999988079071044921875);
        float _2633 = _2632 * _2632;
        float _2634 = cbLight._m0[_2614].x + _1041;
        float _2635 = cbLight._m0[_2614].y + _1042;
        float _2636 = cbLight._m0[_2614].z + _1043;
        float _2640 = inversesqrt(dot(vec3(_2634, _2635, _2636), vec3(_2634, _2635, _2636)));
        float _2641 = _2640 * _2634;
        float _2642 = _2640 * _2635;
        float _2643 = _2640 * _2636;
        float _2644 = dot(vec3(_962, _963, _964), vec3(cbLight._m0[_2614].xyz));
        float _4551 = isnan(0.0) ? _2644 : (isnan(_2644) ? 0.0 : max(_2644, 0.0));
        float _2647 = isnan(1.0) ? _4551 : (isnan(_4551) ? 1.0 : min(_4551, 1.0));
        float _2648 = dot(vec3(_962, _963, _964), vec3(_2641, _2642, _2643));
        float _4562 = isnan(0.0) ? _2648 : (isnan(_2648) ? 0.0 : max(_2648, 0.0));
        float _2651 = isnan(1.0) ? _4562 : (isnan(_4562) ? 1.0 : min(_4562, 1.0));
        float _2652 = dot(vec3(cbLight._m0[_2614].xyz), vec3(_2641, _2642, _2643));
        float _4573 = isnan(0.0) ? _2652 : (isnan(_2652) ? 0.0 : max(_2652, 0.0));
        float _2656 = _2633 * _2633;
        float _2660 = ((_2651 * _2651) * (_2656 + (-1.0))) + 1.0;
        float _2669 = (exp2(log2(1.0 - (isnan(1.0) ? _4573 : (isnan(_4573) ? 1.0 : min(_4573, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2670 = 1.0 - _2633;
        float _2680 = (0.5 / (((_2309 * ((_2647 * _2670) + _2633)) + 9.9999999392252902907785028219223e-09) + (((_2309 * _2670) + _2633) * _2647))) * _2647;
        float _4584 = isnan(0.0) ? _2680 : (isnan(_2680) ? 0.0 : max(_2680, 0.0));
        float _2682 = (isnan(1.0) ? _4584 : (isnan(_4584) ? 1.0 : min(_4584, 1.0))) * (_2656 / ((_2660 * _2660) * 3.141590118408203125));
        float _2683 = isnan(1.0) ? _2160 : (isnan(_2160) ? 1.0 : min(_2160, 1.0));
        _2603 = (((_2669 * cbLight._m0[_2618].x) * _2682) * _2683) + _2493;
        _2605 = (((_2669 * cbLight._m0[_2618].y) * _2682) * _2683) + _2495;
        _2607 = (((_2669 * cbLight._m0[_2618].z) * _2682) * _2683) + _2497;
    }
    float _2818;
    float _2820;
    float _2822;
    float _2824;
    float _2826;
    float _2828;
    if (_2142.y == 0u)
    {
        float _2758 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2759 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2758;
        float _2760 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2758;
        float _2761 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2758;
        uvec4 _2773 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2774 = _2773.x;
        uint _2785 = uint((float(_2773.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1050) / _2774))) + floor(float(uint(cbSceneParam._m0[85u].x * _1049) / _2774)));
        float _2795 = (log2(_2761 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2796 = isnan(0.0) ? _2795 : (isnan(_2795) ? 0.0 : max(_2795, 0.0));
        uint _2799 = uint(isnan(14.0) ? _2796 : (isnan(_2796) ? 14.0 : min(_2796, 14.0)));
        uvec4 _2804 = texelFetch(g_lightClusterGridBuffer, int(((_2799 << 2u) + (_2785 << 6u)) >> 2u));
        uint _2805 = _2804.x;
        uint _2806 = _2773.z;
        float _2906;
        float _2908;
        float _2910;
        float _2912;
        float _2914;
        float _2916;
        if (((((1u << ((_2806 >> 4u) & 15u)) + 4294967295u) & _2805) == 0u) || ((_2806 & 240u) == 0u))
        {
            _2906 = 0.0;
            _2908 = 0.0;
            _2910 = 0.0;
            _2912 = 0.0;
            _2914 = 0.0;
            _2916 = 0.0;
        }
        else
        {
            float _2907;
            float _2909;
            float _2911;
            float _2913;
            float _2915;
            float _2917;
            float _3050 = 0.0;
            float _3051 = 0.0;
            float _3052 = 0.0;
            float _3053 = 0.0;
            float _3054 = 0.0;
            float _3055 = 0.0;
            uint _3056 = 0u;
            uint _3065;
            bool _3066;
            for (;;)
            {
                _3065 = texelFetch(g_lightClassification, int((((_2799 << 5u) + (_2785 << 9u)) + (_3056 << 2u)) >> 2u)).x;
                _3066 = _3065 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_3066)
                {
                    frontier_phi_61_pred = _3050;
                    frontier_phi_61_pred_1 = _3055;
                    frontier_phi_61_pred_2 = _3054;
                    frontier_phi_61_pred_3 = _3053;
                    frontier_phi_61_pred_4 = _3052;
                    frontier_phi_61_pred_5 = _3051;
                }
                else
                {
                    float _3174;
                    float _3175;
                    float _3176;
                    float _3177;
                    float _3178;
                    float _3179;
                    uint _3180;
                    _3174 = _3050;
                    _3175 = _3051;
                    _3176 = _3052;
                    _3177 = _3053;
                    _3178 = _3054;
                    _3179 = _3055;
                    _3180 = _3065;
                    float _3106;
                    float _3107;
                    float _3108;
                    float _3109;
                    float _3110;
                    float _3111;
                    for (;;)
                    {
                        uint _3184 = uint(findLSB(_3180)) + (_3056 << 5u);
                        uint _3181 = (_3180 + 4294967295u) & _3180;
                        uint _3186 = _3184 * 48u;
                        vec4 _3200 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3186)).x, texelFetch(g_PointLightRenderingBuffer, int(_3186 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3186 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3186 + 3u)).x));
                        uint _3206 = (_3184 * 48u) + 4u;
                        vec4 _3219 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3206)).x, texelFetch(g_PointLightRenderingBuffer, int(_3206 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3206 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3206 + 3u)).x));
                        uint _3225 = (_3184 * 48u) + 8u;
                        vec3 _3236 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3225)).x, texelFetch(g_PointLightRenderingBuffer, int(_3225 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3225 + 2u)).x));
                        float _3240 = _3200.x - _2759;
                        float _3241 = _3200.y - _2760;
                        float _3242 = _3200.z - _2761;
                        float _3243 = dot(vec3(_3240, _3241, _3242), vec3(_3240, _3241, _3242));
                        float _3246 = inversesqrt(_3243);
                        float _3247 = _3246 * _3240;
                        float _3248 = _3246 * _3241;
                        float _3249 = _3246 * _3242;
                        float _3250 = dot(vec3(_1068, _1071, _1074), vec3(_3247, _3248, _3249));
                        float _3255 = 1.0 - (_3243 * _3200.w);
                        float _4610 = isnan(0.0) ? _3255 : (isnan(_3255) ? 0.0 : max(_3255, 0.0));
                        float _3256 = isnan(1.0) ? _4610 : (isnan(_4610) ? 1.0 : min(_4610, 1.0));
                        float _3257 = sqrt(_3243) * _3219.w;
                        float _3260 = 1.39999997615814208984375 / (_3257 + 1.39999997615814208984375);
                        float _3261 = _3260 * _3260;
                        float _3264 = ((1.0 - _3261) * _3250) + _3261;
                        float _3267 = _3257 * _3257;
                        float _3271 = ((isnan(0.0) ? _3264 : (isnan(_3264) ? 0.0 : max(_3264, 0.0))) * _3256) / ((_3267 * 0.699999988079071044921875) + 1.0);
                        float _3275 = (-0.0) - _2759;
                        float _3276 = (-0.0) - _2760;
                        float _3277 = (-0.0) - _2761;
                        float _3281 = inversesqrt(dot(vec3(_3275, _3276, _3277), vec3(_3275, _3276, _3277)));
                        float _3282 = _3281 * _3275;
                        float _3283 = _3281 * _3276;
                        float _3284 = _3281 * _3277;
                        float _3292 = exp2(log2(1.0 / ((_3267 * 3.5) + 5.0)) * 0.25);
                        float _3293 = 1.0 - _1128;
                        float _3300 = sqrt(1.0 - ((1.0 - (_3293 * _3293)) * (1.0 - (_3292 * _3292))));
                        float _3301 = _3300 * _3300;
                        float _3302 = _3301 * _3301;
                        float _3303 = _3282 + _3247;
                        float _3304 = _3283 + _3248;
                        float _3305 = _3284 + _3249;
                        float _3309 = inversesqrt(dot(vec3(_3303, _3304, _3305), vec3(_3303, _3304, _3305)));
                        float _3313 = dot(vec3(_1068, _1071, _1074), vec3(_3282, _3283, _3284));
                        float _4626 = isnan(0.0) ? _3313 : (isnan(_3313) ? 0.0 : max(_3313, 0.0));
                        float _3316 = isnan(1.0) ? _4626 : (isnan(_4626) ? 1.0 : min(_4626, 1.0));
                        float _3317 = dot(vec3(_1068, _1071, _1074), vec3(_3309 * _3303, _3309 * _3304, _3309 * _3305));
                        float _4637 = isnan(0.0) ? _3317 : (isnan(_3317) ? 0.0 : max(_3317, 0.0));
                        float _3320 = isnan(1.0) ? _4637 : (isnan(_4637) ? 1.0 : min(_4637, 1.0));
                        float _3324 = ((_3320 * _3320) * (_3302 + (-1.0))) + 1.0;
                        float _3325 = _3260 * _3301;
                        float _3326 = _3325 * _3325;
                        float _3329 = ((1.0 - _3326) * _3250) + _3326;
                        float _4648 = isnan(0.0) ? _3329 : (isnan(_3329) ? 0.0 : max(_3329, 0.0));
                        float _3330 = isnan(1.0) ? _4648 : (isnan(_4648) ? 1.0 : min(_4648, 1.0));
                        float _3331 = 1.0 - _3301;
                        float _3341 = (0.5 / (((_3330 * ((_3316 * _3331) + _3301)) + 9.9999999392252902907785028219223e-09) + (((_3330 * _3331) + _3301) * _3316))) * _3330;
                        float _4659 = isnan(0.0) ? _3341 : (isnan(_3341) ? 0.0 : max(_3341, 0.0));
                        float _3352 = (((_3302 * 3.1415927410125732421875) * (isnan(1.0) ? _4659 : (isnan(_4659) ? 1.0 : min(_4659, 1.0)))) / ((_3324 * _3324) * ((_3267 * 2.1991131305694580078125) + 3.141590118408203125))) * _3256;
                        _3109 = (_3271 * _3219.x) + _3177;
                        _3110 = (_3271 * _3219.y) + _3178;
                        _3111 = (_3271 * _3219.z) + _3179;
                        _3106 = (_3352 * _3236.x) + _3174;
                        _3107 = (_3352 * _3236.y) + _3175;
                        _3108 = (_3352 * _3236.z) + _3176;
                        if (_3181 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3174 = _3106;
                            _3175 = _3107;
                            _3176 = _3108;
                            _3177 = _3109;
                            _3178 = _3110;
                            _3179 = _3111;
                            _3180 = _3181;
                        }
                    }
                    frontier_phi_61_pred = _3106;
                    frontier_phi_61_pred_1 = _3111;
                    frontier_phi_61_pred_2 = _3110;
                    frontier_phi_61_pred_3 = _3109;
                    frontier_phi_61_pred_4 = _3108;
                    frontier_phi_61_pred_5 = _3107;
                }
                _2907 = frontier_phi_61_pred;
                _2917 = frontier_phi_61_pred_1;
                _2915 = frontier_phi_61_pred_2;
                _2913 = frontier_phi_61_pred_3;
                _2911 = frontier_phi_61_pred_4;
                _2909 = frontier_phi_61_pred_5;
                uint _3057 = _3056 + 1u;
                if (_3057 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3050 = _2907;
                    _3051 = _2909;
                    _3052 = _2911;
                    _3053 = _2913;
                    _3054 = _2915;
                    _3055 = _2917;
                    _3056 = _3057;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2906 = _2907;
            _2908 = _2909;
            _2910 = _2911;
            _2912 = _2913;
            _2914 = _2915;
            _2916 = _2917;
        }
        uvec4 _2920 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2921 = _2920.z;
        uint _2923 = (_2921 >> 8u) & 15u;
        float _3018;
        float _3020;
        float _3022;
        float _3024;
        float _3026;
        float _3028;
        if (((4294967295u << _2923) & _2805) == 0u)
        {
            _3018 = _2906;
            _3020 = _2908;
            _3022 = _2910;
            _3024 = _2912;
            _3026 = _2914;
            _3028 = _2916;
        }
        else
        {
            float _3043 = inversesqrt(dot(vec3(_2759, _2760, _2761), vec3(_2759, _2760, _2761)));
            float _3044 = _3043 * _2759;
            float _3045 = _3043 * _2760;
            float _3046 = _3043 * _2761;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2923 < ((_2921 >> 12u) & 15u))
            {
                float _3019;
                float _3021;
                float _3023;
                float _3025;
                float _3027;
                float _3029;
                float _3157 = _2906;
                float _3158 = _2908;
                float _3159 = _2910;
                float _3160 = _2912;
                float _3161 = _2914;
                float _3162 = _2916;
                uint _3163 = _2923;
                uint _3172;
                bool _3173;
                for (;;)
                {
                    _3172 = texelFetch(g_lightClassification, int((((_2799 << 5u) + (_2785 << 9u)) + (_3163 << 2u)) >> 2u)).x;
                    _3173 = _3172 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_3173)
                    {
                        frontier_phi_67_pred = _3160;
                        frontier_phi_67_pred_1 = _3161;
                        frontier_phi_67_pred_2 = _3162;
                        frontier_phi_67_pred_3 = _3159;
                        frontier_phi_67_pred_4 = _3158;
                        frontier_phi_67_pred_5 = _3157;
                    }
                    else
                    {
                        float _3357;
                        float _3358;
                        float _3359;
                        float _3360;
                        float _3361;
                        float _3362;
                        float _3650;
                        float _3651;
                        float _3652;
                        float _3653;
                        float _3654;
                        float _3655;
                        float _3370 = _3157;
                        float _3371 = _3158;
                        float _3372 = _3159;
                        float _3373 = _3160;
                        float _3374 = _3161;
                        float _3375 = _3162;
                        uint _3376 = _3172;
                        uint _3377;
                        vec4 _3402;
                        float _3403;
                        vec4 _3418;
                        vec3 _3430;
                        vec4 _3445;
                        vec4 _3460;
                        float _3506;
                        bool _3507;
                        for (;;)
                        {
                            uint _3387 = ((_3163 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3376));
                            _3377 = (_3376 + 4294967295u) & _3376;
                            uint _3389 = _3387 * 40u;
                            _3402 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3389)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3389 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3389 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3389 + 3u)).x));
                            _3403 = _3402.w;
                            uint _3405 = (_3387 * 40u) + 4u;
                            _3418 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3405)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3405 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3405 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3405 + 3u)).x));
                            uint _3420 = (_3387 * 40u) + 8u;
                            _3430 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3420)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3420 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3420 + 2u)).x));
                            uint _3432 = (_3387 * 40u) + 16u;
                            _3445 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3432)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3432 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3432 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3432 + 3u)).x));
                            uint _3447 = (_3387 * 40u) + 20u;
                            _3460 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3447)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3447 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3447 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3447 + 3u)).x));
                            uint _3462 = (_3387 * 40u) + 24u;
                            vec4 _3475 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3462)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3462 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3462 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3462 + 3u)).x));
                            uint _3481 = (_3387 * 40u) + 28u;
                            vec4 _3494 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3481)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3481 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3481 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3481 + 3u)).x));
                            _3506 = fma(_2761, _3494.z, fma(_2760, _3494.y, _3494.x * _2759)) + _3494.w;
                            _3507 = !((fma(_2761, _3475.z, fma(_2760, _3475.y, _3475.x * _2759)) + _3475.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3507)
                            {
                                float _3534 = _3402.x - _2759;
                                float _3535 = _3402.y - _2760;
                                float _3536 = _3402.z - _2761;
                                float _3537 = dot(vec3(_3534, _3535, _3536), vec3(_3534, _3535, _3536));
                                float _3540 = inversesqrt(_3537);
                                float _3541 = _3540 * _3534;
                                float _3542 = _3540 * _3535;
                                float _3543 = _3540 * _3536;
                                float _3547 = 1.0 - (_3537 / (_3403 * _3403));
                                float _4670 = isnan(0.0) ? _3547 : (isnan(_3547) ? 0.0 : max(_3547, 0.0));
                                float _3548 = isnan(1.0) ? _4670 : (isnan(_4670) ? 1.0 : min(_4670, 1.0));
                                float _3552 = sqrt(_3537) * _3418.w;
                                float _3554 = 1.39999997615814208984375 / (_3552 + 1.39999997615814208984375);
                                float _3555 = _3554 * _3554;
                                float _3558 = ((1.0 - _3555) * dot(vec3(_3541, _3542, _3543), vec3(_1068, _1071, _1074))) + _3555;
                                float _3561 = _3552 * _3552;
                                float _3565 = (fma(_2761, _3445.z, fma(_2760, _3445.y, _3445.x * _2759)) + _3445.w) / _3506;
                                float _3566 = (fma(_2761, _3460.z, fma(_2760, _3460.y, _3460.x * _2759)) + _3460.w) / _3506;
                                float _3570 = 1.0 - dot(vec2(_3565, _3566), vec2(_3565, _3566));
                                float _4686 = isnan(0.0) ? _3570 : (isnan(_3570) ? 0.0 : max(_3570, 0.0));
                                float _3571 = isnan(1.0) ? _4686 : (isnan(_4686) ? 1.0 : min(_4686, 1.0));
                                float _3572 = _3571 * (((isnan(0.0) ? _3558 : (isnan(_3558) ? 0.0 : max(_3558, 0.0))) * _3548) / ((_3561 * 0.699999988079071044921875) + 1.0));
                                float _3584 = exp2(log2(1.0 / ((_3561 * 3.5) + 5.0)) * 0.25);
                                float _3585 = 1.0 - _1128;
                                float _3592 = sqrt(1.0 - ((1.0 - (_3585 * _3585)) * (1.0 - (_3584 * _3584))));
                                float _3593 = _3592 * _3592;
                                float _3594 = _3593 * _3593;
                                float _3595 = _3541 - _3044;
                                float _3596 = _3542 - _3045;
                                float _3597 = _3543 - _3046;
                                float _3601 = inversesqrt(dot(vec3(_3595, _3596, _3597), vec3(_3595, _3596, _3597)));
                                float _3605 = dot(vec3(_1068, _1071, _1074), vec3((-0.0) - _3044, (-0.0) - _3045, (-0.0) - _3046));
                                float _4697 = isnan(0.0) ? _3605 : (isnan(_3605) ? 0.0 : max(_3605, 0.0));
                                float _3608 = isnan(1.0) ? _4697 : (isnan(_4697) ? 1.0 : min(_4697, 1.0));
                                float _3609 = dot(vec3(_1068, _1071, _1074), vec3(_3601 * _3595, _3601 * _3596, _3601 * _3597));
                                float _4708 = isnan(0.0) ? _3609 : (isnan(_3609) ? 0.0 : max(_3609, 0.0));
                                float _3612 = isnan(1.0) ? _4708 : (isnan(_4708) ? 1.0 : min(_4708, 1.0));
                                float _3616 = ((_3612 * _3612) * (_3594 + (-1.0))) + 1.0;
                                float _3617 = _3554 * _3593;
                                float _3618 = _3617 * _3617;
                                float _3624 = ((1.0 - _3618) * dot(vec3(_1068, _1071, _1074), vec3(_3541, _3542, _3543))) + _3618;
                                float _4719 = isnan(0.0) ? _3624 : (isnan(_3624) ? 0.0 : max(_3624, 0.0));
                                float _3625 = isnan(1.0) ? _4719 : (isnan(_4719) ? 1.0 : min(_4719, 1.0));
                                float _3626 = 1.0 - _3593;
                                float _3636 = (0.5 / (((_3625 * ((_3608 * _3626) + _3593)) + 9.9999999392252902907785028219223e-09) + (((_3625 * _3626) + _3593) * _3608))) * _3625;
                                float _4730 = isnan(0.0) ? _3636 : (isnan(_3636) ? 0.0 : max(_3636, 0.0));
                                float _3646 = (_3571 * _3548) * (((_3594 * 3.1415927410125732421875) * (isnan(1.0) ? _4730 : (isnan(_4730) ? 1.0 : min(_4730, 1.0)))) / ((_3616 * _3616) * ((_3561 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3646 * _3430.x;
                                frontier_phi_73_pred_1 = _3646 * _3430.y;
                                frontier_phi_73_pred_2 = _3572 * _3418.z;
                                frontier_phi_73_pred_3 = _3572 * _3418.y;
                                frontier_phi_73_pred_4 = _3572 * _3418.x;
                                frontier_phi_73_pred_5 = _3646 * _3430.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3650 = frontier_phi_73_pred;
                            _3651 = frontier_phi_73_pred_1;
                            _3655 = frontier_phi_73_pred_2;
                            _3654 = frontier_phi_73_pred_3;
                            _3653 = frontier_phi_73_pred_4;
                            _3652 = frontier_phi_73_pred_5;
                            _3360 = _3653 + _3373;
                            _3361 = _3654 + _3374;
                            _3362 = _3655 + _3375;
                            _3357 = _3650 + _3370;
                            _3358 = _3651 + _3371;
                            _3359 = _3652 + _3372;
                            if (_3377 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3370 = _3357;
                                _3371 = _3358;
                                _3372 = _3359;
                                _3373 = _3360;
                                _3374 = _3361;
                                _3375 = _3362;
                                _3376 = _3377;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3360;
                        frontier_phi_67_pred_1 = _3361;
                        frontier_phi_67_pred_2 = _3362;
                        frontier_phi_67_pred_3 = _3359;
                        frontier_phi_67_pred_4 = _3358;
                        frontier_phi_67_pred_5 = _3357;
                    }
                    _3025 = frontier_phi_67_pred;
                    _3027 = frontier_phi_67_pred_1;
                    _3029 = frontier_phi_67_pred_2;
                    _3023 = frontier_phi_67_pred_3;
                    _3021 = frontier_phi_67_pred_4;
                    _3019 = frontier_phi_67_pred_5;
                    uint _3164 = _3163 + 1u;
                    if (_3164 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3157 = _3019;
                        _3158 = _3021;
                        _3159 = _3023;
                        _3160 = _3025;
                        _3161 = _3027;
                        _3162 = _3029;
                        _3163 = _3164;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _3027;
                frontier_phi_55_56_ladder_1 = _3029;
                frontier_phi_55_56_ladder_2 = _3025;
                frontier_phi_55_56_ladder_3 = _3023;
                frontier_phi_55_56_ladder_4 = _3021;
                frontier_phi_55_56_ladder_5 = _3019;
            }
            else
            {
                frontier_phi_55_56_ladder = _2914;
                frontier_phi_55_56_ladder_1 = _2916;
                frontier_phi_55_56_ladder_2 = _2912;
                frontier_phi_55_56_ladder_3 = _2910;
                frontier_phi_55_56_ladder_4 = _2908;
                frontier_phi_55_56_ladder_5 = _2906;
            }
            _3018 = frontier_phi_55_56_ladder_5;
            _3020 = frontier_phi_55_56_ladder_4;
            _3022 = frontier_phi_55_56_ladder_3;
            _3024 = frontier_phi_55_56_ladder_2;
            _3026 = frontier_phi_55_56_ladder;
            _3028 = frontier_phi_55_56_ladder_1;
        }
        float _3033 = isnan(1.0) ? _1112 : (isnan(_1112) ? 1.0 : min(_1112, 1.0));
        _2818 = (_3033 * _3024) + _2273;
        _2820 = (_3033 * _3026) + _2275;
        _2822 = (_3033 * _3028) + _2277;
        _2824 = ((_3018 * 0.039999999105930328369140625) * _3033) + _2603;
        _2826 = ((_3020 * 0.039999999105930328369140625) * _3033) + _2605;
        _2828 = ((_3022 * 0.039999999105930328369140625) * _3033) + _2607;
    }
    else
    {
        _2818 = _2273;
        _2820 = _2275;
        _2822 = _2277;
        _2824 = _2603;
        _2826 = _2605;
        _2828 = _2607;
    }
    float _4746 = isnan(0.0) ? _1097 : (isnan(_1097) ? 0.0 : max(_1097, 0.0));
    float _4757 = isnan(0.0) ? _1098 : (isnan(_1098) ? 0.0 : max(_1098, 0.0));
    float _4768 = isnan(0.0) ? _1099 : (isnan(_1099) ? 0.0 : max(_1099, 0.0));
    uint _2848 = _257 + 6u;
    float _2856 = _1049 / cbSceneParam._m0[86u].x;
    float _2857 = _1050 / cbSceneParam._m0[86u].y;
    vec4 _2871 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2856, _2857, (log2((isnan(cbSceneParam._m0[77u].w) ? _983 : (isnan(_983) ? cbSceneParam._m0[77u].w : min(_983, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2873 = _2871.x;
    float _2874 = _2871.y;
    float _2875 = _2871.z;
    float _2876 = _2871.w;
    float _2968;
    float _2970;
    float _2972;
    float _2974;
    if (_983 > cbSceneParam._m0[78u].w)
    {
        float _2931 = isnan(_983) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _983 : min(cbSceneParam._m0[80u].w, _983));
        float _2932 = _2931 / _983;
        float _2943 = _2932 * _1034;
        float _2944 = _1035 * _2932;
        float _2945 = (-0.0) - _2944;
        float _2946 = _2932 * _1036;
        float _2948 = (cbSceneParam._m0[77u].w * _2945) / _2931;
        float _2949 = _2948 + cbSceneParam._m0[79u].w;
        float _2950 = cbSceneParam._m0[79u].w - _2944;
        float _2956 = sqrt(((_2943 * _2943) + (_2944 * _2944)) + (_2946 * _2946));
        float _2959 = (1.0 - (cbSceneParam._m0[77u].w / _2931)) * _2956;
        float _2964 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2966 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3119;
        if (abs((_2945 - _2948) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3119 = ((((_2949 > 0.0) ? exp2(_2964 * _2949) : (2.0 - exp2(_2966 * _2949))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2959;
        }
        else
        {
            float _3079 = 1.0 / cbSceneParam._m0[80u].x;
            float _3080 = isnan(_2950) ? _2949 : (isnan(_2949) ? _2950 : max(_2949, _2950));
            float _3081 = isnan(_2950) ? _2949 : (isnan(_2949) ? _2950 : min(_2949, _2950));
            float _3090 = isnan(0.0) ? _3080 : (isnan(_3080) ? 0.0 : min(_3080, 0.0));
            float _3091 = isnan(0.0) ? _3081 : (isnan(_3081) ? 0.0 : min(_3081, 0.0));
            _3119 = ((abs(_2956 / _2945) * cbSceneParam._m0[80u].y) * ((((_3090 - _3091) * 2.0) - ((exp2(_2964 * (isnan(0.0) ? _3080 : (isnan(_3080) ? 0.0 : max(_3080, 0.0)))) - exp2(_2964 * (isnan(0.0) ? _3081 : (isnan(_3081) ? 0.0 : max(_3081, 0.0))))) * _3079)) - ((exp2(_2966 * _3090) - exp2(_2966 * _3091)) * _3079))) + (_2959 * cbSceneParam._m0[80u].z);
        }
        vec4 _3121 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2856, _2857, 1.0), 0.0);
        float _3130 = exp2((_3119 * (-1.44269502162933349609375)) * (1.0 - _3121.w));
        float _3131 = log2(_3130);
        float _3147 = log2(_2876);
        _2968 = (exp2(_3147 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3131 * cbSceneParam._m0[78u].x)) * _3121.x) / cbSceneParam._m0[78u].x)) + _2873;
        _2970 = (exp2(_3147 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3131 * cbSceneParam._m0[78u].y)) * _3121.y) / cbSceneParam._m0[78u].y)) + _2874;
        _2972 = (exp2(_3147 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3131 * cbSceneParam._m0[78u].z)) * _3121.z) / cbSceneParam._m0[78u].z)) + _2875;
        _2974 = _3130 * _2876;
    }
    else
    {
        _2968 = _2873;
        _2970 = _2874;
        _2972 = _2875;
        _2974 = _2876;
    }
    float _2986 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2987 = _2986 == 3.0;
    float _2988 = log2(_2974);
    float _2995 = exp2(_2988 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4746 : (isnan(_4746) ? 1.0 : min(_4746, 1.0))) * (_2818 + ((isnan(0.0) ? _1836 : (isnan(_1836) ? 0.0 : max(_1836, 0.0))) * _1112))) + ((_2824 + ((isnan(0.0) ? _2126 : (isnan(_2126) ? 0.0 : max(_2126, 0.0))) * _1915)) * cbPerFrame._m0[3u].x));
    float _2996 = exp2(_2988 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4757 : (isnan(_4757) ? 1.0 : min(_4757, 1.0))) * (_2820 + ((isnan(0.0) ? _1839 : (isnan(_1839) ? 0.0 : max(_1839, 0.0))) * _1112))) + ((_2826 + ((isnan(0.0) ? _2129 : (isnan(_2129) ? 0.0 : max(_2129, 0.0))) * _1915)) * cbPerFrame._m0[3u].x));
    float _2997 = exp2(_2988 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4768 : (isnan(_4768) ? 1.0 : min(_4768, 1.0))) * (_2822 + ((isnan(0.0) ? _1842 : (isnan(_1842) ? 0.0 : max(_1842, 0.0))) * _1112))) + ((_2828 + ((isnan(0.0) ? _2132 : (isnan(_2132) ? 0.0 : max(_2132, 0.0))) * _1915)) * cbPerFrame._m0[3u].x));
    float _3006 = (_2986 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _3006 * (_2987 ? _2995 : (_2995 + (cbSceneParam._m0[72u].w * _2968)));
    SV_Target.y = _3006 * (_2987 ? _2996 : (_2996 + (cbSceneParam._m0[72u].w * _2970)));
    SV_Target.z = _3006 * (_2987 ? _2997 : (_2997 + (cbSceneParam._m0[72u].w * _2972)));
    SV_Target.w = cbInstanceData._m0[_2848].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2848].w;
}


