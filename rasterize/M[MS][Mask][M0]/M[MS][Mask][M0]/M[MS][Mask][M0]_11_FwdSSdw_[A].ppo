#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_6;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1157;
float _3542;
float _3543;
float _3544;
float _3545;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _208 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _209 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _210 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _216 = inversesqrt(dot(vec3(_208, _209, _210), vec3(_208, _209, _210)));
    float _223 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _230 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _236 = uint(roundEven(NORMAL.w)) * 13u;
    uint _242 = _236 + 1u;
    uint _246 = _236 + 2u;
    float _255 = sqrt(((cbInstanceData._m0[_242].x * cbInstanceData._m0[_242].x) + (cbInstanceData._m0[_236].x * cbInstanceData._m0[_236].x)) + (cbInstanceData._m0[_246].x * cbInstanceData._m0[_246].x));
    float _256 = _255 * TEXCOORD.z;
    float _257 = _255 * TEXCOORD.w;
    vec4 _277 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _283 = _277.x * cbMtdParam._m0[11u].x;
    float _284 = _277.y * cbMtdParam._m0[11u].y;
    float _285 = _277.z * cbMtdParam._m0[11u].z;
    vec4 _304 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _256) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _257) + cbTextureTilingScale._m0[5u].w));
    vec4 _358 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _360 = _358.x;
    float _372 = dot(vec4(_360, _358.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _389 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w)).x) * 2.0) - ((((_360 - _372) * cbMtdParam._m0[24u].z) + _372) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3554 = isnan(0.0) ? _389 : (isnan(_389) ? 0.0 : max(_389, 0.0));
    float _390 = isnan(1.0) ? _3554 : (isnan(_3554) ? 1.0 : min(_3554, 1.0));
    float _397 = (_390 * ((_304.x * cbMtdParam._m0[12u].x) - _283)) + _283;
    float _398 = (_390 * ((_304.y * cbMtdParam._m0[12u].y) - _284)) + _284;
    float _399 = (_390 * ((_304.z * cbMtdParam._m0[12u].z) - _285)) + _285;
    vec4 _417 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _256) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _257) + cbTextureTilingScale._m0[4u].w));
    vec4 _434 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _436 = _434.x;
    float _437 = _434.y;
    float _438 = _434.z;
    float _447 = ((_417.z - _438) * _390) + _438;
    float _450 = ((((_417.x - _436) * _390) + _436) * 2.0) + (-1.0);
    float _452 = ((((_417.y - _437) * _390) + _437) * 2.0) + (-1.0);
    float _453 = dot(vec2(_450, _452), vec2(_450, _452));
    float _3565 = isnan(0.0) ? _453 : (isnan(_453) ? 0.0 : max(_453, 0.0));
    float _458 = sqrt(1.0 - (isnan(1.0) ? _3565 : (isnan(_3565) ? 1.0 : min(_3565, 1.0))));
    vec4 _474 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _499 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _256) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _257) + cbTextureTilingScale._m0[11u].w));
    float _501 = _499.x;
    float _502 = 1.0 - _501;
    float _515 = (TEXCOORD_8.w - ((cbMtdParam._m0[21u].z * (1.0 - TEXCOORD_8.w)) * ((((_501 - _502) * cbMtdParam._m0[24u].w) + _502) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3576 = isnan(0.0) ? _515 : (isnan(_515) ? 0.0 : max(_515, 0.0));
    float _516 = isnan(1.0) ? _3576 : (isnan(_3576) ? 1.0 : min(_3576, 1.0));
    float _523 = (_516 * (cbMtdParam._m0[17u].x - _397)) + _397;
    float _524 = (_516 * (cbMtdParam._m0[17u].y - _398)) + _398;
    float _525 = (_516 * (cbMtdParam._m0[17u].z - _399)) + _399;
    float _529 = (cbMtdParam._m0[19u].w * (_474.z - _447)) + _447;
    vec4 _542 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _256) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _257) + cbTextureTilingScale._m0[15u].w));
    float _549 = (_542.x * 2.0) + (-1.0);
    float _550 = (_542.y * 2.0) + (-1.0);
    float _551 = dot(vec2(_549, _550), vec2(_549, _550));
    float _3587 = isnan(0.0) ? _551 : (isnan(_551) ? 0.0 : max(_551, 0.0));
    float _559 = (_516 * (_542.z - _529)) + _529;
    float _562 = (((_474.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _450;
    float _563 = (((_474.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _452;
    float _575 = (((_549 - _562) + (cbMtdParam._m0[21u].x * _562)) * _516) + _562;
    float _576 = (((_550 - _563) + (cbMtdParam._m0[21u].x * _563)) * _516) + _563;
    float _577 = (_516 * (sqrt(1.0 - (isnan(1.0) ? _3587 : (isnan(_3587) ? 1.0 : min(_3587, 1.0)))) - _458)) + _458;
    float _581 = cbMtdParam._m0[22u].x + _474.w;
    float _584 = fma(_577, _223 * NORMAL.x, fma(_576, _230 * TANGENT.x, (_216 * _208) * _575));
    float _587 = fma(_577, _223 * NORMAL.y, fma(_576, _230 * TANGENT.y, (_216 * _209) * _575));
    float _590 = fma(_577, _223 * NORMAL.z, fma(_576, _230 * TANGENT.z, (_216 * _210) * _575));
    float _594 = inversesqrt(dot(vec3(_584, _587, _590), vec3(_584, _587, _590)));
    float _595 = _594 * _584;
    float _596 = _594 * _587;
    float _597 = _594 * _590;
    float _3598 = isnan(0.0) ? _559 : (isnan(_559) ? 0.0 : max(_559, 0.0));
    float _598 = isnan(1.0) ? _3598 : (isnan(_3598) ? 1.0 : min(_3598, 1.0));
    float _3609 = isnan(0.0) ? _581 : (isnan(_581) ? 0.0 : max(_581, 0.0));
    float _3620 = isnan(0.0) ? _523 : (isnan(_523) ? 0.0 : max(_523, 0.0));
    float _3631 = isnan(0.0) ? _524 : (isnan(_524) ? 0.0 : max(_524, 0.0));
    float _3642 = isnan(0.0) ? _525 : (isnan(_525) ? 0.0 : max(_525, 0.0));
    float _616 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _658 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _668 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _658);
    float _669 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _658);
    float _670 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _658);
    float _674 = inversesqrt(dot(vec3(_668, _669, _670), vec3(_668, _669, _670)));
    float _675 = _668 * _674;
    float _676 = _669 * _674;
    float _677 = _670 * _674;
    vec4 _682 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _684 = _682.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _838 = sqrt(((_668 * _668) + (_669 * _669)) + (_670 * _670));
        float _844 = (cbMatDynParam._m0[5u].x * _838) + cbMatDynParam._m0[5u].y;
        float _3653 = isnan(0.0) ? _844 : (isnan(_844) ? 0.0 : max(_844, 0.0));
        float _845 = isnan(1.0) ? _3653 : (isnan(_3653) ? 1.0 : min(_3653, 1.0));
        float _849 = (cbMatDynParam._m0[5u].z * _838) + cbMatDynParam._m0[5u].w;
        float _3664 = isnan(0.0) ? _849 : (isnan(_849) ? 0.0 : max(_849, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3664 : (isnan(_3664) ? 1.0 : min(_3664, 1.0))) - _845)) + _845) < ((_684 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _695 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _696 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _714 = fma(_597, cbSceneParam._m0[5u].z, fma(_596, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _595));
    float _717 = fma(_597, cbSceneParam._m0[6u].z, fma(_596, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _595));
    float _720 = fma(_597, cbSceneParam._m0[7u].z, fma(_596, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _595));
    uint _733 = _236 + 9u;
    uint _734 = _733 + uint(cbMatDynParam._m0[0u].w);
    float _740 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3620 : (isnan(_3620) ? 1.0 : min(_3620, 1.0)))) * cbInstanceData._m0[_734].x;
    float _741 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3631 : (isnan(_3631) ? 1.0 : min(_3631, 1.0)))) * cbInstanceData._m0[_734].y;
    float _742 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3642 : (isnan(_3642) ? 1.0 : min(_3642, 1.0)))) * cbInstanceData._m0[_734].z;
    float _3675 = isnan(0.0) ? _740 : (isnan(_740) ? 0.0 : max(_740, 0.0));
    float _743 = isnan(1.0) ? _3675 : (isnan(_3675) ? 1.0 : min(_3675, 1.0));
    float _3686 = isnan(0.0) ? _741 : (isnan(_741) ? 0.0 : max(_741, 0.0));
    float _744 = isnan(1.0) ? _3686 : (isnan(_3686) ? 1.0 : min(_3686, 1.0));
    float _3697 = isnan(0.0) ? _742 : (isnan(_742) ? 0.0 : max(_742, 0.0));
    float _745 = isnan(1.0) ? _3697 : (isnan(_3697) ? 1.0 : min(_3697, 1.0));
    vec4 _754 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _695, cbSceneParam._m0[86u].y * _696));
    float _758 = ((isnan(1.0) ? _3609 : (isnan(_3609) ? 1.0 : min(_3609, 1.0))) * TEXCOORD_5.w) * _754.x;
    float _759 = dot(vec3(_595, _596, _597), vec3(_675, _676, _677));
    float _762 = _759 * 2.0;
    float _766 = (_762 * _595) - _675;
    float _767 = (_762 * _596) - _676;
    float _768 = (_762 * _597) - _677;
    float _772 = abs(dot(vec3(_675, _676, _677), vec3(_595, _596, _597)));
    float _3708 = isnan(0.0) ? _772 : (isnan(_772) ? 0.0 : max(_772, 0.0));
    float _774 = sqrt(_598);
    float _787 = exp2((_774 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3708 : (isnan(_3708) ? 1.0 : min(_3708, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_774 * 3.0));
    float _819 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _823 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _827 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1156;
    float _1158;
    float _1159;
    float _1160;
    float _1161;
    float _1162;
    float _1163;
    float _1164;
    float _1165;
    float _1166;
    float _1167;
    float _1168;
    float _1169;
    float _1170;
    float _1171;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _881 = fma(_827, cbModelParam._m0[26u].z, fma(_823, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _819));
        float _885 = fma(_827, cbModelParam._m0[27u].z, fma(_823, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _819));
        float _889 = fma(_827, cbModelParam._m0[28u].z, fma(_823, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _819));
        float _914 = _819 + _595;
        float _915 = _823 + _596;
        float _916 = _827 + _597;
        float _926 = fma(_916, cbModelParam._m0[26u].z, fma(_915, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _914)) - _881;
        float _927 = fma(_916, cbModelParam._m0[27u].z, fma(_915, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _914)) - _885;
        float _928 = fma(_916, cbModelParam._m0[28u].z, fma(_915, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _914)) - _889;
        float _932 = inversesqrt(dot(vec3(_926, _927, _928), vec3(_926, _927, _928)));
        float _945 = ((_932 * _926) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_881 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _946 = ((_932 * _927) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_885 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _947 = ((_932 * _928) / cbModelParam._m0[34u].z) + ((((((_889 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _950 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_945, _946, _947), 0.0);
        vec4 _957 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_945, _946, _947), 0.0);
        vec4 _964 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_945, _946, _947), 0.0);
        vec4 _971 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_945, _946, _947), 0.0);
        float _984 = exp2((_950.w + (-0.5)) * 20.0) * 2.0;
        float _985 = _984 * (_950.x + (-0.5));
        float _986 = _984 * (_950.y + (-0.5));
        float _987 = _984 * (_950.z + (-0.5));
        float _994 = exp2((_957.w + (-0.5)) * 20.0) * 2.0;
        float _995 = _994 * (_957.x + (-0.5));
        float _996 = _994 * (_957.y + (-0.5));
        float _997 = _994 * (_957.z + (-0.5));
        float _1004 = exp2((_964.w + (-0.5)) * 20.0) * 2.0;
        float _1005 = _1004 * (_964.x + (-0.5));
        float _1006 = _1004 * (_964.y + (-0.5));
        float _1007 = _1004 * (_964.z + (-0.5));
        float _1014 = exp2((_971.w + (-0.5)) * 20.0) * 2.0;
        float _1015 = _1014 * (_971.x + (-0.5));
        float _1016 = _1014 * (_971.y + (-0.5));
        float _1017 = _1014 * (_971.z + (-0.5));
        float _1018 = isnan(0.0) ? _1015 : (isnan(_1015) ? 0.0 : max(_1015, 0.0));
        float _1019 = isnan(0.0) ? _1016 : (isnan(_1016) ? 0.0 : max(_1016, 0.0));
        float _1020 = isnan(0.0) ? _1017 : (isnan(_1017) ? 0.0 : max(_1017, 0.0));
        float _1021 = _985 * 0.5;
        float _1022 = _995 * 0.5;
        float _1023 = _1005 * 0.5;
        float _1024 = dot(vec3(_1021, _1022, _1023), vec3(_1021, _1022, _1023));
        float _1029 = (_1024 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1024);
        float _1038 = (dot(vec3(_595, _596, _597), vec3(_1029 * _1021, _1029 * _1022, _1029 * _1023)) + 1.0) * 0.5;
        float _3734 = isnan(0.0) ? _1038 : (isnan(_1038) ? 0.0 : max(_1038, 0.0));
        float _1048 = sqrt(((_1022 * _1022) + (_1021 * _1021)) + (_1023 * _1023)) / (_1018 + 9.9999997473787516355514526367188e-06);
        float _3745 = isnan(0.0) ? _1048 : (isnan(_1048) ? 0.0 : max(_1048, 0.0));
        float _1049 = isnan(1.0) ? _3745 : (isnan(_3745) ? 1.0 : min(_3745, 1.0));
        float _1050 = _1049 * 2.0;
        float _1054 = (1.0 - _1049) / (_1049 + 1.0);
        float _3756 = isnan(0.0) ? _1054 : (isnan(_1054) ? 0.0 : max(_1054, 0.0));
        float _1055 = isnan(1.0) ? _3756 : (isnan(_3756) ? 1.0 : min(_3756, 1.0));
        float _1064 = ((((1.0 - _1055) * (_1050 + 2.0)) * exp2(log2(isnan(1.0) ? _3734 : (isnan(_3734) ? 1.0 : min(_3734, 1.0))) * (_1050 + 1.0))) + _1055) * _1018;
        float _1065 = _986 * 0.5;
        float _1066 = _996 * 0.5;
        float _1067 = _1006 * 0.5;
        float _1068 = dot(vec3(_1065, _1066, _1067), vec3(_1065, _1066, _1067));
        float _1073 = (_1068 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1068);
        float _1081 = (dot(vec3(_595, _596, _597), vec3(_1073 * _1065, _1073 * _1066, _1073 * _1067)) + 1.0) * 0.5;
        float _3767 = isnan(0.0) ? _1081 : (isnan(_1081) ? 0.0 : max(_1081, 0.0));
        float _1090 = sqrt(((_1066 * _1066) + (_1065 * _1065)) + (_1067 * _1067)) / (_1019 + 9.9999997473787516355514526367188e-06);
        float _3778 = isnan(0.0) ? _1090 : (isnan(_1090) ? 0.0 : max(_1090, 0.0));
        float _1091 = isnan(1.0) ? _3778 : (isnan(_3778) ? 1.0 : min(_3778, 1.0));
        float _1092 = _1091 * 2.0;
        float _1096 = (1.0 - _1091) / (_1091 + 1.0);
        float _3789 = isnan(0.0) ? _1096 : (isnan(_1096) ? 0.0 : max(_1096, 0.0));
        float _1097 = isnan(1.0) ? _3789 : (isnan(_3789) ? 1.0 : min(_3789, 1.0));
        float _1106 = ((((1.0 - _1097) * (_1092 + 2.0)) * exp2(log2(isnan(1.0) ? _3767 : (isnan(_3767) ? 1.0 : min(_3767, 1.0))) * (_1092 + 1.0))) + _1097) * _1019;
        float _1107 = _987 * 0.5;
        float _1108 = _997 * 0.5;
        float _1109 = _1007 * 0.5;
        float _1110 = dot(vec3(_1107, _1108, _1109), vec3(_1107, _1108, _1109));
        float _1115 = (_1110 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1110);
        float _1123 = (dot(vec3(_595, _596, _597), vec3(_1115 * _1107, _1115 * _1108, _1115 * _1109)) + 1.0) * 0.5;
        float _3800 = isnan(0.0) ? _1123 : (isnan(_1123) ? 0.0 : max(_1123, 0.0));
        float _1132 = sqrt(((_1108 * _1108) + (_1107 * _1107)) + (_1109 * _1109)) / (_1020 + 9.9999997473787516355514526367188e-06);
        float _3811 = isnan(0.0) ? _1132 : (isnan(_1132) ? 0.0 : max(_1132, 0.0));
        float _1133 = isnan(1.0) ? _3811 : (isnan(_3811) ? 1.0 : min(_3811, 1.0));
        float _1134 = _1133 * 2.0;
        float _1138 = (1.0 - _1133) / (_1133 + 1.0);
        float _3822 = isnan(0.0) ? _1138 : (isnan(_1138) ? 0.0 : max(_1138, 0.0));
        float _1139 = isnan(1.0) ? _3822 : (isnan(_3822) ? 1.0 : min(_3822, 1.0));
        float _1148 = ((((1.0 - _1139) * (_1134 + 2.0)) * exp2(log2(isnan(1.0) ? _3800 : (isnan(_3800) ? 1.0 : min(_3800, 1.0))) * (_1134 + 1.0))) + _1139) * _1020;
        _1156 = _987;
        _1158 = _986;
        _1159 = _985;
        _1160 = _997;
        _1161 = _996;
        _1162 = _995;
        _1163 = _1007;
        _1164 = _1006;
        _1165 = _1005;
        _1166 = _1020;
        _1167 = _1019;
        _1168 = _1018;
        _1169 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1064 : (isnan(_1064) ? 0.0 : max(_1064, 0.0)));
        _1170 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1106 : (isnan(_1106) ? 0.0 : max(_1106, 0.0)));
        _1171 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1148 : (isnan(_1148) ? 0.0 : max(_1148, 0.0)));
    }
    else
    {
        _1156 = _1157;
        _1158 = _1157;
        _1159 = _1157;
        _1160 = _1157;
        _1161 = _1157;
        _1162 = _1157;
        _1163 = _1157;
        _1164 = _1157;
        _1165 = _1157;
        _1166 = _1157;
        _1167 = _1157;
        _1168 = _1157;
        _1169 = 0.0;
        _1170 = 0.0;
        _1171 = 0.0;
    }
    float _1468;
    float _1469;
    float _1470;
    float _1471;
    float _1472;
    float _1473;
    float _1474;
    float _1475;
    float _1476;
    float _1477;
    float _1478;
    float _1479;
    float _1480;
    float _1481;
    float _1482;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1199 = fma(_827, cbModelParam._m0[30u].z, fma(_823, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _819));
        float _1203 = fma(_827, cbModelParam._m0[31u].z, fma(_823, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _819));
        float _1207 = fma(_827, cbModelParam._m0[32u].z, fma(_823, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _819));
        float _1230 = _819 + _595;
        float _1231 = _823 + _596;
        float _1232 = _827 + _597;
        float _1242 = fma(_1232, cbModelParam._m0[30u].z, fma(_1231, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1230)) - _1199;
        float _1243 = fma(_1232, cbModelParam._m0[31u].z, fma(_1231, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1230)) - _1203;
        float _1244 = fma(_1232, cbModelParam._m0[32u].z, fma(_1231, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1230)) - _1207;
        float _1248 = inversesqrt(dot(vec3(_1242, _1243, _1244), vec3(_1242, _1243, _1244)));
        float _1261 = ((_1248 * _1242) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1199 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1262 = ((_1248 * _1243) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1203 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1263 = ((_1248 * _1244) / cbModelParam._m0[35u].z) + ((((((_1207 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1265 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1261, _1262, _1263), 0.0);
        vec4 _1272 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1261, _1262, _1263), 0.0);
        vec4 _1279 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1261, _1262, _1263), 0.0);
        vec4 _1286 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1261, _1262, _1263), 0.0);
        float _1298 = exp2((_1265.w + (-0.5)) * 20.0) * 2.0;
        float _1299 = _1298 * (_1265.x + (-0.5));
        float _1300 = _1298 * (_1265.y + (-0.5));
        float _1301 = _1298 * (_1265.z + (-0.5));
        float _1308 = exp2((_1272.w + (-0.5)) * 20.0) * 2.0;
        float _1309 = _1308 * (_1272.x + (-0.5));
        float _1310 = _1308 * (_1272.y + (-0.5));
        float _1311 = _1308 * (_1272.z + (-0.5));
        float _1318 = exp2((_1279.w + (-0.5)) * 20.0) * 2.0;
        float _1319 = _1318 * (_1279.x + (-0.5));
        float _1320 = _1318 * (_1279.y + (-0.5));
        float _1321 = _1318 * (_1279.z + (-0.5));
        float _1328 = exp2((_1286.w + (-0.5)) * 20.0) * 2.0;
        float _1329 = _1328 * (_1286.x + (-0.5));
        float _1330 = _1328 * (_1286.y + (-0.5));
        float _1331 = _1328 * (_1286.z + (-0.5));
        float _1332 = isnan(0.0) ? _1329 : (isnan(_1329) ? 0.0 : max(_1329, 0.0));
        float _1333 = isnan(0.0) ? _1330 : (isnan(_1330) ? 0.0 : max(_1330, 0.0));
        float _1334 = isnan(0.0) ? _1331 : (isnan(_1331) ? 0.0 : max(_1331, 0.0));
        float _1335 = _1299 * 0.5;
        float _1336 = _1309 * 0.5;
        float _1337 = _1319 * 0.5;
        float _1338 = dot(vec3(_1335, _1336, _1337), vec3(_1335, _1336, _1337));
        float _1343 = (_1338 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1338);
        float _1351 = (dot(vec3(_595, _596, _597), vec3(_1343 * _1335, _1343 * _1336, _1343 * _1337)) + 1.0) * 0.5;
        float _3863 = isnan(0.0) ? _1351 : (isnan(_1351) ? 0.0 : max(_1351, 0.0));
        float _1360 = sqrt(((_1336 * _1336) + (_1335 * _1335)) + (_1337 * _1337)) / (_1332 + 9.9999997473787516355514526367188e-06);
        float _3874 = isnan(0.0) ? _1360 : (isnan(_1360) ? 0.0 : max(_1360, 0.0));
        float _1361 = isnan(1.0) ? _3874 : (isnan(_3874) ? 1.0 : min(_3874, 1.0));
        float _1362 = _1361 * 2.0;
        float _1366 = (1.0 - _1361) / (_1361 + 1.0);
        float _3885 = isnan(0.0) ? _1366 : (isnan(_1366) ? 0.0 : max(_1366, 0.0));
        float _1367 = isnan(1.0) ? _3885 : (isnan(_3885) ? 1.0 : min(_3885, 1.0));
        float _1376 = ((((1.0 - _1367) * (_1362 + 2.0)) * exp2(log2(isnan(1.0) ? _3863 : (isnan(_3863) ? 1.0 : min(_3863, 1.0))) * (_1362 + 1.0))) + _1367) * _1332;
        float _1377 = _1300 * 0.5;
        float _1378 = _1310 * 0.5;
        float _1379 = _1320 * 0.5;
        float _1380 = dot(vec3(_1377, _1378, _1379), vec3(_1377, _1378, _1379));
        float _1385 = (_1380 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1380);
        float _1393 = (dot(vec3(_595, _596, _597), vec3(_1385 * _1377, _1385 * _1378, _1385 * _1379)) + 1.0) * 0.5;
        float _3896 = isnan(0.0) ? _1393 : (isnan(_1393) ? 0.0 : max(_1393, 0.0));
        float _1402 = sqrt(((_1378 * _1378) + (_1377 * _1377)) + (_1379 * _1379)) / (_1333 + 9.9999997473787516355514526367188e-06);
        float _3907 = isnan(0.0) ? _1402 : (isnan(_1402) ? 0.0 : max(_1402, 0.0));
        float _1403 = isnan(1.0) ? _3907 : (isnan(_3907) ? 1.0 : min(_3907, 1.0));
        float _1404 = _1403 * 2.0;
        float _1408 = (1.0 - _1403) / (_1403 + 1.0);
        float _3918 = isnan(0.0) ? _1408 : (isnan(_1408) ? 0.0 : max(_1408, 0.0));
        float _1409 = isnan(1.0) ? _3918 : (isnan(_3918) ? 1.0 : min(_3918, 1.0));
        float _1418 = ((((1.0 - _1409) * (_1404 + 2.0)) * exp2(log2(isnan(1.0) ? _3896 : (isnan(_3896) ? 1.0 : min(_3896, 1.0))) * (_1404 + 1.0))) + _1409) * _1333;
        float _1419 = _1301 * 0.5;
        float _1420 = _1311 * 0.5;
        float _1421 = _1321 * 0.5;
        float _1422 = dot(vec3(_1419, _1420, _1421), vec3(_1419, _1420, _1421));
        float _1427 = (_1422 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1422);
        float _1435 = (dot(vec3(_595, _596, _597), vec3(_1427 * _1419, _1427 * _1420, _1427 * _1421)) + 1.0) * 0.5;
        float _3929 = isnan(0.0) ? _1435 : (isnan(_1435) ? 0.0 : max(_1435, 0.0));
        float _1444 = sqrt(((_1420 * _1420) + (_1419 * _1419)) + (_1421 * _1421)) / (_1334 + 9.9999997473787516355514526367188e-06);
        float _3940 = isnan(0.0) ? _1444 : (isnan(_1444) ? 0.0 : max(_1444, 0.0));
        float _1445 = isnan(1.0) ? _3940 : (isnan(_3940) ? 1.0 : min(_3940, 1.0));
        float _1446 = _1445 * 2.0;
        float _1450 = (1.0 - _1445) / (_1445 + 1.0);
        float _3951 = isnan(0.0) ? _1450 : (isnan(_1450) ? 0.0 : max(_1450, 0.0));
        float _1451 = isnan(1.0) ? _3951 : (isnan(_3951) ? 1.0 : min(_3951, 1.0));
        float _1460 = ((((1.0 - _1451) * (_1446 + 2.0)) * exp2(log2(isnan(1.0) ? _3929 : (isnan(_3929) ? 1.0 : min(_3929, 1.0))) * (_1446 + 1.0))) + _1451) * _1334;
        _1468 = _1301;
        _1469 = _1300;
        _1470 = _1299;
        _1471 = _1311;
        _1472 = _1310;
        _1473 = _1309;
        _1474 = _1321;
        _1475 = _1320;
        _1476 = _1319;
        _1477 = _1334;
        _1478 = _1333;
        _1479 = _1332;
        _1480 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1376 : (isnan(_1376) ? 0.0 : max(_1376, 0.0)));
        _1481 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1418 : (isnan(_1418) ? 0.0 : max(_1418, 0.0)));
        _1482 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1460 : (isnan(_1460) ? 0.0 : max(_1460, 0.0)));
    }
    else
    {
        _1468 = _1157;
        _1469 = _1157;
        _1470 = _1157;
        _1471 = _1157;
        _1472 = _1157;
        _1473 = _1157;
        _1474 = _1157;
        _1475 = _1157;
        _1476 = _1157;
        _1477 = _1157;
        _1478 = _1157;
        _1479 = _1157;
        _1480 = 0.0;
        _1481 = 0.0;
        _1482 = 0.0;
    }
    float _1492 = (cbModelParam._m0[1u].x * (_1480 - _1169)) + _1169;
    float _1493 = (cbModelParam._m0[1u].x * (_1481 - _1170)) + _1170;
    float _1494 = (cbModelParam._m0[1u].x * (_1482 - _1171)) + _1171;
    float _1515 = fma(_1494, cbSceneParam._m0[89u].z, fma(_1493, cbSceneParam._m0[89u].y, _1492 * cbSceneParam._m0[89u].x));
    float _1518 = fma(_1494, cbSceneParam._m0[90u].z, fma(_1493, cbSceneParam._m0[90u].y, _1492 * cbSceneParam._m0[90u].x));
    float _1521 = fma(_1494, cbSceneParam._m0[91u].z, fma(_1493, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1492));
    float _1536 = _766 * 0.5;
    float _1537 = _767 * 0.5;
    float _1538 = _768 * 0.5;
    float _1539 = dot(vec4(_1536, _1537, _1538, 1.0), vec4(_1470, _1473, _1476, _1479));
    float _1542 = dot(vec4(_1536, _1537, _1538, 1.0), vec4(_1469, _1472, _1475, _1478));
    float _1545 = dot(vec4(_1536, _1537, _1538, 1.0), vec4(_1468, _1471, _1474, _1477));
    float _1579;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1552 = dot(vec4(_1536, _1537, _1538, 1.0), vec4(_1156, _1160, _1163, _1166));
        float _1556 = dot(vec4(_1536, _1537, _1538, 1.0), vec4(_1158, _1161, _1164, _1167));
        float _1560 = dot(vec4(_1536, _1537, _1538, 1.0), vec4(_1159, _1162, _1165, _1168));
        float _1567 = dot(vec4(cbModelParam._m0[39u]), vec4(_1536, _1537, _1538, 1.0));
        _1579 = dot(vec3(isnan(0.0) ? _1560 : (isnan(_1560) ? 0.0 : max(_1560, 0.0)), isnan(0.0) ? _1556 : (isnan(_1556) ? 0.0 : max(_1556, 0.0)), isnan(0.0) ? _1552 : (isnan(_1552) ? 0.0 : max(_1552, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1567) ? 0.0 : (isnan(0.0) ? _1567 : max(0.0, _1567))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1579 = 1.0;
    }
    float _1590;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1581 = dot(vec4(cbModelParam._m0[40u]), vec4(_1536, _1537, _1538, 1.0));
        _1590 = dot(vec3(isnan(0.0) ? _1539 : (isnan(_1539) ? 0.0 : max(_1539, 0.0)), isnan(0.0) ? _1542 : (isnan(_1542) ? 0.0 : max(_1542, 0.0)), isnan(0.0) ? _1545 : (isnan(_1545) ? 0.0 : max(_1545, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1581) ? 0.0 : (isnan(0.0) ? _1581 : max(0.0, _1581))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1590 = 1.0;
    }
    float _1594 = (_1590 * cbModelParam._m0[1u].x) + (_1579 * (1.0 - cbModelParam._m0[1u].x));
    float _1604 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _598);
    float _1605 = isnan(_1604) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1604 : min(cbModelParam._m0[25u].z, _1604));
    float _1686;
    float _1688;
    float _1690;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1653 = fma(_827, cbModelParam._m0[13u].z, fma(_823, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _819)) + cbModelParam._m0[13u].w;
        float _1657 = fma(_827, cbModelParam._m0[14u].z, fma(_823, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _819)) + cbModelParam._m0[14u].w;
        float _1661 = fma(_827, cbModelParam._m0[15u].z, fma(_823, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _819)) + cbModelParam._m0[15u].w;
        float _1664 = fma(_768, cbModelParam._m0[13u].z, fma(_767, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _766));
        float _1667 = fma(_768, cbModelParam._m0[14u].z, fma(_767, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _766));
        float _1670 = fma(_768, cbModelParam._m0[15u].z, fma(_767, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _766));
        float _1698;
        if (_1664 > 0.0)
        {
            _1698 = abs((1.0 - _1653) / _1664);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1664 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1653 + 1.0) / _1664);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1698 = frontier_phi_17_15_ladder;
        }
        float _1920;
        if (_1667 > 0.0)
        {
            _1920 = abs((1.0 - _1657) / _1667);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1667 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1657 + 1.0) / _1667);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1920 = frontier_phi_26_22_ladder;
        }
        float _2166;
        if (_1670 > 0.0)
        {
            _2166 = abs((1.0 - _1661) / _1670);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1670 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1661 + 1.0) / _1670);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2166 = frontier_phi_38_33_ladder;
        }
        float _2168 = isnan(_1920) ? _1698 : (isnan(_1698) ? _1920 : min(_1698, _1920));
        float _2169 = isnan(_2166) ? _2168 : (isnan(_2168) ? _2166 : min(_2168, _2166));
        float _2173 = (_2169 * _1664) + _1653;
        float _2174 = (_2169 * _1667) + _1657;
        float _2175 = (_2169 * _1670) + _1661;
        float _2176 = _2169 * 9.9999997473787516355514526367188e-05;
        float _2178 = (-1.0) - _2176;
        float _2180 = _2176 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2175 > _2180) || ((_2175 < _2178) || ((_2174 > _2180) || ((_2174 < _2178) || ((_2173 < _2178) || (_2173 > _2180))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2299 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2175, cbModelParam._m0[9u].z, fma(_2174, cbModelParam._m0[9u].y, _2173 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2175, cbModelParam._m0[10u].z, fma(_2174, cbModelParam._m0[10u].y, _2173 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2175, cbModelParam._m0[11u].z, fma(_2174, cbModelParam._m0[11u].y, _2173 * cbModelParam._m0[11u].x))), _1605);
            frontier_phi_16_38_ladder = _2299.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2299.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2299.x * cbModelParam._m0[1u].y;
        }
        _1686 = frontier_phi_16_38_ladder_2;
        _1688 = frontier_phi_16_38_ladder_1;
        _1690 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1674 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_766, _767, _768), _1605);
        _1686 = _1674.x * cbModelParam._m0[1u].y;
        _1688 = _1674.y * cbModelParam._m0[1u].y;
        _1690 = _1674.z * cbModelParam._m0[1u].y;
    }
    float _1694 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _598);
    float _1695 = isnan(_1694) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1694 : min(cbModelParam._m0[25u].w, _1694));
    float _1785;
    float _1787;
    float _1789;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1749 = fma(_827, cbModelParam._m0[21u].z, fma(_823, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _819)) + cbModelParam._m0[21u].w;
        float _1753 = fma(_827, cbModelParam._m0[22u].z, fma(_823, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _819)) + cbModelParam._m0[22u].w;
        float _1757 = fma(_827, cbModelParam._m0[23u].z, fma(_823, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _819)) + cbModelParam._m0[23u].w;
        float _1760 = fma(_768, cbModelParam._m0[21u].z, fma(_767, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _766));
        float _1763 = fma(_768, cbModelParam._m0[22u].z, fma(_767, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _766));
        float _1766 = fma(_768, cbModelParam._m0[23u].z, fma(_767, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _766));
        float _1925;
        if (_1760 > 0.0)
        {
            _1925 = abs((1.0 - _1749) / _1760);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1760 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1749 + 1.0) / _1760);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1925 = frontier_phi_28_24_ladder;
        }
        float _2193;
        if (_1763 > 0.0)
        {
            _2193 = abs((1.0 - _1753) / _1763);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1763 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1753 + 1.0) / _1763);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2193 = frontier_phi_40_35_ladder;
        }
        float _2398;
        if (_1766 > 0.0)
        {
            _2398 = abs((1.0 - _1757) / _1766);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1766 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1757 + 1.0) / _1766);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2398 = frontier_phi_49_46_ladder;
        }
        float _2400 = isnan(_2193) ? _1925 : (isnan(_1925) ? _2193 : min(_1925, _2193));
        float _2401 = isnan(_2398) ? _2400 : (isnan(_2400) ? _2398 : min(_2400, _2398));
        float _2405 = (_2401 * _1760) + _1749;
        float _2406 = (_2401 * _1763) + _1753;
        float _2407 = (_2401 * _1766) + _1757;
        float _2408 = _2401 * 9.9999997473787516355514526367188e-05;
        float _2409 = (-1.0) - _2408;
        float _2411 = _2408 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2407 > _2411) || ((_2407 < _2409) || ((_2406 > _2411) || ((_2406 < _2409) || ((_2405 < _2409) || (_2405 > _2411))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2606 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2407, cbModelParam._m0[17u].z, fma(_2406, cbModelParam._m0[17u].y, _2405 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2407, cbModelParam._m0[18u].z, fma(_2406, cbModelParam._m0[18u].y, _2405 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2407, cbModelParam._m0[19u].z, fma(_2406, cbModelParam._m0[19u].y, _2405 * cbModelParam._m0[19u].x))), _1695);
            frontier_phi_25_49_ladder = _2606.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2606.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2606.x * cbModelParam._m0[1u].z;
        }
        _1785 = frontier_phi_25_49_ladder_2;
        _1787 = frontier_phi_25_49_ladder_1;
        _1789 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1769 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_766, _767, _768), _1695);
        _1785 = _1769.x * cbModelParam._m0[1u].z;
        _1787 = _1769.y * cbModelParam._m0[1u].z;
        _1789 = _1769.z * cbModelParam._m0[1u].z;
    }
    float _1801 = ((((1.0 - _787) * ((_774 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_787 * _774)) * _758;
    float _1802 = _1801 * ((cbModelParam._m0[1u].w * (_1785 - _1686)) + _1686);
    float _1803 = _1801 * ((cbModelParam._m0[1u].w * (_1787 - _1688)) + _1688);
    float _1804 = _1801 * ((cbModelParam._m0[1u].w * (_1789 - _1690)) + _1690);
    float _1807 = fma(_1804, cbSceneParam._m0[89u].z, fma(_1803, cbSceneParam._m0[89u].y, _1802 * cbSceneParam._m0[89u].x));
    float _1810 = fma(_1804, cbSceneParam._m0[90u].z, fma(_1803, cbSceneParam._m0[90u].y, _1802 * cbSceneParam._m0[90u].x));
    float _1813 = fma(_1804, cbSceneParam._m0[91u].z, fma(_1803, cbSceneParam._m0[91u].y, _1802 * cbSceneParam._m0[91u].x));
    vec4 _1821 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_695, _696));
    float _1823 = _1821.w;
    float _1835 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1823);
    float _1836 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1823);
    float _1837 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1823);
    uvec4 _1841 = floatBitsToUint(cbInstanceData._m0[_236 + 5u]);
    uint _1843 = _1841.x * 14u;
    uint _1844 = _1843 + 13u;
    float _1851 = _758 + (-1.0);
    float _1856 = (cbLight._m0[_1844].x * _1851) + 1.0;
    float _1857 = (cbLight._m0[_1844].y * _1851) + 1.0;
    float _1858 = (cbLight._m0[_1844].z * _1851) + 1.0;
    float _1859 = (cbLight._m0[_1844].w * _1851) + 1.0;
    uint _1860 = _1843 + 5u;
    float _1866 = isnan(1.0) ? _1857 : (isnan(_1857) ? 1.0 : min(_1857, 1.0));
    uint _1870 = _1843 + 4u;
    float _1879 = isnan(1.0) ? _1856 : (isnan(_1856) ? 1.0 : min(_1856, 1.0));
    uint _1883 = _1843 | 1u;
    float _1894 = dot(vec3(cbLight._m0[_1843].xyz), vec3(_595, _596, _597));
    float _1897 = dot(vec3(cbLight._m0[_1883].xyz), vec3(_595, _596, _597));
    float _4087 = isnan(0.0) ? _1894 : (isnan(_1894) ? 0.0 : max(_1894, 0.0));
    float _4098 = isnan(0.0) ? _1897 : (isnan(_1897) ? 0.0 : max(_1897, 0.0));
    float _1902 = (isnan(1.0) ? _4087 : (isnan(_4087) ? 1.0 : min(_4087, 1.0))) * 0.3183098733425140380859375;
    float _1904 = (isnan(1.0) ? _4098 : (isnan(_4098) ? 1.0 : min(_4098, 1.0))) * 0.3183098733425140380859375;
    float _1911 = ((cbLight._m0[_1860].x * _1866) * _1904) + (((cbLight._m0[_1870].x * _1835) * _1879) * _1902);
    float _1912 = ((_1866 * cbLight._m0[_1860].y) * _1904) + (((cbLight._m0[_1870].y * _1836) * _1879) * _1902);
    float _1913 = ((_1866 * cbLight._m0[_1860].z) * _1904) + (((cbLight._m0[_1870].z * _1837) * _1879) * _1902);
    uvec4 _1917 = floatBitsToUint(cbLight._m0[_1843 + 12u]);
    bool _1919 = _1917.x == 0u;
    float _1930;
    float _1932;
    float _1934;
    if (_1919)
    {
        _1930 = _1911;
        _1932 = _1912;
        _1934 = _1913;
    }
    else
    {
        uint _1938 = _1843 + 6u;
        float _1954 = (dot(vec3(cbLight._m0[_1843 + 2u].xyz), vec3(_595, _596, _597)) * 0.5) + 0.5;
        float _1955 = _1954 * _1954;
        float _4109 = isnan(0.0) ? _1955 : (isnan(_1955) ? 0.0 : max(_1955, 0.0));
        float _1956 = isnan(1.0) ? _4109 : (isnan(_4109) ? 1.0 : min(_4109, 1.0));
        float _1957 = isnan(1.0) ? _1858 : (isnan(_1858) ? 1.0 : min(_1858, 1.0));
        _1930 = (((cbLight._m0[_1938].x * 0.3183098733425140380859375) * _1956) * _1957) + _1911;
        _1932 = (((cbLight._m0[_1938].y * 0.3183098733425140380859375) * _1956) * _1957) + _1912;
        _1934 = (((cbLight._m0[_1938].z * 0.3183098733425140380859375) * _1956) * _1957) + _1913;
    }
    bool _1937 = _1917.y == 0u;
    float _1975;
    float _1977;
    float _1979;
    if (_1937)
    {
        _1975 = _1930;
        _1977 = _1932;
        _1979 = _1934;
    }
    else
    {
        uint _2137 = _1843 + 7u;
        float _2153 = (dot(vec3(cbLight._m0[_1843 + 3u].xyz), vec3(_595, _596, _597)) * 0.5) + 0.5;
        float _2154 = _2153 * _2153;
        float _4125 = isnan(0.0) ? _2154 : (isnan(_2154) ? 0.0 : max(_2154, 0.0));
        float _2155 = isnan(1.0) ? _4125 : (isnan(_4125) ? 1.0 : min(_4125, 1.0));
        float _2156 = isnan(1.0) ? _1859 : (isnan(_1859) ? 1.0 : min(_1859, 1.0));
        _1975 = (((cbLight._m0[_2137].x * 0.3183098733425140380859375) * _2155) * _2156) + _1930;
        _1977 = (((cbLight._m0[_2137].y * 0.3183098733425140380859375) * _2155) * _2156) + _1932;
        _1979 = (((cbLight._m0[_2137].z * 0.3183098733425140380859375) * _2155) * _2156) + _1934;
    }
    uint _1982 = _1843 + 8u;
    float _1995 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1843].w)) * _598) * 0.949999988079071044921875);
    float _1996 = _1995 * _1995;
    float _1997 = cbLight._m0[_1843].x + _675;
    float _1998 = cbLight._m0[_1843].y + _676;
    float _1999 = cbLight._m0[_1843].z + _677;
    float _2003 = inversesqrt(dot(vec3(_1997, _1998, _1999), vec3(_1997, _1998, _1999)));
    float _2004 = _2003 * _1997;
    float _2005 = _2003 * _1998;
    float _2006 = _2003 * _1999;
    float _2007 = dot(vec3(_595, _596, _597), vec3(cbLight._m0[_1843].xyz));
    float _4141 = isnan(0.0) ? _2007 : (isnan(_2007) ? 0.0 : max(_2007, 0.0));
    float _2010 = isnan(1.0) ? _4141 : (isnan(_4141) ? 1.0 : min(_4141, 1.0));
    float _4152 = isnan(0.0) ? _759 : (isnan(_759) ? 0.0 : max(_759, 0.0));
    float _2011 = isnan(1.0) ? _4152 : (isnan(_4152) ? 1.0 : min(_4152, 1.0));
    float _2012 = dot(vec3(_595, _596, _597), vec3(_2004, _2005, _2006));
    float _4163 = isnan(0.0) ? _2012 : (isnan(_2012) ? 0.0 : max(_2012, 0.0));
    float _2015 = isnan(1.0) ? _4163 : (isnan(_4163) ? 1.0 : min(_4163, 1.0));
    float _2016 = dot(vec3(cbLight._m0[_1843].xyz), vec3(_2004, _2005, _2006));
    float _4174 = isnan(0.0) ? _2016 : (isnan(_2016) ? 0.0 : max(_2016, 0.0));
    float _2020 = _1996 * _1996;
    float _2024 = ((_2015 * _2015) * (_2020 + (-1.0))) + 1.0;
    float _2035 = (exp2(log2(1.0 - (isnan(1.0) ? _4174 : (isnan(_4174) ? 1.0 : min(_4174, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2036 = 1.0 - _1996;
    float _2047 = (0.5 / (((_2011 * ((_2010 * _2036) + _1996)) + 9.9999999392252902907785028219223e-09) + (((_2011 * _2036) + _1996) * _2010))) * _2010;
    float _4185 = isnan(0.0) ? _2047 : (isnan(_2047) ? 0.0 : max(_2047, 0.0));
    float _2049 = (isnan(1.0) ? _4185 : (isnan(_4185) ? 1.0 : min(_4185, 1.0))) * (_2020 / ((_2024 * _2024) * 3.141590118408203125));
    uint _2063 = _1843 + 9u;
    float _2074 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1883].w)) * _598) * 0.949999988079071044921875);
    float _2075 = _2074 * _2074;
    float _2076 = cbLight._m0[_1883].x + _675;
    float _2077 = cbLight._m0[_1883].y + _676;
    float _2078 = cbLight._m0[_1883].z + _677;
    float _2082 = inversesqrt(dot(vec3(_2076, _2077, _2078), vec3(_2076, _2077, _2078)));
    float _2083 = _2082 * _2076;
    float _2084 = _2082 * _2077;
    float _2085 = _2082 * _2078;
    float _2086 = dot(vec3(_595, _596, _597), vec3(cbLight._m0[_1883].xyz));
    float _4196 = isnan(0.0) ? _2086 : (isnan(_2086) ? 0.0 : max(_2086, 0.0));
    float _2089 = isnan(1.0) ? _4196 : (isnan(_4196) ? 1.0 : min(_4196, 1.0));
    float _2090 = dot(vec3(_595, _596, _597), vec3(_2083, _2084, _2085));
    float _4207 = isnan(0.0) ? _2090 : (isnan(_2090) ? 0.0 : max(_2090, 0.0));
    float _2093 = isnan(1.0) ? _4207 : (isnan(_4207) ? 1.0 : min(_4207, 1.0));
    float _2094 = dot(vec3(cbLight._m0[_1883].xyz), vec3(_2083, _2084, _2085));
    float _4218 = isnan(0.0) ? _2094 : (isnan(_2094) ? 0.0 : max(_2094, 0.0));
    float _2098 = _2075 * _2075;
    float _2102 = ((_2093 * _2093) * (_2098 + (-1.0))) + 1.0;
    float _2111 = (exp2(log2(1.0 - (isnan(1.0) ? _4218 : (isnan(_4218) ? 1.0 : min(_4218, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2112 = 1.0 - _2075;
    float _2122 = (0.5 / (((_2011 * ((_2089 * _2112) + _2075)) + 9.9999999392252902907785028219223e-09) + (((_2011 * _2112) + _2075) * _2089))) * _2089;
    float _4229 = isnan(0.0) ? _2122 : (isnan(_2122) ? 0.0 : max(_2122, 0.0));
    float _2124 = (isnan(1.0) ? _4229 : (isnan(_4229) ? 1.0 : min(_4229, 1.0))) * (_2098 / ((_2102 * _2102) * 3.141590118408203125));
    float _2134 = (((_2111 * cbLight._m0[_2063].x) * _2124) * _1866) + ((((cbLight._m0[_1982].x * _1835) * _2035) * _2049) * _1879);
    float _2135 = (((_2111 * cbLight._m0[_2063].y) * _2124) * _1866) + ((((cbLight._m0[_1982].y * _1836) * _2035) * _2049) * _1879);
    float _2136 = (((_2111 * cbLight._m0[_2063].z) * _2124) * _1866) + ((((cbLight._m0[_1982].z * _1837) * _2035) * _2049) * _1879);
    float _2198;
    float _2200;
    float _2202;
    if (_1919)
    {
        _2198 = _2134;
        _2200 = _2135;
        _2202 = _2136;
    }
    else
    {
        uint _2204 = _1843 + 2u;
        uint _2208 = _1843 + 10u;
        float _2222 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2204].w)) * _598) * 0.949999988079071044921875);
        float _2223 = _2222 * _2222;
        float _2224 = cbLight._m0[_2204].x + _675;
        float _2225 = cbLight._m0[_2204].y + _676;
        float _2226 = cbLight._m0[_2204].z + _677;
        float _2230 = inversesqrt(dot(vec3(_2224, _2225, _2226), vec3(_2224, _2225, _2226)));
        float _2231 = _2230 * _2224;
        float _2232 = _2230 * _2225;
        float _2233 = _2230 * _2226;
        float _2234 = dot(vec3(_595, _596, _597), vec3(cbLight._m0[_2204].xyz));
        float _4240 = isnan(0.0) ? _2234 : (isnan(_2234) ? 0.0 : max(_2234, 0.0));
        float _2237 = isnan(1.0) ? _4240 : (isnan(_4240) ? 1.0 : min(_4240, 1.0));
        float _2238 = dot(vec3(_595, _596, _597), vec3(_2231, _2232, _2233));
        float _4251 = isnan(0.0) ? _2238 : (isnan(_2238) ? 0.0 : max(_2238, 0.0));
        float _2241 = isnan(1.0) ? _4251 : (isnan(_4251) ? 1.0 : min(_4251, 1.0));
        float _2242 = dot(vec3(cbLight._m0[_2204].xyz), vec3(_2231, _2232, _2233));
        float _4262 = isnan(0.0) ? _2242 : (isnan(_2242) ? 0.0 : max(_2242, 0.0));
        float _2246 = _2223 * _2223;
        float _2250 = ((_2241 * _2241) * (_2246 + (-1.0))) + 1.0;
        float _2259 = (exp2(log2(1.0 - (isnan(1.0) ? _4262 : (isnan(_4262) ? 1.0 : min(_4262, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2260 = 1.0 - _2223;
        float _2270 = (0.5 / (((_2011 * ((_2237 * _2260) + _2223)) + 9.9999999392252902907785028219223e-09) + (((_2011 * _2260) + _2223) * _2237))) * _2237;
        float _4273 = isnan(0.0) ? _2270 : (isnan(_2270) ? 0.0 : max(_2270, 0.0));
        float _2272 = (isnan(1.0) ? _4273 : (isnan(_4273) ? 1.0 : min(_4273, 1.0))) * (_2246 / ((_2250 * _2250) * 3.141590118408203125));
        float _2273 = isnan(1.0) ? _1858 : (isnan(_1858) ? 1.0 : min(_1858, 1.0));
        _2198 = (((_2259 * cbLight._m0[_2208].x) * _2272) * _2273) + _2134;
        _2200 = (((_2259 * cbLight._m0[_2208].y) * _2272) * _2273) + _2135;
        _2202 = (((_2259 * cbLight._m0[_2208].z) * _2272) * _2273) + _2136;
    }
    float _2308;
    float _2310;
    float _2312;
    if (_1937)
    {
        _2308 = _2198;
        _2310 = _2200;
        _2312 = _2202;
    }
    else
    {
        uint _2319 = _1843 + 3u;
        uint _2323 = _1843 + 11u;
        float _2337 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2319].w)) * _598) * 0.949999988079071044921875);
        float _2338 = _2337 * _2337;
        float _2339 = cbLight._m0[_2319].x + _675;
        float _2340 = cbLight._m0[_2319].y + _676;
        float _2341 = cbLight._m0[_2319].z + _677;
        float _2345 = inversesqrt(dot(vec3(_2339, _2340, _2341), vec3(_2339, _2340, _2341)));
        float _2346 = _2345 * _2339;
        float _2347 = _2345 * _2340;
        float _2348 = _2345 * _2341;
        float _2349 = dot(vec3(_595, _596, _597), vec3(cbLight._m0[_2319].xyz));
        float _4289 = isnan(0.0) ? _2349 : (isnan(_2349) ? 0.0 : max(_2349, 0.0));
        float _2352 = isnan(1.0) ? _4289 : (isnan(_4289) ? 1.0 : min(_4289, 1.0));
        float _2353 = dot(vec3(_595, _596, _597), vec3(_2346, _2347, _2348));
        float _4300 = isnan(0.0) ? _2353 : (isnan(_2353) ? 0.0 : max(_2353, 0.0));
        float _2356 = isnan(1.0) ? _4300 : (isnan(_4300) ? 1.0 : min(_4300, 1.0));
        float _2357 = dot(vec3(cbLight._m0[_2319].xyz), vec3(_2346, _2347, _2348));
        float _4311 = isnan(0.0) ? _2357 : (isnan(_2357) ? 0.0 : max(_2357, 0.0));
        float _2361 = _2338 * _2338;
        float _2365 = ((_2356 * _2356) * (_2361 + (-1.0))) + 1.0;
        float _2374 = (exp2(log2(1.0 - (isnan(1.0) ? _4311 : (isnan(_4311) ? 1.0 : min(_4311, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2375 = 1.0 - _2338;
        float _2385 = (0.5 / (((_2011 * ((_2352 * _2375) + _2338)) + 9.9999999392252902907785028219223e-09) + (((_2011 * _2375) + _2338) * _2352))) * _2352;
        float _4322 = isnan(0.0) ? _2385 : (isnan(_2385) ? 0.0 : max(_2385, 0.0));
        float _2387 = (isnan(1.0) ? _4322 : (isnan(_4322) ? 1.0 : min(_4322, 1.0))) * (_2361 / ((_2365 * _2365) * 3.141590118408203125));
        float _2388 = isnan(1.0) ? _1859 : (isnan(_1859) ? 1.0 : min(_1859, 1.0));
        _2308 = (((_2374 * cbLight._m0[_2323].x) * _2387) * _2388) + _2198;
        _2310 = (((_2374 * cbLight._m0[_2323].y) * _2387) * _2388) + _2200;
        _2312 = (((_2374 * cbLight._m0[_2323].z) * _2387) * _2388) + _2202;
    }
    float _2523;
    float _2525;
    float _2527;
    float _2529;
    float _2531;
    float _2533;
    if (_1841.y == 0u)
    {
        float _2463 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2464 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2463;
        float _2465 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2463;
        float _2466 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2463;
        uvec4 _2478 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2479 = _2478.x;
        uint _2490 = uint((float(_2478.y) * floor(float(uint(cbSceneParam._m0[85u].y * _696) / _2479))) + floor(float(uint(cbSceneParam._m0[85u].x * _695) / _2479)));
        float _2500 = (log2(_2466 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2501 = isnan(0.0) ? _2500 : (isnan(_2500) ? 0.0 : max(_2500, 0.0));
        uint _2504 = uint(isnan(14.0) ? _2501 : (isnan(_2501) ? 14.0 : min(_2501, 14.0)));
        uvec4 _2509 = texelFetch(g_lightClusterGridBuffer, int(((_2504 << 2u) + (_2490 << 6u)) >> 2u));
        uint _2510 = _2509.x;
        uint _2511 = _2478.z;
        float _2611;
        float _2613;
        float _2615;
        float _2617;
        float _2619;
        float _2621;
        if (((((1u << ((_2511 >> 4u) & 15u)) + 4294967295u) & _2510) == 0u) || ((_2511 & 240u) == 0u))
        {
            _2611 = 0.0;
            _2613 = 0.0;
            _2615 = 0.0;
            _2617 = 0.0;
            _2619 = 0.0;
            _2621 = 0.0;
        }
        else
        {
            float _2612;
            float _2614;
            float _2616;
            float _2618;
            float _2620;
            float _2622;
            float _2764 = 0.0;
            float _2765 = 0.0;
            float _2766 = 0.0;
            float _2767 = 0.0;
            float _2768 = 0.0;
            float _2769 = 0.0;
            uint _2770 = 0u;
            uint _2779;
            bool _2780;
            for (;;)
            {
                _2779 = texelFetch(g_lightClassification, int((((_2504 << 5u) + (_2490 << 9u)) + (_2770 << 2u)) >> 2u)).x;
                _2780 = _2779 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2780)
                {
                    frontier_phi_66_pred = _2764;
                    frontier_phi_66_pred_1 = _2769;
                    frontier_phi_66_pred_2 = _2768;
                    frontier_phi_66_pred_3 = _2767;
                    frontier_phi_66_pred_4 = _2766;
                    frontier_phi_66_pred_5 = _2765;
                }
                else
                {
                    float _2909;
                    float _2910;
                    float _2911;
                    float _2912;
                    float _2913;
                    float _2914;
                    uint _2915;
                    _2909 = _2764;
                    _2910 = _2765;
                    _2911 = _2766;
                    _2912 = _2767;
                    _2913 = _2768;
                    _2914 = _2769;
                    _2915 = _2779;
                    float _2836;
                    float _2837;
                    float _2838;
                    float _2839;
                    float _2840;
                    float _2841;
                    for (;;)
                    {
                        uint _2919 = uint(findLSB(_2915)) + (_2770 << 5u);
                        uint _2916 = (_2915 + 4294967295u) & _2915;
                        uint _2921 = _2919 * 48u;
                        vec4 _2935 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2921)).x, texelFetch(g_PointLightRenderingBuffer, int(_2921 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2921 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2921 + 3u)).x));
                        uint _2941 = (_2919 * 48u) + 4u;
                        vec4 _2954 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2941)).x, texelFetch(g_PointLightRenderingBuffer, int(_2941 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2941 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2941 + 3u)).x));
                        uint _2960 = (_2919 * 48u) + 8u;
                        vec3 _2971 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2960)).x, texelFetch(g_PointLightRenderingBuffer, int(_2960 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2960 + 2u)).x));
                        float _2975 = _2935.x - _2464;
                        float _2976 = _2935.y - _2465;
                        float _2977 = _2935.z - _2466;
                        float _2978 = dot(vec3(_2975, _2976, _2977), vec3(_2975, _2976, _2977));
                        float _2981 = inversesqrt(_2978);
                        float _2982 = _2981 * _2975;
                        float _2983 = _2981 * _2976;
                        float _2984 = _2981 * _2977;
                        float _2985 = dot(vec3(_714, _717, _720), vec3(_2982, _2983, _2984));
                        float _2990 = 1.0 - (_2978 * _2935.w);
                        float _4348 = isnan(0.0) ? _2990 : (isnan(_2990) ? 0.0 : max(_2990, 0.0));
                        float _2991 = isnan(1.0) ? _4348 : (isnan(_4348) ? 1.0 : min(_4348, 1.0));
                        float _2992 = sqrt(_2978) * _2954.w;
                        float _2995 = 1.39999997615814208984375 / (_2992 + 1.39999997615814208984375);
                        float _2996 = _2995 * _2995;
                        float _2999 = ((1.0 - _2996) * _2985) + _2996;
                        float _3002 = _2992 * _2992;
                        float _3006 = ((isnan(0.0) ? _2999 : (isnan(_2999) ? 0.0 : max(_2999, 0.0))) * _2991) / ((_3002 * 0.699999988079071044921875) + 1.0);
                        float _3010 = (-0.0) - _2464;
                        float _3011 = (-0.0) - _2465;
                        float _3012 = (-0.0) - _2466;
                        float _3016 = inversesqrt(dot(vec3(_3010, _3011, _3012), vec3(_3010, _3011, _3012)));
                        float _3017 = _3016 * _3010;
                        float _3018 = _3016 * _3011;
                        float _3019 = _3016 * _3012;
                        float _3027 = exp2(log2(1.0 / ((_3002 * 3.5) + 5.0)) * 0.25);
                        float _3028 = 1.0 - _774;
                        float _3035 = sqrt(1.0 - ((1.0 - (_3028 * _3028)) * (1.0 - (_3027 * _3027))));
                        float _3036 = _3035 * _3035;
                        float _3037 = _3036 * _3036;
                        float _3038 = _3017 + _2982;
                        float _3039 = _3018 + _2983;
                        float _3040 = _3019 + _2984;
                        float _3044 = inversesqrt(dot(vec3(_3038, _3039, _3040), vec3(_3038, _3039, _3040)));
                        float _3048 = dot(vec3(_714, _717, _720), vec3(_3017, _3018, _3019));
                        float _4364 = isnan(0.0) ? _3048 : (isnan(_3048) ? 0.0 : max(_3048, 0.0));
                        float _3051 = isnan(1.0) ? _4364 : (isnan(_4364) ? 1.0 : min(_4364, 1.0));
                        float _3052 = dot(vec3(_714, _717, _720), vec3(_3044 * _3038, _3044 * _3039, _3044 * _3040));
                        float _4375 = isnan(0.0) ? _3052 : (isnan(_3052) ? 0.0 : max(_3052, 0.0));
                        float _3055 = isnan(1.0) ? _4375 : (isnan(_4375) ? 1.0 : min(_4375, 1.0));
                        float _3059 = ((_3055 * _3055) * (_3037 + (-1.0))) + 1.0;
                        float _3060 = _2995 * _3036;
                        float _3061 = _3060 * _3060;
                        float _3064 = ((1.0 - _3061) * _2985) + _3061;
                        float _4386 = isnan(0.0) ? _3064 : (isnan(_3064) ? 0.0 : max(_3064, 0.0));
                        float _3065 = isnan(1.0) ? _4386 : (isnan(_4386) ? 1.0 : min(_4386, 1.0));
                        float _3066 = 1.0 - _3036;
                        float _3076 = (0.5 / (((_3065 * ((_3051 * _3066) + _3036)) + 9.9999999392252902907785028219223e-09) + (((_3065 * _3066) + _3036) * _3051))) * _3065;
                        float _4397 = isnan(0.0) ? _3076 : (isnan(_3076) ? 0.0 : max(_3076, 0.0));
                        float _3087 = (((_3037 * 3.1415927410125732421875) * (isnan(1.0) ? _4397 : (isnan(_4397) ? 1.0 : min(_4397, 1.0)))) / ((_3059 * _3059) * ((_3002 * 2.1991131305694580078125) + 3.141590118408203125))) * _2991;
                        _2839 = (_3006 * _2954.x) + _2912;
                        _2840 = (_3006 * _2954.y) + _2913;
                        _2841 = (_3006 * _2954.z) + _2914;
                        _2836 = (_3087 * _2971.x) + _2909;
                        _2837 = (_3087 * _2971.y) + _2910;
                        _2838 = (_3087 * _2971.z) + _2911;
                        if (_2916 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2909 = _2836;
                            _2910 = _2837;
                            _2911 = _2838;
                            _2912 = _2839;
                            _2913 = _2840;
                            _2914 = _2841;
                            _2915 = _2916;
                        }
                    }
                    frontier_phi_66_pred = _2836;
                    frontier_phi_66_pred_1 = _2841;
                    frontier_phi_66_pred_2 = _2840;
                    frontier_phi_66_pred_3 = _2839;
                    frontier_phi_66_pred_4 = _2838;
                    frontier_phi_66_pred_5 = _2837;
                }
                _2612 = frontier_phi_66_pred;
                _2622 = frontier_phi_66_pred_1;
                _2620 = frontier_phi_66_pred_2;
                _2618 = frontier_phi_66_pred_3;
                _2616 = frontier_phi_66_pred_4;
                _2614 = frontier_phi_66_pred_5;
                uint _2771 = _2770 + 1u;
                if (_2771 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2764 = _2612;
                    _2765 = _2614;
                    _2766 = _2616;
                    _2767 = _2618;
                    _2768 = _2620;
                    _2769 = _2622;
                    _2770 = _2771;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2611 = _2612;
            _2613 = _2614;
            _2615 = _2616;
            _2617 = _2618;
            _2619 = _2620;
            _2621 = _2622;
        }
        uvec4 _2625 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2626 = _2625.z;
        uint _2628 = (_2626 >> 8u) & 15u;
        float _2732;
        float _2734;
        float _2736;
        float _2738;
        float _2740;
        float _2742;
        if (((4294967295u << _2628) & _2510) == 0u)
        {
            _2732 = _2611;
            _2734 = _2613;
            _2736 = _2615;
            _2738 = _2617;
            _2740 = _2619;
            _2742 = _2621;
        }
        else
        {
            float _2757 = inversesqrt(dot(vec3(_2464, _2465, _2466), vec3(_2464, _2465, _2466)));
            float _2758 = _2757 * _2464;
            float _2759 = _2757 * _2465;
            float _2760 = _2757 * _2466;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2628 < ((_2626 >> 12u) & 15u))
            {
                float _2733;
                float _2735;
                float _2737;
                float _2739;
                float _2741;
                float _2743;
                float _2892 = _2611;
                float _2893 = _2613;
                float _2894 = _2615;
                float _2895 = _2617;
                float _2896 = _2619;
                float _2897 = _2621;
                uint _2898 = _2628;
                uint _2907;
                bool _2908;
                for (;;)
                {
                    _2907 = texelFetch(g_lightClassification, int((((_2504 << 5u) + (_2490 << 9u)) + (_2898 << 2u)) >> 2u)).x;
                    _2908 = _2907 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_2908)
                    {
                        frontier_phi_77_pred = _2897;
                        frontier_phi_77_pred_1 = _2896;
                        frontier_phi_77_pred_2 = _2895;
                        frontier_phi_77_pred_3 = _2894;
                        frontier_phi_77_pred_4 = _2893;
                        frontier_phi_77_pred_5 = _2892;
                    }
                    else
                    {
                        float _3101;
                        float _3102;
                        float _3103;
                        float _3104;
                        float _3105;
                        float _3106;
                        float _3395;
                        float _3396;
                        float _3397;
                        float _3398;
                        float _3399;
                        float _3400;
                        float _3114 = _2892;
                        float _3115 = _2893;
                        float _3116 = _2894;
                        float _3117 = _2895;
                        float _3118 = _2896;
                        float _3119 = _2897;
                        uint _3120 = _2907;
                        uint _3121;
                        vec4 _3146;
                        float _3147;
                        vec4 _3162;
                        vec3 _3174;
                        vec4 _3189;
                        vec4 _3205;
                        float _3251;
                        bool _3252;
                        for (;;)
                        {
                            uint _3131 = ((_2898 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3120));
                            _3121 = (_3120 + 4294967295u) & _3120;
                            uint _3133 = _3131 * 40u;
                            _3146 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3133)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3133 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3133 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3133 + 3u)).x));
                            _3147 = _3146.w;
                            uint _3149 = (_3131 * 40u) + 4u;
                            _3162 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3149)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3149 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3149 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3149 + 3u)).x));
                            uint _3164 = (_3131 * 40u) + 8u;
                            _3174 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3164)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3164 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3164 + 2u)).x));
                            uint _3176 = (_3131 * 40u) + 16u;
                            _3189 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3176)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3176 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3176 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3176 + 3u)).x));
                            uint _3192 = (_3131 * 40u) + 20u;
                            _3205 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3192)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3192 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3192 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3192 + 3u)).x));
                            uint _3207 = (_3131 * 40u) + 24u;
                            vec4 _3220 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3207)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3207 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3207 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3207 + 3u)).x));
                            uint _3226 = (_3131 * 40u) + 28u;
                            vec4 _3239 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3226)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3226 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3226 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3226 + 3u)).x));
                            _3251 = fma(_2466, _3239.z, fma(_2465, _3239.y, _3239.x * _2464)) + _3239.w;
                            _3252 = !((fma(_2466, _3220.z, fma(_2465, _3220.y, _3220.x * _2464)) + _3220.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3252)
                            {
                                float _3279 = _3146.x - _2464;
                                float _3280 = _3146.y - _2465;
                                float _3281 = _3146.z - _2466;
                                float _3282 = dot(vec3(_3279, _3280, _3281), vec3(_3279, _3280, _3281));
                                float _3285 = inversesqrt(_3282);
                                float _3286 = _3285 * _3279;
                                float _3287 = _3285 * _3280;
                                float _3288 = _3285 * _3281;
                                float _3292 = 1.0 - (_3282 / (_3147 * _3147));
                                float _4408 = isnan(0.0) ? _3292 : (isnan(_3292) ? 0.0 : max(_3292, 0.0));
                                float _3293 = isnan(1.0) ? _4408 : (isnan(_4408) ? 1.0 : min(_4408, 1.0));
                                float _3297 = sqrt(_3282) * _3162.w;
                                float _3299 = 1.39999997615814208984375 / (_3297 + 1.39999997615814208984375);
                                float _3300 = _3299 * _3299;
                                float _3303 = ((1.0 - _3300) * dot(vec3(_3286, _3287, _3288), vec3(_714, _717, _720))) + _3300;
                                float _3306 = _3297 * _3297;
                                float _3310 = (fma(_2466, _3189.z, fma(_2465, _3189.y, _3189.x * _2464)) + _3189.w) / _3251;
                                float _3311 = (fma(_2466, _3205.z, fma(_2465, _3205.y, _3205.x * _2464)) + _3205.w) / _3251;
                                float _3315 = 1.0 - dot(vec2(_3310, _3311), vec2(_3310, _3311));
                                float _4424 = isnan(0.0) ? _3315 : (isnan(_3315) ? 0.0 : max(_3315, 0.0));
                                float _3316 = isnan(1.0) ? _4424 : (isnan(_4424) ? 1.0 : min(_4424, 1.0));
                                float _3317 = _3316 * (((isnan(0.0) ? _3303 : (isnan(_3303) ? 0.0 : max(_3303, 0.0))) * _3293) / ((_3306 * 0.699999988079071044921875) + 1.0));
                                float _3329 = exp2(log2(1.0 / ((_3306 * 3.5) + 5.0)) * 0.25);
                                float _3330 = 1.0 - _774;
                                float _3337 = sqrt(1.0 - ((1.0 - (_3330 * _3330)) * (1.0 - (_3329 * _3329))));
                                float _3338 = _3337 * _3337;
                                float _3339 = _3338 * _3338;
                                float _3340 = _3286 - _2758;
                                float _3341 = _3287 - _2759;
                                float _3342 = _3288 - _2760;
                                float _3346 = inversesqrt(dot(vec3(_3340, _3341, _3342), vec3(_3340, _3341, _3342)));
                                float _3350 = dot(vec3(_714, _717, _720), vec3((-0.0) - _2758, (-0.0) - _2759, (-0.0) - _2760));
                                float _4435 = isnan(0.0) ? _3350 : (isnan(_3350) ? 0.0 : max(_3350, 0.0));
                                float _3353 = isnan(1.0) ? _4435 : (isnan(_4435) ? 1.0 : min(_4435, 1.0));
                                float _3354 = dot(vec3(_714, _717, _720), vec3(_3346 * _3340, _3346 * _3341, _3346 * _3342));
                                float _4446 = isnan(0.0) ? _3354 : (isnan(_3354) ? 0.0 : max(_3354, 0.0));
                                float _3357 = isnan(1.0) ? _4446 : (isnan(_4446) ? 1.0 : min(_4446, 1.0));
                                float _3361 = ((_3357 * _3357) * (_3339 + (-1.0))) + 1.0;
                                float _3362 = _3299 * _3338;
                                float _3363 = _3362 * _3362;
                                float _3369 = ((1.0 - _3363) * dot(vec3(_714, _717, _720), vec3(_3286, _3287, _3288))) + _3363;
                                float _4457 = isnan(0.0) ? _3369 : (isnan(_3369) ? 0.0 : max(_3369, 0.0));
                                float _3370 = isnan(1.0) ? _4457 : (isnan(_4457) ? 1.0 : min(_4457, 1.0));
                                float _3371 = 1.0 - _3338;
                                float _3381 = (0.5 / (((_3370 * ((_3353 * _3371) + _3338)) + 9.9999999392252902907785028219223e-09) + (((_3370 * _3371) + _3338) * _3353))) * _3370;
                                float _4468 = isnan(0.0) ? _3381 : (isnan(_3381) ? 0.0 : max(_3381, 0.0));
                                float _3391 = (_3316 * _3293) * (((_3339 * 3.1415927410125732421875) * (isnan(1.0) ? _4468 : (isnan(_4468) ? 1.0 : min(_4468, 1.0)))) / ((_3361 * _3361) * ((_3306 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3317 * _3162.y;
                                frontier_phi_83_pred_1 = _3317 * _3162.x;
                                frontier_phi_83_pred_2 = _3391 * _3174.z;
                                frontier_phi_83_pred_3 = _3391 * _3174.y;
                                frontier_phi_83_pred_4 = _3391 * _3174.x;
                                frontier_phi_83_pred_5 = _3317 * _3162.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3399 = frontier_phi_83_pred;
                            _3398 = frontier_phi_83_pred_1;
                            _3397 = frontier_phi_83_pred_2;
                            _3396 = frontier_phi_83_pred_3;
                            _3395 = frontier_phi_83_pred_4;
                            _3400 = frontier_phi_83_pred_5;
                            _3104 = _3398 + _3117;
                            _3105 = _3399 + _3118;
                            _3106 = _3400 + _3119;
                            _3101 = _3395 + _3114;
                            _3102 = _3396 + _3115;
                            _3103 = _3397 + _3116;
                            if (_3121 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3114 = _3101;
                                _3115 = _3102;
                                _3116 = _3103;
                                _3117 = _3104;
                                _3118 = _3105;
                                _3119 = _3106;
                                _3120 = _3121;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3106;
                        frontier_phi_77_pred_1 = _3105;
                        frontier_phi_77_pred_2 = _3104;
                        frontier_phi_77_pred_3 = _3103;
                        frontier_phi_77_pred_4 = _3102;
                        frontier_phi_77_pred_5 = _3101;
                    }
                    _2743 = frontier_phi_77_pred;
                    _2741 = frontier_phi_77_pred_1;
                    _2739 = frontier_phi_77_pred_2;
                    _2737 = frontier_phi_77_pred_3;
                    _2735 = frontier_phi_77_pred_4;
                    _2733 = frontier_phi_77_pred_5;
                    uint _2899 = _2898 + 1u;
                    if (_2899 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2892 = _2733;
                        _2893 = _2735;
                        _2894 = _2737;
                        _2895 = _2739;
                        _2896 = _2741;
                        _2897 = _2743;
                        _2898 = _2899;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2737;
                frontier_phi_58_59_ladder_1 = _2743;
                frontier_phi_58_59_ladder_2 = _2741;
                frontier_phi_58_59_ladder_3 = _2739;
                frontier_phi_58_59_ladder_4 = _2735;
                frontier_phi_58_59_ladder_5 = _2733;
            }
            else
            {
                frontier_phi_58_59_ladder = _2615;
                frontier_phi_58_59_ladder_1 = _2621;
                frontier_phi_58_59_ladder_2 = _2619;
                frontier_phi_58_59_ladder_3 = _2617;
                frontier_phi_58_59_ladder_4 = _2613;
                frontier_phi_58_59_ladder_5 = _2611;
            }
            _2732 = frontier_phi_58_59_ladder_5;
            _2734 = frontier_phi_58_59_ladder_4;
            _2736 = frontier_phi_58_59_ladder;
            _2738 = frontier_phi_58_59_ladder_3;
            _2740 = frontier_phi_58_59_ladder_2;
            _2742 = frontier_phi_58_59_ladder_1;
        }
        float _2747 = isnan(1.0) ? _758 : (isnan(_758) ? 1.0 : min(_758, 1.0));
        _2523 = (_2747 * _2738) + _1975;
        _2525 = (_2747 * _2740) + _1977;
        _2527 = (_2747 * _2742) + _1979;
        _2529 = ((_2732 * 0.039999999105930328369140625) * _2747) + _2308;
        _2531 = ((_2734 * 0.039999999105930328369140625) * _2747) + _2310;
        _2533 = ((_2736 * 0.039999999105930328369140625) * _2747) + _2312;
    }
    else
    {
        _2523 = _1975;
        _2525 = _1977;
        _2527 = _1979;
        _2529 = _2308;
        _2531 = _2310;
        _2533 = _2312;
    }
    float _4484 = isnan(0.0) ? _743 : (isnan(_743) ? 0.0 : max(_743, 0.0));
    float _4495 = isnan(0.0) ? _744 : (isnan(_744) ? 0.0 : max(_744, 0.0));
    float _4506 = isnan(0.0) ? _745 : (isnan(_745) ? 0.0 : max(_745, 0.0));
    float _2550 = ((isnan(1.0) ? _4484 : (isnan(_4484) ? 1.0 : min(_4484, 1.0))) * (_2523 + ((isnan(0.0) ? _1515 : (isnan(_1515) ? 0.0 : max(_1515, 0.0))) * _758))) + ((_2529 + ((isnan(0.0) ? _1807 : (isnan(_1807) ? 0.0 : max(_1807, 0.0))) * _1594)) * cbPerFrame._m0[3u].x);
    float _2551 = ((isnan(1.0) ? _4495 : (isnan(_4495) ? 1.0 : min(_4495, 1.0))) * (_2525 + ((isnan(0.0) ? _1518 : (isnan(_1518) ? 0.0 : max(_1518, 0.0))) * _758))) + ((_2531 + ((isnan(0.0) ? _1810 : (isnan(_1810) ? 0.0 : max(_1810, 0.0))) * _1594)) * cbPerFrame._m0[3u].x);
    float _2552 = ((isnan(1.0) ? _4506 : (isnan(_4506) ? 1.0 : min(_4506, 1.0))) * (_2527 + ((isnan(0.0) ? _1521 : (isnan(_1521) ? 0.0 : max(_1521, 0.0))) * _758))) + ((_2533 + ((isnan(0.0) ? _1813 : (isnan(_1813) ? 0.0 : max(_1813, 0.0))) * _1594)) * cbPerFrame._m0[3u].x);
    uint _2553 = _236 + 6u;
    float _2561 = _695 / cbSceneParam._m0[86u].x;
    float _2562 = _696 / cbSceneParam._m0[86u].y;
    vec4 _2576 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2561, _2562, (log2((isnan(cbSceneParam._m0[77u].w) ? _616 : (isnan(_616) ? cbSceneParam._m0[77u].w : min(_616, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2578 = _2576.x;
    float _2579 = _2576.y;
    float _2580 = _2576.z;
    float _2581 = _2576.w;
    float _2674;
    float _2676;
    float _2678;
    float _2680;
    if (_616 > cbSceneParam._m0[78u].w)
    {
        float _2636 = isnan(_616) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _616 : min(cbSceneParam._m0[80u].w, _616));
        float _2637 = _2636 / _616;
        float _2648 = _2637 * _668;
        float _2649 = _669 * _2637;
        float _2650 = (-0.0) - _2649;
        float _2652 = _2637 * _670;
        float _2654 = (cbSceneParam._m0[77u].w * _2650) / _2636;
        float _2655 = _2654 + cbSceneParam._m0[79u].w;
        float _2656 = cbSceneParam._m0[79u].w - _2649;
        float _2662 = sqrt(((_2648 * _2648) + (_2649 * _2649)) + (_2652 * _2652));
        float _2665 = (1.0 - (cbSceneParam._m0[77u].w / _2636)) * _2662;
        float _2670 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2672 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2849;
        if (abs((_2650 - _2654) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2849 = ((((_2655 > 0.0) ? exp2(_2670 * _2655) : (2.0 - exp2(_2672 * _2655))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2665;
        }
        else
        {
            float _2793 = 1.0 / cbSceneParam._m0[80u].x;
            float _2794 = isnan(_2656) ? _2655 : (isnan(_2655) ? _2656 : max(_2655, _2656));
            float _2795 = isnan(_2656) ? _2655 : (isnan(_2655) ? _2656 : min(_2655, _2656));
            float _2804 = isnan(0.0) ? _2794 : (isnan(_2794) ? 0.0 : min(_2794, 0.0));
            float _2805 = isnan(0.0) ? _2795 : (isnan(_2795) ? 0.0 : min(_2795, 0.0));
            _2849 = ((abs(_2662 / _2650) * cbSceneParam._m0[80u].y) * ((((_2804 - _2805) * 2.0) - ((exp2(_2670 * (isnan(0.0) ? _2794 : (isnan(_2794) ? 0.0 : max(_2794, 0.0)))) - exp2(_2670 * (isnan(0.0) ? _2795 : (isnan(_2795) ? 0.0 : max(_2795, 0.0))))) * _2793)) - ((exp2(_2672 * _2804) - exp2(_2672 * _2805)) * _2793))) + (_2665 * cbSceneParam._m0[80u].z);
        }
        vec4 _2851 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2561, _2562, 1.0), 0.0);
        float _2860 = exp2((_2849 * (-1.44269502162933349609375)) * (1.0 - _2851.w));
        float _2861 = log2(_2860);
        float _2877 = log2(_2581);
        _2674 = (exp2(_2877 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2861 * cbSceneParam._m0[78u].x)) * _2851.x) / cbSceneParam._m0[78u].x)) + _2578;
        _2676 = (exp2(_2877 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2861 * cbSceneParam._m0[78u].y)) * _2851.y) / cbSceneParam._m0[78u].y)) + _2579;
        _2678 = (exp2(_2877 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2861 * cbSceneParam._m0[78u].z)) * _2851.z) / cbSceneParam._m0[78u].z)) + _2580;
        _2680 = _2860 * _2581;
    }
    else
    {
        _2674 = _2578;
        _2676 = _2579;
        _2678 = _2580;
        _2680 = _2581;
    }
    bool _2887;
    vec4 _2690;
    vec4 _2712;
    float _2714;
    float _2718;
    float _2719;
    float _2720;
    float _2721;
    bool _2731;
    for (;;)
    {
        _2690 = cbMatDynParam._m0[0u];
        float _2692 = roundEven(_2690.y);
        bool _2693 = _2692 == 3.0;
        float _2694 = log2(_2680);
        float _2701 = exp2(_2694 * cbSceneParam._m0[78u].x) * _2550;
        float _2702 = exp2(_2694 * cbSceneParam._m0[78u].y) * _2551;
        float _2703 = exp2(_2694 * cbSceneParam._m0[78u].z) * _2552;
        float _2710 = _684 + (-0.5);
        _2712 = cbMtdParam._m0[1u];
        _2714 = _2712.y * _2710;
        float _2717 = (_2692 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2718 = _2717 * (_2693 ? _2701 : (_2701 + (cbSceneParam._m0[72u].w * _2674)));
        _2719 = _2717 * (_2693 ? _2702 : (_2702 + (cbSceneParam._m0[72u].w * _2676)));
        _2720 = _2717 * (_2693 ? _2703 : (_2703 + (cbSceneParam._m0[72u].w * _2678)));
        _2721 = _2710 * 0.999000012874603271484375;
        _2731 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2731)
        {
            if ((cbInstanceData._m0[_236 + 7u].x + _2721) < 0.5)
            {
                _2887 = true;
                break;
            }
        }
        uint _2828 = _733 + uint(_2690.w);
        if ((cbInstanceData._m0[_2828].w < 1.0) && ((cbInstanceData._m0[_2828].w + _2721) < 0.5))
        {
            _2887 = true;
            break;
        }
        if ((_2714 + 1.0) < _2712.x)
        {
            _2887 = true;
            break;
        }
        _2887 = false;
        break;
    }
    float _3092;
    if (_2887)
    {
        discard_state = true;
        _3092 = 0.0;
    }
    else
    {
        _3092 = cbInstanceData._m0[_2553].w;
    }
    SV_Target.x = _2718;
    SV_Target.y = _2719;
    SV_Target.z = _2720;
    SV_Target.w = _3092;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2553].w;
    discard_exit();
}


