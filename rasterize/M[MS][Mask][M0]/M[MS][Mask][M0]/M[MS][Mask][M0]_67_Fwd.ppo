#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_0;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_29;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_10;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_6;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1366;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _225 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _226 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _227 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _233 = inversesqrt(dot(vec3(_225, _226, _227), vec3(_225, _226, _227)));
    float _240 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _247 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _253 = uint(roundEven(NORMAL.w)) * 13u;
    uint _258 = _253 + 1u;
    uint _262 = _253 + 2u;
    float _271 = sqrt(((cbInstanceData._m0[_258].x * cbInstanceData._m0[_258].x) + (cbInstanceData._m0[_253].x * cbInstanceData._m0[_253].x)) + (cbInstanceData._m0[_262].x * cbInstanceData._m0[_262].x));
    float _272 = _271 * TEXCOORD.z;
    float _273 = _271 * TEXCOORD.w;
    vec4 _292 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _316 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _321 = _316.x * cbMtdParam._m0[11u].x;
    float _322 = _316.y * cbMtdParam._m0[11u].y;
    float _323 = _316.z * cbMtdParam._m0[11u].z;
    vec4 _342 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _272) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _273) + cbTextureTilingScale._m0[5u].w));
    vec4 _361 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _398 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _400 = _398.x;
    float _412 = dot(vec4(_400, _398.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _429 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _361.x) * 2.0) - ((((_400 - _412) * cbMtdParam._m0[24u].z) + _412) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3671 = isnan(0.0) ? _429 : (isnan(_429) ? 0.0 : max(_429, 0.0));
    float _430 = isnan(1.0) ? _3671 : (isnan(_3671) ? 1.0 : min(_3671, 1.0));
    float _437 = (_430 * ((_342.x * cbMtdParam._m0[12u].x) - _321)) + _321;
    float _438 = (_430 * ((_342.y * cbMtdParam._m0[12u].y) - _322)) + _322;
    float _439 = (_430 * ((_342.z * cbMtdParam._m0[12u].z) - _323)) + _323;
    vec4 _456 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _272) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _273) + cbTextureTilingScale._m0[3u].w));
    vec4 _476 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _478 = _476.x;
    float _488 = dot(vec4(_478, _476.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _502 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _361.y) * 2.0) - ((((_478 - _488) * cbMtdParam._m0[24u].z) + _488) * cbMtdParam._m0[20u].w))) + 1.0;
    float _3682 = isnan(0.0) ? _502 : (isnan(_502) ? 0.0 : max(_502, 0.0));
    float _503 = isnan(1.0) ? _3682 : (isnan(_3682) ? 1.0 : min(_3682, 1.0));
    float _516 = ((cbMtdParam._m0[9u].x * 4.55000019073486328125) * _292.x) * ((_503 * ((_456.x * cbMtdParam._m0[13u].x) - _437)) + _437);
    float _519 = ((cbMtdParam._m0[9u].y * 4.55000019073486328125) * _292.y) * ((_503 * ((_456.y * cbMtdParam._m0[13u].y) - _438)) + _438);
    float _522 = ((cbMtdParam._m0[9u].z * 4.55000019073486328125) * _292.z) * ((_503 * ((_456.z * cbMtdParam._m0[13u].z) - _439)) + _439);
    vec4 _540 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _272) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _273) + cbTextureTilingScale._m0[4u].w));
    vec4 _557 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _559 = _557.x;
    float _560 = _557.y;
    float _561 = _557.z;
    float _568 = ((_540.x - _559) * _430) + _559;
    float _569 = ((_540.y - _560) * _430) + _560;
    float _570 = ((_540.z - _561) * _430) + _561;
    vec4 _582 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _272) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _273) + cbTextureTilingScale._m0[2u].w));
    float _595 = ((_582.z - _570) * _503) + _570;
    float _598 = ((((_582.x - _568) * _503) + _568) * 2.0) + (-1.0);
    float _600 = ((((_582.y - _569) * _503) + _569) * 2.0) + (-1.0);
    float _601 = dot(vec2(_598, _600), vec2(_598, _600));
    float _3693 = isnan(0.0) ? _601 : (isnan(_601) ? 0.0 : max(_601, 0.0));
    float _606 = sqrt(1.0 - (isnan(1.0) ? _3693 : (isnan(_3693) ? 1.0 : min(_3693, 1.0))));
    vec4 _620 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _645 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _272) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _273) + cbTextureTilingScale._m0[11u].w));
    float _647 = _645.x;
    float _648 = 1.0 - _647;
    float _654 = isnan(-1.0) ? cbMtdParam._m0[24u].x : (isnan(cbMtdParam._m0[24u].x) ? (-1.0) : max(cbMtdParam._m0[24u].x, -1.0));
    float _657 = ((isnan(0.0) ? _654 : (isnan(_654) ? 0.0 : min(_654, 0.0))) * TEXCOORD_8.x) + TEXCOORD_8.w;
    float _666 = (_657 - ((((((_647 - _648) * cbMtdParam._m0[24u].w) + _648) + 0.00999999977648258209228515625) * cbMtdParam._m0[21u].z) * (1.0 - _657))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3714 = isnan(0.0) ? _666 : (isnan(_666) ? 0.0 : max(_666, 0.0));
    float _667 = isnan(1.0) ? _3714 : (isnan(_3714) ? 1.0 : min(_3714, 1.0));
    float _674 = (_667 * (cbMtdParam._m0[17u].x - _516)) + _516;
    float _675 = (_667 * (cbMtdParam._m0[17u].y - _519)) + _519;
    float _676 = (_667 * (cbMtdParam._m0[17u].z - _522)) + _522;
    vec4 _688 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _272) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _273) + cbTextureTilingScale._m0[19u].w));
    float _690 = _688.x;
    float _691 = 1.0 - _690;
    float _718 = (TEXCOORD_8.x - ((cbMtdParam._m0[22u].w * (1.0 - TEXCOORD_8.x)) * ((((_690 - _691) * cbMtdParam._m0[24u].y) + _691) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3725 = isnan(0.0) ? _718 : (isnan(_718) ? 0.0 : max(_718, 0.0));
    float _719 = isnan(1.0) ? _3725 : (isnan(_3725) ? 1.0 : min(_3725, 1.0));
    float _727 = ((((cbMtdParam._m0[10u].x - _674) * TEXCOORD_8.x) * cbMtdParam._m0[23u].w) * _719) + _674;
    float _728 = ((((cbMtdParam._m0[10u].y - _675) * TEXCOORD_8.y) * cbMtdParam._m0[23u].w) * _719) + _675;
    float _729 = (((cbMtdParam._m0[23u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _676)) * _719) + _676;
    float _733 = (cbMtdParam._m0[19u].w * (_620.z - _595)) + _595;
    vec4 _747 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _272) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _273) + cbTextureTilingScale._m0[15u].w));
    float _754 = (_747.x * 2.0) + (-1.0);
    float _755 = (_747.y * 2.0) + (-1.0);
    float _756 = dot(vec2(_754, _755), vec2(_754, _755));
    float _3736 = isnan(0.0) ? _756 : (isnan(_756) ? 0.0 : max(_756, 0.0));
    float _764 = (_667 * (_747.z - _733)) + _733;
    float _767 = ((cbMtdParam._m0[23u].y - _764) * _719) + _764;
    vec4 _786 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _272) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _273) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _792 = (_786.x * 2.0) + (-1.0);
    float _793 = (_786.y * 2.0) + (-1.0);
    float _794 = dot(vec2(_792, _793), vec2(_792, _793));
    float _3747 = isnan(0.0) ? _794 : (isnan(_794) ? 0.0 : max(_794, 0.0));
    float _802 = (((_620.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _598;
    float _803 = (((_620.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _600;
    float _815 = (((_754 - _802) + (cbMtdParam._m0[21u].x * _802)) * _667) + _802;
    float _816 = (((_755 - _803) + (cbMtdParam._m0[21u].x * _803)) * _667) + _803;
    float _817 = (_667 * (sqrt(1.0 - (isnan(1.0) ? _3736 : (isnan(_3736) ? 1.0 : min(_3736, 1.0)))) - _606)) + _606;
    float _828 = (((_792 - _815) + (_815 * cbMtdParam._m0[22u].z)) * _719) + _815;
    float _829 = (((_793 - _816) + (_816 * cbMtdParam._m0[22u].z)) * _719) + _816;
    float _830 = ((sqrt(1.0 - (isnan(1.0) ? _3747 : (isnan(_3747) ? 1.0 : min(_3747, 1.0)))) - _817) * _719) + _817;
    float _832 = cbMtdParam._m0[22u].x + _620.w;
    float _835 = fma(_830, _240 * NORMAL.x, fma(_829, _247 * TANGENT.x, (_233 * _225) * _828));
    float _838 = fma(_830, _240 * NORMAL.y, fma(_829, _247 * TANGENT.y, (_233 * _226) * _828));
    float _841 = fma(_830, _240 * NORMAL.z, fma(_829, _247 * TANGENT.z, (_233 * _227) * _828));
    float _845 = inversesqrt(dot(vec3(_835, _838, _841), vec3(_835, _838, _841)));
    float _846 = _845 * _835;
    float _847 = _845 * _838;
    float _848 = _845 * _841;
    float _3758 = isnan(0.0) ? _767 : (isnan(_767) ? 0.0 : max(_767, 0.0));
    float _849 = isnan(1.0) ? _3758 : (isnan(_3758) ? 1.0 : min(_3758, 1.0));
    float _3769 = isnan(0.0) ? _832 : (isnan(_832) ? 0.0 : max(_832, 0.0));
    float _3780 = isnan(0.0) ? _727 : (isnan(_727) ? 0.0 : max(_727, 0.0));
    float _3791 = isnan(0.0) ? _728 : (isnan(_728) ? 0.0 : max(_728, 0.0));
    float _3802 = isnan(0.0) ? _729 : (isnan(_729) ? 0.0 : max(_729, 0.0));
    float _867 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _907 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _917 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _907);
    float _918 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _907);
    float _919 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _907);
    float _923 = inversesqrt(dot(vec3(_917, _918, _919), vec3(_917, _918, _919)));
    float _924 = _917 * _923;
    float _925 = _918 * _923;
    float _926 = _919 * _923;
    float _932 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _933 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _951 = fma(_848, cbSceneParam._m0[5u].z, fma(_847, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _846));
    float _954 = fma(_848, cbSceneParam._m0[6u].z, fma(_847, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _846));
    float _957 = fma(_848, cbSceneParam._m0[7u].z, fma(_847, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _846));
    uint _971 = (_253 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _977 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3780 : (isnan(_3780) ? 1.0 : min(_3780, 1.0)))) * cbInstanceData._m0[_971].x;
    float _978 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3791 : (isnan(_3791) ? 1.0 : min(_3791, 1.0)))) * cbInstanceData._m0[_971].y;
    float _979 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3802 : (isnan(_3802) ? 1.0 : min(_3802, 1.0)))) * cbInstanceData._m0[_971].z;
    float _3813 = isnan(0.0) ? _977 : (isnan(_977) ? 0.0 : max(_977, 0.0));
    float _980 = isnan(1.0) ? _3813 : (isnan(_3813) ? 1.0 : min(_3813, 1.0));
    float _3824 = isnan(0.0) ? _978 : (isnan(_978) ? 0.0 : max(_978, 0.0));
    float _981 = isnan(1.0) ? _3824 : (isnan(_3824) ? 1.0 : min(_3824, 1.0));
    float _3835 = isnan(0.0) ? _979 : (isnan(_979) ? 0.0 : max(_979, 0.0));
    float _982 = isnan(1.0) ? _3835 : (isnan(_3835) ? 1.0 : min(_3835, 1.0));
    vec4 _991 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _932, cbSceneParam._m0[86u].y * _933));
    float _995 = ((isnan(1.0) ? _3769 : (isnan(_3769) ? 1.0 : min(_3769, 1.0))) * TEXCOORD_5.w) * _991.x;
    float _996 = dot(vec3(_846, _847, _848), vec3(_924, _925, _926));
    float _999 = _996 * 2.0;
    float _1003 = (_999 * _846) - _924;
    float _1004 = (_999 * _847) - _925;
    float _1005 = (_999 * _848) - _926;
    float _1009 = abs(dot(vec3(_924, _925, _926), vec3(_846, _847, _848)));
    float _3846 = isnan(0.0) ? _1009 : (isnan(_1009) ? 0.0 : max(_1009, 0.0));
    float _1011 = sqrt(_849);
    float _1024 = exp2((_1011 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3846 : (isnan(_3846) ? 1.0 : min(_3846, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1011 * 3.0));
    float _1056 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1060 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1064 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1365;
    float _1367;
    float _1368;
    float _1369;
    float _1370;
    float _1371;
    float _1372;
    float _1373;
    float _1374;
    float _1375;
    float _1376;
    float _1377;
    float _1378;
    float _1379;
    float _1380;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1090 = fma(_1064, cbModelParam._m0[26u].z, fma(_1060, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1056));
        float _1094 = fma(_1064, cbModelParam._m0[27u].z, fma(_1060, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1056));
        float _1098 = fma(_1064, cbModelParam._m0[28u].z, fma(_1060, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1056));
        float _1123 = _1056 + _846;
        float _1124 = _1060 + _847;
        float _1125 = _1064 + _848;
        float _1135 = fma(_1125, cbModelParam._m0[26u].z, fma(_1124, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1123)) - _1090;
        float _1136 = fma(_1125, cbModelParam._m0[27u].z, fma(_1124, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1123)) - _1094;
        float _1137 = fma(_1125, cbModelParam._m0[28u].z, fma(_1124, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1123)) - _1098;
        float _1141 = inversesqrt(dot(vec3(_1135, _1136, _1137), vec3(_1135, _1136, _1137)));
        float _1154 = ((_1141 * _1135) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1090 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1155 = ((_1141 * _1136) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1094 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1156 = ((_1141 * _1137) / cbModelParam._m0[34u].z) + ((((((_1098 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1159 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1154, _1155, _1156), 0.0);
        vec4 _1166 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1154, _1155, _1156), 0.0);
        vec4 _1173 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1154, _1155, _1156), 0.0);
        vec4 _1180 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1154, _1155, _1156), 0.0);
        float _1193 = exp2((_1159.w + (-0.5)) * 20.0) * 2.0;
        float _1194 = _1193 * (_1159.x + (-0.5));
        float _1195 = _1193 * (_1159.y + (-0.5));
        float _1196 = _1193 * (_1159.z + (-0.5));
        float _1203 = exp2((_1166.w + (-0.5)) * 20.0) * 2.0;
        float _1204 = _1203 * (_1166.x + (-0.5));
        float _1205 = _1203 * (_1166.y + (-0.5));
        float _1206 = _1203 * (_1166.z + (-0.5));
        float _1213 = exp2((_1173.w + (-0.5)) * 20.0) * 2.0;
        float _1214 = _1213 * (_1173.x + (-0.5));
        float _1215 = _1213 * (_1173.y + (-0.5));
        float _1216 = _1213 * (_1173.z + (-0.5));
        float _1223 = exp2((_1180.w + (-0.5)) * 20.0) * 2.0;
        float _1224 = _1223 * (_1180.x + (-0.5));
        float _1225 = _1223 * (_1180.y + (-0.5));
        float _1226 = _1223 * (_1180.z + (-0.5));
        float _1227 = isnan(0.0) ? _1224 : (isnan(_1224) ? 0.0 : max(_1224, 0.0));
        float _1228 = isnan(0.0) ? _1225 : (isnan(_1225) ? 0.0 : max(_1225, 0.0));
        float _1229 = isnan(0.0) ? _1226 : (isnan(_1226) ? 0.0 : max(_1226, 0.0));
        float _1230 = _1194 * 0.5;
        float _1231 = _1204 * 0.5;
        float _1232 = _1214 * 0.5;
        float _1233 = dot(vec3(_1230, _1231, _1232), vec3(_1230, _1231, _1232));
        float _1238 = (_1233 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1233);
        float _1247 = (dot(vec3(_846, _847, _848), vec3(_1238 * _1230, _1238 * _1231, _1238 * _1232)) + 1.0) * 0.5;
        float _3872 = isnan(0.0) ? _1247 : (isnan(_1247) ? 0.0 : max(_1247, 0.0));
        float _1257 = sqrt(((_1231 * _1231) + (_1230 * _1230)) + (_1232 * _1232)) / (_1227 + 9.9999997473787516355514526367188e-06);
        float _3883 = isnan(0.0) ? _1257 : (isnan(_1257) ? 0.0 : max(_1257, 0.0));
        float _1258 = isnan(1.0) ? _3883 : (isnan(_3883) ? 1.0 : min(_3883, 1.0));
        float _1259 = _1258 * 2.0;
        float _1263 = (1.0 - _1258) / (_1258 + 1.0);
        float _3894 = isnan(0.0) ? _1263 : (isnan(_1263) ? 0.0 : max(_1263, 0.0));
        float _1264 = isnan(1.0) ? _3894 : (isnan(_3894) ? 1.0 : min(_3894, 1.0));
        float _1273 = ((((1.0 - _1264) * (_1259 + 2.0)) * exp2(log2(isnan(1.0) ? _3872 : (isnan(_3872) ? 1.0 : min(_3872, 1.0))) * (_1259 + 1.0))) + _1264) * _1227;
        float _1274 = _1195 * 0.5;
        float _1275 = _1205 * 0.5;
        float _1276 = _1215 * 0.5;
        float _1277 = dot(vec3(_1274, _1275, _1276), vec3(_1274, _1275, _1276));
        float _1282 = (_1277 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1277);
        float _1290 = (dot(vec3(_846, _847, _848), vec3(_1282 * _1274, _1282 * _1275, _1282 * _1276)) + 1.0) * 0.5;
        float _3905 = isnan(0.0) ? _1290 : (isnan(_1290) ? 0.0 : max(_1290, 0.0));
        float _1299 = sqrt(((_1275 * _1275) + (_1274 * _1274)) + (_1276 * _1276)) / (_1228 + 9.9999997473787516355514526367188e-06);
        float _3916 = isnan(0.0) ? _1299 : (isnan(_1299) ? 0.0 : max(_1299, 0.0));
        float _1300 = isnan(1.0) ? _3916 : (isnan(_3916) ? 1.0 : min(_3916, 1.0));
        float _1301 = _1300 * 2.0;
        float _1305 = (1.0 - _1300) / (_1300 + 1.0);
        float _3927 = isnan(0.0) ? _1305 : (isnan(_1305) ? 0.0 : max(_1305, 0.0));
        float _1306 = isnan(1.0) ? _3927 : (isnan(_3927) ? 1.0 : min(_3927, 1.0));
        float _1315 = ((((1.0 - _1306) * (_1301 + 2.0)) * exp2(log2(isnan(1.0) ? _3905 : (isnan(_3905) ? 1.0 : min(_3905, 1.0))) * (_1301 + 1.0))) + _1306) * _1228;
        float _1316 = _1196 * 0.5;
        float _1317 = _1206 * 0.5;
        float _1318 = _1216 * 0.5;
        float _1319 = dot(vec3(_1316, _1317, _1318), vec3(_1316, _1317, _1318));
        float _1324 = (_1319 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1319);
        float _1332 = (dot(vec3(_846, _847, _848), vec3(_1324 * _1316, _1324 * _1317, _1324 * _1318)) + 1.0) * 0.5;
        float _3938 = isnan(0.0) ? _1332 : (isnan(_1332) ? 0.0 : max(_1332, 0.0));
        float _1341 = sqrt(((_1317 * _1317) + (_1316 * _1316)) + (_1318 * _1318)) / (_1229 + 9.9999997473787516355514526367188e-06);
        float _3949 = isnan(0.0) ? _1341 : (isnan(_1341) ? 0.0 : max(_1341, 0.0));
        float _1342 = isnan(1.0) ? _3949 : (isnan(_3949) ? 1.0 : min(_3949, 1.0));
        float _1343 = _1342 * 2.0;
        float _1347 = (1.0 - _1342) / (_1342 + 1.0);
        float _3960 = isnan(0.0) ? _1347 : (isnan(_1347) ? 0.0 : max(_1347, 0.0));
        float _1348 = isnan(1.0) ? _3960 : (isnan(_3960) ? 1.0 : min(_3960, 1.0));
        float _1357 = ((((1.0 - _1348) * (_1343 + 2.0)) * exp2(log2(isnan(1.0) ? _3938 : (isnan(_3938) ? 1.0 : min(_3938, 1.0))) * (_1343 + 1.0))) + _1348) * _1229;
        _1365 = _1196;
        _1367 = _1195;
        _1368 = _1194;
        _1369 = _1206;
        _1370 = _1205;
        _1371 = _1204;
        _1372 = _1216;
        _1373 = _1215;
        _1374 = _1214;
        _1375 = _1229;
        _1376 = _1228;
        _1377 = _1227;
        _1378 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1273 : (isnan(_1273) ? 0.0 : max(_1273, 0.0)));
        _1379 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1315 : (isnan(_1315) ? 0.0 : max(_1315, 0.0)));
        _1380 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1357 : (isnan(_1357) ? 0.0 : max(_1357, 0.0)));
    }
    else
    {
        _1365 = _1366;
        _1367 = _1366;
        _1368 = _1366;
        _1369 = _1366;
        _1370 = _1366;
        _1371 = _1366;
        _1372 = _1366;
        _1373 = _1366;
        _1374 = _1366;
        _1375 = _1366;
        _1376 = _1366;
        _1377 = _1366;
        _1378 = 0.0;
        _1379 = 0.0;
        _1380 = 0.0;
    }
    float _1673;
    float _1674;
    float _1675;
    float _1676;
    float _1677;
    float _1678;
    float _1679;
    float _1680;
    float _1681;
    float _1682;
    float _1683;
    float _1684;
    float _1685;
    float _1686;
    float _1687;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1404 = fma(_1064, cbModelParam._m0[30u].z, fma(_1060, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1056));
        float _1408 = fma(_1064, cbModelParam._m0[31u].z, fma(_1060, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1056));
        float _1412 = fma(_1064, cbModelParam._m0[32u].z, fma(_1060, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1056));
        float _1435 = _1056 + _846;
        float _1436 = _1060 + _847;
        float _1437 = _1064 + _848;
        float _1447 = fma(_1437, cbModelParam._m0[30u].z, fma(_1436, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1435)) - _1404;
        float _1448 = fma(_1437, cbModelParam._m0[31u].z, fma(_1436, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1435)) - _1408;
        float _1449 = fma(_1437, cbModelParam._m0[32u].z, fma(_1436, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1435)) - _1412;
        float _1453 = inversesqrt(dot(vec3(_1447, _1448, _1449), vec3(_1447, _1448, _1449)));
        float _1466 = ((_1453 * _1447) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1404 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1467 = ((_1453 * _1448) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1408 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1468 = ((_1453 * _1449) / cbModelParam._m0[35u].z) + ((((((_1412 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1470 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1466, _1467, _1468), 0.0);
        vec4 _1477 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1466, _1467, _1468), 0.0);
        vec4 _1484 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1466, _1467, _1468), 0.0);
        vec4 _1491 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1466, _1467, _1468), 0.0);
        float _1503 = exp2((_1470.w + (-0.5)) * 20.0) * 2.0;
        float _1504 = _1503 * (_1470.x + (-0.5));
        float _1505 = _1503 * (_1470.y + (-0.5));
        float _1506 = _1503 * (_1470.z + (-0.5));
        float _1513 = exp2((_1477.w + (-0.5)) * 20.0) * 2.0;
        float _1514 = _1513 * (_1477.x + (-0.5));
        float _1515 = _1513 * (_1477.y + (-0.5));
        float _1516 = _1513 * (_1477.z + (-0.5));
        float _1523 = exp2((_1484.w + (-0.5)) * 20.0) * 2.0;
        float _1524 = _1523 * (_1484.x + (-0.5));
        float _1525 = _1523 * (_1484.y + (-0.5));
        float _1526 = _1523 * (_1484.z + (-0.5));
        float _1533 = exp2((_1491.w + (-0.5)) * 20.0) * 2.0;
        float _1534 = _1533 * (_1491.x + (-0.5));
        float _1535 = _1533 * (_1491.y + (-0.5));
        float _1536 = _1533 * (_1491.z + (-0.5));
        float _1537 = isnan(0.0) ? _1534 : (isnan(_1534) ? 0.0 : max(_1534, 0.0));
        float _1538 = isnan(0.0) ? _1535 : (isnan(_1535) ? 0.0 : max(_1535, 0.0));
        float _1539 = isnan(0.0) ? _1536 : (isnan(_1536) ? 0.0 : max(_1536, 0.0));
        float _1540 = _1504 * 0.5;
        float _1541 = _1514 * 0.5;
        float _1542 = _1524 * 0.5;
        float _1543 = dot(vec3(_1540, _1541, _1542), vec3(_1540, _1541, _1542));
        float _1548 = (_1543 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1543);
        float _1556 = (dot(vec3(_846, _847, _848), vec3(_1548 * _1540, _1548 * _1541, _1548 * _1542)) + 1.0) * 0.5;
        float _4001 = isnan(0.0) ? _1556 : (isnan(_1556) ? 0.0 : max(_1556, 0.0));
        float _1565 = sqrt(((_1541 * _1541) + (_1540 * _1540)) + (_1542 * _1542)) / (_1537 + 9.9999997473787516355514526367188e-06);
        float _4012 = isnan(0.0) ? _1565 : (isnan(_1565) ? 0.0 : max(_1565, 0.0));
        float _1566 = isnan(1.0) ? _4012 : (isnan(_4012) ? 1.0 : min(_4012, 1.0));
        float _1567 = _1566 * 2.0;
        float _1571 = (1.0 - _1566) / (_1566 + 1.0);
        float _4023 = isnan(0.0) ? _1571 : (isnan(_1571) ? 0.0 : max(_1571, 0.0));
        float _1572 = isnan(1.0) ? _4023 : (isnan(_4023) ? 1.0 : min(_4023, 1.0));
        float _1581 = ((((1.0 - _1572) * (_1567 + 2.0)) * exp2(log2(isnan(1.0) ? _4001 : (isnan(_4001) ? 1.0 : min(_4001, 1.0))) * (_1567 + 1.0))) + _1572) * _1537;
        float _1582 = _1505 * 0.5;
        float _1583 = _1515 * 0.5;
        float _1584 = _1525 * 0.5;
        float _1585 = dot(vec3(_1582, _1583, _1584), vec3(_1582, _1583, _1584));
        float _1590 = (_1585 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1585);
        float _1598 = (dot(vec3(_846, _847, _848), vec3(_1590 * _1582, _1590 * _1583, _1590 * _1584)) + 1.0) * 0.5;
        float _4034 = isnan(0.0) ? _1598 : (isnan(_1598) ? 0.0 : max(_1598, 0.0));
        float _1607 = sqrt(((_1583 * _1583) + (_1582 * _1582)) + (_1584 * _1584)) / (_1538 + 9.9999997473787516355514526367188e-06);
        float _4045 = isnan(0.0) ? _1607 : (isnan(_1607) ? 0.0 : max(_1607, 0.0));
        float _1608 = isnan(1.0) ? _4045 : (isnan(_4045) ? 1.0 : min(_4045, 1.0));
        float _1609 = _1608 * 2.0;
        float _1613 = (1.0 - _1608) / (_1608 + 1.0);
        float _4056 = isnan(0.0) ? _1613 : (isnan(_1613) ? 0.0 : max(_1613, 0.0));
        float _1614 = isnan(1.0) ? _4056 : (isnan(_4056) ? 1.0 : min(_4056, 1.0));
        float _1623 = ((((1.0 - _1614) * (_1609 + 2.0)) * exp2(log2(isnan(1.0) ? _4034 : (isnan(_4034) ? 1.0 : min(_4034, 1.0))) * (_1609 + 1.0))) + _1614) * _1538;
        float _1624 = _1506 * 0.5;
        float _1625 = _1516 * 0.5;
        float _1626 = _1526 * 0.5;
        float _1627 = dot(vec3(_1624, _1625, _1626), vec3(_1624, _1625, _1626));
        float _1632 = (_1627 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1627);
        float _1640 = (dot(vec3(_846, _847, _848), vec3(_1632 * _1624, _1632 * _1625, _1632 * _1626)) + 1.0) * 0.5;
        float _4067 = isnan(0.0) ? _1640 : (isnan(_1640) ? 0.0 : max(_1640, 0.0));
        float _1649 = sqrt(((_1625 * _1625) + (_1624 * _1624)) + (_1626 * _1626)) / (_1539 + 9.9999997473787516355514526367188e-06);
        float _4078 = isnan(0.0) ? _1649 : (isnan(_1649) ? 0.0 : max(_1649, 0.0));
        float _1650 = isnan(1.0) ? _4078 : (isnan(_4078) ? 1.0 : min(_4078, 1.0));
        float _1651 = _1650 * 2.0;
        float _1655 = (1.0 - _1650) / (_1650 + 1.0);
        float _4089 = isnan(0.0) ? _1655 : (isnan(_1655) ? 0.0 : max(_1655, 0.0));
        float _1656 = isnan(1.0) ? _4089 : (isnan(_4089) ? 1.0 : min(_4089, 1.0));
        float _1665 = ((((1.0 - _1656) * (_1651 + 2.0)) * exp2(log2(isnan(1.0) ? _4067 : (isnan(_4067) ? 1.0 : min(_4067, 1.0))) * (_1651 + 1.0))) + _1656) * _1539;
        _1673 = _1506;
        _1674 = _1505;
        _1675 = _1504;
        _1676 = _1516;
        _1677 = _1515;
        _1678 = _1514;
        _1679 = _1526;
        _1680 = _1525;
        _1681 = _1524;
        _1682 = _1539;
        _1683 = _1538;
        _1684 = _1537;
        _1685 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1581 : (isnan(_1581) ? 0.0 : max(_1581, 0.0)));
        _1686 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1623 : (isnan(_1623) ? 0.0 : max(_1623, 0.0)));
        _1687 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1665 : (isnan(_1665) ? 0.0 : max(_1665, 0.0)));
    }
    else
    {
        _1673 = _1366;
        _1674 = _1366;
        _1675 = _1366;
        _1676 = _1366;
        _1677 = _1366;
        _1678 = _1366;
        _1679 = _1366;
        _1680 = _1366;
        _1681 = _1366;
        _1682 = _1366;
        _1683 = _1366;
        _1684 = _1366;
        _1685 = 0.0;
        _1686 = 0.0;
        _1687 = 0.0;
    }
    float _1697 = (cbModelParam._m0[1u].x * (_1685 - _1378)) + _1378;
    float _1698 = (cbModelParam._m0[1u].x * (_1686 - _1379)) + _1379;
    float _1699 = (cbModelParam._m0[1u].x * (_1687 - _1380)) + _1380;
    float _1720 = fma(_1699, cbSceneParam._m0[89u].z, fma(_1698, cbSceneParam._m0[89u].y, _1697 * cbSceneParam._m0[89u].x));
    float _1723 = fma(_1699, cbSceneParam._m0[90u].z, fma(_1698, cbSceneParam._m0[90u].y, _1697 * cbSceneParam._m0[90u].x));
    float _1726 = fma(_1699, cbSceneParam._m0[91u].z, fma(_1698, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1697));
    float _1741 = _1003 * 0.5;
    float _1742 = _1004 * 0.5;
    float _1743 = _1005 * 0.5;
    float _1744 = dot(vec4(_1741, _1742, _1743, 1.0), vec4(_1675, _1678, _1681, _1684));
    float _1747 = dot(vec4(_1741, _1742, _1743, 1.0), vec4(_1674, _1677, _1680, _1683));
    float _1750 = dot(vec4(_1741, _1742, _1743, 1.0), vec4(_1673, _1676, _1679, _1682));
    float _1784;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1757 = dot(vec4(_1741, _1742, _1743, 1.0), vec4(_1365, _1369, _1372, _1375));
        float _1761 = dot(vec4(_1741, _1742, _1743, 1.0), vec4(_1367, _1370, _1373, _1376));
        float _1765 = dot(vec4(_1741, _1742, _1743, 1.0), vec4(_1368, _1371, _1374, _1377));
        float _1772 = dot(vec4(cbModelParam._m0[39u]), vec4(_1741, _1742, _1743, 1.0));
        _1784 = dot(vec3(isnan(0.0) ? _1765 : (isnan(_1765) ? 0.0 : max(_1765, 0.0)), isnan(0.0) ? _1761 : (isnan(_1761) ? 0.0 : max(_1761, 0.0)), isnan(0.0) ? _1757 : (isnan(_1757) ? 0.0 : max(_1757, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1772) ? 0.0 : (isnan(0.0) ? _1772 : max(0.0, _1772))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1784 = 1.0;
    }
    float _1795;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1786 = dot(vec4(cbModelParam._m0[40u]), vec4(_1741, _1742, _1743, 1.0));
        _1795 = dot(vec3(isnan(0.0) ? _1744 : (isnan(_1744) ? 0.0 : max(_1744, 0.0)), isnan(0.0) ? _1747 : (isnan(_1747) ? 0.0 : max(_1747, 0.0)), isnan(0.0) ? _1750 : (isnan(_1750) ? 0.0 : max(_1750, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1786) ? 0.0 : (isnan(0.0) ? _1786 : max(0.0, _1786))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1795 = 1.0;
    }
    float _1799 = (_1795 * cbModelParam._m0[1u].x) + (_1784 * (1.0 - cbModelParam._m0[1u].x));
    float _1809 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _849);
    float _1810 = isnan(_1809) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1809 : min(cbModelParam._m0[25u].z, _1809));
    float _1891;
    float _1893;
    float _1895;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1858 = fma(_1064, cbModelParam._m0[13u].z, fma(_1060, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1056)) + cbModelParam._m0[13u].w;
        float _1862 = fma(_1064, cbModelParam._m0[14u].z, fma(_1060, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1056)) + cbModelParam._m0[14u].w;
        float _1866 = fma(_1064, cbModelParam._m0[15u].z, fma(_1060, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1056)) + cbModelParam._m0[15u].w;
        float _1869 = fma(_1005, cbModelParam._m0[13u].z, fma(_1004, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1003));
        float _1872 = fma(_1005, cbModelParam._m0[14u].z, fma(_1004, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1003));
        float _1875 = fma(_1005, cbModelParam._m0[15u].z, fma(_1004, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1003));
        float _1903;
        if (_1869 > 0.0)
        {
            _1903 = abs((1.0 - _1858) / _1869);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1869 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1858 + 1.0) / _1869);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1903 = frontier_phi_14_12_ladder;
        }
        float _2104;
        if (_1872 > 0.0)
        {
            _2104 = abs((1.0 - _1862) / _1872);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1872 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1862 + 1.0) / _1872);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2104 = frontier_phi_23_19_ladder;
        }
        float _2347;
        if (_1875 > 0.0)
        {
            _2347 = abs((1.0 - _1866) / _1875);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1875 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1866 + 1.0) / _1875);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2347 = frontier_phi_35_30_ladder;
        }
        float _2349 = isnan(_2104) ? _1903 : (isnan(_1903) ? _2104 : min(_1903, _2104));
        float _2350 = isnan(_2347) ? _2349 : (isnan(_2349) ? _2347 : min(_2349, _2347));
        float _2354 = (_2350 * _1869) + _1858;
        float _2355 = (_2350 * _1872) + _1862;
        float _2356 = (_2350 * _1875) + _1866;
        float _2357 = _2350 * 9.9999997473787516355514526367188e-05;
        float _2359 = (-1.0) - _2357;
        float _2361 = _2357 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2356 > _2361) || ((_2356 < _2359) || ((_2355 > _2361) || ((_2355 < _2359) || ((_2354 < _2359) || (_2354 > _2361))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2480 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2356, cbModelParam._m0[9u].z, fma(_2355, cbModelParam._m0[9u].y, _2354 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2356, cbModelParam._m0[10u].z, fma(_2355, cbModelParam._m0[10u].y, _2354 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2356, cbModelParam._m0[11u].z, fma(_2355, cbModelParam._m0[11u].y, _2354 * cbModelParam._m0[11u].x))), _1810);
            frontier_phi_13_35_ladder = _2480.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2480.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2480.x * cbModelParam._m0[1u].y;
        }
        _1891 = frontier_phi_13_35_ladder_2;
        _1893 = frontier_phi_13_35_ladder_1;
        _1895 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1879 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1003, _1004, _1005), _1810);
        _1891 = _1879.x * cbModelParam._m0[1u].y;
        _1893 = _1879.y * cbModelParam._m0[1u].y;
        _1895 = _1879.z * cbModelParam._m0[1u].y;
    }
    float _1899 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _849);
    float _1900 = isnan(_1899) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1899 : min(cbModelParam._m0[25u].w, _1899));
    float _1990;
    float _1992;
    float _1994;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1954 = fma(_1064, cbModelParam._m0[21u].z, fma(_1060, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1056)) + cbModelParam._m0[21u].w;
        float _1958 = fma(_1064, cbModelParam._m0[22u].z, fma(_1060, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1056)) + cbModelParam._m0[22u].w;
        float _1962 = fma(_1064, cbModelParam._m0[23u].z, fma(_1060, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1056)) + cbModelParam._m0[23u].w;
        float _1965 = fma(_1005, cbModelParam._m0[21u].z, fma(_1004, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1003));
        float _1968 = fma(_1005, cbModelParam._m0[22u].z, fma(_1004, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1003));
        float _1971 = fma(_1005, cbModelParam._m0[23u].z, fma(_1004, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1003));
        float _2109;
        if (_1965 > 0.0)
        {
            _2109 = abs((1.0 - _1954) / _1965);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1965 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1954 + 1.0) / _1965);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2109 = frontier_phi_25_21_ladder;
        }
        float _2374;
        if (_1968 > 0.0)
        {
            _2374 = abs((1.0 - _1958) / _1968);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1968 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1958 + 1.0) / _1968);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2374 = frontier_phi_37_32_ladder;
        }
        float _2579;
        if (_1971 > 0.0)
        {
            _2579 = abs((1.0 - _1962) / _1971);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1971 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1962 + 1.0) / _1971);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2579 = frontier_phi_46_43_ladder;
        }
        float _2581 = isnan(_2374) ? _2109 : (isnan(_2109) ? _2374 : min(_2109, _2374));
        float _2582 = isnan(_2579) ? _2581 : (isnan(_2581) ? _2579 : min(_2581, _2579));
        float _2586 = (_2582 * _1965) + _1954;
        float _2587 = (_2582 * _1968) + _1958;
        float _2588 = (_2582 * _1971) + _1962;
        float _2589 = _2582 * 9.9999997473787516355514526367188e-05;
        float _2590 = (-1.0) - _2589;
        float _2592 = _2589 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2588 > _2592) || ((_2588 < _2590) || ((_2587 > _2592) || ((_2587 < _2590) || ((_2586 < _2590) || (_2586 > _2592))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2787 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2588, cbModelParam._m0[17u].z, fma(_2587, cbModelParam._m0[17u].y, _2586 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2588, cbModelParam._m0[18u].z, fma(_2587, cbModelParam._m0[18u].y, _2586 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2588, cbModelParam._m0[19u].z, fma(_2587, cbModelParam._m0[19u].y, _2586 * cbModelParam._m0[19u].x))), _1900);
            frontier_phi_22_46_ladder = _2787.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2787.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2787.x * cbModelParam._m0[1u].z;
        }
        _1990 = frontier_phi_22_46_ladder_2;
        _1992 = frontier_phi_22_46_ladder_1;
        _1994 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1974 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1003, _1004, _1005), _1900);
        _1990 = _1974.x * cbModelParam._m0[1u].z;
        _1992 = _1974.y * cbModelParam._m0[1u].z;
        _1994 = _1974.z * cbModelParam._m0[1u].z;
    }
    float _2006 = ((((1.0 - _1024) * ((_1011 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_1024 * _1011)) * _995;
    float _2007 = _2006 * ((cbModelParam._m0[1u].w * (_1990 - _1891)) + _1891);
    float _2008 = _2006 * ((cbModelParam._m0[1u].w * (_1992 - _1893)) + _1893);
    float _2009 = _2006 * ((cbModelParam._m0[1u].w * (_1994 - _1895)) + _1895);
    float _2012 = fma(_2009, cbSceneParam._m0[89u].z, fma(_2008, cbSceneParam._m0[89u].y, _2007 * cbSceneParam._m0[89u].x));
    float _2015 = fma(_2009, cbSceneParam._m0[90u].z, fma(_2008, cbSceneParam._m0[90u].y, _2007 * cbSceneParam._m0[90u].x));
    float _2018 = fma(_2009, cbSceneParam._m0[91u].z, fma(_2008, cbSceneParam._m0[91u].y, _2007 * cbSceneParam._m0[91u].x));
    uvec4 _2028 = floatBitsToUint(cbInstanceData._m0[_253 + 5u]);
    uint _2030 = _2028.x * 14u;
    uint _2031 = _2030 + 13u;
    float _2038 = _995 + (-1.0);
    float _2043 = (cbLight._m0[_2031].x * _2038) + 1.0;
    float _2044 = (cbLight._m0[_2031].y * _2038) + 1.0;
    float _2045 = (cbLight._m0[_2031].z * _2038) + 1.0;
    float _2046 = (cbLight._m0[_2031].w * _2038) + 1.0;
    uint _2047 = _2030 + 5u;
    float _2053 = isnan(1.0) ? _2044 : (isnan(_2044) ? 1.0 : min(_2044, 1.0));
    uint _2057 = _2030 + 4u;
    float _2063 = isnan(1.0) ? _2043 : (isnan(_2043) ? 1.0 : min(_2043, 1.0));
    uint _2067 = _2030 | 1u;
    float _2078 = dot(vec3(cbLight._m0[_2030].xyz), vec3(_846, _847, _848));
    float _2081 = dot(vec3(cbLight._m0[_2067].xyz), vec3(_846, _847, _848));
    float _4225 = isnan(0.0) ? _2078 : (isnan(_2078) ? 0.0 : max(_2078, 0.0));
    float _4236 = isnan(0.0) ? _2081 : (isnan(_2081) ? 0.0 : max(_2081, 0.0));
    float _2086 = (isnan(1.0) ? _4225 : (isnan(_4225) ? 1.0 : min(_4225, 1.0))) * 0.3183098733425140380859375;
    float _2088 = (isnan(1.0) ? _4236 : (isnan(_4236) ? 1.0 : min(_4236, 1.0))) * 0.3183098733425140380859375;
    float _2095 = ((cbLight._m0[_2047].x * _2053) * _2088) + ((cbLight._m0[_2057].x * _2063) * _2086);
    float _2096 = ((_2053 * cbLight._m0[_2047].y) * _2088) + ((_2063 * cbLight._m0[_2057].y) * _2086);
    float _2097 = ((_2053 * cbLight._m0[_2047].z) * _2088) + ((_2063 * cbLight._m0[_2057].z) * _2086);
    uvec4 _2101 = floatBitsToUint(cbLight._m0[_2030 + 12u]);
    bool _2103 = _2101.x == 0u;
    float _2114;
    float _2116;
    float _2118;
    if (_2103)
    {
        _2114 = _2095;
        _2116 = _2096;
        _2118 = _2097;
    }
    else
    {
        uint _2122 = _2030 + 6u;
        float _2138 = (dot(vec3(cbLight._m0[_2030 + 2u].xyz), vec3(_846, _847, _848)) * 0.5) + 0.5;
        float _2139 = _2138 * _2138;
        float _4247 = isnan(0.0) ? _2139 : (isnan(_2139) ? 0.0 : max(_2139, 0.0));
        float _2140 = isnan(1.0) ? _4247 : (isnan(_4247) ? 1.0 : min(_4247, 1.0));
        float _2141 = isnan(1.0) ? _2045 : (isnan(_2045) ? 1.0 : min(_2045, 1.0));
        _2114 = (((cbLight._m0[_2122].x * 0.3183098733425140380859375) * _2140) * _2141) + _2095;
        _2116 = (((cbLight._m0[_2122].y * 0.3183098733425140380859375) * _2140) * _2141) + _2096;
        _2118 = (((cbLight._m0[_2122].z * 0.3183098733425140380859375) * _2140) * _2141) + _2097;
    }
    bool _2121 = _2101.y == 0u;
    float _2159;
    float _2161;
    float _2163;
    if (_2121)
    {
        _2159 = _2114;
        _2161 = _2116;
        _2163 = _2118;
    }
    else
    {
        uint _2318 = _2030 + 7u;
        float _2334 = (dot(vec3(cbLight._m0[_2030 + 3u].xyz), vec3(_846, _847, _848)) * 0.5) + 0.5;
        float _2335 = _2334 * _2334;
        float _4263 = isnan(0.0) ? _2335 : (isnan(_2335) ? 0.0 : max(_2335, 0.0));
        float _2336 = isnan(1.0) ? _4263 : (isnan(_4263) ? 1.0 : min(_4263, 1.0));
        float _2337 = isnan(1.0) ? _2046 : (isnan(_2046) ? 1.0 : min(_2046, 1.0));
        _2159 = (((cbLight._m0[_2318].x * 0.3183098733425140380859375) * _2336) * _2337) + _2114;
        _2161 = (((cbLight._m0[_2318].y * 0.3183098733425140380859375) * _2336) * _2337) + _2116;
        _2163 = (((cbLight._m0[_2318].z * 0.3183098733425140380859375) * _2336) * _2337) + _2118;
    }
    uint _2166 = _2030 + 8u;
    float _2179 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2030].w)) * _849) * 0.949999988079071044921875);
    float _2180 = _2179 * _2179;
    float _2181 = cbLight._m0[_2030].x + _924;
    float _2182 = cbLight._m0[_2030].y + _925;
    float _2183 = cbLight._m0[_2030].z + _926;
    float _2187 = inversesqrt(dot(vec3(_2181, _2182, _2183), vec3(_2181, _2182, _2183)));
    float _2188 = _2187 * _2181;
    float _2189 = _2187 * _2182;
    float _2190 = _2187 * _2183;
    float _2191 = dot(vec3(_846, _847, _848), vec3(cbLight._m0[_2030].xyz));
    float _4279 = isnan(0.0) ? _2191 : (isnan(_2191) ? 0.0 : max(_2191, 0.0));
    float _2194 = isnan(1.0) ? _4279 : (isnan(_4279) ? 1.0 : min(_4279, 1.0));
    float _4290 = isnan(0.0) ? _996 : (isnan(_996) ? 0.0 : max(_996, 0.0));
    float _2195 = isnan(1.0) ? _4290 : (isnan(_4290) ? 1.0 : min(_4290, 1.0));
    float _2196 = dot(vec3(_846, _847, _848), vec3(_2188, _2189, _2190));
    float _4301 = isnan(0.0) ? _2196 : (isnan(_2196) ? 0.0 : max(_2196, 0.0));
    float _2199 = isnan(1.0) ? _4301 : (isnan(_4301) ? 1.0 : min(_4301, 1.0));
    float _2200 = dot(vec3(cbLight._m0[_2030].xyz), vec3(_2188, _2189, _2190));
    float _4312 = isnan(0.0) ? _2200 : (isnan(_2200) ? 0.0 : max(_2200, 0.0));
    float _2204 = _2180 * _2180;
    float _2208 = ((_2199 * _2199) * (_2204 + (-1.0))) + 1.0;
    float _2219 = (exp2(log2(1.0 - (isnan(1.0) ? _4312 : (isnan(_4312) ? 1.0 : min(_4312, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2220 = 1.0 - _2180;
    float _2231 = (0.5 / (((_2195 * ((_2194 * _2220) + _2180)) + 9.9999999392252902907785028219223e-09) + (((_2195 * _2220) + _2180) * _2194))) * _2194;
    float _4323 = isnan(0.0) ? _2231 : (isnan(_2231) ? 0.0 : max(_2231, 0.0));
    float _2233 = (isnan(1.0) ? _4323 : (isnan(_4323) ? 1.0 : min(_4323, 1.0))) * (_2204 / ((_2208 * _2208) * 3.141590118408203125));
    uint _2244 = _2030 + 9u;
    float _2255 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2067].w)) * _849) * 0.949999988079071044921875);
    float _2256 = _2255 * _2255;
    float _2257 = cbLight._m0[_2067].x + _924;
    float _2258 = cbLight._m0[_2067].y + _925;
    float _2259 = cbLight._m0[_2067].z + _926;
    float _2263 = inversesqrt(dot(vec3(_2257, _2258, _2259), vec3(_2257, _2258, _2259)));
    float _2264 = _2263 * _2257;
    float _2265 = _2263 * _2258;
    float _2266 = _2263 * _2259;
    float _2267 = dot(vec3(_846, _847, _848), vec3(cbLight._m0[_2067].xyz));
    float _4334 = isnan(0.0) ? _2267 : (isnan(_2267) ? 0.0 : max(_2267, 0.0));
    float _2270 = isnan(1.0) ? _4334 : (isnan(_4334) ? 1.0 : min(_4334, 1.0));
    float _2271 = dot(vec3(_846, _847, _848), vec3(_2264, _2265, _2266));
    float _4345 = isnan(0.0) ? _2271 : (isnan(_2271) ? 0.0 : max(_2271, 0.0));
    float _2274 = isnan(1.0) ? _4345 : (isnan(_4345) ? 1.0 : min(_4345, 1.0));
    float _2275 = dot(vec3(cbLight._m0[_2067].xyz), vec3(_2264, _2265, _2266));
    float _4356 = isnan(0.0) ? _2275 : (isnan(_2275) ? 0.0 : max(_2275, 0.0));
    float _2279 = _2256 * _2256;
    float _2283 = ((_2274 * _2274) * (_2279 + (-1.0))) + 1.0;
    float _2292 = (exp2(log2(1.0 - (isnan(1.0) ? _4356 : (isnan(_4356) ? 1.0 : min(_4356, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2293 = 1.0 - _2256;
    float _2303 = (0.5 / (((_2195 * ((_2270 * _2293) + _2256)) + 9.9999999392252902907785028219223e-09) + (((_2195 * _2293) + _2256) * _2270))) * _2270;
    float _4367 = isnan(0.0) ? _2303 : (isnan(_2303) ? 0.0 : max(_2303, 0.0));
    float _2305 = (isnan(1.0) ? _4367 : (isnan(_4367) ? 1.0 : min(_4367, 1.0))) * (_2279 / ((_2283 * _2283) * 3.141590118408203125));
    float _2315 = (((_2292 * cbLight._m0[_2244].x) * _2305) * _2053) + (((_2219 * cbLight._m0[_2166].x) * _2233) * _2063);
    float _2316 = (((_2292 * cbLight._m0[_2244].y) * _2305) * _2053) + (((_2219 * cbLight._m0[_2166].y) * _2233) * _2063);
    float _2317 = (((_2292 * cbLight._m0[_2244].z) * _2305) * _2053) + (((_2219 * cbLight._m0[_2166].z) * _2233) * _2063);
    float _2379;
    float _2381;
    float _2383;
    if (_2103)
    {
        _2379 = _2315;
        _2381 = _2316;
        _2383 = _2317;
    }
    else
    {
        uint _2385 = _2030 + 2u;
        uint _2389 = _2030 + 10u;
        float _2403 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2385].w)) * _849) * 0.949999988079071044921875);
        float _2404 = _2403 * _2403;
        float _2405 = cbLight._m0[_2385].x + _924;
        float _2406 = cbLight._m0[_2385].y + _925;
        float _2407 = cbLight._m0[_2385].z + _926;
        float _2411 = inversesqrt(dot(vec3(_2405, _2406, _2407), vec3(_2405, _2406, _2407)));
        float _2412 = _2411 * _2405;
        float _2413 = _2411 * _2406;
        float _2414 = _2411 * _2407;
        float _2415 = dot(vec3(_846, _847, _848), vec3(cbLight._m0[_2385].xyz));
        float _4378 = isnan(0.0) ? _2415 : (isnan(_2415) ? 0.0 : max(_2415, 0.0));
        float _2418 = isnan(1.0) ? _4378 : (isnan(_4378) ? 1.0 : min(_4378, 1.0));
        float _2419 = dot(vec3(_846, _847, _848), vec3(_2412, _2413, _2414));
        float _4389 = isnan(0.0) ? _2419 : (isnan(_2419) ? 0.0 : max(_2419, 0.0));
        float _2422 = isnan(1.0) ? _4389 : (isnan(_4389) ? 1.0 : min(_4389, 1.0));
        float _2423 = dot(vec3(cbLight._m0[_2385].xyz), vec3(_2412, _2413, _2414));
        float _4400 = isnan(0.0) ? _2423 : (isnan(_2423) ? 0.0 : max(_2423, 0.0));
        float _2427 = _2404 * _2404;
        float _2431 = ((_2422 * _2422) * (_2427 + (-1.0))) + 1.0;
        float _2440 = (exp2(log2(1.0 - (isnan(1.0) ? _4400 : (isnan(_4400) ? 1.0 : min(_4400, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2441 = 1.0 - _2404;
        float _2451 = (0.5 / (((_2195 * ((_2418 * _2441) + _2404)) + 9.9999999392252902907785028219223e-09) + (((_2195 * _2441) + _2404) * _2418))) * _2418;
        float _4411 = isnan(0.0) ? _2451 : (isnan(_2451) ? 0.0 : max(_2451, 0.0));
        float _2453 = (isnan(1.0) ? _4411 : (isnan(_4411) ? 1.0 : min(_4411, 1.0))) * (_2427 / ((_2431 * _2431) * 3.141590118408203125));
        float _2454 = isnan(1.0) ? _2045 : (isnan(_2045) ? 1.0 : min(_2045, 1.0));
        _2379 = (((_2440 * cbLight._m0[_2389].x) * _2453) * _2454) + _2315;
        _2381 = (((_2440 * cbLight._m0[_2389].y) * _2453) * _2454) + _2316;
        _2383 = (((_2440 * cbLight._m0[_2389].z) * _2453) * _2454) + _2317;
    }
    float _2489;
    float _2491;
    float _2493;
    if (_2121)
    {
        _2489 = _2379;
        _2491 = _2381;
        _2493 = _2383;
    }
    else
    {
        uint _2500 = _2030 + 3u;
        uint _2504 = _2030 + 11u;
        float _2518 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2500].w)) * _849) * 0.949999988079071044921875);
        float _2519 = _2518 * _2518;
        float _2520 = cbLight._m0[_2500].x + _924;
        float _2521 = cbLight._m0[_2500].y + _925;
        float _2522 = cbLight._m0[_2500].z + _926;
        float _2526 = inversesqrt(dot(vec3(_2520, _2521, _2522), vec3(_2520, _2521, _2522)));
        float _2527 = _2526 * _2520;
        float _2528 = _2526 * _2521;
        float _2529 = _2526 * _2522;
        float _2530 = dot(vec3(_846, _847, _848), vec3(cbLight._m0[_2500].xyz));
        float _4427 = isnan(0.0) ? _2530 : (isnan(_2530) ? 0.0 : max(_2530, 0.0));
        float _2533 = isnan(1.0) ? _4427 : (isnan(_4427) ? 1.0 : min(_4427, 1.0));
        float _2534 = dot(vec3(_846, _847, _848), vec3(_2527, _2528, _2529));
        float _4438 = isnan(0.0) ? _2534 : (isnan(_2534) ? 0.0 : max(_2534, 0.0));
        float _2537 = isnan(1.0) ? _4438 : (isnan(_4438) ? 1.0 : min(_4438, 1.0));
        float _2538 = dot(vec3(cbLight._m0[_2500].xyz), vec3(_2527, _2528, _2529));
        float _4449 = isnan(0.0) ? _2538 : (isnan(_2538) ? 0.0 : max(_2538, 0.0));
        float _2542 = _2519 * _2519;
        float _2546 = ((_2537 * _2537) * (_2542 + (-1.0))) + 1.0;
        float _2555 = (exp2(log2(1.0 - (isnan(1.0) ? _4449 : (isnan(_4449) ? 1.0 : min(_4449, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2556 = 1.0 - _2519;
        float _2566 = (0.5 / (((_2195 * ((_2533 * _2556) + _2519)) + 9.9999999392252902907785028219223e-09) + (((_2195 * _2556) + _2519) * _2533))) * _2533;
        float _4460 = isnan(0.0) ? _2566 : (isnan(_2566) ? 0.0 : max(_2566, 0.0));
        float _2568 = (isnan(1.0) ? _4460 : (isnan(_4460) ? 1.0 : min(_4460, 1.0))) * (_2542 / ((_2546 * _2546) * 3.141590118408203125));
        float _2569 = isnan(1.0) ? _2046 : (isnan(_2046) ? 1.0 : min(_2046, 1.0));
        _2489 = (((_2555 * cbLight._m0[_2504].x) * _2568) * _2569) + _2379;
        _2491 = (((_2555 * cbLight._m0[_2504].y) * _2568) * _2569) + _2381;
        _2493 = (((_2555 * cbLight._m0[_2504].z) * _2568) * _2569) + _2383;
    }
    float _2704;
    float _2706;
    float _2708;
    float _2710;
    float _2712;
    float _2714;
    if (_2028.y == 0u)
    {
        float _2644 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2645 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2644;
        float _2646 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2644;
        float _2647 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2644;
        uvec4 _2659 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2660 = _2659.x;
        uint _2671 = uint((float(_2659.y) * floor(float(uint(cbSceneParam._m0[85u].y * _933) / _2660))) + floor(float(uint(cbSceneParam._m0[85u].x * _932) / _2660)));
        float _2681 = (log2(_2647 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2682 = isnan(0.0) ? _2681 : (isnan(_2681) ? 0.0 : max(_2681, 0.0));
        uint _2685 = uint(isnan(14.0) ? _2682 : (isnan(_2682) ? 14.0 : min(_2682, 14.0)));
        uvec4 _2690 = texelFetch(g_lightClusterGridBuffer, int(((_2685 << 2u) + (_2671 << 6u)) >> 2u));
        uint _2691 = _2690.x;
        uint _2692 = _2659.z;
        float _2792;
        float _2794;
        float _2796;
        float _2798;
        float _2800;
        float _2802;
        if (((((1u << ((_2692 >> 4u) & 15u)) + 4294967295u) & _2691) == 0u) || ((_2692 & 240u) == 0u))
        {
            _2792 = 0.0;
            _2794 = 0.0;
            _2796 = 0.0;
            _2798 = 0.0;
            _2800 = 0.0;
            _2802 = 0.0;
        }
        else
        {
            float _2793;
            float _2795;
            float _2797;
            float _2799;
            float _2801;
            float _2803;
            float _2937 = 0.0;
            float _2938 = 0.0;
            float _2939 = 0.0;
            float _2940 = 0.0;
            float _2941 = 0.0;
            float _2942 = 0.0;
            uint _2943 = 0u;
            uint _2952;
            bool _2953;
            for (;;)
            {
                _2952 = texelFetch(g_lightClassification, int((((_2685 << 5u) + (_2671 << 9u)) + (_2943 << 2u)) >> 2u)).x;
                _2953 = _2952 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2953)
                {
                    frontier_phi_61_pred = _2937;
                    frontier_phi_61_pred_1 = _2942;
                    frontier_phi_61_pred_2 = _2941;
                    frontier_phi_61_pred_3 = _2940;
                    frontier_phi_61_pred_4 = _2939;
                    frontier_phi_61_pred_5 = _2938;
                }
                else
                {
                    float _3061;
                    float _3062;
                    float _3063;
                    float _3064;
                    float _3065;
                    float _3066;
                    uint _3067;
                    _3061 = _2937;
                    _3062 = _2938;
                    _3063 = _2939;
                    _3064 = _2940;
                    _3065 = _2941;
                    _3066 = _2942;
                    _3067 = _2952;
                    float _2993;
                    float _2994;
                    float _2995;
                    float _2996;
                    float _2997;
                    float _2998;
                    for (;;)
                    {
                        uint _3071 = uint(findLSB(_3067)) + (_2943 << 5u);
                        uint _3068 = (_3067 + 4294967295u) & _3067;
                        uint _3073 = _3071 * 48u;
                        vec4 _3087 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3073)).x, texelFetch(g_PointLightRenderingBuffer, int(_3073 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3073 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3073 + 3u)).x));
                        uint _3093 = (_3071 * 48u) + 4u;
                        vec4 _3106 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3093)).x, texelFetch(g_PointLightRenderingBuffer, int(_3093 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3093 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3093 + 3u)).x));
                        uint _3112 = (_3071 * 48u) + 8u;
                        vec3 _3123 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3112)).x, texelFetch(g_PointLightRenderingBuffer, int(_3112 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3112 + 2u)).x));
                        float _3127 = _3087.x - _2645;
                        float _3128 = _3087.y - _2646;
                        float _3129 = _3087.z - _2647;
                        float _3130 = dot(vec3(_3127, _3128, _3129), vec3(_3127, _3128, _3129));
                        float _3133 = inversesqrt(_3130);
                        float _3134 = _3133 * _3127;
                        float _3135 = _3133 * _3128;
                        float _3136 = _3133 * _3129;
                        float _3137 = dot(vec3(_951, _954, _957), vec3(_3134, _3135, _3136));
                        float _3142 = 1.0 - (_3130 * _3087.w);
                        float _4486 = isnan(0.0) ? _3142 : (isnan(_3142) ? 0.0 : max(_3142, 0.0));
                        float _3143 = isnan(1.0) ? _4486 : (isnan(_4486) ? 1.0 : min(_4486, 1.0));
                        float _3144 = sqrt(_3130) * _3106.w;
                        float _3147 = 1.39999997615814208984375 / (_3144 + 1.39999997615814208984375);
                        float _3148 = _3147 * _3147;
                        float _3151 = ((1.0 - _3148) * _3137) + _3148;
                        float _3154 = _3144 * _3144;
                        float _3158 = ((isnan(0.0) ? _3151 : (isnan(_3151) ? 0.0 : max(_3151, 0.0))) * _3143) / ((_3154 * 0.699999988079071044921875) + 1.0);
                        float _3162 = (-0.0) - _2645;
                        float _3163 = (-0.0) - _2646;
                        float _3164 = (-0.0) - _2647;
                        float _3168 = inversesqrt(dot(vec3(_3162, _3163, _3164), vec3(_3162, _3163, _3164)));
                        float _3169 = _3168 * _3162;
                        float _3170 = _3168 * _3163;
                        float _3171 = _3168 * _3164;
                        float _3179 = exp2(log2(1.0 / ((_3154 * 3.5) + 5.0)) * 0.25);
                        float _3180 = 1.0 - _1011;
                        float _3187 = sqrt(1.0 - ((1.0 - (_3180 * _3180)) * (1.0 - (_3179 * _3179))));
                        float _3188 = _3187 * _3187;
                        float _3189 = _3188 * _3188;
                        float _3190 = _3169 + _3134;
                        float _3191 = _3170 + _3135;
                        float _3192 = _3171 + _3136;
                        float _3196 = inversesqrt(dot(vec3(_3190, _3191, _3192), vec3(_3190, _3191, _3192)));
                        float _3200 = dot(vec3(_951, _954, _957), vec3(_3169, _3170, _3171));
                        float _4502 = isnan(0.0) ? _3200 : (isnan(_3200) ? 0.0 : max(_3200, 0.0));
                        float _3203 = isnan(1.0) ? _4502 : (isnan(_4502) ? 1.0 : min(_4502, 1.0));
                        float _3204 = dot(vec3(_951, _954, _957), vec3(_3196 * _3190, _3196 * _3191, _3196 * _3192));
                        float _4513 = isnan(0.0) ? _3204 : (isnan(_3204) ? 0.0 : max(_3204, 0.0));
                        float _3207 = isnan(1.0) ? _4513 : (isnan(_4513) ? 1.0 : min(_4513, 1.0));
                        float _3211 = ((_3207 * _3207) * (_3189 + (-1.0))) + 1.0;
                        float _3212 = _3147 * _3188;
                        float _3213 = _3212 * _3212;
                        float _3216 = ((1.0 - _3213) * _3137) + _3213;
                        float _4524 = isnan(0.0) ? _3216 : (isnan(_3216) ? 0.0 : max(_3216, 0.0));
                        float _3217 = isnan(1.0) ? _4524 : (isnan(_4524) ? 1.0 : min(_4524, 1.0));
                        float _3218 = 1.0 - _3188;
                        float _3228 = (0.5 / (((_3217 * ((_3203 * _3218) + _3188)) + 9.9999999392252902907785028219223e-09) + (((_3217 * _3218) + _3188) * _3203))) * _3217;
                        float _4535 = isnan(0.0) ? _3228 : (isnan(_3228) ? 0.0 : max(_3228, 0.0));
                        float _3239 = (((_3189 * 3.1415927410125732421875) * (isnan(1.0) ? _4535 : (isnan(_4535) ? 1.0 : min(_4535, 1.0)))) / ((_3211 * _3211) * ((_3154 * 2.1991131305694580078125) + 3.141590118408203125))) * _3143;
                        _2996 = (_3158 * _3106.x) + _3064;
                        _2997 = (_3158 * _3106.y) + _3065;
                        _2998 = (_3158 * _3106.z) + _3066;
                        _2993 = (_3239 * _3123.x) + _3061;
                        _2994 = (_3239 * _3123.y) + _3062;
                        _2995 = (_3239 * _3123.z) + _3063;
                        if (_3068 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3061 = _2993;
                            _3062 = _2994;
                            _3063 = _2995;
                            _3064 = _2996;
                            _3065 = _2997;
                            _3066 = _2998;
                            _3067 = _3068;
                        }
                    }
                    frontier_phi_61_pred = _2993;
                    frontier_phi_61_pred_1 = _2998;
                    frontier_phi_61_pred_2 = _2997;
                    frontier_phi_61_pred_3 = _2996;
                    frontier_phi_61_pred_4 = _2995;
                    frontier_phi_61_pred_5 = _2994;
                }
                _2793 = frontier_phi_61_pred;
                _2803 = frontier_phi_61_pred_1;
                _2801 = frontier_phi_61_pred_2;
                _2799 = frontier_phi_61_pred_3;
                _2797 = frontier_phi_61_pred_4;
                _2795 = frontier_phi_61_pred_5;
                uint _2944 = _2943 + 1u;
                if (_2944 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2937 = _2793;
                    _2938 = _2795;
                    _2939 = _2797;
                    _2940 = _2799;
                    _2941 = _2801;
                    _2942 = _2803;
                    _2943 = _2944;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2792 = _2793;
            _2794 = _2795;
            _2796 = _2797;
            _2798 = _2799;
            _2800 = _2801;
            _2802 = _2803;
        }
        uvec4 _2806 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2807 = _2806.z;
        uint _2809 = (_2807 >> 8u) & 15u;
        float _2905;
        float _2907;
        float _2909;
        float _2911;
        float _2913;
        float _2915;
        if (((4294967295u << _2809) & _2691) == 0u)
        {
            _2905 = _2792;
            _2907 = _2794;
            _2909 = _2796;
            _2911 = _2798;
            _2913 = _2800;
            _2915 = _2802;
        }
        else
        {
            float _2930 = inversesqrt(dot(vec3(_2645, _2646, _2647), vec3(_2645, _2646, _2647)));
            float _2931 = _2930 * _2645;
            float _2932 = _2930 * _2646;
            float _2933 = _2930 * _2647;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2809 < ((_2807 >> 12u) & 15u))
            {
                float _2906;
                float _2908;
                float _2910;
                float _2912;
                float _2914;
                float _2916;
                float _3044 = _2792;
                float _3045 = _2794;
                float _3046 = _2796;
                float _3047 = _2798;
                float _3048 = _2800;
                float _3049 = _2802;
                uint _3050 = _2809;
                uint _3059;
                bool _3060;
                for (;;)
                {
                    _3059 = texelFetch(g_lightClassification, int((((_2685 << 5u) + (_2671 << 9u)) + (_3050 << 2u)) >> 2u)).x;
                    _3060 = _3059 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_3060)
                    {
                        frontier_phi_67_pred = _3047;
                        frontier_phi_67_pred_1 = _3048;
                        frontier_phi_67_pred_2 = _3049;
                        frontier_phi_67_pred_3 = _3046;
                        frontier_phi_67_pred_4 = _3045;
                        frontier_phi_67_pred_5 = _3044;
                    }
                    else
                    {
                        float _3244;
                        float _3245;
                        float _3246;
                        float _3247;
                        float _3248;
                        float _3249;
                        float _3537;
                        float _3538;
                        float _3539;
                        float _3540;
                        float _3541;
                        float _3542;
                        float _3257 = _3044;
                        float _3258 = _3045;
                        float _3259 = _3046;
                        float _3260 = _3047;
                        float _3261 = _3048;
                        float _3262 = _3049;
                        uint _3263 = _3059;
                        uint _3264;
                        vec4 _3289;
                        float _3290;
                        vec4 _3305;
                        vec3 _3317;
                        vec4 _3332;
                        vec4 _3347;
                        float _3393;
                        bool _3394;
                        for (;;)
                        {
                            uint _3274 = ((_3050 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3263));
                            _3264 = (_3263 + 4294967295u) & _3263;
                            uint _3276 = _3274 * 40u;
                            _3289 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3276)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3276 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3276 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3276 + 3u)).x));
                            _3290 = _3289.w;
                            uint _3292 = (_3274 * 40u) + 4u;
                            _3305 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3292)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3292 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3292 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3292 + 3u)).x));
                            uint _3307 = (_3274 * 40u) + 8u;
                            _3317 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3307)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3307 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3307 + 2u)).x));
                            uint _3319 = (_3274 * 40u) + 16u;
                            _3332 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3319)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3319 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3319 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3319 + 3u)).x));
                            uint _3334 = (_3274 * 40u) + 20u;
                            _3347 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3334)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3334 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3334 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3334 + 3u)).x));
                            uint _3349 = (_3274 * 40u) + 24u;
                            vec4 _3362 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3349)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3349 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3349 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3349 + 3u)).x));
                            uint _3368 = (_3274 * 40u) + 28u;
                            vec4 _3381 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3368)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3368 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3368 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3368 + 3u)).x));
                            _3393 = fma(_2647, _3381.z, fma(_2646, _3381.y, _3381.x * _2645)) + _3381.w;
                            _3394 = !((fma(_2647, _3362.z, fma(_2646, _3362.y, _3362.x * _2645)) + _3362.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3394)
                            {
                                float _3421 = _3289.x - _2645;
                                float _3422 = _3289.y - _2646;
                                float _3423 = _3289.z - _2647;
                                float _3424 = dot(vec3(_3421, _3422, _3423), vec3(_3421, _3422, _3423));
                                float _3427 = inversesqrt(_3424);
                                float _3428 = _3427 * _3421;
                                float _3429 = _3427 * _3422;
                                float _3430 = _3427 * _3423;
                                float _3434 = 1.0 - (_3424 / (_3290 * _3290));
                                float _4546 = isnan(0.0) ? _3434 : (isnan(_3434) ? 0.0 : max(_3434, 0.0));
                                float _3435 = isnan(1.0) ? _4546 : (isnan(_4546) ? 1.0 : min(_4546, 1.0));
                                float _3439 = sqrt(_3424) * _3305.w;
                                float _3441 = 1.39999997615814208984375 / (_3439 + 1.39999997615814208984375);
                                float _3442 = _3441 * _3441;
                                float _3445 = ((1.0 - _3442) * dot(vec3(_3428, _3429, _3430), vec3(_951, _954, _957))) + _3442;
                                float _3448 = _3439 * _3439;
                                float _3452 = (fma(_2647, _3332.z, fma(_2646, _3332.y, _3332.x * _2645)) + _3332.w) / _3393;
                                float _3453 = (fma(_2647, _3347.z, fma(_2646, _3347.y, _3347.x * _2645)) + _3347.w) / _3393;
                                float _3457 = 1.0 - dot(vec2(_3452, _3453), vec2(_3452, _3453));
                                float _4562 = isnan(0.0) ? _3457 : (isnan(_3457) ? 0.0 : max(_3457, 0.0));
                                float _3458 = isnan(1.0) ? _4562 : (isnan(_4562) ? 1.0 : min(_4562, 1.0));
                                float _3459 = _3458 * (((isnan(0.0) ? _3445 : (isnan(_3445) ? 0.0 : max(_3445, 0.0))) * _3435) / ((_3448 * 0.699999988079071044921875) + 1.0));
                                float _3471 = exp2(log2(1.0 / ((_3448 * 3.5) + 5.0)) * 0.25);
                                float _3472 = 1.0 - _1011;
                                float _3479 = sqrt(1.0 - ((1.0 - (_3472 * _3472)) * (1.0 - (_3471 * _3471))));
                                float _3480 = _3479 * _3479;
                                float _3481 = _3480 * _3480;
                                float _3482 = _3428 - _2931;
                                float _3483 = _3429 - _2932;
                                float _3484 = _3430 - _2933;
                                float _3488 = inversesqrt(dot(vec3(_3482, _3483, _3484), vec3(_3482, _3483, _3484)));
                                float _3492 = dot(vec3(_951, _954, _957), vec3((-0.0) - _2931, (-0.0) - _2932, (-0.0) - _2933));
                                float _4573 = isnan(0.0) ? _3492 : (isnan(_3492) ? 0.0 : max(_3492, 0.0));
                                float _3495 = isnan(1.0) ? _4573 : (isnan(_4573) ? 1.0 : min(_4573, 1.0));
                                float _3496 = dot(vec3(_951, _954, _957), vec3(_3488 * _3482, _3488 * _3483, _3488 * _3484));
                                float _4584 = isnan(0.0) ? _3496 : (isnan(_3496) ? 0.0 : max(_3496, 0.0));
                                float _3499 = isnan(1.0) ? _4584 : (isnan(_4584) ? 1.0 : min(_4584, 1.0));
                                float _3503 = ((_3499 * _3499) * (_3481 + (-1.0))) + 1.0;
                                float _3504 = _3441 * _3480;
                                float _3505 = _3504 * _3504;
                                float _3511 = ((1.0 - _3505) * dot(vec3(_951, _954, _957), vec3(_3428, _3429, _3430))) + _3505;
                                float _4595 = isnan(0.0) ? _3511 : (isnan(_3511) ? 0.0 : max(_3511, 0.0));
                                float _3512 = isnan(1.0) ? _4595 : (isnan(_4595) ? 1.0 : min(_4595, 1.0));
                                float _3513 = 1.0 - _3480;
                                float _3523 = (0.5 / (((_3512 * ((_3495 * _3513) + _3480)) + 9.9999999392252902907785028219223e-09) + (((_3512 * _3513) + _3480) * _3495))) * _3512;
                                float _4606 = isnan(0.0) ? _3523 : (isnan(_3523) ? 0.0 : max(_3523, 0.0));
                                float _3533 = (_3458 * _3435) * (((_3481 * 3.1415927410125732421875) * (isnan(1.0) ? _4606 : (isnan(_4606) ? 1.0 : min(_4606, 1.0)))) / ((_3503 * _3503) * ((_3448 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3533 * _3317.x;
                                frontier_phi_73_pred_1 = _3533 * _3317.y;
                                frontier_phi_73_pred_2 = _3459 * _3305.z;
                                frontier_phi_73_pred_3 = _3459 * _3305.y;
                                frontier_phi_73_pred_4 = _3459 * _3305.x;
                                frontier_phi_73_pred_5 = _3533 * _3317.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3537 = frontier_phi_73_pred;
                            _3538 = frontier_phi_73_pred_1;
                            _3542 = frontier_phi_73_pred_2;
                            _3541 = frontier_phi_73_pred_3;
                            _3540 = frontier_phi_73_pred_4;
                            _3539 = frontier_phi_73_pred_5;
                            _3247 = _3540 + _3260;
                            _3248 = _3541 + _3261;
                            _3249 = _3542 + _3262;
                            _3244 = _3537 + _3257;
                            _3245 = _3538 + _3258;
                            _3246 = _3539 + _3259;
                            if (_3264 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3257 = _3244;
                                _3258 = _3245;
                                _3259 = _3246;
                                _3260 = _3247;
                                _3261 = _3248;
                                _3262 = _3249;
                                _3263 = _3264;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3247;
                        frontier_phi_67_pred_1 = _3248;
                        frontier_phi_67_pred_2 = _3249;
                        frontier_phi_67_pred_3 = _3246;
                        frontier_phi_67_pred_4 = _3245;
                        frontier_phi_67_pred_5 = _3244;
                    }
                    _2912 = frontier_phi_67_pred;
                    _2914 = frontier_phi_67_pred_1;
                    _2916 = frontier_phi_67_pred_2;
                    _2910 = frontier_phi_67_pred_3;
                    _2908 = frontier_phi_67_pred_4;
                    _2906 = frontier_phi_67_pred_5;
                    uint _3051 = _3050 + 1u;
                    if (_3051 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3044 = _2906;
                        _3045 = _2908;
                        _3046 = _2910;
                        _3047 = _2912;
                        _3048 = _2914;
                        _3049 = _2916;
                        _3050 = _3051;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2914;
                frontier_phi_55_56_ladder_1 = _2916;
                frontier_phi_55_56_ladder_2 = _2912;
                frontier_phi_55_56_ladder_3 = _2910;
                frontier_phi_55_56_ladder_4 = _2908;
                frontier_phi_55_56_ladder_5 = _2906;
            }
            else
            {
                frontier_phi_55_56_ladder = _2800;
                frontier_phi_55_56_ladder_1 = _2802;
                frontier_phi_55_56_ladder_2 = _2798;
                frontier_phi_55_56_ladder_3 = _2796;
                frontier_phi_55_56_ladder_4 = _2794;
                frontier_phi_55_56_ladder_5 = _2792;
            }
            _2905 = frontier_phi_55_56_ladder_5;
            _2907 = frontier_phi_55_56_ladder_4;
            _2909 = frontier_phi_55_56_ladder_3;
            _2911 = frontier_phi_55_56_ladder_2;
            _2913 = frontier_phi_55_56_ladder;
            _2915 = frontier_phi_55_56_ladder_1;
        }
        float _2920 = isnan(1.0) ? _995 : (isnan(_995) ? 1.0 : min(_995, 1.0));
        _2704 = (_2920 * _2911) + _2159;
        _2706 = (_2920 * _2913) + _2161;
        _2708 = (_2920 * _2915) + _2163;
        _2710 = ((_2905 * 0.039999999105930328369140625) * _2920) + _2489;
        _2712 = ((_2907 * 0.039999999105930328369140625) * _2920) + _2491;
        _2714 = ((_2909 * 0.039999999105930328369140625) * _2920) + _2493;
    }
    else
    {
        _2704 = _2159;
        _2706 = _2161;
        _2708 = _2163;
        _2710 = _2489;
        _2712 = _2491;
        _2714 = _2493;
    }
    float _4622 = isnan(0.0) ? _980 : (isnan(_980) ? 0.0 : max(_980, 0.0));
    float _4633 = isnan(0.0) ? _981 : (isnan(_981) ? 0.0 : max(_981, 0.0));
    float _4644 = isnan(0.0) ? _982 : (isnan(_982) ? 0.0 : max(_982, 0.0));
    uint _2734 = _253 + 6u;
    float _2742 = _932 / cbSceneParam._m0[86u].x;
    float _2743 = _933 / cbSceneParam._m0[86u].y;
    vec4 _2757 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2742, _2743, (log2((isnan(cbSceneParam._m0[77u].w) ? _867 : (isnan(_867) ? cbSceneParam._m0[77u].w : min(_867, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2759 = _2757.x;
    float _2760 = _2757.y;
    float _2761 = _2757.z;
    float _2762 = _2757.w;
    float _2855;
    float _2857;
    float _2859;
    float _2861;
    if (_867 > cbSceneParam._m0[78u].w)
    {
        float _2817 = isnan(_867) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _867 : min(cbSceneParam._m0[80u].w, _867));
        float _2818 = _2817 / _867;
        float _2829 = _2818 * _917;
        float _2830 = _918 * _2818;
        float _2831 = (-0.0) - _2830;
        float _2833 = _2818 * _919;
        float _2835 = (cbSceneParam._m0[77u].w * _2831) / _2817;
        float _2836 = _2835 + cbSceneParam._m0[79u].w;
        float _2837 = cbSceneParam._m0[79u].w - _2830;
        float _2843 = sqrt(((_2829 * _2829) + (_2830 * _2830)) + (_2833 * _2833));
        float _2846 = (1.0 - (cbSceneParam._m0[77u].w / _2817)) * _2843;
        float _2851 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2853 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3006;
        if (abs((_2831 - _2835) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3006 = ((((_2836 > 0.0) ? exp2(_2851 * _2836) : (2.0 - exp2(_2853 * _2836))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2846;
        }
        else
        {
            float _2966 = 1.0 / cbSceneParam._m0[80u].x;
            float _2967 = isnan(_2837) ? _2836 : (isnan(_2836) ? _2837 : max(_2836, _2837));
            float _2968 = isnan(_2837) ? _2836 : (isnan(_2836) ? _2837 : min(_2836, _2837));
            float _2977 = isnan(0.0) ? _2967 : (isnan(_2967) ? 0.0 : min(_2967, 0.0));
            float _2978 = isnan(0.0) ? _2968 : (isnan(_2968) ? 0.0 : min(_2968, 0.0));
            _3006 = ((abs(_2843 / _2831) * cbSceneParam._m0[80u].y) * ((((_2977 - _2978) * 2.0) - ((exp2(_2851 * (isnan(0.0) ? _2967 : (isnan(_2967) ? 0.0 : max(_2967, 0.0)))) - exp2(_2851 * (isnan(0.0) ? _2968 : (isnan(_2968) ? 0.0 : max(_2968, 0.0))))) * _2966)) - ((exp2(_2853 * _2977) - exp2(_2853 * _2978)) * _2966))) + (_2846 * cbSceneParam._m0[80u].z);
        }
        vec4 _3008 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2742, _2743, 1.0), 0.0);
        float _3017 = exp2((_3006 * (-1.44269502162933349609375)) * (1.0 - _3008.w));
        float _3018 = log2(_3017);
        float _3034 = log2(_2762);
        _2855 = (exp2(_3034 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3018 * cbSceneParam._m0[78u].x)) * _3008.x) / cbSceneParam._m0[78u].x)) + _2759;
        _2857 = (exp2(_3034 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3018 * cbSceneParam._m0[78u].y)) * _3008.y) / cbSceneParam._m0[78u].y)) + _2760;
        _2859 = (exp2(_3034 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3018 * cbSceneParam._m0[78u].z)) * _3008.z) / cbSceneParam._m0[78u].z)) + _2761;
        _2861 = _3017 * _2762;
    }
    else
    {
        _2855 = _2759;
        _2857 = _2760;
        _2859 = _2761;
        _2861 = _2762;
    }
    float _2873 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2874 = _2873 == 3.0;
    float _2875 = log2(_2861);
    float _2882 = exp2(_2875 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4622 : (isnan(_4622) ? 1.0 : min(_4622, 1.0))) * (_2704 + ((isnan(0.0) ? _1720 : (isnan(_1720) ? 0.0 : max(_1720, 0.0))) * _995))) + ((_2710 + ((isnan(0.0) ? _2012 : (isnan(_2012) ? 0.0 : max(_2012, 0.0))) * _1799)) * cbPerFrame._m0[3u].x));
    float _2883 = exp2(_2875 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4633 : (isnan(_4633) ? 1.0 : min(_4633, 1.0))) * (_2706 + ((isnan(0.0) ? _1723 : (isnan(_1723) ? 0.0 : max(_1723, 0.0))) * _995))) + ((_2712 + ((isnan(0.0) ? _2015 : (isnan(_2015) ? 0.0 : max(_2015, 0.0))) * _1799)) * cbPerFrame._m0[3u].x));
    float _2884 = exp2(_2875 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4644 : (isnan(_4644) ? 1.0 : min(_4644, 1.0))) * (_2708 + ((isnan(0.0) ? _1726 : (isnan(_1726) ? 0.0 : max(_1726, 0.0))) * _995))) + ((_2714 + ((isnan(0.0) ? _2018 : (isnan(_2018) ? 0.0 : max(_2018, 0.0))) * _1799)) * cbPerFrame._m0[3u].x));
    float _2893 = (_2873 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2893 * (_2874 ? _2882 : (_2882 + (cbSceneParam._m0[72u].w * _2855)));
    SV_Target.y = _2893 * (_2874 ? _2883 : (_2883 + (cbSceneParam._m0[72u].w * _2857)));
    SV_Target.z = _2893 * (_2874 ? _2884 : (_2884 + (cbSceneParam._m0[72u].w * _2859)));
    SV_Target.w = cbInstanceData._m0[_2734].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2734].w;
}


