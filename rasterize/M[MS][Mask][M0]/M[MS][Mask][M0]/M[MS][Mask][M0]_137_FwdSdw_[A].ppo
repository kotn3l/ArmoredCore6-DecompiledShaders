#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_0;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 14) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_29;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_10;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_6;
layout(set = 0, binding = 23) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_8;
layout(set = 0, binding = 24) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_9;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1539;
float _4178;
float _4179;
float _4180;
float _4181;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _241 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _242 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _243 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _249 = inversesqrt(dot(vec3(_241, _242, _243), vec3(_241, _242, _243)));
    float _256 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _263 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _269 = uint(roundEven(NORMAL.w)) * 13u;
    uint _274 = _269 + 1u;
    uint _278 = _269 + 2u;
    float _287 = sqrt(((cbInstanceData._m0[_274].x * cbInstanceData._m0[_274].x) + (cbInstanceData._m0[_269].x * cbInstanceData._m0[_269].x)) + (cbInstanceData._m0[_278].x * cbInstanceData._m0[_278].x));
    float _288 = _287 * TEXCOORD.z;
    float _289 = _287 * TEXCOORD.w;
    vec4 _308 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _332 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _337 = _332.x * cbMtdParam._m0[11u].x;
    float _338 = _332.y * cbMtdParam._m0[11u].y;
    float _339 = _332.z * cbMtdParam._m0[11u].z;
    vec4 _358 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _288) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _289) + cbTextureTilingScale._m0[5u].w));
    vec4 _377 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _417 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _419 = _417.x;
    float _431 = dot(vec4(_419, _417.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _448 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _377.x) * 2.0) - ((((_419 - _431) * cbMtdParam._m0[24u].z) + _431) * cbMtdParam._m0[23u].x))) + 1.0;
    float _4190 = isnan(0.0) ? _448 : (isnan(_448) ? 0.0 : max(_448, 0.0));
    float _449 = isnan(1.0) ? _4190 : (isnan(_4190) ? 1.0 : min(_4190, 1.0));
    float _456 = (_449 * ((_358.x * cbMtdParam._m0[12u].x) - _337)) + _337;
    float _457 = (_449 * ((_358.y * cbMtdParam._m0[12u].y) - _338)) + _338;
    float _458 = (_449 * ((_358.z * cbMtdParam._m0[12u].z) - _339)) + _339;
    vec4 _475 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _288) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _289) + cbTextureTilingScale._m0[3u].w));
    vec4 _495 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _497 = _495.x;
    float _507 = dot(vec4(_497, _495.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _521 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _377.y) * 2.0) - ((((_497 - _507) * cbMtdParam._m0[24u].z) + _507) * cbMtdParam._m0[20u].w))) + 1.0;
    float _4201 = isnan(0.0) ? _521 : (isnan(_521) ? 0.0 : max(_521, 0.0));
    float _522 = isnan(1.0) ? _4201 : (isnan(_4201) ? 1.0 : min(_4201, 1.0));
    float _529 = (_522 * ((_475.x * cbMtdParam._m0[13u].x) - _456)) + _456;
    float _530 = (_522 * ((_475.y * cbMtdParam._m0[13u].y) - _457)) + _457;
    float _531 = (_522 * ((_475.z * cbMtdParam._m0[13u].z) - _458)) + _458;
    vec4 _549 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_9, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[24u].x * _288) + cbTextureTilingScale._m0[24u].z, (cbTextureTilingScale._m0[24u].y * _289) + cbTextureTilingScale._m0[24u].w));
    vec4 _566 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[25u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _568 = _566.x;
    float _578 = dot(vec4(_568, _566.yzw), vec4(cbMtdParam._m0[30u].w, cbMtdParam._m0[31u].xy, 0.0));
    float _590 = ((cbMtdParam._m0[25u].x * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.z) - _377.z) * 2.0) - ((((_568 - _578) * cbMtdParam._m0[24u].z) + _578) * cbMtdParam._m0[20u].z))) + 1.0;
    float _4212 = isnan(0.0) ? _590 : (isnan(_590) ? 0.0 : max(_590, 0.0));
    float _591 = isnan(1.0) ? _4212 : (isnan(_4212) ? 1.0 : min(_4212, 1.0));
    float _604 = ((cbMtdParam._m0[9u].x * 4.55000019073486328125) * _308.x) * ((_591 * ((_549.x * cbMtdParam._m0[14u].x) - _529)) + _529);
    float _607 = ((cbMtdParam._m0[9u].y * 4.55000019073486328125) * _308.y) * ((_591 * ((_549.y * cbMtdParam._m0[14u].y) - _530)) + _530);
    float _610 = ((cbMtdParam._m0[9u].z * 4.55000019073486328125) * _308.z) * ((_591 * ((_549.z * cbMtdParam._m0[14u].z) - _531)) + _531);
    vec4 _628 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _288) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _289) + cbTextureTilingScale._m0[14u].w));
    vec4 _648 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _288) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _289) + cbTextureTilingScale._m0[4u].w));
    vec4 _665 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _667 = _665.x;
    float _668 = _665.y;
    float _669 = _665.z;
    float _676 = ((_648.x - _667) * _449) + _667;
    float _677 = ((_648.y - _668) * _449) + _668;
    float _678 = ((_648.z - _669) * _449) + _669;
    vec4 _690 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _288) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _289) + cbTextureTilingScale._m0[2u].w));
    float _701 = ((_690.x - _676) * _522) + _676;
    float _702 = ((_690.y - _677) * _522) + _677;
    float _703 = ((_690.z - _678) * _522) + _678;
    vec4 _715 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[23u].x * _288) + cbTextureTilingScale._m0[23u].z, (cbTextureTilingScale._m0[23u].y * _289) + cbTextureTilingScale._m0[23u].w));
    float _728 = ((_715.z - _703) * _591) + _703;
    float _731 = ((((_715.x - _701) * _591) + _701) * 2.0) + (-1.0);
    float _733 = ((((_715.y - _702) * _591) + _702) * 2.0) + (-1.0);
    float _734 = dot(vec2(_731, _733), vec2(_731, _733));
    float _4223 = isnan(0.0) ? _734 : (isnan(_734) ? 0.0 : max(_734, 0.0));
    float _739 = sqrt(1.0 - (isnan(1.0) ? _4223 : (isnan(_4223) ? 1.0 : min(_4223, 1.0))));
    vec4 _753 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _778 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _288) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _289) + cbTextureTilingScale._m0[11u].w));
    float _780 = _778.x;
    float _781 = 1.0 - _780;
    float _787 = isnan(-1.0) ? cbMtdParam._m0[24u].x : (isnan(cbMtdParam._m0[24u].x) ? (-1.0) : max(cbMtdParam._m0[24u].x, -1.0));
    float _790 = ((isnan(0.0) ? _787 : (isnan(_787) ? 0.0 : min(_787, 0.0))) * TEXCOORD_8.x) + TEXCOORD_8.w;
    float _799 = (_790 - ((((((_780 - _781) * cbMtdParam._m0[24u].w) + _781) + 0.00999999977648258209228515625) * cbMtdParam._m0[21u].z) * (1.0 - _790))) * (cbMtdParam._m0[21u].w + 1.0);
    float _4244 = isnan(0.0) ? _799 : (isnan(_799) ? 0.0 : max(_799, 0.0));
    float _800 = isnan(1.0) ? _4244 : (isnan(_4244) ? 1.0 : min(_4244, 1.0));
    float _807 = (_800 * ((_628.x * cbMtdParam._m0[18u].x) - _604)) + _604;
    float _808 = (_800 * ((_628.y * cbMtdParam._m0[18u].y) - _607)) + _607;
    float _809 = (_800 * ((_628.z * cbMtdParam._m0[18u].z) - _610)) + _610;
    vec4 _821 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _288) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _289) + cbTextureTilingScale._m0[19u].w));
    float _823 = _821.x;
    float _824 = 1.0 - _823;
    float _851 = (TEXCOORD_8.x - ((cbMtdParam._m0[22u].w * (1.0 - TEXCOORD_8.x)) * ((((_823 - _824) * cbMtdParam._m0[24u].y) + _824) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _4255 = isnan(0.0) ? _851 : (isnan(_851) ? 0.0 : max(_851, 0.0));
    float _852 = isnan(1.0) ? _4255 : (isnan(_4255) ? 1.0 : min(_4255, 1.0));
    float _860 = ((((cbMtdParam._m0[10u].x - _807) * TEXCOORD_8.x) * cbMtdParam._m0[23u].w) * _852) + _807;
    float _861 = ((((cbMtdParam._m0[10u].y - _808) * TEXCOORD_8.y) * cbMtdParam._m0[23u].w) * _852) + _808;
    float _862 = (((cbMtdParam._m0[23u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _809)) * _852) + _809;
    float _866 = (cbMtdParam._m0[19u].w * (_753.z - _728)) + _728;
    vec4 _880 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _288) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _289) + cbTextureTilingScale._m0[15u].w));
    float _887 = (_880.x * 2.0) + (-1.0);
    float _888 = (_880.y * 2.0) + (-1.0);
    float _889 = dot(vec2(_887, _888), vec2(_887, _888));
    float _4266 = isnan(0.0) ? _889 : (isnan(_889) ? 0.0 : max(_889, 0.0));
    float _897 = (_800 * (_880.z - _866)) + _866;
    float _900 = ((cbMtdParam._m0[23u].y - _897) * _852) + _897;
    vec4 _919 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _288) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _289) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _925 = (_919.x * 2.0) + (-1.0);
    float _926 = (_919.y * 2.0) + (-1.0);
    float _927 = dot(vec2(_925, _926), vec2(_925, _926));
    float _4277 = isnan(0.0) ? _927 : (isnan(_927) ? 0.0 : max(_927, 0.0));
    float _935 = (((_753.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _731;
    float _936 = (((_753.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _733;
    float _948 = (((_887 - _935) + (cbMtdParam._m0[21u].x * _935)) * _800) + _935;
    float _949 = (((_888 - _936) + (cbMtdParam._m0[21u].x * _936)) * _800) + _936;
    float _950 = (_800 * (sqrt(1.0 - (isnan(1.0) ? _4266 : (isnan(_4266) ? 1.0 : min(_4266, 1.0)))) - _739)) + _739;
    float _961 = (((_925 - _948) + (_948 * cbMtdParam._m0[22u].z)) * _852) + _948;
    float _962 = (((_926 - _949) + (_949 * cbMtdParam._m0[22u].z)) * _852) + _949;
    float _963 = ((sqrt(1.0 - (isnan(1.0) ? _4277 : (isnan(_4277) ? 1.0 : min(_4277, 1.0)))) - _950) * _852) + _950;
    float _965 = cbMtdParam._m0[22u].x + _753.w;
    float _968 = fma(_963, _256 * NORMAL.x, fma(_962, _263 * TANGENT.x, (_249 * _241) * _961));
    float _971 = fma(_963, _256 * NORMAL.y, fma(_962, _263 * TANGENT.y, (_249 * _242) * _961));
    float _974 = fma(_963, _256 * NORMAL.z, fma(_962, _263 * TANGENT.z, (_249 * _243) * _961));
    float _978 = inversesqrt(dot(vec3(_968, _971, _974), vec3(_968, _971, _974)));
    float _979 = _978 * _968;
    float _980 = _978 * _971;
    float _981 = _978 * _974;
    float _4288 = isnan(0.0) ? _900 : (isnan(_900) ? 0.0 : max(_900, 0.0));
    float _982 = isnan(1.0) ? _4288 : (isnan(_4288) ? 1.0 : min(_4288, 1.0));
    float _4299 = isnan(0.0) ? _965 : (isnan(_965) ? 0.0 : max(_965, 0.0));
    float _4310 = isnan(0.0) ? _860 : (isnan(_860) ? 0.0 : max(_860, 0.0));
    float _4321 = isnan(0.0) ? _861 : (isnan(_861) ? 0.0 : max(_861, 0.0));
    float _4332 = isnan(0.0) ? _862 : (isnan(_862) ? 0.0 : max(_862, 0.0));
    float _1000 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _1040 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _1050 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _1040);
    float _1051 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _1040);
    float _1052 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _1040);
    float _1056 = inversesqrt(dot(vec3(_1050, _1051, _1052), vec3(_1050, _1051, _1052)));
    float _1057 = _1050 * _1056;
    float _1058 = _1051 * _1056;
    float _1059 = _1052 * _1056;
    vec4 _1064 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _1066 = _1064.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1220 = sqrt(((_1050 * _1050) + (_1051 * _1051)) + (_1052 * _1052));
        float _1226 = (cbMatDynParam._m0[5u].x * _1220) + cbMatDynParam._m0[5u].y;
        float _4343 = isnan(0.0) ? _1226 : (isnan(_1226) ? 0.0 : max(_1226, 0.0));
        float _1227 = isnan(1.0) ? _4343 : (isnan(_4343) ? 1.0 : min(_4343, 1.0));
        float _1231 = (cbMatDynParam._m0[5u].z * _1220) + cbMatDynParam._m0[5u].w;
        float _4354 = isnan(0.0) ? _1231 : (isnan(_1231) ? 0.0 : max(_1231, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4354 : (isnan(_4354) ? 1.0 : min(_4354, 1.0))) - _1227)) + _1227) < ((_1066 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _1077 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1078 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1096 = fma(_981, cbSceneParam._m0[5u].z, fma(_980, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _979));
    float _1099 = fma(_981, cbSceneParam._m0[6u].z, fma(_980, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _979));
    float _1102 = fma(_981, cbSceneParam._m0[7u].z, fma(_980, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _979));
    uint _1115 = _269 + 9u;
    uint _1116 = _1115 + uint(cbMatDynParam._m0[0u].w);
    float _1122 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4310 : (isnan(_4310) ? 1.0 : min(_4310, 1.0)))) * cbInstanceData._m0[_1116].x;
    float _1123 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4321 : (isnan(_4321) ? 1.0 : min(_4321, 1.0)))) * cbInstanceData._m0[_1116].y;
    float _1124 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4332 : (isnan(_4332) ? 1.0 : min(_4332, 1.0)))) * cbInstanceData._m0[_1116].z;
    float _4365 = isnan(0.0) ? _1122 : (isnan(_1122) ? 0.0 : max(_1122, 0.0));
    float _1125 = isnan(1.0) ? _4365 : (isnan(_4365) ? 1.0 : min(_4365, 1.0));
    float _4376 = isnan(0.0) ? _1123 : (isnan(_1123) ? 0.0 : max(_1123, 0.0));
    float _1126 = isnan(1.0) ? _4376 : (isnan(_4376) ? 1.0 : min(_4376, 1.0));
    float _4387 = isnan(0.0) ? _1124 : (isnan(_1124) ? 0.0 : max(_1124, 0.0));
    float _1127 = isnan(1.0) ? _4387 : (isnan(_4387) ? 1.0 : min(_4387, 1.0));
    vec4 _1136 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1077, cbSceneParam._m0[86u].y * _1078));
    float _1140 = ((isnan(1.0) ? _4299 : (isnan(_4299) ? 1.0 : min(_4299, 1.0))) * TEXCOORD_5.w) * _1136.x;
    float _1141 = dot(vec3(_979, _980, _981), vec3(_1057, _1058, _1059));
    float _1144 = _1141 * 2.0;
    float _1148 = (_1144 * _979) - _1057;
    float _1149 = (_1144 * _980) - _1058;
    float _1150 = (_1144 * _981) - _1059;
    float _1154 = abs(dot(vec3(_1057, _1058, _1059), vec3(_979, _980, _981)));
    float _4398 = isnan(0.0) ? _1154 : (isnan(_1154) ? 0.0 : max(_1154, 0.0));
    float _1156 = sqrt(_982);
    float _1169 = exp2((_1156 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4398 : (isnan(_4398) ? 1.0 : min(_4398, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1156 * 3.0));
    float _1201 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1205 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1209 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1538;
    float _1540;
    float _1541;
    float _1542;
    float _1543;
    float _1544;
    float _1545;
    float _1546;
    float _1547;
    float _1548;
    float _1549;
    float _1550;
    float _1551;
    float _1552;
    float _1553;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1263 = fma(_1209, cbModelParam._m0[26u].z, fma(_1205, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1201));
        float _1267 = fma(_1209, cbModelParam._m0[27u].z, fma(_1205, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1201));
        float _1271 = fma(_1209, cbModelParam._m0[28u].z, fma(_1205, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1201));
        float _1296 = _1201 + _979;
        float _1297 = _1205 + _980;
        float _1298 = _1209 + _981;
        float _1308 = fma(_1298, cbModelParam._m0[26u].z, fma(_1297, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1296)) - _1263;
        float _1309 = fma(_1298, cbModelParam._m0[27u].z, fma(_1297, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1296)) - _1267;
        float _1310 = fma(_1298, cbModelParam._m0[28u].z, fma(_1297, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1296)) - _1271;
        float _1314 = inversesqrt(dot(vec3(_1308, _1309, _1310), vec3(_1308, _1309, _1310)));
        float _1327 = ((_1314 * _1308) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1263 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1328 = ((_1314 * _1309) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1267 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1329 = ((_1314 * _1310) / cbModelParam._m0[34u].z) + ((((((_1271 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1332 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1327, _1328, _1329), 0.0);
        vec4 _1339 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1327, _1328, _1329), 0.0);
        vec4 _1346 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1327, _1328, _1329), 0.0);
        vec4 _1353 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1327, _1328, _1329), 0.0);
        float _1366 = exp2((_1332.w + (-0.5)) * 20.0) * 2.0;
        float _1367 = _1366 * (_1332.x + (-0.5));
        float _1368 = _1366 * (_1332.y + (-0.5));
        float _1369 = _1366 * (_1332.z + (-0.5));
        float _1376 = exp2((_1339.w + (-0.5)) * 20.0) * 2.0;
        float _1377 = _1376 * (_1339.x + (-0.5));
        float _1378 = _1376 * (_1339.y + (-0.5));
        float _1379 = _1376 * (_1339.z + (-0.5));
        float _1386 = exp2((_1346.w + (-0.5)) * 20.0) * 2.0;
        float _1387 = _1386 * (_1346.x + (-0.5));
        float _1388 = _1386 * (_1346.y + (-0.5));
        float _1389 = _1386 * (_1346.z + (-0.5));
        float _1396 = exp2((_1353.w + (-0.5)) * 20.0) * 2.0;
        float _1397 = _1396 * (_1353.x + (-0.5));
        float _1398 = _1396 * (_1353.y + (-0.5));
        float _1399 = _1396 * (_1353.z + (-0.5));
        float _1400 = isnan(0.0) ? _1397 : (isnan(_1397) ? 0.0 : max(_1397, 0.0));
        float _1401 = isnan(0.0) ? _1398 : (isnan(_1398) ? 0.0 : max(_1398, 0.0));
        float _1402 = isnan(0.0) ? _1399 : (isnan(_1399) ? 0.0 : max(_1399, 0.0));
        float _1403 = _1367 * 0.5;
        float _1404 = _1377 * 0.5;
        float _1405 = _1387 * 0.5;
        float _1406 = dot(vec3(_1403, _1404, _1405), vec3(_1403, _1404, _1405));
        float _1411 = (_1406 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1406);
        float _1420 = (dot(vec3(_979, _980, _981), vec3(_1411 * _1403, _1411 * _1404, _1411 * _1405)) + 1.0) * 0.5;
        float _4424 = isnan(0.0) ? _1420 : (isnan(_1420) ? 0.0 : max(_1420, 0.0));
        float _1430 = sqrt(((_1404 * _1404) + (_1403 * _1403)) + (_1405 * _1405)) / (_1400 + 9.9999997473787516355514526367188e-06);
        float _4435 = isnan(0.0) ? _1430 : (isnan(_1430) ? 0.0 : max(_1430, 0.0));
        float _1431 = isnan(1.0) ? _4435 : (isnan(_4435) ? 1.0 : min(_4435, 1.0));
        float _1432 = _1431 * 2.0;
        float _1436 = (1.0 - _1431) / (_1431 + 1.0);
        float _4446 = isnan(0.0) ? _1436 : (isnan(_1436) ? 0.0 : max(_1436, 0.0));
        float _1437 = isnan(1.0) ? _4446 : (isnan(_4446) ? 1.0 : min(_4446, 1.0));
        float _1446 = ((((1.0 - _1437) * (_1432 + 2.0)) * exp2(log2(isnan(1.0) ? _4424 : (isnan(_4424) ? 1.0 : min(_4424, 1.0))) * (_1432 + 1.0))) + _1437) * _1400;
        float _1447 = _1368 * 0.5;
        float _1448 = _1378 * 0.5;
        float _1449 = _1388 * 0.5;
        float _1450 = dot(vec3(_1447, _1448, _1449), vec3(_1447, _1448, _1449));
        float _1455 = (_1450 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1450);
        float _1463 = (dot(vec3(_979, _980, _981), vec3(_1455 * _1447, _1455 * _1448, _1455 * _1449)) + 1.0) * 0.5;
        float _4457 = isnan(0.0) ? _1463 : (isnan(_1463) ? 0.0 : max(_1463, 0.0));
        float _1472 = sqrt(((_1448 * _1448) + (_1447 * _1447)) + (_1449 * _1449)) / (_1401 + 9.9999997473787516355514526367188e-06);
        float _4468 = isnan(0.0) ? _1472 : (isnan(_1472) ? 0.0 : max(_1472, 0.0));
        float _1473 = isnan(1.0) ? _4468 : (isnan(_4468) ? 1.0 : min(_4468, 1.0));
        float _1474 = _1473 * 2.0;
        float _1478 = (1.0 - _1473) / (_1473 + 1.0);
        float _4479 = isnan(0.0) ? _1478 : (isnan(_1478) ? 0.0 : max(_1478, 0.0));
        float _1479 = isnan(1.0) ? _4479 : (isnan(_4479) ? 1.0 : min(_4479, 1.0));
        float _1488 = ((((1.0 - _1479) * (_1474 + 2.0)) * exp2(log2(isnan(1.0) ? _4457 : (isnan(_4457) ? 1.0 : min(_4457, 1.0))) * (_1474 + 1.0))) + _1479) * _1401;
        float _1489 = _1369 * 0.5;
        float _1490 = _1379 * 0.5;
        float _1491 = _1389 * 0.5;
        float _1492 = dot(vec3(_1489, _1490, _1491), vec3(_1489, _1490, _1491));
        float _1497 = (_1492 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1492);
        float _1505 = (dot(vec3(_979, _980, _981), vec3(_1497 * _1489, _1497 * _1490, _1497 * _1491)) + 1.0) * 0.5;
        float _4490 = isnan(0.0) ? _1505 : (isnan(_1505) ? 0.0 : max(_1505, 0.0));
        float _1514 = sqrt(((_1490 * _1490) + (_1489 * _1489)) + (_1491 * _1491)) / (_1402 + 9.9999997473787516355514526367188e-06);
        float _4501 = isnan(0.0) ? _1514 : (isnan(_1514) ? 0.0 : max(_1514, 0.0));
        float _1515 = isnan(1.0) ? _4501 : (isnan(_4501) ? 1.0 : min(_4501, 1.0));
        float _1516 = _1515 * 2.0;
        float _1520 = (1.0 - _1515) / (_1515 + 1.0);
        float _4512 = isnan(0.0) ? _1520 : (isnan(_1520) ? 0.0 : max(_1520, 0.0));
        float _1521 = isnan(1.0) ? _4512 : (isnan(_4512) ? 1.0 : min(_4512, 1.0));
        float _1530 = ((((1.0 - _1521) * (_1516 + 2.0)) * exp2(log2(isnan(1.0) ? _4490 : (isnan(_4490) ? 1.0 : min(_4490, 1.0))) * (_1516 + 1.0))) + _1521) * _1402;
        _1538 = _1369;
        _1540 = _1368;
        _1541 = _1367;
        _1542 = _1379;
        _1543 = _1378;
        _1544 = _1377;
        _1545 = _1389;
        _1546 = _1388;
        _1547 = _1387;
        _1548 = _1402;
        _1549 = _1401;
        _1550 = _1400;
        _1551 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1446 : (isnan(_1446) ? 0.0 : max(_1446, 0.0)));
        _1552 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1488 : (isnan(_1488) ? 0.0 : max(_1488, 0.0)));
        _1553 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1530 : (isnan(_1530) ? 0.0 : max(_1530, 0.0)));
    }
    else
    {
        _1538 = _1539;
        _1540 = _1539;
        _1541 = _1539;
        _1542 = _1539;
        _1543 = _1539;
        _1544 = _1539;
        _1545 = _1539;
        _1546 = _1539;
        _1547 = _1539;
        _1548 = _1539;
        _1549 = _1539;
        _1550 = _1539;
        _1551 = 0.0;
        _1552 = 0.0;
        _1553 = 0.0;
    }
    float _1848;
    float _1849;
    float _1850;
    float _1851;
    float _1852;
    float _1853;
    float _1854;
    float _1855;
    float _1856;
    float _1857;
    float _1858;
    float _1859;
    float _1860;
    float _1861;
    float _1862;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1579 = fma(_1209, cbModelParam._m0[30u].z, fma(_1205, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1201));
        float _1583 = fma(_1209, cbModelParam._m0[31u].z, fma(_1205, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1201));
        float _1587 = fma(_1209, cbModelParam._m0[32u].z, fma(_1205, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1201));
        float _1610 = _1201 + _979;
        float _1611 = _1205 + _980;
        float _1612 = _1209 + _981;
        float _1622 = fma(_1612, cbModelParam._m0[30u].z, fma(_1611, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1610)) - _1579;
        float _1623 = fma(_1612, cbModelParam._m0[31u].z, fma(_1611, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1610)) - _1583;
        float _1624 = fma(_1612, cbModelParam._m0[32u].z, fma(_1611, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1610)) - _1587;
        float _1628 = inversesqrt(dot(vec3(_1622, _1623, _1624), vec3(_1622, _1623, _1624)));
        float _1641 = ((_1628 * _1622) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1579 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1642 = ((_1628 * _1623) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1583 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1643 = ((_1628 * _1624) / cbModelParam._m0[35u].z) + ((((((_1587 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1645 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1641, _1642, _1643), 0.0);
        vec4 _1652 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1641, _1642, _1643), 0.0);
        vec4 _1659 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1641, _1642, _1643), 0.0);
        vec4 _1666 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1641, _1642, _1643), 0.0);
        float _1678 = exp2((_1645.w + (-0.5)) * 20.0) * 2.0;
        float _1679 = _1678 * (_1645.x + (-0.5));
        float _1680 = _1678 * (_1645.y + (-0.5));
        float _1681 = _1678 * (_1645.z + (-0.5));
        float _1688 = exp2((_1652.w + (-0.5)) * 20.0) * 2.0;
        float _1689 = _1688 * (_1652.x + (-0.5));
        float _1690 = _1688 * (_1652.y + (-0.5));
        float _1691 = _1688 * (_1652.z + (-0.5));
        float _1698 = exp2((_1659.w + (-0.5)) * 20.0) * 2.0;
        float _1699 = _1698 * (_1659.x + (-0.5));
        float _1700 = _1698 * (_1659.y + (-0.5));
        float _1701 = _1698 * (_1659.z + (-0.5));
        float _1708 = exp2((_1666.w + (-0.5)) * 20.0) * 2.0;
        float _1709 = _1708 * (_1666.x + (-0.5));
        float _1710 = _1708 * (_1666.y + (-0.5));
        float _1711 = _1708 * (_1666.z + (-0.5));
        float _1712 = isnan(0.0) ? _1709 : (isnan(_1709) ? 0.0 : max(_1709, 0.0));
        float _1713 = isnan(0.0) ? _1710 : (isnan(_1710) ? 0.0 : max(_1710, 0.0));
        float _1714 = isnan(0.0) ? _1711 : (isnan(_1711) ? 0.0 : max(_1711, 0.0));
        float _1715 = _1679 * 0.5;
        float _1716 = _1689 * 0.5;
        float _1717 = _1699 * 0.5;
        float _1718 = dot(vec3(_1715, _1716, _1717), vec3(_1715, _1716, _1717));
        float _1723 = (_1718 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1718);
        float _1731 = (dot(vec3(_979, _980, _981), vec3(_1723 * _1715, _1723 * _1716, _1723 * _1717)) + 1.0) * 0.5;
        float _4553 = isnan(0.0) ? _1731 : (isnan(_1731) ? 0.0 : max(_1731, 0.0));
        float _1740 = sqrt(((_1716 * _1716) + (_1715 * _1715)) + (_1717 * _1717)) / (_1712 + 9.9999997473787516355514526367188e-06);
        float _4564 = isnan(0.0) ? _1740 : (isnan(_1740) ? 0.0 : max(_1740, 0.0));
        float _1741 = isnan(1.0) ? _4564 : (isnan(_4564) ? 1.0 : min(_4564, 1.0));
        float _1742 = _1741 * 2.0;
        float _1746 = (1.0 - _1741) / (_1741 + 1.0);
        float _4575 = isnan(0.0) ? _1746 : (isnan(_1746) ? 0.0 : max(_1746, 0.0));
        float _1747 = isnan(1.0) ? _4575 : (isnan(_4575) ? 1.0 : min(_4575, 1.0));
        float _1756 = ((((1.0 - _1747) * (_1742 + 2.0)) * exp2(log2(isnan(1.0) ? _4553 : (isnan(_4553) ? 1.0 : min(_4553, 1.0))) * (_1742 + 1.0))) + _1747) * _1712;
        float _1757 = _1680 * 0.5;
        float _1758 = _1690 * 0.5;
        float _1759 = _1700 * 0.5;
        float _1760 = dot(vec3(_1757, _1758, _1759), vec3(_1757, _1758, _1759));
        float _1765 = (_1760 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1760);
        float _1773 = (dot(vec3(_979, _980, _981), vec3(_1765 * _1757, _1765 * _1758, _1765 * _1759)) + 1.0) * 0.5;
        float _4586 = isnan(0.0) ? _1773 : (isnan(_1773) ? 0.0 : max(_1773, 0.0));
        float _1782 = sqrt(((_1758 * _1758) + (_1757 * _1757)) + (_1759 * _1759)) / (_1713 + 9.9999997473787516355514526367188e-06);
        float _4597 = isnan(0.0) ? _1782 : (isnan(_1782) ? 0.0 : max(_1782, 0.0));
        float _1783 = isnan(1.0) ? _4597 : (isnan(_4597) ? 1.0 : min(_4597, 1.0));
        float _1784 = _1783 * 2.0;
        float _1788 = (1.0 - _1783) / (_1783 + 1.0);
        float _4608 = isnan(0.0) ? _1788 : (isnan(_1788) ? 0.0 : max(_1788, 0.0));
        float _1789 = isnan(1.0) ? _4608 : (isnan(_4608) ? 1.0 : min(_4608, 1.0));
        float _1798 = ((((1.0 - _1789) * (_1784 + 2.0)) * exp2(log2(isnan(1.0) ? _4586 : (isnan(_4586) ? 1.0 : min(_4586, 1.0))) * (_1784 + 1.0))) + _1789) * _1713;
        float _1799 = _1681 * 0.5;
        float _1800 = _1691 * 0.5;
        float _1801 = _1701 * 0.5;
        float _1802 = dot(vec3(_1799, _1800, _1801), vec3(_1799, _1800, _1801));
        float _1807 = (_1802 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1802);
        float _1815 = (dot(vec3(_979, _980, _981), vec3(_1807 * _1799, _1807 * _1800, _1807 * _1801)) + 1.0) * 0.5;
        float _4619 = isnan(0.0) ? _1815 : (isnan(_1815) ? 0.0 : max(_1815, 0.0));
        float _1824 = sqrt(((_1800 * _1800) + (_1799 * _1799)) + (_1801 * _1801)) / (_1714 + 9.9999997473787516355514526367188e-06);
        float _4630 = isnan(0.0) ? _1824 : (isnan(_1824) ? 0.0 : max(_1824, 0.0));
        float _1825 = isnan(1.0) ? _4630 : (isnan(_4630) ? 1.0 : min(_4630, 1.0));
        float _1826 = _1825 * 2.0;
        float _1830 = (1.0 - _1825) / (_1825 + 1.0);
        float _4641 = isnan(0.0) ? _1830 : (isnan(_1830) ? 0.0 : max(_1830, 0.0));
        float _1831 = isnan(1.0) ? _4641 : (isnan(_4641) ? 1.0 : min(_4641, 1.0));
        float _1840 = ((((1.0 - _1831) * (_1826 + 2.0)) * exp2(log2(isnan(1.0) ? _4619 : (isnan(_4619) ? 1.0 : min(_4619, 1.0))) * (_1826 + 1.0))) + _1831) * _1714;
        _1848 = _1681;
        _1849 = _1680;
        _1850 = _1679;
        _1851 = _1691;
        _1852 = _1690;
        _1853 = _1689;
        _1854 = _1701;
        _1855 = _1700;
        _1856 = _1699;
        _1857 = _1714;
        _1858 = _1713;
        _1859 = _1712;
        _1860 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1756 : (isnan(_1756) ? 0.0 : max(_1756, 0.0)));
        _1861 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1798 : (isnan(_1798) ? 0.0 : max(_1798, 0.0)));
        _1862 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1840 : (isnan(_1840) ? 0.0 : max(_1840, 0.0)));
    }
    else
    {
        _1848 = _1539;
        _1849 = _1539;
        _1850 = _1539;
        _1851 = _1539;
        _1852 = _1539;
        _1853 = _1539;
        _1854 = _1539;
        _1855 = _1539;
        _1856 = _1539;
        _1857 = _1539;
        _1858 = _1539;
        _1859 = _1539;
        _1860 = 0.0;
        _1861 = 0.0;
        _1862 = 0.0;
    }
    float _1872 = (cbModelParam._m0[1u].x * (_1860 - _1551)) + _1551;
    float _1873 = (cbModelParam._m0[1u].x * (_1861 - _1552)) + _1552;
    float _1874 = (cbModelParam._m0[1u].x * (_1862 - _1553)) + _1553;
    float _1895 = fma(_1874, cbSceneParam._m0[89u].z, fma(_1873, cbSceneParam._m0[89u].y, _1872 * cbSceneParam._m0[89u].x));
    float _1898 = fma(_1874, cbSceneParam._m0[90u].z, fma(_1873, cbSceneParam._m0[90u].y, _1872 * cbSceneParam._m0[90u].x));
    float _1901 = fma(_1874, cbSceneParam._m0[91u].z, fma(_1873, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1872));
    float _1916 = _1148 * 0.5;
    float _1917 = _1149 * 0.5;
    float _1918 = _1150 * 0.5;
    float _1919 = dot(vec4(_1916, _1917, _1918, 1.0), vec4(_1850, _1853, _1856, _1859));
    float _1922 = dot(vec4(_1916, _1917, _1918, 1.0), vec4(_1849, _1852, _1855, _1858));
    float _1925 = dot(vec4(_1916, _1917, _1918, 1.0), vec4(_1848, _1851, _1854, _1857));
    float _1959;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1932 = dot(vec4(_1916, _1917, _1918, 1.0), vec4(_1538, _1542, _1545, _1548));
        float _1936 = dot(vec4(_1916, _1917, _1918, 1.0), vec4(_1540, _1543, _1546, _1549));
        float _1940 = dot(vec4(_1916, _1917, _1918, 1.0), vec4(_1541, _1544, _1547, _1550));
        float _1947 = dot(vec4(cbModelParam._m0[39u]), vec4(_1916, _1917, _1918, 1.0));
        _1959 = dot(vec3(isnan(0.0) ? _1940 : (isnan(_1940) ? 0.0 : max(_1940, 0.0)), isnan(0.0) ? _1936 : (isnan(_1936) ? 0.0 : max(_1936, 0.0)), isnan(0.0) ? _1932 : (isnan(_1932) ? 0.0 : max(_1932, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1947) ? 0.0 : (isnan(0.0) ? _1947 : max(0.0, _1947))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1959 = 1.0;
    }
    float _1970;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1961 = dot(vec4(cbModelParam._m0[40u]), vec4(_1916, _1917, _1918, 1.0));
        _1970 = dot(vec3(isnan(0.0) ? _1919 : (isnan(_1919) ? 0.0 : max(_1919, 0.0)), isnan(0.0) ? _1922 : (isnan(_1922) ? 0.0 : max(_1922, 0.0)), isnan(0.0) ? _1925 : (isnan(_1925) ? 0.0 : max(_1925, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1961) ? 0.0 : (isnan(0.0) ? _1961 : max(0.0, _1961))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1970 = 1.0;
    }
    float _1974 = (_1970 * cbModelParam._m0[1u].x) + (_1959 * (1.0 - cbModelParam._m0[1u].x));
    float _1984 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _982);
    float _1985 = isnan(_1984) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1984 : min(cbModelParam._m0[25u].z, _1984));
    float _2065;
    float _2067;
    float _2069;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _2032 = fma(_1209, cbModelParam._m0[13u].z, fma(_1205, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1201)) + cbModelParam._m0[13u].w;
        float _2036 = fma(_1209, cbModelParam._m0[14u].z, fma(_1205, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1201)) + cbModelParam._m0[14u].w;
        float _2040 = fma(_1209, cbModelParam._m0[15u].z, fma(_1205, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1201)) + cbModelParam._m0[15u].w;
        float _2043 = fma(_1150, cbModelParam._m0[13u].z, fma(_1149, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1148));
        float _2046 = fma(_1150, cbModelParam._m0[14u].z, fma(_1149, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1148));
        float _2049 = fma(_1150, cbModelParam._m0[15u].z, fma(_1149, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1148));
        float _2077;
        if (_2043 > 0.0)
        {
            _2077 = abs((1.0 - _2032) / _2043);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_2043 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_2032 + 1.0) / _2043);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _2077 = frontier_phi_17_15_ladder;
        }
        float _2246;
        if (_2046 > 0.0)
        {
            _2246 = abs((1.0 - _2036) / _2046);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_2046 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_2036 + 1.0) / _2046);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2246 = frontier_phi_26_22_ladder;
        }
        float _2541;
        if (_2049 > 0.0)
        {
            _2541 = abs((1.0 - _2040) / _2049);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_2049 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_2040 + 1.0) / _2049);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2541 = frontier_phi_38_33_ladder;
        }
        float _2543 = isnan(_2246) ? _2077 : (isnan(_2077) ? _2246 : min(_2077, _2246));
        float _2544 = isnan(_2541) ? _2543 : (isnan(_2543) ? _2541 : min(_2543, _2541));
        float _2548 = (_2544 * _2043) + _2032;
        float _2549 = (_2544 * _2046) + _2036;
        float _2550 = (_2544 * _2049) + _2040;
        float _2551 = _2544 * 9.9999997473787516355514526367188e-05;
        float _2553 = (-1.0) - _2551;
        float _2555 = _2551 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2550 > _2555) || ((_2550 < _2553) || ((_2549 > _2555) || ((_2549 < _2553) || ((_2548 < _2553) || (_2548 > _2555))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2695 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2550, cbModelParam._m0[9u].z, fma(_2549, cbModelParam._m0[9u].y, _2548 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2550, cbModelParam._m0[10u].z, fma(_2549, cbModelParam._m0[10u].y, _2548 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2550, cbModelParam._m0[11u].z, fma(_2549, cbModelParam._m0[11u].y, _2548 * cbModelParam._m0[11u].x))), _1985);
            frontier_phi_16_38_ladder = _2695.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2695.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2695.x * cbModelParam._m0[1u].y;
        }
        _2065 = frontier_phi_16_38_ladder_2;
        _2067 = frontier_phi_16_38_ladder_1;
        _2069 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _2053 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1148, _1149, _1150), _1985);
        _2065 = _2053.x * cbModelParam._m0[1u].y;
        _2067 = _2053.y * cbModelParam._m0[1u].y;
        _2069 = _2053.z * cbModelParam._m0[1u].y;
    }
    float _2073 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _982);
    float _2074 = isnan(_2073) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2073 : min(cbModelParam._m0[25u].w, _2073));
    float _2163;
    float _2165;
    float _2167;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2127 = fma(_1209, cbModelParam._m0[21u].z, fma(_1205, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1201)) + cbModelParam._m0[21u].w;
        float _2131 = fma(_1209, cbModelParam._m0[22u].z, fma(_1205, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1201)) + cbModelParam._m0[22u].w;
        float _2135 = fma(_1209, cbModelParam._m0[23u].z, fma(_1205, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1201)) + cbModelParam._m0[23u].w;
        float _2138 = fma(_1150, cbModelParam._m0[21u].z, fma(_1149, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1148));
        float _2141 = fma(_1150, cbModelParam._m0[22u].z, fma(_1149, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1148));
        float _2144 = fma(_1150, cbModelParam._m0[23u].z, fma(_1149, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1148));
        float _2251;
        if (_2138 > 0.0)
        {
            _2251 = abs((1.0 - _2127) / _2138);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_2138 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_2127 + 1.0) / _2138);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2251 = frontier_phi_28_24_ladder;
        }
        float _2568;
        if (_2141 > 0.0)
        {
            _2568 = abs((1.0 - _2131) / _2141);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_2141 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_2131 + 1.0) / _2141);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2568 = frontier_phi_40_35_ladder;
        }
        float _2895;
        if (_2144 > 0.0)
        {
            _2895 = abs((1.0 - _2135) / _2144);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_2144 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_2135 + 1.0) / _2144);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _2895 = frontier_phi_50_47_ladder;
        }
        float _2897 = isnan(_2568) ? _2251 : (isnan(_2251) ? _2568 : min(_2251, _2568));
        float _2898 = isnan(_2895) ? _2897 : (isnan(_2897) ? _2895 : min(_2897, _2895));
        float _2902 = (_2898 * _2138) + _2127;
        float _2903 = (_2898 * _2141) + _2131;
        float _2904 = (_2898 * _2144) + _2135;
        float _2905 = _2898 * 9.9999997473787516355514526367188e-05;
        float _2906 = (-1.0) - _2905;
        float _2908 = _2905 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_2904 > _2908) || ((_2904 < _2906) || ((_2903 > _2908) || ((_2903 < _2906) || ((_2902 < _2906) || (_2902 > _2908))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _3022 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2904, cbModelParam._m0[17u].z, fma(_2903, cbModelParam._m0[17u].y, _2902 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2904, cbModelParam._m0[18u].z, fma(_2903, cbModelParam._m0[18u].y, _2902 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2904, cbModelParam._m0[19u].z, fma(_2903, cbModelParam._m0[19u].y, _2902 * cbModelParam._m0[19u].x))), _2074);
            frontier_phi_25_50_ladder = _3022.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _3022.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _3022.x * cbModelParam._m0[1u].z;
        }
        _2163 = frontier_phi_25_50_ladder_2;
        _2165 = frontier_phi_25_50_ladder_1;
        _2167 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _2147 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1148, _1149, _1150), _2074);
        _2163 = _2147.x * cbModelParam._m0[1u].z;
        _2165 = _2147.y * cbModelParam._m0[1u].z;
        _2167 = _2147.z * cbModelParam._m0[1u].z;
    }
    float _2179 = ((((1.0 - _1169) * ((_1156 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_1169 * _1156)) * _1140;
    float _2180 = _2179 * ((cbModelParam._m0[1u].w * (_2163 - _2065)) + _2065);
    float _2181 = _2179 * ((cbModelParam._m0[1u].w * (_2165 - _2067)) + _2067);
    float _2182 = _2179 * ((cbModelParam._m0[1u].w * (_2167 - _2069)) + _2069);
    float _2185 = fma(_2182, cbSceneParam._m0[89u].z, fma(_2181, cbSceneParam._m0[89u].y, _2180 * cbSceneParam._m0[89u].x));
    float _2188 = fma(_2182, cbSceneParam._m0[90u].z, fma(_2181, cbSceneParam._m0[90u].y, _2180 * cbSceneParam._m0[90u].x));
    float _2191 = fma(_2182, cbSceneParam._m0[91u].z, fma(_2181, cbSceneParam._m0[91u].y, _2180 * cbSceneParam._m0[91u].x));
    float _2225 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2229 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2233 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2237 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2238 = _2225 / _2237;
    float _2239 = _2229 / _2237;
    float _2240 = _2233 / _2237;
    float _2387;
    float _2388;
    float _2389;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2267 = ((uint(_2240 > cbSceneParam._m0[59u].y) + uint(_2240 > cbSceneParam._m0[59u].x)) + uint(_2240 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2268 = _2267 + 43u;
        uint _2276 = _2267 + 44u;
        uint _2284 = _2267 + 45u;
        uint _2292 = _2267 + 46u;
        float _2303 = fma(_2237, cbSceneParam._m0[_2268].w, fma(_2233, cbSceneParam._m0[_2268].z, fma(_2229, cbSceneParam._m0[_2268].y, _2225 * cbSceneParam._m0[_2268].x)));
        float _2307 = fma(_2237, cbSceneParam._m0[_2276].w, fma(_2233, cbSceneParam._m0[_2276].z, fma(_2229, cbSceneParam._m0[_2276].y, _2225 * cbSceneParam._m0[_2276].x)));
        float _2315 = fma(_2237, cbSceneParam._m0[_2292].w, fma(_2233, cbSceneParam._m0[_2292].z, fma(_2229, cbSceneParam._m0[_2292].y, _2225 * cbSceneParam._m0[_2292].x)));
        float _2320 = cbSceneParam._m0[33u].z * _2315;
        float _2322 = cbSceneParam._m0[33u].w * _2315;
        float _2325 = fma(_2237, cbSceneParam._m0[_2284].w, fma(_2233, cbSceneParam._m0[_2284].z, fma(_2229, cbSceneParam._m0[_2284].y, _2225 * cbSceneParam._m0[_2284].x))) / _2315;
        float _2373 = (cbSceneParam._m0[33u].x - sqrt(((_2239 * _2239) + (_2238 * _2238)) + (_2240 * _2240))) * cbSceneParam._m0[33u].y;
        float _4767 = isnan(0.0) ? _2373 : (isnan(_2373) ? 0.0 : max(_2373, 0.0));
        float _2380 = (isnan(1.0) ? _4767 : (isnan(_4767) ? 1.0 : min(_4767, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2320 + _2303) / _2315, (_2322 + _2307) / _2315), _2325), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2322 + _2303) / _2315, (_2307 - _2320) / _2315), _2325), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2303 - _2320) / _2315, (_2307 - _2322) / _2315), _2325), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2303 - _2322) / _2315, (_2320 + _2307) / _2315), _2325), 0.0)).x), vec4(0.25)));
        _2387 = 1.0 - (_2380 * cbSceneParam._m0[34u].x);
        _2388 = 1.0 - (_2380 * cbSceneParam._m0[34u].y);
        _2389 = 1.0 - (_2380 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2387 = 1.0;
        _2388 = 1.0;
        _2389 = 1.0;
    }
    float _2453;
    float _2455;
    float _2457;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2441 = fma(_2237, cbSceneParam._m0[63u].w, fma(_2233, cbSceneParam._m0[63u].z, fma(_2229, cbSceneParam._m0[63u].y, _2225 * cbSceneParam._m0[63u].x)));
        float _2442 = fma(_2237, cbSceneParam._m0[60u].w, fma(_2233, cbSceneParam._m0[60u].z, fma(_2229, cbSceneParam._m0[60u].y, _2225 * cbSceneParam._m0[60u].x))) / _2441;
        float _2443 = fma(_2237, cbSceneParam._m0[61u].w, fma(_2233, cbSceneParam._m0[61u].z, fma(_2229, cbSceneParam._m0[61u].y, _2225 * cbSceneParam._m0[61u].x))) / _2441;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_2442 >= cbSceneParam._m0[64u].x) && (_2443 >= cbSceneParam._m0[64u].y)) && (_2442 <= cbSceneParam._m0[64u].z)) && (_2443 <= cbSceneParam._m0[64u].w))
        {
            float _2581 = fma(_2237, cbSceneParam._m0[62u].w, fma(_2233, cbSceneParam._m0[62u].z, fma(_2229, cbSceneParam._m0[62u].y, _2225 * cbSceneParam._m0[62u].x))) / _2441;
            float _2585 = isnan(cbSceneParam._m0[41u].w) ? _2581 : (isnan(_2581) ? cbSceneParam._m0[41u].w : max(_2581, cbSceneParam._m0[41u].w));
            float _2628 = (cbSceneParam._m0[33u].x - sqrt(((_2239 * _2239) + (_2238 * _2238)) + (_2240 * _2240))) * cbSceneParam._m0[33u].y;
            float _4783 = isnan(0.0) ? _2628 : (isnan(_2628) ? 0.0 : max(_2628, 0.0));
            float _2635 = (isnan(1.0) ? _4783 : (isnan(_4783) ? 1.0 : min(_4783, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2442, cbSceneParam._m0[33u].w + _2443), _2585), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2442, _2443 - cbSceneParam._m0[33u].z), _2585), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2442 - cbSceneParam._m0[33u].z, _2443 - cbSceneParam._m0[33u].w), _2585), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2442 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2443), _2585), 0.0)).x), vec4(0.25)));
            float _2639 = 1.0 - (_2635 * cbSceneParam._m0[34u].x);
            float _2640 = 1.0 - (_2635 * cbSceneParam._m0[34u].y);
            float _2641 = 1.0 - (_2635 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_2641) ? _2389 : (isnan(_2389) ? _2641 : min(_2389, _2641));
            frontier_phi_37_36_ladder_1 = isnan(_2640) ? _2388 : (isnan(_2388) ? _2640 : min(_2388, _2640));
            frontier_phi_37_36_ladder_2 = isnan(_2639) ? _2387 : (isnan(_2387) ? _2639 : min(_2387, _2639));
        }
        else
        {
            frontier_phi_37_36_ladder = _2389;
            frontier_phi_37_36_ladder_1 = _2388;
            frontier_phi_37_36_ladder_2 = _2387;
        }
        _2453 = frontier_phi_37_36_ladder_2;
        _2455 = frontier_phi_37_36_ladder_1;
        _2457 = frontier_phi_37_36_ladder;
    }
    else
    {
        _2453 = _2387;
        _2455 = _2388;
        _2457 = _2389;
    }
    uvec4 _2462 = floatBitsToUint(cbInstanceData._m0[_269 + 5u]);
    uint _2464 = _2462.x * 14u;
    uint _2465 = _2464 + 13u;
    float _2472 = _1140 + (-1.0);
    float _2477 = (cbLight._m0[_2465].x * _2472) + 1.0;
    float _2478 = (cbLight._m0[_2465].y * _2472) + 1.0;
    float _2479 = (cbLight._m0[_2465].z * _2472) + 1.0;
    float _2480 = (cbLight._m0[_2465].w * _2472) + 1.0;
    uint _2481 = _2464 + 5u;
    float _2487 = isnan(1.0) ? _2478 : (isnan(_2478) ? 1.0 : min(_2478, 1.0));
    uint _2491 = _2464 + 4u;
    float _2500 = isnan(1.0) ? _2477 : (isnan(_2477) ? 1.0 : min(_2477, 1.0));
    uint _2504 = _2464 | 1u;
    float _2515 = dot(vec3(cbLight._m0[_2464].xyz), vec3(_979, _980, _981));
    float _2518 = dot(vec3(cbLight._m0[_2504].xyz), vec3(_979, _980, _981));
    float _4819 = isnan(0.0) ? _2515 : (isnan(_2515) ? 0.0 : max(_2515, 0.0));
    float _4830 = isnan(0.0) ? _2518 : (isnan(_2518) ? 0.0 : max(_2518, 0.0));
    float _2523 = (isnan(1.0) ? _4819 : (isnan(_4819) ? 1.0 : min(_4819, 1.0))) * 0.3183098733425140380859375;
    float _2525 = (isnan(1.0) ? _4830 : (isnan(_4830) ? 1.0 : min(_4830, 1.0))) * 0.3183098733425140380859375;
    float _2532 = ((cbLight._m0[_2481].x * _2487) * _2525) + (((cbLight._m0[_2491].x * _2453) * _2500) * _2523);
    float _2533 = ((_2487 * cbLight._m0[_2481].y) * _2525) + (((cbLight._m0[_2491].y * _2455) * _2500) * _2523);
    float _2534 = ((_2487 * cbLight._m0[_2481].z) * _2525) + (((cbLight._m0[_2491].z * _2457) * _2500) * _2523);
    uvec4 _2538 = floatBitsToUint(cbLight._m0[_2464 + 12u]);
    bool _2540 = _2538.x == 0u;
    float _2642;
    float _2644;
    float _2646;
    if (_2540)
    {
        _2642 = _2532;
        _2644 = _2533;
        _2646 = _2534;
    }
    else
    {
        uint _2650 = _2464 + 6u;
        float _2666 = (dot(vec3(cbLight._m0[_2464 + 2u].xyz), vec3(_979, _980, _981)) * 0.5) + 0.5;
        float _2667 = _2666 * _2666;
        float _4841 = isnan(0.0) ? _2667 : (isnan(_2667) ? 0.0 : max(_2667, 0.0));
        float _2668 = isnan(1.0) ? _4841 : (isnan(_4841) ? 1.0 : min(_4841, 1.0));
        float _2669 = isnan(1.0) ? _2479 : (isnan(_2479) ? 1.0 : min(_2479, 1.0));
        _2642 = (((cbLight._m0[_2650].x * 0.3183098733425140380859375) * _2668) * _2669) + _2532;
        _2644 = (((cbLight._m0[_2650].y * 0.3183098733425140380859375) * _2668) * _2669) + _2533;
        _2646 = (((cbLight._m0[_2650].z * 0.3183098733425140380859375) * _2668) * _2669) + _2534;
    }
    bool _2649 = _2538.y == 0u;
    float _2704;
    float _2706;
    float _2708;
    if (_2649)
    {
        _2704 = _2642;
        _2706 = _2644;
        _2708 = _2646;
    }
    else
    {
        uint _2866 = _2464 + 7u;
        float _2882 = (dot(vec3(cbLight._m0[_2464 + 3u].xyz), vec3(_979, _980, _981)) * 0.5) + 0.5;
        float _2883 = _2882 * _2882;
        float _4857 = isnan(0.0) ? _2883 : (isnan(_2883) ? 0.0 : max(_2883, 0.0));
        float _2884 = isnan(1.0) ? _4857 : (isnan(_4857) ? 1.0 : min(_4857, 1.0));
        float _2885 = isnan(1.0) ? _2480 : (isnan(_2480) ? 1.0 : min(_2480, 1.0));
        _2704 = (((cbLight._m0[_2866].x * 0.3183098733425140380859375) * _2884) * _2885) + _2642;
        _2706 = (((cbLight._m0[_2866].y * 0.3183098733425140380859375) * _2884) * _2885) + _2644;
        _2708 = (((cbLight._m0[_2866].z * 0.3183098733425140380859375) * _2884) * _2885) + _2646;
    }
    uint _2711 = _2464 + 8u;
    float _2724 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2464].w)) * _982) * 0.949999988079071044921875);
    float _2725 = _2724 * _2724;
    float _2726 = cbLight._m0[_2464].x + _1057;
    float _2727 = cbLight._m0[_2464].y + _1058;
    float _2728 = cbLight._m0[_2464].z + _1059;
    float _2732 = inversesqrt(dot(vec3(_2726, _2727, _2728), vec3(_2726, _2727, _2728)));
    float _2733 = _2732 * _2726;
    float _2734 = _2732 * _2727;
    float _2735 = _2732 * _2728;
    float _2736 = dot(vec3(_979, _980, _981), vec3(cbLight._m0[_2464].xyz));
    float _4873 = isnan(0.0) ? _2736 : (isnan(_2736) ? 0.0 : max(_2736, 0.0));
    float _2739 = isnan(1.0) ? _4873 : (isnan(_4873) ? 1.0 : min(_4873, 1.0));
    float _4884 = isnan(0.0) ? _1141 : (isnan(_1141) ? 0.0 : max(_1141, 0.0));
    float _2740 = isnan(1.0) ? _4884 : (isnan(_4884) ? 1.0 : min(_4884, 1.0));
    float _2741 = dot(vec3(_979, _980, _981), vec3(_2733, _2734, _2735));
    float _4895 = isnan(0.0) ? _2741 : (isnan(_2741) ? 0.0 : max(_2741, 0.0));
    float _2744 = isnan(1.0) ? _4895 : (isnan(_4895) ? 1.0 : min(_4895, 1.0));
    float _2745 = dot(vec3(cbLight._m0[_2464].xyz), vec3(_2733, _2734, _2735));
    float _4906 = isnan(0.0) ? _2745 : (isnan(_2745) ? 0.0 : max(_2745, 0.0));
    float _2749 = _2725 * _2725;
    float _2753 = ((_2744 * _2744) * (_2749 + (-1.0))) + 1.0;
    float _2764 = (exp2(log2(1.0 - (isnan(1.0) ? _4906 : (isnan(_4906) ? 1.0 : min(_4906, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2765 = 1.0 - _2725;
    float _2776 = (0.5 / (((_2740 * ((_2739 * _2765) + _2725)) + 9.9999999392252902907785028219223e-09) + (((_2740 * _2765) + _2725) * _2739))) * _2739;
    float _4917 = isnan(0.0) ? _2776 : (isnan(_2776) ? 0.0 : max(_2776, 0.0));
    float _2778 = (isnan(1.0) ? _4917 : (isnan(_4917) ? 1.0 : min(_4917, 1.0))) * (_2749 / ((_2753 * _2753) * 3.141590118408203125));
    uint _2792 = _2464 + 9u;
    float _2803 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2504].w)) * _982) * 0.949999988079071044921875);
    float _2804 = _2803 * _2803;
    float _2805 = cbLight._m0[_2504].x + _1057;
    float _2806 = cbLight._m0[_2504].y + _1058;
    float _2807 = cbLight._m0[_2504].z + _1059;
    float _2811 = inversesqrt(dot(vec3(_2805, _2806, _2807), vec3(_2805, _2806, _2807)));
    float _2812 = _2811 * _2805;
    float _2813 = _2811 * _2806;
    float _2814 = _2811 * _2807;
    float _2815 = dot(vec3(_979, _980, _981), vec3(cbLight._m0[_2504].xyz));
    float _4928 = isnan(0.0) ? _2815 : (isnan(_2815) ? 0.0 : max(_2815, 0.0));
    float _2818 = isnan(1.0) ? _4928 : (isnan(_4928) ? 1.0 : min(_4928, 1.0));
    float _2819 = dot(vec3(_979, _980, _981), vec3(_2812, _2813, _2814));
    float _4939 = isnan(0.0) ? _2819 : (isnan(_2819) ? 0.0 : max(_2819, 0.0));
    float _2822 = isnan(1.0) ? _4939 : (isnan(_4939) ? 1.0 : min(_4939, 1.0));
    float _2823 = dot(vec3(cbLight._m0[_2504].xyz), vec3(_2812, _2813, _2814));
    float _4950 = isnan(0.0) ? _2823 : (isnan(_2823) ? 0.0 : max(_2823, 0.0));
    float _2827 = _2804 * _2804;
    float _2831 = ((_2822 * _2822) * (_2827 + (-1.0))) + 1.0;
    float _2840 = (exp2(log2(1.0 - (isnan(1.0) ? _4950 : (isnan(_4950) ? 1.0 : min(_4950, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2841 = 1.0 - _2804;
    float _2851 = (0.5 / (((_2740 * ((_2818 * _2841) + _2804)) + 9.9999999392252902907785028219223e-09) + (((_2740 * _2841) + _2804) * _2818))) * _2818;
    float _4961 = isnan(0.0) ? _2851 : (isnan(_2851) ? 0.0 : max(_2851, 0.0));
    float _2853 = (isnan(1.0) ? _4961 : (isnan(_4961) ? 1.0 : min(_4961, 1.0))) * (_2827 / ((_2831 * _2831) * 3.141590118408203125));
    float _2863 = (((_2840 * cbLight._m0[_2792].x) * _2853) * _2487) + ((((cbLight._m0[_2711].x * _2453) * _2764) * _2778) * _2500);
    float _2864 = (((_2840 * cbLight._m0[_2792].y) * _2853) * _2487) + ((((cbLight._m0[_2711].y * _2455) * _2764) * _2778) * _2500);
    float _2865 = (((_2840 * cbLight._m0[_2792].z) * _2853) * _2487) + ((((cbLight._m0[_2711].z * _2457) * _2764) * _2778) * _2500);
    float _2921;
    float _2923;
    float _2925;
    if (_2540)
    {
        _2921 = _2863;
        _2923 = _2864;
        _2925 = _2865;
    }
    else
    {
        uint _2927 = _2464 + 2u;
        uint _2931 = _2464 + 10u;
        float _2945 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2927].w)) * _982) * 0.949999988079071044921875);
        float _2946 = _2945 * _2945;
        float _2947 = cbLight._m0[_2927].x + _1057;
        float _2948 = cbLight._m0[_2927].y + _1058;
        float _2949 = cbLight._m0[_2927].z + _1059;
        float _2953 = inversesqrt(dot(vec3(_2947, _2948, _2949), vec3(_2947, _2948, _2949)));
        float _2954 = _2953 * _2947;
        float _2955 = _2953 * _2948;
        float _2956 = _2953 * _2949;
        float _2957 = dot(vec3(_979, _980, _981), vec3(cbLight._m0[_2927].xyz));
        float _4972 = isnan(0.0) ? _2957 : (isnan(_2957) ? 0.0 : max(_2957, 0.0));
        float _2960 = isnan(1.0) ? _4972 : (isnan(_4972) ? 1.0 : min(_4972, 1.0));
        float _2961 = dot(vec3(_979, _980, _981), vec3(_2954, _2955, _2956));
        float _4983 = isnan(0.0) ? _2961 : (isnan(_2961) ? 0.0 : max(_2961, 0.0));
        float _2964 = isnan(1.0) ? _4983 : (isnan(_4983) ? 1.0 : min(_4983, 1.0));
        float _2965 = dot(vec3(cbLight._m0[_2927].xyz), vec3(_2954, _2955, _2956));
        float _4994 = isnan(0.0) ? _2965 : (isnan(_2965) ? 0.0 : max(_2965, 0.0));
        float _2969 = _2946 * _2946;
        float _2973 = ((_2964 * _2964) * (_2969 + (-1.0))) + 1.0;
        float _2982 = (exp2(log2(1.0 - (isnan(1.0) ? _4994 : (isnan(_4994) ? 1.0 : min(_4994, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2983 = 1.0 - _2946;
        float _2993 = (0.5 / (((_2740 * ((_2960 * _2983) + _2946)) + 9.9999999392252902907785028219223e-09) + (((_2740 * _2983) + _2946) * _2960))) * _2960;
        float _5005 = isnan(0.0) ? _2993 : (isnan(_2993) ? 0.0 : max(_2993, 0.0));
        float _2995 = (isnan(1.0) ? _5005 : (isnan(_5005) ? 1.0 : min(_5005, 1.0))) * (_2969 / ((_2973 * _2973) * 3.141590118408203125));
        float _2996 = isnan(1.0) ? _2479 : (isnan(_2479) ? 1.0 : min(_2479, 1.0));
        _2921 = (((_2982 * cbLight._m0[_2931].x) * _2995) * _2996) + _2863;
        _2923 = (((_2982 * cbLight._m0[_2931].y) * _2995) * _2996) + _2864;
        _2925 = (((_2982 * cbLight._m0[_2931].z) * _2995) * _2996) + _2865;
    }
    float _3027;
    float _3029;
    float _3031;
    if (_2649)
    {
        _3027 = _2921;
        _3029 = _2923;
        _3031 = _2925;
    }
    else
    {
        uint _3038 = _2464 + 3u;
        uint _3042 = _2464 + 11u;
        float _3056 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_3038].w)) * _982) * 0.949999988079071044921875);
        float _3057 = _3056 * _3056;
        float _3058 = cbLight._m0[_3038].x + _1057;
        float _3059 = cbLight._m0[_3038].y + _1058;
        float _3060 = cbLight._m0[_3038].z + _1059;
        float _3064 = inversesqrt(dot(vec3(_3058, _3059, _3060), vec3(_3058, _3059, _3060)));
        float _3065 = _3064 * _3058;
        float _3066 = _3064 * _3059;
        float _3067 = _3064 * _3060;
        float _3068 = dot(vec3(_979, _980, _981), vec3(cbLight._m0[_3038].xyz));
        float _5021 = isnan(0.0) ? _3068 : (isnan(_3068) ? 0.0 : max(_3068, 0.0));
        float _3071 = isnan(1.0) ? _5021 : (isnan(_5021) ? 1.0 : min(_5021, 1.0));
        float _3072 = dot(vec3(_979, _980, _981), vec3(_3065, _3066, _3067));
        float _5032 = isnan(0.0) ? _3072 : (isnan(_3072) ? 0.0 : max(_3072, 0.0));
        float _3075 = isnan(1.0) ? _5032 : (isnan(_5032) ? 1.0 : min(_5032, 1.0));
        float _3076 = dot(vec3(cbLight._m0[_3038].xyz), vec3(_3065, _3066, _3067));
        float _5043 = isnan(0.0) ? _3076 : (isnan(_3076) ? 0.0 : max(_3076, 0.0));
        float _3080 = _3057 * _3057;
        float _3084 = ((_3075 * _3075) * (_3080 + (-1.0))) + 1.0;
        float _3093 = (exp2(log2(1.0 - (isnan(1.0) ? _5043 : (isnan(_5043) ? 1.0 : min(_5043, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _3094 = 1.0 - _3057;
        float _3104 = (0.5 / (((_2740 * ((_3071 * _3094) + _3057)) + 9.9999999392252902907785028219223e-09) + (((_2740 * _3094) + _3057) * _3071))) * _3071;
        float _5054 = isnan(0.0) ? _3104 : (isnan(_3104) ? 0.0 : max(_3104, 0.0));
        float _3106 = (isnan(1.0) ? _5054 : (isnan(_5054) ? 1.0 : min(_5054, 1.0))) * (_3080 / ((_3084 * _3084) * 3.141590118408203125));
        float _3107 = isnan(1.0) ? _2480 : (isnan(_2480) ? 1.0 : min(_2480, 1.0));
        _3027 = (((_3093 * cbLight._m0[_3042].x) * _3106) * _3107) + _2921;
        _3029 = (((_3093 * cbLight._m0[_3042].y) * _3106) * _3107) + _2923;
        _3031 = (((_3093 * cbLight._m0[_3042].z) * _3106) * _3107) + _2925;
    }
    float _3173;
    float _3175;
    float _3177;
    float _3179;
    float _3181;
    float _3183;
    if (_2462.y == 0u)
    {
        uvec4 _3128 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3129 = _3128.x;
        uint _3140 = uint((float(_3128.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1078) / _3129))) + floor(float(uint(cbSceneParam._m0[85u].x * _1077) / _3129)));
        float _3150 = (log2(_2240 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _3151 = isnan(0.0) ? _3150 : (isnan(_3150) ? 0.0 : max(_3150, 0.0));
        uint _3154 = uint(isnan(14.0) ? _3151 : (isnan(_3151) ? 14.0 : min(_3151, 14.0)));
        uvec4 _3159 = texelFetch(g_lightClusterGridBuffer, int(((_3154 << 2u) + (_3140 << 6u)) >> 2u));
        uint _3160 = _3159.x;
        uint _3161 = _3128.z;
        float _3240;
        float _3242;
        float _3244;
        float _3246;
        float _3248;
        float _3250;
        if (((((1u << ((_3161 >> 4u) & 15u)) + 4294967295u) & _3160) == 0u) || ((_3161 & 240u) == 0u))
        {
            _3240 = 0.0;
            _3242 = 0.0;
            _3244 = 0.0;
            _3246 = 0.0;
            _3248 = 0.0;
            _3250 = 0.0;
        }
        else
        {
            float _3241;
            float _3243;
            float _3245;
            float _3247;
            float _3249;
            float _3251;
            float _3393 = 0.0;
            float _3394 = 0.0;
            float _3395 = 0.0;
            float _3396 = 0.0;
            float _3397 = 0.0;
            float _3398 = 0.0;
            uint _3399 = 0u;
            uint _3408;
            bool _3409;
            for (;;)
            {
                _3408 = texelFetch(g_lightClassification, int((((_3154 << 5u) + (_3140 << 9u)) + (_3399 << 2u)) >> 2u)).x;
                _3409 = _3408 == 0u;
                float frontier_phi_71_pred;
                float frontier_phi_71_pred_1;
                float frontier_phi_71_pred_2;
                float frontier_phi_71_pred_3;
                float frontier_phi_71_pred_4;
                float frontier_phi_71_pred_5;
                if (_3409)
                {
                    frontier_phi_71_pred = _3398;
                    frontier_phi_71_pred_1 = _3397;
                    frontier_phi_71_pred_2 = _3396;
                    frontier_phi_71_pred_3 = _3395;
                    frontier_phi_71_pred_4 = _3394;
                    frontier_phi_71_pred_5 = _3393;
                }
                else
                {
                    float _3538;
                    float _3539;
                    float _3540;
                    float _3541;
                    float _3542;
                    float _3543;
                    uint _3544;
                    _3538 = _3393;
                    _3539 = _3394;
                    _3540 = _3395;
                    _3541 = _3396;
                    _3542 = _3397;
                    _3543 = _3398;
                    _3544 = _3408;
                    float _3465;
                    float _3466;
                    float _3467;
                    float _3468;
                    float _3469;
                    float _3470;
                    for (;;)
                    {
                        uint _3548 = uint(findLSB(_3544)) + (_3399 << 5u);
                        uint _3545 = (_3544 + 4294967295u) & _3544;
                        uint _3550 = _3548 * 48u;
                        vec4 _3564 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3550)).x, texelFetch(g_PointLightRenderingBuffer, int(_3550 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3550 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3550 + 3u)).x));
                        uint _3570 = (_3548 * 48u) + 4u;
                        vec4 _3583 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3570)).x, texelFetch(g_PointLightRenderingBuffer, int(_3570 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3570 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3570 + 3u)).x));
                        uint _3589 = (_3548 * 48u) + 8u;
                        vec3 _3600 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3589)).x, texelFetch(g_PointLightRenderingBuffer, int(_3589 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3589 + 2u)).x));
                        float _3604 = _3564.x - _2238;
                        float _3605 = _3564.y - _2239;
                        float _3606 = _3564.z - _2240;
                        float _3607 = dot(vec3(_3604, _3605, _3606), vec3(_3604, _3605, _3606));
                        float _3610 = inversesqrt(_3607);
                        float _3611 = _3610 * _3604;
                        float _3612 = _3610 * _3605;
                        float _3613 = _3610 * _3606;
                        float _3614 = dot(vec3(_1096, _1099, _1102), vec3(_3611, _3612, _3613));
                        float _3619 = 1.0 - (_3607 * _3564.w);
                        float _5080 = isnan(0.0) ? _3619 : (isnan(_3619) ? 0.0 : max(_3619, 0.0));
                        float _3620 = isnan(1.0) ? _5080 : (isnan(_5080) ? 1.0 : min(_5080, 1.0));
                        float _3621 = sqrt(_3607) * _3583.w;
                        float _3624 = 1.39999997615814208984375 / (_3621 + 1.39999997615814208984375);
                        float _3625 = _3624 * _3624;
                        float _3628 = ((1.0 - _3625) * _3614) + _3625;
                        float _3631 = _3621 * _3621;
                        float _3635 = ((isnan(0.0) ? _3628 : (isnan(_3628) ? 0.0 : max(_3628, 0.0))) * _3620) / ((_3631 * 0.699999988079071044921875) + 1.0);
                        float _3639 = (-0.0) - _2238;
                        float _3640 = (-0.0) - _2239;
                        float _3641 = (-0.0) - _2240;
                        float _3645 = inversesqrt(dot(vec3(_3639, _3640, _3641), vec3(_3639, _3640, _3641)));
                        float _3646 = _3645 * _3639;
                        float _3647 = _3645 * _3640;
                        float _3648 = _3645 * _3641;
                        float _3655 = exp2(log2(1.0 / ((_3631 * 3.5) + 5.0)) * 0.25);
                        float _3656 = 1.0 - _1156;
                        float _3663 = sqrt(1.0 - ((1.0 - (_3656 * _3656)) * (1.0 - (_3655 * _3655))));
                        float _3664 = _3663 * _3663;
                        float _3665 = _3664 * _3664;
                        float _3666 = _3646 + _3611;
                        float _3667 = _3647 + _3612;
                        float _3668 = _3648 + _3613;
                        float _3672 = inversesqrt(dot(vec3(_3666, _3667, _3668), vec3(_3666, _3667, _3668)));
                        float _3676 = dot(vec3(_1096, _1099, _1102), vec3(_3646, _3647, _3648));
                        float _5096 = isnan(0.0) ? _3676 : (isnan(_3676) ? 0.0 : max(_3676, 0.0));
                        float _3679 = isnan(1.0) ? _5096 : (isnan(_5096) ? 1.0 : min(_5096, 1.0));
                        float _3680 = dot(vec3(_1096, _1099, _1102), vec3(_3672 * _3666, _3672 * _3667, _3672 * _3668));
                        float _5107 = isnan(0.0) ? _3680 : (isnan(_3680) ? 0.0 : max(_3680, 0.0));
                        float _3683 = isnan(1.0) ? _5107 : (isnan(_5107) ? 1.0 : min(_5107, 1.0));
                        float _3687 = ((_3683 * _3683) * (_3665 + (-1.0))) + 1.0;
                        float _3688 = _3624 * _3664;
                        float _3689 = _3688 * _3688;
                        float _3692 = ((1.0 - _3689) * _3614) + _3689;
                        float _5118 = isnan(0.0) ? _3692 : (isnan(_3692) ? 0.0 : max(_3692, 0.0));
                        float _3693 = isnan(1.0) ? _5118 : (isnan(_5118) ? 1.0 : min(_5118, 1.0));
                        float _3694 = 1.0 - _3664;
                        float _3704 = (0.5 / (((_3693 * ((_3679 * _3694) + _3664)) + 9.9999999392252902907785028219223e-09) + (((_3693 * _3694) + _3664) * _3679))) * _3693;
                        float _5129 = isnan(0.0) ? _3704 : (isnan(_3704) ? 0.0 : max(_3704, 0.0));
                        float _3715 = (((_3665 * 3.1415927410125732421875) * (isnan(1.0) ? _5129 : (isnan(_5129) ? 1.0 : min(_5129, 1.0)))) / ((_3687 * _3687) * ((_3631 * 2.1991131305694580078125) + 3.141590118408203125))) * _3620;
                        _3468 = (_3635 * _3583.x) + _3541;
                        _3469 = (_3635 * _3583.y) + _3542;
                        _3470 = (_3635 * _3583.z) + _3543;
                        _3465 = (_3715 * _3600.x) + _3538;
                        _3466 = (_3715 * _3600.y) + _3539;
                        _3467 = (_3715 * _3600.z) + _3540;
                        if (_3545 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3538 = _3465;
                            _3539 = _3466;
                            _3540 = _3467;
                            _3541 = _3468;
                            _3542 = _3469;
                            _3543 = _3470;
                            _3544 = _3545;
                        }
                    }
                    frontier_phi_71_pred = _3470;
                    frontier_phi_71_pred_1 = _3469;
                    frontier_phi_71_pred_2 = _3468;
                    frontier_phi_71_pred_3 = _3467;
                    frontier_phi_71_pred_4 = _3466;
                    frontier_phi_71_pred_5 = _3465;
                }
                _3251 = frontier_phi_71_pred;
                _3249 = frontier_phi_71_pred_1;
                _3247 = frontier_phi_71_pred_2;
                _3245 = frontier_phi_71_pred_3;
                _3243 = frontier_phi_71_pred_4;
                _3241 = frontier_phi_71_pred_5;
                uint _3400 = _3399 + 1u;
                if (_3400 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3393 = _3241;
                    _3394 = _3243;
                    _3395 = _3245;
                    _3396 = _3247;
                    _3397 = _3249;
                    _3398 = _3251;
                    _3399 = _3400;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3240 = _3241;
            _3242 = _3243;
            _3244 = _3245;
            _3246 = _3247;
            _3248 = _3249;
            _3250 = _3251;
        }
        uvec4 _3254 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3255 = _3254.z;
        uint _3257 = (_3255 >> 8u) & 15u;
        float _3361;
        float _3363;
        float _3365;
        float _3367;
        float _3369;
        float _3371;
        if (((4294967295u << _3257) & _3160) == 0u)
        {
            _3361 = _3240;
            _3363 = _3242;
            _3365 = _3244;
            _3367 = _3246;
            _3369 = _3248;
            _3371 = _3250;
        }
        else
        {
            float _3386 = inversesqrt(dot(vec3(_2238, _2239, _2240), vec3(_2238, _2239, _2240)));
            float _3387 = _3386 * _2238;
            float _3388 = _3386 * _2239;
            float _3389 = _3386 * _2240;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_3257 < ((_3255 >> 12u) & 15u))
            {
                float _3362;
                float _3364;
                float _3366;
                float _3368;
                float _3370;
                float _3372;
                float _3521 = _3240;
                float _3522 = _3242;
                float _3523 = _3244;
                float _3524 = _3246;
                float _3525 = _3248;
                float _3526 = _3250;
                uint _3527 = _3257;
                uint _3536;
                bool _3537;
                for (;;)
                {
                    _3536 = texelFetch(g_lightClassification, int((((_3154 << 5u) + (_3140 << 9u)) + (_3527 << 2u)) >> 2u)).x;
                    _3537 = _3536 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    float frontier_phi_82_pred_3;
                    float frontier_phi_82_pred_4;
                    float frontier_phi_82_pred_5;
                    if (_3537)
                    {
                        frontier_phi_82_pred = _3526;
                        frontier_phi_82_pred_1 = _3525;
                        frontier_phi_82_pred_2 = _3524;
                        frontier_phi_82_pred_3 = _3523;
                        frontier_phi_82_pred_4 = _3522;
                        frontier_phi_82_pred_5 = _3521;
                    }
                    else
                    {
                        float _3729;
                        float _3730;
                        float _3731;
                        float _3732;
                        float _3733;
                        float _3734;
                        float _4022;
                        float _4023;
                        float _4024;
                        float _4025;
                        float _4026;
                        float _4027;
                        float _3742 = _3521;
                        float _3743 = _3522;
                        float _3744 = _3523;
                        float _3745 = _3524;
                        float _3746 = _3525;
                        float _3747 = _3526;
                        uint _3748 = _3536;
                        uint _3749;
                        vec4 _3774;
                        float _3775;
                        vec4 _3790;
                        vec3 _3802;
                        vec4 _3817;
                        vec4 _3832;
                        float _3878;
                        bool _3879;
                        for (;;)
                        {
                            uint _3759 = ((_3527 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3748));
                            _3749 = (_3748 + 4294967295u) & _3748;
                            uint _3761 = _3759 * 40u;
                            _3774 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3761)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3761 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3761 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3761 + 3u)).x));
                            _3775 = _3774.w;
                            uint _3777 = (_3759 * 40u) + 4u;
                            _3790 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3777)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3777 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3777 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3777 + 3u)).x));
                            uint _3792 = (_3759 * 40u) + 8u;
                            _3802 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3792)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3792 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3792 + 2u)).x));
                            uint _3804 = (_3759 * 40u) + 16u;
                            _3817 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3804)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3804 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3804 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3804 + 3u)).x));
                            uint _3819 = (_3759 * 40u) + 20u;
                            _3832 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3819)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3819 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3819 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3819 + 3u)).x));
                            uint _3834 = (_3759 * 40u) + 24u;
                            vec4 _3847 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3834)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3834 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3834 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3834 + 3u)).x));
                            uint _3853 = (_3759 * 40u) + 28u;
                            vec4 _3866 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3853)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3853 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3853 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3853 + 3u)).x));
                            _3878 = fma(_2240, _3866.z, fma(_2239, _3866.y, _3866.x * _2238)) + _3866.w;
                            _3879 = !((fma(_2240, _3847.z, fma(_2239, _3847.y, _3847.x * _2238)) + _3847.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_3879)
                            {
                                float _3906 = _3774.x - _2238;
                                float _3907 = _3774.y - _2239;
                                float _3908 = _3774.z - _2240;
                                float _3909 = dot(vec3(_3906, _3907, _3908), vec3(_3906, _3907, _3908));
                                float _3912 = inversesqrt(_3909);
                                float _3913 = _3912 * _3906;
                                float _3914 = _3912 * _3907;
                                float _3915 = _3912 * _3908;
                                float _3919 = 1.0 - (_3909 / (_3775 * _3775));
                                float _5140 = isnan(0.0) ? _3919 : (isnan(_3919) ? 0.0 : max(_3919, 0.0));
                                float _3920 = isnan(1.0) ? _5140 : (isnan(_5140) ? 1.0 : min(_5140, 1.0));
                                float _3924 = sqrt(_3909) * _3790.w;
                                float _3926 = 1.39999997615814208984375 / (_3924 + 1.39999997615814208984375);
                                float _3927 = _3926 * _3926;
                                float _3930 = ((1.0 - _3927) * dot(vec3(_3913, _3914, _3915), vec3(_1096, _1099, _1102))) + _3927;
                                float _3933 = _3924 * _3924;
                                float _3937 = (fma(_2240, _3817.z, fma(_2239, _3817.y, _3817.x * _2238)) + _3817.w) / _3878;
                                float _3938 = (fma(_2240, _3832.z, fma(_2239, _3832.y, _3832.x * _2238)) + _3832.w) / _3878;
                                float _3942 = 1.0 - dot(vec2(_3937, _3938), vec2(_3937, _3938));
                                float _5156 = isnan(0.0) ? _3942 : (isnan(_3942) ? 0.0 : max(_3942, 0.0));
                                float _3943 = isnan(1.0) ? _5156 : (isnan(_5156) ? 1.0 : min(_5156, 1.0));
                                float _3944 = _3943 * (((isnan(0.0) ? _3930 : (isnan(_3930) ? 0.0 : max(_3930, 0.0))) * _3920) / ((_3933 * 0.699999988079071044921875) + 1.0));
                                float _3956 = exp2(log2(1.0 / ((_3933 * 3.5) + 5.0)) * 0.25);
                                float _3957 = 1.0 - _1156;
                                float _3964 = sqrt(1.0 - ((1.0 - (_3957 * _3957)) * (1.0 - (_3956 * _3956))));
                                float _3965 = _3964 * _3964;
                                float _3966 = _3965 * _3965;
                                float _3967 = _3913 - _3387;
                                float _3968 = _3914 - _3388;
                                float _3969 = _3915 - _3389;
                                float _3973 = inversesqrt(dot(vec3(_3967, _3968, _3969), vec3(_3967, _3968, _3969)));
                                float _3977 = dot(vec3(_1096, _1099, _1102), vec3((-0.0) - _3387, (-0.0) - _3388, (-0.0) - _3389));
                                float _5167 = isnan(0.0) ? _3977 : (isnan(_3977) ? 0.0 : max(_3977, 0.0));
                                float _3980 = isnan(1.0) ? _5167 : (isnan(_5167) ? 1.0 : min(_5167, 1.0));
                                float _3981 = dot(vec3(_1096, _1099, _1102), vec3(_3973 * _3967, _3973 * _3968, _3973 * _3969));
                                float _5178 = isnan(0.0) ? _3981 : (isnan(_3981) ? 0.0 : max(_3981, 0.0));
                                float _3984 = isnan(1.0) ? _5178 : (isnan(_5178) ? 1.0 : min(_5178, 1.0));
                                float _3988 = ((_3984 * _3984) * (_3966 + (-1.0))) + 1.0;
                                float _3989 = _3926 * _3965;
                                float _3990 = _3989 * _3989;
                                float _3996 = ((1.0 - _3990) * dot(vec3(_1096, _1099, _1102), vec3(_3913, _3914, _3915))) + _3990;
                                float _5189 = isnan(0.0) ? _3996 : (isnan(_3996) ? 0.0 : max(_3996, 0.0));
                                float _3997 = isnan(1.0) ? _5189 : (isnan(_5189) ? 1.0 : min(_5189, 1.0));
                                float _3998 = 1.0 - _3965;
                                float _4008 = (0.5 / (((_3997 * ((_3980 * _3998) + _3965)) + 9.9999999392252902907785028219223e-09) + (((_3997 * _3998) + _3965) * _3980))) * _3997;
                                float _5200 = isnan(0.0) ? _4008 : (isnan(_4008) ? 0.0 : max(_4008, 0.0));
                                float _4018 = (_3943 * _3920) * (((_3966 * 3.1415927410125732421875) * (isnan(1.0) ? _5200 : (isnan(_5200) ? 1.0 : min(_5200, 1.0)))) / ((_3988 * _3988) * ((_3933 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_88_pred = _3944 * _3790.z;
                                frontier_phi_88_pred_1 = _3944 * _3790.y;
                                frontier_phi_88_pred_2 = _3944 * _3790.x;
                                frontier_phi_88_pred_3 = _4018 * _3802.z;
                                frontier_phi_88_pred_4 = _4018 * _3802.y;
                                frontier_phi_88_pred_5 = _4018 * _3802.x;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _4027 = frontier_phi_88_pred;
                            _4026 = frontier_phi_88_pred_1;
                            _4025 = frontier_phi_88_pred_2;
                            _4024 = frontier_phi_88_pred_3;
                            _4023 = frontier_phi_88_pred_4;
                            _4022 = frontier_phi_88_pred_5;
                            _3732 = _4025 + _3745;
                            _3733 = _4026 + _3746;
                            _3734 = _4027 + _3747;
                            _3729 = _4022 + _3742;
                            _3730 = _4023 + _3743;
                            _3731 = _4024 + _3744;
                            if (_3749 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3742 = _3729;
                                _3743 = _3730;
                                _3744 = _3731;
                                _3745 = _3732;
                                _3746 = _3733;
                                _3747 = _3734;
                                _3748 = _3749;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _3734;
                        frontier_phi_82_pred_1 = _3733;
                        frontier_phi_82_pred_2 = _3732;
                        frontier_phi_82_pred_3 = _3731;
                        frontier_phi_82_pred_4 = _3730;
                        frontier_phi_82_pred_5 = _3729;
                    }
                    _3372 = frontier_phi_82_pred;
                    _3370 = frontier_phi_82_pred_1;
                    _3368 = frontier_phi_82_pred_2;
                    _3366 = frontier_phi_82_pred_3;
                    _3364 = frontier_phi_82_pred_4;
                    _3362 = frontier_phi_82_pred_5;
                    uint _3528 = _3527 + 1u;
                    if (_3528 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3521 = _3362;
                        _3522 = _3364;
                        _3523 = _3366;
                        _3524 = _3368;
                        _3525 = _3370;
                        _3526 = _3372;
                        _3527 = _3528;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _3368;
                frontier_phi_63_64_ladder_1 = _3372;
                frontier_phi_63_64_ladder_2 = _3370;
                frontier_phi_63_64_ladder_3 = _3366;
                frontier_phi_63_64_ladder_4 = _3364;
                frontier_phi_63_64_ladder_5 = _3362;
            }
            else
            {
                frontier_phi_63_64_ladder = _3246;
                frontier_phi_63_64_ladder_1 = _3250;
                frontier_phi_63_64_ladder_2 = _3248;
                frontier_phi_63_64_ladder_3 = _3244;
                frontier_phi_63_64_ladder_4 = _3242;
                frontier_phi_63_64_ladder_5 = _3240;
            }
            _3361 = frontier_phi_63_64_ladder_5;
            _3363 = frontier_phi_63_64_ladder_4;
            _3365 = frontier_phi_63_64_ladder_3;
            _3367 = frontier_phi_63_64_ladder;
            _3369 = frontier_phi_63_64_ladder_2;
            _3371 = frontier_phi_63_64_ladder_1;
        }
        float _3376 = isnan(1.0) ? _1140 : (isnan(_1140) ? 1.0 : min(_1140, 1.0));
        _3173 = (_3376 * _3367) + _2704;
        _3175 = (_3376 * _3369) + _2706;
        _3177 = (_3376 * _3371) + _2708;
        _3179 = ((_3361 * 0.039999999105930328369140625) * _3376) + _3027;
        _3181 = ((_3363 * 0.039999999105930328369140625) * _3376) + _3029;
        _3183 = ((_3365 * 0.039999999105930328369140625) * _3376) + _3031;
    }
    else
    {
        _3173 = _2704;
        _3175 = _2706;
        _3177 = _2708;
        _3179 = _3027;
        _3181 = _3029;
        _3183 = _3031;
    }
    float _5216 = isnan(0.0) ? _1125 : (isnan(_1125) ? 0.0 : max(_1125, 0.0));
    float _5227 = isnan(0.0) ? _1126 : (isnan(_1126) ? 0.0 : max(_1126, 0.0));
    float _5238 = isnan(0.0) ? _1127 : (isnan(_1127) ? 0.0 : max(_1127, 0.0));
    float _3200 = ((isnan(1.0) ? _5216 : (isnan(_5216) ? 1.0 : min(_5216, 1.0))) * (_3173 + ((isnan(0.0) ? _1895 : (isnan(_1895) ? 0.0 : max(_1895, 0.0))) * _1140))) + ((_3179 + ((isnan(0.0) ? _2185 : (isnan(_2185) ? 0.0 : max(_2185, 0.0))) * _1974)) * cbPerFrame._m0[3u].x);
    float _3201 = ((isnan(1.0) ? _5227 : (isnan(_5227) ? 1.0 : min(_5227, 1.0))) * (_3175 + ((isnan(0.0) ? _1898 : (isnan(_1898) ? 0.0 : max(_1898, 0.0))) * _1140))) + ((_3181 + ((isnan(0.0) ? _2188 : (isnan(_2188) ? 0.0 : max(_2188, 0.0))) * _1974)) * cbPerFrame._m0[3u].x);
    float _3202 = ((isnan(1.0) ? _5238 : (isnan(_5238) ? 1.0 : min(_5238, 1.0))) * (_3177 + ((isnan(0.0) ? _1901 : (isnan(_1901) ? 0.0 : max(_1901, 0.0))) * _1140))) + ((_3183 + ((isnan(0.0) ? _2191 : (isnan(_2191) ? 0.0 : max(_2191, 0.0))) * _1974)) * cbPerFrame._m0[3u].x);
    uint _3203 = _269 + 6u;
    float _3211 = _1077 / cbSceneParam._m0[86u].x;
    float _3212 = _1078 / cbSceneParam._m0[86u].y;
    vec4 _3226 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3211, _3212, (log2((isnan(cbSceneParam._m0[77u].w) ? _1000 : (isnan(_1000) ? cbSceneParam._m0[77u].w : min(_1000, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3228 = _3226.x;
    float _3229 = _3226.y;
    float _3230 = _3226.z;
    float _3231 = _3226.w;
    float _3303;
    float _3305;
    float _3307;
    float _3309;
    if (_1000 > cbSceneParam._m0[78u].w)
    {
        float _3265 = isnan(_1000) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _1000 : min(cbSceneParam._m0[80u].w, _1000));
        float _3266 = _3265 / _1000;
        float _3277 = _3266 * _1050;
        float _3278 = _1051 * _3266;
        float _3279 = (-0.0) - _3278;
        float _3281 = _3266 * _1052;
        float _3283 = (cbSceneParam._m0[77u].w * _3279) / _3265;
        float _3284 = _3283 + cbSceneParam._m0[79u].w;
        float _3285 = cbSceneParam._m0[79u].w - _3278;
        float _3291 = sqrt(((_3277 * _3277) + (_3278 * _3278)) + (_3281 * _3281));
        float _3294 = (1.0 - (cbSceneParam._m0[77u].w / _3265)) * _3291;
        float _3299 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3301 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3478;
        if (abs((_3279 - _3283) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3478 = ((((_3284 > 0.0) ? exp2(_3299 * _3284) : (2.0 - exp2(_3301 * _3284))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3294;
        }
        else
        {
            float _3422 = 1.0 / cbSceneParam._m0[80u].x;
            float _3423 = isnan(_3285) ? _3284 : (isnan(_3284) ? _3285 : max(_3284, _3285));
            float _3424 = isnan(_3285) ? _3284 : (isnan(_3284) ? _3285 : min(_3284, _3285));
            float _3433 = isnan(0.0) ? _3423 : (isnan(_3423) ? 0.0 : min(_3423, 0.0));
            float _3434 = isnan(0.0) ? _3424 : (isnan(_3424) ? 0.0 : min(_3424, 0.0));
            _3478 = ((abs(_3291 / _3279) * cbSceneParam._m0[80u].y) * ((((_3433 - _3434) * 2.0) - ((exp2(_3299 * (isnan(0.0) ? _3423 : (isnan(_3423) ? 0.0 : max(_3423, 0.0)))) - exp2(_3299 * (isnan(0.0) ? _3424 : (isnan(_3424) ? 0.0 : max(_3424, 0.0))))) * _3422)) - ((exp2(_3301 * _3433) - exp2(_3301 * _3434)) * _3422))) + (_3294 * cbSceneParam._m0[80u].z);
        }
        vec4 _3480 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3211, _3212, 1.0), 0.0);
        float _3489 = exp2((_3478 * (-1.44269502162933349609375)) * (1.0 - _3480.w));
        float _3490 = log2(_3489);
        float _3506 = log2(_3231);
        _3303 = (exp2(_3506 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3490 * cbSceneParam._m0[78u].x)) * _3480.x) / cbSceneParam._m0[78u].x)) + _3228;
        _3305 = (exp2(_3506 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3490 * cbSceneParam._m0[78u].y)) * _3480.y) / cbSceneParam._m0[78u].y)) + _3229;
        _3307 = (exp2(_3506 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3490 * cbSceneParam._m0[78u].z)) * _3480.z) / cbSceneParam._m0[78u].z)) + _3230;
        _3309 = _3489 * _3231;
    }
    else
    {
        _3303 = _3228;
        _3305 = _3229;
        _3307 = _3230;
        _3309 = _3231;
    }
    bool _3516;
    vec4 _3319;
    vec4 _3341;
    float _3343;
    float _3347;
    float _3348;
    float _3349;
    float _3350;
    bool _3360;
    for (;;)
    {
        _3319 = cbMatDynParam._m0[0u];
        float _3321 = roundEven(_3319.y);
        bool _3322 = _3321 == 3.0;
        float _3323 = log2(_3309);
        float _3330 = exp2(_3323 * cbSceneParam._m0[78u].x) * _3200;
        float _3331 = exp2(_3323 * cbSceneParam._m0[78u].y) * _3201;
        float _3332 = exp2(_3323 * cbSceneParam._m0[78u].z) * _3202;
        float _3339 = _1066 + (-0.5);
        _3341 = cbMtdParam._m0[1u];
        _3343 = _3341.y * _3339;
        float _3346 = (_3321 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3347 = _3346 * (_3322 ? _3330 : (_3330 + (cbSceneParam._m0[72u].w * _3303)));
        _3348 = _3346 * (_3322 ? _3331 : (_3331 + (cbSceneParam._m0[72u].w * _3305)));
        _3349 = _3346 * (_3322 ? _3332 : (_3332 + (cbSceneParam._m0[72u].w * _3307)));
        _3350 = _3339 * 0.999000012874603271484375;
        _3360 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3360)
        {
            if ((cbInstanceData._m0[_269 + 7u].x + _3350) < 0.5)
            {
                _3516 = true;
                break;
            }
        }
        uint _3457 = _1115 + uint(_3319.w);
        if ((cbInstanceData._m0[_3457].w < 1.0) && ((cbInstanceData._m0[_3457].w + _3350) < 0.5))
        {
            _3516 = true;
            break;
        }
        if ((_3343 + 1.0) < _3341.x)
        {
            _3516 = true;
            break;
        }
        _3516 = false;
        break;
    }
    float _3720;
    if (_3516)
    {
        discard_state = true;
        _3720 = 0.0;
    }
    else
    {
        _3720 = cbInstanceData._m0[_3203].w;
    }
    SV_Target.x = _3347;
    SV_Target.y = _3348;
    SV_Target.z = _3349;
    SV_Target.w = _3720;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_3203].w;
    discard_exit();
}


