#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_0;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 13) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_22;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_29;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_10;
layout(set = 0, binding = 20) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_6;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1506;
float _3889;
float _3890;
float _3891;
float _3892;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _242 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _243 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _244 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _250 = inversesqrt(dot(vec3(_242, _243, _244), vec3(_242, _243, _244)));
    float _257 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _264 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _276 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _278 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _279 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3901 = isnan(0.0) ? _276 : (isnan(_276) ? 0.0 : max(_276, 0.0));
    float _3912 = isnan(0.0) ? _278 : (isnan(_278) ? 0.0 : max(_278, 0.0));
    float _3923 = isnan(0.0) ? _279 : (isnan(_279) ? 0.0 : max(_279, 0.0));
    uint _289 = uint(roundEven(NORMAL.w)) * 13u;
    uint _294 = _289 + 1u;
    uint _298 = _289 + 2u;
    float _307 = sqrt(((cbInstanceData._m0[_294].x * cbInstanceData._m0[_294].x) + (cbInstanceData._m0[_289].x * cbInstanceData._m0[_289].x)) + (cbInstanceData._m0[_298].x * cbInstanceData._m0[_298].x));
    float _308 = _307 * TEXCOORD.z;
    float _309 = _307 * TEXCOORD.w;
    vec4 _322 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _308) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _309) + cbTextureTilingScale._m0[13u].w));
    vec4 _345 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _371 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _376 = _371.x * cbMtdParam._m0[11u].x;
    float _377 = _371.y * cbMtdParam._m0[11u].y;
    float _378 = _371.z * cbMtdParam._m0[11u].z;
    vec4 _397 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _308) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _309) + cbTextureTilingScale._m0[5u].w));
    vec4 _416 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _451 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _453 = _451.x;
    float _465 = dot(vec4(_453, _451.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _482 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _416.x) * 2.0) - ((((_453 - _465) * cbMtdParam._m0[24u].z) + _465) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3934 = isnan(0.0) ? _482 : (isnan(_482) ? 0.0 : max(_482, 0.0));
    float _483 = isnan(1.0) ? _3934 : (isnan(_3934) ? 1.0 : min(_3934, 1.0));
    float _490 = (_483 * ((_397.x * cbMtdParam._m0[12u].x) - _376)) + _376;
    float _491 = (_483 * ((_397.y * cbMtdParam._m0[12u].y) - _377)) + _377;
    float _492 = (_483 * ((_397.z * cbMtdParam._m0[12u].z) - _378)) + _378;
    vec4 _509 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _308) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _309) + cbTextureTilingScale._m0[3u].w));
    vec4 _529 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _531 = _529.x;
    float _541 = dot(vec4(_531, _529.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _555 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _416.y) * 2.0) - ((((_531 - _541) * cbMtdParam._m0[24u].z) + _541) * cbMtdParam._m0[20u].w))) + 1.0;
    float _3945 = isnan(0.0) ? _555 : (isnan(_555) ? 0.0 : max(_555, 0.0));
    float _556 = isnan(1.0) ? _3945 : (isnan(_3945) ? 1.0 : min(_3945, 1.0));
    float _566 = (_345.x * cbMtdParam._m0[9u].x) * ((_556 * ((_509.x * cbMtdParam._m0[13u].x) - _490)) + _490);
    float _567 = (_345.y * cbMtdParam._m0[9u].y) * ((_556 * ((_509.y * cbMtdParam._m0[13u].y) - _491)) + _491);
    float _568 = (_345.z * cbMtdParam._m0[9u].z) * ((_556 * ((_509.z * cbMtdParam._m0[13u].z) - _492)) + _492);
    float _572 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _322.x) * _566;
    float _575 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _322.y) * _567;
    float _578 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _322.z) * _568;
    float _586 = (((_566 - _572) * (isnan(1.0) ? _3901 : (isnan(_3901) ? 1.0 : min(_3901, 1.0)))) + _572) * 4.55000019073486328125;
    float _588 = (((_567 - _575) * (isnan(1.0) ? _3912 : (isnan(_3912) ? 1.0 : min(_3912, 1.0)))) + _575) * 4.55000019073486328125;
    float _590 = (((_568 - _578) * (isnan(1.0) ? _3923 : (isnan(_3923) ? 1.0 : min(_3923, 1.0)))) + _578) * 4.55000019073486328125;
    vec4 _607 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _308) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _309) + cbTextureTilingScale._m0[20u].w));
    vec4 _630 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _308) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _309) + cbTextureTilingScale._m0[4u].w));
    vec4 _647 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _649 = _647.x;
    float _650 = _647.y;
    float _651 = _647.z;
    float _658 = ((_630.x - _649) * _483) + _649;
    float _659 = ((_630.y - _650) * _483) + _650;
    float _660 = ((_630.z - _651) * _483) + _651;
    vec4 _672 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _308) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _309) + cbTextureTilingScale._m0[2u].w));
    float _685 = ((_672.z - _660) * _556) + _660;
    float _688 = ((((_672.x - _658) * _556) + _658) * 2.0) + (-1.0);
    float _689 = ((((_672.y - _659) * _556) + _659) * 2.0) + (-1.0);
    float _690 = dot(vec2(_688, _689), vec2(_688, _689));
    float _3956 = isnan(0.0) ? _690 : (isnan(_690) ? 0.0 : max(_690, 0.0));
    float _695 = sqrt(1.0 - (isnan(1.0) ? _3956 : (isnan(_3956) ? 1.0 : min(_3956, 1.0))));
    vec4 _709 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _734 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _308) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _309) + cbTextureTilingScale._m0[11u].w));
    float _736 = _734.x;
    float _737 = 1.0 - _736;
    float _743 = isnan(-1.0) ? cbMtdParam._m0[24u].x : (isnan(cbMtdParam._m0[24u].x) ? (-1.0) : max(cbMtdParam._m0[24u].x, -1.0));
    float _746 = ((isnan(0.0) ? _743 : (isnan(_743) ? 0.0 : min(_743, 0.0))) * TEXCOORD_8.x) + TEXCOORD_8.w;
    float _755 = (_746 - ((((((_736 - _737) * cbMtdParam._m0[24u].w) + _737) + 0.00999999977648258209228515625) * cbMtdParam._m0[21u].z) * (1.0 - _746))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3977 = isnan(0.0) ? _755 : (isnan(_755) ? 0.0 : max(_755, 0.0));
    float _756 = isnan(1.0) ? _3977 : (isnan(_3977) ? 1.0 : min(_3977, 1.0));
    float _763 = (_756 * (cbMtdParam._m0[17u].x - _586)) + _586;
    float _764 = (_756 * (cbMtdParam._m0[17u].y - _588)) + _588;
    float _765 = (_756 * (cbMtdParam._m0[17u].z - _590)) + _590;
    vec4 _777 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _308) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _309) + cbTextureTilingScale._m0[19u].w));
    float _779 = _777.x;
    float _780 = 1.0 - _779;
    float _805 = (TEXCOORD_8.x - ((cbMtdParam._m0[22u].w * (1.0 - TEXCOORD_8.x)) * ((((_779 - _780) * cbMtdParam._m0[24u].y) + _780) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3988 = isnan(0.0) ? _805 : (isnan(_805) ? 0.0 : max(_805, 0.0));
    float _806 = isnan(1.0) ? _3988 : (isnan(_3988) ? 1.0 : min(_3988, 1.0));
    float _814 = ((((cbMtdParam._m0[10u].x - _763) * TEXCOORD_8.x) * cbMtdParam._m0[23u].w) * _806) + _763;
    float _815 = ((((cbMtdParam._m0[10u].y - _764) * TEXCOORD_8.y) * cbMtdParam._m0[23u].w) * _806) + _764;
    float _816 = (((cbMtdParam._m0[23u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _765)) * _806) + _765;
    float _821 = (((_607.z - _685) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _685;
    float _825 = ((_709.z - _821) * cbMtdParam._m0[19u].w) + _821;
    vec4 _839 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _308) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _309) + cbTextureTilingScale._m0[15u].w));
    float _846 = (_839.x * 2.0) + (-1.0);
    float _847 = (_839.y * 2.0) + (-1.0);
    float _848 = dot(vec2(_846, _847), vec2(_846, _847));
    float _3999 = isnan(0.0) ? _848 : (isnan(_848) ? 0.0 : max(_848, 0.0));
    float _856 = (_756 * (_839.z - _825)) + _825;
    float _859 = ((cbMtdParam._m0[23u].y - _856) * _806) + _856;
    vec4 _880 = texture(sampler2D(M_MS_Mask_M0_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _308) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _309) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _886 = (_880.x * 2.0) + (-1.0);
    float _887 = (_880.y * 2.0) + (-1.0);
    float _888 = dot(vec2(_886, _887), vec2(_886, _887));
    float _4010 = isnan(0.0) ? _888 : (isnan(_888) ? 0.0 : max(_888, 0.0));
    float _902 = (_688 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_607.x * 2.0) + (-1.0)))) + (((_709.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _903 = (_689 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_607.y * 2.0) + (-1.0)))) + (((_709.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _915 = (((_846 - _902) + (cbMtdParam._m0[21u].x * _902)) * _756) + _902;
    float _916 = (((_847 - _903) + (cbMtdParam._m0[21u].x * _903)) * _756) + _903;
    float _917 = (_756 * (sqrt(1.0 - (isnan(1.0) ? _3999 : (isnan(_3999) ? 1.0 : min(_3999, 1.0)))) - _695)) + _695;
    float _928 = (((_886 - _915) + (_915 * cbMtdParam._m0[22u].z)) * _806) + _915;
    float _929 = (((_887 - _916) + (_916 * cbMtdParam._m0[22u].z)) * _806) + _916;
    float _930 = ((sqrt(1.0 - (isnan(1.0) ? _4010 : (isnan(_4010) ? 1.0 : min(_4010, 1.0)))) - _917) * _806) + _917;
    float _932 = cbMtdParam._m0[22u].x + _709.w;
    float _935 = fma(_930, _257 * NORMAL.x, fma(_929, _264 * TANGENT.x, (_250 * _242) * _928));
    float _938 = fma(_930, _257 * NORMAL.y, fma(_929, _264 * TANGENT.y, (_250 * _243) * _928));
    float _941 = fma(_930, _257 * NORMAL.z, fma(_929, _264 * TANGENT.z, (_250 * _244) * _928));
    float _945 = inversesqrt(dot(vec3(_935, _938, _941), vec3(_935, _938, _941)));
    float _946 = _945 * _935;
    float _947 = _945 * _938;
    float _948 = _945 * _941;
    float _4021 = isnan(0.0) ? _859 : (isnan(_859) ? 0.0 : max(_859, 0.0));
    float _949 = isnan(1.0) ? _4021 : (isnan(_4021) ? 1.0 : min(_4021, 1.0));
    float _4032 = isnan(0.0) ? _932 : (isnan(_932) ? 0.0 : max(_932, 0.0));
    float _4043 = isnan(0.0) ? _814 : (isnan(_814) ? 0.0 : max(_814, 0.0));
    float _4054 = isnan(0.0) ? _815 : (isnan(_815) ? 0.0 : max(_815, 0.0));
    float _4065 = isnan(0.0) ? _816 : (isnan(_816) ? 0.0 : max(_816, 0.0));
    float _967 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _1007 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _1017 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _1007);
    float _1018 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _1007);
    float _1019 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _1007);
    float _1023 = inversesqrt(dot(vec3(_1017, _1018, _1019), vec3(_1017, _1018, _1019)));
    float _1024 = _1017 * _1023;
    float _1025 = _1018 * _1023;
    float _1026 = _1019 * _1023;
    vec4 _1031 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _1033 = _1031.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1187 = sqrt(((_1017 * _1017) + (_1018 * _1018)) + (_1019 * _1019));
        float _1193 = (cbMatDynParam._m0[5u].x * _1187) + cbMatDynParam._m0[5u].y;
        float _4076 = isnan(0.0) ? _1193 : (isnan(_1193) ? 0.0 : max(_1193, 0.0));
        float _1194 = isnan(1.0) ? _4076 : (isnan(_4076) ? 1.0 : min(_4076, 1.0));
        float _1198 = (cbMatDynParam._m0[5u].z * _1187) + cbMatDynParam._m0[5u].w;
        float _4087 = isnan(0.0) ? _1198 : (isnan(_1198) ? 0.0 : max(_1198, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4087 : (isnan(_4087) ? 1.0 : min(_4087, 1.0))) - _1194)) + _1194) < ((_1033 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _1044 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1045 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1063 = fma(_948, cbSceneParam._m0[5u].z, fma(_947, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _946));
    float _1066 = fma(_948, cbSceneParam._m0[6u].z, fma(_947, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _946));
    float _1069 = fma(_948, cbSceneParam._m0[7u].z, fma(_947, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _946));
    uint _1082 = _289 + 9u;
    uint _1083 = _1082 + uint(cbMatDynParam._m0[0u].w);
    float _1089 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4043 : (isnan(_4043) ? 1.0 : min(_4043, 1.0)))) * cbInstanceData._m0[_1083].x;
    float _1090 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4054 : (isnan(_4054) ? 1.0 : min(_4054, 1.0)))) * cbInstanceData._m0[_1083].y;
    float _1091 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4065 : (isnan(_4065) ? 1.0 : min(_4065, 1.0)))) * cbInstanceData._m0[_1083].z;
    float _4098 = isnan(0.0) ? _1089 : (isnan(_1089) ? 0.0 : max(_1089, 0.0));
    float _1092 = isnan(1.0) ? _4098 : (isnan(_4098) ? 1.0 : min(_4098, 1.0));
    float _4109 = isnan(0.0) ? _1090 : (isnan(_1090) ? 0.0 : max(_1090, 0.0));
    float _1093 = isnan(1.0) ? _4109 : (isnan(_4109) ? 1.0 : min(_4109, 1.0));
    float _4120 = isnan(0.0) ? _1091 : (isnan(_1091) ? 0.0 : max(_1091, 0.0));
    float _1094 = isnan(1.0) ? _4120 : (isnan(_4120) ? 1.0 : min(_4120, 1.0));
    vec4 _1103 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1044, cbSceneParam._m0[86u].y * _1045));
    float _1107 = ((isnan(1.0) ? _4032 : (isnan(_4032) ? 1.0 : min(_4032, 1.0))) * TEXCOORD_5.w) * _1103.x;
    float _1108 = dot(vec3(_946, _947, _948), vec3(_1024, _1025, _1026));
    float _1111 = _1108 * 2.0;
    float _1115 = (_1111 * _946) - _1024;
    float _1116 = (_1111 * _947) - _1025;
    float _1117 = (_1111 * _948) - _1026;
    float _1121 = abs(dot(vec3(_1024, _1025, _1026), vec3(_946, _947, _948)));
    float _4131 = isnan(0.0) ? _1121 : (isnan(_1121) ? 0.0 : max(_1121, 0.0));
    float _1123 = sqrt(_949);
    float _1136 = exp2((_1123 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4131 : (isnan(_4131) ? 1.0 : min(_4131, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1123 * 3.0));
    float _1168 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1172 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1176 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1505;
    float _1507;
    float _1508;
    float _1509;
    float _1510;
    float _1511;
    float _1512;
    float _1513;
    float _1514;
    float _1515;
    float _1516;
    float _1517;
    float _1518;
    float _1519;
    float _1520;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1230 = fma(_1176, cbModelParam._m0[26u].z, fma(_1172, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1168));
        float _1234 = fma(_1176, cbModelParam._m0[27u].z, fma(_1172, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1168));
        float _1238 = fma(_1176, cbModelParam._m0[28u].z, fma(_1172, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1168));
        float _1263 = _1168 + _946;
        float _1264 = _1172 + _947;
        float _1265 = _1176 + _948;
        float _1275 = fma(_1265, cbModelParam._m0[26u].z, fma(_1264, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1263)) - _1230;
        float _1276 = fma(_1265, cbModelParam._m0[27u].z, fma(_1264, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1263)) - _1234;
        float _1277 = fma(_1265, cbModelParam._m0[28u].z, fma(_1264, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1263)) - _1238;
        float _1281 = inversesqrt(dot(vec3(_1275, _1276, _1277), vec3(_1275, _1276, _1277)));
        float _1294 = ((_1281 * _1275) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1230 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1295 = ((_1281 * _1276) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1234 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1296 = ((_1281 * _1277) / cbModelParam._m0[34u].z) + ((((((_1238 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1299 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1294, _1295, _1296), 0.0);
        vec4 _1306 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1294, _1295, _1296), 0.0);
        vec4 _1313 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1294, _1295, _1296), 0.0);
        vec4 _1320 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1294, _1295, _1296), 0.0);
        float _1333 = exp2((_1299.w + (-0.5)) * 20.0) * 2.0;
        float _1334 = _1333 * (_1299.x + (-0.5));
        float _1335 = _1333 * (_1299.y + (-0.5));
        float _1336 = _1333 * (_1299.z + (-0.5));
        float _1343 = exp2((_1306.w + (-0.5)) * 20.0) * 2.0;
        float _1344 = _1343 * (_1306.x + (-0.5));
        float _1345 = _1343 * (_1306.y + (-0.5));
        float _1346 = _1343 * (_1306.z + (-0.5));
        float _1353 = exp2((_1313.w + (-0.5)) * 20.0) * 2.0;
        float _1354 = _1353 * (_1313.x + (-0.5));
        float _1355 = _1353 * (_1313.y + (-0.5));
        float _1356 = _1353 * (_1313.z + (-0.5));
        float _1363 = exp2((_1320.w + (-0.5)) * 20.0) * 2.0;
        float _1364 = _1363 * (_1320.x + (-0.5));
        float _1365 = _1363 * (_1320.y + (-0.5));
        float _1366 = _1363 * (_1320.z + (-0.5));
        float _1367 = isnan(0.0) ? _1364 : (isnan(_1364) ? 0.0 : max(_1364, 0.0));
        float _1368 = isnan(0.0) ? _1365 : (isnan(_1365) ? 0.0 : max(_1365, 0.0));
        float _1369 = isnan(0.0) ? _1366 : (isnan(_1366) ? 0.0 : max(_1366, 0.0));
        float _1370 = _1334 * 0.5;
        float _1371 = _1344 * 0.5;
        float _1372 = _1354 * 0.5;
        float _1373 = dot(vec3(_1370, _1371, _1372), vec3(_1370, _1371, _1372));
        float _1378 = (_1373 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1373);
        float _1387 = (dot(vec3(_946, _947, _948), vec3(_1378 * _1370, _1378 * _1371, _1378 * _1372)) + 1.0) * 0.5;
        float _4157 = isnan(0.0) ? _1387 : (isnan(_1387) ? 0.0 : max(_1387, 0.0));
        float _1397 = sqrt(((_1371 * _1371) + (_1370 * _1370)) + (_1372 * _1372)) / (_1367 + 9.9999997473787516355514526367188e-06);
        float _4168 = isnan(0.0) ? _1397 : (isnan(_1397) ? 0.0 : max(_1397, 0.0));
        float _1398 = isnan(1.0) ? _4168 : (isnan(_4168) ? 1.0 : min(_4168, 1.0));
        float _1399 = _1398 * 2.0;
        float _1403 = (1.0 - _1398) / (_1398 + 1.0);
        float _4179 = isnan(0.0) ? _1403 : (isnan(_1403) ? 0.0 : max(_1403, 0.0));
        float _1404 = isnan(1.0) ? _4179 : (isnan(_4179) ? 1.0 : min(_4179, 1.0));
        float _1413 = ((((1.0 - _1404) * (_1399 + 2.0)) * exp2(log2(isnan(1.0) ? _4157 : (isnan(_4157) ? 1.0 : min(_4157, 1.0))) * (_1399 + 1.0))) + _1404) * _1367;
        float _1414 = _1335 * 0.5;
        float _1415 = _1345 * 0.5;
        float _1416 = _1355 * 0.5;
        float _1417 = dot(vec3(_1414, _1415, _1416), vec3(_1414, _1415, _1416));
        float _1422 = (_1417 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1417);
        float _1430 = (dot(vec3(_946, _947, _948), vec3(_1422 * _1414, _1422 * _1415, _1422 * _1416)) + 1.0) * 0.5;
        float _4190 = isnan(0.0) ? _1430 : (isnan(_1430) ? 0.0 : max(_1430, 0.0));
        float _1439 = sqrt(((_1415 * _1415) + (_1414 * _1414)) + (_1416 * _1416)) / (_1368 + 9.9999997473787516355514526367188e-06);
        float _4201 = isnan(0.0) ? _1439 : (isnan(_1439) ? 0.0 : max(_1439, 0.0));
        float _1440 = isnan(1.0) ? _4201 : (isnan(_4201) ? 1.0 : min(_4201, 1.0));
        float _1441 = _1440 * 2.0;
        float _1445 = (1.0 - _1440) / (_1440 + 1.0);
        float _4212 = isnan(0.0) ? _1445 : (isnan(_1445) ? 0.0 : max(_1445, 0.0));
        float _1446 = isnan(1.0) ? _4212 : (isnan(_4212) ? 1.0 : min(_4212, 1.0));
        float _1455 = ((((1.0 - _1446) * (_1441 + 2.0)) * exp2(log2(isnan(1.0) ? _4190 : (isnan(_4190) ? 1.0 : min(_4190, 1.0))) * (_1441 + 1.0))) + _1446) * _1368;
        float _1456 = _1336 * 0.5;
        float _1457 = _1346 * 0.5;
        float _1458 = _1356 * 0.5;
        float _1459 = dot(vec3(_1456, _1457, _1458), vec3(_1456, _1457, _1458));
        float _1464 = (_1459 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1459);
        float _1472 = (dot(vec3(_946, _947, _948), vec3(_1464 * _1456, _1464 * _1457, _1464 * _1458)) + 1.0) * 0.5;
        float _4223 = isnan(0.0) ? _1472 : (isnan(_1472) ? 0.0 : max(_1472, 0.0));
        float _1481 = sqrt(((_1457 * _1457) + (_1456 * _1456)) + (_1458 * _1458)) / (_1369 + 9.9999997473787516355514526367188e-06);
        float _4234 = isnan(0.0) ? _1481 : (isnan(_1481) ? 0.0 : max(_1481, 0.0));
        float _1482 = isnan(1.0) ? _4234 : (isnan(_4234) ? 1.0 : min(_4234, 1.0));
        float _1483 = _1482 * 2.0;
        float _1487 = (1.0 - _1482) / (_1482 + 1.0);
        float _4245 = isnan(0.0) ? _1487 : (isnan(_1487) ? 0.0 : max(_1487, 0.0));
        float _1488 = isnan(1.0) ? _4245 : (isnan(_4245) ? 1.0 : min(_4245, 1.0));
        float _1497 = ((((1.0 - _1488) * (_1483 + 2.0)) * exp2(log2(isnan(1.0) ? _4223 : (isnan(_4223) ? 1.0 : min(_4223, 1.0))) * (_1483 + 1.0))) + _1488) * _1369;
        _1505 = _1336;
        _1507 = _1335;
        _1508 = _1334;
        _1509 = _1346;
        _1510 = _1345;
        _1511 = _1344;
        _1512 = _1356;
        _1513 = _1355;
        _1514 = _1354;
        _1515 = _1369;
        _1516 = _1368;
        _1517 = _1367;
        _1518 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1413 : (isnan(_1413) ? 0.0 : max(_1413, 0.0)));
        _1519 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1455 : (isnan(_1455) ? 0.0 : max(_1455, 0.0)));
        _1520 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1497 : (isnan(_1497) ? 0.0 : max(_1497, 0.0)));
    }
    else
    {
        _1505 = _1506;
        _1507 = _1506;
        _1508 = _1506;
        _1509 = _1506;
        _1510 = _1506;
        _1511 = _1506;
        _1512 = _1506;
        _1513 = _1506;
        _1514 = _1506;
        _1515 = _1506;
        _1516 = _1506;
        _1517 = _1506;
        _1518 = 0.0;
        _1519 = 0.0;
        _1520 = 0.0;
    }
    float _1816;
    float _1817;
    float _1818;
    float _1819;
    float _1820;
    float _1821;
    float _1822;
    float _1823;
    float _1824;
    float _1825;
    float _1826;
    float _1827;
    float _1828;
    float _1829;
    float _1830;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1547 = fma(_1176, cbModelParam._m0[30u].z, fma(_1172, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1168));
        float _1551 = fma(_1176, cbModelParam._m0[31u].z, fma(_1172, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1168));
        float _1555 = fma(_1176, cbModelParam._m0[32u].z, fma(_1172, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1168));
        float _1578 = _1168 + _946;
        float _1579 = _1172 + _947;
        float _1580 = _1176 + _948;
        float _1590 = fma(_1580, cbModelParam._m0[30u].z, fma(_1579, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1578)) - _1547;
        float _1591 = fma(_1580, cbModelParam._m0[31u].z, fma(_1579, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1578)) - _1551;
        float _1592 = fma(_1580, cbModelParam._m0[32u].z, fma(_1579, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1578)) - _1555;
        float _1596 = inversesqrt(dot(vec3(_1590, _1591, _1592), vec3(_1590, _1591, _1592)));
        float _1609 = ((_1596 * _1590) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1547 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1610 = ((_1596 * _1591) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1551 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1611 = ((_1596 * _1592) / cbModelParam._m0[35u].z) + ((((((_1555 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1613 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1609, _1610, _1611), 0.0);
        vec4 _1620 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1609, _1610, _1611), 0.0);
        vec4 _1627 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1609, _1610, _1611), 0.0);
        vec4 _1634 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1609, _1610, _1611), 0.0);
        float _1646 = exp2((_1613.w + (-0.5)) * 20.0) * 2.0;
        float _1647 = _1646 * (_1613.x + (-0.5));
        float _1648 = _1646 * (_1613.y + (-0.5));
        float _1649 = _1646 * (_1613.z + (-0.5));
        float _1656 = exp2((_1620.w + (-0.5)) * 20.0) * 2.0;
        float _1657 = _1656 * (_1620.x + (-0.5));
        float _1658 = _1656 * (_1620.y + (-0.5));
        float _1659 = _1656 * (_1620.z + (-0.5));
        float _1666 = exp2((_1627.w + (-0.5)) * 20.0) * 2.0;
        float _1667 = _1666 * (_1627.x + (-0.5));
        float _1668 = _1666 * (_1627.y + (-0.5));
        float _1669 = _1666 * (_1627.z + (-0.5));
        float _1676 = exp2((_1634.w + (-0.5)) * 20.0) * 2.0;
        float _1677 = _1676 * (_1634.x + (-0.5));
        float _1678 = _1676 * (_1634.y + (-0.5));
        float _1679 = _1676 * (_1634.z + (-0.5));
        float _1680 = isnan(0.0) ? _1677 : (isnan(_1677) ? 0.0 : max(_1677, 0.0));
        float _1681 = isnan(0.0) ? _1678 : (isnan(_1678) ? 0.0 : max(_1678, 0.0));
        float _1682 = isnan(0.0) ? _1679 : (isnan(_1679) ? 0.0 : max(_1679, 0.0));
        float _1683 = _1647 * 0.5;
        float _1684 = _1657 * 0.5;
        float _1685 = _1667 * 0.5;
        float _1686 = dot(vec3(_1683, _1684, _1685), vec3(_1683, _1684, _1685));
        float _1691 = (_1686 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1686);
        float _1699 = (dot(vec3(_946, _947, _948), vec3(_1691 * _1683, _1691 * _1684, _1691 * _1685)) + 1.0) * 0.5;
        float _4286 = isnan(0.0) ? _1699 : (isnan(_1699) ? 0.0 : max(_1699, 0.0));
        float _1708 = sqrt(((_1684 * _1684) + (_1683 * _1683)) + (_1685 * _1685)) / (_1680 + 9.9999997473787516355514526367188e-06);
        float _4297 = isnan(0.0) ? _1708 : (isnan(_1708) ? 0.0 : max(_1708, 0.0));
        float _1709 = isnan(1.0) ? _4297 : (isnan(_4297) ? 1.0 : min(_4297, 1.0));
        float _1710 = _1709 * 2.0;
        float _1714 = (1.0 - _1709) / (_1709 + 1.0);
        float _4308 = isnan(0.0) ? _1714 : (isnan(_1714) ? 0.0 : max(_1714, 0.0));
        float _1715 = isnan(1.0) ? _4308 : (isnan(_4308) ? 1.0 : min(_4308, 1.0));
        float _1724 = ((((1.0 - _1715) * (_1710 + 2.0)) * exp2(log2(isnan(1.0) ? _4286 : (isnan(_4286) ? 1.0 : min(_4286, 1.0))) * (_1710 + 1.0))) + _1715) * _1680;
        float _1725 = _1648 * 0.5;
        float _1726 = _1658 * 0.5;
        float _1727 = _1668 * 0.5;
        float _1728 = dot(vec3(_1725, _1726, _1727), vec3(_1725, _1726, _1727));
        float _1733 = (_1728 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1728);
        float _1741 = (dot(vec3(_946, _947, _948), vec3(_1733 * _1725, _1733 * _1726, _1733 * _1727)) + 1.0) * 0.5;
        float _4319 = isnan(0.0) ? _1741 : (isnan(_1741) ? 0.0 : max(_1741, 0.0));
        float _1750 = sqrt(((_1726 * _1726) + (_1725 * _1725)) + (_1727 * _1727)) / (_1681 + 9.9999997473787516355514526367188e-06);
        float _4330 = isnan(0.0) ? _1750 : (isnan(_1750) ? 0.0 : max(_1750, 0.0));
        float _1751 = isnan(1.0) ? _4330 : (isnan(_4330) ? 1.0 : min(_4330, 1.0));
        float _1752 = _1751 * 2.0;
        float _1756 = (1.0 - _1751) / (_1751 + 1.0);
        float _4341 = isnan(0.0) ? _1756 : (isnan(_1756) ? 0.0 : max(_1756, 0.0));
        float _1757 = isnan(1.0) ? _4341 : (isnan(_4341) ? 1.0 : min(_4341, 1.0));
        float _1766 = ((((1.0 - _1757) * (_1752 + 2.0)) * exp2(log2(isnan(1.0) ? _4319 : (isnan(_4319) ? 1.0 : min(_4319, 1.0))) * (_1752 + 1.0))) + _1757) * _1681;
        float _1767 = _1649 * 0.5;
        float _1768 = _1659 * 0.5;
        float _1769 = _1669 * 0.5;
        float _1770 = dot(vec3(_1767, _1768, _1769), vec3(_1767, _1768, _1769));
        float _1775 = (_1770 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1770);
        float _1783 = (dot(vec3(_946, _947, _948), vec3(_1775 * _1767, _1775 * _1768, _1775 * _1769)) + 1.0) * 0.5;
        float _4352 = isnan(0.0) ? _1783 : (isnan(_1783) ? 0.0 : max(_1783, 0.0));
        float _1792 = sqrt(((_1768 * _1768) + (_1767 * _1767)) + (_1769 * _1769)) / (_1682 + 9.9999997473787516355514526367188e-06);
        float _4363 = isnan(0.0) ? _1792 : (isnan(_1792) ? 0.0 : max(_1792, 0.0));
        float _1793 = isnan(1.0) ? _4363 : (isnan(_4363) ? 1.0 : min(_4363, 1.0));
        float _1794 = _1793 * 2.0;
        float _1798 = (1.0 - _1793) / (_1793 + 1.0);
        float _4374 = isnan(0.0) ? _1798 : (isnan(_1798) ? 0.0 : max(_1798, 0.0));
        float _1799 = isnan(1.0) ? _4374 : (isnan(_4374) ? 1.0 : min(_4374, 1.0));
        float _1808 = ((((1.0 - _1799) * (_1794 + 2.0)) * exp2(log2(isnan(1.0) ? _4352 : (isnan(_4352) ? 1.0 : min(_4352, 1.0))) * (_1794 + 1.0))) + _1799) * _1682;
        _1816 = _1649;
        _1817 = _1648;
        _1818 = _1647;
        _1819 = _1659;
        _1820 = _1658;
        _1821 = _1657;
        _1822 = _1669;
        _1823 = _1668;
        _1824 = _1667;
        _1825 = _1682;
        _1826 = _1681;
        _1827 = _1680;
        _1828 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1724 : (isnan(_1724) ? 0.0 : max(_1724, 0.0)));
        _1829 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1766 : (isnan(_1766) ? 0.0 : max(_1766, 0.0)));
        _1830 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1808 : (isnan(_1808) ? 0.0 : max(_1808, 0.0)));
    }
    else
    {
        _1816 = _1506;
        _1817 = _1506;
        _1818 = _1506;
        _1819 = _1506;
        _1820 = _1506;
        _1821 = _1506;
        _1822 = _1506;
        _1823 = _1506;
        _1824 = _1506;
        _1825 = _1506;
        _1826 = _1506;
        _1827 = _1506;
        _1828 = 0.0;
        _1829 = 0.0;
        _1830 = 0.0;
    }
    float _1840 = (cbModelParam._m0[1u].x * (_1828 - _1518)) + _1518;
    float _1841 = (cbModelParam._m0[1u].x * (_1829 - _1519)) + _1519;
    float _1842 = (cbModelParam._m0[1u].x * (_1830 - _1520)) + _1520;
    float _1863 = fma(_1842, cbSceneParam._m0[89u].z, fma(_1841, cbSceneParam._m0[89u].y, _1840 * cbSceneParam._m0[89u].x));
    float _1866 = fma(_1842, cbSceneParam._m0[90u].z, fma(_1841, cbSceneParam._m0[90u].y, _1840 * cbSceneParam._m0[90u].x));
    float _1869 = fma(_1842, cbSceneParam._m0[91u].z, fma(_1841, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1840));
    float _1884 = _1115 * 0.5;
    float _1885 = _1116 * 0.5;
    float _1886 = _1117 * 0.5;
    float _1887 = dot(vec4(_1884, _1885, _1886, 1.0), vec4(_1818, _1821, _1824, _1827));
    float _1890 = dot(vec4(_1884, _1885, _1886, 1.0), vec4(_1817, _1820, _1823, _1826));
    float _1893 = dot(vec4(_1884, _1885, _1886, 1.0), vec4(_1816, _1819, _1822, _1825));
    float _1927;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1900 = dot(vec4(_1884, _1885, _1886, 1.0), vec4(_1505, _1509, _1512, _1515));
        float _1904 = dot(vec4(_1884, _1885, _1886, 1.0), vec4(_1507, _1510, _1513, _1516));
        float _1908 = dot(vec4(_1884, _1885, _1886, 1.0), vec4(_1508, _1511, _1514, _1517));
        float _1915 = dot(vec4(cbModelParam._m0[39u]), vec4(_1884, _1885, _1886, 1.0));
        _1927 = dot(vec3(isnan(0.0) ? _1908 : (isnan(_1908) ? 0.0 : max(_1908, 0.0)), isnan(0.0) ? _1904 : (isnan(_1904) ? 0.0 : max(_1904, 0.0)), isnan(0.0) ? _1900 : (isnan(_1900) ? 0.0 : max(_1900, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1915) ? 0.0 : (isnan(0.0) ? _1915 : max(0.0, _1915))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1927 = 1.0;
    }
    float _1938;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1929 = dot(vec4(cbModelParam._m0[40u]), vec4(_1884, _1885, _1886, 1.0));
        _1938 = dot(vec3(isnan(0.0) ? _1887 : (isnan(_1887) ? 0.0 : max(_1887, 0.0)), isnan(0.0) ? _1890 : (isnan(_1890) ? 0.0 : max(_1890, 0.0)), isnan(0.0) ? _1893 : (isnan(_1893) ? 0.0 : max(_1893, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1929) ? 0.0 : (isnan(0.0) ? _1929 : max(0.0, _1929))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1938 = 1.0;
    }
    float _1942 = (_1938 * cbModelParam._m0[1u].x) + (_1927 * (1.0 - cbModelParam._m0[1u].x));
    float _1952 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _949);
    float _1953 = isnan(_1952) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1952 : min(cbModelParam._m0[25u].z, _1952));
    float _2034;
    float _2036;
    float _2038;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _2001 = fma(_1176, cbModelParam._m0[13u].z, fma(_1172, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1168)) + cbModelParam._m0[13u].w;
        float _2005 = fma(_1176, cbModelParam._m0[14u].z, fma(_1172, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1168)) + cbModelParam._m0[14u].w;
        float _2009 = fma(_1176, cbModelParam._m0[15u].z, fma(_1172, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1168)) + cbModelParam._m0[15u].w;
        float _2012 = fma(_1117, cbModelParam._m0[13u].z, fma(_1116, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1115));
        float _2015 = fma(_1117, cbModelParam._m0[14u].z, fma(_1116, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1115));
        float _2018 = fma(_1117, cbModelParam._m0[15u].z, fma(_1116, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1115));
        float _2046;
        if (_2012 > 0.0)
        {
            _2046 = abs((1.0 - _2001) / _2012);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_2012 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_2001 + 1.0) / _2012);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _2046 = frontier_phi_17_15_ladder;
        }
        float _2268;
        if (_2015 > 0.0)
        {
            _2268 = abs((1.0 - _2005) / _2015);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_2015 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_2005 + 1.0) / _2015);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2268 = frontier_phi_26_22_ladder;
        }
        float _2514;
        if (_2018 > 0.0)
        {
            _2514 = abs((1.0 - _2009) / _2018);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_2018 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_2009 + 1.0) / _2018);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2514 = frontier_phi_38_33_ladder;
        }
        float _2516 = isnan(_2268) ? _2046 : (isnan(_2046) ? _2268 : min(_2046, _2268));
        float _2517 = isnan(_2514) ? _2516 : (isnan(_2516) ? _2514 : min(_2516, _2514));
        float _2521 = (_2517 * _2012) + _2001;
        float _2522 = (_2517 * _2015) + _2005;
        float _2523 = (_2517 * _2018) + _2009;
        float _2524 = _2517 * 9.9999997473787516355514526367188e-05;
        float _2526 = (-1.0) - _2524;
        float _2528 = _2524 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2523 > _2528) || ((_2523 < _2526) || ((_2522 > _2528) || ((_2522 < _2526) || ((_2521 < _2526) || (_2521 > _2528))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2647 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2523, cbModelParam._m0[9u].z, fma(_2522, cbModelParam._m0[9u].y, _2521 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2523, cbModelParam._m0[10u].z, fma(_2522, cbModelParam._m0[10u].y, _2521 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2523, cbModelParam._m0[11u].z, fma(_2522, cbModelParam._m0[11u].y, _2521 * cbModelParam._m0[11u].x))), _1953);
            frontier_phi_16_38_ladder = _2647.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2647.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2647.x * cbModelParam._m0[1u].y;
        }
        _2034 = frontier_phi_16_38_ladder_2;
        _2036 = frontier_phi_16_38_ladder_1;
        _2038 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _2022 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1115, _1116, _1117), _1953);
        _2034 = _2022.x * cbModelParam._m0[1u].y;
        _2036 = _2022.y * cbModelParam._m0[1u].y;
        _2038 = _2022.z * cbModelParam._m0[1u].y;
    }
    float _2042 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _949);
    float _2043 = isnan(_2042) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2042 : min(cbModelParam._m0[25u].w, _2042));
    float _2133;
    float _2135;
    float _2137;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2097 = fma(_1176, cbModelParam._m0[21u].z, fma(_1172, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1168)) + cbModelParam._m0[21u].w;
        float _2101 = fma(_1176, cbModelParam._m0[22u].z, fma(_1172, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1168)) + cbModelParam._m0[22u].w;
        float _2105 = fma(_1176, cbModelParam._m0[23u].z, fma(_1172, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1168)) + cbModelParam._m0[23u].w;
        float _2108 = fma(_1117, cbModelParam._m0[21u].z, fma(_1116, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1115));
        float _2111 = fma(_1117, cbModelParam._m0[22u].z, fma(_1116, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1115));
        float _2114 = fma(_1117, cbModelParam._m0[23u].z, fma(_1116, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1115));
        float _2273;
        if (_2108 > 0.0)
        {
            _2273 = abs((1.0 - _2097) / _2108);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_2108 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_2097 + 1.0) / _2108);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2273 = frontier_phi_28_24_ladder;
        }
        float _2541;
        if (_2111 > 0.0)
        {
            _2541 = abs((1.0 - _2101) / _2111);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_2111 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_2101 + 1.0) / _2111);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2541 = frontier_phi_40_35_ladder;
        }
        float _2746;
        if (_2114 > 0.0)
        {
            _2746 = abs((1.0 - _2105) / _2114);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_2114 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_2105 + 1.0) / _2114);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2746 = frontier_phi_49_46_ladder;
        }
        float _2748 = isnan(_2541) ? _2273 : (isnan(_2273) ? _2541 : min(_2273, _2541));
        float _2749 = isnan(_2746) ? _2748 : (isnan(_2748) ? _2746 : min(_2748, _2746));
        float _2753 = (_2749 * _2108) + _2097;
        float _2754 = (_2749 * _2111) + _2101;
        float _2755 = (_2749 * _2114) + _2105;
        float _2756 = _2749 * 9.9999997473787516355514526367188e-05;
        float _2757 = (-1.0) - _2756;
        float _2759 = _2756 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2755 > _2759) || ((_2755 < _2757) || ((_2754 > _2759) || ((_2754 < _2757) || ((_2753 < _2757) || (_2753 > _2759))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2954 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2755, cbModelParam._m0[17u].z, fma(_2754, cbModelParam._m0[17u].y, _2753 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2755, cbModelParam._m0[18u].z, fma(_2754, cbModelParam._m0[18u].y, _2753 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2755, cbModelParam._m0[19u].z, fma(_2754, cbModelParam._m0[19u].y, _2753 * cbModelParam._m0[19u].x))), _2043);
            frontier_phi_25_49_ladder = _2954.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2954.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2954.x * cbModelParam._m0[1u].z;
        }
        _2133 = frontier_phi_25_49_ladder_2;
        _2135 = frontier_phi_25_49_ladder_1;
        _2137 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _2117 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1115, _1116, _1117), _2043);
        _2133 = _2117.x * cbModelParam._m0[1u].z;
        _2135 = _2117.y * cbModelParam._m0[1u].z;
        _2137 = _2117.z * cbModelParam._m0[1u].z;
    }
    float _2149 = ((((1.0 - _1136) * ((_1123 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_1136 * _1123)) * _1107;
    float _2150 = _2149 * ((cbModelParam._m0[1u].w * (_2133 - _2034)) + _2034);
    float _2151 = _2149 * ((cbModelParam._m0[1u].w * (_2135 - _2036)) + _2036);
    float _2152 = _2149 * ((cbModelParam._m0[1u].w * (_2137 - _2038)) + _2038);
    float _2155 = fma(_2152, cbSceneParam._m0[89u].z, fma(_2151, cbSceneParam._m0[89u].y, _2150 * cbSceneParam._m0[89u].x));
    float _2158 = fma(_2152, cbSceneParam._m0[90u].z, fma(_2151, cbSceneParam._m0[90u].y, _2150 * cbSceneParam._m0[90u].x));
    float _2161 = fma(_2152, cbSceneParam._m0[91u].z, fma(_2151, cbSceneParam._m0[91u].y, _2150 * cbSceneParam._m0[91u].x));
    vec4 _2169 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_1044, _1045));
    float _2171 = _2169.w;
    float _2183 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _2171);
    float _2184 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _2171);
    float _2185 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _2171);
    uvec4 _2189 = floatBitsToUint(cbInstanceData._m0[_289 + 5u]);
    uint _2191 = _2189.x * 14u;
    uint _2192 = _2191 + 13u;
    float _2199 = _1107 + (-1.0);
    float _2204 = (cbLight._m0[_2192].x * _2199) + 1.0;
    float _2205 = (cbLight._m0[_2192].y * _2199) + 1.0;
    float _2206 = (cbLight._m0[_2192].z * _2199) + 1.0;
    float _2207 = (cbLight._m0[_2192].w * _2199) + 1.0;
    uint _2208 = _2191 + 5u;
    float _2214 = isnan(1.0) ? _2205 : (isnan(_2205) ? 1.0 : min(_2205, 1.0));
    uint _2218 = _2191 + 4u;
    float _2227 = isnan(1.0) ? _2204 : (isnan(_2204) ? 1.0 : min(_2204, 1.0));
    uint _2231 = _2191 | 1u;
    float _2242 = dot(vec3(cbLight._m0[_2191].xyz), vec3(_946, _947, _948));
    float _2245 = dot(vec3(cbLight._m0[_2231].xyz), vec3(_946, _947, _948));
    float _4510 = isnan(0.0) ? _2242 : (isnan(_2242) ? 0.0 : max(_2242, 0.0));
    float _4521 = isnan(0.0) ? _2245 : (isnan(_2245) ? 0.0 : max(_2245, 0.0));
    float _2250 = (isnan(1.0) ? _4510 : (isnan(_4510) ? 1.0 : min(_4510, 1.0))) * 0.3183098733425140380859375;
    float _2252 = (isnan(1.0) ? _4521 : (isnan(_4521) ? 1.0 : min(_4521, 1.0))) * 0.3183098733425140380859375;
    float _2259 = ((cbLight._m0[_2208].x * _2214) * _2252) + (((cbLight._m0[_2218].x * _2183) * _2227) * _2250);
    float _2260 = ((_2214 * cbLight._m0[_2208].y) * _2252) + (((cbLight._m0[_2218].y * _2184) * _2227) * _2250);
    float _2261 = ((_2214 * cbLight._m0[_2208].z) * _2252) + (((cbLight._m0[_2218].z * _2185) * _2227) * _2250);
    uvec4 _2265 = floatBitsToUint(cbLight._m0[_2191 + 12u]);
    bool _2267 = _2265.x == 0u;
    float _2278;
    float _2280;
    float _2282;
    if (_2267)
    {
        _2278 = _2259;
        _2280 = _2260;
        _2282 = _2261;
    }
    else
    {
        uint _2286 = _2191 + 6u;
        float _2302 = (dot(vec3(cbLight._m0[_2191 + 2u].xyz), vec3(_946, _947, _948)) * 0.5) + 0.5;
        float _2303 = _2302 * _2302;
        float _4532 = isnan(0.0) ? _2303 : (isnan(_2303) ? 0.0 : max(_2303, 0.0));
        float _2304 = isnan(1.0) ? _4532 : (isnan(_4532) ? 1.0 : min(_4532, 1.0));
        float _2305 = isnan(1.0) ? _2206 : (isnan(_2206) ? 1.0 : min(_2206, 1.0));
        _2278 = (((cbLight._m0[_2286].x * 0.3183098733425140380859375) * _2304) * _2305) + _2259;
        _2280 = (((cbLight._m0[_2286].y * 0.3183098733425140380859375) * _2304) * _2305) + _2260;
        _2282 = (((cbLight._m0[_2286].z * 0.3183098733425140380859375) * _2304) * _2305) + _2261;
    }
    bool _2285 = _2265.y == 0u;
    float _2323;
    float _2325;
    float _2327;
    if (_2285)
    {
        _2323 = _2278;
        _2325 = _2280;
        _2327 = _2282;
    }
    else
    {
        uint _2485 = _2191 + 7u;
        float _2501 = (dot(vec3(cbLight._m0[_2191 + 3u].xyz), vec3(_946, _947, _948)) * 0.5) + 0.5;
        float _2502 = _2501 * _2501;
        float _4548 = isnan(0.0) ? _2502 : (isnan(_2502) ? 0.0 : max(_2502, 0.0));
        float _2503 = isnan(1.0) ? _4548 : (isnan(_4548) ? 1.0 : min(_4548, 1.0));
        float _2504 = isnan(1.0) ? _2207 : (isnan(_2207) ? 1.0 : min(_2207, 1.0));
        _2323 = (((cbLight._m0[_2485].x * 0.3183098733425140380859375) * _2503) * _2504) + _2278;
        _2325 = (((cbLight._m0[_2485].y * 0.3183098733425140380859375) * _2503) * _2504) + _2280;
        _2327 = (((cbLight._m0[_2485].z * 0.3183098733425140380859375) * _2503) * _2504) + _2282;
    }
    uint _2330 = _2191 + 8u;
    float _2343 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2191].w)) * _949) * 0.949999988079071044921875);
    float _2344 = _2343 * _2343;
    float _2345 = cbLight._m0[_2191].x + _1024;
    float _2346 = cbLight._m0[_2191].y + _1025;
    float _2347 = cbLight._m0[_2191].z + _1026;
    float _2351 = inversesqrt(dot(vec3(_2345, _2346, _2347), vec3(_2345, _2346, _2347)));
    float _2352 = _2351 * _2345;
    float _2353 = _2351 * _2346;
    float _2354 = _2351 * _2347;
    float _2355 = dot(vec3(_946, _947, _948), vec3(cbLight._m0[_2191].xyz));
    float _4564 = isnan(0.0) ? _2355 : (isnan(_2355) ? 0.0 : max(_2355, 0.0));
    float _2358 = isnan(1.0) ? _4564 : (isnan(_4564) ? 1.0 : min(_4564, 1.0));
    float _4575 = isnan(0.0) ? _1108 : (isnan(_1108) ? 0.0 : max(_1108, 0.0));
    float _2359 = isnan(1.0) ? _4575 : (isnan(_4575) ? 1.0 : min(_4575, 1.0));
    float _2360 = dot(vec3(_946, _947, _948), vec3(_2352, _2353, _2354));
    float _4586 = isnan(0.0) ? _2360 : (isnan(_2360) ? 0.0 : max(_2360, 0.0));
    float _2363 = isnan(1.0) ? _4586 : (isnan(_4586) ? 1.0 : min(_4586, 1.0));
    float _2364 = dot(vec3(cbLight._m0[_2191].xyz), vec3(_2352, _2353, _2354));
    float _4597 = isnan(0.0) ? _2364 : (isnan(_2364) ? 0.0 : max(_2364, 0.0));
    float _2368 = _2344 * _2344;
    float _2372 = ((_2363 * _2363) * (_2368 + (-1.0))) + 1.0;
    float _2383 = (exp2(log2(1.0 - (isnan(1.0) ? _4597 : (isnan(_4597) ? 1.0 : min(_4597, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2384 = 1.0 - _2344;
    float _2395 = (0.5 / (((_2359 * ((_2358 * _2384) + _2344)) + 9.9999999392252902907785028219223e-09) + (((_2359 * _2384) + _2344) * _2358))) * _2358;
    float _4608 = isnan(0.0) ? _2395 : (isnan(_2395) ? 0.0 : max(_2395, 0.0));
    float _2397 = (isnan(1.0) ? _4608 : (isnan(_4608) ? 1.0 : min(_4608, 1.0))) * (_2368 / ((_2372 * _2372) * 3.141590118408203125));
    uint _2411 = _2191 + 9u;
    float _2422 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2231].w)) * _949) * 0.949999988079071044921875);
    float _2423 = _2422 * _2422;
    float _2424 = cbLight._m0[_2231].x + _1024;
    float _2425 = cbLight._m0[_2231].y + _1025;
    float _2426 = cbLight._m0[_2231].z + _1026;
    float _2430 = inversesqrt(dot(vec3(_2424, _2425, _2426), vec3(_2424, _2425, _2426)));
    float _2431 = _2430 * _2424;
    float _2432 = _2430 * _2425;
    float _2433 = _2430 * _2426;
    float _2434 = dot(vec3(_946, _947, _948), vec3(cbLight._m0[_2231].xyz));
    float _4619 = isnan(0.0) ? _2434 : (isnan(_2434) ? 0.0 : max(_2434, 0.0));
    float _2437 = isnan(1.0) ? _4619 : (isnan(_4619) ? 1.0 : min(_4619, 1.0));
    float _2438 = dot(vec3(_946, _947, _948), vec3(_2431, _2432, _2433));
    float _4630 = isnan(0.0) ? _2438 : (isnan(_2438) ? 0.0 : max(_2438, 0.0));
    float _2441 = isnan(1.0) ? _4630 : (isnan(_4630) ? 1.0 : min(_4630, 1.0));
    float _2442 = dot(vec3(cbLight._m0[_2231].xyz), vec3(_2431, _2432, _2433));
    float _4641 = isnan(0.0) ? _2442 : (isnan(_2442) ? 0.0 : max(_2442, 0.0));
    float _2446 = _2423 * _2423;
    float _2450 = ((_2441 * _2441) * (_2446 + (-1.0))) + 1.0;
    float _2459 = (exp2(log2(1.0 - (isnan(1.0) ? _4641 : (isnan(_4641) ? 1.0 : min(_4641, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2460 = 1.0 - _2423;
    float _2470 = (0.5 / (((_2359 * ((_2437 * _2460) + _2423)) + 9.9999999392252902907785028219223e-09) + (((_2359 * _2460) + _2423) * _2437))) * _2437;
    float _4652 = isnan(0.0) ? _2470 : (isnan(_2470) ? 0.0 : max(_2470, 0.0));
    float _2472 = (isnan(1.0) ? _4652 : (isnan(_4652) ? 1.0 : min(_4652, 1.0))) * (_2446 / ((_2450 * _2450) * 3.141590118408203125));
    float _2482 = (((_2459 * cbLight._m0[_2411].x) * _2472) * _2214) + ((((cbLight._m0[_2330].x * _2183) * _2383) * _2397) * _2227);
    float _2483 = (((_2459 * cbLight._m0[_2411].y) * _2472) * _2214) + ((((cbLight._m0[_2330].y * _2184) * _2383) * _2397) * _2227);
    float _2484 = (((_2459 * cbLight._m0[_2411].z) * _2472) * _2214) + ((((cbLight._m0[_2330].z * _2185) * _2383) * _2397) * _2227);
    float _2546;
    float _2548;
    float _2550;
    if (_2267)
    {
        _2546 = _2482;
        _2548 = _2483;
        _2550 = _2484;
    }
    else
    {
        uint _2552 = _2191 + 2u;
        uint _2556 = _2191 + 10u;
        float _2570 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2552].w)) * _949) * 0.949999988079071044921875);
        float _2571 = _2570 * _2570;
        float _2572 = cbLight._m0[_2552].x + _1024;
        float _2573 = cbLight._m0[_2552].y + _1025;
        float _2574 = cbLight._m0[_2552].z + _1026;
        float _2578 = inversesqrt(dot(vec3(_2572, _2573, _2574), vec3(_2572, _2573, _2574)));
        float _2579 = _2578 * _2572;
        float _2580 = _2578 * _2573;
        float _2581 = _2578 * _2574;
        float _2582 = dot(vec3(_946, _947, _948), vec3(cbLight._m0[_2552].xyz));
        float _4663 = isnan(0.0) ? _2582 : (isnan(_2582) ? 0.0 : max(_2582, 0.0));
        float _2585 = isnan(1.0) ? _4663 : (isnan(_4663) ? 1.0 : min(_4663, 1.0));
        float _2586 = dot(vec3(_946, _947, _948), vec3(_2579, _2580, _2581));
        float _4674 = isnan(0.0) ? _2586 : (isnan(_2586) ? 0.0 : max(_2586, 0.0));
        float _2589 = isnan(1.0) ? _4674 : (isnan(_4674) ? 1.0 : min(_4674, 1.0));
        float _2590 = dot(vec3(cbLight._m0[_2552].xyz), vec3(_2579, _2580, _2581));
        float _4685 = isnan(0.0) ? _2590 : (isnan(_2590) ? 0.0 : max(_2590, 0.0));
        float _2594 = _2571 * _2571;
        float _2598 = ((_2589 * _2589) * (_2594 + (-1.0))) + 1.0;
        float _2607 = (exp2(log2(1.0 - (isnan(1.0) ? _4685 : (isnan(_4685) ? 1.0 : min(_4685, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2608 = 1.0 - _2571;
        float _2618 = (0.5 / (((_2359 * ((_2585 * _2608) + _2571)) + 9.9999999392252902907785028219223e-09) + (((_2359 * _2608) + _2571) * _2585))) * _2585;
        float _4696 = isnan(0.0) ? _2618 : (isnan(_2618) ? 0.0 : max(_2618, 0.0));
        float _2620 = (isnan(1.0) ? _4696 : (isnan(_4696) ? 1.0 : min(_4696, 1.0))) * (_2594 / ((_2598 * _2598) * 3.141590118408203125));
        float _2621 = isnan(1.0) ? _2206 : (isnan(_2206) ? 1.0 : min(_2206, 1.0));
        _2546 = (((_2607 * cbLight._m0[_2556].x) * _2620) * _2621) + _2482;
        _2548 = (((_2607 * cbLight._m0[_2556].y) * _2620) * _2621) + _2483;
        _2550 = (((_2607 * cbLight._m0[_2556].z) * _2620) * _2621) + _2484;
    }
    float _2656;
    float _2658;
    float _2660;
    if (_2285)
    {
        _2656 = _2546;
        _2658 = _2548;
        _2660 = _2550;
    }
    else
    {
        uint _2667 = _2191 + 3u;
        uint _2671 = _2191 + 11u;
        float _2685 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2667].w)) * _949) * 0.949999988079071044921875);
        float _2686 = _2685 * _2685;
        float _2687 = cbLight._m0[_2667].x + _1024;
        float _2688 = cbLight._m0[_2667].y + _1025;
        float _2689 = cbLight._m0[_2667].z + _1026;
        float _2693 = inversesqrt(dot(vec3(_2687, _2688, _2689), vec3(_2687, _2688, _2689)));
        float _2694 = _2693 * _2687;
        float _2695 = _2693 * _2688;
        float _2696 = _2693 * _2689;
        float _2697 = dot(vec3(_946, _947, _948), vec3(cbLight._m0[_2667].xyz));
        float _4712 = isnan(0.0) ? _2697 : (isnan(_2697) ? 0.0 : max(_2697, 0.0));
        float _2700 = isnan(1.0) ? _4712 : (isnan(_4712) ? 1.0 : min(_4712, 1.0));
        float _2701 = dot(vec3(_946, _947, _948), vec3(_2694, _2695, _2696));
        float _4723 = isnan(0.0) ? _2701 : (isnan(_2701) ? 0.0 : max(_2701, 0.0));
        float _2704 = isnan(1.0) ? _4723 : (isnan(_4723) ? 1.0 : min(_4723, 1.0));
        float _2705 = dot(vec3(cbLight._m0[_2667].xyz), vec3(_2694, _2695, _2696));
        float _4734 = isnan(0.0) ? _2705 : (isnan(_2705) ? 0.0 : max(_2705, 0.0));
        float _2709 = _2686 * _2686;
        float _2713 = ((_2704 * _2704) * (_2709 + (-1.0))) + 1.0;
        float _2722 = (exp2(log2(1.0 - (isnan(1.0) ? _4734 : (isnan(_4734) ? 1.0 : min(_4734, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2723 = 1.0 - _2686;
        float _2733 = (0.5 / (((_2359 * ((_2700 * _2723) + _2686)) + 9.9999999392252902907785028219223e-09) + (((_2359 * _2723) + _2686) * _2700))) * _2700;
        float _4745 = isnan(0.0) ? _2733 : (isnan(_2733) ? 0.0 : max(_2733, 0.0));
        float _2735 = (isnan(1.0) ? _4745 : (isnan(_4745) ? 1.0 : min(_4745, 1.0))) * (_2709 / ((_2713 * _2713) * 3.141590118408203125));
        float _2736 = isnan(1.0) ? _2207 : (isnan(_2207) ? 1.0 : min(_2207, 1.0));
        _2656 = (((_2722 * cbLight._m0[_2671].x) * _2735) * _2736) + _2546;
        _2658 = (((_2722 * cbLight._m0[_2671].y) * _2735) * _2736) + _2548;
        _2660 = (((_2722 * cbLight._m0[_2671].z) * _2735) * _2736) + _2550;
    }
    float _2871;
    float _2873;
    float _2875;
    float _2877;
    float _2879;
    float _2881;
    if (_2189.y == 0u)
    {
        float _2811 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2812 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2811;
        float _2813 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2811;
        float _2814 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2811;
        uvec4 _2826 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2827 = _2826.x;
        uint _2838 = uint((float(_2826.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1045) / _2827))) + floor(float(uint(cbSceneParam._m0[85u].x * _1044) / _2827)));
        float _2848 = (log2(_2814 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2849 = isnan(0.0) ? _2848 : (isnan(_2848) ? 0.0 : max(_2848, 0.0));
        uint _2852 = uint(isnan(14.0) ? _2849 : (isnan(_2849) ? 14.0 : min(_2849, 14.0)));
        uvec4 _2857 = texelFetch(g_lightClusterGridBuffer, int(((_2852 << 2u) + (_2838 << 6u)) >> 2u));
        uint _2858 = _2857.x;
        uint _2859 = _2826.z;
        float _2959;
        float _2961;
        float _2963;
        float _2965;
        float _2967;
        float _2969;
        if (((((1u << ((_2859 >> 4u) & 15u)) + 4294967295u) & _2858) == 0u) || ((_2859 & 240u) == 0u))
        {
            _2959 = 0.0;
            _2961 = 0.0;
            _2963 = 0.0;
            _2965 = 0.0;
            _2967 = 0.0;
            _2969 = 0.0;
        }
        else
        {
            float _2960;
            float _2962;
            float _2964;
            float _2966;
            float _2968;
            float _2970;
            float _3112 = 0.0;
            float _3113 = 0.0;
            float _3114 = 0.0;
            float _3115 = 0.0;
            float _3116 = 0.0;
            float _3117 = 0.0;
            uint _3118 = 0u;
            uint _3127;
            bool _3128;
            for (;;)
            {
                _3127 = texelFetch(g_lightClassification, int((((_2852 << 5u) + (_2838 << 9u)) + (_3118 << 2u)) >> 2u)).x;
                _3128 = _3127 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3128)
                {
                    frontier_phi_66_pred = _3112;
                    frontier_phi_66_pred_1 = _3117;
                    frontier_phi_66_pred_2 = _3116;
                    frontier_phi_66_pred_3 = _3115;
                    frontier_phi_66_pred_4 = _3114;
                    frontier_phi_66_pred_5 = _3113;
                }
                else
                {
                    float _3257;
                    float _3258;
                    float _3259;
                    float _3260;
                    float _3261;
                    float _3262;
                    uint _3263;
                    _3257 = _3112;
                    _3258 = _3113;
                    _3259 = _3114;
                    _3260 = _3115;
                    _3261 = _3116;
                    _3262 = _3117;
                    _3263 = _3127;
                    float _3184;
                    float _3185;
                    float _3186;
                    float _3187;
                    float _3188;
                    float _3189;
                    for (;;)
                    {
                        uint _3267 = uint(findLSB(_3263)) + (_3118 << 5u);
                        uint _3264 = (_3263 + 4294967295u) & _3263;
                        uint _3269 = _3267 * 48u;
                        vec4 _3283 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3269)).x, texelFetch(g_PointLightRenderingBuffer, int(_3269 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3269 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3269 + 3u)).x));
                        uint _3289 = (_3267 * 48u) + 4u;
                        vec4 _3302 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3289)).x, texelFetch(g_PointLightRenderingBuffer, int(_3289 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3289 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3289 + 3u)).x));
                        uint _3308 = (_3267 * 48u) + 8u;
                        vec3 _3319 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3308)).x, texelFetch(g_PointLightRenderingBuffer, int(_3308 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3308 + 2u)).x));
                        float _3323 = _3283.x - _2812;
                        float _3324 = _3283.y - _2813;
                        float _3325 = _3283.z - _2814;
                        float _3326 = dot(vec3(_3323, _3324, _3325), vec3(_3323, _3324, _3325));
                        float _3329 = inversesqrt(_3326);
                        float _3330 = _3329 * _3323;
                        float _3331 = _3329 * _3324;
                        float _3332 = _3329 * _3325;
                        float _3333 = dot(vec3(_1063, _1066, _1069), vec3(_3330, _3331, _3332));
                        float _3338 = 1.0 - (_3326 * _3283.w);
                        float _4771 = isnan(0.0) ? _3338 : (isnan(_3338) ? 0.0 : max(_3338, 0.0));
                        float _3339 = isnan(1.0) ? _4771 : (isnan(_4771) ? 1.0 : min(_4771, 1.0));
                        float _3340 = sqrt(_3326) * _3302.w;
                        float _3343 = 1.39999997615814208984375 / (_3340 + 1.39999997615814208984375);
                        float _3344 = _3343 * _3343;
                        float _3347 = ((1.0 - _3344) * _3333) + _3344;
                        float _3350 = _3340 * _3340;
                        float _3354 = ((isnan(0.0) ? _3347 : (isnan(_3347) ? 0.0 : max(_3347, 0.0))) * _3339) / ((_3350 * 0.699999988079071044921875) + 1.0);
                        float _3358 = (-0.0) - _2812;
                        float _3359 = (-0.0) - _2813;
                        float _3360 = (-0.0) - _2814;
                        float _3364 = inversesqrt(dot(vec3(_3358, _3359, _3360), vec3(_3358, _3359, _3360)));
                        float _3365 = _3364 * _3358;
                        float _3366 = _3364 * _3359;
                        float _3367 = _3364 * _3360;
                        float _3375 = exp2(log2(1.0 / ((_3350 * 3.5) + 5.0)) * 0.25);
                        float _3376 = 1.0 - _1123;
                        float _3383 = sqrt(1.0 - ((1.0 - (_3376 * _3376)) * (1.0 - (_3375 * _3375))));
                        float _3384 = _3383 * _3383;
                        float _3385 = _3384 * _3384;
                        float _3386 = _3365 + _3330;
                        float _3387 = _3366 + _3331;
                        float _3388 = _3367 + _3332;
                        float _3392 = inversesqrt(dot(vec3(_3386, _3387, _3388), vec3(_3386, _3387, _3388)));
                        float _3396 = dot(vec3(_1063, _1066, _1069), vec3(_3365, _3366, _3367));
                        float _4787 = isnan(0.0) ? _3396 : (isnan(_3396) ? 0.0 : max(_3396, 0.0));
                        float _3399 = isnan(1.0) ? _4787 : (isnan(_4787) ? 1.0 : min(_4787, 1.0));
                        float _3400 = dot(vec3(_1063, _1066, _1069), vec3(_3392 * _3386, _3392 * _3387, _3392 * _3388));
                        float _4798 = isnan(0.0) ? _3400 : (isnan(_3400) ? 0.0 : max(_3400, 0.0));
                        float _3403 = isnan(1.0) ? _4798 : (isnan(_4798) ? 1.0 : min(_4798, 1.0));
                        float _3407 = ((_3403 * _3403) * (_3385 + (-1.0))) + 1.0;
                        float _3408 = _3343 * _3384;
                        float _3409 = _3408 * _3408;
                        float _3412 = ((1.0 - _3409) * _3333) + _3409;
                        float _4809 = isnan(0.0) ? _3412 : (isnan(_3412) ? 0.0 : max(_3412, 0.0));
                        float _3413 = isnan(1.0) ? _4809 : (isnan(_4809) ? 1.0 : min(_4809, 1.0));
                        float _3414 = 1.0 - _3384;
                        float _3424 = (0.5 / (((_3413 * ((_3399 * _3414) + _3384)) + 9.9999999392252902907785028219223e-09) + (((_3413 * _3414) + _3384) * _3399))) * _3413;
                        float _4820 = isnan(0.0) ? _3424 : (isnan(_3424) ? 0.0 : max(_3424, 0.0));
                        float _3435 = (((_3385 * 3.1415927410125732421875) * (isnan(1.0) ? _4820 : (isnan(_4820) ? 1.0 : min(_4820, 1.0)))) / ((_3407 * _3407) * ((_3350 * 2.1991131305694580078125) + 3.141590118408203125))) * _3339;
                        _3187 = (_3354 * _3302.x) + _3260;
                        _3188 = (_3354 * _3302.y) + _3261;
                        _3189 = (_3354 * _3302.z) + _3262;
                        _3184 = (_3435 * _3319.x) + _3257;
                        _3185 = (_3435 * _3319.y) + _3258;
                        _3186 = (_3435 * _3319.z) + _3259;
                        if (_3264 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3257 = _3184;
                            _3258 = _3185;
                            _3259 = _3186;
                            _3260 = _3187;
                            _3261 = _3188;
                            _3262 = _3189;
                            _3263 = _3264;
                        }
                    }
                    frontier_phi_66_pred = _3184;
                    frontier_phi_66_pred_1 = _3189;
                    frontier_phi_66_pred_2 = _3188;
                    frontier_phi_66_pred_3 = _3187;
                    frontier_phi_66_pred_4 = _3186;
                    frontier_phi_66_pred_5 = _3185;
                }
                _2960 = frontier_phi_66_pred;
                _2970 = frontier_phi_66_pred_1;
                _2968 = frontier_phi_66_pred_2;
                _2966 = frontier_phi_66_pred_3;
                _2964 = frontier_phi_66_pred_4;
                _2962 = frontier_phi_66_pred_5;
                uint _3119 = _3118 + 1u;
                if (_3119 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3112 = _2960;
                    _3113 = _2962;
                    _3114 = _2964;
                    _3115 = _2966;
                    _3116 = _2968;
                    _3117 = _2970;
                    _3118 = _3119;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2959 = _2960;
            _2961 = _2962;
            _2963 = _2964;
            _2965 = _2966;
            _2967 = _2968;
            _2969 = _2970;
        }
        uvec4 _2973 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2974 = _2973.z;
        uint _2976 = (_2974 >> 8u) & 15u;
        float _3080;
        float _3082;
        float _3084;
        float _3086;
        float _3088;
        float _3090;
        if (((4294967295u << _2976) & _2858) == 0u)
        {
            _3080 = _2959;
            _3082 = _2961;
            _3084 = _2963;
            _3086 = _2965;
            _3088 = _2967;
            _3090 = _2969;
        }
        else
        {
            float _3105 = inversesqrt(dot(vec3(_2812, _2813, _2814), vec3(_2812, _2813, _2814)));
            float _3106 = _3105 * _2812;
            float _3107 = _3105 * _2813;
            float _3108 = _3105 * _2814;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2976 < ((_2974 >> 12u) & 15u))
            {
                float _3081;
                float _3083;
                float _3085;
                float _3087;
                float _3089;
                float _3091;
                float _3240 = _2959;
                float _3241 = _2961;
                float _3242 = _2963;
                float _3243 = _2965;
                float _3244 = _2967;
                float _3245 = _2969;
                uint _3246 = _2976;
                uint _3255;
                bool _3256;
                for (;;)
                {
                    _3255 = texelFetch(g_lightClassification, int((((_2852 << 5u) + (_2838 << 9u)) + (_3246 << 2u)) >> 2u)).x;
                    _3256 = _3255 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_3256)
                    {
                        frontier_phi_77_pred = _3245;
                        frontier_phi_77_pred_1 = _3244;
                        frontier_phi_77_pred_2 = _3243;
                        frontier_phi_77_pred_3 = _3242;
                        frontier_phi_77_pred_4 = _3241;
                        frontier_phi_77_pred_5 = _3240;
                    }
                    else
                    {
                        float _3449;
                        float _3450;
                        float _3451;
                        float _3452;
                        float _3453;
                        float _3454;
                        float _3742;
                        float _3743;
                        float _3744;
                        float _3745;
                        float _3746;
                        float _3747;
                        float _3462 = _3240;
                        float _3463 = _3241;
                        float _3464 = _3242;
                        float _3465 = _3243;
                        float _3466 = _3244;
                        float _3467 = _3245;
                        uint _3468 = _3255;
                        uint _3469;
                        vec4 _3494;
                        float _3495;
                        vec4 _3510;
                        vec3 _3522;
                        vec4 _3537;
                        vec4 _3552;
                        float _3598;
                        bool _3599;
                        for (;;)
                        {
                            uint _3479 = ((_3246 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3468));
                            _3469 = (_3468 + 4294967295u) & _3468;
                            uint _3481 = _3479 * 40u;
                            _3494 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3481)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3481 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3481 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3481 + 3u)).x));
                            _3495 = _3494.w;
                            uint _3497 = (_3479 * 40u) + 4u;
                            _3510 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3497)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3497 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3497 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3497 + 3u)).x));
                            uint _3512 = (_3479 * 40u) + 8u;
                            _3522 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3512)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3512 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3512 + 2u)).x));
                            uint _3524 = (_3479 * 40u) + 16u;
                            _3537 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3524)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3524 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3524 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3524 + 3u)).x));
                            uint _3539 = (_3479 * 40u) + 20u;
                            _3552 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3539)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3539 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3539 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3539 + 3u)).x));
                            uint _3554 = (_3479 * 40u) + 24u;
                            vec4 _3567 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3554)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3554 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3554 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3554 + 3u)).x));
                            uint _3573 = (_3479 * 40u) + 28u;
                            vec4 _3586 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3573)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3573 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3573 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3573 + 3u)).x));
                            _3598 = fma(_2814, _3586.z, fma(_2813, _3586.y, _3586.x * _2812)) + _3586.w;
                            _3599 = !((fma(_2814, _3567.z, fma(_2813, _3567.y, _3567.x * _2812)) + _3567.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3599)
                            {
                                float _3626 = _3494.x - _2812;
                                float _3627 = _3494.y - _2813;
                                float _3628 = _3494.z - _2814;
                                float _3629 = dot(vec3(_3626, _3627, _3628), vec3(_3626, _3627, _3628));
                                float _3632 = inversesqrt(_3629);
                                float _3633 = _3632 * _3626;
                                float _3634 = _3632 * _3627;
                                float _3635 = _3632 * _3628;
                                float _3639 = 1.0 - (_3629 / (_3495 * _3495));
                                float _4831 = isnan(0.0) ? _3639 : (isnan(_3639) ? 0.0 : max(_3639, 0.0));
                                float _3640 = isnan(1.0) ? _4831 : (isnan(_4831) ? 1.0 : min(_4831, 1.0));
                                float _3644 = sqrt(_3629) * _3510.w;
                                float _3646 = 1.39999997615814208984375 / (_3644 + 1.39999997615814208984375);
                                float _3647 = _3646 * _3646;
                                float _3650 = ((1.0 - _3647) * dot(vec3(_3633, _3634, _3635), vec3(_1063, _1066, _1069))) + _3647;
                                float _3653 = _3644 * _3644;
                                float _3657 = (fma(_2814, _3537.z, fma(_2813, _3537.y, _3537.x * _2812)) + _3537.w) / _3598;
                                float _3658 = (fma(_2814, _3552.z, fma(_2813, _3552.y, _3552.x * _2812)) + _3552.w) / _3598;
                                float _3662 = 1.0 - dot(vec2(_3657, _3658), vec2(_3657, _3658));
                                float _4847 = isnan(0.0) ? _3662 : (isnan(_3662) ? 0.0 : max(_3662, 0.0));
                                float _3663 = isnan(1.0) ? _4847 : (isnan(_4847) ? 1.0 : min(_4847, 1.0));
                                float _3664 = _3663 * (((isnan(0.0) ? _3650 : (isnan(_3650) ? 0.0 : max(_3650, 0.0))) * _3640) / ((_3653 * 0.699999988079071044921875) + 1.0));
                                float _3676 = exp2(log2(1.0 / ((_3653 * 3.5) + 5.0)) * 0.25);
                                float _3677 = 1.0 - _1123;
                                float _3684 = sqrt(1.0 - ((1.0 - (_3677 * _3677)) * (1.0 - (_3676 * _3676))));
                                float _3685 = _3684 * _3684;
                                float _3686 = _3685 * _3685;
                                float _3687 = _3633 - _3106;
                                float _3688 = _3634 - _3107;
                                float _3689 = _3635 - _3108;
                                float _3693 = inversesqrt(dot(vec3(_3687, _3688, _3689), vec3(_3687, _3688, _3689)));
                                float _3697 = dot(vec3(_1063, _1066, _1069), vec3((-0.0) - _3106, (-0.0) - _3107, (-0.0) - _3108));
                                float _4858 = isnan(0.0) ? _3697 : (isnan(_3697) ? 0.0 : max(_3697, 0.0));
                                float _3700 = isnan(1.0) ? _4858 : (isnan(_4858) ? 1.0 : min(_4858, 1.0));
                                float _3701 = dot(vec3(_1063, _1066, _1069), vec3(_3693 * _3687, _3693 * _3688, _3693 * _3689));
                                float _4869 = isnan(0.0) ? _3701 : (isnan(_3701) ? 0.0 : max(_3701, 0.0));
                                float _3704 = isnan(1.0) ? _4869 : (isnan(_4869) ? 1.0 : min(_4869, 1.0));
                                float _3708 = ((_3704 * _3704) * (_3686 + (-1.0))) + 1.0;
                                float _3709 = _3646 * _3685;
                                float _3710 = _3709 * _3709;
                                float _3716 = ((1.0 - _3710) * dot(vec3(_1063, _1066, _1069), vec3(_3633, _3634, _3635))) + _3710;
                                float _4880 = isnan(0.0) ? _3716 : (isnan(_3716) ? 0.0 : max(_3716, 0.0));
                                float _3717 = isnan(1.0) ? _4880 : (isnan(_4880) ? 1.0 : min(_4880, 1.0));
                                float _3718 = 1.0 - _3685;
                                float _3728 = (0.5 / (((_3717 * ((_3700 * _3718) + _3685)) + 9.9999999392252902907785028219223e-09) + (((_3717 * _3718) + _3685) * _3700))) * _3717;
                                float _4891 = isnan(0.0) ? _3728 : (isnan(_3728) ? 0.0 : max(_3728, 0.0));
                                float _3738 = (_3663 * _3640) * (((_3686 * 3.1415927410125732421875) * (isnan(1.0) ? _4891 : (isnan(_4891) ? 1.0 : min(_4891, 1.0)))) / ((_3708 * _3708) * ((_3653 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3664 * _3510.y;
                                frontier_phi_83_pred_1 = _3664 * _3510.x;
                                frontier_phi_83_pred_2 = _3738 * _3522.z;
                                frontier_phi_83_pred_3 = _3738 * _3522.y;
                                frontier_phi_83_pred_4 = _3738 * _3522.x;
                                frontier_phi_83_pred_5 = _3664 * _3510.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3746 = frontier_phi_83_pred;
                            _3745 = frontier_phi_83_pred_1;
                            _3744 = frontier_phi_83_pred_2;
                            _3743 = frontier_phi_83_pred_3;
                            _3742 = frontier_phi_83_pred_4;
                            _3747 = frontier_phi_83_pred_5;
                            _3452 = _3745 + _3465;
                            _3453 = _3746 + _3466;
                            _3454 = _3747 + _3467;
                            _3449 = _3742 + _3462;
                            _3450 = _3743 + _3463;
                            _3451 = _3744 + _3464;
                            if (_3469 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3462 = _3449;
                                _3463 = _3450;
                                _3464 = _3451;
                                _3465 = _3452;
                                _3466 = _3453;
                                _3467 = _3454;
                                _3468 = _3469;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3454;
                        frontier_phi_77_pred_1 = _3453;
                        frontier_phi_77_pred_2 = _3452;
                        frontier_phi_77_pred_3 = _3451;
                        frontier_phi_77_pred_4 = _3450;
                        frontier_phi_77_pred_5 = _3449;
                    }
                    _3091 = frontier_phi_77_pred;
                    _3089 = frontier_phi_77_pred_1;
                    _3087 = frontier_phi_77_pred_2;
                    _3085 = frontier_phi_77_pred_3;
                    _3083 = frontier_phi_77_pred_4;
                    _3081 = frontier_phi_77_pred_5;
                    uint _3247 = _3246 + 1u;
                    if (_3247 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3240 = _3081;
                        _3241 = _3083;
                        _3242 = _3085;
                        _3243 = _3087;
                        _3244 = _3089;
                        _3245 = _3091;
                        _3246 = _3247;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _3085;
                frontier_phi_58_59_ladder_1 = _3091;
                frontier_phi_58_59_ladder_2 = _3089;
                frontier_phi_58_59_ladder_3 = _3087;
                frontier_phi_58_59_ladder_4 = _3083;
                frontier_phi_58_59_ladder_5 = _3081;
            }
            else
            {
                frontier_phi_58_59_ladder = _2963;
                frontier_phi_58_59_ladder_1 = _2969;
                frontier_phi_58_59_ladder_2 = _2967;
                frontier_phi_58_59_ladder_3 = _2965;
                frontier_phi_58_59_ladder_4 = _2961;
                frontier_phi_58_59_ladder_5 = _2959;
            }
            _3080 = frontier_phi_58_59_ladder_5;
            _3082 = frontier_phi_58_59_ladder_4;
            _3084 = frontier_phi_58_59_ladder;
            _3086 = frontier_phi_58_59_ladder_3;
            _3088 = frontier_phi_58_59_ladder_2;
            _3090 = frontier_phi_58_59_ladder_1;
        }
        float _3095 = isnan(1.0) ? _1107 : (isnan(_1107) ? 1.0 : min(_1107, 1.0));
        _2871 = (_3095 * _3086) + _2323;
        _2873 = (_3095 * _3088) + _2325;
        _2875 = (_3095 * _3090) + _2327;
        _2877 = ((_3080 * 0.039999999105930328369140625) * _3095) + _2656;
        _2879 = ((_3082 * 0.039999999105930328369140625) * _3095) + _2658;
        _2881 = ((_3084 * 0.039999999105930328369140625) * _3095) + _2660;
    }
    else
    {
        _2871 = _2323;
        _2873 = _2325;
        _2875 = _2327;
        _2877 = _2656;
        _2879 = _2658;
        _2881 = _2660;
    }
    float _4907 = isnan(0.0) ? _1092 : (isnan(_1092) ? 0.0 : max(_1092, 0.0));
    float _4918 = isnan(0.0) ? _1093 : (isnan(_1093) ? 0.0 : max(_1093, 0.0));
    float _4929 = isnan(0.0) ? _1094 : (isnan(_1094) ? 0.0 : max(_1094, 0.0));
    float _2898 = ((isnan(1.0) ? _4907 : (isnan(_4907) ? 1.0 : min(_4907, 1.0))) * (_2871 + ((isnan(0.0) ? _1863 : (isnan(_1863) ? 0.0 : max(_1863, 0.0))) * _1107))) + ((_2877 + ((isnan(0.0) ? _2155 : (isnan(_2155) ? 0.0 : max(_2155, 0.0))) * _1942)) * cbPerFrame._m0[3u].x);
    float _2899 = ((isnan(1.0) ? _4918 : (isnan(_4918) ? 1.0 : min(_4918, 1.0))) * (_2873 + ((isnan(0.0) ? _1866 : (isnan(_1866) ? 0.0 : max(_1866, 0.0))) * _1107))) + ((_2879 + ((isnan(0.0) ? _2158 : (isnan(_2158) ? 0.0 : max(_2158, 0.0))) * _1942)) * cbPerFrame._m0[3u].x);
    float _2900 = ((isnan(1.0) ? _4929 : (isnan(_4929) ? 1.0 : min(_4929, 1.0))) * (_2875 + ((isnan(0.0) ? _1869 : (isnan(_1869) ? 0.0 : max(_1869, 0.0))) * _1107))) + ((_2881 + ((isnan(0.0) ? _2161 : (isnan(_2161) ? 0.0 : max(_2161, 0.0))) * _1942)) * cbPerFrame._m0[3u].x);
    uint _2901 = _289 + 6u;
    float _2909 = _1044 / cbSceneParam._m0[86u].x;
    float _2910 = _1045 / cbSceneParam._m0[86u].y;
    vec4 _2924 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2909, _2910, (log2((isnan(cbSceneParam._m0[77u].w) ? _967 : (isnan(_967) ? cbSceneParam._m0[77u].w : min(_967, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2926 = _2924.x;
    float _2927 = _2924.y;
    float _2928 = _2924.z;
    float _2929 = _2924.w;
    float _3022;
    float _3024;
    float _3026;
    float _3028;
    if (_967 > cbSceneParam._m0[78u].w)
    {
        float _2984 = isnan(_967) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _967 : min(cbSceneParam._m0[80u].w, _967));
        float _2985 = _2984 / _967;
        float _2996 = _2985 * _1017;
        float _2997 = _1018 * _2985;
        float _2998 = (-0.0) - _2997;
        float _3000 = _2985 * _1019;
        float _3002 = (cbSceneParam._m0[77u].w * _2998) / _2984;
        float _3003 = _3002 + cbSceneParam._m0[79u].w;
        float _3004 = cbSceneParam._m0[79u].w - _2997;
        float _3010 = sqrt(((_2996 * _2996) + (_2997 * _2997)) + (_3000 * _3000));
        float _3013 = (1.0 - (cbSceneParam._m0[77u].w / _2984)) * _3010;
        float _3018 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3020 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3197;
        if (abs((_2998 - _3002) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3197 = ((((_3003 > 0.0) ? exp2(_3018 * _3003) : (2.0 - exp2(_3020 * _3003))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3013;
        }
        else
        {
            float _3141 = 1.0 / cbSceneParam._m0[80u].x;
            float _3142 = isnan(_3004) ? _3003 : (isnan(_3003) ? _3004 : max(_3003, _3004));
            float _3143 = isnan(_3004) ? _3003 : (isnan(_3003) ? _3004 : min(_3003, _3004));
            float _3152 = isnan(0.0) ? _3142 : (isnan(_3142) ? 0.0 : min(_3142, 0.0));
            float _3153 = isnan(0.0) ? _3143 : (isnan(_3143) ? 0.0 : min(_3143, 0.0));
            _3197 = ((abs(_3010 / _2998) * cbSceneParam._m0[80u].y) * ((((_3152 - _3153) * 2.0) - ((exp2(_3018 * (isnan(0.0) ? _3142 : (isnan(_3142) ? 0.0 : max(_3142, 0.0)))) - exp2(_3018 * (isnan(0.0) ? _3143 : (isnan(_3143) ? 0.0 : max(_3143, 0.0))))) * _3141)) - ((exp2(_3020 * _3152) - exp2(_3020 * _3153)) * _3141))) + (_3013 * cbSceneParam._m0[80u].z);
        }
        vec4 _3199 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2909, _2910, 1.0), 0.0);
        float _3208 = exp2((_3197 * (-1.44269502162933349609375)) * (1.0 - _3199.w));
        float _3209 = log2(_3208);
        float _3225 = log2(_2929);
        _3022 = (exp2(_3225 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3209 * cbSceneParam._m0[78u].x)) * _3199.x) / cbSceneParam._m0[78u].x)) + _2926;
        _3024 = (exp2(_3225 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3209 * cbSceneParam._m0[78u].y)) * _3199.y) / cbSceneParam._m0[78u].y)) + _2927;
        _3026 = (exp2(_3225 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3209 * cbSceneParam._m0[78u].z)) * _3199.z) / cbSceneParam._m0[78u].z)) + _2928;
        _3028 = _3208 * _2929;
    }
    else
    {
        _3022 = _2926;
        _3024 = _2927;
        _3026 = _2928;
        _3028 = _2929;
    }
    bool _3235;
    vec4 _3038;
    vec4 _3060;
    float _3062;
    float _3066;
    float _3067;
    float _3068;
    float _3069;
    bool _3079;
    for (;;)
    {
        _3038 = cbMatDynParam._m0[0u];
        float _3040 = roundEven(_3038.y);
        bool _3041 = _3040 == 3.0;
        float _3042 = log2(_3028);
        float _3049 = exp2(_3042 * cbSceneParam._m0[78u].x) * _2898;
        float _3050 = exp2(_3042 * cbSceneParam._m0[78u].y) * _2899;
        float _3051 = exp2(_3042 * cbSceneParam._m0[78u].z) * _2900;
        float _3058 = _1033 + (-0.5);
        _3060 = cbMtdParam._m0[1u];
        _3062 = _3060.y * _3058;
        float _3065 = (_3040 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3066 = _3065 * (_3041 ? _3049 : (_3049 + (cbSceneParam._m0[72u].w * _3022)));
        _3067 = _3065 * (_3041 ? _3050 : (_3050 + (cbSceneParam._m0[72u].w * _3024)));
        _3068 = _3065 * (_3041 ? _3051 : (_3051 + (cbSceneParam._m0[72u].w * _3026)));
        _3069 = _3058 * 0.999000012874603271484375;
        _3079 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3079)
        {
            if ((cbInstanceData._m0[_289 + 7u].x + _3069) < 0.5)
            {
                _3235 = true;
                break;
            }
        }
        uint _3176 = _1082 + uint(_3038.w);
        if ((cbInstanceData._m0[_3176].w < 1.0) && ((cbInstanceData._m0[_3176].w + _3069) < 0.5))
        {
            _3235 = true;
            break;
        }
        if ((_3062 + 1.0) < _3060.x)
        {
            _3235 = true;
            break;
        }
        _3235 = false;
        break;
    }
    float _3440;
    if (_3235)
    {
        discard_state = true;
        _3440 = 0.0;
    }
    else
    {
        _3440 = cbInstanceData._m0[_2901].w;
    }
    SV_Target.x = _3066;
    SV_Target.y = _3067;
    SV_Target.z = _3068;
    SV_Target.w = _3440;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2901].w;
    discard_exit();
}


